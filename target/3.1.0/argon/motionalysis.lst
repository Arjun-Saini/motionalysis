
/Users/trylaarsdam/Documents/dev/motionalysis/target/3.1.0/argon/motionalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006ff0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000bb010  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000084  2003d9a8  000bb014  0001d9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000dc4  2003da30  2003da30  0002da30  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000bb098  000bb098  0002b098  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000bb0c0  000bb0c0  0002b0c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0011ebee  00000000  00000000  0002b0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00013297  00000000  00000000  00149cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00039c75  00000000  00000000  0015cf49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000031b8  00000000  00000000  00196bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 0000b120  00000000  00000000  00199d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037e69  00000000  00000000  001a4e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003fbad  00000000  00000000  001dccff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012a958  00000000  00000000  0021c8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00008b80  00000000  00000000  00347204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f005 ff3f 	bl	b9eb4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f005 ff61 	bl	b9f04 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d9a8 	.word	0x2003d9a8
   b404c:	000bb014 	.word	0x000bb014
   b4050:	2003da2c 	.word	0x2003da2c
   b4054:	2003da30 	.word	0x2003da30
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f005 fa65 	bl	b9530 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42a5      	cmp	r5, r4
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bafec 	.word	0x000bafec
   b4080:	000bb010 	.word	0x000bb010

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bc8a 	b.w	b499c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fcbd 	bl	b4a08 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f005 ba05 	b.w	b94a0 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 bc5b 	b.w	b6950 <malloc>

000b409a <_Znaj>:
   b409a:	f002 bc59 	b.w	b6950 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f002 bc5f 	b.w	b6960 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   b40b2:	4770      	bx	lr

000b40b4 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b40b4:	b510      	push	{r4, lr}
   b40b6:	4604      	mov	r4, r0
   b40b8:	3004      	adds	r0, #4
   b40ba:	f004 fa31 	bl	b8520 <_ZN6StringD1Ev>
   b40be:	4620      	mov	r0, r4
   b40c0:	bd10      	pop	{r4, pc}

000b40c2 <_ZN14http_request_tD1Ev>:
} http_request_t;
   b40c2:	b510      	push	{r4, lr}
   b40c4:	4604      	mov	r4, r0
   b40c6:	303c      	adds	r0, #60	; 0x3c
   b40c8:	f004 fa2a 	bl	b8520 <_ZN6StringD1Ev>
   b40cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b40d0:	f004 fa26 	bl	b8520 <_ZN6StringD1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f004 fa23 	bl	b8520 <_ZN6StringD1Ev>
   b40da:	4620      	mov	r0, r4
   b40dc:	bd10      	pop	{r4, pc}

000b40de <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   b40de:	b510      	push	{r4, lr}
   b40e0:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b40e2:	6800      	ldr	r0, [r0, #0]
   b40e4:	b108      	cbz	r0, b40ea <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   b40e6:	f002 fc3b 	bl	b6960 <free>
class SystemClass {
   b40ea:	4620      	mov	r0, r4
   b40ec:	bd10      	pop	{r4, pc}

000b40ee <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   b40ee:	b538      	push	{r3, r4, r5, lr}
   b40f0:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   b40f2:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   b40f4:	b128      	cbz	r0, b4102 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   b40f6:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   b40f8:	210c      	movs	r1, #12
   b40fa:	f005 fb20 	bl	b973e <_ZdlPvj>
            wakeupSource = next;
   b40fe:	4628      	mov	r0, r5
        while (wakeupSource) {
   b4100:	e7f8      	b.n	b40f4 <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   b4102:	4620      	mov	r0, r4
   b4104:	bd38      	pop	{r3, r4, r5, pc}

000b4106 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   b4106:	b510      	push	{r4, lr}
   b4108:	4604      	mov	r4, r0

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   b410a:	b93a      	cbnz	r2, b411c <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b410c:	6803      	ldr	r3, [r0, #0]
   b410e:	689b      	ldr	r3, [r3, #8]
   b4110:	4798      	blx	r3
        n += println();
   b4112:	4620      	mov	r0, r4
    }
   b4114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b4118:	f004 b8ef 	b.w	b82fa <_ZN5Print7printlnEv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b411c:	b2d2      	uxtb	r2, r2
   b411e:	f004 f902 	bl	b8326 <_ZN5Print11printNumberEmh>
   b4122:	e7f6      	b.n	b4112 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0xc>

000b4124 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b4124:	b570      	push	{r4, r5, r6, lr}
   b4126:	4605      	mov	r5, r0
   b4128:	460c      	mov	r4, r1
    if (base == 0) {
   b412a:	4616      	mov	r6, r2
   b412c:	b942      	cbnz	r2, b4140 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x1c>
        return write(n);
   b412e:	6803      	ldr	r3, [r0, #0]
   b4130:	b2c9      	uxtb	r1, r1
   b4132:	689b      	ldr	r3, [r3, #8]
   b4134:	4798      	blx	r3
        n += println();
   b4136:	4628      	mov	r0, r5
    }
   b4138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        n += println();
   b413c:	f004 b8dd 	b.w	b82fa <_ZN5Print7printlnEv>
        if (n < 0 && base == 10) {
   b4140:	2900      	cmp	r1, #0
   b4142:	da0a      	bge.n	b415a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
   b4144:	2a0a      	cmp	r2, #10
   b4146:	d108      	bne.n	b415a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
            t = print('-');
   b4148:	212d      	movs	r1, #45	; 0x2d
   b414a:	f004 f8cd 	bl	b82e8 <_ZN5Print5printEc>
            val = -n;
   b414e:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b4150:	b2f2      	uxtb	r2, r6
   b4152:	4628      	mov	r0, r5
   b4154:	f004 f8e7 	bl	b8326 <_ZN5Print11printNumberEmh>
   b4158:	e7ed      	b.n	b4136 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x12>
            val = n;
   b415a:	4621      	mov	r1, r4
   b415c:	e7f8      	b.n	b4150 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x2c>

000b415e <_ZN9USBSerial4lockEv.isra.0>:
#else
		return true;
#endif
	}

	void lock()
   b415e:	b508      	push	{r3, lr}
		return os_mutex_recursive_t(system_internal(2, nullptr));
   b4160:	2100      	movs	r1, #0
   b4162:	2002      	movs	r0, #2
   b4164:	f002 fb04 	bl	b6770 <system_internal>
	{
#if PLATFORM_THREADING
		os_mutex_recursive_lock(get_mutex());
#endif
	}
   b4168:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		os_mutex_recursive_lock(get_mutex());
   b416c:	f002 b8d0 	b.w	b6310 <os_mutex_recursive_lock>

000b4170 <_ZN10HttpClientD1Ev>:

class HttpClient {
   b4170:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4172:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b4174:	4b0a      	ldr	r3, [pc, #40]	; (b41a0 <_ZN10HttpClientD1Ev+0x30>)
   b4176:	6003      	str	r3, [r0, #0]
   b4178:	4605      	mov	r5, r0
   b417a:	b17c      	cbz	r4, b419c <_ZN10HttpClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b417c:	6863      	ldr	r3, [r4, #4]
   b417e:	3b01      	subs	r3, #1
   b4180:	6063      	str	r3, [r4, #4]
   b4182:	b95b      	cbnz	r3, b419c <_ZN10HttpClientD1Ev+0x2c>
          _M_dispose();
   b4184:	6823      	ldr	r3, [r4, #0]
   b4186:	4620      	mov	r0, r4
   b4188:	689b      	ldr	r3, [r3, #8]
   b418a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b418c:	68a3      	ldr	r3, [r4, #8]
   b418e:	3b01      	subs	r3, #1
   b4190:	60a3      	str	r3, [r4, #8]
   b4192:	b91b      	cbnz	r3, b419c <_ZN10HttpClientD1Ev+0x2c>
            _M_destroy();
   b4194:	6823      	ldr	r3, [r4, #0]
   b4196:	4620      	mov	r0, r4
   b4198:	68db      	ldr	r3, [r3, #12]
   b419a:	4798      	blx	r3
   b419c:	4628      	mov	r0, r5
   b419e:	bd38      	pop	{r3, r4, r5, pc}
   b41a0:	000bac30 	.word	0x000bac30

000b41a4 <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b41a4:	b40e      	push	{r1, r2, r3}
   b41a6:	b503      	push	{r0, r1, lr}
   b41a8:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   b41aa:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b41ac:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b41b0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b41b2:	f004 f8d6 	bl	b8362 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b41b6:	b002      	add	sp, #8
   b41b8:	f85d eb04 	ldr.w	lr, [sp], #4
   b41bc:	b003      	add	sp, #12
   b41be:	4770      	bx	lr

000b41c0 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b41c0:	2300      	movs	r3, #0
   b41c2:	6840      	ldr	r0, [r0, #4]
   b41c4:	461a      	mov	r2, r3
   b41c6:	4619      	mov	r1, r3
   b41c8:	f002 bb6a 	b.w	b68a0 <network_on>

000b41cc <_ZN5spark9WiFiClass3offEv>:
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b41cc:	2300      	movs	r3, #0
   b41ce:	6840      	ldr	r0, [r0, #4]
   b41d0:	461a      	mov	r2, r3
   b41d2:	4619      	mov	r1, r3
   b41d4:	f002 bb6c 	b.w	b68b0 <network_off>

000b41d8 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   b41d8:	2300      	movs	r3, #0
   b41da:	6840      	ldr	r0, [r0, #4]
   b41dc:	461a      	mov	r2, r3
   b41de:	f002 bb3f 	b.w	b6860 <network_connect>

000b41e2 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b41e2:	2200      	movs	r2, #0
   b41e4:	6840      	ldr	r0, [r0, #4]
   b41e6:	4611      	mov	r1, r2
   b41e8:	f002 bb52 	b.w	b6890 <network_ready>

000b41ec <_Z16HTTPRequestSetupv>:

int networkCount;
WiFiAccessPoint networks[5];
String networkBuffer;

void HTTPRequestSetup() {
   b41ec:	b510      	push	{r4, lr}
  request.hostname = kHTTPHostname;
   b41ee:	4c07      	ldr	r4, [pc, #28]	; (b420c <_Z16HTTPRequestSetupv+0x20>)
   b41f0:	4907      	ldr	r1, [pc, #28]	; (b4210 <_Z16HTTPRequestSetupv+0x24>)
   b41f2:	4620      	mov	r0, r4
   b41f4:	f004 fa0d 	bl	b8612 <_ZN6StringaSEPKc>
  request.port = kHTTPRequestPort;
   b41f8:	2350      	movs	r3, #80	; 0x50
   b41fa:	63a3      	str	r3, [r4, #56]	; 0x38
  request.path = "/";
   b41fc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b4200:	4904      	ldr	r1, [pc, #16]	; (b4214 <_Z16HTTPRequestSetupv+0x28>)
}
   b4202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  request.path = "/";
   b4206:	f004 ba04 	b.w	b8612 <_ZN6StringaSEPKc>
   b420a:	bf00      	nop
   b420c:	2003e050 	.word	0x2003e050
   b4210:	000ba13c 	.word	0x000ba13c
   b4214:	000ba148 	.word	0x000ba148

000b4218 <_Z13writeRegisterhh>:
#include "constants.hpp"
#include <Adafruit_LIS3DH.h>

Adafruit_LIS3DH lis3dh = Adafruit_LIS3DH();

void writeRegister(byte reg, byte data) {
   b4218:	b538      	push	{r3, r4, r5, lr}
   b421a:	460c      	mov	r4, r1
   b421c:	4605      	mov	r5, r0
  Wire.beginTransmission(kLis3dhAddress);
   b421e:	f005 fa61 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b4222:	2118      	movs	r1, #24
   b4224:	f003 fee2 	bl	b7fec <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   b4228:	f005 fa5c 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b422c:	6803      	ldr	r3, [r0, #0]
   b422e:	4629      	mov	r1, r5
   b4230:	689b      	ldr	r3, [r3, #8]
   b4232:	4798      	blx	r3
  Wire.write(data);
   b4234:	f005 fa56 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b4238:	6803      	ldr	r3, [r0, #0]
   b423a:	4621      	mov	r1, r4
   b423c:	689b      	ldr	r3, [r3, #8]
   b423e:	4798      	blx	r3
  Wire.endTransmission();
   b4240:	f005 fa50 	bl	b96e4 <_Z19__fetch_global_Wirev>
}
   b4244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();
   b4248:	f003 bed7 	b.w	b7ffa <_ZN7TwoWire15endTransmissionEv>

000b424c <_Z12readRegisterh>:

unsigned int readRegister(byte reg) {
   b424c:	b510      	push	{r4, lr}
   b424e:	4604      	mov	r4, r0
  Wire.beginTransmission(kLis3dhAddress);
   b4250:	f005 fa48 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b4254:	2118      	movs	r1, #24
   b4256:	f003 fec9 	bl	b7fec <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   b425a:	f005 fa43 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b425e:	6803      	ldr	r3, [r0, #0]
   b4260:	4621      	mov	r1, r4
   b4262:	689b      	ldr	r3, [r3, #8]
   b4264:	4798      	blx	r3
  Wire.endTransmission();
   b4266:	f005 fa3d 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b426a:	f003 fec6 	bl	b7ffa <_ZN7TwoWire15endTransmissionEv>
 
  Wire.requestFrom(kLis3dhAddress, 1);
   b426e:	f005 fa39 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b4272:	2201      	movs	r2, #1
   b4274:	2118      	movs	r1, #24
   b4276:	f003 feb2 	bl	b7fde <_ZN7TwoWire11requestFromEhj>
  return Wire.read();
   b427a:	f005 fa33 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b427e:	6803      	ldr	r3, [r0, #0]
}
   b4280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return Wire.read();
   b4284:	695b      	ldr	r3, [r3, #20]
   b4286:	4718      	bx	r3

000b4288 <_Z8init_ACCv>:

void init_ACC(void) {
   b4288:	b508      	push	{r3, lr}
  readRegister(0x21);
   b428a:	2021      	movs	r0, #33	; 0x21
   b428c:	f7ff ffde 	bl	b424c <_Z12readRegisterh>
  readRegister(0x26);
   b4290:	2026      	movs	r0, #38	; 0x26
   b4292:	f7ff ffdb 	bl	b424c <_Z12readRegisterh>
  readRegister(LIS3DH_REG_INT1SRC);
   b4296:	2031      	movs	r0, #49	; 0x31
   b4298:	f7ff ffd8 	bl	b424c <_Z12readRegisterh>
  writeRegister(0x20, 0x57); //Write A7h into CTRL_REG1;      // Turn on the sensor, enable X, Y, Z axes with ODR = 100Hz normal mode.
   b429c:	2157      	movs	r1, #87	; 0x57
   b429e:	2020      	movs	r0, #32
   b42a0:	f7ff ffba 	bl	b4218 <_Z13writeRegisterhh>
  writeRegister(0x21, 0x09); //Write 09h into CTRL_REG2;      // High-pass filter (HPF) enabled
   b42a4:	2109      	movs	r1, #9
   b42a6:	2021      	movs	r0, #33	; 0x21
   b42a8:	f7ff ffb6 	bl	b4218 <_Z13writeRegisterhh>
  writeRegister(0x22, 0x40); //Write 40h into CTRL_REG3;      // ACC AOI1 interrupt signal is routed to INT1 pin.
   b42ac:	2140      	movs	r1, #64	; 0x40
   b42ae:	2022      	movs	r0, #34	; 0x22
   b42b0:	f7ff ffb2 	bl	b4218 <_Z13writeRegisterhh>
  writeRegister(0x23, 0x00); //Write 00h into CTRL_REG4;      // Full Scale = +/-2 g
   b42b4:	2100      	movs	r1, #0
   b42b6:	2023      	movs	r0, #35	; 0x23
   b42b8:	f7ff ffae 	bl	b4218 <_Z13writeRegisterhh>
  writeRegister(0x24, 0x08); //Write 08h into CTRL_REG5;      // Default value is 00 for no latching. Interrupt signals on INT1 pin is not latched.
   b42bc:	2108      	movs	r1, #8
   b42be:	2024      	movs	r0, #36	; 0x24
   b42c0:	f7ff ffaa 	bl	b4218 <_Z13writeRegisterhh>
                                                              //Users don’t need to read the INT1_SRC register to clear the interrupt signal.
  // configurations for wakeup and motionless detection
  writeRegister(0x32, 0x10); //Write 10h into INT1_THS;          // Threshold (THS) = 16LSBs * 15.625mg/LSB = 250mg.
   b42c4:	2110      	movs	r1, #16
   b42c6:	2032      	movs	r0, #50	; 0x32
   b42c8:	f7ff ffa6 	bl	b4218 <_Z13writeRegisterhh>
  writeRegister(0x33, 0x00); //Write 00h into INT1_DURATION;     // Duration = 1LSBs * (1/10Hz) = 0.1s.
   b42cc:	2100      	movs	r1, #0
   b42ce:	2033      	movs	r0, #51	; 0x33
   b42d0:	f7ff ffa2 	bl	b4218 <_Z13writeRegisterhh>
  //readRegister();  //Dummy read to force the HP filter to set reference acceleration/tilt value
  writeRegister(0x30, 0x2A); //Write 2Ah into INT1_CFG;          // Enable XLIE, YLIE, ZLIE interrupt generation, OR logic.
  //lis3dh.setRange(LIS3DH_RANGE_2_G);   // 2, 4, 8 or 16 G!
}
   b42d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  writeRegister(0x30, 0x2A); //Write 2Ah into INT1_CFG;          // Enable XLIE, YLIE, ZLIE interrupt generation, OR logic.
   b42d8:	212a      	movs	r1, #42	; 0x2a
   b42da:	2030      	movs	r0, #48	; 0x30
   b42dc:	f7ff bf9c 	b.w	b4218 <_Z13writeRegisterhh>

000b42e0 <_Z14initFromEEPROMv>:
    }
  }
  init_ACC();
}

void initFromEEPROM() {
   b42e0:	b538      	push	{r3, r4, r5, lr}
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b42e2:	4d27      	ldr	r5, [pc, #156]	; (b4380 <_Z14initFromEEPROMv+0xa0>)
   b42e4:	4c27      	ldr	r4, [pc, #156]	; (b4384 <_Z14initFromEEPROMv+0xa4>)
  EEPROM.get(kRecordingIntervalEEPROMAddress, recordingInterval);
   b42e6:	f005 f9d1 	bl	b968c <_Z21__fetch_global_EEPROMv>
   b42ea:	2204      	movs	r2, #4
   b42ec:	4629      	mov	r1, r5
   b42ee:	2064      	movs	r0, #100	; 0x64
   b42f0:	f002 f83e 	bl	b6370 <HAL_EEPROM_Get>
  EEPROM.get(kDsidEEPROMAddress, dsid);
   b42f4:	f005 f9ca 	bl	b968c <_Z21__fetch_global_EEPROMv>
   b42f8:	4923      	ldr	r1, [pc, #140]	; (b4388 <_Z14initFromEEPROMv+0xa8>)
   b42fa:	2204      	movs	r2, #4
   b42fc:	2000      	movs	r0, #0
   b42fe:	f002 f837 	bl	b6370 <HAL_EEPROM_Get>
  EEPROM.get(kReportingIntervalEEPROMAddress, reportingInterval);
   b4302:	f005 f9c3 	bl	b968c <_Z21__fetch_global_EEPROMv>
   b4306:	2204      	movs	r2, #4
   b4308:	4621      	mov	r1, r4
   b430a:	20c8      	movs	r0, #200	; 0xc8
   b430c:	f002 f830 	bl	b6370 <HAL_EEPROM_Get>
  EEPROM.get(kSleepPauseDurationEEPROMAddress, sleepPauseDuration);
   b4310:	f005 f9bc 	bl	b968c <_Z21__fetch_global_EEPROMv>
   b4314:	491d      	ldr	r1, [pc, #116]	; (b438c <_Z14initFromEEPROMv+0xac>)
   b4316:	2204      	movs	r2, #4
   b4318:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b431c:	f002 f828 	bl	b6370 <HAL_EEPROM_Get>
  reportingInterval = reportingInterval / 1000; // convert to seconds from milliseconds 
   b4320:	6823      	ldr	r3, [r4, #0]
   b4322:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4326:	fb93 f3f2 	sdiv	r3, r3, r2
   b432a:	6023      	str	r3, [r4, #0]
  Serial.printlnf("recordingInterval: %i", recordingInterval);
   b432c:	f004 ff8a 	bl	b9244 <_Z16_fetch_usbserialv>
   b4330:	682a      	ldr	r2, [r5, #0]
   b4332:	4917      	ldr	r1, [pc, #92]	; (b4390 <_Z14initFromEEPROMv+0xb0>)
   b4334:	f7ff ff36 	bl	b41a4 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("reportingInterval: %i", reportingInterval);
   b4338:	f004 ff84 	bl	b9244 <_Z16_fetch_usbserialv>
   b433c:	6822      	ldr	r2, [r4, #0]
   b433e:	4915      	ldr	r1, [pc, #84]	; (b4394 <_Z14initFromEEPROMv+0xb4>)
   b4340:	f7ff ff30 	bl	b41a4 <_ZN5Print8printlnfEPKcz>
  if(recordingInterval == kEEPROMEmptyValue) { // if no value stored in EEPROM, set to default
   b4344:	682b      	ldr	r3, [r5, #0]
   b4346:	3301      	adds	r3, #1
    recordingInterval = kDefaultRecordingInterval; //default value
   b4348:	bf04      	itt	eq
   b434a:	f44f 73fa 	moveq.w	r3, #500	; 0x1f4
   b434e:	602b      	streq	r3, [r5, #0]
  }
  if(reportingInterval == kEEPROMEmptyValue) {
   b4350:	6823      	ldr	r3, [r4, #0]
   b4352:	3301      	adds	r3, #1
    reportingInterval = kDefaultReportingInterval; //default value
   b4354:	bf04      	itt	eq
   b4356:	230f      	moveq	r3, #15
   b4358:	6023      	streq	r3, [r4, #0]
  }
  if(sleepPauseDuration == kEEPROMEmptyValue) {
   b435a:	4b0c      	ldr	r3, [pc, #48]	; (b438c <_Z14initFromEEPROMv+0xac>)
   b435c:	681a      	ldr	r2, [r3, #0]
   b435e:	3201      	adds	r2, #1
    sleepPauseDuration = kDefaultSleepPauseDuration; //default value
   b4360:	bf04      	itt	eq
   b4362:	2205      	moveq	r2, #5
   b4364:	601a      	streq	r2, [r3, #0]
  }
  if(dsid == kEEPROMEmptyValue) {
   b4366:	4b08      	ldr	r3, [pc, #32]	; (b4388 <_Z14initFromEEPROMv+0xa8>)
   b4368:	681b      	ldr	r3, [r3, #0]
   b436a:	3301      	adds	r3, #1
   b436c:	d106      	bne.n	b437c <_Z14initFromEEPROMv+0x9c>
    Serial.println("DSID not stored in EEPROM. BLE config required"); 
   b436e:	f004 ff69 	bl	b9244 <_Z16_fetch_usbserialv>
    //TODO notify user somehow
  }
   b4372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println("DSID not stored in EEPROM. BLE config required"); 
   b4376:	4908      	ldr	r1, [pc, #32]	; (b4398 <_Z14initFromEEPROMv+0xb8>)
   b4378:	f003 bfcb 	b.w	b8312 <_ZN5Print7printlnEPKc>
   b437c:	bd38      	pop	{r3, r4, r5, pc}
   b437e:	bf00      	nop
   b4380:	2003e040 	.word	0x2003e040
   b4384:	2003e044 	.word	0x2003e044
   b4388:	2003da94 	.word	0x2003da94
   b438c:	2003e0e0 	.word	0x2003e0e0
   b4390:	000ba14a 	.word	0x000ba14a
   b4394:	000ba160 	.word	0x000ba160
   b4398:	000ba176 	.word	0x000ba176

000b439c <_Z14sleepReadyTestv>:
#include "constants.hpp"
#include "Particle.h"
#include "initHardware.hpp"

bool sleepReadyTest(){
  if(sleepTimeoutCounter >= ((sleepPauseDuration * 1000) / recordingInterval)){
   b439c:	4b07      	ldr	r3, [pc, #28]	; (b43bc <_Z14sleepReadyTestv+0x20>)
   b439e:	4a08      	ldr	r2, [pc, #32]	; (b43c0 <_Z14sleepReadyTestv+0x24>)
   b43a0:	681b      	ldr	r3, [r3, #0]
   b43a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b43a6:	4343      	muls	r3, r0
   b43a8:	6810      	ldr	r0, [r2, #0]
   b43aa:	4a06      	ldr	r2, [pc, #24]	; (b43c4 <_Z14sleepReadyTestv+0x28>)
   b43ac:	fb93 f3f0 	sdiv	r3, r3, r0
   b43b0:	6810      	ldr	r0, [r2, #0]
    return true;
  }
  else {
    return false;
  }
}
   b43b2:	4283      	cmp	r3, r0
   b43b4:	bfcc      	ite	gt
   b43b6:	2000      	movgt	r0, #0
   b43b8:	2001      	movle	r0, #1
   b43ba:	4770      	bx	lr
   b43bc:	2003e0e0 	.word	0x2003e0e0
   b43c0:	2003e040 	.word	0x2003e040
   b43c4:	2003e0e4 	.word	0x2003e0e4

000b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b43c8:	b510      	push	{r4, lr}
		return os_mutex_recursive_t(system_internal(2, nullptr));
   b43ca:	2100      	movs	r1, #0
   b43cc:	4604      	mov	r4, r0
   b43ce:	2002      	movs	r0, #2
   b43d0:	f002 f9ce 	bl	b6770 <system_internal>

	void unlock()
	{
#if PLATFORM_THREADING
		os_mutex_recursive_unlock(get_mutex());
   b43d4:	f001 ffa4 	bl	b6320 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b43d8:	4620      	mov	r0, r4
   b43da:	bd10      	pop	{r4, pc}

000b43dc <_Z10reportData6String>:

void reportData(String payload) {
   b43dc:	b530      	push	{r4, r5, lr}
   b43de:	4604      	mov	r4, r0
   b43e0:	b089      	sub	sp, #36	; 0x24
  WiFi.on();
   b43e2:	4865      	ldr	r0, [pc, #404]	; (b4578 <_Z10reportData6String+0x19c>)
  WiFi.connect();
  while(!WiFi.ready()) {
   b43e4:	4d64      	ldr	r5, [pc, #400]	; (b4578 <_Z10reportData6String+0x19c>)
  WiFi.on();
   b43e6:	f7ff feeb 	bl	b41c0 <_ZN5spark9WiFiClass2onEv>
  WiFi.connect();
   b43ea:	4863      	ldr	r0, [pc, #396]	; (b4578 <_Z10reportData6String+0x19c>)
   b43ec:	2100      	movs	r1, #0
   b43ee:	f7ff fef3 	bl	b41d8 <_ZN5spark9WiFiClass7connectEj>
  while(!WiFi.ready()) {
   b43f2:	4628      	mov	r0, r5
   b43f4:	f7ff fef5 	bl	b41e2 <_ZN5spark9WiFiClass5readyEv>
   b43f8:	b918      	cbnz	r0, b4402 <_Z10reportData6String+0x26>
    delay(100);
   b43fa:	2064      	movs	r0, #100	; 0x64
   b43fc:	f002 faf8 	bl	b69f0 <delay>
  while(!WiFi.ready()) {
   b4400:	e7f7      	b.n	b43f2 <_Z10reportData6String+0x16>
  }
  if(WiFi.ready() != true) {
   b4402:	485d      	ldr	r0, [pc, #372]	; (b4578 <_Z10reportData6String+0x19c>)
   b4404:	f7ff feed 	bl	b41e2 <_ZN5spark9WiFiClass5readyEv>
   b4408:	b9a8      	cbnz	r0, b4436 <_Z10reportData6String+0x5a>
    WITH_LOCK(Serial) {
   b440a:	f004 ff1b 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b440e:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b4410:	f7ff fea5 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WiFi failed to connect, data not reported");
   b4414:	f004 ff16 	bl	b9244 <_Z16_fetch_usbserialv>
   b4418:	4958      	ldr	r1, [pc, #352]	; (b457c <_Z10reportData6String+0x1a0>)
   b441a:	f003 ff7a 	bl	b8312 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b441e:	a804      	add	r0, sp, #16
   b4420:	f7ff ffd2 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b4424:	4856      	ldr	r0, [pc, #344]	; (b4580 <_Z10reportData6String+0x1a4>)
   b4426:	4621      	mov	r1, r4
   b4428:	f004 f942 	bl	b86b0 <_ZN6String6concatERKS_>
    WITH_LOCK(Serial) {
      Serial.println("ReqBody: " + request.body);
    }
    rolloverPayload = "";
  }
  WiFi.off();
   b442c:	4852      	ldr	r0, [pc, #328]	; (b4578 <_Z10reportData6String+0x19c>)
   b442e:	f7ff fecd 	bl	b41cc <_ZN5spark9WiFiClass3offEv>
   b4432:	b009      	add	sp, #36	; 0x24
   b4434:	bd30      	pop	{r4, r5, pc}
    WITH_LOCK(Serial) {
   b4436:	f004 ff05 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b443a:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b443c:	f7ff fe8f 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WiFi connected, reporting data");
   b4440:	f004 ff00 	bl	b9244 <_Z16_fetch_usbserialv>
   b4444:	494f      	ldr	r1, [pc, #316]	; (b4584 <_Z10reportData6String+0x1a8>)
   b4446:	f003 ff64 	bl	b8312 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b444a:	a804      	add	r0, sp, #16
   b444c:	f7ff ffbc 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b4450:	494d      	ldr	r1, [pc, #308]	; (b4588 <_Z10reportData6String+0x1ac>)
   b4452:	484b      	ldr	r0, [pc, #300]	; (b4580 <_Z10reportData6String+0x1a4>)
   b4454:	f004 f979 	bl	b874a <_ZNK6String6equalsEPKc>
    if(rolloverPayload != "") {
   b4458:	b9e8      	cbnz	r0, b4496 <_Z10reportData6String+0xba>
      WITH_LOCK(Serial) {
   b445a:	f004 fef3 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b445e:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   b4460:	f7ff fe7d 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("Rollover payload: " + rolloverPayload);
   b4464:	f004 feee 	bl	b9244 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4468:	4948      	ldr	r1, [pc, #288]	; (b458c <_Z10reportData6String+0x1b0>)
   b446a:	4605      	mov	r5, r0
   b446c:	a804      	add	r0, sp, #16
   b446e:	f004 f8a2 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4472:	4943      	ldr	r1, [pc, #268]	; (b4580 <_Z10reportData6String+0x1a4>)
   b4474:	a804      	add	r0, sp, #16
   b4476:	f004 f93d 	bl	b86f4 <_ZplRK15StringSumHelperRK6String>
   b447a:	6801      	ldr	r1, [r0, #0]
   b447c:	4628      	mov	r0, r5
   b447e:	f003 ff48 	bl	b8312 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4482:	a804      	add	r0, sp, #16
   b4484:	f004 f84c 	bl	b8520 <_ZN6StringD1Ev>
      WITH_LOCK(Serial) {
   b4488:	a803      	add	r0, sp, #12
   b448a:	f7ff ff9d 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b448e:	493c      	ldr	r1, [pc, #240]	; (b4580 <_Z10reportData6String+0x1a4>)
   b4490:	4620      	mov	r0, r4
   b4492:	f004 f90d 	bl	b86b0 <_ZN6String6concatERKS_>
    payload.remove(payload.length() - 1);
   b4496:	68a1      	ldr	r1, [r4, #8]
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
    }

    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
   b4498:	4d3d      	ldr	r5, [pc, #244]	; (b4590 <_Z10reportData6String+0x1b4>)
   b449a:	3901      	subs	r1, #1
   b449c:	4620      	mov	r0, r4
   b449e:	f004 f9ba 	bl	b8816 <_ZN6String6removeEj>
	StringSumHelper(const char *p) : String(p) {}
   b44a2:	493c      	ldr	r1, [pc, #240]	; (b4594 <_Z10reportData6String+0x1b8>)
   b44a4:	a804      	add	r0, sp, #16
   b44a6:	f004 f886 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
    request.body = "{\"data\":[" + payload + "]}";
   b44aa:	4621      	mov	r1, r4
   b44ac:	a804      	add	r0, sp, #16
   b44ae:	f004 f921 	bl	b86f4 <_ZplRK15StringSumHelperRK6String>
   b44b2:	4939      	ldr	r1, [pc, #228]	; (b4598 <_Z10reportData6String+0x1bc>)
   b44b4:	f004 f92a 	bl	b870c <_ZplRK15StringSumHelperPKc>
   b44b8:	4601      	mov	r1, r0
   b44ba:	4838      	ldr	r0, [pc, #224]	; (b459c <_Z10reportData6String+0x1c0>)
   b44bc:	f004 f88f 	bl	b85de <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b44c0:	a804      	add	r0, sp, #16
   b44c2:	f004 f82d 	bl	b8520 <_ZN6StringD1Ev>
    WITH_LOCK(Serial){
   b44c6:	f004 febd 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b44ca:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b44cc:	f7ff fe47 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
   b44d0:	4b33      	ldr	r3, [pc, #204]	; (b45a0 <_Z10reportData6String+0x1c4>)
   b44d2:	4934      	ldr	r1, [pc, #208]	; (b45a4 <_Z10reportData6String+0x1c8>)
   b44d4:	9300      	str	r3, [sp, #0]
   b44d6:	462a      	mov	r2, r5
   b44d8:	4b33      	ldr	r3, [pc, #204]	; (b45a8 <_Z10reportData6String+0x1cc>)
   b44da:	4834      	ldr	r0, [pc, #208]	; (b45ac <_Z10reportData6String+0x1d0>)
   b44dc:	f001 fc72 	bl	b5dc4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
   b44e0:	a804      	add	r0, sp, #16
   b44e2:	f7ff ff71 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    WITH_LOCK(Serial) {
   b44e6:	f004 fead 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b44ea:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b44ec:	f7ff fe37 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("Status: " + response.status);
   b44f0:	f004 fea8 	bl	b9244 <_Z16_fetch_usbserialv>
   b44f4:	682b      	ldr	r3, [r5, #0]
   b44f6:	492e      	ldr	r1, [pc, #184]	; (b45b0 <_Z10reportData6String+0x1d4>)
   b44f8:	4419      	add	r1, r3
   b44fa:	f003 ff0a 	bl	b8312 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b44fe:	a804      	add	r0, sp, #16
   b4500:	f7ff ff62 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    WITH_LOCK(Serial) {
   b4504:	f004 fe9e 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4508:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   b450a:	f7ff fe28 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("Body: " + response.body);
   b450e:	f004 fe99 	bl	b9244 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4512:	4928      	ldr	r1, [pc, #160]	; (b45b4 <_Z10reportData6String+0x1d8>)
   b4514:	4604      	mov	r4, r0
   b4516:	a804      	add	r0, sp, #16
   b4518:	f004 f84d 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b451c:	1d29      	adds	r1, r5, #4
   b451e:	a804      	add	r0, sp, #16
   b4520:	f004 f8e8 	bl	b86f4 <_ZplRK15StringSumHelperRK6String>
   b4524:	6801      	ldr	r1, [r0, #0]
   b4526:	4620      	mov	r0, r4
   b4528:	f003 fef3 	bl	b8312 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b452c:	a804      	add	r0, sp, #16
   b452e:	f003 fff7 	bl	b8520 <_ZN6StringD1Ev>
    WITH_LOCK(Serial) {
   b4532:	a803      	add	r0, sp, #12
   b4534:	f7ff ff48 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    WITH_LOCK(Serial) {
   b4538:	f004 fe84 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b453c:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   b453e:	f7ff fe0e 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("ReqBody: " + request.body);
   b4542:	f004 fe7f 	bl	b9244 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4546:	491c      	ldr	r1, [pc, #112]	; (b45b8 <_Z10reportData6String+0x1dc>)
   b4548:	4604      	mov	r4, r0
   b454a:	a804      	add	r0, sp, #16
   b454c:	f004 f833 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4550:	4912      	ldr	r1, [pc, #72]	; (b459c <_Z10reportData6String+0x1c0>)
   b4552:	a804      	add	r0, sp, #16
   b4554:	f004 f8ce 	bl	b86f4 <_ZplRK15StringSumHelperRK6String>
   b4558:	6801      	ldr	r1, [r0, #0]
   b455a:	4620      	mov	r0, r4
   b455c:	f003 fed9 	bl	b8312 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4560:	a804      	add	r0, sp, #16
   b4562:	f003 ffdd 	bl	b8520 <_ZN6StringD1Ev>
    WITH_LOCK(Serial) {
   b4566:	a803      	add	r0, sp, #12
   b4568:	f7ff ff2e 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    rolloverPayload = "";
   b456c:	4906      	ldr	r1, [pc, #24]	; (b4588 <_Z10reportData6String+0x1ac>)
   b456e:	4804      	ldr	r0, [pc, #16]	; (b4580 <_Z10reportData6String+0x1a4>)
   b4570:	f004 f84f 	bl	b8612 <_ZN6StringaSEPKc>
   b4574:	e75a      	b.n	b442c <_Z10reportData6String+0x50>
   b4576:	bf00      	nop
   b4578:	2003e7c0 	.word	0x2003e7c0
   b457c:	000ba1a5 	.word	0x000ba1a5
   b4580:	2003e0b0 	.word	0x2003e0b0
   b4584:	000ba1cf 	.word	0x000ba1cf
   b4588:	000ba4c7 	.word	0x000ba4c7
   b458c:	000ba1ee 	.word	0x000ba1ee
   b4590:	2003e09c 	.word	0x2003e09c
   b4594:	000ba201 	.word	0x000ba201
   b4598:	000ba20b 	.word	0x000ba20b
   b459c:	2003e08c 	.word	0x2003e08c
   b45a0:	000ba20e 	.word	0x000ba20e
   b45a4:	2003e050 	.word	0x2003e050
   b45a8:	2003d9ac 	.word	0x2003d9ac
   b45ac:	2003da9c 	.word	0x2003da9c
   b45b0:	000ba213 	.word	0x000ba213
   b45b4:	000ba21f 	.word	0x000ba21f
   b45b8:	000ba21c 	.word	0x000ba21c

000b45bc <_Z15reportingThreadPv>:
      break;
    }
  }
}

void reportingThread(void *args) {
   b45bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while(true) {
    if(storedValuesIndex >= ((reportingInterval * kSecondsToMilliseconds) / recordingInterval)) {
   b45c0:	f8df a11c 	ldr.w	sl, [pc, #284]	; b46e0 <_Z15reportingThreadPv+0x124>
   b45c4:	4c3c      	ldr	r4, [pc, #240]	; (b46b8 <_Z15reportingThreadPv+0xfc>)
void reportingThread(void *args) {
   b45c6:	b08d      	sub	sp, #52	; 0x34
    if(storedValuesIndex >= ((reportingInterval * kSecondsToMilliseconds) / recordingInterval)) {
   b45c8:	f8da 3000 	ldr.w	r3, [sl]
   b45cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b45d0:	4353      	muls	r3, r2
   b45d2:	4a3a      	ldr	r2, [pc, #232]	; (b46bc <_Z15reportingThreadPv+0x100>)
   b45d4:	6812      	ldr	r2, [r2, #0]
   b45d6:	fb93 f3f2 	sdiv	r3, r3, r2
   b45da:	6822      	ldr	r2, [r4, #0]
   b45dc:	4293      	cmp	r3, r2
   b45de:	dc67      	bgt.n	b46b0 <_Z15reportingThreadPv+0xf4>

      os_mutex_lock(payloadAccessLock); // lock access to payload before copying to local variable and resetting global payload
   b45e0:	4f37      	ldr	r7, [pc, #220]	; (b46c0 <_Z15reportingThreadPv+0x104>)
   b45e2:	f8df 9100 	ldr.w	r9, [pc, #256]	; b46e4 <_Z15reportingThreadPv+0x128>
   b45e6:	6838      	ldr	r0, [r7, #0]
   b45e8:	f8df 80fc 	ldr.w	r8, [pc, #252]	; b46e8 <_Z15reportingThreadPv+0x12c>
      for (int i = 0; i < storedValuesIndex; i++) {
        //Serial.printf("{timestamp: %i, data: %i}, ", storedTimes[i], storedValues[i]);
        payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b45ec:	f8df b0fc 	ldr.w	fp, [pc, #252]	; b46ec <_Z15reportingThreadPv+0x130>
      os_mutex_lock(payloadAccessLock); // lock access to payload before copying to local variable and resetting global payload
   b45f0:	f001 fe6e 	bl	b62d0 <os_mutex_lock>
	StringSumHelper(const char *p) : String(p) {}
   b45f4:	4b33      	ldr	r3, [pc, #204]	; (b46c4 <_Z15reportingThreadPv+0x108>)
      for (int i = 0; i < storedValuesIndex; i++) {
   b45f6:	2500      	movs	r5, #0
   b45f8:	6822      	ldr	r2, [r4, #0]
   b45fa:	42aa      	cmp	r2, r5
   b45fc:	dd35      	ble.n	b466a <_Z15reportingThreadPv+0xae>
   b45fe:	4619      	mov	r1, r3
   b4600:	a804      	add	r0, sp, #16
   b4602:	f003 ffd8 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
        payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b4606:	4b30      	ldr	r3, [pc, #192]	; (b46c8 <_Z15reportingThreadPv+0x10c>)
   b4608:	220a      	movs	r2, #10
   b460a:	6819      	ldr	r1, [r3, #0]
   b460c:	4668      	mov	r0, sp
   b460e:	f004 f812 	bl	b8636 <_ZN6StringC1Eih>
   b4612:	4669      	mov	r1, sp
   b4614:	a804      	add	r0, sp, #16
   b4616:	f004 f86d 	bl	b86f4 <_ZplRK15StringSumHelperRK6String>
   b461a:	4659      	mov	r1, fp
   b461c:	f004 f876 	bl	b870c <_ZplRK15StringSumHelperPKc>
   b4620:	f819 1b01 	ldrb.w	r1, [r9], #1
   b4624:	f004 f887 	bl	b8736 <_ZplRK15StringSumHelperh>
   b4628:	4928      	ldr	r1, [pc, #160]	; (b46cc <_Z15reportingThreadPv+0x110>)
   b462a:	f004 f86f 	bl	b870c <_ZplRK15StringSumHelperPKc>
   b462e:	220a      	movs	r2, #10
   b4630:	f858 1b04 	ldr.w	r1, [r8], #4
   b4634:	4606      	mov	r6, r0
   b4636:	a808      	add	r0, sp, #32
   b4638:	f004 f810 	bl	b865c <_ZN6StringC1Elh>
   b463c:	a908      	add	r1, sp, #32
   b463e:	4630      	mov	r0, r6
   b4640:	f004 f858 	bl	b86f4 <_ZplRK15StringSumHelperRK6String>
   b4644:	4922      	ldr	r1, [pc, #136]	; (b46d0 <_Z15reportingThreadPv+0x114>)
   b4646:	f004 f861 	bl	b870c <_ZplRK15StringSumHelperPKc>
   b464a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b464c:	4821      	ldr	r0, [pc, #132]	; (b46d4 <_Z15reportingThreadPv+0x118>)
   b464e:	f004 f82f 	bl	b86b0 <_ZN6String6concatERKS_>
   b4652:	a808      	add	r0, sp, #32
   b4654:	f003 ff64 	bl	b8520 <_ZN6StringD1Ev>
   b4658:	4668      	mov	r0, sp
   b465a:	f003 ff61 	bl	b8520 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b465e:	a804      	add	r0, sp, #16
   b4660:	f003 ff5e 	bl	b8520 <_ZN6StringD1Ev>
      for (int i = 0; i < storedValuesIndex; i++) {
   b4664:	3501      	adds	r5, #1
   b4666:	4b17      	ldr	r3, [pc, #92]	; (b46c4 <_Z15reportingThreadPv+0x108>)
   b4668:	e7c6      	b.n	b45f8 <_Z15reportingThreadPv+0x3c>
      }
      storedValuesIndex = 0;
   b466a:	2300      	movs	r3, #0
      String localPayload = payload;
   b466c:	4919      	ldr	r1, [pc, #100]	; (b46d4 <_Z15reportingThreadPv+0x118>)
      storedValuesIndex = 0;
   b466e:	6023      	str	r3, [r4, #0]
      String localPayload = payload;
   b4670:	a804      	add	r0, sp, #16
   b4672:	f003 ffc3 	bl	b85fc <_ZN6StringC1ERKS_>
      payload = "";
      os_mutex_unlock(payloadAccessLock);
      os_mutex_lock(reportingSleepProtectionLock);
   b4676:	4d18      	ldr	r5, [pc, #96]	; (b46d8 <_Z15reportingThreadPv+0x11c>)
      payload = "";
   b4678:	4918      	ldr	r1, [pc, #96]	; (b46dc <_Z15reportingThreadPv+0x120>)
   b467a:	4816      	ldr	r0, [pc, #88]	; (b46d4 <_Z15reportingThreadPv+0x118>)
   b467c:	f003 ffc9 	bl	b8612 <_ZN6StringaSEPKc>
      os_mutex_unlock(payloadAccessLock);
   b4680:	6838      	ldr	r0, [r7, #0]
   b4682:	f001 fe2d 	bl	b62e0 <os_mutex_unlock>
      os_mutex_lock(reportingSleepProtectionLock);
   b4686:	6828      	ldr	r0, [r5, #0]
   b4688:	f001 fe22 	bl	b62d0 <os_mutex_lock>
      reportData(localPayload);
   b468c:	a904      	add	r1, sp, #16
   b468e:	a808      	add	r0, sp, #32
   b4690:	f003 ffb4 	bl	b85fc <_ZN6StringC1ERKS_>
   b4694:	a808      	add	r0, sp, #32
   b4696:	f7ff fea1 	bl	b43dc <_Z10reportData6String>
   b469a:	a808      	add	r0, sp, #32
   b469c:	f003 ff40 	bl	b8520 <_ZN6StringD1Ev>
      os_mutex_unlock(reportingSleepProtectionLock);
   b46a0:	6828      	ldr	r0, [r5, #0]
   b46a2:	f001 fe1d 	bl	b62e0 <os_mutex_unlock>
      init_ACC();
   b46a6:	f7ff fdef 	bl	b4288 <_Z8init_ACCv>
      String localPayload = payload;
   b46aa:	a804      	add	r0, sp, #16
   b46ac:	f003 ff38 	bl	b8520 <_ZN6StringD1Ev>
    }
    os_thread_yield();
   b46b0:	f001 fdfe 	bl	b62b0 <os_thread_yield>
  }
   b46b4:	e788      	b.n	b45c8 <_Z15reportingThreadPv+0xc>
   b46b6:	bf00      	nop
   b46b8:	2003e5f8 	.word	0x2003e5f8
   b46bc:	2003e040 	.word	0x2003e040
   b46c0:	2003e030 	.word	0x2003e030
   b46c4:	000ba226 	.word	0x000ba226
   b46c8:	2003da94 	.word	0x2003da94
   b46cc:	000ba23a 	.word	0x000ba23a
   b46d0:	000ba249 	.word	0x000ba249
   b46d4:	2003e020 	.word	0x2003e020
   b46d8:	2003e048 	.word	0x2003e048
   b46dc:	000ba4c7 	.word	0x000ba4c7
   b46e0:	2003e044 	.word	0x2003e044
   b46e4:	2003e4f8 	.word	0x2003e4f8
   b46e8:	2003e0f8 	.word	0x2003e0f8
   b46ec:	000ba22f 	.word	0x000ba22f

000b46f0 <_Z12initHardwarev>:
void initHardware() {
   b46f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        system_get_flag(flag, &value, nullptr);
        return value;
    }

    static inline void set_flag(system_flag_t flag, uint8_t value) {
        system_set_flag(flag, value, nullptr);
   b46f2:	2200      	movs	r2, #0
   b46f4:	2101      	movs	r1, #1
   b46f6:	2003      	movs	r0, #3
   b46f8:	f002 f842 	bl	b6780 <system_set_flag>
  pinMode(kBLEConnectedLED, OUTPUT); //BLE connected indicator 
   b46fc:	2101      	movs	r1, #1
   b46fe:	2007      	movs	r0, #7
   b4700:	f004 ff86 	bl	b9610 <pinMode>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b4704:	4d2b      	ldr	r5, [pc, #172]	; (b47b4 <_Z12initHardwarev+0xc4>)
  digitalWrite(kBLEConnectedLED, LOW);
   b4706:	2100      	movs	r1, #0
   b4708:	2007      	movs	r0, #7
   b470a:	f004 ff92 	bl	b9632 <digitalWrite>
  pinMode(kLIS3DHInterruptPin, INPUT); //LIS3DH interrupt pin
   b470e:	2100      	movs	r1, #0
   b4710:	2002      	movs	r0, #2
   b4712:	f004 ff7d 	bl	b9610 <pinMode>
   b4716:	7d2b      	ldrb	r3, [r5, #20]
   b4718:	b19b      	cbz	r3, b4742 <_Z12initHardwarev+0x52>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b471a:	2302      	movs	r3, #2
   b471c:	722b      	strb	r3, [r5, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b471e:	682b      	ldr	r3, [r5, #0]
   b4720:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b4722:	b37b      	cbz	r3, b4784 <_Z12initHardwarev+0x94>
            if (start->type == type) {
   b4724:	889a      	ldrh	r2, [r3, #4]
   b4726:	2a01      	cmp	r2, #1
   b4728:	d006      	beq.n	b4738 <_Z12initHardwarev+0x48>
            start = start->next;
   b472a:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b472c:	e7f9      	b.n	b4722 <_Z12initHardwarev+0x32>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b472e:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b4730:	b343      	cbz	r3, b4784 <_Z12initHardwarev+0x94>
            if (start->type == type) {
   b4732:	889a      	ldrh	r2, [r3, #4]
   b4734:	2a01      	cmp	r2, #1
   b4736:	d1fa      	bne.n	b472e <_Z12initHardwarev+0x3e>
                if (gpioWakeup->pin == pin) {
   b4738:	899a      	ldrh	r2, [r3, #12]
   b473a:	2a02      	cmp	r2, #2
   b473c:	d1f7      	bne.n	b472e <_Z12initHardwarev+0x3e>
                    gpioWakeup->mode = mode;
   b473e:	2201      	movs	r2, #1
   b4740:	739a      	strb	r2, [r3, #14]
  while(!Serial.isConnected()){}
   b4742:	f004 fd7f 	bl	b9244 <_Z16_fetch_usbserialv>
   b4746:	f004 fd71 	bl	b922c <_ZN9USBSerial11isConnectedEv>
   b474a:	2800      	cmp	r0, #0
   b474c:	d0f9      	beq.n	b4742 <_Z12initHardwarev+0x52>
  if(!lis3dh.begin(kLis3dhAddress)) {
   b474e:	481a      	ldr	r0, [pc, #104]	; (b47b8 <_Z12initHardwarev+0xc8>)
   b4750:	2118      	movs	r1, #24
   b4752:	f001 fa72 	bl	b5c3a <_ZN15Adafruit_LIS3DH5beginEh>
   b4756:	b980      	cbnz	r0, b477a <_Z12initHardwarev+0x8a>
    delay(1000);
   b4758:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b475c:	f002 f948 	bl	b69f0 <delay>
    WITH_LOCK(Serial) {
   b4760:	f004 fd70 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4764:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4766:	f7ff fcfa 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("Failed to initialize LIS3DH");
   b476a:	f004 fd6b 	bl	b9244 <_Z16_fetch_usbserialv>
   b476e:	4913      	ldr	r1, [pc, #76]	; (b47bc <_Z12initHardwarev+0xcc>)
   b4770:	f003 fdcf 	bl	b8312 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b4774:	a801      	add	r0, sp, #4
   b4776:	f7ff fe27 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
}
   b477a:	b003      	add	sp, #12
   b477c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  init_ACC();
   b4780:	f7ff bd82 	b.w	b4288 <_Z8init_ACCv>
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4784:	490e      	ldr	r1, [pc, #56]	; (b47c0 <_Z12initHardwarev+0xd0>)
   b4786:	2010      	movs	r0, #16
   b4788:	f004 ffdb 	bl	b9742 <_ZnwjRKSt9nothrow_t>
   b478c:	4604      	mov	r4, r0
   b478e:	b170      	cbz	r0, b47ae <_Z12initHardwarev+0xbe>
   b4790:	2210      	movs	r2, #16
   b4792:	2100      	movs	r1, #0
   b4794:	f005 fbb6 	bl	b9f04 <memset>
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
            wakeupSource->base.next = config_.wakeup_sources;
   b4798:	692a      	ldr	r2, [r5, #16]
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b479a:	4b0a      	ldr	r3, [pc, #40]	; (b47c4 <_Z12initHardwarev+0xd4>)
   b479c:	6023      	str	r3, [r4, #0]
            wakeupSource->base.next = config_.wakeup_sources;
   b479e:	60a2      	str	r2, [r4, #8]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b47a0:	2301      	movs	r3, #1
            wakeupSource->pin = pin;
   b47a2:	2202      	movs	r2, #2
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b47a4:	80a3      	strh	r3, [r4, #4]
            wakeupSource->pin = pin;
   b47a6:	81a2      	strh	r2, [r4, #12]
            wakeupSource->mode = mode;
   b47a8:	73a3      	strb	r3, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b47aa:	612c      	str	r4, [r5, #16]
   b47ac:	e7c9      	b.n	b4742 <_Z12initHardwarev+0x52>
                valid_ = false;
   b47ae:	7528      	strb	r0, [r5, #20]
                return *this;
   b47b0:	e7c7      	b.n	b4742 <_Z12initHardwarev+0x52>
   b47b2:	bf00      	nop
   b47b4:	2003e0c8 	.word	0x2003e0c8
   b47b8:	2003deb8 	.word	0x2003deb8
   b47bc:	000ba24c 	.word	0x000ba24c
   b47c0:	000bad2c 	.word	0x000bad2c
   b47c4:	00030010 	.word	0x00030010

000b47c8 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv>:

  bleQuestionCount++;
}

//kBLEConnectedLED turns on when ble connected
void connectCallback(const BlePeerDevice& peer, void* context){
   b47c8:	b507      	push	{r0, r1, r2, lr}
  bleQuestionCount = 0;
   b47ca:	4b0b      	ldr	r3, [pc, #44]	; (b47f8 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x30>)
   b47cc:	2200      	movs	r2, #0
   b47ce:	601a      	str	r2, [r3, #0]
  WITH_LOCK(Serial) {
   b47d0:	f004 fd38 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b47d4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b47d6:	f7ff fcc2 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("connected");
   b47da:	f004 fd33 	bl	b9244 <_Z16_fetch_usbserialv>
   b47de:	4907      	ldr	r1, [pc, #28]	; (b47fc <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x34>)
   b47e0:	f003 fd97 	bl	b8312 <_ZN5Print7printlnEPKc>
  WITH_LOCK(Serial) {
   b47e4:	a801      	add	r0, sp, #4
   b47e6:	f7ff fdef 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  }
  digitalWrite(kBLEConnectedLED, HIGH);
   b47ea:	2101      	movs	r1, #1
   b47ec:	2007      	movs	r0, #7
}
   b47ee:	b003      	add	sp, #12
   b47f0:	f85d eb04 	ldr.w	lr, [sp], #4
  digitalWrite(kBLEConnectedLED, HIGH);
   b47f4:	f004 bf1d 	b.w	b9632 <digitalWrite>
   b47f8:	2003da8c 	.word	0x2003da8c
   b47fc:	000ba31b 	.word	0x000ba31b

000b4800 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv>:

//kBLEConnectedLED turns off when ble disconnected
void disconnectCallback(const BlePeerDevice& peer, void* context){
   b4800:	b507      	push	{r0, r1, r2, lr}
  WITH_LOCK(Serial) {
   b4802:	f004 fd1f 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4806:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4808:	f7ff fca9 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("disconnected");
   b480c:	f004 fd1a 	bl	b9244 <_Z16_fetch_usbserialv>
   b4810:	4906      	ldr	r1, [pc, #24]	; (b482c <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv+0x2c>)
   b4812:	f003 fd7e 	bl	b8312 <_ZN5Print7printlnEPKc>
  WITH_LOCK(Serial) {
   b4816:	a801      	add	r0, sp, #4
   b4818:	f7ff fdd6 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  }
  digitalWrite(kBLEConnectedLED, LOW);
   b481c:	2100      	movs	r1, #0
   b481e:	2007      	movs	r0, #7
   b4820:	b003      	add	sp, #12
   b4822:	f85d eb04 	ldr.w	lr, [sp], #4
  digitalWrite(kBLEConnectedLED, LOW);
   b4826:	f004 bf04 	b.w	b9632 <digitalWrite>
   b482a:	bf00      	nop
   b482c:	000ba268 	.word	0x000ba268

000b4830 <_Z11engageSleepv>:

void engageSleep() {
   b4830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WITH_LOCK(Serial) {
   b4832:	f004 fd07 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4836:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4838:	f7ff fc91 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("Sleep process waiting for mutex locks");
   b483c:	f004 fd02 	bl	b9244 <_Z16_fetch_usbserialv>
   b4840:	490f      	ldr	r1, [pc, #60]	; (b4880 <_Z11engageSleepv+0x50>)
  }
  delay(100);
  os_mutex_lock(reportingSleepProtectionLock);
   b4842:	4c10      	ldr	r4, [pc, #64]	; (b4884 <_Z11engageSleepv+0x54>)
    Serial.println("Sleep process waiting for mutex locks");
   b4844:	f003 fd65 	bl	b8312 <_ZN5Print7printlnEPKc>
  WITH_LOCK(Serial) {
   b4848:	a801      	add	r0, sp, #4
   b484a:	f7ff fdbd 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  delay(100);
   b484e:	2064      	movs	r0, #100	; 0x64
   b4850:	f002 f8ce 	bl	b69f0 <delay>
  os_mutex_lock(reportingSleepProtectionLock);
   b4854:	6820      	ldr	r0, [r4, #0]
   b4856:	f001 fd3b 	bl	b62d0 <os_mutex_lock>
  System.sleep(sleepConfig);
   b485a:	a801      	add	r0, sp, #4
   b485c:	490a      	ldr	r1, [pc, #40]	; (b4888 <_Z11engageSleepv+0x58>)
   b485e:	f004 f821 	bl	b88a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   b4862:	9801      	ldr	r0, [sp, #4]
   b4864:	b108      	cbz	r0, b486a <_Z11engageSleepv+0x3a>
            free(wakeupSource_);
   b4866:	f002 f87b 	bl	b6960 <free>
  sleepTimeoutCounter = 0;
   b486a:	4b08      	ldr	r3, [pc, #32]	; (b488c <_Z11engageSleepv+0x5c>)
   b486c:	2200      	movs	r2, #0
   b486e:	601a      	str	r2, [r3, #0]
  init_ACC();
   b4870:	f7ff fd0a 	bl	b4288 <_Z8init_ACCv>
  os_mutex_unlock(reportingSleepProtectionLock);
   b4874:	6820      	ldr	r0, [r4, #0]
   b4876:	b004      	add	sp, #16
   b4878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  os_mutex_unlock(reportingSleepProtectionLock);
   b487c:	f001 bd30 	b.w	b62e0 <os_mutex_unlock>
   b4880:	000ba275 	.word	0x000ba275
   b4884:	2003e048 	.word	0x2003e048
   b4888:	2003e0c8 	.word	0x2003e0c8
   b488c:	2003e0e4 	.word	0x2003e0e4

000b4890 <_Z14syncSystemTimev>:
#pragma once
#include "globalVariables.hpp"
#include "constants.hpp"

void syncSystemTime() {
   b4890:	b530      	push	{r4, r5, lr}
  int WiFiConnectCountdown = kWiFiConnectionTimeout;

  WiFi.on();
   b4892:	483d      	ldr	r0, [pc, #244]	; (b4988 <_Z14syncSystemTimev+0xf8>)
  WiFi.connect();
  //wait for WiFi to connect for kWiFiConnectionTimeout
  while(!WiFi.ready() && WiFiConnectCountdown != 0) {
   b4894:	4d3c      	ldr	r5, [pc, #240]	; (b4988 <_Z14syncSystemTimev+0xf8>)
void syncSystemTime() {
   b4896:	b087      	sub	sp, #28
  WiFi.on();
   b4898:	f7ff fc92 	bl	b41c0 <_ZN5spark9WiFiClass2onEv>
  WiFi.connect();
   b489c:	483a      	ldr	r0, [pc, #232]	; (b4988 <_Z14syncSystemTimev+0xf8>)
   b489e:	2100      	movs	r1, #0
   b48a0:	f7ff fc9a 	bl	b41d8 <_ZN5spark9WiFiClass7connectEj>
  int WiFiConnectCountdown = kWiFiConnectionTimeout;
   b48a4:	f644 6420 	movw	r4, #20000	; 0x4e20
  while(!WiFi.ready() && WiFiConnectCountdown != 0) {
   b48a8:	4628      	mov	r0, r5
   b48aa:	f7ff fc9a 	bl	b41e2 <_ZN5spark9WiFiClass5readyEv>
   b48ae:	b998      	cbnz	r0, b48d8 <_Z14syncSystemTimev+0x48>
   b48b0:	b194      	cbz	r4, b48d8 <_Z14syncSystemTimev+0x48>
    WiFiConnectCountdown = WiFiConnectCountdown - kWiFiCheckInterval;
    delay(kWiFiCheckInterval);
   b48b2:	2064      	movs	r0, #100	; 0x64
   b48b4:	f002 f89c 	bl	b69f0 <delay>
    WITH_LOCK(Serial) {
   b48b8:	f004 fcc4 	bl	b9244 <_Z16_fetch_usbserialv>
    WiFiConnectCountdown = WiFiConnectCountdown - kWiFiCheckInterval;
   b48bc:	3c64      	subs	r4, #100	; 0x64
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b48be:	9002      	str	r0, [sp, #8]
      { _M_device.lock(); }
   b48c0:	f7ff fc4d 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.println(WiFiConnectCountdown);
   b48c4:	f004 fcbe 	bl	b9244 <_Z16_fetch_usbserialv>
   b48c8:	220a      	movs	r2, #10
   b48ca:	4621      	mov	r1, r4
   b48cc:	f7ff fc2a 	bl	b4124 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    WITH_LOCK(Serial) {
   b48d0:	a802      	add	r0, sp, #8
   b48d2:	f7ff fd79 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b48d6:	e7e7      	b.n	b48a8 <_Z14syncSystemTimev+0x18>
    }
  }
  if(WiFi.ready()) {
   b48d8:	482b      	ldr	r0, [pc, #172]	; (b4988 <_Z14syncSystemTimev+0xf8>)
   b48da:	f7ff fc82 	bl	b41e2 <_ZN5spark9WiFiClass5readyEv>
   b48de:	2800      	cmp	r0, #0
   b48e0:	d045      	beq.n	b496e <_Z14syncSystemTimev+0xde>
    WITH_LOCK(Serial){
   b48e2:	f004 fcaf 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b48e6:	9002      	str	r0, [sp, #8]
      { _M_device.lock(); }
   b48e8:	f7ff fc39 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WiFi connected, syncing time");
   b48ec:	f004 fcaa 	bl	b9244 <_Z16_fetch_usbserialv>
   b48f0:	4926      	ldr	r1, [pc, #152]	; (b498c <_Z14syncSystemTimev+0xfc>)
   b48f2:	f003 fd0e 	bl	b8312 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial){
   b48f6:	a802      	add	r0, sp, #8
   b48f8:	f7ff fd66 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b48fc:	f001 ff88 	bl	b6810 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4900:	f001 ff8e 	bl	b6820 <spark_cloud_flag_connected>
    }
    Particle.connect();
    while(!Particle.connected()) {} // wait forever until cloud connects
   b4904:	2800      	cmp	r0, #0
   b4906:	d0fb      	beq.n	b4900 <_Z14syncSystemTimev+0x70>
   b4908:	f001 ff8a 	bl	b6820 <spark_cloud_flag_connected>
        if (!connected()) {
   b490c:	b110      	cbz	r0, b4914 <_Z14syncSystemTimev+0x84>
        return spark_sync_time(NULL);
   b490e:	2000      	movs	r0, #0
   b4910:	f001 ff8e 	bl	b6830 <spark_sync_time>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4914:	4c1e      	ldr	r4, [pc, #120]	; (b4990 <_Z14syncSystemTimev+0x100>)
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4916:	f001 ff83 	bl	b6820 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
   b491a:	b148      	cbz	r0, b4930 <_Z14syncSystemTimev+0xa0>
   b491c:	2000      	movs	r0, #0
   b491e:	f001 ff8f 	bl	b6840 <spark_sync_time_pending>
   b4922:	b128      	cbz	r0, b4930 <_Z14syncSystemTimev+0xa0>
		return HAL_Timer_Get_Milli_Seconds();
   b4924:	f001 fd14 	bl	b6350 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b4928:	6020      	str	r0, [r4, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b492a:	f001 ff69 	bl	b6800 <spark_process>
    }
   b492e:	e7f2      	b.n	b4916 <_Z14syncSystemTimev+0x86>
    Particle.syncTime(); // is async
    while(Particle.syncTimePending()) { // wait for syncTime to complete
      Particle.process();
    }
    WITH_LOCK(Serial){
   b4930:	f004 fc88 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4934:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4936:	f7ff fc12 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.printlnf("Current time is: %s", Time.timeStr().c_str());
   b493a:	f004 fc83 	bl	b9244 <_Z16_fetch_usbserialv>
   b493e:	4604      	mov	r4, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b4940:	f004 fb85 	bl	b904e <_ZN9TimeClass3nowEv>
   b4944:	17c3      	asrs	r3, r0, #31
   b4946:	4602      	mov	r2, r0
   b4948:	a802      	add	r0, sp, #8
   b494a:	f004 fb27 	bl	b8f9c <_ZN9TimeClass7timeStrEx>
   b494e:	9a02      	ldr	r2, [sp, #8]
   b4950:	4910      	ldr	r1, [pc, #64]	; (b4994 <_Z14syncSystemTimev+0x104>)
   b4952:	4620      	mov	r0, r4
   b4954:	f7ff fc26 	bl	b41a4 <_ZN5Print8printlnfEPKcz>
   b4958:	a802      	add	r0, sp, #8
   b495a:	f003 fde1 	bl	b8520 <_ZN6StringD1Ev>
    WITH_LOCK(Serial){
   b495e:	a801      	add	r0, sp, #4
    }
  }
  else {
    WITH_LOCK(Serial) {
   b4960:	f7ff fd32 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      Serial.println("WiFi failed to connect, skipping time synchronization");
    }
  }

  WiFi.off();
   b4964:	4808      	ldr	r0, [pc, #32]	; (b4988 <_Z14syncSystemTimev+0xf8>)
   b4966:	f7ff fc31 	bl	b41cc <_ZN5spark9WiFiClass3offEv>
   b496a:	b007      	add	sp, #28
   b496c:	bd30      	pop	{r4, r5, pc}
    WITH_LOCK(Serial) {
   b496e:	f004 fc69 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4972:	9002      	str	r0, [sp, #8]
      { _M_device.lock(); }
   b4974:	f7ff fbf3 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WiFi failed to connect, skipping time synchronization");
   b4978:	f004 fc64 	bl	b9244 <_Z16_fetch_usbserialv>
   b497c:	4906      	ldr	r1, [pc, #24]	; (b4998 <_Z14syncSystemTimev+0x108>)
   b497e:	f003 fcc8 	bl	b8312 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b4982:	a802      	add	r0, sp, #8
   b4984:	e7ec      	b.n	b4960 <_Z14syncSystemTimev+0xd0>
   b4986:	bf00      	nop
   b4988:	2003e7c0 	.word	0x2003e7c0
   b498c:	000ba29b 	.word	0x000ba29b
   b4990:	2003e7d0 	.word	0x2003e7d0
   b4994:	000ba2b8 	.word	0x000ba2b8
   b4998:	000ba2cc 	.word	0x000ba2cc

000b499c <setup>:
void setup() {
   b499c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  os_mutex_create(&payloadAccessLock);
   b499e:	4c14      	ldr	r4, [pc, #80]	; (b49f0 <setup+0x54>)
  os_mutex_create(&reportingSleepProtectionLock);
   b49a0:	4d14      	ldr	r5, [pc, #80]	; (b49f4 <setup+0x58>)
  Serial.begin(9600);
   b49a2:	f004 fc4f 	bl	b9244 <_Z16_fetch_usbserialv>
   b49a6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b49aa:	f004 fc3b 	bl	b9224 <_ZN9USBSerial5beginEl>
  initHardware();
   b49ae:	f7ff fe9f 	bl	b46f0 <_Z12initHardwarev>
  HTTPRequestSetup(); 
   b49b2:	f7ff fc1b 	bl	b41ec <_Z16HTTPRequestSetupv>
  initFromEEPROM();
   b49b6:	f7ff fc93 	bl	b42e0 <_Z14initFromEEPROMv>
  syncSystemTime();
   b49ba:	f7ff ff69 	bl	b4890 <_Z14syncSystemTimev>
  os_mutex_create(&payloadAccessLock);
   b49be:	4620      	mov	r0, r4
   b49c0:	f001 fc7e 	bl	b62c0 <os_mutex_create>
  os_mutex_create(&reportingSleepProtectionLock);
   b49c4:	4628      	mov	r0, r5
   b49c6:	f001 fc7b 	bl	b62c0 <os_mutex_create>
  os_mutex_unlock(&reportingSleepProtectionLock);
   b49ca:	4628      	mov	r0, r5
   b49cc:	f001 fc88 	bl	b62e0 <os_mutex_unlock>
  os_mutex_unlock(&payloadAccessLock);
   b49d0:	4620      	mov	r0, r4
   b49d2:	f001 fc85 	bl	b62e0 <os_mutex_unlock>
  os_thread_create(&reportingThreadHandle, "reportThread", OS_THREAD_PRIORITY_DEFAULT, reportingThread, NULL, 1024);
   b49d6:	2300      	movs	r3, #0
   b49d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b49dc:	e9cd 3200 	strd	r3, r2, [sp]
   b49e0:	4905      	ldr	r1, [pc, #20]	; (b49f8 <setup+0x5c>)
   b49e2:	4b06      	ldr	r3, [pc, #24]	; (b49fc <setup+0x60>)
   b49e4:	4806      	ldr	r0, [pc, #24]	; (b4a00 <setup+0x64>)
   b49e6:	2202      	movs	r2, #2
   b49e8:	f001 fc5a 	bl	b62a0 <os_thread_create>
}
   b49ec:	b003      	add	sp, #12
   b49ee:	bd30      	pop	{r4, r5, pc}
   b49f0:	2003e030 	.word	0x2003e030
   b49f4:	2003e048 	.word	0x2003e048
   b49f8:	000ba302 	.word	0x000ba302
   b49fc:	000b45bd 	.word	0x000b45bd
   b4a00:	2003e04c 	.word	0x2003e04c
   b4a04:	00000000 	.word	0x00000000

000b4a08 <loop>:
void loop() {
   b4a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4a0c:	ed2d 8b02 	vpush	{d8}
  switch (firmwareState) {
   b4a10:	4ec3      	ldr	r6, [pc, #780]	; (b4d20 <loop+0x318>)
   b4a12:	7835      	ldrb	r5, [r6, #0]
void loop() {
   b4a14:	b097      	sub	sp, #92	; 0x5c
  switch (firmwareState) {
   b4a16:	b13d      	cbz	r5, b4a28 <loop+0x20>
   b4a18:	2d01      	cmp	r5, #1
   b4a1a:	f000 80bf 	beq.w	b4b9c <loop+0x194>
}
   b4a1e:	b017      	add	sp, #92	; 0x5c
   b4a20:	ecbd 8b02 	vpop	{d8}
   b4a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      WITH_LOCK(Serial) {
   b4a28:	f004 fc0c 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4a2c:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b4a2e:	f7ff fb96 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("BLEWAIT");
   b4a32:	f004 fc07 	bl	b9244 <_Z16_fetch_usbserialv>
   b4a36:	49bb      	ldr	r1, [pc, #748]	; (b4d24 <loop+0x31c>)
   b4a38:	f003 fc6b 	bl	b8312 <_ZN5Print7printlnEPKc>
      WITH_LOCK(Serial) {
   b4a3c:	a80d      	add	r0, sp, #52	; 0x34
   b4a3e:	f7ff fcc3 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      BLE.on();
   b4a42:	f002 fc0d 	bl	b7260 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4a46:	f002 fc59 	bl	b72fc <_ZNK8particle14BleLocalDevice2onEv>
      BLE.addCharacteristic(txCharacteristic);
   b4a4a:	f002 fc09 	bl	b7260 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4a4e:	4ab6      	ldr	r2, [pc, #728]	; (b4d28 <loop+0x320>)
   b4a50:	4601      	mov	r1, r0
   b4a52:	a80d      	add	r0, sp, #52	; 0x34
   b4a54:	f003 f8fc 	bl	b7c50 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4a58:	a80d      	add	r0, sp, #52	; 0x34
   b4a5a:	f002 fcea 	bl	b7432 <_ZN8particle17BleCharacteristicD1Ev>
      BLE.addCharacteristic(rxCharacteristic);
   b4a5e:	f002 fbff 	bl	b7260 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4a62:	4ab2      	ldr	r2, [pc, #712]	; (b4d2c <loop+0x324>)
   b4a64:	4601      	mov	r1, r0
   b4a66:	a80d      	add	r0, sp, #52	; 0x34
   b4a68:	f003 f8f2 	bl	b7c50 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4a6c:	a80d      	add	r0, sp, #52	; 0x34
   b4a6e:	f002 fce0 	bl	b7432 <_ZN8particle17BleCharacteristicD1Ev>
      BleAdvertisingData data;
   b4a72:	a80d      	add	r0, sp, #52	; 0x34
   b4a74:	f002 fa5d 	bl	b6f32 <_ZN8particle18BleAdvertisingDataC1Ev>
      data.appendServiceUUID(serviceUuid);
   b4a78:	49ad      	ldr	r1, [pc, #692]	; (b4d30 <loop+0x328>)
   b4a7a:	a803      	add	r0, sp, #12
   b4a7c:	f002 f95e 	bl	b6d3c <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4a80:	a903      	add	r1, sp, #12
   b4a82:	a808      	add	r0, sp, #32
   b4a84:	f002 f95a 	bl	b6d3c <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4a88:	a808      	add	r0, sp, #32
   b4a8a:	f002 f99d 	bl	b6dc8 <_ZNK8particle7BleUuid4typeEv>
   b4a8e:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4a90:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4a92:	2c00      	cmp	r4, #0
   b4a94:	d13a      	bne.n	b4b0c <loop+0x104>
            uint16_t uuid16 = tempUUID.shorted();
   b4a96:	f002 f9b3 	bl	b6e00 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4a9a:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4a9c:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4aa0:	2302      	movs	r3, #2
   b4aa2:	f10d 020a 	add.w	r2, sp, #10
   b4aa6:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4aa8:	a80d      	add	r0, sp, #52	; 0x34
   b4aaa:	f002 fa37 	bl	b6f1c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
      BLE.advertise(&data);
   b4aae:	f002 fbd7 	bl	b7260 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ab2:	2200      	movs	r2, #0
   b4ab4:	a90d      	add	r1, sp, #52	; 0x34
   b4ab6:	f002 fc41 	bl	b733c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
      BLE.onConnected(connectCallback);
   b4aba:	f002 fbd1 	bl	b7260 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4abe:	499d      	ldr	r1, [pc, #628]	; (b4d34 <loop+0x32c>)
   b4ac0:	2200      	movs	r2, #0
   b4ac2:	f002 ffc8 	bl	b7a56 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
      BLE.onDisconnected(disconnectCallback);
   b4ac6:	f002 fbcb 	bl	b7260 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4aca:	499b      	ldr	r1, [pc, #620]	; (b4d38 <loop+0x330>)
   b4acc:	2200      	movs	r2, #0
   b4ace:	f002 ffa3 	bl	b7a18 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
      int BLECountdown = 5000;
   b4ad2:	f241 3488 	movw	r4, #5000	; 0x1388
      while(!BLE.connected() && BLECountdown > 0) {
   b4ad6:	f002 fbc3 	bl	b7260 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ada:	f002 fc42 	bl	b7362 <_ZNK8particle14BleLocalDevice9connectedEv>
   b4ade:	b900      	cbnz	r0, b4ae2 <loop+0xda>
   b4ae0:	b9dc      	cbnz	r4, b4b1a <loop+0x112>
      if(BLE.connected()){ 
   b4ae2:	f002 fbbd 	bl	b7260 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ae6:	f002 fc3c 	bl	b7362 <_ZNK8particle14BleLocalDevice9connectedEv>
   b4aea:	4c94      	ldr	r4, [pc, #592]	; (b4d3c <loop+0x334>)
   b4aec:	bb40      	cbnz	r0, b4b40 <loop+0x138>
        bleWaitForConfig = false;
   b4aee:	7020      	strb	r0, [r4, #0]
        WITH_LOCK(Serial) {
   b4af0:	f004 fba8 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4af4:	9008      	str	r0, [sp, #32]
      { _M_device.lock(); }
   b4af6:	f7ff fb32 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("BLE not connected, continuing with stored settings.");
   b4afa:	f004 fba3 	bl	b9244 <_Z16_fetch_usbserialv>
   b4afe:	4990      	ldr	r1, [pc, #576]	; (b4d40 <loop+0x338>)
   b4b00:	f003 fc07 	bl	b8312 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b4b04:	a808      	add	r0, sp, #32
   b4b06:	f7ff fc5f 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4b0a:	e028      	b.n	b4b5e <loop+0x156>
   b4b0c:	f002 f97a 	bl	b6e04 <_ZNK8particle7BleUuid8rawBytesEv>
   b4b10:	9500      	str	r5, [sp, #0]
   b4b12:	4602      	mov	r2, r0
   b4b14:	2310      	movs	r3, #16
   b4b16:	2107      	movs	r1, #7
   b4b18:	e7c6      	b.n	b4aa8 <loop+0xa0>
        WITH_LOCK(Serial) {
   b4b1a:	f004 fb93 	bl	b9244 <_Z16_fetch_usbserialv>
        BLECountdown = BLECountdown - 10;
   b4b1e:	3c0a      	subs	r4, #10
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4b20:	9008      	str	r0, [sp, #32]
      { _M_device.lock(); }
   b4b22:	f7ff fb1c 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(BLECountdown);
   b4b26:	f004 fb8d 	bl	b9244 <_Z16_fetch_usbserialv>
   b4b2a:	220a      	movs	r2, #10
   b4b2c:	4621      	mov	r1, r4
   b4b2e:	f7ff faf9 	bl	b4124 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4b32:	a808      	add	r0, sp, #32
   b4b34:	f7ff fc48 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        delay(10);
   b4b38:	200a      	movs	r0, #10
   b4b3a:	f001 ff59 	bl	b69f0 <delay>
      while(!BLE.connected() && BLECountdown > 0) {
   b4b3e:	e7ca      	b.n	b4ad6 <loop+0xce>
        WITH_LOCK(Serial) {
   b4b40:	f004 fb80 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4b44:	9008      	str	r0, [sp, #32]
      { _M_device.lock(); }
   b4b46:	f7ff fb0a 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("BLE connected");
   b4b4a:	f004 fb7b 	bl	b9244 <_Z16_fetch_usbserialv>
   b4b4e:	497d      	ldr	r1, [pc, #500]	; (b4d44 <loop+0x33c>)
   b4b50:	f003 fbdf 	bl	b8312 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b4b54:	a808      	add	r0, sp, #32
   b4b56:	f7ff fc37 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        bleWaitForConfig = true;
   b4b5a:	2301      	movs	r3, #1
   b4b5c:	7023      	strb	r3, [r4, #0]
          Serial.println("bleWaitForConfig");
   b4b5e:	4d7a      	ldr	r5, [pc, #488]	; (b4d48 <loop+0x340>)
      while(bleWaitForConfig) {
   b4b60:	7823      	ldrb	r3, [r4, #0]
   b4b62:	b183      	cbz	r3, b4b86 <loop+0x17e>
        WITH_LOCK(Serial) {
   b4b64:	f004 fb6e 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4b68:	9008      	str	r0, [sp, #32]
      { _M_device.lock(); }
   b4b6a:	f7ff faf8 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("bleWaitForConfig");
   b4b6e:	f004 fb69 	bl	b9244 <_Z16_fetch_usbserialv>
   b4b72:	4629      	mov	r1, r5
   b4b74:	f003 fbcd 	bl	b8312 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b4b78:	a808      	add	r0, sp, #32
   b4b7a:	f7ff fc25 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        delay(100);
   b4b7e:	2064      	movs	r0, #100	; 0x64
   b4b80:	f001 ff36 	bl	b69f0 <delay>
      while(bleWaitForConfig) {
   b4b84:	e7ec      	b.n	b4b60 <loop+0x158>
      BLE.disconnectAll();
   b4b86:	f002 fb6b 	bl	b7260 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4b8a:	f002 fe73 	bl	b7874 <_ZNK8particle14BleLocalDevice13disconnectAllEv>
      BLE.off();
   b4b8e:	f002 fb67 	bl	b7260 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4b92:	f002 fcd8 	bl	b7546 <_ZNK8particle14BleLocalDevice3offEv>
      firmwareState = RECORDING;
   b4b96:	2301      	movs	r3, #1
   b4b98:	7033      	strb	r3, [r6, #0]
      break;
   b4b9a:	e740      	b.n	b4a1e <loop+0x16>
      WITH_LOCK(Serial) {
   b4b9c:	f004 fb52 	bl	b9244 <_Z16_fetch_usbserialv>
      lis3dh.read();
   b4ba0:	4c6a      	ldr	r4, [pc, #424]	; (b4d4c <loop+0x344>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4ba2:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b4ba4:	f7ff fadb 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("RECORDING");
   b4ba8:	f004 fb4c 	bl	b9244 <_Z16_fetch_usbserialv>
   b4bac:	4968      	ldr	r1, [pc, #416]	; (b4d50 <loop+0x348>)
      x = lis3dh.x_g;
   b4bae:	f8df b1d4 	ldr.w	fp, [pc, #468]	; b4d84 <loop+0x37c>
      y = lis3dh.y_g;
   b4bb2:	f8df 91d4 	ldr.w	r9, [pc, #468]	; b4d88 <loop+0x380>
      z = lis3dh.z_g;
   b4bb6:	4f67      	ldr	r7, [pc, #412]	; (b4d54 <loop+0x34c>)
   b4bb8:	f8df a1d0 	ldr.w	sl, [pc, #464]	; b4d8c <loop+0x384>
   b4bbc:	f8df 81d0 	ldr.w	r8, [pc, #464]	; b4d90 <loop+0x388>
        Serial.println("RECORDING");
   b4bc0:	f003 fba7 	bl	b8312 <_ZN5Print7printlnEPKc>
      WITH_LOCK(Serial) {
   b4bc4:	a80d      	add	r0, sp, #52	; 0x34
   b4bc6:	f7ff fbff 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      lis3dh.read();
   b4bca:	4620      	mov	r0, r4
   b4bcc:	f000 ff54 	bl	b5a78 <_ZN15Adafruit_LIS3DH4readEv>
      if(!firstLIS3DHReading) {
   b4bd0:	4b61      	ldr	r3, [pc, #388]	; (b4d58 <loop+0x350>)
      x = lis3dh.x_g;
   b4bd2:	edd4 7a03 	vldr	s15, [r4, #12]
      y = lis3dh.y_g;
   b4bd6:	edd4 8a04 	vldr	s17, [r4, #16]
      z = lis3dh.z_g;
   b4bda:	ed94 8a05 	vldr	s16, [r4, #20]
      if(!firstLIS3DHReading) {
   b4bde:	781a      	ldrb	r2, [r3, #0]
      x = lis3dh.x_g;
   b4be0:	edcb 7a00 	vstr	s15, [fp]
      y = lis3dh.y_g;
   b4be4:	edc9 8a00 	vstr	s17, [r9]
      z = lis3dh.z_g;
   b4be8:	ed87 8a00 	vstr	s16, [r7]
      if(!firstLIS3DHReading) {
   b4bec:	2a00      	cmp	r2, #0
   b4bee:	f040 80dd 	bne.w	b4dac <loop+0x3a4>
        if(abs(x - prevX) > kDeltaAccelThreshold || abs(y - prevY) > kDeltaAccelThreshold || abs(z - prevZ) > kDeltaAccelThreshold) {
   b4bf2:	ed9a 7a00 	vldr	s14, [sl]
          storedValues[storedValuesIndex] = 0;
   b4bf6:	4c59      	ldr	r4, [pc, #356]	; (b4d5c <loop+0x354>)
   b4bf8:	4d59      	ldr	r5, [pc, #356]	; (b4d60 <loop+0x358>)
   b4bfa:	6826      	ldr	r6, [r4, #0]
        if(abs(x - prevX) > kDeltaAccelThreshold || abs(y - prevY) > kDeltaAccelThreshold || abs(z - prevZ) > kDeltaAccelThreshold) {
   b4bfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
   b4c00:	eef0 7ae7 	vabs.f32	s15, s15
   b4c04:	ee17 0a90 	vmov	r0, s15
   b4c08:	f005 f818 	bl	b9c3c <__aeabi_f2d>
   b4c0c:	a342      	add	r3, pc, #264	; (adr r3, b4d18 <loop+0x310>)
   b4c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c12:	f005 f8e9 	bl	b9de8 <__aeabi_dcmpgt>
   b4c16:	2800      	cmp	r0, #0
   b4c18:	d178      	bne.n	b4d0c <loop+0x304>
   b4c1a:	edd8 7a00 	vldr	s15, [r8]
   b4c1e:	ee78 8ae7 	vsub.f32	s17, s17, s15
   b4c22:	eef0 7ae8 	vabs.f32	s15, s17
   b4c26:	ee17 0a90 	vmov	r0, s15
   b4c2a:	f005 f807 	bl	b9c3c <__aeabi_f2d>
   b4c2e:	a33a      	add	r3, pc, #232	; (adr r3, b4d18 <loop+0x310>)
   b4c30:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c34:	f005 f8d8 	bl	b9de8 <__aeabi_dcmpgt>
   b4c38:	2800      	cmp	r0, #0
   b4c3a:	d167      	bne.n	b4d0c <loop+0x304>
   b4c3c:	4b49      	ldr	r3, [pc, #292]	; (b4d64 <loop+0x35c>)
   b4c3e:	edd3 7a00 	vldr	s15, [r3]
   b4c42:	ee38 8a67 	vsub.f32	s16, s16, s15
   b4c46:	eef0 7ac8 	vabs.f32	s15, s16
   b4c4a:	ee17 0a90 	vmov	r0, s15
   b4c4e:	f004 fff5 	bl	b9c3c <__aeabi_f2d>
   b4c52:	a331      	add	r3, pc, #196	; (adr r3, b4d18 <loop+0x310>)
   b4c54:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c58:	f005 f8c6 	bl	b9de8 <__aeabi_dcmpgt>
   b4c5c:	2800      	cmp	r0, #0
   b4c5e:	d155      	bne.n	b4d0c <loop+0x304>
          storedValues[storedValuesIndex] = 0;
   b4c60:	55a8      	strb	r0, [r5, r6]
          if(storedValues[storedValuesIndex - 1] == 0) {
   b4c62:	4435      	add	r5, r6
   b4c64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   b4c68:	2b00      	cmp	r3, #0
   b4c6a:	f000 8093 	beq.w	b4d94 <loop+0x38c>
        storedTimes[storedValuesIndex] = Time.now(); 
   b4c6e:	6825      	ldr	r5, [r4, #0]
   b4c70:	f004 f9ed 	bl	b904e <_ZN9TimeClass3nowEv>
   b4c74:	4b3c      	ldr	r3, [pc, #240]	; (b4d68 <loop+0x360>)
   b4c76:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
        WITH_LOCK(Serial) {
   b4c7a:	f004 fae3 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4c7e:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b4c80:	f7ff fa6d 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.printlnf("Recording index: %i", storedValuesIndex);
   b4c84:	f004 fade 	bl	b9244 <_Z16_fetch_usbserialv>
   b4c88:	6822      	ldr	r2, [r4, #0]
   b4c8a:	4938      	ldr	r1, [pc, #224]	; (b4d6c <loop+0x364>)
   b4c8c:	f7ff fa8a 	bl	b41a4 <_ZN5Print8printlnfEPKcz>
        WITH_LOCK(Serial) {
   b4c90:	a80d      	add	r0, sp, #52	; 0x34
   b4c92:	f7ff fb99 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        storedValuesIndex++; 
   b4c96:	6823      	ldr	r3, [r4, #0]
   b4c98:	3301      	adds	r3, #1
   b4c9a:	6023      	str	r3, [r4, #0]
        WITH_LOCK(Serial) {
   b4c9c:	f004 fad2 	bl	b9244 <_Z16_fetch_usbserialv>
        os_mutex_lock(payloadAccessLock);
   b4ca0:	4c33      	ldr	r4, [pc, #204]	; (b4d70 <loop+0x368>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4ca2:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b4ca4:	f7ff fa5b 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("requesting payloadAccessLock");
   b4ca8:	f004 facc 	bl	b9244 <_Z16_fetch_usbserialv>
   b4cac:	4931      	ldr	r1, [pc, #196]	; (b4d74 <loop+0x36c>)
   b4cae:	f003 fb30 	bl	b8312 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b4cb2:	a80d      	add	r0, sp, #52	; 0x34
   b4cb4:	f7ff fb88 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        os_mutex_lock(payloadAccessLock);
   b4cb8:	6820      	ldr	r0, [r4, #0]
   b4cba:	f001 fb09 	bl	b62d0 <os_mutex_lock>
        delay(1);
   b4cbe:	2001      	movs	r0, #1
   b4cc0:	f001 fe96 	bl	b69f0 <delay>
        os_mutex_unlock(payloadAccessLock);
   b4cc4:	6820      	ldr	r0, [r4, #0]
   b4cc6:	f001 fb0b 	bl	b62e0 <os_mutex_unlock>
        WITH_LOCK(Serial) {
   b4cca:	f004 fabb 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4cce:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b4cd0:	f7ff fa45 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("payloadAccessLock released by RECORDING");
   b4cd4:	f004 fab6 	bl	b9244 <_Z16_fetch_usbserialv>
   b4cd8:	4927      	ldr	r1, [pc, #156]	; (b4d78 <loop+0x370>)
          Serial.println("First reading");
   b4cda:	f003 fb1a 	bl	b8312 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b4cde:	a80d      	add	r0, sp, #52	; 0x34
   b4ce0:	f7ff fb72 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      prevX = x;
   b4ce4:	f8db 3000 	ldr.w	r3, [fp]
      prevZ = z;
   b4ce8:	4a1e      	ldr	r2, [pc, #120]	; (b4d64 <loop+0x35c>)
      prevX = x;
   b4cea:	f8ca 3000 	str.w	r3, [sl]
      prevY = y;
   b4cee:	f8d9 3000 	ldr.w	r3, [r9]
   b4cf2:	f8c8 3000 	str.w	r3, [r8]
      prevZ = z;
   b4cf6:	683b      	ldr	r3, [r7, #0]
   b4cf8:	6013      	str	r3, [r2, #0]
      delay(recordingInterval);
   b4cfa:	4b20      	ldr	r3, [pc, #128]	; (b4d7c <loop+0x374>)
   b4cfc:	6818      	ldr	r0, [r3, #0]
}
   b4cfe:	b017      	add	sp, #92	; 0x5c
   b4d00:	ecbd 8b02 	vpop	{d8}
   b4d04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      delay(recordingInterval);
   b4d08:	f001 be72 	b.w	b69f0 <delay>
          storedValues[storedValuesIndex] = 1;
   b4d0c:	2301      	movs	r3, #1
   b4d0e:	55ab      	strb	r3, [r5, r6]
          sleepTimeoutCounter = 0; // reset sleep timeout because movement detected
   b4d10:	4b1b      	ldr	r3, [pc, #108]	; (b4d80 <loop+0x378>)
   b4d12:	2200      	movs	r2, #0
   b4d14:	601a      	str	r2, [r3, #0]
   b4d16:	e7aa      	b.n	b4c6e <loop+0x266>
   b4d18:	9999999a 	.word	0x9999999a
   b4d1c:	3fa99999 	.word	0x3fa99999
   b4d20:	2003da98 	.word	0x2003da98
   b4d24:	000ba30f 	.word	0x000ba30f
   b4d28:	2003e5fc 	.word	0x2003e5fc
   b4d2c:	2003e0c0 	.word	0x2003e0c0
   b4d30:	2003da40 	.word	0x2003da40
   b4d34:	000b47c9 	.word	0x000b47c9
   b4d38:	000b4801 	.word	0x000b4801
   b4d3c:	2003da90 	.word	0x2003da90
   b4d40:	000ba325 	.word	0x000ba325
   b4d44:	000ba317 	.word	0x000ba317
   b4d48:	000ba359 	.word	0x000ba359
   b4d4c:	2003deb8 	.word	0x2003deb8
   b4d50:	000ba3b9 	.word	0x000ba3b9
   b4d54:	2003e620 	.word	0x2003e620
   b4d58:	2003d9a8 	.word	0x2003d9a8
   b4d5c:	2003e5f8 	.word	0x2003e5f8
   b4d60:	2003e4f8 	.word	0x2003e4f8
   b4d64:	2003e03c 	.word	0x2003e03c
   b4d68:	2003e0f8 	.word	0x2003e0f8
   b4d6c:	000ba36a 	.word	0x000ba36a
   b4d70:	2003e030 	.word	0x2003e030
   b4d74:	000ba37e 	.word	0x000ba37e
   b4d78:	000ba39b 	.word	0x000ba39b
   b4d7c:	2003e040 	.word	0x2003e040
   b4d80:	2003e0e4 	.word	0x2003e0e4
   b4d84:	2003e618 	.word	0x2003e618
   b4d88:	2003e61c 	.word	0x2003e61c
   b4d8c:	2003e034 	.word	0x2003e034
   b4d90:	2003e038 	.word	0x2003e038
            sleepTimeoutCounter++;
   b4d94:	4a0b      	ldr	r2, [pc, #44]	; (b4dc4 <loop+0x3bc>)
   b4d96:	6813      	ldr	r3, [r2, #0]
   b4d98:	3301      	adds	r3, #1
   b4d9a:	6013      	str	r3, [r2, #0]
            if(sleepReadyTest()){
   b4d9c:	f7ff fafe 	bl	b439c <_Z14sleepReadyTestv>
   b4da0:	2800      	cmp	r0, #0
   b4da2:	f43f af64 	beq.w	b4c6e <loop+0x266>
              engageSleep();
   b4da6:	f7ff fd43 	bl	b4830 <_Z11engageSleepv>
   b4daa:	e760      	b.n	b4c6e <loop+0x266>
        firstLIS3DHReading = false;
   b4dac:	2200      	movs	r2, #0
   b4dae:	701a      	strb	r2, [r3, #0]
        WITH_LOCK(Serial) {
   b4db0:	f004 fa48 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4db4:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b4db6:	f7ff f9d2 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("First reading");
   b4dba:	f004 fa43 	bl	b9244 <_Z16_fetch_usbserialv>
   b4dbe:	4902      	ldr	r1, [pc, #8]	; (b4dc8 <loop+0x3c0>)
   b4dc0:	e78b      	b.n	b4cda <loop+0x2d2>
   b4dc2:	bf00      	nop
   b4dc4:	2003e0e4 	.word	0x2003e0e4
   b4dc8:	000ba3c3 	.word	0x000ba3c3

000b4dcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch(bleQuestionCount){
   b4dd0:	4daf      	ldr	r5, [pc, #700]	; (b5090 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c4>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4dd2:	b095      	sub	sp, #84	; 0x54
   b4dd4:	4607      	mov	r7, r0
   b4dd6:	460c      	mov	r4, r1
  bleInputBuffer = "";
   b4dd8:	48ae      	ldr	r0, [pc, #696]	; (b5094 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4dda:	49af      	ldr	r1, [pc, #700]	; (b5098 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
   b4ddc:	f003 fc19 	bl	b8612 <_ZN6StringaSEPKc>
  switch(bleQuestionCount){
   b4de0:	682b      	ldr	r3, [r5, #0]
   b4de2:	2b07      	cmp	r3, #7
   b4de4:	f200 810e 	bhi.w	b5004 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x238>
   b4de8:	e8df f013 	tbh	[pc, r3, lsl #1]
   b4dec:	00c8017d 	.word	0x00c8017d
   b4df0:	008c00a7 	.word	0x008c00a7
   b4df4:	0048006a 	.word	0x0048006a
   b4df8:	00080023 	.word	0x00080023
   b4dfc:	443c      	add	r4, r7
   b4dfe:	1e7e      	subs	r6, r7, #1
	String & operator += (char c)			{concat(c); return (*this);}
   b4e00:	4fa4      	ldr	r7, [pc, #656]	; (b5094 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4e02:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4e04:	42b4      	cmp	r4, r6
   b4e06:	f000 833e 	beq.w	b5486 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6ba>
        WITH_LOCK(Serial) {
   b4e0a:	f004 fa1b 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4e0e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4e10:	f7ff f9a5 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4e14:	f004 fa16 	bl	b9244 <_Z16_fetch_usbserialv>
   b4e18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4e1c:	220a      	movs	r2, #10
   b4e1e:	f7ff f972 	bl	b4106 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4e22:	a801      	add	r0, sp, #4
   b4e24:	f7ff fad0 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4e28:	7831      	ldrb	r1, [r6, #0]
   b4e2a:	4638      	mov	r0, r7
   b4e2c:	f003 fc44 	bl	b86b8 <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   b4e30:	e7e8      	b.n	b4e04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x38>
   b4e32:	443c      	add	r4, r7
   b4e34:	1e7e      	subs	r6, r7, #1
   b4e36:	f8df 825c 	ldr.w	r8, [pc, #604]	; b5094 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>
   b4e3a:	4f98      	ldr	r7, [pc, #608]	; (b509c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d0>)
   b4e3c:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4e3e:	42a6      	cmp	r6, r4
   b4e40:	f000 82f6 	beq.w	b5430 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x664>
        WITH_LOCK(Serial) {
   b4e44:	f004 f9fe 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4e48:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4e4a:	f7ff f988 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4e4e:	f004 f9f9 	bl	b9244 <_Z16_fetch_usbserialv>
   b4e52:	220a      	movs	r2, #10
   b4e54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4e58:	f7ff f955 	bl	b4106 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4e5c:	a801      	add	r0, sp, #4
   b4e5e:	f7ff fab3 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4e62:	7831      	ldrb	r1, [r6, #0]
   b4e64:	488b      	ldr	r0, [pc, #556]	; (b5094 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4e66:	f003 fc27 	bl	b86b8 <_ZN6String6concatEc>
        reportingInterval = atoi(bleInputBuffer) * 1000;
   b4e6a:	f8d8 0000 	ldr.w	r0, [r8]
   b4e6e:	f004 ffeb 	bl	b9e48 <atoi>
   b4e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4e76:	4358      	muls	r0, r3
   b4e78:	6038      	str	r0, [r7, #0]
      for(int i = 0; i < len - 1; i++){
   b4e7a:	e7e0      	b.n	b4e3e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x72>
   b4e7c:	443c      	add	r4, r7
   b4e7e:	1e7e      	subs	r6, r7, #1
   b4e80:	f8df 8210 	ldr.w	r8, [pc, #528]	; b5094 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>
        recordingInterval = atoi(bleInputBuffer);
   b4e84:	4f86      	ldr	r7, [pc, #536]	; (b50a0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d4>)
   b4e86:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4e88:	42a6      	cmp	r6, r4
   b4e8a:	f000 8255 	beq.w	b5338 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x56c>
        WITH_LOCK(Serial) {
   b4e8e:	f004 f9d9 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4e92:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4e94:	f7ff f963 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4e98:	f004 f9d4 	bl	b9244 <_Z16_fetch_usbserialv>
   b4e9c:	220a      	movs	r2, #10
   b4e9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4ea2:	f7ff f930 	bl	b4106 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4ea6:	a801      	add	r0, sp, #4
   b4ea8:	f7ff fa8e 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4eac:	7831      	ldrb	r1, [r6, #0]
   b4eae:	4879      	ldr	r0, [pc, #484]	; (b5094 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4eb0:	f003 fc02 	bl	b86b8 <_ZN6String6concatEc>
        recordingInterval = atoi(bleInputBuffer);
   b4eb4:	f8d8 0000 	ldr.w	r0, [r8]
   b4eb8:	f004 ffc6 	bl	b9e48 <atoi>
   b4ebc:	6038      	str	r0, [r7, #0]
      for(int i = 0; i < len - 1; i++){
   b4ebe:	e7e3      	b.n	b4e88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xbc>
   b4ec0:	443c      	add	r4, r7
   b4ec2:	1e7e      	subs	r6, r7, #1
   b4ec4:	f8df 81cc 	ldr.w	r8, [pc, #460]	; b5094 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>
   b4ec8:	4f76      	ldr	r7, [pc, #472]	; (b50a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d8>)
   b4eca:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4ecc:	42a6      	cmp	r6, r4
   b4ece:	f000 81ec 	beq.w	b52aa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4de>
        WITH_LOCK(Serial) {
   b4ed2:	f004 f9b7 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4ed6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4ed8:	f7ff f941 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4edc:	f004 f9b2 	bl	b9244 <_Z16_fetch_usbserialv>
   b4ee0:	220a      	movs	r2, #10
   b4ee2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4ee6:	f7ff f90e 	bl	b4106 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4eea:	a801      	add	r0, sp, #4
   b4eec:	f7ff fa6c 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4ef0:	7831      	ldrb	r1, [r6, #0]
   b4ef2:	4868      	ldr	r0, [pc, #416]	; (b5094 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4ef4:	f003 fbe0 	bl	b86b8 <_ZN6String6concatEc>
        dsid = atoi(bleInputBuffer);
   b4ef8:	f8d8 0000 	ldr.w	r0, [r8]
   b4efc:	f004 ffa4 	bl	b9e48 <atoi>
   b4f00:	6038      	str	r0, [r7, #0]
      for(int i = 0; i < len - 1; i++){
   b4f02:	e7e3      	b.n	b4ecc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>
   b4f04:	443c      	add	r4, r7
   b4f06:	1e7e      	subs	r6, r7, #1
   b4f08:	4f62      	ldr	r7, [pc, #392]	; (b5094 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4f0a:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4f0c:	42a6      	cmp	r6, r4
   b4f0e:	f000 8192 	beq.w	b5236 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x46a>
        WITH_LOCK(Serial) {
   b4f12:	f004 f997 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4f16:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4f18:	f7ff f921 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4f1c:	f004 f992 	bl	b9244 <_Z16_fetch_usbserialv>
   b4f20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4f24:	220a      	movs	r2, #10
   b4f26:	f7ff f8ee 	bl	b4106 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4f2a:	a801      	add	r0, sp, #4
   b4f2c:	f7ff fa4c 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4f30:	7831      	ldrb	r1, [r6, #0]
   b4f32:	4638      	mov	r0, r7
   b4f34:	f003 fbc0 	bl	b86b8 <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   b4f38:	e7e8      	b.n	b4f0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>
   b4f3a:	443c      	add	r4, r7
   b4f3c:	1e7e      	subs	r6, r7, #1
        password = bleInputBuffer;
   b4f3e:	f8df 8184 	ldr.w	r8, [pc, #388]	; b50c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f8>
   b4f42:	4f54      	ldr	r7, [pc, #336]	; (b5094 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4f44:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4f46:	42a6      	cmp	r6, r4
   b4f48:	f000 810d 	beq.w	b5166 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x39a>
        WITH_LOCK(Serial) {
   b4f4c:	f004 f97a 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4f50:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4f52:	f7ff f904 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4f56:	f004 f975 	bl	b9244 <_Z16_fetch_usbserialv>
   b4f5a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4f5e:	220a      	movs	r2, #10
   b4f60:	f7ff f8d1 	bl	b4106 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4f64:	a801      	add	r0, sp, #4
   b4f66:	f7ff fa2f 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4f6a:	7831      	ldrb	r1, [r6, #0]
   b4f6c:	4638      	mov	r0, r7
   b4f6e:	f003 fba3 	bl	b86b8 <_ZN6String6concatEc>
        password = bleInputBuffer;
   b4f72:	4639      	mov	r1, r7
   b4f74:	4640      	mov	r0, r8
   b4f76:	f003 fb32 	bl	b85de <_ZN6StringaSERKS_>
      for(int i = 0; i < len - 1; i++){
   b4f7a:	e7e4      	b.n	b4f46 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x17a>
   b4f7c:	443c      	add	r4, r7
   b4f7e:	1e7e      	subs	r6, r7, #1
        ssid = bleInputBuffer;
   b4f80:	f8df 8134 	ldr.w	r8, [pc, #308]	; b50b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ec>
   b4f84:	4f43      	ldr	r7, [pc, #268]	; (b5094 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4f86:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4f88:	42b4      	cmp	r4, r6
   b4f8a:	d041      	beq.n	b5010 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x244>
   b4f8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4f90:	4638      	mov	r0, r7
   b4f92:	f003 fb91 	bl	b86b8 <_ZN6String6concatEc>
        ssid = bleInputBuffer;
   b4f96:	4639      	mov	r1, r7
   b4f98:	4640      	mov	r0, r8
   b4f9a:	f003 fb20 	bl	b85de <_ZN6StringaSERKS_>
        WITH_LOCK(Serial) {
   b4f9e:	f004 f951 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4fa2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4fa4:	f7ff f8db 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4fa8:	f004 f94c 	bl	b9244 <_Z16_fetch_usbserialv>
   b4fac:	7831      	ldrb	r1, [r6, #0]
   b4fae:	220a      	movs	r2, #10
   b4fb0:	f7ff f8a9 	bl	b4106 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4fb4:	a801      	add	r0, sp, #4
   b4fb6:	f7ff fa07 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      for(int i = 0; i < len - 1; i++){
   b4fba:	e7e5      	b.n	b4f88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1bc>
      networkBuffer = networks[networkCount - 1].ssid;
   b4fbc:	4b3a      	ldr	r3, [pc, #232]	; (b50a8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2dc>)
   b4fbe:	483b      	ldr	r0, [pc, #236]	; (b50ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e0>)
   b4fc0:	2238      	movs	r2, #56	; 0x38
   b4fc2:	fb02 3101 	mla	r1, r2, r1, r3
   b4fc6:	3104      	adds	r1, #4
   b4fc8:	f003 fb23 	bl	b8612 <_ZN6StringaSEPKc>
      WITH_LOCK(Serial) {
   b4fcc:	f004 f93a 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4fd0:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4fd2:	f7ff f8c4 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(networkBuffer.length());
   b4fd6:	f004 f935 	bl	b9244 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4fda:	68a1      	ldr	r1, [r4, #8]
   b4fdc:	220a      	movs	r2, #10
   b4fde:	4606      	mov	r6, r0
   b4fe0:	f003 f9a1 	bl	b8326 <_ZN5Print11printNumberEmh>
        n += println();
   b4fe4:	4630      	mov	r0, r6
   b4fe6:	f003 f988 	bl	b82fa <_ZN5Print7printlnEv>
      WITH_LOCK(Serial) {
   b4fea:	a801      	add	r0, sp, #4
   b4fec:	f7ff f9ec 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      txCharacteristic.setValue(networkBuffer);
   b4ff0:	492e      	ldr	r1, [pc, #184]	; (b50ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e0>)
   b4ff2:	482f      	ldr	r0, [pc, #188]	; (b50b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   b4ff4:	2200      	movs	r2, #0
   b4ff6:	f002 f861 	bl	b70bc <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
      txCharacteristic.setValue("]\nEnter network SSID (blank to skip, 'clear' to reset credentials): ");
   b4ffa:	492e      	ldr	r1, [pc, #184]	; (b50b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e8>)
   b4ffc:	2200      	movs	r2, #0
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   b4ffe:	482c      	ldr	r0, [pc, #176]	; (b50b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   b5000:	f002 f861 	bl	b70c6 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
  bleQuestionCount++;
   b5004:	682b      	ldr	r3, [r5, #0]
   b5006:	3301      	adds	r3, #1
   b5008:	602b      	str	r3, [r5, #0]
}
   b500a:	b015      	add	sp, #84	; 0x54
   b500c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      WITH_LOCK(Serial) {
   b5010:	f004 f918 	bl	b9244 <_Z16_fetch_usbserialv>
	const char * c_str() const { return buffer; }
   b5014:	4e28      	ldr	r6, [pc, #160]	; (b50b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ec>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5016:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b5018:	f7ff f8a1 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(ssid);
   b501c:	f004 f912 	bl	b9244 <_Z16_fetch_usbserialv>
   b5020:	6831      	ldr	r1, [r6, #0]
   b5022:	f003 f976 	bl	b8312 <_ZN5Print7printlnEPKc>
        Serial.println(ssid.length());
   b5026:	f004 f90d 	bl	b9244 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b502a:	68b1      	ldr	r1, [r6, #8]
   b502c:	220a      	movs	r2, #10
   b502e:	4604      	mov	r4, r0
   b5030:	f003 f979 	bl	b8326 <_ZN5Print11printNumberEmh>
        n += println();
   b5034:	4620      	mov	r0, r4
   b5036:	f003 f960 	bl	b82fa <_ZN5Print7printlnEv>
      WITH_LOCK(Serial) {
   b503a:	a801      	add	r0, sp, #4
   b503c:	f7ff f9c4 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5040:	4915      	ldr	r1, [pc, #84]	; (b5098 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
   b5042:	4630      	mov	r0, r6
   b5044:	f003 fb81 	bl	b874a <_ZNK6String6equalsEPKc>
      if(ssid == ""){
   b5048:	4604      	mov	r4, r0
   b504a:	2800      	cmp	r0, #0
   b504c:	d03c      	beq.n	b50c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2fc>
        bleQuestionCount = 3;
   b504e:	2303      	movs	r3, #3
   b5050:	602b      	str	r3, [r5, #0]
   b5052:	4c14      	ldr	r4, [pc, #80]	; (b50a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d8>)
        EEPROM.get(0, dsid);
   b5054:	f004 fb1a 	bl	b968c <_Z21__fetch_global_EEPROMv>
   b5058:	4621      	mov	r1, r4
   b505a:	2204      	movs	r2, #4
   b505c:	2000      	movs	r0, #0
   b505e:	f001 f987 	bl	b6370 <HAL_EEPROM_Get>
        txCharacteristic.setValue("\nCurrent DSID is [");
   b5062:	4916      	ldr	r1, [pc, #88]	; (b50bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f0>)
   b5064:	4812      	ldr	r0, [pc, #72]	; (b50b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   b5066:	2200      	movs	r2, #0
   b5068:	f002 f82d 	bl	b70c6 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        if(dsid != -1){
   b506c:	6821      	ldr	r1, [r4, #0]
   b506e:	1c4c      	adds	r4, r1, #1
   b5070:	d00b      	beq.n	b508a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2be>
          txCharacteristic.setValue(String(dsid));
   b5072:	220a      	movs	r2, #10
   b5074:	a801      	add	r0, sp, #4
   b5076:	f003 fade 	bl	b8636 <_ZN6StringC1Eih>
   b507a:	480d      	ldr	r0, [pc, #52]	; (b50b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   b507c:	2200      	movs	r2, #0
   b507e:	a901      	add	r1, sp, #4
   b5080:	f002 f81c 	bl	b70bc <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b5084:	a801      	add	r0, sp, #4
   b5086:	f003 fa4b 	bl	b8520 <_ZN6StringD1Ev>
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   b508a:	490d      	ldr	r1, [pc, #52]	; (b50c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f4>)
   b508c:	2200      	movs	r2, #0
   b508e:	e7b6      	b.n	b4ffe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x232>
   b5090:	2003da8c 	.word	0x2003da8c
   b5094:	2003da7c 	.word	0x2003da7c
   b5098:	000ba4c7 	.word	0x000ba4c7
   b509c:	2003e044 	.word	0x2003e044
   b50a0:	2003e040 	.word	0x2003e040
   b50a4:	2003da94 	.word	0x2003da94
   b50a8:	2003def8 	.word	0x2003def8
   b50ac:	2003dee4 	.word	0x2003dee4
   b50b0:	2003e5fc 	.word	0x2003e5fc
   b50b4:	000ba3fd 	.word	0x000ba3fd
   b50b8:	2003e0e8 	.word	0x2003e0e8
   b50bc:	000ba442 	.word	0x000ba442
   b50c0:	000ba455 	.word	0x000ba455
   b50c4:	2003e010 	.word	0x2003e010
   b50c8:	49ba      	ldr	r1, [pc, #744]	; (b53b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e8>)
   b50ca:	4630      	mov	r0, r6
   b50cc:	f003 fb3d 	bl	b874a <_ZNK6String6equalsEPKc>
      }else if(ssid == "clear"){
   b50d0:	4602      	mov	r2, r0
   b50d2:	2800      	cmp	r0, #0
   b50d4:	d045      	beq.n	b5162 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x396>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   b50d6:	48b8      	ldr	r0, [pc, #736]	; (b53b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b50d8:	4623      	mov	r3, r4
   b50da:	6840      	ldr	r0, [r0, #4]
   b50dc:	4622      	mov	r2, r4
   b50de:	4621      	mov	r1, r4
   b50e0:	f001 fc0e 	bl	b6900 <network_clear_credentials>
          bleQuestionCount = 0;
   b50e4:	602c      	str	r4, [r5, #0]
      txCharacteristic.setValue("\nCredentials are currently stored for:\n[");
   b50e6:	49b5      	ldr	r1, [pc, #724]	; (b53bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f0>)
   b50e8:	48b5      	ldr	r0, [pc, #724]	; (b53c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
      networkCount = WiFi.getCredentials(networks, 5);
   b50ea:	f8df a33c 	ldr.w	sl, [pc, #828]	; b5428 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x65c>
   b50ee:	4eb5      	ldr	r6, [pc, #724]	; (b53c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f8>)
   b50f0:	4cb5      	ldr	r4, [pc, #724]	; (b53c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5fc>)
        txCharacteristic.setValue(networkBuffer);
   b50f2:	f8df 82cc 	ldr.w	r8, [pc, #716]	; b53c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>
        txCharacteristic.setValue(",\n");
   b50f6:	f8df 9334 	ldr.w	r9, [pc, #820]	; b542c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x660>
      txCharacteristic.setValue("\nCredentials are currently stored for:\n[");
   b50fa:	2200      	movs	r2, #0
   b50fc:	f001 ffe3 	bl	b70c6 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      networkCount = WiFi.getCredentials(networks, 5);
   b5100:	49b2      	ldr	r1, [pc, #712]	; (b53cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x600>)
   b5102:	48ad      	ldr	r0, [pc, #692]	; (b53b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b5104:	2205      	movs	r2, #5
   b5106:	f004 f8fd 	bl	b9304 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>
      for(int i = 0; i < networkCount - 1; i++){
   b510a:	2700      	movs	r7, #0
      networkCount = WiFi.getCredentials(networks, 5);
   b510c:	f8ca 0000 	str.w	r0, [sl]
      for(int i = 0; i < networkCount - 1; i++){
   b5110:	f8da 1000 	ldr.w	r1, [sl]
   b5114:	3901      	subs	r1, #1
   b5116:	42b9      	cmp	r1, r7
   b5118:	f77f af50 	ble.w	b4fbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1f0>
        networkBuffer = networks[i].ssid;
   b511c:	4631      	mov	r1, r6
   b511e:	4620      	mov	r0, r4
   b5120:	f003 fa77 	bl	b8612 <_ZN6StringaSEPKc>
        WITH_LOCK(Serial) {
   b5124:	f004 f88e 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5128:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b512a:	f7ff f818 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(networkBuffer.length());
   b512e:	f004 f889 	bl	b9244 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b5132:	68a1      	ldr	r1, [r4, #8]
   b5134:	220a      	movs	r2, #10
   b5136:	4683      	mov	fp, r0
   b5138:	f003 f8f5 	bl	b8326 <_ZN5Print11printNumberEmh>
        n += println();
   b513c:	4658      	mov	r0, fp
   b513e:	f003 f8dc 	bl	b82fa <_ZN5Print7printlnEv>
        WITH_LOCK(Serial) {
   b5142:	a801      	add	r0, sp, #4
   b5144:	f7ff f940 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        txCharacteristic.setValue(networkBuffer);
   b5148:	2200      	movs	r2, #0
   b514a:	4621      	mov	r1, r4
   b514c:	4640      	mov	r0, r8
   b514e:	f001 ffb5 	bl	b70bc <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        txCharacteristic.setValue(",\n");
   b5152:	2200      	movs	r2, #0
   b5154:	4649      	mov	r1, r9
   b5156:	4640      	mov	r0, r8
   b5158:	f001 ffb5 	bl	b70c6 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      for(int i = 0; i < networkCount - 1; i++){
   b515c:	3701      	adds	r7, #1
   b515e:	3638      	adds	r6, #56	; 0x38
   b5160:	e7d6      	b.n	b5110 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x344>
        txCharacteristic.setValue("\nEnter network password: ");
   b5162:	499b      	ldr	r1, [pc, #620]	; (b53d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x604>)
   b5164:	e74b      	b.n	b4ffe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x232>
      WITH_LOCK(Serial) {
   b5166:	f004 f86d 	bl	b9244 <_Z16_fetch_usbserialv>
	const char * c_str() const { return buffer; }
   b516a:	4c9a      	ldr	r4, [pc, #616]	; (b53d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x608>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b516c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b516e:	f7fe fff6 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(password);
   b5172:	f004 f867 	bl	b9244 <_Z16_fetch_usbserialv>
   b5176:	6821      	ldr	r1, [r4, #0]
   b5178:	f003 f8cb 	bl	b8312 <_ZN5Print7printlnEPKc>
        Serial.println(password.length());
   b517c:	f004 f862 	bl	b9244 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b5180:	68a1      	ldr	r1, [r4, #8]
   b5182:	4606      	mov	r6, r0
   b5184:	220a      	movs	r2, #10
   b5186:	f003 f8ce 	bl	b8326 <_ZN5Print11printNumberEmh>
        n += println();
   b518a:	4630      	mov	r0, r6
   b518c:	f003 f8b5 	bl	b82fa <_ZN5Print7printlnEv>
      WITH_LOCK(Serial) {
   b5190:	a801      	add	r0, sp, #4
   b5192:	f7ff f919 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b5196:	4b90      	ldr	r3, [pc, #576]	; (b53d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60c>)
   b5198:	6826      	ldr	r6, [r4, #0]
   b519a:	f8d3 8000 	ldr.w	r8, [r3]
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b519e:	f1b8 0f00 	cmp.w	r8, #0
   b51a2:	d044      	beq.n	b522e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x462>
   b51a4:	4640      	mov	r0, r8
   b51a6:	f004 fef5 	bl	b9f94 <strlen>
   b51aa:	4607      	mov	r7, r0
   b51ac:	2e00      	cmp	r6, #0
   b51ae:	d040      	beq.n	b5232 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x466>
   b51b0:	4630      	mov	r0, r6
   b51b2:	f004 feef 	bl	b9f94 <strlen>
   b51b6:	4604      	mov	r4, r0
        memset(&creds, 0, sizeof(creds));
   b51b8:	2238      	movs	r2, #56	; 0x38
   b51ba:	2100      	movs	r1, #0
   b51bc:	a806      	add	r0, sp, #24
   b51be:	f004 fea1 	bl	b9f04 <memset>
        creds.size = sizeof(creds);
   b51c2:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b51c4:	e9cd 3801 	strd	r3, r8, [sp, #4]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b51c8:	487b      	ldr	r0, [pc, #492]	; (b53b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
        creds.password_len = passwordLen;
   b51ca:	9405      	str	r4, [sp, #20]
        creds.security = WLanSecurityType(security);
   b51cc:	2303      	movs	r3, #3
   b51ce:	f88d 3018 	strb.w	r3, [sp, #24]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b51d2:	2300      	movs	r3, #0
   b51d4:	aa01      	add	r2, sp, #4
   b51d6:	4619      	mov	r1, r3
   b51d8:	6840      	ldr	r0, [r0, #4]
        creds.password = password;
   b51da:	e9cd 7603 	strd	r7, r6, [sp, #12]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b51de:	f001 fb87 	bl	b68f0 <network_set_credentials>
      WITH_LOCK(Serial) {
   b51e2:	f004 f82f 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b51e6:	9000      	str	r0, [sp, #0]
      { _M_device.lock(); }
   b51e8:	f7fe ffb9 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("\n\nCredentials set with ssid: " + ssid + "\npassword: " + password + "\n\n");
   b51ec:	f004 f82a 	bl	b9244 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b51f0:	497a      	ldr	r1, [pc, #488]	; (b53dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x610>)
   b51f2:	4604      	mov	r4, r0
   b51f4:	a801      	add	r0, sp, #4
   b51f6:	f003 f9de 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b51fa:	4977      	ldr	r1, [pc, #476]	; (b53d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60c>)
   b51fc:	a801      	add	r0, sp, #4
   b51fe:	f003 fa79 	bl	b86f4 <_ZplRK15StringSumHelperRK6String>
   b5202:	4977      	ldr	r1, [pc, #476]	; (b53e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x614>)
   b5204:	f003 fa82 	bl	b870c <_ZplRK15StringSumHelperPKc>
   b5208:	4972      	ldr	r1, [pc, #456]	; (b53d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x608>)
   b520a:	f003 fa73 	bl	b86f4 <_ZplRK15StringSumHelperRK6String>
   b520e:	4975      	ldr	r1, [pc, #468]	; (b53e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x618>)
   b5210:	f003 fa7c 	bl	b870c <_ZplRK15StringSumHelperPKc>
   b5214:	6801      	ldr	r1, [r0, #0]
   b5216:	4620      	mov	r0, r4
   b5218:	f003 f87b 	bl	b8312 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b521c:	a801      	add	r0, sp, #4
   b521e:	f003 f97f 	bl	b8520 <_ZN6StringD1Ev>
      WITH_LOCK(Serial) {
   b5222:	4668      	mov	r0, sp
   b5224:	f7ff f8d0 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      txCharacteristic.setValue("\nEnter 'test' to test credentials (blank to skip): ");
   b5228:	496f      	ldr	r1, [pc, #444]	; (b53e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x61c>)
   b522a:	2200      	movs	r2, #0
   b522c:	e6e7      	b.n	b4ffe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x232>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b522e:	4647      	mov	r7, r8
   b5230:	e7bc      	b.n	b51ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3e0>
   b5232:	4634      	mov	r4, r6
   b5234:	e7c0      	b.n	b51b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3ec>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5236:	496d      	ldr	r1, [pc, #436]	; (b53ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x620>)
   b5238:	486d      	ldr	r0, [pc, #436]	; (b53f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x624>)
   b523a:	f003 fa86 	bl	b874a <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == "test" && WiFi.hasCredentials()){
   b523e:	2800      	cmp	r0, #0
   b5240:	f43f af07 	beq.w	b5052 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x286>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b5244:	4c5c      	ldr	r4, [pc, #368]	; (b53b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
        return network_has_credentials(*this, 0, NULL);
   b5246:	2200      	movs	r2, #0
   b5248:	6860      	ldr	r0, [r4, #4]
   b524a:	4611      	mov	r1, r2
   b524c:	f001 fb48 	bl	b68e0 <network_has_credentials>
   b5250:	2800      	cmp	r0, #0
   b5252:	f43f aefe 	beq.w	b5052 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x286>
        WiFi.on();
   b5256:	4620      	mov	r0, r4
   b5258:	f7fe ffb2 	bl	b41c0 <_ZN5spark9WiFiClass2onEv>
        WiFi.connect();
   b525c:	2100      	movs	r1, #0
   b525e:	4620      	mov	r0, r4
   b5260:	f7fe ffba 	bl	b41d8 <_ZN5spark9WiFiClass7connectEj>
        return network_connecting(*this, 0, NULL);
   b5264:	2200      	movs	r2, #0
   b5266:	6860      	ldr	r0, [r4, #4]
   b5268:	4611      	mov	r1, r2
   b526a:	f001 fb01 	bl	b6870 <network_connecting>
        while(WiFi.connecting() || !WiFi.ready()){
   b526e:	b178      	cbz	r0, b5290 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4c4>
            Serial.println("timeout");
   b5270:	f003 ffe8 	bl	b9244 <_Z16_fetch_usbserialv>
   b5274:	495f      	ldr	r1, [pc, #380]	; (b53f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x628>)
   b5276:	f003 f84c 	bl	b8312 <_ZN5Print7printlnEPKc>
            wifiTest = false;
   b527a:	2400      	movs	r4, #0
        WiFi.off();
   b527c:	484e      	ldr	r0, [pc, #312]	; (b53b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b527e:	f7fe ffa5 	bl	b41cc <_ZN5spark9WiFiClass3offEv>
        if(wifiTest){
   b5282:	b164      	cbz	r4, b529e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4d2>
          txCharacteristic.setValue("Success!\n");
   b5284:	495c      	ldr	r1, [pc, #368]	; (b53f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x62c>)
   b5286:	484e      	ldr	r0, [pc, #312]	; (b53c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   b5288:	2200      	movs	r2, #0
   b528a:	f001 ff1c 	bl	b70c6 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
   b528e:	e6e0      	b.n	b5052 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x286>
        while(WiFi.connecting() || !WiFi.ready()){
   b5290:	4620      	mov	r0, r4
   b5292:	f7fe ffa6 	bl	b41e2 <_ZN5spark9WiFiClass5readyEv>
   b5296:	4604      	mov	r4, r0
   b5298:	2800      	cmp	r0, #0
   b529a:	d0e9      	beq.n	b5270 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4a4>
   b529c:	e7ee      	b.n	b527c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4b0>
          txCharacteristic.setValue("ERROR: WiFi connection timeout\n");
   b529e:	4957      	ldr	r1, [pc, #348]	; (b53fc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x630>)
   b52a0:	4847      	ldr	r0, [pc, #284]	; (b53c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   b52a2:	4622      	mov	r2, r4
   b52a4:	f001 ff0f 	bl	b70c6 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
   b52a8:	e71c      	b.n	b50e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x318>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b52aa:	4955      	ldr	r1, [pc, #340]	; (b5400 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x634>)
   b52ac:	4850      	ldr	r0, [pc, #320]	; (b53f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x624>)
   b52ae:	f003 fa4c 	bl	b874a <_ZNK6String6equalsEPKc>
      if(bleInputBuffer != ""){
   b52b2:	4604      	mov	r4, r0
   b52b4:	b998      	cbnz	r0, b52de <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x512>
        EEPROM.put(0, dsid);
   b52b6:	f004 f9e9 	bl	b968c <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b52ba:	4952      	ldr	r1, [pc, #328]	; (b5404 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x638>)
   b52bc:	2204      	movs	r2, #4
   b52be:	4620      	mov	r0, r4
   b52c0:	f001 f85e 	bl	b6380 <HAL_EEPROM_Put>
        WITH_LOCK(Serial) {
   b52c4:	f003 ffbe 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b52c8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b52ca:	f7fe ff48 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("dsid entered");
   b52ce:	f003 ffb9 	bl	b9244 <_Z16_fetch_usbserialv>
   b52d2:	494d      	ldr	r1, [pc, #308]	; (b5408 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x63c>)
   b52d4:	f003 f81d 	bl	b8312 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b52d8:	a801      	add	r0, sp, #4
   b52da:	f7ff f875 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      EEPROM.get(0, dsid);
   b52de:	f004 f9d5 	bl	b968c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b52e2:	2204      	movs	r2, #4
   b52e4:	4947      	ldr	r1, [pc, #284]	; (b5404 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x638>)
   b52e6:	4c49      	ldr	r4, [pc, #292]	; (b540c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x640>)
   b52e8:	2000      	movs	r0, #0
   b52ea:	f001 f841 	bl	b6370 <HAL_EEPROM_Get>
      Serial.println("dsid: " + dsid);
   b52ee:	f003 ffa9 	bl	b9244 <_Z16_fetch_usbserialv>
   b52f2:	683b      	ldr	r3, [r7, #0]
   b52f4:	4946      	ldr	r1, [pc, #280]	; (b5410 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x644>)
   b52f6:	4419      	add	r1, r3
   b52f8:	f003 f80b 	bl	b8312 <_ZN5Print7printlnEPKc>
      EEPROM.get(100, recordingInterval);
   b52fc:	f004 f9c6 	bl	b968c <_Z21__fetch_global_EEPROMv>
   b5300:	2204      	movs	r2, #4
   b5302:	4621      	mov	r1, r4
   b5304:	2064      	movs	r0, #100	; 0x64
   b5306:	f001 f833 	bl	b6370 <HAL_EEPROM_Get>
      txCharacteristic.setValue("\nCurrent value for data collection interval is [");
   b530a:	4942      	ldr	r1, [pc, #264]	; (b5414 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x648>)
   b530c:	482c      	ldr	r0, [pc, #176]	; (b53c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   b530e:	2200      	movs	r2, #0
   b5310:	f001 fed9 	bl	b70c6 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(recordingInterval != -1){
   b5314:	6821      	ldr	r1, [r4, #0]
   b5316:	1c48      	adds	r0, r1, #1
   b5318:	d00b      	beq.n	b5332 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x566>
        txCharacteristic.setValue(String(recordingInterval));
   b531a:	220a      	movs	r2, #10
   b531c:	a801      	add	r0, sp, #4
   b531e:	f003 f98a 	bl	b8636 <_ZN6StringC1Eih>
   b5322:	4827      	ldr	r0, [pc, #156]	; (b53c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   b5324:	2200      	movs	r2, #0
   b5326:	a901      	add	r1, sp, #4
   b5328:	f001 fec8 	bl	b70bc <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b532c:	a801      	add	r0, sp, #4
   b532e:	f003 f8f7 	bl	b8520 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between data collection as an integer in milliseconds (blank to skip): ");
   b5332:	4939      	ldr	r1, [pc, #228]	; (b5418 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64c>)
   b5334:	2200      	movs	r2, #0
   b5336:	e662      	b.n	b4ffe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x232>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5338:	4931      	ldr	r1, [pc, #196]	; (b5400 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x634>)
   b533a:	482d      	ldr	r0, [pc, #180]	; (b53f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x624>)
   b533c:	f003 fa05 	bl	b874a <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == ""){
   b5340:	b130      	cbz	r0, b5350 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x584>
        EEPROM.get(100, recordingInterval);
   b5342:	f004 f9a3 	bl	b968c <_Z21__fetch_global_EEPROMv>
   b5346:	4931      	ldr	r1, [pc, #196]	; (b540c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x640>)
   b5348:	2204      	movs	r2, #4
   b534a:	2064      	movs	r0, #100	; 0x64
   b534c:	f001 f810 	bl	b6370 <HAL_EEPROM_Get>
      EEPROM.put(100, recordingInterval);
   b5350:	f004 f99c 	bl	b968c <_Z21__fetch_global_EEPROMv>
   b5354:	4c31      	ldr	r4, [pc, #196]	; (b541c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x650>)
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b5356:	492d      	ldr	r1, [pc, #180]	; (b540c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x640>)
   b5358:	2204      	movs	r2, #4
   b535a:	2064      	movs	r0, #100	; 0x64
   b535c:	f001 f810 	bl	b6380 <HAL_EEPROM_Put>
      EEPROM.get(100, recordingInterval);
   b5360:	f004 f994 	bl	b968c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b5364:	4929      	ldr	r1, [pc, #164]	; (b540c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x640>)
   b5366:	2204      	movs	r2, #4
   b5368:	2064      	movs	r0, #100	; 0x64
   b536a:	f001 f801 	bl	b6370 <HAL_EEPROM_Get>
      EEPROM.get(200, reportingInterval);
   b536e:	f004 f98d 	bl	b968c <_Z21__fetch_global_EEPROMv>
   b5372:	2204      	movs	r2, #4
   b5374:	4621      	mov	r1, r4
   b5376:	20c8      	movs	r0, #200	; 0xc8
   b5378:	f000 fffa 	bl	b6370 <HAL_EEPROM_Get>
      txCharacteristic.setValue("\nCurrent value for WiFi connection interval is [");
   b537c:	2200      	movs	r2, #0
   b537e:	4928      	ldr	r1, [pc, #160]	; (b5420 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x654>)
   b5380:	480f      	ldr	r0, [pc, #60]	; (b53c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   b5382:	f001 fea0 	bl	b70c6 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(reportingInterval != -1){
   b5386:	6823      	ldr	r3, [r4, #0]
   b5388:	1c5a      	adds	r2, r3, #1
   b538a:	d00f      	beq.n	b53ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e0>
        txCharacteristic.setValue(String(reportingInterval / 1000));
   b538c:	220a      	movs	r2, #10
   b538e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5392:	a801      	add	r0, sp, #4
   b5394:	fb93 f1f1 	sdiv	r1, r3, r1
   b5398:	f003 f94d 	bl	b8636 <_ZN6StringC1Eih>
   b539c:	4808      	ldr	r0, [pc, #32]	; (b53c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   b539e:	2200      	movs	r2, #0
   b53a0:	a901      	add	r1, sp, #4
   b53a2:	f001 fe8b 	bl	b70bc <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b53a6:	a801      	add	r0, sp, #4
   b53a8:	f003 f8ba 	bl	b8520 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between WiFi connections as an integer in seconds (blank to skip): ");
   b53ac:	491d      	ldr	r1, [pc, #116]	; (b5424 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x658>)
   b53ae:	2200      	movs	r2, #0
   b53b0:	e625      	b.n	b4ffe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x232>
   b53b2:	bf00      	nop
   b53b4:	000ba47b 	.word	0x000ba47b
   b53b8:	2003e7c0 	.word	0x2003e7c0
   b53bc:	000ba3d1 	.word	0x000ba3d1
   b53c0:	2003e5fc 	.word	0x2003e5fc
   b53c4:	2003defc 	.word	0x2003defc
   b53c8:	2003dee4 	.word	0x2003dee4
   b53cc:	2003def8 	.word	0x2003def8
   b53d0:	000ba481 	.word	0x000ba481
   b53d4:	2003e010 	.word	0x2003e010
   b53d8:	2003e0e8 	.word	0x2003e0e8
   b53dc:	000ba49b 	.word	0x000ba49b
   b53e0:	000ba4b9 	.word	0x000ba4b9
   b53e4:	000ba4c5 	.word	0x000ba4c5
   b53e8:	000ba4c8 	.word	0x000ba4c8
   b53ec:	000ba4fc 	.word	0x000ba4fc
   b53f0:	2003da7c 	.word	0x2003da7c
   b53f4:	000ba501 	.word	0x000ba501
   b53f8:	000ba509 	.word	0x000ba509
   b53fc:	000ba513 	.word	0x000ba513
   b5400:	000ba4c7 	.word	0x000ba4c7
   b5404:	2003da94 	.word	0x2003da94
   b5408:	000ba533 	.word	0x000ba533
   b540c:	2003e040 	.word	0x2003e040
   b5410:	000ba540 	.word	0x000ba540
   b5414:	000ba547 	.word	0x000ba547
   b5418:	000ba578 	.word	0x000ba578
   b541c:	2003e044 	.word	0x2003e044
   b5420:	000ba5cd 	.word	0x000ba5cd
   b5424:	000ba5fe 	.word	0x000ba5fe
   b5428:	2003def4 	.word	0x2003def4
   b542c:	000ba3fa 	.word	0x000ba3fa
   b5430:	4945      	ldr	r1, [pc, #276]	; (b5548 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x77c>)
   b5432:	4846      	ldr	r0, [pc, #280]	; (b554c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x780>)
   b5434:	f003 f989 	bl	b874a <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == ""){
   b5438:	b130      	cbz	r0, b5448 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x67c>
        EEPROM.get(200, reportingInterval);
   b543a:	f004 f927 	bl	b968c <_Z21__fetch_global_EEPROMv>
   b543e:	4944      	ldr	r1, [pc, #272]	; (b5550 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x784>)
   b5440:	2204      	movs	r2, #4
   b5442:	20c8      	movs	r0, #200	; 0xc8
   b5444:	f000 ff94 	bl	b6370 <HAL_EEPROM_Get>
      EEPROM.put(200, reportingInterval);
   b5448:	f004 f920 	bl	b968c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b544c:	4940      	ldr	r1, [pc, #256]	; (b5550 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x784>)
   b544e:	2204      	movs	r2, #4
   b5450:	20c8      	movs	r0, #200	; 0xc8
   b5452:	f000 ff95 	bl	b6380 <HAL_EEPROM_Put>
      EEPROM.get(200, reportingInterval);
   b5456:	f004 f919 	bl	b968c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b545a:	493d      	ldr	r1, [pc, #244]	; (b5550 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x784>)
   b545c:	2204      	movs	r2, #4
   b545e:	20c8      	movs	r0, #200	; 0xc8
   b5460:	f000 ff86 	bl	b6370 <HAL_EEPROM_Get>
      WITH_LOCK(Serial) {
   b5464:	f003 feee 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5468:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b546a:	f7fe fe78 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(reportingInterval);
   b546e:	f003 fee9 	bl	b9244 <_Z16_fetch_usbserialv>
   b5472:	6839      	ldr	r1, [r7, #0]
   b5474:	220a      	movs	r2, #10
   b5476:	f7fe fe55 	bl	b4124 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
      WITH_LOCK(Serial) {
   b547a:	a801      	add	r0, sp, #4
   b547c:	f7fe ffa4 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      txCharacteristic.setValue("\nEnter 'ota' to wait for OTA update (blank to skip): ");
   b5480:	4934      	ldr	r1, [pc, #208]	; (b5554 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x788>)
   b5482:	2200      	movs	r2, #0
   b5484:	e5bb      	b.n	b4ffe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x232>
   b5486:	4934      	ldr	r1, [pc, #208]	; (b5558 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78c>)
   b5488:	4830      	ldr	r0, [pc, #192]	; (b554c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x780>)
   b548a:	4c34      	ldr	r4, [pc, #208]	; (b555c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x790>)
   b548c:	f003 f95d 	bl	b874a <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == "ota"){
   b5490:	b300      	cbz	r0, b54d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x708>
        uint8_t value = 0;
   b5492:	2200      	movs	r2, #0
        system_get_flag(flag, &value, nullptr);
   b5494:	a901      	add	r1, sp, #4
   b5496:	2001      	movs	r0, #1
        uint8_t value = 0;
   b5498:	f88d 2004 	strb.w	r2, [sp, #4]
        system_get_flag(flag, &value, nullptr);
   b549c:	f001 f978 	bl	b6790 <system_get_flag>
        waitingForOTA = true;
   b54a0:	2301      	movs	r3, #1
   b54a2:	7023      	strb	r3, [r4, #0]
        uint8_t value = 0;
   b54a4:	2400      	movs	r4, #0
        system_get_flag(flag, &value, nullptr);
   b54a6:	4622      	mov	r2, r4
   b54a8:	a901      	add	r1, sp, #4
   b54aa:	2001      	movs	r0, #1
        uint8_t value = 0;
   b54ac:	f88d 4004 	strb.w	r4, [sp, #4]
        system_get_flag(flag, &value, nullptr);
   b54b0:	f001 f96e 	bl	b6790 <system_get_flag>
        WiFi.on();
   b54b4:	482a      	ldr	r0, [pc, #168]	; (b5560 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x794>)
   b54b6:	f7fe fe83 	bl	b41c0 <_ZN5spark9WiFiClass2onEv>
        WiFi.connect();
   b54ba:	4621      	mov	r1, r4
   b54bc:	4828      	ldr	r0, [pc, #160]	; (b5560 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x794>)
        while(!WiFi.ready()) {
   b54be:	4c28      	ldr	r4, [pc, #160]	; (b5560 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x794>)
        WiFi.connect();
   b54c0:	f7fe fe8a 	bl	b41d8 <_ZN5spark9WiFiClass7connectEj>
        while(!WiFi.ready()) {
   b54c4:	4620      	mov	r0, r4
   b54c6:	f7fe fe8c 	bl	b41e2 <_ZN5spark9WiFiClass5readyEv>
   b54ca:	b948      	cbnz	r0, b54e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x714>
          delay(100);
   b54cc:	2064      	movs	r0, #100	; 0x64
   b54ce:	f001 fa8f 	bl	b69f0 <delay>
        while(!WiFi.ready()) {
   b54d2:	e7f7      	b.n	b54c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6f8>
      if(waitingForOTA) {
   b54d4:	7823      	ldrb	r3, [r4, #0]
   b54d6:	2b00      	cmp	r3, #0
   b54d8:	d1e4      	bne.n	b54a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6d8>
      System.reset();
   b54da:	f003 f9df 	bl	b889c <_ZN11SystemClass5resetEv>
   b54de:	e591      	b.n	b5004 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x238>
        if(WiFi.ready() != true) {
   b54e0:	481f      	ldr	r0, [pc, #124]	; (b5560 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x794>)
   b54e2:	f7fe fe7e 	bl	b41e2 <_ZN5spark9WiFiClass5readyEv>
   b54e6:	b968      	cbnz	r0, b5504 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x738>
          WITH_LOCK(Serial) {
   b54e8:	f003 feac 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b54ec:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b54ee:	f7fe fe36 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
            Serial.println("WiFi failed to connect, skipping time synchronization");
   b54f2:	f003 fea7 	bl	b9244 <_Z16_fetch_usbserialv>
   b54f6:	491b      	ldr	r1, [pc, #108]	; (b5564 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x798>)
   b54f8:	f002 ff0b 	bl	b8312 <_ZN5Print7printlnEPKc>
          WITH_LOCK(Serial) {
   b54fc:	a801      	add	r0, sp, #4
   b54fe:	f7fe ff63 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b5502:	e7ea      	b.n	b54da <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x70e>
          WITH_LOCK(Serial) {
   b5504:	f003 fe9e 	bl	b9244 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5508:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b550a:	f7fe fe28 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
            Serial.println("WiFi connected, awaiting update");
   b550e:	f003 fe99 	bl	b9244 <_Z16_fetch_usbserialv>
   b5512:	4915      	ldr	r1, [pc, #84]	; (b5568 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x79c>)
   b5514:	f002 fefd 	bl	b8312 <_ZN5Print7printlnEPKc>
          WITH_LOCK(Serial) {
   b5518:	a801      	add	r0, sp, #4
   b551a:	f7fe ff55 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
          txCharacteristic.setValue("\nAwaiting OTA update");
   b551e:	4913      	ldr	r1, [pc, #76]	; (b556c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7a0>)
   b5520:	4813      	ldr	r0, [pc, #76]	; (b5570 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7a4>)
   b5522:	2200      	movs	r2, #0
   b5524:	f001 fdcf 	bl	b70c6 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        spark_cloud_flag_connect();
   b5528:	f001 f972 	bl	b6810 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b552c:	f001 f978 	bl	b6820 <spark_cloud_flag_connected>
          while(!Particle.connected()) {
   b5530:	b130      	cbz	r0, b5540 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x774>
   b5532:	4c10      	ldr	r4, [pc, #64]	; (b5574 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7a8>)
		return HAL_Timer_Get_Milli_Seconds();
   b5534:	f000 ff0c 	bl	b6350 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b5538:	6020      	str	r0, [r4, #0]
    		spark_process();
   b553a:	f001 f961 	bl	b6800 <spark_process>
   b553e:	e7f9      	b.n	b5534 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x768>
            delay(100);
   b5540:	2064      	movs	r0, #100	; 0x64
   b5542:	f001 fa55 	bl	b69f0 <delay>
          while(!Particle.connected()) {
   b5546:	e7f1      	b.n	b552c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x760>
   b5548:	000ba4c7 	.word	0x000ba4c7
   b554c:	2003da7c 	.word	0x2003da7c
   b5550:	2003e044 	.word	0x2003e044
   b5554:	000ba64f 	.word	0x000ba64f
   b5558:	000ba685 	.word	0x000ba685
   b555c:	2003e614 	.word	0x2003e614
   b5560:	2003e7c0 	.word	0x2003e7c0
   b5564:	000ba2cc 	.word	0x000ba2cc
   b5568:	000ba689 	.word	0x000ba689
   b556c:	000ba6a9 	.word	0x000ba6a9
   b5570:	2003e5fc 	.word	0x2003e5fc
   b5574:	2003e7d0 	.word	0x2003e7d0

000b5578 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b5578:	b5f0      	push	{r4, r5, r6, r7, lr}
   b557a:	4616      	mov	r6, r2
   b557c:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b557e:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5580:	e9c0 2200 	strd	r2, r2, [r0]
   b5584:	4604      	mov	r4, r0
   b5586:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   b5588:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   b558a:	4619      	mov	r1, r3
   b558c:	a806      	add	r0, sp, #24
   b558e:	f001 fbd5 	bl	b6d3c <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   b5592:	9916      	ldr	r1, [sp, #88]	; 0x58
   b5594:	4638      	mov	r0, r7
   b5596:	f001 fbd1 	bl	b6d3c <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   b559a:	7833      	ldrb	r3, [r6, #0]
   b559c:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b55a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b55a2:	9302      	str	r3, [sp, #8]
   b55a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b55a6:	4620      	mov	r0, r4
   b55a8:	e9cd 7300 	strd	r7, r3, [sp]
   b55ac:	aa05      	add	r2, sp, #20
   b55ae:	ab06      	add	r3, sp, #24
   b55b0:	4629      	mov	r1, r5
   b55b2:	f002 f9d7 	bl	b7964 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b55b6:	4620      	mov	r0, r4
   b55b8:	b011      	add	sp, #68	; 0x44
   b55ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b55bc <_ZN15Adafruit_LIS3DHD0Ev>:
   b55bc:	b510      	push	{r4, lr}
   b55be:	212c      	movs	r1, #44	; 0x2c
   b55c0:	4604      	mov	r4, r0
   b55c2:	f004 f8bc 	bl	b973e <_ZdlPvj>
   b55c6:	4620      	mov	r0, r4
   b55c8:	bd10      	pop	{r4, pc}
	...

000b55cc <_GLOBAL__sub_I_SystemMode>:
}
   b55cc:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
   b55ce:	4d6e      	ldr	r5, [pc, #440]	; (b5788 <_GLOBAL__sub_I_SystemMode+0x1bc>)
    SleepResult() {}
   b55d0:	4b6e      	ldr	r3, [pc, #440]	; (b578c <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b55d2:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   b55d4:	2400      	movs	r4, #0
   b55d6:	b090      	sub	sp, #64	; 0x40
   b55d8:	e9c5 4400 	strd	r4, r4, [r5]
        set_system_mode(mode);
   b55dc:	2003      	movs	r0, #3
   b55de:	f001 f8af 	bl	b6740 <set_system_mode>
SYSTEM_MODE(MANUAL)
   b55e2:	4a6b      	ldr	r2, [pc, #428]	; (b5790 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b55e4:	496b      	ldr	r1, [pc, #428]	; (b5794 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   b55e6:	4628      	mov	r0, r5
   b55e8:	f004 f8a4 	bl	b9734 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED)
   b55ec:	4621      	mov	r1, r4
   b55ee:	2001      	movs	r0, #1
   b55f0:	f001 f8b6 	bl	b6760 <system_thread_set_state>
#pragma once

int recordingInterval; // interval between lis3dh reads
int reportingInterval; // interval between reporting data to server in seconds
int sleepPauseDuration; // time of inactivity before sleep
String payload = "";
   b55f4:	4968      	ldr	r1, [pc, #416]	; (b5798 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b55f6:	4869      	ldr	r0, [pc, #420]	; (b579c <_GLOBAL__sub_I_SystemMode+0x1d0>)
   b55f8:	4d69      	ldr	r5, [pc, #420]	; (b57a0 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b55fa:	f002 ffdc 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b55fe:	4a64      	ldr	r2, [pc, #400]	; (b5790 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5600:	4968      	ldr	r1, [pc, #416]	; (b57a4 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b5602:	4866      	ldr	r0, [pc, #408]	; (b579c <_GLOBAL__sub_I_SystemMode+0x1d0>)
   b5604:	f004 f896 	bl	b9734 <__aeabi_atexit>
bool valuesChanged = false;
String unixTime;
   b5608:	4963      	ldr	r1, [pc, #396]	; (b5798 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b560a:	4867      	ldr	r0, [pc, #412]	; (b57a8 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b560c:	f002 ffd3 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b5610:	4a5f      	ldr	r2, [pc, #380]	; (b5790 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5612:	4964      	ldr	r1, [pc, #400]	; (b57a4 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b5614:	4864      	ldr	r0, [pc, #400]	; (b57a8 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b5616:	f004 f88d 	bl	b9734 <__aeabi_atexit>
String ssid, password = "";
   b561a:	495f      	ldr	r1, [pc, #380]	; (b5798 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b561c:	4863      	ldr	r0, [pc, #396]	; (b57ac <_GLOBAL__sub_I_SystemMode+0x1e0>)
   b561e:	f002 ffca 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b5622:	4a5b      	ldr	r2, [pc, #364]	; (b5790 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5624:	495f      	ldr	r1, [pc, #380]	; (b57a4 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b5626:	4861      	ldr	r0, [pc, #388]	; (b57ac <_GLOBAL__sub_I_SystemMode+0x1e0>)
   b5628:	f004 f884 	bl	b9734 <__aeabi_atexit>
   b562c:	495a      	ldr	r1, [pc, #360]	; (b5798 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b562e:	4860      	ldr	r0, [pc, #384]	; (b57b0 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b5630:	f002 ffc1 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b5634:	4a56      	ldr	r2, [pc, #344]	; (b5790 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5636:	495b      	ldr	r1, [pc, #364]	; (b57a4 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b5638:	485d      	ldr	r0, [pc, #372]	; (b57b0 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b563a:	f004 f87b 	bl	b9734 <__aeabi_atexit>
float x, y, z;
uint8_t storedValues [256];
long storedTimes [256];
float prevX, prevY, prevZ;
int storedValuesIndex = 0;
String rolloverPayload = ""; 
   b563e:	4956      	ldr	r1, [pc, #344]	; (b5798 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b5640:	485c      	ldr	r0, [pc, #368]	; (b57b4 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   b5642:	f002 ffb8 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b5646:	4a52      	ldr	r2, [pc, #328]	; (b5790 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5648:	4956      	ldr	r1, [pc, #344]	; (b57a4 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b564a:	485a      	ldr	r0, [pc, #360]	; (b57b4 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   b564c:	f004 f872 	bl	b9734 <__aeabi_atexit>
  RECORDING,
  SENDING
};
uint8_t firmwareState = BLEWAIT;
bool bleWaitForConfig = false; //when true, firmware is waiting for user input over BLE b/c BLE was connected
String bleInputBuffer; // buffer for reading from BLE and writing to EEPROM
   b5650:	4951      	ldr	r1, [pc, #324]	; (b5798 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b5652:	4859      	ldr	r0, [pc, #356]	; (b57b8 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b5654:	f002 ffaf 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b5658:	4a4d      	ldr	r2, [pc, #308]	; (b5790 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b565a:	4952      	ldr	r1, [pc, #328]	; (b57a4 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b565c:	4856      	ldr	r0, [pc, #344]	; (b57b8 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b565e:	f004 f869 	bl	b9734 <__aeabi_atexit>
        : config_(config) {
   b5662:	4856      	ldr	r0, [pc, #344]	; (b57bc <_GLOBAL__sub_I_SystemMode+0x1f0>)
os_thread_t reportingThreadHandle;
os_mutex_t payloadAccessLock;
os_mutex_t recordingSleepProtectionLock; // these 2 mutexes are used to prevent the system from sleeping
os_mutex_t reportingSleepProtectionLock; // while recording/reporting are in the middle of an action (e.g. POSTing data or reading the accelerometer)
long sleepTimeoutCounter = 0; //counts consecutive data points that have been "0"
SystemSleepConfiguration sleepConfig;
   b5664:	4a4a      	ldr	r2, [pc, #296]	; (b5790 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5666:	4956      	ldr	r1, [pc, #344]	; (b57c0 <_GLOBAL__sub_I_SystemMode+0x1f4>)
              valid_(true) {
   b5668:	6104      	str	r4, [r0, #16]
        : config_(config) {
   b566a:	1d03      	adds	r3, r0, #4
   b566c:	6003      	str	r3, [r0, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b566e:	4b55      	ldr	r3, [pc, #340]	; (b57c4 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b5670:	6043      	str	r3, [r0, #4]
              valid_(true) {
   b5672:	2301      	movs	r3, #1
   b5674:	7503      	strb	r3, [r0, #20]
   b5676:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b567a:	f004 f85b 	bl	b9734 <__aeabi_atexit>

const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b567e:	4952      	ldr	r1, [pc, #328]	; (b57c8 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   b5680:	4852      	ldr	r0, [pc, #328]	; (b57cc <_GLOBAL__sub_I_SystemMode+0x200>)
   b5682:	f001 fc3f 	bl	b6f04 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b5686:	4952      	ldr	r1, [pc, #328]	; (b57d0 <_GLOBAL__sub_I_SystemMode+0x204>)
   b5688:	4852      	ldr	r0, [pc, #328]	; (b57d4 <_GLOBAL__sub_I_SystemMode+0x208>)
   b568a:	f001 fc3b 	bl	b6f04 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b568e:	4952      	ldr	r1, [pc, #328]	; (b57d8 <_GLOBAL__sub_I_SystemMode+0x20c>)
   b5690:	4852      	ldr	r0, [pc, #328]	; (b57dc <_GLOBAL__sub_I_SystemMode+0x210>)
   b5692:	f001 fc37 	bl	b6f04 <_ZN8particle7BleUuidC1EPKc>
HttpClient http;
   b5696:	4852      	ldr	r0, [pc, #328]	; (b57e0 <_GLOBAL__sub_I_SystemMode+0x214>)
   b5698:	f000 fb33 	bl	b5d02 <_ZN10HttpClientC1Ev>
   b569c:	4a3c      	ldr	r2, [pc, #240]	; (b5790 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b569e:	4951      	ldr	r1, [pc, #324]	; (b57e4 <_GLOBAL__sub_I_SystemMode+0x218>)
   b56a0:	484f      	ldr	r0, [pc, #316]	; (b57e0 <_GLOBAL__sub_I_SystemMode+0x214>)
   b56a2:	f004 f847 	bl	b9734 <__aeabi_atexit>
} http_request_t;
   b56a6:	493c      	ldr	r1, [pc, #240]	; (b5798 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b56a8:	484f      	ldr	r0, [pc, #316]	; (b57e8 <_GLOBAL__sub_I_SystemMode+0x21c>)
   b56aa:	f002 ff84 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b56ae:	484f      	ldr	r0, [pc, #316]	; (b57ec <_GLOBAL__sub_I_SystemMode+0x220>)
   b56b0:	f002 fce0 	bl	b8074 <_ZN9IPAddressC1Ev>
   b56b4:	4938      	ldr	r1, [pc, #224]	; (b5798 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b56b6:	484e      	ldr	r0, [pc, #312]	; (b57f0 <_GLOBAL__sub_I_SystemMode+0x224>)
   b56b8:	f002 ff7d 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b56bc:	4936      	ldr	r1, [pc, #216]	; (b5798 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b56be:	484d      	ldr	r0, [pc, #308]	; (b57f4 <_GLOBAL__sub_I_SystemMode+0x228>)
   b56c0:	f002 ff79 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
http_request_t request;
   b56c4:	4a32      	ldr	r2, [pc, #200]	; (b5790 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b56c6:	494c      	ldr	r1, [pc, #304]	; (b57f8 <_GLOBAL__sub_I_SystemMode+0x22c>)
   b56c8:	4847      	ldr	r0, [pc, #284]	; (b57e8 <_GLOBAL__sub_I_SystemMode+0x21c>)
   b56ca:	f004 f833 	bl	b9734 <__aeabi_atexit>
} http_response_t;
   b56ce:	4932      	ldr	r1, [pc, #200]	; (b5798 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b56d0:	484a      	ldr	r0, [pc, #296]	; (b57fc <_GLOBAL__sub_I_SystemMode+0x230>)
   b56d2:	f002 ff70 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
http_response_t response;
   b56d6:	4a2e      	ldr	r2, [pc, #184]	; (b5790 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b56d8:	4949      	ldr	r1, [pc, #292]	; (b5800 <_GLOBAL__sub_I_SystemMode+0x234>)
   b56da:	484a      	ldr	r0, [pc, #296]	; (b5804 <_GLOBAL__sub_I_SystemMode+0x238>)
   b56dc:	f004 f82a 	bl	b9734 <__aeabi_atexit>
   b56e0:	2405      	movs	r4, #5
#ifdef __cplusplus

   WiFiAccessPoint()
   {
       memset(this, 0, sizeof(*this));
       size = sizeof(*this);
   b56e2:	2638      	movs	r6, #56	; 0x38
       memset(this, 0, sizeof(*this));
   b56e4:	1d28      	adds	r0, r5, #4
   b56e6:	2234      	movs	r2, #52	; 0x34
   b56e8:	2100      	movs	r1, #0
   b56ea:	f004 fc0b 	bl	b9f04 <memset>
WiFiAccessPoint networks[5];
   b56ee:	3c01      	subs	r4, #1
       size = sizeof(*this);
   b56f0:	f845 6b38 	str.w	r6, [r5], #56
   b56f4:	d1f6      	bne.n	b56e4 <_GLOBAL__sub_I_SystemMode+0x118>
String networkBuffer;
   b56f6:	4928      	ldr	r1, [pc, #160]	; (b5798 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b56f8:	4843      	ldr	r0, [pc, #268]	; (b5808 <_GLOBAL__sub_I_SystemMode+0x23c>)
   b56fa:	f002 ff5c 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b56fe:	4a24      	ldr	r2, [pc, #144]	; (b5790 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5700:	4928      	ldr	r1, [pc, #160]	; (b57a4 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b5702:	4841      	ldr	r0, [pc, #260]	; (b5808 <_GLOBAL__sub_I_SystemMode+0x23c>)
   b5704:	f004 f816 	bl	b9734 <__aeabi_atexit>
Adafruit_LIS3DH lis3dh = Adafruit_LIS3DH();
   b5708:	4840      	ldr	r0, [pc, #256]	; (b580c <_GLOBAL__sub_I_SystemMode+0x240>)
   b570a:	f000 f8a7 	bl	b585c <_ZN15Adafruit_LIS3DHC1Ev>
   b570e:	4a20      	ldr	r2, [pc, #128]	; (b5790 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5710:	493f      	ldr	r1, [pc, #252]	; (b5810 <_GLOBAL__sub_I_SystemMode+0x244>)
   b5712:	483e      	ldr	r0, [pc, #248]	; (b580c <_GLOBAL__sub_I_SystemMode+0x240>)
   b5714:	f004 f80e 	bl	b9734 <__aeabi_atexit>
    value_ = static_cast<ValueType>(value);
   b5718:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b571a:	4930      	ldr	r1, [pc, #192]	; (b57dc <_GLOBAL__sub_I_SystemMode+0x210>)
   b571c:	f88d 3014 	strb.w	r3, [sp, #20]
   b5720:	a806      	add	r0, sp, #24
   b5722:	f001 fb0b 	bl	b6d3c <_ZN8particle7BleUuidC1ERKS0_>
   b5726:	4929      	ldr	r1, [pc, #164]	; (b57cc <_GLOBAL__sub_I_SystemMode+0x200>)
   b5728:	a80b      	add	r0, sp, #44	; 0x2c
   b572a:	f001 fb07 	bl	b6d3c <_ZN8particle7BleUuidC1ERKS0_>
   b572e:	ab0b      	add	r3, sp, #44	; 0x2c
   b5730:	9300      	str	r3, [sp, #0]
   b5732:	aa05      	add	r2, sp, #20
   b5734:	ab06      	add	r3, sp, #24
   b5736:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b573a:	4936      	ldr	r1, [pc, #216]	; (b5814 <_GLOBAL__sub_I_SystemMode+0x248>)
   b573c:	4836      	ldr	r0, [pc, #216]	; (b5818 <_GLOBAL__sub_I_SystemMode+0x24c>)
   b573e:	f7ff ff1b 	bl	b5578 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b5742:	4a13      	ldr	r2, [pc, #76]	; (b5790 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5744:	4935      	ldr	r1, [pc, #212]	; (b581c <_GLOBAL__sub_I_SystemMode+0x250>)
   b5746:	4834      	ldr	r0, [pc, #208]	; (b5818 <_GLOBAL__sub_I_SystemMode+0x24c>)
   b5748:	f003 fff4 	bl	b9734 <__aeabi_atexit>
   b574c:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b574e:	4921      	ldr	r1, [pc, #132]	; (b57d4 <_GLOBAL__sub_I_SystemMode+0x208>)
   b5750:	f88d 3014 	strb.w	r3, [sp, #20]
   b5754:	a806      	add	r0, sp, #24
   b5756:	f001 faf1 	bl	b6d3c <_ZN8particle7BleUuidC1ERKS0_>
   b575a:	491c      	ldr	r1, [pc, #112]	; (b57cc <_GLOBAL__sub_I_SystemMode+0x200>)
   b575c:	a80b      	add	r0, sp, #44	; 0x2c
   b575e:	f001 faed 	bl	b6d3c <_ZN8particle7BleUuidC1ERKS0_>
   b5762:	4b2f      	ldr	r3, [pc, #188]	; (b5820 <_GLOBAL__sub_I_SystemMode+0x254>)
   b5764:	9301      	str	r3, [sp, #4]
   b5766:	ab0b      	add	r3, sp, #44	; 0x2c
   b5768:	9300      	str	r3, [sp, #0]
   b576a:	aa05      	add	r2, sp, #20
   b576c:	492d      	ldr	r1, [pc, #180]	; (b5824 <_GLOBAL__sub_I_SystemMode+0x258>)
   b576e:	9402      	str	r4, [sp, #8]
   b5770:	ab06      	add	r3, sp, #24
   b5772:	482d      	ldr	r0, [pc, #180]	; (b5828 <_GLOBAL__sub_I_SystemMode+0x25c>)
   b5774:	f7ff ff00 	bl	b5578 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b5778:	4a05      	ldr	r2, [pc, #20]	; (b5790 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b577a:	4928      	ldr	r1, [pc, #160]	; (b581c <_GLOBAL__sub_I_SystemMode+0x250>)
   b577c:	482a      	ldr	r0, [pc, #168]	; (b5828 <_GLOBAL__sub_I_SystemMode+0x25c>)
}
   b577e:	b010      	add	sp, #64	; 0x40
   b5780:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5784:	f003 bfd6 	b.w	b9734 <__aeabi_atexit>
   b5788:	2003da34 	.word	0x2003da34
   b578c:	ffff0000 	.word	0xffff0000
   b5790:	2003da30 	.word	0x2003da30
   b5794:	000b40df 	.word	0x000b40df
   b5798:	000ba4c7 	.word	0x000ba4c7
   b579c:	2003e020 	.word	0x2003e020
   b57a0:	2003def8 	.word	0x2003def8
   b57a4:	000b8521 	.word	0x000b8521
   b57a8:	2003e604 	.word	0x2003e604
   b57ac:	2003e0e8 	.word	0x2003e0e8
   b57b0:	2003e010 	.word	0x2003e010
   b57b4:	2003e0b0 	.word	0x2003e0b0
   b57b8:	2003da7c 	.word	0x2003da7c
   b57bc:	2003e0c8 	.word	0x2003e0c8
   b57c0:	000b40ef 	.word	0x000b40ef
   b57c4:	00030010 	.word	0x00030010
   b57c8:	000ba6be 	.word	0x000ba6be
   b57cc:	2003da40 	.word	0x2003da40
   b57d0:	000ba6e3 	.word	0x000ba6e3
   b57d4:	2003da54 	.word	0x2003da54
   b57d8:	000ba708 	.word	0x000ba708
   b57dc:	2003da68 	.word	0x2003da68
   b57e0:	2003da9c 	.word	0x2003da9c
   b57e4:	000b4171 	.word	0x000b4171
   b57e8:	2003e050 	.word	0x2003e050
   b57ec:	2003e060 	.word	0x2003e060
   b57f0:	2003e078 	.word	0x2003e078
   b57f4:	2003e08c 	.word	0x2003e08c
   b57f8:	000b40c3 	.word	0x000b40c3
   b57fc:	2003e0a0 	.word	0x2003e0a0
   b5800:	000b40b5 	.word	0x000b40b5
   b5804:	2003e09c 	.word	0x2003e09c
   b5808:	2003dee4 	.word	0x2003dee4
   b580c:	2003deb8 	.word	0x2003deb8
   b5810:	000b40b3 	.word	0x000b40b3
   b5814:	000ba72d 	.word	0x000ba72d
   b5818:	2003e5fc 	.word	0x2003e5fc
   b581c:	000b7433 	.word	0x000b7433
   b5820:	000b4dcd 	.word	0x000b4dcd
   b5824:	000ba730 	.word	0x000ba730
   b5828:	2003e0c0 	.word	0x2003e0c0

000b582c <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b582c:	4770      	bx	lr
	...

000b5830 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   b5830:	b538      	push	{r3, r4, r5, lr}
   b5832:	460c      	mov	r4, r1
   b5834:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b5836:	2220      	movs	r2, #32
   b5838:	2100      	movs	r1, #0
   b583a:	f104 0008 	add.w	r0, r4, #8
   b583e:	f004 fb61 	bl	b9f04 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   b5842:	220b      	movs	r2, #11
   b5844:	4904      	ldr	r1, [pc, #16]	; (b5858 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x28>)
   b5846:	4620      	mov	r0, r4
   b5848:	f004 fbac 	bl	b9fa4 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
   b584c:	2301      	movs	r3, #1
   b584e:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id   = _sensorID;
   b5850:	69aa      	ldr	r2, [r5, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   b5852:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sensor->min_delay   = 0;
  sensor->max_value   = 0;
  sensor->min_value   = 0;
  sensor->resolution  = 0;
}
   b5856:	bd38      	pop	{r3, r4, r5, pc}
   b5858:	000ba261 	.word	0x000ba261

000b585c <_ZN15Adafruit_LIS3DHC1Ev>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   b585c:	4a06      	ldr	r2, [pc, #24]	; (b5878 <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   b585e:	6002      	str	r2, [r0, #0]
   b5860:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5864:	6182      	str	r2, [r0, #24]
   b5866:	7742      	strb	r2, [r0, #29]
   b5868:	83c2      	strh	r2, [r0, #30]
   b586a:	22ff      	movs	r2, #255	; 0xff
   b586c:	f880 2020 	strb.w	r2, [r0, #32]
   b5870:	2208      	movs	r2, #8
   b5872:	6242      	str	r2, [r0, #36]	; 0x24
}
   b5874:	4770      	bx	lr
   b5876:	bf00      	nop
   b5878:	000ba760 	.word	0x000ba760

000b587c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b587c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b587e:	4c0b      	ldr	r4, [pc, #44]	; (b58ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5880:	7821      	ldrb	r1, [r4, #0]
   b5882:	f3bf 8f5b 	dmb	ish
   b5886:	f011 0101 	ands.w	r1, r1, #1
   b588a:	d10b      	bne.n	b58a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b588c:	4620      	mov	r0, r4
   b588e:	9101      	str	r1, [sp, #4]
   b5890:	f7fe fc07 	bl	b40a2 <__cxa_guard_acquire>
   b5894:	9901      	ldr	r1, [sp, #4]
   b5896:	b128      	cbz	r0, b58a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5898:	4805      	ldr	r0, [pc, #20]	; (b58b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b589a:	f002 fdad 	bl	b83f8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b589e:	4620      	mov	r0, r4
   b58a0:	f7fe fc04 	bl	b40ac <__cxa_guard_release>
        return instance;
    }
   b58a4:	4802      	ldr	r0, [pc, #8]	; (b58b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b58a6:	b002      	add	sp, #8
   b58a8:	bd10      	pop	{r4, pc}
   b58aa:	bf00      	nop
   b58ac:	2003e624 	.word	0x2003e624
   b58b0:	2003e628 	.word	0x2003e628

000b58b4 <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   b58b4:	b508      	push	{r3, lr}
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   b58b6:	f7ff ffe1 	bl	b587c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b58ba:	2101      	movs	r1, #1
   b58bc:	f002 fdba 	bl	b8434 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b58c0:	f7ff ffdc 	bl	b587c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b58c4:	4905      	ldr	r1, [pc, #20]	; (b58dc <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   b58c6:	2201      	movs	r2, #1
   b58c8:	f002 fdf2 	bl	b84b0 <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
   b58cc:	f7ff ffd6 	bl	b587c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   b58d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b58d4:	2100      	movs	r1, #0
   b58d6:	f002 bdc1 	b.w	b845c <_ZN8SPIClass11setDataModeEh>
   b58da:	bf00      	nop
   b58dc:	0007a120 	.word	0x0007a120

000b58e0 <_ZN15Adafruit_LIS3DH7spixferEh>:
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   b58e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_sck == -1)
   b58e4:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b58e8:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   b58ea:	4605      	mov	r5, r0
   b58ec:	460f      	mov	r7, r1
  if (_sck == -1)
   b58ee:	d106      	bne.n	b58fe <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b58f0:	f7ff ffc4 	bl	b587c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b58f4:	4639      	mov	r1, r7
}
   b58f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b58fa:	f002 be0b 	b.w	b8514 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   b58fe:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   b5900:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   b5902:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   b5906:	f995 0020 	ldrsb.w	r0, [r5, #32]
   b590a:	2100      	movs	r1, #0
   b590c:	b280      	uxth	r0, r0
   b590e:	f003 fe90 	bl	b9632 <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   b5912:	f995 001e 	ldrsb.w	r0, [r5, #30]
   b5916:	fa08 f106 	lsl.w	r1, r8, r6
   b591a:	4039      	ands	r1, r7
   b591c:	b280      	uxth	r0, r0
   b591e:	f003 fe88 	bl	b9632 <digitalWrite>
    digitalWrite(_sck, HIGH);
   b5922:	f995 0020 	ldrsb.w	r0, [r5, #32]
   b5926:	2101      	movs	r1, #1
   b5928:	b280      	uxth	r0, r0
   b592a:	f003 fe82 	bl	b9632 <digitalWrite>
    if (digitalRead(_miso))
   b592e:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
   b5932:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   b5934:	b280      	uxth	r0, r0
    reply <<= 1;
   b5936:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   b5938:	f003 fe94 	bl	b9664 <digitalRead>
   b593c:	b108      	cbz	r0, b5942 <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   b593e:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   b5942:	3e01      	subs	r6, #1
   b5944:	d2df      	bcs.n	b5906 <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
   b5946:	4620      	mov	r0, r4
   b5948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b594c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   b594c:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   b594e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5952:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   b5954:	4604      	mov	r4, r0
   b5956:	460e      	mov	r6, r1
   b5958:	4615      	mov	r5, r2
  if (_cs == -1) {
   b595a:	d116      	bne.n	b598a <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   b595c:	f003 fec2 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b5960:	7f21      	ldrb	r1, [r4, #28]
   b5962:	f002 fb3f 	bl	b7fe4 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   b5966:	f003 febd 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b596a:	6803      	ldr	r3, [r0, #0]
   b596c:	4631      	mov	r1, r6
   b596e:	689b      	ldr	r3, [r3, #8]
   b5970:	4798      	blx	r3
    Wire.write((uint8_t)value);
   b5972:	f003 feb7 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b5976:	6803      	ldr	r3, [r0, #0]
   b5978:	4629      	mov	r1, r5
   b597a:	689b      	ldr	r3, [r3, #8]
   b597c:	4798      	blx	r3
    Wire.endTransmission();
   b597e:	f003 feb1 	bl	b96e4 <_Z19__fetch_global_Wirev>
}
   b5982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   b5986:	f002 bb38 	b.w	b7ffa <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
   b598a:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b598e:	3301      	adds	r3, #1
   b5990:	d101      	bne.n	b5996 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   b5992:	f7ff ff8f 	bl	b58b4 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   b5996:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b599a:	2100      	movs	r1, #0
   b599c:	b280      	uxth	r0, r0
   b599e:	f003 fe48 	bl	b9632 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   b59a2:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b59a6:	4620      	mov	r0, r4
   b59a8:	f7ff ff9a 	bl	b58e0 <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   b59ac:	4629      	mov	r1, r5
   b59ae:	4620      	mov	r0, r4
   b59b0:	f7ff ff96 	bl	b58e0 <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   b59b4:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b59b8:	2101      	movs	r1, #1
}
   b59ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   b59be:	b280      	uxth	r0, r0
   b59c0:	f003 be37 	b.w	b9632 <digitalWrite>

000b59c4 <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   b59c4:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   b59c6:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b59ca:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   b59cc:	4604      	mov	r4, r0
   b59ce:	460d      	mov	r5, r1
  if (_cs == -1) {
   b59d0:	d11d      	bne.n	b5a0e <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   b59d2:	f003 fe87 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b59d6:	f994 101c 	ldrsb.w	r1, [r4, #28]
   b59da:	f002 fb07 	bl	b7fec <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   b59de:	f003 fe81 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b59e2:	6803      	ldr	r3, [r0, #0]
   b59e4:	4629      	mov	r1, r5
   b59e6:	689b      	ldr	r3, [r3, #8]
   b59e8:	4798      	blx	r3
    Wire.endTransmission();
   b59ea:	f003 fe7b 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b59ee:	f002 fb04 	bl	b7ffa <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
   b59f2:	f003 fe77 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b59f6:	7f21      	ldrb	r1, [r4, #28]
   b59f8:	2201      	movs	r2, #1
   b59fa:	f002 faf0 	bl	b7fde <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   b59fe:	f003 fe71 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b5a02:	6803      	ldr	r3, [r0, #0]
   b5a04:	695b      	ldr	r3, [r3, #20]
   b5a06:	4798      	blx	r3
   b5a08:	b2c5      	uxtb	r5, r0
}
   b5a0a:	4628      	mov	r0, r5
   b5a0c:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
   b5a0e:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b5a12:	3301      	adds	r3, #1
   b5a14:	d101      	bne.n	b5a1a <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   b5a16:	f7ff ff4d 	bl	b58b4 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
   b5a1a:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5a1e:	2100      	movs	r1, #0
   b5a20:	b280      	uxth	r0, r0
   b5a22:	f003 fe06 	bl	b9632 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   b5a26:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b5a2a:	4620      	mov	r0, r4
   b5a2c:	f7ff ff58 	bl	b58e0 <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   b5a30:	2100      	movs	r1, #0
   b5a32:	4620      	mov	r0, r4
   b5a34:	f7ff ff54 	bl	b58e0 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5a38:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   b5a3a:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5a3e:	2101      	movs	r1, #1
   b5a40:	b280      	uxth	r0, r0
   b5a42:	f003 fdf6 	bl	b9632 <digitalWrite>
    if (_sck == -1)
   b5a46:	e7e0      	b.n	b5a0a <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

000b5a48 <_ZN15Adafruit_LIS3DH8getRangeEv>:
{
   b5a48:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   b5a4a:	2123      	movs	r1, #35	; 0x23
   b5a4c:	f7ff ffba 	bl	b59c4 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   b5a50:	f3c0 1001 	ubfx	r0, r0, #4, #2
   b5a54:	bd08      	pop	{r3, pc}

000b5a56 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
   b5a56:	b538      	push	{r3, r4, r5, lr}
   b5a58:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   b5a5a:	2120      	movs	r1, #32
{
   b5a5c:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   b5a5e:	f7ff ffb1 	bl	b59c4 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
   b5a62:	f000 030f 	and.w	r3, r0, #15
  ctl1 |= (dataRate << 4);
   b5a66:	ea43 1205 	orr.w	r2, r3, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   b5a6a:	4620      	mov	r0, r4
   b5a6c:	b2d2      	uxtb	r2, r2
}
   b5a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   b5a72:	2120      	movs	r1, #32
   b5a74:	f7ff bf6a 	b.w	b594c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000b5a78 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
   b5a78:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   b5a7a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5a7e:	3301      	adds	r3, #1
void Adafruit_LIS3DH::read(void) {
   b5a80:	4604      	mov	r4, r0
  if (_cs == -1) {
   b5a82:	d177      	bne.n	b5b74 <_ZN15Adafruit_LIS3DH4readEv+0xfc>
    Wire.beginTransmission(_i2caddr);
   b5a84:	f003 fe2e 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b5a88:	f994 101c 	ldrsb.w	r1, [r4, #28]
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   b5a8c:	4d5d      	ldr	r5, [pc, #372]	; (b5c04 <_ZN15Adafruit_LIS3DH4readEv+0x18c>)
    Wire.beginTransmission(_i2caddr);
   b5a8e:	f002 faad 	bl	b7fec <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   b5a92:	f003 fe27 	bl	b96e4 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5a96:	6803      	ldr	r3, [r0, #0]
   b5a98:	21a8      	movs	r1, #168	; 0xa8
   b5a9a:	689b      	ldr	r3, [r3, #8]
   b5a9c:	4798      	blx	r3
    Wire.endTransmission();
   b5a9e:	f003 fe21 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b5aa2:	f002 faaa 	bl	b7ffa <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
   b5aa6:	f003 fe1d 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b5aaa:	7f21      	ldrb	r1, [r4, #28]
   b5aac:	2206      	movs	r2, #6
   b5aae:	f002 fa96 	bl	b7fde <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   b5ab2:	f003 fe17 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b5ab6:	6803      	ldr	r3, [r0, #0]
   b5ab8:	695b      	ldr	r3, [r3, #20]
   b5aba:	4798      	blx	r3
   b5abc:	80e0      	strh	r0, [r4, #6]
   b5abe:	f003 fe11 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b5ac2:	6803      	ldr	r3, [r0, #0]
   b5ac4:	695b      	ldr	r3, [r3, #20]
   b5ac6:	4798      	blx	r3
   b5ac8:	88e3      	ldrh	r3, [r4, #6]
   b5aca:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b5ace:	4318      	orrs	r0, r3
   b5ad0:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   b5ad2:	f003 fe07 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b5ad6:	6803      	ldr	r3, [r0, #0]
   b5ad8:	695b      	ldr	r3, [r3, #20]
   b5ada:	4798      	blx	r3
   b5adc:	8120      	strh	r0, [r4, #8]
   b5ade:	f003 fe01 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b5ae2:	6803      	ldr	r3, [r0, #0]
   b5ae4:	695b      	ldr	r3, [r3, #20]
   b5ae6:	4798      	blx	r3
   b5ae8:	8923      	ldrh	r3, [r4, #8]
   b5aea:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b5aee:	4318      	orrs	r0, r3
   b5af0:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   b5af2:	f003 fdf7 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b5af6:	6803      	ldr	r3, [r0, #0]
   b5af8:	695b      	ldr	r3, [r3, #20]
   b5afa:	4798      	blx	r3
   b5afc:	8160      	strh	r0, [r4, #10]
   b5afe:	f003 fdf1 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b5b02:	6803      	ldr	r3, [r0, #0]
   b5b04:	695b      	ldr	r3, [r3, #20]
   b5b06:	4798      	blx	r3
   b5b08:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b5b0c:	8965      	ldrh	r5, [r4, #10]
   b5b0e:	4328      	orrs	r0, r5
   b5b10:	8160      	strh	r0, [r4, #10]
  uint8_t range = getRange();
   b5b12:	4620      	mov	r0, r4
   b5b14:	f7ff ff98 	bl	b5a48 <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   b5b18:	2803      	cmp	r0, #3
   b5b1a:	d069      	beq.n	b5bf0 <_ZN15Adafruit_LIS3DH4readEv+0x178>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   b5b1c:	2802      	cmp	r0, #2
   b5b1e:	d06a      	beq.n	b5bf6 <_ZN15Adafruit_LIS3DH4readEv+0x17e>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   b5b20:	2801      	cmp	r0, #1
   b5b22:	d06b      	beq.n	b5bfc <_ZN15Adafruit_LIS3DH4readEv+0x184>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   b5b24:	2800      	cmp	r0, #0
   b5b26:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   b5b2a:	bf18      	it	ne
   b5b2c:	2301      	movne	r3, #1
  x_g = (float)x / divider;
   b5b2e:	ee07 3a90 	vmov	s15, r3
   b5b32:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   b5b36:	ee07 3a10 	vmov	s14, r3
   b5b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5b3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   b5b42:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  x_g = (float)x / divider;
   b5b46:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   b5b4a:	ee07 3a10 	vmov	s14, r3
   b5b4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_g = (float)x / divider;
   b5b52:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   b5b56:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   b5b5a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5b5e:	ee07 3a10 	vmov	s14, r3
   b5b62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   b5b66:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   b5b6a:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b5b6e:	edc4 6a05 	vstr	s13, [r4, #20]
}
   b5b72:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
   b5b74:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b5b78:	3301      	adds	r3, #1
   b5b7a:	d101      	bne.n	b5b80 <_ZN15Adafruit_LIS3DH4readEv+0x108>
      beginTransaction();
   b5b7c:	f7ff fe9a 	bl	b58b4 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   b5b80:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5b84:	2100      	movs	r1, #0
   b5b86:	b280      	uxth	r0, r0
   b5b88:	f003 fd53 	bl	b9632 <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   b5b8c:	21e8      	movs	r1, #232	; 0xe8
   b5b8e:	4620      	mov	r0, r4
   b5b90:	f7ff fea6 	bl	b58e0 <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   b5b94:	21ff      	movs	r1, #255	; 0xff
   b5b96:	4620      	mov	r0, r4
   b5b98:	f7ff fea2 	bl	b58e0 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5b9c:	21ff      	movs	r1, #255	; 0xff
   b5b9e:	80e0      	strh	r0, [r4, #6]
   b5ba0:	4620      	mov	r0, r4
   b5ba2:	f7ff fe9d 	bl	b58e0 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5ba6:	88e3      	ldrh	r3, [r4, #6]
   b5ba8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b5bac:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   b5bae:	21ff      	movs	r1, #255	; 0xff
   b5bb0:	4620      	mov	r0, r4
   b5bb2:	f7ff fe95 	bl	b58e0 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5bb6:	21ff      	movs	r1, #255	; 0xff
   b5bb8:	8120      	strh	r0, [r4, #8]
   b5bba:	4620      	mov	r0, r4
   b5bbc:	f7ff fe90 	bl	b58e0 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5bc0:	8923      	ldrh	r3, [r4, #8]
   b5bc2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b5bc6:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   b5bc8:	21ff      	movs	r1, #255	; 0xff
   b5bca:	4620      	mov	r0, r4
   b5bcc:	f7ff fe88 	bl	b58e0 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5bd0:	21ff      	movs	r1, #255	; 0xff
   b5bd2:	8160      	strh	r0, [r4, #10]
   b5bd4:	4620      	mov	r0, r4
   b5bd6:	f7ff fe83 	bl	b58e0 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5bda:	8963      	ldrh	r3, [r4, #10]
   b5bdc:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b5be0:	8160      	strh	r0, [r4, #10]
    digitalWrite(_cs, HIGH);
   b5be2:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5be6:	2101      	movs	r1, #1
   b5be8:	b280      	uxth	r0, r0
   b5bea:	f003 fd22 	bl	b9632 <digitalWrite>
    if (_sck == -1)
   b5bee:	e790      	b.n	b5b12 <_ZN15Adafruit_LIS3DH4readEv+0x9a>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   b5bf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   b5bf4:	e79b      	b.n	b5b2e <_ZN15Adafruit_LIS3DH4readEv+0xb6>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   b5bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   b5bfa:	e798      	b.n	b5b2e <_ZN15Adafruit_LIS3DH4readEv+0xb6>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   b5bfc:	f641 73fe 	movw	r3, #8190	; 0x1ffe
   b5c00:	e795      	b.n	b5b2e <_ZN15Adafruit_LIS3DH4readEv+0xb6>
   b5c02:	bf00      	nop
   b5c04:	00ffff00 	.word	0x00ffff00

000b5c08 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   b5c08:	b570      	push	{r4, r5, r6, lr}
   b5c0a:	460c      	mov	r4, r1
   b5c0c:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b5c0e:	2220      	movs	r2, #32
   b5c10:	2100      	movs	r1, #0
   b5c12:	1d20      	adds	r0, r4, #4
   b5c14:	f004 f976 	bl	b9f04 <memset>
  event->version   = sizeof(sensors_event_t);
   b5c18:	2324      	movs	r3, #36	; 0x24
   b5c1a:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b5c1c:	69ab      	ldr	r3, [r5, #24]
   b5c1e:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   b5c20:	2601      	movs	r6, #1
  read();
   b5c22:	4628      	mov	r0, r5
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   b5c24:	60a6      	str	r6, [r4, #8]
  read();
   b5c26:	f7ff ff27 	bl	b5a78 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
   b5c2a:	68eb      	ldr	r3, [r5, #12]
   b5c2c:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   b5c2e:	692b      	ldr	r3, [r5, #16]
   b5c30:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   b5c32:	696b      	ldr	r3, [r5, #20]
   b5c34:	61e3      	str	r3, [r4, #28]
}
   b5c36:	4630      	mov	r0, r6
   b5c38:	bd70      	pop	{r4, r5, r6, pc}

000b5c3a <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   b5c3a:	b510      	push	{r4, lr}
   b5c3c:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   b5c3e:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
   b5c40:	f990 001d 	ldrsb.w	r0, [r0, #29]
   b5c44:	1c42      	adds	r2, r0, #1
   b5c46:	d123      	bne.n	b5c90 <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
   b5c48:	f003 fd4c 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b5c4c:	f002 f998 	bl	b7f80 <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   b5c50:	210f      	movs	r1, #15
   b5c52:	4620      	mov	r0, r4
   b5c54:	f7ff feb6 	bl	b59c4 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   b5c58:	2833      	cmp	r0, #51	; 0x33
   b5c5a:	d13d      	bne.n	b5cd8 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   b5c5c:	2207      	movs	r2, #7
   b5c5e:	2120      	movs	r1, #32
   b5c60:	4620      	mov	r0, r4
   b5c62:	f7ff fe73 	bl	b594c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
   b5c66:	2107      	movs	r1, #7
   b5c68:	4620      	mov	r0, r4
   b5c6a:	f7ff fef4 	bl	b5a56 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   b5c6e:	2288      	movs	r2, #136	; 0x88
   b5c70:	2123      	movs	r1, #35	; 0x23
   b5c72:	4620      	mov	r0, r4
   b5c74:	f7ff fe6a 	bl	b594c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   b5c78:	2210      	movs	r2, #16
   b5c7a:	2122      	movs	r1, #34	; 0x22
   b5c7c:	4620      	mov	r0, r4
   b5c7e:	f7ff fe65 	bl	b594c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   b5c82:	4620      	mov	r0, r4
   b5c84:	2280      	movs	r2, #128	; 0x80
   b5c86:	211f      	movs	r1, #31
   b5c88:	f7ff fe60 	bl	b594c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
   b5c8c:	2001      	movs	r0, #1
}
   b5c8e:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   b5c90:	2101      	movs	r1, #1
   b5c92:	b280      	uxth	r0, r0
   b5c94:	f003 fccd 	bl	b9632 <digitalWrite>
    pinMode(_cs, OUTPUT);
   b5c98:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5c9c:	2101      	movs	r1, #1
   b5c9e:	b280      	uxth	r0, r0
   b5ca0:	f003 fcb6 	bl	b9610 <pinMode>
    if (_sck == -1) {
   b5ca4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5ca8:	1c43      	adds	r3, r0, #1
   b5caa:	d104      	bne.n	b5cb6 <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
   b5cac:	f7ff fde6 	bl	b587c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5cb0:	f002 fbac 	bl	b840c <_ZN8SPIClass5beginEv>
    }
   b5cb4:	e7cc      	b.n	b5c50 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
   b5cb6:	2101      	movs	r1, #1
   b5cb8:	b280      	uxth	r0, r0
   b5cba:	f003 fca9 	bl	b9610 <pinMode>
      pinMode(_mosi, OUTPUT);
   b5cbe:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b5cc2:	2101      	movs	r1, #1
   b5cc4:	b280      	uxth	r0, r0
   b5cc6:	f003 fca3 	bl	b9610 <pinMode>
      pinMode(_miso, INPUT);
   b5cca:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5cce:	2100      	movs	r1, #0
   b5cd0:	b280      	uxth	r0, r0
   b5cd2:	f003 fc9d 	bl	b9610 <pinMode>
   b5cd6:	e7bb      	b.n	b5c50 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
   b5cd8:	2000      	movs	r0, #0
   b5cda:	e7d8      	b.n	b5c8e <_ZN15Adafruit_LIS3DH5beginEh+0x54>

000b5cdc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
size_t Print::print(T n, int base)
   b5cdc:	b570      	push	{r4, r5, r6, lr}
        if (n < 0 && base == 10) {
   b5cde:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b5ce0:	4606      	mov	r6, r0
   b5ce2:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b5ce4:	da0b      	bge.n	b5cfe <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b5ce6:	2a0a      	cmp	r2, #10
   b5ce8:	d109      	bne.n	b5cfe <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b5cea:	212d      	movs	r1, #45	; 0x2d
   b5cec:	f002 fafc 	bl	b82e8 <_ZN5Print5printEc>
            val = -n;
   b5cf0:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b5cf2:	b2ea      	uxtb	r2, r5
   b5cf4:	4630      	mov	r0, r6
    }
}
   b5cf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b5cfa:	f002 bb14 	b.w	b8326 <_ZN5Print11printNumberEmh>
            val = n;
   b5cfe:	4621      	mov	r1, r4
   b5d00:	e7f7      	b.n	b5cf2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b5d02 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b5d02:	b510      	push	{r4, lr}
   b5d04:	4604      	mov	r4, r0
   b5d06:	f003 f927 	bl	b8f58 <_ZN9TCPClientC1Ev>
{

}
   b5d0a:	4620      	mov	r0, r4
   b5d0c:	bd10      	pop	{r4, pc}
	...

000b5d10 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b5d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   b5d12:	4f0f      	ldr	r7, [pc, #60]	; (b5d50 <_ZN10HttpClient10sendHeaderEPKcS1_+0x40>)
{
   b5d14:	4605      	mov	r5, r0
   b5d16:	4614      	mov	r4, r2
   b5d18:	460e      	mov	r6, r1
    client.print(aHeaderName);
   b5d1a:	f002 fae1 	bl	b82e0 <_ZN5Print5printEPKc>
    client.print(": ");
   b5d1e:	4639      	mov	r1, r7
   b5d20:	4628      	mov	r0, r5
   b5d22:	f002 fadd 	bl	b82e0 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b5d26:	4621      	mov	r1, r4
   b5d28:	4628      	mov	r0, r5
   b5d2a:	f002 faf2 	bl	b8312 <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.print(aHeaderName);
   b5d2e:	f003 fa89 	bl	b9244 <_Z16_fetch_usbserialv>
   b5d32:	4631      	mov	r1, r6
   b5d34:	f002 fad4 	bl	b82e0 <_ZN5Print5printEPKc>
    Serial.print(": ");
   b5d38:	f003 fa84 	bl	b9244 <_Z16_fetch_usbserialv>
   b5d3c:	4639      	mov	r1, r7
   b5d3e:	f002 facf 	bl	b82e0 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   b5d42:	f003 fa7f 	bl	b9244 <_Z16_fetch_usbserialv>
   b5d46:	4621      	mov	r1, r4
    #endif
}
   b5d48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(aHeaderValue);
   b5d4c:	f002 bae1 	b.w	b8312 <_ZN5Print7printlnEPKc>
   b5d50:	000ba478 	.word	0x000ba478

000b5d54 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b5d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   b5d56:	4f14      	ldr	r7, [pc, #80]	; (b5da8 <_ZN10HttpClient10sendHeaderEPKci+0x54>)
{
   b5d58:	4604      	mov	r4, r0
   b5d5a:	4615      	mov	r5, r2
   b5d5c:	460e      	mov	r6, r1
    client.print(aHeaderName);
   b5d5e:	f002 fabf 	bl	b82e0 <_ZN5Print5printEPKc>
    client.print(": ");
   b5d62:	4639      	mov	r1, r7
   b5d64:	4620      	mov	r0, r4
   b5d66:	f002 fabb 	bl	b82e0 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b5d6a:	220a      	movs	r2, #10
   b5d6c:	4629      	mov	r1, r5
   b5d6e:	4620      	mov	r0, r4
   b5d70:	f7ff ffb4 	bl	b5cdc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b5d74:	4620      	mov	r0, r4
   b5d76:	f002 fac0 	bl	b82fa <_ZN5Print7printlnEv>
    client.println(aHeaderValue);

    #ifdef LOGGING
    Serial.print(aHeaderName);
   b5d7a:	f003 fa63 	bl	b9244 <_Z16_fetch_usbserialv>
   b5d7e:	4631      	mov	r1, r6
   b5d80:	f002 faae 	bl	b82e0 <_ZN5Print5printEPKc>
    Serial.print(": ");
   b5d84:	f003 fa5e 	bl	b9244 <_Z16_fetch_usbserialv>
   b5d88:	4639      	mov	r1, r7
   b5d8a:	f002 faa9 	bl	b82e0 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   b5d8e:	f003 fa59 	bl	b9244 <_Z16_fetch_usbserialv>
   b5d92:	4629      	mov	r1, r5
   b5d94:	4604      	mov	r4, r0
size_t Print::print(T n, int base)
   b5d96:	220a      	movs	r2, #10
   b5d98:	f7ff ffa0 	bl	b5cdc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b5d9c:	4620      	mov	r0, r4
    #endif
}
   b5d9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5da2:	f002 baaa 	b.w	b82fa <_ZN5Print7printlnEv>
   b5da6:	bf00      	nop
   b5da8:	000ba478 	.word	0x000ba478

000b5dac <_ZN10HttpClient10sendHeaderEPKc>:

void HttpClient::sendHeader(const char* aHeaderName)
{
   b5dac:	b510      	push	{r4, lr}
   b5dae:	460c      	mov	r4, r1
    client.println(aHeaderName);
   b5db0:	f002 faaf 	bl	b8312 <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.println(aHeaderName);
   b5db4:	f003 fa46 	bl	b9244 <_Z16_fetch_usbserialv>
   b5db8:	4621      	mov	r1, r4
    #endif
}
   b5dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(aHeaderName);
   b5dbe:	f002 baa8 	b.w	b8312 <_ZN5Print7printlnEPKc>
	...

000b5dc4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b5dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5dc8:	460e      	mov	r6, r1
   b5dca:	b091      	sub	sp, #68	; 0x44
   b5dcc:	461f      	mov	r7, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b5dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5dd2:	6013      	str	r3, [r2, #0]
{
   b5dd4:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5dd6:	2100      	movs	r1, #0
   b5dd8:	4630      	mov	r0, r6
   b5dda:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b5dde:	4690      	mov	r8, r2
   b5de0:	f002 fcb3 	bl	b874a <_ZNK6String6equalsEPKc>
   b5de4:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b5de8:	4603      	mov	r3, r0
   b5dea:	b9c0      	cbnz	r0, b5e1e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x5a>
	const char * c_str() const { return buffer; }
   b5dec:	f1be 0f00 	cmp.w	lr, #0
   b5df0:	bf14      	ite	ne
   b5df2:	4672      	movne	r2, lr
   b5df4:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b5df6:	6831      	ldr	r1, [r6, #0]
   b5df8:	b292      	uxth	r2, r2
   b5dfa:	4620      	mov	r0, r4
   b5dfc:	f002 feac 	bl	b8b58 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b5e00:	1e05      	subs	r5, r0, #0
   b5e02:	bf18      	it	ne
   b5e04:	2501      	movne	r5, #1
    }

    #ifdef LOGGING
    if (connected) {
   b5e06:	b9ed      	cbnz	r5, b5e44 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x80>
            Serial.print(aRequest.ip);
        }
        Serial.print(":");
        Serial.println(aRequest.port);
    } else {
        Serial.println("HttpClient>\tConnection failed.");
   b5e08:	f003 fa1c 	bl	b9244 <_Z16_fetch_usbserialv>
   b5e0c:	49be      	ldr	r1, [pc, #760]	; (b6108 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x344>)
   b5e0e:	f002 fa80 	bl	b8312 <_ZN5Print7printlnEPKc>
    }
    #endif

    if (!connected) {
        client.stop();
   b5e12:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b5e14:	b011      	add	sp, #68	; 0x44
   b5e16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b5e1a:	f003 b853 	b.w	b8ec4 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b5e1e:	4bbb      	ldr	r3, [pc, #748]	; (b610c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x348>)
   b5e20:	930a      	str	r3, [sp, #40]	; 0x28
   b5e22:	f106 0c14 	add.w	ip, r6, #20
   b5e26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5e2a:	ad0b      	add	r5, sp, #44	; 0x2c
   b5e2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5e2e:	f8dc 3000 	ldr.w	r3, [ip]
   b5e32:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b5e34:	fa1f f28e 	uxth.w	r2, lr
   b5e38:	2300      	movs	r3, #0
   b5e3a:	a90a      	add	r1, sp, #40	; 0x28
   b5e3c:	4620      	mov	r0, r4
   b5e3e:	f002 ff6b 	bl	b8d18 <_ZN9TCPClient7connectE9IPAddresstm>
   b5e42:	e7dd      	b.n	b5e00 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5e44:	2100      	movs	r1, #0
   b5e46:	4630      	mov	r0, r6
   b5e48:	f002 fc7f 	bl	b874a <_ZNK6String6equalsEPKc>
        if(aRequest.hostname!=NULL) {
   b5e4c:	2800      	cmp	r0, #0
   b5e4e:	d15d      	bne.n	b5f0c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x148>
            Serial.print("HttpClient>\tConnecting to: ");
   b5e50:	f003 f9f8 	bl	b9244 <_Z16_fetch_usbserialv>
   b5e54:	49ae      	ldr	r1, [pc, #696]	; (b6110 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x34c>)
   b5e56:	f002 fa43 	bl	b82e0 <_ZN5Print5printEPKc>
            Serial.print(aRequest.hostname);
   b5e5a:	f003 f9f3 	bl	b9244 <_Z16_fetch_usbserialv>
   b5e5e:	6831      	ldr	r1, [r6, #0]
   b5e60:	f002 fa3e 	bl	b82e0 <_ZN5Print5printEPKc>
        Serial.print(":");
   b5e64:	f003 f9ee 	bl	b9244 <_Z16_fetch_usbserialv>
   b5e68:	49aa      	ldr	r1, [pc, #680]	; (b6114 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   b5e6a:	f002 fa39 	bl	b82e0 <_ZN5Print5printEPKc>
        Serial.println(aRequest.port);
   b5e6e:	f003 f9e9 	bl	b9244 <_Z16_fetch_usbserialv>
   b5e72:	220a      	movs	r2, #10
   b5e74:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   b5e76:	4682      	mov	sl, r0
size_t Print::print(T n, int base)
   b5e78:	f7ff ff30 	bl	b5cdc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b5e7c:	4650      	mov	r0, sl
   b5e7e:	f002 fa3c 	bl	b82fa <_ZN5Print7printlnEv>
    client.print(aHttpMethod);
   b5e82:	4649      	mov	r1, r9
   b5e84:	4620      	mov	r0, r4
   b5e86:	f002 fa2b 	bl	b82e0 <_ZN5Print5printEPKc>
    client.print(" ");
   b5e8a:	49a3      	ldr	r1, [pc, #652]	; (b6118 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   b5e8c:	4620      	mov	r0, r4
   b5e8e:	f002 fa27 	bl	b82e0 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b5e92:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b5e94:	4620      	mov	r0, r4
   b5e96:	f002 fa23 	bl	b82e0 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b5e9a:	49a0      	ldr	r1, [pc, #640]	; (b611c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   b5e9c:	4620      	mov	r0, r4
   b5e9e:	f002 fa1f 	bl	b82e0 <_ZN5Print5printEPKc>
    Serial.println("HttpClient>\tStart of HTTP Request.");
   b5ea2:	f003 f9cf 	bl	b9244 <_Z16_fetch_usbserialv>
   b5ea6:	499e      	ldr	r1, [pc, #632]	; (b6120 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x35c>)
   b5ea8:	f002 fa33 	bl	b8312 <_ZN5Print7printlnEPKc>
    Serial.print(aHttpMethod);
   b5eac:	f003 f9ca 	bl	b9244 <_Z16_fetch_usbserialv>
   b5eb0:	4649      	mov	r1, r9
   b5eb2:	f002 fa15 	bl	b82e0 <_ZN5Print5printEPKc>
    Serial.print(" ");
   b5eb6:	f003 f9c5 	bl	b9244 <_Z16_fetch_usbserialv>
   b5eba:	4997      	ldr	r1, [pc, #604]	; (b6118 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   b5ebc:	f002 fa10 	bl	b82e0 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
   b5ec0:	f003 f9c0 	bl	b9244 <_Z16_fetch_usbserialv>
   b5ec4:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b5ec6:	f002 fa0b 	bl	b82e0 <_ZN5Print5printEPKc>
    Serial.print(" HTTP/1.0\r\n");
   b5eca:	f003 f9bb 	bl	b9244 <_Z16_fetch_usbserialv>
   b5ece:	4993      	ldr	r1, [pc, #588]	; (b611c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   b5ed0:	f002 fa06 	bl	b82e0 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b5ed4:	4993      	ldr	r1, [pc, #588]	; (b6124 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x360>)
   b5ed6:	4a94      	ldr	r2, [pc, #592]	; (b6128 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x364>)
   b5ed8:	4620      	mov	r0, r4
   b5eda:	f7ff ff19 	bl	b5d10 <_ZN10HttpClient10sendHeaderEPKcS1_>
   b5ede:	2100      	movs	r1, #0
   b5ee0:	4630      	mov	r0, r6
   b5ee2:	f002 fc32 	bl	b874a <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b5ee6:	b920      	cbnz	r0, b5ef2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x12e>
        sendHeader("HOST", aRequest.hostname.c_str());
   b5ee8:	6832      	ldr	r2, [r6, #0]
   b5eea:	4990      	ldr	r1, [pc, #576]	; (b612c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x368>)
   b5eec:	4620      	mov	r0, r4
   b5eee:	f7ff ff0f 	bl	b5d10 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b5ef2:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b5ef6:	2100      	movs	r1, #0
   b5ef8:	4650      	mov	r0, sl
   b5efa:	f002 fc26 	bl	b874a <_ZNK6String6equalsEPKc>
   b5efe:	b988      	cbnz	r0, b5f24 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x160>
        sendHeader("Content-Length", (aRequest.body).length());
   b5f00:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b5f02:	498b      	ldr	r1, [pc, #556]	; (b6130 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x36c>)
   b5f04:	4620      	mov	r0, r4
   b5f06:	f7ff ff25 	bl	b5d54 <_ZN10HttpClient10sendHeaderEPKci>
   b5f0a:	e012      	b.n	b5f32 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16e>
            Serial.print("HttpClient>\tConnecting to IP: ");
   b5f0c:	f003 f99a 	bl	b9244 <_Z16_fetch_usbserialv>
   b5f10:	4988      	ldr	r1, [pc, #544]	; (b6134 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x370>)
   b5f12:	f002 f9e5 	bl	b82e0 <_ZN5Print5printEPKc>
            Serial.print(aRequest.ip);
   b5f16:	f003 f995 	bl	b9244 <_Z16_fetch_usbserialv>
   b5f1a:	f106 0110 	add.w	r1, r6, #16
   b5f1e:	f002 f9e6 	bl	b82ee <_ZN5Print5printERK9Printable>
   b5f22:	e79f      	b.n	b5e64 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xa0>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b5f24:	4984      	ldr	r1, [pc, #528]	; (b6138 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x374>)
   b5f26:	4648      	mov	r0, r9
   b5f28:	f004 f822 	bl	b9f70 <strcmp>
   b5f2c:	4602      	mov	r2, r0
   b5f2e:	2800      	cmp	r0, #0
   b5f30:	d0e7      	beq.n	b5f02 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x13e>
    if (headers != NULL)
   b5f32:	b15f      	cbz	r7, b5f4c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x188>
        while (headers[i].header != NULL)
   b5f34:	6839      	ldr	r1, [r7, #0]
   b5f36:	b149      	cbz	r1, b5f4c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x188>
            if (headers[i].value != NULL) {
   b5f38:	687a      	ldr	r2, [r7, #4]
                sendHeader(headers[i].header, headers[i].value);
   b5f3a:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b5f3c:	b11a      	cbz	r2, b5f46 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
                sendHeader(headers[i].header, headers[i].value);
   b5f3e:	f7ff fee7 	bl	b5d10 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b5f42:	3708      	adds	r7, #8
        while (headers[i].header != NULL)
   b5f44:	e7f6      	b.n	b5f34 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
                sendHeader(headers[i].header);
   b5f46:	f7ff ff31 	bl	b5dac <_ZN10HttpClient10sendHeaderEPKc>
   b5f4a:	e7fa      	b.n	b5f42 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17e>
    client.println();
   b5f4c:	4620      	mov	r0, r4
   b5f4e:	f002 f9d4 	bl	b82fa <_ZN5Print7printlnEv>
    client.flush();
   b5f52:	4620      	mov	r0, r4
   b5f54:	f002 fd60 	bl	b8a18 <_ZN9TCPClient5flushEv>
   b5f58:	2100      	movs	r1, #0
   b5f5a:	4650      	mov	r0, sl
   b5f5c:	f002 fbf5 	bl	b874a <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b5f60:	b940      	cbnz	r0, b5f74 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b0>
        client.println(aRequest.body);
   b5f62:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b5f64:	4620      	mov	r0, r4
   b5f66:	f002 f9d4 	bl	b8312 <_ZN5Print7printlnEPKc>
        Serial.println(aRequest.body);
   b5f6a:	f003 f96b 	bl	b9244 <_Z16_fetch_usbserialv>
   b5f6e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b5f70:	f002 f9cf 	bl	b8312 <_ZN5Print7printlnEPKc>
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   b5f74:	f003 f966 	bl	b9244 <_Z16_fetch_usbserialv>
    memset(&buffer[0], 0, sizeof(buffer));
   b5f78:	f104 0a1c 	add.w	sl, r4, #28
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   b5f7c:	496f      	ldr	r1, [pc, #444]	; (b613c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x378>)
   b5f7e:	f002 f9c8 	bl	b8312 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b5f82:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5f86:	2100      	movs	r1, #0
   b5f88:	4650      	mov	r0, sl
   b5f8a:	f003 ffbb 	bl	b9f04 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5f8e:	f000 f9df 	bl	b6350 <HAL_Timer_Get_Milli_Seconds>
   b5f92:	9000      	str	r0, [sp, #0]
   b5f94:	f000 f9dc 	bl	b6350 <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
   b5f98:	2600      	movs	r6, #0
   b5f9a:	9001      	str	r0, [sp, #4]
        int bytes = client.available();
   b5f9c:	4620      	mov	r0, r4
   b5f9e:	f002 ff37 	bl	b8e10 <_ZN9TCPClient9availableEv>
        if(bytes) {
   b5fa2:	4681      	mov	r9, r0
   b5fa4:	b178      	cbz	r0, b5fc6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x202>
            Serial.print("\r\nHttpClient>\tReceiving TCP transaction of ");
   b5fa6:	f003 f94d 	bl	b9244 <_Z16_fetch_usbserialv>
   b5faa:	4965      	ldr	r1, [pc, #404]	; (b6140 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x37c>)
   b5fac:	f002 f998 	bl	b82e0 <_ZN5Print5printEPKc>
            Serial.print(bytes);
   b5fb0:	f003 f948 	bl	b9244 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   b5fb4:	4649      	mov	r1, r9
   b5fb6:	220a      	movs	r2, #10
   b5fb8:	f7ff fe90 	bl	b5cdc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
            Serial.println(" bytes.");
   b5fbc:	f003 f942 	bl	b9244 <_Z16_fetch_usbserialv>
   b5fc0:	4960      	ldr	r1, [pc, #384]	; (b6144 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x380>)
   b5fc2:	f002 f9a6 	bl	b8312 <_ZN5Print7printlnEPKc>
    unsigned int bufferPosition = 0;
   b5fc6:	f04f 0b00 	mov.w	fp, #0
        while (client.available()) {
   b5fca:	4620      	mov	r0, r4
   b5fcc:	f002 ff20 	bl	b8e10 <_ZN9TCPClient9availableEv>
   b5fd0:	b320      	cbz	r0, b601c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x258>
            char c = client.read();
   b5fd2:	4620      	mov	r0, r4
   b5fd4:	f002 fd06 	bl	b89e4 <_ZN9TCPClient4readEv>
   b5fd8:	b2c7      	uxtb	r7, r0
            Serial.print(c);
   b5fda:	f003 f933 	bl	b9244 <_Z16_fetch_usbserialv>
   b5fde:	4639      	mov	r1, r7
   b5fe0:	f002 f982 	bl	b82e8 <_ZN5Print5printEc>
   b5fe4:	f000 f9b4 	bl	b6350 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b5fe8:	f240 33fe 	movw	r3, #1022	; 0x3fe
   b5fec:	429e      	cmp	r6, r3
   b5fee:	9000      	str	r0, [sp, #0]
   b5ff0:	d803      	bhi.n	b5ffa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x236>
                buffer[bufferPosition] = c;
   b5ff2:	f80a 7006 	strb.w	r7, [sl, r6]
            bufferPosition++;
   b5ff6:	3601      	adds	r6, #1
        while (client.available()) {
   b5ff8:	e7e7      	b.n	b5fca <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x206>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b5ffa:	f240 33ff 	movw	r3, #1023	; 0x3ff
   b5ffe:	429e      	cmp	r6, r3
   b6000:	d1f9      	bne.n	b5ff6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x232>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b6002:	2300      	movs	r3, #0
   b6004:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   b6008:	4620      	mov	r0, r4
   b600a:	f002 ff5b 	bl	b8ec4 <_ZN9TCPClient4stopEv>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
   b600e:	f003 f919 	bl	b9244 <_Z16_fetch_usbserialv>
   b6012:	494d      	ldr	r1, [pc, #308]	; (b6148 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x384>)
   b6014:	f002 f97d 	bl	b8312 <_ZN5Print7printlnEPKc>
                error = true;
   b6018:	46ab      	mov	fp, r5
   b601a:	e7ec      	b.n	b5ff6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x232>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b601c:	19a3      	adds	r3, r4, r6
   b601e:	7718      	strb	r0, [r3, #28]
        if (bytes) {
   b6020:	f1b9 0f00 	cmp.w	r9, #0
   b6024:	d004      	beq.n	b6030 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x26c>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
   b6026:	f003 f90d 	bl	b9244 <_Z16_fetch_usbserialv>
   b602a:	4948      	ldr	r1, [pc, #288]	; (b614c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x388>)
   b602c:	f002 f958 	bl	b82e0 <_ZN5Print5printEPKc>
   b6030:	f000 f98e 	bl	b6350 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b6034:	9b00      	ldr	r3, [sp, #0]
   b6036:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b603a:	f1bb 0f00 	cmp.w	fp, #0
   b603e:	d106      	bne.n	b604e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x28a>
   b6040:	f241 3388 	movw	r3, #5000	; 0x1388
   b6044:	4599      	cmp	r9, r3
   b6046:	d802      	bhi.n	b604e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x28a>
            delay(200);
   b6048:	20c8      	movs	r0, #200	; 0xc8
   b604a:	f000 fcd1 	bl	b69f0 <delay>
    } while (client.connected() && !timeout && !error);
   b604e:	4620      	mov	r0, r4
   b6050:	f002 fe00 	bl	b8c54 <_ZN9TCPClient9connectedEv>
   b6054:	f241 3388 	movw	r3, #5000	; 0x1388
   b6058:	2800      	cmp	r0, #0
   b605a:	d04c      	beq.n	b60f6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x332>
   b605c:	4599      	cmp	r9, r3
   b605e:	d84c      	bhi.n	b60fa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x336>
   b6060:	f1bb 0f00 	cmp.w	fp, #0
   b6064:	d09a      	beq.n	b5f9c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d8>
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
   b6066:	f003 f8ed 	bl	b9244 <_Z16_fetch_usbserialv>
   b606a:	4939      	ldr	r1, [pc, #228]	; (b6150 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x38c>)
   b606c:	f002 f938 	bl	b82e0 <_ZN5Print5printEPKc>
    Serial.print(millis() - firstRead);
   b6070:	f003 f8e8 	bl	b9244 <_Z16_fetch_usbserialv>
   b6074:	4605      	mov	r5, r0
   b6076:	f000 f96b 	bl	b6350 <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   b607a:	9b01      	ldr	r3, [sp, #4]
   b607c:	220a      	movs	r2, #10
   b607e:	1ac1      	subs	r1, r0, r3
   b6080:	4628      	mov	r0, r5
   b6082:	f002 f950 	bl	b8326 <_ZN5Print11printNumberEmh>
    Serial.println("ms).");
   b6086:	f003 f8dd 	bl	b9244 <_Z16_fetch_usbserialv>
   b608a:	4932      	ldr	r1, [pc, #200]	; (b6154 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x390>)
   b608c:	f002 f941 	bl	b8312 <_ZN5Print7printlnEPKc>
    client.stop();
   b6090:	4620      	mov	r0, r4
   b6092:	f002 ff17 	bl	b8ec4 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b6096:	4651      	mov	r1, sl
   b6098:	a802      	add	r0, sp, #8
   b609a:	f002 fa8c 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b609e:	230c      	movs	r3, #12
   b60a0:	2209      	movs	r2, #9
   b60a2:	a902      	add	r1, sp, #8
   b60a4:	a806      	add	r0, sp, #24
   b60a6:	f002 fb75 	bl	b8794 <_ZNK6String9substringEjj>
    Serial.print("HttpClient>\tStatus Code: ");
   b60aa:	f003 f8cb 	bl	b9244 <_Z16_fetch_usbserialv>
   b60ae:	492a      	ldr	r1, [pc, #168]	; (b6158 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x394>)
   b60b0:	f002 f916 	bl	b82e0 <_ZN5Print5printEPKc>
    Serial.println(statusCode);
   b60b4:	f003 f8c6 	bl	b9244 <_Z16_fetch_usbserialv>
   b60b8:	9906      	ldr	r1, [sp, #24]
   b60ba:	f002 f92a 	bl	b8312 <_ZN5Print7printlnEPKc>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b60be:	4927      	ldr	r1, [pc, #156]	; (b615c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x398>)
   b60c0:	a80a      	add	r0, sp, #40	; 0x28
   b60c2:	f002 fa78 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b60c6:	a90a      	add	r1, sp, #40	; 0x28
   b60c8:	a802      	add	r0, sp, #8
   b60ca:	f002 fb5f 	bl	b878c <_ZNK6String7indexOfERKS_>
   b60ce:	4604      	mov	r4, r0
   b60d0:	a80a      	add	r0, sp, #40	; 0x28
   b60d2:	f002 fa25 	bl	b8520 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b60d6:	1c63      	adds	r3, r4, #1
   b60d8:	d146      	bne.n	b6168 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a4>
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
   b60da:	f003 f8b3 	bl	b9244 <_Z16_fetch_usbserialv>
   b60de:	4920      	ldr	r1, [pc, #128]	; (b6160 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x39c>)
   b60e0:	f002 f917 	bl	b8312 <_ZN5Print7printlnEPKc>
    String statusCode = raw_response.substring(9,12);
   b60e4:	a806      	add	r0, sp, #24
   b60e6:	f002 fa1b 	bl	b8520 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b60ea:	a802      	add	r0, sp, #8
   b60ec:	f002 fa18 	bl	b8520 <_ZN6StringD1Ev>
}
   b60f0:	b011      	add	sp, #68	; 0x44
   b60f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (timeout) {
   b60f6:	4599      	cmp	r9, r3
   b60f8:	d9b5      	bls.n	b6066 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2a2>
        Serial.println("\r\nHttpClient>\tError: Timeout while reading response.");
   b60fa:	f003 f8a3 	bl	b9244 <_Z16_fetch_usbserialv>
   b60fe:	4919      	ldr	r1, [pc, #100]	; (b6164 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a0>)
   b6100:	f002 f907 	bl	b8312 <_ZN5Print7printlnEPKc>
   b6104:	e7af      	b.n	b6066 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2a2>
   b6106:	bf00      	nop
   b6108:	000ba7ef 	.word	0x000ba7ef
   b610c:	000bab78 	.word	0x000bab78
   b6110:	000ba774 	.word	0x000ba774
   b6114:	000ba22d 	.word	0x000ba22d
   b6118:	000ba479 	.word	0x000ba479
   b611c:	000ba7af 	.word	0x000ba7af
   b6120:	000ba7bb 	.word	0x000ba7bb
   b6124:	000ba7e4 	.word	0x000ba7e4
   b6128:	000ba7de 	.word	0x000ba7de
   b612c:	000ba80e 	.word	0x000ba80e
   b6130:	000ba813 	.word	0x000ba813
   b6134:	000ba790 	.word	0x000ba790
   b6138:	000ba20e 	.word	0x000ba20e
   b613c:	000ba822 	.word	0x000ba822
   b6140:	000ba843 	.word	0x000ba843
   b6144:	000ba86f 	.word	0x000ba86f
   b6148:	000ba877 	.word	0x000ba877
   b614c:	000ba8ac 	.word	0x000ba8ac
   b6150:	000ba907 	.word	0x000ba907
   b6154:	000ba92c 	.word	0x000ba92c
   b6158:	000ba931 	.word	0x000ba931
   b615c:	000ba94b 	.word	0x000ba94b
   b6160:	000ba950 	.word	0x000ba950
   b6164:	000ba8d2 	.word	0x000ba8d2
    aResponse.body = "";
   b6168:	f108 0504 	add.w	r5, r8, #4
   b616c:	490a      	ldr	r1, [pc, #40]	; (b6198 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3d4>)
   b616e:	4628      	mov	r0, r5
   b6170:	f002 fa4f 	bl	b8612 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b6174:	1d22      	adds	r2, r4, #4
   b6176:	a902      	add	r1, sp, #8
   b6178:	a80a      	add	r0, sp, #40	; 0x28
   b617a:	f002 fb2b 	bl	b87d4 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b617e:	a90a      	add	r1, sp, #40	; 0x28
   b6180:	4628      	mov	r0, r5
   b6182:	f002 fa95 	bl	b86b0 <_ZN6String6concatERKS_>
   b6186:	a80a      	add	r0, sp, #40	; 0x28
   b6188:	f002 f9ca 	bl	b8520 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b618c:	9806      	ldr	r0, [sp, #24]
   b618e:	f003 fe5b 	bl	b9e48 <atoi>
   b6192:	f8c8 0000 	str.w	r0, [r8]
   b6196:	e7a5      	b.n	b60e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x320>
   b6198:	000ba4c7 	.word	0x000ba4c7

000b619c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b619c:	b508      	push	{r3, lr}
   b619e:	4b02      	ldr	r3, [pc, #8]	; (b61a8 <hal_ble_stack_init+0xc>)
   b61a0:	681b      	ldr	r3, [r3, #0]
   b61a2:	689b      	ldr	r3, [r3, #8]
   b61a4:	9301      	str	r3, [sp, #4]
   b61a6:	bd08      	pop	{r3, pc}
   b61a8:	00030278 	.word	0x00030278

000b61ac <hal_ble_stack_deinit>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
   b61ac:	b508      	push	{r3, lr}
   b61ae:	4b02      	ldr	r3, [pc, #8]	; (b61b8 <hal_ble_stack_deinit+0xc>)
   b61b0:	681b      	ldr	r3, [r3, #0]
   b61b2:	68db      	ldr	r3, [r3, #12]
   b61b4:	9301      	str	r3, [sp, #4]
   b61b6:	bd08      	pop	{r3, pc}
   b61b8:	00030278 	.word	0x00030278

000b61bc <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b61bc:	b508      	push	{r3, lr}
   b61be:	4b02      	ldr	r3, [pc, #8]	; (b61c8 <hal_ble_gap_set_advertising_data+0xc>)
   b61c0:	681b      	ldr	r3, [r3, #0]
   b61c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b61c4:	9301      	str	r3, [sp, #4]
   b61c6:	bd08      	pop	{r3, pc}
   b61c8:	00030278 	.word	0x00030278

000b61cc <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b61cc:	b508      	push	{r3, lr}
   b61ce:	4b02      	ldr	r3, [pc, #8]	; (b61d8 <hal_ble_gap_set_scan_response_data+0xc>)
   b61d0:	681b      	ldr	r3, [r3, #0]
   b61d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b61d4:	9301      	str	r3, [sp, #4]
   b61d6:	bd08      	pop	{r3, pc}
   b61d8:	00030278 	.word	0x00030278

000b61dc <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b61dc:	b508      	push	{r3, lr}
   b61de:	4b02      	ldr	r3, [pc, #8]	; (b61e8 <hal_ble_gap_start_advertising+0xc>)
   b61e0:	681b      	ldr	r3, [r3, #0]
   b61e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b61e4:	9301      	str	r3, [sp, #4]
   b61e6:	bd08      	pop	{r3, pc}
   b61e8:	00030278 	.word	0x00030278

000b61ec <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b61ec:	b508      	push	{r3, lr}
   b61ee:	4b03      	ldr	r3, [pc, #12]	; (b61fc <hal_ble_gap_disconnect+0x10>)
   b61f0:	681b      	ldr	r3, [r3, #0]
   b61f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b61f6:	9301      	str	r3, [sp, #4]
   b61f8:	bd08      	pop	{r3, pc}
   b61fa:	0000      	.short	0x0000
   b61fc:	00030278 	.word	0x00030278

000b6200 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b6200:	b508      	push	{r3, lr}
   b6202:	4b03      	ldr	r3, [pc, #12]	; (b6210 <hal_ble_gatt_server_add_service+0x10>)
   b6204:	681b      	ldr	r3, [r3, #0]
   b6206:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b620a:	9301      	str	r3, [sp, #4]
   b620c:	bd08      	pop	{r3, pc}
   b620e:	0000      	.short	0x0000
   b6210:	00030278 	.word	0x00030278

000b6214 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6214:	b508      	push	{r3, lr}
   b6216:	4b03      	ldr	r3, [pc, #12]	; (b6224 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b6218:	681b      	ldr	r3, [r3, #0]
   b621a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b621e:	9301      	str	r3, [sp, #4]
   b6220:	bd08      	pop	{r3, pc}
   b6222:	0000      	.short	0x0000
   b6224:	00030278 	.word	0x00030278

000b6228 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6228:	b508      	push	{r3, lr}
   b622a:	4b03      	ldr	r3, [pc, #12]	; (b6238 <hal_ble_gatt_client_write_with_response+0x10>)
   b622c:	681b      	ldr	r3, [r3, #0]
   b622e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b6232:	9301      	str	r3, [sp, #4]
   b6234:	bd08      	pop	{r3, pc}
   b6236:	0000      	.short	0x0000
   b6238:	00030278 	.word	0x00030278

000b623c <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b623c:	b508      	push	{r3, lr}
   b623e:	4b03      	ldr	r3, [pc, #12]	; (b624c <hal_ble_gatt_client_write_without_response+0x10>)
   b6240:	681b      	ldr	r3, [r3, #0]
   b6242:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b6246:	9301      	str	r3, [sp, #4]
   b6248:	bd08      	pop	{r3, pc}
   b624a:	0000      	.short	0x0000
   b624c:	00030278 	.word	0x00030278

000b6250 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b6250:	b508      	push	{r3, lr}
   b6252:	4b03      	ldr	r3, [pc, #12]	; (b6260 <hal_ble_gatt_server_add_characteristic+0x10>)
   b6254:	681b      	ldr	r3, [r3, #0]
   b6256:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b625a:	9301      	str	r3, [sp, #4]
   b625c:	bd08      	pop	{r3, pc}
   b625e:	0000      	.short	0x0000
   b6260:	00030278 	.word	0x00030278

000b6264 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b6264:	b508      	push	{r3, lr}
   b6266:	4b03      	ldr	r3, [pc, #12]	; (b6274 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b6268:	681b      	ldr	r3, [r3, #0]
   b626a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b626e:	9301      	str	r3, [sp, #4]
   b6270:	bd08      	pop	{r3, pc}
   b6272:	0000      	.short	0x0000
   b6274:	00030278 	.word	0x00030278

000b6278 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6278:	b508      	push	{r3, lr}
   b627a:	4b03      	ldr	r3, [pc, #12]	; (b6288 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b627c:	681b      	ldr	r3, [r3, #0]
   b627e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b6282:	9301      	str	r3, [sp, #4]
   b6284:	bd08      	pop	{r3, pc}
   b6286:	0000      	.short	0x0000
   b6288:	00030278 	.word	0x00030278

000b628c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b628c:	b508      	push	{r3, lr}
   b628e:	4b03      	ldr	r3, [pc, #12]	; (b629c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b6290:	681b      	ldr	r3, [r3, #0]
   b6292:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b6296:	9301      	str	r3, [sp, #4]
   b6298:	bd08      	pop	{r3, pc}
   b629a:	0000      	.short	0x0000
   b629c:	00030278 	.word	0x00030278

000b62a0 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   b62a0:	b508      	push	{r3, lr}
   b62a2:	4b02      	ldr	r3, [pc, #8]	; (b62ac <os_thread_create+0xc>)
   b62a4:	681b      	ldr	r3, [r3, #0]
   b62a6:	685b      	ldr	r3, [r3, #4]
   b62a8:	9301      	str	r3, [sp, #4]
   b62aa:	bd08      	pop	{r3, pc}
   b62ac:	00030248 	.word	0x00030248

000b62b0 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b62b0:	b508      	push	{r3, lr}
   b62b2:	4b02      	ldr	r3, [pc, #8]	; (b62bc <os_thread_yield+0xc>)
   b62b4:	681b      	ldr	r3, [r3, #0]
   b62b6:	68db      	ldr	r3, [r3, #12]
   b62b8:	9301      	str	r3, [sp, #4]
   b62ba:	bd08      	pop	{r3, pc}
   b62bc:	00030248 	.word	0x00030248

000b62c0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b62c0:	b508      	push	{r3, lr}
   b62c2:	4b02      	ldr	r3, [pc, #8]	; (b62cc <os_mutex_create+0xc>)
   b62c4:	681b      	ldr	r3, [r3, #0]
   b62c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b62c8:	9301      	str	r3, [sp, #4]
   b62ca:	bd08      	pop	{r3, pc}
   b62cc:	00030248 	.word	0x00030248

000b62d0 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b62d0:	b508      	push	{r3, lr}
   b62d2:	4b02      	ldr	r3, [pc, #8]	; (b62dc <os_mutex_lock+0xc>)
   b62d4:	681b      	ldr	r3, [r3, #0]
   b62d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b62d8:	9301      	str	r3, [sp, #4]
   b62da:	bd08      	pop	{r3, pc}
   b62dc:	00030248 	.word	0x00030248

000b62e0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b62e0:	b508      	push	{r3, lr}
   b62e2:	4b02      	ldr	r3, [pc, #8]	; (b62ec <os_mutex_unlock+0xc>)
   b62e4:	681b      	ldr	r3, [r3, #0]
   b62e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b62e8:	9301      	str	r3, [sp, #4]
   b62ea:	bd08      	pop	{r3, pc}
   b62ec:	00030248 	.word	0x00030248

000b62f0 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b62f0:	b508      	push	{r3, lr}
   b62f2:	4b02      	ldr	r3, [pc, #8]	; (b62fc <os_mutex_recursive_create+0xc>)
   b62f4:	681b      	ldr	r3, [r3, #0]
   b62f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b62f8:	9301      	str	r3, [sp, #4]
   b62fa:	bd08      	pop	{r3, pc}
   b62fc:	00030248 	.word	0x00030248

000b6300 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b6300:	b508      	push	{r3, lr}
   b6302:	4b02      	ldr	r3, [pc, #8]	; (b630c <os_mutex_recursive_destroy+0xc>)
   b6304:	681b      	ldr	r3, [r3, #0]
   b6306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6308:	9301      	str	r3, [sp, #4]
   b630a:	bd08      	pop	{r3, pc}
   b630c:	00030248 	.word	0x00030248

000b6310 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b6310:	b508      	push	{r3, lr}
   b6312:	4b02      	ldr	r3, [pc, #8]	; (b631c <os_mutex_recursive_lock+0xc>)
   b6314:	681b      	ldr	r3, [r3, #0]
   b6316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6318:	9301      	str	r3, [sp, #4]
   b631a:	bd08      	pop	{r3, pc}
   b631c:	00030248 	.word	0x00030248

000b6320 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b6320:	b508      	push	{r3, lr}
   b6322:	4b02      	ldr	r3, [pc, #8]	; (b632c <os_mutex_recursive_unlock+0xc>)
   b6324:	681b      	ldr	r3, [r3, #0]
   b6326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6328:	9301      	str	r3, [sp, #4]
   b632a:	bd08      	pop	{r3, pc}
   b632c:	00030248 	.word	0x00030248

000b6330 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6330:	b508      	push	{r3, lr}
   b6332:	4b02      	ldr	r3, [pc, #8]	; (b633c <HAL_RNG_GetRandomNumber+0xc>)
   b6334:	681b      	ldr	r3, [r3, #0]
   b6336:	685b      	ldr	r3, [r3, #4]
   b6338:	9301      	str	r3, [sp, #4]
   b633a:	bd08      	pop	{r3, pc}
   b633c:	00030218 	.word	0x00030218

000b6340 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6340:	b508      	push	{r3, lr}
   b6342:	4b02      	ldr	r3, [pc, #8]	; (b634c <HAL_Delay_Microseconds+0xc>)
   b6344:	681b      	ldr	r3, [r3, #0]
   b6346:	68db      	ldr	r3, [r3, #12]
   b6348:	9301      	str	r3, [sp, #4]
   b634a:	bd08      	pop	{r3, pc}
   b634c:	00030218 	.word	0x00030218

000b6350 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6350:	b508      	push	{r3, lr}
   b6352:	4b02      	ldr	r3, [pc, #8]	; (b635c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6354:	681b      	ldr	r3, [r3, #0]
   b6356:	695b      	ldr	r3, [r3, #20]
   b6358:	9301      	str	r3, [sp, #4]
   b635a:	bd08      	pop	{r3, pc}
   b635c:	00030218 	.word	0x00030218

000b6360 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b6360:	b508      	push	{r3, lr}
   b6362:	4b02      	ldr	r3, [pc, #8]	; (b636c <HAL_EEPROM_Init+0xc>)
   b6364:	681b      	ldr	r3, [r3, #0]
   b6366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6368:	9301      	str	r3, [sp, #4]
   b636a:	bd08      	pop	{r3, pc}
   b636c:	00030218 	.word	0x00030218

000b6370 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   b6370:	b508      	push	{r3, lr}
   b6372:	4b02      	ldr	r3, [pc, #8]	; (b637c <HAL_EEPROM_Get+0xc>)
   b6374:	681b      	ldr	r3, [r3, #0]
   b6376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6378:	9301      	str	r3, [sp, #4]
   b637a:	bd08      	pop	{r3, pc}
   b637c:	00030218 	.word	0x00030218

000b6380 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   b6380:	b508      	push	{r3, lr}
   b6382:	4b02      	ldr	r3, [pc, #8]	; (b638c <HAL_EEPROM_Put+0xc>)
   b6384:	681b      	ldr	r3, [r3, #0]
   b6386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6388:	9301      	str	r3, [sp, #4]
   b638a:	bd08      	pop	{r3, pc}
   b638c:	00030218 	.word	0x00030218

000b6390 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b6390:	b508      	push	{r3, lr}
   b6392:	4b02      	ldr	r3, [pc, #8]	; (b639c <hal_rtc_time_is_valid+0xc>)
   b6394:	681b      	ldr	r3, [r3, #0]
   b6396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6398:	9301      	str	r3, [sp, #4]
   b639a:	bd08      	pop	{r3, pc}
   b639c:	00030218 	.word	0x00030218

000b63a0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b63a0:	b508      	push	{r3, lr}
   b63a2:	4b02      	ldr	r3, [pc, #8]	; (b63ac <hal_rtc_get_time+0xc>)
   b63a4:	681b      	ldr	r3, [r3, #0]
   b63a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b63a8:	9301      	str	r3, [sp, #4]
   b63aa:	bd08      	pop	{r3, pc}
   b63ac:	00030218 	.word	0x00030218

000b63b0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b63b0:	b508      	push	{r3, lr}
   b63b2:	4b02      	ldr	r3, [pc, #8]	; (b63bc <HAL_Pin_Mode+0xc>)
   b63b4:	681b      	ldr	r3, [r3, #0]
   b63b6:	689b      	ldr	r3, [r3, #8]
   b63b8:	9301      	str	r3, [sp, #4]
   b63ba:	bd08      	pop	{r3, pc}
   b63bc:	0003022c 	.word	0x0003022c

000b63c0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b63c0:	b508      	push	{r3, lr}
   b63c2:	4b02      	ldr	r3, [pc, #8]	; (b63cc <HAL_Get_Pin_Mode+0xc>)
   b63c4:	681b      	ldr	r3, [r3, #0]
   b63c6:	68db      	ldr	r3, [r3, #12]
   b63c8:	9301      	str	r3, [sp, #4]
   b63ca:	bd08      	pop	{r3, pc}
   b63cc:	0003022c 	.word	0x0003022c

000b63d0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b63d0:	b508      	push	{r3, lr}
   b63d2:	4b02      	ldr	r3, [pc, #8]	; (b63dc <HAL_GPIO_Write+0xc>)
   b63d4:	681b      	ldr	r3, [r3, #0]
   b63d6:	691b      	ldr	r3, [r3, #16]
   b63d8:	9301      	str	r3, [sp, #4]
   b63da:	bd08      	pop	{r3, pc}
   b63dc:	0003022c 	.word	0x0003022c

000b63e0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b63e0:	b508      	push	{r3, lr}
   b63e2:	4b02      	ldr	r3, [pc, #8]	; (b63ec <HAL_GPIO_Read+0xc>)
   b63e4:	681b      	ldr	r3, [r3, #0]
   b63e6:	695b      	ldr	r3, [r3, #20]
   b63e8:	9301      	str	r3, [sp, #4]
   b63ea:	bd08      	pop	{r3, pc}
   b63ec:	0003022c 	.word	0x0003022c

000b63f0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b63f0:	b508      	push	{r3, lr}
   b63f2:	4b02      	ldr	r3, [pc, #8]	; (b63fc <hal_i2c_begin+0xc>)
   b63f4:	681b      	ldr	r3, [r3, #0]
   b63f6:	68db      	ldr	r3, [r3, #12]
   b63f8:	9301      	str	r3, [sp, #4]
   b63fa:	bd08      	pop	{r3, pc}
   b63fc:	00030228 	.word	0x00030228

000b6400 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6400:	b508      	push	{r3, lr}
   b6402:	4b02      	ldr	r3, [pc, #8]	; (b640c <hal_i2c_begin_transmission+0xc>)
   b6404:	681b      	ldr	r3, [r3, #0]
   b6406:	699b      	ldr	r3, [r3, #24]
   b6408:	9301      	str	r3, [sp, #4]
   b640a:	bd08      	pop	{r3, pc}
   b640c:	00030228 	.word	0x00030228

000b6410 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6410:	b508      	push	{r3, lr}
   b6412:	4b02      	ldr	r3, [pc, #8]	; (b641c <hal_i2c_end_transmission+0xc>)
   b6414:	681b      	ldr	r3, [r3, #0]
   b6416:	69db      	ldr	r3, [r3, #28]
   b6418:	9301      	str	r3, [sp, #4]
   b641a:	bd08      	pop	{r3, pc}
   b641c:	00030228 	.word	0x00030228

000b6420 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6420:	b508      	push	{r3, lr}
   b6422:	4b02      	ldr	r3, [pc, #8]	; (b642c <hal_i2c_write+0xc>)
   b6424:	681b      	ldr	r3, [r3, #0]
   b6426:	6a1b      	ldr	r3, [r3, #32]
   b6428:	9301      	str	r3, [sp, #4]
   b642a:	bd08      	pop	{r3, pc}
   b642c:	00030228 	.word	0x00030228

000b6430 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6430:	b508      	push	{r3, lr}
   b6432:	4b02      	ldr	r3, [pc, #8]	; (b643c <hal_i2c_available+0xc>)
   b6434:	681b      	ldr	r3, [r3, #0]
   b6436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6438:	9301      	str	r3, [sp, #4]
   b643a:	bd08      	pop	{r3, pc}
   b643c:	00030228 	.word	0x00030228

000b6440 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6440:	b508      	push	{r3, lr}
   b6442:	4b02      	ldr	r3, [pc, #8]	; (b644c <hal_i2c_read+0xc>)
   b6444:	681b      	ldr	r3, [r3, #0]
   b6446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6448:	9301      	str	r3, [sp, #4]
   b644a:	bd08      	pop	{r3, pc}
   b644c:	00030228 	.word	0x00030228

000b6450 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6450:	b508      	push	{r3, lr}
   b6452:	4b02      	ldr	r3, [pc, #8]	; (b645c <hal_i2c_peek+0xc>)
   b6454:	681b      	ldr	r3, [r3, #0]
   b6456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6458:	9301      	str	r3, [sp, #4]
   b645a:	bd08      	pop	{r3, pc}
   b645c:	00030228 	.word	0x00030228

000b6460 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6460:	b508      	push	{r3, lr}
   b6462:	4b02      	ldr	r3, [pc, #8]	; (b646c <hal_i2c_flush+0xc>)
   b6464:	681b      	ldr	r3, [r3, #0]
   b6466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6468:	9301      	str	r3, [sp, #4]
   b646a:	bd08      	pop	{r3, pc}
   b646c:	00030228 	.word	0x00030228

000b6470 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6470:	b508      	push	{r3, lr}
   b6472:	4b02      	ldr	r3, [pc, #8]	; (b647c <hal_i2c_is_enabled+0xc>)
   b6474:	681b      	ldr	r3, [r3, #0]
   b6476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6478:	9301      	str	r3, [sp, #4]
   b647a:	bd08      	pop	{r3, pc}
   b647c:	00030228 	.word	0x00030228

000b6480 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6480:	b508      	push	{r3, lr}
   b6482:	4b02      	ldr	r3, [pc, #8]	; (b648c <hal_i2c_init+0xc>)
   b6484:	681b      	ldr	r3, [r3, #0]
   b6486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6488:	9301      	str	r3, [sp, #4]
   b648a:	bd08      	pop	{r3, pc}
   b648c:	00030228 	.word	0x00030228

000b6490 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b6490:	b508      	push	{r3, lr}
   b6492:	4b02      	ldr	r3, [pc, #8]	; (b649c <hal_i2c_request_ex+0xc>)
   b6494:	681b      	ldr	r3, [r3, #0]
   b6496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6498:	9301      	str	r3, [sp, #4]
   b649a:	bd08      	pop	{r3, pc}
   b649c:	00030228 	.word	0x00030228

000b64a0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b64a0:	b508      	push	{r3, lr}
   b64a2:	4b02      	ldr	r3, [pc, #8]	; (b64ac <if_index_to_name+0xc>)
   b64a4:	681b      	ldr	r3, [r3, #0]
   b64a6:	695b      	ldr	r3, [r3, #20]
   b64a8:	9301      	str	r3, [sp, #4]
   b64aa:	bd08      	pop	{r3, pc}
   b64ac:	0003026c 	.word	0x0003026c

000b64b0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b64b0:	b508      	push	{r3, lr}
   b64b2:	4b02      	ldr	r3, [pc, #8]	; (b64bc <inet_inet_ntop+0xc>)
   b64b4:	681b      	ldr	r3, [r3, #0]
   b64b6:	695b      	ldr	r3, [r3, #20]
   b64b8:	9301      	str	r3, [sp, #4]
   b64ba:	bd08      	pop	{r3, pc}
   b64bc:	00030264 	.word	0x00030264

000b64c0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b64c0:	b508      	push	{r3, lr}
   b64c2:	4b02      	ldr	r3, [pc, #8]	; (b64cc <inet_htonl+0xc>)
   b64c4:	681b      	ldr	r3, [r3, #0]
   b64c6:	6a1b      	ldr	r3, [r3, #32]
   b64c8:	9301      	str	r3, [sp, #4]
   b64ca:	bd08      	pop	{r3, pc}
   b64cc:	00030264 	.word	0x00030264

000b64d0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b64d0:	b508      	push	{r3, lr}
   b64d2:	4b02      	ldr	r3, [pc, #8]	; (b64dc <inet_htons+0xc>)
   b64d4:	681b      	ldr	r3, [r3, #0]
   b64d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b64d8:	9301      	str	r3, [sp, #4]
   b64da:	bd08      	pop	{r3, pc}
   b64dc:	00030264 	.word	0x00030264

000b64e0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b64e0:	b508      	push	{r3, lr}
   b64e2:	4b02      	ldr	r3, [pc, #8]	; (b64ec <netdb_freeaddrinfo+0xc>)
   b64e4:	681b      	ldr	r3, [r3, #0]
   b64e6:	689b      	ldr	r3, [r3, #8]
   b64e8:	9301      	str	r3, [sp, #4]
   b64ea:	bd08      	pop	{r3, pc}
   b64ec:	00030268 	.word	0x00030268

000b64f0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b64f0:	b508      	push	{r3, lr}
   b64f2:	4b02      	ldr	r3, [pc, #8]	; (b64fc <netdb_getaddrinfo+0xc>)
   b64f4:	681b      	ldr	r3, [r3, #0]
   b64f6:	68db      	ldr	r3, [r3, #12]
   b64f8:	9301      	str	r3, [sp, #4]
   b64fa:	bd08      	pop	{r3, pc}
   b64fc:	00030268 	.word	0x00030268

000b6500 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6500:	b508      	push	{r3, lr}
   b6502:	4b02      	ldr	r3, [pc, #8]	; (b650c <sock_setsockopt+0xc>)
   b6504:	681b      	ldr	r3, [r3, #0]
   b6506:	699b      	ldr	r3, [r3, #24]
   b6508:	9301      	str	r3, [sp, #4]
   b650a:	bd08      	pop	{r3, pc}
   b650c:	00030238 	.word	0x00030238

000b6510 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6510:	b508      	push	{r3, lr}
   b6512:	4b02      	ldr	r3, [pc, #8]	; (b651c <sock_close+0xc>)
   b6514:	681b      	ldr	r3, [r3, #0]
   b6516:	69db      	ldr	r3, [r3, #28]
   b6518:	9301      	str	r3, [sp, #4]
   b651a:	bd08      	pop	{r3, pc}
   b651c:	00030238 	.word	0x00030238

000b6520 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6520:	b508      	push	{r3, lr}
   b6522:	4b02      	ldr	r3, [pc, #8]	; (b652c <sock_connect+0xc>)
   b6524:	681b      	ldr	r3, [r3, #0]
   b6526:	6a1b      	ldr	r3, [r3, #32]
   b6528:	9301      	str	r3, [sp, #4]
   b652a:	bd08      	pop	{r3, pc}
   b652c:	00030238 	.word	0x00030238

000b6530 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6530:	b508      	push	{r3, lr}
   b6532:	4b02      	ldr	r3, [pc, #8]	; (b653c <sock_recv+0xc>)
   b6534:	681b      	ldr	r3, [r3, #0]
   b6536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6538:	9301      	str	r3, [sp, #4]
   b653a:	bd08      	pop	{r3, pc}
   b653c:	00030238 	.word	0x00030238

000b6540 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6540:	b508      	push	{r3, lr}
   b6542:	4b02      	ldr	r3, [pc, #8]	; (b654c <sock_send+0xc>)
   b6544:	681b      	ldr	r3, [r3, #0]
   b6546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6548:	9301      	str	r3, [sp, #4]
   b654a:	bd08      	pop	{r3, pc}
   b654c:	00030238 	.word	0x00030238

000b6550 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6550:	b508      	push	{r3, lr}
   b6552:	4b02      	ldr	r3, [pc, #8]	; (b655c <sock_socket+0xc>)
   b6554:	681b      	ldr	r3, [r3, #0]
   b6556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6558:	9301      	str	r3, [sp, #4]
   b655a:	bd08      	pop	{r3, pc}
   b655c:	00030238 	.word	0x00030238

000b6560 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6560:	b508      	push	{r3, lr}
   b6562:	4b02      	ldr	r3, [pc, #8]	; (b656c <hal_spi_begin+0xc>)
   b6564:	681b      	ldr	r3, [r3, #0]
   b6566:	681b      	ldr	r3, [r3, #0]
   b6568:	9301      	str	r3, [sp, #4]
   b656a:	bd08      	pop	{r3, pc}
   b656c:	00030230 	.word	0x00030230

000b6570 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b6570:	b508      	push	{r3, lr}
   b6572:	4b02      	ldr	r3, [pc, #8]	; (b657c <hal_spi_set_bit_order+0xc>)
   b6574:	681b      	ldr	r3, [r3, #0]
   b6576:	689b      	ldr	r3, [r3, #8]
   b6578:	9301      	str	r3, [sp, #4]
   b657a:	bd08      	pop	{r3, pc}
   b657c:	00030230 	.word	0x00030230

000b6580 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b6580:	b508      	push	{r3, lr}
   b6582:	4b02      	ldr	r3, [pc, #8]	; (b658c <hal_spi_set_data_mode+0xc>)
   b6584:	681b      	ldr	r3, [r3, #0]
   b6586:	68db      	ldr	r3, [r3, #12]
   b6588:	9301      	str	r3, [sp, #4]
   b658a:	bd08      	pop	{r3, pc}
   b658c:	00030230 	.word	0x00030230

000b6590 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b6590:	b508      	push	{r3, lr}
   b6592:	4b02      	ldr	r3, [pc, #8]	; (b659c <hal_spi_set_clock_divider+0xc>)
   b6594:	681b      	ldr	r3, [r3, #0]
   b6596:	691b      	ldr	r3, [r3, #16]
   b6598:	9301      	str	r3, [sp, #4]
   b659a:	bd08      	pop	{r3, pc}
   b659c:	00030230 	.word	0x00030230

000b65a0 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b65a0:	b508      	push	{r3, lr}
   b65a2:	4b02      	ldr	r3, [pc, #8]	; (b65ac <hal_spi_transfer+0xc>)
   b65a4:	681b      	ldr	r3, [r3, #0]
   b65a6:	695b      	ldr	r3, [r3, #20]
   b65a8:	9301      	str	r3, [sp, #4]
   b65aa:	bd08      	pop	{r3, pc}
   b65ac:	00030230 	.word	0x00030230

000b65b0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b65b0:	b508      	push	{r3, lr}
   b65b2:	4b02      	ldr	r3, [pc, #8]	; (b65bc <hal_spi_init+0xc>)
   b65b4:	681b      	ldr	r3, [r3, #0]
   b65b6:	69db      	ldr	r3, [r3, #28]
   b65b8:	9301      	str	r3, [sp, #4]
   b65ba:	bd08      	pop	{r3, pc}
   b65bc:	00030230 	.word	0x00030230

000b65c0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b65c0:	b508      	push	{r3, lr}
   b65c2:	4b02      	ldr	r3, [pc, #8]	; (b65cc <hal_spi_is_enabled+0xc>)
   b65c4:	681b      	ldr	r3, [r3, #0]
   b65c6:	6a1b      	ldr	r3, [r3, #32]
   b65c8:	9301      	str	r3, [sp, #4]
   b65ca:	bd08      	pop	{r3, pc}
   b65cc:	00030230 	.word	0x00030230

000b65d0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b65d0:	b508      	push	{r3, lr}
   b65d2:	4b02      	ldr	r3, [pc, #8]	; (b65dc <hal_spi_info+0xc>)
   b65d4:	681b      	ldr	r3, [r3, #0]
   b65d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b65d8:	9301      	str	r3, [sp, #4]
   b65da:	bd08      	pop	{r3, pc}
   b65dc:	00030230 	.word	0x00030230

000b65e0 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b65e0:	b508      	push	{r3, lr}
   b65e2:	4b02      	ldr	r3, [pc, #8]	; (b65ec <hal_spi_acquire+0xc>)
   b65e4:	681b      	ldr	r3, [r3, #0]
   b65e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b65e8:	9301      	str	r3, [sp, #4]
   b65ea:	bd08      	pop	{r3, pc}
   b65ec:	00030230 	.word	0x00030230

000b65f0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b65f0:	b508      	push	{r3, lr}
   b65f2:	4b02      	ldr	r3, [pc, #8]	; (b65fc <hal_spi_release+0xc>)
   b65f4:	681b      	ldr	r3, [r3, #0]
   b65f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b65f8:	9301      	str	r3, [sp, #4]
   b65fa:	bd08      	pop	{r3, pc}
   b65fc:	00030230 	.word	0x00030230

000b6600 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   b6600:	b508      	push	{r3, lr}
   b6602:	4b02      	ldr	r3, [pc, #8]	; (b660c <hal_usart_init+0xc>)
   b6604:	681b      	ldr	r3, [r3, #0]
   b6606:	681b      	ldr	r3, [r3, #0]
   b6608:	9301      	str	r3, [sp, #4]
   b660a:	bd08      	pop	{r3, pc}
   b660c:	0003023c 	.word	0x0003023c

000b6610 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6610:	b508      	push	{r3, lr}
   b6612:	4b02      	ldr	r3, [pc, #8]	; (b661c <hal_usart_write+0xc>)
   b6614:	681b      	ldr	r3, [r3, #0]
   b6616:	68db      	ldr	r3, [r3, #12]
   b6618:	9301      	str	r3, [sp, #4]
   b661a:	bd08      	pop	{r3, pc}
   b661c:	0003023c 	.word	0x0003023c

000b6620 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6620:	b508      	push	{r3, lr}
   b6622:	4b02      	ldr	r3, [pc, #8]	; (b662c <hal_usart_available+0xc>)
   b6624:	681b      	ldr	r3, [r3, #0]
   b6626:	691b      	ldr	r3, [r3, #16]
   b6628:	9301      	str	r3, [sp, #4]
   b662a:	bd08      	pop	{r3, pc}
   b662c:	0003023c 	.word	0x0003023c

000b6630 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6630:	b508      	push	{r3, lr}
   b6632:	4b02      	ldr	r3, [pc, #8]	; (b663c <hal_usart_read+0xc>)
   b6634:	681b      	ldr	r3, [r3, #0]
   b6636:	695b      	ldr	r3, [r3, #20]
   b6638:	9301      	str	r3, [sp, #4]
   b663a:	bd08      	pop	{r3, pc}
   b663c:	0003023c 	.word	0x0003023c

000b6640 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6640:	b508      	push	{r3, lr}
   b6642:	4b02      	ldr	r3, [pc, #8]	; (b664c <hal_usart_peek+0xc>)
   b6644:	681b      	ldr	r3, [r3, #0]
   b6646:	699b      	ldr	r3, [r3, #24]
   b6648:	9301      	str	r3, [sp, #4]
   b664a:	bd08      	pop	{r3, pc}
   b664c:	0003023c 	.word	0x0003023c

000b6650 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6650:	b508      	push	{r3, lr}
   b6652:	4b02      	ldr	r3, [pc, #8]	; (b665c <hal_usart_flush+0xc>)
   b6654:	681b      	ldr	r3, [r3, #0]
   b6656:	69db      	ldr	r3, [r3, #28]
   b6658:	9301      	str	r3, [sp, #4]
   b665a:	bd08      	pop	{r3, pc}
   b665c:	0003023c 	.word	0x0003023c

000b6660 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6660:	b508      	push	{r3, lr}
   b6662:	4b02      	ldr	r3, [pc, #8]	; (b666c <hal_usart_is_enabled+0xc>)
   b6664:	681b      	ldr	r3, [r3, #0]
   b6666:	6a1b      	ldr	r3, [r3, #32]
   b6668:	9301      	str	r3, [sp, #4]
   b666a:	bd08      	pop	{r3, pc}
   b666c:	0003023c 	.word	0x0003023c

000b6670 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6670:	b508      	push	{r3, lr}
   b6672:	4b02      	ldr	r3, [pc, #8]	; (b667c <hal_usart_available_data_for_write+0xc>)
   b6674:	681b      	ldr	r3, [r3, #0]
   b6676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6678:	9301      	str	r3, [sp, #4]
   b667a:	bd08      	pop	{r3, pc}
   b667c:	0003023c 	.word	0x0003023c

000b6680 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6680:	b508      	push	{r3, lr}
   b6682:	4b02      	ldr	r3, [pc, #8]	; (b668c <HAL_USB_USART_Init+0xc>)
   b6684:	681b      	ldr	r3, [r3, #0]
   b6686:	681b      	ldr	r3, [r3, #0]
   b6688:	9301      	str	r3, [sp, #4]
   b668a:	bd08      	pop	{r3, pc}
   b668c:	0003024c 	.word	0x0003024c

000b6690 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6690:	b508      	push	{r3, lr}
   b6692:	4b02      	ldr	r3, [pc, #8]	; (b669c <HAL_USB_USART_Begin+0xc>)
   b6694:	681b      	ldr	r3, [r3, #0]
   b6696:	685b      	ldr	r3, [r3, #4]
   b6698:	9301      	str	r3, [sp, #4]
   b669a:	bd08      	pop	{r3, pc}
   b669c:	0003024c 	.word	0x0003024c

000b66a0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b66a0:	b508      	push	{r3, lr}
   b66a2:	4b02      	ldr	r3, [pc, #8]	; (b66ac <HAL_USB_USART_Available_Data+0xc>)
   b66a4:	681b      	ldr	r3, [r3, #0]
   b66a6:	691b      	ldr	r3, [r3, #16]
   b66a8:	9301      	str	r3, [sp, #4]
   b66aa:	bd08      	pop	{r3, pc}
   b66ac:	0003024c 	.word	0x0003024c

000b66b0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b66b0:	b508      	push	{r3, lr}
   b66b2:	4b02      	ldr	r3, [pc, #8]	; (b66bc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b66b4:	681b      	ldr	r3, [r3, #0]
   b66b6:	695b      	ldr	r3, [r3, #20]
   b66b8:	9301      	str	r3, [sp, #4]
   b66ba:	bd08      	pop	{r3, pc}
   b66bc:	0003024c 	.word	0x0003024c

000b66c0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b66c0:	b508      	push	{r3, lr}
   b66c2:	4b02      	ldr	r3, [pc, #8]	; (b66cc <HAL_USB_USART_Receive_Data+0xc>)
   b66c4:	681b      	ldr	r3, [r3, #0]
   b66c6:	699b      	ldr	r3, [r3, #24]
   b66c8:	9301      	str	r3, [sp, #4]
   b66ca:	bd08      	pop	{r3, pc}
   b66cc:	0003024c 	.word	0x0003024c

000b66d0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b66d0:	b508      	push	{r3, lr}
   b66d2:	4b02      	ldr	r3, [pc, #8]	; (b66dc <HAL_USB_USART_Send_Data+0xc>)
   b66d4:	681b      	ldr	r3, [r3, #0]
   b66d6:	69db      	ldr	r3, [r3, #28]
   b66d8:	9301      	str	r3, [sp, #4]
   b66da:	bd08      	pop	{r3, pc}
   b66dc:	0003024c 	.word	0x0003024c

000b66e0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b66e0:	b508      	push	{r3, lr}
   b66e2:	4b02      	ldr	r3, [pc, #8]	; (b66ec <HAL_USB_USART_Flush_Data+0xc>)
   b66e4:	681b      	ldr	r3, [r3, #0]
   b66e6:	6a1b      	ldr	r3, [r3, #32]
   b66e8:	9301      	str	r3, [sp, #4]
   b66ea:	bd08      	pop	{r3, pc}
   b66ec:	0003024c 	.word	0x0003024c

000b66f0 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b66f0:	b508      	push	{r3, lr}
   b66f2:	4b02      	ldr	r3, [pc, #8]	; (b66fc <HAL_USB_USART_Is_Connected+0xc>)
   b66f4:	681b      	ldr	r3, [r3, #0]
   b66f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b66f8:	9301      	str	r3, [sp, #4]
   b66fa:	bd08      	pop	{r3, pc}
   b66fc:	0003024c 	.word	0x0003024c

000b6700 <wlan_get_credentials>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
   b6700:	b508      	push	{r3, lr}
   b6702:	4b02      	ldr	r3, [pc, #8]	; (b670c <wlan_get_credentials+0xc>)
   b6704:	681b      	ldr	r3, [r3, #0]
   b6706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b6708:	9301      	str	r3, [sp, #4]
   b670a:	bd08      	pop	{r3, pc}
   b670c:	00030274 	.word	0x00030274

000b6710 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6710:	b508      	push	{r3, lr}
   b6712:	4b02      	ldr	r3, [pc, #8]	; (b671c <panic_+0xc>)
   b6714:	681b      	ldr	r3, [r3, #0]
   b6716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6718:	9301      	str	r3, [sp, #4]
   b671a:	bd08      	pop	{r3, pc}
   b671c:	00030260 	.word	0x00030260

000b6720 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6720:	b508      	push	{r3, lr}
   b6722:	4b02      	ldr	r3, [pc, #8]	; (b672c <log_message+0xc>)
   b6724:	681b      	ldr	r3, [r3, #0]
   b6726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6728:	9301      	str	r3, [sp, #4]
   b672a:	bd08      	pop	{r3, pc}
   b672c:	00030260 	.word	0x00030260

000b6730 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6730:	b508      	push	{r3, lr}
   b6732:	4b02      	ldr	r3, [pc, #8]	; (b673c <system_mode+0xc>)
   b6734:	681b      	ldr	r3, [r3, #0]
   b6736:	681b      	ldr	r3, [r3, #0]
   b6738:	9301      	str	r3, [sp, #4]
   b673a:	bd08      	pop	{r3, pc}
   b673c:	00030220 	.word	0x00030220

000b6740 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6740:	b508      	push	{r3, lr}
   b6742:	4b02      	ldr	r3, [pc, #8]	; (b674c <set_system_mode+0xc>)
   b6744:	681b      	ldr	r3, [r3, #0]
   b6746:	685b      	ldr	r3, [r3, #4]
   b6748:	9301      	str	r3, [sp, #4]
   b674a:	bd08      	pop	{r3, pc}
   b674c:	00030220 	.word	0x00030220

000b6750 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6750:	b508      	push	{r3, lr}
   b6752:	4b02      	ldr	r3, [pc, #8]	; (b675c <system_delay_ms+0xc>)
   b6754:	681b      	ldr	r3, [r3, #0]
   b6756:	695b      	ldr	r3, [r3, #20]
   b6758:	9301      	str	r3, [sp, #4]
   b675a:	bd08      	pop	{r3, pc}
   b675c:	00030220 	.word	0x00030220

000b6760 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6760:	b508      	push	{r3, lr}
   b6762:	4b02      	ldr	r3, [pc, #8]	; (b676c <system_thread_set_state+0xc>)
   b6764:	681b      	ldr	r3, [r3, #0]
   b6766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6768:	9301      	str	r3, [sp, #4]
   b676a:	bd08      	pop	{r3, pc}
   b676c:	00030220 	.word	0x00030220

000b6770 <system_internal>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
   b6770:	b508      	push	{r3, lr}
   b6772:	4b02      	ldr	r3, [pc, #8]	; (b677c <system_internal+0xc>)
   b6774:	681b      	ldr	r3, [r3, #0]
   b6776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6778:	9301      	str	r3, [sp, #4]
   b677a:	bd08      	pop	{r3, pc}
   b677c:	00030220 	.word	0x00030220

000b6780 <system_set_flag>:
DYNALIB_FN(14, system, system_set_flag, int(system_flag_t, uint8_t, void*))
   b6780:	b508      	push	{r3, lr}
   b6782:	4b02      	ldr	r3, [pc, #8]	; (b678c <system_set_flag+0xc>)
   b6784:	681b      	ldr	r3, [r3, #0]
   b6786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6788:	9301      	str	r3, [sp, #4]
   b678a:	bd08      	pop	{r3, pc}
   b678c:	00030220 	.word	0x00030220

000b6790 <system_get_flag>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
   b6790:	b508      	push	{r3, lr}
   b6792:	4b02      	ldr	r3, [pc, #8]	; (b679c <system_get_flag+0xc>)
   b6794:	681b      	ldr	r3, [r3, #0]
   b6796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6798:	9301      	str	r3, [sp, #4]
   b679a:	bd08      	pop	{r3, pc}
   b679c:	00030220 	.word	0x00030220

000b67a0 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b67a0:	b508      	push	{r3, lr}
   b67a2:	4b02      	ldr	r3, [pc, #8]	; (b67ac <system_thread_get_state+0xc>)
   b67a4:	681b      	ldr	r3, [r3, #0]
   b67a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b67a8:	9301      	str	r3, [sp, #4]
   b67aa:	bd08      	pop	{r3, pc}
   b67ac:	00030220 	.word	0x00030220

000b67b0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b67b0:	b508      	push	{r3, lr}
   b67b2:	4b03      	ldr	r3, [pc, #12]	; (b67c0 <system_ctrl_set_app_request_handler+0x10>)
   b67b4:	681b      	ldr	r3, [r3, #0]
   b67b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b67ba:	9301      	str	r3, [sp, #4]
   b67bc:	bd08      	pop	{r3, pc}
   b67be:	0000      	.short	0x0000
   b67c0:	00030220 	.word	0x00030220

000b67c4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b67c4:	b508      	push	{r3, lr}
   b67c6:	4b03      	ldr	r3, [pc, #12]	; (b67d4 <system_ctrl_set_result+0x10>)
   b67c8:	681b      	ldr	r3, [r3, #0]
   b67ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b67ce:	9301      	str	r3, [sp, #4]
   b67d0:	bd08      	pop	{r3, pc}
   b67d2:	0000      	.short	0x0000
   b67d4:	00030220 	.word	0x00030220

000b67d8 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b67d8:	b508      	push	{r3, lr}
   b67da:	4b03      	ldr	r3, [pc, #12]	; (b67e8 <system_sleep_ext+0x10>)
   b67dc:	681b      	ldr	r3, [r3, #0]
   b67de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b67e2:	9301      	str	r3, [sp, #4]
   b67e4:	bd08      	pop	{r3, pc}
   b67e6:	0000      	.short	0x0000
   b67e8:	00030220 	.word	0x00030220

000b67ec <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b67ec:	b508      	push	{r3, lr}
   b67ee:	4b03      	ldr	r3, [pc, #12]	; (b67fc <system_reset+0x10>)
   b67f0:	681b      	ldr	r3, [r3, #0]
   b67f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b67f6:	9301      	str	r3, [sp, #4]
   b67f8:	bd08      	pop	{r3, pc}
   b67fa:	0000      	.short	0x0000
   b67fc:	00030220 	.word	0x00030220

000b6800 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6800:	b508      	push	{r3, lr}
   b6802:	4b02      	ldr	r3, [pc, #8]	; (b680c <spark_process+0xc>)
   b6804:	681b      	ldr	r3, [r3, #0]
   b6806:	689b      	ldr	r3, [r3, #8]
   b6808:	9301      	str	r3, [sp, #4]
   b680a:	bd08      	pop	{r3, pc}
   b680c:	00030244 	.word	0x00030244

000b6810 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b6810:	b508      	push	{r3, lr}
   b6812:	4b02      	ldr	r3, [pc, #8]	; (b681c <spark_cloud_flag_connect+0xc>)
   b6814:	681b      	ldr	r3, [r3, #0]
   b6816:	68db      	ldr	r3, [r3, #12]
   b6818:	9301      	str	r3, [sp, #4]
   b681a:	bd08      	pop	{r3, pc}
   b681c:	00030244 	.word	0x00030244

000b6820 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6820:	b508      	push	{r3, lr}
   b6822:	4b02      	ldr	r3, [pc, #8]	; (b682c <spark_cloud_flag_connected+0xc>)
   b6824:	681b      	ldr	r3, [r3, #0]
   b6826:	695b      	ldr	r3, [r3, #20]
   b6828:	9301      	str	r3, [sp, #4]
   b682a:	bd08      	pop	{r3, pc}
   b682c:	00030244 	.word	0x00030244

000b6830 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b6830:	b508      	push	{r3, lr}
   b6832:	4b02      	ldr	r3, [pc, #8]	; (b683c <spark_sync_time+0xc>)
   b6834:	681b      	ldr	r3, [r3, #0]
   b6836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6838:	9301      	str	r3, [sp, #4]
   b683a:	bd08      	pop	{r3, pc}
   b683c:	00030244 	.word	0x00030244

000b6840 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6840:	b508      	push	{r3, lr}
   b6842:	4b02      	ldr	r3, [pc, #8]	; (b684c <spark_sync_time_pending+0xc>)
   b6844:	681b      	ldr	r3, [r3, #0]
   b6846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6848:	9301      	str	r3, [sp, #4]
   b684a:	bd08      	pop	{r3, pc}
   b684c:	00030244 	.word	0x00030244

000b6850 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6850:	b508      	push	{r3, lr}
   b6852:	4b02      	ldr	r3, [pc, #8]	; (b685c <spark_set_random_seed_from_cloud_handler+0xc>)
   b6854:	681b      	ldr	r3, [r3, #0]
   b6856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6858:	9301      	str	r3, [sp, #4]
   b685a:	bd08      	pop	{r3, pc}
   b685c:	00030244 	.word	0x00030244

000b6860 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6860:	b508      	push	{r3, lr}
   b6862:	4b02      	ldr	r3, [pc, #8]	; (b686c <network_connect+0xc>)
   b6864:	681b      	ldr	r3, [r3, #0]
   b6866:	685b      	ldr	r3, [r3, #4]
   b6868:	9301      	str	r3, [sp, #4]
   b686a:	bd08      	pop	{r3, pc}
   b686c:	00030240 	.word	0x00030240

000b6870 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6870:	b508      	push	{r3, lr}
   b6872:	4b02      	ldr	r3, [pc, #8]	; (b687c <network_connecting+0xc>)
   b6874:	681b      	ldr	r3, [r3, #0]
   b6876:	689b      	ldr	r3, [r3, #8]
   b6878:	9301      	str	r3, [sp, #4]
   b687a:	bd08      	pop	{r3, pc}
   b687c:	00030240 	.word	0x00030240

000b6880 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6880:	b508      	push	{r3, lr}
   b6882:	4b02      	ldr	r3, [pc, #8]	; (b688c <network_disconnect+0xc>)
   b6884:	681b      	ldr	r3, [r3, #0]
   b6886:	68db      	ldr	r3, [r3, #12]
   b6888:	9301      	str	r3, [sp, #4]
   b688a:	bd08      	pop	{r3, pc}
   b688c:	00030240 	.word	0x00030240

000b6890 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6890:	b508      	push	{r3, lr}
   b6892:	4b02      	ldr	r3, [pc, #8]	; (b689c <network_ready+0xc>)
   b6894:	681b      	ldr	r3, [r3, #0]
   b6896:	691b      	ldr	r3, [r3, #16]
   b6898:	9301      	str	r3, [sp, #4]
   b689a:	bd08      	pop	{r3, pc}
   b689c:	00030240 	.word	0x00030240

000b68a0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b68a0:	b508      	push	{r3, lr}
   b68a2:	4b02      	ldr	r3, [pc, #8]	; (b68ac <network_on+0xc>)
   b68a4:	681b      	ldr	r3, [r3, #0]
   b68a6:	695b      	ldr	r3, [r3, #20]
   b68a8:	9301      	str	r3, [sp, #4]
   b68aa:	bd08      	pop	{r3, pc}
   b68ac:	00030240 	.word	0x00030240

000b68b0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b68b0:	b508      	push	{r3, lr}
   b68b2:	4b02      	ldr	r3, [pc, #8]	; (b68bc <network_off+0xc>)
   b68b4:	681b      	ldr	r3, [r3, #0]
   b68b6:	699b      	ldr	r3, [r3, #24]
   b68b8:	9301      	str	r3, [sp, #4]
   b68ba:	bd08      	pop	{r3, pc}
   b68bc:	00030240 	.word	0x00030240

000b68c0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b68c0:	b508      	push	{r3, lr}
   b68c2:	4b02      	ldr	r3, [pc, #8]	; (b68cc <network_listen+0xc>)
   b68c4:	681b      	ldr	r3, [r3, #0]
   b68c6:	69db      	ldr	r3, [r3, #28]
   b68c8:	9301      	str	r3, [sp, #4]
   b68ca:	bd08      	pop	{r3, pc}
   b68cc:	00030240 	.word	0x00030240

000b68d0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b68d0:	b508      	push	{r3, lr}
   b68d2:	4b02      	ldr	r3, [pc, #8]	; (b68dc <network_listening+0xc>)
   b68d4:	681b      	ldr	r3, [r3, #0]
   b68d6:	6a1b      	ldr	r3, [r3, #32]
   b68d8:	9301      	str	r3, [sp, #4]
   b68da:	bd08      	pop	{r3, pc}
   b68dc:	00030240 	.word	0x00030240

000b68e0 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   b68e0:	b508      	push	{r3, lr}
   b68e2:	4b02      	ldr	r3, [pc, #8]	; (b68ec <network_has_credentials+0xc>)
   b68e4:	681b      	ldr	r3, [r3, #0]
   b68e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b68e8:	9301      	str	r3, [sp, #4]
   b68ea:	bd08      	pop	{r3, pc}
   b68ec:	00030240 	.word	0x00030240

000b68f0 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b68f0:	b508      	push	{r3, lr}
   b68f2:	4b02      	ldr	r3, [pc, #8]	; (b68fc <network_set_credentials+0xc>)
   b68f4:	681b      	ldr	r3, [r3, #0]
   b68f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b68f8:	9301      	str	r3, [sp, #4]
   b68fa:	bd08      	pop	{r3, pc}
   b68fc:	00030240 	.word	0x00030240

000b6900 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b6900:	b508      	push	{r3, lr}
   b6902:	4b02      	ldr	r3, [pc, #8]	; (b690c <network_clear_credentials+0xc>)
   b6904:	681b      	ldr	r3, [r3, #0]
   b6906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6908:	9301      	str	r3, [sp, #4]
   b690a:	bd08      	pop	{r3, pc}
   b690c:	00030240 	.word	0x00030240

000b6910 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6910:	b508      	push	{r3, lr}
   b6912:	4b02      	ldr	r3, [pc, #8]	; (b691c <network_set_listen_timeout+0xc>)
   b6914:	681b      	ldr	r3, [r3, #0]
   b6916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6918:	9301      	str	r3, [sp, #4]
   b691a:	bd08      	pop	{r3, pc}
   b691c:	00030240 	.word	0x00030240

000b6920 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6920:	b508      	push	{r3, lr}
   b6922:	4b02      	ldr	r3, [pc, #8]	; (b692c <network_get_listen_timeout+0xc>)
   b6924:	681b      	ldr	r3, [r3, #0]
   b6926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6928:	9301      	str	r3, [sp, #4]
   b692a:	bd08      	pop	{r3, pc}
   b692c:	00030240 	.word	0x00030240

000b6930 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6930:	b508      	push	{r3, lr}
   b6932:	4b02      	ldr	r3, [pc, #8]	; (b693c <network_is_on+0xc>)
   b6934:	681b      	ldr	r3, [r3, #0]
   b6936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6938:	9301      	str	r3, [sp, #4]
   b693a:	bd08      	pop	{r3, pc}
   b693c:	00030240 	.word	0x00030240

000b6940 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6940:	b508      	push	{r3, lr}
   b6942:	4b02      	ldr	r3, [pc, #8]	; (b694c <network_is_off+0xc>)
   b6944:	681b      	ldr	r3, [r3, #0]
   b6946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6948:	9301      	str	r3, [sp, #4]
   b694a:	bd08      	pop	{r3, pc}
   b694c:	00030240 	.word	0x00030240

000b6950 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6950:	b508      	push	{r3, lr}
   b6952:	4b02      	ldr	r3, [pc, #8]	; (b695c <malloc+0xc>)
   b6954:	681b      	ldr	r3, [r3, #0]
   b6956:	681b      	ldr	r3, [r3, #0]
   b6958:	9301      	str	r3, [sp, #4]
   b695a:	bd08      	pop	{r3, pc}
   b695c:	0003021c 	.word	0x0003021c

000b6960 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6960:	b508      	push	{r3, lr}
   b6962:	4b02      	ldr	r3, [pc, #8]	; (b696c <free+0xc>)
   b6964:	681b      	ldr	r3, [r3, #0]
   b6966:	685b      	ldr	r3, [r3, #4]
   b6968:	9301      	str	r3, [sp, #4]
   b696a:	bd08      	pop	{r3, pc}
   b696c:	0003021c 	.word	0x0003021c

000b6970 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6970:	b508      	push	{r3, lr}
   b6972:	4b02      	ldr	r3, [pc, #8]	; (b697c <realloc+0xc>)
   b6974:	681b      	ldr	r3, [r3, #0]
   b6976:	689b      	ldr	r3, [r3, #8]
   b6978:	9301      	str	r3, [sp, #4]
   b697a:	bd08      	pop	{r3, pc}
   b697c:	0003021c 	.word	0x0003021c

000b6980 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b6980:	b508      	push	{r3, lr}
   b6982:	4b02      	ldr	r3, [pc, #8]	; (b698c <siprintf+0xc>)
   b6984:	681b      	ldr	r3, [r3, #0]
   b6986:	691b      	ldr	r3, [r3, #16]
   b6988:	9301      	str	r3, [sp, #4]
   b698a:	bd08      	pop	{r3, pc}
   b698c:	0003021c 	.word	0x0003021c

000b6990 <vsnprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6990:	b508      	push	{r3, lr}
   b6992:	4b02      	ldr	r3, [pc, #8]	; (b699c <vsnprintf+0xc>)
   b6994:	681b      	ldr	r3, [r3, #0]
   b6996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6998:	9301      	str	r3, [sp, #4]
   b699a:	bd08      	pop	{r3, pc}
   b699c:	0003021c 	.word	0x0003021c

000b69a0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b69a0:	b508      	push	{r3, lr}
   b69a2:	4b02      	ldr	r3, [pc, #8]	; (b69ac <abort+0xc>)
   b69a4:	681b      	ldr	r3, [r3, #0]
   b69a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b69a8:	9301      	str	r3, [sp, #4]
   b69aa:	bd08      	pop	{r3, pc}
   b69ac:	0003021c 	.word	0x0003021c

000b69b0 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b69b0:	b508      	push	{r3, lr}
   b69b2:	4b02      	ldr	r3, [pc, #8]	; (b69bc <__errno+0xc>)
   b69b4:	681b      	ldr	r3, [r3, #0]
   b69b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b69b8:	9301      	str	r3, [sp, #4]
   b69ba:	bd08      	pop	{r3, pc}
   b69bc:	0003021c 	.word	0x0003021c

000b69c0 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b69c0:	b508      	push	{r3, lr}
   b69c2:	4b02      	ldr	r3, [pc, #8]	; (b69cc <__assert_func+0xc>)
   b69c4:	681b      	ldr	r3, [r3, #0]
   b69c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b69c8:	9301      	str	r3, [sp, #4]
   b69ca:	bd08      	pop	{r3, pc}
   b69cc:	0003021c 	.word	0x0003021c

000b69d0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b69d0:	b508      	push	{r3, lr}
   b69d2:	4b02      	ldr	r3, [pc, #8]	; (b69dc <newlib_impure_ptr_callback+0xc>)
   b69d4:	681b      	ldr	r3, [r3, #0]
   b69d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b69d8:	9301      	str	r3, [sp, #4]
   b69da:	bd08      	pop	{r3, pc}
   b69dc:	0003021c 	.word	0x0003021c

000b69e0 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b69e0:	b508      	push	{r3, lr}
   b69e2:	4b02      	ldr	r3, [pc, #8]	; (b69ec <localtime_r+0xc>)
   b69e4:	681b      	ldr	r3, [r3, #0]
   b69e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b69e8:	9301      	str	r3, [sp, #4]
   b69ea:	bd08      	pop	{r3, pc}
   b69ec:	0003021c 	.word	0x0003021c

000b69f0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b69f0:	2100      	movs	r1, #0
   b69f2:	f7ff bead 	b.w	b6750 <system_delay_ms>

000b69f6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b69f6:	4770      	bx	lr

000b69f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b69f8:	4770      	bx	lr

000b69fa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b69fa:	4770      	bx	lr

000b69fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b69fc:	4770      	bx	lr
	...

000b6a00 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6a00:	4b06      	ldr	r3, [pc, #24]	; (b6a1c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6a02:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6a04:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6a06:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6a0a:	d005      	beq.n	b6a18 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6a0c:	4608      	mov	r0, r1
   b6a0e:	f002 fe9f 	bl	b9750 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6a12:	2800      	cmp	r0, #0
   b6a14:	bf08      	it	eq
   b6a16:	2400      	moveq	r4, #0
      }
   b6a18:	4620      	mov	r0, r4
   b6a1a:	bd10      	pop	{r4, pc}
   b6a1c:	000baacc 	.word	0x000baacc

000b6a20 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6a20:	4b06      	ldr	r3, [pc, #24]	; (b6a3c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6a22:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6a24:	b510      	push	{r4, lr}
   b6a26:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6a2a:	d005      	beq.n	b6a38 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6a2c:	4608      	mov	r0, r1
   b6a2e:	f002 fe8f 	bl	b9750 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6a32:	2800      	cmp	r0, #0
   b6a34:	bf08      	it	eq
   b6a36:	2400      	moveq	r4, #0
      }
   b6a38:	4620      	mov	r0, r4
   b6a3a:	bd10      	pop	{r4, pc}
   b6a3c:	000baacc 	.word	0x000baacc

000b6a40 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6a40:	4b06      	ldr	r3, [pc, #24]	; (b6a5c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6a42:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6a44:	b510      	push	{r4, lr}
   b6a46:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6a4a:	d005      	beq.n	b6a58 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6a4c:	4608      	mov	r0, r1
   b6a4e:	f002 fe7f 	bl	b9750 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6a52:	2800      	cmp	r0, #0
   b6a54:	bf08      	it	eq
   b6a56:	2400      	moveq	r4, #0
      }
   b6a58:	4620      	mov	r0, r4
   b6a5a:	bd10      	pop	{r4, pc}
   b6a5c:	000baacc 	.word	0x000baacc

000b6a60 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6a60:	b510      	push	{r4, lr}
   b6a62:	2168      	movs	r1, #104	; 0x68
   b6a64:	4604      	mov	r4, r0
   b6a66:	f002 fe6a 	bl	b973e <_ZdlPvj>
   b6a6a:	4620      	mov	r0, r4
   b6a6c:	bd10      	pop	{r4, pc}

000b6a6e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6a6e:	b510      	push	{r4, lr}
   b6a70:	2128      	movs	r1, #40	; 0x28
   b6a72:	4604      	mov	r4, r0
   b6a74:	f002 fe63 	bl	b973e <_ZdlPvj>
   b6a78:	4620      	mov	r0, r4
   b6a7a:	bd10      	pop	{r4, pc}

000b6a7c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6a7c:	b510      	push	{r4, lr}
   b6a7e:	2130      	movs	r1, #48	; 0x30
   b6a80:	4604      	mov	r4, r0
   b6a82:	f002 fe5c 	bl	b973e <_ZdlPvj>
   b6a86:	4620      	mov	r0, r4
   b6a88:	bd10      	pop	{r4, pc}

000b6a8a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6a8a:	2168      	movs	r1, #104	; 0x68
   b6a8c:	f002 be57 	b.w	b973e <_ZdlPvj>

000b6a90 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6a90:	2128      	movs	r1, #40	; 0x28
   b6a92:	f002 be54 	b.w	b973e <_ZdlPvj>

000b6a96 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6a96:	2130      	movs	r1, #48	; 0x30
   b6a98:	f002 be51 	b.w	b973e <_ZdlPvj>

000b6a9c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   b6a9c:	b510      	push	{r4, lr}
   b6a9e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   b6aa0:	6800      	ldr	r0, [r0, #0]
   b6aa2:	b108      	cbz	r0, b6aa8 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   b6aa4:	f7ff fc2c 	bl	b6300 <os_mutex_recursive_destroy>
    }
   b6aa8:	4620      	mov	r0, r4
   b6aaa:	bd10      	pop	{r4, pc}

000b6aac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6aae:	2500      	movs	r5, #0
   b6ab0:	1cec      	adds	r4, r5, #3
   b6ab2:	428c      	cmp	r4, r1
   b6ab4:	d80d      	bhi.n	b6ad2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b6ab6:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b6ab8:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b6aba:	5d87      	ldrb	r7, [r0, r6]
   b6abc:	4297      	cmp	r7, r2
   b6abe:	d105      	bne.n	b6acc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6ac0:	4426      	add	r6, r4
   b6ac2:	42b1      	cmp	r1, r6
   b6ac4:	d305      	bcc.n	b6ad2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b6ac6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b6ac8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b6aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b6acc:	3401      	adds	r4, #1
   b6ace:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6ad0:	e7ee      	b.n	b6ab0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b6ad2:	2000      	movs	r0, #0
   b6ad4:	e7f9      	b.n	b6aca <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000b6ad6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6ad6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6ada:	4604      	mov	r4, r0
   b6adc:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   b6ae0:	461e      	mov	r6, r3
   b6ae2:	4689      	mov	r9, r1
   b6ae4:	ab01      	add	r3, sp, #4
   b6ae6:	4690      	mov	r8, r2
   b6ae8:	460a      	mov	r2, r1
   b6aea:	6a01      	ldr	r1, [r0, #32]
   b6aec:	f7ff ffde 	bl	b6aac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   b6af0:	6a25      	ldr	r5, [r4, #32]
   b6af2:	1cb3      	adds	r3, r6, #2
   b6af4:	bb0f      	cbnz	r7, b6b3a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x64>
   b6af6:	b300      	cbz	r0, b6b3a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x64>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   b6af8:	195f      	adds	r7, r3, r5
   b6afa:	1a3f      	subs	r7, r7, r0
   b6afc:	2f1f      	cmp	r7, #31
   b6afe:	d818      	bhi.n	b6b32 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b6b00:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b6b04:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b6b08:	eba5 0209 	sub.w	r2, r5, r9
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b6b0c:	eb06 030a 	add.w	r3, r6, sl
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b6b10:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b6b12:	4448      	add	r0, r9
   b6b14:	1821      	adds	r1, r4, r0
   b6b16:	b292      	uxth	r2, r2
   b6b18:	18e0      	adds	r0, r4, r3
   b6b1a:	f003 f9d9 	bl	b9ed0 <memmove>
            selfData_[offset] = len + 1;
   b6b1e:	1c73      	adds	r3, r6, #1
   b6b20:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   b6b24:	4632      	mov	r2, r6
   b6b26:	4641      	mov	r1, r8
   b6b28:	eb04 000a 	add.w	r0, r4, sl
   b6b2c:	f003 f9c2 	bl	b9eb4 <memcpy>
            selfLen_ = staLen + len + 2;
   b6b30:	6227      	str	r7, [r4, #32]
}
   b6b32:	6a20      	ldr	r0, [r4, #32]
   b6b34:	b002      	add	sp, #8
   b6b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   b6b3a:	442b      	add	r3, r5
   b6b3c:	2b1f      	cmp	r3, #31
   b6b3e:	d8f8      	bhi.n	b6b32 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>
        selfData_[selfLen_++] = len + 1;
   b6b40:	1c73      	adds	r3, r6, #1
   b6b42:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   b6b44:	1ca8      	adds	r0, r5, #2
   b6b46:	4425      	add	r5, r4
   b6b48:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   b6b4a:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   b6b4c:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   b6b50:	4641      	mov	r1, r8
   b6b52:	4420      	add	r0, r4
   b6b54:	f003 f9ae 	bl	b9eb4 <memcpy>
        selfLen_ += len;
   b6b58:	6a23      	ldr	r3, [r4, #32]
   b6b5a:	4433      	add	r3, r6
   b6b5c:	6223      	str	r3, [r4, #32]
   b6b5e:	e7e8      	b.n	b6b32 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>

000b6b60 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b6b60:	4a02      	ldr	r2, [pc, #8]	; (b6b6c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b6b62:	2100      	movs	r1, #0
   b6b64:	200a      	movs	r0, #10
   b6b66:	f7ff bdd3 	b.w	b6710 <panic_>
   b6b6a:	bf00      	nop
   b6b6c:	000b6341 	.word	0x000b6341

000b6b70 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6b70:	4603      	mov	r3, r0
   b6b72:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b6b74:	681b      	ldr	r3, [r3, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6b76:	e9d3 2100 	ldrd	r2, r1, [r3]
   b6b7a:	4710      	bx	r2

000b6b7c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6b7c:	b430      	push	{r4, r5}
   b6b7e:	460d      	mov	r5, r1
   b6b80:	4611      	mov	r1, r2
   b6b82:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b6b84:	6803      	ldr	r3, [r0, #0]
   b6b86:	6809      	ldr	r1, [r1, #0]
   b6b88:	6828      	ldr	r0, [r5, #0]
   b6b8a:	e9d3 4300 	ldrd	r4, r3, [r3]
   b6b8e:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b6b90:	bc30      	pop	{r4, r5}
   b6b92:	4760      	bx	ip

000b6b94 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b6b94:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6b96:	b538      	push	{r3, r4, r5, lr}
   b6b98:	4604      	mov	r4, r0
	switch (__op)
   b6b9a:	d102      	bne.n	b6ba2 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6b9c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6b9e:	6023      	str	r3, [r4, #0]
	}
   b6ba0:	e003      	b.n	b6baa <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b6ba2:	2a02      	cmp	r2, #2
   b6ba4:	d003      	beq.n	b6bae <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b6ba6:	2a03      	cmp	r2, #3
   b6ba8:	d00d      	beq.n	b6bc6 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b6baa:	2000      	movs	r0, #0
   b6bac:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6bae:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6bb0:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6bb2:	f7fd fa70 	bl	b4096 <_Znwj>
   b6bb6:	4603      	mov	r3, r0
   b6bb8:	2800      	cmp	r0, #0
   b6bba:	d0f0      	beq.n	b6b9e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b6bbc:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6bc0:	e883 0003 	stmia.w	r3, {r0, r1}
   b6bc4:	e7eb      	b.n	b6b9e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6bc6:	6800      	ldr	r0, [r0, #0]
   b6bc8:	2800      	cmp	r0, #0
   b6bca:	d0ee      	beq.n	b6baa <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b6bcc:	2108      	movs	r1, #8
   b6bce:	f002 fdb6 	bl	b973e <_ZdlPvj>
   b6bd2:	e7ea      	b.n	b6baa <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b6bd4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b6bd4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6bd6:	b538      	push	{r3, r4, r5, lr}
   b6bd8:	4604      	mov	r4, r0
	switch (__op)
   b6bda:	d102      	bne.n	b6be2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6bdc:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6bde:	6023      	str	r3, [r4, #0]
	}
   b6be0:	e003      	b.n	b6bea <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b6be2:	2a02      	cmp	r2, #2
   b6be4:	d003      	beq.n	b6bee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b6be6:	2a03      	cmp	r2, #3
   b6be8:	d00d      	beq.n	b6c06 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b6bea:	2000      	movs	r0, #0
   b6bec:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6bee:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6bf0:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6bf2:	f7fd fa50 	bl	b4096 <_Znwj>
   b6bf6:	4603      	mov	r3, r0
   b6bf8:	2800      	cmp	r0, #0
   b6bfa:	d0f0      	beq.n	b6bde <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b6bfc:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6c00:	e883 0003 	stmia.w	r3, {r0, r1}
   b6c04:	e7eb      	b.n	b6bde <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6c06:	6800      	ldr	r0, [r0, #0]
   b6c08:	2800      	cmp	r0, #0
   b6c0a:	d0ee      	beq.n	b6bea <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b6c0c:	2108      	movs	r1, #8
   b6c0e:	f002 fd96 	bl	b973e <_ZdlPvj>
   b6c12:	e7ea      	b.n	b6bea <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b6c14 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b6c14:	b510      	push	{r4, lr}
      if (_M_manager)
   b6c16:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b6c18:	4604      	mov	r4, r0
      if (_M_manager)
   b6c1a:	b113      	cbz	r3, b6c22 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6c1c:	2203      	movs	r2, #3
   b6c1e:	4601      	mov	r1, r0
   b6c20:	4798      	blx	r3
    }
   b6c22:	4620      	mov	r0, r4
   b6c24:	bd10      	pop	{r4, pc}

000b6c26 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6c26:	b510      	push	{r4, lr}
   b6c28:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b6c2a:	3058      	adds	r0, #88	; 0x58
   b6c2c:	f7ff fff2 	bl	b6c14 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b6c30:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b6c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6c38:	f001 bc72 	b.w	b8520 <_ZN6StringD1Ev>

000b6c3c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6c3c:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6c3e:	6843      	ldr	r3, [r0, #4]
   b6c40:	3b01      	subs	r3, #1
    {
   b6c42:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6c44:	6043      	str	r3, [r0, #4]
   b6c46:	b963      	cbnz	r3, b6c62 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6c48:	6803      	ldr	r3, [r0, #0]
   b6c4a:	689b      	ldr	r3, [r3, #8]
   b6c4c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6c4e:	68a3      	ldr	r3, [r4, #8]
   b6c50:	3b01      	subs	r3, #1
   b6c52:	60a3      	str	r3, [r4, #8]
   b6c54:	b92b      	cbnz	r3, b6c62 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6c56:	6823      	ldr	r3, [r4, #0]
   b6c58:	4620      	mov	r0, r4
   b6c5a:	68db      	ldr	r3, [r3, #12]
    }
   b6c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6c60:	4718      	bx	r3
    }
   b6c62:	bd10      	pop	{r4, pc}

000b6c64 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b6c64:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6c68:	b2da      	uxtb	r2, r3
   b6c6a:	2a09      	cmp	r2, #9
   b6c6c:	d801      	bhi.n	b6c72 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b6c6e:	4618      	mov	r0, r3
   b6c70:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b6c72:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b6c76:	2b05      	cmp	r3, #5
   b6c78:	d801      	bhi.n	b6c7e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b6c7a:	3857      	subs	r0, #87	; 0x57
   b6c7c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b6c7e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b6c82:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b6c84:	bf94      	ite	ls
   b6c86:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b6c88:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b6c8c:	4770      	bx	lr
	...

000b6c90 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b6c90:	b510      	push	{r4, lr}
            locked_(false) {
   b6c92:	2300      	movs	r3, #0
   b6c94:	7003      	strb	r3, [r0, #0]
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b6c96:	4b04      	ldr	r3, [pc, #16]	; (b6ca8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b6c98:	4604      	mov	r4, r0
   b6c9a:	6818      	ldr	r0, [r3, #0]
   b6c9c:	f7ff fb38 	bl	b6310 <os_mutex_recursive_lock>
        locked_ = true;
   b6ca0:	2301      	movs	r3, #1
   b6ca2:	7023      	strb	r3, [r4, #0]
    }
   b6ca4:	4620      	mov	r0, r4
   b6ca6:	bd10      	pop	{r4, pc}
   b6ca8:	2003e638 	.word	0x2003e638

000b6cac <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b6cac:	b510      	push	{r4, lr}
        if (locked_) {
   b6cae:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b6cb0:	4604      	mov	r4, r0
        if (locked_) {
   b6cb2:	b11b      	cbz	r3, b6cbc <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6cb4:	4b02      	ldr	r3, [pc, #8]	; (b6cc0 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6cb6:	6818      	ldr	r0, [r3, #0]
   b6cb8:	f7ff fb32 	bl	b6320 <os_mutex_recursive_unlock>
    }
   b6cbc:	4620      	mov	r0, r4
   b6cbe:	bd10      	pop	{r4, pc}
   b6cc0:	2003e638 	.word	0x2003e638

000b6cc4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b6cc4:	b082      	sub	sp, #8
   b6cc6:	4603      	mov	r3, r0
    address_ = addr;
   b6cc8:	6808      	ldr	r0, [r1, #0]
   b6cca:	6849      	ldr	r1, [r1, #4]
   b6ccc:	466a      	mov	r2, sp
   b6cce:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b6cd0:	466a      	mov	r2, sp
   b6cd2:	ca03      	ldmia	r2!, {r0, r1}
   b6cd4:	6018      	str	r0, [r3, #0]
}
   b6cd6:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6cd8:	6059      	str	r1, [r3, #4]
}
   b6cda:	b002      	add	sp, #8
   b6cdc:	4770      	bx	lr

000b6cde <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b6cde:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b6ce0:	7982      	ldrb	r2, [r0, #6]
   b6ce2:	798b      	ldrb	r3, [r1, #6]
   b6ce4:	429a      	cmp	r2, r3
   b6ce6:	d106      	bne.n	b6cf6 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6ce8:	2206      	movs	r2, #6
   b6cea:	f003 f8d3 	bl	b9e94 <memcmp>
   b6cee:	fab0 f080 	clz	r0, r0
   b6cf2:	0940      	lsrs	r0, r0, #5
}
   b6cf4:	bd08      	pop	{r3, pc}
    return false;
   b6cf6:	2000      	movs	r0, #0
   b6cf8:	e7fc      	b.n	b6cf4 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b6cfa <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b6cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6cfe:	6003      	str	r3, [r0, #0]
   b6d00:	8083      	strh	r3, [r0, #4]
}
   b6d02:	2000      	movs	r0, #0
   b6d04:	4770      	bx	lr

000b6d06 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b6d06:	b508      	push	{r3, lr}
   b6d08:	4602      	mov	r2, r0
        : address_{} {
   b6d0a:	2100      	movs	r1, #0
   b6d0c:	6001      	str	r1, [r0, #0]
   b6d0e:	6041      	str	r1, [r0, #4]
    clear();
   b6d10:	f7ff fff3 	bl	b6cfa <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b6d14:	7191      	strb	r1, [r2, #6]
}
   b6d16:	4610      	mov	r0, r2
   b6d18:	bd08      	pop	{r3, pc}
	...

000b6d1c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b6d1c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b6d1e:	2301      	movs	r3, #1
   b6d20:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6d22:	4b05      	ldr	r3, [pc, #20]	; (b6d38 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b6d24:	4602      	mov	r2, r0
   b6d26:	f103 0110 	add.w	r1, r3, #16
   b6d2a:	f853 4b04 	ldr.w	r4, [r3], #4
   b6d2e:	f842 4b04 	str.w	r4, [r2], #4
   b6d32:	428b      	cmp	r3, r1
   b6d34:	d1f9      	bne.n	b6d2a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b6d36:	bd10      	pop	{r4, pc}
   b6d38:	000baada 	.word	0x000baada

000b6d3c <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   b6d3c:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   b6d3e:	690b      	ldr	r3, [r1, #16]
   b6d40:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b6d42:	f101 0210 	add.w	r2, r1, #16
   b6d46:	4603      	mov	r3, r0
   b6d48:	f851 4b04 	ldr.w	r4, [r1], #4
   b6d4c:	f843 4b04 	str.w	r4, [r3], #4
   b6d50:	4291      	cmp	r1, r2
   b6d52:	d1f9      	bne.n	b6d48 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   b6d54:	bd10      	pop	{r4, pc}

000b6d56 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6d56:	b510      	push	{r4, lr}
    if (uuid128) {
   b6d58:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6d5a:	4604      	mov	r4, r0
    if (uuid128) {
   b6d5c:	b1b1      	cbz	r1, b6d8c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b6d5e:	2a01      	cmp	r2, #1
   b6d60:	f101 0210 	add.w	r2, r1, #16
   b6d64:	d10a      	bne.n	b6d7c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b6d66:	4601      	mov	r1, r0
   b6d68:	f853 0b04 	ldr.w	r0, [r3], #4
   b6d6c:	f841 0b04 	str.w	r0, [r1], #4
   b6d70:	4293      	cmp	r3, r2
   b6d72:	d1f9      	bne.n	b6d68 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b6d74:	2301      	movs	r3, #1
   b6d76:	6123      	str	r3, [r4, #16]
}
   b6d78:	4620      	mov	r0, r4
   b6d7a:	bd10      	pop	{r4, pc}
   b6d7c:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b6d7e:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b6d82:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b6d86:	429a      	cmp	r2, r3
   b6d88:	d1f9      	bne.n	b6d7e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b6d8a:	e7f3      	b.n	b6d74 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b6d8c:	2210      	movs	r2, #16
   b6d8e:	f003 f8b9 	bl	b9f04 <memset>
   b6d92:	e7f1      	b.n	b6d78 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b6d94 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b6d94:	b538      	push	{r3, r4, r5, lr}
   b6d96:	4604      	mov	r4, r0
   b6d98:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b6d9a:	461a      	mov	r2, r3
   b6d9c:	f7ff ffdb 	bl	b6d56 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b6da0:	81a5      	strh	r5, [r4, #12]
}
   b6da2:	4620      	mov	r0, r4
   b6da4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6da8 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b6da8:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b6daa:	6902      	ldr	r2, [r0, #16]
   b6dac:	b922      	cbnz	r2, b6db8 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b6dae:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6db0:	3800      	subs	r0, #0
   b6db2:	bf18      	it	ne
   b6db4:	2001      	movne	r0, #1
}
   b6db6:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6db8:	4902      	ldr	r1, [pc, #8]	; (b6dc4 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b6dba:	2210      	movs	r2, #16
   b6dbc:	f003 f86a 	bl	b9e94 <memcmp>
   b6dc0:	e7f6      	b.n	b6db0 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b6dc2:	bf00      	nop
   b6dc4:	000baafa 	.word	0x000baafa

000b6dc8 <_ZNK8particle7BleUuid4typeEv>:
}
   b6dc8:	6900      	ldr	r0, [r0, #16]
   b6dca:	4770      	bx	lr

000b6dcc <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b6dcc:	b538      	push	{r3, r4, r5, lr}
   b6dce:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b6dd0:	2214      	movs	r2, #20
   b6dd2:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b6dd4:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b6dd6:	f003 f895 	bl	b9f04 <memset>
    if (type_ == BleUuidType::SHORT) {
   b6dda:	6923      	ldr	r3, [r4, #16]
   b6ddc:	b91b      	cbnz	r3, b6de6 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b6dde:	89a3      	ldrh	r3, [r4, #12]
   b6de0:	802b      	strh	r3, [r5, #0]
}
   b6de2:	4628      	mov	r0, r5
   b6de4:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b6de6:	2301      	movs	r3, #1
   b6de8:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b6dea:	4621      	mov	r1, r4
   b6dec:	462b      	mov	r3, r5
   b6dee:	f104 0210 	add.w	r2, r4, #16
   b6df2:	f851 0b04 	ldr.w	r0, [r1], #4
   b6df6:	f843 0b04 	str.w	r0, [r3], #4
   b6dfa:	4291      	cmp	r1, r2
   b6dfc:	d1f9      	bne.n	b6df2 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b6dfe:	e7f0      	b.n	b6de2 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b6e00 <_ZNK8particle7BleUuid7shortedEv>:
}
   b6e00:	8980      	ldrh	r0, [r0, #12]
   b6e02:	4770      	bx	lr

000b6e04 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b6e04:	4770      	bx	lr

000b6e06 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b6e06:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6e08:	6902      	ldr	r2, [r0, #16]
   b6e0a:	690b      	ldr	r3, [r1, #16]
   b6e0c:	429a      	cmp	r2, r3
   b6e0e:	d106      	bne.n	b6e1e <_ZNK8particle7BleUuideqERKS0_+0x18>
   b6e10:	2210      	movs	r2, #16
   b6e12:	f003 f83f 	bl	b9e94 <memcmp>
   b6e16:	fab0 f080 	clz	r0, r0
   b6e1a:	0940      	lsrs	r0, r0, #5
}
   b6e1c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6e1e:	2000      	movs	r0, #0
   b6e20:	e7fc      	b.n	b6e1c <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b6e24 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b6e24:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b6e26:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b6e2a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6e2c:	4b34      	ldr	r3, [pc, #208]	; (b6f00 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b6e2e:	460c      	mov	r4, r1
   b6e30:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6e32:	4602      	mov	r2, r0
   b6e34:	f103 0110 	add.w	r1, r3, #16
   b6e38:	f853 0b04 	ldr.w	r0, [r3], #4
   b6e3c:	f842 0b04 	str.w	r0, [r2], #4
   b6e40:	428b      	cmp	r3, r1
   b6e42:	d1f9      	bne.n	b6e38 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b6e44:	b344      	cbz	r4, b6e98 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b6e46:	2124      	movs	r1, #36	; 0x24
   b6e48:	4620      	mov	r0, r4
   b6e4a:	f003 f8be 	bl	b9fca <strnlen>
   b6e4e:	2804      	cmp	r0, #4
   b6e50:	f04f 0500 	mov.w	r5, #0
   b6e54:	d123      	bne.n	b6e9e <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b6e56:	f8ad 5004 	strh.w	r5, [sp, #4]
   b6e5a:	af01      	add	r7, sp, #4
   b6e5c:	1ca5      	adds	r5, r4, #2
   b6e5e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b6e60:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b6e64:	f7ff fefe 	bl	b6c64 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b6e68:	f1b0 0800 	subs.w	r8, r0, #0
   b6e6c:	db12      	blt.n	b6e94 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b6e6e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b6e72:	f7ff fef7 	bl	b6c64 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b6e76:	2800      	cmp	r0, #0
   b6e78:	db0c      	blt.n	b6e94 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b6e7a:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6e7c:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b6e80:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6e82:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b6e86:	d1eb      	bne.n	b6e60 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b6e88:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b6e8c:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b6e8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6e92:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b6e94:	2300      	movs	r3, #0
   b6e96:	6133      	str	r3, [r6, #16]
}
   b6e98:	b002      	add	sp, #8
   b6e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b6e9e:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6ea2:	2124      	movs	r1, #36	; 0x24
   b6ea4:	4620      	mov	r0, r4
   b6ea6:	f003 f890 	bl	b9fca <strnlen>
   b6eaa:	42a8      	cmp	r0, r5
   b6eac:	d807      	bhi.n	b6ebe <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b6eae:	4642      	mov	r2, r8
   b6eb0:	2100      	movs	r1, #0
   b6eb2:	4630      	mov	r0, r6
}
   b6eb4:	b002      	add	sp, #8
   b6eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b6eba:	f003 b823 	b.w	b9f04 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6ebe:	f1b8 0f00 	cmp.w	r8, #0
   b6ec2:	d0e9      	beq.n	b6e98 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b6ec4:	5d60      	ldrb	r0, [r4, r5]
   b6ec6:	f7ff fecd 	bl	b6c64 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b6eca:	0603      	lsls	r3, r0, #24
   b6ecc:	d415      	bmi.n	b6efa <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b6ece:	0100      	lsls	r0, r0, #4
   b6ed0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6ed4:	b2c7      	uxtb	r7, r0
   b6ed6:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b6eda:	2124      	movs	r1, #36	; 0x24
   b6edc:	4620      	mov	r0, r4
   b6ede:	f003 f874 	bl	b9fca <strnlen>
   b6ee2:	3501      	adds	r5, #1
   b6ee4:	42a8      	cmp	r0, r5
   b6ee6:	d908      	bls.n	b6efa <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b6ee8:	5d60      	ldrb	r0, [r4, r5]
   b6eea:	f7ff febb 	bl	b6c64 <_ZN8particle11hexToNibbleEc>
   b6eee:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b6ef0:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b6ef2:	bfa4      	itt	ge
   b6ef4:	4338      	orrge	r0, r7
   b6ef6:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6efa:	3501      	adds	r5, #1
   b6efc:	e7d1      	b.n	b6ea2 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b6efe:	bf00      	nop
   b6f00:	000baada 	.word	0x000baada

000b6f04 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b6f04:	b513      	push	{r0, r1, r4, lr}
   b6f06:	4604      	mov	r4, r0
   b6f08:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b6f0a:	f7ff ff07 	bl	b6d1c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b6f0e:	4620      	mov	r0, r4
   b6f10:	9901      	ldr	r1, [sp, #4]
   b6f12:	f7ff ff87 	bl	b6e24 <_ZN8particle7BleUuid9constructEPKc>
}
   b6f16:	4620      	mov	r0, r4
   b6f18:	b002      	add	sp, #8
   b6f1a:	bd10      	pop	{r4, pc}

000b6f1c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6f1c:	b430      	push	{r4, r5}
   b6f1e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b6f22:	b11a      	cbz	r2, b6f2c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b6f24:	9502      	str	r5, [sp, #8]
}
   b6f26:	bc30      	pop	{r4, r5}
   b6f28:	f7ff bdd5 	b.w	b6ad6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfLen_;
   b6f2c:	6a00      	ldr	r0, [r0, #32]
}
   b6f2e:	bc30      	pop	{r4, r5}
   b6f30:	4770      	bx	lr

000b6f32 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b6f32:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6f34:	4604      	mov	r4, r0
          selfLen_(0) {
   b6f36:	221f      	movs	r2, #31
   b6f38:	2100      	movs	r1, #0
   b6f3a:	f002 ffe3 	bl	b9f04 <memset>
   b6f3e:	2300      	movs	r3, #0
   b6f40:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6f42:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6f44:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6f46:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6f48:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6f4c:	4619      	mov	r1, r3
   b6f4e:	f10d 020f 	add.w	r2, sp, #15
   b6f52:	4620      	mov	r0, r4
   b6f54:	f7ff ffe2 	bl	b6f1c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b6f58:	4620      	mov	r0, r4
   b6f5a:	b004      	add	sp, #16
   b6f5c:	bd10      	pop	{r4, pc}

000b6f5e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6f5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   b6f60:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6f62:	460e      	mov	r6, r1
   b6f64:	ab01      	add	r3, sp, #4
   b6f66:	6a01      	ldr	r1, [r0, #32]
   b6f68:	4604      	mov	r4, r0
   b6f6a:	f7ff fd9f 	bl	b6aac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b6f6e:	4605      	mov	r5, r0
   b6f70:	b178      	cbz	r0, b6f92 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   b6f72:	9801      	ldr	r0, [sp, #4]
   b6f74:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   b6f76:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   b6f78:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   b6f7a:	4421      	add	r1, r4
   b6f7c:	1b52      	subs	r2, r2, r5
   b6f7e:	4420      	add	r0, r4
   b6f80:	f002 ff98 	bl	b9eb4 <memcpy>
        selfLen_ -= len;
   b6f84:	6a20      	ldr	r0, [r4, #32]
   b6f86:	1b40      	subs	r0, r0, r5
   b6f88:	6220      	str	r0, [r4, #32]
        remove(type);
   b6f8a:	4631      	mov	r1, r6
   b6f8c:	4620      	mov	r0, r4
   b6f8e:	f7ff ffe6 	bl	b6f5e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b6f92:	b002      	add	sp, #8
   b6f94:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6f98 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b6f98:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b6f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6f9e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b6fa0:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b6fa2:	8043      	strh	r3, [r0, #2]
   b6fa4:	220e      	movs	r2, #14
   b6fa6:	4629      	mov	r1, r5
   b6fa8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b6faa:	7105      	strb	r5, [r0, #4]
   b6fac:	3006      	adds	r0, #6
   b6fae:	f002 ffa9 	bl	b9f04 <memset>
   b6fb2:	f104 0014 	add.w	r0, r4, #20
   b6fb6:	f7ff feb1 	bl	b6d1c <_ZN8particle7BleUuidC1Ev>
   b6fba:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6fbe:	f7ff fead 	bl	b6d1c <_ZN8particle7BleUuidC1Ev>
   b6fc2:	4904      	ldr	r1, [pc, #16]	; (b6fd4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b6fc4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6fc8:	f001 faf5 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6fcc:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b6fce:	4620      	mov	r0, r4
   b6fd0:	bd38      	pop	{r3, r4, r5, pc}
   b6fd2:	bf00      	nop
   b6fd4:	000ba4c7 	.word	0x000ba4c7

000b6fd8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b6fd8:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b6fda:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b6fde:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b6fe2:	4293      	cmp	r3, r2
   b6fe4:	4618      	mov	r0, r3
   b6fe6:	d006      	beq.n	b6ff6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b6fe8:	6804      	ldr	r4, [r0, #0]
   b6fea:	8824      	ldrh	r4, [r4, #0]
   b6fec:	428c      	cmp	r4, r1
   b6fee:	f103 0308 	add.w	r3, r3, #8
   b6ff2:	d1f6      	bne.n	b6fe2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b6ff4:	bd10      	pop	{r4, pc}
        return nullptr;
   b6ff6:	2000      	movs	r0, #0
   b6ff8:	e7fc      	b.n	b6ff4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b6ffc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b6ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6ffe:	4606      	mov	r6, r0
   b7000:	b085      	sub	sp, #20
   b7002:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b7004:	460d      	mov	r5, r1
   b7006:	2900      	cmp	r1, #0
   b7008:	d050      	beq.n	b70ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b700a:	2a00      	cmp	r2, #0
   b700c:	d04e      	beq.n	b70ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b700e:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b7010:	7823      	ldrb	r3, [r4, #0]
   b7012:	2af4      	cmp	r2, #244	; 0xf4
   b7014:	bf28      	it	cs
   b7016:	22f4      	movcs	r2, #244	; 0xf4
   b7018:	b343      	cbz	r3, b706c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b701a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b701c:	0798      	lsls	r0, r3, #30
   b701e:	d509      	bpl.n	b7034 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b7020:	89a0      	ldrh	r0, [r4, #12]
   b7022:	9203      	str	r2, [sp, #12]
   b7024:	2300      	movs	r3, #0
   b7026:	f7ff f8f5 	bl	b6214 <hal_ble_gatt_server_set_characteristic_value>
   b702a:	2800      	cmp	r0, #0
   b702c:	9a03      	ldr	r2, [sp, #12]
   b702e:	da03      	bge.n	b7038 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b7030:	b005      	add	sp, #20
   b7032:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b7034:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7038:	6834      	ldr	r4, [r6, #0]
   b703a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b703c:	06d9      	lsls	r1, r3, #27
   b703e:	d509      	bpl.n	b7054 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b7040:	2f01      	cmp	r7, #1
   b7042:	d007      	beq.n	b7054 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7044:	89a0      	ldrh	r0, [r4, #12]
   b7046:	2300      	movs	r3, #0
   b7048:	4629      	mov	r1, r5
}
   b704a:	b005      	add	sp, #20
   b704c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7050:	f7ff b912 	b.w	b6278 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b7054:	069b      	lsls	r3, r3, #26
   b7056:	d5eb      	bpl.n	b7030 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7058:	2f02      	cmp	r7, #2
   b705a:	d0e9      	beq.n	b7030 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b705c:	89a0      	ldrh	r0, [r4, #12]
   b705e:	2300      	movs	r3, #0
   b7060:	4629      	mov	r1, r5
}
   b7062:	b005      	add	sp, #20
   b7064:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7068:	f7ff b910 	b.w	b628c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b706c:	8860      	ldrh	r0, [r4, #2]
   b706e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7072:	4288      	cmp	r0, r1
   b7074:	d01c      	beq.n	b70b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b7076:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b7078:	074e      	lsls	r6, r1, #29
   b707a:	d501      	bpl.n	b7080 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b707c:	2f01      	cmp	r7, #1
   b707e:	d104      	bne.n	b708a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7080:	070b      	lsls	r3, r1, #28
   b7082:	d409      	bmi.n	b7098 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b7084:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7088:	e7d2      	b.n	b7030 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b708a:	89a1      	ldrh	r1, [r4, #12]
   b708c:	9300      	str	r3, [sp, #0]
   b708e:	4613      	mov	r3, r2
   b7090:	462a      	mov	r2, r5
   b7092:	f7ff f8d3 	bl	b623c <hal_ble_gatt_client_write_without_response>
   b7096:	e7cb      	b.n	b7030 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7098:	2f02      	cmp	r7, #2
   b709a:	d0f3      	beq.n	b7084 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b709c:	2300      	movs	r3, #0
   b709e:	89a1      	ldrh	r1, [r4, #12]
   b70a0:	9300      	str	r3, [sp, #0]
   b70a2:	4613      	mov	r3, r2
   b70a4:	462a      	mov	r2, r5
   b70a6:	f7ff f8bf 	bl	b6228 <hal_ble_gatt_client_write_with_response>
   b70aa:	e7c1      	b.n	b7030 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b70ac:	4802      	ldr	r0, [pc, #8]	; (b70b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b70ae:	e7bf      	b.n	b7030 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b70b0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b70b4:	e7bc      	b.n	b7030 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b70b6:	bf00      	nop
   b70b8:	fffffef2 	.word	0xfffffef2

000b70bc <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   b70bc:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   b70be:	688a      	ldr	r2, [r1, #8]
   b70c0:	6809      	ldr	r1, [r1, #0]
   b70c2:	f7ff bf9b 	b.w	b6ffc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b70c6 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b70c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b70c8:	460c      	mov	r4, r1
   b70ca:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b70cc:	21f4      	movs	r1, #244	; 0xf4
   b70ce:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b70d0:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b70d2:	f002 ff7a 	bl	b9fca <strnlen>
   b70d6:	9b01      	ldr	r3, [sp, #4]
   b70d8:	4602      	mov	r2, r0
   b70da:	4621      	mov	r1, r4
   b70dc:	4628      	mov	r0, r5
}
   b70de:	b003      	add	sp, #12
   b70e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b70e4:	f7ff bf8a 	b.w	b6ffc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b70e8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b70e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b70ec:	2600      	movs	r6, #0
   b70ee:	6006      	str	r6, [r0, #0]
   b70f0:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b70f2:	2028      	movs	r0, #40	; 0x28
   b70f4:	460c      	mov	r4, r1
   b70f6:	f7fc ffce 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b70fa:	1e05      	subs	r5, r0, #0
   b70fc:	f105 080c 	add.w	r8, r5, #12
   b7100:	d00f      	beq.n	b7122 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b7102:	2301      	movs	r3, #1
   b7104:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7108:	4b08      	ldr	r3, [pc, #32]	; (b712c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b710a:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b710c:	4640      	mov	r0, r8
   b710e:	f7ff fe05 	bl	b6d1c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b7112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b7114:	622e      	str	r6, [r5, #32]
   b7116:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b711a:	4646      	mov	r6, r8
   b711c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b711e:	6823      	ldr	r3, [r4, #0]
   b7120:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b7122:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b7126:	4638      	mov	r0, r7
   b7128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b712c:	000baa9c 	.word	0x000baa9c

000b7130 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b7130:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7132:	2500      	movs	r5, #0
   b7134:	6005      	str	r5, [r0, #0]
   b7136:	4606      	mov	r6, r0
   b7138:	2030      	movs	r0, #48	; 0x30
   b713a:	f7fc ffac 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b713e:	4604      	mov	r4, r0
   b7140:	b188      	cbz	r0, b7166 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b7142:	2301      	movs	r3, #1
   b7144:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b7148:	4b09      	ldr	r3, [pc, #36]	; (b7170 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b714a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b714c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7150:	8183      	strh	r3, [r0, #12]
   b7152:	300e      	adds	r0, #14
   b7154:	f7ff fdd7 	bl	b6d06 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b7158:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b715c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b7160:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b7164:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b7166:	6074      	str	r4, [r6, #4]
   b7168:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b716a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b716c:	4630      	mov	r0, r6
   b716e:	bd70      	pop	{r4, r5, r6, pc}
   b7170:	000baab8 	.word	0x000baab8

000b7174 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b7174:	b513      	push	{r0, r1, r4, lr}
   b7176:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7178:	a801      	add	r0, sp, #4
   b717a:	f7ff fd89 	bl	b6c90 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b717e:	6823      	ldr	r3, [r4, #0]
   b7180:	881c      	ldrh	r4, [r3, #0]
   b7182:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7186:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b7188:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b718a:	bf18      	it	ne
   b718c:	2401      	movne	r4, #1
    WiringBleLock lk;
   b718e:	f7ff fd8d 	bl	b6cac <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7192:	4620      	mov	r0, r4
   b7194:	b002      	add	sp, #8
   b7196:	bd10      	pop	{r4, pc}

000b7198 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b7198:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b719a:	460d      	mov	r5, r1
   b719c:	4604      	mov	r4, r0
    WiringBleLock lk;
   b719e:	a801      	add	r0, sp, #4
   b71a0:	f7ff fd76 	bl	b6c90 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b71a4:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b71a6:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b71aa:	6023      	str	r3, [r4, #0]
   b71ac:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b71b0:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b71b2:	a801      	add	r0, sp, #4
   b71b4:	f7ff fd7a 	bl	b6cac <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b71b8:	4620      	mov	r0, r4
   b71ba:	b003      	add	sp, #12
   b71bc:	bd30      	pop	{r4, r5, pc}

000b71be <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b71be:	b530      	push	{r4, r5, lr}
   b71c0:	4605      	mov	r5, r0
   b71c2:	b087      	sub	sp, #28
   b71c4:	460c      	mov	r4, r1
    WiringBleLock lk;
   b71c6:	a801      	add	r0, sp, #4
   b71c8:	f7ff fd62 	bl	b6c90 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b71cc:	682a      	ldr	r2, [r5, #0]
   b71ce:	6823      	ldr	r3, [r4, #0]
   b71d0:	8812      	ldrh	r2, [r2, #0]
   b71d2:	881b      	ldrh	r3, [r3, #0]
   b71d4:	429a      	cmp	r2, r3
   b71d6:	d10d      	bne.n	b71f4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b71d8:	4629      	mov	r1, r5
   b71da:	a802      	add	r0, sp, #8
   b71dc:	f7ff ffdc 	bl	b7198 <_ZNK8particle13BlePeerDevice7addressEv>
   b71e0:	4621      	mov	r1, r4
   b71e2:	a804      	add	r0, sp, #16
   b71e4:	f7ff ffd8 	bl	b7198 <_ZNK8particle13BlePeerDevice7addressEv>
   b71e8:	a904      	add	r1, sp, #16
   b71ea:	a802      	add	r0, sp, #8
   b71ec:	f7ff fd77 	bl	b6cde <_ZNK8particle10BleAddresseqERKS0_>
   b71f0:	4604      	mov	r4, r0
   b71f2:	b900      	cbnz	r0, b71f6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b71f4:	2400      	movs	r4, #0
    WiringBleLock lk;
   b71f6:	a801      	add	r0, sp, #4
   b71f8:	f7ff fd58 	bl	b6cac <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b71fc:	4620      	mov	r0, r4
   b71fe:	b007      	add	sp, #28
   b7200:	bd30      	pop	{r4, r5, pc}
	...

000b7204 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b7204:	b510      	push	{r4, lr}
   b7206:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b7208:	2054      	movs	r0, #84	; 0x54
   b720a:	f7fc ff44 	bl	b4096 <_Znwj>
   b720e:	4601      	mov	r1, r0
   b7210:	b160      	cbz	r0, b722c <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b7212:	2300      	movs	r3, #0
   b7214:	e9c0 3300 	strd	r3, r3, [r0]
   b7218:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b721c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b7220:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b7224:	6203      	str	r3, [r0, #32]
   b7226:	62c3      	str	r3, [r0, #44]	; 0x2c
   b7228:	63c3      	str	r3, [r0, #60]	; 0x3c
   b722a:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b722c:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b722e:	b919      	cbnz	r1, b7238 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   b7230:	4a09      	ldr	r2, [pc, #36]	; (b7258 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b7232:	200a      	movs	r0, #10
   b7234:	f7ff fa6c 	bl	b6710 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b7238:	2000      	movs	r0, #0
   b723a:	f7fe ffaf 	bl	b619c <hal_ble_stack_init>
   b723e:	b120      	cbz	r0, b724a <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   b7240:	4a05      	ldr	r2, [pc, #20]	; (b7258 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b7242:	2100      	movs	r1, #0
   b7244:	200a      	movs	r0, #10
   b7246:	f7ff fa63 	bl	b6710 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b724a:	6821      	ldr	r1, [r4, #0]
   b724c:	4803      	ldr	r0, [pc, #12]	; (b725c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b724e:	2200      	movs	r2, #0
   b7250:	f7ff f808 	bl	b6264 <hal_ble_set_callback_on_periph_link_events>
}
   b7254:	4620      	mov	r0, r4
   b7256:	bd10      	pop	{r4, pc}
   b7258:	000b6341 	.word	0x000b6341
   b725c:	000b7679 	.word	0x000b7679

000b7260 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b7260:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b7262:	4c0b      	ldr	r4, [pc, #44]	; (b7290 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7264:	7823      	ldrb	r3, [r4, #0]
   b7266:	f3bf 8f5b 	dmb	ish
   b726a:	07db      	lsls	r3, r3, #31
   b726c:	d40e      	bmi.n	b728c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   b726e:	4620      	mov	r0, r4
   b7270:	f7fc ff17 	bl	b40a2 <__cxa_guard_acquire>
   b7274:	b150      	cbz	r0, b728c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   b7276:	4807      	ldr	r0, [pc, #28]	; (b7294 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7278:	f7ff ffc4 	bl	b7204 <_ZN8particle14BleLocalDeviceC1Ev>
   b727c:	4620      	mov	r0, r4
   b727e:	f7fc ff15 	bl	b40ac <__cxa_guard_release>
   b7282:	4a05      	ldr	r2, [pc, #20]	; (b7298 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   b7284:	4905      	ldr	r1, [pc, #20]	; (b729c <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   b7286:	4803      	ldr	r0, [pc, #12]	; (b7294 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7288:	f002 fa54 	bl	b9734 <__aeabi_atexit>
    return instance;
}
   b728c:	4801      	ldr	r0, [pc, #4]	; (b7294 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b728e:	bd10      	pop	{r4, pc}
   b7290:	2003e630 	.word	0x2003e630
   b7294:	2003e63c 	.word	0x2003e63c
   b7298:	2003da30 	.word	0x2003da30
   b729c:	000b749d 	.word	0x000b749d

000b72a0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b72a0:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b72a2:	6803      	ldr	r3, [r0, #0]
   b72a4:	3b09      	subs	r3, #9
   b72a6:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b72a8:	b08d      	sub	sp, #52	; 0x34
   b72aa:	4604      	mov	r4, r0
   b72ac:	460d      	mov	r5, r1
    switch (event->type) {
   b72ae:	d811      	bhi.n	b72d4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b72b0:	f7ff ffd6 	bl	b7260 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b72b4:	88a1      	ldrh	r1, [r4, #4]
   b72b6:	6800      	ldr	r0, [r0, #0]
   b72b8:	f7ff fe8e 	bl	b6fd8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b72bc:	4603      	mov	r3, r0
   b72be:	b958      	cbnz	r0, b72d8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b72c0:	2220      	movs	r2, #32
   b72c2:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b72c6:	4a0b      	ldr	r2, [pc, #44]	; (b72f4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b72c8:	9200      	str	r2, [sp, #0]
   b72ca:	490b      	ldr	r1, [pc, #44]	; (b72f8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b72cc:	aa04      	add	r2, sp, #16
   b72ce:	2032      	movs	r0, #50	; 0x32
   b72d0:	f7ff fa26 	bl	b6720 <log_message>
}
   b72d4:	b00d      	add	sp, #52	; 0x34
   b72d6:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b72d8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b72da:	2a00      	cmp	r2, #0
   b72dc:	d0fa      	beq.n	b72d4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b72de:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b72e2:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b72e6:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b72ea:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b72ec:	aa04      	add	r2, sp, #16
   b72ee:	a903      	add	r1, sp, #12
   b72f0:	47a0      	blx	r4
}
   b72f2:	e7ef      	b.n	b72d4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b72f4:	000ba9a9 	.word	0x000ba9a9
   b72f8:	000ba982 	.word	0x000ba982

000b72fc <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b72fc:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b72fe:	2000      	movs	r0, #0
   b7300:	f7fe ff4c 	bl	b619c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b7304:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b7308:	bd08      	pop	{r3, pc}

000b730a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b730a:	4608      	mov	r0, r1
   b730c:	b911      	cbnz	r1, b7314 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b730e:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b7310:	f7fe bf54 	b.w	b61bc <hal_ble_gap_set_advertising_data>
   b7314:	6a09      	ldr	r1, [r1, #32]
   b7316:	2200      	movs	r2, #0
   b7318:	e7fa      	b.n	b7310 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b731a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b731a:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   b731c:	4608      	mov	r0, r1
   b731e:	b929      	cbnz	r1, b732c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b7320:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b7322:	b003      	add	sp, #12
   b7324:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7328:	f7fe bf50 	b.w	b61cc <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b732c:	2101      	movs	r1, #1
   b732e:	9001      	str	r0, [sp, #4]
   b7330:	f7ff fe15 	bl	b6f5e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7334:	9801      	ldr	r0, [sp, #4]
   b7336:	2200      	movs	r2, #0
   b7338:	6a01      	ldr	r1, [r0, #32]
   b733a:	e7f2      	b.n	b7322 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000b733c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b733c:	b538      	push	{r3, r4, r5, lr}
   b733e:	4604      	mov	r4, r0
   b7340:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b7342:	f7ff ffe2 	bl	b730a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b7346:	2800      	cmp	r0, #0
   b7348:	db0a      	blt.n	b7360 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b734a:	4629      	mov	r1, r5
   b734c:	4620      	mov	r0, r4
   b734e:	f7ff ffe4 	bl	b731a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b7352:	2800      	cmp	r0, #0
   b7354:	db04      	blt.n	b7360 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b7356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b735a:	2000      	movs	r0, #0
   b735c:	f7fe bf3e 	b.w	b61dc <hal_ble_gap_start_advertising>
}
   b7360:	bd38      	pop	{r3, r4, r5, pc}

000b7362 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b7362:	6803      	ldr	r3, [r0, #0]
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b7364:	69d8      	ldr	r0, [r3, #28]
}
   b7366:	2800      	cmp	r0, #0
   b7368:	bfd4      	ite	le
   b736a:	2000      	movle	r0, #0
   b736c:	2001      	movgt	r0, #1
   b736e:	4770      	bx	lr

000b7370 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b7370:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7372:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7374:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7376:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7378:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b737a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b737c:	f7fc fe8b 	bl	b4096 <_Znwj>
   b7380:	b118      	cbz	r0, b738a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b7382:	682b      	ldr	r3, [r5, #0]
   b7384:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7386:	686b      	ldr	r3, [r5, #4]
   b7388:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b738a:	4b03      	ldr	r3, [pc, #12]	; (b7398 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b738c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b738e:	4b03      	ldr	r3, [pc, #12]	; (b739c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7390:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7392:	60a3      	str	r3, [r4, #8]
      }
   b7394:	4620      	mov	r0, r4
   b7396:	bd38      	pop	{r3, r4, r5, pc}
   b7398:	000b6b7d 	.word	0x000b6b7d
   b739c:	000b6bd5 	.word	0x000b6bd5

000b73a0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b73a0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b73a2:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b73a4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b73a6:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b73a8:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b73aa:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b73ac:	f7fc fe73 	bl	b4096 <_Znwj>
   b73b0:	b118      	cbz	r0, b73ba <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   b73b2:	682b      	ldr	r3, [r5, #0]
   b73b4:	6003      	str	r3, [r0, #0]
   b73b6:	686b      	ldr	r3, [r5, #4]
   b73b8:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b73ba:	4b03      	ldr	r3, [pc, #12]	; (b73c8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b73bc:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b73be:	4b03      	ldr	r3, [pc, #12]	; (b73cc <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b73c0:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b73c2:	60a3      	str	r3, [r4, #8]
      }
   b73c4:	4620      	mov	r0, r4
   b73c6:	bd38      	pop	{r3, r4, r5, pc}
   b73c8:	000b6b71 	.word	0x000b6b71
   b73cc:	000b6b95 	.word	0x000b6b95

000b73d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b73d0:	680b      	ldr	r3, [r1, #0]
   b73d2:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b73d4:	b113      	cbz	r3, b73dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b73d6:	685a      	ldr	r2, [r3, #4]
   b73d8:	3201      	adds	r2, #1
   b73da:	605a      	str	r2, [r3, #4]
      }
   b73dc:	4770      	bx	lr

000b73de <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b73de:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b73e0:	f851 3b04 	ldr.w	r3, [r1], #4
   b73e4:	4604      	mov	r4, r0
   b73e6:	f840 3b04 	str.w	r3, [r0], #4
   b73ea:	f7ff fff1 	bl	b73d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b73ee:	6823      	ldr	r3, [r4, #0]
   b73f0:	b90b      	cbnz	r3, b73f6 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b73f2:	f7ff fbb5 	bl	b6b60 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b73f6:	4620      	mov	r0, r4
   b73f8:	bd10      	pop	{r4, pc}

000b73fa <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b73fa:	b510      	push	{r4, lr}
   b73fc:	f851 3b04 	ldr.w	r3, [r1], #4
   b7400:	4604      	mov	r4, r0
   b7402:	f840 3b04 	str.w	r3, [r0], #4
   b7406:	f7ff ffe3 	bl	b73d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b740a:	4620      	mov	r0, r4
   b740c:	bd10      	pop	{r4, pc}

000b740e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b740e:	b510      	push	{r4, lr}
   b7410:	f851 3b04 	ldr.w	r3, [r1], #4
   b7414:	4604      	mov	r4, r0
   b7416:	f840 3b04 	str.w	r3, [r0], #4
   b741a:	f7ff ffd9 	bl	b73d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b741e:	4620      	mov	r0, r4
   b7420:	bd10      	pop	{r4, pc}

000b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b7422:	b510      	push	{r4, lr}
   b7424:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b7426:	6800      	ldr	r0, [r0, #0]
   b7428:	b108      	cbz	r0, b742e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b742a:	f7ff fc07 	bl	b6c3c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b742e:	4620      	mov	r0, r4
   b7430:	bd10      	pop	{r4, pc}

000b7432 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b7432:	b510      	push	{r4, lr}
   b7434:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7436:	3004      	adds	r0, #4
   b7438:	f7ff fff3 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b743c:	4620      	mov	r0, r4
   b743e:	bd10      	pop	{r4, pc}

000b7440 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7440:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7442:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7446:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7448:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b744c:	42ae      	cmp	r6, r5
   b744e:	d004      	beq.n	b745a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b7450:	1d28      	adds	r0, r5, #4
   b7452:	f7ff ffe6 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7456:	3508      	adds	r5, #8
   b7458:	e7f8      	b.n	b744c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b745a:	6820      	ldr	r0, [r4, #0]
   b745c:	f7ff fa80 	bl	b6960 <free>
}
   b7460:	4620      	mov	r0, r4
   b7462:	bd70      	pop	{r4, r5, r6, pc}

000b7464 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7464:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7466:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b746a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b746c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7470:	42ae      	cmp	r6, r5
   b7472:	d004      	beq.n	b747e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b7474:	1d28      	adds	r0, r5, #4
   b7476:	f7ff ffd4 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b747a:	3508      	adds	r5, #8
   b747c:	e7f8      	b.n	b7470 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b747e:	6820      	ldr	r0, [r4, #0]
   b7480:	f7ff fa6e 	bl	b6960 <free>
}
   b7484:	4620      	mov	r0, r4
   b7486:	bd70      	pop	{r4, r5, r6, pc}

000b7488 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7488:	b510      	push	{r4, lr}
   b748a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b748c:	3024      	adds	r0, #36	; 0x24
   b748e:	f7ff ffe9 	bl	b7464 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7492:	f104 0018 	add.w	r0, r4, #24
   b7496:	f7ff ffd3 	bl	b7440 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b749a:	bd10      	pop	{r4, pc}

000b749c <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   b749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   b749e:	6804      	ldr	r4, [r0, #0]
   b74a0:	4606      	mov	r6, r0
   b74a2:	b324      	cbz	r4, b74ee <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   b74a4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b74a8:	f7ff fbb4 	bl	b6c14 <_ZNSt14_Function_baseD1Ev>
   b74ac:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b74b0:	f7ff fbb0 	bl	b6c14 <_ZNSt14_Function_baseD1Ev>
   b74b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b74b8:	f7ff fbac 	bl	b6c14 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b74bc:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b74c0:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   b74c4:	42af      	cmp	r7, r5
   b74c6:	d004      	beq.n	b74d2 <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   b74c8:	1d28      	adds	r0, r5, #4
   b74ca:	f7ff ffaa 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b74ce:	3508      	adds	r5, #8
   b74d0:	e7f8      	b.n	b74c4 <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   b74d2:	69a0      	ldr	r0, [r4, #24]
   b74d4:	f7ff fa44 	bl	b6960 <free>
    ~BleLocalDeviceImpl() = default;
   b74d8:	f104 000c 	add.w	r0, r4, #12
   b74dc:	f7ff ffc2 	bl	b7464 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b74e0:	4620      	mov	r0, r4
   b74e2:	f7ff ffad 	bl	b7440 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b74e6:	2154      	movs	r1, #84	; 0x54
   b74e8:	4620      	mov	r0, r4
   b74ea:	f002 f928 	bl	b973e <_ZdlPvj>
   b74ee:	4630      	mov	r0, r6
   b74f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b74f2 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b74f2:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b74f4:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b74f6:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b74fa:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b74fe:	6803      	ldr	r3, [r0, #0]
   b7500:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7502:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7504:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b7506:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b7508:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b750a:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b750c:	f7ff ff89 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b7510:	b002      	add	sp, #8
   b7512:	bd10      	pop	{r4, pc}

000b7514 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b7514:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7516:	b510      	push	{r4, lr}
      if (_M_empty())
   b7518:	b90a      	cbnz	r2, b751e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b751a:	f002 f916 	bl	b974a <_ZSt25__throw_bad_function_callv>
    }
   b751e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7522:	68c3      	ldr	r3, [r0, #12]
   b7524:	4718      	bx	r3

000b7526 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
inline void spark::Vector<T, AllocatorT>::clear() {
   b7526:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7528:	e9d0 5300 	ldrd	r5, r3, [r0]
inline void spark::Vector<T, AllocatorT>::clear() {
   b752c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b752e:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7532:	42ae      	cmp	r6, r5
   b7534:	d004      	beq.n	b7540 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
      ~__shared_ptr() = default;
   b7536:	1d28      	adds	r0, r5, #4
   b7538:	f7ff ff73 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b753c:	3508      	adds	r5, #8
   b753e:	e7f8      	b.n	b7532 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
    size_ = 0;
   b7540:	2300      	movs	r3, #0
   b7542:	6063      	str	r3, [r4, #4]
}
   b7544:	bd70      	pop	{r4, r5, r6, pc}

000b7546 <_ZNK8particle14BleLocalDevice3offEv>:
int BleLocalDevice::off() const {
   b7546:	b513      	push	{r0, r1, r4, lr}
   b7548:	4604      	mov	r4, r0
    CHECK(hal_ble_stack_deinit(nullptr));
   b754a:	2000      	movs	r0, #0
   b754c:	f7fe fe2e 	bl	b61ac <hal_ble_stack_deinit>
   b7550:	2800      	cmp	r0, #0
   b7552:	db0a      	blt.n	b756a <_ZNK8particle14BleLocalDevice3offEv+0x24>
        WiringBleLock lk;
   b7554:	a801      	add	r0, sp, #4
   b7556:	f7ff fb9b 	bl	b6c90 <_ZN8particle3ble13WiringBleLockC1Ev>
        return peers_;
   b755a:	6820      	ldr	r0, [r4, #0]
        impl()->peers().clear();
   b755c:	3018      	adds	r0, #24
   b755e:	f7ff ffe2 	bl	b7526 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
        WiringBleLock lk;
   b7562:	a801      	add	r0, sp, #4
   b7564:	f7ff fba2 	bl	b6cac <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b7568:	2000      	movs	r0, #0
}
   b756a:	b002      	add	sp, #8
   b756c:	bd10      	pop	{r4, pc}

000b756e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b756e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7572:	4604      	mov	r4, r0
   b7574:	460d      	mov	r5, r1
   b7576:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7578:	d914      	bls.n	b75a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b757a:	4290      	cmp	r0, r2
   b757c:	d213      	bcs.n	b75a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b757e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7582:	1a75      	subs	r5, r6, r1
   b7584:	f1a1 0708 	sub.w	r7, r1, #8
   b7588:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b758a:	42b7      	cmp	r7, r6
   b758c:	d018      	beq.n	b75c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b758e:	b11c      	cbz	r4, b7598 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7590:	4631      	mov	r1, r6
   b7592:	4620      	mov	r0, r4
   b7594:	f7ff ff3b 	bl	b740e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7598:	1d30      	adds	r0, r6, #4
   b759a:	f7ff ff42 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b759e:	3e08      	subs	r6, #8
   b75a0:	3c08      	subs	r4, #8
   b75a2:	e7f2      	b.n	b758a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b75a4:	d00c      	beq.n	b75c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b75a6:	42b5      	cmp	r5, r6
   b75a8:	d00a      	beq.n	b75c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b75aa:	b11c      	cbz	r4, b75b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b75ac:	4629      	mov	r1, r5
   b75ae:	4620      	mov	r0, r4
   b75b0:	f7ff ff2d 	bl	b740e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b75b4:	1d28      	adds	r0, r5, #4
   b75b6:	f7ff ff34 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b75ba:	3508      	adds	r5, #8
   b75bc:	3408      	adds	r4, #8
   b75be:	e7f2      	b.n	b75a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b75c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b75c2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b75c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b75c4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b75c6:	6846      	ldr	r6, [r0, #4]
   b75c8:	4668      	mov	r0, sp
   b75ca:	f7ff ff20 	bl	b740e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b75ce:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b75d2:	429f      	cmp	r7, r3
   b75d4:	db12      	blt.n	b75fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b75d6:	3701      	adds	r7, #1
        if (n > 0) {
   b75d8:	2f00      	cmp	r7, #0
   b75da:	dd29      	ble.n	b7630 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b75dc:	00f8      	lsls	r0, r7, #3
   b75de:	f7ff f9b7 	bl	b6950 <malloc>
            if (!d) {
   b75e2:	4605      	mov	r5, r0
   b75e4:	b1f0      	cbz	r0, b7624 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b75e6:	e9d4 1200 	ldrd	r1, r2, [r4]
   b75ea:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b75ee:	f7ff ffbe 	bl	b756e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b75f2:	6820      	ldr	r0, [r4, #0]
   b75f4:	f7ff f9b4 	bl	b6960 <free>
        data_ = d;
   b75f8:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b75fa:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b75fc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b75fe:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7600:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7604:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7608:	4631      	mov	r1, r6
   b760a:	f106 0008 	add.w	r0, r6, #8
   b760e:	f7ff ffae 	bl	b756e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7612:	b11e      	cbz	r6, b761c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7614:	4669      	mov	r1, sp
   b7616:	4630      	mov	r0, r6
   b7618:	f7ff fef9 	bl	b740e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b761c:	6863      	ldr	r3, [r4, #4]
   b761e:	3301      	adds	r3, #1
   b7620:	6063      	str	r3, [r4, #4]
    return true;
   b7622:	2501      	movs	r5, #1
   b7624:	a801      	add	r0, sp, #4
   b7626:	f7ff fefc 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b762a:	4628      	mov	r0, r5
   b762c:	b003      	add	sp, #12
   b762e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7630:	2500      	movs	r5, #0
   b7632:	e7de      	b.n	b75f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b7634 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7636:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b763a:	4605      	mov	r5, r0
   b763c:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b763e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7642:	42a6      	cmp	r6, r4
   b7644:	d005      	beq.n	b7652 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b7646:	4639      	mov	r1, r7
   b7648:	4620      	mov	r0, r4
   b764a:	f7ff fdb8 	bl	b71be <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b764e:	b108      	cbz	r0, b7654 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b7650:	b914      	cbnz	r4, b7658 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b7652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b7654:	3408      	adds	r4, #8
   b7656:	e7f4      	b.n	b7642 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b7658:	1d20      	adds	r0, r4, #4
   b765a:	f7ff fee2 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b765e:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7662:	f104 0108 	add.w	r1, r4, #8
   b7666:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b766a:	4620      	mov	r0, r4
   b766c:	f7ff ff7f 	bl	b756e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b7670:	686b      	ldr	r3, [r5, #4]
   b7672:	3b01      	subs	r3, #1
   b7674:	606b      	str	r3, [r5, #4]
    return true;
   b7676:	e7ec      	b.n	b7652 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>

000b7678 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b767c:	4605      	mov	r5, r0
   b767e:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7680:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7682:	460c      	mov	r4, r1
        WiringBleLock lk;
   b7684:	f7ff fb04 	bl	b6c90 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7688:	682e      	ldr	r6, [r5, #0]
   b768a:	2e04      	cmp	r6, #4
   b768c:	d06d      	beq.n	b776a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf2>
   b768e:	d807      	bhi.n	b76a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   b7690:	2e03      	cmp	r6, #3
   b7692:	d02a      	beq.n	b76ea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x72>
        WiringBleLock lk;
   b7694:	a803      	add	r0, sp, #12
   b7696:	f7ff fb09 	bl	b6cac <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b769a:	b00e      	add	sp, #56	; 0x38
   b769c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   b76a0:	f1a6 030c 	sub.w	r3, r6, #12
   b76a4:	2b04      	cmp	r3, #4
   b76a6:	d8f5      	bhi.n	b7694 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b76a8:	89a9      	ldrh	r1, [r5, #12]
   b76aa:	4620      	mov	r0, r4
   b76ac:	f7ff fc94 	bl	b6fd8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b76b0:	4607      	mov	r7, r0
   b76b2:	2800      	cmp	r0, #0
   b76b4:	d0ee      	beq.n	b7694 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   b76b6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b76b8:	2b00      	cmp	r3, #0
   b76ba:	d0eb      	beq.n	b7694 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   b76bc:	2210      	movs	r2, #16
   b76be:	2100      	movs	r1, #0
   b76c0:	a807      	add	r0, sp, #28
   b76c2:	f002 fc1f 	bl	b9f04 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b76c6:	2e0d      	cmp	r6, #13
                        };
   b76c8:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   b76ca:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b76ce:	d002      	beq.n	b76d6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x5e>
   b76d0:	2e10      	cmp	r6, #16
   b76d2:	f040 8092 	bne.w	b77fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x182>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   b76d6:	686b      	ldr	r3, [r5, #4]
   b76d8:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b76da:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   b76dc:	9308      	str	r3, [sp, #32]
   b76de:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b76e0:	a906      	add	r1, sp, #24
   b76e2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b76e6:	4798      	blx	r3
   b76e8:	e7d4      	b.n	b7694 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   b76ea:	a804      	add	r0, sp, #16
   b76ec:	f7ff fd20 	bl	b7130 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b76f0:	9b04      	ldr	r3, [sp, #16]
   b76f2:	89aa      	ldrh	r2, [r5, #12]
   b76f4:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b76f6:	6869      	ldr	r1, [r5, #4]
   b76f8:	9804      	ldr	r0, [sp, #16]
   b76fa:	3108      	adds	r1, #8
   b76fc:	3002      	adds	r0, #2
   b76fe:	f7ff fae1 	bl	b6cc4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7702:	a904      	add	r1, sp, #16
   b7704:	a806      	add	r0, sp, #24
   b7706:	f7ff fe82 	bl	b740e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b770a:	a906      	add	r1, sp, #24
   b770c:	f104 0018 	add.w	r0, r4, #24
   b7710:	f7ff ff57 	bl	b75c2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b7714:	4605      	mov	r5, r0
   b7716:	a807      	add	r0, sp, #28
   b7718:	f7ff fe83 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b771c:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b771e:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b7720:	b98d      	cbnz	r5, b7746 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xce>
                    LOG(ERROR, "Failed to append peer Central device.");
   b7722:	4b3e      	ldr	r3, [pc, #248]	; (b781c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   b7724:	493e      	ldr	r1, [pc, #248]	; (b7820 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b7726:	9300      	str	r3, [sp, #0]
   b7728:	2032      	movs	r0, #50	; 0x32
   b772a:	462b      	mov	r3, r5
   b772c:	aa06      	add	r2, sp, #24
   b772e:	9507      	str	r5, [sp, #28]
   b7730:	f7fe fff6 	bl	b6720 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b7734:	9b04      	ldr	r3, [sp, #16]
   b7736:	4629      	mov	r1, r5
   b7738:	8818      	ldrh	r0, [r3, #0]
   b773a:	f7fe fd57 	bl	b61ec <hal_ble_gap_disconnect>
   b773e:	a805      	add	r0, sp, #20
   b7740:	f7ff fe6f 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7744:	e7a6      	b.n	b7694 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   b7746:	4a37      	ldr	r2, [pc, #220]	; (b7824 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   b7748:	9200      	str	r2, [sp, #0]
   b774a:	2300      	movs	r3, #0
   b774c:	4934      	ldr	r1, [pc, #208]	; (b7820 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b774e:	9307      	str	r3, [sp, #28]
   b7750:	aa06      	add	r2, sp, #24
   b7752:	2001      	movs	r0, #1
   b7754:	f7fe ffe4 	bl	b6720 <log_message>
                if (impl->connectedCallback_) {
   b7758:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b775a:	2b00      	cmp	r3, #0
   b775c:	d0ef      	beq.n	b773e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc6>
                    impl->connectedCallback_(peer);
   b775e:	a904      	add	r1, sp, #16
   b7760:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7764:	f7ff fed6 	bl	b7514 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7768:	e7e9      	b.n	b773e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc6>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b776a:	89a9      	ldrh	r1, [r5, #12]
   b776c:	4620      	mov	r0, r4
   b776e:	f7ff fc33 	bl	b6fd8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7772:	4606      	mov	r6, r0
   b7774:	2800      	cmp	r0, #0
   b7776:	d08d      	beq.n	b7694 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
      { return _M_ptr; }
   b7778:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b777a:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b777e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7782:	8029      	strh	r1, [r5, #0]
   b7784:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7788:	429a      	cmp	r2, r3
   b778a:	d003      	beq.n	b7794 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b778c:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7790:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b7792:	e7f9      	b.n	b7788 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x110>
    destruct(data_, data_ + size_);
   b7794:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b7798:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b779c:	45b8      	cmp	r8, r7
   b779e:	d004      	beq.n	b77aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x132>
      ~__shared_ptr() = default;
   b77a0:	1d38      	adds	r0, r7, #4
   b77a2:	f7ff fe3e 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b77a6:	3708      	adds	r7, #8
   b77a8:	e7f8      	b.n	b779c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
    size_ = 0;
   b77aa:	2300      	movs	r3, #0
   b77ac:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b77ae:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b77b2:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b77b6:	45b8      	cmp	r8, r7
   b77b8:	d004      	beq.n	b77c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14c>
   b77ba:	1d38      	adds	r0, r7, #4
   b77bc:	f7ff fe31 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b77c0:	3708      	adds	r7, #8
   b77c2:	e7f8      	b.n	b77b6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13e>
    size_ = 0;
   b77c4:	2300      	movs	r3, #0
   b77c6:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b77c8:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b77ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b77cc:	b123      	cbz	r3, b77d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x160>
                        impl->disconnectedCallback_(*peer);
   b77ce:	4631      	mov	r1, r6
   b77d0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b77d4:	f7ff fe9e 	bl	b7514 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b77d8:	2300      	movs	r3, #0
   b77da:	2220      	movs	r2, #32
   b77dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b77e0:	4a11      	ldr	r2, [pc, #68]	; (b7828 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b0>)
   b77e2:	9200      	str	r2, [sp, #0]
   b77e4:	490e      	ldr	r1, [pc, #56]	; (b7820 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b77e6:	aa06      	add	r2, sp, #24
   b77e8:	2001      	movs	r0, #1
   b77ea:	f7fe ff99 	bl	b6720 <log_message>
                    impl->peers_.removeOne(*peer);
   b77ee:	4631      	mov	r1, r6
   b77f0:	f104 0018 	add.w	r0, r4, #24
   b77f4:	f7ff ff1e 	bl	b7634 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b77f8:	e74c      	b.n	b7694 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b77fa:	2e0f      	cmp	r6, #15
   b77fc:	f47f af6f 	bne.w	b76de <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x66>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   b7800:	686b      	ldr	r3, [r5, #4]
   b7802:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   b7804:	7a2b      	ldrb	r3, [r5, #8]
   b7806:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   b780a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   b780e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   b7812:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   b7816:	2308      	movs	r3, #8
   b7818:	e760      	b.n	b76dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x64>
   b781a:	bf00      	nop
   b781c:	000ba9c1 	.word	0x000ba9c1
   b7820:	000ba982 	.word	0x000ba982
   b7824:	000ba9e7 	.word	0x000ba9e7
   b7828:	000baa04 	.word	0x000baa04

000b782c <_ZNK8particle13BlePeerDevice10disconnectEv>:
int BlePeerDevice::disconnect() const {
   b782c:	b513      	push	{r0, r1, r4, lr}
   b782e:	4604      	mov	r4, r0
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b7830:	f7ff fca0 	bl	b7174 <_ZNK8particle13BlePeerDevice9connectedEv>
   b7834:	b1d0      	cbz	r0, b786c <_ZNK8particle13BlePeerDevice10disconnectEv+0x40>
    CHECK(hal_ble_gap_disconnect(impl()->connHandle(), nullptr));
   b7836:	6823      	ldr	r3, [r4, #0]
   b7838:	2100      	movs	r1, #0
   b783a:	8818      	ldrh	r0, [r3, #0]
   b783c:	f7fe fcd6 	bl	b61ec <hal_ble_gap_disconnect>
   b7840:	2800      	cmp	r0, #0
   b7842:	db11      	blt.n	b7868 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
        WiringBleLock lk;
   b7844:	a801      	add	r0, sp, #4
   b7846:	f7ff fa23 	bl	b6c90 <_ZN8particle3ble13WiringBleLockC1Ev>
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b784a:	f7ff fd09 	bl	b7260 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b784e:	6800      	ldr	r0, [r0, #0]
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b7850:	4621      	mov	r1, r4
   b7852:	3018      	adds	r0, #24
   b7854:	f7ff feee 	bl	b7634 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
      { return _M_ptr; }
   b7858:	6823      	ldr	r3, [r4, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b785a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b785e:	801a      	strh	r2, [r3, #0]
        WiringBleLock lk;
   b7860:	a801      	add	r0, sp, #4
   b7862:	f7ff fa23 	bl	b6cac <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b7866:	2000      	movs	r0, #0
}
   b7868:	b002      	add	sp, #8
   b786a:	bd10      	pop	{r4, pc}
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b786c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7870:	e7fa      	b.n	b7868 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
	...

000b7874 <_ZNK8particle14BleLocalDevice13disconnectAllEv>:

int BleLocalDevice::disconnect(const BlePeerDevice& peer) const {
    return peer.disconnect();
}

int BleLocalDevice::disconnectAll() const {
   b7874:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7878:	4604      	mov	r4, r0
    WiringBleLock lk;
   b787a:	a801      	add	r0, sp, #4
   b787c:	f7ff fa08 	bl	b6c90 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7880:	6823      	ldr	r3, [r4, #0]
   b7882:	4e10      	ldr	r6, [pc, #64]	; (b78c4 <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x50>)
    return data_ + size_;
   b7884:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
        locked_ = false;
   b7888:	f04f 0800 	mov.w	r8, #0
   b788c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
        locked_ = true;
   b7890:	2701      	movs	r7, #1
    for (auto& p : impl()->peers()) {
   b7892:	42ac      	cmp	r4, r5
   b7894:	d00e      	beq.n	b78b4 <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x40>
   b7896:	6830      	ldr	r0, [r6, #0]
   b7898:	f7fe fd42 	bl	b6320 <os_mutex_recursive_unlock>
        lk.unlock();
        p.disconnect();
   b789c:	4620      	mov	r0, r4
        locked_ = false;
   b789e:	f88d 8004 	strb.w	r8, [sp, #4]
        p.disconnect();
   b78a2:	f7ff ffc3 	bl	b782c <_ZNK8particle13BlePeerDevice10disconnectEv>
    void lock() { os_mutex_recursive_lock(handle_); }
   b78a6:	6830      	ldr	r0, [r6, #0]
   b78a8:	f7fe fd32 	bl	b6310 <os_mutex_recursive_lock>
        locked_ = true;
   b78ac:	3408      	adds	r4, #8
   b78ae:	f88d 7004 	strb.w	r7, [sp, #4]
    for (auto& p : impl()->peers()) {
   b78b2:	e7ee      	b.n	b7892 <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x1e>
    WiringBleLock lk;
   b78b4:	a801      	add	r0, sp, #4
   b78b6:	f7ff f9f9 	bl	b6cac <_ZN8particle3ble13WiringBleLockD1Ev>
        lk.lock();
    }
    return SYSTEM_ERROR_NONE;
}
   b78ba:	2000      	movs	r0, #0
   b78bc:	b002      	add	sp, #8
   b78be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b78c2:	bf00      	nop
   b78c4:	2003e638 	.word	0x2003e638

000b78c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b78c8:	b513      	push	{r0, r1, r4, lr}
   b78ca:	460b      	mov	r3, r1
   b78cc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b78ce:	e9d0 0100 	ldrd	r0, r1, [r0]
   b78d2:	466c      	mov	r4, sp
   b78d4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b78d8:	e893 0003 	ldmia.w	r3, {r0, r1}
   b78dc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b78e0:	e894 0003 	ldmia.w	r4, {r0, r1}
   b78e4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b78e8:	b002      	add	sp, #8
   b78ea:	bd10      	pop	{r4, pc}

000b78ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b78ec:	b538      	push	{r3, r4, r5, lr}
   b78ee:	4605      	mov	r5, r0
   b78f0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b78f2:	f7ff ffe9 	bl	b78c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b78f6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b78f8:	68a2      	ldr	r2, [r4, #8]
   b78fa:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b78fc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b78fe:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7900:	68e2      	ldr	r2, [r4, #12]
   b7902:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7904:	60e3      	str	r3, [r4, #12]
      }
   b7906:	bd38      	pop	{r3, r4, r5, pc}

000b7908 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7908:	b570      	push	{r4, r5, r6, lr}
   b790a:	460e      	mov	r6, r1
   b790c:	b08c      	sub	sp, #48	; 0x30
   b790e:	4604      	mov	r4, r0
   b7910:	9201      	str	r2, [sp, #4]
   b7912:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b7914:	f7ff fb40 	bl	b6f98 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b7918:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   b791a:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   b791c:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   b791e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7922:	f000 fe76 	bl	b8612 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7926:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b792a:	b1cd      	cbz	r5, b7960 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x58>
   b792c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b792e:	9502      	str	r5, [sp, #8]
   b7930:	a902      	add	r1, sp, #8
   b7932:	a804      	add	r0, sp, #16
   b7934:	9303      	str	r3, [sp, #12]
   b7936:	f7ff fd1b 	bl	b7370 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b793a:	2300      	movs	r3, #0
	__x.swap(*this);
   b793c:	a908      	add	r1, sp, #32
   b793e:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b7940:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b7942:	f7ff ffd3 	bl	b78ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7946:	4631      	mov	r1, r6
   b7948:	a808      	add	r0, sp, #32
   b794a:	f7ff ffcf 	bl	b78ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b794e:	a808      	add	r0, sp, #32
   b7950:	f7ff f960 	bl	b6c14 <_ZNSt14_Function_baseD1Ev>
   b7954:	a804      	add	r0, sp, #16
   b7956:	f7ff f95d 	bl	b6c14 <_ZNSt14_Function_baseD1Ev>
    }
   b795a:	4620      	mov	r0, r4
   b795c:	b00c      	add	sp, #48	; 0x30
   b795e:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7960:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7962:	e7ea      	b.n	b793a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000b7964 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b7964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7968:	b089      	sub	sp, #36	; 0x24
   b796a:	461d      	mov	r5, r3
   b796c:	e9dd 4312 	ldrd	r4, r3, [sp, #72]	; 0x48
   b7970:	4680      	mov	r8, r0
   b7972:	468a      	mov	sl, r1
   b7974:	4693      	mov	fp, r2
   b7976:	9914      	ldr	r1, [sp, #80]	; 0x50
   b7978:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b797a:	2200      	movs	r2, #0
   b797c:	2068      	movs	r0, #104	; 0x68
   b797e:	9102      	str	r1, [sp, #8]
   b7980:	9206      	str	r2, [sp, #24]
   b7982:	f7fc fb88 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7986:	1e06      	subs	r6, r0, #0
   b7988:	f106 090c 	add.w	r9, r6, #12
   b798c:	d01c      	beq.n	b79c8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x64>
      : _M_use_count(1), _M_weak_count(1) { }
   b798e:	2201      	movs	r2, #1
	: _M_impl(__a)
   b7990:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b7992:	e9c6 2201 	strd	r2, r2, [r6, #4]
	: _M_impl(__a)
   b7996:	4a17      	ldr	r2, [pc, #92]	; (b79f4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b7998:	f847 2b20 	str.w	r2, [r7], #32
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b799c:	9902      	ldr	r1, [sp, #8]
   b799e:	f89b 2000 	ldrb.w	r2, [fp]
   b79a2:	9b03      	ldr	r3, [sp, #12]
    value_ = flags.value_;
   b79a4:	f88d 2014 	strb.w	r2, [sp, #20]
   b79a8:	9100      	str	r1, [sp, #0]
   b79aa:	4652      	mov	r2, sl
   b79ac:	a905      	add	r1, sp, #20
   b79ae:	4648      	mov	r0, r9
   b79b0:	f7ff ffaa 	bl	b7908 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b79b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b79b6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b79b8:	682b      	ldr	r3, [r5, #0]
   b79ba:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b79bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b79be:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b79c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b79c4:	6823      	ldr	r3, [r4, #0]
   b79c6:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b79c8:	a906      	add	r1, sp, #24
   b79ca:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b79cc:	e9cd 9606 	strd	r9, r6, [sp, #24]
   b79d0:	f7ff fd8f 	bl	b74f2 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b79d4:	a807      	add	r0, sp, #28
   b79d6:	f7ff fd24 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b79da:	f8d8 1000 	ldr.w	r1, [r8]
   b79de:	b931      	cbnz	r1, b79ee <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8a>
        SPARK_ASSERT(false);
   b79e0:	4a05      	ldr	r2, [pc, #20]	; (b79f8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b79e2:	200a      	movs	r0, #10
}
   b79e4:	b009      	add	sp, #36	; 0x24
   b79e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b79ea:	f7fe be91 	b.w	b6710 <panic_>
}
   b79ee:	b009      	add	sp, #36	; 0x24
   b79f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b79f4:	000baa80 	.word	0x000baa80
   b79f8:	000b6341 	.word	0x000b6341

000b79fc <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b79fc:	b538      	push	{r3, r4, r5, lr}
   b79fe:	4605      	mov	r5, r0
   b7a00:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7a02:	f7ff ff61 	bl	b78c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7a06:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7a08:	68a2      	ldr	r2, [r4, #8]
   b7a0a:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7a0c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7a0e:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7a10:	68e2      	ldr	r2, [r4, #12]
   b7a12:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7a14:	60e3      	str	r3, [r4, #12]
      }
   b7a16:	bd38      	pop	{r3, r4, r5, pc}

000b7a18 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b7a18:	b510      	push	{r4, lr}
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b7a1a:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b7a1c:	b08a      	sub	sp, #40	; 0x28
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b7a1e:	3434      	adds	r4, #52	; 0x34
   b7a20:	b1b9      	cbz	r1, b7a52 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b7a22:	e9cd 1200 	strd	r1, r2, [sp]
   b7a26:	a802      	add	r0, sp, #8
   b7a28:	4669      	mov	r1, sp
   b7a2a:	f7ff fcb9 	bl	b73a0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7a2e:	2300      	movs	r3, #0
	__x.swap(*this);
   b7a30:	a906      	add	r1, sp, #24
   b7a32:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7a34:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7a36:	f7ff ffe1 	bl	b79fc <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b7a3a:	4621      	mov	r1, r4
   b7a3c:	a806      	add	r0, sp, #24
   b7a3e:	f7ff ffdd 	bl	b79fc <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b7a42:	a806      	add	r0, sp, #24
   b7a44:	f7ff f8e6 	bl	b6c14 <_ZNSt14_Function_baseD1Ev>
   b7a48:	a802      	add	r0, sp, #8
   b7a4a:	f7ff f8e3 	bl	b6c14 <_ZNSt14_Function_baseD1Ev>
}
   b7a4e:	b00a      	add	sp, #40	; 0x28
   b7a50:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7a52:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7a54:	e7eb      	b.n	b7a2e <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b7a56 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7a56:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7a58:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7a5a:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7a5c:	3424      	adds	r4, #36	; 0x24
   b7a5e:	b1b9      	cbz	r1, b7a90 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b7a60:	e9cd 1200 	strd	r1, r2, [sp]
   b7a64:	a802      	add	r0, sp, #8
   b7a66:	4669      	mov	r1, sp
   b7a68:	f7ff fc9a 	bl	b73a0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7a6c:	2300      	movs	r3, #0
	__x.swap(*this);
   b7a6e:	a906      	add	r1, sp, #24
   b7a70:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7a72:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7a74:	f7ff ffc2 	bl	b79fc <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b7a78:	4621      	mov	r1, r4
   b7a7a:	a806      	add	r0, sp, #24
   b7a7c:	f7ff ffbe 	bl	b79fc <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b7a80:	a806      	add	r0, sp, #24
   b7a82:	f7ff f8c7 	bl	b6c14 <_ZNSt14_Function_baseD1Ev>
   b7a86:	a802      	add	r0, sp, #8
   b7a88:	f7ff f8c4 	bl	b6c14 <_ZNSt14_Function_baseD1Ev>
}
   b7a8c:	b00a      	add	sp, #40	; 0x28
   b7a8e:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7a90:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7a92:	e7eb      	b.n	b7a6c <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b7a94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7a94:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7a98:	4604      	mov	r4, r0
   b7a9a:	460d      	mov	r5, r1
   b7a9c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7a9e:	d914      	bls.n	b7aca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7aa0:	4290      	cmp	r0, r2
   b7aa2:	d213      	bcs.n	b7acc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7aa4:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7aa8:	1a75      	subs	r5, r6, r1
   b7aaa:	f1a1 0708 	sub.w	r7, r1, #8
   b7aae:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7ab0:	42b7      	cmp	r7, r6
   b7ab2:	d018      	beq.n	b7ae6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7ab4:	b11c      	cbz	r4, b7abe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7ab6:	4631      	mov	r1, r6
   b7ab8:	4620      	mov	r0, r4
   b7aba:	f7ff fc9e 	bl	b73fa <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7abe:	1d30      	adds	r0, r6, #4
   b7ac0:	f7ff fcaf 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7ac4:	3e08      	subs	r6, #8
   b7ac6:	3c08      	subs	r4, #8
   b7ac8:	e7f2      	b.n	b7ab0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7aca:	d00c      	beq.n	b7ae6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7acc:	42b5      	cmp	r5, r6
   b7ace:	d00a      	beq.n	b7ae6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7ad0:	b11c      	cbz	r4, b7ada <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7ad2:	4629      	mov	r1, r5
   b7ad4:	4620      	mov	r0, r4
   b7ad6:	f7ff fc90 	bl	b73fa <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7ada:	1d28      	adds	r0, r5, #4
   b7adc:	f7ff fca1 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7ae0:	3508      	adds	r5, #8
   b7ae2:	3408      	adds	r4, #8
   b7ae4:	e7f2      	b.n	b7acc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7ae8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7ae8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7aea:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7aec:	4605      	mov	r5, r0
        if (n > 0) {
   b7aee:	dd11      	ble.n	b7b14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7af0:	00f0      	lsls	r0, r6, #3
   b7af2:	f7fe ff2d 	bl	b6950 <malloc>
            if (!d) {
   b7af6:	4604      	mov	r4, r0
   b7af8:	b158      	cbz	r0, b7b12 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7afa:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7afe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7b02:	f7ff ffc7 	bl	b7a94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7b06:	6828      	ldr	r0, [r5, #0]
   b7b08:	f7fe ff2a 	bl	b6960 <free>
        data_ = d;
   b7b0c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7b0e:	60ae      	str	r6, [r5, #8]
        return true;
   b7b10:	2001      	movs	r0, #1
    }
   b7b12:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7b14:	2400      	movs	r4, #0
   b7b16:	e7f6      	b.n	b7b06 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7b18 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7b18:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7b1a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7b1c:	6845      	ldr	r5, [r0, #4]
   b7b1e:	4668      	mov	r0, sp
   b7b20:	f7ff fc6b 	bl	b73fa <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7b24:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7b28:	4299      	cmp	r1, r3
   b7b2a:	da10      	bge.n	b7b4e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7b2c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7b2e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7b30:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7b34:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7b38:	4629      	mov	r1, r5
   b7b3a:	f105 0008 	add.w	r0, r5, #8
   b7b3e:	f7ff ffa9 	bl	b7a94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7b42:	b98d      	cbnz	r5, b7b68 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7b44:	6863      	ldr	r3, [r4, #4]
   b7b46:	3301      	adds	r3, #1
   b7b48:	6063      	str	r3, [r4, #4]
    return true;
   b7b4a:	2601      	movs	r6, #1
   b7b4c:	e006      	b.n	b7b5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7b4e:	3101      	adds	r1, #1
   b7b50:	4620      	mov	r0, r4
   b7b52:	f7ff ffc9 	bl	b7ae8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7b56:	4606      	mov	r6, r0
   b7b58:	2800      	cmp	r0, #0
   b7b5a:	d1e7      	bne.n	b7b2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7b5c:	a801      	add	r0, sp, #4
   b7b5e:	f7ff fc60 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7b62:	4630      	mov	r0, r6
   b7b64:	b002      	add	sp, #8
   b7b66:	bd70      	pop	{r4, r5, r6, pc}
   b7b68:	4669      	mov	r1, sp
   b7b6a:	4628      	mov	r0, r5
   b7b6c:	f7ff fc45 	bl	b73fa <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7b70:	e7e8      	b.n	b7b44 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7b72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7b72:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b76:	4604      	mov	r4, r0
   b7b78:	460d      	mov	r5, r1
   b7b7a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7b7c:	d914      	bls.n	b7ba8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7b7e:	4290      	cmp	r0, r2
   b7b80:	d213      	bcs.n	b7baa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7b82:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7b86:	1a75      	subs	r5, r6, r1
   b7b88:	f1a1 0708 	sub.w	r7, r1, #8
   b7b8c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7b8e:	42b7      	cmp	r7, r6
   b7b90:	d018      	beq.n	b7bc4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7b92:	b11c      	cbz	r4, b7b9c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7b94:	4631      	mov	r1, r6
   b7b96:	4620      	mov	r0, r4
   b7b98:	f7ff fc21 	bl	b73de <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7b9c:	1d30      	adds	r0, r6, #4
   b7b9e:	f7ff fc40 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7ba2:	3e08      	subs	r6, #8
   b7ba4:	3c08      	subs	r4, #8
   b7ba6:	e7f2      	b.n	b7b8e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7ba8:	d00c      	beq.n	b7bc4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7baa:	42b5      	cmp	r5, r6
   b7bac:	d00a      	beq.n	b7bc4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7bae:	b11c      	cbz	r4, b7bb8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7bb0:	4629      	mov	r1, r5
   b7bb2:	4620      	mov	r0, r4
   b7bb4:	f7ff fc13 	bl	b73de <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7bb8:	1d28      	adds	r0, r5, #4
   b7bba:	f7ff fc32 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7bbe:	3508      	adds	r5, #8
   b7bc0:	3408      	adds	r4, #8
   b7bc2:	e7f2      	b.n	b7baa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7bc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7bc6:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7bc8:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7bca:	4605      	mov	r5, r0
        if (n > 0) {
   b7bcc:	dd11      	ble.n	b7bf2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7bce:	00f0      	lsls	r0, r6, #3
   b7bd0:	f7fe febe 	bl	b6950 <malloc>
            if (!d) {
   b7bd4:	4604      	mov	r4, r0
   b7bd6:	b158      	cbz	r0, b7bf0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7bd8:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7bdc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7be0:	f7ff ffc7 	bl	b7b72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7be4:	6828      	ldr	r0, [r5, #0]
   b7be6:	f7fe febb 	bl	b6960 <free>
        data_ = d;
   b7bea:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7bec:	60ae      	str	r6, [r5, #8]
        return true;
   b7bee:	2001      	movs	r0, #1
    }
   b7bf0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7bf2:	2400      	movs	r4, #0
   b7bf4:	e7f6      	b.n	b7be4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7bf6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7bf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7bf8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7bfa:	6845      	ldr	r5, [r0, #4]
   b7bfc:	4668      	mov	r0, sp
   b7bfe:	f7ff fbee 	bl	b73de <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7c02:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7c06:	4299      	cmp	r1, r3
   b7c08:	da10      	bge.n	b7c2c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7c0a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7c0c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7c0e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7c12:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7c16:	4629      	mov	r1, r5
   b7c18:	f105 0008 	add.w	r0, r5, #8
   b7c1c:	f7ff ffa9 	bl	b7b72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7c20:	b98d      	cbnz	r5, b7c46 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7c22:	6863      	ldr	r3, [r4, #4]
   b7c24:	3301      	adds	r3, #1
   b7c26:	6063      	str	r3, [r4, #4]
    return true;
   b7c28:	2601      	movs	r6, #1
   b7c2a:	e006      	b.n	b7c3a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7c2c:	3101      	adds	r1, #1
   b7c2e:	4620      	mov	r0, r4
   b7c30:	f7ff ffc9 	bl	b7bc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7c34:	4606      	mov	r6, r0
   b7c36:	2800      	cmp	r0, #0
   b7c38:	d1e7      	bne.n	b7c0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7c3a:	a801      	add	r0, sp, #4
   b7c3c:	f7ff fbf1 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7c40:	4630      	mov	r0, r6
   b7c42:	b002      	add	sp, #8
   b7c44:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b7c46:	4669      	mov	r1, sp
   b7c48:	4628      	mov	r0, r5
   b7c4a:	f7ff fbc8 	bl	b73de <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7c4e:	e7e8      	b.n	b7c22 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7c50 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7c54:	4617      	mov	r7, r2
   b7c56:	b0a1      	sub	sp, #132	; 0x84
   b7c58:	4680      	mov	r8, r0
    WiringBleLock lk;
   b7c5a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7c5c:	460e      	mov	r6, r1
    WiringBleLock lk;
   b7c5e:	f7ff f817 	bl	b6c90 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7c62:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b7c64:	7923      	ldrb	r3, [r4, #4]
   b7c66:	b953      	cbnz	r3, b7c7e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b7c68:	4639      	mov	r1, r7
   b7c6a:	4640      	mov	r0, r8
   b7c6c:	f7ff fbb7 	bl	b73de <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b7c70:	a80a      	add	r0, sp, #40	; 0x28
   b7c72:	f7ff f81b 	bl	b6cac <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b7c76:	4640      	mov	r0, r8
   b7c78:	b021      	add	sp, #132	; 0x84
   b7c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7c7e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b7c80:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b7c84:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b7c88:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b7c8a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b7c8e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b7c92:	9b03      	ldr	r3, [sp, #12]
   b7c94:	429d      	cmp	r5, r3
   b7c96:	d021      	beq.n	b7cdc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b7c98:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b7c9c:	4658      	mov	r0, fp
   b7c9e:	f109 0114 	add.w	r1, r9, #20
   b7ca2:	f7ff f8b0 	bl	b6e06 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b7ca6:	b1b8      	cbz	r0, b7cd8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b7ca8:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b7cac:	4650      	mov	r0, sl
   b7cae:	f7ff f8aa 	bl	b6e06 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b7cb2:	b188      	cbz	r0, b7cd8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b7cb4:	6823      	ldr	r3, [r4, #0]
   b7cb6:	f8d9 2000 	ldr.w	r2, [r9]
   b7cba:	4053      	eors	r3, r2
   b7cbc:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b7cc0:	d10a      	bne.n	b7cd8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b7cc2:	2220      	movs	r2, #32
   b7cc4:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b7cc8:	4a5e      	ldr	r2, [pc, #376]	; (b7e44 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b7cca:	9200      	str	r2, [sp, #0]
   b7ccc:	aa15      	add	r2, sp, #84	; 0x54
   b7cce:	495e      	ldr	r1, [pc, #376]	; (b7e48 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b7cd0:	2032      	movs	r0, #50	; 0x32
   b7cd2:	f7fe fd25 	bl	b6720 <log_message>
   b7cd6:	e7c7      	b.n	b7c68 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b7cd8:	3508      	adds	r5, #8
   b7cda:	e7da      	b.n	b7c92 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b7cdc:	4650      	mov	r0, sl
   b7cde:	f7ff f863 	bl	b6da8 <_ZNK8particle7BleUuid7isValidEv>
   b7ce2:	b960      	cbnz	r0, b7cfe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   b7ce4:	4959      	ldr	r1, [pc, #356]	; (b7e4c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b7ce6:	2201      	movs	r2, #1
   b7ce8:	a815      	add	r0, sp, #84	; 0x54
   b7cea:	ad15      	add	r5, sp, #84	; 0x54
   b7cec:	f7ff f833 	bl	b6d56 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b7cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7cf2:	46d4      	mov	ip, sl
   b7cf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7cf8:	682b      	ldr	r3, [r5, #0]
   b7cfa:	f8cc 3000 	str.w	r3, [ip]
   b7cfe:	6833      	ldr	r3, [r6, #0]
   b7d00:	e9d3 5300 	ldrd	r5, r3, [r3]
   b7d04:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b7d08:	455d      	cmp	r5, fp
   b7d0a:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b7d0c:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b7d0e:	d06e      	beq.n	b7dee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b7d10:	f855 0b08 	ldr.w	r0, [r5], #8
   b7d14:	f7ff f877 	bl	b6e06 <_ZNK8particle7BleUuideqERKS0_>
   b7d18:	2800      	cmp	r0, #0
   b7d1a:	d0f5      	beq.n	b7d08 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b7d1c:	f104 0a14 	add.w	sl, r4, #20
   b7d20:	4650      	mov	r0, sl
   b7d22:	f7ff f841 	bl	b6da8 <_ZNK8particle7BleUuid7isValidEv>
   b7d26:	b988      	cbnz	r0, b7d4c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b7d28:	4b49      	ldr	r3, [pc, #292]	; (b7e50 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7d2a:	4948      	ldr	r1, [pc, #288]	; (b7e4c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b7d2c:	881a      	ldrh	r2, [r3, #0]
   b7d2e:	3201      	adds	r2, #1
   b7d30:	b292      	uxth	r2, r2
   b7d32:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7d34:	a815      	add	r0, sp, #84	; 0x54
   b7d36:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b7d38:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7d3a:	f7ff f82b 	bl	b6d94 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b7d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7d40:	46d4      	mov	ip, sl
   b7d42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7d46:	682b      	ldr	r3, [r5, #0]
   b7d48:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b7d4c:	4b41      	ldr	r3, [pc, #260]	; (b7e54 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b7d4e:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b7d50:	2228      	movs	r2, #40	; 0x28
   b7d52:	2100      	movs	r1, #0
   b7d54:	a816      	add	r0, sp, #88	; 0x58
   b7d56:	f002 f8d5 	bl	b9f04 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b7d5a:	4651      	mov	r1, sl
   b7d5c:	a804      	add	r0, sp, #16
   b7d5e:	f7ff f835 	bl	b6dcc <_ZN8particle7BleUuid7halUUIDEv>
   b7d62:	ab04      	add	r3, sp, #16
   b7d64:	aa18      	add	r2, sp, #96	; 0x60
   b7d66:	f10d 0c20 	add.w	ip, sp, #32
   b7d6a:	6818      	ldr	r0, [r3, #0]
   b7d6c:	6859      	ldr	r1, [r3, #4]
   b7d6e:	4615      	mov	r5, r2
   b7d70:	c503      	stmia	r5!, {r0, r1}
   b7d72:	3308      	adds	r3, #8
   b7d74:	4563      	cmp	r3, ip
   b7d76:	462a      	mov	r2, r5
   b7d78:	d1f7      	bne.n	b7d6a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b7d7a:	6818      	ldr	r0, [r3, #0]
   b7d7c:	6028      	str	r0, [r5, #0]
    return value_;
   b7d7e:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b7d80:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b7d84:	f8d9 3000 	ldr.w	r3, [r9]
   b7d88:	8a9b      	ldrh	r3, [r3, #20]
   b7d8a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b7d8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7d90:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b7d92:	4b31      	ldr	r3, [pc, #196]	; (b7e58 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7d94:	2200      	movs	r2, #0
   b7d96:	1da1      	adds	r1, r4, #6
   b7d98:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b7d9a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7d9e:	f7fe fa57 	bl	b6250 <hal_ble_gatt_server_add_characteristic>
   b7da2:	2800      	cmp	r0, #0
   b7da4:	f47f af60 	bne.w	b7c68 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b7da8:	2301      	movs	r3, #1
   b7daa:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b7dac:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b7dae:	4639      	mov	r1, r7
        return characteristics_;
   b7db0:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b7db2:	a80d      	add	r0, sp, #52	; 0x34
   b7db4:	f7ff fb13 	bl	b73de <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7db8:	4620      	mov	r0, r4
   b7dba:	a90d      	add	r1, sp, #52	; 0x34
   b7dbc:	f7ff ff1b 	bl	b7bf6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b7dc0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7dc2:	a80e      	add	r0, sp, #56	; 0x38
   b7dc4:	f7ff fb2d 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7dc8:	2c00      	cmp	r4, #0
   b7dca:	f47f af4d 	bne.w	b7c68 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b7dce:	2320      	movs	r3, #32
   b7dd0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b7dd4:	4b21      	ldr	r3, [pc, #132]	; (b7e5c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b7dd6:	9300      	str	r3, [sp, #0]
   b7dd8:	aa0d      	add	r2, sp, #52	; 0x34
   b7dda:	4623      	mov	r3, r4
   b7ddc:	e777      	b.n	b7cce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b7dde:	4639      	mov	r1, r7
   b7de0:	4640      	mov	r0, r8
   b7de2:	f7ff fafc 	bl	b73de <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7de6:	a80c      	add	r0, sp, #48	; 0x30
   b7de8:	f7ff fb1b 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7dec:	e740      	b.n	b7c70 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b7dee:	a80b      	add	r0, sp, #44	; 0x2c
   b7df0:	f7ff f97a 	bl	b70e8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b7df4:	4651      	mov	r1, sl
   b7df6:	a815      	add	r0, sp, #84	; 0x54
   b7df8:	f7fe ffe8 	bl	b6dcc <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b7dfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7dfe:	2300      	movs	r3, #0
   b7e00:	3214      	adds	r2, #20
   b7e02:	a915      	add	r1, sp, #84	; 0x54
   b7e04:	2001      	movs	r0, #1
   b7e06:	f7fe f9fb 	bl	b6200 <hal_ble_gatt_server_add_service>
   b7e0a:	2800      	cmp	r0, #0
   b7e0c:	d1e7      	bne.n	b7dde <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b7e0e:	6835      	ldr	r5, [r6, #0]
   b7e10:	a90b      	add	r1, sp, #44	; 0x2c
   b7e12:	a80d      	add	r0, sp, #52	; 0x34
   b7e14:	f7ff faf1 	bl	b73fa <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b7e18:	4628      	mov	r0, r5
   b7e1a:	a90d      	add	r1, sp, #52	; 0x34
   b7e1c:	f7ff fe7c 	bl	b7b18 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7e20:	4605      	mov	r5, r0
   b7e22:	a80e      	add	r0, sp, #56	; 0x38
   b7e24:	f7ff fafd 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7e28:	2d00      	cmp	r5, #0
   b7e2a:	d0d8      	beq.n	b7dde <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b7e2c:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b7e2e:	6853      	ldr	r3, [r2, #4]
   b7e30:	6812      	ldr	r2, [r2, #0]
   b7e32:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b7e36:	3b01      	subs	r3, #1
   b7e38:	a80c      	add	r0, sp, #48	; 0x30
   b7e3a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b7e3e:	f7ff faf0 	bl	b7422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7e42:	e76b      	b.n	b7d1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b7e44:	000baa23 	.word	0x000baa23
   b7e48:	000ba982 	.word	0x000ba982
   b7e4c:	000baaea 	.word	0x000baaea
   b7e50:	2003e634 	.word	0x2003e634
   b7e54:	002c0003 	.word	0x002c0003
   b7e58:	000b72a1 	.word	0x000b72a1
   b7e5c:	000baa4e 	.word	0x000baa4e

000b7e60 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   b7e60:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   b7e62:	4c06      	ldr	r4, [pc, #24]	; (b7e7c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   b7e64:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   b7e66:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   b7e68:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   b7e6a:	f7fe fa41 	bl	b62f0 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   b7e6e:	4620      	mov	r0, r4
   b7e70:	4a03      	ldr	r2, [pc, #12]	; (b7e80 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   b7e72:	4904      	ldr	r1, [pc, #16]	; (b7e84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   b7e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   b7e78:	f001 bc5c 	b.w	b9734 <__aeabi_atexit>
   b7e7c:	2003e638 	.word	0x2003e638
   b7e80:	2003da30 	.word	0x2003da30
   b7e84:	000b6a9d 	.word	0x000b6a9d

000b7e88 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7e88:	2200      	movs	r2, #0
   b7e8a:	6840      	ldr	r0, [r0, #4]
   b7e8c:	4611      	mov	r1, r2
   b7e8e:	f7fe bd1f 	b.w	b68d0 <network_listening>

000b7e92 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7e92:	2200      	movs	r2, #0
   b7e94:	6840      	ldr	r0, [r0, #4]
   b7e96:	4611      	mov	r1, r2
   b7e98:	f7fe bd42 	b.w	b6920 <network_get_listen_timeout>

000b7e9c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7e9c:	6840      	ldr	r0, [r0, #4]
   b7e9e:	2200      	movs	r2, #0
   b7ea0:	f7fe bd36 	b.w	b6910 <network_set_listen_timeout>

000b7ea4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7ea4:	6840      	ldr	r0, [r0, #4]
   b7ea6:	2200      	movs	r2, #0
   b7ea8:	f081 0101 	eor.w	r1, r1, #1
   b7eac:	f7fe bd08 	b.w	b68c0 <network_listen>

000b7eb0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7eb0:	2300      	movs	r3, #0
   b7eb2:	6840      	ldr	r0, [r0, #4]
   b7eb4:	461a      	mov	r2, r3
   b7eb6:	4619      	mov	r1, r3
   b7eb8:	f7fe bcfa 	b.w	b68b0 <network_off>

000b7ebc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7ebc:	2300      	movs	r3, #0
   b7ebe:	6840      	ldr	r0, [r0, #4]
   b7ec0:	461a      	mov	r2, r3
   b7ec2:	4619      	mov	r1, r3
   b7ec4:	f7fe bcec 	b.w	b68a0 <network_on>

000b7ec8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7ec8:	2200      	movs	r2, #0
   b7eca:	6840      	ldr	r0, [r0, #4]
   b7ecc:	4611      	mov	r1, r2
   b7ece:	f7fe bcdf 	b.w	b6890 <network_ready>

000b7ed2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7ed2:	2200      	movs	r2, #0
   b7ed4:	6840      	ldr	r0, [r0, #4]
   b7ed6:	4611      	mov	r1, r2
   b7ed8:	f7fe bcca 	b.w	b6870 <network_connecting>

000b7edc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7edc:	6840      	ldr	r0, [r0, #4]
   b7ede:	2200      	movs	r2, #0
   b7ee0:	2102      	movs	r1, #2
   b7ee2:	f7fe bccd 	b.w	b6880 <network_disconnect>

000b7ee6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7ee6:	2300      	movs	r3, #0
   b7ee8:	6840      	ldr	r0, [r0, #4]
   b7eea:	461a      	mov	r2, r3
   b7eec:	f7fe bcb8 	b.w	b6860 <network_connect>

000b7ef0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7ef0:	4b02      	ldr	r3, [pc, #8]	; (b7efc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7ef2:	2203      	movs	r2, #3
   b7ef4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7ef6:	4a02      	ldr	r2, [pc, #8]	; (b7f00 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7ef8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7efa:	4770      	bx	lr
   b7efc:	2003e640 	.word	0x2003e640
   b7f00:	000bab14 	.word	0x000bab14

000b7f04 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7f04:	4770      	bx	lr

000b7f06 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f08:	4606      	mov	r6, r0
   b7f0a:	4615      	mov	r5, r2
   b7f0c:	460c      	mov	r4, r1
   b7f0e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7f10:	42bc      	cmp	r4, r7
   b7f12:	d006      	beq.n	b7f22 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7f14:	6833      	ldr	r3, [r6, #0]
   b7f16:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7f1a:	689b      	ldr	r3, [r3, #8]
   b7f1c:	4630      	mov	r0, r6
   b7f1e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7f20:	e7f6      	b.n	b7f10 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7f22:	4628      	mov	r0, r5
   b7f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7f26 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7f26:	7c00      	ldrb	r0, [r0, #16]
   b7f28:	2200      	movs	r2, #0
   b7f2a:	f7fe ba79 	b.w	b6420 <hal_i2c_write>

000b7f2e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7f2e:	7c00      	ldrb	r0, [r0, #16]
   b7f30:	2100      	movs	r1, #0
   b7f32:	f7fe ba7d 	b.w	b6430 <hal_i2c_available>

000b7f36 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7f36:	7c00      	ldrb	r0, [r0, #16]
   b7f38:	2100      	movs	r1, #0
   b7f3a:	f7fe ba81 	b.w	b6440 <hal_i2c_read>

000b7f3e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7f3e:	7c00      	ldrb	r0, [r0, #16]
   b7f40:	2100      	movs	r1, #0
   b7f42:	f7fe ba85 	b.w	b6450 <hal_i2c_peek>

000b7f46 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7f46:	7c00      	ldrb	r0, [r0, #16]
   b7f48:	2100      	movs	r1, #0
   b7f4a:	f7fe ba89 	b.w	b6460 <hal_i2c_flush>

000b7f4e <_ZN7TwoWireD0Ev>:
   b7f4e:	b510      	push	{r4, lr}
   b7f50:	2114      	movs	r1, #20
   b7f52:	4604      	mov	r4, r0
   b7f54:	f001 fbf3 	bl	b973e <_ZdlPvj>
   b7f58:	4620      	mov	r0, r4
   b7f5a:	bd10      	pop	{r4, pc}

000b7f5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7f5c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7f62:	4604      	mov	r4, r0
   b7f64:	4608      	mov	r0, r1
   b7f66:	2100      	movs	r1, #0
   b7f68:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7f6c:	4b03      	ldr	r3, [pc, #12]	; (b7f7c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7f6e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7f70:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b7f72:	4611      	mov	r1, r2
   b7f74:	f7fe fa84 	bl	b6480 <hal_i2c_init>
}
   b7f78:	4620      	mov	r0, r4
   b7f7a:	bd10      	pop	{r4, pc}
   b7f7c:	000bab50 	.word	0x000bab50

000b7f80 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7f80:	2300      	movs	r3, #0
   b7f82:	7c00      	ldrb	r0, [r0, #16]
   b7f84:	461a      	mov	r2, r3
   b7f86:	4619      	mov	r1, r3
   b7f88:	f7fe ba32 	b.w	b63f0 <hal_i2c_begin>

000b7f8c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b7f8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b7f8e:	2200      	movs	r2, #0
   b7f90:	2314      	movs	r3, #20
   b7f92:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b7f96:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b7f9a:	780b      	ldrb	r3, [r1, #0]
   b7f9c:	f88d 3008 	strb.w	r3, [sp, #8]
   b7fa0:	684b      	ldr	r3, [r1, #4]
   b7fa2:	9303      	str	r3, [sp, #12]
   b7fa4:	68cb      	ldr	r3, [r1, #12]
   b7fa6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b7fa8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b7faa:	7a0b      	ldrb	r3, [r1, #8]
   b7fac:	9305      	str	r3, [sp, #20]
   b7fae:	a901      	add	r1, sp, #4
   b7fb0:	f7fe fa6e 	bl	b6490 <hal_i2c_request_ex>
}
   b7fb4:	b007      	add	sp, #28
   b7fb6:	f85d fb04 	ldr.w	pc, [sp], #4

000b7fba <_ZN7TwoWire11requestFromEhjh>:
{
   b7fba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b7fbc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b7fbe:	f88d 1000 	strb.w	r1, [sp]
   b7fc2:	f04f 0164 	mov.w	r1, #100	; 0x64
   b7fc6:	9103      	str	r1, [sp, #12]
   b7fc8:	bf18      	it	ne
   b7fca:	2301      	movne	r3, #1
   b7fcc:	4669      	mov	r1, sp
    size_ = size;
   b7fce:	9201      	str	r2, [sp, #4]
   b7fd0:	f88d 3008 	strb.w	r3, [sp, #8]
   b7fd4:	f7ff ffda 	bl	b7f8c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b7fd8:	b005      	add	sp, #20
   b7fda:	f85d fb04 	ldr.w	pc, [sp], #4

000b7fde <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b7fde:	2301      	movs	r3, #1
   b7fe0:	f7ff bfeb 	b.w	b7fba <_ZN7TwoWire11requestFromEhjh>

000b7fe4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7fe4:	7c00      	ldrb	r0, [r0, #16]
   b7fe6:	2200      	movs	r2, #0
   b7fe8:	f7fe ba0a 	b.w	b6400 <hal_i2c_begin_transmission>

000b7fec <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7fec:	b2c9      	uxtb	r1, r1
   b7fee:	f7ff bff9 	b.w	b7fe4 <_ZN7TwoWire17beginTransmissionEh>

000b7ff2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7ff2:	7c00      	ldrb	r0, [r0, #16]
   b7ff4:	2200      	movs	r2, #0
   b7ff6:	f7fe ba0b 	b.w	b6410 <hal_i2c_end_transmission>

000b7ffa <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7ffa:	2101      	movs	r1, #1
   b7ffc:	f7ff bff9 	b.w	b7ff2 <_ZN7TwoWire15endTransmissionEh>

000b8000 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8000:	4770      	bx	lr

000b8002 <_ZN9IPAddressD0Ev>:
   b8002:	b510      	push	{r4, lr}
   b8004:	2118      	movs	r1, #24
   b8006:	4604      	mov	r4, r0
   b8008:	f001 fb99 	bl	b973e <_ZdlPvj>
   b800c:	4620      	mov	r0, r4
   b800e:	bd10      	pop	{r4, pc}

000b8010 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8010:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8012:	7d03      	ldrb	r3, [r0, #20]
   b8014:	2b06      	cmp	r3, #6
{
   b8016:	b08d      	sub	sp, #52	; 0x34
   b8018:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b801a:	f100 0704 	add.w	r7, r0, #4
   b801e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8022:	d012      	beq.n	b804a <_ZNK9IPAddress7printToER5Print+0x3a>
   b8024:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8028:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b802c:	220a      	movs	r2, #10
   b802e:	4630      	mov	r0, r6
   b8030:	f000 f979 	bl	b8326 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8034:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8036:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8038:	d019      	beq.n	b806e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b803a:	2c00      	cmp	r4, #0
   b803c:	d0f4      	beq.n	b8028 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b803e:	212e      	movs	r1, #46	; 0x2e
   b8040:	4630      	mov	r0, r6
   b8042:	f000 f951 	bl	b82e8 <_ZN5Print5printEc>
   b8046:	4404      	add	r4, r0
   b8048:	e7ee      	b.n	b8028 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b804a:	232f      	movs	r3, #47	; 0x2f
   b804c:	466a      	mov	r2, sp
   b804e:	4639      	mov	r1, r7
   b8050:	200a      	movs	r0, #10
		buf[0] = 0;
   b8052:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8056:	f7fe fa2b 	bl	b64b0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b805a:	4668      	mov	r0, sp
   b805c:	f001 ff9a 	bl	b9f94 <strlen>
   b8060:	6833      	ldr	r3, [r6, #0]
   b8062:	4602      	mov	r2, r0
   b8064:	68db      	ldr	r3, [r3, #12]
   b8066:	4669      	mov	r1, sp
   b8068:	4630      	mov	r0, r6
   b806a:	4798      	blx	r3
   b806c:	4604      	mov	r4, r0
    }
    return n;
}
   b806e:	4620      	mov	r0, r4
   b8070:	b00d      	add	sp, #52	; 0x34
   b8072:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8074 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8074:	b510      	push	{r4, lr}
   b8076:	4b05      	ldr	r3, [pc, #20]	; (b808c <_ZN9IPAddressC1Ev+0x18>)
   b8078:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b807a:	2211      	movs	r2, #17
   b807c:	f840 3b04 	str.w	r3, [r0], #4
   b8080:	2100      	movs	r1, #0
   b8082:	f001 ff3f 	bl	b9f04 <memset>
}
   b8086:	4620      	mov	r0, r4
   b8088:	bd10      	pop	{r4, pc}
   b808a:	bf00      	nop
   b808c:	000bab78 	.word	0x000bab78

000b8090 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8090:	4603      	mov	r3, r0
   b8092:	4a07      	ldr	r2, [pc, #28]	; (b80b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8094:	b510      	push	{r4, lr}
   b8096:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b809a:	f101 0210 	add.w	r2, r1, #16
   b809e:	f851 4b04 	ldr.w	r4, [r1], #4
   b80a2:	f843 4b04 	str.w	r4, [r3], #4
   b80a6:	4291      	cmp	r1, r2
   b80a8:	d1f9      	bne.n	b809e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b80aa:	780a      	ldrb	r2, [r1, #0]
   b80ac:	701a      	strb	r2, [r3, #0]
}
   b80ae:	bd10      	pop	{r4, pc}
   b80b0:	000bab78 	.word	0x000bab78

000b80b4 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b80b4:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b80b6:	2b04      	cmp	r3, #4
   b80b8:	d104      	bne.n	b80c4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b80ba:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b80bc:	3800      	subs	r0, #0
   b80be:	bf18      	it	ne
   b80c0:	2001      	movne	r0, #1
   b80c2:	4770      	bx	lr
    } else if (version() == 6) {
   b80c4:	2b06      	cmp	r3, #6
   b80c6:	d107      	bne.n	b80d8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b80c8:	6843      	ldr	r3, [r0, #4]
   b80ca:	b93b      	cbnz	r3, b80dc <_ZNK9IPAddresscvbEv+0x28>
   b80cc:	6883      	ldr	r3, [r0, #8]
   b80ce:	b92b      	cbnz	r3, b80dc <_ZNK9IPAddresscvbEv+0x28>
   b80d0:	68c3      	ldr	r3, [r0, #12]
   b80d2:	b91b      	cbnz	r3, b80dc <_ZNK9IPAddresscvbEv+0x28>
   b80d4:	6900      	ldr	r0, [r0, #16]
   b80d6:	e7f1      	b.n	b80bc <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b80d8:	2000      	movs	r0, #0
   b80da:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b80dc:	2001      	movs	r0, #1
}
   b80de:	4770      	bx	lr

000b80e0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b80e0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b80e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b80e6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b80ea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b80ee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b80f2:	2304      	movs	r3, #4
   b80f4:	6041      	str	r1, [r0, #4]
   b80f6:	7503      	strb	r3, [r0, #20]
}
   b80f8:	bd10      	pop	{r4, pc}
	...

000b80fc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b80fc:	b507      	push	{r0, r1, r2, lr}
   b80fe:	4b06      	ldr	r3, [pc, #24]	; (b8118 <_ZN9IPAddressC1EPKh+0x1c>)
   b8100:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8102:	78cb      	ldrb	r3, [r1, #3]
   b8104:	9300      	str	r3, [sp, #0]
   b8106:	788b      	ldrb	r3, [r1, #2]
   b8108:	784a      	ldrb	r2, [r1, #1]
   b810a:	7809      	ldrb	r1, [r1, #0]
   b810c:	f7ff ffe8 	bl	b80e0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8110:	b003      	add	sp, #12
   b8112:	f85d fb04 	ldr.w	pc, [sp], #4
   b8116:	bf00      	nop
   b8118:	000bab78 	.word	0x000bab78

000b811c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b811c:	4b01      	ldr	r3, [pc, #4]	; (b8124 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b811e:	4a02      	ldr	r2, [pc, #8]	; (b8128 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8120:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b8122:	4770      	bx	lr
   b8124:	2003e648 	.word	0x2003e648
   b8128:	000bab84 	.word	0x000bab84

000b812c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b812c:	2300      	movs	r3, #0
   b812e:	6840      	ldr	r0, [r0, #4]
   b8130:	461a      	mov	r2, r3
   b8132:	f7fe bb95 	b.w	b6860 <network_connect>

000b8136 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b8136:	6840      	ldr	r0, [r0, #4]
   b8138:	2200      	movs	r2, #0
   b813a:	2102      	movs	r1, #2
   b813c:	f7fe bba0 	b.w	b6880 <network_disconnect>

000b8140 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8140:	2200      	movs	r2, #0
   b8142:	6840      	ldr	r0, [r0, #4]
   b8144:	4611      	mov	r1, r2
   b8146:	f7fe bb93 	b.w	b6870 <network_connecting>

000b814a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b814a:	2200      	movs	r2, #0
   b814c:	6840      	ldr	r0, [r0, #4]
   b814e:	4611      	mov	r1, r2
   b8150:	f7fe bb9e 	b.w	b6890 <network_ready>

000b8154 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b8154:	2300      	movs	r3, #0
   b8156:	6840      	ldr	r0, [r0, #4]
   b8158:	461a      	mov	r2, r3
   b815a:	4619      	mov	r1, r3
   b815c:	f7fe bba0 	b.w	b68a0 <network_on>

000b8160 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8160:	2300      	movs	r3, #0
   b8162:	6840      	ldr	r0, [r0, #4]
   b8164:	461a      	mov	r2, r3
   b8166:	4619      	mov	r1, r3
   b8168:	f7fe bba2 	b.w	b68b0 <network_off>

000b816c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b816c:	6840      	ldr	r0, [r0, #4]
   b816e:	2100      	movs	r1, #0
   b8170:	f7fe bbde 	b.w	b6930 <network_is_on>

000b8174 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8174:	6840      	ldr	r0, [r0, #4]
   b8176:	2100      	movs	r1, #0
   b8178:	f7fe bbe2 	b.w	b6940 <network_is_off>

000b817c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b817c:	6840      	ldr	r0, [r0, #4]
   b817e:	2200      	movs	r2, #0
   b8180:	f081 0101 	eor.w	r1, r1, #1
   b8184:	f7fe bb9c 	b.w	b68c0 <network_listen>

000b8188 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8188:	6840      	ldr	r0, [r0, #4]
   b818a:	2200      	movs	r2, #0
   b818c:	f7fe bbc0 	b.w	b6910 <network_set_listen_timeout>

000b8190 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b8190:	2200      	movs	r2, #0
   b8192:	6840      	ldr	r0, [r0, #4]
   b8194:	4611      	mov	r1, r2
   b8196:	f7fe bbc3 	b.w	b6920 <network_get_listen_timeout>

000b819a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b819a:	2200      	movs	r2, #0
   b819c:	6840      	ldr	r0, [r0, #4]
   b819e:	4611      	mov	r1, r2
   b81a0:	f7fe bb96 	b.w	b68d0 <network_listening>

000b81a4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b81a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b81a8:	b095      	sub	sp, #84	; 0x54
   b81aa:	4614      	mov	r4, r2
   b81ac:	460d      	mov	r5, r1
   b81ae:	4607      	mov	r7, r0
    IPAddress addr;
   b81b0:	f7ff ff60 	bl	b8074 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b81b4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b81b6:	221c      	movs	r2, #28
   b81b8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b81ba:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b81bc:	f001 fea2 	bl	b9f04 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b81c0:	2340      	movs	r3, #64	; 0x40
   b81c2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b81c4:	4620      	mov	r0, r4
   b81c6:	466b      	mov	r3, sp
   b81c8:	aa0c      	add	r2, sp, #48	; 0x30
   b81ca:	2100      	movs	r1, #0
   b81cc:	f7fe f990 	bl	b64f0 <netdb_getaddrinfo>
    if (!r) {
   b81d0:	4604      	mov	r4, r0
   b81d2:	2800      	cmp	r0, #0
   b81d4:	d14b      	bne.n	b826e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b81d6:	4602      	mov	r2, r0
   b81d8:	2101      	movs	r1, #1
   b81da:	6868      	ldr	r0, [r5, #4]
   b81dc:	f7fe fb58 	bl	b6890 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b81e0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b81e2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b81e4:	4622      	mov	r2, r4
   b81e6:	6868      	ldr	r0, [r5, #4]
   b81e8:	f7fe fb52 	bl	b6890 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b81ec:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b81ee:	4681      	mov	r9, r0
        bool ok = false;
   b81f0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b81f2:	2e00      	cmp	r6, #0
   b81f4:	d03b      	beq.n	b826e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b81f6:	2900      	cmp	r1, #0
   b81f8:	d139      	bne.n	b826e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b81fa:	6873      	ldr	r3, [r6, #4]
   b81fc:	2b02      	cmp	r3, #2
   b81fe:	d003      	beq.n	b8208 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8200:	2b0a      	cmp	r3, #10
   b8202:	d011      	beq.n	b8228 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8204:	69f6      	ldr	r6, [r6, #28]
   b8206:	e7f4      	b.n	b81f2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8208:	f1b8 0f00 	cmp.w	r8, #0
   b820c:	d0fa      	beq.n	b8204 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b820e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8210:	a806      	add	r0, sp, #24
   b8212:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b8214:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b8216:	f7ff ff71 	bl	b80fc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b821a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b821c:	1d3c      	adds	r4, r7, #4
   b821e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8220:	682b      	ldr	r3, [r5, #0]
   b8222:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8224:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b8226:	e7ed      	b.n	b8204 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8228:	f1b9 0f00 	cmp.w	r9, #0
   b822c:	d0ea      	beq.n	b8204 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b822e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8230:	2210      	movs	r2, #16
   b8232:	a801      	add	r0, sp, #4
   b8234:	f001 fe66 	bl	b9f04 <memset>
                    a.v = 6;
   b8238:	2306      	movs	r3, #6
   b823a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b823e:	ad01      	add	r5, sp, #4
   b8240:	f104 0308 	add.w	r3, r4, #8
   b8244:	3418      	adds	r4, #24
   b8246:	6818      	ldr	r0, [r3, #0]
   b8248:	6859      	ldr	r1, [r3, #4]
   b824a:	462a      	mov	r2, r5
   b824c:	c203      	stmia	r2!, {r0, r1}
   b824e:	3308      	adds	r3, #8
   b8250:	42a3      	cmp	r3, r4
   b8252:	4615      	mov	r5, r2
   b8254:	d1f7      	bne.n	b8246 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b8256:	a901      	add	r1, sp, #4
   b8258:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b825a:	ad07      	add	r5, sp, #28
   b825c:	f7ff ff18 	bl	b8090 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8262:	1d3c      	adds	r4, r7, #4
   b8264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8266:	682b      	ldr	r3, [r5, #0]
   b8268:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b826a:	4649      	mov	r1, r9
   b826c:	e7ca      	b.n	b8204 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b826e:	9800      	ldr	r0, [sp, #0]
   b8270:	f7fe f936 	bl	b64e0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8274:	4638      	mov	r0, r7
   b8276:	b015      	add	sp, #84	; 0x54
   b8278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b827c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b827c:	4b02      	ldr	r3, [pc, #8]	; (b8288 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b827e:	4a03      	ldr	r2, [pc, #12]	; (b828c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8280:	601a      	str	r2, [r3, #0]
   b8282:	2200      	movs	r2, #0
   b8284:	605a      	str	r2, [r3, #4]

} // spark
   b8286:	4770      	bx	lr
   b8288:	2003e64c 	.word	0x2003e64c
   b828c:	000bab90 	.word	0x000bab90

000b8290 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8292:	4606      	mov	r6, r0
   b8294:	460d      	mov	r5, r1
  size_t n = 0;
   b8296:	188f      	adds	r7, r1, r2
   b8298:	2400      	movs	r4, #0
  while (size--) {
   b829a:	42bd      	cmp	r5, r7
   b829c:	d00c      	beq.n	b82b8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b829e:	6833      	ldr	r3, [r6, #0]
   b82a0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b82a4:	689b      	ldr	r3, [r3, #8]
   b82a6:	4630      	mov	r0, r6
   b82a8:	4798      	blx	r3
     if (chunk>=0)
   b82aa:	1e03      	subs	r3, r0, #0
   b82ac:	db01      	blt.n	b82b2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b82ae:	441c      	add	r4, r3
  while (size--) {
   b82b0:	e7f3      	b.n	b829a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b82b2:	2c00      	cmp	r4, #0
   b82b4:	bf08      	it	eq
   b82b6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b82b8:	4620      	mov	r0, r4
   b82ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b82bc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b82bc:	b513      	push	{r0, r1, r4, lr}
   b82be:	4604      	mov	r4, r0
    }
   b82c0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b82c2:	b159      	cbz	r1, b82dc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b82c4:	9101      	str	r1, [sp, #4]
   b82c6:	f001 fe65 	bl	b9f94 <strlen>
   b82ca:	6823      	ldr	r3, [r4, #0]
   b82cc:	9901      	ldr	r1, [sp, #4]
   b82ce:	68db      	ldr	r3, [r3, #12]
   b82d0:	4602      	mov	r2, r0
   b82d2:	4620      	mov	r0, r4
    }
   b82d4:	b002      	add	sp, #8
   b82d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b82da:	4718      	bx	r3
    }
   b82dc:	b002      	add	sp, #8
   b82de:	bd10      	pop	{r4, pc}

000b82e0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b82e0:	b508      	push	{r3, lr}
  return write(str);
   b82e2:	f7ff ffeb 	bl	b82bc <_ZN5Print5writeEPKc>
}
   b82e6:	bd08      	pop	{r3, pc}

000b82e8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b82e8:	6803      	ldr	r3, [r0, #0]
   b82ea:	689b      	ldr	r3, [r3, #8]
   b82ec:	4718      	bx	r3

000b82ee <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   b82ee:	680a      	ldr	r2, [r1, #0]
 {
   b82f0:	460b      	mov	r3, r1
   return x.printTo(*this);
   b82f2:	6812      	ldr	r2, [r2, #0]
   b82f4:	4601      	mov	r1, r0
   b82f6:	4618      	mov	r0, r3
   b82f8:	4710      	bx	r2

000b82fa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b82fa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b82fc:	210d      	movs	r1, #13
{
   b82fe:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8300:	f7ff fff2 	bl	b82e8 <_ZN5Print5printEc>
  n += print('\n');
   b8304:	210a      	movs	r1, #10
  size_t n = print('\r');
   b8306:	4604      	mov	r4, r0
  n += print('\n');
   b8308:	4628      	mov	r0, r5
   b830a:	f7ff ffed 	bl	b82e8 <_ZN5Print5printEc>
  return n;
}
   b830e:	4420      	add	r0, r4
   b8310:	bd38      	pop	{r3, r4, r5, pc}

000b8312 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b8312:	b538      	push	{r3, r4, r5, lr}
   b8314:	4605      	mov	r5, r0
  return write(str);
   b8316:	f7ff ffd1 	bl	b82bc <_ZN5Print5writeEPKc>
   b831a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b831c:	4628      	mov	r0, r5
   b831e:	f7ff ffec 	bl	b82fa <_ZN5Print7printlnEv>
  return n;
}
   b8322:	4420      	add	r0, r4
   b8324:	bd38      	pop	{r3, r4, r5, pc}

000b8326 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b8326:	b530      	push	{r4, r5, lr}
   b8328:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b832a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b832c:	2a01      	cmp	r2, #1
  *str = '\0';
   b832e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8332:	bf98      	it	ls
   b8334:	220a      	movls	r2, #10
   b8336:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8338:	460d      	mov	r5, r1
   b833a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b833e:	fb01 5312 	mls	r3, r1, r2, r5
   b8342:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8346:	2b09      	cmp	r3, #9
   b8348:	bf94      	ite	ls
   b834a:	3330      	addls	r3, #48	; 0x30
   b834c:	3337      	addhi	r3, #55	; 0x37
   b834e:	b2db      	uxtb	r3, r3
  } while(n);
   b8350:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8352:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b8356:	d9ef      	bls.n	b8338 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8358:	4621      	mov	r1, r4
   b835a:	f7ff ffaf 	bl	b82bc <_ZN5Print5writeEPKc>
}
   b835e:	b00b      	add	sp, #44	; 0x2c
   b8360:	bd30      	pop	{r4, r5, pc}

000b8362 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b8362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8366:	b086      	sub	sp, #24
   b8368:	af00      	add	r7, sp, #0
   b836a:	4605      	mov	r5, r0
   b836c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b836e:	1d38      	adds	r0, r7, #4
   b8370:	2114      	movs	r1, #20
{
   b8372:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8374:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8376:	f7fe fb0b 	bl	b6990 <vsnprintf>

    if (n<bufsize)
   b837a:	2813      	cmp	r0, #19
   b837c:	d80e      	bhi.n	b839c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b837e:	1d39      	adds	r1, r7, #4
   b8380:	4628      	mov	r0, r5
   b8382:	f7ff ff9b 	bl	b82bc <_ZN5Print5writeEPKc>
   b8386:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8388:	b11e      	cbz	r6, b8392 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b838a:	4628      	mov	r0, r5
   b838c:	f7ff ffb5 	bl	b82fa <_ZN5Print7printlnEv>
   b8390:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8392:	4620      	mov	r0, r4
   b8394:	3718      	adds	r7, #24
   b8396:	46bd      	mov	sp, r7
   b8398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b839c:	f100 0308 	add.w	r3, r0, #8
   b83a0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b83a4:	46e8      	mov	r8, sp
        char bigger[n+1];
   b83a6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b83aa:	4622      	mov	r2, r4
   b83ac:	1c41      	adds	r1, r0, #1
   b83ae:	683b      	ldr	r3, [r7, #0]
   b83b0:	4668      	mov	r0, sp
   b83b2:	f7fe faed 	bl	b6990 <vsnprintf>
  return write(str);
   b83b6:	4669      	mov	r1, sp
   b83b8:	4628      	mov	r0, r5
   b83ba:	f7ff ff7f 	bl	b82bc <_ZN5Print5writeEPKc>
   b83be:	4604      	mov	r4, r0
   b83c0:	46c5      	mov	sp, r8
   b83c2:	e7e1      	b.n	b8388 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b83c4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   b83c4:	b510      	push	{r4, lr}
   b83c6:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b83c8:	f7fe fc24 	bl	b6c14 <_ZNSt14_Function_baseD1Ev>
   b83cc:	4620      	mov	r0, r4
   b83ce:	bd10      	pop	{r4, pc}

000b83d0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b83d0:	4803      	ldr	r0, [pc, #12]	; (b83e0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   b83d2:	4a04      	ldr	r2, [pc, #16]	; (b83e4 <_GLOBAL__sub_I_RGB+0x14>)
   b83d4:	4904      	ldr	r1, [pc, #16]	; (b83e8 <_GLOBAL__sub_I_RGB+0x18>)
   b83d6:	2300      	movs	r3, #0
   b83d8:	6083      	str	r3, [r0, #8]
   b83da:	f001 b9ab 	b.w	b9734 <__aeabi_atexit>
   b83de:	bf00      	nop
   b83e0:	2003e654 	.word	0x2003e654
   b83e4:	2003da30 	.word	0x2003da30
   b83e8:	000b83c5 	.word	0x000b83c5

000b83ec <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b83ec:	2100      	movs	r1, #0
   b83ee:	f7fe b8ff 	b.w	b65f0 <hal_spi_release>

000b83f2 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b83f2:	2100      	movs	r1, #0
   b83f4:	f7fe b8f4 	b.w	b65e0 <hal_spi_acquire>

000b83f8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b83f8:	b510      	push	{r4, lr}
   b83fa:	4604      	mov	r4, r0
   b83fc:	4608      	mov	r0, r1
{
    _spi = spi;
   b83fe:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b8400:	f7fe f8d6 	bl	b65b0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b8404:	2300      	movs	r3, #0
   b8406:	6063      	str	r3, [r4, #4]
}
   b8408:	4620      	mov	r0, r4
   b840a:	bd10      	pop	{r4, pc}

000b840c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b840c:	b513      	push	{r0, r1, r4, lr}
   b840e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b8410:	7800      	ldrb	r0, [r0, #0]
   b8412:	f7ff ffee 	bl	b83f2 <_ZN8SPIClass4lockEv.isra.0>
   b8416:	b958      	cbnz	r0, b8430 <_ZN8SPIClass5beginEv+0x24>
   b8418:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b841a:	9001      	str	r0, [sp, #4]
   b841c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8420:	f7fe f89e 	bl	b6560 <hal_spi_begin>
        unlock();
   b8424:	9801      	ldr	r0, [sp, #4]
    }
}
   b8426:	b002      	add	sp, #8
   b8428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b842c:	f7ff bfde 	b.w	b83ec <_ZN8SPIClass6unlockEv.isra.0>
   b8430:	b002      	add	sp, #8
   b8432:	bd10      	pop	{r4, pc}

000b8434 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b8434:	b513      	push	{r0, r1, r4, lr}
   b8436:	4604      	mov	r4, r0
    if (!lock())
   b8438:	7800      	ldrb	r0, [r0, #0]
{
   b843a:	9101      	str	r1, [sp, #4]
    if (!lock())
   b843c:	f7ff ffd9 	bl	b83f2 <_ZN8SPIClass4lockEv.isra.0>
   b8440:	9901      	ldr	r1, [sp, #4]
   b8442:	b948      	cbnz	r0, b8458 <_ZN8SPIClass11setBitOrderEh+0x24>
   b8444:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b8446:	9001      	str	r0, [sp, #4]
   b8448:	f7fe f892 	bl	b6570 <hal_spi_set_bit_order>
        unlock();
   b844c:	9801      	ldr	r0, [sp, #4]
    }
}
   b844e:	b002      	add	sp, #8
   b8450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8454:	f7ff bfca 	b.w	b83ec <_ZN8SPIClass6unlockEv.isra.0>
   b8458:	b002      	add	sp, #8
   b845a:	bd10      	pop	{r4, pc}

000b845c <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b845c:	b513      	push	{r0, r1, r4, lr}
   b845e:	4604      	mov	r4, r0
    if (!lock())
   b8460:	7800      	ldrb	r0, [r0, #0]
{
   b8462:	9101      	str	r1, [sp, #4]
    if (!lock())
   b8464:	f7ff ffc5 	bl	b83f2 <_ZN8SPIClass4lockEv.isra.0>
   b8468:	9901      	ldr	r1, [sp, #4]
   b846a:	b948      	cbnz	r0, b8480 <_ZN8SPIClass11setDataModeEh+0x24>
   b846c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b846e:	9001      	str	r0, [sp, #4]
   b8470:	f7fe f886 	bl	b6580 <hal_spi_set_data_mode>
        unlock();
   b8474:	9801      	ldr	r0, [sp, #4]
    }
}
   b8476:	b002      	add	sp, #8
   b8478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b847c:	f7ff bfb6 	b.w	b83ec <_ZN8SPIClass6unlockEv.isra.0>
   b8480:	b002      	add	sp, #8
   b8482:	bd10      	pop	{r4, pc}

000b8484 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b8484:	0840      	lsrs	r0, r0, #1
{
   b8486:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b8488:	6018      	str	r0, [r3, #0]
   b848a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b848c:	6818      	ldr	r0, [r3, #0]
   b848e:	4288      	cmp	r0, r1
   b8490:	b2e5      	uxtb	r5, r4
   b8492:	d906      	bls.n	b84a2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b8494:	3401      	adds	r4, #1
   b8496:	2c08      	cmp	r4, #8
   b8498:	d002      	beq.n	b84a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b849a:	0840      	lsrs	r0, r0, #1
   b849c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b849e:	e7f5      	b.n	b848c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b84a0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b84a2:	4b02      	ldr	r3, [pc, #8]	; (b84ac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b84a4:	5d5b      	ldrb	r3, [r3, r5]
   b84a6:	7013      	strb	r3, [r2, #0]
}
   b84a8:	bd30      	pop	{r4, r5, pc}
   b84aa:	bf00      	nop
   b84ac:	000babc4 	.word	0x000babc4

000b84b0 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b84b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b84b4:	b088      	sub	sp, #32
    unsigned clock = 0;
   b84b6:	2300      	movs	r3, #0
{
   b84b8:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b84ba:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b84bc:	9302      	str	r3, [sp, #8]
{
   b84be:	460e      	mov	r6, r1
   b84c0:	4617      	mov	r7, r2
    if (!lock())
   b84c2:	f7ff ff96 	bl	b83f2 <_ZN8SPIClass4lockEv.isra.0>
   b84c6:	4605      	mov	r5, r0
   b84c8:	bb00      	cbnz	r0, b850c <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b84ca:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b84ce:	4601      	mov	r1, r0
   b84d0:	2214      	movs	r2, #20
   b84d2:	a803      	add	r0, sp, #12
   b84d4:	f001 fd16 	bl	b9f04 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b84d8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b84da:	462a      	mov	r2, r5
   b84dc:	a903      	add	r1, sp, #12
   b84de:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b84e0:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b84e4:	f7fe f874 	bl	b65d0 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b84e8:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b84ea:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b84ee:	ab02      	add	r3, sp, #8
   b84f0:	f10d 0207 	add.w	r2, sp, #7
   b84f4:	fb07 f106 	mul.w	r1, r7, r6
   b84f8:	f7ff ffc4 	bl	b8484 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b84fc:	7820      	ldrb	r0, [r4, #0]
   b84fe:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b8502:	f7fe f845 	bl	b6590 <hal_spi_set_clock_divider>
        unlock();
   b8506:	7820      	ldrb	r0, [r4, #0]
   b8508:	f7ff ff70 	bl	b83ec <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b850c:	9802      	ldr	r0, [sp, #8]
   b850e:	b008      	add	sp, #32
   b8510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8514 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b8514:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b8516:	7800      	ldrb	r0, [r0, #0]
   b8518:	f7fe f842 	bl	b65a0 <hal_spi_transfer>
}
   b851c:	b2c0      	uxtb	r0, r0
   b851e:	bd08      	pop	{r3, pc}

000b8520 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8520:	b510      	push	{r4, lr}
   b8522:	4604      	mov	r4, r0
{
	free(buffer);
   b8524:	6800      	ldr	r0, [r0, #0]
   b8526:	f7fe fa1b 	bl	b6960 <free>
}
   b852a:	4620      	mov	r0, r4
   b852c:	bd10      	pop	{r4, pc}

000b852e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b852e:	b510      	push	{r4, lr}
   b8530:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8532:	6800      	ldr	r0, [r0, #0]
   b8534:	b108      	cbz	r0, b853a <_ZN6String10invalidateEv+0xc>
   b8536:	f7fe fa13 	bl	b6960 <free>
	buffer = NULL;
   b853a:	2300      	movs	r3, #0
	capacity = len = 0;
   b853c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8540:	6023      	str	r3, [r4, #0]
}
   b8542:	bd10      	pop	{r4, pc}

000b8544 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8544:	b538      	push	{r3, r4, r5, lr}
   b8546:	4604      	mov	r4, r0
   b8548:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b854a:	6800      	ldr	r0, [r0, #0]
   b854c:	3101      	adds	r1, #1
   b854e:	f7fe fa0f 	bl	b6970 <realloc>
	if (newbuffer) {
   b8552:	b110      	cbz	r0, b855a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8554:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8558:	2001      	movs	r0, #1
	}
	return 0;
}
   b855a:	bd38      	pop	{r3, r4, r5, pc}

000b855c <_ZN6String7reserveEj>:
{
   b855c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b855e:	6803      	ldr	r3, [r0, #0]
{
   b8560:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8562:	b123      	cbz	r3, b856e <_ZN6String7reserveEj+0x12>
   b8564:	6843      	ldr	r3, [r0, #4]
   b8566:	428b      	cmp	r3, r1
   b8568:	d301      	bcc.n	b856e <_ZN6String7reserveEj+0x12>
   b856a:	2001      	movs	r0, #1
}
   b856c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b856e:	4620      	mov	r0, r4
   b8570:	f7ff ffe8 	bl	b8544 <_ZN6String12changeBufferEj>
   b8574:	2800      	cmp	r0, #0
   b8576:	d0f9      	beq.n	b856c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8578:	68a3      	ldr	r3, [r4, #8]
   b857a:	2b00      	cmp	r3, #0
   b857c:	d1f5      	bne.n	b856a <_ZN6String7reserveEj+0xe>
   b857e:	6822      	ldr	r2, [r4, #0]
   b8580:	7013      	strb	r3, [r2, #0]
   b8582:	e7f2      	b.n	b856a <_ZN6String7reserveEj+0xe>

000b8584 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8584:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8586:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8588:	4611      	mov	r1, r2
   b858a:	9201      	str	r2, [sp, #4]
{
   b858c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b858e:	f7ff ffe5 	bl	b855c <_ZN6String7reserveEj>
   b8592:	9a01      	ldr	r2, [sp, #4]
   b8594:	b928      	cbnz	r0, b85a2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8596:	4620      	mov	r0, r4
   b8598:	f7ff ffc9 	bl	b852e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b859c:	4620      	mov	r0, r4
   b859e:	b003      	add	sp, #12
   b85a0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b85a2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b85a4:	4629      	mov	r1, r5
   b85a6:	6820      	ldr	r0, [r4, #0]
   b85a8:	f001 fc84 	bl	b9eb4 <memcpy>
	buffer[len] = 0;
   b85ac:	6822      	ldr	r2, [r4, #0]
   b85ae:	68a3      	ldr	r3, [r4, #8]
   b85b0:	2100      	movs	r1, #0
   b85b2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b85b4:	e7f2      	b.n	b859c <_ZN6String4copyEPKcj+0x18>

000b85b6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b85b6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b85b8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b85ba:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b85be:	4604      	mov	r4, r0
	len = 0;
   b85c0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b85c2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b85c4:	b141      	cbz	r1, b85d8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b85c6:	4608      	mov	r0, r1
   b85c8:	9101      	str	r1, [sp, #4]
   b85ca:	f001 fce3 	bl	b9f94 <strlen>
   b85ce:	9901      	ldr	r1, [sp, #4]
   b85d0:	4602      	mov	r2, r0
   b85d2:	4620      	mov	r0, r4
   b85d4:	f7ff ffd6 	bl	b8584 <_ZN6String4copyEPKcj>
}
   b85d8:	4620      	mov	r0, r4
   b85da:	b002      	add	sp, #8
   b85dc:	bd10      	pop	{r4, pc}

000b85de <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b85de:	4288      	cmp	r0, r1
{
   b85e0:	b510      	push	{r4, lr}
   b85e2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b85e4:	d005      	beq.n	b85f2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b85e6:	680b      	ldr	r3, [r1, #0]
   b85e8:	b12b      	cbz	r3, b85f6 <_ZN6StringaSERKS_+0x18>
   b85ea:	688a      	ldr	r2, [r1, #8]
   b85ec:	4619      	mov	r1, r3
   b85ee:	f7ff ffc9 	bl	b8584 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b85f2:	4620      	mov	r0, r4
   b85f4:	bd10      	pop	{r4, pc}
	else invalidate();
   b85f6:	f7ff ff9a 	bl	b852e <_ZN6String10invalidateEv>
   b85fa:	e7fa      	b.n	b85f2 <_ZN6StringaSERKS_+0x14>

000b85fc <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b85fc:	b510      	push	{r4, lr}
	buffer = NULL;
   b85fe:	2300      	movs	r3, #0
String::String(const String &value)
   b8600:	4604      	mov	r4, r0
	capacity = 0;
   b8602:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8606:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8608:	7303      	strb	r3, [r0, #12]
	*this = value;
   b860a:	f7ff ffe8 	bl	b85de <_ZN6StringaSERKS_>
}
   b860e:	4620      	mov	r0, r4
   b8610:	bd10      	pop	{r4, pc}

000b8612 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8612:	b513      	push	{r0, r1, r4, lr}
   b8614:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8616:	b159      	cbz	r1, b8630 <_ZN6StringaSEPKc+0x1e>
   b8618:	4608      	mov	r0, r1
   b861a:	9101      	str	r1, [sp, #4]
   b861c:	f001 fcba 	bl	b9f94 <strlen>
   b8620:	9901      	ldr	r1, [sp, #4]
   b8622:	4602      	mov	r2, r0
   b8624:	4620      	mov	r0, r4
   b8626:	f7ff ffad 	bl	b8584 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b862a:	4620      	mov	r0, r4
   b862c:	b002      	add	sp, #8
   b862e:	bd10      	pop	{r4, pc}
	else invalidate();
   b8630:	f7ff ff7d 	bl	b852e <_ZN6String10invalidateEv>
   b8634:	e7f9      	b.n	b862a <_ZN6StringaSEPKc+0x18>

000b8636 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b8636:	b510      	push	{r4, lr}
   b8638:	4604      	mov	r4, r0
   b863a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b863c:	2300      	movs	r3, #0
	capacity = 0;
   b863e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b8642:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b8644:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b8646:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b8648:	a901      	add	r1, sp, #4
   b864a:	f000 fef1 	bl	b9430 <itoa>
	*this = buf;
   b864e:	a901      	add	r1, sp, #4
   b8650:	4620      	mov	r0, r4
   b8652:	f7ff ffde 	bl	b8612 <_ZN6StringaSEPKc>
}
   b8656:	4620      	mov	r0, r4
   b8658:	b00a      	add	sp, #40	; 0x28
   b865a:	bd10      	pop	{r4, pc}

000b865c <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b865c:	b510      	push	{r4, lr}
   b865e:	4604      	mov	r4, r0
   b8660:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b8662:	2300      	movs	r3, #0
	capacity = 0;
   b8664:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b8668:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b866a:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b866c:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b866e:	a901      	add	r1, sp, #4
   b8670:	f000 fe75 	bl	b935e <ltoa>
	*this = buf;
   b8674:	a901      	add	r1, sp, #4
   b8676:	4620      	mov	r0, r4
   b8678:	f7ff ffcb 	bl	b8612 <_ZN6StringaSEPKc>
}
   b867c:	4620      	mov	r0, r4
   b867e:	b00a      	add	sp, #40	; 0x28
   b8680:	bd10      	pop	{r4, pc}

000b8682 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b8682:	b570      	push	{r4, r5, r6, lr}
   b8684:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b8686:	460e      	mov	r6, r1
   b8688:	b909      	cbnz	r1, b868e <_ZN6String6concatEPKcj+0xc>
   b868a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b868c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b868e:	b16a      	cbz	r2, b86ac <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8690:	6884      	ldr	r4, [r0, #8]
   b8692:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b8694:	4621      	mov	r1, r4
   b8696:	f7ff ff61 	bl	b855c <_ZN6String7reserveEj>
   b869a:	2800      	cmp	r0, #0
   b869c:	d0f5      	beq.n	b868a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b869e:	6828      	ldr	r0, [r5, #0]
   b86a0:	68ab      	ldr	r3, [r5, #8]
   b86a2:	4631      	mov	r1, r6
   b86a4:	4418      	add	r0, r3
   b86a6:	f001 fc6d 	bl	b9f84 <strcpy>
	len = newlen;
   b86aa:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b86ac:	2001      	movs	r0, #1
   b86ae:	e7ed      	b.n	b868c <_ZN6String6concatEPKcj+0xa>

000b86b0 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b86b0:	688a      	ldr	r2, [r1, #8]
   b86b2:	6809      	ldr	r1, [r1, #0]
   b86b4:	f7ff bfe5 	b.w	b8682 <_ZN6String6concatEPKcj>

000b86b8 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b86b8:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b86ba:	2300      	movs	r3, #0
	buf[0] = c;
   b86bc:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b86c0:	2201      	movs	r2, #1
   b86c2:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b86c4:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b86c8:	f7ff ffdb 	bl	b8682 <_ZN6String6concatEPKcj>
}
   b86cc:	b003      	add	sp, #12
   b86ce:	f85d fb04 	ldr.w	pc, [sp], #4

000b86d2 <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
   b86d2:	b513      	push	{r0, r1, r4, lr}
	char buf[4];
	itoa(num, buf, 10);
   b86d4:	220a      	movs	r2, #10
{
   b86d6:	4604      	mov	r4, r0
   b86d8:	4608      	mov	r0, r1
	itoa(num, buf, 10);
   b86da:	a901      	add	r1, sp, #4
   b86dc:	f000 fea8 	bl	b9430 <itoa>
	return concat(buf, strlen(buf));
   b86e0:	a801      	add	r0, sp, #4
   b86e2:	f001 fc57 	bl	b9f94 <strlen>
   b86e6:	a901      	add	r1, sp, #4
   b86e8:	4602      	mov	r2, r0
   b86ea:	4620      	mov	r0, r4
   b86ec:	f7ff ffc9 	bl	b8682 <_ZN6String6concatEPKcj>
}
   b86f0:	b002      	add	sp, #8
   b86f2:	bd10      	pop	{r4, pc}

000b86f4 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b86f4:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b86f6:	688a      	ldr	r2, [r1, #8]
   b86f8:	6809      	ldr	r1, [r1, #0]
{
   b86fa:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b86fc:	f7ff ffc1 	bl	b8682 <_ZN6String6concatEPKcj>
   b8700:	b910      	cbnz	r0, b8708 <_ZplRK15StringSumHelperRK6String+0x14>
   b8702:	4620      	mov	r0, r4
   b8704:	f7ff ff13 	bl	b852e <_ZN6String10invalidateEv>
	return a;
}
   b8708:	4620      	mov	r0, r4
   b870a:	bd10      	pop	{r4, pc}

000b870c <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b870c:	b513      	push	{r0, r1, r4, lr}
   b870e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8710:	b929      	cbnz	r1, b871e <_ZplRK15StringSumHelperPKc+0x12>
   b8712:	4620      	mov	r0, r4
   b8714:	f7ff ff0b 	bl	b852e <_ZN6String10invalidateEv>
	return a;
}
   b8718:	4620      	mov	r0, r4
   b871a:	b002      	add	sp, #8
   b871c:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b871e:	4608      	mov	r0, r1
   b8720:	9101      	str	r1, [sp, #4]
   b8722:	f001 fc37 	bl	b9f94 <strlen>
   b8726:	9901      	ldr	r1, [sp, #4]
   b8728:	4602      	mov	r2, r0
   b872a:	4620      	mov	r0, r4
   b872c:	f7ff ffa9 	bl	b8682 <_ZN6String6concatEPKcj>
   b8730:	2800      	cmp	r0, #0
   b8732:	d0ee      	beq.n	b8712 <_ZplRK15StringSumHelperPKc+0x6>
   b8734:	e7f0      	b.n	b8718 <_ZplRK15StringSumHelperPKc+0xc>

000b8736 <_ZplRK15StringSumHelperh>:
	if (!a.concat(c)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
   b8736:	b510      	push	{r4, lr}
   b8738:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   b873a:	f7ff ffca 	bl	b86d2 <_ZN6String6concatEh>
   b873e:	b910      	cbnz	r0, b8746 <_ZplRK15StringSumHelperh+0x10>
   b8740:	4620      	mov	r0, r4
   b8742:	f7ff fef4 	bl	b852e <_ZN6String10invalidateEv>
	return a;
}
   b8746:	4620      	mov	r0, r4
   b8748:	bd10      	pop	{r4, pc}

000b874a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b874a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b874c:	6882      	ldr	r2, [r0, #8]
   b874e:	b93a      	cbnz	r2, b8760 <_ZNK6String6equalsEPKc+0x16>
   b8750:	b121      	cbz	r1, b875c <_ZNK6String6equalsEPKc+0x12>
   b8752:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b8754:	fab0 f080 	clz	r0, r0
   b8758:	0940      	lsrs	r0, r0, #5
   b875a:	e000      	b.n	b875e <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b875c:	2001      	movs	r0, #1
}
   b875e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b8760:	6800      	ldr	r0, [r0, #0]
   b8762:	b909      	cbnz	r1, b8768 <_ZNK6String6equalsEPKc+0x1e>
   b8764:	7800      	ldrb	r0, [r0, #0]
   b8766:	e7f5      	b.n	b8754 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b8768:	f001 fc02 	bl	b9f70 <strcmp>
   b876c:	e7f2      	b.n	b8754 <_ZNK6String6equalsEPKc+0xa>

000b876e <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b876e:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b8770:	6883      	ldr	r3, [r0, #8]
   b8772:	4293      	cmp	r3, r2
   b8774:	d907      	bls.n	b8786 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b8776:	6804      	ldr	r4, [r0, #0]
   b8778:	6809      	ldr	r1, [r1, #0]
   b877a:	18a0      	adds	r0, r4, r2
   b877c:	f001 fc31 	bl	b9fe2 <strstr>
	if (found == NULL) return -1;
   b8780:	b108      	cbz	r0, b8786 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b8782:	1b00      	subs	r0, r0, r4
}
   b8784:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b8786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b878a:	e7fb      	b.n	b8784 <_ZNK6String7indexOfERKS_j+0x16>

000b878c <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b878c:	2200      	movs	r2, #0
   b878e:	f7ff bfee 	b.w	b876e <_ZNK6String7indexOfERKS_j>
	...

000b8794 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b8794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b8796:	429a      	cmp	r2, r3
{
   b8798:	460f      	mov	r7, r1
   b879a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b879c:	490c      	ldr	r1, [pc, #48]	; (b87d0 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b879e:	bf88      	it	hi
   b87a0:	4613      	movhi	r3, r2
{
   b87a2:	4614      	mov	r4, r2
   b87a4:	4606      	mov	r6, r0
	if (left > right) {
   b87a6:	bf84      	itt	hi
   b87a8:	462c      	movhi	r4, r5
   b87aa:	461d      	movhi	r5, r3
	String out;
   b87ac:	f7ff ff03 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b87b0:	68bb      	ldr	r3, [r7, #8]
   b87b2:	42a3      	cmp	r3, r4
   b87b4:	d30a      	bcc.n	b87cc <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b87b6:	6839      	ldr	r1, [r7, #0]
   b87b8:	42ab      	cmp	r3, r5
   b87ba:	bf94      	ite	ls
   b87bc:	ebc4 0203 	rsbls	r2, r4, r3
   b87c0:	ebc4 0205 	rsbhi	r2, r4, r5
   b87c4:	4421      	add	r1, r4
   b87c6:	4630      	mov	r0, r6
   b87c8:	f7ff fedc 	bl	b8584 <_ZN6String4copyEPKcj>
	return out;
}
   b87cc:	4630      	mov	r0, r6
   b87ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b87d0:	000ba4c7 	.word	0x000ba4c7

000b87d4 <_ZNK6String9substringEj>:
{
   b87d4:	b510      	push	{r4, lr}
   b87d6:	4604      	mov	r4, r0
	return substring(left, len);
   b87d8:	688b      	ldr	r3, [r1, #8]
   b87da:	f7ff ffdb 	bl	b8794 <_ZNK6String9substringEjj>
}
   b87de:	4620      	mov	r0, r4
   b87e0:	bd10      	pop	{r4, pc}

000b87e2 <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
   b87e2:	b538      	push	{r3, r4, r5, lr}
   b87e4:	4604      	mov	r4, r0
   b87e6:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
   b87e8:	68a3      	ldr	r3, [r4, #8]
   b87ea:	428b      	cmp	r3, r1
   b87ec:	d911      	bls.n	b8812 <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
   b87ee:	b182      	cbz	r2, b8812 <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
   b87f0:	4411      	add	r1, r2
   b87f2:	428b      	cmp	r3, r1
   b87f4:	bf38      	it	cc
   b87f6:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
   b87f8:	6825      	ldr	r5, [r4, #0]
	len = len - count;
   b87fa:	1a99      	subs	r1, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
   b87fc:	1813      	adds	r3, r2, r0
	len = len - count;
   b87fe:	60a1      	str	r1, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
   b8800:	1a0a      	subs	r2, r1, r0
   b8802:	18e9      	adds	r1, r5, r3
   b8804:	4428      	add	r0, r5
   b8806:	f001 fb63 	bl	b9ed0 <memmove>
	buffer[len] = 0;
   b880a:	6822      	ldr	r2, [r4, #0]
   b880c:	68a3      	ldr	r3, [r4, #8]
   b880e:	2100      	movs	r1, #0
   b8810:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   b8812:	4620      	mov	r0, r4
   b8814:	bd38      	pop	{r3, r4, r5, pc}

000b8816 <_ZN6String6removeEj>:
        int count = len - index;
   b8816:	6882      	ldr	r2, [r0, #8]
        return remove(index, count);
   b8818:	1a52      	subs	r2, r2, r1
   b881a:	f7ff bfe2 	b.w	b87e2 <_ZN6String6removeEjj>

000b881e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b881e:	b510      	push	{r4, lr}
   b8820:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b8822:	6800      	ldr	r0, [r0, #0]
   b8824:	b118      	cbz	r0, b882e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b8826:	f7fe f89b 	bl	b6960 <free>
            wakeupSource_ = nullptr;
   b882a:	2300      	movs	r3, #0
   b882c:	6023      	str	r3, [r4, #0]
        }
    }
   b882e:	bd10      	pop	{r4, pc}

000b8830 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   b8830:	b538      	push	{r3, r4, r5, lr}
   b8832:	460c      	mov	r4, r1
   b8834:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b8836:	f7ff fff2 	bl	b881e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   b883a:	b154      	cbz	r4, b8852 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   b883c:	8820      	ldrh	r0, [r4, #0]
   b883e:	f7fe f887 	bl	b6950 <malloc>
   b8842:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   b8844:	b128      	cbz	r0, b8852 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   b8846:	8822      	ldrh	r2, [r4, #0]
   b8848:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   b884a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   b884e:	f001 bb31 	b.w	b9eb4 <memcpy>
    }
   b8852:	bd38      	pop	{r3, r4, r5, pc}

000b8854 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b8854:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   b8856:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   b885a:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   b885c:	f8d1 3006 	ldr.w	r3, [r1, #6]
   b8860:	f8c0 3006 	str.w	r3, [r0, #6]
   b8864:	894b      	ldrh	r3, [r1, #10]
   b8866:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b8868:	460c      	mov	r4, r1
   b886a:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b886c:	f7ff ffd7 	bl	b881e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   b8870:	6823      	ldr	r3, [r4, #0]
   b8872:	b113      	cbz	r3, b887a <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   b8874:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   b8876:	2300      	movs	r3, #0
   b8878:	6023      	str	r3, [r4, #0]
    }
   b887a:	bd38      	pop	{r3, r4, r5, pc}

000b887c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b887c:	b507      	push	{r0, r1, r2, lr}
   b887e:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8880:	2100      	movs	r1, #0
{
   b8882:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8884:	9100      	str	r1, [sp, #0]
   b8886:	2001      	movs	r0, #1
   b8888:	218c      	movs	r1, #140	; 0x8c
   b888a:	f7fd ffaf 	bl	b67ec <system_reset>
}
   b888e:	b003      	add	sp, #12
   b8890:	f85d fb04 	ldr.w	pc, [sp], #4

000b8894 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b8894:	4601      	mov	r1, r0
    reset(0, flags);
   b8896:	2000      	movs	r0, #0
   b8898:	f7ff bff0 	b.w	b887c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b889c <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b889c:	2000      	movs	r0, #0
   b889e:	f7ff bff9 	b.w	b8894 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000b88a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   b88a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b88a6:	4d2b      	ldr	r5, [pc, #172]	; (b8954 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   b88a8:	7d0b      	ldrb	r3, [r1, #20]
   b88aa:	4604      	mov	r4, r0
   b88ac:	b08b      	sub	sp, #44	; 0x2c
   b88ae:	4608      	mov	r0, r1
   b88b0:	1daf      	adds	r7, r5, #6
   b88b2:	2b00      	cmp	r3, #0
   b88b4:	d036      	beq.n	b8924 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   b88b6:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   b88b8:	791b      	ldrb	r3, [r3, #4]
   b88ba:	2b00      	cmp	r3, #0
   b88bc:	d032      	beq.n	b8924 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   b88be:	4b26      	ldr	r3, [pc, #152]	; (b8958 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   b88c0:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   b88c2:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   b88c4:	a902      	add	r1, sp, #8
   b88c6:	3004      	adds	r0, #4
   b88c8:	e9cd 2202 	strd	r2, r2, [sp, #8]
   b88cc:	f7fd ff84 	bl	b67d8 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   b88d0:	f8dd 300e 	ldr.w	r3, [sp, #14]
   b88d4:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   b88d8:	b200      	sxth	r0, r0
   b88da:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   b88de:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   b88e2:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   b88e4:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   b88e6:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b88e8:	4628      	mov	r0, r5
   b88ea:	f7ff ffa1 	bl	b8830 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   b88ee:	a802      	add	r0, sp, #8
   b88f0:	f7ff ff95 	bl	b881e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   b88f4:	2300      	movs	r3, #0
   b88f6:	6023      	str	r3, [r4, #0]
   b88f8:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   b88fa:	71a3      	strb	r3, [r4, #6]
   b88fc:	8123      	strh	r3, [r4, #8]
   b88fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8902:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   b8904:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   b8908:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   b890a:	f8d5 3006 	ldr.w	r3, [r5, #6]
   b890e:	f8c4 3006 	str.w	r3, [r4, #6]
   b8912:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b8914:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   b8916:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   b8918:	4620      	mov	r0, r4
   b891a:	f7ff ff89 	bl	b8830 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   b891e:	4620      	mov	r0, r4
   b8920:	b00b      	add	sp, #44	; 0x2c
   b8922:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   b8924:	2600      	movs	r6, #0
   b8926:	2320      	movs	r3, #32
   b8928:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b892c:	4b0b      	ldr	r3, [pc, #44]	; (b895c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   b892e:	9300      	str	r3, [sp, #0]
   b8930:	aa02      	add	r2, sp, #8
   b8932:	4633      	mov	r3, r6
   b8934:	490a      	ldr	r1, [pc, #40]	; (b8960 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   b8936:	2032      	movs	r0, #50	; 0x32
   b8938:	f7fd fef2 	bl	b6720 <log_message>
            : wakeupSource_(nullptr),
   b893c:	4b06      	ldr	r3, [pc, #24]	; (b8958 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   b893e:	4805      	ldr	r0, [pc, #20]	; (b8954 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   b8940:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   b8942:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   b8946:	a902      	add	r1, sp, #8
   b8948:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b894c:	f7ff ff82 	bl	b8854 <_ZN17SystemSleepResultaSEOS_.isra.0>
   b8950:	e7cd      	b.n	b88ee <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   b8952:	bf00      	nop
   b8954:	2003e664 	.word	0x2003e664
   b8958:	ffff0000 	.word	0xffff0000
   b895c:	000babd3 	.word	0x000babd3
   b8960:	000babcc 	.word	0x000babcc

000b8964 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   b8964:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8966:	4b09      	ldr	r3, [pc, #36]	; (b898c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   b8968:	4c09      	ldr	r4, [pc, #36]	; (b8990 <_GLOBAL__sub_I_System+0x2c>)
   b896a:	2202      	movs	r2, #2
   b896c:	601a      	str	r2, [r3, #0]
   b896e:	2000      	movs	r0, #0
    SleepResult() {}
   b8970:	4b08      	ldr	r3, [pc, #32]	; (b8994 <_GLOBAL__sub_I_System+0x30>)
   b8972:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8974:	e9c4 0000 	strd	r0, r0, [r4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8978:	f7fd fee2 	bl	b6740 <set_system_mode>
SystemClass System;
   b897c:	4620      	mov	r0, r4
   b897e:	4a06      	ldr	r2, [pc, #24]	; (b8998 <_GLOBAL__sub_I_System+0x34>)
   b8980:	4906      	ldr	r1, [pc, #24]	; (b899c <_GLOBAL__sub_I_System+0x38>)
   b8982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   b8986:	f000 bed5 	b.w	b9734 <__aeabi_atexit>
   b898a:	bf00      	nop
   b898c:	2003e670 	.word	0x2003e670
   b8990:	2003e664 	.word	0x2003e664
   b8994:	ffff0000 	.word	0xffff0000
   b8998:	2003da30 	.word	0x2003da30
   b899c:	000b40df 	.word	0x000b40df

000b89a0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b89a0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b89a2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b89a4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b89a8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b89aa:	2201      	movs	r2, #1
   b89ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b89b0:	f10d 0107 	add.w	r1, sp, #7
   b89b4:	47a0      	blx	r4
}
   b89b6:	b002      	add	sp, #8
   b89b8:	bd10      	pop	{r4, pc}

000b89ba <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b89ba:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b89bc:	6803      	ldr	r3, [r0, #0]
   b89be:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b89c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b89c4:	46a4      	mov	ip, r4
}
   b89c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b89ca:	4760      	bx	ip

000b89cc <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b89cc:	b513      	push	{r0, r1, r4, lr}
   b89ce:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b89d0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b89d2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b89d6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b89d8:	f10d 0107 	add.w	r1, sp, #7
   b89dc:	2201      	movs	r2, #1
   b89de:	47a0      	blx	r4
}
   b89e0:	b002      	add	sp, #8
   b89e2:	bd10      	pop	{r4, pc}

000b89e4 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b89e4:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b89e6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b89e8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b89ec:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b89f0:	429a      	cmp	r2, r3
int TCPClient::read() {
   b89f2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b89f4:	d008      	beq.n	b8a08 <_ZN9TCPClient4readEv+0x24>
   b89f6:	6963      	ldr	r3, [r4, #20]
   b89f8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b89fc:	1c51      	adds	r1, r2, #1
   b89fe:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b8a02:	4413      	add	r3, r2
   b8a04:	7918      	ldrb	r0, [r3, #4]
}
   b8a06:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8a08:	6803      	ldr	r3, [r0, #0]
   b8a0a:	691b      	ldr	r3, [r3, #16]
   b8a0c:	4798      	blx	r3
   b8a0e:	2800      	cmp	r0, #0
   b8a10:	d1f1      	bne.n	b89f6 <_ZN9TCPClient4readEv+0x12>
   b8a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8a16:	e7f6      	b.n	b8a06 <_ZN9TCPClient4readEv+0x22>

000b8a18 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b8a18:	4770      	bx	lr

000b8a1a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b8a1a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b8a1c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b8a1e:	43c0      	mvns	r0, r0
   b8a20:	0fc0      	lsrs	r0, r0, #31
   b8a22:	4770      	bx	lr

000b8a24 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8a24:	4770      	bx	lr
	...

000b8a28 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8a28:	4b06      	ldr	r3, [pc, #24]	; (b8a44 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8a2a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8a2c:	b510      	push	{r4, lr}
   b8a2e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8a32:	d005      	beq.n	b8a40 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8a34:	4608      	mov	r0, r1
   b8a36:	f000 fe8b 	bl	b9750 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8a3a:	2800      	cmp	r0, #0
   b8a3c:	bf08      	it	eq
   b8a3e:	2400      	moveq	r4, #0
      }
   b8a40:	4620      	mov	r0, r4
   b8a42:	bd10      	pop	{r4, pc}
   b8a44:	000baacc 	.word	0x000baacc

000b8a48 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8a48:	b510      	push	{r4, lr}
   b8a4a:	21ac      	movs	r1, #172	; 0xac
   b8a4c:	4604      	mov	r4, r0
   b8a4e:	f000 fe76 	bl	b973e <_ZdlPvj>
   b8a52:	4620      	mov	r0, r4
   b8a54:	bd10      	pop	{r4, pc}

000b8a56 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b8a56:	21ac      	movs	r1, #172	; 0xac
   b8a58:	f000 be71 	b.w	b973e <_ZdlPvj>

000b8a5c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b8a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8a60:	f04f 0800 	mov.w	r8, #0
   b8a64:	b086      	sub	sp, #24
   b8a66:	461c      	mov	r4, r3
   b8a68:	f8c0 8004 	str.w	r8, [r0, #4]
   b8a6c:	4605      	mov	r5, r0
   b8a6e:	460e      	mov	r6, r1
   b8a70:	4617      	mov	r7, r2
    struct timeval tv = {};
   b8a72:	4641      	mov	r1, r8
   b8a74:	2210      	movs	r2, #16
   b8a76:	a802      	add	r0, sp, #8
   b8a78:	f001 fa44 	bl	b9f04 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b8a7c:	1c63      	adds	r3, r4, #1
   b8a7e:	d009      	beq.n	b8a94 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b8a80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8a84:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b8a88:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b8a8c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b8a90:	435c      	muls	r4, r3
   b8a92:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b8a94:	6968      	ldr	r0, [r5, #20]
   b8a96:	2310      	movs	r3, #16
   b8a98:	9300      	str	r3, [sp, #0]
   b8a9a:	6800      	ldr	r0, [r0, #0]
   b8a9c:	ab02      	add	r3, sp, #8
   b8a9e:	f241 0205 	movw	r2, #4101	; 0x1005
   b8aa2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8aa6:	f7fd fd2b 	bl	b6500 <sock_setsockopt>
    if (ret < 0) {
   b8aaa:	2800      	cmp	r0, #0
   b8aac:	da07      	bge.n	b8abe <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b8aae:	f7fd ff7f 	bl	b69b0 <__errno>
   b8ab2:	6803      	ldr	r3, [r0, #0]
   b8ab4:	606b      	str	r3, [r5, #4]
        return 0;
   b8ab6:	2000      	movs	r0, #0
}
   b8ab8:	b006      	add	sp, #24
   b8aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b8abe:	6968      	ldr	r0, [r5, #20]
   b8ac0:	2300      	movs	r3, #0
   b8ac2:	6800      	ldr	r0, [r0, #0]
   b8ac4:	463a      	mov	r2, r7
   b8ac6:	4631      	mov	r1, r6
   b8ac8:	f7fd fd3a 	bl	b6540 <sock_send>
    if (ret < 0) {
   b8acc:	1e03      	subs	r3, r0, #0
   b8ace:	dbee      	blt.n	b8aae <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b8ad0:	4618      	mov	r0, r3
   b8ad2:	e7f1      	b.n	b8ab8 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b8ad4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b8ad4:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b8ad6:	6984      	ldr	r4, [r0, #24]
   b8ad8:	4b0a      	ldr	r3, [pc, #40]	; (b8b04 <_ZN9TCPClientD1Ev+0x30>)
   b8ada:	6003      	str	r3, [r0, #0]
   b8adc:	4605      	mov	r5, r0
   b8ade:	b17c      	cbz	r4, b8b00 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b8ae0:	6863      	ldr	r3, [r4, #4]
   b8ae2:	3b01      	subs	r3, #1
   b8ae4:	6063      	str	r3, [r4, #4]
   b8ae6:	b95b      	cbnz	r3, b8b00 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b8ae8:	6823      	ldr	r3, [r4, #0]
   b8aea:	4620      	mov	r0, r4
   b8aec:	689b      	ldr	r3, [r3, #8]
   b8aee:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8af0:	68a3      	ldr	r3, [r4, #8]
   b8af2:	3b01      	subs	r3, #1
   b8af4:	60a3      	str	r3, [r4, #8]
   b8af6:	b91b      	cbnz	r3, b8b00 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b8af8:	6823      	ldr	r3, [r4, #0]
   b8afa:	4620      	mov	r0, r4
   b8afc:	68db      	ldr	r3, [r3, #12]
   b8afe:	4798      	blx	r3
   b8b00:	4628      	mov	r0, r5
   b8b02:	bd38      	pop	{r3, r4, r5, pc}
   b8b04:	000bac30 	.word	0x000bac30

000b8b08 <_ZN9TCPClientD0Ev>:
   b8b08:	b510      	push	{r4, lr}
   b8b0a:	4604      	mov	r4, r0
   b8b0c:	f7ff ffe2 	bl	b8ad4 <_ZN9TCPClientD1Ev>
   b8b10:	4620      	mov	r0, r4
   b8b12:	211c      	movs	r1, #28
   b8b14:	f000 fe13 	bl	b973e <_ZdlPvj>
   b8b18:	4620      	mov	r0, r4
   b8b1a:	bd10      	pop	{r4, pc}

000b8b1c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b8b1c:	b530      	push	{r4, r5, lr}
   b8b1e:	b087      	sub	sp, #28
   b8b20:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b8b22:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b8b24:	4668      	mov	r0, sp
   b8b26:	f7ff fae9 	bl	b80fc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8b2c:	3404      	adds	r4, #4
   b8b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8b30:	682b      	ldr	r3, [r5, #0]
   b8b32:	7023      	strb	r3, [r4, #0]
    }
   b8b34:	b007      	add	sp, #28
   b8b36:	bd30      	pop	{r4, r5, pc}

000b8b38 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b8b38:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b8b3a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b8b3c:	4b05      	ldr	r3, [pc, #20]	; (b8b54 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b8b3e:	4604      	mov	r4, r0
   b8b40:	358c      	adds	r5, #140	; 0x8c
   b8b42:	f844 3b04 	str.w	r3, [r4], #4
   b8b46:	4606      	mov	r6, r0
   b8b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8b4c:	682b      	ldr	r3, [r5, #0]
   b8b4e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b8b50:	4630      	mov	r0, r6
   b8b52:	bd70      	pop	{r4, r5, r6, pc}
   b8b54:	000bab78 	.word	0x000bab78

000b8b58 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8b5c:	4698      	mov	r8, r3
    stop();
   b8b5e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8b60:	b093      	sub	sp, #76	; 0x4c
   b8b62:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b8b64:	2400      	movs	r4, #0
    stop();
   b8b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8b68:	4606      	mov	r6, r0
   b8b6a:	4617      	mov	r7, r2
    stop();
   b8b6c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8b6e:	4628      	mov	r0, r5
   b8b70:	466b      	mov	r3, sp
   b8b72:	4622      	mov	r2, r4
   b8b74:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b8b76:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8b78:	f7fd fcba 	bl	b64f0 <netdb_getaddrinfo>
   b8b7c:	4605      	mov	r5, r0
   b8b7e:	2800      	cmp	r0, #0
   b8b80:	d163      	bne.n	b8c4a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b8b82:	9b00      	ldr	r3, [sp, #0]
   b8b84:	2b00      	cmp	r3, #0
   b8b86:	d04b      	beq.n	b8c20 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8b88:	695b      	ldr	r3, [r3, #20]
   b8b8a:	2b00      	cmp	r3, #0
   b8b8c:	d048      	beq.n	b8c20 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b8b8e:	a806      	add	r0, sp, #24
   b8b90:	f7ff fa70 	bl	b8074 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8b94:	9b00      	ldr	r3, [sp, #0]
   b8b96:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b8b98:	7863      	ldrb	r3, [r4, #1]
   b8b9a:	2b02      	cmp	r3, #2
   b8b9c:	d104      	bne.n	b8ba8 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b8b9e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b8ba0:	a806      	add	r0, sp, #24
   b8ba2:	f7ff ffbb 	bl	b8b1c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b8ba6:	e026      	b.n	b8bf6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b8ba8:	2b0a      	cmp	r3, #10
   b8baa:	d124      	bne.n	b8bf6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b8bac:	2211      	movs	r2, #17
   b8bae:	4629      	mov	r1, r5
   b8bb0:	a801      	add	r0, sp, #4
   b8bb2:	f001 f9a7 	bl	b9f04 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8bb6:	68a3      	ldr	r3, [r4, #8]
   b8bb8:	2b00      	cmp	r3, #0
   b8bba:	d038      	beq.n	b8c2e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8bbc:	f104 0308 	add.w	r3, r4, #8
   b8bc0:	f10d 0c04 	add.w	ip, sp, #4
   b8bc4:	3418      	adds	r4, #24
   b8bc6:	6818      	ldr	r0, [r3, #0]
   b8bc8:	6859      	ldr	r1, [r3, #4]
   b8bca:	4662      	mov	r2, ip
   b8bcc:	c203      	stmia	r2!, {r0, r1}
   b8bce:	3308      	adds	r3, #8
   b8bd0:	42a3      	cmp	r3, r4
   b8bd2:	4694      	mov	ip, r2
   b8bd4:	d1f7      	bne.n	b8bc6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b8bd6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b8bd8:	a901      	add	r1, sp, #4
   b8bda:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b8bdc:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b8be0:	f7ff fa56 	bl	b8090 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8be4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8be8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b8bec:	ac07      	add	r4, sp, #28
   b8bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8bf0:	f8dc 3000 	ldr.w	r3, [ip]
   b8bf4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b8bf6:	a806      	add	r0, sp, #24
   b8bf8:	f7ff fa5c 	bl	b80b4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b8bfc:	b180      	cbz	r0, b8c20 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b8bfe:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b8c00:	ad07      	add	r5, sp, #28
   b8c02:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b8c06:	4b12      	ldr	r3, [pc, #72]	; (b8c50 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b8c08:	930c      	str	r3, [sp, #48]	; 0x30
   b8c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8c0c:	ac0d      	add	r4, sp, #52	; 0x34
   b8c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8c10:	682b      	ldr	r3, [r5, #0]
   b8c12:	7023      	strb	r3, [r4, #0]
   b8c14:	463a      	mov	r2, r7
   b8c16:	4643      	mov	r3, r8
   b8c18:	a90c      	add	r1, sp, #48	; 0x30
   b8c1a:	4630      	mov	r0, r6
   b8c1c:	47c8      	blx	r9
   b8c1e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b8c20:	9800      	ldr	r0, [sp, #0]
   b8c22:	f7fd fc5d 	bl	b64e0 <netdb_freeaddrinfo>
}
   b8c26:	4628      	mov	r0, r5
   b8c28:	b013      	add	sp, #76	; 0x4c
   b8c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8c2e:	68e3      	ldr	r3, [r4, #12]
   b8c30:	2b00      	cmp	r3, #0
   b8c32:	d1c3      	bne.n	b8bbc <_ZN9TCPClient7connectEPKctm+0x64>
   b8c34:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b8c38:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b8c3c:	f7fd fc40 	bl	b64c0 <inet_htonl>
   b8c40:	4581      	cmp	r9, r0
   b8c42:	d1bb      	bne.n	b8bbc <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b8c44:	f104 0114 	add.w	r1, r4, #20
   b8c48:	e7aa      	b.n	b8ba0 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8c4a:	4625      	mov	r5, r4
   b8c4c:	e7e8      	b.n	b8c20 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8c4e:	bf00      	nop
   b8c50:	000bab78 	.word	0x000bab78

000b8c54 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b8c54:	b538      	push	{r3, r4, r5, lr}
   b8c56:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b8c58:	681a      	ldr	r2, [r3, #0]
   b8c5a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b8c5c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b8c5e:	da10      	bge.n	b8c82 <_ZN9TCPClient9connectedEv+0x2e>
   b8c60:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8c64:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8c68:	429a      	cmp	r2, r3
   b8c6a:	d10a      	bne.n	b8c82 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b8c6c:	6803      	ldr	r3, [r0, #0]
   b8c6e:	691b      	ldr	r3, [r3, #16]
   b8c70:	4798      	blx	r3
        if (!rv) {
   b8c72:	4604      	mov	r4, r0
   b8c74:	b928      	cbnz	r0, b8c82 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b8c76:	682b      	ldr	r3, [r5, #0]
   b8c78:	4628      	mov	r0, r5
   b8c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8c7c:	4798      	blx	r3
        rv = available();
   b8c7e:	4620      	mov	r0, r4
}
   b8c80:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b8c82:	2001      	movs	r0, #1
   b8c84:	e7fc      	b.n	b8c80 <_ZN9TCPClient9connectedEv+0x2c>

000b8c86 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b8c86:	b510      	push	{r4, lr}
   b8c88:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8c8a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8c8e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8c92:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b8c94:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8c96:	d005      	beq.n	b8ca4 <_ZN9TCPClient4peekEv+0x1e>
   b8c98:	6963      	ldr	r3, [r4, #20]
   b8c9a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8c9e:	4413      	add	r3, r2
   b8ca0:	7918      	ldrb	r0, [r3, #4]
}
   b8ca2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8ca4:	6803      	ldr	r3, [r0, #0]
   b8ca6:	691b      	ldr	r3, [r3, #16]
   b8ca8:	4798      	blx	r3
   b8caa:	2800      	cmp	r0, #0
   b8cac:	d1f4      	bne.n	b8c98 <_ZN9TCPClient4peekEv+0x12>
   b8cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8cb2:	e7f6      	b.n	b8ca2 <_ZN9TCPClient4peekEv+0x1c>

000b8cb4 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8cb6:	6943      	ldr	r3, [r0, #20]
   b8cb8:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b8cba:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8cbe:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8cc2:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8cc4:	4605      	mov	r5, r0
   b8cc6:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b8cc8:	d016      	beq.n	b8cf8 <_ZN9TCPClient4readEPhj+0x44>
   b8cca:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b8ccc:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b8cd0:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b8cd4:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b8cd6:	42bc      	cmp	r4, r7
   b8cd8:	bf28      	it	cs
   b8cda:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b8cdc:	3304      	adds	r3, #4
   b8cde:	4622      	mov	r2, r4
   b8ce0:	4419      	add	r1, r3
   b8ce2:	4630      	mov	r0, r6
   b8ce4:	f001 f8e6 	bl	b9eb4 <memcpy>
   b8ce8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b8cea:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b8cee:	4423      	add	r3, r4
   b8cf0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b8cf4:	4620      	mov	r0, r4
   b8cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b8cf8:	6803      	ldr	r3, [r0, #0]
   b8cfa:	691b      	ldr	r3, [r3, #16]
   b8cfc:	4798      	blx	r3
   b8cfe:	2800      	cmp	r0, #0
   b8d00:	d1e3      	bne.n	b8cca <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b8d02:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b8d06:	e7f5      	b.n	b8cf4 <_ZN9TCPClient4readEPhj+0x40>

000b8d08 <_ZN9TCPClient12flush_bufferEv>:
   b8d08:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b8d0a:	2300      	movs	r3, #0
   b8d0c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b8d10:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b8d12:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b8d16:	4770      	bx	lr

000b8d18 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8d1c:	461f      	mov	r7, r3
    stop();
   b8d1e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8d20:	460c      	mov	r4, r1
    stop();
   b8d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8d24:	b08a      	sub	sp, #40	; 0x28
   b8d26:	4605      	mov	r5, r0
   b8d28:	4616      	mov	r6, r2
    stop();
   b8d2a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b8d2c:	7d23      	ldrb	r3, [r4, #20]
   b8d2e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b8d32:	2b04      	cmp	r3, #4
   b8d34:	bf0c      	ite	eq
   b8d36:	2002      	moveq	r0, #2
   b8d38:	200a      	movne	r0, #10
   b8d3a:	2206      	movs	r2, #6
   b8d3c:	2101      	movs	r1, #1
   b8d3e:	f7fd fc07 	bl	b6550 <sock_socket>
   b8d42:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b8d46:	696b      	ldr	r3, [r5, #20]
   b8d48:	681b      	ldr	r3, [r3, #0]
   b8d4a:	2b00      	cmp	r3, #0
   b8d4c:	da08      	bge.n	b8d60 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b8d4e:	682b      	ldr	r3, [r5, #0]
   b8d50:	4628      	mov	r0, r5
   b8d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8d54:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b8d56:	4798      	blx	r3
}
   b8d58:	4620      	mov	r0, r4
   b8d5a:	b00a      	add	sp, #40	; 0x28
   b8d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b8d60:	4628      	mov	r0, r5
   b8d62:	f7ff ffd1 	bl	b8d08 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b8d66:	b1b7      	cbz	r7, b8d96 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b8d68:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8d6a:	a903      	add	r1, sp, #12
   b8d6c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b8d6e:	9303      	str	r3, [sp, #12]
   b8d70:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8d74:	f7fd fb94 	bl	b64a0 <if_index_to_name>
   b8d78:	2800      	cmp	r0, #0
   b8d7a:	d1e8      	bne.n	b8d4e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b8d7c:	6968      	ldr	r0, [r5, #20]
   b8d7e:	2306      	movs	r3, #6
   b8d80:	9300      	str	r3, [sp, #0]
   b8d82:	6800      	ldr	r0, [r0, #0]
   b8d84:	ab03      	add	r3, sp, #12
   b8d86:	f241 020b 	movw	r2, #4107	; 0x100b
   b8d8a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8d8e:	f7fd fbb7 	bl	b6500 <sock_setsockopt>
   b8d92:	2800      	cmp	r0, #0
   b8d94:	d1db      	bne.n	b8d4e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b8d96:	221c      	movs	r2, #28
   b8d98:	2100      	movs	r1, #0
   b8d9a:	a803      	add	r0, sp, #12
   b8d9c:	f001 f8b2 	bl	b9f04 <memset>
    if (ip.version() == 4) {
   b8da0:	7d23      	ldrb	r3, [r4, #20]
   b8da2:	2b04      	cmp	r3, #4
   b8da4:	d11d      	bne.n	b8de2 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b8da6:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b8daa:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b8dac:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b8db0:	f7fd fb8e 	bl	b64d0 <inet_htons>
   b8db4:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b8db8:	6860      	ldr	r0, [r4, #4]
   b8dba:	f7fd fb81 	bl	b64c0 <inet_htonl>
   b8dbe:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b8dc0:	696b      	ldr	r3, [r5, #20]
   b8dc2:	221c      	movs	r2, #28
   b8dc4:	6818      	ldr	r0, [r3, #0]
   b8dc6:	a903      	add	r1, sp, #12
   b8dc8:	f7fd fbaa 	bl	b6520 <sock_connect>
   b8dcc:	2800      	cmp	r0, #0
   b8dce:	d1be      	bne.n	b8d4e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b8dd0:	3404      	adds	r4, #4
   b8dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8dd4:	696d      	ldr	r5, [r5, #20]
   b8dd6:	358c      	adds	r5, #140	; 0x8c
   b8dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8dda:	6823      	ldr	r3, [r4, #0]
   b8ddc:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b8dde:	2401      	movs	r4, #1
   b8de0:	e7ba      	b.n	b8d58 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b8de2:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b8de6:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b8de8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b8dec:	f7fd fb70 	bl	b64d0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8df0:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b8df2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8df6:	1d23      	adds	r3, r4, #4
   b8df8:	f104 0714 	add.w	r7, r4, #20
   b8dfc:	6818      	ldr	r0, [r3, #0]
   b8dfe:	6859      	ldr	r1, [r3, #4]
   b8e00:	4632      	mov	r2, r6
   b8e02:	c203      	stmia	r2!, {r0, r1}
   b8e04:	3308      	adds	r3, #8
   b8e06:	42bb      	cmp	r3, r7
   b8e08:	4616      	mov	r6, r2
   b8e0a:	d1f7      	bne.n	b8dfc <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b8e0c:	e7d8      	b.n	b8dc0 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b8e10 <_ZN9TCPClient9availableEv>:
{
   b8e10:	b530      	push	{r4, r5, lr}
   b8e12:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b8e14:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b8e18:	b08b      	sub	sp, #44	; 0x2c
   b8e1a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b8e1c:	b12b      	cbz	r3, b8e2a <_ZN9TCPClient9availableEv+0x1a>
   b8e1e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b8e22:	429a      	cmp	r2, r3
   b8e24:	d101      	bne.n	b8e2a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b8e26:	f7ff ff6f 	bl	b8d08 <_ZN9TCPClient12flush_bufferEv>
   b8e2a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b8e2c:	6808      	ldr	r0, [r1, #0]
   b8e2e:	2800      	cmp	r0, #0
   b8e30:	db18      	blt.n	b8e64 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b8e32:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b8e36:	2d7f      	cmp	r5, #127	; 0x7f
   b8e38:	d814      	bhi.n	b8e64 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b8e3a:	3104      	adds	r1, #4
   b8e3c:	2308      	movs	r3, #8
   b8e3e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b8e42:	4429      	add	r1, r5
   b8e44:	f7fd fb74 	bl	b6530 <sock_recv>
            if (ret > 0) {
   b8e48:	2800      	cmp	r0, #0
   b8e4a:	dd13      	ble.n	b8e74 <_ZN9TCPClient9availableEv+0x64>
   b8e4c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b8e4e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8e52:	b90a      	cbnz	r2, b8e58 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b8e54:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b8e58:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b8e5a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8e5e:	4410      	add	r0, r2
   b8e60:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b8e64:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b8e66:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b8e6a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b8e6e:	1ac0      	subs	r0, r0, r3
   b8e70:	b00b      	add	sp, #44	; 0x2c
   b8e72:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b8e74:	f7fd fd9c 	bl	b69b0 <__errno>
   b8e78:	6803      	ldr	r3, [r0, #0]
   b8e7a:	2b0b      	cmp	r3, #11
   b8e7c:	d0f2      	beq.n	b8e64 <_ZN9TCPClient9availableEv+0x54>
   b8e7e:	f7fd fd97 	bl	b69b0 <__errno>
   b8e82:	6803      	ldr	r3, [r0, #0]
   b8e84:	2b0b      	cmp	r3, #11
   b8e86:	d0ed      	beq.n	b8e64 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b8e88:	2320      	movs	r3, #32
   b8e8a:	2500      	movs	r5, #0
   b8e8c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b8e90:	f7fd fd8e 	bl	b69b0 <__errno>
   b8e94:	6803      	ldr	r3, [r0, #0]
   b8e96:	9301      	str	r3, [sp, #4]
   b8e98:	4b08      	ldr	r3, [pc, #32]	; (b8ebc <_ZN9TCPClient9availableEv+0xac>)
   b8e9a:	4909      	ldr	r1, [pc, #36]	; (b8ec0 <_ZN9TCPClient9availableEv+0xb0>)
   b8e9c:	9300      	str	r3, [sp, #0]
   b8e9e:	aa02      	add	r2, sp, #8
   b8ea0:	462b      	mov	r3, r5
   b8ea2:	2032      	movs	r0, #50	; 0x32
   b8ea4:	f7fd fc3c 	bl	b6720 <log_message>
                    sock_close(d_->sock);
   b8ea8:	6963      	ldr	r3, [r4, #20]
   b8eaa:	6818      	ldr	r0, [r3, #0]
   b8eac:	f7fd fb30 	bl	b6510 <sock_close>
   b8eb0:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b8eb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8eb6:	601a      	str	r2, [r3, #0]
   b8eb8:	e7d4      	b.n	b8e64 <_ZN9TCPClient9availableEv+0x54>
   b8eba:	bf00      	nop
   b8ebc:	000babfa 	.word	0x000babfa
   b8ec0:	000babcc 	.word	0x000babcc

000b8ec4 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b8ec4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b8ec6:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b8ec8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b8eca:	6818      	ldr	r0, [r3, #0]
   b8ecc:	2800      	cmp	r0, #0
   b8ece:	db01      	blt.n	b8ed4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b8ed0:	f7fd fb1e 	bl	b6510 <sock_close>
   b8ed4:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b8ed6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8eda:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b8edc:	6960      	ldr	r0, [r4, #20]
   b8ede:	2211      	movs	r2, #17
   b8ee0:	2100      	movs	r1, #0
   b8ee2:	308c      	adds	r0, #140	; 0x8c
   b8ee4:	f001 f80e 	bl	b9f04 <memset>
    flush_buffer();
   b8ee8:	4620      	mov	r0, r4
}
   b8eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b8eee:	f7ff bf0b 	b.w	b8d08 <_ZN9TCPClient12flush_bufferEv>

000b8ef2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b8ef2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b8ef4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b8ef6:	4604      	mov	r4, r0
          total(0) {
   b8ef8:	6001      	str	r1, [r0, #0]
   b8efa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b8efe:	3088      	adds	r0, #136	; 0x88
   b8f00:	f7ff f8b8 	bl	b8074 <_ZN9IPAddressC1Ev>
}
   b8f04:	4620      	mov	r0, r4
   b8f06:	bd10      	pop	{r4, pc}

000b8f08 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b8f08:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8f0a:	2300      	movs	r3, #0
   b8f0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8f10:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b8f14:	4a0e      	ldr	r2, [pc, #56]	; (b8f50 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b8f16:	6103      	str	r3, [r0, #16]
   b8f18:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8f1a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b8f1c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8f1e:	20ac      	movs	r0, #172	; 0xac
   b8f20:	9101      	str	r1, [sp, #4]
   b8f22:	f7fb f8b8 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8f26:	1e05      	subs	r5, r0, #0
   b8f28:	f105 060c 	add.w	r6, r5, #12
   b8f2c:	d008      	beq.n	b8f40 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b8f2e:	2301      	movs	r3, #1
   b8f30:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8f34:	4b07      	ldr	r3, [pc, #28]	; (b8f54 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8f36:	9901      	ldr	r1, [sp, #4]
   b8f38:	602b      	str	r3, [r5, #0]
   b8f3a:	4630      	mov	r0, r6
   b8f3c:	f7ff ffd9 	bl	b8ef2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b8f40:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b8f42:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b8f46:	f7ff fedf 	bl	b8d08 <_ZN9TCPClient12flush_bufferEv>
}
   b8f4a:	b002      	add	sp, #8
   b8f4c:	bd70      	pop	{r4, r5, r6, pc}
   b8f4e:	bf00      	nop
   b8f50:	000bac30 	.word	0x000bac30
   b8f54:	000bac14 	.word	0x000bac14

000b8f58 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b8f58:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b8f5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b8f5e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b8f60:	f7ff ffd2 	bl	b8f08 <_ZN9TCPClientC1Ei>
}
   b8f64:	4620      	mov	r0, r4
   b8f66:	bd10      	pop	{r4, pc}

000b8f68 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b8f68:	b510      	push	{r4, lr}
   b8f6a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b8f6c:	6800      	ldr	r0, [r0, #0]
   b8f6e:	2800      	cmp	r0, #0
   b8f70:	db01      	blt.n	b8f76 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b8f72:	f7fd facd 	bl	b6510 <sock_close>
    }
}
   b8f76:	4620      	mov	r0, r4
   b8f78:	bd10      	pop	{r4, pc}

000b8f7a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b8f7a:	300c      	adds	r0, #12
   b8f7c:	f7ff bff4 	b.w	b8f68 <_ZN9TCPClient4DataD1Ev>

000b8f80 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b8f80:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8f82:	2000      	movs	r0, #0
   b8f84:	f7fd fc5c 	bl	b6840 <spark_sync_time_pending>
   b8f88:	b128      	cbz	r0, b8f96 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8f8a:	f7fd fc49 	bl	b6820 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8f8e:	f080 0001 	eor.w	r0, r0, #1
   b8f92:	b2c0      	uxtb	r0, r0
    }
   b8f94:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8f96:	2001      	movs	r0, #1
   b8f98:	e7fc      	b.n	b8f94 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b8f9c <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b8f9c:	b530      	push	{r4, r5, lr}
   b8f9e:	b093      	sub	sp, #76	; 0x4c
   b8fa0:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b8fa4:	4b19      	ldr	r3, [pc, #100]	; (b900c <_ZN9TimeClass7timeStrEx+0x70>)
{
   b8fa6:	4604      	mov	r4, r0
    t += time_zone_cache;
   b8fa8:	e9d3 1000 	ldrd	r1, r0, [r3]
   b8fac:	9b01      	ldr	r3, [sp, #4]
   b8fae:	1852      	adds	r2, r2, r1
   b8fb0:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b8fb4:	4816      	ldr	r0, [pc, #88]	; (b9010 <_ZN9TimeClass7timeStrEx+0x74>)
   b8fb6:	e9d0 1000 	ldrd	r1, r0, [r0]
   b8fba:	1852      	adds	r2, r2, r1
   b8fbc:	eb43 0300 	adc.w	r3, r3, r0
   b8fc0:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b8fc4:	2224      	movs	r2, #36	; 0x24
   b8fc6:	eb0d 0002 	add.w	r0, sp, r2
   b8fca:	2100      	movs	r1, #0
   b8fcc:	f000 ff9a 	bl	b9f04 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b8fd0:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b8fd2:	a909      	add	r1, sp, #36	; 0x24
   b8fd4:	4668      	mov	r0, sp
   b8fd6:	f7fd fd03 	bl	b69e0 <localtime_r>
    char ascstr[26] = {};
   b8fda:	2216      	movs	r2, #22
   b8fdc:	4629      	mov	r1, r5
   b8fde:	a803      	add	r0, sp, #12
   b8fe0:	9502      	str	r5, [sp, #8]
   b8fe2:	f000 ff8f 	bl	b9f04 <memset>
    asctime_r(&calendar_time, ascstr);
   b8fe6:	a902      	add	r1, sp, #8
   b8fe8:	a809      	add	r0, sp, #36	; 0x24
   b8fea:	f000 ff07 	bl	b9dfc <asctime_r>
    int len = strlen(ascstr);
   b8fee:	a802      	add	r0, sp, #8
   b8ff0:	f000 ffd0 	bl	b9f94 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b8ff4:	ab12      	add	r3, sp, #72	; 0x48
   b8ff6:	4418      	add	r0, r3
    return String(ascstr);
   b8ff8:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b8ffa:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b8ffe:	4620      	mov	r0, r4
   b9000:	f7ff fad9 	bl	b85b6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b9004:	4620      	mov	r0, r4
   b9006:	b013      	add	sp, #76	; 0x4c
   b9008:	bd30      	pop	{r4, r5, pc}
   b900a:	bf00      	nop
   b900c:	2003e680 	.word	0x2003e680
   b9010:	2003e678 	.word	0x2003e678

000b9014 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b9014:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b9016:	2000      	movs	r0, #0
   b9018:	f7fd f9ba 	bl	b6390 <hal_rtc_time_is_valid>
    if (rtcstate)
   b901c:	4604      	mov	r4, r0
   b901e:	b9a0      	cbnz	r0, b904a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b9020:	f7fd fb86 	bl	b6730 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b9024:	2801      	cmp	r0, #1
   b9026:	d110      	bne.n	b904a <_ZN9TimeClass7isValidEv+0x36>
   b9028:	4620      	mov	r0, r4
   b902a:	f7fd fbb9 	bl	b67a0 <system_thread_get_state>
   b902e:	b960      	cbnz	r0, b904a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b9030:	f7ff ffa6 	bl	b8f80 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b9034:	b910      	cbnz	r0, b903c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b9036:	f7fd fbe3 	bl	b6800 <spark_process>
        while (_while() && !_condition()) {
   b903a:	e7f9      	b.n	b9030 <_ZN9TimeClass7isValidEv+0x1c>
   b903c:	f7ff ffa0 	bl	b8f80 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b9040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b9044:	2000      	movs	r0, #0
   b9046:	f7fd b9a3 	b.w	b6390 <hal_rtc_time_is_valid>
}
   b904a:	4620      	mov	r0, r4
   b904c:	bd10      	pop	{r4, pc}

000b904e <_ZN9TimeClass3nowEv>:
{
   b904e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b9050:	f7ff ffe0 	bl	b9014 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b9054:	2210      	movs	r2, #16
   b9056:	2100      	movs	r1, #0
   b9058:	4668      	mov	r0, sp
   b905a:	f000 ff53 	bl	b9f04 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b905e:	2100      	movs	r1, #0
   b9060:	4668      	mov	r0, sp
   b9062:	f7fd f99d 	bl	b63a0 <hal_rtc_get_time>
}
   b9066:	9800      	ldr	r0, [sp, #0]
   b9068:	b005      	add	sp, #20
   b906a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9070 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9070:	4b02      	ldr	r3, [pc, #8]	; (b907c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b9072:	681a      	ldr	r2, [r3, #0]
   b9074:	4b02      	ldr	r3, [pc, #8]	; (b9080 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b9076:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9078:	4770      	bx	lr
   b907a:	bf00      	nop
   b907c:	2003d9c4 	.word	0x2003d9c4
   b9080:	2003e674 	.word	0x2003e674

000b9084 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   b9084:	4770      	bx	lr

000b9086 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9086:	7441      	strb	r1, [r0, #17]
}
   b9088:	4770      	bx	lr

000b908a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b908a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b908c:	7c00      	ldrb	r0, [r0, #16]
   b908e:	f7fd faef 	bl	b6670 <hal_usart_available_data_for_write>
}
   b9092:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9096:	bd08      	pop	{r3, pc}

000b9098 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9098:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b909a:	7c00      	ldrb	r0, [r0, #16]
   b909c:	f7fd fac0 	bl	b6620 <hal_usart_available>
}
   b90a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b90a4:	bd08      	pop	{r3, pc}

000b90a6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b90a6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b90a8:	7c00      	ldrb	r0, [r0, #16]
   b90aa:	f7fd fac9 	bl	b6640 <hal_usart_peek>
}
   b90ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b90b2:	bd08      	pop	{r3, pc}

000b90b4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b90b4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b90b6:	7c00      	ldrb	r0, [r0, #16]
   b90b8:	f7fd faba 	bl	b6630 <hal_usart_read>
}
   b90bc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b90c0:	bd08      	pop	{r3, pc}

000b90c2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b90c2:	7c00      	ldrb	r0, [r0, #16]
   b90c4:	f7fd bac4 	b.w	b6650 <hal_usart_flush>

000b90c8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b90c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b90ca:	7c45      	ldrb	r5, [r0, #17]
{
   b90cc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b90ce:	b12d      	cbz	r5, b90dc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b90d0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b90d2:	b003      	add	sp, #12
   b90d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b90d8:	f7fd ba9a 	b.w	b6610 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b90dc:	7c00      	ldrb	r0, [r0, #16]
   b90de:	9101      	str	r1, [sp, #4]
   b90e0:	f7fd fac6 	bl	b6670 <hal_usart_available_data_for_write>
   b90e4:	2800      	cmp	r0, #0
   b90e6:	9901      	ldr	r1, [sp, #4]
   b90e8:	dcf2      	bgt.n	b90d0 <_ZN11USARTSerial5writeEh+0x8>
}
   b90ea:	4628      	mov	r0, r5
   b90ec:	b003      	add	sp, #12
   b90ee:	bd30      	pop	{r4, r5, pc}

000b90f0 <_ZN11USARTSerialD0Ev>:
   b90f0:	b510      	push	{r4, lr}
   b90f2:	2114      	movs	r1, #20
   b90f4:	4604      	mov	r4, r0
   b90f6:	f000 fb22 	bl	b973e <_ZdlPvj>
   b90fa:	4620      	mov	r0, r4
   b90fc:	bd10      	pop	{r4, pc}
	...

000b9100 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   b9100:	b510      	push	{r4, lr}
   b9102:	f04f 0c00 	mov.w	ip, #0
   b9106:	4604      	mov	r4, r0
   b9108:	4608      	mov	r0, r1
   b910a:	4611      	mov	r1, r2
   b910c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9110:	e9c4 c201 	strd	ip, r2, [r4, #4]
   b9114:	4a04      	ldr	r2, [pc, #16]	; (b9128 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   b9116:	6022      	str	r2, [r4, #0]
  _blocking = true;
   b9118:	2201      	movs	r2, #1
  _serial = serial;
   b911a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b911c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   b911e:	461a      	mov	r2, r3
   b9120:	f7fd fa6e 	bl	b6600 <hal_usart_init>
}
   b9124:	4620      	mov	r0, r4
   b9126:	bd10      	pop	{r4, pc}
   b9128:	000bac98 	.word	0x000bac98

000b912c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   b912c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   b912e:	4c0e      	ldr	r4, [pc, #56]	; (b9168 <_Z22__fetch_global_Serial1v+0x3c>)
   b9130:	7821      	ldrb	r1, [r4, #0]
   b9132:	f3bf 8f5b 	dmb	ish
   b9136:	f011 0101 	ands.w	r1, r1, #1
   b913a:	d112      	bne.n	b9162 <_Z22__fetch_global_Serial1v+0x36>
   b913c:	4620      	mov	r0, r4
   b913e:	9101      	str	r1, [sp, #4]
   b9140:	f7fa ffaf 	bl	b40a2 <__cxa_guard_acquire>
   b9144:	9901      	ldr	r1, [sp, #4]
   b9146:	b160      	cbz	r0, b9162 <_Z22__fetch_global_Serial1v+0x36>
   b9148:	4a08      	ldr	r2, [pc, #32]	; (b916c <_Z22__fetch_global_Serial1v+0x40>)
   b914a:	4b09      	ldr	r3, [pc, #36]	; (b9170 <_Z22__fetch_global_Serial1v+0x44>)
   b914c:	4809      	ldr	r0, [pc, #36]	; (b9174 <_Z22__fetch_global_Serial1v+0x48>)
   b914e:	f7ff ffd7 	bl	b9100 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   b9152:	4620      	mov	r0, r4
   b9154:	f7fa ffaa 	bl	b40ac <__cxa_guard_release>
   b9158:	4a07      	ldr	r2, [pc, #28]	; (b9178 <_Z22__fetch_global_Serial1v+0x4c>)
   b915a:	4908      	ldr	r1, [pc, #32]	; (b917c <_Z22__fetch_global_Serial1v+0x50>)
   b915c:	4805      	ldr	r0, [pc, #20]	; (b9174 <_Z22__fetch_global_Serial1v+0x48>)
   b915e:	f000 fae9 	bl	b9734 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   b9162:	4804      	ldr	r0, [pc, #16]	; (b9174 <_Z22__fetch_global_Serial1v+0x48>)
   b9164:	b002      	add	sp, #8
   b9166:	bd10      	pop	{r4, pc}
   b9168:	2003e688 	.word	0x2003e688
   b916c:	2003e68c 	.word	0x2003e68c
   b9170:	2003e710 	.word	0x2003e710
   b9174:	2003e794 	.word	0x2003e794
   b9178:	2003da30 	.word	0x2003da30
   b917c:	000b9085 	.word	0x000b9085

000b9180 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9180:	7441      	strb	r1, [r0, #17]
}
   b9182:	4770      	bx	lr

000b9184 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b9184:	4770      	bx	lr

000b9186 <_ZN9USBSerial4readEv>:
{
   b9186:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b9188:	2100      	movs	r1, #0
   b918a:	7c00      	ldrb	r0, [r0, #16]
   b918c:	f7fd fa98 	bl	b66c0 <HAL_USB_USART_Receive_Data>
}
   b9190:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9194:	bd08      	pop	{r3, pc}

000b9196 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   b9196:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b9198:	2101      	movs	r1, #1
   b919a:	7c00      	ldrb	r0, [r0, #16]
   b919c:	f7fd fa90 	bl	b66c0 <HAL_USB_USART_Receive_Data>
}
   b91a0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b91a4:	bd08      	pop	{r3, pc}

000b91a6 <_ZN9USBSerial17availableForWriteEv>:
{
   b91a6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b91a8:	7c00      	ldrb	r0, [r0, #16]
   b91aa:	f7fd fa81 	bl	b66b0 <HAL_USB_USART_Available_Data_For_Write>
}
   b91ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b91b2:	bd08      	pop	{r3, pc}

000b91b4 <_ZN9USBSerial9availableEv>:
{
   b91b4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b91b6:	7c00      	ldrb	r0, [r0, #16]
   b91b8:	f7fd fa72 	bl	b66a0 <HAL_USB_USART_Available_Data>
}
   b91bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b91c0:	bd08      	pop	{r3, pc}

000b91c2 <_ZN9USBSerial5writeEh>:
{
   b91c2:	b513      	push	{r0, r1, r4, lr}
   b91c4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b91c6:	7c00      	ldrb	r0, [r0, #16]
{
   b91c8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b91ca:	f7fd fa71 	bl	b66b0 <HAL_USB_USART_Available_Data_For_Write>
   b91ce:	2800      	cmp	r0, #0
   b91d0:	9901      	ldr	r1, [sp, #4]
   b91d2:	dc01      	bgt.n	b91d8 <_ZN9USBSerial5writeEh+0x16>
   b91d4:	7c60      	ldrb	r0, [r4, #17]
   b91d6:	b120      	cbz	r0, b91e2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b91d8:	7c20      	ldrb	r0, [r4, #16]
   b91da:	f7fd fa79 	bl	b66d0 <HAL_USB_USART_Send_Data>
   b91de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b91e2:	b002      	add	sp, #8
   b91e4:	bd10      	pop	{r4, pc}

000b91e6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b91e6:	7c00      	ldrb	r0, [r0, #16]
   b91e8:	f7fd ba7a 	b.w	b66e0 <HAL_USB_USART_Flush_Data>

000b91ec <_ZN9USBSerialD0Ev>:
   b91ec:	b510      	push	{r4, lr}
   b91ee:	2114      	movs	r1, #20
   b91f0:	4604      	mov	r4, r0
   b91f2:	f000 faa4 	bl	b973e <_ZdlPvj>
   b91f6:	4620      	mov	r0, r4
   b91f8:	bd10      	pop	{r4, pc}
	...

000b91fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b91fc:	b510      	push	{r4, lr}
   b91fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9202:	4604      	mov	r4, r0
   b9204:	4608      	mov	r0, r1
   b9206:	2100      	movs	r1, #0
   b9208:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b920c:	4b04      	ldr	r3, [pc, #16]	; (b9220 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b920e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9210:	2301      	movs	r3, #1
  _serial = serial;
   b9212:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9214:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b9216:	4611      	mov	r1, r2
   b9218:	f7fd fa32 	bl	b6680 <HAL_USB_USART_Init>
}
   b921c:	4620      	mov	r0, r4
   b921e:	bd10      	pop	{r4, pc}
   b9220:	000bacc8 	.word	0x000bacc8

000b9224 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b9224:	7c00      	ldrb	r0, [r0, #16]
   b9226:	2200      	movs	r2, #0
   b9228:	f7fd ba32 	b.w	b6690 <HAL_USB_USART_Begin>

000b922c <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
   b922c:	7c00      	ldrb	r0, [r0, #16]
   b922e:	f7fd ba5f 	b.w	b66f0 <HAL_USB_USART_Is_Connected>

000b9232 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   b9232:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   b9234:	2214      	movs	r2, #20
{
   b9236:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   b9238:	2100      	movs	r1, #0
   b923a:	f000 fe63 	bl	b9f04 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   b923e:	4620      	mov	r0, r4
   b9240:	bd10      	pop	{r4, pc}
	...

000b9244 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   b9244:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9246:	4c10      	ldr	r4, [pc, #64]	; (b9288 <_Z16_fetch_usbserialv+0x44>)
{
   b9248:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b924a:	a803      	add	r0, sp, #12
   b924c:	f7ff fff1 	bl	b9232 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9250:	7821      	ldrb	r1, [r4, #0]
   b9252:	f3bf 8f5b 	dmb	ish
   b9256:	f011 0101 	ands.w	r1, r1, #1
   b925a:	d111      	bne.n	b9280 <_Z16_fetch_usbserialv+0x3c>
   b925c:	4620      	mov	r0, r4
   b925e:	9101      	str	r1, [sp, #4]
   b9260:	f7fa ff1f 	bl	b40a2 <__cxa_guard_acquire>
   b9264:	9901      	ldr	r1, [sp, #4]
   b9266:	b158      	cbz	r0, b9280 <_Z16_fetch_usbserialv+0x3c>
   b9268:	aa03      	add	r2, sp, #12
   b926a:	4808      	ldr	r0, [pc, #32]	; (b928c <_Z16_fetch_usbserialv+0x48>)
   b926c:	f7ff ffc6 	bl	b91fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9270:	4620      	mov	r0, r4
   b9272:	f7fa ff1b 	bl	b40ac <__cxa_guard_release>
   b9276:	4a06      	ldr	r2, [pc, #24]	; (b9290 <_Z16_fetch_usbserialv+0x4c>)
   b9278:	4906      	ldr	r1, [pc, #24]	; (b9294 <_Z16_fetch_usbserialv+0x50>)
   b927a:	4804      	ldr	r0, [pc, #16]	; (b928c <_Z16_fetch_usbserialv+0x48>)
   b927c:	f000 fa5a 	bl	b9734 <__aeabi_atexit>
	return _usbserial;
}
   b9280:	4802      	ldr	r0, [pc, #8]	; (b928c <_Z16_fetch_usbserialv+0x48>)
   b9282:	b008      	add	sp, #32
   b9284:	bd10      	pop	{r4, pc}
   b9286:	bf00      	nop
   b9288:	2003e7a8 	.word	0x2003e7a8
   b928c:	2003e7ac 	.word	0x2003e7ac
   b9290:	2003da30 	.word	0x2003da30
   b9294:	000b9185 	.word	0x000b9185

000b9298 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv>:
                results[index++] = *result;
            }
        }

    protected:
        static void callback(WiFiAccessPoint* result, void* cookie)
   b9298:	b530      	push	{r4, r5, lr}
            if (index<count) {
   b929a:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   b929e:	4293      	cmp	r3, r2
   b92a0:	da10      	bge.n	b92c4 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv+0x2c>
                results[index++] = *result;
   b92a2:	680d      	ldr	r5, [r1, #0]
   b92a4:	1c5a      	adds	r2, r3, #1
   b92a6:	604a      	str	r2, [r1, #4]
   b92a8:	4604      	mov	r4, r0
   b92aa:	2238      	movs	r2, #56	; 0x38
   b92ac:	fb02 5503 	mla	r5, r2, r3, r5
   b92b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b92b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b92b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b92b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b92b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b92ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b92bc:	e894 0003 	ldmia.w	r4, {r0, r1}
   b92c0:	e885 0003 	stmia.w	r5, {r0, r1}
        {
            ((APArrayPopulator*)cookie)->addResult(result);
        }
   b92c4:	bd30      	pop	{r4, r5, pc}

000b92c6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b92c6:	2200      	movs	r2, #0
   b92c8:	6840      	ldr	r0, [r0, #4]
   b92ca:	4611      	mov	r1, r2
   b92cc:	f7fd bb00 	b.w	b68d0 <network_listening>

000b92d0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b92d0:	2200      	movs	r2, #0
   b92d2:	6840      	ldr	r0, [r0, #4]
   b92d4:	4611      	mov	r1, r2
   b92d6:	f7fd bb23 	b.w	b6920 <network_get_listen_timeout>

000b92da <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b92da:	6840      	ldr	r0, [r0, #4]
   b92dc:	2200      	movs	r2, #0
   b92de:	f7fd bb17 	b.w	b6910 <network_set_listen_timeout>

000b92e2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b92e2:	6840      	ldr	r0, [r0, #4]
   b92e4:	2200      	movs	r2, #0
   b92e6:	f081 0101 	eor.w	r1, r1, #1
   b92ea:	f7fd bae9 	b.w	b68c0 <network_listen>

000b92ee <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b92ee:	2200      	movs	r2, #0
   b92f0:	6840      	ldr	r0, [r0, #4]
   b92f2:	4611      	mov	r1, r2
   b92f4:	f7fd babc 	b.w	b6870 <network_connecting>

000b92f8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b92f8:	6840      	ldr	r0, [r0, #4]
   b92fa:	2200      	movs	r2, #0
   b92fc:	2102      	movs	r1, #2
   b92fe:	f7fd babf 	b.w	b6880 <network_disconnect>
	...

000b9304 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>:
        APScan apScan(results, result_count);
        return apScan.start();
    }

#if !HAL_PLATFORM_WIFI_SCAN_ONLY
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
   b9304:	b51f      	push	{r0, r1, r2, r3, r4, lr}
            this->index = 0;
   b9306:	2300      	movs	r3, #0
            this->results = results;
   b9308:	9101      	str	r1, [sp, #4]
            return std::min(count, wlan_get_credentials(callback, this));
   b930a:	4806      	ldr	r0, [pc, #24]	; (b9324 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj+0x20>)
            this->index = 0;
   b930c:	9302      	str	r3, [sp, #8]
            return std::min(count, wlan_get_credentials(callback, this));
   b930e:	a901      	add	r1, sp, #4
            this->count = size;
   b9310:	9203      	str	r2, [sp, #12]
            return std::min(count, wlan_get_credentials(callback, this));
   b9312:	f7fd f9f5 	bl	b6700 <wlan_get_credentials>
        APList apList(results, result_count);
        return apList.start();
    }
   b9316:	9b03      	ldr	r3, [sp, #12]
   b9318:	4298      	cmp	r0, r3
   b931a:	bfa8      	it	ge
   b931c:	4618      	movge	r0, r3
   b931e:	b005      	add	sp, #20
   b9320:	f85d fb04 	ldr.w	pc, [sp], #4
   b9324:	000b9299 	.word	0x000b9299

000b9328 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9328:	4b02      	ldr	r3, [pc, #8]	; (b9334 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b932a:	2204      	movs	r2, #4
   b932c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b932e:	4a02      	ldr	r2, [pc, #8]	; (b9338 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b9330:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b9332:	4770      	bx	lr
   b9334:	2003e7c0 	.word	0x2003e7c0
   b9338:	000bacf8 	.word	0x000bacf8

000b933c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b933c:	b510      	push	{r4, lr}
   b933e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b9340:	f000 fe28 	bl	b9f94 <strlen>
   b9344:	3801      	subs	r0, #1
   b9346:	1823      	adds	r3, r4, r0
   b9348:	4620      	mov	r0, r4
	while(i<j){
   b934a:	4283      	cmp	r3, r0
   b934c:	d906      	bls.n	b935c <_Z11str_reversePc+0x20>
		c = *i;
   b934e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b9350:	7819      	ldrb	r1, [r3, #0]
   b9352:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b9356:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b935a:	e7f6      	b.n	b934a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b935c:	bd10      	pop	{r4, pc}

000b935e <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b935e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b9362:	1e93      	subs	r3, r2, #2
{
   b9364:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b9366:	2b22      	cmp	r3, #34	; 0x22
   b9368:	f04f 0300 	mov.w	r3, #0
{
   b936c:	460d      	mov	r5, r1
   b936e:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b9370:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b9374:	d927      	bls.n	b93c6 <ltoa+0x68>

      if (10 == base && N < 0L)
   b9376:	2800      	cmp	r0, #0
   b9378:	da2a      	bge.n	b93d0 <ltoa+0x72>
      {
            *head++ = '-';
   b937a:	462e      	mov	r6, r5
   b937c:	232d      	movs	r3, #45	; 0x2d
   b937e:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b9382:	4240      	negs	r0, r0
   b9384:	240a      	movs	r4, #10
      *tail-- = '\0';
   b9386:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b938a:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b938e:	4622      	mov	r2, r4
   b9390:	4601      	mov	r1, r0
   b9392:	a801      	add	r0, sp, #4
   b9394:	f000 fd6a 	bl	b9e6c <ldiv>
   b9398:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b939a:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b939c:	2b09      	cmp	r3, #9
   b939e:	bfcc      	ite	gt
   b93a0:	2237      	movgt	r2, #55	; 0x37
   b93a2:	2230      	movle	r2, #48	; 0x30
   b93a4:	fa52 f383 	uxtab	r3, r2, r3
   b93a8:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b93ac:	f108 0801 	add.w	r8, r8, #1
   b93b0:	2800      	cmp	r0, #0
   b93b2:	d1ec      	bne.n	b938e <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b93b4:	4642      	mov	r2, r8
   b93b6:	1c79      	adds	r1, r7, #1
   b93b8:	4630      	mov	r0, r6
   b93ba:	f000 fd7b 	bl	b9eb4 <memcpy>
      return str;
}
   b93be:	4628      	mov	r0, r5
   b93c0:	b00c      	add	sp, #48	; 0x30
   b93c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b93c6:	2a0a      	cmp	r2, #10
   b93c8:	d0d5      	beq.n	b9376 <ltoa+0x18>
      if (uarg)
   b93ca:	b118      	cbz	r0, b93d4 <ltoa+0x76>
   b93cc:	462e      	mov	r6, r5
   b93ce:	e7da      	b.n	b9386 <ltoa+0x28>
   b93d0:	240a      	movs	r4, #10
   b93d2:	e7fa      	b.n	b93ca <ltoa+0x6c>
      else  *tail-- = '0';
   b93d4:	2330      	movs	r3, #48	; 0x30
   b93d6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b93da:	462e      	mov	r6, r5
   b93dc:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b93e0:	f04f 0802 	mov.w	r8, #2
   b93e4:	e7e6      	b.n	b93b4 <ltoa+0x56>

000b93e6 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b93e6:	b570      	push	{r4, r5, r6, lr}
   b93e8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b93ea:	1e91      	subs	r1, r2, #2
   b93ec:	2922      	cmp	r1, #34	; 0x22
   b93ee:	d81d      	bhi.n	b942c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b93f0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b93f2:	b930      	cbnz	r0, b9402 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b93f4:	4423      	add	r3, r4
            *ptr++ = '0';
   b93f6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b93f8:	429d      	cmp	r5, r3
   b93fa:	d210      	bcs.n	b941e <ultoa+0x38>
            *ptr++ = '0';
   b93fc:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b9400:	e7fa      	b.n	b93f8 <ultoa+0x12>
            result.quot = a/radix;
   b9402:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b9406:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b940a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b940c:	2809      	cmp	r0, #9
                *ptr += '0';
   b940e:	bf94      	ite	ls
   b9410:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b9412:	3157      	addhi	r1, #87	; 0x57
   b9414:	b2c9      	uxtb	r1, r1
   b9416:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b941a:	4630      	mov	r0, r6
	while(a){
   b941c:	e7e9      	b.n	b93f2 <ultoa+0xc>

	*ptr = '\0';
   b941e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b9420:	4620      	mov	r0, r4
	*ptr = '\0';
   b9422:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b9424:	f7ff ff8a 	bl	b933c <_Z11str_reversePc>
	return buffer;
   b9428:	4620      	mov	r0, r4
}
   b942a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b942c:	2000      	movs	r0, #0
   b942e:	e7fc      	b.n	b942a <ultoa+0x44>

000b9430 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b9430:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b9432:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b9434:	460c      	mov	r4, r1
   b9436:	4615      	mov	r5, r2
	if(a<0){
   b9438:	da0e      	bge.n	b9458 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b943a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b943e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b9442:	bf14      	ite	ne
   b9444:	4258      	negne	r0, r3
   b9446:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b9448:	2301      	movs	r3, #1
		*buffer = '-';
   b944a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b944c:	462a      	mov	r2, r5
   b944e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b9450:	f7ff ffc9 	bl	b93e6 <ultoa>
	}
	return buffer;
}
   b9454:	4620      	mov	r0, r4
   b9456:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b9458:	2301      	movs	r3, #1
   b945a:	e7f9      	b.n	b9450 <itoa+0x20>

000b945c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b945c:	4b01      	ldr	r3, [pc, #4]	; (b9464 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b945e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b9460:	4770      	bx	lr
   b9462:	bf00      	nop
   b9464:	2003d9c8 	.word	0x2003d9c8

000b9468 <serialEventRun>:
{
   b9468:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b946a:	4b0b      	ldr	r3, [pc, #44]	; (b9498 <serialEventRun+0x30>)
   b946c:	b143      	cbz	r3, b9480 <serialEventRun+0x18>
   b946e:	f7ff fee9 	bl	b9244 <_Z16_fetch_usbserialv>
   b9472:	6803      	ldr	r3, [r0, #0]
   b9474:	691b      	ldr	r3, [r3, #16]
   b9476:	4798      	blx	r3
   b9478:	2800      	cmp	r0, #0
   b947a:	dd01      	ble.n	b9480 <serialEventRun+0x18>
        serialEvent();
   b947c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b9480:	4b06      	ldr	r3, [pc, #24]	; (b949c <serialEventRun+0x34>)
   b9482:	b143      	cbz	r3, b9496 <serialEventRun+0x2e>
   b9484:	f7ff fe52 	bl	b912c <_Z22__fetch_global_Serial1v>
   b9488:	6803      	ldr	r3, [r0, #0]
   b948a:	691b      	ldr	r3, [r3, #16]
   b948c:	4798      	blx	r3
   b948e:	2800      	cmp	r0, #0
   b9490:	dd01      	ble.n	b9496 <serialEventRun+0x2e>
        serialEvent1();
   b9492:	f3af 8000 	nop.w
}
   b9496:	bd08      	pop	{r3, pc}
	...

000b94a0 <_post_loop>:
{
   b94a0:	b508      	push	{r3, lr}
	serialEventRun();
   b94a2:	f7ff ffe1 	bl	b9468 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b94a6:	f7fc ff53 	bl	b6350 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b94aa:	4b01      	ldr	r3, [pc, #4]	; (b94b0 <_post_loop+0x10>)
   b94ac:	6018      	str	r0, [r3, #0]
}
   b94ae:	bd08      	pop	{r3, pc}
   b94b0:	2003e7d0 	.word	0x2003e7d0

000b94b4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b94b4:	4805      	ldr	r0, [pc, #20]	; (b94cc <_Z33system_initialize_user_backup_ramv+0x18>)
   b94b6:	4a06      	ldr	r2, [pc, #24]	; (b94d0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b94b8:	4906      	ldr	r1, [pc, #24]	; (b94d4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b94ba:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b94bc:	1a12      	subs	r2, r2, r0
   b94be:	f000 fcf9 	bl	b9eb4 <memcpy>
    __backup_sram_signature = signature;
   b94c2:	4b05      	ldr	r3, [pc, #20]	; (b94d8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b94c4:	4a05      	ldr	r2, [pc, #20]	; (b94dc <_Z33system_initialize_user_backup_ramv+0x28>)
   b94c6:	601a      	str	r2, [r3, #0]
}
   b94c8:	bd08      	pop	{r3, pc}
   b94ca:	bf00      	nop
   b94cc:	2003f400 	.word	0x2003f400
   b94d0:	2003f404 	.word	0x2003f404
   b94d4:	000bb010 	.word	0x000bb010
   b94d8:	2003f400 	.word	0x2003f400
   b94dc:	9a271c1e 	.word	0x9a271c1e

000b94e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b94e0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b94e2:	2300      	movs	r3, #0
   b94e4:	9300      	str	r3, [sp, #0]
   b94e6:	461a      	mov	r2, r3
   b94e8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b94ec:	f7fd f96a 	bl	b67c4 <system_ctrl_set_result>
}
   b94f0:	b003      	add	sp, #12
   b94f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b94f8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b94f8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b94fa:	8843      	ldrh	r3, [r0, #2]
   b94fc:	2b0a      	cmp	r3, #10
   b94fe:	d008      	beq.n	b9512 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b9500:	2b50      	cmp	r3, #80	; 0x50
   b9502:	d10b      	bne.n	b951c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b9504:	4b09      	ldr	r3, [pc, #36]	; (b952c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b9506:	681b      	ldr	r3, [r3, #0]
   b9508:	b14b      	cbz	r3, b951e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b950a:	b003      	add	sp, #12
   b950c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b9510:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b9512:	f7ff ffe5 	bl	b94e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b9516:	b003      	add	sp, #12
   b9518:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b951c:	2300      	movs	r3, #0
   b951e:	9300      	str	r3, [sp, #0]
   b9520:	461a      	mov	r2, r3
   b9522:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9526:	f7fd f94d 	bl	b67c4 <system_ctrl_set_result>
}
   b952a:	e7f4      	b.n	b9516 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b952c:	2003e7cc 	.word	0x2003e7cc

000b9530 <module_user_init_hook>:
{
   b9530:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b9532:	4812      	ldr	r0, [pc, #72]	; (b957c <module_user_init_hook+0x4c>)
   b9534:	2100      	movs	r1, #0
   b9536:	f7fd fa4b 	bl	b69d0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b953a:	4b11      	ldr	r3, [pc, #68]	; (b9580 <module_user_init_hook+0x50>)
   b953c:	681a      	ldr	r2, [r3, #0]
   b953e:	4b11      	ldr	r3, [pc, #68]	; (b9584 <module_user_init_hook+0x54>)
   b9540:	429a      	cmp	r2, r3
   b9542:	4b11      	ldr	r3, [pc, #68]	; (b9588 <module_user_init_hook+0x58>)
   b9544:	bf0c      	ite	eq
   b9546:	2201      	moveq	r2, #1
   b9548:	2200      	movne	r2, #0
   b954a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b954c:	d001      	beq.n	b9552 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b954e:	f7ff ffb1 	bl	b94b4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b9552:	f7fc feed 	bl	b6330 <HAL_RNG_GetRandomNumber>
   b9556:	4604      	mov	r4, r0
    srand(seed);
   b9558:	f000 fcdc 	bl	b9f14 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b955c:	4b0b      	ldr	r3, [pc, #44]	; (b958c <module_user_init_hook+0x5c>)
   b955e:	b113      	cbz	r3, b9566 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9560:	4620      	mov	r0, r4
   b9562:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b9566:	2100      	movs	r1, #0
   b9568:	4808      	ldr	r0, [pc, #32]	; (b958c <module_user_init_hook+0x5c>)
   b956a:	f7fd f971 	bl	b6850 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b956e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b9572:	4807      	ldr	r0, [pc, #28]	; (b9590 <module_user_init_hook+0x60>)
   b9574:	2100      	movs	r1, #0
   b9576:	f7fd b91b 	b.w	b67b0 <system_ctrl_set_app_request_handler>
   b957a:	bf00      	nop
   b957c:	000b945d 	.word	0x000b945d
   b9580:	2003f400 	.word	0x2003f400
   b9584:	9a271c1e 	.word	0x9a271c1e
   b9588:	2003e7c8 	.word	0x2003e7c8
   b958c:	00000000 	.word	0x00000000
   b9590:	000b94f9 	.word	0x000b94f9

000b9594 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b9594:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b9596:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b9598:	d902      	bls.n	b95a0 <pinAvailable+0xc>
    return false;
   b959a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b959c:	b002      	add	sp, #8
   b959e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b95a0:	f1a0 030b 	sub.w	r3, r0, #11
   b95a4:	2b02      	cmp	r3, #2
   b95a6:	d81a      	bhi.n	b95de <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b95a8:	4c17      	ldr	r4, [pc, #92]	; (b9608 <pinAvailable+0x74>)
   b95aa:	7821      	ldrb	r1, [r4, #0]
   b95ac:	f3bf 8f5b 	dmb	ish
   b95b0:	f011 0101 	ands.w	r1, r1, #1
   b95b4:	d10b      	bne.n	b95ce <pinAvailable+0x3a>
   b95b6:	4620      	mov	r0, r4
   b95b8:	9101      	str	r1, [sp, #4]
   b95ba:	f7fa fd72 	bl	b40a2 <__cxa_guard_acquire>
   b95be:	9901      	ldr	r1, [sp, #4]
   b95c0:	b128      	cbz	r0, b95ce <pinAvailable+0x3a>
   b95c2:	4812      	ldr	r0, [pc, #72]	; (b960c <pinAvailable+0x78>)
   b95c4:	f7fe ff18 	bl	b83f8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b95c8:	4620      	mov	r0, r4
   b95ca:	f7fa fd6f 	bl	b40ac <__cxa_guard_release>
   b95ce:	4b0f      	ldr	r3, [pc, #60]	; (b960c <pinAvailable+0x78>)
   b95d0:	7818      	ldrb	r0, [r3, #0]
   b95d2:	f7fc fff5 	bl	b65c0 <hal_spi_is_enabled>
   b95d6:	2800      	cmp	r0, #0
   b95d8:	d1df      	bne.n	b959a <pinAvailable+0x6>
  return true; // 'pin' is available
   b95da:	2001      	movs	r0, #1
   b95dc:	e7de      	b.n	b959c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b95de:	2801      	cmp	r0, #1
   b95e0:	d809      	bhi.n	b95f6 <pinAvailable+0x62>
   b95e2:	f000 f87f 	bl	b96e4 <_Z19__fetch_global_Wirev>
   b95e6:	2100      	movs	r1, #0
   b95e8:	7c00      	ldrb	r0, [r0, #16]
   b95ea:	f7fc ff41 	bl	b6470 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b95ee:	f080 0001 	eor.w	r0, r0, #1
   b95f2:	b2c0      	uxtb	r0, r0
   b95f4:	e7d2      	b.n	b959c <pinAvailable+0x8>
   b95f6:	3809      	subs	r0, #9
   b95f8:	2801      	cmp	r0, #1
   b95fa:	d8ee      	bhi.n	b95da <pinAvailable+0x46>
   b95fc:	f7ff fd96 	bl	b912c <_Z22__fetch_global_Serial1v>
   b9600:	7c00      	ldrb	r0, [r0, #16]
   b9602:	f7fd f82d 	bl	b6660 <hal_usart_is_enabled>
   b9606:	e7f2      	b.n	b95ee <pinAvailable+0x5a>
   b9608:	2003e624 	.word	0x2003e624
   b960c:	2003e628 	.word	0x2003e628

000b9610 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9610:	2823      	cmp	r0, #35	; 0x23
{
   b9612:	b538      	push	{r3, r4, r5, lr}
   b9614:	4604      	mov	r4, r0
   b9616:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9618:	d80a      	bhi.n	b9630 <pinMode+0x20>
   b961a:	29ff      	cmp	r1, #255	; 0xff
   b961c:	d008      	beq.n	b9630 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b961e:	f7ff ffb9 	bl	b9594 <pinAvailable>
   b9622:	b128      	cbz	r0, b9630 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b9624:	4629      	mov	r1, r5
   b9626:	4620      	mov	r0, r4
}
   b9628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b962c:	f7fc bec0 	b.w	b63b0 <HAL_Pin_Mode>
}
   b9630:	bd38      	pop	{r3, r4, r5, pc}

000b9632 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b9632:	b538      	push	{r3, r4, r5, lr}
   b9634:	4604      	mov	r4, r0
   b9636:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9638:	f7fc fec2 	bl	b63c0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b963c:	28ff      	cmp	r0, #255	; 0xff
   b963e:	d010      	beq.n	b9662 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b9640:	2806      	cmp	r0, #6
   b9642:	d804      	bhi.n	b964e <digitalWrite+0x1c>
   b9644:	234d      	movs	r3, #77	; 0x4d
   b9646:	fa23 f000 	lsr.w	r0, r3, r0
   b964a:	07c3      	lsls	r3, r0, #31
   b964c:	d409      	bmi.n	b9662 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b964e:	4620      	mov	r0, r4
   b9650:	f7ff ffa0 	bl	b9594 <pinAvailable>
   b9654:	b128      	cbz	r0, b9662 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b9656:	4629      	mov	r1, r5
   b9658:	4620      	mov	r0, r4
}
   b965a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b965e:	f7fc beb7 	b.w	b63d0 <HAL_GPIO_Write>
}
   b9662:	bd38      	pop	{r3, r4, r5, pc}

000b9664 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b9664:	b510      	push	{r4, lr}
   b9666:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9668:	f7fc feaa 	bl	b63c0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b966c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b966e:	b2db      	uxtb	r3, r3
   b9670:	2b01      	cmp	r3, #1
   b9672:	d908      	bls.n	b9686 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b9674:	4620      	mov	r0, r4
   b9676:	f7ff ff8d 	bl	b9594 <pinAvailable>
   b967a:	b120      	cbz	r0, b9686 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b967c:	4620      	mov	r0, r4
}
   b967e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b9682:	f7fc bead 	b.w	b63e0 <HAL_GPIO_Read>
}
   b9686:	2000      	movs	r0, #0
   b9688:	bd10      	pop	{r4, pc}
	...

000b968c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   b968c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   b968e:	4c08      	ldr	r4, [pc, #32]	; (b96b0 <_Z21__fetch_global_EEPROMv+0x24>)
   b9690:	7823      	ldrb	r3, [r4, #0]
   b9692:	f3bf 8f5b 	dmb	ish
   b9696:	07db      	lsls	r3, r3, #31
   b9698:	d408      	bmi.n	b96ac <_Z21__fetch_global_EEPROMv+0x20>
   b969a:	4620      	mov	r0, r4
   b969c:	f7fa fd01 	bl	b40a2 <__cxa_guard_acquire>
   b96a0:	b120      	cbz	r0, b96ac <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   b96a2:	f7fc fe5d 	bl	b6360 <HAL_EEPROM_Init>
   b96a6:	4620      	mov	r0, r4
   b96a8:	f7fa fd00 	bl	b40ac <__cxa_guard_release>
	return eeprom;
}
   b96ac:	4801      	ldr	r0, [pc, #4]	; (b96b4 <_Z21__fetch_global_EEPROMv+0x28>)
   b96ae:	bd10      	pop	{r4, pc}
   b96b0:	2003e7d4 	.word	0x2003e7d4
   b96b4:	2003e7d8 	.word	0x2003e7d8

000b96b8 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   b96b8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b96ba:	2520      	movs	r5, #32
   b96bc:	2314      	movs	r3, #20
{
   b96be:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b96c0:	6003      	str	r3, [r0, #0]
   b96c2:	6085      	str	r5, [r0, #8]
   b96c4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b96c6:	4906      	ldr	r1, [pc, #24]	; (b96e0 <_Z17acquireWireBufferv+0x28>)
   b96c8:	4628      	mov	r0, r5
   b96ca:	f000 f83c 	bl	b9746 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b96ce:	4904      	ldr	r1, [pc, #16]	; (b96e0 <_Z17acquireWireBufferv+0x28>)
	};
   b96d0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b96d2:	4628      	mov	r0, r5
   b96d4:	f000 f837 	bl	b9746 <_ZnajRKSt9nothrow_t>
	};
   b96d8:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   b96da:	4620      	mov	r0, r4
   b96dc:	bd38      	pop	{r3, r4, r5, pc}
   b96de:	bf00      	nop
   b96e0:	000bad2c 	.word	0x000bad2c

000b96e4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   b96e4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b96e6:	4d0f      	ldr	r5, [pc, #60]	; (b9724 <_Z19__fetch_global_Wirev+0x40>)
   b96e8:	7829      	ldrb	r1, [r5, #0]
   b96ea:	f3bf 8f5b 	dmb	ish
   b96ee:	f011 0401 	ands.w	r4, r1, #1
{
   b96f2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b96f4:	d113      	bne.n	b971e <_Z19__fetch_global_Wirev+0x3a>
   b96f6:	4628      	mov	r0, r5
   b96f8:	f7fa fcd3 	bl	b40a2 <__cxa_guard_acquire>
   b96fc:	b178      	cbz	r0, b971e <_Z19__fetch_global_Wirev+0x3a>
   b96fe:	a801      	add	r0, sp, #4
   b9700:	f7ff ffda 	bl	b96b8 <_Z17acquireWireBufferv>
   b9704:	aa01      	add	r2, sp, #4
   b9706:	4621      	mov	r1, r4
   b9708:	4807      	ldr	r0, [pc, #28]	; (b9728 <_Z19__fetch_global_Wirev+0x44>)
   b970a:	f7fe fc27 	bl	b7f5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b970e:	4628      	mov	r0, r5
   b9710:	f7fa fccc 	bl	b40ac <__cxa_guard_release>
   b9714:	4a05      	ldr	r2, [pc, #20]	; (b972c <_Z19__fetch_global_Wirev+0x48>)
   b9716:	4906      	ldr	r1, [pc, #24]	; (b9730 <_Z19__fetch_global_Wirev+0x4c>)
   b9718:	4803      	ldr	r0, [pc, #12]	; (b9728 <_Z19__fetch_global_Wirev+0x44>)
   b971a:	f000 f80b 	bl	b9734 <__aeabi_atexit>
	return wire;
}
   b971e:	4802      	ldr	r0, [pc, #8]	; (b9728 <_Z19__fetch_global_Wirev+0x44>)
   b9720:	b007      	add	sp, #28
   b9722:	bd30      	pop	{r4, r5, pc}
   b9724:	2003e7dc 	.word	0x2003e7dc
   b9728:	2003e7e0 	.word	0x2003e7e0
   b972c:	2003da30 	.word	0x2003da30
   b9730:	000b7f05 	.word	0x000b7f05

000b9734 <__aeabi_atexit>:
   b9734:	460b      	mov	r3, r1
   b9736:	4601      	mov	r1, r0
   b9738:	4618      	mov	r0, r3
   b973a:	f000 bb89 	b.w	b9e50 <__cxa_atexit>

000b973e <_ZdlPvj>:
   b973e:	f7fa bcae 	b.w	b409e <_ZdlPv>

000b9742 <_ZnwjRKSt9nothrow_t>:
   b9742:	f7fa bca8 	b.w	b4096 <_Znwj>

000b9746 <_ZnajRKSt9nothrow_t>:
   b9746:	f7fa bca8 	b.w	b409a <_Znaj>

000b974a <_ZSt25__throw_bad_function_callv>:
   b974a:	b508      	push	{r3, lr}
   b974c:	f7fd f928 	bl	b69a0 <abort>

000b9750 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b9750:	4901      	ldr	r1, [pc, #4]	; (b9758 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b9752:	f000 b8f9 	b.w	b9948 <_ZNKSt9type_infoeqERKS_>
   b9756:	bf00      	nop
   b9758:	000bad48 	.word	0x000bad48

000b975c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b975c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b975e:	2400      	movs	r4, #0
   b9760:	2310      	movs	r3, #16
   b9762:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b9766:	6803      	ldr	r3, [r0, #0]
   b9768:	4615      	mov	r5, r2
   b976a:	699e      	ldr	r6, [r3, #24]
   b976c:	6812      	ldr	r2, [r2, #0]
   b976e:	466b      	mov	r3, sp
   b9770:	e9cd 4400 	strd	r4, r4, [sp]
   b9774:	47b0      	blx	r6
   b9776:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b977a:	f003 0306 	and.w	r3, r3, #6
   b977e:	2b06      	cmp	r3, #6
   b9780:	bf03      	ittte	eq
   b9782:	9b00      	ldreq	r3, [sp, #0]
   b9784:	602b      	streq	r3, [r5, #0]
   b9786:	2001      	moveq	r0, #1
   b9788:	4620      	movne	r0, r4
   b978a:	b004      	add	sp, #16
   b978c:	bd70      	pop	{r4, r5, r6, pc}

000b978e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b978e:	9800      	ldr	r0, [sp, #0]
   b9790:	4290      	cmp	r0, r2
   b9792:	bf14      	ite	ne
   b9794:	2001      	movne	r0, #1
   b9796:	2006      	moveq	r0, #6
   b9798:	4770      	bx	lr
	...

000b979c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b979c:	b510      	push	{r4, lr}
   b979e:	4b03      	ldr	r3, [pc, #12]	; (b97ac <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b97a0:	6003      	str	r3, [r0, #0]
   b97a2:	4604      	mov	r4, r0
   b97a4:	f000 f8cd 	bl	b9942 <_ZNSt9type_infoD1Ev>
   b97a8:	4620      	mov	r0, r4
   b97aa:	bd10      	pop	{r4, pc}
   b97ac:	000bad88 	.word	0x000bad88

000b97b0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b97b0:	b510      	push	{r4, lr}
   b97b2:	4604      	mov	r4, r0
   b97b4:	f7ff fff2 	bl	b979c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b97b8:	4620      	mov	r0, r4
   b97ba:	2108      	movs	r1, #8
   b97bc:	f7ff ffbf 	bl	b973e <_ZdlPvj>
   b97c0:	4620      	mov	r0, r4
   b97c2:	bd10      	pop	{r4, pc}

000b97c4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b97c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b97c8:	461f      	mov	r7, r3
   b97ca:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b97ce:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b97d2:	4598      	cmp	r8, r3
   b97d4:	4606      	mov	r6, r0
   b97d6:	4615      	mov	r5, r2
   b97d8:	d107      	bne.n	b97ea <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b97da:	9907      	ldr	r1, [sp, #28]
   b97dc:	f000 f8b4 	bl	b9948 <_ZNKSt9type_infoeqERKS_>
   b97e0:	b118      	cbz	r0, b97ea <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b97e2:	7165      	strb	r5, [r4, #5]
   b97e4:	2000      	movs	r0, #0
   b97e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b97ea:	4639      	mov	r1, r7
   b97ec:	4630      	mov	r0, r6
   b97ee:	f000 f8ab 	bl	b9948 <_ZNKSt9type_infoeqERKS_>
   b97f2:	2800      	cmp	r0, #0
   b97f4:	d0f6      	beq.n	b97e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b97f6:	2301      	movs	r3, #1
   b97f8:	f8c4 8000 	str.w	r8, [r4]
   b97fc:	7125      	strb	r5, [r4, #4]
   b97fe:	71a3      	strb	r3, [r4, #6]
   b9800:	e7f0      	b.n	b97e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9802 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9802:	b538      	push	{r3, r4, r5, lr}
   b9804:	4615      	mov	r5, r2
   b9806:	461c      	mov	r4, r3
   b9808:	f000 f89e 	bl	b9948 <_ZNKSt9type_infoeqERKS_>
   b980c:	b120      	cbz	r0, b9818 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b980e:	2308      	movs	r3, #8
   b9810:	60e3      	str	r3, [r4, #12]
   b9812:	2306      	movs	r3, #6
   b9814:	6025      	str	r5, [r4, #0]
   b9816:	7123      	strb	r3, [r4, #4]
   b9818:	bd38      	pop	{r3, r4, r5, pc}

000b981a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b981a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b981c:	4605      	mov	r5, r0
   b981e:	460c      	mov	r4, r1
   b9820:	9201      	str	r2, [sp, #4]
   b9822:	461e      	mov	r6, r3
   b9824:	f000 f890 	bl	b9948 <_ZNKSt9type_infoeqERKS_>
   b9828:	b950      	cbnz	r0, b9840 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b982a:	2e03      	cmp	r6, #3
   b982c:	d808      	bhi.n	b9840 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b982e:	6823      	ldr	r3, [r4, #0]
   b9830:	9a01      	ldr	r2, [sp, #4]
   b9832:	695b      	ldr	r3, [r3, #20]
   b9834:	4629      	mov	r1, r5
   b9836:	4620      	mov	r0, r4
   b9838:	b002      	add	sp, #8
   b983a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b983e:	4718      	bx	r3
   b9840:	b002      	add	sp, #8
   b9842:	bd70      	pop	{r4, r5, r6, pc}

000b9844 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9844:	b510      	push	{r4, lr}
   b9846:	4b03      	ldr	r3, [pc, #12]	; (b9854 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b9848:	6003      	str	r3, [r0, #0]
   b984a:	4604      	mov	r4, r0
   b984c:	f7ff ffa6 	bl	b979c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9850:	4620      	mov	r0, r4
   b9852:	bd10      	pop	{r4, pc}
   b9854:	000bade8 	.word	0x000bade8

000b9858 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9858:	b510      	push	{r4, lr}
   b985a:	4604      	mov	r4, r0
   b985c:	f7ff fff2 	bl	b9844 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9860:	4620      	mov	r0, r4
   b9862:	210c      	movs	r1, #12
   b9864:	f7ff ff6b 	bl	b973e <_ZdlPvj>
   b9868:	4620      	mov	r0, r4
   b986a:	bd10      	pop	{r4, pc}

000b986c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b986c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b986e:	9f08      	ldr	r7, [sp, #32]
   b9870:	4297      	cmp	r7, r2
   b9872:	4605      	mov	r5, r0
   b9874:	460e      	mov	r6, r1
   b9876:	4614      	mov	r4, r2
   b9878:	d00a      	beq.n	b9890 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b987a:	68a8      	ldr	r0, [r5, #8]
   b987c:	6802      	ldr	r2, [r0, #0]
   b987e:	9708      	str	r7, [sp, #32]
   b9880:	6a15      	ldr	r5, [r2, #32]
   b9882:	4631      	mov	r1, r6
   b9884:	4622      	mov	r2, r4
   b9886:	46ac      	mov	ip, r5
   b9888:	b003      	add	sp, #12
   b988a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b988e:	4760      	bx	ip
   b9890:	4619      	mov	r1, r3
   b9892:	9301      	str	r3, [sp, #4]
   b9894:	f000 f858 	bl	b9948 <_ZNKSt9type_infoeqERKS_>
   b9898:	9b01      	ldr	r3, [sp, #4]
   b989a:	2800      	cmp	r0, #0
   b989c:	d0ed      	beq.n	b987a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b989e:	2006      	movs	r0, #6
   b98a0:	b003      	add	sp, #12
   b98a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b98a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b98a4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b98a8:	460d      	mov	r5, r1
   b98aa:	4619      	mov	r1, r3
   b98ac:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b98b0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b98b4:	4681      	mov	r9, r0
   b98b6:	4617      	mov	r7, r2
   b98b8:	4698      	mov	r8, r3
   b98ba:	f000 f845 	bl	b9948 <_ZNKSt9type_infoeqERKS_>
   b98be:	b190      	cbz	r0, b98e6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b98c0:	2d00      	cmp	r5, #0
   b98c2:	6034      	str	r4, [r6, #0]
   b98c4:	7137      	strb	r7, [r6, #4]
   b98c6:	db09      	blt.n	b98dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b98c8:	1961      	adds	r1, r4, r5
   b98ca:	458a      	cmp	sl, r1
   b98cc:	bf0c      	ite	eq
   b98ce:	2106      	moveq	r1, #6
   b98d0:	2101      	movne	r1, #1
   b98d2:	71b1      	strb	r1, [r6, #6]
   b98d4:	2000      	movs	r0, #0
   b98d6:	b001      	add	sp, #4
   b98d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b98dc:	3502      	adds	r5, #2
   b98de:	d1f9      	bne.n	b98d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b98e0:	2301      	movs	r3, #1
   b98e2:	71b3      	strb	r3, [r6, #6]
   b98e4:	e7f6      	b.n	b98d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b98e6:	4554      	cmp	r4, sl
   b98e8:	d106      	bne.n	b98f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b98ea:	4659      	mov	r1, fp
   b98ec:	4648      	mov	r0, r9
   b98ee:	f000 f82b 	bl	b9948 <_ZNKSt9type_infoeqERKS_>
   b98f2:	b108      	cbz	r0, b98f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b98f4:	7177      	strb	r7, [r6, #5]
   b98f6:	e7ed      	b.n	b98d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b98f8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b98fc:	6803      	ldr	r3, [r0, #0]
   b98fe:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b9902:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b9906:	69dc      	ldr	r4, [r3, #28]
   b9908:	463a      	mov	r2, r7
   b990a:	4643      	mov	r3, r8
   b990c:	4629      	mov	r1, r5
   b990e:	46a4      	mov	ip, r4
   b9910:	b001      	add	sp, #4
   b9912:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9916:	4760      	bx	ip

000b9918 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b991c:	4607      	mov	r7, r0
   b991e:	460c      	mov	r4, r1
   b9920:	4615      	mov	r5, r2
   b9922:	461e      	mov	r6, r3
   b9924:	f7ff ff6d 	bl	b9802 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b9928:	b948      	cbnz	r0, b993e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b992a:	68b8      	ldr	r0, [r7, #8]
   b992c:	6803      	ldr	r3, [r0, #0]
   b992e:	699f      	ldr	r7, [r3, #24]
   b9930:	462a      	mov	r2, r5
   b9932:	4633      	mov	r3, r6
   b9934:	4621      	mov	r1, r4
   b9936:	46bc      	mov	ip, r7
   b9938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b993c:	4760      	bx	ip
   b993e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9942 <_ZNSt9type_infoD1Ev>:
   b9942:	4770      	bx	lr

000b9944 <_ZNKSt9type_info14__is_pointer_pEv>:
   b9944:	2000      	movs	r0, #0
   b9946:	4770      	bx	lr

000b9948 <_ZNKSt9type_infoeqERKS_>:
   b9948:	4281      	cmp	r1, r0
   b994a:	b508      	push	{r3, lr}
   b994c:	d00e      	beq.n	b996c <_ZNKSt9type_infoeqERKS_+0x24>
   b994e:	6840      	ldr	r0, [r0, #4]
   b9950:	7803      	ldrb	r3, [r0, #0]
   b9952:	2b2a      	cmp	r3, #42	; 0x2a
   b9954:	d00c      	beq.n	b9970 <_ZNKSt9type_infoeqERKS_+0x28>
   b9956:	6849      	ldr	r1, [r1, #4]
   b9958:	780b      	ldrb	r3, [r1, #0]
   b995a:	2b2a      	cmp	r3, #42	; 0x2a
   b995c:	bf08      	it	eq
   b995e:	3101      	addeq	r1, #1
   b9960:	f000 fb06 	bl	b9f70 <strcmp>
   b9964:	fab0 f080 	clz	r0, r0
   b9968:	0940      	lsrs	r0, r0, #5
   b996a:	bd08      	pop	{r3, pc}
   b996c:	2001      	movs	r0, #1
   b996e:	e7fc      	b.n	b996a <_ZNKSt9type_infoeqERKS_+0x22>
   b9970:	2000      	movs	r0, #0
   b9972:	e7fa      	b.n	b996a <_ZNKSt9type_infoeqERKS_+0x22>

000b9974 <__aeabi_drsub>:
   b9974:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b9978:	e002      	b.n	b9980 <__adddf3>
   b997a:	bf00      	nop

000b997c <__aeabi_dsub>:
   b997c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b9980 <__adddf3>:
   b9980:	b530      	push	{r4, r5, lr}
   b9982:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b9986:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b998a:	ea94 0f05 	teq	r4, r5
   b998e:	bf08      	it	eq
   b9990:	ea90 0f02 	teqeq	r0, r2
   b9994:	bf1f      	itttt	ne
   b9996:	ea54 0c00 	orrsne.w	ip, r4, r0
   b999a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b999e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b99a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b99a6:	f000 80e2 	beq.w	b9b6e <__adddf3+0x1ee>
   b99aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b99ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b99b2:	bfb8      	it	lt
   b99b4:	426d      	neglt	r5, r5
   b99b6:	dd0c      	ble.n	b99d2 <__adddf3+0x52>
   b99b8:	442c      	add	r4, r5
   b99ba:	ea80 0202 	eor.w	r2, r0, r2
   b99be:	ea81 0303 	eor.w	r3, r1, r3
   b99c2:	ea82 0000 	eor.w	r0, r2, r0
   b99c6:	ea83 0101 	eor.w	r1, r3, r1
   b99ca:	ea80 0202 	eor.w	r2, r0, r2
   b99ce:	ea81 0303 	eor.w	r3, r1, r3
   b99d2:	2d36      	cmp	r5, #54	; 0x36
   b99d4:	bf88      	it	hi
   b99d6:	bd30      	pophi	{r4, r5, pc}
   b99d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b99dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b99e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b99e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b99e8:	d002      	beq.n	b99f0 <__adddf3+0x70>
   b99ea:	4240      	negs	r0, r0
   b99ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b99f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b99f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b99f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b99fc:	d002      	beq.n	b9a04 <__adddf3+0x84>
   b99fe:	4252      	negs	r2, r2
   b9a00:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9a04:	ea94 0f05 	teq	r4, r5
   b9a08:	f000 80a7 	beq.w	b9b5a <__adddf3+0x1da>
   b9a0c:	f1a4 0401 	sub.w	r4, r4, #1
   b9a10:	f1d5 0e20 	rsbs	lr, r5, #32
   b9a14:	db0d      	blt.n	b9a32 <__adddf3+0xb2>
   b9a16:	fa02 fc0e 	lsl.w	ip, r2, lr
   b9a1a:	fa22 f205 	lsr.w	r2, r2, r5
   b9a1e:	1880      	adds	r0, r0, r2
   b9a20:	f141 0100 	adc.w	r1, r1, #0
   b9a24:	fa03 f20e 	lsl.w	r2, r3, lr
   b9a28:	1880      	adds	r0, r0, r2
   b9a2a:	fa43 f305 	asr.w	r3, r3, r5
   b9a2e:	4159      	adcs	r1, r3
   b9a30:	e00e      	b.n	b9a50 <__adddf3+0xd0>
   b9a32:	f1a5 0520 	sub.w	r5, r5, #32
   b9a36:	f10e 0e20 	add.w	lr, lr, #32
   b9a3a:	2a01      	cmp	r2, #1
   b9a3c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b9a40:	bf28      	it	cs
   b9a42:	f04c 0c02 	orrcs.w	ip, ip, #2
   b9a46:	fa43 f305 	asr.w	r3, r3, r5
   b9a4a:	18c0      	adds	r0, r0, r3
   b9a4c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b9a50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9a54:	d507      	bpl.n	b9a66 <__adddf3+0xe6>
   b9a56:	f04f 0e00 	mov.w	lr, #0
   b9a5a:	f1dc 0c00 	rsbs	ip, ip, #0
   b9a5e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b9a62:	eb6e 0101 	sbc.w	r1, lr, r1
   b9a66:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b9a6a:	d31b      	bcc.n	b9aa4 <__adddf3+0x124>
   b9a6c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b9a70:	d30c      	bcc.n	b9a8c <__adddf3+0x10c>
   b9a72:	0849      	lsrs	r1, r1, #1
   b9a74:	ea5f 0030 	movs.w	r0, r0, rrx
   b9a78:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b9a7c:	f104 0401 	add.w	r4, r4, #1
   b9a80:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b9a84:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b9a88:	f080 809a 	bcs.w	b9bc0 <__adddf3+0x240>
   b9a8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b9a90:	bf08      	it	eq
   b9a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9a96:	f150 0000 	adcs.w	r0, r0, #0
   b9a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9a9e:	ea41 0105 	orr.w	r1, r1, r5
   b9aa2:	bd30      	pop	{r4, r5, pc}
   b9aa4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b9aa8:	4140      	adcs	r0, r0
   b9aaa:	eb41 0101 	adc.w	r1, r1, r1
   b9aae:	3c01      	subs	r4, #1
   b9ab0:	bf28      	it	cs
   b9ab2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b9ab6:	d2e9      	bcs.n	b9a8c <__adddf3+0x10c>
   b9ab8:	f091 0f00 	teq	r1, #0
   b9abc:	bf04      	itt	eq
   b9abe:	4601      	moveq	r1, r0
   b9ac0:	2000      	moveq	r0, #0
   b9ac2:	fab1 f381 	clz	r3, r1
   b9ac6:	bf08      	it	eq
   b9ac8:	3320      	addeq	r3, #32
   b9aca:	f1a3 030b 	sub.w	r3, r3, #11
   b9ace:	f1b3 0220 	subs.w	r2, r3, #32
   b9ad2:	da0c      	bge.n	b9aee <__adddf3+0x16e>
   b9ad4:	320c      	adds	r2, #12
   b9ad6:	dd08      	ble.n	b9aea <__adddf3+0x16a>
   b9ad8:	f102 0c14 	add.w	ip, r2, #20
   b9adc:	f1c2 020c 	rsb	r2, r2, #12
   b9ae0:	fa01 f00c 	lsl.w	r0, r1, ip
   b9ae4:	fa21 f102 	lsr.w	r1, r1, r2
   b9ae8:	e00c      	b.n	b9b04 <__adddf3+0x184>
   b9aea:	f102 0214 	add.w	r2, r2, #20
   b9aee:	bfd8      	it	le
   b9af0:	f1c2 0c20 	rsble	ip, r2, #32
   b9af4:	fa01 f102 	lsl.w	r1, r1, r2
   b9af8:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9afc:	bfdc      	itt	le
   b9afe:	ea41 010c 	orrle.w	r1, r1, ip
   b9b02:	4090      	lslle	r0, r2
   b9b04:	1ae4      	subs	r4, r4, r3
   b9b06:	bfa2      	ittt	ge
   b9b08:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9b0c:	4329      	orrge	r1, r5
   b9b0e:	bd30      	popge	{r4, r5, pc}
   b9b10:	ea6f 0404 	mvn.w	r4, r4
   b9b14:	3c1f      	subs	r4, #31
   b9b16:	da1c      	bge.n	b9b52 <__adddf3+0x1d2>
   b9b18:	340c      	adds	r4, #12
   b9b1a:	dc0e      	bgt.n	b9b3a <__adddf3+0x1ba>
   b9b1c:	f104 0414 	add.w	r4, r4, #20
   b9b20:	f1c4 0220 	rsb	r2, r4, #32
   b9b24:	fa20 f004 	lsr.w	r0, r0, r4
   b9b28:	fa01 f302 	lsl.w	r3, r1, r2
   b9b2c:	ea40 0003 	orr.w	r0, r0, r3
   b9b30:	fa21 f304 	lsr.w	r3, r1, r4
   b9b34:	ea45 0103 	orr.w	r1, r5, r3
   b9b38:	bd30      	pop	{r4, r5, pc}
   b9b3a:	f1c4 040c 	rsb	r4, r4, #12
   b9b3e:	f1c4 0220 	rsb	r2, r4, #32
   b9b42:	fa20 f002 	lsr.w	r0, r0, r2
   b9b46:	fa01 f304 	lsl.w	r3, r1, r4
   b9b4a:	ea40 0003 	orr.w	r0, r0, r3
   b9b4e:	4629      	mov	r1, r5
   b9b50:	bd30      	pop	{r4, r5, pc}
   b9b52:	fa21 f004 	lsr.w	r0, r1, r4
   b9b56:	4629      	mov	r1, r5
   b9b58:	bd30      	pop	{r4, r5, pc}
   b9b5a:	f094 0f00 	teq	r4, #0
   b9b5e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b9b62:	bf06      	itte	eq
   b9b64:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b9b68:	3401      	addeq	r4, #1
   b9b6a:	3d01      	subne	r5, #1
   b9b6c:	e74e      	b.n	b9a0c <__adddf3+0x8c>
   b9b6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9b72:	bf18      	it	ne
   b9b74:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9b78:	d029      	beq.n	b9bce <__adddf3+0x24e>
   b9b7a:	ea94 0f05 	teq	r4, r5
   b9b7e:	bf08      	it	eq
   b9b80:	ea90 0f02 	teqeq	r0, r2
   b9b84:	d005      	beq.n	b9b92 <__adddf3+0x212>
   b9b86:	ea54 0c00 	orrs.w	ip, r4, r0
   b9b8a:	bf04      	itt	eq
   b9b8c:	4619      	moveq	r1, r3
   b9b8e:	4610      	moveq	r0, r2
   b9b90:	bd30      	pop	{r4, r5, pc}
   b9b92:	ea91 0f03 	teq	r1, r3
   b9b96:	bf1e      	ittt	ne
   b9b98:	2100      	movne	r1, #0
   b9b9a:	2000      	movne	r0, #0
   b9b9c:	bd30      	popne	{r4, r5, pc}
   b9b9e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b9ba2:	d105      	bne.n	b9bb0 <__adddf3+0x230>
   b9ba4:	0040      	lsls	r0, r0, #1
   b9ba6:	4149      	adcs	r1, r1
   b9ba8:	bf28      	it	cs
   b9baa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b9bae:	bd30      	pop	{r4, r5, pc}
   b9bb0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9bb4:	bf3c      	itt	cc
   b9bb6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9bba:	bd30      	popcc	{r4, r5, pc}
   b9bbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9bc0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9bc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9bc8:	f04f 0000 	mov.w	r0, #0
   b9bcc:	bd30      	pop	{r4, r5, pc}
   b9bce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9bd2:	bf1a      	itte	ne
   b9bd4:	4619      	movne	r1, r3
   b9bd6:	4610      	movne	r0, r2
   b9bd8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9bdc:	bf1c      	itt	ne
   b9bde:	460b      	movne	r3, r1
   b9be0:	4602      	movne	r2, r0
   b9be2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9be6:	bf06      	itte	eq
   b9be8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9bec:	ea91 0f03 	teqeq	r1, r3
   b9bf0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9bf4:	bd30      	pop	{r4, r5, pc}
   b9bf6:	bf00      	nop

000b9bf8 <__aeabi_ui2d>:
   b9bf8:	f090 0f00 	teq	r0, #0
   b9bfc:	bf04      	itt	eq
   b9bfe:	2100      	moveq	r1, #0
   b9c00:	4770      	bxeq	lr
   b9c02:	b530      	push	{r4, r5, lr}
   b9c04:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9c08:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9c0c:	f04f 0500 	mov.w	r5, #0
   b9c10:	f04f 0100 	mov.w	r1, #0
   b9c14:	e750      	b.n	b9ab8 <__adddf3+0x138>
   b9c16:	bf00      	nop

000b9c18 <__aeabi_i2d>:
   b9c18:	f090 0f00 	teq	r0, #0
   b9c1c:	bf04      	itt	eq
   b9c1e:	2100      	moveq	r1, #0
   b9c20:	4770      	bxeq	lr
   b9c22:	b530      	push	{r4, r5, lr}
   b9c24:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9c28:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9c2c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b9c30:	bf48      	it	mi
   b9c32:	4240      	negmi	r0, r0
   b9c34:	f04f 0100 	mov.w	r1, #0
   b9c38:	e73e      	b.n	b9ab8 <__adddf3+0x138>
   b9c3a:	bf00      	nop

000b9c3c <__aeabi_f2d>:
   b9c3c:	0042      	lsls	r2, r0, #1
   b9c3e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b9c42:	ea4f 0131 	mov.w	r1, r1, rrx
   b9c46:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b9c4a:	bf1f      	itttt	ne
   b9c4c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b9c50:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9c54:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9c58:	4770      	bxne	lr
   b9c5a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b9c5e:	bf08      	it	eq
   b9c60:	4770      	bxeq	lr
   b9c62:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b9c66:	bf04      	itt	eq
   b9c68:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9c6c:	4770      	bxeq	lr
   b9c6e:	b530      	push	{r4, r5, lr}
   b9c70:	f44f 7460 	mov.w	r4, #896	; 0x380
   b9c74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9c78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9c7c:	e71c      	b.n	b9ab8 <__adddf3+0x138>
   b9c7e:	bf00      	nop

000b9c80 <__aeabi_ul2d>:
   b9c80:	ea50 0201 	orrs.w	r2, r0, r1
   b9c84:	bf08      	it	eq
   b9c86:	4770      	bxeq	lr
   b9c88:	b530      	push	{r4, r5, lr}
   b9c8a:	f04f 0500 	mov.w	r5, #0
   b9c8e:	e00a      	b.n	b9ca6 <__aeabi_l2d+0x16>

000b9c90 <__aeabi_l2d>:
   b9c90:	ea50 0201 	orrs.w	r2, r0, r1
   b9c94:	bf08      	it	eq
   b9c96:	4770      	bxeq	lr
   b9c98:	b530      	push	{r4, r5, lr}
   b9c9a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b9c9e:	d502      	bpl.n	b9ca6 <__aeabi_l2d+0x16>
   b9ca0:	4240      	negs	r0, r0
   b9ca2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9ca6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9caa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9cae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b9cb2:	f43f aed8 	beq.w	b9a66 <__adddf3+0xe6>
   b9cb6:	f04f 0203 	mov.w	r2, #3
   b9cba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9cbe:	bf18      	it	ne
   b9cc0:	3203      	addne	r2, #3
   b9cc2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9cc6:	bf18      	it	ne
   b9cc8:	3203      	addne	r2, #3
   b9cca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b9cce:	f1c2 0320 	rsb	r3, r2, #32
   b9cd2:	fa00 fc03 	lsl.w	ip, r0, r3
   b9cd6:	fa20 f002 	lsr.w	r0, r0, r2
   b9cda:	fa01 fe03 	lsl.w	lr, r1, r3
   b9cde:	ea40 000e 	orr.w	r0, r0, lr
   b9ce2:	fa21 f102 	lsr.w	r1, r1, r2
   b9ce6:	4414      	add	r4, r2
   b9ce8:	e6bd      	b.n	b9a66 <__adddf3+0xe6>
   b9cea:	bf00      	nop

000b9cec <__gedf2>:
   b9cec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9cf0:	e006      	b.n	b9d00 <__cmpdf2+0x4>
   b9cf2:	bf00      	nop

000b9cf4 <__ledf2>:
   b9cf4:	f04f 0c01 	mov.w	ip, #1
   b9cf8:	e002      	b.n	b9d00 <__cmpdf2+0x4>
   b9cfa:	bf00      	nop

000b9cfc <__cmpdf2>:
   b9cfc:	f04f 0c01 	mov.w	ip, #1
   b9d00:	f84d cd04 	str.w	ip, [sp, #-4]!
   b9d04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9d08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9d0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9d10:	bf18      	it	ne
   b9d12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b9d16:	d01b      	beq.n	b9d50 <__cmpdf2+0x54>
   b9d18:	b001      	add	sp, #4
   b9d1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b9d1e:	bf0c      	ite	eq
   b9d20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b9d24:	ea91 0f03 	teqne	r1, r3
   b9d28:	bf02      	ittt	eq
   b9d2a:	ea90 0f02 	teqeq	r0, r2
   b9d2e:	2000      	moveq	r0, #0
   b9d30:	4770      	bxeq	lr
   b9d32:	f110 0f00 	cmn.w	r0, #0
   b9d36:	ea91 0f03 	teq	r1, r3
   b9d3a:	bf58      	it	pl
   b9d3c:	4299      	cmppl	r1, r3
   b9d3e:	bf08      	it	eq
   b9d40:	4290      	cmpeq	r0, r2
   b9d42:	bf2c      	ite	cs
   b9d44:	17d8      	asrcs	r0, r3, #31
   b9d46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b9d4a:	f040 0001 	orr.w	r0, r0, #1
   b9d4e:	4770      	bx	lr
   b9d50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9d54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9d58:	d102      	bne.n	b9d60 <__cmpdf2+0x64>
   b9d5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b9d5e:	d107      	bne.n	b9d70 <__cmpdf2+0x74>
   b9d60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9d64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9d68:	d1d6      	bne.n	b9d18 <__cmpdf2+0x1c>
   b9d6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b9d6e:	d0d3      	beq.n	b9d18 <__cmpdf2+0x1c>
   b9d70:	f85d 0b04 	ldr.w	r0, [sp], #4
   b9d74:	4770      	bx	lr
   b9d76:	bf00      	nop

000b9d78 <__aeabi_cdrcmple>:
   b9d78:	4684      	mov	ip, r0
   b9d7a:	4610      	mov	r0, r2
   b9d7c:	4662      	mov	r2, ip
   b9d7e:	468c      	mov	ip, r1
   b9d80:	4619      	mov	r1, r3
   b9d82:	4663      	mov	r3, ip
   b9d84:	e000      	b.n	b9d88 <__aeabi_cdcmpeq>
   b9d86:	bf00      	nop

000b9d88 <__aeabi_cdcmpeq>:
   b9d88:	b501      	push	{r0, lr}
   b9d8a:	f7ff ffb7 	bl	b9cfc <__cmpdf2>
   b9d8e:	2800      	cmp	r0, #0
   b9d90:	bf48      	it	mi
   b9d92:	f110 0f00 	cmnmi.w	r0, #0
   b9d96:	bd01      	pop	{r0, pc}

000b9d98 <__aeabi_dcmpeq>:
   b9d98:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9d9c:	f7ff fff4 	bl	b9d88 <__aeabi_cdcmpeq>
   b9da0:	bf0c      	ite	eq
   b9da2:	2001      	moveq	r0, #1
   b9da4:	2000      	movne	r0, #0
   b9da6:	f85d fb08 	ldr.w	pc, [sp], #8
   b9daa:	bf00      	nop

000b9dac <__aeabi_dcmplt>:
   b9dac:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9db0:	f7ff ffea 	bl	b9d88 <__aeabi_cdcmpeq>
   b9db4:	bf34      	ite	cc
   b9db6:	2001      	movcc	r0, #1
   b9db8:	2000      	movcs	r0, #0
   b9dba:	f85d fb08 	ldr.w	pc, [sp], #8
   b9dbe:	bf00      	nop

000b9dc0 <__aeabi_dcmple>:
   b9dc0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9dc4:	f7ff ffe0 	bl	b9d88 <__aeabi_cdcmpeq>
   b9dc8:	bf94      	ite	ls
   b9dca:	2001      	movls	r0, #1
   b9dcc:	2000      	movhi	r0, #0
   b9dce:	f85d fb08 	ldr.w	pc, [sp], #8
   b9dd2:	bf00      	nop

000b9dd4 <__aeabi_dcmpge>:
   b9dd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9dd8:	f7ff ffce 	bl	b9d78 <__aeabi_cdrcmple>
   b9ddc:	bf94      	ite	ls
   b9dde:	2001      	movls	r0, #1
   b9de0:	2000      	movhi	r0, #0
   b9de2:	f85d fb08 	ldr.w	pc, [sp], #8
   b9de6:	bf00      	nop

000b9de8 <__aeabi_dcmpgt>:
   b9de8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9dec:	f7ff ffc4 	bl	b9d78 <__aeabi_cdrcmple>
   b9df0:	bf34      	ite	cc
   b9df2:	2001      	movcc	r0, #1
   b9df4:	2000      	movcs	r0, #0
   b9df6:	f85d fb08 	ldr.w	pc, [sp], #8
   b9dfa:	bf00      	nop

000b9dfc <asctime_r>:
   b9dfc:	b510      	push	{r4, lr}
   b9dfe:	460c      	mov	r4, r1
   b9e00:	6941      	ldr	r1, [r0, #20]
   b9e02:	6903      	ldr	r3, [r0, #16]
   b9e04:	6982      	ldr	r2, [r0, #24]
   b9e06:	b086      	sub	sp, #24
   b9e08:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b9e0c:	9104      	str	r1, [sp, #16]
   b9e0e:	6801      	ldr	r1, [r0, #0]
   b9e10:	9103      	str	r1, [sp, #12]
   b9e12:	6841      	ldr	r1, [r0, #4]
   b9e14:	9102      	str	r1, [sp, #8]
   b9e16:	6881      	ldr	r1, [r0, #8]
   b9e18:	9101      	str	r1, [sp, #4]
   b9e1a:	68c1      	ldr	r1, [r0, #12]
   b9e1c:	9100      	str	r1, [sp, #0]
   b9e1e:	4907      	ldr	r1, [pc, #28]	; (b9e3c <asctime_r+0x40>)
   b9e20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b9e24:	440b      	add	r3, r1
   b9e26:	4906      	ldr	r1, [pc, #24]	; (b9e40 <asctime_r+0x44>)
   b9e28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b9e2c:	440a      	add	r2, r1
   b9e2e:	4620      	mov	r0, r4
   b9e30:	4904      	ldr	r1, [pc, #16]	; (b9e44 <asctime_r+0x48>)
   b9e32:	f7fc fda5 	bl	b6980 <siprintf>
   b9e36:	4620      	mov	r0, r4
   b9e38:	b006      	add	sp, #24
   b9e3a:	bd10      	pop	{r4, pc}
   b9e3c:	000bae56 	.word	0x000bae56
   b9e40:	000bae41 	.word	0x000bae41
   b9e44:	000bae21 	.word	0x000bae21

000b9e48 <atoi>:
   b9e48:	220a      	movs	r2, #10
   b9e4a:	2100      	movs	r1, #0
   b9e4c:	f000 b962 	b.w	ba114 <strtol>

000b9e50 <__cxa_atexit>:
   b9e50:	b510      	push	{r4, lr}
   b9e52:	4c05      	ldr	r4, [pc, #20]	; (b9e68 <__cxa_atexit+0x18>)
   b9e54:	4613      	mov	r3, r2
   b9e56:	b12c      	cbz	r4, b9e64 <__cxa_atexit+0x14>
   b9e58:	460a      	mov	r2, r1
   b9e5a:	4601      	mov	r1, r0
   b9e5c:	2002      	movs	r0, #2
   b9e5e:	f3af 8000 	nop.w
   b9e62:	bd10      	pop	{r4, pc}
   b9e64:	4620      	mov	r0, r4
   b9e66:	e7fc      	b.n	b9e62 <__cxa_atexit+0x12>
   b9e68:	00000000 	.word	0x00000000

000b9e6c <ldiv>:
   b9e6c:	2900      	cmp	r1, #0
   b9e6e:	b510      	push	{r4, lr}
   b9e70:	fb91 f4f2 	sdiv	r4, r1, r2
   b9e74:	fb02 1314 	mls	r3, r2, r4, r1
   b9e78:	db06      	blt.n	b9e88 <ldiv+0x1c>
   b9e7a:	2b00      	cmp	r3, #0
   b9e7c:	da01      	bge.n	b9e82 <ldiv+0x16>
   b9e7e:	3401      	adds	r4, #1
   b9e80:	1a9b      	subs	r3, r3, r2
   b9e82:	e9c0 4300 	strd	r4, r3, [r0]
   b9e86:	bd10      	pop	{r4, pc}
   b9e88:	2b00      	cmp	r3, #0
   b9e8a:	bfc4      	itt	gt
   b9e8c:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   b9e90:	189b      	addgt	r3, r3, r2
   b9e92:	e7f6      	b.n	b9e82 <ldiv+0x16>

000b9e94 <memcmp>:
   b9e94:	b510      	push	{r4, lr}
   b9e96:	3901      	subs	r1, #1
   b9e98:	4402      	add	r2, r0
   b9e9a:	4290      	cmp	r0, r2
   b9e9c:	d101      	bne.n	b9ea2 <memcmp+0xe>
   b9e9e:	2000      	movs	r0, #0
   b9ea0:	e005      	b.n	b9eae <memcmp+0x1a>
   b9ea2:	7803      	ldrb	r3, [r0, #0]
   b9ea4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9ea8:	42a3      	cmp	r3, r4
   b9eaa:	d001      	beq.n	b9eb0 <memcmp+0x1c>
   b9eac:	1b18      	subs	r0, r3, r4
   b9eae:	bd10      	pop	{r4, pc}
   b9eb0:	3001      	adds	r0, #1
   b9eb2:	e7f2      	b.n	b9e9a <memcmp+0x6>

000b9eb4 <memcpy>:
   b9eb4:	440a      	add	r2, r1
   b9eb6:	4291      	cmp	r1, r2
   b9eb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b9ebc:	d100      	bne.n	b9ec0 <memcpy+0xc>
   b9ebe:	4770      	bx	lr
   b9ec0:	b510      	push	{r4, lr}
   b9ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9ec6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9eca:	4291      	cmp	r1, r2
   b9ecc:	d1f9      	bne.n	b9ec2 <memcpy+0xe>
   b9ece:	bd10      	pop	{r4, pc}

000b9ed0 <memmove>:
   b9ed0:	4288      	cmp	r0, r1
   b9ed2:	b510      	push	{r4, lr}
   b9ed4:	eb01 0402 	add.w	r4, r1, r2
   b9ed8:	d902      	bls.n	b9ee0 <memmove+0x10>
   b9eda:	4284      	cmp	r4, r0
   b9edc:	4623      	mov	r3, r4
   b9ede:	d807      	bhi.n	b9ef0 <memmove+0x20>
   b9ee0:	1e43      	subs	r3, r0, #1
   b9ee2:	42a1      	cmp	r1, r4
   b9ee4:	d008      	beq.n	b9ef8 <memmove+0x28>
   b9ee6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9eea:	f803 2f01 	strb.w	r2, [r3, #1]!
   b9eee:	e7f8      	b.n	b9ee2 <memmove+0x12>
   b9ef0:	4402      	add	r2, r0
   b9ef2:	4601      	mov	r1, r0
   b9ef4:	428a      	cmp	r2, r1
   b9ef6:	d100      	bne.n	b9efa <memmove+0x2a>
   b9ef8:	bd10      	pop	{r4, pc}
   b9efa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b9efe:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b9f02:	e7f7      	b.n	b9ef4 <memmove+0x24>

000b9f04 <memset>:
   b9f04:	4402      	add	r2, r0
   b9f06:	4603      	mov	r3, r0
   b9f08:	4293      	cmp	r3, r2
   b9f0a:	d100      	bne.n	b9f0e <memset+0xa>
   b9f0c:	4770      	bx	lr
   b9f0e:	f803 1b01 	strb.w	r1, [r3], #1
   b9f12:	e7f9      	b.n	b9f08 <memset+0x4>

000b9f14 <srand>:
   b9f14:	b538      	push	{r3, r4, r5, lr}
   b9f16:	4b10      	ldr	r3, [pc, #64]	; (b9f58 <srand+0x44>)
   b9f18:	681d      	ldr	r5, [r3, #0]
   b9f1a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9f1c:	4604      	mov	r4, r0
   b9f1e:	b9b3      	cbnz	r3, b9f4e <srand+0x3a>
   b9f20:	2018      	movs	r0, #24
   b9f22:	f7fc fd15 	bl	b6950 <malloc>
   b9f26:	4602      	mov	r2, r0
   b9f28:	63a8      	str	r0, [r5, #56]	; 0x38
   b9f2a:	b920      	cbnz	r0, b9f36 <srand+0x22>
   b9f2c:	4b0b      	ldr	r3, [pc, #44]	; (b9f5c <srand+0x48>)
   b9f2e:	480c      	ldr	r0, [pc, #48]	; (b9f60 <srand+0x4c>)
   b9f30:	2142      	movs	r1, #66	; 0x42
   b9f32:	f7fc fd45 	bl	b69c0 <__assert_func>
   b9f36:	490b      	ldr	r1, [pc, #44]	; (b9f64 <srand+0x50>)
   b9f38:	4b0b      	ldr	r3, [pc, #44]	; (b9f68 <srand+0x54>)
   b9f3a:	e9c0 1300 	strd	r1, r3, [r0]
   b9f3e:	4b0b      	ldr	r3, [pc, #44]	; (b9f6c <srand+0x58>)
   b9f40:	6083      	str	r3, [r0, #8]
   b9f42:	230b      	movs	r3, #11
   b9f44:	8183      	strh	r3, [r0, #12]
   b9f46:	2100      	movs	r1, #0
   b9f48:	2001      	movs	r0, #1
   b9f4a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9f4e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9f50:	2200      	movs	r2, #0
   b9f52:	611c      	str	r4, [r3, #16]
   b9f54:	615a      	str	r2, [r3, #20]
   b9f56:	bd38      	pop	{r3, r4, r5, pc}
   b9f58:	2003d9c8 	.word	0x2003d9c8
   b9f5c:	000bae7a 	.word	0x000bae7a
   b9f60:	000bae91 	.word	0x000bae91
   b9f64:	abcd330e 	.word	0xabcd330e
   b9f68:	e66d1234 	.word	0xe66d1234
   b9f6c:	0005deec 	.word	0x0005deec

000b9f70 <strcmp>:
   b9f70:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9f74:	f811 3b01 	ldrb.w	r3, [r1], #1
   b9f78:	2a01      	cmp	r2, #1
   b9f7a:	bf28      	it	cs
   b9f7c:	429a      	cmpcs	r2, r3
   b9f7e:	d0f7      	beq.n	b9f70 <strcmp>
   b9f80:	1ad0      	subs	r0, r2, r3
   b9f82:	4770      	bx	lr

000b9f84 <strcpy>:
   b9f84:	4603      	mov	r3, r0
   b9f86:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9f8a:	f803 2b01 	strb.w	r2, [r3], #1
   b9f8e:	2a00      	cmp	r2, #0
   b9f90:	d1f9      	bne.n	b9f86 <strcpy+0x2>
   b9f92:	4770      	bx	lr

000b9f94 <strlen>:
   b9f94:	4603      	mov	r3, r0
   b9f96:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9f9a:	2a00      	cmp	r2, #0
   b9f9c:	d1fb      	bne.n	b9f96 <strlen+0x2>
   b9f9e:	1a18      	subs	r0, r3, r0
   b9fa0:	3801      	subs	r0, #1
   b9fa2:	4770      	bx	lr

000b9fa4 <strncpy>:
   b9fa4:	b510      	push	{r4, lr}
   b9fa6:	3901      	subs	r1, #1
   b9fa8:	4603      	mov	r3, r0
   b9faa:	b132      	cbz	r2, b9fba <strncpy+0x16>
   b9fac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9fb0:	f803 4b01 	strb.w	r4, [r3], #1
   b9fb4:	3a01      	subs	r2, #1
   b9fb6:	2c00      	cmp	r4, #0
   b9fb8:	d1f7      	bne.n	b9faa <strncpy+0x6>
   b9fba:	441a      	add	r2, r3
   b9fbc:	2100      	movs	r1, #0
   b9fbe:	4293      	cmp	r3, r2
   b9fc0:	d100      	bne.n	b9fc4 <strncpy+0x20>
   b9fc2:	bd10      	pop	{r4, pc}
   b9fc4:	f803 1b01 	strb.w	r1, [r3], #1
   b9fc8:	e7f9      	b.n	b9fbe <strncpy+0x1a>

000b9fca <strnlen>:
   b9fca:	b510      	push	{r4, lr}
   b9fcc:	4602      	mov	r2, r0
   b9fce:	4401      	add	r1, r0
   b9fd0:	428a      	cmp	r2, r1
   b9fd2:	4613      	mov	r3, r2
   b9fd4:	d003      	beq.n	b9fde <strnlen+0x14>
   b9fd6:	781c      	ldrb	r4, [r3, #0]
   b9fd8:	3201      	adds	r2, #1
   b9fda:	2c00      	cmp	r4, #0
   b9fdc:	d1f8      	bne.n	b9fd0 <strnlen+0x6>
   b9fde:	1a18      	subs	r0, r3, r0
   b9fe0:	bd10      	pop	{r4, pc}

000b9fe2 <strstr>:
   b9fe2:	780a      	ldrb	r2, [r1, #0]
   b9fe4:	b570      	push	{r4, r5, r6, lr}
   b9fe6:	b96a      	cbnz	r2, ba004 <strstr+0x22>
   b9fe8:	bd70      	pop	{r4, r5, r6, pc}
   b9fea:	429a      	cmp	r2, r3
   b9fec:	d109      	bne.n	ba002 <strstr+0x20>
   b9fee:	460c      	mov	r4, r1
   b9ff0:	4605      	mov	r5, r0
   b9ff2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   b9ff6:	2b00      	cmp	r3, #0
   b9ff8:	d0f6      	beq.n	b9fe8 <strstr+0x6>
   b9ffa:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   b9ffe:	429e      	cmp	r6, r3
   ba000:	d0f7      	beq.n	b9ff2 <strstr+0x10>
   ba002:	3001      	adds	r0, #1
   ba004:	7803      	ldrb	r3, [r0, #0]
   ba006:	2b00      	cmp	r3, #0
   ba008:	d1ef      	bne.n	b9fea <strstr+0x8>
   ba00a:	4618      	mov	r0, r3
   ba00c:	e7ec      	b.n	b9fe8 <strstr+0x6>
	...

000ba010 <_strtol_l.constprop.0>:
   ba010:	2b01      	cmp	r3, #1
   ba012:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba016:	d001      	beq.n	ba01c <_strtol_l.constprop.0+0xc>
   ba018:	2b24      	cmp	r3, #36	; 0x24
   ba01a:	d906      	bls.n	ba02a <_strtol_l.constprop.0+0x1a>
   ba01c:	f7fc fcc8 	bl	b69b0 <__errno>
   ba020:	2316      	movs	r3, #22
   ba022:	6003      	str	r3, [r0, #0]
   ba024:	2000      	movs	r0, #0
   ba026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba02a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; ba110 <_strtol_l.constprop.0+0x100>
   ba02e:	460d      	mov	r5, r1
   ba030:	462e      	mov	r6, r5
   ba032:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba036:	f814 700c 	ldrb.w	r7, [r4, ip]
   ba03a:	f017 0708 	ands.w	r7, r7, #8
   ba03e:	d1f7      	bne.n	ba030 <_strtol_l.constprop.0+0x20>
   ba040:	2c2d      	cmp	r4, #45	; 0x2d
   ba042:	d132      	bne.n	ba0aa <_strtol_l.constprop.0+0x9a>
   ba044:	782c      	ldrb	r4, [r5, #0]
   ba046:	2701      	movs	r7, #1
   ba048:	1cb5      	adds	r5, r6, #2
   ba04a:	2b00      	cmp	r3, #0
   ba04c:	d05b      	beq.n	ba106 <_strtol_l.constprop.0+0xf6>
   ba04e:	2b10      	cmp	r3, #16
   ba050:	d109      	bne.n	ba066 <_strtol_l.constprop.0+0x56>
   ba052:	2c30      	cmp	r4, #48	; 0x30
   ba054:	d107      	bne.n	ba066 <_strtol_l.constprop.0+0x56>
   ba056:	782c      	ldrb	r4, [r5, #0]
   ba058:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   ba05c:	2c58      	cmp	r4, #88	; 0x58
   ba05e:	d14d      	bne.n	ba0fc <_strtol_l.constprop.0+0xec>
   ba060:	786c      	ldrb	r4, [r5, #1]
   ba062:	2310      	movs	r3, #16
   ba064:	3502      	adds	r5, #2
   ba066:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   ba06a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   ba06e:	f04f 0c00 	mov.w	ip, #0
   ba072:	fbb8 f9f3 	udiv	r9, r8, r3
   ba076:	4666      	mov	r6, ip
   ba078:	fb03 8a19 	mls	sl, r3, r9, r8
   ba07c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   ba080:	f1be 0f09 	cmp.w	lr, #9
   ba084:	d816      	bhi.n	ba0b4 <_strtol_l.constprop.0+0xa4>
   ba086:	4674      	mov	r4, lr
   ba088:	42a3      	cmp	r3, r4
   ba08a:	dd24      	ble.n	ba0d6 <_strtol_l.constprop.0+0xc6>
   ba08c:	f1bc 0f00 	cmp.w	ip, #0
   ba090:	db1e      	blt.n	ba0d0 <_strtol_l.constprop.0+0xc0>
   ba092:	45b1      	cmp	r9, r6
   ba094:	d31c      	bcc.n	ba0d0 <_strtol_l.constprop.0+0xc0>
   ba096:	d101      	bne.n	ba09c <_strtol_l.constprop.0+0x8c>
   ba098:	45a2      	cmp	sl, r4
   ba09a:	db19      	blt.n	ba0d0 <_strtol_l.constprop.0+0xc0>
   ba09c:	fb06 4603 	mla	r6, r6, r3, r4
   ba0a0:	f04f 0c01 	mov.w	ip, #1
   ba0a4:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba0a8:	e7e8      	b.n	ba07c <_strtol_l.constprop.0+0x6c>
   ba0aa:	2c2b      	cmp	r4, #43	; 0x2b
   ba0ac:	bf04      	itt	eq
   ba0ae:	782c      	ldrbeq	r4, [r5, #0]
   ba0b0:	1cb5      	addeq	r5, r6, #2
   ba0b2:	e7ca      	b.n	ba04a <_strtol_l.constprop.0+0x3a>
   ba0b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   ba0b8:	f1be 0f19 	cmp.w	lr, #25
   ba0bc:	d801      	bhi.n	ba0c2 <_strtol_l.constprop.0+0xb2>
   ba0be:	3c37      	subs	r4, #55	; 0x37
   ba0c0:	e7e2      	b.n	ba088 <_strtol_l.constprop.0+0x78>
   ba0c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   ba0c6:	f1be 0f19 	cmp.w	lr, #25
   ba0ca:	d804      	bhi.n	ba0d6 <_strtol_l.constprop.0+0xc6>
   ba0cc:	3c57      	subs	r4, #87	; 0x57
   ba0ce:	e7db      	b.n	ba088 <_strtol_l.constprop.0+0x78>
   ba0d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   ba0d4:	e7e6      	b.n	ba0a4 <_strtol_l.constprop.0+0x94>
   ba0d6:	f1bc 0f00 	cmp.w	ip, #0
   ba0da:	da05      	bge.n	ba0e8 <_strtol_l.constprop.0+0xd8>
   ba0dc:	2322      	movs	r3, #34	; 0x22
   ba0de:	6003      	str	r3, [r0, #0]
   ba0e0:	4646      	mov	r6, r8
   ba0e2:	b942      	cbnz	r2, ba0f6 <_strtol_l.constprop.0+0xe6>
   ba0e4:	4630      	mov	r0, r6
   ba0e6:	e79e      	b.n	ba026 <_strtol_l.constprop.0+0x16>
   ba0e8:	b107      	cbz	r7, ba0ec <_strtol_l.constprop.0+0xdc>
   ba0ea:	4276      	negs	r6, r6
   ba0ec:	2a00      	cmp	r2, #0
   ba0ee:	d0f9      	beq.n	ba0e4 <_strtol_l.constprop.0+0xd4>
   ba0f0:	f1bc 0f00 	cmp.w	ip, #0
   ba0f4:	d000      	beq.n	ba0f8 <_strtol_l.constprop.0+0xe8>
   ba0f6:	1e69      	subs	r1, r5, #1
   ba0f8:	6011      	str	r1, [r2, #0]
   ba0fa:	e7f3      	b.n	ba0e4 <_strtol_l.constprop.0+0xd4>
   ba0fc:	2430      	movs	r4, #48	; 0x30
   ba0fe:	2b00      	cmp	r3, #0
   ba100:	d1b1      	bne.n	ba066 <_strtol_l.constprop.0+0x56>
   ba102:	2308      	movs	r3, #8
   ba104:	e7af      	b.n	ba066 <_strtol_l.constprop.0+0x56>
   ba106:	2c30      	cmp	r4, #48	; 0x30
   ba108:	d0a5      	beq.n	ba056 <_strtol_l.constprop.0+0x46>
   ba10a:	230a      	movs	r3, #10
   ba10c:	e7ab      	b.n	ba066 <_strtol_l.constprop.0+0x56>
   ba10e:	bf00      	nop
   ba110:	000baeeb 	.word	0x000baeeb

000ba114 <strtol>:
   ba114:	4613      	mov	r3, r2
   ba116:	460a      	mov	r2, r1
   ba118:	4601      	mov	r1, r0
   ba11a:	4802      	ldr	r0, [pc, #8]	; (ba124 <strtol+0x10>)
   ba11c:	6800      	ldr	r0, [r0, #0]
   ba11e:	f7ff bf77 	b.w	ba010 <_strtol_l.constprop.0>
   ba122:	bf00      	nop
   ba124:	2003d9c8 	.word	0x2003d9c8

000ba128 <dynalib_user>:
   ba128:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   ba138:	00000000 69676964 65756c67 006f692e     ....digiglue.io.
   ba148:	6572002f 64726f63 49676e69 7265746e     /.recordingInter
   ba158:	3a6c6176 00692520 6f706572 6e697472     val: %i.reportin
   ba168:	746e4967 61767265 25203a6c 53440069     gInterval: %i.DS
   ba178:	6e204449 7320746f 65726f74 6e692064     ID not stored in
   ba188:	50454520 2e4d4f52 454c4220 6e6f6320      EEPROM. BLE con
   ba198:	20676966 75716572 64657269 46695700     fig required.WiF
   ba1a8:	61662069 64656c69 206f7420 6e6e6f63     i failed to conn
   ba1b8:	2c746365 74616420 6f6e2061 65722074     ect, data not re
   ba1c8:	74726f70 57006465 20694669 6e6e6f63     ported.WiFi conn
   ba1d8:	65746365 72202c64 726f7065 676e6974     ected, reporting
   ba1e8:	74616420 6f520061 766f6c6c 70207265      data.Rollover p
   ba1f8:	6f6c7961 203a6461 64227b00 22617461     ayload: .{"data"
   ba208:	5d005b3a 4f50007d 53005453 75746174     :[.]}.POST.Statu
   ba218:	00203a73 42716552 3a79646f 227b0020     s: .ReqBody: .{"
   ba228:	64697364 2c003a22 61762220 2265756c     dsid":., "value"
   ba238:	202c003a 6d697422 61747365 3a22706d     :., "timestamp":
   ba248:	002c7d00 6c696146 74206465 6e69206f     .},.Failed to in
   ba258:	61697469 657a696c 53494c20 00484433     itialize LIS3DH.
   ba268:	63736964 656e6e6f 64657463 656c5300     disconnected.Sle
   ba278:	70207065 65636f72 77207373 69746961     ep process waiti
   ba288:	6620676e 6d20726f 78657475 636f6c20     ng for mutex loc
   ba298:	5700736b 20694669 6e6e6f63 65746365     ks.WiFi connecte
   ba2a8:	73202c64 69636e79 7420676e 00656d69     d, syncing time.
   ba2b8:	72727543 20746e65 656d6974 3a736920     Current time is:
   ba2c8:	00732520 69466957 69616620 2064656c      %s.WiFi failed 
   ba2d8:	63206f74 656e6e6f 202c7463 70696b73     to connect, skip
   ba2e8:	676e6970 6d697420 79732065 7268636e     ping time synchr
   ba2f8:	7a696e6f 6f697461 6572006e 74726f70     onization.report
   ba308:	65726854 42006461 4157454c 42005449     Thread.BLEWAIT.B
   ba318:	6320454c 656e6e6f 64657463 454c4200     LE connected.BLE
   ba328:	746f6e20 6e6f6320 7463656e 202c6465      not connected, 
   ba338:	746e6f63 69756e69 7720676e 20687469     continuing with 
   ba348:	726f7473 73206465 69747465 2e73676e     stored settings.
   ba358:	656c6200 74696157 43726f46 69666e6f     .bleWaitForConfi
   ba368:	65520067 64726f63 20676e69 65646e69     g.Recording inde
   ba378:	25203a78 65720069 73657571 676e6974     x: %i.requesting
   ba388:	79617020 64616f6c 65636341 6f4c7373      payloadAccessLo
   ba398:	70006b63 6f6c7961 63416461 73736563     ck.payloadAccess
   ba3a8:	6b636f4c 6c657220 65736165 79622064     Lock released by
   ba3b8:	43455220 4944524f 4600474e 74737269      RECORDING.First
   ba3c8:	61657220 676e6964 72430a00 6e656465      reading..Creden
   ba3d8:	6c616974 72612073 75632065 6e657272     tials are curren
   ba3e8:	20796c74 726f7473 66206465 0a3a726f     tly stored for:.
   ba3f8:	0a2c005b 450a5d00 7265746e 74656e20     [.,..].Enter net
   ba408:	6b726f77 49535320 62282044 6b6e616c     work SSID (blank
   ba418:	206f7420 70696b73 6327202c 7261656c      to skip, 'clear
   ba428:	6f742027 73657220 63207465 65646572     ' to reset crede
   ba438:	6169746e 3a29736c 430a0020 65727275     ntials): ..Curre
   ba448:	4420746e 20444953 5b207369 450a5d00     nt DSID is [.].E
   ba458:	7265746e 76656420 20656369 44495344     nter device DSID
   ba468:	6c622820 206b6e61 73206f74 2970696b      (blank to skip)
   ba478:	6300203a 7261656c 6e450a00 20726574     : .clear..Enter 
   ba488:	7774656e 206b726f 73736170 64726f77     network password
   ba498:	0a00203a 6572430a 746e6564 736c6169     : ...Credentials
   ba4a8:	74657320 74697720 73732068 203a6469      set with ssid: 
   ba4b8:	61700a00 6f777373 203a6472 000a0a00     ..password: ....
   ba4c8:	746e450a 27207265 74736574 6f742027     .Enter 'test' to
   ba4d8:	73657420 72632074 6e656465 6c616974      test credential
   ba4e8:	62282073 6b6e616c 206f7420 70696b73     s (blank to skip
   ba4f8:	00203a29 74736574 6d697400 74756f65     ): .test.timeout
   ba508:	63755300 73736563 45000a21 524f5252     .Success!..ERROR
   ba518:	6957203a 63206946 656e6e6f 6f697463     : WiFi connectio
   ba528:	6974206e 756f656d 64000a74 20646973     n timeout..dsid 
   ba538:	65746e65 00646572 64697364 0a00203a     entered.dsid: ..
   ba548:	72727543 20746e65 756c6176 6f662065     Current value fo
   ba558:	61642072 63206174 656c6c6f 6f697463     r data collectio
   ba568:	6e69206e 76726574 69206c61 005b2073     n interval is [.
   ba578:	6e450a5d 20726574 656d6974 74656220     ].Enter time bet
   ba588:	6e656577 74616420 6f632061 63656c6c     ween data collec
   ba598:	6e6f6974 20736120 69206e61 6765746e     tion as an integ
   ba5a8:	69207265 696d206e 73696c6c 6e6f6365     er in millisecon
   ba5b8:	28207364 6e616c62 6f74206b 696b7320     ds (blank to ski
   ba5c8:	203a2970 75430a00 6e657272 61762074     p): ..Current va
   ba5d8:	2065756c 20726f66 69466957 6e6f6320     lue for WiFi con
   ba5e8:	7463656e 206e6f69 65746e69 6c617672     nection interval
   ba5f8:	20736920 0a5d005b 65746e45 69742072      is [.].Enter ti
   ba608:	6220656d 65777465 57206e65 20694669     me between WiFi 
   ba618:	6e6e6f63 69746365 20736e6f 61207361     connections as a
   ba628:	6e69206e 65676574 6e692072 63657320     n integer in sec
   ba638:	73646e6f 6c622820 206b6e61 73206f74     onds (blank to s
   ba648:	2970696b 0a00203a 65746e45 6f272072     kip): ..Enter 'o
   ba658:	20276174 77206f74 20746961 20726f66     ta' to wait for 
   ba668:	2041544f 61647075 28206574 6e616c62     OTA update (blan
   ba678:	6f74206b 696b7320 203a2970 61746f00     k to skip): .ota
   ba688:	46695700 6f632069 63656e6e 2c646574     .WiFi connected,
   ba698:	61776120 6e697469 70752067 65746164      awaiting update
   ba6a8:	77410a00 69746961 4f20676e 75204154     ..Awaiting OTA u
   ba6b8:	74616470 45360065 30303034 422d3130     pdate.6E400001-B
   ba6c8:	2d334135 33393346 4130452d 35452d39     5A3-F393-E0A9-E5
   ba6d8:	34324530 41434344 36004539 30303445     0E24DCCA9E.6E400
   ba6e8:	2d323030 33413542 3933462d 30452d33     002-B5A3-F393-E0
   ba6f8:	452d3941 32453035 43434434 00453941     A9-E50E24DCCA9E.
   ba708:	30344536 33303030 4135422d 33462d33     6E400003-B5A3-F3
   ba718:	452d3339 2d394130 45303545 43443432     93-E0A9-E50E24DC
   ba728:	45394143 00787400 41007872 70656363     CA9E.tx.rx.Accep
   ba738:	70610074 63696c70 6f697461 736a2f6e     t.application/js
   ba748:	43006e6f 65746e6f 542d746e 00657079     on.Content-Type.

000ba758 <_ZTV15Adafruit_LIS3DH>:
	...
   ba760:	000b40b3 000b55bd 000b582d 000b5c09     .@...U..-X...\..
   ba770:	000b5831 70747448 65696c43 093e746e     1X..HttpClient>.
   ba780:	6e6e6f43 69746365 7420676e 00203a6f     Connecting to: .
   ba790:	70747448 65696c43 093e746e 6e6e6f43     HttpClient>.Conn
   ba7a0:	69746365 7420676e 5049206f 2000203a     ecting to IP: . 
   ba7b0:	50545448 302e312f 48000a0d 43707474     HTTP/1.0...HttpC
   ba7c0:	6e65696c 53093e74 74726174 20666f20     lient>.Start of 
   ba7d0:	50545448 71655220 74736575 6c63002e     HTTP Request..cl
   ba7e0:	0065736f 6e6e6f43 69746365 48006e6f     ose.Connection.H
   ba7f0:	43707474 6e65696c 43093e74 656e6e6f     ttpClient>.Conne
   ba800:	6f697463 6166206e 64656c69 4f48002e     ction failed..HO
   ba810:	43005453 65746e6f 4c2d746e 74676e65     ST.Content-Lengt
   ba820:	74480068 6c437074 746e6569 6e45093e     h.HttpClient>.En
   ba830:	666f2064 54544820 65522050 73657571     d of HTTP Reques
   ba840:	0d002e74 7474480a 696c4370 3e746e65     t....HttpClient>
   ba850:	63655209 69766965 5420676e 74205043     .Receiving TCP t
   ba860:	736e6172 69746361 6f206e6f 20002066     ransaction of . 
   ba870:	65747962 48002e73 43707474 6e65696c     bytes..HttpClien
   ba880:	45093e74 726f7272 6552203a 6e6f7073     t>.Error: Respon
   ba890:	62206573 2079646f 6772616c 74207265     se body larger t
   ba8a0:	206e6168 66667562 002e7265 74480a0d     han buffer....Ht
   ba8b0:	6c437074 746e6569 6e45093e 666f2064     tpClient>.End of
   ba8c0:	50435420 61727420 6361736e 6e6f6974      TCP transaction
   ba8d0:	0a0d002e 70747448 65696c43 093e746e     ....HttpClient>.
   ba8e0:	6f727245 54203a72 6f656d69 77207475     Error: Timeout w
   ba8f0:	656c6968 61657220 676e6964 73657220     hile reading res
   ba900:	736e6f70 0d002e65 7474480a 696c4370     ponse....HttpCli
   ba910:	3e746e65 646e4509 20666f20 50545448     ent>.End of HTTP
   ba920:	73655220 736e6f70 00282065 2e29736d      Response (.ms).
   ba930:	74744800 696c4370 3e746e65 61745309     .HttpClient>.Sta
   ba940:	20737574 65646f43 0d00203a 000a0d0a     tus Code: ......
   ba950:	70747448 65696c43 093e746e 6f727245     HttpClient>.Erro
   ba960:	43203a72 74276e61 6e696620 54482064     r: Can't find HT
   ba970:	72205054 6f707365 2065736e 79646f62     TP response body
   ba980:	6977002e 676e6972 656c622e 61745300     ..wiring.ble.Sta
   ba990:	64207472 6f637369 69726576 7320676e     rt discovering s
   ba9a0:	69767265 2e736563 65655000 65642072     ervices..Peer de
   ba9b0:	65636976 20736920 7373696d 21676e69     vice is missing!
   ba9c0:	69614600 2064656c 61206f74 6e657070     .Failed to appen
   ba9d0:	65702064 43207265 72746e65 64206c61     d peer Central d
   ba9e0:	63697665 43002e65 656e6e6f 64657463     evice..Connected
   ba9f0:	20796220 746e6543 206c6172 69766564      by Central devi
   baa00:	002e6563 63736944 656e6e6f 64657463     ce..Disconnected
   baa10:	20796220 6f6d6572 64206574 63697665      by remote devic
   baa20:	44002e65 696c7075 65746163 68632064     e..Duplicated ch
   baa30:	63617261 69726574 63697473 6e616320     aracteristic can
   baa40:	20746f6e 61206562 64656464 6146002e     not be added..Fa
   baa50:	64656c69 206f7420 65707061 6c20646e     iled to append l
   baa60:	6c61636f 61686320 74636172 73697265     ocal characteris
   baa70:	2e636974 00000000                       tic.....

000baa78 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   baa80:	000b69fd 000b6a61 000b6c27 000b6a8b     .i..aj..'l...j..
   baa90:	000b6a01                                .j..

000baa94 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   baa9c:	000b69f9 000b6a6f 000b69fb 000b6a91     .i..oj...i...j..
   baaac:	000b6a21                                !j..

000baab0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   baab8:	000b69f7 000b6a7d 000b7489 000b6a97     .i..}j...t...j..
   baac8:	000b6a41                                Aj..

000baacc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   baad8:	34fb0000 00805f9b 10008000 00000000     ...4._..........
	...

000baaea <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   baaea:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000baafa <_ZN8particle7BleUuid9BASE_UUIDE>:
   baafa:	5f9b34fb 80000080 00001000 00000000     .4._............
	...

000bab0c <_ZTVN5spark13EthernetClassE>:
	...
   bab14:	000b7ee7 000b7edd 000b7ed3 000b7ec9     .~...~...~...~..
   bab24:	000b7ebd 000b7eb1 000b816d 000b8175     .~...~..m...u...
   bab34:	000b7ea5 000b7e9d 000b7e93 000b7e89     .~...~...~...~..
   bab44:	000b81a5                                ....

000bab48 <_ZTV7TwoWire>:
	...
   bab50:	000b7f05 000b7f4f 000b7f27 000b7f07     ....O...'.......
   bab60:	000b7f2f 000b7f37 000b7f3f 000b7f47     /...7...?...G...

000bab70 <_ZTV9IPAddress>:
	...
   bab78:	000b8011 000b8001 000b8003 00707061     ............app.

000bab88 <_ZTVN5spark12NetworkClassE>:
	...
   bab90:	000b812d 000b8137 000b8141 000b814b     -...7...A...K...
   baba0:	000b8155 000b8161 000b816d 000b8175     U...a...m...u...
   babb0:	000b817d 000b8189 000b8191 000b819b     }...............
   babc0:	000b81a5                                ....

000babc4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   babc4:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   babd4:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   babe4:	72756769 6f697461 7369206e 766e6920     iguration is inv
   babf4:	64696c61 6572002e 65207663 726f7272     alid..recv error
   bac04:	25203d20 00000064                        = %d...

000bac0c <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bac14:	000b8a25 000b8a49 000b8f7b 000b8a57     %...I...{...W...
   bac24:	000b8a29                                )...

000bac28 <_ZTV9TCPClient>:
	...
   bac30:	000b8ad5 000b8b09 000b89a1 000b89bb     ................
   bac40:	000b8e11 000b89e5 000b8c87 000b8a19     ................
   bac50:	000b8d19 000b8b59 000b8cb5 000b8ec5     ....Y...........
   bac60:	000b8c55 000b8a1b 000b89cd 000b8a5d     U...........]...
   bac70:	000b8b39 252d5925 64252d6d 3a482554     9...%Y-%m-%dT%H:
   bac80:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000bac90 <_ZTV11USARTSerial>:
	...
   bac98:	000b9085 000b90f1 000b90c9 000b8291     ................
   baca8:	000b9099 000b90b5 000b90a7 000b90c3     ................
   bacb8:	000b9087 000b908b                       ........

000bacc0 <_ZTV9USBSerial>:
	...
   bacc8:	000b9185 000b91ed 000b91c3 000b8291     ................
   bacd8:	000b91b5 000b9187 000b9197 000b91e7     ................
   bace8:	000b91a7 000b9181                       ........

000bacf0 <_ZTVN5spark9WiFiClassE>:
	...
   bacf8:	000b41d9 000b92f9 000b92ef 000b41e3     .A...........A..
   bad08:	000b41c1 000b41cd 000b816d 000b8175     .A...A..m...u...
   bad18:	000b92e3 000b92db 000b92d1 000b92c7     ................
   bad28:	000b81a5                                ....

000bad2c <_ZSt7nothrow>:
	...

000bad2d <_ZTSSt19_Sp_make_shared_tag>:
   bad2d:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   bad3d:	5f646572 00676174                        red_tag....

000bad48 <_ZTISt19_Sp_make_shared_tag>:
   bad48:	000bad88 000bad2d                       ....-...

000bad50 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bad50:	000bade8 000bad5c 000bae0c              ....\.......

000bad5c <_ZTSN10__cxxabiv117__class_type_infoE>:
   bad5c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   bad6c:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   bad7c:	00000045                                E...

000bad80 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bad80:	00000000 000bad50 000b979d 000b97b1     ....P...........
   bad90:	000b9945 000b9945 000b981b 000b975d     E...E.......]...
   bada0:	000b9803 000b97c5 000b978f              ............

000badac <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   badac:	000bade8 000badb8 000bad50              ........P...

000badb8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   badb8:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   badc8:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   badd8:	456f666e 00000000                       nfoE....

000bade0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bade0:	00000000 000badac 000b9845 000b9859     ........E...Y...
   badf0:	000b9945 000b9945 000b981b 000b975d     E...E.......]...
   bae00:	000b9919 000b98a5 000b986d              ........m...

000bae0c <_ZTISt9type_info>:
   bae0c:	000bad88 000bae14                       ........

000bae14 <_ZTSSt9type_info>:
   bae14:	74397453 5f657079 6f666e69 332e2500     St9type_info.%.3
   bae24:	2e252073 33257333 2e252064 253a6432     s %.3s%3d %.2d:%
   bae34:	3a64322e 64322e25 0a642520               .2d:%.2d %d..

000bae41 <day_name.1>:
   bae41:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   bae51:	61536972                                 riSat

000bae56 <mon_name.0>:
   bae56:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   bae66:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   bae76:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   bae86:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   bae96:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   baea6:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   baeb6:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   baec6:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   baed6:	62696c2f 74732f63 62696c64 6e61722f     /libc/stdlib/ran
   baee6:	00632e64                                d.c.

000baeea <_ctype_>:
   baeea:	20202000 20202020 28282020 20282828     .         ((((( 
   baefa:	20202020 20202020 20202020 20202020                     
   baf0a:	10108820 10101010 10101010 10101010      ...............
   baf1a:	04040410 04040404 10040404 10101010     ................
   baf2a:	41411010 41414141 01010101 01010101     ..AAAAAA........
   baf3a:	01010101 01010101 01010101 10101010     ................
   baf4a:	42421010 42424242 02020202 02020202     ..BBBBBB........
   baf5a:	02020202 02020202 02020202 10101010     ................
   baf6a:	00000020 00000000 00000000 00000000      ...............
	...

000bafeb <link_const_variable_data_end>:
	...

000bafec <link_constructors_location>:
   bafec:	000b55cd 	.word	0x000b55cd
   baff0:	000b7e61 	.word	0x000b7e61
   baff4:	000b7ef1 	.word	0x000b7ef1
   baff8:	000b811d 	.word	0x000b811d
   baffc:	000b827d 	.word	0x000b827d
   bb000:	000b83d1 	.word	0x000b83d1
   bb004:	000b8965 	.word	0x000b8965
   bb008:	000b9071 	.word	0x000b9071
   bb00c:	000b9329 	.word	0x000b9329
