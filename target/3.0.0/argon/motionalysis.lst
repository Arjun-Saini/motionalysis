
e:/IoT/motionalysis/target/3.0.0/argon/motionalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006550  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000da570  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000090  2003e01c  000da574  0001e01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000744  2003e0ac  2003e0ac  0002e0ac  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000da604  000da604  0002a604  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000da62c  000da62c  0002a62c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001c0f42  00000000  00000000  0002a630  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001a34b  00000000  00000000  001eb572  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003c8f1  00000000  00000000  002058bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003328  00000000  00000000  002421ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a8f0  00000000  00000000  002454d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003c786  00000000  00000000  0024fdc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00044714  00000000  00000000  0028c54c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0013220a  00000000  00000000  002d0c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00009158  00000000  00000000  00402e6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
   d4026:	b508      	push	{r3, lr}
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fc61 	bl	d98f8 <memcpy>
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fc83 	bl	d9948 <memset>
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e01c 	.word	0x2003e01c
   d404c:	000da574 	.word	0x000da574
   d4050:	2003e0ac 	.word	0x2003e0ac
   d4054:	2003e0ac 	.word	0x2003e0ac
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
   d405c:	b570      	push	{r4, r5, r6, lr}
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4062:	f003 fef7 	bl	d7e54 <module_user_init_hook>
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
   d4070:	bd70      	pop	{r4, r5, r6, pc}
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000da54c 	.word	0x000da54c
   d4080:	000da570 	.word	0x000da570

000d4084 <module_user_setup>:
   d4084:	f000 b8a6 	b.w	d41d4 <setup>

000d4088 <module_user_loop>:
   d4088:	b508      	push	{r3, lr}
   d408a:	f000 f9a1 	bl	d43d0 <loop>
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4092:	f003 bea1 	b.w	d7dd8 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 beb7 	b.w	d5e08 <malloc>

000d409a <_Znaj>:
   d409a:	f001 beb5 	b.w	d5e08 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bebb 	b.w	d5e18 <free>

000d40a2 <__cxa_guard_acquire>:
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   d40b2:	4770      	bx	lr

000d40b4 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   d40b4:	b510      	push	{r4, lr}
   d40b6:	4604      	mov	r4, r0
   d40b8:	3004      	adds	r0, #4
   d40ba:	f002 f906 	bl	d62ca <_ZN6StringD1Ev>
   d40be:	4620      	mov	r0, r4
   d40c0:	bd10      	pop	{r4, pc}

000d40c2 <_ZN14http_request_tD1Ev>:
} http_request_t;
   d40c2:	b510      	push	{r4, lr}
   d40c4:	4604      	mov	r4, r0
   d40c6:	303c      	adds	r0, #60	; 0x3c
   d40c8:	f002 f8ff 	bl	d62ca <_ZN6StringD1Ev>
   d40cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d40d0:	f002 f8fb 	bl	d62ca <_ZN6StringD1Ev>
   d40d4:	4620      	mov	r0, r4
   d40d6:	f002 f8f8 	bl	d62ca <_ZN6StringD1Ev>
   d40da:	4620      	mov	r0, r4
   d40dc:	bd10      	pop	{r4, pc}
	...

000d40e0 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv>:
  }

  count++;
}

void connectCallback(const BlePeerDevice& peer, void* context){
   d40e0:	b508      	push	{r3, lr}
  count = 0;
   d40e2:	4b07      	ldr	r3, [pc, #28]	; (d4100 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x20>)
   d40e4:	2200      	movs	r2, #0
   d40e6:	601a      	str	r2, [r3, #0]
  Serial.println("connected");
   d40e8:	f003 ffe4 	bl	d80b4 <_Z16_fetch_usbserialv>
   d40ec:	4905      	ldr	r1, [pc, #20]	; (d4104 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x24>)
   d40ee:	f003 fcdc 	bl	d7aaa <_ZN5Print7printlnEPKc>
  digitalWrite(D7, HIGH);
}
   d40f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(D7, HIGH);
   d40f6:	2101      	movs	r1, #1
   d40f8:	2007      	movs	r0, #7
   d40fa:	f004 bd22 	b.w	d8b42 <digitalWrite>
   d40fe:	bf00      	nop
   d4100:	2003e114 	.word	0x2003e114
   d4104:	000d9b63 	.word	0x000d9b63

000d4108 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv>:

void disconnectCallback(const BlePeerDevice& peer, void* context){
   d4108:	b508      	push	{r3, lr}
  Serial.println("disconnected");
   d410a:	f003 ffd3 	bl	d80b4 <_Z16_fetch_usbserialv>
   d410e:	4904      	ldr	r1, [pc, #16]	; (d4120 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   d4110:	f003 fccb 	bl	d7aaa <_ZN5Print7printlnEPKc>
  digitalWrite(D7, LOW);
   d4114:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(D7, LOW);
   d4118:	2100      	movs	r1, #0
   d411a:	2007      	movs	r0, #7
   d411c:	f004 bd11 	b.w	d8b42 <digitalWrite>
   d4120:	000d9b60 	.word	0x000d9b60

000d4124 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d4124:	b538      	push	{r3, r4, r5, lr}
   d4126:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d4128:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d412a:	b128      	cbz	r0, d4138 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d412c:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d412e:	210c      	movs	r1, #12
   d4130:	f004 fd8f 	bl	d8c52 <_ZdlPvj>
            wakeupSource = next;
   d4134:	4628      	mov	r0, r5
        while (wakeupSource) {
   d4136:	e7f8      	b.n	d412a <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d4138:	4620      	mov	r0, r4
   d413a:	bd38      	pop	{r3, r4, r5, pc}

000d413c <_ZN10HttpClientD1Ev>:

class HttpClient {
   d413c:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d413e:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4140:	4b0a      	ldr	r3, [pc, #40]	; (d416c <_ZN10HttpClientD1Ev+0x30>)
   d4142:	6003      	str	r3, [r0, #0]
   d4144:	4605      	mov	r5, r0
   d4146:	b17c      	cbz	r4, d4168 <_ZN10HttpClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4148:	6863      	ldr	r3, [r4, #4]
   d414a:	3b01      	subs	r3, #1
   d414c:	6063      	str	r3, [r4, #4]
   d414e:	b95b      	cbnz	r3, d4168 <_ZN10HttpClientD1Ev+0x2c>
          _M_dispose();
   d4150:	6823      	ldr	r3, [r4, #0]
   d4152:	4620      	mov	r0, r4
   d4154:	689b      	ldr	r3, [r3, #8]
   d4156:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4158:	68a3      	ldr	r3, [r4, #8]
   d415a:	3b01      	subs	r3, #1
   d415c:	60a3      	str	r3, [r4, #8]
   d415e:	b91b      	cbnz	r3, d4168 <_ZN10HttpClientD1Ev+0x2c>
            _M_destroy();
   d4160:	6823      	ldr	r3, [r4, #0]
   d4162:	4620      	mov	r0, r4
   d4164:	68db      	ldr	r3, [r3, #12]
   d4166:	4798      	blx	r3
   d4168:	4628      	mov	r0, r5
   d416a:	bd38      	pop	{r3, r4, r5, pc}
   d416c:	000da298 	.word	0x000da298

000d4170 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4170:	b510      	push	{r4, lr}
   d4172:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4174:	6800      	ldr	r0, [r0, #0]
   d4176:	b108      	cbz	r0, d417c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4178:	f001 fe4e 	bl	d5e18 <free>
class SystemClass {
   d417c:	4620      	mov	r0, r4
   d417e:	bd10      	pop	{r4, pc}

000d4180 <_ZN8particle24SystemSleepConfiguration8durationEm>:
            gpio(pins[i], mode);
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4180:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d4182:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4184:	4605      	mov	r5, r0
   d4186:	460e      	mov	r6, r1
        if (valid_) {
   d4188:	b1cb      	cbz	r3, d41be <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d418a:	6803      	ldr	r3, [r0, #0]
   d418c:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d418e:	b123      	cbz	r3, d419a <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d4190:	889a      	ldrh	r2, [r3, #4]
   d4192:	2a04      	cmp	r2, #4
   d4194:	d017      	beq.n	d41c6 <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d4196:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4198:	e7f9      	b.n	d418e <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d419a:	490c      	ldr	r1, [pc, #48]	; (d41cc <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d419c:	2010      	movs	r0, #16
   d419e:	f004 fd5a 	bl	d8c56 <_ZnwjRKSt9nothrow_t>
   d41a2:	4604      	mov	r4, r0
   d41a4:	b168      	cbz	r0, d41c2 <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d41a6:	2210      	movs	r2, #16
   d41a8:	2100      	movs	r1, #0
   d41aa:	f005 fbcd 	bl	d9948 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d41ae:	4b08      	ldr	r3, [pc, #32]	; (d41d0 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d41b0:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d41b2:	2304      	movs	r3, #4
   d41b4:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d41b6:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d41b8:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d41ba:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d41be:	4628      	mov	r0, r5
   d41c0:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d41c2:	7528      	strb	r0, [r5, #20]
                return *this;
   d41c4:	e7fb      	b.n	d41be <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d41c6:	60de      	str	r6, [r3, #12]
                return *this;
   d41c8:	e7f9      	b.n	d41be <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d41ca:	bf00      	nop
   d41cc:	000da354 	.word	0x000da354
   d41d0:	00030010 	.word	0x00030010

000d41d4 <setup>:
void setup() {
   d41d4:	b510      	push	{r4, lr}
   d41d6:	b096      	sub	sp, #88	; 0x58
  EEPROM.get(200, wifiTimeLeft);
   d41d8:	f004 fce0 	bl	d8b9c <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d41dc:	2204      	movs	r2, #4
   d41de:	494c      	ldr	r1, [pc, #304]	; (d4310 <setup+0x13c>)
   d41e0:	20c8      	movs	r0, #200	; 0xc8
   d41e2:	f001 fae7 	bl	d57b4 <HAL_EEPROM_Get>
        if (valid_) {
   d41e6:	4b4b      	ldr	r3, [pc, #300]	; (d4314 <setup+0x140>)
   d41e8:	7d1a      	ldrb	r2, [r3, #20]
   d41ea:	b10a      	cbz	r2, d41f0 <setup+0x1c>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d41ec:	2202      	movs	r2, #2
   d41ee:	721a      	strb	r2, [r3, #8]
  config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(1000);
   d41f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d41f4:	4847      	ldr	r0, [pc, #284]	; (d4314 <setup+0x140>)
  request.hostname = "trek.thewcl.com";
   d41f6:	4c48      	ldr	r4, [pc, #288]	; (d4318 <setup+0x144>)
  config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(1000);
   d41f8:	f7ff ffc2 	bl	d4180 <_ZN8particle24SystemSleepConfiguration8durationEm>
  Serial.begin(9600);
   d41fc:	f003 ff5a 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4200:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4204:	f003 ff4a 	bl	d809c <_ZN9USBSerial5beginEl>
  lis.begin(0x18);
   d4208:	2118      	movs	r1, #24
   d420a:	4844      	ldr	r0, [pc, #272]	; (d431c <setup+0x148>)
   d420c:	f001 f949 	bl	d54a2 <_ZN15Adafruit_LIS3DH5beginEh>
  Wire.end();
   d4210:	f004 fcf2 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d4214:	f004 f83a 	bl	d828c <_ZN7TwoWire3endEv>
  lis.begin(I2C_ADDRESS);
   d4218:	2119      	movs	r1, #25
   d421a:	4840      	ldr	r0, [pc, #256]	; (d431c <setup+0x148>)
   d421c:	f001 f941 	bl	d54a2 <_ZN15Adafruit_LIS3DH5beginEh>
  lis.setRange(LIS3DH_RANGE_2_G);
   d4220:	483e      	ldr	r0, [pc, #248]	; (d431c <setup+0x148>)
   d4222:	2100      	movs	r1, #0
   d4224:	f001 f914 	bl	d5450 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>
  lis.setDataRate(LIS3DH_DATARATE_400_HZ);
   d4228:	483c      	ldr	r0, [pc, #240]	; (d431c <setup+0x148>)
   d422a:	2107      	movs	r1, #7
   d422c:	f001 f928 	bl	d5480 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  pinMode(SDO_OUTPUT_PIN, OUTPUT);
   d4230:	2101      	movs	r1, #1
   d4232:	2008      	movs	r0, #8
   d4234:	f004 fc74 	bl	d8b20 <pinMode>
  digitalWrite(SDO_OUTPUT_PIN, HIGH);
   d4238:	2101      	movs	r1, #1
   d423a:	2008      	movs	r0, #8
   d423c:	f004 fc81 	bl	d8b42 <digitalWrite>
  request.hostname = "trek.thewcl.com";
   d4240:	4937      	ldr	r1, [pc, #220]	; (d4320 <setup+0x14c>)
   d4242:	4620      	mov	r0, r4
   d4244:	f002 f8dc 	bl	d6400 <_ZN6StringaSEPKc>
  request.port = 3000;
   d4248:	f640 33b8 	movw	r3, #3000	; 0xbb8
  request.path = "/";
   d424c:	4935      	ldr	r1, [pc, #212]	; (d4324 <setup+0x150>)
  request.port = 3000;
   d424e:	63a3      	str	r3, [r4, #56]	; 0x38
  request.path = "/";
   d4250:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4254:	f002 f8d4 	bl	d6400 <_ZN6StringaSEPKc>
  BLE.on();
   d4258:	f002 fdd8 	bl	d6e0c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d425c:	f002 fe24 	bl	d6ea8 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   d4260:	f002 fdd4 	bl	d6e0c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4264:	4a30      	ldr	r2, [pc, #192]	; (d4328 <setup+0x154>)
   d4266:	4601      	mov	r1, r0
   d4268:	a80d      	add	r0, sp, #52	; 0x34
   d426a:	f003 fac1 	bl	d77f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d426e:	a80d      	add	r0, sp, #52	; 0x34
   d4270:	f002 feb9 	bl	d6fe6 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   d4274:	f002 fdca 	bl	d6e0c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4278:	4a2c      	ldr	r2, [pc, #176]	; (d432c <setup+0x158>)
   d427a:	4601      	mov	r1, r0
   d427c:	a80d      	add	r0, sp, #52	; 0x34
   d427e:	f003 fab7 	bl	d77f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4282:	a80d      	add	r0, sp, #52	; 0x34
   d4284:	f002 feaf 	bl	d6fe6 <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   d4288:	a80d      	add	r0, sp, #52	; 0x34
   d428a:	f002 fc3e 	bl	d6b0a <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   d428e:	4928      	ldr	r1, [pc, #160]	; (d4330 <setup+0x15c>)
   d4290:	a803      	add	r0, sp, #12
   d4292:	f002 fb3d 	bl	d6910 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d4296:	a903      	add	r1, sp, #12
   d4298:	a808      	add	r0, sp, #32
   d429a:	f002 fb39 	bl	d6910 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d429e:	a808      	add	r0, sp, #32
   d42a0:	f002 fb7c 	bl	d699c <_ZNK8particle7BleUuid4typeEv>
   d42a4:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d42a6:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   d42a8:	bb54      	cbnz	r4, d4300 <setup+0x12c>
            uint16_t uuid16 = tempUUID.shorted();
   d42aa:	f002 fb96 	bl	d69da <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d42ae:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d42b0:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d42b4:	2302      	movs	r3, #2
   d42b6:	f10d 020a 	add.w	r2, sp, #10
   d42ba:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d42bc:	a80d      	add	r0, sp, #52	; 0x34
   d42be:	f002 fc19 	bl	d6af4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   d42c2:	f002 fda3 	bl	d6e0c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42c6:	a90d      	add	r1, sp, #52	; 0x34
   d42c8:	2200      	movs	r2, #0
   d42ca:	f002 fe0d 	bl	d6ee8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  BLE.onConnected(connectCallback);
   d42ce:	f002 fd9d 	bl	d6e0c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42d2:	4918      	ldr	r1, [pc, #96]	; (d4334 <setup+0x160>)
   d42d4:	2200      	movs	r2, #0
   d42d6:	f003 f981 	bl	d75dc <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
  BLE.onDisconnected(disconnectCallback);
   d42da:	f002 fd97 	bl	d6e0c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42de:	2200      	movs	r2, #0
   d42e0:	4915      	ldr	r1, [pc, #84]	; (d4338 <setup+0x164>)
   d42e2:	f003 f991 	bl	d7608 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
  pinMode(D7, OUTPUT);
   d42e6:	2101      	movs	r1, #1
   d42e8:	2007      	movs	r0, #7
   d42ea:	f004 fc19 	bl	d8b20 <pinMode>
  count = 0;
   d42ee:	4b13      	ldr	r3, [pc, #76]	; (d433c <setup+0x168>)
   d42f0:	2200      	movs	r2, #0
   d42f2:	601a      	str	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42f4:	f001 fa4e 	bl	d5794 <HAL_Timer_Get_Milli_Seconds>
  time1 = millis();
   d42f8:	4b11      	ldr	r3, [pc, #68]	; (d4340 <setup+0x16c>)
   d42fa:	6018      	str	r0, [r3, #0]
}
   d42fc:	b016      	add	sp, #88	; 0x58
   d42fe:	bd10      	pop	{r4, pc}
   d4300:	f002 fb70 	bl	d69e4 <_ZNK8particle7BleUuid8rawBytesEv>
   d4304:	2300      	movs	r3, #0
   d4306:	9300      	str	r3, [sp, #0]
   d4308:	4602      	mov	r2, r0
   d430a:	2310      	movs	r3, #16
   d430c:	2107      	movs	r1, #7
   d430e:	e7d5      	b.n	d42bc <setup+0xe8>
   d4310:	2003e620 	.word	0x2003e620
   d4314:	2003e0fc 	.word	0x2003e0fc
   d4318:	2003e588 	.word	0x2003e588
   d431c:	2003e53c 	.word	0x2003e53c
   d4320:	000d9b6d 	.word	0x000d9b6d
   d4324:	000d9b7d 	.word	0x000d9b7d
   d4328:	2003e608 	.word	0x2003e608
   d432c:	2003e5e8 	.word	0x2003e5e8
   d4330:	2003e0bc 	.word	0x2003e0bc
   d4334:	000d40e1 	.word	0x000d40e1
   d4338:	000d4109 	.word	0x000d4109
   d433c:	2003e114 	.word	0x2003e114
   d4340:	2003e600 	.word	0x2003e600

000d4344 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4344:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4346:	4616      	mov	r6, r2
   d4348:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d434a:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d434c:	e9c0 2200 	strd	r2, r2, [r0]
   d4350:	4604      	mov	r4, r0
   d4352:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4354:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d4356:	4619      	mov	r1, r3
   d4358:	a806      	add	r0, sp, #24
   d435a:	f002 fad9 	bl	d6910 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d435e:	9916      	ldr	r1, [sp, #88]	; 0x58
   d4360:	4638      	mov	r0, r7
   d4362:	f002 fad5 	bl	d6910 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d4366:	7833      	ldrb	r3, [r6, #0]
   d4368:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d436c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d436e:	9302      	str	r3, [sp, #8]
   d4370:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d4372:	4620      	mov	r0, r4
   d4374:	e9cd 7300 	strd	r7, r3, [sp]
   d4378:	aa05      	add	r2, sp, #20
   d437a:	ab06      	add	r3, sp, #24
   d437c:	4629      	mov	r1, r5
   d437e:	f003 f8c9 	bl	d7514 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d4382:	4620      	mov	r0, r4
   d4384:	b011      	add	sp, #68	; 0x44
   d4386:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4388 <_ZN5Print7printlnIiLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   d4388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d438a:	4605      	mov	r5, r0
   d438c:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d438e:	4616      	mov	r6, r2
   d4390:	b94a      	cbnz	r2, d43a6 <_ZN5Print7printlnIiLi0EEEjT_i+0x1e>
        return write(n);
   d4392:	6803      	ldr	r3, [r0, #0]
   d4394:	b2c9      	uxtb	r1, r1
   d4396:	689b      	ldr	r3, [r3, #8]
   d4398:	4798      	blx	r3
   d439a:	4607      	mov	r7, r0
        n += println();
   d439c:	4628      	mov	r0, r5
   d439e:	f003 fb78 	bl	d7a92 <_ZN5Print7printlnEv>
    }
   d43a2:	4438      	add	r0, r7
   d43a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d43a6:	2900      	cmp	r1, #0
   d43a8:	da0c      	bge.n	d43c4 <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
   d43aa:	2a0a      	cmp	r2, #10
   d43ac:	d10a      	bne.n	d43c4 <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
            t = print('-');
   d43ae:	212d      	movs	r1, #45	; 0x2d
   d43b0:	f003 fb66 	bl	d7a80 <_ZN5Print5printEc>
            val = -n;
   d43b4:	4261      	negs	r1, r4
            t = print('-');
   d43b6:	4607      	mov	r7, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d43b8:	b2f2      	uxtb	r2, r6
   d43ba:	4628      	mov	r0, r5
   d43bc:	f003 fb7f 	bl	d7abe <_ZN5Print11printNumberEmh>
   d43c0:	4407      	add	r7, r0
   d43c2:	e7eb      	b.n	d439c <_ZN5Print7printlnIiLi0EEEjT_i+0x14>
            val = n;
   d43c4:	4621      	mov	r1, r4
        size_t t = 0;
   d43c6:	2700      	movs	r7, #0
   d43c8:	e7f6      	b.n	d43b8 <_ZN5Print7printlnIiLi0EEEjT_i+0x30>
   d43ca:	0000      	movs	r0, r0
   d43cc:	0000      	movs	r0, r0
	...

000d43d0 <loop>:
void loop() { 
   d43d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d43d4:	ed2d 8b04 	vpush	{d8-d9}
   d43d8:	b091      	sub	sp, #68	; 0x44
   d43da:	f001 f9db 	bl	d5794 <HAL_Timer_Get_Milli_Seconds>
  time2 = millis(); 
   d43de:	4b50      	ldr	r3, [pc, #320]	; (d4520 <loop+0x150>)
   d43e0:	6018      	str	r0, [r3, #0]
  if(bleInput | ((time2 - CONFIG_WAIT_TIME >= time1) && WiFi.hasCredentials() && !(BLE.connected()))){
   d43e2:	4b50      	ldr	r3, [pc, #320]	; (d4524 <loop+0x154>)
   d43e4:	f5a0 40ea 	sub.w	r0, r0, #29952	; 0x7500
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	382f      	subs	r0, #47	; 0x2f
   d43ec:	4298      	cmp	r0, r3
   d43ee:	dc7e      	bgt.n	d44ee <loop+0x11e>
   d43f0:	4b4d      	ldr	r3, [pc, #308]	; (d4528 <loop+0x158>)
   d43f2:	781b      	ldrb	r3, [r3, #0]
   d43f4:	2b00      	cmp	r3, #0
   d43f6:	f000 8207 	beq.w	d4808 <loop+0x438>
    EEPROM.get(0, dsid);
   d43fa:	f004 fbcf 	bl	d8b9c <_Z21__fetch_global_EEPROMv>
   d43fe:	494b      	ldr	r1, [pc, #300]	; (d452c <loop+0x15c>)
   d4400:	2204      	movs	r2, #4
   d4402:	2000      	movs	r0, #0
   d4404:	f001 f9d6 	bl	d57b4 <HAL_EEPROM_Get>
    EEPROM.get(100, sleepDuration);
   d4408:	f004 fbc8 	bl	d8b9c <_Z21__fetch_global_EEPROMv>
   d440c:	4948      	ldr	r1, [pc, #288]	; (d4530 <loop+0x160>)
   d440e:	2204      	movs	r2, #4
   d4410:	2064      	movs	r0, #100	; 0x64
   d4412:	f001 f9cf 	bl	d57b4 <HAL_EEPROM_Get>
    EEPROM.get(200, wifiInterval);
   d4416:	f004 fbc1 	bl	d8b9c <_Z21__fetch_global_EEPROMv>
   d441a:	2204      	movs	r2, #4
   d441c:	4945      	ldr	r1, [pc, #276]	; (d4534 <loop+0x164>)
   d441e:	20c8      	movs	r0, #200	; 0xc8
   d4420:	f001 f9c8 	bl	d57b4 <HAL_EEPROM_Get>
        if (valid_) {
   d4424:	4b44      	ldr	r3, [pc, #272]	; (d4538 <loop+0x168>)
   d4426:	7d1a      	ldrb	r2, [r3, #20]
   d4428:	b10a      	cbz	r2, d442e <loop+0x5e>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d442a:	2202      	movs	r2, #2
   d442c:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration);
   d442e:	f8df 8100 	ldr.w	r8, [pc, #256]	; d4530 <loop+0x160>
    lis.read();
   d4432:	4c42      	ldr	r4, [pc, #264]	; (d453c <loop+0x16c>)
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration);
   d4434:	f8d8 1000 	ldr.w	r1, [r8]
   d4438:	483f      	ldr	r0, [pc, #252]	; (d4538 <loop+0x168>)
    isMoving = 0;
   d443a:	4d41      	ldr	r5, [pc, #260]	; (d4540 <loop+0x170>)
   d443c:	f8df b114 	ldr.w	fp, [pc, #276]	; d4554 <loop+0x184>
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration);
   d4440:	f7ff fe9e 	bl	d4180 <_ZN8particle24SystemSleepConfiguration8durationEm>
    lis.read();
   d4444:	4620      	mov	r0, r4
   d4446:	f001 f87d 	bl	d5544 <_ZN15Adafruit_LIS3DH4readEv>
    unixTime = Time.now();
   d444a:	f003 fc71 	bl	d7d30 <_ZN9TimeClass3nowEv>
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(char c) : String(c) {}
	StringSumHelper(unsigned char num) : String(num) {}
	StringSumHelper(int num) : String(num) {}
	StringSumHelper(unsigned int num) : String(num) {}
	StringSumHelper(long num) : String(num) {}
   d444e:	220a      	movs	r2, #10
   d4450:	4601      	mov	r1, r0
   d4452:	a80c      	add	r0, sp, #48	; 0x30
   d4454:	f001 fff9 	bl	d644a <_ZN6StringC1Elh>
   d4458:	a90c      	add	r1, sp, #48	; 0x30
   d445a:	483a      	ldr	r0, [pc, #232]	; (d4544 <loop+0x174>)
   d445c:	f001 ffc8 	bl	d63f0 <_ZN6StringaSEO15StringSumHelper>
class StringSumHelper : public String
   d4460:	a80c      	add	r0, sp, #48	; 0x30
   d4462:	f001 ff32 	bl	d62ca <_ZN6StringD1Ev>
    if(lis.x_g >= 0.8 && lis.x_g <= 1.2){
   d4466:	edd4 8a03 	vldr	s17, [r4, #12]
    isMoving = 0;
   d446a:	2300      	movs	r3, #0
   d446c:	602b      	str	r3, [r5, #0]
    if(lis.x_g >= 0.8 && lis.x_g <= 1.2){
   d446e:	ee18 0a90 	vmov	r0, s17
   d4472:	f004 fe6d 	bl	d9150 <__aeabi_f2d>
   d4476:	a326      	add	r3, pc, #152	; (adr r3, d4510 <loop+0x140>)
   d4478:	e9d3 2300 	ldrd	r2, r3, [r3]
   d447c:	4606      	mov	r6, r0
   d447e:	460f      	mov	r7, r1
   d4480:	f005 f944 	bl	d970c <__aeabi_dcmpge>
   d4484:	46a2      	mov	sl, r4
   d4486:	f8cd 8008 	str.w	r8, [sp, #8]
   d448a:	9503      	str	r5, [sp, #12]
   d448c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   d4490:	2800      	cmp	r0, #0
   d4492:	d061      	beq.n	d4558 <loop+0x188>
   d4494:	4b2c      	ldr	r3, [pc, #176]	; (d4548 <loop+0x178>)
   d4496:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d449a:	4630      	mov	r0, r6
   d449c:	4639      	mov	r1, r7
   d449e:	f005 f92b 	bl	d96f8 <__aeabi_dcmple>
   d44a2:	2800      	cmp	r0, #0
   d44a4:	d058      	beq.n	d4558 <loop+0x188>
      x = GRAVITY * (lis.x_g - 1);
   d44a6:	ee78 7ac8 	vsub.f32	s15, s17, s16
   d44aa:	6925      	ldr	r5, [r4, #16]
   d44ac:	6964      	ldr	r4, [r4, #20]
   d44ae:	ee17 0a90 	vmov	r0, s15
   d44b2:	f004 fe4d 	bl	d9150 <__aeabi_f2d>
   d44b6:	a318      	add	r3, pc, #96	; (adr r3, d4518 <loop+0x148>)
   d44b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44bc:	f004 fea0 	bl	d9200 <__aeabi_dmul>
   d44c0:	f005 f996 	bl	d97f0 <__aeabi_d2f>
   d44c4:	f8cb 0000 	str.w	r0, [fp]
      y = GRAVITY * lis.y_g;
   d44c8:	4628      	mov	r0, r5
   d44ca:	f004 fe41 	bl	d9150 <__aeabi_f2d>
   d44ce:	a312      	add	r3, pc, #72	; (adr r3, d4518 <loop+0x148>)
   d44d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44d4:	f004 fe94 	bl	d9200 <__aeabi_dmul>
   d44d8:	f005 f98a 	bl	d97f0 <__aeabi_d2f>
   d44dc:	4b1b      	ldr	r3, [pc, #108]	; (d454c <loop+0x17c>)
   d44de:	6018      	str	r0, [r3, #0]
      z = GRAVITY * lis.z_g;
   d44e0:	4620      	mov	r0, r4
      z = GRAVITY * (lis.z_g - 1);
   d44e2:	f004 fe35 	bl	d9150 <__aeabi_f2d>
   d44e6:	a30c      	add	r3, pc, #48	; (adr r3, d4518 <loop+0x148>)
   d44e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44ec:	e077      	b.n	d45de <loop+0x20e>
        WLanCredentials creds = credentials.getHalCredentials();
        network_set_credentials(*this, 0, &creds, NULL);
    }

    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
   d44ee:	4b18      	ldr	r3, [pc, #96]	; (d4550 <loop+0x180>)
   d44f0:	2200      	movs	r2, #0
   d44f2:	6858      	ldr	r0, [r3, #4]
   d44f4:	4611      	mov	r1, r2
   d44f6:	f001 fc27 	bl	d5d48 <network_has_credentials>
  if(bleInput | ((time2 - CONFIG_WAIT_TIME >= time1) && WiFi.hasCredentials() && !(BLE.connected()))){
   d44fa:	2800      	cmp	r0, #0
   d44fc:	f43f af78 	beq.w	d43f0 <loop+0x20>
   d4500:	f002 fc84 	bl	d6e0c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4504:	f002 fd03 	bl	d6f0e <_ZNK8particle14BleLocalDevice9connectedEv>
   d4508:	2800      	cmp	r0, #0
   d450a:	f47f af71 	bne.w	d43f0 <loop+0x20>
   d450e:	e774      	b.n	d43fa <loop+0x2a>
   d4510:	9999999a 	.word	0x9999999a
   d4514:	3fe99999 	.word	0x3fe99999
   d4518:	acd9e83e 	.word	0xacd9e83e
   d451c:	40239cfa 	.word	0x40239cfa
   d4520:	2003e604 	.word	0x2003e604
   d4524:	2003e600 	.word	0x2003e600
   d4528:	2003e0f8 	.word	0x2003e0f8
   d452c:	2003e118 	.word	0x2003e118
   d4530:	2003e03c 	.word	0x2003e03c
   d4534:	2003e040 	.word	0x2003e040
   d4538:	2003e0fc 	.word	0x2003e0fc
   d453c:	2003e53c 	.word	0x2003e53c
   d4540:	2003e538 	.word	0x2003e538
   d4544:	2003e610 	.word	0x2003e610
   d4548:	3ff33333 	.word	0x3ff33333
   d454c:	2003e628 	.word	0x2003e628
   d4550:	2003e7bc 	.word	0x2003e7bc
   d4554:	2003e624 	.word	0x2003e624
    } else if(lis.y_g >= 0.8 && lis.y_g <= 1.2){
   d4558:	ed9a 9a04 	vldr	s18, [sl, #16]
   d455c:	ee19 0a10 	vmov	r0, s18
   d4560:	f004 fdf6 	bl	d9150 <__aeabi_f2d>
   d4564:	edda 8a05 	vldr	s17, [sl, #20]
   d4568:	4604      	mov	r4, r0
   d456a:	ee18 0a90 	vmov	r0, s17
   d456e:	460d      	mov	r5, r1
   d4570:	f004 fdee 	bl	d9150 <__aeabi_f2d>
   d4574:	a3c0      	add	r3, pc, #768	; (adr r3, d4878 <loop+0x4a8>)
   d4576:	e9d3 2300 	ldrd	r2, r3, [r3]
   d457a:	4680      	mov	r8, r0
   d457c:	4689      	mov	r9, r1
   d457e:	4620      	mov	r0, r4
   d4580:	4629      	mov	r1, r5
   d4582:	f005 f8c3 	bl	d970c <__aeabi_dcmpge>
   d4586:	2800      	cmp	r0, #0
   d4588:	f000 8143 	beq.w	d4812 <loop+0x442>
   d458c:	4bbc      	ldr	r3, [pc, #752]	; (d4880 <loop+0x4b0>)
   d458e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d4592:	4620      	mov	r0, r4
   d4594:	4629      	mov	r1, r5
   d4596:	f005 f8af 	bl	d96f8 <__aeabi_dcmple>
   d459a:	2800      	cmp	r0, #0
   d459c:	f000 8139 	beq.w	d4812 <loop+0x442>
      x = GRAVITY * lis.x_g;
   d45a0:	a3b3      	add	r3, pc, #716	; (adr r3, d4870 <loop+0x4a0>)
   d45a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45a6:	4630      	mov	r0, r6
   d45a8:	4639      	mov	r1, r7
   d45aa:	f004 fe29 	bl	d9200 <__aeabi_dmul>
   d45ae:	f005 f91f 	bl	d97f0 <__aeabi_d2f>
      y = GRAVITY * (lis.y_g - 1);
   d45b2:	ee79 7a48 	vsub.f32	s15, s18, s16
      x = GRAVITY * lis.x_g;
   d45b6:	f8cb 0000 	str.w	r0, [fp]
      y = GRAVITY * (lis.y_g - 1);
   d45ba:	ee17 0a90 	vmov	r0, s15
   d45be:	f004 fdc7 	bl	d9150 <__aeabi_f2d>
   d45c2:	a3ab      	add	r3, pc, #684	; (adr r3, d4870 <loop+0x4a0>)
   d45c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45c8:	f004 fe1a 	bl	d9200 <__aeabi_dmul>
   d45cc:	f005 f910 	bl	d97f0 <__aeabi_d2f>
   d45d0:	4bac      	ldr	r3, [pc, #688]	; (d4884 <loop+0x4b4>)
   d45d2:	6018      	str	r0, [r3, #0]
      z = GRAVITY * lis.z_g;
   d45d4:	a3a6      	add	r3, pc, #664	; (adr r3, d4870 <loop+0x4a0>)
   d45d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45da:	4640      	mov	r0, r8
   d45dc:	4649      	mov	r1, r9
      z = GRAVITY * (lis.z_g - 1);
   d45de:	f004 fe0f 	bl	d9200 <__aeabi_dmul>
   d45e2:	f005 f905 	bl	d97f0 <__aeabi_d2f>
   d45e6:	4ba8      	ldr	r3, [pc, #672]	; (d4888 <loop+0x4b8>)
   d45e8:	6018      	str	r0, [r3, #0]
    Serial.println(lis.x_g);
   d45ea:	f003 fd63 	bl	d80b4 <_Z16_fetch_usbserialv>
   d45ee:	ed9a 0a03 	vldr	s0, [sl, #12]
   d45f2:	2102      	movs	r1, #2
   d45f4:	f003 fb55 	bl	d7ca2 <_ZN5Print7printlnEfi>
    Serial.println(lis.y_g);
   d45f8:	f003 fd5c 	bl	d80b4 <_Z16_fetch_usbserialv>
   d45fc:	ed9a 0a04 	vldr	s0, [sl, #16]
   d4600:	2102      	movs	r1, #2
   d4602:	f003 fb4e 	bl	d7ca2 <_ZN5Print7printlnEfi>
    Serial.println(lis.z_g);
   d4606:	f003 fd55 	bl	d80b4 <_Z16_fetch_usbserialv>
   d460a:	ed9a 0a05 	vldr	s0, [sl, #20]
   d460e:	2102      	movs	r1, #2
   d4610:	f003 fb47 	bl	d7ca2 <_ZN5Print7printlnEfi>
    if(abs(x) > 1 || abs(y) > 1 || abs(z) > 1){
   d4614:	4b9d      	ldr	r3, [pc, #628]	; (d488c <loop+0x4bc>)
   d4616:	edd3 7a00 	vldr	s15, [r3]
   d461a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d461e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4622:	bfd8      	it	le
   d4624:	eef1 7a67 	vnegle.f32	s15, s15
   d4628:	eef4 7ac8 	vcmpe.f32	s15, s16
   d462c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4630:	dc1d      	bgt.n	d466e <loop+0x29e>
   d4632:	4b94      	ldr	r3, [pc, #592]	; (d4884 <loop+0x4b4>)
   d4634:	edd3 7a00 	vldr	s15, [r3]
   d4638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d463c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4640:	bfd8      	it	le
   d4642:	eef1 7a67 	vnegle.f32	s15, s15
   d4646:	eef4 7ac8 	vcmpe.f32	s15, s16
   d464a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d464e:	dc0e      	bgt.n	d466e <loop+0x29e>
   d4650:	4b8d      	ldr	r3, [pc, #564]	; (d4888 <loop+0x4b8>)
   d4652:	edd3 7a00 	vldr	s15, [r3]
   d4656:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d465a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d465e:	bfd8      	it	le
   d4660:	eef1 7a67 	vnegle.f32	s15, s15
   d4664:	eef4 7ac8 	vcmpe.f32	s15, s16
   d4668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d466c:	dd02      	ble.n	d4674 <loop+0x2a4>
      isMoving = 1;
   d466e:	9a03      	ldr	r2, [sp, #12]
   d4670:	2301      	movs	r3, #1
   d4672:	6013      	str	r3, [r2, #0]
    payload +=  "{\"dsid\":" + String(dsid) + ", \"value\":" + String(isMoving) + ", \"timestamp\":" + unixTime + "},";
   d4674:	4d86      	ldr	r5, [pc, #536]	; (d4890 <loop+0x4c0>)
	StringSumHelper(const char *p) : String(p) {}
   d4676:	4987      	ldr	r1, [pc, #540]	; (d4894 <loop+0x4c4>)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4678:	4e87      	ldr	r6, [pc, #540]	; (d4898 <loop+0x4c8>)
	StringSumHelper(const char *p) : String(p) {}
   d467a:	a804      	add	r0, sp, #16
   d467c:	f001 fe70 	bl	d6360 <_ZN6StringC1EPKc>
   d4680:	220a      	movs	r2, #10
   d4682:	6829      	ldr	r1, [r5, #0]
   d4684:	a808      	add	r0, sp, #32
   d4686:	f001 fecd 	bl	d6424 <_ZN6StringC1Eih>
   d468a:	a908      	add	r1, sp, #32
   d468c:	a804      	add	r0, sp, #16
   d468e:	f001 ff0a 	bl	d64a6 <_ZplRK15StringSumHelperRK6String>
   d4692:	4982      	ldr	r1, [pc, #520]	; (d489c <loop+0x4cc>)
   d4694:	f001 ff13 	bl	d64be <_ZplRK15StringSumHelperPKc>
   d4698:	9b03      	ldr	r3, [sp, #12]
   d469a:	220a      	movs	r2, #10
   d469c:	6819      	ldr	r1, [r3, #0]
   d469e:	4604      	mov	r4, r0
   d46a0:	a80c      	add	r0, sp, #48	; 0x30
   d46a2:	f001 febf 	bl	d6424 <_ZN6StringC1Eih>
   d46a6:	a90c      	add	r1, sp, #48	; 0x30
   d46a8:	4620      	mov	r0, r4
   d46aa:	f001 fefc 	bl	d64a6 <_ZplRK15StringSumHelperRK6String>
   d46ae:	497c      	ldr	r1, [pc, #496]	; (d48a0 <loop+0x4d0>)
   d46b0:	f001 ff05 	bl	d64be <_ZplRK15StringSumHelperPKc>
   d46b4:	497b      	ldr	r1, [pc, #492]	; (d48a4 <loop+0x4d4>)
   d46b6:	f001 fef6 	bl	d64a6 <_ZplRK15StringSumHelperRK6String>
   d46ba:	497b      	ldr	r1, [pc, #492]	; (d48a8 <loop+0x4d8>)
   d46bc:	f001 feff 	bl	d64be <_ZplRK15StringSumHelperPKc>
   d46c0:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d46c2:	4630      	mov	r0, r6
   d46c4:	f001 feeb 	bl	d649e <_ZN6String6concatERKS_>
   d46c8:	a80c      	add	r0, sp, #48	; 0x30
   d46ca:	f001 fdfe 	bl	d62ca <_ZN6StringD1Ev>
   d46ce:	a808      	add	r0, sp, #32
   d46d0:	f001 fdfb 	bl	d62ca <_ZN6StringD1Ev>
class StringSumHelper : public String
   d46d4:	a804      	add	r0, sp, #16
   d46d6:	f001 fdf8 	bl	d62ca <_ZN6StringD1Ev>
    Serial.println(payload);
   d46da:	f003 fceb 	bl	d80b4 <_Z16_fetch_usbserialv>
   d46de:	6831      	ldr	r1, [r6, #0]
   d46e0:	f003 f9e3 	bl	d7aaa <_ZN5Print7printlnEPKc>
    Serial.println(dsid);
   d46e4:	f003 fce6 	bl	d80b4 <_Z16_fetch_usbserialv>
   d46e8:	6829      	ldr	r1, [r5, #0]
    Serial.println(wifiInterval);
   d46ea:	4d70      	ldr	r5, [pc, #448]	; (d48ac <loop+0x4dc>)
    Serial.println(dsid);
   d46ec:	220a      	movs	r2, #10
   d46ee:	f7ff fe4b 	bl	d4388 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println(sleepDuration);
   d46f2:	f003 fcdf 	bl	d80b4 <_Z16_fetch_usbserialv>
   d46f6:	9b02      	ldr	r3, [sp, #8]
   d46f8:	220a      	movs	r2, #10
   d46fa:	6819      	ldr	r1, [r3, #0]
   d46fc:	f7ff fe44 	bl	d4388 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println(wifiInterval);
   d4700:	f003 fcd8 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4704:	6829      	ldr	r1, [r5, #0]
   d4706:	220a      	movs	r2, #10
   d4708:	f7ff fe3e 	bl	d4388 <_ZN5Print7printlnIiLi0EEEjT_i>
    BLE.disconnect();
   d470c:	f002 fb7e 	bl	d6e0c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4710:	f002 fd48 	bl	d71a4 <_ZNK8particle14BleLocalDevice10disconnectEv>
    BLE.off();
   d4714:	f002 fb7a 	bl	d6e0c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4718:	f002 fcde 	bl	d70d8 <_ZNK8particle14BleLocalDevice3offEv>
    System.sleep(config);
   d471c:	a80c      	add	r0, sp, #48	; 0x30
   d471e:	4964      	ldr	r1, [pc, #400]	; (d48b0 <loop+0x4e0>)
   d4720:	f001 fcac 	bl	d607c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d4724:	980c      	ldr	r0, [sp, #48]	; 0x30
   d4726:	46a8      	mov	r8, r5
   d4728:	b108      	cbz	r0, d472e <loop+0x35e>
            free(wakeupSource_);
   d472a:	f001 fb75 	bl	d5e18 <free>
    if(wifiTimeLeft <= 0){
   d472e:	4c61      	ldr	r4, [pc, #388]	; (d48b4 <loop+0x4e4>)
   d4730:	6823      	ldr	r3, [r4, #0]
   d4732:	2b00      	cmp	r3, #0
   d4734:	dc63      	bgt.n	d47fe <loop+0x42e>
        network_on(*this, 0, 0, NULL);
   d4736:	4f60      	ldr	r7, [pc, #384]	; (d48b8 <loop+0x4e8>)
   d4738:	2300      	movs	r3, #0
   d473a:	461a      	mov	r2, r3
   d473c:	4619      	mov	r1, r3
   d473e:	6878      	ldr	r0, [r7, #4]
   d4740:	f001 fae2 	bl	d5d08 <network_on>
        network_connect(*this, flags, 0, NULL);
   d4744:	2300      	movs	r3, #0
   d4746:	6878      	ldr	r0, [r7, #4]
   d4748:	461a      	mov	r2, r3
   d474a:	4619      	mov	r1, r3
   d474c:	f001 fabc 	bl	d5cc8 <network_connect>
        return network_ready(*this, 0, NULL);
   d4750:	2200      	movs	r2, #0
   d4752:	6878      	ldr	r0, [r7, #4]
   d4754:	4611      	mov	r1, r2
   d4756:	f001 facf 	bl	d5cf8 <network_ready>
      while(!WiFi.ready()){}
   d475a:	2800      	cmp	r0, #0
   d475c:	d0f8      	beq.n	d4750 <loop+0x380>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d475e:	f001 fb2b 	bl	d5db8 <spark_cloud_flag_connect>
      payload.remove(payload.length() - 1);
   d4762:	68b1      	ldr	r1, [r6, #8]
   d4764:	484c      	ldr	r0, [pc, #304]	; (d4898 <loop+0x4c8>)
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
    }

    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
   d4766:	4e55      	ldr	r6, [pc, #340]	; (d48bc <loop+0x4ec>)
   d4768:	3901      	subs	r1, #1
   d476a:	f001 ff22 	bl	d65b2 <_ZN6String6removeEj>
	StringSumHelper(const char *p) : String(p) {}
   d476e:	4954      	ldr	r1, [pc, #336]	; (d48c0 <loop+0x4f0>)
   d4770:	a80c      	add	r0, sp, #48	; 0x30
   d4772:	f001 fdf5 	bl	d6360 <_ZN6StringC1EPKc>
      request.body = "{\"data\":[" + payload + "]}";
   d4776:	4948      	ldr	r1, [pc, #288]	; (d4898 <loop+0x4c8>)
   d4778:	a80c      	add	r0, sp, #48	; 0x30
   d477a:	f001 fe94 	bl	d64a6 <_ZplRK15StringSumHelperRK6String>
   d477e:	4951      	ldr	r1, [pc, #324]	; (d48c4 <loop+0x4f4>)
   d4780:	f001 fe9d 	bl	d64be <_ZplRK15StringSumHelperPKc>
   d4784:	4601      	mov	r1, r0
   d4786:	4850      	ldr	r0, [pc, #320]	; (d48c8 <loop+0x4f8>)
   d4788:	f001 fe1b 	bl	d63c2 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d478c:	a80c      	add	r0, sp, #48	; 0x30
   d478e:	f001 fd9c 	bl	d62ca <_ZN6StringD1Ev>
   d4792:	4b4e      	ldr	r3, [pc, #312]	; (d48cc <loop+0x4fc>)
   d4794:	494e      	ldr	r1, [pc, #312]	; (d48d0 <loop+0x500>)
   d4796:	484f      	ldr	r0, [pc, #316]	; (d48d4 <loop+0x504>)
   d4798:	9300      	str	r3, [sp, #0]
   d479a:	4632      	mov	r2, r6
   d479c:	4b4e      	ldr	r3, [pc, #312]	; (d48d8 <loop+0x508>)
   d479e:	f000 fb51 	bl	d4e44 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("Status: " + response.status);
   d47a2:	f003 fc87 	bl	d80b4 <_Z16_fetch_usbserialv>
   d47a6:	6833      	ldr	r3, [r6, #0]
   d47a8:	494c      	ldr	r1, [pc, #304]	; (d48dc <loop+0x50c>)
   d47aa:	4419      	add	r1, r3
   d47ac:	f003 f97d 	bl	d7aaa <_ZN5Print7printlnEPKc>
      Serial.println("Body: " + response.body);
   d47b0:	f003 fc80 	bl	d80b4 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d47b4:	494a      	ldr	r1, [pc, #296]	; (d48e0 <loop+0x510>)
   d47b6:	4605      	mov	r5, r0
   d47b8:	a80c      	add	r0, sp, #48	; 0x30
   d47ba:	f001 fdd1 	bl	d6360 <_ZN6StringC1EPKc>
   d47be:	1d31      	adds	r1, r6, #4
   d47c0:	a80c      	add	r0, sp, #48	; 0x30
   d47c2:	f001 fe70 	bl	d64a6 <_ZplRK15StringSumHelperRK6String>
   d47c6:	6801      	ldr	r1, [r0, #0]
   d47c8:	4628      	mov	r0, r5
   d47ca:	f003 f96e 	bl	d7aaa <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   d47ce:	a80c      	add	r0, sp, #48	; 0x30
   d47d0:	f001 fd7b 	bl	d62ca <_ZN6StringD1Ev>
      payload = "";
   d47d4:	4943      	ldr	r1, [pc, #268]	; (d48e4 <loop+0x514>)
   d47d6:	4830      	ldr	r0, [pc, #192]	; (d4898 <loop+0x4c8>)
   d47d8:	f001 fe12 	bl	d6400 <_ZN6StringaSEPKc>
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
   d47dc:	2500      	movs	r5, #0
      wifiTimeLeft = wifiInterval;
   d47de:	f8d8 3000 	ldr.w	r3, [r8]
   d47e2:	6023      	str	r3, [r4, #0]
      Particle.disconnect();
   d47e4:	a80c      	add	r0, sp, #48	; 0x30
   d47e6:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
   d47ea:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
   d47ee:	f003 fb63 	bl	d7eb8 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        network_off(*this, 0, 0, NULL);
   d47f2:	6878      	ldr	r0, [r7, #4]
   d47f4:	462b      	mov	r3, r5
   d47f6:	462a      	mov	r2, r5
   d47f8:	4629      	mov	r1, r5
   d47fa:	f001 fa8d 	bl	d5d18 <network_off>
    wifiTimeLeft -= sleepDuration;
   d47fe:	9a02      	ldr	r2, [sp, #8]
   d4800:	6823      	ldr	r3, [r4, #0]
   d4802:	6812      	ldr	r2, [r2, #0]
   d4804:	1a9b      	subs	r3, r3, r2
   d4806:	6023      	str	r3, [r4, #0]
}
   d4808:	b011      	add	sp, #68	; 0x44
   d480a:	ecbd 8b04 	vpop	{d8-d9}
   d480e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }else if(lis.z_g >= 0.8 && lis.z_g <= 1.2){
   d4812:	a319      	add	r3, pc, #100	; (adr r3, d4878 <loop+0x4a8>)
   d4814:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4818:	4640      	mov	r0, r8
   d481a:	4649      	mov	r1, r9
   d481c:	f004 ff76 	bl	d970c <__aeabi_dcmpge>
   d4820:	2800      	cmp	r0, #0
   d4822:	f43f aee2 	beq.w	d45ea <loop+0x21a>
   d4826:	4b16      	ldr	r3, [pc, #88]	; (d4880 <loop+0x4b0>)
   d4828:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d482c:	4640      	mov	r0, r8
   d482e:	4649      	mov	r1, r9
   d4830:	f004 ff62 	bl	d96f8 <__aeabi_dcmple>
   d4834:	2800      	cmp	r0, #0
   d4836:	f43f aed8 	beq.w	d45ea <loop+0x21a>
      x = GRAVITY * lis.x_g;
   d483a:	a30d      	add	r3, pc, #52	; (adr r3, d4870 <loop+0x4a0>)
   d483c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4840:	4630      	mov	r0, r6
   d4842:	4639      	mov	r1, r7
   d4844:	f004 fcdc 	bl	d9200 <__aeabi_dmul>
   d4848:	f004 ffd2 	bl	d97f0 <__aeabi_d2f>
      y = GRAVITY * lis.y_g;
   d484c:	a308      	add	r3, pc, #32	; (adr r3, d4870 <loop+0x4a0>)
   d484e:	e9d3 2300 	ldrd	r2, r3, [r3]
      x = GRAVITY * lis.x_g;
   d4852:	f8cb 0000 	str.w	r0, [fp]
      y = GRAVITY * lis.y_g;
   d4856:	4629      	mov	r1, r5
   d4858:	4620      	mov	r0, r4
   d485a:	f004 fcd1 	bl	d9200 <__aeabi_dmul>
   d485e:	f004 ffc7 	bl	d97f0 <__aeabi_d2f>
   d4862:	4b08      	ldr	r3, [pc, #32]	; (d4884 <loop+0x4b4>)
      z = GRAVITY * (lis.z_g - 1);
   d4864:	ee78 7ac8 	vsub.f32	s15, s17, s16
      y = GRAVITY * lis.y_g;
   d4868:	6018      	str	r0, [r3, #0]
      z = GRAVITY * (lis.z_g - 1);
   d486a:	ee17 0a90 	vmov	r0, s15
   d486e:	e638      	b.n	d44e2 <loop+0x112>
   d4870:	acd9e83e 	.word	0xacd9e83e
   d4874:	40239cfa 	.word	0x40239cfa
   d4878:	9999999a 	.word	0x9999999a
   d487c:	3fe99999 	.word	0x3fe99999
   d4880:	3ff33333 	.word	0x3ff33333
   d4884:	2003e628 	.word	0x2003e628
   d4888:	2003e62c 	.word	0x2003e62c
   d488c:	2003e624 	.word	0x2003e624
   d4890:	2003e118 	.word	0x2003e118
   d4894:	000d9b7f 	.word	0x000d9b7f
   d4898:	2003e578 	.word	0x2003e578
   d489c:	000d9b88 	.word	0x000d9b88
   d48a0:	000d9b93 	.word	0x000d9b93
   d48a4:	2003e610 	.word	0x2003e610
   d48a8:	000d9ba2 	.word	0x000d9ba2
   d48ac:	2003e040 	.word	0x2003e040
   d48b0:	2003e0fc 	.word	0x2003e0fc
   d48b4:	2003e620 	.word	0x2003e620
   d48b8:	2003e7bc 	.word	0x2003e7bc
   d48bc:	2003e5d4 	.word	0x2003e5d4
   d48c0:	000d9ba5 	.word	0x000d9ba5
   d48c4:	000d9baf 	.word	0x000d9baf
   d48c8:	2003e5c4 	.word	0x2003e5c4
   d48cc:	000d9bb2 	.word	0x000d9bb2
   d48d0:	2003e588 	.word	0x2003e588
   d48d4:	2003e11c 	.word	0x2003e11c
   d48d8:	2003e01c 	.word	0x2003e01c
   d48dc:	000d9bb7 	.word	0x000d9bb7
   d48e0:	000d9bc0 	.word	0x000d9bc0
   d48e4:	000d9f4f 	.word	0x000d9f4f

000d48e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d48e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(count == 0){
   d48ec:	4e85      	ldr	r6, [pc, #532]	; (d4b04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x21c>)
   d48ee:	6834      	ldr	r4, [r6, #0]
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d48f0:	b096      	sub	sp, #88	; 0x58
   d48f2:	4601      	mov	r1, r0
  if(count == 0){
   d48f4:	b954      	cbnz	r4, d490c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x24>
    txCharacteristic.setValue("Enter network SSID (0 to skip): ");
   d48f6:	4984      	ldr	r1, [pc, #528]	; (d4b08 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x220>)
   d48f8:	4622      	mov	r2, r4
      txCharacteristic.setValue("Enter network password: ");
   d48fa:	4884      	ldr	r0, [pc, #528]	; (d4b0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x224>)
   d48fc:	f002 f9cc 	bl	d6c98 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
  count++;
   d4900:	6833      	ldr	r3, [r6, #0]
   d4902:	3301      	adds	r3, #1
   d4904:	6033      	str	r3, [r6, #0]
}
   d4906:	b016      	add	sp, #88	; 0x58
   d4908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }else if(count == 1){
   d490c:	2c01      	cmp	r4, #1
   d490e:	d12d      	bne.n	d496c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>
    ssid = (char*)data;
   d4910:	4c7f      	ldr	r4, [pc, #508]	; (d4b10 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x228>)
   d4912:	4620      	mov	r0, r4
   d4914:	f001 fd74 	bl	d6400 <_ZN6StringaSEPKc>
    ssid = ssid.substring(0, ssid.length()-1);
   d4918:	68a3      	ldr	r3, [r4, #8]
   d491a:	2200      	movs	r2, #0
   d491c:	3b01      	subs	r3, #1
   d491e:	4621      	mov	r1, r4
   d4920:	a803      	add	r0, sp, #12
   d4922:	f001 fe05 	bl	d6530 <_ZNK6String9substringEjj>
   d4926:	a903      	add	r1, sp, #12
   d4928:	4620      	mov	r0, r4
   d492a:	f001 fd59 	bl	d63e0 <_ZN6StringaSEOS_>
   d492e:	a803      	add	r0, sp, #12
   d4930:	f001 fccb 	bl	d62ca <_ZN6StringD1Ev>
    Serial.println(ssid);
   d4934:	f003 fbbe 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4938:	6821      	ldr	r1, [r4, #0]
   d493a:	f003 f8b6 	bl	d7aaa <_ZN5Print7printlnEPKc>
    Serial.println(ssid.length());
   d493e:	f003 fbb9 	bl	d80b4 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4942:	220a      	movs	r2, #10
   d4944:	68a1      	ldr	r1, [r4, #8]
   d4946:	4605      	mov	r5, r0
   d4948:	f003 f8b9 	bl	d7abe <_ZN5Print11printNumberEmh>
        n += println();
   d494c:	4628      	mov	r0, r5
   d494e:	f003 f8a0 	bl	d7a92 <_ZN5Print7printlnEv>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4952:	4970      	ldr	r1, [pc, #448]	; (d4b14 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x22c>)
   d4954:	4620      	mov	r0, r4
   d4956:	f001 fdc7 	bl	d64e8 <_ZNK6String6equalsEPKc>
    if(ssid == "0"){
   d495a:	4602      	mov	r2, r0
   d495c:	b120      	cbz	r0, d4968 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>
      count = 2;
   d495e:	2302      	movs	r3, #2
   d4960:	6033      	str	r3, [r6, #0]
    txCharacteristic.setValue("Enter device DSID (0 to skip): ");
   d4962:	496d      	ldr	r1, [pc, #436]	; (d4b18 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x230>)
   d4964:	2200      	movs	r2, #0
   d4966:	e7c8      	b.n	d48fa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12>
      txCharacteristic.setValue("Enter network password: ");
   d4968:	496c      	ldr	r1, [pc, #432]	; (d4b1c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x234>)
   d496a:	e7c6      	b.n	d48fa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12>
  }else if(count == 2){
   d496c:	2c02      	cmp	r4, #2
   d496e:	d154      	bne.n	d4a1a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x132>
    password = (char *)data;
   d4970:	4c6b      	ldr	r4, [pc, #428]	; (d4b20 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x238>)
   d4972:	4620      	mov	r0, r4
   d4974:	f001 fd44 	bl	d6400 <_ZN6StringaSEPKc>
    password = password.substring(0, password.length()-1);
   d4978:	68a3      	ldr	r3, [r4, #8]
   d497a:	2200      	movs	r2, #0
   d497c:	3b01      	subs	r3, #1
   d497e:	4621      	mov	r1, r4
   d4980:	a803      	add	r0, sp, #12
   d4982:	f001 fdd5 	bl	d6530 <_ZNK6String9substringEjj>
   d4986:	a903      	add	r1, sp, #12
   d4988:	4620      	mov	r0, r4
   d498a:	f001 fd29 	bl	d63e0 <_ZN6StringaSEOS_>
   d498e:	a803      	add	r0, sp, #12
   d4990:	f001 fc9b 	bl	d62ca <_ZN6StringD1Ev>
        operator const char*() const { return c_str(); }
   d4994:	4b5e      	ldr	r3, [pc, #376]	; (d4b10 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x228>)
   d4996:	6825      	ldr	r5, [r4, #0]
   d4998:	f8d3 8000 	ldr.w	r8, [r3]
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d499c:	f1b8 0f00 	cmp.w	r8, #0
   d49a0:	d037      	beq.n	d4a12 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12a>
   d49a2:	4640      	mov	r0, r8
   d49a4:	f005 f80e 	bl	d99c4 <strlen>
   d49a8:	4607      	mov	r7, r0
   d49aa:	2d00      	cmp	r5, #0
   d49ac:	d033      	beq.n	d4a16 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12e>
   d49ae:	4628      	mov	r0, r5
   d49b0:	f005 f808 	bl	d99c4 <strlen>
   d49b4:	4604      	mov	r4, r0
        memset(&creds, 0, sizeof(creds));
   d49b6:	2238      	movs	r2, #56	; 0x38
   d49b8:	2100      	movs	r1, #0
   d49ba:	a808      	add	r0, sp, #32
   d49bc:	f004 ffc4 	bl	d9948 <memset>
        creds.size = sizeof(creds);
   d49c0:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   d49c2:	e9cd 3803 	strd	r3, r8, [sp, #12]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d49c6:	4857      	ldr	r0, [pc, #348]	; (d4b24 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x23c>)
        creds.password_len = passwordLen;
   d49c8:	9407      	str	r4, [sp, #28]
        creds.security = WLanSecurityType(security);
   d49ca:	2303      	movs	r3, #3
   d49cc:	f8ad 3020 	strh.w	r3, [sp, #32]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d49d0:	2300      	movs	r3, #0
   d49d2:	4619      	mov	r1, r3
   d49d4:	aa03      	add	r2, sp, #12
   d49d6:	6840      	ldr	r0, [r0, #4]
        creds.password = password;
   d49d8:	e9cd 7505 	strd	r7, r5, [sp, #20]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d49dc:	f001 f9bc 	bl	d5d58 <network_set_credentials>
    Serial.println("Credentials set with ssid: " + ssid + "\n\tpassword: " + password);
   d49e0:	f003 fb68 	bl	d80b4 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d49e4:	4950      	ldr	r1, [pc, #320]	; (d4b28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x240>)
   d49e6:	4604      	mov	r4, r0
   d49e8:	a803      	add	r0, sp, #12
   d49ea:	f001 fcb9 	bl	d6360 <_ZN6StringC1EPKc>
   d49ee:	4948      	ldr	r1, [pc, #288]	; (d4b10 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x228>)
   d49f0:	a803      	add	r0, sp, #12
   d49f2:	f001 fd58 	bl	d64a6 <_ZplRK15StringSumHelperRK6String>
   d49f6:	494d      	ldr	r1, [pc, #308]	; (d4b2c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x244>)
   d49f8:	f001 fd61 	bl	d64be <_ZplRK15StringSumHelperPKc>
   d49fc:	4948      	ldr	r1, [pc, #288]	; (d4b20 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x238>)
   d49fe:	f001 fd52 	bl	d64a6 <_ZplRK15StringSumHelperRK6String>
   d4a02:	6801      	ldr	r1, [r0, #0]
   d4a04:	4620      	mov	r0, r4
   d4a06:	f003 f850 	bl	d7aaa <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   d4a0a:	a803      	add	r0, sp, #12
   d4a0c:	f001 fc5d 	bl	d62ca <_ZN6StringD1Ev>
   d4a10:	e7a7      	b.n	d4962 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7a>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d4a12:	4647      	mov	r7, r8
   d4a14:	e7c9      	b.n	d49aa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc2>
   d4a16:	462c      	mov	r4, r5
   d4a18:	e7cd      	b.n	d49b6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xce>
  }else if(count == 3){
   d4a1a:	2c03      	cmp	r4, #3
   d4a1c:	d126      	bne.n	d4a6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x184>
   d4a1e:	9001      	str	r0, [sp, #4]
    if(atoi((char *)data) != 0){
   d4a20:	f004 ff36 	bl	d9890 <atoi>
   d4a24:	b180      	cbz	r0, d4a48 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x160>
      EEPROM.put(0, atoi((char *)data));
   d4a26:	f004 f8b9 	bl	d8b9c <_Z21__fetch_global_EEPROMv>
   d4a2a:	9901      	ldr	r1, [sp, #4]
   d4a2c:	4608      	mov	r0, r1
   d4a2e:	f004 ff2f 	bl	d9890 <atoi>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4a32:	a903      	add	r1, sp, #12
   d4a34:	9003      	str	r0, [sp, #12]
   d4a36:	2204      	movs	r2, #4
   d4a38:	2000      	movs	r0, #0
   d4a3a:	f000 fec3 	bl	d57c4 <HAL_EEPROM_Put>
      Serial.println("dsid entered");
   d4a3e:	f003 fb39 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4a42:	493b      	ldr	r1, [pc, #236]	; (d4b30 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x248>)
   d4a44:	f003 f831 	bl	d7aaa <_ZN5Print7printlnEPKc>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4a48:	4c3a      	ldr	r4, [pc, #232]	; (d4b34 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x24c>)
    EEPROM.get(0, dsid);
   d4a4a:	f004 f8a7 	bl	d8b9c <_Z21__fetch_global_EEPROMv>
   d4a4e:	2204      	movs	r2, #4
   d4a50:	4621      	mov	r1, r4
   d4a52:	2000      	movs	r0, #0
   d4a54:	f000 feae 	bl	d57b4 <HAL_EEPROM_Get>
    Serial.println("dsid: " + dsid);
   d4a58:	f003 fb2c 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4a5c:	6823      	ldr	r3, [r4, #0]
   d4a5e:	4936      	ldr	r1, [pc, #216]	; (d4b38 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x250>)
   d4a60:	4419      	add	r1, r3
   d4a62:	f003 f822 	bl	d7aaa <_ZN5Print7printlnEPKc>
    txCharacteristic.setValue("Enter time between data collection (ms): ");
   d4a66:	4935      	ldr	r1, [pc, #212]	; (d4b3c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x254>)
   d4a68:	2200      	movs	r2, #0
   d4a6a:	e746      	b.n	d48fa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12>
  }else if(count == 4){
   d4a6c:	2c04      	cmp	r4, #4
   d4a6e:	d123      	bne.n	d4ab8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1d0>
    sleepDuration = atoi((char *)data);
   d4a70:	f004 ff0e 	bl	d9890 <atoi>
   d4a74:	4d32      	ldr	r5, [pc, #200]	; (d4b40 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x258>)
   d4a76:	6028      	str	r0, [r5, #0]
    EEPROM.put(100, sleepDuration);
   d4a78:	f004 f890 	bl	d8b9c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4a7c:	4622      	mov	r2, r4
   d4a7e:	4629      	mov	r1, r5
   d4a80:	2064      	movs	r0, #100	; 0x64
   d4a82:	f000 fe9f 	bl	d57c4 <HAL_EEPROM_Put>
    EEPROM.get(100, sleepDuration);
   d4a86:	f004 f889 	bl	d8b9c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4a8a:	4622      	mov	r2, r4
   d4a8c:	4629      	mov	r1, r5
   d4a8e:	2064      	movs	r0, #100	; 0x64
   d4a90:	f000 fe90 	bl	d57b4 <HAL_EEPROM_Get>
        if (valid_) {
   d4a94:	4b2b      	ldr	r3, [pc, #172]	; (d4b44 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x25c>)
   d4a96:	7d1a      	ldrb	r2, [r3, #20]
   d4a98:	b10a      	cbz	r2, d4a9e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b6>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4a9a:	2202      	movs	r2, #2
   d4a9c:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration);
   d4a9e:	6829      	ldr	r1, [r5, #0]
   d4aa0:	4828      	ldr	r0, [pc, #160]	; (d4b44 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x25c>)
   d4aa2:	f7ff fb6d 	bl	d4180 <_ZN8particle24SystemSleepConfiguration8durationEm>
    Serial.println(sleepDuration);
   d4aa6:	f003 fb05 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4aaa:	6829      	ldr	r1, [r5, #0]
   d4aac:	220a      	movs	r2, #10
   d4aae:	f7ff fc6b 	bl	d4388 <_ZN5Print7printlnIiLi0EEEjT_i>
    txCharacteristic.setValue("Enter time between WiFi connection (ms): ");
   d4ab2:	4925      	ldr	r1, [pc, #148]	; (d4b48 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x260>)
   d4ab4:	2200      	movs	r2, #0
   d4ab6:	e720      	b.n	d48fa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12>
  }else if(count == 5){
   d4ab8:	2c05      	cmp	r4, #5
   d4aba:	f47f af21 	bne.w	d4900 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18>
    wifiInterval = atoi((char *)data);
   d4abe:	f004 fee7 	bl	d9890 <atoi>
   d4ac2:	4c22      	ldr	r4, [pc, #136]	; (d4b4c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x264>)
   d4ac4:	6020      	str	r0, [r4, #0]
    EEPROM.put(200, wifiInterval);
   d4ac6:	f004 f869 	bl	d8b9c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4aca:	4621      	mov	r1, r4
   d4acc:	2204      	movs	r2, #4
   d4ace:	20c8      	movs	r0, #200	; 0xc8
   d4ad0:	f000 fe78 	bl	d57c4 <HAL_EEPROM_Put>
    EEPROM.get(200, wifiInterval);
   d4ad4:	f004 f862 	bl	d8b9c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4ad8:	4621      	mov	r1, r4
   d4ada:	2204      	movs	r2, #4
   d4adc:	20c8      	movs	r0, #200	; 0xc8
   d4ade:	f000 fe69 	bl	d57b4 <HAL_EEPROM_Get>
    wifiTimeLeft = wifiInterval;
   d4ae2:	4b1b      	ldr	r3, [pc, #108]	; (d4b50 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x268>)
   d4ae4:	6822      	ldr	r2, [r4, #0]
   d4ae6:	601a      	str	r2, [r3, #0]
    Serial.println(wifiInterval);
   d4ae8:	f003 fae4 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4aec:	6821      	ldr	r1, [r4, #0]
   d4aee:	220a      	movs	r2, #10
   d4af0:	f7ff fc4a 	bl	d4388 <_ZN5Print7printlnIiLi0EEEjT_i>
    bleInput = true;
   d4af4:	4b17      	ldr	r3, [pc, #92]	; (d4b54 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26c>)
   d4af6:	2201      	movs	r2, #1
    digitalWrite(D7, LOW);
   d4af8:	2100      	movs	r1, #0
   d4afa:	2007      	movs	r0, #7
    bleInput = true;
   d4afc:	701a      	strb	r2, [r3, #0]
    digitalWrite(D7, LOW);
   d4afe:	f004 f820 	bl	d8b42 <digitalWrite>
   d4b02:	e6fd      	b.n	d4900 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18>
   d4b04:	2003e114 	.word	0x2003e114
   d4b08:	000d9bc7 	.word	0x000d9bc7
   d4b0c:	2003e608 	.word	0x2003e608
   d4b10:	2003e5f0 	.word	0x2003e5f0
   d4b14:	000d9be8 	.word	0x000d9be8
   d4b18:	000d9bea 	.word	0x000d9bea
   d4b1c:	000d9c0a 	.word	0x000d9c0a
   d4b20:	2003e568 	.word	0x2003e568
   d4b24:	2003e7bc 	.word	0x2003e7bc
   d4b28:	000d9c23 	.word	0x000d9c23
   d4b2c:	000d9c3f 	.word	0x000d9c3f
   d4b30:	000d9c4c 	.word	0x000d9c4c
   d4b34:	2003e118 	.word	0x2003e118
   d4b38:	000d9c59 	.word	0x000d9c59
   d4b3c:	000d9c60 	.word	0x000d9c60
   d4b40:	2003e03c 	.word	0x2003e03c
   d4b44:	2003e0fc 	.word	0x2003e0fc
   d4b48:	000d9c8a 	.word	0x000d9c8a
   d4b4c:	2003e040 	.word	0x2003e040
   d4b50:	2003e620 	.word	0x2003e620
   d4b54:	2003e0f8 	.word	0x2003e0f8

000d4b58 <_ZN15Adafruit_LIS3DHD0Ev>:
   d4b58:	b510      	push	{r4, lr}
   d4b5a:	212c      	movs	r1, #44	; 0x2c
   d4b5c:	4604      	mov	r4, r0
   d4b5e:	f004 f878 	bl	d8c52 <_ZdlPvj>
   d4b62:	4620      	mov	r0, r4
   d4b64:	bd10      	pop	{r4, pc}
	...

000d4b68 <_GLOBAL__sub_I_SystemMode>:
   d4b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
              error_(SYSTEM_ERROR_NONE) {
   d4b6c:	4e68      	ldr	r6, [pc, #416]	; (d4d10 <_GLOBAL__sub_I_SystemMode+0x1a8>)
    SleepResult() {}
   d4b6e:	4b69      	ldr	r3, [pc, #420]	; (d4d14 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   d4b70:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4b72:	2500      	movs	r5, #0
   d4b74:	b091      	sub	sp, #68	; 0x44
SYSTEM_MODE(MANUAL)
   d4b76:	4c68      	ldr	r4, [pc, #416]	; (d4d18 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4b78:	6035      	str	r5, [r6, #0]
   d4b7a:	80b5      	strh	r5, [r6, #4]
    SleepResult() {}
   d4b7c:	71b5      	strb	r5, [r6, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4b7e:	2003      	movs	r0, #3
   d4b80:	f001 f86c 	bl	d5c5c <set_system_mode>
String payload = "";
   d4b84:	f8df 81f4 	ldr.w	r8, [pc, #500]	; d4d7c <_GLOBAL__sub_I_SystemMode+0x214>
SYSTEM_MODE(MANUAL)
   d4b88:	4964      	ldr	r1, [pc, #400]	; (d4d1c <_GLOBAL__sub_I_SystemMode+0x1b4>)
String payload = "";
   d4b8a:	4f65      	ldr	r7, [pc, #404]	; (d4d20 <_GLOBAL__sub_I_SystemMode+0x1b8>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d4b8c:	f8df 91f0 	ldr.w	r9, [pc, #496]	; d4d80 <_GLOBAL__sub_I_SystemMode+0x218>
SYSTEM_MODE(MANUAL)
   d4b90:	4630      	mov	r0, r6
String payload = "";
   d4b92:	4e64      	ldr	r6, [pc, #400]	; (d4d24 <_GLOBAL__sub_I_SystemMode+0x1bc>)
SYSTEM_MODE(MANUAL)
   d4b94:	4622      	mov	r2, r4
   d4b96:	f004 f857 	bl	d8c48 <__aeabi_atexit>
String payload = "";
   d4b9a:	4631      	mov	r1, r6
   d4b9c:	4640      	mov	r0, r8
   d4b9e:	f001 fbdf 	bl	d6360 <_ZN6StringC1EPKc>
   d4ba2:	4640      	mov	r0, r8
String unixTime;
   d4ba4:	f8df 81dc 	ldr.w	r8, [pc, #476]	; d4d84 <_GLOBAL__sub_I_SystemMode+0x21c>
String payload = "";
   d4ba8:	4622      	mov	r2, r4
   d4baa:	4639      	mov	r1, r7
   d4bac:	f004 f84c 	bl	d8c48 <__aeabi_atexit>
String unixTime;
   d4bb0:	4631      	mov	r1, r6
   d4bb2:	4640      	mov	r0, r8
   d4bb4:	f001 fbd4 	bl	d6360 <_ZN6StringC1EPKc>
   d4bb8:	4640      	mov	r0, r8
String ssid, password;
   d4bba:	f8df 81cc 	ldr.w	r8, [pc, #460]	; d4d88 <_GLOBAL__sub_I_SystemMode+0x220>
String unixTime;
   d4bbe:	4622      	mov	r2, r4
   d4bc0:	4639      	mov	r1, r7
   d4bc2:	f004 f841 	bl	d8c48 <__aeabi_atexit>
String ssid, password;
   d4bc6:	4631      	mov	r1, r6
   d4bc8:	4640      	mov	r0, r8
   d4bca:	f001 fbc9 	bl	d6360 <_ZN6StringC1EPKc>
   d4bce:	4640      	mov	r0, r8
   d4bd0:	f8df 81b8 	ldr.w	r8, [pc, #440]	; d4d8c <_GLOBAL__sub_I_SystemMode+0x224>
   d4bd4:	4622      	mov	r2, r4
   d4bd6:	4639      	mov	r1, r7
   d4bd8:	f004 f836 	bl	d8c48 <__aeabi_atexit>
   d4bdc:	4631      	mov	r1, r6
   d4bde:	4640      	mov	r0, r8
   d4be0:	f001 fbbe 	bl	d6360 <_ZN6StringC1EPKc>
   d4be4:	4639      	mov	r1, r7
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d4be6:	4f50      	ldr	r7, [pc, #320]	; (d4d28 <_GLOBAL__sub_I_SystemMode+0x1c0>)
String ssid, password;
   d4be8:	4622      	mov	r2, r4
   d4bea:	4640      	mov	r0, r8
   d4bec:	f004 f82c 	bl	d8c48 <__aeabi_atexit>
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d4bf0:	4638      	mov	r0, r7
   d4bf2:	f000 fb37 	bl	d5264 <_ZN15Adafruit_LIS3DHC1Ev>
   d4bf6:	4622      	mov	r2, r4
   d4bf8:	494c      	ldr	r1, [pc, #304]	; (d4d2c <_GLOBAL__sub_I_SystemMode+0x1c4>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d4bfa:	f8df 8194 	ldr.w	r8, [pc, #404]	; d4d90 <_GLOBAL__sub_I_SystemMode+0x228>
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d4bfe:	4638      	mov	r0, r7
   d4c00:	f004 f822 	bl	d8c48 <__aeabi_atexit>
        : config_(config) {
   d4c04:	484a      	ldr	r0, [pc, #296]	; (d4d30 <_GLOBAL__sub_I_SystemMode+0x1c8>)
HttpClient http;
   d4c06:	4f4b      	ldr	r7, [pc, #300]	; (d4d34 <_GLOBAL__sub_I_SystemMode+0x1cc>)
              valid_(true) {
   d4c08:	f8a0 5009 	strh.w	r5, [r0, #9]
        : config_(config) {
   d4c0c:	4603      	mov	r3, r0
   d4c0e:	1d02      	adds	r2, r0, #4
   d4c10:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d4c14:	709d      	strb	r5, [r3, #2]
   d4c16:	2301      	movs	r3, #1
   d4c18:	7503      	strb	r3, [r0, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d4c1a:	4b47      	ldr	r3, [pc, #284]	; (d4d38 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4c1c:	6043      	str	r3, [r0, #4]
SystemSleepConfiguration config;
   d4c1e:	4622      	mov	r2, r4
   d4c20:	4946      	ldr	r1, [pc, #280]	; (d4d3c <_GLOBAL__sub_I_SystemMode+0x1d4>)
        config_.mode = HAL_SLEEP_MODE_NONE;
   d4c22:	7205      	strb	r5, [r0, #8]
        config_.wakeup_sources = nullptr;
   d4c24:	e9c0 5503 	strd	r5, r5, [r0, #12]
   d4c28:	f004 f80e 	bl	d8c48 <__aeabi_atexit>
HttpClient http;
   d4c2c:	4638      	mov	r0, r7
   d4c2e:	f000 f8b1 	bl	d4d94 <_ZN10HttpClientC1Ev>
   d4c32:	4638      	mov	r0, r7
} http_request_t;
   d4c34:	4f42      	ldr	r7, [pc, #264]	; (d4d40 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d4c36:	4943      	ldr	r1, [pc, #268]	; (d4d44 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   d4c38:	4622      	mov	r2, r4
   d4c3a:	f004 f805 	bl	d8c48 <__aeabi_atexit>
   d4c3e:	4631      	mov	r1, r6
   d4c40:	4638      	mov	r0, r7
   d4c42:	f001 fb8d 	bl	d6360 <_ZN6StringC1EPKc>
   d4c46:	f107 0010 	add.w	r0, r7, #16
   d4c4a:	f003 f983 	bl	d7f54 <_ZN9IPAddressC1Ev>
   d4c4e:	4631      	mov	r1, r6
   d4c50:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d4c54:	f001 fb84 	bl	d6360 <_ZN6StringC1EPKc>
   d4c58:	4631      	mov	r1, r6
   d4c5a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   d4c5e:	f001 fb7f 	bl	d6360 <_ZN6StringC1EPKc>
http_request_t request;
   d4c62:	4638      	mov	r0, r7
} http_response_t;
   d4c64:	4f38      	ldr	r7, [pc, #224]	; (d4d48 <_GLOBAL__sub_I_SystemMode+0x1e0>)
   d4c66:	4939      	ldr	r1, [pc, #228]	; (d4d4c <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d4c68:	4622      	mov	r2, r4
   d4c6a:	f003 ffed 	bl	d8c48 <__aeabi_atexit>
   d4c6e:	4631      	mov	r1, r6
   d4c70:	1d38      	adds	r0, r7, #4
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d4c72:	4e37      	ldr	r6, [pc, #220]	; (d4d50 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   d4c74:	f001 fb74 	bl	d6360 <_ZN6StringC1EPKc>
http_response_t response;
   d4c78:	4622      	mov	r2, r4
   d4c7a:	4936      	ldr	r1, [pc, #216]	; (d4d54 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d4c7c:	4638      	mov	r0, r7
   d4c7e:	f003 ffe3 	bl	d8c48 <__aeabi_atexit>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d4c82:	4f35      	ldr	r7, [pc, #212]	; (d4d58 <_GLOBAL__sub_I_SystemMode+0x1f0>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d4c84:	4935      	ldr	r1, [pc, #212]	; (d4d5c <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d4c86:	4630      	mov	r0, r6
   d4c88:	f001 ff28 	bl	d6adc <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d4c8c:	4934      	ldr	r1, [pc, #208]	; (d4d60 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d4c8e:	4640      	mov	r0, r8
   d4c90:	f001 ff24 	bl	d6adc <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d4c94:	4933      	ldr	r1, [pc, #204]	; (d4d64 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4c96:	4638      	mov	r0, r7
   d4c98:	f001 ff20 	bl	d6adc <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   d4c9c:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d4c9e:	4639      	mov	r1, r7
   d4ca0:	a806      	add	r0, sp, #24
   d4ca2:	f88d 3014 	strb.w	r3, [sp, #20]
   d4ca6:	f001 fe33 	bl	d6910 <_ZN8particle7BleUuidC1ERKS0_>
   d4caa:	4631      	mov	r1, r6
   d4cac:	a80b      	add	r0, sp, #44	; 0x2c
   d4cae:	f001 fe2f 	bl	d6910 <_ZN8particle7BleUuidC1ERKS0_>
   d4cb2:	4f2d      	ldr	r7, [pc, #180]	; (d4d68 <_GLOBAL__sub_I_SystemMode+0x200>)
   d4cb4:	492d      	ldr	r1, [pc, #180]	; (d4d6c <_GLOBAL__sub_I_SystemMode+0x204>)
   d4cb6:	ab0b      	add	r3, sp, #44	; 0x2c
   d4cb8:	9300      	str	r3, [sp, #0]
   d4cba:	aa05      	add	r2, sp, #20
   d4cbc:	ab06      	add	r3, sp, #24
   d4cbe:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d4cc2:	4648      	mov	r0, r9
   d4cc4:	f7ff fb3e 	bl	d4344 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4cc8:	4622      	mov	r2, r4
   d4cca:	4639      	mov	r1, r7
   d4ccc:	4648      	mov	r0, r9
   d4cce:	f003 ffbb 	bl	d8c48 <__aeabi_atexit>
   d4cd2:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d4cd4:	4641      	mov	r1, r8
   d4cd6:	a806      	add	r0, sp, #24
   d4cd8:	f88d 3014 	strb.w	r3, [sp, #20]
   d4cdc:	f001 fe18 	bl	d6910 <_ZN8particle7BleUuidC1ERKS0_>
   d4ce0:	4631      	mov	r1, r6
   d4ce2:	a80b      	add	r0, sp, #44	; 0x2c
   d4ce4:	f001 fe14 	bl	d6910 <_ZN8particle7BleUuidC1ERKS0_>
   d4ce8:	4e21      	ldr	r6, [pc, #132]	; (d4d70 <_GLOBAL__sub_I_SystemMode+0x208>)
   d4cea:	4b22      	ldr	r3, [pc, #136]	; (d4d74 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	ab0b      	add	r3, sp, #44	; 0x2c
   d4cf0:	9300      	str	r3, [sp, #0]
   d4cf2:	aa05      	add	r2, sp, #20
   d4cf4:	ab06      	add	r3, sp, #24
   d4cf6:	4920      	ldr	r1, [pc, #128]	; (d4d78 <_GLOBAL__sub_I_SystemMode+0x210>)
   d4cf8:	9502      	str	r5, [sp, #8]
   d4cfa:	4630      	mov	r0, r6
   d4cfc:	f7ff fb22 	bl	d4344 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4d00:	4622      	mov	r2, r4
   d4d02:	4639      	mov	r1, r7
   d4d04:	4630      	mov	r0, r6
   d4d06:	f003 ff9f 	bl	d8c48 <__aeabi_atexit>
   d4d0a:	b011      	add	sp, #68	; 0x44
   d4d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4d10:	2003e0b0 	.word	0x2003e0b0
   d4d14:	ffff0000 	.word	0xffff0000
   d4d18:	2003e0ac 	.word	0x2003e0ac
   d4d1c:	000d4171 	.word	0x000d4171
   d4d20:	000d62cb 	.word	0x000d62cb
   d4d24:	000d9f4f 	.word	0x000d9f4f
   d4d28:	2003e53c 	.word	0x2003e53c
   d4d2c:	000d40b3 	.word	0x000d40b3
   d4d30:	2003e0fc 	.word	0x2003e0fc
   d4d34:	2003e11c 	.word	0x2003e11c
   d4d38:	00030010 	.word	0x00030010
   d4d3c:	000d4125 	.word	0x000d4125
   d4d40:	2003e588 	.word	0x2003e588
   d4d44:	000d413d 	.word	0x000d413d
   d4d48:	2003e5d4 	.word	0x2003e5d4
   d4d4c:	000d40c3 	.word	0x000d40c3
   d4d50:	2003e0bc 	.word	0x2003e0bc
   d4d54:	000d40b5 	.word	0x000d40b5
   d4d58:	2003e0e4 	.word	0x2003e0e4
   d4d5c:	000d9cb4 	.word	0x000d9cb4
   d4d60:	000d9cd9 	.word	0x000d9cd9
   d4d64:	000d9cfe 	.word	0x000d9cfe
   d4d68:	000d6fe7 	.word	0x000d6fe7
   d4d6c:	000d9d23 	.word	0x000d9d23
   d4d70:	2003e5e8 	.word	0x2003e5e8
   d4d74:	000d48e9 	.word	0x000d48e9
   d4d78:	000d9d26 	.word	0x000d9d26
   d4d7c:	2003e578 	.word	0x2003e578
   d4d80:	2003e608 	.word	0x2003e608
   d4d84:	2003e610 	.word	0x2003e610
   d4d88:	2003e5f0 	.word	0x2003e5f0
   d4d8c:	2003e568 	.word	0x2003e568
   d4d90:	2003e0d0 	.word	0x2003e0d0

000d4d94 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   d4d94:	b510      	push	{r4, lr}
   d4d96:	4604      	mov	r4, r0
   d4d98:	f003 fd04 	bl	d87a4 <_ZN9TCPClientC1Ev>
{

}
   d4d9c:	4620      	mov	r0, r4
   d4d9e:	bd10      	pop	{r4, pc}

000d4da0 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   d4da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   d4da2:	4f0f      	ldr	r7, [pc, #60]	; (d4de0 <_ZN10HttpClient10sendHeaderEPKcS1_+0x40>)
{
   d4da4:	4605      	mov	r5, r0
   d4da6:	4614      	mov	r4, r2
   d4da8:	460e      	mov	r6, r1
    client.print(aHeaderName);
   d4daa:	f002 fe65 	bl	d7a78 <_ZN5Print5printEPKc>
    client.print(": ");
   d4dae:	4639      	mov	r1, r7
   d4db0:	4628      	mov	r0, r5
   d4db2:	f002 fe61 	bl	d7a78 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d4db6:	4621      	mov	r1, r4
   d4db8:	4628      	mov	r0, r5
   d4dba:	f002 fe76 	bl	d7aaa <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.print(aHeaderName);
   d4dbe:	f003 f979 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4dc2:	4631      	mov	r1, r6
   d4dc4:	f002 fe58 	bl	d7a78 <_ZN5Print5printEPKc>
    Serial.print(": ");
   d4dc8:	f003 f974 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4dcc:	4639      	mov	r1, r7
   d4dce:	f002 fe53 	bl	d7a78 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   d4dd2:	f003 f96f 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4dd6:	4621      	mov	r1, r4
    #endif
}
   d4dd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(aHeaderValue);
   d4ddc:	f002 be65 	b.w	d7aaa <_ZN5Print7printlnEPKc>
   d4de0:	000d9c07 	.word	0x000d9c07

000d4de4 <_ZN10HttpClient10sendHeaderEPKc>:
    Serial.println(aHeaderValue);
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName)
{
   d4de4:	b510      	push	{r4, lr}
   d4de6:	460c      	mov	r4, r1
    client.println(aHeaderName);
   d4de8:	f002 fe5f 	bl	d7aaa <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.println(aHeaderName);
   d4dec:	f003 f962 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4df0:	4621      	mov	r1, r4
    #endif
}
   d4df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(aHeaderName);
   d4df6:	f002 be58 	b.w	d7aaa <_ZN5Print7printlnEPKc>
	...

000d4dfc <_ZN10HttpClient10sendHeaderEPKci>:
{
   d4dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(": ");
   d4dfe:	4f10      	ldr	r7, [pc, #64]	; (d4e40 <_ZN10HttpClient10sendHeaderEPKci+0x44>)
{
   d4e00:	4605      	mov	r5, r0
   d4e02:	4614      	mov	r4, r2
   d4e04:	460e      	mov	r6, r1
    client.print(aHeaderName);
   d4e06:	f002 fe37 	bl	d7a78 <_ZN5Print5printEPKc>
    client.print(": ");
   d4e0a:	4639      	mov	r1, r7
   d4e0c:	4628      	mov	r0, r5
   d4e0e:	f002 fe33 	bl	d7a78 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d4e12:	220a      	movs	r2, #10
   d4e14:	4621      	mov	r1, r4
   d4e16:	4628      	mov	r0, r5
   d4e18:	f7ff fab6 	bl	d4388 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.print(aHeaderName);
   d4e1c:	f003 f94a 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4e20:	4631      	mov	r1, r6
   d4e22:	f002 fe29 	bl	d7a78 <_ZN5Print5printEPKc>
    Serial.print(": ");
   d4e26:	f003 f945 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4e2a:	4639      	mov	r1, r7
   d4e2c:	f002 fe24 	bl	d7a78 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   d4e30:	f003 f940 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4e34:	220a      	movs	r2, #10
   d4e36:	4621      	mov	r1, r4
   d4e38:	f7ff faa6 	bl	d4388 <_ZN5Print7printlnIiLi0EEEjT_i>
}
   d4e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4e3e:	bf00      	nop
   d4e40:	000d9c07 	.word	0x000d9c07

000d4e44 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d4e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4e48:	460e      	mov	r6, r1
   d4e4a:	b091      	sub	sp, #68	; 0x44
   d4e4c:	461f      	mov	r7, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d4e4e:	f04f 33ff 	mov.w	r3, #4294967295
   d4e52:	6013      	str	r3, [r2, #0]
{
   d4e54:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4e56:	2100      	movs	r1, #0
   d4e58:	4630      	mov	r0, r6
   d4e5a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   d4e5e:	4691      	mov	r9, r2
   d4e60:	f001 fb42 	bl	d64e8 <_ZNK6String6equalsEPKc>
   d4e64:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   d4e68:	4603      	mov	r3, r0
   d4e6a:	2800      	cmp	r0, #0
   d4e6c:	d16e      	bne.n	d4f4c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x108>
	const char * c_str() const { return buffer; }
   d4e6e:	f1be 0f00 	cmp.w	lr, #0
   d4e72:	bf14      	ite	ne
   d4e74:	4672      	movne	r2, lr
   d4e76:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   d4e78:	6831      	ldr	r1, [r6, #0]
   d4e7a:	b292      	uxth	r2, r2
   d4e7c:	4620      	mov	r0, r4
   d4e7e:	f003 fca5 	bl	d87cc <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   d4e82:	1e05      	subs	r5, r0, #0
   d4e84:	bf18      	it	ne
   d4e86:	2501      	movne	r5, #1
    }

    #ifdef LOGGING
    if (connected) {
   d4e88:	2d00      	cmp	r5, #0
   d4e8a:	d07e      	beq.n	d4f8a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x146>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4e8c:	2100      	movs	r1, #0
   d4e8e:	4630      	mov	r0, r6
   d4e90:	f001 fb2a 	bl	d64e8 <_ZNK6String6equalsEPKc>
        if(aRequest.hostname!=NULL) {
   d4e94:	2800      	cmp	r0, #0
   d4e96:	d16c      	bne.n	d4f72 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x12e>
            Serial.print("HttpClient>\tConnecting to: ");
   d4e98:	f003 f90c 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4e9c:	49bb      	ldr	r1, [pc, #748]	; (d518c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x348>)
   d4e9e:	f002 fdeb 	bl	d7a78 <_ZN5Print5printEPKc>
            Serial.print(aRequest.hostname);
   d4ea2:	f003 f907 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4ea6:	6831      	ldr	r1, [r6, #0]
   d4ea8:	f002 fde6 	bl	d7a78 <_ZN5Print5printEPKc>
        } else {
            Serial.print("HttpClient>\tConnecting to IP: ");
            Serial.print(aRequest.ip);
        }
        Serial.print(":");
   d4eac:	f003 f902 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4eb0:	49b7      	ldr	r1, [pc, #732]	; (d5190 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x34c>)
   d4eb2:	f002 fde1 	bl	d7a78 <_ZN5Print5printEPKc>
        Serial.println(aRequest.port);
   d4eb6:	f003 f8fd 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4eba:	220a      	movs	r2, #10
   d4ebc:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   d4ebe:	f7ff fa63 	bl	d4388 <_ZN5Print7printlnIiLi0EEEjT_i>
    //
    // Send HTTP Headers
    //

    // Send initial headers (only HTTP 1.0 is supported for now).
    client.print(aHttpMethod);
   d4ec2:	4641      	mov	r1, r8
   d4ec4:	4620      	mov	r0, r4
   d4ec6:	f002 fdd7 	bl	d7a78 <_ZN5Print5printEPKc>
    client.print(" ");
   d4eca:	49b2      	ldr	r1, [pc, #712]	; (d5194 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   d4ecc:	4620      	mov	r0, r4
   d4ece:	f002 fdd3 	bl	d7a78 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   d4ed2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   d4ed4:	4620      	mov	r0, r4
   d4ed6:	f002 fdcf 	bl	d7a78 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   d4eda:	49af      	ldr	r1, [pc, #700]	; (d5198 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   d4edc:	4620      	mov	r0, r4
   d4ede:	f002 fdcb 	bl	d7a78 <_ZN5Print5printEPKc>

    #ifdef LOGGING
    Serial.println("HttpClient>\tStart of HTTP Request.");
   d4ee2:	f003 f8e7 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4ee6:	49ad      	ldr	r1, [pc, #692]	; (d519c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   d4ee8:	f002 fddf 	bl	d7aaa <_ZN5Print7printlnEPKc>
    Serial.print(aHttpMethod);
   d4eec:	f003 f8e2 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4ef0:	4641      	mov	r1, r8
   d4ef2:	f002 fdc1 	bl	d7a78 <_ZN5Print5printEPKc>
    Serial.print(" ");
   d4ef6:	f003 f8dd 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4efa:	49a6      	ldr	r1, [pc, #664]	; (d5194 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   d4efc:	f002 fdbc 	bl	d7a78 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
   d4f00:	f003 f8d8 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4f04:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   d4f06:	f002 fdb7 	bl	d7a78 <_ZN5Print5printEPKc>
    Serial.print(" HTTP/1.0\r\n");
   d4f0a:	f003 f8d3 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4f0e:	49a2      	ldr	r1, [pc, #648]	; (d5198 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   d4f10:	f002 fdb2 	bl	d7a78 <_ZN5Print5printEPKc>
    #endif

    // Send General and Request Headers.
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   d4f14:	49a2      	ldr	r1, [pc, #648]	; (d51a0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x35c>)
   d4f16:	4aa3      	ldr	r2, [pc, #652]	; (d51a4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x360>)
   d4f18:	4620      	mov	r0, r4
   d4f1a:	f7ff ff41 	bl	d4da0 <_ZN10HttpClient10sendHeaderEPKcS1_>
   d4f1e:	2100      	movs	r1, #0
   d4f20:	4630      	mov	r0, r6
   d4f22:	f001 fae1 	bl	d64e8 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   d4f26:	b920      	cbnz	r0, d4f32 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xee>
        sendHeader("HOST", aRequest.hostname.c_str());
   d4f28:	6832      	ldr	r2, [r6, #0]
   d4f2a:	499f      	ldr	r1, [pc, #636]	; (d51a8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x364>)
   d4f2c:	4620      	mov	r0, r4
   d4f2e:	f7ff ff37 	bl	d4da0 <_ZN10HttpClient10sendHeaderEPKcS1_>
    }

    //Send Entity Headers
    // TODO: Check the standard, currently sending Content-Length : 0 for empty
    // POST requests, and no content-length for other types.
    if (aRequest.body != NULL) {
   d4f32:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   d4f36:	2100      	movs	r1, #0
   d4f38:	4650      	mov	r0, sl
   d4f3a:	f001 fad5 	bl	d64e8 <_ZNK6String6equalsEPKc>
   d4f3e:	bb78      	cbnz	r0, d4fa0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x15c>
        sendHeader("Content-Length", (aRequest.body).length());
   d4f40:	6c72      	ldr	r2, [r6, #68]	; 0x44
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
        sendHeader("Content-Length", 0);
   d4f42:	499a      	ldr	r1, [pc, #616]	; (d51ac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x368>)
   d4f44:	4620      	mov	r0, r4
   d4f46:	f7ff ff59 	bl	d4dfc <_ZN10HttpClient10sendHeaderEPKci>
   d4f4a:	e030      	b.n	d4fae <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4f4c:	4b98      	ldr	r3, [pc, #608]	; (d51b0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x36c>)
   d4f4e:	930a      	str	r3, [sp, #40]	; 0x28
   d4f50:	f106 0c14 	add.w	ip, r6, #20
   d4f54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d4f58:	ad0b      	add	r5, sp, #44	; 0x2c
   d4f5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4f5c:	f8dc 3000 	ldr.w	r3, [ip]
   d4f60:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   d4f62:	fa1f f28e 	uxth.w	r2, lr
   d4f66:	2300      	movs	r3, #0
   d4f68:	a90a      	add	r1, sp, #40	; 0x28
   d4f6a:	4620      	mov	r0, r4
   d4f6c:	f003 fafb 	bl	d8566 <_ZN9TCPClient7connectE9IPAddresstm>
   d4f70:	e787      	b.n	d4e82 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3e>
            Serial.print("HttpClient>\tConnecting to IP: ");
   d4f72:	f003 f89f 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4f76:	498f      	ldr	r1, [pc, #572]	; (d51b4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x370>)
   d4f78:	f002 fd7e 	bl	d7a78 <_ZN5Print5printEPKc>
            Serial.print(aRequest.ip);
   d4f7c:	f003 f89a 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4f80:	f106 0110 	add.w	r1, r6, #16
   d4f84:	f002 fd7f 	bl	d7a86 <_ZN5Print5printERK9Printable>
   d4f88:	e790      	b.n	d4eac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x68>
        Serial.println("HttpClient>\tConnection failed.");
   d4f8a:	f003 f893 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4f8e:	498a      	ldr	r1, [pc, #552]	; (d51b8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x374>)
   d4f90:	f002 fd8b 	bl	d7aaa <_ZN5Print7printlnEPKc>
        client.stop();
   d4f94:	4620      	mov	r0, r4
   d4f96:	f003 fbbb 	bl	d8710 <_ZN9TCPClient4stopEv>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   d4f9a:	b011      	add	sp, #68	; 0x44
   d4f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   d4fa0:	4986      	ldr	r1, [pc, #536]	; (d51bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x378>)
   d4fa2:	4640      	mov	r0, r8
   d4fa4:	f004 fcfc 	bl	d99a0 <strcmp>
   d4fa8:	4602      	mov	r2, r0
   d4faa:	2800      	cmp	r0, #0
   d4fac:	d0c9      	beq.n	d4f42 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfe>
    if (headers != NULL)
   d4fae:	b15f      	cbz	r7, d4fc8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x184>
        while (headers[i].header != NULL)
   d4fb0:	6839      	ldr	r1, [r7, #0]
   d4fb2:	b149      	cbz	r1, d4fc8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x184>
            if (headers[i].value != NULL) {
   d4fb4:	687a      	ldr	r2, [r7, #4]
                sendHeader(headers[i].header, headers[i].value);
   d4fb6:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   d4fb8:	b11a      	cbz	r2, d4fc2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17e>
                sendHeader(headers[i].header, headers[i].value);
   d4fba:	f7ff fef1 	bl	d4da0 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   d4fbe:	3708      	adds	r7, #8
        while (headers[i].header != NULL)
   d4fc0:	e7f6      	b.n	d4fb0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16c>
                sendHeader(headers[i].header);
   d4fc2:	f7ff ff0f 	bl	d4de4 <_ZN10HttpClient10sendHeaderEPKc>
   d4fc6:	e7fa      	b.n	d4fbe <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17a>
    client.println();
   d4fc8:	4620      	mov	r0, r4
   d4fca:	f002 fd62 	bl	d7a92 <_ZN5Print7printlnEv>
    client.flush();
   d4fce:	4620      	mov	r0, r4
   d4fd0:	f003 f9bc 	bl	d834c <_ZN9TCPClient5flushEv>
   d4fd4:	2100      	movs	r1, #0
   d4fd6:	4650      	mov	r0, sl
   d4fd8:	f001 fa86 	bl	d64e8 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   d4fdc:	b940      	cbnz	r0, d4ff0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ac>
        client.println(aRequest.body);
   d4fde:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   d4fe0:	4620      	mov	r0, r4
   d4fe2:	f002 fd62 	bl	d7aaa <_ZN5Print7printlnEPKc>
        Serial.println(aRequest.body);
   d4fe6:	f003 f865 	bl	d80b4 <_Z16_fetch_usbserialv>
   d4fea:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   d4fec:	f002 fd5d 	bl	d7aaa <_ZN5Print7printlnEPKc>
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   d4ff0:	f003 f860 	bl	d80b4 <_Z16_fetch_usbserialv>
    memset(&buffer[0], 0, sizeof(buffer));
   d4ff4:	f104 0a1c 	add.w	sl, r4, #28
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   d4ff8:	4971      	ldr	r1, [pc, #452]	; (d51c0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x37c>)
   d4ffa:	f002 fd56 	bl	d7aaa <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   d4ffe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d5002:	2100      	movs	r1, #0
   d5004:	4650      	mov	r0, sl
   d5006:	f004 fc9f 	bl	d9948 <memset>
   d500a:	f000 fbc3 	bl	d5794 <HAL_Timer_Get_Milli_Seconds>
   d500e:	9000      	str	r0, [sp, #0]
   d5010:	f000 fbc0 	bl	d5794 <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
   d5014:	2700      	movs	r7, #0
   d5016:	9001      	str	r0, [sp, #4]
        int bytes = client.available();
   d5018:	4620      	mov	r0, r4
   d501a:	f003 fb1f 	bl	d865c <_ZN9TCPClient9availableEv>
        if(bytes) {
   d501e:	4606      	mov	r6, r0
   d5020:	b1b0      	cbz	r0, d5050 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x20c>
            Serial.print("\r\nHttpClient>\tReceiving TCP transaction of ");
   d5022:	f003 f847 	bl	d80b4 <_Z16_fetch_usbserialv>
   d5026:	4967      	ldr	r1, [pc, #412]	; (d51c4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x380>)
   d5028:	f002 fd26 	bl	d7a78 <_ZN5Print5printEPKc>
            Serial.print(bytes);
   d502c:	f003 f842 	bl	d80b4 <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
   d5030:	2e00      	cmp	r6, #0
   d5032:	4683      	mov	fp, r0
   d5034:	da27      	bge.n	d5086 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x242>
            t = print('-');
   d5036:	212d      	movs	r1, #45	; 0x2d
   d5038:	f002 fd22 	bl	d7a80 <_ZN5Print5printEc>
            val = -n;
   d503c:	4271      	negs	r1, r6
        return printNumber(val, base) + t;
   d503e:	220a      	movs	r2, #10
   d5040:	4658      	mov	r0, fp
   d5042:	f002 fd3c 	bl	d7abe <_ZN5Print11printNumberEmh>
            Serial.println(" bytes.");
   d5046:	f003 f835 	bl	d80b4 <_Z16_fetch_usbserialv>
   d504a:	495f      	ldr	r1, [pc, #380]	; (d51c8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x384>)
   d504c:	f002 fd2d 	bl	d7aaa <_ZN5Print7printlnEPKc>
    unsigned int bufferPosition = 0;
   d5050:	f04f 0b00 	mov.w	fp, #0
        while (client.available()) {
   d5054:	4620      	mov	r0, r4
   d5056:	f003 fb01 	bl	d865c <_ZN9TCPClient9availableEv>
   d505a:	b338      	cbz	r0, d50ac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x268>
            char c = client.read();
   d505c:	4620      	mov	r0, r4
   d505e:	f003 fa36 	bl	d84ce <_ZN9TCPClient4readEv>
   d5062:	fa5f f880 	uxtb.w	r8, r0
            Serial.print(c);
   d5066:	f003 f825 	bl	d80b4 <_Z16_fetch_usbserialv>
   d506a:	4641      	mov	r1, r8
   d506c:	f002 fd08 	bl	d7a80 <_ZN5Print5printEc>
   d5070:	f000 fb90 	bl	d5794 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   d5074:	f240 33fe 	movw	r3, #1022	; 0x3fe
   d5078:	429f      	cmp	r7, r3
   d507a:	9000      	str	r0, [sp, #0]
   d507c:	d805      	bhi.n	d508a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x246>
                buffer[bufferPosition] = c;
   d507e:	f80a 8007 	strb.w	r8, [sl, r7]
            bufferPosition++;
   d5082:	3701      	adds	r7, #1
        while (client.available()) {
   d5084:	e7e6      	b.n	d5054 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x210>
            val = n;
   d5086:	4631      	mov	r1, r6
   d5088:	e7d9      	b.n	d503e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fa>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   d508a:	f240 33ff 	movw	r3, #1023	; 0x3ff
   d508e:	429f      	cmp	r7, r3
   d5090:	d1f7      	bne.n	d5082 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23e>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d5092:	2300      	movs	r3, #0
   d5094:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   d5098:	4620      	mov	r0, r4
   d509a:	f003 fb39 	bl	d8710 <_ZN9TCPClient4stopEv>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
   d509e:	f003 f809 	bl	d80b4 <_Z16_fetch_usbserialv>
   d50a2:	494a      	ldr	r1, [pc, #296]	; (d51cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x388>)
   d50a4:	f002 fd01 	bl	d7aaa <_ZN5Print7printlnEPKc>
                error = true;
   d50a8:	46ab      	mov	fp, r5
   d50aa:	e7ea      	b.n	d5082 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23e>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d50ac:	19e3      	adds	r3, r4, r7
   d50ae:	7718      	strb	r0, [r3, #28]
        if (bytes) {
   d50b0:	b126      	cbz	r6, d50bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x278>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
   d50b2:	f002 ffff 	bl	d80b4 <_Z16_fetch_usbserialv>
   d50b6:	4946      	ldr	r1, [pc, #280]	; (d51d0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x38c>)
   d50b8:	f002 fcde 	bl	d7a78 <_ZN5Print5printEPKc>
   d50bc:	f000 fb6a 	bl	d5794 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   d50c0:	9b00      	ldr	r3, [sp, #0]
   d50c2:	1ac6      	subs	r6, r0, r3
        if (!error && !timeout) {
   d50c4:	f1bb 0f00 	cmp.w	fp, #0
   d50c8:	d106      	bne.n	d50d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x294>
   d50ca:	f241 3388 	movw	r3, #5000	; 0x1388
   d50ce:	429e      	cmp	r6, r3
   d50d0:	d802      	bhi.n	d50d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x294>
            delay(200);
   d50d2:	20c8      	movs	r0, #200	; 0xc8
   d50d4:	f002 fe46 	bl	d7d64 <delay>
    } while (client.connected() && !timeout && !error);
   d50d8:	4620      	mov	r0, r4
   d50da:	f003 f938 	bl	d834e <_ZN9TCPClient9connectedEv>
   d50de:	f241 3388 	movw	r3, #5000	; 0x1388
   d50e2:	2800      	cmp	r0, #0
   d50e4:	d04a      	beq.n	d517c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x338>
   d50e6:	429e      	cmp	r6, r3
   d50e8:	d84a      	bhi.n	d5180 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x33c>
   d50ea:	f1bb 0f00 	cmp.w	fp, #0
   d50ee:	d093      	beq.n	d5018 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d4>
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
   d50f0:	f002 ffe0 	bl	d80b4 <_Z16_fetch_usbserialv>
   d50f4:	4937      	ldr	r1, [pc, #220]	; (d51d4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x390>)
   d50f6:	f002 fcbf 	bl	d7a78 <_ZN5Print5printEPKc>
    Serial.print(millis() - firstRead);
   d50fa:	f002 ffdb 	bl	d80b4 <_Z16_fetch_usbserialv>
   d50fe:	4605      	mov	r5, r0
   d5100:	f000 fb48 	bl	d5794 <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   d5104:	9b01      	ldr	r3, [sp, #4]
   d5106:	220a      	movs	r2, #10
   d5108:	1ac1      	subs	r1, r0, r3
   d510a:	4628      	mov	r0, r5
   d510c:	f002 fcd7 	bl	d7abe <_ZN5Print11printNumberEmh>
    Serial.println("ms).");
   d5110:	f002 ffd0 	bl	d80b4 <_Z16_fetch_usbserialv>
   d5114:	4930      	ldr	r1, [pc, #192]	; (d51d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x394>)
   d5116:	f002 fcc8 	bl	d7aaa <_ZN5Print7printlnEPKc>
    client.stop();
   d511a:	4620      	mov	r0, r4
   d511c:	f003 faf8 	bl	d8710 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   d5120:	4651      	mov	r1, sl
   d5122:	a802      	add	r0, sp, #8
   d5124:	f001 f91c 	bl	d6360 <_ZN6StringC1EPKc>
    String statusCode = raw_response.substring(9,12);
   d5128:	230c      	movs	r3, #12
   d512a:	2209      	movs	r2, #9
   d512c:	a902      	add	r1, sp, #8
   d512e:	a806      	add	r0, sp, #24
   d5130:	f001 f9fe 	bl	d6530 <_ZNK6String9substringEjj>
    Serial.print("HttpClient>\tStatus Code: ");
   d5134:	f002 ffbe 	bl	d80b4 <_Z16_fetch_usbserialv>
   d5138:	4928      	ldr	r1, [pc, #160]	; (d51dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x398>)
   d513a:	f002 fc9d 	bl	d7a78 <_ZN5Print5printEPKc>
    Serial.println(statusCode);
   d513e:	f002 ffb9 	bl	d80b4 <_Z16_fetch_usbserialv>
   d5142:	9906      	ldr	r1, [sp, #24]
   d5144:	f002 fcb1 	bl	d7aaa <_ZN5Print7printlnEPKc>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   d5148:	4925      	ldr	r1, [pc, #148]	; (d51e0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x39c>)
   d514a:	a80a      	add	r0, sp, #40	; 0x28
   d514c:	f001 f908 	bl	d6360 <_ZN6StringC1EPKc>
   d5150:	a90a      	add	r1, sp, #40	; 0x28
   d5152:	a802      	add	r0, sp, #8
   d5154:	f001 f9e9 	bl	d652a <_ZNK6String7indexOfERKS_>
   d5158:	4604      	mov	r4, r0
   d515a:	a80a      	add	r0, sp, #40	; 0x28
   d515c:	f001 f8b5 	bl	d62ca <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   d5160:	1c63      	adds	r3, r4, #1
   d5162:	d143      	bne.n	d51ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a8>
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
   d5164:	f002 ffa6 	bl	d80b4 <_Z16_fetch_usbserialv>
   d5168:	491e      	ldr	r1, [pc, #120]	; (d51e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a0>)
   d516a:	f002 fc9e 	bl	d7aaa <_ZN5Print7printlnEPKc>
    String statusCode = raw_response.substring(9,12);
   d516e:	a806      	add	r0, sp, #24
   d5170:	f001 f8ab 	bl	d62ca <_ZN6StringD1Ev>
    String raw_response(buffer);
   d5174:	a802      	add	r0, sp, #8
   d5176:	f001 f8a8 	bl	d62ca <_ZN6StringD1Ev>
   d517a:	e70e      	b.n	d4f9a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x156>
    if (timeout) {
   d517c:	429e      	cmp	r6, r3
   d517e:	d9b7      	bls.n	d50f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2ac>
        Serial.println("\r\nHttpClient>\tError: Timeout while reading response.");
   d5180:	f002 ff98 	bl	d80b4 <_Z16_fetch_usbserialv>
   d5184:	4918      	ldr	r1, [pc, #96]	; (d51e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a4>)
   d5186:	f002 fc90 	bl	d7aaa <_ZN5Print7printlnEPKc>
   d518a:	e7b1      	b.n	d50f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2ac>
   d518c:	000d9d74 	.word	0x000d9d74
   d5190:	000d9b86 	.word	0x000d9b86
   d5194:	000d9c08 	.word	0x000d9c08
   d5198:	000d9daf 	.word	0x000d9daf
   d519c:	000d9dbb 	.word	0x000d9dbb
   d51a0:	000d9de4 	.word	0x000d9de4
   d51a4:	000d9dde 	.word	0x000d9dde
   d51a8:	000d9e0e 	.word	0x000d9e0e
   d51ac:	000d9e13 	.word	0x000d9e13
   d51b0:	000da1d0 	.word	0x000da1d0
   d51b4:	000d9d90 	.word	0x000d9d90
   d51b8:	000d9def 	.word	0x000d9def
   d51bc:	000d9bb2 	.word	0x000d9bb2
   d51c0:	000d9e22 	.word	0x000d9e22
   d51c4:	000d9e43 	.word	0x000d9e43
   d51c8:	000d9e6f 	.word	0x000d9e6f
   d51cc:	000d9e77 	.word	0x000d9e77
   d51d0:	000d9eac 	.word	0x000d9eac
   d51d4:	000d9f07 	.word	0x000d9f07
   d51d8:	000d9f2c 	.word	0x000d9f2c
   d51dc:	000d9f31 	.word	0x000d9f31
   d51e0:	000d9f4b 	.word	0x000d9f4b
   d51e4:	000d9f50 	.word	0x000d9f50
   d51e8:	000d9ed2 	.word	0x000d9ed2
    aResponse.body = "";
   d51ec:	f109 0504 	add.w	r5, r9, #4
   d51f0:	490a      	ldr	r1, [pc, #40]	; (d521c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3d8>)
   d51f2:	4628      	mov	r0, r5
   d51f4:	f001 f904 	bl	d6400 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   d51f8:	1d22      	adds	r2, r4, #4
   d51fa:	a902      	add	r1, sp, #8
   d51fc:	a80a      	add	r0, sp, #40	; 0x28
   d51fe:	f001 f9b7 	bl	d6570 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d5202:	a90a      	add	r1, sp, #40	; 0x28
   d5204:	4628      	mov	r0, r5
   d5206:	f001 f94a 	bl	d649e <_ZN6String6concatERKS_>
   d520a:	a80a      	add	r0, sp, #40	; 0x28
   d520c:	f001 f85d 	bl	d62ca <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   d5210:	9806      	ldr	r0, [sp, #24]
   d5212:	f004 fb3d 	bl	d9890 <atoi>
   d5216:	f8c9 0000 	str.w	r0, [r9]
   d521a:	e7a8      	b.n	d516e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x32a>
   d521c:	000d9f4f 	.word	0x000d9f4f

000d5220 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d5220:	4770      	bx	lr
	...

000d5224 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d5224:	460b      	mov	r3, r1
   d5226:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d5228:	2228      	movs	r2, #40	; 0x28
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d522a:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d522c:	2100      	movs	r1, #0
   d522e:	4618      	mov	r0, r3
   d5230:	f004 fb8a 	bl	d9948 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d5234:	4908      	ldr	r1, [pc, #32]	; (d5258 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
   d5236:	220b      	movs	r2, #11
   d5238:	f004 fbcc 	bl	d99d4 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d523c:	2200      	movs	r2, #0
  sensor->version     = 1;
   d523e:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d5240:	72c2      	strb	r2, [r0, #11]
  sensor->version     = 1;
   d5242:	60c1      	str	r1, [r0, #12]
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d5244:	4603      	mov	r3, r0
  sensor->sensor_id   = _sensorID;
   d5246:	69a0      	ldr	r0, [r4, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
   d5248:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   d524a:	e9c3 0104 	strd	r0, r1, [r3, #16]
  sensor->max_value   = 0;
   d524e:	2200      	movs	r2, #0
   d5250:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0;
   d5252:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0;
   d5254:	621a      	str	r2, [r3, #32]
}
   d5256:	bd10      	pop	{r4, pc}
   d5258:	000d9f82 	.word	0x000d9f82

000d525c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d525c:	6803      	ldr	r3, [r0, #0]
   d525e:	b2c9      	uxtb	r1, r1
   d5260:	689b      	ldr	r3, [r3, #8]
   d5262:	4718      	bx	r3

000d5264 <_ZN15Adafruit_LIS3DHC1Ev>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   d5264:	4a06      	ldr	r2, [pc, #24]	; (d5280 <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   d5266:	6002      	str	r2, [r0, #0]
   d5268:	f04f 32ff 	mov.w	r2, #4294967295
   d526c:	6182      	str	r2, [r0, #24]
   d526e:	7742      	strb	r2, [r0, #29]
   d5270:	83c2      	strh	r2, [r0, #30]
   d5272:	22ff      	movs	r2, #255	; 0xff
   d5274:	f880 2020 	strb.w	r2, [r0, #32]
   d5278:	2208      	movs	r2, #8
   d527a:	6242      	str	r2, [r0, #36]	; 0x24
}
   d527c:	4770      	bx	lr
   d527e:	bf00      	nop
   d5280:	000d9f94 	.word	0x000d9f94

000d5284 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d5284:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d5286:	4c0b      	ldr	r4, [pc, #44]	; (d52b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d5288:	7821      	ldrb	r1, [r4, #0]
   d528a:	f3bf 8f5b 	dmb	ish
   d528e:	f011 0101 	ands.w	r1, r1, #1
   d5292:	d10b      	bne.n	d52ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d5294:	4620      	mov	r0, r4
   d5296:	9101      	str	r1, [sp, #4]
   d5298:	f7fe ff03 	bl	d40a2 <__cxa_guard_acquire>
   d529c:	9901      	ldr	r1, [sp, #4]
   d529e:	b128      	cbz	r0, d52ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d52a0:	4805      	ldr	r0, [pc, #20]	; (d52b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d52a2:	f000 fe25 	bl	d5ef0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d52a6:	4620      	mov	r0, r4
   d52a8:	f7fe ff00 	bl	d40ac <__cxa_guard_release>
        return instance;
    }
   d52ac:	4802      	ldr	r0, [pc, #8]	; (d52b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d52ae:	b002      	add	sp, #8
   d52b0:	bd10      	pop	{r4, pc}
   d52b2:	bf00      	nop
   d52b4:	2003e630 	.word	0x2003e630
   d52b8:	2003e634 	.word	0x2003e634

000d52bc <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d52bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
   d52c0:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d52c4:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d52c6:	4605      	mov	r5, r0
   d52c8:	460f      	mov	r7, r1
  if (_sck == -1)
   d52ca:	d106      	bne.n	d52da <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d52cc:	f7ff ffda 	bl	d5284 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d52d0:	4639      	mov	r1, r7
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
   d52d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d52d6:	f000 be95 	b.w	d6004 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   d52da:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   d52dc:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   d52de:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   d52e2:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d52e6:	2100      	movs	r1, #0
   d52e8:	b280      	uxth	r0, r0
   d52ea:	f003 fc2a 	bl	d8b42 <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   d52ee:	f995 001e 	ldrsb.w	r0, [r5, #30]
   d52f2:	fa08 f106 	lsl.w	r1, r8, r6
   d52f6:	4039      	ands	r1, r7
   d52f8:	b280      	uxth	r0, r0
   d52fa:	f003 fc22 	bl	d8b42 <digitalWrite>
    digitalWrite(_sck, HIGH);
   d52fe:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d5302:	2101      	movs	r1, #1
   d5304:	b280      	uxth	r0, r0
   d5306:	f003 fc1c 	bl	d8b42 <digitalWrite>
    if (digitalRead(_miso))
   d530a:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
   d530e:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   d5310:	b280      	uxth	r0, r0
    reply <<= 1;
   d5312:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   d5314:	f003 fc2e 	bl	d8b74 <digitalRead>
   d5318:	b108      	cbz	r0, d531e <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   d531a:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   d531e:	3e01      	subs	r6, #1
   d5320:	d2df      	bcs.n	d52e2 <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
   d5322:	4620      	mov	r0, r4
   d5324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5328 <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   d5328:	b508      	push	{r3, lr}
        instance().setBitOrder(order);
   d532a:	f7ff ffab 	bl	d5284 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d532e:	2101      	movs	r1, #1
   d5330:	f000 fdf9 	bl	d5f26 <_ZN8SPIClass11setBitOrderEh>
        return instance().setClockSpeed(value, scale);
   d5334:	f7ff ffa6 	bl	d5284 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5338:	4905      	ldr	r1, [pc, #20]	; (d5350 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   d533a:	2201      	movs	r2, #1
   d533c:	f000 fe30 	bl	d5fa0 <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
   d5340:	f7ff ffa0 	bl	d5284 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   d5344:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d5348:	2100      	movs	r1, #0
   d534a:	f000 bdff 	b.w	d5f4c <_ZN8SPIClass11setDataModeEh>
   d534e:	bf00      	nop
   d5350:	0007a120 	.word	0x0007a120

000d5354 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d5354:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   d5356:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d535a:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d535c:	4604      	mov	r4, r0
   d535e:	460e      	mov	r6, r1
   d5360:	4615      	mov	r5, r2
  if (_cs == -1) {
   d5362:	d116      	bne.n	d5392 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   d5364:	f003 fc48 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d5368:	7f21      	ldrb	r1, [r4, #28]
   d536a:	f002 ffbf 	bl	d82ec <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d536e:	f003 fc43 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d5372:	6803      	ldr	r3, [r0, #0]
   d5374:	4631      	mov	r1, r6
   d5376:	689b      	ldr	r3, [r3, #8]
   d5378:	4798      	blx	r3
    Wire.write((uint8_t)value);
   d537a:	f003 fc3d 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d537e:	6803      	ldr	r3, [r0, #0]
   d5380:	4629      	mov	r1, r5
   d5382:	689b      	ldr	r3, [r3, #8]
   d5384:	4798      	blx	r3
    Wire.endTransmission();
   d5386:	f003 fc37 	bl	d8bf8 <_Z19__fetch_global_Wirev>
}
   d538a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   d538e:	f002 bfb8 	b.w	d8302 <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
   d5392:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d5396:	3301      	adds	r3, #1
   d5398:	d101      	bne.n	d539e <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   d539a:	f7ff ffc5 	bl	d5328 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d539e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d53a2:	2100      	movs	r1, #0
   d53a4:	b280      	uxth	r0, r0
   d53a6:	f003 fbcc 	bl	d8b42 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   d53aa:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d53ae:	4620      	mov	r0, r4
   d53b0:	f7ff ff84 	bl	d52bc <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   d53b4:	4629      	mov	r1, r5
   d53b6:	4620      	mov	r0, r4
   d53b8:	f7ff ff80 	bl	d52bc <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   d53bc:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d53c0:	2101      	movs	r1, #1
}
   d53c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   d53c6:	b280      	uxth	r0, r0
   d53c8:	f003 bbbb 	b.w	d8b42 <digitalWrite>

000d53cc <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d53cc:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d53ce:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d53d2:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d53d4:	4604      	mov	r4, r0
   d53d6:	460d      	mov	r5, r1
  if (_cs == -1) {
   d53d8:	d11d      	bne.n	d5416 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   d53da:	f003 fc0d 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d53de:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d53e2:	f002 ff87 	bl	d82f4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   d53e6:	f003 fc07 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d53ea:	6803      	ldr	r3, [r0, #0]
   d53ec:	4629      	mov	r1, r5
   d53ee:	689b      	ldr	r3, [r3, #8]
   d53f0:	4798      	blx	r3
    Wire.endTransmission();
   d53f2:	f003 fc01 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d53f6:	f002 ff84 	bl	d8302 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
   d53fa:	f003 fbfd 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d53fe:	7f21      	ldrb	r1, [r4, #28]
   d5400:	2201      	movs	r2, #1
   d5402:	f002 ff70 	bl	d82e6 <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   d5406:	f003 fbf7 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d540a:	6803      	ldr	r3, [r0, #0]
   d540c:	695b      	ldr	r3, [r3, #20]
   d540e:	4798      	blx	r3
   d5410:	b2c5      	uxtb	r5, r0
}
   d5412:	4628      	mov	r0, r5
   d5414:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
   d5416:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d541a:	3301      	adds	r3, #1
   d541c:	d101      	bne.n	d5422 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   d541e:	f7ff ff83 	bl	d5328 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
   d5422:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5426:	2100      	movs	r1, #0
   d5428:	b280      	uxth	r0, r0
   d542a:	f003 fb8a 	bl	d8b42 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   d542e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5432:	4620      	mov	r0, r4
   d5434:	f7ff ff42 	bl	d52bc <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   d5438:	2100      	movs	r1, #0
   d543a:	4620      	mov	r0, r4
   d543c:	f7ff ff3e 	bl	d52bc <_ZN15Adafruit_LIS3DH7spixferEh>
   d5440:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   d5442:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5446:	2101      	movs	r1, #1
   d5448:	b280      	uxth	r0, r0
   d544a:	f003 fb7a 	bl	d8b42 <digitalWrite>
    if (_sck == -1)
   d544e:	e7e0      	b.n	d5412 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

000d5450 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>:
{
   d5450:	b538      	push	{r3, r4, r5, lr}
   d5452:	460d      	mov	r5, r1
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d5454:	2123      	movs	r1, #35	; 0x23
{
   d5456:	4604      	mov	r4, r0
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d5458:	f7ff ffb8 	bl	d53cc <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  r &= ~(0x30);
   d545c:	f020 0230 	bic.w	r2, r0, #48	; 0x30
  r |= range << 4;
   d5460:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d5464:	4620      	mov	r0, r4
   d5466:	b2d2      	uxtb	r2, r2
}
   d5468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d546c:	2123      	movs	r1, #35	; 0x23
   d546e:	f7ff bf71 	b.w	d5354 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d5472 <_ZN15Adafruit_LIS3DH8getRangeEv>:
{
   d5472:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   d5474:	2123      	movs	r1, #35	; 0x23
   d5476:	f7ff ffa9 	bl	d53cc <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   d547a:	f3c0 1001 	ubfx	r0, r0, #4, #2
   d547e:	bd08      	pop	{r3, pc}

000d5480 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
   d5480:	b538      	push	{r3, r4, r5, lr}
   d5482:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d5484:	2120      	movs	r1, #32
{
   d5486:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d5488:	f7ff ffa0 	bl	d53cc <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
   d548c:	f000 020f 	and.w	r2, r0, #15
  ctl1 |= (dataRate << 4);
   d5490:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d5494:	4620      	mov	r0, r4
   d5496:	b2d2      	uxtb	r2, r2
}
   d5498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d549c:	2120      	movs	r1, #32
   d549e:	f7ff bf59 	b.w	d5354 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d54a2 <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   d54a2:	b510      	push	{r4, lr}
   d54a4:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   d54a6:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
   d54a8:	f990 001d 	ldrsb.w	r0, [r0, #29]
   d54ac:	1c42      	adds	r2, r0, #1
   d54ae:	d123      	bne.n	d54f8 <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
   d54b0:	f003 fba2 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d54b4:	f002 fee4 	bl	d8280 <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   d54b8:	210f      	movs	r1, #15
   d54ba:	4620      	mov	r0, r4
   d54bc:	f7ff ff86 	bl	d53cc <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   d54c0:	2833      	cmp	r0, #51	; 0x33
   d54c2:	d13d      	bne.n	d5540 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   d54c4:	2207      	movs	r2, #7
   d54c6:	2120      	movs	r1, #32
   d54c8:	4620      	mov	r0, r4
   d54ca:	f7ff ff43 	bl	d5354 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
   d54ce:	2107      	movs	r1, #7
   d54d0:	4620      	mov	r0, r4
   d54d2:	f7ff ffd5 	bl	d5480 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   d54d6:	2288      	movs	r2, #136	; 0x88
   d54d8:	2123      	movs	r1, #35	; 0x23
   d54da:	4620      	mov	r0, r4
   d54dc:	f7ff ff3a 	bl	d5354 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   d54e0:	2210      	movs	r2, #16
   d54e2:	2122      	movs	r1, #34	; 0x22
   d54e4:	4620      	mov	r0, r4
   d54e6:	f7ff ff35 	bl	d5354 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   d54ea:	4620      	mov	r0, r4
   d54ec:	2280      	movs	r2, #128	; 0x80
   d54ee:	211f      	movs	r1, #31
   d54f0:	f7ff ff30 	bl	d5354 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
   d54f4:	2001      	movs	r0, #1
}
   d54f6:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   d54f8:	2101      	movs	r1, #1
   d54fa:	b280      	uxth	r0, r0
   d54fc:	f003 fb21 	bl	d8b42 <digitalWrite>
    pinMode(_cs, OUTPUT);
   d5500:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5504:	2101      	movs	r1, #1
   d5506:	b280      	uxth	r0, r0
   d5508:	f003 fb0a 	bl	d8b20 <pinMode>
    if (_sck == -1) {
   d550c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5510:	1c43      	adds	r3, r0, #1
   d5512:	d104      	bne.n	d551e <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
   d5514:	f7ff feb6 	bl	d5284 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5518:	f000 fcf4 	bl	d5f04 <_ZN8SPIClass5beginEv>
    }
   d551c:	e7cc      	b.n	d54b8 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
   d551e:	2101      	movs	r1, #1
   d5520:	b280      	uxth	r0, r0
   d5522:	f003 fafd 	bl	d8b20 <pinMode>
      pinMode(_mosi, OUTPUT);
   d5526:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d552a:	2101      	movs	r1, #1
   d552c:	b280      	uxth	r0, r0
   d552e:	f003 faf7 	bl	d8b20 <pinMode>
      pinMode(_miso, INPUT);
   d5532:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d5536:	2100      	movs	r1, #0
   d5538:	b280      	uxth	r0, r0
   d553a:	f003 faf1 	bl	d8b20 <pinMode>
   d553e:	e7bb      	b.n	d54b8 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
   d5540:	2000      	movs	r0, #0
   d5542:	e7d8      	b.n	d54f6 <_ZN15Adafruit_LIS3DH5beginEh+0x54>

000d5544 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
   d5544:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d5546:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d554a:	3301      	adds	r3, #1
void Adafruit_LIS3DH::read(void) {
   d554c:	4604      	mov	r4, r0
  if (_cs == -1) {
   d554e:	d176      	bne.n	d563e <_ZN15Adafruit_LIS3DH4readEv+0xfa>
    Wire.beginTransmission(_i2caddr);
   d5550:	f003 fb52 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d5554:	f994 101c 	ldrsb.w	r1, [r4, #28]
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d5558:	4d5c      	ldr	r5, [pc, #368]	; (d56cc <_ZN15Adafruit_LIS3DH4readEv+0x188>)
    Wire.beginTransmission(_i2caddr);
   d555a:	f002 fecb 	bl	d82f4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   d555e:	f003 fb4b 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d5562:	21a8      	movs	r1, #168	; 0xa8
   d5564:	f7ff fe7a 	bl	d525c <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d5568:	f003 fb46 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d556c:	f002 fec9 	bl	d8302 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
   d5570:	f003 fb42 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d5574:	7f21      	ldrb	r1, [r4, #28]
   d5576:	2206      	movs	r2, #6
   d5578:	f002 feb5 	bl	d82e6 <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d557c:	f003 fb3c 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d5580:	6803      	ldr	r3, [r0, #0]
   d5582:	695b      	ldr	r3, [r3, #20]
   d5584:	4798      	blx	r3
   d5586:	80e0      	strh	r0, [r4, #6]
   d5588:	f003 fb36 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d558c:	6803      	ldr	r3, [r0, #0]
   d558e:	695b      	ldr	r3, [r3, #20]
   d5590:	4798      	blx	r3
   d5592:	88e3      	ldrh	r3, [r4, #6]
   d5594:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d5598:	4318      	orrs	r0, r3
   d559a:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   d559c:	f003 fb2c 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d55a0:	6803      	ldr	r3, [r0, #0]
   d55a2:	695b      	ldr	r3, [r3, #20]
   d55a4:	4798      	blx	r3
   d55a6:	8120      	strh	r0, [r4, #8]
   d55a8:	f003 fb26 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d55ac:	6803      	ldr	r3, [r0, #0]
   d55ae:	695b      	ldr	r3, [r3, #20]
   d55b0:	4798      	blx	r3
   d55b2:	8923      	ldrh	r3, [r4, #8]
   d55b4:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d55b8:	4318      	orrs	r0, r3
   d55ba:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   d55bc:	f003 fb1c 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d55c0:	6803      	ldr	r3, [r0, #0]
   d55c2:	695b      	ldr	r3, [r3, #20]
   d55c4:	4798      	blx	r3
   d55c6:	8160      	strh	r0, [r4, #10]
   d55c8:	f003 fb16 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d55cc:	6803      	ldr	r3, [r0, #0]
   d55ce:	695b      	ldr	r3, [r3, #20]
   d55d0:	4798      	blx	r3
   d55d2:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d55d6:	8965      	ldrh	r5, [r4, #10]
   d55d8:	4328      	orrs	r0, r5
   d55da:	8160      	strh	r0, [r4, #10]
  uint8_t range = getRange();
   d55dc:	4620      	mov	r0, r4
   d55de:	f7ff ff48 	bl	d5472 <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d55e2:	2803      	cmp	r0, #3
   d55e4:	d069      	beq.n	d56ba <_ZN15Adafruit_LIS3DH4readEv+0x176>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d55e6:	2802      	cmp	r0, #2
   d55e8:	d06a      	beq.n	d56c0 <_ZN15Adafruit_LIS3DH4readEv+0x17c>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d55ea:	2801      	cmp	r0, #1
   d55ec:	d06b      	beq.n	d56c6 <_ZN15Adafruit_LIS3DH4readEv+0x182>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   d55ee:	2800      	cmp	r0, #0
   d55f0:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   d55f4:	bf18      	it	ne
   d55f6:	2301      	movne	r3, #1
  x_g = (float)x / divider;
   d55f8:	ee07 3a90 	vmov	s15, r3
   d55fc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d5600:	ee07 3a10 	vmov	s14, r3
   d5604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5608:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d560c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  x_g = (float)x / divider;
   d5610:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   d5614:	ee07 3a10 	vmov	s14, r3
   d5618:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_g = (float)x / divider;
   d561c:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   d5620:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   d5624:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5628:	ee07 3a10 	vmov	s14, r3
   d562c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d5630:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   d5634:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d5638:	edc4 6a05 	vstr	s13, [r4, #20]
}
   d563c:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
   d563e:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d5642:	3301      	adds	r3, #1
   d5644:	d101      	bne.n	d564a <_ZN15Adafruit_LIS3DH4readEv+0x106>
      beginTransaction();
   d5646:	f7ff fe6f 	bl	d5328 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d564a:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d564e:	2100      	movs	r1, #0
   d5650:	b280      	uxth	r0, r0
   d5652:	f003 fa76 	bl	d8b42 <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   d5656:	21e8      	movs	r1, #232	; 0xe8
   d5658:	4620      	mov	r0, r4
   d565a:	f7ff fe2f 	bl	d52bc <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   d565e:	21ff      	movs	r1, #255	; 0xff
   d5660:	4620      	mov	r0, r4
   d5662:	f7ff fe2b 	bl	d52bc <_ZN15Adafruit_LIS3DH7spixferEh>
   d5666:	21ff      	movs	r1, #255	; 0xff
   d5668:	80e0      	strh	r0, [r4, #6]
   d566a:	4620      	mov	r0, r4
   d566c:	f7ff fe26 	bl	d52bc <_ZN15Adafruit_LIS3DH7spixferEh>
   d5670:	88e3      	ldrh	r3, [r4, #6]
   d5672:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d5676:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   d5678:	21ff      	movs	r1, #255	; 0xff
   d567a:	4620      	mov	r0, r4
   d567c:	f7ff fe1e 	bl	d52bc <_ZN15Adafruit_LIS3DH7spixferEh>
   d5680:	21ff      	movs	r1, #255	; 0xff
   d5682:	8120      	strh	r0, [r4, #8]
   d5684:	4620      	mov	r0, r4
   d5686:	f7ff fe19 	bl	d52bc <_ZN15Adafruit_LIS3DH7spixferEh>
   d568a:	8923      	ldrh	r3, [r4, #8]
   d568c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d5690:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   d5692:	21ff      	movs	r1, #255	; 0xff
   d5694:	4620      	mov	r0, r4
   d5696:	f7ff fe11 	bl	d52bc <_ZN15Adafruit_LIS3DH7spixferEh>
   d569a:	21ff      	movs	r1, #255	; 0xff
   d569c:	8160      	strh	r0, [r4, #10]
   d569e:	4620      	mov	r0, r4
   d56a0:	f7ff fe0c 	bl	d52bc <_ZN15Adafruit_LIS3DH7spixferEh>
   d56a4:	8963      	ldrh	r3, [r4, #10]
   d56a6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d56aa:	8160      	strh	r0, [r4, #10]
    digitalWrite(_cs, HIGH);
   d56ac:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d56b0:	2101      	movs	r1, #1
   d56b2:	b280      	uxth	r0, r0
   d56b4:	f003 fa45 	bl	d8b42 <digitalWrite>
    if (_sck == -1)
   d56b8:	e790      	b.n	d55dc <_ZN15Adafruit_LIS3DH4readEv+0x98>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d56ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d56be:	e79b      	b.n	d55f8 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d56c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   d56c4:	e798      	b.n	d55f8 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d56c6:	f641 73fe 	movw	r3, #8190	; 0x1ffe
   d56ca:	e795      	b.n	d55f8 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
   d56cc:	00ffff00 	.word	0x00ffff00

000d56d0 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   d56d0:	460c      	mov	r4, r1
   d56d2:	4605      	mov	r5, r0
   d56d4:	b508      	push	{r3, lr}
  memset(event, 0, sizeof(sensors_event_t));
   d56d6:	2220      	movs	r2, #32
   d56d8:	2100      	movs	r1, #0
   d56da:	1d20      	adds	r0, r4, #4
   d56dc:	f004 f934 	bl	d9948 <memset>
  event->version   = sizeof(sensors_event_t);
   d56e0:	2324      	movs	r3, #36	; 0x24
   d56e2:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d56e4:	69ab      	ldr	r3, [r5, #24]
   d56e6:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   d56e8:	2301      	movs	r3, #1
   d56ea:	60a3      	str	r3, [r4, #8]
  event->timestamp = 0;
   d56ec:	2300      	movs	r3, #0
   d56ee:	6123      	str	r3, [r4, #16]
  read();
   d56f0:	4628      	mov	r0, r5
   d56f2:	f7ff ff27 	bl	d5544 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
   d56f6:	68eb      	ldr	r3, [r5, #12]
   d56f8:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   d56fa:	692b      	ldr	r3, [r5, #16]
   d56fc:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   d56fe:	696b      	ldr	r3, [r5, #20]
   d5700:	61e3      	str	r3, [r4, #28]
	...

000d5704 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b02      	ldr	r3, [pc, #8]	; (d5710 <netdb_freeaddrinfo+0xc>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	689b      	ldr	r3, [r3, #8]
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	00030268 	.word	0x00030268

000d5714 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <netdb_getaddrinfo+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	68db      	ldr	r3, [r3, #12]
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	00030268 	.word	0x00030268

000d5724 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <HAL_Pin_Mode+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	689b      	ldr	r3, [r3, #8]
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	0003022c 	.word	0x0003022c

000d5734 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b02      	ldr	r3, [pc, #8]	; (d5740 <HAL_Get_Pin_Mode+0xc>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	68db      	ldr	r3, [r3, #12]
   d573c:	9301      	str	r3, [sp, #4]
   d573e:	bd08      	pop	{r3, pc}
   d5740:	0003022c 	.word	0x0003022c

000d5744 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5744:	b508      	push	{r3, lr}
   d5746:	4b02      	ldr	r3, [pc, #8]	; (d5750 <HAL_GPIO_Write+0xc>)
   d5748:	681b      	ldr	r3, [r3, #0]
   d574a:	691b      	ldr	r3, [r3, #16]
   d574c:	9301      	str	r3, [sp, #4]
   d574e:	bd08      	pop	{r3, pc}
   d5750:	0003022c 	.word	0x0003022c

000d5754 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5754:	b508      	push	{r3, lr}
   d5756:	4b02      	ldr	r3, [pc, #8]	; (d5760 <HAL_GPIO_Read+0xc>)
   d5758:	681b      	ldr	r3, [r3, #0]
   d575a:	695b      	ldr	r3, [r3, #20]
   d575c:	9301      	str	r3, [sp, #4]
   d575e:	bd08      	pop	{r3, pc}
   d5760:	0003022c 	.word	0x0003022c

000d5764 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b02      	ldr	r3, [pc, #8]	; (d5770 <if_index_to_name+0xc>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	695b      	ldr	r3, [r3, #20]
   d576c:	9301      	str	r3, [sp, #4]
   d576e:	bd08      	pop	{r3, pc}
   d5770:	0003026c 	.word	0x0003026c

000d5774 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b02      	ldr	r3, [pc, #8]	; (d5780 <HAL_RNG_GetRandomNumber+0xc>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	685b      	ldr	r3, [r3, #4]
   d577c:	9301      	str	r3, [sp, #4]
   d577e:	bd08      	pop	{r3, pc}
   d5780:	00030218 	.word	0x00030218

000d5784 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5784:	b508      	push	{r3, lr}
   d5786:	4b02      	ldr	r3, [pc, #8]	; (d5790 <HAL_Delay_Microseconds+0xc>)
   d5788:	681b      	ldr	r3, [r3, #0]
   d578a:	68db      	ldr	r3, [r3, #12]
   d578c:	9301      	str	r3, [sp, #4]
   d578e:	bd08      	pop	{r3, pc}
   d5790:	00030218 	.word	0x00030218

000d5794 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5794:	b508      	push	{r3, lr}
   d5796:	4b02      	ldr	r3, [pc, #8]	; (d57a0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5798:	681b      	ldr	r3, [r3, #0]
   d579a:	695b      	ldr	r3, [r3, #20]
   d579c:	9301      	str	r3, [sp, #4]
   d579e:	bd08      	pop	{r3, pc}
   d57a0:	00030218 	.word	0x00030218

000d57a4 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d57a4:	b508      	push	{r3, lr}
   d57a6:	4b02      	ldr	r3, [pc, #8]	; (d57b0 <HAL_EEPROM_Init+0xc>)
   d57a8:	681b      	ldr	r3, [r3, #0]
   d57aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d57ac:	9301      	str	r3, [sp, #4]
   d57ae:	bd08      	pop	{r3, pc}
   d57b0:	00030218 	.word	0x00030218

000d57b4 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d57b4:	b508      	push	{r3, lr}
   d57b6:	4b02      	ldr	r3, [pc, #8]	; (d57c0 <HAL_EEPROM_Get+0xc>)
   d57b8:	681b      	ldr	r3, [r3, #0]
   d57ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d57bc:	9301      	str	r3, [sp, #4]
   d57be:	bd08      	pop	{r3, pc}
   d57c0:	00030218 	.word	0x00030218

000d57c4 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d57c4:	b508      	push	{r3, lr}
   d57c6:	4b02      	ldr	r3, [pc, #8]	; (d57d0 <HAL_EEPROM_Put+0xc>)
   d57c8:	681b      	ldr	r3, [r3, #0]
   d57ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d57cc:	9301      	str	r3, [sp, #4]
   d57ce:	bd08      	pop	{r3, pc}
   d57d0:	00030218 	.word	0x00030218

000d57d4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d57d4:	b508      	push	{r3, lr}
   d57d6:	4b02      	ldr	r3, [pc, #8]	; (d57e0 <hal_rtc_time_is_valid+0xc>)
   d57d8:	681b      	ldr	r3, [r3, #0]
   d57da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d57dc:	9301      	str	r3, [sp, #4]
   d57de:	bd08      	pop	{r3, pc}
   d57e0:	00030218 	.word	0x00030218

000d57e4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d57e4:	b508      	push	{r3, lr}
   d57e6:	4b02      	ldr	r3, [pc, #8]	; (d57f0 <hal_rtc_get_time+0xc>)
   d57e8:	681b      	ldr	r3, [r3, #0]
   d57ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d57ec:	9301      	str	r3, [sp, #4]
   d57ee:	bd08      	pop	{r3, pc}
   d57f0:	00030218 	.word	0x00030218

000d57f4 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d57f4:	b508      	push	{r3, lr}
   d57f6:	4b02      	ldr	r3, [pc, #8]	; (d5800 <hal_ble_stack_init+0xc>)
   d57f8:	681b      	ldr	r3, [r3, #0]
   d57fa:	689b      	ldr	r3, [r3, #8]
   d57fc:	9301      	str	r3, [sp, #4]
   d57fe:	bd08      	pop	{r3, pc}
   d5800:	00030278 	.word	0x00030278

000d5804 <hal_ble_stack_deinit>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
   d5804:	b508      	push	{r3, lr}
   d5806:	4b02      	ldr	r3, [pc, #8]	; (d5810 <hal_ble_stack_deinit+0xc>)
   d5808:	681b      	ldr	r3, [r3, #0]
   d580a:	68db      	ldr	r3, [r3, #12]
   d580c:	9301      	str	r3, [sp, #4]
   d580e:	bd08      	pop	{r3, pc}
   d5810:	00030278 	.word	0x00030278

000d5814 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d5814:	b508      	push	{r3, lr}
   d5816:	4b02      	ldr	r3, [pc, #8]	; (d5820 <hal_ble_gap_set_advertising_data+0xc>)
   d5818:	681b      	ldr	r3, [r3, #0]
   d581a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d581c:	9301      	str	r3, [sp, #4]
   d581e:	bd08      	pop	{r3, pc}
   d5820:	00030278 	.word	0x00030278

000d5824 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d5824:	b508      	push	{r3, lr}
   d5826:	4b02      	ldr	r3, [pc, #8]	; (d5830 <hal_ble_gap_set_scan_response_data+0xc>)
   d5828:	681b      	ldr	r3, [r3, #0]
   d582a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d582c:	9301      	str	r3, [sp, #4]
   d582e:	bd08      	pop	{r3, pc}
   d5830:	00030278 	.word	0x00030278

000d5834 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d5834:	b508      	push	{r3, lr}
   d5836:	4b02      	ldr	r3, [pc, #8]	; (d5840 <hal_ble_gap_start_advertising+0xc>)
   d5838:	681b      	ldr	r3, [r3, #0]
   d583a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d583c:	9301      	str	r3, [sp, #4]
   d583e:	bd08      	pop	{r3, pc}
   d5840:	00030278 	.word	0x00030278

000d5844 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d5844:	b508      	push	{r3, lr}
   d5846:	4b03      	ldr	r3, [pc, #12]	; (d5854 <hal_ble_gap_disconnect+0x10>)
   d5848:	681b      	ldr	r3, [r3, #0]
   d584a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d584e:	9301      	str	r3, [sp, #4]
   d5850:	bd08      	pop	{r3, pc}
   d5852:	0000      	.short	0x0000
   d5854:	00030278 	.word	0x00030278

000d5858 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d5858:	b508      	push	{r3, lr}
   d585a:	4b03      	ldr	r3, [pc, #12]	; (d5868 <hal_ble_gatt_server_add_service+0x10>)
   d585c:	681b      	ldr	r3, [r3, #0]
   d585e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d5862:	9301      	str	r3, [sp, #4]
   d5864:	bd08      	pop	{r3, pc}
   d5866:	0000      	.short	0x0000
   d5868:	00030278 	.word	0x00030278

000d586c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d586c:	b508      	push	{r3, lr}
   d586e:	4b03      	ldr	r3, [pc, #12]	; (d587c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d5870:	681b      	ldr	r3, [r3, #0]
   d5872:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d5876:	9301      	str	r3, [sp, #4]
   d5878:	bd08      	pop	{r3, pc}
   d587a:	0000      	.short	0x0000
   d587c:	00030278 	.word	0x00030278

000d5880 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5880:	b508      	push	{r3, lr}
   d5882:	4b03      	ldr	r3, [pc, #12]	; (d5890 <hal_ble_gatt_client_write_with_response+0x10>)
   d5884:	681b      	ldr	r3, [r3, #0]
   d5886:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d588a:	9301      	str	r3, [sp, #4]
   d588c:	bd08      	pop	{r3, pc}
   d588e:	0000      	.short	0x0000
   d5890:	00030278 	.word	0x00030278

000d5894 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5894:	b508      	push	{r3, lr}
   d5896:	4b03      	ldr	r3, [pc, #12]	; (d58a4 <hal_ble_gatt_client_write_without_response+0x10>)
   d5898:	681b      	ldr	r3, [r3, #0]
   d589a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d589e:	9301      	str	r3, [sp, #4]
   d58a0:	bd08      	pop	{r3, pc}
   d58a2:	0000      	.short	0x0000
   d58a4:	00030278 	.word	0x00030278

000d58a8 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   d58a8:	b508      	push	{r3, lr}
   d58aa:	4b03      	ldr	r3, [pc, #12]	; (d58b8 <hal_ble_gap_get_connection_info+0x10>)
   d58ac:	681b      	ldr	r3, [r3, #0]
   d58ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   d58b2:	9301      	str	r3, [sp, #4]
   d58b4:	bd08      	pop	{r3, pc}
   d58b6:	0000      	.short	0x0000
   d58b8:	00030278 	.word	0x00030278

000d58bc <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d58bc:	b508      	push	{r3, lr}
   d58be:	4b03      	ldr	r3, [pc, #12]	; (d58cc <hal_ble_gatt_server_add_characteristic+0x10>)
   d58c0:	681b      	ldr	r3, [r3, #0]
   d58c2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d58c6:	9301      	str	r3, [sp, #4]
   d58c8:	bd08      	pop	{r3, pc}
   d58ca:	0000      	.short	0x0000
   d58cc:	00030278 	.word	0x00030278

000d58d0 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d58d0:	b508      	push	{r3, lr}
   d58d2:	4b03      	ldr	r3, [pc, #12]	; (d58e0 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d58d4:	681b      	ldr	r3, [r3, #0]
   d58d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d58da:	9301      	str	r3, [sp, #4]
   d58dc:	bd08      	pop	{r3, pc}
   d58de:	0000      	.short	0x0000
   d58e0:	00030278 	.word	0x00030278

000d58e4 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d58e4:	b508      	push	{r3, lr}
   d58e6:	4b03      	ldr	r3, [pc, #12]	; (d58f4 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d58e8:	681b      	ldr	r3, [r3, #0]
   d58ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d58ee:	9301      	str	r3, [sp, #4]
   d58f0:	bd08      	pop	{r3, pc}
   d58f2:	0000      	.short	0x0000
   d58f4:	00030278 	.word	0x00030278

000d58f8 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d58f8:	b508      	push	{r3, lr}
   d58fa:	4b03      	ldr	r3, [pc, #12]	; (d5908 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d58fc:	681b      	ldr	r3, [r3, #0]
   d58fe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d5902:	9301      	str	r3, [sp, #4]
   d5904:	bd08      	pop	{r3, pc}
   d5906:	0000      	.short	0x0000
   d5908:	00030278 	.word	0x00030278

000d590c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d590c:	b508      	push	{r3, lr}
   d590e:	4b02      	ldr	r3, [pc, #8]	; (d5918 <os_mutex_recursive_create+0xc>)
   d5910:	681b      	ldr	r3, [r3, #0]
   d5912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5914:	9301      	str	r3, [sp, #4]
   d5916:	bd08      	pop	{r3, pc}
   d5918:	00030248 	.word	0x00030248

000d591c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d591c:	b508      	push	{r3, lr}
   d591e:	4b02      	ldr	r3, [pc, #8]	; (d5928 <os_mutex_recursive_destroy+0xc>)
   d5920:	681b      	ldr	r3, [r3, #0]
   d5922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5924:	9301      	str	r3, [sp, #4]
   d5926:	bd08      	pop	{r3, pc}
   d5928:	00030248 	.word	0x00030248

000d592c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d592c:	b508      	push	{r3, lr}
   d592e:	4b02      	ldr	r3, [pc, #8]	; (d5938 <os_mutex_recursive_lock+0xc>)
   d5930:	681b      	ldr	r3, [r3, #0]
   d5932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5934:	9301      	str	r3, [sp, #4]
   d5936:	bd08      	pop	{r3, pc}
   d5938:	00030248 	.word	0x00030248

000d593c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d593c:	b508      	push	{r3, lr}
   d593e:	4b02      	ldr	r3, [pc, #8]	; (d5948 <os_mutex_recursive_unlock+0xc>)
   d5940:	681b      	ldr	r3, [r3, #0]
   d5942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5944:	9301      	str	r3, [sp, #4]
   d5946:	bd08      	pop	{r3, pc}
   d5948:	00030248 	.word	0x00030248

000d594c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d594c:	b508      	push	{r3, lr}
   d594e:	4b02      	ldr	r3, [pc, #8]	; (d5958 <inet_inet_ntop+0xc>)
   d5950:	681b      	ldr	r3, [r3, #0]
   d5952:	695b      	ldr	r3, [r3, #20]
   d5954:	9301      	str	r3, [sp, #4]
   d5956:	bd08      	pop	{r3, pc}
   d5958:	00030264 	.word	0x00030264

000d595c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d595c:	b508      	push	{r3, lr}
   d595e:	4b02      	ldr	r3, [pc, #8]	; (d5968 <inet_htonl+0xc>)
   d5960:	681b      	ldr	r3, [r3, #0]
   d5962:	6a1b      	ldr	r3, [r3, #32]
   d5964:	9301      	str	r3, [sp, #4]
   d5966:	bd08      	pop	{r3, pc}
   d5968:	00030264 	.word	0x00030264

000d596c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d596c:	b508      	push	{r3, lr}
   d596e:	4b02      	ldr	r3, [pc, #8]	; (d5978 <inet_htons+0xc>)
   d5970:	681b      	ldr	r3, [r3, #0]
   d5972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5974:	9301      	str	r3, [sp, #4]
   d5976:	bd08      	pop	{r3, pc}
   d5978:	00030264 	.word	0x00030264

000d597c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d597c:	b508      	push	{r3, lr}
   d597e:	4b02      	ldr	r3, [pc, #8]	; (d5988 <hal_usart_init+0xc>)
   d5980:	681b      	ldr	r3, [r3, #0]
   d5982:	681b      	ldr	r3, [r3, #0]
   d5984:	9301      	str	r3, [sp, #4]
   d5986:	bd08      	pop	{r3, pc}
   d5988:	0003023c 	.word	0x0003023c

000d598c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d598c:	b508      	push	{r3, lr}
   d598e:	4b02      	ldr	r3, [pc, #8]	; (d5998 <hal_usart_write+0xc>)
   d5990:	681b      	ldr	r3, [r3, #0]
   d5992:	68db      	ldr	r3, [r3, #12]
   d5994:	9301      	str	r3, [sp, #4]
   d5996:	bd08      	pop	{r3, pc}
   d5998:	0003023c 	.word	0x0003023c

000d599c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d599c:	b508      	push	{r3, lr}
   d599e:	4b02      	ldr	r3, [pc, #8]	; (d59a8 <hal_usart_available+0xc>)
   d59a0:	681b      	ldr	r3, [r3, #0]
   d59a2:	691b      	ldr	r3, [r3, #16]
   d59a4:	9301      	str	r3, [sp, #4]
   d59a6:	bd08      	pop	{r3, pc}
   d59a8:	0003023c 	.word	0x0003023c

000d59ac <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d59ac:	b508      	push	{r3, lr}
   d59ae:	4b02      	ldr	r3, [pc, #8]	; (d59b8 <hal_usart_read+0xc>)
   d59b0:	681b      	ldr	r3, [r3, #0]
   d59b2:	695b      	ldr	r3, [r3, #20]
   d59b4:	9301      	str	r3, [sp, #4]
   d59b6:	bd08      	pop	{r3, pc}
   d59b8:	0003023c 	.word	0x0003023c

000d59bc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d59bc:	b508      	push	{r3, lr}
   d59be:	4b02      	ldr	r3, [pc, #8]	; (d59c8 <hal_usart_peek+0xc>)
   d59c0:	681b      	ldr	r3, [r3, #0]
   d59c2:	699b      	ldr	r3, [r3, #24]
   d59c4:	9301      	str	r3, [sp, #4]
   d59c6:	bd08      	pop	{r3, pc}
   d59c8:	0003023c 	.word	0x0003023c

000d59cc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d59cc:	b508      	push	{r3, lr}
   d59ce:	4b02      	ldr	r3, [pc, #8]	; (d59d8 <hal_usart_flush+0xc>)
   d59d0:	681b      	ldr	r3, [r3, #0]
   d59d2:	69db      	ldr	r3, [r3, #28]
   d59d4:	9301      	str	r3, [sp, #4]
   d59d6:	bd08      	pop	{r3, pc}
   d59d8:	0003023c 	.word	0x0003023c

000d59dc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d59dc:	b508      	push	{r3, lr}
   d59de:	4b02      	ldr	r3, [pc, #8]	; (d59e8 <hal_usart_is_enabled+0xc>)
   d59e0:	681b      	ldr	r3, [r3, #0]
   d59e2:	6a1b      	ldr	r3, [r3, #32]
   d59e4:	9301      	str	r3, [sp, #4]
   d59e6:	bd08      	pop	{r3, pc}
   d59e8:	0003023c 	.word	0x0003023c

000d59ec <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d59ec:	b508      	push	{r3, lr}
   d59ee:	4b02      	ldr	r3, [pc, #8]	; (d59f8 <hal_usart_available_data_for_write+0xc>)
   d59f0:	681b      	ldr	r3, [r3, #0]
   d59f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d59f4:	9301      	str	r3, [sp, #4]
   d59f6:	bd08      	pop	{r3, pc}
   d59f8:	0003023c 	.word	0x0003023c

000d59fc <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d59fc:	b508      	push	{r3, lr}
   d59fe:	4b02      	ldr	r3, [pc, #8]	; (d5a08 <hal_i2c_begin+0xc>)
   d5a00:	681b      	ldr	r3, [r3, #0]
   d5a02:	68db      	ldr	r3, [r3, #12]
   d5a04:	9301      	str	r3, [sp, #4]
   d5a06:	bd08      	pop	{r3, pc}
   d5a08:	00030228 	.word	0x00030228

000d5a0c <hal_i2c_end>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
   d5a0c:	b508      	push	{r3, lr}
   d5a0e:	4b02      	ldr	r3, [pc, #8]	; (d5a18 <hal_i2c_end+0xc>)
   d5a10:	681b      	ldr	r3, [r3, #0]
   d5a12:	691b      	ldr	r3, [r3, #16]
   d5a14:	9301      	str	r3, [sp, #4]
   d5a16:	bd08      	pop	{r3, pc}
   d5a18:	00030228 	.word	0x00030228

000d5a1c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5a1c:	b508      	push	{r3, lr}
   d5a1e:	4b02      	ldr	r3, [pc, #8]	; (d5a28 <hal_i2c_begin_transmission+0xc>)
   d5a20:	681b      	ldr	r3, [r3, #0]
   d5a22:	699b      	ldr	r3, [r3, #24]
   d5a24:	9301      	str	r3, [sp, #4]
   d5a26:	bd08      	pop	{r3, pc}
   d5a28:	00030228 	.word	0x00030228

000d5a2c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5a2c:	b508      	push	{r3, lr}
   d5a2e:	4b02      	ldr	r3, [pc, #8]	; (d5a38 <hal_i2c_end_transmission+0xc>)
   d5a30:	681b      	ldr	r3, [r3, #0]
   d5a32:	69db      	ldr	r3, [r3, #28]
   d5a34:	9301      	str	r3, [sp, #4]
   d5a36:	bd08      	pop	{r3, pc}
   d5a38:	00030228 	.word	0x00030228

000d5a3c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5a3c:	b508      	push	{r3, lr}
   d5a3e:	4b02      	ldr	r3, [pc, #8]	; (d5a48 <hal_i2c_write+0xc>)
   d5a40:	681b      	ldr	r3, [r3, #0]
   d5a42:	6a1b      	ldr	r3, [r3, #32]
   d5a44:	9301      	str	r3, [sp, #4]
   d5a46:	bd08      	pop	{r3, pc}
   d5a48:	00030228 	.word	0x00030228

000d5a4c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5a4c:	b508      	push	{r3, lr}
   d5a4e:	4b02      	ldr	r3, [pc, #8]	; (d5a58 <hal_i2c_available+0xc>)
   d5a50:	681b      	ldr	r3, [r3, #0]
   d5a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a54:	9301      	str	r3, [sp, #4]
   d5a56:	bd08      	pop	{r3, pc}
   d5a58:	00030228 	.word	0x00030228

000d5a5c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5a5c:	b508      	push	{r3, lr}
   d5a5e:	4b02      	ldr	r3, [pc, #8]	; (d5a68 <hal_i2c_read+0xc>)
   d5a60:	681b      	ldr	r3, [r3, #0]
   d5a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5a64:	9301      	str	r3, [sp, #4]
   d5a66:	bd08      	pop	{r3, pc}
   d5a68:	00030228 	.word	0x00030228

000d5a6c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5a6c:	b508      	push	{r3, lr}
   d5a6e:	4b02      	ldr	r3, [pc, #8]	; (d5a78 <hal_i2c_peek+0xc>)
   d5a70:	681b      	ldr	r3, [r3, #0]
   d5a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5a74:	9301      	str	r3, [sp, #4]
   d5a76:	bd08      	pop	{r3, pc}
   d5a78:	00030228 	.word	0x00030228

000d5a7c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5a7c:	b508      	push	{r3, lr}
   d5a7e:	4b02      	ldr	r3, [pc, #8]	; (d5a88 <hal_i2c_flush+0xc>)
   d5a80:	681b      	ldr	r3, [r3, #0]
   d5a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a84:	9301      	str	r3, [sp, #4]
   d5a86:	bd08      	pop	{r3, pc}
   d5a88:	00030228 	.word	0x00030228

000d5a8c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5a8c:	b508      	push	{r3, lr}
   d5a8e:	4b02      	ldr	r3, [pc, #8]	; (d5a98 <hal_i2c_is_enabled+0xc>)
   d5a90:	681b      	ldr	r3, [r3, #0]
   d5a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5a94:	9301      	str	r3, [sp, #4]
   d5a96:	bd08      	pop	{r3, pc}
   d5a98:	00030228 	.word	0x00030228

000d5a9c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5a9c:	b508      	push	{r3, lr}
   d5a9e:	4b02      	ldr	r3, [pc, #8]	; (d5aa8 <hal_i2c_init+0xc>)
   d5aa0:	681b      	ldr	r3, [r3, #0]
   d5aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5aa4:	9301      	str	r3, [sp, #4]
   d5aa6:	bd08      	pop	{r3, pc}
   d5aa8:	00030228 	.word	0x00030228

000d5aac <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5aac:	b508      	push	{r3, lr}
   d5aae:	4b02      	ldr	r3, [pc, #8]	; (d5ab8 <hal_i2c_request_ex+0xc>)
   d5ab0:	681b      	ldr	r3, [r3, #0]
   d5ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5ab4:	9301      	str	r3, [sp, #4]
   d5ab6:	bd08      	pop	{r3, pc}
   d5ab8:	00030228 	.word	0x00030228

000d5abc <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5abc:	b508      	push	{r3, lr}
   d5abe:	4b02      	ldr	r3, [pc, #8]	; (d5ac8 <sock_setsockopt+0xc>)
   d5ac0:	681b      	ldr	r3, [r3, #0]
   d5ac2:	699b      	ldr	r3, [r3, #24]
   d5ac4:	9301      	str	r3, [sp, #4]
   d5ac6:	bd08      	pop	{r3, pc}
   d5ac8:	00030238 	.word	0x00030238

000d5acc <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5acc:	b508      	push	{r3, lr}
   d5ace:	4b02      	ldr	r3, [pc, #8]	; (d5ad8 <sock_close+0xc>)
   d5ad0:	681b      	ldr	r3, [r3, #0]
   d5ad2:	69db      	ldr	r3, [r3, #28]
   d5ad4:	9301      	str	r3, [sp, #4]
   d5ad6:	bd08      	pop	{r3, pc}
   d5ad8:	00030238 	.word	0x00030238

000d5adc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5adc:	b508      	push	{r3, lr}
   d5ade:	4b02      	ldr	r3, [pc, #8]	; (d5ae8 <sock_connect+0xc>)
   d5ae0:	681b      	ldr	r3, [r3, #0]
   d5ae2:	6a1b      	ldr	r3, [r3, #32]
   d5ae4:	9301      	str	r3, [sp, #4]
   d5ae6:	bd08      	pop	{r3, pc}
   d5ae8:	00030238 	.word	0x00030238

000d5aec <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5aec:	b508      	push	{r3, lr}
   d5aee:	4b02      	ldr	r3, [pc, #8]	; (d5af8 <sock_recv+0xc>)
   d5af0:	681b      	ldr	r3, [r3, #0]
   d5af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5af4:	9301      	str	r3, [sp, #4]
   d5af6:	bd08      	pop	{r3, pc}
   d5af8:	00030238 	.word	0x00030238

000d5afc <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5afc:	b508      	push	{r3, lr}
   d5afe:	4b02      	ldr	r3, [pc, #8]	; (d5b08 <sock_send+0xc>)
   d5b00:	681b      	ldr	r3, [r3, #0]
   d5b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b04:	9301      	str	r3, [sp, #4]
   d5b06:	bd08      	pop	{r3, pc}
   d5b08:	00030238 	.word	0x00030238

000d5b0c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5b0c:	b508      	push	{r3, lr}
   d5b0e:	4b02      	ldr	r3, [pc, #8]	; (d5b18 <sock_socket+0xc>)
   d5b10:	681b      	ldr	r3, [r3, #0]
   d5b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5b14:	9301      	str	r3, [sp, #4]
   d5b16:	bd08      	pop	{r3, pc}
   d5b18:	00030238 	.word	0x00030238

000d5b1c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5b1c:	b508      	push	{r3, lr}
   d5b1e:	4b02      	ldr	r3, [pc, #8]	; (d5b28 <hal_spi_begin+0xc>)
   d5b20:	681b      	ldr	r3, [r3, #0]
   d5b22:	681b      	ldr	r3, [r3, #0]
   d5b24:	9301      	str	r3, [sp, #4]
   d5b26:	bd08      	pop	{r3, pc}
   d5b28:	00030230 	.word	0x00030230

000d5b2c <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d5b2c:	b508      	push	{r3, lr}
   d5b2e:	4b02      	ldr	r3, [pc, #8]	; (d5b38 <hal_spi_set_bit_order+0xc>)
   d5b30:	681b      	ldr	r3, [r3, #0]
   d5b32:	689b      	ldr	r3, [r3, #8]
   d5b34:	9301      	str	r3, [sp, #4]
   d5b36:	bd08      	pop	{r3, pc}
   d5b38:	00030230 	.word	0x00030230

000d5b3c <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d5b3c:	b508      	push	{r3, lr}
   d5b3e:	4b02      	ldr	r3, [pc, #8]	; (d5b48 <hal_spi_set_data_mode+0xc>)
   d5b40:	681b      	ldr	r3, [r3, #0]
   d5b42:	68db      	ldr	r3, [r3, #12]
   d5b44:	9301      	str	r3, [sp, #4]
   d5b46:	bd08      	pop	{r3, pc}
   d5b48:	00030230 	.word	0x00030230

000d5b4c <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d5b4c:	b508      	push	{r3, lr}
   d5b4e:	4b02      	ldr	r3, [pc, #8]	; (d5b58 <hal_spi_set_clock_divider+0xc>)
   d5b50:	681b      	ldr	r3, [r3, #0]
   d5b52:	691b      	ldr	r3, [r3, #16]
   d5b54:	9301      	str	r3, [sp, #4]
   d5b56:	bd08      	pop	{r3, pc}
   d5b58:	00030230 	.word	0x00030230

000d5b5c <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5b5c:	b508      	push	{r3, lr}
   d5b5e:	4b02      	ldr	r3, [pc, #8]	; (d5b68 <hal_spi_transfer+0xc>)
   d5b60:	681b      	ldr	r3, [r3, #0]
   d5b62:	695b      	ldr	r3, [r3, #20]
   d5b64:	9301      	str	r3, [sp, #4]
   d5b66:	bd08      	pop	{r3, pc}
   d5b68:	00030230 	.word	0x00030230

000d5b6c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5b6c:	b508      	push	{r3, lr}
   d5b6e:	4b02      	ldr	r3, [pc, #8]	; (d5b78 <hal_spi_init+0xc>)
   d5b70:	681b      	ldr	r3, [r3, #0]
   d5b72:	69db      	ldr	r3, [r3, #28]
   d5b74:	9301      	str	r3, [sp, #4]
   d5b76:	bd08      	pop	{r3, pc}
   d5b78:	00030230 	.word	0x00030230

000d5b7c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5b7c:	b508      	push	{r3, lr}
   d5b7e:	4b02      	ldr	r3, [pc, #8]	; (d5b88 <hal_spi_is_enabled+0xc>)
   d5b80:	681b      	ldr	r3, [r3, #0]
   d5b82:	6a1b      	ldr	r3, [r3, #32]
   d5b84:	9301      	str	r3, [sp, #4]
   d5b86:	bd08      	pop	{r3, pc}
   d5b88:	00030230 	.word	0x00030230

000d5b8c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5b8c:	b508      	push	{r3, lr}
   d5b8e:	4b02      	ldr	r3, [pc, #8]	; (d5b98 <hal_spi_info+0xc>)
   d5b90:	681b      	ldr	r3, [r3, #0]
   d5b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5b94:	9301      	str	r3, [sp, #4]
   d5b96:	bd08      	pop	{r3, pc}
   d5b98:	00030230 	.word	0x00030230

000d5b9c <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5b9c:	b508      	push	{r3, lr}
   d5b9e:	4b02      	ldr	r3, [pc, #8]	; (d5ba8 <hal_spi_acquire+0xc>)
   d5ba0:	681b      	ldr	r3, [r3, #0]
   d5ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5ba4:	9301      	str	r3, [sp, #4]
   d5ba6:	bd08      	pop	{r3, pc}
   d5ba8:	00030230 	.word	0x00030230

000d5bac <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5bac:	b508      	push	{r3, lr}
   d5bae:	4b02      	ldr	r3, [pc, #8]	; (d5bb8 <hal_spi_release+0xc>)
   d5bb0:	681b      	ldr	r3, [r3, #0]
   d5bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5bb4:	9301      	str	r3, [sp, #4]
   d5bb6:	bd08      	pop	{r3, pc}
   d5bb8:	00030230 	.word	0x00030230

000d5bbc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5bbc:	b508      	push	{r3, lr}
   d5bbe:	4b02      	ldr	r3, [pc, #8]	; (d5bc8 <HAL_USB_USART_Init+0xc>)
   d5bc0:	681b      	ldr	r3, [r3, #0]
   d5bc2:	681b      	ldr	r3, [r3, #0]
   d5bc4:	9301      	str	r3, [sp, #4]
   d5bc6:	bd08      	pop	{r3, pc}
   d5bc8:	0003024c 	.word	0x0003024c

000d5bcc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5bcc:	b508      	push	{r3, lr}
   d5bce:	4b02      	ldr	r3, [pc, #8]	; (d5bd8 <HAL_USB_USART_Begin+0xc>)
   d5bd0:	681b      	ldr	r3, [r3, #0]
   d5bd2:	685b      	ldr	r3, [r3, #4]
   d5bd4:	9301      	str	r3, [sp, #4]
   d5bd6:	bd08      	pop	{r3, pc}
   d5bd8:	0003024c 	.word	0x0003024c

000d5bdc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5bdc:	b508      	push	{r3, lr}
   d5bde:	4b02      	ldr	r3, [pc, #8]	; (d5be8 <HAL_USB_USART_Available_Data+0xc>)
   d5be0:	681b      	ldr	r3, [r3, #0]
   d5be2:	691b      	ldr	r3, [r3, #16]
   d5be4:	9301      	str	r3, [sp, #4]
   d5be6:	bd08      	pop	{r3, pc}
   d5be8:	0003024c 	.word	0x0003024c

000d5bec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5bec:	b508      	push	{r3, lr}
   d5bee:	4b02      	ldr	r3, [pc, #8]	; (d5bf8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5bf0:	681b      	ldr	r3, [r3, #0]
   d5bf2:	695b      	ldr	r3, [r3, #20]
   d5bf4:	9301      	str	r3, [sp, #4]
   d5bf6:	bd08      	pop	{r3, pc}
   d5bf8:	0003024c 	.word	0x0003024c

000d5bfc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5bfc:	b508      	push	{r3, lr}
   d5bfe:	4b02      	ldr	r3, [pc, #8]	; (d5c08 <HAL_USB_USART_Receive_Data+0xc>)
   d5c00:	681b      	ldr	r3, [r3, #0]
   d5c02:	699b      	ldr	r3, [r3, #24]
   d5c04:	9301      	str	r3, [sp, #4]
   d5c06:	bd08      	pop	{r3, pc}
   d5c08:	0003024c 	.word	0x0003024c

000d5c0c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5c0c:	b508      	push	{r3, lr}
   d5c0e:	4b02      	ldr	r3, [pc, #8]	; (d5c18 <HAL_USB_USART_Send_Data+0xc>)
   d5c10:	681b      	ldr	r3, [r3, #0]
   d5c12:	69db      	ldr	r3, [r3, #28]
   d5c14:	9301      	str	r3, [sp, #4]
   d5c16:	bd08      	pop	{r3, pc}
   d5c18:	0003024c 	.word	0x0003024c

000d5c1c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5c1c:	b508      	push	{r3, lr}
   d5c1e:	4b02      	ldr	r3, [pc, #8]	; (d5c28 <HAL_USB_USART_Flush_Data+0xc>)
   d5c20:	681b      	ldr	r3, [r3, #0]
   d5c22:	6a1b      	ldr	r3, [r3, #32]
   d5c24:	9301      	str	r3, [sp, #4]
   d5c26:	bd08      	pop	{r3, pc}
   d5c28:	0003024c 	.word	0x0003024c

000d5c2c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5c2c:	b508      	push	{r3, lr}
   d5c2e:	4b02      	ldr	r3, [pc, #8]	; (d5c38 <panic_+0xc>)
   d5c30:	681b      	ldr	r3, [r3, #0]
   d5c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c34:	9301      	str	r3, [sp, #4]
   d5c36:	bd08      	pop	{r3, pc}
   d5c38:	00030260 	.word	0x00030260

000d5c3c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5c3c:	b508      	push	{r3, lr}
   d5c3e:	4b02      	ldr	r3, [pc, #8]	; (d5c48 <log_message+0xc>)
   d5c40:	681b      	ldr	r3, [r3, #0]
   d5c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5c44:	9301      	str	r3, [sp, #4]
   d5c46:	bd08      	pop	{r3, pc}
   d5c48:	00030260 	.word	0x00030260

000d5c4c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5c4c:	b508      	push	{r3, lr}
   d5c4e:	4b02      	ldr	r3, [pc, #8]	; (d5c58 <system_mode+0xc>)
   d5c50:	681b      	ldr	r3, [r3, #0]
   d5c52:	681b      	ldr	r3, [r3, #0]
   d5c54:	9301      	str	r3, [sp, #4]
   d5c56:	bd08      	pop	{r3, pc}
   d5c58:	00030220 	.word	0x00030220

000d5c5c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5c5c:	b508      	push	{r3, lr}
   d5c5e:	4b02      	ldr	r3, [pc, #8]	; (d5c68 <set_system_mode+0xc>)
   d5c60:	681b      	ldr	r3, [r3, #0]
   d5c62:	685b      	ldr	r3, [r3, #4]
   d5c64:	9301      	str	r3, [sp, #4]
   d5c66:	bd08      	pop	{r3, pc}
   d5c68:	00030220 	.word	0x00030220

000d5c6c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5c6c:	b508      	push	{r3, lr}
   d5c6e:	4b02      	ldr	r3, [pc, #8]	; (d5c78 <system_delay_ms+0xc>)
   d5c70:	681b      	ldr	r3, [r3, #0]
   d5c72:	695b      	ldr	r3, [r3, #20]
   d5c74:	9301      	str	r3, [sp, #4]
   d5c76:	bd08      	pop	{r3, pc}
   d5c78:	00030220 	.word	0x00030220

000d5c7c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5c7c:	b508      	push	{r3, lr}
   d5c7e:	4b02      	ldr	r3, [pc, #8]	; (d5c88 <system_thread_get_state+0xc>)
   d5c80:	681b      	ldr	r3, [r3, #0]
   d5c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5c84:	9301      	str	r3, [sp, #4]
   d5c86:	bd08      	pop	{r3, pc}
   d5c88:	00030220 	.word	0x00030220

000d5c8c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5c8c:	b508      	push	{r3, lr}
   d5c8e:	4b03      	ldr	r3, [pc, #12]	; (d5c9c <system_ctrl_set_app_request_handler+0x10>)
   d5c90:	681b      	ldr	r3, [r3, #0]
   d5c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5c96:	9301      	str	r3, [sp, #4]
   d5c98:	bd08      	pop	{r3, pc}
   d5c9a:	0000      	.short	0x0000
   d5c9c:	00030220 	.word	0x00030220

000d5ca0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5ca0:	b508      	push	{r3, lr}
   d5ca2:	4b03      	ldr	r3, [pc, #12]	; (d5cb0 <system_ctrl_set_result+0x10>)
   d5ca4:	681b      	ldr	r3, [r3, #0]
   d5ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5caa:	9301      	str	r3, [sp, #4]
   d5cac:	bd08      	pop	{r3, pc}
   d5cae:	0000      	.short	0x0000
   d5cb0:	00030220 	.word	0x00030220

000d5cb4 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d5cb4:	b508      	push	{r3, lr}
   d5cb6:	4b03      	ldr	r3, [pc, #12]	; (d5cc4 <system_sleep_ext+0x10>)
   d5cb8:	681b      	ldr	r3, [r3, #0]
   d5cba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d5cbe:	9301      	str	r3, [sp, #4]
   d5cc0:	bd08      	pop	{r3, pc}
   d5cc2:	0000      	.short	0x0000
   d5cc4:	00030220 	.word	0x00030220

000d5cc8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5cc8:	b508      	push	{r3, lr}
   d5cca:	4b02      	ldr	r3, [pc, #8]	; (d5cd4 <network_connect+0xc>)
   d5ccc:	681b      	ldr	r3, [r3, #0]
   d5cce:	685b      	ldr	r3, [r3, #4]
   d5cd0:	9301      	str	r3, [sp, #4]
   d5cd2:	bd08      	pop	{r3, pc}
   d5cd4:	00030240 	.word	0x00030240

000d5cd8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5cd8:	b508      	push	{r3, lr}
   d5cda:	4b02      	ldr	r3, [pc, #8]	; (d5ce4 <network_connecting+0xc>)
   d5cdc:	681b      	ldr	r3, [r3, #0]
   d5cde:	689b      	ldr	r3, [r3, #8]
   d5ce0:	9301      	str	r3, [sp, #4]
   d5ce2:	bd08      	pop	{r3, pc}
   d5ce4:	00030240 	.word	0x00030240

000d5ce8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5ce8:	b508      	push	{r3, lr}
   d5cea:	4b02      	ldr	r3, [pc, #8]	; (d5cf4 <network_disconnect+0xc>)
   d5cec:	681b      	ldr	r3, [r3, #0]
   d5cee:	68db      	ldr	r3, [r3, #12]
   d5cf0:	9301      	str	r3, [sp, #4]
   d5cf2:	bd08      	pop	{r3, pc}
   d5cf4:	00030240 	.word	0x00030240

000d5cf8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5cf8:	b508      	push	{r3, lr}
   d5cfa:	4b02      	ldr	r3, [pc, #8]	; (d5d04 <network_ready+0xc>)
   d5cfc:	681b      	ldr	r3, [r3, #0]
   d5cfe:	691b      	ldr	r3, [r3, #16]
   d5d00:	9301      	str	r3, [sp, #4]
   d5d02:	bd08      	pop	{r3, pc}
   d5d04:	00030240 	.word	0x00030240

000d5d08 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d08:	b508      	push	{r3, lr}
   d5d0a:	4b02      	ldr	r3, [pc, #8]	; (d5d14 <network_on+0xc>)
   d5d0c:	681b      	ldr	r3, [r3, #0]
   d5d0e:	695b      	ldr	r3, [r3, #20]
   d5d10:	9301      	str	r3, [sp, #4]
   d5d12:	bd08      	pop	{r3, pc}
   d5d14:	00030240 	.word	0x00030240

000d5d18 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d18:	b508      	push	{r3, lr}
   d5d1a:	4b02      	ldr	r3, [pc, #8]	; (d5d24 <network_off+0xc>)
   d5d1c:	681b      	ldr	r3, [r3, #0]
   d5d1e:	699b      	ldr	r3, [r3, #24]
   d5d20:	9301      	str	r3, [sp, #4]
   d5d22:	bd08      	pop	{r3, pc}
   d5d24:	00030240 	.word	0x00030240

000d5d28 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5d28:	b508      	push	{r3, lr}
   d5d2a:	4b02      	ldr	r3, [pc, #8]	; (d5d34 <network_listen+0xc>)
   d5d2c:	681b      	ldr	r3, [r3, #0]
   d5d2e:	69db      	ldr	r3, [r3, #28]
   d5d30:	9301      	str	r3, [sp, #4]
   d5d32:	bd08      	pop	{r3, pc}
   d5d34:	00030240 	.word	0x00030240

000d5d38 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5d38:	b508      	push	{r3, lr}
   d5d3a:	4b02      	ldr	r3, [pc, #8]	; (d5d44 <network_listening+0xc>)
   d5d3c:	681b      	ldr	r3, [r3, #0]
   d5d3e:	6a1b      	ldr	r3, [r3, #32]
   d5d40:	9301      	str	r3, [sp, #4]
   d5d42:	bd08      	pop	{r3, pc}
   d5d44:	00030240 	.word	0x00030240

000d5d48 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   d5d48:	b508      	push	{r3, lr}
   d5d4a:	4b02      	ldr	r3, [pc, #8]	; (d5d54 <network_has_credentials+0xc>)
   d5d4c:	681b      	ldr	r3, [r3, #0]
   d5d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5d50:	9301      	str	r3, [sp, #4]
   d5d52:	bd08      	pop	{r3, pc}
   d5d54:	00030240 	.word	0x00030240

000d5d58 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d5d58:	b508      	push	{r3, lr}
   d5d5a:	4b02      	ldr	r3, [pc, #8]	; (d5d64 <network_set_credentials+0xc>)
   d5d5c:	681b      	ldr	r3, [r3, #0]
   d5d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5d60:	9301      	str	r3, [sp, #4]
   d5d62:	bd08      	pop	{r3, pc}
   d5d64:	00030240 	.word	0x00030240

000d5d68 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5d68:	b508      	push	{r3, lr}
   d5d6a:	4b02      	ldr	r3, [pc, #8]	; (d5d74 <network_set_listen_timeout+0xc>)
   d5d6c:	681b      	ldr	r3, [r3, #0]
   d5d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5d70:	9301      	str	r3, [sp, #4]
   d5d72:	bd08      	pop	{r3, pc}
   d5d74:	00030240 	.word	0x00030240

000d5d78 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5d78:	b508      	push	{r3, lr}
   d5d7a:	4b02      	ldr	r3, [pc, #8]	; (d5d84 <network_get_listen_timeout+0xc>)
   d5d7c:	681b      	ldr	r3, [r3, #0]
   d5d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5d80:	9301      	str	r3, [sp, #4]
   d5d82:	bd08      	pop	{r3, pc}
   d5d84:	00030240 	.word	0x00030240

000d5d88 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5d88:	b508      	push	{r3, lr}
   d5d8a:	4b02      	ldr	r3, [pc, #8]	; (d5d94 <network_is_on+0xc>)
   d5d8c:	681b      	ldr	r3, [r3, #0]
   d5d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5d90:	9301      	str	r3, [sp, #4]
   d5d92:	bd08      	pop	{r3, pc}
   d5d94:	00030240 	.word	0x00030240

000d5d98 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5d98:	b508      	push	{r3, lr}
   d5d9a:	4b02      	ldr	r3, [pc, #8]	; (d5da4 <network_is_off+0xc>)
   d5d9c:	681b      	ldr	r3, [r3, #0]
   d5d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5da0:	9301      	str	r3, [sp, #4]
   d5da2:	bd08      	pop	{r3, pc}
   d5da4:	00030240 	.word	0x00030240

000d5da8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5da8:	b508      	push	{r3, lr}
   d5daa:	4b02      	ldr	r3, [pc, #8]	; (d5db4 <spark_process+0xc>)
   d5dac:	681b      	ldr	r3, [r3, #0]
   d5dae:	689b      	ldr	r3, [r3, #8]
   d5db0:	9301      	str	r3, [sp, #4]
   d5db2:	bd08      	pop	{r3, pc}
   d5db4:	00030244 	.word	0x00030244

000d5db8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d5db8:	b508      	push	{r3, lr}
   d5dba:	4b02      	ldr	r3, [pc, #8]	; (d5dc4 <spark_cloud_flag_connect+0xc>)
   d5dbc:	681b      	ldr	r3, [r3, #0]
   d5dbe:	68db      	ldr	r3, [r3, #12]
   d5dc0:	9301      	str	r3, [sp, #4]
   d5dc2:	bd08      	pop	{r3, pc}
   d5dc4:	00030244 	.word	0x00030244

000d5dc8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5dc8:	b508      	push	{r3, lr}
   d5dca:	4b02      	ldr	r3, [pc, #8]	; (d5dd4 <spark_cloud_flag_connected+0xc>)
   d5dcc:	681b      	ldr	r3, [r3, #0]
   d5dce:	695b      	ldr	r3, [r3, #20]
   d5dd0:	9301      	str	r3, [sp, #4]
   d5dd2:	bd08      	pop	{r3, pc}
   d5dd4:	00030244 	.word	0x00030244

000d5dd8 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5dd8:	b508      	push	{r3, lr}
   d5dda:	4b02      	ldr	r3, [pc, #8]	; (d5de4 <spark_sync_time_pending+0xc>)
   d5ddc:	681b      	ldr	r3, [r3, #0]
   d5dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5de0:	9301      	str	r3, [sp, #4]
   d5de2:	bd08      	pop	{r3, pc}
   d5de4:	00030244 	.word	0x00030244

000d5de8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5de8:	b508      	push	{r3, lr}
   d5dea:	4b02      	ldr	r3, [pc, #8]	; (d5df4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5dec:	681b      	ldr	r3, [r3, #0]
   d5dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5df0:	9301      	str	r3, [sp, #4]
   d5df2:	bd08      	pop	{r3, pc}
   d5df4:	00030244 	.word	0x00030244

000d5df8 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d5df8:	b508      	push	{r3, lr}
   d5dfa:	4b02      	ldr	r3, [pc, #8]	; (d5e04 <spark_cloud_disconnect+0xc>)
   d5dfc:	681b      	ldr	r3, [r3, #0]
   d5dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5e00:	9301      	str	r3, [sp, #4]
   d5e02:	bd08      	pop	{r3, pc}
   d5e04:	00030244 	.word	0x00030244

000d5e08 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5e08:	b508      	push	{r3, lr}
   d5e0a:	4b02      	ldr	r3, [pc, #8]	; (d5e14 <malloc+0xc>)
   d5e0c:	681b      	ldr	r3, [r3, #0]
   d5e0e:	681b      	ldr	r3, [r3, #0]
   d5e10:	9301      	str	r3, [sp, #4]
   d5e12:	bd08      	pop	{r3, pc}
   d5e14:	0003021c 	.word	0x0003021c

000d5e18 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5e18:	b508      	push	{r3, lr}
   d5e1a:	4b02      	ldr	r3, [pc, #8]	; (d5e24 <free+0xc>)
   d5e1c:	681b      	ldr	r3, [r3, #0]
   d5e1e:	685b      	ldr	r3, [r3, #4]
   d5e20:	9301      	str	r3, [sp, #4]
   d5e22:	bd08      	pop	{r3, pc}
   d5e24:	0003021c 	.word	0x0003021c

000d5e28 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5e28:	b508      	push	{r3, lr}
   d5e2a:	4b02      	ldr	r3, [pc, #8]	; (d5e34 <realloc+0xc>)
   d5e2c:	681b      	ldr	r3, [r3, #0]
   d5e2e:	689b      	ldr	r3, [r3, #8]
   d5e30:	9301      	str	r3, [sp, #4]
   d5e32:	bd08      	pop	{r3, pc}
   d5e34:	0003021c 	.word	0x0003021c

000d5e38 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5e38:	b508      	push	{r3, lr}
   d5e3a:	4b02      	ldr	r3, [pc, #8]	; (d5e44 <abort+0xc>)
   d5e3c:	681b      	ldr	r3, [r3, #0]
   d5e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e40:	9301      	str	r3, [sp, #4]
   d5e42:	bd08      	pop	{r3, pc}
   d5e44:	0003021c 	.word	0x0003021c

000d5e48 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5e48:	b508      	push	{r3, lr}
   d5e4a:	4b02      	ldr	r3, [pc, #8]	; (d5e54 <__errno+0xc>)
   d5e4c:	681b      	ldr	r3, [r3, #0]
   d5e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5e50:	9301      	str	r3, [sp, #4]
   d5e52:	bd08      	pop	{r3, pc}
   d5e54:	0003021c 	.word	0x0003021c

000d5e58 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5e58:	b508      	push	{r3, lr}
   d5e5a:	4b02      	ldr	r3, [pc, #8]	; (d5e64 <newlib_impure_ptr_callback+0xc>)
   d5e5c:	681b      	ldr	r3, [r3, #0]
   d5e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5e60:	9301      	str	r3, [sp, #4]
   d5e62:	bd08      	pop	{r3, pc}
   d5e64:	0003021c 	.word	0x0003021c

000d5e68 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5e68:	2200      	movs	r2, #0
   d5e6a:	6840      	ldr	r0, [r0, #4]
   d5e6c:	4611      	mov	r1, r2
   d5e6e:	f7ff bf63 	b.w	d5d38 <network_listening>

000d5e72 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5e72:	2200      	movs	r2, #0
   d5e74:	6840      	ldr	r0, [r0, #4]
   d5e76:	4611      	mov	r1, r2
   d5e78:	f7ff bf7e 	b.w	d5d78 <network_get_listen_timeout>

000d5e7c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5e7c:	6840      	ldr	r0, [r0, #4]
   d5e7e:	2200      	movs	r2, #0
   d5e80:	f7ff bf72 	b.w	d5d68 <network_set_listen_timeout>

000d5e84 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5e84:	6840      	ldr	r0, [r0, #4]
   d5e86:	2200      	movs	r2, #0
   d5e88:	f081 0101 	eor.w	r1, r1, #1
   d5e8c:	f7ff bf4c 	b.w	d5d28 <network_listen>

000d5e90 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5e90:	2300      	movs	r3, #0
   d5e92:	6840      	ldr	r0, [r0, #4]
   d5e94:	461a      	mov	r2, r3
   d5e96:	4619      	mov	r1, r3
   d5e98:	f7ff bf3e 	b.w	d5d18 <network_off>

000d5e9c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5e9c:	2300      	movs	r3, #0
   d5e9e:	6840      	ldr	r0, [r0, #4]
   d5ea0:	461a      	mov	r2, r3
   d5ea2:	4619      	mov	r1, r3
   d5ea4:	f7ff bf30 	b.w	d5d08 <network_on>

000d5ea8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5ea8:	2200      	movs	r2, #0
   d5eaa:	6840      	ldr	r0, [r0, #4]
   d5eac:	4611      	mov	r1, r2
   d5eae:	f7ff bf23 	b.w	d5cf8 <network_ready>

000d5eb2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5eb2:	2200      	movs	r2, #0
   d5eb4:	6840      	ldr	r0, [r0, #4]
   d5eb6:	4611      	mov	r1, r2
   d5eb8:	f7ff bf0e 	b.w	d5cd8 <network_connecting>

000d5ebc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ebc:	6840      	ldr	r0, [r0, #4]
   d5ebe:	2200      	movs	r2, #0
   d5ec0:	2102      	movs	r1, #2
   d5ec2:	f7ff bf11 	b.w	d5ce8 <network_disconnect>

000d5ec6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5ec6:	2300      	movs	r3, #0
   d5ec8:	6840      	ldr	r0, [r0, #4]
   d5eca:	461a      	mov	r2, r3
   d5ecc:	f7ff befc 	b.w	d5cc8 <network_connect>

000d5ed0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5ed0:	4b02      	ldr	r3, [pc, #8]	; (d5edc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5ed2:	2203      	movs	r2, #3
   d5ed4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5ed6:	4a02      	ldr	r2, [pc, #8]	; (d5ee0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5ed8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5eda:	4770      	bx	lr
   d5edc:	2003e63c 	.word	0x2003e63c
   d5ee0:	000d9fb0 	.word	0x000d9fb0

000d5ee4 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5ee4:	2100      	movs	r1, #0
   d5ee6:	f7ff be59 	b.w	d5b9c <hal_spi_acquire>

000d5eea <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5eea:	2100      	movs	r1, #0
   d5eec:	f7ff be5e 	b.w	d5bac <hal_spi_release>

000d5ef0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5ef0:	b510      	push	{r4, lr}
   d5ef2:	4604      	mov	r4, r0
   d5ef4:	4608      	mov	r0, r1
{
    _spi = spi;
   d5ef6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5ef8:	f7ff fe38 	bl	d5b6c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5efc:	2300      	movs	r3, #0
   d5efe:	6063      	str	r3, [r4, #4]
}
   d5f00:	4620      	mov	r0, r4
   d5f02:	bd10      	pop	{r4, pc}

000d5f04 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5f04:	b510      	push	{r4, lr}
   d5f06:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5f08:	7800      	ldrb	r0, [r0, #0]
   d5f0a:	f7ff ffeb 	bl	d5ee4 <_ZN8SPIClass4lockEv.isra.0>
   d5f0e:	b948      	cbnz	r0, d5f24 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5f10:	7820      	ldrb	r0, [r4, #0]
   d5f12:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5f16:	f7ff fe01 	bl	d5b1c <hal_spi_begin>
        unlock();
   d5f1a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5f20:	f7ff bfe3 	b.w	d5eea <_ZN8SPIClass6unlockEv.isra.0>
}
   d5f24:	bd10      	pop	{r4, pc}

000d5f26 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5f26:	b513      	push	{r0, r1, r4, lr}
   d5f28:	4604      	mov	r4, r0
    if (!lock())
   d5f2a:	7800      	ldrb	r0, [r0, #0]
{
   d5f2c:	9101      	str	r1, [sp, #4]
    if (!lock())
   d5f2e:	f7ff ffd9 	bl	d5ee4 <_ZN8SPIClass4lockEv.isra.0>
   d5f32:	9901      	ldr	r1, [sp, #4]
   d5f34:	b940      	cbnz	r0, d5f48 <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d5f36:	7820      	ldrb	r0, [r4, #0]
   d5f38:	f7ff fdf8 	bl	d5b2c <hal_spi_set_bit_order>
        unlock();
   d5f3c:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5f3e:	b002      	add	sp, #8
   d5f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5f44:	f7ff bfd1 	b.w	d5eea <_ZN8SPIClass6unlockEv.isra.0>
}
   d5f48:	b002      	add	sp, #8
   d5f4a:	bd10      	pop	{r4, pc}

000d5f4c <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d5f4c:	b513      	push	{r0, r1, r4, lr}
   d5f4e:	4604      	mov	r4, r0
    if (!lock())
   d5f50:	7800      	ldrb	r0, [r0, #0]
{
   d5f52:	9101      	str	r1, [sp, #4]
    if (!lock())
   d5f54:	f7ff ffc6 	bl	d5ee4 <_ZN8SPIClass4lockEv.isra.0>
   d5f58:	9901      	ldr	r1, [sp, #4]
   d5f5a:	b940      	cbnz	r0, d5f6e <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d5f5c:	7820      	ldrb	r0, [r4, #0]
   d5f5e:	f7ff fded 	bl	d5b3c <hal_spi_set_data_mode>
        unlock();
   d5f62:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5f64:	b002      	add	sp, #8
   d5f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5f6a:	f7ff bfbe 	b.w	d5eea <_ZN8SPIClass6unlockEv.isra.0>
}
   d5f6e:	b002      	add	sp, #8
   d5f70:	bd10      	pop	{r4, pc}
	...

000d5f74 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5f74:	0840      	lsrs	r0, r0, #1
{
   d5f76:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5f78:	6018      	str	r0, [r3, #0]
   d5f7a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5f7c:	6818      	ldr	r0, [r3, #0]
   d5f7e:	4288      	cmp	r0, r1
   d5f80:	b2e5      	uxtb	r5, r4
   d5f82:	d906      	bls.n	d5f92 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5f84:	3401      	adds	r4, #1
   d5f86:	2c08      	cmp	r4, #8
   d5f88:	d002      	beq.n	d5f90 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5f8a:	0840      	lsrs	r0, r0, #1
   d5f8c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d5f8e:	e7f5      	b.n	d5f7c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5f90:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d5f92:	4b02      	ldr	r3, [pc, #8]	; (d5f9c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5f94:	5d5b      	ldrb	r3, [r3, r5]
   d5f96:	7013      	strb	r3, [r2, #0]
}
   d5f98:	bd30      	pop	{r4, r5, pc}
   d5f9a:	bf00      	nop
   d5f9c:	000d9fe4 	.word	0x000d9fe4

000d5fa0 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5fa4:	b088      	sub	sp, #32
    unsigned clock = 0;
   d5fa6:	2300      	movs	r3, #0
{
   d5fa8:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5faa:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d5fac:	9302      	str	r3, [sp, #8]
{
   d5fae:	460e      	mov	r6, r1
   d5fb0:	4617      	mov	r7, r2
    if (!lock())
   d5fb2:	f7ff ff97 	bl	d5ee4 <_ZN8SPIClass4lockEv.isra.0>
   d5fb6:	4605      	mov	r5, r0
   d5fb8:	bb00      	cbnz	r0, d5ffc <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d5fba:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5fbe:	4601      	mov	r1, r0
   d5fc0:	2214      	movs	r2, #20
   d5fc2:	a803      	add	r0, sp, #12
   d5fc4:	f003 fcc0 	bl	d9948 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5fc8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5fca:	462a      	mov	r2, r5
   d5fcc:	a903      	add	r1, sp, #12
   d5fce:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d5fd0:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d5fd4:	f7ff fdda 	bl	d5b8c <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5fd8:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d5fda:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5fde:	ab02      	add	r3, sp, #8
   d5fe0:	f10d 0207 	add.w	r2, sp, #7
   d5fe4:	fb07 f106 	mul.w	r1, r7, r6
   d5fe8:	f7ff ffc4 	bl	d5f74 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d5fec:	7820      	ldrb	r0, [r4, #0]
   d5fee:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5ff2:	f7ff fdab 	bl	d5b4c <hal_spi_set_clock_divider>
        unlock();
   d5ff6:	7820      	ldrb	r0, [r4, #0]
   d5ff8:	f7ff ff77 	bl	d5eea <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d5ffc:	9802      	ldr	r0, [sp, #8]
   d5ffe:	b008      	add	sp, #32
   d6000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6004 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d6004:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d6006:	7800      	ldrb	r0, [r0, #0]
   d6008:	f7ff fda8 	bl	d5b5c <hal_spi_transfer>
}
   d600c:	b2c0      	uxtb	r0, r0
   d600e:	bd08      	pop	{r3, pc}

000d6010 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6010:	b510      	push	{r4, lr}
   d6012:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6014:	6800      	ldr	r0, [r0, #0]
   d6016:	b118      	cbz	r0, d6020 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d6018:	f7ff fefe 	bl	d5e18 <free>
            wakeupSource_ = nullptr;
   d601c:	2300      	movs	r3, #0
   d601e:	6023      	str	r3, [r4, #0]
        }
    }
   d6020:	bd10      	pop	{r4, pc}

000d6022 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d6022:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d6024:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d6028:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d602a:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d602c:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d602e:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d6032:	f8c0 2006 	str.w	r2, [r0, #6]
   d6036:	889b      	ldrh	r3, [r3, #4]
   d6038:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d603a:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d603c:	f7ff ffe8 	bl	d6010 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d6040:	682b      	ldr	r3, [r5, #0]
   d6042:	b113      	cbz	r3, d604a <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d6044:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d6046:	2300      	movs	r3, #0
   d6048:	602b      	str	r3, [r5, #0]
    }
   d604a:	4620      	mov	r0, r4
   d604c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6050 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d6050:	b538      	push	{r3, r4, r5, lr}
   d6052:	460c      	mov	r4, r1
   d6054:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d6056:	f7ff ffdb 	bl	d6010 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d605a:	b144      	cbz	r4, d606e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d605c:	8820      	ldrh	r0, [r4, #0]
   d605e:	f7ff fed3 	bl	d5e08 <malloc>
   d6062:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d6064:	b128      	cbz	r0, d6072 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d6066:	8822      	ldrh	r2, [r4, #0]
   d6068:	4621      	mov	r1, r4
   d606a:	f003 fc45 	bl	d98f8 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d606e:	2000      	movs	r0, #0
    }
   d6070:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d6072:	4801      	ldr	r0, [pc, #4]	; (d6078 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d6074:	e7fc      	b.n	d6070 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d6076:	bf00      	nop
   d6078:	fffffefc 	.word	0xfffffefc

000d607c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d607c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d607e:	4d2d      	ldr	r5, [pc, #180]	; (d6134 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d6080:	7d0b      	ldrb	r3, [r1, #20]
   d6082:	4604      	mov	r4, r0
   d6084:	b08b      	sub	sp, #44	; 0x2c
   d6086:	4608      	mov	r0, r1
   d6088:	1daf      	adds	r7, r5, #6
   d608a:	2b00      	cmp	r3, #0
   d608c:	d038      	beq.n	d6100 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d608e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d6090:	791b      	ldrb	r3, [r3, #4]
   d6092:	2b00      	cmp	r3, #0
   d6094:	d034      	beq.n	d6100 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d6096:	2200      	movs	r2, #0
    SleepResult() {}
   d6098:	4b27      	ldr	r3, [pc, #156]	; (d6138 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d609a:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d609c:	a902      	add	r1, sp, #8
   d609e:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d60a0:	9202      	str	r2, [sp, #8]
   d60a2:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d60a6:	f88d 200e 	strb.w	r2, [sp, #14]
   d60aa:	f7ff fe03 	bl	d5cb4 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d60ae:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d60b2:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d60b6:	b200      	sxth	r0, r0
   d60b8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d60bc:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d60c0:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d60c2:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d60c4:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d60c6:	4628      	mov	r0, r5
   d60c8:	f7ff ffc2 	bl	d6050 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d60cc:	a802      	add	r0, sp, #8
   d60ce:	f7ff ff9f 	bl	d6010 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d60d2:	2300      	movs	r3, #0
   d60d4:	6023      	str	r3, [r4, #0]
   d60d6:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d60d8:	71a3      	strb	r3, [r4, #6]
   d60da:	8123      	strh	r3, [r4, #8]
   d60dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d60e0:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d60e2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d60e6:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d60e8:	683b      	ldr	r3, [r7, #0]
   d60ea:	f8c4 3006 	str.w	r3, [r4, #6]
   d60ee:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d60f0:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d60f2:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d60f4:	4620      	mov	r0, r4
   d60f6:	f7ff ffab 	bl	d6050 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d60fa:	4620      	mov	r0, r4
   d60fc:	b00b      	add	sp, #44	; 0x2c
   d60fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d6100:	2600      	movs	r6, #0
   d6102:	2320      	movs	r3, #32
   d6104:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d6108:	4b0c      	ldr	r3, [pc, #48]	; (d613c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d610a:	9300      	str	r3, [sp, #0]
   d610c:	490c      	ldr	r1, [pc, #48]	; (d6140 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d610e:	4633      	mov	r3, r6
   d6110:	aa02      	add	r2, sp, #8
   d6112:	2032      	movs	r0, #50	; 0x32
   d6114:	f7ff fd92 	bl	d5c3c <log_message>
    SleepResult() {}
   d6118:	4b07      	ldr	r3, [pc, #28]	; (d6138 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d611a:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d611c:	a902      	add	r1, sp, #8
        error_ = error;
   d611e:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d6122:	4804      	ldr	r0, [pc, #16]	; (d6134 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d6124:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d6126:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d612a:	f8ad 300c 	strh.w	r3, [sp, #12]
   d612e:	f7ff ff78 	bl	d6022 <_ZN17SystemSleepResultaSEOS_>
   d6132:	e7cb      	b.n	d60cc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d6134:	2003e644 	.word	0x2003e644
   d6138:	ffff0000 	.word	0xffff0000
   d613c:	000d9ff3 	.word	0x000d9ff3
   d6140:	000d9fec 	.word	0x000d9fec

000d6144 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6144:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6146:	4b09      	ldr	r3, [pc, #36]	; (d616c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d6148:	4c09      	ldr	r4, [pc, #36]	; (d6170 <_GLOBAL__sub_I_System+0x2c>)
   d614a:	2202      	movs	r2, #2
   d614c:	2000      	movs	r0, #0
   d614e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6150:	4b08      	ldr	r3, [pc, #32]	; (d6174 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d6152:	6020      	str	r0, [r4, #0]
   d6154:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d6156:	71a0      	strb	r0, [r4, #6]
   d6158:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d615a:	f7ff fd7f 	bl	d5c5c <set_system_mode>
SystemClass System;
   d615e:	4620      	mov	r0, r4
   d6160:	4a05      	ldr	r2, [pc, #20]	; (d6178 <_GLOBAL__sub_I_System+0x34>)
   d6162:	4906      	ldr	r1, [pc, #24]	; (d617c <_GLOBAL__sub_I_System+0x38>)
   d6164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d6168:	f002 bd6e 	b.w	d8c48 <__aeabi_atexit>
   d616c:	2003e650 	.word	0x2003e650
   d6170:	2003e644 	.word	0x2003e644
   d6174:	ffff0000 	.word	0xffff0000
   d6178:	2003e0ac 	.word	0x2003e0ac
   d617c:	000d4171 	.word	0x000d4171

000d6180 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d6180:	b510      	push	{r4, lr}
   d6182:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d6184:	f003 fc1e 	bl	d99c4 <strlen>
   d6188:	3801      	subs	r0, #1
   d618a:	1823      	adds	r3, r4, r0
   d618c:	4620      	mov	r0, r4
	while(i<j){
   d618e:	4283      	cmp	r3, r0
   d6190:	d906      	bls.n	d61a0 <_Z11str_reversePc+0x20>
		c = *i;
   d6192:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d6194:	7819      	ldrb	r1, [r3, #0]
   d6196:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d619a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d619e:	e7f6      	b.n	d618e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d61a0:	bd10      	pop	{r4, pc}

000d61a2 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d61a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d61a6:	1e93      	subs	r3, r2, #2
{
   d61a8:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   d61aa:	2b22      	cmp	r3, #34	; 0x22
   d61ac:	f04f 0300 	mov.w	r3, #0
{
   d61b0:	460d      	mov	r5, r1
   d61b2:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d61b4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   d61b8:	d927      	bls.n	d620a <ltoa+0x68>

      if (10 == base && N < 0L)
   d61ba:	2800      	cmp	r0, #0
   d61bc:	da2a      	bge.n	d6214 <ltoa+0x72>
      {
            *head++ = '-';
   d61be:	462e      	mov	r6, r5
   d61c0:	232d      	movs	r3, #45	; 0x2d
   d61c2:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   d61c6:	4240      	negs	r0, r0
   d61c8:	240a      	movs	r4, #10
      *tail-- = '\0';
   d61ca:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d61ce:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d61d2:	4622      	mov	r2, r4
   d61d4:	4601      	mov	r1, r0
   d61d6:	a801      	add	r0, sp, #4
   d61d8:	f003 fb6c 	bl	d98b4 <ldiv>
   d61dc:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d61de:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   d61e0:	2b09      	cmp	r3, #9
   d61e2:	bfcc      	ite	gt
   d61e4:	2237      	movgt	r2, #55	; 0x37
   d61e6:	2230      	movle	r2, #48	; 0x30
   d61e8:	fa52 f383 	uxtab	r3, r2, r3
   d61ec:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   d61f0:	f108 0801 	add.w	r8, r8, #1
   d61f4:	2800      	cmp	r0, #0
   d61f6:	d1ec      	bne.n	d61d2 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d61f8:	4642      	mov	r2, r8
   d61fa:	1c79      	adds	r1, r7, #1
   d61fc:	4630      	mov	r0, r6
   d61fe:	f003 fb7b 	bl	d98f8 <memcpy>
      return str;
}
   d6202:	4628      	mov	r0, r5
   d6204:	b00c      	add	sp, #48	; 0x30
   d6206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   d620a:	2a0a      	cmp	r2, #10
   d620c:	d0d5      	beq.n	d61ba <ltoa+0x18>
      if (uarg)
   d620e:	b118      	cbz	r0, d6218 <ltoa+0x76>
   d6210:	462e      	mov	r6, r5
   d6212:	e7da      	b.n	d61ca <ltoa+0x28>
   d6214:	240a      	movs	r4, #10
   d6216:	e7fa      	b.n	d620e <ltoa+0x6c>
      else  *tail-- = '0';
   d6218:	2330      	movs	r3, #48	; 0x30
   d621a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d621e:	462e      	mov	r6, r5
   d6220:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   d6224:	f04f 0802 	mov.w	r8, #2
   d6228:	e7e6      	b.n	d61f8 <ltoa+0x56>

000d622a <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d622a:	b570      	push	{r4, r5, r6, lr}
   d622c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d622e:	1e91      	subs	r1, r2, #2
   d6230:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6232:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d6234:	d822      	bhi.n	d627c <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d6236:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d6238:	b16d      	cbz	r5, d6256 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d623a:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d623e:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d6242:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d6244:	2d09      	cmp	r5, #9
                *ptr += '0';
   d6246:	bf94      	ite	ls
   d6248:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d624a:	3157      	addhi	r1, #87	; 0x57
   d624c:	b2c9      	uxtb	r1, r1
   d624e:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d6252:	4635      	mov	r5, r6
	while(a){
   d6254:	e7f0      	b.n	d6238 <ultoa+0xe>
   d6256:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d6258:	4423      	add	r3, r4
            *ptr++ = '0';
   d625a:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d625c:	4293      	cmp	r3, r2
   d625e:	d902      	bls.n	d6266 <ultoa+0x3c>
            *ptr++ = '0';
   d6260:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d6264:	e7fa      	b.n	d625c <ultoa+0x32>
   d6266:	1a1a      	subs	r2, r3, r0
   d6268:	4283      	cmp	r3, r0
   d626a:	bf38      	it	cc
   d626c:	2200      	movcc	r2, #0

	*ptr = '\0';
   d626e:	2300      	movs	r3, #0
   d6270:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d6272:	4620      	mov	r0, r4
   d6274:	f7ff ff84 	bl	d6180 <_Z11str_reversePc>
	return buffer;
   d6278:	4620      	mov	r0, r4
}
   d627a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d627c:	2000      	movs	r0, #0
   d627e:	e7fc      	b.n	d627a <ultoa+0x50>

000d6280 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6280:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d6282:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6284:	460c      	mov	r4, r1
   d6286:	4615      	mov	r5, r2
	if(a<0){
   d6288:	da0e      	bge.n	d62a8 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d628a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d628e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6292:	bf14      	ite	ne
   d6294:	4258      	negne	r0, r3
   d6296:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d6298:	2301      	movs	r3, #1
		*buffer = '-';
   d629a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d629c:	462a      	mov	r2, r5
   d629e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d62a0:	f7ff ffc3 	bl	d622a <ultoa>
	}
	return buffer;
}
   d62a4:	4620      	mov	r0, r4
   d62a6:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d62a8:	2301      	movs	r3, #1
   d62aa:	e7f9      	b.n	d62a0 <itoa+0x20>

000d62ac <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d62ac:	b570      	push	{r4, r5, r6, lr}
   d62ae:	b086      	sub	sp, #24
   d62b0:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d62b2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d62b4:	4668      	mov	r0, sp
   d62b6:	f001 fe91 	bl	d7fdc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d62ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d62bc:	1d34      	adds	r4, r6, #4
   d62be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d62c0:	682b      	ldr	r3, [r5, #0]
   d62c2:	7023      	strb	r3, [r4, #0]
    }
   d62c4:	4630      	mov	r0, r6
   d62c6:	b006      	add	sp, #24
   d62c8:	bd70      	pop	{r4, r5, r6, pc}

000d62ca <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d62ca:	b510      	push	{r4, lr}
   d62cc:	4604      	mov	r4, r0
{
	free(buffer);
   d62ce:	6800      	ldr	r0, [r0, #0]
   d62d0:	f7ff fda2 	bl	d5e18 <free>
}
   d62d4:	4620      	mov	r0, r4
   d62d6:	bd10      	pop	{r4, pc}

000d62d8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d62d8:	b510      	push	{r4, lr}
   d62da:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d62dc:	6800      	ldr	r0, [r0, #0]
   d62de:	b108      	cbz	r0, d62e4 <_ZN6String10invalidateEv+0xc>
   d62e0:	f7ff fd9a 	bl	d5e18 <free>
	buffer = NULL;
   d62e4:	2300      	movs	r3, #0
	capacity = len = 0;
   d62e6:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d62ea:	6023      	str	r3, [r4, #0]
}
   d62ec:	bd10      	pop	{r4, pc}

000d62ee <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d62ee:	b538      	push	{r3, r4, r5, lr}
   d62f0:	4604      	mov	r4, r0
   d62f2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d62f4:	6800      	ldr	r0, [r0, #0]
   d62f6:	3101      	adds	r1, #1
   d62f8:	f7ff fd96 	bl	d5e28 <realloc>
	if (newbuffer) {
   d62fc:	b110      	cbz	r0, d6304 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d62fe:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6302:	2001      	movs	r0, #1
	}
	return 0;
}
   d6304:	bd38      	pop	{r3, r4, r5, pc}

000d6306 <_ZN6String7reserveEj>:
{
   d6306:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6308:	6803      	ldr	r3, [r0, #0]
{
   d630a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d630c:	b123      	cbz	r3, d6318 <_ZN6String7reserveEj+0x12>
   d630e:	6843      	ldr	r3, [r0, #4]
   d6310:	428b      	cmp	r3, r1
   d6312:	d301      	bcc.n	d6318 <_ZN6String7reserveEj+0x12>
   d6314:	2001      	movs	r0, #1
}
   d6316:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d6318:	4620      	mov	r0, r4
   d631a:	f7ff ffe8 	bl	d62ee <_ZN6String12changeBufferEj>
   d631e:	2800      	cmp	r0, #0
   d6320:	d0f9      	beq.n	d6316 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6322:	68a3      	ldr	r3, [r4, #8]
   d6324:	2b00      	cmp	r3, #0
   d6326:	d1f5      	bne.n	d6314 <_ZN6String7reserveEj+0xe>
   d6328:	6822      	ldr	r2, [r4, #0]
   d632a:	7013      	strb	r3, [r2, #0]
   d632c:	e7f2      	b.n	d6314 <_ZN6String7reserveEj+0xe>

000d632e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d632e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6330:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d6332:	4611      	mov	r1, r2
   d6334:	9201      	str	r2, [sp, #4]
{
   d6336:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d6338:	f7ff ffe5 	bl	d6306 <_ZN6String7reserveEj>
   d633c:	9a01      	ldr	r2, [sp, #4]
   d633e:	b928      	cbnz	r0, d634c <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d6340:	4620      	mov	r0, r4
   d6342:	f7ff ffc9 	bl	d62d8 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d6346:	4620      	mov	r0, r4
   d6348:	b003      	add	sp, #12
   d634a:	bd30      	pop	{r4, r5, pc}
	len = length;
   d634c:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d634e:	4629      	mov	r1, r5
   d6350:	6820      	ldr	r0, [r4, #0]
   d6352:	f003 fad1 	bl	d98f8 <memcpy>
	buffer[len] = 0;
   d6356:	6822      	ldr	r2, [r4, #0]
   d6358:	68a3      	ldr	r3, [r4, #8]
   d635a:	2100      	movs	r1, #0
   d635c:	54d1      	strb	r1, [r2, r3]
	return *this;
   d635e:	e7f2      	b.n	d6346 <_ZN6String4copyEPKcj+0x18>

000d6360 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d6360:	2300      	movs	r3, #0
String::String(const char *cstr)
   d6362:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d6364:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d6368:	4604      	mov	r4, r0
	len = 0;
   d636a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d636c:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d636e:	b141      	cbz	r1, d6382 <_ZN6StringC1EPKc+0x22>
   d6370:	4608      	mov	r0, r1
   d6372:	9101      	str	r1, [sp, #4]
   d6374:	f003 fb26 	bl	d99c4 <strlen>
   d6378:	9901      	ldr	r1, [sp, #4]
   d637a:	4602      	mov	r2, r0
   d637c:	4620      	mov	r0, r4
   d637e:	f7ff ffd6 	bl	d632e <_ZN6String4copyEPKcj>
}
   d6382:	4620      	mov	r0, r4
   d6384:	b002      	add	sp, #8
   d6386:	bd10      	pop	{r4, pc}

000d6388 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d6388:	b538      	push	{r3, r4, r5, lr}
   d638a:	4605      	mov	r5, r0
	if (buffer) {
   d638c:	6800      	ldr	r0, [r0, #0]
{
   d638e:	460c      	mov	r4, r1
	if (buffer) {
   d6390:	b168      	cbz	r0, d63ae <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d6392:	686a      	ldr	r2, [r5, #4]
   d6394:	688b      	ldr	r3, [r1, #8]
   d6396:	429a      	cmp	r2, r3
   d6398:	d307      	bcc.n	d63aa <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d639a:	6809      	ldr	r1, [r1, #0]
   d639c:	f003 fb0a 	bl	d99b4 <strcpy>
			len = rhs.len;
   d63a0:	68a3      	ldr	r3, [r4, #8]
   d63a2:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d63a4:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d63a6:	60a3      	str	r3, [r4, #8]
}
   d63a8:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d63aa:	f7ff fd35 	bl	d5e18 <free>
	buffer = rhs.buffer;
   d63ae:	6823      	ldr	r3, [r4, #0]
   d63b0:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d63b2:	6863      	ldr	r3, [r4, #4]
   d63b4:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d63b6:	68a3      	ldr	r3, [r4, #8]
   d63b8:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d63ba:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d63bc:	e9c4 3300 	strd	r3, r3, [r4]
   d63c0:	e7f1      	b.n	d63a6 <_ZN6String4moveERS_+0x1e>

000d63c2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d63c2:	4288      	cmp	r0, r1
{
   d63c4:	b510      	push	{r4, lr}
   d63c6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d63c8:	d005      	beq.n	d63d6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d63ca:	680b      	ldr	r3, [r1, #0]
   d63cc:	b12b      	cbz	r3, d63da <_ZN6StringaSERKS_+0x18>
   d63ce:	688a      	ldr	r2, [r1, #8]
   d63d0:	4619      	mov	r1, r3
   d63d2:	f7ff ffac 	bl	d632e <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d63d6:	4620      	mov	r0, r4
   d63d8:	bd10      	pop	{r4, pc}
	else invalidate();
   d63da:	f7ff ff7d 	bl	d62d8 <_ZN6String10invalidateEv>
   d63de:	e7fa      	b.n	d63d6 <_ZN6StringaSERKS_+0x14>

000d63e0 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d63e0:	4288      	cmp	r0, r1
{
   d63e2:	b510      	push	{r4, lr}
   d63e4:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d63e6:	d001      	beq.n	d63ec <_ZN6StringaSEOS_+0xc>
   d63e8:	f7ff ffce 	bl	d6388 <_ZN6String4moveERS_>
	return *this;
}
   d63ec:	4620      	mov	r0, r4
   d63ee:	bd10      	pop	{r4, pc}

000d63f0 <_ZN6StringaSEO15StringSumHelper>:

String & String::operator = (StringSumHelper &&rval)
{
	if (this != &rval) move(rval);
   d63f0:	4288      	cmp	r0, r1
{
   d63f2:	b510      	push	{r4, lr}
   d63f4:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d63f6:	d001      	beq.n	d63fc <_ZN6StringaSEO15StringSumHelper+0xc>
   d63f8:	f7ff ffc6 	bl	d6388 <_ZN6String4moveERS_>
	return *this;
}
   d63fc:	4620      	mov	r0, r4
   d63fe:	bd10      	pop	{r4, pc}

000d6400 <_ZN6StringaSEPKc>:
#endif

String & String::operator = (const char *cstr)
{
   d6400:	b513      	push	{r0, r1, r4, lr}
   d6402:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6404:	b159      	cbz	r1, d641e <_ZN6StringaSEPKc+0x1e>
   d6406:	4608      	mov	r0, r1
   d6408:	9101      	str	r1, [sp, #4]
   d640a:	f003 fadb 	bl	d99c4 <strlen>
   d640e:	9901      	ldr	r1, [sp, #4]
   d6410:	4602      	mov	r2, r0
   d6412:	4620      	mov	r0, r4
   d6414:	f7ff ff8b 	bl	d632e <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6418:	4620      	mov	r0, r4
   d641a:	b002      	add	sp, #8
   d641c:	bd10      	pop	{r4, pc}
	else invalidate();
   d641e:	f7ff ff5b 	bl	d62d8 <_ZN6String10invalidateEv>
   d6422:	e7f9      	b.n	d6418 <_ZN6StringaSEPKc+0x18>

000d6424 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d6424:	b510      	push	{r4, lr}
   d6426:	4604      	mov	r4, r0
   d6428:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d642a:	2300      	movs	r3, #0
	capacity = 0;
   d642c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d6430:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6432:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d6434:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d6436:	a901      	add	r1, sp, #4
   d6438:	f7ff ff22 	bl	d6280 <itoa>
	*this = buf;
   d643c:	a901      	add	r1, sp, #4
   d643e:	4620      	mov	r0, r4
   d6440:	f7ff ffde 	bl	d6400 <_ZN6StringaSEPKc>
}
   d6444:	4620      	mov	r0, r4
   d6446:	b00a      	add	sp, #40	; 0x28
   d6448:	bd10      	pop	{r4, pc}

000d644a <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   d644a:	b510      	push	{r4, lr}
   d644c:	4604      	mov	r4, r0
   d644e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d6450:	2300      	movs	r3, #0
	capacity = 0;
   d6452:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d6456:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6458:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   d645a:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   d645c:	a901      	add	r1, sp, #4
   d645e:	f7ff fea0 	bl	d61a2 <ltoa>
	*this = buf;
   d6462:	a901      	add	r1, sp, #4
   d6464:	4620      	mov	r0, r4
   d6466:	f7ff ffcb 	bl	d6400 <_ZN6StringaSEPKc>
}
   d646a:	4620      	mov	r0, r4
   d646c:	b00a      	add	sp, #40	; 0x28
   d646e:	bd10      	pop	{r4, pc}

000d6470 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6470:	b570      	push	{r4, r5, r6, lr}
   d6472:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6474:	460e      	mov	r6, r1
   d6476:	b909      	cbnz	r1, d647c <_ZN6String6concatEPKcj+0xc>
   d6478:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d647a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d647c:	b16a      	cbz	r2, d649a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d647e:	6884      	ldr	r4, [r0, #8]
   d6480:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d6482:	4621      	mov	r1, r4
   d6484:	f7ff ff3f 	bl	d6306 <_ZN6String7reserveEj>
   d6488:	2800      	cmp	r0, #0
   d648a:	d0f5      	beq.n	d6478 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d648c:	6828      	ldr	r0, [r5, #0]
   d648e:	68ab      	ldr	r3, [r5, #8]
   d6490:	4631      	mov	r1, r6
   d6492:	4418      	add	r0, r3
   d6494:	f003 fa8e 	bl	d99b4 <strcpy>
	len = newlen;
   d6498:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d649a:	2001      	movs	r0, #1
   d649c:	e7ed      	b.n	d647a <_ZN6String6concatEPKcj+0xa>

000d649e <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d649e:	688a      	ldr	r2, [r1, #8]
   d64a0:	6809      	ldr	r1, [r1, #0]
   d64a2:	f7ff bfe5 	b.w	d6470 <_ZN6String6concatEPKcj>

000d64a6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d64a6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d64a8:	688a      	ldr	r2, [r1, #8]
   d64aa:	6809      	ldr	r1, [r1, #0]
{
   d64ac:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d64ae:	f7ff ffdf 	bl	d6470 <_ZN6String6concatEPKcj>
   d64b2:	b910      	cbnz	r0, d64ba <_ZplRK15StringSumHelperRK6String+0x14>
   d64b4:	4620      	mov	r0, r4
   d64b6:	f7ff ff0f 	bl	d62d8 <_ZN6String10invalidateEv>
	return a;
}
   d64ba:	4620      	mov	r0, r4
   d64bc:	bd10      	pop	{r4, pc}

000d64be <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d64be:	b513      	push	{r0, r1, r4, lr}
   d64c0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d64c2:	b929      	cbnz	r1, d64d0 <_ZplRK15StringSumHelperPKc+0x12>
   d64c4:	4620      	mov	r0, r4
   d64c6:	f7ff ff07 	bl	d62d8 <_ZN6String10invalidateEv>
	return a;
}
   d64ca:	4620      	mov	r0, r4
   d64cc:	b002      	add	sp, #8
   d64ce:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d64d0:	4608      	mov	r0, r1
   d64d2:	9101      	str	r1, [sp, #4]
   d64d4:	f003 fa76 	bl	d99c4 <strlen>
   d64d8:	9901      	ldr	r1, [sp, #4]
   d64da:	4602      	mov	r2, r0
   d64dc:	4620      	mov	r0, r4
   d64de:	f7ff ffc7 	bl	d6470 <_ZN6String6concatEPKcj>
   d64e2:	2800      	cmp	r0, #0
   d64e4:	d0ee      	beq.n	d64c4 <_ZplRK15StringSumHelperPKc+0x6>
   d64e6:	e7f0      	b.n	d64ca <_ZplRK15StringSumHelperPKc+0xc>

000d64e8 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d64e8:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d64ea:	6882      	ldr	r2, [r0, #8]
   d64ec:	b93a      	cbnz	r2, d64fe <_ZNK6String6equalsEPKc+0x16>
   d64ee:	b121      	cbz	r1, d64fa <_ZNK6String6equalsEPKc+0x12>
   d64f0:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d64f2:	fab0 f080 	clz	r0, r0
   d64f6:	0940      	lsrs	r0, r0, #5
   d64f8:	e000      	b.n	d64fc <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d64fa:	2001      	movs	r0, #1
}
   d64fc:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d64fe:	6800      	ldr	r0, [r0, #0]
   d6500:	b909      	cbnz	r1, d6506 <_ZNK6String6equalsEPKc+0x1e>
   d6502:	7800      	ldrb	r0, [r0, #0]
   d6504:	e7f5      	b.n	d64f2 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d6506:	f003 fa4b 	bl	d99a0 <strcmp>
   d650a:	e7f2      	b.n	d64f2 <_ZNK6String6equalsEPKc+0xa>

000d650c <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d650c:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d650e:	6883      	ldr	r3, [r0, #8]
   d6510:	4293      	cmp	r3, r2
   d6512:	d907      	bls.n	d6524 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d6514:	6804      	ldr	r4, [r0, #0]
   d6516:	6809      	ldr	r1, [r1, #0]
   d6518:	18a0      	adds	r0, r4, r2
   d651a:	f003 fa7b 	bl	d9a14 <strstr>
	if (found == NULL) return -1;
   d651e:	b108      	cbz	r0, d6524 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d6520:	1b00      	subs	r0, r0, r4
}
   d6522:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   d6524:	f04f 30ff 	mov.w	r0, #4294967295
   d6528:	e7fb      	b.n	d6522 <_ZNK6String7indexOfERKS_j+0x16>

000d652a <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   d652a:	2200      	movs	r2, #0
   d652c:	f7ff bfee 	b.w	d650c <_ZNK6String7indexOfERKS_j>

000d6530 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d6530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d6532:	429a      	cmp	r2, r3
{
   d6534:	460f      	mov	r7, r1
   d6536:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d6538:	490c      	ldr	r1, [pc, #48]	; (d656c <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   d653a:	bf88      	it	hi
   d653c:	4613      	movhi	r3, r2
{
   d653e:	4614      	mov	r4, r2
   d6540:	4606      	mov	r6, r0
	if (left > right) {
   d6542:	bf84      	itt	hi
   d6544:	462c      	movhi	r4, r5
   d6546:	461d      	movhi	r5, r3
	String out;
   d6548:	f7ff ff0a 	bl	d6360 <_ZN6StringC1EPKc>
	if (left > len) return out;
   d654c:	68ba      	ldr	r2, [r7, #8]
   d654e:	42a2      	cmp	r2, r4
   d6550:	d30a      	bcc.n	d6568 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d6552:	6839      	ldr	r1, [r7, #0]
   d6554:	42aa      	cmp	r2, r5
   d6556:	bf94      	ite	ls
   d6558:	ebc4 0202 	rsbls	r2, r4, r2
   d655c:	ebc4 0205 	rsbhi	r2, r4, r5
   d6560:	4421      	add	r1, r4
   d6562:	4630      	mov	r0, r6
   d6564:	f7ff fee3 	bl	d632e <_ZN6String4copyEPKcj>
	return out;
}
   d6568:	4630      	mov	r0, r6
   d656a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d656c:	000d9f4f 	.word	0x000d9f4f

000d6570 <_ZNK6String9substringEj>:
{
   d6570:	b510      	push	{r4, lr}
   d6572:	4604      	mov	r4, r0
	return substring(left, len);
   d6574:	688b      	ldr	r3, [r1, #8]
   d6576:	f7ff ffdb 	bl	d6530 <_ZNK6String9substringEjj>
}
   d657a:	4620      	mov	r0, r4
   d657c:	bd10      	pop	{r4, pc}

000d657e <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
   d657e:	b538      	push	{r3, r4, r5, lr}
   d6580:	4604      	mov	r4, r0
   d6582:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
   d6584:	68a3      	ldr	r3, [r4, #8]
   d6586:	428b      	cmp	r3, r1
   d6588:	d911      	bls.n	d65ae <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
   d658a:	b182      	cbz	r2, d65ae <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
   d658c:	4411      	add	r1, r2
   d658e:	428b      	cmp	r3, r1
   d6590:	bf38      	it	cc
   d6592:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
   d6594:	6825      	ldr	r5, [r4, #0]
	len = len - count;
   d6596:	1a99      	subs	r1, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
   d6598:	1813      	adds	r3, r2, r0
	len = len - count;
   d659a:	60a1      	str	r1, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
   d659c:	1a0a      	subs	r2, r1, r0
   d659e:	18e9      	adds	r1, r5, r3
   d65a0:	4428      	add	r0, r5
   d65a2:	f003 f9b7 	bl	d9914 <memmove>
	buffer[len] = 0;
   d65a6:	6822      	ldr	r2, [r4, #0]
   d65a8:	68a3      	ldr	r3, [r4, #8]
   d65aa:	2100      	movs	r1, #0
   d65ac:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d65ae:	4620      	mov	r0, r4
   d65b0:	bd38      	pop	{r3, r4, r5, pc}

000d65b2 <_ZN6String6removeEj>:
        int count = len - index;
   d65b2:	6882      	ldr	r2, [r0, #8]
        return remove(index, count);
   d65b4:	1a52      	subs	r2, r2, r1
   d65b6:	f7ff bfe2 	b.w	d657e <_ZN6String6removeEjj>

000d65ba <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d65ba:	4770      	bx	lr

000d65bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d65bc:	4770      	bx	lr

000d65be <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d65be:	4770      	bx	lr

000d65c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d65c0:	4770      	bx	lr
	...

000d65c4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d65c4:	4b06      	ldr	r3, [pc, #24]	; (d65e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d65c6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d65c8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d65ca:	f100 040c 	add.w	r4, r0, #12
	    ||
   d65ce:	d005      	beq.n	d65dc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d65d0:	4608      	mov	r0, r1
   d65d2:	f002 fb47 	bl	d8c64 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d65d6:	2800      	cmp	r0, #0
	return nullptr;
   d65d8:	bf08      	it	eq
   d65da:	2400      	moveq	r4, #0
      }
   d65dc:	4620      	mov	r0, r4
   d65de:	bd10      	pop	{r4, pc}
   d65e0:	000da164 	.word	0x000da164

000d65e4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d65e4:	4b06      	ldr	r3, [pc, #24]	; (d6600 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d65e6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d65e8:	b510      	push	{r4, lr}
   d65ea:	f100 040c 	add.w	r4, r0, #12
	    ||
   d65ee:	d005      	beq.n	d65fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d65f0:	4608      	mov	r0, r1
   d65f2:	f002 fb37 	bl	d8c64 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d65f6:	2800      	cmp	r0, #0
	return nullptr;
   d65f8:	bf08      	it	eq
   d65fa:	2400      	moveq	r4, #0
      }
   d65fc:	4620      	mov	r0, r4
   d65fe:	bd10      	pop	{r4, pc}
   d6600:	000da164 	.word	0x000da164

000d6604 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6604:	4b06      	ldr	r3, [pc, #24]	; (d6620 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d6606:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6608:	b510      	push	{r4, lr}
   d660a:	f100 040c 	add.w	r4, r0, #12
	    ||
   d660e:	d005      	beq.n	d661c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6610:	4608      	mov	r0, r1
   d6612:	f002 fb27 	bl	d8c64 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6616:	2800      	cmp	r0, #0
	return nullptr;
   d6618:	bf08      	it	eq
   d661a:	2400      	moveq	r4, #0
      }
   d661c:	4620      	mov	r0, r4
   d661e:	bd10      	pop	{r4, pc}
   d6620:	000da164 	.word	0x000da164

000d6624 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6624:	b510      	push	{r4, lr}
   d6626:	2168      	movs	r1, #104	; 0x68
   d6628:	4604      	mov	r4, r0
   d662a:	f002 fb12 	bl	d8c52 <_ZdlPvj>
   d662e:	4620      	mov	r0, r4
   d6630:	bd10      	pop	{r4, pc}

000d6632 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d6632:	b510      	push	{r4, lr}
   d6634:	2128      	movs	r1, #40	; 0x28
   d6636:	4604      	mov	r4, r0
   d6638:	f002 fb0b 	bl	d8c52 <_ZdlPvj>
   d663c:	4620      	mov	r0, r4
   d663e:	bd10      	pop	{r4, pc}

000d6640 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d6640:	b510      	push	{r4, lr}
   d6642:	2130      	movs	r1, #48	; 0x30
   d6644:	4604      	mov	r4, r0
   d6646:	f002 fb04 	bl	d8c52 <_ZdlPvj>
   d664a:	4620      	mov	r0, r4
   d664c:	bd10      	pop	{r4, pc}

000d664e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d664e:	f7fd bd26 	b.w	d409e <_ZdlPv>

000d6652 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d6652:	f7fd bd24 	b.w	d409e <_ZdlPv>

000d6656 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d6656:	f7fd bd22 	b.w	d409e <_ZdlPv>

000d665a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d665a:	b510      	push	{r4, lr}
          _M_dispose();
   d665c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d665e:	4604      	mov	r4, r0
          _M_dispose();
   d6660:	689b      	ldr	r3, [r3, #8]
   d6662:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6664:	68a3      	ldr	r3, [r4, #8]
   d6666:	3b01      	subs	r3, #1
   d6668:	60a3      	str	r3, [r4, #8]
   d666a:	b92b      	cbnz	r3, d6678 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d666c:	6823      	ldr	r3, [r4, #0]
   d666e:	4620      	mov	r0, r4
   d6670:	68db      	ldr	r3, [r3, #12]
    }
   d6672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6676:	4718      	bx	r3
    }
   d6678:	bd10      	pop	{r4, pc}

000d667a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d667a:	b510      	push	{r4, lr}
   d667c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d667e:	6800      	ldr	r0, [r0, #0]
   d6680:	b108      	cbz	r0, d6686 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6682:	f7ff f94b 	bl	d591c <os_mutex_recursive_destroy>
    }
   d6686:	4620      	mov	r0, r4
   d6688:	bd10      	pop	{r4, pc}
	...

000d668c <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d668c:	b510      	push	{r4, lr}
        mutex_.lock();
   d668e:	4b04      	ldr	r3, [pc, #16]	; (d66a0 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d6690:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6692:	6818      	ldr	r0, [r3, #0]
   d6694:	f7ff f94a 	bl	d592c <os_mutex_recursive_lock>
        locked_ = true;
   d6698:	2301      	movs	r3, #1
   d669a:	7023      	strb	r3, [r4, #0]
    }
   d669c:	bd10      	pop	{r4, pc}
   d669e:	bf00      	nop
   d66a0:	2003e65c 	.word	0x2003e65c

000d66a4 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d66a4:	b510      	push	{r4, lr}
        mutex_.unlock();
   d66a6:	4b04      	ldr	r3, [pc, #16]	; (d66b8 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d66a8:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d66aa:	6818      	ldr	r0, [r3, #0]
   d66ac:	f7ff f946 	bl	d593c <os_mutex_recursive_unlock>
        locked_ = false;
   d66b0:	2300      	movs	r3, #0
   d66b2:	7023      	strb	r3, [r4, #0]
    }
   d66b4:	bd10      	pop	{r4, pc}
   d66b6:	bf00      	nop
   d66b8:	2003e65c 	.word	0x2003e65c

000d66bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d66bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d66be:	2500      	movs	r5, #0
   d66c0:	1cec      	adds	r4, r5, #3
   d66c2:	428c      	cmp	r4, r1
   d66c4:	d80d      	bhi.n	d66e2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d66c6:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d66c8:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d66ca:	5d87      	ldrb	r7, [r0, r6]
   d66cc:	4297      	cmp	r7, r2
   d66ce:	d105      	bne.n	d66dc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d66d0:	4426      	add	r6, r4
   d66d2:	42b1      	cmp	r1, r6
   d66d4:	d305      	bcc.n	d66e2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d66d6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d66d8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d66da:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d66dc:	3401      	adds	r4, #1
   d66de:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d66e0:	e7ee      	b.n	d66c0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d66e2:	2000      	movs	r0, #0
   d66e4:	e7f9      	b.n	d66da <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d66e6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d66e6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d66ea:	4604      	mov	r4, r0
   d66ec:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d66f0:	461e      	mov	r6, r3
   d66f2:	4689      	mov	r9, r1
   d66f4:	ab01      	add	r3, sp, #4
   d66f6:	4690      	mov	r8, r2
   d66f8:	460a      	mov	r2, r1
   d66fa:	6a01      	ldr	r1, [r0, #32]
   d66fc:	f7ff ffde 	bl	d66bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d6700:	6a25      	ldr	r5, [r4, #32]
   d6702:	1cb3      	adds	r3, r6, #2
   d6704:	bb17      	cbnz	r7, d674c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d6706:	b308      	cbz	r0, d674c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d6708:	195f      	adds	r7, r3, r5
   d670a:	1a3f      	subs	r7, r7, r0
   d670c:	2f1f      	cmp	r7, #31
   d670e:	d819      	bhi.n	d6744 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6710:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d6714:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6718:	eba5 0209 	sub.w	r2, r5, r9
   d671c:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d671e:	eb00 0109 	add.w	r1, r0, r9
   d6722:	eb06 000a 	add.w	r0, r6, sl
   d6726:	b292      	uxth	r2, r2
   d6728:	4421      	add	r1, r4
   d672a:	4420      	add	r0, r4
   d672c:	f003 f8f2 	bl	d9914 <memmove>
            selfData_[offset] = len + 1;
   d6730:	1c73      	adds	r3, r6, #1
   d6732:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d6736:	4632      	mov	r2, r6
   d6738:	4641      	mov	r1, r8
   d673a:	eb04 000a 	add.w	r0, r4, sl
   d673e:	f003 f8db 	bl	d98f8 <memcpy>
            selfLen_ = staLen + len + 2;
   d6742:	6227      	str	r7, [r4, #32]
}
   d6744:	6a20      	ldr	r0, [r4, #32]
   d6746:	b002      	add	sp, #8
   d6748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d674c:	442b      	add	r3, r5
   d674e:	2b1f      	cmp	r3, #31
   d6750:	d8f8      	bhi.n	d6744 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d6752:	1c73      	adds	r3, r6, #1
   d6754:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d6756:	1ca8      	adds	r0, r5, #2
   d6758:	4425      	add	r5, r4
   d675a:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d675c:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d675e:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d6762:	4641      	mov	r1, r8
   d6764:	4420      	add	r0, r4
   d6766:	f003 f8c7 	bl	d98f8 <memcpy>
        selfLen_ += len;
   d676a:	6a23      	ldr	r3, [r4, #32]
   d676c:	4433      	add	r3, r6
   d676e:	6223      	str	r3, [r4, #32]
   d6770:	e7e8      	b.n	d6744 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
	...

000d6774 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d6774:	4a02      	ldr	r2, [pc, #8]	; (d6780 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d6776:	2100      	movs	r1, #0
   d6778:	200a      	movs	r0, #10
   d677a:	f7ff ba57 	b.w	d5c2c <panic_>
   d677e:	bf00      	nop
   d6780:	000d5785 	.word	0x000d5785

000d6784 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6784:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6786:	b538      	push	{r3, r4, r5, lr}
   d6788:	4604      	mov	r4, r0
	  switch (__op)
   d678a:	d007      	beq.n	d679c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x18>
   d678c:	2a03      	cmp	r2, #3
   d678e:	d011      	beq.n	d67b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x30>
   d6790:	2a01      	cmp	r2, #1
   d6792:	d101      	bne.n	d6798 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6794:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d6796:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6798:	2000      	movs	r0, #0
   d679a:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d679c:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d679e:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d67a0:	f7fd fc79 	bl	d4096 <_Znwj>
   d67a4:	4603      	mov	r3, r0
   d67a6:	2800      	cmp	r0, #0
   d67a8:	d0f5      	beq.n	d6796 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
   d67aa:	e895 0003 	ldmia.w	r5, {r0, r1}
   d67ae:	e883 0003 	stmia.w	r3, {r0, r1}
   d67b2:	e7f0      	b.n	d6796 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d67b4:	6800      	ldr	r0, [r0, #0]
   d67b6:	2800      	cmp	r0, #0
   d67b8:	d0ee      	beq.n	d6798 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
   d67ba:	2108      	movs	r1, #8
   d67bc:	f002 fa49 	bl	d8c52 <_ZdlPvj>
   d67c0:	e7ea      	b.n	d6798 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>

000d67c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	  switch (__op)
   d67c2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d67c4:	b538      	push	{r3, r4, r5, lr}
   d67c6:	4604      	mov	r4, r0
	  switch (__op)
   d67c8:	d007      	beq.n	d67da <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
   d67ca:	2a03      	cmp	r2, #3
   d67cc:	d011      	beq.n	d67f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
   d67ce:	2a01      	cmp	r2, #1
   d67d0:	d101      	bne.n	d67d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d67d2:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d67d4:	6023      	str	r3, [r4, #0]
	}
   d67d6:	2000      	movs	r0, #0
   d67d8:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d67da:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d67dc:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d67de:	f7fd fc5a 	bl	d4096 <_Znwj>
   d67e2:	4603      	mov	r3, r0
   d67e4:	2800      	cmp	r0, #0
   d67e6:	d0f5      	beq.n	d67d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
   d67e8:	e895 0003 	ldmia.w	r5, {r0, r1}
   d67ec:	e883 0003 	stmia.w	r3, {r0, r1}
   d67f0:	e7f0      	b.n	d67d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d67f2:	6800      	ldr	r0, [r0, #0]
   d67f4:	2800      	cmp	r0, #0
   d67f6:	d0ee      	beq.n	d67d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
   d67f8:	2108      	movs	r1, #8
   d67fa:	f002 fa2a 	bl	d8c52 <_ZdlPvj>
   d67fe:	e7ea      	b.n	d67d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

000d6800 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6800:	b430      	push	{r4, r5}
   d6802:	460d      	mov	r5, r1
   d6804:	4611      	mov	r1, r2
   d6806:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   d6808:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d680a:	6809      	ldr	r1, [r1, #0]
   d680c:	6828      	ldr	r0, [r5, #0]
   d680e:	e9d3 4300 	ldrd	r4, r3, [r3]
   d6812:	46a4      	mov	ip, r4
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d6814:	bc30      	pop	{r4, r5}
   d6816:	4760      	bx	ip

000d6818 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6818:	4603      	mov	r3, r0
   d681a:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   d681c:	681b      	ldr	r3, [r3, #0]
   d681e:	e9d3 2100 	ldrd	r2, r1, [r3]
   d6822:	4710      	bx	r2

000d6824 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d6824:	b510      	push	{r4, lr}
      if (_M_manager)
   d6826:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6828:	4604      	mov	r4, r0
      if (_M_manager)
   d682a:	b113      	cbz	r3, d6832 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d682c:	2203      	movs	r2, #3
   d682e:	4601      	mov	r1, r0
   d6830:	4798      	blx	r3
    }
   d6832:	4620      	mov	r0, r4
   d6834:	bd10      	pop	{r4, pc}

000d6836 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6836:	b510      	push	{r4, lr}
   d6838:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d683a:	3058      	adds	r0, #88	; 0x58
   d683c:	f7ff fff2 	bl	d6824 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   d6840:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   d6844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6848:	f7ff bd3f 	b.w	d62ca <_ZN6StringD1Ev>

000d684c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d684c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6850:	b2da      	uxtb	r2, r3
   d6852:	2a09      	cmp	r2, #9
   d6854:	d801      	bhi.n	d685a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d6856:	4618      	mov	r0, r3
   d6858:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d685a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d685e:	2b05      	cmp	r3, #5
   d6860:	d801      	bhi.n	d6866 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d6862:	3857      	subs	r0, #87	; 0x57
   d6864:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d6866:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d686a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d686c:	bf94      	ite	ls
   d686e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d6870:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d6874:	4770      	bx	lr

000d6876 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d6876:	b510      	push	{r4, lr}
            locked_(false) {
   d6878:	2300      	movs	r3, #0
    WiringBleLock() :
   d687a:	4604      	mov	r4, r0
            locked_(false) {
   d687c:	7003      	strb	r3, [r0, #0]
        lock();
   d687e:	f7ff ff05 	bl	d668c <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d6882:	4620      	mov	r0, r4
   d6884:	bd10      	pop	{r4, pc}

000d6886 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d6886:	b510      	push	{r4, lr}
        if (locked_) {
   d6888:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d688a:	4604      	mov	r4, r0
        if (locked_) {
   d688c:	b10b      	cbz	r3, d6892 <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d688e:	f7ff ff09 	bl	d66a4 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d6892:	4620      	mov	r0, r4
   d6894:	bd10      	pop	{r4, pc}

000d6896 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d6896:	b082      	sub	sp, #8
   d6898:	4603      	mov	r3, r0
    address_ = addr;
   d689a:	6808      	ldr	r0, [r1, #0]
   d689c:	6849      	ldr	r1, [r1, #4]
   d689e:	466a      	mov	r2, sp
   d68a0:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d68a2:	466a      	mov	r2, sp
   d68a4:	ca03      	ldmia	r2!, {r0, r1}
   d68a6:	6018      	str	r0, [r3, #0]
}
   d68a8:	4618      	mov	r0, r3
    address_ = addr.address_;
   d68aa:	6059      	str	r1, [r3, #4]
}
   d68ac:	b002      	add	sp, #8
   d68ae:	4770      	bx	lr

000d68b0 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d68b0:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d68b2:	7982      	ldrb	r2, [r0, #6]
   d68b4:	798b      	ldrb	r3, [r1, #6]
   d68b6:	429a      	cmp	r2, r3
   d68b8:	d106      	bne.n	d68c8 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d68ba:	2206      	movs	r2, #6
   d68bc:	f003 f80e 	bl	d98dc <memcmp>
   d68c0:	fab0 f080 	clz	r0, r0
   d68c4:	0940      	lsrs	r0, r0, #5
}
   d68c6:	bd08      	pop	{r3, pc}
    return false;
   d68c8:	2000      	movs	r0, #0
   d68ca:	e7fc      	b.n	d68c6 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d68cc <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d68cc:	f04f 33ff 	mov.w	r3, #4294967295
   d68d0:	6003      	str	r3, [r0, #0]
   d68d2:	8083      	strh	r3, [r0, #4]
}
   d68d4:	2000      	movs	r0, #0
   d68d6:	4770      	bx	lr

000d68d8 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d68d8:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d68da:	b508      	push	{r3, lr}
        : address_{} {
   d68dc:	6001      	str	r1, [r0, #0]
   d68de:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d68e0:	4602      	mov	r2, r0
    clear();
   d68e2:	f7ff fff3 	bl	d68cc <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d68e6:	7191      	strb	r1, [r2, #6]
}
   d68e8:	4610      	mov	r0, r2
   d68ea:	bd08      	pop	{r3, pc}

000d68ec <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d68ec:	2201      	movs	r2, #1
   d68ee:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d68f0:	4a06      	ldr	r2, [pc, #24]	; (d690c <_ZN8particle7BleUuidC1Ev+0x20>)
   d68f2:	6811      	ldr	r1, [r2, #0]
   d68f4:	6001      	str	r1, [r0, #0]
   d68f6:	6851      	ldr	r1, [r2, #4]
   d68f8:	6041      	str	r1, [r0, #4]
   d68fa:	8911      	ldrh	r1, [r2, #8]
   d68fc:	7a92      	ldrb	r2, [r2, #10]
   d68fe:	7282      	strb	r2, [r0, #10]
   d6900:	2200      	movs	r2, #0
   d6902:	8101      	strh	r1, [r0, #8]
   d6904:	f8c0 200b 	str.w	r2, [r0, #11]
   d6908:	73c2      	strb	r2, [r0, #15]
}
   d690a:	4770      	bx	lr
   d690c:	000da16c 	.word	0x000da16c

000d6910 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d6910:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d6912:	690b      	ldr	r3, [r1, #16]
   d6914:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6916:	f101 0210 	add.w	r2, r1, #16
   d691a:	4603      	mov	r3, r0
   d691c:	f851 4b04 	ldr.w	r4, [r1], #4
   d6920:	f843 4b04 	str.w	r4, [r3], #4
   d6924:	4291      	cmp	r1, r2
   d6926:	d1f9      	bne.n	d691c <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d6928:	bd10      	pop	{r4, pc}

000d692a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d692a:	b510      	push	{r4, lr}
    if (uuid128) {
   d692c:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d692e:	4604      	mov	r4, r0
    if (uuid128) {
   d6930:	b1b1      	cbz	r1, d6960 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d6932:	2a01      	cmp	r2, #1
   d6934:	f101 0210 	add.w	r2, r1, #16
   d6938:	d10a      	bne.n	d6950 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d693a:	4601      	mov	r1, r0
   d693c:	f853 0b04 	ldr.w	r0, [r3], #4
   d6940:	f841 0b04 	str.w	r0, [r1], #4
   d6944:	4293      	cmp	r3, r2
   d6946:	d1f9      	bne.n	d693c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d6948:	2301      	movs	r3, #1
   d694a:	6123      	str	r3, [r4, #16]
}
   d694c:	4620      	mov	r0, r4
   d694e:	bd10      	pop	{r4, pc}
   d6950:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d6952:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d6956:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d695a:	429a      	cmp	r2, r3
   d695c:	d1f9      	bne.n	d6952 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d695e:	e7f3      	b.n	d6948 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d6960:	2210      	movs	r2, #16
   d6962:	f002 fff1 	bl	d9948 <memset>
   d6966:	e7f1      	b.n	d694c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d6968 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d6968:	b538      	push	{r3, r4, r5, lr}
   d696a:	4604      	mov	r4, r0
   d696c:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d696e:	461a      	mov	r2, r3
   d6970:	f7ff ffdb 	bl	d692a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d6974:	81a5      	strh	r5, [r4, #12]
}
   d6976:	4620      	mov	r0, r4
   d6978:	bd38      	pop	{r3, r4, r5, pc}
	...

000d697c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d697c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d697e:	6902      	ldr	r2, [r0, #16]
   d6980:	b922      	cbnz	r2, d698c <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d6982:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6984:	3800      	subs	r0, #0
   d6986:	bf18      	it	ne
   d6988:	2001      	movne	r0, #1
}
   d698a:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d698c:	4902      	ldr	r1, [pc, #8]	; (d6998 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d698e:	2210      	movs	r2, #16
   d6990:	f002 ffa4 	bl	d98dc <memcmp>
   d6994:	e7f6      	b.n	d6984 <_ZNK8particle7BleUuid7isValidEv+0x8>
   d6996:	bf00      	nop
   d6998:	000da18c 	.word	0x000da18c

000d699c <_ZNK8particle7BleUuid4typeEv>:
}
   d699c:	6900      	ldr	r0, [r0, #16]
   d699e:	4770      	bx	lr

000d69a0 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d69a0:	b538      	push	{r3, r4, r5, lr}
   d69a2:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d69a4:	2214      	movs	r2, #20
   d69a6:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d69a8:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d69aa:	f002 ffcd 	bl	d9948 <memset>
    if (type_ == BleUuidType::SHORT) {
   d69ae:	6923      	ldr	r3, [r4, #16]
   d69b0:	b93b      	cbnz	r3, d69c2 <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d69b2:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d69b4:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d69b6:	7b23      	ldrb	r3, [r4, #12]
   d69b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d69bc:	802b      	strh	r3, [r5, #0]
}
   d69be:	4628      	mov	r0, r5
   d69c0:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d69c2:	2301      	movs	r3, #1
   d69c4:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d69c6:	f104 0210 	add.w	r2, r4, #16
   d69ca:	462b      	mov	r3, r5
   d69cc:	f854 1b04 	ldr.w	r1, [r4], #4
   d69d0:	f843 1b04 	str.w	r1, [r3], #4
   d69d4:	4294      	cmp	r4, r2
   d69d6:	d1f9      	bne.n	d69cc <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d69d8:	e7f1      	b.n	d69be <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d69da <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d69da:	7b42      	ldrb	r2, [r0, #13]
   d69dc:	7b00      	ldrb	r0, [r0, #12]
}
   d69de:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d69e2:	4770      	bx	lr

000d69e4 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d69e4:	4770      	bx	lr

000d69e6 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d69e6:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d69e8:	6902      	ldr	r2, [r0, #16]
   d69ea:	690b      	ldr	r3, [r1, #16]
   d69ec:	429a      	cmp	r2, r3
   d69ee:	d106      	bne.n	d69fe <_ZNK8particle7BleUuideqERKS0_+0x18>
   d69f0:	2210      	movs	r2, #16
   d69f2:	f002 ff73 	bl	d98dc <memcmp>
   d69f6:	fab0 f080 	clz	r0, r0
   d69fa:	0940      	lsrs	r0, r0, #5
}
   d69fc:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d69fe:	2000      	movs	r0, #0
   d6a00:	e7fc      	b.n	d69fc <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d6a04 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d6a04:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d6a06:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d6a0a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6a0c:	4b32      	ldr	r3, [pc, #200]	; (d6ad8 <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d6a0e:	681a      	ldr	r2, [r3, #0]
   d6a10:	6002      	str	r2, [r0, #0]
   d6a12:	685a      	ldr	r2, [r3, #4]
   d6a14:	6042      	str	r2, [r0, #4]
   d6a16:	2500      	movs	r5, #0
   d6a18:	891a      	ldrh	r2, [r3, #8]
   d6a1a:	7a9b      	ldrb	r3, [r3, #10]
   d6a1c:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d6a1e:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6a20:	7283      	strb	r3, [r0, #10]
   d6a22:	f8c0 500b 	str.w	r5, [r0, #11]
   d6a26:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d6a28:	460e      	mov	r6, r1
   d6a2a:	b321      	cbz	r1, d6a76 <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d6a2c:	2124      	movs	r1, #36	; 0x24
   d6a2e:	4630      	mov	r0, r6
   d6a30:	f002 ffe3 	bl	d99fa <strnlen>
   d6a34:	2804      	cmp	r0, #4
   d6a36:	d121      	bne.n	d6a7c <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d6a38:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6a3c:	af01      	add	r7, sp, #4
   d6a3e:	1cb5      	adds	r5, r6, #2
   d6a40:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d6a42:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d6a46:	f7ff ff01 	bl	d684c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d6a4a:	f1b0 0800 	subs.w	r8, r0, #0
   d6a4e:	db10      	blt.n	d6a72 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d6a50:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d6a54:	f7ff fefa 	bl	d684c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d6a58:	2800      	cmp	r0, #0
   d6a5a:	db0a      	blt.n	d6a72 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d6a5c:	3502      	adds	r5, #2
   d6a5e:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d6a62:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d6a64:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d6a68:	d1eb      	bne.n	d6a42 <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d6a6a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d6a6e:	ba5b      	rev16	r3, r3
   d6a70:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d6a72:	2300      	movs	r3, #0
   d6a74:	6123      	str	r3, [r4, #16]
}
   d6a76:	b002      	add	sp, #8
   d6a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d6a7c:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6a7e:	2124      	movs	r1, #36	; 0x24
   d6a80:	4630      	mov	r0, r6
   d6a82:	f002 ffba 	bl	d99fa <strnlen>
   d6a86:	42a8      	cmp	r0, r5
   d6a88:	d806      	bhi.n	d6a98 <_ZN8particle7BleUuid9constructEPKc+0x94>
   d6a8a:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d6a8c:	2300      	movs	r3, #0
    while (len > 0) {
   d6a8e:	42bc      	cmp	r4, r7
   d6a90:	d0f1      	beq.n	d6a76 <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d6a92:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d6a96:	e7fa      	b.n	d6a8e <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6a98:	2f00      	cmp	r7, #0
   d6a9a:	d0ec      	beq.n	d6a76 <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d6a9c:	5d70      	ldrb	r0, [r6, r5]
   d6a9e:	f7ff fed5 	bl	d684c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d6aa2:	0603      	lsls	r3, r0, #24
   d6aa4:	d415      	bmi.n	d6ad2 <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d6aa6:	0100      	lsls	r0, r0, #4
   d6aa8:	3f01      	subs	r7, #1
   d6aaa:	fa5f f880 	uxtb.w	r8, r0
   d6aae:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d6ab2:	2124      	movs	r1, #36	; 0x24
   d6ab4:	4630      	mov	r0, r6
   d6ab6:	f002 ffa0 	bl	d99fa <strnlen>
   d6aba:	3501      	adds	r5, #1
   d6abc:	42a8      	cmp	r0, r5
   d6abe:	d908      	bls.n	d6ad2 <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d6ac0:	5d70      	ldrb	r0, [r6, r5]
   d6ac2:	f7ff fec3 	bl	d684c <_ZN8particle11hexToNibbleEc>
   d6ac6:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d6ac8:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d6aca:	bfa4      	itt	ge
   d6acc:	ea40 0008 	orrge.w	r0, r0, r8
   d6ad0:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6ad2:	3501      	adds	r5, #1
   d6ad4:	e7d3      	b.n	d6a7e <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d6ad6:	bf00      	nop
   d6ad8:	000da16c 	.word	0x000da16c

000d6adc <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d6adc:	b513      	push	{r0, r1, r4, lr}
   d6ade:	4604      	mov	r4, r0
   d6ae0:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d6ae2:	f7ff ff03 	bl	d68ec <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d6ae6:	4620      	mov	r0, r4
   d6ae8:	9901      	ldr	r1, [sp, #4]
   d6aea:	f7ff ff8b 	bl	d6a04 <_ZN8particle7BleUuid9constructEPKc>
}
   d6aee:	4620      	mov	r0, r4
   d6af0:	b002      	add	sp, #8
   d6af2:	bd10      	pop	{r4, pc}

000d6af4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d6af4:	b430      	push	{r4, r5}
   d6af6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d6afa:	b912      	cbnz	r2, d6b02 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d6afc:	6a00      	ldr	r0, [r0, #32]
}
   d6afe:	bc30      	pop	{r4, r5}
   d6b00:	4770      	bx	lr
   d6b02:	9502      	str	r5, [sp, #8]
   d6b04:	bc30      	pop	{r4, r5}
   d6b06:	f7ff bdee 	b.w	d66e6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d6b0a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d6b0a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6b0c:	4604      	mov	r4, r0
          selfLen_(0) {
   d6b0e:	4602      	mov	r2, r0
   d6b10:	f100 011f 	add.w	r1, r0, #31
   d6b14:	2300      	movs	r3, #0
   d6b16:	f802 3b01 	strb.w	r3, [r2], #1
   d6b1a:	4291      	cmp	r1, r2
   d6b1c:	d1fb      	bne.n	d6b16 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d6b1e:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6b20:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d6b22:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6b24:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d6b26:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6b2a:	4619      	mov	r1, r3
   d6b2c:	f10d 020f 	add.w	r2, sp, #15
   d6b30:	4620      	mov	r0, r4
   d6b32:	f7ff ffdf 	bl	d6af4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d6b36:	4620      	mov	r0, r4
   d6b38:	b004      	add	sp, #16
   d6b3a:	bd10      	pop	{r4, pc}

000d6b3c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d6b3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d6b3e:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d6b40:	460e      	mov	r6, r1
   d6b42:	ab01      	add	r3, sp, #4
   d6b44:	6a01      	ldr	r1, [r0, #32]
   d6b46:	4604      	mov	r4, r0
   d6b48:	f7ff fdb8 	bl	d66bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d6b4c:	4605      	mov	r5, r0
   d6b4e:	b178      	cbz	r0, d6b70 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d6b50:	9801      	ldr	r0, [sp, #4]
   d6b52:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d6b54:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d6b56:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d6b58:	4421      	add	r1, r4
   d6b5a:	1b52      	subs	r2, r2, r5
   d6b5c:	4420      	add	r0, r4
   d6b5e:	f002 fecb 	bl	d98f8 <memcpy>
        selfLen_ -= len;
   d6b62:	6a20      	ldr	r0, [r4, #32]
   d6b64:	1b40      	subs	r0, r0, r5
   d6b66:	6220      	str	r0, [r4, #32]
        remove(type);
   d6b68:	4631      	mov	r1, r6
   d6b6a:	4620      	mov	r0, r4
   d6b6c:	f7ff ffe6 	bl	d6b3c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d6b70:	b002      	add	sp, #8
   d6b72:	bd70      	pop	{r4, r5, r6, pc}

000d6b74 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d6b74:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   d6b76:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6b7a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d6b7c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   d6b7e:	8043      	strh	r3, [r0, #2]
   d6b80:	220e      	movs	r2, #14
   d6b82:	4629      	mov	r1, r5
   d6b84:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d6b86:	7105      	strb	r5, [r0, #4]
   d6b88:	3006      	adds	r0, #6
   d6b8a:	f002 fedd 	bl	d9948 <memset>
   d6b8e:	f104 0014 	add.w	r0, r4, #20
   d6b92:	f7ff feab 	bl	d68ec <_ZN8particle7BleUuidC1Ev>
   d6b96:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d6b9a:	f7ff fea7 	bl	d68ec <_ZN8particle7BleUuidC1Ev>
   d6b9e:	4904      	ldr	r1, [pc, #16]	; (d6bb0 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d6ba0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6ba4:	f7ff fbdc 	bl	d6360 <_ZN6StringC1EPKc>
    _Function_base() : _M_manager(nullptr) { }
   d6ba8:	6565      	str	r5, [r4, #84]	; 0x54
    }
   d6baa:	4620      	mov	r0, r4
   d6bac:	bd38      	pop	{r3, r4, r5, pc}
   d6bae:	bf00      	nop
   d6bb0:	000d9f4f 	.word	0x000d9f4f

000d6bb4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d6bb4:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6bb6:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d6bba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d6bbe:	4293      	cmp	r3, r2
   d6bc0:	4618      	mov	r0, r3
   d6bc2:	d006      	beq.n	d6bd2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d6bc4:	6804      	ldr	r4, [r0, #0]
   d6bc6:	8824      	ldrh	r4, [r4, #0]
   d6bc8:	428c      	cmp	r4, r1
   d6bca:	f103 0308 	add.w	r3, r3, #8
   d6bce:	d1f6      	bne.n	d6bbe <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d6bd0:	bd10      	pop	{r4, pc}
        return nullptr;
   d6bd2:	2000      	movs	r0, #0
   d6bd4:	e7fc      	b.n	d6bd0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d6bd8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d6bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6bda:	4606      	mov	r6, r0
   d6bdc:	b085      	sub	sp, #20
   d6bde:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d6be0:	460d      	mov	r5, r1
   d6be2:	2900      	cmp	r1, #0
   d6be4:	d050      	beq.n	d6c88 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d6be6:	2a00      	cmp	r2, #0
   d6be8:	d04e      	beq.n	d6c88 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
    void onDataReceived(void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance) {
        onDataReceived((callback && instance) ? std::bind(callback, instance, _1, _2, _3) :(BleOnDataReceivedStdFunction) nullptr);
    }

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d6bea:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   d6bec:	7823      	ldrb	r3, [r4, #0]
   d6bee:	2af4      	cmp	r2, #244	; 0xf4
   d6bf0:	bf28      	it	cs
   d6bf2:	22f4      	movcs	r2, #244	; 0xf4
   d6bf4:	b343      	cbz	r3, d6c48 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d6bf6:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d6bf8:	0798      	lsls	r0, r3, #30
   d6bfa:	d509      	bpl.n	d6c10 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d6bfc:	89a0      	ldrh	r0, [r4, #12]
   d6bfe:	9203      	str	r2, [sp, #12]
   d6c00:	2300      	movs	r3, #0
   d6c02:	f7fe fe33 	bl	d586c <hal_ble_gatt_server_set_characteristic_value>
   d6c06:	2800      	cmp	r0, #0
   d6c08:	9a03      	ldr	r2, [sp, #12]
   d6c0a:	da03      	bge.n	d6c14 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d6c0c:	b005      	add	sp, #20
   d6c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d6c10:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d6c14:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d6c16:	7923      	ldrb	r3, [r4, #4]
   d6c18:	06d9      	lsls	r1, r3, #27
   d6c1a:	d509      	bpl.n	d6c30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d6c1c:	2f01      	cmp	r7, #1
   d6c1e:	d007      	beq.n	d6c30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6c20:	89a0      	ldrh	r0, [r4, #12]
   d6c22:	2300      	movs	r3, #0
   d6c24:	4629      	mov	r1, r5
}
   d6c26:	b005      	add	sp, #20
   d6c28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6c2c:	f7fe be5a 	b.w	d58e4 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d6c30:	069b      	lsls	r3, r3, #26
   d6c32:	d5eb      	bpl.n	d6c0c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d6c34:	2f02      	cmp	r7, #2
   d6c36:	d0e9      	beq.n	d6c0c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6c38:	89a0      	ldrh	r0, [r4, #12]
   d6c3a:	2300      	movs	r3, #0
   d6c3c:	4629      	mov	r1, r5
}
   d6c3e:	b005      	add	sp, #20
   d6c40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6c44:	f7fe be58 	b.w	d58f8 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d6c48:	8860      	ldrh	r0, [r4, #2]
   d6c4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6c4e:	4288      	cmp	r0, r1
   d6c50:	d01c      	beq.n	d6c8c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d6c52:	7921      	ldrb	r1, [r4, #4]
   d6c54:	074e      	lsls	r6, r1, #29
   d6c56:	d501      	bpl.n	d6c5c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d6c58:	2f01      	cmp	r7, #1
   d6c5a:	d104      	bne.n	d6c66 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d6c5c:	070b      	lsls	r3, r1, #28
   d6c5e:	d409      	bmi.n	d6c74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d6c60:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d6c64:	e7d2      	b.n	d6c0c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d6c66:	89a1      	ldrh	r1, [r4, #12]
   d6c68:	9300      	str	r3, [sp, #0]
   d6c6a:	4613      	mov	r3, r2
   d6c6c:	462a      	mov	r2, r5
   d6c6e:	f7fe fe11 	bl	d5894 <hal_ble_gatt_client_write_without_response>
   d6c72:	e7cb      	b.n	d6c0c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d6c74:	2f02      	cmp	r7, #2
   d6c76:	d0f3      	beq.n	d6c60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d6c78:	2300      	movs	r3, #0
   d6c7a:	89a1      	ldrh	r1, [r4, #12]
   d6c7c:	9300      	str	r3, [sp, #0]
   d6c7e:	4613      	mov	r3, r2
   d6c80:	462a      	mov	r2, r5
   d6c82:	f7fe fdfd 	bl	d5880 <hal_ble_gatt_client_write_with_response>
   d6c86:	e7c1      	b.n	d6c0c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d6c88:	4802      	ldr	r0, [pc, #8]	; (d6c94 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d6c8a:	e7bf      	b.n	d6c0c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d6c8c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d6c90:	e7bc      	b.n	d6c0c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d6c92:	bf00      	nop
   d6c94:	fffffef2 	.word	0xfffffef2

000d6c98 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d6c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6c9a:	460c      	mov	r4, r1
   d6c9c:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d6c9e:	21f4      	movs	r1, #244	; 0xf4
   d6ca0:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d6ca2:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d6ca4:	f002 fea9 	bl	d99fa <strnlen>
   d6ca8:	9b01      	ldr	r3, [sp, #4]
   d6caa:	4602      	mov	r2, r0
   d6cac:	4621      	mov	r1, r4
   d6cae:	4628      	mov	r0, r5
}
   d6cb0:	b003      	add	sp, #12
   d6cb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d6cb6:	f7ff bf8f 	b.w	d6bd8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000d6cbc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d6cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6cc0:	2600      	movs	r6, #0
   d6cc2:	6006      	str	r6, [r0, #0]
   d6cc4:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6cc6:	2028      	movs	r0, #40	; 0x28
   d6cc8:	460c      	mov	r4, r1
   d6cca:	f7fd f9e4 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d6cce:	1e05      	subs	r5, r0, #0
   d6cd0:	f105 080c 	add.w	r8, r5, #12
   d6cd4:	d00f      	beq.n	d6cf6 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d6cd6:	2301      	movs	r3, #1
   d6cd8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d6cdc:	4b08      	ldr	r3, [pc, #32]	; (d6d00 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d6cde:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   d6ce0:	4640      	mov	r0, r8
   d6ce2:	f7ff fe03 	bl	d68ec <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   d6ce6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   d6ce8:	622e      	str	r6, [r5, #32]
   d6cea:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   d6cee:	4646      	mov	r6, r8
   d6cf0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6cf2:	6823      	ldr	r3, [r4, #0]
   d6cf4:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   d6cf6:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d6cfa:	4638      	mov	r0, r7
   d6cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6d00:	000da134 	.word	0x000da134

000d6d04 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d6d04:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6d06:	2500      	movs	r5, #0
   d6d08:	6005      	str	r5, [r0, #0]
   d6d0a:	4606      	mov	r6, r0
   d6d0c:	2030      	movs	r0, #48	; 0x30
   d6d0e:	f7fd f9c2 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d6d12:	4604      	mov	r4, r0
   d6d14:	b188      	cbz	r0, d6d3a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d6d16:	2301      	movs	r3, #1
   d6d18:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d6d1c:	4b09      	ldr	r3, [pc, #36]	; (d6d44 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d6d1e:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d6d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6d24:	8183      	strh	r3, [r0, #12]
   d6d26:	300e      	adds	r0, #14
   d6d28:	f7ff fdd6 	bl	d68d8 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d6d2c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d6d30:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d6d34:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d6d38:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d6d3a:	6074      	str	r4, [r6, #4]
   d6d3c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d6d3e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d6d40:	4630      	mov	r0, r6
   d6d42:	bd70      	pop	{r4, r5, r6, pc}
   d6d44:	000da150 	.word	0x000da150

000d6d48 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d6d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6d4a:	460d      	mov	r5, r1
   d6d4c:	4604      	mov	r4, r0
    WiringBleLock lk;
   d6d4e:	a801      	add	r0, sp, #4
   d6d50:	f7ff fd91 	bl	d6876 <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d6d54:	682a      	ldr	r2, [r5, #0]
   d6d56:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d6d5a:	6023      	str	r3, [r4, #0]
   d6d5c:	6853      	ldr	r3, [r2, #4]
   d6d5e:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d6d60:	a801      	add	r0, sp, #4
   d6d62:	f7ff fd90 	bl	d6886 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d6d66:	4620      	mov	r0, r4
   d6d68:	b003      	add	sp, #12
   d6d6a:	bd30      	pop	{r4, r5, pc}

000d6d6c <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d6d6c:	b530      	push	{r4, r5, lr}
   d6d6e:	4605      	mov	r5, r0
   d6d70:	b087      	sub	sp, #28
   d6d72:	460c      	mov	r4, r1
    WiringBleLock lk;
   d6d74:	a801      	add	r0, sp, #4
   d6d76:	f7ff fd7e 	bl	d6876 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d6d7a:	682a      	ldr	r2, [r5, #0]
   d6d7c:	6823      	ldr	r3, [r4, #0]
   d6d7e:	8812      	ldrh	r2, [r2, #0]
   d6d80:	881b      	ldrh	r3, [r3, #0]
   d6d82:	429a      	cmp	r2, r3
   d6d84:	d10d      	bne.n	d6da2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d6d86:	4629      	mov	r1, r5
   d6d88:	a802      	add	r0, sp, #8
   d6d8a:	f7ff ffdd 	bl	d6d48 <_ZNK8particle13BlePeerDevice7addressEv>
   d6d8e:	4621      	mov	r1, r4
   d6d90:	a804      	add	r0, sp, #16
   d6d92:	f7ff ffd9 	bl	d6d48 <_ZNK8particle13BlePeerDevice7addressEv>
   d6d96:	a904      	add	r1, sp, #16
   d6d98:	a802      	add	r0, sp, #8
   d6d9a:	f7ff fd89 	bl	d68b0 <_ZNK8particle10BleAddresseqERKS0_>
   d6d9e:	4604      	mov	r4, r0
   d6da0:	b900      	cbnz	r0, d6da4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d6da2:	2400      	movs	r4, #0
    WiringBleLock lk;
   d6da4:	a801      	add	r0, sp, #4
   d6da6:	f7ff fd6e 	bl	d6886 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d6daa:	4620      	mov	r0, r4
   d6dac:	b007      	add	sp, #28
   d6dae:	bd30      	pop	{r4, r5, pc}

000d6db0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d6db0:	b510      	push	{r4, lr}
   d6db2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d6db4:	2054      	movs	r0, #84	; 0x54
   d6db6:	f7fd f96e 	bl	d4096 <_Znwj>
   d6dba:	4601      	mov	r1, r0
   d6dbc:	b160      	cbz	r0, d6dd8 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d6dbe:	2300      	movs	r3, #0
   d6dc0:	e9c0 3300 	strd	r3, r3, [r0]
   d6dc4:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d6dc8:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d6dcc:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d6dd0:	6203      	str	r3, [r0, #32]
   d6dd2:	62c3      	str	r3, [r0, #44]	; 0x2c
   d6dd4:	63c3      	str	r3, [r0, #60]	; 0x3c
   d6dd6:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d6dd8:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d6dda:	b919      	cbnz	r1, d6de4 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d6ddc:	4a09      	ldr	r2, [pc, #36]	; (d6e04 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d6dde:	200a      	movs	r0, #10
   d6de0:	f7fe ff24 	bl	d5c2c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d6de4:	2000      	movs	r0, #0
   d6de6:	f7fe fd05 	bl	d57f4 <hal_ble_stack_init>
   d6dea:	b120      	cbz	r0, d6df6 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d6dec:	4a05      	ldr	r2, [pc, #20]	; (d6e04 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d6dee:	2100      	movs	r1, #0
   d6df0:	200a      	movs	r0, #10
   d6df2:	f7fe ff1b 	bl	d5c2c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d6df6:	6821      	ldr	r1, [r4, #0]
   d6df8:	4803      	ldr	r0, [pc, #12]	; (d6e08 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d6dfa:	2200      	movs	r2, #0
   d6dfc:	f7fe fd68 	bl	d58d0 <hal_ble_set_callback_on_periph_link_events>
}
   d6e00:	4620      	mov	r0, r4
   d6e02:	bd10      	pop	{r4, pc}
   d6e04:	000d5785 	.word	0x000d5785
   d6e08:	000d7291 	.word	0x000d7291

000d6e0c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d6e0c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d6e0e:	4c0b      	ldr	r4, [pc, #44]	; (d6e3c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6e10:	7823      	ldrb	r3, [r4, #0]
   d6e12:	f3bf 8f5b 	dmb	ish
   d6e16:	07db      	lsls	r3, r3, #31
   d6e18:	d40e      	bmi.n	d6e38 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d6e1a:	4620      	mov	r0, r4
   d6e1c:	f7fd f941 	bl	d40a2 <__cxa_guard_acquire>
   d6e20:	b150      	cbz	r0, d6e38 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d6e22:	4807      	ldr	r0, [pc, #28]	; (d6e40 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6e24:	f7ff ffc4 	bl	d6db0 <_ZN8particle14BleLocalDeviceC1Ev>
   d6e28:	4620      	mov	r0, r4
   d6e2a:	f7fd f93f 	bl	d40ac <__cxa_guard_release>
   d6e2e:	4a05      	ldr	r2, [pc, #20]	; (d6e44 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d6e30:	4905      	ldr	r1, [pc, #20]	; (d6e48 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d6e32:	4803      	ldr	r0, [pc, #12]	; (d6e40 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6e34:	f001 ff08 	bl	d8c48 <__aeabi_atexit>
    return instance;
}
   d6e38:	4801      	ldr	r0, [pc, #4]	; (d6e40 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6e3a:	bd10      	pop	{r4, pc}
   d6e3c:	2003e654 	.word	0x2003e654
   d6e40:	2003e660 	.word	0x2003e660
   d6e44:	2003e0ac 	.word	0x2003e0ac
   d6e48:	000d7051 	.word	0x000d7051

000d6e4c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d6e4c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   d6e4e:	6803      	ldr	r3, [r0, #0]
   d6e50:	3b09      	subs	r3, #9
   d6e52:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d6e54:	b08d      	sub	sp, #52	; 0x34
   d6e56:	4604      	mov	r4, r0
   d6e58:	460d      	mov	r5, r1
    switch (event->type) {
   d6e5a:	d811      	bhi.n	d6e80 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d6e5c:	f7ff ffd6 	bl	d6e0c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d6e60:	88a1      	ldrh	r1, [r4, #4]
   d6e62:	6800      	ldr	r0, [r0, #0]
   d6e64:	f7ff fea6 	bl	d6bb4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d6e68:	4603      	mov	r3, r0
   d6e6a:	b958      	cbnz	r0, d6e84 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d6e6c:	2220      	movs	r2, #32
   d6e6e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   d6e72:	4a0b      	ldr	r2, [pc, #44]	; (d6ea0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d6e74:	9200      	str	r2, [sp, #0]
   d6e76:	490b      	ldr	r1, [pc, #44]	; (d6ea4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d6e78:	aa04      	add	r2, sp, #16
   d6e7a:	2032      	movs	r0, #50	; 0x32
   d6e7c:	f7fe fede 	bl	d5c3c <log_message>
}
   d6e80:	b00d      	add	sp, #52	; 0x34
   d6e82:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   d6e84:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   d6e86:	2a00      	cmp	r2, #0
   d6e88:	d0fa      	beq.n	d6e80 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   d6e8a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6e8e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   d6e92:	e9cd 1203 	strd	r1, r2, [sp, #12]
   d6e96:	6dac      	ldr	r4, [r5, #88]	; 0x58
   d6e98:	aa04      	add	r2, sp, #16
   d6e9a:	a903      	add	r1, sp, #12
   d6e9c:	47a0      	blx	r4
}
   d6e9e:	e7ef      	b.n	d6e80 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   d6ea0:	000da041 	.word	0x000da041
   d6ea4:	000da01a 	.word	0x000da01a

000d6ea8 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d6ea8:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   d6eaa:	2000      	movs	r0, #0
   d6eac:	f7fe fca2 	bl	d57f4 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   d6eb0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d6eb4:	bd08      	pop	{r3, pc}

000d6eb6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d6eb6:	4608      	mov	r0, r1
   d6eb8:	b911      	cbnz	r1, d6ec0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d6eba:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d6ebc:	f7fe bcaa 	b.w	d5814 <hal_ble_gap_set_advertising_data>
   d6ec0:	6a09      	ldr	r1, [r1, #32]
   d6ec2:	2200      	movs	r2, #0
   d6ec4:	e7fa      	b.n	d6ebc <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d6ec6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d6ec6:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d6ec8:	4608      	mov	r0, r1
   d6eca:	b929      	cbnz	r1, d6ed8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d6ecc:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d6ece:	b003      	add	sp, #12
   d6ed0:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6ed4:	f7fe bca6 	b.w	d5824 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d6ed8:	2101      	movs	r1, #1
   d6eda:	9001      	str	r0, [sp, #4]
   d6edc:	f7ff fe2e 	bl	d6b3c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6ee0:	9801      	ldr	r0, [sp, #4]
   d6ee2:	2200      	movs	r2, #0
   d6ee4:	6a01      	ldr	r1, [r0, #32]
   d6ee6:	e7f2      	b.n	d6ece <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d6ee8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d6ee8:	b538      	push	{r3, r4, r5, lr}
   d6eea:	4604      	mov	r4, r0
   d6eec:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   d6eee:	f7ff ffe2 	bl	d6eb6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d6ef2:	2800      	cmp	r0, #0
   d6ef4:	db0a      	blt.n	d6f0c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   d6ef6:	4629      	mov	r1, r5
   d6ef8:	4620      	mov	r0, r4
   d6efa:	f7ff ffe4 	bl	d6ec6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d6efe:	2800      	cmp	r0, #0
   d6f00:	db04      	blt.n	d6f0c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   d6f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   d6f06:	2000      	movs	r0, #0
   d6f08:	f7fe bc94 	b.w	d5834 <hal_ble_gap_start_advertising>
}
   d6f0c:	bd38      	pop	{r3, r4, r5, pc}

000d6f0e <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   d6f0e:	6803      	ldr	r3, [r0, #0]
   d6f10:	69d8      	ldr	r0, [r3, #28]
}
   d6f12:	2800      	cmp	r0, #0
   d6f14:	bfd4      	ite	le
   d6f16:	2000      	movle	r0, #0
   d6f18:	2001      	movgt	r0, #1
   d6f1a:	4770      	bx	lr

000d6f1c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d6f1c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6f1e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d6f20:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6f22:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6f24:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d6f26:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6f28:	f7fd f8b5 	bl	d4096 <_Znwj>
   d6f2c:	b118      	cbz	r0, d6f36 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d6f2e:	682b      	ldr	r3, [r5, #0]
   d6f30:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6f32:	686b      	ldr	r3, [r5, #4]
   d6f34:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d6f36:	4b03      	ldr	r3, [pc, #12]	; (d6f44 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   d6f38:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6f3a:	4b03      	ldr	r3, [pc, #12]	; (d6f48 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6f3c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6f3e:	60a3      	str	r3, [r4, #8]
      }
   d6f40:	4620      	mov	r0, r4
   d6f42:	bd38      	pop	{r3, r4, r5, pc}
   d6f44:	000d6801 	.word	0x000d6801
   d6f48:	000d6785 	.word	0x000d6785

000d6f4c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d6f4c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6f4e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d6f50:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6f52:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6f54:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d6f56:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6f58:	f7fd f89d 	bl	d4096 <_Znwj>
   d6f5c:	b118      	cbz	r0, d6f66 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   d6f5e:	682b      	ldr	r3, [r5, #0]
   d6f60:	6003      	str	r3, [r0, #0]
   d6f62:	686b      	ldr	r3, [r5, #4]
   d6f64:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d6f66:	4b03      	ldr	r3, [pc, #12]	; (d6f74 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   d6f68:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6f6a:	4b03      	ldr	r3, [pc, #12]	; (d6f78 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6f6c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6f6e:	60a3      	str	r3, [r4, #8]
      }
   d6f70:	4620      	mov	r0, r4
   d6f72:	bd38      	pop	{r3, r4, r5, pc}
   d6f74:	000d6819 	.word	0x000d6819
   d6f78:	000d67c3 	.word	0x000d67c3

000d6f7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d6f7c:	680b      	ldr	r3, [r1, #0]
   d6f7e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d6f80:	b113      	cbz	r3, d6f88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6f82:	685a      	ldr	r2, [r3, #4]
   d6f84:	3201      	adds	r2, #1
   d6f86:	605a      	str	r2, [r3, #4]
      }
   d6f88:	4770      	bx	lr

000d6f8a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d6f8a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6f8c:	f851 3b04 	ldr.w	r3, [r1], #4
   d6f90:	4604      	mov	r4, r0
   d6f92:	f840 3b04 	str.w	r3, [r0], #4
   d6f96:	f7ff fff1 	bl	d6f7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d6f9a:	6823      	ldr	r3, [r4, #0]
   d6f9c:	b90b      	cbnz	r3, d6fa2 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d6f9e:	f7ff fbe9 	bl	d6774 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d6fa2:	4620      	mov	r0, r4
   d6fa4:	bd10      	pop	{r4, pc}

000d6fa6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d6fa6:	b510      	push	{r4, lr}
   d6fa8:	f851 3b04 	ldr.w	r3, [r1], #4
   d6fac:	4604      	mov	r4, r0
   d6fae:	f840 3b04 	str.w	r3, [r0], #4
   d6fb2:	f7ff ffe3 	bl	d6f7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d6fb6:	4620      	mov	r0, r4
   d6fb8:	bd10      	pop	{r4, pc}

000d6fba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d6fba:	b510      	push	{r4, lr}
   d6fbc:	f851 3b04 	ldr.w	r3, [r1], #4
   d6fc0:	4604      	mov	r4, r0
   d6fc2:	f840 3b04 	str.w	r3, [r0], #4
   d6fc6:	f7ff ffd9 	bl	d6f7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d6fca:	4620      	mov	r0, r4
   d6fcc:	bd10      	pop	{r4, pc}

000d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d6fce:	b510      	push	{r4, lr}
   d6fd0:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d6fd2:	6800      	ldr	r0, [r0, #0]
   d6fd4:	b128      	cbz	r0, d6fe2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d6fd6:	6843      	ldr	r3, [r0, #4]
   d6fd8:	3b01      	subs	r3, #1
   d6fda:	6043      	str	r3, [r0, #4]
   d6fdc:	b90b      	cbnz	r3, d6fe2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6fde:	f7ff fb3c 	bl	d665a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d6fe2:	4620      	mov	r0, r4
   d6fe4:	bd10      	pop	{r4, pc}

000d6fe6 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d6fe6:	b510      	push	{r4, lr}
   d6fe8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d6fea:	3004      	adds	r0, #4
   d6fec:	f7ff ffef 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6ff0:	4620      	mov	r0, r4
   d6ff2:	bd10      	pop	{r4, pc}

000d6ff4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6ff4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6ff6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6ffa:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d6ffc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d7000:	42ae      	cmp	r6, r5
   d7002:	d004      	beq.n	d700e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d7004:	1d28      	adds	r0, r5, #4
   d7006:	f7ff ffe2 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d700a:	3508      	adds	r5, #8
   d700c:	e7f8      	b.n	d7000 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d700e:	6820      	ldr	r0, [r4, #0]
   d7010:	f7fe ff02 	bl	d5e18 <free>
}
   d7014:	4620      	mov	r0, r4
   d7016:	bd70      	pop	{r4, r5, r6, pc}

000d7018 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7018:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d701a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d701e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d7020:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d7024:	42ae      	cmp	r6, r5
   d7026:	d004      	beq.n	d7032 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d7028:	1d28      	adds	r0, r5, #4
   d702a:	f7ff ffd0 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d702e:	3508      	adds	r5, #8
   d7030:	e7f8      	b.n	d7024 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d7032:	6820      	ldr	r0, [r4, #0]
   d7034:	f7fe fef0 	bl	d5e18 <free>
}
   d7038:	4620      	mov	r0, r4
   d703a:	bd70      	pop	{r4, r5, r6, pc}

000d703c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d703c:	b510      	push	{r4, lr}
   d703e:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d7040:	3024      	adds	r0, #36	; 0x24
   d7042:	f7ff ffe9 	bl	d7018 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d7046:	f104 0018 	add.w	r0, r4, #24
   d704a:	f7ff ffd3 	bl	d6ff4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d704e:	bd10      	pop	{r4, pc}

000d7050 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d7050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d7052:	6804      	ldr	r4, [r0, #0]
   d7054:	4606      	mov	r6, r0
   d7056:	b324      	cbz	r4, d70a2 <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   d7058:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d705c:	f7ff fbe2 	bl	d6824 <_ZNSt14_Function_baseD1Ev>
   d7060:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d7064:	f7ff fbde 	bl	d6824 <_ZNSt14_Function_baseD1Ev>
   d7068:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d706c:	f7ff fbda 	bl	d6824 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d7070:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d7074:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d7078:	42af      	cmp	r7, r5
   d707a:	d004      	beq.n	d7086 <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d707c:	1d28      	adds	r0, r5, #4
   d707e:	f7ff ffa6 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7082:	3508      	adds	r5, #8
   d7084:	e7f8      	b.n	d7078 <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d7086:	69a0      	ldr	r0, [r4, #24]
   d7088:	f7fe fec6 	bl	d5e18 <free>
    ~BleLocalDeviceImpl() = default;
   d708c:	f104 000c 	add.w	r0, r4, #12
   d7090:	f7ff ffc2 	bl	d7018 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d7094:	4620      	mov	r0, r4
   d7096:	f7ff ffad 	bl	d6ff4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d709a:	2154      	movs	r1, #84	; 0x54
   d709c:	4620      	mov	r0, r4
   d709e:	f001 fdd8 	bl	d8c52 <_ZdlPvj>
   d70a2:	4630      	mov	r0, r6
   d70a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d70a6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   d70a6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d70a8:	b510      	push	{r4, lr}
      if (_M_empty())
   d70aa:	b90a      	cbnz	r2, d70b0 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d70ac:	f001 fdd7 	bl	d8c5e <_ZSt25__throw_bad_function_callv>
    }
   d70b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d70b4:	68c3      	ldr	r3, [r0, #12]
   d70b6:	4718      	bx	r3

000d70b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
inline void spark::Vector<T, AllocatorT>::clear() {
   d70b8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d70ba:	e9d0 5300 	ldrd	r5, r3, [r0]
inline void spark::Vector<T, AllocatorT>::clear() {
   d70be:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d70c0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d70c4:	42ae      	cmp	r6, r5
   d70c6:	d004      	beq.n	d70d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
   d70c8:	1d28      	adds	r0, r5, #4
   d70ca:	f7ff ff80 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d70ce:	3508      	adds	r5, #8
   d70d0:	e7f8      	b.n	d70c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
    size_ = 0;
   d70d2:	2300      	movs	r3, #0
   d70d4:	6063      	str	r3, [r4, #4]
}
   d70d6:	bd70      	pop	{r4, r5, r6, pc}

000d70d8 <_ZNK8particle14BleLocalDevice3offEv>:
int BleLocalDevice::off() const {
   d70d8:	b513      	push	{r0, r1, r4, lr}
   d70da:	4604      	mov	r4, r0
    CHECK(hal_ble_stack_deinit(nullptr));
   d70dc:	2000      	movs	r0, #0
   d70de:	f7fe fb91 	bl	d5804 <hal_ble_stack_deinit>
   d70e2:	2800      	cmp	r0, #0
   d70e4:	db0a      	blt.n	d70fc <_ZNK8particle14BleLocalDevice3offEv+0x24>
        WiringBleLock lk;
   d70e6:	a801      	add	r0, sp, #4
   d70e8:	f7ff fbc5 	bl	d6876 <_ZN8particle3ble13WiringBleLockC1Ev>
        return peers_;
   d70ec:	6820      	ldr	r0, [r4, #0]
        impl()->peers().clear();
   d70ee:	3018      	adds	r0, #24
   d70f0:	f7ff ffe2 	bl	d70b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
        WiringBleLock lk;
   d70f4:	a801      	add	r0, sp, #4
   d70f6:	f7ff fbc6 	bl	d6886 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   d70fa:	2000      	movs	r0, #0
}
   d70fc:	b002      	add	sp, #8
   d70fe:	bd10      	pop	{r4, pc}

000d7100 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d7100:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7104:	4604      	mov	r4, r0
   d7106:	460d      	mov	r5, r1
   d7108:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d710a:	d914      	bls.n	d7136 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d710c:	4290      	cmp	r0, r2
   d710e:	d213      	bcs.n	d7138 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d7110:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d7114:	1a75      	subs	r5, r6, r1
   d7116:	f1a1 0708 	sub.w	r7, r1, #8
   d711a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d711c:	42b7      	cmp	r7, r6
   d711e:	d018      	beq.n	d7152 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7120:	b11c      	cbz	r4, d712a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d7122:	4631      	mov	r1, r6
   d7124:	4620      	mov	r0, r4
   d7126:	f7ff ff48 	bl	d6fba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d712a:	1d30      	adds	r0, r6, #4
   d712c:	f7ff ff4f 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d7130:	3e08      	subs	r6, #8
   d7132:	3c08      	subs	r4, #8
   d7134:	e7f2      	b.n	d711c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d7136:	d00c      	beq.n	d7152 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7138:	42b5      	cmp	r5, r6
   d713a:	d00a      	beq.n	d7152 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d713c:	b11c      	cbz	r4, d7146 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d713e:	4629      	mov	r1, r5
   d7140:	4620      	mov	r0, r4
   d7142:	f7ff ff3a 	bl	d6fba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7146:	1d28      	adds	r0, r5, #4
   d7148:	f7ff ff41 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d714c:	3508      	adds	r5, #8
   d714e:	3408      	adds	r4, #8
   d7150:	e7f2      	b.n	d7138 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d7152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7154 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d7158:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d715c:	4605      	mov	r5, r0
   d715e:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d7160:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d7164:	42a7      	cmp	r7, r4
   d7166:	d103      	bne.n	d7170 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d7168:	2600      	movs	r6, #0
}
   d716a:	4630      	mov	r0, r6
   d716c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d7170:	4641      	mov	r1, r8
   d7172:	4620      	mov	r0, r4
   d7174:	f7ff fdfa 	bl	d6d6c <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d7178:	4606      	mov	r6, r0
   d717a:	b908      	cbnz	r0, d7180 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d717c:	3408      	adds	r4, #8
   d717e:	e7f1      	b.n	d7164 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d7180:	2c00      	cmp	r4, #0
   d7182:	d0f1      	beq.n	d7168 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d7184:	1d20      	adds	r0, r4, #4
   d7186:	f7ff ff22 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d718a:	e9d5 3200 	ldrd	r3, r2, [r5]
   d718e:	f104 0108 	add.w	r1, r4, #8
   d7192:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7196:	4620      	mov	r0, r4
   d7198:	f7ff ffb2 	bl	d7100 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d719c:	686b      	ldr	r3, [r5, #4]
   d719e:	3b01      	subs	r3, #1
   d71a0:	606b      	str	r3, [r5, #4]
    return true;
   d71a2:	e7e2      	b.n	d716a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d71a4 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   d71a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d71a6:	4607      	mov	r7, r0
   d71a8:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   d71aa:	4668      	mov	r0, sp
   d71ac:	f7ff fb63 	bl	d6876 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d71b0:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   d71b2:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   d71b6:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   d71ba:	42ac      	cmp	r4, r5
   d71bc:	d02b      	beq.n	d7216 <_ZNK8particle14BleLocalDevice10disconnectEv+0x72>
        hal_ble_conn_info_t connInfo = {};
   d71be:	2224      	movs	r2, #36	; 0x24
   d71c0:	2100      	movs	r1, #0
   d71c2:	a801      	add	r0, sp, #4
   d71c4:	f002 fbc0 	bl	d9948 <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   d71c8:	6823      	ldr	r3, [r4, #0]
   d71ca:	2200      	movs	r2, #0
   d71cc:	8818      	ldrh	r0, [r3, #0]
   d71ce:	a901      	add	r1, sp, #4
   d71d0:	f7fe fb6a 	bl	d58a8 <hal_ble_gap_get_connection_info>
   d71d4:	4606      	mov	r6, r0
   d71d6:	b108      	cbz	r0, d71dc <_ZNK8particle14BleLocalDevice10disconnectEv+0x38>
    for (auto& p : impl()->peers()) {
   d71d8:	3408      	adds	r4, #8
   d71da:	e7ee      	b.n	d71ba <_ZNK8particle14BleLocalDevice10disconnectEv+0x16>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   d71dc:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d71e0:	2b01      	cmp	r3, #1
   d71e2:	d1f9      	bne.n	d71d8 <_ZNK8particle14BleLocalDevice10disconnectEv+0x34>
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
   d71e4:	4668      	mov	r0, sp
   d71e6:	f7ff fa5d 	bl	d66a4 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   d71ea:	6823      	ldr	r3, [r4, #0]
   d71ec:	4631      	mov	r1, r6
   d71ee:	8818      	ldrh	r0, [r3, #0]
   d71f0:	f7fe fb28 	bl	d5844 <hal_ble_gap_disconnect>
   d71f4:	1e05      	subs	r5, r0, #0
   d71f6:	db08      	blt.n	d720a <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>
            lk.lock();
   d71f8:	4668      	mov	r0, sp
   d71fa:	f7ff fa47 	bl	d668c <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
        return peers_;
   d71fe:	6838      	ldr	r0, [r7, #0]
            impl()->peers().removeOne(p);
   d7200:	4621      	mov	r1, r4
   d7202:	3018      	adds	r0, #24
   d7204:	f7ff ffa6 	bl	d7154 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
            return SYSTEM_ERROR_NONE;
   d7208:	4635      	mov	r5, r6
    WiringBleLock lk;
   d720a:	4668      	mov	r0, sp
   d720c:	f7ff fb3b 	bl	d6886 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   d7210:	4628      	mov	r0, r5
   d7212:	b00b      	add	sp, #44	; 0x2c
   d7214:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   d7216:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   d721a:	e7f6      	b.n	d720a <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>

000d721c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d721c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d721e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7220:	6846      	ldr	r6, [r0, #4]
   d7222:	4668      	mov	r0, sp
   d7224:	f7ff fec9 	bl	d6fba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7228:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d722c:	429f      	cmp	r7, r3
   d722e:	db12      	blt.n	d7256 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d7230:	3701      	adds	r7, #1
        if (n > 0) {
   d7232:	2f00      	cmp	r7, #0
   d7234:	dd29      	ble.n	d728a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d7236:	00f8      	lsls	r0, r7, #3
   d7238:	f7fe fde6 	bl	d5e08 <malloc>
            if (!d) {
   d723c:	4605      	mov	r5, r0
   d723e:	b1f0      	cbz	r0, d727e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d7240:	e9d4 1200 	ldrd	r1, r2, [r4]
   d7244:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7248:	f7ff ff5a 	bl	d7100 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d724c:	6820      	ldr	r0, [r4, #0]
   d724e:	f7fe fde3 	bl	d5e18 <free>
        data_ = d;
   d7252:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d7254:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d7256:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7258:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d725a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d725e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7262:	4631      	mov	r1, r6
   d7264:	f106 0008 	add.w	r0, r6, #8
   d7268:	f7ff ff4a 	bl	d7100 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d726c:	b11e      	cbz	r6, d7276 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d726e:	4669      	mov	r1, sp
   d7270:	4630      	mov	r0, r6
   d7272:	f7ff fea2 	bl	d6fba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d7276:	6863      	ldr	r3, [r4, #4]
   d7278:	3301      	adds	r3, #1
   d727a:	6063      	str	r3, [r4, #4]
    return true;
   d727c:	2501      	movs	r5, #1
   d727e:	a801      	add	r0, sp, #4
   d7280:	f7ff fea5 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7284:	4628      	mov	r0, r5
   d7286:	b003      	add	sp, #12
   d7288:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d728a:	2500      	movs	r5, #0
   d728c:	e7de      	b.n	d724c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>
	...

000d7290 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d7290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7294:	4605      	mov	r5, r0
   d7296:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d7298:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d729a:	460c      	mov	r4, r1
        WiringBleLock lk;
   d729c:	f7ff faeb 	bl	d6876 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d72a0:	682e      	ldr	r6, [r5, #0]
   d72a2:	2e04      	cmp	r6, #4
   d72a4:	d06b      	beq.n	d737e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d72a6:	d807      	bhi.n	d72b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d72a8:	2e03      	cmp	r6, #3
   d72aa:	d028      	beq.n	d72fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d72ac:	a803      	add	r0, sp, #12
   d72ae:	f7ff faea 	bl	d6886 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d72b2:	b00e      	add	sp, #56	; 0x38
   d72b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d72b8:	f1a6 030c 	sub.w	r3, r6, #12
   d72bc:	2b03      	cmp	r3, #3
   d72be:	d8f5      	bhi.n	d72ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d72c0:	89a9      	ldrh	r1, [r5, #12]
   d72c2:	4620      	mov	r0, r4
   d72c4:	f7ff fc76 	bl	d6bb4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d72c8:	4607      	mov	r7, r0
   d72ca:	2800      	cmp	r0, #0
   d72cc:	d0ee      	beq.n	d72ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d72ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d72d0:	2b00      	cmp	r3, #0
   d72d2:	d0eb      	beq.n	d72ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d72d4:	2210      	movs	r2, #16
   d72d6:	2100      	movs	r1, #0
   d72d8:	a807      	add	r0, sp, #28
   d72da:	f002 fb35 	bl	d9948 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d72de:	2e0d      	cmp	r6, #13
                        };
   d72e0:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d72e2:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d72e6:	f040 8092 	bne.w	d740e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d72ea:	686b      	ldr	r3, [r5, #4]
   d72ec:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d72ee:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d72f0:	9308      	str	r3, [sp, #32]
   d72f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d72f4:	a906      	add	r1, sp, #24
   d72f6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d72fa:	4798      	blx	r3
   d72fc:	e7d6      	b.n	d72ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d72fe:	a804      	add	r0, sp, #16
   d7300:	f7ff fd00 	bl	d6d04 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d7304:	9b04      	ldr	r3, [sp, #16]
   d7306:	89aa      	ldrh	r2, [r5, #12]
   d7308:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d730a:	6869      	ldr	r1, [r5, #4]
   d730c:	9804      	ldr	r0, [sp, #16]
   d730e:	3108      	adds	r1, #8
   d7310:	3002      	adds	r0, #2
   d7312:	f7ff fac0 	bl	d6896 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d7316:	a904      	add	r1, sp, #16
   d7318:	a806      	add	r0, sp, #24
   d731a:	f7ff fe4e 	bl	d6fba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d731e:	a906      	add	r1, sp, #24
   d7320:	f104 0018 	add.w	r0, r4, #24
   d7324:	f7ff ff7a 	bl	d721c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d7328:	4605      	mov	r5, r0
   d732a:	a807      	add	r0, sp, #28
   d732c:	f7ff fe4f 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7330:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d7332:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d7334:	b98d      	cbnz	r5, d735a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d7336:	4b3e      	ldr	r3, [pc, #248]	; (d7430 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d7338:	493e      	ldr	r1, [pc, #248]	; (d7434 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d733a:	9300      	str	r3, [sp, #0]
   d733c:	2032      	movs	r0, #50	; 0x32
   d733e:	462b      	mov	r3, r5
   d7340:	aa06      	add	r2, sp, #24
   d7342:	9507      	str	r5, [sp, #28]
   d7344:	f7fe fc7a 	bl	d5c3c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d7348:	9b04      	ldr	r3, [sp, #16]
   d734a:	4629      	mov	r1, r5
   d734c:	8818      	ldrh	r0, [r3, #0]
   d734e:	f7fe fa79 	bl	d5844 <hal_ble_gap_disconnect>
   d7352:	a805      	add	r0, sp, #20
   d7354:	f7ff fe3b 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7358:	e7a8      	b.n	d72ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d735a:	4a37      	ldr	r2, [pc, #220]	; (d7438 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d735c:	9200      	str	r2, [sp, #0]
   d735e:	2300      	movs	r3, #0
   d7360:	4934      	ldr	r1, [pc, #208]	; (d7434 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d7362:	9307      	str	r3, [sp, #28]
   d7364:	aa06      	add	r2, sp, #24
   d7366:	2001      	movs	r0, #1
   d7368:	f7fe fc68 	bl	d5c3c <log_message>
                if (impl->connectedCallback_) {
   d736c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d736e:	2b00      	cmp	r3, #0
   d7370:	d0ef      	beq.n	d7352 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d7372:	a904      	add	r1, sp, #16
   d7374:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7378:	f7ff fe95 	bl	d70a6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d737c:	e7e9      	b.n	d7352 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d737e:	89a9      	ldrh	r1, [r5, #12]
   d7380:	4620      	mov	r0, r4
   d7382:	f7ff fc17 	bl	d6bb4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d7386:	4606      	mov	r6, r0
   d7388:	2800      	cmp	r0, #0
   d738a:	d08f      	beq.n	d72ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d738c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d738e:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d7392:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7396:	802a      	strh	r2, [r5, #0]
   d7398:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d739c:	4299      	cmp	r1, r3
   d739e:	d003      	beq.n	d73a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d73a0:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d73a4:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d73a6:	e7f9      	b.n	d739c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d73a8:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d73ac:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d73b0:	45b8      	cmp	r8, r7
   d73b2:	d004      	beq.n	d73be <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d73b4:	1d38      	adds	r0, r7, #4
   d73b6:	f7ff fe0a 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d73ba:	3708      	adds	r7, #8
   d73bc:	e7f8      	b.n	d73b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d73be:	2300      	movs	r3, #0
   d73c0:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d73c2:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d73c6:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d73ca:	45b8      	cmp	r8, r7
   d73cc:	d004      	beq.n	d73d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d73ce:	1d38      	adds	r0, r7, #4
   d73d0:	f7ff fdfd 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d73d4:	3708      	adds	r7, #8
   d73d6:	e7f8      	b.n	d73ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d73d8:	2300      	movs	r3, #0
   d73da:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d73dc:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d73de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d73e0:	b123      	cbz	r3, d73ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d73e2:	4631      	mov	r1, r6
   d73e4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d73e8:	f7ff fe5d 	bl	d70a6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d73ec:	2300      	movs	r3, #0
   d73ee:	2220      	movs	r2, #32
   d73f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d73f4:	4a11      	ldr	r2, [pc, #68]	; (d743c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d73f6:	9200      	str	r2, [sp, #0]
   d73f8:	490e      	ldr	r1, [pc, #56]	; (d7434 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d73fa:	aa06      	add	r2, sp, #24
   d73fc:	2001      	movs	r0, #1
   d73fe:	f7fe fc1d 	bl	d5c3c <log_message>
                    impl->peers_.removeOne(*peer);
   d7402:	4631      	mov	r1, r6
   d7404:	f104 0018 	add.w	r0, r4, #24
   d7408:	f7ff fea4 	bl	d7154 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d740c:	e74e      	b.n	d72ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d740e:	2e0f      	cmp	r6, #15
   d7410:	f47f af6f 	bne.w	d72f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d7414:	686b      	ldr	r3, [r5, #4]
   d7416:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d7418:	7a2b      	ldrb	r3, [r5, #8]
   d741a:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d741e:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d7422:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d7426:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d742a:	2308      	movs	r3, #8
   d742c:	e760      	b.n	d72f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d742e:	bf00      	nop
   d7430:	000da059 	.word	0x000da059
   d7434:	000da01a 	.word	0x000da01a
   d7438:	000da07f 	.word	0x000da07f
   d743c:	000da09c 	.word	0x000da09c

000d7440 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
   d7440:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   d7442:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   d7444:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7446:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   d744a:	e9c1 3300 	strd	r3, r3, [r1]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d744e:	6823      	ldr	r3, [r4, #0]
   d7450:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7452:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7454:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   d7456:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   d7458:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   d745a:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   d745c:	f7ff fdb7 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   d7460:	4620      	mov	r0, r4
   d7462:	b002      	add	sp, #8
   d7464:	bd10      	pop	{r4, pc}

000d7466 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d7466:	b513      	push	{r0, r1, r4, lr}
   d7468:	460b      	mov	r3, r1
   d746a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d746c:	e9d0 0100 	ldrd	r0, r1, [r0]
   d7470:	466c      	mov	r4, sp
   d7472:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7476:	e893 0003 	ldmia.w	r3, {r0, r1}
   d747a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d747e:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7482:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7486:	b002      	add	sp, #8
   d7488:	bd10      	pop	{r4, pc}

000d748a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   d748a:	b538      	push	{r3, r4, r5, lr}
   d748c:	4605      	mov	r5, r0
   d748e:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d7490:	f7ff ffe9 	bl	d7466 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7494:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7496:	68a2      	ldr	r2, [r4, #8]
   d7498:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d749a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d749c:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d749e:	68e2      	ldr	r2, [r4, #12]
   d74a0:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d74a2:	60e3      	str	r3, [r4, #12]
      }
   d74a4:	bd38      	pop	{r3, r4, r5, pc}

000d74a6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>:
      operator=(function&& __x) noexcept
   d74a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d74a8:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d74aa:	4604      	mov	r4, r0
   d74ac:	4608      	mov	r0, r1
	__x.swap(*this);
   d74ae:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d74b0:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d74b2:	f7ff ffea 	bl	d748a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   d74b6:	4621      	mov	r1, r4
   d74b8:	4668      	mov	r0, sp
   d74ba:	f7ff ffe6 	bl	d748a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   d74be:	4668      	mov	r0, sp
   d74c0:	f7ff f9b0 	bl	d6824 <_ZNSt14_Function_baseD1Ev>
      }
   d74c4:	4620      	mov	r0, r4
   d74c6:	b004      	add	sp, #16
   d74c8:	bd10      	pop	{r4, pc}

000d74ca <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   d74ca:	b570      	push	{r4, r5, r6, lr}
   d74cc:	460e      	mov	r6, r1
   d74ce:	b088      	sub	sp, #32
   d74d0:	4604      	mov	r4, r0
   d74d2:	9201      	str	r2, [sp, #4]
   d74d4:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   d74d6:	f7ff fb4d 	bl	d6b74 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   d74da:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   d74dc:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   d74de:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   d74e0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d74e4:	f7fe ff8c 	bl	d6400 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d74e8:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   d74ec:	b185      	cbz	r5, d7510 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x46>
   d74ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d74f0:	9502      	str	r5, [sp, #8]
   d74f2:	a902      	add	r1, sp, #8
   d74f4:	a804      	add	r0, sp, #16
   d74f6:	9303      	str	r3, [sp, #12]
   d74f8:	f7ff fd10 	bl	d6f1c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   d74fc:	a904      	add	r1, sp, #16
   d74fe:	4630      	mov	r0, r6
   d7500:	f7ff ffd1 	bl	d74a6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   d7504:	a804      	add	r0, sp, #16
   d7506:	f7ff f98d 	bl	d6824 <_ZNSt14_Function_baseD1Ev>
    }
   d750a:	4620      	mov	r0, r4
   d750c:	b008      	add	sp, #32
   d750e:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   d7510:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   d7512:	e7f3      	b.n	d74fc <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000d7514 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d7514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7518:	b086      	sub	sp, #24
   d751a:	4607      	mov	r7, r0
   d751c:	461d      	mov	r5, r3
   d751e:	2068      	movs	r0, #104	; 0x68
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d7520:	2300      	movs	r3, #0
   d7522:	4689      	mov	r9, r1
   d7524:	4692      	mov	sl, r2
   d7526:	9304      	str	r3, [sp, #16]
   d7528:	f7fc fdb5 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d752c:	1e06      	subs	r6, r0, #0
   d752e:	f106 080c 	add.w	r8, r6, #12
   d7532:	d01d      	beq.n	d7570 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   d7534:	2301      	movs	r3, #1
	: _M_impl(__a)
   d7536:	4634      	mov	r4, r6
      : _M_use_count(1), _M_weak_count(1) { }
   d7538:	e9c6 3301 	strd	r3, r3, [r6, #4]
	: _M_impl(__a)
   d753c:	4b15      	ldr	r3, [pc, #84]	; (d7594 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x80>)
   d753e:	f844 3b20 	str.w	r3, [r4], #32
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d7542:	f89a 3000 	ldrb.w	r3, [sl]
    value_ = flags.value_;
   d7546:	f88d 300c 	strb.w	r3, [sp, #12]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   d754a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d754c:	9300      	str	r3, [sp, #0]
   d754e:	464a      	mov	r2, r9
   d7550:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7552:	a903      	add	r1, sp, #12
   d7554:	4640      	mov	r0, r8
   d7556:	f7ff ffb8 	bl	d74ca <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   d755a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d755c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d755e:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
   d7560:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        charUuid_ = charUuid;
   d7562:	6023      	str	r3, [r4, #0]
        svcUuid_ = svcUuid;
   d7564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7566:	f106 0434 	add.w	r4, r6, #52	; 0x34
   d756a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d756c:	682b      	ldr	r3, [r5, #0]
   d756e:	6023      	str	r3, [r4, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d7570:	a904      	add	r1, sp, #16
   d7572:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
   d7574:	e9cd 8604 	strd	r8, r6, [sp, #16]
   d7578:	f7ff ff62 	bl	d7440 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
      ~__shared_ptr() = default;
   d757c:	a805      	add	r0, sp, #20
   d757e:	f7ff fd26 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d7582:	6839      	ldr	r1, [r7, #0]
   d7584:	b919      	cbnz	r1, d758e <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x7a>
        SPARK_ASSERT(false);
   d7586:	4a04      	ldr	r2, [pc, #16]	; (d7598 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>)
   d7588:	200a      	movs	r0, #10
   d758a:	f7fe fb4f 	bl	d5c2c <panic_>
}
   d758e:	b006      	add	sp, #24
   d7590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7594:	000da118 	.word	0x000da118
   d7598:	000d5785 	.word	0x000d5785

000d759c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   d759c:	b538      	push	{r3, r4, r5, lr}
   d759e:	4605      	mov	r5, r0
   d75a0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d75a2:	f7ff ff60 	bl	d7466 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d75a6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d75a8:	68a2      	ldr	r2, [r4, #8]
   d75aa:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d75ac:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d75ae:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d75b0:	68e2      	ldr	r2, [r4, #12]
   d75b2:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d75b4:	60e3      	str	r3, [r4, #12]
      }
   d75b6:	bd38      	pop	{r3, r4, r5, pc}

000d75b8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEaSEOS5_>:
      operator=(function&& __x) noexcept
   d75b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d75ba:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d75bc:	4604      	mov	r4, r0
   d75be:	4608      	mov	r0, r1
	__x.swap(*this);
   d75c0:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d75c2:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d75c4:	f7ff ffea 	bl	d759c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   d75c8:	4621      	mov	r1, r4
   d75ca:	4668      	mov	r0, sp
   d75cc:	f7ff ffe6 	bl	d759c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   d75d0:	4668      	mov	r0, sp
   d75d2:	f7ff f927 	bl	d6824 <_ZNSt14_Function_baseD1Ev>
      }
   d75d6:	4620      	mov	r0, r4
   d75d8:	b004      	add	sp, #16
   d75da:	bd10      	pop	{r4, pc}

000d75dc <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   d75dc:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   d75de:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   d75e0:	b086      	sub	sp, #24
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   d75e2:	3424      	adds	r4, #36	; 0x24
   d75e4:	b171      	cbz	r1, d7604 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x28>
   d75e6:	e9cd 1200 	strd	r1, r2, [sp]
   d75ea:	a802      	add	r0, sp, #8
   d75ec:	4669      	mov	r1, sp
   d75ee:	f7ff fcad 	bl	d6f4c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
   d75f2:	a902      	add	r1, sp, #8
   d75f4:	4620      	mov	r0, r4
   d75f6:	f7ff ffdf 	bl	d75b8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEaSEOS5_>
    class function<_Res(_ArgTypes...)>
   d75fa:	a802      	add	r0, sp, #8
   d75fc:	f7ff f912 	bl	d6824 <_ZNSt14_Function_baseD1Ev>
}
   d7600:	b006      	add	sp, #24
   d7602:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   d7604:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   d7606:	e7f4      	b.n	d75f2 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000d7608 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   d7608:	b510      	push	{r4, lr}
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   d760a:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   d760c:	b086      	sub	sp, #24
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   d760e:	3434      	adds	r4, #52	; 0x34
   d7610:	b171      	cbz	r1, d7630 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x28>
   d7612:	e9cd 1200 	strd	r1, r2, [sp]
   d7616:	a802      	add	r0, sp, #8
   d7618:	4669      	mov	r1, sp
   d761a:	f7ff fc97 	bl	d6f4c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
   d761e:	a902      	add	r1, sp, #8
   d7620:	4620      	mov	r0, r4
   d7622:	f7ff ffc9 	bl	d75b8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEaSEOS5_>
    class function<_Res(_ArgTypes...)>
   d7626:	a802      	add	r0, sp, #8
   d7628:	f7ff f8fc 	bl	d6824 <_ZNSt14_Function_baseD1Ev>
}
   d762c:	b006      	add	sp, #24
   d762e:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   d7630:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   d7632:	e7f4      	b.n	d761e <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000d7634 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d7634:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7638:	4604      	mov	r4, r0
   d763a:	460d      	mov	r5, r1
   d763c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d763e:	d914      	bls.n	d766a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7640:	4290      	cmp	r0, r2
   d7642:	d213      	bcs.n	d766c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d7644:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d7648:	1a75      	subs	r5, r6, r1
   d764a:	f1a1 0708 	sub.w	r7, r1, #8
   d764e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d7650:	42b7      	cmp	r7, r6
   d7652:	d018      	beq.n	d7686 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7654:	b11c      	cbz	r4, d765e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default;
   d7656:	4631      	mov	r1, r6
   d7658:	4620      	mov	r0, r4
   d765a:	f7ff fca4 	bl	d6fa6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d765e:	1d30      	adds	r0, r6, #4
   d7660:	f7ff fcb5 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d7664:	3e08      	subs	r6, #8
   d7666:	3c08      	subs	r4, #8
   d7668:	e7f2      	b.n	d7650 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d766a:	d00c      	beq.n	d7686 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d766c:	42b5      	cmp	r5, r6
   d766e:	d00a      	beq.n	d7686 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7670:	b11c      	cbz	r4, d767a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7672:	4629      	mov	r1, r5
   d7674:	4620      	mov	r0, r4
   d7676:	f7ff fc96 	bl	d6fa6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d767a:	1d28      	adds	r0, r5, #4
   d767c:	f7ff fca7 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d7680:	3508      	adds	r5, #8
   d7682:	3408      	adds	r4, #8
   d7684:	e7f2      	b.n	d766c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d7686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7688 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d7688:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d768a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d768c:	4605      	mov	r5, r0
        if (n > 0) {
   d768e:	dd11      	ble.n	d76b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d7690:	00f0      	lsls	r0, r6, #3
   d7692:	f7fe fbb9 	bl	d5e08 <malloc>
            if (!d) {
   d7696:	4604      	mov	r4, r0
   d7698:	b158      	cbz	r0, d76b2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d769a:	e9d5 1200 	ldrd	r1, r2, [r5]
   d769e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d76a2:	f7ff ffc7 	bl	d7634 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d76a6:	6828      	ldr	r0, [r5, #0]
   d76a8:	f7fe fbb6 	bl	d5e18 <free>
        data_ = d;
   d76ac:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d76ae:	60ae      	str	r6, [r5, #8]
        return true;
   d76b0:	2001      	movs	r0, #1
    }
   d76b2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d76b4:	2400      	movs	r4, #0
   d76b6:	e7f6      	b.n	d76a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d76b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d76b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d76ba:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d76bc:	6845      	ldr	r5, [r0, #4]
   d76be:	4668      	mov	r0, sp
   d76c0:	f7ff fc71 	bl	d6fa6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d76c4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d76c8:	4299      	cmp	r1, r3
   d76ca:	da10      	bge.n	d76ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d76cc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d76ce:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d76d0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d76d4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d76d8:	4629      	mov	r1, r5
   d76da:	f105 0008 	add.w	r0, r5, #8
   d76de:	f7ff ffa9 	bl	d7634 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d76e2:	b98d      	cbnz	r5, d7708 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d76e4:	6863      	ldr	r3, [r4, #4]
   d76e6:	3301      	adds	r3, #1
   d76e8:	6063      	str	r3, [r4, #4]
    return true;
   d76ea:	2601      	movs	r6, #1
   d76ec:	e006      	b.n	d76fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d76ee:	3101      	adds	r1, #1
   d76f0:	4620      	mov	r0, r4
   d76f2:	f7ff ffc9 	bl	d7688 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d76f6:	4606      	mov	r6, r0
   d76f8:	2800      	cmp	r0, #0
   d76fa:	d1e7      	bne.n	d76cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d76fc:	a801      	add	r0, sp, #4
   d76fe:	f7ff fc66 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7702:	4630      	mov	r0, r6
   d7704:	b002      	add	sp, #8
   d7706:	bd70      	pop	{r4, r5, r6, pc}
   d7708:	4669      	mov	r1, sp
   d770a:	4628      	mov	r0, r5
   d770c:	f7ff fc4b 	bl	d6fa6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7710:	e7e8      	b.n	d76e4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d7712 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d7712:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7716:	4604      	mov	r4, r0
   d7718:	460d      	mov	r5, r1
   d771a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d771c:	d914      	bls.n	d7748 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d771e:	4290      	cmp	r0, r2
   d7720:	d213      	bcs.n	d774a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d7722:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d7726:	1a75      	subs	r5, r6, r1
   d7728:	f1a1 0708 	sub.w	r7, r1, #8
   d772c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d772e:	42b7      	cmp	r7, r6
   d7730:	d018      	beq.n	d7764 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7732:	b11c      	cbz	r4, d773c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d7734:	4631      	mov	r1, r6
   d7736:	4620      	mov	r0, r4
   d7738:	f7ff fc27 	bl	d6f8a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d773c:	1d30      	adds	r0, r6, #4
   d773e:	f7ff fc46 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d7742:	3e08      	subs	r6, #8
   d7744:	3c08      	subs	r4, #8
   d7746:	e7f2      	b.n	d772e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d7748:	d00c      	beq.n	d7764 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d774a:	42b5      	cmp	r5, r6
   d774c:	d00a      	beq.n	d7764 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d774e:	b11c      	cbz	r4, d7758 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7750:	4629      	mov	r1, r5
   d7752:	4620      	mov	r0, r4
   d7754:	f7ff fc19 	bl	d6f8a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7758:	1d28      	adds	r0, r5, #4
   d775a:	f7ff fc38 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d775e:	3508      	adds	r5, #8
   d7760:	3408      	adds	r4, #8
   d7762:	e7f2      	b.n	d774a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d7764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7766 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d7766:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d7768:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d776a:	4605      	mov	r5, r0
        if (n > 0) {
   d776c:	dd11      	ble.n	d7792 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d776e:	00f0      	lsls	r0, r6, #3
   d7770:	f7fe fb4a 	bl	d5e08 <malloc>
            if (!d) {
   d7774:	4604      	mov	r4, r0
   d7776:	b158      	cbz	r0, d7790 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d7778:	e9d5 1200 	ldrd	r1, r2, [r5]
   d777c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7780:	f7ff ffc7 	bl	d7712 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d7784:	6828      	ldr	r0, [r5, #0]
   d7786:	f7fe fb47 	bl	d5e18 <free>
        data_ = d;
   d778a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d778c:	60ae      	str	r6, [r5, #8]
        return true;
   d778e:	2001      	movs	r0, #1
    }
   d7790:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d7792:	2400      	movs	r4, #0
   d7794:	e7f6      	b.n	d7784 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d7796 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7796:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7798:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d779a:	6845      	ldr	r5, [r0, #4]
   d779c:	4668      	mov	r0, sp
   d779e:	f7ff fbf4 	bl	d6f8a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d77a2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d77a6:	4299      	cmp	r1, r3
   d77a8:	da10      	bge.n	d77cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d77aa:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d77ac:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d77ae:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d77b2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d77b6:	4629      	mov	r1, r5
   d77b8:	f105 0008 	add.w	r0, r5, #8
   d77bc:	f7ff ffa9 	bl	d7712 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d77c0:	b98d      	cbnz	r5, d77e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d77c2:	6863      	ldr	r3, [r4, #4]
   d77c4:	3301      	adds	r3, #1
   d77c6:	6063      	str	r3, [r4, #4]
    return true;
   d77c8:	2601      	movs	r6, #1
   d77ca:	e006      	b.n	d77da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d77cc:	3101      	adds	r1, #1
   d77ce:	4620      	mov	r0, r4
   d77d0:	f7ff ffc9 	bl	d7766 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d77d4:	4606      	mov	r6, r0
   d77d6:	2800      	cmp	r0, #0
   d77d8:	d1e7      	bne.n	d77aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d77da:	a801      	add	r0, sp, #4
   d77dc:	f7ff fbf7 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d77e0:	4630      	mov	r0, r6
   d77e2:	b002      	add	sp, #8
   d77e4:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d77e6:	4669      	mov	r1, sp
   d77e8:	4628      	mov	r0, r5
   d77ea:	f7ff fbce 	bl	d6f8a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d77ee:	e7e8      	b.n	d77c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d77f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d77f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d77f4:	4617      	mov	r7, r2
   d77f6:	b0a1      	sub	sp, #132	; 0x84
   d77f8:	4680      	mov	r8, r0
    WiringBleLock lk;
   d77fa:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d77fc:	460e      	mov	r6, r1
    WiringBleLock lk;
   d77fe:	f7ff f83a 	bl	d6876 <_ZN8particle3ble13WiringBleLockC1Ev>
   d7802:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d7804:	7923      	ldrb	r3, [r4, #4]
   d7806:	b953      	cbnz	r3, d781e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d7808:	4639      	mov	r1, r7
   d780a:	4640      	mov	r0, r8
   d780c:	f7ff fbbd 	bl	d6f8a <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d7810:	a80a      	add	r0, sp, #40	; 0x28
   d7812:	f7ff f838 	bl	d6886 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d7816:	4640      	mov	r0, r8
   d7818:	b021      	add	sp, #132	; 0x84
   d781a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d781e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   d7820:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   d7824:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d7828:	9303      	str	r3, [sp, #12]
   d782a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d782e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d7832:	9b03      	ldr	r3, [sp, #12]
   d7834:	429d      	cmp	r5, r3
   d7836:	d021      	beq.n	d787c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d7838:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   d783c:	4658      	mov	r0, fp
   d783e:	f109 0114 	add.w	r1, r9, #20
   d7842:	f7ff f8d0 	bl	d69e6 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d7846:	b1b8      	cbz	r0, d7878 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d7848:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d784c:	4650      	mov	r0, sl
   d784e:	f7ff f8ca 	bl	d69e6 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d7852:	b188      	cbz	r0, d7878 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d7854:	6823      	ldr	r3, [r4, #0]
   d7856:	f8d9 2000 	ldr.w	r2, [r9]
   d785a:	4053      	eors	r3, r2
   d785c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d7860:	d10a      	bne.n	d7878 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d7862:	2220      	movs	r2, #32
   d7864:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d7868:	4a5e      	ldr	r2, [pc, #376]	; (d79e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d786a:	9200      	str	r2, [sp, #0]
   d786c:	aa15      	add	r2, sp, #84	; 0x54
   d786e:	495e      	ldr	r1, [pc, #376]	; (d79e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d7870:	2032      	movs	r0, #50	; 0x32
   d7872:	f7fe f9e3 	bl	d5c3c <log_message>
   d7876:	e7c7      	b.n	d7808 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d7878:	3508      	adds	r5, #8
   d787a:	e7da      	b.n	d7832 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d787c:	4650      	mov	r0, sl
   d787e:	f7ff f87d 	bl	d697c <_ZNK8particle7BleUuid7isValidEv>
   d7882:	b960      	cbnz	r0, d789e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   d7884:	4959      	ldr	r1, [pc, #356]	; (d79ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   d7886:	2201      	movs	r2, #1
   d7888:	a815      	add	r0, sp, #84	; 0x54
   d788a:	ad15      	add	r5, sp, #84	; 0x54
   d788c:	f7ff f84d 	bl	d692a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d7890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7892:	46d4      	mov	ip, sl
   d7894:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d7898:	682b      	ldr	r3, [r5, #0]
   d789a:	f8cc 3000 	str.w	r3, [ip]
   d789e:	6833      	ldr	r3, [r6, #0]
   d78a0:	e9d3 5300 	ldrd	r5, r3, [r3]
   d78a4:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d78a8:	455d      	cmp	r5, fp
   d78aa:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   d78ac:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   d78ae:	d06e      	beq.n	d798e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d78b0:	f855 0b08 	ldr.w	r0, [r5], #8
   d78b4:	f7ff f897 	bl	d69e6 <_ZNK8particle7BleUuideqERKS0_>
   d78b8:	2800      	cmp	r0, #0
   d78ba:	d0f5      	beq.n	d78a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   d78bc:	f104 0a14 	add.w	sl, r4, #20
   d78c0:	4650      	mov	r0, sl
   d78c2:	f7ff f85b 	bl	d697c <_ZNK8particle7BleUuid7isValidEv>
   d78c6:	b988      	cbnz	r0, d78ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   d78c8:	4b49      	ldr	r3, [pc, #292]	; (d79f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d78ca:	4948      	ldr	r1, [pc, #288]	; (d79ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   d78cc:	881a      	ldrh	r2, [r3, #0]
   d78ce:	3201      	adds	r2, #1
   d78d0:	b292      	uxth	r2, r2
   d78d2:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d78d4:	a815      	add	r0, sp, #84	; 0x54
   d78d6:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   d78d8:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d78da:	f7ff f845 	bl	d6968 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d78de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d78e0:	46d4      	mov	ip, sl
   d78e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d78e6:	682b      	ldr	r3, [r5, #0]
   d78e8:	f8cc 3000 	str.w	r3, [ip]
    hal_ble_char_init_t charInit = {};
   d78ec:	2228      	movs	r2, #40	; 0x28
   d78ee:	2100      	movs	r1, #0
   d78f0:	a816      	add	r0, sp, #88	; 0x58
   d78f2:	f002 f829 	bl	d9948 <memset>
    charInit.version = BLE_API_VERSION;
   d78f6:	4b3f      	ldr	r3, [pc, #252]	; (d79f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d78f8:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d78fa:	4651      	mov	r1, sl
   d78fc:	a804      	add	r0, sp, #16
   d78fe:	f7ff f84f 	bl	d69a0 <_ZN8particle7BleUuid7halUUIDEv>
   d7902:	ab04      	add	r3, sp, #16
   d7904:	aa18      	add	r2, sp, #96	; 0x60
   d7906:	f10d 0c20 	add.w	ip, sp, #32
   d790a:	6818      	ldr	r0, [r3, #0]
   d790c:	6859      	ldr	r1, [r3, #4]
   d790e:	4615      	mov	r5, r2
   d7910:	c503      	stmia	r5!, {r0, r1}
   d7912:	3308      	adds	r3, #8
   d7914:	4563      	cmp	r3, ip
   d7916:	462a      	mov	r2, r5
   d7918:	d1f7      	bne.n	d790a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   d791a:	6818      	ldr	r0, [r3, #0]
   d791c:	6028      	str	r0, [r5, #0]
    charInit.properties = charImpl->properties().value();
   d791e:	7923      	ldrb	r3, [r4, #4]
   d7920:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d7924:	f8d9 3000 	ldr.w	r3, [r9]
   d7928:	8a9b      	ldrh	r3, [r3, #20]
   d792a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d792e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7930:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d7932:	4b31      	ldr	r3, [pc, #196]	; (d79f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d7934:	2200      	movs	r2, #0
   d7936:	1da1      	adds	r1, r4, #6
   d7938:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d793a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d793e:	f7fd ffbd 	bl	d58bc <hal_ble_gatt_server_add_characteristic>
   d7942:	2800      	cmp	r0, #0
   d7944:	f47f af60 	bne.w	d7808 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   d7948:	2301      	movs	r3, #1
   d794a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d794c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d794e:	4639      	mov	r1, r7
        return characteristics_;
   d7950:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d7952:	a80d      	add	r0, sp, #52	; 0x34
   d7954:	f7ff fb19 	bl	d6f8a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7958:	4620      	mov	r0, r4
   d795a:	a90d      	add	r1, sp, #52	; 0x34
   d795c:	f7ff ff1b 	bl	d7796 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d7960:	4604      	mov	r4, r0
   d7962:	a80e      	add	r0, sp, #56	; 0x38
   d7964:	f7ff fb33 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7968:	2c00      	cmp	r4, #0
   d796a:	f47f af4d 	bne.w	d7808 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d796e:	2320      	movs	r3, #32
   d7970:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d7974:	4b21      	ldr	r3, [pc, #132]	; (d79fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   d7976:	9300      	str	r3, [sp, #0]
   d7978:	aa0d      	add	r2, sp, #52	; 0x34
   d797a:	4623      	mov	r3, r4
   d797c:	e777      	b.n	d786e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d797e:	4639      	mov	r1, r7
   d7980:	4640      	mov	r0, r8
   d7982:	f7ff fb02 	bl	d6f8a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7986:	a80c      	add	r0, sp, #48	; 0x30
   d7988:	f7ff fb21 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d798c:	e740      	b.n	d7810 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d798e:	a80b      	add	r0, sp, #44	; 0x2c
   d7990:	f7ff f994 	bl	d6cbc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d7994:	4651      	mov	r1, sl
   d7996:	a815      	add	r0, sp, #84	; 0x54
   d7998:	f7ff f802 	bl	d69a0 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d799c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d799e:	2300      	movs	r3, #0
   d79a0:	3214      	adds	r2, #20
   d79a2:	a915      	add	r1, sp, #84	; 0x54
   d79a4:	2001      	movs	r0, #1
   d79a6:	f7fd ff57 	bl	d5858 <hal_ble_gatt_server_add_service>
   d79aa:	2800      	cmp	r0, #0
   d79ac:	d1e7      	bne.n	d797e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   d79ae:	6835      	ldr	r5, [r6, #0]
   d79b0:	a90b      	add	r1, sp, #44	; 0x2c
   d79b2:	a80d      	add	r0, sp, #52	; 0x34
   d79b4:	f7ff faf7 	bl	d6fa6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d79b8:	4628      	mov	r0, r5
   d79ba:	a90d      	add	r1, sp, #52	; 0x34
   d79bc:	f7ff fe7c 	bl	d76b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d79c0:	4605      	mov	r5, r0
   d79c2:	a80e      	add	r0, sp, #56	; 0x38
   d79c4:	f7ff fb03 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d79c8:	2d00      	cmp	r5, #0
   d79ca:	d0d8      	beq.n	d797e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   d79cc:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   d79ce:	6853      	ldr	r3, [r2, #4]
   d79d0:	6812      	ldr	r2, [r2, #0]
   d79d2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d79d6:	3b01      	subs	r3, #1
   d79d8:	a80c      	add	r0, sp, #48	; 0x30
   d79da:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d79de:	f7ff faf6 	bl	d6fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d79e2:	e76b      	b.n	d78bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   d79e4:	000da0bb 	.word	0x000da0bb
   d79e8:	000da01a 	.word	0x000da01a
   d79ec:	000da17c 	.word	0x000da17c
   d79f0:	2003e658 	.word	0x2003e658
   d79f4:	002c0001 	.word	0x002c0001
   d79f8:	000d6e4d 	.word	0x000d6e4d
   d79fc:	000da0e6 	.word	0x000da0e6

000d7a00 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d7a00:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d7a02:	4c06      	ldr	r4, [pc, #24]	; (d7a1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7a04:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7a06:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7a08:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d7a0a:	f7fd ff7f 	bl	d590c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d7a0e:	4620      	mov	r0, r4
   d7a10:	4a03      	ldr	r2, [pc, #12]	; (d7a20 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7a12:	4904      	ldr	r1, [pc, #16]	; (d7a24 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7a18:	f001 b916 	b.w	d8c48 <__aeabi_atexit>
   d7a1c:	2003e65c 	.word	0x2003e65c
   d7a20:	2003e0ac 	.word	0x2003e0ac
   d7a24:	000d667b 	.word	0x000d667b

000d7a28 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7a2a:	4606      	mov	r6, r0
   d7a2c:	460d      	mov	r5, r1
  size_t n = 0;
   d7a2e:	188f      	adds	r7, r1, r2
   d7a30:	2400      	movs	r4, #0
  while (size--) {
   d7a32:	42bd      	cmp	r5, r7
   d7a34:	d00c      	beq.n	d7a50 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7a36:	6833      	ldr	r3, [r6, #0]
   d7a38:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7a3c:	689b      	ldr	r3, [r3, #8]
   d7a3e:	4630      	mov	r0, r6
   d7a40:	4798      	blx	r3
     if (chunk>=0)
   d7a42:	1e03      	subs	r3, r0, #0
   d7a44:	db01      	blt.n	d7a4a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7a46:	441c      	add	r4, r3
  while (size--) {
   d7a48:	e7f3      	b.n	d7a32 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7a4a:	2c00      	cmp	r4, #0
   d7a4c:	bf08      	it	eq
   d7a4e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7a50:	4620      	mov	r0, r4
   d7a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7a54 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7a54:	b513      	push	{r0, r1, r4, lr}
   d7a56:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d7a58:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7a5a:	b159      	cbz	r1, d7a74 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7a5c:	9101      	str	r1, [sp, #4]
   d7a5e:	f001 ffb1 	bl	d99c4 <strlen>
   d7a62:	6823      	ldr	r3, [r4, #0]
   d7a64:	9901      	ldr	r1, [sp, #4]
   d7a66:	68db      	ldr	r3, [r3, #12]
   d7a68:	4602      	mov	r2, r0
   d7a6a:	4620      	mov	r0, r4
    }
   d7a6c:	b002      	add	sp, #8
   d7a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7a72:	4718      	bx	r3
    }
   d7a74:	b002      	add	sp, #8
   d7a76:	bd10      	pop	{r4, pc}

000d7a78 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d7a78:	b508      	push	{r3, lr}
  return write(str);
   d7a7a:	f7ff ffeb 	bl	d7a54 <_ZN5Print5writeEPKc>
}
   d7a7e:	bd08      	pop	{r3, pc}

000d7a80 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7a80:	6803      	ldr	r3, [r0, #0]
   d7a82:	689b      	ldr	r3, [r3, #8]
   d7a84:	4718      	bx	r3

000d7a86 <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   d7a86:	680a      	ldr	r2, [r1, #0]
 {
   d7a88:	460b      	mov	r3, r1
   return x.printTo(*this);
   d7a8a:	6812      	ldr	r2, [r2, #0]
   d7a8c:	4601      	mov	r1, r0
   d7a8e:	4618      	mov	r0, r3
   d7a90:	4710      	bx	r2

000d7a92 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7a92:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7a94:	210d      	movs	r1, #13
{
   d7a96:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7a98:	f7ff fff2 	bl	d7a80 <_ZN5Print5printEc>
  n += print('\n');
   d7a9c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d7a9e:	4604      	mov	r4, r0
  n += print('\n');
   d7aa0:	4628      	mov	r0, r5
   d7aa2:	f7ff ffed 	bl	d7a80 <_ZN5Print5printEc>
  return n;
}
   d7aa6:	4420      	add	r0, r4
   d7aa8:	bd38      	pop	{r3, r4, r5, pc}

000d7aaa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7aaa:	b538      	push	{r3, r4, r5, lr}
   d7aac:	4605      	mov	r5, r0
  return write(str);
   d7aae:	f7ff ffd1 	bl	d7a54 <_ZN5Print5writeEPKc>
   d7ab2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d7ab4:	4628      	mov	r0, r5
   d7ab6:	f7ff ffec 	bl	d7a92 <_ZN5Print7printlnEv>
  return n;
}
   d7aba:	4420      	add	r0, r4
   d7abc:	bd38      	pop	{r3, r4, r5, pc}

000d7abe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7abe:	b530      	push	{r4, r5, lr}
   d7ac0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7ac2:	2300      	movs	r3, #0
   d7ac4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7ac8:	2a01      	cmp	r2, #1
   d7aca:	bf98      	it	ls
   d7acc:	220a      	movls	r2, #10
   d7ace:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7ad0:	460d      	mov	r5, r1
   d7ad2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7ad6:	fb01 5312 	mls	r3, r1, r2, r5
   d7ada:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7ade:	2b09      	cmp	r3, #9
   d7ae0:	bf94      	ite	ls
   d7ae2:	3330      	addls	r3, #48	; 0x30
   d7ae4:	3337      	addhi	r3, #55	; 0x37
   d7ae6:	b2db      	uxtb	r3, r3
  } while(n);
   d7ae8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7aea:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7aee:	d9ef      	bls.n	d7ad0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7af0:	4621      	mov	r1, r4
   d7af2:	f7ff ffaf 	bl	d7a54 <_ZN5Print5writeEPKc>
}
   d7af6:	b00b      	add	sp, #44	; 0x2c
   d7af8:	bd30      	pop	{r4, r5, pc}
	...

000d7afc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d7afc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7b00:	ec55 4b10 	vmov	r4, r5, d0
   d7b04:	4606      	mov	r6, r0
   d7b06:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d7b08:	ee10 2a10 	vmov	r2, s0
   d7b0c:	ee10 0a10 	vmov	r0, s0
   d7b10:	462b      	mov	r3, r5
   d7b12:	4629      	mov	r1, r5
   d7b14:	f001 fe0e 	bl	d9734 <__aeabi_dcmpun>
   d7b18:	b140      	cbz	r0, d7b2c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d7b1a:	4953      	ldr	r1, [pc, #332]	; (d7c68 <_ZN5Print10printFloatEdh+0x16c>)
   d7b1c:	4630      	mov	r0, r6
   d7b1e:	f7ff ff99 	bl	d7a54 <_ZN5Print5writeEPKc>
   d7b22:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d7b24:	4650      	mov	r0, sl
   d7b26:	b003      	add	sp, #12
   d7b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d7b2c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d7b30:	4b4e      	ldr	r3, [pc, #312]	; (d7c6c <_ZN5Print10printFloatEdh+0x170>)
   d7b32:	f04f 32ff 	mov.w	r2, #4294967295
   d7b36:	4620      	mov	r0, r4
   d7b38:	4649      	mov	r1, r9
   d7b3a:	f001 fdfb 	bl	d9734 <__aeabi_dcmpun>
   d7b3e:	b948      	cbnz	r0, d7b54 <_ZN5Print10printFloatEdh+0x58>
   d7b40:	4b4a      	ldr	r3, [pc, #296]	; (d7c6c <_ZN5Print10printFloatEdh+0x170>)
   d7b42:	f04f 32ff 	mov.w	r2, #4294967295
   d7b46:	4620      	mov	r0, r4
   d7b48:	4649      	mov	r1, r9
   d7b4a:	f001 fdd5 	bl	d96f8 <__aeabi_dcmple>
   d7b4e:	b908      	cbnz	r0, d7b54 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d7b50:	4947      	ldr	r1, [pc, #284]	; (d7c70 <_ZN5Print10printFloatEdh+0x174>)
   d7b52:	e7e3      	b.n	d7b1c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d7b54:	4b47      	ldr	r3, [pc, #284]	; (d7c74 <_ZN5Print10printFloatEdh+0x178>)
   d7b56:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7b5a:	4620      	mov	r0, r4
   d7b5c:	4629      	mov	r1, r5
   d7b5e:	f001 fddf 	bl	d9720 <__aeabi_dcmpgt>
   d7b62:	b108      	cbz	r0, d7b68 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d7b64:	4944      	ldr	r1, [pc, #272]	; (d7c78 <_ZN5Print10printFloatEdh+0x17c>)
   d7b66:	e7d9      	b.n	d7b1c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d7b68:	4b44      	ldr	r3, [pc, #272]	; (d7c7c <_ZN5Print10printFloatEdh+0x180>)
   d7b6a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7b6e:	4620      	mov	r0, r4
   d7b70:	4629      	mov	r1, r5
   d7b72:	f001 fdb7 	bl	d96e4 <__aeabi_dcmplt>
   d7b76:	2800      	cmp	r0, #0
   d7b78:	d1f4      	bne.n	d7b64 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d7b7a:	2200      	movs	r2, #0
   d7b7c:	2300      	movs	r3, #0
   d7b7e:	4620      	mov	r0, r4
   d7b80:	4629      	mov	r1, r5
   d7b82:	f001 fdaf 	bl	d96e4 <__aeabi_dcmplt>
   d7b86:	b1d0      	cbz	r0, d7bbe <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d7b88:	212d      	movs	r1, #45	; 0x2d
   d7b8a:	4630      	mov	r0, r6
   d7b8c:	f7ff ff78 	bl	d7a80 <_ZN5Print5printEc>
     number = -number;
   d7b90:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d7b94:	4682      	mov	sl, r0
     number = -number;
   d7b96:	461d      	mov	r5, r3
  double rounding = 0.5;
   d7b98:	4939      	ldr	r1, [pc, #228]	; (d7c80 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d7b9a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d7c88 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d7b9e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d7ba2:	2000      	movs	r0, #0
    rounding /= 10.0;
   d7ba4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d7ba8:	fa5f f38b 	uxtb.w	r3, fp
   d7bac:	429f      	cmp	r7, r3
   d7bae:	d908      	bls.n	d7bc2 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d7bb0:	4642      	mov	r2, r8
   d7bb2:	464b      	mov	r3, r9
   d7bb4:	f001 fc4e 	bl	d9454 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d7bb8:	f10b 0b01 	add.w	fp, fp, #1
   d7bbc:	e7f4      	b.n	d7ba8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d7bbe:	4682      	mov	sl, r0
   d7bc0:	e7ea      	b.n	d7b98 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d7bc2:	4622      	mov	r2, r4
   d7bc4:	462b      	mov	r3, r5
   d7bc6:	f001 f965 	bl	d8e94 <__adddf3>
   d7bca:	460d      	mov	r5, r1
   d7bcc:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d7bce:	f001 fdef 	bl	d97b0 <__aeabi_d2uiz>
   d7bd2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d7bd4:	f001 fa9a 	bl	d910c <__aeabi_ui2d>
   d7bd8:	4602      	mov	r2, r0
   d7bda:	460b      	mov	r3, r1
   d7bdc:	4620      	mov	r0, r4
   d7bde:	4629      	mov	r1, r5
   d7be0:	f001 f956 	bl	d8e90 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7be4:	220a      	movs	r2, #10
   d7be6:	4604      	mov	r4, r0
   d7be8:	460d      	mov	r5, r1
   d7bea:	4630      	mov	r0, r6
   d7bec:	4641      	mov	r1, r8
   d7bee:	f7ff ff66 	bl	d7abe <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d7bf2:	4482      	add	sl, r0
  if (digits > 0) {
   d7bf4:	b127      	cbz	r7, d7c00 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d7bf6:	4923      	ldr	r1, [pc, #140]	; (d7c84 <_ZN5Print10printFloatEdh+0x188>)
   d7bf8:	4630      	mov	r0, r6
   d7bfa:	f7ff ff2b 	bl	d7a54 <_ZN5Print5writeEPKc>
    n += print(".");
   d7bfe:	4482      	add	sl, r0
    remainder *= 10.0;
   d7c00:	f8df 9084 	ldr.w	r9, [pc, #132]	; d7c88 <_ZN5Print10printFloatEdh+0x18c>
   d7c04:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d7c08:	3f01      	subs	r7, #1
   d7c0a:	b2ff      	uxtb	r7, r7
   d7c0c:	2fff      	cmp	r7, #255	; 0xff
   d7c0e:	d089      	beq.n	d7b24 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d7c10:	4642      	mov	r2, r8
   d7c12:	464b      	mov	r3, r9
   d7c14:	4620      	mov	r0, r4
   d7c16:	4629      	mov	r1, r5
   d7c18:	f001 faf2 	bl	d9200 <__aeabi_dmul>
   d7c1c:	4604      	mov	r4, r0
   d7c1e:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d7c20:	f001 fd9e 	bl	d9760 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d7c24:	f1b0 0b00 	subs.w	fp, r0, #0
   d7c28:	da1a      	bge.n	d7c60 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d7c2a:	212d      	movs	r1, #45	; 0x2d
   d7c2c:	4630      	mov	r0, r6
   d7c2e:	f7ff ff27 	bl	d7a80 <_ZN5Print5printEc>
            val = -n;
   d7c32:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d7c36:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d7c38:	220a      	movs	r2, #10
   d7c3a:	4630      	mov	r0, r6
   d7c3c:	9301      	str	r3, [sp, #4]
   d7c3e:	f7ff ff3e 	bl	d7abe <_ZN5Print11printNumberEmh>
   d7c42:	9b01      	ldr	r3, [sp, #4]
   d7c44:	4418      	add	r0, r3
    n += print(toPrint);
   d7c46:	4482      	add	sl, r0
    remainder -= toPrint;
   d7c48:	4658      	mov	r0, fp
   d7c4a:	f001 fa6f 	bl	d912c <__aeabi_i2d>
   d7c4e:	4602      	mov	r2, r0
   d7c50:	460b      	mov	r3, r1
   d7c52:	4620      	mov	r0, r4
   d7c54:	4629      	mov	r1, r5
   d7c56:	f001 f91b 	bl	d8e90 <__aeabi_dsub>
   d7c5a:	4604      	mov	r4, r0
   d7c5c:	460d      	mov	r5, r1
  while (digits-- > 0)
   d7c5e:	e7d3      	b.n	d7c08 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d7c60:	4659      	mov	r1, fp
        size_t t = 0;
   d7c62:	2300      	movs	r3, #0
   d7c64:	e7e8      	b.n	d7c38 <_ZN5Print10printFloatEdh+0x13c>
   d7c66:	bf00      	nop
   d7c68:	000da19c 	.word	0x000da19c
   d7c6c:	7fefffff 	.word	0x7fefffff
   d7c70:	000da1a0 	.word	0x000da1a0
   d7c74:	41efffff 	.word	0x41efffff
   d7c78:	000da1a4 	.word	0x000da1a4
   d7c7c:	c1efffff 	.word	0xc1efffff
   d7c80:	3fe00000 	.word	0x3fe00000
   d7c84:	000d9f2f 	.word	0x000d9f2f
   d7c88:	40240000 	.word	0x40240000

000d7c8c <_ZN5Print7printlnEdi>:
{
   d7c8c:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d7c8e:	b2c9      	uxtb	r1, r1
{
   d7c90:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d7c92:	f7ff ff33 	bl	d7afc <_ZN5Print10printFloatEdh>
   d7c96:	4604      	mov	r4, r0
  n += println();
   d7c98:	4628      	mov	r0, r5
   d7c9a:	f7ff fefa 	bl	d7a92 <_ZN5Print7printlnEv>
}
   d7c9e:	4420      	add	r0, r4
   d7ca0:	bd38      	pop	{r3, r4, r5, pc}

000d7ca2 <_ZN5Print7printlnEfi>:
{
   d7ca2:	b538      	push	{r3, r4, r5, lr}
   d7ca4:	4604      	mov	r4, r0
   d7ca6:	ee10 0a10 	vmov	r0, s0
   d7caa:	460d      	mov	r5, r1
    return println((double)num, digits);
   d7cac:	f001 fa50 	bl	d9150 <__aeabi_f2d>
   d7cb0:	ec41 0b10 	vmov	d0, r0, r1
   d7cb4:	4629      	mov	r1, r5
   d7cb6:	4620      	mov	r0, r4
}
   d7cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d7cbc:	f7ff bfe6 	b.w	d7c8c <_ZN5Print7printlnEdi>

000d7cc0 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7cc0:	2300      	movs	r3, #0
   d7cc2:	6840      	ldr	r0, [r0, #4]
   d7cc4:	461a      	mov	r2, r3
   d7cc6:	4619      	mov	r1, r3
   d7cc8:	f7fe b81e 	b.w	d5d08 <network_on>

000d7ccc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7ccc:	4b01      	ldr	r3, [pc, #4]	; (d7cd4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7cce:	4a02      	ldr	r2, [pc, #8]	; (d7cd8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7cd0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7cd2:	4770      	bx	lr
   d7cd4:	2003e664 	.word	0x2003e664
   d7cd8:	000da1a8 	.word	0x000da1a8

000d7cdc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d7cdc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7cde:	2000      	movs	r0, #0
   d7ce0:	f7fe f87a 	bl	d5dd8 <spark_sync_time_pending>
   d7ce4:	b128      	cbz	r0, d7cf2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7ce6:	f7fe f86f 	bl	d5dc8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7cea:	f080 0001 	eor.w	r0, r0, #1
   d7cee:	b2c0      	uxtb	r0, r0
    }
   d7cf0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7cf2:	2001      	movs	r0, #1
   d7cf4:	e7fc      	b.n	d7cf0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d7cf6 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7cf6:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d7cf8:	2000      	movs	r0, #0
   d7cfa:	f7fd fd6b 	bl	d57d4 <hal_rtc_time_is_valid>
    if (rtcstate)
   d7cfe:	4604      	mov	r4, r0
   d7d00:	b9a0      	cbnz	r0, d7d2c <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7d02:	f7fd ffa3 	bl	d5c4c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7d06:	2801      	cmp	r0, #1
   d7d08:	d110      	bne.n	d7d2c <_ZN9TimeClass7isValidEv+0x36>
   d7d0a:	4620      	mov	r0, r4
   d7d0c:	f7fd ffb6 	bl	d5c7c <system_thread_get_state>
   d7d10:	b960      	cbnz	r0, d7d2c <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d7d12:	f7ff ffe3 	bl	d7cdc <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7d16:	b910      	cbnz	r0, d7d1e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d7d18:	f7fe f846 	bl	d5da8 <spark_process>
        while (_while() && !_condition()) {
   d7d1c:	e7f9      	b.n	d7d12 <_ZN9TimeClass7isValidEv+0x1c>
   d7d1e:	f7ff ffdd 	bl	d7cdc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d7d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d7d26:	2000      	movs	r0, #0
   d7d28:	f7fd bd54 	b.w	d57d4 <hal_rtc_time_is_valid>
}
   d7d2c:	4620      	mov	r0, r4
   d7d2e:	bd10      	pop	{r4, pc}

000d7d30 <_ZN9TimeClass3nowEv>:
{
   d7d30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d7d32:	f7ff ffe0 	bl	d7cf6 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d7d36:	2210      	movs	r2, #16
   d7d38:	2100      	movs	r1, #0
   d7d3a:	4668      	mov	r0, sp
   d7d3c:	f001 fe04 	bl	d9948 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d7d40:	2100      	movs	r1, #0
   d7d42:	4668      	mov	r0, sp
   d7d44:	f7fd fd4e 	bl	d57e4 <hal_rtc_get_time>
}
   d7d48:	9800      	ldr	r0, [sp, #0]
   d7d4a:	b005      	add	sp, #20
   d7d4c:	f85d fb04 	ldr.w	pc, [sp], #4

000d7d50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7d50:	4b02      	ldr	r3, [pc, #8]	; (d7d5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7d52:	681a      	ldr	r2, [r3, #0]
   d7d54:	4b02      	ldr	r3, [pc, #8]	; (d7d60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7d56:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7d58:	4770      	bx	lr
   d7d5a:	bf00      	nop
   d7d5c:	2003e044 	.word	0x2003e044
   d7d60:	2003e668 	.word	0x2003e668

000d7d64 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7d64:	2100      	movs	r1, #0
   d7d66:	f7fd bf81 	b.w	d5c6c <system_delay_ms>

000d7d6a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7d6a:	b510      	push	{r4, lr}
   d7d6c:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d7d6e:	f7fe fd59 	bl	d6824 <_ZNSt14_Function_baseD1Ev>
   d7d72:	4620      	mov	r0, r4
   d7d74:	bd10      	pop	{r4, pc}
	...

000d7d78 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7d78:	4803      	ldr	r0, [pc, #12]	; (d7d88 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7d7a:	4a04      	ldr	r2, [pc, #16]	; (d7d8c <_GLOBAL__sub_I_RGB+0x14>)
   d7d7c:	4904      	ldr	r1, [pc, #16]	; (d7d90 <_GLOBAL__sub_I_RGB+0x18>)
   d7d7e:	2300      	movs	r3, #0
   d7d80:	6083      	str	r3, [r0, #8]
   d7d82:	f000 bf61 	b.w	d8c48 <__aeabi_atexit>
   d7d86:	bf00      	nop
   d7d88:	2003e66c 	.word	0x2003e66c
   d7d8c:	2003e0ac 	.word	0x2003e0ac
   d7d90:	000d7d6b 	.word	0x000d7d6b

000d7d94 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7d94:	4b01      	ldr	r3, [pc, #4]	; (d7d9c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7d96:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7d98:	4770      	bx	lr
   d7d9a:	bf00      	nop
   d7d9c:	2003e048 	.word	0x2003e048

000d7da0 <serialEventRun>:
{
   d7da0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7da2:	4b0b      	ldr	r3, [pc, #44]	; (d7dd0 <serialEventRun+0x30>)
   d7da4:	b143      	cbz	r3, d7db8 <serialEventRun+0x18>
   d7da6:	f000 f985 	bl	d80b4 <_Z16_fetch_usbserialv>
   d7daa:	6803      	ldr	r3, [r0, #0]
   d7dac:	691b      	ldr	r3, [r3, #16]
   d7dae:	4798      	blx	r3
   d7db0:	2800      	cmp	r0, #0
   d7db2:	dd01      	ble.n	d7db8 <serialEventRun+0x18>
        serialEvent();
   d7db4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7db8:	4b06      	ldr	r3, [pc, #24]	; (d7dd4 <serialEventRun+0x34>)
   d7dba:	b143      	cbz	r3, d7dce <serialEventRun+0x2e>
   d7dbc:	f000 f9f8 	bl	d81b0 <_Z22__fetch_global_Serial1v>
   d7dc0:	6803      	ldr	r3, [r0, #0]
   d7dc2:	691b      	ldr	r3, [r3, #16]
   d7dc4:	4798      	blx	r3
   d7dc6:	2800      	cmp	r0, #0
   d7dc8:	dd01      	ble.n	d7dce <serialEventRun+0x2e>
        serialEvent1();
   d7dca:	f3af 8000 	nop.w
}
   d7dce:	bd08      	pop	{r3, pc}
	...

000d7dd8 <_post_loop>:
{
   d7dd8:	b508      	push	{r3, lr}
	serialEventRun();
   d7dda:	f7ff ffe1 	bl	d7da0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7dde:	f7fd fcd9 	bl	d5794 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7de2:	4b01      	ldr	r3, [pc, #4]	; (d7de8 <_post_loop+0x10>)
   d7de4:	6018      	str	r0, [r3, #0]
}
   d7de6:	bd08      	pop	{r3, pc}
   d7de8:	2003e7cc 	.word	0x2003e7cc

000d7dec <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7dec:	4802      	ldr	r0, [pc, #8]	; (d7df8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7dee:	4a03      	ldr	r2, [pc, #12]	; (d7dfc <_Z33system_initialize_user_backup_ramv+0x10>)
   d7df0:	4903      	ldr	r1, [pc, #12]	; (d7e00 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7df2:	1a12      	subs	r2, r2, r0
   d7df4:	f001 bd80 	b.w	d98f8 <memcpy>
   d7df8:	2003f400 	.word	0x2003f400
   d7dfc:	2003f404 	.word	0x2003f404
   d7e00:	000da570 	.word	0x000da570

000d7e04 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7e04:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7e06:	2300      	movs	r3, #0
   d7e08:	9300      	str	r3, [sp, #0]
   d7e0a:	461a      	mov	r2, r3
   d7e0c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7e10:	f7fd ff46 	bl	d5ca0 <system_ctrl_set_result>
}
   d7e14:	b003      	add	sp, #12
   d7e16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7e1c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7e1c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7e1e:	8843      	ldrh	r3, [r0, #2]
   d7e20:	2b0a      	cmp	r3, #10
   d7e22:	d008      	beq.n	d7e36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7e24:	2b50      	cmp	r3, #80	; 0x50
   d7e26:	d10b      	bne.n	d7e40 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7e28:	4b09      	ldr	r3, [pc, #36]	; (d7e50 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7e2a:	681b      	ldr	r3, [r3, #0]
   d7e2c:	b14b      	cbz	r3, d7e42 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7e2e:	b003      	add	sp, #12
   d7e30:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7e34:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7e36:	f7ff ffe5 	bl	d7e04 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d7e3a:	b003      	add	sp, #12
   d7e3c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7e40:	2300      	movs	r3, #0
   d7e42:	9300      	str	r3, [sp, #0]
   d7e44:	461a      	mov	r2, r3
   d7e46:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7e4a:	f7fd ff29 	bl	d5ca0 <system_ctrl_set_result>
}
   d7e4e:	e7f4      	b.n	d7e3a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7e50:	2003e680 	.word	0x2003e680

000d7e54 <module_user_init_hook>:
{
   d7e54:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7e56:	4c12      	ldr	r4, [pc, #72]	; (d7ea0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7e58:	4812      	ldr	r0, [pc, #72]	; (d7ea4 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7e5a:	4d13      	ldr	r5, [pc, #76]	; (d7ea8 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7e5c:	2100      	movs	r1, #0
   d7e5e:	f7fd fffb 	bl	d5e58 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7e62:	6823      	ldr	r3, [r4, #0]
   d7e64:	42ab      	cmp	r3, r5
   d7e66:	4b11      	ldr	r3, [pc, #68]	; (d7eac <module_user_init_hook+0x58>)
   d7e68:	bf0c      	ite	eq
   d7e6a:	2201      	moveq	r2, #1
   d7e6c:	2200      	movne	r2, #0
   d7e6e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7e70:	d002      	beq.n	d7e78 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7e72:	f7ff ffbb 	bl	d7dec <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7e76:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7e78:	f7fd fc7c 	bl	d5774 <HAL_RNG_GetRandomNumber>
   d7e7c:	4604      	mov	r4, r0
    srand(seed);
   d7e7e:	f001 fd6b 	bl	d9958 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7e82:	4b0b      	ldr	r3, [pc, #44]	; (d7eb0 <module_user_init_hook+0x5c>)
   d7e84:	b113      	cbz	r3, d7e8c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d7e86:	4620      	mov	r0, r4
   d7e88:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7e8c:	2100      	movs	r1, #0
   d7e8e:	4808      	ldr	r0, [pc, #32]	; (d7eb0 <module_user_init_hook+0x5c>)
   d7e90:	f7fd ffaa 	bl	d5de8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7e98:	4806      	ldr	r0, [pc, #24]	; (d7eb4 <module_user_init_hook+0x60>)
   d7e9a:	2100      	movs	r1, #0
   d7e9c:	f7fd bef6 	b.w	d5c8c <system_ctrl_set_app_request_handler>
   d7ea0:	2003f400 	.word	0x2003f400
   d7ea4:	000d7d95 	.word	0x000d7d95
   d7ea8:	9a271c1e 	.word	0x9a271c1e
   d7eac:	2003e67c 	.word	0x2003e67c
   d7eb0:	00000000 	.word	0x00000000
   d7eb4:	000d7e1d 	.word	0x000d7e1d

000d7eb8 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d7eb8:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d7eba:	2308      	movs	r3, #8
   d7ebc:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d7ec0:	6803      	ldr	r3, [r0, #0]
   d7ec2:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d7ec6:	7a03      	ldrb	r3, [r0, #8]
   d7ec8:	f88d 3003 	strb.w	r3, [sp, #3]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d7ecc:	2100      	movs	r1, #0
    opts.timeout = timeout_;
   d7ece:	6843      	ldr	r3, [r0, #4]
   d7ed0:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d7ed2:	4668      	mov	r0, sp
   d7ed4:	f7fd ff90 	bl	d5df8 <spark_cloud_disconnect>
}
   d7ed8:	b003      	add	sp, #12
   d7eda:	f85d fb04 	ldr.w	pc, [sp], #4

000d7ede <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d7ede:	4770      	bx	lr

000d7ee0 <_ZN9IPAddressD0Ev>:
   d7ee0:	b510      	push	{r4, lr}
   d7ee2:	2118      	movs	r1, #24
   d7ee4:	4604      	mov	r4, r0
   d7ee6:	f000 feb4 	bl	d8c52 <_ZdlPvj>
   d7eea:	4620      	mov	r0, r4
   d7eec:	bd10      	pop	{r4, pc}

000d7eee <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7eee:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7ef0:	7d03      	ldrb	r3, [r0, #20]
   d7ef2:	2b06      	cmp	r3, #6
{
   d7ef4:	b08d      	sub	sp, #52	; 0x34
   d7ef6:	460e      	mov	r6, r1
   d7ef8:	f100 0704 	add.w	r7, r0, #4
   d7efc:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d7f00:	d012      	beq.n	d7f28 <_ZNK9IPAddress7printToER5Print+0x3a>
   d7f02:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d7f06:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7f0a:	220a      	movs	r2, #10
   d7f0c:	4630      	mov	r0, r6
   d7f0e:	f7ff fdd6 	bl	d7abe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7f12:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7f14:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7f16:	d019      	beq.n	d7f4c <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d7f18:	2c00      	cmp	r4, #0
   d7f1a:	d0f4      	beq.n	d7f06 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d7f1c:	212e      	movs	r1, #46	; 0x2e
   d7f1e:	4630      	mov	r0, r6
   d7f20:	f7ff fdae 	bl	d7a80 <_ZN5Print5printEc>
   d7f24:	4404      	add	r4, r0
   d7f26:	e7ee      	b.n	d7f06 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7f28:	232f      	movs	r3, #47	; 0x2f
   d7f2a:	466a      	mov	r2, sp
   d7f2c:	4639      	mov	r1, r7
   d7f2e:	200a      	movs	r0, #10
		buf[0] = 0;
   d7f30:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7f34:	f7fd fd0a 	bl	d594c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d7f38:	4668      	mov	r0, sp
   d7f3a:	f001 fd43 	bl	d99c4 <strlen>
   d7f3e:	6833      	ldr	r3, [r6, #0]
   d7f40:	4602      	mov	r2, r0
   d7f42:	68db      	ldr	r3, [r3, #12]
   d7f44:	4669      	mov	r1, sp
   d7f46:	4630      	mov	r0, r6
   d7f48:	4798      	blx	r3
   d7f4a:	4604      	mov	r4, r0
    }
    return n;
}
   d7f4c:	4620      	mov	r0, r4
   d7f4e:	b00d      	add	sp, #52	; 0x34
   d7f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7f54 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7f54:	b510      	push	{r4, lr}
   d7f56:	4b05      	ldr	r3, [pc, #20]	; (d7f6c <_ZN9IPAddressC1Ev+0x18>)
   d7f58:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7f5a:	2211      	movs	r2, #17
   d7f5c:	f840 3b04 	str.w	r3, [r0], #4
   d7f60:	2100      	movs	r1, #0
   d7f62:	f001 fcf1 	bl	d9948 <memset>
}
   d7f66:	4620      	mov	r0, r4
   d7f68:	bd10      	pop	{r4, pc}
   d7f6a:	bf00      	nop
   d7f6c:	000da1d0 	.word	0x000da1d0

000d7f70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7f70:	4603      	mov	r3, r0
   d7f72:	4a07      	ldr	r2, [pc, #28]	; (d7f90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7f74:	b510      	push	{r4, lr}
   d7f76:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7f7a:	f101 0210 	add.w	r2, r1, #16
   d7f7e:	f851 4b04 	ldr.w	r4, [r1], #4
   d7f82:	f843 4b04 	str.w	r4, [r3], #4
   d7f86:	4291      	cmp	r1, r2
   d7f88:	d1f9      	bne.n	d7f7e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7f8a:	780a      	ldrb	r2, [r1, #0]
   d7f8c:	701a      	strb	r2, [r3, #0]
}
   d7f8e:	bd10      	pop	{r4, pc}
   d7f90:	000da1d0 	.word	0x000da1d0

000d7f94 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d7f94:	7d03      	ldrb	r3, [r0, #20]
   d7f96:	2b04      	cmp	r3, #4
   d7f98:	d104      	bne.n	d7fa4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d7f9a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7f9c:	3800      	subs	r0, #0
   d7f9e:	bf18      	it	ne
   d7fa0:	2001      	movne	r0, #1
   d7fa2:	4770      	bx	lr
    } else if (version() == 6) {
   d7fa4:	2b06      	cmp	r3, #6
   d7fa6:	d107      	bne.n	d7fb8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7fa8:	6843      	ldr	r3, [r0, #4]
   d7faa:	b93b      	cbnz	r3, d7fbc <_ZNK9IPAddresscvbEv+0x28>
   d7fac:	6883      	ldr	r3, [r0, #8]
   d7fae:	b92b      	cbnz	r3, d7fbc <_ZNK9IPAddresscvbEv+0x28>
   d7fb0:	68c3      	ldr	r3, [r0, #12]
   d7fb2:	b91b      	cbnz	r3, d7fbc <_ZNK9IPAddresscvbEv+0x28>
   d7fb4:	6900      	ldr	r0, [r0, #16]
   d7fb6:	e7f1      	b.n	d7f9c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d7fb8:	2000      	movs	r0, #0
   d7fba:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7fbc:	2001      	movs	r0, #1
}
   d7fbe:	4770      	bx	lr

000d7fc0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7fc0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7fc2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7fc6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7fca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7fce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7fd2:	2304      	movs	r3, #4
   d7fd4:	6041      	str	r1, [r0, #4]
   d7fd6:	7503      	strb	r3, [r0, #20]
}
   d7fd8:	bd10      	pop	{r4, pc}
	...

000d7fdc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d7fdc:	b513      	push	{r0, r1, r4, lr}
   d7fde:	4b05      	ldr	r3, [pc, #20]	; (d7ff4 <_ZN9IPAddressC1EPKh+0x18>)
   d7fe0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d7fe2:	78cb      	ldrb	r3, [r1, #3]
   d7fe4:	9300      	str	r3, [sp, #0]
   d7fe6:	788b      	ldrb	r3, [r1, #2]
   d7fe8:	784a      	ldrb	r2, [r1, #1]
   d7fea:	7809      	ldrb	r1, [r1, #0]
   d7fec:	f7ff ffe8 	bl	d7fc0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7ff0:	b002      	add	sp, #8
   d7ff2:	bd10      	pop	{r4, pc}
   d7ff4:	000da1d0 	.word	0x000da1d0

000d7ff8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7ff8:	7441      	strb	r1, [r0, #17]
}
   d7ffa:	4770      	bx	lr

000d7ffc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7ffc:	4770      	bx	lr

000d7ffe <_ZN9USBSerial4readEv>:
{
   d7ffe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8000:	2100      	movs	r1, #0
   d8002:	7c00      	ldrb	r0, [r0, #16]
   d8004:	f7fd fdfa 	bl	d5bfc <HAL_USB_USART_Receive_Data>
}
   d8008:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d800c:	bd08      	pop	{r3, pc}

000d800e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d800e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8010:	2101      	movs	r1, #1
   d8012:	7c00      	ldrb	r0, [r0, #16]
   d8014:	f7fd fdf2 	bl	d5bfc <HAL_USB_USART_Receive_Data>
}
   d8018:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d801c:	bd08      	pop	{r3, pc}

000d801e <_ZN9USBSerial17availableForWriteEv>:
{
   d801e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8020:	7c00      	ldrb	r0, [r0, #16]
   d8022:	f7fd fde3 	bl	d5bec <HAL_USB_USART_Available_Data_For_Write>
}
   d8026:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d802a:	bd08      	pop	{r3, pc}

000d802c <_ZN9USBSerial9availableEv>:
{
   d802c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d802e:	7c00      	ldrb	r0, [r0, #16]
   d8030:	f7fd fdd4 	bl	d5bdc <HAL_USB_USART_Available_Data>
}
   d8034:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8038:	bd08      	pop	{r3, pc}

000d803a <_ZN9USBSerial5writeEh>:
{
   d803a:	b513      	push	{r0, r1, r4, lr}
   d803c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d803e:	7c00      	ldrb	r0, [r0, #16]
{
   d8040:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8042:	f7fd fdd3 	bl	d5bec <HAL_USB_USART_Available_Data_For_Write>
   d8046:	2800      	cmp	r0, #0
   d8048:	9901      	ldr	r1, [sp, #4]
   d804a:	dc01      	bgt.n	d8050 <_ZN9USBSerial5writeEh+0x16>
   d804c:	7c60      	ldrb	r0, [r4, #17]
   d804e:	b120      	cbz	r0, d805a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8050:	7c20      	ldrb	r0, [r4, #16]
   d8052:	f7fd fddb 	bl	d5c0c <HAL_USB_USART_Send_Data>
   d8056:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d805a:	b002      	add	sp, #8
   d805c:	bd10      	pop	{r4, pc}

000d805e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d805e:	7c00      	ldrb	r0, [r0, #16]
   d8060:	f7fd bddc 	b.w	d5c1c <HAL_USB_USART_Flush_Data>

000d8064 <_ZN9USBSerialD0Ev>:
   d8064:	b510      	push	{r4, lr}
   d8066:	2114      	movs	r1, #20
   d8068:	4604      	mov	r4, r0
   d806a:	f000 fdf2 	bl	d8c52 <_ZdlPvj>
   d806e:	4620      	mov	r0, r4
   d8070:	bd10      	pop	{r4, pc}
	...

000d8074 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8074:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d807a:	4604      	mov	r4, r0
   d807c:	4608      	mov	r0, r1
   d807e:	2100      	movs	r1, #0
   d8080:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8084:	4b04      	ldr	r3, [pc, #16]	; (d8098 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8086:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d8088:	2301      	movs	r3, #1
  _serial = serial;
   d808a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d808c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d808e:	4611      	mov	r1, r2
   d8090:	f7fd fd94 	bl	d5bbc <HAL_USB_USART_Init>
}
   d8094:	4620      	mov	r0, r4
   d8096:	bd10      	pop	{r4, pc}
   d8098:	000da1e4 	.word	0x000da1e4

000d809c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d809c:	7c00      	ldrb	r0, [r0, #16]
   d809e:	2200      	movs	r2, #0
   d80a0:	f7fd bd94 	b.w	d5bcc <HAL_USB_USART_Begin>

000d80a4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d80a4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d80a6:	2214      	movs	r2, #20
{
   d80a8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d80aa:	2100      	movs	r1, #0
   d80ac:	f001 fc4c 	bl	d9948 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d80b0:	4620      	mov	r0, r4
   d80b2:	bd10      	pop	{r4, pc}

000d80b4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d80b4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d80b6:	4c10      	ldr	r4, [pc, #64]	; (d80f8 <_Z16_fetch_usbserialv+0x44>)
{
   d80b8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d80ba:	a803      	add	r0, sp, #12
   d80bc:	f7ff fff2 	bl	d80a4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d80c0:	7821      	ldrb	r1, [r4, #0]
   d80c2:	f3bf 8f5b 	dmb	ish
   d80c6:	f011 0101 	ands.w	r1, r1, #1
   d80ca:	d111      	bne.n	d80f0 <_Z16_fetch_usbserialv+0x3c>
   d80cc:	4620      	mov	r0, r4
   d80ce:	9101      	str	r1, [sp, #4]
   d80d0:	f7fb ffe7 	bl	d40a2 <__cxa_guard_acquire>
   d80d4:	9901      	ldr	r1, [sp, #4]
   d80d6:	b158      	cbz	r0, d80f0 <_Z16_fetch_usbserialv+0x3c>
   d80d8:	aa03      	add	r2, sp, #12
   d80da:	4808      	ldr	r0, [pc, #32]	; (d80fc <_Z16_fetch_usbserialv+0x48>)
   d80dc:	f7ff ffca 	bl	d8074 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d80e0:	4620      	mov	r0, r4
   d80e2:	f7fb ffe3 	bl	d40ac <__cxa_guard_release>
   d80e6:	4a06      	ldr	r2, [pc, #24]	; (d8100 <_Z16_fetch_usbserialv+0x4c>)
   d80e8:	4906      	ldr	r1, [pc, #24]	; (d8104 <_Z16_fetch_usbserialv+0x50>)
   d80ea:	4804      	ldr	r0, [pc, #16]	; (d80fc <_Z16_fetch_usbserialv+0x48>)
   d80ec:	f000 fdac 	bl	d8c48 <__aeabi_atexit>
	return _usbserial;
}
   d80f0:	4802      	ldr	r0, [pc, #8]	; (d80fc <_Z16_fetch_usbserialv+0x48>)
   d80f2:	b008      	add	sp, #32
   d80f4:	bd10      	pop	{r4, pc}
   d80f6:	bf00      	nop
   d80f8:	2003e684 	.word	0x2003e684
   d80fc:	2003e688 	.word	0x2003e688
   d8100:	2003e0ac 	.word	0x2003e0ac
   d8104:	000d7ffd 	.word	0x000d7ffd

000d8108 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d8108:	4770      	bx	lr

000d810a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d810a:	7441      	strb	r1, [r0, #17]
}
   d810c:	4770      	bx	lr

000d810e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d810e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d8110:	7c00      	ldrb	r0, [r0, #16]
   d8112:	f7fd fc6b 	bl	d59ec <hal_usart_available_data_for_write>
}
   d8116:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d811a:	bd08      	pop	{r3, pc}

000d811c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d811c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d811e:	7c00      	ldrb	r0, [r0, #16]
   d8120:	f7fd fc3c 	bl	d599c <hal_usart_available>
}
   d8124:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8128:	bd08      	pop	{r3, pc}

000d812a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d812a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d812c:	7c00      	ldrb	r0, [r0, #16]
   d812e:	f7fd fc45 	bl	d59bc <hal_usart_peek>
}
   d8132:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8136:	bd08      	pop	{r3, pc}

000d8138 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d8138:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d813a:	7c00      	ldrb	r0, [r0, #16]
   d813c:	f7fd fc36 	bl	d59ac <hal_usart_read>
}
   d8140:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8144:	bd08      	pop	{r3, pc}

000d8146 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d8146:	7c00      	ldrb	r0, [r0, #16]
   d8148:	f7fd bc40 	b.w	d59cc <hal_usart_flush>

000d814c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d814c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d814e:	7c45      	ldrb	r5, [r0, #17]
{
   d8150:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8152:	b12d      	cbz	r5, d8160 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d8154:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8156:	b003      	add	sp, #12
   d8158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d815c:	f7fd bc16 	b.w	d598c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8160:	7c00      	ldrb	r0, [r0, #16]
   d8162:	9101      	str	r1, [sp, #4]
   d8164:	f7fd fc42 	bl	d59ec <hal_usart_available_data_for_write>
   d8168:	2800      	cmp	r0, #0
   d816a:	9901      	ldr	r1, [sp, #4]
   d816c:	dcf2      	bgt.n	d8154 <_ZN11USARTSerial5writeEh+0x8>
}
   d816e:	4628      	mov	r0, r5
   d8170:	b003      	add	sp, #12
   d8172:	bd30      	pop	{r4, r5, pc}

000d8174 <_ZN11USARTSerialD0Ev>:
   d8174:	b510      	push	{r4, lr}
   d8176:	2114      	movs	r1, #20
   d8178:	4604      	mov	r4, r0
   d817a:	f000 fd6a 	bl	d8c52 <_ZdlPvj>
   d817e:	4620      	mov	r0, r4
   d8180:	bd10      	pop	{r4, pc}
	...

000d8184 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d8184:	b510      	push	{r4, lr}
   d8186:	f04f 0c00 	mov.w	ip, #0
   d818a:	4604      	mov	r4, r0
   d818c:	4608      	mov	r0, r1
   d818e:	4611      	mov	r1, r2
   d8190:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8194:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d8198:	4a04      	ldr	r2, [pc, #16]	; (d81ac <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d819a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d819c:	2201      	movs	r2, #1
  _serial = serial;
   d819e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d81a0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d81a2:	461a      	mov	r2, r3
   d81a4:	f7fd fbea 	bl	d597c <hal_usart_init>
}
   d81a8:	4620      	mov	r0, r4
   d81aa:	bd10      	pop	{r4, pc}
   d81ac:	000da214 	.word	0x000da214

000d81b0 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d81b0:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d81b2:	4c0e      	ldr	r4, [pc, #56]	; (d81ec <_Z22__fetch_global_Serial1v+0x3c>)
   d81b4:	7821      	ldrb	r1, [r4, #0]
   d81b6:	f3bf 8f5b 	dmb	ish
   d81ba:	f011 0101 	ands.w	r1, r1, #1
   d81be:	d112      	bne.n	d81e6 <_Z22__fetch_global_Serial1v+0x36>
   d81c0:	4620      	mov	r0, r4
   d81c2:	9101      	str	r1, [sp, #4]
   d81c4:	f7fb ff6d 	bl	d40a2 <__cxa_guard_acquire>
   d81c8:	9901      	ldr	r1, [sp, #4]
   d81ca:	b160      	cbz	r0, d81e6 <_Z22__fetch_global_Serial1v+0x36>
   d81cc:	4a08      	ldr	r2, [pc, #32]	; (d81f0 <_Z22__fetch_global_Serial1v+0x40>)
   d81ce:	4b09      	ldr	r3, [pc, #36]	; (d81f4 <_Z22__fetch_global_Serial1v+0x44>)
   d81d0:	4809      	ldr	r0, [pc, #36]	; (d81f8 <_Z22__fetch_global_Serial1v+0x48>)
   d81d2:	f7ff ffd7 	bl	d8184 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d81d6:	4620      	mov	r0, r4
   d81d8:	f7fb ff68 	bl	d40ac <__cxa_guard_release>
   d81dc:	4a07      	ldr	r2, [pc, #28]	; (d81fc <_Z22__fetch_global_Serial1v+0x4c>)
   d81de:	4908      	ldr	r1, [pc, #32]	; (d8200 <_Z22__fetch_global_Serial1v+0x50>)
   d81e0:	4805      	ldr	r0, [pc, #20]	; (d81f8 <_Z22__fetch_global_Serial1v+0x48>)
   d81e2:	f000 fd31 	bl	d8c48 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d81e6:	4804      	ldr	r0, [pc, #16]	; (d81f8 <_Z22__fetch_global_Serial1v+0x48>)
   d81e8:	b002      	add	sp, #8
   d81ea:	bd10      	pop	{r4, pc}
   d81ec:	2003e69c 	.word	0x2003e69c
   d81f0:	2003e6a0 	.word	0x2003e6a0
   d81f4:	2003e724 	.word	0x2003e724
   d81f8:	2003e7a8 	.word	0x2003e7a8
   d81fc:	2003e0ac 	.word	0x2003e0ac
   d8200:	000d8109 	.word	0x000d8109

000d8204 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8204:	4770      	bx	lr

000d8206 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8208:	4606      	mov	r6, r0
   d820a:	4615      	mov	r5, r2
   d820c:	460c      	mov	r4, r1
   d820e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8210:	42bc      	cmp	r4, r7
   d8212:	d006      	beq.n	d8222 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8214:	6833      	ldr	r3, [r6, #0]
   d8216:	f814 1b01 	ldrb.w	r1, [r4], #1
   d821a:	689b      	ldr	r3, [r3, #8]
   d821c:	4630      	mov	r0, r6
   d821e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d8220:	e7f6      	b.n	d8210 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d8222:	4628      	mov	r0, r5
   d8224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8226 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d8226:	7c00      	ldrb	r0, [r0, #16]
   d8228:	2200      	movs	r2, #0
   d822a:	f7fd bc07 	b.w	d5a3c <hal_i2c_write>

000d822e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d822e:	7c00      	ldrb	r0, [r0, #16]
   d8230:	2100      	movs	r1, #0
   d8232:	f7fd bc0b 	b.w	d5a4c <hal_i2c_available>

000d8236 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d8236:	7c00      	ldrb	r0, [r0, #16]
   d8238:	2100      	movs	r1, #0
   d823a:	f7fd bc0f 	b.w	d5a5c <hal_i2c_read>

000d823e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d823e:	7c00      	ldrb	r0, [r0, #16]
   d8240:	2100      	movs	r1, #0
   d8242:	f7fd bc13 	b.w	d5a6c <hal_i2c_peek>

000d8246 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d8246:	7c00      	ldrb	r0, [r0, #16]
   d8248:	2100      	movs	r1, #0
   d824a:	f7fd bc17 	b.w	d5a7c <hal_i2c_flush>

000d824e <_ZN7TwoWireD0Ev>:
   d824e:	b510      	push	{r4, lr}
   d8250:	2114      	movs	r1, #20
   d8252:	4604      	mov	r4, r0
   d8254:	f000 fcfd 	bl	d8c52 <_ZdlPvj>
   d8258:	4620      	mov	r0, r4
   d825a:	bd10      	pop	{r4, pc}

000d825c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d825c:	b510      	push	{r4, lr}
   d825e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8262:	4604      	mov	r4, r0
   d8264:	4608      	mov	r0, r1
   d8266:	2100      	movs	r1, #0
   d8268:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d826c:	4b03      	ldr	r3, [pc, #12]	; (d827c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d826e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8270:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d8272:	4611      	mov	r1, r2
   d8274:	f7fd fc12 	bl	d5a9c <hal_i2c_init>
}
   d8278:	4620      	mov	r0, r4
   d827a:	bd10      	pop	{r4, pc}
   d827c:	000da244 	.word	0x000da244

000d8280 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8280:	2300      	movs	r3, #0
   d8282:	7c00      	ldrb	r0, [r0, #16]
   d8284:	461a      	mov	r2, r3
   d8286:	4619      	mov	r1, r3
   d8288:	f7fd bbb8 	b.w	d59fc <hal_i2c_begin>

000d828c <_ZN7TwoWire3endEv>:
	hal_i2c_end(_i2c, NULL);
   d828c:	7c00      	ldrb	r0, [r0, #16]
   d828e:	2100      	movs	r1, #0
   d8290:	f7fd bbbc 	b.w	d5a0c <hal_i2c_end>

000d8294 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8294:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8296:	2200      	movs	r2, #0
   d8298:	2314      	movs	r3, #20
   d829a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d829e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d82a2:	780b      	ldrb	r3, [r1, #0]
   d82a4:	f88d 3008 	strb.w	r3, [sp, #8]
   d82a8:	684b      	ldr	r3, [r1, #4]
   d82aa:	9303      	str	r3, [sp, #12]
   d82ac:	68cb      	ldr	r3, [r1, #12]
   d82ae:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d82b0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d82b2:	7a0b      	ldrb	r3, [r1, #8]
   d82b4:	9305      	str	r3, [sp, #20]
   d82b6:	a901      	add	r1, sp, #4
   d82b8:	f7fd fbf8 	bl	d5aac <hal_i2c_request_ex>
}
   d82bc:	b007      	add	sp, #28
   d82be:	f85d fb04 	ldr.w	pc, [sp], #4

000d82c2 <_ZN7TwoWire11requestFromEhjh>:
{
   d82c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d82c4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d82c6:	f88d 1000 	strb.w	r1, [sp]
   d82ca:	f04f 0164 	mov.w	r1, #100	; 0x64
   d82ce:	9103      	str	r1, [sp, #12]
   d82d0:	bf18      	it	ne
   d82d2:	2301      	movne	r3, #1
   d82d4:	4669      	mov	r1, sp
    size_ = size;
   d82d6:	9201      	str	r2, [sp, #4]
   d82d8:	f88d 3008 	strb.w	r3, [sp, #8]
   d82dc:	f7ff ffda 	bl	d8294 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d82e0:	b005      	add	sp, #20
   d82e2:	f85d fb04 	ldr.w	pc, [sp], #4

000d82e6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d82e6:	2301      	movs	r3, #1
   d82e8:	f7ff bfeb 	b.w	d82c2 <_ZN7TwoWire11requestFromEhjh>

000d82ec <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d82ec:	7c00      	ldrb	r0, [r0, #16]
   d82ee:	2200      	movs	r2, #0
   d82f0:	f7fd bb94 	b.w	d5a1c <hal_i2c_begin_transmission>

000d82f4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d82f4:	b2c9      	uxtb	r1, r1
   d82f6:	f7ff bff9 	b.w	d82ec <_ZN7TwoWire17beginTransmissionEh>

000d82fa <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d82fa:	7c00      	ldrb	r0, [r0, #16]
   d82fc:	2200      	movs	r2, #0
   d82fe:	f7fd bb95 	b.w	d5a2c <hal_i2c_end_transmission>

000d8302 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d8302:	2101      	movs	r1, #1
   d8304:	f7ff bff9 	b.w	d82fa <_ZN7TwoWire15endTransmissionEh>

000d8308 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d8308:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d830a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d830c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d8310:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d8312:	2201      	movs	r2, #1
   d8314:	f04f 33ff 	mov.w	r3, #4294967295
   d8318:	f10d 0107 	add.w	r1, sp, #7
   d831c:	47a0      	blx	r4
}
   d831e:	b002      	add	sp, #8
   d8320:	bd10      	pop	{r4, pc}

000d8322 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d8322:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d8324:	6803      	ldr	r3, [r0, #0]
   d8326:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d8328:	f04f 33ff 	mov.w	r3, #4294967295
   d832c:	46a4      	mov	ip, r4
}
   d832e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d8332:	4760      	bx	ip

000d8334 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d8334:	b513      	push	{r0, r1, r4, lr}
   d8336:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d8338:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d833a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d833e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d8340:	f10d 0107 	add.w	r1, sp, #7
   d8344:	2201      	movs	r2, #1
   d8346:	47a0      	blx	r4
}
   d8348:	b002      	add	sp, #8
   d834a:	bd10      	pop	{r4, pc}

000d834c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d834c:	4770      	bx	lr

000d834e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d834e:	b538      	push	{r3, r4, r5, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8350:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d8352:	681a      	ldr	r2, [r3, #0]
   d8354:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d8356:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d8358:	da10      	bge.n	d837c <_ZN9TCPClient9connectedEv+0x2e>
   d835a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d835e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8362:	429a      	cmp	r2, r3
   d8364:	d10a      	bne.n	d837c <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d8366:	6803      	ldr	r3, [r0, #0]
   d8368:	691b      	ldr	r3, [r3, #16]
   d836a:	4798      	blx	r3
        if (!rv) {
   d836c:	4604      	mov	r4, r0
   d836e:	b928      	cbnz	r0, d837c <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d8370:	682b      	ldr	r3, [r5, #0]
   d8372:	4628      	mov	r0, r5
   d8374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8376:	4798      	blx	r3
        rv = available();
   d8378:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d837a:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d837c:	2001      	movs	r0, #1
   d837e:	e7fc      	b.n	d837a <_ZN9TCPClient9connectedEv+0x2c>

000d8380 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d8380:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d8382:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d8384:	43c0      	mvns	r0, r0
   d8386:	0fc0      	lsrs	r0, r0, #31
   d8388:	4770      	bx	lr

000d838a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d838a:	4770      	bx	lr

000d838c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d838c:	4b06      	ldr	r3, [pc, #24]	; (d83a8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d838e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d8390:	b510      	push	{r4, lr}
   d8392:	f100 040c 	add.w	r4, r0, #12
	    ||
   d8396:	d005      	beq.n	d83a4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d8398:	4608      	mov	r0, r1
   d839a:	f000 fc63 	bl	d8c64 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d839e:	2800      	cmp	r0, #0
	return nullptr;
   d83a0:	bf08      	it	eq
   d83a2:	2400      	moveq	r4, #0
      }
   d83a4:	4620      	mov	r0, r4
   d83a6:	bd10      	pop	{r4, pc}
   d83a8:	000da164 	.word	0x000da164

000d83ac <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d83ac:	b510      	push	{r4, lr}
   d83ae:	21ac      	movs	r1, #172	; 0xac
   d83b0:	4604      	mov	r4, r0
   d83b2:	f000 fc4e 	bl	d8c52 <_ZdlPvj>
   d83b6:	4620      	mov	r0, r4
   d83b8:	bd10      	pop	{r4, pc}

000d83ba <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p);
   d83ba:	f7fb be70 	b.w	d409e <_ZdlPv>

000d83be <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d83be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d83c2:	f04f 0800 	mov.w	r8, #0
   d83c6:	b086      	sub	sp, #24
   d83c8:	461d      	mov	r5, r3
   d83ca:	f8c0 8004 	str.w	r8, [r0, #4]
   d83ce:	4604      	mov	r4, r0
   d83d0:	460e      	mov	r6, r1
   d83d2:	4617      	mov	r7, r2
    struct timeval tv = {};
   d83d4:	4641      	mov	r1, r8
   d83d6:	2210      	movs	r2, #16
   d83d8:	a802      	add	r0, sp, #8
   d83da:	f001 fab5 	bl	d9948 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d83de:	1c6b      	adds	r3, r5, #1
   d83e0:	d009      	beq.n	d83f6 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d83e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d83e6:	fbb5 f3f0 	udiv	r3, r5, r0
   d83ea:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d83ee:	fb00 5313 	mls	r3, r0, r3, r5
   d83f2:	4358      	muls	r0, r3
   d83f4:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d83f6:	6960      	ldr	r0, [r4, #20]
   d83f8:	2310      	movs	r3, #16
   d83fa:	9300      	str	r3, [sp, #0]
   d83fc:	6800      	ldr	r0, [r0, #0]
   d83fe:	ab02      	add	r3, sp, #8
   d8400:	f241 0205 	movw	r2, #4101	; 0x1005
   d8404:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8408:	f7fd fb58 	bl	d5abc <sock_setsockopt>
    if (ret < 0) {
   d840c:	2800      	cmp	r0, #0
   d840e:	da07      	bge.n	d8420 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d8410:	f7fd fd1a 	bl	d5e48 <__errno>
   d8414:	6803      	ldr	r3, [r0, #0]
   d8416:	6063      	str	r3, [r4, #4]
        return 0;
   d8418:	2000      	movs	r0, #0
}
   d841a:	b006      	add	sp, #24
   d841c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d8420:	6960      	ldr	r0, [r4, #20]
   d8422:	2300      	movs	r3, #0
   d8424:	6800      	ldr	r0, [r0, #0]
   d8426:	463a      	mov	r2, r7
   d8428:	4631      	mov	r1, r6
   d842a:	f7fd fb67 	bl	d5afc <sock_send>
    if (ret < 0) {
   d842e:	1e03      	subs	r3, r0, #0
   d8430:	dbee      	blt.n	d8410 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d8432:	4618      	mov	r0, r3
   d8434:	e7f1      	b.n	d841a <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d8438 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d8438:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d843a:	6984      	ldr	r4, [r0, #24]
   d843c:	4b0a      	ldr	r3, [pc, #40]	; (d8468 <_ZN9TCPClientD1Ev+0x30>)
   d843e:	6003      	str	r3, [r0, #0]
   d8440:	4605      	mov	r5, r0
   d8442:	b17c      	cbz	r4, d8464 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d8444:	6863      	ldr	r3, [r4, #4]
   d8446:	3b01      	subs	r3, #1
   d8448:	6063      	str	r3, [r4, #4]
   d844a:	b95b      	cbnz	r3, d8464 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d844c:	6823      	ldr	r3, [r4, #0]
   d844e:	4620      	mov	r0, r4
   d8450:	689b      	ldr	r3, [r3, #8]
   d8452:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8454:	68a3      	ldr	r3, [r4, #8]
   d8456:	3b01      	subs	r3, #1
   d8458:	60a3      	str	r3, [r4, #8]
   d845a:	b91b      	cbnz	r3, d8464 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d845c:	6823      	ldr	r3, [r4, #0]
   d845e:	4620      	mov	r0, r4
   d8460:	68db      	ldr	r3, [r3, #12]
   d8462:	4798      	blx	r3
   d8464:	4628      	mov	r0, r5
   d8466:	bd38      	pop	{r3, r4, r5, pc}
   d8468:	000da298 	.word	0x000da298

000d846c <_ZN9TCPClientD0Ev>:
   d846c:	b510      	push	{r4, lr}
   d846e:	4604      	mov	r4, r0
   d8470:	f7ff ffe2 	bl	d8438 <_ZN9TCPClientD1Ev>
   d8474:	4620      	mov	r0, r4
   d8476:	211c      	movs	r1, #28
   d8478:	f000 fbeb 	bl	d8c52 <_ZdlPvj>
   d847c:	4620      	mov	r0, r4
   d847e:	bd10      	pop	{r4, pc}

000d8480 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d8480:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8482:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d8484:	4b05      	ldr	r3, [pc, #20]	; (d849c <_ZN9TCPClient8remoteIPEv+0x1c>)
   d8486:	4604      	mov	r4, r0
   d8488:	358c      	adds	r5, #140	; 0x8c
   d848a:	f844 3b04 	str.w	r3, [r4], #4
   d848e:	4606      	mov	r6, r0
   d8490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8494:	682b      	ldr	r3, [r5, #0]
   d8496:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d8498:	4630      	mov	r0, r6
   d849a:	bd70      	pop	{r4, r5, r6, pc}
   d849c:	000da1d0 	.word	0x000da1d0

000d84a0 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d84a0:	b510      	push	{r4, lr}
   d84a2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d84a4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d84a8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d84ac:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d84ae:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d84b0:	d005      	beq.n	d84be <_ZN9TCPClient4peekEv+0x1e>
   d84b2:	6963      	ldr	r3, [r4, #20]
   d84b4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d84b8:	4413      	add	r3, r2
   d84ba:	7918      	ldrb	r0, [r3, #4]
}
   d84bc:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d84be:	6803      	ldr	r3, [r0, #0]
   d84c0:	691b      	ldr	r3, [r3, #16]
   d84c2:	4798      	blx	r3
   d84c4:	2800      	cmp	r0, #0
   d84c6:	d1f4      	bne.n	d84b2 <_ZN9TCPClient4peekEv+0x12>
   d84c8:	f04f 30ff 	mov.w	r0, #4294967295
   d84cc:	e7f6      	b.n	d84bc <_ZN9TCPClient4peekEv+0x1c>

000d84ce <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d84ce:	b510      	push	{r4, lr}
   d84d0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d84d2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d84d6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d84da:	429a      	cmp	r2, r3
int TCPClient::read() {
   d84dc:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d84de:	d008      	beq.n	d84f2 <_ZN9TCPClient4readEv+0x24>
   d84e0:	6963      	ldr	r3, [r4, #20]
   d84e2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d84e6:	1c51      	adds	r1, r2, #1
   d84e8:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d84ec:	4413      	add	r3, r2
   d84ee:	7918      	ldrb	r0, [r3, #4]
}
   d84f0:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d84f2:	6803      	ldr	r3, [r0, #0]
   d84f4:	691b      	ldr	r3, [r3, #16]
   d84f6:	4798      	blx	r3
   d84f8:	2800      	cmp	r0, #0
   d84fa:	d1f1      	bne.n	d84e0 <_ZN9TCPClient4readEv+0x12>
   d84fc:	f04f 30ff 	mov.w	r0, #4294967295
   d8500:	e7f6      	b.n	d84f0 <_ZN9TCPClient4readEv+0x22>

000d8502 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d8502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8504:	6943      	ldr	r3, [r0, #20]
   d8506:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d8508:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d850c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8510:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d8512:	4605      	mov	r5, r0
   d8514:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d8516:	d016      	beq.n	d8546 <_ZN9TCPClient4readEPhj+0x44>
   d8518:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d851a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d851e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d8522:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d8524:	42bc      	cmp	r4, r7
   d8526:	bf28      	it	cs
   d8528:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d852a:	3304      	adds	r3, #4
   d852c:	4622      	mov	r2, r4
   d852e:	4419      	add	r1, r3
   d8530:	4630      	mov	r0, r6
   d8532:	f001 f9e1 	bl	d98f8 <memcpy>
   d8536:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d8538:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d853c:	4423      	add	r3, r4
   d853e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d8542:	4620      	mov	r0, r4
   d8544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d8546:	6803      	ldr	r3, [r0, #0]
   d8548:	691b      	ldr	r3, [r3, #16]
   d854a:	4798      	blx	r3
   d854c:	2800      	cmp	r0, #0
   d854e:	d1e3      	bne.n	d8518 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d8550:	f04f 34ff 	mov.w	r4, #4294967295
   d8554:	e7f5      	b.n	d8542 <_ZN9TCPClient4readEPhj+0x40>

000d8556 <_ZN9TCPClient12flush_bufferEv>:
   d8556:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d8558:	2300      	movs	r3, #0
   d855a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d855e:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d8560:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d8564:	4770      	bx	lr

000d8566 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d856a:	461f      	mov	r7, r3
    stop();
   d856c:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d856e:	460c      	mov	r4, r1
    stop();
   d8570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8572:	b08a      	sub	sp, #40	; 0x28
   d8574:	4605      	mov	r5, r0
   d8576:	4616      	mov	r6, r2
    stop();
   d8578:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d857a:	7d23      	ldrb	r3, [r4, #20]
   d857c:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d8580:	2b04      	cmp	r3, #4
   d8582:	bf0c      	ite	eq
   d8584:	2002      	moveq	r0, #2
   d8586:	200a      	movne	r0, #10
   d8588:	2206      	movs	r2, #6
   d858a:	2101      	movs	r1, #1
   d858c:	f7fd fabe 	bl	d5b0c <sock_socket>
   d8590:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d8594:	696b      	ldr	r3, [r5, #20]
   d8596:	681b      	ldr	r3, [r3, #0]
   d8598:	2b00      	cmp	r3, #0
   d859a:	da08      	bge.n	d85ae <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d859c:	682b      	ldr	r3, [r5, #0]
   d859e:	4628      	mov	r0, r5
   d85a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d85a2:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d85a4:	4798      	blx	r3
}
   d85a6:	4620      	mov	r0, r4
   d85a8:	b00a      	add	sp, #40	; 0x28
   d85aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d85ae:	4628      	mov	r0, r5
   d85b0:	f7ff ffd1 	bl	d8556 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d85b4:	b1b7      	cbz	r7, d85e4 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d85b6:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d85b8:	a903      	add	r1, sp, #12
   d85ba:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d85bc:	9303      	str	r3, [sp, #12]
   d85be:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d85c2:	f7fd f8cf 	bl	d5764 <if_index_to_name>
   d85c6:	2800      	cmp	r0, #0
   d85c8:	d1e8      	bne.n	d859c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d85ca:	6968      	ldr	r0, [r5, #20]
   d85cc:	2306      	movs	r3, #6
   d85ce:	9300      	str	r3, [sp, #0]
   d85d0:	6800      	ldr	r0, [r0, #0]
   d85d2:	ab03      	add	r3, sp, #12
   d85d4:	f241 020b 	movw	r2, #4107	; 0x100b
   d85d8:	f640 71ff 	movw	r1, #4095	; 0xfff
   d85dc:	f7fd fa6e 	bl	d5abc <sock_setsockopt>
   d85e0:	2800      	cmp	r0, #0
   d85e2:	d1db      	bne.n	d859c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d85e4:	221c      	movs	r2, #28
   d85e6:	2100      	movs	r1, #0
   d85e8:	a803      	add	r0, sp, #12
   d85ea:	f001 f9ad 	bl	d9948 <memset>
    if (ip.version() == 4) {
   d85ee:	7d23      	ldrb	r3, [r4, #20]
   d85f0:	2b04      	cmp	r3, #4
   d85f2:	d11d      	bne.n	d8630 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d85f4:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d85f8:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d85fa:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d85fe:	f7fd f9b5 	bl	d596c <inet_htons>
   d8602:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d8606:	6860      	ldr	r0, [r4, #4]
   d8608:	f7fd f9a8 	bl	d595c <inet_htonl>
   d860c:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d860e:	696b      	ldr	r3, [r5, #20]
   d8610:	221c      	movs	r2, #28
   d8612:	6818      	ldr	r0, [r3, #0]
   d8614:	a903      	add	r1, sp, #12
   d8616:	f7fd fa61 	bl	d5adc <sock_connect>
   d861a:	2800      	cmp	r0, #0
   d861c:	d1be      	bne.n	d859c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d861e:	3404      	adds	r4, #4
   d8620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8622:	696d      	ldr	r5, [r5, #20]
   d8624:	358c      	adds	r5, #140	; 0x8c
   d8626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8628:	6823      	ldr	r3, [r4, #0]
   d862a:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d862c:	2401      	movs	r4, #1
   d862e:	e7ba      	b.n	d85a6 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d8630:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d8634:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d8636:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d863a:	f7fd f997 	bl	d596c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d863e:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d8640:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8644:	1d23      	adds	r3, r4, #4
   d8646:	f104 0714 	add.w	r7, r4, #20
   d864a:	6818      	ldr	r0, [r3, #0]
   d864c:	6859      	ldr	r1, [r3, #4]
   d864e:	4632      	mov	r2, r6
   d8650:	c203      	stmia	r2!, {r0, r1}
   d8652:	3308      	adds	r3, #8
   d8654:	42bb      	cmp	r3, r7
   d8656:	4616      	mov	r6, r2
   d8658:	d1f7      	bne.n	d864a <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d865a:	e7d8      	b.n	d860e <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d865c <_ZN9TCPClient9availableEv>:
{
   d865c:	b530      	push	{r4, r5, lr}
   d865e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d8660:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d8664:	b08b      	sub	sp, #44	; 0x2c
   d8666:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d8668:	b12b      	cbz	r3, d8676 <_ZN9TCPClient9availableEv+0x1a>
   d866a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d866e:	429a      	cmp	r2, r3
   d8670:	d101      	bne.n	d8676 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d8672:	f7ff ff70 	bl	d8556 <_ZN9TCPClient12flush_bufferEv>
   d8676:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d8678:	6808      	ldr	r0, [r1, #0]
   d867a:	2800      	cmp	r0, #0
   d867c:	db18      	blt.n	d86b0 <_ZN9TCPClient9availableEv+0x54>
   d867e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d8682:	2d7f      	cmp	r5, #127	; 0x7f
   d8684:	d814      	bhi.n	d86b0 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d8686:	3104      	adds	r1, #4
   d8688:	2308      	movs	r3, #8
   d868a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d868e:	4429      	add	r1, r5
   d8690:	f7fd fa2c 	bl	d5aec <sock_recv>
            if (ret > 0) {
   d8694:	2800      	cmp	r0, #0
   d8696:	dd13      	ble.n	d86c0 <_ZN9TCPClient9availableEv+0x64>
   d8698:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d869a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d869e:	b90a      	cbnz	r2, d86a4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d86a0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d86a4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d86a6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d86aa:	4410      	add	r0, r2
   d86ac:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d86b0:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d86b2:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d86b6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d86ba:	1ac0      	subs	r0, r0, r3
   d86bc:	b00b      	add	sp, #44	; 0x2c
   d86be:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d86c0:	f7fd fbc2 	bl	d5e48 <__errno>
   d86c4:	6803      	ldr	r3, [r0, #0]
   d86c6:	2b0b      	cmp	r3, #11
   d86c8:	d0f2      	beq.n	d86b0 <_ZN9TCPClient9availableEv+0x54>
   d86ca:	f7fd fbbd 	bl	d5e48 <__errno>
   d86ce:	6803      	ldr	r3, [r0, #0]
   d86d0:	2b0b      	cmp	r3, #11
   d86d2:	d0ed      	beq.n	d86b0 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d86d4:	2320      	movs	r3, #32
   d86d6:	2500      	movs	r5, #0
   d86d8:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d86dc:	f7fd fbb4 	bl	d5e48 <__errno>
   d86e0:	6803      	ldr	r3, [r0, #0]
   d86e2:	9301      	str	r3, [sp, #4]
   d86e4:	4b08      	ldr	r3, [pc, #32]	; (d8708 <_ZN9TCPClient9availableEv+0xac>)
   d86e6:	4909      	ldr	r1, [pc, #36]	; (d870c <_ZN9TCPClient9availableEv+0xb0>)
   d86e8:	9300      	str	r3, [sp, #0]
   d86ea:	aa02      	add	r2, sp, #8
   d86ec:	462b      	mov	r3, r5
   d86ee:	2032      	movs	r0, #50	; 0x32
   d86f0:	f7fd faa4 	bl	d5c3c <log_message>
                    sock_close(d_->sock);
   d86f4:	6963      	ldr	r3, [r4, #20]
   d86f6:	6818      	ldr	r0, [r3, #0]
   d86f8:	f7fd f9e8 	bl	d5acc <sock_close>
   d86fc:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d86fe:	f04f 32ff 	mov.w	r2, #4294967295
   d8702:	601a      	str	r2, [r3, #0]
   d8704:	e7d4      	b.n	d86b0 <_ZN9TCPClient9availableEv+0x54>
   d8706:	bf00      	nop
   d8708:	000da264 	.word	0x000da264
   d870c:	000d9fec 	.word	0x000d9fec

000d8710 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d8710:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d8712:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d8714:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d8716:	6818      	ldr	r0, [r3, #0]
   d8718:	2800      	cmp	r0, #0
   d871a:	db01      	blt.n	d8720 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d871c:	f7fd f9d6 	bl	d5acc <sock_close>
   d8720:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d8722:	f04f 32ff 	mov.w	r2, #4294967295
   d8726:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d8728:	6960      	ldr	r0, [r4, #20]
   d872a:	2211      	movs	r2, #17
   d872c:	2100      	movs	r1, #0
   d872e:	308c      	adds	r0, #140	; 0x8c
   d8730:	f001 f90a 	bl	d9948 <memset>
    flush_buffer();
   d8734:	4620      	mov	r0, r4
}
   d8736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d873a:	f7ff bf0c 	b.w	d8556 <_ZN9TCPClient12flush_bufferEv>

000d873e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d873e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d8740:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d8742:	4604      	mov	r4, r0
          total(0) {
   d8744:	6001      	str	r1, [r0, #0]
   d8746:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d874a:	3088      	adds	r0, #136	; 0x88
   d874c:	f7ff fc02 	bl	d7f54 <_ZN9IPAddressC1Ev>
}
   d8750:	4620      	mov	r0, r4
   d8752:	bd10      	pop	{r4, pc}

000d8754 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d8754:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8756:	2300      	movs	r3, #0
   d8758:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d875c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d8760:	4a0e      	ldr	r2, [pc, #56]	; (d879c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d8762:	6103      	str	r3, [r0, #16]
   d8764:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d8766:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d8768:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d876a:	20ac      	movs	r0, #172	; 0xac
   d876c:	9101      	str	r1, [sp, #4]
   d876e:	f7fb fc92 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d8772:	1e05      	subs	r5, r0, #0
   d8774:	f105 060c 	add.w	r6, r5, #12
   d8778:	d008      	beq.n	d878c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d877a:	2301      	movs	r3, #1
   d877c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d8780:	4b07      	ldr	r3, [pc, #28]	; (d87a0 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8782:	9901      	ldr	r1, [sp, #4]
   d8784:	602b      	str	r3, [r5, #0]
   d8786:	4630      	mov	r0, r6
   d8788:	f7ff ffd9 	bl	d873e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d878c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d878e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d8792:	f7ff fee0 	bl	d8556 <_ZN9TCPClient12flush_bufferEv>
}
   d8796:	b002      	add	sp, #8
   d8798:	bd70      	pop	{r4, r5, r6, pc}
   d879a:	bf00      	nop
   d879c:	000da298 	.word	0x000da298
   d87a0:	000da27c 	.word	0x000da27c

000d87a4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d87a4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d87a6:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d87aa:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d87ac:	f7ff ffd2 	bl	d8754 <_ZN9TCPClientC1Ei>
}
   d87b0:	4620      	mov	r0, r4
   d87b2:	bd10      	pop	{r4, pc}

000d87b4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d87b4:	b510      	push	{r4, lr}
   d87b6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d87b8:	6800      	ldr	r0, [r0, #0]
   d87ba:	2800      	cmp	r0, #0
   d87bc:	db01      	blt.n	d87c2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d87be:	f7fd f985 	bl	d5acc <sock_close>
    }
}
   d87c2:	4620      	mov	r0, r4
   d87c4:	bd10      	pop	{r4, pc}

000d87c6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d87c6:	300c      	adds	r0, #12
   d87c8:	f7ff bff4 	b.w	d87b4 <_ZN9TCPClient4DataD1Ev>

000d87cc <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d87cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d87d0:	4698      	mov	r8, r3
    stop();
   d87d2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d87d4:	b093      	sub	sp, #76	; 0x4c
   d87d6:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d87d8:	2400      	movs	r4, #0
    stop();
   d87da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d87dc:	4606      	mov	r6, r0
   d87de:	4617      	mov	r7, r2
    stop();
   d87e0:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d87e2:	4628      	mov	r0, r5
   d87e4:	466b      	mov	r3, sp
   d87e6:	4622      	mov	r2, r4
   d87e8:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d87ea:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d87ec:	f7fc ff92 	bl	d5714 <netdb_getaddrinfo>
   d87f0:	4605      	mov	r5, r0
   d87f2:	2800      	cmp	r0, #0
   d87f4:	d163      	bne.n	d88be <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d87f6:	9b00      	ldr	r3, [sp, #0]
   d87f8:	2b00      	cmp	r3, #0
   d87fa:	d04b      	beq.n	d8894 <_ZN9TCPClient7connectEPKctm+0xc8>
   d87fc:	695b      	ldr	r3, [r3, #20]
   d87fe:	2b00      	cmp	r3, #0
   d8800:	d048      	beq.n	d8894 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d8802:	a806      	add	r0, sp, #24
   d8804:	f7ff fba6 	bl	d7f54 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d8808:	9b00      	ldr	r3, [sp, #0]
   d880a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d880c:	7863      	ldrb	r3, [r4, #1]
   d880e:	2b02      	cmp	r3, #2
   d8810:	d104      	bne.n	d881c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8812:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8814:	a806      	add	r0, sp, #24
   d8816:	f7fd fd49 	bl	d62ac <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d881a:	e026      	b.n	d886a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d881c:	2b0a      	cmp	r3, #10
   d881e:	d124      	bne.n	d886a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d8820:	2211      	movs	r2, #17
   d8822:	4629      	mov	r1, r5
   d8824:	a801      	add	r0, sp, #4
   d8826:	f001 f88f 	bl	d9948 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d882a:	68a3      	ldr	r3, [r4, #8]
   d882c:	2b00      	cmp	r3, #0
   d882e:	d038      	beq.n	d88a2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8830:	f104 0308 	add.w	r3, r4, #8
   d8834:	f10d 0c04 	add.w	ip, sp, #4
   d8838:	3418      	adds	r4, #24
   d883a:	6818      	ldr	r0, [r3, #0]
   d883c:	6859      	ldr	r1, [r3, #4]
   d883e:	4662      	mov	r2, ip
   d8840:	c203      	stmia	r2!, {r0, r1}
   d8842:	3308      	adds	r3, #8
   d8844:	42a3      	cmp	r3, r4
   d8846:	4694      	mov	ip, r2
   d8848:	d1f7      	bne.n	d883a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d884a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d884c:	a901      	add	r1, sp, #4
   d884e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d8850:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d8854:	f7ff fb8c 	bl	d7f70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d8858:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d885c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d8860:	ac07      	add	r4, sp, #28
   d8862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8864:	f8dc 3000 	ldr.w	r3, [ip]
   d8868:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d886a:	a806      	add	r0, sp, #24
   d886c:	f7ff fb92 	bl	d7f94 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d8870:	b180      	cbz	r0, d8894 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d8872:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d8874:	ad07      	add	r5, sp, #28
   d8876:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d887a:	4b12      	ldr	r3, [pc, #72]	; (d88c4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d887c:	930c      	str	r3, [sp, #48]	; 0x30
   d887e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8880:	ac0d      	add	r4, sp, #52	; 0x34
   d8882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8884:	682b      	ldr	r3, [r5, #0]
   d8886:	7023      	strb	r3, [r4, #0]
   d8888:	463a      	mov	r2, r7
   d888a:	4643      	mov	r3, r8
   d888c:	a90c      	add	r1, sp, #48	; 0x30
   d888e:	4630      	mov	r0, r6
   d8890:	47c8      	blx	r9
   d8892:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d8894:	9800      	ldr	r0, [sp, #0]
   d8896:	f7fc ff35 	bl	d5704 <netdb_freeaddrinfo>
}
   d889a:	4628      	mov	r0, r5
   d889c:	b013      	add	sp, #76	; 0x4c
   d889e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d88a2:	68e3      	ldr	r3, [r4, #12]
   d88a4:	2b00      	cmp	r3, #0
   d88a6:	d1c3      	bne.n	d8830 <_ZN9TCPClient7connectEPKctm+0x64>
   d88a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d88ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d88b0:	f7fd f854 	bl	d595c <inet_htonl>
   d88b4:	4581      	cmp	r9, r0
   d88b6:	d1bb      	bne.n	d8830 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d88b8:	f104 0114 	add.w	r1, r4, #20
   d88bc:	e7aa      	b.n	d8814 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d88be:	4625      	mov	r5, r4
   d88c0:	e7e8      	b.n	d8894 <_ZN9TCPClient7connectEPKctm+0xc8>
   d88c2:	bf00      	nop
   d88c4:	000da1d0 	.word	0x000da1d0

000d88c8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d88c8:	2200      	movs	r2, #0
   d88ca:	6840      	ldr	r0, [r0, #4]
   d88cc:	4611      	mov	r1, r2
   d88ce:	f7fd ba13 	b.w	d5cf8 <network_ready>

000d88d2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d88d2:	2200      	movs	r2, #0
   d88d4:	6840      	ldr	r0, [r0, #4]
   d88d6:	4611      	mov	r1, r2
   d88d8:	f7fd ba2e 	b.w	d5d38 <network_listening>

000d88dc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d88dc:	2200      	movs	r2, #0
   d88de:	6840      	ldr	r0, [r0, #4]
   d88e0:	4611      	mov	r1, r2
   d88e2:	f7fd ba49 	b.w	d5d78 <network_get_listen_timeout>

000d88e6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d88e6:	6840      	ldr	r0, [r0, #4]
   d88e8:	2200      	movs	r2, #0
   d88ea:	f7fd ba3d 	b.w	d5d68 <network_set_listen_timeout>

000d88ee <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d88ee:	6840      	ldr	r0, [r0, #4]
   d88f0:	2200      	movs	r2, #0
   d88f2:	f081 0101 	eor.w	r1, r1, #1
   d88f6:	f7fd ba17 	b.w	d5d28 <network_listen>

000d88fa <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d88fa:	2300      	movs	r3, #0
   d88fc:	6840      	ldr	r0, [r0, #4]
   d88fe:	461a      	mov	r2, r3
   d8900:	4619      	mov	r1, r3
   d8902:	f7fd ba09 	b.w	d5d18 <network_off>

000d8906 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8906:	2200      	movs	r2, #0
   d8908:	6840      	ldr	r0, [r0, #4]
   d890a:	4611      	mov	r1, r2
   d890c:	f7fd b9e4 	b.w	d5cd8 <network_connecting>

000d8910 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8910:	6840      	ldr	r0, [r0, #4]
   d8912:	2200      	movs	r2, #0
   d8914:	2102      	movs	r1, #2
   d8916:	f7fd b9e7 	b.w	d5ce8 <network_disconnect>

000d891a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d891a:	2300      	movs	r3, #0
   d891c:	6840      	ldr	r0, [r0, #4]
   d891e:	461a      	mov	r2, r3
   d8920:	f7fd b9d2 	b.w	d5cc8 <network_connect>

000d8924 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8924:	4b02      	ldr	r3, [pc, #8]	; (d8930 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8926:	2204      	movs	r2, #4
   d8928:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d892a:	4a02      	ldr	r2, [pc, #8]	; (d8934 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d892c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d892e:	4770      	bx	lr
   d8930:	2003e7bc 	.word	0x2003e7bc
   d8934:	000da2e4 	.word	0x000da2e4

000d8938 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8938:	2300      	movs	r3, #0
   d893a:	6840      	ldr	r0, [r0, #4]
   d893c:	461a      	mov	r2, r3
   d893e:	f7fd b9c3 	b.w	d5cc8 <network_connect>

000d8942 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8942:	6840      	ldr	r0, [r0, #4]
   d8944:	2200      	movs	r2, #0
   d8946:	2102      	movs	r1, #2
   d8948:	f7fd b9ce 	b.w	d5ce8 <network_disconnect>

000d894c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d894c:	2200      	movs	r2, #0
   d894e:	6840      	ldr	r0, [r0, #4]
   d8950:	4611      	mov	r1, r2
   d8952:	f7fd b9c1 	b.w	d5cd8 <network_connecting>

000d8956 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8956:	2200      	movs	r2, #0
   d8958:	6840      	ldr	r0, [r0, #4]
   d895a:	4611      	mov	r1, r2
   d895c:	f7fd b9cc 	b.w	d5cf8 <network_ready>

000d8960 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8960:	2300      	movs	r3, #0
   d8962:	6840      	ldr	r0, [r0, #4]
   d8964:	461a      	mov	r2, r3
   d8966:	4619      	mov	r1, r3
   d8968:	f7fd b9ce 	b.w	d5d08 <network_on>

000d896c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d896c:	2300      	movs	r3, #0
   d896e:	6840      	ldr	r0, [r0, #4]
   d8970:	461a      	mov	r2, r3
   d8972:	4619      	mov	r1, r3
   d8974:	f7fd b9d0 	b.w	d5d18 <network_off>

000d8978 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d8978:	6840      	ldr	r0, [r0, #4]
   d897a:	2100      	movs	r1, #0
   d897c:	f7fd ba04 	b.w	d5d88 <network_is_on>

000d8980 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d8980:	6840      	ldr	r0, [r0, #4]
   d8982:	2100      	movs	r1, #0
   d8984:	f7fd ba08 	b.w	d5d98 <network_is_off>

000d8988 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8988:	6840      	ldr	r0, [r0, #4]
   d898a:	2200      	movs	r2, #0
   d898c:	f081 0101 	eor.w	r1, r1, #1
   d8990:	f7fd b9ca 	b.w	d5d28 <network_listen>

000d8994 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8994:	6840      	ldr	r0, [r0, #4]
   d8996:	2200      	movs	r2, #0
   d8998:	f7fd b9e6 	b.w	d5d68 <network_set_listen_timeout>

000d899c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d899c:	2200      	movs	r2, #0
   d899e:	6840      	ldr	r0, [r0, #4]
   d89a0:	4611      	mov	r1, r2
   d89a2:	f7fd b9e9 	b.w	d5d78 <network_get_listen_timeout>

000d89a6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d89a6:	2200      	movs	r2, #0
   d89a8:	6840      	ldr	r0, [r0, #4]
   d89aa:	4611      	mov	r1, r2
   d89ac:	f7fd b9c4 	b.w	d5d38 <network_listening>

000d89b0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d89b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d89b4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d89b6:	b095      	sub	sp, #84	; 0x54
   d89b8:	4616      	mov	r6, r2
   d89ba:	460d      	mov	r5, r1
   d89bc:	4607      	mov	r7, r0
    IPAddress addr;
   d89be:	f7ff fac9 	bl	d7f54 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d89c2:	4621      	mov	r1, r4
   d89c4:	2218      	movs	r2, #24
   d89c6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d89c8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d89ca:	f000 ffbd 	bl	d9948 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d89ce:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d89d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d89d4:	4621      	mov	r1, r4
   d89d6:	466b      	mov	r3, sp
   d89d8:	aa0c      	add	r2, sp, #48	; 0x30
   d89da:	4630      	mov	r0, r6
   d89dc:	f7fc fe9a 	bl	d5714 <netdb_getaddrinfo>
    if (!r) {
   d89e0:	4604      	mov	r4, r0
   d89e2:	2800      	cmp	r0, #0
   d89e4:	d14c      	bne.n	d8a80 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d89e6:	4602      	mov	r2, r0
   d89e8:	2101      	movs	r1, #1
   d89ea:	6868      	ldr	r0, [r5, #4]
   d89ec:	f7fd f984 	bl	d5cf8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d89f0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d89f2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d89f4:	4622      	mov	r2, r4
   d89f6:	6868      	ldr	r0, [r5, #4]
   d89f8:	f7fd f97e 	bl	d5cf8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d89fc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d89fe:	4681      	mov	r9, r0
        bool ok = false;
   d8a00:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8a02:	2e00      	cmp	r6, #0
   d8a04:	d03c      	beq.n	d8a80 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d8a06:	2900      	cmp	r1, #0
   d8a08:	d13a      	bne.n	d8a80 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8a0a:	6873      	ldr	r3, [r6, #4]
   d8a0c:	2b02      	cmp	r3, #2
   d8a0e:	d003      	beq.n	d8a18 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d8a10:	2b0a      	cmp	r3, #10
   d8a12:	d011      	beq.n	d8a38 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8a14:	69f6      	ldr	r6, [r6, #28]
   d8a16:	e7f4      	b.n	d8a02 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8a18:	f1b8 0f00 	cmp.w	r8, #0
   d8a1c:	d00a      	beq.n	d8a34 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8a1e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d8a20:	a806      	add	r0, sp, #24
   d8a22:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d8a24:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d8a26:	f7ff fad9 	bl	d7fdc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d8a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8a2c:	1d3c      	adds	r4, r7, #4
   d8a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8a30:	682b      	ldr	r3, [r5, #0]
   d8a32:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d8a34:	4641      	mov	r1, r8
   d8a36:	e7ed      	b.n	d8a14 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8a38:	f1b9 0f00 	cmp.w	r9, #0
   d8a3c:	d101      	bne.n	d8a42 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d8a3e:	4649      	mov	r1, r9
   d8a40:	e7e8      	b.n	d8a14 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8a42:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8a44:	2210      	movs	r2, #16
   d8a46:	a801      	add	r0, sp, #4
   d8a48:	f000 ff7e 	bl	d9948 <memset>
                    a.v = 6;
   d8a4c:	2306      	movs	r3, #6
   d8a4e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8a52:	ad01      	add	r5, sp, #4
   d8a54:	f104 0308 	add.w	r3, r4, #8
   d8a58:	3418      	adds	r4, #24
   d8a5a:	6818      	ldr	r0, [r3, #0]
   d8a5c:	6859      	ldr	r1, [r3, #4]
   d8a5e:	462a      	mov	r2, r5
   d8a60:	c203      	stmia	r2!, {r0, r1}
   d8a62:	3308      	adds	r3, #8
   d8a64:	42a3      	cmp	r3, r4
   d8a66:	4615      	mov	r5, r2
   d8a68:	d1f7      	bne.n	d8a5a <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d8a6a:	a901      	add	r1, sp, #4
   d8a6c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d8a6e:	ad07      	add	r5, sp, #28
   d8a70:	f7ff fa7e 	bl	d7f70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8a76:	1d3c      	adds	r4, r7, #4
   d8a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8a7a:	682b      	ldr	r3, [r5, #0]
   d8a7c:	7023      	strb	r3, [r4, #0]
   d8a7e:	e7de      	b.n	d8a3e <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8a80:	9800      	ldr	r0, [sp, #0]
   d8a82:	f7fc fe3f 	bl	d5704 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8a86:	4638      	mov	r0, r7
   d8a88:	b015      	add	sp, #84	; 0x54
   d8a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d8a90 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8a90:	4b02      	ldr	r3, [pc, #8]	; (d8a9c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8a92:	4a03      	ldr	r2, [pc, #12]	; (d8aa0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8a94:	601a      	str	r2, [r3, #0]
   d8a96:	2200      	movs	r2, #0
   d8a98:	605a      	str	r2, [r3, #4]

} // spark
   d8a9a:	4770      	bx	lr
   d8a9c:	2003e7c4 	.word	0x2003e7c4
   d8aa0:	000da320 	.word	0x000da320

000d8aa4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d8aa4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d8aa6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d8aa8:	d902      	bls.n	d8ab0 <pinAvailable+0xc>
    return false;
   d8aaa:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d8aac:	b002      	add	sp, #8
   d8aae:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d8ab0:	f1a0 030b 	sub.w	r3, r0, #11
   d8ab4:	2b02      	cmp	r3, #2
   d8ab6:	d81a      	bhi.n	d8aee <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8ab8:	4c17      	ldr	r4, [pc, #92]	; (d8b18 <pinAvailable+0x74>)
   d8aba:	7821      	ldrb	r1, [r4, #0]
   d8abc:	f3bf 8f5b 	dmb	ish
   d8ac0:	f011 0101 	ands.w	r1, r1, #1
   d8ac4:	d10b      	bne.n	d8ade <pinAvailable+0x3a>
   d8ac6:	4620      	mov	r0, r4
   d8ac8:	9101      	str	r1, [sp, #4]
   d8aca:	f7fb faea 	bl	d40a2 <__cxa_guard_acquire>
   d8ace:	9901      	ldr	r1, [sp, #4]
   d8ad0:	b128      	cbz	r0, d8ade <pinAvailable+0x3a>
   d8ad2:	4812      	ldr	r0, [pc, #72]	; (d8b1c <pinAvailable+0x78>)
   d8ad4:	f7fd fa0c 	bl	d5ef0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8ad8:	4620      	mov	r0, r4
   d8ada:	f7fb fae7 	bl	d40ac <__cxa_guard_release>
   d8ade:	4b0f      	ldr	r3, [pc, #60]	; (d8b1c <pinAvailable+0x78>)
   d8ae0:	7818      	ldrb	r0, [r3, #0]
   d8ae2:	f7fd f84b 	bl	d5b7c <hal_spi_is_enabled>
   d8ae6:	2800      	cmp	r0, #0
   d8ae8:	d1df      	bne.n	d8aaa <pinAvailable+0x6>
  return true; // 'pin' is available
   d8aea:	2001      	movs	r0, #1
   d8aec:	e7de      	b.n	d8aac <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d8aee:	2801      	cmp	r0, #1
   d8af0:	d809      	bhi.n	d8b06 <pinAvailable+0x62>
   d8af2:	f000 f881 	bl	d8bf8 <_Z19__fetch_global_Wirev>
   d8af6:	2100      	movs	r1, #0
   d8af8:	7c00      	ldrb	r0, [r0, #16]
   d8afa:	f7fc ffc7 	bl	d5a8c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d8afe:	f080 0001 	eor.w	r0, r0, #1
   d8b02:	b2c0      	uxtb	r0, r0
   d8b04:	e7d2      	b.n	d8aac <pinAvailable+0x8>
   d8b06:	3809      	subs	r0, #9
   d8b08:	2801      	cmp	r0, #1
   d8b0a:	d8ee      	bhi.n	d8aea <pinAvailable+0x46>
   d8b0c:	f7ff fb50 	bl	d81b0 <_Z22__fetch_global_Serial1v>
   d8b10:	7c00      	ldrb	r0, [r0, #16]
   d8b12:	f7fc ff63 	bl	d59dc <hal_usart_is_enabled>
   d8b16:	e7f2      	b.n	d8afe <pinAvailable+0x5a>
   d8b18:	2003e630 	.word	0x2003e630
   d8b1c:	2003e634 	.word	0x2003e634

000d8b20 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8b20:	2823      	cmp	r0, #35	; 0x23
{
   d8b22:	b538      	push	{r3, r4, r5, lr}
   d8b24:	4604      	mov	r4, r0
   d8b26:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8b28:	d80a      	bhi.n	d8b40 <pinMode+0x20>
   d8b2a:	29ff      	cmp	r1, #255	; 0xff
   d8b2c:	d008      	beq.n	d8b40 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d8b2e:	f7ff ffb9 	bl	d8aa4 <pinAvailable>
   d8b32:	b128      	cbz	r0, d8b40 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d8b34:	4629      	mov	r1, r5
   d8b36:	4620      	mov	r0, r4
}
   d8b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d8b3c:	f7fc bdf2 	b.w	d5724 <HAL_Pin_Mode>
}
   d8b40:	bd38      	pop	{r3, r4, r5, pc}

000d8b42 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8b42:	b538      	push	{r3, r4, r5, lr}
   d8b44:	4604      	mov	r4, r0
   d8b46:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8b48:	f7fc fdf4 	bl	d5734 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8b4c:	28ff      	cmp	r0, #255	; 0xff
   d8b4e:	d010      	beq.n	d8b72 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d8b50:	2806      	cmp	r0, #6
   d8b52:	d804      	bhi.n	d8b5e <digitalWrite+0x1c>
   d8b54:	234d      	movs	r3, #77	; 0x4d
   d8b56:	fa23 f000 	lsr.w	r0, r3, r0
   d8b5a:	07c3      	lsls	r3, r0, #31
   d8b5c:	d409      	bmi.n	d8b72 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8b5e:	4620      	mov	r0, r4
   d8b60:	f7ff ffa0 	bl	d8aa4 <pinAvailable>
   d8b64:	b128      	cbz	r0, d8b72 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8b66:	4629      	mov	r1, r5
   d8b68:	4620      	mov	r0, r4
}
   d8b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d8b6e:	f7fc bde9 	b.w	d5744 <HAL_GPIO_Write>
}
   d8b72:	bd38      	pop	{r3, r4, r5, pc}

000d8b74 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8b74:	b510      	push	{r4, lr}
   d8b76:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8b78:	f7fc fddc 	bl	d5734 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d8b7c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d8b7e:	b2db      	uxtb	r3, r3
   d8b80:	2b01      	cmp	r3, #1
   d8b82:	d908      	bls.n	d8b96 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8b84:	4620      	mov	r0, r4
   d8b86:	f7ff ff8d 	bl	d8aa4 <pinAvailable>
   d8b8a:	b120      	cbz	r0, d8b96 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8b8c:	4620      	mov	r0, r4
}
   d8b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d8b92:	f7fc bddf 	b.w	d5754 <HAL_GPIO_Read>
}
   d8b96:	2000      	movs	r0, #0
   d8b98:	bd10      	pop	{r4, pc}
	...

000d8b9c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d8b9c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d8b9e:	4c08      	ldr	r4, [pc, #32]	; (d8bc0 <_Z21__fetch_global_EEPROMv+0x24>)
   d8ba0:	7823      	ldrb	r3, [r4, #0]
   d8ba2:	f3bf 8f5b 	dmb	ish
   d8ba6:	07db      	lsls	r3, r3, #31
   d8ba8:	d408      	bmi.n	d8bbc <_Z21__fetch_global_EEPROMv+0x20>
   d8baa:	4620      	mov	r0, r4
   d8bac:	f7fb fa79 	bl	d40a2 <__cxa_guard_acquire>
   d8bb0:	b120      	cbz	r0, d8bbc <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d8bb2:	f7fc fdf7 	bl	d57a4 <HAL_EEPROM_Init>
   d8bb6:	4620      	mov	r0, r4
   d8bb8:	f7fb fa78 	bl	d40ac <__cxa_guard_release>
	return eeprom;
}
   d8bbc:	4801      	ldr	r0, [pc, #4]	; (d8bc4 <_Z21__fetch_global_EEPROMv+0x28>)
   d8bbe:	bd10      	pop	{r4, pc}
   d8bc0:	2003e7d0 	.word	0x2003e7d0
   d8bc4:	2003e7d4 	.word	0x2003e7d4

000d8bc8 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d8bc8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d8bca:	2300      	movs	r3, #0
   d8bcc:	2520      	movs	r5, #32
   d8bce:	8043      	strh	r3, [r0, #2]
   d8bd0:	2314      	movs	r3, #20
{
   d8bd2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8bd4:	8003      	strh	r3, [r0, #0]
   d8bd6:	6085      	str	r5, [r0, #8]
   d8bd8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8bda:	4906      	ldr	r1, [pc, #24]	; (d8bf4 <_Z17acquireWireBufferv+0x2c>)
   d8bdc:	4628      	mov	r0, r5
   d8bde:	f000 f83c 	bl	d8c5a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8be2:	4904      	ldr	r1, [pc, #16]	; (d8bf4 <_Z17acquireWireBufferv+0x2c>)
	};
   d8be4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8be6:	4628      	mov	r0, r5
   d8be8:	f000 f837 	bl	d8c5a <_ZnajRKSt9nothrow_t>
	};
   d8bec:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d8bee:	4620      	mov	r0, r4
   d8bf0:	bd38      	pop	{r3, r4, r5, pc}
   d8bf2:	bf00      	nop
   d8bf4:	000da354 	.word	0x000da354

000d8bf8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8bf8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8bfa:	4d0f      	ldr	r5, [pc, #60]	; (d8c38 <_Z19__fetch_global_Wirev+0x40>)
   d8bfc:	7829      	ldrb	r1, [r5, #0]
   d8bfe:	f3bf 8f5b 	dmb	ish
   d8c02:	f011 0401 	ands.w	r4, r1, #1
{
   d8c06:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8c08:	d113      	bne.n	d8c32 <_Z19__fetch_global_Wirev+0x3a>
   d8c0a:	4628      	mov	r0, r5
   d8c0c:	f7fb fa49 	bl	d40a2 <__cxa_guard_acquire>
   d8c10:	b178      	cbz	r0, d8c32 <_Z19__fetch_global_Wirev+0x3a>
   d8c12:	a801      	add	r0, sp, #4
   d8c14:	f7ff ffd8 	bl	d8bc8 <_Z17acquireWireBufferv>
   d8c18:	aa01      	add	r2, sp, #4
   d8c1a:	4621      	mov	r1, r4
   d8c1c:	4807      	ldr	r0, [pc, #28]	; (d8c3c <_Z19__fetch_global_Wirev+0x44>)
   d8c1e:	f7ff fb1d 	bl	d825c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d8c22:	4628      	mov	r0, r5
   d8c24:	f7fb fa42 	bl	d40ac <__cxa_guard_release>
   d8c28:	4a05      	ldr	r2, [pc, #20]	; (d8c40 <_Z19__fetch_global_Wirev+0x48>)
   d8c2a:	4906      	ldr	r1, [pc, #24]	; (d8c44 <_Z19__fetch_global_Wirev+0x4c>)
   d8c2c:	4803      	ldr	r0, [pc, #12]	; (d8c3c <_Z19__fetch_global_Wirev+0x44>)
   d8c2e:	f000 f80b 	bl	d8c48 <__aeabi_atexit>
	return wire;
}
   d8c32:	4802      	ldr	r0, [pc, #8]	; (d8c3c <_Z19__fetch_global_Wirev+0x44>)
   d8c34:	b007      	add	sp, #28
   d8c36:	bd30      	pop	{r4, r5, pc}
   d8c38:	2003e7d8 	.word	0x2003e7d8
   d8c3c:	2003e7dc 	.word	0x2003e7dc
   d8c40:	2003e0ac 	.word	0x2003e0ac
   d8c44:	000d8205 	.word	0x000d8205

000d8c48 <__aeabi_atexit>:
   d8c48:	460b      	mov	r3, r1
   d8c4a:	4601      	mov	r1, r0
   d8c4c:	4618      	mov	r0, r3
   d8c4e:	f000 be23 	b.w	d9898 <__cxa_atexit>

000d8c52 <_ZdlPvj>:
   d8c52:	f7fb ba24 	b.w	d409e <_ZdlPv>

000d8c56 <_ZnwjRKSt9nothrow_t>:
   d8c56:	f7fb ba1e 	b.w	d4096 <_Znwj>

000d8c5a <_ZnajRKSt9nothrow_t>:
   d8c5a:	f7fb ba1e 	b.w	d409a <_Znaj>

000d8c5e <_ZSt25__throw_bad_function_callv>:
   d8c5e:	b508      	push	{r3, lr}
   d8c60:	f7fd f8ea 	bl	d5e38 <abort>

000d8c64 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d8c64:	4901      	ldr	r1, [pc, #4]	; (d8c6c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d8c66:	f000 b8f9 	b.w	d8e5c <_ZNKSt9type_infoeqERKS_>
   d8c6a:	bf00      	nop
   d8c6c:	000da370 	.word	0x000da370

000d8c70 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d8c70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d8c72:	2400      	movs	r4, #0
   d8c74:	2310      	movs	r3, #16
   d8c76:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d8c7a:	6803      	ldr	r3, [r0, #0]
   d8c7c:	9400      	str	r4, [sp, #0]
   d8c7e:	699e      	ldr	r6, [r3, #24]
   d8c80:	f88d 4004 	strb.w	r4, [sp, #4]
   d8c84:	4615      	mov	r5, r2
   d8c86:	466b      	mov	r3, sp
   d8c88:	6812      	ldr	r2, [r2, #0]
   d8c8a:	47b0      	blx	r6
   d8c8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d8c90:	f003 0306 	and.w	r3, r3, #6
   d8c94:	2b06      	cmp	r3, #6
   d8c96:	bf03      	ittte	eq
   d8c98:	9b00      	ldreq	r3, [sp, #0]
   d8c9a:	602b      	streq	r3, [r5, #0]
   d8c9c:	2001      	moveq	r0, #1
   d8c9e:	4620      	movne	r0, r4
   d8ca0:	b004      	add	sp, #16
   d8ca2:	bd70      	pop	{r4, r5, r6, pc}

000d8ca4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d8ca4:	9800      	ldr	r0, [sp, #0]
   d8ca6:	4290      	cmp	r0, r2
   d8ca8:	bf14      	ite	ne
   d8caa:	2001      	movne	r0, #1
   d8cac:	2006      	moveq	r0, #6
   d8cae:	4770      	bx	lr

000d8cb0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d8cb0:	b510      	push	{r4, lr}
   d8cb2:	4b03      	ldr	r3, [pc, #12]	; (d8cc0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d8cb4:	6003      	str	r3, [r0, #0]
   d8cb6:	4604      	mov	r4, r0
   d8cb8:	f000 f8cd 	bl	d8e56 <_ZNSt9type_infoD1Ev>
   d8cbc:	4620      	mov	r0, r4
   d8cbe:	bd10      	pop	{r4, pc}
   d8cc0:	000da3b0 	.word	0x000da3b0

000d8cc4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d8cc4:	b510      	push	{r4, lr}
   d8cc6:	4604      	mov	r4, r0
   d8cc8:	f7ff fff2 	bl	d8cb0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d8ccc:	4620      	mov	r0, r4
   d8cce:	2108      	movs	r1, #8
   d8cd0:	f7ff ffbf 	bl	d8c52 <_ZdlPvj>
   d8cd4:	4620      	mov	r0, r4
   d8cd6:	bd10      	pop	{r4, pc}

000d8cd8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d8cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8cdc:	461f      	mov	r7, r3
   d8cde:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d8ce2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d8ce6:	4598      	cmp	r8, r3
   d8ce8:	4606      	mov	r6, r0
   d8cea:	4615      	mov	r5, r2
   d8cec:	d107      	bne.n	d8cfe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d8cee:	9907      	ldr	r1, [sp, #28]
   d8cf0:	f000 f8b4 	bl	d8e5c <_ZNKSt9type_infoeqERKS_>
   d8cf4:	b118      	cbz	r0, d8cfe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d8cf6:	7165      	strb	r5, [r4, #5]
   d8cf8:	2000      	movs	r0, #0
   d8cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8cfe:	4639      	mov	r1, r7
   d8d00:	4630      	mov	r0, r6
   d8d02:	f000 f8ab 	bl	d8e5c <_ZNKSt9type_infoeqERKS_>
   d8d06:	2800      	cmp	r0, #0
   d8d08:	d0f6      	beq.n	d8cf8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d8d0a:	2301      	movs	r3, #1
   d8d0c:	f8c4 8000 	str.w	r8, [r4]
   d8d10:	7125      	strb	r5, [r4, #4]
   d8d12:	71a3      	strb	r3, [r4, #6]
   d8d14:	e7f0      	b.n	d8cf8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d8d16 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d8d16:	b538      	push	{r3, r4, r5, lr}
   d8d18:	4615      	mov	r5, r2
   d8d1a:	461c      	mov	r4, r3
   d8d1c:	f000 f89e 	bl	d8e5c <_ZNKSt9type_infoeqERKS_>
   d8d20:	b120      	cbz	r0, d8d2c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d8d22:	2308      	movs	r3, #8
   d8d24:	60e3      	str	r3, [r4, #12]
   d8d26:	2306      	movs	r3, #6
   d8d28:	6025      	str	r5, [r4, #0]
   d8d2a:	7123      	strb	r3, [r4, #4]
   d8d2c:	bd38      	pop	{r3, r4, r5, pc}

000d8d2e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d8d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8d30:	4605      	mov	r5, r0
   d8d32:	460c      	mov	r4, r1
   d8d34:	9201      	str	r2, [sp, #4]
   d8d36:	461e      	mov	r6, r3
   d8d38:	f000 f890 	bl	d8e5c <_ZNKSt9type_infoeqERKS_>
   d8d3c:	b950      	cbnz	r0, d8d54 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d8d3e:	2e03      	cmp	r6, #3
   d8d40:	d808      	bhi.n	d8d54 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d8d42:	6823      	ldr	r3, [r4, #0]
   d8d44:	9a01      	ldr	r2, [sp, #4]
   d8d46:	695b      	ldr	r3, [r3, #20]
   d8d48:	4629      	mov	r1, r5
   d8d4a:	4620      	mov	r0, r4
   d8d4c:	b002      	add	sp, #8
   d8d4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8d52:	4718      	bx	r3
   d8d54:	b002      	add	sp, #8
   d8d56:	bd70      	pop	{r4, r5, r6, pc}

000d8d58 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d8d58:	b510      	push	{r4, lr}
   d8d5a:	4b03      	ldr	r3, [pc, #12]	; (d8d68 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d8d5c:	6003      	str	r3, [r0, #0]
   d8d5e:	4604      	mov	r4, r0
   d8d60:	f7ff ffa6 	bl	d8cb0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d8d64:	4620      	mov	r0, r4
   d8d66:	bd10      	pop	{r4, pc}
   d8d68:	000da410 	.word	0x000da410

000d8d6c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d8d6c:	b510      	push	{r4, lr}
   d8d6e:	4604      	mov	r4, r0
   d8d70:	f7ff fff2 	bl	d8d58 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d8d74:	4620      	mov	r0, r4
   d8d76:	210c      	movs	r1, #12
   d8d78:	f7ff ff6b 	bl	d8c52 <_ZdlPvj>
   d8d7c:	4620      	mov	r0, r4
   d8d7e:	bd10      	pop	{r4, pc}

000d8d80 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d8d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8d82:	9f08      	ldr	r7, [sp, #32]
   d8d84:	4297      	cmp	r7, r2
   d8d86:	4605      	mov	r5, r0
   d8d88:	460e      	mov	r6, r1
   d8d8a:	4614      	mov	r4, r2
   d8d8c:	d00a      	beq.n	d8da4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d8d8e:	68a8      	ldr	r0, [r5, #8]
   d8d90:	6802      	ldr	r2, [r0, #0]
   d8d92:	9708      	str	r7, [sp, #32]
   d8d94:	6a15      	ldr	r5, [r2, #32]
   d8d96:	4631      	mov	r1, r6
   d8d98:	4622      	mov	r2, r4
   d8d9a:	46ac      	mov	ip, r5
   d8d9c:	b003      	add	sp, #12
   d8d9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d8da2:	4760      	bx	ip
   d8da4:	4619      	mov	r1, r3
   d8da6:	9301      	str	r3, [sp, #4]
   d8da8:	f000 f858 	bl	d8e5c <_ZNKSt9type_infoeqERKS_>
   d8dac:	9b01      	ldr	r3, [sp, #4]
   d8dae:	2800      	cmp	r0, #0
   d8db0:	d0ed      	beq.n	d8d8e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d8db2:	2006      	movs	r0, #6
   d8db4:	b003      	add	sp, #12
   d8db6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8db8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d8db8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8dbc:	460d      	mov	r5, r1
   d8dbe:	4619      	mov	r1, r3
   d8dc0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d8dc4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d8dc8:	4681      	mov	r9, r0
   d8dca:	4617      	mov	r7, r2
   d8dcc:	4698      	mov	r8, r3
   d8dce:	f000 f845 	bl	d8e5c <_ZNKSt9type_infoeqERKS_>
   d8dd2:	b190      	cbz	r0, d8dfa <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d8dd4:	2d00      	cmp	r5, #0
   d8dd6:	6034      	str	r4, [r6, #0]
   d8dd8:	7137      	strb	r7, [r6, #4]
   d8dda:	db09      	blt.n	d8df0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d8ddc:	1961      	adds	r1, r4, r5
   d8dde:	458a      	cmp	sl, r1
   d8de0:	bf0c      	ite	eq
   d8de2:	2106      	moveq	r1, #6
   d8de4:	2101      	movne	r1, #1
   d8de6:	71b1      	strb	r1, [r6, #6]
   d8de8:	2000      	movs	r0, #0
   d8dea:	b001      	add	sp, #4
   d8dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8df0:	3502      	adds	r5, #2
   d8df2:	d1f9      	bne.n	d8de8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8df4:	2301      	movs	r3, #1
   d8df6:	71b3      	strb	r3, [r6, #6]
   d8df8:	e7f6      	b.n	d8de8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8dfa:	4554      	cmp	r4, sl
   d8dfc:	d106      	bne.n	d8e0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8dfe:	4659      	mov	r1, fp
   d8e00:	4648      	mov	r0, r9
   d8e02:	f000 f82b 	bl	d8e5c <_ZNKSt9type_infoeqERKS_>
   d8e06:	b108      	cbz	r0, d8e0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8e08:	7177      	strb	r7, [r6, #5]
   d8e0a:	e7ed      	b.n	d8de8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8e0c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d8e10:	6803      	ldr	r3, [r0, #0]
   d8e12:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d8e16:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d8e1a:	69dc      	ldr	r4, [r3, #28]
   d8e1c:	463a      	mov	r2, r7
   d8e1e:	4643      	mov	r3, r8
   d8e20:	4629      	mov	r1, r5
   d8e22:	46a4      	mov	ip, r4
   d8e24:	b001      	add	sp, #4
   d8e26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8e2a:	4760      	bx	ip

000d8e2c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d8e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8e30:	4607      	mov	r7, r0
   d8e32:	460c      	mov	r4, r1
   d8e34:	4615      	mov	r5, r2
   d8e36:	461e      	mov	r6, r3
   d8e38:	f7ff ff6d 	bl	d8d16 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d8e3c:	b948      	cbnz	r0, d8e52 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d8e3e:	68b8      	ldr	r0, [r7, #8]
   d8e40:	6803      	ldr	r3, [r0, #0]
   d8e42:	699f      	ldr	r7, [r3, #24]
   d8e44:	462a      	mov	r2, r5
   d8e46:	4633      	mov	r3, r6
   d8e48:	4621      	mov	r1, r4
   d8e4a:	46bc      	mov	ip, r7
   d8e4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8e50:	4760      	bx	ip
   d8e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8e56 <_ZNSt9type_infoD1Ev>:
   d8e56:	4770      	bx	lr

000d8e58 <_ZNKSt9type_info14__is_pointer_pEv>:
   d8e58:	2000      	movs	r0, #0
   d8e5a:	4770      	bx	lr

000d8e5c <_ZNKSt9type_infoeqERKS_>:
   d8e5c:	4281      	cmp	r1, r0
   d8e5e:	b508      	push	{r3, lr}
   d8e60:	d00e      	beq.n	d8e80 <_ZNKSt9type_infoeqERKS_+0x24>
   d8e62:	6840      	ldr	r0, [r0, #4]
   d8e64:	7803      	ldrb	r3, [r0, #0]
   d8e66:	2b2a      	cmp	r3, #42	; 0x2a
   d8e68:	d00c      	beq.n	d8e84 <_ZNKSt9type_infoeqERKS_+0x28>
   d8e6a:	6849      	ldr	r1, [r1, #4]
   d8e6c:	780b      	ldrb	r3, [r1, #0]
   d8e6e:	2b2a      	cmp	r3, #42	; 0x2a
   d8e70:	bf08      	it	eq
   d8e72:	3101      	addeq	r1, #1
   d8e74:	f000 fd94 	bl	d99a0 <strcmp>
   d8e78:	fab0 f080 	clz	r0, r0
   d8e7c:	0940      	lsrs	r0, r0, #5
   d8e7e:	bd08      	pop	{r3, pc}
   d8e80:	2001      	movs	r0, #1
   d8e82:	e7fc      	b.n	d8e7e <_ZNKSt9type_infoeqERKS_+0x22>
   d8e84:	2000      	movs	r0, #0
   d8e86:	e7fa      	b.n	d8e7e <_ZNKSt9type_infoeqERKS_+0x22>

000d8e88 <__aeabi_drsub>:
   d8e88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8e8c:	e002      	b.n	d8e94 <__adddf3>
   d8e8e:	bf00      	nop

000d8e90 <__aeabi_dsub>:
   d8e90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8e94 <__adddf3>:
   d8e94:	b530      	push	{r4, r5, lr}
   d8e96:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8e9a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8e9e:	ea94 0f05 	teq	r4, r5
   d8ea2:	bf08      	it	eq
   d8ea4:	ea90 0f02 	teqeq	r0, r2
   d8ea8:	bf1f      	itttt	ne
   d8eaa:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8eae:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8eb2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8eb6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8eba:	f000 80e2 	beq.w	d9082 <__adddf3+0x1ee>
   d8ebe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8ec2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8ec6:	bfb8      	it	lt
   d8ec8:	426d      	neglt	r5, r5
   d8eca:	dd0c      	ble.n	d8ee6 <__adddf3+0x52>
   d8ecc:	442c      	add	r4, r5
   d8ece:	ea80 0202 	eor.w	r2, r0, r2
   d8ed2:	ea81 0303 	eor.w	r3, r1, r3
   d8ed6:	ea82 0000 	eor.w	r0, r2, r0
   d8eda:	ea83 0101 	eor.w	r1, r3, r1
   d8ede:	ea80 0202 	eor.w	r2, r0, r2
   d8ee2:	ea81 0303 	eor.w	r3, r1, r3
   d8ee6:	2d36      	cmp	r5, #54	; 0x36
   d8ee8:	bf88      	it	hi
   d8eea:	bd30      	pophi	{r4, r5, pc}
   d8eec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8ef0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8ef4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8ef8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8efc:	d002      	beq.n	d8f04 <__adddf3+0x70>
   d8efe:	4240      	negs	r0, r0
   d8f00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8f04:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8f08:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8f0c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8f10:	d002      	beq.n	d8f18 <__adddf3+0x84>
   d8f12:	4252      	negs	r2, r2
   d8f14:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8f18:	ea94 0f05 	teq	r4, r5
   d8f1c:	f000 80a7 	beq.w	d906e <__adddf3+0x1da>
   d8f20:	f1a4 0401 	sub.w	r4, r4, #1
   d8f24:	f1d5 0e20 	rsbs	lr, r5, #32
   d8f28:	db0d      	blt.n	d8f46 <__adddf3+0xb2>
   d8f2a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8f2e:	fa22 f205 	lsr.w	r2, r2, r5
   d8f32:	1880      	adds	r0, r0, r2
   d8f34:	f141 0100 	adc.w	r1, r1, #0
   d8f38:	fa03 f20e 	lsl.w	r2, r3, lr
   d8f3c:	1880      	adds	r0, r0, r2
   d8f3e:	fa43 f305 	asr.w	r3, r3, r5
   d8f42:	4159      	adcs	r1, r3
   d8f44:	e00e      	b.n	d8f64 <__adddf3+0xd0>
   d8f46:	f1a5 0520 	sub.w	r5, r5, #32
   d8f4a:	f10e 0e20 	add.w	lr, lr, #32
   d8f4e:	2a01      	cmp	r2, #1
   d8f50:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8f54:	bf28      	it	cs
   d8f56:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8f5a:	fa43 f305 	asr.w	r3, r3, r5
   d8f5e:	18c0      	adds	r0, r0, r3
   d8f60:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8f64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8f68:	d507      	bpl.n	d8f7a <__adddf3+0xe6>
   d8f6a:	f04f 0e00 	mov.w	lr, #0
   d8f6e:	f1dc 0c00 	rsbs	ip, ip, #0
   d8f72:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8f76:	eb6e 0101 	sbc.w	r1, lr, r1
   d8f7a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8f7e:	d31b      	bcc.n	d8fb8 <__adddf3+0x124>
   d8f80:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8f84:	d30c      	bcc.n	d8fa0 <__adddf3+0x10c>
   d8f86:	0849      	lsrs	r1, r1, #1
   d8f88:	ea5f 0030 	movs.w	r0, r0, rrx
   d8f8c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8f90:	f104 0401 	add.w	r4, r4, #1
   d8f94:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8f98:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8f9c:	f080 809a 	bcs.w	d90d4 <__adddf3+0x240>
   d8fa0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8fa4:	bf08      	it	eq
   d8fa6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8faa:	f150 0000 	adcs.w	r0, r0, #0
   d8fae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8fb2:	ea41 0105 	orr.w	r1, r1, r5
   d8fb6:	bd30      	pop	{r4, r5, pc}
   d8fb8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8fbc:	4140      	adcs	r0, r0
   d8fbe:	eb41 0101 	adc.w	r1, r1, r1
   d8fc2:	3c01      	subs	r4, #1
   d8fc4:	bf28      	it	cs
   d8fc6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8fca:	d2e9      	bcs.n	d8fa0 <__adddf3+0x10c>
   d8fcc:	f091 0f00 	teq	r1, #0
   d8fd0:	bf04      	itt	eq
   d8fd2:	4601      	moveq	r1, r0
   d8fd4:	2000      	moveq	r0, #0
   d8fd6:	fab1 f381 	clz	r3, r1
   d8fda:	bf08      	it	eq
   d8fdc:	3320      	addeq	r3, #32
   d8fde:	f1a3 030b 	sub.w	r3, r3, #11
   d8fe2:	f1b3 0220 	subs.w	r2, r3, #32
   d8fe6:	da0c      	bge.n	d9002 <__adddf3+0x16e>
   d8fe8:	320c      	adds	r2, #12
   d8fea:	dd08      	ble.n	d8ffe <__adddf3+0x16a>
   d8fec:	f102 0c14 	add.w	ip, r2, #20
   d8ff0:	f1c2 020c 	rsb	r2, r2, #12
   d8ff4:	fa01 f00c 	lsl.w	r0, r1, ip
   d8ff8:	fa21 f102 	lsr.w	r1, r1, r2
   d8ffc:	e00c      	b.n	d9018 <__adddf3+0x184>
   d8ffe:	f102 0214 	add.w	r2, r2, #20
   d9002:	bfd8      	it	le
   d9004:	f1c2 0c20 	rsble	ip, r2, #32
   d9008:	fa01 f102 	lsl.w	r1, r1, r2
   d900c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9010:	bfdc      	itt	le
   d9012:	ea41 010c 	orrle.w	r1, r1, ip
   d9016:	4090      	lslle	r0, r2
   d9018:	1ae4      	subs	r4, r4, r3
   d901a:	bfa2      	ittt	ge
   d901c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9020:	4329      	orrge	r1, r5
   d9022:	bd30      	popge	{r4, r5, pc}
   d9024:	ea6f 0404 	mvn.w	r4, r4
   d9028:	3c1f      	subs	r4, #31
   d902a:	da1c      	bge.n	d9066 <__adddf3+0x1d2>
   d902c:	340c      	adds	r4, #12
   d902e:	dc0e      	bgt.n	d904e <__adddf3+0x1ba>
   d9030:	f104 0414 	add.w	r4, r4, #20
   d9034:	f1c4 0220 	rsb	r2, r4, #32
   d9038:	fa20 f004 	lsr.w	r0, r0, r4
   d903c:	fa01 f302 	lsl.w	r3, r1, r2
   d9040:	ea40 0003 	orr.w	r0, r0, r3
   d9044:	fa21 f304 	lsr.w	r3, r1, r4
   d9048:	ea45 0103 	orr.w	r1, r5, r3
   d904c:	bd30      	pop	{r4, r5, pc}
   d904e:	f1c4 040c 	rsb	r4, r4, #12
   d9052:	f1c4 0220 	rsb	r2, r4, #32
   d9056:	fa20 f002 	lsr.w	r0, r0, r2
   d905a:	fa01 f304 	lsl.w	r3, r1, r4
   d905e:	ea40 0003 	orr.w	r0, r0, r3
   d9062:	4629      	mov	r1, r5
   d9064:	bd30      	pop	{r4, r5, pc}
   d9066:	fa21 f004 	lsr.w	r0, r1, r4
   d906a:	4629      	mov	r1, r5
   d906c:	bd30      	pop	{r4, r5, pc}
   d906e:	f094 0f00 	teq	r4, #0
   d9072:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9076:	bf06      	itte	eq
   d9078:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d907c:	3401      	addeq	r4, #1
   d907e:	3d01      	subne	r5, #1
   d9080:	e74e      	b.n	d8f20 <__adddf3+0x8c>
   d9082:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9086:	bf18      	it	ne
   d9088:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d908c:	d029      	beq.n	d90e2 <__adddf3+0x24e>
   d908e:	ea94 0f05 	teq	r4, r5
   d9092:	bf08      	it	eq
   d9094:	ea90 0f02 	teqeq	r0, r2
   d9098:	d005      	beq.n	d90a6 <__adddf3+0x212>
   d909a:	ea54 0c00 	orrs.w	ip, r4, r0
   d909e:	bf04      	itt	eq
   d90a0:	4619      	moveq	r1, r3
   d90a2:	4610      	moveq	r0, r2
   d90a4:	bd30      	pop	{r4, r5, pc}
   d90a6:	ea91 0f03 	teq	r1, r3
   d90aa:	bf1e      	ittt	ne
   d90ac:	2100      	movne	r1, #0
   d90ae:	2000      	movne	r0, #0
   d90b0:	bd30      	popne	{r4, r5, pc}
   d90b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d90b6:	d105      	bne.n	d90c4 <__adddf3+0x230>
   d90b8:	0040      	lsls	r0, r0, #1
   d90ba:	4149      	adcs	r1, r1
   d90bc:	bf28      	it	cs
   d90be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d90c2:	bd30      	pop	{r4, r5, pc}
   d90c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d90c8:	bf3c      	itt	cc
   d90ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d90ce:	bd30      	popcc	{r4, r5, pc}
   d90d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d90d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d90d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d90dc:	f04f 0000 	mov.w	r0, #0
   d90e0:	bd30      	pop	{r4, r5, pc}
   d90e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d90e6:	bf1a      	itte	ne
   d90e8:	4619      	movne	r1, r3
   d90ea:	4610      	movne	r0, r2
   d90ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d90f0:	bf1c      	itt	ne
   d90f2:	460b      	movne	r3, r1
   d90f4:	4602      	movne	r2, r0
   d90f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d90fa:	bf06      	itte	eq
   d90fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9100:	ea91 0f03 	teqeq	r1, r3
   d9104:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9108:	bd30      	pop	{r4, r5, pc}
   d910a:	bf00      	nop

000d910c <__aeabi_ui2d>:
   d910c:	f090 0f00 	teq	r0, #0
   d9110:	bf04      	itt	eq
   d9112:	2100      	moveq	r1, #0
   d9114:	4770      	bxeq	lr
   d9116:	b530      	push	{r4, r5, lr}
   d9118:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d911c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9120:	f04f 0500 	mov.w	r5, #0
   d9124:	f04f 0100 	mov.w	r1, #0
   d9128:	e750      	b.n	d8fcc <__adddf3+0x138>
   d912a:	bf00      	nop

000d912c <__aeabi_i2d>:
   d912c:	f090 0f00 	teq	r0, #0
   d9130:	bf04      	itt	eq
   d9132:	2100      	moveq	r1, #0
   d9134:	4770      	bxeq	lr
   d9136:	b530      	push	{r4, r5, lr}
   d9138:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d913c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9140:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9144:	bf48      	it	mi
   d9146:	4240      	negmi	r0, r0
   d9148:	f04f 0100 	mov.w	r1, #0
   d914c:	e73e      	b.n	d8fcc <__adddf3+0x138>
   d914e:	bf00      	nop

000d9150 <__aeabi_f2d>:
   d9150:	0042      	lsls	r2, r0, #1
   d9152:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9156:	ea4f 0131 	mov.w	r1, r1, rrx
   d915a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d915e:	bf1f      	itttt	ne
   d9160:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9164:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9168:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d916c:	4770      	bxne	lr
   d916e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d9172:	bf08      	it	eq
   d9174:	4770      	bxeq	lr
   d9176:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d917a:	bf04      	itt	eq
   d917c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d9180:	4770      	bxeq	lr
   d9182:	b530      	push	{r4, r5, lr}
   d9184:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9188:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d918c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9190:	e71c      	b.n	d8fcc <__adddf3+0x138>
   d9192:	bf00      	nop

000d9194 <__aeabi_ul2d>:
   d9194:	ea50 0201 	orrs.w	r2, r0, r1
   d9198:	bf08      	it	eq
   d919a:	4770      	bxeq	lr
   d919c:	b530      	push	{r4, r5, lr}
   d919e:	f04f 0500 	mov.w	r5, #0
   d91a2:	e00a      	b.n	d91ba <__aeabi_l2d+0x16>

000d91a4 <__aeabi_l2d>:
   d91a4:	ea50 0201 	orrs.w	r2, r0, r1
   d91a8:	bf08      	it	eq
   d91aa:	4770      	bxeq	lr
   d91ac:	b530      	push	{r4, r5, lr}
   d91ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d91b2:	d502      	bpl.n	d91ba <__aeabi_l2d+0x16>
   d91b4:	4240      	negs	r0, r0
   d91b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d91ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d91be:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d91c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d91c6:	f43f aed8 	beq.w	d8f7a <__adddf3+0xe6>
   d91ca:	f04f 0203 	mov.w	r2, #3
   d91ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d91d2:	bf18      	it	ne
   d91d4:	3203      	addne	r2, #3
   d91d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d91da:	bf18      	it	ne
   d91dc:	3203      	addne	r2, #3
   d91de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d91e2:	f1c2 0320 	rsb	r3, r2, #32
   d91e6:	fa00 fc03 	lsl.w	ip, r0, r3
   d91ea:	fa20 f002 	lsr.w	r0, r0, r2
   d91ee:	fa01 fe03 	lsl.w	lr, r1, r3
   d91f2:	ea40 000e 	orr.w	r0, r0, lr
   d91f6:	fa21 f102 	lsr.w	r1, r1, r2
   d91fa:	4414      	add	r4, r2
   d91fc:	e6bd      	b.n	d8f7a <__adddf3+0xe6>
   d91fe:	bf00      	nop

000d9200 <__aeabi_dmul>:
   d9200:	b570      	push	{r4, r5, r6, lr}
   d9202:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9206:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d920a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d920e:	bf1d      	ittte	ne
   d9210:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9214:	ea94 0f0c 	teqne	r4, ip
   d9218:	ea95 0f0c 	teqne	r5, ip
   d921c:	f000 f8de 	bleq	d93dc <__aeabi_dmul+0x1dc>
   d9220:	442c      	add	r4, r5
   d9222:	ea81 0603 	eor.w	r6, r1, r3
   d9226:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d922a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d922e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9232:	bf18      	it	ne
   d9234:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9238:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d923c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9240:	d038      	beq.n	d92b4 <__aeabi_dmul+0xb4>
   d9242:	fba0 ce02 	umull	ip, lr, r0, r2
   d9246:	f04f 0500 	mov.w	r5, #0
   d924a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d924e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9252:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9256:	f04f 0600 	mov.w	r6, #0
   d925a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d925e:	f09c 0f00 	teq	ip, #0
   d9262:	bf18      	it	ne
   d9264:	f04e 0e01 	orrne.w	lr, lr, #1
   d9268:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d926c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9270:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9274:	d204      	bcs.n	d9280 <__aeabi_dmul+0x80>
   d9276:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d927a:	416d      	adcs	r5, r5
   d927c:	eb46 0606 	adc.w	r6, r6, r6
   d9280:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9284:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9288:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d928c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9290:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9294:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9298:	bf88      	it	hi
   d929a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d929e:	d81e      	bhi.n	d92de <__aeabi_dmul+0xde>
   d92a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d92a4:	bf08      	it	eq
   d92a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d92aa:	f150 0000 	adcs.w	r0, r0, #0
   d92ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d92b2:	bd70      	pop	{r4, r5, r6, pc}
   d92b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d92b8:	ea46 0101 	orr.w	r1, r6, r1
   d92bc:	ea40 0002 	orr.w	r0, r0, r2
   d92c0:	ea81 0103 	eor.w	r1, r1, r3
   d92c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d92c8:	bfc2      	ittt	gt
   d92ca:	ebd4 050c 	rsbsgt	r5, r4, ip
   d92ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d92d2:	bd70      	popgt	{r4, r5, r6, pc}
   d92d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d92d8:	f04f 0e00 	mov.w	lr, #0
   d92dc:	3c01      	subs	r4, #1
   d92de:	f300 80ab 	bgt.w	d9438 <__aeabi_dmul+0x238>
   d92e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d92e6:	bfde      	ittt	le
   d92e8:	2000      	movle	r0, #0
   d92ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d92ee:	bd70      	pople	{r4, r5, r6, pc}
   d92f0:	f1c4 0400 	rsb	r4, r4, #0
   d92f4:	3c20      	subs	r4, #32
   d92f6:	da35      	bge.n	d9364 <__aeabi_dmul+0x164>
   d92f8:	340c      	adds	r4, #12
   d92fa:	dc1b      	bgt.n	d9334 <__aeabi_dmul+0x134>
   d92fc:	f104 0414 	add.w	r4, r4, #20
   d9300:	f1c4 0520 	rsb	r5, r4, #32
   d9304:	fa00 f305 	lsl.w	r3, r0, r5
   d9308:	fa20 f004 	lsr.w	r0, r0, r4
   d930c:	fa01 f205 	lsl.w	r2, r1, r5
   d9310:	ea40 0002 	orr.w	r0, r0, r2
   d9314:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9318:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d931c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9320:	fa21 f604 	lsr.w	r6, r1, r4
   d9324:	eb42 0106 	adc.w	r1, r2, r6
   d9328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d932c:	bf08      	it	eq
   d932e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9332:	bd70      	pop	{r4, r5, r6, pc}
   d9334:	f1c4 040c 	rsb	r4, r4, #12
   d9338:	f1c4 0520 	rsb	r5, r4, #32
   d933c:	fa00 f304 	lsl.w	r3, r0, r4
   d9340:	fa20 f005 	lsr.w	r0, r0, r5
   d9344:	fa01 f204 	lsl.w	r2, r1, r4
   d9348:	ea40 0002 	orr.w	r0, r0, r2
   d934c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9350:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9354:	f141 0100 	adc.w	r1, r1, #0
   d9358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d935c:	bf08      	it	eq
   d935e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9362:	bd70      	pop	{r4, r5, r6, pc}
   d9364:	f1c4 0520 	rsb	r5, r4, #32
   d9368:	fa00 f205 	lsl.w	r2, r0, r5
   d936c:	ea4e 0e02 	orr.w	lr, lr, r2
   d9370:	fa20 f304 	lsr.w	r3, r0, r4
   d9374:	fa01 f205 	lsl.w	r2, r1, r5
   d9378:	ea43 0302 	orr.w	r3, r3, r2
   d937c:	fa21 f004 	lsr.w	r0, r1, r4
   d9380:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9384:	fa21 f204 	lsr.w	r2, r1, r4
   d9388:	ea20 0002 	bic.w	r0, r0, r2
   d938c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9394:	bf08      	it	eq
   d9396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d939a:	bd70      	pop	{r4, r5, r6, pc}
   d939c:	f094 0f00 	teq	r4, #0
   d93a0:	d10f      	bne.n	d93c2 <__aeabi_dmul+0x1c2>
   d93a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d93a6:	0040      	lsls	r0, r0, #1
   d93a8:	eb41 0101 	adc.w	r1, r1, r1
   d93ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d93b0:	bf08      	it	eq
   d93b2:	3c01      	subeq	r4, #1
   d93b4:	d0f7      	beq.n	d93a6 <__aeabi_dmul+0x1a6>
   d93b6:	ea41 0106 	orr.w	r1, r1, r6
   d93ba:	f095 0f00 	teq	r5, #0
   d93be:	bf18      	it	ne
   d93c0:	4770      	bxne	lr
   d93c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d93c6:	0052      	lsls	r2, r2, #1
   d93c8:	eb43 0303 	adc.w	r3, r3, r3
   d93cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d93d0:	bf08      	it	eq
   d93d2:	3d01      	subeq	r5, #1
   d93d4:	d0f7      	beq.n	d93c6 <__aeabi_dmul+0x1c6>
   d93d6:	ea43 0306 	orr.w	r3, r3, r6
   d93da:	4770      	bx	lr
   d93dc:	ea94 0f0c 	teq	r4, ip
   d93e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d93e4:	bf18      	it	ne
   d93e6:	ea95 0f0c 	teqne	r5, ip
   d93ea:	d00c      	beq.n	d9406 <__aeabi_dmul+0x206>
   d93ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d93f0:	bf18      	it	ne
   d93f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d93f6:	d1d1      	bne.n	d939c <__aeabi_dmul+0x19c>
   d93f8:	ea81 0103 	eor.w	r1, r1, r3
   d93fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9400:	f04f 0000 	mov.w	r0, #0
   d9404:	bd70      	pop	{r4, r5, r6, pc}
   d9406:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d940a:	bf06      	itte	eq
   d940c:	4610      	moveq	r0, r2
   d940e:	4619      	moveq	r1, r3
   d9410:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9414:	d019      	beq.n	d944a <__aeabi_dmul+0x24a>
   d9416:	ea94 0f0c 	teq	r4, ip
   d941a:	d102      	bne.n	d9422 <__aeabi_dmul+0x222>
   d941c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9420:	d113      	bne.n	d944a <__aeabi_dmul+0x24a>
   d9422:	ea95 0f0c 	teq	r5, ip
   d9426:	d105      	bne.n	d9434 <__aeabi_dmul+0x234>
   d9428:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d942c:	bf1c      	itt	ne
   d942e:	4610      	movne	r0, r2
   d9430:	4619      	movne	r1, r3
   d9432:	d10a      	bne.n	d944a <__aeabi_dmul+0x24a>
   d9434:	ea81 0103 	eor.w	r1, r1, r3
   d9438:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d943c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9444:	f04f 0000 	mov.w	r0, #0
   d9448:	bd70      	pop	{r4, r5, r6, pc}
   d944a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d944e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9452:	bd70      	pop	{r4, r5, r6, pc}

000d9454 <__aeabi_ddiv>:
   d9454:	b570      	push	{r4, r5, r6, lr}
   d9456:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d945a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d945e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9462:	bf1d      	ittte	ne
   d9464:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9468:	ea94 0f0c 	teqne	r4, ip
   d946c:	ea95 0f0c 	teqne	r5, ip
   d9470:	f000 f8a7 	bleq	d95c2 <__aeabi_ddiv+0x16e>
   d9474:	eba4 0405 	sub.w	r4, r4, r5
   d9478:	ea81 0e03 	eor.w	lr, r1, r3
   d947c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9480:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9484:	f000 8088 	beq.w	d9598 <__aeabi_ddiv+0x144>
   d9488:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d948c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9490:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9494:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9498:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d949c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d94a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d94a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d94a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d94ac:	429d      	cmp	r5, r3
   d94ae:	bf08      	it	eq
   d94b0:	4296      	cmpeq	r6, r2
   d94b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d94b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d94ba:	d202      	bcs.n	d94c2 <__aeabi_ddiv+0x6e>
   d94bc:	085b      	lsrs	r3, r3, #1
   d94be:	ea4f 0232 	mov.w	r2, r2, rrx
   d94c2:	1ab6      	subs	r6, r6, r2
   d94c4:	eb65 0503 	sbc.w	r5, r5, r3
   d94c8:	085b      	lsrs	r3, r3, #1
   d94ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d94ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d94d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d94d6:	ebb6 0e02 	subs.w	lr, r6, r2
   d94da:	eb75 0e03 	sbcs.w	lr, r5, r3
   d94de:	bf22      	ittt	cs
   d94e0:	1ab6      	subcs	r6, r6, r2
   d94e2:	4675      	movcs	r5, lr
   d94e4:	ea40 000c 	orrcs.w	r0, r0, ip
   d94e8:	085b      	lsrs	r3, r3, #1
   d94ea:	ea4f 0232 	mov.w	r2, r2, rrx
   d94ee:	ebb6 0e02 	subs.w	lr, r6, r2
   d94f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d94f6:	bf22      	ittt	cs
   d94f8:	1ab6      	subcs	r6, r6, r2
   d94fa:	4675      	movcs	r5, lr
   d94fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9500:	085b      	lsrs	r3, r3, #1
   d9502:	ea4f 0232 	mov.w	r2, r2, rrx
   d9506:	ebb6 0e02 	subs.w	lr, r6, r2
   d950a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d950e:	bf22      	ittt	cs
   d9510:	1ab6      	subcs	r6, r6, r2
   d9512:	4675      	movcs	r5, lr
   d9514:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9518:	085b      	lsrs	r3, r3, #1
   d951a:	ea4f 0232 	mov.w	r2, r2, rrx
   d951e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9522:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9526:	bf22      	ittt	cs
   d9528:	1ab6      	subcs	r6, r6, r2
   d952a:	4675      	movcs	r5, lr
   d952c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9530:	ea55 0e06 	orrs.w	lr, r5, r6
   d9534:	d018      	beq.n	d9568 <__aeabi_ddiv+0x114>
   d9536:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d953a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d953e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9542:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9546:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d954a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d954e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9552:	d1c0      	bne.n	d94d6 <__aeabi_ddiv+0x82>
   d9554:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9558:	d10b      	bne.n	d9572 <__aeabi_ddiv+0x11e>
   d955a:	ea41 0100 	orr.w	r1, r1, r0
   d955e:	f04f 0000 	mov.w	r0, #0
   d9562:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9566:	e7b6      	b.n	d94d6 <__aeabi_ddiv+0x82>
   d9568:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d956c:	bf04      	itt	eq
   d956e:	4301      	orreq	r1, r0
   d9570:	2000      	moveq	r0, #0
   d9572:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9576:	bf88      	it	hi
   d9578:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d957c:	f63f aeaf 	bhi.w	d92de <__aeabi_dmul+0xde>
   d9580:	ebb5 0c03 	subs.w	ip, r5, r3
   d9584:	bf04      	itt	eq
   d9586:	ebb6 0c02 	subseq.w	ip, r6, r2
   d958a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d958e:	f150 0000 	adcs.w	r0, r0, #0
   d9592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9596:	bd70      	pop	{r4, r5, r6, pc}
   d9598:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d959c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d95a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d95a4:	bfc2      	ittt	gt
   d95a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d95aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d95ae:	bd70      	popgt	{r4, r5, r6, pc}
   d95b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d95b4:	f04f 0e00 	mov.w	lr, #0
   d95b8:	3c01      	subs	r4, #1
   d95ba:	e690      	b.n	d92de <__aeabi_dmul+0xde>
   d95bc:	ea45 0e06 	orr.w	lr, r5, r6
   d95c0:	e68d      	b.n	d92de <__aeabi_dmul+0xde>
   d95c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d95c6:	ea94 0f0c 	teq	r4, ip
   d95ca:	bf08      	it	eq
   d95cc:	ea95 0f0c 	teqeq	r5, ip
   d95d0:	f43f af3b 	beq.w	d944a <__aeabi_dmul+0x24a>
   d95d4:	ea94 0f0c 	teq	r4, ip
   d95d8:	d10a      	bne.n	d95f0 <__aeabi_ddiv+0x19c>
   d95da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d95de:	f47f af34 	bne.w	d944a <__aeabi_dmul+0x24a>
   d95e2:	ea95 0f0c 	teq	r5, ip
   d95e6:	f47f af25 	bne.w	d9434 <__aeabi_dmul+0x234>
   d95ea:	4610      	mov	r0, r2
   d95ec:	4619      	mov	r1, r3
   d95ee:	e72c      	b.n	d944a <__aeabi_dmul+0x24a>
   d95f0:	ea95 0f0c 	teq	r5, ip
   d95f4:	d106      	bne.n	d9604 <__aeabi_ddiv+0x1b0>
   d95f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d95fa:	f43f aefd 	beq.w	d93f8 <__aeabi_dmul+0x1f8>
   d95fe:	4610      	mov	r0, r2
   d9600:	4619      	mov	r1, r3
   d9602:	e722      	b.n	d944a <__aeabi_dmul+0x24a>
   d9604:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9608:	bf18      	it	ne
   d960a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d960e:	f47f aec5 	bne.w	d939c <__aeabi_dmul+0x19c>
   d9612:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9616:	f47f af0d 	bne.w	d9434 <__aeabi_dmul+0x234>
   d961a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d961e:	f47f aeeb 	bne.w	d93f8 <__aeabi_dmul+0x1f8>
   d9622:	e712      	b.n	d944a <__aeabi_dmul+0x24a>

000d9624 <__gedf2>:
   d9624:	f04f 3cff 	mov.w	ip, #4294967295
   d9628:	e006      	b.n	d9638 <__cmpdf2+0x4>
   d962a:	bf00      	nop

000d962c <__ledf2>:
   d962c:	f04f 0c01 	mov.w	ip, #1
   d9630:	e002      	b.n	d9638 <__cmpdf2+0x4>
   d9632:	bf00      	nop

000d9634 <__cmpdf2>:
   d9634:	f04f 0c01 	mov.w	ip, #1
   d9638:	f84d cd04 	str.w	ip, [sp, #-4]!
   d963c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9640:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9644:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9648:	bf18      	it	ne
   d964a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d964e:	d01b      	beq.n	d9688 <__cmpdf2+0x54>
   d9650:	b001      	add	sp, #4
   d9652:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9656:	bf0c      	ite	eq
   d9658:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d965c:	ea91 0f03 	teqne	r1, r3
   d9660:	bf02      	ittt	eq
   d9662:	ea90 0f02 	teqeq	r0, r2
   d9666:	2000      	moveq	r0, #0
   d9668:	4770      	bxeq	lr
   d966a:	f110 0f00 	cmn.w	r0, #0
   d966e:	ea91 0f03 	teq	r1, r3
   d9672:	bf58      	it	pl
   d9674:	4299      	cmppl	r1, r3
   d9676:	bf08      	it	eq
   d9678:	4290      	cmpeq	r0, r2
   d967a:	bf2c      	ite	cs
   d967c:	17d8      	asrcs	r0, r3, #31
   d967e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9682:	f040 0001 	orr.w	r0, r0, #1
   d9686:	4770      	bx	lr
   d9688:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d968c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9690:	d102      	bne.n	d9698 <__cmpdf2+0x64>
   d9692:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9696:	d107      	bne.n	d96a8 <__cmpdf2+0x74>
   d9698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d969c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d96a0:	d1d6      	bne.n	d9650 <__cmpdf2+0x1c>
   d96a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d96a6:	d0d3      	beq.n	d9650 <__cmpdf2+0x1c>
   d96a8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d96ac:	4770      	bx	lr
   d96ae:	bf00      	nop

000d96b0 <__aeabi_cdrcmple>:
   d96b0:	4684      	mov	ip, r0
   d96b2:	4610      	mov	r0, r2
   d96b4:	4662      	mov	r2, ip
   d96b6:	468c      	mov	ip, r1
   d96b8:	4619      	mov	r1, r3
   d96ba:	4663      	mov	r3, ip
   d96bc:	e000      	b.n	d96c0 <__aeabi_cdcmpeq>
   d96be:	bf00      	nop

000d96c0 <__aeabi_cdcmpeq>:
   d96c0:	b501      	push	{r0, lr}
   d96c2:	f7ff ffb7 	bl	d9634 <__cmpdf2>
   d96c6:	2800      	cmp	r0, #0
   d96c8:	bf48      	it	mi
   d96ca:	f110 0f00 	cmnmi.w	r0, #0
   d96ce:	bd01      	pop	{r0, pc}

000d96d0 <__aeabi_dcmpeq>:
   d96d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d96d4:	f7ff fff4 	bl	d96c0 <__aeabi_cdcmpeq>
   d96d8:	bf0c      	ite	eq
   d96da:	2001      	moveq	r0, #1
   d96dc:	2000      	movne	r0, #0
   d96de:	f85d fb08 	ldr.w	pc, [sp], #8
   d96e2:	bf00      	nop

000d96e4 <__aeabi_dcmplt>:
   d96e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d96e8:	f7ff ffea 	bl	d96c0 <__aeabi_cdcmpeq>
   d96ec:	bf34      	ite	cc
   d96ee:	2001      	movcc	r0, #1
   d96f0:	2000      	movcs	r0, #0
   d96f2:	f85d fb08 	ldr.w	pc, [sp], #8
   d96f6:	bf00      	nop

000d96f8 <__aeabi_dcmple>:
   d96f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d96fc:	f7ff ffe0 	bl	d96c0 <__aeabi_cdcmpeq>
   d9700:	bf94      	ite	ls
   d9702:	2001      	movls	r0, #1
   d9704:	2000      	movhi	r0, #0
   d9706:	f85d fb08 	ldr.w	pc, [sp], #8
   d970a:	bf00      	nop

000d970c <__aeabi_dcmpge>:
   d970c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9710:	f7ff ffce 	bl	d96b0 <__aeabi_cdrcmple>
   d9714:	bf94      	ite	ls
   d9716:	2001      	movls	r0, #1
   d9718:	2000      	movhi	r0, #0
   d971a:	f85d fb08 	ldr.w	pc, [sp], #8
   d971e:	bf00      	nop

000d9720 <__aeabi_dcmpgt>:
   d9720:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9724:	f7ff ffc4 	bl	d96b0 <__aeabi_cdrcmple>
   d9728:	bf34      	ite	cc
   d972a:	2001      	movcc	r0, #1
   d972c:	2000      	movcs	r0, #0
   d972e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9732:	bf00      	nop

000d9734 <__aeabi_dcmpun>:
   d9734:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d973c:	d102      	bne.n	d9744 <__aeabi_dcmpun+0x10>
   d973e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9742:	d10a      	bne.n	d975a <__aeabi_dcmpun+0x26>
   d9744:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9748:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d974c:	d102      	bne.n	d9754 <__aeabi_dcmpun+0x20>
   d974e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9752:	d102      	bne.n	d975a <__aeabi_dcmpun+0x26>
   d9754:	f04f 0000 	mov.w	r0, #0
   d9758:	4770      	bx	lr
   d975a:	f04f 0001 	mov.w	r0, #1
   d975e:	4770      	bx	lr

000d9760 <__aeabi_d2iz>:
   d9760:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9764:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9768:	d215      	bcs.n	d9796 <__aeabi_d2iz+0x36>
   d976a:	d511      	bpl.n	d9790 <__aeabi_d2iz+0x30>
   d976c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9770:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9774:	d912      	bls.n	d979c <__aeabi_d2iz+0x3c>
   d9776:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d977a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d977e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9782:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9786:	fa23 f002 	lsr.w	r0, r3, r2
   d978a:	bf18      	it	ne
   d978c:	4240      	negne	r0, r0
   d978e:	4770      	bx	lr
   d9790:	f04f 0000 	mov.w	r0, #0
   d9794:	4770      	bx	lr
   d9796:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d979a:	d105      	bne.n	d97a8 <__aeabi_d2iz+0x48>
   d979c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d97a0:	bf08      	it	eq
   d97a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d97a6:	4770      	bx	lr
   d97a8:	f04f 0000 	mov.w	r0, #0
   d97ac:	4770      	bx	lr
   d97ae:	bf00      	nop

000d97b0 <__aeabi_d2uiz>:
   d97b0:	004a      	lsls	r2, r1, #1
   d97b2:	d211      	bcs.n	d97d8 <__aeabi_d2uiz+0x28>
   d97b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d97b8:	d211      	bcs.n	d97de <__aeabi_d2uiz+0x2e>
   d97ba:	d50d      	bpl.n	d97d8 <__aeabi_d2uiz+0x28>
   d97bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d97c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d97c4:	d40e      	bmi.n	d97e4 <__aeabi_d2uiz+0x34>
   d97c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d97ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d97ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d97d2:	fa23 f002 	lsr.w	r0, r3, r2
   d97d6:	4770      	bx	lr
   d97d8:	f04f 0000 	mov.w	r0, #0
   d97dc:	4770      	bx	lr
   d97de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d97e2:	d102      	bne.n	d97ea <__aeabi_d2uiz+0x3a>
   d97e4:	f04f 30ff 	mov.w	r0, #4294967295
   d97e8:	4770      	bx	lr
   d97ea:	f04f 0000 	mov.w	r0, #0
   d97ee:	4770      	bx	lr

000d97f0 <__aeabi_d2f>:
   d97f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d97f4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d97f8:	bf24      	itt	cs
   d97fa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d97fe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9802:	d90d      	bls.n	d9820 <__aeabi_d2f+0x30>
   d9804:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9808:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d980c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9810:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9814:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9818:	bf08      	it	eq
   d981a:	f020 0001 	biceq.w	r0, r0, #1
   d981e:	4770      	bx	lr
   d9820:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9824:	d121      	bne.n	d986a <__aeabi_d2f+0x7a>
   d9826:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d982a:	bfbc      	itt	lt
   d982c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9830:	4770      	bxlt	lr
   d9832:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9836:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d983a:	f1c2 0218 	rsb	r2, r2, #24
   d983e:	f1c2 0c20 	rsb	ip, r2, #32
   d9842:	fa10 f30c 	lsls.w	r3, r0, ip
   d9846:	fa20 f002 	lsr.w	r0, r0, r2
   d984a:	bf18      	it	ne
   d984c:	f040 0001 	orrne.w	r0, r0, #1
   d9850:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9854:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9858:	fa03 fc0c 	lsl.w	ip, r3, ip
   d985c:	ea40 000c 	orr.w	r0, r0, ip
   d9860:	fa23 f302 	lsr.w	r3, r3, r2
   d9864:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9868:	e7cc      	b.n	d9804 <__aeabi_d2f+0x14>
   d986a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d986e:	d107      	bne.n	d9880 <__aeabi_d2f+0x90>
   d9870:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9874:	bf1e      	ittt	ne
   d9876:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d987a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d987e:	4770      	bxne	lr
   d9880:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9884:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9888:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d988c:	4770      	bx	lr
   d988e:	bf00      	nop

000d9890 <atoi>:
   d9890:	220a      	movs	r2, #10
   d9892:	2100      	movs	r1, #0
   d9894:	f000 b950 	b.w	d9b38 <strtol>

000d9898 <__cxa_atexit>:
   d9898:	b510      	push	{r4, lr}
   d989a:	4c05      	ldr	r4, [pc, #20]	; (d98b0 <__cxa_atexit+0x18>)
   d989c:	4613      	mov	r3, r2
   d989e:	b12c      	cbz	r4, d98ac <__cxa_atexit+0x14>
   d98a0:	460a      	mov	r2, r1
   d98a2:	4601      	mov	r1, r0
   d98a4:	2002      	movs	r0, #2
   d98a6:	f3af 8000 	nop.w
   d98aa:	bd10      	pop	{r4, pc}
   d98ac:	4620      	mov	r0, r4
   d98ae:	e7fc      	b.n	d98aa <__cxa_atexit+0x12>
   d98b0:	00000000 	.word	0x00000000

000d98b4 <ldiv>:
   d98b4:	2900      	cmp	r1, #0
   d98b6:	b510      	push	{r4, lr}
   d98b8:	fb91 f4f2 	sdiv	r4, r1, r2
   d98bc:	fb02 1314 	mls	r3, r2, r4, r1
   d98c0:	db06      	blt.n	d98d0 <ldiv+0x1c>
   d98c2:	2b00      	cmp	r3, #0
   d98c4:	da01      	bge.n	d98ca <ldiv+0x16>
   d98c6:	3401      	adds	r4, #1
   d98c8:	1a9b      	subs	r3, r3, r2
   d98ca:	e9c0 4300 	strd	r4, r3, [r0]
   d98ce:	bd10      	pop	{r4, pc}
   d98d0:	2b00      	cmp	r3, #0
   d98d2:	bfc4      	itt	gt
   d98d4:	f104 34ff 	addgt.w	r4, r4, #4294967295
   d98d8:	189b      	addgt	r3, r3, r2
   d98da:	e7f6      	b.n	d98ca <ldiv+0x16>

000d98dc <memcmp>:
   d98dc:	b530      	push	{r4, r5, lr}
   d98de:	3901      	subs	r1, #1
   d98e0:	2400      	movs	r4, #0
   d98e2:	42a2      	cmp	r2, r4
   d98e4:	d101      	bne.n	d98ea <memcmp+0xe>
   d98e6:	2000      	movs	r0, #0
   d98e8:	e005      	b.n	d98f6 <memcmp+0x1a>
   d98ea:	5d03      	ldrb	r3, [r0, r4]
   d98ec:	3401      	adds	r4, #1
   d98ee:	5d0d      	ldrb	r5, [r1, r4]
   d98f0:	42ab      	cmp	r3, r5
   d98f2:	d0f6      	beq.n	d98e2 <memcmp+0x6>
   d98f4:	1b58      	subs	r0, r3, r5
   d98f6:	bd30      	pop	{r4, r5, pc}

000d98f8 <memcpy>:
   d98f8:	440a      	add	r2, r1
   d98fa:	4291      	cmp	r1, r2
   d98fc:	f100 33ff 	add.w	r3, r0, #4294967295
   d9900:	d100      	bne.n	d9904 <memcpy+0xc>
   d9902:	4770      	bx	lr
   d9904:	b510      	push	{r4, lr}
   d9906:	f811 4b01 	ldrb.w	r4, [r1], #1
   d990a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d990e:	4291      	cmp	r1, r2
   d9910:	d1f9      	bne.n	d9906 <memcpy+0xe>
   d9912:	bd10      	pop	{r4, pc}

000d9914 <memmove>:
   d9914:	4288      	cmp	r0, r1
   d9916:	b510      	push	{r4, lr}
   d9918:	eb01 0402 	add.w	r4, r1, r2
   d991c:	d902      	bls.n	d9924 <memmove+0x10>
   d991e:	4284      	cmp	r4, r0
   d9920:	4623      	mov	r3, r4
   d9922:	d807      	bhi.n	d9934 <memmove+0x20>
   d9924:	1e43      	subs	r3, r0, #1
   d9926:	42a1      	cmp	r1, r4
   d9928:	d008      	beq.n	d993c <memmove+0x28>
   d992a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d992e:	f803 2f01 	strb.w	r2, [r3, #1]!
   d9932:	e7f8      	b.n	d9926 <memmove+0x12>
   d9934:	4402      	add	r2, r0
   d9936:	4601      	mov	r1, r0
   d9938:	428a      	cmp	r2, r1
   d993a:	d100      	bne.n	d993e <memmove+0x2a>
   d993c:	bd10      	pop	{r4, pc}
   d993e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d9942:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d9946:	e7f7      	b.n	d9938 <memmove+0x24>

000d9948 <memset>:
   d9948:	4402      	add	r2, r0
   d994a:	4603      	mov	r3, r0
   d994c:	4293      	cmp	r3, r2
   d994e:	d100      	bne.n	d9952 <memset+0xa>
   d9950:	4770      	bx	lr
   d9952:	f803 1b01 	strb.w	r1, [r3], #1
   d9956:	e7f9      	b.n	d994c <memset+0x4>

000d9958 <srand>:
   d9958:	b538      	push	{r3, r4, r5, lr}
   d995a:	4b0d      	ldr	r3, [pc, #52]	; (d9990 <srand+0x38>)
   d995c:	681d      	ldr	r5, [r3, #0]
   d995e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9960:	4604      	mov	r4, r0
   d9962:	b97b      	cbnz	r3, d9984 <srand+0x2c>
   d9964:	2018      	movs	r0, #24
   d9966:	f7fc fa4f 	bl	d5e08 <malloc>
   d996a:	4a0a      	ldr	r2, [pc, #40]	; (d9994 <srand+0x3c>)
   d996c:	4b0a      	ldr	r3, [pc, #40]	; (d9998 <srand+0x40>)
   d996e:	63a8      	str	r0, [r5, #56]	; 0x38
   d9970:	e9c0 2300 	strd	r2, r3, [r0]
   d9974:	4b09      	ldr	r3, [pc, #36]	; (d999c <srand+0x44>)
   d9976:	6083      	str	r3, [r0, #8]
   d9978:	230b      	movs	r3, #11
   d997a:	8183      	strh	r3, [r0, #12]
   d997c:	2201      	movs	r2, #1
   d997e:	2300      	movs	r3, #0
   d9980:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9984:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9986:	2200      	movs	r2, #0
   d9988:	611c      	str	r4, [r3, #16]
   d998a:	615a      	str	r2, [r3, #20]
   d998c:	bd38      	pop	{r3, r4, r5, pc}
   d998e:	bf00      	nop
   d9990:	2003e048 	.word	0x2003e048
   d9994:	abcd330e 	.word	0xabcd330e
   d9998:	e66d1234 	.word	0xe66d1234
   d999c:	0005deec 	.word	0x0005deec

000d99a0 <strcmp>:
   d99a0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d99a4:	f811 3b01 	ldrb.w	r3, [r1], #1
   d99a8:	2a01      	cmp	r2, #1
   d99aa:	bf28      	it	cs
   d99ac:	429a      	cmpcs	r2, r3
   d99ae:	d0f7      	beq.n	d99a0 <strcmp>
   d99b0:	1ad0      	subs	r0, r2, r3
   d99b2:	4770      	bx	lr

000d99b4 <strcpy>:
   d99b4:	4603      	mov	r3, r0
   d99b6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d99ba:	f803 2b01 	strb.w	r2, [r3], #1
   d99be:	2a00      	cmp	r2, #0
   d99c0:	d1f9      	bne.n	d99b6 <strcpy+0x2>
   d99c2:	4770      	bx	lr

000d99c4 <strlen>:
   d99c4:	4603      	mov	r3, r0
   d99c6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d99ca:	2a00      	cmp	r2, #0
   d99cc:	d1fb      	bne.n	d99c6 <strlen+0x2>
   d99ce:	1a18      	subs	r0, r3, r0
   d99d0:	3801      	subs	r0, #1
   d99d2:	4770      	bx	lr

000d99d4 <strncpy>:
   d99d4:	b510      	push	{r4, lr}
   d99d6:	3901      	subs	r1, #1
   d99d8:	4603      	mov	r3, r0
   d99da:	b132      	cbz	r2, d99ea <strncpy+0x16>
   d99dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d99e0:	f803 4b01 	strb.w	r4, [r3], #1
   d99e4:	3a01      	subs	r2, #1
   d99e6:	2c00      	cmp	r4, #0
   d99e8:	d1f7      	bne.n	d99da <strncpy+0x6>
   d99ea:	441a      	add	r2, r3
   d99ec:	2100      	movs	r1, #0
   d99ee:	4293      	cmp	r3, r2
   d99f0:	d100      	bne.n	d99f4 <strncpy+0x20>
   d99f2:	bd10      	pop	{r4, pc}
   d99f4:	f803 1b01 	strb.w	r1, [r3], #1
   d99f8:	e7f9      	b.n	d99ee <strncpy+0x1a>

000d99fa <strnlen>:
   d99fa:	b510      	push	{r4, lr}
   d99fc:	4602      	mov	r2, r0
   d99fe:	4401      	add	r1, r0
   d9a00:	428a      	cmp	r2, r1
   d9a02:	4613      	mov	r3, r2
   d9a04:	d101      	bne.n	d9a0a <strnlen+0x10>
   d9a06:	1a18      	subs	r0, r3, r0
   d9a08:	bd10      	pop	{r4, pc}
   d9a0a:	781c      	ldrb	r4, [r3, #0]
   d9a0c:	3201      	adds	r2, #1
   d9a0e:	2c00      	cmp	r4, #0
   d9a10:	d1f6      	bne.n	d9a00 <strnlen+0x6>
   d9a12:	e7f8      	b.n	d9a06 <strnlen+0xc>

000d9a14 <strstr>:
   d9a14:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9a16:	780c      	ldrb	r4, [r1, #0]
   d9a18:	b164      	cbz	r4, d9a34 <strstr+0x20>
   d9a1a:	4603      	mov	r3, r0
   d9a1c:	781a      	ldrb	r2, [r3, #0]
   d9a1e:	4618      	mov	r0, r3
   d9a20:	1c5e      	adds	r6, r3, #1
   d9a22:	b90a      	cbnz	r2, d9a28 <strstr+0x14>
   d9a24:	4610      	mov	r0, r2
   d9a26:	e005      	b.n	d9a34 <strstr+0x20>
   d9a28:	4294      	cmp	r4, r2
   d9a2a:	d108      	bne.n	d9a3e <strstr+0x2a>
   d9a2c:	460d      	mov	r5, r1
   d9a2e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d9a32:	b902      	cbnz	r2, d9a36 <strstr+0x22>
   d9a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9a36:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   d9a3a:	4297      	cmp	r7, r2
   d9a3c:	d0f7      	beq.n	d9a2e <strstr+0x1a>
   d9a3e:	4633      	mov	r3, r6
   d9a40:	e7ec      	b.n	d9a1c <strstr+0x8>
	...

000d9a44 <_strtol_l.isra.0>:
   d9a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9a48:	4e3a      	ldr	r6, [pc, #232]	; (d9b34 <_strtol_l.isra.0+0xf0>)
   d9a4a:	4686      	mov	lr, r0
   d9a4c:	468c      	mov	ip, r1
   d9a4e:	4660      	mov	r0, ip
   d9a50:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9a54:	5da5      	ldrb	r5, [r4, r6]
   d9a56:	f015 0508 	ands.w	r5, r5, #8
   d9a5a:	d1f8      	bne.n	d9a4e <_strtol_l.isra.0+0xa>
   d9a5c:	2c2d      	cmp	r4, #45	; 0x2d
   d9a5e:	d133      	bne.n	d9ac8 <_strtol_l.isra.0+0x84>
   d9a60:	f89c 4000 	ldrb.w	r4, [ip]
   d9a64:	f04f 0801 	mov.w	r8, #1
   d9a68:	f100 0c02 	add.w	ip, r0, #2
   d9a6c:	2b00      	cmp	r3, #0
   d9a6e:	d05c      	beq.n	d9b2a <_strtol_l.isra.0+0xe6>
   d9a70:	2b10      	cmp	r3, #16
   d9a72:	d10c      	bne.n	d9a8e <_strtol_l.isra.0+0x4a>
   d9a74:	2c30      	cmp	r4, #48	; 0x30
   d9a76:	d10a      	bne.n	d9a8e <_strtol_l.isra.0+0x4a>
   d9a78:	f89c 0000 	ldrb.w	r0, [ip]
   d9a7c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9a80:	2858      	cmp	r0, #88	; 0x58
   d9a82:	d14d      	bne.n	d9b20 <_strtol_l.isra.0+0xdc>
   d9a84:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d9a88:	2310      	movs	r3, #16
   d9a8a:	f10c 0c02 	add.w	ip, ip, #2
   d9a8e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d9a92:	3f01      	subs	r7, #1
   d9a94:	2600      	movs	r6, #0
   d9a96:	fbb7 f9f3 	udiv	r9, r7, r3
   d9a9a:	4630      	mov	r0, r6
   d9a9c:	fb03 7a19 	mls	sl, r3, r9, r7
   d9aa0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d9aa4:	2d09      	cmp	r5, #9
   d9aa6:	d818      	bhi.n	d9ada <_strtol_l.isra.0+0x96>
   d9aa8:	462c      	mov	r4, r5
   d9aaa:	42a3      	cmp	r3, r4
   d9aac:	dd24      	ble.n	d9af8 <_strtol_l.isra.0+0xb4>
   d9aae:	1c75      	adds	r5, r6, #1
   d9ab0:	d007      	beq.n	d9ac2 <_strtol_l.isra.0+0x7e>
   d9ab2:	4581      	cmp	r9, r0
   d9ab4:	d31d      	bcc.n	d9af2 <_strtol_l.isra.0+0xae>
   d9ab6:	d101      	bne.n	d9abc <_strtol_l.isra.0+0x78>
   d9ab8:	45a2      	cmp	sl, r4
   d9aba:	db1a      	blt.n	d9af2 <_strtol_l.isra.0+0xae>
   d9abc:	fb00 4003 	mla	r0, r0, r3, r4
   d9ac0:	2601      	movs	r6, #1
   d9ac2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9ac6:	e7eb      	b.n	d9aa0 <_strtol_l.isra.0+0x5c>
   d9ac8:	2c2b      	cmp	r4, #43	; 0x2b
   d9aca:	bf08      	it	eq
   d9acc:	f89c 4000 	ldrbeq.w	r4, [ip]
   d9ad0:	46a8      	mov	r8, r5
   d9ad2:	bf08      	it	eq
   d9ad4:	f100 0c02 	addeq.w	ip, r0, #2
   d9ad8:	e7c8      	b.n	d9a6c <_strtol_l.isra.0+0x28>
   d9ada:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d9ade:	2d19      	cmp	r5, #25
   d9ae0:	d801      	bhi.n	d9ae6 <_strtol_l.isra.0+0xa2>
   d9ae2:	3c37      	subs	r4, #55	; 0x37
   d9ae4:	e7e1      	b.n	d9aaa <_strtol_l.isra.0+0x66>
   d9ae6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d9aea:	2d19      	cmp	r5, #25
   d9aec:	d804      	bhi.n	d9af8 <_strtol_l.isra.0+0xb4>
   d9aee:	3c57      	subs	r4, #87	; 0x57
   d9af0:	e7db      	b.n	d9aaa <_strtol_l.isra.0+0x66>
   d9af2:	f04f 36ff 	mov.w	r6, #4294967295
   d9af6:	e7e4      	b.n	d9ac2 <_strtol_l.isra.0+0x7e>
   d9af8:	1c73      	adds	r3, r6, #1
   d9afa:	d106      	bne.n	d9b0a <_strtol_l.isra.0+0xc6>
   d9afc:	2322      	movs	r3, #34	; 0x22
   d9afe:	f8ce 3000 	str.w	r3, [lr]
   d9b02:	4638      	mov	r0, r7
   d9b04:	b942      	cbnz	r2, d9b18 <_strtol_l.isra.0+0xd4>
   d9b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9b0a:	f1b8 0f00 	cmp.w	r8, #0
   d9b0e:	d000      	beq.n	d9b12 <_strtol_l.isra.0+0xce>
   d9b10:	4240      	negs	r0, r0
   d9b12:	2a00      	cmp	r2, #0
   d9b14:	d0f7      	beq.n	d9b06 <_strtol_l.isra.0+0xc2>
   d9b16:	b10e      	cbz	r6, d9b1c <_strtol_l.isra.0+0xd8>
   d9b18:	f10c 31ff 	add.w	r1, ip, #4294967295
   d9b1c:	6011      	str	r1, [r2, #0]
   d9b1e:	e7f2      	b.n	d9b06 <_strtol_l.isra.0+0xc2>
   d9b20:	2430      	movs	r4, #48	; 0x30
   d9b22:	2b00      	cmp	r3, #0
   d9b24:	d1b3      	bne.n	d9a8e <_strtol_l.isra.0+0x4a>
   d9b26:	2308      	movs	r3, #8
   d9b28:	e7b1      	b.n	d9a8e <_strtol_l.isra.0+0x4a>
   d9b2a:	2c30      	cmp	r4, #48	; 0x30
   d9b2c:	d0a4      	beq.n	d9a78 <_strtol_l.isra.0+0x34>
   d9b2e:	230a      	movs	r3, #10
   d9b30:	e7ad      	b.n	d9a8e <_strtol_l.isra.0+0x4a>
   d9b32:	bf00      	nop
   d9b34:	000da44a 	.word	0x000da44a

000d9b38 <strtol>:
   d9b38:	4613      	mov	r3, r2
   d9b3a:	460a      	mov	r2, r1
   d9b3c:	4601      	mov	r1, r0
   d9b3e:	4802      	ldr	r0, [pc, #8]	; (d9b48 <strtol+0x10>)
   d9b40:	6800      	ldr	r0, [r0, #0]
   d9b42:	f7ff bf7f 	b.w	d9a44 <_strtol_l.isra.0>
   d9b46:	bf00      	nop
   d9b48:	2003e048 	.word	0x2003e048

000d9b4c <dynalib_user>:
   d9b4c:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   d9b5c:	00000000 63736964 656e6e6f 64657463     ....disconnected
   d9b6c:	65727400 68742e6b 6c637765 6d6f632e     .trek.thewcl.com
   d9b7c:	7b002f00 69736422 003a2264 7622202c     ./.{"dsid":., "v
   d9b8c:	65756c61 2c003a22 69742220 7473656d     alue":., "timest
   d9b9c:	22706d61 2c7d003a 64227b00 22617461     amp":.},.{"data"
   d9bac:	5d005b3a 4f50007d 53005453 75746174     :[.]}.POST.Statu
   d9bbc:	00203a73 79646f42 4500203a 7265746e     s: .Body: .Enter
   d9bcc:	74656e20 6b726f77 49535320 30282044      network SSID (0
   d9bdc:	206f7420 70696b73 00203a29 6e450030      to skip): .0.En
   d9bec:	20726574 69766564 44206563 20444953     ter device DSID 
   d9bfc:	74203028 6b73206f 3a297069 6e450020     (0 to skip): .En
   d9c0c:	20726574 7774656e 206b726f 73736170     ter network pass
   d9c1c:	64726f77 4300203a 65646572 6169746e     word: .Credentia
   d9c2c:	7320736c 77207465 20687469 64697373     ls set with ssid
   d9c3c:	0a00203a 73617009 726f7773 00203a64     : ...password: .
   d9c4c:	64697364 746e6520 64657265 69736400     dsid entered.dsi
   d9c5c:	00203a64 65746e45 69742072 6220656d     d: .Enter time b
   d9c6c:	65777465 64206e65 20617461 6c6c6f63     etween data coll
   d9c7c:	69746365 28206e6f 3a29736d 6e450020     ection (ms): .En
   d9c8c:	20726574 656d6974 74656220 6e656577     ter time between
   d9c9c:	46695720 6f632069 63656e6e 6e6f6974      WiFi connection
   d9cac:	736d2820 00203a29 30344536 31303030      (ms): .6E400001
   d9cbc:	4135422d 33462d33 452d3339 2d394130     -B5A3-F393-E0A9-
   d9ccc:	45303545 43443432 45394143 34453600     E50E24DCCA9E.6E4
   d9cdc:	30303030 35422d32 462d3341 2d333933     00002-B5A3-F393-
   d9cec:	39413045 3035452d 44343245 39414343     E0A9-E50E24DCCA9
   d9cfc:	45360045 30303034 422d3330 2d334135     E.6E400003-B5A3-
   d9d0c:	33393346 4130452d 35452d39 34324530     F393-E0A9-E50E24
   d9d1c:	41434344 74004539 78720078 63634100     DCCA9E.tx.rx.Acc
   d9d2c:	00747065 6c707061 74616369 2f6e6f69     ept.application/
   d9d3c:	6e6f736a 6e6f4300 746e6574 7079542d     json.Content-Typ
   d9d4c:	70610065 6f742d69 006e656b 2d495041     e.api-token.API-
   d9d5c:	65666165 64632d65 2d363562 35343533     eafee-cdb56-3545
   d9d6c:	38332d64 00643766 70747448 65696c43     d-38f7d.HttpClie
   d9d7c:	093e746e 6e6e6f43 69746365 7420676e     nt>.Connecting t
   d9d8c:	00203a6f 70747448 65696c43 093e746e     o: .HttpClient>.
   d9d9c:	6e6e6f43 69746365 7420676e 5049206f     Connecting to IP
   d9dac:	2000203a 50545448 302e312f 48000a0d     : . HTTP/1.0...H
   d9dbc:	43707474 6e65696c 53093e74 74726174     ttpClient>.Start
   d9dcc:	20666f20 50545448 71655220 74736575      of HTTP Request
   d9ddc:	6c63002e 0065736f 6e6e6f43 69746365     ..close.Connecti
   d9dec:	48006e6f 43707474 6e65696c 43093e74     on.HttpClient>.C
   d9dfc:	656e6e6f 6f697463 6166206e 64656c69     onnection failed
   d9e0c:	4f48002e 43005453 65746e6f 4c2d746e     ..HOST.Content-L
   d9e1c:	74676e65 74480068 6c437074 746e6569     ength.HttpClient
   d9e2c:	6e45093e 666f2064 54544820 65522050     >.End of HTTP Re
   d9e3c:	73657571 0d002e74 7474480a 696c4370     quest....HttpCli
   d9e4c:	3e746e65 63655209 69766965 5420676e     ent>.Receiving T
   d9e5c:	74205043 736e6172 69746361 6f206e6f     CP transaction o
   d9e6c:	20002066 65747962 48002e73 43707474     f . bytes..HttpC
   d9e7c:	6e65696c 45093e74 726f7272 6552203a     lient>.Error: Re
   d9e8c:	6e6f7073 62206573 2079646f 6772616c     sponse body larg
   d9e9c:	74207265 206e6168 66667562 002e7265     er than buffer..
   d9eac:	74480a0d 6c437074 746e6569 6e45093e     ..HttpClient>.En
   d9ebc:	666f2064 50435420 61727420 6361736e     d of TCP transac
   d9ecc:	6e6f6974 0a0d002e 70747448 65696c43     tion....HttpClie
   d9edc:	093e746e 6f727245 54203a72 6f656d69     nt>.Error: Timeo
   d9eec:	77207475 656c6968 61657220 676e6964     ut while reading
   d9efc:	73657220 736e6f70 0d002e65 7474480a      response....Htt
   d9f0c:	696c4370 3e746e65 646e4509 20666f20     pClient>.End of 
   d9f1c:	50545448 73655220 736e6f70 00282065     HTTP Response (.
   d9f2c:	2e29736d 74744800 696c4370 3e746e65     ms)..HttpClient>
   d9f3c:	61745309 20737574 65646f43 0d00203a     .Status Code: ..
   d9f4c:	000a0d0a 70747448 65696c43 093e746e     ....HttpClient>.
   d9f5c:	6f727245 43203a72 74276e61 6e696620     Error: Can't fin
   d9f6c:	54482064 72205054 6f707365 2065736e     d HTTP response 
   d9f7c:	79646f62 494c002e 48443353 00000000     body..LIS3DH....

000d9f8c <_ZTV15Adafruit_LIS3DH>:
	...
   d9f94:	000d40b3 000d4b59 000d5221 000d56d1     .@..YK..!R...V..
   d9fa4:	000d5225                                %R..

000d9fa8 <_ZTVN5spark13EthernetClassE>:
	...
   d9fb0:	000d5ec7 000d5ebd 000d5eb3 000d5ea9     .^...^...^...^..
   d9fc0:	000d5e9d 000d5e91 000d8979 000d8981     .^...^..y.......
   d9fd0:	000d5e85 000d5e7d 000d5e73 000d5e69     .^..}^..s^..i^..
   d9fe0:	000d89b1                                ....

000d9fe4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9fe4:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   d9ff4:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   da004:	72756769 6f697461 7369206e 766e6920     iguration is inv
   da014:	64696c61 6977002e 676e6972 656c622e     alid..wiring.ble
   da024:	61745300 64207472 6f637369 69726576     .Start discoveri
   da034:	7320676e 69767265 2e736563 65655000     ng services..Pee
   da044:	65642072 65636976 20736920 7373696d     r device is miss
   da054:	21676e69 69614600 2064656c 61206f74     ing!.Failed to a
   da064:	6e657070 65702064 43207265 72746e65     ppend peer Centr
   da074:	64206c61 63697665 43002e65 656e6e6f     al device..Conne
   da084:	64657463 20796220 746e6543 206c6172     cted by Central 
   da094:	69766564 002e6563 63736944 656e6e6f     device..Disconne
   da0a4:	64657463 20796220 6f6d6572 64206574     cted by remote d
   da0b4:	63697665 44002e65 696c7075 65746163     evice..Duplicate
   da0c4:	68632064 63617261 69726574 63697473     d characteristic
   da0d4:	6e616320 20746f6e 61206562 64656464      cannot be added
   da0e4:	6146002e 64656c69 206f7420 65707061     ..Failed to appe
   da0f4:	6c20646e 6c61636f 61686320 74636172     nd local charact
   da104:	73697265 2e636974 00000000              eristic.....

000da110 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da118:	000d65c1 000d6625 000d6837 000d664f     .e..%f..7h..Of..
   da128:	000d65c5                                .e..

000da12c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da134:	000d65bd 000d6633 000d65bf 000d6653     .e..3f...e..Sf..
   da144:	000d65e5                                .e..

000da148 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da150:	000d65bb 000d6641 000d703d 000d6657     .e..Af..=p..Wf..
   da160:	000d6605                                .f..

000da164 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   da16c:	5f9b34fb 80000080 00001000 00000000     .4._............

000da17c <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   da17c:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000da18c <_ZN8particle7BleUuid9BASE_UUIDE>:
   da18c:	5f9b34fb 80000080 00001000 00000000     .4._............
   da19c:	006e616e 00666e69 0066766f 00707061     nan.inf.ovf.app.
   da1ac:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   da1bc:	007a2553 74637361 00656d69              S%z.asctime.

000da1c8 <_ZTV9IPAddress>:
	...
   da1d0:	000d7eef 000d7edf 000d7ee1              .~...~...~..

000da1dc <_ZTV9USBSerial>:
	...
   da1e4:	000d7ffd 000d8065 000d803b 000d7a29     ....e...;...)z..
   da1f4:	000d802d 000d7fff 000d800f 000d805f     -..........._...
   da204:	000d801f 000d7ff9                       ........

000da20c <_ZTV11USARTSerial>:
	...
   da214:	000d8109 000d8175 000d814d 000d7a29     ....u...M...)z..
   da224:	000d811d 000d8139 000d812b 000d8147     ....9...+...G...
   da234:	000d810b 000d810f                       ........

000da23c <_ZTV7TwoWire>:
	...
   da244:	000d8205 000d824f 000d8227 000d8207     ....O...'.......
   da254:	000d822f 000d8237 000d823f 000d8247     /...7...?...G...
   da264:	76636572 72726520 3d20726f 00642520     recv error = %d.

000da274 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da27c:	000d838b 000d83ad 000d87c7 000d83bb     ................
   da28c:	000d838d                                ....

000da290 <_ZTV9TCPClient>:
	...
   da298:	000d8439 000d846d 000d8309 000d8323     9...m.......#...
   da2a8:	000d865d 000d84cf 000d84a1 000d834d     ]...........M...
   da2b8:	000d8567 000d87cd 000d8503 000d8711     g...............
   da2c8:	000d834f 000d8381 000d8335 000d83bf     O.......5.......
   da2d8:	000d8481                                ....

000da2dc <_ZTVN5spark9WiFiClassE>:
	...
   da2e4:	000d891b 000d8911 000d8907 000d88c9     ................
   da2f4:	000d7cc1 000d88fb 000d8979 000d8981     .|......y.......
   da304:	000d88ef 000d88e7 000d88dd 000d88d3     ................
   da314:	000d89b1                                ....

000da318 <_ZTVN5spark12NetworkClassE>:
	...
   da320:	000d8939 000d8943 000d894d 000d8957     9...C...M...W...
   da330:	000d8961 000d896d 000d8979 000d8981     a...m...y.......
   da340:	000d8989 000d8995 000d899d 000d89a7     ................
   da350:	000d89b1                                ....

000da354 <_ZSt7nothrow>:
	...

000da355 <_ZTSSt19_Sp_make_shared_tag>:
   da355:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   da365:	5f646572 00676174                        red_tag....

000da370 <_ZTISt19_Sp_make_shared_tag>:
   da370:	000da3b0 000da355                       ....U...

000da378 <_ZTIN10__cxxabiv117__class_type_infoE>:
   da378:	000da410 000da384 000da434              ........4...

000da384 <_ZTSN10__cxxabiv117__class_type_infoE>:
   da384:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   da394:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   da3a4:	00000045                                E...

000da3a8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   da3a8:	00000000 000da378 000d8cb1 000d8cc5     ....x...........
   da3b8:	000d8e59 000d8e59 000d8d2f 000d8c71     Y...Y.../...q...
   da3c8:	000d8d17 000d8cd9 000d8ca5              ............

000da3d4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   da3d4:	000da410 000da3e0 000da378              ........x...

000da3e0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   da3e0:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   da3f0:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   da400:	456f666e 00000000                       nfoE....

000da408 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   da408:	00000000 000da3d4 000d8d59 000d8d6d     ........Y...m...
   da418:	000d8e59 000d8e59 000d8d2f 000d8c71     Y...Y.../...q...
   da428:	000d8e2d 000d8db9 000d8d81              -...........

000da434 <_ZTISt9type_info>:
   da434:	000da3b0 000da43c                       ....<...

000da43c <_ZTSSt9type_info>:
   da43c:	74397453 5f657079 6f666e69               St9type_info.

000da449 <_ctype_>:
   da449:	20202000 20202020 28282020 20282828     .         ((((( 
   da459:	20202020 20202020 20202020 20202020                     
   da469:	10108820 10101010 10101010 10101010      ...............
   da479:	04040410 04040404 10040404 10101010     ................
   da489:	41411010 41414141 01010101 01010101     ..AAAAAA........
   da499:	01010101 01010101 01010101 10101010     ................
   da4a9:	42421010 42424242 02020202 02020202     ..BBBBBB........
   da4b9:	02020202 02020202 02020202 10101010     ................
   da4c9:	00000020 00000000 00000000 00000000      ...............
	...

000da54a <link_const_variable_data_end>:
	...

000da54c <link_constructors_location>:
   da54c:	000d4b69 	.word	0x000d4b69
   da550:	000d5ed1 	.word	0x000d5ed1
   da554:	000d6145 	.word	0x000d6145
   da558:	000d7a01 	.word	0x000d7a01
   da55c:	000d7ccd 	.word	0x000d7ccd
   da560:	000d7d51 	.word	0x000d7d51
   da564:	000d7d79 	.word	0x000d7d79
   da568:	000d8925 	.word	0x000d8925
   da56c:	000d8a91 	.word	0x000d8a91
