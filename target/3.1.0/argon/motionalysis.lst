
/Users/trylaarsdam/Documents/dev/motionalysis/target/3.1.0/argon/motionalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000065e0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000ba600  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000084  2003d9d0  000ba604  0001d9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000d9c  2003da58  2003da58  0002da58  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000ba688  000ba688  0002a688  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000ba6b0  000ba6b0  0002a6b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0011ebc8  00000000  00000000  0002a6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0001331c  00000000  00000000  0014927c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00039191  00000000  00000000  0015c598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00003180  00000000  00000000  00195729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 0000aa10  00000000  00000000  001988a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037dd4  00000000  00000000  001a32b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003ecf8  00000000  00000000  001db08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012bad7  00000000  00000000  00219d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00008a64  00000000  00000000  0034585c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f005 fac9 	bl	b95c8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f005 faeb 	bl	b9618 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d9d0 	.word	0x2003d9d0
   b404c:	000ba604 	.word	0x000ba604
   b4050:	2003da54 	.word	0x2003da54
   b4054:	2003da58 	.word	0x2003da58
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 fe03 	bl	b8c6c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42a5      	cmp	r5, r4
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000ba5d4 	.word	0x000ba5d4
   b4080:	000ba5f8 	.word	0x000ba5f8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bd26 	b.w	b4ad4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fe19 	bl	b4cc0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 bda3 	b.w	b8bdc <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 b909 	b.w	b62ac <malloc>

000b409a <_Znaj>:
   b409a:	f002 b907 	b.w	b62ac <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f002 b90d 	b.w	b62bc <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   b40b2:	4770      	bx	lr

000b40b4 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b40b4:	b510      	push	{r4, lr}
   b40b6:	4604      	mov	r4, r0
   b40b8:	3004      	adds	r0, #4
   b40ba:	f003 fed5 	bl	b7e68 <_ZN6StringD1Ev>
   b40be:	4620      	mov	r0, r4
   b40c0:	bd10      	pop	{r4, pc}

000b40c2 <_ZN14http_request_tD1Ev>:
} http_request_t;
   b40c2:	b510      	push	{r4, lr}
   b40c4:	4604      	mov	r4, r0
   b40c6:	303c      	adds	r0, #60	; 0x3c
   b40c8:	f003 fece 	bl	b7e68 <_ZN6StringD1Ev>
   b40cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b40d0:	f003 feca 	bl	b7e68 <_ZN6StringD1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f003 fec7 	bl	b7e68 <_ZN6StringD1Ev>
   b40da:	4620      	mov	r0, r4
   b40dc:	bd10      	pop	{r4, pc}

000b40de <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b40de:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b40e0:	2301      	movs	r3, #1
   b40e2:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b40e4:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b40e6:	4604      	mov	r4, r0
        if (th->func) {
   b40e8:	b143      	cbz	r3, b40fc <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b40ea:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b40ec:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b40ee:	2301      	movs	r3, #1
   b40f0:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b40f2:	2000      	movs	r0, #0
    }
   b40f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b40f8:	f001 bdda 	b.w	b5cb0 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b40fc:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b40fe:	2800      	cmp	r0, #0
   b4100:	d0f5      	beq.n	b40ee <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b4102:	6883      	ldr	r3, [r0, #8]
   b4104:	b90b      	cbnz	r3, b410a <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b4106:	f004 febe 	bl	b8e86 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b410a:	68c3      	ldr	r3, [r0, #12]
   b410c:	e7ee      	b.n	b40ec <_ZN6Thread3runEPv+0xe>
	...

000b4110 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv>:

  count++;
}

//d7 led turns on when ble connected
void connectCallback(const BlePeerDevice& peer, void* context){
   b4110:	b508      	push	{r3, lr}
  count = 0;
   b4112:	4b07      	ldr	r3, [pc, #28]	; (b4130 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x20>)
   b4114:	2200      	movs	r2, #0
   b4116:	601a      	str	r2, [r3, #0]
  Serial.println("connected");
   b4118:	f004 fc76 	bl	b8a08 <_Z16_fetch_usbserialv>
   b411c:	4905      	ldr	r1, [pc, #20]	; (b4134 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x24>)
   b411e:	f003 fd9c 	bl	b7c5a <_ZN5Print7printlnEPKc>
  digitalWrite(D7, HIGH);
}
   b4122:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(D7, HIGH);
   b4126:	2101      	movs	r1, #1
   b4128:	2007      	movs	r0, #7
   b412a:	f004 be20 	b.w	b8d6e <digitalWrite>
   b412e:	bf00      	nop
   b4130:	2003daa8 	.word	0x2003daa8
   b4134:	000b9c75 	.word	0x000b9c75

000b4138 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv>:

//d7 led turns off when ble disconnected
void disconnectCallback(const BlePeerDevice& peer, void* context){
   b4138:	b508      	push	{r3, lr}
  Serial.println("disconnected");
   b413a:	f004 fc65 	bl	b8a08 <_Z16_fetch_usbserialv>
   b413e:	4904      	ldr	r1, [pc, #16]	; (b4150 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   b4140:	f003 fd8b 	bl	b7c5a <_ZN5Print7printlnEPKc>
  digitalWrite(D7, LOW);
   b4144:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(D7, LOW);
   b4148:	2100      	movs	r1, #0
   b414a:	2007      	movs	r0, #7
   b414c:	f004 be0f 	b.w	b8d6e <digitalWrite>
   b4150:	000b9850 	.word	0x000b9850

000b4154 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   b4154:	b510      	push	{r4, lr}
   b4156:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b4158:	6800      	ldr	r0, [r0, #0]
   b415a:	b108      	cbz	r0, b4160 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   b415c:	f002 f8ae 	bl	b62bc <free>
class SystemClass {
   b4160:	4620      	mov	r0, r4
   b4162:	bd10      	pop	{r4, pc}

000b4164 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4164:	2a01      	cmp	r2, #1
   b4166:	d102      	bne.n	b416e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4168:	6001      	str	r1, [r0, #0]
      }
   b416a:	2000      	movs	r0, #0
   b416c:	4770      	bx	lr
	  switch (__op)
   b416e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4170:	bf04      	itt	eq
   b4172:	680b      	ldreq	r3, [r1, #0]
   b4174:	6003      	streq	r3, [r0, #0]
	      break;
   b4176:	e7f8      	b.n	b416a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4178 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4178:	6803      	ldr	r3, [r0, #0]
   b417a:	4718      	bx	r3

000b417c <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   b417c:	b510      	push	{r4, lr}
   b417e:	4604      	mov	r4, r0

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   b4180:	b93a      	cbnz	r2, b4192 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b4182:	6803      	ldr	r3, [r0, #0]
   b4184:	689b      	ldr	r3, [r3, #8]
   b4186:	4798      	blx	r3
        n += println();
   b4188:	4620      	mov	r0, r4
    }
   b418a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b418e:	f003 bd58 	b.w	b7c42 <_ZN5Print7printlnEv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4192:	b2d2      	uxtb	r2, r2
   b4194:	f003 fd6b 	bl	b7c6e <_ZN5Print11printNumberEmh>
   b4198:	e7f6      	b.n	b4188 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0xc>

000b419a <_ZN5Print7printlnIjLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b419a:	b510      	push	{r4, lr}
   b419c:	4604      	mov	r4, r0
    if (base == 0) {
   b419e:	b942      	cbnz	r2, b41b2 <_ZN5Print7printlnIjLi0EEEjT_i.isra.0+0x18>
        return write(n);
   b41a0:	6802      	ldr	r2, [r0, #0]
   b41a2:	b2c9      	uxtb	r1, r1
   b41a4:	6892      	ldr	r2, [r2, #8]
   b41a6:	4790      	blx	r2
        n += println();
   b41a8:	4620      	mov	r0, r4
    }
   b41aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b41ae:	f003 bd48 	b.w	b7c42 <_ZN5Print7printlnEv>
        return printNumber(val, base) + t;
   b41b2:	b2d2      	uxtb	r2, r2
   b41b4:	f003 fd5b 	bl	b7c6e <_ZN5Print11printNumberEmh>
   b41b8:	e7f6      	b.n	b41a8 <_ZN5Print7printlnIjLi0EEEjT_i.isra.0+0xe>

000b41ba <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b41ba:	b570      	push	{r4, r5, r6, lr}
   b41bc:	4605      	mov	r5, r0
   b41be:	460c      	mov	r4, r1
    if (base == 0) {
   b41c0:	4616      	mov	r6, r2
   b41c2:	b942      	cbnz	r2, b41d6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x1c>
        return write(n);
   b41c4:	6803      	ldr	r3, [r0, #0]
   b41c6:	b2c9      	uxtb	r1, r1
   b41c8:	689b      	ldr	r3, [r3, #8]
   b41ca:	4798      	blx	r3
        n += println();
   b41cc:	4628      	mov	r0, r5
    }
   b41ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        n += println();
   b41d2:	f003 bd36 	b.w	b7c42 <_ZN5Print7printlnEv>
        if (n < 0 && base == 10) {
   b41d6:	2900      	cmp	r1, #0
   b41d8:	da0a      	bge.n	b41f0 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
   b41da:	2a0a      	cmp	r2, #10
   b41dc:	d108      	bne.n	b41f0 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
            t = print('-');
   b41de:	212d      	movs	r1, #45	; 0x2d
   b41e0:	f003 fd26 	bl	b7c30 <_ZN5Print5printEc>
            val = -n;
   b41e4:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b41e6:	b2f2      	uxtb	r2, r6
   b41e8:	4628      	mov	r0, r5
   b41ea:	f003 fd40 	bl	b7c6e <_ZN5Print11printNumberEmh>
   b41ee:	e7ed      	b.n	b41cc <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x12>
            val = n;
   b41f0:	4621      	mov	r1, r4
   b41f2:	e7f8      	b.n	b41e6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x2c>

000b41f4 <_ZN10HttpClientD1Ev>:

class HttpClient {
   b41f4:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b41f6:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b41f8:	4b0a      	ldr	r3, [pc, #40]	; (b4224 <_ZN10HttpClientD1Ev+0x30>)
   b41fa:	6003      	str	r3, [r0, #0]
   b41fc:	4605      	mov	r5, r0
   b41fe:	b17c      	cbz	r4, b4220 <_ZN10HttpClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b4200:	6863      	ldr	r3, [r4, #4]
   b4202:	3b01      	subs	r3, #1
   b4204:	6063      	str	r3, [r4, #4]
   b4206:	b95b      	cbnz	r3, b4220 <_ZN10HttpClientD1Ev+0x2c>
          _M_dispose();
   b4208:	6823      	ldr	r3, [r4, #0]
   b420a:	4620      	mov	r0, r4
   b420c:	689b      	ldr	r3, [r3, #8]
   b420e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4210:	68a3      	ldr	r3, [r4, #8]
   b4212:	3b01      	subs	r3, #1
   b4214:	60a3      	str	r3, [r4, #8]
   b4216:	b91b      	cbnz	r3, b4220 <_ZN10HttpClientD1Ev+0x2c>
            _M_destroy();
   b4218:	6823      	ldr	r3, [r4, #0]
   b421a:	4620      	mov	r0, r4
   b421c:	68db      	ldr	r3, [r3, #12]
   b421e:	4798      	blx	r3
   b4220:	4628      	mov	r0, r5
   b4222:	bd38      	pop	{r3, r4, r5, pc}
   b4224:	000ba218 	.word	0x000ba218

000b4228 <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4228:	b40e      	push	{r1, r2, r3}
   b422a:	b503      	push	{r0, r1, lr}
   b422c:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   b422e:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4230:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4234:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4236:	f003 fd38 	bl	b7caa <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b423a:	b002      	add	sp, #8
   b423c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4240:	b003      	add	sp, #12
   b4242:	4770      	bx	lr

000b4244 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4244:	2300      	movs	r3, #0
   b4246:	6840      	ldr	r0, [r0, #4]
   b4248:	461a      	mov	r2, r3
   b424a:	4619      	mov	r1, r3
   b424c:	f001 bfde 	b.w	b620c <network_on>

000b4250 <_ZN5spark9WiFiClass3offEv>:
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b4250:	2300      	movs	r3, #0
   b4252:	6840      	ldr	r0, [r0, #4]
   b4254:	461a      	mov	r2, r3
   b4256:	4619      	mov	r1, r3
   b4258:	f001 bfe0 	b.w	b621c <network_off>

000b425c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   b425c:	2300      	movs	r3, #0
   b425e:	6840      	ldr	r0, [r0, #4]
   b4260:	461a      	mov	r2, r3
   b4262:	f001 bfb3 	b.w	b61cc <network_connect>

000b4266 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4266:	2200      	movs	r2, #0
   b4268:	6840      	ldr	r0, [r0, #4]
   b426a:	4611      	mov	r1, r2
   b426c:	f001 bfc6 	b.w	b61fc <network_ready>

000b4270 <_Z15reportingThreadv>:
void reportingThread(void) {
   b4270:	b580      	push	{r7, lr}
      String localPayload = payload;
   b4272:	4e4c      	ldr	r6, [pc, #304]	; (b43a4 <_Z15reportingThreadv+0x134>)
    Serial.println("runningReporting");
   b4274:	4f4c      	ldr	r7, [pc, #304]	; (b43a8 <_Z15reportingThreadv+0x138>)
      WiFi.on();
   b4276:	4c4d      	ldr	r4, [pc, #308]	; (b43ac <_Z15reportingThreadv+0x13c>)
void reportingThread(void) {
   b4278:	b08a      	sub	sp, #40	; 0x28
    if(storedValuesPos >= ((reportingInterval * 1000) / recordingInterval)) {
   b427a:	f8df 8174 	ldr.w	r8, [pc, #372]	; b43f0 <_Z15reportingThreadv+0x180>
   b427e:	4d4c      	ldr	r5, [pc, #304]	; (b43b0 <_Z15reportingThreadv+0x140>)
    Serial.println("runningReporting");
   b4280:	f004 fbc2 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4284:	4639      	mov	r1, r7
   b4286:	f003 fce8 	bl	b7c5a <_ZN5Print7printlnEPKc>
    if(storedValuesPos >= ((reportingInterval * 1000) / recordingInterval)) {
   b428a:	f8d8 3000 	ldr.w	r3, [r8]
   b428e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4292:	4353      	muls	r3, r2
   b4294:	682a      	ldr	r2, [r5, #0]
   b4296:	fb93 f3f2 	sdiv	r3, r3, r2
   b429a:	4a46      	ldr	r2, [pc, #280]	; (b43b4 <_Z15reportingThreadv+0x144>)
   b429c:	6812      	ldr	r2, [r2, #0]
   b429e:	4293      	cmp	r3, r2
   b42a0:	dcee      	bgt.n	b4280 <_Z15reportingThreadv+0x10>
      Serial.println("reporting");
   b42a2:	f004 fbb1 	bl	b8a08 <_Z16_fetch_usbserialv>
   b42a6:	4944      	ldr	r1, [pc, #272]	; (b43b8 <_Z15reportingThreadv+0x148>)
   b42a8:	f003 fcd7 	bl	b7c5a <_ZN5Print7printlnEPKc>
      String localPayload = payload;
   b42ac:	4631      	mov	r1, r6
   b42ae:	a802      	add	r0, sp, #8
   b42b0:	f003 fe48 	bl	b7f44 <_ZN6StringC1ERKS_>
      payload = "";
   b42b4:	4941      	ldr	r1, [pc, #260]	; (b43bc <_Z15reportingThreadv+0x14c>)
   b42b6:	4630      	mov	r0, r6
   b42b8:	f003 fe4f 	bl	b7f5a <_ZN6StringaSEPKc>
      WiFi.on();
   b42bc:	4620      	mov	r0, r4
   b42be:	f7ff ffc1 	bl	b4244 <_ZN5spark9WiFiClass2onEv>
      WiFi.connect();
   b42c2:	2100      	movs	r1, #0
   b42c4:	4620      	mov	r0, r4
   b42c6:	f7ff ffc9 	bl	b425c <_ZN5spark9WiFiClass7connectEj>
      while(!WiFi.ready()) {
   b42ca:	4620      	mov	r0, r4
   b42cc:	f7ff ffcb 	bl	b4266 <_ZN5spark9WiFiClass5readyEv>
   b42d0:	b918      	cbnz	r0, b42da <_Z15reportingThreadv+0x6a>
        delay(100);
   b42d2:	2064      	movs	r0, #100	; 0x64
   b42d4:	f002 f83a 	bl	b634c <delay>
      while(!WiFi.ready()) {
   b42d8:	e7f7      	b.n	b42ca <_Z15reportingThreadv+0x5a>
      if(WiFi.ready() != true) {
   b42da:	4620      	mov	r0, r4
   b42dc:	f7ff ffc3 	bl	b4266 <_ZN5spark9WiFiClass5readyEv>
   b42e0:	b958      	cbnz	r0, b42fa <_Z15reportingThreadv+0x8a>
        Serial.println("WiFi failed to connect, data not reported");
   b42e2:	f004 fb91 	bl	b8a08 <_Z16_fetch_usbserialv>
   b42e6:	4936      	ldr	r1, [pc, #216]	; (b43c0 <_Z15reportingThreadv+0x150>)
   b42e8:	f003 fcb7 	bl	b7c5a <_ZN5Print7printlnEPKc>
      WiFi.off();
   b42ec:	4620      	mov	r0, r4
   b42ee:	f7ff ffaf 	bl	b4250 <_ZN5spark9WiFiClass3offEv>
      String localPayload = payload;
   b42f2:	a802      	add	r0, sp, #8
   b42f4:	f003 fdb8 	bl	b7e68 <_ZN6StringD1Ev>
   b42f8:	e7bf      	b.n	b427a <_Z15reportingThreadv+0xa>
        Serial.println("WiFi connected, reporting data");
   b42fa:	f004 fb85 	bl	b8a08 <_Z16_fetch_usbserialv>
   b42fe:	4931      	ldr	r1, [pc, #196]	; (b43c4 <_Z15reportingThreadv+0x154>)
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
    }

    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
   b4300:	f8df 80f0 	ldr.w	r8, [pc, #240]	; b43f4 <_Z15reportingThreadv+0x184>
   b4304:	f003 fca9 	bl	b7c5a <_ZN5Print7printlnEPKc>
        localPayload.remove(localPayload.length() - 1);
   b4308:	9904      	ldr	r1, [sp, #16]
   b430a:	a802      	add	r0, sp, #8
   b430c:	3901      	subs	r1, #1
   b430e:	f003 fef8 	bl	b8102 <_ZN6String6removeEj>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4312:	492d      	ldr	r1, [pc, #180]	; (b43c8 <_Z15reportingThreadv+0x158>)
   b4314:	a806      	add	r0, sp, #24
   b4316:	f003 fdf2 	bl	b7efe <_ZN6StringC1EPK19__FlashStringHelper>
        request.body = "{\"data\":[" + localPayload + "]}";
   b431a:	a902      	add	r1, sp, #8
   b431c:	a806      	add	r0, sp, #24
   b431e:	f003 fe69 	bl	b7ff4 <_ZplRK15StringSumHelperRK6String>
   b4322:	492a      	ldr	r1, [pc, #168]	; (b43cc <_Z15reportingThreadv+0x15c>)
   b4324:	f003 fe72 	bl	b800c <_ZplRK15StringSumHelperPKc>
   b4328:	4601      	mov	r1, r0
   b432a:	4829      	ldr	r0, [pc, #164]	; (b43d0 <_Z15reportingThreadv+0x160>)
   b432c:	f003 fdfb 	bl	b7f26 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b4330:	a806      	add	r0, sp, #24
   b4332:	f003 fd99 	bl	b7e68 <_ZN6StringD1Ev>
   b4336:	4b27      	ldr	r3, [pc, #156]	; (b43d4 <_Z15reportingThreadv+0x164>)
   b4338:	4927      	ldr	r1, [pc, #156]	; (b43d8 <_Z15reportingThreadv+0x168>)
   b433a:	9300      	str	r3, [sp, #0]
   b433c:	4642      	mov	r2, r8
   b433e:	4b27      	ldr	r3, [pc, #156]	; (b43dc <_Z15reportingThreadv+0x16c>)
   b4340:	4827      	ldr	r0, [pc, #156]	; (b43e0 <_Z15reportingThreadv+0x170>)
   b4342:	f001 fa1f 	bl	b5784 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
        Serial.println("Status: " + response.status);
   b4346:	f004 fb5f 	bl	b8a08 <_Z16_fetch_usbserialv>
   b434a:	f8d8 3000 	ldr.w	r3, [r8]
   b434e:	4925      	ldr	r1, [pc, #148]	; (b43e4 <_Z15reportingThreadv+0x174>)
   b4350:	4419      	add	r1, r3
   b4352:	f003 fc82 	bl	b7c5a <_ZN5Print7printlnEPKc>
        Serial.println("Body: " + response.body);
   b4356:	f004 fb57 	bl	b8a08 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b435a:	4923      	ldr	r1, [pc, #140]	; (b43e8 <_Z15reportingThreadv+0x178>)
   b435c:	4605      	mov	r5, r0
   b435e:	a806      	add	r0, sp, #24
   b4360:	f003 fdcd 	bl	b7efe <_ZN6StringC1EPK19__FlashStringHelper>
   b4364:	f108 0104 	add.w	r1, r8, #4
   b4368:	a806      	add	r0, sp, #24
   b436a:	f003 fe43 	bl	b7ff4 <_ZplRK15StringSumHelperRK6String>
   b436e:	6801      	ldr	r1, [r0, #0]
   b4370:	4628      	mov	r0, r5
   b4372:	f003 fc72 	bl	b7c5a <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4376:	a806      	add	r0, sp, #24
   b4378:	f003 fd76 	bl	b7e68 <_ZN6StringD1Ev>
        Serial.println("ReqBody: " + request.body);
   b437c:	f004 fb44 	bl	b8a08 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4380:	491a      	ldr	r1, [pc, #104]	; (b43ec <_Z15reportingThreadv+0x17c>)
   b4382:	4605      	mov	r5, r0
   b4384:	a806      	add	r0, sp, #24
   b4386:	f003 fdba 	bl	b7efe <_ZN6StringC1EPK19__FlashStringHelper>
   b438a:	4911      	ldr	r1, [pc, #68]	; (b43d0 <_Z15reportingThreadv+0x160>)
   b438c:	a806      	add	r0, sp, #24
   b438e:	f003 fe31 	bl	b7ff4 <_ZplRK15StringSumHelperRK6String>
   b4392:	6801      	ldr	r1, [r0, #0]
   b4394:	4628      	mov	r0, r5
   b4396:	f003 fc60 	bl	b7c5a <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b439a:	a806      	add	r0, sp, #24
   b439c:	f003 fd64 	bl	b7e68 <_ZN6StringD1Ev>
   b43a0:	e7a4      	b.n	b42ec <_Z15reportingThreadv+0x7c>
   b43a2:	bf00      	nop
   b43a4:	2003e04c 	.word	0x2003e04c
   b43a8:	000b985d 	.word	0x000b985d
   b43ac:	2003e7c0 	.word	0x2003e7c0
   b43b0:	2003e078 	.word	0x2003e078
   b43b4:	2003e5f8 	.word	0x2003e5f8
   b43b8:	000b986e 	.word	0x000b986e
   b43bc:	000b99dc 	.word	0x000b99dc
   b43c0:	000b9878 	.word	0x000b9878
   b43c4:	000b98a2 	.word	0x000b98a2
   b43c8:	000b98c1 	.word	0x000b98c1
   b43cc:	000b98cb 	.word	0x000b98cb
   b43d0:	2003e0bc 	.word	0x2003e0bc
   b43d4:	000b98ce 	.word	0x000b98ce
   b43d8:	2003e080 	.word	0x2003e080
   b43dc:	2003d9d4 	.word	0x2003d9d4
   b43e0:	2003dab4 	.word	0x2003dab4
   b43e4:	000b98d3 	.word	0x000b98d3
   b43e8:	000b98df 	.word	0x000b98df
   b43ec:	000b98dc 	.word	0x000b98dc
   b43f0:	2003e07c 	.word	0x2003e07c
   b43f4:	2003e0cc 	.word	0x2003e0cc

000b43f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b43f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b43fc:	460c      	mov	r4, r1
   b43fe:	b094      	sub	sp, #80	; 0x50
  switch(count){
   b4400:	4ea9      	ldr	r6, [pc, #676]	; (b46a8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4402:	4605      	mov	r5, r0
  Serial.println(len);
   b4404:	f004 fb00 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4408:	220a      	movs	r2, #10
   b440a:	4621      	mov	r1, r4
   b440c:	f7ff fec5 	bl	b419a <_ZN5Print7printlnIjLi0EEEjT_i.isra.0>
  inputBuffer = "";
   b4410:	49a6      	ldr	r1, [pc, #664]	; (b46ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b4>)
   b4412:	48a7      	ldr	r0, [pc, #668]	; (b46b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b4414:	f003 fda1 	bl	b7f5a <_ZN6StringaSEPKc>
  switch(count){
   b4418:	6833      	ldr	r3, [r6, #0]
   b441a:	2b07      	cmp	r3, #7
   b441c:	f200 80c9 	bhi.w	b45b2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ba>
   b4420:	e8df f013 	tbh	[pc, r3, lsl #1]
   b4424:	0097010f 	.word	0x0097010f
   b4428:	006c007e 	.word	0x006c007e
   b442c:	00380052 	.word	0x00380052
   b4430:	0008001b 	.word	0x0008001b
   b4434:	442c      	add	r4, r5
   b4436:	1e6f      	subs	r7, r5, #1
	String & operator += (char c)			{concat(c); return (*this);}
   b4438:	4d9d      	ldr	r5, [pc, #628]	; (b46b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b443a:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b443c:	42a7      	cmp	r7, r4
   b443e:	f000 8250 	beq.w	b48e2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4ea>
        Serial.println(data[i]);
   b4442:	f004 fae1 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4446:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b444a:	220a      	movs	r2, #10
   b444c:	f7ff fe96 	bl	b417c <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   b4450:	7839      	ldrb	r1, [r7, #0]
   b4452:	4628      	mov	r0, r5
   b4454:	f003 fdc1 	bl	b7fda <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   b4458:	e7f0      	b.n	b443c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
   b445a:	442c      	add	r4, r5
   b445c:	1e6f      	subs	r7, r5, #1
   b445e:	f8df 8250 	ldr.w	r8, [pc, #592]	; b46b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>
   b4462:	4d94      	ldr	r5, [pc, #592]	; (b46b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2bc>)
   b4464:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4466:	42a7      	cmp	r7, r4
   b4468:	f000 8218 	beq.w	b489c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4a4>
        Serial.println(data[i]);
   b446c:	f004 facc 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4470:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4474:	220a      	movs	r2, #10
   b4476:	f7ff fe81 	bl	b417c <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   b447a:	7839      	ldrb	r1, [r7, #0]
   b447c:	488c      	ldr	r0, [pc, #560]	; (b46b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b447e:	f003 fdac 	bl	b7fda <_ZN6String6concatEc>
        reportingInterval = atoi(inputBuffer) * 1000;
   b4482:	f8d8 0000 	ldr.w	r0, [r8]
   b4486:	f005 f87d 	bl	b9584 <atoi>
   b448a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b448e:	4358      	muls	r0, r3
   b4490:	6028      	str	r0, [r5, #0]
      for(int i = 0; i < len - 1; i++){
   b4492:	e7e8      	b.n	b4466 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6e>
   b4494:	442c      	add	r4, r5
   b4496:	1e6f      	subs	r7, r5, #1
   b4498:	f8df 8214 	ldr.w	r8, [pc, #532]	; b46b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>
        recordingInterval = atoi(inputBuffer);
   b449c:	4d86      	ldr	r5, [pc, #536]	; (b46b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c0>)
   b449e:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b44a0:	42a7      	cmp	r7, r4
   b44a2:	f000 81be 	beq.w	b4822 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x42a>
        Serial.println(data[i]);
   b44a6:	f004 faaf 	bl	b8a08 <_Z16_fetch_usbserialv>
   b44aa:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b44ae:	220a      	movs	r2, #10
   b44b0:	f7ff fe64 	bl	b417c <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   b44b4:	7839      	ldrb	r1, [r7, #0]
   b44b6:	487e      	ldr	r0, [pc, #504]	; (b46b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b44b8:	f003 fd8f 	bl	b7fda <_ZN6String6concatEc>
        recordingInterval = atoi(inputBuffer);
   b44bc:	f8d8 0000 	ldr.w	r0, [r8]
   b44c0:	f005 f860 	bl	b9584 <atoi>
   b44c4:	6028      	str	r0, [r5, #0]
      for(int i = 0; i < len - 1; i++){
   b44c6:	e7eb      	b.n	b44a0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa8>
   b44c8:	442c      	add	r4, r5
   b44ca:	1e6f      	subs	r7, r5, #1
   b44cc:	f8df 81e0 	ldr.w	r8, [pc, #480]	; b46b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>
   b44d0:	4d7a      	ldr	r5, [pc, #488]	; (b46bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c4>)
   b44d2:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b44d4:	42a7      	cmp	r7, r4
   b44d6:	f000 8165 	beq.w	b47a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3ac>
        Serial.println(data[i]);
   b44da:	f004 fa95 	bl	b8a08 <_Z16_fetch_usbserialv>
   b44de:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b44e2:	220a      	movs	r2, #10
   b44e4:	f7ff fe4a 	bl	b417c <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   b44e8:	7839      	ldrb	r1, [r7, #0]
   b44ea:	4871      	ldr	r0, [pc, #452]	; (b46b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b44ec:	f003 fd75 	bl	b7fda <_ZN6String6concatEc>
        dsid = atoi(inputBuffer);
   b44f0:	f8d8 0000 	ldr.w	r0, [r8]
   b44f4:	f005 f846 	bl	b9584 <atoi>
   b44f8:	6028      	str	r0, [r5, #0]
      for(int i = 0; i < len - 1; i++){
   b44fa:	e7eb      	b.n	b44d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xdc>
   b44fc:	442c      	add	r4, r5
   b44fe:	1e6f      	subs	r7, r5, #1
   b4500:	4d6b      	ldr	r5, [pc, #428]	; (b46b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b4502:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4504:	42bc      	cmp	r4, r7
   b4506:	d06e      	beq.n	b45e6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ee>
        Serial.println(data[i]);
   b4508:	f004 fa7e 	bl	b8a08 <_Z16_fetch_usbserialv>
   b450c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4510:	220a      	movs	r2, #10
   b4512:	f7ff fe33 	bl	b417c <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   b4516:	7839      	ldrb	r1, [r7, #0]
   b4518:	4628      	mov	r0, r5
   b451a:	f003 fd5e 	bl	b7fda <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   b451e:	e7f1      	b.n	b4504 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>
   b4520:	442c      	add	r4, r5
   b4522:	1e6f      	subs	r7, r5, #1
        password = inputBuffer;
   b4524:	f8df 81c8 	ldr.w	r8, [pc, #456]	; b46f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f8>
   b4528:	4d61      	ldr	r5, [pc, #388]	; (b46b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b452a:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b452c:	42a7      	cmp	r7, r4
   b452e:	f000 80e5 	beq.w	b46fc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x304>
        Serial.println(data[i]);
   b4532:	f004 fa69 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4536:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b453a:	220a      	movs	r2, #10
   b453c:	f7ff fe1e 	bl	b417c <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   b4540:	7839      	ldrb	r1, [r7, #0]
   b4542:	4628      	mov	r0, r5
   b4544:	f003 fd49 	bl	b7fda <_ZN6String6concatEc>
        password = inputBuffer;
   b4548:	4629      	mov	r1, r5
   b454a:	4640      	mov	r0, r8
   b454c:	f003 fceb 	bl	b7f26 <_ZN6StringaSERKS_>
      for(int i = 0; i < len - 1; i++){
   b4550:	e7ec      	b.n	b452c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>
   b4552:	1e6f      	subs	r7, r5, #1
        ssid = inputBuffer;
   b4554:	f8df 8178 	ldr.w	r8, [pc, #376]	; b46d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d8>
   b4558:	4425      	add	r5, r4
   b455a:	4c55      	ldr	r4, [pc, #340]	; (b46b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b455c:	3d02      	subs	r5, #2
      for(int i = 0; i < len - 1; i++){
   b455e:	42bd      	cmp	r5, r7
   b4560:	d02d      	beq.n	b45be <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c6>
   b4562:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4566:	4620      	mov	r0, r4
   b4568:	f003 fd37 	bl	b7fda <_ZN6String6concatEc>
        ssid = inputBuffer;
   b456c:	4621      	mov	r1, r4
   b456e:	4640      	mov	r0, r8
   b4570:	f003 fcd9 	bl	b7f26 <_ZN6StringaSERKS_>
        Serial.println(data[i]);
   b4574:	f004 fa48 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4578:	7839      	ldrb	r1, [r7, #0]
   b457a:	220a      	movs	r2, #10
   b457c:	f7ff fdfe 	bl	b417c <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
      for(int i = 0; i < len - 1; i++){
   b4580:	e7ed      	b.n	b455e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x166>
      networkBuffer = networks[networkCount - 1].ssid;
   b4582:	4b4f      	ldr	r3, [pc, #316]	; (b46c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4584:	484f      	ldr	r0, [pc, #316]	; (b46c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
   b4586:	2238      	movs	r2, #56	; 0x38
   b4588:	fb02 3101 	mla	r1, r2, r1, r3
   b458c:	3104      	adds	r1, #4
   b458e:	f003 fce4 	bl	b7f5a <_ZN6StringaSEPKc>
      Serial.println(networkBuffer.length());
   b4592:	f004 fa39 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4596:	68a1      	ldr	r1, [r4, #8]
   b4598:	220a      	movs	r2, #10
   b459a:	f7ff fdfe 	bl	b419a <_ZN5Print7printlnIjLi0EEEjT_i.isra.0>
      txCharacteristic.setValue(networkBuffer);
   b459e:	4949      	ldr	r1, [pc, #292]	; (b46c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
   b45a0:	4849      	ldr	r0, [pc, #292]	; (b46c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d0>)
   b45a2:	2200      	movs	r2, #0
   b45a4:	f002 fa2e 	bl	b6a04 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
      txCharacteristic.setValue("]\nEnter network SSID (blank to skip, 'clear' to reset credentials): ");
   b45a8:	4948      	ldr	r1, [pc, #288]	; (b46cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d4>)
   b45aa:	2200      	movs	r2, #0
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   b45ac:	4846      	ldr	r0, [pc, #280]	; (b46c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d0>)
   b45ae:	f002 fa2e 	bl	b6a0e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
  count++;
   b45b2:	6833      	ldr	r3, [r6, #0]
   b45b4:	3301      	adds	r3, #1
   b45b6:	6033      	str	r3, [r6, #0]
}
   b45b8:	b014      	add	sp, #80	; 0x50
   b45ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	const char * c_str() const { return buffer; }
   b45be:	4d44      	ldr	r5, [pc, #272]	; (b46d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d8>)
      Serial.println(ssid);
   b45c0:	f004 fa22 	bl	b8a08 <_Z16_fetch_usbserialv>
   b45c4:	6829      	ldr	r1, [r5, #0]
   b45c6:	f003 fb48 	bl	b7c5a <_ZN5Print7printlnEPKc>
      Serial.println(ssid.length());
   b45ca:	f004 fa1d 	bl	b8a08 <_Z16_fetch_usbserialv>
   b45ce:	68a9      	ldr	r1, [r5, #8]
   b45d0:	220a      	movs	r2, #10
   b45d2:	f7ff fde2 	bl	b419a <_ZN5Print7printlnIjLi0EEEjT_i.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b45d6:	4935      	ldr	r1, [pc, #212]	; (b46ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b4>)
   b45d8:	4628      	mov	r0, r5
   b45da:	f003 fd2c 	bl	b8036 <_ZNK6String6equalsEPKc>
      if(ssid == ""){
   b45de:	4604      	mov	r4, r0
   b45e0:	b300      	cbz	r0, b4624 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x22c>
        count = 3;
   b45e2:	2303      	movs	r3, #3
   b45e4:	6033      	str	r3, [r6, #0]
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b45e6:	4c35      	ldr	r4, [pc, #212]	; (b46bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c4>)
        EEPROM.get(0, dsid);
   b45e8:	f004 fbee 	bl	b8dc8 <_Z21__fetch_global_EEPROMv>
   b45ec:	4621      	mov	r1, r4
   b45ee:	2204      	movs	r2, #4
   b45f0:	2000      	movs	r0, #0
   b45f2:	f001 fb8d 	bl	b5d10 <HAL_EEPROM_Get>
        txCharacteristic.setValue("\nCurrent DSID is [");
   b45f6:	4937      	ldr	r1, [pc, #220]	; (b46d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2dc>)
   b45f8:	4833      	ldr	r0, [pc, #204]	; (b46c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d0>)
   b45fa:	2200      	movs	r2, #0
   b45fc:	f002 fa07 	bl	b6a0e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        if(dsid != -1){
   b4600:	6821      	ldr	r1, [r4, #0]
   b4602:	1c4c      	adds	r4, r1, #1
   b4604:	d00b      	beq.n	b461e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x226>
          txCharacteristic.setValue(String(dsid));
   b4606:	220a      	movs	r2, #10
   b4608:	a801      	add	r0, sp, #4
   b460a:	f003 fcb8 	bl	b7f7e <_ZN6StringC1Eih>
   b460e:	482e      	ldr	r0, [pc, #184]	; (b46c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d0>)
   b4610:	2200      	movs	r2, #0
   b4612:	a901      	add	r1, sp, #4
   b4614:	f002 f9f6 	bl	b6a04 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b4618:	a801      	add	r0, sp, #4
   b461a:	f003 fc25 	bl	b7e68 <_ZN6StringD1Ev>
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   b461e:	492e      	ldr	r1, [pc, #184]	; (b46d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e0>)
   b4620:	2200      	movs	r2, #0
   b4622:	e7c3      	b.n	b45ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
   b4624:	492d      	ldr	r1, [pc, #180]	; (b46dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   b4626:	4628      	mov	r0, r5
   b4628:	f003 fd05 	bl	b8036 <_ZNK6String6equalsEPKc>
      }else if(ssid == "clear"){
   b462c:	4602      	mov	r2, r0
   b462e:	2800      	cmp	r0, #0
   b4630:	d038      	beq.n	b46a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ac>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   b4632:	482b      	ldr	r0, [pc, #172]	; (b46e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e8>)
   b4634:	4623      	mov	r3, r4
   b4636:	6840      	ldr	r0, [r0, #4]
   b4638:	4622      	mov	r2, r4
   b463a:	4621      	mov	r1, r4
   b463c:	f001 fe0e 	bl	b625c <network_clear_credentials>
        count = 0;
   b4640:	6034      	str	r4, [r6, #0]
      txCharacteristic.setValue("\nCredentials are currently stored for:\n[");
   b4642:	4928      	ldr	r1, [pc, #160]	; (b46e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ec>)
   b4644:	4820      	ldr	r0, [pc, #128]	; (b46c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d0>)
      networkCount = WiFi.getCredentials(networks, 5);
   b4646:	f8df a0ac 	ldr.w	sl, [pc, #172]	; b46f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2fc>
   b464a:	4d27      	ldr	r5, [pc, #156]	; (b46e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f0>)
   b464c:	4c1d      	ldr	r4, [pc, #116]	; (b46c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
        txCharacteristic.setValue(networkBuffer);
   b464e:	f8df 8078 	ldr.w	r8, [pc, #120]	; b46c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d0>
        txCharacteristic.setValue(",\n");
   b4652:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b46f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x300>
      txCharacteristic.setValue("\nCredentials are currently stored for:\n[");
   b4656:	2200      	movs	r2, #0
   b4658:	f002 f9d9 	bl	b6a0e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      networkCount = WiFi.getCredentials(networks, 5);
   b465c:	4918      	ldr	r1, [pc, #96]	; (b46c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b465e:	4820      	ldr	r0, [pc, #128]	; (b46e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e8>)
   b4660:	2205      	movs	r2, #5
   b4662:	f004 fa31 	bl	b8ac8 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>
      for(int i = 0; i < networkCount - 1; i++){
   b4666:	2700      	movs	r7, #0
      networkCount = WiFi.getCredentials(networks, 5);
   b4668:	f8ca 0000 	str.w	r0, [sl]
      for(int i = 0; i < networkCount - 1; i++){
   b466c:	f8da 1000 	ldr.w	r1, [sl]
   b4670:	3901      	subs	r1, #1
   b4672:	42b9      	cmp	r1, r7
   b4674:	dd85      	ble.n	b4582 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18a>
        networkBuffer = networks[i].ssid;
   b4676:	4629      	mov	r1, r5
   b4678:	4620      	mov	r0, r4
   b467a:	f003 fc6e 	bl	b7f5a <_ZN6StringaSEPKc>
        Serial.println(networkBuffer.length());
   b467e:	f004 f9c3 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4682:	68a1      	ldr	r1, [r4, #8]
   b4684:	220a      	movs	r2, #10
   b4686:	f7ff fd88 	bl	b419a <_ZN5Print7printlnIjLi0EEEjT_i.isra.0>
        txCharacteristic.setValue(networkBuffer);
   b468a:	2200      	movs	r2, #0
   b468c:	4621      	mov	r1, r4
   b468e:	4640      	mov	r0, r8
   b4690:	f002 f9b8 	bl	b6a04 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        txCharacteristic.setValue(",\n");
   b4694:	2200      	movs	r2, #0
   b4696:	4649      	mov	r1, r9
   b4698:	4640      	mov	r0, r8
   b469a:	f002 f9b8 	bl	b6a0e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      for(int i = 0; i < networkCount - 1; i++){
   b469e:	3701      	adds	r7, #1
   b46a0:	3538      	adds	r5, #56	; 0x38
   b46a2:	e7e3      	b.n	b466c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x274>
        txCharacteristic.setValue("\nEnter network password: ");
   b46a4:	4911      	ldr	r1, [pc, #68]	; (b46ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f4>)
   b46a6:	e781      	b.n	b45ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
   b46a8:	2003daa8 	.word	0x2003daa8
   b46ac:	000b99dc 	.word	0x000b99dc
   b46b0:	2003ded0 	.word	0x2003ded0
   b46b4:	2003e07c 	.word	0x2003e07c
   b46b8:	2003e078 	.word	0x2003e078
   b46bc:	2003daac 	.word	0x2003daac
   b46c0:	2003df20 	.word	0x2003df20
   b46c4:	2003df0c 	.word	0x2003df0c
   b46c8:	2003e5fc 	.word	0x2003e5fc
   b46cc:	000b9912 	.word	0x000b9912
   b46d0:	2003e0e8 	.word	0x2003e0e8
   b46d4:	000b9957 	.word	0x000b9957
   b46d8:	000b996a 	.word	0x000b996a
   b46dc:	000b9990 	.word	0x000b9990
   b46e0:	2003e7c0 	.word	0x2003e7c0
   b46e4:	000b98e6 	.word	0x000b98e6
   b46e8:	2003df24 	.word	0x2003df24
   b46ec:	000b9996 	.word	0x000b9996
   b46f0:	2003e03c 	.word	0x2003e03c
   b46f4:	2003df1c 	.word	0x2003df1c
   b46f8:	000b990f 	.word	0x000b990f
	const char * c_str() const { return buffer; }
   b46fc:	4ca1      	ldr	r4, [pc, #644]	; (b4984 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58c>)
      Serial.println(password);
   b46fe:	f004 f983 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4702:	6821      	ldr	r1, [r4, #0]
   b4704:	f003 faa9 	bl	b7c5a <_ZN5Print7printlnEPKc>
      Serial.println(password.length());
   b4708:	f004 f97e 	bl	b8a08 <_Z16_fetch_usbserialv>
   b470c:	68a1      	ldr	r1, [r4, #8]
   b470e:	220a      	movs	r2, #10
   b4710:	f7ff fd43 	bl	b419a <_ZN5Print7printlnIjLi0EEEjT_i.isra.0>
   b4714:	4b9c      	ldr	r3, [pc, #624]	; (b4988 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x590>)
   b4716:	6825      	ldr	r5, [r4, #0]
   b4718:	f8d3 8000 	ldr.w	r8, [r3]
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b471c:	f1b8 0f00 	cmp.w	r8, #0
   b4720:	d03c      	beq.n	b479c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a4>
   b4722:	4640      	mov	r0, r8
   b4724:	f004 ffc0 	bl	b96a8 <strlen>
   b4728:	4607      	mov	r7, r0
   b472a:	2d00      	cmp	r5, #0
   b472c:	d038      	beq.n	b47a0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a8>
   b472e:	4628      	mov	r0, r5
   b4730:	f004 ffba 	bl	b96a8 <strlen>
   b4734:	4604      	mov	r4, r0
        memset(&creds, 0, sizeof(creds));
   b4736:	2238      	movs	r2, #56	; 0x38
   b4738:	2100      	movs	r1, #0
   b473a:	a806      	add	r0, sp, #24
   b473c:	f004 ff6c 	bl	b9618 <memset>
        creds.size = sizeof(creds);
   b4740:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b4742:	e9cd 3801 	strd	r3, r8, [sp, #4]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4746:	4891      	ldr	r0, [pc, #580]	; (b498c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x594>)
        creds.password_len = passwordLen;
   b4748:	9405      	str	r4, [sp, #20]
        creds.security = WLanSecurityType(security);
   b474a:	2303      	movs	r3, #3
   b474c:	f88d 3018 	strb.w	r3, [sp, #24]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4750:	2300      	movs	r3, #0
   b4752:	aa01      	add	r2, sp, #4
   b4754:	4619      	mov	r1, r3
   b4756:	6840      	ldr	r0, [r0, #4]
        creds.password = password;
   b4758:	e9cd 7503 	strd	r7, r5, [sp, #12]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b475c:	f001 fd76 	bl	b624c <network_set_credentials>
      Serial.println("\n\nCredentials set with ssid: " + ssid + "\npassword: " + password + "\n\n");
   b4760:	f004 f952 	bl	b8a08 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4764:	498a      	ldr	r1, [pc, #552]	; (b4990 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x598>)
   b4766:	4604      	mov	r4, r0
   b4768:	a801      	add	r0, sp, #4
   b476a:	f003 fbc8 	bl	b7efe <_ZN6StringC1EPK19__FlashStringHelper>
   b476e:	4986      	ldr	r1, [pc, #536]	; (b4988 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x590>)
   b4770:	a801      	add	r0, sp, #4
   b4772:	f003 fc3f 	bl	b7ff4 <_ZplRK15StringSumHelperRK6String>
   b4776:	4987      	ldr	r1, [pc, #540]	; (b4994 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x59c>)
   b4778:	f003 fc48 	bl	b800c <_ZplRK15StringSumHelperPKc>
   b477c:	4981      	ldr	r1, [pc, #516]	; (b4984 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58c>)
   b477e:	f003 fc39 	bl	b7ff4 <_ZplRK15StringSumHelperRK6String>
   b4782:	4985      	ldr	r1, [pc, #532]	; (b4998 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a0>)
   b4784:	f003 fc42 	bl	b800c <_ZplRK15StringSumHelperPKc>
   b4788:	6801      	ldr	r1, [r0, #0]
   b478a:	4620      	mov	r0, r4
   b478c:	f003 fa65 	bl	b7c5a <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4790:	a801      	add	r0, sp, #4
   b4792:	f003 fb69 	bl	b7e68 <_ZN6StringD1Ev>
      txCharacteristic.setValue("\nEnter 'test' to test credentials (blank to skip): ");
   b4796:	4981      	ldr	r1, [pc, #516]	; (b499c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a4>)
   b4798:	2200      	movs	r2, #0
   b479a:	e707      	b.n	b45ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b479c:	4647      	mov	r7, r8
   b479e:	e7c4      	b.n	b472a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x332>
   b47a0:	462c      	mov	r4, r5
   b47a2:	e7c8      	b.n	b4736 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x33e>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b47a4:	497e      	ldr	r1, [pc, #504]	; (b49a0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a8>)
   b47a6:	487f      	ldr	r0, [pc, #508]	; (b49a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ac>)
   b47a8:	f003 fc45 	bl	b8036 <_ZNK6String6equalsEPKc>
      if(inputBuffer != ""){
   b47ac:	4604      	mov	r4, r0
   b47ae:	b958      	cbnz	r0, b47c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3d0>
        EEPROM.put(0, dsid);
   b47b0:	f004 fb0a 	bl	b8dc8 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b47b4:	497c      	ldr	r1, [pc, #496]	; (b49a8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b0>)
   b47b6:	2204      	movs	r2, #4
   b47b8:	4620      	mov	r0, r4
   b47ba:	f001 fab1 	bl	b5d20 <HAL_EEPROM_Put>
        Serial.println("dsid entered");
   b47be:	f004 f923 	bl	b8a08 <_Z16_fetch_usbserialv>
   b47c2:	497a      	ldr	r1, [pc, #488]	; (b49ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b4>)
   b47c4:	f003 fa49 	bl	b7c5a <_ZN5Print7printlnEPKc>
      EEPROM.get(0, dsid);
   b47c8:	f004 fafe 	bl	b8dc8 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b47cc:	2204      	movs	r2, #4
   b47ce:	4976      	ldr	r1, [pc, #472]	; (b49a8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b0>)
   b47d0:	4c77      	ldr	r4, [pc, #476]	; (b49b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b8>)
   b47d2:	2000      	movs	r0, #0
   b47d4:	f001 fa9c 	bl	b5d10 <HAL_EEPROM_Get>
      Serial.println("dsid: " + dsid);
   b47d8:	f004 f916 	bl	b8a08 <_Z16_fetch_usbserialv>
   b47dc:	682b      	ldr	r3, [r5, #0]
   b47de:	4975      	ldr	r1, [pc, #468]	; (b49b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5bc>)
   b47e0:	4419      	add	r1, r3
   b47e2:	f003 fa3a 	bl	b7c5a <_ZN5Print7printlnEPKc>
      EEPROM.get(100, recordingInterval);
   b47e6:	f004 faef 	bl	b8dc8 <_Z21__fetch_global_EEPROMv>
   b47ea:	2204      	movs	r2, #4
   b47ec:	4621      	mov	r1, r4
   b47ee:	2064      	movs	r0, #100	; 0x64
   b47f0:	f001 fa8e 	bl	b5d10 <HAL_EEPROM_Get>
      txCharacteristic.setValue("\nCurrent value for data collection interval is [");
   b47f4:	4970      	ldr	r1, [pc, #448]	; (b49b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c0>)
   b47f6:	4871      	ldr	r0, [pc, #452]	; (b49bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c4>)
   b47f8:	2200      	movs	r2, #0
   b47fa:	f002 f908 	bl	b6a0e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(recordingInterval != -1){
   b47fe:	6821      	ldr	r1, [r4, #0]
   b4800:	1c48      	adds	r0, r1, #1
   b4802:	d00b      	beq.n	b481c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x424>
        txCharacteristic.setValue(String(recordingInterval));
   b4804:	220a      	movs	r2, #10
   b4806:	a801      	add	r0, sp, #4
   b4808:	f003 fbb9 	bl	b7f7e <_ZN6StringC1Eih>
   b480c:	486b      	ldr	r0, [pc, #428]	; (b49bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c4>)
   b480e:	2200      	movs	r2, #0
   b4810:	a901      	add	r1, sp, #4
   b4812:	f002 f8f7 	bl	b6a04 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b4816:	a801      	add	r0, sp, #4
   b4818:	f003 fb26 	bl	b7e68 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between data collection as an integer in milliseconds (blank to skip): ");
   b481c:	4968      	ldr	r1, [pc, #416]	; (b49c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c8>)
   b481e:	2200      	movs	r2, #0
   b4820:	e6c4      	b.n	b45ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4822:	495f      	ldr	r1, [pc, #380]	; (b49a0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a8>)
   b4824:	485f      	ldr	r0, [pc, #380]	; (b49a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ac>)
   b4826:	f003 fc06 	bl	b8036 <_ZNK6String6equalsEPKc>
      if(inputBuffer == ""){
   b482a:	b130      	cbz	r0, b483a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x442>
        EEPROM.get(100, recordingInterval);
   b482c:	f004 facc 	bl	b8dc8 <_Z21__fetch_global_EEPROMv>
   b4830:	495f      	ldr	r1, [pc, #380]	; (b49b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b8>)
   b4832:	2204      	movs	r2, #4
   b4834:	2064      	movs	r0, #100	; 0x64
   b4836:	f001 fa6b 	bl	b5d10 <HAL_EEPROM_Get>
      EEPROM.put(100, recordingInterval);
   b483a:	f004 fac5 	bl	b8dc8 <_Z21__fetch_global_EEPROMv>
   b483e:	4c61      	ldr	r4, [pc, #388]	; (b49c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5cc>)
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b4840:	495b      	ldr	r1, [pc, #364]	; (b49b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b8>)
   b4842:	2204      	movs	r2, #4
   b4844:	2064      	movs	r0, #100	; 0x64
   b4846:	f001 fa6b 	bl	b5d20 <HAL_EEPROM_Put>
      EEPROM.get(100, recordingInterval);
   b484a:	f004 fabd 	bl	b8dc8 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b484e:	4958      	ldr	r1, [pc, #352]	; (b49b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b8>)
   b4850:	2204      	movs	r2, #4
   b4852:	2064      	movs	r0, #100	; 0x64
   b4854:	f001 fa5c 	bl	b5d10 <HAL_EEPROM_Get>
      EEPROM.get(200, reportingInterval);
   b4858:	f004 fab6 	bl	b8dc8 <_Z21__fetch_global_EEPROMv>
   b485c:	2204      	movs	r2, #4
   b485e:	4621      	mov	r1, r4
   b4860:	20c8      	movs	r0, #200	; 0xc8
   b4862:	f001 fa55 	bl	b5d10 <HAL_EEPROM_Get>
      txCharacteristic.setValue("\nCurrent value for WiFi connection interval is [");
   b4866:	2200      	movs	r2, #0
   b4868:	4957      	ldr	r1, [pc, #348]	; (b49c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d0>)
   b486a:	4854      	ldr	r0, [pc, #336]	; (b49bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c4>)
   b486c:	f002 f8cf 	bl	b6a0e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(reportingInterval != -1){
   b4870:	6823      	ldr	r3, [r4, #0]
   b4872:	1c5a      	adds	r2, r3, #1
   b4874:	d00f      	beq.n	b4896 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x49e>
        txCharacteristic.setValue(String(reportingInterval / 1000));
   b4876:	220a      	movs	r2, #10
   b4878:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b487c:	a801      	add	r0, sp, #4
   b487e:	fb93 f1f1 	sdiv	r1, r3, r1
   b4882:	f003 fb7c 	bl	b7f7e <_ZN6StringC1Eih>
   b4886:	484d      	ldr	r0, [pc, #308]	; (b49bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c4>)
   b4888:	2200      	movs	r2, #0
   b488a:	a901      	add	r1, sp, #4
   b488c:	f002 f8ba 	bl	b6a04 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b4890:	a801      	add	r0, sp, #4
   b4892:	f003 fae9 	bl	b7e68 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between WiFi connections as an integer in seconds (blank to skip): ");
   b4896:	494d      	ldr	r1, [pc, #308]	; (b49cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d4>)
   b4898:	2200      	movs	r2, #0
   b489a:	e687      	b.n	b45ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
   b489c:	4940      	ldr	r1, [pc, #256]	; (b49a0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a8>)
   b489e:	4841      	ldr	r0, [pc, #260]	; (b49a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ac>)
   b48a0:	f003 fbc9 	bl	b8036 <_ZNK6String6equalsEPKc>
      if(inputBuffer == ""){
   b48a4:	b130      	cbz	r0, b48b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4bc>
        EEPROM.get(200, reportingInterval);
   b48a6:	f004 fa8f 	bl	b8dc8 <_Z21__fetch_global_EEPROMv>
   b48aa:	4946      	ldr	r1, [pc, #280]	; (b49c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5cc>)
   b48ac:	2204      	movs	r2, #4
   b48ae:	20c8      	movs	r0, #200	; 0xc8
   b48b0:	f001 fa2e 	bl	b5d10 <HAL_EEPROM_Get>
      EEPROM.put(200, reportingInterval);
   b48b4:	f004 fa88 	bl	b8dc8 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b48b8:	4942      	ldr	r1, [pc, #264]	; (b49c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5cc>)
   b48ba:	2204      	movs	r2, #4
   b48bc:	20c8      	movs	r0, #200	; 0xc8
   b48be:	f001 fa2f 	bl	b5d20 <HAL_EEPROM_Put>
      EEPROM.get(200, reportingInterval);
   b48c2:	f004 fa81 	bl	b8dc8 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b48c6:	493f      	ldr	r1, [pc, #252]	; (b49c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5cc>)
   b48c8:	2204      	movs	r2, #4
   b48ca:	20c8      	movs	r0, #200	; 0xc8
   b48cc:	f001 fa20 	bl	b5d10 <HAL_EEPROM_Get>
      Serial.println(reportingInterval);
   b48d0:	f004 f89a 	bl	b8a08 <_Z16_fetch_usbserialv>
   b48d4:	6829      	ldr	r1, [r5, #0]
   b48d6:	220a      	movs	r2, #10
   b48d8:	f7ff fc6f 	bl	b41ba <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
      txCharacteristic.setValue("\nEnter 'ota' to wait for OTA update (blank to skip): ");
   b48dc:	493c      	ldr	r1, [pc, #240]	; (b49d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d8>)
   b48de:	2200      	movs	r2, #0
   b48e0:	e664      	b.n	b45ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
   b48e2:	493c      	ldr	r1, [pc, #240]	; (b49d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5dc>)
   b48e4:	482f      	ldr	r0, [pc, #188]	; (b49a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ac>)
   b48e6:	4c3c      	ldr	r4, [pc, #240]	; (b49d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e0>)
   b48e8:	f003 fba5 	bl	b8036 <_ZNK6String6equalsEPKc>
      if(inputBuffer == "ota"){
   b48ec:	b300      	cbz	r0, b4930 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x538>

private:
    SystemSleepResult systemSleepResult_;

    static inline uint8_t get_flag(system_flag_t flag) {
        uint8_t value = 0;
   b48ee:	2200      	movs	r2, #0
        system_get_flag(flag, &value, nullptr);
   b48f0:	a901      	add	r1, sp, #4
   b48f2:	2001      	movs	r0, #1
        uint8_t value = 0;
   b48f4:	f88d 2004 	strb.w	r2, [sp, #4]
        system_get_flag(flag, &value, nullptr);
   b48f8:	f001 fc0a 	bl	b6110 <system_get_flag>
        ota = true;
   b48fc:	2301      	movs	r3, #1
   b48fe:	7023      	strb	r3, [r4, #0]
        uint8_t value = 0;
   b4900:	2400      	movs	r4, #0
        system_get_flag(flag, &value, nullptr);
   b4902:	4622      	mov	r2, r4
   b4904:	a901      	add	r1, sp, #4
   b4906:	2001      	movs	r0, #1
        uint8_t value = 0;
   b4908:	f88d 4004 	strb.w	r4, [sp, #4]
        system_get_flag(flag, &value, nullptr);
   b490c:	f001 fc00 	bl	b6110 <system_get_flag>
        WiFi.on();
   b4910:	481e      	ldr	r0, [pc, #120]	; (b498c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x594>)
   b4912:	f7ff fc97 	bl	b4244 <_ZN5spark9WiFiClass2onEv>
        WiFi.connect();
   b4916:	4621      	mov	r1, r4
   b4918:	481c      	ldr	r0, [pc, #112]	; (b498c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x594>)
        while(!WiFi.ready()) {
   b491a:	4c1c      	ldr	r4, [pc, #112]	; (b498c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x594>)
        WiFi.connect();
   b491c:	f7ff fc9e 	bl	b425c <_ZN5spark9WiFiClass7connectEj>
        while(!WiFi.ready()) {
   b4920:	4620      	mov	r0, r4
   b4922:	f7ff fca0 	bl	b4266 <_ZN5spark9WiFiClass5readyEv>
   b4926:	b948      	cbnz	r0, b493c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x544>
          delay(100);
   b4928:	2064      	movs	r0, #100	; 0x64
   b492a:	f001 fd0f 	bl	b634c <delay>
        while(!WiFi.ready()) {
   b492e:	e7f7      	b.n	b4920 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x528>
      if(ota) {
   b4930:	7823      	ldrb	r3, [r4, #0]
   b4932:	2b00      	cmp	r3, #0
   b4934:	d1e4      	bne.n	b4900 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x508>
      System.reset();
   b4936:	f003 fbf8 	bl	b812a <_ZN11SystemClass5resetEv>
   b493a:	e63a      	b.n	b45b2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ba>
        if(WiFi.ready() != true) {
   b493c:	4813      	ldr	r0, [pc, #76]	; (b498c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x594>)
   b493e:	f7ff fc92 	bl	b4266 <_ZN5spark9WiFiClass5readyEv>
   b4942:	b928      	cbnz	r0, b4950 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x558>
          Serial.println("WiFi failed to connect, skipping time synchronization");
   b4944:	f004 f860 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4948:	4924      	ldr	r1, [pc, #144]	; (b49dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e4>)
   b494a:	f003 f986 	bl	b7c5a <_ZN5Print7printlnEPKc>
   b494e:	e7f2      	b.n	b4936 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x53e>
          Serial.println("WiFi connected, awaiting update");
   b4950:	f004 f85a 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4954:	4922      	ldr	r1, [pc, #136]	; (b49e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e8>)
   b4956:	f003 f980 	bl	b7c5a <_ZN5Print7printlnEPKc>
          txCharacteristic.setValue("\nAwaiting OTA update");
   b495a:	4922      	ldr	r1, [pc, #136]	; (b49e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b495c:	4817      	ldr	r0, [pc, #92]	; (b49bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c4>)
   b495e:	2200      	movs	r2, #0
   b4960:	f002 f855 	bl	b6a0e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4964:	f001 fc0a 	bl	b617c <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4968:	f001 fc10 	bl	b618c <spark_cloud_flag_connected>
          while(!Particle.connected()) {
   b496c:	b130      	cbz	r0, b497c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x584>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b496e:	4c1e      	ldr	r4, [pc, #120]	; (b49e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f0>)
		return HAL_Timer_Get_Milli_Seconds();
   b4970:	f001 f9be 	bl	b5cf0 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b4974:	6020      	str	r0, [r4, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b4976:	f001 fbf9 	bl	b616c <spark_process>
   b497a:	e7f9      	b.n	b4970 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x578>
            delay(100);
   b497c:	2064      	movs	r0, #100	; 0x64
   b497e:	f001 fce5 	bl	b634c <delay>
          while(!Particle.connected()) {
   b4982:	e7f1      	b.n	b4968 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x570>
   b4984:	2003e03c 	.word	0x2003e03c
   b4988:	2003e0e8 	.word	0x2003e0e8
   b498c:	2003e7c0 	.word	0x2003e7c0
   b4990:	000b99b0 	.word	0x000b99b0
   b4994:	000b99ce 	.word	0x000b99ce
   b4998:	000b99da 	.word	0x000b99da
   b499c:	000b99dd 	.word	0x000b99dd
   b49a0:	000b99dc 	.word	0x000b99dc
   b49a4:	2003ded0 	.word	0x2003ded0
   b49a8:	2003daac 	.word	0x2003daac
   b49ac:	000b9a11 	.word	0x000b9a11
   b49b0:	2003e078 	.word	0x2003e078
   b49b4:	000b9a1e 	.word	0x000b9a1e
   b49b8:	000b9a25 	.word	0x000b9a25
   b49bc:	2003e5fc 	.word	0x2003e5fc
   b49c0:	000b9a56 	.word	0x000b9a56
   b49c4:	2003e07c 	.word	0x2003e07c
   b49c8:	000b9aab 	.word	0x000b9aab
   b49cc:	000b9adc 	.word	0x000b9adc
   b49d0:	000b9b2d 	.word	0x000b9b2d
   b49d4:	000b9b63 	.word	0x000b9b63
   b49d8:	2003e038 	.word	0x2003e038
   b49dc:	000b9b67 	.word	0x000b9b67
   b49e0:	000b9b9d 	.word	0x000b9b9d
   b49e4:	000b9bbd 	.word	0x000b9bbd
   b49e8:	2003e7d0 	.word	0x2003e7d0

000b49ec <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b49ec:	b510      	push	{r4, lr}
      if (_M_manager)
   b49ee:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b49f0:	4604      	mov	r4, r0
      if (_M_manager)
   b49f2:	b113      	cbz	r3, b49fa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b49f4:	2203      	movs	r2, #3
   b49f6:	4601      	mov	r1, r0
   b49f8:	4798      	blx	r3
    }
   b49fa:	4620      	mov	r0, r4
   b49fc:	bd10      	pop	{r4, pc}
	...

000b4a00 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b4a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4a04:	4607      	mov	r7, r0
   b4a06:	b085      	sub	sp, #20
   b4a08:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b4a0a:	2014      	movs	r0, #20
   b4a0c:	492f      	ldr	r1, [pc, #188]	; (b4acc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xcc>)
    Thread(const char *name, wiring_thread_fn_t function,
   b4a0e:	4616      	mov	r6, r2
   b4a10:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b4a12:	f004 fa34 	bl	b8e7e <_ZnwjRKSt9nothrow_t>
   b4a16:	4604      	mov	r4, r0
   b4a18:	b130      	cbz	r0, b4a28 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x28>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   b4a1a:	2000      	movs	r0, #0
            exited(false) {
   b4a1c:	e9c4 0000 	strd	r0, r0, [r4]
   b4a20:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b4a24:	7420      	strb	r0, [r4, #16]
   b4a26:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b4a28:	603c      	str	r4, [r7, #0]
        if (!d_) {
   b4a2a:	2c00      	cmp	r4, #0
   b4a2c:	d038      	beq.n	b4aa0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b4a2e:	4927      	ldr	r1, [pc, #156]	; (b4acc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xcc>)
   b4a30:	2010      	movs	r0, #16
   b4a32:	f004 fa24 	bl	b8e7e <_ZnwjRKSt9nothrow_t>
   b4a36:	4605      	mov	r5, r0
   b4a38:	b1a0      	cbz	r0, b4a64 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x64>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4a3a:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4a3e:	ab02      	add	r3, sp, #8
   b4a40:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4a44:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4a48:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4a4c:	e893 0003 	ldmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4a50:	2200      	movs	r2, #0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4a52:	68b3      	ldr	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4a54:	60ab      	str	r3, [r5, #8]
   b4a56:	e885 0003 	stmia.w	r5, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4a5a:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4a5c:	60b2      	str	r2, [r6, #8]
   b4a5e:	68ea      	ldr	r2, [r5, #12]
   b4a60:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4a62:	60eb      	str	r3, [r5, #12]
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
      const _Dp& _M_deleter() const { return std::get<1>(_M_t); }

      void reset(pointer __p) noexcept
      {
	const pointer __old_p = _M_ptr();
   b4a64:	6826      	ldr	r6, [r4, #0]
	_M_ptr() = __p;
   b4a66:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b4a68:	b136      	cbz	r6, b4a78 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x78>
    class function<_Res(_ArgTypes...)>
   b4a6a:	4630      	mov	r0, r6
   b4a6c:	f7ff ffbe 	bl	b49ec <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b4a70:	2110      	movs	r1, #16
   b4a72:	4630      	mov	r0, r6
   b4a74:	f004 fa01 	bl	b8e7a <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b4a78:	6838      	ldr	r0, [r7, #0]
        if (!d_->wrapper) {
   b4a7a:	6803      	ldr	r3, [r0, #0]
   b4a7c:	b183      	cbz	r3, b4aa0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b4a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4a80:	464a      	mov	r2, r9
   b4a82:	e9cd 0300 	strd	r0, r3, [sp]
   b4a86:	4641      	mov	r1, r8
   b4a88:	4b11      	ldr	r3, [pc, #68]	; (b4ad0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xd0>)
   b4a8a:	3004      	adds	r0, #4
   b4a8c:	f001 f8e8 	bl	b5c60 <os_thread_create>
   b4a90:	b930      	cbnz	r0, b4aa0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
   b4a92:	683b      	ldr	r3, [r7, #0]
        while (!d_->started) {
   b4a94:	7c1b      	ldrb	r3, [r3, #16]
   b4a96:	b9a3      	cbnz	r3, b4ac2 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xc2>
            HAL_Delay_Milliseconds(1);
   b4a98:	2001      	movs	r0, #1
   b4a9a:	f001 f919 	bl	b5cd0 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b4a9e:	e7f8      	b.n	b4a92 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x92>
	const pointer __old_p = _M_ptr();
   b4aa0:	683c      	ldr	r4, [r7, #0]
	_M_ptr() = __p;
   b4aa2:	2300      	movs	r3, #0
   b4aa4:	603b      	str	r3, [r7, #0]
	if (__old_p)
   b4aa6:	b164      	cbz	r4, b4ac2 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xc2>
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b4aa8:	6825      	ldr	r5, [r4, #0]
   b4aaa:	b135      	cbz	r5, b4aba <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xba>
   b4aac:	4628      	mov	r0, r5
   b4aae:	f7ff ff9d 	bl	b49ec <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b4ab2:	2110      	movs	r1, #16
   b4ab4:	4628      	mov	r0, r5
   b4ab6:	f004 f9e0 	bl	b8e7a <_ZdlPvj>
   b4aba:	2114      	movs	r1, #20
   b4abc:	4620      	mov	r0, r4
   b4abe:	f004 f9dc 	bl	b8e7a <_ZdlPvj>
    }
   b4ac2:	4638      	mov	r0, r7
   b4ac4:	b005      	add	sp, #20
   b4ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4aca:	bf00      	nop
   b4acc:	000ba314 	.word	0x000ba314
   b4ad0:	000b40df 	.word	0x000b40df

000b4ad4 <setup>:
void setup() {
   b4ad4:	b530      	push	{r4, r5, lr}
   b4ad6:	b087      	sub	sp, #28
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b4ad8:	4b66      	ldr	r3, [pc, #408]	; (b4c74 <setup+0x1a0>)
   b4ada:	9302      	str	r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   b4adc:	4b66      	ldr	r3, [pc, #408]	; (b4c78 <setup+0x1a4>)
   b4ade:	9305      	str	r3, [sp, #20]
  new Thread("reportingThread", reportingThread);
   b4ae0:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b4ae2:	4b66      	ldr	r3, [pc, #408]	; (b4c7c <setup+0x1a8>)
   b4ae4:	9304      	str	r3, [sp, #16]
   b4ae6:	f7ff fad6 	bl	b4096 <_Znwj>
   b4aea:	b138      	cbz	r0, b4afc <setup+0x28>
   b4aec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b4af0:	9300      	str	r3, [sp, #0]
   b4af2:	4963      	ldr	r1, [pc, #396]	; (b4c80 <setup+0x1ac>)
   b4af4:	2302      	movs	r3, #2
   b4af6:	aa02      	add	r2, sp, #8
   b4af8:	f7ff ff82 	bl	b4a00 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
    class function<_Res(_ArgTypes...)>
   b4afc:	a802      	add	r0, sp, #8
   b4afe:	f7ff ff75 	bl	b49ec <_ZNSt14_Function_baseD1Ev>
  request.hostname = "digiglue.io";
   b4b02:	4c60      	ldr	r4, [pc, #384]	; (b4c84 <setup+0x1b0>)
  pinMode(D7, OUTPUT);
   b4b04:	2101      	movs	r1, #1
   b4b06:	2007      	movs	r0, #7
   b4b08:	f004 f920 	bl	b8d4c <pinMode>
        return value;
    }

    static inline void set_flag(system_flag_t flag, uint8_t value) {
        system_set_flag(flag, value, nullptr);
   b4b0c:	2200      	movs	r2, #0
   b4b0e:	2101      	movs	r1, #1
   b4b10:	2003      	movs	r0, #3
   b4b12:	f001 faf5 	bl	b6100 <system_set_flag>
  request.hostname = "digiglue.io";
   b4b16:	495c      	ldr	r1, [pc, #368]	; (b4c88 <setup+0x1b4>)
   b4b18:	4620      	mov	r0, r4
   b4b1a:	f003 fa1e 	bl	b7f5a <_ZN6StringaSEPKc>
  request.port = 80;
   b4b1e:	2350      	movs	r3, #80	; 0x50
  request.path = "/";
   b4b20:	495a      	ldr	r1, [pc, #360]	; (b4c8c <setup+0x1b8>)
  request.port = 80;
   b4b22:	63a3      	str	r3, [r4, #56]	; 0x38
  request.path = "/";
   b4b24:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b4b28:	f003 fa17 	bl	b7f5a <_ZN6StringaSEPKc>
  Serial.begin(9600);
   b4b2c:	f003 ff6c 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4b30:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4b34:	f003 ff5c 	bl	b89f0 <_ZN9USBSerial5beginEl>
  if(!lis3dh.begin(0x18)) {
   b4b38:	4855      	ldr	r0, [pc, #340]	; (b4c90 <setup+0x1bc>)
   b4b3a:	2118      	movs	r1, #24
   b4b3c:	f000 fd5d 	bl	b55fa <_ZN15Adafruit_LIS3DH5beginEh>
   b4b40:	b940      	cbnz	r0, b4b54 <setup+0x80>
    delay(1000);
   b4b42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4b46:	f001 fc01 	bl	b634c <delay>
    Serial.println("Failed to initialize LIS3DH");
   b4b4a:	f003 ff5d 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4b4e:	4951      	ldr	r1, [pc, #324]	; (b4c94 <setup+0x1c0>)
   b4b50:	f003 f883 	bl	b7c5a <_ZN5Print7printlnEPKc>
   b4b54:	4d50      	ldr	r5, [pc, #320]	; (b4c98 <setup+0x1c4>)
   b4b56:	4c51      	ldr	r4, [pc, #324]	; (b4c9c <setup+0x1c8>)
  EEPROM.get(100, recordingInterval);
   b4b58:	f004 f936 	bl	b8dc8 <_Z21__fetch_global_EEPROMv>
   b4b5c:	4629      	mov	r1, r5
   b4b5e:	2204      	movs	r2, #4
   b4b60:	2064      	movs	r0, #100	; 0x64
   b4b62:	f001 f8d5 	bl	b5d10 <HAL_EEPROM_Get>
  EEPROM.get(0, dsid);
   b4b66:	f004 f92f 	bl	b8dc8 <_Z21__fetch_global_EEPROMv>
   b4b6a:	494d      	ldr	r1, [pc, #308]	; (b4ca0 <setup+0x1cc>)
   b4b6c:	2204      	movs	r2, #4
   b4b6e:	2000      	movs	r0, #0
   b4b70:	f001 f8ce 	bl	b5d10 <HAL_EEPROM_Get>
  Serial.println(recordingInterval);
   b4b74:	f003 ff48 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4b78:	6829      	ldr	r1, [r5, #0]
   b4b7a:	220a      	movs	r2, #10
   b4b7c:	f7ff fb1d 	bl	b41ba <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
  EEPROM.get(200, reportingInterval);
   b4b80:	f004 f922 	bl	b8dc8 <_Z21__fetch_global_EEPROMv>
   b4b84:	4621      	mov	r1, r4
   b4b86:	2204      	movs	r2, #4
   b4b88:	20c8      	movs	r0, #200	; 0xc8
   b4b8a:	f001 f8c1 	bl	b5d10 <HAL_EEPROM_Get>
  reportingInterval = reportingInterval / 1000; // convert to seconds from milliseconds 
   b4b8e:	6823      	ldr	r3, [r4, #0]
   b4b90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4b94:	fb93 f3f2 	sdiv	r3, r3, r2
   b4b98:	6023      	str	r3, [r4, #0]
  Serial.printlnf("recordingInterval: %i", recordingInterval);
   b4b9a:	f003 ff35 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4b9e:	682a      	ldr	r2, [r5, #0]
   b4ba0:	4940      	ldr	r1, [pc, #256]	; (b4ca4 <setup+0x1d0>)
   b4ba2:	f7ff fb41 	bl	b4228 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("reportingInterval: %i", reportingInterval);
   b4ba6:	f003 ff2f 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4baa:	6822      	ldr	r2, [r4, #0]
   b4bac:	493e      	ldr	r1, [pc, #248]	; (b4ca8 <setup+0x1d4>)
   b4bae:	f7ff fb3b 	bl	b4228 <_ZN5Print8printlnfEPKcz>
  if(recordingInterval == -1) {
   b4bb2:	682b      	ldr	r3, [r5, #0]
  WiFi.on();
   b4bb4:	483d      	ldr	r0, [pc, #244]	; (b4cac <setup+0x1d8>)
  if(recordingInterval == -1) {
   b4bb6:	3301      	adds	r3, #1
    recordingInterval = 500; //default value
   b4bb8:	bf04      	itt	eq
   b4bba:	f44f 73fa 	moveq.w	r3, #500	; 0x1f4
   b4bbe:	602b      	streq	r3, [r5, #0]
  if(reportingInterval == -1) {
   b4bc0:	6823      	ldr	r3, [r4, #0]
  while(!WiFi.ready() && WiFiConnectCountdown != 0) {
   b4bc2:	4d3a      	ldr	r5, [pc, #232]	; (b4cac <setup+0x1d8>)
  if(reportingInterval == -1) {
   b4bc4:	3301      	adds	r3, #1
    reportingInterval = 10; //default value
   b4bc6:	bf04      	itt	eq
   b4bc8:	230a      	moveq	r3, #10
   b4bca:	6023      	streq	r3, [r4, #0]
  WiFi.on();
   b4bcc:	f7ff fb3a 	bl	b4244 <_ZN5spark9WiFiClass2onEv>
  WiFi.connect();
   b4bd0:	4836      	ldr	r0, [pc, #216]	; (b4cac <setup+0x1d8>)
   b4bd2:	2100      	movs	r1, #0
   b4bd4:	f7ff fb42 	bl	b425c <_ZN5spark9WiFiClass7connectEj>
   b4bd8:	24c9      	movs	r4, #201	; 0xc9
  while(!WiFi.ready() && WiFiConnectCountdown != 0) {
   b4bda:	4628      	mov	r0, r5
   b4bdc:	f7ff fb43 	bl	b4266 <_ZN5spark9WiFiClass5readyEv>
   b4be0:	b928      	cbnz	r0, b4bee <setup+0x11a>
   b4be2:	3c01      	subs	r4, #1
   b4be4:	d003      	beq.n	b4bee <setup+0x11a>
    delay(100);
   b4be6:	2064      	movs	r0, #100	; 0x64
   b4be8:	f001 fbb0 	bl	b634c <delay>
  while(!WiFi.ready() && WiFiConnectCountdown != 0) {
   b4bec:	e7f5      	b.n	b4bda <setup+0x106>
  if(WiFi.ready() != true) {
   b4bee:	482f      	ldr	r0, [pc, #188]	; (b4cac <setup+0x1d8>)
   b4bf0:	f7ff fb39 	bl	b4266 <_ZN5spark9WiFiClass5readyEv>
   b4bf4:	b948      	cbnz	r0, b4c0a <setup+0x136>
    Serial.println("WiFi failed to connect, skipping time synchronization");
   b4bf6:	f003 ff07 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4bfa:	492d      	ldr	r1, [pc, #180]	; (b4cb0 <setup+0x1dc>)
   b4bfc:	f003 f82d 	bl	b7c5a <_ZN5Print7printlnEPKc>
  WiFi.off();
   b4c00:	482a      	ldr	r0, [pc, #168]	; (b4cac <setup+0x1d8>)
   b4c02:	f7ff fb25 	bl	b4250 <_ZN5spark9WiFiClass3offEv>
}
   b4c06:	b007      	add	sp, #28
   b4c08:	bd30      	pop	{r4, r5, pc}
    Serial.println("WiFi connected, syncing time");
   b4c0a:	f003 fefd 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4c0e:	4929      	ldr	r1, [pc, #164]	; (b4cb4 <setup+0x1e0>)
   b4c10:	f003 f823 	bl	b7c5a <_ZN5Print7printlnEPKc>
        spark_cloud_flag_connect();
   b4c14:	f001 fab2 	bl	b617c <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4c18:	f001 fab8 	bl	b618c <spark_cloud_flag_connected>
    while(!Particle.connected()) {
   b4c1c:	b918      	cbnz	r0, b4c26 <setup+0x152>
      delay(100);
   b4c1e:	2064      	movs	r0, #100	; 0x64
   b4c20:	f001 fb94 	bl	b634c <delay>
    while(!Particle.connected()) {
   b4c24:	e7f8      	b.n	b4c18 <setup+0x144>
   b4c26:	f001 fab1 	bl	b618c <spark_cloud_flag_connected>
        if (!connected()) {
   b4c2a:	b110      	cbz	r0, b4c32 <setup+0x15e>
        return spark_sync_time(NULL);
   b4c2c:	2000      	movs	r0, #0
   b4c2e:	f001 fab5 	bl	b619c <spark_sync_time>
   b4c32:	4c21      	ldr	r4, [pc, #132]	; (b4cb8 <setup+0x1e4>)
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4c34:	f001 faaa 	bl	b618c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
   b4c38:	b148      	cbz	r0, b4c4e <setup+0x17a>
   b4c3a:	2000      	movs	r0, #0
   b4c3c:	f001 fab6 	bl	b61ac <spark_sync_time_pending>
   b4c40:	b128      	cbz	r0, b4c4e <setup+0x17a>
		return HAL_Timer_Get_Milli_Seconds();
   b4c42:	f001 f855 	bl	b5cf0 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b4c46:	6020      	str	r0, [r4, #0]
    		spark_process();
   b4c48:	f001 fa90 	bl	b616c <spark_process>
    }
   b4c4c:	e7f2      	b.n	b4c34 <setup+0x160>
    Serial.printlnf("Current time is: %s", Time.timeStr().c_str());
   b4c4e:	f003 fedb 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4c52:	4604      	mov	r4, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b4c54:	f003 fde1 	bl	b881a <_ZN9TimeClass3nowEv>
   b4c58:	17c3      	asrs	r3, r0, #31
   b4c5a:	4602      	mov	r2, r0
   b4c5c:	a802      	add	r0, sp, #8
   b4c5e:	f003 fd83 	bl	b8768 <_ZN9TimeClass7timeStrEx>
   b4c62:	9a02      	ldr	r2, [sp, #8]
   b4c64:	4915      	ldr	r1, [pc, #84]	; (b4cbc <setup+0x1e8>)
   b4c66:	4620      	mov	r0, r4
   b4c68:	f7ff fade 	bl	b4228 <_ZN5Print8printlnfEPKcz>
   b4c6c:	a802      	add	r0, sp, #8
   b4c6e:	f003 f8fb 	bl	b7e68 <_ZN6StringD1Ev>
   b4c72:	e7c5      	b.n	b4c00 <setup+0x12c>
   b4c74:	000b4271 	.word	0x000b4271
   b4c78:	000b4179 	.word	0x000b4179
   b4c7c:	000b4165 	.word	0x000b4165
   b4c80:	000b9bd2 	.word	0x000b9bd2
   b4c84:	2003e080 	.word	0x2003e080
   b4c88:	000b9be2 	.word	0x000b9be2
   b4c8c:	000b9bee 	.word	0x000b9bee
   b4c90:	2003dee0 	.word	0x2003dee0
   b4c94:	000b9bf0 	.word	0x000b9bf0
   b4c98:	2003e078 	.word	0x2003e078
   b4c9c:	2003e07c 	.word	0x2003e07c
   b4ca0:	2003daac 	.word	0x2003daac
   b4ca4:	000b9c0c 	.word	0x000b9c0c
   b4ca8:	000b9c22 	.word	0x000b9c22
   b4cac:	2003e7c0 	.word	0x2003e7c0
   b4cb0:	000b9b67 	.word	0x000b9b67
   b4cb4:	000b9c38 	.word	0x000b9c38
   b4cb8:	2003e7d0 	.word	0x2003e7d0
   b4cbc:	000b9c55 	.word	0x000b9c55

000b4cc0 <loop>:
void loop() {
   b4cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4cc4:	ed2d 8b02 	vpush	{d8}
  switch (firmwareState) {
   b4cc8:	4e8d      	ldr	r6, [pc, #564]	; (b4f00 <loop+0x240>)
   b4cca:	7835      	ldrb	r5, [r6, #0]
void loop() {
   b4ccc:	b097      	sub	sp, #92	; 0x5c
  switch (firmwareState) {
   b4cce:	b13d      	cbz	r5, b4ce0 <loop+0x20>
   b4cd0:	2d01      	cmp	r5, #1
   b4cd2:	f000 8096 	beq.w	b4e02 <loop+0x142>
}
   b4cd6:	b017      	add	sp, #92	; 0x5c
   b4cd8:	ecbd 8b02 	vpop	{d8}
   b4cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Serial.println("BLEWAIT");
   b4ce0:	f003 fe92 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4ce4:	4987      	ldr	r1, [pc, #540]	; (b4f04 <loop+0x244>)
   b4ce6:	f002 ffb8 	bl	b7c5a <_ZN5Print7printlnEPKc>
      BLE.on();
   b4cea:	f001 ff5d 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4cee:	f001 ffa9 	bl	b6c44 <_ZNK8particle14BleLocalDevice2onEv>
      BLE.addCharacteristic(txCharacteristic);
   b4cf2:	f001 ff59 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4cf6:	4a84      	ldr	r2, [pc, #528]	; (b4f08 <loop+0x248>)
   b4cf8:	4601      	mov	r1, r0
   b4cfa:	a80d      	add	r0, sp, #52	; 0x34
   b4cfc:	f002 fc4c 	bl	b7598 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4d00:	a80d      	add	r0, sp, #52	; 0x34
   b4d02:	f002 f83a 	bl	b6d7a <_ZN8particle17BleCharacteristicD1Ev>
      BLE.addCharacteristic(rxCharacteristic);
   b4d06:	f001 ff4f 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4d0a:	4a80      	ldr	r2, [pc, #512]	; (b4f0c <loop+0x24c>)
   b4d0c:	4601      	mov	r1, r0
   b4d0e:	a80d      	add	r0, sp, #52	; 0x34
   b4d10:	f002 fc42 	bl	b7598 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4d14:	a80d      	add	r0, sp, #52	; 0x34
   b4d16:	f002 f830 	bl	b6d7a <_ZN8particle17BleCharacteristicD1Ev>
      BleAdvertisingData data;
   b4d1a:	a80d      	add	r0, sp, #52	; 0x34
   b4d1c:	f001 fdad 	bl	b687a <_ZN8particle18BleAdvertisingDataC1Ev>
      data.appendServiceUUID(serviceUuid);
   b4d20:	497b      	ldr	r1, [pc, #492]	; (b4f10 <loop+0x250>)
   b4d22:	a803      	add	r0, sp, #12
   b4d24:	f001 fcae 	bl	b6684 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4d28:	a903      	add	r1, sp, #12
   b4d2a:	a808      	add	r0, sp, #32
   b4d2c:	f001 fcaa 	bl	b6684 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4d30:	a808      	add	r0, sp, #32
   b4d32:	f001 fced 	bl	b6710 <_ZNK8particle7BleUuid4typeEv>
   b4d36:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4d38:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4d3a:	bb84      	cbnz	r4, b4d9e <loop+0xde>
            uint16_t uuid16 = tempUUID.shorted();
   b4d3c:	f001 fd04 	bl	b6748 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4d40:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4d42:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4d46:	2302      	movs	r3, #2
   b4d48:	f10d 020a 	add.w	r2, sp, #10
   b4d4c:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4d4e:	a80d      	add	r0, sp, #52	; 0x34
   b4d50:	f001 fd88 	bl	b6864 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
      BLE.advertise(&data);
   b4d54:	f001 ff28 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4d58:	2200      	movs	r2, #0
   b4d5a:	a90d      	add	r1, sp, #52	; 0x34
   b4d5c:	f001 ff92 	bl	b6c84 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
      BLE.onConnected(connectCallback);
   b4d60:	f001 ff22 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4d64:	496b      	ldr	r1, [pc, #428]	; (b4f14 <loop+0x254>)
   b4d66:	2200      	movs	r2, #0
   b4d68:	f002 fb19 	bl	b739e <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
      BLE.onDisconnected(disconnectCallback);
   b4d6c:	f001 ff1c 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4d70:	4969      	ldr	r1, [pc, #420]	; (b4f18 <loop+0x258>)
   b4d72:	2200      	movs	r2, #0
   b4d74:	f002 faf4 	bl	b7360 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
      int BLECountdown = 5000;
   b4d78:	f241 3488 	movw	r4, #5000	; 0x1388
      while(!BLE.connected() && BLECountdown > 0) {
   b4d7c:	f001 ff14 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4d80:	f001 ff93 	bl	b6caa <_ZNK8particle14BleLocalDevice9connectedEv>
   b4d84:	b990      	cbnz	r0, b4dac <loop+0xec>
   b4d86:	b18c      	cbz	r4, b4dac <loop+0xec>
        BLECountdown = BLECountdown - 10;
   b4d88:	3c0a      	subs	r4, #10
        Serial.println(BLECountdown);
   b4d8a:	f003 fe3d 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4d8e:	220a      	movs	r2, #10
   b4d90:	4621      	mov	r1, r4
   b4d92:	f7ff fa12 	bl	b41ba <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
        delay(10);
   b4d96:	200a      	movs	r0, #10
   b4d98:	f001 fad8 	bl	b634c <delay>
      while(!BLE.connected() && BLECountdown > 0) {
   b4d9c:	e7ee      	b.n	b4d7c <loop+0xbc>
   b4d9e:	f001 fcd5 	bl	b674c <_ZNK8particle7BleUuid8rawBytesEv>
   b4da2:	9500      	str	r5, [sp, #0]
   b4da4:	4602      	mov	r2, r0
   b4da6:	2310      	movs	r3, #16
   b4da8:	2107      	movs	r1, #7
   b4daa:	e7d0      	b.n	b4d4e <loop+0x8e>
      if(BLE.connected()){ 
   b4dac:	f001 fefc 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4db0:	f001 ff7b 	bl	b6caa <_ZNK8particle14BleLocalDevice9connectedEv>
   b4db4:	4c59      	ldr	r4, [pc, #356]	; (b4f1c <loop+0x25c>)
   b4db6:	b190      	cbz	r0, b4dde <loop+0x11e>
        Serial.println("BLE connected");
   b4db8:	f003 fe26 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4dbc:	4958      	ldr	r1, [pc, #352]	; (b4f20 <loop+0x260>)
   b4dbe:	f002 ff4c 	bl	b7c5a <_ZN5Print7printlnEPKc>
        bleWaitForConfig = true;
   b4dc2:	2301      	movs	r3, #1
   b4dc4:	7023      	strb	r3, [r4, #0]
        Serial.println("bleWaitForConfig");
   b4dc6:	4d57      	ldr	r5, [pc, #348]	; (b4f24 <loop+0x264>)
      while(bleWaitForConfig) {
   b4dc8:	7823      	ldrb	r3, [r4, #0]
   b4dca:	b17b      	cbz	r3, b4dec <loop+0x12c>
        Serial.println("bleWaitForConfig");
   b4dcc:	f003 fe1c 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4dd0:	4629      	mov	r1, r5
   b4dd2:	f002 ff42 	bl	b7c5a <_ZN5Print7printlnEPKc>
        delay(100);
   b4dd6:	2064      	movs	r0, #100	; 0x64
   b4dd8:	f001 fab8 	bl	b634c <delay>
      while(bleWaitForConfig) {
   b4ddc:	e7f4      	b.n	b4dc8 <loop+0x108>
        bleWaitForConfig = false;
   b4dde:	7020      	strb	r0, [r4, #0]
        Serial.println("BLE not connected, continuing with stored settings.");
   b4de0:	f003 fe12 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4de4:	4950      	ldr	r1, [pc, #320]	; (b4f28 <loop+0x268>)
   b4de6:	f002 ff38 	bl	b7c5a <_ZN5Print7printlnEPKc>
   b4dea:	e7ec      	b.n	b4dc6 <loop+0x106>
      BLE.disconnectAll();
   b4dec:	f001 fedc 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4df0:	f002 f9e4 	bl	b71bc <_ZNK8particle14BleLocalDevice13disconnectAllEv>
      BLE.off();
   b4df4:	f001 fed8 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4df8:	f002 f849 	bl	b6e8e <_ZNK8particle14BleLocalDevice3offEv>
      firmwareState = RECORDING;
   b4dfc:	2301      	movs	r3, #1
   b4dfe:	7033      	strb	r3, [r6, #0]
      break;
   b4e00:	e769      	b.n	b4cd6 <loop+0x16>
      lis3dh.read();
   b4e02:	4c4a      	ldr	r4, [pc, #296]	; (b4f2c <loop+0x26c>)
      if(abs(x - prevX) > 0.05 || abs(y - prevY) > 0.05 || abs(z - prevZ) > 0.05) {
   b4e04:	f8df a148 	ldr.w	sl, [pc, #328]	; b4f50 <loop+0x290>
      x = lis3dh.x_g;
   b4e08:	f8df b148 	ldr.w	fp, [pc, #328]	; b4f54 <loop+0x294>
      y = lis3dh.y_g;
   b4e0c:	f8df 9148 	ldr.w	r9, [pc, #328]	; b4f58 <loop+0x298>
      z = lis3dh.z_g;
   b4e10:	4f47      	ldr	r7, [pc, #284]	; (b4f30 <loop+0x270>)
   b4e12:	f8df 8148 	ldr.w	r8, [pc, #328]	; b4f5c <loop+0x29c>
   b4e16:	4e47      	ldr	r6, [pc, #284]	; (b4f34 <loop+0x274>)
   b4e18:	4d47      	ldr	r5, [pc, #284]	; (b4f38 <loop+0x278>)
      Serial.println("RECORDING");
   b4e1a:	f003 fdf5 	bl	b8a08 <_Z16_fetch_usbserialv>
   b4e1e:	4947      	ldr	r1, [pc, #284]	; (b4f3c <loop+0x27c>)
   b4e20:	f002 ff1b 	bl	b7c5a <_ZN5Print7printlnEPKc>
      lis3dh.read();
   b4e24:	4620      	mov	r0, r4
   b4e26:	f000 fb07 	bl	b5438 <_ZN15Adafruit_LIS3DH4readEv>
      x = lis3dh.x_g;
   b4e2a:	edd4 7a03 	vldr	s15, [r4, #12]
      if(abs(x - prevX) > 0.05 || abs(y - prevY) > 0.05 || abs(z - prevZ) > 0.05) {
   b4e2e:	ed9a 7a00 	vldr	s14, [sl]
      x = lis3dh.x_g;
   b4e32:	edcb 7a00 	vstr	s15, [fp]
      if(abs(x - prevX) > 0.05 || abs(y - prevY) > 0.05 || abs(z - prevZ) > 0.05) {
   b4e36:	ee77 7ac7 	vsub.f32	s15, s15, s14
      y = lis3dh.y_g;
   b4e3a:	edd4 8a04 	vldr	s17, [r4, #16]
      z = lis3dh.z_g;
   b4e3e:	ed94 8a05 	vldr	s16, [r4, #20]
      y = lis3dh.y_g;
   b4e42:	edc9 8a00 	vstr	s17, [r9]
      if(abs(x - prevX) > 0.05 || abs(y - prevY) > 0.05 || abs(z - prevZ) > 0.05) {
   b4e46:	eef0 7ae7 	vabs.f32	s15, s15
   b4e4a:	ee17 0a90 	vmov	r0, s15
      z = lis3dh.z_g;
   b4e4e:	ed87 8a00 	vstr	s16, [r7]
      if(abs(x - prevX) > 0.05 || abs(y - prevY) > 0.05 || abs(z - prevZ) > 0.05) {
   b4e52:	f004 fa91 	bl	b9378 <__aeabi_f2d>
   b4e56:	a328      	add	r3, pc, #160	; (adr r3, b4ef8 <loop+0x238>)
   b4e58:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e5c:	f004 fb62 	bl	b9524 <__aeabi_dcmpgt>
   b4e60:	4c37      	ldr	r4, [pc, #220]	; (b4f40 <loop+0x280>)
   b4e62:	2800      	cmp	r0, #0
   b4e64:	d13d      	bne.n	b4ee2 <loop+0x222>
   b4e66:	edd8 7a00 	vldr	s15, [r8]
   b4e6a:	ee78 8ae7 	vsub.f32	s17, s17, s15
   b4e6e:	eef0 7ae8 	vabs.f32	s15, s17
   b4e72:	ee17 0a90 	vmov	r0, s15
   b4e76:	f004 fa7f 	bl	b9378 <__aeabi_f2d>
   b4e7a:	a31f      	add	r3, pc, #124	; (adr r3, b4ef8 <loop+0x238>)
   b4e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e80:	f004 fb50 	bl	b9524 <__aeabi_dcmpgt>
   b4e84:	bb68      	cbnz	r0, b4ee2 <loop+0x222>
   b4e86:	edd6 7a00 	vldr	s15, [r6]
   b4e8a:	ee38 8a67 	vsub.f32	s16, s16, s15
   b4e8e:	eef0 7ac8 	vabs.f32	s15, s16
   b4e92:	ee17 0a90 	vmov	r0, s15
   b4e96:	f004 fa6f 	bl	b9378 <__aeabi_f2d>
   b4e9a:	a317      	add	r3, pc, #92	; (adr r3, b4ef8 <loop+0x238>)
   b4e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4ea0:	f004 fb40 	bl	b9524 <__aeabi_dcmpgt>
   b4ea4:	b9e8      	cbnz	r0, b4ee2 <loop+0x222>
        storedValues[storedValuesPos] = 0;
   b4ea6:	6823      	ldr	r3, [r4, #0]
   b4ea8:	54e8      	strb	r0, [r5, r3]
      storedTimes[storedValuesPos] = Time.now();
   b4eaa:	6825      	ldr	r5, [r4, #0]
   b4eac:	f003 fcb5 	bl	b881a <_ZN9TimeClass3nowEv>
   b4eb0:	4b24      	ldr	r3, [pc, #144]	; (b4f44 <loop+0x284>)
   b4eb2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
      prevX = x;
   b4eb6:	f8db 3000 	ldr.w	r3, [fp]
   b4eba:	f8ca 3000 	str.w	r3, [sl]
      prevY = y;
   b4ebe:	f8d9 3000 	ldr.w	r3, [r9]
   b4ec2:	f8c8 3000 	str.w	r3, [r8]
      prevZ = z;
   b4ec6:	683b      	ldr	r3, [r7, #0]
   b4ec8:	6033      	str	r3, [r6, #0]
      storedValuesPos++;
   b4eca:	6823      	ldr	r3, [r4, #0]
   b4ecc:	3301      	adds	r3, #1
   b4ece:	6023      	str	r3, [r4, #0]
      delay(recordingInterval);
   b4ed0:	4b1d      	ldr	r3, [pc, #116]	; (b4f48 <loop+0x288>)
   b4ed2:	6818      	ldr	r0, [r3, #0]
}
   b4ed4:	b017      	add	sp, #92	; 0x5c
   b4ed6:	ecbd 8b02 	vpop	{d8}
   b4eda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      delay(recordingInterval);
   b4ede:	f001 ba35 	b.w	b634c <delay>
        if(firstRecord) {
   b4ee2:	491a      	ldr	r1, [pc, #104]	; (b4f4c <loop+0x28c>)
        storedValues[storedValuesPos] = 0;
   b4ee4:	6823      	ldr	r3, [r4, #0]
        if(firstRecord) {
   b4ee6:	780a      	ldrb	r2, [r1, #0]
   b4ee8:	b11a      	cbz	r2, b4ef2 <loop+0x232>
          firstRecord = false;
   b4eea:	2200      	movs	r2, #0
   b4eec:	700a      	strb	r2, [r1, #0]
          storedValues[storedValuesPos] = 1;
   b4eee:	54ea      	strb	r2, [r5, r3]
   b4ef0:	e7db      	b.n	b4eaa <loop+0x1ea>
   b4ef2:	2201      	movs	r2, #1
   b4ef4:	e7fb      	b.n	b4eee <loop+0x22e>
   b4ef6:	bf00      	nop
   b4ef8:	9999999a 	.word	0x9999999a
   b4efc:	3fa99999 	.word	0x3fa99999
   b4f00:	2003dab0 	.word	0x2003dab0
   b4f04:	000b9c69 	.word	0x000b9c69
   b4f08:	2003e5fc 	.word	0x2003e5fc
   b4f0c:	2003e0e0 	.word	0x2003e0e0
   b4f10:	2003da68 	.word	0x2003da68
   b4f14:	000b4111 	.word	0x000b4111
   b4f18:	000b4139 	.word	0x000b4139
   b4f1c:	2003daa4 	.word	0x2003daa4
   b4f20:	000b9c71 	.word	0x000b9c71
   b4f24:	000b9cb3 	.word	0x000b9cb3
   b4f28:	000b9c7f 	.word	0x000b9c7f
   b4f2c:	2003dee0 	.word	0x2003dee0
   b4f30:	2003e61c 	.word	0x2003e61c
   b4f34:	2003e074 	.word	0x2003e074
   b4f38:	2003e4f8 	.word	0x2003e4f8
   b4f3c:	000b9cc4 	.word	0x000b9cc4
   b4f40:	2003e5f8 	.word	0x2003e5f8
   b4f44:	2003e0f8 	.word	0x2003e0f8
   b4f48:	2003e078 	.word	0x2003e078
   b4f4c:	2003d9d0 	.word	0x2003d9d0
   b4f50:	2003e06c 	.word	0x2003e06c
   b4f54:	2003e614 	.word	0x2003e614
   b4f58:	2003e618 	.word	0x2003e618
   b4f5c:	2003e070 	.word	0x2003e070

000b4f60 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b4f60:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4f62:	4616      	mov	r6, r2
   b4f64:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b4f66:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4f68:	e9c0 2200 	strd	r2, r2, [r0]
   b4f6c:	4604      	mov	r4, r0
   b4f6e:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   b4f70:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   b4f72:	4619      	mov	r1, r3
   b4f74:	a806      	add	r0, sp, #24
   b4f76:	f001 fb85 	bl	b6684 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   b4f7a:	9916      	ldr	r1, [sp, #88]	; 0x58
   b4f7c:	4638      	mov	r0, r7
   b4f7e:	f001 fb81 	bl	b6684 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   b4f82:	7833      	ldrb	r3, [r6, #0]
   b4f84:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4f88:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b4f8a:	9302      	str	r3, [sp, #8]
   b4f8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b4f8e:	4620      	mov	r0, r4
   b4f90:	e9cd 7300 	strd	r7, r3, [sp]
   b4f94:	aa05      	add	r2, sp, #20
   b4f96:	ab06      	add	r3, sp, #24
   b4f98:	4629      	mov	r1, r5
   b4f9a:	f002 f987 	bl	b72ac <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b4f9e:	4620      	mov	r0, r4
   b4fa0:	b011      	add	sp, #68	; 0x44
   b4fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4fa4 <_ZN15Adafruit_LIS3DHD0Ev>:
   b4fa4:	b510      	push	{r4, lr}
   b4fa6:	212c      	movs	r1, #44	; 0x2c
   b4fa8:	4604      	mov	r4, r0
   b4faa:	f003 ff66 	bl	b8e7a <_ZdlPvj>
   b4fae:	4620      	mov	r0, r4
   b4fb0:	bd10      	pop	{r4, pc}
	...

000b4fb4 <_GLOBAL__sub_I_SystemMode>:
   b4fb4:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
   b4fb6:	4c67      	ldr	r4, [pc, #412]	; (b5154 <_GLOBAL__sub_I_SystemMode+0x1a0>)
    SleepResult() {}
   b4fb8:	4b67      	ldr	r3, [pc, #412]	; (b5158 <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b4fba:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4fbc:	2500      	movs	r5, #0
   b4fbe:	b090      	sub	sp, #64	; 0x40
   b4fc0:	e9c4 5500 	strd	r5, r5, [r4]
        set_system_mode(mode);
   b4fc4:	2003      	movs	r0, #3
   b4fc6:	f001 f883 	bl	b60d0 <set_system_mode>
SYSTEM_MODE(MANUAL)
   b4fca:	4a64      	ldr	r2, [pc, #400]	; (b515c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b4fcc:	4964      	ldr	r1, [pc, #400]	; (b5160 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b4fce:	4620      	mov	r0, r4
   b4fd0:	f003 ff4e 	bl	b8e70 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED)
   b4fd4:	4629      	mov	r1, r5
   b4fd6:	2001      	movs	r0, #1
   b4fd8:	f001 f88a 	bl	b60f0 <system_thread_set_state>
Adafruit_LIS3DH lis3dh = Adafruit_LIS3DH();
   b4fdc:	4861      	ldr	r0, [pc, #388]	; (b5164 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b4fde:	4d62      	ldr	r5, [pc, #392]	; (b5168 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b4fe0:	f000 f91c 	bl	b521c <_ZN15Adafruit_LIS3DHC1Ev>
   b4fe4:	4a5d      	ldr	r2, [pc, #372]	; (b515c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b4fe6:	4961      	ldr	r1, [pc, #388]	; (b516c <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b4fe8:	485e      	ldr	r0, [pc, #376]	; (b5164 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b4fea:	f003 ff41 	bl	b8e70 <__aeabi_atexit>
String payload, prevPayload = "";
   b4fee:	4960      	ldr	r1, [pc, #384]	; (b5170 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b4ff0:	4860      	ldr	r0, [pc, #384]	; (b5174 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b4ff2:	f002 ff84 	bl	b7efe <_ZN6StringC1EPK19__FlashStringHelper>
   b4ff6:	4a59      	ldr	r2, [pc, #356]	; (b515c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b4ff8:	495f      	ldr	r1, [pc, #380]	; (b5178 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b4ffa:	485e      	ldr	r0, [pc, #376]	; (b5174 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b4ffc:	f003 ff38 	bl	b8e70 <__aeabi_atexit>
   b5000:	495b      	ldr	r1, [pc, #364]	; (b5170 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b5002:	485e      	ldr	r0, [pc, #376]	; (b517c <_GLOBAL__sub_I_SystemMode+0x1c8>)
   b5004:	f002 ff7b 	bl	b7efe <_ZN6StringC1EPK19__FlashStringHelper>
   b5008:	4a54      	ldr	r2, [pc, #336]	; (b515c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b500a:	495b      	ldr	r1, [pc, #364]	; (b5178 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b500c:	485b      	ldr	r0, [pc, #364]	; (b517c <_GLOBAL__sub_I_SystemMode+0x1c8>)
   b500e:	f003 ff2f 	bl	b8e70 <__aeabi_atexit>
String unixTime;
   b5012:	4957      	ldr	r1, [pc, #348]	; (b5170 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b5014:	485a      	ldr	r0, [pc, #360]	; (b5180 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b5016:	f002 ff72 	bl	b7efe <_ZN6StringC1EPK19__FlashStringHelper>
   b501a:	4a50      	ldr	r2, [pc, #320]	; (b515c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b501c:	4956      	ldr	r1, [pc, #344]	; (b5178 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b501e:	4858      	ldr	r0, [pc, #352]	; (b5180 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b5020:	f003 ff26 	bl	b8e70 <__aeabi_atexit>
String ssid, password = "";
   b5024:	4952      	ldr	r1, [pc, #328]	; (b5170 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b5026:	4857      	ldr	r0, [pc, #348]	; (b5184 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   b5028:	f002 ff69 	bl	b7efe <_ZN6StringC1EPK19__FlashStringHelper>
   b502c:	4a4b      	ldr	r2, [pc, #300]	; (b515c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b502e:	4952      	ldr	r1, [pc, #328]	; (b5178 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5030:	4854      	ldr	r0, [pc, #336]	; (b5184 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   b5032:	f003 ff1d 	bl	b8e70 <__aeabi_atexit>
   b5036:	494e      	ldr	r1, [pc, #312]	; (b5170 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b5038:	4853      	ldr	r0, [pc, #332]	; (b5188 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b503a:	f002 ff60 	bl	b7efe <_ZN6StringC1EPK19__FlashStringHelper>
   b503e:	4a47      	ldr	r2, [pc, #284]	; (b515c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b5040:	494d      	ldr	r1, [pc, #308]	; (b5178 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5042:	4851      	ldr	r0, [pc, #324]	; (b5188 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b5044:	f003 ff14 	bl	b8e70 <__aeabi_atexit>
String inputBuffer;
   b5048:	4949      	ldr	r1, [pc, #292]	; (b5170 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b504a:	4850      	ldr	r0, [pc, #320]	; (b518c <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b504c:	f002 ff57 	bl	b7efe <_ZN6StringC1EPK19__FlashStringHelper>
   b5050:	4a42      	ldr	r2, [pc, #264]	; (b515c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b5052:	4949      	ldr	r1, [pc, #292]	; (b5178 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5054:	484d      	ldr	r0, [pc, #308]	; (b518c <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b5056:	f003 ff0b 	bl	b8e70 <__aeabi_atexit>
HttpClient http;
   b505a:	484d      	ldr	r0, [pc, #308]	; (b5190 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b505c:	f000 fb31 	bl	b56c2 <_ZN10HttpClientC1Ev>
   b5060:	4a3e      	ldr	r2, [pc, #248]	; (b515c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b5062:	494c      	ldr	r1, [pc, #304]	; (b5194 <_GLOBAL__sub_I_SystemMode+0x1e0>)
   b5064:	484a      	ldr	r0, [pc, #296]	; (b5190 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b5066:	f003 ff03 	bl	b8e70 <__aeabi_atexit>
} http_request_t;
   b506a:	4941      	ldr	r1, [pc, #260]	; (b5170 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b506c:	484a      	ldr	r0, [pc, #296]	; (b5198 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b506e:	f002 ff46 	bl	b7efe <_ZN6StringC1EPK19__FlashStringHelper>
   b5072:	484a      	ldr	r0, [pc, #296]	; (b519c <_GLOBAL__sub_I_SystemMode+0x1e8>)
   b5074:	f002 fca2 	bl	b79bc <_ZN9IPAddressC1Ev>
   b5078:	493d      	ldr	r1, [pc, #244]	; (b5170 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b507a:	4849      	ldr	r0, [pc, #292]	; (b51a0 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b507c:	f002 ff3f 	bl	b7efe <_ZN6StringC1EPK19__FlashStringHelper>
   b5080:	493b      	ldr	r1, [pc, #236]	; (b5170 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b5082:	4848      	ldr	r0, [pc, #288]	; (b51a4 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   b5084:	f002 ff3b 	bl	b7efe <_ZN6StringC1EPK19__FlashStringHelper>
http_request_t request;
   b5088:	4a34      	ldr	r2, [pc, #208]	; (b515c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b508a:	4947      	ldr	r1, [pc, #284]	; (b51a8 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   b508c:	4842      	ldr	r0, [pc, #264]	; (b5198 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b508e:	f003 feef 	bl	b8e70 <__aeabi_atexit>
} http_response_t;
   b5092:	4937      	ldr	r1, [pc, #220]	; (b5170 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b5094:	4845      	ldr	r0, [pc, #276]	; (b51ac <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b5096:	f002 ff32 	bl	b7efe <_ZN6StringC1EPK19__FlashStringHelper>
http_response_t response;
   b509a:	4a30      	ldr	r2, [pc, #192]	; (b515c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b509c:	4944      	ldr	r1, [pc, #272]	; (b51b0 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   b509e:	4845      	ldr	r0, [pc, #276]	; (b51b4 <_GLOBAL__sub_I_SystemMode+0x200>)
   b50a0:	f003 fee6 	bl	b8e70 <__aeabi_atexit>
   b50a4:	2405      	movs	r4, #5
#ifdef __cplusplus

   WiFiAccessPoint()
   {
       memset(this, 0, sizeof(*this));
       size = sizeof(*this);
   b50a6:	2638      	movs	r6, #56	; 0x38
       memset(this, 0, sizeof(*this));
   b50a8:	1d28      	adds	r0, r5, #4
   b50aa:	2234      	movs	r2, #52	; 0x34
   b50ac:	2100      	movs	r1, #0
   b50ae:	f004 fab3 	bl	b9618 <memset>
WiFiAccessPoint networks[5];
   b50b2:	3c01      	subs	r4, #1
       size = sizeof(*this);
   b50b4:	f845 6b38 	str.w	r6, [r5], #56
   b50b8:	d1f6      	bne.n	b50a8 <_GLOBAL__sub_I_SystemMode+0xf4>
String networkBuffer;
   b50ba:	492d      	ldr	r1, [pc, #180]	; (b5170 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b50bc:	483e      	ldr	r0, [pc, #248]	; (b51b8 <_GLOBAL__sub_I_SystemMode+0x204>)
   b50be:	f002 ff1e 	bl	b7efe <_ZN6StringC1EPK19__FlashStringHelper>
   b50c2:	4a26      	ldr	r2, [pc, #152]	; (b515c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b50c4:	492c      	ldr	r1, [pc, #176]	; (b5178 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b50c6:	483c      	ldr	r0, [pc, #240]	; (b51b8 <_GLOBAL__sub_I_SystemMode+0x204>)
   b50c8:	f003 fed2 	bl	b8e70 <__aeabi_atexit>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b50cc:	493b      	ldr	r1, [pc, #236]	; (b51bc <_GLOBAL__sub_I_SystemMode+0x208>)
   b50ce:	483c      	ldr	r0, [pc, #240]	; (b51c0 <_GLOBAL__sub_I_SystemMode+0x20c>)
   b50d0:	f001 fbbc 	bl	b684c <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b50d4:	493b      	ldr	r1, [pc, #236]	; (b51c4 <_GLOBAL__sub_I_SystemMode+0x210>)
   b50d6:	483c      	ldr	r0, [pc, #240]	; (b51c8 <_GLOBAL__sub_I_SystemMode+0x214>)
   b50d8:	f001 fbb8 	bl	b684c <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b50dc:	493b      	ldr	r1, [pc, #236]	; (b51cc <_GLOBAL__sub_I_SystemMode+0x218>)
   b50de:	483c      	ldr	r0, [pc, #240]	; (b51d0 <_GLOBAL__sub_I_SystemMode+0x21c>)
   b50e0:	f001 fbb4 	bl	b684c <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   b50e4:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b50e6:	493a      	ldr	r1, [pc, #232]	; (b51d0 <_GLOBAL__sub_I_SystemMode+0x21c>)
   b50e8:	f88d 3014 	strb.w	r3, [sp, #20]
   b50ec:	a806      	add	r0, sp, #24
   b50ee:	f001 fac9 	bl	b6684 <_ZN8particle7BleUuidC1ERKS0_>
   b50f2:	4933      	ldr	r1, [pc, #204]	; (b51c0 <_GLOBAL__sub_I_SystemMode+0x20c>)
   b50f4:	a80b      	add	r0, sp, #44	; 0x2c
   b50f6:	f001 fac5 	bl	b6684 <_ZN8particle7BleUuidC1ERKS0_>
   b50fa:	ab0b      	add	r3, sp, #44	; 0x2c
   b50fc:	9300      	str	r3, [sp, #0]
   b50fe:	aa05      	add	r2, sp, #20
   b5100:	ab06      	add	r3, sp, #24
   b5102:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5106:	4933      	ldr	r1, [pc, #204]	; (b51d4 <_GLOBAL__sub_I_SystemMode+0x220>)
   b5108:	4833      	ldr	r0, [pc, #204]	; (b51d8 <_GLOBAL__sub_I_SystemMode+0x224>)
   b510a:	f7ff ff29 	bl	b4f60 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b510e:	4a13      	ldr	r2, [pc, #76]	; (b515c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b5110:	4932      	ldr	r1, [pc, #200]	; (b51dc <_GLOBAL__sub_I_SystemMode+0x228>)
   b5112:	4831      	ldr	r0, [pc, #196]	; (b51d8 <_GLOBAL__sub_I_SystemMode+0x224>)
   b5114:	f003 feac 	bl	b8e70 <__aeabi_atexit>
   b5118:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b511a:	492b      	ldr	r1, [pc, #172]	; (b51c8 <_GLOBAL__sub_I_SystemMode+0x214>)
   b511c:	f88d 3014 	strb.w	r3, [sp, #20]
   b5120:	a806      	add	r0, sp, #24
   b5122:	f001 faaf 	bl	b6684 <_ZN8particle7BleUuidC1ERKS0_>
   b5126:	4926      	ldr	r1, [pc, #152]	; (b51c0 <_GLOBAL__sub_I_SystemMode+0x20c>)
   b5128:	a80b      	add	r0, sp, #44	; 0x2c
   b512a:	f001 faab 	bl	b6684 <_ZN8particle7BleUuidC1ERKS0_>
   b512e:	4b2c      	ldr	r3, [pc, #176]	; (b51e0 <_GLOBAL__sub_I_SystemMode+0x22c>)
   b5130:	9301      	str	r3, [sp, #4]
   b5132:	ab0b      	add	r3, sp, #44	; 0x2c
   b5134:	9300      	str	r3, [sp, #0]
   b5136:	aa05      	add	r2, sp, #20
   b5138:	492a      	ldr	r1, [pc, #168]	; (b51e4 <_GLOBAL__sub_I_SystemMode+0x230>)
   b513a:	9402      	str	r4, [sp, #8]
   b513c:	ab06      	add	r3, sp, #24
   b513e:	482a      	ldr	r0, [pc, #168]	; (b51e8 <_GLOBAL__sub_I_SystemMode+0x234>)
   b5140:	f7ff ff0e 	bl	b4f60 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b5144:	4a05      	ldr	r2, [pc, #20]	; (b515c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b5146:	4925      	ldr	r1, [pc, #148]	; (b51dc <_GLOBAL__sub_I_SystemMode+0x228>)
   b5148:	4827      	ldr	r0, [pc, #156]	; (b51e8 <_GLOBAL__sub_I_SystemMode+0x234>)
   b514a:	b010      	add	sp, #64	; 0x40
   b514c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b5150:	f003 be8e 	b.w	b8e70 <__aeabi_atexit>
   b5154:	2003da5c 	.word	0x2003da5c
   b5158:	ffff0000 	.word	0xffff0000
   b515c:	2003da58 	.word	0x2003da58
   b5160:	000b4155 	.word	0x000b4155
   b5164:	2003dee0 	.word	0x2003dee0
   b5168:	2003df20 	.word	0x2003df20
   b516c:	000b40b3 	.word	0x000b40b3
   b5170:	000b99dc 	.word	0x000b99dc
   b5174:	2003e04c 	.word	0x2003e04c
   b5178:	000b7e69 	.word	0x000b7e69
   b517c:	2003e05c 	.word	0x2003e05c
   b5180:	2003e604 	.word	0x2003e604
   b5184:	2003e0e8 	.word	0x2003e0e8
   b5188:	2003e03c 	.word	0x2003e03c
   b518c:	2003ded0 	.word	0x2003ded0
   b5190:	2003dab4 	.word	0x2003dab4
   b5194:	000b41f5 	.word	0x000b41f5
   b5198:	2003e080 	.word	0x2003e080
   b519c:	2003e090 	.word	0x2003e090
   b51a0:	2003e0a8 	.word	0x2003e0a8
   b51a4:	2003e0bc 	.word	0x2003e0bc
   b51a8:	000b40c3 	.word	0x000b40c3
   b51ac:	2003e0d0 	.word	0x2003e0d0
   b51b0:	000b40b5 	.word	0x000b40b5
   b51b4:	2003e0cc 	.word	0x2003e0cc
   b51b8:	2003df0c 	.word	0x2003df0c
   b51bc:	000b9cce 	.word	0x000b9cce
   b51c0:	2003da68 	.word	0x2003da68
   b51c4:	000b9cf3 	.word	0x000b9cf3
   b51c8:	2003da7c 	.word	0x2003da7c
   b51cc:	000b9d18 	.word	0x000b9d18
   b51d0:	2003da90 	.word	0x2003da90
   b51d4:	000b9d3d 	.word	0x000b9d3d
   b51d8:	2003e5fc 	.word	0x2003e5fc
   b51dc:	000b6d7b 	.word	0x000b6d7b
   b51e0:	000b43f9 	.word	0x000b43f9
   b51e4:	000b9d40 	.word	0x000b9d40
   b51e8:	2003e0e0 	.word	0x2003e0e0

000b51ec <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b51ec:	4770      	bx	lr
	...

000b51f0 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   b51f0:	b538      	push	{r3, r4, r5, lr}
   b51f2:	460c      	mov	r4, r1
   b51f4:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b51f6:	2220      	movs	r2, #32
   b51f8:	2100      	movs	r1, #0
   b51fa:	f104 0008 	add.w	r0, r4, #8
   b51fe:	f004 fa0b 	bl	b9618 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   b5202:	220b      	movs	r2, #11
   b5204:	4904      	ldr	r1, [pc, #16]	; (b5218 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x28>)
   b5206:	4620      	mov	r0, r4
   b5208:	f004 fa56 	bl	b96b8 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
   b520c:	2301      	movs	r3, #1
   b520e:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id   = _sensorID;
   b5210:	69aa      	ldr	r2, [r5, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   b5212:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sensor->min_delay   = 0;
  sensor->max_value   = 0;
  sensor->min_value   = 0;
  sensor->resolution  = 0;
}
   b5216:	bd38      	pop	{r3, r4, r5, pc}
   b5218:	000b9c05 	.word	0x000b9c05

000b521c <_ZN15Adafruit_LIS3DHC1Ev>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   b521c:	4a06      	ldr	r2, [pc, #24]	; (b5238 <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   b521e:	6002      	str	r2, [r0, #0]
   b5220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5224:	6182      	str	r2, [r0, #24]
   b5226:	7742      	strb	r2, [r0, #29]
   b5228:	83c2      	strh	r2, [r0, #30]
   b522a:	22ff      	movs	r2, #255	; 0xff
   b522c:	f880 2020 	strb.w	r2, [r0, #32]
   b5230:	2208      	movs	r2, #8
   b5232:	6242      	str	r2, [r0, #36]	; 0x24
}
   b5234:	4770      	bx	lr
   b5236:	bf00      	nop
   b5238:	000b9d70 	.word	0x000b9d70

000b523c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b523c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b523e:	4c0b      	ldr	r4, [pc, #44]	; (b526c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5240:	7821      	ldrb	r1, [r4, #0]
   b5242:	f3bf 8f5b 	dmb	ish
   b5246:	f011 0101 	ands.w	r1, r1, #1
   b524a:	d10b      	bne.n	b5264 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b524c:	4620      	mov	r0, r4
   b524e:	9101      	str	r1, [sp, #4]
   b5250:	f7fe ff27 	bl	b40a2 <__cxa_guard_acquire>
   b5254:	9901      	ldr	r1, [sp, #4]
   b5256:	b128      	cbz	r0, b5264 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5258:	4805      	ldr	r0, [pc, #20]	; (b5270 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b525a:	f002 fd71 	bl	b7d40 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b525e:	4620      	mov	r0, r4
   b5260:	f7fe ff24 	bl	b40ac <__cxa_guard_release>
        return instance;
    }
   b5264:	4802      	ldr	r0, [pc, #8]	; (b5270 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5266:	b002      	add	sp, #8
   b5268:	bd10      	pop	{r4, pc}
   b526a:	bf00      	nop
   b526c:	2003e620 	.word	0x2003e620
   b5270:	2003e624 	.word	0x2003e624

000b5274 <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   b5274:	b508      	push	{r3, lr}
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   b5276:	f7ff ffe1 	bl	b523c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b527a:	2101      	movs	r1, #1
   b527c:	f002 fd7e 	bl	b7d7c <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b5280:	f7ff ffdc 	bl	b523c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5284:	4905      	ldr	r1, [pc, #20]	; (b529c <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   b5286:	2201      	movs	r2, #1
   b5288:	f002 fdb6 	bl	b7df8 <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
   b528c:	f7ff ffd6 	bl	b523c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   b5290:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b5294:	2100      	movs	r1, #0
   b5296:	f002 bd85 	b.w	b7da4 <_ZN8SPIClass11setDataModeEh>
   b529a:	bf00      	nop
   b529c:	0007a120 	.word	0x0007a120

000b52a0 <_ZN15Adafruit_LIS3DH7spixferEh>:
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   b52a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_sck == -1)
   b52a4:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b52a8:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   b52aa:	4605      	mov	r5, r0
   b52ac:	460f      	mov	r7, r1
  if (_sck == -1)
   b52ae:	d106      	bne.n	b52be <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b52b0:	f7ff ffc4 	bl	b523c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b52b4:	4639      	mov	r1, r7
}
   b52b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b52ba:	f002 bdcf 	b.w	b7e5c <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   b52be:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   b52c0:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   b52c2:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   b52c6:	f995 0020 	ldrsb.w	r0, [r5, #32]
   b52ca:	2100      	movs	r1, #0
   b52cc:	b280      	uxth	r0, r0
   b52ce:	f003 fd4e 	bl	b8d6e <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   b52d2:	f995 001e 	ldrsb.w	r0, [r5, #30]
   b52d6:	fa08 f106 	lsl.w	r1, r8, r6
   b52da:	4039      	ands	r1, r7
   b52dc:	b280      	uxth	r0, r0
   b52de:	f003 fd46 	bl	b8d6e <digitalWrite>
    digitalWrite(_sck, HIGH);
   b52e2:	f995 0020 	ldrsb.w	r0, [r5, #32]
   b52e6:	2101      	movs	r1, #1
   b52e8:	b280      	uxth	r0, r0
   b52ea:	f003 fd40 	bl	b8d6e <digitalWrite>
    if (digitalRead(_miso))
   b52ee:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
   b52f2:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   b52f4:	b280      	uxth	r0, r0
    reply <<= 1;
   b52f6:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   b52f8:	f003 fd52 	bl	b8da0 <digitalRead>
   b52fc:	b108      	cbz	r0, b5302 <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   b52fe:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   b5302:	3e01      	subs	r6, #1
   b5304:	d2df      	bcs.n	b52c6 <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
   b5306:	4620      	mov	r0, r4
   b5308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b530c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   b530c:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   b530e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5312:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   b5314:	4604      	mov	r4, r0
   b5316:	460e      	mov	r6, r1
   b5318:	4615      	mov	r5, r2
  if (_cs == -1) {
   b531a:	d116      	bne.n	b534a <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   b531c:	f003 fd80 	bl	b8e20 <_Z19__fetch_global_Wirev>
   b5320:	7f21      	ldrb	r1, [r4, #28]
   b5322:	f002 fb03 	bl	b792c <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   b5326:	f003 fd7b 	bl	b8e20 <_Z19__fetch_global_Wirev>
   b532a:	6803      	ldr	r3, [r0, #0]
   b532c:	4631      	mov	r1, r6
   b532e:	689b      	ldr	r3, [r3, #8]
   b5330:	4798      	blx	r3
    Wire.write((uint8_t)value);
   b5332:	f003 fd75 	bl	b8e20 <_Z19__fetch_global_Wirev>
   b5336:	6803      	ldr	r3, [r0, #0]
   b5338:	4629      	mov	r1, r5
   b533a:	689b      	ldr	r3, [r3, #8]
   b533c:	4798      	blx	r3
    Wire.endTransmission();
   b533e:	f003 fd6f 	bl	b8e20 <_Z19__fetch_global_Wirev>
}
   b5342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   b5346:	f002 bafc 	b.w	b7942 <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
   b534a:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b534e:	3301      	adds	r3, #1
   b5350:	d101      	bne.n	b5356 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   b5352:	f7ff ff8f 	bl	b5274 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   b5356:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b535a:	2100      	movs	r1, #0
   b535c:	b280      	uxth	r0, r0
   b535e:	f003 fd06 	bl	b8d6e <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   b5362:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b5366:	4620      	mov	r0, r4
   b5368:	f7ff ff9a 	bl	b52a0 <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   b536c:	4629      	mov	r1, r5
   b536e:	4620      	mov	r0, r4
   b5370:	f7ff ff96 	bl	b52a0 <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   b5374:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5378:	2101      	movs	r1, #1
}
   b537a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   b537e:	b280      	uxth	r0, r0
   b5380:	f003 bcf5 	b.w	b8d6e <digitalWrite>

000b5384 <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   b5384:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   b5386:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b538a:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   b538c:	4604      	mov	r4, r0
   b538e:	460d      	mov	r5, r1
  if (_cs == -1) {
   b5390:	d11d      	bne.n	b53ce <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   b5392:	f003 fd45 	bl	b8e20 <_Z19__fetch_global_Wirev>
   b5396:	f994 101c 	ldrsb.w	r1, [r4, #28]
   b539a:	f002 facb 	bl	b7934 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   b539e:	f003 fd3f 	bl	b8e20 <_Z19__fetch_global_Wirev>
   b53a2:	6803      	ldr	r3, [r0, #0]
   b53a4:	4629      	mov	r1, r5
   b53a6:	689b      	ldr	r3, [r3, #8]
   b53a8:	4798      	blx	r3
    Wire.endTransmission();
   b53aa:	f003 fd39 	bl	b8e20 <_Z19__fetch_global_Wirev>
   b53ae:	f002 fac8 	bl	b7942 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
   b53b2:	f003 fd35 	bl	b8e20 <_Z19__fetch_global_Wirev>
   b53b6:	7f21      	ldrb	r1, [r4, #28]
   b53b8:	2201      	movs	r2, #1
   b53ba:	f002 fab4 	bl	b7926 <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   b53be:	f003 fd2f 	bl	b8e20 <_Z19__fetch_global_Wirev>
   b53c2:	6803      	ldr	r3, [r0, #0]
   b53c4:	695b      	ldr	r3, [r3, #20]
   b53c6:	4798      	blx	r3
   b53c8:	b2c5      	uxtb	r5, r0
}
   b53ca:	4628      	mov	r0, r5
   b53cc:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
   b53ce:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b53d2:	3301      	adds	r3, #1
   b53d4:	d101      	bne.n	b53da <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   b53d6:	f7ff ff4d 	bl	b5274 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
   b53da:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b53de:	2100      	movs	r1, #0
   b53e0:	b280      	uxth	r0, r0
   b53e2:	f003 fcc4 	bl	b8d6e <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   b53e6:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b53ea:	4620      	mov	r0, r4
   b53ec:	f7ff ff58 	bl	b52a0 <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   b53f0:	2100      	movs	r1, #0
   b53f2:	4620      	mov	r0, r4
   b53f4:	f7ff ff54 	bl	b52a0 <_ZN15Adafruit_LIS3DH7spixferEh>
   b53f8:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   b53fa:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b53fe:	2101      	movs	r1, #1
   b5400:	b280      	uxth	r0, r0
   b5402:	f003 fcb4 	bl	b8d6e <digitalWrite>
    if (_sck == -1)
   b5406:	e7e0      	b.n	b53ca <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

000b5408 <_ZN15Adafruit_LIS3DH8getRangeEv>:
{
   b5408:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   b540a:	2123      	movs	r1, #35	; 0x23
   b540c:	f7ff ffba 	bl	b5384 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   b5410:	f3c0 1001 	ubfx	r0, r0, #4, #2
   b5414:	bd08      	pop	{r3, pc}

000b5416 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
   b5416:	b538      	push	{r3, r4, r5, lr}
   b5418:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   b541a:	2120      	movs	r1, #32
{
   b541c:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   b541e:	f7ff ffb1 	bl	b5384 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
   b5422:	f000 030f 	and.w	r3, r0, #15
  ctl1 |= (dataRate << 4);
   b5426:	ea43 1205 	orr.w	r2, r3, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   b542a:	4620      	mov	r0, r4
   b542c:	b2d2      	uxtb	r2, r2
}
   b542e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   b5432:	2120      	movs	r1, #32
   b5434:	f7ff bf6a 	b.w	b530c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000b5438 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
   b5438:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   b543a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b543e:	3301      	adds	r3, #1
void Adafruit_LIS3DH::read(void) {
   b5440:	4604      	mov	r4, r0
  if (_cs == -1) {
   b5442:	d177      	bne.n	b5534 <_ZN15Adafruit_LIS3DH4readEv+0xfc>
    Wire.beginTransmission(_i2caddr);
   b5444:	f003 fcec 	bl	b8e20 <_Z19__fetch_global_Wirev>
   b5448:	f994 101c 	ldrsb.w	r1, [r4, #28]
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   b544c:	4d5d      	ldr	r5, [pc, #372]	; (b55c4 <_ZN15Adafruit_LIS3DH4readEv+0x18c>)
    Wire.beginTransmission(_i2caddr);
   b544e:	f002 fa71 	bl	b7934 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   b5452:	f003 fce5 	bl	b8e20 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5456:	6803      	ldr	r3, [r0, #0]
   b5458:	21a8      	movs	r1, #168	; 0xa8
   b545a:	689b      	ldr	r3, [r3, #8]
   b545c:	4798      	blx	r3
    Wire.endTransmission();
   b545e:	f003 fcdf 	bl	b8e20 <_Z19__fetch_global_Wirev>
   b5462:	f002 fa6e 	bl	b7942 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
   b5466:	f003 fcdb 	bl	b8e20 <_Z19__fetch_global_Wirev>
   b546a:	7f21      	ldrb	r1, [r4, #28]
   b546c:	2206      	movs	r2, #6
   b546e:	f002 fa5a 	bl	b7926 <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   b5472:	f003 fcd5 	bl	b8e20 <_Z19__fetch_global_Wirev>
   b5476:	6803      	ldr	r3, [r0, #0]
   b5478:	695b      	ldr	r3, [r3, #20]
   b547a:	4798      	blx	r3
   b547c:	80e0      	strh	r0, [r4, #6]
   b547e:	f003 fccf 	bl	b8e20 <_Z19__fetch_global_Wirev>
   b5482:	6803      	ldr	r3, [r0, #0]
   b5484:	695b      	ldr	r3, [r3, #20]
   b5486:	4798      	blx	r3
   b5488:	88e3      	ldrh	r3, [r4, #6]
   b548a:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b548e:	4318      	orrs	r0, r3
   b5490:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   b5492:	f003 fcc5 	bl	b8e20 <_Z19__fetch_global_Wirev>
   b5496:	6803      	ldr	r3, [r0, #0]
   b5498:	695b      	ldr	r3, [r3, #20]
   b549a:	4798      	blx	r3
   b549c:	8120      	strh	r0, [r4, #8]
   b549e:	f003 fcbf 	bl	b8e20 <_Z19__fetch_global_Wirev>
   b54a2:	6803      	ldr	r3, [r0, #0]
   b54a4:	695b      	ldr	r3, [r3, #20]
   b54a6:	4798      	blx	r3
   b54a8:	8923      	ldrh	r3, [r4, #8]
   b54aa:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b54ae:	4318      	orrs	r0, r3
   b54b0:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   b54b2:	f003 fcb5 	bl	b8e20 <_Z19__fetch_global_Wirev>
   b54b6:	6803      	ldr	r3, [r0, #0]
   b54b8:	695b      	ldr	r3, [r3, #20]
   b54ba:	4798      	blx	r3
   b54bc:	8160      	strh	r0, [r4, #10]
   b54be:	f003 fcaf 	bl	b8e20 <_Z19__fetch_global_Wirev>
   b54c2:	6803      	ldr	r3, [r0, #0]
   b54c4:	695b      	ldr	r3, [r3, #20]
   b54c6:	4798      	blx	r3
   b54c8:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b54cc:	8965      	ldrh	r5, [r4, #10]
   b54ce:	4328      	orrs	r0, r5
   b54d0:	8160      	strh	r0, [r4, #10]
  uint8_t range = getRange();
   b54d2:	4620      	mov	r0, r4
   b54d4:	f7ff ff98 	bl	b5408 <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   b54d8:	2803      	cmp	r0, #3
   b54da:	d069      	beq.n	b55b0 <_ZN15Adafruit_LIS3DH4readEv+0x178>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   b54dc:	2802      	cmp	r0, #2
   b54de:	d06a      	beq.n	b55b6 <_ZN15Adafruit_LIS3DH4readEv+0x17e>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   b54e0:	2801      	cmp	r0, #1
   b54e2:	d06b      	beq.n	b55bc <_ZN15Adafruit_LIS3DH4readEv+0x184>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   b54e4:	2800      	cmp	r0, #0
   b54e6:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   b54ea:	bf18      	it	ne
   b54ec:	2301      	movne	r3, #1
  x_g = (float)x / divider;
   b54ee:	ee07 3a90 	vmov	s15, r3
   b54f2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   b54f6:	ee07 3a10 	vmov	s14, r3
   b54fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b54fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   b5502:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  x_g = (float)x / divider;
   b5506:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   b550a:	ee07 3a10 	vmov	s14, r3
   b550e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_g = (float)x / divider;
   b5512:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   b5516:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   b551a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b551e:	ee07 3a10 	vmov	s14, r3
   b5522:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   b5526:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   b552a:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b552e:	edc4 6a05 	vstr	s13, [r4, #20]
}
   b5532:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
   b5534:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b5538:	3301      	adds	r3, #1
   b553a:	d101      	bne.n	b5540 <_ZN15Adafruit_LIS3DH4readEv+0x108>
      beginTransaction();
   b553c:	f7ff fe9a 	bl	b5274 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   b5540:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5544:	2100      	movs	r1, #0
   b5546:	b280      	uxth	r0, r0
   b5548:	f003 fc11 	bl	b8d6e <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   b554c:	21e8      	movs	r1, #232	; 0xe8
   b554e:	4620      	mov	r0, r4
   b5550:	f7ff fea6 	bl	b52a0 <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   b5554:	21ff      	movs	r1, #255	; 0xff
   b5556:	4620      	mov	r0, r4
   b5558:	f7ff fea2 	bl	b52a0 <_ZN15Adafruit_LIS3DH7spixferEh>
   b555c:	21ff      	movs	r1, #255	; 0xff
   b555e:	80e0      	strh	r0, [r4, #6]
   b5560:	4620      	mov	r0, r4
   b5562:	f7ff fe9d 	bl	b52a0 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5566:	88e3      	ldrh	r3, [r4, #6]
   b5568:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b556c:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   b556e:	21ff      	movs	r1, #255	; 0xff
   b5570:	4620      	mov	r0, r4
   b5572:	f7ff fe95 	bl	b52a0 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5576:	21ff      	movs	r1, #255	; 0xff
   b5578:	8120      	strh	r0, [r4, #8]
   b557a:	4620      	mov	r0, r4
   b557c:	f7ff fe90 	bl	b52a0 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5580:	8923      	ldrh	r3, [r4, #8]
   b5582:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b5586:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   b5588:	21ff      	movs	r1, #255	; 0xff
   b558a:	4620      	mov	r0, r4
   b558c:	f7ff fe88 	bl	b52a0 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5590:	21ff      	movs	r1, #255	; 0xff
   b5592:	8160      	strh	r0, [r4, #10]
   b5594:	4620      	mov	r0, r4
   b5596:	f7ff fe83 	bl	b52a0 <_ZN15Adafruit_LIS3DH7spixferEh>
   b559a:	8963      	ldrh	r3, [r4, #10]
   b559c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b55a0:	8160      	strh	r0, [r4, #10]
    digitalWrite(_cs, HIGH);
   b55a2:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b55a6:	2101      	movs	r1, #1
   b55a8:	b280      	uxth	r0, r0
   b55aa:	f003 fbe0 	bl	b8d6e <digitalWrite>
    if (_sck == -1)
   b55ae:	e790      	b.n	b54d2 <_ZN15Adafruit_LIS3DH4readEv+0x9a>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   b55b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   b55b4:	e79b      	b.n	b54ee <_ZN15Adafruit_LIS3DH4readEv+0xb6>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   b55b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   b55ba:	e798      	b.n	b54ee <_ZN15Adafruit_LIS3DH4readEv+0xb6>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   b55bc:	f641 73fe 	movw	r3, #8190	; 0x1ffe
   b55c0:	e795      	b.n	b54ee <_ZN15Adafruit_LIS3DH4readEv+0xb6>
   b55c2:	bf00      	nop
   b55c4:	00ffff00 	.word	0x00ffff00

000b55c8 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   b55c8:	b570      	push	{r4, r5, r6, lr}
   b55ca:	460c      	mov	r4, r1
   b55cc:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b55ce:	2220      	movs	r2, #32
   b55d0:	2100      	movs	r1, #0
   b55d2:	1d20      	adds	r0, r4, #4
   b55d4:	f004 f820 	bl	b9618 <memset>
  event->version   = sizeof(sensors_event_t);
   b55d8:	2324      	movs	r3, #36	; 0x24
   b55da:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b55dc:	69ab      	ldr	r3, [r5, #24]
   b55de:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   b55e0:	2601      	movs	r6, #1
  read();
   b55e2:	4628      	mov	r0, r5
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   b55e4:	60a6      	str	r6, [r4, #8]
  read();
   b55e6:	f7ff ff27 	bl	b5438 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
   b55ea:	68eb      	ldr	r3, [r5, #12]
   b55ec:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   b55ee:	692b      	ldr	r3, [r5, #16]
   b55f0:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   b55f2:	696b      	ldr	r3, [r5, #20]
   b55f4:	61e3      	str	r3, [r4, #28]
}
   b55f6:	4630      	mov	r0, r6
   b55f8:	bd70      	pop	{r4, r5, r6, pc}

000b55fa <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   b55fa:	b510      	push	{r4, lr}
   b55fc:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   b55fe:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
   b5600:	f990 001d 	ldrsb.w	r0, [r0, #29]
   b5604:	1c42      	adds	r2, r0, #1
   b5606:	d123      	bne.n	b5650 <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
   b5608:	f003 fc0a 	bl	b8e20 <_Z19__fetch_global_Wirev>
   b560c:	f002 f95c 	bl	b78c8 <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   b5610:	210f      	movs	r1, #15
   b5612:	4620      	mov	r0, r4
   b5614:	f7ff feb6 	bl	b5384 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   b5618:	2833      	cmp	r0, #51	; 0x33
   b561a:	d13d      	bne.n	b5698 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   b561c:	2207      	movs	r2, #7
   b561e:	2120      	movs	r1, #32
   b5620:	4620      	mov	r0, r4
   b5622:	f7ff fe73 	bl	b530c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
   b5626:	2107      	movs	r1, #7
   b5628:	4620      	mov	r0, r4
   b562a:	f7ff fef4 	bl	b5416 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   b562e:	2288      	movs	r2, #136	; 0x88
   b5630:	2123      	movs	r1, #35	; 0x23
   b5632:	4620      	mov	r0, r4
   b5634:	f7ff fe6a 	bl	b530c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   b5638:	2210      	movs	r2, #16
   b563a:	2122      	movs	r1, #34	; 0x22
   b563c:	4620      	mov	r0, r4
   b563e:	f7ff fe65 	bl	b530c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   b5642:	4620      	mov	r0, r4
   b5644:	2280      	movs	r2, #128	; 0x80
   b5646:	211f      	movs	r1, #31
   b5648:	f7ff fe60 	bl	b530c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
   b564c:	2001      	movs	r0, #1
}
   b564e:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   b5650:	2101      	movs	r1, #1
   b5652:	b280      	uxth	r0, r0
   b5654:	f003 fb8b 	bl	b8d6e <digitalWrite>
    pinMode(_cs, OUTPUT);
   b5658:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b565c:	2101      	movs	r1, #1
   b565e:	b280      	uxth	r0, r0
   b5660:	f003 fb74 	bl	b8d4c <pinMode>
    if (_sck == -1) {
   b5664:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5668:	1c43      	adds	r3, r0, #1
   b566a:	d104      	bne.n	b5676 <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
   b566c:	f7ff fde6 	bl	b523c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5670:	f002 fb70 	bl	b7d54 <_ZN8SPIClass5beginEv>
    }
   b5674:	e7cc      	b.n	b5610 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
   b5676:	2101      	movs	r1, #1
   b5678:	b280      	uxth	r0, r0
   b567a:	f003 fb67 	bl	b8d4c <pinMode>
      pinMode(_mosi, OUTPUT);
   b567e:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b5682:	2101      	movs	r1, #1
   b5684:	b280      	uxth	r0, r0
   b5686:	f003 fb61 	bl	b8d4c <pinMode>
      pinMode(_miso, INPUT);
   b568a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b568e:	2100      	movs	r1, #0
   b5690:	b280      	uxth	r0, r0
   b5692:	f003 fb5b 	bl	b8d4c <pinMode>
   b5696:	e7bb      	b.n	b5610 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
   b5698:	2000      	movs	r0, #0
   b569a:	e7d8      	b.n	b564e <_ZN15Adafruit_LIS3DH5beginEh+0x54>

000b569c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
size_t Print::print(T n, int base)
   b569c:	b570      	push	{r4, r5, r6, lr}
        if (n < 0 && base == 10) {
   b569e:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b56a0:	4606      	mov	r6, r0
   b56a2:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b56a4:	da0b      	bge.n	b56be <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b56a6:	2a0a      	cmp	r2, #10
   b56a8:	d109      	bne.n	b56be <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b56aa:	212d      	movs	r1, #45	; 0x2d
   b56ac:	f002 fac0 	bl	b7c30 <_ZN5Print5printEc>
            val = -n;
   b56b0:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b56b2:	b2ea      	uxtb	r2, r5
   b56b4:	4630      	mov	r0, r6
    }
}
   b56b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b56ba:	f002 bad8 	b.w	b7c6e <_ZN5Print11printNumberEmh>
            val = n;
   b56be:	4621      	mov	r1, r4
   b56c0:	e7f7      	b.n	b56b2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b56c2 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b56c2:	b510      	push	{r4, lr}
   b56c4:	4604      	mov	r4, r0
   b56c6:	f003 f82d 	bl	b8724 <_ZN9TCPClientC1Ev>
{

}
   b56ca:	4620      	mov	r0, r4
   b56cc:	bd10      	pop	{r4, pc}
	...

000b56d0 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b56d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   b56d2:	4f0f      	ldr	r7, [pc, #60]	; (b5710 <_ZN10HttpClient10sendHeaderEPKcS1_+0x40>)
{
   b56d4:	4605      	mov	r5, r0
   b56d6:	4614      	mov	r4, r2
   b56d8:	460e      	mov	r6, r1
    client.print(aHeaderName);
   b56da:	f002 faa5 	bl	b7c28 <_ZN5Print5printEPKc>
    client.print(": ");
   b56de:	4639      	mov	r1, r7
   b56e0:	4628      	mov	r0, r5
   b56e2:	f002 faa1 	bl	b7c28 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b56e6:	4621      	mov	r1, r4
   b56e8:	4628      	mov	r0, r5
   b56ea:	f002 fab6 	bl	b7c5a <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.print(aHeaderName);
   b56ee:	f003 f98b 	bl	b8a08 <_Z16_fetch_usbserialv>
   b56f2:	4631      	mov	r1, r6
   b56f4:	f002 fa98 	bl	b7c28 <_ZN5Print5printEPKc>
    Serial.print(": ");
   b56f8:	f003 f986 	bl	b8a08 <_Z16_fetch_usbserialv>
   b56fc:	4639      	mov	r1, r7
   b56fe:	f002 fa93 	bl	b7c28 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   b5702:	f003 f981 	bl	b8a08 <_Z16_fetch_usbserialv>
   b5706:	4621      	mov	r1, r4
    #endif
}
   b5708:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(aHeaderValue);
   b570c:	f002 baa5 	b.w	b7c5a <_ZN5Print7printlnEPKc>
   b5710:	000b998d 	.word	0x000b998d

000b5714 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b5714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   b5716:	4f14      	ldr	r7, [pc, #80]	; (b5768 <_ZN10HttpClient10sendHeaderEPKci+0x54>)
{
   b5718:	4604      	mov	r4, r0
   b571a:	4615      	mov	r5, r2
   b571c:	460e      	mov	r6, r1
    client.print(aHeaderName);
   b571e:	f002 fa83 	bl	b7c28 <_ZN5Print5printEPKc>
    client.print(": ");
   b5722:	4639      	mov	r1, r7
   b5724:	4620      	mov	r0, r4
   b5726:	f002 fa7f 	bl	b7c28 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b572a:	220a      	movs	r2, #10
   b572c:	4629      	mov	r1, r5
   b572e:	4620      	mov	r0, r4
   b5730:	f7ff ffb4 	bl	b569c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b5734:	4620      	mov	r0, r4
   b5736:	f002 fa84 	bl	b7c42 <_ZN5Print7printlnEv>
    client.println(aHeaderValue);

    #ifdef LOGGING
    Serial.print(aHeaderName);
   b573a:	f003 f965 	bl	b8a08 <_Z16_fetch_usbserialv>
   b573e:	4631      	mov	r1, r6
   b5740:	f002 fa72 	bl	b7c28 <_ZN5Print5printEPKc>
    Serial.print(": ");
   b5744:	f003 f960 	bl	b8a08 <_Z16_fetch_usbserialv>
   b5748:	4639      	mov	r1, r7
   b574a:	f002 fa6d 	bl	b7c28 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   b574e:	f003 f95b 	bl	b8a08 <_Z16_fetch_usbserialv>
   b5752:	4629      	mov	r1, r5
   b5754:	4604      	mov	r4, r0
size_t Print::print(T n, int base)
   b5756:	220a      	movs	r2, #10
   b5758:	f7ff ffa0 	bl	b569c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b575c:	4620      	mov	r0, r4
    #endif
}
   b575e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5762:	f002 ba6e 	b.w	b7c42 <_ZN5Print7printlnEv>
   b5766:	bf00      	nop
   b5768:	000b998d 	.word	0x000b998d

000b576c <_ZN10HttpClient10sendHeaderEPKc>:

void HttpClient::sendHeader(const char* aHeaderName)
{
   b576c:	b510      	push	{r4, lr}
   b576e:	460c      	mov	r4, r1
    client.println(aHeaderName);
   b5770:	f002 fa73 	bl	b7c5a <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.println(aHeaderName);
   b5774:	f003 f948 	bl	b8a08 <_Z16_fetch_usbserialv>
   b5778:	4621      	mov	r1, r4
    #endif
}
   b577a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(aHeaderName);
   b577e:	f002 ba6c 	b.w	b7c5a <_ZN5Print7printlnEPKc>
	...

000b5784 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b5784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5788:	460e      	mov	r6, r1
   b578a:	b091      	sub	sp, #68	; 0x44
   b578c:	461f      	mov	r7, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b578e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5792:	6013      	str	r3, [r2, #0]
{
   b5794:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5796:	2100      	movs	r1, #0
   b5798:	4630      	mov	r0, r6
   b579a:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b579e:	4690      	mov	r8, r2
   b57a0:	f002 fc49 	bl	b8036 <_ZNK6String6equalsEPKc>
   b57a4:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b57a8:	4603      	mov	r3, r0
   b57aa:	b9c0      	cbnz	r0, b57de <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x5a>
	const char * c_str() const { return buffer; }
   b57ac:	f1be 0f00 	cmp.w	lr, #0
   b57b0:	bf14      	ite	ne
   b57b2:	4672      	movne	r2, lr
   b57b4:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b57b6:	6831      	ldr	r1, [r6, #0]
   b57b8:	b292      	uxth	r2, r2
   b57ba:	4620      	mov	r0, r4
   b57bc:	f002 fdb2 	bl	b8324 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b57c0:	1e05      	subs	r5, r0, #0
   b57c2:	bf18      	it	ne
   b57c4:	2501      	movne	r5, #1
    }

    #ifdef LOGGING
    if (connected) {
   b57c6:	b9ed      	cbnz	r5, b5804 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x80>
            Serial.print(aRequest.ip);
        }
        Serial.print(":");
        Serial.println(aRequest.port);
    } else {
        Serial.println("HttpClient>\tConnection failed.");
   b57c8:	f003 f91e 	bl	b8a08 <_Z16_fetch_usbserialv>
   b57cc:	49be      	ldr	r1, [pc, #760]	; (b5ac8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x344>)
   b57ce:	f002 fa44 	bl	b7c5a <_ZN5Print7printlnEPKc>
    }
    #endif

    if (!connected) {
        client.stop();
   b57d2:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b57d4:	b011      	add	sp, #68	; 0x44
   b57d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b57da:	f002 bf59 	b.w	b8690 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b57de:	4bbb      	ldr	r3, [pc, #748]	; (b5acc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x348>)
   b57e0:	930a      	str	r3, [sp, #40]	; 0x28
   b57e2:	f106 0c14 	add.w	ip, r6, #20
   b57e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b57ea:	ad0b      	add	r5, sp, #44	; 0x2c
   b57ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b57ee:	f8dc 3000 	ldr.w	r3, [ip]
   b57f2:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b57f4:	fa1f f28e 	uxth.w	r2, lr
   b57f8:	2300      	movs	r3, #0
   b57fa:	a90a      	add	r1, sp, #40	; 0x28
   b57fc:	4620      	mov	r0, r4
   b57fe:	f002 fe71 	bl	b84e4 <_ZN9TCPClient7connectE9IPAddresstm>
   b5802:	e7dd      	b.n	b57c0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5804:	2100      	movs	r1, #0
   b5806:	4630      	mov	r0, r6
   b5808:	f002 fc15 	bl	b8036 <_ZNK6String6equalsEPKc>
        if(aRequest.hostname!=NULL) {
   b580c:	2800      	cmp	r0, #0
   b580e:	d15d      	bne.n	b58cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x148>
            Serial.print("HttpClient>\tConnecting to: ");
   b5810:	f003 f8fa 	bl	b8a08 <_Z16_fetch_usbserialv>
   b5814:	49ae      	ldr	r1, [pc, #696]	; (b5ad0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x34c>)
   b5816:	f002 fa07 	bl	b7c28 <_ZN5Print5printEPKc>
            Serial.print(aRequest.hostname);
   b581a:	f003 f8f5 	bl	b8a08 <_Z16_fetch_usbserialv>
   b581e:	6831      	ldr	r1, [r6, #0]
   b5820:	f002 fa02 	bl	b7c28 <_ZN5Print5printEPKc>
        Serial.print(":");
   b5824:	f003 f8f0 	bl	b8a08 <_Z16_fetch_usbserialv>
   b5828:	49aa      	ldr	r1, [pc, #680]	; (b5ad4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   b582a:	f002 f9fd 	bl	b7c28 <_ZN5Print5printEPKc>
        Serial.println(aRequest.port);
   b582e:	f003 f8eb 	bl	b8a08 <_Z16_fetch_usbserialv>
   b5832:	220a      	movs	r2, #10
   b5834:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   b5836:	4682      	mov	sl, r0
size_t Print::print(T n, int base)
   b5838:	f7ff ff30 	bl	b569c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b583c:	4650      	mov	r0, sl
   b583e:	f002 fa00 	bl	b7c42 <_ZN5Print7printlnEv>
    client.print(aHttpMethod);
   b5842:	4649      	mov	r1, r9
   b5844:	4620      	mov	r0, r4
   b5846:	f002 f9ef 	bl	b7c28 <_ZN5Print5printEPKc>
    client.print(" ");
   b584a:	49a3      	ldr	r1, [pc, #652]	; (b5ad8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   b584c:	4620      	mov	r0, r4
   b584e:	f002 f9eb 	bl	b7c28 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b5852:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b5854:	4620      	mov	r0, r4
   b5856:	f002 f9e7 	bl	b7c28 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b585a:	49a0      	ldr	r1, [pc, #640]	; (b5adc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   b585c:	4620      	mov	r0, r4
   b585e:	f002 f9e3 	bl	b7c28 <_ZN5Print5printEPKc>
    Serial.println("HttpClient>\tStart of HTTP Request.");
   b5862:	f003 f8d1 	bl	b8a08 <_Z16_fetch_usbserialv>
   b5866:	499e      	ldr	r1, [pc, #632]	; (b5ae0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x35c>)
   b5868:	f002 f9f7 	bl	b7c5a <_ZN5Print7printlnEPKc>
    Serial.print(aHttpMethod);
   b586c:	f003 f8cc 	bl	b8a08 <_Z16_fetch_usbserialv>
   b5870:	4649      	mov	r1, r9
   b5872:	f002 f9d9 	bl	b7c28 <_ZN5Print5printEPKc>
    Serial.print(" ");
   b5876:	f003 f8c7 	bl	b8a08 <_Z16_fetch_usbserialv>
   b587a:	4997      	ldr	r1, [pc, #604]	; (b5ad8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   b587c:	f002 f9d4 	bl	b7c28 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
   b5880:	f003 f8c2 	bl	b8a08 <_Z16_fetch_usbserialv>
   b5884:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b5886:	f002 f9cf 	bl	b7c28 <_ZN5Print5printEPKc>
    Serial.print(" HTTP/1.0\r\n");
   b588a:	f003 f8bd 	bl	b8a08 <_Z16_fetch_usbserialv>
   b588e:	4993      	ldr	r1, [pc, #588]	; (b5adc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   b5890:	f002 f9ca 	bl	b7c28 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b5894:	4993      	ldr	r1, [pc, #588]	; (b5ae4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x360>)
   b5896:	4a94      	ldr	r2, [pc, #592]	; (b5ae8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x364>)
   b5898:	4620      	mov	r0, r4
   b589a:	f7ff ff19 	bl	b56d0 <_ZN10HttpClient10sendHeaderEPKcS1_>
   b589e:	2100      	movs	r1, #0
   b58a0:	4630      	mov	r0, r6
   b58a2:	f002 fbc8 	bl	b8036 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b58a6:	b920      	cbnz	r0, b58b2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x12e>
        sendHeader("HOST", aRequest.hostname.c_str());
   b58a8:	6832      	ldr	r2, [r6, #0]
   b58aa:	4990      	ldr	r1, [pc, #576]	; (b5aec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x368>)
   b58ac:	4620      	mov	r0, r4
   b58ae:	f7ff ff0f 	bl	b56d0 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b58b2:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b58b6:	2100      	movs	r1, #0
   b58b8:	4650      	mov	r0, sl
   b58ba:	f002 fbbc 	bl	b8036 <_ZNK6String6equalsEPKc>
   b58be:	b988      	cbnz	r0, b58e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x160>
        sendHeader("Content-Length", (aRequest.body).length());
   b58c0:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b58c2:	498b      	ldr	r1, [pc, #556]	; (b5af0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x36c>)
   b58c4:	4620      	mov	r0, r4
   b58c6:	f7ff ff25 	bl	b5714 <_ZN10HttpClient10sendHeaderEPKci>
   b58ca:	e012      	b.n	b58f2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16e>
            Serial.print("HttpClient>\tConnecting to IP: ");
   b58cc:	f003 f89c 	bl	b8a08 <_Z16_fetch_usbserialv>
   b58d0:	4988      	ldr	r1, [pc, #544]	; (b5af4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x370>)
   b58d2:	f002 f9a9 	bl	b7c28 <_ZN5Print5printEPKc>
            Serial.print(aRequest.ip);
   b58d6:	f003 f897 	bl	b8a08 <_Z16_fetch_usbserialv>
   b58da:	f106 0110 	add.w	r1, r6, #16
   b58de:	f002 f9aa 	bl	b7c36 <_ZN5Print5printERK9Printable>
   b58e2:	e79f      	b.n	b5824 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xa0>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b58e4:	4984      	ldr	r1, [pc, #528]	; (b5af8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x374>)
   b58e6:	4648      	mov	r0, r9
   b58e8:	f003 fecc 	bl	b9684 <strcmp>
   b58ec:	4602      	mov	r2, r0
   b58ee:	2800      	cmp	r0, #0
   b58f0:	d0e7      	beq.n	b58c2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x13e>
    if (headers != NULL)
   b58f2:	b15f      	cbz	r7, b590c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x188>
        while (headers[i].header != NULL)
   b58f4:	6839      	ldr	r1, [r7, #0]
   b58f6:	b149      	cbz	r1, b590c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x188>
            if (headers[i].value != NULL) {
   b58f8:	687a      	ldr	r2, [r7, #4]
                sendHeader(headers[i].header, headers[i].value);
   b58fa:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b58fc:	b11a      	cbz	r2, b5906 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
                sendHeader(headers[i].header, headers[i].value);
   b58fe:	f7ff fee7 	bl	b56d0 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b5902:	3708      	adds	r7, #8
        while (headers[i].header != NULL)
   b5904:	e7f6      	b.n	b58f4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
                sendHeader(headers[i].header);
   b5906:	f7ff ff31 	bl	b576c <_ZN10HttpClient10sendHeaderEPKc>
   b590a:	e7fa      	b.n	b5902 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17e>
    client.println();
   b590c:	4620      	mov	r0, r4
   b590e:	f002 f998 	bl	b7c42 <_ZN5Print7printlnEv>
    client.flush();
   b5912:	4620      	mov	r0, r4
   b5914:	f002 fc66 	bl	b81e4 <_ZN9TCPClient5flushEv>
   b5918:	2100      	movs	r1, #0
   b591a:	4650      	mov	r0, sl
   b591c:	f002 fb8b 	bl	b8036 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b5920:	b940      	cbnz	r0, b5934 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b0>
        client.println(aRequest.body);
   b5922:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b5924:	4620      	mov	r0, r4
   b5926:	f002 f998 	bl	b7c5a <_ZN5Print7printlnEPKc>
        Serial.println(aRequest.body);
   b592a:	f003 f86d 	bl	b8a08 <_Z16_fetch_usbserialv>
   b592e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b5930:	f002 f993 	bl	b7c5a <_ZN5Print7printlnEPKc>
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   b5934:	f003 f868 	bl	b8a08 <_Z16_fetch_usbserialv>
    memset(&buffer[0], 0, sizeof(buffer));
   b5938:	f104 0a1c 	add.w	sl, r4, #28
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   b593c:	496f      	ldr	r1, [pc, #444]	; (b5afc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x378>)
   b593e:	f002 f98c 	bl	b7c5a <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b5942:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5946:	2100      	movs	r1, #0
   b5948:	4650      	mov	r0, sl
   b594a:	f003 fe65 	bl	b9618 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b594e:	f000 f9cf 	bl	b5cf0 <HAL_Timer_Get_Milli_Seconds>
   b5952:	9000      	str	r0, [sp, #0]
   b5954:	f000 f9cc 	bl	b5cf0 <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
   b5958:	2600      	movs	r6, #0
   b595a:	9001      	str	r0, [sp, #4]
        int bytes = client.available();
   b595c:	4620      	mov	r0, r4
   b595e:	f002 fe3d 	bl	b85dc <_ZN9TCPClient9availableEv>
        if(bytes) {
   b5962:	4681      	mov	r9, r0
   b5964:	b178      	cbz	r0, b5986 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x202>
            Serial.print("\r\nHttpClient>\tReceiving TCP transaction of ");
   b5966:	f003 f84f 	bl	b8a08 <_Z16_fetch_usbserialv>
   b596a:	4965      	ldr	r1, [pc, #404]	; (b5b00 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x37c>)
   b596c:	f002 f95c 	bl	b7c28 <_ZN5Print5printEPKc>
            Serial.print(bytes);
   b5970:	f003 f84a 	bl	b8a08 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   b5974:	4649      	mov	r1, r9
   b5976:	220a      	movs	r2, #10
   b5978:	f7ff fe90 	bl	b569c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
            Serial.println(" bytes.");
   b597c:	f003 f844 	bl	b8a08 <_Z16_fetch_usbserialv>
   b5980:	4960      	ldr	r1, [pc, #384]	; (b5b04 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x380>)
   b5982:	f002 f96a 	bl	b7c5a <_ZN5Print7printlnEPKc>
    unsigned int bufferPosition = 0;
   b5986:	f04f 0b00 	mov.w	fp, #0
        while (client.available()) {
   b598a:	4620      	mov	r0, r4
   b598c:	f002 fe26 	bl	b85dc <_ZN9TCPClient9availableEv>
   b5990:	b320      	cbz	r0, b59dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x258>
            char c = client.read();
   b5992:	4620      	mov	r0, r4
   b5994:	f002 fc0c 	bl	b81b0 <_ZN9TCPClient4readEv>
   b5998:	b2c7      	uxtb	r7, r0
            Serial.print(c);
   b599a:	f003 f835 	bl	b8a08 <_Z16_fetch_usbserialv>
   b599e:	4639      	mov	r1, r7
   b59a0:	f002 f946 	bl	b7c30 <_ZN5Print5printEc>
   b59a4:	f000 f9a4 	bl	b5cf0 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b59a8:	f240 33fe 	movw	r3, #1022	; 0x3fe
   b59ac:	429e      	cmp	r6, r3
   b59ae:	9000      	str	r0, [sp, #0]
   b59b0:	d803      	bhi.n	b59ba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x236>
                buffer[bufferPosition] = c;
   b59b2:	f80a 7006 	strb.w	r7, [sl, r6]
            bufferPosition++;
   b59b6:	3601      	adds	r6, #1
        while (client.available()) {
   b59b8:	e7e7      	b.n	b598a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x206>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b59ba:	f240 33ff 	movw	r3, #1023	; 0x3ff
   b59be:	429e      	cmp	r6, r3
   b59c0:	d1f9      	bne.n	b59b6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x232>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b59c2:	2300      	movs	r3, #0
   b59c4:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   b59c8:	4620      	mov	r0, r4
   b59ca:	f002 fe61 	bl	b8690 <_ZN9TCPClient4stopEv>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
   b59ce:	f003 f81b 	bl	b8a08 <_Z16_fetch_usbserialv>
   b59d2:	494d      	ldr	r1, [pc, #308]	; (b5b08 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x384>)
   b59d4:	f002 f941 	bl	b7c5a <_ZN5Print7printlnEPKc>
                error = true;
   b59d8:	46ab      	mov	fp, r5
   b59da:	e7ec      	b.n	b59b6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x232>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b59dc:	19a3      	adds	r3, r4, r6
   b59de:	7718      	strb	r0, [r3, #28]
        if (bytes) {
   b59e0:	f1b9 0f00 	cmp.w	r9, #0
   b59e4:	d004      	beq.n	b59f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x26c>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
   b59e6:	f003 f80f 	bl	b8a08 <_Z16_fetch_usbserialv>
   b59ea:	4948      	ldr	r1, [pc, #288]	; (b5b0c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x388>)
   b59ec:	f002 f91c 	bl	b7c28 <_ZN5Print5printEPKc>
   b59f0:	f000 f97e 	bl	b5cf0 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b59f4:	9b00      	ldr	r3, [sp, #0]
   b59f6:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b59fa:	f1bb 0f00 	cmp.w	fp, #0
   b59fe:	d106      	bne.n	b5a0e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x28a>
   b5a00:	f241 3388 	movw	r3, #5000	; 0x1388
   b5a04:	4599      	cmp	r9, r3
   b5a06:	d802      	bhi.n	b5a0e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x28a>
            delay(200);
   b5a08:	20c8      	movs	r0, #200	; 0xc8
   b5a0a:	f000 fc9f 	bl	b634c <delay>
    } while (client.connected() && !timeout && !error);
   b5a0e:	4620      	mov	r0, r4
   b5a10:	f002 fd06 	bl	b8420 <_ZN9TCPClient9connectedEv>
   b5a14:	f241 3388 	movw	r3, #5000	; 0x1388
   b5a18:	2800      	cmp	r0, #0
   b5a1a:	d04c      	beq.n	b5ab6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x332>
   b5a1c:	4599      	cmp	r9, r3
   b5a1e:	d84c      	bhi.n	b5aba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x336>
   b5a20:	f1bb 0f00 	cmp.w	fp, #0
   b5a24:	d09a      	beq.n	b595c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d8>
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
   b5a26:	f002 ffef 	bl	b8a08 <_Z16_fetch_usbserialv>
   b5a2a:	4939      	ldr	r1, [pc, #228]	; (b5b10 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x38c>)
   b5a2c:	f002 f8fc 	bl	b7c28 <_ZN5Print5printEPKc>
    Serial.print(millis() - firstRead);
   b5a30:	f002 ffea 	bl	b8a08 <_Z16_fetch_usbserialv>
   b5a34:	4605      	mov	r5, r0
   b5a36:	f000 f95b 	bl	b5cf0 <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   b5a3a:	9b01      	ldr	r3, [sp, #4]
   b5a3c:	220a      	movs	r2, #10
   b5a3e:	1ac1      	subs	r1, r0, r3
   b5a40:	4628      	mov	r0, r5
   b5a42:	f002 f914 	bl	b7c6e <_ZN5Print11printNumberEmh>
    Serial.println("ms).");
   b5a46:	f002 ffdf 	bl	b8a08 <_Z16_fetch_usbserialv>
   b5a4a:	4932      	ldr	r1, [pc, #200]	; (b5b14 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x390>)
   b5a4c:	f002 f905 	bl	b7c5a <_ZN5Print7printlnEPKc>
    client.stop();
   b5a50:	4620      	mov	r0, r4
   b5a52:	f002 fe1d 	bl	b8690 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b5a56:	4651      	mov	r1, sl
   b5a58:	a802      	add	r0, sp, #8
   b5a5a:	f002 fa50 	bl	b7efe <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b5a5e:	230c      	movs	r3, #12
   b5a60:	2209      	movs	r2, #9
   b5a62:	a902      	add	r1, sp, #8
   b5a64:	a806      	add	r0, sp, #24
   b5a66:	f002 fb0b 	bl	b8080 <_ZNK6String9substringEjj>
    Serial.print("HttpClient>\tStatus Code: ");
   b5a6a:	f002 ffcd 	bl	b8a08 <_Z16_fetch_usbserialv>
   b5a6e:	492a      	ldr	r1, [pc, #168]	; (b5b18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x394>)
   b5a70:	f002 f8da 	bl	b7c28 <_ZN5Print5printEPKc>
    Serial.println(statusCode);
   b5a74:	f002 ffc8 	bl	b8a08 <_Z16_fetch_usbserialv>
   b5a78:	9906      	ldr	r1, [sp, #24]
   b5a7a:	f002 f8ee 	bl	b7c5a <_ZN5Print7printlnEPKc>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b5a7e:	4927      	ldr	r1, [pc, #156]	; (b5b1c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x398>)
   b5a80:	a80a      	add	r0, sp, #40	; 0x28
   b5a82:	f002 fa3c 	bl	b7efe <_ZN6StringC1EPK19__FlashStringHelper>
   b5a86:	a90a      	add	r1, sp, #40	; 0x28
   b5a88:	a802      	add	r0, sp, #8
   b5a8a:	f002 faf5 	bl	b8078 <_ZNK6String7indexOfERKS_>
   b5a8e:	4604      	mov	r4, r0
   b5a90:	a80a      	add	r0, sp, #40	; 0x28
   b5a92:	f002 f9e9 	bl	b7e68 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b5a96:	1c63      	adds	r3, r4, #1
   b5a98:	d146      	bne.n	b5b28 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a4>
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
   b5a9a:	f002 ffb5 	bl	b8a08 <_Z16_fetch_usbserialv>
   b5a9e:	4920      	ldr	r1, [pc, #128]	; (b5b20 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x39c>)
   b5aa0:	f002 f8db 	bl	b7c5a <_ZN5Print7printlnEPKc>
    String statusCode = raw_response.substring(9,12);
   b5aa4:	a806      	add	r0, sp, #24
   b5aa6:	f002 f9df 	bl	b7e68 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b5aaa:	a802      	add	r0, sp, #8
   b5aac:	f002 f9dc 	bl	b7e68 <_ZN6StringD1Ev>
}
   b5ab0:	b011      	add	sp, #68	; 0x44
   b5ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (timeout) {
   b5ab6:	4599      	cmp	r9, r3
   b5ab8:	d9b5      	bls.n	b5a26 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2a2>
        Serial.println("\r\nHttpClient>\tError: Timeout while reading response.");
   b5aba:	f002 ffa5 	bl	b8a08 <_Z16_fetch_usbserialv>
   b5abe:	4919      	ldr	r1, [pc, #100]	; (b5b24 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a0>)
   b5ac0:	f002 f8cb 	bl	b7c5a <_ZN5Print7printlnEPKc>
   b5ac4:	e7af      	b.n	b5a26 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2a2>
   b5ac6:	bf00      	nop
   b5ac8:	000b9e01 	.word	0x000b9e01
   b5acc:	000ba188 	.word	0x000ba188
   b5ad0:	000b9d84 	.word	0x000b9d84
   b5ad4:	000b9dbf 	.word	0x000b9dbf
   b5ad8:	000b998e 	.word	0x000b998e
   b5adc:	000b9dc1 	.word	0x000b9dc1
   b5ae0:	000b9dcd 	.word	0x000b9dcd
   b5ae4:	000b9df6 	.word	0x000b9df6
   b5ae8:	000b9df0 	.word	0x000b9df0
   b5aec:	000b9e20 	.word	0x000b9e20
   b5af0:	000b9e25 	.word	0x000b9e25
   b5af4:	000b9da0 	.word	0x000b9da0
   b5af8:	000b98ce 	.word	0x000b98ce
   b5afc:	000b9e34 	.word	0x000b9e34
   b5b00:	000b9e55 	.word	0x000b9e55
   b5b04:	000b9e81 	.word	0x000b9e81
   b5b08:	000b9e89 	.word	0x000b9e89
   b5b0c:	000b9ebe 	.word	0x000b9ebe
   b5b10:	000b9f19 	.word	0x000b9f19
   b5b14:	000b9f3e 	.word	0x000b9f3e
   b5b18:	000b9f43 	.word	0x000b9f43
   b5b1c:	000b9f5d 	.word	0x000b9f5d
   b5b20:	000b9f62 	.word	0x000b9f62
   b5b24:	000b9ee4 	.word	0x000b9ee4
    aResponse.body = "";
   b5b28:	f108 0504 	add.w	r5, r8, #4
   b5b2c:	490a      	ldr	r1, [pc, #40]	; (b5b58 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3d4>)
   b5b2e:	4628      	mov	r0, r5
   b5b30:	f002 fa13 	bl	b7f5a <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b5b34:	1d22      	adds	r2, r4, #4
   b5b36:	a902      	add	r1, sp, #8
   b5b38:	a80a      	add	r0, sp, #40	; 0x28
   b5b3a:	f002 fac1 	bl	b80c0 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5b3e:	a90a      	add	r1, sp, #40	; 0x28
   b5b40:	4628      	mov	r0, r5
   b5b42:	f002 fa46 	bl	b7fd2 <_ZN6String6concatERKS_>
   b5b46:	a80a      	add	r0, sp, #40	; 0x28
   b5b48:	f002 f98e 	bl	b7e68 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b5b4c:	9806      	ldr	r0, [sp, #24]
   b5b4e:	f003 fd19 	bl	b9584 <atoi>
   b5b52:	f8c8 0000 	str.w	r0, [r8]
   b5b56:	e7a5      	b.n	b5aa4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x320>
   b5b58:	000b99dc 	.word	0x000b99dc

000b5b5c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b5b5c:	b508      	push	{r3, lr}
   b5b5e:	4b02      	ldr	r3, [pc, #8]	; (b5b68 <hal_ble_stack_init+0xc>)
   b5b60:	681b      	ldr	r3, [r3, #0]
   b5b62:	689b      	ldr	r3, [r3, #8]
   b5b64:	9301      	str	r3, [sp, #4]
   b5b66:	bd08      	pop	{r3, pc}
   b5b68:	00030278 	.word	0x00030278

000b5b6c <hal_ble_stack_deinit>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
   b5b6c:	b508      	push	{r3, lr}
   b5b6e:	4b02      	ldr	r3, [pc, #8]	; (b5b78 <hal_ble_stack_deinit+0xc>)
   b5b70:	681b      	ldr	r3, [r3, #0]
   b5b72:	68db      	ldr	r3, [r3, #12]
   b5b74:	9301      	str	r3, [sp, #4]
   b5b76:	bd08      	pop	{r3, pc}
   b5b78:	00030278 	.word	0x00030278

000b5b7c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b5b7c:	b508      	push	{r3, lr}
   b5b7e:	4b02      	ldr	r3, [pc, #8]	; (b5b88 <hal_ble_gap_set_advertising_data+0xc>)
   b5b80:	681b      	ldr	r3, [r3, #0]
   b5b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5b84:	9301      	str	r3, [sp, #4]
   b5b86:	bd08      	pop	{r3, pc}
   b5b88:	00030278 	.word	0x00030278

000b5b8c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b5b8c:	b508      	push	{r3, lr}
   b5b8e:	4b02      	ldr	r3, [pc, #8]	; (b5b98 <hal_ble_gap_set_scan_response_data+0xc>)
   b5b90:	681b      	ldr	r3, [r3, #0]
   b5b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5b94:	9301      	str	r3, [sp, #4]
   b5b96:	bd08      	pop	{r3, pc}
   b5b98:	00030278 	.word	0x00030278

000b5b9c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b5b9c:	b508      	push	{r3, lr}
   b5b9e:	4b02      	ldr	r3, [pc, #8]	; (b5ba8 <hal_ble_gap_start_advertising+0xc>)
   b5ba0:	681b      	ldr	r3, [r3, #0]
   b5ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b5ba4:	9301      	str	r3, [sp, #4]
   b5ba6:	bd08      	pop	{r3, pc}
   b5ba8:	00030278 	.word	0x00030278

000b5bac <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b5bac:	b508      	push	{r3, lr}
   b5bae:	4b03      	ldr	r3, [pc, #12]	; (b5bbc <hal_ble_gap_disconnect+0x10>)
   b5bb0:	681b      	ldr	r3, [r3, #0]
   b5bb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b5bb6:	9301      	str	r3, [sp, #4]
   b5bb8:	bd08      	pop	{r3, pc}
   b5bba:	0000      	.short	0x0000
   b5bbc:	00030278 	.word	0x00030278

000b5bc0 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b5bc0:	b508      	push	{r3, lr}
   b5bc2:	4b03      	ldr	r3, [pc, #12]	; (b5bd0 <hal_ble_gatt_server_add_service+0x10>)
   b5bc4:	681b      	ldr	r3, [r3, #0]
   b5bc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b5bca:	9301      	str	r3, [sp, #4]
   b5bcc:	bd08      	pop	{r3, pc}
   b5bce:	0000      	.short	0x0000
   b5bd0:	00030278 	.word	0x00030278

000b5bd4 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5bd4:	b508      	push	{r3, lr}
   b5bd6:	4b03      	ldr	r3, [pc, #12]	; (b5be4 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b5bd8:	681b      	ldr	r3, [r3, #0]
   b5bda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b5bde:	9301      	str	r3, [sp, #4]
   b5be0:	bd08      	pop	{r3, pc}
   b5be2:	0000      	.short	0x0000
   b5be4:	00030278 	.word	0x00030278

000b5be8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5be8:	b508      	push	{r3, lr}
   b5bea:	4b03      	ldr	r3, [pc, #12]	; (b5bf8 <hal_ble_gatt_client_write_with_response+0x10>)
   b5bec:	681b      	ldr	r3, [r3, #0]
   b5bee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b5bf2:	9301      	str	r3, [sp, #4]
   b5bf4:	bd08      	pop	{r3, pc}
   b5bf6:	0000      	.short	0x0000
   b5bf8:	00030278 	.word	0x00030278

000b5bfc <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5bfc:	b508      	push	{r3, lr}
   b5bfe:	4b03      	ldr	r3, [pc, #12]	; (b5c0c <hal_ble_gatt_client_write_without_response+0x10>)
   b5c00:	681b      	ldr	r3, [r3, #0]
   b5c02:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b5c06:	9301      	str	r3, [sp, #4]
   b5c08:	bd08      	pop	{r3, pc}
   b5c0a:	0000      	.short	0x0000
   b5c0c:	00030278 	.word	0x00030278

000b5c10 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b5c10:	b508      	push	{r3, lr}
   b5c12:	4b03      	ldr	r3, [pc, #12]	; (b5c20 <hal_ble_gatt_server_add_characteristic+0x10>)
   b5c14:	681b      	ldr	r3, [r3, #0]
   b5c16:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b5c1a:	9301      	str	r3, [sp, #4]
   b5c1c:	bd08      	pop	{r3, pc}
   b5c1e:	0000      	.short	0x0000
   b5c20:	00030278 	.word	0x00030278

000b5c24 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b5c24:	b508      	push	{r3, lr}
   b5c26:	4b03      	ldr	r3, [pc, #12]	; (b5c34 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b5c28:	681b      	ldr	r3, [r3, #0]
   b5c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b5c2e:	9301      	str	r3, [sp, #4]
   b5c30:	bd08      	pop	{r3, pc}
   b5c32:	0000      	.short	0x0000
   b5c34:	00030278 	.word	0x00030278

000b5c38 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5c38:	b508      	push	{r3, lr}
   b5c3a:	4b03      	ldr	r3, [pc, #12]	; (b5c48 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b5c3c:	681b      	ldr	r3, [r3, #0]
   b5c3e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b5c42:	9301      	str	r3, [sp, #4]
   b5c44:	bd08      	pop	{r3, pc}
   b5c46:	0000      	.short	0x0000
   b5c48:	00030278 	.word	0x00030278

000b5c4c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5c4c:	b508      	push	{r3, lr}
   b5c4e:	4b03      	ldr	r3, [pc, #12]	; (b5c5c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b5c50:	681b      	ldr	r3, [r3, #0]
   b5c52:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b5c56:	9301      	str	r3, [sp, #4]
   b5c58:	bd08      	pop	{r3, pc}
   b5c5a:	0000      	.short	0x0000
   b5c5c:	00030278 	.word	0x00030278

000b5c60 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   b5c60:	b508      	push	{r3, lr}
   b5c62:	4b02      	ldr	r3, [pc, #8]	; (b5c6c <os_thread_create+0xc>)
   b5c64:	681b      	ldr	r3, [r3, #0]
   b5c66:	685b      	ldr	r3, [r3, #4]
   b5c68:	9301      	str	r3, [sp, #4]
   b5c6a:	bd08      	pop	{r3, pc}
   b5c6c:	00030248 	.word	0x00030248

000b5c70 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5c70:	b508      	push	{r3, lr}
   b5c72:	4b02      	ldr	r3, [pc, #8]	; (b5c7c <os_mutex_recursive_create+0xc>)
   b5c74:	681b      	ldr	r3, [r3, #0]
   b5c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5c78:	9301      	str	r3, [sp, #4]
   b5c7a:	bd08      	pop	{r3, pc}
   b5c7c:	00030248 	.word	0x00030248

000b5c80 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b5c80:	b508      	push	{r3, lr}
   b5c82:	4b02      	ldr	r3, [pc, #8]	; (b5c8c <os_mutex_recursive_destroy+0xc>)
   b5c84:	681b      	ldr	r3, [r3, #0]
   b5c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5c88:	9301      	str	r3, [sp, #4]
   b5c8a:	bd08      	pop	{r3, pc}
   b5c8c:	00030248 	.word	0x00030248

000b5c90 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5c90:	b508      	push	{r3, lr}
   b5c92:	4b02      	ldr	r3, [pc, #8]	; (b5c9c <os_mutex_recursive_lock+0xc>)
   b5c94:	681b      	ldr	r3, [r3, #0]
   b5c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5c98:	9301      	str	r3, [sp, #4]
   b5c9a:	bd08      	pop	{r3, pc}
   b5c9c:	00030248 	.word	0x00030248

000b5ca0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5ca0:	b508      	push	{r3, lr}
   b5ca2:	4b02      	ldr	r3, [pc, #8]	; (b5cac <os_mutex_recursive_unlock+0xc>)
   b5ca4:	681b      	ldr	r3, [r3, #0]
   b5ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5ca8:	9301      	str	r3, [sp, #4]
   b5caa:	bd08      	pop	{r3, pc}
   b5cac:	00030248 	.word	0x00030248

000b5cb0 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   b5cb0:	b508      	push	{r3, lr}
   b5cb2:	4b02      	ldr	r3, [pc, #8]	; (b5cbc <os_thread_exit+0xc>)
   b5cb4:	681b      	ldr	r3, [r3, #0]
   b5cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b5cb8:	9301      	str	r3, [sp, #4]
   b5cba:	bd08      	pop	{r3, pc}
   b5cbc:	00030248 	.word	0x00030248

000b5cc0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5cc0:	b508      	push	{r3, lr}
   b5cc2:	4b02      	ldr	r3, [pc, #8]	; (b5ccc <HAL_RNG_GetRandomNumber+0xc>)
   b5cc4:	681b      	ldr	r3, [r3, #0]
   b5cc6:	685b      	ldr	r3, [r3, #4]
   b5cc8:	9301      	str	r3, [sp, #4]
   b5cca:	bd08      	pop	{r3, pc}
   b5ccc:	00030218 	.word	0x00030218

000b5cd0 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   b5cd0:	b508      	push	{r3, lr}
   b5cd2:	4b02      	ldr	r3, [pc, #8]	; (b5cdc <HAL_Delay_Milliseconds+0xc>)
   b5cd4:	681b      	ldr	r3, [r3, #0]
   b5cd6:	689b      	ldr	r3, [r3, #8]
   b5cd8:	9301      	str	r3, [sp, #4]
   b5cda:	bd08      	pop	{r3, pc}
   b5cdc:	00030218 	.word	0x00030218

000b5ce0 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5ce0:	b508      	push	{r3, lr}
   b5ce2:	4b02      	ldr	r3, [pc, #8]	; (b5cec <HAL_Delay_Microseconds+0xc>)
   b5ce4:	681b      	ldr	r3, [r3, #0]
   b5ce6:	68db      	ldr	r3, [r3, #12]
   b5ce8:	9301      	str	r3, [sp, #4]
   b5cea:	bd08      	pop	{r3, pc}
   b5cec:	00030218 	.word	0x00030218

000b5cf0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5cf0:	b508      	push	{r3, lr}
   b5cf2:	4b02      	ldr	r3, [pc, #8]	; (b5cfc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5cf4:	681b      	ldr	r3, [r3, #0]
   b5cf6:	695b      	ldr	r3, [r3, #20]
   b5cf8:	9301      	str	r3, [sp, #4]
   b5cfa:	bd08      	pop	{r3, pc}
   b5cfc:	00030218 	.word	0x00030218

000b5d00 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b5d00:	b508      	push	{r3, lr}
   b5d02:	4b02      	ldr	r3, [pc, #8]	; (b5d0c <HAL_EEPROM_Init+0xc>)
   b5d04:	681b      	ldr	r3, [r3, #0]
   b5d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5d08:	9301      	str	r3, [sp, #4]
   b5d0a:	bd08      	pop	{r3, pc}
   b5d0c:	00030218 	.word	0x00030218

000b5d10 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   b5d10:	b508      	push	{r3, lr}
   b5d12:	4b02      	ldr	r3, [pc, #8]	; (b5d1c <HAL_EEPROM_Get+0xc>)
   b5d14:	681b      	ldr	r3, [r3, #0]
   b5d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5d18:	9301      	str	r3, [sp, #4]
   b5d1a:	bd08      	pop	{r3, pc}
   b5d1c:	00030218 	.word	0x00030218

000b5d20 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   b5d20:	b508      	push	{r3, lr}
   b5d22:	4b02      	ldr	r3, [pc, #8]	; (b5d2c <HAL_EEPROM_Put+0xc>)
   b5d24:	681b      	ldr	r3, [r3, #0]
   b5d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5d28:	9301      	str	r3, [sp, #4]
   b5d2a:	bd08      	pop	{r3, pc}
   b5d2c:	00030218 	.word	0x00030218

000b5d30 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5d30:	b508      	push	{r3, lr}
   b5d32:	4b02      	ldr	r3, [pc, #8]	; (b5d3c <hal_rtc_time_is_valid+0xc>)
   b5d34:	681b      	ldr	r3, [r3, #0]
   b5d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5d38:	9301      	str	r3, [sp, #4]
   b5d3a:	bd08      	pop	{r3, pc}
   b5d3c:	00030218 	.word	0x00030218

000b5d40 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5d40:	b508      	push	{r3, lr}
   b5d42:	4b02      	ldr	r3, [pc, #8]	; (b5d4c <hal_rtc_get_time+0xc>)
   b5d44:	681b      	ldr	r3, [r3, #0]
   b5d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5d48:	9301      	str	r3, [sp, #4]
   b5d4a:	bd08      	pop	{r3, pc}
   b5d4c:	00030218 	.word	0x00030218

000b5d50 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5d50:	b508      	push	{r3, lr}
   b5d52:	4b02      	ldr	r3, [pc, #8]	; (b5d5c <HAL_Pin_Mode+0xc>)
   b5d54:	681b      	ldr	r3, [r3, #0]
   b5d56:	689b      	ldr	r3, [r3, #8]
   b5d58:	9301      	str	r3, [sp, #4]
   b5d5a:	bd08      	pop	{r3, pc}
   b5d5c:	0003022c 	.word	0x0003022c

000b5d60 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5d60:	b508      	push	{r3, lr}
   b5d62:	4b02      	ldr	r3, [pc, #8]	; (b5d6c <HAL_Get_Pin_Mode+0xc>)
   b5d64:	681b      	ldr	r3, [r3, #0]
   b5d66:	68db      	ldr	r3, [r3, #12]
   b5d68:	9301      	str	r3, [sp, #4]
   b5d6a:	bd08      	pop	{r3, pc}
   b5d6c:	0003022c 	.word	0x0003022c

000b5d70 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5d70:	b508      	push	{r3, lr}
   b5d72:	4b02      	ldr	r3, [pc, #8]	; (b5d7c <HAL_GPIO_Write+0xc>)
   b5d74:	681b      	ldr	r3, [r3, #0]
   b5d76:	691b      	ldr	r3, [r3, #16]
   b5d78:	9301      	str	r3, [sp, #4]
   b5d7a:	bd08      	pop	{r3, pc}
   b5d7c:	0003022c 	.word	0x0003022c

000b5d80 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5d80:	b508      	push	{r3, lr}
   b5d82:	4b02      	ldr	r3, [pc, #8]	; (b5d8c <HAL_GPIO_Read+0xc>)
   b5d84:	681b      	ldr	r3, [r3, #0]
   b5d86:	695b      	ldr	r3, [r3, #20]
   b5d88:	9301      	str	r3, [sp, #4]
   b5d8a:	bd08      	pop	{r3, pc}
   b5d8c:	0003022c 	.word	0x0003022c

000b5d90 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5d90:	b508      	push	{r3, lr}
   b5d92:	4b02      	ldr	r3, [pc, #8]	; (b5d9c <hal_i2c_begin+0xc>)
   b5d94:	681b      	ldr	r3, [r3, #0]
   b5d96:	68db      	ldr	r3, [r3, #12]
   b5d98:	9301      	str	r3, [sp, #4]
   b5d9a:	bd08      	pop	{r3, pc}
   b5d9c:	00030228 	.word	0x00030228

000b5da0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5da0:	b508      	push	{r3, lr}
   b5da2:	4b02      	ldr	r3, [pc, #8]	; (b5dac <hal_i2c_begin_transmission+0xc>)
   b5da4:	681b      	ldr	r3, [r3, #0]
   b5da6:	699b      	ldr	r3, [r3, #24]
   b5da8:	9301      	str	r3, [sp, #4]
   b5daa:	bd08      	pop	{r3, pc}
   b5dac:	00030228 	.word	0x00030228

000b5db0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5db0:	b508      	push	{r3, lr}
   b5db2:	4b02      	ldr	r3, [pc, #8]	; (b5dbc <hal_i2c_end_transmission+0xc>)
   b5db4:	681b      	ldr	r3, [r3, #0]
   b5db6:	69db      	ldr	r3, [r3, #28]
   b5db8:	9301      	str	r3, [sp, #4]
   b5dba:	bd08      	pop	{r3, pc}
   b5dbc:	00030228 	.word	0x00030228

000b5dc0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5dc0:	b508      	push	{r3, lr}
   b5dc2:	4b02      	ldr	r3, [pc, #8]	; (b5dcc <hal_i2c_write+0xc>)
   b5dc4:	681b      	ldr	r3, [r3, #0]
   b5dc6:	6a1b      	ldr	r3, [r3, #32]
   b5dc8:	9301      	str	r3, [sp, #4]
   b5dca:	bd08      	pop	{r3, pc}
   b5dcc:	00030228 	.word	0x00030228

000b5dd0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5dd0:	b508      	push	{r3, lr}
   b5dd2:	4b02      	ldr	r3, [pc, #8]	; (b5ddc <hal_i2c_available+0xc>)
   b5dd4:	681b      	ldr	r3, [r3, #0]
   b5dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5dd8:	9301      	str	r3, [sp, #4]
   b5dda:	bd08      	pop	{r3, pc}
   b5ddc:	00030228 	.word	0x00030228

000b5de0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5de0:	b508      	push	{r3, lr}
   b5de2:	4b02      	ldr	r3, [pc, #8]	; (b5dec <hal_i2c_read+0xc>)
   b5de4:	681b      	ldr	r3, [r3, #0]
   b5de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5de8:	9301      	str	r3, [sp, #4]
   b5dea:	bd08      	pop	{r3, pc}
   b5dec:	00030228 	.word	0x00030228

000b5df0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5df0:	b508      	push	{r3, lr}
   b5df2:	4b02      	ldr	r3, [pc, #8]	; (b5dfc <hal_i2c_peek+0xc>)
   b5df4:	681b      	ldr	r3, [r3, #0]
   b5df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5df8:	9301      	str	r3, [sp, #4]
   b5dfa:	bd08      	pop	{r3, pc}
   b5dfc:	00030228 	.word	0x00030228

000b5e00 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5e00:	b508      	push	{r3, lr}
   b5e02:	4b02      	ldr	r3, [pc, #8]	; (b5e0c <hal_i2c_flush+0xc>)
   b5e04:	681b      	ldr	r3, [r3, #0]
   b5e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5e08:	9301      	str	r3, [sp, #4]
   b5e0a:	bd08      	pop	{r3, pc}
   b5e0c:	00030228 	.word	0x00030228

000b5e10 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5e10:	b508      	push	{r3, lr}
   b5e12:	4b02      	ldr	r3, [pc, #8]	; (b5e1c <hal_i2c_is_enabled+0xc>)
   b5e14:	681b      	ldr	r3, [r3, #0]
   b5e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5e18:	9301      	str	r3, [sp, #4]
   b5e1a:	bd08      	pop	{r3, pc}
   b5e1c:	00030228 	.word	0x00030228

000b5e20 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5e20:	b508      	push	{r3, lr}
   b5e22:	4b02      	ldr	r3, [pc, #8]	; (b5e2c <hal_i2c_init+0xc>)
   b5e24:	681b      	ldr	r3, [r3, #0]
   b5e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5e28:	9301      	str	r3, [sp, #4]
   b5e2a:	bd08      	pop	{r3, pc}
   b5e2c:	00030228 	.word	0x00030228

000b5e30 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5e30:	b508      	push	{r3, lr}
   b5e32:	4b02      	ldr	r3, [pc, #8]	; (b5e3c <hal_i2c_request_ex+0xc>)
   b5e34:	681b      	ldr	r3, [r3, #0]
   b5e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5e38:	9301      	str	r3, [sp, #4]
   b5e3a:	bd08      	pop	{r3, pc}
   b5e3c:	00030228 	.word	0x00030228

000b5e40 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5e40:	b508      	push	{r3, lr}
   b5e42:	4b02      	ldr	r3, [pc, #8]	; (b5e4c <if_index_to_name+0xc>)
   b5e44:	681b      	ldr	r3, [r3, #0]
   b5e46:	695b      	ldr	r3, [r3, #20]
   b5e48:	9301      	str	r3, [sp, #4]
   b5e4a:	bd08      	pop	{r3, pc}
   b5e4c:	0003026c 	.word	0x0003026c

000b5e50 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5e50:	b508      	push	{r3, lr}
   b5e52:	4b02      	ldr	r3, [pc, #8]	; (b5e5c <inet_inet_ntop+0xc>)
   b5e54:	681b      	ldr	r3, [r3, #0]
   b5e56:	695b      	ldr	r3, [r3, #20]
   b5e58:	9301      	str	r3, [sp, #4]
   b5e5a:	bd08      	pop	{r3, pc}
   b5e5c:	00030264 	.word	0x00030264

000b5e60 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5e60:	b508      	push	{r3, lr}
   b5e62:	4b02      	ldr	r3, [pc, #8]	; (b5e6c <inet_htonl+0xc>)
   b5e64:	681b      	ldr	r3, [r3, #0]
   b5e66:	6a1b      	ldr	r3, [r3, #32]
   b5e68:	9301      	str	r3, [sp, #4]
   b5e6a:	bd08      	pop	{r3, pc}
   b5e6c:	00030264 	.word	0x00030264

000b5e70 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5e70:	b508      	push	{r3, lr}
   b5e72:	4b02      	ldr	r3, [pc, #8]	; (b5e7c <inet_htons+0xc>)
   b5e74:	681b      	ldr	r3, [r3, #0]
   b5e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5e78:	9301      	str	r3, [sp, #4]
   b5e7a:	bd08      	pop	{r3, pc}
   b5e7c:	00030264 	.word	0x00030264

000b5e80 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5e80:	b508      	push	{r3, lr}
   b5e82:	4b02      	ldr	r3, [pc, #8]	; (b5e8c <netdb_freeaddrinfo+0xc>)
   b5e84:	681b      	ldr	r3, [r3, #0]
   b5e86:	689b      	ldr	r3, [r3, #8]
   b5e88:	9301      	str	r3, [sp, #4]
   b5e8a:	bd08      	pop	{r3, pc}
   b5e8c:	00030268 	.word	0x00030268

000b5e90 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5e90:	b508      	push	{r3, lr}
   b5e92:	4b02      	ldr	r3, [pc, #8]	; (b5e9c <netdb_getaddrinfo+0xc>)
   b5e94:	681b      	ldr	r3, [r3, #0]
   b5e96:	68db      	ldr	r3, [r3, #12]
   b5e98:	9301      	str	r3, [sp, #4]
   b5e9a:	bd08      	pop	{r3, pc}
   b5e9c:	00030268 	.word	0x00030268

000b5ea0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5ea0:	b508      	push	{r3, lr}
   b5ea2:	4b02      	ldr	r3, [pc, #8]	; (b5eac <sock_setsockopt+0xc>)
   b5ea4:	681b      	ldr	r3, [r3, #0]
   b5ea6:	699b      	ldr	r3, [r3, #24]
   b5ea8:	9301      	str	r3, [sp, #4]
   b5eaa:	bd08      	pop	{r3, pc}
   b5eac:	00030238 	.word	0x00030238

000b5eb0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5eb0:	b508      	push	{r3, lr}
   b5eb2:	4b02      	ldr	r3, [pc, #8]	; (b5ebc <sock_close+0xc>)
   b5eb4:	681b      	ldr	r3, [r3, #0]
   b5eb6:	69db      	ldr	r3, [r3, #28]
   b5eb8:	9301      	str	r3, [sp, #4]
   b5eba:	bd08      	pop	{r3, pc}
   b5ebc:	00030238 	.word	0x00030238

000b5ec0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5ec0:	b508      	push	{r3, lr}
   b5ec2:	4b02      	ldr	r3, [pc, #8]	; (b5ecc <sock_connect+0xc>)
   b5ec4:	681b      	ldr	r3, [r3, #0]
   b5ec6:	6a1b      	ldr	r3, [r3, #32]
   b5ec8:	9301      	str	r3, [sp, #4]
   b5eca:	bd08      	pop	{r3, pc}
   b5ecc:	00030238 	.word	0x00030238

000b5ed0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5ed0:	b508      	push	{r3, lr}
   b5ed2:	4b02      	ldr	r3, [pc, #8]	; (b5edc <sock_recv+0xc>)
   b5ed4:	681b      	ldr	r3, [r3, #0]
   b5ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5ed8:	9301      	str	r3, [sp, #4]
   b5eda:	bd08      	pop	{r3, pc}
   b5edc:	00030238 	.word	0x00030238

000b5ee0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5ee0:	b508      	push	{r3, lr}
   b5ee2:	4b02      	ldr	r3, [pc, #8]	; (b5eec <sock_send+0xc>)
   b5ee4:	681b      	ldr	r3, [r3, #0]
   b5ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5ee8:	9301      	str	r3, [sp, #4]
   b5eea:	bd08      	pop	{r3, pc}
   b5eec:	00030238 	.word	0x00030238

000b5ef0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5ef0:	b508      	push	{r3, lr}
   b5ef2:	4b02      	ldr	r3, [pc, #8]	; (b5efc <sock_socket+0xc>)
   b5ef4:	681b      	ldr	r3, [r3, #0]
   b5ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5ef8:	9301      	str	r3, [sp, #4]
   b5efa:	bd08      	pop	{r3, pc}
   b5efc:	00030238 	.word	0x00030238

000b5f00 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5f00:	b508      	push	{r3, lr}
   b5f02:	4b02      	ldr	r3, [pc, #8]	; (b5f0c <hal_spi_begin+0xc>)
   b5f04:	681b      	ldr	r3, [r3, #0]
   b5f06:	681b      	ldr	r3, [r3, #0]
   b5f08:	9301      	str	r3, [sp, #4]
   b5f0a:	bd08      	pop	{r3, pc}
   b5f0c:	00030230 	.word	0x00030230

000b5f10 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b5f10:	b508      	push	{r3, lr}
   b5f12:	4b02      	ldr	r3, [pc, #8]	; (b5f1c <hal_spi_set_bit_order+0xc>)
   b5f14:	681b      	ldr	r3, [r3, #0]
   b5f16:	689b      	ldr	r3, [r3, #8]
   b5f18:	9301      	str	r3, [sp, #4]
   b5f1a:	bd08      	pop	{r3, pc}
   b5f1c:	00030230 	.word	0x00030230

000b5f20 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b5f20:	b508      	push	{r3, lr}
   b5f22:	4b02      	ldr	r3, [pc, #8]	; (b5f2c <hal_spi_set_data_mode+0xc>)
   b5f24:	681b      	ldr	r3, [r3, #0]
   b5f26:	68db      	ldr	r3, [r3, #12]
   b5f28:	9301      	str	r3, [sp, #4]
   b5f2a:	bd08      	pop	{r3, pc}
   b5f2c:	00030230 	.word	0x00030230

000b5f30 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b5f30:	b508      	push	{r3, lr}
   b5f32:	4b02      	ldr	r3, [pc, #8]	; (b5f3c <hal_spi_set_clock_divider+0xc>)
   b5f34:	681b      	ldr	r3, [r3, #0]
   b5f36:	691b      	ldr	r3, [r3, #16]
   b5f38:	9301      	str	r3, [sp, #4]
   b5f3a:	bd08      	pop	{r3, pc}
   b5f3c:	00030230 	.word	0x00030230

000b5f40 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5f40:	b508      	push	{r3, lr}
   b5f42:	4b02      	ldr	r3, [pc, #8]	; (b5f4c <hal_spi_transfer+0xc>)
   b5f44:	681b      	ldr	r3, [r3, #0]
   b5f46:	695b      	ldr	r3, [r3, #20]
   b5f48:	9301      	str	r3, [sp, #4]
   b5f4a:	bd08      	pop	{r3, pc}
   b5f4c:	00030230 	.word	0x00030230

000b5f50 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5f50:	b508      	push	{r3, lr}
   b5f52:	4b02      	ldr	r3, [pc, #8]	; (b5f5c <hal_spi_init+0xc>)
   b5f54:	681b      	ldr	r3, [r3, #0]
   b5f56:	69db      	ldr	r3, [r3, #28]
   b5f58:	9301      	str	r3, [sp, #4]
   b5f5a:	bd08      	pop	{r3, pc}
   b5f5c:	00030230 	.word	0x00030230

000b5f60 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5f60:	b508      	push	{r3, lr}
   b5f62:	4b02      	ldr	r3, [pc, #8]	; (b5f6c <hal_spi_is_enabled+0xc>)
   b5f64:	681b      	ldr	r3, [r3, #0]
   b5f66:	6a1b      	ldr	r3, [r3, #32]
   b5f68:	9301      	str	r3, [sp, #4]
   b5f6a:	bd08      	pop	{r3, pc}
   b5f6c:	00030230 	.word	0x00030230

000b5f70 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5f70:	b508      	push	{r3, lr}
   b5f72:	4b02      	ldr	r3, [pc, #8]	; (b5f7c <hal_spi_info+0xc>)
   b5f74:	681b      	ldr	r3, [r3, #0]
   b5f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5f78:	9301      	str	r3, [sp, #4]
   b5f7a:	bd08      	pop	{r3, pc}
   b5f7c:	00030230 	.word	0x00030230

000b5f80 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5f80:	b508      	push	{r3, lr}
   b5f82:	4b02      	ldr	r3, [pc, #8]	; (b5f8c <hal_spi_acquire+0xc>)
   b5f84:	681b      	ldr	r3, [r3, #0]
   b5f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f88:	9301      	str	r3, [sp, #4]
   b5f8a:	bd08      	pop	{r3, pc}
   b5f8c:	00030230 	.word	0x00030230

000b5f90 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5f90:	b508      	push	{r3, lr}
   b5f92:	4b02      	ldr	r3, [pc, #8]	; (b5f9c <hal_spi_release+0xc>)
   b5f94:	681b      	ldr	r3, [r3, #0]
   b5f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5f98:	9301      	str	r3, [sp, #4]
   b5f9a:	bd08      	pop	{r3, pc}
   b5f9c:	00030230 	.word	0x00030230

000b5fa0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   b5fa0:	b508      	push	{r3, lr}
   b5fa2:	4b02      	ldr	r3, [pc, #8]	; (b5fac <hal_usart_init+0xc>)
   b5fa4:	681b      	ldr	r3, [r3, #0]
   b5fa6:	681b      	ldr	r3, [r3, #0]
   b5fa8:	9301      	str	r3, [sp, #4]
   b5faa:	bd08      	pop	{r3, pc}
   b5fac:	0003023c 	.word	0x0003023c

000b5fb0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5fb0:	b508      	push	{r3, lr}
   b5fb2:	4b02      	ldr	r3, [pc, #8]	; (b5fbc <hal_usart_write+0xc>)
   b5fb4:	681b      	ldr	r3, [r3, #0]
   b5fb6:	68db      	ldr	r3, [r3, #12]
   b5fb8:	9301      	str	r3, [sp, #4]
   b5fba:	bd08      	pop	{r3, pc}
   b5fbc:	0003023c 	.word	0x0003023c

000b5fc0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5fc0:	b508      	push	{r3, lr}
   b5fc2:	4b02      	ldr	r3, [pc, #8]	; (b5fcc <hal_usart_available+0xc>)
   b5fc4:	681b      	ldr	r3, [r3, #0]
   b5fc6:	691b      	ldr	r3, [r3, #16]
   b5fc8:	9301      	str	r3, [sp, #4]
   b5fca:	bd08      	pop	{r3, pc}
   b5fcc:	0003023c 	.word	0x0003023c

000b5fd0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5fd0:	b508      	push	{r3, lr}
   b5fd2:	4b02      	ldr	r3, [pc, #8]	; (b5fdc <hal_usart_read+0xc>)
   b5fd4:	681b      	ldr	r3, [r3, #0]
   b5fd6:	695b      	ldr	r3, [r3, #20]
   b5fd8:	9301      	str	r3, [sp, #4]
   b5fda:	bd08      	pop	{r3, pc}
   b5fdc:	0003023c 	.word	0x0003023c

000b5fe0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5fe0:	b508      	push	{r3, lr}
   b5fe2:	4b02      	ldr	r3, [pc, #8]	; (b5fec <hal_usart_peek+0xc>)
   b5fe4:	681b      	ldr	r3, [r3, #0]
   b5fe6:	699b      	ldr	r3, [r3, #24]
   b5fe8:	9301      	str	r3, [sp, #4]
   b5fea:	bd08      	pop	{r3, pc}
   b5fec:	0003023c 	.word	0x0003023c

000b5ff0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5ff0:	b508      	push	{r3, lr}
   b5ff2:	4b02      	ldr	r3, [pc, #8]	; (b5ffc <hal_usart_flush+0xc>)
   b5ff4:	681b      	ldr	r3, [r3, #0]
   b5ff6:	69db      	ldr	r3, [r3, #28]
   b5ff8:	9301      	str	r3, [sp, #4]
   b5ffa:	bd08      	pop	{r3, pc}
   b5ffc:	0003023c 	.word	0x0003023c

000b6000 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6000:	b508      	push	{r3, lr}
   b6002:	4b02      	ldr	r3, [pc, #8]	; (b600c <hal_usart_is_enabled+0xc>)
   b6004:	681b      	ldr	r3, [r3, #0]
   b6006:	6a1b      	ldr	r3, [r3, #32]
   b6008:	9301      	str	r3, [sp, #4]
   b600a:	bd08      	pop	{r3, pc}
   b600c:	0003023c 	.word	0x0003023c

000b6010 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6010:	b508      	push	{r3, lr}
   b6012:	4b02      	ldr	r3, [pc, #8]	; (b601c <hal_usart_available_data_for_write+0xc>)
   b6014:	681b      	ldr	r3, [r3, #0]
   b6016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6018:	9301      	str	r3, [sp, #4]
   b601a:	bd08      	pop	{r3, pc}
   b601c:	0003023c 	.word	0x0003023c

000b6020 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6020:	b508      	push	{r3, lr}
   b6022:	4b02      	ldr	r3, [pc, #8]	; (b602c <HAL_USB_USART_Init+0xc>)
   b6024:	681b      	ldr	r3, [r3, #0]
   b6026:	681b      	ldr	r3, [r3, #0]
   b6028:	9301      	str	r3, [sp, #4]
   b602a:	bd08      	pop	{r3, pc}
   b602c:	0003024c 	.word	0x0003024c

000b6030 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6030:	b508      	push	{r3, lr}
   b6032:	4b02      	ldr	r3, [pc, #8]	; (b603c <HAL_USB_USART_Begin+0xc>)
   b6034:	681b      	ldr	r3, [r3, #0]
   b6036:	685b      	ldr	r3, [r3, #4]
   b6038:	9301      	str	r3, [sp, #4]
   b603a:	bd08      	pop	{r3, pc}
   b603c:	0003024c 	.word	0x0003024c

000b6040 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6040:	b508      	push	{r3, lr}
   b6042:	4b02      	ldr	r3, [pc, #8]	; (b604c <HAL_USB_USART_Available_Data+0xc>)
   b6044:	681b      	ldr	r3, [r3, #0]
   b6046:	691b      	ldr	r3, [r3, #16]
   b6048:	9301      	str	r3, [sp, #4]
   b604a:	bd08      	pop	{r3, pc}
   b604c:	0003024c 	.word	0x0003024c

000b6050 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6050:	b508      	push	{r3, lr}
   b6052:	4b02      	ldr	r3, [pc, #8]	; (b605c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6054:	681b      	ldr	r3, [r3, #0]
   b6056:	695b      	ldr	r3, [r3, #20]
   b6058:	9301      	str	r3, [sp, #4]
   b605a:	bd08      	pop	{r3, pc}
   b605c:	0003024c 	.word	0x0003024c

000b6060 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6060:	b508      	push	{r3, lr}
   b6062:	4b02      	ldr	r3, [pc, #8]	; (b606c <HAL_USB_USART_Receive_Data+0xc>)
   b6064:	681b      	ldr	r3, [r3, #0]
   b6066:	699b      	ldr	r3, [r3, #24]
   b6068:	9301      	str	r3, [sp, #4]
   b606a:	bd08      	pop	{r3, pc}
   b606c:	0003024c 	.word	0x0003024c

000b6070 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6070:	b508      	push	{r3, lr}
   b6072:	4b02      	ldr	r3, [pc, #8]	; (b607c <HAL_USB_USART_Send_Data+0xc>)
   b6074:	681b      	ldr	r3, [r3, #0]
   b6076:	69db      	ldr	r3, [r3, #28]
   b6078:	9301      	str	r3, [sp, #4]
   b607a:	bd08      	pop	{r3, pc}
   b607c:	0003024c 	.word	0x0003024c

000b6080 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6080:	b508      	push	{r3, lr}
   b6082:	4b02      	ldr	r3, [pc, #8]	; (b608c <HAL_USB_USART_Flush_Data+0xc>)
   b6084:	681b      	ldr	r3, [r3, #0]
   b6086:	6a1b      	ldr	r3, [r3, #32]
   b6088:	9301      	str	r3, [sp, #4]
   b608a:	bd08      	pop	{r3, pc}
   b608c:	0003024c 	.word	0x0003024c

000b6090 <wlan_get_credentials>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
   b6090:	b508      	push	{r3, lr}
   b6092:	4b02      	ldr	r3, [pc, #8]	; (b609c <wlan_get_credentials+0xc>)
   b6094:	681b      	ldr	r3, [r3, #0]
   b6096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b6098:	9301      	str	r3, [sp, #4]
   b609a:	bd08      	pop	{r3, pc}
   b609c:	00030274 	.word	0x00030274

000b60a0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b60a0:	b508      	push	{r3, lr}
   b60a2:	4b02      	ldr	r3, [pc, #8]	; (b60ac <panic_+0xc>)
   b60a4:	681b      	ldr	r3, [r3, #0]
   b60a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b60a8:	9301      	str	r3, [sp, #4]
   b60aa:	bd08      	pop	{r3, pc}
   b60ac:	00030260 	.word	0x00030260

000b60b0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b60b0:	b508      	push	{r3, lr}
   b60b2:	4b02      	ldr	r3, [pc, #8]	; (b60bc <log_message+0xc>)
   b60b4:	681b      	ldr	r3, [r3, #0]
   b60b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b60b8:	9301      	str	r3, [sp, #4]
   b60ba:	bd08      	pop	{r3, pc}
   b60bc:	00030260 	.word	0x00030260

000b60c0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b60c0:	b508      	push	{r3, lr}
   b60c2:	4b02      	ldr	r3, [pc, #8]	; (b60cc <system_mode+0xc>)
   b60c4:	681b      	ldr	r3, [r3, #0]
   b60c6:	681b      	ldr	r3, [r3, #0]
   b60c8:	9301      	str	r3, [sp, #4]
   b60ca:	bd08      	pop	{r3, pc}
   b60cc:	00030220 	.word	0x00030220

000b60d0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b60d0:	b508      	push	{r3, lr}
   b60d2:	4b02      	ldr	r3, [pc, #8]	; (b60dc <set_system_mode+0xc>)
   b60d4:	681b      	ldr	r3, [r3, #0]
   b60d6:	685b      	ldr	r3, [r3, #4]
   b60d8:	9301      	str	r3, [sp, #4]
   b60da:	bd08      	pop	{r3, pc}
   b60dc:	00030220 	.word	0x00030220

000b60e0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b60e0:	b508      	push	{r3, lr}
   b60e2:	4b02      	ldr	r3, [pc, #8]	; (b60ec <system_delay_ms+0xc>)
   b60e4:	681b      	ldr	r3, [r3, #0]
   b60e6:	695b      	ldr	r3, [r3, #20]
   b60e8:	9301      	str	r3, [sp, #4]
   b60ea:	bd08      	pop	{r3, pc}
   b60ec:	00030220 	.word	0x00030220

000b60f0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b60f0:	b508      	push	{r3, lr}
   b60f2:	4b02      	ldr	r3, [pc, #8]	; (b60fc <system_thread_set_state+0xc>)
   b60f4:	681b      	ldr	r3, [r3, #0]
   b60f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b60f8:	9301      	str	r3, [sp, #4]
   b60fa:	bd08      	pop	{r3, pc}
   b60fc:	00030220 	.word	0x00030220

000b6100 <system_set_flag>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
DYNALIB_FN(14, system, system_set_flag, int(system_flag_t, uint8_t, void*))
   b6100:	b508      	push	{r3, lr}
   b6102:	4b02      	ldr	r3, [pc, #8]	; (b610c <system_set_flag+0xc>)
   b6104:	681b      	ldr	r3, [r3, #0]
   b6106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6108:	9301      	str	r3, [sp, #4]
   b610a:	bd08      	pop	{r3, pc}
   b610c:	00030220 	.word	0x00030220

000b6110 <system_get_flag>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
   b6110:	b508      	push	{r3, lr}
   b6112:	4b02      	ldr	r3, [pc, #8]	; (b611c <system_get_flag+0xc>)
   b6114:	681b      	ldr	r3, [r3, #0]
   b6116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6118:	9301      	str	r3, [sp, #4]
   b611a:	bd08      	pop	{r3, pc}
   b611c:	00030220 	.word	0x00030220

000b6120 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b6120:	b508      	push	{r3, lr}
   b6122:	4b02      	ldr	r3, [pc, #8]	; (b612c <system_thread_get_state+0xc>)
   b6124:	681b      	ldr	r3, [r3, #0]
   b6126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6128:	9301      	str	r3, [sp, #4]
   b612a:	bd08      	pop	{r3, pc}
   b612c:	00030220 	.word	0x00030220

000b6130 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6130:	b508      	push	{r3, lr}
   b6132:	4b03      	ldr	r3, [pc, #12]	; (b6140 <system_ctrl_set_app_request_handler+0x10>)
   b6134:	681b      	ldr	r3, [r3, #0]
   b6136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b613a:	9301      	str	r3, [sp, #4]
   b613c:	bd08      	pop	{r3, pc}
   b613e:	0000      	.short	0x0000
   b6140:	00030220 	.word	0x00030220

000b6144 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6144:	b508      	push	{r3, lr}
   b6146:	4b03      	ldr	r3, [pc, #12]	; (b6154 <system_ctrl_set_result+0x10>)
   b6148:	681b      	ldr	r3, [r3, #0]
   b614a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b614e:	9301      	str	r3, [sp, #4]
   b6150:	bd08      	pop	{r3, pc}
   b6152:	0000      	.short	0x0000
   b6154:	00030220 	.word	0x00030220

000b6158 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b6158:	b508      	push	{r3, lr}
   b615a:	4b03      	ldr	r3, [pc, #12]	; (b6168 <system_reset+0x10>)
   b615c:	681b      	ldr	r3, [r3, #0]
   b615e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b6162:	9301      	str	r3, [sp, #4]
   b6164:	bd08      	pop	{r3, pc}
   b6166:	0000      	.short	0x0000
   b6168:	00030220 	.word	0x00030220

000b616c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b616c:	b508      	push	{r3, lr}
   b616e:	4b02      	ldr	r3, [pc, #8]	; (b6178 <spark_process+0xc>)
   b6170:	681b      	ldr	r3, [r3, #0]
   b6172:	689b      	ldr	r3, [r3, #8]
   b6174:	9301      	str	r3, [sp, #4]
   b6176:	bd08      	pop	{r3, pc}
   b6178:	00030244 	.word	0x00030244

000b617c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b617c:	b508      	push	{r3, lr}
   b617e:	4b02      	ldr	r3, [pc, #8]	; (b6188 <spark_cloud_flag_connect+0xc>)
   b6180:	681b      	ldr	r3, [r3, #0]
   b6182:	68db      	ldr	r3, [r3, #12]
   b6184:	9301      	str	r3, [sp, #4]
   b6186:	bd08      	pop	{r3, pc}
   b6188:	00030244 	.word	0x00030244

000b618c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b618c:	b508      	push	{r3, lr}
   b618e:	4b02      	ldr	r3, [pc, #8]	; (b6198 <spark_cloud_flag_connected+0xc>)
   b6190:	681b      	ldr	r3, [r3, #0]
   b6192:	695b      	ldr	r3, [r3, #20]
   b6194:	9301      	str	r3, [sp, #4]
   b6196:	bd08      	pop	{r3, pc}
   b6198:	00030244 	.word	0x00030244

000b619c <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b619c:	b508      	push	{r3, lr}
   b619e:	4b02      	ldr	r3, [pc, #8]	; (b61a8 <spark_sync_time+0xc>)
   b61a0:	681b      	ldr	r3, [r3, #0]
   b61a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b61a4:	9301      	str	r3, [sp, #4]
   b61a6:	bd08      	pop	{r3, pc}
   b61a8:	00030244 	.word	0x00030244

000b61ac <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b61ac:	b508      	push	{r3, lr}
   b61ae:	4b02      	ldr	r3, [pc, #8]	; (b61b8 <spark_sync_time_pending+0xc>)
   b61b0:	681b      	ldr	r3, [r3, #0]
   b61b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b61b4:	9301      	str	r3, [sp, #4]
   b61b6:	bd08      	pop	{r3, pc}
   b61b8:	00030244 	.word	0x00030244

000b61bc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b61bc:	b508      	push	{r3, lr}
   b61be:	4b02      	ldr	r3, [pc, #8]	; (b61c8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b61c0:	681b      	ldr	r3, [r3, #0]
   b61c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b61c4:	9301      	str	r3, [sp, #4]
   b61c6:	bd08      	pop	{r3, pc}
   b61c8:	00030244 	.word	0x00030244

000b61cc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b61cc:	b508      	push	{r3, lr}
   b61ce:	4b02      	ldr	r3, [pc, #8]	; (b61d8 <network_connect+0xc>)
   b61d0:	681b      	ldr	r3, [r3, #0]
   b61d2:	685b      	ldr	r3, [r3, #4]
   b61d4:	9301      	str	r3, [sp, #4]
   b61d6:	bd08      	pop	{r3, pc}
   b61d8:	00030240 	.word	0x00030240

000b61dc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b61dc:	b508      	push	{r3, lr}
   b61de:	4b02      	ldr	r3, [pc, #8]	; (b61e8 <network_connecting+0xc>)
   b61e0:	681b      	ldr	r3, [r3, #0]
   b61e2:	689b      	ldr	r3, [r3, #8]
   b61e4:	9301      	str	r3, [sp, #4]
   b61e6:	bd08      	pop	{r3, pc}
   b61e8:	00030240 	.word	0x00030240

000b61ec <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b61ec:	b508      	push	{r3, lr}
   b61ee:	4b02      	ldr	r3, [pc, #8]	; (b61f8 <network_disconnect+0xc>)
   b61f0:	681b      	ldr	r3, [r3, #0]
   b61f2:	68db      	ldr	r3, [r3, #12]
   b61f4:	9301      	str	r3, [sp, #4]
   b61f6:	bd08      	pop	{r3, pc}
   b61f8:	00030240 	.word	0x00030240

000b61fc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b61fc:	b508      	push	{r3, lr}
   b61fe:	4b02      	ldr	r3, [pc, #8]	; (b6208 <network_ready+0xc>)
   b6200:	681b      	ldr	r3, [r3, #0]
   b6202:	691b      	ldr	r3, [r3, #16]
   b6204:	9301      	str	r3, [sp, #4]
   b6206:	bd08      	pop	{r3, pc}
   b6208:	00030240 	.word	0x00030240

000b620c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b620c:	b508      	push	{r3, lr}
   b620e:	4b02      	ldr	r3, [pc, #8]	; (b6218 <network_on+0xc>)
   b6210:	681b      	ldr	r3, [r3, #0]
   b6212:	695b      	ldr	r3, [r3, #20]
   b6214:	9301      	str	r3, [sp, #4]
   b6216:	bd08      	pop	{r3, pc}
   b6218:	00030240 	.word	0x00030240

000b621c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b621c:	b508      	push	{r3, lr}
   b621e:	4b02      	ldr	r3, [pc, #8]	; (b6228 <network_off+0xc>)
   b6220:	681b      	ldr	r3, [r3, #0]
   b6222:	699b      	ldr	r3, [r3, #24]
   b6224:	9301      	str	r3, [sp, #4]
   b6226:	bd08      	pop	{r3, pc}
   b6228:	00030240 	.word	0x00030240

000b622c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b622c:	b508      	push	{r3, lr}
   b622e:	4b02      	ldr	r3, [pc, #8]	; (b6238 <network_listen+0xc>)
   b6230:	681b      	ldr	r3, [r3, #0]
   b6232:	69db      	ldr	r3, [r3, #28]
   b6234:	9301      	str	r3, [sp, #4]
   b6236:	bd08      	pop	{r3, pc}
   b6238:	00030240 	.word	0x00030240

000b623c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b623c:	b508      	push	{r3, lr}
   b623e:	4b02      	ldr	r3, [pc, #8]	; (b6248 <network_listening+0xc>)
   b6240:	681b      	ldr	r3, [r3, #0]
   b6242:	6a1b      	ldr	r3, [r3, #32]
   b6244:	9301      	str	r3, [sp, #4]
   b6246:	bd08      	pop	{r3, pc}
   b6248:	00030240 	.word	0x00030240

000b624c <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b624c:	b508      	push	{r3, lr}
   b624e:	4b02      	ldr	r3, [pc, #8]	; (b6258 <network_set_credentials+0xc>)
   b6250:	681b      	ldr	r3, [r3, #0]
   b6252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6254:	9301      	str	r3, [sp, #4]
   b6256:	bd08      	pop	{r3, pc}
   b6258:	00030240 	.word	0x00030240

000b625c <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b625c:	b508      	push	{r3, lr}
   b625e:	4b02      	ldr	r3, [pc, #8]	; (b6268 <network_clear_credentials+0xc>)
   b6260:	681b      	ldr	r3, [r3, #0]
   b6262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6264:	9301      	str	r3, [sp, #4]
   b6266:	bd08      	pop	{r3, pc}
   b6268:	00030240 	.word	0x00030240

000b626c <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b626c:	b508      	push	{r3, lr}
   b626e:	4b02      	ldr	r3, [pc, #8]	; (b6278 <network_set_listen_timeout+0xc>)
   b6270:	681b      	ldr	r3, [r3, #0]
   b6272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6274:	9301      	str	r3, [sp, #4]
   b6276:	bd08      	pop	{r3, pc}
   b6278:	00030240 	.word	0x00030240

000b627c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b627c:	b508      	push	{r3, lr}
   b627e:	4b02      	ldr	r3, [pc, #8]	; (b6288 <network_get_listen_timeout+0xc>)
   b6280:	681b      	ldr	r3, [r3, #0]
   b6282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6284:	9301      	str	r3, [sp, #4]
   b6286:	bd08      	pop	{r3, pc}
   b6288:	00030240 	.word	0x00030240

000b628c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b628c:	b508      	push	{r3, lr}
   b628e:	4b02      	ldr	r3, [pc, #8]	; (b6298 <network_is_on+0xc>)
   b6290:	681b      	ldr	r3, [r3, #0]
   b6292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6294:	9301      	str	r3, [sp, #4]
   b6296:	bd08      	pop	{r3, pc}
   b6298:	00030240 	.word	0x00030240

000b629c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b629c:	b508      	push	{r3, lr}
   b629e:	4b02      	ldr	r3, [pc, #8]	; (b62a8 <network_is_off+0xc>)
   b62a0:	681b      	ldr	r3, [r3, #0]
   b62a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b62a4:	9301      	str	r3, [sp, #4]
   b62a6:	bd08      	pop	{r3, pc}
   b62a8:	00030240 	.word	0x00030240

000b62ac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b62ac:	b508      	push	{r3, lr}
   b62ae:	4b02      	ldr	r3, [pc, #8]	; (b62b8 <malloc+0xc>)
   b62b0:	681b      	ldr	r3, [r3, #0]
   b62b2:	681b      	ldr	r3, [r3, #0]
   b62b4:	9301      	str	r3, [sp, #4]
   b62b6:	bd08      	pop	{r3, pc}
   b62b8:	0003021c 	.word	0x0003021c

000b62bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b62bc:	b508      	push	{r3, lr}
   b62be:	4b02      	ldr	r3, [pc, #8]	; (b62c8 <free+0xc>)
   b62c0:	681b      	ldr	r3, [r3, #0]
   b62c2:	685b      	ldr	r3, [r3, #4]
   b62c4:	9301      	str	r3, [sp, #4]
   b62c6:	bd08      	pop	{r3, pc}
   b62c8:	0003021c 	.word	0x0003021c

000b62cc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b62cc:	b508      	push	{r3, lr}
   b62ce:	4b02      	ldr	r3, [pc, #8]	; (b62d8 <realloc+0xc>)
   b62d0:	681b      	ldr	r3, [r3, #0]
   b62d2:	689b      	ldr	r3, [r3, #8]
   b62d4:	9301      	str	r3, [sp, #4]
   b62d6:	bd08      	pop	{r3, pc}
   b62d8:	0003021c 	.word	0x0003021c

000b62dc <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b62dc:	b508      	push	{r3, lr}
   b62de:	4b02      	ldr	r3, [pc, #8]	; (b62e8 <siprintf+0xc>)
   b62e0:	681b      	ldr	r3, [r3, #0]
   b62e2:	691b      	ldr	r3, [r3, #16]
   b62e4:	9301      	str	r3, [sp, #4]
   b62e6:	bd08      	pop	{r3, pc}
   b62e8:	0003021c 	.word	0x0003021c

000b62ec <vsnprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b62ec:	b508      	push	{r3, lr}
   b62ee:	4b02      	ldr	r3, [pc, #8]	; (b62f8 <vsnprintf+0xc>)
   b62f0:	681b      	ldr	r3, [r3, #0]
   b62f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b62f4:	9301      	str	r3, [sp, #4]
   b62f6:	bd08      	pop	{r3, pc}
   b62f8:	0003021c 	.word	0x0003021c

000b62fc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b62fc:	b508      	push	{r3, lr}
   b62fe:	4b02      	ldr	r3, [pc, #8]	; (b6308 <abort+0xc>)
   b6300:	681b      	ldr	r3, [r3, #0]
   b6302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6304:	9301      	str	r3, [sp, #4]
   b6306:	bd08      	pop	{r3, pc}
   b6308:	0003021c 	.word	0x0003021c

000b630c <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b630c:	b508      	push	{r3, lr}
   b630e:	4b02      	ldr	r3, [pc, #8]	; (b6318 <__errno+0xc>)
   b6310:	681b      	ldr	r3, [r3, #0]
   b6312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6314:	9301      	str	r3, [sp, #4]
   b6316:	bd08      	pop	{r3, pc}
   b6318:	0003021c 	.word	0x0003021c

000b631c <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b631c:	b508      	push	{r3, lr}
   b631e:	4b02      	ldr	r3, [pc, #8]	; (b6328 <__assert_func+0xc>)
   b6320:	681b      	ldr	r3, [r3, #0]
   b6322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6324:	9301      	str	r3, [sp, #4]
   b6326:	bd08      	pop	{r3, pc}
   b6328:	0003021c 	.word	0x0003021c

000b632c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b632c:	b508      	push	{r3, lr}
   b632e:	4b02      	ldr	r3, [pc, #8]	; (b6338 <newlib_impure_ptr_callback+0xc>)
   b6330:	681b      	ldr	r3, [r3, #0]
   b6332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6334:	9301      	str	r3, [sp, #4]
   b6336:	bd08      	pop	{r3, pc}
   b6338:	0003021c 	.word	0x0003021c

000b633c <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b633c:	b508      	push	{r3, lr}
   b633e:	4b02      	ldr	r3, [pc, #8]	; (b6348 <localtime_r+0xc>)
   b6340:	681b      	ldr	r3, [r3, #0]
   b6342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6344:	9301      	str	r3, [sp, #4]
   b6346:	bd08      	pop	{r3, pc}
   b6348:	0003021c 	.word	0x0003021c

000b634c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b634c:	2100      	movs	r1, #0
   b634e:	f7ff bec7 	b.w	b60e0 <system_delay_ms>

000b6352 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6352:	4770      	bx	lr

000b6354 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b6354:	4770      	bx	lr

000b6356 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b6356:	4770      	bx	lr

000b6358 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6358:	4770      	bx	lr
	...

000b635c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b635c:	4b06      	ldr	r3, [pc, #24]	; (b6378 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b635e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6360:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6362:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6366:	d005      	beq.n	b6374 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6368:	4608      	mov	r0, r1
   b636a:	f002 fd8f 	bl	b8e8c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b636e:	2800      	cmp	r0, #0
   b6370:	bf08      	it	eq
   b6372:	2400      	moveq	r4, #0
      }
   b6374:	4620      	mov	r0, r4
   b6376:	bd10      	pop	{r4, pc}
   b6378:	000ba0dc 	.word	0x000ba0dc

000b637c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b637c:	4b06      	ldr	r3, [pc, #24]	; (b6398 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b637e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6380:	b510      	push	{r4, lr}
   b6382:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6386:	d005      	beq.n	b6394 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6388:	4608      	mov	r0, r1
   b638a:	f002 fd7f 	bl	b8e8c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b638e:	2800      	cmp	r0, #0
   b6390:	bf08      	it	eq
   b6392:	2400      	moveq	r4, #0
      }
   b6394:	4620      	mov	r0, r4
   b6396:	bd10      	pop	{r4, pc}
   b6398:	000ba0dc 	.word	0x000ba0dc

000b639c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b639c:	4b06      	ldr	r3, [pc, #24]	; (b63b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b639e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b63a0:	b510      	push	{r4, lr}
   b63a2:	f100 040c 	add.w	r4, r0, #12
	    ||
   b63a6:	d005      	beq.n	b63b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b63a8:	4608      	mov	r0, r1
   b63aa:	f002 fd6f 	bl	b8e8c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b63ae:	2800      	cmp	r0, #0
   b63b0:	bf08      	it	eq
   b63b2:	2400      	moveq	r4, #0
      }
   b63b4:	4620      	mov	r0, r4
   b63b6:	bd10      	pop	{r4, pc}
   b63b8:	000ba0dc 	.word	0x000ba0dc

000b63bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b63bc:	b510      	push	{r4, lr}
   b63be:	2168      	movs	r1, #104	; 0x68
   b63c0:	4604      	mov	r4, r0
   b63c2:	f002 fd5a 	bl	b8e7a <_ZdlPvj>
   b63c6:	4620      	mov	r0, r4
   b63c8:	bd10      	pop	{r4, pc}

000b63ca <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b63ca:	b510      	push	{r4, lr}
   b63cc:	2128      	movs	r1, #40	; 0x28
   b63ce:	4604      	mov	r4, r0
   b63d0:	f002 fd53 	bl	b8e7a <_ZdlPvj>
   b63d4:	4620      	mov	r0, r4
   b63d6:	bd10      	pop	{r4, pc}

000b63d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b63d8:	b510      	push	{r4, lr}
   b63da:	2130      	movs	r1, #48	; 0x30
   b63dc:	4604      	mov	r4, r0
   b63de:	f002 fd4c 	bl	b8e7a <_ZdlPvj>
   b63e2:	4620      	mov	r0, r4
   b63e4:	bd10      	pop	{r4, pc}

000b63e6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b63e6:	2168      	movs	r1, #104	; 0x68
   b63e8:	f002 bd47 	b.w	b8e7a <_ZdlPvj>

000b63ec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b63ec:	2128      	movs	r1, #40	; 0x28
   b63ee:	f002 bd44 	b.w	b8e7a <_ZdlPvj>

000b63f2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b63f2:	2130      	movs	r1, #48	; 0x30
   b63f4:	f002 bd41 	b.w	b8e7a <_ZdlPvj>

000b63f8 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   b63f8:	b510      	push	{r4, lr}
   b63fa:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   b63fc:	6800      	ldr	r0, [r0, #0]
   b63fe:	b108      	cbz	r0, b6404 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   b6400:	f7ff fc3e 	bl	b5c80 <os_mutex_recursive_destroy>
    }
   b6404:	4620      	mov	r0, r4
   b6406:	bd10      	pop	{r4, pc}

000b6408 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6408:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b640a:	2500      	movs	r5, #0
   b640c:	1cec      	adds	r4, r5, #3
   b640e:	428c      	cmp	r4, r1
   b6410:	d80d      	bhi.n	b642e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b6412:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b6414:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b6416:	5d87      	ldrb	r7, [r0, r6]
   b6418:	4297      	cmp	r7, r2
   b641a:	d105      	bne.n	b6428 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b641c:	4426      	add	r6, r4
   b641e:	42b1      	cmp	r1, r6
   b6420:	d305      	bcc.n	b642e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b6422:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b6424:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b6426:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b6428:	3401      	adds	r4, #1
   b642a:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b642c:	e7ee      	b.n	b640c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b642e:	2000      	movs	r0, #0
   b6430:	e7f9      	b.n	b6426 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000b6432 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6432:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6436:	4604      	mov	r4, r0
   b6438:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   b643c:	461e      	mov	r6, r3
   b643e:	4689      	mov	r9, r1
   b6440:	ab01      	add	r3, sp, #4
   b6442:	4690      	mov	r8, r2
   b6444:	460a      	mov	r2, r1
   b6446:	6a01      	ldr	r1, [r0, #32]
   b6448:	f7ff ffde 	bl	b6408 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   b644c:	6a25      	ldr	r5, [r4, #32]
   b644e:	1cb3      	adds	r3, r6, #2
   b6450:	bb0f      	cbnz	r7, b6496 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x64>
   b6452:	b300      	cbz	r0, b6496 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x64>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   b6454:	195f      	adds	r7, r3, r5
   b6456:	1a3f      	subs	r7, r7, r0
   b6458:	2f1f      	cmp	r7, #31
   b645a:	d818      	bhi.n	b648e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b645c:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b6460:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b6464:	eba5 0209 	sub.w	r2, r5, r9
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b6468:	eb06 030a 	add.w	r3, r6, sl
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b646c:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b646e:	4448      	add	r0, r9
   b6470:	1821      	adds	r1, r4, r0
   b6472:	b292      	uxth	r2, r2
   b6474:	18e0      	adds	r0, r4, r3
   b6476:	f003 f8b5 	bl	b95e4 <memmove>
            selfData_[offset] = len + 1;
   b647a:	1c73      	adds	r3, r6, #1
   b647c:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   b6480:	4632      	mov	r2, r6
   b6482:	4641      	mov	r1, r8
   b6484:	eb04 000a 	add.w	r0, r4, sl
   b6488:	f003 f89e 	bl	b95c8 <memcpy>
            selfLen_ = staLen + len + 2;
   b648c:	6227      	str	r7, [r4, #32]
}
   b648e:	6a20      	ldr	r0, [r4, #32]
   b6490:	b002      	add	sp, #8
   b6492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   b6496:	442b      	add	r3, r5
   b6498:	2b1f      	cmp	r3, #31
   b649a:	d8f8      	bhi.n	b648e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>
        selfData_[selfLen_++] = len + 1;
   b649c:	1c73      	adds	r3, r6, #1
   b649e:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   b64a0:	1ca8      	adds	r0, r5, #2
   b64a2:	4425      	add	r5, r4
   b64a4:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   b64a6:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   b64a8:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   b64ac:	4641      	mov	r1, r8
   b64ae:	4420      	add	r0, r4
   b64b0:	f003 f88a 	bl	b95c8 <memcpy>
        selfLen_ += len;
   b64b4:	6a23      	ldr	r3, [r4, #32]
   b64b6:	4433      	add	r3, r6
   b64b8:	6223      	str	r3, [r4, #32]
   b64ba:	e7e8      	b.n	b648e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>

000b64bc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b64bc:	4a02      	ldr	r2, [pc, #8]	; (b64c8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b64be:	2100      	movs	r1, #0
   b64c0:	200a      	movs	r0, #10
   b64c2:	f7ff bded 	b.w	b60a0 <panic_>
   b64c6:	bf00      	nop
   b64c8:	000b5ce1 	.word	0x000b5ce1

000b64cc <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b64cc:	4603      	mov	r3, r0
   b64ce:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b64d0:	681b      	ldr	r3, [r3, #0]
   b64d2:	e9d3 2100 	ldrd	r2, r1, [r3]
   b64d6:	4710      	bx	r2

000b64d8 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b64d8:	b430      	push	{r4, r5}
   b64da:	460d      	mov	r5, r1
   b64dc:	4611      	mov	r1, r2
   b64de:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b64e0:	6803      	ldr	r3, [r0, #0]
   b64e2:	6809      	ldr	r1, [r1, #0]
   b64e4:	6828      	ldr	r0, [r5, #0]
   b64e6:	e9d3 4300 	ldrd	r4, r3, [r3]
   b64ea:	46a4      	mov	ip, r4
      }
   b64ec:	bc30      	pop	{r4, r5}
   b64ee:	4760      	bx	ip

000b64f0 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b64f0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b64f2:	b538      	push	{r3, r4, r5, lr}
   b64f4:	4604      	mov	r4, r0
	switch (__op)
   b64f6:	d102      	bne.n	b64fe <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b64f8:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b64fa:	6023      	str	r3, [r4, #0]
	}
   b64fc:	e003      	b.n	b6506 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b64fe:	2a02      	cmp	r2, #2
   b6500:	d003      	beq.n	b650a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b6502:	2a03      	cmp	r2, #3
   b6504:	d00d      	beq.n	b6522 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b6506:	2000      	movs	r0, #0
   b6508:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b650a:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b650c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b650e:	f7fd fdc2 	bl	b4096 <_Znwj>
   b6512:	4603      	mov	r3, r0
   b6514:	2800      	cmp	r0, #0
   b6516:	d0f0      	beq.n	b64fa <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b6518:	e895 0003 	ldmia.w	r5, {r0, r1}
   b651c:	e883 0003 	stmia.w	r3, {r0, r1}
   b6520:	e7eb      	b.n	b64fa <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6522:	6800      	ldr	r0, [r0, #0]
   b6524:	2800      	cmp	r0, #0
   b6526:	d0ee      	beq.n	b6506 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b6528:	2108      	movs	r1, #8
   b652a:	f002 fca6 	bl	b8e7a <_ZdlPvj>
   b652e:	e7ea      	b.n	b6506 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b6530 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b6530:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6532:	b538      	push	{r3, r4, r5, lr}
   b6534:	4604      	mov	r4, r0
	switch (__op)
   b6536:	d102      	bne.n	b653e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6538:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b653a:	6023      	str	r3, [r4, #0]
	}
   b653c:	e003      	b.n	b6546 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b653e:	2a02      	cmp	r2, #2
   b6540:	d003      	beq.n	b654a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b6542:	2a03      	cmp	r2, #3
   b6544:	d00d      	beq.n	b6562 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b6546:	2000      	movs	r0, #0
   b6548:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b654a:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b654c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b654e:	f7fd fda2 	bl	b4096 <_Znwj>
   b6552:	4603      	mov	r3, r0
   b6554:	2800      	cmp	r0, #0
   b6556:	d0f0      	beq.n	b653a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b6558:	e895 0003 	ldmia.w	r5, {r0, r1}
   b655c:	e883 0003 	stmia.w	r3, {r0, r1}
   b6560:	e7eb      	b.n	b653a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6562:	6800      	ldr	r0, [r0, #0]
   b6564:	2800      	cmp	r0, #0
   b6566:	d0ee      	beq.n	b6546 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b6568:	2108      	movs	r1, #8
   b656a:	f002 fc86 	bl	b8e7a <_ZdlPvj>
   b656e:	e7ea      	b.n	b6546 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b6570 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6570:	b510      	push	{r4, lr}
   b6572:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b6574:	3058      	adds	r0, #88	; 0x58
   b6576:	f7fe fa39 	bl	b49ec <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b657a:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b657e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6582:	f001 bc71 	b.w	b7e68 <_ZN6StringD1Ev>

000b6586 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6586:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6588:	6843      	ldr	r3, [r0, #4]
   b658a:	3b01      	subs	r3, #1
    {
   b658c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b658e:	6043      	str	r3, [r0, #4]
   b6590:	b963      	cbnz	r3, b65ac <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6592:	6803      	ldr	r3, [r0, #0]
   b6594:	689b      	ldr	r3, [r3, #8]
   b6596:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6598:	68a3      	ldr	r3, [r4, #8]
   b659a:	3b01      	subs	r3, #1
   b659c:	60a3      	str	r3, [r4, #8]
   b659e:	b92b      	cbnz	r3, b65ac <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b65a0:	6823      	ldr	r3, [r4, #0]
   b65a2:	4620      	mov	r0, r4
   b65a4:	68db      	ldr	r3, [r3, #12]
    }
   b65a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b65aa:	4718      	bx	r3
    }
   b65ac:	bd10      	pop	{r4, pc}

000b65ae <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b65ae:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b65b2:	b2da      	uxtb	r2, r3
   b65b4:	2a09      	cmp	r2, #9
   b65b6:	d801      	bhi.n	b65bc <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b65b8:	4618      	mov	r0, r3
   b65ba:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b65bc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b65c0:	2b05      	cmp	r3, #5
   b65c2:	d801      	bhi.n	b65c8 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b65c4:	3857      	subs	r0, #87	; 0x57
   b65c6:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b65c8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b65cc:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b65ce:	bf94      	ite	ls
   b65d0:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b65d2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b65d6:	4770      	bx	lr

000b65d8 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b65d8:	b510      	push	{r4, lr}
            locked_(false) {
   b65da:	2300      	movs	r3, #0
   b65dc:	7003      	strb	r3, [r0, #0]
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b65de:	4b04      	ldr	r3, [pc, #16]	; (b65f0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b65e0:	4604      	mov	r4, r0
   b65e2:	6818      	ldr	r0, [r3, #0]
   b65e4:	f7ff fb54 	bl	b5c90 <os_mutex_recursive_lock>
        locked_ = true;
   b65e8:	2301      	movs	r3, #1
   b65ea:	7023      	strb	r3, [r4, #0]
    }
   b65ec:	4620      	mov	r0, r4
   b65ee:	bd10      	pop	{r4, pc}
   b65f0:	2003e634 	.word	0x2003e634

000b65f4 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b65f4:	b510      	push	{r4, lr}
        if (locked_) {
   b65f6:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b65f8:	4604      	mov	r4, r0
        if (locked_) {
   b65fa:	b11b      	cbz	r3, b6604 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b65fc:	4b02      	ldr	r3, [pc, #8]	; (b6608 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b65fe:	6818      	ldr	r0, [r3, #0]
   b6600:	f7ff fb4e 	bl	b5ca0 <os_mutex_recursive_unlock>
    }
   b6604:	4620      	mov	r0, r4
   b6606:	bd10      	pop	{r4, pc}
   b6608:	2003e634 	.word	0x2003e634

000b660c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b660c:	b082      	sub	sp, #8
   b660e:	4603      	mov	r3, r0
    address_ = addr;
   b6610:	6808      	ldr	r0, [r1, #0]
   b6612:	6849      	ldr	r1, [r1, #4]
   b6614:	466a      	mov	r2, sp
   b6616:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b6618:	466a      	mov	r2, sp
   b661a:	ca03      	ldmia	r2!, {r0, r1}
   b661c:	6018      	str	r0, [r3, #0]
}
   b661e:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6620:	6059      	str	r1, [r3, #4]
}
   b6622:	b002      	add	sp, #8
   b6624:	4770      	bx	lr

000b6626 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b6626:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b6628:	7982      	ldrb	r2, [r0, #6]
   b662a:	798b      	ldrb	r3, [r1, #6]
   b662c:	429a      	cmp	r2, r3
   b662e:	d106      	bne.n	b663e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6630:	2206      	movs	r2, #6
   b6632:	f002 ffb9 	bl	b95a8 <memcmp>
   b6636:	fab0 f080 	clz	r0, r0
   b663a:	0940      	lsrs	r0, r0, #5
}
   b663c:	bd08      	pop	{r3, pc}
    return false;
   b663e:	2000      	movs	r0, #0
   b6640:	e7fc      	b.n	b663c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b6642 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b6642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6646:	6003      	str	r3, [r0, #0]
   b6648:	8083      	strh	r3, [r0, #4]
}
   b664a:	2000      	movs	r0, #0
   b664c:	4770      	bx	lr

000b664e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b664e:	b508      	push	{r3, lr}
   b6650:	4602      	mov	r2, r0
        : address_{} {
   b6652:	2100      	movs	r1, #0
   b6654:	6001      	str	r1, [r0, #0]
   b6656:	6041      	str	r1, [r0, #4]
    clear();
   b6658:	f7ff fff3 	bl	b6642 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b665c:	7191      	strb	r1, [r2, #6]
}
   b665e:	4610      	mov	r0, r2
   b6660:	bd08      	pop	{r3, pc}
	...

000b6664 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b6664:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b6666:	2301      	movs	r3, #1
   b6668:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b666a:	4b05      	ldr	r3, [pc, #20]	; (b6680 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b666c:	4602      	mov	r2, r0
   b666e:	f103 0110 	add.w	r1, r3, #16
   b6672:	f853 4b04 	ldr.w	r4, [r3], #4
   b6676:	f842 4b04 	str.w	r4, [r2], #4
   b667a:	428b      	cmp	r3, r1
   b667c:	d1f9      	bne.n	b6672 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b667e:	bd10      	pop	{r4, pc}
   b6680:	000ba0ea 	.word	0x000ba0ea

000b6684 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   b6684:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   b6686:	690b      	ldr	r3, [r1, #16]
   b6688:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b668a:	f101 0210 	add.w	r2, r1, #16
   b668e:	4603      	mov	r3, r0
   b6690:	f851 4b04 	ldr.w	r4, [r1], #4
   b6694:	f843 4b04 	str.w	r4, [r3], #4
   b6698:	4291      	cmp	r1, r2
   b669a:	d1f9      	bne.n	b6690 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   b669c:	bd10      	pop	{r4, pc}

000b669e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b669e:	b510      	push	{r4, lr}
    if (uuid128) {
   b66a0:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b66a2:	4604      	mov	r4, r0
    if (uuid128) {
   b66a4:	b1b1      	cbz	r1, b66d4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b66a6:	2a01      	cmp	r2, #1
   b66a8:	f101 0210 	add.w	r2, r1, #16
   b66ac:	d10a      	bne.n	b66c4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b66ae:	4601      	mov	r1, r0
   b66b0:	f853 0b04 	ldr.w	r0, [r3], #4
   b66b4:	f841 0b04 	str.w	r0, [r1], #4
   b66b8:	4293      	cmp	r3, r2
   b66ba:	d1f9      	bne.n	b66b0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b66bc:	2301      	movs	r3, #1
   b66be:	6123      	str	r3, [r4, #16]
}
   b66c0:	4620      	mov	r0, r4
   b66c2:	bd10      	pop	{r4, pc}
   b66c4:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b66c6:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b66ca:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b66ce:	429a      	cmp	r2, r3
   b66d0:	d1f9      	bne.n	b66c6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b66d2:	e7f3      	b.n	b66bc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b66d4:	2210      	movs	r2, #16
   b66d6:	f002 ff9f 	bl	b9618 <memset>
   b66da:	e7f1      	b.n	b66c0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b66dc <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b66dc:	b538      	push	{r3, r4, r5, lr}
   b66de:	4604      	mov	r4, r0
   b66e0:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b66e2:	461a      	mov	r2, r3
   b66e4:	f7ff ffdb 	bl	b669e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b66e8:	81a5      	strh	r5, [r4, #12]
}
   b66ea:	4620      	mov	r0, r4
   b66ec:	bd38      	pop	{r3, r4, r5, pc}
	...

000b66f0 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b66f0:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b66f2:	6902      	ldr	r2, [r0, #16]
   b66f4:	b922      	cbnz	r2, b6700 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b66f6:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b66f8:	3800      	subs	r0, #0
   b66fa:	bf18      	it	ne
   b66fc:	2001      	movne	r0, #1
}
   b66fe:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6700:	4902      	ldr	r1, [pc, #8]	; (b670c <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b6702:	2210      	movs	r2, #16
   b6704:	f002 ff50 	bl	b95a8 <memcmp>
   b6708:	e7f6      	b.n	b66f8 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b670a:	bf00      	nop
   b670c:	000ba10a 	.word	0x000ba10a

000b6710 <_ZNK8particle7BleUuid4typeEv>:
}
   b6710:	6900      	ldr	r0, [r0, #16]
   b6712:	4770      	bx	lr

000b6714 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b6714:	b538      	push	{r3, r4, r5, lr}
   b6716:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b6718:	2214      	movs	r2, #20
   b671a:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b671c:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b671e:	f002 ff7b 	bl	b9618 <memset>
    if (type_ == BleUuidType::SHORT) {
   b6722:	6923      	ldr	r3, [r4, #16]
   b6724:	b91b      	cbnz	r3, b672e <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b6726:	89a3      	ldrh	r3, [r4, #12]
   b6728:	802b      	strh	r3, [r5, #0]
}
   b672a:	4628      	mov	r0, r5
   b672c:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b672e:	2301      	movs	r3, #1
   b6730:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b6732:	4621      	mov	r1, r4
   b6734:	462b      	mov	r3, r5
   b6736:	f104 0210 	add.w	r2, r4, #16
   b673a:	f851 0b04 	ldr.w	r0, [r1], #4
   b673e:	f843 0b04 	str.w	r0, [r3], #4
   b6742:	4291      	cmp	r1, r2
   b6744:	d1f9      	bne.n	b673a <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b6746:	e7f0      	b.n	b672a <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b6748 <_ZNK8particle7BleUuid7shortedEv>:
}
   b6748:	8980      	ldrh	r0, [r0, #12]
   b674a:	4770      	bx	lr

000b674c <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b674c:	4770      	bx	lr

000b674e <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b674e:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6750:	6902      	ldr	r2, [r0, #16]
   b6752:	690b      	ldr	r3, [r1, #16]
   b6754:	429a      	cmp	r2, r3
   b6756:	d106      	bne.n	b6766 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b6758:	2210      	movs	r2, #16
   b675a:	f002 ff25 	bl	b95a8 <memcmp>
   b675e:	fab0 f080 	clz	r0, r0
   b6762:	0940      	lsrs	r0, r0, #5
}
   b6764:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6766:	2000      	movs	r0, #0
   b6768:	e7fc      	b.n	b6764 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b676c <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b676c:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b676e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b6772:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6774:	4b34      	ldr	r3, [pc, #208]	; (b6848 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b6776:	460c      	mov	r4, r1
   b6778:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b677a:	4602      	mov	r2, r0
   b677c:	f103 0110 	add.w	r1, r3, #16
   b6780:	f853 0b04 	ldr.w	r0, [r3], #4
   b6784:	f842 0b04 	str.w	r0, [r2], #4
   b6788:	428b      	cmp	r3, r1
   b678a:	d1f9      	bne.n	b6780 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b678c:	b344      	cbz	r4, b67e0 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b678e:	2124      	movs	r1, #36	; 0x24
   b6790:	4620      	mov	r0, r4
   b6792:	f002 ffa4 	bl	b96de <strnlen>
   b6796:	2804      	cmp	r0, #4
   b6798:	f04f 0500 	mov.w	r5, #0
   b679c:	d123      	bne.n	b67e6 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b679e:	f8ad 5004 	strh.w	r5, [sp, #4]
   b67a2:	af01      	add	r7, sp, #4
   b67a4:	1ca5      	adds	r5, r4, #2
   b67a6:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b67a8:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b67ac:	f7ff feff 	bl	b65ae <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b67b0:	f1b0 0800 	subs.w	r8, r0, #0
   b67b4:	db12      	blt.n	b67dc <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b67b6:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b67ba:	f7ff fef8 	bl	b65ae <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b67be:	2800      	cmp	r0, #0
   b67c0:	db0c      	blt.n	b67dc <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b67c2:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b67c4:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b67c8:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b67ca:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b67ce:	d1eb      	bne.n	b67a8 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b67d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b67d4:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b67d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b67da:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b67dc:	2300      	movs	r3, #0
   b67de:	6133      	str	r3, [r6, #16]
}
   b67e0:	b002      	add	sp, #8
   b67e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b67e6:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b67ea:	2124      	movs	r1, #36	; 0x24
   b67ec:	4620      	mov	r0, r4
   b67ee:	f002 ff76 	bl	b96de <strnlen>
   b67f2:	42a8      	cmp	r0, r5
   b67f4:	d807      	bhi.n	b6806 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b67f6:	4642      	mov	r2, r8
   b67f8:	2100      	movs	r1, #0
   b67fa:	4630      	mov	r0, r6
}
   b67fc:	b002      	add	sp, #8
   b67fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b6802:	f002 bf09 	b.w	b9618 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6806:	f1b8 0f00 	cmp.w	r8, #0
   b680a:	d0e9      	beq.n	b67e0 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b680c:	5d60      	ldrb	r0, [r4, r5]
   b680e:	f7ff fece 	bl	b65ae <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b6812:	0603      	lsls	r3, r0, #24
   b6814:	d415      	bmi.n	b6842 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b6816:	0100      	lsls	r0, r0, #4
   b6818:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b681c:	b2c7      	uxtb	r7, r0
   b681e:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b6822:	2124      	movs	r1, #36	; 0x24
   b6824:	4620      	mov	r0, r4
   b6826:	f002 ff5a 	bl	b96de <strnlen>
   b682a:	3501      	adds	r5, #1
   b682c:	42a8      	cmp	r0, r5
   b682e:	d908      	bls.n	b6842 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b6830:	5d60      	ldrb	r0, [r4, r5]
   b6832:	f7ff febc 	bl	b65ae <_ZN8particle11hexToNibbleEc>
   b6836:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b6838:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b683a:	bfa4      	itt	ge
   b683c:	4338      	orrge	r0, r7
   b683e:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6842:	3501      	adds	r5, #1
   b6844:	e7d1      	b.n	b67ea <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b6846:	bf00      	nop
   b6848:	000ba0ea 	.word	0x000ba0ea

000b684c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b684c:	b513      	push	{r0, r1, r4, lr}
   b684e:	4604      	mov	r4, r0
   b6850:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b6852:	f7ff ff07 	bl	b6664 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b6856:	4620      	mov	r0, r4
   b6858:	9901      	ldr	r1, [sp, #4]
   b685a:	f7ff ff87 	bl	b676c <_ZN8particle7BleUuid9constructEPKc>
}
   b685e:	4620      	mov	r0, r4
   b6860:	b002      	add	sp, #8
   b6862:	bd10      	pop	{r4, pc}

000b6864 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6864:	b430      	push	{r4, r5}
   b6866:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b686a:	b11a      	cbz	r2, b6874 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b686c:	9502      	str	r5, [sp, #8]
}
   b686e:	bc30      	pop	{r4, r5}
   b6870:	f7ff bddf 	b.w	b6432 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfLen_;
   b6874:	6a00      	ldr	r0, [r0, #32]
}
   b6876:	bc30      	pop	{r4, r5}
   b6878:	4770      	bx	lr

000b687a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b687a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b687c:	4604      	mov	r4, r0
          selfLen_(0) {
   b687e:	221f      	movs	r2, #31
   b6880:	2100      	movs	r1, #0
   b6882:	f002 fec9 	bl	b9618 <memset>
   b6886:	2300      	movs	r3, #0
   b6888:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b688a:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b688c:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b688e:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6890:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6894:	4619      	mov	r1, r3
   b6896:	f10d 020f 	add.w	r2, sp, #15
   b689a:	4620      	mov	r0, r4
   b689c:	f7ff ffe2 	bl	b6864 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b68a0:	4620      	mov	r0, r4
   b68a2:	b004      	add	sp, #16
   b68a4:	bd10      	pop	{r4, pc}

000b68a6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b68a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   b68a8:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b68aa:	460e      	mov	r6, r1
   b68ac:	ab01      	add	r3, sp, #4
   b68ae:	6a01      	ldr	r1, [r0, #32]
   b68b0:	4604      	mov	r4, r0
   b68b2:	f7ff fda9 	bl	b6408 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b68b6:	4605      	mov	r5, r0
   b68b8:	b178      	cbz	r0, b68da <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   b68ba:	9801      	ldr	r0, [sp, #4]
   b68bc:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   b68be:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   b68c0:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   b68c2:	4421      	add	r1, r4
   b68c4:	1b52      	subs	r2, r2, r5
   b68c6:	4420      	add	r0, r4
   b68c8:	f002 fe7e 	bl	b95c8 <memcpy>
        selfLen_ -= len;
   b68cc:	6a20      	ldr	r0, [r4, #32]
   b68ce:	1b40      	subs	r0, r0, r5
   b68d0:	6220      	str	r0, [r4, #32]
        remove(type);
   b68d2:	4631      	mov	r1, r6
   b68d4:	4620      	mov	r0, r4
   b68d6:	f7ff ffe6 	bl	b68a6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b68da:	b002      	add	sp, #8
   b68dc:	bd70      	pop	{r4, r5, r6, pc}
	...

000b68e0 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b68e0:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b68e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b68e6:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b68e8:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b68ea:	8043      	strh	r3, [r0, #2]
   b68ec:	220e      	movs	r2, #14
   b68ee:	4629      	mov	r1, r5
   b68f0:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b68f2:	7105      	strb	r5, [r0, #4]
   b68f4:	3006      	adds	r0, #6
   b68f6:	f002 fe8f 	bl	b9618 <memset>
   b68fa:	f104 0014 	add.w	r0, r4, #20
   b68fe:	f7ff feb1 	bl	b6664 <_ZN8particle7BleUuidC1Ev>
   b6902:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6906:	f7ff fead 	bl	b6664 <_ZN8particle7BleUuidC1Ev>
   b690a:	4904      	ldr	r1, [pc, #16]	; (b691c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b690c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6910:	f001 faf5 	bl	b7efe <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6914:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b6916:	4620      	mov	r0, r4
   b6918:	bd38      	pop	{r3, r4, r5, pc}
   b691a:	bf00      	nop
   b691c:	000b99dc 	.word	0x000b99dc

000b6920 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b6920:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b6922:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b6926:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b692a:	4293      	cmp	r3, r2
   b692c:	4618      	mov	r0, r3
   b692e:	d006      	beq.n	b693e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b6930:	6804      	ldr	r4, [r0, #0]
   b6932:	8824      	ldrh	r4, [r4, #0]
   b6934:	428c      	cmp	r4, r1
   b6936:	f103 0308 	add.w	r3, r3, #8
   b693a:	d1f6      	bne.n	b692a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b693c:	bd10      	pop	{r4, pc}
        return nullptr;
   b693e:	2000      	movs	r0, #0
   b6940:	e7fc      	b.n	b693c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b6944 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b6944:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6946:	4606      	mov	r6, r0
   b6948:	b085      	sub	sp, #20
   b694a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b694c:	460d      	mov	r5, r1
   b694e:	2900      	cmp	r1, #0
   b6950:	d050      	beq.n	b69f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b6952:	2a00      	cmp	r2, #0
   b6954:	d04e      	beq.n	b69f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6956:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b6958:	7823      	ldrb	r3, [r4, #0]
   b695a:	2af4      	cmp	r2, #244	; 0xf4
   b695c:	bf28      	it	cs
   b695e:	22f4      	movcs	r2, #244	; 0xf4
   b6960:	b343      	cbz	r3, b69b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b6962:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b6964:	0798      	lsls	r0, r3, #30
   b6966:	d509      	bpl.n	b697c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b6968:	89a0      	ldrh	r0, [r4, #12]
   b696a:	9203      	str	r2, [sp, #12]
   b696c:	2300      	movs	r3, #0
   b696e:	f7ff f931 	bl	b5bd4 <hal_ble_gatt_server_set_characteristic_value>
   b6972:	2800      	cmp	r0, #0
   b6974:	9a03      	ldr	r2, [sp, #12]
   b6976:	da03      	bge.n	b6980 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b6978:	b005      	add	sp, #20
   b697a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b697c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6980:	6834      	ldr	r4, [r6, #0]
   b6982:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b6984:	06d9      	lsls	r1, r3, #27
   b6986:	d509      	bpl.n	b699c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b6988:	2f01      	cmp	r7, #1
   b698a:	d007      	beq.n	b699c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b698c:	89a0      	ldrh	r0, [r4, #12]
   b698e:	2300      	movs	r3, #0
   b6990:	4629      	mov	r1, r5
}
   b6992:	b005      	add	sp, #20
   b6994:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6998:	f7ff b94e 	b.w	b5c38 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b699c:	069b      	lsls	r3, r3, #26
   b699e:	d5eb      	bpl.n	b6978 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b69a0:	2f02      	cmp	r7, #2
   b69a2:	d0e9      	beq.n	b6978 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b69a4:	89a0      	ldrh	r0, [r4, #12]
   b69a6:	2300      	movs	r3, #0
   b69a8:	4629      	mov	r1, r5
}
   b69aa:	b005      	add	sp, #20
   b69ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b69b0:	f7ff b94c 	b.w	b5c4c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b69b4:	8860      	ldrh	r0, [r4, #2]
   b69b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b69ba:	4288      	cmp	r0, r1
   b69bc:	d01c      	beq.n	b69f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b69be:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b69c0:	074e      	lsls	r6, r1, #29
   b69c2:	d501      	bpl.n	b69c8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b69c4:	2f01      	cmp	r7, #1
   b69c6:	d104      	bne.n	b69d2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b69c8:	070b      	lsls	r3, r1, #28
   b69ca:	d409      	bmi.n	b69e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b69cc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b69d0:	e7d2      	b.n	b6978 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b69d2:	89a1      	ldrh	r1, [r4, #12]
   b69d4:	9300      	str	r3, [sp, #0]
   b69d6:	4613      	mov	r3, r2
   b69d8:	462a      	mov	r2, r5
   b69da:	f7ff f90f 	bl	b5bfc <hal_ble_gatt_client_write_without_response>
   b69de:	e7cb      	b.n	b6978 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b69e0:	2f02      	cmp	r7, #2
   b69e2:	d0f3      	beq.n	b69cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b69e4:	2300      	movs	r3, #0
   b69e6:	89a1      	ldrh	r1, [r4, #12]
   b69e8:	9300      	str	r3, [sp, #0]
   b69ea:	4613      	mov	r3, r2
   b69ec:	462a      	mov	r2, r5
   b69ee:	f7ff f8fb 	bl	b5be8 <hal_ble_gatt_client_write_with_response>
   b69f2:	e7c1      	b.n	b6978 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b69f4:	4802      	ldr	r0, [pc, #8]	; (b6a00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b69f6:	e7bf      	b.n	b6978 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b69f8:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b69fc:	e7bc      	b.n	b6978 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b69fe:	bf00      	nop
   b6a00:	fffffef2 	.word	0xfffffef2

000b6a04 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   b6a04:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   b6a06:	688a      	ldr	r2, [r1, #8]
   b6a08:	6809      	ldr	r1, [r1, #0]
   b6a0a:	f7ff bf9b 	b.w	b6944 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b6a0e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6a0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6a10:	460c      	mov	r4, r1
   b6a12:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6a14:	21f4      	movs	r1, #244	; 0xf4
   b6a16:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6a18:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6a1a:	f002 fe60 	bl	b96de <strnlen>
   b6a1e:	9b01      	ldr	r3, [sp, #4]
   b6a20:	4602      	mov	r2, r0
   b6a22:	4621      	mov	r1, r4
   b6a24:	4628      	mov	r0, r5
}
   b6a26:	b003      	add	sp, #12
   b6a28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6a2c:	f7ff bf8a 	b.w	b6944 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b6a30 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b6a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6a34:	2600      	movs	r6, #0
   b6a36:	6006      	str	r6, [r0, #0]
   b6a38:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6a3a:	2028      	movs	r0, #40	; 0x28
   b6a3c:	460c      	mov	r4, r1
   b6a3e:	f7fd fb2a 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6a42:	1e05      	subs	r5, r0, #0
   b6a44:	f105 080c 	add.w	r8, r5, #12
   b6a48:	d00f      	beq.n	b6a6a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b6a4a:	2301      	movs	r3, #1
   b6a4c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6a50:	4b08      	ldr	r3, [pc, #32]	; (b6a74 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b6a52:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b6a54:	4640      	mov	r0, r8
   b6a56:	f7ff fe05 	bl	b6664 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b6a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b6a5c:	622e      	str	r6, [r5, #32]
   b6a5e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b6a62:	4646      	mov	r6, r8
   b6a64:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6a66:	6823      	ldr	r3, [r4, #0]
   b6a68:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b6a6a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6a6e:	4638      	mov	r0, r7
   b6a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6a74:	000ba0ac 	.word	0x000ba0ac

000b6a78 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6a78:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6a7a:	2500      	movs	r5, #0
   b6a7c:	6005      	str	r5, [r0, #0]
   b6a7e:	4606      	mov	r6, r0
   b6a80:	2030      	movs	r0, #48	; 0x30
   b6a82:	f7fd fb08 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6a86:	4604      	mov	r4, r0
   b6a88:	b188      	cbz	r0, b6aae <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b6a8a:	2301      	movs	r3, #1
   b6a8c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6a90:	4b09      	ldr	r3, [pc, #36]	; (b6ab8 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b6a92:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b6a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6a98:	8183      	strh	r3, [r0, #12]
   b6a9a:	300e      	adds	r0, #14
   b6a9c:	f7ff fdd7 	bl	b664e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6aa0:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b6aa4:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6aa8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b6aac:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b6aae:	6074      	str	r4, [r6, #4]
   b6ab0:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b6ab2:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6ab4:	4630      	mov	r0, r6
   b6ab6:	bd70      	pop	{r4, r5, r6, pc}
   b6ab8:	000ba0c8 	.word	0x000ba0c8

000b6abc <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b6abc:	b513      	push	{r0, r1, r4, lr}
   b6abe:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6ac0:	a801      	add	r0, sp, #4
   b6ac2:	f7ff fd89 	bl	b65d8 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b6ac6:	6823      	ldr	r3, [r4, #0]
   b6ac8:	881c      	ldrh	r4, [r3, #0]
   b6aca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6ace:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b6ad0:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b6ad2:	bf18      	it	ne
   b6ad4:	2401      	movne	r4, #1
    WiringBleLock lk;
   b6ad6:	f7ff fd8d 	bl	b65f4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6ada:	4620      	mov	r0, r4
   b6adc:	b002      	add	sp, #8
   b6ade:	bd10      	pop	{r4, pc}

000b6ae0 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b6ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6ae2:	460d      	mov	r5, r1
   b6ae4:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6ae6:	a801      	add	r0, sp, #4
   b6ae8:	f7ff fd76 	bl	b65d8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6aec:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b6aee:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b6af2:	6023      	str	r3, [r4, #0]
   b6af4:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b6af8:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b6afa:	a801      	add	r0, sp, #4
   b6afc:	f7ff fd7a 	bl	b65f4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b6b00:	4620      	mov	r0, r4
   b6b02:	b003      	add	sp, #12
   b6b04:	bd30      	pop	{r4, r5, pc}

000b6b06 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b6b06:	b530      	push	{r4, r5, lr}
   b6b08:	4605      	mov	r5, r0
   b6b0a:	b087      	sub	sp, #28
   b6b0c:	460c      	mov	r4, r1
    WiringBleLock lk;
   b6b0e:	a801      	add	r0, sp, #4
   b6b10:	f7ff fd62 	bl	b65d8 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b6b14:	682a      	ldr	r2, [r5, #0]
   b6b16:	6823      	ldr	r3, [r4, #0]
   b6b18:	8812      	ldrh	r2, [r2, #0]
   b6b1a:	881b      	ldrh	r3, [r3, #0]
   b6b1c:	429a      	cmp	r2, r3
   b6b1e:	d10d      	bne.n	b6b3c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b6b20:	4629      	mov	r1, r5
   b6b22:	a802      	add	r0, sp, #8
   b6b24:	f7ff ffdc 	bl	b6ae0 <_ZNK8particle13BlePeerDevice7addressEv>
   b6b28:	4621      	mov	r1, r4
   b6b2a:	a804      	add	r0, sp, #16
   b6b2c:	f7ff ffd8 	bl	b6ae0 <_ZNK8particle13BlePeerDevice7addressEv>
   b6b30:	a904      	add	r1, sp, #16
   b6b32:	a802      	add	r0, sp, #8
   b6b34:	f7ff fd77 	bl	b6626 <_ZNK8particle10BleAddresseqERKS0_>
   b6b38:	4604      	mov	r4, r0
   b6b3a:	b900      	cbnz	r0, b6b3e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6b3c:	2400      	movs	r4, #0
    WiringBleLock lk;
   b6b3e:	a801      	add	r0, sp, #4
   b6b40:	f7ff fd58 	bl	b65f4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6b44:	4620      	mov	r0, r4
   b6b46:	b007      	add	sp, #28
   b6b48:	bd30      	pop	{r4, r5, pc}
	...

000b6b4c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6b4c:	b510      	push	{r4, lr}
   b6b4e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b6b50:	2054      	movs	r0, #84	; 0x54
   b6b52:	f7fd faa0 	bl	b4096 <_Znwj>
   b6b56:	4601      	mov	r1, r0
   b6b58:	b160      	cbz	r0, b6b74 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b6b5a:	2300      	movs	r3, #0
   b6b5c:	e9c0 3300 	strd	r3, r3, [r0]
   b6b60:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6b64:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6b68:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b6b6c:	6203      	str	r3, [r0, #32]
   b6b6e:	62c3      	str	r3, [r0, #44]	; 0x2c
   b6b70:	63c3      	str	r3, [r0, #60]	; 0x3c
   b6b72:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6b74:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b6b76:	b919      	cbnz	r1, b6b80 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   b6b78:	4a09      	ldr	r2, [pc, #36]	; (b6ba0 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b6b7a:	200a      	movs	r0, #10
   b6b7c:	f7ff fa90 	bl	b60a0 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b6b80:	2000      	movs	r0, #0
   b6b82:	f7fe ffeb 	bl	b5b5c <hal_ble_stack_init>
   b6b86:	b120      	cbz	r0, b6b92 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   b6b88:	4a05      	ldr	r2, [pc, #20]	; (b6ba0 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b6b8a:	2100      	movs	r1, #0
   b6b8c:	200a      	movs	r0, #10
   b6b8e:	f7ff fa87 	bl	b60a0 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b6b92:	6821      	ldr	r1, [r4, #0]
   b6b94:	4803      	ldr	r0, [pc, #12]	; (b6ba4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6b96:	2200      	movs	r2, #0
   b6b98:	f7ff f844 	bl	b5c24 <hal_ble_set_callback_on_periph_link_events>
}
   b6b9c:	4620      	mov	r0, r4
   b6b9e:	bd10      	pop	{r4, pc}
   b6ba0:	000b5ce1 	.word	0x000b5ce1
   b6ba4:	000b6fc1 	.word	0x000b6fc1

000b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b6ba8:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b6baa:	4c0b      	ldr	r4, [pc, #44]	; (b6bd8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6bac:	7823      	ldrb	r3, [r4, #0]
   b6bae:	f3bf 8f5b 	dmb	ish
   b6bb2:	07db      	lsls	r3, r3, #31
   b6bb4:	d40e      	bmi.n	b6bd4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   b6bb6:	4620      	mov	r0, r4
   b6bb8:	f7fd fa73 	bl	b40a2 <__cxa_guard_acquire>
   b6bbc:	b150      	cbz	r0, b6bd4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   b6bbe:	4807      	ldr	r0, [pc, #28]	; (b6bdc <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6bc0:	f7ff ffc4 	bl	b6b4c <_ZN8particle14BleLocalDeviceC1Ev>
   b6bc4:	4620      	mov	r0, r4
   b6bc6:	f7fd fa71 	bl	b40ac <__cxa_guard_release>
   b6bca:	4a05      	ldr	r2, [pc, #20]	; (b6be0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   b6bcc:	4905      	ldr	r1, [pc, #20]	; (b6be4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   b6bce:	4803      	ldr	r0, [pc, #12]	; (b6bdc <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6bd0:	f002 f94e 	bl	b8e70 <__aeabi_atexit>
    return instance;
}
   b6bd4:	4801      	ldr	r0, [pc, #4]	; (b6bdc <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6bd6:	bd10      	pop	{r4, pc}
   b6bd8:	2003e62c 	.word	0x2003e62c
   b6bdc:	2003e638 	.word	0x2003e638
   b6be0:	2003da58 	.word	0x2003da58
   b6be4:	000b6de5 	.word	0x000b6de5

000b6be8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6be8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b6bea:	6803      	ldr	r3, [r0, #0]
   b6bec:	3b09      	subs	r3, #9
   b6bee:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6bf0:	b08d      	sub	sp, #52	; 0x34
   b6bf2:	4604      	mov	r4, r0
   b6bf4:	460d      	mov	r5, r1
    switch (event->type) {
   b6bf6:	d811      	bhi.n	b6c1c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b6bf8:	f7ff ffd6 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6bfc:	88a1      	ldrh	r1, [r4, #4]
   b6bfe:	6800      	ldr	r0, [r0, #0]
   b6c00:	f7ff fe8e 	bl	b6920 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b6c04:	4603      	mov	r3, r0
   b6c06:	b958      	cbnz	r0, b6c20 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b6c08:	2220      	movs	r2, #32
   b6c0a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b6c0e:	4a0b      	ldr	r2, [pc, #44]	; (b6c3c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b6c10:	9200      	str	r2, [sp, #0]
   b6c12:	490b      	ldr	r1, [pc, #44]	; (b6c40 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b6c14:	aa04      	add	r2, sp, #16
   b6c16:	2032      	movs	r0, #50	; 0x32
   b6c18:	f7ff fa4a 	bl	b60b0 <log_message>
}
   b6c1c:	b00d      	add	sp, #52	; 0x34
   b6c1e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b6c20:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b6c22:	2a00      	cmp	r2, #0
   b6c24:	d0fa      	beq.n	b6c1c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b6c26:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6c2a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b6c2e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b6c32:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b6c34:	aa04      	add	r2, sp, #16
   b6c36:	a903      	add	r1, sp, #12
   b6c38:	47a0      	blx	r4
}
   b6c3a:	e7ef      	b.n	b6c1c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b6c3c:	000b9fbb 	.word	0x000b9fbb
   b6c40:	000b9f94 	.word	0x000b9f94

000b6c44 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b6c44:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b6c46:	2000      	movs	r0, #0
   b6c48:	f7fe ff88 	bl	b5b5c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b6c4c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6c50:	bd08      	pop	{r3, pc}

000b6c52 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b6c52:	4608      	mov	r0, r1
   b6c54:	b911      	cbnz	r1, b6c5c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b6c56:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b6c58:	f7fe bf90 	b.w	b5b7c <hal_ble_gap_set_advertising_data>
   b6c5c:	6a09      	ldr	r1, [r1, #32]
   b6c5e:	2200      	movs	r2, #0
   b6c60:	e7fa      	b.n	b6c58 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b6c62 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b6c62:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   b6c64:	4608      	mov	r0, r1
   b6c66:	b929      	cbnz	r1, b6c74 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b6c68:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b6c6a:	b003      	add	sp, #12
   b6c6c:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6c70:	f7fe bf8c 	b.w	b5b8c <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b6c74:	2101      	movs	r1, #1
   b6c76:	9001      	str	r0, [sp, #4]
   b6c78:	f7ff fe15 	bl	b68a6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6c7c:	9801      	ldr	r0, [sp, #4]
   b6c7e:	2200      	movs	r2, #0
   b6c80:	6a01      	ldr	r1, [r0, #32]
   b6c82:	e7f2      	b.n	b6c6a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000b6c84 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b6c84:	b538      	push	{r3, r4, r5, lr}
   b6c86:	4604      	mov	r4, r0
   b6c88:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b6c8a:	f7ff ffe2 	bl	b6c52 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b6c8e:	2800      	cmp	r0, #0
   b6c90:	db0a      	blt.n	b6ca8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b6c92:	4629      	mov	r1, r5
   b6c94:	4620      	mov	r0, r4
   b6c96:	f7ff ffe4 	bl	b6c62 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b6c9a:	2800      	cmp	r0, #0
   b6c9c:	db04      	blt.n	b6ca8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b6c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b6ca2:	2000      	movs	r0, #0
   b6ca4:	f7fe bf7a 	b.w	b5b9c <hal_ble_gap_start_advertising>
}
   b6ca8:	bd38      	pop	{r3, r4, r5, pc}

000b6caa <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b6caa:	6803      	ldr	r3, [r0, #0]
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b6cac:	69d8      	ldr	r0, [r3, #28]
}
   b6cae:	2800      	cmp	r0, #0
   b6cb0:	bfd4      	ite	le
   b6cb2:	2000      	movle	r0, #0
   b6cb4:	2001      	movgt	r0, #1
   b6cb6:	4770      	bx	lr

000b6cb8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6cb8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6cba:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6cbc:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6cbe:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6cc0:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6cc2:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6cc4:	f7fd f9e7 	bl	b4096 <_Znwj>
   b6cc8:	b118      	cbz	r0, b6cd2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6cca:	682b      	ldr	r3, [r5, #0]
   b6ccc:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6cce:	686b      	ldr	r3, [r5, #4]
   b6cd0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6cd2:	4b03      	ldr	r3, [pc, #12]	; (b6ce0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b6cd4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6cd6:	4b03      	ldr	r3, [pc, #12]	; (b6ce4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6cd8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6cda:	60a3      	str	r3, [r4, #8]
      }
   b6cdc:	4620      	mov	r0, r4
   b6cde:	bd38      	pop	{r3, r4, r5, pc}
   b6ce0:	000b64d9 	.word	0x000b64d9
   b6ce4:	000b6531 	.word	0x000b6531

000b6ce8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6ce8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6cea:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6cec:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6cee:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6cf0:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6cf2:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6cf4:	f7fd f9cf 	bl	b4096 <_Znwj>
   b6cf8:	b118      	cbz	r0, b6d02 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   b6cfa:	682b      	ldr	r3, [r5, #0]
   b6cfc:	6003      	str	r3, [r0, #0]
   b6cfe:	686b      	ldr	r3, [r5, #4]
   b6d00:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6d02:	4b03      	ldr	r3, [pc, #12]	; (b6d10 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b6d04:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6d06:	4b03      	ldr	r3, [pc, #12]	; (b6d14 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6d08:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6d0a:	60a3      	str	r3, [r4, #8]
      }
   b6d0c:	4620      	mov	r0, r4
   b6d0e:	bd38      	pop	{r3, r4, r5, pc}
   b6d10:	000b64cd 	.word	0x000b64cd
   b6d14:	000b64f1 	.word	0x000b64f1

000b6d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b6d18:	680b      	ldr	r3, [r1, #0]
   b6d1a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b6d1c:	b113      	cbz	r3, b6d24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b6d1e:	685a      	ldr	r2, [r3, #4]
   b6d20:	3201      	adds	r2, #1
   b6d22:	605a      	str	r2, [r3, #4]
      }
   b6d24:	4770      	bx	lr

000b6d26 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b6d26:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6d28:	f851 3b04 	ldr.w	r3, [r1], #4
   b6d2c:	4604      	mov	r4, r0
   b6d2e:	f840 3b04 	str.w	r3, [r0], #4
   b6d32:	f7ff fff1 	bl	b6d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b6d36:	6823      	ldr	r3, [r4, #0]
   b6d38:	b90b      	cbnz	r3, b6d3e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b6d3a:	f7ff fbbf 	bl	b64bc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b6d3e:	4620      	mov	r0, r4
   b6d40:	bd10      	pop	{r4, pc}

000b6d42 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6d42:	b510      	push	{r4, lr}
   b6d44:	f851 3b04 	ldr.w	r3, [r1], #4
   b6d48:	4604      	mov	r4, r0
   b6d4a:	f840 3b04 	str.w	r3, [r0], #4
   b6d4e:	f7ff ffe3 	bl	b6d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6d52:	4620      	mov	r0, r4
   b6d54:	bd10      	pop	{r4, pc}

000b6d56 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6d56:	b510      	push	{r4, lr}
   b6d58:	f851 3b04 	ldr.w	r3, [r1], #4
   b6d5c:	4604      	mov	r4, r0
   b6d5e:	f840 3b04 	str.w	r3, [r0], #4
   b6d62:	f7ff ffd9 	bl	b6d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6d66:	4620      	mov	r0, r4
   b6d68:	bd10      	pop	{r4, pc}

000b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b6d6a:	b510      	push	{r4, lr}
   b6d6c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b6d6e:	6800      	ldr	r0, [r0, #0]
   b6d70:	b108      	cbz	r0, b6d76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b6d72:	f7ff fc08 	bl	b6586 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b6d76:	4620      	mov	r0, r4
   b6d78:	bd10      	pop	{r4, pc}

000b6d7a <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b6d7a:	b510      	push	{r4, lr}
   b6d7c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6d7e:	3004      	adds	r0, #4
   b6d80:	f7ff fff3 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6d84:	4620      	mov	r0, r4
   b6d86:	bd10      	pop	{r4, pc}

000b6d88 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6d88:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6d8a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6d8e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6d90:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6d94:	42ae      	cmp	r6, r5
   b6d96:	d004      	beq.n	b6da2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b6d98:	1d28      	adds	r0, r5, #4
   b6d9a:	f7ff ffe6 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6d9e:	3508      	adds	r5, #8
   b6da0:	e7f8      	b.n	b6d94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6da2:	6820      	ldr	r0, [r4, #0]
   b6da4:	f7ff fa8a 	bl	b62bc <free>
}
   b6da8:	4620      	mov	r0, r4
   b6daa:	bd70      	pop	{r4, r5, r6, pc}

000b6dac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6dac:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6dae:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6db2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6db4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6db8:	42ae      	cmp	r6, r5
   b6dba:	d004      	beq.n	b6dc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b6dbc:	1d28      	adds	r0, r5, #4
   b6dbe:	f7ff ffd4 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6dc2:	3508      	adds	r5, #8
   b6dc4:	e7f8      	b.n	b6db8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6dc6:	6820      	ldr	r0, [r4, #0]
   b6dc8:	f7ff fa78 	bl	b62bc <free>
}
   b6dcc:	4620      	mov	r0, r4
   b6dce:	bd70      	pop	{r4, r5, r6, pc}

000b6dd0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6dd0:	b510      	push	{r4, lr}
   b6dd2:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b6dd4:	3024      	adds	r0, #36	; 0x24
   b6dd6:	f7ff ffe9 	bl	b6dac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6dda:	f104 0018 	add.w	r0, r4, #24
   b6dde:	f7ff ffd3 	bl	b6d88 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b6de2:	bd10      	pop	{r4, pc}

000b6de4 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   b6de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   b6de6:	6804      	ldr	r4, [r0, #0]
   b6de8:	4606      	mov	r6, r0
   b6dea:	b324      	cbz	r4, b6e36 <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   b6dec:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6df0:	f7fd fdfc 	bl	b49ec <_ZNSt14_Function_baseD1Ev>
   b6df4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6df8:	f7fd fdf8 	bl	b49ec <_ZNSt14_Function_baseD1Ev>
   b6dfc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6e00:	f7fd fdf4 	bl	b49ec <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6e04:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b6e08:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6e0c:	42af      	cmp	r7, r5
   b6e0e:	d004      	beq.n	b6e1a <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   b6e10:	1d28      	adds	r0, r5, #4
   b6e12:	f7ff ffaa 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6e16:	3508      	adds	r5, #8
   b6e18:	e7f8      	b.n	b6e0c <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   b6e1a:	69a0      	ldr	r0, [r4, #24]
   b6e1c:	f7ff fa4e 	bl	b62bc <free>
    ~BleLocalDeviceImpl() = default;
   b6e20:	f104 000c 	add.w	r0, r4, #12
   b6e24:	f7ff ffc2 	bl	b6dac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6e28:	4620      	mov	r0, r4
   b6e2a:	f7ff ffad 	bl	b6d88 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b6e2e:	2154      	movs	r1, #84	; 0x54
   b6e30:	4620      	mov	r0, r4
   b6e32:	f002 f822 	bl	b8e7a <_ZdlPvj>
   b6e36:	4630      	mov	r0, r6
   b6e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6e3a <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b6e3a:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b6e3c:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6e3e:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b6e42:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   b6e46:	6803      	ldr	r3, [r0, #0]
   b6e48:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6e4a:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6e4c:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b6e4e:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b6e50:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b6e52:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b6e54:	f7ff ff89 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b6e58:	b002      	add	sp, #8
   b6e5a:	bd10      	pop	{r4, pc}

000b6e5c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b6e5c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6e5e:	b510      	push	{r4, lr}
      if (_M_empty())
   b6e60:	b90a      	cbnz	r2, b6e66 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b6e62:	f002 f810 	bl	b8e86 <_ZSt25__throw_bad_function_callv>
    }
   b6e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6e6a:	68c3      	ldr	r3, [r0, #12]
   b6e6c:	4718      	bx	r3

000b6e6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
inline void spark::Vector<T, AllocatorT>::clear() {
   b6e6e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6e70:	e9d0 5300 	ldrd	r5, r3, [r0]
inline void spark::Vector<T, AllocatorT>::clear() {
   b6e74:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6e76:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6e7a:	42ae      	cmp	r6, r5
   b6e7c:	d004      	beq.n	b6e88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
      ~__shared_ptr() = default;
   b6e7e:	1d28      	adds	r0, r5, #4
   b6e80:	f7ff ff73 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6e84:	3508      	adds	r5, #8
   b6e86:	e7f8      	b.n	b6e7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
    size_ = 0;
   b6e88:	2300      	movs	r3, #0
   b6e8a:	6063      	str	r3, [r4, #4]
}
   b6e8c:	bd70      	pop	{r4, r5, r6, pc}

000b6e8e <_ZNK8particle14BleLocalDevice3offEv>:
int BleLocalDevice::off() const {
   b6e8e:	b513      	push	{r0, r1, r4, lr}
   b6e90:	4604      	mov	r4, r0
    CHECK(hal_ble_stack_deinit(nullptr));
   b6e92:	2000      	movs	r0, #0
   b6e94:	f7fe fe6a 	bl	b5b6c <hal_ble_stack_deinit>
   b6e98:	2800      	cmp	r0, #0
   b6e9a:	db0a      	blt.n	b6eb2 <_ZNK8particle14BleLocalDevice3offEv+0x24>
        WiringBleLock lk;
   b6e9c:	a801      	add	r0, sp, #4
   b6e9e:	f7ff fb9b 	bl	b65d8 <_ZN8particle3ble13WiringBleLockC1Ev>
        return peers_;
   b6ea2:	6820      	ldr	r0, [r4, #0]
        impl()->peers().clear();
   b6ea4:	3018      	adds	r0, #24
   b6ea6:	f7ff ffe2 	bl	b6e6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
        WiringBleLock lk;
   b6eaa:	a801      	add	r0, sp, #4
   b6eac:	f7ff fba2 	bl	b65f4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b6eb0:	2000      	movs	r0, #0
}
   b6eb2:	b002      	add	sp, #8
   b6eb4:	bd10      	pop	{r4, pc}

000b6eb6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6eb6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6eba:	4604      	mov	r4, r0
   b6ebc:	460d      	mov	r5, r1
   b6ebe:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6ec0:	d914      	bls.n	b6eec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6ec2:	4290      	cmp	r0, r2
   b6ec4:	d213      	bcs.n	b6eee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6ec6:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6eca:	1a75      	subs	r5, r6, r1
   b6ecc:	f1a1 0708 	sub.w	r7, r1, #8
   b6ed0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6ed2:	42b7      	cmp	r7, r6
   b6ed4:	d018      	beq.n	b6f08 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6ed6:	b11c      	cbz	r4, b6ee0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6ed8:	4631      	mov	r1, r6
   b6eda:	4620      	mov	r0, r4
   b6edc:	f7ff ff3b 	bl	b6d56 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6ee0:	1d30      	adds	r0, r6, #4
   b6ee2:	f7ff ff42 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6ee6:	3e08      	subs	r6, #8
   b6ee8:	3c08      	subs	r4, #8
   b6eea:	e7f2      	b.n	b6ed2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6eec:	d00c      	beq.n	b6f08 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6eee:	42b5      	cmp	r5, r6
   b6ef0:	d00a      	beq.n	b6f08 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6ef2:	b11c      	cbz	r4, b6efc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6ef4:	4629      	mov	r1, r5
   b6ef6:	4620      	mov	r0, r4
   b6ef8:	f7ff ff2d 	bl	b6d56 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6efc:	1d28      	adds	r0, r5, #4
   b6efe:	f7ff ff34 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6f02:	3508      	adds	r5, #8
   b6f04:	3408      	adds	r4, #8
   b6f06:	e7f2      	b.n	b6eee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6f0a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6f0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6f0c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6f0e:	6846      	ldr	r6, [r0, #4]
   b6f10:	4668      	mov	r0, sp
   b6f12:	f7ff ff20 	bl	b6d56 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6f16:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b6f1a:	429f      	cmp	r7, r3
   b6f1c:	db12      	blt.n	b6f44 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b6f1e:	3701      	adds	r7, #1
        if (n > 0) {
   b6f20:	2f00      	cmp	r7, #0
   b6f22:	dd29      	ble.n	b6f78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b6f24:	00f8      	lsls	r0, r7, #3
   b6f26:	f7ff f9c1 	bl	b62ac <malloc>
            if (!d) {
   b6f2a:	4605      	mov	r5, r0
   b6f2c:	b1f0      	cbz	r0, b6f6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b6f2e:	e9d4 1200 	ldrd	r1, r2, [r4]
   b6f32:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6f36:	f7ff ffbe 	bl	b6eb6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6f3a:	6820      	ldr	r0, [r4, #0]
   b6f3c:	f7ff f9be 	bl	b62bc <free>
        data_ = d;
   b6f40:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b6f42:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b6f44:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6f46:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6f48:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b6f4c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6f50:	4631      	mov	r1, r6
   b6f52:	f106 0008 	add.w	r0, r6, #8
   b6f56:	f7ff ffae 	bl	b6eb6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6f5a:	b11e      	cbz	r6, b6f64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b6f5c:	4669      	mov	r1, sp
   b6f5e:	4630      	mov	r0, r6
   b6f60:	f7ff fef9 	bl	b6d56 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b6f64:	6863      	ldr	r3, [r4, #4]
   b6f66:	3301      	adds	r3, #1
   b6f68:	6063      	str	r3, [r4, #4]
    return true;
   b6f6a:	2501      	movs	r5, #1
   b6f6c:	a801      	add	r0, sp, #4
   b6f6e:	f7ff fefc 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6f72:	4628      	mov	r0, r5
   b6f74:	b003      	add	sp, #12
   b6f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b6f78:	2500      	movs	r5, #0
   b6f7a:	e7de      	b.n	b6f3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b6f7c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b6f7e:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6f82:	4605      	mov	r5, r0
   b6f84:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b6f86:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b6f8a:	42a6      	cmp	r6, r4
   b6f8c:	d005      	beq.n	b6f9a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b6f8e:	4639      	mov	r1, r7
   b6f90:	4620      	mov	r0, r4
   b6f92:	f7ff fdb8 	bl	b6b06 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b6f96:	b108      	cbz	r0, b6f9c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b6f98:	b914      	cbnz	r4, b6fa0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b6f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b6f9c:	3408      	adds	r4, #8
   b6f9e:	e7f4      	b.n	b6f8a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b6fa0:	1d20      	adds	r0, r4, #4
   b6fa2:	f7ff fee2 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b6fa6:	e9d5 3200 	ldrd	r3, r2, [r5]
   b6faa:	f104 0108 	add.w	r1, r4, #8
   b6fae:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6fb2:	4620      	mov	r0, r4
   b6fb4:	f7ff ff7f 	bl	b6eb6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b6fb8:	686b      	ldr	r3, [r5, #4]
   b6fba:	3b01      	subs	r3, #1
   b6fbc:	606b      	str	r3, [r5, #4]
    return true;
   b6fbe:	e7ec      	b.n	b6f9a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>

000b6fc0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b6fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6fc4:	4605      	mov	r5, r0
   b6fc6:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b6fc8:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b6fca:	460c      	mov	r4, r1
        WiringBleLock lk;
   b6fcc:	f7ff fb04 	bl	b65d8 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b6fd0:	682e      	ldr	r6, [r5, #0]
   b6fd2:	2e04      	cmp	r6, #4
   b6fd4:	d06d      	beq.n	b70b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf2>
   b6fd6:	d807      	bhi.n	b6fe8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   b6fd8:	2e03      	cmp	r6, #3
   b6fda:	d02a      	beq.n	b7032 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x72>
        WiringBleLock lk;
   b6fdc:	a803      	add	r0, sp, #12
   b6fde:	f7ff fb09 	bl	b65f4 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b6fe2:	b00e      	add	sp, #56	; 0x38
   b6fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   b6fe8:	f1a6 030c 	sub.w	r3, r6, #12
   b6fec:	2b04      	cmp	r3, #4
   b6fee:	d8f5      	bhi.n	b6fdc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b6ff0:	89a9      	ldrh	r1, [r5, #12]
   b6ff2:	4620      	mov	r0, r4
   b6ff4:	f7ff fc94 	bl	b6920 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b6ff8:	4607      	mov	r7, r0
   b6ffa:	2800      	cmp	r0, #0
   b6ffc:	d0ee      	beq.n	b6fdc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   b6ffe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7000:	2b00      	cmp	r3, #0
   b7002:	d0eb      	beq.n	b6fdc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   b7004:	2210      	movs	r2, #16
   b7006:	2100      	movs	r1, #0
   b7008:	a807      	add	r0, sp, #28
   b700a:	f002 fb05 	bl	b9618 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b700e:	2e0d      	cmp	r6, #13
                        };
   b7010:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   b7012:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7016:	d002      	beq.n	b701e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x5e>
   b7018:	2e10      	cmp	r6, #16
   b701a:	f040 8092 	bne.w	b7142 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x182>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   b701e:	686b      	ldr	r3, [r5, #4]
   b7020:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7022:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   b7024:	9308      	str	r3, [sp, #32]
   b7026:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7028:	a906      	add	r1, sp, #24
   b702a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b702e:	4798      	blx	r3
   b7030:	e7d4      	b.n	b6fdc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   b7032:	a804      	add	r0, sp, #16
   b7034:	f7ff fd20 	bl	b6a78 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b7038:	9b04      	ldr	r3, [sp, #16]
   b703a:	89aa      	ldrh	r2, [r5, #12]
   b703c:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b703e:	6869      	ldr	r1, [r5, #4]
   b7040:	9804      	ldr	r0, [sp, #16]
   b7042:	3108      	adds	r1, #8
   b7044:	3002      	adds	r0, #2
   b7046:	f7ff fae1 	bl	b660c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b704a:	a904      	add	r1, sp, #16
   b704c:	a806      	add	r0, sp, #24
   b704e:	f7ff fe82 	bl	b6d56 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b7052:	a906      	add	r1, sp, #24
   b7054:	f104 0018 	add.w	r0, r4, #24
   b7058:	f7ff ff57 	bl	b6f0a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b705c:	4605      	mov	r5, r0
   b705e:	a807      	add	r0, sp, #28
   b7060:	f7ff fe83 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7064:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b7066:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b7068:	b98d      	cbnz	r5, b708e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xce>
                    LOG(ERROR, "Failed to append peer Central device.");
   b706a:	4b3e      	ldr	r3, [pc, #248]	; (b7164 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   b706c:	493e      	ldr	r1, [pc, #248]	; (b7168 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b706e:	9300      	str	r3, [sp, #0]
   b7070:	2032      	movs	r0, #50	; 0x32
   b7072:	462b      	mov	r3, r5
   b7074:	aa06      	add	r2, sp, #24
   b7076:	9507      	str	r5, [sp, #28]
   b7078:	f7ff f81a 	bl	b60b0 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b707c:	9b04      	ldr	r3, [sp, #16]
   b707e:	4629      	mov	r1, r5
   b7080:	8818      	ldrh	r0, [r3, #0]
   b7082:	f7fe fd93 	bl	b5bac <hal_ble_gap_disconnect>
   b7086:	a805      	add	r0, sp, #20
   b7088:	f7ff fe6f 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b708c:	e7a6      	b.n	b6fdc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   b708e:	4a37      	ldr	r2, [pc, #220]	; (b716c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   b7090:	9200      	str	r2, [sp, #0]
   b7092:	2300      	movs	r3, #0
   b7094:	4934      	ldr	r1, [pc, #208]	; (b7168 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b7096:	9307      	str	r3, [sp, #28]
   b7098:	aa06      	add	r2, sp, #24
   b709a:	2001      	movs	r0, #1
   b709c:	f7ff f808 	bl	b60b0 <log_message>
                if (impl->connectedCallback_) {
   b70a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b70a2:	2b00      	cmp	r3, #0
   b70a4:	d0ef      	beq.n	b7086 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc6>
                    impl->connectedCallback_(peer);
   b70a6:	a904      	add	r1, sp, #16
   b70a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b70ac:	f7ff fed6 	bl	b6e5c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b70b0:	e7e9      	b.n	b7086 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc6>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b70b2:	89a9      	ldrh	r1, [r5, #12]
   b70b4:	4620      	mov	r0, r4
   b70b6:	f7ff fc33 	bl	b6920 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b70ba:	4606      	mov	r6, r0
   b70bc:	2800      	cmp	r0, #0
   b70be:	d08d      	beq.n	b6fdc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
      { return _M_ptr; }
   b70c0:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b70c2:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b70c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b70ca:	8029      	strh	r1, [r5, #0]
   b70cc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b70d0:	429a      	cmp	r2, r3
   b70d2:	d003      	beq.n	b70dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b70d4:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b70d8:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b70da:	e7f9      	b.n	b70d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x110>
    destruct(data_, data_ + size_);
   b70dc:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b70e0:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b70e4:	45b8      	cmp	r8, r7
   b70e6:	d004      	beq.n	b70f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x132>
      ~__shared_ptr() = default;
   b70e8:	1d38      	adds	r0, r7, #4
   b70ea:	f7ff fe3e 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b70ee:	3708      	adds	r7, #8
   b70f0:	e7f8      	b.n	b70e4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
    size_ = 0;
   b70f2:	2300      	movs	r3, #0
   b70f4:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b70f6:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b70fa:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b70fe:	45b8      	cmp	r8, r7
   b7100:	d004      	beq.n	b710c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14c>
   b7102:	1d38      	adds	r0, r7, #4
   b7104:	f7ff fe31 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7108:	3708      	adds	r7, #8
   b710a:	e7f8      	b.n	b70fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13e>
    size_ = 0;
   b710c:	2300      	movs	r3, #0
   b710e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7110:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b7112:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7114:	b123      	cbz	r3, b7120 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x160>
                        impl->disconnectedCallback_(*peer);
   b7116:	4631      	mov	r1, r6
   b7118:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b711c:	f7ff fe9e 	bl	b6e5c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b7120:	2300      	movs	r3, #0
   b7122:	2220      	movs	r2, #32
   b7124:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7128:	4a11      	ldr	r2, [pc, #68]	; (b7170 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b0>)
   b712a:	9200      	str	r2, [sp, #0]
   b712c:	490e      	ldr	r1, [pc, #56]	; (b7168 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b712e:	aa06      	add	r2, sp, #24
   b7130:	2001      	movs	r0, #1
   b7132:	f7fe ffbd 	bl	b60b0 <log_message>
                    impl->peers_.removeOne(*peer);
   b7136:	4631      	mov	r1, r6
   b7138:	f104 0018 	add.w	r0, r4, #24
   b713c:	f7ff ff1e 	bl	b6f7c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b7140:	e74c      	b.n	b6fdc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7142:	2e0f      	cmp	r6, #15
   b7144:	f47f af6f 	bne.w	b7026 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x66>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   b7148:	686b      	ldr	r3, [r5, #4]
   b714a:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   b714c:	7a2b      	ldrb	r3, [r5, #8]
   b714e:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   b7152:	f3c3 0340 	ubfx	r3, r3, #1, #1
   b7156:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   b715a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   b715e:	2308      	movs	r3, #8
   b7160:	e760      	b.n	b7024 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x64>
   b7162:	bf00      	nop
   b7164:	000b9fd3 	.word	0x000b9fd3
   b7168:	000b9f94 	.word	0x000b9f94
   b716c:	000b9ff9 	.word	0x000b9ff9
   b7170:	000ba016 	.word	0x000ba016

000b7174 <_ZNK8particle13BlePeerDevice10disconnectEv>:
int BlePeerDevice::disconnect() const {
   b7174:	b513      	push	{r0, r1, r4, lr}
   b7176:	4604      	mov	r4, r0
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b7178:	f7ff fca0 	bl	b6abc <_ZNK8particle13BlePeerDevice9connectedEv>
   b717c:	b1d0      	cbz	r0, b71b4 <_ZNK8particle13BlePeerDevice10disconnectEv+0x40>
    CHECK(hal_ble_gap_disconnect(impl()->connHandle(), nullptr));
   b717e:	6823      	ldr	r3, [r4, #0]
   b7180:	2100      	movs	r1, #0
   b7182:	8818      	ldrh	r0, [r3, #0]
   b7184:	f7fe fd12 	bl	b5bac <hal_ble_gap_disconnect>
   b7188:	2800      	cmp	r0, #0
   b718a:	db11      	blt.n	b71b0 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
        WiringBleLock lk;
   b718c:	a801      	add	r0, sp, #4
   b718e:	f7ff fa23 	bl	b65d8 <_ZN8particle3ble13WiringBleLockC1Ev>
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b7192:	f7ff fd09 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b7196:	6800      	ldr	r0, [r0, #0]
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b7198:	4621      	mov	r1, r4
   b719a:	3018      	adds	r0, #24
   b719c:	f7ff feee 	bl	b6f7c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
      { return _M_ptr; }
   b71a0:	6823      	ldr	r3, [r4, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b71a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b71a6:	801a      	strh	r2, [r3, #0]
        WiringBleLock lk;
   b71a8:	a801      	add	r0, sp, #4
   b71aa:	f7ff fa23 	bl	b65f4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b71ae:	2000      	movs	r0, #0
}
   b71b0:	b002      	add	sp, #8
   b71b2:	bd10      	pop	{r4, pc}
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b71b4:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b71b8:	e7fa      	b.n	b71b0 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
	...

000b71bc <_ZNK8particle14BleLocalDevice13disconnectAllEv>:

int BleLocalDevice::disconnect(const BlePeerDevice& peer) const {
    return peer.disconnect();
}

int BleLocalDevice::disconnectAll() const {
   b71bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b71c0:	4604      	mov	r4, r0
    WiringBleLock lk;
   b71c2:	a801      	add	r0, sp, #4
   b71c4:	f7ff fa08 	bl	b65d8 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b71c8:	6823      	ldr	r3, [r4, #0]
   b71ca:	4e10      	ldr	r6, [pc, #64]	; (b720c <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x50>)
    return data_ + size_;
   b71cc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
        locked_ = false;
   b71d0:	f04f 0800 	mov.w	r8, #0
   b71d4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
        locked_ = true;
   b71d8:	2701      	movs	r7, #1
    for (auto& p : impl()->peers()) {
   b71da:	42ac      	cmp	r4, r5
   b71dc:	d00e      	beq.n	b71fc <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x40>
   b71de:	6830      	ldr	r0, [r6, #0]
   b71e0:	f7fe fd5e 	bl	b5ca0 <os_mutex_recursive_unlock>
        lk.unlock();
        p.disconnect();
   b71e4:	4620      	mov	r0, r4
        locked_ = false;
   b71e6:	f88d 8004 	strb.w	r8, [sp, #4]
        p.disconnect();
   b71ea:	f7ff ffc3 	bl	b7174 <_ZNK8particle13BlePeerDevice10disconnectEv>
    void lock() { os_mutex_recursive_lock(handle_); }
   b71ee:	6830      	ldr	r0, [r6, #0]
   b71f0:	f7fe fd4e 	bl	b5c90 <os_mutex_recursive_lock>
        locked_ = true;
   b71f4:	3408      	adds	r4, #8
   b71f6:	f88d 7004 	strb.w	r7, [sp, #4]
    for (auto& p : impl()->peers()) {
   b71fa:	e7ee      	b.n	b71da <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x1e>
    WiringBleLock lk;
   b71fc:	a801      	add	r0, sp, #4
   b71fe:	f7ff f9f9 	bl	b65f4 <_ZN8particle3ble13WiringBleLockD1Ev>
        lk.lock();
    }
    return SYSTEM_ERROR_NONE;
}
   b7202:	2000      	movs	r0, #0
   b7204:	b002      	add	sp, #8
   b7206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b720a:	bf00      	nop
   b720c:	2003e634 	.word	0x2003e634

000b7210 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b7210:	b513      	push	{r0, r1, r4, lr}
   b7212:	460b      	mov	r3, r1
   b7214:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7216:	e9d0 0100 	ldrd	r0, r1, [r0]
   b721a:	466c      	mov	r4, sp
   b721c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7220:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7224:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7228:	e894 0003 	ldmia.w	r4, {r0, r1}
   b722c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7230:	b002      	add	sp, #8
   b7232:	bd10      	pop	{r4, pc}

000b7234 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b7234:	b538      	push	{r3, r4, r5, lr}
   b7236:	4605      	mov	r5, r0
   b7238:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b723a:	f7ff ffe9 	bl	b7210 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b723e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7240:	68a2      	ldr	r2, [r4, #8]
   b7242:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7244:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7246:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7248:	68e2      	ldr	r2, [r4, #12]
   b724a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b724c:	60e3      	str	r3, [r4, #12]
      }
   b724e:	bd38      	pop	{r3, r4, r5, pc}

000b7250 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7250:	b570      	push	{r4, r5, r6, lr}
   b7252:	460e      	mov	r6, r1
   b7254:	b08c      	sub	sp, #48	; 0x30
   b7256:	4604      	mov	r4, r0
   b7258:	9201      	str	r2, [sp, #4]
   b725a:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b725c:	f7ff fb40 	bl	b68e0 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b7260:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   b7262:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   b7264:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   b7266:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b726a:	f000 fe76 	bl	b7f5a <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b726e:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b7272:	b1cd      	cbz	r5, b72a8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x58>
   b7274:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7276:	9502      	str	r5, [sp, #8]
   b7278:	a902      	add	r1, sp, #8
   b727a:	a804      	add	r0, sp, #16
   b727c:	9303      	str	r3, [sp, #12]
   b727e:	f7ff fd1b 	bl	b6cb8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7282:	2300      	movs	r3, #0
	__x.swap(*this);
   b7284:	a908      	add	r1, sp, #32
   b7286:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b7288:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b728a:	f7ff ffd3 	bl	b7234 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b728e:	4631      	mov	r1, r6
   b7290:	a808      	add	r0, sp, #32
   b7292:	f7ff ffcf 	bl	b7234 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7296:	a808      	add	r0, sp, #32
   b7298:	f7fd fba8 	bl	b49ec <_ZNSt14_Function_baseD1Ev>
   b729c:	a804      	add	r0, sp, #16
   b729e:	f7fd fba5 	bl	b49ec <_ZNSt14_Function_baseD1Ev>
    }
   b72a2:	4620      	mov	r0, r4
   b72a4:	b00c      	add	sp, #48	; 0x30
   b72a6:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b72a8:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b72aa:	e7ea      	b.n	b7282 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000b72ac <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b72ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b72b0:	b089      	sub	sp, #36	; 0x24
   b72b2:	461d      	mov	r5, r3
   b72b4:	e9dd 4312 	ldrd	r4, r3, [sp, #72]	; 0x48
   b72b8:	4680      	mov	r8, r0
   b72ba:	468a      	mov	sl, r1
   b72bc:	4693      	mov	fp, r2
   b72be:	9914      	ldr	r1, [sp, #80]	; 0x50
   b72c0:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b72c2:	2200      	movs	r2, #0
   b72c4:	2068      	movs	r0, #104	; 0x68
   b72c6:	9102      	str	r1, [sp, #8]
   b72c8:	9206      	str	r2, [sp, #24]
   b72ca:	f7fc fee4 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b72ce:	1e06      	subs	r6, r0, #0
   b72d0:	f106 090c 	add.w	r9, r6, #12
   b72d4:	d01c      	beq.n	b7310 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x64>
      : _M_use_count(1), _M_weak_count(1) { }
   b72d6:	2201      	movs	r2, #1
	: _M_impl(__a)
   b72d8:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b72da:	e9c6 2201 	strd	r2, r2, [r6, #4]
	: _M_impl(__a)
   b72de:	4a17      	ldr	r2, [pc, #92]	; (b733c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b72e0:	f847 2b20 	str.w	r2, [r7], #32
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b72e4:	9902      	ldr	r1, [sp, #8]
   b72e6:	f89b 2000 	ldrb.w	r2, [fp]
   b72ea:	9b03      	ldr	r3, [sp, #12]
    value_ = flags.value_;
   b72ec:	f88d 2014 	strb.w	r2, [sp, #20]
   b72f0:	9100      	str	r1, [sp, #0]
   b72f2:	4652      	mov	r2, sl
   b72f4:	a905      	add	r1, sp, #20
   b72f6:	4648      	mov	r0, r9
   b72f8:	f7ff ffaa 	bl	b7250 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b72fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b72fe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b7300:	682b      	ldr	r3, [r5, #0]
   b7302:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b7304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7306:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b730a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b730c:	6823      	ldr	r3, [r4, #0]
   b730e:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b7310:	a906      	add	r1, sp, #24
   b7312:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b7314:	e9cd 9606 	strd	r9, r6, [sp, #24]
   b7318:	f7ff fd8f 	bl	b6e3a <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b731c:	a807      	add	r0, sp, #28
   b731e:	f7ff fd24 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b7322:	f8d8 1000 	ldr.w	r1, [r8]
   b7326:	b931      	cbnz	r1, b7336 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8a>
        SPARK_ASSERT(false);
   b7328:	4a05      	ldr	r2, [pc, #20]	; (b7340 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b732a:	200a      	movs	r0, #10
}
   b732c:	b009      	add	sp, #36	; 0x24
   b732e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b7332:	f7fe beb5 	b.w	b60a0 <panic_>
}
   b7336:	b009      	add	sp, #36	; 0x24
   b7338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b733c:	000ba090 	.word	0x000ba090
   b7340:	000b5ce1 	.word	0x000b5ce1

000b7344 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b7344:	b538      	push	{r3, r4, r5, lr}
   b7346:	4605      	mov	r5, r0
   b7348:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b734a:	f7ff ff61 	bl	b7210 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b734e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7350:	68a2      	ldr	r2, [r4, #8]
   b7352:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7354:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7356:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7358:	68e2      	ldr	r2, [r4, #12]
   b735a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b735c:	60e3      	str	r3, [r4, #12]
      }
   b735e:	bd38      	pop	{r3, r4, r5, pc}

000b7360 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b7360:	b510      	push	{r4, lr}
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b7362:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b7364:	b08a      	sub	sp, #40	; 0x28
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b7366:	3434      	adds	r4, #52	; 0x34
   b7368:	b1b9      	cbz	r1, b739a <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b736a:	e9cd 1200 	strd	r1, r2, [sp]
   b736e:	a802      	add	r0, sp, #8
   b7370:	4669      	mov	r1, sp
   b7372:	f7ff fcb9 	bl	b6ce8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7376:	2300      	movs	r3, #0
	__x.swap(*this);
   b7378:	a906      	add	r1, sp, #24
   b737a:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b737c:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b737e:	f7ff ffe1 	bl	b7344 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b7382:	4621      	mov	r1, r4
   b7384:	a806      	add	r0, sp, #24
   b7386:	f7ff ffdd 	bl	b7344 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b738a:	a806      	add	r0, sp, #24
   b738c:	f7fd fb2e 	bl	b49ec <_ZNSt14_Function_baseD1Ev>
   b7390:	a802      	add	r0, sp, #8
   b7392:	f7fd fb2b 	bl	b49ec <_ZNSt14_Function_baseD1Ev>
}
   b7396:	b00a      	add	sp, #40	; 0x28
   b7398:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b739a:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b739c:	e7eb      	b.n	b7376 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b739e <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b739e:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b73a0:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b73a2:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b73a4:	3424      	adds	r4, #36	; 0x24
   b73a6:	b1b9      	cbz	r1, b73d8 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b73a8:	e9cd 1200 	strd	r1, r2, [sp]
   b73ac:	a802      	add	r0, sp, #8
   b73ae:	4669      	mov	r1, sp
   b73b0:	f7ff fc9a 	bl	b6ce8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b73b4:	2300      	movs	r3, #0
	__x.swap(*this);
   b73b6:	a906      	add	r1, sp, #24
   b73b8:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b73ba:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b73bc:	f7ff ffc2 	bl	b7344 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b73c0:	4621      	mov	r1, r4
   b73c2:	a806      	add	r0, sp, #24
   b73c4:	f7ff ffbe 	bl	b7344 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b73c8:	a806      	add	r0, sp, #24
   b73ca:	f7fd fb0f 	bl	b49ec <_ZNSt14_Function_baseD1Ev>
   b73ce:	a802      	add	r0, sp, #8
   b73d0:	f7fd fb0c 	bl	b49ec <_ZNSt14_Function_baseD1Ev>
}
   b73d4:	b00a      	add	sp, #40	; 0x28
   b73d6:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b73d8:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b73da:	e7eb      	b.n	b73b4 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b73dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b73dc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b73de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b73e0:	4604      	mov	r4, r0
   b73e2:	460d      	mov	r5, r1
   b73e4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b73e6:	d914      	bls.n	b7412 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b73e8:	4290      	cmp	r0, r2
   b73ea:	d213      	bcs.n	b7414 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b73ec:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b73f0:	1a75      	subs	r5, r6, r1
   b73f2:	f1a1 0708 	sub.w	r7, r1, #8
   b73f6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b73f8:	42b7      	cmp	r7, r6
   b73fa:	d018      	beq.n	b742e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b73fc:	b11c      	cbz	r4, b7406 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b73fe:	4631      	mov	r1, r6
   b7400:	4620      	mov	r0, r4
   b7402:	f7ff fc9e 	bl	b6d42 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7406:	1d30      	adds	r0, r6, #4
   b7408:	f7ff fcaf 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b740c:	3e08      	subs	r6, #8
   b740e:	3c08      	subs	r4, #8
   b7410:	e7f2      	b.n	b73f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7412:	d00c      	beq.n	b742e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7414:	42b5      	cmp	r5, r6
   b7416:	d00a      	beq.n	b742e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7418:	b11c      	cbz	r4, b7422 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b741a:	4629      	mov	r1, r5
   b741c:	4620      	mov	r0, r4
   b741e:	f7ff fc90 	bl	b6d42 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7422:	1d28      	adds	r0, r5, #4
   b7424:	f7ff fca1 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7428:	3508      	adds	r5, #8
   b742a:	3408      	adds	r4, #8
   b742c:	e7f2      	b.n	b7414 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b742e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7430 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7430:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7432:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7434:	4605      	mov	r5, r0
        if (n > 0) {
   b7436:	dd11      	ble.n	b745c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7438:	00f0      	lsls	r0, r6, #3
   b743a:	f7fe ff37 	bl	b62ac <malloc>
            if (!d) {
   b743e:	4604      	mov	r4, r0
   b7440:	b158      	cbz	r0, b745a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7442:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7446:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b744a:	f7ff ffc7 	bl	b73dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b744e:	6828      	ldr	r0, [r5, #0]
   b7450:	f7fe ff34 	bl	b62bc <free>
        data_ = d;
   b7454:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7456:	60ae      	str	r6, [r5, #8]
        return true;
   b7458:	2001      	movs	r0, #1
    }
   b745a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b745c:	2400      	movs	r4, #0
   b745e:	e7f6      	b.n	b744e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7460 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7460:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7462:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7464:	6845      	ldr	r5, [r0, #4]
   b7466:	4668      	mov	r0, sp
   b7468:	f7ff fc6b 	bl	b6d42 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b746c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7470:	4299      	cmp	r1, r3
   b7472:	da10      	bge.n	b7496 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7474:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7476:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7478:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b747c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7480:	4629      	mov	r1, r5
   b7482:	f105 0008 	add.w	r0, r5, #8
   b7486:	f7ff ffa9 	bl	b73dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b748a:	b98d      	cbnz	r5, b74b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b748c:	6863      	ldr	r3, [r4, #4]
   b748e:	3301      	adds	r3, #1
   b7490:	6063      	str	r3, [r4, #4]
    return true;
   b7492:	2601      	movs	r6, #1
   b7494:	e006      	b.n	b74a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7496:	3101      	adds	r1, #1
   b7498:	4620      	mov	r0, r4
   b749a:	f7ff ffc9 	bl	b7430 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b749e:	4606      	mov	r6, r0
   b74a0:	2800      	cmp	r0, #0
   b74a2:	d1e7      	bne.n	b7474 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b74a4:	a801      	add	r0, sp, #4
   b74a6:	f7ff fc60 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b74aa:	4630      	mov	r0, r6
   b74ac:	b002      	add	sp, #8
   b74ae:	bd70      	pop	{r4, r5, r6, pc}
   b74b0:	4669      	mov	r1, sp
   b74b2:	4628      	mov	r0, r5
   b74b4:	f7ff fc45 	bl	b6d42 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b74b8:	e7e8      	b.n	b748c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b74ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b74ba:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b74bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b74be:	4604      	mov	r4, r0
   b74c0:	460d      	mov	r5, r1
   b74c2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b74c4:	d914      	bls.n	b74f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b74c6:	4290      	cmp	r0, r2
   b74c8:	d213      	bcs.n	b74f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b74ca:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b74ce:	1a75      	subs	r5, r6, r1
   b74d0:	f1a1 0708 	sub.w	r7, r1, #8
   b74d4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b74d6:	42b7      	cmp	r7, r6
   b74d8:	d018      	beq.n	b750c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b74da:	b11c      	cbz	r4, b74e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b74dc:	4631      	mov	r1, r6
   b74de:	4620      	mov	r0, r4
   b74e0:	f7ff fc21 	bl	b6d26 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b74e4:	1d30      	adds	r0, r6, #4
   b74e6:	f7ff fc40 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b74ea:	3e08      	subs	r6, #8
   b74ec:	3c08      	subs	r4, #8
   b74ee:	e7f2      	b.n	b74d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b74f0:	d00c      	beq.n	b750c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b74f2:	42b5      	cmp	r5, r6
   b74f4:	d00a      	beq.n	b750c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b74f6:	b11c      	cbz	r4, b7500 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b74f8:	4629      	mov	r1, r5
   b74fa:	4620      	mov	r0, r4
   b74fc:	f7ff fc13 	bl	b6d26 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7500:	1d28      	adds	r0, r5, #4
   b7502:	f7ff fc32 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7506:	3508      	adds	r5, #8
   b7508:	3408      	adds	r4, #8
   b750a:	e7f2      	b.n	b74f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b750c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b750e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b750e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7510:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7512:	4605      	mov	r5, r0
        if (n > 0) {
   b7514:	dd11      	ble.n	b753a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7516:	00f0      	lsls	r0, r6, #3
   b7518:	f7fe fec8 	bl	b62ac <malloc>
            if (!d) {
   b751c:	4604      	mov	r4, r0
   b751e:	b158      	cbz	r0, b7538 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7520:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7524:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7528:	f7ff ffc7 	bl	b74ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b752c:	6828      	ldr	r0, [r5, #0]
   b752e:	f7fe fec5 	bl	b62bc <free>
        data_ = d;
   b7532:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7534:	60ae      	str	r6, [r5, #8]
        return true;
   b7536:	2001      	movs	r0, #1
    }
   b7538:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b753a:	2400      	movs	r4, #0
   b753c:	e7f6      	b.n	b752c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b753e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b753e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7540:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7542:	6845      	ldr	r5, [r0, #4]
   b7544:	4668      	mov	r0, sp
   b7546:	f7ff fbee 	bl	b6d26 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b754a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b754e:	4299      	cmp	r1, r3
   b7550:	da10      	bge.n	b7574 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7552:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7554:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7556:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b755a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b755e:	4629      	mov	r1, r5
   b7560:	f105 0008 	add.w	r0, r5, #8
   b7564:	f7ff ffa9 	bl	b74ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7568:	b98d      	cbnz	r5, b758e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b756a:	6863      	ldr	r3, [r4, #4]
   b756c:	3301      	adds	r3, #1
   b756e:	6063      	str	r3, [r4, #4]
    return true;
   b7570:	2601      	movs	r6, #1
   b7572:	e006      	b.n	b7582 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7574:	3101      	adds	r1, #1
   b7576:	4620      	mov	r0, r4
   b7578:	f7ff ffc9 	bl	b750e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b757c:	4606      	mov	r6, r0
   b757e:	2800      	cmp	r0, #0
   b7580:	d1e7      	bne.n	b7552 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7582:	a801      	add	r0, sp, #4
   b7584:	f7ff fbf1 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7588:	4630      	mov	r0, r6
   b758a:	b002      	add	sp, #8
   b758c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b758e:	4669      	mov	r1, sp
   b7590:	4628      	mov	r0, r5
   b7592:	f7ff fbc8 	bl	b6d26 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7596:	e7e8      	b.n	b756a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7598 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b759c:	4617      	mov	r7, r2
   b759e:	b0a1      	sub	sp, #132	; 0x84
   b75a0:	4680      	mov	r8, r0
    WiringBleLock lk;
   b75a2:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b75a4:	460e      	mov	r6, r1
    WiringBleLock lk;
   b75a6:	f7ff f817 	bl	b65d8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b75aa:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b75ac:	7923      	ldrb	r3, [r4, #4]
   b75ae:	b953      	cbnz	r3, b75c6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b75b0:	4639      	mov	r1, r7
   b75b2:	4640      	mov	r0, r8
   b75b4:	f7ff fbb7 	bl	b6d26 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b75b8:	a80a      	add	r0, sp, #40	; 0x28
   b75ba:	f7ff f81b 	bl	b65f4 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b75be:	4640      	mov	r0, r8
   b75c0:	b021      	add	sp, #132	; 0x84
   b75c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b75c6:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b75c8:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b75cc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b75d0:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b75d2:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b75d6:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b75da:	9b03      	ldr	r3, [sp, #12]
   b75dc:	429d      	cmp	r5, r3
   b75de:	d021      	beq.n	b7624 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b75e0:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b75e4:	4658      	mov	r0, fp
   b75e6:	f109 0114 	add.w	r1, r9, #20
   b75ea:	f7ff f8b0 	bl	b674e <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b75ee:	b1b8      	cbz	r0, b7620 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b75f0:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b75f4:	4650      	mov	r0, sl
   b75f6:	f7ff f8aa 	bl	b674e <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b75fa:	b188      	cbz	r0, b7620 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b75fc:	6823      	ldr	r3, [r4, #0]
   b75fe:	f8d9 2000 	ldr.w	r2, [r9]
   b7602:	4053      	eors	r3, r2
   b7604:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b7608:	d10a      	bne.n	b7620 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b760a:	2220      	movs	r2, #32
   b760c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b7610:	4a5e      	ldr	r2, [pc, #376]	; (b778c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b7612:	9200      	str	r2, [sp, #0]
   b7614:	aa15      	add	r2, sp, #84	; 0x54
   b7616:	495e      	ldr	r1, [pc, #376]	; (b7790 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b7618:	2032      	movs	r0, #50	; 0x32
   b761a:	f7fe fd49 	bl	b60b0 <log_message>
   b761e:	e7c7      	b.n	b75b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b7620:	3508      	adds	r5, #8
   b7622:	e7da      	b.n	b75da <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b7624:	4650      	mov	r0, sl
   b7626:	f7ff f863 	bl	b66f0 <_ZNK8particle7BleUuid7isValidEv>
   b762a:	b960      	cbnz	r0, b7646 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   b762c:	4959      	ldr	r1, [pc, #356]	; (b7794 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b762e:	2201      	movs	r2, #1
   b7630:	a815      	add	r0, sp, #84	; 0x54
   b7632:	ad15      	add	r5, sp, #84	; 0x54
   b7634:	f7ff f833 	bl	b669e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b7638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b763a:	46d4      	mov	ip, sl
   b763c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7640:	682b      	ldr	r3, [r5, #0]
   b7642:	f8cc 3000 	str.w	r3, [ip]
   b7646:	6833      	ldr	r3, [r6, #0]
   b7648:	e9d3 5300 	ldrd	r5, r3, [r3]
   b764c:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b7650:	455d      	cmp	r5, fp
   b7652:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b7654:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b7656:	d06e      	beq.n	b7736 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b7658:	f855 0b08 	ldr.w	r0, [r5], #8
   b765c:	f7ff f877 	bl	b674e <_ZNK8particle7BleUuideqERKS0_>
   b7660:	2800      	cmp	r0, #0
   b7662:	d0f5      	beq.n	b7650 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b7664:	f104 0a14 	add.w	sl, r4, #20
   b7668:	4650      	mov	r0, sl
   b766a:	f7ff f841 	bl	b66f0 <_ZNK8particle7BleUuid7isValidEv>
   b766e:	b988      	cbnz	r0, b7694 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b7670:	4b49      	ldr	r3, [pc, #292]	; (b7798 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7672:	4948      	ldr	r1, [pc, #288]	; (b7794 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b7674:	881a      	ldrh	r2, [r3, #0]
   b7676:	3201      	adds	r2, #1
   b7678:	b292      	uxth	r2, r2
   b767a:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b767c:	a815      	add	r0, sp, #84	; 0x54
   b767e:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b7680:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7682:	f7ff f82b 	bl	b66dc <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b7686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7688:	46d4      	mov	ip, sl
   b768a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b768e:	682b      	ldr	r3, [r5, #0]
   b7690:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b7694:	4b41      	ldr	r3, [pc, #260]	; (b779c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b7696:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b7698:	2228      	movs	r2, #40	; 0x28
   b769a:	2100      	movs	r1, #0
   b769c:	a816      	add	r0, sp, #88	; 0x58
   b769e:	f001 ffbb 	bl	b9618 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b76a2:	4651      	mov	r1, sl
   b76a4:	a804      	add	r0, sp, #16
   b76a6:	f7ff f835 	bl	b6714 <_ZN8particle7BleUuid7halUUIDEv>
   b76aa:	ab04      	add	r3, sp, #16
   b76ac:	aa18      	add	r2, sp, #96	; 0x60
   b76ae:	f10d 0c20 	add.w	ip, sp, #32
   b76b2:	6818      	ldr	r0, [r3, #0]
   b76b4:	6859      	ldr	r1, [r3, #4]
   b76b6:	4615      	mov	r5, r2
   b76b8:	c503      	stmia	r5!, {r0, r1}
   b76ba:	3308      	adds	r3, #8
   b76bc:	4563      	cmp	r3, ip
   b76be:	462a      	mov	r2, r5
   b76c0:	d1f7      	bne.n	b76b2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b76c2:	6818      	ldr	r0, [r3, #0]
   b76c4:	6028      	str	r0, [r5, #0]
    return value_;
   b76c6:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b76c8:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b76cc:	f8d9 3000 	ldr.w	r3, [r9]
   b76d0:	8a9b      	ldrh	r3, [r3, #20]
   b76d2:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b76d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b76d8:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b76da:	4b31      	ldr	r3, [pc, #196]	; (b77a0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b76dc:	2200      	movs	r2, #0
   b76de:	1da1      	adds	r1, r4, #6
   b76e0:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b76e2:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b76e6:	f7fe fa93 	bl	b5c10 <hal_ble_gatt_server_add_characteristic>
   b76ea:	2800      	cmp	r0, #0
   b76ec:	f47f af60 	bne.w	b75b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b76f0:	2301      	movs	r3, #1
   b76f2:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b76f4:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b76f6:	4639      	mov	r1, r7
        return characteristics_;
   b76f8:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b76fa:	a80d      	add	r0, sp, #52	; 0x34
   b76fc:	f7ff fb13 	bl	b6d26 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7700:	4620      	mov	r0, r4
   b7702:	a90d      	add	r1, sp, #52	; 0x34
   b7704:	f7ff ff1b 	bl	b753e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b7708:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b770a:	a80e      	add	r0, sp, #56	; 0x38
   b770c:	f7ff fb2d 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7710:	2c00      	cmp	r4, #0
   b7712:	f47f af4d 	bne.w	b75b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b7716:	2320      	movs	r3, #32
   b7718:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b771c:	4b21      	ldr	r3, [pc, #132]	; (b77a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b771e:	9300      	str	r3, [sp, #0]
   b7720:	aa0d      	add	r2, sp, #52	; 0x34
   b7722:	4623      	mov	r3, r4
   b7724:	e777      	b.n	b7616 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b7726:	4639      	mov	r1, r7
   b7728:	4640      	mov	r0, r8
   b772a:	f7ff fafc 	bl	b6d26 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b772e:	a80c      	add	r0, sp, #48	; 0x30
   b7730:	f7ff fb1b 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7734:	e740      	b.n	b75b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b7736:	a80b      	add	r0, sp, #44	; 0x2c
   b7738:	f7ff f97a 	bl	b6a30 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b773c:	4651      	mov	r1, sl
   b773e:	a815      	add	r0, sp, #84	; 0x54
   b7740:	f7fe ffe8 	bl	b6714 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b7744:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7746:	2300      	movs	r3, #0
   b7748:	3214      	adds	r2, #20
   b774a:	a915      	add	r1, sp, #84	; 0x54
   b774c:	2001      	movs	r0, #1
   b774e:	f7fe fa37 	bl	b5bc0 <hal_ble_gatt_server_add_service>
   b7752:	2800      	cmp	r0, #0
   b7754:	d1e7      	bne.n	b7726 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b7756:	6835      	ldr	r5, [r6, #0]
   b7758:	a90b      	add	r1, sp, #44	; 0x2c
   b775a:	a80d      	add	r0, sp, #52	; 0x34
   b775c:	f7ff faf1 	bl	b6d42 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b7760:	4628      	mov	r0, r5
   b7762:	a90d      	add	r1, sp, #52	; 0x34
   b7764:	f7ff fe7c 	bl	b7460 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7768:	4605      	mov	r5, r0
   b776a:	a80e      	add	r0, sp, #56	; 0x38
   b776c:	f7ff fafd 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7770:	2d00      	cmp	r5, #0
   b7772:	d0d8      	beq.n	b7726 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b7774:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b7776:	6853      	ldr	r3, [r2, #4]
   b7778:	6812      	ldr	r2, [r2, #0]
   b777a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b777e:	3b01      	subs	r3, #1
   b7780:	a80c      	add	r0, sp, #48	; 0x30
   b7782:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b7786:	f7ff faf0 	bl	b6d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b778a:	e76b      	b.n	b7664 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b778c:	000ba035 	.word	0x000ba035
   b7790:	000b9f94 	.word	0x000b9f94
   b7794:	000ba0fa 	.word	0x000ba0fa
   b7798:	2003e630 	.word	0x2003e630
   b779c:	002c0003 	.word	0x002c0003
   b77a0:	000b6be9 	.word	0x000b6be9
   b77a4:	000ba060 	.word	0x000ba060

000b77a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   b77a8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   b77aa:	4c06      	ldr	r4, [pc, #24]	; (b77c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   b77ac:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   b77ae:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   b77b0:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   b77b2:	f7fe fa5d 	bl	b5c70 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   b77b6:	4620      	mov	r0, r4
   b77b8:	4a03      	ldr	r2, [pc, #12]	; (b77c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   b77ba:	4904      	ldr	r1, [pc, #16]	; (b77cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   b77bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   b77c0:	f001 bb56 	b.w	b8e70 <__aeabi_atexit>
   b77c4:	2003e634 	.word	0x2003e634
   b77c8:	2003da58 	.word	0x2003da58
   b77cc:	000b63f9 	.word	0x000b63f9

000b77d0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b77d0:	2200      	movs	r2, #0
   b77d2:	6840      	ldr	r0, [r0, #4]
   b77d4:	4611      	mov	r1, r2
   b77d6:	f7fe bd31 	b.w	b623c <network_listening>

000b77da <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b77da:	2200      	movs	r2, #0
   b77dc:	6840      	ldr	r0, [r0, #4]
   b77de:	4611      	mov	r1, r2
   b77e0:	f7fe bd4c 	b.w	b627c <network_get_listen_timeout>

000b77e4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b77e4:	6840      	ldr	r0, [r0, #4]
   b77e6:	2200      	movs	r2, #0
   b77e8:	f7fe bd40 	b.w	b626c <network_set_listen_timeout>

000b77ec <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b77ec:	6840      	ldr	r0, [r0, #4]
   b77ee:	2200      	movs	r2, #0
   b77f0:	f081 0101 	eor.w	r1, r1, #1
   b77f4:	f7fe bd1a 	b.w	b622c <network_listen>

000b77f8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b77f8:	2300      	movs	r3, #0
   b77fa:	6840      	ldr	r0, [r0, #4]
   b77fc:	461a      	mov	r2, r3
   b77fe:	4619      	mov	r1, r3
   b7800:	f7fe bd0c 	b.w	b621c <network_off>

000b7804 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7804:	2300      	movs	r3, #0
   b7806:	6840      	ldr	r0, [r0, #4]
   b7808:	461a      	mov	r2, r3
   b780a:	4619      	mov	r1, r3
   b780c:	f7fe bcfe 	b.w	b620c <network_on>

000b7810 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7810:	2200      	movs	r2, #0
   b7812:	6840      	ldr	r0, [r0, #4]
   b7814:	4611      	mov	r1, r2
   b7816:	f7fe bcf1 	b.w	b61fc <network_ready>

000b781a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b781a:	2200      	movs	r2, #0
   b781c:	6840      	ldr	r0, [r0, #4]
   b781e:	4611      	mov	r1, r2
   b7820:	f7fe bcdc 	b.w	b61dc <network_connecting>

000b7824 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7824:	6840      	ldr	r0, [r0, #4]
   b7826:	2200      	movs	r2, #0
   b7828:	2102      	movs	r1, #2
   b782a:	f7fe bcdf 	b.w	b61ec <network_disconnect>

000b782e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b782e:	2300      	movs	r3, #0
   b7830:	6840      	ldr	r0, [r0, #4]
   b7832:	461a      	mov	r2, r3
   b7834:	f7fe bcca 	b.w	b61cc <network_connect>

000b7838 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7838:	4b02      	ldr	r3, [pc, #8]	; (b7844 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b783a:	2203      	movs	r2, #3
   b783c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b783e:	4a02      	ldr	r2, [pc, #8]	; (b7848 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7840:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7842:	4770      	bx	lr
   b7844:	2003e63c 	.word	0x2003e63c
   b7848:	000ba124 	.word	0x000ba124

000b784c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b784c:	4770      	bx	lr

000b784e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b784e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7850:	4606      	mov	r6, r0
   b7852:	4615      	mov	r5, r2
   b7854:	460c      	mov	r4, r1
   b7856:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7858:	42bc      	cmp	r4, r7
   b785a:	d006      	beq.n	b786a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b785c:	6833      	ldr	r3, [r6, #0]
   b785e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7862:	689b      	ldr	r3, [r3, #8]
   b7864:	4630      	mov	r0, r6
   b7866:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7868:	e7f6      	b.n	b7858 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b786a:	4628      	mov	r0, r5
   b786c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b786e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b786e:	7c00      	ldrb	r0, [r0, #16]
   b7870:	2200      	movs	r2, #0
   b7872:	f7fe baa5 	b.w	b5dc0 <hal_i2c_write>

000b7876 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7876:	7c00      	ldrb	r0, [r0, #16]
   b7878:	2100      	movs	r1, #0
   b787a:	f7fe baa9 	b.w	b5dd0 <hal_i2c_available>

000b787e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b787e:	7c00      	ldrb	r0, [r0, #16]
   b7880:	2100      	movs	r1, #0
   b7882:	f7fe baad 	b.w	b5de0 <hal_i2c_read>

000b7886 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7886:	7c00      	ldrb	r0, [r0, #16]
   b7888:	2100      	movs	r1, #0
   b788a:	f7fe bab1 	b.w	b5df0 <hal_i2c_peek>

000b788e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b788e:	7c00      	ldrb	r0, [r0, #16]
   b7890:	2100      	movs	r1, #0
   b7892:	f7fe bab5 	b.w	b5e00 <hal_i2c_flush>

000b7896 <_ZN7TwoWireD0Ev>:
   b7896:	b510      	push	{r4, lr}
   b7898:	2114      	movs	r1, #20
   b789a:	4604      	mov	r4, r0
   b789c:	f001 faed 	bl	b8e7a <_ZdlPvj>
   b78a0:	4620      	mov	r0, r4
   b78a2:	bd10      	pop	{r4, pc}

000b78a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b78a4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b78a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b78aa:	4604      	mov	r4, r0
   b78ac:	4608      	mov	r0, r1
   b78ae:	2100      	movs	r1, #0
   b78b0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b78b4:	4b03      	ldr	r3, [pc, #12]	; (b78c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b78b6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b78b8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b78ba:	4611      	mov	r1, r2
   b78bc:	f7fe fab0 	bl	b5e20 <hal_i2c_init>
}
   b78c0:	4620      	mov	r0, r4
   b78c2:	bd10      	pop	{r4, pc}
   b78c4:	000ba160 	.word	0x000ba160

000b78c8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b78c8:	2300      	movs	r3, #0
   b78ca:	7c00      	ldrb	r0, [r0, #16]
   b78cc:	461a      	mov	r2, r3
   b78ce:	4619      	mov	r1, r3
   b78d0:	f7fe ba5e 	b.w	b5d90 <hal_i2c_begin>

000b78d4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b78d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b78d6:	2200      	movs	r2, #0
   b78d8:	2314      	movs	r3, #20
   b78da:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b78de:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b78e2:	780b      	ldrb	r3, [r1, #0]
   b78e4:	f88d 3008 	strb.w	r3, [sp, #8]
   b78e8:	684b      	ldr	r3, [r1, #4]
   b78ea:	9303      	str	r3, [sp, #12]
   b78ec:	68cb      	ldr	r3, [r1, #12]
   b78ee:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b78f0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b78f2:	7a0b      	ldrb	r3, [r1, #8]
   b78f4:	9305      	str	r3, [sp, #20]
   b78f6:	a901      	add	r1, sp, #4
   b78f8:	f7fe fa9a 	bl	b5e30 <hal_i2c_request_ex>
}
   b78fc:	b007      	add	sp, #28
   b78fe:	f85d fb04 	ldr.w	pc, [sp], #4

000b7902 <_ZN7TwoWire11requestFromEhjh>:
{
   b7902:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b7904:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b7906:	f88d 1000 	strb.w	r1, [sp]
   b790a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b790e:	9103      	str	r1, [sp, #12]
   b7910:	bf18      	it	ne
   b7912:	2301      	movne	r3, #1
   b7914:	4669      	mov	r1, sp
    size_ = size;
   b7916:	9201      	str	r2, [sp, #4]
   b7918:	f88d 3008 	strb.w	r3, [sp, #8]
   b791c:	f7ff ffda 	bl	b78d4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b7920:	b005      	add	sp, #20
   b7922:	f85d fb04 	ldr.w	pc, [sp], #4

000b7926 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b7926:	2301      	movs	r3, #1
   b7928:	f7ff bfeb 	b.w	b7902 <_ZN7TwoWire11requestFromEhjh>

000b792c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b792c:	7c00      	ldrb	r0, [r0, #16]
   b792e:	2200      	movs	r2, #0
   b7930:	f7fe ba36 	b.w	b5da0 <hal_i2c_begin_transmission>

000b7934 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7934:	b2c9      	uxtb	r1, r1
   b7936:	f7ff bff9 	b.w	b792c <_ZN7TwoWire17beginTransmissionEh>

000b793a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b793a:	7c00      	ldrb	r0, [r0, #16]
   b793c:	2200      	movs	r2, #0
   b793e:	f7fe ba37 	b.w	b5db0 <hal_i2c_end_transmission>

000b7942 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7942:	2101      	movs	r1, #1
   b7944:	f7ff bff9 	b.w	b793a <_ZN7TwoWire15endTransmissionEh>

000b7948 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7948:	4770      	bx	lr

000b794a <_ZN9IPAddressD0Ev>:
   b794a:	b510      	push	{r4, lr}
   b794c:	2118      	movs	r1, #24
   b794e:	4604      	mov	r4, r0
   b7950:	f001 fa93 	bl	b8e7a <_ZdlPvj>
   b7954:	4620      	mov	r0, r4
   b7956:	bd10      	pop	{r4, pc}

000b7958 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7958:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b795a:	7d03      	ldrb	r3, [r0, #20]
   b795c:	2b06      	cmp	r3, #6
{
   b795e:	b08d      	sub	sp, #52	; 0x34
   b7960:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7962:	f100 0704 	add.w	r7, r0, #4
   b7966:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b796a:	d012      	beq.n	b7992 <_ZNK9IPAddress7printToER5Print+0x3a>
   b796c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7970:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7974:	220a      	movs	r2, #10
   b7976:	4630      	mov	r0, r6
   b7978:	f000 f979 	bl	b7c6e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b797c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b797e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7980:	d019      	beq.n	b79b6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7982:	2c00      	cmp	r4, #0
   b7984:	d0f4      	beq.n	b7970 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7986:	212e      	movs	r1, #46	; 0x2e
   b7988:	4630      	mov	r0, r6
   b798a:	f000 f951 	bl	b7c30 <_ZN5Print5printEc>
   b798e:	4404      	add	r4, r0
   b7990:	e7ee      	b.n	b7970 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7992:	232f      	movs	r3, #47	; 0x2f
   b7994:	466a      	mov	r2, sp
   b7996:	4639      	mov	r1, r7
   b7998:	200a      	movs	r0, #10
		buf[0] = 0;
   b799a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b799e:	f7fe fa57 	bl	b5e50 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b79a2:	4668      	mov	r0, sp
   b79a4:	f001 fe80 	bl	b96a8 <strlen>
   b79a8:	6833      	ldr	r3, [r6, #0]
   b79aa:	4602      	mov	r2, r0
   b79ac:	68db      	ldr	r3, [r3, #12]
   b79ae:	4669      	mov	r1, sp
   b79b0:	4630      	mov	r0, r6
   b79b2:	4798      	blx	r3
   b79b4:	4604      	mov	r4, r0
    }
    return n;
}
   b79b6:	4620      	mov	r0, r4
   b79b8:	b00d      	add	sp, #52	; 0x34
   b79ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b79bc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b79bc:	b510      	push	{r4, lr}
   b79be:	4b05      	ldr	r3, [pc, #20]	; (b79d4 <_ZN9IPAddressC1Ev+0x18>)
   b79c0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b79c2:	2211      	movs	r2, #17
   b79c4:	f840 3b04 	str.w	r3, [r0], #4
   b79c8:	2100      	movs	r1, #0
   b79ca:	f001 fe25 	bl	b9618 <memset>
}
   b79ce:	4620      	mov	r0, r4
   b79d0:	bd10      	pop	{r4, pc}
   b79d2:	bf00      	nop
   b79d4:	000ba188 	.word	0x000ba188

000b79d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b79d8:	4603      	mov	r3, r0
   b79da:	4a07      	ldr	r2, [pc, #28]	; (b79f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b79dc:	b510      	push	{r4, lr}
   b79de:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b79e2:	f101 0210 	add.w	r2, r1, #16
   b79e6:	f851 4b04 	ldr.w	r4, [r1], #4
   b79ea:	f843 4b04 	str.w	r4, [r3], #4
   b79ee:	4291      	cmp	r1, r2
   b79f0:	d1f9      	bne.n	b79e6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b79f2:	780a      	ldrb	r2, [r1, #0]
   b79f4:	701a      	strb	r2, [r3, #0]
}
   b79f6:	bd10      	pop	{r4, pc}
   b79f8:	000ba188 	.word	0x000ba188

000b79fc <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b79fc:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b79fe:	2b04      	cmp	r3, #4
   b7a00:	d104      	bne.n	b7a0c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b7a02:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7a04:	3800      	subs	r0, #0
   b7a06:	bf18      	it	ne
   b7a08:	2001      	movne	r0, #1
   b7a0a:	4770      	bx	lr
    } else if (version() == 6) {
   b7a0c:	2b06      	cmp	r3, #6
   b7a0e:	d107      	bne.n	b7a20 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7a10:	6843      	ldr	r3, [r0, #4]
   b7a12:	b93b      	cbnz	r3, b7a24 <_ZNK9IPAddresscvbEv+0x28>
   b7a14:	6883      	ldr	r3, [r0, #8]
   b7a16:	b92b      	cbnz	r3, b7a24 <_ZNK9IPAddresscvbEv+0x28>
   b7a18:	68c3      	ldr	r3, [r0, #12]
   b7a1a:	b91b      	cbnz	r3, b7a24 <_ZNK9IPAddresscvbEv+0x28>
   b7a1c:	6900      	ldr	r0, [r0, #16]
   b7a1e:	e7f1      	b.n	b7a04 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7a20:	2000      	movs	r0, #0
   b7a22:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7a24:	2001      	movs	r0, #1
}
   b7a26:	4770      	bx	lr

000b7a28 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7a28:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7a2a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7a2e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7a32:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7a36:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7a3a:	2304      	movs	r3, #4
   b7a3c:	6041      	str	r1, [r0, #4]
   b7a3e:	7503      	strb	r3, [r0, #20]
}
   b7a40:	bd10      	pop	{r4, pc}
	...

000b7a44 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7a44:	b507      	push	{r0, r1, r2, lr}
   b7a46:	4b06      	ldr	r3, [pc, #24]	; (b7a60 <_ZN9IPAddressC1EPKh+0x1c>)
   b7a48:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7a4a:	78cb      	ldrb	r3, [r1, #3]
   b7a4c:	9300      	str	r3, [sp, #0]
   b7a4e:	788b      	ldrb	r3, [r1, #2]
   b7a50:	784a      	ldrb	r2, [r1, #1]
   b7a52:	7809      	ldrb	r1, [r1, #0]
   b7a54:	f7ff ffe8 	bl	b7a28 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7a58:	b003      	add	sp, #12
   b7a5a:	f85d fb04 	ldr.w	pc, [sp], #4
   b7a5e:	bf00      	nop
   b7a60:	000ba188 	.word	0x000ba188

000b7a64 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7a64:	4b01      	ldr	r3, [pc, #4]	; (b7a6c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7a66:	4a02      	ldr	r2, [pc, #8]	; (b7a70 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7a68:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7a6a:	4770      	bx	lr
   b7a6c:	2003e644 	.word	0x2003e644
   b7a70:	000ba194 	.word	0x000ba194

000b7a74 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7a74:	2300      	movs	r3, #0
   b7a76:	6840      	ldr	r0, [r0, #4]
   b7a78:	461a      	mov	r2, r3
   b7a7a:	f7fe bba7 	b.w	b61cc <network_connect>

000b7a7e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7a7e:	6840      	ldr	r0, [r0, #4]
   b7a80:	2200      	movs	r2, #0
   b7a82:	2102      	movs	r1, #2
   b7a84:	f7fe bbb2 	b.w	b61ec <network_disconnect>

000b7a88 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7a88:	2200      	movs	r2, #0
   b7a8a:	6840      	ldr	r0, [r0, #4]
   b7a8c:	4611      	mov	r1, r2
   b7a8e:	f7fe bba5 	b.w	b61dc <network_connecting>

000b7a92 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7a92:	2200      	movs	r2, #0
   b7a94:	6840      	ldr	r0, [r0, #4]
   b7a96:	4611      	mov	r1, r2
   b7a98:	f7fe bbb0 	b.w	b61fc <network_ready>

000b7a9c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7a9c:	2300      	movs	r3, #0
   b7a9e:	6840      	ldr	r0, [r0, #4]
   b7aa0:	461a      	mov	r2, r3
   b7aa2:	4619      	mov	r1, r3
   b7aa4:	f7fe bbb2 	b.w	b620c <network_on>

000b7aa8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7aa8:	2300      	movs	r3, #0
   b7aaa:	6840      	ldr	r0, [r0, #4]
   b7aac:	461a      	mov	r2, r3
   b7aae:	4619      	mov	r1, r3
   b7ab0:	f7fe bbb4 	b.w	b621c <network_off>

000b7ab4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7ab4:	6840      	ldr	r0, [r0, #4]
   b7ab6:	2100      	movs	r1, #0
   b7ab8:	f7fe bbe8 	b.w	b628c <network_is_on>

000b7abc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7abc:	6840      	ldr	r0, [r0, #4]
   b7abe:	2100      	movs	r1, #0
   b7ac0:	f7fe bbec 	b.w	b629c <network_is_off>

000b7ac4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7ac4:	6840      	ldr	r0, [r0, #4]
   b7ac6:	2200      	movs	r2, #0
   b7ac8:	f081 0101 	eor.w	r1, r1, #1
   b7acc:	f7fe bbae 	b.w	b622c <network_listen>

000b7ad0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7ad0:	6840      	ldr	r0, [r0, #4]
   b7ad2:	2200      	movs	r2, #0
   b7ad4:	f7fe bbca 	b.w	b626c <network_set_listen_timeout>

000b7ad8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7ad8:	2200      	movs	r2, #0
   b7ada:	6840      	ldr	r0, [r0, #4]
   b7adc:	4611      	mov	r1, r2
   b7ade:	f7fe bbcd 	b.w	b627c <network_get_listen_timeout>

000b7ae2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7ae2:	2200      	movs	r2, #0
   b7ae4:	6840      	ldr	r0, [r0, #4]
   b7ae6:	4611      	mov	r1, r2
   b7ae8:	f7fe bba8 	b.w	b623c <network_listening>

000b7aec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7af0:	b095      	sub	sp, #84	; 0x54
   b7af2:	4614      	mov	r4, r2
   b7af4:	460d      	mov	r5, r1
   b7af6:	4607      	mov	r7, r0
    IPAddress addr;
   b7af8:	f7ff ff60 	bl	b79bc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7afc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7afe:	221c      	movs	r2, #28
   b7b00:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7b02:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7b04:	f001 fd88 	bl	b9618 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7b08:	2340      	movs	r3, #64	; 0x40
   b7b0a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7b0c:	4620      	mov	r0, r4
   b7b0e:	466b      	mov	r3, sp
   b7b10:	aa0c      	add	r2, sp, #48	; 0x30
   b7b12:	2100      	movs	r1, #0
   b7b14:	f7fe f9bc 	bl	b5e90 <netdb_getaddrinfo>
    if (!r) {
   b7b18:	4604      	mov	r4, r0
   b7b1a:	2800      	cmp	r0, #0
   b7b1c:	d14b      	bne.n	b7bb6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7b1e:	4602      	mov	r2, r0
   b7b20:	2101      	movs	r1, #1
   b7b22:	6868      	ldr	r0, [r5, #4]
   b7b24:	f7fe fb6a 	bl	b61fc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7b28:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7b2a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7b2c:	4622      	mov	r2, r4
   b7b2e:	6868      	ldr	r0, [r5, #4]
   b7b30:	f7fe fb64 	bl	b61fc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7b34:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7b36:	4681      	mov	r9, r0
        bool ok = false;
   b7b38:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7b3a:	2e00      	cmp	r6, #0
   b7b3c:	d03b      	beq.n	b7bb6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7b3e:	2900      	cmp	r1, #0
   b7b40:	d139      	bne.n	b7bb6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7b42:	6873      	ldr	r3, [r6, #4]
   b7b44:	2b02      	cmp	r3, #2
   b7b46:	d003      	beq.n	b7b50 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7b48:	2b0a      	cmp	r3, #10
   b7b4a:	d011      	beq.n	b7b70 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7b4c:	69f6      	ldr	r6, [r6, #28]
   b7b4e:	e7f4      	b.n	b7b3a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7b50:	f1b8 0f00 	cmp.w	r8, #0
   b7b54:	d0fa      	beq.n	b7b4c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7b56:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7b58:	a806      	add	r0, sp, #24
   b7b5a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7b5c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7b5e:	f7ff ff71 	bl	b7a44 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7b64:	1d3c      	adds	r4, r7, #4
   b7b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7b68:	682b      	ldr	r3, [r5, #0]
   b7b6a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7b6c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7b6e:	e7ed      	b.n	b7b4c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7b70:	f1b9 0f00 	cmp.w	r9, #0
   b7b74:	d0ea      	beq.n	b7b4c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7b76:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7b78:	2210      	movs	r2, #16
   b7b7a:	a801      	add	r0, sp, #4
   b7b7c:	f001 fd4c 	bl	b9618 <memset>
                    a.v = 6;
   b7b80:	2306      	movs	r3, #6
   b7b82:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7b86:	ad01      	add	r5, sp, #4
   b7b88:	f104 0308 	add.w	r3, r4, #8
   b7b8c:	3418      	adds	r4, #24
   b7b8e:	6818      	ldr	r0, [r3, #0]
   b7b90:	6859      	ldr	r1, [r3, #4]
   b7b92:	462a      	mov	r2, r5
   b7b94:	c203      	stmia	r2!, {r0, r1}
   b7b96:	3308      	adds	r3, #8
   b7b98:	42a3      	cmp	r3, r4
   b7b9a:	4615      	mov	r5, r2
   b7b9c:	d1f7      	bne.n	b7b8e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7b9e:	a901      	add	r1, sp, #4
   b7ba0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7ba2:	ad07      	add	r5, sp, #28
   b7ba4:	f7ff ff18 	bl	b79d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7baa:	1d3c      	adds	r4, r7, #4
   b7bac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7bae:	682b      	ldr	r3, [r5, #0]
   b7bb0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7bb2:	4649      	mov	r1, r9
   b7bb4:	e7ca      	b.n	b7b4c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7bb6:	9800      	ldr	r0, [sp, #0]
   b7bb8:	f7fe f962 	bl	b5e80 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7bbc:	4638      	mov	r0, r7
   b7bbe:	b015      	add	sp, #84	; 0x54
   b7bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7bc4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7bc4:	4b02      	ldr	r3, [pc, #8]	; (b7bd0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7bc6:	4a03      	ldr	r2, [pc, #12]	; (b7bd4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7bc8:	601a      	str	r2, [r3, #0]
   b7bca:	2200      	movs	r2, #0
   b7bcc:	605a      	str	r2, [r3, #4]

} // spark
   b7bce:	4770      	bx	lr
   b7bd0:	2003e648 	.word	0x2003e648
   b7bd4:	000ba1a0 	.word	0x000ba1a0

000b7bd8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7bda:	4606      	mov	r6, r0
   b7bdc:	460d      	mov	r5, r1
  size_t n = 0;
   b7bde:	188f      	adds	r7, r1, r2
   b7be0:	2400      	movs	r4, #0
  while (size--) {
   b7be2:	42bd      	cmp	r5, r7
   b7be4:	d00c      	beq.n	b7c00 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7be6:	6833      	ldr	r3, [r6, #0]
   b7be8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7bec:	689b      	ldr	r3, [r3, #8]
   b7bee:	4630      	mov	r0, r6
   b7bf0:	4798      	blx	r3
     if (chunk>=0)
   b7bf2:	1e03      	subs	r3, r0, #0
   b7bf4:	db01      	blt.n	b7bfa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7bf6:	441c      	add	r4, r3
  while (size--) {
   b7bf8:	e7f3      	b.n	b7be2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7bfa:	2c00      	cmp	r4, #0
   b7bfc:	bf08      	it	eq
   b7bfe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7c00:	4620      	mov	r0, r4
   b7c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7c04 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7c04:	b513      	push	{r0, r1, r4, lr}
   b7c06:	4604      	mov	r4, r0
    }
   b7c08:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7c0a:	b159      	cbz	r1, b7c24 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7c0c:	9101      	str	r1, [sp, #4]
   b7c0e:	f001 fd4b 	bl	b96a8 <strlen>
   b7c12:	6823      	ldr	r3, [r4, #0]
   b7c14:	9901      	ldr	r1, [sp, #4]
   b7c16:	68db      	ldr	r3, [r3, #12]
   b7c18:	4602      	mov	r2, r0
   b7c1a:	4620      	mov	r0, r4
    }
   b7c1c:	b002      	add	sp, #8
   b7c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7c22:	4718      	bx	r3
    }
   b7c24:	b002      	add	sp, #8
   b7c26:	bd10      	pop	{r4, pc}

000b7c28 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b7c28:	b508      	push	{r3, lr}
  return write(str);
   b7c2a:	f7ff ffeb 	bl	b7c04 <_ZN5Print5writeEPKc>
}
   b7c2e:	bd08      	pop	{r3, pc}

000b7c30 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7c30:	6803      	ldr	r3, [r0, #0]
   b7c32:	689b      	ldr	r3, [r3, #8]
   b7c34:	4718      	bx	r3

000b7c36 <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   b7c36:	680a      	ldr	r2, [r1, #0]
 {
   b7c38:	460b      	mov	r3, r1
   return x.printTo(*this);
   b7c3a:	6812      	ldr	r2, [r2, #0]
   b7c3c:	4601      	mov	r1, r0
   b7c3e:	4618      	mov	r0, r3
   b7c40:	4710      	bx	r2

000b7c42 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b7c42:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7c44:	210d      	movs	r1, #13
{
   b7c46:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7c48:	f7ff fff2 	bl	b7c30 <_ZN5Print5printEc>
  n += print('\n');
   b7c4c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7c4e:	4604      	mov	r4, r0
  n += print('\n');
   b7c50:	4628      	mov	r0, r5
   b7c52:	f7ff ffed 	bl	b7c30 <_ZN5Print5printEc>
  return n;
}
   b7c56:	4420      	add	r0, r4
   b7c58:	bd38      	pop	{r3, r4, r5, pc}

000b7c5a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7c5a:	b538      	push	{r3, r4, r5, lr}
   b7c5c:	4605      	mov	r5, r0
  return write(str);
   b7c5e:	f7ff ffd1 	bl	b7c04 <_ZN5Print5writeEPKc>
   b7c62:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7c64:	4628      	mov	r0, r5
   b7c66:	f7ff ffec 	bl	b7c42 <_ZN5Print7printlnEv>
  return n;
}
   b7c6a:	4420      	add	r0, r4
   b7c6c:	bd38      	pop	{r3, r4, r5, pc}

000b7c6e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7c6e:	b530      	push	{r4, r5, lr}
   b7c70:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7c72:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7c74:	2a01      	cmp	r2, #1
  *str = '\0';
   b7c76:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7c7a:	bf98      	it	ls
   b7c7c:	220a      	movls	r2, #10
   b7c7e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7c80:	460d      	mov	r5, r1
   b7c82:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7c86:	fb01 5312 	mls	r3, r1, r2, r5
   b7c8a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7c8e:	2b09      	cmp	r3, #9
   b7c90:	bf94      	ite	ls
   b7c92:	3330      	addls	r3, #48	; 0x30
   b7c94:	3337      	addhi	r3, #55	; 0x37
   b7c96:	b2db      	uxtb	r3, r3
  } while(n);
   b7c98:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7c9a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7c9e:	d9ef      	bls.n	b7c80 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7ca0:	4621      	mov	r1, r4
   b7ca2:	f7ff ffaf 	bl	b7c04 <_ZN5Print5writeEPKc>
}
   b7ca6:	b00b      	add	sp, #44	; 0x2c
   b7ca8:	bd30      	pop	{r4, r5, pc}

000b7caa <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7cae:	b086      	sub	sp, #24
   b7cb0:	af00      	add	r7, sp, #0
   b7cb2:	4605      	mov	r5, r0
   b7cb4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7cb6:	1d38      	adds	r0, r7, #4
   b7cb8:	2114      	movs	r1, #20
{
   b7cba:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7cbc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7cbe:	f7fe fb15 	bl	b62ec <vsnprintf>

    if (n<bufsize)
   b7cc2:	2813      	cmp	r0, #19
   b7cc4:	d80e      	bhi.n	b7ce4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7cc6:	1d39      	adds	r1, r7, #4
   b7cc8:	4628      	mov	r0, r5
   b7cca:	f7ff ff9b 	bl	b7c04 <_ZN5Print5writeEPKc>
   b7cce:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7cd0:	b11e      	cbz	r6, b7cda <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7cd2:	4628      	mov	r0, r5
   b7cd4:	f7ff ffb5 	bl	b7c42 <_ZN5Print7printlnEv>
   b7cd8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7cda:	4620      	mov	r0, r4
   b7cdc:	3718      	adds	r7, #24
   b7cde:	46bd      	mov	sp, r7
   b7ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7ce4:	f100 0308 	add.w	r3, r0, #8
   b7ce8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7cec:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7cee:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7cf2:	4622      	mov	r2, r4
   b7cf4:	1c41      	adds	r1, r0, #1
   b7cf6:	683b      	ldr	r3, [r7, #0]
   b7cf8:	4668      	mov	r0, sp
   b7cfa:	f7fe faf7 	bl	b62ec <vsnprintf>
  return write(str);
   b7cfe:	4669      	mov	r1, sp
   b7d00:	4628      	mov	r0, r5
   b7d02:	f7ff ff7f 	bl	b7c04 <_ZN5Print5writeEPKc>
   b7d06:	4604      	mov	r4, r0
   b7d08:	46c5      	mov	sp, r8
   b7d0a:	e7e1      	b.n	b7cd0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7d0c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   b7d0c:	b510      	push	{r4, lr}
   b7d0e:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b7d10:	f7fc fe6c 	bl	b49ec <_ZNSt14_Function_baseD1Ev>
   b7d14:	4620      	mov	r0, r4
   b7d16:	bd10      	pop	{r4, pc}

000b7d18 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7d18:	4803      	ldr	r0, [pc, #12]	; (b7d28 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   b7d1a:	4a04      	ldr	r2, [pc, #16]	; (b7d2c <_GLOBAL__sub_I_RGB+0x14>)
   b7d1c:	4904      	ldr	r1, [pc, #16]	; (b7d30 <_GLOBAL__sub_I_RGB+0x18>)
   b7d1e:	2300      	movs	r3, #0
   b7d20:	6083      	str	r3, [r0, #8]
   b7d22:	f001 b8a5 	b.w	b8e70 <__aeabi_atexit>
   b7d26:	bf00      	nop
   b7d28:	2003e650 	.word	0x2003e650
   b7d2c:	2003da58 	.word	0x2003da58
   b7d30:	000b7d0d 	.word	0x000b7d0d

000b7d34 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7d34:	2100      	movs	r1, #0
   b7d36:	f7fe b92b 	b.w	b5f90 <hal_spi_release>

000b7d3a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7d3a:	2100      	movs	r1, #0
   b7d3c:	f7fe b920 	b.w	b5f80 <hal_spi_acquire>

000b7d40 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7d40:	b510      	push	{r4, lr}
   b7d42:	4604      	mov	r4, r0
   b7d44:	4608      	mov	r0, r1
{
    _spi = spi;
   b7d46:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7d48:	f7fe f902 	bl	b5f50 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7d4c:	2300      	movs	r3, #0
   b7d4e:	6063      	str	r3, [r4, #4]
}
   b7d50:	4620      	mov	r0, r4
   b7d52:	bd10      	pop	{r4, pc}

000b7d54 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7d54:	b513      	push	{r0, r1, r4, lr}
   b7d56:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7d58:	7800      	ldrb	r0, [r0, #0]
   b7d5a:	f7ff ffee 	bl	b7d3a <_ZN8SPIClass4lockEv.isra.0>
   b7d5e:	b958      	cbnz	r0, b7d78 <_ZN8SPIClass5beginEv+0x24>
   b7d60:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7d62:	9001      	str	r0, [sp, #4]
   b7d64:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7d68:	f7fe f8ca 	bl	b5f00 <hal_spi_begin>
        unlock();
   b7d6c:	9801      	ldr	r0, [sp, #4]
    }
}
   b7d6e:	b002      	add	sp, #8
   b7d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7d74:	f7ff bfde 	b.w	b7d34 <_ZN8SPIClass6unlockEv.isra.0>
   b7d78:	b002      	add	sp, #8
   b7d7a:	bd10      	pop	{r4, pc}

000b7d7c <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b7d7c:	b513      	push	{r0, r1, r4, lr}
   b7d7e:	4604      	mov	r4, r0
    if (!lock())
   b7d80:	7800      	ldrb	r0, [r0, #0]
{
   b7d82:	9101      	str	r1, [sp, #4]
    if (!lock())
   b7d84:	f7ff ffd9 	bl	b7d3a <_ZN8SPIClass4lockEv.isra.0>
   b7d88:	9901      	ldr	r1, [sp, #4]
   b7d8a:	b948      	cbnz	r0, b7da0 <_ZN8SPIClass11setBitOrderEh+0x24>
   b7d8c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b7d8e:	9001      	str	r0, [sp, #4]
   b7d90:	f7fe f8be 	bl	b5f10 <hal_spi_set_bit_order>
        unlock();
   b7d94:	9801      	ldr	r0, [sp, #4]
    }
}
   b7d96:	b002      	add	sp, #8
   b7d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7d9c:	f7ff bfca 	b.w	b7d34 <_ZN8SPIClass6unlockEv.isra.0>
   b7da0:	b002      	add	sp, #8
   b7da2:	bd10      	pop	{r4, pc}

000b7da4 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b7da4:	b513      	push	{r0, r1, r4, lr}
   b7da6:	4604      	mov	r4, r0
    if (!lock())
   b7da8:	7800      	ldrb	r0, [r0, #0]
{
   b7daa:	9101      	str	r1, [sp, #4]
    if (!lock())
   b7dac:	f7ff ffc5 	bl	b7d3a <_ZN8SPIClass4lockEv.isra.0>
   b7db0:	9901      	ldr	r1, [sp, #4]
   b7db2:	b948      	cbnz	r0, b7dc8 <_ZN8SPIClass11setDataModeEh+0x24>
   b7db4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b7db6:	9001      	str	r0, [sp, #4]
   b7db8:	f7fe f8b2 	bl	b5f20 <hal_spi_set_data_mode>
        unlock();
   b7dbc:	9801      	ldr	r0, [sp, #4]
    }
}
   b7dbe:	b002      	add	sp, #8
   b7dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7dc4:	f7ff bfb6 	b.w	b7d34 <_ZN8SPIClass6unlockEv.isra.0>
   b7dc8:	b002      	add	sp, #8
   b7dca:	bd10      	pop	{r4, pc}

000b7dcc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7dcc:	0840      	lsrs	r0, r0, #1
{
   b7dce:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7dd0:	6018      	str	r0, [r3, #0]
   b7dd2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7dd4:	6818      	ldr	r0, [r3, #0]
   b7dd6:	4288      	cmp	r0, r1
   b7dd8:	b2e5      	uxtb	r5, r4
   b7dda:	d906      	bls.n	b7dea <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7ddc:	3401      	adds	r4, #1
   b7dde:	2c08      	cmp	r4, #8
   b7de0:	d002      	beq.n	b7de8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7de2:	0840      	lsrs	r0, r0, #1
   b7de4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7de6:	e7f5      	b.n	b7dd4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7de8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7dea:	4b02      	ldr	r3, [pc, #8]	; (b7df4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7dec:	5d5b      	ldrb	r3, [r3, r5]
   b7dee:	7013      	strb	r3, [r2, #0]
}
   b7df0:	bd30      	pop	{r4, r5, pc}
   b7df2:	bf00      	nop
   b7df4:	000ba1d4 	.word	0x000ba1d4

000b7df8 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b7df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7dfc:	b088      	sub	sp, #32
    unsigned clock = 0;
   b7dfe:	2300      	movs	r3, #0
{
   b7e00:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b7e02:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b7e04:	9302      	str	r3, [sp, #8]
{
   b7e06:	460e      	mov	r6, r1
   b7e08:	4617      	mov	r7, r2
    if (!lock())
   b7e0a:	f7ff ff96 	bl	b7d3a <_ZN8SPIClass4lockEv.isra.0>
   b7e0e:	4605      	mov	r5, r0
   b7e10:	bb00      	cbnz	r0, b7e54 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b7e12:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7e16:	4601      	mov	r1, r0
   b7e18:	2214      	movs	r2, #20
   b7e1a:	a803      	add	r0, sp, #12
   b7e1c:	f001 fbfc 	bl	b9618 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7e20:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7e22:	462a      	mov	r2, r5
   b7e24:	a903      	add	r1, sp, #12
   b7e26:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b7e28:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b7e2c:	f7fe f8a0 	bl	b5f70 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b7e30:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b7e32:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b7e36:	ab02      	add	r3, sp, #8
   b7e38:	f10d 0207 	add.w	r2, sp, #7
   b7e3c:	fb07 f106 	mul.w	r1, r7, r6
   b7e40:	f7ff ffc4 	bl	b7dcc <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b7e44:	7820      	ldrb	r0, [r4, #0]
   b7e46:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b7e4a:	f7fe f871 	bl	b5f30 <hal_spi_set_clock_divider>
        unlock();
   b7e4e:	7820      	ldrb	r0, [r4, #0]
   b7e50:	f7ff ff70 	bl	b7d34 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b7e54:	9802      	ldr	r0, [sp, #8]
   b7e56:	b008      	add	sp, #32
   b7e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7e5c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b7e5c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7e5e:	7800      	ldrb	r0, [r0, #0]
   b7e60:	f7fe f86e 	bl	b5f40 <hal_spi_transfer>
}
   b7e64:	b2c0      	uxtb	r0, r0
   b7e66:	bd08      	pop	{r3, pc}

000b7e68 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7e68:	b510      	push	{r4, lr}
   b7e6a:	4604      	mov	r4, r0
{
	free(buffer);
   b7e6c:	6800      	ldr	r0, [r0, #0]
   b7e6e:	f7fe fa25 	bl	b62bc <free>
}
   b7e72:	4620      	mov	r0, r4
   b7e74:	bd10      	pop	{r4, pc}

000b7e76 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b7e76:	b510      	push	{r4, lr}
   b7e78:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7e7a:	6800      	ldr	r0, [r0, #0]
   b7e7c:	b108      	cbz	r0, b7e82 <_ZN6String10invalidateEv+0xc>
   b7e7e:	f7fe fa1d 	bl	b62bc <free>
	buffer = NULL;
   b7e82:	2300      	movs	r3, #0
	capacity = len = 0;
   b7e84:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7e88:	6023      	str	r3, [r4, #0]
}
   b7e8a:	bd10      	pop	{r4, pc}

000b7e8c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7e8c:	b538      	push	{r3, r4, r5, lr}
   b7e8e:	4604      	mov	r4, r0
   b7e90:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7e92:	6800      	ldr	r0, [r0, #0]
   b7e94:	3101      	adds	r1, #1
   b7e96:	f7fe fa19 	bl	b62cc <realloc>
	if (newbuffer) {
   b7e9a:	b110      	cbz	r0, b7ea2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7e9c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7ea0:	2001      	movs	r0, #1
	}
	return 0;
}
   b7ea2:	bd38      	pop	{r3, r4, r5, pc}

000b7ea4 <_ZN6String7reserveEj>:
{
   b7ea4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7ea6:	6803      	ldr	r3, [r0, #0]
{
   b7ea8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7eaa:	b123      	cbz	r3, b7eb6 <_ZN6String7reserveEj+0x12>
   b7eac:	6843      	ldr	r3, [r0, #4]
   b7eae:	428b      	cmp	r3, r1
   b7eb0:	d301      	bcc.n	b7eb6 <_ZN6String7reserveEj+0x12>
   b7eb2:	2001      	movs	r0, #1
}
   b7eb4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7eb6:	4620      	mov	r0, r4
   b7eb8:	f7ff ffe8 	bl	b7e8c <_ZN6String12changeBufferEj>
   b7ebc:	2800      	cmp	r0, #0
   b7ebe:	d0f9      	beq.n	b7eb4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7ec0:	68a3      	ldr	r3, [r4, #8]
   b7ec2:	2b00      	cmp	r3, #0
   b7ec4:	d1f5      	bne.n	b7eb2 <_ZN6String7reserveEj+0xe>
   b7ec6:	6822      	ldr	r2, [r4, #0]
   b7ec8:	7013      	strb	r3, [r2, #0]
   b7eca:	e7f2      	b.n	b7eb2 <_ZN6String7reserveEj+0xe>

000b7ecc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7ece:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7ed0:	4611      	mov	r1, r2
   b7ed2:	9201      	str	r2, [sp, #4]
{
   b7ed4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7ed6:	f7ff ffe5 	bl	b7ea4 <_ZN6String7reserveEj>
   b7eda:	9a01      	ldr	r2, [sp, #4]
   b7edc:	b928      	cbnz	r0, b7eea <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7ede:	4620      	mov	r0, r4
   b7ee0:	f7ff ffc9 	bl	b7e76 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7ee4:	4620      	mov	r0, r4
   b7ee6:	b003      	add	sp, #12
   b7ee8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7eea:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7eec:	4629      	mov	r1, r5
   b7eee:	6820      	ldr	r0, [r4, #0]
   b7ef0:	f001 fb6a 	bl	b95c8 <memcpy>
	buffer[len] = 0;
   b7ef4:	6822      	ldr	r2, [r4, #0]
   b7ef6:	68a3      	ldr	r3, [r4, #8]
   b7ef8:	2100      	movs	r1, #0
   b7efa:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7efc:	e7f2      	b.n	b7ee4 <_ZN6String4copyEPKcj+0x18>

000b7efe <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7efe:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7f00:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7f02:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7f06:	4604      	mov	r4, r0
	len = 0;
   b7f08:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7f0a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7f0c:	b141      	cbz	r1, b7f20 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7f0e:	4608      	mov	r0, r1
   b7f10:	9101      	str	r1, [sp, #4]
   b7f12:	f001 fbc9 	bl	b96a8 <strlen>
   b7f16:	9901      	ldr	r1, [sp, #4]
   b7f18:	4602      	mov	r2, r0
   b7f1a:	4620      	mov	r0, r4
   b7f1c:	f7ff ffd6 	bl	b7ecc <_ZN6String4copyEPKcj>
}
   b7f20:	4620      	mov	r0, r4
   b7f22:	b002      	add	sp, #8
   b7f24:	bd10      	pop	{r4, pc}

000b7f26 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b7f26:	4288      	cmp	r0, r1
{
   b7f28:	b510      	push	{r4, lr}
   b7f2a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7f2c:	d005      	beq.n	b7f3a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b7f2e:	680b      	ldr	r3, [r1, #0]
   b7f30:	b12b      	cbz	r3, b7f3e <_ZN6StringaSERKS_+0x18>
   b7f32:	688a      	ldr	r2, [r1, #8]
   b7f34:	4619      	mov	r1, r3
   b7f36:	f7ff ffc9 	bl	b7ecc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7f3a:	4620      	mov	r0, r4
   b7f3c:	bd10      	pop	{r4, pc}
	else invalidate();
   b7f3e:	f7ff ff9a 	bl	b7e76 <_ZN6String10invalidateEv>
   b7f42:	e7fa      	b.n	b7f3a <_ZN6StringaSERKS_+0x14>

000b7f44 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7f44:	b510      	push	{r4, lr}
	buffer = NULL;
   b7f46:	2300      	movs	r3, #0
String::String(const String &value)
   b7f48:	4604      	mov	r4, r0
	capacity = 0;
   b7f4a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b7f4e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7f50:	7303      	strb	r3, [r0, #12]
	*this = value;
   b7f52:	f7ff ffe8 	bl	b7f26 <_ZN6StringaSERKS_>
}
   b7f56:	4620      	mov	r0, r4
   b7f58:	bd10      	pop	{r4, pc}

000b7f5a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7f5a:	b513      	push	{r0, r1, r4, lr}
   b7f5c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7f5e:	b159      	cbz	r1, b7f78 <_ZN6StringaSEPKc+0x1e>
   b7f60:	4608      	mov	r0, r1
   b7f62:	9101      	str	r1, [sp, #4]
   b7f64:	f001 fba0 	bl	b96a8 <strlen>
   b7f68:	9901      	ldr	r1, [sp, #4]
   b7f6a:	4602      	mov	r2, r0
   b7f6c:	4620      	mov	r0, r4
   b7f6e:	f7ff ffad 	bl	b7ecc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7f72:	4620      	mov	r0, r4
   b7f74:	b002      	add	sp, #8
   b7f76:	bd10      	pop	{r4, pc}
	else invalidate();
   b7f78:	f7ff ff7d 	bl	b7e76 <_ZN6String10invalidateEv>
   b7f7c:	e7f9      	b.n	b7f72 <_ZN6StringaSEPKc+0x18>

000b7f7e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b7f7e:	b510      	push	{r4, lr}
   b7f80:	4604      	mov	r4, r0
   b7f82:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b7f84:	2300      	movs	r3, #0
	capacity = 0;
   b7f86:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b7f8a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b7f8c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b7f8e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b7f90:	a901      	add	r1, sp, #4
   b7f92:	f000 fdeb 	bl	b8b6c <itoa>
	*this = buf;
   b7f96:	a901      	add	r1, sp, #4
   b7f98:	4620      	mov	r0, r4
   b7f9a:	f7ff ffde 	bl	b7f5a <_ZN6StringaSEPKc>
}
   b7f9e:	4620      	mov	r0, r4
   b7fa0:	b00a      	add	sp, #40	; 0x28
   b7fa2:	bd10      	pop	{r4, pc}

000b7fa4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b7fa4:	b570      	push	{r4, r5, r6, lr}
   b7fa6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b7fa8:	460e      	mov	r6, r1
   b7faa:	b909      	cbnz	r1, b7fb0 <_ZN6String6concatEPKcj+0xc>
   b7fac:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b7fae:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b7fb0:	b16a      	cbz	r2, b7fce <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b7fb2:	6884      	ldr	r4, [r0, #8]
   b7fb4:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b7fb6:	4621      	mov	r1, r4
   b7fb8:	f7ff ff74 	bl	b7ea4 <_ZN6String7reserveEj>
   b7fbc:	2800      	cmp	r0, #0
   b7fbe:	d0f5      	beq.n	b7fac <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b7fc0:	6828      	ldr	r0, [r5, #0]
   b7fc2:	68ab      	ldr	r3, [r5, #8]
   b7fc4:	4631      	mov	r1, r6
   b7fc6:	4418      	add	r0, r3
   b7fc8:	f001 fb66 	bl	b9698 <strcpy>
	len = newlen;
   b7fcc:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b7fce:	2001      	movs	r0, #1
   b7fd0:	e7ed      	b.n	b7fae <_ZN6String6concatEPKcj+0xa>

000b7fd2 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b7fd2:	688a      	ldr	r2, [r1, #8]
   b7fd4:	6809      	ldr	r1, [r1, #0]
   b7fd6:	f7ff bfe5 	b.w	b7fa4 <_ZN6String6concatEPKcj>

000b7fda <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b7fda:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b7fdc:	2300      	movs	r3, #0
	buf[0] = c;
   b7fde:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b7fe2:	2201      	movs	r2, #1
   b7fe4:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b7fe6:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b7fea:	f7ff ffdb 	bl	b7fa4 <_ZN6String6concatEPKcj>
}
   b7fee:	b003      	add	sp, #12
   b7ff0:	f85d fb04 	ldr.w	pc, [sp], #4

000b7ff4 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b7ff4:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7ff6:	688a      	ldr	r2, [r1, #8]
   b7ff8:	6809      	ldr	r1, [r1, #0]
{
   b7ffa:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7ffc:	f7ff ffd2 	bl	b7fa4 <_ZN6String6concatEPKcj>
   b8000:	b910      	cbnz	r0, b8008 <_ZplRK15StringSumHelperRK6String+0x14>
   b8002:	4620      	mov	r0, r4
   b8004:	f7ff ff37 	bl	b7e76 <_ZN6String10invalidateEv>
	return a;
}
   b8008:	4620      	mov	r0, r4
   b800a:	bd10      	pop	{r4, pc}

000b800c <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b800c:	b513      	push	{r0, r1, r4, lr}
   b800e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8010:	b929      	cbnz	r1, b801e <_ZplRK15StringSumHelperPKc+0x12>
   b8012:	4620      	mov	r0, r4
   b8014:	f7ff ff2f 	bl	b7e76 <_ZN6String10invalidateEv>
	return a;
}
   b8018:	4620      	mov	r0, r4
   b801a:	b002      	add	sp, #8
   b801c:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b801e:	4608      	mov	r0, r1
   b8020:	9101      	str	r1, [sp, #4]
   b8022:	f001 fb41 	bl	b96a8 <strlen>
   b8026:	9901      	ldr	r1, [sp, #4]
   b8028:	4602      	mov	r2, r0
   b802a:	4620      	mov	r0, r4
   b802c:	f7ff ffba 	bl	b7fa4 <_ZN6String6concatEPKcj>
   b8030:	2800      	cmp	r0, #0
   b8032:	d0ee      	beq.n	b8012 <_ZplRK15StringSumHelperPKc+0x6>
   b8034:	e7f0      	b.n	b8018 <_ZplRK15StringSumHelperPKc+0xc>

000b8036 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b8036:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8038:	6882      	ldr	r2, [r0, #8]
   b803a:	b93a      	cbnz	r2, b804c <_ZNK6String6equalsEPKc+0x16>
   b803c:	b121      	cbz	r1, b8048 <_ZNK6String6equalsEPKc+0x12>
   b803e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b8040:	fab0 f080 	clz	r0, r0
   b8044:	0940      	lsrs	r0, r0, #5
   b8046:	e000      	b.n	b804a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8048:	2001      	movs	r0, #1
}
   b804a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b804c:	6800      	ldr	r0, [r0, #0]
   b804e:	b909      	cbnz	r1, b8054 <_ZNK6String6equalsEPKc+0x1e>
   b8050:	7800      	ldrb	r0, [r0, #0]
   b8052:	e7f5      	b.n	b8040 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b8054:	f001 fb16 	bl	b9684 <strcmp>
   b8058:	e7f2      	b.n	b8040 <_ZNK6String6equalsEPKc+0xa>

000b805a <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b805a:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b805c:	6883      	ldr	r3, [r0, #8]
   b805e:	4293      	cmp	r3, r2
   b8060:	d907      	bls.n	b8072 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b8062:	6804      	ldr	r4, [r0, #0]
   b8064:	6809      	ldr	r1, [r1, #0]
   b8066:	18a0      	adds	r0, r4, r2
   b8068:	f001 fb45 	bl	b96f6 <strstr>
	if (found == NULL) return -1;
   b806c:	b108      	cbz	r0, b8072 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b806e:	1b00      	subs	r0, r0, r4
}
   b8070:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b8072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8076:	e7fb      	b.n	b8070 <_ZNK6String7indexOfERKS_j+0x16>

000b8078 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b8078:	2200      	movs	r2, #0
   b807a:	f7ff bfee 	b.w	b805a <_ZNK6String7indexOfERKS_j>
	...

000b8080 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b8080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b8082:	429a      	cmp	r2, r3
{
   b8084:	460f      	mov	r7, r1
   b8086:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b8088:	490c      	ldr	r1, [pc, #48]	; (b80bc <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b808a:	bf88      	it	hi
   b808c:	4613      	movhi	r3, r2
{
   b808e:	4614      	mov	r4, r2
   b8090:	4606      	mov	r6, r0
	if (left > right) {
   b8092:	bf84      	itt	hi
   b8094:	462c      	movhi	r4, r5
   b8096:	461d      	movhi	r5, r3
	String out;
   b8098:	f7ff ff31 	bl	b7efe <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b809c:	68bb      	ldr	r3, [r7, #8]
   b809e:	42a3      	cmp	r3, r4
   b80a0:	d30a      	bcc.n	b80b8 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b80a2:	6839      	ldr	r1, [r7, #0]
   b80a4:	42ab      	cmp	r3, r5
   b80a6:	bf94      	ite	ls
   b80a8:	ebc4 0203 	rsbls	r2, r4, r3
   b80ac:	ebc4 0205 	rsbhi	r2, r4, r5
   b80b0:	4421      	add	r1, r4
   b80b2:	4630      	mov	r0, r6
   b80b4:	f7ff ff0a 	bl	b7ecc <_ZN6String4copyEPKcj>
	return out;
}
   b80b8:	4630      	mov	r0, r6
   b80ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b80bc:	000b99dc 	.word	0x000b99dc

000b80c0 <_ZNK6String9substringEj>:
{
   b80c0:	b510      	push	{r4, lr}
   b80c2:	4604      	mov	r4, r0
	return substring(left, len);
   b80c4:	688b      	ldr	r3, [r1, #8]
   b80c6:	f7ff ffdb 	bl	b8080 <_ZNK6String9substringEjj>
}
   b80ca:	4620      	mov	r0, r4
   b80cc:	bd10      	pop	{r4, pc}

000b80ce <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
   b80ce:	b538      	push	{r3, r4, r5, lr}
   b80d0:	4604      	mov	r4, r0
   b80d2:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
   b80d4:	68a3      	ldr	r3, [r4, #8]
   b80d6:	428b      	cmp	r3, r1
   b80d8:	d911      	bls.n	b80fe <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
   b80da:	b182      	cbz	r2, b80fe <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
   b80dc:	4411      	add	r1, r2
   b80de:	428b      	cmp	r3, r1
   b80e0:	bf38      	it	cc
   b80e2:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
   b80e4:	6825      	ldr	r5, [r4, #0]
	len = len - count;
   b80e6:	1a99      	subs	r1, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
   b80e8:	1813      	adds	r3, r2, r0
	len = len - count;
   b80ea:	60a1      	str	r1, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
   b80ec:	1a0a      	subs	r2, r1, r0
   b80ee:	18e9      	adds	r1, r5, r3
   b80f0:	4428      	add	r0, r5
   b80f2:	f001 fa77 	bl	b95e4 <memmove>
	buffer[len] = 0;
   b80f6:	6822      	ldr	r2, [r4, #0]
   b80f8:	68a3      	ldr	r3, [r4, #8]
   b80fa:	2100      	movs	r1, #0
   b80fc:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   b80fe:	4620      	mov	r0, r4
   b8100:	bd38      	pop	{r3, r4, r5, pc}

000b8102 <_ZN6String6removeEj>:
        int count = len - index;
   b8102:	6882      	ldr	r2, [r0, #8]
        return remove(index, count);
   b8104:	1a52      	subs	r2, r2, r1
   b8106:	f7ff bfe2 	b.w	b80ce <_ZN6String6removeEjj>

000b810a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b810a:	b507      	push	{r0, r1, r2, lr}
   b810c:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b810e:	2100      	movs	r1, #0
{
   b8110:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8112:	9100      	str	r1, [sp, #0]
   b8114:	2001      	movs	r0, #1
   b8116:	218c      	movs	r1, #140	; 0x8c
   b8118:	f7fe f81e 	bl	b6158 <system_reset>
}
   b811c:	b003      	add	sp, #12
   b811e:	f85d fb04 	ldr.w	pc, [sp], #4

000b8122 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b8122:	4601      	mov	r1, r0
    reset(0, flags);
   b8124:	2000      	movs	r0, #0
   b8126:	f7ff bff0 	b.w	b810a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b812a <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b812a:	2000      	movs	r0, #0
   b812c:	f7ff bff9 	b.w	b8122 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000b8130 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   b8130:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8132:	4b09      	ldr	r3, [pc, #36]	; (b8158 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8134:	4c09      	ldr	r4, [pc, #36]	; (b815c <_GLOBAL__sub_I_System+0x2c>)
   b8136:	2202      	movs	r2, #2
   b8138:	601a      	str	r2, [r3, #0]
   b813a:	2000      	movs	r0, #0
    SleepResult() {}
   b813c:	4b08      	ldr	r3, [pc, #32]	; (b8160 <_GLOBAL__sub_I_System+0x30>)
   b813e:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8140:	e9c4 0000 	strd	r0, r0, [r4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8144:	f7fd ffc4 	bl	b60d0 <set_system_mode>
SystemClass System;
   b8148:	4620      	mov	r0, r4
   b814a:	4a06      	ldr	r2, [pc, #24]	; (b8164 <_GLOBAL__sub_I_System+0x34>)
   b814c:	4906      	ldr	r1, [pc, #24]	; (b8168 <_GLOBAL__sub_I_System+0x38>)
   b814e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   b8152:	f000 be8d 	b.w	b8e70 <__aeabi_atexit>
   b8156:	bf00      	nop
   b8158:	2003e66c 	.word	0x2003e66c
   b815c:	2003e660 	.word	0x2003e660
   b8160:	ffff0000 	.word	0xffff0000
   b8164:	2003da58 	.word	0x2003da58
   b8168:	000b4155 	.word	0x000b4155

000b816c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b816c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b816e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b8170:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8174:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8176:	2201      	movs	r2, #1
   b8178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b817c:	f10d 0107 	add.w	r1, sp, #7
   b8180:	47a0      	blx	r4
}
   b8182:	b002      	add	sp, #8
   b8184:	bd10      	pop	{r4, pc}

000b8186 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b8186:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8188:	6803      	ldr	r3, [r0, #0]
   b818a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b818c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8190:	46a4      	mov	ip, r4
}
   b8192:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8196:	4760      	bx	ip

000b8198 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8198:	b513      	push	{r0, r1, r4, lr}
   b819a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b819c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b819e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b81a2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b81a4:	f10d 0107 	add.w	r1, sp, #7
   b81a8:	2201      	movs	r2, #1
   b81aa:	47a0      	blx	r4
}
   b81ac:	b002      	add	sp, #8
   b81ae:	bd10      	pop	{r4, pc}

000b81b0 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b81b0:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b81b2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b81b4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b81b8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b81bc:	429a      	cmp	r2, r3
int TCPClient::read() {
   b81be:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b81c0:	d008      	beq.n	b81d4 <_ZN9TCPClient4readEv+0x24>
   b81c2:	6963      	ldr	r3, [r4, #20]
   b81c4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b81c8:	1c51      	adds	r1, r2, #1
   b81ca:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b81ce:	4413      	add	r3, r2
   b81d0:	7918      	ldrb	r0, [r3, #4]
}
   b81d2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b81d4:	6803      	ldr	r3, [r0, #0]
   b81d6:	691b      	ldr	r3, [r3, #16]
   b81d8:	4798      	blx	r3
   b81da:	2800      	cmp	r0, #0
   b81dc:	d1f1      	bne.n	b81c2 <_ZN9TCPClient4readEv+0x12>
   b81de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b81e2:	e7f6      	b.n	b81d2 <_ZN9TCPClient4readEv+0x22>

000b81e4 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b81e4:	4770      	bx	lr

000b81e6 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b81e6:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b81e8:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b81ea:	43c0      	mvns	r0, r0
   b81ec:	0fc0      	lsrs	r0, r0, #31
   b81ee:	4770      	bx	lr

000b81f0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b81f0:	4770      	bx	lr
	...

000b81f4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b81f4:	4b06      	ldr	r3, [pc, #24]	; (b8210 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b81f6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b81f8:	b510      	push	{r4, lr}
   b81fa:	f100 040c 	add.w	r4, r0, #12
	    ||
   b81fe:	d005      	beq.n	b820c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8200:	4608      	mov	r0, r1
   b8202:	f000 fe43 	bl	b8e8c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8206:	2800      	cmp	r0, #0
   b8208:	bf08      	it	eq
   b820a:	2400      	moveq	r4, #0
      }
   b820c:	4620      	mov	r0, r4
   b820e:	bd10      	pop	{r4, pc}
   b8210:	000ba0dc 	.word	0x000ba0dc

000b8214 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8214:	b510      	push	{r4, lr}
   b8216:	21ac      	movs	r1, #172	; 0xac
   b8218:	4604      	mov	r4, r0
   b821a:	f000 fe2e 	bl	b8e7a <_ZdlPvj>
   b821e:	4620      	mov	r0, r4
   b8220:	bd10      	pop	{r4, pc}

000b8222 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b8222:	21ac      	movs	r1, #172	; 0xac
   b8224:	f000 be29 	b.w	b8e7a <_ZdlPvj>

000b8228 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b8228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b822c:	f04f 0800 	mov.w	r8, #0
   b8230:	b086      	sub	sp, #24
   b8232:	461c      	mov	r4, r3
   b8234:	f8c0 8004 	str.w	r8, [r0, #4]
   b8238:	4605      	mov	r5, r0
   b823a:	460e      	mov	r6, r1
   b823c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b823e:	4641      	mov	r1, r8
   b8240:	2210      	movs	r2, #16
   b8242:	a802      	add	r0, sp, #8
   b8244:	f001 f9e8 	bl	b9618 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b8248:	1c63      	adds	r3, r4, #1
   b824a:	d009      	beq.n	b8260 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b824c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8250:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b8254:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b8258:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b825c:	435c      	muls	r4, r3
   b825e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b8260:	6968      	ldr	r0, [r5, #20]
   b8262:	2310      	movs	r3, #16
   b8264:	9300      	str	r3, [sp, #0]
   b8266:	6800      	ldr	r0, [r0, #0]
   b8268:	ab02      	add	r3, sp, #8
   b826a:	f241 0205 	movw	r2, #4101	; 0x1005
   b826e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8272:	f7fd fe15 	bl	b5ea0 <sock_setsockopt>
    if (ret < 0) {
   b8276:	2800      	cmp	r0, #0
   b8278:	da07      	bge.n	b828a <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b827a:	f7fe f847 	bl	b630c <__errno>
   b827e:	6803      	ldr	r3, [r0, #0]
   b8280:	606b      	str	r3, [r5, #4]
        return 0;
   b8282:	2000      	movs	r0, #0
}
   b8284:	b006      	add	sp, #24
   b8286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b828a:	6968      	ldr	r0, [r5, #20]
   b828c:	2300      	movs	r3, #0
   b828e:	6800      	ldr	r0, [r0, #0]
   b8290:	463a      	mov	r2, r7
   b8292:	4631      	mov	r1, r6
   b8294:	f7fd fe24 	bl	b5ee0 <sock_send>
    if (ret < 0) {
   b8298:	1e03      	subs	r3, r0, #0
   b829a:	dbee      	blt.n	b827a <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b829c:	4618      	mov	r0, r3
   b829e:	e7f1      	b.n	b8284 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b82a0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b82a0:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b82a2:	6984      	ldr	r4, [r0, #24]
   b82a4:	4b0a      	ldr	r3, [pc, #40]	; (b82d0 <_ZN9TCPClientD1Ev+0x30>)
   b82a6:	6003      	str	r3, [r0, #0]
   b82a8:	4605      	mov	r5, r0
   b82aa:	b17c      	cbz	r4, b82cc <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b82ac:	6863      	ldr	r3, [r4, #4]
   b82ae:	3b01      	subs	r3, #1
   b82b0:	6063      	str	r3, [r4, #4]
   b82b2:	b95b      	cbnz	r3, b82cc <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b82b4:	6823      	ldr	r3, [r4, #0]
   b82b6:	4620      	mov	r0, r4
   b82b8:	689b      	ldr	r3, [r3, #8]
   b82ba:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b82bc:	68a3      	ldr	r3, [r4, #8]
   b82be:	3b01      	subs	r3, #1
   b82c0:	60a3      	str	r3, [r4, #8]
   b82c2:	b91b      	cbnz	r3, b82cc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b82c4:	6823      	ldr	r3, [r4, #0]
   b82c6:	4620      	mov	r0, r4
   b82c8:	68db      	ldr	r3, [r3, #12]
   b82ca:	4798      	blx	r3
   b82cc:	4628      	mov	r0, r5
   b82ce:	bd38      	pop	{r3, r4, r5, pc}
   b82d0:	000ba218 	.word	0x000ba218

000b82d4 <_ZN9TCPClientD0Ev>:
   b82d4:	b510      	push	{r4, lr}
   b82d6:	4604      	mov	r4, r0
   b82d8:	f7ff ffe2 	bl	b82a0 <_ZN9TCPClientD1Ev>
   b82dc:	4620      	mov	r0, r4
   b82de:	211c      	movs	r1, #28
   b82e0:	f000 fdcb 	bl	b8e7a <_ZdlPvj>
   b82e4:	4620      	mov	r0, r4
   b82e6:	bd10      	pop	{r4, pc}

000b82e8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b82e8:	b530      	push	{r4, r5, lr}
   b82ea:	b087      	sub	sp, #28
   b82ec:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b82ee:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b82f0:	4668      	mov	r0, sp
   b82f2:	f7ff fba7 	bl	b7a44 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b82f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b82f8:	3404      	adds	r4, #4
   b82fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b82fc:	682b      	ldr	r3, [r5, #0]
   b82fe:	7023      	strb	r3, [r4, #0]
    }
   b8300:	b007      	add	sp, #28
   b8302:	bd30      	pop	{r4, r5, pc}

000b8304 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b8304:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b8306:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b8308:	4b05      	ldr	r3, [pc, #20]	; (b8320 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b830a:	4604      	mov	r4, r0
   b830c:	358c      	adds	r5, #140	; 0x8c
   b830e:	f844 3b04 	str.w	r3, [r4], #4
   b8312:	4606      	mov	r6, r0
   b8314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8318:	682b      	ldr	r3, [r5, #0]
   b831a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b831c:	4630      	mov	r0, r6
   b831e:	bd70      	pop	{r4, r5, r6, pc}
   b8320:	000ba188 	.word	0x000ba188

000b8324 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8328:	4698      	mov	r8, r3
    stop();
   b832a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b832c:	b093      	sub	sp, #76	; 0x4c
   b832e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b8330:	2400      	movs	r4, #0
    stop();
   b8332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8334:	4606      	mov	r6, r0
   b8336:	4617      	mov	r7, r2
    stop();
   b8338:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b833a:	4628      	mov	r0, r5
   b833c:	466b      	mov	r3, sp
   b833e:	4622      	mov	r2, r4
   b8340:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b8342:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8344:	f7fd fda4 	bl	b5e90 <netdb_getaddrinfo>
   b8348:	4605      	mov	r5, r0
   b834a:	2800      	cmp	r0, #0
   b834c:	d163      	bne.n	b8416 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b834e:	9b00      	ldr	r3, [sp, #0]
   b8350:	2b00      	cmp	r3, #0
   b8352:	d04b      	beq.n	b83ec <_ZN9TCPClient7connectEPKctm+0xc8>
   b8354:	695b      	ldr	r3, [r3, #20]
   b8356:	2b00      	cmp	r3, #0
   b8358:	d048      	beq.n	b83ec <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b835a:	a806      	add	r0, sp, #24
   b835c:	f7ff fb2e 	bl	b79bc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8360:	9b00      	ldr	r3, [sp, #0]
   b8362:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b8364:	7863      	ldrb	r3, [r4, #1]
   b8366:	2b02      	cmp	r3, #2
   b8368:	d104      	bne.n	b8374 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b836a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b836c:	a806      	add	r0, sp, #24
   b836e:	f7ff ffbb 	bl	b82e8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b8372:	e026      	b.n	b83c2 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b8374:	2b0a      	cmp	r3, #10
   b8376:	d124      	bne.n	b83c2 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b8378:	2211      	movs	r2, #17
   b837a:	4629      	mov	r1, r5
   b837c:	a801      	add	r0, sp, #4
   b837e:	f001 f94b 	bl	b9618 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8382:	68a3      	ldr	r3, [r4, #8]
   b8384:	2b00      	cmp	r3, #0
   b8386:	d038      	beq.n	b83fa <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8388:	f104 0308 	add.w	r3, r4, #8
   b838c:	f10d 0c04 	add.w	ip, sp, #4
   b8390:	3418      	adds	r4, #24
   b8392:	6818      	ldr	r0, [r3, #0]
   b8394:	6859      	ldr	r1, [r3, #4]
   b8396:	4662      	mov	r2, ip
   b8398:	c203      	stmia	r2!, {r0, r1}
   b839a:	3308      	adds	r3, #8
   b839c:	42a3      	cmp	r3, r4
   b839e:	4694      	mov	ip, r2
   b83a0:	d1f7      	bne.n	b8392 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b83a2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b83a4:	a901      	add	r1, sp, #4
   b83a6:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b83a8:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b83ac:	f7ff fb14 	bl	b79d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b83b0:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b83b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b83b8:	ac07      	add	r4, sp, #28
   b83ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b83bc:	f8dc 3000 	ldr.w	r3, [ip]
   b83c0:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b83c2:	a806      	add	r0, sp, #24
   b83c4:	f7ff fb1a 	bl	b79fc <_ZNK9IPAddresscvbEv>
        if (addr) {
   b83c8:	b180      	cbz	r0, b83ec <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b83ca:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b83cc:	ad07      	add	r5, sp, #28
   b83ce:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b83d2:	4b12      	ldr	r3, [pc, #72]	; (b841c <_ZN9TCPClient7connectEPKctm+0xf8>)
   b83d4:	930c      	str	r3, [sp, #48]	; 0x30
   b83d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b83d8:	ac0d      	add	r4, sp, #52	; 0x34
   b83da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b83dc:	682b      	ldr	r3, [r5, #0]
   b83de:	7023      	strb	r3, [r4, #0]
   b83e0:	463a      	mov	r2, r7
   b83e2:	4643      	mov	r3, r8
   b83e4:	a90c      	add	r1, sp, #48	; 0x30
   b83e6:	4630      	mov	r0, r6
   b83e8:	47c8      	blx	r9
   b83ea:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b83ec:	9800      	ldr	r0, [sp, #0]
   b83ee:	f7fd fd47 	bl	b5e80 <netdb_freeaddrinfo>
}
   b83f2:	4628      	mov	r0, r5
   b83f4:	b013      	add	sp, #76	; 0x4c
   b83f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b83fa:	68e3      	ldr	r3, [r4, #12]
   b83fc:	2b00      	cmp	r3, #0
   b83fe:	d1c3      	bne.n	b8388 <_ZN9TCPClient7connectEPKctm+0x64>
   b8400:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b8404:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b8408:	f7fd fd2a 	bl	b5e60 <inet_htonl>
   b840c:	4581      	cmp	r9, r0
   b840e:	d1bb      	bne.n	b8388 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b8410:	f104 0114 	add.w	r1, r4, #20
   b8414:	e7aa      	b.n	b836c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8416:	4625      	mov	r5, r4
   b8418:	e7e8      	b.n	b83ec <_ZN9TCPClient7connectEPKctm+0xc8>
   b841a:	bf00      	nop
   b841c:	000ba188 	.word	0x000ba188

000b8420 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b8420:	b538      	push	{r3, r4, r5, lr}
   b8422:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b8424:	681a      	ldr	r2, [r3, #0]
   b8426:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b8428:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b842a:	da10      	bge.n	b844e <_ZN9TCPClient9connectedEv+0x2e>
   b842c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8430:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8434:	429a      	cmp	r2, r3
   b8436:	d10a      	bne.n	b844e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b8438:	6803      	ldr	r3, [r0, #0]
   b843a:	691b      	ldr	r3, [r3, #16]
   b843c:	4798      	blx	r3
        if (!rv) {
   b843e:	4604      	mov	r4, r0
   b8440:	b928      	cbnz	r0, b844e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b8442:	682b      	ldr	r3, [r5, #0]
   b8444:	4628      	mov	r0, r5
   b8446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8448:	4798      	blx	r3
        rv = available();
   b844a:	4620      	mov	r0, r4
}
   b844c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b844e:	2001      	movs	r0, #1
   b8450:	e7fc      	b.n	b844c <_ZN9TCPClient9connectedEv+0x2c>

000b8452 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b8452:	b510      	push	{r4, lr}
   b8454:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8456:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b845a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b845e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b8460:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8462:	d005      	beq.n	b8470 <_ZN9TCPClient4peekEv+0x1e>
   b8464:	6963      	ldr	r3, [r4, #20]
   b8466:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b846a:	4413      	add	r3, r2
   b846c:	7918      	ldrb	r0, [r3, #4]
}
   b846e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8470:	6803      	ldr	r3, [r0, #0]
   b8472:	691b      	ldr	r3, [r3, #16]
   b8474:	4798      	blx	r3
   b8476:	2800      	cmp	r0, #0
   b8478:	d1f4      	bne.n	b8464 <_ZN9TCPClient4peekEv+0x12>
   b847a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b847e:	e7f6      	b.n	b846e <_ZN9TCPClient4peekEv+0x1c>

000b8480 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8482:	6943      	ldr	r3, [r0, #20]
   b8484:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b8486:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b848a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b848e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8490:	4605      	mov	r5, r0
   b8492:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b8494:	d016      	beq.n	b84c4 <_ZN9TCPClient4readEPhj+0x44>
   b8496:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b8498:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b849c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b84a0:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b84a2:	42bc      	cmp	r4, r7
   b84a4:	bf28      	it	cs
   b84a6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b84a8:	3304      	adds	r3, #4
   b84aa:	4622      	mov	r2, r4
   b84ac:	4419      	add	r1, r3
   b84ae:	4630      	mov	r0, r6
   b84b0:	f001 f88a 	bl	b95c8 <memcpy>
   b84b4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b84b6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b84ba:	4423      	add	r3, r4
   b84bc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b84c0:	4620      	mov	r0, r4
   b84c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b84c4:	6803      	ldr	r3, [r0, #0]
   b84c6:	691b      	ldr	r3, [r3, #16]
   b84c8:	4798      	blx	r3
   b84ca:	2800      	cmp	r0, #0
   b84cc:	d1e3      	bne.n	b8496 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b84ce:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b84d2:	e7f5      	b.n	b84c0 <_ZN9TCPClient4readEPhj+0x40>

000b84d4 <_ZN9TCPClient12flush_bufferEv>:
   b84d4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b84d6:	2300      	movs	r3, #0
   b84d8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b84dc:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b84de:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b84e2:	4770      	bx	lr

000b84e4 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b84e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b84e8:	461f      	mov	r7, r3
    stop();
   b84ea:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b84ec:	460c      	mov	r4, r1
    stop();
   b84ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b84f0:	b08a      	sub	sp, #40	; 0x28
   b84f2:	4605      	mov	r5, r0
   b84f4:	4616      	mov	r6, r2
    stop();
   b84f6:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b84f8:	7d23      	ldrb	r3, [r4, #20]
   b84fa:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b84fe:	2b04      	cmp	r3, #4
   b8500:	bf0c      	ite	eq
   b8502:	2002      	moveq	r0, #2
   b8504:	200a      	movne	r0, #10
   b8506:	2206      	movs	r2, #6
   b8508:	2101      	movs	r1, #1
   b850a:	f7fd fcf1 	bl	b5ef0 <sock_socket>
   b850e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b8512:	696b      	ldr	r3, [r5, #20]
   b8514:	681b      	ldr	r3, [r3, #0]
   b8516:	2b00      	cmp	r3, #0
   b8518:	da08      	bge.n	b852c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b851a:	682b      	ldr	r3, [r5, #0]
   b851c:	4628      	mov	r0, r5
   b851e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8520:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b8522:	4798      	blx	r3
}
   b8524:	4620      	mov	r0, r4
   b8526:	b00a      	add	sp, #40	; 0x28
   b8528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b852c:	4628      	mov	r0, r5
   b852e:	f7ff ffd1 	bl	b84d4 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b8532:	b1b7      	cbz	r7, b8562 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b8534:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8536:	a903      	add	r1, sp, #12
   b8538:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b853a:	9303      	str	r3, [sp, #12]
   b853c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8540:	f7fd fc7e 	bl	b5e40 <if_index_to_name>
   b8544:	2800      	cmp	r0, #0
   b8546:	d1e8      	bne.n	b851a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b8548:	6968      	ldr	r0, [r5, #20]
   b854a:	2306      	movs	r3, #6
   b854c:	9300      	str	r3, [sp, #0]
   b854e:	6800      	ldr	r0, [r0, #0]
   b8550:	ab03      	add	r3, sp, #12
   b8552:	f241 020b 	movw	r2, #4107	; 0x100b
   b8556:	f640 71ff 	movw	r1, #4095	; 0xfff
   b855a:	f7fd fca1 	bl	b5ea0 <sock_setsockopt>
   b855e:	2800      	cmp	r0, #0
   b8560:	d1db      	bne.n	b851a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b8562:	221c      	movs	r2, #28
   b8564:	2100      	movs	r1, #0
   b8566:	a803      	add	r0, sp, #12
   b8568:	f001 f856 	bl	b9618 <memset>
    if (ip.version() == 4) {
   b856c:	7d23      	ldrb	r3, [r4, #20]
   b856e:	2b04      	cmp	r3, #4
   b8570:	d11d      	bne.n	b85ae <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b8572:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b8576:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b8578:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b857c:	f7fd fc78 	bl	b5e70 <inet_htons>
   b8580:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b8584:	6860      	ldr	r0, [r4, #4]
   b8586:	f7fd fc6b 	bl	b5e60 <inet_htonl>
   b858a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b858c:	696b      	ldr	r3, [r5, #20]
   b858e:	221c      	movs	r2, #28
   b8590:	6818      	ldr	r0, [r3, #0]
   b8592:	a903      	add	r1, sp, #12
   b8594:	f7fd fc94 	bl	b5ec0 <sock_connect>
   b8598:	2800      	cmp	r0, #0
   b859a:	d1be      	bne.n	b851a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b859c:	3404      	adds	r4, #4
   b859e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b85a0:	696d      	ldr	r5, [r5, #20]
   b85a2:	358c      	adds	r5, #140	; 0x8c
   b85a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b85a6:	6823      	ldr	r3, [r4, #0]
   b85a8:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b85aa:	2401      	movs	r4, #1
   b85ac:	e7ba      	b.n	b8524 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b85ae:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b85b2:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b85b4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b85b8:	f7fd fc5a 	bl	b5e70 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b85bc:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b85be:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b85c2:	1d23      	adds	r3, r4, #4
   b85c4:	f104 0714 	add.w	r7, r4, #20
   b85c8:	6818      	ldr	r0, [r3, #0]
   b85ca:	6859      	ldr	r1, [r3, #4]
   b85cc:	4632      	mov	r2, r6
   b85ce:	c203      	stmia	r2!, {r0, r1}
   b85d0:	3308      	adds	r3, #8
   b85d2:	42bb      	cmp	r3, r7
   b85d4:	4616      	mov	r6, r2
   b85d6:	d1f7      	bne.n	b85c8 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b85d8:	e7d8      	b.n	b858c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b85dc <_ZN9TCPClient9availableEv>:
{
   b85dc:	b530      	push	{r4, r5, lr}
   b85de:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b85e0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b85e4:	b08b      	sub	sp, #44	; 0x2c
   b85e6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b85e8:	b12b      	cbz	r3, b85f6 <_ZN9TCPClient9availableEv+0x1a>
   b85ea:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b85ee:	429a      	cmp	r2, r3
   b85f0:	d101      	bne.n	b85f6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b85f2:	f7ff ff6f 	bl	b84d4 <_ZN9TCPClient12flush_bufferEv>
   b85f6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b85f8:	6808      	ldr	r0, [r1, #0]
   b85fa:	2800      	cmp	r0, #0
   b85fc:	db18      	blt.n	b8630 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b85fe:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b8602:	2d7f      	cmp	r5, #127	; 0x7f
   b8604:	d814      	bhi.n	b8630 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b8606:	3104      	adds	r1, #4
   b8608:	2308      	movs	r3, #8
   b860a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b860e:	4429      	add	r1, r5
   b8610:	f7fd fc5e 	bl	b5ed0 <sock_recv>
            if (ret > 0) {
   b8614:	2800      	cmp	r0, #0
   b8616:	dd13      	ble.n	b8640 <_ZN9TCPClient9availableEv+0x64>
   b8618:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b861a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b861e:	b90a      	cbnz	r2, b8624 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b8620:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b8624:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b8626:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b862a:	4410      	add	r0, r2
   b862c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b8630:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b8632:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b8636:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b863a:	1ac0      	subs	r0, r0, r3
   b863c:	b00b      	add	sp, #44	; 0x2c
   b863e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b8640:	f7fd fe64 	bl	b630c <__errno>
   b8644:	6803      	ldr	r3, [r0, #0]
   b8646:	2b0b      	cmp	r3, #11
   b8648:	d0f2      	beq.n	b8630 <_ZN9TCPClient9availableEv+0x54>
   b864a:	f7fd fe5f 	bl	b630c <__errno>
   b864e:	6803      	ldr	r3, [r0, #0]
   b8650:	2b0b      	cmp	r3, #11
   b8652:	d0ed      	beq.n	b8630 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b8654:	2320      	movs	r3, #32
   b8656:	2500      	movs	r5, #0
   b8658:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b865c:	f7fd fe56 	bl	b630c <__errno>
   b8660:	6803      	ldr	r3, [r0, #0]
   b8662:	9301      	str	r3, [sp, #4]
   b8664:	4b08      	ldr	r3, [pc, #32]	; (b8688 <_ZN9TCPClient9availableEv+0xac>)
   b8666:	4909      	ldr	r1, [pc, #36]	; (b868c <_ZN9TCPClient9availableEv+0xb0>)
   b8668:	9300      	str	r3, [sp, #0]
   b866a:	aa02      	add	r2, sp, #8
   b866c:	462b      	mov	r3, r5
   b866e:	2032      	movs	r0, #50	; 0x32
   b8670:	f7fd fd1e 	bl	b60b0 <log_message>
                    sock_close(d_->sock);
   b8674:	6963      	ldr	r3, [r4, #20]
   b8676:	6818      	ldr	r0, [r3, #0]
   b8678:	f7fd fc1a 	bl	b5eb0 <sock_close>
   b867c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b867e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8682:	601a      	str	r2, [r3, #0]
   b8684:	e7d4      	b.n	b8630 <_ZN9TCPClient9availableEv+0x54>
   b8686:	bf00      	nop
   b8688:	000ba1e3 	.word	0x000ba1e3
   b868c:	000ba1dc 	.word	0x000ba1dc

000b8690 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b8690:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b8692:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b8694:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b8696:	6818      	ldr	r0, [r3, #0]
   b8698:	2800      	cmp	r0, #0
   b869a:	db01      	blt.n	b86a0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b869c:	f7fd fc08 	bl	b5eb0 <sock_close>
   b86a0:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b86a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b86a6:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b86a8:	6960      	ldr	r0, [r4, #20]
   b86aa:	2211      	movs	r2, #17
   b86ac:	2100      	movs	r1, #0
   b86ae:	308c      	adds	r0, #140	; 0x8c
   b86b0:	f000 ffb2 	bl	b9618 <memset>
    flush_buffer();
   b86b4:	4620      	mov	r0, r4
}
   b86b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b86ba:	f7ff bf0b 	b.w	b84d4 <_ZN9TCPClient12flush_bufferEv>

000b86be <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b86be:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b86c0:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b86c2:	4604      	mov	r4, r0
          total(0) {
   b86c4:	6001      	str	r1, [r0, #0]
   b86c6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b86ca:	3088      	adds	r0, #136	; 0x88
   b86cc:	f7ff f976 	bl	b79bc <_ZN9IPAddressC1Ev>
}
   b86d0:	4620      	mov	r0, r4
   b86d2:	bd10      	pop	{r4, pc}

000b86d4 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b86d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b86d6:	2300      	movs	r3, #0
   b86d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b86dc:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b86e0:	4a0e      	ldr	r2, [pc, #56]	; (b871c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b86e2:	6103      	str	r3, [r0, #16]
   b86e4:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b86e6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b86e8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b86ea:	20ac      	movs	r0, #172	; 0xac
   b86ec:	9101      	str	r1, [sp, #4]
   b86ee:	f7fb fcd2 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b86f2:	1e05      	subs	r5, r0, #0
   b86f4:	f105 060c 	add.w	r6, r5, #12
   b86f8:	d008      	beq.n	b870c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b86fa:	2301      	movs	r3, #1
   b86fc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8700:	4b07      	ldr	r3, [pc, #28]	; (b8720 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8702:	9901      	ldr	r1, [sp, #4]
   b8704:	602b      	str	r3, [r5, #0]
   b8706:	4630      	mov	r0, r6
   b8708:	f7ff ffd9 	bl	b86be <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b870c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b870e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b8712:	f7ff fedf 	bl	b84d4 <_ZN9TCPClient12flush_bufferEv>
}
   b8716:	b002      	add	sp, #8
   b8718:	bd70      	pop	{r4, r5, r6, pc}
   b871a:	bf00      	nop
   b871c:	000ba218 	.word	0x000ba218
   b8720:	000ba1fc 	.word	0x000ba1fc

000b8724 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b8724:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b8726:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b872a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b872c:	f7ff ffd2 	bl	b86d4 <_ZN9TCPClientC1Ei>
}
   b8730:	4620      	mov	r0, r4
   b8732:	bd10      	pop	{r4, pc}

000b8734 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b8734:	b510      	push	{r4, lr}
   b8736:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b8738:	6800      	ldr	r0, [r0, #0]
   b873a:	2800      	cmp	r0, #0
   b873c:	db01      	blt.n	b8742 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b873e:	f7fd fbb7 	bl	b5eb0 <sock_close>
    }
}
   b8742:	4620      	mov	r0, r4
   b8744:	bd10      	pop	{r4, pc}

000b8746 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b8746:	300c      	adds	r0, #12
   b8748:	f7ff bff4 	b.w	b8734 <_ZN9TCPClient4DataD1Ev>

000b874c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b874c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b874e:	2000      	movs	r0, #0
   b8750:	f7fd fd2c 	bl	b61ac <spark_sync_time_pending>
   b8754:	b128      	cbz	r0, b8762 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8756:	f7fd fd19 	bl	b618c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b875a:	f080 0001 	eor.w	r0, r0, #1
   b875e:	b2c0      	uxtb	r0, r0
    }
   b8760:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8762:	2001      	movs	r0, #1
   b8764:	e7fc      	b.n	b8760 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b8768 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b8768:	b530      	push	{r4, r5, lr}
   b876a:	b093      	sub	sp, #76	; 0x4c
   b876c:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b8770:	4b19      	ldr	r3, [pc, #100]	; (b87d8 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b8772:	4604      	mov	r4, r0
    t += time_zone_cache;
   b8774:	e9d3 1000 	ldrd	r1, r0, [r3]
   b8778:	9b01      	ldr	r3, [sp, #4]
   b877a:	1852      	adds	r2, r2, r1
   b877c:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b8780:	4816      	ldr	r0, [pc, #88]	; (b87dc <_ZN9TimeClass7timeStrEx+0x74>)
   b8782:	e9d0 1000 	ldrd	r1, r0, [r0]
   b8786:	1852      	adds	r2, r2, r1
   b8788:	eb43 0300 	adc.w	r3, r3, r0
   b878c:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b8790:	2224      	movs	r2, #36	; 0x24
   b8792:	eb0d 0002 	add.w	r0, sp, r2
   b8796:	2100      	movs	r1, #0
   b8798:	f000 ff3e 	bl	b9618 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b879c:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b879e:	a909      	add	r1, sp, #36	; 0x24
   b87a0:	4668      	mov	r0, sp
   b87a2:	f7fd fdcb 	bl	b633c <localtime_r>
    char ascstr[26] = {};
   b87a6:	2216      	movs	r2, #22
   b87a8:	4629      	mov	r1, r5
   b87aa:	a803      	add	r0, sp, #12
   b87ac:	9502      	str	r5, [sp, #8]
   b87ae:	f000 ff33 	bl	b9618 <memset>
    asctime_r(&calendar_time, ascstr);
   b87b2:	a902      	add	r1, sp, #8
   b87b4:	a809      	add	r0, sp, #36	; 0x24
   b87b6:	f000 febf 	bl	b9538 <asctime_r>
    int len = strlen(ascstr);
   b87ba:	a802      	add	r0, sp, #8
   b87bc:	f000 ff74 	bl	b96a8 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b87c0:	ab12      	add	r3, sp, #72	; 0x48
   b87c2:	4418      	add	r0, r3
    return String(ascstr);
   b87c4:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b87c6:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b87ca:	4620      	mov	r0, r4
   b87cc:	f7ff fb97 	bl	b7efe <_ZN6StringC1EPK19__FlashStringHelper>
}
   b87d0:	4620      	mov	r0, r4
   b87d2:	b013      	add	sp, #76	; 0x4c
   b87d4:	bd30      	pop	{r4, r5, pc}
   b87d6:	bf00      	nop
   b87d8:	2003e680 	.word	0x2003e680
   b87dc:	2003e678 	.word	0x2003e678

000b87e0 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b87e0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b87e2:	2000      	movs	r0, #0
   b87e4:	f7fd faa4 	bl	b5d30 <hal_rtc_time_is_valid>
    if (rtcstate)
   b87e8:	4604      	mov	r4, r0
   b87ea:	b9a0      	cbnz	r0, b8816 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b87ec:	f7fd fc68 	bl	b60c0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b87f0:	2801      	cmp	r0, #1
   b87f2:	d110      	bne.n	b8816 <_ZN9TimeClass7isValidEv+0x36>
   b87f4:	4620      	mov	r0, r4
   b87f6:	f7fd fc93 	bl	b6120 <system_thread_get_state>
   b87fa:	b960      	cbnz	r0, b8816 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b87fc:	f7ff ffa6 	bl	b874c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b8800:	b910      	cbnz	r0, b8808 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b8802:	f7fd fcb3 	bl	b616c <spark_process>
        while (_while() && !_condition()) {
   b8806:	e7f9      	b.n	b87fc <_ZN9TimeClass7isValidEv+0x1c>
   b8808:	f7ff ffa0 	bl	b874c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b880c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b8810:	2000      	movs	r0, #0
   b8812:	f7fd ba8d 	b.w	b5d30 <hal_rtc_time_is_valid>
}
   b8816:	4620      	mov	r0, r4
   b8818:	bd10      	pop	{r4, pc}

000b881a <_ZN9TimeClass3nowEv>:
{
   b881a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b881c:	f7ff ffe0 	bl	b87e0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b8820:	2210      	movs	r2, #16
   b8822:	2100      	movs	r1, #0
   b8824:	4668      	mov	r0, sp
   b8826:	f000 fef7 	bl	b9618 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b882a:	2100      	movs	r1, #0
   b882c:	4668      	mov	r0, sp
   b882e:	f7fd fa87 	bl	b5d40 <hal_rtc_get_time>
}
   b8832:	9800      	ldr	r0, [sp, #0]
   b8834:	b005      	add	sp, #20
   b8836:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b883c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b883c:	4b02      	ldr	r3, [pc, #8]	; (b8848 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b883e:	681a      	ldr	r2, [r3, #0]
   b8840:	4b02      	ldr	r3, [pc, #8]	; (b884c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b8842:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8844:	4770      	bx	lr
   b8846:	bf00      	nop
   b8848:	2003d9ec 	.word	0x2003d9ec
   b884c:	2003e670 	.word	0x2003e670

000b8850 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   b8850:	4770      	bx	lr

000b8852 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8852:	7441      	strb	r1, [r0, #17]
}
   b8854:	4770      	bx	lr

000b8856 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8856:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8858:	7c00      	ldrb	r0, [r0, #16]
   b885a:	f7fd fbd9 	bl	b6010 <hal_usart_available_data_for_write>
}
   b885e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8862:	bd08      	pop	{r3, pc}

000b8864 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8864:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8866:	7c00      	ldrb	r0, [r0, #16]
   b8868:	f7fd fbaa 	bl	b5fc0 <hal_usart_available>
}
   b886c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8870:	bd08      	pop	{r3, pc}

000b8872 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8872:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8874:	7c00      	ldrb	r0, [r0, #16]
   b8876:	f7fd fbb3 	bl	b5fe0 <hal_usart_peek>
}
   b887a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b887e:	bd08      	pop	{r3, pc}

000b8880 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8880:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8882:	7c00      	ldrb	r0, [r0, #16]
   b8884:	f7fd fba4 	bl	b5fd0 <hal_usart_read>
}
   b8888:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b888c:	bd08      	pop	{r3, pc}

000b888e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b888e:	7c00      	ldrb	r0, [r0, #16]
   b8890:	f7fd bbae 	b.w	b5ff0 <hal_usart_flush>

000b8894 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8894:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8896:	7c45      	ldrb	r5, [r0, #17]
{
   b8898:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b889a:	b12d      	cbz	r5, b88a8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b889c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b889e:	b003      	add	sp, #12
   b88a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b88a4:	f7fd bb84 	b.w	b5fb0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b88a8:	7c00      	ldrb	r0, [r0, #16]
   b88aa:	9101      	str	r1, [sp, #4]
   b88ac:	f7fd fbb0 	bl	b6010 <hal_usart_available_data_for_write>
   b88b0:	2800      	cmp	r0, #0
   b88b2:	9901      	ldr	r1, [sp, #4]
   b88b4:	dcf2      	bgt.n	b889c <_ZN11USARTSerial5writeEh+0x8>
}
   b88b6:	4628      	mov	r0, r5
   b88b8:	b003      	add	sp, #12
   b88ba:	bd30      	pop	{r4, r5, pc}

000b88bc <_ZN11USARTSerialD0Ev>:
   b88bc:	b510      	push	{r4, lr}
   b88be:	2114      	movs	r1, #20
   b88c0:	4604      	mov	r4, r0
   b88c2:	f000 fada 	bl	b8e7a <_ZdlPvj>
   b88c6:	4620      	mov	r0, r4
   b88c8:	bd10      	pop	{r4, pc}
	...

000b88cc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   b88cc:	b510      	push	{r4, lr}
   b88ce:	f04f 0c00 	mov.w	ip, #0
   b88d2:	4604      	mov	r4, r0
   b88d4:	4608      	mov	r0, r1
   b88d6:	4611      	mov	r1, r2
   b88d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b88dc:	e9c4 c201 	strd	ip, r2, [r4, #4]
   b88e0:	4a04      	ldr	r2, [pc, #16]	; (b88f4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   b88e2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   b88e4:	2201      	movs	r2, #1
  _serial = serial;
   b88e6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b88e8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   b88ea:	461a      	mov	r2, r3
   b88ec:	f7fd fb58 	bl	b5fa0 <hal_usart_init>
}
   b88f0:	4620      	mov	r0, r4
   b88f2:	bd10      	pop	{r4, pc}
   b88f4:	000ba280 	.word	0x000ba280

000b88f8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   b88f8:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   b88fa:	4c0e      	ldr	r4, [pc, #56]	; (b8934 <_Z22__fetch_global_Serial1v+0x3c>)
   b88fc:	7821      	ldrb	r1, [r4, #0]
   b88fe:	f3bf 8f5b 	dmb	ish
   b8902:	f011 0101 	ands.w	r1, r1, #1
   b8906:	d112      	bne.n	b892e <_Z22__fetch_global_Serial1v+0x36>
   b8908:	4620      	mov	r0, r4
   b890a:	9101      	str	r1, [sp, #4]
   b890c:	f7fb fbc9 	bl	b40a2 <__cxa_guard_acquire>
   b8910:	9901      	ldr	r1, [sp, #4]
   b8912:	b160      	cbz	r0, b892e <_Z22__fetch_global_Serial1v+0x36>
   b8914:	4a08      	ldr	r2, [pc, #32]	; (b8938 <_Z22__fetch_global_Serial1v+0x40>)
   b8916:	4b09      	ldr	r3, [pc, #36]	; (b893c <_Z22__fetch_global_Serial1v+0x44>)
   b8918:	4809      	ldr	r0, [pc, #36]	; (b8940 <_Z22__fetch_global_Serial1v+0x48>)
   b891a:	f7ff ffd7 	bl	b88cc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   b891e:	4620      	mov	r0, r4
   b8920:	f7fb fbc4 	bl	b40ac <__cxa_guard_release>
   b8924:	4a07      	ldr	r2, [pc, #28]	; (b8944 <_Z22__fetch_global_Serial1v+0x4c>)
   b8926:	4908      	ldr	r1, [pc, #32]	; (b8948 <_Z22__fetch_global_Serial1v+0x50>)
   b8928:	4805      	ldr	r0, [pc, #20]	; (b8940 <_Z22__fetch_global_Serial1v+0x48>)
   b892a:	f000 faa1 	bl	b8e70 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   b892e:	4804      	ldr	r0, [pc, #16]	; (b8940 <_Z22__fetch_global_Serial1v+0x48>)
   b8930:	b002      	add	sp, #8
   b8932:	bd10      	pop	{r4, pc}
   b8934:	2003e688 	.word	0x2003e688
   b8938:	2003e68c 	.word	0x2003e68c
   b893c:	2003e710 	.word	0x2003e710
   b8940:	2003e794 	.word	0x2003e794
   b8944:	2003da58 	.word	0x2003da58
   b8948:	000b8851 	.word	0x000b8851

000b894c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b894c:	7441      	strb	r1, [r0, #17]
}
   b894e:	4770      	bx	lr

000b8950 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8950:	4770      	bx	lr

000b8952 <_ZN9USBSerial4readEv>:
{
   b8952:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8954:	2100      	movs	r1, #0
   b8956:	7c00      	ldrb	r0, [r0, #16]
   b8958:	f7fd fb82 	bl	b6060 <HAL_USB_USART_Receive_Data>
}
   b895c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8960:	bd08      	pop	{r3, pc}

000b8962 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   b8962:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8964:	2101      	movs	r1, #1
   b8966:	7c00      	ldrb	r0, [r0, #16]
   b8968:	f7fd fb7a 	bl	b6060 <HAL_USB_USART_Receive_Data>
}
   b896c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8970:	bd08      	pop	{r3, pc}

000b8972 <_ZN9USBSerial17availableForWriteEv>:
{
   b8972:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8974:	7c00      	ldrb	r0, [r0, #16]
   b8976:	f7fd fb6b 	bl	b6050 <HAL_USB_USART_Available_Data_For_Write>
}
   b897a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b897e:	bd08      	pop	{r3, pc}

000b8980 <_ZN9USBSerial9availableEv>:
{
   b8980:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8982:	7c00      	ldrb	r0, [r0, #16]
   b8984:	f7fd fb5c 	bl	b6040 <HAL_USB_USART_Available_Data>
}
   b8988:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b898c:	bd08      	pop	{r3, pc}

000b898e <_ZN9USBSerial5writeEh>:
{
   b898e:	b513      	push	{r0, r1, r4, lr}
   b8990:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8992:	7c00      	ldrb	r0, [r0, #16]
{
   b8994:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8996:	f7fd fb5b 	bl	b6050 <HAL_USB_USART_Available_Data_For_Write>
   b899a:	2800      	cmp	r0, #0
   b899c:	9901      	ldr	r1, [sp, #4]
   b899e:	dc01      	bgt.n	b89a4 <_ZN9USBSerial5writeEh+0x16>
   b89a0:	7c60      	ldrb	r0, [r4, #17]
   b89a2:	b120      	cbz	r0, b89ae <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b89a4:	7c20      	ldrb	r0, [r4, #16]
   b89a6:	f7fd fb63 	bl	b6070 <HAL_USB_USART_Send_Data>
   b89aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b89ae:	b002      	add	sp, #8
   b89b0:	bd10      	pop	{r4, pc}

000b89b2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b89b2:	7c00      	ldrb	r0, [r0, #16]
   b89b4:	f7fd bb64 	b.w	b6080 <HAL_USB_USART_Flush_Data>

000b89b8 <_ZN9USBSerialD0Ev>:
   b89b8:	b510      	push	{r4, lr}
   b89ba:	2114      	movs	r1, #20
   b89bc:	4604      	mov	r4, r0
   b89be:	f000 fa5c 	bl	b8e7a <_ZdlPvj>
   b89c2:	4620      	mov	r0, r4
   b89c4:	bd10      	pop	{r4, pc}
	...

000b89c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b89c8:	b510      	push	{r4, lr}
   b89ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b89ce:	4604      	mov	r4, r0
   b89d0:	4608      	mov	r0, r1
   b89d2:	2100      	movs	r1, #0
   b89d4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b89d8:	4b04      	ldr	r3, [pc, #16]	; (b89ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b89da:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b89dc:	2301      	movs	r3, #1
  _serial = serial;
   b89de:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b89e0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b89e2:	4611      	mov	r1, r2
   b89e4:	f7fd fb1c 	bl	b6020 <HAL_USB_USART_Init>
}
   b89e8:	4620      	mov	r0, r4
   b89ea:	bd10      	pop	{r4, pc}
   b89ec:	000ba2b0 	.word	0x000ba2b0

000b89f0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b89f0:	7c00      	ldrb	r0, [r0, #16]
   b89f2:	2200      	movs	r2, #0
   b89f4:	f7fd bb1c 	b.w	b6030 <HAL_USB_USART_Begin>

000b89f8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   b89f8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   b89fa:	2214      	movs	r2, #20
{
   b89fc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   b89fe:	2100      	movs	r1, #0
   b8a00:	f000 fe0a 	bl	b9618 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   b8a04:	4620      	mov	r0, r4
   b8a06:	bd10      	pop	{r4, pc}

000b8a08 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   b8a08:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8a0a:	4c10      	ldr	r4, [pc, #64]	; (b8a4c <_Z16_fetch_usbserialv+0x44>)
{
   b8a0c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8a0e:	a803      	add	r0, sp, #12
   b8a10:	f7ff fff2 	bl	b89f8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8a14:	7821      	ldrb	r1, [r4, #0]
   b8a16:	f3bf 8f5b 	dmb	ish
   b8a1a:	f011 0101 	ands.w	r1, r1, #1
   b8a1e:	d111      	bne.n	b8a44 <_Z16_fetch_usbserialv+0x3c>
   b8a20:	4620      	mov	r0, r4
   b8a22:	9101      	str	r1, [sp, #4]
   b8a24:	f7fb fb3d 	bl	b40a2 <__cxa_guard_acquire>
   b8a28:	9901      	ldr	r1, [sp, #4]
   b8a2a:	b158      	cbz	r0, b8a44 <_Z16_fetch_usbserialv+0x3c>
   b8a2c:	aa03      	add	r2, sp, #12
   b8a2e:	4808      	ldr	r0, [pc, #32]	; (b8a50 <_Z16_fetch_usbserialv+0x48>)
   b8a30:	f7ff ffca 	bl	b89c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8a34:	4620      	mov	r0, r4
   b8a36:	f7fb fb39 	bl	b40ac <__cxa_guard_release>
   b8a3a:	4a06      	ldr	r2, [pc, #24]	; (b8a54 <_Z16_fetch_usbserialv+0x4c>)
   b8a3c:	4906      	ldr	r1, [pc, #24]	; (b8a58 <_Z16_fetch_usbserialv+0x50>)
   b8a3e:	4804      	ldr	r0, [pc, #16]	; (b8a50 <_Z16_fetch_usbserialv+0x48>)
   b8a40:	f000 fa16 	bl	b8e70 <__aeabi_atexit>
	return _usbserial;
}
   b8a44:	4802      	ldr	r0, [pc, #8]	; (b8a50 <_Z16_fetch_usbserialv+0x48>)
   b8a46:	b008      	add	sp, #32
   b8a48:	bd10      	pop	{r4, pc}
   b8a4a:	bf00      	nop
   b8a4c:	2003e7a8 	.word	0x2003e7a8
   b8a50:	2003e7ac 	.word	0x2003e7ac
   b8a54:	2003da58 	.word	0x2003da58
   b8a58:	000b8951 	.word	0x000b8951

000b8a5c <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv>:
                results[index++] = *result;
            }
        }

    protected:
        static void callback(WiFiAccessPoint* result, void* cookie)
   b8a5c:	b530      	push	{r4, r5, lr}
            if (index<count) {
   b8a5e:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   b8a62:	4293      	cmp	r3, r2
   b8a64:	da10      	bge.n	b8a88 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv+0x2c>
                results[index++] = *result;
   b8a66:	680d      	ldr	r5, [r1, #0]
   b8a68:	1c5a      	adds	r2, r3, #1
   b8a6a:	604a      	str	r2, [r1, #4]
   b8a6c:	4604      	mov	r4, r0
   b8a6e:	2238      	movs	r2, #56	; 0x38
   b8a70:	fb02 5503 	mla	r5, r2, r3, r5
   b8a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8a76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8a7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8a80:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8a84:	e885 0003 	stmia.w	r5, {r0, r1}
        {
            ((APArrayPopulator*)cookie)->addResult(result);
        }
   b8a88:	bd30      	pop	{r4, r5, pc}

000b8a8a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8a8a:	2200      	movs	r2, #0
   b8a8c:	6840      	ldr	r0, [r0, #4]
   b8a8e:	4611      	mov	r1, r2
   b8a90:	f7fd bbd4 	b.w	b623c <network_listening>

000b8a94 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8a94:	2200      	movs	r2, #0
   b8a96:	6840      	ldr	r0, [r0, #4]
   b8a98:	4611      	mov	r1, r2
   b8a9a:	f7fd bbef 	b.w	b627c <network_get_listen_timeout>

000b8a9e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8a9e:	6840      	ldr	r0, [r0, #4]
   b8aa0:	2200      	movs	r2, #0
   b8aa2:	f7fd bbe3 	b.w	b626c <network_set_listen_timeout>

000b8aa6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8aa6:	6840      	ldr	r0, [r0, #4]
   b8aa8:	2200      	movs	r2, #0
   b8aaa:	f081 0101 	eor.w	r1, r1, #1
   b8aae:	f7fd bbbd 	b.w	b622c <network_listen>

000b8ab2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8ab2:	2200      	movs	r2, #0
   b8ab4:	6840      	ldr	r0, [r0, #4]
   b8ab6:	4611      	mov	r1, r2
   b8ab8:	f7fd bb90 	b.w	b61dc <network_connecting>

000b8abc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8abc:	6840      	ldr	r0, [r0, #4]
   b8abe:	2200      	movs	r2, #0
   b8ac0:	2102      	movs	r1, #2
   b8ac2:	f7fd bb93 	b.w	b61ec <network_disconnect>
	...

000b8ac8 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>:
        APScan apScan(results, result_count);
        return apScan.start();
    }

#if !HAL_PLATFORM_WIFI_SCAN_ONLY
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
   b8ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
            this->index = 0;
   b8aca:	2300      	movs	r3, #0
            this->results = results;
   b8acc:	9101      	str	r1, [sp, #4]
            return std::min(count, wlan_get_credentials(callback, this));
   b8ace:	4806      	ldr	r0, [pc, #24]	; (b8ae8 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj+0x20>)
            this->index = 0;
   b8ad0:	9302      	str	r3, [sp, #8]
            return std::min(count, wlan_get_credentials(callback, this));
   b8ad2:	a901      	add	r1, sp, #4
            this->count = size;
   b8ad4:	9203      	str	r2, [sp, #12]
            return std::min(count, wlan_get_credentials(callback, this));
   b8ad6:	f7fd fadb 	bl	b6090 <wlan_get_credentials>
        APList apList(results, result_count);
        return apList.start();
    }
   b8ada:	9b03      	ldr	r3, [sp, #12]
   b8adc:	4298      	cmp	r0, r3
   b8ade:	bfa8      	it	ge
   b8ae0:	4618      	movge	r0, r3
   b8ae2:	b005      	add	sp, #20
   b8ae4:	f85d fb04 	ldr.w	pc, [sp], #4
   b8ae8:	000b8a5d 	.word	0x000b8a5d

000b8aec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b8aec:	4b02      	ldr	r3, [pc, #8]	; (b8af8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b8aee:	2204      	movs	r2, #4
   b8af0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b8af2:	4a02      	ldr	r2, [pc, #8]	; (b8afc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8af4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b8af6:	4770      	bx	lr
   b8af8:	2003e7c0 	.word	0x2003e7c0
   b8afc:	000ba2e0 	.word	0x000ba2e0

000b8b00 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b8b00:	b510      	push	{r4, lr}
   b8b02:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b8b04:	f000 fdd0 	bl	b96a8 <strlen>
   b8b08:	3801      	subs	r0, #1
   b8b0a:	1823      	adds	r3, r4, r0
   b8b0c:	4620      	mov	r0, r4
	while(i<j){
   b8b0e:	4283      	cmp	r3, r0
   b8b10:	d906      	bls.n	b8b20 <_Z11str_reversePc+0x20>
		c = *i;
   b8b12:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b8b14:	7819      	ldrb	r1, [r3, #0]
   b8b16:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b8b1a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b8b1e:	e7f6      	b.n	b8b0e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b8b20:	bd10      	pop	{r4, pc}

000b8b22 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b8b22:	b570      	push	{r4, r5, r6, lr}
   b8b24:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b8b26:	1e91      	subs	r1, r2, #2
   b8b28:	2922      	cmp	r1, #34	; 0x22
   b8b2a:	d81d      	bhi.n	b8b68 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b8b2c:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b8b2e:	b930      	cbnz	r0, b8b3e <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b8b30:	4423      	add	r3, r4
            *ptr++ = '0';
   b8b32:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b8b34:	429d      	cmp	r5, r3
   b8b36:	d210      	bcs.n	b8b5a <ultoa+0x38>
            *ptr++ = '0';
   b8b38:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b8b3c:	e7fa      	b.n	b8b34 <ultoa+0x12>
            result.quot = a/radix;
   b8b3e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b8b42:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b8b46:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b8b48:	2809      	cmp	r0, #9
                *ptr += '0';
   b8b4a:	bf94      	ite	ls
   b8b4c:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b8b4e:	3157      	addhi	r1, #87	; 0x57
   b8b50:	b2c9      	uxtb	r1, r1
   b8b52:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b8b56:	4630      	mov	r0, r6
	while(a){
   b8b58:	e7e9      	b.n	b8b2e <ultoa+0xc>

	*ptr = '\0';
   b8b5a:	2300      	movs	r3, #0
	str_reverse(buffer);
   b8b5c:	4620      	mov	r0, r4
	*ptr = '\0';
   b8b5e:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b8b60:	f7ff ffce 	bl	b8b00 <_Z11str_reversePc>
	return buffer;
   b8b64:	4620      	mov	r0, r4
}
   b8b66:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b8b68:	2000      	movs	r0, #0
   b8b6a:	e7fc      	b.n	b8b66 <ultoa+0x44>

000b8b6c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8b6c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b8b6e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8b70:	460c      	mov	r4, r1
   b8b72:	4615      	mov	r5, r2
	if(a<0){
   b8b74:	da0e      	bge.n	b8b94 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8b76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b8b7a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8b7e:	bf14      	ite	ne
   b8b80:	4258      	negne	r0, r3
   b8b82:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b8b84:	2301      	movs	r3, #1
		*buffer = '-';
   b8b86:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b8b88:	462a      	mov	r2, r5
   b8b8a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b8b8c:	f7ff ffc9 	bl	b8b22 <ultoa>
	}
	return buffer;
}
   b8b90:	4620      	mov	r0, r4
   b8b92:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b8b94:	2301      	movs	r3, #1
   b8b96:	e7f9      	b.n	b8b8c <itoa+0x20>

000b8b98 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8b98:	4b01      	ldr	r3, [pc, #4]	; (b8ba0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8b9a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8b9c:	4770      	bx	lr
   b8b9e:	bf00      	nop
   b8ba0:	2003d9f0 	.word	0x2003d9f0

000b8ba4 <serialEventRun>:
{
   b8ba4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8ba6:	4b0b      	ldr	r3, [pc, #44]	; (b8bd4 <serialEventRun+0x30>)
   b8ba8:	b143      	cbz	r3, b8bbc <serialEventRun+0x18>
   b8baa:	f7ff ff2d 	bl	b8a08 <_Z16_fetch_usbserialv>
   b8bae:	6803      	ldr	r3, [r0, #0]
   b8bb0:	691b      	ldr	r3, [r3, #16]
   b8bb2:	4798      	blx	r3
   b8bb4:	2800      	cmp	r0, #0
   b8bb6:	dd01      	ble.n	b8bbc <serialEventRun+0x18>
        serialEvent();
   b8bb8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8bbc:	4b06      	ldr	r3, [pc, #24]	; (b8bd8 <serialEventRun+0x34>)
   b8bbe:	b143      	cbz	r3, b8bd2 <serialEventRun+0x2e>
   b8bc0:	f7ff fe9a 	bl	b88f8 <_Z22__fetch_global_Serial1v>
   b8bc4:	6803      	ldr	r3, [r0, #0]
   b8bc6:	691b      	ldr	r3, [r3, #16]
   b8bc8:	4798      	blx	r3
   b8bca:	2800      	cmp	r0, #0
   b8bcc:	dd01      	ble.n	b8bd2 <serialEventRun+0x2e>
        serialEvent1();
   b8bce:	f3af 8000 	nop.w
}
   b8bd2:	bd08      	pop	{r3, pc}
	...

000b8bdc <_post_loop>:
{
   b8bdc:	b508      	push	{r3, lr}
	serialEventRun();
   b8bde:	f7ff ffe1 	bl	b8ba4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8be2:	f7fd f885 	bl	b5cf0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8be6:	4b01      	ldr	r3, [pc, #4]	; (b8bec <_post_loop+0x10>)
   b8be8:	6018      	str	r0, [r3, #0]
}
   b8bea:	bd08      	pop	{r3, pc}
   b8bec:	2003e7d0 	.word	0x2003e7d0

000b8bf0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8bf0:	4805      	ldr	r0, [pc, #20]	; (b8c08 <_Z33system_initialize_user_backup_ramv+0x18>)
   b8bf2:	4a06      	ldr	r2, [pc, #24]	; (b8c0c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8bf4:	4906      	ldr	r1, [pc, #24]	; (b8c10 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8bf6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8bf8:	1a12      	subs	r2, r2, r0
   b8bfa:	f000 fce5 	bl	b95c8 <memcpy>
    __backup_sram_signature = signature;
   b8bfe:	4b05      	ldr	r3, [pc, #20]	; (b8c14 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8c00:	4a05      	ldr	r2, [pc, #20]	; (b8c18 <_Z33system_initialize_user_backup_ramv+0x28>)
   b8c02:	601a      	str	r2, [r3, #0]
}
   b8c04:	bd08      	pop	{r3, pc}
   b8c06:	bf00      	nop
   b8c08:	2003f400 	.word	0x2003f400
   b8c0c:	2003f404 	.word	0x2003f404
   b8c10:	000ba600 	.word	0x000ba600
   b8c14:	2003f400 	.word	0x2003f400
   b8c18:	9a271c1e 	.word	0x9a271c1e

000b8c1c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8c1c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8c1e:	2300      	movs	r3, #0
   b8c20:	9300      	str	r3, [sp, #0]
   b8c22:	461a      	mov	r2, r3
   b8c24:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8c28:	f7fd fa8c 	bl	b6144 <system_ctrl_set_result>
}
   b8c2c:	b003      	add	sp, #12
   b8c2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8c34 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8c34:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b8c36:	8843      	ldrh	r3, [r0, #2]
   b8c38:	2b0a      	cmp	r3, #10
   b8c3a:	d008      	beq.n	b8c4e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8c3c:	2b50      	cmp	r3, #80	; 0x50
   b8c3e:	d10b      	bne.n	b8c58 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8c40:	4b09      	ldr	r3, [pc, #36]	; (b8c68 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8c42:	681b      	ldr	r3, [r3, #0]
   b8c44:	b14b      	cbz	r3, b8c5a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8c46:	b003      	add	sp, #12
   b8c48:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8c4c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8c4e:	f7ff ffe5 	bl	b8c1c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8c52:	b003      	add	sp, #12
   b8c54:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8c58:	2300      	movs	r3, #0
   b8c5a:	9300      	str	r3, [sp, #0]
   b8c5c:	461a      	mov	r2, r3
   b8c5e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8c62:	f7fd fa6f 	bl	b6144 <system_ctrl_set_result>
}
   b8c66:	e7f4      	b.n	b8c52 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8c68:	2003e7cc 	.word	0x2003e7cc

000b8c6c <module_user_init_hook>:
{
   b8c6c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b8c6e:	4812      	ldr	r0, [pc, #72]	; (b8cb8 <module_user_init_hook+0x4c>)
   b8c70:	2100      	movs	r1, #0
   b8c72:	f7fd fb5b 	bl	b632c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8c76:	4b11      	ldr	r3, [pc, #68]	; (b8cbc <module_user_init_hook+0x50>)
   b8c78:	681a      	ldr	r2, [r3, #0]
   b8c7a:	4b11      	ldr	r3, [pc, #68]	; (b8cc0 <module_user_init_hook+0x54>)
   b8c7c:	429a      	cmp	r2, r3
   b8c7e:	4b11      	ldr	r3, [pc, #68]	; (b8cc4 <module_user_init_hook+0x58>)
   b8c80:	bf0c      	ite	eq
   b8c82:	2201      	moveq	r2, #1
   b8c84:	2200      	movne	r2, #0
   b8c86:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8c88:	d001      	beq.n	b8c8e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8c8a:	f7ff ffb1 	bl	b8bf0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8c8e:	f7fd f817 	bl	b5cc0 <HAL_RNG_GetRandomNumber>
   b8c92:	4604      	mov	r4, r0
    srand(seed);
   b8c94:	f000 fcc8 	bl	b9628 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8c98:	4b0b      	ldr	r3, [pc, #44]	; (b8cc8 <module_user_init_hook+0x5c>)
   b8c9a:	b113      	cbz	r3, b8ca2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8c9c:	4620      	mov	r0, r4
   b8c9e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8ca2:	2100      	movs	r1, #0
   b8ca4:	4808      	ldr	r0, [pc, #32]	; (b8cc8 <module_user_init_hook+0x5c>)
   b8ca6:	f7fd fa89 	bl	b61bc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8cae:	4807      	ldr	r0, [pc, #28]	; (b8ccc <module_user_init_hook+0x60>)
   b8cb0:	2100      	movs	r1, #0
   b8cb2:	f7fd ba3d 	b.w	b6130 <system_ctrl_set_app_request_handler>
   b8cb6:	bf00      	nop
   b8cb8:	000b8b99 	.word	0x000b8b99
   b8cbc:	2003f400 	.word	0x2003f400
   b8cc0:	9a271c1e 	.word	0x9a271c1e
   b8cc4:	2003e7c8 	.word	0x2003e7c8
   b8cc8:	00000000 	.word	0x00000000
   b8ccc:	000b8c35 	.word	0x000b8c35

000b8cd0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8cd0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8cd2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8cd4:	d902      	bls.n	b8cdc <pinAvailable+0xc>
    return false;
   b8cd6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8cd8:	b002      	add	sp, #8
   b8cda:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8cdc:	f1a0 030b 	sub.w	r3, r0, #11
   b8ce0:	2b02      	cmp	r3, #2
   b8ce2:	d81a      	bhi.n	b8d1a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8ce4:	4c17      	ldr	r4, [pc, #92]	; (b8d44 <pinAvailable+0x74>)
   b8ce6:	7821      	ldrb	r1, [r4, #0]
   b8ce8:	f3bf 8f5b 	dmb	ish
   b8cec:	f011 0101 	ands.w	r1, r1, #1
   b8cf0:	d10b      	bne.n	b8d0a <pinAvailable+0x3a>
   b8cf2:	4620      	mov	r0, r4
   b8cf4:	9101      	str	r1, [sp, #4]
   b8cf6:	f7fb f9d4 	bl	b40a2 <__cxa_guard_acquire>
   b8cfa:	9901      	ldr	r1, [sp, #4]
   b8cfc:	b128      	cbz	r0, b8d0a <pinAvailable+0x3a>
   b8cfe:	4812      	ldr	r0, [pc, #72]	; (b8d48 <pinAvailable+0x78>)
   b8d00:	f7ff f81e 	bl	b7d40 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8d04:	4620      	mov	r0, r4
   b8d06:	f7fb f9d1 	bl	b40ac <__cxa_guard_release>
   b8d0a:	4b0f      	ldr	r3, [pc, #60]	; (b8d48 <pinAvailable+0x78>)
   b8d0c:	7818      	ldrb	r0, [r3, #0]
   b8d0e:	f7fd f927 	bl	b5f60 <hal_spi_is_enabled>
   b8d12:	2800      	cmp	r0, #0
   b8d14:	d1df      	bne.n	b8cd6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b8d16:	2001      	movs	r0, #1
   b8d18:	e7de      	b.n	b8cd8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b8d1a:	2801      	cmp	r0, #1
   b8d1c:	d809      	bhi.n	b8d32 <pinAvailable+0x62>
   b8d1e:	f000 f87f 	bl	b8e20 <_Z19__fetch_global_Wirev>
   b8d22:	2100      	movs	r1, #0
   b8d24:	7c00      	ldrb	r0, [r0, #16]
   b8d26:	f7fd f873 	bl	b5e10 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b8d2a:	f080 0001 	eor.w	r0, r0, #1
   b8d2e:	b2c0      	uxtb	r0, r0
   b8d30:	e7d2      	b.n	b8cd8 <pinAvailable+0x8>
   b8d32:	3809      	subs	r0, #9
   b8d34:	2801      	cmp	r0, #1
   b8d36:	d8ee      	bhi.n	b8d16 <pinAvailable+0x46>
   b8d38:	f7ff fdde 	bl	b88f8 <_Z22__fetch_global_Serial1v>
   b8d3c:	7c00      	ldrb	r0, [r0, #16]
   b8d3e:	f7fd f95f 	bl	b6000 <hal_usart_is_enabled>
   b8d42:	e7f2      	b.n	b8d2a <pinAvailable+0x5a>
   b8d44:	2003e620 	.word	0x2003e620
   b8d48:	2003e624 	.word	0x2003e624

000b8d4c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8d4c:	2823      	cmp	r0, #35	; 0x23
{
   b8d4e:	b538      	push	{r3, r4, r5, lr}
   b8d50:	4604      	mov	r4, r0
   b8d52:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8d54:	d80a      	bhi.n	b8d6c <pinMode+0x20>
   b8d56:	29ff      	cmp	r1, #255	; 0xff
   b8d58:	d008      	beq.n	b8d6c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b8d5a:	f7ff ffb9 	bl	b8cd0 <pinAvailable>
   b8d5e:	b128      	cbz	r0, b8d6c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b8d60:	4629      	mov	r1, r5
   b8d62:	4620      	mov	r0, r4
}
   b8d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b8d68:	f7fc bff2 	b.w	b5d50 <HAL_Pin_Mode>
}
   b8d6c:	bd38      	pop	{r3, r4, r5, pc}

000b8d6e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b8d6e:	b538      	push	{r3, r4, r5, lr}
   b8d70:	4604      	mov	r4, r0
   b8d72:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8d74:	f7fc fff4 	bl	b5d60 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8d78:	28ff      	cmp	r0, #255	; 0xff
   b8d7a:	d010      	beq.n	b8d9e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b8d7c:	2806      	cmp	r0, #6
   b8d7e:	d804      	bhi.n	b8d8a <digitalWrite+0x1c>
   b8d80:	234d      	movs	r3, #77	; 0x4d
   b8d82:	fa23 f000 	lsr.w	r0, r3, r0
   b8d86:	07c3      	lsls	r3, r0, #31
   b8d88:	d409      	bmi.n	b8d9e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8d8a:	4620      	mov	r0, r4
   b8d8c:	f7ff ffa0 	bl	b8cd0 <pinAvailable>
   b8d90:	b128      	cbz	r0, b8d9e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b8d92:	4629      	mov	r1, r5
   b8d94:	4620      	mov	r0, r4
}
   b8d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b8d9a:	f7fc bfe9 	b.w	b5d70 <HAL_GPIO_Write>
}
   b8d9e:	bd38      	pop	{r3, r4, r5, pc}

000b8da0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b8da0:	b510      	push	{r4, lr}
   b8da2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8da4:	f7fc ffdc 	bl	b5d60 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8da8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b8daa:	b2db      	uxtb	r3, r3
   b8dac:	2b01      	cmp	r3, #1
   b8dae:	d908      	bls.n	b8dc2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b8db0:	4620      	mov	r0, r4
   b8db2:	f7ff ff8d 	bl	b8cd0 <pinAvailable>
   b8db6:	b120      	cbz	r0, b8dc2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b8db8:	4620      	mov	r0, r4
}
   b8dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b8dbe:	f7fc bfdf 	b.w	b5d80 <HAL_GPIO_Read>
}
   b8dc2:	2000      	movs	r0, #0
   b8dc4:	bd10      	pop	{r4, pc}
	...

000b8dc8 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   b8dc8:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   b8dca:	4c08      	ldr	r4, [pc, #32]	; (b8dec <_Z21__fetch_global_EEPROMv+0x24>)
   b8dcc:	7823      	ldrb	r3, [r4, #0]
   b8dce:	f3bf 8f5b 	dmb	ish
   b8dd2:	07db      	lsls	r3, r3, #31
   b8dd4:	d408      	bmi.n	b8de8 <_Z21__fetch_global_EEPROMv+0x20>
   b8dd6:	4620      	mov	r0, r4
   b8dd8:	f7fb f963 	bl	b40a2 <__cxa_guard_acquire>
   b8ddc:	b120      	cbz	r0, b8de8 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   b8dde:	f7fc ff8f 	bl	b5d00 <HAL_EEPROM_Init>
   b8de2:	4620      	mov	r0, r4
   b8de4:	f7fb f962 	bl	b40ac <__cxa_guard_release>
	return eeprom;
}
   b8de8:	4801      	ldr	r0, [pc, #4]	; (b8df0 <_Z21__fetch_global_EEPROMv+0x28>)
   b8dea:	bd10      	pop	{r4, pc}
   b8dec:	2003e7d4 	.word	0x2003e7d4
   b8df0:	2003e7d8 	.word	0x2003e7d8

000b8df4 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   b8df4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8df6:	2520      	movs	r5, #32
   b8df8:	2314      	movs	r3, #20
{
   b8dfa:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8dfc:	6003      	str	r3, [r0, #0]
   b8dfe:	6085      	str	r5, [r0, #8]
   b8e00:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8e02:	4906      	ldr	r1, [pc, #24]	; (b8e1c <_Z17acquireWireBufferv+0x28>)
   b8e04:	4628      	mov	r0, r5
   b8e06:	f000 f83c 	bl	b8e82 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8e0a:	4904      	ldr	r1, [pc, #16]	; (b8e1c <_Z17acquireWireBufferv+0x28>)
	};
   b8e0c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8e0e:	4628      	mov	r0, r5
   b8e10:	f000 f837 	bl	b8e82 <_ZnajRKSt9nothrow_t>
	};
   b8e14:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   b8e16:	4620      	mov	r0, r4
   b8e18:	bd38      	pop	{r3, r4, r5, pc}
   b8e1a:	bf00      	nop
   b8e1c:	000ba314 	.word	0x000ba314

000b8e20 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   b8e20:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8e22:	4d0f      	ldr	r5, [pc, #60]	; (b8e60 <_Z19__fetch_global_Wirev+0x40>)
   b8e24:	7829      	ldrb	r1, [r5, #0]
   b8e26:	f3bf 8f5b 	dmb	ish
   b8e2a:	f011 0401 	ands.w	r4, r1, #1
{
   b8e2e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8e30:	d113      	bne.n	b8e5a <_Z19__fetch_global_Wirev+0x3a>
   b8e32:	4628      	mov	r0, r5
   b8e34:	f7fb f935 	bl	b40a2 <__cxa_guard_acquire>
   b8e38:	b178      	cbz	r0, b8e5a <_Z19__fetch_global_Wirev+0x3a>
   b8e3a:	a801      	add	r0, sp, #4
   b8e3c:	f7ff ffda 	bl	b8df4 <_Z17acquireWireBufferv>
   b8e40:	aa01      	add	r2, sp, #4
   b8e42:	4621      	mov	r1, r4
   b8e44:	4807      	ldr	r0, [pc, #28]	; (b8e64 <_Z19__fetch_global_Wirev+0x44>)
   b8e46:	f7fe fd2d 	bl	b78a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8e4a:	4628      	mov	r0, r5
   b8e4c:	f7fb f92e 	bl	b40ac <__cxa_guard_release>
   b8e50:	4a05      	ldr	r2, [pc, #20]	; (b8e68 <_Z19__fetch_global_Wirev+0x48>)
   b8e52:	4906      	ldr	r1, [pc, #24]	; (b8e6c <_Z19__fetch_global_Wirev+0x4c>)
   b8e54:	4803      	ldr	r0, [pc, #12]	; (b8e64 <_Z19__fetch_global_Wirev+0x44>)
   b8e56:	f000 f80b 	bl	b8e70 <__aeabi_atexit>
	return wire;
}
   b8e5a:	4802      	ldr	r0, [pc, #8]	; (b8e64 <_Z19__fetch_global_Wirev+0x44>)
   b8e5c:	b007      	add	sp, #28
   b8e5e:	bd30      	pop	{r4, r5, pc}
   b8e60:	2003e7dc 	.word	0x2003e7dc
   b8e64:	2003e7e0 	.word	0x2003e7e0
   b8e68:	2003da58 	.word	0x2003da58
   b8e6c:	000b784d 	.word	0x000b784d

000b8e70 <__aeabi_atexit>:
   b8e70:	460b      	mov	r3, r1
   b8e72:	4601      	mov	r1, r0
   b8e74:	4618      	mov	r0, r3
   b8e76:	f000 bb89 	b.w	b958c <__cxa_atexit>

000b8e7a <_ZdlPvj>:
   b8e7a:	f7fb b910 	b.w	b409e <_ZdlPv>

000b8e7e <_ZnwjRKSt9nothrow_t>:
   b8e7e:	f7fb b90a 	b.w	b4096 <_Znwj>

000b8e82 <_ZnajRKSt9nothrow_t>:
   b8e82:	f7fb b90a 	b.w	b409a <_Znaj>

000b8e86 <_ZSt25__throw_bad_function_callv>:
   b8e86:	b508      	push	{r3, lr}
   b8e88:	f7fd fa38 	bl	b62fc <abort>

000b8e8c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8e8c:	4901      	ldr	r1, [pc, #4]	; (b8e94 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8e8e:	f000 b8f9 	b.w	b9084 <_ZNKSt9type_infoeqERKS_>
   b8e92:	bf00      	nop
   b8e94:	000ba330 	.word	0x000ba330

000b8e98 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8e98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8e9a:	2400      	movs	r4, #0
   b8e9c:	2310      	movs	r3, #16
   b8e9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8ea2:	6803      	ldr	r3, [r0, #0]
   b8ea4:	4615      	mov	r5, r2
   b8ea6:	699e      	ldr	r6, [r3, #24]
   b8ea8:	6812      	ldr	r2, [r2, #0]
   b8eaa:	466b      	mov	r3, sp
   b8eac:	e9cd 4400 	strd	r4, r4, [sp]
   b8eb0:	47b0      	blx	r6
   b8eb2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8eb6:	f003 0306 	and.w	r3, r3, #6
   b8eba:	2b06      	cmp	r3, #6
   b8ebc:	bf03      	ittte	eq
   b8ebe:	9b00      	ldreq	r3, [sp, #0]
   b8ec0:	602b      	streq	r3, [r5, #0]
   b8ec2:	2001      	moveq	r0, #1
   b8ec4:	4620      	movne	r0, r4
   b8ec6:	b004      	add	sp, #16
   b8ec8:	bd70      	pop	{r4, r5, r6, pc}

000b8eca <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b8eca:	9800      	ldr	r0, [sp, #0]
   b8ecc:	4290      	cmp	r0, r2
   b8ece:	bf14      	ite	ne
   b8ed0:	2001      	movne	r0, #1
   b8ed2:	2006      	moveq	r0, #6
   b8ed4:	4770      	bx	lr
	...

000b8ed8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8ed8:	b510      	push	{r4, lr}
   b8eda:	4b03      	ldr	r3, [pc, #12]	; (b8ee8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8edc:	6003      	str	r3, [r0, #0]
   b8ede:	4604      	mov	r4, r0
   b8ee0:	f000 f8cd 	bl	b907e <_ZNSt9type_infoD1Ev>
   b8ee4:	4620      	mov	r0, r4
   b8ee6:	bd10      	pop	{r4, pc}
   b8ee8:	000ba370 	.word	0x000ba370

000b8eec <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8eec:	b510      	push	{r4, lr}
   b8eee:	4604      	mov	r4, r0
   b8ef0:	f7ff fff2 	bl	b8ed8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8ef4:	4620      	mov	r0, r4
   b8ef6:	2108      	movs	r1, #8
   b8ef8:	f7ff ffbf 	bl	b8e7a <_ZdlPvj>
   b8efc:	4620      	mov	r0, r4
   b8efe:	bd10      	pop	{r4, pc}

000b8f00 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b8f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8f04:	461f      	mov	r7, r3
   b8f06:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b8f0a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8f0e:	4598      	cmp	r8, r3
   b8f10:	4606      	mov	r6, r0
   b8f12:	4615      	mov	r5, r2
   b8f14:	d107      	bne.n	b8f26 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8f16:	9907      	ldr	r1, [sp, #28]
   b8f18:	f000 f8b4 	bl	b9084 <_ZNKSt9type_infoeqERKS_>
   b8f1c:	b118      	cbz	r0, b8f26 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8f1e:	7165      	strb	r5, [r4, #5]
   b8f20:	2000      	movs	r0, #0
   b8f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8f26:	4639      	mov	r1, r7
   b8f28:	4630      	mov	r0, r6
   b8f2a:	f000 f8ab 	bl	b9084 <_ZNKSt9type_infoeqERKS_>
   b8f2e:	2800      	cmp	r0, #0
   b8f30:	d0f6      	beq.n	b8f20 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8f32:	2301      	movs	r3, #1
   b8f34:	f8c4 8000 	str.w	r8, [r4]
   b8f38:	7125      	strb	r5, [r4, #4]
   b8f3a:	71a3      	strb	r3, [r4, #6]
   b8f3c:	e7f0      	b.n	b8f20 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8f3e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8f3e:	b538      	push	{r3, r4, r5, lr}
   b8f40:	4615      	mov	r5, r2
   b8f42:	461c      	mov	r4, r3
   b8f44:	f000 f89e 	bl	b9084 <_ZNKSt9type_infoeqERKS_>
   b8f48:	b120      	cbz	r0, b8f54 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b8f4a:	2308      	movs	r3, #8
   b8f4c:	60e3      	str	r3, [r4, #12]
   b8f4e:	2306      	movs	r3, #6
   b8f50:	6025      	str	r5, [r4, #0]
   b8f52:	7123      	strb	r3, [r4, #4]
   b8f54:	bd38      	pop	{r3, r4, r5, pc}

000b8f56 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b8f56:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8f58:	4605      	mov	r5, r0
   b8f5a:	460c      	mov	r4, r1
   b8f5c:	9201      	str	r2, [sp, #4]
   b8f5e:	461e      	mov	r6, r3
   b8f60:	f000 f890 	bl	b9084 <_ZNKSt9type_infoeqERKS_>
   b8f64:	b950      	cbnz	r0, b8f7c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8f66:	2e03      	cmp	r6, #3
   b8f68:	d808      	bhi.n	b8f7c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8f6a:	6823      	ldr	r3, [r4, #0]
   b8f6c:	9a01      	ldr	r2, [sp, #4]
   b8f6e:	695b      	ldr	r3, [r3, #20]
   b8f70:	4629      	mov	r1, r5
   b8f72:	4620      	mov	r0, r4
   b8f74:	b002      	add	sp, #8
   b8f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8f7a:	4718      	bx	r3
   b8f7c:	b002      	add	sp, #8
   b8f7e:	bd70      	pop	{r4, r5, r6, pc}

000b8f80 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8f80:	b510      	push	{r4, lr}
   b8f82:	4b03      	ldr	r3, [pc, #12]	; (b8f90 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8f84:	6003      	str	r3, [r0, #0]
   b8f86:	4604      	mov	r4, r0
   b8f88:	f7ff ffa6 	bl	b8ed8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8f8c:	4620      	mov	r0, r4
   b8f8e:	bd10      	pop	{r4, pc}
   b8f90:	000ba3d0 	.word	0x000ba3d0

000b8f94 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8f94:	b510      	push	{r4, lr}
   b8f96:	4604      	mov	r4, r0
   b8f98:	f7ff fff2 	bl	b8f80 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8f9c:	4620      	mov	r0, r4
   b8f9e:	210c      	movs	r1, #12
   b8fa0:	f7ff ff6b 	bl	b8e7a <_ZdlPvj>
   b8fa4:	4620      	mov	r0, r4
   b8fa6:	bd10      	pop	{r4, pc}

000b8fa8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b8fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8faa:	9f08      	ldr	r7, [sp, #32]
   b8fac:	4297      	cmp	r7, r2
   b8fae:	4605      	mov	r5, r0
   b8fb0:	460e      	mov	r6, r1
   b8fb2:	4614      	mov	r4, r2
   b8fb4:	d00a      	beq.n	b8fcc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b8fb6:	68a8      	ldr	r0, [r5, #8]
   b8fb8:	6802      	ldr	r2, [r0, #0]
   b8fba:	9708      	str	r7, [sp, #32]
   b8fbc:	6a15      	ldr	r5, [r2, #32]
   b8fbe:	4631      	mov	r1, r6
   b8fc0:	4622      	mov	r2, r4
   b8fc2:	46ac      	mov	ip, r5
   b8fc4:	b003      	add	sp, #12
   b8fc6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8fca:	4760      	bx	ip
   b8fcc:	4619      	mov	r1, r3
   b8fce:	9301      	str	r3, [sp, #4]
   b8fd0:	f000 f858 	bl	b9084 <_ZNKSt9type_infoeqERKS_>
   b8fd4:	9b01      	ldr	r3, [sp, #4]
   b8fd6:	2800      	cmp	r0, #0
   b8fd8:	d0ed      	beq.n	b8fb6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b8fda:	2006      	movs	r0, #6
   b8fdc:	b003      	add	sp, #12
   b8fde:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8fe0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8fe0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8fe4:	460d      	mov	r5, r1
   b8fe6:	4619      	mov	r1, r3
   b8fe8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8fec:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8ff0:	4681      	mov	r9, r0
   b8ff2:	4617      	mov	r7, r2
   b8ff4:	4698      	mov	r8, r3
   b8ff6:	f000 f845 	bl	b9084 <_ZNKSt9type_infoeqERKS_>
   b8ffa:	b190      	cbz	r0, b9022 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8ffc:	2d00      	cmp	r5, #0
   b8ffe:	6034      	str	r4, [r6, #0]
   b9000:	7137      	strb	r7, [r6, #4]
   b9002:	db09      	blt.n	b9018 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9004:	1961      	adds	r1, r4, r5
   b9006:	458a      	cmp	sl, r1
   b9008:	bf0c      	ite	eq
   b900a:	2106      	moveq	r1, #6
   b900c:	2101      	movne	r1, #1
   b900e:	71b1      	strb	r1, [r6, #6]
   b9010:	2000      	movs	r0, #0
   b9012:	b001      	add	sp, #4
   b9014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9018:	3502      	adds	r5, #2
   b901a:	d1f9      	bne.n	b9010 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b901c:	2301      	movs	r3, #1
   b901e:	71b3      	strb	r3, [r6, #6]
   b9020:	e7f6      	b.n	b9010 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9022:	4554      	cmp	r4, sl
   b9024:	d106      	bne.n	b9034 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9026:	4659      	mov	r1, fp
   b9028:	4648      	mov	r0, r9
   b902a:	f000 f82b 	bl	b9084 <_ZNKSt9type_infoeqERKS_>
   b902e:	b108      	cbz	r0, b9034 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9030:	7177      	strb	r7, [r6, #5]
   b9032:	e7ed      	b.n	b9010 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9034:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9038:	6803      	ldr	r3, [r0, #0]
   b903a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b903e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b9042:	69dc      	ldr	r4, [r3, #28]
   b9044:	463a      	mov	r2, r7
   b9046:	4643      	mov	r3, r8
   b9048:	4629      	mov	r1, r5
   b904a:	46a4      	mov	ip, r4
   b904c:	b001      	add	sp, #4
   b904e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9052:	4760      	bx	ip

000b9054 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9058:	4607      	mov	r7, r0
   b905a:	460c      	mov	r4, r1
   b905c:	4615      	mov	r5, r2
   b905e:	461e      	mov	r6, r3
   b9060:	f7ff ff6d 	bl	b8f3e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b9064:	b948      	cbnz	r0, b907a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b9066:	68b8      	ldr	r0, [r7, #8]
   b9068:	6803      	ldr	r3, [r0, #0]
   b906a:	699f      	ldr	r7, [r3, #24]
   b906c:	462a      	mov	r2, r5
   b906e:	4633      	mov	r3, r6
   b9070:	4621      	mov	r1, r4
   b9072:	46bc      	mov	ip, r7
   b9074:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9078:	4760      	bx	ip
   b907a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b907e <_ZNSt9type_infoD1Ev>:
   b907e:	4770      	bx	lr

000b9080 <_ZNKSt9type_info14__is_pointer_pEv>:
   b9080:	2000      	movs	r0, #0
   b9082:	4770      	bx	lr

000b9084 <_ZNKSt9type_infoeqERKS_>:
   b9084:	4281      	cmp	r1, r0
   b9086:	b508      	push	{r3, lr}
   b9088:	d00e      	beq.n	b90a8 <_ZNKSt9type_infoeqERKS_+0x24>
   b908a:	6840      	ldr	r0, [r0, #4]
   b908c:	7803      	ldrb	r3, [r0, #0]
   b908e:	2b2a      	cmp	r3, #42	; 0x2a
   b9090:	d00c      	beq.n	b90ac <_ZNKSt9type_infoeqERKS_+0x28>
   b9092:	6849      	ldr	r1, [r1, #4]
   b9094:	780b      	ldrb	r3, [r1, #0]
   b9096:	2b2a      	cmp	r3, #42	; 0x2a
   b9098:	bf08      	it	eq
   b909a:	3101      	addeq	r1, #1
   b909c:	f000 faf2 	bl	b9684 <strcmp>
   b90a0:	fab0 f080 	clz	r0, r0
   b90a4:	0940      	lsrs	r0, r0, #5
   b90a6:	bd08      	pop	{r3, pc}
   b90a8:	2001      	movs	r0, #1
   b90aa:	e7fc      	b.n	b90a6 <_ZNKSt9type_infoeqERKS_+0x22>
   b90ac:	2000      	movs	r0, #0
   b90ae:	e7fa      	b.n	b90a6 <_ZNKSt9type_infoeqERKS_+0x22>

000b90b0 <__aeabi_drsub>:
   b90b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b90b4:	e002      	b.n	b90bc <__adddf3>
   b90b6:	bf00      	nop

000b90b8 <__aeabi_dsub>:
   b90b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b90bc <__adddf3>:
   b90bc:	b530      	push	{r4, r5, lr}
   b90be:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b90c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b90c6:	ea94 0f05 	teq	r4, r5
   b90ca:	bf08      	it	eq
   b90cc:	ea90 0f02 	teqeq	r0, r2
   b90d0:	bf1f      	itttt	ne
   b90d2:	ea54 0c00 	orrsne.w	ip, r4, r0
   b90d6:	ea55 0c02 	orrsne.w	ip, r5, r2
   b90da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b90de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b90e2:	f000 80e2 	beq.w	b92aa <__adddf3+0x1ee>
   b90e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b90ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b90ee:	bfb8      	it	lt
   b90f0:	426d      	neglt	r5, r5
   b90f2:	dd0c      	ble.n	b910e <__adddf3+0x52>
   b90f4:	442c      	add	r4, r5
   b90f6:	ea80 0202 	eor.w	r2, r0, r2
   b90fa:	ea81 0303 	eor.w	r3, r1, r3
   b90fe:	ea82 0000 	eor.w	r0, r2, r0
   b9102:	ea83 0101 	eor.w	r1, r3, r1
   b9106:	ea80 0202 	eor.w	r2, r0, r2
   b910a:	ea81 0303 	eor.w	r3, r1, r3
   b910e:	2d36      	cmp	r5, #54	; 0x36
   b9110:	bf88      	it	hi
   b9112:	bd30      	pophi	{r4, r5, pc}
   b9114:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9118:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b911c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b9120:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b9124:	d002      	beq.n	b912c <__adddf3+0x70>
   b9126:	4240      	negs	r0, r0
   b9128:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b912c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b9130:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9134:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b9138:	d002      	beq.n	b9140 <__adddf3+0x84>
   b913a:	4252      	negs	r2, r2
   b913c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9140:	ea94 0f05 	teq	r4, r5
   b9144:	f000 80a7 	beq.w	b9296 <__adddf3+0x1da>
   b9148:	f1a4 0401 	sub.w	r4, r4, #1
   b914c:	f1d5 0e20 	rsbs	lr, r5, #32
   b9150:	db0d      	blt.n	b916e <__adddf3+0xb2>
   b9152:	fa02 fc0e 	lsl.w	ip, r2, lr
   b9156:	fa22 f205 	lsr.w	r2, r2, r5
   b915a:	1880      	adds	r0, r0, r2
   b915c:	f141 0100 	adc.w	r1, r1, #0
   b9160:	fa03 f20e 	lsl.w	r2, r3, lr
   b9164:	1880      	adds	r0, r0, r2
   b9166:	fa43 f305 	asr.w	r3, r3, r5
   b916a:	4159      	adcs	r1, r3
   b916c:	e00e      	b.n	b918c <__adddf3+0xd0>
   b916e:	f1a5 0520 	sub.w	r5, r5, #32
   b9172:	f10e 0e20 	add.w	lr, lr, #32
   b9176:	2a01      	cmp	r2, #1
   b9178:	fa03 fc0e 	lsl.w	ip, r3, lr
   b917c:	bf28      	it	cs
   b917e:	f04c 0c02 	orrcs.w	ip, ip, #2
   b9182:	fa43 f305 	asr.w	r3, r3, r5
   b9186:	18c0      	adds	r0, r0, r3
   b9188:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b918c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9190:	d507      	bpl.n	b91a2 <__adddf3+0xe6>
   b9192:	f04f 0e00 	mov.w	lr, #0
   b9196:	f1dc 0c00 	rsbs	ip, ip, #0
   b919a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b919e:	eb6e 0101 	sbc.w	r1, lr, r1
   b91a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b91a6:	d31b      	bcc.n	b91e0 <__adddf3+0x124>
   b91a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b91ac:	d30c      	bcc.n	b91c8 <__adddf3+0x10c>
   b91ae:	0849      	lsrs	r1, r1, #1
   b91b0:	ea5f 0030 	movs.w	r0, r0, rrx
   b91b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b91b8:	f104 0401 	add.w	r4, r4, #1
   b91bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b91c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b91c4:	f080 809a 	bcs.w	b92fc <__adddf3+0x240>
   b91c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b91cc:	bf08      	it	eq
   b91ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b91d2:	f150 0000 	adcs.w	r0, r0, #0
   b91d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b91da:	ea41 0105 	orr.w	r1, r1, r5
   b91de:	bd30      	pop	{r4, r5, pc}
   b91e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b91e4:	4140      	adcs	r0, r0
   b91e6:	eb41 0101 	adc.w	r1, r1, r1
   b91ea:	3c01      	subs	r4, #1
   b91ec:	bf28      	it	cs
   b91ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b91f2:	d2e9      	bcs.n	b91c8 <__adddf3+0x10c>
   b91f4:	f091 0f00 	teq	r1, #0
   b91f8:	bf04      	itt	eq
   b91fa:	4601      	moveq	r1, r0
   b91fc:	2000      	moveq	r0, #0
   b91fe:	fab1 f381 	clz	r3, r1
   b9202:	bf08      	it	eq
   b9204:	3320      	addeq	r3, #32
   b9206:	f1a3 030b 	sub.w	r3, r3, #11
   b920a:	f1b3 0220 	subs.w	r2, r3, #32
   b920e:	da0c      	bge.n	b922a <__adddf3+0x16e>
   b9210:	320c      	adds	r2, #12
   b9212:	dd08      	ble.n	b9226 <__adddf3+0x16a>
   b9214:	f102 0c14 	add.w	ip, r2, #20
   b9218:	f1c2 020c 	rsb	r2, r2, #12
   b921c:	fa01 f00c 	lsl.w	r0, r1, ip
   b9220:	fa21 f102 	lsr.w	r1, r1, r2
   b9224:	e00c      	b.n	b9240 <__adddf3+0x184>
   b9226:	f102 0214 	add.w	r2, r2, #20
   b922a:	bfd8      	it	le
   b922c:	f1c2 0c20 	rsble	ip, r2, #32
   b9230:	fa01 f102 	lsl.w	r1, r1, r2
   b9234:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9238:	bfdc      	itt	le
   b923a:	ea41 010c 	orrle.w	r1, r1, ip
   b923e:	4090      	lslle	r0, r2
   b9240:	1ae4      	subs	r4, r4, r3
   b9242:	bfa2      	ittt	ge
   b9244:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9248:	4329      	orrge	r1, r5
   b924a:	bd30      	popge	{r4, r5, pc}
   b924c:	ea6f 0404 	mvn.w	r4, r4
   b9250:	3c1f      	subs	r4, #31
   b9252:	da1c      	bge.n	b928e <__adddf3+0x1d2>
   b9254:	340c      	adds	r4, #12
   b9256:	dc0e      	bgt.n	b9276 <__adddf3+0x1ba>
   b9258:	f104 0414 	add.w	r4, r4, #20
   b925c:	f1c4 0220 	rsb	r2, r4, #32
   b9260:	fa20 f004 	lsr.w	r0, r0, r4
   b9264:	fa01 f302 	lsl.w	r3, r1, r2
   b9268:	ea40 0003 	orr.w	r0, r0, r3
   b926c:	fa21 f304 	lsr.w	r3, r1, r4
   b9270:	ea45 0103 	orr.w	r1, r5, r3
   b9274:	bd30      	pop	{r4, r5, pc}
   b9276:	f1c4 040c 	rsb	r4, r4, #12
   b927a:	f1c4 0220 	rsb	r2, r4, #32
   b927e:	fa20 f002 	lsr.w	r0, r0, r2
   b9282:	fa01 f304 	lsl.w	r3, r1, r4
   b9286:	ea40 0003 	orr.w	r0, r0, r3
   b928a:	4629      	mov	r1, r5
   b928c:	bd30      	pop	{r4, r5, pc}
   b928e:	fa21 f004 	lsr.w	r0, r1, r4
   b9292:	4629      	mov	r1, r5
   b9294:	bd30      	pop	{r4, r5, pc}
   b9296:	f094 0f00 	teq	r4, #0
   b929a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b929e:	bf06      	itte	eq
   b92a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b92a4:	3401      	addeq	r4, #1
   b92a6:	3d01      	subne	r5, #1
   b92a8:	e74e      	b.n	b9148 <__adddf3+0x8c>
   b92aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b92ae:	bf18      	it	ne
   b92b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b92b4:	d029      	beq.n	b930a <__adddf3+0x24e>
   b92b6:	ea94 0f05 	teq	r4, r5
   b92ba:	bf08      	it	eq
   b92bc:	ea90 0f02 	teqeq	r0, r2
   b92c0:	d005      	beq.n	b92ce <__adddf3+0x212>
   b92c2:	ea54 0c00 	orrs.w	ip, r4, r0
   b92c6:	bf04      	itt	eq
   b92c8:	4619      	moveq	r1, r3
   b92ca:	4610      	moveq	r0, r2
   b92cc:	bd30      	pop	{r4, r5, pc}
   b92ce:	ea91 0f03 	teq	r1, r3
   b92d2:	bf1e      	ittt	ne
   b92d4:	2100      	movne	r1, #0
   b92d6:	2000      	movne	r0, #0
   b92d8:	bd30      	popne	{r4, r5, pc}
   b92da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b92de:	d105      	bne.n	b92ec <__adddf3+0x230>
   b92e0:	0040      	lsls	r0, r0, #1
   b92e2:	4149      	adcs	r1, r1
   b92e4:	bf28      	it	cs
   b92e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b92ea:	bd30      	pop	{r4, r5, pc}
   b92ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b92f0:	bf3c      	itt	cc
   b92f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b92f6:	bd30      	popcc	{r4, r5, pc}
   b92f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b92fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9300:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9304:	f04f 0000 	mov.w	r0, #0
   b9308:	bd30      	pop	{r4, r5, pc}
   b930a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b930e:	bf1a      	itte	ne
   b9310:	4619      	movne	r1, r3
   b9312:	4610      	movne	r0, r2
   b9314:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9318:	bf1c      	itt	ne
   b931a:	460b      	movne	r3, r1
   b931c:	4602      	movne	r2, r0
   b931e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9322:	bf06      	itte	eq
   b9324:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9328:	ea91 0f03 	teqeq	r1, r3
   b932c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9330:	bd30      	pop	{r4, r5, pc}
   b9332:	bf00      	nop

000b9334 <__aeabi_ui2d>:
   b9334:	f090 0f00 	teq	r0, #0
   b9338:	bf04      	itt	eq
   b933a:	2100      	moveq	r1, #0
   b933c:	4770      	bxeq	lr
   b933e:	b530      	push	{r4, r5, lr}
   b9340:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9344:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9348:	f04f 0500 	mov.w	r5, #0
   b934c:	f04f 0100 	mov.w	r1, #0
   b9350:	e750      	b.n	b91f4 <__adddf3+0x138>
   b9352:	bf00      	nop

000b9354 <__aeabi_i2d>:
   b9354:	f090 0f00 	teq	r0, #0
   b9358:	bf04      	itt	eq
   b935a:	2100      	moveq	r1, #0
   b935c:	4770      	bxeq	lr
   b935e:	b530      	push	{r4, r5, lr}
   b9360:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9364:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9368:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b936c:	bf48      	it	mi
   b936e:	4240      	negmi	r0, r0
   b9370:	f04f 0100 	mov.w	r1, #0
   b9374:	e73e      	b.n	b91f4 <__adddf3+0x138>
   b9376:	bf00      	nop

000b9378 <__aeabi_f2d>:
   b9378:	0042      	lsls	r2, r0, #1
   b937a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b937e:	ea4f 0131 	mov.w	r1, r1, rrx
   b9382:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b9386:	bf1f      	itttt	ne
   b9388:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b938c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9390:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9394:	4770      	bxne	lr
   b9396:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b939a:	bf08      	it	eq
   b939c:	4770      	bxeq	lr
   b939e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b93a2:	bf04      	itt	eq
   b93a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b93a8:	4770      	bxeq	lr
   b93aa:	b530      	push	{r4, r5, lr}
   b93ac:	f44f 7460 	mov.w	r4, #896	; 0x380
   b93b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b93b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b93b8:	e71c      	b.n	b91f4 <__adddf3+0x138>
   b93ba:	bf00      	nop

000b93bc <__aeabi_ul2d>:
   b93bc:	ea50 0201 	orrs.w	r2, r0, r1
   b93c0:	bf08      	it	eq
   b93c2:	4770      	bxeq	lr
   b93c4:	b530      	push	{r4, r5, lr}
   b93c6:	f04f 0500 	mov.w	r5, #0
   b93ca:	e00a      	b.n	b93e2 <__aeabi_l2d+0x16>

000b93cc <__aeabi_l2d>:
   b93cc:	ea50 0201 	orrs.w	r2, r0, r1
   b93d0:	bf08      	it	eq
   b93d2:	4770      	bxeq	lr
   b93d4:	b530      	push	{r4, r5, lr}
   b93d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b93da:	d502      	bpl.n	b93e2 <__aeabi_l2d+0x16>
   b93dc:	4240      	negs	r0, r0
   b93de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b93e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b93e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b93ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b93ee:	f43f aed8 	beq.w	b91a2 <__adddf3+0xe6>
   b93f2:	f04f 0203 	mov.w	r2, #3
   b93f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b93fa:	bf18      	it	ne
   b93fc:	3203      	addne	r2, #3
   b93fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9402:	bf18      	it	ne
   b9404:	3203      	addne	r2, #3
   b9406:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b940a:	f1c2 0320 	rsb	r3, r2, #32
   b940e:	fa00 fc03 	lsl.w	ip, r0, r3
   b9412:	fa20 f002 	lsr.w	r0, r0, r2
   b9416:	fa01 fe03 	lsl.w	lr, r1, r3
   b941a:	ea40 000e 	orr.w	r0, r0, lr
   b941e:	fa21 f102 	lsr.w	r1, r1, r2
   b9422:	4414      	add	r4, r2
   b9424:	e6bd      	b.n	b91a2 <__adddf3+0xe6>
   b9426:	bf00      	nop

000b9428 <__gedf2>:
   b9428:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b942c:	e006      	b.n	b943c <__cmpdf2+0x4>
   b942e:	bf00      	nop

000b9430 <__ledf2>:
   b9430:	f04f 0c01 	mov.w	ip, #1
   b9434:	e002      	b.n	b943c <__cmpdf2+0x4>
   b9436:	bf00      	nop

000b9438 <__cmpdf2>:
   b9438:	f04f 0c01 	mov.w	ip, #1
   b943c:	f84d cd04 	str.w	ip, [sp, #-4]!
   b9440:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9444:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9448:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b944c:	bf18      	it	ne
   b944e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b9452:	d01b      	beq.n	b948c <__cmpdf2+0x54>
   b9454:	b001      	add	sp, #4
   b9456:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b945a:	bf0c      	ite	eq
   b945c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b9460:	ea91 0f03 	teqne	r1, r3
   b9464:	bf02      	ittt	eq
   b9466:	ea90 0f02 	teqeq	r0, r2
   b946a:	2000      	moveq	r0, #0
   b946c:	4770      	bxeq	lr
   b946e:	f110 0f00 	cmn.w	r0, #0
   b9472:	ea91 0f03 	teq	r1, r3
   b9476:	bf58      	it	pl
   b9478:	4299      	cmppl	r1, r3
   b947a:	bf08      	it	eq
   b947c:	4290      	cmpeq	r0, r2
   b947e:	bf2c      	ite	cs
   b9480:	17d8      	asrcs	r0, r3, #31
   b9482:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b9486:	f040 0001 	orr.w	r0, r0, #1
   b948a:	4770      	bx	lr
   b948c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9490:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9494:	d102      	bne.n	b949c <__cmpdf2+0x64>
   b9496:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b949a:	d107      	bne.n	b94ac <__cmpdf2+0x74>
   b949c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b94a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b94a4:	d1d6      	bne.n	b9454 <__cmpdf2+0x1c>
   b94a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b94aa:	d0d3      	beq.n	b9454 <__cmpdf2+0x1c>
   b94ac:	f85d 0b04 	ldr.w	r0, [sp], #4
   b94b0:	4770      	bx	lr
   b94b2:	bf00      	nop

000b94b4 <__aeabi_cdrcmple>:
   b94b4:	4684      	mov	ip, r0
   b94b6:	4610      	mov	r0, r2
   b94b8:	4662      	mov	r2, ip
   b94ba:	468c      	mov	ip, r1
   b94bc:	4619      	mov	r1, r3
   b94be:	4663      	mov	r3, ip
   b94c0:	e000      	b.n	b94c4 <__aeabi_cdcmpeq>
   b94c2:	bf00      	nop

000b94c4 <__aeabi_cdcmpeq>:
   b94c4:	b501      	push	{r0, lr}
   b94c6:	f7ff ffb7 	bl	b9438 <__cmpdf2>
   b94ca:	2800      	cmp	r0, #0
   b94cc:	bf48      	it	mi
   b94ce:	f110 0f00 	cmnmi.w	r0, #0
   b94d2:	bd01      	pop	{r0, pc}

000b94d4 <__aeabi_dcmpeq>:
   b94d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b94d8:	f7ff fff4 	bl	b94c4 <__aeabi_cdcmpeq>
   b94dc:	bf0c      	ite	eq
   b94de:	2001      	moveq	r0, #1
   b94e0:	2000      	movne	r0, #0
   b94e2:	f85d fb08 	ldr.w	pc, [sp], #8
   b94e6:	bf00      	nop

000b94e8 <__aeabi_dcmplt>:
   b94e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b94ec:	f7ff ffea 	bl	b94c4 <__aeabi_cdcmpeq>
   b94f0:	bf34      	ite	cc
   b94f2:	2001      	movcc	r0, #1
   b94f4:	2000      	movcs	r0, #0
   b94f6:	f85d fb08 	ldr.w	pc, [sp], #8
   b94fa:	bf00      	nop

000b94fc <__aeabi_dcmple>:
   b94fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9500:	f7ff ffe0 	bl	b94c4 <__aeabi_cdcmpeq>
   b9504:	bf94      	ite	ls
   b9506:	2001      	movls	r0, #1
   b9508:	2000      	movhi	r0, #0
   b950a:	f85d fb08 	ldr.w	pc, [sp], #8
   b950e:	bf00      	nop

000b9510 <__aeabi_dcmpge>:
   b9510:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9514:	f7ff ffce 	bl	b94b4 <__aeabi_cdrcmple>
   b9518:	bf94      	ite	ls
   b951a:	2001      	movls	r0, #1
   b951c:	2000      	movhi	r0, #0
   b951e:	f85d fb08 	ldr.w	pc, [sp], #8
   b9522:	bf00      	nop

000b9524 <__aeabi_dcmpgt>:
   b9524:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9528:	f7ff ffc4 	bl	b94b4 <__aeabi_cdrcmple>
   b952c:	bf34      	ite	cc
   b952e:	2001      	movcc	r0, #1
   b9530:	2000      	movcs	r0, #0
   b9532:	f85d fb08 	ldr.w	pc, [sp], #8
   b9536:	bf00      	nop

000b9538 <asctime_r>:
   b9538:	b510      	push	{r4, lr}
   b953a:	460c      	mov	r4, r1
   b953c:	6941      	ldr	r1, [r0, #20]
   b953e:	6903      	ldr	r3, [r0, #16]
   b9540:	6982      	ldr	r2, [r0, #24]
   b9542:	b086      	sub	sp, #24
   b9544:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b9548:	9104      	str	r1, [sp, #16]
   b954a:	6801      	ldr	r1, [r0, #0]
   b954c:	9103      	str	r1, [sp, #12]
   b954e:	6841      	ldr	r1, [r0, #4]
   b9550:	9102      	str	r1, [sp, #8]
   b9552:	6881      	ldr	r1, [r0, #8]
   b9554:	9101      	str	r1, [sp, #4]
   b9556:	68c1      	ldr	r1, [r0, #12]
   b9558:	9100      	str	r1, [sp, #0]
   b955a:	4907      	ldr	r1, [pc, #28]	; (b9578 <asctime_r+0x40>)
   b955c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b9560:	440b      	add	r3, r1
   b9562:	4906      	ldr	r1, [pc, #24]	; (b957c <asctime_r+0x44>)
   b9564:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b9568:	440a      	add	r2, r1
   b956a:	4620      	mov	r0, r4
   b956c:	4904      	ldr	r1, [pc, #16]	; (b9580 <asctime_r+0x48>)
   b956e:	f7fc feb5 	bl	b62dc <siprintf>
   b9572:	4620      	mov	r0, r4
   b9574:	b006      	add	sp, #24
   b9576:	bd10      	pop	{r4, pc}
   b9578:	000ba43e 	.word	0x000ba43e
   b957c:	000ba429 	.word	0x000ba429
   b9580:	000ba409 	.word	0x000ba409

000b9584 <atoi>:
   b9584:	220a      	movs	r2, #10
   b9586:	2100      	movs	r1, #0
   b9588:	f000 b94e 	b.w	b9828 <strtol>

000b958c <__cxa_atexit>:
   b958c:	b510      	push	{r4, lr}
   b958e:	4c05      	ldr	r4, [pc, #20]	; (b95a4 <__cxa_atexit+0x18>)
   b9590:	4613      	mov	r3, r2
   b9592:	b12c      	cbz	r4, b95a0 <__cxa_atexit+0x14>
   b9594:	460a      	mov	r2, r1
   b9596:	4601      	mov	r1, r0
   b9598:	2002      	movs	r0, #2
   b959a:	f3af 8000 	nop.w
   b959e:	bd10      	pop	{r4, pc}
   b95a0:	4620      	mov	r0, r4
   b95a2:	e7fc      	b.n	b959e <__cxa_atexit+0x12>
   b95a4:	00000000 	.word	0x00000000

000b95a8 <memcmp>:
   b95a8:	b510      	push	{r4, lr}
   b95aa:	3901      	subs	r1, #1
   b95ac:	4402      	add	r2, r0
   b95ae:	4290      	cmp	r0, r2
   b95b0:	d101      	bne.n	b95b6 <memcmp+0xe>
   b95b2:	2000      	movs	r0, #0
   b95b4:	e005      	b.n	b95c2 <memcmp+0x1a>
   b95b6:	7803      	ldrb	r3, [r0, #0]
   b95b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b95bc:	42a3      	cmp	r3, r4
   b95be:	d001      	beq.n	b95c4 <memcmp+0x1c>
   b95c0:	1b18      	subs	r0, r3, r4
   b95c2:	bd10      	pop	{r4, pc}
   b95c4:	3001      	adds	r0, #1
   b95c6:	e7f2      	b.n	b95ae <memcmp+0x6>

000b95c8 <memcpy>:
   b95c8:	440a      	add	r2, r1
   b95ca:	4291      	cmp	r1, r2
   b95cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b95d0:	d100      	bne.n	b95d4 <memcpy+0xc>
   b95d2:	4770      	bx	lr
   b95d4:	b510      	push	{r4, lr}
   b95d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b95da:	f803 4f01 	strb.w	r4, [r3, #1]!
   b95de:	4291      	cmp	r1, r2
   b95e0:	d1f9      	bne.n	b95d6 <memcpy+0xe>
   b95e2:	bd10      	pop	{r4, pc}

000b95e4 <memmove>:
   b95e4:	4288      	cmp	r0, r1
   b95e6:	b510      	push	{r4, lr}
   b95e8:	eb01 0402 	add.w	r4, r1, r2
   b95ec:	d902      	bls.n	b95f4 <memmove+0x10>
   b95ee:	4284      	cmp	r4, r0
   b95f0:	4623      	mov	r3, r4
   b95f2:	d807      	bhi.n	b9604 <memmove+0x20>
   b95f4:	1e43      	subs	r3, r0, #1
   b95f6:	42a1      	cmp	r1, r4
   b95f8:	d008      	beq.n	b960c <memmove+0x28>
   b95fa:	f811 2b01 	ldrb.w	r2, [r1], #1
   b95fe:	f803 2f01 	strb.w	r2, [r3, #1]!
   b9602:	e7f8      	b.n	b95f6 <memmove+0x12>
   b9604:	4402      	add	r2, r0
   b9606:	4601      	mov	r1, r0
   b9608:	428a      	cmp	r2, r1
   b960a:	d100      	bne.n	b960e <memmove+0x2a>
   b960c:	bd10      	pop	{r4, pc}
   b960e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b9612:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b9616:	e7f7      	b.n	b9608 <memmove+0x24>

000b9618 <memset>:
   b9618:	4402      	add	r2, r0
   b961a:	4603      	mov	r3, r0
   b961c:	4293      	cmp	r3, r2
   b961e:	d100      	bne.n	b9622 <memset+0xa>
   b9620:	4770      	bx	lr
   b9622:	f803 1b01 	strb.w	r1, [r3], #1
   b9626:	e7f9      	b.n	b961c <memset+0x4>

000b9628 <srand>:
   b9628:	b538      	push	{r3, r4, r5, lr}
   b962a:	4b10      	ldr	r3, [pc, #64]	; (b966c <srand+0x44>)
   b962c:	681d      	ldr	r5, [r3, #0]
   b962e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9630:	4604      	mov	r4, r0
   b9632:	b9b3      	cbnz	r3, b9662 <srand+0x3a>
   b9634:	2018      	movs	r0, #24
   b9636:	f7fc fe39 	bl	b62ac <malloc>
   b963a:	4602      	mov	r2, r0
   b963c:	63a8      	str	r0, [r5, #56]	; 0x38
   b963e:	b920      	cbnz	r0, b964a <srand+0x22>
   b9640:	4b0b      	ldr	r3, [pc, #44]	; (b9670 <srand+0x48>)
   b9642:	480c      	ldr	r0, [pc, #48]	; (b9674 <srand+0x4c>)
   b9644:	2142      	movs	r1, #66	; 0x42
   b9646:	f7fc fe69 	bl	b631c <__assert_func>
   b964a:	490b      	ldr	r1, [pc, #44]	; (b9678 <srand+0x50>)
   b964c:	4b0b      	ldr	r3, [pc, #44]	; (b967c <srand+0x54>)
   b964e:	e9c0 1300 	strd	r1, r3, [r0]
   b9652:	4b0b      	ldr	r3, [pc, #44]	; (b9680 <srand+0x58>)
   b9654:	6083      	str	r3, [r0, #8]
   b9656:	230b      	movs	r3, #11
   b9658:	8183      	strh	r3, [r0, #12]
   b965a:	2100      	movs	r1, #0
   b965c:	2001      	movs	r0, #1
   b965e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9662:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9664:	2200      	movs	r2, #0
   b9666:	611c      	str	r4, [r3, #16]
   b9668:	615a      	str	r2, [r3, #20]
   b966a:	bd38      	pop	{r3, r4, r5, pc}
   b966c:	2003d9f0 	.word	0x2003d9f0
   b9670:	000ba462 	.word	0x000ba462
   b9674:	000ba479 	.word	0x000ba479
   b9678:	abcd330e 	.word	0xabcd330e
   b967c:	e66d1234 	.word	0xe66d1234
   b9680:	0005deec 	.word	0x0005deec

000b9684 <strcmp>:
   b9684:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9688:	f811 3b01 	ldrb.w	r3, [r1], #1
   b968c:	2a01      	cmp	r2, #1
   b968e:	bf28      	it	cs
   b9690:	429a      	cmpcs	r2, r3
   b9692:	d0f7      	beq.n	b9684 <strcmp>
   b9694:	1ad0      	subs	r0, r2, r3
   b9696:	4770      	bx	lr

000b9698 <strcpy>:
   b9698:	4603      	mov	r3, r0
   b969a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b969e:	f803 2b01 	strb.w	r2, [r3], #1
   b96a2:	2a00      	cmp	r2, #0
   b96a4:	d1f9      	bne.n	b969a <strcpy+0x2>
   b96a6:	4770      	bx	lr

000b96a8 <strlen>:
   b96a8:	4603      	mov	r3, r0
   b96aa:	f813 2b01 	ldrb.w	r2, [r3], #1
   b96ae:	2a00      	cmp	r2, #0
   b96b0:	d1fb      	bne.n	b96aa <strlen+0x2>
   b96b2:	1a18      	subs	r0, r3, r0
   b96b4:	3801      	subs	r0, #1
   b96b6:	4770      	bx	lr

000b96b8 <strncpy>:
   b96b8:	b510      	push	{r4, lr}
   b96ba:	3901      	subs	r1, #1
   b96bc:	4603      	mov	r3, r0
   b96be:	b132      	cbz	r2, b96ce <strncpy+0x16>
   b96c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b96c4:	f803 4b01 	strb.w	r4, [r3], #1
   b96c8:	3a01      	subs	r2, #1
   b96ca:	2c00      	cmp	r4, #0
   b96cc:	d1f7      	bne.n	b96be <strncpy+0x6>
   b96ce:	441a      	add	r2, r3
   b96d0:	2100      	movs	r1, #0
   b96d2:	4293      	cmp	r3, r2
   b96d4:	d100      	bne.n	b96d8 <strncpy+0x20>
   b96d6:	bd10      	pop	{r4, pc}
   b96d8:	f803 1b01 	strb.w	r1, [r3], #1
   b96dc:	e7f9      	b.n	b96d2 <strncpy+0x1a>

000b96de <strnlen>:
   b96de:	b510      	push	{r4, lr}
   b96e0:	4602      	mov	r2, r0
   b96e2:	4401      	add	r1, r0
   b96e4:	428a      	cmp	r2, r1
   b96e6:	4613      	mov	r3, r2
   b96e8:	d003      	beq.n	b96f2 <strnlen+0x14>
   b96ea:	781c      	ldrb	r4, [r3, #0]
   b96ec:	3201      	adds	r2, #1
   b96ee:	2c00      	cmp	r4, #0
   b96f0:	d1f8      	bne.n	b96e4 <strnlen+0x6>
   b96f2:	1a18      	subs	r0, r3, r0
   b96f4:	bd10      	pop	{r4, pc}

000b96f6 <strstr>:
   b96f6:	780a      	ldrb	r2, [r1, #0]
   b96f8:	b570      	push	{r4, r5, r6, lr}
   b96fa:	b96a      	cbnz	r2, b9718 <strstr+0x22>
   b96fc:	bd70      	pop	{r4, r5, r6, pc}
   b96fe:	429a      	cmp	r2, r3
   b9700:	d109      	bne.n	b9716 <strstr+0x20>
   b9702:	460c      	mov	r4, r1
   b9704:	4605      	mov	r5, r0
   b9706:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   b970a:	2b00      	cmp	r3, #0
   b970c:	d0f6      	beq.n	b96fc <strstr+0x6>
   b970e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   b9712:	429e      	cmp	r6, r3
   b9714:	d0f7      	beq.n	b9706 <strstr+0x10>
   b9716:	3001      	adds	r0, #1
   b9718:	7803      	ldrb	r3, [r0, #0]
   b971a:	2b00      	cmp	r3, #0
   b971c:	d1ef      	bne.n	b96fe <strstr+0x8>
   b971e:	4618      	mov	r0, r3
   b9720:	e7ec      	b.n	b96fc <strstr+0x6>
	...

000b9724 <_strtol_l.constprop.0>:
   b9724:	2b01      	cmp	r3, #1
   b9726:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b972a:	d001      	beq.n	b9730 <_strtol_l.constprop.0+0xc>
   b972c:	2b24      	cmp	r3, #36	; 0x24
   b972e:	d906      	bls.n	b973e <_strtol_l.constprop.0+0x1a>
   b9730:	f7fc fdec 	bl	b630c <__errno>
   b9734:	2316      	movs	r3, #22
   b9736:	6003      	str	r3, [r0, #0]
   b9738:	2000      	movs	r0, #0
   b973a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b973e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9824 <_strtol_l.constprop.0+0x100>
   b9742:	460d      	mov	r5, r1
   b9744:	462e      	mov	r6, r5
   b9746:	f815 4b01 	ldrb.w	r4, [r5], #1
   b974a:	f814 700c 	ldrb.w	r7, [r4, ip]
   b974e:	f017 0708 	ands.w	r7, r7, #8
   b9752:	d1f7      	bne.n	b9744 <_strtol_l.constprop.0+0x20>
   b9754:	2c2d      	cmp	r4, #45	; 0x2d
   b9756:	d132      	bne.n	b97be <_strtol_l.constprop.0+0x9a>
   b9758:	782c      	ldrb	r4, [r5, #0]
   b975a:	2701      	movs	r7, #1
   b975c:	1cb5      	adds	r5, r6, #2
   b975e:	2b00      	cmp	r3, #0
   b9760:	d05b      	beq.n	b981a <_strtol_l.constprop.0+0xf6>
   b9762:	2b10      	cmp	r3, #16
   b9764:	d109      	bne.n	b977a <_strtol_l.constprop.0+0x56>
   b9766:	2c30      	cmp	r4, #48	; 0x30
   b9768:	d107      	bne.n	b977a <_strtol_l.constprop.0+0x56>
   b976a:	782c      	ldrb	r4, [r5, #0]
   b976c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b9770:	2c58      	cmp	r4, #88	; 0x58
   b9772:	d14d      	bne.n	b9810 <_strtol_l.constprop.0+0xec>
   b9774:	786c      	ldrb	r4, [r5, #1]
   b9776:	2310      	movs	r3, #16
   b9778:	3502      	adds	r5, #2
   b977a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b977e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9782:	f04f 0c00 	mov.w	ip, #0
   b9786:	fbb8 f9f3 	udiv	r9, r8, r3
   b978a:	4666      	mov	r6, ip
   b978c:	fb03 8a19 	mls	sl, r3, r9, r8
   b9790:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b9794:	f1be 0f09 	cmp.w	lr, #9
   b9798:	d816      	bhi.n	b97c8 <_strtol_l.constprop.0+0xa4>
   b979a:	4674      	mov	r4, lr
   b979c:	42a3      	cmp	r3, r4
   b979e:	dd24      	ble.n	b97ea <_strtol_l.constprop.0+0xc6>
   b97a0:	f1bc 0f00 	cmp.w	ip, #0
   b97a4:	db1e      	blt.n	b97e4 <_strtol_l.constprop.0+0xc0>
   b97a6:	45b1      	cmp	r9, r6
   b97a8:	d31c      	bcc.n	b97e4 <_strtol_l.constprop.0+0xc0>
   b97aa:	d101      	bne.n	b97b0 <_strtol_l.constprop.0+0x8c>
   b97ac:	45a2      	cmp	sl, r4
   b97ae:	db19      	blt.n	b97e4 <_strtol_l.constprop.0+0xc0>
   b97b0:	fb06 4603 	mla	r6, r6, r3, r4
   b97b4:	f04f 0c01 	mov.w	ip, #1
   b97b8:	f815 4b01 	ldrb.w	r4, [r5], #1
   b97bc:	e7e8      	b.n	b9790 <_strtol_l.constprop.0+0x6c>
   b97be:	2c2b      	cmp	r4, #43	; 0x2b
   b97c0:	bf04      	itt	eq
   b97c2:	782c      	ldrbeq	r4, [r5, #0]
   b97c4:	1cb5      	addeq	r5, r6, #2
   b97c6:	e7ca      	b.n	b975e <_strtol_l.constprop.0+0x3a>
   b97c8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b97cc:	f1be 0f19 	cmp.w	lr, #25
   b97d0:	d801      	bhi.n	b97d6 <_strtol_l.constprop.0+0xb2>
   b97d2:	3c37      	subs	r4, #55	; 0x37
   b97d4:	e7e2      	b.n	b979c <_strtol_l.constprop.0+0x78>
   b97d6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b97da:	f1be 0f19 	cmp.w	lr, #25
   b97de:	d804      	bhi.n	b97ea <_strtol_l.constprop.0+0xc6>
   b97e0:	3c57      	subs	r4, #87	; 0x57
   b97e2:	e7db      	b.n	b979c <_strtol_l.constprop.0+0x78>
   b97e4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b97e8:	e7e6      	b.n	b97b8 <_strtol_l.constprop.0+0x94>
   b97ea:	f1bc 0f00 	cmp.w	ip, #0
   b97ee:	da05      	bge.n	b97fc <_strtol_l.constprop.0+0xd8>
   b97f0:	2322      	movs	r3, #34	; 0x22
   b97f2:	6003      	str	r3, [r0, #0]
   b97f4:	4646      	mov	r6, r8
   b97f6:	b942      	cbnz	r2, b980a <_strtol_l.constprop.0+0xe6>
   b97f8:	4630      	mov	r0, r6
   b97fa:	e79e      	b.n	b973a <_strtol_l.constprop.0+0x16>
   b97fc:	b107      	cbz	r7, b9800 <_strtol_l.constprop.0+0xdc>
   b97fe:	4276      	negs	r6, r6
   b9800:	2a00      	cmp	r2, #0
   b9802:	d0f9      	beq.n	b97f8 <_strtol_l.constprop.0+0xd4>
   b9804:	f1bc 0f00 	cmp.w	ip, #0
   b9808:	d000      	beq.n	b980c <_strtol_l.constprop.0+0xe8>
   b980a:	1e69      	subs	r1, r5, #1
   b980c:	6011      	str	r1, [r2, #0]
   b980e:	e7f3      	b.n	b97f8 <_strtol_l.constprop.0+0xd4>
   b9810:	2430      	movs	r4, #48	; 0x30
   b9812:	2b00      	cmp	r3, #0
   b9814:	d1b1      	bne.n	b977a <_strtol_l.constprop.0+0x56>
   b9816:	2308      	movs	r3, #8
   b9818:	e7af      	b.n	b977a <_strtol_l.constprop.0+0x56>
   b981a:	2c30      	cmp	r4, #48	; 0x30
   b981c:	d0a5      	beq.n	b976a <_strtol_l.constprop.0+0x46>
   b981e:	230a      	movs	r3, #10
   b9820:	e7ab      	b.n	b977a <_strtol_l.constprop.0+0x56>
   b9822:	bf00      	nop
   b9824:	000ba4d3 	.word	0x000ba4d3

000b9828 <strtol>:
   b9828:	4613      	mov	r3, r2
   b982a:	460a      	mov	r2, r1
   b982c:	4601      	mov	r1, r0
   b982e:	4802      	ldr	r0, [pc, #8]	; (b9838 <strtol+0x10>)
   b9830:	6800      	ldr	r0, [r0, #0]
   b9832:	f7ff bf77 	b.w	b9724 <_strtol_l.constprop.0>
   b9836:	bf00      	nop
   b9838:	2003d9f0 	.word	0x2003d9f0

000b983c <dynalib_user>:
   b983c:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   b984c:	00000000 63736964 656e6e6f 64657463     ....disconnected
   b985c:	6e757200 676e696e 6f706552 6e697472     .runningReportin
   b986c:	65720067 74726f70 00676e69 69466957     g.reporting.WiFi
   b987c:	69616620 2064656c 63206f74 656e6e6f      failed to conne
   b988c:	202c7463 61746164 746f6e20 70657220     ct, data not rep
   b989c:	6574726f 69570064 63206946 656e6e6f     orted.WiFi conne
   b98ac:	64657463 6572202c 74726f70 20676e69     cted, reporting 
   b98bc:	61746164 64227b00 22617461 5d005b3a     data.{"data":[.]
   b98cc:	4f50007d 53005453 75746174 00203a73     }.POST.Status: .
   b98dc:	42716552 3a79646f 430a0020 65646572     ReqBody: ..Crede
   b98ec:	6169746e 6120736c 63206572 65727275     ntials are curre
   b98fc:	796c746e 6f747320 20646572 3a726f66     ntly stored for:
   b990c:	2c005b0a 0a5d000a 65746e45 656e2072     .[.,..].Enter ne
   b991c:	726f7774 5353206b 28204449 6e616c62     twork SSID (blan
   b992c:	6f74206b 696b7320 27202c70 61656c63     k to skip, 'clea
   b993c:	74202772 6572206f 20746573 64657263     r' to reset cred
   b994c:	69746e65 29736c61 0a00203a 72727543     entials): ..Curr
   b995c:	20746e65 44495344 20736920 0a5d005b     ent DSID is [.].
   b996c:	65746e45 65642072 65636976 49534420     Enter device DSI
   b997c:	62282044 6b6e616c 206f7420 70696b73     D (blank to skip
   b998c:	00203a29 61656c63 450a0072 7265746e     ): .clear..Enter
   b999c:	74656e20 6b726f77 73617020 726f7773      network passwor
   b99ac:	00203a64 72430a0a 6e656465 6c616974     d: ...Credential
   b99bc:	65732073 69772074 73206874 3a646973     s set with ssid:
   b99cc:	700a0020 77737361 3a64726f 0a0a0020      ..password: ...
   b99dc:	6e450a00 20726574 73657427 74202774     ..Enter 'test' t
   b99ec:	6574206f 63207473 65646572 6169746e     o test credentia
   b99fc:	2820736c 6e616c62 6f74206b 696b7320     ls (blank to ski
   b9a0c:	203a2970 69736400 6e652064 65726574     p): .dsid entere
   b9a1c:	73640064 203a6469 75430a00 6e657272     d.dsid: ..Curren
   b9a2c:	61762074 2065756c 20726f66 61746164     t value for data
   b9a3c:	6c6f6320 7463656c 206e6f69 65746e69      collection inte
   b9a4c:	6c617672 20736920 0a5d005b 65746e45     rval is [.].Ente
   b9a5c:	69742072 6220656d 65777465 64206e65     r time between d
   b9a6c:	20617461 6c6c6f63 69746365 61206e6f     ata collection a
   b9a7c:	6e612073 746e6920 72656765 206e6920     s an integer in 
   b9a8c:	6c6c696d 63657369 73646e6f 6c622820     milliseconds (bl
   b9a9c:	206b6e61 73206f74 2970696b 0a00203a     ank to skip): ..
   b9aac:	72727543 20746e65 756c6176 6f662065     Current value fo
   b9abc:	69572072 63206946 656e6e6f 6f697463     r WiFi connectio
   b9acc:	6e69206e 76726574 69206c61 005b2073     n interval is [.
   b9adc:	6e450a5d 20726574 656d6974 74656220     ].Enter time bet
   b9aec:	6e656577 46695720 6f632069 63656e6e     ween WiFi connec
   b9afc:	6e6f6974 73612073 206e6120 65746e69     tions as an inte
   b9b0c:	20726567 73206e69 6e6f6365 28207364     ger in seconds (
   b9b1c:	6e616c62 6f74206b 696b7320 203a2970     blank to skip): 
   b9b2c:	6e450a00 20726574 61746f27 6f742027     ..Enter 'ota' to
   b9b3c:	69617720 6f662074 544f2072 70752041      wait for OTA up
   b9b4c:	65746164 6c622820 206b6e61 73206f74     date (blank to s
   b9b5c:	2970696b 6f00203a 57006174 20694669     kip): .ota.WiFi 
   b9b6c:	6c696166 74206465 6f63206f 63656e6e     failed to connec
   b9b7c:	73202c74 7070696b 20676e69 656d6974     t, skipping time
   b9b8c:	6e797320 6f726863 617a696e 6e6f6974      synchronization
   b9b9c:	46695700 6f632069 63656e6e 2c646574     .WiFi connected,
   b9bac:	61776120 6e697469 70752067 65746164      awaiting update
   b9bbc:	77410a00 69746961 4f20676e 75204154     ..Awaiting OTA u
   b9bcc:	74616470 65720065 74726f70 54676e69     pdate.reportingT
   b9bdc:	61657268 69640064 6c676967 692e6575     hread.digiglue.i
   b9bec:	002f006f 6c696146 74206465 6e69206f     o./.Failed to in
   b9bfc:	61697469 657a696c 53494c20 00484433     itialize LIS3DH.
   b9c0c:	6f636572 6e696472 746e4967 61767265     recordingInterva
   b9c1c:	25203a6c 65720069 74726f70 49676e69     l: %i.reportingI
   b9c2c:	7265746e 3a6c6176 00692520 69466957     nterval: %i.WiFi
   b9c3c:	6e6f6320 7463656e 202c6465 636e7973      connected, sync
   b9c4c:	20676e69 656d6974 72754300 746e6572     ing time.Current
   b9c5c:	6d697420 73692065 7325203a 454c4200      time is: %s.BLE
   b9c6c:	54494157 454c4200 6e6f6320 7463656e     WAIT.BLE connect
   b9c7c:	42006465 6e20454c 6320746f 656e6e6f     ed.BLE not conne
   b9c8c:	64657463 6f63202c 6e69746e 676e6975     cted, continuing
   b9c9c:	74697720 74732068 6465726f 74657320      with stored set
   b9cac:	676e6974 62002e73 6157656c 6f467469     tings..bleWaitFo
   b9cbc:	6e6f4372 00676966 4f434552 4e494452     rConfig.RECORDIN
   b9ccc:	45360047 30303034 422d3130 2d334135     G.6E400001-B5A3-
   b9cdc:	33393346 4130452d 35452d39 34324530     F393-E0A9-E50E24
   b9cec:	41434344 36004539 30303445 2d323030     DCCA9E.6E400002-
   b9cfc:	33413542 3933462d 30452d33 452d3941     B5A3-F393-E0A9-E
   b9d0c:	32453035 43434434 00453941 30344536     50E24DCCA9E.6E40
   b9d1c:	33303030 4135422d 33462d33 452d3339     0003-B5A3-F393-E
   b9d2c:	2d394130 45303545 43443432 45394143     0A9-E50E24DCCA9E
   b9d3c:	00787400 41007872 70656363 70610074     .tx.rx.Accept.ap
   b9d4c:	63696c70 6f697461 736a2f6e 43006e6f     plication/json.C
   b9d5c:	65746e6f 542d746e 00657079              ontent-Type.

000b9d68 <_ZTV15Adafruit_LIS3DH>:
	...
   b9d70:	000b40b3 000b4fa5 000b51ed 000b55c9     .@...O...Q...U..
   b9d80:	000b51f1 70747448 65696c43 093e746e     .Q..HttpClient>.
   b9d90:	6e6e6f43 69746365 7420676e 00203a6f     Connecting to: .
   b9da0:	70747448 65696c43 093e746e 6e6e6f43     HttpClient>.Conn
   b9db0:	69746365 7420676e 5049206f 3a00203a     ecting to IP: .:
   b9dc0:	54482000 312f5054 0a0d302e 74744800     . HTTP/1.0...Htt
   b9dd0:	696c4370 3e746e65 61745309 6f207472     pClient>.Start o
   b9de0:	54482066 52205054 65757165 002e7473     f HTTP Request..
   b9df0:	736f6c63 6f430065 63656e6e 6e6f6974     close.Connection
   b9e00:	74744800 696c4370 3e746e65 6e6f4309     .HttpClient>.Con
   b9e10:	7463656e 206e6f69 6c696166 002e6465     nection failed..
   b9e20:	54534f48 6e6f4300 746e6574 6e654c2d     HOST.Content-Len
   b9e30:	00687467 70747448 65696c43 093e746e     gth.HttpClient>.
   b9e40:	20646e45 4820666f 20505454 75716552     End of HTTP Requ
   b9e50:	2e747365 480a0d00 43707474 6e65696c     est....HttpClien
   b9e60:	52093e74 69656365 676e6976 50435420     t>.Receiving TCP
   b9e70:	61727420 6361736e 6e6f6974 20666f20      transaction of 
   b9e80:	79622000 2e736574 74744800 696c4370     . bytes..HttpCli
   b9e90:	3e746e65 72724509 203a726f 70736552     ent>.Error: Resp
   b9ea0:	65736e6f 646f6220 616c2079 72656772     onse body larger
   b9eb0:	61687420 7562206e 72656666 0a0d002e      than buffer....
   b9ec0:	70747448 65696c43 093e746e 20646e45     HttpClient>.End 
   b9ed0:	5420666f 74205043 736e6172 69746361     of TCP transacti
   b9ee0:	002e6e6f 74480a0d 6c437074 746e6569     on....HttpClient
   b9ef0:	7245093e 3a726f72 6d695420 74756f65     >.Error: Timeout
   b9f00:	69687720 7220656c 69646165 7220676e      while reading r
   b9f10:	6f707365 2e65736e 480a0d00 43707474     esponse....HttpC
   b9f20:	6e65696c 45093e74 6f20646e 54482066     lient>.End of HT
   b9f30:	52205054 6f707365 2065736e 736d0028     TP Response (.ms
   b9f40:	48002e29 43707474 6e65696c 53093e74     )..HttpClient>.S
   b9f50:	75746174 6f432073 203a6564 0d0a0d00     tatus Code: ....
   b9f60:	7448000a 6c437074 746e6569 7245093e     ..HttpClient>.Er
   b9f70:	3a726f72 6e614320 66207427 20646e69     ror: Can't find 
   b9f80:	50545448 73657220 736e6f70 6f622065     HTTP response bo
   b9f90:	002e7964 69726977 622e676e 5300656c     dy..wiring.ble.S
   b9fa0:	74726174 73696420 65766f63 676e6972     tart discovering
   b9fb0:	72657320 65636976 50002e73 20726565      services..Peer 
   b9fc0:	69766564 69206563 696d2073 6e697373     device is missin
   b9fd0:	46002167 656c6961 6f742064 70706120     g!.Failed to app
   b9fe0:	20646e65 72656570 6e654320 6c617274     end peer Central
   b9ff0:	76656420 2e656369 6e6f4300 7463656e      device..Connect
   ba000:	62206465 65432079 6172746e 6564206c     ed by Central de
   ba010:	65636976 6944002e 6e6f6373 7463656e     vice..Disconnect
   ba020:	62206465 65722079 65746f6d 76656420     ed by remote dev
   ba030:	2e656369 70754400 6163696c 20646574     ice..Duplicated 
   ba040:	72616863 65746361 74736972 63206369     characteristic c
   ba050:	6f6e6e61 65622074 64646120 002e6465     annot be added..
   ba060:	6c696146 74206465 7061206f 646e6570     Failed to append
   ba070:	636f6c20 63206c61 61726168 72657463      local character
   ba080:	69747369 00002e63                       istic...

000ba088 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba090:	000b6359 000b63bd 000b6571 000b63e7     Yc...c..qe...c..
   ba0a0:	000b635d                                ]c..

000ba0a4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba0ac:	000b6355 000b63cb 000b6357 000b63ed     Uc...c..Wc...c..
   ba0bc:	000b637d                                }c..

000ba0c0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba0c8:	000b6353 000b63d9 000b6dd1 000b63f3     Sc...c...m...c..
   ba0d8:	000b639d                                .c..

000ba0dc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   ba0e8:	34fb0000 00805f9b 10008000 00000000     ...4._..........
	...

000ba0fa <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   ba0fa:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000ba10a <_ZN8particle7BleUuid9BASE_UUIDE>:
   ba10a:	5f9b34fb 80000080 00001000 00000000     .4._............
	...

000ba11c <_ZTVN5spark13EthernetClassE>:
	...
   ba124:	000b782f 000b7825 000b781b 000b7811     /x..%x...x...x..
   ba134:	000b7805 000b77f9 000b7ab5 000b7abd     .x...w...z...z..
   ba144:	000b77ed 000b77e5 000b77db 000b77d1     .w...w...w...w..
   ba154:	000b7aed                                .z..

000ba158 <_ZTV7TwoWire>:
	...
   ba160:	000b784d 000b7897 000b786f 000b784f     Mx...x..ox..Ox..
   ba170:	000b7877 000b787f 000b7887 000b788f     wx...x...x...x..

000ba180 <_ZTV9IPAddress>:
	...
   ba188:	000b7959 000b7949 000b794b 00707061     Yy..Iy..Ky..app.

000ba198 <_ZTVN5spark12NetworkClassE>:
	...
   ba1a0:	000b7a75 000b7a7f 000b7a89 000b7a93     uz...z...z...z..
   ba1b0:	000b7a9d 000b7aa9 000b7ab5 000b7abd     .z...z...z...z..
   ba1c0:	000b7ac5 000b7ad1 000b7ad9 000b7ae3     .z...z...z...z..
   ba1d0:	000b7aed                                .z..

000ba1d4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   ba1d4:	18100800 38302820 69726977 7200676e     .... (08wiring.r
   ba1e4:	20766365 6f727265 203d2072 00006425     ecv error = %d..

000ba1f4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba1fc:	000b81f1 000b8215 000b8747 000b8223     ........G...#...
   ba20c:	000b81f5                                ....

000ba210 <_ZTV9TCPClient>:
	...
   ba218:	000b82a1 000b82d5 000b816d 000b8187     ........m.......
   ba228:	000b85dd 000b81b1 000b8453 000b81e5     ........S.......
   ba238:	000b84e5 000b8325 000b8481 000b8691     ....%...........
   ba248:	000b8421 000b81e7 000b8199 000b8229     !...........)...
   ba258:	000b8305 252d5925 64252d6d 3a482554     ....%Y-%m-%dT%H:
   ba268:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000ba278 <_ZTV11USARTSerial>:
	...
   ba280:	000b8851 000b88bd 000b8895 000b7bd9     Q............{..
   ba290:	000b8865 000b8881 000b8873 000b888f     e.......s.......
   ba2a0:	000b8853 000b8857                       S...W...

000ba2a8 <_ZTV9USBSerial>:
	...
   ba2b0:	000b8951 000b89b9 000b898f 000b7bd9     Q............{..
   ba2c0:	000b8981 000b8953 000b8963 000b89b3     ....S...c.......
   ba2d0:	000b8973 000b894d                       s...M...

000ba2d8 <_ZTVN5spark9WiFiClassE>:
	...
   ba2e0:	000b425d 000b8abd 000b8ab3 000b4267     ]B..........gB..
   ba2f0:	000b4245 000b4251 000b7ab5 000b7abd     EB..QB...z...z..
   ba300:	000b8aa7 000b8a9f 000b8a95 000b8a8b     ................
   ba310:	000b7aed                                .z..

000ba314 <_ZSt7nothrow>:
	...

000ba315 <_ZTSSt19_Sp_make_shared_tag>:
   ba315:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   ba325:	5f646572 00676174                        red_tag....

000ba330 <_ZTISt19_Sp_make_shared_tag>:
   ba330:	000ba370 000ba315                       p.......

000ba338 <_ZTIN10__cxxabiv117__class_type_infoE>:
   ba338:	000ba3d0 000ba344 000ba3f4              ....D.......

000ba344 <_ZTSN10__cxxabiv117__class_type_infoE>:
   ba344:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   ba354:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   ba364:	00000045                                E...

000ba368 <_ZTVN10__cxxabiv117__class_type_infoE>:
   ba368:	00000000 000ba338 000b8ed9 000b8eed     ....8...........
   ba378:	000b9081 000b9081 000b8f57 000b8e99     ........W.......
   ba388:	000b8f3f 000b8f01 000b8ecb              ?...........

000ba394 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   ba394:	000ba3d0 000ba3a0 000ba338              ........8...

000ba3a0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   ba3a0:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   ba3b0:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   ba3c0:	456f666e 00000000                       nfoE....

000ba3c8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   ba3c8:	00000000 000ba394 000b8f81 000b8f95     ................
   ba3d8:	000b9081 000b9081 000b8f57 000b8e99     ........W.......
   ba3e8:	000b9055 000b8fe1 000b8fa9              U...........

000ba3f4 <_ZTISt9type_info>:
   ba3f4:	000ba370 000ba3fc                       p.......

000ba3fc <_ZTSSt9type_info>:
   ba3fc:	74397453 5f657079 6f666e69 332e2500     St9type_info.%.3
   ba40c:	2e252073 33257333 2e252064 253a6432     s %.3s%3d %.2d:%
   ba41c:	3a64322e 64322e25 0a642520               .2d:%.2d %d..

000ba429 <day_name.1>:
   ba429:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   ba439:	61536972                                 riSat

000ba43e <mon_name.0>:
   ba43e:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   ba44e:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   ba45e:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   ba46e:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   ba47e:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   ba48e:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   ba49e:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   ba4ae:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   ba4be:	62696c2f 74732f63 62696c64 6e61722f     /libc/stdlib/ran
   ba4ce:	00632e64                                d.c.

000ba4d2 <_ctype_>:
   ba4d2:	20202000 20202020 28282020 20282828     .         ((((( 
   ba4e2:	20202020 20202020 20202020 20202020                     
   ba4f2:	10108820 10101010 10101010 10101010      ...............
   ba502:	04040410 04040404 10040404 10101010     ................
   ba512:	41411010 41414141 01010101 01010101     ..AAAAAA........
   ba522:	01010101 01010101 01010101 10101010     ................
   ba532:	42421010 42424242 02020202 02020202     ..BBBBBB........
   ba542:	02020202 02020202 02020202 10101010     ................
   ba552:	00000020 00000000 00000000 00000000      ...............
	...

000ba5d3 <link_const_variable_data_end>:
	...

000ba5d4 <link_constructors_location>:
   ba5d4:	000b4fb5 	.word	0x000b4fb5
   ba5d8:	000b77a9 	.word	0x000b77a9
   ba5dc:	000b7839 	.word	0x000b7839
   ba5e0:	000b7a65 	.word	0x000b7a65
   ba5e4:	000b7bc5 	.word	0x000b7bc5
   ba5e8:	000b7d19 	.word	0x000b7d19
   ba5ec:	000b8131 	.word	0x000b8131
   ba5f0:	000b883d 	.word	0x000b883d
   ba5f4:	000b8aed 	.word	0x000b8aed

000ba5f8 <link_constructors_end>:
	...
