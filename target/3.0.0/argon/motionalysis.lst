
c:/Users/Arjun/Documents/GitHub/motionalysis/target/3.0.0/argon/motionalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004150  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d8170  000d8170  00008170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d8178  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  2003e070  000d817c  0001e070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000718  2003e0d8  2003e0d8  0002e0d8  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d81e4  000d81e4  000281e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d820c  000d820c  0002820c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0019afce  00000000  00000000  00028210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00018d9f  00000000  00000000  001c31de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00039982  00000000  00000000  001dbf7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003068  00000000  00000000  002158ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00009be8  00000000  00000000  00218967  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003b7ea  00000000  00000000  0022254f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0004138b  00000000  00000000  0025dd39  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0012ae00  00000000  00000000  0029f0c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00008a90  00000000  00000000  003c9ec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
   d4026:	b508      	push	{r3, lr}
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fe57 	bl	d7ce4 <memcpy>
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fe5f 	bl	d7d00 <memset>
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e070 	.word	0x2003e070
   d404c:	000d817c 	.word	0x000d817c
   d4050:	2003e0d8 	.word	0x2003e0d8
   d4054:	2003e0d8 	.word	0x2003e0d8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
   d405c:	b570      	push	{r4, r5, r6, lr}
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4062:	f002 f837 	bl	d60d4 <module_user_init_hook>
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
   d4070:	bd70      	pop	{r4, r5, r6, pc}
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d8144 	.word	0x000d8144
   d4080:	000d8168 	.word	0x000d8168

000d4084 <module_user_setup>:
   d4084:	f000 b852 	b.w	d412c <setup>

000d4088 <module_user_loop>:
   d4088:	b508      	push	{r3, lr}
   d408a:	f000 f8ad 	bl	d41e8 <loop>
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4092:	f001 bfe1 	b.w	d6058 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bbdd 	b.w	d5854 <malloc>

000d409a <_Znaj>:
   d409a:	f001 bbdb 	b.w	d5854 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bbe1 	b.w	d5864 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f001 bbdf 	b.w	d5864 <free>

000d40a6 <__cxa_guard_acquire>:
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_Z8callbackPcPhj>:
  delay(DELAY);
}

void callback(char* topic, byte* payload, unsigned int length){
  
   d40b6:	4770      	bx	lr

000d40b8 <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   d40b8:	4770      	bx	lr
	...

000d40bc <__tcf_2>:
String zPayload[AWAKE_DURATION / DELAY];
   d40bc:	b538      	push	{r3, r4, r5, lr}
   d40be:	4d04      	ldr	r5, [pc, #16]	; (d40d0 <__tcf_2+0x14>)
   d40c0:	2418      	movs	r4, #24
   d40c2:	eb05 1004 	add.w	r0, r5, r4, lsl #4
   d40c6:	f001 fe23 	bl	d5d10 <_ZN6StringD1Ev>
   d40ca:	3c01      	subs	r4, #1
   d40cc:	d2f9      	bcs.n	d40c2 <__tcf_2+0x6>
   d40ce:	bd38      	pop	{r3, r4, r5, pc}
   d40d0:	2003e4b4 	.word	0x2003e4b4

000d40d4 <__tcf_1>:
String yPayload[AWAKE_DURATION / DELAY];
   d40d4:	b538      	push	{r3, r4, r5, lr}
   d40d6:	4d04      	ldr	r5, [pc, #16]	; (d40e8 <__tcf_1+0x14>)
   d40d8:	2418      	movs	r4, #24
   d40da:	eb05 1004 	add.w	r0, r5, r4, lsl #4
   d40de:	f001 fe17 	bl	d5d10 <_ZN6StringD1Ev>
   d40e2:	3c01      	subs	r4, #1
   d40e4:	d2f9      	bcs.n	d40da <__tcf_1+0x6>
   d40e6:	bd38      	pop	{r3, r4, r5, pc}
   d40e8:	2003e324 	.word	0x2003e324

000d40ec <__tcf_0>:
String xPayload[AWAKE_DURATION / DELAY];
   d40ec:	b538      	push	{r3, r4, r5, lr}
   d40ee:	4d04      	ldr	r5, [pc, #16]	; (d4100 <__tcf_0+0x14>)
   d40f0:	2418      	movs	r4, #24
   d40f2:	eb05 1004 	add.w	r0, r5, r4, lsl #4
   d40f6:	f001 fe0b 	bl	d5d10 <_ZN6StringD1Ev>
   d40fa:	3c01      	subs	r4, #1
   d40fc:	d2f9      	bcs.n	d40f2 <__tcf_0+0x6>
   d40fe:	bd38      	pop	{r3, r4, r5, pc}
   d4100:	2003e194 	.word	0x2003e194

000d4104 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d4104:	b538      	push	{r3, r4, r5, lr}
   d4106:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d4108:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d410a:	b128      	cbz	r0, d4118 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d410c:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d410e:	210c      	movs	r1, #12
   d4110:	f002 feb1 	bl	d6e76 <_ZdlPvj>
            wakeupSource = next;
   d4114:	4628      	mov	r0, r5
        while (wakeupSource) {
   d4116:	e7f8      	b.n	d410a <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d4118:	4620      	mov	r0, r4
   d411a:	bd38      	pop	{r3, r4, r5, pc}

000d411c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d411c:	b510      	push	{r4, lr}
   d411e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4120:	6800      	ldr	r0, [r0, #0]
   d4122:	b108      	cbz	r0, d4128 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4124:	f001 fb9e 	bl	d5864 <free>
class SystemClass {
   d4128:	4620      	mov	r0, r4
   d412a:	bd10      	pop	{r4, pc}

000d412c <setup>:
void setup() {
   d412c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  Serial.begin(9600);
   d412e:	f002 f8ed 	bl	d630c <_Z16_fetch_usbserialv>
   d4132:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4136:	f002 f8dd 	bl	d62f4 <_ZN9USBSerial5beginEl>
  lis.begin(I2C_ADDRESS);
   d413a:	2118      	movs	r1, #24
   d413c:	4824      	ldr	r0, [pc, #144]	; (d41d0 <setup+0xa4>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d413e:	4d25      	ldr	r5, [pc, #148]	; (d41d4 <setup+0xa8>)
   d4140:	f000 ffd8 	bl	d50f4 <_ZN15Adafruit_LIS3DH5beginEh>
  lis.setRange(LIS3DH_RANGE_2_G);
   d4144:	4822      	ldr	r0, [pc, #136]	; (d41d0 <setup+0xa4>)
   d4146:	2100      	movs	r1, #0
   d4148:	f000 ffab 	bl	d50a2 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>
  lis.setClick(1, CLICK_THRESHHOLD);
   d414c:	2314      	movs	r3, #20
   d414e:	22ff      	movs	r2, #255	; 0xff
   d4150:	e9cd 3200 	strd	r3, r2, [sp]
   d4154:	481e      	ldr	r0, [pc, #120]	; (d41d0 <setup+0xa4>)
   d4156:	230a      	movs	r3, #10
   d4158:	223c      	movs	r2, #60	; 0x3c
   d415a:	2101      	movs	r1, #1
   d415c:	f000 ff60 	bl	d5020 <_ZN15Adafruit_LIS3DH8setClickEhhhhh>
  pinMode(INTERRUPT_PIN, INPUT);
   d4160:	2100      	movs	r1, #0
   d4162:	2005      	movs	r0, #5
   d4164:	f002 fe04 	bl	d6d70 <pinMode>
   d4168:	7d2b      	ldrb	r3, [r5, #20]
   d416a:	b19b      	cbz	r3, d4194 <setup+0x68>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d416c:	2303      	movs	r3, #3
   d416e:	722b      	strb	r3, [r5, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4170:	682b      	ldr	r3, [r5, #0]
   d4172:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4174:	b1a3      	cbz	r3, d41a0 <setup+0x74>
            if (start->type == type) {
   d4176:	889a      	ldrh	r2, [r3, #4]
   d4178:	2a01      	cmp	r2, #1
   d417a:	d006      	beq.n	d418a <setup+0x5e>
            start = start->next;
   d417c:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d417e:	e7f9      	b.n	d4174 <setup+0x48>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d4180:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d4182:	b16b      	cbz	r3, d41a0 <setup+0x74>
            if (start->type == type) {
   d4184:	889a      	ldrh	r2, [r3, #4]
   d4186:	2a01      	cmp	r2, #1
   d4188:	d1fa      	bne.n	d4180 <setup+0x54>
                if (gpioWakeup->pin == pin) {
   d418a:	899a      	ldrh	r2, [r3, #12]
   d418c:	2a05      	cmp	r2, #5
   d418e:	d1f7      	bne.n	d4180 <setup+0x54>
                    gpioWakeup->mode = mode;
   d4190:	2201      	movs	r2, #1
   d4192:	739a      	strb	r2, [r3, #14]
  timeLeft = AWAKE_DURATION + DELAY;
   d4194:	4b10      	ldr	r3, [pc, #64]	; (d41d8 <setup+0xac>)
   d4196:	f241 4250 	movw	r2, #5200	; 0x1450
   d419a:	601a      	str	r2, [r3, #0]
}
   d419c:	b003      	add	sp, #12
   d419e:	bd30      	pop	{r4, r5, pc}
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d41a0:	490e      	ldr	r1, [pc, #56]	; (d41dc <setup+0xb0>)
   d41a2:	2010      	movs	r0, #16
   d41a4:	f002 fe69 	bl	d6e7a <_ZnwjRKSt9nothrow_t>
   d41a8:	4604      	mov	r4, r0
   d41aa:	b170      	cbz	r0, d41ca <setup+0x9e>
   d41ac:	2210      	movs	r2, #16
   d41ae:	2100      	movs	r1, #0
   d41b0:	f003 fda6 	bl	d7d00 <memset>
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
            wakeupSource->base.next = config_.wakeup_sources;
   d41b4:	692a      	ldr	r2, [r5, #16]
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d41b6:	4b0a      	ldr	r3, [pc, #40]	; (d41e0 <setup+0xb4>)
   d41b8:	6023      	str	r3, [r4, #0]
            wakeupSource->base.next = config_.wakeup_sources;
   d41ba:	60a2      	str	r2, [r4, #8]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d41bc:	2301      	movs	r3, #1
            wakeupSource->pin = pin;
   d41be:	2205      	movs	r2, #5
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d41c0:	80a3      	strh	r3, [r4, #4]
            wakeupSource->pin = pin;
   d41c2:	81a2      	strh	r2, [r4, #12]
            wakeupSource->mode = mode;
   d41c4:	73a3      	strb	r3, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d41c6:	612c      	str	r4, [r5, #16]
   d41c8:	e7e4      	b.n	d4194 <setup+0x68>
                valid_ = false;
   d41ca:	7528      	strb	r0, [r5, #20]
                return *this;
   d41cc:	e7e2      	b.n	d4194 <setup+0x68>
   d41ce:	bf00      	nop
   d41d0:	2003e164 	.word	0x2003e164
   d41d4:	2003e148 	.word	0x2003e148
   d41d8:	2003e190 	.word	0x2003e190
   d41dc:	000d804c 	.word	0x000d804c
   d41e0:	00030010 	.word	0x00030010
   d41e4:	00000000 	.word	0x00000000

000d41e8 <loop>:
void loop() {
   d41e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  timeLeft -= DELAY;
   d41ea:	4a73      	ldr	r2, [pc, #460]	; (d43b8 <loop+0x1d0>)
   d41ec:	6813      	ldr	r3, [r2, #0]
   d41ee:	3bc8      	subs	r3, #200	; 0xc8
  if(timeLeft <= 0){
   d41f0:	2b00      	cmp	r3, #0
void loop() {
   d41f2:	b089      	sub	sp, #36	; 0x24
  timeLeft -= DELAY;
   d41f4:	6013      	str	r3, [r2, #0]
  if(timeLeft <= 0){
   d41f6:	f300 8082 	bgt.w	d42fe <loop+0x116>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d41fa:	4c70      	ldr	r4, [pc, #448]	; (d43bc <loop+0x1d4>)
   d41fc:	2300      	movs	r3, #0
   d41fe:	461a      	mov	r2, r3
   d4200:	4619      	mov	r1, r3
   d4202:	6860      	ldr	r0, [r4, #4]
   d4204:	f001 fad6 	bl	d57b4 <network_on>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4208:	2300      	movs	r3, #0
   d420a:	6860      	ldr	r0, [r4, #4]
   d420c:	461a      	mov	r2, r3
   d420e:	4619      	mov	r1, r3
   d4210:	f001 fab0 	bl	d5774 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4214:	2200      	movs	r2, #0
   d4216:	6860      	ldr	r0, [r4, #4]
   d4218:	4611      	mov	r1, r2
   d421a:	f001 fac3 	bl	d57a4 <network_ready>
    while(!WiFi.ready()){}
   d421e:	2800      	cmp	r0, #0
   d4220:	d0f8      	beq.n	d4214 <loop+0x2c>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d4222:	a804      	add	r0, sp, #16
   d4224:	f001 fb06 	bl	d5834 <spark_deviceID>
    client.connect(System.deviceID());
   d4228:	9904      	ldr	r1, [sp, #16]
   d422a:	4865      	ldr	r0, [pc, #404]	; (d43c0 <loop+0x1d8>)

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d422c:	4e65      	ldr	r6, [pc, #404]	; (d43c4 <loop+0x1dc>)
      client.publish(MQTT_PATH + "/x", xPayload[i]);
   d422e:	4f66      	ldr	r7, [pc, #408]	; (d43c8 <loop+0x1e0>)
   d4230:	4d63      	ldr	r5, [pc, #396]	; (d43c0 <loop+0x1d8>)
    client.connect(System.deviceID());
   d4232:	f000 fbb5 	bl	d49a0 <_ZN4MQTT7connectEPKc>
   d4236:	a804      	add	r0, sp, #16
   d4238:	f001 fd6a 	bl	d5d10 <_ZN6StringD1Ev>
   d423c:	2400      	movs	r4, #0
   d423e:	4631      	mov	r1, r6
   d4240:	a804      	add	r0, sp, #16
   d4242:	f001 fdb0 	bl	d5da6 <_ZN6StringC1EPKc>
   d4246:	4668      	mov	r0, sp
   d4248:	f001 faf4 	bl	d5834 <spark_deviceID>
      client.publish(MQTT_PATH + "/x", xPayload[i]);
   d424c:	4669      	mov	r1, sp
   d424e:	a804      	add	r0, sp, #16
   d4250:	f001 fe1f 	bl	d5e92 <_ZplRK15StringSumHelperRK6String>
   d4254:	4639      	mov	r1, r7
   d4256:	f001 fe28 	bl	d5eaa <_ZplRK15StringSumHelperPKc>
        operator const char*() const { return c_str(); }
   d425a:	4b5c      	ldr	r3, [pc, #368]	; (d43cc <loop+0x1e4>)
   d425c:	6801      	ldr	r1, [r0, #0]
   d425e:	58e2      	ldr	r2, [r4, r3]
   d4260:	4628      	mov	r0, r5
   d4262:	f000 fc28 	bl	d4ab6 <_ZN4MQTT7publishEPKcS1_>
   d4266:	4668      	mov	r0, sp
   d4268:	f001 fd52 	bl	d5d10 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d426c:	a804      	add	r0, sp, #16
   d426e:	f001 fd4f 	bl	d5d10 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
   d4272:	4631      	mov	r1, r6
   d4274:	a804      	add	r0, sp, #16
   d4276:	f001 fd96 	bl	d5da6 <_ZN6StringC1EPKc>
   d427a:	4668      	mov	r0, sp
   d427c:	f001 fada 	bl	d5834 <spark_deviceID>
      client.publish(MQTT_PATH + "/y", yPayload[i]);
   d4280:	4669      	mov	r1, sp
   d4282:	a804      	add	r0, sp, #16
   d4284:	f001 fe05 	bl	d5e92 <_ZplRK15StringSumHelperRK6String>
   d4288:	4951      	ldr	r1, [pc, #324]	; (d43d0 <loop+0x1e8>)
   d428a:	f001 fe0e 	bl	d5eaa <_ZplRK15StringSumHelperPKc>
        operator const char*() const { return c_str(); }
   d428e:	4b51      	ldr	r3, [pc, #324]	; (d43d4 <loop+0x1ec>)
   d4290:	6801      	ldr	r1, [r0, #0]
   d4292:	58e2      	ldr	r2, [r4, r3]
   d4294:	4628      	mov	r0, r5
   d4296:	f000 fc0e 	bl	d4ab6 <_ZN4MQTT7publishEPKcS1_>
   d429a:	4668      	mov	r0, sp
   d429c:	f001 fd38 	bl	d5d10 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d42a0:	a804      	add	r0, sp, #16
   d42a2:	f001 fd35 	bl	d5d10 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
   d42a6:	4631      	mov	r1, r6
   d42a8:	a804      	add	r0, sp, #16
   d42aa:	f001 fd7c 	bl	d5da6 <_ZN6StringC1EPKc>
   d42ae:	4668      	mov	r0, sp
   d42b0:	f001 fac0 	bl	d5834 <spark_deviceID>
      client.publish(MQTT_PATH + "/z", zPayload[i]);
   d42b4:	4669      	mov	r1, sp
   d42b6:	a804      	add	r0, sp, #16
   d42b8:	f001 fdeb 	bl	d5e92 <_ZplRK15StringSumHelperRK6String>
   d42bc:	4946      	ldr	r1, [pc, #280]	; (d43d8 <loop+0x1f0>)
   d42be:	f001 fdf4 	bl	d5eaa <_ZplRK15StringSumHelperPKc>
        operator const char*() const { return c_str(); }
   d42c2:	4b46      	ldr	r3, [pc, #280]	; (d43dc <loop+0x1f4>)
   d42c4:	6801      	ldr	r1, [r0, #0]
   d42c6:	58e2      	ldr	r2, [r4, r3]
   d42c8:	4628      	mov	r0, r5
   d42ca:	f000 fbf4 	bl	d4ab6 <_ZN4MQTT7publishEPKcS1_>
   d42ce:	4668      	mov	r0, sp
   d42d0:	f001 fd1e 	bl	d5d10 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d42d4:	a804      	add	r0, sp, #16
   d42d6:	f001 fd1b 	bl	d5d10 <_ZN6StringD1Ev>
      client.loop();
   d42da:	4628      	mov	r0, r5
   d42dc:	f000 fc47 	bl	d4b6e <_ZN4MQTT4loopEv>
      delay(MQTT_DELAY);
   d42e0:	3410      	adds	r4, #16
   d42e2:	20c8      	movs	r0, #200	; 0xc8
   d42e4:	f001 fe7e 	bl	d5fe4 <delay>
    for(int i = 0; i < AWAKE_DURATION / DELAY; i++){
   d42e8:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
   d42ec:	d1a7      	bne.n	d423e <loop+0x56>
    System.sleep(config);
   d42ee:	a804      	add	r0, sp, #16
   d42f0:	493b      	ldr	r1, [pc, #236]	; (d43e0 <loop+0x1f8>)
   d42f2:	f001 fbe1 	bl	d5ab8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d42f6:	9804      	ldr	r0, [sp, #16]
   d42f8:	b108      	cbz	r0, d42fe <loop+0x116>
            free(wakeupSource_);
   d42fa:	f001 fab3 	bl	d5864 <free>
  lis.read();
   d42fe:	4d39      	ldr	r5, [pc, #228]	; (d43e4 <loop+0x1fc>)
  xPayload[counter] = String(GRAVITY * lis.x_g);
   d4300:	4c39      	ldr	r4, [pc, #228]	; (d43e8 <loop+0x200>)
   d4302:	4e32      	ldr	r6, [pc, #200]	; (d43cc <loop+0x1e4>)
  lis.read();
   d4304:	4628      	mov	r0, r5
   d4306:	f000 ff47 	bl	d5198 <_ZN15Adafruit_LIS3DH4readEv>
  xPayload[counter] = String(GRAVITY * lis.x_g);
   d430a:	6823      	ldr	r3, [r4, #0]
   d430c:	68e8      	ldr	r0, [r5, #12]
   d430e:	eb06 1603 	add.w	r6, r6, r3, lsl #4
   d4312:	f003 f82d 	bl	d7370 <__aeabi_f2d>
   d4316:	a326      	add	r3, pc, #152	; (adr r3, d43b0 <loop+0x1c8>)
   d4318:	e9d3 2300 	ldrd	r2, r3, [r3]
   d431c:	f003 f880 	bl	d7420 <__aeabi_dmul>
   d4320:	ec41 0b10 	vmov	d0, r0, r1
   d4324:	2106      	movs	r1, #6
   d4326:	a804      	add	r0, sp, #16
   d4328:	f001 fd88 	bl	d5e3c <_ZN6StringC1Edi>
   d432c:	a904      	add	r1, sp, #16
   d432e:	4630      	mov	r0, r6
   d4330:	f001 fd6a 	bl	d5e08 <_ZN6StringaSEOS_>
   d4334:	a804      	add	r0, sp, #16
   d4336:	f001 fceb 	bl	d5d10 <_ZN6StringD1Ev>
  yPayload[counter] = String(GRAVITY * lis.y_g);
   d433a:	4e26      	ldr	r6, [pc, #152]	; (d43d4 <loop+0x1ec>)
   d433c:	6823      	ldr	r3, [r4, #0]
   d433e:	6928      	ldr	r0, [r5, #16]
   d4340:	eb06 1603 	add.w	r6, r6, r3, lsl #4
   d4344:	f003 f814 	bl	d7370 <__aeabi_f2d>
   d4348:	a319      	add	r3, pc, #100	; (adr r3, d43b0 <loop+0x1c8>)
   d434a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d434e:	f003 f867 	bl	d7420 <__aeabi_dmul>
   d4352:	ec41 0b10 	vmov	d0, r0, r1
   d4356:	2106      	movs	r1, #6
   d4358:	a804      	add	r0, sp, #16
   d435a:	f001 fd6f 	bl	d5e3c <_ZN6StringC1Edi>
   d435e:	a904      	add	r1, sp, #16
   d4360:	4630      	mov	r0, r6
   d4362:	f001 fd51 	bl	d5e08 <_ZN6StringaSEOS_>
   d4366:	a804      	add	r0, sp, #16
   d4368:	f001 fcd2 	bl	d5d10 <_ZN6StringD1Ev>
  zPayload[counter] = String(GRAVITY * lis.z_g);
   d436c:	4e1b      	ldr	r6, [pc, #108]	; (d43dc <loop+0x1f4>)
   d436e:	6823      	ldr	r3, [r4, #0]
   d4370:	6968      	ldr	r0, [r5, #20]
   d4372:	eb06 1603 	add.w	r6, r6, r3, lsl #4
   d4376:	f002 fffb 	bl	d7370 <__aeabi_f2d>
   d437a:	a30d      	add	r3, pc, #52	; (adr r3, d43b0 <loop+0x1c8>)
   d437c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4380:	f003 f84e 	bl	d7420 <__aeabi_dmul>
   d4384:	ec41 0b10 	vmov	d0, r0, r1
   d4388:	2106      	movs	r1, #6
   d438a:	a804      	add	r0, sp, #16
   d438c:	f001 fd56 	bl	d5e3c <_ZN6StringC1Edi>
   d4390:	a904      	add	r1, sp, #16
   d4392:	4630      	mov	r0, r6
   d4394:	f001 fd38 	bl	d5e08 <_ZN6StringaSEOS_>
   d4398:	a804      	add	r0, sp, #16
   d439a:	f001 fcb9 	bl	d5d10 <_ZN6StringD1Ev>
  counter++;
   d439e:	6823      	ldr	r3, [r4, #0]
  delay(DELAY);
   d43a0:	20c8      	movs	r0, #200	; 0xc8
  counter++;
   d43a2:	3301      	adds	r3, #1
   d43a4:	6023      	str	r3, [r4, #0]
  delay(DELAY);
   d43a6:	f001 fe1d 	bl	d5fe4 <delay>
}
   d43aa:	b009      	add	sp, #36	; 0x24
   d43ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d43ae:	bf00      	nop
   d43b0:	acd9e83e 	.word	0xacd9e83e
   d43b4:	40239cfa 	.word	0x40239cfa
   d43b8:	2003e190 	.word	0x2003e190
   d43bc:	2003e7c4 	.word	0x2003e7c4
   d43c0:	2003e0e8 	.word	0x2003e0e8
   d43c4:	000d7dc8 	.word	0x000d7dc8
   d43c8:	000d7dd6 	.word	0x000d7dd6
   d43cc:	2003e194 	.word	0x2003e194
   d43d0:	000d7dd9 	.word	0x000d7dd9
   d43d4:	2003e324 	.word	0x2003e324
   d43d8:	000d7ddc 	.word	0x000d7ddc
   d43dc:	2003e4b4 	.word	0x2003e4b4
   d43e0:	2003e148 	.word	0x2003e148
   d43e4:	2003e164 	.word	0x2003e164
   d43e8:	2003e160 	.word	0x2003e160

000d43ec <_ZN15Adafruit_LIS3DHD0Ev>:
   d43ec:	b510      	push	{r4, lr}
   d43ee:	212c      	movs	r1, #44	; 0x2c
   d43f0:	4604      	mov	r4, r0
   d43f2:	f002 fd40 	bl	d6e76 <_ZdlPvj>
   d43f6:	4620      	mov	r0, r4
   d43f8:	bd10      	pop	{r4, pc}
	...

000d43fc <_GLOBAL__sub_I_SystemMode>:
   d43fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
   d43fe:	4d35      	ldr	r5, [pc, #212]	; (d44d4 <_GLOBAL__sub_I_SystemMode+0xd8>)
    SleepResult() {}
   d4400:	4b35      	ldr	r3, [pc, #212]	; (d44d8 <_GLOBAL__sub_I_SystemMode+0xdc>)
   d4402:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4404:	2400      	movs	r4, #0
   d4406:	602c      	str	r4, [r5, #0]
   d4408:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d440a:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d440c:	2003      	movs	r0, #3
   d440e:	f001 f983 	bl	d5718 <set_system_mode>
SYSTEM_MODE(MANUAL)
   d4412:	4628      	mov	r0, r5
   d4414:	4a31      	ldr	r2, [pc, #196]	; (d44dc <_GLOBAL__sub_I_SystemMode+0xe0>)
   d4416:	4932      	ldr	r1, [pc, #200]	; (d44e0 <_GLOBAL__sub_I_SystemMode+0xe4>)
String xPayload[AWAKE_DURATION / DELAY];
   d4418:	4d32      	ldr	r5, [pc, #200]	; (d44e4 <_GLOBAL__sub_I_SystemMode+0xe8>)
   d441a:	4e33      	ldr	r6, [pc, #204]	; (d44e8 <_GLOBAL__sub_I_SystemMode+0xec>)
SYSTEM_MODE(MANUAL)
   d441c:	f002 fd26 	bl	d6e6c <__aeabi_atexit>
String xPayload[AWAKE_DURATION / DELAY];
   d4420:	1928      	adds	r0, r5, r4
   d4422:	4631      	mov	r1, r6
   d4424:	3410      	adds	r4, #16
   d4426:	f001 fcbe 	bl	d5da6 <_ZN6StringC1EPKc>
   d442a:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
   d442e:	d1f7      	bne.n	d4420 <_GLOBAL__sub_I_SystemMode+0x24>
   d4430:	4a2a      	ldr	r2, [pc, #168]	; (d44dc <_GLOBAL__sub_I_SystemMode+0xe0>)
   d4432:	492e      	ldr	r1, [pc, #184]	; (d44ec <_GLOBAL__sub_I_SystemMode+0xf0>)
String yPayload[AWAKE_DURATION / DELAY];
   d4434:	4d2e      	ldr	r5, [pc, #184]	; (d44f0 <_GLOBAL__sub_I_SystemMode+0xf4>)
   d4436:	4e2c      	ldr	r6, [pc, #176]	; (d44e8 <_GLOBAL__sub_I_SystemMode+0xec>)
String xPayload[AWAKE_DURATION / DELAY];
   d4438:	2000      	movs	r0, #0
   d443a:	f002 fd17 	bl	d6e6c <__aeabi_atexit>
   d443e:	2400      	movs	r4, #0
String yPayload[AWAKE_DURATION / DELAY];
   d4440:	1928      	adds	r0, r5, r4
   d4442:	4631      	mov	r1, r6
   d4444:	3410      	adds	r4, #16
   d4446:	f001 fcae 	bl	d5da6 <_ZN6StringC1EPKc>
   d444a:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
   d444e:	d1f7      	bne.n	d4440 <_GLOBAL__sub_I_SystemMode+0x44>
   d4450:	4a22      	ldr	r2, [pc, #136]	; (d44dc <_GLOBAL__sub_I_SystemMode+0xe0>)
   d4452:	4928      	ldr	r1, [pc, #160]	; (d44f4 <_GLOBAL__sub_I_SystemMode+0xf8>)
String zPayload[AWAKE_DURATION / DELAY];
   d4454:	4d28      	ldr	r5, [pc, #160]	; (d44f8 <_GLOBAL__sub_I_SystemMode+0xfc>)
   d4456:	4e24      	ldr	r6, [pc, #144]	; (d44e8 <_GLOBAL__sub_I_SystemMode+0xec>)
String yPayload[AWAKE_DURATION / DELAY];
   d4458:	2000      	movs	r0, #0
   d445a:	f002 fd07 	bl	d6e6c <__aeabi_atexit>
   d445e:	2400      	movs	r4, #0
String zPayload[AWAKE_DURATION / DELAY];
   d4460:	1928      	adds	r0, r5, r4
   d4462:	4631      	mov	r1, r6
   d4464:	3410      	adds	r4, #16
   d4466:	f001 fc9e 	bl	d5da6 <_ZN6StringC1EPKc>
   d446a:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
   d446e:	d1f7      	bne.n	d4460 <_GLOBAL__sub_I_SystemMode+0x64>
   d4470:	4a1a      	ldr	r2, [pc, #104]	; (d44dc <_GLOBAL__sub_I_SystemMode+0xe0>)
   d4472:	4922      	ldr	r1, [pc, #136]	; (d44fc <_GLOBAL__sub_I_SystemMode+0x100>)
   d4474:	2000      	movs	r0, #0
   d4476:	f002 fcf9 	bl	d6e6c <__aeabi_atexit>
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d447a:	4821      	ldr	r0, [pc, #132]	; (d4500 <_GLOBAL__sub_I_SystemMode+0x104>)
   d447c:	f000 fcda 	bl	d4e34 <_ZN15Adafruit_LIS3DHC1Ev>
MQTT client("lab.thewcl.com", 1883, callback);
   d4480:	2400      	movs	r4, #0
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d4482:	4a16      	ldr	r2, [pc, #88]	; (d44dc <_GLOBAL__sub_I_SystemMode+0xe0>)
   d4484:	491f      	ldr	r1, [pc, #124]	; (d4504 <_GLOBAL__sub_I_SystemMode+0x108>)
   d4486:	481e      	ldr	r0, [pc, #120]	; (d4500 <_GLOBAL__sub_I_SystemMode+0x104>)
   d4488:	f002 fcf0 	bl	d6e6c <__aeabi_atexit>
MQTT client("lab.thewcl.com", 1883, callback);
   d448c:	4b1e      	ldr	r3, [pc, #120]	; (d4508 <_GLOBAL__sub_I_SystemMode+0x10c>)
   d448e:	491f      	ldr	r1, [pc, #124]	; (d450c <_GLOBAL__sub_I_SystemMode+0x110>)
   d4490:	9400      	str	r4, [sp, #0]
   d4492:	f240 725b 	movw	r2, #1883	; 0x75b
   d4496:	481e      	ldr	r0, [pc, #120]	; (d4510 <_GLOBAL__sub_I_SystemMode+0x114>)
   d4498:	f000 f888 	bl	d45ac <_ZN4MQTTC1EPctPFvS0_PhjEb>
   d449c:	4a0f      	ldr	r2, [pc, #60]	; (d44dc <_GLOBAL__sub_I_SystemMode+0xe0>)
   d449e:	491d      	ldr	r1, [pc, #116]	; (d4514 <_GLOBAL__sub_I_SystemMode+0x118>)
   d44a0:	481b      	ldr	r0, [pc, #108]	; (d4510 <_GLOBAL__sub_I_SystemMode+0x114>)
   d44a2:	f002 fce3 	bl	d6e6c <__aeabi_atexit>
        : config_(config) {
   d44a6:	481c      	ldr	r0, [pc, #112]	; (d4518 <_GLOBAL__sub_I_SystemMode+0x11c>)
SystemSleepConfiguration config;
   d44a8:	491c      	ldr	r1, [pc, #112]	; (d451c <_GLOBAL__sub_I_SystemMode+0x120>)
              valid_(true) {
   d44aa:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d44ae:	4603      	mov	r3, r0
   d44b0:	1d02      	adds	r2, r0, #4
   d44b2:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d44b6:	709c      	strb	r4, [r3, #2]
   d44b8:	2301      	movs	r3, #1
   d44ba:	7503      	strb	r3, [r0, #20]
   d44bc:	4a07      	ldr	r2, [pc, #28]	; (d44dc <_GLOBAL__sub_I_SystemMode+0xe0>)
        config_.size = sizeof(hal_sleep_config_t);
   d44be:	4b18      	ldr	r3, [pc, #96]	; (d4520 <_GLOBAL__sub_I_SystemMode+0x124>)
   d44c0:	6043      	str	r3, [r0, #4]
        config_.wakeup_sources = nullptr;
   d44c2:	e9c0 4403 	strd	r4, r4, [r0, #12]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d44c6:	7204      	strb	r4, [r0, #8]
   d44c8:	b002      	add	sp, #8
   d44ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
SystemSleepConfiguration config;
   d44ce:	f002 bccd 	b.w	d6e6c <__aeabi_atexit>
   d44d2:	bf00      	nop
   d44d4:	2003e0dc 	.word	0x2003e0dc
   d44d8:	ffff0000 	.word	0xffff0000
   d44dc:	2003e0d8 	.word	0x2003e0d8
   d44e0:	000d411d 	.word	0x000d411d
   d44e4:	2003e194 	.word	0x2003e194
   d44e8:	000d7e95 	.word	0x000d7e95
   d44ec:	000d40ed 	.word	0x000d40ed
   d44f0:	2003e324 	.word	0x2003e324
   d44f4:	000d40d5 	.word	0x000d40d5
   d44f8:	2003e4b4 	.word	0x2003e4b4
   d44fc:	000d40bd 	.word	0x000d40bd
   d4500:	2003e164 	.word	0x2003e164
   d4504:	000d40b9 	.word	0x000d40b9
   d4508:	000d40b7 	.word	0x000d40b7
   d450c:	000d7ddf 	.word	0x000d7ddf
   d4510:	2003e0e8 	.word	0x2003e0e8
   d4514:	000d4da1 	.word	0x000d4da1
   d4518:	2003e148 	.word	0x2003e148
   d451c:	000d4105 	.word	0x000d4105
   d4520:	00030010 	.word	0x00030010

000d4524 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   d4524:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   d4528:	b510      	push	{r4, lr}
   d452a:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   d452c:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   d452e:	b113      	cbz	r3, d4536 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   d4530:	6d88      	ldr	r0, [r1, #88]	; 0x58
   d4532:	f000 ff61 	bl	d53f8 <os_mutex_lock>
#endif
#endif
#endif
        }
   d4536:	4620      	mov	r0, r4
   d4538:	bd10      	pop	{r4, pc}

000d453a <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   d453a:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   d453c:	6803      	ldr	r3, [r0, #0]
   d453e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   d4542:	4604      	mov	r4, r0
            if (mqtt->thread)
   d4544:	b112      	cbz	r2, d454c <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   d4546:	6d98      	ldr	r0, [r3, #88]	; 0x58
   d4548:	f000 ff5e 	bl	d5408 <os_mutex_unlock>
#endif
#endif
#endif
        }
   d454c:	4620      	mov	r0, r4
   d454e:	bd10      	pop	{r4, pc}

000d4550 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   d4550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4552:	461f      	mov	r7, r3
   d4554:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d4558:	4604      	mov	r4, r0
   d455a:	460d      	mov	r5, r1
   d455c:	4616      	mov	r6, r2
    if (thread) {
   d455e:	b12b      	cbz	r3, d456c <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x1c>
        this->thread = true;
   d4560:	2301      	movs	r3, #1
   d4562:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   d4566:	3058      	adds	r0, #88	; 0x58
   d4568:	f000 ff3e 	bl	d53e8 <os_mutex_create>
    }
    this->callback = callback;
   d456c:	9b08      	ldr	r3, [sp, #32]
   d456e:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   d4570:	2300      	movs	r3, #0
   d4572:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   d4574:	b106      	cbz	r6, d4578 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x28>
        this->ip = ip;
   d4576:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   d4578:	b125      	cbz	r5, d4584 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x34>
        this->domain = domain;
   d457a:	4629      	mov	r1, r5
   d457c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4580:	f001 fc4a 	bl	d5e18 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d4584:	9b06      	ldr	r3, [sp, #24]
   d4586:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d4588:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   d458a:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   d458c:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d4590:	2bff      	cmp	r3, #255	; 0xff
   d4592:	bfb8      	it	lt
   d4594:	23ff      	movlt	r3, #255	; 0xff
   d4596:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d459a:	b108      	cbz	r0, d45a0 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x50>
      delete[] buffer;
   d459c:	f7ff fd81 	bl	d40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d45a0:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d45a4:	f7ff fd79 	bl	d409a <_Znaj>
   d45a8:	61e0      	str	r0, [r4, #28]
}
   d45aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d45ac <_ZN4MQTTC1EPctPFvS0_PhjEb>:
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d45ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d45b0:	4604      	mov	r4, r0
            bool thread) {
   d45b2:	2500      	movs	r5, #0
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d45b4:	4617      	mov	r7, r2
   d45b6:	4698      	mov	r8, r3
   d45b8:	460e      	mov	r6, r1
            bool thread) {
   d45ba:	f002 fa1b 	bl	d69f4 <_ZN9TCPClientC1Ev>
   d45be:	490d      	ldr	r1, [pc, #52]	; (d45f4 <_ZN4MQTTC1EPctPFvS0_PhjEb+0x48>)
   d45c0:	61e5      	str	r5, [r4, #28]
   d45c2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d45c6:	f001 fbee 	bl	d5da6 <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d45ca:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   d45ce:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d45d0:	e9cd 8302 	strd	r8, r3, [sp, #8]
   d45d4:	22ff      	movs	r2, #255	; 0xff
   d45d6:	230f      	movs	r3, #15
   d45d8:	e9cd 3200 	strd	r3, r2, [sp]
   d45dc:	4620      	mov	r0, r4
            bool thread) {
   d45de:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d45e2:	463b      	mov	r3, r7
   d45e4:	462a      	mov	r2, r5
   d45e6:	4631      	mov	r1, r6
   d45e8:	f7ff ffb2 	bl	d4550 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>
}
   d45ec:	4620      	mov	r0, r4
   d45ee:	b004      	add	sp, #16
   d45f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d45f4:	000d7e95 	.word	0x000d7e95

000d45f8 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d45f8:	b510      	push	{r4, lr}
   d45fa:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d45fc:	4620      	mov	r0, r4
   d45fe:	f002 f955 	bl	d68ac <_ZN9TCPClient9availableEv>
   d4602:	2800      	cmp	r0, #0
   d4604:	d0fa      	beq.n	d45fc <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d4606:	4620      	mov	r0, r4
   d4608:	f002 f889 	bl	d671e <_ZN9TCPClient4readEv>
}
   d460c:	b2c0      	uxtb	r0, r0
   d460e:	bd10      	pop	{r4, pc}

000d4610 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4614:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d4616:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4618:	460f      	mov	r7, r1
    buffer[len++] = readByte();
   d461a:	f7ff ffed 	bl	d45f8 <_ZN4MQTT8readByteEv>
   d461e:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d4620:	69eb      	ldr	r3, [r5, #28]
   d4622:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d4626:	f04f 0901 	mov.w	r9, #1
   d462a:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d462e:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
   d4632:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d4634:	4628      	mov	r0, r5
   d4636:	f7ff ffdf 	bl	d45f8 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d463a:	4626      	mov	r6, r4
   d463c:	69eb      	ldr	r3, [r5, #28]
   d463e:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d4640:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d4644:	fb13 f309 	smulbb	r3, r3, r9
   d4648:	4498      	add	r8, r3
        buffer[len++] = digit;
   d464a:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d464c:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   d464e:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d4650:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
   d4654:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d4658:	d4ec      	bmi.n	d4634 <_ZN4MQTT10readPacketEPh+0x24>
    *lengthLength = len-1;
   d465a:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d465c:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   d4660:	703b      	strb	r3, [r7, #0]
    if (isPublish) {
   d4662:	d124      	bne.n	d46ae <_ZN4MQTT10readPacketEPh+0x9e>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d4664:	4628      	mov	r0, r5
   d4666:	69ef      	ldr	r7, [r5, #28]
   d4668:	f7ff ffc6 	bl	d45f8 <_ZN4MQTT8readByteEv>
   d466c:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
   d466e:	4628      	mov	r0, r5
   d4670:	69ef      	ldr	r7, [r5, #28]
   d4672:	1cf4      	adds	r4, r6, #3
   d4674:	f7ff ffc0 	bl	d45f8 <_ZN4MQTT8readByteEv>
        buffer[len++] = readByte();
   d4678:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   d467a:	b2b6      	uxth	r6, r6
   d467c:	b2a4      	uxth	r4, r4
   d467e:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d4680:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d4682:	b2b6      	uxth	r6, r6
   d4684:	46b1      	mov	r9, r6
   d4686:	4627      	mov	r7, r4
   d4688:	45c1      	cmp	r9, r8
   d468a:	d212      	bcs.n	d46b2 <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d468c:	4628      	mov	r0, r5
   d468e:	f7ff ffb3 	bl	d45f8 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d4692:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d4696:	42bb      	cmp	r3, r7
            buffer[len] = digit;
   d4698:	bf88      	it	hi
   d469a:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
   d469c:	f109 0901 	add.w	r9, r9, #1
            buffer[len] = digit;
   d46a0:	bf88      	it	hi
   d46a2:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
   d46a4:	3701      	adds	r7, #1
   d46a6:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
   d46a8:	fa1f f989 	uxth.w	r9, r9
   d46ac:	e7ec      	b.n	d4688 <_ZN4MQTT10readPacketEPh+0x78>
    uint8_t start = 0;
   d46ae:	2600      	movs	r6, #0
   d46b0:	e7e7      	b.n	d4682 <_ZN4MQTT10readPacketEPh+0x72>
   d46b2:	eba8 0006 	sub.w	r0, r8, r6
   d46b6:	45b0      	cmp	r8, r6
   d46b8:	bf2c      	ite	cs
   d46ba:	4606      	movcs	r6, r0
   d46bc:	2600      	movcc	r6, #0
   d46be:	4434      	add	r4, r6
    }

    if (len > this->maxpacketsize) {
   d46c0:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
   d46c4:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d46c6:	42a0      	cmp	r0, r4
   d46c8:	bf2c      	ite	cs
   d46ca:	4620      	movcs	r0, r4
   d46cc:	2000      	movcc	r0, #0
   d46ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d46d2 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d46d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d46d4:	468c      	mov	ip, r1
   d46d6:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d46d8:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d46da:	4607      	mov	r7, r0
    uint8_t llen = 0;
   d46dc:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   d46de:	46ae      	mov	lr, r5
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d46e0:	a802      	add	r0, sp, #8
        digit = len % 128;
   d46e2:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        if (len > 0) {
   d46e6:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   d46ea:	f103 0401 	add.w	r4, r3, #1
   d46ee:	4403      	add	r3, r0
            digit |= 0x80;
   d46f0:	bf88      	it	hi
   d46f2:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        llen++;
    } while(len > 0);
   d46f6:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   d46fa:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
   d46fe:	b2e4      	uxtb	r4, r4
   d4700:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
   d4704:	d810      	bhi.n	d4728 <_ZN4MQTT5writeEhPht+0x56>

    buf[4-llen] = header;
   d4706:	f1c4 0304 	rsb	r3, r4, #4
   d470a:	18d1      	adds	r1, r2, r3
   d470c:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d4710:	f1c4 0305 	rsb	r3, r4, #5
   d4714:	4413      	add	r3, r2
   d4716:	a801      	add	r0, sp, #4
   d4718:	3205      	adds	r2, #5
   d471a:	4293      	cmp	r3, r2
   d471c:	d006      	beq.n	d472c <_ZN4MQTT5writeEhPht+0x5a>
        buf[5-llen+i] = lenBuf[i];
   d471e:	f810 5b01 	ldrb.w	r5, [r0], #1
   d4722:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
   d4726:	e7f8      	b.n	d471a <_ZN4MQTT5writeEhPht+0x48>
        lenBuf[pos++] = digit;
   d4728:	4623      	mov	r3, r4
   d472a:	e7d8      	b.n	d46de <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d472c:	1c72      	adds	r2, r6, #1
   d472e:	4422      	add	r2, r4
   d4730:	4638      	mov	r0, r7
   d4732:	f001 ff1e 	bl	d6572 <_ZN9TCPClient5writeEPKhj>
   d4736:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4738:	f000 fe4e 	bl	d53d8 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d473c:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   d473e:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d4740:	4432      	add	r2, r6
   d4742:	b2a8      	uxth	r0, r5
}
   d4744:	1a13      	subs	r3, r2, r0
   d4746:	4258      	negs	r0, r3
   d4748:	4158      	adcs	r0, r3
   d474a:	b003      	add	sp, #12
   d474c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d474e <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d474e:	b513      	push	{r0, r1, r4, lr}
   d4750:	4604      	mov	r4, r0
    MutexLocker lock(this);
   d4752:	4601      	mov	r1, r0
   d4754:	a801      	add	r0, sp, #4
   d4756:	f7ff fee5 	bl	d4524 <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
   d475a:	69e3      	ldr	r3, [r4, #28]
   d475c:	22e0      	movs	r2, #224	; 0xe0
   d475e:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d4760:	69e3      	ldr	r3, [r4, #28]
   d4762:	2200      	movs	r2, #0
   d4764:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   d4766:	69e1      	ldr	r1, [r4, #28]
   d4768:	2202      	movs	r2, #2
   d476a:	4620      	mov	r0, r4
   d476c:	f001 ff01 	bl	d6572 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d4770:	4620      	mov	r0, r4
   d4772:	f002 f8f5 	bl	d6960 <_ZN9TCPClient4stopEv>
   d4776:	f000 fe2f 	bl	d53d8 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d477a:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
   d477e:	a801      	add	r0, sp, #4
   d4780:	f7ff fedb 	bl	d453a <_ZN4MQTT11MutexLockerD1Ev>
}
   d4784:	b002      	add	sp, #8
   d4786:	bd10      	pop	{r4, pc}

000d4788 <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d4788:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d478a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d478c:	4604      	mov	r4, r0
    pos += 2;
   d478e:	b298      	uxth	r0, r3
   d4790:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   d4792:	5ccd      	ldrb	r5, [r1, r3]
   d4794:	b155      	cbz	r5, d47ac <_ZN4MQTT11writeStringEPKcPht+0x24>
   d4796:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d479a:	4286      	cmp	r6, r0
   d479c:	f103 0701 	add.w	r7, r3, #1
   d47a0:	d904      	bls.n	d47ac <_ZN4MQTT11writeStringEPKcPht+0x24>
        buf[pos++] = *idp++;
   d47a2:	1c46      	adds	r6, r0, #1
   d47a4:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   d47a6:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   d47a8:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
   d47aa:	e7f2      	b.n	d4792 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d47ac:	b299      	uxth	r1, r3
   d47ae:	1a44      	subs	r4, r0, r1
   d47b0:	4422      	add	r2, r4
   d47b2:	1209      	asrs	r1, r1, #8
   d47b4:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d47b8:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   d47bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d47be <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d47be:	b538      	push	{r3, r4, r5, lr}
   d47c0:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   d47c2:	f001 feec 	bl	d659e <_ZN9TCPClient9connectedEv>
   d47c6:	2800      	cmp	r0, #0
   d47c8:	bf14      	ite	ne
   d47ca:	2501      	movne	r5, #1
   d47cc:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   d47ce:	d102      	bne.n	d47d6 <_ZN4MQTT11isConnectedEv+0x18>
   d47d0:	4620      	mov	r0, r4
   d47d2:	f002 f8c5 	bl	d6960 <_ZN9TCPClient4stopEv>
    return rc;
}
   d47d6:	4628      	mov	r0, r5
   d47d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d47dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d47dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d47e0:	b088      	sub	sp, #32
   d47e2:	4604      	mov	r4, r0
   d47e4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   d47e8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   d47ec:	4689      	mov	r9, r1
   d47ee:	4617      	mov	r7, r2
   d47f0:	461e      	mov	r6, r3
    if (!isConnected()) {
   d47f2:	f7ff ffe4 	bl	d47be <_ZN4MQTT11isConnectedEv>
   d47f6:	4605      	mov	r5, r0
   d47f8:	2800      	cmp	r0, #0
   d47fa:	f040 80cb 	bne.w	d4994 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b8>
        MutexLocker lock(this);
   d47fe:	4621      	mov	r1, r4
   d4800:	a801      	add	r0, sp, #4
   d4802:	f7ff fe8f 	bl	d4524 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   d4806:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4808:	2900      	cmp	r1, #0
   d480a:	f040 8087 	bne.w	d491c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x140>
            result = _client.connect(this->domain.c_str(), this->port);
   d480e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d4812:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d4814:	462b      	mov	r3, r5
   d4816:	4620      	mov	r0, r4
   d4818:	f002 f900 	bl	d6a1c <_ZN9TCPClient7connectEPKctm>
        if (result) {
   d481c:	2800      	cmp	r0, #0
   d481e:	d079      	beq.n	d4914 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            nextMsgId = 1;
   d4820:	2301      	movs	r3, #1
   d4822:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   d4824:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   d4828:	69e2      	ldr	r2, [r4, #28]
   d482a:	2b04      	cmp	r3, #4
   d482c:	f040 8081 	bne.w	d4932 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4830:	4b59      	ldr	r3, [pc, #356]	; (d4998 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>)
   d4832:	6818      	ldr	r0, [r3, #0]
   d4834:	8899      	ldrh	r1, [r3, #4]
   d4836:	799b      	ldrb	r3, [r3, #6]
   d4838:	f8ad 100c 	strh.w	r1, [sp, #12]
   d483c:	f88d 300e 	strb.w	r3, [sp, #14]
   d4840:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d4842:	f8c2 0005 	str.w	r0, [r2, #5]
   d4846:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d484a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d484e:	f8a2 1009 	strh.w	r1, [r2, #9]
   d4852:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   d4854:	230c      	movs	r3, #12
            if (willTopic) {
   d4856:	f1b8 0f00 	cmp.w	r8, #0
   d485a:	d07f      	beq.n	d495c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d485c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   d4860:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   d4864:	0140      	lsls	r0, r0, #5
   d4866:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   d486a:	f040 0006 	orr.w	r0, r0, #6
   d486e:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   d4870:	f1ba 0f00 	cmp.w	sl, #0
   d4874:	d101      	bne.n	d487a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x9e>
              v = v&0xfd;
   d4876:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   d487a:	b11f      	cbz	r7, d4884 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
                if(pass != NULL) {
   d487c:	2e00      	cmp	r6, #0
   d487e:	d16f      	bne.n	d4960 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = v|0x80;
   d4880:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   d4884:	69e2      	ldr	r2, [r4, #28]
   d4886:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   d4888:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d488a:	69e1      	ldr	r1, [r4, #28]
   d488c:	1c58      	adds	r0, r3, #1
   d488e:	1212      	asrs	r2, r2, #8
   d4890:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d4892:	1c9a      	adds	r2, r3, #2
   d4894:	69e1      	ldr	r1, [r4, #28]
   d4896:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d4898:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d489a:	3303      	adds	r3, #3
   d489c:	69e2      	ldr	r2, [r4, #28]
   d489e:	4649      	mov	r1, r9
   d48a0:	4620      	mov	r0, r4
   d48a2:	f7ff ff71 	bl	d4788 <_ZN4MQTT11writeStringEPKcPht>
   d48a6:	4603      	mov	r3, r0
            if (willTopic) {
   d48a8:	f1b8 0f00 	cmp.w	r8, #0
   d48ac:	d00b      	beq.n	d48c6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xea>
                length = writeString(willTopic, buffer, length);
   d48ae:	69e2      	ldr	r2, [r4, #28]
   d48b0:	4641      	mov	r1, r8
   d48b2:	4620      	mov	r0, r4
   d48b4:	f7ff ff68 	bl	d4788 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d48b8:	69e2      	ldr	r2, [r4, #28]
   d48ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   d48bc:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   d48be:	4620      	mov	r0, r4
   d48c0:	f7ff ff62 	bl	d4788 <_ZN4MQTT11writeStringEPKcPht>
   d48c4:	4603      	mov	r3, r0
            if(user != NULL) {
   d48c6:	b167      	cbz	r7, d48e2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                length = writeString(user,buffer,length);
   d48c8:	69e2      	ldr	r2, [r4, #28]
   d48ca:	4639      	mov	r1, r7
   d48cc:	4620      	mov	r0, r4
   d48ce:	f7ff ff5b 	bl	d4788 <_ZN4MQTT11writeStringEPKcPht>
   d48d2:	4603      	mov	r3, r0
                if(pass != NULL) {
   d48d4:	b12e      	cbz	r6, d48e2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                    length = writeString(pass,buffer,length);
   d48d6:	69e2      	ldr	r2, [r4, #28]
   d48d8:	4631      	mov	r1, r6
   d48da:	4620      	mov	r0, r4
   d48dc:	f7ff ff54 	bl	d4788 <_ZN4MQTT11writeStringEPKcPht>
   d48e0:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   d48e2:	3b05      	subs	r3, #5
   d48e4:	69e2      	ldr	r2, [r4, #28]
   d48e6:	b29b      	uxth	r3, r3
   d48e8:	2110      	movs	r1, #16
   d48ea:	4620      	mov	r0, r4
   d48ec:	f7ff fef1 	bl	d46d2 <_ZN4MQTT5writeEhPht>
   d48f0:	f000 fd72 	bl	d53d8 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   d48f4:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   d48f8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   d48fc:	4620      	mov	r0, r4
   d48fe:	f001 ffd5 	bl	d68ac <_ZN9TCPClient9availableEv>
   d4902:	bb80      	cbnz	r0, d4966 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18a>
   d4904:	f000 fd68 	bl	d53d8 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   d4908:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d490a:	1ac0      	subs	r0, r0, r3
   d490c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d490e:	4373      	muls	r3, r6
   d4910:	4298      	cmp	r0, r3
   d4912:	d9f3      	bls.n	d48fc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
        _client.stop();
   d4914:	4620      	mov	r0, r4
   d4916:	f002 f823 	bl	d6960 <_ZN9TCPClient4stopEv>
   d491a:	e034      	b.n	d4986 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1aa>
            result = _client.connect(this->ip, this->port);
   d491c:	a802      	add	r0, sp, #8
   d491e:	f001 fc89 	bl	d6234 <_ZN9IPAddressC1EPKh>
   d4922:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d4926:	462b      	mov	r3, r5
   d4928:	a902      	add	r1, sp, #8
   d492a:	4620      	mov	r0, r4
   d492c:	f001 ff43 	bl	d67b6 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4930:	e774      	b.n	d481c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d4932:	4b1a      	ldr	r3, [pc, #104]	; (d499c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   d4934:	6818      	ldr	r0, [r3, #0]
   d4936:	6859      	ldr	r1, [r3, #4]
   d4938:	7a1b      	ldrb	r3, [r3, #8]
   d493a:	f10d 0c08 	add.w	ip, sp, #8
   d493e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   d4942:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d4946:	ab02      	add	r3, sp, #8
   d4948:	cb03      	ldmia	r3!, {r0, r1}
   d494a:	f8c2 0005 	str.w	r0, [r2, #5]
   d494e:	f8c2 1009 	str.w	r1, [r2, #9]
   d4952:	f89c 3000 	ldrb.w	r3, [ip]
   d4956:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d4958:	230e      	movs	r3, #14
   d495a:	e77c      	b.n	d4856 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   d495c:	2002      	movs	r0, #2
   d495e:	e787      	b.n	d4870 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x94>
                    v = v|(0x80>>1);
   d4960:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   d4964:	e78e      	b.n	d4884 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
            uint16_t len = readPacket(&llen);
   d4966:	a902      	add	r1, sp, #8
   d4968:	4620      	mov	r0, r4
   d496a:	f7ff fe51 	bl	d4610 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   d496e:	2804      	cmp	r0, #4
   d4970:	d1d0      	bne.n	d4914 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
                if (buffer[3] == CONN_ACCEPT) {
   d4972:	69e3      	ldr	r3, [r4, #28]
   d4974:	78de      	ldrb	r6, [r3, #3]
   d4976:	2e00      	cmp	r6, #0
   d4978:	d1cc      	bne.n	d4914 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
   d497a:	f000 fd2d 	bl	d53d8 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   d497e:	2501      	movs	r5, #1
                    lastInActivity = millis();
   d4980:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d4982:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   d4986:	a801      	add	r0, sp, #4
   d4988:	f7ff fdd7 	bl	d453a <_ZN4MQTT11MutexLockerD1Ev>
}
   d498c:	4628      	mov	r0, r5
   d498e:	b008      	add	sp, #32
   d4990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   d4994:	2500      	movs	r5, #0
   d4996:	e7f9      	b.n	d498c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>
   d4998:	000d7dee 	.word	0x000d7dee
   d499c:	000d7df5 	.word	0x000d7df5

000d49a0 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   d49a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d49a2:	2301      	movs	r3, #1
   d49a4:	2204      	movs	r2, #4
   d49a6:	e9cd 3204 	strd	r3, r2, [sp, #16]
   d49aa:	2300      	movs	r3, #0
   d49ac:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d49b0:	e9cd 3300 	strd	r3, r3, [sp]
   d49b4:	461a      	mov	r2, r3
   d49b6:	f7ff ff11 	bl	d47dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d49ba:	b007      	add	sp, #28
   d49bc:	f85d fb04 	ldr.w	pc, [sp], #4

000d49c0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d49c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d49c4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   d49c8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   d49cc:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   d49d0:	4604      	mov	r4, r0
   d49d2:	468b      	mov	fp, r1
   d49d4:	4616      	mov	r6, r2
   d49d6:	461f      	mov	r7, r3
    if (isConnected()) {
   d49d8:	f7ff fef1 	bl	d47be <_ZN4MQTT11isConnectedEv>
   d49dc:	4682      	mov	sl, r0
   d49de:	2800      	cmp	r0, #0
   d49e0:	d051      	beq.n	d4a86 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   d49e2:	4621      	mov	r1, r4
   d49e4:	a801      	add	r0, sp, #4
   d49e6:	f7ff fd9d 	bl	d4524 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   d49ea:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d49ee:	69e0      	ldr	r0, [r4, #28]
   d49f0:	2100      	movs	r1, #0
   d49f2:	f003 f985 	bl	d7d00 <memset>
        length = writeString(topic, buffer, length);
   d49f6:	2305      	movs	r3, #5
   d49f8:	69e2      	ldr	r2, [r4, #28]
   d49fa:	4659      	mov	r1, fp
   d49fc:	4620      	mov	r0, r4
   d49fe:	f7ff fec3 	bl	d4788 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   d4a02:	1e6b      	subs	r3, r5, #1
   d4a04:	2b01      	cmp	r3, #1
   d4a06:	d815      	bhi.n	d4a34 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   d4a08:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4a0a:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   d4a0c:	3101      	adds	r1, #1
   d4a0e:	b289      	uxth	r1, r1
   d4a10:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4a12:	1209      	asrs	r1, r1, #8
   d4a14:	5419      	strb	r1, [r3, r0]
   d4a16:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   d4a18:	69e3      	ldr	r3, [r4, #28]
   d4a1a:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4a1c:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   d4a1e:	3002      	adds	r0, #2
   d4a20:	5499      	strb	r1, [r3, r2]
   d4a22:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d4a24:	f1b8 0f00 	cmp.w	r8, #0
   d4a28:	d004      	beq.n	d4a34 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   d4a2a:	8c23      	ldrh	r3, [r4, #32]
   d4a2c:	1c5a      	adds	r2, r3, #1
   d4a2e:	8422      	strh	r2, [r4, #32]
   d4a30:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d4a34:	2100      	movs	r1, #0
   d4a36:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d4a38:	428f      	cmp	r7, r1
   d4a3a:	69e2      	ldr	r2, [r4, #28]
   d4a3c:	b29b      	uxth	r3, r3
   d4a3e:	d90a      	bls.n	d4a56 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   d4a40:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   d4a44:	459c      	cmp	ip, r3
   d4a46:	d906      	bls.n	d4a56 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   d4a48:	f816 c001 	ldrb.w	ip, [r6, r1]
   d4a4c:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d4a50:	3101      	adds	r1, #1
   d4a52:	b289      	uxth	r1, r1
   d4a54:	e7ef      	b.n	d4a36 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   d4a56:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   d4a5a:	2900      	cmp	r1, #0
   d4a5c:	bf0c      	ite	eq
   d4a5e:	2130      	moveq	r1, #48	; 0x30
   d4a60:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   d4a62:	f1b9 0f00 	cmp.w	r9, #0
   d4a66:	d001      	beq.n	d4a6c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   d4a68:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   d4a6c:	2d02      	cmp	r5, #2
   d4a6e:	d10e      	bne.n	d4a8e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   d4a70:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   d4a74:	3b05      	subs	r3, #5
   d4a76:	b29b      	uxth	r3, r3
   d4a78:	4620      	mov	r0, r4
   d4a7a:	f7ff fe2a 	bl	d46d2 <_ZN4MQTT5writeEhPht>
   d4a7e:	4682      	mov	sl, r0
        MutexLocker lock(this);
   d4a80:	a801      	add	r0, sp, #4
   d4a82:	f7ff fd5a 	bl	d453a <_ZN4MQTT11MutexLockerD1Ev>
}
   d4a86:	4650      	mov	r0, sl
   d4a88:	b003      	add	sp, #12
   d4a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   d4a8e:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d4a90:	bf08      	it	eq
   d4a92:	f041 0102 	orreq.w	r1, r1, #2
   d4a96:	e7ed      	b.n	d4a74 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000d4a98 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d4a98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d4a9a:	9c08      	ldr	r4, [sp, #32]
   d4a9c:	9403      	str	r4, [sp, #12]
   d4a9e:	2400      	movs	r4, #0
   d4aa0:	9402      	str	r4, [sp, #8]
   d4aa2:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d4aa6:	9401      	str	r4, [sp, #4]
   d4aa8:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4aac:	9400      	str	r4, [sp, #0]
   d4aae:	f7ff ff87 	bl	d49c0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d4ab2:	b004      	add	sp, #16
   d4ab4:	bd10      	pop	{r4, pc}

000d4ab6 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   d4ab6:	b530      	push	{r4, r5, lr}
   d4ab8:	b087      	sub	sp, #28
   d4aba:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d4abc:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   d4abe:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d4ac0:	9204      	str	r2, [sp, #16]
   d4ac2:	f003 f95b 	bl	d7d7c <strlen>
   d4ac6:	2500      	movs	r5, #0
   d4ac8:	4603      	mov	r3, r0
   d4aca:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d4ace:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d4ad2:	9500      	str	r5, [sp, #0]
   d4ad4:	4620      	mov	r0, r4
   d4ad6:	f7ff ffdf 	bl	d4a98 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d4ada:	b007      	add	sp, #28
   d4adc:	bd30      	pop	{r4, r5, pc}

000d4ade <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   d4ade:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4ae0:	4604      	mov	r4, r0
   d4ae2:	460e      	mov	r6, r1
    if (isConnected()) {
   d4ae4:	f7ff fe6b 	bl	d47be <_ZN4MQTT11isConnectedEv>
   d4ae8:	4605      	mov	r5, r0
   d4aea:	b1c8      	cbz	r0, d4b20 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   d4aec:	4621      	mov	r1, r4
   d4aee:	a801      	add	r0, sp, #4
   d4af0:	f7ff fd18 	bl	d4524 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d4af4:	69e3      	ldr	r3, [r4, #28]
   d4af6:	2262      	movs	r2, #98	; 0x62
   d4af8:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d4afa:	69e3      	ldr	r3, [r4, #28]
   d4afc:	2202      	movs	r2, #2
   d4afe:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d4b00:	69e3      	ldr	r3, [r4, #28]
   d4b02:	1232      	asrs	r2, r6, #8
   d4b04:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d4b06:	69e3      	ldr	r3, [r4, #28]
   d4b08:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d4b0a:	69e1      	ldr	r1, [r4, #28]
   d4b0c:	2204      	movs	r2, #4
   d4b0e:	4620      	mov	r0, r4
   d4b10:	f001 fd2f 	bl	d6572 <_ZN9TCPClient5writeEPKhj>
   d4b14:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d4b16:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d4b18:	bf18      	it	ne
   d4b1a:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d4b1c:	f7ff fd0d 	bl	d453a <_ZN4MQTT11MutexLockerD1Ev>
}
   d4b20:	4628      	mov	r0, r5
   d4b22:	b002      	add	sp, #8
   d4b24:	bd70      	pop	{r4, r5, r6, pc}

000d4b26 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   d4b26:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4b28:	4604      	mov	r4, r0
   d4b2a:	460e      	mov	r6, r1
    if (isConnected()) {
   d4b2c:	f7ff fe47 	bl	d47be <_ZN4MQTT11isConnectedEv>
   d4b30:	4605      	mov	r5, r0
   d4b32:	b1c8      	cbz	r0, d4b68 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   d4b34:	4621      	mov	r1, r4
   d4b36:	a801      	add	r0, sp, #4
   d4b38:	f7ff fcf4 	bl	d4524 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d4b3c:	69e3      	ldr	r3, [r4, #28]
   d4b3e:	2272      	movs	r2, #114	; 0x72
   d4b40:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d4b42:	69e3      	ldr	r3, [r4, #28]
   d4b44:	2202      	movs	r2, #2
   d4b46:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d4b48:	69e3      	ldr	r3, [r4, #28]
   d4b4a:	1232      	asrs	r2, r6, #8
   d4b4c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d4b4e:	69e3      	ldr	r3, [r4, #28]
   d4b50:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d4b52:	69e1      	ldr	r1, [r4, #28]
   d4b54:	2204      	movs	r2, #4
   d4b56:	4620      	mov	r0, r4
   d4b58:	f001 fd0b 	bl	d6572 <_ZN9TCPClient5writeEPKhj>
   d4b5c:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d4b5e:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d4b60:	bf18      	it	ne
   d4b62:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d4b64:	f7ff fce9 	bl	d453a <_ZN4MQTT11MutexLockerD1Ev>
}
   d4b68:	4628      	mov	r0, r5
   d4b6a:	b002      	add	sp, #8
   d4b6c:	bd70      	pop	{r4, r5, r6, pc}

000d4b6e <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   d4b6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4b72:	ed2d 8b02 	vpush	{d8}
   d4b76:	b087      	sub	sp, #28
   d4b78:	af00      	add	r7, sp, #0
   d4b7a:	4604      	mov	r4, r0
    if (isConnected()) {
   d4b7c:	f7ff fe1f 	bl	d47be <_ZN4MQTT11isConnectedEv>
   d4b80:	4681      	mov	r9, r0
   d4b82:	b1f8      	cbz	r0, d4bc4 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   d4b84:	4621      	mov	r1, r4
   d4b86:	f107 0014 	add.w	r0, r7, #20
   d4b8a:	f7ff fccb 	bl	d4524 <_ZN4MQTT11MutexLockerC1EPS_>
   d4b8e:	f000 fc23 	bl	d53d8 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d4b92:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d4b94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4b98:	4353      	muls	r3, r2
   d4b9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d4b9c:	1a82      	subs	r2, r0, r2
   d4b9e:	429a      	cmp	r2, r3
   d4ba0:	4606      	mov	r6, r0
   d4ba2:	d803      	bhi.n	d4bac <_ZN4MQTT4loopEv+0x3e>
   d4ba4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d4ba6:	1a82      	subs	r2, r0, r2
   d4ba8:	4293      	cmp	r3, r2
   d4baa:	d221      	bcs.n	d4bf0 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   d4bac:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d4bb0:	b17b      	cbz	r3, d4bd2 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   d4bb2:	4620      	mov	r0, r4
   d4bb4:	f001 fed4 	bl	d6960 <_ZN9TCPClient4stopEv>
                return false;
   d4bb8:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   d4bbc:	f107 0014 	add.w	r0, r7, #20
   d4bc0:	f7ff fcbb 	bl	d453a <_ZN4MQTT11MutexLockerD1Ev>
}
   d4bc4:	4648      	mov	r0, r9
   d4bc6:	371c      	adds	r7, #28
   d4bc8:	46bd      	mov	sp, r7
   d4bca:	ecbd 8b02 	vpop	{d8}
   d4bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   d4bd2:	69e2      	ldr	r2, [r4, #28]
   d4bd4:	21c0      	movs	r1, #192	; 0xc0
   d4bd6:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d4bd8:	69e2      	ldr	r2, [r4, #28]
   d4bda:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d4bdc:	69e1      	ldr	r1, [r4, #28]
   d4bde:	2202      	movs	r2, #2
   d4be0:	4620      	mov	r0, r4
   d4be2:	f001 fcc6 	bl	d6572 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   d4be6:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   d4bea:	2301      	movs	r3, #1
   d4bec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   d4bf0:	4620      	mov	r0, r4
   d4bf2:	f001 fe5b 	bl	d68ac <_ZN9TCPClient9availableEv>
   d4bf6:	2800      	cmp	r0, #0
   d4bf8:	d0e0      	beq.n	d4bbc <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   d4bfa:	f107 0113 	add.w	r1, r7, #19
   d4bfe:	4620      	mov	r0, r4
   d4c00:	f7ff fd06 	bl	d4610 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   d4c04:	4683      	mov	fp, r0
   d4c06:	2800      	cmp	r0, #0
   d4c08:	d0d8      	beq.n	d4bbc <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   d4c0a:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   d4c0c:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d4c0e:	7819      	ldrb	r1, [r3, #0]
   d4c10:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d4c14:	2a30      	cmp	r2, #48	; 0x30
   d4c16:	d17f      	bne.n	d4d18 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   d4c18:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   d4c1c:	f1ba 0f00 	cmp.w	sl, #0
   d4c20:	d0cc      	beq.n	d4bbc <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d4c22:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   d4c26:	466a      	mov	r2, sp
   d4c28:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d4c2c:	eb03 020c 	add.w	r2, r3, ip
   d4c30:	7855      	ldrb	r5, [r2, #1]
   d4c32:	7891      	ldrb	r1, [r2, #2]
   d4c34:	eb01 2105 	add.w	r1, r1, r5, lsl #8
   d4c38:	b28d      	uxth	r5, r1
                        char topic[tl+1];
   d4c3a:	f105 0208 	add.w	r2, r5, #8
   d4c3e:	4669      	mov	r1, sp
   d4c40:	08d2      	lsrs	r2, r2, #3
   d4c42:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   d4c46:	4695      	mov	sp, r2
   d4c48:	f10c 0203 	add.w	r2, ip, #3
   d4c4c:	60fa      	str	r2, [r7, #12]
   d4c4e:	eb03 0e02 	add.w	lr, r3, r2
   d4c52:	eb0d 0205 	add.w	r2, sp, r5
   d4c56:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   d4c58:	f8c7 d008 	str.w	sp, [r7, #8]
   d4c5c:	607a      	str	r2, [r7, #4]
   d4c5e:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   d4c62:	428a      	cmp	r2, r1
   d4c64:	d006      	beq.n	d4c74 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   d4c66:	460a      	mov	r2, r1
   d4c68:	f81e 8b01 	ldrb.w	r8, [lr], #1
   d4c6c:	f802 8b01 	strb.w	r8, [r2], #1
   d4c70:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   d4c72:	e7f4      	b.n	d4c5e <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   d4c74:	2200      	movs	r2, #0
   d4c76:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d4c78:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4c7c:	68f9      	ldr	r1, [r7, #12]
   d4c7e:	f008 0806 	and.w	r8, r8, #6
   d4c82:	ebab 020c 	sub.w	r2, fp, ip
   d4c86:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d4c88:	f1b8 0f02 	cmp.w	r8, #2
   d4c8c:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4c90:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d4c92:	d125      	bne.n	d4ce0 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4c94:	f813 e001 	ldrb.w	lr, [r3, r1]
   d4c98:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   d4c9a:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4c9c:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   d4ca0:	f10c 0105 	add.w	r1, ip, #5
   d4ca4:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   d4ca6:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4ca8:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   d4cac:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d4cae:	69e3      	ldr	r3, [r4, #28]
   d4cb0:	2240      	movs	r2, #64	; 0x40
   d4cb2:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d4cb4:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4cb6:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   d4cba:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d4cbe:	69e3      	ldr	r3, [r4, #28]
   d4cc0:	ea4f 222b 	mov.w	r2, fp, asr #8
   d4cc4:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d4cc6:	69e3      	ldr	r3, [r4, #28]
   d4cc8:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   d4ccc:	69e1      	ldr	r1, [r4, #28]
   d4cce:	2204      	movs	r2, #4
   d4cd0:	4620      	mov	r0, r4
   d4cd2:	f001 fc4e 	bl	d6572 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   d4cd6:	6266      	str	r6, [r4, #36]	; 0x24
   d4cd8:	ee18 3a10 	vmov	r3, s16
   d4cdc:	469d      	mov	sp, r3
   d4cde:	e76d      	b.n	d4bbc <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d4ce0:	f1b8 0f04 	cmp.w	r8, #4
   d4ce4:	d115      	bne.n	d4d12 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4ce6:	f813 e001 	ldrb.w	lr, [r3, r1]
   d4cea:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d4cec:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4cee:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   d4cf2:	f10c 0105 	add.w	r1, ip, #5
   d4cf6:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d4cf8:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4cfa:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d4cfe:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   d4d00:	69e3      	ldr	r3, [r4, #28]
   d4d02:	2250      	movs	r2, #80	; 0x50
   d4d04:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   d4d06:	69e3      	ldr	r3, [r4, #28]
   d4d08:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4d0a:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   d4d0e:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   d4d10:	e7d5      	b.n	d4cbe <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   d4d12:	4419      	add	r1, r3
   d4d14:	47d0      	blx	sl
   d4d16:	e7df      	b.n	d4cd8 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   d4d18:	2a50      	cmp	r2, #80	; 0x50
   d4d1a:	d108      	bne.n	d4d2e <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   d4d1c:	789a      	ldrb	r2, [r3, #2]
   d4d1e:	78d9      	ldrb	r1, [r3, #3]
   d4d20:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   d4d24:	b289      	uxth	r1, r1
   d4d26:	4620      	mov	r0, r4
   d4d28:	f7ff fed9 	bl	d4ade <_ZN4MQTT14publishReleaseEt>
   d4d2c:	e746      	b.n	d4bbc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   d4d2e:	2a40      	cmp	r2, #64	; 0x40
   d4d30:	d112      	bne.n	d4d58 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   d4d32:	6b62      	ldr	r2, [r4, #52]	; 0x34
   d4d34:	2a00      	cmp	r2, #0
   d4d36:	f43f af41 	beq.w	d4bbc <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d4d3a:	f1bb 0f04 	cmp.w	fp, #4
   d4d3e:	f47f af3d 	bne.w	d4bbc <_ZN4MQTT4loopEv+0x4e>
   d4d42:	f011 0f06 	tst.w	r1, #6
   d4d46:	f47f af39 	bne.w	d4bbc <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   d4d4a:	7899      	ldrb	r1, [r3, #2]
   d4d4c:	78d8      	ldrb	r0, [r3, #3]
   d4d4e:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   d4d52:	b280      	uxth	r0, r0
   d4d54:	4790      	blx	r2
   d4d56:	e731      	b.n	d4bbc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   d4d58:	2a60      	cmp	r2, #96	; 0x60
   d4d5a:	d108      	bne.n	d4d6e <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   d4d5c:	789a      	ldrb	r2, [r3, #2]
   d4d5e:	78d9      	ldrb	r1, [r3, #3]
   d4d60:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   d4d64:	b289      	uxth	r1, r1
   d4d66:	4620      	mov	r0, r4
   d4d68:	f7ff fedd 	bl	d4b26 <_ZN4MQTT15publishCompleteEt>
   d4d6c:	e726      	b.n	d4bbc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   d4d6e:	2a70      	cmp	r2, #112	; 0x70
   d4d70:	d0df      	beq.n	d4d32 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   d4d72:	2a90      	cmp	r2, #144	; 0x90
   d4d74:	f43f af22 	beq.w	d4bbc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   d4d78:	2ac0      	cmp	r2, #192	; 0xc0
   d4d7a:	d10a      	bne.n	d4d92 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   d4d7c:	22d0      	movs	r2, #208	; 0xd0
   d4d7e:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d4d80:	69e3      	ldr	r3, [r4, #28]
   d4d82:	2200      	movs	r2, #0
   d4d84:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d4d86:	69e1      	ldr	r1, [r4, #28]
   d4d88:	2202      	movs	r2, #2
   d4d8a:	4620      	mov	r0, r4
   d4d8c:	f001 fbf1 	bl	d6572 <_ZN9TCPClient5writeEPKhj>
   d4d90:	e714      	b.n	d4bbc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   d4d92:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   d4d94:	bf04      	itt	eq
   d4d96:	2300      	moveq	r3, #0
   d4d98:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   d4d9c:	e70e      	b.n	d4bbc <_ZN4MQTT4loopEv+0x4e>
	...

000d4da0 <_ZN4MQTTD1Ev>:
MQTT::~MQTT() {
   d4da0:	b538      	push	{r3, r4, r5, lr}
   d4da2:	4605      	mov	r5, r0
    if (isConnected()) {
   d4da4:	f7ff fd0b 	bl	d47be <_ZN4MQTT11isConnectedEv>
   d4da8:	b110      	cbz	r0, d4db0 <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d4daa:	4628      	mov	r0, r5
   d4dac:	f7ff fccf 	bl	d474e <_ZN4MQTT10disconnectEv>
    if (buffer != NULL)
   d4db0:	69e8      	ldr	r0, [r5, #28]
   d4db2:	b108      	cbz	r0, d4db8 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d4db4:	f7ff f975 	bl	d40a2 <_ZdaPv>
MQTT::~MQTT() {
   d4db8:	f105 0038 	add.w	r0, r5, #56	; 0x38
   d4dbc:	f000 ffa8 	bl	d5d10 <_ZN6StringD1Ev>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4dc0:	69ac      	ldr	r4, [r5, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4dc2:	4b0a      	ldr	r3, [pc, #40]	; (d4dec <_ZN4MQTTD1Ev+0x4c>)
   d4dc4:	602b      	str	r3, [r5, #0]
   d4dc6:	b17c      	cbz	r4, d4de8 <_ZN4MQTTD1Ev+0x48>
      if (--_M_use_count == 0)
   d4dc8:	6863      	ldr	r3, [r4, #4]
   d4dca:	3b01      	subs	r3, #1
   d4dcc:	6063      	str	r3, [r4, #4]
   d4dce:	b95b      	cbnz	r3, d4de8 <_ZN4MQTTD1Ev+0x48>
          _M_dispose();
   d4dd0:	6823      	ldr	r3, [r4, #0]
   d4dd2:	4620      	mov	r0, r4
   d4dd4:	689b      	ldr	r3, [r3, #8]
   d4dd6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4dd8:	68a3      	ldr	r3, [r4, #8]
   d4dda:	3b01      	subs	r3, #1
   d4ddc:	60a3      	str	r3, [r4, #8]
   d4dde:	b91b      	cbnz	r3, d4de8 <_ZN4MQTTD1Ev+0x48>
            _M_destroy();
   d4de0:	6823      	ldr	r3, [r4, #0]
   d4de2:	4620      	mov	r0, r4
   d4de4:	68db      	ldr	r3, [r3, #12]
   d4de6:	4798      	blx	r3
}
   d4de8:	4628      	mov	r0, r5
   d4dea:	bd38      	pop	{r3, r4, r5, pc}
   d4dec:	000d7f90 	.word	0x000d7f90

000d4df0 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d4df0:	4770      	bx	lr
	...

000d4df4 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d4df4:	460b      	mov	r3, r1
   d4df6:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d4df8:	2228      	movs	r2, #40	; 0x28
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d4dfa:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d4dfc:	2100      	movs	r1, #0
   d4dfe:	4618      	mov	r0, r3
   d4e00:	f002 ff7e 	bl	d7d00 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d4e04:	4908      	ldr	r1, [pc, #32]	; (d4e28 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
   d4e06:	220b      	movs	r2, #11
   d4e08:	f002 ffc0 	bl	d7d8c <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d4e0c:	2200      	movs	r2, #0
  sensor->version     = 1;
   d4e0e:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d4e10:	72c2      	strb	r2, [r0, #11]
  sensor->version     = 1;
   d4e12:	60c1      	str	r1, [r0, #12]
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d4e14:	4603      	mov	r3, r0
  sensor->sensor_id   = _sensorID;
   d4e16:	69a0      	ldr	r0, [r4, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
   d4e18:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   d4e1a:	e9c3 0104 	strd	r0, r1, [r3, #16]
  sensor->max_value   = 0;
   d4e1e:	2200      	movs	r2, #0
   d4e20:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0;
   d4e22:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0;
   d4e24:	621a      	str	r2, [r3, #32]
}
   d4e26:	bd10      	pop	{r4, pc}
   d4e28:	000d7dfe 	.word	0x000d7dfe

000d4e2c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4e2c:	6803      	ldr	r3, [r0, #0]
   d4e2e:	b2c9      	uxtb	r1, r1
   d4e30:	689b      	ldr	r3, [r3, #8]
   d4e32:	4718      	bx	r3

000d4e34 <_ZN15Adafruit_LIS3DHC1Ev>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   d4e34:	4a06      	ldr	r2, [pc, #24]	; (d4e50 <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   d4e36:	6002      	str	r2, [r0, #0]
   d4e38:	f04f 32ff 	mov.w	r2, #4294967295
   d4e3c:	6182      	str	r2, [r0, #24]
   d4e3e:	7742      	strb	r2, [r0, #29]
   d4e40:	83c2      	strh	r2, [r0, #30]
   d4e42:	22ff      	movs	r2, #255	; 0xff
   d4e44:	f880 2020 	strb.w	r2, [r0, #32]
   d4e48:	2208      	movs	r2, #8
   d4e4a:	6242      	str	r2, [r0, #36]	; 0x24
}
   d4e4c:	4770      	bx	lr
   d4e4e:	bf00      	nop
   d4e50:	000d7e10 	.word	0x000d7e10

000d4e54 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4e54:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4e56:	4c0b      	ldr	r4, [pc, #44]	; (d4e84 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4e58:	7821      	ldrb	r1, [r4, #0]
   d4e5a:	f3bf 8f5b 	dmb	ish
   d4e5e:	f011 0101 	ands.w	r1, r1, #1
   d4e62:	d10b      	bne.n	d4e7c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4e64:	4620      	mov	r0, r4
   d4e66:	9101      	str	r1, [sp, #4]
   d4e68:	f7ff f91d 	bl	d40a6 <__cxa_guard_acquire>
   d4e6c:	9901      	ldr	r1, [sp, #4]
   d4e6e:	b128      	cbz	r0, d4e7c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4e70:	4805      	ldr	r0, [pc, #20]	; (d4e88 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4e72:	f000 fd5b 	bl	d592c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4e76:	4620      	mov	r0, r4
   d4e78:	f7ff f91a 	bl	d40b0 <__cxa_guard_release>
        return instance;
    }
   d4e7c:	4802      	ldr	r0, [pc, #8]	; (d4e88 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4e7e:	b002      	add	sp, #8
   d4e80:	bd10      	pop	{r4, pc}
   d4e82:	bf00      	nop
   d4e84:	2003e644 	.word	0x2003e644
   d4e88:	2003e648 	.word	0x2003e648

000d4e8c <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d4e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
   d4e90:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4e94:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d4e96:	4605      	mov	r5, r0
   d4e98:	460f      	mov	r7, r1
  if (_sck == -1)
   d4e9a:	d106      	bne.n	d4eaa <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4e9c:	f7ff ffda 	bl	d4e54 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4ea0:	4639      	mov	r1, r7
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
   d4ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4ea6:	f000 bdcb 	b.w	d5a40 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   d4eaa:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   d4eac:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   d4eae:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   d4eb2:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d4eb6:	2100      	movs	r1, #0
   d4eb8:	b280      	uxth	r0, r0
   d4eba:	f001 ff6a 	bl	d6d92 <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   d4ebe:	f995 001e 	ldrsb.w	r0, [r5, #30]
   d4ec2:	fa08 f106 	lsl.w	r1, r8, r6
   d4ec6:	4039      	ands	r1, r7
   d4ec8:	b280      	uxth	r0, r0
   d4eca:	f001 ff62 	bl	d6d92 <digitalWrite>
    digitalWrite(_sck, HIGH);
   d4ece:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d4ed2:	2101      	movs	r1, #1
   d4ed4:	b280      	uxth	r0, r0
   d4ed6:	f001 ff5c 	bl	d6d92 <digitalWrite>
    if (digitalRead(_miso))
   d4eda:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
   d4ede:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   d4ee0:	b280      	uxth	r0, r0
    reply <<= 1;
   d4ee2:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   d4ee4:	f001 ff6e 	bl	d6dc4 <digitalRead>
   d4ee8:	b108      	cbz	r0, d4eee <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   d4eea:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   d4eee:	3e01      	subs	r6, #1
   d4ef0:	d2df      	bcs.n	d4eb2 <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
   d4ef2:	4620      	mov	r0, r4
   d4ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4ef8 <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   d4ef8:	b508      	push	{r3, lr}
        instance().setBitOrder(order);
   d4efa:	f7ff ffab 	bl	d4e54 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4efe:	2101      	movs	r1, #1
   d4f00:	f000 fd2f 	bl	d5962 <_ZN8SPIClass11setBitOrderEh>
        return instance().setClockSpeed(value, scale);
   d4f04:	f7ff ffa6 	bl	d4e54 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4f08:	4905      	ldr	r1, [pc, #20]	; (d4f20 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   d4f0a:	2201      	movs	r2, #1
   d4f0c:	f000 fd66 	bl	d59dc <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
   d4f10:	f7ff ffa0 	bl	d4e54 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   d4f14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4f18:	2100      	movs	r1, #0
   d4f1a:	f000 bd35 	b.w	d5988 <_ZN8SPIClass11setDataModeEh>
   d4f1e:	bf00      	nop
   d4f20:	0007a120 	.word	0x0007a120

000d4f24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d4f24:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   d4f26:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4f2a:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d4f2c:	4604      	mov	r4, r0
   d4f2e:	460e      	mov	r6, r1
   d4f30:	4615      	mov	r5, r2
  if (_cs == -1) {
   d4f32:	d116      	bne.n	d4f62 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   d4f34:	f001 ff72 	bl	d6e1c <_Z19__fetch_global_Wirev>
   d4f38:	7f21      	ldrb	r1, [r4, #28]
   d4f3a:	f001 faff 	bl	d653c <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d4f3e:	f001 ff6d 	bl	d6e1c <_Z19__fetch_global_Wirev>
   d4f42:	6803      	ldr	r3, [r0, #0]
   d4f44:	4631      	mov	r1, r6
   d4f46:	689b      	ldr	r3, [r3, #8]
   d4f48:	4798      	blx	r3
    Wire.write((uint8_t)value);
   d4f4a:	f001 ff67 	bl	d6e1c <_Z19__fetch_global_Wirev>
   d4f4e:	6803      	ldr	r3, [r0, #0]
   d4f50:	4629      	mov	r1, r5
   d4f52:	689b      	ldr	r3, [r3, #8]
   d4f54:	4798      	blx	r3
    Wire.endTransmission();
   d4f56:	f001 ff61 	bl	d6e1c <_Z19__fetch_global_Wirev>
}
   d4f5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   d4f5e:	f001 baf8 	b.w	d6552 <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
   d4f62:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4f66:	3301      	adds	r3, #1
   d4f68:	d101      	bne.n	d4f6e <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   d4f6a:	f7ff ffc5 	bl	d4ef8 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d4f6e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4f72:	2100      	movs	r1, #0
   d4f74:	b280      	uxth	r0, r0
   d4f76:	f001 ff0c 	bl	d6d92 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   d4f7a:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4f7e:	4620      	mov	r0, r4
   d4f80:	f7ff ff84 	bl	d4e8c <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   d4f84:	4629      	mov	r1, r5
   d4f86:	4620      	mov	r0, r4
   d4f88:	f7ff ff80 	bl	d4e8c <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   d4f8c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4f90:	2101      	movs	r1, #1
}
   d4f92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   d4f96:	b280      	uxth	r0, r0
   d4f98:	f001 befb 	b.w	d6d92 <digitalWrite>

000d4f9c <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d4f9c:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d4f9e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4fa2:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d4fa4:	4604      	mov	r4, r0
   d4fa6:	460d      	mov	r5, r1
  if (_cs == -1) {
   d4fa8:	d11d      	bne.n	d4fe6 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   d4faa:	f001 ff37 	bl	d6e1c <_Z19__fetch_global_Wirev>
   d4fae:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d4fb2:	f001 fac7 	bl	d6544 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   d4fb6:	f001 ff31 	bl	d6e1c <_Z19__fetch_global_Wirev>
   d4fba:	6803      	ldr	r3, [r0, #0]
   d4fbc:	4629      	mov	r1, r5
   d4fbe:	689b      	ldr	r3, [r3, #8]
   d4fc0:	4798      	blx	r3
    Wire.endTransmission();
   d4fc2:	f001 ff2b 	bl	d6e1c <_Z19__fetch_global_Wirev>
   d4fc6:	f001 fac4 	bl	d6552 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
   d4fca:	f001 ff27 	bl	d6e1c <_Z19__fetch_global_Wirev>
   d4fce:	7f21      	ldrb	r1, [r4, #28]
   d4fd0:	2201      	movs	r2, #1
   d4fd2:	f001 fab0 	bl	d6536 <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   d4fd6:	f001 ff21 	bl	d6e1c <_Z19__fetch_global_Wirev>
   d4fda:	6803      	ldr	r3, [r0, #0]
   d4fdc:	695b      	ldr	r3, [r3, #20]
   d4fde:	4798      	blx	r3
   d4fe0:	b2c5      	uxtb	r5, r0
}
   d4fe2:	4628      	mov	r0, r5
   d4fe4:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
   d4fe6:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4fea:	3301      	adds	r3, #1
   d4fec:	d101      	bne.n	d4ff2 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   d4fee:	f7ff ff83 	bl	d4ef8 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
   d4ff2:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4ff6:	2100      	movs	r1, #0
   d4ff8:	b280      	uxth	r0, r0
   d4ffa:	f001 feca 	bl	d6d92 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   d4ffe:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5002:	4620      	mov	r0, r4
   d5004:	f7ff ff42 	bl	d4e8c <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   d5008:	2100      	movs	r1, #0
   d500a:	4620      	mov	r0, r4
   d500c:	f7ff ff3e 	bl	d4e8c <_ZN15Adafruit_LIS3DH7spixferEh>
   d5010:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   d5012:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5016:	2101      	movs	r1, #1
   d5018:	b280      	uxth	r0, r0
   d501a:	f001 feba 	bl	d6d92 <digitalWrite>
    if (_sck == -1)
   d501e:	e7e0      	b.n	d4fe2 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

000d5020 <_ZN15Adafruit_LIS3DH8setClickEhhhhh>:
void Adafruit_LIS3DH::setClick(uint8_t c, uint8_t clickthresh, uint8_t timelimit, uint8_t timelatency, uint8_t timewindow) {
   d5020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5024:	4604      	mov	r4, r0
   d5026:	f89d 9020 	ldrb.w	r9, [sp, #32]
   d502a:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
   d502e:	4617      	mov	r7, r2
   d5030:	461e      	mov	r6, r3
  if (!c) {
   d5032:	460d      	mov	r5, r1
   d5034:	b979      	cbnz	r1, d5056 <_ZN15Adafruit_LIS3DH8setClickEhhhhh+0x36>
    uint8_t r = readRegister8(LIS3DH_REG_CTRL3);
   d5036:	2122      	movs	r1, #34	; 0x22
   d5038:	f7ff ffb0 	bl	d4f9c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
    writeRegister8(LIS3DH_REG_CTRL3, r);
   d503c:	2122      	movs	r1, #34	; 0x22
   d503e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   d5042:	4620      	mov	r0, r4
   d5044:	f7ff ff6e 	bl	d4f24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
    writeRegister8(LIS3DH_REG_CLICKCFG, 0);
   d5048:	462a      	mov	r2, r5
   d504a:	2138      	movs	r1, #56	; 0x38
  writeRegister8(LIS3DH_REG_TIMEWINDOW, timewindow); // arbitrary
   d504c:	4620      	mov	r0, r4
}
   d504e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  writeRegister8(LIS3DH_REG_TIMEWINDOW, timewindow); // arbitrary
   d5052:	f7ff bf67 	b.w	d4f24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x80); // turn on int1 click
   d5056:	2280      	movs	r2, #128	; 0x80
   d5058:	2122      	movs	r1, #34	; 0x22
   d505a:	f7ff ff63 	bl	d4f24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL5, 0x08); // latch interrupt on int1
   d505e:	2208      	movs	r2, #8
   d5060:	2124      	movs	r1, #36	; 0x24
   d5062:	4620      	mov	r0, r4
   d5064:	f7ff ff5e 	bl	d4f24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  if (c == 1)
   d5068:	2d01      	cmp	r5, #1
   d506a:	d116      	bne.n	d509a <_ZN15Adafruit_LIS3DH8setClickEhhhhh+0x7a>
    writeRegister8(LIS3DH_REG_CLICKCFG, 0x15); // turn on all axes & singletap
   d506c:	2215      	movs	r2, #21
    writeRegister8(LIS3DH_REG_CLICKCFG, 0x2A); // turn on all axes & doubletap
   d506e:	2138      	movs	r1, #56	; 0x38
   d5070:	4620      	mov	r0, r4
   d5072:	f7ff ff57 	bl	d4f24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CLICKTHS, clickthresh); // arbitrary
   d5076:	463a      	mov	r2, r7
   d5078:	213a      	movs	r1, #58	; 0x3a
   d507a:	4620      	mov	r0, r4
   d507c:	f7ff ff52 	bl	d4f24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TIMELIMIT, timelimit); // arbitrary
   d5080:	4632      	mov	r2, r6
   d5082:	213b      	movs	r1, #59	; 0x3b
   d5084:	4620      	mov	r0, r4
   d5086:	f7ff ff4d 	bl	d4f24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TIMELATENCY, timelatency); // arbitrary
   d508a:	464a      	mov	r2, r9
   d508c:	213c      	movs	r1, #60	; 0x3c
   d508e:	4620      	mov	r0, r4
   d5090:	f7ff ff48 	bl	d4f24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TIMEWINDOW, timewindow); // arbitrary
   d5094:	4642      	mov	r2, r8
   d5096:	213d      	movs	r1, #61	; 0x3d
   d5098:	e7d8      	b.n	d504c <_ZN15Adafruit_LIS3DH8setClickEhhhhh+0x2c>
  if (c == 2)
   d509a:	2d02      	cmp	r5, #2
   d509c:	d1eb      	bne.n	d5076 <_ZN15Adafruit_LIS3DH8setClickEhhhhh+0x56>
    writeRegister8(LIS3DH_REG_CLICKCFG, 0x2A); // turn on all axes & doubletap
   d509e:	222a      	movs	r2, #42	; 0x2a
   d50a0:	e7e5      	b.n	d506e <_ZN15Adafruit_LIS3DH8setClickEhhhhh+0x4e>

000d50a2 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>:
{
   d50a2:	b538      	push	{r3, r4, r5, lr}
   d50a4:	460d      	mov	r5, r1
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d50a6:	2123      	movs	r1, #35	; 0x23
{
   d50a8:	4604      	mov	r4, r0
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d50aa:	f7ff ff77 	bl	d4f9c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  r &= ~(0x30);
   d50ae:	f020 0230 	bic.w	r2, r0, #48	; 0x30
  r |= range << 4;
   d50b2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d50b6:	4620      	mov	r0, r4
   d50b8:	b2d2      	uxtb	r2, r2
}
   d50ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d50be:	2123      	movs	r1, #35	; 0x23
   d50c0:	f7ff bf30 	b.w	d4f24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d50c4 <_ZN15Adafruit_LIS3DH8getRangeEv>:
{
   d50c4:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   d50c6:	2123      	movs	r1, #35	; 0x23
   d50c8:	f7ff ff68 	bl	d4f9c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   d50cc:	f3c0 1001 	ubfx	r0, r0, #4, #2
   d50d0:	bd08      	pop	{r3, pc}

000d50d2 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
   d50d2:	b538      	push	{r3, r4, r5, lr}
   d50d4:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d50d6:	2120      	movs	r1, #32
{
   d50d8:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d50da:	f7ff ff5f 	bl	d4f9c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
   d50de:	f000 020f 	and.w	r2, r0, #15
  ctl1 |= (dataRate << 4);
   d50e2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d50e6:	4620      	mov	r0, r4
   d50e8:	b2d2      	uxtb	r2, r2
}
   d50ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d50ee:	2120      	movs	r1, #32
   d50f0:	f7ff bf18 	b.w	d4f24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d50f4 <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   d50f4:	b510      	push	{r4, lr}
   d50f6:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   d50f8:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
   d50fa:	f990 001d 	ldrsb.w	r0, [r0, #29]
   d50fe:	1c42      	adds	r2, r0, #1
   d5100:	d123      	bne.n	d514a <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
   d5102:	f001 fe8b 	bl	d6e1c <_Z19__fetch_global_Wirev>
   d5106:	f001 f9e7 	bl	d64d8 <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   d510a:	210f      	movs	r1, #15
   d510c:	4620      	mov	r0, r4
   d510e:	f7ff ff45 	bl	d4f9c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   d5112:	2833      	cmp	r0, #51	; 0x33
   d5114:	d13d      	bne.n	d5192 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   d5116:	2207      	movs	r2, #7
   d5118:	2120      	movs	r1, #32
   d511a:	4620      	mov	r0, r4
   d511c:	f7ff ff02 	bl	d4f24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
   d5120:	2107      	movs	r1, #7
   d5122:	4620      	mov	r0, r4
   d5124:	f7ff ffd5 	bl	d50d2 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   d5128:	2288      	movs	r2, #136	; 0x88
   d512a:	2123      	movs	r1, #35	; 0x23
   d512c:	4620      	mov	r0, r4
   d512e:	f7ff fef9 	bl	d4f24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   d5132:	2210      	movs	r2, #16
   d5134:	2122      	movs	r1, #34	; 0x22
   d5136:	4620      	mov	r0, r4
   d5138:	f7ff fef4 	bl	d4f24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   d513c:	4620      	mov	r0, r4
   d513e:	2280      	movs	r2, #128	; 0x80
   d5140:	211f      	movs	r1, #31
   d5142:	f7ff feef 	bl	d4f24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
   d5146:	2001      	movs	r0, #1
}
   d5148:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   d514a:	2101      	movs	r1, #1
   d514c:	b280      	uxth	r0, r0
   d514e:	f001 fe20 	bl	d6d92 <digitalWrite>
    pinMode(_cs, OUTPUT);
   d5152:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5156:	2101      	movs	r1, #1
   d5158:	b280      	uxth	r0, r0
   d515a:	f001 fe09 	bl	d6d70 <pinMode>
    if (_sck == -1) {
   d515e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5162:	1c43      	adds	r3, r0, #1
   d5164:	d104      	bne.n	d5170 <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
   d5166:	f7ff fe75 	bl	d4e54 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d516a:	f000 fbe9 	bl	d5940 <_ZN8SPIClass5beginEv>
    }
   d516e:	e7cc      	b.n	d510a <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
   d5170:	2101      	movs	r1, #1
   d5172:	b280      	uxth	r0, r0
   d5174:	f001 fdfc 	bl	d6d70 <pinMode>
      pinMode(_mosi, OUTPUT);
   d5178:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d517c:	2101      	movs	r1, #1
   d517e:	b280      	uxth	r0, r0
   d5180:	f001 fdf6 	bl	d6d70 <pinMode>
      pinMode(_miso, INPUT);
   d5184:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d5188:	2100      	movs	r1, #0
   d518a:	b280      	uxth	r0, r0
   d518c:	f001 fdf0 	bl	d6d70 <pinMode>
   d5190:	e7bb      	b.n	d510a <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
   d5192:	2000      	movs	r0, #0
   d5194:	e7d8      	b.n	d5148 <_ZN15Adafruit_LIS3DH5beginEh+0x54>
	...

000d5198 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
   d5198:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d519a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d519e:	3301      	adds	r3, #1
void Adafruit_LIS3DH::read(void) {
   d51a0:	4604      	mov	r4, r0
  if (_cs == -1) {
   d51a2:	d176      	bne.n	d5292 <_ZN15Adafruit_LIS3DH4readEv+0xfa>
    Wire.beginTransmission(_i2caddr);
   d51a4:	f001 fe3a 	bl	d6e1c <_Z19__fetch_global_Wirev>
   d51a8:	f994 101c 	ldrsb.w	r1, [r4, #28]
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d51ac:	4d5c      	ldr	r5, [pc, #368]	; (d5320 <_ZN15Adafruit_LIS3DH4readEv+0x188>)
    Wire.beginTransmission(_i2caddr);
   d51ae:	f001 f9c9 	bl	d6544 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   d51b2:	f001 fe33 	bl	d6e1c <_Z19__fetch_global_Wirev>
   d51b6:	21a8      	movs	r1, #168	; 0xa8
   d51b8:	f7ff fe38 	bl	d4e2c <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d51bc:	f001 fe2e 	bl	d6e1c <_Z19__fetch_global_Wirev>
   d51c0:	f001 f9c7 	bl	d6552 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
   d51c4:	f001 fe2a 	bl	d6e1c <_Z19__fetch_global_Wirev>
   d51c8:	7f21      	ldrb	r1, [r4, #28]
   d51ca:	2206      	movs	r2, #6
   d51cc:	f001 f9b3 	bl	d6536 <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d51d0:	f001 fe24 	bl	d6e1c <_Z19__fetch_global_Wirev>
   d51d4:	6803      	ldr	r3, [r0, #0]
   d51d6:	695b      	ldr	r3, [r3, #20]
   d51d8:	4798      	blx	r3
   d51da:	80e0      	strh	r0, [r4, #6]
   d51dc:	f001 fe1e 	bl	d6e1c <_Z19__fetch_global_Wirev>
   d51e0:	6803      	ldr	r3, [r0, #0]
   d51e2:	695b      	ldr	r3, [r3, #20]
   d51e4:	4798      	blx	r3
   d51e6:	88e3      	ldrh	r3, [r4, #6]
   d51e8:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d51ec:	4318      	orrs	r0, r3
   d51ee:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   d51f0:	f001 fe14 	bl	d6e1c <_Z19__fetch_global_Wirev>
   d51f4:	6803      	ldr	r3, [r0, #0]
   d51f6:	695b      	ldr	r3, [r3, #20]
   d51f8:	4798      	blx	r3
   d51fa:	8120      	strh	r0, [r4, #8]
   d51fc:	f001 fe0e 	bl	d6e1c <_Z19__fetch_global_Wirev>
   d5200:	6803      	ldr	r3, [r0, #0]
   d5202:	695b      	ldr	r3, [r3, #20]
   d5204:	4798      	blx	r3
   d5206:	8923      	ldrh	r3, [r4, #8]
   d5208:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d520c:	4318      	orrs	r0, r3
   d520e:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   d5210:	f001 fe04 	bl	d6e1c <_Z19__fetch_global_Wirev>
   d5214:	6803      	ldr	r3, [r0, #0]
   d5216:	695b      	ldr	r3, [r3, #20]
   d5218:	4798      	blx	r3
   d521a:	8160      	strh	r0, [r4, #10]
   d521c:	f001 fdfe 	bl	d6e1c <_Z19__fetch_global_Wirev>
   d5220:	6803      	ldr	r3, [r0, #0]
   d5222:	695b      	ldr	r3, [r3, #20]
   d5224:	4798      	blx	r3
   d5226:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d522a:	8965      	ldrh	r5, [r4, #10]
   d522c:	4328      	orrs	r0, r5
   d522e:	8160      	strh	r0, [r4, #10]
  uint8_t range = getRange();
   d5230:	4620      	mov	r0, r4
   d5232:	f7ff ff47 	bl	d50c4 <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d5236:	2803      	cmp	r0, #3
   d5238:	d069      	beq.n	d530e <_ZN15Adafruit_LIS3DH4readEv+0x176>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d523a:	2802      	cmp	r0, #2
   d523c:	d06a      	beq.n	d5314 <_ZN15Adafruit_LIS3DH4readEv+0x17c>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d523e:	2801      	cmp	r0, #1
   d5240:	d06b      	beq.n	d531a <_ZN15Adafruit_LIS3DH4readEv+0x182>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   d5242:	2800      	cmp	r0, #0
   d5244:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   d5248:	bf18      	it	ne
   d524a:	2301      	movne	r3, #1
  x_g = (float)x / divider;
   d524c:	ee07 3a90 	vmov	s15, r3
   d5250:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d5254:	ee07 3a10 	vmov	s14, r3
   d5258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d525c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d5260:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  x_g = (float)x / divider;
   d5264:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   d5268:	ee07 3a10 	vmov	s14, r3
   d526c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_g = (float)x / divider;
   d5270:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   d5274:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   d5278:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d527c:	ee07 3a10 	vmov	s14, r3
   d5280:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d5284:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   d5288:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d528c:	edc4 6a05 	vstr	s13, [r4, #20]
}
   d5290:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
   d5292:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d5296:	3301      	adds	r3, #1
   d5298:	d101      	bne.n	d529e <_ZN15Adafruit_LIS3DH4readEv+0x106>
      beginTransaction();
   d529a:	f7ff fe2d 	bl	d4ef8 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d529e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d52a2:	2100      	movs	r1, #0
   d52a4:	b280      	uxth	r0, r0
   d52a6:	f001 fd74 	bl	d6d92 <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   d52aa:	21e8      	movs	r1, #232	; 0xe8
   d52ac:	4620      	mov	r0, r4
   d52ae:	f7ff fded 	bl	d4e8c <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   d52b2:	21ff      	movs	r1, #255	; 0xff
   d52b4:	4620      	mov	r0, r4
   d52b6:	f7ff fde9 	bl	d4e8c <_ZN15Adafruit_LIS3DH7spixferEh>
   d52ba:	21ff      	movs	r1, #255	; 0xff
   d52bc:	80e0      	strh	r0, [r4, #6]
   d52be:	4620      	mov	r0, r4
   d52c0:	f7ff fde4 	bl	d4e8c <_ZN15Adafruit_LIS3DH7spixferEh>
   d52c4:	88e3      	ldrh	r3, [r4, #6]
   d52c6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d52ca:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   d52cc:	21ff      	movs	r1, #255	; 0xff
   d52ce:	4620      	mov	r0, r4
   d52d0:	f7ff fddc 	bl	d4e8c <_ZN15Adafruit_LIS3DH7spixferEh>
   d52d4:	21ff      	movs	r1, #255	; 0xff
   d52d6:	8120      	strh	r0, [r4, #8]
   d52d8:	4620      	mov	r0, r4
   d52da:	f7ff fdd7 	bl	d4e8c <_ZN15Adafruit_LIS3DH7spixferEh>
   d52de:	8923      	ldrh	r3, [r4, #8]
   d52e0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d52e4:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   d52e6:	21ff      	movs	r1, #255	; 0xff
   d52e8:	4620      	mov	r0, r4
   d52ea:	f7ff fdcf 	bl	d4e8c <_ZN15Adafruit_LIS3DH7spixferEh>
   d52ee:	21ff      	movs	r1, #255	; 0xff
   d52f0:	8160      	strh	r0, [r4, #10]
   d52f2:	4620      	mov	r0, r4
   d52f4:	f7ff fdca 	bl	d4e8c <_ZN15Adafruit_LIS3DH7spixferEh>
   d52f8:	8963      	ldrh	r3, [r4, #10]
   d52fa:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d52fe:	8160      	strh	r0, [r4, #10]
    digitalWrite(_cs, HIGH);
   d5300:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5304:	2101      	movs	r1, #1
   d5306:	b280      	uxth	r0, r0
   d5308:	f001 fd43 	bl	d6d92 <digitalWrite>
    if (_sck == -1)
   d530c:	e790      	b.n	d5230 <_ZN15Adafruit_LIS3DH4readEv+0x98>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d530e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d5312:	e79b      	b.n	d524c <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d5314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   d5318:	e798      	b.n	d524c <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d531a:	f641 73fe 	movw	r3, #8190	; 0x1ffe
   d531e:	e795      	b.n	d524c <_ZN15Adafruit_LIS3DH4readEv+0xb4>
   d5320:	00ffff00 	.word	0x00ffff00

000d5324 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   d5324:	460c      	mov	r4, r1
   d5326:	4605      	mov	r5, r0
   d5328:	b508      	push	{r3, lr}
  memset(event, 0, sizeof(sensors_event_t));
   d532a:	2220      	movs	r2, #32
   d532c:	2100      	movs	r1, #0
   d532e:	1d20      	adds	r0, r4, #4
   d5330:	f002 fce6 	bl	d7d00 <memset>
  event->version   = sizeof(sensors_event_t);
   d5334:	2324      	movs	r3, #36	; 0x24
   d5336:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d5338:	69ab      	ldr	r3, [r5, #24]
   d533a:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   d533c:	2301      	movs	r3, #1
   d533e:	60a3      	str	r3, [r4, #8]
  event->timestamp = 0;
   d5340:	2300      	movs	r3, #0
   d5342:	6123      	str	r3, [r4, #16]
  read();
   d5344:	4628      	mov	r0, r5
   d5346:	f7ff ff27 	bl	d5198 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
   d534a:	68eb      	ldr	r3, [r5, #12]
   d534c:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   d534e:	692b      	ldr	r3, [r5, #16]
   d5350:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   d5352:	696b      	ldr	r3, [r5, #20]
   d5354:	61e3      	str	r3, [r4, #28]
	...

000d5358 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5358:	b508      	push	{r3, lr}
   d535a:	4b02      	ldr	r3, [pc, #8]	; (d5364 <netdb_freeaddrinfo+0xc>)
   d535c:	681b      	ldr	r3, [r3, #0]
   d535e:	689b      	ldr	r3, [r3, #8]
   d5360:	9301      	str	r3, [sp, #4]
   d5362:	bd08      	pop	{r3, pc}
   d5364:	00030268 	.word	0x00030268

000d5368 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5368:	b508      	push	{r3, lr}
   d536a:	4b02      	ldr	r3, [pc, #8]	; (d5374 <netdb_getaddrinfo+0xc>)
   d536c:	681b      	ldr	r3, [r3, #0]
   d536e:	68db      	ldr	r3, [r3, #12]
   d5370:	9301      	str	r3, [sp, #4]
   d5372:	bd08      	pop	{r3, pc}
   d5374:	00030268 	.word	0x00030268

000d5378 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5378:	b508      	push	{r3, lr}
   d537a:	4b02      	ldr	r3, [pc, #8]	; (d5384 <HAL_Pin_Mode+0xc>)
   d537c:	681b      	ldr	r3, [r3, #0]
   d537e:	689b      	ldr	r3, [r3, #8]
   d5380:	9301      	str	r3, [sp, #4]
   d5382:	bd08      	pop	{r3, pc}
   d5384:	0003022c 	.word	0x0003022c

000d5388 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5388:	b508      	push	{r3, lr}
   d538a:	4b02      	ldr	r3, [pc, #8]	; (d5394 <HAL_Get_Pin_Mode+0xc>)
   d538c:	681b      	ldr	r3, [r3, #0]
   d538e:	68db      	ldr	r3, [r3, #12]
   d5390:	9301      	str	r3, [sp, #4]
   d5392:	bd08      	pop	{r3, pc}
   d5394:	0003022c 	.word	0x0003022c

000d5398 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5398:	b508      	push	{r3, lr}
   d539a:	4b02      	ldr	r3, [pc, #8]	; (d53a4 <HAL_GPIO_Write+0xc>)
   d539c:	681b      	ldr	r3, [r3, #0]
   d539e:	691b      	ldr	r3, [r3, #16]
   d53a0:	9301      	str	r3, [sp, #4]
   d53a2:	bd08      	pop	{r3, pc}
   d53a4:	0003022c 	.word	0x0003022c

000d53a8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d53a8:	b508      	push	{r3, lr}
   d53aa:	4b02      	ldr	r3, [pc, #8]	; (d53b4 <HAL_GPIO_Read+0xc>)
   d53ac:	681b      	ldr	r3, [r3, #0]
   d53ae:	695b      	ldr	r3, [r3, #20]
   d53b0:	9301      	str	r3, [sp, #4]
   d53b2:	bd08      	pop	{r3, pc}
   d53b4:	0003022c 	.word	0x0003022c

000d53b8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d53b8:	b508      	push	{r3, lr}
   d53ba:	4b02      	ldr	r3, [pc, #8]	; (d53c4 <if_index_to_name+0xc>)
   d53bc:	681b      	ldr	r3, [r3, #0]
   d53be:	695b      	ldr	r3, [r3, #20]
   d53c0:	9301      	str	r3, [sp, #4]
   d53c2:	bd08      	pop	{r3, pc}
   d53c4:	0003026c 	.word	0x0003026c

000d53c8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d53c8:	b508      	push	{r3, lr}
   d53ca:	4b02      	ldr	r3, [pc, #8]	; (d53d4 <HAL_RNG_GetRandomNumber+0xc>)
   d53cc:	681b      	ldr	r3, [r3, #0]
   d53ce:	685b      	ldr	r3, [r3, #4]
   d53d0:	9301      	str	r3, [sp, #4]
   d53d2:	bd08      	pop	{r3, pc}
   d53d4:	00030218 	.word	0x00030218

000d53d8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d53d8:	b508      	push	{r3, lr}
   d53da:	4b02      	ldr	r3, [pc, #8]	; (d53e4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d53dc:	681b      	ldr	r3, [r3, #0]
   d53de:	695b      	ldr	r3, [r3, #20]
   d53e0:	9301      	str	r3, [sp, #4]
   d53e2:	bd08      	pop	{r3, pc}
   d53e4:	00030218 	.word	0x00030218

000d53e8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d53e8:	b508      	push	{r3, lr}
   d53ea:	4b02      	ldr	r3, [pc, #8]	; (d53f4 <os_mutex_create+0xc>)
   d53ec:	681b      	ldr	r3, [r3, #0]
   d53ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53f0:	9301      	str	r3, [sp, #4]
   d53f2:	bd08      	pop	{r3, pc}
   d53f4:	00030248 	.word	0x00030248

000d53f8 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d53f8:	b508      	push	{r3, lr}
   d53fa:	4b02      	ldr	r3, [pc, #8]	; (d5404 <os_mutex_lock+0xc>)
   d53fc:	681b      	ldr	r3, [r3, #0]
   d53fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5400:	9301      	str	r3, [sp, #4]
   d5402:	bd08      	pop	{r3, pc}
   d5404:	00030248 	.word	0x00030248

000d5408 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d5408:	b508      	push	{r3, lr}
   d540a:	4b02      	ldr	r3, [pc, #8]	; (d5414 <os_mutex_unlock+0xc>)
   d540c:	681b      	ldr	r3, [r3, #0]
   d540e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5410:	9301      	str	r3, [sp, #4]
   d5412:	bd08      	pop	{r3, pc}
   d5414:	00030248 	.word	0x00030248

000d5418 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5418:	b508      	push	{r3, lr}
   d541a:	4b02      	ldr	r3, [pc, #8]	; (d5424 <os_mutex_recursive_create+0xc>)
   d541c:	681b      	ldr	r3, [r3, #0]
   d541e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5420:	9301      	str	r3, [sp, #4]
   d5422:	bd08      	pop	{r3, pc}
   d5424:	00030248 	.word	0x00030248

000d5428 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5428:	b508      	push	{r3, lr}
   d542a:	4b02      	ldr	r3, [pc, #8]	; (d5434 <os_mutex_recursive_destroy+0xc>)
   d542c:	681b      	ldr	r3, [r3, #0]
   d542e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5430:	9301      	str	r3, [sp, #4]
   d5432:	bd08      	pop	{r3, pc}
   d5434:	00030248 	.word	0x00030248

000d5438 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5438:	b508      	push	{r3, lr}
   d543a:	4b02      	ldr	r3, [pc, #8]	; (d5444 <inet_inet_ntop+0xc>)
   d543c:	681b      	ldr	r3, [r3, #0]
   d543e:	695b      	ldr	r3, [r3, #20]
   d5440:	9301      	str	r3, [sp, #4]
   d5442:	bd08      	pop	{r3, pc}
   d5444:	00030264 	.word	0x00030264

000d5448 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5448:	b508      	push	{r3, lr}
   d544a:	4b02      	ldr	r3, [pc, #8]	; (d5454 <inet_htonl+0xc>)
   d544c:	681b      	ldr	r3, [r3, #0]
   d544e:	6a1b      	ldr	r3, [r3, #32]
   d5450:	9301      	str	r3, [sp, #4]
   d5452:	bd08      	pop	{r3, pc}
   d5454:	00030264 	.word	0x00030264

000d5458 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5458:	b508      	push	{r3, lr}
   d545a:	4b02      	ldr	r3, [pc, #8]	; (d5464 <inet_htons+0xc>)
   d545c:	681b      	ldr	r3, [r3, #0]
   d545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5460:	9301      	str	r3, [sp, #4]
   d5462:	bd08      	pop	{r3, pc}
   d5464:	00030264 	.word	0x00030264

000d5468 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5468:	b508      	push	{r3, lr}
   d546a:	4b02      	ldr	r3, [pc, #8]	; (d5474 <hal_usart_init+0xc>)
   d546c:	681b      	ldr	r3, [r3, #0]
   d546e:	681b      	ldr	r3, [r3, #0]
   d5470:	9301      	str	r3, [sp, #4]
   d5472:	bd08      	pop	{r3, pc}
   d5474:	0003023c 	.word	0x0003023c

000d5478 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5478:	b508      	push	{r3, lr}
   d547a:	4b02      	ldr	r3, [pc, #8]	; (d5484 <hal_usart_write+0xc>)
   d547c:	681b      	ldr	r3, [r3, #0]
   d547e:	68db      	ldr	r3, [r3, #12]
   d5480:	9301      	str	r3, [sp, #4]
   d5482:	bd08      	pop	{r3, pc}
   d5484:	0003023c 	.word	0x0003023c

000d5488 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5488:	b508      	push	{r3, lr}
   d548a:	4b02      	ldr	r3, [pc, #8]	; (d5494 <hal_usart_available+0xc>)
   d548c:	681b      	ldr	r3, [r3, #0]
   d548e:	691b      	ldr	r3, [r3, #16]
   d5490:	9301      	str	r3, [sp, #4]
   d5492:	bd08      	pop	{r3, pc}
   d5494:	0003023c 	.word	0x0003023c

000d5498 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5498:	b508      	push	{r3, lr}
   d549a:	4b02      	ldr	r3, [pc, #8]	; (d54a4 <hal_usart_read+0xc>)
   d549c:	681b      	ldr	r3, [r3, #0]
   d549e:	695b      	ldr	r3, [r3, #20]
   d54a0:	9301      	str	r3, [sp, #4]
   d54a2:	bd08      	pop	{r3, pc}
   d54a4:	0003023c 	.word	0x0003023c

000d54a8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d54a8:	b508      	push	{r3, lr}
   d54aa:	4b02      	ldr	r3, [pc, #8]	; (d54b4 <hal_usart_peek+0xc>)
   d54ac:	681b      	ldr	r3, [r3, #0]
   d54ae:	699b      	ldr	r3, [r3, #24]
   d54b0:	9301      	str	r3, [sp, #4]
   d54b2:	bd08      	pop	{r3, pc}
   d54b4:	0003023c 	.word	0x0003023c

000d54b8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d54b8:	b508      	push	{r3, lr}
   d54ba:	4b02      	ldr	r3, [pc, #8]	; (d54c4 <hal_usart_flush+0xc>)
   d54bc:	681b      	ldr	r3, [r3, #0]
   d54be:	69db      	ldr	r3, [r3, #28]
   d54c0:	9301      	str	r3, [sp, #4]
   d54c2:	bd08      	pop	{r3, pc}
   d54c4:	0003023c 	.word	0x0003023c

000d54c8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d54c8:	b508      	push	{r3, lr}
   d54ca:	4b02      	ldr	r3, [pc, #8]	; (d54d4 <hal_usart_is_enabled+0xc>)
   d54cc:	681b      	ldr	r3, [r3, #0]
   d54ce:	6a1b      	ldr	r3, [r3, #32]
   d54d0:	9301      	str	r3, [sp, #4]
   d54d2:	bd08      	pop	{r3, pc}
   d54d4:	0003023c 	.word	0x0003023c

000d54d8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d54d8:	b508      	push	{r3, lr}
   d54da:	4b02      	ldr	r3, [pc, #8]	; (d54e4 <hal_usart_available_data_for_write+0xc>)
   d54dc:	681b      	ldr	r3, [r3, #0]
   d54de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d54e0:	9301      	str	r3, [sp, #4]
   d54e2:	bd08      	pop	{r3, pc}
   d54e4:	0003023c 	.word	0x0003023c

000d54e8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d54e8:	b508      	push	{r3, lr}
   d54ea:	4b02      	ldr	r3, [pc, #8]	; (d54f4 <hal_i2c_begin+0xc>)
   d54ec:	681b      	ldr	r3, [r3, #0]
   d54ee:	68db      	ldr	r3, [r3, #12]
   d54f0:	9301      	str	r3, [sp, #4]
   d54f2:	bd08      	pop	{r3, pc}
   d54f4:	00030228 	.word	0x00030228

000d54f8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d54f8:	b508      	push	{r3, lr}
   d54fa:	4b02      	ldr	r3, [pc, #8]	; (d5504 <hal_i2c_begin_transmission+0xc>)
   d54fc:	681b      	ldr	r3, [r3, #0]
   d54fe:	699b      	ldr	r3, [r3, #24]
   d5500:	9301      	str	r3, [sp, #4]
   d5502:	bd08      	pop	{r3, pc}
   d5504:	00030228 	.word	0x00030228

000d5508 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5508:	b508      	push	{r3, lr}
   d550a:	4b02      	ldr	r3, [pc, #8]	; (d5514 <hal_i2c_end_transmission+0xc>)
   d550c:	681b      	ldr	r3, [r3, #0]
   d550e:	69db      	ldr	r3, [r3, #28]
   d5510:	9301      	str	r3, [sp, #4]
   d5512:	bd08      	pop	{r3, pc}
   d5514:	00030228 	.word	0x00030228

000d5518 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5518:	b508      	push	{r3, lr}
   d551a:	4b02      	ldr	r3, [pc, #8]	; (d5524 <hal_i2c_write+0xc>)
   d551c:	681b      	ldr	r3, [r3, #0]
   d551e:	6a1b      	ldr	r3, [r3, #32]
   d5520:	9301      	str	r3, [sp, #4]
   d5522:	bd08      	pop	{r3, pc}
   d5524:	00030228 	.word	0x00030228

000d5528 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5528:	b508      	push	{r3, lr}
   d552a:	4b02      	ldr	r3, [pc, #8]	; (d5534 <hal_i2c_available+0xc>)
   d552c:	681b      	ldr	r3, [r3, #0]
   d552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5530:	9301      	str	r3, [sp, #4]
   d5532:	bd08      	pop	{r3, pc}
   d5534:	00030228 	.word	0x00030228

000d5538 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5538:	b508      	push	{r3, lr}
   d553a:	4b02      	ldr	r3, [pc, #8]	; (d5544 <hal_i2c_read+0xc>)
   d553c:	681b      	ldr	r3, [r3, #0]
   d553e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5540:	9301      	str	r3, [sp, #4]
   d5542:	bd08      	pop	{r3, pc}
   d5544:	00030228 	.word	0x00030228

000d5548 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5548:	b508      	push	{r3, lr}
   d554a:	4b02      	ldr	r3, [pc, #8]	; (d5554 <hal_i2c_peek+0xc>)
   d554c:	681b      	ldr	r3, [r3, #0]
   d554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5550:	9301      	str	r3, [sp, #4]
   d5552:	bd08      	pop	{r3, pc}
   d5554:	00030228 	.word	0x00030228

000d5558 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5558:	b508      	push	{r3, lr}
   d555a:	4b02      	ldr	r3, [pc, #8]	; (d5564 <hal_i2c_flush+0xc>)
   d555c:	681b      	ldr	r3, [r3, #0]
   d555e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5560:	9301      	str	r3, [sp, #4]
   d5562:	bd08      	pop	{r3, pc}
   d5564:	00030228 	.word	0x00030228

000d5568 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5568:	b508      	push	{r3, lr}
   d556a:	4b02      	ldr	r3, [pc, #8]	; (d5574 <hal_i2c_is_enabled+0xc>)
   d556c:	681b      	ldr	r3, [r3, #0]
   d556e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5570:	9301      	str	r3, [sp, #4]
   d5572:	bd08      	pop	{r3, pc}
   d5574:	00030228 	.word	0x00030228

000d5578 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5578:	b508      	push	{r3, lr}
   d557a:	4b02      	ldr	r3, [pc, #8]	; (d5584 <hal_i2c_init+0xc>)
   d557c:	681b      	ldr	r3, [r3, #0]
   d557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5580:	9301      	str	r3, [sp, #4]
   d5582:	bd08      	pop	{r3, pc}
   d5584:	00030228 	.word	0x00030228

000d5588 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5588:	b508      	push	{r3, lr}
   d558a:	4b02      	ldr	r3, [pc, #8]	; (d5594 <hal_i2c_request_ex+0xc>)
   d558c:	681b      	ldr	r3, [r3, #0]
   d558e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5590:	9301      	str	r3, [sp, #4]
   d5592:	bd08      	pop	{r3, pc}
   d5594:	00030228 	.word	0x00030228

000d5598 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5598:	b508      	push	{r3, lr}
   d559a:	4b02      	ldr	r3, [pc, #8]	; (d55a4 <sock_setsockopt+0xc>)
   d559c:	681b      	ldr	r3, [r3, #0]
   d559e:	699b      	ldr	r3, [r3, #24]
   d55a0:	9301      	str	r3, [sp, #4]
   d55a2:	bd08      	pop	{r3, pc}
   d55a4:	00030238 	.word	0x00030238

000d55a8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d55a8:	b508      	push	{r3, lr}
   d55aa:	4b02      	ldr	r3, [pc, #8]	; (d55b4 <sock_close+0xc>)
   d55ac:	681b      	ldr	r3, [r3, #0]
   d55ae:	69db      	ldr	r3, [r3, #28]
   d55b0:	9301      	str	r3, [sp, #4]
   d55b2:	bd08      	pop	{r3, pc}
   d55b4:	00030238 	.word	0x00030238

000d55b8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d55b8:	b508      	push	{r3, lr}
   d55ba:	4b02      	ldr	r3, [pc, #8]	; (d55c4 <sock_connect+0xc>)
   d55bc:	681b      	ldr	r3, [r3, #0]
   d55be:	6a1b      	ldr	r3, [r3, #32]
   d55c0:	9301      	str	r3, [sp, #4]
   d55c2:	bd08      	pop	{r3, pc}
   d55c4:	00030238 	.word	0x00030238

000d55c8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d55c8:	b508      	push	{r3, lr}
   d55ca:	4b02      	ldr	r3, [pc, #8]	; (d55d4 <sock_recv+0xc>)
   d55cc:	681b      	ldr	r3, [r3, #0]
   d55ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d55d0:	9301      	str	r3, [sp, #4]
   d55d2:	bd08      	pop	{r3, pc}
   d55d4:	00030238 	.word	0x00030238

000d55d8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d55d8:	b508      	push	{r3, lr}
   d55da:	4b02      	ldr	r3, [pc, #8]	; (d55e4 <sock_send+0xc>)
   d55dc:	681b      	ldr	r3, [r3, #0]
   d55de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55e0:	9301      	str	r3, [sp, #4]
   d55e2:	bd08      	pop	{r3, pc}
   d55e4:	00030238 	.word	0x00030238

000d55e8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d55e8:	b508      	push	{r3, lr}
   d55ea:	4b02      	ldr	r3, [pc, #8]	; (d55f4 <sock_socket+0xc>)
   d55ec:	681b      	ldr	r3, [r3, #0]
   d55ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d55f0:	9301      	str	r3, [sp, #4]
   d55f2:	bd08      	pop	{r3, pc}
   d55f4:	00030238 	.word	0x00030238

000d55f8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d55f8:	b508      	push	{r3, lr}
   d55fa:	4b02      	ldr	r3, [pc, #8]	; (d5604 <hal_spi_begin+0xc>)
   d55fc:	681b      	ldr	r3, [r3, #0]
   d55fe:	681b      	ldr	r3, [r3, #0]
   d5600:	9301      	str	r3, [sp, #4]
   d5602:	bd08      	pop	{r3, pc}
   d5604:	00030230 	.word	0x00030230

000d5608 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d5608:	b508      	push	{r3, lr}
   d560a:	4b02      	ldr	r3, [pc, #8]	; (d5614 <hal_spi_set_bit_order+0xc>)
   d560c:	681b      	ldr	r3, [r3, #0]
   d560e:	689b      	ldr	r3, [r3, #8]
   d5610:	9301      	str	r3, [sp, #4]
   d5612:	bd08      	pop	{r3, pc}
   d5614:	00030230 	.word	0x00030230

000d5618 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d5618:	b508      	push	{r3, lr}
   d561a:	4b02      	ldr	r3, [pc, #8]	; (d5624 <hal_spi_set_data_mode+0xc>)
   d561c:	681b      	ldr	r3, [r3, #0]
   d561e:	68db      	ldr	r3, [r3, #12]
   d5620:	9301      	str	r3, [sp, #4]
   d5622:	bd08      	pop	{r3, pc}
   d5624:	00030230 	.word	0x00030230

000d5628 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d5628:	b508      	push	{r3, lr}
   d562a:	4b02      	ldr	r3, [pc, #8]	; (d5634 <hal_spi_set_clock_divider+0xc>)
   d562c:	681b      	ldr	r3, [r3, #0]
   d562e:	691b      	ldr	r3, [r3, #16]
   d5630:	9301      	str	r3, [sp, #4]
   d5632:	bd08      	pop	{r3, pc}
   d5634:	00030230 	.word	0x00030230

000d5638 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5638:	b508      	push	{r3, lr}
   d563a:	4b02      	ldr	r3, [pc, #8]	; (d5644 <hal_spi_transfer+0xc>)
   d563c:	681b      	ldr	r3, [r3, #0]
   d563e:	695b      	ldr	r3, [r3, #20]
   d5640:	9301      	str	r3, [sp, #4]
   d5642:	bd08      	pop	{r3, pc}
   d5644:	00030230 	.word	0x00030230

000d5648 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5648:	b508      	push	{r3, lr}
   d564a:	4b02      	ldr	r3, [pc, #8]	; (d5654 <hal_spi_init+0xc>)
   d564c:	681b      	ldr	r3, [r3, #0]
   d564e:	69db      	ldr	r3, [r3, #28]
   d5650:	9301      	str	r3, [sp, #4]
   d5652:	bd08      	pop	{r3, pc}
   d5654:	00030230 	.word	0x00030230

000d5658 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5658:	b508      	push	{r3, lr}
   d565a:	4b02      	ldr	r3, [pc, #8]	; (d5664 <hal_spi_is_enabled+0xc>)
   d565c:	681b      	ldr	r3, [r3, #0]
   d565e:	6a1b      	ldr	r3, [r3, #32]
   d5660:	9301      	str	r3, [sp, #4]
   d5662:	bd08      	pop	{r3, pc}
   d5664:	00030230 	.word	0x00030230

000d5668 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5668:	b508      	push	{r3, lr}
   d566a:	4b02      	ldr	r3, [pc, #8]	; (d5674 <hal_spi_info+0xc>)
   d566c:	681b      	ldr	r3, [r3, #0]
   d566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5670:	9301      	str	r3, [sp, #4]
   d5672:	bd08      	pop	{r3, pc}
   d5674:	00030230 	.word	0x00030230

000d5678 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5678:	b508      	push	{r3, lr}
   d567a:	4b02      	ldr	r3, [pc, #8]	; (d5684 <hal_spi_acquire+0xc>)
   d567c:	681b      	ldr	r3, [r3, #0]
   d567e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5680:	9301      	str	r3, [sp, #4]
   d5682:	bd08      	pop	{r3, pc}
   d5684:	00030230 	.word	0x00030230

000d5688 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5688:	b508      	push	{r3, lr}
   d568a:	4b02      	ldr	r3, [pc, #8]	; (d5694 <hal_spi_release+0xc>)
   d568c:	681b      	ldr	r3, [r3, #0]
   d568e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5690:	9301      	str	r3, [sp, #4]
   d5692:	bd08      	pop	{r3, pc}
   d5694:	00030230 	.word	0x00030230

000d5698 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5698:	b508      	push	{r3, lr}
   d569a:	4b02      	ldr	r3, [pc, #8]	; (d56a4 <HAL_USB_USART_Init+0xc>)
   d569c:	681b      	ldr	r3, [r3, #0]
   d569e:	681b      	ldr	r3, [r3, #0]
   d56a0:	9301      	str	r3, [sp, #4]
   d56a2:	bd08      	pop	{r3, pc}
   d56a4:	0003024c 	.word	0x0003024c

000d56a8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d56a8:	b508      	push	{r3, lr}
   d56aa:	4b02      	ldr	r3, [pc, #8]	; (d56b4 <HAL_USB_USART_Begin+0xc>)
   d56ac:	681b      	ldr	r3, [r3, #0]
   d56ae:	685b      	ldr	r3, [r3, #4]
   d56b0:	9301      	str	r3, [sp, #4]
   d56b2:	bd08      	pop	{r3, pc}
   d56b4:	0003024c 	.word	0x0003024c

000d56b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d56b8:	b508      	push	{r3, lr}
   d56ba:	4b02      	ldr	r3, [pc, #8]	; (d56c4 <HAL_USB_USART_Available_Data+0xc>)
   d56bc:	681b      	ldr	r3, [r3, #0]
   d56be:	691b      	ldr	r3, [r3, #16]
   d56c0:	9301      	str	r3, [sp, #4]
   d56c2:	bd08      	pop	{r3, pc}
   d56c4:	0003024c 	.word	0x0003024c

000d56c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d56c8:	b508      	push	{r3, lr}
   d56ca:	4b02      	ldr	r3, [pc, #8]	; (d56d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d56cc:	681b      	ldr	r3, [r3, #0]
   d56ce:	695b      	ldr	r3, [r3, #20]
   d56d0:	9301      	str	r3, [sp, #4]
   d56d2:	bd08      	pop	{r3, pc}
   d56d4:	0003024c 	.word	0x0003024c

000d56d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d56d8:	b508      	push	{r3, lr}
   d56da:	4b02      	ldr	r3, [pc, #8]	; (d56e4 <HAL_USB_USART_Receive_Data+0xc>)
   d56dc:	681b      	ldr	r3, [r3, #0]
   d56de:	699b      	ldr	r3, [r3, #24]
   d56e0:	9301      	str	r3, [sp, #4]
   d56e2:	bd08      	pop	{r3, pc}
   d56e4:	0003024c 	.word	0x0003024c

000d56e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d56e8:	b508      	push	{r3, lr}
   d56ea:	4b02      	ldr	r3, [pc, #8]	; (d56f4 <HAL_USB_USART_Send_Data+0xc>)
   d56ec:	681b      	ldr	r3, [r3, #0]
   d56ee:	69db      	ldr	r3, [r3, #28]
   d56f0:	9301      	str	r3, [sp, #4]
   d56f2:	bd08      	pop	{r3, pc}
   d56f4:	0003024c 	.word	0x0003024c

000d56f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d56f8:	b508      	push	{r3, lr}
   d56fa:	4b02      	ldr	r3, [pc, #8]	; (d5704 <HAL_USB_USART_Flush_Data+0xc>)
   d56fc:	681b      	ldr	r3, [r3, #0]
   d56fe:	6a1b      	ldr	r3, [r3, #32]
   d5700:	9301      	str	r3, [sp, #4]
   d5702:	bd08      	pop	{r3, pc}
   d5704:	0003024c 	.word	0x0003024c

000d5708 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5708:	b508      	push	{r3, lr}
   d570a:	4b02      	ldr	r3, [pc, #8]	; (d5714 <log_message+0xc>)
   d570c:	681b      	ldr	r3, [r3, #0]
   d570e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5710:	9301      	str	r3, [sp, #4]
   d5712:	bd08      	pop	{r3, pc}
   d5714:	00030260 	.word	0x00030260

000d5718 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5718:	b508      	push	{r3, lr}
   d571a:	4b02      	ldr	r3, [pc, #8]	; (d5724 <set_system_mode+0xc>)
   d571c:	681b      	ldr	r3, [r3, #0]
   d571e:	685b      	ldr	r3, [r3, #4]
   d5720:	9301      	str	r3, [sp, #4]
   d5722:	bd08      	pop	{r3, pc}
   d5724:	00030220 	.word	0x00030220

000d5728 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5728:	b508      	push	{r3, lr}
   d572a:	4b02      	ldr	r3, [pc, #8]	; (d5734 <system_delay_ms+0xc>)
   d572c:	681b      	ldr	r3, [r3, #0]
   d572e:	695b      	ldr	r3, [r3, #20]
   d5730:	9301      	str	r3, [sp, #4]
   d5732:	bd08      	pop	{r3, pc}
   d5734:	00030220 	.word	0x00030220

000d5738 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5738:	b508      	push	{r3, lr}
   d573a:	4b03      	ldr	r3, [pc, #12]	; (d5748 <system_ctrl_set_app_request_handler+0x10>)
   d573c:	681b      	ldr	r3, [r3, #0]
   d573e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5742:	9301      	str	r3, [sp, #4]
   d5744:	bd08      	pop	{r3, pc}
   d5746:	0000      	.short	0x0000
   d5748:	00030220 	.word	0x00030220

000d574c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d574c:	b508      	push	{r3, lr}
   d574e:	4b03      	ldr	r3, [pc, #12]	; (d575c <system_ctrl_set_result+0x10>)
   d5750:	681b      	ldr	r3, [r3, #0]
   d5752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5756:	9301      	str	r3, [sp, #4]
   d5758:	bd08      	pop	{r3, pc}
   d575a:	0000      	.short	0x0000
   d575c:	00030220 	.word	0x00030220

000d5760 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d5760:	b508      	push	{r3, lr}
   d5762:	4b03      	ldr	r3, [pc, #12]	; (d5770 <system_sleep_ext+0x10>)
   d5764:	681b      	ldr	r3, [r3, #0]
   d5766:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d576a:	9301      	str	r3, [sp, #4]
   d576c:	bd08      	pop	{r3, pc}
   d576e:	0000      	.short	0x0000
   d5770:	00030220 	.word	0x00030220

000d5774 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b02      	ldr	r3, [pc, #8]	; (d5780 <network_connect+0xc>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	685b      	ldr	r3, [r3, #4]
   d577c:	9301      	str	r3, [sp, #4]
   d577e:	bd08      	pop	{r3, pc}
   d5780:	00030240 	.word	0x00030240

000d5784 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5784:	b508      	push	{r3, lr}
   d5786:	4b02      	ldr	r3, [pc, #8]	; (d5790 <network_connecting+0xc>)
   d5788:	681b      	ldr	r3, [r3, #0]
   d578a:	689b      	ldr	r3, [r3, #8]
   d578c:	9301      	str	r3, [sp, #4]
   d578e:	bd08      	pop	{r3, pc}
   d5790:	00030240 	.word	0x00030240

000d5794 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5794:	b508      	push	{r3, lr}
   d5796:	4b02      	ldr	r3, [pc, #8]	; (d57a0 <network_disconnect+0xc>)
   d5798:	681b      	ldr	r3, [r3, #0]
   d579a:	68db      	ldr	r3, [r3, #12]
   d579c:	9301      	str	r3, [sp, #4]
   d579e:	bd08      	pop	{r3, pc}
   d57a0:	00030240 	.word	0x00030240

000d57a4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d57a4:	b508      	push	{r3, lr}
   d57a6:	4b02      	ldr	r3, [pc, #8]	; (d57b0 <network_ready+0xc>)
   d57a8:	681b      	ldr	r3, [r3, #0]
   d57aa:	691b      	ldr	r3, [r3, #16]
   d57ac:	9301      	str	r3, [sp, #4]
   d57ae:	bd08      	pop	{r3, pc}
   d57b0:	00030240 	.word	0x00030240

000d57b4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d57b4:	b508      	push	{r3, lr}
   d57b6:	4b02      	ldr	r3, [pc, #8]	; (d57c0 <network_on+0xc>)
   d57b8:	681b      	ldr	r3, [r3, #0]
   d57ba:	695b      	ldr	r3, [r3, #20]
   d57bc:	9301      	str	r3, [sp, #4]
   d57be:	bd08      	pop	{r3, pc}
   d57c0:	00030240 	.word	0x00030240

000d57c4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d57c4:	b508      	push	{r3, lr}
   d57c6:	4b02      	ldr	r3, [pc, #8]	; (d57d0 <network_off+0xc>)
   d57c8:	681b      	ldr	r3, [r3, #0]
   d57ca:	699b      	ldr	r3, [r3, #24]
   d57cc:	9301      	str	r3, [sp, #4]
   d57ce:	bd08      	pop	{r3, pc}
   d57d0:	00030240 	.word	0x00030240

000d57d4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d57d4:	b508      	push	{r3, lr}
   d57d6:	4b02      	ldr	r3, [pc, #8]	; (d57e0 <network_listen+0xc>)
   d57d8:	681b      	ldr	r3, [r3, #0]
   d57da:	69db      	ldr	r3, [r3, #28]
   d57dc:	9301      	str	r3, [sp, #4]
   d57de:	bd08      	pop	{r3, pc}
   d57e0:	00030240 	.word	0x00030240

000d57e4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d57e4:	b508      	push	{r3, lr}
   d57e6:	4b02      	ldr	r3, [pc, #8]	; (d57f0 <network_listening+0xc>)
   d57e8:	681b      	ldr	r3, [r3, #0]
   d57ea:	6a1b      	ldr	r3, [r3, #32]
   d57ec:	9301      	str	r3, [sp, #4]
   d57ee:	bd08      	pop	{r3, pc}
   d57f0:	00030240 	.word	0x00030240

000d57f4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d57f4:	b508      	push	{r3, lr}
   d57f6:	4b02      	ldr	r3, [pc, #8]	; (d5800 <network_set_listen_timeout+0xc>)
   d57f8:	681b      	ldr	r3, [r3, #0]
   d57fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d57fc:	9301      	str	r3, [sp, #4]
   d57fe:	bd08      	pop	{r3, pc}
   d5800:	00030240 	.word	0x00030240

000d5804 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5804:	b508      	push	{r3, lr}
   d5806:	4b02      	ldr	r3, [pc, #8]	; (d5810 <network_get_listen_timeout+0xc>)
   d5808:	681b      	ldr	r3, [r3, #0]
   d580a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d580c:	9301      	str	r3, [sp, #4]
   d580e:	bd08      	pop	{r3, pc}
   d5810:	00030240 	.word	0x00030240

000d5814 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5814:	b508      	push	{r3, lr}
   d5816:	4b02      	ldr	r3, [pc, #8]	; (d5820 <network_is_on+0xc>)
   d5818:	681b      	ldr	r3, [r3, #0]
   d581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d581c:	9301      	str	r3, [sp, #4]
   d581e:	bd08      	pop	{r3, pc}
   d5820:	00030240 	.word	0x00030240

000d5824 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5824:	b508      	push	{r3, lr}
   d5826:	4b02      	ldr	r3, [pc, #8]	; (d5830 <network_is_off+0xc>)
   d5828:	681b      	ldr	r3, [r3, #0]
   d582a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d582c:	9301      	str	r3, [sp, #4]
   d582e:	bd08      	pop	{r3, pc}
   d5830:	00030240 	.word	0x00030240

000d5834 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d5834:	b508      	push	{r3, lr}
   d5836:	4b02      	ldr	r3, [pc, #8]	; (d5840 <spark_deviceID+0xc>)
   d5838:	681b      	ldr	r3, [r3, #0]
   d583a:	69db      	ldr	r3, [r3, #28]
   d583c:	9301      	str	r3, [sp, #4]
   d583e:	bd08      	pop	{r3, pc}
   d5840:	00030244 	.word	0x00030244

000d5844 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5844:	b508      	push	{r3, lr}
   d5846:	4b02      	ldr	r3, [pc, #8]	; (d5850 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5848:	681b      	ldr	r3, [r3, #0]
   d584a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d584c:	9301      	str	r3, [sp, #4]
   d584e:	bd08      	pop	{r3, pc}
   d5850:	00030244 	.word	0x00030244

000d5854 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5854:	b508      	push	{r3, lr}
   d5856:	4b02      	ldr	r3, [pc, #8]	; (d5860 <malloc+0xc>)
   d5858:	681b      	ldr	r3, [r3, #0]
   d585a:	681b      	ldr	r3, [r3, #0]
   d585c:	9301      	str	r3, [sp, #4]
   d585e:	bd08      	pop	{r3, pc}
   d5860:	0003021c 	.word	0x0003021c

000d5864 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5864:	b508      	push	{r3, lr}
   d5866:	4b02      	ldr	r3, [pc, #8]	; (d5870 <free+0xc>)
   d5868:	681b      	ldr	r3, [r3, #0]
   d586a:	685b      	ldr	r3, [r3, #4]
   d586c:	9301      	str	r3, [sp, #4]
   d586e:	bd08      	pop	{r3, pc}
   d5870:	0003021c 	.word	0x0003021c

000d5874 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5874:	b508      	push	{r3, lr}
   d5876:	4b02      	ldr	r3, [pc, #8]	; (d5880 <realloc+0xc>)
   d5878:	681b      	ldr	r3, [r3, #0]
   d587a:	689b      	ldr	r3, [r3, #8]
   d587c:	9301      	str	r3, [sp, #4]
   d587e:	bd08      	pop	{r3, pc}
   d5880:	0003021c 	.word	0x0003021c

000d5884 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5884:	b508      	push	{r3, lr}
   d5886:	4b02      	ldr	r3, [pc, #8]	; (d5890 <__errno+0xc>)
   d5888:	681b      	ldr	r3, [r3, #0]
   d588a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d588c:	9301      	str	r3, [sp, #4]
   d588e:	bd08      	pop	{r3, pc}
   d5890:	0003021c 	.word	0x0003021c

000d5894 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5894:	b508      	push	{r3, lr}
   d5896:	4b02      	ldr	r3, [pc, #8]	; (d58a0 <newlib_impure_ptr_callback+0xc>)
   d5898:	681b      	ldr	r3, [r3, #0]
   d589a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d589c:	9301      	str	r3, [sp, #4]
   d589e:	bd08      	pop	{r3, pc}
   d58a0:	0003021c 	.word	0x0003021c

000d58a4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d58a4:	2200      	movs	r2, #0
   d58a6:	6840      	ldr	r0, [r0, #4]
   d58a8:	4611      	mov	r1, r2
   d58aa:	f7ff bf9b 	b.w	d57e4 <network_listening>

000d58ae <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d58ae:	2200      	movs	r2, #0
   d58b0:	6840      	ldr	r0, [r0, #4]
   d58b2:	4611      	mov	r1, r2
   d58b4:	f7ff bfa6 	b.w	d5804 <network_get_listen_timeout>

000d58b8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d58b8:	6840      	ldr	r0, [r0, #4]
   d58ba:	2200      	movs	r2, #0
   d58bc:	f7ff bf9a 	b.w	d57f4 <network_set_listen_timeout>

000d58c0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d58c0:	6840      	ldr	r0, [r0, #4]
   d58c2:	2200      	movs	r2, #0
   d58c4:	f081 0101 	eor.w	r1, r1, #1
   d58c8:	f7ff bf84 	b.w	d57d4 <network_listen>

000d58cc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d58cc:	2300      	movs	r3, #0
   d58ce:	6840      	ldr	r0, [r0, #4]
   d58d0:	461a      	mov	r2, r3
   d58d2:	4619      	mov	r1, r3
   d58d4:	f7ff bf76 	b.w	d57c4 <network_off>

000d58d8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d58d8:	2300      	movs	r3, #0
   d58da:	6840      	ldr	r0, [r0, #4]
   d58dc:	461a      	mov	r2, r3
   d58de:	4619      	mov	r1, r3
   d58e0:	f7ff bf68 	b.w	d57b4 <network_on>

000d58e4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d58e4:	2200      	movs	r2, #0
   d58e6:	6840      	ldr	r0, [r0, #4]
   d58e8:	4611      	mov	r1, r2
   d58ea:	f7ff bf5b 	b.w	d57a4 <network_ready>

000d58ee <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d58ee:	2200      	movs	r2, #0
   d58f0:	6840      	ldr	r0, [r0, #4]
   d58f2:	4611      	mov	r1, r2
   d58f4:	f7ff bf46 	b.w	d5784 <network_connecting>

000d58f8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d58f8:	6840      	ldr	r0, [r0, #4]
   d58fa:	2200      	movs	r2, #0
   d58fc:	2102      	movs	r1, #2
   d58fe:	f7ff bf49 	b.w	d5794 <network_disconnect>

000d5902 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5902:	2300      	movs	r3, #0
   d5904:	6840      	ldr	r0, [r0, #4]
   d5906:	461a      	mov	r2, r3
   d5908:	f7ff bf34 	b.w	d5774 <network_connect>

000d590c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d590c:	4b02      	ldr	r3, [pc, #8]	; (d5918 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d590e:	2203      	movs	r2, #3
   d5910:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5912:	4a02      	ldr	r2, [pc, #8]	; (d591c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5914:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5916:	4770      	bx	lr
   d5918:	2003e650 	.word	0x2003e650
   d591c:	000d7e2c 	.word	0x000d7e2c

000d5920 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5920:	2100      	movs	r1, #0
   d5922:	f7ff bea9 	b.w	d5678 <hal_spi_acquire>

000d5926 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5926:	2100      	movs	r1, #0
   d5928:	f7ff beae 	b.w	d5688 <hal_spi_release>

000d592c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d592c:	b510      	push	{r4, lr}
   d592e:	4604      	mov	r4, r0
   d5930:	4608      	mov	r0, r1
{
    _spi = spi;
   d5932:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5934:	f7ff fe88 	bl	d5648 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5938:	2300      	movs	r3, #0
   d593a:	6063      	str	r3, [r4, #4]
}
   d593c:	4620      	mov	r0, r4
   d593e:	bd10      	pop	{r4, pc}

000d5940 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5940:	b510      	push	{r4, lr}
   d5942:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5944:	7800      	ldrb	r0, [r0, #0]
   d5946:	f7ff ffeb 	bl	d5920 <_ZN8SPIClass4lockEv.isra.0>
   d594a:	b948      	cbnz	r0, d5960 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d594c:	7820      	ldrb	r0, [r4, #0]
   d594e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5952:	f7ff fe51 	bl	d55f8 <hal_spi_begin>
        unlock();
   d5956:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d595c:	f7ff bfe3 	b.w	d5926 <_ZN8SPIClass6unlockEv.isra.0>
}
   d5960:	bd10      	pop	{r4, pc}

000d5962 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5962:	b513      	push	{r0, r1, r4, lr}
   d5964:	4604      	mov	r4, r0
    if (!lock())
   d5966:	7800      	ldrb	r0, [r0, #0]
{
   d5968:	9101      	str	r1, [sp, #4]
    if (!lock())
   d596a:	f7ff ffd9 	bl	d5920 <_ZN8SPIClass4lockEv.isra.0>
   d596e:	9901      	ldr	r1, [sp, #4]
   d5970:	b940      	cbnz	r0, d5984 <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d5972:	7820      	ldrb	r0, [r4, #0]
   d5974:	f7ff fe48 	bl	d5608 <hal_spi_set_bit_order>
        unlock();
   d5978:	7820      	ldrb	r0, [r4, #0]
    }
}
   d597a:	b002      	add	sp, #8
   d597c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5980:	f7ff bfd1 	b.w	d5926 <_ZN8SPIClass6unlockEv.isra.0>
}
   d5984:	b002      	add	sp, #8
   d5986:	bd10      	pop	{r4, pc}

000d5988 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d5988:	b513      	push	{r0, r1, r4, lr}
   d598a:	4604      	mov	r4, r0
    if (!lock())
   d598c:	7800      	ldrb	r0, [r0, #0]
{
   d598e:	9101      	str	r1, [sp, #4]
    if (!lock())
   d5990:	f7ff ffc6 	bl	d5920 <_ZN8SPIClass4lockEv.isra.0>
   d5994:	9901      	ldr	r1, [sp, #4]
   d5996:	b940      	cbnz	r0, d59aa <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d5998:	7820      	ldrb	r0, [r4, #0]
   d599a:	f7ff fe3d 	bl	d5618 <hal_spi_set_data_mode>
        unlock();
   d599e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d59a0:	b002      	add	sp, #8
   d59a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d59a6:	f7ff bfbe 	b.w	d5926 <_ZN8SPIClass6unlockEv.isra.0>
}
   d59aa:	b002      	add	sp, #8
   d59ac:	bd10      	pop	{r4, pc}
	...

000d59b0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d59b0:	0840      	lsrs	r0, r0, #1
{
   d59b2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d59b4:	6018      	str	r0, [r3, #0]
   d59b6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d59b8:	6818      	ldr	r0, [r3, #0]
   d59ba:	4288      	cmp	r0, r1
   d59bc:	b2e5      	uxtb	r5, r4
   d59be:	d906      	bls.n	d59ce <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d59c0:	3401      	adds	r4, #1
   d59c2:	2c08      	cmp	r4, #8
   d59c4:	d002      	beq.n	d59cc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d59c6:	0840      	lsrs	r0, r0, #1
   d59c8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d59ca:	e7f5      	b.n	d59b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d59cc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d59ce:	4b02      	ldr	r3, [pc, #8]	; (d59d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d59d0:	5d5b      	ldrb	r3, [r3, r5]
   d59d2:	7013      	strb	r3, [r2, #0]
}
   d59d4:	bd30      	pop	{r4, r5, pc}
   d59d6:	bf00      	nop
   d59d8:	000d7e60 	.word	0x000d7e60

000d59dc <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d59dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d59e0:	b088      	sub	sp, #32
    unsigned clock = 0;
   d59e2:	2300      	movs	r3, #0
{
   d59e4:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d59e6:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d59e8:	9302      	str	r3, [sp, #8]
{
   d59ea:	460e      	mov	r6, r1
   d59ec:	4617      	mov	r7, r2
    if (!lock())
   d59ee:	f7ff ff97 	bl	d5920 <_ZN8SPIClass4lockEv.isra.0>
   d59f2:	4605      	mov	r5, r0
   d59f4:	bb00      	cbnz	r0, d5a38 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d59f6:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d59fa:	4601      	mov	r1, r0
   d59fc:	2214      	movs	r2, #20
   d59fe:	a803      	add	r0, sp, #12
   d5a00:	f002 f97e 	bl	d7d00 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5a04:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5a06:	462a      	mov	r2, r5
   d5a08:	a903      	add	r1, sp, #12
   d5a0a:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d5a0c:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d5a10:	f7ff fe2a 	bl	d5668 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5a14:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d5a16:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5a1a:	ab02      	add	r3, sp, #8
   d5a1c:	f10d 0207 	add.w	r2, sp, #7
   d5a20:	fb07 f106 	mul.w	r1, r7, r6
   d5a24:	f7ff ffc4 	bl	d59b0 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d5a28:	7820      	ldrb	r0, [r4, #0]
   d5a2a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5a2e:	f7ff fdfb 	bl	d5628 <hal_spi_set_clock_divider>
        unlock();
   d5a32:	7820      	ldrb	r0, [r4, #0]
   d5a34:	f7ff ff77 	bl	d5926 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d5a38:	9802      	ldr	r0, [sp, #8]
   d5a3a:	b008      	add	sp, #32
   d5a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5a40 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d5a40:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5a42:	7800      	ldrb	r0, [r0, #0]
   d5a44:	f7ff fdf8 	bl	d5638 <hal_spi_transfer>
}
   d5a48:	b2c0      	uxtb	r0, r0
   d5a4a:	bd08      	pop	{r3, pc}

000d5a4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5a4c:	b510      	push	{r4, lr}
   d5a4e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5a50:	6800      	ldr	r0, [r0, #0]
   d5a52:	b118      	cbz	r0, d5a5c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5a54:	f7ff ff06 	bl	d5864 <free>
            wakeupSource_ = nullptr;
   d5a58:	2300      	movs	r3, #0
   d5a5a:	6023      	str	r3, [r4, #0]
        }
    }
   d5a5c:	bd10      	pop	{r4, pc}

000d5a5e <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5a5e:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d5a60:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d5a64:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d5a66:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5a68:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d5a6a:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d5a6e:	f8c0 2006 	str.w	r2, [r0, #6]
   d5a72:	889b      	ldrh	r3, [r3, #4]
   d5a74:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5a76:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5a78:	f7ff ffe8 	bl	d5a4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d5a7c:	682b      	ldr	r3, [r5, #0]
   d5a7e:	b113      	cbz	r3, d5a86 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d5a80:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d5a82:	2300      	movs	r3, #0
   d5a84:	602b      	str	r3, [r5, #0]
    }
   d5a86:	4620      	mov	r0, r4
   d5a88:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5a8c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d5a8c:	b538      	push	{r3, r4, r5, lr}
   d5a8e:	460c      	mov	r4, r1
   d5a90:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d5a92:	f7ff ffdb 	bl	d5a4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d5a96:	b144      	cbz	r4, d5aaa <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d5a98:	8820      	ldrh	r0, [r4, #0]
   d5a9a:	f7ff fedb 	bl	d5854 <malloc>
   d5a9e:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d5aa0:	b128      	cbz	r0, d5aae <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d5aa2:	8822      	ldrh	r2, [r4, #0]
   d5aa4:	4621      	mov	r1, r4
   d5aa6:	f002 f91d 	bl	d7ce4 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d5aaa:	2000      	movs	r0, #0
    }
   d5aac:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d5aae:	4801      	ldr	r0, [pc, #4]	; (d5ab4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d5ab0:	e7fc      	b.n	d5aac <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d5ab2:	bf00      	nop
   d5ab4:	fffffefc 	.word	0xfffffefc

000d5ab8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d5ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5aba:	4d2d      	ldr	r5, [pc, #180]	; (d5b70 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d5abc:	7d0b      	ldrb	r3, [r1, #20]
   d5abe:	4604      	mov	r4, r0
   d5ac0:	b08b      	sub	sp, #44	; 0x2c
   d5ac2:	4608      	mov	r0, r1
   d5ac4:	1daf      	adds	r7, r5, #6
   d5ac6:	2b00      	cmp	r3, #0
   d5ac8:	d038      	beq.n	d5b3c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d5aca:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d5acc:	791b      	ldrb	r3, [r3, #4]
   d5ace:	2b00      	cmp	r3, #0
   d5ad0:	d034      	beq.n	d5b3c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d5ad2:	2200      	movs	r2, #0
    SleepResult() {}
   d5ad4:	4b27      	ldr	r3, [pc, #156]	; (d5b74 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d5ad6:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d5ad8:	a902      	add	r1, sp, #8
   d5ada:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d5adc:	9202      	str	r2, [sp, #8]
   d5ade:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d5ae2:	f88d 200e 	strb.w	r2, [sp, #14]
   d5ae6:	f7ff fe3b 	bl	d5760 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d5aea:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d5aee:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d5af2:	b200      	sxth	r0, r0
   d5af4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d5af8:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d5afc:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d5afe:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d5b00:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d5b02:	4628      	mov	r0, r5
   d5b04:	f7ff ffc2 	bl	d5a8c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d5b08:	a802      	add	r0, sp, #8
   d5b0a:	f7ff ff9f 	bl	d5a4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d5b0e:	2300      	movs	r3, #0
   d5b10:	6023      	str	r3, [r4, #0]
   d5b12:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d5b14:	71a3      	strb	r3, [r4, #6]
   d5b16:	8123      	strh	r3, [r4, #8]
   d5b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5b1c:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d5b1e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d5b22:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d5b24:	683b      	ldr	r3, [r7, #0]
   d5b26:	f8c4 3006 	str.w	r3, [r4, #6]
   d5b2a:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d5b2c:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d5b2e:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d5b30:	4620      	mov	r0, r4
   d5b32:	f7ff ffab 	bl	d5a8c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d5b36:	4620      	mov	r0, r4
   d5b38:	b00b      	add	sp, #44	; 0x2c
   d5b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d5b3c:	2600      	movs	r6, #0
   d5b3e:	2320      	movs	r3, #32
   d5b40:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d5b44:	4b0c      	ldr	r3, [pc, #48]	; (d5b78 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d5b46:	9300      	str	r3, [sp, #0]
   d5b48:	490c      	ldr	r1, [pc, #48]	; (d5b7c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d5b4a:	4633      	mov	r3, r6
   d5b4c:	aa02      	add	r2, sp, #8
   d5b4e:	2032      	movs	r0, #50	; 0x32
   d5b50:	f7ff fdda 	bl	d5708 <log_message>
    SleepResult() {}
   d5b54:	4b07      	ldr	r3, [pc, #28]	; (d5b74 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d5b56:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d5b58:	a902      	add	r1, sp, #8
        error_ = error;
   d5b5a:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d5b5e:	4804      	ldr	r0, [pc, #16]	; (d5b70 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d5b60:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d5b62:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d5b66:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5b6a:	f7ff ff78 	bl	d5a5e <_ZN17SystemSleepResultaSEOS_>
   d5b6e:	e7cb      	b.n	d5b08 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d5b70:	2003e658 	.word	0x2003e658
   d5b74:	ffff0000 	.word	0xffff0000
   d5b78:	000d7e6f 	.word	0x000d7e6f
   d5b7c:	000d7e68 	.word	0x000d7e68

000d5b80 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5b80:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5b82:	4b09      	ldr	r3, [pc, #36]	; (d5ba8 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5b84:	4c09      	ldr	r4, [pc, #36]	; (d5bac <_GLOBAL__sub_I_System+0x2c>)
   d5b86:	2202      	movs	r2, #2
   d5b88:	2000      	movs	r0, #0
   d5b8a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5b8c:	4b08      	ldr	r3, [pc, #32]	; (d5bb0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5b8e:	6020      	str	r0, [r4, #0]
   d5b90:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5b92:	71a0      	strb	r0, [r4, #6]
   d5b94:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5b96:	f7ff fdbf 	bl	d5718 <set_system_mode>
SystemClass System;
   d5b9a:	4620      	mov	r0, r4
   d5b9c:	4a05      	ldr	r2, [pc, #20]	; (d5bb4 <_GLOBAL__sub_I_System+0x34>)
   d5b9e:	4906      	ldr	r1, [pc, #24]	; (d5bb8 <_GLOBAL__sub_I_System+0x38>)
   d5ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5ba4:	f001 b962 	b.w	d6e6c <__aeabi_atexit>
   d5ba8:	2003e664 	.word	0x2003e664
   d5bac:	2003e658 	.word	0x2003e658
   d5bb0:	ffff0000 	.word	0xffff0000
   d5bb4:	2003e0d8 	.word	0x2003e0d8
   d5bb8:	000d411d 	.word	0x000d411d

000d5bbc <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5bbc:	b510      	push	{r4, lr}
   d5bbe:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5bc0:	f002 f8dc 	bl	d7d7c <strlen>
   d5bc4:	3801      	subs	r0, #1
   d5bc6:	1823      	adds	r3, r4, r0
   d5bc8:	4620      	mov	r0, r4
	while(i<j){
   d5bca:	4283      	cmp	r3, r0
   d5bcc:	d906      	bls.n	d5bdc <_Z11str_reversePc+0x20>
		c = *i;
   d5bce:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5bd0:	7819      	ldrb	r1, [r3, #0]
   d5bd2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5bd6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d5bda:	e7f6      	b.n	d5bca <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d5bdc:	bd10      	pop	{r4, pc}

000d5bde <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5bde:	b570      	push	{r4, r5, r6, lr}
   d5be0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5be2:	1e91      	subs	r1, r2, #2
   d5be4:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5be6:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d5be8:	d822      	bhi.n	d5c30 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d5bea:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d5bec:	b16d      	cbz	r5, d5c0a <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5bee:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d5bf2:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d5bf6:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d5bf8:	2d09      	cmp	r5, #9
                *ptr += '0';
   d5bfa:	bf94      	ite	ls
   d5bfc:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5bfe:	3157      	addhi	r1, #87	; 0x57
   d5c00:	b2c9      	uxtb	r1, r1
   d5c02:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d5c06:	4635      	mov	r5, r6
	while(a){
   d5c08:	e7f0      	b.n	d5bec <ultoa+0xe>
   d5c0a:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d5c0c:	4423      	add	r3, r4
            *ptr++ = '0';
   d5c0e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d5c10:	4293      	cmp	r3, r2
   d5c12:	d902      	bls.n	d5c1a <ultoa+0x3c>
            *ptr++ = '0';
   d5c14:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d5c18:	e7fa      	b.n	d5c10 <ultoa+0x32>
   d5c1a:	1a1a      	subs	r2, r3, r0
   d5c1c:	4283      	cmp	r3, r0
   d5c1e:	bf38      	it	cc
   d5c20:	2200      	movcc	r2, #0

	*ptr = '\0';
   d5c22:	2300      	movs	r3, #0
   d5c24:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d5c26:	4620      	mov	r0, r4
   d5c28:	f7ff ffc8 	bl	d5bbc <_Z11str_reversePc>
	return buffer;
   d5c2c:	4620      	mov	r0, r4
}
   d5c2e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d5c30:	2000      	movs	r0, #0
   d5c32:	e7fc      	b.n	d5c2e <ultoa+0x50>

000d5c34 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d5c34:	b570      	push	{r4, r5, r6, lr}
   d5c36:	b086      	sub	sp, #24
   d5c38:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d5c3a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d5c3c:	4668      	mov	r0, sp
   d5c3e:	f000 faf9 	bl	d6234 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d5c42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c44:	1d34      	adds	r4, r6, #4
   d5c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c48:	682b      	ldr	r3, [r5, #0]
   d5c4a:	7023      	strb	r3, [r4, #0]
    }
   d5c4c:	4630      	mov	r0, r6
   d5c4e:	b006      	add	sp, #24
   d5c50:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5c54 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d5c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5c58:	ec57 6b10 	vmov	r6, r7, d0
   d5c5c:	4680      	mov	r8, r0
   d5c5e:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d5c60:	ee10 0a10 	vmov	r0, s0
   d5c64:	2200      	movs	r2, #0
   d5c66:	2300      	movs	r3, #0
   d5c68:	4639      	mov	r1, r7
   d5c6a:	f001 fe4b 	bl	d7904 <__aeabi_dcmplt>
   d5c6e:	b128      	cbz	r0, d5c7c <_Z4dtoadhPc+0x28>
        val = -val;
   d5c70:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d5c74:	461f      	mov	r7, r3
        *sout++ = '-';
   d5c76:	232d      	movs	r3, #45	; 0x2d
   d5c78:	f804 3b01 	strb.w	r3, [r4], #1
   d5c7c:	2300      	movs	r3, #0
    }
    long scale = 1;
   d5c7e:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d5c82:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d5c84:	b2d9      	uxtb	r1, r3
   d5c86:	4588      	cmp	r8, r1
   d5c88:	d903      	bls.n	d5c92 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d5c8a:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d5c8e:	3301      	adds	r3, #1
   d5c90:	e7f8      	b.n	d5c84 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d5c92:	4648      	mov	r0, r9
   d5c94:	f001 fb5a 	bl	d734c <__aeabi_i2d>
   d5c98:	4632      	mov	r2, r6
   d5c9a:	463b      	mov	r3, r7
   d5c9c:	f001 fbc0 	bl	d7420 <__aeabi_dmul>
   d5ca0:	4606      	mov	r6, r0
   d5ca2:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d5ca4:	f001 fe8e 	bl	d79c4 <__aeabi_d2ulz>
   d5ca8:	4605      	mov	r5, r0
   d5caa:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d5cac:	f001 fb82 	bl	d73b4 <__aeabi_ul2d>
   d5cb0:	4602      	mov	r2, r0
   d5cb2:	460b      	mov	r3, r1
   d5cb4:	4630      	mov	r0, r6
   d5cb6:	4639      	mov	r1, r7
   d5cb8:	f001 f9fa 	bl	d70b0 <__aeabi_dsub>
   d5cbc:	4b13      	ldr	r3, [pc, #76]	; (d5d0c <_Z4dtoadhPc+0xb8>)
   d5cbe:	2200      	movs	r2, #0
   d5cc0:	f001 fe34 	bl	d792c <__aeabi_dcmpge>
   d5cc4:	b110      	cbz	r0, d5ccc <_Z4dtoadhPc+0x78>
        fixed++;
   d5cc6:	3501      	adds	r5, #1
   d5cc8:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d5ccc:	464a      	mov	r2, r9
   d5cce:	4628      	mov	r0, r5
   d5cd0:	17d3      	asrs	r3, r2, #31
   d5cd2:	4651      	mov	r1, sl
   d5cd4:	f001 fe5e 	bl	d7994 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d5cd8:	2301      	movs	r3, #1
   d5cda:	4615      	mov	r5, r2
   d5cdc:	4621      	mov	r1, r4
   d5cde:	220a      	movs	r2, #10
   d5ce0:	f7ff ff7d 	bl	d5bde <ultoa>
    if (prec) {
   d5ce4:	f1b8 0f00 	cmp.w	r8, #0
   d5ce8:	d00d      	beq.n	d5d06 <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d5cea:	4620      	mov	r0, r4
   d5cec:	f002 f846 	bl	d7d7c <strlen>
        *sout++ = '.';
   d5cf0:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d5cf2:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d5cf4:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d5cf6:	220a      	movs	r2, #10
   d5cf8:	4643      	mov	r3, r8
   d5cfa:	4628      	mov	r0, r5
   d5cfc:	3101      	adds	r1, #1
    }
}
   d5cfe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d5d02:	f7ff bf6c 	b.w	d5bde <ultoa>
}
   d5d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5d0a:	bf00      	nop
   d5d0c:	3fe00000 	.word	0x3fe00000

000d5d10 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5d10:	b510      	push	{r4, lr}
   d5d12:	4604      	mov	r4, r0
{
	free(buffer);
   d5d14:	6800      	ldr	r0, [r0, #0]
   d5d16:	f7ff fda5 	bl	d5864 <free>
}
   d5d1a:	4620      	mov	r0, r4
   d5d1c:	bd10      	pop	{r4, pc}

000d5d1e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5d1e:	b510      	push	{r4, lr}
   d5d20:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5d22:	6800      	ldr	r0, [r0, #0]
   d5d24:	b108      	cbz	r0, d5d2a <_ZN6String10invalidateEv+0xc>
   d5d26:	f7ff fd9d 	bl	d5864 <free>
	buffer = NULL;
   d5d2a:	2300      	movs	r3, #0
	capacity = len = 0;
   d5d2c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5d30:	6023      	str	r3, [r4, #0]
}
   d5d32:	bd10      	pop	{r4, pc}

000d5d34 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5d34:	b538      	push	{r3, r4, r5, lr}
   d5d36:	4604      	mov	r4, r0
   d5d38:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5d3a:	6800      	ldr	r0, [r0, #0]
   d5d3c:	3101      	adds	r1, #1
   d5d3e:	f7ff fd99 	bl	d5874 <realloc>
	if (newbuffer) {
   d5d42:	b110      	cbz	r0, d5d4a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5d44:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5d48:	2001      	movs	r0, #1
	}
	return 0;
}
   d5d4a:	bd38      	pop	{r3, r4, r5, pc}

000d5d4c <_ZN6String7reserveEj>:
{
   d5d4c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5d4e:	6803      	ldr	r3, [r0, #0]
{
   d5d50:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5d52:	b123      	cbz	r3, d5d5e <_ZN6String7reserveEj+0x12>
   d5d54:	6843      	ldr	r3, [r0, #4]
   d5d56:	428b      	cmp	r3, r1
   d5d58:	d301      	bcc.n	d5d5e <_ZN6String7reserveEj+0x12>
   d5d5a:	2001      	movs	r0, #1
}
   d5d5c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5d5e:	4620      	mov	r0, r4
   d5d60:	f7ff ffe8 	bl	d5d34 <_ZN6String12changeBufferEj>
   d5d64:	2800      	cmp	r0, #0
   d5d66:	d0f9      	beq.n	d5d5c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5d68:	68a3      	ldr	r3, [r4, #8]
   d5d6a:	2b00      	cmp	r3, #0
   d5d6c:	d1f5      	bne.n	d5d5a <_ZN6String7reserveEj+0xe>
   d5d6e:	6822      	ldr	r2, [r4, #0]
   d5d70:	7013      	strb	r3, [r2, #0]
   d5d72:	e7f2      	b.n	d5d5a <_ZN6String7reserveEj+0xe>

000d5d74 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5d76:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5d78:	4611      	mov	r1, r2
   d5d7a:	9201      	str	r2, [sp, #4]
{
   d5d7c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5d7e:	f7ff ffe5 	bl	d5d4c <_ZN6String7reserveEj>
   d5d82:	9a01      	ldr	r2, [sp, #4]
   d5d84:	b928      	cbnz	r0, d5d92 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5d86:	4620      	mov	r0, r4
   d5d88:	f7ff ffc9 	bl	d5d1e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5d8c:	4620      	mov	r0, r4
   d5d8e:	b003      	add	sp, #12
   d5d90:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5d92:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5d94:	4629      	mov	r1, r5
   d5d96:	6820      	ldr	r0, [r4, #0]
   d5d98:	f001 ffa4 	bl	d7ce4 <memcpy>
	buffer[len] = 0;
   d5d9c:	6822      	ldr	r2, [r4, #0]
   d5d9e:	68a3      	ldr	r3, [r4, #8]
   d5da0:	2100      	movs	r1, #0
   d5da2:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5da4:	e7f2      	b.n	d5d8c <_ZN6String4copyEPKcj+0x18>

000d5da6 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5da6:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5da8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5daa:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5dae:	4604      	mov	r4, r0
	len = 0;
   d5db0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5db2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5db4:	b141      	cbz	r1, d5dc8 <_ZN6StringC1EPKc+0x22>
   d5db6:	4608      	mov	r0, r1
   d5db8:	9101      	str	r1, [sp, #4]
   d5dba:	f001 ffdf 	bl	d7d7c <strlen>
   d5dbe:	9901      	ldr	r1, [sp, #4]
   d5dc0:	4602      	mov	r2, r0
   d5dc2:	4620      	mov	r0, r4
   d5dc4:	f7ff ffd6 	bl	d5d74 <_ZN6String4copyEPKcj>
}
   d5dc8:	4620      	mov	r0, r4
   d5dca:	b002      	add	sp, #8
   d5dcc:	bd10      	pop	{r4, pc}

000d5dce <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5dce:	b538      	push	{r3, r4, r5, lr}
   d5dd0:	4605      	mov	r5, r0
	if (buffer) {
   d5dd2:	6800      	ldr	r0, [r0, #0]
{
   d5dd4:	460c      	mov	r4, r1
	if (buffer) {
   d5dd6:	b168      	cbz	r0, d5df4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d5dd8:	686a      	ldr	r2, [r5, #4]
   d5dda:	688b      	ldr	r3, [r1, #8]
   d5ddc:	429a      	cmp	r2, r3
   d5dde:	d307      	bcc.n	d5df0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d5de0:	6809      	ldr	r1, [r1, #0]
   d5de2:	f001 ffc3 	bl	d7d6c <strcpy>
			len = rhs.len;
   d5de6:	68a3      	ldr	r3, [r4, #8]
   d5de8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5dea:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d5dec:	60a3      	str	r3, [r4, #8]
}
   d5dee:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d5df0:	f7ff fd38 	bl	d5864 <free>
	buffer = rhs.buffer;
   d5df4:	6823      	ldr	r3, [r4, #0]
   d5df6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d5df8:	6863      	ldr	r3, [r4, #4]
   d5dfa:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5dfc:	68a3      	ldr	r3, [r4, #8]
   d5dfe:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5e00:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d5e02:	e9c4 3300 	strd	r3, r3, [r4]
   d5e06:	e7f1      	b.n	d5dec <_ZN6String4moveERS_+0x1e>

000d5e08 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d5e08:	4288      	cmp	r0, r1
{
   d5e0a:	b510      	push	{r4, lr}
   d5e0c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d5e0e:	d001      	beq.n	d5e14 <_ZN6StringaSEOS_+0xc>
   d5e10:	f7ff ffdd 	bl	d5dce <_ZN6String4moveERS_>
	return *this;
}
   d5e14:	4620      	mov	r0, r4
   d5e16:	bd10      	pop	{r4, pc}

000d5e18 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5e18:	b513      	push	{r0, r1, r4, lr}
   d5e1a:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5e1c:	b159      	cbz	r1, d5e36 <_ZN6StringaSEPKc+0x1e>
   d5e1e:	4608      	mov	r0, r1
   d5e20:	9101      	str	r1, [sp, #4]
   d5e22:	f001 ffab 	bl	d7d7c <strlen>
   d5e26:	9901      	ldr	r1, [sp, #4]
   d5e28:	4602      	mov	r2, r0
   d5e2a:	4620      	mov	r0, r4
   d5e2c:	f7ff ffa2 	bl	d5d74 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5e30:	4620      	mov	r0, r4
   d5e32:	b002      	add	sp, #8
   d5e34:	bd10      	pop	{r4, pc}
	else invalidate();
   d5e36:	f7ff ff72 	bl	d5d1e <_ZN6String10invalidateEv>
   d5e3a:	e7f9      	b.n	d5e30 <_ZN6StringaSEPKc+0x18>

000d5e3c <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   d5e3c:	b510      	push	{r4, lr}
   d5e3e:	4604      	mov	r4, r0
   d5e40:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d5e42:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   d5e44:	4608      	mov	r0, r1
	capacity = 0;
   d5e46:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d5e4a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5e4c:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   d5e4e:	a901      	add	r1, sp, #4
   d5e50:	b2c0      	uxtb	r0, r0
   d5e52:	f7ff feff 	bl	d5c54 <_Z4dtoadhPc>
        *this = buf;
   d5e56:	a901      	add	r1, sp, #4
   d5e58:	4620      	mov	r0, r4
   d5e5a:	f7ff ffdd 	bl	d5e18 <_ZN6StringaSEPKc>
}
   d5e5e:	4620      	mov	r0, r4
   d5e60:	b00a      	add	sp, #40	; 0x28
   d5e62:	bd10      	pop	{r4, pc}

000d5e64 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5e64:	b570      	push	{r4, r5, r6, lr}
   d5e66:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5e68:	460e      	mov	r6, r1
   d5e6a:	b909      	cbnz	r1, d5e70 <_ZN6String6concatEPKcj+0xc>
   d5e6c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5e6e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5e70:	b16a      	cbz	r2, d5e8e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d5e72:	6884      	ldr	r4, [r0, #8]
   d5e74:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d5e76:	4621      	mov	r1, r4
   d5e78:	f7ff ff68 	bl	d5d4c <_ZN6String7reserveEj>
   d5e7c:	2800      	cmp	r0, #0
   d5e7e:	d0f5      	beq.n	d5e6c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5e80:	6828      	ldr	r0, [r5, #0]
   d5e82:	68ab      	ldr	r3, [r5, #8]
   d5e84:	4631      	mov	r1, r6
   d5e86:	4418      	add	r0, r3
   d5e88:	f001 ff70 	bl	d7d6c <strcpy>
	len = newlen;
   d5e8c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d5e8e:	2001      	movs	r0, #1
   d5e90:	e7ed      	b.n	d5e6e <_ZN6String6concatEPKcj+0xa>

000d5e92 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d5e92:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5e94:	688a      	ldr	r2, [r1, #8]
   d5e96:	6809      	ldr	r1, [r1, #0]
{
   d5e98:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5e9a:	f7ff ffe3 	bl	d5e64 <_ZN6String6concatEPKcj>
   d5e9e:	b910      	cbnz	r0, d5ea6 <_ZplRK15StringSumHelperRK6String+0x14>
   d5ea0:	4620      	mov	r0, r4
   d5ea2:	f7ff ff3c 	bl	d5d1e <_ZN6String10invalidateEv>
	return a;
}
   d5ea6:	4620      	mov	r0, r4
   d5ea8:	bd10      	pop	{r4, pc}

000d5eaa <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d5eaa:	b513      	push	{r0, r1, r4, lr}
   d5eac:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d5eae:	b929      	cbnz	r1, d5ebc <_ZplRK15StringSumHelperPKc+0x12>
   d5eb0:	4620      	mov	r0, r4
   d5eb2:	f7ff ff34 	bl	d5d1e <_ZN6String10invalidateEv>
	return a;
}
   d5eb6:	4620      	mov	r0, r4
   d5eb8:	b002      	add	sp, #8
   d5eba:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d5ebc:	4608      	mov	r0, r1
   d5ebe:	9101      	str	r1, [sp, #4]
   d5ec0:	f001 ff5c 	bl	d7d7c <strlen>
   d5ec4:	9901      	ldr	r1, [sp, #4]
   d5ec6:	4602      	mov	r2, r0
   d5ec8:	4620      	mov	r0, r4
   d5eca:	f7ff ffcb 	bl	d5e64 <_ZN6String6concatEPKcj>
   d5ece:	2800      	cmp	r0, #0
   d5ed0:	d0ee      	beq.n	d5eb0 <_ZplRK15StringSumHelperPKc+0x6>
   d5ed2:	e7f0      	b.n	d5eb6 <_ZplRK15StringSumHelperPKc+0xc>

000d5ed4 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5ed4:	b510      	push	{r4, lr}
   d5ed6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5ed8:	6800      	ldr	r0, [r0, #0]
   d5eda:	b108      	cbz	r0, d5ee0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5edc:	f7ff faa4 	bl	d5428 <os_mutex_recursive_destroy>
    }
   d5ee0:	4620      	mov	r0, r4
   d5ee2:	bd10      	pop	{r4, pc}

000d5ee4 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5ee4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5ee6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5ee8:	4604      	mov	r4, r0
      if (_M_manager)
   d5eea:	b113      	cbz	r3, d5ef2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5eec:	2203      	movs	r2, #3
   d5eee:	4601      	mov	r1, r0
   d5ef0:	4798      	blx	r3
    }
   d5ef2:	4620      	mov	r0, r4
   d5ef4:	bd10      	pop	{r4, pc}
	...

000d5ef8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5ef8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5efa:	4c06      	ldr	r4, [pc, #24]	; (d5f14 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5efc:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5efe:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5f00:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5f02:	f7ff fa89 	bl	d5418 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5f06:	4620      	mov	r0, r4
   d5f08:	4a03      	ldr	r2, [pc, #12]	; (d5f18 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5f0a:	4904      	ldr	r1, [pc, #16]	; (d5f1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5f10:	f000 bfac 	b.w	d6e6c <__aeabi_atexit>
   d5f14:	2003e668 	.word	0x2003e668
   d5f18:	2003e0d8 	.word	0x2003e0d8
   d5f1c:	000d5ed5 	.word	0x000d5ed5

000d5f20 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5f22:	4606      	mov	r6, r0
   d5f24:	460d      	mov	r5, r1
  size_t n = 0;
   d5f26:	188f      	adds	r7, r1, r2
   d5f28:	2400      	movs	r4, #0
  while (size--) {
   d5f2a:	42bd      	cmp	r5, r7
   d5f2c:	d00c      	beq.n	d5f48 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5f2e:	6833      	ldr	r3, [r6, #0]
   d5f30:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5f34:	689b      	ldr	r3, [r3, #8]
   d5f36:	4630      	mov	r0, r6
   d5f38:	4798      	blx	r3
     if (chunk>=0)
   d5f3a:	1e03      	subs	r3, r0, #0
   d5f3c:	db01      	blt.n	d5f42 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5f3e:	441c      	add	r4, r3
  while (size--) {
   d5f40:	e7f3      	b.n	d5f2a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5f42:	2c00      	cmp	r4, #0
   d5f44:	bf08      	it	eq
   d5f46:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5f48:	4620      	mov	r0, r4
   d5f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5f4c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5f4c:	b513      	push	{r0, r1, r4, lr}
   d5f4e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5f50:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5f52:	b159      	cbz	r1, d5f6c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5f54:	9101      	str	r1, [sp, #4]
   d5f56:	f001 ff11 	bl	d7d7c <strlen>
   d5f5a:	6823      	ldr	r3, [r4, #0]
   d5f5c:	9901      	ldr	r1, [sp, #4]
   d5f5e:	68db      	ldr	r3, [r3, #12]
   d5f60:	4602      	mov	r2, r0
   d5f62:	4620      	mov	r0, r4
    }
   d5f64:	b002      	add	sp, #8
   d5f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5f6a:	4718      	bx	r3
    }
   d5f6c:	b002      	add	sp, #8
   d5f6e:	bd10      	pop	{r4, pc}

000d5f70 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5f70:	6803      	ldr	r3, [r0, #0]
   d5f72:	689b      	ldr	r3, [r3, #8]
   d5f74:	4718      	bx	r3

000d5f76 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5f76:	b530      	push	{r4, r5, lr}
   d5f78:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5f7a:	2300      	movs	r3, #0
   d5f7c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5f80:	2a01      	cmp	r2, #1
   d5f82:	bf98      	it	ls
   d5f84:	220a      	movls	r2, #10
   d5f86:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5f88:	460d      	mov	r5, r1
   d5f8a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5f8e:	fb01 5312 	mls	r3, r1, r2, r5
   d5f92:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5f96:	2b09      	cmp	r3, #9
   d5f98:	bf94      	ite	ls
   d5f9a:	3330      	addls	r3, #48	; 0x30
   d5f9c:	3337      	addhi	r3, #55	; 0x37
   d5f9e:	b2db      	uxtb	r3, r3
  } while(n);
   d5fa0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5fa2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5fa6:	d9ef      	bls.n	d5f88 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5fa8:	4621      	mov	r1, r4
   d5faa:	f7ff ffcf 	bl	d5f4c <_ZN5Print5writeEPKc>
}
   d5fae:	b00b      	add	sp, #44	; 0x2c
   d5fb0:	bd30      	pop	{r4, r5, pc}

000d5fb2 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5fb2:	2300      	movs	r3, #0
   d5fb4:	6840      	ldr	r0, [r0, #4]
   d5fb6:	461a      	mov	r2, r3
   d5fb8:	4619      	mov	r1, r3
   d5fba:	f7ff bbfb 	b.w	d57b4 <network_on>
	...

000d5fc0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5fc0:	4b01      	ldr	r3, [pc, #4]	; (d5fc8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5fc2:	4a02      	ldr	r2, [pc, #8]	; (d5fcc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5fc4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5fc6:	4770      	bx	lr
   d5fc8:	2003e66c 	.word	0x2003e66c
   d5fcc:	000d7ea0 	.word	0x000d7ea0

000d5fd0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5fd0:	4b02      	ldr	r3, [pc, #8]	; (d5fdc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5fd2:	681a      	ldr	r2, [r3, #0]
   d5fd4:	4b02      	ldr	r3, [pc, #8]	; (d5fe0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5fd6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5fd8:	4770      	bx	lr
   d5fda:	bf00      	nop
   d5fdc:	2003e070 	.word	0x2003e070
   d5fe0:	2003e670 	.word	0x2003e670

000d5fe4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5fe4:	2100      	movs	r1, #0
   d5fe6:	f7ff bb9f 	b.w	d5728 <system_delay_ms>

000d5fea <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5fea:	b510      	push	{r4, lr}
   d5fec:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5fee:	f7ff ff79 	bl	d5ee4 <_ZNSt14_Function_baseD1Ev>
   d5ff2:	4620      	mov	r0, r4
   d5ff4:	bd10      	pop	{r4, pc}
	...

000d5ff8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5ff8:	4803      	ldr	r0, [pc, #12]	; (d6008 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5ffa:	4a04      	ldr	r2, [pc, #16]	; (d600c <_GLOBAL__sub_I_RGB+0x14>)
   d5ffc:	4904      	ldr	r1, [pc, #16]	; (d6010 <_GLOBAL__sub_I_RGB+0x18>)
   d5ffe:	2300      	movs	r3, #0
   d6000:	6083      	str	r3, [r0, #8]
   d6002:	f000 bf33 	b.w	d6e6c <__aeabi_atexit>
   d6006:	bf00      	nop
   d6008:	2003e674 	.word	0x2003e674
   d600c:	2003e0d8 	.word	0x2003e0d8
   d6010:	000d5feb 	.word	0x000d5feb

000d6014 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6014:	4b01      	ldr	r3, [pc, #4]	; (d601c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6016:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6018:	4770      	bx	lr
   d601a:	bf00      	nop
   d601c:	2003e074 	.word	0x2003e074

000d6020 <serialEventRun>:
{
   d6020:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6022:	4b0b      	ldr	r3, [pc, #44]	; (d6050 <serialEventRun+0x30>)
   d6024:	b143      	cbz	r3, d6038 <serialEventRun+0x18>
   d6026:	f000 f971 	bl	d630c <_Z16_fetch_usbserialv>
   d602a:	6803      	ldr	r3, [r0, #0]
   d602c:	691b      	ldr	r3, [r3, #16]
   d602e:	4798      	blx	r3
   d6030:	2800      	cmp	r0, #0
   d6032:	dd01      	ble.n	d6038 <serialEventRun+0x18>
        serialEvent();
   d6034:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6038:	4b06      	ldr	r3, [pc, #24]	; (d6054 <serialEventRun+0x34>)
   d603a:	b143      	cbz	r3, d604e <serialEventRun+0x2e>
   d603c:	f000 f9e4 	bl	d6408 <_Z22__fetch_global_Serial1v>
   d6040:	6803      	ldr	r3, [r0, #0]
   d6042:	691b      	ldr	r3, [r3, #16]
   d6044:	4798      	blx	r3
   d6046:	2800      	cmp	r0, #0
   d6048:	dd01      	ble.n	d604e <serialEventRun+0x2e>
        serialEvent1();
   d604a:	f3af 8000 	nop.w
}
   d604e:	bd08      	pop	{r3, pc}
	...

000d6058 <_post_loop>:
{
   d6058:	b508      	push	{r3, lr}
	serialEventRun();
   d605a:	f7ff ffe1 	bl	d6020 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d605e:	f7ff f9bb 	bl	d53d8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6062:	4b01      	ldr	r3, [pc, #4]	; (d6068 <_post_loop+0x10>)
   d6064:	6018      	str	r0, [r3, #0]
}
   d6066:	bd08      	pop	{r3, pc}
   d6068:	2003e7d4 	.word	0x2003e7d4

000d606c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d606c:	4802      	ldr	r0, [pc, #8]	; (d6078 <_Z33system_initialize_user_backup_ramv+0xc>)
   d606e:	4a03      	ldr	r2, [pc, #12]	; (d607c <_Z33system_initialize_user_backup_ramv+0x10>)
   d6070:	4903      	ldr	r1, [pc, #12]	; (d6080 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6072:	1a12      	subs	r2, r2, r0
   d6074:	f001 be36 	b.w	d7ce4 <memcpy>
   d6078:	2003f400 	.word	0x2003f400
   d607c:	2003f404 	.word	0x2003f404
   d6080:	000d8178 	.word	0x000d8178

000d6084 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6084:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6086:	2300      	movs	r3, #0
   d6088:	9300      	str	r3, [sp, #0]
   d608a:	461a      	mov	r2, r3
   d608c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6090:	f7ff fb5c 	bl	d574c <system_ctrl_set_result>
}
   d6094:	b003      	add	sp, #12
   d6096:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d609c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d609c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d609e:	8843      	ldrh	r3, [r0, #2]
   d60a0:	2b0a      	cmp	r3, #10
   d60a2:	d008      	beq.n	d60b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d60a4:	2b50      	cmp	r3, #80	; 0x50
   d60a6:	d10b      	bne.n	d60c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d60a8:	4b09      	ldr	r3, [pc, #36]	; (d60d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d60aa:	681b      	ldr	r3, [r3, #0]
   d60ac:	b14b      	cbz	r3, d60c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d60ae:	b003      	add	sp, #12
   d60b0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d60b4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d60b6:	f7ff ffe5 	bl	d6084 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d60ba:	b003      	add	sp, #12
   d60bc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d60c0:	2300      	movs	r3, #0
   d60c2:	9300      	str	r3, [sp, #0]
   d60c4:	461a      	mov	r2, r3
   d60c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d60ca:	f7ff fb3f 	bl	d574c <system_ctrl_set_result>
}
   d60ce:	e7f4      	b.n	d60ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d60d0:	2003e688 	.word	0x2003e688

000d60d4 <module_user_init_hook>:
{
   d60d4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d60d6:	4c12      	ldr	r4, [pc, #72]	; (d6120 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d60d8:	4812      	ldr	r0, [pc, #72]	; (d6124 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d60da:	4d13      	ldr	r5, [pc, #76]	; (d6128 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d60dc:	2100      	movs	r1, #0
   d60de:	f7ff fbd9 	bl	d5894 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d60e2:	6823      	ldr	r3, [r4, #0]
   d60e4:	42ab      	cmp	r3, r5
   d60e6:	4b11      	ldr	r3, [pc, #68]	; (d612c <module_user_init_hook+0x58>)
   d60e8:	bf0c      	ite	eq
   d60ea:	2201      	moveq	r2, #1
   d60ec:	2200      	movne	r2, #0
   d60ee:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d60f0:	d002      	beq.n	d60f8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d60f2:	f7ff ffbb 	bl	d606c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d60f6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d60f8:	f7ff f966 	bl	d53c8 <HAL_RNG_GetRandomNumber>
   d60fc:	4604      	mov	r4, r0
    srand(seed);
   d60fe:	f001 fe07 	bl	d7d10 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6102:	4b0b      	ldr	r3, [pc, #44]	; (d6130 <module_user_init_hook+0x5c>)
   d6104:	b113      	cbz	r3, d610c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d6106:	4620      	mov	r0, r4
   d6108:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d610c:	2100      	movs	r1, #0
   d610e:	4808      	ldr	r0, [pc, #32]	; (d6130 <module_user_init_hook+0x5c>)
   d6110:	f7ff fb98 	bl	d5844 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6118:	4806      	ldr	r0, [pc, #24]	; (d6134 <module_user_init_hook+0x60>)
   d611a:	2100      	movs	r1, #0
   d611c:	f7ff bb0c 	b.w	d5738 <system_ctrl_set_app_request_handler>
   d6120:	2003f400 	.word	0x2003f400
   d6124:	000d6015 	.word	0x000d6015
   d6128:	9a271c1e 	.word	0x9a271c1e
   d612c:	2003e684 	.word	0x2003e684
   d6130:	00000000 	.word	0x00000000
   d6134:	000d609d 	.word	0x000d609d

000d6138 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d6138:	4770      	bx	lr

000d613a <_ZN9IPAddressD0Ev>:
   d613a:	b510      	push	{r4, lr}
   d613c:	2118      	movs	r1, #24
   d613e:	4604      	mov	r4, r0
   d6140:	f000 fe99 	bl	d6e76 <_ZdlPvj>
   d6144:	4620      	mov	r0, r4
   d6146:	bd10      	pop	{r4, pc}

000d6148 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6148:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d614a:	7d03      	ldrb	r3, [r0, #20]
   d614c:	2b06      	cmp	r3, #6
{
   d614e:	b08d      	sub	sp, #52	; 0x34
   d6150:	460e      	mov	r6, r1
   d6152:	f100 0704 	add.w	r7, r0, #4
   d6156:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d615a:	d012      	beq.n	d6182 <_ZNK9IPAddress7printToER5Print+0x3a>
   d615c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6160:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6164:	220a      	movs	r2, #10
   d6166:	4630      	mov	r0, r6
   d6168:	f7ff ff05 	bl	d5f76 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d616c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d616e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6170:	d019      	beq.n	d61a6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6172:	2c00      	cmp	r4, #0
   d6174:	d0f4      	beq.n	d6160 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6176:	212e      	movs	r1, #46	; 0x2e
   d6178:	4630      	mov	r0, r6
   d617a:	f7ff fef9 	bl	d5f70 <_ZN5Print5printEc>
   d617e:	4404      	add	r4, r0
   d6180:	e7ee      	b.n	d6160 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6182:	232f      	movs	r3, #47	; 0x2f
   d6184:	466a      	mov	r2, sp
   d6186:	4639      	mov	r1, r7
   d6188:	200a      	movs	r0, #10
		buf[0] = 0;
   d618a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d618e:	f7ff f953 	bl	d5438 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6192:	4668      	mov	r0, sp
   d6194:	f001 fdf2 	bl	d7d7c <strlen>
   d6198:	6833      	ldr	r3, [r6, #0]
   d619a:	4602      	mov	r2, r0
   d619c:	68db      	ldr	r3, [r3, #12]
   d619e:	4669      	mov	r1, sp
   d61a0:	4630      	mov	r0, r6
   d61a2:	4798      	blx	r3
   d61a4:	4604      	mov	r4, r0
    }
    return n;
}
   d61a6:	4620      	mov	r0, r4
   d61a8:	b00d      	add	sp, #52	; 0x34
   d61aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d61ac <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d61ac:	b510      	push	{r4, lr}
   d61ae:	4b05      	ldr	r3, [pc, #20]	; (d61c4 <_ZN9IPAddressC1Ev+0x18>)
   d61b0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d61b2:	2211      	movs	r2, #17
   d61b4:	f840 3b04 	str.w	r3, [r0], #4
   d61b8:	2100      	movs	r1, #0
   d61ba:	f001 fda1 	bl	d7d00 <memset>
}
   d61be:	4620      	mov	r0, r4
   d61c0:	bd10      	pop	{r4, pc}
   d61c2:	bf00      	nop
   d61c4:	000d7ec8 	.word	0x000d7ec8

000d61c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d61c8:	4603      	mov	r3, r0
   d61ca:	4a07      	ldr	r2, [pc, #28]	; (d61e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d61cc:	b510      	push	{r4, lr}
   d61ce:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d61d2:	f101 0210 	add.w	r2, r1, #16
   d61d6:	f851 4b04 	ldr.w	r4, [r1], #4
   d61da:	f843 4b04 	str.w	r4, [r3], #4
   d61de:	4291      	cmp	r1, r2
   d61e0:	d1f9      	bne.n	d61d6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d61e2:	780a      	ldrb	r2, [r1, #0]
   d61e4:	701a      	strb	r2, [r3, #0]
}
   d61e6:	bd10      	pop	{r4, pc}
   d61e8:	000d7ec8 	.word	0x000d7ec8

000d61ec <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d61ec:	7d03      	ldrb	r3, [r0, #20]
   d61ee:	2b04      	cmp	r3, #4
   d61f0:	d104      	bne.n	d61fc <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d61f2:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d61f4:	3800      	subs	r0, #0
   d61f6:	bf18      	it	ne
   d61f8:	2001      	movne	r0, #1
   d61fa:	4770      	bx	lr
    } else if (version() == 6) {
   d61fc:	2b06      	cmp	r3, #6
   d61fe:	d107      	bne.n	d6210 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6200:	6843      	ldr	r3, [r0, #4]
   d6202:	b93b      	cbnz	r3, d6214 <_ZNK9IPAddresscvbEv+0x28>
   d6204:	6883      	ldr	r3, [r0, #8]
   d6206:	b92b      	cbnz	r3, d6214 <_ZNK9IPAddresscvbEv+0x28>
   d6208:	68c3      	ldr	r3, [r0, #12]
   d620a:	b91b      	cbnz	r3, d6214 <_ZNK9IPAddresscvbEv+0x28>
   d620c:	6900      	ldr	r0, [r0, #16]
   d620e:	e7f1      	b.n	d61f4 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d6210:	2000      	movs	r0, #0
   d6212:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6214:	2001      	movs	r0, #1
}
   d6216:	4770      	bx	lr

000d6218 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6218:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d621a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d621e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6222:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6226:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d622a:	2304      	movs	r3, #4
   d622c:	6041      	str	r1, [r0, #4]
   d622e:	7503      	strb	r3, [r0, #20]
}
   d6230:	bd10      	pop	{r4, pc}
	...

000d6234 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d6234:	b513      	push	{r0, r1, r4, lr}
   d6236:	4b05      	ldr	r3, [pc, #20]	; (d624c <_ZN9IPAddressC1EPKh+0x18>)
   d6238:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d623a:	78cb      	ldrb	r3, [r1, #3]
   d623c:	9300      	str	r3, [sp, #0]
   d623e:	788b      	ldrb	r3, [r1, #2]
   d6240:	784a      	ldrb	r2, [r1, #1]
   d6242:	7809      	ldrb	r1, [r1, #0]
   d6244:	f7ff ffe8 	bl	d6218 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6248:	b002      	add	sp, #8
   d624a:	bd10      	pop	{r4, pc}
   d624c:	000d7ec8 	.word	0x000d7ec8

000d6250 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6250:	7441      	strb	r1, [r0, #17]
}
   d6252:	4770      	bx	lr

000d6254 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6254:	4770      	bx	lr

000d6256 <_ZN9USBSerial4readEv>:
{
   d6256:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6258:	2100      	movs	r1, #0
   d625a:	7c00      	ldrb	r0, [r0, #16]
   d625c:	f7ff fa3c 	bl	d56d8 <HAL_USB_USART_Receive_Data>
}
   d6260:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6264:	bd08      	pop	{r3, pc}

000d6266 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6266:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6268:	2101      	movs	r1, #1
   d626a:	7c00      	ldrb	r0, [r0, #16]
   d626c:	f7ff fa34 	bl	d56d8 <HAL_USB_USART_Receive_Data>
}
   d6270:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6274:	bd08      	pop	{r3, pc}

000d6276 <_ZN9USBSerial17availableForWriteEv>:
{
   d6276:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6278:	7c00      	ldrb	r0, [r0, #16]
   d627a:	f7ff fa25 	bl	d56c8 <HAL_USB_USART_Available_Data_For_Write>
}
   d627e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6282:	bd08      	pop	{r3, pc}

000d6284 <_ZN9USBSerial9availableEv>:
{
   d6284:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6286:	7c00      	ldrb	r0, [r0, #16]
   d6288:	f7ff fa16 	bl	d56b8 <HAL_USB_USART_Available_Data>
}
   d628c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6290:	bd08      	pop	{r3, pc}

000d6292 <_ZN9USBSerial5writeEh>:
{
   d6292:	b513      	push	{r0, r1, r4, lr}
   d6294:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6296:	7c00      	ldrb	r0, [r0, #16]
{
   d6298:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d629a:	f7ff fa15 	bl	d56c8 <HAL_USB_USART_Available_Data_For_Write>
   d629e:	2800      	cmp	r0, #0
   d62a0:	9901      	ldr	r1, [sp, #4]
   d62a2:	dc01      	bgt.n	d62a8 <_ZN9USBSerial5writeEh+0x16>
   d62a4:	7c60      	ldrb	r0, [r4, #17]
   d62a6:	b120      	cbz	r0, d62b2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d62a8:	7c20      	ldrb	r0, [r4, #16]
   d62aa:	f7ff fa1d 	bl	d56e8 <HAL_USB_USART_Send_Data>
   d62ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d62b2:	b002      	add	sp, #8
   d62b4:	bd10      	pop	{r4, pc}

000d62b6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d62b6:	7c00      	ldrb	r0, [r0, #16]
   d62b8:	f7ff ba1e 	b.w	d56f8 <HAL_USB_USART_Flush_Data>

000d62bc <_ZN9USBSerialD0Ev>:
   d62bc:	b510      	push	{r4, lr}
   d62be:	2114      	movs	r1, #20
   d62c0:	4604      	mov	r4, r0
   d62c2:	f000 fdd8 	bl	d6e76 <_ZdlPvj>
   d62c6:	4620      	mov	r0, r4
   d62c8:	bd10      	pop	{r4, pc}
	...

000d62cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d62cc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d62ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d62d2:	4604      	mov	r4, r0
   d62d4:	4608      	mov	r0, r1
   d62d6:	2100      	movs	r1, #0
   d62d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d62dc:	4b04      	ldr	r3, [pc, #16]	; (d62f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d62de:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d62e0:	2301      	movs	r3, #1
  _serial = serial;
   d62e2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d62e4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d62e6:	4611      	mov	r1, r2
   d62e8:	f7ff f9d6 	bl	d5698 <HAL_USB_USART_Init>
}
   d62ec:	4620      	mov	r0, r4
   d62ee:	bd10      	pop	{r4, pc}
   d62f0:	000d7edc 	.word	0x000d7edc

000d62f4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d62f4:	7c00      	ldrb	r0, [r0, #16]
   d62f6:	2200      	movs	r2, #0
   d62f8:	f7ff b9d6 	b.w	d56a8 <HAL_USB_USART_Begin>

000d62fc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d62fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d62fe:	2214      	movs	r2, #20
{
   d6300:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6302:	2100      	movs	r1, #0
   d6304:	f001 fcfc 	bl	d7d00 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6308:	4620      	mov	r0, r4
   d630a:	bd10      	pop	{r4, pc}

000d630c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d630c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d630e:	4c10      	ldr	r4, [pc, #64]	; (d6350 <_Z16_fetch_usbserialv+0x44>)
{
   d6310:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6312:	a803      	add	r0, sp, #12
   d6314:	f7ff fff2 	bl	d62fc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6318:	7821      	ldrb	r1, [r4, #0]
   d631a:	f3bf 8f5b 	dmb	ish
   d631e:	f011 0101 	ands.w	r1, r1, #1
   d6322:	d111      	bne.n	d6348 <_Z16_fetch_usbserialv+0x3c>
   d6324:	4620      	mov	r0, r4
   d6326:	9101      	str	r1, [sp, #4]
   d6328:	f7fd febd 	bl	d40a6 <__cxa_guard_acquire>
   d632c:	9901      	ldr	r1, [sp, #4]
   d632e:	b158      	cbz	r0, d6348 <_Z16_fetch_usbserialv+0x3c>
   d6330:	aa03      	add	r2, sp, #12
   d6332:	4808      	ldr	r0, [pc, #32]	; (d6354 <_Z16_fetch_usbserialv+0x48>)
   d6334:	f7ff ffca 	bl	d62cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6338:	4620      	mov	r0, r4
   d633a:	f7fd feb9 	bl	d40b0 <__cxa_guard_release>
   d633e:	4a06      	ldr	r2, [pc, #24]	; (d6358 <_Z16_fetch_usbserialv+0x4c>)
   d6340:	4906      	ldr	r1, [pc, #24]	; (d635c <_Z16_fetch_usbserialv+0x50>)
   d6342:	4804      	ldr	r0, [pc, #16]	; (d6354 <_Z16_fetch_usbserialv+0x48>)
   d6344:	f000 fd92 	bl	d6e6c <__aeabi_atexit>
	return _usbserial;
}
   d6348:	4802      	ldr	r0, [pc, #8]	; (d6354 <_Z16_fetch_usbserialv+0x48>)
   d634a:	b008      	add	sp, #32
   d634c:	bd10      	pop	{r4, pc}
   d634e:	bf00      	nop
   d6350:	2003e68c 	.word	0x2003e68c
   d6354:	2003e690 	.word	0x2003e690
   d6358:	2003e0d8 	.word	0x2003e0d8
   d635c:	000d6255 	.word	0x000d6255

000d6360 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6360:	4770      	bx	lr

000d6362 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6362:	7441      	strb	r1, [r0, #17]
}
   d6364:	4770      	bx	lr

000d6366 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6366:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6368:	7c00      	ldrb	r0, [r0, #16]
   d636a:	f7ff f8b5 	bl	d54d8 <hal_usart_available_data_for_write>
}
   d636e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6372:	bd08      	pop	{r3, pc}

000d6374 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6374:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6376:	7c00      	ldrb	r0, [r0, #16]
   d6378:	f7ff f886 	bl	d5488 <hal_usart_available>
}
   d637c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6380:	bd08      	pop	{r3, pc}

000d6382 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6382:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6384:	7c00      	ldrb	r0, [r0, #16]
   d6386:	f7ff f88f 	bl	d54a8 <hal_usart_peek>
}
   d638a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d638e:	bd08      	pop	{r3, pc}

000d6390 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6390:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6392:	7c00      	ldrb	r0, [r0, #16]
   d6394:	f7ff f880 	bl	d5498 <hal_usart_read>
}
   d6398:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d639c:	bd08      	pop	{r3, pc}

000d639e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d639e:	7c00      	ldrb	r0, [r0, #16]
   d63a0:	f7ff b88a 	b.w	d54b8 <hal_usart_flush>

000d63a4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d63a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d63a6:	7c45      	ldrb	r5, [r0, #17]
{
   d63a8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d63aa:	b12d      	cbz	r5, d63b8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d63ac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d63ae:	b003      	add	sp, #12
   d63b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d63b4:	f7ff b860 	b.w	d5478 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d63b8:	7c00      	ldrb	r0, [r0, #16]
   d63ba:	9101      	str	r1, [sp, #4]
   d63bc:	f7ff f88c 	bl	d54d8 <hal_usart_available_data_for_write>
   d63c0:	2800      	cmp	r0, #0
   d63c2:	9901      	ldr	r1, [sp, #4]
   d63c4:	dcf2      	bgt.n	d63ac <_ZN11USARTSerial5writeEh+0x8>
}
   d63c6:	4628      	mov	r0, r5
   d63c8:	b003      	add	sp, #12
   d63ca:	bd30      	pop	{r4, r5, pc}

000d63cc <_ZN11USARTSerialD0Ev>:
   d63cc:	b510      	push	{r4, lr}
   d63ce:	2114      	movs	r1, #20
   d63d0:	4604      	mov	r4, r0
   d63d2:	f000 fd50 	bl	d6e76 <_ZdlPvj>
   d63d6:	4620      	mov	r0, r4
   d63d8:	bd10      	pop	{r4, pc}
	...

000d63dc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d63dc:	b510      	push	{r4, lr}
   d63de:	f04f 0c00 	mov.w	ip, #0
   d63e2:	4604      	mov	r4, r0
   d63e4:	4608      	mov	r0, r1
   d63e6:	4611      	mov	r1, r2
   d63e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d63ec:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d63f0:	4a04      	ldr	r2, [pc, #16]	; (d6404 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d63f2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d63f4:	2201      	movs	r2, #1
  _serial = serial;
   d63f6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d63f8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d63fa:	461a      	mov	r2, r3
   d63fc:	f7ff f834 	bl	d5468 <hal_usart_init>
}
   d6400:	4620      	mov	r0, r4
   d6402:	bd10      	pop	{r4, pc}
   d6404:	000d7f0c 	.word	0x000d7f0c

000d6408 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6408:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d640a:	4c0e      	ldr	r4, [pc, #56]	; (d6444 <_Z22__fetch_global_Serial1v+0x3c>)
   d640c:	7821      	ldrb	r1, [r4, #0]
   d640e:	f3bf 8f5b 	dmb	ish
   d6412:	f011 0101 	ands.w	r1, r1, #1
   d6416:	d112      	bne.n	d643e <_Z22__fetch_global_Serial1v+0x36>
   d6418:	4620      	mov	r0, r4
   d641a:	9101      	str	r1, [sp, #4]
   d641c:	f7fd fe43 	bl	d40a6 <__cxa_guard_acquire>
   d6420:	9901      	ldr	r1, [sp, #4]
   d6422:	b160      	cbz	r0, d643e <_Z22__fetch_global_Serial1v+0x36>
   d6424:	4a08      	ldr	r2, [pc, #32]	; (d6448 <_Z22__fetch_global_Serial1v+0x40>)
   d6426:	4b09      	ldr	r3, [pc, #36]	; (d644c <_Z22__fetch_global_Serial1v+0x44>)
   d6428:	4809      	ldr	r0, [pc, #36]	; (d6450 <_Z22__fetch_global_Serial1v+0x48>)
   d642a:	f7ff ffd7 	bl	d63dc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d642e:	4620      	mov	r0, r4
   d6430:	f7fd fe3e 	bl	d40b0 <__cxa_guard_release>
   d6434:	4a07      	ldr	r2, [pc, #28]	; (d6454 <_Z22__fetch_global_Serial1v+0x4c>)
   d6436:	4908      	ldr	r1, [pc, #32]	; (d6458 <_Z22__fetch_global_Serial1v+0x50>)
   d6438:	4805      	ldr	r0, [pc, #20]	; (d6450 <_Z22__fetch_global_Serial1v+0x48>)
   d643a:	f000 fd17 	bl	d6e6c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d643e:	4804      	ldr	r0, [pc, #16]	; (d6450 <_Z22__fetch_global_Serial1v+0x48>)
   d6440:	b002      	add	sp, #8
   d6442:	bd10      	pop	{r4, pc}
   d6444:	2003e6a4 	.word	0x2003e6a4
   d6448:	2003e6a8 	.word	0x2003e6a8
   d644c:	2003e72c 	.word	0x2003e72c
   d6450:	2003e7b0 	.word	0x2003e7b0
   d6454:	2003e0d8 	.word	0x2003e0d8
   d6458:	000d6361 	.word	0x000d6361

000d645c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d645c:	4770      	bx	lr

000d645e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d645e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6460:	4606      	mov	r6, r0
   d6462:	4615      	mov	r5, r2
   d6464:	460c      	mov	r4, r1
   d6466:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6468:	42bc      	cmp	r4, r7
   d646a:	d006      	beq.n	d647a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d646c:	6833      	ldr	r3, [r6, #0]
   d646e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6472:	689b      	ldr	r3, [r3, #8]
   d6474:	4630      	mov	r0, r6
   d6476:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6478:	e7f6      	b.n	d6468 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d647a:	4628      	mov	r0, r5
   d647c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d647e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d647e:	7c00      	ldrb	r0, [r0, #16]
   d6480:	2200      	movs	r2, #0
   d6482:	f7ff b849 	b.w	d5518 <hal_i2c_write>

000d6486 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6486:	7c00      	ldrb	r0, [r0, #16]
   d6488:	2100      	movs	r1, #0
   d648a:	f7ff b84d 	b.w	d5528 <hal_i2c_available>

000d648e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d648e:	7c00      	ldrb	r0, [r0, #16]
   d6490:	2100      	movs	r1, #0
   d6492:	f7ff b851 	b.w	d5538 <hal_i2c_read>

000d6496 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6496:	7c00      	ldrb	r0, [r0, #16]
   d6498:	2100      	movs	r1, #0
   d649a:	f7ff b855 	b.w	d5548 <hal_i2c_peek>

000d649e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d649e:	7c00      	ldrb	r0, [r0, #16]
   d64a0:	2100      	movs	r1, #0
   d64a2:	f7ff b859 	b.w	d5558 <hal_i2c_flush>

000d64a6 <_ZN7TwoWireD0Ev>:
   d64a6:	b510      	push	{r4, lr}
   d64a8:	2114      	movs	r1, #20
   d64aa:	4604      	mov	r4, r0
   d64ac:	f000 fce3 	bl	d6e76 <_ZdlPvj>
   d64b0:	4620      	mov	r0, r4
   d64b2:	bd10      	pop	{r4, pc}

000d64b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d64b4:	b510      	push	{r4, lr}
   d64b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d64ba:	4604      	mov	r4, r0
   d64bc:	4608      	mov	r0, r1
   d64be:	2100      	movs	r1, #0
   d64c0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d64c4:	4b03      	ldr	r3, [pc, #12]	; (d64d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d64c6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d64c8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d64ca:	4611      	mov	r1, r2
   d64cc:	f7ff f854 	bl	d5578 <hal_i2c_init>
}
   d64d0:	4620      	mov	r0, r4
   d64d2:	bd10      	pop	{r4, pc}
   d64d4:	000d7f3c 	.word	0x000d7f3c

000d64d8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d64d8:	2300      	movs	r3, #0
   d64da:	7c00      	ldrb	r0, [r0, #16]
   d64dc:	461a      	mov	r2, r3
   d64de:	4619      	mov	r1, r3
   d64e0:	f7ff b802 	b.w	d54e8 <hal_i2c_begin>

000d64e4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d64e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d64e6:	2200      	movs	r2, #0
   d64e8:	2314      	movs	r3, #20
   d64ea:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d64ee:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d64f2:	780b      	ldrb	r3, [r1, #0]
   d64f4:	f88d 3008 	strb.w	r3, [sp, #8]
   d64f8:	684b      	ldr	r3, [r1, #4]
   d64fa:	9303      	str	r3, [sp, #12]
   d64fc:	68cb      	ldr	r3, [r1, #12]
   d64fe:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d6500:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d6502:	7a0b      	ldrb	r3, [r1, #8]
   d6504:	9305      	str	r3, [sp, #20]
   d6506:	a901      	add	r1, sp, #4
   d6508:	f7ff f83e 	bl	d5588 <hal_i2c_request_ex>
}
   d650c:	b007      	add	sp, #28
   d650e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6512 <_ZN7TwoWire11requestFromEhjh>:
{
   d6512:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6514:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6516:	f88d 1000 	strb.w	r1, [sp]
   d651a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d651e:	9103      	str	r1, [sp, #12]
   d6520:	bf18      	it	ne
   d6522:	2301      	movne	r3, #1
   d6524:	4669      	mov	r1, sp
    size_ = size;
   d6526:	9201      	str	r2, [sp, #4]
   d6528:	f88d 3008 	strb.w	r3, [sp, #8]
   d652c:	f7ff ffda 	bl	d64e4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6530:	b005      	add	sp, #20
   d6532:	f85d fb04 	ldr.w	pc, [sp], #4

000d6536 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d6536:	2301      	movs	r3, #1
   d6538:	f7ff bfeb 	b.w	d6512 <_ZN7TwoWire11requestFromEhjh>

000d653c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d653c:	7c00      	ldrb	r0, [r0, #16]
   d653e:	2200      	movs	r2, #0
   d6540:	f7fe bfda 	b.w	d54f8 <hal_i2c_begin_transmission>

000d6544 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d6544:	b2c9      	uxtb	r1, r1
   d6546:	f7ff bff9 	b.w	d653c <_ZN7TwoWire17beginTransmissionEh>

000d654a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d654a:	7c00      	ldrb	r0, [r0, #16]
   d654c:	2200      	movs	r2, #0
   d654e:	f7fe bfdb 	b.w	d5508 <hal_i2c_end_transmission>

000d6552 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d6552:	2101      	movs	r1, #1
   d6554:	f7ff bff9 	b.w	d654a <_ZN7TwoWire15endTransmissionEh>

000d6558 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6558:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d655a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d655c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6560:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6562:	2201      	movs	r2, #1
   d6564:	f04f 33ff 	mov.w	r3, #4294967295
   d6568:	f10d 0107 	add.w	r1, sp, #7
   d656c:	47a0      	blx	r4
}
   d656e:	b002      	add	sp, #8
   d6570:	bd10      	pop	{r4, pc}

000d6572 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d6572:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6574:	6803      	ldr	r3, [r0, #0]
   d6576:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6578:	f04f 33ff 	mov.w	r3, #4294967295
   d657c:	46a4      	mov	ip, r4
}
   d657e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6582:	4760      	bx	ip

000d6584 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6584:	b513      	push	{r0, r1, r4, lr}
   d6586:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d6588:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d658a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d658e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d6590:	f10d 0107 	add.w	r1, sp, #7
   d6594:	2201      	movs	r2, #1
   d6596:	47a0      	blx	r4
}
   d6598:	b002      	add	sp, #8
   d659a:	bd10      	pop	{r4, pc}

000d659c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d659c:	4770      	bx	lr

000d659e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d659e:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d65a0:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d65a2:	681a      	ldr	r2, [r3, #0]
   d65a4:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d65a6:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d65a8:	da10      	bge.n	d65cc <_ZN9TCPClient9connectedEv+0x2e>
   d65aa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d65ae:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d65b2:	429a      	cmp	r2, r3
   d65b4:	d10a      	bne.n	d65cc <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d65b6:	6803      	ldr	r3, [r0, #0]
   d65b8:	691b      	ldr	r3, [r3, #16]
   d65ba:	4798      	blx	r3
        if (!rv) {
   d65bc:	4604      	mov	r4, r0
   d65be:	b928      	cbnz	r0, d65cc <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d65c0:	682b      	ldr	r3, [r5, #0]
   d65c2:	4628      	mov	r0, r5
   d65c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d65c6:	4798      	blx	r3
        rv = available();
   d65c8:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d65ca:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d65cc:	2001      	movs	r0, #1
   d65ce:	e7fc      	b.n	d65ca <_ZN9TCPClient9connectedEv+0x2c>

000d65d0 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d65d0:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d65d2:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d65d4:	43c0      	mvns	r0, r0
   d65d6:	0fc0      	lsrs	r0, r0, #31
   d65d8:	4770      	bx	lr

000d65da <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d65da:	4770      	bx	lr

000d65dc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d65dc:	4b06      	ldr	r3, [pc, #24]	; (d65f8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d65de:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d65e0:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d65e2:	f100 040c 	add.w	r4, r0, #12
	    ||
   d65e6:	d005      	beq.n	d65f4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d65e8:	4608      	mov	r0, r1
   d65ea:	f000 fc4b 	bl	d6e84 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d65ee:	2800      	cmp	r0, #0
	return nullptr;
   d65f0:	bf08      	it	eq
   d65f2:	2400      	moveq	r4, #0
      }
   d65f4:	4620      	mov	r0, r4
   d65f6:	bd10      	pop	{r4, pc}
   d65f8:	000d7e98 	.word	0x000d7e98

000d65fc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d65fc:	b510      	push	{r4, lr}
   d65fe:	21ac      	movs	r1, #172	; 0xac
   d6600:	4604      	mov	r4, r0
   d6602:	f000 fc38 	bl	d6e76 <_ZdlPvj>
   d6606:	4620      	mov	r0, r4
   d6608:	bd10      	pop	{r4, pc}

000d660a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d660a:	f7fd bd48 	b.w	d409e <_ZdlPv>

000d660e <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d660e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d6612:	f04f 0800 	mov.w	r8, #0
   d6616:	b086      	sub	sp, #24
   d6618:	461d      	mov	r5, r3
   d661a:	f8c0 8004 	str.w	r8, [r0, #4]
   d661e:	4604      	mov	r4, r0
   d6620:	460e      	mov	r6, r1
   d6622:	4617      	mov	r7, r2
    struct timeval tv = {};
   d6624:	4641      	mov	r1, r8
   d6626:	2210      	movs	r2, #16
   d6628:	a802      	add	r0, sp, #8
   d662a:	f001 fb69 	bl	d7d00 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d662e:	1c6b      	adds	r3, r5, #1
   d6630:	d009      	beq.n	d6646 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d6632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6636:	fbb5 f3f0 	udiv	r3, r5, r0
   d663a:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d663e:	fb00 5313 	mls	r3, r0, r3, r5
   d6642:	4358      	muls	r0, r3
   d6644:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6646:	6960      	ldr	r0, [r4, #20]
   d6648:	2310      	movs	r3, #16
   d664a:	9300      	str	r3, [sp, #0]
   d664c:	6800      	ldr	r0, [r0, #0]
   d664e:	ab02      	add	r3, sp, #8
   d6650:	f241 0205 	movw	r2, #4101	; 0x1005
   d6654:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6658:	f7fe ff9e 	bl	d5598 <sock_setsockopt>
    if (ret < 0) {
   d665c:	2800      	cmp	r0, #0
   d665e:	da07      	bge.n	d6670 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d6660:	f7ff f910 	bl	d5884 <__errno>
   d6664:	6803      	ldr	r3, [r0, #0]
   d6666:	6063      	str	r3, [r4, #4]
        return 0;
   d6668:	2000      	movs	r0, #0
}
   d666a:	b006      	add	sp, #24
   d666c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d6670:	6960      	ldr	r0, [r4, #20]
   d6672:	2300      	movs	r3, #0
   d6674:	6800      	ldr	r0, [r0, #0]
   d6676:	463a      	mov	r2, r7
   d6678:	4631      	mov	r1, r6
   d667a:	f7fe ffad 	bl	d55d8 <sock_send>
    if (ret < 0) {
   d667e:	1e03      	subs	r3, r0, #0
   d6680:	dbee      	blt.n	d6660 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d6682:	4618      	mov	r0, r3
   d6684:	e7f1      	b.n	d666a <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d6688 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d6688:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d668a:	6984      	ldr	r4, [r0, #24]
   d668c:	4b0a      	ldr	r3, [pc, #40]	; (d66b8 <_ZN9TCPClientD1Ev+0x30>)
   d668e:	6003      	str	r3, [r0, #0]
   d6690:	4605      	mov	r5, r0
   d6692:	b17c      	cbz	r4, d66b4 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d6694:	6863      	ldr	r3, [r4, #4]
   d6696:	3b01      	subs	r3, #1
   d6698:	6063      	str	r3, [r4, #4]
   d669a:	b95b      	cbnz	r3, d66b4 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d669c:	6823      	ldr	r3, [r4, #0]
   d669e:	4620      	mov	r0, r4
   d66a0:	689b      	ldr	r3, [r3, #8]
   d66a2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d66a4:	68a3      	ldr	r3, [r4, #8]
   d66a6:	3b01      	subs	r3, #1
   d66a8:	60a3      	str	r3, [r4, #8]
   d66aa:	b91b      	cbnz	r3, d66b4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d66ac:	6823      	ldr	r3, [r4, #0]
   d66ae:	4620      	mov	r0, r4
   d66b0:	68db      	ldr	r3, [r3, #12]
   d66b2:	4798      	blx	r3
   d66b4:	4628      	mov	r0, r5
   d66b6:	bd38      	pop	{r3, r4, r5, pc}
   d66b8:	000d7f90 	.word	0x000d7f90

000d66bc <_ZN9TCPClientD0Ev>:
   d66bc:	b510      	push	{r4, lr}
   d66be:	4604      	mov	r4, r0
   d66c0:	f7ff ffe2 	bl	d6688 <_ZN9TCPClientD1Ev>
   d66c4:	4620      	mov	r0, r4
   d66c6:	211c      	movs	r1, #28
   d66c8:	f000 fbd5 	bl	d6e76 <_ZdlPvj>
   d66cc:	4620      	mov	r0, r4
   d66ce:	bd10      	pop	{r4, pc}

000d66d0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d66d0:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d66d2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d66d4:	4b05      	ldr	r3, [pc, #20]	; (d66ec <_ZN9TCPClient8remoteIPEv+0x1c>)
   d66d6:	4604      	mov	r4, r0
   d66d8:	358c      	adds	r5, #140	; 0x8c
   d66da:	f844 3b04 	str.w	r3, [r4], #4
   d66de:	4606      	mov	r6, r0
   d66e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d66e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d66e4:	682b      	ldr	r3, [r5, #0]
   d66e6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d66e8:	4630      	mov	r0, r6
   d66ea:	bd70      	pop	{r4, r5, r6, pc}
   d66ec:	000d7ec8 	.word	0x000d7ec8

000d66f0 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d66f0:	b510      	push	{r4, lr}
   d66f2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d66f4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d66f8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d66fc:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d66fe:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6700:	d005      	beq.n	d670e <_ZN9TCPClient4peekEv+0x1e>
   d6702:	6963      	ldr	r3, [r4, #20]
   d6704:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d6708:	4413      	add	r3, r2
   d670a:	7918      	ldrb	r0, [r3, #4]
}
   d670c:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d670e:	6803      	ldr	r3, [r0, #0]
   d6710:	691b      	ldr	r3, [r3, #16]
   d6712:	4798      	blx	r3
   d6714:	2800      	cmp	r0, #0
   d6716:	d1f4      	bne.n	d6702 <_ZN9TCPClient4peekEv+0x12>
   d6718:	f04f 30ff 	mov.w	r0, #4294967295
   d671c:	e7f6      	b.n	d670c <_ZN9TCPClient4peekEv+0x1c>

000d671e <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d671e:	b510      	push	{r4, lr}
   d6720:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6722:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6726:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d672a:	429a      	cmp	r2, r3
int TCPClient::read() {
   d672c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d672e:	d008      	beq.n	d6742 <_ZN9TCPClient4readEv+0x24>
   d6730:	6963      	ldr	r3, [r4, #20]
   d6732:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d6736:	1c51      	adds	r1, r2, #1
   d6738:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d673c:	4413      	add	r3, r2
   d673e:	7918      	ldrb	r0, [r3, #4]
}
   d6740:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6742:	6803      	ldr	r3, [r0, #0]
   d6744:	691b      	ldr	r3, [r3, #16]
   d6746:	4798      	blx	r3
   d6748:	2800      	cmp	r0, #0
   d674a:	d1f1      	bne.n	d6730 <_ZN9TCPClient4readEv+0x12>
   d674c:	f04f 30ff 	mov.w	r0, #4294967295
   d6750:	e7f6      	b.n	d6740 <_ZN9TCPClient4readEv+0x22>

000d6752 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d6752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6754:	6943      	ldr	r3, [r0, #20]
   d6756:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d6758:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d675c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6760:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d6762:	4605      	mov	r5, r0
   d6764:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d6766:	d016      	beq.n	d6796 <_ZN9TCPClient4readEPhj+0x44>
   d6768:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d676a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d676e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d6772:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d6774:	42bc      	cmp	r4, r7
   d6776:	bf28      	it	cs
   d6778:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d677a:	3304      	adds	r3, #4
   d677c:	4622      	mov	r2, r4
   d677e:	4419      	add	r1, r3
   d6780:	4630      	mov	r0, r6
   d6782:	f001 faaf 	bl	d7ce4 <memcpy>
   d6786:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6788:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d678c:	4423      	add	r3, r4
   d678e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d6792:	4620      	mov	r0, r4
   d6794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d6796:	6803      	ldr	r3, [r0, #0]
   d6798:	691b      	ldr	r3, [r3, #16]
   d679a:	4798      	blx	r3
   d679c:	2800      	cmp	r0, #0
   d679e:	d1e3      	bne.n	d6768 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d67a0:	f04f 34ff 	mov.w	r4, #4294967295
   d67a4:	e7f5      	b.n	d6792 <_ZN9TCPClient4readEPhj+0x40>

000d67a6 <_ZN9TCPClient12flush_bufferEv>:
   d67a6:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d67a8:	2300      	movs	r3, #0
   d67aa:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d67ae:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d67b0:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d67b4:	4770      	bx	lr

000d67b6 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d67b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d67ba:	461f      	mov	r7, r3
    stop();
   d67bc:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d67be:	460c      	mov	r4, r1
    stop();
   d67c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d67c2:	b08a      	sub	sp, #40	; 0x28
   d67c4:	4605      	mov	r5, r0
   d67c6:	4616      	mov	r6, r2
    stop();
   d67c8:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d67ca:	7d23      	ldrb	r3, [r4, #20]
   d67cc:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d67d0:	2b04      	cmp	r3, #4
   d67d2:	bf0c      	ite	eq
   d67d4:	2002      	moveq	r0, #2
   d67d6:	200a      	movne	r0, #10
   d67d8:	2206      	movs	r2, #6
   d67da:	2101      	movs	r1, #1
   d67dc:	f7fe ff04 	bl	d55e8 <sock_socket>
   d67e0:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d67e4:	696b      	ldr	r3, [r5, #20]
   d67e6:	681b      	ldr	r3, [r3, #0]
   d67e8:	2b00      	cmp	r3, #0
   d67ea:	da08      	bge.n	d67fe <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d67ec:	682b      	ldr	r3, [r5, #0]
   d67ee:	4628      	mov	r0, r5
   d67f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d67f2:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d67f4:	4798      	blx	r3
}
   d67f6:	4620      	mov	r0, r4
   d67f8:	b00a      	add	sp, #40	; 0x28
   d67fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d67fe:	4628      	mov	r0, r5
   d6800:	f7ff ffd1 	bl	d67a6 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d6804:	b1b7      	cbz	r7, d6834 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d6806:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6808:	a903      	add	r1, sp, #12
   d680a:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d680c:	9303      	str	r3, [sp, #12]
   d680e:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6812:	f7fe fdd1 	bl	d53b8 <if_index_to_name>
   d6816:	2800      	cmp	r0, #0
   d6818:	d1e8      	bne.n	d67ec <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d681a:	6968      	ldr	r0, [r5, #20]
   d681c:	2306      	movs	r3, #6
   d681e:	9300      	str	r3, [sp, #0]
   d6820:	6800      	ldr	r0, [r0, #0]
   d6822:	ab03      	add	r3, sp, #12
   d6824:	f241 020b 	movw	r2, #4107	; 0x100b
   d6828:	f640 71ff 	movw	r1, #4095	; 0xfff
   d682c:	f7fe feb4 	bl	d5598 <sock_setsockopt>
   d6830:	2800      	cmp	r0, #0
   d6832:	d1db      	bne.n	d67ec <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d6834:	221c      	movs	r2, #28
   d6836:	2100      	movs	r1, #0
   d6838:	a803      	add	r0, sp, #12
   d683a:	f001 fa61 	bl	d7d00 <memset>
    if (ip.version() == 4) {
   d683e:	7d23      	ldrb	r3, [r4, #20]
   d6840:	2b04      	cmp	r3, #4
   d6842:	d11d      	bne.n	d6880 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d6844:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d6848:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d684a:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d684e:	f7fe fe03 	bl	d5458 <inet_htons>
   d6852:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6856:	6860      	ldr	r0, [r4, #4]
   d6858:	f7fe fdf6 	bl	d5448 <inet_htonl>
   d685c:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d685e:	696b      	ldr	r3, [r5, #20]
   d6860:	221c      	movs	r2, #28
   d6862:	6818      	ldr	r0, [r3, #0]
   d6864:	a903      	add	r1, sp, #12
   d6866:	f7fe fea7 	bl	d55b8 <sock_connect>
   d686a:	2800      	cmp	r0, #0
   d686c:	d1be      	bne.n	d67ec <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d686e:	3404      	adds	r4, #4
   d6870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6872:	696d      	ldr	r5, [r5, #20]
   d6874:	358c      	adds	r5, #140	; 0x8c
   d6876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6878:	6823      	ldr	r3, [r4, #0]
   d687a:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d687c:	2401      	movs	r4, #1
   d687e:	e7ba      	b.n	d67f6 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d6880:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d6884:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d6886:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d688a:	f7fe fde5 	bl	d5458 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d688e:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d6890:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6894:	1d23      	adds	r3, r4, #4
   d6896:	f104 0714 	add.w	r7, r4, #20
   d689a:	6818      	ldr	r0, [r3, #0]
   d689c:	6859      	ldr	r1, [r3, #4]
   d689e:	4632      	mov	r2, r6
   d68a0:	c203      	stmia	r2!, {r0, r1}
   d68a2:	3308      	adds	r3, #8
   d68a4:	42bb      	cmp	r3, r7
   d68a6:	4616      	mov	r6, r2
   d68a8:	d1f7      	bne.n	d689a <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d68aa:	e7d8      	b.n	d685e <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d68ac <_ZN9TCPClient9availableEv>:
{
   d68ac:	b530      	push	{r4, r5, lr}
   d68ae:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d68b0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d68b4:	b08b      	sub	sp, #44	; 0x2c
   d68b6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d68b8:	b12b      	cbz	r3, d68c6 <_ZN9TCPClient9availableEv+0x1a>
   d68ba:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d68be:	429a      	cmp	r2, r3
   d68c0:	d101      	bne.n	d68c6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d68c2:	f7ff ff70 	bl	d67a6 <_ZN9TCPClient12flush_bufferEv>
   d68c6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d68c8:	6808      	ldr	r0, [r1, #0]
   d68ca:	2800      	cmp	r0, #0
   d68cc:	db18      	blt.n	d6900 <_ZN9TCPClient9availableEv+0x54>
   d68ce:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d68d2:	2d7f      	cmp	r5, #127	; 0x7f
   d68d4:	d814      	bhi.n	d6900 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d68d6:	3104      	adds	r1, #4
   d68d8:	2308      	movs	r3, #8
   d68da:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d68de:	4429      	add	r1, r5
   d68e0:	f7fe fe72 	bl	d55c8 <sock_recv>
            if (ret > 0) {
   d68e4:	2800      	cmp	r0, #0
   d68e6:	dd13      	ble.n	d6910 <_ZN9TCPClient9availableEv+0x64>
   d68e8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d68ea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d68ee:	b90a      	cbnz	r2, d68f4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d68f0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d68f4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d68f6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d68fa:	4410      	add	r0, r2
   d68fc:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d6900:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d6902:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d6906:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d690a:	1ac0      	subs	r0, r0, r3
   d690c:	b00b      	add	sp, #44	; 0x2c
   d690e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d6910:	f7fe ffb8 	bl	d5884 <__errno>
   d6914:	6803      	ldr	r3, [r0, #0]
   d6916:	2b0b      	cmp	r3, #11
   d6918:	d0f2      	beq.n	d6900 <_ZN9TCPClient9availableEv+0x54>
   d691a:	f7fe ffb3 	bl	d5884 <__errno>
   d691e:	6803      	ldr	r3, [r0, #0]
   d6920:	2b0b      	cmp	r3, #11
   d6922:	d0ed      	beq.n	d6900 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d6924:	2320      	movs	r3, #32
   d6926:	2500      	movs	r5, #0
   d6928:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d692c:	f7fe ffaa 	bl	d5884 <__errno>
   d6930:	6803      	ldr	r3, [r0, #0]
   d6932:	9301      	str	r3, [sp, #4]
   d6934:	4b08      	ldr	r3, [pc, #32]	; (d6958 <_ZN9TCPClient9availableEv+0xac>)
   d6936:	4909      	ldr	r1, [pc, #36]	; (d695c <_ZN9TCPClient9availableEv+0xb0>)
   d6938:	9300      	str	r3, [sp, #0]
   d693a:	aa02      	add	r2, sp, #8
   d693c:	462b      	mov	r3, r5
   d693e:	2032      	movs	r0, #50	; 0x32
   d6940:	f7fe fee2 	bl	d5708 <log_message>
                    sock_close(d_->sock);
   d6944:	6963      	ldr	r3, [r4, #20]
   d6946:	6818      	ldr	r0, [r3, #0]
   d6948:	f7fe fe2e 	bl	d55a8 <sock_close>
   d694c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d694e:	f04f 32ff 	mov.w	r2, #4294967295
   d6952:	601a      	str	r2, [r3, #0]
   d6954:	e7d4      	b.n	d6900 <_ZN9TCPClient9availableEv+0x54>
   d6956:	bf00      	nop
   d6958:	000d7f5c 	.word	0x000d7f5c
   d695c:	000d7e68 	.word	0x000d7e68

000d6960 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d6960:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d6962:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d6964:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d6966:	6818      	ldr	r0, [r3, #0]
   d6968:	2800      	cmp	r0, #0
   d696a:	db01      	blt.n	d6970 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d696c:	f7fe fe1c 	bl	d55a8 <sock_close>
   d6970:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d6972:	f04f 32ff 	mov.w	r2, #4294967295
   d6976:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d6978:	6960      	ldr	r0, [r4, #20]
   d697a:	2211      	movs	r2, #17
   d697c:	2100      	movs	r1, #0
   d697e:	308c      	adds	r0, #140	; 0x8c
   d6980:	f001 f9be 	bl	d7d00 <memset>
    flush_buffer();
   d6984:	4620      	mov	r0, r4
}
   d6986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d698a:	f7ff bf0c 	b.w	d67a6 <_ZN9TCPClient12flush_bufferEv>

000d698e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d698e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d6990:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d6992:	4604      	mov	r4, r0
          total(0) {
   d6994:	6001      	str	r1, [r0, #0]
   d6996:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d699a:	3088      	adds	r0, #136	; 0x88
   d699c:	f7ff fc06 	bl	d61ac <_ZN9IPAddressC1Ev>
}
   d69a0:	4620      	mov	r0, r4
   d69a2:	bd10      	pop	{r4, pc}

000d69a4 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d69a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d69a6:	2300      	movs	r3, #0
   d69a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d69ac:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d69b0:	4a0e      	ldr	r2, [pc, #56]	; (d69ec <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d69b2:	6103      	str	r3, [r0, #16]
   d69b4:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d69b6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d69b8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d69ba:	20ac      	movs	r0, #172	; 0xac
   d69bc:	9101      	str	r1, [sp, #4]
   d69be:	f7fd fb6a 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d69c2:	1e05      	subs	r5, r0, #0
   d69c4:	f105 060c 	add.w	r6, r5, #12
   d69c8:	d008      	beq.n	d69dc <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d69ca:	2301      	movs	r3, #1
   d69cc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d69d0:	4b07      	ldr	r3, [pc, #28]	; (d69f0 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d69d2:	9901      	ldr	r1, [sp, #4]
   d69d4:	602b      	str	r3, [r5, #0]
   d69d6:	4630      	mov	r0, r6
   d69d8:	f7ff ffd9 	bl	d698e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d69dc:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d69de:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d69e2:	f7ff fee0 	bl	d67a6 <_ZN9TCPClient12flush_bufferEv>
}
   d69e6:	b002      	add	sp, #8
   d69e8:	bd70      	pop	{r4, r5, r6, pc}
   d69ea:	bf00      	nop
   d69ec:	000d7f90 	.word	0x000d7f90
   d69f0:	000d7f74 	.word	0x000d7f74

000d69f4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d69f4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d69f6:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d69fa:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d69fc:	f7ff ffd2 	bl	d69a4 <_ZN9TCPClientC1Ei>
}
   d6a00:	4620      	mov	r0, r4
   d6a02:	bd10      	pop	{r4, pc}

000d6a04 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d6a04:	b510      	push	{r4, lr}
   d6a06:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6a08:	6800      	ldr	r0, [r0, #0]
   d6a0a:	2800      	cmp	r0, #0
   d6a0c:	db01      	blt.n	d6a12 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d6a0e:	f7fe fdcb 	bl	d55a8 <sock_close>
    }
}
   d6a12:	4620      	mov	r0, r4
   d6a14:	bd10      	pop	{r4, pc}

000d6a16 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d6a16:	300c      	adds	r0, #12
   d6a18:	f7ff bff4 	b.w	d6a04 <_ZN9TCPClient4DataD1Ev>

000d6a1c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6a20:	4698      	mov	r8, r3
    stop();
   d6a22:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6a24:	b093      	sub	sp, #76	; 0x4c
   d6a26:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d6a28:	2400      	movs	r4, #0
    stop();
   d6a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6a2c:	4606      	mov	r6, r0
   d6a2e:	4617      	mov	r7, r2
    stop();
   d6a30:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6a32:	4628      	mov	r0, r5
   d6a34:	466b      	mov	r3, sp
   d6a36:	4622      	mov	r2, r4
   d6a38:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d6a3a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6a3c:	f7fe fc94 	bl	d5368 <netdb_getaddrinfo>
   d6a40:	4605      	mov	r5, r0
   d6a42:	2800      	cmp	r0, #0
   d6a44:	d163      	bne.n	d6b0e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d6a46:	9b00      	ldr	r3, [sp, #0]
   d6a48:	2b00      	cmp	r3, #0
   d6a4a:	d04b      	beq.n	d6ae4 <_ZN9TCPClient7connectEPKctm+0xc8>
   d6a4c:	695b      	ldr	r3, [r3, #20]
   d6a4e:	2b00      	cmp	r3, #0
   d6a50:	d048      	beq.n	d6ae4 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d6a52:	a806      	add	r0, sp, #24
   d6a54:	f7ff fbaa 	bl	d61ac <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6a58:	9b00      	ldr	r3, [sp, #0]
   d6a5a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d6a5c:	7863      	ldrb	r3, [r4, #1]
   d6a5e:	2b02      	cmp	r3, #2
   d6a60:	d104      	bne.n	d6a6c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6a62:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6a64:	a806      	add	r0, sp, #24
   d6a66:	f7ff f8e5 	bl	d5c34 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d6a6a:	e026      	b.n	d6aba <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d6a6c:	2b0a      	cmp	r3, #10
   d6a6e:	d124      	bne.n	d6aba <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d6a70:	2211      	movs	r2, #17
   d6a72:	4629      	mov	r1, r5
   d6a74:	a801      	add	r0, sp, #4
   d6a76:	f001 f943 	bl	d7d00 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6a7a:	68a3      	ldr	r3, [r4, #8]
   d6a7c:	2b00      	cmp	r3, #0
   d6a7e:	d038      	beq.n	d6af2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6a80:	f104 0308 	add.w	r3, r4, #8
   d6a84:	f10d 0c04 	add.w	ip, sp, #4
   d6a88:	3418      	adds	r4, #24
   d6a8a:	6818      	ldr	r0, [r3, #0]
   d6a8c:	6859      	ldr	r1, [r3, #4]
   d6a8e:	4662      	mov	r2, ip
   d6a90:	c203      	stmia	r2!, {r0, r1}
   d6a92:	3308      	adds	r3, #8
   d6a94:	42a3      	cmp	r3, r4
   d6a96:	4694      	mov	ip, r2
   d6a98:	d1f7      	bne.n	d6a8a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d6a9a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6a9c:	a901      	add	r1, sp, #4
   d6a9e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d6aa0:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6aa4:	f7ff fb90 	bl	d61c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d6aa8:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d6aac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d6ab0:	ac07      	add	r4, sp, #28
   d6ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6ab4:	f8dc 3000 	ldr.w	r3, [ip]
   d6ab8:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d6aba:	a806      	add	r0, sp, #24
   d6abc:	f7ff fb96 	bl	d61ec <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6ac0:	b180      	cbz	r0, d6ae4 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d6ac2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d6ac4:	ad07      	add	r5, sp, #28
   d6ac6:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d6aca:	4b12      	ldr	r3, [pc, #72]	; (d6b14 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d6acc:	930c      	str	r3, [sp, #48]	; 0x30
   d6ace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6ad0:	ac0d      	add	r4, sp, #52	; 0x34
   d6ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6ad4:	682b      	ldr	r3, [r5, #0]
   d6ad6:	7023      	strb	r3, [r4, #0]
   d6ad8:	463a      	mov	r2, r7
   d6ada:	4643      	mov	r3, r8
   d6adc:	a90c      	add	r1, sp, #48	; 0x30
   d6ade:	4630      	mov	r0, r6
   d6ae0:	47c8      	blx	r9
   d6ae2:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d6ae4:	9800      	ldr	r0, [sp, #0]
   d6ae6:	f7fe fc37 	bl	d5358 <netdb_freeaddrinfo>
}
   d6aea:	4628      	mov	r0, r5
   d6aec:	b013      	add	sp, #76	; 0x4c
   d6aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6af2:	68e3      	ldr	r3, [r4, #12]
   d6af4:	2b00      	cmp	r3, #0
   d6af6:	d1c3      	bne.n	d6a80 <_ZN9TCPClient7connectEPKctm+0x64>
   d6af8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6afc:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d6b00:	f7fe fca2 	bl	d5448 <inet_htonl>
   d6b04:	4581      	cmp	r9, r0
   d6b06:	d1bb      	bne.n	d6a80 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d6b08:	f104 0114 	add.w	r1, r4, #20
   d6b0c:	e7aa      	b.n	d6a64 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6b0e:	4625      	mov	r5, r4
   d6b10:	e7e8      	b.n	d6ae4 <_ZN9TCPClient7connectEPKctm+0xc8>
   d6b12:	bf00      	nop
   d6b14:	000d7ec8 	.word	0x000d7ec8

000d6b18 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6b18:	2200      	movs	r2, #0
   d6b1a:	6840      	ldr	r0, [r0, #4]
   d6b1c:	4611      	mov	r1, r2
   d6b1e:	f7fe be41 	b.w	d57a4 <network_ready>

000d6b22 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6b22:	2200      	movs	r2, #0
   d6b24:	6840      	ldr	r0, [r0, #4]
   d6b26:	4611      	mov	r1, r2
   d6b28:	f7fe be5c 	b.w	d57e4 <network_listening>

000d6b2c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6b2c:	2200      	movs	r2, #0
   d6b2e:	6840      	ldr	r0, [r0, #4]
   d6b30:	4611      	mov	r1, r2
   d6b32:	f7fe be67 	b.w	d5804 <network_get_listen_timeout>

000d6b36 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6b36:	6840      	ldr	r0, [r0, #4]
   d6b38:	2200      	movs	r2, #0
   d6b3a:	f7fe be5b 	b.w	d57f4 <network_set_listen_timeout>

000d6b3e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6b3e:	6840      	ldr	r0, [r0, #4]
   d6b40:	2200      	movs	r2, #0
   d6b42:	f081 0101 	eor.w	r1, r1, #1
   d6b46:	f7fe be45 	b.w	d57d4 <network_listen>

000d6b4a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6b4a:	2300      	movs	r3, #0
   d6b4c:	6840      	ldr	r0, [r0, #4]
   d6b4e:	461a      	mov	r2, r3
   d6b50:	4619      	mov	r1, r3
   d6b52:	f7fe be37 	b.w	d57c4 <network_off>

000d6b56 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6b56:	2200      	movs	r2, #0
   d6b58:	6840      	ldr	r0, [r0, #4]
   d6b5a:	4611      	mov	r1, r2
   d6b5c:	f7fe be12 	b.w	d5784 <network_connecting>

000d6b60 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6b60:	6840      	ldr	r0, [r0, #4]
   d6b62:	2200      	movs	r2, #0
   d6b64:	2102      	movs	r1, #2
   d6b66:	f7fe be15 	b.w	d5794 <network_disconnect>

000d6b6a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6b6a:	2300      	movs	r3, #0
   d6b6c:	6840      	ldr	r0, [r0, #4]
   d6b6e:	461a      	mov	r2, r3
   d6b70:	f7fe be00 	b.w	d5774 <network_connect>

000d6b74 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6b74:	4b02      	ldr	r3, [pc, #8]	; (d6b80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6b76:	2204      	movs	r2, #4
   d6b78:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6b7a:	4a02      	ldr	r2, [pc, #8]	; (d6b84 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6b7c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d6b7e:	4770      	bx	lr
   d6b80:	2003e7c4 	.word	0x2003e7c4
   d6b84:	000d7fdc 	.word	0x000d7fdc

000d6b88 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6b88:	2300      	movs	r3, #0
   d6b8a:	6840      	ldr	r0, [r0, #4]
   d6b8c:	461a      	mov	r2, r3
   d6b8e:	f7fe bdf1 	b.w	d5774 <network_connect>

000d6b92 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6b92:	6840      	ldr	r0, [r0, #4]
   d6b94:	2200      	movs	r2, #0
   d6b96:	2102      	movs	r1, #2
   d6b98:	f7fe bdfc 	b.w	d5794 <network_disconnect>

000d6b9c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6b9c:	2200      	movs	r2, #0
   d6b9e:	6840      	ldr	r0, [r0, #4]
   d6ba0:	4611      	mov	r1, r2
   d6ba2:	f7fe bdef 	b.w	d5784 <network_connecting>

000d6ba6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6ba6:	2200      	movs	r2, #0
   d6ba8:	6840      	ldr	r0, [r0, #4]
   d6baa:	4611      	mov	r1, r2
   d6bac:	f7fe bdfa 	b.w	d57a4 <network_ready>

000d6bb0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6bb0:	2300      	movs	r3, #0
   d6bb2:	6840      	ldr	r0, [r0, #4]
   d6bb4:	461a      	mov	r2, r3
   d6bb6:	4619      	mov	r1, r3
   d6bb8:	f7fe bdfc 	b.w	d57b4 <network_on>

000d6bbc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6bbc:	2300      	movs	r3, #0
   d6bbe:	6840      	ldr	r0, [r0, #4]
   d6bc0:	461a      	mov	r2, r3
   d6bc2:	4619      	mov	r1, r3
   d6bc4:	f7fe bdfe 	b.w	d57c4 <network_off>

000d6bc8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6bc8:	6840      	ldr	r0, [r0, #4]
   d6bca:	2100      	movs	r1, #0
   d6bcc:	f7fe be22 	b.w	d5814 <network_is_on>

000d6bd0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6bd0:	6840      	ldr	r0, [r0, #4]
   d6bd2:	2100      	movs	r1, #0
   d6bd4:	f7fe be26 	b.w	d5824 <network_is_off>

000d6bd8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6bd8:	6840      	ldr	r0, [r0, #4]
   d6bda:	2200      	movs	r2, #0
   d6bdc:	f081 0101 	eor.w	r1, r1, #1
   d6be0:	f7fe bdf8 	b.w	d57d4 <network_listen>

000d6be4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6be4:	6840      	ldr	r0, [r0, #4]
   d6be6:	2200      	movs	r2, #0
   d6be8:	f7fe be04 	b.w	d57f4 <network_set_listen_timeout>

000d6bec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6bec:	2200      	movs	r2, #0
   d6bee:	6840      	ldr	r0, [r0, #4]
   d6bf0:	4611      	mov	r1, r2
   d6bf2:	f7fe be07 	b.w	d5804 <network_get_listen_timeout>

000d6bf6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6bf6:	2200      	movs	r2, #0
   d6bf8:	6840      	ldr	r0, [r0, #4]
   d6bfa:	4611      	mov	r1, r2
   d6bfc:	f7fe bdf2 	b.w	d57e4 <network_listening>

000d6c00 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6c04:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6c06:	b095      	sub	sp, #84	; 0x54
   d6c08:	4616      	mov	r6, r2
   d6c0a:	460d      	mov	r5, r1
   d6c0c:	4607      	mov	r7, r0
    IPAddress addr;
   d6c0e:	f7ff facd 	bl	d61ac <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6c12:	4621      	mov	r1, r4
   d6c14:	2218      	movs	r2, #24
   d6c16:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6c18:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6c1a:	f001 f871 	bl	d7d00 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6c1e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6c20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6c24:	4621      	mov	r1, r4
   d6c26:	466b      	mov	r3, sp
   d6c28:	aa0c      	add	r2, sp, #48	; 0x30
   d6c2a:	4630      	mov	r0, r6
   d6c2c:	f7fe fb9c 	bl	d5368 <netdb_getaddrinfo>
    if (!r) {
   d6c30:	4604      	mov	r4, r0
   d6c32:	2800      	cmp	r0, #0
   d6c34:	d14c      	bne.n	d6cd0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6c36:	4602      	mov	r2, r0
   d6c38:	2101      	movs	r1, #1
   d6c3a:	6868      	ldr	r0, [r5, #4]
   d6c3c:	f7fe fdb2 	bl	d57a4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c40:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6c42:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c44:	4622      	mov	r2, r4
   d6c46:	6868      	ldr	r0, [r5, #4]
   d6c48:	f7fe fdac 	bl	d57a4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c4c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c4e:	4681      	mov	r9, r0
        bool ok = false;
   d6c50:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c52:	2e00      	cmp	r6, #0
   d6c54:	d03c      	beq.n	d6cd0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6c56:	2900      	cmp	r1, #0
   d6c58:	d13a      	bne.n	d6cd0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6c5a:	6873      	ldr	r3, [r6, #4]
   d6c5c:	2b02      	cmp	r3, #2
   d6c5e:	d003      	beq.n	d6c68 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6c60:	2b0a      	cmp	r3, #10
   d6c62:	d011      	beq.n	d6c88 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c64:	69f6      	ldr	r6, [r6, #28]
   d6c66:	e7f4      	b.n	d6c52 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6c68:	f1b8 0f00 	cmp.w	r8, #0
   d6c6c:	d00a      	beq.n	d6c84 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6c6e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d6c70:	a806      	add	r0, sp, #24
   d6c72:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d6c74:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d6c76:	f7ff fadd 	bl	d6234 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6c7c:	1d3c      	adds	r4, r7, #4
   d6c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c80:	682b      	ldr	r3, [r5, #0]
   d6c82:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d6c84:	4641      	mov	r1, r8
   d6c86:	e7ed      	b.n	d6c64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6c88:	f1b9 0f00 	cmp.w	r9, #0
   d6c8c:	d101      	bne.n	d6c92 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6c8e:	4649      	mov	r1, r9
   d6c90:	e7e8      	b.n	d6c64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6c92:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6c94:	2210      	movs	r2, #16
   d6c96:	a801      	add	r0, sp, #4
   d6c98:	f001 f832 	bl	d7d00 <memset>
                    a.v = 6;
   d6c9c:	2306      	movs	r3, #6
   d6c9e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6ca2:	ad01      	add	r5, sp, #4
   d6ca4:	f104 0308 	add.w	r3, r4, #8
   d6ca8:	3418      	adds	r4, #24
   d6caa:	6818      	ldr	r0, [r3, #0]
   d6cac:	6859      	ldr	r1, [r3, #4]
   d6cae:	462a      	mov	r2, r5
   d6cb0:	c203      	stmia	r2!, {r0, r1}
   d6cb2:	3308      	adds	r3, #8
   d6cb4:	42a3      	cmp	r3, r4
   d6cb6:	4615      	mov	r5, r2
   d6cb8:	d1f7      	bne.n	d6caa <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6cba:	a901      	add	r1, sp, #4
   d6cbc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6cbe:	ad07      	add	r5, sp, #28
   d6cc0:	f7ff fa82 	bl	d61c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6cc6:	1d3c      	adds	r4, r7, #4
   d6cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6cca:	682b      	ldr	r3, [r5, #0]
   d6ccc:	7023      	strb	r3, [r4, #0]
   d6cce:	e7de      	b.n	d6c8e <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6cd0:	9800      	ldr	r0, [sp, #0]
   d6cd2:	f7fe fb41 	bl	d5358 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6cd6:	4638      	mov	r0, r7
   d6cd8:	b015      	add	sp, #84	; 0x54
   d6cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6ce0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6ce0:	4b02      	ldr	r3, [pc, #8]	; (d6cec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6ce2:	4a03      	ldr	r2, [pc, #12]	; (d6cf0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6ce4:	601a      	str	r2, [r3, #0]
   d6ce6:	2200      	movs	r2, #0
   d6ce8:	605a      	str	r2, [r3, #4]

} // spark
   d6cea:	4770      	bx	lr
   d6cec:	2003e7cc 	.word	0x2003e7cc
   d6cf0:	000d8018 	.word	0x000d8018

000d6cf4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6cf4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6cf6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6cf8:	d902      	bls.n	d6d00 <pinAvailable+0xc>
    return false;
   d6cfa:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6cfc:	b002      	add	sp, #8
   d6cfe:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6d00:	f1a0 030b 	sub.w	r3, r0, #11
   d6d04:	2b02      	cmp	r3, #2
   d6d06:	d81a      	bhi.n	d6d3e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6d08:	4c17      	ldr	r4, [pc, #92]	; (d6d68 <pinAvailable+0x74>)
   d6d0a:	7821      	ldrb	r1, [r4, #0]
   d6d0c:	f3bf 8f5b 	dmb	ish
   d6d10:	f011 0101 	ands.w	r1, r1, #1
   d6d14:	d10b      	bne.n	d6d2e <pinAvailable+0x3a>
   d6d16:	4620      	mov	r0, r4
   d6d18:	9101      	str	r1, [sp, #4]
   d6d1a:	f7fd f9c4 	bl	d40a6 <__cxa_guard_acquire>
   d6d1e:	9901      	ldr	r1, [sp, #4]
   d6d20:	b128      	cbz	r0, d6d2e <pinAvailable+0x3a>
   d6d22:	4812      	ldr	r0, [pc, #72]	; (d6d6c <pinAvailable+0x78>)
   d6d24:	f7fe fe02 	bl	d592c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6d28:	4620      	mov	r0, r4
   d6d2a:	f7fd f9c1 	bl	d40b0 <__cxa_guard_release>
   d6d2e:	4b0f      	ldr	r3, [pc, #60]	; (d6d6c <pinAvailable+0x78>)
   d6d30:	7818      	ldrb	r0, [r3, #0]
   d6d32:	f7fe fc91 	bl	d5658 <hal_spi_is_enabled>
   d6d36:	2800      	cmp	r0, #0
   d6d38:	d1df      	bne.n	d6cfa <pinAvailable+0x6>
  return true; // 'pin' is available
   d6d3a:	2001      	movs	r0, #1
   d6d3c:	e7de      	b.n	d6cfc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6d3e:	2801      	cmp	r0, #1
   d6d40:	d809      	bhi.n	d6d56 <pinAvailable+0x62>
   d6d42:	f000 f86b 	bl	d6e1c <_Z19__fetch_global_Wirev>
   d6d46:	2100      	movs	r1, #0
   d6d48:	7c00      	ldrb	r0, [r0, #16]
   d6d4a:	f7fe fc0d 	bl	d5568 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6d4e:	f080 0001 	eor.w	r0, r0, #1
   d6d52:	b2c0      	uxtb	r0, r0
   d6d54:	e7d2      	b.n	d6cfc <pinAvailable+0x8>
   d6d56:	3809      	subs	r0, #9
   d6d58:	2801      	cmp	r0, #1
   d6d5a:	d8ee      	bhi.n	d6d3a <pinAvailable+0x46>
   d6d5c:	f7ff fb54 	bl	d6408 <_Z22__fetch_global_Serial1v>
   d6d60:	7c00      	ldrb	r0, [r0, #16]
   d6d62:	f7fe fbb1 	bl	d54c8 <hal_usart_is_enabled>
   d6d66:	e7f2      	b.n	d6d4e <pinAvailable+0x5a>
   d6d68:	2003e644 	.word	0x2003e644
   d6d6c:	2003e648 	.word	0x2003e648

000d6d70 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6d70:	2823      	cmp	r0, #35	; 0x23
{
   d6d72:	b538      	push	{r3, r4, r5, lr}
   d6d74:	4604      	mov	r4, r0
   d6d76:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6d78:	d80a      	bhi.n	d6d90 <pinMode+0x20>
   d6d7a:	29ff      	cmp	r1, #255	; 0xff
   d6d7c:	d008      	beq.n	d6d90 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6d7e:	f7ff ffb9 	bl	d6cf4 <pinAvailable>
   d6d82:	b128      	cbz	r0, d6d90 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6d84:	4629      	mov	r1, r5
   d6d86:	4620      	mov	r0, r4
}
   d6d88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6d8c:	f7fe baf4 	b.w	d5378 <HAL_Pin_Mode>
}
   d6d90:	bd38      	pop	{r3, r4, r5, pc}

000d6d92 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6d92:	b538      	push	{r3, r4, r5, lr}
   d6d94:	4604      	mov	r4, r0
   d6d96:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6d98:	f7fe faf6 	bl	d5388 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6d9c:	28ff      	cmp	r0, #255	; 0xff
   d6d9e:	d010      	beq.n	d6dc2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6da0:	2806      	cmp	r0, #6
   d6da2:	d804      	bhi.n	d6dae <digitalWrite+0x1c>
   d6da4:	234d      	movs	r3, #77	; 0x4d
   d6da6:	fa23 f000 	lsr.w	r0, r3, r0
   d6daa:	07c3      	lsls	r3, r0, #31
   d6dac:	d409      	bmi.n	d6dc2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6dae:	4620      	mov	r0, r4
   d6db0:	f7ff ffa0 	bl	d6cf4 <pinAvailable>
   d6db4:	b128      	cbz	r0, d6dc2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6db6:	4629      	mov	r1, r5
   d6db8:	4620      	mov	r0, r4
}
   d6dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6dbe:	f7fe baeb 	b.w	d5398 <HAL_GPIO_Write>
}
   d6dc2:	bd38      	pop	{r3, r4, r5, pc}

000d6dc4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6dc4:	b510      	push	{r4, lr}
   d6dc6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6dc8:	f7fe fade 	bl	d5388 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d6dcc:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d6dce:	b2db      	uxtb	r3, r3
   d6dd0:	2b01      	cmp	r3, #1
   d6dd2:	d908      	bls.n	d6de6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6dd4:	4620      	mov	r0, r4
   d6dd6:	f7ff ff8d 	bl	d6cf4 <pinAvailable>
   d6dda:	b120      	cbz	r0, d6de6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6ddc:	4620      	mov	r0, r4
}
   d6dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d6de2:	f7fe bae1 	b.w	d53a8 <HAL_GPIO_Read>
}
   d6de6:	2000      	movs	r0, #0
   d6de8:	bd10      	pop	{r4, pc}
	...

000d6dec <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6dec:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6dee:	2300      	movs	r3, #0
   d6df0:	2520      	movs	r5, #32
   d6df2:	8043      	strh	r3, [r0, #2]
   d6df4:	2314      	movs	r3, #20
{
   d6df6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6df8:	8003      	strh	r3, [r0, #0]
   d6dfa:	6085      	str	r5, [r0, #8]
   d6dfc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6dfe:	4906      	ldr	r1, [pc, #24]	; (d6e18 <_Z17acquireWireBufferv+0x2c>)
   d6e00:	4628      	mov	r0, r5
   d6e02:	f000 f83c 	bl	d6e7e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6e06:	4904      	ldr	r1, [pc, #16]	; (d6e18 <_Z17acquireWireBufferv+0x2c>)
	};
   d6e08:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6e0a:	4628      	mov	r0, r5
   d6e0c:	f000 f837 	bl	d6e7e <_ZnajRKSt9nothrow_t>
	};
   d6e10:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6e12:	4620      	mov	r0, r4
   d6e14:	bd38      	pop	{r3, r4, r5, pc}
   d6e16:	bf00      	nop
   d6e18:	000d804c 	.word	0x000d804c

000d6e1c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6e1c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6e1e:	4d0f      	ldr	r5, [pc, #60]	; (d6e5c <_Z19__fetch_global_Wirev+0x40>)
   d6e20:	7829      	ldrb	r1, [r5, #0]
   d6e22:	f3bf 8f5b 	dmb	ish
   d6e26:	f011 0401 	ands.w	r4, r1, #1
{
   d6e2a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6e2c:	d113      	bne.n	d6e56 <_Z19__fetch_global_Wirev+0x3a>
   d6e2e:	4628      	mov	r0, r5
   d6e30:	f7fd f939 	bl	d40a6 <__cxa_guard_acquire>
   d6e34:	b178      	cbz	r0, d6e56 <_Z19__fetch_global_Wirev+0x3a>
   d6e36:	a801      	add	r0, sp, #4
   d6e38:	f7ff ffd8 	bl	d6dec <_Z17acquireWireBufferv>
   d6e3c:	aa01      	add	r2, sp, #4
   d6e3e:	4621      	mov	r1, r4
   d6e40:	4807      	ldr	r0, [pc, #28]	; (d6e60 <_Z19__fetch_global_Wirev+0x44>)
   d6e42:	f7ff fb37 	bl	d64b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6e46:	4628      	mov	r0, r5
   d6e48:	f7fd f932 	bl	d40b0 <__cxa_guard_release>
   d6e4c:	4a05      	ldr	r2, [pc, #20]	; (d6e64 <_Z19__fetch_global_Wirev+0x48>)
   d6e4e:	4906      	ldr	r1, [pc, #24]	; (d6e68 <_Z19__fetch_global_Wirev+0x4c>)
   d6e50:	4803      	ldr	r0, [pc, #12]	; (d6e60 <_Z19__fetch_global_Wirev+0x44>)
   d6e52:	f000 f80b 	bl	d6e6c <__aeabi_atexit>
	return wire;
}
   d6e56:	4802      	ldr	r0, [pc, #8]	; (d6e60 <_Z19__fetch_global_Wirev+0x44>)
   d6e58:	b007      	add	sp, #28
   d6e5a:	bd30      	pop	{r4, r5, pc}
   d6e5c:	2003e7d8 	.word	0x2003e7d8
   d6e60:	2003e7dc 	.word	0x2003e7dc
   d6e64:	2003e0d8 	.word	0x2003e0d8
   d6e68:	000d645d 	.word	0x000d645d

000d6e6c <__aeabi_atexit>:
   d6e6c:	460b      	mov	r3, r1
   d6e6e:	4601      	mov	r1, r0
   d6e70:	4618      	mov	r0, r3
   d6e72:	f000 bf29 	b.w	d7cc8 <__cxa_atexit>

000d6e76 <_ZdlPvj>:
   d6e76:	f7fd b912 	b.w	d409e <_ZdlPv>

000d6e7a <_ZnwjRKSt9nothrow_t>:
   d6e7a:	f7fd b90c 	b.w	d4096 <_Znwj>

000d6e7e <_ZnajRKSt9nothrow_t>:
   d6e7e:	f7fd b90c 	b.w	d409a <_Znaj>
	...

000d6e84 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d6e84:	4901      	ldr	r1, [pc, #4]	; (d6e8c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d6e86:	f000 b8f9 	b.w	d707c <_ZNKSt9type_infoeqERKS_>
   d6e8a:	bf00      	nop
   d6e8c:	000d8068 	.word	0x000d8068

000d6e90 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d6e90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6e92:	2400      	movs	r4, #0
   d6e94:	2310      	movs	r3, #16
   d6e96:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d6e9a:	6803      	ldr	r3, [r0, #0]
   d6e9c:	9400      	str	r4, [sp, #0]
   d6e9e:	699e      	ldr	r6, [r3, #24]
   d6ea0:	f88d 4004 	strb.w	r4, [sp, #4]
   d6ea4:	4615      	mov	r5, r2
   d6ea6:	466b      	mov	r3, sp
   d6ea8:	6812      	ldr	r2, [r2, #0]
   d6eaa:	47b0      	blx	r6
   d6eac:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d6eb0:	f003 0306 	and.w	r3, r3, #6
   d6eb4:	2b06      	cmp	r3, #6
   d6eb6:	bf03      	ittte	eq
   d6eb8:	9b00      	ldreq	r3, [sp, #0]
   d6eba:	602b      	streq	r3, [r5, #0]
   d6ebc:	2001      	moveq	r0, #1
   d6ebe:	4620      	movne	r0, r4
   d6ec0:	b004      	add	sp, #16
   d6ec2:	bd70      	pop	{r4, r5, r6, pc}

000d6ec4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d6ec4:	9800      	ldr	r0, [sp, #0]
   d6ec6:	4290      	cmp	r0, r2
   d6ec8:	bf14      	ite	ne
   d6eca:	2001      	movne	r0, #1
   d6ecc:	2006      	moveq	r0, #6
   d6ece:	4770      	bx	lr

000d6ed0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d6ed0:	b510      	push	{r4, lr}
   d6ed2:	4b03      	ldr	r3, [pc, #12]	; (d6ee0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d6ed4:	6003      	str	r3, [r0, #0]
   d6ed6:	4604      	mov	r4, r0
   d6ed8:	f000 f8cd 	bl	d7076 <_ZNSt9type_infoD1Ev>
   d6edc:	4620      	mov	r0, r4
   d6ede:	bd10      	pop	{r4, pc}
   d6ee0:	000d80a8 	.word	0x000d80a8

000d6ee4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d6ee4:	b510      	push	{r4, lr}
   d6ee6:	4604      	mov	r4, r0
   d6ee8:	f7ff fff2 	bl	d6ed0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6eec:	4620      	mov	r0, r4
   d6eee:	2108      	movs	r1, #8
   d6ef0:	f7ff ffc1 	bl	d6e76 <_ZdlPvj>
   d6ef4:	4620      	mov	r0, r4
   d6ef6:	bd10      	pop	{r4, pc}

000d6ef8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d6ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6efc:	461f      	mov	r7, r3
   d6efe:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d6f02:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d6f06:	4598      	cmp	r8, r3
   d6f08:	4606      	mov	r6, r0
   d6f0a:	4615      	mov	r5, r2
   d6f0c:	d107      	bne.n	d6f1e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6f0e:	9907      	ldr	r1, [sp, #28]
   d6f10:	f000 f8b4 	bl	d707c <_ZNKSt9type_infoeqERKS_>
   d6f14:	b118      	cbz	r0, d6f1e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6f16:	7165      	strb	r5, [r4, #5]
   d6f18:	2000      	movs	r0, #0
   d6f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6f1e:	4639      	mov	r1, r7
   d6f20:	4630      	mov	r0, r6
   d6f22:	f000 f8ab 	bl	d707c <_ZNKSt9type_infoeqERKS_>
   d6f26:	2800      	cmp	r0, #0
   d6f28:	d0f6      	beq.n	d6f18 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d6f2a:	2301      	movs	r3, #1
   d6f2c:	f8c4 8000 	str.w	r8, [r4]
   d6f30:	7125      	strb	r5, [r4, #4]
   d6f32:	71a3      	strb	r3, [r4, #6]
   d6f34:	e7f0      	b.n	d6f18 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d6f36 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d6f36:	b538      	push	{r3, r4, r5, lr}
   d6f38:	4615      	mov	r5, r2
   d6f3a:	461c      	mov	r4, r3
   d6f3c:	f000 f89e 	bl	d707c <_ZNKSt9type_infoeqERKS_>
   d6f40:	b120      	cbz	r0, d6f4c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d6f42:	2308      	movs	r3, #8
   d6f44:	60e3      	str	r3, [r4, #12]
   d6f46:	2306      	movs	r3, #6
   d6f48:	6025      	str	r5, [r4, #0]
   d6f4a:	7123      	strb	r3, [r4, #4]
   d6f4c:	bd38      	pop	{r3, r4, r5, pc}

000d6f4e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d6f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6f50:	4605      	mov	r5, r0
   d6f52:	460c      	mov	r4, r1
   d6f54:	9201      	str	r2, [sp, #4]
   d6f56:	461e      	mov	r6, r3
   d6f58:	f000 f890 	bl	d707c <_ZNKSt9type_infoeqERKS_>
   d6f5c:	b950      	cbnz	r0, d6f74 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6f5e:	2e03      	cmp	r6, #3
   d6f60:	d808      	bhi.n	d6f74 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6f62:	6823      	ldr	r3, [r4, #0]
   d6f64:	9a01      	ldr	r2, [sp, #4]
   d6f66:	695b      	ldr	r3, [r3, #20]
   d6f68:	4629      	mov	r1, r5
   d6f6a:	4620      	mov	r0, r4
   d6f6c:	b002      	add	sp, #8
   d6f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6f72:	4718      	bx	r3
   d6f74:	b002      	add	sp, #8
   d6f76:	bd70      	pop	{r4, r5, r6, pc}

000d6f78 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d6f78:	b510      	push	{r4, lr}
   d6f7a:	4b03      	ldr	r3, [pc, #12]	; (d6f88 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d6f7c:	6003      	str	r3, [r0, #0]
   d6f7e:	4604      	mov	r4, r0
   d6f80:	f7ff ffa6 	bl	d6ed0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6f84:	4620      	mov	r0, r4
   d6f86:	bd10      	pop	{r4, pc}
   d6f88:	000d8108 	.word	0x000d8108

000d6f8c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d6f8c:	b510      	push	{r4, lr}
   d6f8e:	4604      	mov	r4, r0
   d6f90:	f7ff fff2 	bl	d6f78 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d6f94:	4620      	mov	r0, r4
   d6f96:	210c      	movs	r1, #12
   d6f98:	f7ff ff6d 	bl	d6e76 <_ZdlPvj>
   d6f9c:	4620      	mov	r0, r4
   d6f9e:	bd10      	pop	{r4, pc}

000d6fa0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d6fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6fa2:	9f08      	ldr	r7, [sp, #32]
   d6fa4:	4297      	cmp	r7, r2
   d6fa6:	4605      	mov	r5, r0
   d6fa8:	460e      	mov	r6, r1
   d6faa:	4614      	mov	r4, r2
   d6fac:	d00a      	beq.n	d6fc4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d6fae:	68a8      	ldr	r0, [r5, #8]
   d6fb0:	6802      	ldr	r2, [r0, #0]
   d6fb2:	9708      	str	r7, [sp, #32]
   d6fb4:	6a15      	ldr	r5, [r2, #32]
   d6fb6:	4631      	mov	r1, r6
   d6fb8:	4622      	mov	r2, r4
   d6fba:	46ac      	mov	ip, r5
   d6fbc:	b003      	add	sp, #12
   d6fbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6fc2:	4760      	bx	ip
   d6fc4:	4619      	mov	r1, r3
   d6fc6:	9301      	str	r3, [sp, #4]
   d6fc8:	f000 f858 	bl	d707c <_ZNKSt9type_infoeqERKS_>
   d6fcc:	9b01      	ldr	r3, [sp, #4]
   d6fce:	2800      	cmp	r0, #0
   d6fd0:	d0ed      	beq.n	d6fae <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d6fd2:	2006      	movs	r0, #6
   d6fd4:	b003      	add	sp, #12
   d6fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6fd8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d6fd8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6fdc:	460d      	mov	r5, r1
   d6fde:	4619      	mov	r1, r3
   d6fe0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d6fe4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d6fe8:	4681      	mov	r9, r0
   d6fea:	4617      	mov	r7, r2
   d6fec:	4698      	mov	r8, r3
   d6fee:	f000 f845 	bl	d707c <_ZNKSt9type_infoeqERKS_>
   d6ff2:	b190      	cbz	r0, d701a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d6ff4:	2d00      	cmp	r5, #0
   d6ff6:	6034      	str	r4, [r6, #0]
   d6ff8:	7137      	strb	r7, [r6, #4]
   d6ffa:	db09      	blt.n	d7010 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d6ffc:	1961      	adds	r1, r4, r5
   d6ffe:	458a      	cmp	sl, r1
   d7000:	bf0c      	ite	eq
   d7002:	2106      	moveq	r1, #6
   d7004:	2101      	movne	r1, #1
   d7006:	71b1      	strb	r1, [r6, #6]
   d7008:	2000      	movs	r0, #0
   d700a:	b001      	add	sp, #4
   d700c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7010:	3502      	adds	r5, #2
   d7012:	d1f9      	bne.n	d7008 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7014:	2301      	movs	r3, #1
   d7016:	71b3      	strb	r3, [r6, #6]
   d7018:	e7f6      	b.n	d7008 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d701a:	4554      	cmp	r4, sl
   d701c:	d106      	bne.n	d702c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d701e:	4659      	mov	r1, fp
   d7020:	4648      	mov	r0, r9
   d7022:	f000 f82b 	bl	d707c <_ZNKSt9type_infoeqERKS_>
   d7026:	b108      	cbz	r0, d702c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7028:	7177      	strb	r7, [r6, #5]
   d702a:	e7ed      	b.n	d7008 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d702c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d7030:	6803      	ldr	r3, [r0, #0]
   d7032:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d7036:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d703a:	69dc      	ldr	r4, [r3, #28]
   d703c:	463a      	mov	r2, r7
   d703e:	4643      	mov	r3, r8
   d7040:	4629      	mov	r1, r5
   d7042:	46a4      	mov	ip, r4
   d7044:	b001      	add	sp, #4
   d7046:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d704a:	4760      	bx	ip

000d704c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d704c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7050:	4607      	mov	r7, r0
   d7052:	460c      	mov	r4, r1
   d7054:	4615      	mov	r5, r2
   d7056:	461e      	mov	r6, r3
   d7058:	f7ff ff6d 	bl	d6f36 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d705c:	b948      	cbnz	r0, d7072 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d705e:	68b8      	ldr	r0, [r7, #8]
   d7060:	6803      	ldr	r3, [r0, #0]
   d7062:	699f      	ldr	r7, [r3, #24]
   d7064:	462a      	mov	r2, r5
   d7066:	4633      	mov	r3, r6
   d7068:	4621      	mov	r1, r4
   d706a:	46bc      	mov	ip, r7
   d706c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d7070:	4760      	bx	ip
   d7072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7076 <_ZNSt9type_infoD1Ev>:
   d7076:	4770      	bx	lr

000d7078 <_ZNKSt9type_info14__is_pointer_pEv>:
   d7078:	2000      	movs	r0, #0
   d707a:	4770      	bx	lr

000d707c <_ZNKSt9type_infoeqERKS_>:
   d707c:	4281      	cmp	r1, r0
   d707e:	b508      	push	{r3, lr}
   d7080:	d00e      	beq.n	d70a0 <_ZNKSt9type_infoeqERKS_+0x24>
   d7082:	6840      	ldr	r0, [r0, #4]
   d7084:	7803      	ldrb	r3, [r0, #0]
   d7086:	2b2a      	cmp	r3, #42	; 0x2a
   d7088:	d00c      	beq.n	d70a4 <_ZNKSt9type_infoeqERKS_+0x28>
   d708a:	6849      	ldr	r1, [r1, #4]
   d708c:	780b      	ldrb	r3, [r1, #0]
   d708e:	2b2a      	cmp	r3, #42	; 0x2a
   d7090:	bf08      	it	eq
   d7092:	3101      	addeq	r1, #1
   d7094:	f000 fe60 	bl	d7d58 <strcmp>
   d7098:	fab0 f080 	clz	r0, r0
   d709c:	0940      	lsrs	r0, r0, #5
   d709e:	bd08      	pop	{r3, pc}
   d70a0:	2001      	movs	r0, #1
   d70a2:	e7fc      	b.n	d709e <_ZNKSt9type_infoeqERKS_+0x22>
   d70a4:	2000      	movs	r0, #0
   d70a6:	e7fa      	b.n	d709e <_ZNKSt9type_infoeqERKS_+0x22>

000d70a8 <__aeabi_drsub>:
   d70a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d70ac:	e002      	b.n	d70b4 <__adddf3>
   d70ae:	bf00      	nop

000d70b0 <__aeabi_dsub>:
   d70b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d70b4 <__adddf3>:
   d70b4:	b530      	push	{r4, r5, lr}
   d70b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d70ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d70be:	ea94 0f05 	teq	r4, r5
   d70c2:	bf08      	it	eq
   d70c4:	ea90 0f02 	teqeq	r0, r2
   d70c8:	bf1f      	itttt	ne
   d70ca:	ea54 0c00 	orrsne.w	ip, r4, r0
   d70ce:	ea55 0c02 	orrsne.w	ip, r5, r2
   d70d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d70d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d70da:	f000 80e2 	beq.w	d72a2 <__adddf3+0x1ee>
   d70de:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d70e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d70e6:	bfb8      	it	lt
   d70e8:	426d      	neglt	r5, r5
   d70ea:	dd0c      	ble.n	d7106 <__adddf3+0x52>
   d70ec:	442c      	add	r4, r5
   d70ee:	ea80 0202 	eor.w	r2, r0, r2
   d70f2:	ea81 0303 	eor.w	r3, r1, r3
   d70f6:	ea82 0000 	eor.w	r0, r2, r0
   d70fa:	ea83 0101 	eor.w	r1, r3, r1
   d70fe:	ea80 0202 	eor.w	r2, r0, r2
   d7102:	ea81 0303 	eor.w	r3, r1, r3
   d7106:	2d36      	cmp	r5, #54	; 0x36
   d7108:	bf88      	it	hi
   d710a:	bd30      	pophi	{r4, r5, pc}
   d710c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7110:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7114:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7118:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d711c:	d002      	beq.n	d7124 <__adddf3+0x70>
   d711e:	4240      	negs	r0, r0
   d7120:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7124:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7128:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d712c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7130:	d002      	beq.n	d7138 <__adddf3+0x84>
   d7132:	4252      	negs	r2, r2
   d7134:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7138:	ea94 0f05 	teq	r4, r5
   d713c:	f000 80a7 	beq.w	d728e <__adddf3+0x1da>
   d7140:	f1a4 0401 	sub.w	r4, r4, #1
   d7144:	f1d5 0e20 	rsbs	lr, r5, #32
   d7148:	db0d      	blt.n	d7166 <__adddf3+0xb2>
   d714a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d714e:	fa22 f205 	lsr.w	r2, r2, r5
   d7152:	1880      	adds	r0, r0, r2
   d7154:	f141 0100 	adc.w	r1, r1, #0
   d7158:	fa03 f20e 	lsl.w	r2, r3, lr
   d715c:	1880      	adds	r0, r0, r2
   d715e:	fa43 f305 	asr.w	r3, r3, r5
   d7162:	4159      	adcs	r1, r3
   d7164:	e00e      	b.n	d7184 <__adddf3+0xd0>
   d7166:	f1a5 0520 	sub.w	r5, r5, #32
   d716a:	f10e 0e20 	add.w	lr, lr, #32
   d716e:	2a01      	cmp	r2, #1
   d7170:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7174:	bf28      	it	cs
   d7176:	f04c 0c02 	orrcs.w	ip, ip, #2
   d717a:	fa43 f305 	asr.w	r3, r3, r5
   d717e:	18c0      	adds	r0, r0, r3
   d7180:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7184:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7188:	d507      	bpl.n	d719a <__adddf3+0xe6>
   d718a:	f04f 0e00 	mov.w	lr, #0
   d718e:	f1dc 0c00 	rsbs	ip, ip, #0
   d7192:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7196:	eb6e 0101 	sbc.w	r1, lr, r1
   d719a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d719e:	d31b      	bcc.n	d71d8 <__adddf3+0x124>
   d71a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d71a4:	d30c      	bcc.n	d71c0 <__adddf3+0x10c>
   d71a6:	0849      	lsrs	r1, r1, #1
   d71a8:	ea5f 0030 	movs.w	r0, r0, rrx
   d71ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d71b0:	f104 0401 	add.w	r4, r4, #1
   d71b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d71b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d71bc:	f080 809a 	bcs.w	d72f4 <__adddf3+0x240>
   d71c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d71c4:	bf08      	it	eq
   d71c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d71ca:	f150 0000 	adcs.w	r0, r0, #0
   d71ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d71d2:	ea41 0105 	orr.w	r1, r1, r5
   d71d6:	bd30      	pop	{r4, r5, pc}
   d71d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d71dc:	4140      	adcs	r0, r0
   d71de:	eb41 0101 	adc.w	r1, r1, r1
   d71e2:	3c01      	subs	r4, #1
   d71e4:	bf28      	it	cs
   d71e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d71ea:	d2e9      	bcs.n	d71c0 <__adddf3+0x10c>
   d71ec:	f091 0f00 	teq	r1, #0
   d71f0:	bf04      	itt	eq
   d71f2:	4601      	moveq	r1, r0
   d71f4:	2000      	moveq	r0, #0
   d71f6:	fab1 f381 	clz	r3, r1
   d71fa:	bf08      	it	eq
   d71fc:	3320      	addeq	r3, #32
   d71fe:	f1a3 030b 	sub.w	r3, r3, #11
   d7202:	f1b3 0220 	subs.w	r2, r3, #32
   d7206:	da0c      	bge.n	d7222 <__adddf3+0x16e>
   d7208:	320c      	adds	r2, #12
   d720a:	dd08      	ble.n	d721e <__adddf3+0x16a>
   d720c:	f102 0c14 	add.w	ip, r2, #20
   d7210:	f1c2 020c 	rsb	r2, r2, #12
   d7214:	fa01 f00c 	lsl.w	r0, r1, ip
   d7218:	fa21 f102 	lsr.w	r1, r1, r2
   d721c:	e00c      	b.n	d7238 <__adddf3+0x184>
   d721e:	f102 0214 	add.w	r2, r2, #20
   d7222:	bfd8      	it	le
   d7224:	f1c2 0c20 	rsble	ip, r2, #32
   d7228:	fa01 f102 	lsl.w	r1, r1, r2
   d722c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7230:	bfdc      	itt	le
   d7232:	ea41 010c 	orrle.w	r1, r1, ip
   d7236:	4090      	lslle	r0, r2
   d7238:	1ae4      	subs	r4, r4, r3
   d723a:	bfa2      	ittt	ge
   d723c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7240:	4329      	orrge	r1, r5
   d7242:	bd30      	popge	{r4, r5, pc}
   d7244:	ea6f 0404 	mvn.w	r4, r4
   d7248:	3c1f      	subs	r4, #31
   d724a:	da1c      	bge.n	d7286 <__adddf3+0x1d2>
   d724c:	340c      	adds	r4, #12
   d724e:	dc0e      	bgt.n	d726e <__adddf3+0x1ba>
   d7250:	f104 0414 	add.w	r4, r4, #20
   d7254:	f1c4 0220 	rsb	r2, r4, #32
   d7258:	fa20 f004 	lsr.w	r0, r0, r4
   d725c:	fa01 f302 	lsl.w	r3, r1, r2
   d7260:	ea40 0003 	orr.w	r0, r0, r3
   d7264:	fa21 f304 	lsr.w	r3, r1, r4
   d7268:	ea45 0103 	orr.w	r1, r5, r3
   d726c:	bd30      	pop	{r4, r5, pc}
   d726e:	f1c4 040c 	rsb	r4, r4, #12
   d7272:	f1c4 0220 	rsb	r2, r4, #32
   d7276:	fa20 f002 	lsr.w	r0, r0, r2
   d727a:	fa01 f304 	lsl.w	r3, r1, r4
   d727e:	ea40 0003 	orr.w	r0, r0, r3
   d7282:	4629      	mov	r1, r5
   d7284:	bd30      	pop	{r4, r5, pc}
   d7286:	fa21 f004 	lsr.w	r0, r1, r4
   d728a:	4629      	mov	r1, r5
   d728c:	bd30      	pop	{r4, r5, pc}
   d728e:	f094 0f00 	teq	r4, #0
   d7292:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7296:	bf06      	itte	eq
   d7298:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d729c:	3401      	addeq	r4, #1
   d729e:	3d01      	subne	r5, #1
   d72a0:	e74e      	b.n	d7140 <__adddf3+0x8c>
   d72a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d72a6:	bf18      	it	ne
   d72a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d72ac:	d029      	beq.n	d7302 <__adddf3+0x24e>
   d72ae:	ea94 0f05 	teq	r4, r5
   d72b2:	bf08      	it	eq
   d72b4:	ea90 0f02 	teqeq	r0, r2
   d72b8:	d005      	beq.n	d72c6 <__adddf3+0x212>
   d72ba:	ea54 0c00 	orrs.w	ip, r4, r0
   d72be:	bf04      	itt	eq
   d72c0:	4619      	moveq	r1, r3
   d72c2:	4610      	moveq	r0, r2
   d72c4:	bd30      	pop	{r4, r5, pc}
   d72c6:	ea91 0f03 	teq	r1, r3
   d72ca:	bf1e      	ittt	ne
   d72cc:	2100      	movne	r1, #0
   d72ce:	2000      	movne	r0, #0
   d72d0:	bd30      	popne	{r4, r5, pc}
   d72d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d72d6:	d105      	bne.n	d72e4 <__adddf3+0x230>
   d72d8:	0040      	lsls	r0, r0, #1
   d72da:	4149      	adcs	r1, r1
   d72dc:	bf28      	it	cs
   d72de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d72e2:	bd30      	pop	{r4, r5, pc}
   d72e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d72e8:	bf3c      	itt	cc
   d72ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d72ee:	bd30      	popcc	{r4, r5, pc}
   d72f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d72f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d72f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d72fc:	f04f 0000 	mov.w	r0, #0
   d7300:	bd30      	pop	{r4, r5, pc}
   d7302:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7306:	bf1a      	itte	ne
   d7308:	4619      	movne	r1, r3
   d730a:	4610      	movne	r0, r2
   d730c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7310:	bf1c      	itt	ne
   d7312:	460b      	movne	r3, r1
   d7314:	4602      	movne	r2, r0
   d7316:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d731a:	bf06      	itte	eq
   d731c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7320:	ea91 0f03 	teqeq	r1, r3
   d7324:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7328:	bd30      	pop	{r4, r5, pc}
   d732a:	bf00      	nop

000d732c <__aeabi_ui2d>:
   d732c:	f090 0f00 	teq	r0, #0
   d7330:	bf04      	itt	eq
   d7332:	2100      	moveq	r1, #0
   d7334:	4770      	bxeq	lr
   d7336:	b530      	push	{r4, r5, lr}
   d7338:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d733c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7340:	f04f 0500 	mov.w	r5, #0
   d7344:	f04f 0100 	mov.w	r1, #0
   d7348:	e750      	b.n	d71ec <__adddf3+0x138>
   d734a:	bf00      	nop

000d734c <__aeabi_i2d>:
   d734c:	f090 0f00 	teq	r0, #0
   d7350:	bf04      	itt	eq
   d7352:	2100      	moveq	r1, #0
   d7354:	4770      	bxeq	lr
   d7356:	b530      	push	{r4, r5, lr}
   d7358:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d735c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7360:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7364:	bf48      	it	mi
   d7366:	4240      	negmi	r0, r0
   d7368:	f04f 0100 	mov.w	r1, #0
   d736c:	e73e      	b.n	d71ec <__adddf3+0x138>
   d736e:	bf00      	nop

000d7370 <__aeabi_f2d>:
   d7370:	0042      	lsls	r2, r0, #1
   d7372:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7376:	ea4f 0131 	mov.w	r1, r1, rrx
   d737a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d737e:	bf1f      	itttt	ne
   d7380:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7384:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7388:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d738c:	4770      	bxne	lr
   d738e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d7392:	bf08      	it	eq
   d7394:	4770      	bxeq	lr
   d7396:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d739a:	bf04      	itt	eq
   d739c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d73a0:	4770      	bxeq	lr
   d73a2:	b530      	push	{r4, r5, lr}
   d73a4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d73a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d73ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d73b0:	e71c      	b.n	d71ec <__adddf3+0x138>
   d73b2:	bf00      	nop

000d73b4 <__aeabi_ul2d>:
   d73b4:	ea50 0201 	orrs.w	r2, r0, r1
   d73b8:	bf08      	it	eq
   d73ba:	4770      	bxeq	lr
   d73bc:	b530      	push	{r4, r5, lr}
   d73be:	f04f 0500 	mov.w	r5, #0
   d73c2:	e00a      	b.n	d73da <__aeabi_l2d+0x16>

000d73c4 <__aeabi_l2d>:
   d73c4:	ea50 0201 	orrs.w	r2, r0, r1
   d73c8:	bf08      	it	eq
   d73ca:	4770      	bxeq	lr
   d73cc:	b530      	push	{r4, r5, lr}
   d73ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d73d2:	d502      	bpl.n	d73da <__aeabi_l2d+0x16>
   d73d4:	4240      	negs	r0, r0
   d73d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d73da:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d73de:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d73e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d73e6:	f43f aed8 	beq.w	d719a <__adddf3+0xe6>
   d73ea:	f04f 0203 	mov.w	r2, #3
   d73ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d73f2:	bf18      	it	ne
   d73f4:	3203      	addne	r2, #3
   d73f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d73fa:	bf18      	it	ne
   d73fc:	3203      	addne	r2, #3
   d73fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7402:	f1c2 0320 	rsb	r3, r2, #32
   d7406:	fa00 fc03 	lsl.w	ip, r0, r3
   d740a:	fa20 f002 	lsr.w	r0, r0, r2
   d740e:	fa01 fe03 	lsl.w	lr, r1, r3
   d7412:	ea40 000e 	orr.w	r0, r0, lr
   d7416:	fa21 f102 	lsr.w	r1, r1, r2
   d741a:	4414      	add	r4, r2
   d741c:	e6bd      	b.n	d719a <__adddf3+0xe6>
   d741e:	bf00      	nop

000d7420 <__aeabi_dmul>:
   d7420:	b570      	push	{r4, r5, r6, lr}
   d7422:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7426:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d742a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d742e:	bf1d      	ittte	ne
   d7430:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7434:	ea94 0f0c 	teqne	r4, ip
   d7438:	ea95 0f0c 	teqne	r5, ip
   d743c:	f000 f8de 	bleq	d75fc <__aeabi_dmul+0x1dc>
   d7440:	442c      	add	r4, r5
   d7442:	ea81 0603 	eor.w	r6, r1, r3
   d7446:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d744a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d744e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7452:	bf18      	it	ne
   d7454:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7458:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d745c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7460:	d038      	beq.n	d74d4 <__aeabi_dmul+0xb4>
   d7462:	fba0 ce02 	umull	ip, lr, r0, r2
   d7466:	f04f 0500 	mov.w	r5, #0
   d746a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d746e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7472:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7476:	f04f 0600 	mov.w	r6, #0
   d747a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d747e:	f09c 0f00 	teq	ip, #0
   d7482:	bf18      	it	ne
   d7484:	f04e 0e01 	orrne.w	lr, lr, #1
   d7488:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d748c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7490:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7494:	d204      	bcs.n	d74a0 <__aeabi_dmul+0x80>
   d7496:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d749a:	416d      	adcs	r5, r5
   d749c:	eb46 0606 	adc.w	r6, r6, r6
   d74a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d74a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d74a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d74ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d74b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d74b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d74b8:	bf88      	it	hi
   d74ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d74be:	d81e      	bhi.n	d74fe <__aeabi_dmul+0xde>
   d74c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d74c4:	bf08      	it	eq
   d74c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d74ca:	f150 0000 	adcs.w	r0, r0, #0
   d74ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d74d2:	bd70      	pop	{r4, r5, r6, pc}
   d74d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d74d8:	ea46 0101 	orr.w	r1, r6, r1
   d74dc:	ea40 0002 	orr.w	r0, r0, r2
   d74e0:	ea81 0103 	eor.w	r1, r1, r3
   d74e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d74e8:	bfc2      	ittt	gt
   d74ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   d74ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d74f2:	bd70      	popgt	{r4, r5, r6, pc}
   d74f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d74f8:	f04f 0e00 	mov.w	lr, #0
   d74fc:	3c01      	subs	r4, #1
   d74fe:	f300 80ab 	bgt.w	d7658 <__aeabi_dmul+0x238>
   d7502:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7506:	bfde      	ittt	le
   d7508:	2000      	movle	r0, #0
   d750a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d750e:	bd70      	pople	{r4, r5, r6, pc}
   d7510:	f1c4 0400 	rsb	r4, r4, #0
   d7514:	3c20      	subs	r4, #32
   d7516:	da35      	bge.n	d7584 <__aeabi_dmul+0x164>
   d7518:	340c      	adds	r4, #12
   d751a:	dc1b      	bgt.n	d7554 <__aeabi_dmul+0x134>
   d751c:	f104 0414 	add.w	r4, r4, #20
   d7520:	f1c4 0520 	rsb	r5, r4, #32
   d7524:	fa00 f305 	lsl.w	r3, r0, r5
   d7528:	fa20 f004 	lsr.w	r0, r0, r4
   d752c:	fa01 f205 	lsl.w	r2, r1, r5
   d7530:	ea40 0002 	orr.w	r0, r0, r2
   d7534:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7538:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d753c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7540:	fa21 f604 	lsr.w	r6, r1, r4
   d7544:	eb42 0106 	adc.w	r1, r2, r6
   d7548:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d754c:	bf08      	it	eq
   d754e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7552:	bd70      	pop	{r4, r5, r6, pc}
   d7554:	f1c4 040c 	rsb	r4, r4, #12
   d7558:	f1c4 0520 	rsb	r5, r4, #32
   d755c:	fa00 f304 	lsl.w	r3, r0, r4
   d7560:	fa20 f005 	lsr.w	r0, r0, r5
   d7564:	fa01 f204 	lsl.w	r2, r1, r4
   d7568:	ea40 0002 	orr.w	r0, r0, r2
   d756c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7570:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7574:	f141 0100 	adc.w	r1, r1, #0
   d7578:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d757c:	bf08      	it	eq
   d757e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7582:	bd70      	pop	{r4, r5, r6, pc}
   d7584:	f1c4 0520 	rsb	r5, r4, #32
   d7588:	fa00 f205 	lsl.w	r2, r0, r5
   d758c:	ea4e 0e02 	orr.w	lr, lr, r2
   d7590:	fa20 f304 	lsr.w	r3, r0, r4
   d7594:	fa01 f205 	lsl.w	r2, r1, r5
   d7598:	ea43 0302 	orr.w	r3, r3, r2
   d759c:	fa21 f004 	lsr.w	r0, r1, r4
   d75a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d75a4:	fa21 f204 	lsr.w	r2, r1, r4
   d75a8:	ea20 0002 	bic.w	r0, r0, r2
   d75ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d75b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d75b4:	bf08      	it	eq
   d75b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d75ba:	bd70      	pop	{r4, r5, r6, pc}
   d75bc:	f094 0f00 	teq	r4, #0
   d75c0:	d10f      	bne.n	d75e2 <__aeabi_dmul+0x1c2>
   d75c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d75c6:	0040      	lsls	r0, r0, #1
   d75c8:	eb41 0101 	adc.w	r1, r1, r1
   d75cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d75d0:	bf08      	it	eq
   d75d2:	3c01      	subeq	r4, #1
   d75d4:	d0f7      	beq.n	d75c6 <__aeabi_dmul+0x1a6>
   d75d6:	ea41 0106 	orr.w	r1, r1, r6
   d75da:	f095 0f00 	teq	r5, #0
   d75de:	bf18      	it	ne
   d75e0:	4770      	bxne	lr
   d75e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d75e6:	0052      	lsls	r2, r2, #1
   d75e8:	eb43 0303 	adc.w	r3, r3, r3
   d75ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d75f0:	bf08      	it	eq
   d75f2:	3d01      	subeq	r5, #1
   d75f4:	d0f7      	beq.n	d75e6 <__aeabi_dmul+0x1c6>
   d75f6:	ea43 0306 	orr.w	r3, r3, r6
   d75fa:	4770      	bx	lr
   d75fc:	ea94 0f0c 	teq	r4, ip
   d7600:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7604:	bf18      	it	ne
   d7606:	ea95 0f0c 	teqne	r5, ip
   d760a:	d00c      	beq.n	d7626 <__aeabi_dmul+0x206>
   d760c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7610:	bf18      	it	ne
   d7612:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7616:	d1d1      	bne.n	d75bc <__aeabi_dmul+0x19c>
   d7618:	ea81 0103 	eor.w	r1, r1, r3
   d761c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7620:	f04f 0000 	mov.w	r0, #0
   d7624:	bd70      	pop	{r4, r5, r6, pc}
   d7626:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d762a:	bf06      	itte	eq
   d762c:	4610      	moveq	r0, r2
   d762e:	4619      	moveq	r1, r3
   d7630:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7634:	d019      	beq.n	d766a <__aeabi_dmul+0x24a>
   d7636:	ea94 0f0c 	teq	r4, ip
   d763a:	d102      	bne.n	d7642 <__aeabi_dmul+0x222>
   d763c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7640:	d113      	bne.n	d766a <__aeabi_dmul+0x24a>
   d7642:	ea95 0f0c 	teq	r5, ip
   d7646:	d105      	bne.n	d7654 <__aeabi_dmul+0x234>
   d7648:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d764c:	bf1c      	itt	ne
   d764e:	4610      	movne	r0, r2
   d7650:	4619      	movne	r1, r3
   d7652:	d10a      	bne.n	d766a <__aeabi_dmul+0x24a>
   d7654:	ea81 0103 	eor.w	r1, r1, r3
   d7658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d765c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7660:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7664:	f04f 0000 	mov.w	r0, #0
   d7668:	bd70      	pop	{r4, r5, r6, pc}
   d766a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d766e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7672:	bd70      	pop	{r4, r5, r6, pc}

000d7674 <__aeabi_ddiv>:
   d7674:	b570      	push	{r4, r5, r6, lr}
   d7676:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d767a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d767e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7682:	bf1d      	ittte	ne
   d7684:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7688:	ea94 0f0c 	teqne	r4, ip
   d768c:	ea95 0f0c 	teqne	r5, ip
   d7690:	f000 f8a7 	bleq	d77e2 <__aeabi_ddiv+0x16e>
   d7694:	eba4 0405 	sub.w	r4, r4, r5
   d7698:	ea81 0e03 	eor.w	lr, r1, r3
   d769c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d76a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d76a4:	f000 8088 	beq.w	d77b8 <__aeabi_ddiv+0x144>
   d76a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d76ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d76b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d76b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d76b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d76bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d76c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d76c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d76c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d76cc:	429d      	cmp	r5, r3
   d76ce:	bf08      	it	eq
   d76d0:	4296      	cmpeq	r6, r2
   d76d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d76d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d76da:	d202      	bcs.n	d76e2 <__aeabi_ddiv+0x6e>
   d76dc:	085b      	lsrs	r3, r3, #1
   d76de:	ea4f 0232 	mov.w	r2, r2, rrx
   d76e2:	1ab6      	subs	r6, r6, r2
   d76e4:	eb65 0503 	sbc.w	r5, r5, r3
   d76e8:	085b      	lsrs	r3, r3, #1
   d76ea:	ea4f 0232 	mov.w	r2, r2, rrx
   d76ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d76f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d76f6:	ebb6 0e02 	subs.w	lr, r6, r2
   d76fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d76fe:	bf22      	ittt	cs
   d7700:	1ab6      	subcs	r6, r6, r2
   d7702:	4675      	movcs	r5, lr
   d7704:	ea40 000c 	orrcs.w	r0, r0, ip
   d7708:	085b      	lsrs	r3, r3, #1
   d770a:	ea4f 0232 	mov.w	r2, r2, rrx
   d770e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7712:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7716:	bf22      	ittt	cs
   d7718:	1ab6      	subcs	r6, r6, r2
   d771a:	4675      	movcs	r5, lr
   d771c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7720:	085b      	lsrs	r3, r3, #1
   d7722:	ea4f 0232 	mov.w	r2, r2, rrx
   d7726:	ebb6 0e02 	subs.w	lr, r6, r2
   d772a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d772e:	bf22      	ittt	cs
   d7730:	1ab6      	subcs	r6, r6, r2
   d7732:	4675      	movcs	r5, lr
   d7734:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7738:	085b      	lsrs	r3, r3, #1
   d773a:	ea4f 0232 	mov.w	r2, r2, rrx
   d773e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7742:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7746:	bf22      	ittt	cs
   d7748:	1ab6      	subcs	r6, r6, r2
   d774a:	4675      	movcs	r5, lr
   d774c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7750:	ea55 0e06 	orrs.w	lr, r5, r6
   d7754:	d018      	beq.n	d7788 <__aeabi_ddiv+0x114>
   d7756:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d775a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d775e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7762:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7766:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d776a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d776e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7772:	d1c0      	bne.n	d76f6 <__aeabi_ddiv+0x82>
   d7774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7778:	d10b      	bne.n	d7792 <__aeabi_ddiv+0x11e>
   d777a:	ea41 0100 	orr.w	r1, r1, r0
   d777e:	f04f 0000 	mov.w	r0, #0
   d7782:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7786:	e7b6      	b.n	d76f6 <__aeabi_ddiv+0x82>
   d7788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d778c:	bf04      	itt	eq
   d778e:	4301      	orreq	r1, r0
   d7790:	2000      	moveq	r0, #0
   d7792:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7796:	bf88      	it	hi
   d7798:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d779c:	f63f aeaf 	bhi.w	d74fe <__aeabi_dmul+0xde>
   d77a0:	ebb5 0c03 	subs.w	ip, r5, r3
   d77a4:	bf04      	itt	eq
   d77a6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d77aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d77ae:	f150 0000 	adcs.w	r0, r0, #0
   d77b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d77b6:	bd70      	pop	{r4, r5, r6, pc}
   d77b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d77bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d77c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d77c4:	bfc2      	ittt	gt
   d77c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d77ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d77ce:	bd70      	popgt	{r4, r5, r6, pc}
   d77d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d77d4:	f04f 0e00 	mov.w	lr, #0
   d77d8:	3c01      	subs	r4, #1
   d77da:	e690      	b.n	d74fe <__aeabi_dmul+0xde>
   d77dc:	ea45 0e06 	orr.w	lr, r5, r6
   d77e0:	e68d      	b.n	d74fe <__aeabi_dmul+0xde>
   d77e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d77e6:	ea94 0f0c 	teq	r4, ip
   d77ea:	bf08      	it	eq
   d77ec:	ea95 0f0c 	teqeq	r5, ip
   d77f0:	f43f af3b 	beq.w	d766a <__aeabi_dmul+0x24a>
   d77f4:	ea94 0f0c 	teq	r4, ip
   d77f8:	d10a      	bne.n	d7810 <__aeabi_ddiv+0x19c>
   d77fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d77fe:	f47f af34 	bne.w	d766a <__aeabi_dmul+0x24a>
   d7802:	ea95 0f0c 	teq	r5, ip
   d7806:	f47f af25 	bne.w	d7654 <__aeabi_dmul+0x234>
   d780a:	4610      	mov	r0, r2
   d780c:	4619      	mov	r1, r3
   d780e:	e72c      	b.n	d766a <__aeabi_dmul+0x24a>
   d7810:	ea95 0f0c 	teq	r5, ip
   d7814:	d106      	bne.n	d7824 <__aeabi_ddiv+0x1b0>
   d7816:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d781a:	f43f aefd 	beq.w	d7618 <__aeabi_dmul+0x1f8>
   d781e:	4610      	mov	r0, r2
   d7820:	4619      	mov	r1, r3
   d7822:	e722      	b.n	d766a <__aeabi_dmul+0x24a>
   d7824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7828:	bf18      	it	ne
   d782a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d782e:	f47f aec5 	bne.w	d75bc <__aeabi_dmul+0x19c>
   d7832:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7836:	f47f af0d 	bne.w	d7654 <__aeabi_dmul+0x234>
   d783a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d783e:	f47f aeeb 	bne.w	d7618 <__aeabi_dmul+0x1f8>
   d7842:	e712      	b.n	d766a <__aeabi_dmul+0x24a>

000d7844 <__gedf2>:
   d7844:	f04f 3cff 	mov.w	ip, #4294967295
   d7848:	e006      	b.n	d7858 <__cmpdf2+0x4>
   d784a:	bf00      	nop

000d784c <__ledf2>:
   d784c:	f04f 0c01 	mov.w	ip, #1
   d7850:	e002      	b.n	d7858 <__cmpdf2+0x4>
   d7852:	bf00      	nop

000d7854 <__cmpdf2>:
   d7854:	f04f 0c01 	mov.w	ip, #1
   d7858:	f84d cd04 	str.w	ip, [sp, #-4]!
   d785c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7860:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7864:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7868:	bf18      	it	ne
   d786a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d786e:	d01b      	beq.n	d78a8 <__cmpdf2+0x54>
   d7870:	b001      	add	sp, #4
   d7872:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7876:	bf0c      	ite	eq
   d7878:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d787c:	ea91 0f03 	teqne	r1, r3
   d7880:	bf02      	ittt	eq
   d7882:	ea90 0f02 	teqeq	r0, r2
   d7886:	2000      	moveq	r0, #0
   d7888:	4770      	bxeq	lr
   d788a:	f110 0f00 	cmn.w	r0, #0
   d788e:	ea91 0f03 	teq	r1, r3
   d7892:	bf58      	it	pl
   d7894:	4299      	cmppl	r1, r3
   d7896:	bf08      	it	eq
   d7898:	4290      	cmpeq	r0, r2
   d789a:	bf2c      	ite	cs
   d789c:	17d8      	asrcs	r0, r3, #31
   d789e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d78a2:	f040 0001 	orr.w	r0, r0, #1
   d78a6:	4770      	bx	lr
   d78a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d78ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d78b0:	d102      	bne.n	d78b8 <__cmpdf2+0x64>
   d78b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d78b6:	d107      	bne.n	d78c8 <__cmpdf2+0x74>
   d78b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d78bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d78c0:	d1d6      	bne.n	d7870 <__cmpdf2+0x1c>
   d78c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d78c6:	d0d3      	beq.n	d7870 <__cmpdf2+0x1c>
   d78c8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d78cc:	4770      	bx	lr
   d78ce:	bf00      	nop

000d78d0 <__aeabi_cdrcmple>:
   d78d0:	4684      	mov	ip, r0
   d78d2:	4610      	mov	r0, r2
   d78d4:	4662      	mov	r2, ip
   d78d6:	468c      	mov	ip, r1
   d78d8:	4619      	mov	r1, r3
   d78da:	4663      	mov	r3, ip
   d78dc:	e000      	b.n	d78e0 <__aeabi_cdcmpeq>
   d78de:	bf00      	nop

000d78e0 <__aeabi_cdcmpeq>:
   d78e0:	b501      	push	{r0, lr}
   d78e2:	f7ff ffb7 	bl	d7854 <__cmpdf2>
   d78e6:	2800      	cmp	r0, #0
   d78e8:	bf48      	it	mi
   d78ea:	f110 0f00 	cmnmi.w	r0, #0
   d78ee:	bd01      	pop	{r0, pc}

000d78f0 <__aeabi_dcmpeq>:
   d78f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d78f4:	f7ff fff4 	bl	d78e0 <__aeabi_cdcmpeq>
   d78f8:	bf0c      	ite	eq
   d78fa:	2001      	moveq	r0, #1
   d78fc:	2000      	movne	r0, #0
   d78fe:	f85d fb08 	ldr.w	pc, [sp], #8
   d7902:	bf00      	nop

000d7904 <__aeabi_dcmplt>:
   d7904:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7908:	f7ff ffea 	bl	d78e0 <__aeabi_cdcmpeq>
   d790c:	bf34      	ite	cc
   d790e:	2001      	movcc	r0, #1
   d7910:	2000      	movcs	r0, #0
   d7912:	f85d fb08 	ldr.w	pc, [sp], #8
   d7916:	bf00      	nop

000d7918 <__aeabi_dcmple>:
   d7918:	f84d ed08 	str.w	lr, [sp, #-8]!
   d791c:	f7ff ffe0 	bl	d78e0 <__aeabi_cdcmpeq>
   d7920:	bf94      	ite	ls
   d7922:	2001      	movls	r0, #1
   d7924:	2000      	movhi	r0, #0
   d7926:	f85d fb08 	ldr.w	pc, [sp], #8
   d792a:	bf00      	nop

000d792c <__aeabi_dcmpge>:
   d792c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7930:	f7ff ffce 	bl	d78d0 <__aeabi_cdrcmple>
   d7934:	bf94      	ite	ls
   d7936:	2001      	movls	r0, #1
   d7938:	2000      	movhi	r0, #0
   d793a:	f85d fb08 	ldr.w	pc, [sp], #8
   d793e:	bf00      	nop

000d7940 <__aeabi_dcmpgt>:
   d7940:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7944:	f7ff ffc4 	bl	d78d0 <__aeabi_cdrcmple>
   d7948:	bf34      	ite	cc
   d794a:	2001      	movcc	r0, #1
   d794c:	2000      	movcs	r0, #0
   d794e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7952:	bf00      	nop

000d7954 <__aeabi_d2uiz>:
   d7954:	004a      	lsls	r2, r1, #1
   d7956:	d211      	bcs.n	d797c <__aeabi_d2uiz+0x28>
   d7958:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d795c:	d211      	bcs.n	d7982 <__aeabi_d2uiz+0x2e>
   d795e:	d50d      	bpl.n	d797c <__aeabi_d2uiz+0x28>
   d7960:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7964:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7968:	d40e      	bmi.n	d7988 <__aeabi_d2uiz+0x34>
   d796a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d796e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7972:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7976:	fa23 f002 	lsr.w	r0, r3, r2
   d797a:	4770      	bx	lr
   d797c:	f04f 0000 	mov.w	r0, #0
   d7980:	4770      	bx	lr
   d7982:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7986:	d102      	bne.n	d798e <__aeabi_d2uiz+0x3a>
   d7988:	f04f 30ff 	mov.w	r0, #4294967295
   d798c:	4770      	bx	lr
   d798e:	f04f 0000 	mov.w	r0, #0
   d7992:	4770      	bx	lr

000d7994 <__aeabi_uldivmod>:
   d7994:	b953      	cbnz	r3, d79ac <__aeabi_uldivmod+0x18>
   d7996:	b94a      	cbnz	r2, d79ac <__aeabi_uldivmod+0x18>
   d7998:	2900      	cmp	r1, #0
   d799a:	bf08      	it	eq
   d799c:	2800      	cmpeq	r0, #0
   d799e:	bf1c      	itt	ne
   d79a0:	f04f 31ff 	movne.w	r1, #4294967295
   d79a4:	f04f 30ff 	movne.w	r0, #4294967295
   d79a8:	f000 b98c 	b.w	d7cc4 <__aeabi_idiv0>
   d79ac:	f1ad 0c08 	sub.w	ip, sp, #8
   d79b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d79b4:	f000 f824 	bl	d7a00 <__udivmoddi4>
   d79b8:	f8dd e004 	ldr.w	lr, [sp, #4]
   d79bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d79c0:	b004      	add	sp, #16
   d79c2:	4770      	bx	lr

000d79c4 <__aeabi_d2ulz>:
   d79c4:	b5d0      	push	{r4, r6, r7, lr}
   d79c6:	4b0c      	ldr	r3, [pc, #48]	; (d79f8 <__aeabi_d2ulz+0x34>)
   d79c8:	2200      	movs	r2, #0
   d79ca:	4606      	mov	r6, r0
   d79cc:	460f      	mov	r7, r1
   d79ce:	f7ff fd27 	bl	d7420 <__aeabi_dmul>
   d79d2:	f7ff ffbf 	bl	d7954 <__aeabi_d2uiz>
   d79d6:	4604      	mov	r4, r0
   d79d8:	f7ff fca8 	bl	d732c <__aeabi_ui2d>
   d79dc:	4b07      	ldr	r3, [pc, #28]	; (d79fc <__aeabi_d2ulz+0x38>)
   d79de:	2200      	movs	r2, #0
   d79e0:	f7ff fd1e 	bl	d7420 <__aeabi_dmul>
   d79e4:	4602      	mov	r2, r0
   d79e6:	460b      	mov	r3, r1
   d79e8:	4630      	mov	r0, r6
   d79ea:	4639      	mov	r1, r7
   d79ec:	f7ff fb60 	bl	d70b0 <__aeabi_dsub>
   d79f0:	f7ff ffb0 	bl	d7954 <__aeabi_d2uiz>
   d79f4:	4621      	mov	r1, r4
   d79f6:	bdd0      	pop	{r4, r6, r7, pc}
   d79f8:	3df00000 	.word	0x3df00000
   d79fc:	41f00000 	.word	0x41f00000

000d7a00 <__udivmoddi4>:
   d7a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7a04:	9d08      	ldr	r5, [sp, #32]
   d7a06:	4604      	mov	r4, r0
   d7a08:	468c      	mov	ip, r1
   d7a0a:	2b00      	cmp	r3, #0
   d7a0c:	f040 8083 	bne.w	d7b16 <__udivmoddi4+0x116>
   d7a10:	428a      	cmp	r2, r1
   d7a12:	4617      	mov	r7, r2
   d7a14:	d947      	bls.n	d7aa6 <__udivmoddi4+0xa6>
   d7a16:	fab2 f282 	clz	r2, r2
   d7a1a:	b142      	cbz	r2, d7a2e <__udivmoddi4+0x2e>
   d7a1c:	f1c2 0020 	rsb	r0, r2, #32
   d7a20:	fa24 f000 	lsr.w	r0, r4, r0
   d7a24:	4091      	lsls	r1, r2
   d7a26:	4097      	lsls	r7, r2
   d7a28:	ea40 0c01 	orr.w	ip, r0, r1
   d7a2c:	4094      	lsls	r4, r2
   d7a2e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d7a32:	0c23      	lsrs	r3, r4, #16
   d7a34:	fbbc f6f8 	udiv	r6, ip, r8
   d7a38:	fa1f fe87 	uxth.w	lr, r7
   d7a3c:	fb08 c116 	mls	r1, r8, r6, ip
   d7a40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d7a44:	fb06 f10e 	mul.w	r1, r6, lr
   d7a48:	4299      	cmp	r1, r3
   d7a4a:	d909      	bls.n	d7a60 <__udivmoddi4+0x60>
   d7a4c:	18fb      	adds	r3, r7, r3
   d7a4e:	f106 30ff 	add.w	r0, r6, #4294967295
   d7a52:	f080 8119 	bcs.w	d7c88 <__udivmoddi4+0x288>
   d7a56:	4299      	cmp	r1, r3
   d7a58:	f240 8116 	bls.w	d7c88 <__udivmoddi4+0x288>
   d7a5c:	3e02      	subs	r6, #2
   d7a5e:	443b      	add	r3, r7
   d7a60:	1a5b      	subs	r3, r3, r1
   d7a62:	b2a4      	uxth	r4, r4
   d7a64:	fbb3 f0f8 	udiv	r0, r3, r8
   d7a68:	fb08 3310 	mls	r3, r8, r0, r3
   d7a6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d7a70:	fb00 fe0e 	mul.w	lr, r0, lr
   d7a74:	45a6      	cmp	lr, r4
   d7a76:	d909      	bls.n	d7a8c <__udivmoddi4+0x8c>
   d7a78:	193c      	adds	r4, r7, r4
   d7a7a:	f100 33ff 	add.w	r3, r0, #4294967295
   d7a7e:	f080 8105 	bcs.w	d7c8c <__udivmoddi4+0x28c>
   d7a82:	45a6      	cmp	lr, r4
   d7a84:	f240 8102 	bls.w	d7c8c <__udivmoddi4+0x28c>
   d7a88:	3802      	subs	r0, #2
   d7a8a:	443c      	add	r4, r7
   d7a8c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d7a90:	eba4 040e 	sub.w	r4, r4, lr
   d7a94:	2600      	movs	r6, #0
   d7a96:	b11d      	cbz	r5, d7aa0 <__udivmoddi4+0xa0>
   d7a98:	40d4      	lsrs	r4, r2
   d7a9a:	2300      	movs	r3, #0
   d7a9c:	e9c5 4300 	strd	r4, r3, [r5]
   d7aa0:	4631      	mov	r1, r6
   d7aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7aa6:	b902      	cbnz	r2, d7aaa <__udivmoddi4+0xaa>
   d7aa8:	deff      	udf	#255	; 0xff
   d7aaa:	fab2 f282 	clz	r2, r2
   d7aae:	2a00      	cmp	r2, #0
   d7ab0:	d150      	bne.n	d7b54 <__udivmoddi4+0x154>
   d7ab2:	1bcb      	subs	r3, r1, r7
   d7ab4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d7ab8:	fa1f f887 	uxth.w	r8, r7
   d7abc:	2601      	movs	r6, #1
   d7abe:	fbb3 fcfe 	udiv	ip, r3, lr
   d7ac2:	0c21      	lsrs	r1, r4, #16
   d7ac4:	fb0e 331c 	mls	r3, lr, ip, r3
   d7ac8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d7acc:	fb08 f30c 	mul.w	r3, r8, ip
   d7ad0:	428b      	cmp	r3, r1
   d7ad2:	d907      	bls.n	d7ae4 <__udivmoddi4+0xe4>
   d7ad4:	1879      	adds	r1, r7, r1
   d7ad6:	f10c 30ff 	add.w	r0, ip, #4294967295
   d7ada:	d202      	bcs.n	d7ae2 <__udivmoddi4+0xe2>
   d7adc:	428b      	cmp	r3, r1
   d7ade:	f200 80e9 	bhi.w	d7cb4 <__udivmoddi4+0x2b4>
   d7ae2:	4684      	mov	ip, r0
   d7ae4:	1ac9      	subs	r1, r1, r3
   d7ae6:	b2a3      	uxth	r3, r4
   d7ae8:	fbb1 f0fe 	udiv	r0, r1, lr
   d7aec:	fb0e 1110 	mls	r1, lr, r0, r1
   d7af0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d7af4:	fb08 f800 	mul.w	r8, r8, r0
   d7af8:	45a0      	cmp	r8, r4
   d7afa:	d907      	bls.n	d7b0c <__udivmoddi4+0x10c>
   d7afc:	193c      	adds	r4, r7, r4
   d7afe:	f100 33ff 	add.w	r3, r0, #4294967295
   d7b02:	d202      	bcs.n	d7b0a <__udivmoddi4+0x10a>
   d7b04:	45a0      	cmp	r8, r4
   d7b06:	f200 80d9 	bhi.w	d7cbc <__udivmoddi4+0x2bc>
   d7b0a:	4618      	mov	r0, r3
   d7b0c:	eba4 0408 	sub.w	r4, r4, r8
   d7b10:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d7b14:	e7bf      	b.n	d7a96 <__udivmoddi4+0x96>
   d7b16:	428b      	cmp	r3, r1
   d7b18:	d909      	bls.n	d7b2e <__udivmoddi4+0x12e>
   d7b1a:	2d00      	cmp	r5, #0
   d7b1c:	f000 80b1 	beq.w	d7c82 <__udivmoddi4+0x282>
   d7b20:	2600      	movs	r6, #0
   d7b22:	e9c5 0100 	strd	r0, r1, [r5]
   d7b26:	4630      	mov	r0, r6
   d7b28:	4631      	mov	r1, r6
   d7b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7b2e:	fab3 f683 	clz	r6, r3
   d7b32:	2e00      	cmp	r6, #0
   d7b34:	d14a      	bne.n	d7bcc <__udivmoddi4+0x1cc>
   d7b36:	428b      	cmp	r3, r1
   d7b38:	d302      	bcc.n	d7b40 <__udivmoddi4+0x140>
   d7b3a:	4282      	cmp	r2, r0
   d7b3c:	f200 80b8 	bhi.w	d7cb0 <__udivmoddi4+0x2b0>
   d7b40:	1a84      	subs	r4, r0, r2
   d7b42:	eb61 0103 	sbc.w	r1, r1, r3
   d7b46:	2001      	movs	r0, #1
   d7b48:	468c      	mov	ip, r1
   d7b4a:	2d00      	cmp	r5, #0
   d7b4c:	d0a8      	beq.n	d7aa0 <__udivmoddi4+0xa0>
   d7b4e:	e9c5 4c00 	strd	r4, ip, [r5]
   d7b52:	e7a5      	b.n	d7aa0 <__udivmoddi4+0xa0>
   d7b54:	f1c2 0320 	rsb	r3, r2, #32
   d7b58:	fa20 f603 	lsr.w	r6, r0, r3
   d7b5c:	4097      	lsls	r7, r2
   d7b5e:	fa01 f002 	lsl.w	r0, r1, r2
   d7b62:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d7b66:	40d9      	lsrs	r1, r3
   d7b68:	4330      	orrs	r0, r6
   d7b6a:	0c03      	lsrs	r3, r0, #16
   d7b6c:	fbb1 f6fe 	udiv	r6, r1, lr
   d7b70:	fa1f f887 	uxth.w	r8, r7
   d7b74:	fb0e 1116 	mls	r1, lr, r6, r1
   d7b78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d7b7c:	fb06 f108 	mul.w	r1, r6, r8
   d7b80:	4299      	cmp	r1, r3
   d7b82:	fa04 f402 	lsl.w	r4, r4, r2
   d7b86:	d909      	bls.n	d7b9c <__udivmoddi4+0x19c>
   d7b88:	18fb      	adds	r3, r7, r3
   d7b8a:	f106 3cff 	add.w	ip, r6, #4294967295
   d7b8e:	f080 808d 	bcs.w	d7cac <__udivmoddi4+0x2ac>
   d7b92:	4299      	cmp	r1, r3
   d7b94:	f240 808a 	bls.w	d7cac <__udivmoddi4+0x2ac>
   d7b98:	3e02      	subs	r6, #2
   d7b9a:	443b      	add	r3, r7
   d7b9c:	1a5b      	subs	r3, r3, r1
   d7b9e:	b281      	uxth	r1, r0
   d7ba0:	fbb3 f0fe 	udiv	r0, r3, lr
   d7ba4:	fb0e 3310 	mls	r3, lr, r0, r3
   d7ba8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d7bac:	fb00 f308 	mul.w	r3, r0, r8
   d7bb0:	428b      	cmp	r3, r1
   d7bb2:	d907      	bls.n	d7bc4 <__udivmoddi4+0x1c4>
   d7bb4:	1879      	adds	r1, r7, r1
   d7bb6:	f100 3cff 	add.w	ip, r0, #4294967295
   d7bba:	d273      	bcs.n	d7ca4 <__udivmoddi4+0x2a4>
   d7bbc:	428b      	cmp	r3, r1
   d7bbe:	d971      	bls.n	d7ca4 <__udivmoddi4+0x2a4>
   d7bc0:	3802      	subs	r0, #2
   d7bc2:	4439      	add	r1, r7
   d7bc4:	1acb      	subs	r3, r1, r3
   d7bc6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d7bca:	e778      	b.n	d7abe <__udivmoddi4+0xbe>
   d7bcc:	f1c6 0c20 	rsb	ip, r6, #32
   d7bd0:	fa03 f406 	lsl.w	r4, r3, r6
   d7bd4:	fa22 f30c 	lsr.w	r3, r2, ip
   d7bd8:	431c      	orrs	r4, r3
   d7bda:	fa20 f70c 	lsr.w	r7, r0, ip
   d7bde:	fa01 f306 	lsl.w	r3, r1, r6
   d7be2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d7be6:	fa21 f10c 	lsr.w	r1, r1, ip
   d7bea:	431f      	orrs	r7, r3
   d7bec:	0c3b      	lsrs	r3, r7, #16
   d7bee:	fbb1 f9fe 	udiv	r9, r1, lr
   d7bf2:	fa1f f884 	uxth.w	r8, r4
   d7bf6:	fb0e 1119 	mls	r1, lr, r9, r1
   d7bfa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d7bfe:	fb09 fa08 	mul.w	sl, r9, r8
   d7c02:	458a      	cmp	sl, r1
   d7c04:	fa02 f206 	lsl.w	r2, r2, r6
   d7c08:	fa00 f306 	lsl.w	r3, r0, r6
   d7c0c:	d908      	bls.n	d7c20 <__udivmoddi4+0x220>
   d7c0e:	1861      	adds	r1, r4, r1
   d7c10:	f109 30ff 	add.w	r0, r9, #4294967295
   d7c14:	d248      	bcs.n	d7ca8 <__udivmoddi4+0x2a8>
   d7c16:	458a      	cmp	sl, r1
   d7c18:	d946      	bls.n	d7ca8 <__udivmoddi4+0x2a8>
   d7c1a:	f1a9 0902 	sub.w	r9, r9, #2
   d7c1e:	4421      	add	r1, r4
   d7c20:	eba1 010a 	sub.w	r1, r1, sl
   d7c24:	b2bf      	uxth	r7, r7
   d7c26:	fbb1 f0fe 	udiv	r0, r1, lr
   d7c2a:	fb0e 1110 	mls	r1, lr, r0, r1
   d7c2e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d7c32:	fb00 f808 	mul.w	r8, r0, r8
   d7c36:	45b8      	cmp	r8, r7
   d7c38:	d907      	bls.n	d7c4a <__udivmoddi4+0x24a>
   d7c3a:	19e7      	adds	r7, r4, r7
   d7c3c:	f100 31ff 	add.w	r1, r0, #4294967295
   d7c40:	d22e      	bcs.n	d7ca0 <__udivmoddi4+0x2a0>
   d7c42:	45b8      	cmp	r8, r7
   d7c44:	d92c      	bls.n	d7ca0 <__udivmoddi4+0x2a0>
   d7c46:	3802      	subs	r0, #2
   d7c48:	4427      	add	r7, r4
   d7c4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d7c4e:	eba7 0708 	sub.w	r7, r7, r8
   d7c52:	fba0 8902 	umull	r8, r9, r0, r2
   d7c56:	454f      	cmp	r7, r9
   d7c58:	46c6      	mov	lr, r8
   d7c5a:	4649      	mov	r1, r9
   d7c5c:	d31a      	bcc.n	d7c94 <__udivmoddi4+0x294>
   d7c5e:	d017      	beq.n	d7c90 <__udivmoddi4+0x290>
   d7c60:	b15d      	cbz	r5, d7c7a <__udivmoddi4+0x27a>
   d7c62:	ebb3 020e 	subs.w	r2, r3, lr
   d7c66:	eb67 0701 	sbc.w	r7, r7, r1
   d7c6a:	fa07 fc0c 	lsl.w	ip, r7, ip
   d7c6e:	40f2      	lsrs	r2, r6
   d7c70:	ea4c 0202 	orr.w	r2, ip, r2
   d7c74:	40f7      	lsrs	r7, r6
   d7c76:	e9c5 2700 	strd	r2, r7, [r5]
   d7c7a:	2600      	movs	r6, #0
   d7c7c:	4631      	mov	r1, r6
   d7c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7c82:	462e      	mov	r6, r5
   d7c84:	4628      	mov	r0, r5
   d7c86:	e70b      	b.n	d7aa0 <__udivmoddi4+0xa0>
   d7c88:	4606      	mov	r6, r0
   d7c8a:	e6e9      	b.n	d7a60 <__udivmoddi4+0x60>
   d7c8c:	4618      	mov	r0, r3
   d7c8e:	e6fd      	b.n	d7a8c <__udivmoddi4+0x8c>
   d7c90:	4543      	cmp	r3, r8
   d7c92:	d2e5      	bcs.n	d7c60 <__udivmoddi4+0x260>
   d7c94:	ebb8 0e02 	subs.w	lr, r8, r2
   d7c98:	eb69 0104 	sbc.w	r1, r9, r4
   d7c9c:	3801      	subs	r0, #1
   d7c9e:	e7df      	b.n	d7c60 <__udivmoddi4+0x260>
   d7ca0:	4608      	mov	r0, r1
   d7ca2:	e7d2      	b.n	d7c4a <__udivmoddi4+0x24a>
   d7ca4:	4660      	mov	r0, ip
   d7ca6:	e78d      	b.n	d7bc4 <__udivmoddi4+0x1c4>
   d7ca8:	4681      	mov	r9, r0
   d7caa:	e7b9      	b.n	d7c20 <__udivmoddi4+0x220>
   d7cac:	4666      	mov	r6, ip
   d7cae:	e775      	b.n	d7b9c <__udivmoddi4+0x19c>
   d7cb0:	4630      	mov	r0, r6
   d7cb2:	e74a      	b.n	d7b4a <__udivmoddi4+0x14a>
   d7cb4:	f1ac 0c02 	sub.w	ip, ip, #2
   d7cb8:	4439      	add	r1, r7
   d7cba:	e713      	b.n	d7ae4 <__udivmoddi4+0xe4>
   d7cbc:	3802      	subs	r0, #2
   d7cbe:	443c      	add	r4, r7
   d7cc0:	e724      	b.n	d7b0c <__udivmoddi4+0x10c>
   d7cc2:	bf00      	nop

000d7cc4 <__aeabi_idiv0>:
   d7cc4:	4770      	bx	lr
   d7cc6:	bf00      	nop

000d7cc8 <__cxa_atexit>:
   d7cc8:	b510      	push	{r4, lr}
   d7cca:	4c05      	ldr	r4, [pc, #20]	; (d7ce0 <__cxa_atexit+0x18>)
   d7ccc:	4613      	mov	r3, r2
   d7cce:	b12c      	cbz	r4, d7cdc <__cxa_atexit+0x14>
   d7cd0:	460a      	mov	r2, r1
   d7cd2:	4601      	mov	r1, r0
   d7cd4:	2002      	movs	r0, #2
   d7cd6:	f3af 8000 	nop.w
   d7cda:	bd10      	pop	{r4, pc}
   d7cdc:	4620      	mov	r0, r4
   d7cde:	e7fc      	b.n	d7cda <__cxa_atexit+0x12>
   d7ce0:	00000000 	.word	0x00000000

000d7ce4 <memcpy>:
   d7ce4:	440a      	add	r2, r1
   d7ce6:	4291      	cmp	r1, r2
   d7ce8:	f100 33ff 	add.w	r3, r0, #4294967295
   d7cec:	d100      	bne.n	d7cf0 <memcpy+0xc>
   d7cee:	4770      	bx	lr
   d7cf0:	b510      	push	{r4, lr}
   d7cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7cf6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7cfa:	4291      	cmp	r1, r2
   d7cfc:	d1f9      	bne.n	d7cf2 <memcpy+0xe>
   d7cfe:	bd10      	pop	{r4, pc}

000d7d00 <memset>:
   d7d00:	4402      	add	r2, r0
   d7d02:	4603      	mov	r3, r0
   d7d04:	4293      	cmp	r3, r2
   d7d06:	d100      	bne.n	d7d0a <memset+0xa>
   d7d08:	4770      	bx	lr
   d7d0a:	f803 1b01 	strb.w	r1, [r3], #1
   d7d0e:	e7f9      	b.n	d7d04 <memset+0x4>

000d7d10 <srand>:
   d7d10:	b538      	push	{r3, r4, r5, lr}
   d7d12:	4b0d      	ldr	r3, [pc, #52]	; (d7d48 <srand+0x38>)
   d7d14:	681d      	ldr	r5, [r3, #0]
   d7d16:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7d18:	4604      	mov	r4, r0
   d7d1a:	b97b      	cbnz	r3, d7d3c <srand+0x2c>
   d7d1c:	2018      	movs	r0, #24
   d7d1e:	f7fd fd99 	bl	d5854 <malloc>
   d7d22:	4a0a      	ldr	r2, [pc, #40]	; (d7d4c <srand+0x3c>)
   d7d24:	4b0a      	ldr	r3, [pc, #40]	; (d7d50 <srand+0x40>)
   d7d26:	63a8      	str	r0, [r5, #56]	; 0x38
   d7d28:	e9c0 2300 	strd	r2, r3, [r0]
   d7d2c:	4b09      	ldr	r3, [pc, #36]	; (d7d54 <srand+0x44>)
   d7d2e:	6083      	str	r3, [r0, #8]
   d7d30:	230b      	movs	r3, #11
   d7d32:	8183      	strh	r3, [r0, #12]
   d7d34:	2201      	movs	r2, #1
   d7d36:	2300      	movs	r3, #0
   d7d38:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7d3c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7d3e:	2200      	movs	r2, #0
   d7d40:	611c      	str	r4, [r3, #16]
   d7d42:	615a      	str	r2, [r3, #20]
   d7d44:	bd38      	pop	{r3, r4, r5, pc}
   d7d46:	bf00      	nop
   d7d48:	2003e074 	.word	0x2003e074
   d7d4c:	abcd330e 	.word	0xabcd330e
   d7d50:	e66d1234 	.word	0xe66d1234
   d7d54:	0005deec 	.word	0x0005deec

000d7d58 <strcmp>:
   d7d58:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7d60:	2a01      	cmp	r2, #1
   d7d62:	bf28      	it	cs
   d7d64:	429a      	cmpcs	r2, r3
   d7d66:	d0f7      	beq.n	d7d58 <strcmp>
   d7d68:	1ad0      	subs	r0, r2, r3
   d7d6a:	4770      	bx	lr

000d7d6c <strcpy>:
   d7d6c:	4603      	mov	r3, r0
   d7d6e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7d72:	f803 2b01 	strb.w	r2, [r3], #1
   d7d76:	2a00      	cmp	r2, #0
   d7d78:	d1f9      	bne.n	d7d6e <strcpy+0x2>
   d7d7a:	4770      	bx	lr

000d7d7c <strlen>:
   d7d7c:	4603      	mov	r3, r0
   d7d7e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7d82:	2a00      	cmp	r2, #0
   d7d84:	d1fb      	bne.n	d7d7e <strlen+0x2>
   d7d86:	1a18      	subs	r0, r3, r0
   d7d88:	3801      	subs	r0, #1
   d7d8a:	4770      	bx	lr

000d7d8c <strncpy>:
   d7d8c:	b510      	push	{r4, lr}
   d7d8e:	3901      	subs	r1, #1
   d7d90:	4603      	mov	r3, r0
   d7d92:	b132      	cbz	r2, d7da2 <strncpy+0x16>
   d7d94:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7d98:	f803 4b01 	strb.w	r4, [r3], #1
   d7d9c:	3a01      	subs	r2, #1
   d7d9e:	2c00      	cmp	r4, #0
   d7da0:	d1f7      	bne.n	d7d92 <strncpy+0x6>
   d7da2:	441a      	add	r2, r3
   d7da4:	2100      	movs	r1, #0
   d7da6:	4293      	cmp	r3, r2
   d7da8:	d100      	bne.n	d7dac <strncpy+0x20>
   d7daa:	bd10      	pop	{r4, pc}
   d7dac:	f803 1b01 	strb.w	r1, [r3], #1
   d7db0:	e7f9      	b.n	d7da6 <strncpy+0x1a>

000d7db2 <link_code_end>:
	...

000d7db4 <dynalib_user>:
   d7db4:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d7dc4:	0000 0000 6f6d 6974 6e6f 6c61 7379 7369     ....motionalysis
   d7dd4:	002f 782f 2f00 0079 7a2f 6c00 6261 742e     /./x./y./z.lab.t
   d7de4:	6568 6377 2e6c 6f63 006d 0400 514d 5454     hewcl.com...MQTT
   d7df4:	0004 4d06 4951 6473 0370 494c 3353 4844     ...MQIsdp.LIS3DH
   d7e04:	0000 0000                                   ....

000d7e08 <_ZTV15Adafruit_LIS3DH>:
	...
   d7e10:	40b9 000d 43ed 000d 4df1 000d 5325 000d     .@...C...M..%S..
   d7e20:	4df5 000d                                   .M..

000d7e24 <_ZTVN5spark13EthernetClassE>:
	...
   d7e2c:	5903 000d 58f9 000d 58ef 000d 58e5 000d     .Y...X...X...X..
   d7e3c:	58d9 000d 58cd 000d 6bc9 000d 6bd1 000d     .X...X...k...k..
   d7e4c:	58c1 000d 58b9 000d 58af 000d 58a5 000d     .X...X...X...X..
   d7e5c:	6c01 000d                                   .l..

000d7e60 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7e60:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   d7e70:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   d7e80:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   d7e90:	6c61 6469 002e 0000                         alid....

000d7e98 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d7ea0:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   d7eb0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d7ec0 <_ZTV9IPAddress>:
	...
   d7ec8:	6149 000d 6139 000d 613b 000d               Ia..9a..;a..

000d7ed4 <_ZTV9USBSerial>:
	...
   d7edc:	6255 000d 62bd 000d 6293 000d 5f21 000d     Ub...b...b..!_..
   d7eec:	6285 000d 6257 000d 6267 000d 62b7 000d     .b..Wb..gb...b..
   d7efc:	6277 000d 6251 000d                         wb..Qb..

000d7f04 <_ZTV11USARTSerial>:
	...
   d7f0c:	6361 000d 63cd 000d 63a5 000d 5f21 000d     ac...c...c..!_..
   d7f1c:	6375 000d 6391 000d 6383 000d 639f 000d     uc...c...c...c..
   d7f2c:	6363 000d 6367 000d                         cc..gc..

000d7f34 <_ZTV7TwoWire>:
	...
   d7f3c:	645d 000d 64a7 000d 647f 000d 645f 000d     ]d...d...d.._d..
   d7f4c:	6487 000d 648f 000d 6497 000d 649f 000d     .d...d...d...d..
   d7f5c:	6572 7663 6520 7272 726f 3d20 2520 0064     recv error = %d.

000d7f6c <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7f74:	65db 000d 65fd 000d 6a17 000d 660b 000d     .e...e...j...f..
   d7f84:	65dd 000d                                   .e..

000d7f88 <_ZTV9TCPClient>:
	...
   d7f90:	6689 000d 66bd 000d 6559 000d 6573 000d     .f...f..Ye..se..
   d7fa0:	68ad 000d 671f 000d 66f1 000d 659d 000d     .h...g...f...e..
   d7fb0:	67b7 000d 6a1d 000d 6753 000d 6961 000d     .g...j..Sg..ai..
   d7fc0:	659f 000d 65d1 000d 6585 000d 660f 000d     .e...e...e...f..
   d7fd0:	66d1 000d                                   .f..

000d7fd4 <_ZTVN5spark9WiFiClassE>:
	...
   d7fdc:	6b6b 000d 6b61 000d 6b57 000d 6b19 000d     kk..ak..Wk...k..
   d7fec:	5fb3 000d 6b4b 000d 6bc9 000d 6bd1 000d     ._..Kk...k...k..
   d7ffc:	6b3f 000d 6b37 000d 6b2d 000d 6b23 000d     ?k..7k..-k..#k..
   d800c:	6c01 000d                                   .l..

000d8010 <_ZTVN5spark12NetworkClassE>:
	...
   d8018:	6b89 000d 6b93 000d 6b9d 000d 6ba7 000d     .k...k...k...k..
   d8028:	6bb1 000d 6bbd 000d 6bc9 000d 6bd1 000d     .k...k...k...k..
   d8038:	6bd9 000d 6be5 000d 6bed 000d 6bf7 000d     .k...k...k...k..
   d8048:	6c01 000d                                   .l..

000d804c <_ZSt7nothrow>:
	...

000d804d <_ZTSSt19_Sp_make_shared_tag>:
   d804d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d805d:	6572 5f64 6174 0067 0000                     red_tag....

000d8068 <_ZTISt19_Sp_make_shared_tag>:
   d8068:	80a8 000d 804d 000d                         ....M...

000d8070 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d8070:	8108 000d 807c 000d 812c 000d               ....|...,...

000d807c <_ZTSN10__cxxabiv117__class_type_infoE>:
   d807c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d808c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d809c:	0045 0000                                   E...

000d80a0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d80a0:	0000 0000 8070 000d 6ed1 000d 6ee5 000d     ....p....n...n..
   d80b0:	7079 000d 7079 000d 6f4f 000d 6e91 000d     yp..yp..Oo...n..
   d80c0:	6f37 000d 6ef9 000d 6ec5 000d               7o...n...n..

000d80cc <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d80cc:	8108 000d 80d8 000d 8070 000d               ........p...

000d80d8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d80d8:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d80e8:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d80f8:	666e 456f 0000 0000                         nfoE....

000d8100 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d8100:	0000 0000 80cc 000d 6f79 000d 6f8d 000d     ........yo...o..
   d8110:	7079 000d 7079 000d 6f4f 000d 6e91 000d     yp..yp..Oo...n..
   d8120:	704d 000d 6fd9 000d 6fa1 000d               Mp...o...o..

000d812c <_ZTISt9type_info>:
   d812c:	80a8 000d 8134 000d                         ....4...

000d8134 <_ZTSSt9type_info>:
   d8134:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000d8141 <link_const_variable_data_end>:
   d8141:	00          	.byte	0x00
	...

000d8144 <link_constructors_location>:
   d8144:	000d43fd 	.word	0x000d43fd
   d8148:	000d590d 	.word	0x000d590d
   d814c:	000d5b81 	.word	0x000d5b81
   d8150:	000d5ef9 	.word	0x000d5ef9
   d8154:	000d5fc1 	.word	0x000d5fc1
   d8158:	000d5fd1 	.word	0x000d5fd1
   d815c:	000d5ff9 	.word	0x000d5ff9
   d8160:	000d6b75 	.word	0x000d6b75
   d8164:	000d6ce1 	.word	0x000d6ce1

000d8168 <link_constructors_end>:
	...
