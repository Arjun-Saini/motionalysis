
/Users/trylaarsdam/Documents/dev/motionalysis/target/3.1.0/argon/motionalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006a50  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000baa70  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000084  2003d9d8  000baa74  0001d9d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000d94  2003da60  2003da60  0002da60  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000baaf8  000baaf8  0002aaf8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000bab20  000bab20  0002ab20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0011db4b  00000000  00000000  0002ab24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0001326d  00000000  00000000  0014866f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0003959b  00000000  00000000  0015b8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00003188  00000000  00000000  00194e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 0000afd8  00000000  00000000  00197fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037e48  00000000  00000000  001a2fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003f6c9  00000000  00000000  001dae1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012a728  00000000  00000000  0021a4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00008aa4  00000000  00000000  00344c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f005 fcc5 	bl	b99c0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f005 fce7 	bl	b9a10 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d9d8 	.word	0x2003d9d8
   b404c:	000baa74 	.word	0x000baa74
   b4050:	2003da5c 	.word	0x2003da5c
   b4054:	2003da60 	.word	0x2003da60
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 ffed 	bl	b9040 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42a5      	cmp	r5, r4
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000baa4c 	.word	0x000baa4c
   b4080:	000baa70 	.word	0x000baa70

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bb46 	b.w	b4714 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fb75 	bl	b4778 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 bf8d 	b.w	b8fb0 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 ba73 	b.w	b6580 <malloc>

000b409a <_Znaj>:
   b409a:	f002 ba71 	b.w	b6580 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f002 ba77 	b.w	b6590 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   b40b2:	4770      	bx	lr

000b40b4 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b40b4:	b510      	push	{r4, lr}
   b40b6:	4604      	mov	r4, r0
   b40b8:	3004      	adds	r0, #4
   b40ba:	f004 f849 	bl	b8150 <_ZN6StringD1Ev>
   b40be:	4620      	mov	r0, r4
   b40c0:	bd10      	pop	{r4, pc}

000b40c2 <_ZN14http_request_tD1Ev>:
} http_request_t;
   b40c2:	b510      	push	{r4, lr}
   b40c4:	4604      	mov	r4, r0
   b40c6:	303c      	adds	r0, #60	; 0x3c
   b40c8:	f004 f842 	bl	b8150 <_ZN6StringD1Ev>
   b40cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b40d0:	f004 f83e 	bl	b8150 <_ZN6StringD1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f004 f83b 	bl	b8150 <_ZN6StringD1Ev>
   b40da:	4620      	mov	r0, r4
   b40dc:	bd10      	pop	{r4, pc}

000b40de <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   b40de:	b510      	push	{r4, lr}
   b40e0:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b40e2:	6800      	ldr	r0, [r0, #0]
   b40e4:	b108      	cbz	r0, b40ea <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   b40e6:	f002 fa53 	bl	b6590 <free>
class SystemClass {
   b40ea:	4620      	mov	r0, r4
   b40ec:	bd10      	pop	{r4, pc}

000b40ee <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   b40ee:	b510      	push	{r4, lr}
   b40f0:	4604      	mov	r4, r0

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   b40f2:	b93a      	cbnz	r2, b4104 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b40f4:	6803      	ldr	r3, [r0, #0]
   b40f6:	689b      	ldr	r3, [r3, #8]
   b40f8:	4798      	blx	r3
        n += println();
   b40fa:	4620      	mov	r0, r4
    }
   b40fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b4100:	f003 bf13 	b.w	b7f2a <_ZN5Print7printlnEv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4104:	b2d2      	uxtb	r2, r2
   b4106:	f003 ff26 	bl	b7f56 <_ZN5Print11printNumberEmh>
   b410a:	e7f6      	b.n	b40fa <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0xc>

000b410c <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b410c:	b570      	push	{r4, r5, r6, lr}
   b410e:	4605      	mov	r5, r0
   b4110:	460c      	mov	r4, r1
    if (base == 0) {
   b4112:	4616      	mov	r6, r2
   b4114:	b942      	cbnz	r2, b4128 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x1c>
        return write(n);
   b4116:	6803      	ldr	r3, [r0, #0]
   b4118:	b2c9      	uxtb	r1, r1
   b411a:	689b      	ldr	r3, [r3, #8]
   b411c:	4798      	blx	r3
        n += println();
   b411e:	4628      	mov	r0, r5
    }
   b4120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        n += println();
   b4124:	f003 bf01 	b.w	b7f2a <_ZN5Print7printlnEv>
        if (n < 0 && base == 10) {
   b4128:	2900      	cmp	r1, #0
   b412a:	da0a      	bge.n	b4142 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
   b412c:	2a0a      	cmp	r2, #10
   b412e:	d108      	bne.n	b4142 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
            t = print('-');
   b4130:	212d      	movs	r1, #45	; 0x2d
   b4132:	f003 fef1 	bl	b7f18 <_ZN5Print5printEc>
            val = -n;
   b4136:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b4138:	b2f2      	uxtb	r2, r6
   b413a:	4628      	mov	r0, r5
   b413c:	f003 ff0b 	bl	b7f56 <_ZN5Print11printNumberEmh>
   b4140:	e7ed      	b.n	b411e <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x12>
            val = n;
   b4142:	4621      	mov	r1, r4
   b4144:	e7f8      	b.n	b4138 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x2c>
	...

000b4148 <_ZN10HttpClientD1Ev>:

class HttpClient {
   b4148:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b414a:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b414c:	4b0a      	ldr	r3, [pc, #40]	; (b4178 <_ZN10HttpClientD1Ev+0x30>)
   b414e:	6003      	str	r3, [r0, #0]
   b4150:	4605      	mov	r5, r0
   b4152:	b17c      	cbz	r4, b4174 <_ZN10HttpClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b4154:	6863      	ldr	r3, [r4, #4]
   b4156:	3b01      	subs	r3, #1
   b4158:	6063      	str	r3, [r4, #4]
   b415a:	b95b      	cbnz	r3, b4174 <_ZN10HttpClientD1Ev+0x2c>
          _M_dispose();
   b415c:	6823      	ldr	r3, [r4, #0]
   b415e:	4620      	mov	r0, r4
   b4160:	689b      	ldr	r3, [r3, #8]
   b4162:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4164:	68a3      	ldr	r3, [r4, #8]
   b4166:	3b01      	subs	r3, #1
   b4168:	60a3      	str	r3, [r4, #8]
   b416a:	b91b      	cbnz	r3, b4174 <_ZN10HttpClientD1Ev+0x2c>
            _M_destroy();
   b416c:	6823      	ldr	r3, [r4, #0]
   b416e:	4620      	mov	r0, r4
   b4170:	68db      	ldr	r3, [r3, #12]
   b4172:	4798      	blx	r3
   b4174:	4628      	mov	r0, r5
   b4176:	bd38      	pop	{r3, r4, r5, pc}
   b4178:	000ba690 	.word	0x000ba690

000b417c <_ZN9USBSerial4lockEv.isra.0>:
#else
		return true;
#endif
	}

	void lock()
   b417c:	b508      	push	{r3, lr}
		return os_mutex_recursive_t(system_internal(2, nullptr));
   b417e:	2100      	movs	r1, #0
   b4180:	2002      	movs	r0, #2
   b4182:	f002 f91f 	bl	b63c4 <system_internal>
	{
#if PLATFORM_THREADING
		os_mutex_recursive_lock(get_mutex());
#endif
	}
   b4186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		os_mutex_recursive_lock(get_mutex());
   b418a:	f001 beeb 	b.w	b5f64 <os_mutex_recursive_lock>

000b418e <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b418e:	b40e      	push	{r1, r2, r3}
   b4190:	b503      	push	{r0, r1, lr}
   b4192:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   b4194:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4196:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b419a:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b419c:	f003 fef9 	bl	b7f92 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b41a0:	b002      	add	sp, #8
   b41a2:	f85d eb04 	ldr.w	lr, [sp], #4
   b41a6:	b003      	add	sp, #12
   b41a8:	4770      	bx	lr

000b41aa <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b41aa:	2300      	movs	r3, #0
   b41ac:	6840      	ldr	r0, [r0, #4]
   b41ae:	461a      	mov	r2, r3
   b41b0:	4619      	mov	r1, r3
   b41b2:	f002 b995 	b.w	b64e0 <network_on>

000b41b6 <_ZN5spark9WiFiClass3offEv>:
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b41b6:	2300      	movs	r3, #0
   b41b8:	6840      	ldr	r0, [r0, #4]
   b41ba:	461a      	mov	r2, r3
   b41bc:	4619      	mov	r1, r3
   b41be:	f002 b997 	b.w	b64f0 <network_off>

000b41c2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   b41c2:	2300      	movs	r3, #0
   b41c4:	6840      	ldr	r0, [r0, #4]
   b41c6:	461a      	mov	r2, r3
   b41c8:	f002 b96a 	b.w	b64a0 <network_connect>

000b41cc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b41cc:	2200      	movs	r2, #0
   b41ce:	6840      	ldr	r0, [r0, #4]
   b41d0:	4611      	mov	r1, r2
   b41d2:	f002 b97d 	b.w	b64d0 <network_ready>
	...

000b41d8 <_Z16HTTPRequestSetupv>:

int networkCount;
WiFiAccessPoint networks[5];
String networkBuffer;

void HTTPRequestSetup() {
   b41d8:	b510      	push	{r4, lr}
  request.hostname = kHTTPHostname;
   b41da:	4c07      	ldr	r4, [pc, #28]	; (b41f8 <_Z16HTTPRequestSetupv+0x20>)
   b41dc:	4907      	ldr	r1, [pc, #28]	; (b41fc <_Z16HTTPRequestSetupv+0x24>)
   b41de:	4620      	mov	r0, r4
   b41e0:	f004 f82f 	bl	b8242 <_ZN6StringaSEPKc>
  request.port = kHTTPRequestPort;
   b41e4:	2350      	movs	r3, #80	; 0x50
   b41e6:	63a3      	str	r3, [r4, #56]	; 0x38
  request.path = "/";
   b41e8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b41ec:	4904      	ldr	r1, [pc, #16]	; (b4200 <_Z16HTTPRequestSetupv+0x28>)
}
   b41ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  request.path = "/";
   b41f2:	f004 b826 	b.w	b8242 <_ZN6StringaSEPKc>
   b41f6:	bf00      	nop
   b41f8:	2003e07c 	.word	0x2003e07c
   b41fc:	000b9c48 	.word	0x000b9c48
   b4200:	000b9c54 	.word	0x000b9c54

000b4204 <_Z14initFromEEPROMv>:
      Serial.println("Failed to initialize LIS3DH");
    }
  }
}

void initFromEEPROM() {
   b4204:	b538      	push	{r3, r4, r5, lr}
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b4206:	4d20      	ldr	r5, [pc, #128]	; (b4288 <_Z14initFromEEPROMv+0x84>)
   b4208:	4c20      	ldr	r4, [pc, #128]	; (b428c <_Z14initFromEEPROMv+0x88>)
  EEPROM.get(kRecordingIntervalEEPROMAddress, recordingInterval);
   b420a:	f004 ffc7 	bl	b919c <_Z21__fetch_global_EEPROMv>
   b420e:	2204      	movs	r2, #4
   b4210:	4629      	mov	r1, r5
   b4212:	2064      	movs	r0, #100	; 0x64
   b4214:	f001 fed6 	bl	b5fc4 <HAL_EEPROM_Get>
  EEPROM.get(kDsidEEPROMAddress, dsid);
   b4218:	f004 ffc0 	bl	b919c <_Z21__fetch_global_EEPROMv>
   b421c:	491c      	ldr	r1, [pc, #112]	; (b4290 <_Z14initFromEEPROMv+0x8c>)
   b421e:	2204      	movs	r2, #4
   b4220:	2000      	movs	r0, #0
   b4222:	f001 fecf 	bl	b5fc4 <HAL_EEPROM_Get>
  EEPROM.get(kReportingIntervalEEPROMAddress, reportingInterval);
   b4226:	f004 ffb9 	bl	b919c <_Z21__fetch_global_EEPROMv>
   b422a:	4621      	mov	r1, r4
   b422c:	2204      	movs	r2, #4
   b422e:	20c8      	movs	r0, #200	; 0xc8
   b4230:	f001 fec8 	bl	b5fc4 <HAL_EEPROM_Get>
  reportingInterval = reportingInterval / 1000; // convert to seconds from milliseconds 
   b4234:	6823      	ldr	r3, [r4, #0]
   b4236:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b423a:	fb93 f3f2 	sdiv	r3, r3, r2
   b423e:	6023      	str	r3, [r4, #0]
  Serial.printlnf("recordingInterval: %i", recordingInterval);
   b4240:	f004 fd88 	bl	b8d54 <_Z16_fetch_usbserialv>
   b4244:	682a      	ldr	r2, [r5, #0]
   b4246:	4913      	ldr	r1, [pc, #76]	; (b4294 <_Z14initFromEEPROMv+0x90>)
   b4248:	f7ff ffa1 	bl	b418e <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("reportingInterval: %i", reportingInterval);
   b424c:	f004 fd82 	bl	b8d54 <_Z16_fetch_usbserialv>
   b4250:	6822      	ldr	r2, [r4, #0]
   b4252:	4911      	ldr	r1, [pc, #68]	; (b4298 <_Z14initFromEEPROMv+0x94>)
   b4254:	f7ff ff9b 	bl	b418e <_ZN5Print8printlnfEPKcz>
  if(recordingInterval == kEEPROMEmptyValue) { // if no value stored in EEPROM, set to default
   b4258:	682b      	ldr	r3, [r5, #0]
   b425a:	3301      	adds	r3, #1
    recordingInterval = kDefaultRecordingInterval; //default value
   b425c:	bf04      	itt	eq
   b425e:	f44f 73fa 	moveq.w	r3, #500	; 0x1f4
   b4262:	602b      	streq	r3, [r5, #0]
  }
  if(reportingInterval == kEEPROMEmptyValue) {
   b4264:	6823      	ldr	r3, [r4, #0]
   b4266:	3301      	adds	r3, #1
    reportingInterval = kDefaultReportingInterval; //default value
   b4268:	bf04      	itt	eq
   b426a:	230f      	moveq	r3, #15
   b426c:	6023      	streq	r3, [r4, #0]
  }
  if(dsid == kEEPROMEmptyValue) {
   b426e:	4b08      	ldr	r3, [pc, #32]	; (b4290 <_Z14initFromEEPROMv+0x8c>)
   b4270:	681b      	ldr	r3, [r3, #0]
   b4272:	3301      	adds	r3, #1
   b4274:	d106      	bne.n	b4284 <_Z14initFromEEPROMv+0x80>
    Serial.println("DSID not stored in EEPROM. BLE config required"); 
   b4276:	f004 fd6d 	bl	b8d54 <_Z16_fetch_usbserialv>
    //TODO notify user somehow
  }
   b427a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println("DSID not stored in EEPROM. BLE config required"); 
   b427e:	4907      	ldr	r1, [pc, #28]	; (b429c <_Z14initFromEEPROMv+0x98>)
   b4280:	f003 be5f 	b.w	b7f42 <_ZN5Print7printlnEPKc>
   b4284:	bd38      	pop	{r3, r4, r5, pc}
   b4286:	bf00      	nop
   b4288:	2003e070 	.word	0x2003e070
   b428c:	2003e074 	.word	0x2003e074
   b4290:	2003dac4 	.word	0x2003dac4
   b4294:	000b9c56 	.word	0x000b9c56
   b4298:	000b9c6c 	.word	0x000b9c6c
   b429c:	000b9c82 	.word	0x000b9c82

000b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b42a0:	b510      	push	{r4, lr}
		return os_mutex_recursive_t(system_internal(2, nullptr));
   b42a2:	2100      	movs	r1, #0
   b42a4:	4604      	mov	r4, r0
   b42a6:	2002      	movs	r0, #2
   b42a8:	f002 f88c 	bl	b63c4 <system_internal>

	void unlock()
	{
#if PLATFORM_THREADING
		os_mutex_recursive_unlock(get_mutex());
   b42ac:	f001 fe62 	bl	b5f74 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b42b0:	4620      	mov	r0, r4
   b42b2:	bd10      	pop	{r4, pc}

000b42b4 <_Z10reportData6String>:

void reportData(String payload) {
   b42b4:	b530      	push	{r4, r5, lr}
   b42b6:	4604      	mov	r4, r0
   b42b8:	b089      	sub	sp, #36	; 0x24
  WiFi.on();
   b42ba:	484e      	ldr	r0, [pc, #312]	; (b43f4 <_Z10reportData6String+0x140>)
  WiFi.connect();
  while(!WiFi.ready()) {
   b42bc:	4d4d      	ldr	r5, [pc, #308]	; (b43f4 <_Z10reportData6String+0x140>)
  WiFi.on();
   b42be:	f7ff ff74 	bl	b41aa <_ZN5spark9WiFiClass2onEv>
  WiFi.connect();
   b42c2:	484c      	ldr	r0, [pc, #304]	; (b43f4 <_Z10reportData6String+0x140>)
   b42c4:	2100      	movs	r1, #0
   b42c6:	f7ff ff7c 	bl	b41c2 <_ZN5spark9WiFiClass7connectEj>
  while(!WiFi.ready()) {
   b42ca:	4628      	mov	r0, r5
   b42cc:	f7ff ff7e 	bl	b41cc <_ZN5spark9WiFiClass5readyEv>
   b42d0:	b918      	cbnz	r0, b42da <_Z10reportData6String+0x26>
    delay(100);
   b42d2:	2064      	movs	r0, #100	; 0x64
   b42d4:	f002 f9a4 	bl	b6620 <delay>
  while(!WiFi.ready()) {
   b42d8:	e7f7      	b.n	b42ca <_Z10reportData6String+0x16>
  }
  if(WiFi.ready() != true) {
   b42da:	4846      	ldr	r0, [pc, #280]	; (b43f4 <_Z10reportData6String+0x140>)
   b42dc:	f7ff ff76 	bl	b41cc <_ZN5spark9WiFiClass5readyEv>
   b42e0:	b988      	cbnz	r0, b4306 <_Z10reportData6String+0x52>
    WITH_LOCK(Serial) {
   b42e2:	f004 fd37 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b42e6:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b42e8:	f7ff ff48 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WiFi failed to connect, data not reported");
   b42ec:	f004 fd32 	bl	b8d54 <_Z16_fetch_usbserialv>
   b42f0:	4941      	ldr	r1, [pc, #260]	; (b43f8 <_Z10reportData6String+0x144>)
   b42f2:	f003 fe26 	bl	b7f42 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b42f6:	a804      	add	r0, sp, #16
      Serial.println("Status: " + response.status);
    }
    WITH_LOCK(Serial) {
      Serial.println("Body: " + response.body);
    }
    WITH_LOCK(Serial) {
   b42f8:	f7ff ffd2 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      Serial.println("ReqBody: " + request.body);
    }
  }
  WiFi.off();
   b42fc:	483d      	ldr	r0, [pc, #244]	; (b43f4 <_Z10reportData6String+0x140>)
   b42fe:	f7ff ff5a 	bl	b41b6 <_ZN5spark9WiFiClass3offEv>
   b4302:	b009      	add	sp, #36	; 0x24
   b4304:	bd30      	pop	{r4, r5, pc}
    WITH_LOCK(Serial) {
   b4306:	f004 fd25 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b430a:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b430c:	f7ff ff36 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WiFi connected, reporting data");
   b4310:	f004 fd20 	bl	b8d54 <_Z16_fetch_usbserialv>
   b4314:	4939      	ldr	r1, [pc, #228]	; (b43fc <_Z10reportData6String+0x148>)
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
    }

    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
   b4316:	4d3a      	ldr	r5, [pc, #232]	; (b4400 <_Z10reportData6String+0x14c>)
   b4318:	f003 fe13 	bl	b7f42 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b431c:	a804      	add	r0, sp, #16
   b431e:	f7ff ffbf 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    payload.remove(payload.length() - 1);
   b4322:	68a1      	ldr	r1, [r4, #8]
   b4324:	4620      	mov	r0, r4
   b4326:	3901      	subs	r1, #1
   b4328:	f004 f88d 	bl	b8446 <_ZN6String6removeEj>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b432c:	4935      	ldr	r1, [pc, #212]	; (b4404 <_Z10reportData6String+0x150>)
   b432e:	a804      	add	r0, sp, #16
   b4330:	f003 ff59 	bl	b81e6 <_ZN6StringC1EPK19__FlashStringHelper>
    request.body = "{\"data\":[" + payload + "]}";
   b4334:	4621      	mov	r1, r4
   b4336:	a804      	add	r0, sp, #16
   b4338:	f003 fff4 	bl	b8324 <_ZplRK15StringSumHelperRK6String>
   b433c:	4932      	ldr	r1, [pc, #200]	; (b4408 <_Z10reportData6String+0x154>)
   b433e:	f003 fffd 	bl	b833c <_ZplRK15StringSumHelperPKc>
   b4342:	4601      	mov	r1, r0
   b4344:	4831      	ldr	r0, [pc, #196]	; (b440c <_Z10reportData6String+0x158>)
   b4346:	f003 ff62 	bl	b820e <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b434a:	a804      	add	r0, sp, #16
   b434c:	f003 ff00 	bl	b8150 <_ZN6StringD1Ev>
    WITH_LOCK(Serial){
   b4350:	f004 fd00 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4354:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b4356:	f7ff ff11 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
   b435a:	4b2d      	ldr	r3, [pc, #180]	; (b4410 <_Z10reportData6String+0x15c>)
   b435c:	492d      	ldr	r1, [pc, #180]	; (b4414 <_Z10reportData6String+0x160>)
   b435e:	482e      	ldr	r0, [pc, #184]	; (b4418 <_Z10reportData6String+0x164>)
   b4360:	9300      	str	r3, [sp, #0]
   b4362:	462a      	mov	r2, r5
   b4364:	4b2d      	ldr	r3, [pc, #180]	; (b441c <_Z10reportData6String+0x168>)
   b4366:	f001 fb57 	bl	b5a18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
   b436a:	a804      	add	r0, sp, #16
   b436c:	f7ff ff98 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    WITH_LOCK(Serial) {
   b4370:	f004 fcf0 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4374:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b4376:	f7ff ff01 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("Status: " + response.status);
   b437a:	f004 fceb 	bl	b8d54 <_Z16_fetch_usbserialv>
   b437e:	682b      	ldr	r3, [r5, #0]
   b4380:	4927      	ldr	r1, [pc, #156]	; (b4420 <_Z10reportData6String+0x16c>)
   b4382:	4419      	add	r1, r3
   b4384:	f003 fddd 	bl	b7f42 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b4388:	a804      	add	r0, sp, #16
   b438a:	f7ff ff89 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    WITH_LOCK(Serial) {
   b438e:	f004 fce1 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4392:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   b4394:	f7ff fef2 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("Body: " + response.body);
   b4398:	f004 fcdc 	bl	b8d54 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b439c:	4921      	ldr	r1, [pc, #132]	; (b4424 <_Z10reportData6String+0x170>)
   b439e:	4604      	mov	r4, r0
   b43a0:	a804      	add	r0, sp, #16
   b43a2:	f003 ff20 	bl	b81e6 <_ZN6StringC1EPK19__FlashStringHelper>
   b43a6:	1d29      	adds	r1, r5, #4
   b43a8:	a804      	add	r0, sp, #16
   b43aa:	f003 ffbb 	bl	b8324 <_ZplRK15StringSumHelperRK6String>
   b43ae:	6801      	ldr	r1, [r0, #0]
   b43b0:	4620      	mov	r0, r4
   b43b2:	f003 fdc6 	bl	b7f42 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b43b6:	a804      	add	r0, sp, #16
   b43b8:	f003 feca 	bl	b8150 <_ZN6StringD1Ev>
    WITH_LOCK(Serial) {
   b43bc:	a803      	add	r0, sp, #12
   b43be:	f7ff ff6f 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    WITH_LOCK(Serial) {
   b43c2:	f004 fcc7 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b43c6:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   b43c8:	f7ff fed8 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("ReqBody: " + request.body);
   b43cc:	f004 fcc2 	bl	b8d54 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b43d0:	4915      	ldr	r1, [pc, #84]	; (b4428 <_Z10reportData6String+0x174>)
   b43d2:	4604      	mov	r4, r0
   b43d4:	a804      	add	r0, sp, #16
   b43d6:	f003 ff06 	bl	b81e6 <_ZN6StringC1EPK19__FlashStringHelper>
   b43da:	490c      	ldr	r1, [pc, #48]	; (b440c <_Z10reportData6String+0x158>)
   b43dc:	a804      	add	r0, sp, #16
   b43de:	f003 ffa1 	bl	b8324 <_ZplRK15StringSumHelperRK6String>
   b43e2:	6801      	ldr	r1, [r0, #0]
   b43e4:	4620      	mov	r0, r4
   b43e6:	f003 fdac 	bl	b7f42 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b43ea:	a804      	add	r0, sp, #16
   b43ec:	f003 feb0 	bl	b8150 <_ZN6StringD1Ev>
    WITH_LOCK(Serial) {
   b43f0:	a803      	add	r0, sp, #12
   b43f2:	e781      	b.n	b42f8 <_Z10reportData6String+0x44>
   b43f4:	2003e7c0 	.word	0x2003e7c0
   b43f8:	000b9cb1 	.word	0x000b9cb1
   b43fc:	000b9cdb 	.word	0x000b9cdb
   b4400:	2003e0c8 	.word	0x2003e0c8
   b4404:	000b9cfa 	.word	0x000b9cfa
   b4408:	000b9d04 	.word	0x000b9d04
   b440c:	2003e0b8 	.word	0x2003e0b8
   b4410:	000b9d07 	.word	0x000b9d07
   b4414:	2003e07c 	.word	0x2003e07c
   b4418:	2003dacc 	.word	0x2003dacc
   b441c:	2003d9dc 	.word	0x2003d9dc
   b4420:	000b9d0c 	.word	0x000b9d0c
   b4424:	000b9d18 	.word	0x000b9d18
   b4428:	000b9d15 	.word	0x000b9d15

000b442c <_Z15reportingThreadPv>:
      break;
    }
  }
}

void reportingThread(void *args) {
   b442c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while(true) {
    if(storedValuesIndex >= ((reportingInterval * kSecondsToMilliseconds) / recordingInterval)) {
   b4430:	f8df a104 	ldr.w	sl, [pc, #260]	; b4538 <_Z15reportingThreadPv+0x10c>
   b4434:	4c37      	ldr	r4, [pc, #220]	; (b4514 <_Z15reportingThreadPv+0xe8>)
void reportingThread(void *args) {
   b4436:	b08d      	sub	sp, #52	; 0x34
    if(storedValuesIndex >= ((reportingInterval * kSecondsToMilliseconds) / recordingInterval)) {
   b4438:	f8da 3000 	ldr.w	r3, [sl]
   b443c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4440:	4353      	muls	r3, r2
   b4442:	4a35      	ldr	r2, [pc, #212]	; (b4518 <_Z15reportingThreadPv+0xec>)
   b4444:	6812      	ldr	r2, [r2, #0]
   b4446:	fb93 f3f2 	sdiv	r3, r3, r2
   b444a:	6822      	ldr	r2, [r4, #0]
   b444c:	4293      	cmp	r3, r2
   b444e:	dc5e      	bgt.n	b450e <_Z15reportingThreadPv+0xe2>
      os_mutex_lock(payloadAccessLock); // lock access to payload before copying to local variable and resetting global payload
   b4450:	4f32      	ldr	r7, [pc, #200]	; (b451c <_Z15reportingThreadPv+0xf0>)
   b4452:	f8df 90e8 	ldr.w	r9, [pc, #232]	; b453c <_Z15reportingThreadPv+0x110>
   b4456:	6838      	ldr	r0, [r7, #0]
   b4458:	f8df 80e4 	ldr.w	r8, [pc, #228]	; b4540 <_Z15reportingThreadPv+0x114>
      for (int i = 0; i < storedValuesIndex; i++) {
        //Serial.printf("{timestamp: %i, data: %i}, ", storedTimes[i], storedValues[i]);
        payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b445c:	f8df b0e4 	ldr.w	fp, [pc, #228]	; b4544 <_Z15reportingThreadPv+0x118>
      os_mutex_lock(payloadAccessLock); // lock access to payload before copying to local variable and resetting global payload
   b4460:	f001 fd60 	bl	b5f24 <os_mutex_lock>
	StringSumHelper(const char *p) : String(p) {}
   b4464:	4b2e      	ldr	r3, [pc, #184]	; (b4520 <_Z15reportingThreadPv+0xf4>)
      for (int i = 0; i < storedValuesIndex; i++) {
   b4466:	2500      	movs	r5, #0
   b4468:	6822      	ldr	r2, [r4, #0]
   b446a:	42aa      	cmp	r2, r5
   b446c:	dd35      	ble.n	b44da <_Z15reportingThreadPv+0xae>
   b446e:	4619      	mov	r1, r3
   b4470:	a804      	add	r0, sp, #16
   b4472:	f003 feb8 	bl	b81e6 <_ZN6StringC1EPK19__FlashStringHelper>
        payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b4476:	4b2b      	ldr	r3, [pc, #172]	; (b4524 <_Z15reportingThreadPv+0xf8>)
   b4478:	220a      	movs	r2, #10
   b447a:	6819      	ldr	r1, [r3, #0]
   b447c:	4668      	mov	r0, sp
   b447e:	f003 fef2 	bl	b8266 <_ZN6StringC1Eih>
   b4482:	4669      	mov	r1, sp
   b4484:	a804      	add	r0, sp, #16
   b4486:	f003 ff4d 	bl	b8324 <_ZplRK15StringSumHelperRK6String>
   b448a:	4659      	mov	r1, fp
   b448c:	f003 ff56 	bl	b833c <_ZplRK15StringSumHelperPKc>
   b4490:	f819 1b01 	ldrb.w	r1, [r9], #1
   b4494:	f003 ff67 	bl	b8366 <_ZplRK15StringSumHelperh>
   b4498:	4923      	ldr	r1, [pc, #140]	; (b4528 <_Z15reportingThreadPv+0xfc>)
   b449a:	f003 ff4f 	bl	b833c <_ZplRK15StringSumHelperPKc>
   b449e:	220a      	movs	r2, #10
   b44a0:	f858 1b04 	ldr.w	r1, [r8], #4
   b44a4:	4606      	mov	r6, r0
   b44a6:	a808      	add	r0, sp, #32
   b44a8:	f003 fef0 	bl	b828c <_ZN6StringC1Elh>
   b44ac:	a908      	add	r1, sp, #32
   b44ae:	4630      	mov	r0, r6
   b44b0:	f003 ff38 	bl	b8324 <_ZplRK15StringSumHelperRK6String>
   b44b4:	491d      	ldr	r1, [pc, #116]	; (b452c <_Z15reportingThreadPv+0x100>)
   b44b6:	f003 ff41 	bl	b833c <_ZplRK15StringSumHelperPKc>
   b44ba:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b44bc:	481c      	ldr	r0, [pc, #112]	; (b4530 <_Z15reportingThreadPv+0x104>)
   b44be:	f003 ff0f 	bl	b82e0 <_ZN6String6concatERKS_>
   b44c2:	a808      	add	r0, sp, #32
   b44c4:	f003 fe44 	bl	b8150 <_ZN6StringD1Ev>
   b44c8:	4668      	mov	r0, sp
   b44ca:	f003 fe41 	bl	b8150 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b44ce:	a804      	add	r0, sp, #16
   b44d0:	f003 fe3e 	bl	b8150 <_ZN6StringD1Ev>
      for (int i = 0; i < storedValuesIndex; i++) {
   b44d4:	3501      	adds	r5, #1
   b44d6:	4b12      	ldr	r3, [pc, #72]	; (b4520 <_Z15reportingThreadPv+0xf4>)
   b44d8:	e7c6      	b.n	b4468 <_Z15reportingThreadPv+0x3c>
      }
      String localPayload = payload;
   b44da:	4915      	ldr	r1, [pc, #84]	; (b4530 <_Z15reportingThreadPv+0x104>)
   b44dc:	a804      	add	r0, sp, #16
   b44de:	f003 fea5 	bl	b822c <_ZN6StringC1ERKS_>
      payload = "";
   b44e2:	4914      	ldr	r1, [pc, #80]	; (b4534 <_Z15reportingThreadPv+0x108>)
   b44e4:	4812      	ldr	r0, [pc, #72]	; (b4530 <_Z15reportingThreadPv+0x104>)
   b44e6:	f003 feac 	bl	b8242 <_ZN6StringaSEPKc>
      os_mutex_unlock(payloadAccessLock);
   b44ea:	6838      	ldr	r0, [r7, #0]
   b44ec:	f001 fd22 	bl	b5f34 <os_mutex_unlock>
      reportData(localPayload);
   b44f0:	a904      	add	r1, sp, #16
   b44f2:	a808      	add	r0, sp, #32
   b44f4:	f003 fe9a 	bl	b822c <_ZN6StringC1ERKS_>
   b44f8:	a808      	add	r0, sp, #32
   b44fa:	f7ff fedb 	bl	b42b4 <_Z10reportData6String>
   b44fe:	a808      	add	r0, sp, #32
   b4500:	f003 fe26 	bl	b8150 <_ZN6StringD1Ev>
      storedValuesIndex = 0;
   b4504:	2300      	movs	r3, #0
      String localPayload = payload;
   b4506:	a804      	add	r0, sp, #16
      storedValuesIndex = 0;
   b4508:	6023      	str	r3, [r4, #0]
      String localPayload = payload;
   b450a:	f003 fe21 	bl	b8150 <_ZN6StringD1Ev>
    }
    os_thread_yield();
   b450e:	f001 fcf9 	bl	b5f04 <os_thread_yield>
  }
   b4512:	e791      	b.n	b4438 <_Z15reportingThreadPv+0xc>
   b4514:	2003e5f4 	.word	0x2003e5f4
   b4518:	2003e070 	.word	0x2003e070
   b451c:	2003e060 	.word	0x2003e060
   b4520:	000b9d1f 	.word	0x000b9d1f
   b4524:	2003dac4 	.word	0x2003dac4
   b4528:	000b9d33 	.word	0x000b9d33
   b452c:	000b9d42 	.word	0x000b9d42
   b4530:	2003e050 	.word	0x2003e050
   b4534:	000b9f86 	.word	0x000b9f86
   b4538:	2003e074 	.word	0x2003e074
   b453c:	2003e4f4 	.word	0x2003e4f4
   b4540:	2003e0f4 	.word	0x2003e0f4
   b4544:	000b9d28 	.word	0x000b9d28

000b4548 <_Z12initHardwarev>:
void initHardware() {
   b4548:	b507      	push	{r0, r1, r2, lr}
        system_get_flag(flag, &value, nullptr);
        return value;
    }

    static inline void set_flag(system_flag_t flag, uint8_t value) {
        system_set_flag(flag, value, nullptr);
   b454a:	2200      	movs	r2, #0
   b454c:	2101      	movs	r1, #1
   b454e:	2003      	movs	r0, #3
   b4550:	f001 ff40 	bl	b63d4 <system_set_flag>
  pinMode(kBLEConnectedLED, OUTPUT); //BLE connected indicator 
   b4554:	2101      	movs	r1, #1
   b4556:	2007      	movs	r0, #7
   b4558:	f004 fde2 	bl	b9120 <pinMode>
  digitalWrite(kBLEConnectedLED, LOW);
   b455c:	2100      	movs	r1, #0
   b455e:	2007      	movs	r0, #7
   b4560:	f004 fdef 	bl	b9142 <digitalWrite>
  if(!lis3dh.begin(kLis3dhAddress)) {
   b4564:	480c      	ldr	r0, [pc, #48]	; (b4598 <_Z12initHardwarev+0x50>)
   b4566:	2118      	movs	r1, #24
   b4568:	f001 f991 	bl	b588e <_ZN15Adafruit_LIS3DH5beginEh>
   b456c:	b980      	cbnz	r0, b4590 <_Z12initHardwarev+0x48>
    delay(1000);
   b456e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4572:	f002 f855 	bl	b6620 <delay>
    WITH_LOCK(Serial) {
   b4576:	f004 fbed 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b457a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b457c:	f7ff fdfe 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("Failed to initialize LIS3DH");
   b4580:	f004 fbe8 	bl	b8d54 <_Z16_fetch_usbserialv>
   b4584:	4905      	ldr	r1, [pc, #20]	; (b459c <_Z12initHardwarev+0x54>)
   b4586:	f003 fcdc 	bl	b7f42 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b458a:	a801      	add	r0, sp, #4
   b458c:	f7ff fe88 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
}
   b4590:	b003      	add	sp, #12
   b4592:	f85d fb04 	ldr.w	pc, [sp], #4
   b4596:	bf00      	nop
   b4598:	2003dee8 	.word	0x2003dee8
   b459c:	000b9d45 	.word	0x000b9d45

000b45a0 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv>:

  bleQuestionCount++;
}

//kBLEConnectedLED turns on when ble connected
void connectCallback(const BlePeerDevice& peer, void* context){
   b45a0:	b507      	push	{r0, r1, r2, lr}
  bleQuestionCount = 0;
   b45a2:	4b0b      	ldr	r3, [pc, #44]	; (b45d0 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x30>)
   b45a4:	2200      	movs	r2, #0
   b45a6:	601a      	str	r2, [r3, #0]
  WITH_LOCK(Serial) {
   b45a8:	f004 fbd4 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b45ac:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b45ae:	f7ff fde5 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("connected");
   b45b2:	f004 fbcf 	bl	b8d54 <_Z16_fetch_usbserialv>
   b45b6:	4907      	ldr	r1, [pc, #28]	; (b45d4 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x34>)
   b45b8:	f003 fcc3 	bl	b7f42 <_ZN5Print7printlnEPKc>
  WITH_LOCK(Serial) {
   b45bc:	a801      	add	r0, sp, #4
   b45be:	f7ff fe6f 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  }
  digitalWrite(kBLEConnectedLED, HIGH);
   b45c2:	2101      	movs	r1, #1
   b45c4:	2007      	movs	r0, #7
}
   b45c6:	b003      	add	sp, #12
   b45c8:	f85d eb04 	ldr.w	lr, [sp], #4
  digitalWrite(kBLEConnectedLED, HIGH);
   b45cc:	f004 bdb9 	b.w	b9142 <digitalWrite>
   b45d0:	2003dabc 	.word	0x2003dabc
   b45d4:	000b9dee 	.word	0x000b9dee

000b45d8 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv>:

//kBLEConnectedLED turns off when ble disconnected
void disconnectCallback(const BlePeerDevice& peer, void* context){
   b45d8:	b507      	push	{r0, r1, r2, lr}
  WITH_LOCK(Serial) {
   b45da:	f004 fbbb 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b45de:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b45e0:	f7ff fdcc 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("disconnected");
   b45e4:	f004 fbb6 	bl	b8d54 <_Z16_fetch_usbserialv>
   b45e8:	4906      	ldr	r1, [pc, #24]	; (b4604 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv+0x2c>)
   b45ea:	f003 fcaa 	bl	b7f42 <_ZN5Print7printlnEPKc>
  WITH_LOCK(Serial) {
   b45ee:	a801      	add	r0, sp, #4
   b45f0:	f7ff fe56 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  }
  digitalWrite(kBLEConnectedLED, LOW);
   b45f4:	2100      	movs	r1, #0
   b45f6:	2007      	movs	r0, #7
   b45f8:	b003      	add	sp, #12
   b45fa:	f85d eb04 	ldr.w	lr, [sp], #4
  digitalWrite(kBLEConnectedLED, LOW);
   b45fe:	f004 bda0 	b.w	b9142 <digitalWrite>
   b4602:	bf00      	nop
   b4604:	000b9d61 	.word	0x000b9d61

000b4608 <_Z14syncSystemTimev>:
#pragma once
#include "globalVariables.hpp"
#include "constants.hpp"

void syncSystemTime() {
   b4608:	b530      	push	{r4, r5, lr}
  int WiFiConnectCountdown = kWiFiConnectionTimeout;

  WiFi.on();
   b460a:	483d      	ldr	r0, [pc, #244]	; (b4700 <_Z14syncSystemTimev+0xf8>)
  WiFi.connect();
  //wait for WiFi to connect for kWiFiConnectionTimeout
  while(!WiFi.ready() && WiFiConnectCountdown != 0) {
   b460c:	4d3c      	ldr	r5, [pc, #240]	; (b4700 <_Z14syncSystemTimev+0xf8>)
void syncSystemTime() {
   b460e:	b087      	sub	sp, #28
  WiFi.on();
   b4610:	f7ff fdcb 	bl	b41aa <_ZN5spark9WiFiClass2onEv>
  WiFi.connect();
   b4614:	483a      	ldr	r0, [pc, #232]	; (b4700 <_Z14syncSystemTimev+0xf8>)
   b4616:	2100      	movs	r1, #0
   b4618:	f7ff fdd3 	bl	b41c2 <_ZN5spark9WiFiClass7connectEj>
  int WiFiConnectCountdown = kWiFiConnectionTimeout;
   b461c:	f644 6420 	movw	r4, #20000	; 0x4e20
  while(!WiFi.ready() && WiFiConnectCountdown != 0) {
   b4620:	4628      	mov	r0, r5
   b4622:	f7ff fdd3 	bl	b41cc <_ZN5spark9WiFiClass5readyEv>
   b4626:	b998      	cbnz	r0, b4650 <_Z14syncSystemTimev+0x48>
   b4628:	b194      	cbz	r4, b4650 <_Z14syncSystemTimev+0x48>
    WiFiConnectCountdown = WiFiConnectCountdown - kWiFiCheckInterval;
    delay(kWiFiCheckInterval);
   b462a:	2064      	movs	r0, #100	; 0x64
   b462c:	f001 fff8 	bl	b6620 <delay>
    WITH_LOCK(Serial) {
   b4630:	f004 fb90 	bl	b8d54 <_Z16_fetch_usbserialv>
    WiFiConnectCountdown = WiFiConnectCountdown - kWiFiCheckInterval;
   b4634:	3c64      	subs	r4, #100	; 0x64
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4636:	9002      	str	r0, [sp, #8]
      { _M_device.lock(); }
   b4638:	f7ff fda0 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
      Serial.println(WiFiConnectCountdown);
   b463c:	f004 fb8a 	bl	b8d54 <_Z16_fetch_usbserialv>
   b4640:	220a      	movs	r2, #10
   b4642:	4621      	mov	r1, r4
   b4644:	f7ff fd62 	bl	b410c <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    WITH_LOCK(Serial) {
   b4648:	a802      	add	r0, sp, #8
   b464a:	f7ff fe29 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b464e:	e7e7      	b.n	b4620 <_Z14syncSystemTimev+0x18>
    }
  }
  if(WiFi.ready()) {
   b4650:	482b      	ldr	r0, [pc, #172]	; (b4700 <_Z14syncSystemTimev+0xf8>)
   b4652:	f7ff fdbb 	bl	b41cc <_ZN5spark9WiFiClass5readyEv>
   b4656:	2800      	cmp	r0, #0
   b4658:	d045      	beq.n	b46e6 <_Z14syncSystemTimev+0xde>
    WITH_LOCK(Serial){
   b465a:	f004 fb7b 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b465e:	9002      	str	r0, [sp, #8]
      { _M_device.lock(); }
   b4660:	f7ff fd8c 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WiFi connected, syncing time");
   b4664:	f004 fb76 	bl	b8d54 <_Z16_fetch_usbserialv>
   b4668:	4926      	ldr	r1, [pc, #152]	; (b4704 <_Z14syncSystemTimev+0xfc>)
   b466a:	f003 fc6a 	bl	b7f42 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial){
   b466e:	a802      	add	r0, sp, #8
   b4670:	f7ff fe16 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4674:	f001 feec 	bl	b6450 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4678:	f001 fef2 	bl	b6460 <spark_cloud_flag_connected>
    }
    Particle.connect();
    while(!Particle.connected()) {} // wait forever until cloud connects
   b467c:	2800      	cmp	r0, #0
   b467e:	d0fb      	beq.n	b4678 <_Z14syncSystemTimev+0x70>
   b4680:	f001 feee 	bl	b6460 <spark_cloud_flag_connected>
        if (!connected()) {
   b4684:	b110      	cbz	r0, b468c <_Z14syncSystemTimev+0x84>
        return spark_sync_time(NULL);
   b4686:	2000      	movs	r0, #0
   b4688:	f001 fef2 	bl	b6470 <spark_sync_time>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b468c:	4c1e      	ldr	r4, [pc, #120]	; (b4708 <_Z14syncSystemTimev+0x100>)
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b468e:	f001 fee7 	bl	b6460 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
   b4692:	b148      	cbz	r0, b46a8 <_Z14syncSystemTimev+0xa0>
   b4694:	2000      	movs	r0, #0
   b4696:	f001 fef3 	bl	b6480 <spark_sync_time_pending>
   b469a:	b128      	cbz	r0, b46a8 <_Z14syncSystemTimev+0xa0>
		return HAL_Timer_Get_Milli_Seconds();
   b469c:	f001 fc82 	bl	b5fa4 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b46a0:	6020      	str	r0, [r4, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b46a2:	f001 fecd 	bl	b6440 <spark_process>
    }
   b46a6:	e7f2      	b.n	b468e <_Z14syncSystemTimev+0x86>
    Particle.syncTime(); // is async
    while(Particle.syncTimePending()) { // wait for syncTime to complete
      Particle.process();
    }
    WITH_LOCK(Serial){
   b46a8:	f004 fb54 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b46ac:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b46ae:	f7ff fd65 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
      Serial.printlnf("Current time is: %s", Time.timeStr().c_str());
   b46b2:	f004 fb4f 	bl	b8d54 <_Z16_fetch_usbserialv>
   b46b6:	4604      	mov	r4, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b46b8:	f004 fa51 	bl	b8b5e <_ZN9TimeClass3nowEv>
   b46bc:	17c3      	asrs	r3, r0, #31
   b46be:	4602      	mov	r2, r0
   b46c0:	a802      	add	r0, sp, #8
   b46c2:	f004 f9f3 	bl	b8aac <_ZN9TimeClass7timeStrEx>
   b46c6:	9a02      	ldr	r2, [sp, #8]
   b46c8:	4910      	ldr	r1, [pc, #64]	; (b470c <_Z14syncSystemTimev+0x104>)
   b46ca:	4620      	mov	r0, r4
   b46cc:	f7ff fd5f 	bl	b418e <_ZN5Print8printlnfEPKcz>
   b46d0:	a802      	add	r0, sp, #8
   b46d2:	f003 fd3d 	bl	b8150 <_ZN6StringD1Ev>
    WITH_LOCK(Serial){
   b46d6:	a801      	add	r0, sp, #4
    }
  }
  else {
    WITH_LOCK(Serial) {
   b46d8:	f7ff fde2 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      Serial.println("WiFi failed to connect, skipping time synchronization");
    }
  }

  WiFi.off();
   b46dc:	4808      	ldr	r0, [pc, #32]	; (b4700 <_Z14syncSystemTimev+0xf8>)
   b46de:	f7ff fd6a 	bl	b41b6 <_ZN5spark9WiFiClass3offEv>
   b46e2:	b007      	add	sp, #28
   b46e4:	bd30      	pop	{r4, r5, pc}
    WITH_LOCK(Serial) {
   b46e6:	f004 fb35 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b46ea:	9002      	str	r0, [sp, #8]
      { _M_device.lock(); }
   b46ec:	f7ff fd46 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WiFi failed to connect, skipping time synchronization");
   b46f0:	f004 fb30 	bl	b8d54 <_Z16_fetch_usbserialv>
   b46f4:	4906      	ldr	r1, [pc, #24]	; (b4710 <_Z14syncSystemTimev+0x108>)
   b46f6:	f003 fc24 	bl	b7f42 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b46fa:	a802      	add	r0, sp, #8
   b46fc:	e7ec      	b.n	b46d8 <_Z14syncSystemTimev+0xd0>
   b46fe:	bf00      	nop
   b4700:	2003e7c0 	.word	0x2003e7c0
   b4704:	000b9d6e 	.word	0x000b9d6e
   b4708:	2003e7d0 	.word	0x2003e7d0
   b470c:	000b9d8b 	.word	0x000b9d8b
   b4710:	000b9d9f 	.word	0x000b9d9f

000b4714 <setup>:
void setup() {
   b4714:	b507      	push	{r0, r1, r2, lr}
  Serial.begin(9600);
   b4716:	f004 fb1d 	bl	b8d54 <_Z16_fetch_usbserialv>
   b471a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b471e:	f004 fb09 	bl	b8d34 <_ZN9USBSerial5beginEl>
  while(!Serial.isConnected()){}
   b4722:	f004 fb17 	bl	b8d54 <_Z16_fetch_usbserialv>
   b4726:	f004 fb09 	bl	b8d3c <_ZN9USBSerial11isConnectedEv>
   b472a:	2800      	cmp	r0, #0
   b472c:	d0f9      	beq.n	b4722 <setup+0xe>
  initHardware();
   b472e:	f7ff ff0b 	bl	b4548 <_Z12initHardwarev>
  HTTPRequestSetup(); 
   b4732:	f7ff fd51 	bl	b41d8 <_Z16HTTPRequestSetupv>
  initFromEEPROM();
   b4736:	f7ff fd65 	bl	b4204 <_Z14initFromEEPROMv>
  syncSystemTime();
   b473a:	f7ff ff65 	bl	b4608 <_Z14syncSystemTimev>
  os_mutex_create(&payloadAccessLock);
   b473e:	480a      	ldr	r0, [pc, #40]	; (b4768 <setup+0x54>)
   b4740:	f001 fbe8 	bl	b5f14 <os_mutex_create>
  os_mutex_unlock(&payloadAccessLock);
   b4744:	4808      	ldr	r0, [pc, #32]	; (b4768 <setup+0x54>)
   b4746:	f001 fbf5 	bl	b5f34 <os_mutex_unlock>
  os_thread_create(&reportingThreadHandle, "reportThread", OS_THREAD_PRIORITY_DEFAULT, reportingThread, NULL, 1024);
   b474a:	2300      	movs	r3, #0
   b474c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4750:	e9cd 3200 	strd	r3, r2, [sp]
   b4754:	4905      	ldr	r1, [pc, #20]	; (b476c <setup+0x58>)
   b4756:	4b06      	ldr	r3, [pc, #24]	; (b4770 <setup+0x5c>)
   b4758:	4806      	ldr	r0, [pc, #24]	; (b4774 <setup+0x60>)
   b475a:	2202      	movs	r2, #2
   b475c:	f001 fbca 	bl	b5ef4 <os_thread_create>
}
   b4760:	b003      	add	sp, #12
   b4762:	f85d fb04 	ldr.w	pc, [sp], #4
   b4766:	bf00      	nop
   b4768:	2003e060 	.word	0x2003e060
   b476c:	000b9dd5 	.word	0x000b9dd5
   b4770:	000b442d 	.word	0x000b442d
   b4774:	2003e078 	.word	0x2003e078

000b4778 <loop>:
void loop() {
   b4778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b477c:	ed2d 8b02 	vpush	{d8}
  switch (firmwareState) {
   b4780:	4ebd      	ldr	r6, [pc, #756]	; (b4a78 <loop+0x300>)
   b4782:	7835      	ldrb	r5, [r6, #0]
void loop() {
   b4784:	b097      	sub	sp, #92	; 0x5c
  switch (firmwareState) {
   b4786:	b13d      	cbz	r5, b4798 <loop+0x20>
   b4788:	2d01      	cmp	r5, #1
   b478a:	f000 80bf 	beq.w	b490c <loop+0x194>
}
   b478e:	b017      	add	sp, #92	; 0x5c
   b4790:	ecbd 8b02 	vpop	{d8}
   b4794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      WITH_LOCK(Serial) {
   b4798:	f004 fadc 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b479c:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b479e:	f7ff fced 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("BLEWAIT");
   b47a2:	f004 fad7 	bl	b8d54 <_Z16_fetch_usbserialv>
   b47a6:	49b5      	ldr	r1, [pc, #724]	; (b4a7c <loop+0x304>)
   b47a8:	f003 fbcb 	bl	b7f42 <_ZN5Print7printlnEPKc>
      WITH_LOCK(Serial) {
   b47ac:	a80d      	add	r0, sp, #52	; 0x34
   b47ae:	f7ff fd77 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      BLE.on();
   b47b2:	f002 fb6d 	bl	b6e90 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b47b6:	f002 fbb9 	bl	b6f2c <_ZNK8particle14BleLocalDevice2onEv>
      BLE.addCharacteristic(txCharacteristic);
   b47ba:	f002 fb69 	bl	b6e90 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b47be:	4ab0      	ldr	r2, [pc, #704]	; (b4a80 <loop+0x308>)
   b47c0:	4601      	mov	r1, r0
   b47c2:	a80d      	add	r0, sp, #52	; 0x34
   b47c4:	f003 f85c 	bl	b7880 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b47c8:	a80d      	add	r0, sp, #52	; 0x34
   b47ca:	f002 fc4a 	bl	b7062 <_ZN8particle17BleCharacteristicD1Ev>
      BLE.addCharacteristic(rxCharacteristic);
   b47ce:	f002 fb5f 	bl	b6e90 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b47d2:	4aac      	ldr	r2, [pc, #688]	; (b4a84 <loop+0x30c>)
   b47d4:	4601      	mov	r1, r0
   b47d6:	a80d      	add	r0, sp, #52	; 0x34
   b47d8:	f003 f852 	bl	b7880 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b47dc:	a80d      	add	r0, sp, #52	; 0x34
   b47de:	f002 fc40 	bl	b7062 <_ZN8particle17BleCharacteristicD1Ev>
      BleAdvertisingData data;
   b47e2:	a80d      	add	r0, sp, #52	; 0x34
   b47e4:	f002 f9bd 	bl	b6b62 <_ZN8particle18BleAdvertisingDataC1Ev>
      data.appendServiceUUID(serviceUuid);
   b47e8:	49a7      	ldr	r1, [pc, #668]	; (b4a88 <loop+0x310>)
   b47ea:	a803      	add	r0, sp, #12
   b47ec:	f002 f8be 	bl	b696c <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b47f0:	a903      	add	r1, sp, #12
   b47f2:	a808      	add	r0, sp, #32
   b47f4:	f002 f8ba 	bl	b696c <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b47f8:	a808      	add	r0, sp, #32
   b47fa:	f002 f8fd 	bl	b69f8 <_ZNK8particle7BleUuid4typeEv>
   b47fe:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4800:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4802:	2c00      	cmp	r4, #0
   b4804:	d13a      	bne.n	b487c <loop+0x104>
            uint16_t uuid16 = tempUUID.shorted();
   b4806:	f002 f913 	bl	b6a30 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b480a:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b480c:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4810:	2302      	movs	r3, #2
   b4812:	f10d 020a 	add.w	r2, sp, #10
   b4816:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4818:	a80d      	add	r0, sp, #52	; 0x34
   b481a:	f002 f997 	bl	b6b4c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
      BLE.advertise(&data);
   b481e:	f002 fb37 	bl	b6e90 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4822:	2200      	movs	r2, #0
   b4824:	a90d      	add	r1, sp, #52	; 0x34
   b4826:	f002 fba1 	bl	b6f6c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
      BLE.onConnected(connectCallback);
   b482a:	f002 fb31 	bl	b6e90 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b482e:	4997      	ldr	r1, [pc, #604]	; (b4a8c <loop+0x314>)
   b4830:	2200      	movs	r2, #0
   b4832:	f002 ff28 	bl	b7686 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
      BLE.onDisconnected(disconnectCallback);
   b4836:	f002 fb2b 	bl	b6e90 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b483a:	4995      	ldr	r1, [pc, #596]	; (b4a90 <loop+0x318>)
   b483c:	2200      	movs	r2, #0
   b483e:	f002 ff03 	bl	b7648 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
      int BLECountdown = 5000;
   b4842:	f241 3488 	movw	r4, #5000	; 0x1388
      while(!BLE.connected() && BLECountdown > 0) {
   b4846:	f002 fb23 	bl	b6e90 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b484a:	f002 fba2 	bl	b6f92 <_ZNK8particle14BleLocalDevice9connectedEv>
   b484e:	b900      	cbnz	r0, b4852 <loop+0xda>
   b4850:	b9dc      	cbnz	r4, b488a <loop+0x112>
      if(BLE.connected()){ 
   b4852:	f002 fb1d 	bl	b6e90 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4856:	f002 fb9c 	bl	b6f92 <_ZNK8particle14BleLocalDevice9connectedEv>
   b485a:	4c8e      	ldr	r4, [pc, #568]	; (b4a94 <loop+0x31c>)
   b485c:	bb40      	cbnz	r0, b48b0 <loop+0x138>
        bleWaitForConfig = false;
   b485e:	7020      	strb	r0, [r4, #0]
        WITH_LOCK(Serial) {
   b4860:	f004 fa78 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4864:	9008      	str	r0, [sp, #32]
      { _M_device.lock(); }
   b4866:	f7ff fc89 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("BLE not connected, continuing with stored settings.");
   b486a:	f004 fa73 	bl	b8d54 <_Z16_fetch_usbserialv>
   b486e:	498a      	ldr	r1, [pc, #552]	; (b4a98 <loop+0x320>)
   b4870:	f003 fb67 	bl	b7f42 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b4874:	a808      	add	r0, sp, #32
   b4876:	f7ff fd13 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b487a:	e028      	b.n	b48ce <loop+0x156>
   b487c:	f002 f8da 	bl	b6a34 <_ZNK8particle7BleUuid8rawBytesEv>
   b4880:	9500      	str	r5, [sp, #0]
   b4882:	4602      	mov	r2, r0
   b4884:	2310      	movs	r3, #16
   b4886:	2107      	movs	r1, #7
   b4888:	e7c6      	b.n	b4818 <loop+0xa0>
        WITH_LOCK(Serial) {
   b488a:	f004 fa63 	bl	b8d54 <_Z16_fetch_usbserialv>
        BLECountdown = BLECountdown - 10;
   b488e:	3c0a      	subs	r4, #10
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4890:	9008      	str	r0, [sp, #32]
      { _M_device.lock(); }
   b4892:	f7ff fc73 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(BLECountdown);
   b4896:	f004 fa5d 	bl	b8d54 <_Z16_fetch_usbserialv>
   b489a:	220a      	movs	r2, #10
   b489c:	4621      	mov	r1, r4
   b489e:	f7ff fc35 	bl	b410c <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b48a2:	a808      	add	r0, sp, #32
   b48a4:	f7ff fcfc 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        delay(10);
   b48a8:	200a      	movs	r0, #10
   b48aa:	f001 feb9 	bl	b6620 <delay>
      while(!BLE.connected() && BLECountdown > 0) {
   b48ae:	e7ca      	b.n	b4846 <loop+0xce>
        WITH_LOCK(Serial) {
   b48b0:	f004 fa50 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b48b4:	9008      	str	r0, [sp, #32]
      { _M_device.lock(); }
   b48b6:	f7ff fc61 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("BLE connected");
   b48ba:	f004 fa4b 	bl	b8d54 <_Z16_fetch_usbserialv>
   b48be:	4977      	ldr	r1, [pc, #476]	; (b4a9c <loop+0x324>)
   b48c0:	f003 fb3f 	bl	b7f42 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b48c4:	a808      	add	r0, sp, #32
   b48c6:	f7ff fceb 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        bleWaitForConfig = true;
   b48ca:	2301      	movs	r3, #1
   b48cc:	7023      	strb	r3, [r4, #0]
          Serial.println("bleWaitForConfig");
   b48ce:	4d74      	ldr	r5, [pc, #464]	; (b4aa0 <loop+0x328>)
      while(bleWaitForConfig) {
   b48d0:	7823      	ldrb	r3, [r4, #0]
   b48d2:	b183      	cbz	r3, b48f6 <loop+0x17e>
        WITH_LOCK(Serial) {
   b48d4:	f004 fa3e 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b48d8:	9008      	str	r0, [sp, #32]
      { _M_device.lock(); }
   b48da:	f7ff fc4f 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("bleWaitForConfig");
   b48de:	f004 fa39 	bl	b8d54 <_Z16_fetch_usbserialv>
   b48e2:	4629      	mov	r1, r5
   b48e4:	f003 fb2d 	bl	b7f42 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b48e8:	a808      	add	r0, sp, #32
   b48ea:	f7ff fcd9 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        delay(100);
   b48ee:	2064      	movs	r0, #100	; 0x64
   b48f0:	f001 fe96 	bl	b6620 <delay>
      while(bleWaitForConfig) {
   b48f4:	e7ec      	b.n	b48d0 <loop+0x158>
      BLE.disconnectAll();
   b48f6:	f002 facb 	bl	b6e90 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b48fa:	f002 fdd3 	bl	b74a4 <_ZNK8particle14BleLocalDevice13disconnectAllEv>
      BLE.off();
   b48fe:	f002 fac7 	bl	b6e90 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4902:	f002 fc38 	bl	b7176 <_ZNK8particle14BleLocalDevice3offEv>
      firmwareState = RECORDING;
   b4906:	2301      	movs	r3, #1
   b4908:	7033      	strb	r3, [r6, #0]
      break;
   b490a:	e740      	b.n	b478e <loop+0x16>
      WITH_LOCK(Serial) {
   b490c:	f004 fa22 	bl	b8d54 <_Z16_fetch_usbserialv>
      lis3dh.read();
   b4910:	4c64      	ldr	r4, [pc, #400]	; (b4aa4 <loop+0x32c>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4912:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b4914:	f7ff fc32 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("RECORDING");
   b4918:	f004 fa1c 	bl	b8d54 <_Z16_fetch_usbserialv>
   b491c:	4962      	ldr	r1, [pc, #392]	; (b4aa8 <loop+0x330>)
      x = lis3dh.x_g;
   b491e:	f8df b1b8 	ldr.w	fp, [pc, #440]	; b4ad8 <loop+0x360>
      y = lis3dh.y_g;
   b4922:	f8df 91b8 	ldr.w	r9, [pc, #440]	; b4adc <loop+0x364>
      z = lis3dh.z_g;
   b4926:	4f61      	ldr	r7, [pc, #388]	; (b4aac <loop+0x334>)
   b4928:	f8df a1b4 	ldr.w	sl, [pc, #436]	; b4ae0 <loop+0x368>
   b492c:	f8df 81b4 	ldr.w	r8, [pc, #436]	; b4ae4 <loop+0x36c>
   b4930:	4e5f      	ldr	r6, [pc, #380]	; (b4ab0 <loop+0x338>)
        Serial.println("RECORDING");
   b4932:	f003 fb06 	bl	b7f42 <_ZN5Print7printlnEPKc>
      WITH_LOCK(Serial) {
   b4936:	a80d      	add	r0, sp, #52	; 0x34
   b4938:	f7ff fcb2 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      lis3dh.read();
   b493c:	4620      	mov	r0, r4
   b493e:	f000 fec5 	bl	b56cc <_ZN15Adafruit_LIS3DH4readEv>
      if(!firstLIS3DHReading) {
   b4942:	4b5c      	ldr	r3, [pc, #368]	; (b4ab4 <loop+0x33c>)
      x = lis3dh.x_g;
   b4944:	edd4 7a03 	vldr	s15, [r4, #12]
      y = lis3dh.y_g;
   b4948:	edd4 8a04 	vldr	s17, [r4, #16]
      z = lis3dh.z_g;
   b494c:	ed94 8a05 	vldr	s16, [r4, #20]
      if(!firstLIS3DHReading) {
   b4950:	781a      	ldrb	r2, [r3, #0]
      x = lis3dh.x_g;
   b4952:	edcb 7a00 	vstr	s15, [fp]
      y = lis3dh.y_g;
   b4956:	edc9 8a00 	vstr	s17, [r9]
      z = lis3dh.z_g;
   b495a:	ed87 8a00 	vstr	s16, [r7]
      if(!firstLIS3DHReading) {
   b495e:	2a00      	cmp	r2, #0
   b4960:	d179      	bne.n	b4a56 <loop+0x2de>
        if(abs(x - prevX) > kDeltaAccelThreshold || abs(y - prevY) > kDeltaAccelThreshold || abs(z - prevZ) > kDeltaAccelThreshold) {
   b4962:	ed9a 7a00 	vldr	s14, [sl]
          storedValues[storedValuesIndex] = 0;
   b4966:	4c54      	ldr	r4, [pc, #336]	; (b4ab8 <loop+0x340>)
        if(abs(x - prevX) > kDeltaAccelThreshold || abs(y - prevY) > kDeltaAccelThreshold || abs(z - prevZ) > kDeltaAccelThreshold) {
   b4968:	ee77 7ac7 	vsub.f32	s15, s15, s14
          storedValues[storedValuesIndex] = 0;
   b496c:	6825      	ldr	r5, [r4, #0]
        if(abs(x - prevX) > kDeltaAccelThreshold || abs(y - prevY) > kDeltaAccelThreshold || abs(z - prevZ) > kDeltaAccelThreshold) {
   b496e:	eef0 7ae7 	vabs.f32	s15, s15
   b4972:	ee17 0a90 	vmov	r0, s15
   b4976:	f004 fee7 	bl	b9748 <__aeabi_f2d>
   b497a:	a33d      	add	r3, pc, #244	; (adr r3, b4a70 <loop+0x2f8>)
   b497c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4980:	f004 ffb8 	bl	b98f4 <__aeabi_dcmpgt>
   b4984:	2800      	cmp	r0, #0
   b4986:	d162      	bne.n	b4a4e <loop+0x2d6>
   b4988:	edd8 7a00 	vldr	s15, [r8]
   b498c:	ee78 8ae7 	vsub.f32	s17, s17, s15
   b4990:	eef0 7ae8 	vabs.f32	s15, s17
   b4994:	ee17 0a90 	vmov	r0, s15
   b4998:	f004 fed6 	bl	b9748 <__aeabi_f2d>
   b499c:	a334      	add	r3, pc, #208	; (adr r3, b4a70 <loop+0x2f8>)
   b499e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b49a2:	f004 ffa7 	bl	b98f4 <__aeabi_dcmpgt>
   b49a6:	2800      	cmp	r0, #0
   b49a8:	d151      	bne.n	b4a4e <loop+0x2d6>
   b49aa:	edd6 7a00 	vldr	s15, [r6]
   b49ae:	ee38 8a67 	vsub.f32	s16, s16, s15
   b49b2:	eef0 7ac8 	vabs.f32	s15, s16
   b49b6:	ee17 0a90 	vmov	r0, s15
   b49ba:	f004 fec5 	bl	b9748 <__aeabi_f2d>
   b49be:	a32c      	add	r3, pc, #176	; (adr r3, b4a70 <loop+0x2f8>)
   b49c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b49c4:	f004 ff96 	bl	b98f4 <__aeabi_dcmpgt>
   b49c8:	2800      	cmp	r0, #0
   b49ca:	d140      	bne.n	b4a4e <loop+0x2d6>
          storedValues[storedValuesIndex] = 0;
   b49cc:	4b3b      	ldr	r3, [pc, #236]	; (b4abc <loop+0x344>)
   b49ce:	5558      	strb	r0, [r3, r5]
        storedTimes[storedValuesIndex] = Time.now(); 
   b49d0:	f004 f8c5 	bl	b8b5e <_ZN9TimeClass3nowEv>
   b49d4:	4b3a      	ldr	r3, [pc, #232]	; (b4ac0 <loop+0x348>)
   b49d6:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
        storedValuesIndex++; 
   b49da:	6823      	ldr	r3, [r4, #0]
   b49dc:	3301      	adds	r3, #1
   b49de:	6023      	str	r3, [r4, #0]
        WITH_LOCK(Serial) {
   b49e0:	f004 f9b8 	bl	b8d54 <_Z16_fetch_usbserialv>
        os_mutex_lock(payloadAccessLock);
   b49e4:	4c37      	ldr	r4, [pc, #220]	; (b4ac4 <loop+0x34c>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b49e6:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b49e8:	f7ff fbc8 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("requesting payloadAccessLock");
   b49ec:	f004 f9b2 	bl	b8d54 <_Z16_fetch_usbserialv>
   b49f0:	4935      	ldr	r1, [pc, #212]	; (b4ac8 <loop+0x350>)
   b49f2:	f003 faa6 	bl	b7f42 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b49f6:	a80d      	add	r0, sp, #52	; 0x34
   b49f8:	f7ff fc52 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        os_mutex_lock(payloadAccessLock);
   b49fc:	6820      	ldr	r0, [r4, #0]
   b49fe:	f001 fa91 	bl	b5f24 <os_mutex_lock>
        delay(100);
   b4a02:	2064      	movs	r0, #100	; 0x64
   b4a04:	f001 fe0c 	bl	b6620 <delay>
        os_mutex_unlock(payloadAccessLock);
   b4a08:	6820      	ldr	r0, [r4, #0]
   b4a0a:	f001 fa93 	bl	b5f34 <os_mutex_unlock>
        WITH_LOCK(Serial) {
   b4a0e:	f004 f9a1 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4a12:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b4a14:	f7ff fbb2 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("payloadAccessLock released by RECORDING");
   b4a18:	f004 f99c 	bl	b8d54 <_Z16_fetch_usbserialv>
   b4a1c:	492b      	ldr	r1, [pc, #172]	; (b4acc <loop+0x354>)
          Serial.println("First reading");
   b4a1e:	f003 fa90 	bl	b7f42 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b4a22:	a80d      	add	r0, sp, #52	; 0x34
   b4a24:	f7ff fc3c 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      prevX = x;
   b4a28:	f8db 3000 	ldr.w	r3, [fp]
   b4a2c:	f8ca 3000 	str.w	r3, [sl]
      prevY = y;
   b4a30:	f8d9 3000 	ldr.w	r3, [r9]
   b4a34:	f8c8 3000 	str.w	r3, [r8]
      prevZ = z;
   b4a38:	683b      	ldr	r3, [r7, #0]
   b4a3a:	6033      	str	r3, [r6, #0]
      delay(recordingInterval);
   b4a3c:	4b24      	ldr	r3, [pc, #144]	; (b4ad0 <loop+0x358>)
   b4a3e:	6818      	ldr	r0, [r3, #0]
}
   b4a40:	b017      	add	sp, #92	; 0x5c
   b4a42:	ecbd 8b02 	vpop	{d8}
   b4a46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      delay(recordingInterval);
   b4a4a:	f001 bde9 	b.w	b6620 <delay>
          storedValues[storedValuesIndex] = 1;
   b4a4e:	4a1b      	ldr	r2, [pc, #108]	; (b4abc <loop+0x344>)
   b4a50:	2301      	movs	r3, #1
   b4a52:	5553      	strb	r3, [r2, r5]
   b4a54:	e7bc      	b.n	b49d0 <loop+0x258>
        firstLIS3DHReading = false;
   b4a56:	2200      	movs	r2, #0
   b4a58:	701a      	strb	r2, [r3, #0]
        WITH_LOCK(Serial) {
   b4a5a:	f004 f97b 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4a5e:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b4a60:	f7ff fb8c 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("First reading");
   b4a64:	f004 f976 	bl	b8d54 <_Z16_fetch_usbserialv>
   b4a68:	491a      	ldr	r1, [pc, #104]	; (b4ad4 <loop+0x35c>)
   b4a6a:	e7d8      	b.n	b4a1e <loop+0x2a6>
   b4a6c:	f3af 8000 	nop.w
   b4a70:	9999999a 	.word	0x9999999a
   b4a74:	3fa99999 	.word	0x3fa99999
   b4a78:	2003dac8 	.word	0x2003dac8
   b4a7c:	000b9de2 	.word	0x000b9de2
   b4a80:	2003e5f8 	.word	0x2003e5f8
   b4a84:	2003e0dc 	.word	0x2003e0dc
   b4a88:	2003da70 	.word	0x2003da70
   b4a8c:	000b45a1 	.word	0x000b45a1
   b4a90:	000b45d9 	.word	0x000b45d9
   b4a94:	2003dac0 	.word	0x2003dac0
   b4a98:	000b9df8 	.word	0x000b9df8
   b4a9c:	000b9dea 	.word	0x000b9dea
   b4aa0:	000b9e2c 	.word	0x000b9e2c
   b4aa4:	2003dee8 	.word	0x2003dee8
   b4aa8:	000b9e78 	.word	0x000b9e78
   b4aac:	2003e61c 	.word	0x2003e61c
   b4ab0:	2003e06c 	.word	0x2003e06c
   b4ab4:	2003d9d8 	.word	0x2003d9d8
   b4ab8:	2003e5f4 	.word	0x2003e5f4
   b4abc:	2003e4f4 	.word	0x2003e4f4
   b4ac0:	2003e0f4 	.word	0x2003e0f4
   b4ac4:	2003e060 	.word	0x2003e060
   b4ac8:	000b9e3d 	.word	0x000b9e3d
   b4acc:	000b9e5a 	.word	0x000b9e5a
   b4ad0:	2003e070 	.word	0x2003e070
   b4ad4:	000b9e82 	.word	0x000b9e82
   b4ad8:	2003e614 	.word	0x2003e614
   b4adc:	2003e618 	.word	0x2003e618
   b4ae0:	2003e064 	.word	0x2003e064
   b4ae4:	2003e068 	.word	0x2003e068

000b4ae8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch(bleQuestionCount){
   b4aec:	4daf      	ldr	r5, [pc, #700]	; (b4dac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c4>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4aee:	b095      	sub	sp, #84	; 0x54
   b4af0:	4607      	mov	r7, r0
   b4af2:	460c      	mov	r4, r1
  bleInputBuffer = "";
   b4af4:	48ae      	ldr	r0, [pc, #696]	; (b4db0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4af6:	49af      	ldr	r1, [pc, #700]	; (b4db4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
   b4af8:	f003 fba3 	bl	b8242 <_ZN6StringaSEPKc>
  switch(bleQuestionCount){
   b4afc:	682b      	ldr	r3, [r5, #0]
   b4afe:	2b07      	cmp	r3, #7
   b4b00:	f200 810e 	bhi.w	b4d20 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x238>
   b4b04:	e8df f013 	tbh	[pc, r3, lsl #1]
   b4b08:	00c8017d 	.word	0x00c8017d
   b4b0c:	008c00a7 	.word	0x008c00a7
   b4b10:	0048006a 	.word	0x0048006a
   b4b14:	00080023 	.word	0x00080023
   b4b18:	443c      	add	r4, r7
   b4b1a:	1e7e      	subs	r6, r7, #1
	String & operator += (char c)			{concat(c); return (*this);}
   b4b1c:	4fa4      	ldr	r7, [pc, #656]	; (b4db0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4b1e:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4b20:	42b4      	cmp	r4, r6
   b4b22:	f000 82fd 	beq.w	b5120 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x638>
        WITH_LOCK(Serial) {
   b4b26:	f004 f915 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4b2a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4b2c:	f7ff fb26 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4b30:	f004 f910 	bl	b8d54 <_Z16_fetch_usbserialv>
   b4b34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4b38:	220a      	movs	r2, #10
   b4b3a:	f7ff fad8 	bl	b40ee <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4b3e:	a801      	add	r0, sp, #4
   b4b40:	f7ff fbae 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4b44:	7831      	ldrb	r1, [r6, #0]
   b4b46:	4638      	mov	r0, r7
   b4b48:	f003 fbce 	bl	b82e8 <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   b4b4c:	e7e8      	b.n	b4b20 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x38>
   b4b4e:	443c      	add	r4, r7
   b4b50:	1e7e      	subs	r6, r7, #1
   b4b52:	f8df 825c 	ldr.w	r8, [pc, #604]	; b4db0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>
   b4b56:	4f98      	ldr	r7, [pc, #608]	; (b4db8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d0>)
   b4b58:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4b5a:	42a6      	cmp	r6, r4
   b4b5c:	f000 827d 	beq.w	b505a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x572>
        WITH_LOCK(Serial) {
   b4b60:	f004 f8f8 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4b64:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4b66:	f7ff fb09 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4b6a:	f004 f8f3 	bl	b8d54 <_Z16_fetch_usbserialv>
   b4b6e:	220a      	movs	r2, #10
   b4b70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4b74:	f7ff fabb 	bl	b40ee <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4b78:	a801      	add	r0, sp, #4
   b4b7a:	f7ff fb91 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4b7e:	7831      	ldrb	r1, [r6, #0]
   b4b80:	488b      	ldr	r0, [pc, #556]	; (b4db0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4b82:	f003 fbb1 	bl	b82e8 <_ZN6String6concatEc>
        reportingInterval = atoi(bleInputBuffer) * 1000;
   b4b86:	f8d8 0000 	ldr.w	r0, [r8]
   b4b8a:	f004 fee3 	bl	b9954 <atoi>
   b4b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4b92:	4358      	muls	r0, r3
   b4b94:	6038      	str	r0, [r7, #0]
      for(int i = 0; i < len - 1; i++){
   b4b96:	e7e0      	b.n	b4b5a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x72>
   b4b98:	443c      	add	r4, r7
   b4b9a:	1e7e      	subs	r6, r7, #1
   b4b9c:	f8df 8210 	ldr.w	r8, [pc, #528]	; b4db0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>
        recordingInterval = atoi(bleInputBuffer);
   b4ba0:	4f86      	ldr	r7, [pc, #536]	; (b4dbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d4>)
   b4ba2:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4ba4:	42a6      	cmp	r6, r4
   b4ba6:	f000 821b 	beq.w	b4fe0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4f8>
        WITH_LOCK(Serial) {
   b4baa:	f004 f8d3 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4bae:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4bb0:	f7ff fae4 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4bb4:	f004 f8ce 	bl	b8d54 <_Z16_fetch_usbserialv>
   b4bb8:	220a      	movs	r2, #10
   b4bba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4bbe:	f7ff fa96 	bl	b40ee <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4bc2:	a801      	add	r0, sp, #4
   b4bc4:	f7ff fb6c 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4bc8:	7831      	ldrb	r1, [r6, #0]
   b4bca:	4879      	ldr	r0, [pc, #484]	; (b4db0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4bcc:	f003 fb8c 	bl	b82e8 <_ZN6String6concatEc>
        recordingInterval = atoi(bleInputBuffer);
   b4bd0:	f8d8 0000 	ldr.w	r0, [r8]
   b4bd4:	f004 febe 	bl	b9954 <atoi>
   b4bd8:	6038      	str	r0, [r7, #0]
      for(int i = 0; i < len - 1; i++){
   b4bda:	e7e3      	b.n	b4ba4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xbc>
   b4bdc:	443c      	add	r4, r7
   b4bde:	1e7e      	subs	r6, r7, #1
   b4be0:	f8df 81cc 	ldr.w	r8, [pc, #460]	; b4db0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>
   b4be4:	4f76      	ldr	r7, [pc, #472]	; (b4dc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d8>)
   b4be6:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4be8:	42b4      	cmp	r4, r6
   b4bea:	f000 81b2 	beq.w	b4f52 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x46a>
        WITH_LOCK(Serial) {
   b4bee:	f004 f8b1 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4bf2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4bf4:	f7ff fac2 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4bf8:	f004 f8ac 	bl	b8d54 <_Z16_fetch_usbserialv>
   b4bfc:	220a      	movs	r2, #10
   b4bfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4c02:	f7ff fa74 	bl	b40ee <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4c06:	a801      	add	r0, sp, #4
   b4c08:	f7ff fb4a 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4c0c:	7831      	ldrb	r1, [r6, #0]
   b4c0e:	4868      	ldr	r0, [pc, #416]	; (b4db0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4c10:	f003 fb6a 	bl	b82e8 <_ZN6String6concatEc>
        dsid = atoi(bleInputBuffer);
   b4c14:	f8d8 0000 	ldr.w	r0, [r8]
   b4c18:	f004 fe9c 	bl	b9954 <atoi>
   b4c1c:	6038      	str	r0, [r7, #0]
      for(int i = 0; i < len - 1; i++){
   b4c1e:	e7e3      	b.n	b4be8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>
   b4c20:	443c      	add	r4, r7
   b4c22:	1e7e      	subs	r6, r7, #1
   b4c24:	4f62      	ldr	r7, [pc, #392]	; (b4db0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4c26:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4c28:	42a6      	cmp	r6, r4
   b4c2a:	f000 80a0 	beq.w	b4d6e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x286>
        WITH_LOCK(Serial) {
   b4c2e:	f004 f891 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4c32:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4c34:	f7ff faa2 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4c38:	f004 f88c 	bl	b8d54 <_Z16_fetch_usbserialv>
   b4c3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4c40:	220a      	movs	r2, #10
   b4c42:	f7ff fa54 	bl	b40ee <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4c46:	a801      	add	r0, sp, #4
   b4c48:	f7ff fb2a 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4c4c:	7831      	ldrb	r1, [r6, #0]
   b4c4e:	4638      	mov	r0, r7
   b4c50:	f003 fb4a 	bl	b82e8 <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   b4c54:	e7e8      	b.n	b4c28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>
   b4c56:	443c      	add	r4, r7
   b4c58:	1e7e      	subs	r6, r7, #1
        password = bleInputBuffer;
   b4c5a:	f8df 8184 	ldr.w	r8, [pc, #388]	; b4de0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f8>
   b4c5e:	4f54      	ldr	r7, [pc, #336]	; (b4db0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4c60:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4c62:	42a6      	cmp	r6, r4
   b4c64:	f000 810d 	beq.w	b4e82 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x39a>
        WITH_LOCK(Serial) {
   b4c68:	f004 f874 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4c6c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4c6e:	f7ff fa85 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4c72:	f004 f86f 	bl	b8d54 <_Z16_fetch_usbserialv>
   b4c76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4c7a:	220a      	movs	r2, #10
   b4c7c:	f7ff fa37 	bl	b40ee <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4c80:	a801      	add	r0, sp, #4
   b4c82:	f7ff fb0d 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4c86:	7831      	ldrb	r1, [r6, #0]
   b4c88:	4638      	mov	r0, r7
   b4c8a:	f003 fb2d 	bl	b82e8 <_ZN6String6concatEc>
        password = bleInputBuffer;
   b4c8e:	4639      	mov	r1, r7
   b4c90:	4640      	mov	r0, r8
   b4c92:	f003 fabc 	bl	b820e <_ZN6StringaSERKS_>
      for(int i = 0; i < len - 1; i++){
   b4c96:	e7e4      	b.n	b4c62 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x17a>
   b4c98:	443c      	add	r4, r7
   b4c9a:	1e7e      	subs	r6, r7, #1
        ssid = bleInputBuffer;
   b4c9c:	f8df 8134 	ldr.w	r8, [pc, #308]	; b4dd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ec>
   b4ca0:	4f43      	ldr	r7, [pc, #268]	; (b4db0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4ca2:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4ca4:	42b4      	cmp	r4, r6
   b4ca6:	d041      	beq.n	b4d2c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x244>
   b4ca8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4cac:	4638      	mov	r0, r7
   b4cae:	f003 fb1b 	bl	b82e8 <_ZN6String6concatEc>
        ssid = bleInputBuffer;
   b4cb2:	4639      	mov	r1, r7
   b4cb4:	4640      	mov	r0, r8
   b4cb6:	f003 faaa 	bl	b820e <_ZN6StringaSERKS_>
        WITH_LOCK(Serial) {
   b4cba:	f004 f84b 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4cbe:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4cc0:	f7ff fa5c 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4cc4:	f004 f846 	bl	b8d54 <_Z16_fetch_usbserialv>
   b4cc8:	7831      	ldrb	r1, [r6, #0]
   b4cca:	220a      	movs	r2, #10
   b4ccc:	f7ff fa0f 	bl	b40ee <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4cd0:	a801      	add	r0, sp, #4
   b4cd2:	f7ff fae5 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      for(int i = 0; i < len - 1; i++){
   b4cd6:	e7e5      	b.n	b4ca4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1bc>
      networkBuffer = networks[networkCount - 1].ssid;
   b4cd8:	4b3a      	ldr	r3, [pc, #232]	; (b4dc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2dc>)
   b4cda:	483b      	ldr	r0, [pc, #236]	; (b4dc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e0>)
   b4cdc:	2238      	movs	r2, #56	; 0x38
   b4cde:	fb02 3101 	mla	r1, r2, r1, r3
   b4ce2:	3104      	adds	r1, #4
   b4ce4:	f003 faad 	bl	b8242 <_ZN6StringaSEPKc>
      WITH_LOCK(Serial) {
   b4ce8:	f004 f834 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4cec:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4cee:	f7ff fa45 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(networkBuffer.length());
   b4cf2:	f004 f82f 	bl	b8d54 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4cf6:	68a1      	ldr	r1, [r4, #8]
   b4cf8:	220a      	movs	r2, #10
   b4cfa:	4606      	mov	r6, r0
   b4cfc:	f003 f92b 	bl	b7f56 <_ZN5Print11printNumberEmh>
        n += println();
   b4d00:	4630      	mov	r0, r6
   b4d02:	f003 f912 	bl	b7f2a <_ZN5Print7printlnEv>
      WITH_LOCK(Serial) {
   b4d06:	a801      	add	r0, sp, #4
   b4d08:	f7ff faca 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      txCharacteristic.setValue(networkBuffer);
   b4d0c:	492e      	ldr	r1, [pc, #184]	; (b4dc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e0>)
   b4d0e:	482f      	ldr	r0, [pc, #188]	; (b4dcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   b4d10:	2200      	movs	r2, #0
   b4d12:	f001 ffeb 	bl	b6cec <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
      txCharacteristic.setValue("]\nEnter network SSID (blank to skip, 'clear' to reset credentials): ");
   b4d16:	492e      	ldr	r1, [pc, #184]	; (b4dd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e8>)
   b4d18:	2200      	movs	r2, #0
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   b4d1a:	482c      	ldr	r0, [pc, #176]	; (b4dcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   b4d1c:	f001 ffeb 	bl	b6cf6 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
  bleQuestionCount++;
   b4d20:	682b      	ldr	r3, [r5, #0]
   b4d22:	3301      	adds	r3, #1
   b4d24:	602b      	str	r3, [r5, #0]
}
   b4d26:	b015      	add	sp, #84	; 0x54
   b4d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      WITH_LOCK(Serial) {
   b4d2c:	f004 f812 	bl	b8d54 <_Z16_fetch_usbserialv>
	const char * c_str() const { return buffer; }
   b4d30:	4e28      	ldr	r6, [pc, #160]	; (b4dd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ec>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4d32:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4d34:	f7ff fa22 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(ssid);
   b4d38:	f004 f80c 	bl	b8d54 <_Z16_fetch_usbserialv>
   b4d3c:	6831      	ldr	r1, [r6, #0]
   b4d3e:	f003 f900 	bl	b7f42 <_ZN5Print7printlnEPKc>
        Serial.println(ssid.length());
   b4d42:	f004 f807 	bl	b8d54 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4d46:	68b1      	ldr	r1, [r6, #8]
   b4d48:	220a      	movs	r2, #10
   b4d4a:	4604      	mov	r4, r0
   b4d4c:	f003 f903 	bl	b7f56 <_ZN5Print11printNumberEmh>
        n += println();
   b4d50:	4620      	mov	r0, r4
   b4d52:	f003 f8ea 	bl	b7f2a <_ZN5Print7printlnEv>
      WITH_LOCK(Serial) {
   b4d56:	a801      	add	r0, sp, #4
   b4d58:	f7ff faa2 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4d5c:	4915      	ldr	r1, [pc, #84]	; (b4db4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
   b4d5e:	4630      	mov	r0, r6
   b4d60:	f003 fb0b 	bl	b837a <_ZNK6String6equalsEPKc>
      if(ssid == ""){
   b4d64:	4604      	mov	r4, r0
   b4d66:	2800      	cmp	r0, #0
   b4d68:	d03c      	beq.n	b4de4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2fc>
        bleQuestionCount = 3;
   b4d6a:	2303      	movs	r3, #3
   b4d6c:	602b      	str	r3, [r5, #0]
   b4d6e:	4c14      	ldr	r4, [pc, #80]	; (b4dc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d8>)
        EEPROM.get(0, dsid);
   b4d70:	f004 fa14 	bl	b919c <_Z21__fetch_global_EEPROMv>
   b4d74:	4621      	mov	r1, r4
   b4d76:	2204      	movs	r2, #4
   b4d78:	2000      	movs	r0, #0
   b4d7a:	f001 f923 	bl	b5fc4 <HAL_EEPROM_Get>
        txCharacteristic.setValue("\nCurrent DSID is [");
   b4d7e:	4916      	ldr	r1, [pc, #88]	; (b4dd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f0>)
   b4d80:	4812      	ldr	r0, [pc, #72]	; (b4dcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   b4d82:	2200      	movs	r2, #0
   b4d84:	f001 ffb7 	bl	b6cf6 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        if(dsid != -1){
   b4d88:	6821      	ldr	r1, [r4, #0]
   b4d8a:	1c4c      	adds	r4, r1, #1
   b4d8c:	d00b      	beq.n	b4da6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2be>
          txCharacteristic.setValue(String(dsid));
   b4d8e:	220a      	movs	r2, #10
   b4d90:	a801      	add	r0, sp, #4
   b4d92:	f003 fa68 	bl	b8266 <_ZN6StringC1Eih>
   b4d96:	480d      	ldr	r0, [pc, #52]	; (b4dcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   b4d98:	2200      	movs	r2, #0
   b4d9a:	a901      	add	r1, sp, #4
   b4d9c:	f001 ffa6 	bl	b6cec <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b4da0:	a801      	add	r0, sp, #4
   b4da2:	f003 f9d5 	bl	b8150 <_ZN6StringD1Ev>
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   b4da6:	490d      	ldr	r1, [pc, #52]	; (b4ddc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f4>)
   b4da8:	2200      	movs	r2, #0
   b4daa:	e7b6      	b.n	b4d1a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x232>
   b4dac:	2003dabc 	.word	0x2003dabc
   b4db0:	2003daac 	.word	0x2003daac
   b4db4:	000b9f86 	.word	0x000b9f86
   b4db8:	2003e074 	.word	0x2003e074
   b4dbc:	2003e070 	.word	0x2003e070
   b4dc0:	2003dac4 	.word	0x2003dac4
   b4dc4:	2003df28 	.word	0x2003df28
   b4dc8:	2003df14 	.word	0x2003df14
   b4dcc:	2003e5f8 	.word	0x2003e5f8
   b4dd0:	000b9ebc 	.word	0x000b9ebc
   b4dd4:	2003e0e4 	.word	0x2003e0e4
   b4dd8:	000b9f01 	.word	0x000b9f01
   b4ddc:	000b9f14 	.word	0x000b9f14
   b4de0:	2003e040 	.word	0x2003e040
   b4de4:	49b2      	ldr	r1, [pc, #712]	; (b50b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c8>)
   b4de6:	4630      	mov	r0, r6
   b4de8:	f003 fac7 	bl	b837a <_ZNK6String6equalsEPKc>
      }else if(ssid == "clear"){
   b4dec:	4602      	mov	r2, r0
   b4dee:	2800      	cmp	r0, #0
   b4df0:	d045      	beq.n	b4e7e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x396>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   b4df2:	48b0      	ldr	r0, [pc, #704]	; (b50b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5cc>)
   b4df4:	4623      	mov	r3, r4
   b4df6:	6840      	ldr	r0, [r0, #4]
   b4df8:	4622      	mov	r2, r4
   b4dfa:	4621      	mov	r1, r4
   b4dfc:	f001 fb98 	bl	b6530 <network_clear_credentials>
        bleQuestionCount = 0;
   b4e00:	602c      	str	r4, [r5, #0]
      txCharacteristic.setValue("\nCredentials are currently stored for:\n[");
   b4e02:	49ad      	ldr	r1, [pc, #692]	; (b50b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d0>)
   b4e04:	48ad      	ldr	r0, [pc, #692]	; (b50bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d4>)
      networkCount = WiFi.getCredentials(networks, 5);
   b4e06:	f8df a310 	ldr.w	sl, [pc, #784]	; b5118 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x630>
   b4e0a:	4ead      	ldr	r6, [pc, #692]	; (b50c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d8>)
   b4e0c:	4cad      	ldr	r4, [pc, #692]	; (b50c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5dc>)
        txCharacteristic.setValue(networkBuffer);
   b4e0e:	f8df 82ac 	ldr.w	r8, [pc, #684]	; b50bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d4>
        txCharacteristic.setValue(",\n");
   b4e12:	f8df 9308 	ldr.w	r9, [pc, #776]	; b511c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x634>
      txCharacteristic.setValue("\nCredentials are currently stored for:\n[");
   b4e16:	2200      	movs	r2, #0
   b4e18:	f001 ff6d 	bl	b6cf6 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      networkCount = WiFi.getCredentials(networks, 5);
   b4e1c:	49aa      	ldr	r1, [pc, #680]	; (b50c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e0>)
   b4e1e:	48a5      	ldr	r0, [pc, #660]	; (b50b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5cc>)
   b4e20:	2205      	movs	r2, #5
   b4e22:	f003 fff7 	bl	b8e14 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>
      for(int i = 0; i < networkCount - 1; i++){
   b4e26:	2700      	movs	r7, #0
      networkCount = WiFi.getCredentials(networks, 5);
   b4e28:	f8ca 0000 	str.w	r0, [sl]
      for(int i = 0; i < networkCount - 1; i++){
   b4e2c:	f8da 1000 	ldr.w	r1, [sl]
   b4e30:	3901      	subs	r1, #1
   b4e32:	42b9      	cmp	r1, r7
   b4e34:	f77f af50 	ble.w	b4cd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1f0>
        networkBuffer = networks[i].ssid;
   b4e38:	4631      	mov	r1, r6
   b4e3a:	4620      	mov	r0, r4
   b4e3c:	f003 fa01 	bl	b8242 <_ZN6StringaSEPKc>
        WITH_LOCK(Serial) {
   b4e40:	f003 ff88 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4e44:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4e46:	f7ff f999 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(networkBuffer.length());
   b4e4a:	f003 ff83 	bl	b8d54 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4e4e:	68a1      	ldr	r1, [r4, #8]
   b4e50:	220a      	movs	r2, #10
   b4e52:	4683      	mov	fp, r0
   b4e54:	f003 f87f 	bl	b7f56 <_ZN5Print11printNumberEmh>
        n += println();
   b4e58:	4658      	mov	r0, fp
   b4e5a:	f003 f866 	bl	b7f2a <_ZN5Print7printlnEv>
        WITH_LOCK(Serial) {
   b4e5e:	a801      	add	r0, sp, #4
   b4e60:	f7ff fa1e 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        txCharacteristic.setValue(networkBuffer);
   b4e64:	2200      	movs	r2, #0
   b4e66:	4621      	mov	r1, r4
   b4e68:	4640      	mov	r0, r8
   b4e6a:	f001 ff3f 	bl	b6cec <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        txCharacteristic.setValue(",\n");
   b4e6e:	2200      	movs	r2, #0
   b4e70:	4649      	mov	r1, r9
   b4e72:	4640      	mov	r0, r8
   b4e74:	f001 ff3f 	bl	b6cf6 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      for(int i = 0; i < networkCount - 1; i++){
   b4e78:	3701      	adds	r7, #1
   b4e7a:	3638      	adds	r6, #56	; 0x38
   b4e7c:	e7d6      	b.n	b4e2c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x344>
        txCharacteristic.setValue("\nEnter network password: ");
   b4e7e:	4993      	ldr	r1, [pc, #588]	; (b50cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e4>)
   b4e80:	e74b      	b.n	b4d1a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x232>
      WITH_LOCK(Serial) {
   b4e82:	f003 ff67 	bl	b8d54 <_Z16_fetch_usbserialv>
	const char * c_str() const { return buffer; }
   b4e86:	4c92      	ldr	r4, [pc, #584]	; (b50d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e8>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4e88:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4e8a:	f7ff f977 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(password);
   b4e8e:	f003 ff61 	bl	b8d54 <_Z16_fetch_usbserialv>
   b4e92:	6821      	ldr	r1, [r4, #0]
   b4e94:	f003 f855 	bl	b7f42 <_ZN5Print7printlnEPKc>
        Serial.println(password.length());
   b4e98:	f003 ff5c 	bl	b8d54 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4e9c:	68a1      	ldr	r1, [r4, #8]
   b4e9e:	4606      	mov	r6, r0
   b4ea0:	220a      	movs	r2, #10
   b4ea2:	f003 f858 	bl	b7f56 <_ZN5Print11printNumberEmh>
        n += println();
   b4ea6:	4630      	mov	r0, r6
   b4ea8:	f003 f83f 	bl	b7f2a <_ZN5Print7printlnEv>
      WITH_LOCK(Serial) {
   b4eac:	a801      	add	r0, sp, #4
   b4eae:	f7ff f9f7 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4eb2:	4b88      	ldr	r3, [pc, #544]	; (b50d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b4eb4:	6826      	ldr	r6, [r4, #0]
   b4eb6:	f8d3 8000 	ldr.w	r8, [r3]
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4eba:	f1b8 0f00 	cmp.w	r8, #0
   b4ebe:	d044      	beq.n	b4f4a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x462>
   b4ec0:	4640      	mov	r0, r8
   b4ec2:	f004 fded 	bl	b9aa0 <strlen>
   b4ec6:	4607      	mov	r7, r0
   b4ec8:	2e00      	cmp	r6, #0
   b4eca:	d040      	beq.n	b4f4e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x466>
   b4ecc:	4630      	mov	r0, r6
   b4ece:	f004 fde7 	bl	b9aa0 <strlen>
   b4ed2:	4604      	mov	r4, r0
        memset(&creds, 0, sizeof(creds));
   b4ed4:	2238      	movs	r2, #56	; 0x38
   b4ed6:	2100      	movs	r1, #0
   b4ed8:	a806      	add	r0, sp, #24
   b4eda:	f004 fd99 	bl	b9a10 <memset>
        creds.size = sizeof(creds);
   b4ede:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b4ee0:	e9cd 3801 	strd	r3, r8, [sp, #4]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4ee4:	4873      	ldr	r0, [pc, #460]	; (b50b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5cc>)
        creds.password_len = passwordLen;
   b4ee6:	9405      	str	r4, [sp, #20]
        creds.security = WLanSecurityType(security);
   b4ee8:	2303      	movs	r3, #3
   b4eea:	f88d 3018 	strb.w	r3, [sp, #24]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4eee:	2300      	movs	r3, #0
   b4ef0:	aa01      	add	r2, sp, #4
   b4ef2:	4619      	mov	r1, r3
   b4ef4:	6840      	ldr	r0, [r0, #4]
        creds.password = password;
   b4ef6:	e9cd 7603 	strd	r7, r6, [sp, #12]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4efa:	f001 fb11 	bl	b6520 <network_set_credentials>
      WITH_LOCK(Serial) {
   b4efe:	f003 ff29 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4f02:	9000      	str	r0, [sp, #0]
      { _M_device.lock(); }
   b4f04:	f7ff f93a 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("\n\nCredentials set with ssid: " + ssid + "\npassword: " + password + "\n\n");
   b4f08:	f003 ff24 	bl	b8d54 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4f0c:	4972      	ldr	r1, [pc, #456]	; (b50d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f0>)
   b4f0e:	4604      	mov	r4, r0
   b4f10:	a801      	add	r0, sp, #4
   b4f12:	f003 f968 	bl	b81e6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4f16:	496f      	ldr	r1, [pc, #444]	; (b50d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b4f18:	a801      	add	r0, sp, #4
   b4f1a:	f003 fa03 	bl	b8324 <_ZplRK15StringSumHelperRK6String>
   b4f1e:	496f      	ldr	r1, [pc, #444]	; (b50dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   b4f20:	f003 fa0c 	bl	b833c <_ZplRK15StringSumHelperPKc>
   b4f24:	496a      	ldr	r1, [pc, #424]	; (b50d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e8>)
   b4f26:	f003 f9fd 	bl	b8324 <_ZplRK15StringSumHelperRK6String>
   b4f2a:	496d      	ldr	r1, [pc, #436]	; (b50e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f8>)
   b4f2c:	f003 fa06 	bl	b833c <_ZplRK15StringSumHelperPKc>
   b4f30:	6801      	ldr	r1, [r0, #0]
   b4f32:	4620      	mov	r0, r4
   b4f34:	f003 f805 	bl	b7f42 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4f38:	a801      	add	r0, sp, #4
   b4f3a:	f003 f909 	bl	b8150 <_ZN6StringD1Ev>
      WITH_LOCK(Serial) {
   b4f3e:	4668      	mov	r0, sp
   b4f40:	f7ff f9ae 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      txCharacteristic.setValue("\nEnter 'test' to test credentials (blank to skip): ");
   b4f44:	4967      	ldr	r1, [pc, #412]	; (b50e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5fc>)
   b4f46:	2200      	movs	r2, #0
   b4f48:	e6e7      	b.n	b4d1a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x232>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4f4a:	4647      	mov	r7, r8
   b4f4c:	e7bc      	b.n	b4ec8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3e0>
   b4f4e:	4634      	mov	r4, r6
   b4f50:	e7c0      	b.n	b4ed4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3ec>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b4f52:	4965      	ldr	r1, [pc, #404]	; (b50e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x600>)
   b4f54:	4865      	ldr	r0, [pc, #404]	; (b50ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x604>)
   b4f56:	f003 fa10 	bl	b837a <_ZNK6String6equalsEPKc>
      if(bleInputBuffer != ""){
   b4f5a:	4604      	mov	r4, r0
   b4f5c:	b998      	cbnz	r0, b4f86 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x49e>
        EEPROM.put(0, dsid);
   b4f5e:	f004 f91d 	bl	b919c <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b4f62:	4963      	ldr	r1, [pc, #396]	; (b50f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x608>)
   b4f64:	2204      	movs	r2, #4
   b4f66:	4620      	mov	r0, r4
   b4f68:	f001 f834 	bl	b5fd4 <HAL_EEPROM_Put>
        WITH_LOCK(Serial) {
   b4f6c:	f003 fef2 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4f70:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4f72:	f7ff f903 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("dsid entered");
   b4f76:	f003 feed 	bl	b8d54 <_Z16_fetch_usbserialv>
   b4f7a:	495e      	ldr	r1, [pc, #376]	; (b50f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60c>)
   b4f7c:	f002 ffe1 	bl	b7f42 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b4f80:	a801      	add	r0, sp, #4
   b4f82:	f7ff f98d 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      EEPROM.get(0, dsid);
   b4f86:	f004 f909 	bl	b919c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b4f8a:	2204      	movs	r2, #4
   b4f8c:	4958      	ldr	r1, [pc, #352]	; (b50f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x608>)
   b4f8e:	4c5a      	ldr	r4, [pc, #360]	; (b50f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x610>)
   b4f90:	2000      	movs	r0, #0
   b4f92:	f001 f817 	bl	b5fc4 <HAL_EEPROM_Get>
      Serial.println("dsid: " + dsid);
   b4f96:	f003 fedd 	bl	b8d54 <_Z16_fetch_usbserialv>
   b4f9a:	683b      	ldr	r3, [r7, #0]
   b4f9c:	4957      	ldr	r1, [pc, #348]	; (b50fc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x614>)
   b4f9e:	4419      	add	r1, r3
   b4fa0:	f002 ffcf 	bl	b7f42 <_ZN5Print7printlnEPKc>
      EEPROM.get(100, recordingInterval);
   b4fa4:	f004 f8fa 	bl	b919c <_Z21__fetch_global_EEPROMv>
   b4fa8:	2204      	movs	r2, #4
   b4faa:	4621      	mov	r1, r4
   b4fac:	2064      	movs	r0, #100	; 0x64
   b4fae:	f001 f809 	bl	b5fc4 <HAL_EEPROM_Get>
      txCharacteristic.setValue("\nCurrent value for data collection interval is [");
   b4fb2:	4953      	ldr	r1, [pc, #332]	; (b5100 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x618>)
   b4fb4:	4841      	ldr	r0, [pc, #260]	; (b50bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d4>)
   b4fb6:	2200      	movs	r2, #0
   b4fb8:	f001 fe9d 	bl	b6cf6 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(recordingInterval != -1){
   b4fbc:	6821      	ldr	r1, [r4, #0]
   b4fbe:	1c48      	adds	r0, r1, #1
   b4fc0:	d00b      	beq.n	b4fda <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4f2>
        txCharacteristic.setValue(String(recordingInterval));
   b4fc2:	220a      	movs	r2, #10
   b4fc4:	a801      	add	r0, sp, #4
   b4fc6:	f003 f94e 	bl	b8266 <_ZN6StringC1Eih>
   b4fca:	483c      	ldr	r0, [pc, #240]	; (b50bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d4>)
   b4fcc:	2200      	movs	r2, #0
   b4fce:	a901      	add	r1, sp, #4
   b4fd0:	f001 fe8c 	bl	b6cec <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b4fd4:	a801      	add	r0, sp, #4
   b4fd6:	f003 f8bb 	bl	b8150 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between data collection as an integer in milliseconds (blank to skip): ");
   b4fda:	494a      	ldr	r1, [pc, #296]	; (b5104 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x61c>)
   b4fdc:	2200      	movs	r2, #0
   b4fde:	e69c      	b.n	b4d1a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x232>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4fe0:	4941      	ldr	r1, [pc, #260]	; (b50e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x600>)
   b4fe2:	4842      	ldr	r0, [pc, #264]	; (b50ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x604>)
   b4fe4:	f003 f9c9 	bl	b837a <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == ""){
   b4fe8:	b130      	cbz	r0, b4ff8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x510>
        EEPROM.get(100, recordingInterval);
   b4fea:	f004 f8d7 	bl	b919c <_Z21__fetch_global_EEPROMv>
   b4fee:	4942      	ldr	r1, [pc, #264]	; (b50f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x610>)
   b4ff0:	2204      	movs	r2, #4
   b4ff2:	2064      	movs	r0, #100	; 0x64
   b4ff4:	f000 ffe6 	bl	b5fc4 <HAL_EEPROM_Get>
      EEPROM.put(100, recordingInterval);
   b4ff8:	f004 f8d0 	bl	b919c <_Z21__fetch_global_EEPROMv>
   b4ffc:	4c42      	ldr	r4, [pc, #264]	; (b5108 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x620>)
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b4ffe:	493e      	ldr	r1, [pc, #248]	; (b50f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x610>)
   b5000:	2204      	movs	r2, #4
   b5002:	2064      	movs	r0, #100	; 0x64
   b5004:	f000 ffe6 	bl	b5fd4 <HAL_EEPROM_Put>
      EEPROM.get(100, recordingInterval);
   b5008:	f004 f8c8 	bl	b919c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b500c:	493a      	ldr	r1, [pc, #232]	; (b50f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x610>)
   b500e:	2204      	movs	r2, #4
   b5010:	2064      	movs	r0, #100	; 0x64
   b5012:	f000 ffd7 	bl	b5fc4 <HAL_EEPROM_Get>
      EEPROM.get(200, reportingInterval);
   b5016:	f004 f8c1 	bl	b919c <_Z21__fetch_global_EEPROMv>
   b501a:	2204      	movs	r2, #4
   b501c:	4621      	mov	r1, r4
   b501e:	20c8      	movs	r0, #200	; 0xc8
   b5020:	f000 ffd0 	bl	b5fc4 <HAL_EEPROM_Get>
      txCharacteristic.setValue("\nCurrent value for WiFi connection interval is [");
   b5024:	2200      	movs	r2, #0
   b5026:	4939      	ldr	r1, [pc, #228]	; (b510c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x624>)
   b5028:	4824      	ldr	r0, [pc, #144]	; (b50bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d4>)
   b502a:	f001 fe64 	bl	b6cf6 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(reportingInterval != -1){
   b502e:	6823      	ldr	r3, [r4, #0]
   b5030:	1c5a      	adds	r2, r3, #1
   b5032:	d00f      	beq.n	b5054 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x56c>
        txCharacteristic.setValue(String(reportingInterval / 1000));
   b5034:	220a      	movs	r2, #10
   b5036:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b503a:	a801      	add	r0, sp, #4
   b503c:	fb93 f1f1 	sdiv	r1, r3, r1
   b5040:	f003 f911 	bl	b8266 <_ZN6StringC1Eih>
   b5044:	481d      	ldr	r0, [pc, #116]	; (b50bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d4>)
   b5046:	2200      	movs	r2, #0
   b5048:	a901      	add	r1, sp, #4
   b504a:	f001 fe4f 	bl	b6cec <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b504e:	a801      	add	r0, sp, #4
   b5050:	f003 f87e 	bl	b8150 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between WiFi connections as an integer in seconds (blank to skip): ");
   b5054:	492e      	ldr	r1, [pc, #184]	; (b5110 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x628>)
   b5056:	2200      	movs	r2, #0
   b5058:	e65f      	b.n	b4d1a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x232>
   b505a:	4923      	ldr	r1, [pc, #140]	; (b50e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x600>)
   b505c:	4823      	ldr	r0, [pc, #140]	; (b50ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x604>)
   b505e:	f003 f98c 	bl	b837a <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == ""){
   b5062:	b130      	cbz	r0, b5072 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58a>
        EEPROM.get(200, reportingInterval);
   b5064:	f004 f89a 	bl	b919c <_Z21__fetch_global_EEPROMv>
   b5068:	4927      	ldr	r1, [pc, #156]	; (b5108 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x620>)
   b506a:	2204      	movs	r2, #4
   b506c:	20c8      	movs	r0, #200	; 0xc8
   b506e:	f000 ffa9 	bl	b5fc4 <HAL_EEPROM_Get>
      EEPROM.put(200, reportingInterval);
   b5072:	f004 f893 	bl	b919c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b5076:	4924      	ldr	r1, [pc, #144]	; (b5108 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x620>)
   b5078:	2204      	movs	r2, #4
   b507a:	20c8      	movs	r0, #200	; 0xc8
   b507c:	f000 ffaa 	bl	b5fd4 <HAL_EEPROM_Put>
      EEPROM.get(200, reportingInterval);
   b5080:	f004 f88c 	bl	b919c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b5084:	4920      	ldr	r1, [pc, #128]	; (b5108 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x620>)
   b5086:	2204      	movs	r2, #4
   b5088:	20c8      	movs	r0, #200	; 0xc8
   b508a:	f000 ff9b 	bl	b5fc4 <HAL_EEPROM_Get>
      WITH_LOCK(Serial) {
   b508e:	f003 fe61 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5092:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b5094:	f7ff f872 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(reportingInterval);
   b5098:	f003 fe5c 	bl	b8d54 <_Z16_fetch_usbserialv>
   b509c:	6839      	ldr	r1, [r7, #0]
   b509e:	220a      	movs	r2, #10
   b50a0:	f7ff f834 	bl	b410c <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
      WITH_LOCK(Serial) {
   b50a4:	a801      	add	r0, sp, #4
   b50a6:	f7ff f8fb 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      txCharacteristic.setValue("\nEnter 'ota' to wait for OTA update (blank to skip): ");
   b50aa:	491a      	ldr	r1, [pc, #104]	; (b5114 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x62c>)
   b50ac:	2200      	movs	r2, #0
   b50ae:	e634      	b.n	b4d1a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x232>
   b50b0:	000b9f3a 	.word	0x000b9f3a
   b50b4:	2003e7c0 	.word	0x2003e7c0
   b50b8:	000b9e90 	.word	0x000b9e90
   b50bc:	2003e5f8 	.word	0x2003e5f8
   b50c0:	2003df2c 	.word	0x2003df2c
   b50c4:	2003df14 	.word	0x2003df14
   b50c8:	2003df28 	.word	0x2003df28
   b50cc:	000b9f40 	.word	0x000b9f40
   b50d0:	2003e040 	.word	0x2003e040
   b50d4:	2003e0e4 	.word	0x2003e0e4
   b50d8:	000b9f5a 	.word	0x000b9f5a
   b50dc:	000b9f78 	.word	0x000b9f78
   b50e0:	000b9f84 	.word	0x000b9f84
   b50e4:	000b9f87 	.word	0x000b9f87
   b50e8:	000b9f86 	.word	0x000b9f86
   b50ec:	2003daac 	.word	0x2003daac
   b50f0:	2003dac4 	.word	0x2003dac4
   b50f4:	000b9fbb 	.word	0x000b9fbb
   b50f8:	2003e070 	.word	0x2003e070
   b50fc:	000b9fc8 	.word	0x000b9fc8
   b5100:	000b9fcf 	.word	0x000b9fcf
   b5104:	000ba000 	.word	0x000ba000
   b5108:	2003e074 	.word	0x2003e074
   b510c:	000ba055 	.word	0x000ba055
   b5110:	000ba086 	.word	0x000ba086
   b5114:	000ba0d7 	.word	0x000ba0d7
   b5118:	2003df24 	.word	0x2003df24
   b511c:	000b9eb9 	.word	0x000b9eb9
   b5120:	4930      	ldr	r1, [pc, #192]	; (b51e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6fc>)
   b5122:	4831      	ldr	r0, [pc, #196]	; (b51e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x700>)
   b5124:	4c31      	ldr	r4, [pc, #196]	; (b51ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x704>)
   b5126:	f003 f928 	bl	b837a <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == "ota"){
   b512a:	b300      	cbz	r0, b516e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x686>
        uint8_t value = 0;
   b512c:	2200      	movs	r2, #0
        system_get_flag(flag, &value, nullptr);
   b512e:	a901      	add	r1, sp, #4
   b5130:	2001      	movs	r0, #1
        uint8_t value = 0;
   b5132:	f88d 2004 	strb.w	r2, [sp, #4]
        system_get_flag(flag, &value, nullptr);
   b5136:	f001 f955 	bl	b63e4 <system_get_flag>
        waitingForOTA = true;
   b513a:	2301      	movs	r3, #1
   b513c:	7023      	strb	r3, [r4, #0]
        uint8_t value = 0;
   b513e:	2400      	movs	r4, #0
        system_get_flag(flag, &value, nullptr);
   b5140:	4622      	mov	r2, r4
   b5142:	a901      	add	r1, sp, #4
   b5144:	2001      	movs	r0, #1
        uint8_t value = 0;
   b5146:	f88d 4004 	strb.w	r4, [sp, #4]
        system_get_flag(flag, &value, nullptr);
   b514a:	f001 f94b 	bl	b63e4 <system_get_flag>
        WiFi.on();
   b514e:	4828      	ldr	r0, [pc, #160]	; (b51f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x708>)
   b5150:	f7ff f82b 	bl	b41aa <_ZN5spark9WiFiClass2onEv>
        WiFi.connect();
   b5154:	4621      	mov	r1, r4
   b5156:	4826      	ldr	r0, [pc, #152]	; (b51f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x708>)
        while(!WiFi.ready()) {
   b5158:	4c25      	ldr	r4, [pc, #148]	; (b51f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x708>)
        WiFi.connect();
   b515a:	f7ff f832 	bl	b41c2 <_ZN5spark9WiFiClass7connectEj>
        while(!WiFi.ready()) {
   b515e:	4620      	mov	r0, r4
   b5160:	f7ff f834 	bl	b41cc <_ZN5spark9WiFiClass5readyEv>
   b5164:	b948      	cbnz	r0, b517a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x692>
          delay(100);
   b5166:	2064      	movs	r0, #100	; 0x64
   b5168:	f001 fa5a 	bl	b6620 <delay>
        while(!WiFi.ready()) {
   b516c:	e7f7      	b.n	b515e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x676>
      if(waitingForOTA) {
   b516e:	7823      	ldrb	r3, [r4, #0]
   b5170:	2b00      	cmp	r3, #0
   b5172:	d1e4      	bne.n	b513e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x656>
      System.reset();
   b5174:	f003 f97b 	bl	b846e <_ZN11SystemClass5resetEv>
   b5178:	e5d2      	b.n	b4d20 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x238>
        if(WiFi.ready() != true) {
   b517a:	481d      	ldr	r0, [pc, #116]	; (b51f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x708>)
   b517c:	f7ff f826 	bl	b41cc <_ZN5spark9WiFiClass5readyEv>
   b5180:	b968      	cbnz	r0, b519e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6b6>
          WITH_LOCK(Serial) {
   b5182:	f003 fde7 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5186:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b5188:	f7fe fff8 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
            Serial.println("WiFi failed to connect, skipping time synchronization");
   b518c:	f003 fde2 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5190:	4918      	ldr	r1, [pc, #96]	; (b51f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x70c>)
   b5192:	f002 fed6 	bl	b7f42 <_ZN5Print7printlnEPKc>
          WITH_LOCK(Serial) {
   b5196:	a801      	add	r0, sp, #4
   b5198:	f7ff f882 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b519c:	e7ea      	b.n	b5174 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x68c>
          WITH_LOCK(Serial) {
   b519e:	f003 fdd9 	bl	b8d54 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b51a2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b51a4:	f7fe ffea 	bl	b417c <_ZN9USBSerial4lockEv.isra.0>
            Serial.println("WiFi connected, awaiting update");
   b51a8:	f003 fdd4 	bl	b8d54 <_Z16_fetch_usbserialv>
   b51ac:	4912      	ldr	r1, [pc, #72]	; (b51f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x710>)
   b51ae:	f002 fec8 	bl	b7f42 <_ZN5Print7printlnEPKc>
          WITH_LOCK(Serial) {
   b51b2:	a801      	add	r0, sp, #4
   b51b4:	f7ff f874 	bl	b42a0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
          txCharacteristic.setValue("\nAwaiting OTA update");
   b51b8:	4910      	ldr	r1, [pc, #64]	; (b51fc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x714>)
   b51ba:	4811      	ldr	r0, [pc, #68]	; (b5200 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x718>)
   b51bc:	2200      	movs	r2, #0
   b51be:	f001 fd9a 	bl	b6cf6 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        spark_cloud_flag_connect();
   b51c2:	f001 f945 	bl	b6450 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b51c6:	f001 f94b 	bl	b6460 <spark_cloud_flag_connected>
          while(!Particle.connected()) {
   b51ca:	b130      	cbz	r0, b51da <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6f2>
   b51cc:	4c0d      	ldr	r4, [pc, #52]	; (b5204 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x71c>)
		return HAL_Timer_Get_Milli_Seconds();
   b51ce:	f000 fee9 	bl	b5fa4 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b51d2:	6020      	str	r0, [r4, #0]
    		spark_process();
   b51d4:	f001 f934 	bl	b6440 <spark_process>
   b51d8:	e7f9      	b.n	b51ce <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6e6>
            delay(100);
   b51da:	2064      	movs	r0, #100	; 0x64
   b51dc:	f001 fa20 	bl	b6620 <delay>
          while(!Particle.connected()) {
   b51e0:	e7f1      	b.n	b51c6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6de>
   b51e2:	bf00      	nop
   b51e4:	000ba10d 	.word	0x000ba10d
   b51e8:	2003daac 	.word	0x2003daac
   b51ec:	2003e610 	.word	0x2003e610
   b51f0:	2003e7c0 	.word	0x2003e7c0
   b51f4:	000b9d9f 	.word	0x000b9d9f
   b51f8:	000ba111 	.word	0x000ba111
   b51fc:	000ba131 	.word	0x000ba131
   b5200:	2003e5f8 	.word	0x2003e5f8
   b5204:	2003e7d0 	.word	0x2003e7d0

000b5208 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b5208:	b5f0      	push	{r4, r5, r6, r7, lr}
   b520a:	4616      	mov	r6, r2
   b520c:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b520e:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5210:	e9c0 2200 	strd	r2, r2, [r0]
   b5214:	4604      	mov	r4, r0
   b5216:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   b5218:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   b521a:	4619      	mov	r1, r3
   b521c:	a806      	add	r0, sp, #24
   b521e:	f001 fba5 	bl	b696c <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   b5222:	9916      	ldr	r1, [sp, #88]	; 0x58
   b5224:	4638      	mov	r0, r7
   b5226:	f001 fba1 	bl	b696c <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   b522a:	7833      	ldrb	r3, [r6, #0]
   b522c:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5230:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5232:	9302      	str	r3, [sp, #8]
   b5234:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b5236:	4620      	mov	r0, r4
   b5238:	e9cd 7300 	strd	r7, r3, [sp]
   b523c:	aa05      	add	r2, sp, #20
   b523e:	ab06      	add	r3, sp, #24
   b5240:	4629      	mov	r1, r5
   b5242:	f002 f9a7 	bl	b7594 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b5246:	4620      	mov	r0, r4
   b5248:	b011      	add	sp, #68	; 0x44
   b524a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b524c <_ZN15Adafruit_LIS3DHD0Ev>:
   b524c:	b510      	push	{r4, lr}
   b524e:	212c      	movs	r1, #44	; 0x2c
   b5250:	4604      	mov	r4, r0
   b5252:	f003 fffc 	bl	b924e <_ZdlPvj>
   b5256:	4620      	mov	r0, r4
   b5258:	bd10      	pop	{r4, pc}
	...

000b525c <_GLOBAL__sub_I_SystemMode>:
   b525c:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
   b525e:	4c63      	ldr	r4, [pc, #396]	; (b53ec <_GLOBAL__sub_I_SystemMode+0x190>)
    SleepResult() {}
   b5260:	4b63      	ldr	r3, [pc, #396]	; (b53f0 <_GLOBAL__sub_I_SystemMode+0x194>)
   b5262:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5264:	2500      	movs	r5, #0
   b5266:	b090      	sub	sp, #64	; 0x40
   b5268:	e9c4 5500 	strd	r5, r5, [r4]
        set_system_mode(mode);
   b526c:	2003      	movs	r0, #3
   b526e:	f001 f891 	bl	b6394 <set_system_mode>
SYSTEM_MODE(MANUAL)
   b5272:	4a60      	ldr	r2, [pc, #384]	; (b53f4 <_GLOBAL__sub_I_SystemMode+0x198>)
   b5274:	4960      	ldr	r1, [pc, #384]	; (b53f8 <_GLOBAL__sub_I_SystemMode+0x19c>)
   b5276:	4620      	mov	r0, r4
   b5278:	f003 ffe4 	bl	b9244 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED)
   b527c:	4629      	mov	r1, r5
   b527e:	2001      	movs	r0, #1
   b5280:	f001 f898 	bl	b63b4 <system_thread_set_state>
HttpClient http;
   b5284:	485d      	ldr	r0, [pc, #372]	; (b53fc <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b5286:	4d5e      	ldr	r5, [pc, #376]	; (b5400 <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b5288:	f000 fb65 	bl	b5956 <_ZN10HttpClientC1Ev>
   b528c:	4a59      	ldr	r2, [pc, #356]	; (b53f4 <_GLOBAL__sub_I_SystemMode+0x198>)
   b528e:	495d      	ldr	r1, [pc, #372]	; (b5404 <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b5290:	485a      	ldr	r0, [pc, #360]	; (b53fc <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b5292:	f003 ffd7 	bl	b9244 <__aeabi_atexit>
} http_request_t;
   b5296:	495c      	ldr	r1, [pc, #368]	; (b5408 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b5298:	485c      	ldr	r0, [pc, #368]	; (b540c <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b529a:	f002 ffa4 	bl	b81e6 <_ZN6StringC1EPK19__FlashStringHelper>
   b529e:	485c      	ldr	r0, [pc, #368]	; (b5410 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b52a0:	f002 fd00 	bl	b7ca4 <_ZN9IPAddressC1Ev>
   b52a4:	4958      	ldr	r1, [pc, #352]	; (b5408 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b52a6:	485b      	ldr	r0, [pc, #364]	; (b5414 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b52a8:	f002 ff9d 	bl	b81e6 <_ZN6StringC1EPK19__FlashStringHelper>
   b52ac:	4956      	ldr	r1, [pc, #344]	; (b5408 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b52ae:	485a      	ldr	r0, [pc, #360]	; (b5418 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b52b0:	f002 ff99 	bl	b81e6 <_ZN6StringC1EPK19__FlashStringHelper>
http_request_t request;
   b52b4:	4a4f      	ldr	r2, [pc, #316]	; (b53f4 <_GLOBAL__sub_I_SystemMode+0x198>)
   b52b6:	4959      	ldr	r1, [pc, #356]	; (b541c <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b52b8:	4854      	ldr	r0, [pc, #336]	; (b540c <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b52ba:	f003 ffc3 	bl	b9244 <__aeabi_atexit>
} http_response_t;
   b52be:	4952      	ldr	r1, [pc, #328]	; (b5408 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b52c0:	4857      	ldr	r0, [pc, #348]	; (b5420 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b52c2:	f002 ff90 	bl	b81e6 <_ZN6StringC1EPK19__FlashStringHelper>
http_response_t response;
   b52c6:	4a4b      	ldr	r2, [pc, #300]	; (b53f4 <_GLOBAL__sub_I_SystemMode+0x198>)
   b52c8:	4956      	ldr	r1, [pc, #344]	; (b5424 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   b52ca:	4857      	ldr	r0, [pc, #348]	; (b5428 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b52cc:	f003 ffba 	bl	b9244 <__aeabi_atexit>
   b52d0:	2405      	movs	r4, #5
#ifdef __cplusplus

   WiFiAccessPoint()
   {
       memset(this, 0, sizeof(*this));
       size = sizeof(*this);
   b52d2:	2638      	movs	r6, #56	; 0x38
       memset(this, 0, sizeof(*this));
   b52d4:	1d28      	adds	r0, r5, #4
   b52d6:	2234      	movs	r2, #52	; 0x34
   b52d8:	2100      	movs	r1, #0
   b52da:	f004 fb99 	bl	b9a10 <memset>
WiFiAccessPoint networks[5];
   b52de:	3c01      	subs	r4, #1
       size = sizeof(*this);
   b52e0:	f845 6b38 	str.w	r6, [r5], #56
   b52e4:	d1f6      	bne.n	b52d4 <_GLOBAL__sub_I_SystemMode+0x78>
String networkBuffer;
   b52e6:	4948      	ldr	r1, [pc, #288]	; (b5408 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b52e8:	4850      	ldr	r0, [pc, #320]	; (b542c <_GLOBAL__sub_I_SystemMode+0x1d0>)
   b52ea:	f002 ff7c 	bl	b81e6 <_ZN6StringC1EPK19__FlashStringHelper>
   b52ee:	4a41      	ldr	r2, [pc, #260]	; (b53f4 <_GLOBAL__sub_I_SystemMode+0x198>)
   b52f0:	494f      	ldr	r1, [pc, #316]	; (b5430 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b52f2:	484e      	ldr	r0, [pc, #312]	; (b542c <_GLOBAL__sub_I_SystemMode+0x1d0>)
   b52f4:	f003 ffa6 	bl	b9244 <__aeabi_atexit>
#pragma once

int recordingInterval; // interval between lis3dh reads
int reportingInterval; // interval between reporting data to server in seconds
String payload = "";
   b52f8:	4943      	ldr	r1, [pc, #268]	; (b5408 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b52fa:	484e      	ldr	r0, [pc, #312]	; (b5434 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b52fc:	f002 ff73 	bl	b81e6 <_ZN6StringC1EPK19__FlashStringHelper>
   b5300:	4a3c      	ldr	r2, [pc, #240]	; (b53f4 <_GLOBAL__sub_I_SystemMode+0x198>)
   b5302:	494b      	ldr	r1, [pc, #300]	; (b5430 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b5304:	484b      	ldr	r0, [pc, #300]	; (b5434 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b5306:	f003 ff9d 	bl	b9244 <__aeabi_atexit>
bool valuesChanged = false;
String unixTime;
   b530a:	493f      	ldr	r1, [pc, #252]	; (b5408 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b530c:	484a      	ldr	r0, [pc, #296]	; (b5438 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b530e:	f002 ff6a 	bl	b81e6 <_ZN6StringC1EPK19__FlashStringHelper>
   b5312:	4a38      	ldr	r2, [pc, #224]	; (b53f4 <_GLOBAL__sub_I_SystemMode+0x198>)
   b5314:	4946      	ldr	r1, [pc, #280]	; (b5430 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b5316:	4848      	ldr	r0, [pc, #288]	; (b5438 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b5318:	f003 ff94 	bl	b9244 <__aeabi_atexit>
String ssid, password = "";
   b531c:	493a      	ldr	r1, [pc, #232]	; (b5408 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b531e:	4847      	ldr	r0, [pc, #284]	; (b543c <_GLOBAL__sub_I_SystemMode+0x1e0>)
   b5320:	f002 ff61 	bl	b81e6 <_ZN6StringC1EPK19__FlashStringHelper>
   b5324:	4a33      	ldr	r2, [pc, #204]	; (b53f4 <_GLOBAL__sub_I_SystemMode+0x198>)
   b5326:	4942      	ldr	r1, [pc, #264]	; (b5430 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b5328:	4844      	ldr	r0, [pc, #272]	; (b543c <_GLOBAL__sub_I_SystemMode+0x1e0>)
   b532a:	f003 ff8b 	bl	b9244 <__aeabi_atexit>
   b532e:	4936      	ldr	r1, [pc, #216]	; (b5408 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b5330:	4843      	ldr	r0, [pc, #268]	; (b5440 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b5332:	f002 ff58 	bl	b81e6 <_ZN6StringC1EPK19__FlashStringHelper>
   b5336:	4a2f      	ldr	r2, [pc, #188]	; (b53f4 <_GLOBAL__sub_I_SystemMode+0x198>)
   b5338:	493d      	ldr	r1, [pc, #244]	; (b5430 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b533a:	4841      	ldr	r0, [pc, #260]	; (b5440 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b533c:	f003 ff82 	bl	b9244 <__aeabi_atexit>
  RECORDING,
  SENDING
};
uint8_t firmwareState = BLEWAIT;
bool bleWaitForConfig = false; //when true, firmware is waiting for user input over BLE b/c BLE was connected
String bleInputBuffer; // buffer for reading from BLE and writing to EEPROM
   b5340:	4931      	ldr	r1, [pc, #196]	; (b5408 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b5342:	4840      	ldr	r0, [pc, #256]	; (b5444 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   b5344:	f002 ff4f 	bl	b81e6 <_ZN6StringC1EPK19__FlashStringHelper>
   b5348:	4a2a      	ldr	r2, [pc, #168]	; (b53f4 <_GLOBAL__sub_I_SystemMode+0x198>)
   b534a:	4939      	ldr	r1, [pc, #228]	; (b5430 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b534c:	483d      	ldr	r0, [pc, #244]	; (b5444 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   b534e:	f003 ff79 	bl	b9244 <__aeabi_atexit>
Adafruit_LIS3DH lis3dh = Adafruit_LIS3DH();
   b5352:	483d      	ldr	r0, [pc, #244]	; (b5448 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b5354:	f000 f8ac 	bl	b54b0 <_ZN15Adafruit_LIS3DHC1Ev>
   b5358:	4a26      	ldr	r2, [pc, #152]	; (b53f4 <_GLOBAL__sub_I_SystemMode+0x198>)
   b535a:	493c      	ldr	r1, [pc, #240]	; (b544c <_GLOBAL__sub_I_SystemMode+0x1f0>)
   b535c:	483a      	ldr	r0, [pc, #232]	; (b5448 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b535e:	f003 ff71 	bl	b9244 <__aeabi_atexit>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b5362:	493b      	ldr	r1, [pc, #236]	; (b5450 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   b5364:	483b      	ldr	r0, [pc, #236]	; (b5454 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b5366:	f001 fbe5 	bl	b6b34 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b536a:	493b      	ldr	r1, [pc, #236]	; (b5458 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   b536c:	483b      	ldr	r0, [pc, #236]	; (b545c <_GLOBAL__sub_I_SystemMode+0x200>)
   b536e:	f001 fbe1 	bl	b6b34 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b5372:	493b      	ldr	r1, [pc, #236]	; (b5460 <_GLOBAL__sub_I_SystemMode+0x204>)
   b5374:	483b      	ldr	r0, [pc, #236]	; (b5464 <_GLOBAL__sub_I_SystemMode+0x208>)
   b5376:	f001 fbdd 	bl	b6b34 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   b537a:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b537c:	4939      	ldr	r1, [pc, #228]	; (b5464 <_GLOBAL__sub_I_SystemMode+0x208>)
   b537e:	f88d 3014 	strb.w	r3, [sp, #20]
   b5382:	a806      	add	r0, sp, #24
   b5384:	f001 faf2 	bl	b696c <_ZN8particle7BleUuidC1ERKS0_>
   b5388:	4932      	ldr	r1, [pc, #200]	; (b5454 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b538a:	a80b      	add	r0, sp, #44	; 0x2c
   b538c:	f001 faee 	bl	b696c <_ZN8particle7BleUuidC1ERKS0_>
   b5390:	ab0b      	add	r3, sp, #44	; 0x2c
   b5392:	9300      	str	r3, [sp, #0]
   b5394:	aa05      	add	r2, sp, #20
   b5396:	ab06      	add	r3, sp, #24
   b5398:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b539c:	4932      	ldr	r1, [pc, #200]	; (b5468 <_GLOBAL__sub_I_SystemMode+0x20c>)
   b539e:	4833      	ldr	r0, [pc, #204]	; (b546c <_GLOBAL__sub_I_SystemMode+0x210>)
   b53a0:	f7ff ff32 	bl	b5208 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b53a4:	4a13      	ldr	r2, [pc, #76]	; (b53f4 <_GLOBAL__sub_I_SystemMode+0x198>)
   b53a6:	4932      	ldr	r1, [pc, #200]	; (b5470 <_GLOBAL__sub_I_SystemMode+0x214>)
   b53a8:	4830      	ldr	r0, [pc, #192]	; (b546c <_GLOBAL__sub_I_SystemMode+0x210>)
   b53aa:	f003 ff4b 	bl	b9244 <__aeabi_atexit>
   b53ae:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b53b0:	492a      	ldr	r1, [pc, #168]	; (b545c <_GLOBAL__sub_I_SystemMode+0x200>)
   b53b2:	f88d 3014 	strb.w	r3, [sp, #20]
   b53b6:	a806      	add	r0, sp, #24
   b53b8:	f001 fad8 	bl	b696c <_ZN8particle7BleUuidC1ERKS0_>
   b53bc:	4925      	ldr	r1, [pc, #148]	; (b5454 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b53be:	a80b      	add	r0, sp, #44	; 0x2c
   b53c0:	f001 fad4 	bl	b696c <_ZN8particle7BleUuidC1ERKS0_>
   b53c4:	4b2b      	ldr	r3, [pc, #172]	; (b5474 <_GLOBAL__sub_I_SystemMode+0x218>)
   b53c6:	9301      	str	r3, [sp, #4]
   b53c8:	ab0b      	add	r3, sp, #44	; 0x2c
   b53ca:	9300      	str	r3, [sp, #0]
   b53cc:	aa05      	add	r2, sp, #20
   b53ce:	492a      	ldr	r1, [pc, #168]	; (b5478 <_GLOBAL__sub_I_SystemMode+0x21c>)
   b53d0:	9402      	str	r4, [sp, #8]
   b53d2:	ab06      	add	r3, sp, #24
   b53d4:	4829      	ldr	r0, [pc, #164]	; (b547c <_GLOBAL__sub_I_SystemMode+0x220>)
   b53d6:	f7ff ff17 	bl	b5208 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b53da:	4a06      	ldr	r2, [pc, #24]	; (b53f4 <_GLOBAL__sub_I_SystemMode+0x198>)
   b53dc:	4924      	ldr	r1, [pc, #144]	; (b5470 <_GLOBAL__sub_I_SystemMode+0x214>)
   b53de:	4827      	ldr	r0, [pc, #156]	; (b547c <_GLOBAL__sub_I_SystemMode+0x220>)
   b53e0:	b010      	add	sp, #64	; 0x40
   b53e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b53e6:	f003 bf2d 	b.w	b9244 <__aeabi_atexit>
   b53ea:	bf00      	nop
   b53ec:	2003da64 	.word	0x2003da64
   b53f0:	ffff0000 	.word	0xffff0000
   b53f4:	2003da60 	.word	0x2003da60
   b53f8:	000b40df 	.word	0x000b40df
   b53fc:	2003dacc 	.word	0x2003dacc
   b5400:	2003df28 	.word	0x2003df28
   b5404:	000b4149 	.word	0x000b4149
   b5408:	000b9f86 	.word	0x000b9f86
   b540c:	2003e07c 	.word	0x2003e07c
   b5410:	2003e08c 	.word	0x2003e08c
   b5414:	2003e0a4 	.word	0x2003e0a4
   b5418:	2003e0b8 	.word	0x2003e0b8
   b541c:	000b40c3 	.word	0x000b40c3
   b5420:	2003e0cc 	.word	0x2003e0cc
   b5424:	000b40b5 	.word	0x000b40b5
   b5428:	2003e0c8 	.word	0x2003e0c8
   b542c:	2003df14 	.word	0x2003df14
   b5430:	000b8151 	.word	0x000b8151
   b5434:	2003e050 	.word	0x2003e050
   b5438:	2003e600 	.word	0x2003e600
   b543c:	2003e0e4 	.word	0x2003e0e4
   b5440:	2003e040 	.word	0x2003e040
   b5444:	2003daac 	.word	0x2003daac
   b5448:	2003dee8 	.word	0x2003dee8
   b544c:	000b40b3 	.word	0x000b40b3
   b5450:	000ba146 	.word	0x000ba146
   b5454:	2003da70 	.word	0x2003da70
   b5458:	000ba16b 	.word	0x000ba16b
   b545c:	2003da84 	.word	0x2003da84
   b5460:	000ba190 	.word	0x000ba190
   b5464:	2003da98 	.word	0x2003da98
   b5468:	000ba1b5 	.word	0x000ba1b5
   b546c:	2003e5f8 	.word	0x2003e5f8
   b5470:	000b7063 	.word	0x000b7063
   b5474:	000b4ae9 	.word	0x000b4ae9
   b5478:	000ba1b8 	.word	0x000ba1b8
   b547c:	2003e0dc 	.word	0x2003e0dc

000b5480 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b5480:	4770      	bx	lr
	...

000b5484 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   b5484:	b538      	push	{r3, r4, r5, lr}
   b5486:	460c      	mov	r4, r1
   b5488:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b548a:	2220      	movs	r2, #32
   b548c:	2100      	movs	r1, #0
   b548e:	f104 0008 	add.w	r0, r4, #8
   b5492:	f004 fabd 	bl	b9a10 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   b5496:	220b      	movs	r2, #11
   b5498:	4904      	ldr	r1, [pc, #16]	; (b54ac <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x28>)
   b549a:	4620      	mov	r0, r4
   b549c:	f004 fb08 	bl	b9ab0 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
   b54a0:	2301      	movs	r3, #1
   b54a2:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id   = _sensorID;
   b54a4:	69aa      	ldr	r2, [r5, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   b54a6:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sensor->min_delay   = 0;
  sensor->max_value   = 0;
  sensor->min_value   = 0;
  sensor->resolution  = 0;
}
   b54aa:	bd38      	pop	{r3, r4, r5, pc}
   b54ac:	000b9d5a 	.word	0x000b9d5a

000b54b0 <_ZN15Adafruit_LIS3DHC1Ev>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   b54b0:	4a06      	ldr	r2, [pc, #24]	; (b54cc <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   b54b2:	6002      	str	r2, [r0, #0]
   b54b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b54b8:	6182      	str	r2, [r0, #24]
   b54ba:	7742      	strb	r2, [r0, #29]
   b54bc:	83c2      	strh	r2, [r0, #30]
   b54be:	22ff      	movs	r2, #255	; 0xff
   b54c0:	f880 2020 	strb.w	r2, [r0, #32]
   b54c4:	2208      	movs	r2, #8
   b54c6:	6242      	str	r2, [r0, #36]	; 0x24
}
   b54c8:	4770      	bx	lr
   b54ca:	bf00      	nop
   b54cc:	000ba1e8 	.word	0x000ba1e8

000b54d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b54d0:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b54d2:	4c0b      	ldr	r4, [pc, #44]	; (b5500 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b54d4:	7821      	ldrb	r1, [r4, #0]
   b54d6:	f3bf 8f5b 	dmb	ish
   b54da:	f011 0101 	ands.w	r1, r1, #1
   b54de:	d10b      	bne.n	b54f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b54e0:	4620      	mov	r0, r4
   b54e2:	9101      	str	r1, [sp, #4]
   b54e4:	f7fe fddd 	bl	b40a2 <__cxa_guard_acquire>
   b54e8:	9901      	ldr	r1, [sp, #4]
   b54ea:	b128      	cbz	r0, b54f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b54ec:	4805      	ldr	r0, [pc, #20]	; (b5504 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b54ee:	f002 fd9b 	bl	b8028 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b54f2:	4620      	mov	r0, r4
   b54f4:	f7fe fdda 	bl	b40ac <__cxa_guard_release>
        return instance;
    }
   b54f8:	4802      	ldr	r0, [pc, #8]	; (b5504 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b54fa:	b002      	add	sp, #8
   b54fc:	bd10      	pop	{r4, pc}
   b54fe:	bf00      	nop
   b5500:	2003e620 	.word	0x2003e620
   b5504:	2003e624 	.word	0x2003e624

000b5508 <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   b5508:	b508      	push	{r3, lr}
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   b550a:	f7ff ffe1 	bl	b54d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b550e:	2101      	movs	r1, #1
   b5510:	f002 fda8 	bl	b8064 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b5514:	f7ff ffdc 	bl	b54d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5518:	4905      	ldr	r1, [pc, #20]	; (b5530 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   b551a:	2201      	movs	r2, #1
   b551c:	f002 fde0 	bl	b80e0 <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
   b5520:	f7ff ffd6 	bl	b54d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   b5524:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b5528:	2100      	movs	r1, #0
   b552a:	f002 bdaf 	b.w	b808c <_ZN8SPIClass11setDataModeEh>
   b552e:	bf00      	nop
   b5530:	0007a120 	.word	0x0007a120

000b5534 <_ZN15Adafruit_LIS3DH7spixferEh>:
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   b5534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_sck == -1)
   b5538:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b553c:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   b553e:	4605      	mov	r5, r0
   b5540:	460f      	mov	r7, r1
  if (_sck == -1)
   b5542:	d106      	bne.n	b5552 <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b5544:	f7ff ffc4 	bl	b54d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5548:	4639      	mov	r1, r7
}
   b554a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b554e:	f002 bdf9 	b.w	b8144 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   b5552:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   b5554:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   b5556:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   b555a:	f995 0020 	ldrsb.w	r0, [r5, #32]
   b555e:	2100      	movs	r1, #0
   b5560:	b280      	uxth	r0, r0
   b5562:	f003 fdee 	bl	b9142 <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   b5566:	f995 001e 	ldrsb.w	r0, [r5, #30]
   b556a:	fa08 f106 	lsl.w	r1, r8, r6
   b556e:	4039      	ands	r1, r7
   b5570:	b280      	uxth	r0, r0
   b5572:	f003 fde6 	bl	b9142 <digitalWrite>
    digitalWrite(_sck, HIGH);
   b5576:	f995 0020 	ldrsb.w	r0, [r5, #32]
   b557a:	2101      	movs	r1, #1
   b557c:	b280      	uxth	r0, r0
   b557e:	f003 fde0 	bl	b9142 <digitalWrite>
    if (digitalRead(_miso))
   b5582:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
   b5586:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   b5588:	b280      	uxth	r0, r0
    reply <<= 1;
   b558a:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   b558c:	f003 fdf2 	bl	b9174 <digitalRead>
   b5590:	b108      	cbz	r0, b5596 <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   b5592:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   b5596:	3e01      	subs	r6, #1
   b5598:	d2df      	bcs.n	b555a <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
   b559a:	4620      	mov	r0, r4
   b559c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b55a0 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   b55a0:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   b55a2:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b55a6:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   b55a8:	4604      	mov	r4, r0
   b55aa:	460e      	mov	r6, r1
   b55ac:	4615      	mov	r5, r2
  if (_cs == -1) {
   b55ae:	d116      	bne.n	b55de <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   b55b0:	f003 fe20 	bl	b91f4 <_Z19__fetch_global_Wirev>
   b55b4:	7f21      	ldrb	r1, [r4, #28]
   b55b6:	f002 fb2d 	bl	b7c14 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   b55ba:	f003 fe1b 	bl	b91f4 <_Z19__fetch_global_Wirev>
   b55be:	6803      	ldr	r3, [r0, #0]
   b55c0:	4631      	mov	r1, r6
   b55c2:	689b      	ldr	r3, [r3, #8]
   b55c4:	4798      	blx	r3
    Wire.write((uint8_t)value);
   b55c6:	f003 fe15 	bl	b91f4 <_Z19__fetch_global_Wirev>
   b55ca:	6803      	ldr	r3, [r0, #0]
   b55cc:	4629      	mov	r1, r5
   b55ce:	689b      	ldr	r3, [r3, #8]
   b55d0:	4798      	blx	r3
    Wire.endTransmission();
   b55d2:	f003 fe0f 	bl	b91f4 <_Z19__fetch_global_Wirev>
}
   b55d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   b55da:	f002 bb26 	b.w	b7c2a <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
   b55de:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b55e2:	3301      	adds	r3, #1
   b55e4:	d101      	bne.n	b55ea <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   b55e6:	f7ff ff8f 	bl	b5508 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   b55ea:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b55ee:	2100      	movs	r1, #0
   b55f0:	b280      	uxth	r0, r0
   b55f2:	f003 fda6 	bl	b9142 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   b55f6:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b55fa:	4620      	mov	r0, r4
   b55fc:	f7ff ff9a 	bl	b5534 <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   b5600:	4629      	mov	r1, r5
   b5602:	4620      	mov	r0, r4
   b5604:	f7ff ff96 	bl	b5534 <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   b5608:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b560c:	2101      	movs	r1, #1
}
   b560e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   b5612:	b280      	uxth	r0, r0
   b5614:	f003 bd95 	b.w	b9142 <digitalWrite>

000b5618 <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   b5618:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   b561a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b561e:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   b5620:	4604      	mov	r4, r0
   b5622:	460d      	mov	r5, r1
  if (_cs == -1) {
   b5624:	d11d      	bne.n	b5662 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   b5626:	f003 fde5 	bl	b91f4 <_Z19__fetch_global_Wirev>
   b562a:	f994 101c 	ldrsb.w	r1, [r4, #28]
   b562e:	f002 faf5 	bl	b7c1c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   b5632:	f003 fddf 	bl	b91f4 <_Z19__fetch_global_Wirev>
   b5636:	6803      	ldr	r3, [r0, #0]
   b5638:	4629      	mov	r1, r5
   b563a:	689b      	ldr	r3, [r3, #8]
   b563c:	4798      	blx	r3
    Wire.endTransmission();
   b563e:	f003 fdd9 	bl	b91f4 <_Z19__fetch_global_Wirev>
   b5642:	f002 faf2 	bl	b7c2a <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
   b5646:	f003 fdd5 	bl	b91f4 <_Z19__fetch_global_Wirev>
   b564a:	7f21      	ldrb	r1, [r4, #28]
   b564c:	2201      	movs	r2, #1
   b564e:	f002 fade 	bl	b7c0e <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   b5652:	f003 fdcf 	bl	b91f4 <_Z19__fetch_global_Wirev>
   b5656:	6803      	ldr	r3, [r0, #0]
   b5658:	695b      	ldr	r3, [r3, #20]
   b565a:	4798      	blx	r3
   b565c:	b2c5      	uxtb	r5, r0
}
   b565e:	4628      	mov	r0, r5
   b5660:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
   b5662:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b5666:	3301      	adds	r3, #1
   b5668:	d101      	bne.n	b566e <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   b566a:	f7ff ff4d 	bl	b5508 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
   b566e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5672:	2100      	movs	r1, #0
   b5674:	b280      	uxth	r0, r0
   b5676:	f003 fd64 	bl	b9142 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   b567a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b567e:	4620      	mov	r0, r4
   b5680:	f7ff ff58 	bl	b5534 <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   b5684:	2100      	movs	r1, #0
   b5686:	4620      	mov	r0, r4
   b5688:	f7ff ff54 	bl	b5534 <_ZN15Adafruit_LIS3DH7spixferEh>
   b568c:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   b568e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5692:	2101      	movs	r1, #1
   b5694:	b280      	uxth	r0, r0
   b5696:	f003 fd54 	bl	b9142 <digitalWrite>
    if (_sck == -1)
   b569a:	e7e0      	b.n	b565e <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

000b569c <_ZN15Adafruit_LIS3DH8getRangeEv>:
{
   b569c:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   b569e:	2123      	movs	r1, #35	; 0x23
   b56a0:	f7ff ffba 	bl	b5618 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   b56a4:	f3c0 1001 	ubfx	r0, r0, #4, #2
   b56a8:	bd08      	pop	{r3, pc}

000b56aa <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
   b56aa:	b538      	push	{r3, r4, r5, lr}
   b56ac:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   b56ae:	2120      	movs	r1, #32
{
   b56b0:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   b56b2:	f7ff ffb1 	bl	b5618 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
   b56b6:	f000 030f 	and.w	r3, r0, #15
  ctl1 |= (dataRate << 4);
   b56ba:	ea43 1205 	orr.w	r2, r3, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   b56be:	4620      	mov	r0, r4
   b56c0:	b2d2      	uxtb	r2, r2
}
   b56c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   b56c6:	2120      	movs	r1, #32
   b56c8:	f7ff bf6a 	b.w	b55a0 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000b56cc <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
   b56cc:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   b56ce:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b56d2:	3301      	adds	r3, #1
void Adafruit_LIS3DH::read(void) {
   b56d4:	4604      	mov	r4, r0
  if (_cs == -1) {
   b56d6:	d177      	bne.n	b57c8 <_ZN15Adafruit_LIS3DH4readEv+0xfc>
    Wire.beginTransmission(_i2caddr);
   b56d8:	f003 fd8c 	bl	b91f4 <_Z19__fetch_global_Wirev>
   b56dc:	f994 101c 	ldrsb.w	r1, [r4, #28]
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   b56e0:	4d5d      	ldr	r5, [pc, #372]	; (b5858 <_ZN15Adafruit_LIS3DH4readEv+0x18c>)
    Wire.beginTransmission(_i2caddr);
   b56e2:	f002 fa9b 	bl	b7c1c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   b56e6:	f003 fd85 	bl	b91f4 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b56ea:	6803      	ldr	r3, [r0, #0]
   b56ec:	21a8      	movs	r1, #168	; 0xa8
   b56ee:	689b      	ldr	r3, [r3, #8]
   b56f0:	4798      	blx	r3
    Wire.endTransmission();
   b56f2:	f003 fd7f 	bl	b91f4 <_Z19__fetch_global_Wirev>
   b56f6:	f002 fa98 	bl	b7c2a <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
   b56fa:	f003 fd7b 	bl	b91f4 <_Z19__fetch_global_Wirev>
   b56fe:	7f21      	ldrb	r1, [r4, #28]
   b5700:	2206      	movs	r2, #6
   b5702:	f002 fa84 	bl	b7c0e <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   b5706:	f003 fd75 	bl	b91f4 <_Z19__fetch_global_Wirev>
   b570a:	6803      	ldr	r3, [r0, #0]
   b570c:	695b      	ldr	r3, [r3, #20]
   b570e:	4798      	blx	r3
   b5710:	80e0      	strh	r0, [r4, #6]
   b5712:	f003 fd6f 	bl	b91f4 <_Z19__fetch_global_Wirev>
   b5716:	6803      	ldr	r3, [r0, #0]
   b5718:	695b      	ldr	r3, [r3, #20]
   b571a:	4798      	blx	r3
   b571c:	88e3      	ldrh	r3, [r4, #6]
   b571e:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b5722:	4318      	orrs	r0, r3
   b5724:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   b5726:	f003 fd65 	bl	b91f4 <_Z19__fetch_global_Wirev>
   b572a:	6803      	ldr	r3, [r0, #0]
   b572c:	695b      	ldr	r3, [r3, #20]
   b572e:	4798      	blx	r3
   b5730:	8120      	strh	r0, [r4, #8]
   b5732:	f003 fd5f 	bl	b91f4 <_Z19__fetch_global_Wirev>
   b5736:	6803      	ldr	r3, [r0, #0]
   b5738:	695b      	ldr	r3, [r3, #20]
   b573a:	4798      	blx	r3
   b573c:	8923      	ldrh	r3, [r4, #8]
   b573e:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b5742:	4318      	orrs	r0, r3
   b5744:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   b5746:	f003 fd55 	bl	b91f4 <_Z19__fetch_global_Wirev>
   b574a:	6803      	ldr	r3, [r0, #0]
   b574c:	695b      	ldr	r3, [r3, #20]
   b574e:	4798      	blx	r3
   b5750:	8160      	strh	r0, [r4, #10]
   b5752:	f003 fd4f 	bl	b91f4 <_Z19__fetch_global_Wirev>
   b5756:	6803      	ldr	r3, [r0, #0]
   b5758:	695b      	ldr	r3, [r3, #20]
   b575a:	4798      	blx	r3
   b575c:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b5760:	8965      	ldrh	r5, [r4, #10]
   b5762:	4328      	orrs	r0, r5
   b5764:	8160      	strh	r0, [r4, #10]
  uint8_t range = getRange();
   b5766:	4620      	mov	r0, r4
   b5768:	f7ff ff98 	bl	b569c <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   b576c:	2803      	cmp	r0, #3
   b576e:	d069      	beq.n	b5844 <_ZN15Adafruit_LIS3DH4readEv+0x178>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   b5770:	2802      	cmp	r0, #2
   b5772:	d06a      	beq.n	b584a <_ZN15Adafruit_LIS3DH4readEv+0x17e>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   b5774:	2801      	cmp	r0, #1
   b5776:	d06b      	beq.n	b5850 <_ZN15Adafruit_LIS3DH4readEv+0x184>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   b5778:	2800      	cmp	r0, #0
   b577a:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   b577e:	bf18      	it	ne
   b5780:	2301      	movne	r3, #1
  x_g = (float)x / divider;
   b5782:	ee07 3a90 	vmov	s15, r3
   b5786:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   b578a:	ee07 3a10 	vmov	s14, r3
   b578e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5792:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   b5796:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  x_g = (float)x / divider;
   b579a:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   b579e:	ee07 3a10 	vmov	s14, r3
   b57a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_g = (float)x / divider;
   b57a6:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   b57aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   b57ae:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b57b2:	ee07 3a10 	vmov	s14, r3
   b57b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   b57ba:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   b57be:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b57c2:	edc4 6a05 	vstr	s13, [r4, #20]
}
   b57c6:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
   b57c8:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b57cc:	3301      	adds	r3, #1
   b57ce:	d101      	bne.n	b57d4 <_ZN15Adafruit_LIS3DH4readEv+0x108>
      beginTransaction();
   b57d0:	f7ff fe9a 	bl	b5508 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   b57d4:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b57d8:	2100      	movs	r1, #0
   b57da:	b280      	uxth	r0, r0
   b57dc:	f003 fcb1 	bl	b9142 <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   b57e0:	21e8      	movs	r1, #232	; 0xe8
   b57e2:	4620      	mov	r0, r4
   b57e4:	f7ff fea6 	bl	b5534 <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   b57e8:	21ff      	movs	r1, #255	; 0xff
   b57ea:	4620      	mov	r0, r4
   b57ec:	f7ff fea2 	bl	b5534 <_ZN15Adafruit_LIS3DH7spixferEh>
   b57f0:	21ff      	movs	r1, #255	; 0xff
   b57f2:	80e0      	strh	r0, [r4, #6]
   b57f4:	4620      	mov	r0, r4
   b57f6:	f7ff fe9d 	bl	b5534 <_ZN15Adafruit_LIS3DH7spixferEh>
   b57fa:	88e3      	ldrh	r3, [r4, #6]
   b57fc:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b5800:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   b5802:	21ff      	movs	r1, #255	; 0xff
   b5804:	4620      	mov	r0, r4
   b5806:	f7ff fe95 	bl	b5534 <_ZN15Adafruit_LIS3DH7spixferEh>
   b580a:	21ff      	movs	r1, #255	; 0xff
   b580c:	8120      	strh	r0, [r4, #8]
   b580e:	4620      	mov	r0, r4
   b5810:	f7ff fe90 	bl	b5534 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5814:	8923      	ldrh	r3, [r4, #8]
   b5816:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b581a:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   b581c:	21ff      	movs	r1, #255	; 0xff
   b581e:	4620      	mov	r0, r4
   b5820:	f7ff fe88 	bl	b5534 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5824:	21ff      	movs	r1, #255	; 0xff
   b5826:	8160      	strh	r0, [r4, #10]
   b5828:	4620      	mov	r0, r4
   b582a:	f7ff fe83 	bl	b5534 <_ZN15Adafruit_LIS3DH7spixferEh>
   b582e:	8963      	ldrh	r3, [r4, #10]
   b5830:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b5834:	8160      	strh	r0, [r4, #10]
    digitalWrite(_cs, HIGH);
   b5836:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b583a:	2101      	movs	r1, #1
   b583c:	b280      	uxth	r0, r0
   b583e:	f003 fc80 	bl	b9142 <digitalWrite>
    if (_sck == -1)
   b5842:	e790      	b.n	b5766 <_ZN15Adafruit_LIS3DH4readEv+0x9a>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   b5844:	f44f 6300 	mov.w	r3, #2048	; 0x800
   b5848:	e79b      	b.n	b5782 <_ZN15Adafruit_LIS3DH4readEv+0xb6>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   b584a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   b584e:	e798      	b.n	b5782 <_ZN15Adafruit_LIS3DH4readEv+0xb6>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   b5850:	f641 73fe 	movw	r3, #8190	; 0x1ffe
   b5854:	e795      	b.n	b5782 <_ZN15Adafruit_LIS3DH4readEv+0xb6>
   b5856:	bf00      	nop
   b5858:	00ffff00 	.word	0x00ffff00

000b585c <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   b585c:	b570      	push	{r4, r5, r6, lr}
   b585e:	460c      	mov	r4, r1
   b5860:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b5862:	2220      	movs	r2, #32
   b5864:	2100      	movs	r1, #0
   b5866:	1d20      	adds	r0, r4, #4
   b5868:	f004 f8d2 	bl	b9a10 <memset>
  event->version   = sizeof(sensors_event_t);
   b586c:	2324      	movs	r3, #36	; 0x24
   b586e:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b5870:	69ab      	ldr	r3, [r5, #24]
   b5872:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   b5874:	2601      	movs	r6, #1
  read();
   b5876:	4628      	mov	r0, r5
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   b5878:	60a6      	str	r6, [r4, #8]
  read();
   b587a:	f7ff ff27 	bl	b56cc <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
   b587e:	68eb      	ldr	r3, [r5, #12]
   b5880:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   b5882:	692b      	ldr	r3, [r5, #16]
   b5884:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   b5886:	696b      	ldr	r3, [r5, #20]
   b5888:	61e3      	str	r3, [r4, #28]
}
   b588a:	4630      	mov	r0, r6
   b588c:	bd70      	pop	{r4, r5, r6, pc}

000b588e <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   b588e:	b510      	push	{r4, lr}
   b5890:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   b5892:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
   b5894:	f990 001d 	ldrsb.w	r0, [r0, #29]
   b5898:	1c42      	adds	r2, r0, #1
   b589a:	d123      	bne.n	b58e4 <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
   b589c:	f003 fcaa 	bl	b91f4 <_Z19__fetch_global_Wirev>
   b58a0:	f002 f986 	bl	b7bb0 <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   b58a4:	210f      	movs	r1, #15
   b58a6:	4620      	mov	r0, r4
   b58a8:	f7ff feb6 	bl	b5618 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   b58ac:	2833      	cmp	r0, #51	; 0x33
   b58ae:	d13d      	bne.n	b592c <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   b58b0:	2207      	movs	r2, #7
   b58b2:	2120      	movs	r1, #32
   b58b4:	4620      	mov	r0, r4
   b58b6:	f7ff fe73 	bl	b55a0 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
   b58ba:	2107      	movs	r1, #7
   b58bc:	4620      	mov	r0, r4
   b58be:	f7ff fef4 	bl	b56aa <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   b58c2:	2288      	movs	r2, #136	; 0x88
   b58c4:	2123      	movs	r1, #35	; 0x23
   b58c6:	4620      	mov	r0, r4
   b58c8:	f7ff fe6a 	bl	b55a0 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   b58cc:	2210      	movs	r2, #16
   b58ce:	2122      	movs	r1, #34	; 0x22
   b58d0:	4620      	mov	r0, r4
   b58d2:	f7ff fe65 	bl	b55a0 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   b58d6:	4620      	mov	r0, r4
   b58d8:	2280      	movs	r2, #128	; 0x80
   b58da:	211f      	movs	r1, #31
   b58dc:	f7ff fe60 	bl	b55a0 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
   b58e0:	2001      	movs	r0, #1
}
   b58e2:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   b58e4:	2101      	movs	r1, #1
   b58e6:	b280      	uxth	r0, r0
   b58e8:	f003 fc2b 	bl	b9142 <digitalWrite>
    pinMode(_cs, OUTPUT);
   b58ec:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b58f0:	2101      	movs	r1, #1
   b58f2:	b280      	uxth	r0, r0
   b58f4:	f003 fc14 	bl	b9120 <pinMode>
    if (_sck == -1) {
   b58f8:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b58fc:	1c43      	adds	r3, r0, #1
   b58fe:	d104      	bne.n	b590a <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
   b5900:	f7ff fde6 	bl	b54d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5904:	f002 fb9a 	bl	b803c <_ZN8SPIClass5beginEv>
    }
   b5908:	e7cc      	b.n	b58a4 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
   b590a:	2101      	movs	r1, #1
   b590c:	b280      	uxth	r0, r0
   b590e:	f003 fc07 	bl	b9120 <pinMode>
      pinMode(_mosi, OUTPUT);
   b5912:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b5916:	2101      	movs	r1, #1
   b5918:	b280      	uxth	r0, r0
   b591a:	f003 fc01 	bl	b9120 <pinMode>
      pinMode(_miso, INPUT);
   b591e:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5922:	2100      	movs	r1, #0
   b5924:	b280      	uxth	r0, r0
   b5926:	f003 fbfb 	bl	b9120 <pinMode>
   b592a:	e7bb      	b.n	b58a4 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
   b592c:	2000      	movs	r0, #0
   b592e:	e7d8      	b.n	b58e2 <_ZN15Adafruit_LIS3DH5beginEh+0x54>

000b5930 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
size_t Print::print(T n, int base)
   b5930:	b570      	push	{r4, r5, r6, lr}
        if (n < 0 && base == 10) {
   b5932:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b5934:	4606      	mov	r6, r0
   b5936:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b5938:	da0b      	bge.n	b5952 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b593a:	2a0a      	cmp	r2, #10
   b593c:	d109      	bne.n	b5952 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b593e:	212d      	movs	r1, #45	; 0x2d
   b5940:	f002 faea 	bl	b7f18 <_ZN5Print5printEc>
            val = -n;
   b5944:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b5946:	b2ea      	uxtb	r2, r5
   b5948:	4630      	mov	r0, r6
    }
}
   b594a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b594e:	f002 bb02 	b.w	b7f56 <_ZN5Print11printNumberEmh>
            val = n;
   b5952:	4621      	mov	r1, r4
   b5954:	e7f7      	b.n	b5946 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b5956 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b5956:	b510      	push	{r4, lr}
   b5958:	4604      	mov	r4, r0
   b595a:	f003 f885 	bl	b8a68 <_ZN9TCPClientC1Ev>
{

}
   b595e:	4620      	mov	r0, r4
   b5960:	bd10      	pop	{r4, pc}
	...

000b5964 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b5964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   b5966:	4f0f      	ldr	r7, [pc, #60]	; (b59a4 <_ZN10HttpClient10sendHeaderEPKcS1_+0x40>)
{
   b5968:	4605      	mov	r5, r0
   b596a:	4614      	mov	r4, r2
   b596c:	460e      	mov	r6, r1
    client.print(aHeaderName);
   b596e:	f002 facf 	bl	b7f10 <_ZN5Print5printEPKc>
    client.print(": ");
   b5972:	4639      	mov	r1, r7
   b5974:	4628      	mov	r0, r5
   b5976:	f002 facb 	bl	b7f10 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b597a:	4621      	mov	r1, r4
   b597c:	4628      	mov	r0, r5
   b597e:	f002 fae0 	bl	b7f42 <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.print(aHeaderName);
   b5982:	f003 f9e7 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5986:	4631      	mov	r1, r6
   b5988:	f002 fac2 	bl	b7f10 <_ZN5Print5printEPKc>
    Serial.print(": ");
   b598c:	f003 f9e2 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5990:	4639      	mov	r1, r7
   b5992:	f002 fabd 	bl	b7f10 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   b5996:	f003 f9dd 	bl	b8d54 <_Z16_fetch_usbserialv>
   b599a:	4621      	mov	r1, r4
    #endif
}
   b599c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(aHeaderValue);
   b59a0:	f002 bacf 	b.w	b7f42 <_ZN5Print7printlnEPKc>
   b59a4:	000b9f37 	.word	0x000b9f37

000b59a8 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b59a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   b59aa:	4f14      	ldr	r7, [pc, #80]	; (b59fc <_ZN10HttpClient10sendHeaderEPKci+0x54>)
{
   b59ac:	4604      	mov	r4, r0
   b59ae:	4615      	mov	r5, r2
   b59b0:	460e      	mov	r6, r1
    client.print(aHeaderName);
   b59b2:	f002 faad 	bl	b7f10 <_ZN5Print5printEPKc>
    client.print(": ");
   b59b6:	4639      	mov	r1, r7
   b59b8:	4620      	mov	r0, r4
   b59ba:	f002 faa9 	bl	b7f10 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b59be:	220a      	movs	r2, #10
   b59c0:	4629      	mov	r1, r5
   b59c2:	4620      	mov	r0, r4
   b59c4:	f7ff ffb4 	bl	b5930 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b59c8:	4620      	mov	r0, r4
   b59ca:	f002 faae 	bl	b7f2a <_ZN5Print7printlnEv>
    client.println(aHeaderValue);

    #ifdef LOGGING
    Serial.print(aHeaderName);
   b59ce:	f003 f9c1 	bl	b8d54 <_Z16_fetch_usbserialv>
   b59d2:	4631      	mov	r1, r6
   b59d4:	f002 fa9c 	bl	b7f10 <_ZN5Print5printEPKc>
    Serial.print(": ");
   b59d8:	f003 f9bc 	bl	b8d54 <_Z16_fetch_usbserialv>
   b59dc:	4639      	mov	r1, r7
   b59de:	f002 fa97 	bl	b7f10 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   b59e2:	f003 f9b7 	bl	b8d54 <_Z16_fetch_usbserialv>
   b59e6:	4629      	mov	r1, r5
   b59e8:	4604      	mov	r4, r0
size_t Print::print(T n, int base)
   b59ea:	220a      	movs	r2, #10
   b59ec:	f7ff ffa0 	bl	b5930 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b59f0:	4620      	mov	r0, r4
    #endif
}
   b59f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b59f6:	f002 ba98 	b.w	b7f2a <_ZN5Print7printlnEv>
   b59fa:	bf00      	nop
   b59fc:	000b9f37 	.word	0x000b9f37

000b5a00 <_ZN10HttpClient10sendHeaderEPKc>:

void HttpClient::sendHeader(const char* aHeaderName)
{
   b5a00:	b510      	push	{r4, lr}
   b5a02:	460c      	mov	r4, r1
    client.println(aHeaderName);
   b5a04:	f002 fa9d 	bl	b7f42 <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.println(aHeaderName);
   b5a08:	f003 f9a4 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5a0c:	4621      	mov	r1, r4
    #endif
}
   b5a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(aHeaderName);
   b5a12:	f002 ba96 	b.w	b7f42 <_ZN5Print7printlnEPKc>
	...

000b5a18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b5a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5a1c:	460e      	mov	r6, r1
   b5a1e:	b091      	sub	sp, #68	; 0x44
   b5a20:	461f      	mov	r7, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b5a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5a26:	6013      	str	r3, [r2, #0]
{
   b5a28:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5a2a:	2100      	movs	r1, #0
   b5a2c:	4630      	mov	r0, r6
   b5a2e:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b5a32:	4690      	mov	r8, r2
   b5a34:	f002 fca1 	bl	b837a <_ZNK6String6equalsEPKc>
   b5a38:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b5a3c:	4603      	mov	r3, r0
   b5a3e:	b9c0      	cbnz	r0, b5a72 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x5a>
	const char * c_str() const { return buffer; }
   b5a40:	f1be 0f00 	cmp.w	lr, #0
   b5a44:	bf14      	ite	ne
   b5a46:	4672      	movne	r2, lr
   b5a48:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b5a4a:	6831      	ldr	r1, [r6, #0]
   b5a4c:	b292      	uxth	r2, r2
   b5a4e:	4620      	mov	r0, r4
   b5a50:	f002 fe0a 	bl	b8668 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b5a54:	1e05      	subs	r5, r0, #0
   b5a56:	bf18      	it	ne
   b5a58:	2501      	movne	r5, #1
    }

    #ifdef LOGGING
    if (connected) {
   b5a5a:	b9ed      	cbnz	r5, b5a98 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x80>
            Serial.print(aRequest.ip);
        }
        Serial.print(":");
        Serial.println(aRequest.port);
    } else {
        Serial.println("HttpClient>\tConnection failed.");
   b5a5c:	f003 f97a 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5a60:	49be      	ldr	r1, [pc, #760]	; (b5d5c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x344>)
   b5a62:	f002 fa6e 	bl	b7f42 <_ZN5Print7printlnEPKc>
    }
    #endif

    if (!connected) {
        client.stop();
   b5a66:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b5a68:	b011      	add	sp, #68	; 0x44
   b5a6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b5a6e:	f002 bfb1 	b.w	b89d4 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b5a72:	4bbb      	ldr	r3, [pc, #748]	; (b5d60 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x348>)
   b5a74:	930a      	str	r3, [sp, #40]	; 0x28
   b5a76:	f106 0c14 	add.w	ip, r6, #20
   b5a7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5a7e:	ad0b      	add	r5, sp, #44	; 0x2c
   b5a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5a82:	f8dc 3000 	ldr.w	r3, [ip]
   b5a86:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b5a88:	fa1f f28e 	uxth.w	r2, lr
   b5a8c:	2300      	movs	r3, #0
   b5a8e:	a90a      	add	r1, sp, #40	; 0x28
   b5a90:	4620      	mov	r0, r4
   b5a92:	f002 fec9 	bl	b8828 <_ZN9TCPClient7connectE9IPAddresstm>
   b5a96:	e7dd      	b.n	b5a54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5a98:	2100      	movs	r1, #0
   b5a9a:	4630      	mov	r0, r6
   b5a9c:	f002 fc6d 	bl	b837a <_ZNK6String6equalsEPKc>
        if(aRequest.hostname!=NULL) {
   b5aa0:	2800      	cmp	r0, #0
   b5aa2:	d15d      	bne.n	b5b60 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x148>
            Serial.print("HttpClient>\tConnecting to: ");
   b5aa4:	f003 f956 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5aa8:	49ae      	ldr	r1, [pc, #696]	; (b5d64 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x34c>)
   b5aaa:	f002 fa31 	bl	b7f10 <_ZN5Print5printEPKc>
            Serial.print(aRequest.hostname);
   b5aae:	f003 f951 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5ab2:	6831      	ldr	r1, [r6, #0]
   b5ab4:	f002 fa2c 	bl	b7f10 <_ZN5Print5printEPKc>
        Serial.print(":");
   b5ab8:	f003 f94c 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5abc:	49aa      	ldr	r1, [pc, #680]	; (b5d68 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   b5abe:	f002 fa27 	bl	b7f10 <_ZN5Print5printEPKc>
        Serial.println(aRequest.port);
   b5ac2:	f003 f947 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5ac6:	220a      	movs	r2, #10
   b5ac8:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   b5aca:	4682      	mov	sl, r0
size_t Print::print(T n, int base)
   b5acc:	f7ff ff30 	bl	b5930 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b5ad0:	4650      	mov	r0, sl
   b5ad2:	f002 fa2a 	bl	b7f2a <_ZN5Print7printlnEv>
    client.print(aHttpMethod);
   b5ad6:	4649      	mov	r1, r9
   b5ad8:	4620      	mov	r0, r4
   b5ada:	f002 fa19 	bl	b7f10 <_ZN5Print5printEPKc>
    client.print(" ");
   b5ade:	49a3      	ldr	r1, [pc, #652]	; (b5d6c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   b5ae0:	4620      	mov	r0, r4
   b5ae2:	f002 fa15 	bl	b7f10 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b5ae6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b5ae8:	4620      	mov	r0, r4
   b5aea:	f002 fa11 	bl	b7f10 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b5aee:	49a0      	ldr	r1, [pc, #640]	; (b5d70 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   b5af0:	4620      	mov	r0, r4
   b5af2:	f002 fa0d 	bl	b7f10 <_ZN5Print5printEPKc>
    Serial.println("HttpClient>\tStart of HTTP Request.");
   b5af6:	f003 f92d 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5afa:	499e      	ldr	r1, [pc, #632]	; (b5d74 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x35c>)
   b5afc:	f002 fa21 	bl	b7f42 <_ZN5Print7printlnEPKc>
    Serial.print(aHttpMethod);
   b5b00:	f003 f928 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5b04:	4649      	mov	r1, r9
   b5b06:	f002 fa03 	bl	b7f10 <_ZN5Print5printEPKc>
    Serial.print(" ");
   b5b0a:	f003 f923 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5b0e:	4997      	ldr	r1, [pc, #604]	; (b5d6c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   b5b10:	f002 f9fe 	bl	b7f10 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
   b5b14:	f003 f91e 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5b18:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b5b1a:	f002 f9f9 	bl	b7f10 <_ZN5Print5printEPKc>
    Serial.print(" HTTP/1.0\r\n");
   b5b1e:	f003 f919 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5b22:	4993      	ldr	r1, [pc, #588]	; (b5d70 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   b5b24:	f002 f9f4 	bl	b7f10 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b5b28:	4993      	ldr	r1, [pc, #588]	; (b5d78 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x360>)
   b5b2a:	4a94      	ldr	r2, [pc, #592]	; (b5d7c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x364>)
   b5b2c:	4620      	mov	r0, r4
   b5b2e:	f7ff ff19 	bl	b5964 <_ZN10HttpClient10sendHeaderEPKcS1_>
   b5b32:	2100      	movs	r1, #0
   b5b34:	4630      	mov	r0, r6
   b5b36:	f002 fc20 	bl	b837a <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b5b3a:	b920      	cbnz	r0, b5b46 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x12e>
        sendHeader("HOST", aRequest.hostname.c_str());
   b5b3c:	6832      	ldr	r2, [r6, #0]
   b5b3e:	4990      	ldr	r1, [pc, #576]	; (b5d80 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x368>)
   b5b40:	4620      	mov	r0, r4
   b5b42:	f7ff ff0f 	bl	b5964 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b5b46:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b5b4a:	2100      	movs	r1, #0
   b5b4c:	4650      	mov	r0, sl
   b5b4e:	f002 fc14 	bl	b837a <_ZNK6String6equalsEPKc>
   b5b52:	b988      	cbnz	r0, b5b78 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x160>
        sendHeader("Content-Length", (aRequest.body).length());
   b5b54:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b5b56:	498b      	ldr	r1, [pc, #556]	; (b5d84 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x36c>)
   b5b58:	4620      	mov	r0, r4
   b5b5a:	f7ff ff25 	bl	b59a8 <_ZN10HttpClient10sendHeaderEPKci>
   b5b5e:	e012      	b.n	b5b86 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16e>
            Serial.print("HttpClient>\tConnecting to IP: ");
   b5b60:	f003 f8f8 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5b64:	4988      	ldr	r1, [pc, #544]	; (b5d88 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x370>)
   b5b66:	f002 f9d3 	bl	b7f10 <_ZN5Print5printEPKc>
            Serial.print(aRequest.ip);
   b5b6a:	f003 f8f3 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5b6e:	f106 0110 	add.w	r1, r6, #16
   b5b72:	f002 f9d4 	bl	b7f1e <_ZN5Print5printERK9Printable>
   b5b76:	e79f      	b.n	b5ab8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xa0>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b5b78:	4984      	ldr	r1, [pc, #528]	; (b5d8c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x374>)
   b5b7a:	4648      	mov	r0, r9
   b5b7c:	f003 ff7e 	bl	b9a7c <strcmp>
   b5b80:	4602      	mov	r2, r0
   b5b82:	2800      	cmp	r0, #0
   b5b84:	d0e7      	beq.n	b5b56 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x13e>
    if (headers != NULL)
   b5b86:	b15f      	cbz	r7, b5ba0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x188>
        while (headers[i].header != NULL)
   b5b88:	6839      	ldr	r1, [r7, #0]
   b5b8a:	b149      	cbz	r1, b5ba0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x188>
            if (headers[i].value != NULL) {
   b5b8c:	687a      	ldr	r2, [r7, #4]
                sendHeader(headers[i].header, headers[i].value);
   b5b8e:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b5b90:	b11a      	cbz	r2, b5b9a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
                sendHeader(headers[i].header, headers[i].value);
   b5b92:	f7ff fee7 	bl	b5964 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b5b96:	3708      	adds	r7, #8
        while (headers[i].header != NULL)
   b5b98:	e7f6      	b.n	b5b88 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
                sendHeader(headers[i].header);
   b5b9a:	f7ff ff31 	bl	b5a00 <_ZN10HttpClient10sendHeaderEPKc>
   b5b9e:	e7fa      	b.n	b5b96 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17e>
    client.println();
   b5ba0:	4620      	mov	r0, r4
   b5ba2:	f002 f9c2 	bl	b7f2a <_ZN5Print7printlnEv>
    client.flush();
   b5ba6:	4620      	mov	r0, r4
   b5ba8:	f002 fcbe 	bl	b8528 <_ZN9TCPClient5flushEv>
   b5bac:	2100      	movs	r1, #0
   b5bae:	4650      	mov	r0, sl
   b5bb0:	f002 fbe3 	bl	b837a <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b5bb4:	b940      	cbnz	r0, b5bc8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b0>
        client.println(aRequest.body);
   b5bb6:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b5bb8:	4620      	mov	r0, r4
   b5bba:	f002 f9c2 	bl	b7f42 <_ZN5Print7printlnEPKc>
        Serial.println(aRequest.body);
   b5bbe:	f003 f8c9 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5bc2:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b5bc4:	f002 f9bd 	bl	b7f42 <_ZN5Print7printlnEPKc>
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   b5bc8:	f003 f8c4 	bl	b8d54 <_Z16_fetch_usbserialv>
    memset(&buffer[0], 0, sizeof(buffer));
   b5bcc:	f104 0a1c 	add.w	sl, r4, #28
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   b5bd0:	496f      	ldr	r1, [pc, #444]	; (b5d90 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x378>)
   b5bd2:	f002 f9b6 	bl	b7f42 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b5bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5bda:	2100      	movs	r1, #0
   b5bdc:	4650      	mov	r0, sl
   b5bde:	f003 ff17 	bl	b9a10 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5be2:	f000 f9df 	bl	b5fa4 <HAL_Timer_Get_Milli_Seconds>
   b5be6:	9000      	str	r0, [sp, #0]
   b5be8:	f000 f9dc 	bl	b5fa4 <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
   b5bec:	2600      	movs	r6, #0
   b5bee:	9001      	str	r0, [sp, #4]
        int bytes = client.available();
   b5bf0:	4620      	mov	r0, r4
   b5bf2:	f002 fe95 	bl	b8920 <_ZN9TCPClient9availableEv>
        if(bytes) {
   b5bf6:	4681      	mov	r9, r0
   b5bf8:	b178      	cbz	r0, b5c1a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x202>
            Serial.print("\r\nHttpClient>\tReceiving TCP transaction of ");
   b5bfa:	f003 f8ab 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5bfe:	4965      	ldr	r1, [pc, #404]	; (b5d94 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x37c>)
   b5c00:	f002 f986 	bl	b7f10 <_ZN5Print5printEPKc>
            Serial.print(bytes);
   b5c04:	f003 f8a6 	bl	b8d54 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   b5c08:	4649      	mov	r1, r9
   b5c0a:	220a      	movs	r2, #10
   b5c0c:	f7ff fe90 	bl	b5930 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
            Serial.println(" bytes.");
   b5c10:	f003 f8a0 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5c14:	4960      	ldr	r1, [pc, #384]	; (b5d98 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x380>)
   b5c16:	f002 f994 	bl	b7f42 <_ZN5Print7printlnEPKc>
    unsigned int bufferPosition = 0;
   b5c1a:	f04f 0b00 	mov.w	fp, #0
        while (client.available()) {
   b5c1e:	4620      	mov	r0, r4
   b5c20:	f002 fe7e 	bl	b8920 <_ZN9TCPClient9availableEv>
   b5c24:	b320      	cbz	r0, b5c70 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x258>
            char c = client.read();
   b5c26:	4620      	mov	r0, r4
   b5c28:	f002 fc64 	bl	b84f4 <_ZN9TCPClient4readEv>
   b5c2c:	b2c7      	uxtb	r7, r0
            Serial.print(c);
   b5c2e:	f003 f891 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5c32:	4639      	mov	r1, r7
   b5c34:	f002 f970 	bl	b7f18 <_ZN5Print5printEc>
   b5c38:	f000 f9b4 	bl	b5fa4 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b5c3c:	f240 33fe 	movw	r3, #1022	; 0x3fe
   b5c40:	429e      	cmp	r6, r3
   b5c42:	9000      	str	r0, [sp, #0]
   b5c44:	d803      	bhi.n	b5c4e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x236>
                buffer[bufferPosition] = c;
   b5c46:	f80a 7006 	strb.w	r7, [sl, r6]
            bufferPosition++;
   b5c4a:	3601      	adds	r6, #1
        while (client.available()) {
   b5c4c:	e7e7      	b.n	b5c1e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x206>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b5c4e:	f240 33ff 	movw	r3, #1023	; 0x3ff
   b5c52:	429e      	cmp	r6, r3
   b5c54:	d1f9      	bne.n	b5c4a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x232>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b5c56:	2300      	movs	r3, #0
   b5c58:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   b5c5c:	4620      	mov	r0, r4
   b5c5e:	f002 feb9 	bl	b89d4 <_ZN9TCPClient4stopEv>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
   b5c62:	f003 f877 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5c66:	494d      	ldr	r1, [pc, #308]	; (b5d9c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x384>)
   b5c68:	f002 f96b 	bl	b7f42 <_ZN5Print7printlnEPKc>
                error = true;
   b5c6c:	46ab      	mov	fp, r5
   b5c6e:	e7ec      	b.n	b5c4a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x232>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b5c70:	19a3      	adds	r3, r4, r6
   b5c72:	7718      	strb	r0, [r3, #28]
        if (bytes) {
   b5c74:	f1b9 0f00 	cmp.w	r9, #0
   b5c78:	d004      	beq.n	b5c84 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x26c>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
   b5c7a:	f003 f86b 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5c7e:	4948      	ldr	r1, [pc, #288]	; (b5da0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x388>)
   b5c80:	f002 f946 	bl	b7f10 <_ZN5Print5printEPKc>
   b5c84:	f000 f98e 	bl	b5fa4 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b5c88:	9b00      	ldr	r3, [sp, #0]
   b5c8a:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b5c8e:	f1bb 0f00 	cmp.w	fp, #0
   b5c92:	d106      	bne.n	b5ca2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x28a>
   b5c94:	f241 3388 	movw	r3, #5000	; 0x1388
   b5c98:	4599      	cmp	r9, r3
   b5c9a:	d802      	bhi.n	b5ca2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x28a>
            delay(200);
   b5c9c:	20c8      	movs	r0, #200	; 0xc8
   b5c9e:	f000 fcbf 	bl	b6620 <delay>
    } while (client.connected() && !timeout && !error);
   b5ca2:	4620      	mov	r0, r4
   b5ca4:	f002 fd5e 	bl	b8764 <_ZN9TCPClient9connectedEv>
   b5ca8:	f241 3388 	movw	r3, #5000	; 0x1388
   b5cac:	2800      	cmp	r0, #0
   b5cae:	d04c      	beq.n	b5d4a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x332>
   b5cb0:	4599      	cmp	r9, r3
   b5cb2:	d84c      	bhi.n	b5d4e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x336>
   b5cb4:	f1bb 0f00 	cmp.w	fp, #0
   b5cb8:	d09a      	beq.n	b5bf0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d8>
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
   b5cba:	f003 f84b 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5cbe:	4939      	ldr	r1, [pc, #228]	; (b5da4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x38c>)
   b5cc0:	f002 f926 	bl	b7f10 <_ZN5Print5printEPKc>
    Serial.print(millis() - firstRead);
   b5cc4:	f003 f846 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5cc8:	4605      	mov	r5, r0
   b5cca:	f000 f96b 	bl	b5fa4 <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   b5cce:	9b01      	ldr	r3, [sp, #4]
   b5cd0:	220a      	movs	r2, #10
   b5cd2:	1ac1      	subs	r1, r0, r3
   b5cd4:	4628      	mov	r0, r5
   b5cd6:	f002 f93e 	bl	b7f56 <_ZN5Print11printNumberEmh>
    Serial.println("ms).");
   b5cda:	f003 f83b 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5cde:	4932      	ldr	r1, [pc, #200]	; (b5da8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x390>)
   b5ce0:	f002 f92f 	bl	b7f42 <_ZN5Print7printlnEPKc>
    client.stop();
   b5ce4:	4620      	mov	r0, r4
   b5ce6:	f002 fe75 	bl	b89d4 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b5cea:	4651      	mov	r1, sl
   b5cec:	a802      	add	r0, sp, #8
   b5cee:	f002 fa7a 	bl	b81e6 <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b5cf2:	230c      	movs	r3, #12
   b5cf4:	2209      	movs	r2, #9
   b5cf6:	a902      	add	r1, sp, #8
   b5cf8:	a806      	add	r0, sp, #24
   b5cfa:	f002 fb63 	bl	b83c4 <_ZNK6String9substringEjj>
    Serial.print("HttpClient>\tStatus Code: ");
   b5cfe:	f003 f829 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5d02:	492a      	ldr	r1, [pc, #168]	; (b5dac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x394>)
   b5d04:	f002 f904 	bl	b7f10 <_ZN5Print5printEPKc>
    Serial.println(statusCode);
   b5d08:	f003 f824 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5d0c:	9906      	ldr	r1, [sp, #24]
   b5d0e:	f002 f918 	bl	b7f42 <_ZN5Print7printlnEPKc>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b5d12:	4927      	ldr	r1, [pc, #156]	; (b5db0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x398>)
   b5d14:	a80a      	add	r0, sp, #40	; 0x28
   b5d16:	f002 fa66 	bl	b81e6 <_ZN6StringC1EPK19__FlashStringHelper>
   b5d1a:	a90a      	add	r1, sp, #40	; 0x28
   b5d1c:	a802      	add	r0, sp, #8
   b5d1e:	f002 fb4d 	bl	b83bc <_ZNK6String7indexOfERKS_>
   b5d22:	4604      	mov	r4, r0
   b5d24:	a80a      	add	r0, sp, #40	; 0x28
   b5d26:	f002 fa13 	bl	b8150 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b5d2a:	1c63      	adds	r3, r4, #1
   b5d2c:	d146      	bne.n	b5dbc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a4>
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
   b5d2e:	f003 f811 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5d32:	4920      	ldr	r1, [pc, #128]	; (b5db4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x39c>)
   b5d34:	f002 f905 	bl	b7f42 <_ZN5Print7printlnEPKc>
    String statusCode = raw_response.substring(9,12);
   b5d38:	a806      	add	r0, sp, #24
   b5d3a:	f002 fa09 	bl	b8150 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b5d3e:	a802      	add	r0, sp, #8
   b5d40:	f002 fa06 	bl	b8150 <_ZN6StringD1Ev>
}
   b5d44:	b011      	add	sp, #68	; 0x44
   b5d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (timeout) {
   b5d4a:	4599      	cmp	r9, r3
   b5d4c:	d9b5      	bls.n	b5cba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2a2>
        Serial.println("\r\nHttpClient>\tError: Timeout while reading response.");
   b5d4e:	f003 f801 	bl	b8d54 <_Z16_fetch_usbserialv>
   b5d52:	4919      	ldr	r1, [pc, #100]	; (b5db8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a0>)
   b5d54:	f002 f8f5 	bl	b7f42 <_ZN5Print7printlnEPKc>
   b5d58:	e7af      	b.n	b5cba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2a2>
   b5d5a:	bf00      	nop
   b5d5c:	000ba277 	.word	0x000ba277
   b5d60:	000ba600 	.word	0x000ba600
   b5d64:	000ba1fc 	.word	0x000ba1fc
   b5d68:	000b9d26 	.word	0x000b9d26
   b5d6c:	000b9f38 	.word	0x000b9f38
   b5d70:	000ba237 	.word	0x000ba237
   b5d74:	000ba243 	.word	0x000ba243
   b5d78:	000ba26c 	.word	0x000ba26c
   b5d7c:	000ba266 	.word	0x000ba266
   b5d80:	000ba296 	.word	0x000ba296
   b5d84:	000ba29b 	.word	0x000ba29b
   b5d88:	000ba218 	.word	0x000ba218
   b5d8c:	000b9d07 	.word	0x000b9d07
   b5d90:	000ba2aa 	.word	0x000ba2aa
   b5d94:	000ba2cb 	.word	0x000ba2cb
   b5d98:	000ba2f7 	.word	0x000ba2f7
   b5d9c:	000ba2ff 	.word	0x000ba2ff
   b5da0:	000ba334 	.word	0x000ba334
   b5da4:	000ba38f 	.word	0x000ba38f
   b5da8:	000ba3b4 	.word	0x000ba3b4
   b5dac:	000ba3b9 	.word	0x000ba3b9
   b5db0:	000ba3d3 	.word	0x000ba3d3
   b5db4:	000ba3d8 	.word	0x000ba3d8
   b5db8:	000ba35a 	.word	0x000ba35a
    aResponse.body = "";
   b5dbc:	f108 0504 	add.w	r5, r8, #4
   b5dc0:	490a      	ldr	r1, [pc, #40]	; (b5dec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3d4>)
   b5dc2:	4628      	mov	r0, r5
   b5dc4:	f002 fa3d 	bl	b8242 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b5dc8:	1d22      	adds	r2, r4, #4
   b5dca:	a902      	add	r1, sp, #8
   b5dcc:	a80a      	add	r0, sp, #40	; 0x28
   b5dce:	f002 fb19 	bl	b8404 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5dd2:	a90a      	add	r1, sp, #40	; 0x28
   b5dd4:	4628      	mov	r0, r5
   b5dd6:	f002 fa83 	bl	b82e0 <_ZN6String6concatERKS_>
   b5dda:	a80a      	add	r0, sp, #40	; 0x28
   b5ddc:	f002 f9b8 	bl	b8150 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b5de0:	9806      	ldr	r0, [sp, #24]
   b5de2:	f003 fdb7 	bl	b9954 <atoi>
   b5de6:	f8c8 0000 	str.w	r0, [r8]
   b5dea:	e7a5      	b.n	b5d38 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x320>
   b5dec:	000b9f86 	.word	0x000b9f86

000b5df0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b5df0:	b508      	push	{r3, lr}
   b5df2:	4b02      	ldr	r3, [pc, #8]	; (b5dfc <hal_ble_stack_init+0xc>)
   b5df4:	681b      	ldr	r3, [r3, #0]
   b5df6:	689b      	ldr	r3, [r3, #8]
   b5df8:	9301      	str	r3, [sp, #4]
   b5dfa:	bd08      	pop	{r3, pc}
   b5dfc:	00030278 	.word	0x00030278

000b5e00 <hal_ble_stack_deinit>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
   b5e00:	b508      	push	{r3, lr}
   b5e02:	4b02      	ldr	r3, [pc, #8]	; (b5e0c <hal_ble_stack_deinit+0xc>)
   b5e04:	681b      	ldr	r3, [r3, #0]
   b5e06:	68db      	ldr	r3, [r3, #12]
   b5e08:	9301      	str	r3, [sp, #4]
   b5e0a:	bd08      	pop	{r3, pc}
   b5e0c:	00030278 	.word	0x00030278

000b5e10 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b5e10:	b508      	push	{r3, lr}
   b5e12:	4b02      	ldr	r3, [pc, #8]	; (b5e1c <hal_ble_gap_set_advertising_data+0xc>)
   b5e14:	681b      	ldr	r3, [r3, #0]
   b5e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5e18:	9301      	str	r3, [sp, #4]
   b5e1a:	bd08      	pop	{r3, pc}
   b5e1c:	00030278 	.word	0x00030278

000b5e20 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b5e20:	b508      	push	{r3, lr}
   b5e22:	4b02      	ldr	r3, [pc, #8]	; (b5e2c <hal_ble_gap_set_scan_response_data+0xc>)
   b5e24:	681b      	ldr	r3, [r3, #0]
   b5e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5e28:	9301      	str	r3, [sp, #4]
   b5e2a:	bd08      	pop	{r3, pc}
   b5e2c:	00030278 	.word	0x00030278

000b5e30 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b5e30:	b508      	push	{r3, lr}
   b5e32:	4b02      	ldr	r3, [pc, #8]	; (b5e3c <hal_ble_gap_start_advertising+0xc>)
   b5e34:	681b      	ldr	r3, [r3, #0]
   b5e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b5e38:	9301      	str	r3, [sp, #4]
   b5e3a:	bd08      	pop	{r3, pc}
   b5e3c:	00030278 	.word	0x00030278

000b5e40 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b5e40:	b508      	push	{r3, lr}
   b5e42:	4b03      	ldr	r3, [pc, #12]	; (b5e50 <hal_ble_gap_disconnect+0x10>)
   b5e44:	681b      	ldr	r3, [r3, #0]
   b5e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b5e4a:	9301      	str	r3, [sp, #4]
   b5e4c:	bd08      	pop	{r3, pc}
   b5e4e:	0000      	.short	0x0000
   b5e50:	00030278 	.word	0x00030278

000b5e54 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b5e54:	b508      	push	{r3, lr}
   b5e56:	4b03      	ldr	r3, [pc, #12]	; (b5e64 <hal_ble_gatt_server_add_service+0x10>)
   b5e58:	681b      	ldr	r3, [r3, #0]
   b5e5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b5e5e:	9301      	str	r3, [sp, #4]
   b5e60:	bd08      	pop	{r3, pc}
   b5e62:	0000      	.short	0x0000
   b5e64:	00030278 	.word	0x00030278

000b5e68 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5e68:	b508      	push	{r3, lr}
   b5e6a:	4b03      	ldr	r3, [pc, #12]	; (b5e78 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b5e6c:	681b      	ldr	r3, [r3, #0]
   b5e6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b5e72:	9301      	str	r3, [sp, #4]
   b5e74:	bd08      	pop	{r3, pc}
   b5e76:	0000      	.short	0x0000
   b5e78:	00030278 	.word	0x00030278

000b5e7c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5e7c:	b508      	push	{r3, lr}
   b5e7e:	4b03      	ldr	r3, [pc, #12]	; (b5e8c <hal_ble_gatt_client_write_with_response+0x10>)
   b5e80:	681b      	ldr	r3, [r3, #0]
   b5e82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b5e86:	9301      	str	r3, [sp, #4]
   b5e88:	bd08      	pop	{r3, pc}
   b5e8a:	0000      	.short	0x0000
   b5e8c:	00030278 	.word	0x00030278

000b5e90 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5e90:	b508      	push	{r3, lr}
   b5e92:	4b03      	ldr	r3, [pc, #12]	; (b5ea0 <hal_ble_gatt_client_write_without_response+0x10>)
   b5e94:	681b      	ldr	r3, [r3, #0]
   b5e96:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b5e9a:	9301      	str	r3, [sp, #4]
   b5e9c:	bd08      	pop	{r3, pc}
   b5e9e:	0000      	.short	0x0000
   b5ea0:	00030278 	.word	0x00030278

000b5ea4 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b5ea4:	b508      	push	{r3, lr}
   b5ea6:	4b03      	ldr	r3, [pc, #12]	; (b5eb4 <hal_ble_gatt_server_add_characteristic+0x10>)
   b5ea8:	681b      	ldr	r3, [r3, #0]
   b5eaa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b5eae:	9301      	str	r3, [sp, #4]
   b5eb0:	bd08      	pop	{r3, pc}
   b5eb2:	0000      	.short	0x0000
   b5eb4:	00030278 	.word	0x00030278

000b5eb8 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b5eb8:	b508      	push	{r3, lr}
   b5eba:	4b03      	ldr	r3, [pc, #12]	; (b5ec8 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b5ebc:	681b      	ldr	r3, [r3, #0]
   b5ebe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b5ec2:	9301      	str	r3, [sp, #4]
   b5ec4:	bd08      	pop	{r3, pc}
   b5ec6:	0000      	.short	0x0000
   b5ec8:	00030278 	.word	0x00030278

000b5ecc <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5ecc:	b508      	push	{r3, lr}
   b5ece:	4b03      	ldr	r3, [pc, #12]	; (b5edc <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b5ed0:	681b      	ldr	r3, [r3, #0]
   b5ed2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b5ed6:	9301      	str	r3, [sp, #4]
   b5ed8:	bd08      	pop	{r3, pc}
   b5eda:	0000      	.short	0x0000
   b5edc:	00030278 	.word	0x00030278

000b5ee0 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5ee0:	b508      	push	{r3, lr}
   b5ee2:	4b03      	ldr	r3, [pc, #12]	; (b5ef0 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b5ee4:	681b      	ldr	r3, [r3, #0]
   b5ee6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b5eea:	9301      	str	r3, [sp, #4]
   b5eec:	bd08      	pop	{r3, pc}
   b5eee:	0000      	.short	0x0000
   b5ef0:	00030278 	.word	0x00030278

000b5ef4 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   b5ef4:	b508      	push	{r3, lr}
   b5ef6:	4b02      	ldr	r3, [pc, #8]	; (b5f00 <os_thread_create+0xc>)
   b5ef8:	681b      	ldr	r3, [r3, #0]
   b5efa:	685b      	ldr	r3, [r3, #4]
   b5efc:	9301      	str	r3, [sp, #4]
   b5efe:	bd08      	pop	{r3, pc}
   b5f00:	00030248 	.word	0x00030248

000b5f04 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b5f04:	b508      	push	{r3, lr}
   b5f06:	4b02      	ldr	r3, [pc, #8]	; (b5f10 <os_thread_yield+0xc>)
   b5f08:	681b      	ldr	r3, [r3, #0]
   b5f0a:	68db      	ldr	r3, [r3, #12]
   b5f0c:	9301      	str	r3, [sp, #4]
   b5f0e:	bd08      	pop	{r3, pc}
   b5f10:	00030248 	.word	0x00030248

000b5f14 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5f14:	b508      	push	{r3, lr}
   b5f16:	4b02      	ldr	r3, [pc, #8]	; (b5f20 <os_mutex_create+0xc>)
   b5f18:	681b      	ldr	r3, [r3, #0]
   b5f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f1c:	9301      	str	r3, [sp, #4]
   b5f1e:	bd08      	pop	{r3, pc}
   b5f20:	00030248 	.word	0x00030248

000b5f24 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b5f24:	b508      	push	{r3, lr}
   b5f26:	4b02      	ldr	r3, [pc, #8]	; (b5f30 <os_mutex_lock+0xc>)
   b5f28:	681b      	ldr	r3, [r3, #0]
   b5f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5f2c:	9301      	str	r3, [sp, #4]
   b5f2e:	bd08      	pop	{r3, pc}
   b5f30:	00030248 	.word	0x00030248

000b5f34 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b5f34:	b508      	push	{r3, lr}
   b5f36:	4b02      	ldr	r3, [pc, #8]	; (b5f40 <os_mutex_unlock+0xc>)
   b5f38:	681b      	ldr	r3, [r3, #0]
   b5f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f3c:	9301      	str	r3, [sp, #4]
   b5f3e:	bd08      	pop	{r3, pc}
   b5f40:	00030248 	.word	0x00030248

000b5f44 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5f44:	b508      	push	{r3, lr}
   b5f46:	4b02      	ldr	r3, [pc, #8]	; (b5f50 <os_mutex_recursive_create+0xc>)
   b5f48:	681b      	ldr	r3, [r3, #0]
   b5f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5f4c:	9301      	str	r3, [sp, #4]
   b5f4e:	bd08      	pop	{r3, pc}
   b5f50:	00030248 	.word	0x00030248

000b5f54 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b5f54:	b508      	push	{r3, lr}
   b5f56:	4b02      	ldr	r3, [pc, #8]	; (b5f60 <os_mutex_recursive_destroy+0xc>)
   b5f58:	681b      	ldr	r3, [r3, #0]
   b5f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5f5c:	9301      	str	r3, [sp, #4]
   b5f5e:	bd08      	pop	{r3, pc}
   b5f60:	00030248 	.word	0x00030248

000b5f64 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5f64:	b508      	push	{r3, lr}
   b5f66:	4b02      	ldr	r3, [pc, #8]	; (b5f70 <os_mutex_recursive_lock+0xc>)
   b5f68:	681b      	ldr	r3, [r3, #0]
   b5f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5f6c:	9301      	str	r3, [sp, #4]
   b5f6e:	bd08      	pop	{r3, pc}
   b5f70:	00030248 	.word	0x00030248

000b5f74 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5f74:	b508      	push	{r3, lr}
   b5f76:	4b02      	ldr	r3, [pc, #8]	; (b5f80 <os_mutex_recursive_unlock+0xc>)
   b5f78:	681b      	ldr	r3, [r3, #0]
   b5f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5f7c:	9301      	str	r3, [sp, #4]
   b5f7e:	bd08      	pop	{r3, pc}
   b5f80:	00030248 	.word	0x00030248

000b5f84 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5f84:	b508      	push	{r3, lr}
   b5f86:	4b02      	ldr	r3, [pc, #8]	; (b5f90 <HAL_RNG_GetRandomNumber+0xc>)
   b5f88:	681b      	ldr	r3, [r3, #0]
   b5f8a:	685b      	ldr	r3, [r3, #4]
   b5f8c:	9301      	str	r3, [sp, #4]
   b5f8e:	bd08      	pop	{r3, pc}
   b5f90:	00030218 	.word	0x00030218

000b5f94 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5f94:	b508      	push	{r3, lr}
   b5f96:	4b02      	ldr	r3, [pc, #8]	; (b5fa0 <HAL_Delay_Microseconds+0xc>)
   b5f98:	681b      	ldr	r3, [r3, #0]
   b5f9a:	68db      	ldr	r3, [r3, #12]
   b5f9c:	9301      	str	r3, [sp, #4]
   b5f9e:	bd08      	pop	{r3, pc}
   b5fa0:	00030218 	.word	0x00030218

000b5fa4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5fa4:	b508      	push	{r3, lr}
   b5fa6:	4b02      	ldr	r3, [pc, #8]	; (b5fb0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5fa8:	681b      	ldr	r3, [r3, #0]
   b5faa:	695b      	ldr	r3, [r3, #20]
   b5fac:	9301      	str	r3, [sp, #4]
   b5fae:	bd08      	pop	{r3, pc}
   b5fb0:	00030218 	.word	0x00030218

000b5fb4 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b5fb4:	b508      	push	{r3, lr}
   b5fb6:	4b02      	ldr	r3, [pc, #8]	; (b5fc0 <HAL_EEPROM_Init+0xc>)
   b5fb8:	681b      	ldr	r3, [r3, #0]
   b5fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5fbc:	9301      	str	r3, [sp, #4]
   b5fbe:	bd08      	pop	{r3, pc}
   b5fc0:	00030218 	.word	0x00030218

000b5fc4 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   b5fc4:	b508      	push	{r3, lr}
   b5fc6:	4b02      	ldr	r3, [pc, #8]	; (b5fd0 <HAL_EEPROM_Get+0xc>)
   b5fc8:	681b      	ldr	r3, [r3, #0]
   b5fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5fcc:	9301      	str	r3, [sp, #4]
   b5fce:	bd08      	pop	{r3, pc}
   b5fd0:	00030218 	.word	0x00030218

000b5fd4 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   b5fd4:	b508      	push	{r3, lr}
   b5fd6:	4b02      	ldr	r3, [pc, #8]	; (b5fe0 <HAL_EEPROM_Put+0xc>)
   b5fd8:	681b      	ldr	r3, [r3, #0]
   b5fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5fdc:	9301      	str	r3, [sp, #4]
   b5fde:	bd08      	pop	{r3, pc}
   b5fe0:	00030218 	.word	0x00030218

000b5fe4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5fe4:	b508      	push	{r3, lr}
   b5fe6:	4b02      	ldr	r3, [pc, #8]	; (b5ff0 <hal_rtc_time_is_valid+0xc>)
   b5fe8:	681b      	ldr	r3, [r3, #0]
   b5fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5fec:	9301      	str	r3, [sp, #4]
   b5fee:	bd08      	pop	{r3, pc}
   b5ff0:	00030218 	.word	0x00030218

000b5ff4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5ff4:	b508      	push	{r3, lr}
   b5ff6:	4b02      	ldr	r3, [pc, #8]	; (b6000 <hal_rtc_get_time+0xc>)
   b5ff8:	681b      	ldr	r3, [r3, #0]
   b5ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5ffc:	9301      	str	r3, [sp, #4]
   b5ffe:	bd08      	pop	{r3, pc}
   b6000:	00030218 	.word	0x00030218

000b6004 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6004:	b508      	push	{r3, lr}
   b6006:	4b02      	ldr	r3, [pc, #8]	; (b6010 <HAL_Pin_Mode+0xc>)
   b6008:	681b      	ldr	r3, [r3, #0]
   b600a:	689b      	ldr	r3, [r3, #8]
   b600c:	9301      	str	r3, [sp, #4]
   b600e:	bd08      	pop	{r3, pc}
   b6010:	0003022c 	.word	0x0003022c

000b6014 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6014:	b508      	push	{r3, lr}
   b6016:	4b02      	ldr	r3, [pc, #8]	; (b6020 <HAL_Get_Pin_Mode+0xc>)
   b6018:	681b      	ldr	r3, [r3, #0]
   b601a:	68db      	ldr	r3, [r3, #12]
   b601c:	9301      	str	r3, [sp, #4]
   b601e:	bd08      	pop	{r3, pc}
   b6020:	0003022c 	.word	0x0003022c

000b6024 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6024:	b508      	push	{r3, lr}
   b6026:	4b02      	ldr	r3, [pc, #8]	; (b6030 <HAL_GPIO_Write+0xc>)
   b6028:	681b      	ldr	r3, [r3, #0]
   b602a:	691b      	ldr	r3, [r3, #16]
   b602c:	9301      	str	r3, [sp, #4]
   b602e:	bd08      	pop	{r3, pc}
   b6030:	0003022c 	.word	0x0003022c

000b6034 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6034:	b508      	push	{r3, lr}
   b6036:	4b02      	ldr	r3, [pc, #8]	; (b6040 <HAL_GPIO_Read+0xc>)
   b6038:	681b      	ldr	r3, [r3, #0]
   b603a:	695b      	ldr	r3, [r3, #20]
   b603c:	9301      	str	r3, [sp, #4]
   b603e:	bd08      	pop	{r3, pc}
   b6040:	0003022c 	.word	0x0003022c

000b6044 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6044:	b508      	push	{r3, lr}
   b6046:	4b02      	ldr	r3, [pc, #8]	; (b6050 <hal_i2c_begin+0xc>)
   b6048:	681b      	ldr	r3, [r3, #0]
   b604a:	68db      	ldr	r3, [r3, #12]
   b604c:	9301      	str	r3, [sp, #4]
   b604e:	bd08      	pop	{r3, pc}
   b6050:	00030228 	.word	0x00030228

000b6054 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6054:	b508      	push	{r3, lr}
   b6056:	4b02      	ldr	r3, [pc, #8]	; (b6060 <hal_i2c_begin_transmission+0xc>)
   b6058:	681b      	ldr	r3, [r3, #0]
   b605a:	699b      	ldr	r3, [r3, #24]
   b605c:	9301      	str	r3, [sp, #4]
   b605e:	bd08      	pop	{r3, pc}
   b6060:	00030228 	.word	0x00030228

000b6064 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6064:	b508      	push	{r3, lr}
   b6066:	4b02      	ldr	r3, [pc, #8]	; (b6070 <hal_i2c_end_transmission+0xc>)
   b6068:	681b      	ldr	r3, [r3, #0]
   b606a:	69db      	ldr	r3, [r3, #28]
   b606c:	9301      	str	r3, [sp, #4]
   b606e:	bd08      	pop	{r3, pc}
   b6070:	00030228 	.word	0x00030228

000b6074 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6074:	b508      	push	{r3, lr}
   b6076:	4b02      	ldr	r3, [pc, #8]	; (b6080 <hal_i2c_write+0xc>)
   b6078:	681b      	ldr	r3, [r3, #0]
   b607a:	6a1b      	ldr	r3, [r3, #32]
   b607c:	9301      	str	r3, [sp, #4]
   b607e:	bd08      	pop	{r3, pc}
   b6080:	00030228 	.word	0x00030228

000b6084 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6084:	b508      	push	{r3, lr}
   b6086:	4b02      	ldr	r3, [pc, #8]	; (b6090 <hal_i2c_available+0xc>)
   b6088:	681b      	ldr	r3, [r3, #0]
   b608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b608c:	9301      	str	r3, [sp, #4]
   b608e:	bd08      	pop	{r3, pc}
   b6090:	00030228 	.word	0x00030228

000b6094 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6094:	b508      	push	{r3, lr}
   b6096:	4b02      	ldr	r3, [pc, #8]	; (b60a0 <hal_i2c_read+0xc>)
   b6098:	681b      	ldr	r3, [r3, #0]
   b609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b609c:	9301      	str	r3, [sp, #4]
   b609e:	bd08      	pop	{r3, pc}
   b60a0:	00030228 	.word	0x00030228

000b60a4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b60a4:	b508      	push	{r3, lr}
   b60a6:	4b02      	ldr	r3, [pc, #8]	; (b60b0 <hal_i2c_peek+0xc>)
   b60a8:	681b      	ldr	r3, [r3, #0]
   b60aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b60ac:	9301      	str	r3, [sp, #4]
   b60ae:	bd08      	pop	{r3, pc}
   b60b0:	00030228 	.word	0x00030228

000b60b4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b60b4:	b508      	push	{r3, lr}
   b60b6:	4b02      	ldr	r3, [pc, #8]	; (b60c0 <hal_i2c_flush+0xc>)
   b60b8:	681b      	ldr	r3, [r3, #0]
   b60ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b60bc:	9301      	str	r3, [sp, #4]
   b60be:	bd08      	pop	{r3, pc}
   b60c0:	00030228 	.word	0x00030228

000b60c4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b60c4:	b508      	push	{r3, lr}
   b60c6:	4b02      	ldr	r3, [pc, #8]	; (b60d0 <hal_i2c_is_enabled+0xc>)
   b60c8:	681b      	ldr	r3, [r3, #0]
   b60ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b60cc:	9301      	str	r3, [sp, #4]
   b60ce:	bd08      	pop	{r3, pc}
   b60d0:	00030228 	.word	0x00030228

000b60d4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b60d4:	b508      	push	{r3, lr}
   b60d6:	4b02      	ldr	r3, [pc, #8]	; (b60e0 <hal_i2c_init+0xc>)
   b60d8:	681b      	ldr	r3, [r3, #0]
   b60da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b60dc:	9301      	str	r3, [sp, #4]
   b60de:	bd08      	pop	{r3, pc}
   b60e0:	00030228 	.word	0x00030228

000b60e4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b60e4:	b508      	push	{r3, lr}
   b60e6:	4b02      	ldr	r3, [pc, #8]	; (b60f0 <hal_i2c_request_ex+0xc>)
   b60e8:	681b      	ldr	r3, [r3, #0]
   b60ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b60ec:	9301      	str	r3, [sp, #4]
   b60ee:	bd08      	pop	{r3, pc}
   b60f0:	00030228 	.word	0x00030228

000b60f4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b60f4:	b508      	push	{r3, lr}
   b60f6:	4b02      	ldr	r3, [pc, #8]	; (b6100 <if_index_to_name+0xc>)
   b60f8:	681b      	ldr	r3, [r3, #0]
   b60fa:	695b      	ldr	r3, [r3, #20]
   b60fc:	9301      	str	r3, [sp, #4]
   b60fe:	bd08      	pop	{r3, pc}
   b6100:	0003026c 	.word	0x0003026c

000b6104 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6104:	b508      	push	{r3, lr}
   b6106:	4b02      	ldr	r3, [pc, #8]	; (b6110 <inet_inet_ntop+0xc>)
   b6108:	681b      	ldr	r3, [r3, #0]
   b610a:	695b      	ldr	r3, [r3, #20]
   b610c:	9301      	str	r3, [sp, #4]
   b610e:	bd08      	pop	{r3, pc}
   b6110:	00030264 	.word	0x00030264

000b6114 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6114:	b508      	push	{r3, lr}
   b6116:	4b02      	ldr	r3, [pc, #8]	; (b6120 <inet_htonl+0xc>)
   b6118:	681b      	ldr	r3, [r3, #0]
   b611a:	6a1b      	ldr	r3, [r3, #32]
   b611c:	9301      	str	r3, [sp, #4]
   b611e:	bd08      	pop	{r3, pc}
   b6120:	00030264 	.word	0x00030264

000b6124 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6124:	b508      	push	{r3, lr}
   b6126:	4b02      	ldr	r3, [pc, #8]	; (b6130 <inet_htons+0xc>)
   b6128:	681b      	ldr	r3, [r3, #0]
   b612a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b612c:	9301      	str	r3, [sp, #4]
   b612e:	bd08      	pop	{r3, pc}
   b6130:	00030264 	.word	0x00030264

000b6134 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6134:	b508      	push	{r3, lr}
   b6136:	4b02      	ldr	r3, [pc, #8]	; (b6140 <netdb_freeaddrinfo+0xc>)
   b6138:	681b      	ldr	r3, [r3, #0]
   b613a:	689b      	ldr	r3, [r3, #8]
   b613c:	9301      	str	r3, [sp, #4]
   b613e:	bd08      	pop	{r3, pc}
   b6140:	00030268 	.word	0x00030268

000b6144 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6144:	b508      	push	{r3, lr}
   b6146:	4b02      	ldr	r3, [pc, #8]	; (b6150 <netdb_getaddrinfo+0xc>)
   b6148:	681b      	ldr	r3, [r3, #0]
   b614a:	68db      	ldr	r3, [r3, #12]
   b614c:	9301      	str	r3, [sp, #4]
   b614e:	bd08      	pop	{r3, pc}
   b6150:	00030268 	.word	0x00030268

000b6154 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6154:	b508      	push	{r3, lr}
   b6156:	4b02      	ldr	r3, [pc, #8]	; (b6160 <sock_setsockopt+0xc>)
   b6158:	681b      	ldr	r3, [r3, #0]
   b615a:	699b      	ldr	r3, [r3, #24]
   b615c:	9301      	str	r3, [sp, #4]
   b615e:	bd08      	pop	{r3, pc}
   b6160:	00030238 	.word	0x00030238

000b6164 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6164:	b508      	push	{r3, lr}
   b6166:	4b02      	ldr	r3, [pc, #8]	; (b6170 <sock_close+0xc>)
   b6168:	681b      	ldr	r3, [r3, #0]
   b616a:	69db      	ldr	r3, [r3, #28]
   b616c:	9301      	str	r3, [sp, #4]
   b616e:	bd08      	pop	{r3, pc}
   b6170:	00030238 	.word	0x00030238

000b6174 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6174:	b508      	push	{r3, lr}
   b6176:	4b02      	ldr	r3, [pc, #8]	; (b6180 <sock_connect+0xc>)
   b6178:	681b      	ldr	r3, [r3, #0]
   b617a:	6a1b      	ldr	r3, [r3, #32]
   b617c:	9301      	str	r3, [sp, #4]
   b617e:	bd08      	pop	{r3, pc}
   b6180:	00030238 	.word	0x00030238

000b6184 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6184:	b508      	push	{r3, lr}
   b6186:	4b02      	ldr	r3, [pc, #8]	; (b6190 <sock_recv+0xc>)
   b6188:	681b      	ldr	r3, [r3, #0]
   b618a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b618c:	9301      	str	r3, [sp, #4]
   b618e:	bd08      	pop	{r3, pc}
   b6190:	00030238 	.word	0x00030238

000b6194 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6194:	b508      	push	{r3, lr}
   b6196:	4b02      	ldr	r3, [pc, #8]	; (b61a0 <sock_send+0xc>)
   b6198:	681b      	ldr	r3, [r3, #0]
   b619a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b619c:	9301      	str	r3, [sp, #4]
   b619e:	bd08      	pop	{r3, pc}
   b61a0:	00030238 	.word	0x00030238

000b61a4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b61a4:	b508      	push	{r3, lr}
   b61a6:	4b02      	ldr	r3, [pc, #8]	; (b61b0 <sock_socket+0xc>)
   b61a8:	681b      	ldr	r3, [r3, #0]
   b61aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b61ac:	9301      	str	r3, [sp, #4]
   b61ae:	bd08      	pop	{r3, pc}
   b61b0:	00030238 	.word	0x00030238

000b61b4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b61b4:	b508      	push	{r3, lr}
   b61b6:	4b02      	ldr	r3, [pc, #8]	; (b61c0 <hal_spi_begin+0xc>)
   b61b8:	681b      	ldr	r3, [r3, #0]
   b61ba:	681b      	ldr	r3, [r3, #0]
   b61bc:	9301      	str	r3, [sp, #4]
   b61be:	bd08      	pop	{r3, pc}
   b61c0:	00030230 	.word	0x00030230

000b61c4 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b61c4:	b508      	push	{r3, lr}
   b61c6:	4b02      	ldr	r3, [pc, #8]	; (b61d0 <hal_spi_set_bit_order+0xc>)
   b61c8:	681b      	ldr	r3, [r3, #0]
   b61ca:	689b      	ldr	r3, [r3, #8]
   b61cc:	9301      	str	r3, [sp, #4]
   b61ce:	bd08      	pop	{r3, pc}
   b61d0:	00030230 	.word	0x00030230

000b61d4 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b61d4:	b508      	push	{r3, lr}
   b61d6:	4b02      	ldr	r3, [pc, #8]	; (b61e0 <hal_spi_set_data_mode+0xc>)
   b61d8:	681b      	ldr	r3, [r3, #0]
   b61da:	68db      	ldr	r3, [r3, #12]
   b61dc:	9301      	str	r3, [sp, #4]
   b61de:	bd08      	pop	{r3, pc}
   b61e0:	00030230 	.word	0x00030230

000b61e4 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b61e4:	b508      	push	{r3, lr}
   b61e6:	4b02      	ldr	r3, [pc, #8]	; (b61f0 <hal_spi_set_clock_divider+0xc>)
   b61e8:	681b      	ldr	r3, [r3, #0]
   b61ea:	691b      	ldr	r3, [r3, #16]
   b61ec:	9301      	str	r3, [sp, #4]
   b61ee:	bd08      	pop	{r3, pc}
   b61f0:	00030230 	.word	0x00030230

000b61f4 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b61f4:	b508      	push	{r3, lr}
   b61f6:	4b02      	ldr	r3, [pc, #8]	; (b6200 <hal_spi_transfer+0xc>)
   b61f8:	681b      	ldr	r3, [r3, #0]
   b61fa:	695b      	ldr	r3, [r3, #20]
   b61fc:	9301      	str	r3, [sp, #4]
   b61fe:	bd08      	pop	{r3, pc}
   b6200:	00030230 	.word	0x00030230

000b6204 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6204:	b508      	push	{r3, lr}
   b6206:	4b02      	ldr	r3, [pc, #8]	; (b6210 <hal_spi_init+0xc>)
   b6208:	681b      	ldr	r3, [r3, #0]
   b620a:	69db      	ldr	r3, [r3, #28]
   b620c:	9301      	str	r3, [sp, #4]
   b620e:	bd08      	pop	{r3, pc}
   b6210:	00030230 	.word	0x00030230

000b6214 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6214:	b508      	push	{r3, lr}
   b6216:	4b02      	ldr	r3, [pc, #8]	; (b6220 <hal_spi_is_enabled+0xc>)
   b6218:	681b      	ldr	r3, [r3, #0]
   b621a:	6a1b      	ldr	r3, [r3, #32]
   b621c:	9301      	str	r3, [sp, #4]
   b621e:	bd08      	pop	{r3, pc}
   b6220:	00030230 	.word	0x00030230

000b6224 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6224:	b508      	push	{r3, lr}
   b6226:	4b02      	ldr	r3, [pc, #8]	; (b6230 <hal_spi_info+0xc>)
   b6228:	681b      	ldr	r3, [r3, #0]
   b622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b622c:	9301      	str	r3, [sp, #4]
   b622e:	bd08      	pop	{r3, pc}
   b6230:	00030230 	.word	0x00030230

000b6234 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6234:	b508      	push	{r3, lr}
   b6236:	4b02      	ldr	r3, [pc, #8]	; (b6240 <hal_spi_acquire+0xc>)
   b6238:	681b      	ldr	r3, [r3, #0]
   b623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b623c:	9301      	str	r3, [sp, #4]
   b623e:	bd08      	pop	{r3, pc}
   b6240:	00030230 	.word	0x00030230

000b6244 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6244:	b508      	push	{r3, lr}
   b6246:	4b02      	ldr	r3, [pc, #8]	; (b6250 <hal_spi_release+0xc>)
   b6248:	681b      	ldr	r3, [r3, #0]
   b624a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b624c:	9301      	str	r3, [sp, #4]
   b624e:	bd08      	pop	{r3, pc}
   b6250:	00030230 	.word	0x00030230

000b6254 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   b6254:	b508      	push	{r3, lr}
   b6256:	4b02      	ldr	r3, [pc, #8]	; (b6260 <hal_usart_init+0xc>)
   b6258:	681b      	ldr	r3, [r3, #0]
   b625a:	681b      	ldr	r3, [r3, #0]
   b625c:	9301      	str	r3, [sp, #4]
   b625e:	bd08      	pop	{r3, pc}
   b6260:	0003023c 	.word	0x0003023c

000b6264 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6264:	b508      	push	{r3, lr}
   b6266:	4b02      	ldr	r3, [pc, #8]	; (b6270 <hal_usart_write+0xc>)
   b6268:	681b      	ldr	r3, [r3, #0]
   b626a:	68db      	ldr	r3, [r3, #12]
   b626c:	9301      	str	r3, [sp, #4]
   b626e:	bd08      	pop	{r3, pc}
   b6270:	0003023c 	.word	0x0003023c

000b6274 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6274:	b508      	push	{r3, lr}
   b6276:	4b02      	ldr	r3, [pc, #8]	; (b6280 <hal_usart_available+0xc>)
   b6278:	681b      	ldr	r3, [r3, #0]
   b627a:	691b      	ldr	r3, [r3, #16]
   b627c:	9301      	str	r3, [sp, #4]
   b627e:	bd08      	pop	{r3, pc}
   b6280:	0003023c 	.word	0x0003023c

000b6284 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6284:	b508      	push	{r3, lr}
   b6286:	4b02      	ldr	r3, [pc, #8]	; (b6290 <hal_usart_read+0xc>)
   b6288:	681b      	ldr	r3, [r3, #0]
   b628a:	695b      	ldr	r3, [r3, #20]
   b628c:	9301      	str	r3, [sp, #4]
   b628e:	bd08      	pop	{r3, pc}
   b6290:	0003023c 	.word	0x0003023c

000b6294 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6294:	b508      	push	{r3, lr}
   b6296:	4b02      	ldr	r3, [pc, #8]	; (b62a0 <hal_usart_peek+0xc>)
   b6298:	681b      	ldr	r3, [r3, #0]
   b629a:	699b      	ldr	r3, [r3, #24]
   b629c:	9301      	str	r3, [sp, #4]
   b629e:	bd08      	pop	{r3, pc}
   b62a0:	0003023c 	.word	0x0003023c

000b62a4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b62a4:	b508      	push	{r3, lr}
   b62a6:	4b02      	ldr	r3, [pc, #8]	; (b62b0 <hal_usart_flush+0xc>)
   b62a8:	681b      	ldr	r3, [r3, #0]
   b62aa:	69db      	ldr	r3, [r3, #28]
   b62ac:	9301      	str	r3, [sp, #4]
   b62ae:	bd08      	pop	{r3, pc}
   b62b0:	0003023c 	.word	0x0003023c

000b62b4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b62b4:	b508      	push	{r3, lr}
   b62b6:	4b02      	ldr	r3, [pc, #8]	; (b62c0 <hal_usart_is_enabled+0xc>)
   b62b8:	681b      	ldr	r3, [r3, #0]
   b62ba:	6a1b      	ldr	r3, [r3, #32]
   b62bc:	9301      	str	r3, [sp, #4]
   b62be:	bd08      	pop	{r3, pc}
   b62c0:	0003023c 	.word	0x0003023c

000b62c4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b62c4:	b508      	push	{r3, lr}
   b62c6:	4b02      	ldr	r3, [pc, #8]	; (b62d0 <hal_usart_available_data_for_write+0xc>)
   b62c8:	681b      	ldr	r3, [r3, #0]
   b62ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b62cc:	9301      	str	r3, [sp, #4]
   b62ce:	bd08      	pop	{r3, pc}
   b62d0:	0003023c 	.word	0x0003023c

000b62d4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b62d4:	b508      	push	{r3, lr}
   b62d6:	4b02      	ldr	r3, [pc, #8]	; (b62e0 <HAL_USB_USART_Init+0xc>)
   b62d8:	681b      	ldr	r3, [r3, #0]
   b62da:	681b      	ldr	r3, [r3, #0]
   b62dc:	9301      	str	r3, [sp, #4]
   b62de:	bd08      	pop	{r3, pc}
   b62e0:	0003024c 	.word	0x0003024c

000b62e4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b62e4:	b508      	push	{r3, lr}
   b62e6:	4b02      	ldr	r3, [pc, #8]	; (b62f0 <HAL_USB_USART_Begin+0xc>)
   b62e8:	681b      	ldr	r3, [r3, #0]
   b62ea:	685b      	ldr	r3, [r3, #4]
   b62ec:	9301      	str	r3, [sp, #4]
   b62ee:	bd08      	pop	{r3, pc}
   b62f0:	0003024c 	.word	0x0003024c

000b62f4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b62f4:	b508      	push	{r3, lr}
   b62f6:	4b02      	ldr	r3, [pc, #8]	; (b6300 <HAL_USB_USART_Available_Data+0xc>)
   b62f8:	681b      	ldr	r3, [r3, #0]
   b62fa:	691b      	ldr	r3, [r3, #16]
   b62fc:	9301      	str	r3, [sp, #4]
   b62fe:	bd08      	pop	{r3, pc}
   b6300:	0003024c 	.word	0x0003024c

000b6304 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6304:	b508      	push	{r3, lr}
   b6306:	4b02      	ldr	r3, [pc, #8]	; (b6310 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6308:	681b      	ldr	r3, [r3, #0]
   b630a:	695b      	ldr	r3, [r3, #20]
   b630c:	9301      	str	r3, [sp, #4]
   b630e:	bd08      	pop	{r3, pc}
   b6310:	0003024c 	.word	0x0003024c

000b6314 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6314:	b508      	push	{r3, lr}
   b6316:	4b02      	ldr	r3, [pc, #8]	; (b6320 <HAL_USB_USART_Receive_Data+0xc>)
   b6318:	681b      	ldr	r3, [r3, #0]
   b631a:	699b      	ldr	r3, [r3, #24]
   b631c:	9301      	str	r3, [sp, #4]
   b631e:	bd08      	pop	{r3, pc}
   b6320:	0003024c 	.word	0x0003024c

000b6324 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6324:	b508      	push	{r3, lr}
   b6326:	4b02      	ldr	r3, [pc, #8]	; (b6330 <HAL_USB_USART_Send_Data+0xc>)
   b6328:	681b      	ldr	r3, [r3, #0]
   b632a:	69db      	ldr	r3, [r3, #28]
   b632c:	9301      	str	r3, [sp, #4]
   b632e:	bd08      	pop	{r3, pc}
   b6330:	0003024c 	.word	0x0003024c

000b6334 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6334:	b508      	push	{r3, lr}
   b6336:	4b02      	ldr	r3, [pc, #8]	; (b6340 <HAL_USB_USART_Flush_Data+0xc>)
   b6338:	681b      	ldr	r3, [r3, #0]
   b633a:	6a1b      	ldr	r3, [r3, #32]
   b633c:	9301      	str	r3, [sp, #4]
   b633e:	bd08      	pop	{r3, pc}
   b6340:	0003024c 	.word	0x0003024c

000b6344 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b6344:	b508      	push	{r3, lr}
   b6346:	4b02      	ldr	r3, [pc, #8]	; (b6350 <HAL_USB_USART_Is_Connected+0xc>)
   b6348:	681b      	ldr	r3, [r3, #0]
   b634a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b634c:	9301      	str	r3, [sp, #4]
   b634e:	bd08      	pop	{r3, pc}
   b6350:	0003024c 	.word	0x0003024c

000b6354 <wlan_get_credentials>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
   b6354:	b508      	push	{r3, lr}
   b6356:	4b02      	ldr	r3, [pc, #8]	; (b6360 <wlan_get_credentials+0xc>)
   b6358:	681b      	ldr	r3, [r3, #0]
   b635a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b635c:	9301      	str	r3, [sp, #4]
   b635e:	bd08      	pop	{r3, pc}
   b6360:	00030274 	.word	0x00030274

000b6364 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6364:	b508      	push	{r3, lr}
   b6366:	4b02      	ldr	r3, [pc, #8]	; (b6370 <panic_+0xc>)
   b6368:	681b      	ldr	r3, [r3, #0]
   b636a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b636c:	9301      	str	r3, [sp, #4]
   b636e:	bd08      	pop	{r3, pc}
   b6370:	00030260 	.word	0x00030260

000b6374 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6374:	b508      	push	{r3, lr}
   b6376:	4b02      	ldr	r3, [pc, #8]	; (b6380 <log_message+0xc>)
   b6378:	681b      	ldr	r3, [r3, #0]
   b637a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b637c:	9301      	str	r3, [sp, #4]
   b637e:	bd08      	pop	{r3, pc}
   b6380:	00030260 	.word	0x00030260

000b6384 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6384:	b508      	push	{r3, lr}
   b6386:	4b02      	ldr	r3, [pc, #8]	; (b6390 <system_mode+0xc>)
   b6388:	681b      	ldr	r3, [r3, #0]
   b638a:	681b      	ldr	r3, [r3, #0]
   b638c:	9301      	str	r3, [sp, #4]
   b638e:	bd08      	pop	{r3, pc}
   b6390:	00030220 	.word	0x00030220

000b6394 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6394:	b508      	push	{r3, lr}
   b6396:	4b02      	ldr	r3, [pc, #8]	; (b63a0 <set_system_mode+0xc>)
   b6398:	681b      	ldr	r3, [r3, #0]
   b639a:	685b      	ldr	r3, [r3, #4]
   b639c:	9301      	str	r3, [sp, #4]
   b639e:	bd08      	pop	{r3, pc}
   b63a0:	00030220 	.word	0x00030220

000b63a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b63a4:	b508      	push	{r3, lr}
   b63a6:	4b02      	ldr	r3, [pc, #8]	; (b63b0 <system_delay_ms+0xc>)
   b63a8:	681b      	ldr	r3, [r3, #0]
   b63aa:	695b      	ldr	r3, [r3, #20]
   b63ac:	9301      	str	r3, [sp, #4]
   b63ae:	bd08      	pop	{r3, pc}
   b63b0:	00030220 	.word	0x00030220

000b63b4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b63b4:	b508      	push	{r3, lr}
   b63b6:	4b02      	ldr	r3, [pc, #8]	; (b63c0 <system_thread_set_state+0xc>)
   b63b8:	681b      	ldr	r3, [r3, #0]
   b63ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b63bc:	9301      	str	r3, [sp, #4]
   b63be:	bd08      	pop	{r3, pc}
   b63c0:	00030220 	.word	0x00030220

000b63c4 <system_internal>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
   b63c4:	b508      	push	{r3, lr}
   b63c6:	4b02      	ldr	r3, [pc, #8]	; (b63d0 <system_internal+0xc>)
   b63c8:	681b      	ldr	r3, [r3, #0]
   b63ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b63cc:	9301      	str	r3, [sp, #4]
   b63ce:	bd08      	pop	{r3, pc}
   b63d0:	00030220 	.word	0x00030220

000b63d4 <system_set_flag>:
DYNALIB_FN(14, system, system_set_flag, int(system_flag_t, uint8_t, void*))
   b63d4:	b508      	push	{r3, lr}
   b63d6:	4b02      	ldr	r3, [pc, #8]	; (b63e0 <system_set_flag+0xc>)
   b63d8:	681b      	ldr	r3, [r3, #0]
   b63da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b63dc:	9301      	str	r3, [sp, #4]
   b63de:	bd08      	pop	{r3, pc}
   b63e0:	00030220 	.word	0x00030220

000b63e4 <system_get_flag>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
   b63e4:	b508      	push	{r3, lr}
   b63e6:	4b02      	ldr	r3, [pc, #8]	; (b63f0 <system_get_flag+0xc>)
   b63e8:	681b      	ldr	r3, [r3, #0]
   b63ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b63ec:	9301      	str	r3, [sp, #4]
   b63ee:	bd08      	pop	{r3, pc}
   b63f0:	00030220 	.word	0x00030220

000b63f4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b63f4:	b508      	push	{r3, lr}
   b63f6:	4b02      	ldr	r3, [pc, #8]	; (b6400 <system_thread_get_state+0xc>)
   b63f8:	681b      	ldr	r3, [r3, #0]
   b63fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b63fc:	9301      	str	r3, [sp, #4]
   b63fe:	bd08      	pop	{r3, pc}
   b6400:	00030220 	.word	0x00030220

000b6404 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6404:	b508      	push	{r3, lr}
   b6406:	4b03      	ldr	r3, [pc, #12]	; (b6414 <system_ctrl_set_app_request_handler+0x10>)
   b6408:	681b      	ldr	r3, [r3, #0]
   b640a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b640e:	9301      	str	r3, [sp, #4]
   b6410:	bd08      	pop	{r3, pc}
   b6412:	0000      	.short	0x0000
   b6414:	00030220 	.word	0x00030220

000b6418 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6418:	b508      	push	{r3, lr}
   b641a:	4b03      	ldr	r3, [pc, #12]	; (b6428 <system_ctrl_set_result+0x10>)
   b641c:	681b      	ldr	r3, [r3, #0]
   b641e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6422:	9301      	str	r3, [sp, #4]
   b6424:	bd08      	pop	{r3, pc}
   b6426:	0000      	.short	0x0000
   b6428:	00030220 	.word	0x00030220

000b642c <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b642c:	b508      	push	{r3, lr}
   b642e:	4b03      	ldr	r3, [pc, #12]	; (b643c <system_reset+0x10>)
   b6430:	681b      	ldr	r3, [r3, #0]
   b6432:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b6436:	9301      	str	r3, [sp, #4]
   b6438:	bd08      	pop	{r3, pc}
   b643a:	0000      	.short	0x0000
   b643c:	00030220 	.word	0x00030220

000b6440 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6440:	b508      	push	{r3, lr}
   b6442:	4b02      	ldr	r3, [pc, #8]	; (b644c <spark_process+0xc>)
   b6444:	681b      	ldr	r3, [r3, #0]
   b6446:	689b      	ldr	r3, [r3, #8]
   b6448:	9301      	str	r3, [sp, #4]
   b644a:	bd08      	pop	{r3, pc}
   b644c:	00030244 	.word	0x00030244

000b6450 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b6450:	b508      	push	{r3, lr}
   b6452:	4b02      	ldr	r3, [pc, #8]	; (b645c <spark_cloud_flag_connect+0xc>)
   b6454:	681b      	ldr	r3, [r3, #0]
   b6456:	68db      	ldr	r3, [r3, #12]
   b6458:	9301      	str	r3, [sp, #4]
   b645a:	bd08      	pop	{r3, pc}
   b645c:	00030244 	.word	0x00030244

000b6460 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6460:	b508      	push	{r3, lr}
   b6462:	4b02      	ldr	r3, [pc, #8]	; (b646c <spark_cloud_flag_connected+0xc>)
   b6464:	681b      	ldr	r3, [r3, #0]
   b6466:	695b      	ldr	r3, [r3, #20]
   b6468:	9301      	str	r3, [sp, #4]
   b646a:	bd08      	pop	{r3, pc}
   b646c:	00030244 	.word	0x00030244

000b6470 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b6470:	b508      	push	{r3, lr}
   b6472:	4b02      	ldr	r3, [pc, #8]	; (b647c <spark_sync_time+0xc>)
   b6474:	681b      	ldr	r3, [r3, #0]
   b6476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6478:	9301      	str	r3, [sp, #4]
   b647a:	bd08      	pop	{r3, pc}
   b647c:	00030244 	.word	0x00030244

000b6480 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6480:	b508      	push	{r3, lr}
   b6482:	4b02      	ldr	r3, [pc, #8]	; (b648c <spark_sync_time_pending+0xc>)
   b6484:	681b      	ldr	r3, [r3, #0]
   b6486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6488:	9301      	str	r3, [sp, #4]
   b648a:	bd08      	pop	{r3, pc}
   b648c:	00030244 	.word	0x00030244

000b6490 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6490:	b508      	push	{r3, lr}
   b6492:	4b02      	ldr	r3, [pc, #8]	; (b649c <spark_set_random_seed_from_cloud_handler+0xc>)
   b6494:	681b      	ldr	r3, [r3, #0]
   b6496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6498:	9301      	str	r3, [sp, #4]
   b649a:	bd08      	pop	{r3, pc}
   b649c:	00030244 	.word	0x00030244

000b64a0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b64a0:	b508      	push	{r3, lr}
   b64a2:	4b02      	ldr	r3, [pc, #8]	; (b64ac <network_connect+0xc>)
   b64a4:	681b      	ldr	r3, [r3, #0]
   b64a6:	685b      	ldr	r3, [r3, #4]
   b64a8:	9301      	str	r3, [sp, #4]
   b64aa:	bd08      	pop	{r3, pc}
   b64ac:	00030240 	.word	0x00030240

000b64b0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b64b0:	b508      	push	{r3, lr}
   b64b2:	4b02      	ldr	r3, [pc, #8]	; (b64bc <network_connecting+0xc>)
   b64b4:	681b      	ldr	r3, [r3, #0]
   b64b6:	689b      	ldr	r3, [r3, #8]
   b64b8:	9301      	str	r3, [sp, #4]
   b64ba:	bd08      	pop	{r3, pc}
   b64bc:	00030240 	.word	0x00030240

000b64c0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b64c0:	b508      	push	{r3, lr}
   b64c2:	4b02      	ldr	r3, [pc, #8]	; (b64cc <network_disconnect+0xc>)
   b64c4:	681b      	ldr	r3, [r3, #0]
   b64c6:	68db      	ldr	r3, [r3, #12]
   b64c8:	9301      	str	r3, [sp, #4]
   b64ca:	bd08      	pop	{r3, pc}
   b64cc:	00030240 	.word	0x00030240

000b64d0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b64d0:	b508      	push	{r3, lr}
   b64d2:	4b02      	ldr	r3, [pc, #8]	; (b64dc <network_ready+0xc>)
   b64d4:	681b      	ldr	r3, [r3, #0]
   b64d6:	691b      	ldr	r3, [r3, #16]
   b64d8:	9301      	str	r3, [sp, #4]
   b64da:	bd08      	pop	{r3, pc}
   b64dc:	00030240 	.word	0x00030240

000b64e0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b64e0:	b508      	push	{r3, lr}
   b64e2:	4b02      	ldr	r3, [pc, #8]	; (b64ec <network_on+0xc>)
   b64e4:	681b      	ldr	r3, [r3, #0]
   b64e6:	695b      	ldr	r3, [r3, #20]
   b64e8:	9301      	str	r3, [sp, #4]
   b64ea:	bd08      	pop	{r3, pc}
   b64ec:	00030240 	.word	0x00030240

000b64f0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b64f0:	b508      	push	{r3, lr}
   b64f2:	4b02      	ldr	r3, [pc, #8]	; (b64fc <network_off+0xc>)
   b64f4:	681b      	ldr	r3, [r3, #0]
   b64f6:	699b      	ldr	r3, [r3, #24]
   b64f8:	9301      	str	r3, [sp, #4]
   b64fa:	bd08      	pop	{r3, pc}
   b64fc:	00030240 	.word	0x00030240

000b6500 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6500:	b508      	push	{r3, lr}
   b6502:	4b02      	ldr	r3, [pc, #8]	; (b650c <network_listen+0xc>)
   b6504:	681b      	ldr	r3, [r3, #0]
   b6506:	69db      	ldr	r3, [r3, #28]
   b6508:	9301      	str	r3, [sp, #4]
   b650a:	bd08      	pop	{r3, pc}
   b650c:	00030240 	.word	0x00030240

000b6510 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6510:	b508      	push	{r3, lr}
   b6512:	4b02      	ldr	r3, [pc, #8]	; (b651c <network_listening+0xc>)
   b6514:	681b      	ldr	r3, [r3, #0]
   b6516:	6a1b      	ldr	r3, [r3, #32]
   b6518:	9301      	str	r3, [sp, #4]
   b651a:	bd08      	pop	{r3, pc}
   b651c:	00030240 	.word	0x00030240

000b6520 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b6520:	b508      	push	{r3, lr}
   b6522:	4b02      	ldr	r3, [pc, #8]	; (b652c <network_set_credentials+0xc>)
   b6524:	681b      	ldr	r3, [r3, #0]
   b6526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6528:	9301      	str	r3, [sp, #4]
   b652a:	bd08      	pop	{r3, pc}
   b652c:	00030240 	.word	0x00030240

000b6530 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b6530:	b508      	push	{r3, lr}
   b6532:	4b02      	ldr	r3, [pc, #8]	; (b653c <network_clear_credentials+0xc>)
   b6534:	681b      	ldr	r3, [r3, #0]
   b6536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6538:	9301      	str	r3, [sp, #4]
   b653a:	bd08      	pop	{r3, pc}
   b653c:	00030240 	.word	0x00030240

000b6540 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6540:	b508      	push	{r3, lr}
   b6542:	4b02      	ldr	r3, [pc, #8]	; (b654c <network_set_listen_timeout+0xc>)
   b6544:	681b      	ldr	r3, [r3, #0]
   b6546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6548:	9301      	str	r3, [sp, #4]
   b654a:	bd08      	pop	{r3, pc}
   b654c:	00030240 	.word	0x00030240

000b6550 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6550:	b508      	push	{r3, lr}
   b6552:	4b02      	ldr	r3, [pc, #8]	; (b655c <network_get_listen_timeout+0xc>)
   b6554:	681b      	ldr	r3, [r3, #0]
   b6556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6558:	9301      	str	r3, [sp, #4]
   b655a:	bd08      	pop	{r3, pc}
   b655c:	00030240 	.word	0x00030240

000b6560 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6560:	b508      	push	{r3, lr}
   b6562:	4b02      	ldr	r3, [pc, #8]	; (b656c <network_is_on+0xc>)
   b6564:	681b      	ldr	r3, [r3, #0]
   b6566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6568:	9301      	str	r3, [sp, #4]
   b656a:	bd08      	pop	{r3, pc}
   b656c:	00030240 	.word	0x00030240

000b6570 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6570:	b508      	push	{r3, lr}
   b6572:	4b02      	ldr	r3, [pc, #8]	; (b657c <network_is_off+0xc>)
   b6574:	681b      	ldr	r3, [r3, #0]
   b6576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6578:	9301      	str	r3, [sp, #4]
   b657a:	bd08      	pop	{r3, pc}
   b657c:	00030240 	.word	0x00030240

000b6580 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6580:	b508      	push	{r3, lr}
   b6582:	4b02      	ldr	r3, [pc, #8]	; (b658c <malloc+0xc>)
   b6584:	681b      	ldr	r3, [r3, #0]
   b6586:	681b      	ldr	r3, [r3, #0]
   b6588:	9301      	str	r3, [sp, #4]
   b658a:	bd08      	pop	{r3, pc}
   b658c:	0003021c 	.word	0x0003021c

000b6590 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6590:	b508      	push	{r3, lr}
   b6592:	4b02      	ldr	r3, [pc, #8]	; (b659c <free+0xc>)
   b6594:	681b      	ldr	r3, [r3, #0]
   b6596:	685b      	ldr	r3, [r3, #4]
   b6598:	9301      	str	r3, [sp, #4]
   b659a:	bd08      	pop	{r3, pc}
   b659c:	0003021c 	.word	0x0003021c

000b65a0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b65a0:	b508      	push	{r3, lr}
   b65a2:	4b02      	ldr	r3, [pc, #8]	; (b65ac <realloc+0xc>)
   b65a4:	681b      	ldr	r3, [r3, #0]
   b65a6:	689b      	ldr	r3, [r3, #8]
   b65a8:	9301      	str	r3, [sp, #4]
   b65aa:	bd08      	pop	{r3, pc}
   b65ac:	0003021c 	.word	0x0003021c

000b65b0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b65b0:	b508      	push	{r3, lr}
   b65b2:	4b02      	ldr	r3, [pc, #8]	; (b65bc <siprintf+0xc>)
   b65b4:	681b      	ldr	r3, [r3, #0]
   b65b6:	691b      	ldr	r3, [r3, #16]
   b65b8:	9301      	str	r3, [sp, #4]
   b65ba:	bd08      	pop	{r3, pc}
   b65bc:	0003021c 	.word	0x0003021c

000b65c0 <vsnprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b65c0:	b508      	push	{r3, lr}
   b65c2:	4b02      	ldr	r3, [pc, #8]	; (b65cc <vsnprintf+0xc>)
   b65c4:	681b      	ldr	r3, [r3, #0]
   b65c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b65c8:	9301      	str	r3, [sp, #4]
   b65ca:	bd08      	pop	{r3, pc}
   b65cc:	0003021c 	.word	0x0003021c

000b65d0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b65d0:	b508      	push	{r3, lr}
   b65d2:	4b02      	ldr	r3, [pc, #8]	; (b65dc <abort+0xc>)
   b65d4:	681b      	ldr	r3, [r3, #0]
   b65d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b65d8:	9301      	str	r3, [sp, #4]
   b65da:	bd08      	pop	{r3, pc}
   b65dc:	0003021c 	.word	0x0003021c

000b65e0 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b65e0:	b508      	push	{r3, lr}
   b65e2:	4b02      	ldr	r3, [pc, #8]	; (b65ec <__errno+0xc>)
   b65e4:	681b      	ldr	r3, [r3, #0]
   b65e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b65e8:	9301      	str	r3, [sp, #4]
   b65ea:	bd08      	pop	{r3, pc}
   b65ec:	0003021c 	.word	0x0003021c

000b65f0 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b65f0:	b508      	push	{r3, lr}
   b65f2:	4b02      	ldr	r3, [pc, #8]	; (b65fc <__assert_func+0xc>)
   b65f4:	681b      	ldr	r3, [r3, #0]
   b65f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b65f8:	9301      	str	r3, [sp, #4]
   b65fa:	bd08      	pop	{r3, pc}
   b65fc:	0003021c 	.word	0x0003021c

000b6600 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6600:	b508      	push	{r3, lr}
   b6602:	4b02      	ldr	r3, [pc, #8]	; (b660c <newlib_impure_ptr_callback+0xc>)
   b6604:	681b      	ldr	r3, [r3, #0]
   b6606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6608:	9301      	str	r3, [sp, #4]
   b660a:	bd08      	pop	{r3, pc}
   b660c:	0003021c 	.word	0x0003021c

000b6610 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b6610:	b508      	push	{r3, lr}
   b6612:	4b02      	ldr	r3, [pc, #8]	; (b661c <localtime_r+0xc>)
   b6614:	681b      	ldr	r3, [r3, #0]
   b6616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6618:	9301      	str	r3, [sp, #4]
   b661a:	bd08      	pop	{r3, pc}
   b661c:	0003021c 	.word	0x0003021c

000b6620 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6620:	2100      	movs	r1, #0
   b6622:	f7ff bebf 	b.w	b63a4 <system_delay_ms>

000b6626 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6626:	4770      	bx	lr

000b6628 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b6628:	4770      	bx	lr

000b662a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b662a:	4770      	bx	lr

000b662c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b662c:	4770      	bx	lr
	...

000b6630 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6630:	4b06      	ldr	r3, [pc, #24]	; (b664c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6632:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6634:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6636:	f100 040c 	add.w	r4, r0, #12
	    ||
   b663a:	d005      	beq.n	b6648 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b663c:	4608      	mov	r0, r1
   b663e:	f002 fe0d 	bl	b925c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6642:	2800      	cmp	r0, #0
   b6644:	bf08      	it	eq
   b6646:	2400      	moveq	r4, #0
      }
   b6648:	4620      	mov	r0, r4
   b664a:	bd10      	pop	{r4, pc}
   b664c:	000ba554 	.word	0x000ba554

000b6650 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6650:	4b06      	ldr	r3, [pc, #24]	; (b666c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6652:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6654:	b510      	push	{r4, lr}
   b6656:	f100 040c 	add.w	r4, r0, #12
	    ||
   b665a:	d005      	beq.n	b6668 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b665c:	4608      	mov	r0, r1
   b665e:	f002 fdfd 	bl	b925c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6662:	2800      	cmp	r0, #0
   b6664:	bf08      	it	eq
   b6666:	2400      	moveq	r4, #0
      }
   b6668:	4620      	mov	r0, r4
   b666a:	bd10      	pop	{r4, pc}
   b666c:	000ba554 	.word	0x000ba554

000b6670 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6670:	4b06      	ldr	r3, [pc, #24]	; (b668c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6672:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6674:	b510      	push	{r4, lr}
   b6676:	f100 040c 	add.w	r4, r0, #12
	    ||
   b667a:	d005      	beq.n	b6688 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b667c:	4608      	mov	r0, r1
   b667e:	f002 fded 	bl	b925c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6682:	2800      	cmp	r0, #0
   b6684:	bf08      	it	eq
   b6686:	2400      	moveq	r4, #0
      }
   b6688:	4620      	mov	r0, r4
   b668a:	bd10      	pop	{r4, pc}
   b668c:	000ba554 	.word	0x000ba554

000b6690 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6690:	b510      	push	{r4, lr}
   b6692:	2168      	movs	r1, #104	; 0x68
   b6694:	4604      	mov	r4, r0
   b6696:	f002 fdda 	bl	b924e <_ZdlPvj>
   b669a:	4620      	mov	r0, r4
   b669c:	bd10      	pop	{r4, pc}

000b669e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b669e:	b510      	push	{r4, lr}
   b66a0:	2128      	movs	r1, #40	; 0x28
   b66a2:	4604      	mov	r4, r0
   b66a4:	f002 fdd3 	bl	b924e <_ZdlPvj>
   b66a8:	4620      	mov	r0, r4
   b66aa:	bd10      	pop	{r4, pc}

000b66ac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b66ac:	b510      	push	{r4, lr}
   b66ae:	2130      	movs	r1, #48	; 0x30
   b66b0:	4604      	mov	r4, r0
   b66b2:	f002 fdcc 	bl	b924e <_ZdlPvj>
   b66b6:	4620      	mov	r0, r4
   b66b8:	bd10      	pop	{r4, pc}

000b66ba <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b66ba:	2168      	movs	r1, #104	; 0x68
   b66bc:	f002 bdc7 	b.w	b924e <_ZdlPvj>

000b66c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b66c0:	2128      	movs	r1, #40	; 0x28
   b66c2:	f002 bdc4 	b.w	b924e <_ZdlPvj>

000b66c6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b66c6:	2130      	movs	r1, #48	; 0x30
   b66c8:	f002 bdc1 	b.w	b924e <_ZdlPvj>

000b66cc <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   b66cc:	b510      	push	{r4, lr}
   b66ce:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   b66d0:	6800      	ldr	r0, [r0, #0]
   b66d2:	b108      	cbz	r0, b66d8 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   b66d4:	f7ff fc3e 	bl	b5f54 <os_mutex_recursive_destroy>
    }
   b66d8:	4620      	mov	r0, r4
   b66da:	bd10      	pop	{r4, pc}

000b66dc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b66dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b66de:	2500      	movs	r5, #0
   b66e0:	1cec      	adds	r4, r5, #3
   b66e2:	428c      	cmp	r4, r1
   b66e4:	d80d      	bhi.n	b6702 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b66e6:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b66e8:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b66ea:	5d87      	ldrb	r7, [r0, r6]
   b66ec:	4297      	cmp	r7, r2
   b66ee:	d105      	bne.n	b66fc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b66f0:	4426      	add	r6, r4
   b66f2:	42b1      	cmp	r1, r6
   b66f4:	d305      	bcc.n	b6702 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b66f6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b66f8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b66fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b66fc:	3401      	adds	r4, #1
   b66fe:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6700:	e7ee      	b.n	b66e0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b6702:	2000      	movs	r0, #0
   b6704:	e7f9      	b.n	b66fa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000b6706 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6706:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b670a:	4604      	mov	r4, r0
   b670c:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   b6710:	461e      	mov	r6, r3
   b6712:	4689      	mov	r9, r1
   b6714:	ab01      	add	r3, sp, #4
   b6716:	4690      	mov	r8, r2
   b6718:	460a      	mov	r2, r1
   b671a:	6a01      	ldr	r1, [r0, #32]
   b671c:	f7ff ffde 	bl	b66dc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   b6720:	6a25      	ldr	r5, [r4, #32]
   b6722:	1cb3      	adds	r3, r6, #2
   b6724:	bb0f      	cbnz	r7, b676a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x64>
   b6726:	b300      	cbz	r0, b676a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x64>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   b6728:	195f      	adds	r7, r3, r5
   b672a:	1a3f      	subs	r7, r7, r0
   b672c:	2f1f      	cmp	r7, #31
   b672e:	d818      	bhi.n	b6762 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b6730:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b6734:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b6738:	eba5 0209 	sub.w	r2, r5, r9
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b673c:	eb06 030a 	add.w	r3, r6, sl
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b6740:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b6742:	4448      	add	r0, r9
   b6744:	1821      	adds	r1, r4, r0
   b6746:	b292      	uxth	r2, r2
   b6748:	18e0      	adds	r0, r4, r3
   b674a:	f003 f947 	bl	b99dc <memmove>
            selfData_[offset] = len + 1;
   b674e:	1c73      	adds	r3, r6, #1
   b6750:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   b6754:	4632      	mov	r2, r6
   b6756:	4641      	mov	r1, r8
   b6758:	eb04 000a 	add.w	r0, r4, sl
   b675c:	f003 f930 	bl	b99c0 <memcpy>
            selfLen_ = staLen + len + 2;
   b6760:	6227      	str	r7, [r4, #32]
}
   b6762:	6a20      	ldr	r0, [r4, #32]
   b6764:	b002      	add	sp, #8
   b6766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   b676a:	442b      	add	r3, r5
   b676c:	2b1f      	cmp	r3, #31
   b676e:	d8f8      	bhi.n	b6762 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>
        selfData_[selfLen_++] = len + 1;
   b6770:	1c73      	adds	r3, r6, #1
   b6772:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   b6774:	1ca8      	adds	r0, r5, #2
   b6776:	4425      	add	r5, r4
   b6778:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   b677a:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   b677c:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   b6780:	4641      	mov	r1, r8
   b6782:	4420      	add	r0, r4
   b6784:	f003 f91c 	bl	b99c0 <memcpy>
        selfLen_ += len;
   b6788:	6a23      	ldr	r3, [r4, #32]
   b678a:	4433      	add	r3, r6
   b678c:	6223      	str	r3, [r4, #32]
   b678e:	e7e8      	b.n	b6762 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>

000b6790 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b6790:	4a02      	ldr	r2, [pc, #8]	; (b679c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b6792:	2100      	movs	r1, #0
   b6794:	200a      	movs	r0, #10
   b6796:	f7ff bde5 	b.w	b6364 <panic_>
   b679a:	bf00      	nop
   b679c:	000b5f95 	.word	0x000b5f95

000b67a0 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b67a0:	4603      	mov	r3, r0
   b67a2:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b67a4:	681b      	ldr	r3, [r3, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b67a6:	e9d3 2100 	ldrd	r2, r1, [r3]
   b67aa:	4710      	bx	r2

000b67ac <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b67ac:	b430      	push	{r4, r5}
   b67ae:	460d      	mov	r5, r1
   b67b0:	4611      	mov	r1, r2
   b67b2:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b67b4:	6803      	ldr	r3, [r0, #0]
   b67b6:	6809      	ldr	r1, [r1, #0]
   b67b8:	6828      	ldr	r0, [r5, #0]
   b67ba:	e9d3 4300 	ldrd	r4, r3, [r3]
   b67be:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b67c0:	bc30      	pop	{r4, r5}
   b67c2:	4760      	bx	ip

000b67c4 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b67c4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b67c6:	b538      	push	{r3, r4, r5, lr}
   b67c8:	4604      	mov	r4, r0
	switch (__op)
   b67ca:	d102      	bne.n	b67d2 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b67cc:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b67ce:	6023      	str	r3, [r4, #0]
	}
   b67d0:	e003      	b.n	b67da <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b67d2:	2a02      	cmp	r2, #2
   b67d4:	d003      	beq.n	b67de <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b67d6:	2a03      	cmp	r2, #3
   b67d8:	d00d      	beq.n	b67f6 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b67da:	2000      	movs	r0, #0
   b67dc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b67de:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b67e0:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b67e2:	f7fd fc58 	bl	b4096 <_Znwj>
   b67e6:	4603      	mov	r3, r0
   b67e8:	2800      	cmp	r0, #0
   b67ea:	d0f0      	beq.n	b67ce <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b67ec:	e895 0003 	ldmia.w	r5, {r0, r1}
   b67f0:	e883 0003 	stmia.w	r3, {r0, r1}
   b67f4:	e7eb      	b.n	b67ce <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b67f6:	6800      	ldr	r0, [r0, #0]
   b67f8:	2800      	cmp	r0, #0
   b67fa:	d0ee      	beq.n	b67da <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b67fc:	2108      	movs	r1, #8
   b67fe:	f002 fd26 	bl	b924e <_ZdlPvj>
   b6802:	e7ea      	b.n	b67da <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b6804 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b6804:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6806:	b538      	push	{r3, r4, r5, lr}
   b6808:	4604      	mov	r4, r0
	switch (__op)
   b680a:	d102      	bne.n	b6812 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b680c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b680e:	6023      	str	r3, [r4, #0]
	}
   b6810:	e003      	b.n	b681a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b6812:	2a02      	cmp	r2, #2
   b6814:	d003      	beq.n	b681e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b6816:	2a03      	cmp	r2, #3
   b6818:	d00d      	beq.n	b6836 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b681a:	2000      	movs	r0, #0
   b681c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b681e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6820:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6822:	f7fd fc38 	bl	b4096 <_Znwj>
   b6826:	4603      	mov	r3, r0
   b6828:	2800      	cmp	r0, #0
   b682a:	d0f0      	beq.n	b680e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b682c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6830:	e883 0003 	stmia.w	r3, {r0, r1}
   b6834:	e7eb      	b.n	b680e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6836:	6800      	ldr	r0, [r0, #0]
   b6838:	2800      	cmp	r0, #0
   b683a:	d0ee      	beq.n	b681a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b683c:	2108      	movs	r1, #8
   b683e:	f002 fd06 	bl	b924e <_ZdlPvj>
   b6842:	e7ea      	b.n	b681a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b6844 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b6844:	b510      	push	{r4, lr}
      if (_M_manager)
   b6846:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b6848:	4604      	mov	r4, r0
      if (_M_manager)
   b684a:	b113      	cbz	r3, b6852 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b684c:	2203      	movs	r2, #3
   b684e:	4601      	mov	r1, r0
   b6850:	4798      	blx	r3
    }
   b6852:	4620      	mov	r0, r4
   b6854:	bd10      	pop	{r4, pc}

000b6856 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6856:	b510      	push	{r4, lr}
   b6858:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b685a:	3058      	adds	r0, #88	; 0x58
   b685c:	f7ff fff2 	bl	b6844 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b6860:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b6864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6868:	f001 bc72 	b.w	b8150 <_ZN6StringD1Ev>

000b686c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b686c:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b686e:	6843      	ldr	r3, [r0, #4]
   b6870:	3b01      	subs	r3, #1
    {
   b6872:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6874:	6043      	str	r3, [r0, #4]
   b6876:	b963      	cbnz	r3, b6892 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6878:	6803      	ldr	r3, [r0, #0]
   b687a:	689b      	ldr	r3, [r3, #8]
   b687c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b687e:	68a3      	ldr	r3, [r4, #8]
   b6880:	3b01      	subs	r3, #1
   b6882:	60a3      	str	r3, [r4, #8]
   b6884:	b92b      	cbnz	r3, b6892 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6886:	6823      	ldr	r3, [r4, #0]
   b6888:	4620      	mov	r0, r4
   b688a:	68db      	ldr	r3, [r3, #12]
    }
   b688c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6890:	4718      	bx	r3
    }
   b6892:	bd10      	pop	{r4, pc}

000b6894 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b6894:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6898:	b2da      	uxtb	r2, r3
   b689a:	2a09      	cmp	r2, #9
   b689c:	d801      	bhi.n	b68a2 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b689e:	4618      	mov	r0, r3
   b68a0:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b68a2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b68a6:	2b05      	cmp	r3, #5
   b68a8:	d801      	bhi.n	b68ae <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b68aa:	3857      	subs	r0, #87	; 0x57
   b68ac:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b68ae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b68b2:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b68b4:	bf94      	ite	ls
   b68b6:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b68b8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b68bc:	4770      	bx	lr
	...

000b68c0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b68c0:	b510      	push	{r4, lr}
            locked_(false) {
   b68c2:	2300      	movs	r3, #0
   b68c4:	7003      	strb	r3, [r0, #0]
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b68c6:	4b04      	ldr	r3, [pc, #16]	; (b68d8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b68c8:	4604      	mov	r4, r0
   b68ca:	6818      	ldr	r0, [r3, #0]
   b68cc:	f7ff fb4a 	bl	b5f64 <os_mutex_recursive_lock>
        locked_ = true;
   b68d0:	2301      	movs	r3, #1
   b68d2:	7023      	strb	r3, [r4, #0]
    }
   b68d4:	4620      	mov	r0, r4
   b68d6:	bd10      	pop	{r4, pc}
   b68d8:	2003e634 	.word	0x2003e634

000b68dc <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b68dc:	b510      	push	{r4, lr}
        if (locked_) {
   b68de:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b68e0:	4604      	mov	r4, r0
        if (locked_) {
   b68e2:	b11b      	cbz	r3, b68ec <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b68e4:	4b02      	ldr	r3, [pc, #8]	; (b68f0 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b68e6:	6818      	ldr	r0, [r3, #0]
   b68e8:	f7ff fb44 	bl	b5f74 <os_mutex_recursive_unlock>
    }
   b68ec:	4620      	mov	r0, r4
   b68ee:	bd10      	pop	{r4, pc}
   b68f0:	2003e634 	.word	0x2003e634

000b68f4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b68f4:	b082      	sub	sp, #8
   b68f6:	4603      	mov	r3, r0
    address_ = addr;
   b68f8:	6808      	ldr	r0, [r1, #0]
   b68fa:	6849      	ldr	r1, [r1, #4]
   b68fc:	466a      	mov	r2, sp
   b68fe:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b6900:	466a      	mov	r2, sp
   b6902:	ca03      	ldmia	r2!, {r0, r1}
   b6904:	6018      	str	r0, [r3, #0]
}
   b6906:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6908:	6059      	str	r1, [r3, #4]
}
   b690a:	b002      	add	sp, #8
   b690c:	4770      	bx	lr

000b690e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b690e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b6910:	7982      	ldrb	r2, [r0, #6]
   b6912:	798b      	ldrb	r3, [r1, #6]
   b6914:	429a      	cmp	r2, r3
   b6916:	d106      	bne.n	b6926 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6918:	2206      	movs	r2, #6
   b691a:	f003 f841 	bl	b99a0 <memcmp>
   b691e:	fab0 f080 	clz	r0, r0
   b6922:	0940      	lsrs	r0, r0, #5
}
   b6924:	bd08      	pop	{r3, pc}
    return false;
   b6926:	2000      	movs	r0, #0
   b6928:	e7fc      	b.n	b6924 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b692a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b692a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b692e:	6003      	str	r3, [r0, #0]
   b6930:	8083      	strh	r3, [r0, #4]
}
   b6932:	2000      	movs	r0, #0
   b6934:	4770      	bx	lr

000b6936 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b6936:	b508      	push	{r3, lr}
   b6938:	4602      	mov	r2, r0
        : address_{} {
   b693a:	2100      	movs	r1, #0
   b693c:	6001      	str	r1, [r0, #0]
   b693e:	6041      	str	r1, [r0, #4]
    clear();
   b6940:	f7ff fff3 	bl	b692a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b6944:	7191      	strb	r1, [r2, #6]
}
   b6946:	4610      	mov	r0, r2
   b6948:	bd08      	pop	{r3, pc}
	...

000b694c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b694c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b694e:	2301      	movs	r3, #1
   b6950:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6952:	4b05      	ldr	r3, [pc, #20]	; (b6968 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b6954:	4602      	mov	r2, r0
   b6956:	f103 0110 	add.w	r1, r3, #16
   b695a:	f853 4b04 	ldr.w	r4, [r3], #4
   b695e:	f842 4b04 	str.w	r4, [r2], #4
   b6962:	428b      	cmp	r3, r1
   b6964:	d1f9      	bne.n	b695a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b6966:	bd10      	pop	{r4, pc}
   b6968:	000ba562 	.word	0x000ba562

000b696c <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   b696c:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   b696e:	690b      	ldr	r3, [r1, #16]
   b6970:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b6972:	f101 0210 	add.w	r2, r1, #16
   b6976:	4603      	mov	r3, r0
   b6978:	f851 4b04 	ldr.w	r4, [r1], #4
   b697c:	f843 4b04 	str.w	r4, [r3], #4
   b6980:	4291      	cmp	r1, r2
   b6982:	d1f9      	bne.n	b6978 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   b6984:	bd10      	pop	{r4, pc}

000b6986 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6986:	b510      	push	{r4, lr}
    if (uuid128) {
   b6988:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b698a:	4604      	mov	r4, r0
    if (uuid128) {
   b698c:	b1b1      	cbz	r1, b69bc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b698e:	2a01      	cmp	r2, #1
   b6990:	f101 0210 	add.w	r2, r1, #16
   b6994:	d10a      	bne.n	b69ac <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b6996:	4601      	mov	r1, r0
   b6998:	f853 0b04 	ldr.w	r0, [r3], #4
   b699c:	f841 0b04 	str.w	r0, [r1], #4
   b69a0:	4293      	cmp	r3, r2
   b69a2:	d1f9      	bne.n	b6998 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b69a4:	2301      	movs	r3, #1
   b69a6:	6123      	str	r3, [r4, #16]
}
   b69a8:	4620      	mov	r0, r4
   b69aa:	bd10      	pop	{r4, pc}
   b69ac:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b69ae:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b69b2:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b69b6:	429a      	cmp	r2, r3
   b69b8:	d1f9      	bne.n	b69ae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b69ba:	e7f3      	b.n	b69a4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b69bc:	2210      	movs	r2, #16
   b69be:	f003 f827 	bl	b9a10 <memset>
   b69c2:	e7f1      	b.n	b69a8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b69c4 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b69c4:	b538      	push	{r3, r4, r5, lr}
   b69c6:	4604      	mov	r4, r0
   b69c8:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b69ca:	461a      	mov	r2, r3
   b69cc:	f7ff ffdb 	bl	b6986 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b69d0:	81a5      	strh	r5, [r4, #12]
}
   b69d2:	4620      	mov	r0, r4
   b69d4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b69d8 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b69d8:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b69da:	6902      	ldr	r2, [r0, #16]
   b69dc:	b922      	cbnz	r2, b69e8 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b69de:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b69e0:	3800      	subs	r0, #0
   b69e2:	bf18      	it	ne
   b69e4:	2001      	movne	r0, #1
}
   b69e6:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b69e8:	4902      	ldr	r1, [pc, #8]	; (b69f4 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b69ea:	2210      	movs	r2, #16
   b69ec:	f002 ffd8 	bl	b99a0 <memcmp>
   b69f0:	e7f6      	b.n	b69e0 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b69f2:	bf00      	nop
   b69f4:	000ba582 	.word	0x000ba582

000b69f8 <_ZNK8particle7BleUuid4typeEv>:
}
   b69f8:	6900      	ldr	r0, [r0, #16]
   b69fa:	4770      	bx	lr

000b69fc <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b69fc:	b538      	push	{r3, r4, r5, lr}
   b69fe:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b6a00:	2214      	movs	r2, #20
   b6a02:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b6a04:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b6a06:	f003 f803 	bl	b9a10 <memset>
    if (type_ == BleUuidType::SHORT) {
   b6a0a:	6923      	ldr	r3, [r4, #16]
   b6a0c:	b91b      	cbnz	r3, b6a16 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b6a0e:	89a3      	ldrh	r3, [r4, #12]
   b6a10:	802b      	strh	r3, [r5, #0]
}
   b6a12:	4628      	mov	r0, r5
   b6a14:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b6a16:	2301      	movs	r3, #1
   b6a18:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b6a1a:	4621      	mov	r1, r4
   b6a1c:	462b      	mov	r3, r5
   b6a1e:	f104 0210 	add.w	r2, r4, #16
   b6a22:	f851 0b04 	ldr.w	r0, [r1], #4
   b6a26:	f843 0b04 	str.w	r0, [r3], #4
   b6a2a:	4291      	cmp	r1, r2
   b6a2c:	d1f9      	bne.n	b6a22 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b6a2e:	e7f0      	b.n	b6a12 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b6a30 <_ZNK8particle7BleUuid7shortedEv>:
}
   b6a30:	8980      	ldrh	r0, [r0, #12]
   b6a32:	4770      	bx	lr

000b6a34 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b6a34:	4770      	bx	lr

000b6a36 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b6a36:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6a38:	6902      	ldr	r2, [r0, #16]
   b6a3a:	690b      	ldr	r3, [r1, #16]
   b6a3c:	429a      	cmp	r2, r3
   b6a3e:	d106      	bne.n	b6a4e <_ZNK8particle7BleUuideqERKS0_+0x18>
   b6a40:	2210      	movs	r2, #16
   b6a42:	f002 ffad 	bl	b99a0 <memcmp>
   b6a46:	fab0 f080 	clz	r0, r0
   b6a4a:	0940      	lsrs	r0, r0, #5
}
   b6a4c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6a4e:	2000      	movs	r0, #0
   b6a50:	e7fc      	b.n	b6a4c <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b6a54 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b6a54:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b6a56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b6a5a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6a5c:	4b34      	ldr	r3, [pc, #208]	; (b6b30 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b6a5e:	460c      	mov	r4, r1
   b6a60:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6a62:	4602      	mov	r2, r0
   b6a64:	f103 0110 	add.w	r1, r3, #16
   b6a68:	f853 0b04 	ldr.w	r0, [r3], #4
   b6a6c:	f842 0b04 	str.w	r0, [r2], #4
   b6a70:	428b      	cmp	r3, r1
   b6a72:	d1f9      	bne.n	b6a68 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b6a74:	b344      	cbz	r4, b6ac8 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b6a76:	2124      	movs	r1, #36	; 0x24
   b6a78:	4620      	mov	r0, r4
   b6a7a:	f003 f82c 	bl	b9ad6 <strnlen>
   b6a7e:	2804      	cmp	r0, #4
   b6a80:	f04f 0500 	mov.w	r5, #0
   b6a84:	d123      	bne.n	b6ace <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b6a86:	f8ad 5004 	strh.w	r5, [sp, #4]
   b6a8a:	af01      	add	r7, sp, #4
   b6a8c:	1ca5      	adds	r5, r4, #2
   b6a8e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b6a90:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b6a94:	f7ff fefe 	bl	b6894 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b6a98:	f1b0 0800 	subs.w	r8, r0, #0
   b6a9c:	db12      	blt.n	b6ac4 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b6a9e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b6aa2:	f7ff fef7 	bl	b6894 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b6aa6:	2800      	cmp	r0, #0
   b6aa8:	db0c      	blt.n	b6ac4 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b6aaa:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6aac:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b6ab0:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6ab2:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b6ab6:	d1eb      	bne.n	b6a90 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b6ab8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b6abc:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b6abe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6ac2:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b6ac4:	2300      	movs	r3, #0
   b6ac6:	6133      	str	r3, [r6, #16]
}
   b6ac8:	b002      	add	sp, #8
   b6aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b6ace:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6ad2:	2124      	movs	r1, #36	; 0x24
   b6ad4:	4620      	mov	r0, r4
   b6ad6:	f002 fffe 	bl	b9ad6 <strnlen>
   b6ada:	42a8      	cmp	r0, r5
   b6adc:	d807      	bhi.n	b6aee <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b6ade:	4642      	mov	r2, r8
   b6ae0:	2100      	movs	r1, #0
   b6ae2:	4630      	mov	r0, r6
}
   b6ae4:	b002      	add	sp, #8
   b6ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b6aea:	f002 bf91 	b.w	b9a10 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6aee:	f1b8 0f00 	cmp.w	r8, #0
   b6af2:	d0e9      	beq.n	b6ac8 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b6af4:	5d60      	ldrb	r0, [r4, r5]
   b6af6:	f7ff fecd 	bl	b6894 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b6afa:	0603      	lsls	r3, r0, #24
   b6afc:	d415      	bmi.n	b6b2a <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b6afe:	0100      	lsls	r0, r0, #4
   b6b00:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6b04:	b2c7      	uxtb	r7, r0
   b6b06:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b6b0a:	2124      	movs	r1, #36	; 0x24
   b6b0c:	4620      	mov	r0, r4
   b6b0e:	f002 ffe2 	bl	b9ad6 <strnlen>
   b6b12:	3501      	adds	r5, #1
   b6b14:	42a8      	cmp	r0, r5
   b6b16:	d908      	bls.n	b6b2a <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b6b18:	5d60      	ldrb	r0, [r4, r5]
   b6b1a:	f7ff febb 	bl	b6894 <_ZN8particle11hexToNibbleEc>
   b6b1e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b6b20:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b6b22:	bfa4      	itt	ge
   b6b24:	4338      	orrge	r0, r7
   b6b26:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6b2a:	3501      	adds	r5, #1
   b6b2c:	e7d1      	b.n	b6ad2 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b6b2e:	bf00      	nop
   b6b30:	000ba562 	.word	0x000ba562

000b6b34 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b6b34:	b513      	push	{r0, r1, r4, lr}
   b6b36:	4604      	mov	r4, r0
   b6b38:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b6b3a:	f7ff ff07 	bl	b694c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b6b3e:	4620      	mov	r0, r4
   b6b40:	9901      	ldr	r1, [sp, #4]
   b6b42:	f7ff ff87 	bl	b6a54 <_ZN8particle7BleUuid9constructEPKc>
}
   b6b46:	4620      	mov	r0, r4
   b6b48:	b002      	add	sp, #8
   b6b4a:	bd10      	pop	{r4, pc}

000b6b4c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6b4c:	b430      	push	{r4, r5}
   b6b4e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b6b52:	b11a      	cbz	r2, b6b5c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b6b54:	9502      	str	r5, [sp, #8]
}
   b6b56:	bc30      	pop	{r4, r5}
   b6b58:	f7ff bdd5 	b.w	b6706 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfLen_;
   b6b5c:	6a00      	ldr	r0, [r0, #32]
}
   b6b5e:	bc30      	pop	{r4, r5}
   b6b60:	4770      	bx	lr

000b6b62 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b6b62:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6b64:	4604      	mov	r4, r0
          selfLen_(0) {
   b6b66:	221f      	movs	r2, #31
   b6b68:	2100      	movs	r1, #0
   b6b6a:	f002 ff51 	bl	b9a10 <memset>
   b6b6e:	2300      	movs	r3, #0
   b6b70:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6b72:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6b74:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6b76:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6b78:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6b7c:	4619      	mov	r1, r3
   b6b7e:	f10d 020f 	add.w	r2, sp, #15
   b6b82:	4620      	mov	r0, r4
   b6b84:	f7ff ffe2 	bl	b6b4c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b6b88:	4620      	mov	r0, r4
   b6b8a:	b004      	add	sp, #16
   b6b8c:	bd10      	pop	{r4, pc}

000b6b8e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   b6b90:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6b92:	460e      	mov	r6, r1
   b6b94:	ab01      	add	r3, sp, #4
   b6b96:	6a01      	ldr	r1, [r0, #32]
   b6b98:	4604      	mov	r4, r0
   b6b9a:	f7ff fd9f 	bl	b66dc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b6b9e:	4605      	mov	r5, r0
   b6ba0:	b178      	cbz	r0, b6bc2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   b6ba2:	9801      	ldr	r0, [sp, #4]
   b6ba4:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   b6ba6:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   b6ba8:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   b6baa:	4421      	add	r1, r4
   b6bac:	1b52      	subs	r2, r2, r5
   b6bae:	4420      	add	r0, r4
   b6bb0:	f002 ff06 	bl	b99c0 <memcpy>
        selfLen_ -= len;
   b6bb4:	6a20      	ldr	r0, [r4, #32]
   b6bb6:	1b40      	subs	r0, r0, r5
   b6bb8:	6220      	str	r0, [r4, #32]
        remove(type);
   b6bba:	4631      	mov	r1, r6
   b6bbc:	4620      	mov	r0, r4
   b6bbe:	f7ff ffe6 	bl	b6b8e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b6bc2:	b002      	add	sp, #8
   b6bc4:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6bc8 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b6bc8:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b6bca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6bce:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b6bd0:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b6bd2:	8043      	strh	r3, [r0, #2]
   b6bd4:	220e      	movs	r2, #14
   b6bd6:	4629      	mov	r1, r5
   b6bd8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b6bda:	7105      	strb	r5, [r0, #4]
   b6bdc:	3006      	adds	r0, #6
   b6bde:	f002 ff17 	bl	b9a10 <memset>
   b6be2:	f104 0014 	add.w	r0, r4, #20
   b6be6:	f7ff feb1 	bl	b694c <_ZN8particle7BleUuidC1Ev>
   b6bea:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6bee:	f7ff fead 	bl	b694c <_ZN8particle7BleUuidC1Ev>
   b6bf2:	4904      	ldr	r1, [pc, #16]	; (b6c04 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b6bf4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6bf8:	f001 faf5 	bl	b81e6 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6bfc:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b6bfe:	4620      	mov	r0, r4
   b6c00:	bd38      	pop	{r3, r4, r5, pc}
   b6c02:	bf00      	nop
   b6c04:	000b9f86 	.word	0x000b9f86

000b6c08 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b6c08:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b6c0a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b6c0e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b6c12:	4293      	cmp	r3, r2
   b6c14:	4618      	mov	r0, r3
   b6c16:	d006      	beq.n	b6c26 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b6c18:	6804      	ldr	r4, [r0, #0]
   b6c1a:	8824      	ldrh	r4, [r4, #0]
   b6c1c:	428c      	cmp	r4, r1
   b6c1e:	f103 0308 	add.w	r3, r3, #8
   b6c22:	d1f6      	bne.n	b6c12 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b6c24:	bd10      	pop	{r4, pc}
        return nullptr;
   b6c26:	2000      	movs	r0, #0
   b6c28:	e7fc      	b.n	b6c24 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b6c2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b6c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6c2e:	4606      	mov	r6, r0
   b6c30:	b085      	sub	sp, #20
   b6c32:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b6c34:	460d      	mov	r5, r1
   b6c36:	2900      	cmp	r1, #0
   b6c38:	d050      	beq.n	b6cdc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b6c3a:	2a00      	cmp	r2, #0
   b6c3c:	d04e      	beq.n	b6cdc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6c3e:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b6c40:	7823      	ldrb	r3, [r4, #0]
   b6c42:	2af4      	cmp	r2, #244	; 0xf4
   b6c44:	bf28      	it	cs
   b6c46:	22f4      	movcs	r2, #244	; 0xf4
   b6c48:	b343      	cbz	r3, b6c9c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b6c4a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b6c4c:	0798      	lsls	r0, r3, #30
   b6c4e:	d509      	bpl.n	b6c64 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b6c50:	89a0      	ldrh	r0, [r4, #12]
   b6c52:	9203      	str	r2, [sp, #12]
   b6c54:	2300      	movs	r3, #0
   b6c56:	f7ff f907 	bl	b5e68 <hal_ble_gatt_server_set_characteristic_value>
   b6c5a:	2800      	cmp	r0, #0
   b6c5c:	9a03      	ldr	r2, [sp, #12]
   b6c5e:	da03      	bge.n	b6c68 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b6c60:	b005      	add	sp, #20
   b6c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b6c64:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6c68:	6834      	ldr	r4, [r6, #0]
   b6c6a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b6c6c:	06d9      	lsls	r1, r3, #27
   b6c6e:	d509      	bpl.n	b6c84 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b6c70:	2f01      	cmp	r7, #1
   b6c72:	d007      	beq.n	b6c84 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6c74:	89a0      	ldrh	r0, [r4, #12]
   b6c76:	2300      	movs	r3, #0
   b6c78:	4629      	mov	r1, r5
}
   b6c7a:	b005      	add	sp, #20
   b6c7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6c80:	f7ff b924 	b.w	b5ecc <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b6c84:	069b      	lsls	r3, r3, #26
   b6c86:	d5eb      	bpl.n	b6c60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6c88:	2f02      	cmp	r7, #2
   b6c8a:	d0e9      	beq.n	b6c60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6c8c:	89a0      	ldrh	r0, [r4, #12]
   b6c8e:	2300      	movs	r3, #0
   b6c90:	4629      	mov	r1, r5
}
   b6c92:	b005      	add	sp, #20
   b6c94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6c98:	f7ff b922 	b.w	b5ee0 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b6c9c:	8860      	ldrh	r0, [r4, #2]
   b6c9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6ca2:	4288      	cmp	r0, r1
   b6ca4:	d01c      	beq.n	b6ce0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b6ca6:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b6ca8:	074e      	lsls	r6, r1, #29
   b6caa:	d501      	bpl.n	b6cb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b6cac:	2f01      	cmp	r7, #1
   b6cae:	d104      	bne.n	b6cba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6cb0:	070b      	lsls	r3, r1, #28
   b6cb2:	d409      	bmi.n	b6cc8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b6cb4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6cb8:	e7d2      	b.n	b6c60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6cba:	89a1      	ldrh	r1, [r4, #12]
   b6cbc:	9300      	str	r3, [sp, #0]
   b6cbe:	4613      	mov	r3, r2
   b6cc0:	462a      	mov	r2, r5
   b6cc2:	f7ff f8e5 	bl	b5e90 <hal_ble_gatt_client_write_without_response>
   b6cc6:	e7cb      	b.n	b6c60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6cc8:	2f02      	cmp	r7, #2
   b6cca:	d0f3      	beq.n	b6cb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6ccc:	2300      	movs	r3, #0
   b6cce:	89a1      	ldrh	r1, [r4, #12]
   b6cd0:	9300      	str	r3, [sp, #0]
   b6cd2:	4613      	mov	r3, r2
   b6cd4:	462a      	mov	r2, r5
   b6cd6:	f7ff f8d1 	bl	b5e7c <hal_ble_gatt_client_write_with_response>
   b6cda:	e7c1      	b.n	b6c60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b6cdc:	4802      	ldr	r0, [pc, #8]	; (b6ce8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b6cde:	e7bf      	b.n	b6c60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b6ce0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b6ce4:	e7bc      	b.n	b6c60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6ce6:	bf00      	nop
   b6ce8:	fffffef2 	.word	0xfffffef2

000b6cec <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   b6cec:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   b6cee:	688a      	ldr	r2, [r1, #8]
   b6cf0:	6809      	ldr	r1, [r1, #0]
   b6cf2:	f7ff bf9b 	b.w	b6c2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b6cf6 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6cf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6cf8:	460c      	mov	r4, r1
   b6cfa:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6cfc:	21f4      	movs	r1, #244	; 0xf4
   b6cfe:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6d00:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6d02:	f002 fee8 	bl	b9ad6 <strnlen>
   b6d06:	9b01      	ldr	r3, [sp, #4]
   b6d08:	4602      	mov	r2, r0
   b6d0a:	4621      	mov	r1, r4
   b6d0c:	4628      	mov	r0, r5
}
   b6d0e:	b003      	add	sp, #12
   b6d10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6d14:	f7ff bf8a 	b.w	b6c2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b6d18 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b6d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6d1c:	2600      	movs	r6, #0
   b6d1e:	6006      	str	r6, [r0, #0]
   b6d20:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6d22:	2028      	movs	r0, #40	; 0x28
   b6d24:	460c      	mov	r4, r1
   b6d26:	f7fd f9b6 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6d2a:	1e05      	subs	r5, r0, #0
   b6d2c:	f105 080c 	add.w	r8, r5, #12
   b6d30:	d00f      	beq.n	b6d52 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b6d32:	2301      	movs	r3, #1
   b6d34:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6d38:	4b08      	ldr	r3, [pc, #32]	; (b6d5c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b6d3a:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b6d3c:	4640      	mov	r0, r8
   b6d3e:	f7ff fe05 	bl	b694c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b6d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b6d44:	622e      	str	r6, [r5, #32]
   b6d46:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b6d4a:	4646      	mov	r6, r8
   b6d4c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6d4e:	6823      	ldr	r3, [r4, #0]
   b6d50:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b6d52:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6d56:	4638      	mov	r0, r7
   b6d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6d5c:	000ba524 	.word	0x000ba524

000b6d60 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6d60:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6d62:	2500      	movs	r5, #0
   b6d64:	6005      	str	r5, [r0, #0]
   b6d66:	4606      	mov	r6, r0
   b6d68:	2030      	movs	r0, #48	; 0x30
   b6d6a:	f7fd f994 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6d6e:	4604      	mov	r4, r0
   b6d70:	b188      	cbz	r0, b6d96 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b6d72:	2301      	movs	r3, #1
   b6d74:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6d78:	4b09      	ldr	r3, [pc, #36]	; (b6da0 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b6d7a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b6d7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6d80:	8183      	strh	r3, [r0, #12]
   b6d82:	300e      	adds	r0, #14
   b6d84:	f7ff fdd7 	bl	b6936 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6d88:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b6d8c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6d90:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b6d94:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b6d96:	6074      	str	r4, [r6, #4]
   b6d98:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b6d9a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6d9c:	4630      	mov	r0, r6
   b6d9e:	bd70      	pop	{r4, r5, r6, pc}
   b6da0:	000ba540 	.word	0x000ba540

000b6da4 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b6da4:	b513      	push	{r0, r1, r4, lr}
   b6da6:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6da8:	a801      	add	r0, sp, #4
   b6daa:	f7ff fd89 	bl	b68c0 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b6dae:	6823      	ldr	r3, [r4, #0]
   b6db0:	881c      	ldrh	r4, [r3, #0]
   b6db2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6db6:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b6db8:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b6dba:	bf18      	it	ne
   b6dbc:	2401      	movne	r4, #1
    WiringBleLock lk;
   b6dbe:	f7ff fd8d 	bl	b68dc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6dc2:	4620      	mov	r0, r4
   b6dc4:	b002      	add	sp, #8
   b6dc6:	bd10      	pop	{r4, pc}

000b6dc8 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b6dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6dca:	460d      	mov	r5, r1
   b6dcc:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6dce:	a801      	add	r0, sp, #4
   b6dd0:	f7ff fd76 	bl	b68c0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6dd4:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b6dd6:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b6dda:	6023      	str	r3, [r4, #0]
   b6ddc:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b6de0:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b6de2:	a801      	add	r0, sp, #4
   b6de4:	f7ff fd7a 	bl	b68dc <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b6de8:	4620      	mov	r0, r4
   b6dea:	b003      	add	sp, #12
   b6dec:	bd30      	pop	{r4, r5, pc}

000b6dee <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b6dee:	b530      	push	{r4, r5, lr}
   b6df0:	4605      	mov	r5, r0
   b6df2:	b087      	sub	sp, #28
   b6df4:	460c      	mov	r4, r1
    WiringBleLock lk;
   b6df6:	a801      	add	r0, sp, #4
   b6df8:	f7ff fd62 	bl	b68c0 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b6dfc:	682a      	ldr	r2, [r5, #0]
   b6dfe:	6823      	ldr	r3, [r4, #0]
   b6e00:	8812      	ldrh	r2, [r2, #0]
   b6e02:	881b      	ldrh	r3, [r3, #0]
   b6e04:	429a      	cmp	r2, r3
   b6e06:	d10d      	bne.n	b6e24 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b6e08:	4629      	mov	r1, r5
   b6e0a:	a802      	add	r0, sp, #8
   b6e0c:	f7ff ffdc 	bl	b6dc8 <_ZNK8particle13BlePeerDevice7addressEv>
   b6e10:	4621      	mov	r1, r4
   b6e12:	a804      	add	r0, sp, #16
   b6e14:	f7ff ffd8 	bl	b6dc8 <_ZNK8particle13BlePeerDevice7addressEv>
   b6e18:	a904      	add	r1, sp, #16
   b6e1a:	a802      	add	r0, sp, #8
   b6e1c:	f7ff fd77 	bl	b690e <_ZNK8particle10BleAddresseqERKS0_>
   b6e20:	4604      	mov	r4, r0
   b6e22:	b900      	cbnz	r0, b6e26 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6e24:	2400      	movs	r4, #0
    WiringBleLock lk;
   b6e26:	a801      	add	r0, sp, #4
   b6e28:	f7ff fd58 	bl	b68dc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6e2c:	4620      	mov	r0, r4
   b6e2e:	b007      	add	sp, #28
   b6e30:	bd30      	pop	{r4, r5, pc}
	...

000b6e34 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6e34:	b510      	push	{r4, lr}
   b6e36:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b6e38:	2054      	movs	r0, #84	; 0x54
   b6e3a:	f7fd f92c 	bl	b4096 <_Znwj>
   b6e3e:	4601      	mov	r1, r0
   b6e40:	b160      	cbz	r0, b6e5c <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b6e42:	2300      	movs	r3, #0
   b6e44:	e9c0 3300 	strd	r3, r3, [r0]
   b6e48:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6e4c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6e50:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b6e54:	6203      	str	r3, [r0, #32]
   b6e56:	62c3      	str	r3, [r0, #44]	; 0x2c
   b6e58:	63c3      	str	r3, [r0, #60]	; 0x3c
   b6e5a:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6e5c:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b6e5e:	b919      	cbnz	r1, b6e68 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   b6e60:	4a09      	ldr	r2, [pc, #36]	; (b6e88 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b6e62:	200a      	movs	r0, #10
   b6e64:	f7ff fa7e 	bl	b6364 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b6e68:	2000      	movs	r0, #0
   b6e6a:	f7fe ffc1 	bl	b5df0 <hal_ble_stack_init>
   b6e6e:	b120      	cbz	r0, b6e7a <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   b6e70:	4a05      	ldr	r2, [pc, #20]	; (b6e88 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b6e72:	2100      	movs	r1, #0
   b6e74:	200a      	movs	r0, #10
   b6e76:	f7ff fa75 	bl	b6364 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b6e7a:	6821      	ldr	r1, [r4, #0]
   b6e7c:	4803      	ldr	r0, [pc, #12]	; (b6e8c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6e7e:	2200      	movs	r2, #0
   b6e80:	f7ff f81a 	bl	b5eb8 <hal_ble_set_callback_on_periph_link_events>
}
   b6e84:	4620      	mov	r0, r4
   b6e86:	bd10      	pop	{r4, pc}
   b6e88:	000b5f95 	.word	0x000b5f95
   b6e8c:	000b72a9 	.word	0x000b72a9

000b6e90 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b6e90:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b6e92:	4c0b      	ldr	r4, [pc, #44]	; (b6ec0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6e94:	7823      	ldrb	r3, [r4, #0]
   b6e96:	f3bf 8f5b 	dmb	ish
   b6e9a:	07db      	lsls	r3, r3, #31
   b6e9c:	d40e      	bmi.n	b6ebc <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   b6e9e:	4620      	mov	r0, r4
   b6ea0:	f7fd f8ff 	bl	b40a2 <__cxa_guard_acquire>
   b6ea4:	b150      	cbz	r0, b6ebc <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   b6ea6:	4807      	ldr	r0, [pc, #28]	; (b6ec4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6ea8:	f7ff ffc4 	bl	b6e34 <_ZN8particle14BleLocalDeviceC1Ev>
   b6eac:	4620      	mov	r0, r4
   b6eae:	f7fd f8fd 	bl	b40ac <__cxa_guard_release>
   b6eb2:	4a05      	ldr	r2, [pc, #20]	; (b6ec8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   b6eb4:	4905      	ldr	r1, [pc, #20]	; (b6ecc <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   b6eb6:	4803      	ldr	r0, [pc, #12]	; (b6ec4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6eb8:	f002 f9c4 	bl	b9244 <__aeabi_atexit>
    return instance;
}
   b6ebc:	4801      	ldr	r0, [pc, #4]	; (b6ec4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6ebe:	bd10      	pop	{r4, pc}
   b6ec0:	2003e62c 	.word	0x2003e62c
   b6ec4:	2003e638 	.word	0x2003e638
   b6ec8:	2003da60 	.word	0x2003da60
   b6ecc:	000b70cd 	.word	0x000b70cd

000b6ed0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6ed0:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b6ed2:	6803      	ldr	r3, [r0, #0]
   b6ed4:	3b09      	subs	r3, #9
   b6ed6:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6ed8:	b08d      	sub	sp, #52	; 0x34
   b6eda:	4604      	mov	r4, r0
   b6edc:	460d      	mov	r5, r1
    switch (event->type) {
   b6ede:	d811      	bhi.n	b6f04 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b6ee0:	f7ff ffd6 	bl	b6e90 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6ee4:	88a1      	ldrh	r1, [r4, #4]
   b6ee6:	6800      	ldr	r0, [r0, #0]
   b6ee8:	f7ff fe8e 	bl	b6c08 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b6eec:	4603      	mov	r3, r0
   b6eee:	b958      	cbnz	r0, b6f08 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b6ef0:	2220      	movs	r2, #32
   b6ef2:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b6ef6:	4a0b      	ldr	r2, [pc, #44]	; (b6f24 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b6ef8:	9200      	str	r2, [sp, #0]
   b6efa:	490b      	ldr	r1, [pc, #44]	; (b6f28 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b6efc:	aa04      	add	r2, sp, #16
   b6efe:	2032      	movs	r0, #50	; 0x32
   b6f00:	f7ff fa38 	bl	b6374 <log_message>
}
   b6f04:	b00d      	add	sp, #52	; 0x34
   b6f06:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b6f08:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b6f0a:	2a00      	cmp	r2, #0
   b6f0c:	d0fa      	beq.n	b6f04 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b6f0e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6f12:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b6f16:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b6f1a:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b6f1c:	aa04      	add	r2, sp, #16
   b6f1e:	a903      	add	r1, sp, #12
   b6f20:	47a0      	blx	r4
}
   b6f22:	e7ef      	b.n	b6f04 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b6f24:	000ba431 	.word	0x000ba431
   b6f28:	000ba40a 	.word	0x000ba40a

000b6f2c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b6f2c:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b6f2e:	2000      	movs	r0, #0
   b6f30:	f7fe ff5e 	bl	b5df0 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b6f34:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6f38:	bd08      	pop	{r3, pc}

000b6f3a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b6f3a:	4608      	mov	r0, r1
   b6f3c:	b911      	cbnz	r1, b6f44 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b6f3e:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b6f40:	f7fe bf66 	b.w	b5e10 <hal_ble_gap_set_advertising_data>
   b6f44:	6a09      	ldr	r1, [r1, #32]
   b6f46:	2200      	movs	r2, #0
   b6f48:	e7fa      	b.n	b6f40 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b6f4a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b6f4a:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   b6f4c:	4608      	mov	r0, r1
   b6f4e:	b929      	cbnz	r1, b6f5c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b6f50:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b6f52:	b003      	add	sp, #12
   b6f54:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6f58:	f7fe bf62 	b.w	b5e20 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b6f5c:	2101      	movs	r1, #1
   b6f5e:	9001      	str	r0, [sp, #4]
   b6f60:	f7ff fe15 	bl	b6b8e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6f64:	9801      	ldr	r0, [sp, #4]
   b6f66:	2200      	movs	r2, #0
   b6f68:	6a01      	ldr	r1, [r0, #32]
   b6f6a:	e7f2      	b.n	b6f52 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000b6f6c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b6f6c:	b538      	push	{r3, r4, r5, lr}
   b6f6e:	4604      	mov	r4, r0
   b6f70:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b6f72:	f7ff ffe2 	bl	b6f3a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b6f76:	2800      	cmp	r0, #0
   b6f78:	db0a      	blt.n	b6f90 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b6f7a:	4629      	mov	r1, r5
   b6f7c:	4620      	mov	r0, r4
   b6f7e:	f7ff ffe4 	bl	b6f4a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b6f82:	2800      	cmp	r0, #0
   b6f84:	db04      	blt.n	b6f90 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b6f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b6f8a:	2000      	movs	r0, #0
   b6f8c:	f7fe bf50 	b.w	b5e30 <hal_ble_gap_start_advertising>
}
   b6f90:	bd38      	pop	{r3, r4, r5, pc}

000b6f92 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b6f92:	6803      	ldr	r3, [r0, #0]
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b6f94:	69d8      	ldr	r0, [r3, #28]
}
   b6f96:	2800      	cmp	r0, #0
   b6f98:	bfd4      	ite	le
   b6f9a:	2000      	movle	r0, #0
   b6f9c:	2001      	movgt	r0, #1
   b6f9e:	4770      	bx	lr

000b6fa0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6fa0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6fa2:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6fa4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6fa6:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6fa8:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6faa:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6fac:	f7fd f873 	bl	b4096 <_Znwj>
   b6fb0:	b118      	cbz	r0, b6fba <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6fb2:	682b      	ldr	r3, [r5, #0]
   b6fb4:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6fb6:	686b      	ldr	r3, [r5, #4]
   b6fb8:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6fba:	4b03      	ldr	r3, [pc, #12]	; (b6fc8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b6fbc:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6fbe:	4b03      	ldr	r3, [pc, #12]	; (b6fcc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6fc0:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6fc2:	60a3      	str	r3, [r4, #8]
      }
   b6fc4:	4620      	mov	r0, r4
   b6fc6:	bd38      	pop	{r3, r4, r5, pc}
   b6fc8:	000b67ad 	.word	0x000b67ad
   b6fcc:	000b6805 	.word	0x000b6805

000b6fd0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6fd0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6fd2:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6fd4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6fd6:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6fd8:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6fda:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6fdc:	f7fd f85b 	bl	b4096 <_Znwj>
   b6fe0:	b118      	cbz	r0, b6fea <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   b6fe2:	682b      	ldr	r3, [r5, #0]
   b6fe4:	6003      	str	r3, [r0, #0]
   b6fe6:	686b      	ldr	r3, [r5, #4]
   b6fe8:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6fea:	4b03      	ldr	r3, [pc, #12]	; (b6ff8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b6fec:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6fee:	4b03      	ldr	r3, [pc, #12]	; (b6ffc <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6ff0:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6ff2:	60a3      	str	r3, [r4, #8]
      }
   b6ff4:	4620      	mov	r0, r4
   b6ff6:	bd38      	pop	{r3, r4, r5, pc}
   b6ff8:	000b67a1 	.word	0x000b67a1
   b6ffc:	000b67c5 	.word	0x000b67c5

000b7000 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b7000:	680b      	ldr	r3, [r1, #0]
   b7002:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b7004:	b113      	cbz	r3, b700c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b7006:	685a      	ldr	r2, [r3, #4]
   b7008:	3201      	adds	r2, #1
   b700a:	605a      	str	r2, [r3, #4]
      }
   b700c:	4770      	bx	lr

000b700e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b700e:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7010:	f851 3b04 	ldr.w	r3, [r1], #4
   b7014:	4604      	mov	r4, r0
   b7016:	f840 3b04 	str.w	r3, [r0], #4
   b701a:	f7ff fff1 	bl	b7000 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b701e:	6823      	ldr	r3, [r4, #0]
   b7020:	b90b      	cbnz	r3, b7026 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b7022:	f7ff fbb5 	bl	b6790 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b7026:	4620      	mov	r0, r4
   b7028:	bd10      	pop	{r4, pc}

000b702a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b702a:	b510      	push	{r4, lr}
   b702c:	f851 3b04 	ldr.w	r3, [r1], #4
   b7030:	4604      	mov	r4, r0
   b7032:	f840 3b04 	str.w	r3, [r0], #4
   b7036:	f7ff ffe3 	bl	b7000 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b703a:	4620      	mov	r0, r4
   b703c:	bd10      	pop	{r4, pc}

000b703e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b703e:	b510      	push	{r4, lr}
   b7040:	f851 3b04 	ldr.w	r3, [r1], #4
   b7044:	4604      	mov	r4, r0
   b7046:	f840 3b04 	str.w	r3, [r0], #4
   b704a:	f7ff ffd9 	bl	b7000 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b704e:	4620      	mov	r0, r4
   b7050:	bd10      	pop	{r4, pc}

000b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b7052:	b510      	push	{r4, lr}
   b7054:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b7056:	6800      	ldr	r0, [r0, #0]
   b7058:	b108      	cbz	r0, b705e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b705a:	f7ff fc07 	bl	b686c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b705e:	4620      	mov	r0, r4
   b7060:	bd10      	pop	{r4, pc}

000b7062 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b7062:	b510      	push	{r4, lr}
   b7064:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7066:	3004      	adds	r0, #4
   b7068:	f7ff fff3 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b706c:	4620      	mov	r0, r4
   b706e:	bd10      	pop	{r4, pc}

000b7070 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7070:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7072:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7076:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7078:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b707c:	42ae      	cmp	r6, r5
   b707e:	d004      	beq.n	b708a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b7080:	1d28      	adds	r0, r5, #4
   b7082:	f7ff ffe6 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7086:	3508      	adds	r5, #8
   b7088:	e7f8      	b.n	b707c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b708a:	6820      	ldr	r0, [r4, #0]
   b708c:	f7ff fa80 	bl	b6590 <free>
}
   b7090:	4620      	mov	r0, r4
   b7092:	bd70      	pop	{r4, r5, r6, pc}

000b7094 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7094:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7096:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b709a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b709c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b70a0:	42ae      	cmp	r6, r5
   b70a2:	d004      	beq.n	b70ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b70a4:	1d28      	adds	r0, r5, #4
   b70a6:	f7ff ffd4 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b70aa:	3508      	adds	r5, #8
   b70ac:	e7f8      	b.n	b70a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b70ae:	6820      	ldr	r0, [r4, #0]
   b70b0:	f7ff fa6e 	bl	b6590 <free>
}
   b70b4:	4620      	mov	r0, r4
   b70b6:	bd70      	pop	{r4, r5, r6, pc}

000b70b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b70b8:	b510      	push	{r4, lr}
   b70ba:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b70bc:	3024      	adds	r0, #36	; 0x24
   b70be:	f7ff ffe9 	bl	b7094 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b70c2:	f104 0018 	add.w	r0, r4, #24
   b70c6:	f7ff ffd3 	bl	b7070 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b70ca:	bd10      	pop	{r4, pc}

000b70cc <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   b70cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   b70ce:	6804      	ldr	r4, [r0, #0]
   b70d0:	4606      	mov	r6, r0
   b70d2:	b324      	cbz	r4, b711e <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   b70d4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b70d8:	f7ff fbb4 	bl	b6844 <_ZNSt14_Function_baseD1Ev>
   b70dc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b70e0:	f7ff fbb0 	bl	b6844 <_ZNSt14_Function_baseD1Ev>
   b70e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b70e8:	f7ff fbac 	bl	b6844 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b70ec:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b70f0:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   b70f4:	42af      	cmp	r7, r5
   b70f6:	d004      	beq.n	b7102 <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   b70f8:	1d28      	adds	r0, r5, #4
   b70fa:	f7ff ffaa 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b70fe:	3508      	adds	r5, #8
   b7100:	e7f8      	b.n	b70f4 <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   b7102:	69a0      	ldr	r0, [r4, #24]
   b7104:	f7ff fa44 	bl	b6590 <free>
    ~BleLocalDeviceImpl() = default;
   b7108:	f104 000c 	add.w	r0, r4, #12
   b710c:	f7ff ffc2 	bl	b7094 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7110:	4620      	mov	r0, r4
   b7112:	f7ff ffad 	bl	b7070 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b7116:	2154      	movs	r1, #84	; 0x54
   b7118:	4620      	mov	r0, r4
   b711a:	f002 f898 	bl	b924e <_ZdlPvj>
   b711e:	4630      	mov	r0, r6
   b7120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7122 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b7122:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b7124:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7126:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b712a:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b712e:	6803      	ldr	r3, [r0, #0]
   b7130:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7132:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7134:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b7136:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b7138:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b713a:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b713c:	f7ff ff89 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b7140:	b002      	add	sp, #8
   b7142:	bd10      	pop	{r4, pc}

000b7144 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b7144:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7146:	b510      	push	{r4, lr}
      if (_M_empty())
   b7148:	b90a      	cbnz	r2, b714e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b714a:	f002 f884 	bl	b9256 <_ZSt25__throw_bad_function_callv>
    }
   b714e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7152:	68c3      	ldr	r3, [r0, #12]
   b7154:	4718      	bx	r3

000b7156 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
inline void spark::Vector<T, AllocatorT>::clear() {
   b7156:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7158:	e9d0 5300 	ldrd	r5, r3, [r0]
inline void spark::Vector<T, AllocatorT>::clear() {
   b715c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b715e:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7162:	42ae      	cmp	r6, r5
   b7164:	d004      	beq.n	b7170 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
      ~__shared_ptr() = default;
   b7166:	1d28      	adds	r0, r5, #4
   b7168:	f7ff ff73 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b716c:	3508      	adds	r5, #8
   b716e:	e7f8      	b.n	b7162 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
    size_ = 0;
   b7170:	2300      	movs	r3, #0
   b7172:	6063      	str	r3, [r4, #4]
}
   b7174:	bd70      	pop	{r4, r5, r6, pc}

000b7176 <_ZNK8particle14BleLocalDevice3offEv>:
int BleLocalDevice::off() const {
   b7176:	b513      	push	{r0, r1, r4, lr}
   b7178:	4604      	mov	r4, r0
    CHECK(hal_ble_stack_deinit(nullptr));
   b717a:	2000      	movs	r0, #0
   b717c:	f7fe fe40 	bl	b5e00 <hal_ble_stack_deinit>
   b7180:	2800      	cmp	r0, #0
   b7182:	db0a      	blt.n	b719a <_ZNK8particle14BleLocalDevice3offEv+0x24>
        WiringBleLock lk;
   b7184:	a801      	add	r0, sp, #4
   b7186:	f7ff fb9b 	bl	b68c0 <_ZN8particle3ble13WiringBleLockC1Ev>
        return peers_;
   b718a:	6820      	ldr	r0, [r4, #0]
        impl()->peers().clear();
   b718c:	3018      	adds	r0, #24
   b718e:	f7ff ffe2 	bl	b7156 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
        WiringBleLock lk;
   b7192:	a801      	add	r0, sp, #4
   b7194:	f7ff fba2 	bl	b68dc <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b7198:	2000      	movs	r0, #0
}
   b719a:	b002      	add	sp, #8
   b719c:	bd10      	pop	{r4, pc}

000b719e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b719e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b71a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b71a2:	4604      	mov	r4, r0
   b71a4:	460d      	mov	r5, r1
   b71a6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b71a8:	d914      	bls.n	b71d4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b71aa:	4290      	cmp	r0, r2
   b71ac:	d213      	bcs.n	b71d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b71ae:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b71b2:	1a75      	subs	r5, r6, r1
   b71b4:	f1a1 0708 	sub.w	r7, r1, #8
   b71b8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b71ba:	42b7      	cmp	r7, r6
   b71bc:	d018      	beq.n	b71f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b71be:	b11c      	cbz	r4, b71c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b71c0:	4631      	mov	r1, r6
   b71c2:	4620      	mov	r0, r4
   b71c4:	f7ff ff3b 	bl	b703e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b71c8:	1d30      	adds	r0, r6, #4
   b71ca:	f7ff ff42 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b71ce:	3e08      	subs	r6, #8
   b71d0:	3c08      	subs	r4, #8
   b71d2:	e7f2      	b.n	b71ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b71d4:	d00c      	beq.n	b71f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b71d6:	42b5      	cmp	r5, r6
   b71d8:	d00a      	beq.n	b71f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b71da:	b11c      	cbz	r4, b71e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b71dc:	4629      	mov	r1, r5
   b71de:	4620      	mov	r0, r4
   b71e0:	f7ff ff2d 	bl	b703e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b71e4:	1d28      	adds	r0, r5, #4
   b71e6:	f7ff ff34 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b71ea:	3508      	adds	r5, #8
   b71ec:	3408      	adds	r4, #8
   b71ee:	e7f2      	b.n	b71d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b71f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b71f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b71f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b71f4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b71f6:	6846      	ldr	r6, [r0, #4]
   b71f8:	4668      	mov	r0, sp
   b71fa:	f7ff ff20 	bl	b703e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b71fe:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7202:	429f      	cmp	r7, r3
   b7204:	db12      	blt.n	b722c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7206:	3701      	adds	r7, #1
        if (n > 0) {
   b7208:	2f00      	cmp	r7, #0
   b720a:	dd29      	ble.n	b7260 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b720c:	00f8      	lsls	r0, r7, #3
   b720e:	f7ff f9b7 	bl	b6580 <malloc>
            if (!d) {
   b7212:	4605      	mov	r5, r0
   b7214:	b1f0      	cbz	r0, b7254 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7216:	e9d4 1200 	ldrd	r1, r2, [r4]
   b721a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b721e:	f7ff ffbe 	bl	b719e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7222:	6820      	ldr	r0, [r4, #0]
   b7224:	f7ff f9b4 	bl	b6590 <free>
        data_ = d;
   b7228:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b722a:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b722c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b722e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7230:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7234:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7238:	4631      	mov	r1, r6
   b723a:	f106 0008 	add.w	r0, r6, #8
   b723e:	f7ff ffae 	bl	b719e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7242:	b11e      	cbz	r6, b724c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7244:	4669      	mov	r1, sp
   b7246:	4630      	mov	r0, r6
   b7248:	f7ff fef9 	bl	b703e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b724c:	6863      	ldr	r3, [r4, #4]
   b724e:	3301      	adds	r3, #1
   b7250:	6063      	str	r3, [r4, #4]
    return true;
   b7252:	2501      	movs	r5, #1
   b7254:	a801      	add	r0, sp, #4
   b7256:	f7ff fefc 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b725a:	4628      	mov	r0, r5
   b725c:	b003      	add	sp, #12
   b725e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7260:	2500      	movs	r5, #0
   b7262:	e7de      	b.n	b7222 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b7264 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7266:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b726a:	4605      	mov	r5, r0
   b726c:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b726e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7272:	42a6      	cmp	r6, r4
   b7274:	d005      	beq.n	b7282 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b7276:	4639      	mov	r1, r7
   b7278:	4620      	mov	r0, r4
   b727a:	f7ff fdb8 	bl	b6dee <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b727e:	b108      	cbz	r0, b7284 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b7280:	b914      	cbnz	r4, b7288 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b7282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b7284:	3408      	adds	r4, #8
   b7286:	e7f4      	b.n	b7272 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b7288:	1d20      	adds	r0, r4, #4
   b728a:	f7ff fee2 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b728e:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7292:	f104 0108 	add.w	r1, r4, #8
   b7296:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b729a:	4620      	mov	r0, r4
   b729c:	f7ff ff7f 	bl	b719e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b72a0:	686b      	ldr	r3, [r5, #4]
   b72a2:	3b01      	subs	r3, #1
   b72a4:	606b      	str	r3, [r5, #4]
    return true;
   b72a6:	e7ec      	b.n	b7282 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>

000b72a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b72a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b72ac:	4605      	mov	r5, r0
   b72ae:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b72b0:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b72b2:	460c      	mov	r4, r1
        WiringBleLock lk;
   b72b4:	f7ff fb04 	bl	b68c0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b72b8:	682e      	ldr	r6, [r5, #0]
   b72ba:	2e04      	cmp	r6, #4
   b72bc:	d06d      	beq.n	b739a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf2>
   b72be:	d807      	bhi.n	b72d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   b72c0:	2e03      	cmp	r6, #3
   b72c2:	d02a      	beq.n	b731a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x72>
        WiringBleLock lk;
   b72c4:	a803      	add	r0, sp, #12
   b72c6:	f7ff fb09 	bl	b68dc <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b72ca:	b00e      	add	sp, #56	; 0x38
   b72cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   b72d0:	f1a6 030c 	sub.w	r3, r6, #12
   b72d4:	2b04      	cmp	r3, #4
   b72d6:	d8f5      	bhi.n	b72c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b72d8:	89a9      	ldrh	r1, [r5, #12]
   b72da:	4620      	mov	r0, r4
   b72dc:	f7ff fc94 	bl	b6c08 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b72e0:	4607      	mov	r7, r0
   b72e2:	2800      	cmp	r0, #0
   b72e4:	d0ee      	beq.n	b72c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   b72e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b72e8:	2b00      	cmp	r3, #0
   b72ea:	d0eb      	beq.n	b72c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   b72ec:	2210      	movs	r2, #16
   b72ee:	2100      	movs	r1, #0
   b72f0:	a807      	add	r0, sp, #28
   b72f2:	f002 fb8d 	bl	b9a10 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b72f6:	2e0d      	cmp	r6, #13
                        };
   b72f8:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   b72fa:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b72fe:	d002      	beq.n	b7306 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x5e>
   b7300:	2e10      	cmp	r6, #16
   b7302:	f040 8092 	bne.w	b742a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x182>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   b7306:	686b      	ldr	r3, [r5, #4]
   b7308:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b730a:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   b730c:	9308      	str	r3, [sp, #32]
   b730e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7310:	a906      	add	r1, sp, #24
   b7312:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7316:	4798      	blx	r3
   b7318:	e7d4      	b.n	b72c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   b731a:	a804      	add	r0, sp, #16
   b731c:	f7ff fd20 	bl	b6d60 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b7320:	9b04      	ldr	r3, [sp, #16]
   b7322:	89aa      	ldrh	r2, [r5, #12]
   b7324:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b7326:	6869      	ldr	r1, [r5, #4]
   b7328:	9804      	ldr	r0, [sp, #16]
   b732a:	3108      	adds	r1, #8
   b732c:	3002      	adds	r0, #2
   b732e:	f7ff fae1 	bl	b68f4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7332:	a904      	add	r1, sp, #16
   b7334:	a806      	add	r0, sp, #24
   b7336:	f7ff fe82 	bl	b703e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b733a:	a906      	add	r1, sp, #24
   b733c:	f104 0018 	add.w	r0, r4, #24
   b7340:	f7ff ff57 	bl	b71f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b7344:	4605      	mov	r5, r0
   b7346:	a807      	add	r0, sp, #28
   b7348:	f7ff fe83 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b734c:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b734e:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b7350:	b98d      	cbnz	r5, b7376 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xce>
                    LOG(ERROR, "Failed to append peer Central device.");
   b7352:	4b3e      	ldr	r3, [pc, #248]	; (b744c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   b7354:	493e      	ldr	r1, [pc, #248]	; (b7450 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b7356:	9300      	str	r3, [sp, #0]
   b7358:	2032      	movs	r0, #50	; 0x32
   b735a:	462b      	mov	r3, r5
   b735c:	aa06      	add	r2, sp, #24
   b735e:	9507      	str	r5, [sp, #28]
   b7360:	f7ff f808 	bl	b6374 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b7364:	9b04      	ldr	r3, [sp, #16]
   b7366:	4629      	mov	r1, r5
   b7368:	8818      	ldrh	r0, [r3, #0]
   b736a:	f7fe fd69 	bl	b5e40 <hal_ble_gap_disconnect>
   b736e:	a805      	add	r0, sp, #20
   b7370:	f7ff fe6f 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7374:	e7a6      	b.n	b72c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   b7376:	4a37      	ldr	r2, [pc, #220]	; (b7454 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   b7378:	9200      	str	r2, [sp, #0]
   b737a:	2300      	movs	r3, #0
   b737c:	4934      	ldr	r1, [pc, #208]	; (b7450 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b737e:	9307      	str	r3, [sp, #28]
   b7380:	aa06      	add	r2, sp, #24
   b7382:	2001      	movs	r0, #1
   b7384:	f7fe fff6 	bl	b6374 <log_message>
                if (impl->connectedCallback_) {
   b7388:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b738a:	2b00      	cmp	r3, #0
   b738c:	d0ef      	beq.n	b736e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc6>
                    impl->connectedCallback_(peer);
   b738e:	a904      	add	r1, sp, #16
   b7390:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7394:	f7ff fed6 	bl	b7144 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7398:	e7e9      	b.n	b736e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc6>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b739a:	89a9      	ldrh	r1, [r5, #12]
   b739c:	4620      	mov	r0, r4
   b739e:	f7ff fc33 	bl	b6c08 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b73a2:	4606      	mov	r6, r0
   b73a4:	2800      	cmp	r0, #0
   b73a6:	d08d      	beq.n	b72c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
      { return _M_ptr; }
   b73a8:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b73aa:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b73ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b73b2:	8029      	strh	r1, [r5, #0]
   b73b4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b73b8:	429a      	cmp	r2, r3
   b73ba:	d003      	beq.n	b73c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b73bc:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b73c0:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b73c2:	e7f9      	b.n	b73b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x110>
    destruct(data_, data_ + size_);
   b73c4:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b73c8:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b73cc:	45b8      	cmp	r8, r7
   b73ce:	d004      	beq.n	b73da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x132>
      ~__shared_ptr() = default;
   b73d0:	1d38      	adds	r0, r7, #4
   b73d2:	f7ff fe3e 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b73d6:	3708      	adds	r7, #8
   b73d8:	e7f8      	b.n	b73cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
    size_ = 0;
   b73da:	2300      	movs	r3, #0
   b73dc:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b73de:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b73e2:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b73e6:	45b8      	cmp	r8, r7
   b73e8:	d004      	beq.n	b73f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14c>
   b73ea:	1d38      	adds	r0, r7, #4
   b73ec:	f7ff fe31 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b73f0:	3708      	adds	r7, #8
   b73f2:	e7f8      	b.n	b73e6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13e>
    size_ = 0;
   b73f4:	2300      	movs	r3, #0
   b73f6:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b73f8:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b73fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b73fc:	b123      	cbz	r3, b7408 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x160>
                        impl->disconnectedCallback_(*peer);
   b73fe:	4631      	mov	r1, r6
   b7400:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7404:	f7ff fe9e 	bl	b7144 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b7408:	2300      	movs	r3, #0
   b740a:	2220      	movs	r2, #32
   b740c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7410:	4a11      	ldr	r2, [pc, #68]	; (b7458 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b0>)
   b7412:	9200      	str	r2, [sp, #0]
   b7414:	490e      	ldr	r1, [pc, #56]	; (b7450 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b7416:	aa06      	add	r2, sp, #24
   b7418:	2001      	movs	r0, #1
   b741a:	f7fe ffab 	bl	b6374 <log_message>
                    impl->peers_.removeOne(*peer);
   b741e:	4631      	mov	r1, r6
   b7420:	f104 0018 	add.w	r0, r4, #24
   b7424:	f7ff ff1e 	bl	b7264 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b7428:	e74c      	b.n	b72c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b742a:	2e0f      	cmp	r6, #15
   b742c:	f47f af6f 	bne.w	b730e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x66>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   b7430:	686b      	ldr	r3, [r5, #4]
   b7432:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   b7434:	7a2b      	ldrb	r3, [r5, #8]
   b7436:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   b743a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   b743e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   b7442:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   b7446:	2308      	movs	r3, #8
   b7448:	e760      	b.n	b730c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x64>
   b744a:	bf00      	nop
   b744c:	000ba449 	.word	0x000ba449
   b7450:	000ba40a 	.word	0x000ba40a
   b7454:	000ba46f 	.word	0x000ba46f
   b7458:	000ba48c 	.word	0x000ba48c

000b745c <_ZNK8particle13BlePeerDevice10disconnectEv>:
int BlePeerDevice::disconnect() const {
   b745c:	b513      	push	{r0, r1, r4, lr}
   b745e:	4604      	mov	r4, r0
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b7460:	f7ff fca0 	bl	b6da4 <_ZNK8particle13BlePeerDevice9connectedEv>
   b7464:	b1d0      	cbz	r0, b749c <_ZNK8particle13BlePeerDevice10disconnectEv+0x40>
    CHECK(hal_ble_gap_disconnect(impl()->connHandle(), nullptr));
   b7466:	6823      	ldr	r3, [r4, #0]
   b7468:	2100      	movs	r1, #0
   b746a:	8818      	ldrh	r0, [r3, #0]
   b746c:	f7fe fce8 	bl	b5e40 <hal_ble_gap_disconnect>
   b7470:	2800      	cmp	r0, #0
   b7472:	db11      	blt.n	b7498 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
        WiringBleLock lk;
   b7474:	a801      	add	r0, sp, #4
   b7476:	f7ff fa23 	bl	b68c0 <_ZN8particle3ble13WiringBleLockC1Ev>
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b747a:	f7ff fd09 	bl	b6e90 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b747e:	6800      	ldr	r0, [r0, #0]
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b7480:	4621      	mov	r1, r4
   b7482:	3018      	adds	r0, #24
   b7484:	f7ff feee 	bl	b7264 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
      { return _M_ptr; }
   b7488:	6823      	ldr	r3, [r4, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b748a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b748e:	801a      	strh	r2, [r3, #0]
        WiringBleLock lk;
   b7490:	a801      	add	r0, sp, #4
   b7492:	f7ff fa23 	bl	b68dc <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b7496:	2000      	movs	r0, #0
}
   b7498:	b002      	add	sp, #8
   b749a:	bd10      	pop	{r4, pc}
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b749c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b74a0:	e7fa      	b.n	b7498 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
	...

000b74a4 <_ZNK8particle14BleLocalDevice13disconnectAllEv>:

int BleLocalDevice::disconnect(const BlePeerDevice& peer) const {
    return peer.disconnect();
}

int BleLocalDevice::disconnectAll() const {
   b74a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b74a8:	4604      	mov	r4, r0
    WiringBleLock lk;
   b74aa:	a801      	add	r0, sp, #4
   b74ac:	f7ff fa08 	bl	b68c0 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b74b0:	6823      	ldr	r3, [r4, #0]
   b74b2:	4e10      	ldr	r6, [pc, #64]	; (b74f4 <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x50>)
    return data_ + size_;
   b74b4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
        locked_ = false;
   b74b8:	f04f 0800 	mov.w	r8, #0
   b74bc:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
        locked_ = true;
   b74c0:	2701      	movs	r7, #1
    for (auto& p : impl()->peers()) {
   b74c2:	42ac      	cmp	r4, r5
   b74c4:	d00e      	beq.n	b74e4 <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x40>
   b74c6:	6830      	ldr	r0, [r6, #0]
   b74c8:	f7fe fd54 	bl	b5f74 <os_mutex_recursive_unlock>
        lk.unlock();
        p.disconnect();
   b74cc:	4620      	mov	r0, r4
        locked_ = false;
   b74ce:	f88d 8004 	strb.w	r8, [sp, #4]
        p.disconnect();
   b74d2:	f7ff ffc3 	bl	b745c <_ZNK8particle13BlePeerDevice10disconnectEv>
    void lock() { os_mutex_recursive_lock(handle_); }
   b74d6:	6830      	ldr	r0, [r6, #0]
   b74d8:	f7fe fd44 	bl	b5f64 <os_mutex_recursive_lock>
        locked_ = true;
   b74dc:	3408      	adds	r4, #8
   b74de:	f88d 7004 	strb.w	r7, [sp, #4]
    for (auto& p : impl()->peers()) {
   b74e2:	e7ee      	b.n	b74c2 <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x1e>
    WiringBleLock lk;
   b74e4:	a801      	add	r0, sp, #4
   b74e6:	f7ff f9f9 	bl	b68dc <_ZN8particle3ble13WiringBleLockD1Ev>
        lk.lock();
    }
    return SYSTEM_ERROR_NONE;
}
   b74ea:	2000      	movs	r0, #0
   b74ec:	b002      	add	sp, #8
   b74ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b74f2:	bf00      	nop
   b74f4:	2003e634 	.word	0x2003e634

000b74f8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b74f8:	b513      	push	{r0, r1, r4, lr}
   b74fa:	460b      	mov	r3, r1
   b74fc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b74fe:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7502:	466c      	mov	r4, sp
   b7504:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7508:	e893 0003 	ldmia.w	r3, {r0, r1}
   b750c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7510:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7514:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7518:	b002      	add	sp, #8
   b751a:	bd10      	pop	{r4, pc}

000b751c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b751c:	b538      	push	{r3, r4, r5, lr}
   b751e:	4605      	mov	r5, r0
   b7520:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7522:	f7ff ffe9 	bl	b74f8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7526:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7528:	68a2      	ldr	r2, [r4, #8]
   b752a:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b752c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b752e:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7530:	68e2      	ldr	r2, [r4, #12]
   b7532:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7534:	60e3      	str	r3, [r4, #12]
      }
   b7536:	bd38      	pop	{r3, r4, r5, pc}

000b7538 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7538:	b570      	push	{r4, r5, r6, lr}
   b753a:	460e      	mov	r6, r1
   b753c:	b08c      	sub	sp, #48	; 0x30
   b753e:	4604      	mov	r4, r0
   b7540:	9201      	str	r2, [sp, #4]
   b7542:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b7544:	f7ff fb40 	bl	b6bc8 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b7548:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   b754a:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   b754c:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   b754e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7552:	f000 fe76 	bl	b8242 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7556:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b755a:	b1cd      	cbz	r5, b7590 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x58>
   b755c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b755e:	9502      	str	r5, [sp, #8]
   b7560:	a902      	add	r1, sp, #8
   b7562:	a804      	add	r0, sp, #16
   b7564:	9303      	str	r3, [sp, #12]
   b7566:	f7ff fd1b 	bl	b6fa0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b756a:	2300      	movs	r3, #0
	__x.swap(*this);
   b756c:	a908      	add	r1, sp, #32
   b756e:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b7570:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b7572:	f7ff ffd3 	bl	b751c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7576:	4631      	mov	r1, r6
   b7578:	a808      	add	r0, sp, #32
   b757a:	f7ff ffcf 	bl	b751c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b757e:	a808      	add	r0, sp, #32
   b7580:	f7ff f960 	bl	b6844 <_ZNSt14_Function_baseD1Ev>
   b7584:	a804      	add	r0, sp, #16
   b7586:	f7ff f95d 	bl	b6844 <_ZNSt14_Function_baseD1Ev>
    }
   b758a:	4620      	mov	r0, r4
   b758c:	b00c      	add	sp, #48	; 0x30
   b758e:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7590:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7592:	e7ea      	b.n	b756a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000b7594 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b7594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7598:	b089      	sub	sp, #36	; 0x24
   b759a:	461d      	mov	r5, r3
   b759c:	e9dd 4312 	ldrd	r4, r3, [sp, #72]	; 0x48
   b75a0:	4680      	mov	r8, r0
   b75a2:	468a      	mov	sl, r1
   b75a4:	4693      	mov	fp, r2
   b75a6:	9914      	ldr	r1, [sp, #80]	; 0x50
   b75a8:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b75aa:	2200      	movs	r2, #0
   b75ac:	2068      	movs	r0, #104	; 0x68
   b75ae:	9102      	str	r1, [sp, #8]
   b75b0:	9206      	str	r2, [sp, #24]
   b75b2:	f7fc fd70 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b75b6:	1e06      	subs	r6, r0, #0
   b75b8:	f106 090c 	add.w	r9, r6, #12
   b75bc:	d01c      	beq.n	b75f8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x64>
      : _M_use_count(1), _M_weak_count(1) { }
   b75be:	2201      	movs	r2, #1
	: _M_impl(__a)
   b75c0:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b75c2:	e9c6 2201 	strd	r2, r2, [r6, #4]
	: _M_impl(__a)
   b75c6:	4a17      	ldr	r2, [pc, #92]	; (b7624 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b75c8:	f847 2b20 	str.w	r2, [r7], #32
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b75cc:	9902      	ldr	r1, [sp, #8]
   b75ce:	f89b 2000 	ldrb.w	r2, [fp]
   b75d2:	9b03      	ldr	r3, [sp, #12]
    value_ = flags.value_;
   b75d4:	f88d 2014 	strb.w	r2, [sp, #20]
   b75d8:	9100      	str	r1, [sp, #0]
   b75da:	4652      	mov	r2, sl
   b75dc:	a905      	add	r1, sp, #20
   b75de:	4648      	mov	r0, r9
   b75e0:	f7ff ffaa 	bl	b7538 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b75e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b75e6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b75e8:	682b      	ldr	r3, [r5, #0]
   b75ea:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b75ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b75ee:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b75f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b75f4:	6823      	ldr	r3, [r4, #0]
   b75f6:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b75f8:	a906      	add	r1, sp, #24
   b75fa:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b75fc:	e9cd 9606 	strd	r9, r6, [sp, #24]
   b7600:	f7ff fd8f 	bl	b7122 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b7604:	a807      	add	r0, sp, #28
   b7606:	f7ff fd24 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b760a:	f8d8 1000 	ldr.w	r1, [r8]
   b760e:	b931      	cbnz	r1, b761e <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8a>
        SPARK_ASSERT(false);
   b7610:	4a05      	ldr	r2, [pc, #20]	; (b7628 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b7612:	200a      	movs	r0, #10
}
   b7614:	b009      	add	sp, #36	; 0x24
   b7616:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b761a:	f7fe bea3 	b.w	b6364 <panic_>
}
   b761e:	b009      	add	sp, #36	; 0x24
   b7620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7624:	000ba508 	.word	0x000ba508
   b7628:	000b5f95 	.word	0x000b5f95

000b762c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b762c:	b538      	push	{r3, r4, r5, lr}
   b762e:	4605      	mov	r5, r0
   b7630:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7632:	f7ff ff61 	bl	b74f8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7636:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7638:	68a2      	ldr	r2, [r4, #8]
   b763a:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b763c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b763e:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7640:	68e2      	ldr	r2, [r4, #12]
   b7642:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7644:	60e3      	str	r3, [r4, #12]
      }
   b7646:	bd38      	pop	{r3, r4, r5, pc}

000b7648 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b7648:	b510      	push	{r4, lr}
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b764a:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b764c:	b08a      	sub	sp, #40	; 0x28
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b764e:	3434      	adds	r4, #52	; 0x34
   b7650:	b1b9      	cbz	r1, b7682 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b7652:	e9cd 1200 	strd	r1, r2, [sp]
   b7656:	a802      	add	r0, sp, #8
   b7658:	4669      	mov	r1, sp
   b765a:	f7ff fcb9 	bl	b6fd0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b765e:	2300      	movs	r3, #0
	__x.swap(*this);
   b7660:	a906      	add	r1, sp, #24
   b7662:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7664:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7666:	f7ff ffe1 	bl	b762c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b766a:	4621      	mov	r1, r4
   b766c:	a806      	add	r0, sp, #24
   b766e:	f7ff ffdd 	bl	b762c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b7672:	a806      	add	r0, sp, #24
   b7674:	f7ff f8e6 	bl	b6844 <_ZNSt14_Function_baseD1Ev>
   b7678:	a802      	add	r0, sp, #8
   b767a:	f7ff f8e3 	bl	b6844 <_ZNSt14_Function_baseD1Ev>
}
   b767e:	b00a      	add	sp, #40	; 0x28
   b7680:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7682:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7684:	e7eb      	b.n	b765e <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b7686 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7686:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7688:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b768a:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b768c:	3424      	adds	r4, #36	; 0x24
   b768e:	b1b9      	cbz	r1, b76c0 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b7690:	e9cd 1200 	strd	r1, r2, [sp]
   b7694:	a802      	add	r0, sp, #8
   b7696:	4669      	mov	r1, sp
   b7698:	f7ff fc9a 	bl	b6fd0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b769c:	2300      	movs	r3, #0
	__x.swap(*this);
   b769e:	a906      	add	r1, sp, #24
   b76a0:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b76a2:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b76a4:	f7ff ffc2 	bl	b762c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b76a8:	4621      	mov	r1, r4
   b76aa:	a806      	add	r0, sp, #24
   b76ac:	f7ff ffbe 	bl	b762c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b76b0:	a806      	add	r0, sp, #24
   b76b2:	f7ff f8c7 	bl	b6844 <_ZNSt14_Function_baseD1Ev>
   b76b6:	a802      	add	r0, sp, #8
   b76b8:	f7ff f8c4 	bl	b6844 <_ZNSt14_Function_baseD1Ev>
}
   b76bc:	b00a      	add	sp, #40	; 0x28
   b76be:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b76c0:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b76c2:	e7eb      	b.n	b769c <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b76c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b76c4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b76c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b76c8:	4604      	mov	r4, r0
   b76ca:	460d      	mov	r5, r1
   b76cc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b76ce:	d914      	bls.n	b76fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b76d0:	4290      	cmp	r0, r2
   b76d2:	d213      	bcs.n	b76fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b76d4:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b76d8:	1a75      	subs	r5, r6, r1
   b76da:	f1a1 0708 	sub.w	r7, r1, #8
   b76de:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b76e0:	42b7      	cmp	r7, r6
   b76e2:	d018      	beq.n	b7716 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b76e4:	b11c      	cbz	r4, b76ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b76e6:	4631      	mov	r1, r6
   b76e8:	4620      	mov	r0, r4
   b76ea:	f7ff fc9e 	bl	b702a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b76ee:	1d30      	adds	r0, r6, #4
   b76f0:	f7ff fcaf 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b76f4:	3e08      	subs	r6, #8
   b76f6:	3c08      	subs	r4, #8
   b76f8:	e7f2      	b.n	b76e0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b76fa:	d00c      	beq.n	b7716 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b76fc:	42b5      	cmp	r5, r6
   b76fe:	d00a      	beq.n	b7716 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7700:	b11c      	cbz	r4, b770a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7702:	4629      	mov	r1, r5
   b7704:	4620      	mov	r0, r4
   b7706:	f7ff fc90 	bl	b702a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b770a:	1d28      	adds	r0, r5, #4
   b770c:	f7ff fca1 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7710:	3508      	adds	r5, #8
   b7712:	3408      	adds	r4, #8
   b7714:	e7f2      	b.n	b76fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7718 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7718:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b771a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b771c:	4605      	mov	r5, r0
        if (n > 0) {
   b771e:	dd11      	ble.n	b7744 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7720:	00f0      	lsls	r0, r6, #3
   b7722:	f7fe ff2d 	bl	b6580 <malloc>
            if (!d) {
   b7726:	4604      	mov	r4, r0
   b7728:	b158      	cbz	r0, b7742 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b772a:	e9d5 1200 	ldrd	r1, r2, [r5]
   b772e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7732:	f7ff ffc7 	bl	b76c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7736:	6828      	ldr	r0, [r5, #0]
   b7738:	f7fe ff2a 	bl	b6590 <free>
        data_ = d;
   b773c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b773e:	60ae      	str	r6, [r5, #8]
        return true;
   b7740:	2001      	movs	r0, #1
    }
   b7742:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7744:	2400      	movs	r4, #0
   b7746:	e7f6      	b.n	b7736 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7748 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7748:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b774a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b774c:	6845      	ldr	r5, [r0, #4]
   b774e:	4668      	mov	r0, sp
   b7750:	f7ff fc6b 	bl	b702a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7754:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7758:	4299      	cmp	r1, r3
   b775a:	da10      	bge.n	b777e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b775c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b775e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7760:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7764:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7768:	4629      	mov	r1, r5
   b776a:	f105 0008 	add.w	r0, r5, #8
   b776e:	f7ff ffa9 	bl	b76c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7772:	b98d      	cbnz	r5, b7798 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7774:	6863      	ldr	r3, [r4, #4]
   b7776:	3301      	adds	r3, #1
   b7778:	6063      	str	r3, [r4, #4]
    return true;
   b777a:	2601      	movs	r6, #1
   b777c:	e006      	b.n	b778c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b777e:	3101      	adds	r1, #1
   b7780:	4620      	mov	r0, r4
   b7782:	f7ff ffc9 	bl	b7718 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7786:	4606      	mov	r6, r0
   b7788:	2800      	cmp	r0, #0
   b778a:	d1e7      	bne.n	b775c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b778c:	a801      	add	r0, sp, #4
   b778e:	f7ff fc60 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7792:	4630      	mov	r0, r6
   b7794:	b002      	add	sp, #8
   b7796:	bd70      	pop	{r4, r5, r6, pc}
   b7798:	4669      	mov	r1, sp
   b779a:	4628      	mov	r0, r5
   b779c:	f7ff fc45 	bl	b702a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b77a0:	e7e8      	b.n	b7774 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b77a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b77a2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b77a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b77a6:	4604      	mov	r4, r0
   b77a8:	460d      	mov	r5, r1
   b77aa:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b77ac:	d914      	bls.n	b77d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b77ae:	4290      	cmp	r0, r2
   b77b0:	d213      	bcs.n	b77da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b77b2:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b77b6:	1a75      	subs	r5, r6, r1
   b77b8:	f1a1 0708 	sub.w	r7, r1, #8
   b77bc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b77be:	42b7      	cmp	r7, r6
   b77c0:	d018      	beq.n	b77f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b77c2:	b11c      	cbz	r4, b77cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b77c4:	4631      	mov	r1, r6
   b77c6:	4620      	mov	r0, r4
   b77c8:	f7ff fc21 	bl	b700e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b77cc:	1d30      	adds	r0, r6, #4
   b77ce:	f7ff fc40 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b77d2:	3e08      	subs	r6, #8
   b77d4:	3c08      	subs	r4, #8
   b77d6:	e7f2      	b.n	b77be <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b77d8:	d00c      	beq.n	b77f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b77da:	42b5      	cmp	r5, r6
   b77dc:	d00a      	beq.n	b77f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b77de:	b11c      	cbz	r4, b77e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b77e0:	4629      	mov	r1, r5
   b77e2:	4620      	mov	r0, r4
   b77e4:	f7ff fc13 	bl	b700e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b77e8:	1d28      	adds	r0, r5, #4
   b77ea:	f7ff fc32 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b77ee:	3508      	adds	r5, #8
   b77f0:	3408      	adds	r4, #8
   b77f2:	e7f2      	b.n	b77da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b77f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b77f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b77f6:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b77f8:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b77fa:	4605      	mov	r5, r0
        if (n > 0) {
   b77fc:	dd11      	ble.n	b7822 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b77fe:	00f0      	lsls	r0, r6, #3
   b7800:	f7fe febe 	bl	b6580 <malloc>
            if (!d) {
   b7804:	4604      	mov	r4, r0
   b7806:	b158      	cbz	r0, b7820 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7808:	e9d5 1200 	ldrd	r1, r2, [r5]
   b780c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7810:	f7ff ffc7 	bl	b77a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7814:	6828      	ldr	r0, [r5, #0]
   b7816:	f7fe febb 	bl	b6590 <free>
        data_ = d;
   b781a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b781c:	60ae      	str	r6, [r5, #8]
        return true;
   b781e:	2001      	movs	r0, #1
    }
   b7820:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7822:	2400      	movs	r4, #0
   b7824:	e7f6      	b.n	b7814 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7826 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7826:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7828:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b782a:	6845      	ldr	r5, [r0, #4]
   b782c:	4668      	mov	r0, sp
   b782e:	f7ff fbee 	bl	b700e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7832:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7836:	4299      	cmp	r1, r3
   b7838:	da10      	bge.n	b785c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b783a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b783c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b783e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7842:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7846:	4629      	mov	r1, r5
   b7848:	f105 0008 	add.w	r0, r5, #8
   b784c:	f7ff ffa9 	bl	b77a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7850:	b98d      	cbnz	r5, b7876 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7852:	6863      	ldr	r3, [r4, #4]
   b7854:	3301      	adds	r3, #1
   b7856:	6063      	str	r3, [r4, #4]
    return true;
   b7858:	2601      	movs	r6, #1
   b785a:	e006      	b.n	b786a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b785c:	3101      	adds	r1, #1
   b785e:	4620      	mov	r0, r4
   b7860:	f7ff ffc9 	bl	b77f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7864:	4606      	mov	r6, r0
   b7866:	2800      	cmp	r0, #0
   b7868:	d1e7      	bne.n	b783a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b786a:	a801      	add	r0, sp, #4
   b786c:	f7ff fbf1 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7870:	4630      	mov	r0, r6
   b7872:	b002      	add	sp, #8
   b7874:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b7876:	4669      	mov	r1, sp
   b7878:	4628      	mov	r0, r5
   b787a:	f7ff fbc8 	bl	b700e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b787e:	e7e8      	b.n	b7852 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7880 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7884:	4617      	mov	r7, r2
   b7886:	b0a1      	sub	sp, #132	; 0x84
   b7888:	4680      	mov	r8, r0
    WiringBleLock lk;
   b788a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b788c:	460e      	mov	r6, r1
    WiringBleLock lk;
   b788e:	f7ff f817 	bl	b68c0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7892:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b7894:	7923      	ldrb	r3, [r4, #4]
   b7896:	b953      	cbnz	r3, b78ae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b7898:	4639      	mov	r1, r7
   b789a:	4640      	mov	r0, r8
   b789c:	f7ff fbb7 	bl	b700e <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b78a0:	a80a      	add	r0, sp, #40	; 0x28
   b78a2:	f7ff f81b 	bl	b68dc <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b78a6:	4640      	mov	r0, r8
   b78a8:	b021      	add	sp, #132	; 0x84
   b78aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b78ae:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b78b0:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b78b4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b78b8:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b78ba:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b78be:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b78c2:	9b03      	ldr	r3, [sp, #12]
   b78c4:	429d      	cmp	r5, r3
   b78c6:	d021      	beq.n	b790c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b78c8:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b78cc:	4658      	mov	r0, fp
   b78ce:	f109 0114 	add.w	r1, r9, #20
   b78d2:	f7ff f8b0 	bl	b6a36 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b78d6:	b1b8      	cbz	r0, b7908 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b78d8:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b78dc:	4650      	mov	r0, sl
   b78de:	f7ff f8aa 	bl	b6a36 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b78e2:	b188      	cbz	r0, b7908 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b78e4:	6823      	ldr	r3, [r4, #0]
   b78e6:	f8d9 2000 	ldr.w	r2, [r9]
   b78ea:	4053      	eors	r3, r2
   b78ec:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b78f0:	d10a      	bne.n	b7908 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b78f2:	2220      	movs	r2, #32
   b78f4:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b78f8:	4a5e      	ldr	r2, [pc, #376]	; (b7a74 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b78fa:	9200      	str	r2, [sp, #0]
   b78fc:	aa15      	add	r2, sp, #84	; 0x54
   b78fe:	495e      	ldr	r1, [pc, #376]	; (b7a78 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b7900:	2032      	movs	r0, #50	; 0x32
   b7902:	f7fe fd37 	bl	b6374 <log_message>
   b7906:	e7c7      	b.n	b7898 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b7908:	3508      	adds	r5, #8
   b790a:	e7da      	b.n	b78c2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b790c:	4650      	mov	r0, sl
   b790e:	f7ff f863 	bl	b69d8 <_ZNK8particle7BleUuid7isValidEv>
   b7912:	b960      	cbnz	r0, b792e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   b7914:	4959      	ldr	r1, [pc, #356]	; (b7a7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b7916:	2201      	movs	r2, #1
   b7918:	a815      	add	r0, sp, #84	; 0x54
   b791a:	ad15      	add	r5, sp, #84	; 0x54
   b791c:	f7ff f833 	bl	b6986 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b7920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7922:	46d4      	mov	ip, sl
   b7924:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7928:	682b      	ldr	r3, [r5, #0]
   b792a:	f8cc 3000 	str.w	r3, [ip]
   b792e:	6833      	ldr	r3, [r6, #0]
   b7930:	e9d3 5300 	ldrd	r5, r3, [r3]
   b7934:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b7938:	455d      	cmp	r5, fp
   b793a:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b793c:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b793e:	d06e      	beq.n	b7a1e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b7940:	f855 0b08 	ldr.w	r0, [r5], #8
   b7944:	f7ff f877 	bl	b6a36 <_ZNK8particle7BleUuideqERKS0_>
   b7948:	2800      	cmp	r0, #0
   b794a:	d0f5      	beq.n	b7938 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b794c:	f104 0a14 	add.w	sl, r4, #20
   b7950:	4650      	mov	r0, sl
   b7952:	f7ff f841 	bl	b69d8 <_ZNK8particle7BleUuid7isValidEv>
   b7956:	b988      	cbnz	r0, b797c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b7958:	4b49      	ldr	r3, [pc, #292]	; (b7a80 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b795a:	4948      	ldr	r1, [pc, #288]	; (b7a7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b795c:	881a      	ldrh	r2, [r3, #0]
   b795e:	3201      	adds	r2, #1
   b7960:	b292      	uxth	r2, r2
   b7962:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7964:	a815      	add	r0, sp, #84	; 0x54
   b7966:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b7968:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b796a:	f7ff f82b 	bl	b69c4 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b796e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7970:	46d4      	mov	ip, sl
   b7972:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7976:	682b      	ldr	r3, [r5, #0]
   b7978:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b797c:	4b41      	ldr	r3, [pc, #260]	; (b7a84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b797e:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b7980:	2228      	movs	r2, #40	; 0x28
   b7982:	2100      	movs	r1, #0
   b7984:	a816      	add	r0, sp, #88	; 0x58
   b7986:	f002 f843 	bl	b9a10 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b798a:	4651      	mov	r1, sl
   b798c:	a804      	add	r0, sp, #16
   b798e:	f7ff f835 	bl	b69fc <_ZN8particle7BleUuid7halUUIDEv>
   b7992:	ab04      	add	r3, sp, #16
   b7994:	aa18      	add	r2, sp, #96	; 0x60
   b7996:	f10d 0c20 	add.w	ip, sp, #32
   b799a:	6818      	ldr	r0, [r3, #0]
   b799c:	6859      	ldr	r1, [r3, #4]
   b799e:	4615      	mov	r5, r2
   b79a0:	c503      	stmia	r5!, {r0, r1}
   b79a2:	3308      	adds	r3, #8
   b79a4:	4563      	cmp	r3, ip
   b79a6:	462a      	mov	r2, r5
   b79a8:	d1f7      	bne.n	b799a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b79aa:	6818      	ldr	r0, [r3, #0]
   b79ac:	6028      	str	r0, [r5, #0]
    return value_;
   b79ae:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b79b0:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b79b4:	f8d9 3000 	ldr.w	r3, [r9]
   b79b8:	8a9b      	ldrh	r3, [r3, #20]
   b79ba:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b79be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b79c0:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b79c2:	4b31      	ldr	r3, [pc, #196]	; (b7a88 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b79c4:	2200      	movs	r2, #0
   b79c6:	1da1      	adds	r1, r4, #6
   b79c8:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b79ca:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b79ce:	f7fe fa69 	bl	b5ea4 <hal_ble_gatt_server_add_characteristic>
   b79d2:	2800      	cmp	r0, #0
   b79d4:	f47f af60 	bne.w	b7898 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b79d8:	2301      	movs	r3, #1
   b79da:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b79dc:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b79de:	4639      	mov	r1, r7
        return characteristics_;
   b79e0:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b79e2:	a80d      	add	r0, sp, #52	; 0x34
   b79e4:	f7ff fb13 	bl	b700e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b79e8:	4620      	mov	r0, r4
   b79ea:	a90d      	add	r1, sp, #52	; 0x34
   b79ec:	f7ff ff1b 	bl	b7826 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b79f0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b79f2:	a80e      	add	r0, sp, #56	; 0x38
   b79f4:	f7ff fb2d 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b79f8:	2c00      	cmp	r4, #0
   b79fa:	f47f af4d 	bne.w	b7898 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b79fe:	2320      	movs	r3, #32
   b7a00:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b7a04:	4b21      	ldr	r3, [pc, #132]	; (b7a8c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b7a06:	9300      	str	r3, [sp, #0]
   b7a08:	aa0d      	add	r2, sp, #52	; 0x34
   b7a0a:	4623      	mov	r3, r4
   b7a0c:	e777      	b.n	b78fe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b7a0e:	4639      	mov	r1, r7
   b7a10:	4640      	mov	r0, r8
   b7a12:	f7ff fafc 	bl	b700e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7a16:	a80c      	add	r0, sp, #48	; 0x30
   b7a18:	f7ff fb1b 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7a1c:	e740      	b.n	b78a0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b7a1e:	a80b      	add	r0, sp, #44	; 0x2c
   b7a20:	f7ff f97a 	bl	b6d18 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b7a24:	4651      	mov	r1, sl
   b7a26:	a815      	add	r0, sp, #84	; 0x54
   b7a28:	f7fe ffe8 	bl	b69fc <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b7a2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7a2e:	2300      	movs	r3, #0
   b7a30:	3214      	adds	r2, #20
   b7a32:	a915      	add	r1, sp, #84	; 0x54
   b7a34:	2001      	movs	r0, #1
   b7a36:	f7fe fa0d 	bl	b5e54 <hal_ble_gatt_server_add_service>
   b7a3a:	2800      	cmp	r0, #0
   b7a3c:	d1e7      	bne.n	b7a0e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b7a3e:	6835      	ldr	r5, [r6, #0]
   b7a40:	a90b      	add	r1, sp, #44	; 0x2c
   b7a42:	a80d      	add	r0, sp, #52	; 0x34
   b7a44:	f7ff faf1 	bl	b702a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b7a48:	4628      	mov	r0, r5
   b7a4a:	a90d      	add	r1, sp, #52	; 0x34
   b7a4c:	f7ff fe7c 	bl	b7748 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7a50:	4605      	mov	r5, r0
   b7a52:	a80e      	add	r0, sp, #56	; 0x38
   b7a54:	f7ff fafd 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7a58:	2d00      	cmp	r5, #0
   b7a5a:	d0d8      	beq.n	b7a0e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b7a5c:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b7a5e:	6853      	ldr	r3, [r2, #4]
   b7a60:	6812      	ldr	r2, [r2, #0]
   b7a62:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b7a66:	3b01      	subs	r3, #1
   b7a68:	a80c      	add	r0, sp, #48	; 0x30
   b7a6a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b7a6e:	f7ff faf0 	bl	b7052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7a72:	e76b      	b.n	b794c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b7a74:	000ba4ab 	.word	0x000ba4ab
   b7a78:	000ba40a 	.word	0x000ba40a
   b7a7c:	000ba572 	.word	0x000ba572
   b7a80:	2003e630 	.word	0x2003e630
   b7a84:	002c0003 	.word	0x002c0003
   b7a88:	000b6ed1 	.word	0x000b6ed1
   b7a8c:	000ba4d6 	.word	0x000ba4d6

000b7a90 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   b7a90:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   b7a92:	4c06      	ldr	r4, [pc, #24]	; (b7aac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   b7a94:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   b7a96:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   b7a98:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   b7a9a:	f7fe fa53 	bl	b5f44 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   b7a9e:	4620      	mov	r0, r4
   b7aa0:	4a03      	ldr	r2, [pc, #12]	; (b7ab0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   b7aa2:	4904      	ldr	r1, [pc, #16]	; (b7ab4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   b7aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   b7aa8:	f001 bbcc 	b.w	b9244 <__aeabi_atexit>
   b7aac:	2003e634 	.word	0x2003e634
   b7ab0:	2003da60 	.word	0x2003da60
   b7ab4:	000b66cd 	.word	0x000b66cd

000b7ab8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7ab8:	2200      	movs	r2, #0
   b7aba:	6840      	ldr	r0, [r0, #4]
   b7abc:	4611      	mov	r1, r2
   b7abe:	f7fe bd27 	b.w	b6510 <network_listening>

000b7ac2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7ac2:	2200      	movs	r2, #0
   b7ac4:	6840      	ldr	r0, [r0, #4]
   b7ac6:	4611      	mov	r1, r2
   b7ac8:	f7fe bd42 	b.w	b6550 <network_get_listen_timeout>

000b7acc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7acc:	6840      	ldr	r0, [r0, #4]
   b7ace:	2200      	movs	r2, #0
   b7ad0:	f7fe bd36 	b.w	b6540 <network_set_listen_timeout>

000b7ad4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7ad4:	6840      	ldr	r0, [r0, #4]
   b7ad6:	2200      	movs	r2, #0
   b7ad8:	f081 0101 	eor.w	r1, r1, #1
   b7adc:	f7fe bd10 	b.w	b6500 <network_listen>

000b7ae0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7ae0:	2300      	movs	r3, #0
   b7ae2:	6840      	ldr	r0, [r0, #4]
   b7ae4:	461a      	mov	r2, r3
   b7ae6:	4619      	mov	r1, r3
   b7ae8:	f7fe bd02 	b.w	b64f0 <network_off>

000b7aec <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7aec:	2300      	movs	r3, #0
   b7aee:	6840      	ldr	r0, [r0, #4]
   b7af0:	461a      	mov	r2, r3
   b7af2:	4619      	mov	r1, r3
   b7af4:	f7fe bcf4 	b.w	b64e0 <network_on>

000b7af8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7af8:	2200      	movs	r2, #0
   b7afa:	6840      	ldr	r0, [r0, #4]
   b7afc:	4611      	mov	r1, r2
   b7afe:	f7fe bce7 	b.w	b64d0 <network_ready>

000b7b02 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7b02:	2200      	movs	r2, #0
   b7b04:	6840      	ldr	r0, [r0, #4]
   b7b06:	4611      	mov	r1, r2
   b7b08:	f7fe bcd2 	b.w	b64b0 <network_connecting>

000b7b0c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7b0c:	6840      	ldr	r0, [r0, #4]
   b7b0e:	2200      	movs	r2, #0
   b7b10:	2102      	movs	r1, #2
   b7b12:	f7fe bcd5 	b.w	b64c0 <network_disconnect>

000b7b16 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7b16:	2300      	movs	r3, #0
   b7b18:	6840      	ldr	r0, [r0, #4]
   b7b1a:	461a      	mov	r2, r3
   b7b1c:	f7fe bcc0 	b.w	b64a0 <network_connect>

000b7b20 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7b20:	4b02      	ldr	r3, [pc, #8]	; (b7b2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7b22:	2203      	movs	r2, #3
   b7b24:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7b26:	4a02      	ldr	r2, [pc, #8]	; (b7b30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7b28:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7b2a:	4770      	bx	lr
   b7b2c:	2003e63c 	.word	0x2003e63c
   b7b30:	000ba59c 	.word	0x000ba59c

000b7b34 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7b34:	4770      	bx	lr

000b7b36 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b38:	4606      	mov	r6, r0
   b7b3a:	4615      	mov	r5, r2
   b7b3c:	460c      	mov	r4, r1
   b7b3e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7b40:	42bc      	cmp	r4, r7
   b7b42:	d006      	beq.n	b7b52 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7b44:	6833      	ldr	r3, [r6, #0]
   b7b46:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7b4a:	689b      	ldr	r3, [r3, #8]
   b7b4c:	4630      	mov	r0, r6
   b7b4e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7b50:	e7f6      	b.n	b7b40 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7b52:	4628      	mov	r0, r5
   b7b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7b56 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7b56:	7c00      	ldrb	r0, [r0, #16]
   b7b58:	2200      	movs	r2, #0
   b7b5a:	f7fe ba8b 	b.w	b6074 <hal_i2c_write>

000b7b5e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7b5e:	7c00      	ldrb	r0, [r0, #16]
   b7b60:	2100      	movs	r1, #0
   b7b62:	f7fe ba8f 	b.w	b6084 <hal_i2c_available>

000b7b66 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7b66:	7c00      	ldrb	r0, [r0, #16]
   b7b68:	2100      	movs	r1, #0
   b7b6a:	f7fe ba93 	b.w	b6094 <hal_i2c_read>

000b7b6e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7b6e:	7c00      	ldrb	r0, [r0, #16]
   b7b70:	2100      	movs	r1, #0
   b7b72:	f7fe ba97 	b.w	b60a4 <hal_i2c_peek>

000b7b76 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7b76:	7c00      	ldrb	r0, [r0, #16]
   b7b78:	2100      	movs	r1, #0
   b7b7a:	f7fe ba9b 	b.w	b60b4 <hal_i2c_flush>

000b7b7e <_ZN7TwoWireD0Ev>:
   b7b7e:	b510      	push	{r4, lr}
   b7b80:	2114      	movs	r1, #20
   b7b82:	4604      	mov	r4, r0
   b7b84:	f001 fb63 	bl	b924e <_ZdlPvj>
   b7b88:	4620      	mov	r0, r4
   b7b8a:	bd10      	pop	{r4, pc}

000b7b8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7b8c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7b92:	4604      	mov	r4, r0
   b7b94:	4608      	mov	r0, r1
   b7b96:	2100      	movs	r1, #0
   b7b98:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7b9c:	4b03      	ldr	r3, [pc, #12]	; (b7bac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7b9e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7ba0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b7ba2:	4611      	mov	r1, r2
   b7ba4:	f7fe fa96 	bl	b60d4 <hal_i2c_init>
}
   b7ba8:	4620      	mov	r0, r4
   b7baa:	bd10      	pop	{r4, pc}
   b7bac:	000ba5d8 	.word	0x000ba5d8

000b7bb0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7bb0:	2300      	movs	r3, #0
   b7bb2:	7c00      	ldrb	r0, [r0, #16]
   b7bb4:	461a      	mov	r2, r3
   b7bb6:	4619      	mov	r1, r3
   b7bb8:	f7fe ba44 	b.w	b6044 <hal_i2c_begin>

000b7bbc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b7bbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b7bbe:	2200      	movs	r2, #0
   b7bc0:	2314      	movs	r3, #20
   b7bc2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b7bc6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b7bca:	780b      	ldrb	r3, [r1, #0]
   b7bcc:	f88d 3008 	strb.w	r3, [sp, #8]
   b7bd0:	684b      	ldr	r3, [r1, #4]
   b7bd2:	9303      	str	r3, [sp, #12]
   b7bd4:	68cb      	ldr	r3, [r1, #12]
   b7bd6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b7bd8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b7bda:	7a0b      	ldrb	r3, [r1, #8]
   b7bdc:	9305      	str	r3, [sp, #20]
   b7bde:	a901      	add	r1, sp, #4
   b7be0:	f7fe fa80 	bl	b60e4 <hal_i2c_request_ex>
}
   b7be4:	b007      	add	sp, #28
   b7be6:	f85d fb04 	ldr.w	pc, [sp], #4

000b7bea <_ZN7TwoWire11requestFromEhjh>:
{
   b7bea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b7bec:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b7bee:	f88d 1000 	strb.w	r1, [sp]
   b7bf2:	f04f 0164 	mov.w	r1, #100	; 0x64
   b7bf6:	9103      	str	r1, [sp, #12]
   b7bf8:	bf18      	it	ne
   b7bfa:	2301      	movne	r3, #1
   b7bfc:	4669      	mov	r1, sp
    size_ = size;
   b7bfe:	9201      	str	r2, [sp, #4]
   b7c00:	f88d 3008 	strb.w	r3, [sp, #8]
   b7c04:	f7ff ffda 	bl	b7bbc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b7c08:	b005      	add	sp, #20
   b7c0a:	f85d fb04 	ldr.w	pc, [sp], #4

000b7c0e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b7c0e:	2301      	movs	r3, #1
   b7c10:	f7ff bfeb 	b.w	b7bea <_ZN7TwoWire11requestFromEhjh>

000b7c14 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7c14:	7c00      	ldrb	r0, [r0, #16]
   b7c16:	2200      	movs	r2, #0
   b7c18:	f7fe ba1c 	b.w	b6054 <hal_i2c_begin_transmission>

000b7c1c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7c1c:	b2c9      	uxtb	r1, r1
   b7c1e:	f7ff bff9 	b.w	b7c14 <_ZN7TwoWire17beginTransmissionEh>

000b7c22 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7c22:	7c00      	ldrb	r0, [r0, #16]
   b7c24:	2200      	movs	r2, #0
   b7c26:	f7fe ba1d 	b.w	b6064 <hal_i2c_end_transmission>

000b7c2a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7c2a:	2101      	movs	r1, #1
   b7c2c:	f7ff bff9 	b.w	b7c22 <_ZN7TwoWire15endTransmissionEh>

000b7c30 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7c30:	4770      	bx	lr

000b7c32 <_ZN9IPAddressD0Ev>:
   b7c32:	b510      	push	{r4, lr}
   b7c34:	2118      	movs	r1, #24
   b7c36:	4604      	mov	r4, r0
   b7c38:	f001 fb09 	bl	b924e <_ZdlPvj>
   b7c3c:	4620      	mov	r0, r4
   b7c3e:	bd10      	pop	{r4, pc}

000b7c40 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7c40:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7c42:	7d03      	ldrb	r3, [r0, #20]
   b7c44:	2b06      	cmp	r3, #6
{
   b7c46:	b08d      	sub	sp, #52	; 0x34
   b7c48:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7c4a:	f100 0704 	add.w	r7, r0, #4
   b7c4e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7c52:	d012      	beq.n	b7c7a <_ZNK9IPAddress7printToER5Print+0x3a>
   b7c54:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7c58:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7c5c:	220a      	movs	r2, #10
   b7c5e:	4630      	mov	r0, r6
   b7c60:	f000 f979 	bl	b7f56 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7c64:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7c66:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7c68:	d019      	beq.n	b7c9e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7c6a:	2c00      	cmp	r4, #0
   b7c6c:	d0f4      	beq.n	b7c58 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7c6e:	212e      	movs	r1, #46	; 0x2e
   b7c70:	4630      	mov	r0, r6
   b7c72:	f000 f951 	bl	b7f18 <_ZN5Print5printEc>
   b7c76:	4404      	add	r4, r0
   b7c78:	e7ee      	b.n	b7c58 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7c7a:	232f      	movs	r3, #47	; 0x2f
   b7c7c:	466a      	mov	r2, sp
   b7c7e:	4639      	mov	r1, r7
   b7c80:	200a      	movs	r0, #10
		buf[0] = 0;
   b7c82:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7c86:	f7fe fa3d 	bl	b6104 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7c8a:	4668      	mov	r0, sp
   b7c8c:	f001 ff08 	bl	b9aa0 <strlen>
   b7c90:	6833      	ldr	r3, [r6, #0]
   b7c92:	4602      	mov	r2, r0
   b7c94:	68db      	ldr	r3, [r3, #12]
   b7c96:	4669      	mov	r1, sp
   b7c98:	4630      	mov	r0, r6
   b7c9a:	4798      	blx	r3
   b7c9c:	4604      	mov	r4, r0
    }
    return n;
}
   b7c9e:	4620      	mov	r0, r4
   b7ca0:	b00d      	add	sp, #52	; 0x34
   b7ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7ca4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7ca4:	b510      	push	{r4, lr}
   b7ca6:	4b05      	ldr	r3, [pc, #20]	; (b7cbc <_ZN9IPAddressC1Ev+0x18>)
   b7ca8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7caa:	2211      	movs	r2, #17
   b7cac:	f840 3b04 	str.w	r3, [r0], #4
   b7cb0:	2100      	movs	r1, #0
   b7cb2:	f001 fead 	bl	b9a10 <memset>
}
   b7cb6:	4620      	mov	r0, r4
   b7cb8:	bd10      	pop	{r4, pc}
   b7cba:	bf00      	nop
   b7cbc:	000ba600 	.word	0x000ba600

000b7cc0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7cc0:	4603      	mov	r3, r0
   b7cc2:	4a07      	ldr	r2, [pc, #28]	; (b7ce0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7cc4:	b510      	push	{r4, lr}
   b7cc6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7cca:	f101 0210 	add.w	r2, r1, #16
   b7cce:	f851 4b04 	ldr.w	r4, [r1], #4
   b7cd2:	f843 4b04 	str.w	r4, [r3], #4
   b7cd6:	4291      	cmp	r1, r2
   b7cd8:	d1f9      	bne.n	b7cce <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7cda:	780a      	ldrb	r2, [r1, #0]
   b7cdc:	701a      	strb	r2, [r3, #0]
}
   b7cde:	bd10      	pop	{r4, pc}
   b7ce0:	000ba600 	.word	0x000ba600

000b7ce4 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b7ce4:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b7ce6:	2b04      	cmp	r3, #4
   b7ce8:	d104      	bne.n	b7cf4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b7cea:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7cec:	3800      	subs	r0, #0
   b7cee:	bf18      	it	ne
   b7cf0:	2001      	movne	r0, #1
   b7cf2:	4770      	bx	lr
    } else if (version() == 6) {
   b7cf4:	2b06      	cmp	r3, #6
   b7cf6:	d107      	bne.n	b7d08 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7cf8:	6843      	ldr	r3, [r0, #4]
   b7cfa:	b93b      	cbnz	r3, b7d0c <_ZNK9IPAddresscvbEv+0x28>
   b7cfc:	6883      	ldr	r3, [r0, #8]
   b7cfe:	b92b      	cbnz	r3, b7d0c <_ZNK9IPAddresscvbEv+0x28>
   b7d00:	68c3      	ldr	r3, [r0, #12]
   b7d02:	b91b      	cbnz	r3, b7d0c <_ZNK9IPAddresscvbEv+0x28>
   b7d04:	6900      	ldr	r0, [r0, #16]
   b7d06:	e7f1      	b.n	b7cec <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7d08:	2000      	movs	r0, #0
   b7d0a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7d0c:	2001      	movs	r0, #1
}
   b7d0e:	4770      	bx	lr

000b7d10 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7d10:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7d12:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7d16:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7d1a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7d1e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7d22:	2304      	movs	r3, #4
   b7d24:	6041      	str	r1, [r0, #4]
   b7d26:	7503      	strb	r3, [r0, #20]
}
   b7d28:	bd10      	pop	{r4, pc}
	...

000b7d2c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7d2c:	b507      	push	{r0, r1, r2, lr}
   b7d2e:	4b06      	ldr	r3, [pc, #24]	; (b7d48 <_ZN9IPAddressC1EPKh+0x1c>)
   b7d30:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7d32:	78cb      	ldrb	r3, [r1, #3]
   b7d34:	9300      	str	r3, [sp, #0]
   b7d36:	788b      	ldrb	r3, [r1, #2]
   b7d38:	784a      	ldrb	r2, [r1, #1]
   b7d3a:	7809      	ldrb	r1, [r1, #0]
   b7d3c:	f7ff ffe8 	bl	b7d10 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7d40:	b003      	add	sp, #12
   b7d42:	f85d fb04 	ldr.w	pc, [sp], #4
   b7d46:	bf00      	nop
   b7d48:	000ba600 	.word	0x000ba600

000b7d4c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7d4c:	4b01      	ldr	r3, [pc, #4]	; (b7d54 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7d4e:	4a02      	ldr	r2, [pc, #8]	; (b7d58 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7d50:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7d52:	4770      	bx	lr
   b7d54:	2003e644 	.word	0x2003e644
   b7d58:	000ba60c 	.word	0x000ba60c

000b7d5c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7d5c:	2300      	movs	r3, #0
   b7d5e:	6840      	ldr	r0, [r0, #4]
   b7d60:	461a      	mov	r2, r3
   b7d62:	f7fe bb9d 	b.w	b64a0 <network_connect>

000b7d66 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7d66:	6840      	ldr	r0, [r0, #4]
   b7d68:	2200      	movs	r2, #0
   b7d6a:	2102      	movs	r1, #2
   b7d6c:	f7fe bba8 	b.w	b64c0 <network_disconnect>

000b7d70 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7d70:	2200      	movs	r2, #0
   b7d72:	6840      	ldr	r0, [r0, #4]
   b7d74:	4611      	mov	r1, r2
   b7d76:	f7fe bb9b 	b.w	b64b0 <network_connecting>

000b7d7a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7d7a:	2200      	movs	r2, #0
   b7d7c:	6840      	ldr	r0, [r0, #4]
   b7d7e:	4611      	mov	r1, r2
   b7d80:	f7fe bba6 	b.w	b64d0 <network_ready>

000b7d84 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7d84:	2300      	movs	r3, #0
   b7d86:	6840      	ldr	r0, [r0, #4]
   b7d88:	461a      	mov	r2, r3
   b7d8a:	4619      	mov	r1, r3
   b7d8c:	f7fe bba8 	b.w	b64e0 <network_on>

000b7d90 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7d90:	2300      	movs	r3, #0
   b7d92:	6840      	ldr	r0, [r0, #4]
   b7d94:	461a      	mov	r2, r3
   b7d96:	4619      	mov	r1, r3
   b7d98:	f7fe bbaa 	b.w	b64f0 <network_off>

000b7d9c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7d9c:	6840      	ldr	r0, [r0, #4]
   b7d9e:	2100      	movs	r1, #0
   b7da0:	f7fe bbde 	b.w	b6560 <network_is_on>

000b7da4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7da4:	6840      	ldr	r0, [r0, #4]
   b7da6:	2100      	movs	r1, #0
   b7da8:	f7fe bbe2 	b.w	b6570 <network_is_off>

000b7dac <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7dac:	6840      	ldr	r0, [r0, #4]
   b7dae:	2200      	movs	r2, #0
   b7db0:	f081 0101 	eor.w	r1, r1, #1
   b7db4:	f7fe bba4 	b.w	b6500 <network_listen>

000b7db8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7db8:	6840      	ldr	r0, [r0, #4]
   b7dba:	2200      	movs	r2, #0
   b7dbc:	f7fe bbc0 	b.w	b6540 <network_set_listen_timeout>

000b7dc0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7dc0:	2200      	movs	r2, #0
   b7dc2:	6840      	ldr	r0, [r0, #4]
   b7dc4:	4611      	mov	r1, r2
   b7dc6:	f7fe bbc3 	b.w	b6550 <network_get_listen_timeout>

000b7dca <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7dca:	2200      	movs	r2, #0
   b7dcc:	6840      	ldr	r0, [r0, #4]
   b7dce:	4611      	mov	r1, r2
   b7dd0:	f7fe bb9e 	b.w	b6510 <network_listening>

000b7dd4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7dd8:	b095      	sub	sp, #84	; 0x54
   b7dda:	4614      	mov	r4, r2
   b7ddc:	460d      	mov	r5, r1
   b7dde:	4607      	mov	r7, r0
    IPAddress addr;
   b7de0:	f7ff ff60 	bl	b7ca4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7de4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7de6:	221c      	movs	r2, #28
   b7de8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7dea:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7dec:	f001 fe10 	bl	b9a10 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7df0:	2340      	movs	r3, #64	; 0x40
   b7df2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7df4:	4620      	mov	r0, r4
   b7df6:	466b      	mov	r3, sp
   b7df8:	aa0c      	add	r2, sp, #48	; 0x30
   b7dfa:	2100      	movs	r1, #0
   b7dfc:	f7fe f9a2 	bl	b6144 <netdb_getaddrinfo>
    if (!r) {
   b7e00:	4604      	mov	r4, r0
   b7e02:	2800      	cmp	r0, #0
   b7e04:	d14b      	bne.n	b7e9e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7e06:	4602      	mov	r2, r0
   b7e08:	2101      	movs	r1, #1
   b7e0a:	6868      	ldr	r0, [r5, #4]
   b7e0c:	f7fe fb60 	bl	b64d0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7e10:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7e12:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7e14:	4622      	mov	r2, r4
   b7e16:	6868      	ldr	r0, [r5, #4]
   b7e18:	f7fe fb5a 	bl	b64d0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7e1c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7e1e:	4681      	mov	r9, r0
        bool ok = false;
   b7e20:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7e22:	2e00      	cmp	r6, #0
   b7e24:	d03b      	beq.n	b7e9e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7e26:	2900      	cmp	r1, #0
   b7e28:	d139      	bne.n	b7e9e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7e2a:	6873      	ldr	r3, [r6, #4]
   b7e2c:	2b02      	cmp	r3, #2
   b7e2e:	d003      	beq.n	b7e38 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7e30:	2b0a      	cmp	r3, #10
   b7e32:	d011      	beq.n	b7e58 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7e34:	69f6      	ldr	r6, [r6, #28]
   b7e36:	e7f4      	b.n	b7e22 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7e38:	f1b8 0f00 	cmp.w	r8, #0
   b7e3c:	d0fa      	beq.n	b7e34 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7e3e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7e40:	a806      	add	r0, sp, #24
   b7e42:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7e44:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7e46:	f7ff ff71 	bl	b7d2c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7e4c:	1d3c      	adds	r4, r7, #4
   b7e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7e50:	682b      	ldr	r3, [r5, #0]
   b7e52:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7e54:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7e56:	e7ed      	b.n	b7e34 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7e58:	f1b9 0f00 	cmp.w	r9, #0
   b7e5c:	d0ea      	beq.n	b7e34 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7e5e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7e60:	2210      	movs	r2, #16
   b7e62:	a801      	add	r0, sp, #4
   b7e64:	f001 fdd4 	bl	b9a10 <memset>
                    a.v = 6;
   b7e68:	2306      	movs	r3, #6
   b7e6a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7e6e:	ad01      	add	r5, sp, #4
   b7e70:	f104 0308 	add.w	r3, r4, #8
   b7e74:	3418      	adds	r4, #24
   b7e76:	6818      	ldr	r0, [r3, #0]
   b7e78:	6859      	ldr	r1, [r3, #4]
   b7e7a:	462a      	mov	r2, r5
   b7e7c:	c203      	stmia	r2!, {r0, r1}
   b7e7e:	3308      	adds	r3, #8
   b7e80:	42a3      	cmp	r3, r4
   b7e82:	4615      	mov	r5, r2
   b7e84:	d1f7      	bne.n	b7e76 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7e86:	a901      	add	r1, sp, #4
   b7e88:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7e8a:	ad07      	add	r5, sp, #28
   b7e8c:	f7ff ff18 	bl	b7cc0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7e92:	1d3c      	adds	r4, r7, #4
   b7e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7e96:	682b      	ldr	r3, [r5, #0]
   b7e98:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7e9a:	4649      	mov	r1, r9
   b7e9c:	e7ca      	b.n	b7e34 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7e9e:	9800      	ldr	r0, [sp, #0]
   b7ea0:	f7fe f948 	bl	b6134 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7ea4:	4638      	mov	r0, r7
   b7ea6:	b015      	add	sp, #84	; 0x54
   b7ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7eac <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7eac:	4b02      	ldr	r3, [pc, #8]	; (b7eb8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7eae:	4a03      	ldr	r2, [pc, #12]	; (b7ebc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7eb0:	601a      	str	r2, [r3, #0]
   b7eb2:	2200      	movs	r2, #0
   b7eb4:	605a      	str	r2, [r3, #4]

} // spark
   b7eb6:	4770      	bx	lr
   b7eb8:	2003e648 	.word	0x2003e648
   b7ebc:	000ba618 	.word	0x000ba618

000b7ec0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7ec2:	4606      	mov	r6, r0
   b7ec4:	460d      	mov	r5, r1
  size_t n = 0;
   b7ec6:	188f      	adds	r7, r1, r2
   b7ec8:	2400      	movs	r4, #0
  while (size--) {
   b7eca:	42bd      	cmp	r5, r7
   b7ecc:	d00c      	beq.n	b7ee8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7ece:	6833      	ldr	r3, [r6, #0]
   b7ed0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7ed4:	689b      	ldr	r3, [r3, #8]
   b7ed6:	4630      	mov	r0, r6
   b7ed8:	4798      	blx	r3
     if (chunk>=0)
   b7eda:	1e03      	subs	r3, r0, #0
   b7edc:	db01      	blt.n	b7ee2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7ede:	441c      	add	r4, r3
  while (size--) {
   b7ee0:	e7f3      	b.n	b7eca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7ee2:	2c00      	cmp	r4, #0
   b7ee4:	bf08      	it	eq
   b7ee6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7ee8:	4620      	mov	r0, r4
   b7eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7eec <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7eec:	b513      	push	{r0, r1, r4, lr}
   b7eee:	4604      	mov	r4, r0
    }
   b7ef0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7ef2:	b159      	cbz	r1, b7f0c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7ef4:	9101      	str	r1, [sp, #4]
   b7ef6:	f001 fdd3 	bl	b9aa0 <strlen>
   b7efa:	6823      	ldr	r3, [r4, #0]
   b7efc:	9901      	ldr	r1, [sp, #4]
   b7efe:	68db      	ldr	r3, [r3, #12]
   b7f00:	4602      	mov	r2, r0
   b7f02:	4620      	mov	r0, r4
    }
   b7f04:	b002      	add	sp, #8
   b7f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7f0a:	4718      	bx	r3
    }
   b7f0c:	b002      	add	sp, #8
   b7f0e:	bd10      	pop	{r4, pc}

000b7f10 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b7f10:	b508      	push	{r3, lr}
  return write(str);
   b7f12:	f7ff ffeb 	bl	b7eec <_ZN5Print5writeEPKc>
}
   b7f16:	bd08      	pop	{r3, pc}

000b7f18 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7f18:	6803      	ldr	r3, [r0, #0]
   b7f1a:	689b      	ldr	r3, [r3, #8]
   b7f1c:	4718      	bx	r3

000b7f1e <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   b7f1e:	680a      	ldr	r2, [r1, #0]
 {
   b7f20:	460b      	mov	r3, r1
   return x.printTo(*this);
   b7f22:	6812      	ldr	r2, [r2, #0]
   b7f24:	4601      	mov	r1, r0
   b7f26:	4618      	mov	r0, r3
   b7f28:	4710      	bx	r2

000b7f2a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b7f2a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7f2c:	210d      	movs	r1, #13
{
   b7f2e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7f30:	f7ff fff2 	bl	b7f18 <_ZN5Print5printEc>
  n += print('\n');
   b7f34:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7f36:	4604      	mov	r4, r0
  n += print('\n');
   b7f38:	4628      	mov	r0, r5
   b7f3a:	f7ff ffed 	bl	b7f18 <_ZN5Print5printEc>
  return n;
}
   b7f3e:	4420      	add	r0, r4
   b7f40:	bd38      	pop	{r3, r4, r5, pc}

000b7f42 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7f42:	b538      	push	{r3, r4, r5, lr}
   b7f44:	4605      	mov	r5, r0
  return write(str);
   b7f46:	f7ff ffd1 	bl	b7eec <_ZN5Print5writeEPKc>
   b7f4a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7f4c:	4628      	mov	r0, r5
   b7f4e:	f7ff ffec 	bl	b7f2a <_ZN5Print7printlnEv>
  return n;
}
   b7f52:	4420      	add	r0, r4
   b7f54:	bd38      	pop	{r3, r4, r5, pc}

000b7f56 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7f56:	b530      	push	{r4, r5, lr}
   b7f58:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7f5a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7f5c:	2a01      	cmp	r2, #1
  *str = '\0';
   b7f5e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7f62:	bf98      	it	ls
   b7f64:	220a      	movls	r2, #10
   b7f66:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7f68:	460d      	mov	r5, r1
   b7f6a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7f6e:	fb01 5312 	mls	r3, r1, r2, r5
   b7f72:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7f76:	2b09      	cmp	r3, #9
   b7f78:	bf94      	ite	ls
   b7f7a:	3330      	addls	r3, #48	; 0x30
   b7f7c:	3337      	addhi	r3, #55	; 0x37
   b7f7e:	b2db      	uxtb	r3, r3
  } while(n);
   b7f80:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7f82:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7f86:	d9ef      	bls.n	b7f68 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7f88:	4621      	mov	r1, r4
   b7f8a:	f7ff ffaf 	bl	b7eec <_ZN5Print5writeEPKc>
}
   b7f8e:	b00b      	add	sp, #44	; 0x2c
   b7f90:	bd30      	pop	{r4, r5, pc}

000b7f92 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7f96:	b086      	sub	sp, #24
   b7f98:	af00      	add	r7, sp, #0
   b7f9a:	4605      	mov	r5, r0
   b7f9c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7f9e:	1d38      	adds	r0, r7, #4
   b7fa0:	2114      	movs	r1, #20
{
   b7fa2:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7fa4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7fa6:	f7fe fb0b 	bl	b65c0 <vsnprintf>

    if (n<bufsize)
   b7faa:	2813      	cmp	r0, #19
   b7fac:	d80e      	bhi.n	b7fcc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7fae:	1d39      	adds	r1, r7, #4
   b7fb0:	4628      	mov	r0, r5
   b7fb2:	f7ff ff9b 	bl	b7eec <_ZN5Print5writeEPKc>
   b7fb6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7fb8:	b11e      	cbz	r6, b7fc2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7fba:	4628      	mov	r0, r5
   b7fbc:	f7ff ffb5 	bl	b7f2a <_ZN5Print7printlnEv>
   b7fc0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7fc2:	4620      	mov	r0, r4
   b7fc4:	3718      	adds	r7, #24
   b7fc6:	46bd      	mov	sp, r7
   b7fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7fcc:	f100 0308 	add.w	r3, r0, #8
   b7fd0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7fd4:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7fd6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7fda:	4622      	mov	r2, r4
   b7fdc:	1c41      	adds	r1, r0, #1
   b7fde:	683b      	ldr	r3, [r7, #0]
   b7fe0:	4668      	mov	r0, sp
   b7fe2:	f7fe faed 	bl	b65c0 <vsnprintf>
  return write(str);
   b7fe6:	4669      	mov	r1, sp
   b7fe8:	4628      	mov	r0, r5
   b7fea:	f7ff ff7f 	bl	b7eec <_ZN5Print5writeEPKc>
   b7fee:	4604      	mov	r4, r0
   b7ff0:	46c5      	mov	sp, r8
   b7ff2:	e7e1      	b.n	b7fb8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7ff4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   b7ff4:	b510      	push	{r4, lr}
   b7ff6:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b7ff8:	f7fe fc24 	bl	b6844 <_ZNSt14_Function_baseD1Ev>
   b7ffc:	4620      	mov	r0, r4
   b7ffe:	bd10      	pop	{r4, pc}

000b8000 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b8000:	4803      	ldr	r0, [pc, #12]	; (b8010 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   b8002:	4a04      	ldr	r2, [pc, #16]	; (b8014 <_GLOBAL__sub_I_RGB+0x14>)
   b8004:	4904      	ldr	r1, [pc, #16]	; (b8018 <_GLOBAL__sub_I_RGB+0x18>)
   b8006:	2300      	movs	r3, #0
   b8008:	6083      	str	r3, [r0, #8]
   b800a:	f001 b91b 	b.w	b9244 <__aeabi_atexit>
   b800e:	bf00      	nop
   b8010:	2003e650 	.word	0x2003e650
   b8014:	2003da60 	.word	0x2003da60
   b8018:	000b7ff5 	.word	0x000b7ff5

000b801c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b801c:	2100      	movs	r1, #0
   b801e:	f7fe b911 	b.w	b6244 <hal_spi_release>

000b8022 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b8022:	2100      	movs	r1, #0
   b8024:	f7fe b906 	b.w	b6234 <hal_spi_acquire>

000b8028 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b8028:	b510      	push	{r4, lr}
   b802a:	4604      	mov	r4, r0
   b802c:	4608      	mov	r0, r1
{
    _spi = spi;
   b802e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b8030:	f7fe f8e8 	bl	b6204 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b8034:	2300      	movs	r3, #0
   b8036:	6063      	str	r3, [r4, #4]
}
   b8038:	4620      	mov	r0, r4
   b803a:	bd10      	pop	{r4, pc}

000b803c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b803c:	b513      	push	{r0, r1, r4, lr}
   b803e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b8040:	7800      	ldrb	r0, [r0, #0]
   b8042:	f7ff ffee 	bl	b8022 <_ZN8SPIClass4lockEv.isra.0>
   b8046:	b958      	cbnz	r0, b8060 <_ZN8SPIClass5beginEv+0x24>
   b8048:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b804a:	9001      	str	r0, [sp, #4]
   b804c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8050:	f7fe f8b0 	bl	b61b4 <hal_spi_begin>
        unlock();
   b8054:	9801      	ldr	r0, [sp, #4]
    }
}
   b8056:	b002      	add	sp, #8
   b8058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b805c:	f7ff bfde 	b.w	b801c <_ZN8SPIClass6unlockEv.isra.0>
   b8060:	b002      	add	sp, #8
   b8062:	bd10      	pop	{r4, pc}

000b8064 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b8064:	b513      	push	{r0, r1, r4, lr}
   b8066:	4604      	mov	r4, r0
    if (!lock())
   b8068:	7800      	ldrb	r0, [r0, #0]
{
   b806a:	9101      	str	r1, [sp, #4]
    if (!lock())
   b806c:	f7ff ffd9 	bl	b8022 <_ZN8SPIClass4lockEv.isra.0>
   b8070:	9901      	ldr	r1, [sp, #4]
   b8072:	b948      	cbnz	r0, b8088 <_ZN8SPIClass11setBitOrderEh+0x24>
   b8074:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b8076:	9001      	str	r0, [sp, #4]
   b8078:	f7fe f8a4 	bl	b61c4 <hal_spi_set_bit_order>
        unlock();
   b807c:	9801      	ldr	r0, [sp, #4]
    }
}
   b807e:	b002      	add	sp, #8
   b8080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8084:	f7ff bfca 	b.w	b801c <_ZN8SPIClass6unlockEv.isra.0>
   b8088:	b002      	add	sp, #8
   b808a:	bd10      	pop	{r4, pc}

000b808c <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b808c:	b513      	push	{r0, r1, r4, lr}
   b808e:	4604      	mov	r4, r0
    if (!lock())
   b8090:	7800      	ldrb	r0, [r0, #0]
{
   b8092:	9101      	str	r1, [sp, #4]
    if (!lock())
   b8094:	f7ff ffc5 	bl	b8022 <_ZN8SPIClass4lockEv.isra.0>
   b8098:	9901      	ldr	r1, [sp, #4]
   b809a:	b948      	cbnz	r0, b80b0 <_ZN8SPIClass11setDataModeEh+0x24>
   b809c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b809e:	9001      	str	r0, [sp, #4]
   b80a0:	f7fe f898 	bl	b61d4 <hal_spi_set_data_mode>
        unlock();
   b80a4:	9801      	ldr	r0, [sp, #4]
    }
}
   b80a6:	b002      	add	sp, #8
   b80a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b80ac:	f7ff bfb6 	b.w	b801c <_ZN8SPIClass6unlockEv.isra.0>
   b80b0:	b002      	add	sp, #8
   b80b2:	bd10      	pop	{r4, pc}

000b80b4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b80b4:	0840      	lsrs	r0, r0, #1
{
   b80b6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b80b8:	6018      	str	r0, [r3, #0]
   b80ba:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b80bc:	6818      	ldr	r0, [r3, #0]
   b80be:	4288      	cmp	r0, r1
   b80c0:	b2e5      	uxtb	r5, r4
   b80c2:	d906      	bls.n	b80d2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b80c4:	3401      	adds	r4, #1
   b80c6:	2c08      	cmp	r4, #8
   b80c8:	d002      	beq.n	b80d0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b80ca:	0840      	lsrs	r0, r0, #1
   b80cc:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b80ce:	e7f5      	b.n	b80bc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b80d0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b80d2:	4b02      	ldr	r3, [pc, #8]	; (b80dc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b80d4:	5d5b      	ldrb	r3, [r3, r5]
   b80d6:	7013      	strb	r3, [r2, #0]
}
   b80d8:	bd30      	pop	{r4, r5, pc}
   b80da:	bf00      	nop
   b80dc:	000ba64c 	.word	0x000ba64c

000b80e0 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b80e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b80e4:	b088      	sub	sp, #32
    unsigned clock = 0;
   b80e6:	2300      	movs	r3, #0
{
   b80e8:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b80ea:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b80ec:	9302      	str	r3, [sp, #8]
{
   b80ee:	460e      	mov	r6, r1
   b80f0:	4617      	mov	r7, r2
    if (!lock())
   b80f2:	f7ff ff96 	bl	b8022 <_ZN8SPIClass4lockEv.isra.0>
   b80f6:	4605      	mov	r5, r0
   b80f8:	bb00      	cbnz	r0, b813c <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b80fa:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b80fe:	4601      	mov	r1, r0
   b8100:	2214      	movs	r2, #20
   b8102:	a803      	add	r0, sp, #12
   b8104:	f001 fc84 	bl	b9a10 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b8108:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b810a:	462a      	mov	r2, r5
   b810c:	a903      	add	r1, sp, #12
   b810e:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b8110:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b8114:	f7fe f886 	bl	b6224 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b8118:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b811a:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b811e:	ab02      	add	r3, sp, #8
   b8120:	f10d 0207 	add.w	r2, sp, #7
   b8124:	fb07 f106 	mul.w	r1, r7, r6
   b8128:	f7ff ffc4 	bl	b80b4 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b812c:	7820      	ldrb	r0, [r4, #0]
   b812e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b8132:	f7fe f857 	bl	b61e4 <hal_spi_set_clock_divider>
        unlock();
   b8136:	7820      	ldrb	r0, [r4, #0]
   b8138:	f7ff ff70 	bl	b801c <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b813c:	9802      	ldr	r0, [sp, #8]
   b813e:	b008      	add	sp, #32
   b8140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8144 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b8144:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b8146:	7800      	ldrb	r0, [r0, #0]
   b8148:	f7fe f854 	bl	b61f4 <hal_spi_transfer>
}
   b814c:	b2c0      	uxtb	r0, r0
   b814e:	bd08      	pop	{r3, pc}

000b8150 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8150:	b510      	push	{r4, lr}
   b8152:	4604      	mov	r4, r0
{
	free(buffer);
   b8154:	6800      	ldr	r0, [r0, #0]
   b8156:	f7fe fa1b 	bl	b6590 <free>
}
   b815a:	4620      	mov	r0, r4
   b815c:	bd10      	pop	{r4, pc}

000b815e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b815e:	b510      	push	{r4, lr}
   b8160:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8162:	6800      	ldr	r0, [r0, #0]
   b8164:	b108      	cbz	r0, b816a <_ZN6String10invalidateEv+0xc>
   b8166:	f7fe fa13 	bl	b6590 <free>
	buffer = NULL;
   b816a:	2300      	movs	r3, #0
	capacity = len = 0;
   b816c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8170:	6023      	str	r3, [r4, #0]
}
   b8172:	bd10      	pop	{r4, pc}

000b8174 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8174:	b538      	push	{r3, r4, r5, lr}
   b8176:	4604      	mov	r4, r0
   b8178:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b817a:	6800      	ldr	r0, [r0, #0]
   b817c:	3101      	adds	r1, #1
   b817e:	f7fe fa0f 	bl	b65a0 <realloc>
	if (newbuffer) {
   b8182:	b110      	cbz	r0, b818a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8184:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8188:	2001      	movs	r0, #1
	}
	return 0;
}
   b818a:	bd38      	pop	{r3, r4, r5, pc}

000b818c <_ZN6String7reserveEj>:
{
   b818c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b818e:	6803      	ldr	r3, [r0, #0]
{
   b8190:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8192:	b123      	cbz	r3, b819e <_ZN6String7reserveEj+0x12>
   b8194:	6843      	ldr	r3, [r0, #4]
   b8196:	428b      	cmp	r3, r1
   b8198:	d301      	bcc.n	b819e <_ZN6String7reserveEj+0x12>
   b819a:	2001      	movs	r0, #1
}
   b819c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b819e:	4620      	mov	r0, r4
   b81a0:	f7ff ffe8 	bl	b8174 <_ZN6String12changeBufferEj>
   b81a4:	2800      	cmp	r0, #0
   b81a6:	d0f9      	beq.n	b819c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b81a8:	68a3      	ldr	r3, [r4, #8]
   b81aa:	2b00      	cmp	r3, #0
   b81ac:	d1f5      	bne.n	b819a <_ZN6String7reserveEj+0xe>
   b81ae:	6822      	ldr	r2, [r4, #0]
   b81b0:	7013      	strb	r3, [r2, #0]
   b81b2:	e7f2      	b.n	b819a <_ZN6String7reserveEj+0xe>

000b81b4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b81b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b81b6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b81b8:	4611      	mov	r1, r2
   b81ba:	9201      	str	r2, [sp, #4]
{
   b81bc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b81be:	f7ff ffe5 	bl	b818c <_ZN6String7reserveEj>
   b81c2:	9a01      	ldr	r2, [sp, #4]
   b81c4:	b928      	cbnz	r0, b81d2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b81c6:	4620      	mov	r0, r4
   b81c8:	f7ff ffc9 	bl	b815e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b81cc:	4620      	mov	r0, r4
   b81ce:	b003      	add	sp, #12
   b81d0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b81d2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b81d4:	4629      	mov	r1, r5
   b81d6:	6820      	ldr	r0, [r4, #0]
   b81d8:	f001 fbf2 	bl	b99c0 <memcpy>
	buffer[len] = 0;
   b81dc:	6822      	ldr	r2, [r4, #0]
   b81de:	68a3      	ldr	r3, [r4, #8]
   b81e0:	2100      	movs	r1, #0
   b81e2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b81e4:	e7f2      	b.n	b81cc <_ZN6String4copyEPKcj+0x18>

000b81e6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b81e6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b81e8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b81ea:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b81ee:	4604      	mov	r4, r0
	len = 0;
   b81f0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b81f2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b81f4:	b141      	cbz	r1, b8208 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b81f6:	4608      	mov	r0, r1
   b81f8:	9101      	str	r1, [sp, #4]
   b81fa:	f001 fc51 	bl	b9aa0 <strlen>
   b81fe:	9901      	ldr	r1, [sp, #4]
   b8200:	4602      	mov	r2, r0
   b8202:	4620      	mov	r0, r4
   b8204:	f7ff ffd6 	bl	b81b4 <_ZN6String4copyEPKcj>
}
   b8208:	4620      	mov	r0, r4
   b820a:	b002      	add	sp, #8
   b820c:	bd10      	pop	{r4, pc}

000b820e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b820e:	4288      	cmp	r0, r1
{
   b8210:	b510      	push	{r4, lr}
   b8212:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8214:	d005      	beq.n	b8222 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b8216:	680b      	ldr	r3, [r1, #0]
   b8218:	b12b      	cbz	r3, b8226 <_ZN6StringaSERKS_+0x18>
   b821a:	688a      	ldr	r2, [r1, #8]
   b821c:	4619      	mov	r1, r3
   b821e:	f7ff ffc9 	bl	b81b4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8222:	4620      	mov	r0, r4
   b8224:	bd10      	pop	{r4, pc}
	else invalidate();
   b8226:	f7ff ff9a 	bl	b815e <_ZN6String10invalidateEv>
   b822a:	e7fa      	b.n	b8222 <_ZN6StringaSERKS_+0x14>

000b822c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b822c:	b510      	push	{r4, lr}
	buffer = NULL;
   b822e:	2300      	movs	r3, #0
String::String(const String &value)
   b8230:	4604      	mov	r4, r0
	capacity = 0;
   b8232:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8236:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8238:	7303      	strb	r3, [r0, #12]
	*this = value;
   b823a:	f7ff ffe8 	bl	b820e <_ZN6StringaSERKS_>
}
   b823e:	4620      	mov	r0, r4
   b8240:	bd10      	pop	{r4, pc}

000b8242 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8242:	b513      	push	{r0, r1, r4, lr}
   b8244:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8246:	b159      	cbz	r1, b8260 <_ZN6StringaSEPKc+0x1e>
   b8248:	4608      	mov	r0, r1
   b824a:	9101      	str	r1, [sp, #4]
   b824c:	f001 fc28 	bl	b9aa0 <strlen>
   b8250:	9901      	ldr	r1, [sp, #4]
   b8252:	4602      	mov	r2, r0
   b8254:	4620      	mov	r0, r4
   b8256:	f7ff ffad 	bl	b81b4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b825a:	4620      	mov	r0, r4
   b825c:	b002      	add	sp, #8
   b825e:	bd10      	pop	{r4, pc}
	else invalidate();
   b8260:	f7ff ff7d 	bl	b815e <_ZN6String10invalidateEv>
   b8264:	e7f9      	b.n	b825a <_ZN6StringaSEPKc+0x18>

000b8266 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b8266:	b510      	push	{r4, lr}
   b8268:	4604      	mov	r4, r0
   b826a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b826c:	2300      	movs	r3, #0
	capacity = 0;
   b826e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b8272:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b8274:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b8276:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b8278:	a901      	add	r1, sp, #4
   b827a:	f000 fe61 	bl	b8f40 <itoa>
	*this = buf;
   b827e:	a901      	add	r1, sp, #4
   b8280:	4620      	mov	r0, r4
   b8282:	f7ff ffde 	bl	b8242 <_ZN6StringaSEPKc>
}
   b8286:	4620      	mov	r0, r4
   b8288:	b00a      	add	sp, #40	; 0x28
   b828a:	bd10      	pop	{r4, pc}

000b828c <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b828c:	b510      	push	{r4, lr}
   b828e:	4604      	mov	r4, r0
   b8290:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b8292:	2300      	movs	r3, #0
	capacity = 0;
   b8294:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b8298:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b829a:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b829c:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b829e:	a901      	add	r1, sp, #4
   b82a0:	f000 fde5 	bl	b8e6e <ltoa>
	*this = buf;
   b82a4:	a901      	add	r1, sp, #4
   b82a6:	4620      	mov	r0, r4
   b82a8:	f7ff ffcb 	bl	b8242 <_ZN6StringaSEPKc>
}
   b82ac:	4620      	mov	r0, r4
   b82ae:	b00a      	add	sp, #40	; 0x28
   b82b0:	bd10      	pop	{r4, pc}

000b82b2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b82b2:	b570      	push	{r4, r5, r6, lr}
   b82b4:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b82b6:	460e      	mov	r6, r1
   b82b8:	b909      	cbnz	r1, b82be <_ZN6String6concatEPKcj+0xc>
   b82ba:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b82bc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b82be:	b16a      	cbz	r2, b82dc <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b82c0:	6884      	ldr	r4, [r0, #8]
   b82c2:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b82c4:	4621      	mov	r1, r4
   b82c6:	f7ff ff61 	bl	b818c <_ZN6String7reserveEj>
   b82ca:	2800      	cmp	r0, #0
   b82cc:	d0f5      	beq.n	b82ba <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b82ce:	6828      	ldr	r0, [r5, #0]
   b82d0:	68ab      	ldr	r3, [r5, #8]
   b82d2:	4631      	mov	r1, r6
   b82d4:	4418      	add	r0, r3
   b82d6:	f001 fbdb 	bl	b9a90 <strcpy>
	len = newlen;
   b82da:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b82dc:	2001      	movs	r0, #1
   b82de:	e7ed      	b.n	b82bc <_ZN6String6concatEPKcj+0xa>

000b82e0 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b82e0:	688a      	ldr	r2, [r1, #8]
   b82e2:	6809      	ldr	r1, [r1, #0]
   b82e4:	f7ff bfe5 	b.w	b82b2 <_ZN6String6concatEPKcj>

000b82e8 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b82e8:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b82ea:	2300      	movs	r3, #0
	buf[0] = c;
   b82ec:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b82f0:	2201      	movs	r2, #1
   b82f2:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b82f4:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b82f8:	f7ff ffdb 	bl	b82b2 <_ZN6String6concatEPKcj>
}
   b82fc:	b003      	add	sp, #12
   b82fe:	f85d fb04 	ldr.w	pc, [sp], #4

000b8302 <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
   b8302:	b513      	push	{r0, r1, r4, lr}
	char buf[4];
	itoa(num, buf, 10);
   b8304:	220a      	movs	r2, #10
{
   b8306:	4604      	mov	r4, r0
   b8308:	4608      	mov	r0, r1
	itoa(num, buf, 10);
   b830a:	a901      	add	r1, sp, #4
   b830c:	f000 fe18 	bl	b8f40 <itoa>
	return concat(buf, strlen(buf));
   b8310:	a801      	add	r0, sp, #4
   b8312:	f001 fbc5 	bl	b9aa0 <strlen>
   b8316:	a901      	add	r1, sp, #4
   b8318:	4602      	mov	r2, r0
   b831a:	4620      	mov	r0, r4
   b831c:	f7ff ffc9 	bl	b82b2 <_ZN6String6concatEPKcj>
}
   b8320:	b002      	add	sp, #8
   b8322:	bd10      	pop	{r4, pc}

000b8324 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b8324:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b8326:	688a      	ldr	r2, [r1, #8]
   b8328:	6809      	ldr	r1, [r1, #0]
{
   b832a:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b832c:	f7ff ffc1 	bl	b82b2 <_ZN6String6concatEPKcj>
   b8330:	b910      	cbnz	r0, b8338 <_ZplRK15StringSumHelperRK6String+0x14>
   b8332:	4620      	mov	r0, r4
   b8334:	f7ff ff13 	bl	b815e <_ZN6String10invalidateEv>
	return a;
}
   b8338:	4620      	mov	r0, r4
   b833a:	bd10      	pop	{r4, pc}

000b833c <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b833c:	b513      	push	{r0, r1, r4, lr}
   b833e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8340:	b929      	cbnz	r1, b834e <_ZplRK15StringSumHelperPKc+0x12>
   b8342:	4620      	mov	r0, r4
   b8344:	f7ff ff0b 	bl	b815e <_ZN6String10invalidateEv>
	return a;
}
   b8348:	4620      	mov	r0, r4
   b834a:	b002      	add	sp, #8
   b834c:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b834e:	4608      	mov	r0, r1
   b8350:	9101      	str	r1, [sp, #4]
   b8352:	f001 fba5 	bl	b9aa0 <strlen>
   b8356:	9901      	ldr	r1, [sp, #4]
   b8358:	4602      	mov	r2, r0
   b835a:	4620      	mov	r0, r4
   b835c:	f7ff ffa9 	bl	b82b2 <_ZN6String6concatEPKcj>
   b8360:	2800      	cmp	r0, #0
   b8362:	d0ee      	beq.n	b8342 <_ZplRK15StringSumHelperPKc+0x6>
   b8364:	e7f0      	b.n	b8348 <_ZplRK15StringSumHelperPKc+0xc>

000b8366 <_ZplRK15StringSumHelperh>:
	if (!a.concat(c)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
   b8366:	b510      	push	{r4, lr}
   b8368:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   b836a:	f7ff ffca 	bl	b8302 <_ZN6String6concatEh>
   b836e:	b910      	cbnz	r0, b8376 <_ZplRK15StringSumHelperh+0x10>
   b8370:	4620      	mov	r0, r4
   b8372:	f7ff fef4 	bl	b815e <_ZN6String10invalidateEv>
	return a;
}
   b8376:	4620      	mov	r0, r4
   b8378:	bd10      	pop	{r4, pc}

000b837a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b837a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b837c:	6882      	ldr	r2, [r0, #8]
   b837e:	b93a      	cbnz	r2, b8390 <_ZNK6String6equalsEPKc+0x16>
   b8380:	b121      	cbz	r1, b838c <_ZNK6String6equalsEPKc+0x12>
   b8382:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b8384:	fab0 f080 	clz	r0, r0
   b8388:	0940      	lsrs	r0, r0, #5
   b838a:	e000      	b.n	b838e <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b838c:	2001      	movs	r0, #1
}
   b838e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b8390:	6800      	ldr	r0, [r0, #0]
   b8392:	b909      	cbnz	r1, b8398 <_ZNK6String6equalsEPKc+0x1e>
   b8394:	7800      	ldrb	r0, [r0, #0]
   b8396:	e7f5      	b.n	b8384 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b8398:	f001 fb70 	bl	b9a7c <strcmp>
   b839c:	e7f2      	b.n	b8384 <_ZNK6String6equalsEPKc+0xa>

000b839e <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b839e:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b83a0:	6883      	ldr	r3, [r0, #8]
   b83a2:	4293      	cmp	r3, r2
   b83a4:	d907      	bls.n	b83b6 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b83a6:	6804      	ldr	r4, [r0, #0]
   b83a8:	6809      	ldr	r1, [r1, #0]
   b83aa:	18a0      	adds	r0, r4, r2
   b83ac:	f001 fb9f 	bl	b9aee <strstr>
	if (found == NULL) return -1;
   b83b0:	b108      	cbz	r0, b83b6 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b83b2:	1b00      	subs	r0, r0, r4
}
   b83b4:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b83b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b83ba:	e7fb      	b.n	b83b4 <_ZNK6String7indexOfERKS_j+0x16>

000b83bc <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b83bc:	2200      	movs	r2, #0
   b83be:	f7ff bfee 	b.w	b839e <_ZNK6String7indexOfERKS_j>
	...

000b83c4 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b83c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b83c6:	429a      	cmp	r2, r3
{
   b83c8:	460f      	mov	r7, r1
   b83ca:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b83cc:	490c      	ldr	r1, [pc, #48]	; (b8400 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b83ce:	bf88      	it	hi
   b83d0:	4613      	movhi	r3, r2
{
   b83d2:	4614      	mov	r4, r2
   b83d4:	4606      	mov	r6, r0
	if (left > right) {
   b83d6:	bf84      	itt	hi
   b83d8:	462c      	movhi	r4, r5
   b83da:	461d      	movhi	r5, r3
	String out;
   b83dc:	f7ff ff03 	bl	b81e6 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b83e0:	68bb      	ldr	r3, [r7, #8]
   b83e2:	42a3      	cmp	r3, r4
   b83e4:	d30a      	bcc.n	b83fc <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b83e6:	6839      	ldr	r1, [r7, #0]
   b83e8:	42ab      	cmp	r3, r5
   b83ea:	bf94      	ite	ls
   b83ec:	ebc4 0203 	rsbls	r2, r4, r3
   b83f0:	ebc4 0205 	rsbhi	r2, r4, r5
   b83f4:	4421      	add	r1, r4
   b83f6:	4630      	mov	r0, r6
   b83f8:	f7ff fedc 	bl	b81b4 <_ZN6String4copyEPKcj>
	return out;
}
   b83fc:	4630      	mov	r0, r6
   b83fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8400:	000b9f86 	.word	0x000b9f86

000b8404 <_ZNK6String9substringEj>:
{
   b8404:	b510      	push	{r4, lr}
   b8406:	4604      	mov	r4, r0
	return substring(left, len);
   b8408:	688b      	ldr	r3, [r1, #8]
   b840a:	f7ff ffdb 	bl	b83c4 <_ZNK6String9substringEjj>
}
   b840e:	4620      	mov	r0, r4
   b8410:	bd10      	pop	{r4, pc}

000b8412 <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
   b8412:	b538      	push	{r3, r4, r5, lr}
   b8414:	4604      	mov	r4, r0
   b8416:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
   b8418:	68a3      	ldr	r3, [r4, #8]
   b841a:	428b      	cmp	r3, r1
   b841c:	d911      	bls.n	b8442 <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
   b841e:	b182      	cbz	r2, b8442 <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
   b8420:	4411      	add	r1, r2
   b8422:	428b      	cmp	r3, r1
   b8424:	bf38      	it	cc
   b8426:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
   b8428:	6825      	ldr	r5, [r4, #0]
	len = len - count;
   b842a:	1a99      	subs	r1, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
   b842c:	1813      	adds	r3, r2, r0
	len = len - count;
   b842e:	60a1      	str	r1, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
   b8430:	1a0a      	subs	r2, r1, r0
   b8432:	18e9      	adds	r1, r5, r3
   b8434:	4428      	add	r0, r5
   b8436:	f001 fad1 	bl	b99dc <memmove>
	buffer[len] = 0;
   b843a:	6822      	ldr	r2, [r4, #0]
   b843c:	68a3      	ldr	r3, [r4, #8]
   b843e:	2100      	movs	r1, #0
   b8440:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   b8442:	4620      	mov	r0, r4
   b8444:	bd38      	pop	{r3, r4, r5, pc}

000b8446 <_ZN6String6removeEj>:
        int count = len - index;
   b8446:	6882      	ldr	r2, [r0, #8]
        return remove(index, count);
   b8448:	1a52      	subs	r2, r2, r1
   b844a:	f7ff bfe2 	b.w	b8412 <_ZN6String6removeEjj>

000b844e <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b844e:	b507      	push	{r0, r1, r2, lr}
   b8450:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8452:	2100      	movs	r1, #0
{
   b8454:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8456:	9100      	str	r1, [sp, #0]
   b8458:	2001      	movs	r0, #1
   b845a:	218c      	movs	r1, #140	; 0x8c
   b845c:	f7fd ffe6 	bl	b642c <system_reset>
}
   b8460:	b003      	add	sp, #12
   b8462:	f85d fb04 	ldr.w	pc, [sp], #4

000b8466 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b8466:	4601      	mov	r1, r0
    reset(0, flags);
   b8468:	2000      	movs	r0, #0
   b846a:	f7ff bff0 	b.w	b844e <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b846e <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b846e:	2000      	movs	r0, #0
   b8470:	f7ff bff9 	b.w	b8466 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000b8474 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   b8474:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8476:	4b09      	ldr	r3, [pc, #36]	; (b849c <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8478:	4c09      	ldr	r4, [pc, #36]	; (b84a0 <_GLOBAL__sub_I_System+0x2c>)
   b847a:	2202      	movs	r2, #2
   b847c:	601a      	str	r2, [r3, #0]
   b847e:	2000      	movs	r0, #0
    SleepResult() {}
   b8480:	4b08      	ldr	r3, [pc, #32]	; (b84a4 <_GLOBAL__sub_I_System+0x30>)
   b8482:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8484:	e9c4 0000 	strd	r0, r0, [r4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8488:	f7fd ff84 	bl	b6394 <set_system_mode>
SystemClass System;
   b848c:	4620      	mov	r0, r4
   b848e:	4a06      	ldr	r2, [pc, #24]	; (b84a8 <_GLOBAL__sub_I_System+0x34>)
   b8490:	4906      	ldr	r1, [pc, #24]	; (b84ac <_GLOBAL__sub_I_System+0x38>)
   b8492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   b8496:	f000 bed5 	b.w	b9244 <__aeabi_atexit>
   b849a:	bf00      	nop
   b849c:	2003e66c 	.word	0x2003e66c
   b84a0:	2003e660 	.word	0x2003e660
   b84a4:	ffff0000 	.word	0xffff0000
   b84a8:	2003da60 	.word	0x2003da60
   b84ac:	000b40df 	.word	0x000b40df

000b84b0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b84b0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b84b2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b84b4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b84b8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b84ba:	2201      	movs	r2, #1
   b84bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b84c0:	f10d 0107 	add.w	r1, sp, #7
   b84c4:	47a0      	blx	r4
}
   b84c6:	b002      	add	sp, #8
   b84c8:	bd10      	pop	{r4, pc}

000b84ca <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b84ca:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b84cc:	6803      	ldr	r3, [r0, #0]
   b84ce:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b84d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b84d4:	46a4      	mov	ip, r4
}
   b84d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b84da:	4760      	bx	ip

000b84dc <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b84dc:	b513      	push	{r0, r1, r4, lr}
   b84de:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b84e0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b84e2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b84e6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b84e8:	f10d 0107 	add.w	r1, sp, #7
   b84ec:	2201      	movs	r2, #1
   b84ee:	47a0      	blx	r4
}
   b84f0:	b002      	add	sp, #8
   b84f2:	bd10      	pop	{r4, pc}

000b84f4 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b84f4:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b84f6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b84f8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b84fc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8500:	429a      	cmp	r2, r3
int TCPClient::read() {
   b8502:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8504:	d008      	beq.n	b8518 <_ZN9TCPClient4readEv+0x24>
   b8506:	6963      	ldr	r3, [r4, #20]
   b8508:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b850c:	1c51      	adds	r1, r2, #1
   b850e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b8512:	4413      	add	r3, r2
   b8514:	7918      	ldrb	r0, [r3, #4]
}
   b8516:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8518:	6803      	ldr	r3, [r0, #0]
   b851a:	691b      	ldr	r3, [r3, #16]
   b851c:	4798      	blx	r3
   b851e:	2800      	cmp	r0, #0
   b8520:	d1f1      	bne.n	b8506 <_ZN9TCPClient4readEv+0x12>
   b8522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8526:	e7f6      	b.n	b8516 <_ZN9TCPClient4readEv+0x22>

000b8528 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b8528:	4770      	bx	lr

000b852a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b852a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b852c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b852e:	43c0      	mvns	r0, r0
   b8530:	0fc0      	lsrs	r0, r0, #31
   b8532:	4770      	bx	lr

000b8534 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8534:	4770      	bx	lr
	...

000b8538 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8538:	4b06      	ldr	r3, [pc, #24]	; (b8554 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b853a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b853c:	b510      	push	{r4, lr}
   b853e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8542:	d005      	beq.n	b8550 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8544:	4608      	mov	r0, r1
   b8546:	f000 fe89 	bl	b925c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b854a:	2800      	cmp	r0, #0
   b854c:	bf08      	it	eq
   b854e:	2400      	moveq	r4, #0
      }
   b8550:	4620      	mov	r0, r4
   b8552:	bd10      	pop	{r4, pc}
   b8554:	000ba554 	.word	0x000ba554

000b8558 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8558:	b510      	push	{r4, lr}
   b855a:	21ac      	movs	r1, #172	; 0xac
   b855c:	4604      	mov	r4, r0
   b855e:	f000 fe76 	bl	b924e <_ZdlPvj>
   b8562:	4620      	mov	r0, r4
   b8564:	bd10      	pop	{r4, pc}

000b8566 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b8566:	21ac      	movs	r1, #172	; 0xac
   b8568:	f000 be71 	b.w	b924e <_ZdlPvj>

000b856c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b856c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8570:	f04f 0800 	mov.w	r8, #0
   b8574:	b086      	sub	sp, #24
   b8576:	461c      	mov	r4, r3
   b8578:	f8c0 8004 	str.w	r8, [r0, #4]
   b857c:	4605      	mov	r5, r0
   b857e:	460e      	mov	r6, r1
   b8580:	4617      	mov	r7, r2
    struct timeval tv = {};
   b8582:	4641      	mov	r1, r8
   b8584:	2210      	movs	r2, #16
   b8586:	a802      	add	r0, sp, #8
   b8588:	f001 fa42 	bl	b9a10 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b858c:	1c63      	adds	r3, r4, #1
   b858e:	d009      	beq.n	b85a4 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b8590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8594:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b8598:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b859c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b85a0:	435c      	muls	r4, r3
   b85a2:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b85a4:	6968      	ldr	r0, [r5, #20]
   b85a6:	2310      	movs	r3, #16
   b85a8:	9300      	str	r3, [sp, #0]
   b85aa:	6800      	ldr	r0, [r0, #0]
   b85ac:	ab02      	add	r3, sp, #8
   b85ae:	f241 0205 	movw	r2, #4101	; 0x1005
   b85b2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b85b6:	f7fd fdcd 	bl	b6154 <sock_setsockopt>
    if (ret < 0) {
   b85ba:	2800      	cmp	r0, #0
   b85bc:	da07      	bge.n	b85ce <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b85be:	f7fe f80f 	bl	b65e0 <__errno>
   b85c2:	6803      	ldr	r3, [r0, #0]
   b85c4:	606b      	str	r3, [r5, #4]
        return 0;
   b85c6:	2000      	movs	r0, #0
}
   b85c8:	b006      	add	sp, #24
   b85ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b85ce:	6968      	ldr	r0, [r5, #20]
   b85d0:	2300      	movs	r3, #0
   b85d2:	6800      	ldr	r0, [r0, #0]
   b85d4:	463a      	mov	r2, r7
   b85d6:	4631      	mov	r1, r6
   b85d8:	f7fd fddc 	bl	b6194 <sock_send>
    if (ret < 0) {
   b85dc:	1e03      	subs	r3, r0, #0
   b85de:	dbee      	blt.n	b85be <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b85e0:	4618      	mov	r0, r3
   b85e2:	e7f1      	b.n	b85c8 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b85e4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b85e4:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b85e6:	6984      	ldr	r4, [r0, #24]
   b85e8:	4b0a      	ldr	r3, [pc, #40]	; (b8614 <_ZN9TCPClientD1Ev+0x30>)
   b85ea:	6003      	str	r3, [r0, #0]
   b85ec:	4605      	mov	r5, r0
   b85ee:	b17c      	cbz	r4, b8610 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b85f0:	6863      	ldr	r3, [r4, #4]
   b85f2:	3b01      	subs	r3, #1
   b85f4:	6063      	str	r3, [r4, #4]
   b85f6:	b95b      	cbnz	r3, b8610 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b85f8:	6823      	ldr	r3, [r4, #0]
   b85fa:	4620      	mov	r0, r4
   b85fc:	689b      	ldr	r3, [r3, #8]
   b85fe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8600:	68a3      	ldr	r3, [r4, #8]
   b8602:	3b01      	subs	r3, #1
   b8604:	60a3      	str	r3, [r4, #8]
   b8606:	b91b      	cbnz	r3, b8610 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b8608:	6823      	ldr	r3, [r4, #0]
   b860a:	4620      	mov	r0, r4
   b860c:	68db      	ldr	r3, [r3, #12]
   b860e:	4798      	blx	r3
   b8610:	4628      	mov	r0, r5
   b8612:	bd38      	pop	{r3, r4, r5, pc}
   b8614:	000ba690 	.word	0x000ba690

000b8618 <_ZN9TCPClientD0Ev>:
   b8618:	b510      	push	{r4, lr}
   b861a:	4604      	mov	r4, r0
   b861c:	f7ff ffe2 	bl	b85e4 <_ZN9TCPClientD1Ev>
   b8620:	4620      	mov	r0, r4
   b8622:	211c      	movs	r1, #28
   b8624:	f000 fe13 	bl	b924e <_ZdlPvj>
   b8628:	4620      	mov	r0, r4
   b862a:	bd10      	pop	{r4, pc}

000b862c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b862c:	b530      	push	{r4, r5, lr}
   b862e:	b087      	sub	sp, #28
   b8630:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b8632:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b8634:	4668      	mov	r0, sp
   b8636:	f7ff fb79 	bl	b7d2c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b863a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b863c:	3404      	adds	r4, #4
   b863e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8640:	682b      	ldr	r3, [r5, #0]
   b8642:	7023      	strb	r3, [r4, #0]
    }
   b8644:	b007      	add	sp, #28
   b8646:	bd30      	pop	{r4, r5, pc}

000b8648 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b8648:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b864a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b864c:	4b05      	ldr	r3, [pc, #20]	; (b8664 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b864e:	4604      	mov	r4, r0
   b8650:	358c      	adds	r5, #140	; 0x8c
   b8652:	f844 3b04 	str.w	r3, [r4], #4
   b8656:	4606      	mov	r6, r0
   b8658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b865a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b865c:	682b      	ldr	r3, [r5, #0]
   b865e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b8660:	4630      	mov	r0, r6
   b8662:	bd70      	pop	{r4, r5, r6, pc}
   b8664:	000ba600 	.word	0x000ba600

000b8668 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b866c:	4698      	mov	r8, r3
    stop();
   b866e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8670:	b093      	sub	sp, #76	; 0x4c
   b8672:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b8674:	2400      	movs	r4, #0
    stop();
   b8676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8678:	4606      	mov	r6, r0
   b867a:	4617      	mov	r7, r2
    stop();
   b867c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b867e:	4628      	mov	r0, r5
   b8680:	466b      	mov	r3, sp
   b8682:	4622      	mov	r2, r4
   b8684:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b8686:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8688:	f7fd fd5c 	bl	b6144 <netdb_getaddrinfo>
   b868c:	4605      	mov	r5, r0
   b868e:	2800      	cmp	r0, #0
   b8690:	d163      	bne.n	b875a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b8692:	9b00      	ldr	r3, [sp, #0]
   b8694:	2b00      	cmp	r3, #0
   b8696:	d04b      	beq.n	b8730 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8698:	695b      	ldr	r3, [r3, #20]
   b869a:	2b00      	cmp	r3, #0
   b869c:	d048      	beq.n	b8730 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b869e:	a806      	add	r0, sp, #24
   b86a0:	f7ff fb00 	bl	b7ca4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b86a4:	9b00      	ldr	r3, [sp, #0]
   b86a6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b86a8:	7863      	ldrb	r3, [r4, #1]
   b86aa:	2b02      	cmp	r3, #2
   b86ac:	d104      	bne.n	b86b8 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b86ae:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b86b0:	a806      	add	r0, sp, #24
   b86b2:	f7ff ffbb 	bl	b862c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b86b6:	e026      	b.n	b8706 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b86b8:	2b0a      	cmp	r3, #10
   b86ba:	d124      	bne.n	b8706 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b86bc:	2211      	movs	r2, #17
   b86be:	4629      	mov	r1, r5
   b86c0:	a801      	add	r0, sp, #4
   b86c2:	f001 f9a5 	bl	b9a10 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b86c6:	68a3      	ldr	r3, [r4, #8]
   b86c8:	2b00      	cmp	r3, #0
   b86ca:	d038      	beq.n	b873e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b86cc:	f104 0308 	add.w	r3, r4, #8
   b86d0:	f10d 0c04 	add.w	ip, sp, #4
   b86d4:	3418      	adds	r4, #24
   b86d6:	6818      	ldr	r0, [r3, #0]
   b86d8:	6859      	ldr	r1, [r3, #4]
   b86da:	4662      	mov	r2, ip
   b86dc:	c203      	stmia	r2!, {r0, r1}
   b86de:	3308      	adds	r3, #8
   b86e0:	42a3      	cmp	r3, r4
   b86e2:	4694      	mov	ip, r2
   b86e4:	d1f7      	bne.n	b86d6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b86e6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b86e8:	a901      	add	r1, sp, #4
   b86ea:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b86ec:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b86f0:	f7ff fae6 	bl	b7cc0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b86f4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b86f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b86fc:	ac07      	add	r4, sp, #28
   b86fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8700:	f8dc 3000 	ldr.w	r3, [ip]
   b8704:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b8706:	a806      	add	r0, sp, #24
   b8708:	f7ff faec 	bl	b7ce4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b870c:	b180      	cbz	r0, b8730 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b870e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b8710:	ad07      	add	r5, sp, #28
   b8712:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b8716:	4b12      	ldr	r3, [pc, #72]	; (b8760 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b8718:	930c      	str	r3, [sp, #48]	; 0x30
   b871a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b871c:	ac0d      	add	r4, sp, #52	; 0x34
   b871e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8720:	682b      	ldr	r3, [r5, #0]
   b8722:	7023      	strb	r3, [r4, #0]
   b8724:	463a      	mov	r2, r7
   b8726:	4643      	mov	r3, r8
   b8728:	a90c      	add	r1, sp, #48	; 0x30
   b872a:	4630      	mov	r0, r6
   b872c:	47c8      	blx	r9
   b872e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b8730:	9800      	ldr	r0, [sp, #0]
   b8732:	f7fd fcff 	bl	b6134 <netdb_freeaddrinfo>
}
   b8736:	4628      	mov	r0, r5
   b8738:	b013      	add	sp, #76	; 0x4c
   b873a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b873e:	68e3      	ldr	r3, [r4, #12]
   b8740:	2b00      	cmp	r3, #0
   b8742:	d1c3      	bne.n	b86cc <_ZN9TCPClient7connectEPKctm+0x64>
   b8744:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b8748:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b874c:	f7fd fce2 	bl	b6114 <inet_htonl>
   b8750:	4581      	cmp	r9, r0
   b8752:	d1bb      	bne.n	b86cc <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b8754:	f104 0114 	add.w	r1, r4, #20
   b8758:	e7aa      	b.n	b86b0 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b875a:	4625      	mov	r5, r4
   b875c:	e7e8      	b.n	b8730 <_ZN9TCPClient7connectEPKctm+0xc8>
   b875e:	bf00      	nop
   b8760:	000ba600 	.word	0x000ba600

000b8764 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b8764:	b538      	push	{r3, r4, r5, lr}
   b8766:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b8768:	681a      	ldr	r2, [r3, #0]
   b876a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b876c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b876e:	da10      	bge.n	b8792 <_ZN9TCPClient9connectedEv+0x2e>
   b8770:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8774:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8778:	429a      	cmp	r2, r3
   b877a:	d10a      	bne.n	b8792 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b877c:	6803      	ldr	r3, [r0, #0]
   b877e:	691b      	ldr	r3, [r3, #16]
   b8780:	4798      	blx	r3
        if (!rv) {
   b8782:	4604      	mov	r4, r0
   b8784:	b928      	cbnz	r0, b8792 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b8786:	682b      	ldr	r3, [r5, #0]
   b8788:	4628      	mov	r0, r5
   b878a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b878c:	4798      	blx	r3
        rv = available();
   b878e:	4620      	mov	r0, r4
}
   b8790:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b8792:	2001      	movs	r0, #1
   b8794:	e7fc      	b.n	b8790 <_ZN9TCPClient9connectedEv+0x2c>

000b8796 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b8796:	b510      	push	{r4, lr}
   b8798:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b879a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b879e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b87a2:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b87a4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b87a6:	d005      	beq.n	b87b4 <_ZN9TCPClient4peekEv+0x1e>
   b87a8:	6963      	ldr	r3, [r4, #20]
   b87aa:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b87ae:	4413      	add	r3, r2
   b87b0:	7918      	ldrb	r0, [r3, #4]
}
   b87b2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b87b4:	6803      	ldr	r3, [r0, #0]
   b87b6:	691b      	ldr	r3, [r3, #16]
   b87b8:	4798      	blx	r3
   b87ba:	2800      	cmp	r0, #0
   b87bc:	d1f4      	bne.n	b87a8 <_ZN9TCPClient4peekEv+0x12>
   b87be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b87c2:	e7f6      	b.n	b87b2 <_ZN9TCPClient4peekEv+0x1c>

000b87c4 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b87c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b87c6:	6943      	ldr	r3, [r0, #20]
   b87c8:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b87ca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b87ce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b87d2:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b87d4:	4605      	mov	r5, r0
   b87d6:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b87d8:	d016      	beq.n	b8808 <_ZN9TCPClient4readEPhj+0x44>
   b87da:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b87dc:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b87e0:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b87e4:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b87e6:	42bc      	cmp	r4, r7
   b87e8:	bf28      	it	cs
   b87ea:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b87ec:	3304      	adds	r3, #4
   b87ee:	4622      	mov	r2, r4
   b87f0:	4419      	add	r1, r3
   b87f2:	4630      	mov	r0, r6
   b87f4:	f001 f8e4 	bl	b99c0 <memcpy>
   b87f8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b87fa:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b87fe:	4423      	add	r3, r4
   b8800:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b8804:	4620      	mov	r0, r4
   b8806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b8808:	6803      	ldr	r3, [r0, #0]
   b880a:	691b      	ldr	r3, [r3, #16]
   b880c:	4798      	blx	r3
   b880e:	2800      	cmp	r0, #0
   b8810:	d1e3      	bne.n	b87da <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b8812:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b8816:	e7f5      	b.n	b8804 <_ZN9TCPClient4readEPhj+0x40>

000b8818 <_ZN9TCPClient12flush_bufferEv>:
   b8818:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b881a:	2300      	movs	r3, #0
   b881c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b8820:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b8822:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b8826:	4770      	bx	lr

000b8828 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b882c:	461f      	mov	r7, r3
    stop();
   b882e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8830:	460c      	mov	r4, r1
    stop();
   b8832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8834:	b08a      	sub	sp, #40	; 0x28
   b8836:	4605      	mov	r5, r0
   b8838:	4616      	mov	r6, r2
    stop();
   b883a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b883c:	7d23      	ldrb	r3, [r4, #20]
   b883e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b8842:	2b04      	cmp	r3, #4
   b8844:	bf0c      	ite	eq
   b8846:	2002      	moveq	r0, #2
   b8848:	200a      	movne	r0, #10
   b884a:	2206      	movs	r2, #6
   b884c:	2101      	movs	r1, #1
   b884e:	f7fd fca9 	bl	b61a4 <sock_socket>
   b8852:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b8856:	696b      	ldr	r3, [r5, #20]
   b8858:	681b      	ldr	r3, [r3, #0]
   b885a:	2b00      	cmp	r3, #0
   b885c:	da08      	bge.n	b8870 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b885e:	682b      	ldr	r3, [r5, #0]
   b8860:	4628      	mov	r0, r5
   b8862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8864:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b8866:	4798      	blx	r3
}
   b8868:	4620      	mov	r0, r4
   b886a:	b00a      	add	sp, #40	; 0x28
   b886c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b8870:	4628      	mov	r0, r5
   b8872:	f7ff ffd1 	bl	b8818 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b8876:	b1b7      	cbz	r7, b88a6 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b8878:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b887a:	a903      	add	r1, sp, #12
   b887c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b887e:	9303      	str	r3, [sp, #12]
   b8880:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8884:	f7fd fc36 	bl	b60f4 <if_index_to_name>
   b8888:	2800      	cmp	r0, #0
   b888a:	d1e8      	bne.n	b885e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b888c:	6968      	ldr	r0, [r5, #20]
   b888e:	2306      	movs	r3, #6
   b8890:	9300      	str	r3, [sp, #0]
   b8892:	6800      	ldr	r0, [r0, #0]
   b8894:	ab03      	add	r3, sp, #12
   b8896:	f241 020b 	movw	r2, #4107	; 0x100b
   b889a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b889e:	f7fd fc59 	bl	b6154 <sock_setsockopt>
   b88a2:	2800      	cmp	r0, #0
   b88a4:	d1db      	bne.n	b885e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b88a6:	221c      	movs	r2, #28
   b88a8:	2100      	movs	r1, #0
   b88aa:	a803      	add	r0, sp, #12
   b88ac:	f001 f8b0 	bl	b9a10 <memset>
    if (ip.version() == 4) {
   b88b0:	7d23      	ldrb	r3, [r4, #20]
   b88b2:	2b04      	cmp	r3, #4
   b88b4:	d11d      	bne.n	b88f2 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b88b6:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b88ba:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b88bc:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b88c0:	f7fd fc30 	bl	b6124 <inet_htons>
   b88c4:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b88c8:	6860      	ldr	r0, [r4, #4]
   b88ca:	f7fd fc23 	bl	b6114 <inet_htonl>
   b88ce:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b88d0:	696b      	ldr	r3, [r5, #20]
   b88d2:	221c      	movs	r2, #28
   b88d4:	6818      	ldr	r0, [r3, #0]
   b88d6:	a903      	add	r1, sp, #12
   b88d8:	f7fd fc4c 	bl	b6174 <sock_connect>
   b88dc:	2800      	cmp	r0, #0
   b88de:	d1be      	bne.n	b885e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b88e0:	3404      	adds	r4, #4
   b88e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b88e4:	696d      	ldr	r5, [r5, #20]
   b88e6:	358c      	adds	r5, #140	; 0x8c
   b88e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b88ea:	6823      	ldr	r3, [r4, #0]
   b88ec:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b88ee:	2401      	movs	r4, #1
   b88f0:	e7ba      	b.n	b8868 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b88f2:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b88f6:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b88f8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b88fc:	f7fd fc12 	bl	b6124 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8900:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b8902:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8906:	1d23      	adds	r3, r4, #4
   b8908:	f104 0714 	add.w	r7, r4, #20
   b890c:	6818      	ldr	r0, [r3, #0]
   b890e:	6859      	ldr	r1, [r3, #4]
   b8910:	4632      	mov	r2, r6
   b8912:	c203      	stmia	r2!, {r0, r1}
   b8914:	3308      	adds	r3, #8
   b8916:	42bb      	cmp	r3, r7
   b8918:	4616      	mov	r6, r2
   b891a:	d1f7      	bne.n	b890c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b891c:	e7d8      	b.n	b88d0 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b8920 <_ZN9TCPClient9availableEv>:
{
   b8920:	b530      	push	{r4, r5, lr}
   b8922:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b8924:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b8928:	b08b      	sub	sp, #44	; 0x2c
   b892a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b892c:	b12b      	cbz	r3, b893a <_ZN9TCPClient9availableEv+0x1a>
   b892e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b8932:	429a      	cmp	r2, r3
   b8934:	d101      	bne.n	b893a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b8936:	f7ff ff6f 	bl	b8818 <_ZN9TCPClient12flush_bufferEv>
   b893a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b893c:	6808      	ldr	r0, [r1, #0]
   b893e:	2800      	cmp	r0, #0
   b8940:	db18      	blt.n	b8974 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b8942:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b8946:	2d7f      	cmp	r5, #127	; 0x7f
   b8948:	d814      	bhi.n	b8974 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b894a:	3104      	adds	r1, #4
   b894c:	2308      	movs	r3, #8
   b894e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b8952:	4429      	add	r1, r5
   b8954:	f7fd fc16 	bl	b6184 <sock_recv>
            if (ret > 0) {
   b8958:	2800      	cmp	r0, #0
   b895a:	dd13      	ble.n	b8984 <_ZN9TCPClient9availableEv+0x64>
   b895c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b895e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8962:	b90a      	cbnz	r2, b8968 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b8964:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b8968:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b896a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b896e:	4410      	add	r0, r2
   b8970:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b8974:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b8976:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b897a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b897e:	1ac0      	subs	r0, r0, r3
   b8980:	b00b      	add	sp, #44	; 0x2c
   b8982:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b8984:	f7fd fe2c 	bl	b65e0 <__errno>
   b8988:	6803      	ldr	r3, [r0, #0]
   b898a:	2b0b      	cmp	r3, #11
   b898c:	d0f2      	beq.n	b8974 <_ZN9TCPClient9availableEv+0x54>
   b898e:	f7fd fe27 	bl	b65e0 <__errno>
   b8992:	6803      	ldr	r3, [r0, #0]
   b8994:	2b0b      	cmp	r3, #11
   b8996:	d0ed      	beq.n	b8974 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b8998:	2320      	movs	r3, #32
   b899a:	2500      	movs	r5, #0
   b899c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b89a0:	f7fd fe1e 	bl	b65e0 <__errno>
   b89a4:	6803      	ldr	r3, [r0, #0]
   b89a6:	9301      	str	r3, [sp, #4]
   b89a8:	4b08      	ldr	r3, [pc, #32]	; (b89cc <_ZN9TCPClient9availableEv+0xac>)
   b89aa:	4909      	ldr	r1, [pc, #36]	; (b89d0 <_ZN9TCPClient9availableEv+0xb0>)
   b89ac:	9300      	str	r3, [sp, #0]
   b89ae:	aa02      	add	r2, sp, #8
   b89b0:	462b      	mov	r3, r5
   b89b2:	2032      	movs	r0, #50	; 0x32
   b89b4:	f7fd fcde 	bl	b6374 <log_message>
                    sock_close(d_->sock);
   b89b8:	6963      	ldr	r3, [r4, #20]
   b89ba:	6818      	ldr	r0, [r3, #0]
   b89bc:	f7fd fbd2 	bl	b6164 <sock_close>
   b89c0:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b89c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b89c6:	601a      	str	r2, [r3, #0]
   b89c8:	e7d4      	b.n	b8974 <_ZN9TCPClient9availableEv+0x54>
   b89ca:	bf00      	nop
   b89cc:	000ba65b 	.word	0x000ba65b
   b89d0:	000ba654 	.word	0x000ba654

000b89d4 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b89d4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b89d6:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b89d8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b89da:	6818      	ldr	r0, [r3, #0]
   b89dc:	2800      	cmp	r0, #0
   b89de:	db01      	blt.n	b89e4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b89e0:	f7fd fbc0 	bl	b6164 <sock_close>
   b89e4:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b89e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b89ea:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b89ec:	6960      	ldr	r0, [r4, #20]
   b89ee:	2211      	movs	r2, #17
   b89f0:	2100      	movs	r1, #0
   b89f2:	308c      	adds	r0, #140	; 0x8c
   b89f4:	f001 f80c 	bl	b9a10 <memset>
    flush_buffer();
   b89f8:	4620      	mov	r0, r4
}
   b89fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b89fe:	f7ff bf0b 	b.w	b8818 <_ZN9TCPClient12flush_bufferEv>

000b8a02 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b8a02:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b8a04:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b8a06:	4604      	mov	r4, r0
          total(0) {
   b8a08:	6001      	str	r1, [r0, #0]
   b8a0a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b8a0e:	3088      	adds	r0, #136	; 0x88
   b8a10:	f7ff f948 	bl	b7ca4 <_ZN9IPAddressC1Ev>
}
   b8a14:	4620      	mov	r0, r4
   b8a16:	bd10      	pop	{r4, pc}

000b8a18 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b8a18:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8a1a:	2300      	movs	r3, #0
   b8a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8a20:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b8a24:	4a0e      	ldr	r2, [pc, #56]	; (b8a60 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b8a26:	6103      	str	r3, [r0, #16]
   b8a28:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8a2a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b8a2c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8a2e:	20ac      	movs	r0, #172	; 0xac
   b8a30:	9101      	str	r1, [sp, #4]
   b8a32:	f7fb fb30 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8a36:	1e05      	subs	r5, r0, #0
   b8a38:	f105 060c 	add.w	r6, r5, #12
   b8a3c:	d008      	beq.n	b8a50 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b8a3e:	2301      	movs	r3, #1
   b8a40:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8a44:	4b07      	ldr	r3, [pc, #28]	; (b8a64 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8a46:	9901      	ldr	r1, [sp, #4]
   b8a48:	602b      	str	r3, [r5, #0]
   b8a4a:	4630      	mov	r0, r6
   b8a4c:	f7ff ffd9 	bl	b8a02 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b8a50:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b8a52:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b8a56:	f7ff fedf 	bl	b8818 <_ZN9TCPClient12flush_bufferEv>
}
   b8a5a:	b002      	add	sp, #8
   b8a5c:	bd70      	pop	{r4, r5, r6, pc}
   b8a5e:	bf00      	nop
   b8a60:	000ba690 	.word	0x000ba690
   b8a64:	000ba674 	.word	0x000ba674

000b8a68 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b8a68:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b8a6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b8a6e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b8a70:	f7ff ffd2 	bl	b8a18 <_ZN9TCPClientC1Ei>
}
   b8a74:	4620      	mov	r0, r4
   b8a76:	bd10      	pop	{r4, pc}

000b8a78 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b8a78:	b510      	push	{r4, lr}
   b8a7a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b8a7c:	6800      	ldr	r0, [r0, #0]
   b8a7e:	2800      	cmp	r0, #0
   b8a80:	db01      	blt.n	b8a86 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b8a82:	f7fd fb6f 	bl	b6164 <sock_close>
    }
}
   b8a86:	4620      	mov	r0, r4
   b8a88:	bd10      	pop	{r4, pc}

000b8a8a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b8a8a:	300c      	adds	r0, #12
   b8a8c:	f7ff bff4 	b.w	b8a78 <_ZN9TCPClient4DataD1Ev>

000b8a90 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b8a90:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8a92:	2000      	movs	r0, #0
   b8a94:	f7fd fcf4 	bl	b6480 <spark_sync_time_pending>
   b8a98:	b128      	cbz	r0, b8aa6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8a9a:	f7fd fce1 	bl	b6460 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8a9e:	f080 0001 	eor.w	r0, r0, #1
   b8aa2:	b2c0      	uxtb	r0, r0
    }
   b8aa4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8aa6:	2001      	movs	r0, #1
   b8aa8:	e7fc      	b.n	b8aa4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b8aac <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b8aac:	b530      	push	{r4, r5, lr}
   b8aae:	b093      	sub	sp, #76	; 0x4c
   b8ab0:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b8ab4:	4b19      	ldr	r3, [pc, #100]	; (b8b1c <_ZN9TimeClass7timeStrEx+0x70>)
{
   b8ab6:	4604      	mov	r4, r0
    t += time_zone_cache;
   b8ab8:	e9d3 1000 	ldrd	r1, r0, [r3]
   b8abc:	9b01      	ldr	r3, [sp, #4]
   b8abe:	1852      	adds	r2, r2, r1
   b8ac0:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b8ac4:	4816      	ldr	r0, [pc, #88]	; (b8b20 <_ZN9TimeClass7timeStrEx+0x74>)
   b8ac6:	e9d0 1000 	ldrd	r1, r0, [r0]
   b8aca:	1852      	adds	r2, r2, r1
   b8acc:	eb43 0300 	adc.w	r3, r3, r0
   b8ad0:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b8ad4:	2224      	movs	r2, #36	; 0x24
   b8ad6:	eb0d 0002 	add.w	r0, sp, r2
   b8ada:	2100      	movs	r1, #0
   b8adc:	f000 ff98 	bl	b9a10 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b8ae0:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b8ae2:	a909      	add	r1, sp, #36	; 0x24
   b8ae4:	4668      	mov	r0, sp
   b8ae6:	f7fd fd93 	bl	b6610 <localtime_r>
    char ascstr[26] = {};
   b8aea:	2216      	movs	r2, #22
   b8aec:	4629      	mov	r1, r5
   b8aee:	a803      	add	r0, sp, #12
   b8af0:	9502      	str	r5, [sp, #8]
   b8af2:	f000 ff8d 	bl	b9a10 <memset>
    asctime_r(&calendar_time, ascstr);
   b8af6:	a902      	add	r1, sp, #8
   b8af8:	a809      	add	r0, sp, #36	; 0x24
   b8afa:	f000 ff05 	bl	b9908 <asctime_r>
    int len = strlen(ascstr);
   b8afe:	a802      	add	r0, sp, #8
   b8b00:	f000 ffce 	bl	b9aa0 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b8b04:	ab12      	add	r3, sp, #72	; 0x48
   b8b06:	4418      	add	r0, r3
    return String(ascstr);
   b8b08:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b8b0a:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b8b0e:	4620      	mov	r0, r4
   b8b10:	f7ff fb69 	bl	b81e6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b8b14:	4620      	mov	r0, r4
   b8b16:	b013      	add	sp, #76	; 0x4c
   b8b18:	bd30      	pop	{r4, r5, pc}
   b8b1a:	bf00      	nop
   b8b1c:	2003e680 	.word	0x2003e680
   b8b20:	2003e678 	.word	0x2003e678

000b8b24 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b8b24:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b8b26:	2000      	movs	r0, #0
   b8b28:	f7fd fa5c 	bl	b5fe4 <hal_rtc_time_is_valid>
    if (rtcstate)
   b8b2c:	4604      	mov	r4, r0
   b8b2e:	b9a0      	cbnz	r0, b8b5a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b8b30:	f7fd fc28 	bl	b6384 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b8b34:	2801      	cmp	r0, #1
   b8b36:	d110      	bne.n	b8b5a <_ZN9TimeClass7isValidEv+0x36>
   b8b38:	4620      	mov	r0, r4
   b8b3a:	f7fd fc5b 	bl	b63f4 <system_thread_get_state>
   b8b3e:	b960      	cbnz	r0, b8b5a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b8b40:	f7ff ffa6 	bl	b8a90 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b8b44:	b910      	cbnz	r0, b8b4c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b8b46:	f7fd fc7b 	bl	b6440 <spark_process>
        while (_while() && !_condition()) {
   b8b4a:	e7f9      	b.n	b8b40 <_ZN9TimeClass7isValidEv+0x1c>
   b8b4c:	f7ff ffa0 	bl	b8a90 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b8b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b8b54:	2000      	movs	r0, #0
   b8b56:	f7fd ba45 	b.w	b5fe4 <hal_rtc_time_is_valid>
}
   b8b5a:	4620      	mov	r0, r4
   b8b5c:	bd10      	pop	{r4, pc}

000b8b5e <_ZN9TimeClass3nowEv>:
{
   b8b5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b8b60:	f7ff ffe0 	bl	b8b24 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b8b64:	2210      	movs	r2, #16
   b8b66:	2100      	movs	r1, #0
   b8b68:	4668      	mov	r0, sp
   b8b6a:	f000 ff51 	bl	b9a10 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b8b6e:	2100      	movs	r1, #0
   b8b70:	4668      	mov	r0, sp
   b8b72:	f7fd fa3f 	bl	b5ff4 <hal_rtc_get_time>
}
   b8b76:	9800      	ldr	r0, [sp, #0]
   b8b78:	b005      	add	sp, #20
   b8b7a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8b80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8b80:	4b02      	ldr	r3, [pc, #8]	; (b8b8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b8b82:	681a      	ldr	r2, [r3, #0]
   b8b84:	4b02      	ldr	r3, [pc, #8]	; (b8b90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b8b86:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8b88:	4770      	bx	lr
   b8b8a:	bf00      	nop
   b8b8c:	2003d9f4 	.word	0x2003d9f4
   b8b90:	2003e670 	.word	0x2003e670

000b8b94 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   b8b94:	4770      	bx	lr

000b8b96 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8b96:	7441      	strb	r1, [r0, #17]
}
   b8b98:	4770      	bx	lr

000b8b9a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8b9a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8b9c:	7c00      	ldrb	r0, [r0, #16]
   b8b9e:	f7fd fb91 	bl	b62c4 <hal_usart_available_data_for_write>
}
   b8ba2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8ba6:	bd08      	pop	{r3, pc}

000b8ba8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8ba8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8baa:	7c00      	ldrb	r0, [r0, #16]
   b8bac:	f7fd fb62 	bl	b6274 <hal_usart_available>
}
   b8bb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8bb4:	bd08      	pop	{r3, pc}

000b8bb6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8bb6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8bb8:	7c00      	ldrb	r0, [r0, #16]
   b8bba:	f7fd fb6b 	bl	b6294 <hal_usart_peek>
}
   b8bbe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8bc2:	bd08      	pop	{r3, pc}

000b8bc4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8bc4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8bc6:	7c00      	ldrb	r0, [r0, #16]
   b8bc8:	f7fd fb5c 	bl	b6284 <hal_usart_read>
}
   b8bcc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8bd0:	bd08      	pop	{r3, pc}

000b8bd2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8bd2:	7c00      	ldrb	r0, [r0, #16]
   b8bd4:	f7fd bb66 	b.w	b62a4 <hal_usart_flush>

000b8bd8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8bda:	7c45      	ldrb	r5, [r0, #17]
{
   b8bdc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8bde:	b12d      	cbz	r5, b8bec <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8be0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8be2:	b003      	add	sp, #12
   b8be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8be8:	f7fd bb3c 	b.w	b6264 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8bec:	7c00      	ldrb	r0, [r0, #16]
   b8bee:	9101      	str	r1, [sp, #4]
   b8bf0:	f7fd fb68 	bl	b62c4 <hal_usart_available_data_for_write>
   b8bf4:	2800      	cmp	r0, #0
   b8bf6:	9901      	ldr	r1, [sp, #4]
   b8bf8:	dcf2      	bgt.n	b8be0 <_ZN11USARTSerial5writeEh+0x8>
}
   b8bfa:	4628      	mov	r0, r5
   b8bfc:	b003      	add	sp, #12
   b8bfe:	bd30      	pop	{r4, r5, pc}

000b8c00 <_ZN11USARTSerialD0Ev>:
   b8c00:	b510      	push	{r4, lr}
   b8c02:	2114      	movs	r1, #20
   b8c04:	4604      	mov	r4, r0
   b8c06:	f000 fb22 	bl	b924e <_ZdlPvj>
   b8c0a:	4620      	mov	r0, r4
   b8c0c:	bd10      	pop	{r4, pc}
	...

000b8c10 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   b8c10:	b510      	push	{r4, lr}
   b8c12:	f04f 0c00 	mov.w	ip, #0
   b8c16:	4604      	mov	r4, r0
   b8c18:	4608      	mov	r0, r1
   b8c1a:	4611      	mov	r1, r2
   b8c1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8c20:	e9c4 c201 	strd	ip, r2, [r4, #4]
   b8c24:	4a04      	ldr	r2, [pc, #16]	; (b8c38 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   b8c26:	6022      	str	r2, [r4, #0]
  _blocking = true;
   b8c28:	2201      	movs	r2, #1
  _serial = serial;
   b8c2a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8c2c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   b8c2e:	461a      	mov	r2, r3
   b8c30:	f7fd fb10 	bl	b6254 <hal_usart_init>
}
   b8c34:	4620      	mov	r0, r4
   b8c36:	bd10      	pop	{r4, pc}
   b8c38:	000ba6f8 	.word	0x000ba6f8

000b8c3c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   b8c3c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   b8c3e:	4c0e      	ldr	r4, [pc, #56]	; (b8c78 <_Z22__fetch_global_Serial1v+0x3c>)
   b8c40:	7821      	ldrb	r1, [r4, #0]
   b8c42:	f3bf 8f5b 	dmb	ish
   b8c46:	f011 0101 	ands.w	r1, r1, #1
   b8c4a:	d112      	bne.n	b8c72 <_Z22__fetch_global_Serial1v+0x36>
   b8c4c:	4620      	mov	r0, r4
   b8c4e:	9101      	str	r1, [sp, #4]
   b8c50:	f7fb fa27 	bl	b40a2 <__cxa_guard_acquire>
   b8c54:	9901      	ldr	r1, [sp, #4]
   b8c56:	b160      	cbz	r0, b8c72 <_Z22__fetch_global_Serial1v+0x36>
   b8c58:	4a08      	ldr	r2, [pc, #32]	; (b8c7c <_Z22__fetch_global_Serial1v+0x40>)
   b8c5a:	4b09      	ldr	r3, [pc, #36]	; (b8c80 <_Z22__fetch_global_Serial1v+0x44>)
   b8c5c:	4809      	ldr	r0, [pc, #36]	; (b8c84 <_Z22__fetch_global_Serial1v+0x48>)
   b8c5e:	f7ff ffd7 	bl	b8c10 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   b8c62:	4620      	mov	r0, r4
   b8c64:	f7fb fa22 	bl	b40ac <__cxa_guard_release>
   b8c68:	4a07      	ldr	r2, [pc, #28]	; (b8c88 <_Z22__fetch_global_Serial1v+0x4c>)
   b8c6a:	4908      	ldr	r1, [pc, #32]	; (b8c8c <_Z22__fetch_global_Serial1v+0x50>)
   b8c6c:	4805      	ldr	r0, [pc, #20]	; (b8c84 <_Z22__fetch_global_Serial1v+0x48>)
   b8c6e:	f000 fae9 	bl	b9244 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   b8c72:	4804      	ldr	r0, [pc, #16]	; (b8c84 <_Z22__fetch_global_Serial1v+0x48>)
   b8c74:	b002      	add	sp, #8
   b8c76:	bd10      	pop	{r4, pc}
   b8c78:	2003e688 	.word	0x2003e688
   b8c7c:	2003e68c 	.word	0x2003e68c
   b8c80:	2003e710 	.word	0x2003e710
   b8c84:	2003e794 	.word	0x2003e794
   b8c88:	2003da60 	.word	0x2003da60
   b8c8c:	000b8b95 	.word	0x000b8b95

000b8c90 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8c90:	7441      	strb	r1, [r0, #17]
}
   b8c92:	4770      	bx	lr

000b8c94 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8c94:	4770      	bx	lr

000b8c96 <_ZN9USBSerial4readEv>:
{
   b8c96:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8c98:	2100      	movs	r1, #0
   b8c9a:	7c00      	ldrb	r0, [r0, #16]
   b8c9c:	f7fd fb3a 	bl	b6314 <HAL_USB_USART_Receive_Data>
}
   b8ca0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8ca4:	bd08      	pop	{r3, pc}

000b8ca6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   b8ca6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8ca8:	2101      	movs	r1, #1
   b8caa:	7c00      	ldrb	r0, [r0, #16]
   b8cac:	f7fd fb32 	bl	b6314 <HAL_USB_USART_Receive_Data>
}
   b8cb0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8cb4:	bd08      	pop	{r3, pc}

000b8cb6 <_ZN9USBSerial17availableForWriteEv>:
{
   b8cb6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8cb8:	7c00      	ldrb	r0, [r0, #16]
   b8cba:	f7fd fb23 	bl	b6304 <HAL_USB_USART_Available_Data_For_Write>
}
   b8cbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8cc2:	bd08      	pop	{r3, pc}

000b8cc4 <_ZN9USBSerial9availableEv>:
{
   b8cc4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8cc6:	7c00      	ldrb	r0, [r0, #16]
   b8cc8:	f7fd fb14 	bl	b62f4 <HAL_USB_USART_Available_Data>
}
   b8ccc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8cd0:	bd08      	pop	{r3, pc}

000b8cd2 <_ZN9USBSerial5writeEh>:
{
   b8cd2:	b513      	push	{r0, r1, r4, lr}
   b8cd4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8cd6:	7c00      	ldrb	r0, [r0, #16]
{
   b8cd8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8cda:	f7fd fb13 	bl	b6304 <HAL_USB_USART_Available_Data_For_Write>
   b8cde:	2800      	cmp	r0, #0
   b8ce0:	9901      	ldr	r1, [sp, #4]
   b8ce2:	dc01      	bgt.n	b8ce8 <_ZN9USBSerial5writeEh+0x16>
   b8ce4:	7c60      	ldrb	r0, [r4, #17]
   b8ce6:	b120      	cbz	r0, b8cf2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8ce8:	7c20      	ldrb	r0, [r4, #16]
   b8cea:	f7fd fb1b 	bl	b6324 <HAL_USB_USART_Send_Data>
   b8cee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8cf2:	b002      	add	sp, #8
   b8cf4:	bd10      	pop	{r4, pc}

000b8cf6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8cf6:	7c00      	ldrb	r0, [r0, #16]
   b8cf8:	f7fd bb1c 	b.w	b6334 <HAL_USB_USART_Flush_Data>

000b8cfc <_ZN9USBSerialD0Ev>:
   b8cfc:	b510      	push	{r4, lr}
   b8cfe:	2114      	movs	r1, #20
   b8d00:	4604      	mov	r4, r0
   b8d02:	f000 faa4 	bl	b924e <_ZdlPvj>
   b8d06:	4620      	mov	r0, r4
   b8d08:	bd10      	pop	{r4, pc}
	...

000b8d0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8d0c:	b510      	push	{r4, lr}
   b8d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8d12:	4604      	mov	r4, r0
   b8d14:	4608      	mov	r0, r1
   b8d16:	2100      	movs	r1, #0
   b8d18:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8d1c:	4b04      	ldr	r3, [pc, #16]	; (b8d30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8d1e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8d20:	2301      	movs	r3, #1
  _serial = serial;
   b8d22:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8d24:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8d26:	4611      	mov	r1, r2
   b8d28:	f7fd fad4 	bl	b62d4 <HAL_USB_USART_Init>
}
   b8d2c:	4620      	mov	r0, r4
   b8d2e:	bd10      	pop	{r4, pc}
   b8d30:	000ba728 	.word	0x000ba728

000b8d34 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b8d34:	7c00      	ldrb	r0, [r0, #16]
   b8d36:	2200      	movs	r2, #0
   b8d38:	f7fd bad4 	b.w	b62e4 <HAL_USB_USART_Begin>

000b8d3c <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
   b8d3c:	7c00      	ldrb	r0, [r0, #16]
   b8d3e:	f7fd bb01 	b.w	b6344 <HAL_USB_USART_Is_Connected>

000b8d42 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   b8d42:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   b8d44:	2214      	movs	r2, #20
{
   b8d46:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   b8d48:	2100      	movs	r1, #0
   b8d4a:	f000 fe61 	bl	b9a10 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   b8d4e:	4620      	mov	r0, r4
   b8d50:	bd10      	pop	{r4, pc}
	...

000b8d54 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   b8d54:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8d56:	4c10      	ldr	r4, [pc, #64]	; (b8d98 <_Z16_fetch_usbserialv+0x44>)
{
   b8d58:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8d5a:	a803      	add	r0, sp, #12
   b8d5c:	f7ff fff1 	bl	b8d42 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8d60:	7821      	ldrb	r1, [r4, #0]
   b8d62:	f3bf 8f5b 	dmb	ish
   b8d66:	f011 0101 	ands.w	r1, r1, #1
   b8d6a:	d111      	bne.n	b8d90 <_Z16_fetch_usbserialv+0x3c>
   b8d6c:	4620      	mov	r0, r4
   b8d6e:	9101      	str	r1, [sp, #4]
   b8d70:	f7fb f997 	bl	b40a2 <__cxa_guard_acquire>
   b8d74:	9901      	ldr	r1, [sp, #4]
   b8d76:	b158      	cbz	r0, b8d90 <_Z16_fetch_usbserialv+0x3c>
   b8d78:	aa03      	add	r2, sp, #12
   b8d7a:	4808      	ldr	r0, [pc, #32]	; (b8d9c <_Z16_fetch_usbserialv+0x48>)
   b8d7c:	f7ff ffc6 	bl	b8d0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8d80:	4620      	mov	r0, r4
   b8d82:	f7fb f993 	bl	b40ac <__cxa_guard_release>
   b8d86:	4a06      	ldr	r2, [pc, #24]	; (b8da0 <_Z16_fetch_usbserialv+0x4c>)
   b8d88:	4906      	ldr	r1, [pc, #24]	; (b8da4 <_Z16_fetch_usbserialv+0x50>)
   b8d8a:	4804      	ldr	r0, [pc, #16]	; (b8d9c <_Z16_fetch_usbserialv+0x48>)
   b8d8c:	f000 fa5a 	bl	b9244 <__aeabi_atexit>
	return _usbserial;
}
   b8d90:	4802      	ldr	r0, [pc, #8]	; (b8d9c <_Z16_fetch_usbserialv+0x48>)
   b8d92:	b008      	add	sp, #32
   b8d94:	bd10      	pop	{r4, pc}
   b8d96:	bf00      	nop
   b8d98:	2003e7a8 	.word	0x2003e7a8
   b8d9c:	2003e7ac 	.word	0x2003e7ac
   b8da0:	2003da60 	.word	0x2003da60
   b8da4:	000b8c95 	.word	0x000b8c95

000b8da8 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv>:
                results[index++] = *result;
            }
        }

    protected:
        static void callback(WiFiAccessPoint* result, void* cookie)
   b8da8:	b530      	push	{r4, r5, lr}
            if (index<count) {
   b8daa:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   b8dae:	4293      	cmp	r3, r2
   b8db0:	da10      	bge.n	b8dd4 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv+0x2c>
                results[index++] = *result;
   b8db2:	680d      	ldr	r5, [r1, #0]
   b8db4:	1c5a      	adds	r2, r3, #1
   b8db6:	604a      	str	r2, [r1, #4]
   b8db8:	4604      	mov	r4, r0
   b8dba:	2238      	movs	r2, #56	; 0x38
   b8dbc:	fb02 5503 	mla	r5, r2, r3, r5
   b8dc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8dc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8dcc:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8dd0:	e885 0003 	stmia.w	r5, {r0, r1}
        {
            ((APArrayPopulator*)cookie)->addResult(result);
        }
   b8dd4:	bd30      	pop	{r4, r5, pc}

000b8dd6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8dd6:	2200      	movs	r2, #0
   b8dd8:	6840      	ldr	r0, [r0, #4]
   b8dda:	4611      	mov	r1, r2
   b8ddc:	f7fd bb98 	b.w	b6510 <network_listening>

000b8de0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8de0:	2200      	movs	r2, #0
   b8de2:	6840      	ldr	r0, [r0, #4]
   b8de4:	4611      	mov	r1, r2
   b8de6:	f7fd bbb3 	b.w	b6550 <network_get_listen_timeout>

000b8dea <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8dea:	6840      	ldr	r0, [r0, #4]
   b8dec:	2200      	movs	r2, #0
   b8dee:	f7fd bba7 	b.w	b6540 <network_set_listen_timeout>

000b8df2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8df2:	6840      	ldr	r0, [r0, #4]
   b8df4:	2200      	movs	r2, #0
   b8df6:	f081 0101 	eor.w	r1, r1, #1
   b8dfa:	f7fd bb81 	b.w	b6500 <network_listen>

000b8dfe <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8dfe:	2200      	movs	r2, #0
   b8e00:	6840      	ldr	r0, [r0, #4]
   b8e02:	4611      	mov	r1, r2
   b8e04:	f7fd bb54 	b.w	b64b0 <network_connecting>

000b8e08 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8e08:	6840      	ldr	r0, [r0, #4]
   b8e0a:	2200      	movs	r2, #0
   b8e0c:	2102      	movs	r1, #2
   b8e0e:	f7fd bb57 	b.w	b64c0 <network_disconnect>
	...

000b8e14 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>:
        APScan apScan(results, result_count);
        return apScan.start();
    }

#if !HAL_PLATFORM_WIFI_SCAN_ONLY
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
   b8e14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
            this->index = 0;
   b8e16:	2300      	movs	r3, #0
            this->results = results;
   b8e18:	9101      	str	r1, [sp, #4]
            return std::min(count, wlan_get_credentials(callback, this));
   b8e1a:	4806      	ldr	r0, [pc, #24]	; (b8e34 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj+0x20>)
            this->index = 0;
   b8e1c:	9302      	str	r3, [sp, #8]
            return std::min(count, wlan_get_credentials(callback, this));
   b8e1e:	a901      	add	r1, sp, #4
            this->count = size;
   b8e20:	9203      	str	r2, [sp, #12]
            return std::min(count, wlan_get_credentials(callback, this));
   b8e22:	f7fd fa97 	bl	b6354 <wlan_get_credentials>
        APList apList(results, result_count);
        return apList.start();
    }
   b8e26:	9b03      	ldr	r3, [sp, #12]
   b8e28:	4298      	cmp	r0, r3
   b8e2a:	bfa8      	it	ge
   b8e2c:	4618      	movge	r0, r3
   b8e2e:	b005      	add	sp, #20
   b8e30:	f85d fb04 	ldr.w	pc, [sp], #4
   b8e34:	000b8da9 	.word	0x000b8da9

000b8e38 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b8e38:	4b02      	ldr	r3, [pc, #8]	; (b8e44 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b8e3a:	2204      	movs	r2, #4
   b8e3c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b8e3e:	4a02      	ldr	r2, [pc, #8]	; (b8e48 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8e40:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b8e42:	4770      	bx	lr
   b8e44:	2003e7c0 	.word	0x2003e7c0
   b8e48:	000ba758 	.word	0x000ba758

000b8e4c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b8e4c:	b510      	push	{r4, lr}
   b8e4e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b8e50:	f000 fe26 	bl	b9aa0 <strlen>
   b8e54:	3801      	subs	r0, #1
   b8e56:	1823      	adds	r3, r4, r0
   b8e58:	4620      	mov	r0, r4
	while(i<j){
   b8e5a:	4283      	cmp	r3, r0
   b8e5c:	d906      	bls.n	b8e6c <_Z11str_reversePc+0x20>
		c = *i;
   b8e5e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b8e60:	7819      	ldrb	r1, [r3, #0]
   b8e62:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b8e66:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b8e6a:	e7f6      	b.n	b8e5a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b8e6c:	bd10      	pop	{r4, pc}

000b8e6e <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b8e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b8e72:	1e93      	subs	r3, r2, #2
{
   b8e74:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b8e76:	2b22      	cmp	r3, #34	; 0x22
   b8e78:	f04f 0300 	mov.w	r3, #0
{
   b8e7c:	460d      	mov	r5, r1
   b8e7e:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b8e80:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b8e84:	d927      	bls.n	b8ed6 <ltoa+0x68>

      if (10 == base && N < 0L)
   b8e86:	2800      	cmp	r0, #0
   b8e88:	da2a      	bge.n	b8ee0 <ltoa+0x72>
      {
            *head++ = '-';
   b8e8a:	462e      	mov	r6, r5
   b8e8c:	232d      	movs	r3, #45	; 0x2d
   b8e8e:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b8e92:	4240      	negs	r0, r0
   b8e94:	240a      	movs	r4, #10
      *tail-- = '\0';
   b8e96:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b8e9a:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b8e9e:	4622      	mov	r2, r4
   b8ea0:	4601      	mov	r1, r0
   b8ea2:	a801      	add	r0, sp, #4
   b8ea4:	f000 fd68 	bl	b9978 <ldiv>
   b8ea8:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b8eaa:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b8eac:	2b09      	cmp	r3, #9
   b8eae:	bfcc      	ite	gt
   b8eb0:	2237      	movgt	r2, #55	; 0x37
   b8eb2:	2230      	movle	r2, #48	; 0x30
   b8eb4:	fa52 f383 	uxtab	r3, r2, r3
   b8eb8:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b8ebc:	f108 0801 	add.w	r8, r8, #1
   b8ec0:	2800      	cmp	r0, #0
   b8ec2:	d1ec      	bne.n	b8e9e <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b8ec4:	4642      	mov	r2, r8
   b8ec6:	1c79      	adds	r1, r7, #1
   b8ec8:	4630      	mov	r0, r6
   b8eca:	f000 fd79 	bl	b99c0 <memcpy>
      return str;
}
   b8ece:	4628      	mov	r0, r5
   b8ed0:	b00c      	add	sp, #48	; 0x30
   b8ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b8ed6:	2a0a      	cmp	r2, #10
   b8ed8:	d0d5      	beq.n	b8e86 <ltoa+0x18>
      if (uarg)
   b8eda:	b118      	cbz	r0, b8ee4 <ltoa+0x76>
   b8edc:	462e      	mov	r6, r5
   b8ede:	e7da      	b.n	b8e96 <ltoa+0x28>
   b8ee0:	240a      	movs	r4, #10
   b8ee2:	e7fa      	b.n	b8eda <ltoa+0x6c>
      else  *tail-- = '0';
   b8ee4:	2330      	movs	r3, #48	; 0x30
   b8ee6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b8eea:	462e      	mov	r6, r5
   b8eec:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b8ef0:	f04f 0802 	mov.w	r8, #2
   b8ef4:	e7e6      	b.n	b8ec4 <ltoa+0x56>

000b8ef6 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b8ef6:	b570      	push	{r4, r5, r6, lr}
   b8ef8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b8efa:	1e91      	subs	r1, r2, #2
   b8efc:	2922      	cmp	r1, #34	; 0x22
   b8efe:	d81d      	bhi.n	b8f3c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b8f00:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b8f02:	b930      	cbnz	r0, b8f12 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b8f04:	4423      	add	r3, r4
            *ptr++ = '0';
   b8f06:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b8f08:	429d      	cmp	r5, r3
   b8f0a:	d210      	bcs.n	b8f2e <ultoa+0x38>
            *ptr++ = '0';
   b8f0c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b8f10:	e7fa      	b.n	b8f08 <ultoa+0x12>
            result.quot = a/radix;
   b8f12:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b8f16:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b8f1a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b8f1c:	2809      	cmp	r0, #9
                *ptr += '0';
   b8f1e:	bf94      	ite	ls
   b8f20:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b8f22:	3157      	addhi	r1, #87	; 0x57
   b8f24:	b2c9      	uxtb	r1, r1
   b8f26:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b8f2a:	4630      	mov	r0, r6
	while(a){
   b8f2c:	e7e9      	b.n	b8f02 <ultoa+0xc>

	*ptr = '\0';
   b8f2e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b8f30:	4620      	mov	r0, r4
	*ptr = '\0';
   b8f32:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b8f34:	f7ff ff8a 	bl	b8e4c <_Z11str_reversePc>
	return buffer;
   b8f38:	4620      	mov	r0, r4
}
   b8f3a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b8f3c:	2000      	movs	r0, #0
   b8f3e:	e7fc      	b.n	b8f3a <ultoa+0x44>

000b8f40 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8f40:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b8f42:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8f44:	460c      	mov	r4, r1
   b8f46:	4615      	mov	r5, r2
	if(a<0){
   b8f48:	da0e      	bge.n	b8f68 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8f4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b8f4e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8f52:	bf14      	ite	ne
   b8f54:	4258      	negne	r0, r3
   b8f56:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b8f58:	2301      	movs	r3, #1
		*buffer = '-';
   b8f5a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b8f5c:	462a      	mov	r2, r5
   b8f5e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b8f60:	f7ff ffc9 	bl	b8ef6 <ultoa>
	}
	return buffer;
}
   b8f64:	4620      	mov	r0, r4
   b8f66:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b8f68:	2301      	movs	r3, #1
   b8f6a:	e7f9      	b.n	b8f60 <itoa+0x20>

000b8f6c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8f6c:	4b01      	ldr	r3, [pc, #4]	; (b8f74 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8f6e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8f70:	4770      	bx	lr
   b8f72:	bf00      	nop
   b8f74:	2003d9f8 	.word	0x2003d9f8

000b8f78 <serialEventRun>:
{
   b8f78:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8f7a:	4b0b      	ldr	r3, [pc, #44]	; (b8fa8 <serialEventRun+0x30>)
   b8f7c:	b143      	cbz	r3, b8f90 <serialEventRun+0x18>
   b8f7e:	f7ff fee9 	bl	b8d54 <_Z16_fetch_usbserialv>
   b8f82:	6803      	ldr	r3, [r0, #0]
   b8f84:	691b      	ldr	r3, [r3, #16]
   b8f86:	4798      	blx	r3
   b8f88:	2800      	cmp	r0, #0
   b8f8a:	dd01      	ble.n	b8f90 <serialEventRun+0x18>
        serialEvent();
   b8f8c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8f90:	4b06      	ldr	r3, [pc, #24]	; (b8fac <serialEventRun+0x34>)
   b8f92:	b143      	cbz	r3, b8fa6 <serialEventRun+0x2e>
   b8f94:	f7ff fe52 	bl	b8c3c <_Z22__fetch_global_Serial1v>
   b8f98:	6803      	ldr	r3, [r0, #0]
   b8f9a:	691b      	ldr	r3, [r3, #16]
   b8f9c:	4798      	blx	r3
   b8f9e:	2800      	cmp	r0, #0
   b8fa0:	dd01      	ble.n	b8fa6 <serialEventRun+0x2e>
        serialEvent1();
   b8fa2:	f3af 8000 	nop.w
}
   b8fa6:	bd08      	pop	{r3, pc}
	...

000b8fb0 <_post_loop>:
{
   b8fb0:	b508      	push	{r3, lr}
	serialEventRun();
   b8fb2:	f7ff ffe1 	bl	b8f78 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8fb6:	f7fc fff5 	bl	b5fa4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8fba:	4b01      	ldr	r3, [pc, #4]	; (b8fc0 <_post_loop+0x10>)
   b8fbc:	6018      	str	r0, [r3, #0]
}
   b8fbe:	bd08      	pop	{r3, pc}
   b8fc0:	2003e7d0 	.word	0x2003e7d0

000b8fc4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8fc4:	4805      	ldr	r0, [pc, #20]	; (b8fdc <_Z33system_initialize_user_backup_ramv+0x18>)
   b8fc6:	4a06      	ldr	r2, [pc, #24]	; (b8fe0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8fc8:	4906      	ldr	r1, [pc, #24]	; (b8fe4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8fca:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8fcc:	1a12      	subs	r2, r2, r0
   b8fce:	f000 fcf7 	bl	b99c0 <memcpy>
    __backup_sram_signature = signature;
   b8fd2:	4b05      	ldr	r3, [pc, #20]	; (b8fe8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8fd4:	4a05      	ldr	r2, [pc, #20]	; (b8fec <_Z33system_initialize_user_backup_ramv+0x28>)
   b8fd6:	601a      	str	r2, [r3, #0]
}
   b8fd8:	bd08      	pop	{r3, pc}
   b8fda:	bf00      	nop
   b8fdc:	2003f400 	.word	0x2003f400
   b8fe0:	2003f404 	.word	0x2003f404
   b8fe4:	000baa70 	.word	0x000baa70
   b8fe8:	2003f400 	.word	0x2003f400
   b8fec:	9a271c1e 	.word	0x9a271c1e

000b8ff0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8ff0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8ff2:	2300      	movs	r3, #0
   b8ff4:	9300      	str	r3, [sp, #0]
   b8ff6:	461a      	mov	r2, r3
   b8ff8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8ffc:	f7fd fa0c 	bl	b6418 <system_ctrl_set_result>
}
   b9000:	b003      	add	sp, #12
   b9002:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9008 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b9008:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b900a:	8843      	ldrh	r3, [r0, #2]
   b900c:	2b0a      	cmp	r3, #10
   b900e:	d008      	beq.n	b9022 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b9010:	2b50      	cmp	r3, #80	; 0x50
   b9012:	d10b      	bne.n	b902c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b9014:	4b09      	ldr	r3, [pc, #36]	; (b903c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b9016:	681b      	ldr	r3, [r3, #0]
   b9018:	b14b      	cbz	r3, b902e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b901a:	b003      	add	sp, #12
   b901c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b9020:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b9022:	f7ff ffe5 	bl	b8ff0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b9026:	b003      	add	sp, #12
   b9028:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b902c:	2300      	movs	r3, #0
   b902e:	9300      	str	r3, [sp, #0]
   b9030:	461a      	mov	r2, r3
   b9032:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9036:	f7fd f9ef 	bl	b6418 <system_ctrl_set_result>
}
   b903a:	e7f4      	b.n	b9026 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b903c:	2003e7cc 	.word	0x2003e7cc

000b9040 <module_user_init_hook>:
{
   b9040:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b9042:	4812      	ldr	r0, [pc, #72]	; (b908c <module_user_init_hook+0x4c>)
   b9044:	2100      	movs	r1, #0
   b9046:	f7fd fadb 	bl	b6600 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b904a:	4b11      	ldr	r3, [pc, #68]	; (b9090 <module_user_init_hook+0x50>)
   b904c:	681a      	ldr	r2, [r3, #0]
   b904e:	4b11      	ldr	r3, [pc, #68]	; (b9094 <module_user_init_hook+0x54>)
   b9050:	429a      	cmp	r2, r3
   b9052:	4b11      	ldr	r3, [pc, #68]	; (b9098 <module_user_init_hook+0x58>)
   b9054:	bf0c      	ite	eq
   b9056:	2201      	moveq	r2, #1
   b9058:	2200      	movne	r2, #0
   b905a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b905c:	d001      	beq.n	b9062 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b905e:	f7ff ffb1 	bl	b8fc4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b9062:	f7fc ff8f 	bl	b5f84 <HAL_RNG_GetRandomNumber>
   b9066:	4604      	mov	r4, r0
    srand(seed);
   b9068:	f000 fcda 	bl	b9a20 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b906c:	4b0b      	ldr	r3, [pc, #44]	; (b909c <module_user_init_hook+0x5c>)
   b906e:	b113      	cbz	r3, b9076 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9070:	4620      	mov	r0, r4
   b9072:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b9076:	2100      	movs	r1, #0
   b9078:	4808      	ldr	r0, [pc, #32]	; (b909c <module_user_init_hook+0x5c>)
   b907a:	f7fd fa09 	bl	b6490 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b907e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b9082:	4807      	ldr	r0, [pc, #28]	; (b90a0 <module_user_init_hook+0x60>)
   b9084:	2100      	movs	r1, #0
   b9086:	f7fd b9bd 	b.w	b6404 <system_ctrl_set_app_request_handler>
   b908a:	bf00      	nop
   b908c:	000b8f6d 	.word	0x000b8f6d
   b9090:	2003f400 	.word	0x2003f400
   b9094:	9a271c1e 	.word	0x9a271c1e
   b9098:	2003e7c8 	.word	0x2003e7c8
   b909c:	00000000 	.word	0x00000000
   b90a0:	000b9009 	.word	0x000b9009

000b90a4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b90a4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b90a6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b90a8:	d902      	bls.n	b90b0 <pinAvailable+0xc>
    return false;
   b90aa:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b90ac:	b002      	add	sp, #8
   b90ae:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b90b0:	f1a0 030b 	sub.w	r3, r0, #11
   b90b4:	2b02      	cmp	r3, #2
   b90b6:	d81a      	bhi.n	b90ee <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b90b8:	4c17      	ldr	r4, [pc, #92]	; (b9118 <pinAvailable+0x74>)
   b90ba:	7821      	ldrb	r1, [r4, #0]
   b90bc:	f3bf 8f5b 	dmb	ish
   b90c0:	f011 0101 	ands.w	r1, r1, #1
   b90c4:	d10b      	bne.n	b90de <pinAvailable+0x3a>
   b90c6:	4620      	mov	r0, r4
   b90c8:	9101      	str	r1, [sp, #4]
   b90ca:	f7fa ffea 	bl	b40a2 <__cxa_guard_acquire>
   b90ce:	9901      	ldr	r1, [sp, #4]
   b90d0:	b128      	cbz	r0, b90de <pinAvailable+0x3a>
   b90d2:	4812      	ldr	r0, [pc, #72]	; (b911c <pinAvailable+0x78>)
   b90d4:	f7fe ffa8 	bl	b8028 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b90d8:	4620      	mov	r0, r4
   b90da:	f7fa ffe7 	bl	b40ac <__cxa_guard_release>
   b90de:	4b0f      	ldr	r3, [pc, #60]	; (b911c <pinAvailable+0x78>)
   b90e0:	7818      	ldrb	r0, [r3, #0]
   b90e2:	f7fd f897 	bl	b6214 <hal_spi_is_enabled>
   b90e6:	2800      	cmp	r0, #0
   b90e8:	d1df      	bne.n	b90aa <pinAvailable+0x6>
  return true; // 'pin' is available
   b90ea:	2001      	movs	r0, #1
   b90ec:	e7de      	b.n	b90ac <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b90ee:	2801      	cmp	r0, #1
   b90f0:	d809      	bhi.n	b9106 <pinAvailable+0x62>
   b90f2:	f000 f87f 	bl	b91f4 <_Z19__fetch_global_Wirev>
   b90f6:	2100      	movs	r1, #0
   b90f8:	7c00      	ldrb	r0, [r0, #16]
   b90fa:	f7fc ffe3 	bl	b60c4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b90fe:	f080 0001 	eor.w	r0, r0, #1
   b9102:	b2c0      	uxtb	r0, r0
   b9104:	e7d2      	b.n	b90ac <pinAvailable+0x8>
   b9106:	3809      	subs	r0, #9
   b9108:	2801      	cmp	r0, #1
   b910a:	d8ee      	bhi.n	b90ea <pinAvailable+0x46>
   b910c:	f7ff fd96 	bl	b8c3c <_Z22__fetch_global_Serial1v>
   b9110:	7c00      	ldrb	r0, [r0, #16]
   b9112:	f7fd f8cf 	bl	b62b4 <hal_usart_is_enabled>
   b9116:	e7f2      	b.n	b90fe <pinAvailable+0x5a>
   b9118:	2003e620 	.word	0x2003e620
   b911c:	2003e624 	.word	0x2003e624

000b9120 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9120:	2823      	cmp	r0, #35	; 0x23
{
   b9122:	b538      	push	{r3, r4, r5, lr}
   b9124:	4604      	mov	r4, r0
   b9126:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9128:	d80a      	bhi.n	b9140 <pinMode+0x20>
   b912a:	29ff      	cmp	r1, #255	; 0xff
   b912c:	d008      	beq.n	b9140 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b912e:	f7ff ffb9 	bl	b90a4 <pinAvailable>
   b9132:	b128      	cbz	r0, b9140 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b9134:	4629      	mov	r1, r5
   b9136:	4620      	mov	r0, r4
}
   b9138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b913c:	f7fc bf62 	b.w	b6004 <HAL_Pin_Mode>
}
   b9140:	bd38      	pop	{r3, r4, r5, pc}

000b9142 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b9142:	b538      	push	{r3, r4, r5, lr}
   b9144:	4604      	mov	r4, r0
   b9146:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9148:	f7fc ff64 	bl	b6014 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b914c:	28ff      	cmp	r0, #255	; 0xff
   b914e:	d010      	beq.n	b9172 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b9150:	2806      	cmp	r0, #6
   b9152:	d804      	bhi.n	b915e <digitalWrite+0x1c>
   b9154:	234d      	movs	r3, #77	; 0x4d
   b9156:	fa23 f000 	lsr.w	r0, r3, r0
   b915a:	07c3      	lsls	r3, r0, #31
   b915c:	d409      	bmi.n	b9172 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b915e:	4620      	mov	r0, r4
   b9160:	f7ff ffa0 	bl	b90a4 <pinAvailable>
   b9164:	b128      	cbz	r0, b9172 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b9166:	4629      	mov	r1, r5
   b9168:	4620      	mov	r0, r4
}
   b916a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b916e:	f7fc bf59 	b.w	b6024 <HAL_GPIO_Write>
}
   b9172:	bd38      	pop	{r3, r4, r5, pc}

000b9174 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b9174:	b510      	push	{r4, lr}
   b9176:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9178:	f7fc ff4c 	bl	b6014 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b917c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b917e:	b2db      	uxtb	r3, r3
   b9180:	2b01      	cmp	r3, #1
   b9182:	d908      	bls.n	b9196 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b9184:	4620      	mov	r0, r4
   b9186:	f7ff ff8d 	bl	b90a4 <pinAvailable>
   b918a:	b120      	cbz	r0, b9196 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b918c:	4620      	mov	r0, r4
}
   b918e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b9192:	f7fc bf4f 	b.w	b6034 <HAL_GPIO_Read>
}
   b9196:	2000      	movs	r0, #0
   b9198:	bd10      	pop	{r4, pc}
	...

000b919c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   b919c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   b919e:	4c08      	ldr	r4, [pc, #32]	; (b91c0 <_Z21__fetch_global_EEPROMv+0x24>)
   b91a0:	7823      	ldrb	r3, [r4, #0]
   b91a2:	f3bf 8f5b 	dmb	ish
   b91a6:	07db      	lsls	r3, r3, #31
   b91a8:	d408      	bmi.n	b91bc <_Z21__fetch_global_EEPROMv+0x20>
   b91aa:	4620      	mov	r0, r4
   b91ac:	f7fa ff79 	bl	b40a2 <__cxa_guard_acquire>
   b91b0:	b120      	cbz	r0, b91bc <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   b91b2:	f7fc feff 	bl	b5fb4 <HAL_EEPROM_Init>
   b91b6:	4620      	mov	r0, r4
   b91b8:	f7fa ff78 	bl	b40ac <__cxa_guard_release>
	return eeprom;
}
   b91bc:	4801      	ldr	r0, [pc, #4]	; (b91c4 <_Z21__fetch_global_EEPROMv+0x28>)
   b91be:	bd10      	pop	{r4, pc}
   b91c0:	2003e7d4 	.word	0x2003e7d4
   b91c4:	2003e7d8 	.word	0x2003e7d8

000b91c8 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   b91c8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b91ca:	2520      	movs	r5, #32
   b91cc:	2314      	movs	r3, #20
{
   b91ce:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b91d0:	6003      	str	r3, [r0, #0]
   b91d2:	6085      	str	r5, [r0, #8]
   b91d4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b91d6:	4906      	ldr	r1, [pc, #24]	; (b91f0 <_Z17acquireWireBufferv+0x28>)
   b91d8:	4628      	mov	r0, r5
   b91da:	f000 f83a 	bl	b9252 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b91de:	4904      	ldr	r1, [pc, #16]	; (b91f0 <_Z17acquireWireBufferv+0x28>)
	};
   b91e0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b91e2:	4628      	mov	r0, r5
   b91e4:	f000 f835 	bl	b9252 <_ZnajRKSt9nothrow_t>
	};
   b91e8:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   b91ea:	4620      	mov	r0, r4
   b91ec:	bd38      	pop	{r3, r4, r5, pc}
   b91ee:	bf00      	nop
   b91f0:	000ba78c 	.word	0x000ba78c

000b91f4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   b91f4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b91f6:	4d0f      	ldr	r5, [pc, #60]	; (b9234 <_Z19__fetch_global_Wirev+0x40>)
   b91f8:	7829      	ldrb	r1, [r5, #0]
   b91fa:	f3bf 8f5b 	dmb	ish
   b91fe:	f011 0401 	ands.w	r4, r1, #1
{
   b9202:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9204:	d113      	bne.n	b922e <_Z19__fetch_global_Wirev+0x3a>
   b9206:	4628      	mov	r0, r5
   b9208:	f7fa ff4b 	bl	b40a2 <__cxa_guard_acquire>
   b920c:	b178      	cbz	r0, b922e <_Z19__fetch_global_Wirev+0x3a>
   b920e:	a801      	add	r0, sp, #4
   b9210:	f7ff ffda 	bl	b91c8 <_Z17acquireWireBufferv>
   b9214:	aa01      	add	r2, sp, #4
   b9216:	4621      	mov	r1, r4
   b9218:	4807      	ldr	r0, [pc, #28]	; (b9238 <_Z19__fetch_global_Wirev+0x44>)
   b921a:	f7fe fcb7 	bl	b7b8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b921e:	4628      	mov	r0, r5
   b9220:	f7fa ff44 	bl	b40ac <__cxa_guard_release>
   b9224:	4a05      	ldr	r2, [pc, #20]	; (b923c <_Z19__fetch_global_Wirev+0x48>)
   b9226:	4906      	ldr	r1, [pc, #24]	; (b9240 <_Z19__fetch_global_Wirev+0x4c>)
   b9228:	4803      	ldr	r0, [pc, #12]	; (b9238 <_Z19__fetch_global_Wirev+0x44>)
   b922a:	f000 f80b 	bl	b9244 <__aeabi_atexit>
	return wire;
}
   b922e:	4802      	ldr	r0, [pc, #8]	; (b9238 <_Z19__fetch_global_Wirev+0x44>)
   b9230:	b007      	add	sp, #28
   b9232:	bd30      	pop	{r4, r5, pc}
   b9234:	2003e7dc 	.word	0x2003e7dc
   b9238:	2003e7e0 	.word	0x2003e7e0
   b923c:	2003da60 	.word	0x2003da60
   b9240:	000b7b35 	.word	0x000b7b35

000b9244 <__aeabi_atexit>:
   b9244:	460b      	mov	r3, r1
   b9246:	4601      	mov	r1, r0
   b9248:	4618      	mov	r0, r3
   b924a:	f000 bb87 	b.w	b995c <__cxa_atexit>

000b924e <_ZdlPvj>:
   b924e:	f7fa bf26 	b.w	b409e <_ZdlPv>

000b9252 <_ZnajRKSt9nothrow_t>:
   b9252:	f7fa bf22 	b.w	b409a <_Znaj>

000b9256 <_ZSt25__throw_bad_function_callv>:
   b9256:	b508      	push	{r3, lr}
   b9258:	f7fd f9ba 	bl	b65d0 <abort>

000b925c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b925c:	4901      	ldr	r1, [pc, #4]	; (b9264 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b925e:	f000 b8f9 	b.w	b9454 <_ZNKSt9type_infoeqERKS_>
   b9262:	bf00      	nop
   b9264:	000ba7a8 	.word	0x000ba7a8

000b9268 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b9268:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b926a:	2400      	movs	r4, #0
   b926c:	2310      	movs	r3, #16
   b926e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b9272:	6803      	ldr	r3, [r0, #0]
   b9274:	4615      	mov	r5, r2
   b9276:	699e      	ldr	r6, [r3, #24]
   b9278:	6812      	ldr	r2, [r2, #0]
   b927a:	466b      	mov	r3, sp
   b927c:	e9cd 4400 	strd	r4, r4, [sp]
   b9280:	47b0      	blx	r6
   b9282:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b9286:	f003 0306 	and.w	r3, r3, #6
   b928a:	2b06      	cmp	r3, #6
   b928c:	bf03      	ittte	eq
   b928e:	9b00      	ldreq	r3, [sp, #0]
   b9290:	602b      	streq	r3, [r5, #0]
   b9292:	2001      	moveq	r0, #1
   b9294:	4620      	movne	r0, r4
   b9296:	b004      	add	sp, #16
   b9298:	bd70      	pop	{r4, r5, r6, pc}

000b929a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b929a:	9800      	ldr	r0, [sp, #0]
   b929c:	4290      	cmp	r0, r2
   b929e:	bf14      	ite	ne
   b92a0:	2001      	movne	r0, #1
   b92a2:	2006      	moveq	r0, #6
   b92a4:	4770      	bx	lr
	...

000b92a8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b92a8:	b510      	push	{r4, lr}
   b92aa:	4b03      	ldr	r3, [pc, #12]	; (b92b8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b92ac:	6003      	str	r3, [r0, #0]
   b92ae:	4604      	mov	r4, r0
   b92b0:	f000 f8cd 	bl	b944e <_ZNSt9type_infoD1Ev>
   b92b4:	4620      	mov	r0, r4
   b92b6:	bd10      	pop	{r4, pc}
   b92b8:	000ba7e8 	.word	0x000ba7e8

000b92bc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b92bc:	b510      	push	{r4, lr}
   b92be:	4604      	mov	r4, r0
   b92c0:	f7ff fff2 	bl	b92a8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b92c4:	4620      	mov	r0, r4
   b92c6:	2108      	movs	r1, #8
   b92c8:	f7ff ffc1 	bl	b924e <_ZdlPvj>
   b92cc:	4620      	mov	r0, r4
   b92ce:	bd10      	pop	{r4, pc}

000b92d0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b92d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b92d4:	461f      	mov	r7, r3
   b92d6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b92da:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b92de:	4598      	cmp	r8, r3
   b92e0:	4606      	mov	r6, r0
   b92e2:	4615      	mov	r5, r2
   b92e4:	d107      	bne.n	b92f6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b92e6:	9907      	ldr	r1, [sp, #28]
   b92e8:	f000 f8b4 	bl	b9454 <_ZNKSt9type_infoeqERKS_>
   b92ec:	b118      	cbz	r0, b92f6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b92ee:	7165      	strb	r5, [r4, #5]
   b92f0:	2000      	movs	r0, #0
   b92f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b92f6:	4639      	mov	r1, r7
   b92f8:	4630      	mov	r0, r6
   b92fa:	f000 f8ab 	bl	b9454 <_ZNKSt9type_infoeqERKS_>
   b92fe:	2800      	cmp	r0, #0
   b9300:	d0f6      	beq.n	b92f0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b9302:	2301      	movs	r3, #1
   b9304:	f8c4 8000 	str.w	r8, [r4]
   b9308:	7125      	strb	r5, [r4, #4]
   b930a:	71a3      	strb	r3, [r4, #6]
   b930c:	e7f0      	b.n	b92f0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b930e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b930e:	b538      	push	{r3, r4, r5, lr}
   b9310:	4615      	mov	r5, r2
   b9312:	461c      	mov	r4, r3
   b9314:	f000 f89e 	bl	b9454 <_ZNKSt9type_infoeqERKS_>
   b9318:	b120      	cbz	r0, b9324 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b931a:	2308      	movs	r3, #8
   b931c:	60e3      	str	r3, [r4, #12]
   b931e:	2306      	movs	r3, #6
   b9320:	6025      	str	r5, [r4, #0]
   b9322:	7123      	strb	r3, [r4, #4]
   b9324:	bd38      	pop	{r3, r4, r5, pc}

000b9326 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b9326:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9328:	4605      	mov	r5, r0
   b932a:	460c      	mov	r4, r1
   b932c:	9201      	str	r2, [sp, #4]
   b932e:	461e      	mov	r6, r3
   b9330:	f000 f890 	bl	b9454 <_ZNKSt9type_infoeqERKS_>
   b9334:	b950      	cbnz	r0, b934c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9336:	2e03      	cmp	r6, #3
   b9338:	d808      	bhi.n	b934c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b933a:	6823      	ldr	r3, [r4, #0]
   b933c:	9a01      	ldr	r2, [sp, #4]
   b933e:	695b      	ldr	r3, [r3, #20]
   b9340:	4629      	mov	r1, r5
   b9342:	4620      	mov	r0, r4
   b9344:	b002      	add	sp, #8
   b9346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b934a:	4718      	bx	r3
   b934c:	b002      	add	sp, #8
   b934e:	bd70      	pop	{r4, r5, r6, pc}

000b9350 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9350:	b510      	push	{r4, lr}
   b9352:	4b03      	ldr	r3, [pc, #12]	; (b9360 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b9354:	6003      	str	r3, [r0, #0]
   b9356:	4604      	mov	r4, r0
   b9358:	f7ff ffa6 	bl	b92a8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b935c:	4620      	mov	r0, r4
   b935e:	bd10      	pop	{r4, pc}
   b9360:	000ba848 	.word	0x000ba848

000b9364 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9364:	b510      	push	{r4, lr}
   b9366:	4604      	mov	r4, r0
   b9368:	f7ff fff2 	bl	b9350 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b936c:	4620      	mov	r0, r4
   b936e:	210c      	movs	r1, #12
   b9370:	f7ff ff6d 	bl	b924e <_ZdlPvj>
   b9374:	4620      	mov	r0, r4
   b9376:	bd10      	pop	{r4, pc}

000b9378 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b9378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b937a:	9f08      	ldr	r7, [sp, #32]
   b937c:	4297      	cmp	r7, r2
   b937e:	4605      	mov	r5, r0
   b9380:	460e      	mov	r6, r1
   b9382:	4614      	mov	r4, r2
   b9384:	d00a      	beq.n	b939c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b9386:	68a8      	ldr	r0, [r5, #8]
   b9388:	6802      	ldr	r2, [r0, #0]
   b938a:	9708      	str	r7, [sp, #32]
   b938c:	6a15      	ldr	r5, [r2, #32]
   b938e:	4631      	mov	r1, r6
   b9390:	4622      	mov	r2, r4
   b9392:	46ac      	mov	ip, r5
   b9394:	b003      	add	sp, #12
   b9396:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b939a:	4760      	bx	ip
   b939c:	4619      	mov	r1, r3
   b939e:	9301      	str	r3, [sp, #4]
   b93a0:	f000 f858 	bl	b9454 <_ZNKSt9type_infoeqERKS_>
   b93a4:	9b01      	ldr	r3, [sp, #4]
   b93a6:	2800      	cmp	r0, #0
   b93a8:	d0ed      	beq.n	b9386 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b93aa:	2006      	movs	r0, #6
   b93ac:	b003      	add	sp, #12
   b93ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b93b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b93b0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b93b4:	460d      	mov	r5, r1
   b93b6:	4619      	mov	r1, r3
   b93b8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b93bc:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b93c0:	4681      	mov	r9, r0
   b93c2:	4617      	mov	r7, r2
   b93c4:	4698      	mov	r8, r3
   b93c6:	f000 f845 	bl	b9454 <_ZNKSt9type_infoeqERKS_>
   b93ca:	b190      	cbz	r0, b93f2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b93cc:	2d00      	cmp	r5, #0
   b93ce:	6034      	str	r4, [r6, #0]
   b93d0:	7137      	strb	r7, [r6, #4]
   b93d2:	db09      	blt.n	b93e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b93d4:	1961      	adds	r1, r4, r5
   b93d6:	458a      	cmp	sl, r1
   b93d8:	bf0c      	ite	eq
   b93da:	2106      	moveq	r1, #6
   b93dc:	2101      	movne	r1, #1
   b93de:	71b1      	strb	r1, [r6, #6]
   b93e0:	2000      	movs	r0, #0
   b93e2:	b001      	add	sp, #4
   b93e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b93e8:	3502      	adds	r5, #2
   b93ea:	d1f9      	bne.n	b93e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b93ec:	2301      	movs	r3, #1
   b93ee:	71b3      	strb	r3, [r6, #6]
   b93f0:	e7f6      	b.n	b93e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b93f2:	4554      	cmp	r4, sl
   b93f4:	d106      	bne.n	b9404 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b93f6:	4659      	mov	r1, fp
   b93f8:	4648      	mov	r0, r9
   b93fa:	f000 f82b 	bl	b9454 <_ZNKSt9type_infoeqERKS_>
   b93fe:	b108      	cbz	r0, b9404 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9400:	7177      	strb	r7, [r6, #5]
   b9402:	e7ed      	b.n	b93e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9404:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9408:	6803      	ldr	r3, [r0, #0]
   b940a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b940e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b9412:	69dc      	ldr	r4, [r3, #28]
   b9414:	463a      	mov	r2, r7
   b9416:	4643      	mov	r3, r8
   b9418:	4629      	mov	r1, r5
   b941a:	46a4      	mov	ip, r4
   b941c:	b001      	add	sp, #4
   b941e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9422:	4760      	bx	ip

000b9424 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9428:	4607      	mov	r7, r0
   b942a:	460c      	mov	r4, r1
   b942c:	4615      	mov	r5, r2
   b942e:	461e      	mov	r6, r3
   b9430:	f7ff ff6d 	bl	b930e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b9434:	b948      	cbnz	r0, b944a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b9436:	68b8      	ldr	r0, [r7, #8]
   b9438:	6803      	ldr	r3, [r0, #0]
   b943a:	699f      	ldr	r7, [r3, #24]
   b943c:	462a      	mov	r2, r5
   b943e:	4633      	mov	r3, r6
   b9440:	4621      	mov	r1, r4
   b9442:	46bc      	mov	ip, r7
   b9444:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9448:	4760      	bx	ip
   b944a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b944e <_ZNSt9type_infoD1Ev>:
   b944e:	4770      	bx	lr

000b9450 <_ZNKSt9type_info14__is_pointer_pEv>:
   b9450:	2000      	movs	r0, #0
   b9452:	4770      	bx	lr

000b9454 <_ZNKSt9type_infoeqERKS_>:
   b9454:	4281      	cmp	r1, r0
   b9456:	b508      	push	{r3, lr}
   b9458:	d00e      	beq.n	b9478 <_ZNKSt9type_infoeqERKS_+0x24>
   b945a:	6840      	ldr	r0, [r0, #4]
   b945c:	7803      	ldrb	r3, [r0, #0]
   b945e:	2b2a      	cmp	r3, #42	; 0x2a
   b9460:	d00c      	beq.n	b947c <_ZNKSt9type_infoeqERKS_+0x28>
   b9462:	6849      	ldr	r1, [r1, #4]
   b9464:	780b      	ldrb	r3, [r1, #0]
   b9466:	2b2a      	cmp	r3, #42	; 0x2a
   b9468:	bf08      	it	eq
   b946a:	3101      	addeq	r1, #1
   b946c:	f000 fb06 	bl	b9a7c <strcmp>
   b9470:	fab0 f080 	clz	r0, r0
   b9474:	0940      	lsrs	r0, r0, #5
   b9476:	bd08      	pop	{r3, pc}
   b9478:	2001      	movs	r0, #1
   b947a:	e7fc      	b.n	b9476 <_ZNKSt9type_infoeqERKS_+0x22>
   b947c:	2000      	movs	r0, #0
   b947e:	e7fa      	b.n	b9476 <_ZNKSt9type_infoeqERKS_+0x22>

000b9480 <__aeabi_drsub>:
   b9480:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b9484:	e002      	b.n	b948c <__adddf3>
   b9486:	bf00      	nop

000b9488 <__aeabi_dsub>:
   b9488:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b948c <__adddf3>:
   b948c:	b530      	push	{r4, r5, lr}
   b948e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b9492:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b9496:	ea94 0f05 	teq	r4, r5
   b949a:	bf08      	it	eq
   b949c:	ea90 0f02 	teqeq	r0, r2
   b94a0:	bf1f      	itttt	ne
   b94a2:	ea54 0c00 	orrsne.w	ip, r4, r0
   b94a6:	ea55 0c02 	orrsne.w	ip, r5, r2
   b94aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b94ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b94b2:	f000 80e2 	beq.w	b967a <__adddf3+0x1ee>
   b94b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b94ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b94be:	bfb8      	it	lt
   b94c0:	426d      	neglt	r5, r5
   b94c2:	dd0c      	ble.n	b94de <__adddf3+0x52>
   b94c4:	442c      	add	r4, r5
   b94c6:	ea80 0202 	eor.w	r2, r0, r2
   b94ca:	ea81 0303 	eor.w	r3, r1, r3
   b94ce:	ea82 0000 	eor.w	r0, r2, r0
   b94d2:	ea83 0101 	eor.w	r1, r3, r1
   b94d6:	ea80 0202 	eor.w	r2, r0, r2
   b94da:	ea81 0303 	eor.w	r3, r1, r3
   b94de:	2d36      	cmp	r5, #54	; 0x36
   b94e0:	bf88      	it	hi
   b94e2:	bd30      	pophi	{r4, r5, pc}
   b94e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b94e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b94ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b94f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b94f4:	d002      	beq.n	b94fc <__adddf3+0x70>
   b94f6:	4240      	negs	r0, r0
   b94f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b94fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b9500:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9504:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b9508:	d002      	beq.n	b9510 <__adddf3+0x84>
   b950a:	4252      	negs	r2, r2
   b950c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9510:	ea94 0f05 	teq	r4, r5
   b9514:	f000 80a7 	beq.w	b9666 <__adddf3+0x1da>
   b9518:	f1a4 0401 	sub.w	r4, r4, #1
   b951c:	f1d5 0e20 	rsbs	lr, r5, #32
   b9520:	db0d      	blt.n	b953e <__adddf3+0xb2>
   b9522:	fa02 fc0e 	lsl.w	ip, r2, lr
   b9526:	fa22 f205 	lsr.w	r2, r2, r5
   b952a:	1880      	adds	r0, r0, r2
   b952c:	f141 0100 	adc.w	r1, r1, #0
   b9530:	fa03 f20e 	lsl.w	r2, r3, lr
   b9534:	1880      	adds	r0, r0, r2
   b9536:	fa43 f305 	asr.w	r3, r3, r5
   b953a:	4159      	adcs	r1, r3
   b953c:	e00e      	b.n	b955c <__adddf3+0xd0>
   b953e:	f1a5 0520 	sub.w	r5, r5, #32
   b9542:	f10e 0e20 	add.w	lr, lr, #32
   b9546:	2a01      	cmp	r2, #1
   b9548:	fa03 fc0e 	lsl.w	ip, r3, lr
   b954c:	bf28      	it	cs
   b954e:	f04c 0c02 	orrcs.w	ip, ip, #2
   b9552:	fa43 f305 	asr.w	r3, r3, r5
   b9556:	18c0      	adds	r0, r0, r3
   b9558:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b955c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9560:	d507      	bpl.n	b9572 <__adddf3+0xe6>
   b9562:	f04f 0e00 	mov.w	lr, #0
   b9566:	f1dc 0c00 	rsbs	ip, ip, #0
   b956a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b956e:	eb6e 0101 	sbc.w	r1, lr, r1
   b9572:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b9576:	d31b      	bcc.n	b95b0 <__adddf3+0x124>
   b9578:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b957c:	d30c      	bcc.n	b9598 <__adddf3+0x10c>
   b957e:	0849      	lsrs	r1, r1, #1
   b9580:	ea5f 0030 	movs.w	r0, r0, rrx
   b9584:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b9588:	f104 0401 	add.w	r4, r4, #1
   b958c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b9590:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b9594:	f080 809a 	bcs.w	b96cc <__adddf3+0x240>
   b9598:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b959c:	bf08      	it	eq
   b959e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b95a2:	f150 0000 	adcs.w	r0, r0, #0
   b95a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b95aa:	ea41 0105 	orr.w	r1, r1, r5
   b95ae:	bd30      	pop	{r4, r5, pc}
   b95b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b95b4:	4140      	adcs	r0, r0
   b95b6:	eb41 0101 	adc.w	r1, r1, r1
   b95ba:	3c01      	subs	r4, #1
   b95bc:	bf28      	it	cs
   b95be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b95c2:	d2e9      	bcs.n	b9598 <__adddf3+0x10c>
   b95c4:	f091 0f00 	teq	r1, #0
   b95c8:	bf04      	itt	eq
   b95ca:	4601      	moveq	r1, r0
   b95cc:	2000      	moveq	r0, #0
   b95ce:	fab1 f381 	clz	r3, r1
   b95d2:	bf08      	it	eq
   b95d4:	3320      	addeq	r3, #32
   b95d6:	f1a3 030b 	sub.w	r3, r3, #11
   b95da:	f1b3 0220 	subs.w	r2, r3, #32
   b95de:	da0c      	bge.n	b95fa <__adddf3+0x16e>
   b95e0:	320c      	adds	r2, #12
   b95e2:	dd08      	ble.n	b95f6 <__adddf3+0x16a>
   b95e4:	f102 0c14 	add.w	ip, r2, #20
   b95e8:	f1c2 020c 	rsb	r2, r2, #12
   b95ec:	fa01 f00c 	lsl.w	r0, r1, ip
   b95f0:	fa21 f102 	lsr.w	r1, r1, r2
   b95f4:	e00c      	b.n	b9610 <__adddf3+0x184>
   b95f6:	f102 0214 	add.w	r2, r2, #20
   b95fa:	bfd8      	it	le
   b95fc:	f1c2 0c20 	rsble	ip, r2, #32
   b9600:	fa01 f102 	lsl.w	r1, r1, r2
   b9604:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9608:	bfdc      	itt	le
   b960a:	ea41 010c 	orrle.w	r1, r1, ip
   b960e:	4090      	lslle	r0, r2
   b9610:	1ae4      	subs	r4, r4, r3
   b9612:	bfa2      	ittt	ge
   b9614:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9618:	4329      	orrge	r1, r5
   b961a:	bd30      	popge	{r4, r5, pc}
   b961c:	ea6f 0404 	mvn.w	r4, r4
   b9620:	3c1f      	subs	r4, #31
   b9622:	da1c      	bge.n	b965e <__adddf3+0x1d2>
   b9624:	340c      	adds	r4, #12
   b9626:	dc0e      	bgt.n	b9646 <__adddf3+0x1ba>
   b9628:	f104 0414 	add.w	r4, r4, #20
   b962c:	f1c4 0220 	rsb	r2, r4, #32
   b9630:	fa20 f004 	lsr.w	r0, r0, r4
   b9634:	fa01 f302 	lsl.w	r3, r1, r2
   b9638:	ea40 0003 	orr.w	r0, r0, r3
   b963c:	fa21 f304 	lsr.w	r3, r1, r4
   b9640:	ea45 0103 	orr.w	r1, r5, r3
   b9644:	bd30      	pop	{r4, r5, pc}
   b9646:	f1c4 040c 	rsb	r4, r4, #12
   b964a:	f1c4 0220 	rsb	r2, r4, #32
   b964e:	fa20 f002 	lsr.w	r0, r0, r2
   b9652:	fa01 f304 	lsl.w	r3, r1, r4
   b9656:	ea40 0003 	orr.w	r0, r0, r3
   b965a:	4629      	mov	r1, r5
   b965c:	bd30      	pop	{r4, r5, pc}
   b965e:	fa21 f004 	lsr.w	r0, r1, r4
   b9662:	4629      	mov	r1, r5
   b9664:	bd30      	pop	{r4, r5, pc}
   b9666:	f094 0f00 	teq	r4, #0
   b966a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b966e:	bf06      	itte	eq
   b9670:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b9674:	3401      	addeq	r4, #1
   b9676:	3d01      	subne	r5, #1
   b9678:	e74e      	b.n	b9518 <__adddf3+0x8c>
   b967a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b967e:	bf18      	it	ne
   b9680:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9684:	d029      	beq.n	b96da <__adddf3+0x24e>
   b9686:	ea94 0f05 	teq	r4, r5
   b968a:	bf08      	it	eq
   b968c:	ea90 0f02 	teqeq	r0, r2
   b9690:	d005      	beq.n	b969e <__adddf3+0x212>
   b9692:	ea54 0c00 	orrs.w	ip, r4, r0
   b9696:	bf04      	itt	eq
   b9698:	4619      	moveq	r1, r3
   b969a:	4610      	moveq	r0, r2
   b969c:	bd30      	pop	{r4, r5, pc}
   b969e:	ea91 0f03 	teq	r1, r3
   b96a2:	bf1e      	ittt	ne
   b96a4:	2100      	movne	r1, #0
   b96a6:	2000      	movne	r0, #0
   b96a8:	bd30      	popne	{r4, r5, pc}
   b96aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b96ae:	d105      	bne.n	b96bc <__adddf3+0x230>
   b96b0:	0040      	lsls	r0, r0, #1
   b96b2:	4149      	adcs	r1, r1
   b96b4:	bf28      	it	cs
   b96b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b96ba:	bd30      	pop	{r4, r5, pc}
   b96bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b96c0:	bf3c      	itt	cc
   b96c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b96c6:	bd30      	popcc	{r4, r5, pc}
   b96c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b96cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b96d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b96d4:	f04f 0000 	mov.w	r0, #0
   b96d8:	bd30      	pop	{r4, r5, pc}
   b96da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b96de:	bf1a      	itte	ne
   b96e0:	4619      	movne	r1, r3
   b96e2:	4610      	movne	r0, r2
   b96e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b96e8:	bf1c      	itt	ne
   b96ea:	460b      	movne	r3, r1
   b96ec:	4602      	movne	r2, r0
   b96ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b96f2:	bf06      	itte	eq
   b96f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b96f8:	ea91 0f03 	teqeq	r1, r3
   b96fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9700:	bd30      	pop	{r4, r5, pc}
   b9702:	bf00      	nop

000b9704 <__aeabi_ui2d>:
   b9704:	f090 0f00 	teq	r0, #0
   b9708:	bf04      	itt	eq
   b970a:	2100      	moveq	r1, #0
   b970c:	4770      	bxeq	lr
   b970e:	b530      	push	{r4, r5, lr}
   b9710:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9714:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9718:	f04f 0500 	mov.w	r5, #0
   b971c:	f04f 0100 	mov.w	r1, #0
   b9720:	e750      	b.n	b95c4 <__adddf3+0x138>
   b9722:	bf00      	nop

000b9724 <__aeabi_i2d>:
   b9724:	f090 0f00 	teq	r0, #0
   b9728:	bf04      	itt	eq
   b972a:	2100      	moveq	r1, #0
   b972c:	4770      	bxeq	lr
   b972e:	b530      	push	{r4, r5, lr}
   b9730:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9734:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9738:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b973c:	bf48      	it	mi
   b973e:	4240      	negmi	r0, r0
   b9740:	f04f 0100 	mov.w	r1, #0
   b9744:	e73e      	b.n	b95c4 <__adddf3+0x138>
   b9746:	bf00      	nop

000b9748 <__aeabi_f2d>:
   b9748:	0042      	lsls	r2, r0, #1
   b974a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b974e:	ea4f 0131 	mov.w	r1, r1, rrx
   b9752:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b9756:	bf1f      	itttt	ne
   b9758:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b975c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9760:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9764:	4770      	bxne	lr
   b9766:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b976a:	bf08      	it	eq
   b976c:	4770      	bxeq	lr
   b976e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b9772:	bf04      	itt	eq
   b9774:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9778:	4770      	bxeq	lr
   b977a:	b530      	push	{r4, r5, lr}
   b977c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b9780:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9784:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9788:	e71c      	b.n	b95c4 <__adddf3+0x138>
   b978a:	bf00      	nop

000b978c <__aeabi_ul2d>:
   b978c:	ea50 0201 	orrs.w	r2, r0, r1
   b9790:	bf08      	it	eq
   b9792:	4770      	bxeq	lr
   b9794:	b530      	push	{r4, r5, lr}
   b9796:	f04f 0500 	mov.w	r5, #0
   b979a:	e00a      	b.n	b97b2 <__aeabi_l2d+0x16>

000b979c <__aeabi_l2d>:
   b979c:	ea50 0201 	orrs.w	r2, r0, r1
   b97a0:	bf08      	it	eq
   b97a2:	4770      	bxeq	lr
   b97a4:	b530      	push	{r4, r5, lr}
   b97a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b97aa:	d502      	bpl.n	b97b2 <__aeabi_l2d+0x16>
   b97ac:	4240      	negs	r0, r0
   b97ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b97b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b97b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b97ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b97be:	f43f aed8 	beq.w	b9572 <__adddf3+0xe6>
   b97c2:	f04f 0203 	mov.w	r2, #3
   b97c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b97ca:	bf18      	it	ne
   b97cc:	3203      	addne	r2, #3
   b97ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b97d2:	bf18      	it	ne
   b97d4:	3203      	addne	r2, #3
   b97d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b97da:	f1c2 0320 	rsb	r3, r2, #32
   b97de:	fa00 fc03 	lsl.w	ip, r0, r3
   b97e2:	fa20 f002 	lsr.w	r0, r0, r2
   b97e6:	fa01 fe03 	lsl.w	lr, r1, r3
   b97ea:	ea40 000e 	orr.w	r0, r0, lr
   b97ee:	fa21 f102 	lsr.w	r1, r1, r2
   b97f2:	4414      	add	r4, r2
   b97f4:	e6bd      	b.n	b9572 <__adddf3+0xe6>
   b97f6:	bf00      	nop

000b97f8 <__gedf2>:
   b97f8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b97fc:	e006      	b.n	b980c <__cmpdf2+0x4>
   b97fe:	bf00      	nop

000b9800 <__ledf2>:
   b9800:	f04f 0c01 	mov.w	ip, #1
   b9804:	e002      	b.n	b980c <__cmpdf2+0x4>
   b9806:	bf00      	nop

000b9808 <__cmpdf2>:
   b9808:	f04f 0c01 	mov.w	ip, #1
   b980c:	f84d cd04 	str.w	ip, [sp, #-4]!
   b9810:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9814:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9818:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b981c:	bf18      	it	ne
   b981e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b9822:	d01b      	beq.n	b985c <__cmpdf2+0x54>
   b9824:	b001      	add	sp, #4
   b9826:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b982a:	bf0c      	ite	eq
   b982c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b9830:	ea91 0f03 	teqne	r1, r3
   b9834:	bf02      	ittt	eq
   b9836:	ea90 0f02 	teqeq	r0, r2
   b983a:	2000      	moveq	r0, #0
   b983c:	4770      	bxeq	lr
   b983e:	f110 0f00 	cmn.w	r0, #0
   b9842:	ea91 0f03 	teq	r1, r3
   b9846:	bf58      	it	pl
   b9848:	4299      	cmppl	r1, r3
   b984a:	bf08      	it	eq
   b984c:	4290      	cmpeq	r0, r2
   b984e:	bf2c      	ite	cs
   b9850:	17d8      	asrcs	r0, r3, #31
   b9852:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b9856:	f040 0001 	orr.w	r0, r0, #1
   b985a:	4770      	bx	lr
   b985c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9860:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9864:	d102      	bne.n	b986c <__cmpdf2+0x64>
   b9866:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b986a:	d107      	bne.n	b987c <__cmpdf2+0x74>
   b986c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9870:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9874:	d1d6      	bne.n	b9824 <__cmpdf2+0x1c>
   b9876:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b987a:	d0d3      	beq.n	b9824 <__cmpdf2+0x1c>
   b987c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b9880:	4770      	bx	lr
   b9882:	bf00      	nop

000b9884 <__aeabi_cdrcmple>:
   b9884:	4684      	mov	ip, r0
   b9886:	4610      	mov	r0, r2
   b9888:	4662      	mov	r2, ip
   b988a:	468c      	mov	ip, r1
   b988c:	4619      	mov	r1, r3
   b988e:	4663      	mov	r3, ip
   b9890:	e000      	b.n	b9894 <__aeabi_cdcmpeq>
   b9892:	bf00      	nop

000b9894 <__aeabi_cdcmpeq>:
   b9894:	b501      	push	{r0, lr}
   b9896:	f7ff ffb7 	bl	b9808 <__cmpdf2>
   b989a:	2800      	cmp	r0, #0
   b989c:	bf48      	it	mi
   b989e:	f110 0f00 	cmnmi.w	r0, #0
   b98a2:	bd01      	pop	{r0, pc}

000b98a4 <__aeabi_dcmpeq>:
   b98a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b98a8:	f7ff fff4 	bl	b9894 <__aeabi_cdcmpeq>
   b98ac:	bf0c      	ite	eq
   b98ae:	2001      	moveq	r0, #1
   b98b0:	2000      	movne	r0, #0
   b98b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b98b6:	bf00      	nop

000b98b8 <__aeabi_dcmplt>:
   b98b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b98bc:	f7ff ffea 	bl	b9894 <__aeabi_cdcmpeq>
   b98c0:	bf34      	ite	cc
   b98c2:	2001      	movcc	r0, #1
   b98c4:	2000      	movcs	r0, #0
   b98c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b98ca:	bf00      	nop

000b98cc <__aeabi_dcmple>:
   b98cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   b98d0:	f7ff ffe0 	bl	b9894 <__aeabi_cdcmpeq>
   b98d4:	bf94      	ite	ls
   b98d6:	2001      	movls	r0, #1
   b98d8:	2000      	movhi	r0, #0
   b98da:	f85d fb08 	ldr.w	pc, [sp], #8
   b98de:	bf00      	nop

000b98e0 <__aeabi_dcmpge>:
   b98e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b98e4:	f7ff ffce 	bl	b9884 <__aeabi_cdrcmple>
   b98e8:	bf94      	ite	ls
   b98ea:	2001      	movls	r0, #1
   b98ec:	2000      	movhi	r0, #0
   b98ee:	f85d fb08 	ldr.w	pc, [sp], #8
   b98f2:	bf00      	nop

000b98f4 <__aeabi_dcmpgt>:
   b98f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b98f8:	f7ff ffc4 	bl	b9884 <__aeabi_cdrcmple>
   b98fc:	bf34      	ite	cc
   b98fe:	2001      	movcc	r0, #1
   b9900:	2000      	movcs	r0, #0
   b9902:	f85d fb08 	ldr.w	pc, [sp], #8
   b9906:	bf00      	nop

000b9908 <asctime_r>:
   b9908:	b510      	push	{r4, lr}
   b990a:	460c      	mov	r4, r1
   b990c:	6941      	ldr	r1, [r0, #20]
   b990e:	6903      	ldr	r3, [r0, #16]
   b9910:	6982      	ldr	r2, [r0, #24]
   b9912:	b086      	sub	sp, #24
   b9914:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b9918:	9104      	str	r1, [sp, #16]
   b991a:	6801      	ldr	r1, [r0, #0]
   b991c:	9103      	str	r1, [sp, #12]
   b991e:	6841      	ldr	r1, [r0, #4]
   b9920:	9102      	str	r1, [sp, #8]
   b9922:	6881      	ldr	r1, [r0, #8]
   b9924:	9101      	str	r1, [sp, #4]
   b9926:	68c1      	ldr	r1, [r0, #12]
   b9928:	9100      	str	r1, [sp, #0]
   b992a:	4907      	ldr	r1, [pc, #28]	; (b9948 <asctime_r+0x40>)
   b992c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b9930:	440b      	add	r3, r1
   b9932:	4906      	ldr	r1, [pc, #24]	; (b994c <asctime_r+0x44>)
   b9934:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b9938:	440a      	add	r2, r1
   b993a:	4620      	mov	r0, r4
   b993c:	4904      	ldr	r1, [pc, #16]	; (b9950 <asctime_r+0x48>)
   b993e:	f7fc fe37 	bl	b65b0 <siprintf>
   b9942:	4620      	mov	r0, r4
   b9944:	b006      	add	sp, #24
   b9946:	bd10      	pop	{r4, pc}
   b9948:	000ba8b6 	.word	0x000ba8b6
   b994c:	000ba8a1 	.word	0x000ba8a1
   b9950:	000ba881 	.word	0x000ba881

000b9954 <atoi>:
   b9954:	220a      	movs	r2, #10
   b9956:	2100      	movs	r1, #0
   b9958:	f000 b962 	b.w	b9c20 <strtol>

000b995c <__cxa_atexit>:
   b995c:	b510      	push	{r4, lr}
   b995e:	4c05      	ldr	r4, [pc, #20]	; (b9974 <__cxa_atexit+0x18>)
   b9960:	4613      	mov	r3, r2
   b9962:	b12c      	cbz	r4, b9970 <__cxa_atexit+0x14>
   b9964:	460a      	mov	r2, r1
   b9966:	4601      	mov	r1, r0
   b9968:	2002      	movs	r0, #2
   b996a:	f3af 8000 	nop.w
   b996e:	bd10      	pop	{r4, pc}
   b9970:	4620      	mov	r0, r4
   b9972:	e7fc      	b.n	b996e <__cxa_atexit+0x12>
   b9974:	00000000 	.word	0x00000000

000b9978 <ldiv>:
   b9978:	2900      	cmp	r1, #0
   b997a:	b510      	push	{r4, lr}
   b997c:	fb91 f4f2 	sdiv	r4, r1, r2
   b9980:	fb02 1314 	mls	r3, r2, r4, r1
   b9984:	db06      	blt.n	b9994 <ldiv+0x1c>
   b9986:	2b00      	cmp	r3, #0
   b9988:	da01      	bge.n	b998e <ldiv+0x16>
   b998a:	3401      	adds	r4, #1
   b998c:	1a9b      	subs	r3, r3, r2
   b998e:	e9c0 4300 	strd	r4, r3, [r0]
   b9992:	bd10      	pop	{r4, pc}
   b9994:	2b00      	cmp	r3, #0
   b9996:	bfc4      	itt	gt
   b9998:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   b999c:	189b      	addgt	r3, r3, r2
   b999e:	e7f6      	b.n	b998e <ldiv+0x16>

000b99a0 <memcmp>:
   b99a0:	b510      	push	{r4, lr}
   b99a2:	3901      	subs	r1, #1
   b99a4:	4402      	add	r2, r0
   b99a6:	4290      	cmp	r0, r2
   b99a8:	d101      	bne.n	b99ae <memcmp+0xe>
   b99aa:	2000      	movs	r0, #0
   b99ac:	e005      	b.n	b99ba <memcmp+0x1a>
   b99ae:	7803      	ldrb	r3, [r0, #0]
   b99b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b99b4:	42a3      	cmp	r3, r4
   b99b6:	d001      	beq.n	b99bc <memcmp+0x1c>
   b99b8:	1b18      	subs	r0, r3, r4
   b99ba:	bd10      	pop	{r4, pc}
   b99bc:	3001      	adds	r0, #1
   b99be:	e7f2      	b.n	b99a6 <memcmp+0x6>

000b99c0 <memcpy>:
   b99c0:	440a      	add	r2, r1
   b99c2:	4291      	cmp	r1, r2
   b99c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b99c8:	d100      	bne.n	b99cc <memcpy+0xc>
   b99ca:	4770      	bx	lr
   b99cc:	b510      	push	{r4, lr}
   b99ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   b99d2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b99d6:	4291      	cmp	r1, r2
   b99d8:	d1f9      	bne.n	b99ce <memcpy+0xe>
   b99da:	bd10      	pop	{r4, pc}

000b99dc <memmove>:
   b99dc:	4288      	cmp	r0, r1
   b99de:	b510      	push	{r4, lr}
   b99e0:	eb01 0402 	add.w	r4, r1, r2
   b99e4:	d902      	bls.n	b99ec <memmove+0x10>
   b99e6:	4284      	cmp	r4, r0
   b99e8:	4623      	mov	r3, r4
   b99ea:	d807      	bhi.n	b99fc <memmove+0x20>
   b99ec:	1e43      	subs	r3, r0, #1
   b99ee:	42a1      	cmp	r1, r4
   b99f0:	d008      	beq.n	b9a04 <memmove+0x28>
   b99f2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b99f6:	f803 2f01 	strb.w	r2, [r3, #1]!
   b99fa:	e7f8      	b.n	b99ee <memmove+0x12>
   b99fc:	4402      	add	r2, r0
   b99fe:	4601      	mov	r1, r0
   b9a00:	428a      	cmp	r2, r1
   b9a02:	d100      	bne.n	b9a06 <memmove+0x2a>
   b9a04:	bd10      	pop	{r4, pc}
   b9a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b9a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b9a0e:	e7f7      	b.n	b9a00 <memmove+0x24>

000b9a10 <memset>:
   b9a10:	4402      	add	r2, r0
   b9a12:	4603      	mov	r3, r0
   b9a14:	4293      	cmp	r3, r2
   b9a16:	d100      	bne.n	b9a1a <memset+0xa>
   b9a18:	4770      	bx	lr
   b9a1a:	f803 1b01 	strb.w	r1, [r3], #1
   b9a1e:	e7f9      	b.n	b9a14 <memset+0x4>

000b9a20 <srand>:
   b9a20:	b538      	push	{r3, r4, r5, lr}
   b9a22:	4b10      	ldr	r3, [pc, #64]	; (b9a64 <srand+0x44>)
   b9a24:	681d      	ldr	r5, [r3, #0]
   b9a26:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9a28:	4604      	mov	r4, r0
   b9a2a:	b9b3      	cbnz	r3, b9a5a <srand+0x3a>
   b9a2c:	2018      	movs	r0, #24
   b9a2e:	f7fc fda7 	bl	b6580 <malloc>
   b9a32:	4602      	mov	r2, r0
   b9a34:	63a8      	str	r0, [r5, #56]	; 0x38
   b9a36:	b920      	cbnz	r0, b9a42 <srand+0x22>
   b9a38:	4b0b      	ldr	r3, [pc, #44]	; (b9a68 <srand+0x48>)
   b9a3a:	480c      	ldr	r0, [pc, #48]	; (b9a6c <srand+0x4c>)
   b9a3c:	2142      	movs	r1, #66	; 0x42
   b9a3e:	f7fc fdd7 	bl	b65f0 <__assert_func>
   b9a42:	490b      	ldr	r1, [pc, #44]	; (b9a70 <srand+0x50>)
   b9a44:	4b0b      	ldr	r3, [pc, #44]	; (b9a74 <srand+0x54>)
   b9a46:	e9c0 1300 	strd	r1, r3, [r0]
   b9a4a:	4b0b      	ldr	r3, [pc, #44]	; (b9a78 <srand+0x58>)
   b9a4c:	6083      	str	r3, [r0, #8]
   b9a4e:	230b      	movs	r3, #11
   b9a50:	8183      	strh	r3, [r0, #12]
   b9a52:	2100      	movs	r1, #0
   b9a54:	2001      	movs	r0, #1
   b9a56:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9a5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9a5c:	2200      	movs	r2, #0
   b9a5e:	611c      	str	r4, [r3, #16]
   b9a60:	615a      	str	r2, [r3, #20]
   b9a62:	bd38      	pop	{r3, r4, r5, pc}
   b9a64:	2003d9f8 	.word	0x2003d9f8
   b9a68:	000ba8da 	.word	0x000ba8da
   b9a6c:	000ba8f1 	.word	0x000ba8f1
   b9a70:	abcd330e 	.word	0xabcd330e
   b9a74:	e66d1234 	.word	0xe66d1234
   b9a78:	0005deec 	.word	0x0005deec

000b9a7c <strcmp>:
   b9a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9a80:	f811 3b01 	ldrb.w	r3, [r1], #1
   b9a84:	2a01      	cmp	r2, #1
   b9a86:	bf28      	it	cs
   b9a88:	429a      	cmpcs	r2, r3
   b9a8a:	d0f7      	beq.n	b9a7c <strcmp>
   b9a8c:	1ad0      	subs	r0, r2, r3
   b9a8e:	4770      	bx	lr

000b9a90 <strcpy>:
   b9a90:	4603      	mov	r3, r0
   b9a92:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9a96:	f803 2b01 	strb.w	r2, [r3], #1
   b9a9a:	2a00      	cmp	r2, #0
   b9a9c:	d1f9      	bne.n	b9a92 <strcpy+0x2>
   b9a9e:	4770      	bx	lr

000b9aa0 <strlen>:
   b9aa0:	4603      	mov	r3, r0
   b9aa2:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9aa6:	2a00      	cmp	r2, #0
   b9aa8:	d1fb      	bne.n	b9aa2 <strlen+0x2>
   b9aaa:	1a18      	subs	r0, r3, r0
   b9aac:	3801      	subs	r0, #1
   b9aae:	4770      	bx	lr

000b9ab0 <strncpy>:
   b9ab0:	b510      	push	{r4, lr}
   b9ab2:	3901      	subs	r1, #1
   b9ab4:	4603      	mov	r3, r0
   b9ab6:	b132      	cbz	r2, b9ac6 <strncpy+0x16>
   b9ab8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9abc:	f803 4b01 	strb.w	r4, [r3], #1
   b9ac0:	3a01      	subs	r2, #1
   b9ac2:	2c00      	cmp	r4, #0
   b9ac4:	d1f7      	bne.n	b9ab6 <strncpy+0x6>
   b9ac6:	441a      	add	r2, r3
   b9ac8:	2100      	movs	r1, #0
   b9aca:	4293      	cmp	r3, r2
   b9acc:	d100      	bne.n	b9ad0 <strncpy+0x20>
   b9ace:	bd10      	pop	{r4, pc}
   b9ad0:	f803 1b01 	strb.w	r1, [r3], #1
   b9ad4:	e7f9      	b.n	b9aca <strncpy+0x1a>

000b9ad6 <strnlen>:
   b9ad6:	b510      	push	{r4, lr}
   b9ad8:	4602      	mov	r2, r0
   b9ada:	4401      	add	r1, r0
   b9adc:	428a      	cmp	r2, r1
   b9ade:	4613      	mov	r3, r2
   b9ae0:	d003      	beq.n	b9aea <strnlen+0x14>
   b9ae2:	781c      	ldrb	r4, [r3, #0]
   b9ae4:	3201      	adds	r2, #1
   b9ae6:	2c00      	cmp	r4, #0
   b9ae8:	d1f8      	bne.n	b9adc <strnlen+0x6>
   b9aea:	1a18      	subs	r0, r3, r0
   b9aec:	bd10      	pop	{r4, pc}

000b9aee <strstr>:
   b9aee:	780a      	ldrb	r2, [r1, #0]
   b9af0:	b570      	push	{r4, r5, r6, lr}
   b9af2:	b96a      	cbnz	r2, b9b10 <strstr+0x22>
   b9af4:	bd70      	pop	{r4, r5, r6, pc}
   b9af6:	429a      	cmp	r2, r3
   b9af8:	d109      	bne.n	b9b0e <strstr+0x20>
   b9afa:	460c      	mov	r4, r1
   b9afc:	4605      	mov	r5, r0
   b9afe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   b9b02:	2b00      	cmp	r3, #0
   b9b04:	d0f6      	beq.n	b9af4 <strstr+0x6>
   b9b06:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   b9b0a:	429e      	cmp	r6, r3
   b9b0c:	d0f7      	beq.n	b9afe <strstr+0x10>
   b9b0e:	3001      	adds	r0, #1
   b9b10:	7803      	ldrb	r3, [r0, #0]
   b9b12:	2b00      	cmp	r3, #0
   b9b14:	d1ef      	bne.n	b9af6 <strstr+0x8>
   b9b16:	4618      	mov	r0, r3
   b9b18:	e7ec      	b.n	b9af4 <strstr+0x6>
	...

000b9b1c <_strtol_l.constprop.0>:
   b9b1c:	2b01      	cmp	r3, #1
   b9b1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9b22:	d001      	beq.n	b9b28 <_strtol_l.constprop.0+0xc>
   b9b24:	2b24      	cmp	r3, #36	; 0x24
   b9b26:	d906      	bls.n	b9b36 <_strtol_l.constprop.0+0x1a>
   b9b28:	f7fc fd5a 	bl	b65e0 <__errno>
   b9b2c:	2316      	movs	r3, #22
   b9b2e:	6003      	str	r3, [r0, #0]
   b9b30:	2000      	movs	r0, #0
   b9b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9b36:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9c1c <_strtol_l.constprop.0+0x100>
   b9b3a:	460d      	mov	r5, r1
   b9b3c:	462e      	mov	r6, r5
   b9b3e:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9b42:	f814 700c 	ldrb.w	r7, [r4, ip]
   b9b46:	f017 0708 	ands.w	r7, r7, #8
   b9b4a:	d1f7      	bne.n	b9b3c <_strtol_l.constprop.0+0x20>
   b9b4c:	2c2d      	cmp	r4, #45	; 0x2d
   b9b4e:	d132      	bne.n	b9bb6 <_strtol_l.constprop.0+0x9a>
   b9b50:	782c      	ldrb	r4, [r5, #0]
   b9b52:	2701      	movs	r7, #1
   b9b54:	1cb5      	adds	r5, r6, #2
   b9b56:	2b00      	cmp	r3, #0
   b9b58:	d05b      	beq.n	b9c12 <_strtol_l.constprop.0+0xf6>
   b9b5a:	2b10      	cmp	r3, #16
   b9b5c:	d109      	bne.n	b9b72 <_strtol_l.constprop.0+0x56>
   b9b5e:	2c30      	cmp	r4, #48	; 0x30
   b9b60:	d107      	bne.n	b9b72 <_strtol_l.constprop.0+0x56>
   b9b62:	782c      	ldrb	r4, [r5, #0]
   b9b64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b9b68:	2c58      	cmp	r4, #88	; 0x58
   b9b6a:	d14d      	bne.n	b9c08 <_strtol_l.constprop.0+0xec>
   b9b6c:	786c      	ldrb	r4, [r5, #1]
   b9b6e:	2310      	movs	r3, #16
   b9b70:	3502      	adds	r5, #2
   b9b72:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b9b76:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9b7a:	f04f 0c00 	mov.w	ip, #0
   b9b7e:	fbb8 f9f3 	udiv	r9, r8, r3
   b9b82:	4666      	mov	r6, ip
   b9b84:	fb03 8a19 	mls	sl, r3, r9, r8
   b9b88:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b9b8c:	f1be 0f09 	cmp.w	lr, #9
   b9b90:	d816      	bhi.n	b9bc0 <_strtol_l.constprop.0+0xa4>
   b9b92:	4674      	mov	r4, lr
   b9b94:	42a3      	cmp	r3, r4
   b9b96:	dd24      	ble.n	b9be2 <_strtol_l.constprop.0+0xc6>
   b9b98:	f1bc 0f00 	cmp.w	ip, #0
   b9b9c:	db1e      	blt.n	b9bdc <_strtol_l.constprop.0+0xc0>
   b9b9e:	45b1      	cmp	r9, r6
   b9ba0:	d31c      	bcc.n	b9bdc <_strtol_l.constprop.0+0xc0>
   b9ba2:	d101      	bne.n	b9ba8 <_strtol_l.constprop.0+0x8c>
   b9ba4:	45a2      	cmp	sl, r4
   b9ba6:	db19      	blt.n	b9bdc <_strtol_l.constprop.0+0xc0>
   b9ba8:	fb06 4603 	mla	r6, r6, r3, r4
   b9bac:	f04f 0c01 	mov.w	ip, #1
   b9bb0:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9bb4:	e7e8      	b.n	b9b88 <_strtol_l.constprop.0+0x6c>
   b9bb6:	2c2b      	cmp	r4, #43	; 0x2b
   b9bb8:	bf04      	itt	eq
   b9bba:	782c      	ldrbeq	r4, [r5, #0]
   b9bbc:	1cb5      	addeq	r5, r6, #2
   b9bbe:	e7ca      	b.n	b9b56 <_strtol_l.constprop.0+0x3a>
   b9bc0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9bc4:	f1be 0f19 	cmp.w	lr, #25
   b9bc8:	d801      	bhi.n	b9bce <_strtol_l.constprop.0+0xb2>
   b9bca:	3c37      	subs	r4, #55	; 0x37
   b9bcc:	e7e2      	b.n	b9b94 <_strtol_l.constprop.0+0x78>
   b9bce:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9bd2:	f1be 0f19 	cmp.w	lr, #25
   b9bd6:	d804      	bhi.n	b9be2 <_strtol_l.constprop.0+0xc6>
   b9bd8:	3c57      	subs	r4, #87	; 0x57
   b9bda:	e7db      	b.n	b9b94 <_strtol_l.constprop.0+0x78>
   b9bdc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9be0:	e7e6      	b.n	b9bb0 <_strtol_l.constprop.0+0x94>
   b9be2:	f1bc 0f00 	cmp.w	ip, #0
   b9be6:	da05      	bge.n	b9bf4 <_strtol_l.constprop.0+0xd8>
   b9be8:	2322      	movs	r3, #34	; 0x22
   b9bea:	6003      	str	r3, [r0, #0]
   b9bec:	4646      	mov	r6, r8
   b9bee:	b942      	cbnz	r2, b9c02 <_strtol_l.constprop.0+0xe6>
   b9bf0:	4630      	mov	r0, r6
   b9bf2:	e79e      	b.n	b9b32 <_strtol_l.constprop.0+0x16>
   b9bf4:	b107      	cbz	r7, b9bf8 <_strtol_l.constprop.0+0xdc>
   b9bf6:	4276      	negs	r6, r6
   b9bf8:	2a00      	cmp	r2, #0
   b9bfa:	d0f9      	beq.n	b9bf0 <_strtol_l.constprop.0+0xd4>
   b9bfc:	f1bc 0f00 	cmp.w	ip, #0
   b9c00:	d000      	beq.n	b9c04 <_strtol_l.constprop.0+0xe8>
   b9c02:	1e69      	subs	r1, r5, #1
   b9c04:	6011      	str	r1, [r2, #0]
   b9c06:	e7f3      	b.n	b9bf0 <_strtol_l.constprop.0+0xd4>
   b9c08:	2430      	movs	r4, #48	; 0x30
   b9c0a:	2b00      	cmp	r3, #0
   b9c0c:	d1b1      	bne.n	b9b72 <_strtol_l.constprop.0+0x56>
   b9c0e:	2308      	movs	r3, #8
   b9c10:	e7af      	b.n	b9b72 <_strtol_l.constprop.0+0x56>
   b9c12:	2c30      	cmp	r4, #48	; 0x30
   b9c14:	d0a5      	beq.n	b9b62 <_strtol_l.constprop.0+0x46>
   b9c16:	230a      	movs	r3, #10
   b9c18:	e7ab      	b.n	b9b72 <_strtol_l.constprop.0+0x56>
   b9c1a:	bf00      	nop
   b9c1c:	000ba94b 	.word	0x000ba94b

000b9c20 <strtol>:
   b9c20:	4613      	mov	r3, r2
   b9c22:	460a      	mov	r2, r1
   b9c24:	4601      	mov	r1, r0
   b9c26:	4802      	ldr	r0, [pc, #8]	; (b9c30 <strtol+0x10>)
   b9c28:	6800      	ldr	r0, [r0, #0]
   b9c2a:	f7ff bf77 	b.w	b9b1c <_strtol_l.constprop.0>
   b9c2e:	bf00      	nop
   b9c30:	2003d9f8 	.word	0x2003d9f8

000b9c34 <dynalib_user>:
   b9c34:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   b9c44:	00000000 69676964 65756c67 006f692e     ....digiglue.io.
   b9c54:	6572002f 64726f63 49676e69 7265746e     /.recordingInter
   b9c64:	3a6c6176 00692520 6f706572 6e697472     val: %i.reportin
   b9c74:	746e4967 61767265 25203a6c 53440069     gInterval: %i.DS
   b9c84:	6e204449 7320746f 65726f74 6e692064     ID not stored in
   b9c94:	50454520 2e4d4f52 454c4220 6e6f6320      EEPROM. BLE con
   b9ca4:	20676966 75716572 64657269 46695700     fig required.WiF
   b9cb4:	61662069 64656c69 206f7420 6e6e6f63     i failed to conn
   b9cc4:	2c746365 74616420 6f6e2061 65722074     ect, data not re
   b9cd4:	74726f70 57006465 20694669 6e6e6f63     ported.WiFi conn
   b9ce4:	65746365 72202c64 726f7065 676e6974     ected, reporting
   b9cf4:	74616420 227b0061 61746164 005b3a22      data.{"data":[.
   b9d04:	50007d5d 0054534f 74617453 203a7375     ]}.POST.Status: 
   b9d14:	71655200 79646f42 7b00203a 69736422     .ReqBody: .{"dsi
   b9d24:	003a2264 7622202c 65756c61 2c003a22     d":., "value":.,
   b9d34:	69742220 7473656d 22706d61 2c7d003a      "timestamp":.},
   b9d44:	69614600 2064656c 69206f74 6974696e     .Failed to initi
   b9d54:	7a696c61 494c2065 48443353 73696400     alize LIS3DH.dis
   b9d64:	6e6e6f63 65746365 69570064 63206946     connected.WiFi c
   b9d74:	656e6e6f 64657463 7973202c 6e69636e     onnected, syncin
   b9d84:	69742067 4300656d 65727275 7420746e     g time.Current t
   b9d94:	20656d69 203a7369 57007325 20694669     ime is: %s.WiFi 
   b9da4:	6c696166 74206465 6f63206f 63656e6e     failed to connec
   b9db4:	73202c74 7070696b 20676e69 656d6974     t, skipping time
   b9dc4:	6e797320 6f726863 617a696e 6e6f6974      synchronization
   b9dd4:	70657200 5474726f 61657268 4c420064     .reportThread.BL
   b9de4:	49415745 4c420054 6f632045 63656e6e     EWAIT.BLE connec
   b9df4:	00646574 20454c42 20746f6e 6e6e6f63     ted.BLE not conn
   b9e04:	65746365 63202c64 69746e6f 6e69756e     ected, continuin
   b9e14:	69772067 73206874 65726f74 65732064     g with stored se
   b9e24:	6e697474 002e7367 57656c62 46746961     ttings..bleWaitF
   b9e34:	6f43726f 6769666e 71657200 74736575     orConfig.request
   b9e44:	20676e69 6c796170 4164616f 73656363     ing payloadAcces
   b9e54:	636f4c73 6170006b 616f6c79 63634164     sLock.payloadAcc
   b9e64:	4c737365 206b636f 656c6572 64657361     essLock released
   b9e74:	20796220 4f434552 4e494452 69460047      by RECORDING.Fi
   b9e84:	20747372 64616572 00676e69 6572430a     rst reading..Cre
   b9e94:	746e6564 736c6169 65726120 72756320     dentials are cur
   b9ea4:	746e6572 7320796c 65726f74 6f662064     rently stored fo
   b9eb4:	5b0a3a72 000a2c00 6e450a5d 20726574     r:.[.,..].Enter 
   b9ec4:	7774656e 206b726f 44495353 6c622820     network SSID (bl
   b9ed4:	206b6e61 73206f74 2c70696b 6c632720     ank to skip, 'cl
   b9ee4:	27726165 206f7420 65736572 72632074     ear' to reset cr
   b9ef4:	6e656465 6c616974 203a2973 75430a00     edentials): ..Cu
   b9f04:	6e657272 53442074 69204449 005b2073     rrent DSID is [.
   b9f14:	6e450a5d 20726574 69766564 44206563     ].Enter device D
   b9f24:	20444953 616c6228 74206b6e 6b73206f     SID (blank to sk
   b9f34:	3a297069 6c630020 00726165 746e450a     ip): .clear..Ent
   b9f44:	6e207265 6f777465 70206b72 77737361     er network passw
   b9f54:	3a64726f 0a0a0020 64657243 69746e65     ord: ...Credenti
   b9f64:	20736c61 20746573 68746977 69737320     als set with ssi
   b9f74:	00203a64 7361700a 726f7773 00203a64     d: ..password: .
   b9f84:	0a000a0a 65746e45 74272072 27747365     ....Enter 'test'
   b9f94:	206f7420 74736574 65726320 746e6564      to test credent
   b9fa4:	736c6169 6c622820 206b6e61 73206f74     ials (blank to s
   b9fb4:	2970696b 6400203a 20646973 65746e65     kip): .dsid ente
   b9fc4:	00646572 64697364 0a00203a 72727543     red.dsid: ..Curr
   b9fd4:	20746e65 756c6176 6f662065 61642072     ent value for da
   b9fe4:	63206174 656c6c6f 6f697463 6e69206e     ta collection in
   b9ff4:	76726574 69206c61 005b2073 6e450a5d     terval is [.].En
   ba004:	20726574 656d6974 74656220 6e656577     ter time between
   ba014:	74616420 6f632061 63656c6c 6e6f6974      data collection
   ba024:	20736120 69206e61 6765746e 69207265      as an integer i
   ba034:	696d206e 73696c6c 6e6f6365 28207364     n milliseconds (
   ba044:	6e616c62 6f74206b 696b7320 203a2970     blank to skip): 
   ba054:	75430a00 6e657272 61762074 2065756c     ..Current value 
   ba064:	20726f66 69466957 6e6f6320 7463656e     for WiFi connect
   ba074:	206e6f69 65746e69 6c617672 20736920     ion interval is 
   ba084:	0a5d005b 65746e45 69742072 6220656d     [.].Enter time b
   ba094:	65777465 57206e65 20694669 6e6e6f63     etween WiFi conn
   ba0a4:	69746365 20736e6f 61207361 6e69206e     ections as an in
   ba0b4:	65676574 6e692072 63657320 73646e6f     teger in seconds
   ba0c4:	6c622820 206b6e61 73206f74 2970696b      (blank to skip)
   ba0d4:	0a00203a 65746e45 6f272072 20276174     : ..Enter 'ota' 
   ba0e4:	77206f74 20746961 20726f66 2041544f     to wait for OTA 
   ba0f4:	61647075 28206574 6e616c62 6f74206b     update (blank to
   ba104:	696b7320 203a2970 61746f00 46695700      skip): .ota.WiF
   ba114:	6f632069 63656e6e 2c646574 61776120     i connected, awa
   ba124:	6e697469 70752067 65746164 77410a00     iting update..Aw
   ba134:	69746961 4f20676e 75204154 74616470     aiting OTA updat
   ba144:	45360065 30303034 422d3130 2d334135     e.6E400001-B5A3-
   ba154:	33393346 4130452d 35452d39 34324530     F393-E0A9-E50E24
   ba164:	41434344 36004539 30303445 2d323030     DCCA9E.6E400002-
   ba174:	33413542 3933462d 30452d33 452d3941     B5A3-F393-E0A9-E
   ba184:	32453035 43434434 00453941 30344536     50E24DCCA9E.6E40
   ba194:	33303030 4135422d 33462d33 452d3339     0003-B5A3-F393-E
   ba1a4:	2d394130 45303545 43443432 45394143     0A9-E50E24DCCA9E
   ba1b4:	00787400 41007872 70656363 70610074     .tx.rx.Accept.ap
   ba1c4:	63696c70 6f697461 736a2f6e 43006e6f     plication/json.C
   ba1d4:	65746e6f 542d746e 00657079              ontent-Type.

000ba1e0 <_ZTV15Adafruit_LIS3DH>:
	...
   ba1e8:	000b40b3 000b524d 000b5481 000b585d     .@..MR...T..]X..
   ba1f8:	000b5485 70747448 65696c43 093e746e     .T..HttpClient>.
   ba208:	6e6e6f43 69746365 7420676e 00203a6f     Connecting to: .
   ba218:	70747448 65696c43 093e746e 6e6e6f43     HttpClient>.Conn
   ba228:	69746365 7420676e 5049206f 2000203a     ecting to IP: . 
   ba238:	50545448 302e312f 48000a0d 43707474     HTTP/1.0...HttpC
   ba248:	6e65696c 53093e74 74726174 20666f20     lient>.Start of 
   ba258:	50545448 71655220 74736575 6c63002e     HTTP Request..cl
   ba268:	0065736f 6e6e6f43 69746365 48006e6f     ose.Connection.H
   ba278:	43707474 6e65696c 43093e74 656e6e6f     ttpClient>.Conne
   ba288:	6f697463 6166206e 64656c69 4f48002e     ction failed..HO
   ba298:	43005453 65746e6f 4c2d746e 74676e65     ST.Content-Lengt
   ba2a8:	74480068 6c437074 746e6569 6e45093e     h.HttpClient>.En
   ba2b8:	666f2064 54544820 65522050 73657571     d of HTTP Reques
   ba2c8:	0d002e74 7474480a 696c4370 3e746e65     t....HttpClient>
   ba2d8:	63655209 69766965 5420676e 74205043     .Receiving TCP t
   ba2e8:	736e6172 69746361 6f206e6f 20002066     ransaction of . 
   ba2f8:	65747962 48002e73 43707474 6e65696c     bytes..HttpClien
   ba308:	45093e74 726f7272 6552203a 6e6f7073     t>.Error: Respon
   ba318:	62206573 2079646f 6772616c 74207265     se body larger t
   ba328:	206e6168 66667562 002e7265 74480a0d     han buffer....Ht
   ba338:	6c437074 746e6569 6e45093e 666f2064     tpClient>.End of
   ba348:	50435420 61727420 6361736e 6e6f6974      TCP transaction
   ba358:	0a0d002e 70747448 65696c43 093e746e     ....HttpClient>.
   ba368:	6f727245 54203a72 6f656d69 77207475     Error: Timeout w
   ba378:	656c6968 61657220 676e6964 73657220     hile reading res
   ba388:	736e6f70 0d002e65 7474480a 696c4370     ponse....HttpCli
   ba398:	3e746e65 646e4509 20666f20 50545448     ent>.End of HTTP
   ba3a8:	73655220 736e6f70 00282065 2e29736d      Response (.ms).
   ba3b8:	74744800 696c4370 3e746e65 61745309     .HttpClient>.Sta
   ba3c8:	20737574 65646f43 0d00203a 000a0d0a     tus Code: ......
   ba3d8:	70747448 65696c43 093e746e 6f727245     HttpClient>.Erro
   ba3e8:	43203a72 74276e61 6e696620 54482064     r: Can't find HT
   ba3f8:	72205054 6f707365 2065736e 79646f62     TP response body
   ba408:	6977002e 676e6972 656c622e 61745300     ..wiring.ble.Sta
   ba418:	64207472 6f637369 69726576 7320676e     rt discovering s
   ba428:	69767265 2e736563 65655000 65642072     ervices..Peer de
   ba438:	65636976 20736920 7373696d 21676e69     vice is missing!
   ba448:	69614600 2064656c 61206f74 6e657070     .Failed to appen
   ba458:	65702064 43207265 72746e65 64206c61     d peer Central d
   ba468:	63697665 43002e65 656e6e6f 64657463     evice..Connected
   ba478:	20796220 746e6543 206c6172 69766564      by Central devi
   ba488:	002e6563 63736944 656e6e6f 64657463     ce..Disconnected
   ba498:	20796220 6f6d6572 64206574 63697665      by remote devic
   ba4a8:	44002e65 696c7075 65746163 68632064     e..Duplicated ch
   ba4b8:	63617261 69726574 63697473 6e616320     aracteristic can
   ba4c8:	20746f6e 61206562 64656464 6146002e     not be added..Fa
   ba4d8:	64656c69 206f7420 65707061 6c20646e     iled to append l
   ba4e8:	6c61636f 61686320 74636172 73697265     ocal characteris
   ba4f8:	2e636974 00000000                       tic.....

000ba500 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba508:	000b662d 000b6691 000b6857 000b66bb     -f...f..Wh...f..
   ba518:	000b6631                                1f..

000ba51c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba524:	000b6629 000b669f 000b662b 000b66c1     )f...f..+f...f..
   ba534:	000b6651                                Qf..

000ba538 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba540:	000b6627 000b66ad 000b70b9 000b66c7     'f...f...p...f..
   ba550:	000b6671                                qf..

000ba554 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   ba560:	34fb0000 00805f9b 10008000 00000000     ...4._..........
	...

000ba572 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   ba572:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000ba582 <_ZN8particle7BleUuid9BASE_UUIDE>:
   ba582:	5f9b34fb 80000080 00001000 00000000     .4._............
	...

000ba594 <_ZTVN5spark13EthernetClassE>:
	...
   ba59c:	000b7b17 000b7b0d 000b7b03 000b7af9     .{...{...{...z..
   ba5ac:	000b7aed 000b7ae1 000b7d9d 000b7da5     .z...z...}...}..
   ba5bc:	000b7ad5 000b7acd 000b7ac3 000b7ab9     .z...z...z...z..
   ba5cc:	000b7dd5                                .}..

000ba5d0 <_ZTV7TwoWire>:
	...
   ba5d8:	000b7b35 000b7b7f 000b7b57 000b7b37     5{...{..W{..7{..
   ba5e8:	000b7b5f 000b7b67 000b7b6f 000b7b77     _{..g{..o{..w{..

000ba5f8 <_ZTV9IPAddress>:
	...
   ba600:	000b7c41 000b7c31 000b7c33 00707061     A|..1|..3|..app.

000ba610 <_ZTVN5spark12NetworkClassE>:
	...
   ba618:	000b7d5d 000b7d67 000b7d71 000b7d7b     ]}..g}..q}..{}..
   ba628:	000b7d85 000b7d91 000b7d9d 000b7da5     .}...}...}...}..
   ba638:	000b7dad 000b7db9 000b7dc1 000b7dcb     .}...}...}...}..
   ba648:	000b7dd5                                .}..

000ba64c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   ba64c:	18100800 38302820 69726977 7200676e     .... (08wiring.r
   ba65c:	20766365 6f727265 203d2072 00006425     ecv error = %d..

000ba66c <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba674:	000b8535 000b8559 000b8a8b 000b8567     5...Y.......g...
   ba684:	000b8539                                9...

000ba688 <_ZTV9TCPClient>:
	...
   ba690:	000b85e5 000b8619 000b84b1 000b84cb     ................
   ba6a0:	000b8921 000b84f5 000b8797 000b8529     !...........)...
   ba6b0:	000b8829 000b8669 000b87c5 000b89d5     )...i...........
   ba6c0:	000b8765 000b852b 000b84dd 000b856d     e...+.......m...
   ba6d0:	000b8649 252d5925 64252d6d 3a482554     I...%Y-%m-%dT%H:
   ba6e0:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000ba6f0 <_ZTV11USARTSerial>:
	...
   ba6f8:	000b8b95 000b8c01 000b8bd9 000b7ec1     .............~..
   ba708:	000b8ba9 000b8bc5 000b8bb7 000b8bd3     ................
   ba718:	000b8b97 000b8b9b                       ........

000ba720 <_ZTV9USBSerial>:
	...
   ba728:	000b8c95 000b8cfd 000b8cd3 000b7ec1     .............~..
   ba738:	000b8cc5 000b8c97 000b8ca7 000b8cf7     ................
   ba748:	000b8cb7 000b8c91                       ........

000ba750 <_ZTVN5spark9WiFiClassE>:
	...
   ba758:	000b41c3 000b8e09 000b8dff 000b41cd     .A...........A..
   ba768:	000b41ab 000b41b7 000b7d9d 000b7da5     .A...A...}...}..
   ba778:	000b8df3 000b8deb 000b8de1 000b8dd7     ................
   ba788:	000b7dd5                                .}..

000ba78c <_ZSt7nothrow>:
	...

000ba78d <_ZTSSt19_Sp_make_shared_tag>:
   ba78d:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   ba79d:	5f646572 00676174                        red_tag....

000ba7a8 <_ZTISt19_Sp_make_shared_tag>:
   ba7a8:	000ba7e8 000ba78d                       ........

000ba7b0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   ba7b0:	000ba848 000ba7bc 000ba86c              H.......l...

000ba7bc <_ZTSN10__cxxabiv117__class_type_infoE>:
   ba7bc:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   ba7cc:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   ba7dc:	00000045                                E...

000ba7e0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   ba7e0:	00000000 000ba7b0 000b92a9 000b92bd     ................
   ba7f0:	000b9451 000b9451 000b9327 000b9269     Q...Q...'...i...
   ba800:	000b930f 000b92d1 000b929b              ............

000ba80c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   ba80c:	000ba848 000ba818 000ba7b0              H...........

000ba818 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   ba818:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   ba828:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   ba838:	456f666e 00000000                       nfoE....

000ba840 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   ba840:	00000000 000ba80c 000b9351 000b9365     ........Q...e...
   ba850:	000b9451 000b9451 000b9327 000b9269     Q...Q...'...i...
   ba860:	000b9425 000b93b1 000b9379              %.......y...

000ba86c <_ZTISt9type_info>:
   ba86c:	000ba7e8 000ba874                       ....t...

000ba874 <_ZTSSt9type_info>:
   ba874:	74397453 5f657079 6f666e69 332e2500     St9type_info.%.3
   ba884:	2e252073 33257333 2e252064 253a6432     s %.3s%3d %.2d:%
   ba894:	3a64322e 64322e25 0a642520               .2d:%.2d %d..

000ba8a1 <day_name.1>:
   ba8a1:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   ba8b1:	61536972                                 riSat

000ba8b6 <mon_name.0>:
   ba8b6:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   ba8c6:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   ba8d6:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   ba8e6:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   ba8f6:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   ba906:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   ba916:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   ba926:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   ba936:	62696c2f 74732f63 62696c64 6e61722f     /libc/stdlib/ran
   ba946:	00632e64                                d.c.

000ba94a <_ctype_>:
   ba94a:	20202000 20202020 28282020 20282828     .         ((((( 
   ba95a:	20202020 20202020 20202020 20202020                     
   ba96a:	10108820 10101010 10101010 10101010      ...............
   ba97a:	04040410 04040404 10040404 10101010     ................
   ba98a:	41411010 41414141 01010101 01010101     ..AAAAAA........
   ba99a:	01010101 01010101 01010101 10101010     ................
   ba9aa:	42421010 42424242 02020202 02020202     ..BBBBBB........
   ba9ba:	02020202 02020202 02020202 10101010     ................
   ba9ca:	00000020 00000000 00000000 00000000      ...............
	...

000baa4b <link_const_variable_data_end>:
	...

000baa4c <link_constructors_location>:
   baa4c:	000b525d 	.word	0x000b525d
   baa50:	000b7a91 	.word	0x000b7a91
   baa54:	000b7b21 	.word	0x000b7b21
   baa58:	000b7d4d 	.word	0x000b7d4d
   baa5c:	000b7ead 	.word	0x000b7ead
   baa60:	000b8001 	.word	0x000b8001
   baa64:	000b8475 	.word	0x000b8475
   baa68:	000b8b81 	.word	0x000b8b81
   baa6c:	000b8e39 	.word	0x000b8e39
