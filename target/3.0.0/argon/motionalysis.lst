
c:/Users/Arjun/Documents/GitHub/motionalysis/target/3.0.0/argon/motionalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000065c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000da5e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000090  2003e01c  000da5e4  0001e01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000744  2003e0ac  2003e0ac  0002e0ac  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000da674  000da674  0002a674  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000da69c  000da69c  0002a69c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001c1464  00000000  00000000  0002a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001a361  00000000  00000000  001ebb04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003cca2  00000000  00000000  00205e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003328  00000000  00000000  00242b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000aa18  00000000  00000000  00245e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003c786  00000000  00000000  00250847  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00044a19  00000000  00000000  0028cfcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0013228a  00000000  00000000  002d19e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000915c  00000000  00000000  00403c70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
   d4026:	b508      	push	{r3, lr}
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fc93 	bl	d995c <memcpy>
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fcb5 	bl	d99ac <memset>
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e01c 	.word	0x2003e01c
   d404c:	000da5e4 	.word	0x000da5e4
   d4050:	2003e0ac 	.word	0x2003e0ac
   d4054:	2003e0ac 	.word	0x2003e0ac
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
   d405c:	b570      	push	{r4, r5, r6, lr}
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4062:	f003 ff29 	bl	d7eb8 <module_user_init_hook>
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
   d4070:	bd70      	pop	{r4, r5, r6, pc}
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000da5b4 	.word	0x000da5b4
   d4080:	000da5d8 	.word	0x000da5d8

000d4084 <module_user_setup>:
   d4084:	f000 b8a6 	b.w	d41d4 <setup>

000d4088 <module_user_loop>:
   d4088:	b508      	push	{r3, lr}
   d408a:	f000 f9a1 	bl	d43d0 <loop>
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4092:	f003 bed3 	b.w	d7e3c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bee3 	b.w	d5e60 <malloc>

000d409a <_Znaj>:
   d409a:	f001 bee1 	b.w	d5e60 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bee7 	b.w	d5e70 <free>

000d40a2 <__cxa_guard_acquire>:
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   d40b2:	4770      	bx	lr

000d40b4 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   d40b4:	b510      	push	{r4, lr}
   d40b6:	4604      	mov	r4, r0
   d40b8:	3004      	adds	r0, #4
   d40ba:	f002 f932 	bl	d6322 <_ZN6StringD1Ev>
   d40be:	4620      	mov	r0, r4
   d40c0:	bd10      	pop	{r4, pc}

000d40c2 <_ZN14http_request_tD1Ev>:
} http_request_t;
   d40c2:	b510      	push	{r4, lr}
   d40c4:	4604      	mov	r4, r0
   d40c6:	303c      	adds	r0, #60	; 0x3c
   d40c8:	f002 f92b 	bl	d6322 <_ZN6StringD1Ev>
   d40cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d40d0:	f002 f927 	bl	d6322 <_ZN6StringD1Ev>
   d40d4:	4620      	mov	r0, r4
   d40d6:	f002 f924 	bl	d6322 <_ZN6StringD1Ev>
   d40da:	4620      	mov	r0, r4
   d40dc:	bd10      	pop	{r4, pc}
	...

000d40e0 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv>:
  }

  count++;
}

void connectCallback(const BlePeerDevice& peer, void* context){
   d40e0:	b508      	push	{r3, lr}
  count = 0;
   d40e2:	4b07      	ldr	r3, [pc, #28]	; (d4100 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x20>)
   d40e4:	2200      	movs	r2, #0
   d40e6:	601a      	str	r2, [r3, #0]
  Serial.println("connected");
   d40e8:	f004 f816 	bl	d8118 <_Z16_fetch_usbserialv>
   d40ec:	4905      	ldr	r1, [pc, #20]	; (d4104 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x24>)
   d40ee:	f003 fd0e 	bl	d7b0e <_ZN5Print7printlnEPKc>
  digitalWrite(D7, HIGH);
}
   d40f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(D7, HIGH);
   d40f6:	2101      	movs	r1, #1
   d40f8:	2007      	movs	r0, #7
   d40fa:	f004 bd54 	b.w	d8ba6 <digitalWrite>
   d40fe:	bf00      	nop
   d4100:	2003e114 	.word	0x2003e114
   d4104:	000d9bc7 	.word	0x000d9bc7

000d4108 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv>:

void disconnectCallback(const BlePeerDevice& peer, void* context){
   d4108:	b508      	push	{r3, lr}
  Serial.println("disconnected");
   d410a:	f004 f805 	bl	d8118 <_Z16_fetch_usbserialv>
   d410e:	4904      	ldr	r1, [pc, #16]	; (d4120 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   d4110:	f003 fcfd 	bl	d7b0e <_ZN5Print7printlnEPKc>
  digitalWrite(D7, LOW);
   d4114:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(D7, LOW);
   d4118:	2100      	movs	r1, #0
   d411a:	2007      	movs	r0, #7
   d411c:	f004 bd43 	b.w	d8ba6 <digitalWrite>
   d4120:	000d9bc4 	.word	0x000d9bc4

000d4124 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d4124:	b538      	push	{r3, r4, r5, lr}
   d4126:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d4128:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d412a:	b128      	cbz	r0, d4138 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d412c:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d412e:	210c      	movs	r1, #12
   d4130:	f004 fdc1 	bl	d8cb6 <_ZdlPvj>
            wakeupSource = next;
   d4134:	4628      	mov	r0, r5
        while (wakeupSource) {
   d4136:	e7f8      	b.n	d412a <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d4138:	4620      	mov	r0, r4
   d413a:	bd38      	pop	{r3, r4, r5, pc}

000d413c <_ZN10HttpClientD1Ev>:

class HttpClient {
   d413c:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d413e:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4140:	4b0a      	ldr	r3, [pc, #40]	; (d416c <_ZN10HttpClientD1Ev+0x30>)
   d4142:	6003      	str	r3, [r0, #0]
   d4144:	4605      	mov	r5, r0
   d4146:	b17c      	cbz	r4, d4168 <_ZN10HttpClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4148:	6863      	ldr	r3, [r4, #4]
   d414a:	3b01      	subs	r3, #1
   d414c:	6063      	str	r3, [r4, #4]
   d414e:	b95b      	cbnz	r3, d4168 <_ZN10HttpClientD1Ev+0x2c>
          _M_dispose();
   d4150:	6823      	ldr	r3, [r4, #0]
   d4152:	4620      	mov	r0, r4
   d4154:	689b      	ldr	r3, [r3, #8]
   d4156:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4158:	68a3      	ldr	r3, [r4, #8]
   d415a:	3b01      	subs	r3, #1
   d415c:	60a3      	str	r3, [r4, #8]
   d415e:	b91b      	cbnz	r3, d4168 <_ZN10HttpClientD1Ev+0x2c>
            _M_destroy();
   d4160:	6823      	ldr	r3, [r4, #0]
   d4162:	4620      	mov	r0, r4
   d4164:	68db      	ldr	r3, [r3, #12]
   d4166:	4798      	blx	r3
   d4168:	4628      	mov	r0, r5
   d416a:	bd38      	pop	{r3, r4, r5, pc}
   d416c:	000da300 	.word	0x000da300

000d4170 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4170:	b510      	push	{r4, lr}
   d4172:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4174:	6800      	ldr	r0, [r0, #0]
   d4176:	b108      	cbz	r0, d417c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4178:	f001 fe7a 	bl	d5e70 <free>
class SystemClass {
   d417c:	4620      	mov	r0, r4
   d417e:	bd10      	pop	{r4, pc}

000d4180 <_ZN8particle24SystemSleepConfiguration8durationEm>:
            gpio(pins[i], mode);
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4180:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d4182:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4184:	4605      	mov	r5, r0
   d4186:	460e      	mov	r6, r1
        if (valid_) {
   d4188:	b1cb      	cbz	r3, d41be <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d418a:	6803      	ldr	r3, [r0, #0]
   d418c:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d418e:	b123      	cbz	r3, d419a <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d4190:	889a      	ldrh	r2, [r3, #4]
   d4192:	2a04      	cmp	r2, #4
   d4194:	d017      	beq.n	d41c6 <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d4196:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4198:	e7f9      	b.n	d418e <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d419a:	490c      	ldr	r1, [pc, #48]	; (d41cc <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d419c:	2010      	movs	r0, #16
   d419e:	f004 fd8c 	bl	d8cba <_ZnwjRKSt9nothrow_t>
   d41a2:	4604      	mov	r4, r0
   d41a4:	b168      	cbz	r0, d41c2 <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d41a6:	2210      	movs	r2, #16
   d41a8:	2100      	movs	r1, #0
   d41aa:	f005 fbff 	bl	d99ac <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d41ae:	4b08      	ldr	r3, [pc, #32]	; (d41d0 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d41b0:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d41b2:	2304      	movs	r3, #4
   d41b4:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d41b6:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d41b8:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d41ba:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d41be:	4628      	mov	r0, r5
   d41c0:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d41c2:	7528      	strb	r0, [r5, #20]
                return *this;
   d41c4:	e7fb      	b.n	d41be <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d41c6:	60de      	str	r6, [r3, #12]
                return *this;
   d41c8:	e7f9      	b.n	d41be <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d41ca:	bf00      	nop
   d41cc:	000da3bc 	.word	0x000da3bc
   d41d0:	00030010 	.word	0x00030010

000d41d4 <setup>:
void setup() {
   d41d4:	b510      	push	{r4, lr}
   d41d6:	b096      	sub	sp, #88	; 0x58
  EEPROM.get(200, wifiTimeLeft);
   d41d8:	f004 fd12 	bl	d8c00 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d41dc:	2204      	movs	r2, #4
   d41de:	494c      	ldr	r1, [pc, #304]	; (d4310 <setup+0x13c>)
   d41e0:	20c8      	movs	r0, #200	; 0xc8
   d41e2:	f001 fb13 	bl	d580c <HAL_EEPROM_Get>
        if (valid_) {
   d41e6:	4b4b      	ldr	r3, [pc, #300]	; (d4314 <setup+0x140>)
   d41e8:	7d1a      	ldrb	r2, [r3, #20]
   d41ea:	b10a      	cbz	r2, d41f0 <setup+0x1c>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d41ec:	2202      	movs	r2, #2
   d41ee:	721a      	strb	r2, [r3, #8]
  config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(1000);
   d41f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d41f4:	4847      	ldr	r0, [pc, #284]	; (d4314 <setup+0x140>)
  request.hostname = "trek.thewcl.com";
   d41f6:	4c48      	ldr	r4, [pc, #288]	; (d4318 <setup+0x144>)
  config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(1000);
   d41f8:	f7ff ffc2 	bl	d4180 <_ZN8particle24SystemSleepConfiguration8durationEm>
  Serial.begin(9600);
   d41fc:	f003 ff8c 	bl	d8118 <_Z16_fetch_usbserialv>
   d4200:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4204:	f003 ff7c 	bl	d8100 <_ZN9USBSerial5beginEl>
  lis.begin(0x18);
   d4208:	2118      	movs	r1, #24
   d420a:	4844      	ldr	r0, [pc, #272]	; (d431c <setup+0x148>)
   d420c:	f000 ff2f 	bl	d506e <_ZN15Adafruit_LIS3DH5beginEh>
  Wire.end();
   d4210:	f004 fd24 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d4214:	f004 f86c 	bl	d82f0 <_ZN7TwoWire3endEv>
  lis.begin(I2C_ADDRESS);
   d4218:	2119      	movs	r1, #25
   d421a:	4840      	ldr	r0, [pc, #256]	; (d431c <setup+0x148>)
   d421c:	f000 ff27 	bl	d506e <_ZN15Adafruit_LIS3DH5beginEh>
  lis.setRange(LIS3DH_RANGE_2_G);
   d4220:	483e      	ldr	r0, [pc, #248]	; (d431c <setup+0x148>)
   d4222:	2100      	movs	r1, #0
   d4224:	f000 fefa 	bl	d501c <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>
  lis.setDataRate(LIS3DH_DATARATE_400_HZ);
   d4228:	483c      	ldr	r0, [pc, #240]	; (d431c <setup+0x148>)
   d422a:	2107      	movs	r1, #7
   d422c:	f000 ff0e 	bl	d504c <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  pinMode(SDO_OUTPUT_PIN, OUTPUT);
   d4230:	2101      	movs	r1, #1
   d4232:	2008      	movs	r0, #8
   d4234:	f004 fca6 	bl	d8b84 <pinMode>
  digitalWrite(SDO_OUTPUT_PIN, HIGH);
   d4238:	2101      	movs	r1, #1
   d423a:	2008      	movs	r0, #8
   d423c:	f004 fcb3 	bl	d8ba6 <digitalWrite>
  request.hostname = "trek.thewcl.com";
   d4240:	4937      	ldr	r1, [pc, #220]	; (d4320 <setup+0x14c>)
   d4242:	4620      	mov	r0, r4
   d4244:	f002 f900 	bl	d6448 <_ZN6StringaSEPKc>
  request.port = 3000;
   d4248:	f640 33b8 	movw	r3, #3000	; 0xbb8
  request.path = "/";
   d424c:	4935      	ldr	r1, [pc, #212]	; (d4324 <setup+0x150>)
  request.port = 3000;
   d424e:	63a3      	str	r3, [r4, #56]	; 0x38
  request.path = "/";
   d4250:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4254:	f002 f8f8 	bl	d6448 <_ZN6StringaSEPKc>
  BLE.on();
   d4258:	f002 fe0a 	bl	d6e70 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d425c:	f002 fe56 	bl	d6f0c <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   d4260:	f002 fe06 	bl	d6e70 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4264:	4a30      	ldr	r2, [pc, #192]	; (d4328 <setup+0x154>)
   d4266:	4601      	mov	r1, r0
   d4268:	a80d      	add	r0, sp, #52	; 0x34
   d426a:	f003 faf3 	bl	d7854 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d426e:	a80d      	add	r0, sp, #52	; 0x34
   d4270:	f002 feeb 	bl	d704a <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   d4274:	f002 fdfc 	bl	d6e70 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4278:	4a2c      	ldr	r2, [pc, #176]	; (d432c <setup+0x158>)
   d427a:	4601      	mov	r1, r0
   d427c:	a80d      	add	r0, sp, #52	; 0x34
   d427e:	f003 fae9 	bl	d7854 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4282:	a80d      	add	r0, sp, #52	; 0x34
   d4284:	f002 fee1 	bl	d704a <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   d4288:	a80d      	add	r0, sp, #52	; 0x34
   d428a:	f002 fc70 	bl	d6b6e <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   d428e:	4928      	ldr	r1, [pc, #160]	; (d4330 <setup+0x15c>)
   d4290:	a803      	add	r0, sp, #12
   d4292:	f002 fb6f 	bl	d6974 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d4296:	a903      	add	r1, sp, #12
   d4298:	a808      	add	r0, sp, #32
   d429a:	f002 fb6b 	bl	d6974 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d429e:	a808      	add	r0, sp, #32
   d42a0:	f002 fbae 	bl	d6a00 <_ZNK8particle7BleUuid4typeEv>
   d42a4:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d42a6:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   d42a8:	bb54      	cbnz	r4, d4300 <setup+0x12c>
            uint16_t uuid16 = tempUUID.shorted();
   d42aa:	f002 fbc8 	bl	d6a3e <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d42ae:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d42b0:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d42b4:	2302      	movs	r3, #2
   d42b6:	f10d 020a 	add.w	r2, sp, #10
   d42ba:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d42bc:	a80d      	add	r0, sp, #52	; 0x34
   d42be:	f002 fc4b 	bl	d6b58 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   d42c2:	f002 fdd5 	bl	d6e70 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42c6:	a90d      	add	r1, sp, #52	; 0x34
   d42c8:	2200      	movs	r2, #0
   d42ca:	f002 fe3f 	bl	d6f4c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  BLE.onConnected(connectCallback);
   d42ce:	f002 fdcf 	bl	d6e70 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42d2:	4918      	ldr	r1, [pc, #96]	; (d4334 <setup+0x160>)
   d42d4:	2200      	movs	r2, #0
   d42d6:	f003 f9b3 	bl	d7640 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
  BLE.onDisconnected(disconnectCallback);
   d42da:	f002 fdc9 	bl	d6e70 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42de:	2200      	movs	r2, #0
   d42e0:	4915      	ldr	r1, [pc, #84]	; (d4338 <setup+0x164>)
   d42e2:	f003 f9c3 	bl	d766c <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
  pinMode(D7, OUTPUT);
   d42e6:	2101      	movs	r1, #1
   d42e8:	2007      	movs	r0, #7
   d42ea:	f004 fc4b 	bl	d8b84 <pinMode>
  count = 0;
   d42ee:	4b13      	ldr	r3, [pc, #76]	; (d433c <setup+0x168>)
   d42f0:	2200      	movs	r2, #0
   d42f2:	601a      	str	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42f4:	f001 fa7a 	bl	d57ec <HAL_Timer_Get_Milli_Seconds>
  time1 = millis();
   d42f8:	4b11      	ldr	r3, [pc, #68]	; (d4340 <setup+0x16c>)
   d42fa:	6018      	str	r0, [r3, #0]
}
   d42fc:	b016      	add	sp, #88	; 0x58
   d42fe:	bd10      	pop	{r4, pc}
   d4300:	f002 fba2 	bl	d6a48 <_ZNK8particle7BleUuid8rawBytesEv>
   d4304:	2300      	movs	r3, #0
   d4306:	9300      	str	r3, [sp, #0]
   d4308:	4602      	mov	r2, r0
   d430a:	2310      	movs	r3, #16
   d430c:	2107      	movs	r1, #7
   d430e:	e7d5      	b.n	d42bc <setup+0xe8>
   d4310:	2003e620 	.word	0x2003e620
   d4314:	2003e0fc 	.word	0x2003e0fc
   d4318:	2003e588 	.word	0x2003e588
   d431c:	2003e53c 	.word	0x2003e53c
   d4320:	000d9bd1 	.word	0x000d9bd1
   d4324:	000d9be1 	.word	0x000d9be1
   d4328:	2003e608 	.word	0x2003e608
   d432c:	2003e5e8 	.word	0x2003e5e8
   d4330:	2003e0bc 	.word	0x2003e0bc
   d4334:	000d40e1 	.word	0x000d40e1
   d4338:	000d4109 	.word	0x000d4109
   d433c:	2003e114 	.word	0x2003e114
   d4340:	2003e600 	.word	0x2003e600

000d4344 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4344:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4346:	4616      	mov	r6, r2
   d4348:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d434a:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d434c:	e9c0 2200 	strd	r2, r2, [r0]
   d4350:	4604      	mov	r4, r0
   d4352:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4354:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d4356:	4619      	mov	r1, r3
   d4358:	a806      	add	r0, sp, #24
   d435a:	f002 fb0b 	bl	d6974 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d435e:	9916      	ldr	r1, [sp, #88]	; 0x58
   d4360:	4638      	mov	r0, r7
   d4362:	f002 fb07 	bl	d6974 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d4366:	7833      	ldrb	r3, [r6, #0]
   d4368:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d436c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d436e:	9302      	str	r3, [sp, #8]
   d4370:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d4372:	4620      	mov	r0, r4
   d4374:	e9cd 7300 	strd	r7, r3, [sp]
   d4378:	aa05      	add	r2, sp, #20
   d437a:	ab06      	add	r3, sp, #24
   d437c:	4629      	mov	r1, r5
   d437e:	f003 f8fb 	bl	d7578 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d4382:	4620      	mov	r0, r4
   d4384:	b011      	add	sp, #68	; 0x44
   d4386:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4388 <_ZN5Print7printlnIiLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   d4388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d438a:	4605      	mov	r5, r0
   d438c:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d438e:	4616      	mov	r6, r2
   d4390:	b94a      	cbnz	r2, d43a6 <_ZN5Print7printlnIiLi0EEEjT_i+0x1e>
        return write(n);
   d4392:	6803      	ldr	r3, [r0, #0]
   d4394:	b2c9      	uxtb	r1, r1
   d4396:	689b      	ldr	r3, [r3, #8]
   d4398:	4798      	blx	r3
   d439a:	4607      	mov	r7, r0
        n += println();
   d439c:	4628      	mov	r0, r5
   d439e:	f003 fbaa 	bl	d7af6 <_ZN5Print7printlnEv>
    }
   d43a2:	4438      	add	r0, r7
   d43a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d43a6:	2900      	cmp	r1, #0
   d43a8:	da0c      	bge.n	d43c4 <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
   d43aa:	2a0a      	cmp	r2, #10
   d43ac:	d10a      	bne.n	d43c4 <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
            t = print('-');
   d43ae:	212d      	movs	r1, #45	; 0x2d
   d43b0:	f003 fb98 	bl	d7ae4 <_ZN5Print5printEc>
            val = -n;
   d43b4:	4261      	negs	r1, r4
            t = print('-');
   d43b6:	4607      	mov	r7, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d43b8:	b2f2      	uxtb	r2, r6
   d43ba:	4628      	mov	r0, r5
   d43bc:	f003 fbb1 	bl	d7b22 <_ZN5Print11printNumberEmh>
   d43c0:	4407      	add	r7, r0
   d43c2:	e7eb      	b.n	d439c <_ZN5Print7printlnIiLi0EEEjT_i+0x14>
            val = n;
   d43c4:	4621      	mov	r1, r4
        size_t t = 0;
   d43c6:	2700      	movs	r7, #0
   d43c8:	e7f6      	b.n	d43b8 <_ZN5Print7printlnIiLi0EEEjT_i+0x30>
   d43ca:	0000      	movs	r0, r0
   d43cc:	0000      	movs	r0, r0
	...

000d43d0 <loop>:
void loop() { 
   d43d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d43d4:	ed2d 8b04 	vpush	{d8-d9}
   d43d8:	b091      	sub	sp, #68	; 0x44
   d43da:	f001 fa07 	bl	d57ec <HAL_Timer_Get_Milli_Seconds>
  time2 = millis(); 
   d43de:	4b50      	ldr	r3, [pc, #320]	; (d4520 <loop+0x150>)
   d43e0:	6018      	str	r0, [r3, #0]
  if(bleInput | ((time2 - CONFIG_WAIT_TIME >= time1) && WiFi.hasCredentials() && !(BLE.connected()))){
   d43e2:	4b50      	ldr	r3, [pc, #320]	; (d4524 <loop+0x154>)
   d43e4:	f5a0 501c 	sub.w	r0, r0, #9984	; 0x2700
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	380f      	subs	r0, #15
   d43ec:	4298      	cmp	r0, r3
   d43ee:	dc7e      	bgt.n	d44ee <loop+0x11e>
   d43f0:	4b4d      	ldr	r3, [pc, #308]	; (d4528 <loop+0x158>)
   d43f2:	781b      	ldrb	r3, [r3, #0]
   d43f4:	2b00      	cmp	r3, #0
   d43f6:	f000 8207 	beq.w	d4808 <loop+0x438>
    EEPROM.get(0, dsid);
   d43fa:	f004 fc01 	bl	d8c00 <_Z21__fetch_global_EEPROMv>
   d43fe:	494b      	ldr	r1, [pc, #300]	; (d452c <loop+0x15c>)
   d4400:	2204      	movs	r2, #4
   d4402:	2000      	movs	r0, #0
   d4404:	f001 fa02 	bl	d580c <HAL_EEPROM_Get>
    EEPROM.get(100, sleepDuration);
   d4408:	f004 fbfa 	bl	d8c00 <_Z21__fetch_global_EEPROMv>
   d440c:	4948      	ldr	r1, [pc, #288]	; (d4530 <loop+0x160>)
   d440e:	2204      	movs	r2, #4
   d4410:	2064      	movs	r0, #100	; 0x64
   d4412:	f001 f9fb 	bl	d580c <HAL_EEPROM_Get>
    EEPROM.get(200, wifiInterval);
   d4416:	f004 fbf3 	bl	d8c00 <_Z21__fetch_global_EEPROMv>
   d441a:	2204      	movs	r2, #4
   d441c:	4945      	ldr	r1, [pc, #276]	; (d4534 <loop+0x164>)
   d441e:	20c8      	movs	r0, #200	; 0xc8
   d4420:	f001 f9f4 	bl	d580c <HAL_EEPROM_Get>
        if (valid_) {
   d4424:	4b44      	ldr	r3, [pc, #272]	; (d4538 <loop+0x168>)
   d4426:	7d1a      	ldrb	r2, [r3, #20]
   d4428:	b10a      	cbz	r2, d442e <loop+0x5e>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d442a:	2202      	movs	r2, #2
   d442c:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration);
   d442e:	f8df 8100 	ldr.w	r8, [pc, #256]	; d4530 <loop+0x160>
    lis.read();
   d4432:	4c42      	ldr	r4, [pc, #264]	; (d453c <loop+0x16c>)
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration);
   d4434:	f8d8 1000 	ldr.w	r1, [r8]
   d4438:	483f      	ldr	r0, [pc, #252]	; (d4538 <loop+0x168>)
    isMoving = 0;
   d443a:	4d41      	ldr	r5, [pc, #260]	; (d4540 <loop+0x170>)
   d443c:	f8df b114 	ldr.w	fp, [pc, #276]	; d4554 <loop+0x184>
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration);
   d4440:	f7ff fe9e 	bl	d4180 <_ZN8particle24SystemSleepConfiguration8durationEm>
    lis.read();
   d4444:	4620      	mov	r0, r4
   d4446:	f000 fe63 	bl	d5110 <_ZN15Adafruit_LIS3DH4readEv>
    unixTime = Time.now();
   d444a:	f003 fca3 	bl	d7d94 <_ZN9TimeClass3nowEv>
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(char c) : String(c) {}
	StringSumHelper(unsigned char num) : String(num) {}
	StringSumHelper(int num) : String(num) {}
	StringSumHelper(unsigned int num) : String(num) {}
	StringSumHelper(long num) : String(num) {}
   d444e:	220a      	movs	r2, #10
   d4450:	4601      	mov	r1, r0
   d4452:	a80c      	add	r0, sp, #48	; 0x30
   d4454:	f002 f81d 	bl	d6492 <_ZN6StringC1Elh>
   d4458:	a90c      	add	r1, sp, #48	; 0x30
   d445a:	483a      	ldr	r0, [pc, #232]	; (d4544 <loop+0x174>)
   d445c:	f001 ffec 	bl	d6438 <_ZN6StringaSEO15StringSumHelper>
class StringSumHelper : public String
   d4460:	a80c      	add	r0, sp, #48	; 0x30
   d4462:	f001 ff5e 	bl	d6322 <_ZN6StringD1Ev>
    if(lis.x_g >= 0.8 && lis.x_g <= 1.2){
   d4466:	edd4 8a03 	vldr	s17, [r4, #12]
    isMoving = 0;
   d446a:	2300      	movs	r3, #0
   d446c:	602b      	str	r3, [r5, #0]
    if(lis.x_g >= 0.8 && lis.x_g <= 1.2){
   d446e:	ee18 0a90 	vmov	r0, s17
   d4472:	f004 fe9f 	bl	d91b4 <__aeabi_f2d>
   d4476:	a326      	add	r3, pc, #152	; (adr r3, d4510 <loop+0x140>)
   d4478:	e9d3 2300 	ldrd	r2, r3, [r3]
   d447c:	4606      	mov	r6, r0
   d447e:	460f      	mov	r7, r1
   d4480:	f005 f976 	bl	d9770 <__aeabi_dcmpge>
   d4484:	46a2      	mov	sl, r4
   d4486:	f8cd 8008 	str.w	r8, [sp, #8]
   d448a:	9503      	str	r5, [sp, #12]
   d448c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   d4490:	2800      	cmp	r0, #0
   d4492:	d061      	beq.n	d4558 <loop+0x188>
   d4494:	4b2c      	ldr	r3, [pc, #176]	; (d4548 <loop+0x178>)
   d4496:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d449a:	4630      	mov	r0, r6
   d449c:	4639      	mov	r1, r7
   d449e:	f005 f95d 	bl	d975c <__aeabi_dcmple>
   d44a2:	2800      	cmp	r0, #0
   d44a4:	d058      	beq.n	d4558 <loop+0x188>
      x = GRAVITY * (lis.x_g - 1);
   d44a6:	ee78 7ac8 	vsub.f32	s15, s17, s16
   d44aa:	6925      	ldr	r5, [r4, #16]
   d44ac:	6964      	ldr	r4, [r4, #20]
   d44ae:	ee17 0a90 	vmov	r0, s15
   d44b2:	f004 fe7f 	bl	d91b4 <__aeabi_f2d>
   d44b6:	a318      	add	r3, pc, #96	; (adr r3, d4518 <loop+0x148>)
   d44b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44bc:	f004 fed2 	bl	d9264 <__aeabi_dmul>
   d44c0:	f005 f9c8 	bl	d9854 <__aeabi_d2f>
   d44c4:	f8cb 0000 	str.w	r0, [fp]
      y = GRAVITY * lis.y_g;
   d44c8:	4628      	mov	r0, r5
   d44ca:	f004 fe73 	bl	d91b4 <__aeabi_f2d>
   d44ce:	a312      	add	r3, pc, #72	; (adr r3, d4518 <loop+0x148>)
   d44d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44d4:	f004 fec6 	bl	d9264 <__aeabi_dmul>
   d44d8:	f005 f9bc 	bl	d9854 <__aeabi_d2f>
   d44dc:	4b1b      	ldr	r3, [pc, #108]	; (d454c <loop+0x17c>)
   d44de:	6018      	str	r0, [r3, #0]
      z = GRAVITY * lis.z_g;
   d44e0:	4620      	mov	r0, r4
      z = GRAVITY * (lis.z_g - 1);
   d44e2:	f004 fe67 	bl	d91b4 <__aeabi_f2d>
   d44e6:	a30c      	add	r3, pc, #48	; (adr r3, d4518 <loop+0x148>)
   d44e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44ec:	e077      	b.n	d45de <loop+0x20e>
        WLanCredentials creds = credentials.getHalCredentials();
        network_set_credentials(*this, 0, &creds, NULL);
    }

    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
   d44ee:	4b18      	ldr	r3, [pc, #96]	; (d4550 <loop+0x180>)
   d44f0:	2200      	movs	r2, #0
   d44f2:	6858      	ldr	r0, [r3, #4]
   d44f4:	4611      	mov	r1, r2
   d44f6:	f001 fc53 	bl	d5da0 <network_has_credentials>
  if(bleInput | ((time2 - CONFIG_WAIT_TIME >= time1) && WiFi.hasCredentials() && !(BLE.connected()))){
   d44fa:	2800      	cmp	r0, #0
   d44fc:	f43f af78 	beq.w	d43f0 <loop+0x20>
   d4500:	f002 fcb6 	bl	d6e70 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4504:	f002 fd35 	bl	d6f72 <_ZNK8particle14BleLocalDevice9connectedEv>
   d4508:	2800      	cmp	r0, #0
   d450a:	f47f af71 	bne.w	d43f0 <loop+0x20>
   d450e:	e774      	b.n	d43fa <loop+0x2a>
   d4510:	9999999a 	.word	0x9999999a
   d4514:	3fe99999 	.word	0x3fe99999
   d4518:	acd9e83e 	.word	0xacd9e83e
   d451c:	40239cfa 	.word	0x40239cfa
   d4520:	2003e604 	.word	0x2003e604
   d4524:	2003e600 	.word	0x2003e600
   d4528:	2003e0f8 	.word	0x2003e0f8
   d452c:	2003e118 	.word	0x2003e118
   d4530:	2003e03c 	.word	0x2003e03c
   d4534:	2003e040 	.word	0x2003e040
   d4538:	2003e0fc 	.word	0x2003e0fc
   d453c:	2003e53c 	.word	0x2003e53c
   d4540:	2003e538 	.word	0x2003e538
   d4544:	2003e610 	.word	0x2003e610
   d4548:	3ff33333 	.word	0x3ff33333
   d454c:	2003e628 	.word	0x2003e628
   d4550:	2003e7bc 	.word	0x2003e7bc
   d4554:	2003e624 	.word	0x2003e624
    } else if(lis.y_g >= 0.8 && lis.y_g <= 1.2){
   d4558:	ed9a 9a04 	vldr	s18, [sl, #16]
   d455c:	ee19 0a10 	vmov	r0, s18
   d4560:	f004 fe28 	bl	d91b4 <__aeabi_f2d>
   d4564:	edda 8a05 	vldr	s17, [sl, #20]
   d4568:	4604      	mov	r4, r0
   d456a:	ee18 0a90 	vmov	r0, s17
   d456e:	460d      	mov	r5, r1
   d4570:	f004 fe20 	bl	d91b4 <__aeabi_f2d>
   d4574:	a3c0      	add	r3, pc, #768	; (adr r3, d4878 <loop+0x4a8>)
   d4576:	e9d3 2300 	ldrd	r2, r3, [r3]
   d457a:	4680      	mov	r8, r0
   d457c:	4689      	mov	r9, r1
   d457e:	4620      	mov	r0, r4
   d4580:	4629      	mov	r1, r5
   d4582:	f005 f8f5 	bl	d9770 <__aeabi_dcmpge>
   d4586:	2800      	cmp	r0, #0
   d4588:	f000 8143 	beq.w	d4812 <loop+0x442>
   d458c:	4bbc      	ldr	r3, [pc, #752]	; (d4880 <loop+0x4b0>)
   d458e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d4592:	4620      	mov	r0, r4
   d4594:	4629      	mov	r1, r5
   d4596:	f005 f8e1 	bl	d975c <__aeabi_dcmple>
   d459a:	2800      	cmp	r0, #0
   d459c:	f000 8139 	beq.w	d4812 <loop+0x442>
      x = GRAVITY * lis.x_g;
   d45a0:	a3b3      	add	r3, pc, #716	; (adr r3, d4870 <loop+0x4a0>)
   d45a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45a6:	4630      	mov	r0, r6
   d45a8:	4639      	mov	r1, r7
   d45aa:	f004 fe5b 	bl	d9264 <__aeabi_dmul>
   d45ae:	f005 f951 	bl	d9854 <__aeabi_d2f>
      y = GRAVITY * (lis.y_g - 1);
   d45b2:	ee79 7a48 	vsub.f32	s15, s18, s16
      x = GRAVITY * lis.x_g;
   d45b6:	f8cb 0000 	str.w	r0, [fp]
      y = GRAVITY * (lis.y_g - 1);
   d45ba:	ee17 0a90 	vmov	r0, s15
   d45be:	f004 fdf9 	bl	d91b4 <__aeabi_f2d>
   d45c2:	a3ab      	add	r3, pc, #684	; (adr r3, d4870 <loop+0x4a0>)
   d45c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45c8:	f004 fe4c 	bl	d9264 <__aeabi_dmul>
   d45cc:	f005 f942 	bl	d9854 <__aeabi_d2f>
   d45d0:	4bac      	ldr	r3, [pc, #688]	; (d4884 <loop+0x4b4>)
   d45d2:	6018      	str	r0, [r3, #0]
      z = GRAVITY * lis.z_g;
   d45d4:	a3a6      	add	r3, pc, #664	; (adr r3, d4870 <loop+0x4a0>)
   d45d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45da:	4640      	mov	r0, r8
   d45dc:	4649      	mov	r1, r9
      z = GRAVITY * (lis.z_g - 1);
   d45de:	f004 fe41 	bl	d9264 <__aeabi_dmul>
   d45e2:	f005 f937 	bl	d9854 <__aeabi_d2f>
   d45e6:	4ba8      	ldr	r3, [pc, #672]	; (d4888 <loop+0x4b8>)
   d45e8:	6018      	str	r0, [r3, #0]
    Serial.println(lis.x_g);
   d45ea:	f003 fd95 	bl	d8118 <_Z16_fetch_usbserialv>
   d45ee:	ed9a 0a03 	vldr	s0, [sl, #12]
   d45f2:	2102      	movs	r1, #2
   d45f4:	f003 fb87 	bl	d7d06 <_ZN5Print7printlnEfi>
    Serial.println(lis.y_g);
   d45f8:	f003 fd8e 	bl	d8118 <_Z16_fetch_usbserialv>
   d45fc:	ed9a 0a04 	vldr	s0, [sl, #16]
   d4600:	2102      	movs	r1, #2
   d4602:	f003 fb80 	bl	d7d06 <_ZN5Print7printlnEfi>
    Serial.println(lis.z_g);
   d4606:	f003 fd87 	bl	d8118 <_Z16_fetch_usbserialv>
   d460a:	ed9a 0a05 	vldr	s0, [sl, #20]
   d460e:	2102      	movs	r1, #2
   d4610:	f003 fb79 	bl	d7d06 <_ZN5Print7printlnEfi>
    if(abs(x) > 1 || abs(y) > 1 || abs(z) > 1){
   d4614:	4b9d      	ldr	r3, [pc, #628]	; (d488c <loop+0x4bc>)
   d4616:	edd3 7a00 	vldr	s15, [r3]
   d461a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d461e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4622:	bfd8      	it	le
   d4624:	eef1 7a67 	vnegle.f32	s15, s15
   d4628:	eef4 7ac8 	vcmpe.f32	s15, s16
   d462c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4630:	dc1d      	bgt.n	d466e <loop+0x29e>
   d4632:	4b94      	ldr	r3, [pc, #592]	; (d4884 <loop+0x4b4>)
   d4634:	edd3 7a00 	vldr	s15, [r3]
   d4638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d463c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4640:	bfd8      	it	le
   d4642:	eef1 7a67 	vnegle.f32	s15, s15
   d4646:	eef4 7ac8 	vcmpe.f32	s15, s16
   d464a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d464e:	dc0e      	bgt.n	d466e <loop+0x29e>
   d4650:	4b8d      	ldr	r3, [pc, #564]	; (d4888 <loop+0x4b8>)
   d4652:	edd3 7a00 	vldr	s15, [r3]
   d4656:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d465a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d465e:	bfd8      	it	le
   d4660:	eef1 7a67 	vnegle.f32	s15, s15
   d4664:	eef4 7ac8 	vcmpe.f32	s15, s16
   d4668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d466c:	dd02      	ble.n	d4674 <loop+0x2a4>
      isMoving = 1;
   d466e:	9a03      	ldr	r2, [sp, #12]
   d4670:	2301      	movs	r3, #1
   d4672:	6013      	str	r3, [r2, #0]
    payload +=  "{\"dsid\":" + String(dsid) + ", \"value\":" + String(isMoving) + ", \"timestamp\":" + unixTime + "},";
   d4674:	4d86      	ldr	r5, [pc, #536]	; (d4890 <loop+0x4c0>)
	StringSumHelper(const char *p) : String(p) {}
   d4676:	4987      	ldr	r1, [pc, #540]	; (d4894 <loop+0x4c4>)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4678:	4e87      	ldr	r6, [pc, #540]	; (d4898 <loop+0x4c8>)
	StringSumHelper(const char *p) : String(p) {}
   d467a:	a804      	add	r0, sp, #16
   d467c:	f001 fe9c 	bl	d63b8 <_ZN6StringC1EPKc>
   d4680:	220a      	movs	r2, #10
   d4682:	6829      	ldr	r1, [r5, #0]
   d4684:	a808      	add	r0, sp, #32
   d4686:	f001 fef1 	bl	d646c <_ZN6StringC1Eih>
   d468a:	a908      	add	r1, sp, #32
   d468c:	a804      	add	r0, sp, #16
   d468e:	f001 ff3b 	bl	d6508 <_ZplRK15StringSumHelperRK6String>
   d4692:	4982      	ldr	r1, [pc, #520]	; (d489c <loop+0x4cc>)
   d4694:	f001 ff44 	bl	d6520 <_ZplRK15StringSumHelperPKc>
   d4698:	9b03      	ldr	r3, [sp, #12]
   d469a:	220a      	movs	r2, #10
   d469c:	6819      	ldr	r1, [r3, #0]
   d469e:	4604      	mov	r4, r0
   d46a0:	a80c      	add	r0, sp, #48	; 0x30
   d46a2:	f001 fee3 	bl	d646c <_ZN6StringC1Eih>
   d46a6:	a90c      	add	r1, sp, #48	; 0x30
   d46a8:	4620      	mov	r0, r4
   d46aa:	f001 ff2d 	bl	d6508 <_ZplRK15StringSumHelperRK6String>
   d46ae:	497c      	ldr	r1, [pc, #496]	; (d48a0 <loop+0x4d0>)
   d46b0:	f001 ff36 	bl	d6520 <_ZplRK15StringSumHelperPKc>
   d46b4:	497b      	ldr	r1, [pc, #492]	; (d48a4 <loop+0x4d4>)
   d46b6:	f001 ff27 	bl	d6508 <_ZplRK15StringSumHelperRK6String>
   d46ba:	497b      	ldr	r1, [pc, #492]	; (d48a8 <loop+0x4d8>)
   d46bc:	f001 ff30 	bl	d6520 <_ZplRK15StringSumHelperPKc>
   d46c0:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d46c2:	4630      	mov	r0, r6
   d46c4:	f001 ff0f 	bl	d64e6 <_ZN6String6concatERKS_>
   d46c8:	a80c      	add	r0, sp, #48	; 0x30
   d46ca:	f001 fe2a 	bl	d6322 <_ZN6StringD1Ev>
   d46ce:	a808      	add	r0, sp, #32
   d46d0:	f001 fe27 	bl	d6322 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d46d4:	a804      	add	r0, sp, #16
   d46d6:	f001 fe24 	bl	d6322 <_ZN6StringD1Ev>
    Serial.println(payload);
   d46da:	f003 fd1d 	bl	d8118 <_Z16_fetch_usbserialv>
   d46de:	6831      	ldr	r1, [r6, #0]
   d46e0:	f003 fa15 	bl	d7b0e <_ZN5Print7printlnEPKc>
    Serial.println(dsid);
   d46e4:	f003 fd18 	bl	d8118 <_Z16_fetch_usbserialv>
   d46e8:	6829      	ldr	r1, [r5, #0]
    Serial.println(wifiInterval);
   d46ea:	4d70      	ldr	r5, [pc, #448]	; (d48ac <loop+0x4dc>)
    Serial.println(dsid);
   d46ec:	220a      	movs	r2, #10
   d46ee:	f7ff fe4b 	bl	d4388 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println(sleepDuration);
   d46f2:	f003 fd11 	bl	d8118 <_Z16_fetch_usbserialv>
   d46f6:	9b02      	ldr	r3, [sp, #8]
   d46f8:	220a      	movs	r2, #10
   d46fa:	6819      	ldr	r1, [r3, #0]
   d46fc:	f7ff fe44 	bl	d4388 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println(wifiInterval);
   d4700:	f003 fd0a 	bl	d8118 <_Z16_fetch_usbserialv>
   d4704:	6829      	ldr	r1, [r5, #0]
   d4706:	220a      	movs	r2, #10
   d4708:	f7ff fe3e 	bl	d4388 <_ZN5Print7printlnIiLi0EEEjT_i>
    BLE.disconnect();
   d470c:	f002 fbb0 	bl	d6e70 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4710:	f002 fd7a 	bl	d7208 <_ZNK8particle14BleLocalDevice10disconnectEv>
    BLE.off();
   d4714:	f002 fbac 	bl	d6e70 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4718:	f002 fd10 	bl	d713c <_ZNK8particle14BleLocalDevice3offEv>
    System.sleep(config);
   d471c:	a80c      	add	r0, sp, #48	; 0x30
   d471e:	4964      	ldr	r1, [pc, #400]	; (d48b0 <loop+0x4e0>)
   d4720:	f001 fcd8 	bl	d60d4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d4724:	980c      	ldr	r0, [sp, #48]	; 0x30
   d4726:	46a8      	mov	r8, r5
   d4728:	b108      	cbz	r0, d472e <loop+0x35e>
            free(wakeupSource_);
   d472a:	f001 fba1 	bl	d5e70 <free>
    if(wifiTimeLeft <= 0){
   d472e:	4c61      	ldr	r4, [pc, #388]	; (d48b4 <loop+0x4e4>)
   d4730:	6823      	ldr	r3, [r4, #0]
   d4732:	2b00      	cmp	r3, #0
   d4734:	dc63      	bgt.n	d47fe <loop+0x42e>
        network_on(*this, 0, 0, NULL);
   d4736:	4f60      	ldr	r7, [pc, #384]	; (d48b8 <loop+0x4e8>)
   d4738:	2300      	movs	r3, #0
   d473a:	461a      	mov	r2, r3
   d473c:	4619      	mov	r1, r3
   d473e:	6878      	ldr	r0, [r7, #4]
   d4740:	f001 fb0e 	bl	d5d60 <network_on>
        network_connect(*this, flags, 0, NULL);
   d4744:	2300      	movs	r3, #0
   d4746:	6878      	ldr	r0, [r7, #4]
   d4748:	461a      	mov	r2, r3
   d474a:	4619      	mov	r1, r3
   d474c:	f001 fae8 	bl	d5d20 <network_connect>
        return network_ready(*this, 0, NULL);
   d4750:	2200      	movs	r2, #0
   d4752:	6878      	ldr	r0, [r7, #4]
   d4754:	4611      	mov	r1, r2
   d4756:	f001 fafb 	bl	d5d50 <network_ready>
      while(!WiFi.ready()){}
   d475a:	2800      	cmp	r0, #0
   d475c:	d0f8      	beq.n	d4750 <loop+0x380>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d475e:	f001 fb57 	bl	d5e10 <spark_cloud_flag_connect>
      payload.remove(payload.length() - 1);
   d4762:	68b1      	ldr	r1, [r6, #8]
   d4764:	484c      	ldr	r0, [pc, #304]	; (d4898 <loop+0x4c8>)
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
    }

    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
   d4766:	4e55      	ldr	r6, [pc, #340]	; (d48bc <loop+0x4ec>)
   d4768:	3901      	subs	r1, #1
   d476a:	f001 ff54 	bl	d6616 <_ZN6String6removeEj>
	StringSumHelper(const char *p) : String(p) {}
   d476e:	4954      	ldr	r1, [pc, #336]	; (d48c0 <loop+0x4f0>)
   d4770:	a80c      	add	r0, sp, #48	; 0x30
   d4772:	f001 fe21 	bl	d63b8 <_ZN6StringC1EPKc>
      request.body = "{\"data\":[" + payload + "]}";
   d4776:	4948      	ldr	r1, [pc, #288]	; (d4898 <loop+0x4c8>)
   d4778:	a80c      	add	r0, sp, #48	; 0x30
   d477a:	f001 fec5 	bl	d6508 <_ZplRK15StringSumHelperRK6String>
   d477e:	4951      	ldr	r1, [pc, #324]	; (d48c4 <loop+0x4f4>)
   d4780:	f001 fece 	bl	d6520 <_ZplRK15StringSumHelperPKc>
   d4784:	4601      	mov	r1, r0
   d4786:	4850      	ldr	r0, [pc, #320]	; (d48c8 <loop+0x4f8>)
   d4788:	f001 fe47 	bl	d641a <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d478c:	a80c      	add	r0, sp, #48	; 0x30
   d478e:	f001 fdc8 	bl	d6322 <_ZN6StringD1Ev>
   d4792:	4b4e      	ldr	r3, [pc, #312]	; (d48cc <loop+0x4fc>)
   d4794:	494e      	ldr	r1, [pc, #312]	; (d48d0 <loop+0x500>)
   d4796:	484f      	ldr	r0, [pc, #316]	; (d48d4 <loop+0x504>)
   d4798:	9300      	str	r3, [sp, #0]
   d479a:	4632      	mov	r2, r6
   d479c:	4b4e      	ldr	r3, [pc, #312]	; (d48d8 <loop+0x508>)
   d479e:	f000 fdef 	bl	d5380 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("Status: " + response.status);
   d47a2:	f003 fcb9 	bl	d8118 <_Z16_fetch_usbserialv>
   d47a6:	6833      	ldr	r3, [r6, #0]
   d47a8:	494c      	ldr	r1, [pc, #304]	; (d48dc <loop+0x50c>)
   d47aa:	4419      	add	r1, r3
   d47ac:	f003 f9af 	bl	d7b0e <_ZN5Print7printlnEPKc>
      Serial.println("Body: " + response.body);
   d47b0:	f003 fcb2 	bl	d8118 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d47b4:	494a      	ldr	r1, [pc, #296]	; (d48e0 <loop+0x510>)
   d47b6:	4605      	mov	r5, r0
   d47b8:	a80c      	add	r0, sp, #48	; 0x30
   d47ba:	f001 fdfd 	bl	d63b8 <_ZN6StringC1EPKc>
   d47be:	1d31      	adds	r1, r6, #4
   d47c0:	a80c      	add	r0, sp, #48	; 0x30
   d47c2:	f001 fea1 	bl	d6508 <_ZplRK15StringSumHelperRK6String>
   d47c6:	6801      	ldr	r1, [r0, #0]
   d47c8:	4628      	mov	r0, r5
   d47ca:	f003 f9a0 	bl	d7b0e <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   d47ce:	a80c      	add	r0, sp, #48	; 0x30
   d47d0:	f001 fda7 	bl	d6322 <_ZN6StringD1Ev>
      payload = "";
   d47d4:	4943      	ldr	r1, [pc, #268]	; (d48e4 <loop+0x514>)
   d47d6:	4830      	ldr	r0, [pc, #192]	; (d4898 <loop+0x4c8>)
   d47d8:	f001 fe36 	bl	d6448 <_ZN6StringaSEPKc>
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
   d47dc:	2500      	movs	r5, #0
      wifiTimeLeft = wifiInterval;
   d47de:	f8d8 3000 	ldr.w	r3, [r8]
   d47e2:	6023      	str	r3, [r4, #0]
      Particle.disconnect();
   d47e4:	a80c      	add	r0, sp, #48	; 0x30
   d47e6:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
   d47ea:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
   d47ee:	f003 fb95 	bl	d7f1c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        network_off(*this, 0, 0, NULL);
   d47f2:	6878      	ldr	r0, [r7, #4]
   d47f4:	462b      	mov	r3, r5
   d47f6:	462a      	mov	r2, r5
   d47f8:	4629      	mov	r1, r5
   d47fa:	f001 fab9 	bl	d5d70 <network_off>
    wifiTimeLeft -= sleepDuration;
   d47fe:	9a02      	ldr	r2, [sp, #8]
   d4800:	6823      	ldr	r3, [r4, #0]
   d4802:	6812      	ldr	r2, [r2, #0]
   d4804:	1a9b      	subs	r3, r3, r2
   d4806:	6023      	str	r3, [r4, #0]
}
   d4808:	b011      	add	sp, #68	; 0x44
   d480a:	ecbd 8b04 	vpop	{d8-d9}
   d480e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }else if(lis.z_g >= 0.8 && lis.z_g <= 1.2){
   d4812:	a319      	add	r3, pc, #100	; (adr r3, d4878 <loop+0x4a8>)
   d4814:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4818:	4640      	mov	r0, r8
   d481a:	4649      	mov	r1, r9
   d481c:	f004 ffa8 	bl	d9770 <__aeabi_dcmpge>
   d4820:	2800      	cmp	r0, #0
   d4822:	f43f aee2 	beq.w	d45ea <loop+0x21a>
   d4826:	4b16      	ldr	r3, [pc, #88]	; (d4880 <loop+0x4b0>)
   d4828:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d482c:	4640      	mov	r0, r8
   d482e:	4649      	mov	r1, r9
   d4830:	f004 ff94 	bl	d975c <__aeabi_dcmple>
   d4834:	2800      	cmp	r0, #0
   d4836:	f43f aed8 	beq.w	d45ea <loop+0x21a>
      x = GRAVITY * lis.x_g;
   d483a:	a30d      	add	r3, pc, #52	; (adr r3, d4870 <loop+0x4a0>)
   d483c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4840:	4630      	mov	r0, r6
   d4842:	4639      	mov	r1, r7
   d4844:	f004 fd0e 	bl	d9264 <__aeabi_dmul>
   d4848:	f005 f804 	bl	d9854 <__aeabi_d2f>
      y = GRAVITY * lis.y_g;
   d484c:	a308      	add	r3, pc, #32	; (adr r3, d4870 <loop+0x4a0>)
   d484e:	e9d3 2300 	ldrd	r2, r3, [r3]
      x = GRAVITY * lis.x_g;
   d4852:	f8cb 0000 	str.w	r0, [fp]
      y = GRAVITY * lis.y_g;
   d4856:	4629      	mov	r1, r5
   d4858:	4620      	mov	r0, r4
   d485a:	f004 fd03 	bl	d9264 <__aeabi_dmul>
   d485e:	f004 fff9 	bl	d9854 <__aeabi_d2f>
   d4862:	4b08      	ldr	r3, [pc, #32]	; (d4884 <loop+0x4b4>)
      z = GRAVITY * (lis.z_g - 1);
   d4864:	ee78 7ac8 	vsub.f32	s15, s17, s16
      y = GRAVITY * lis.y_g;
   d4868:	6018      	str	r0, [r3, #0]
      z = GRAVITY * (lis.z_g - 1);
   d486a:	ee17 0a90 	vmov	r0, s15
   d486e:	e638      	b.n	d44e2 <loop+0x112>
   d4870:	acd9e83e 	.word	0xacd9e83e
   d4874:	40239cfa 	.word	0x40239cfa
   d4878:	9999999a 	.word	0x9999999a
   d487c:	3fe99999 	.word	0x3fe99999
   d4880:	3ff33333 	.word	0x3ff33333
   d4884:	2003e628 	.word	0x2003e628
   d4888:	2003e62c 	.word	0x2003e62c
   d488c:	2003e624 	.word	0x2003e624
   d4890:	2003e118 	.word	0x2003e118
   d4894:	000d9be3 	.word	0x000d9be3
   d4898:	2003e578 	.word	0x2003e578
   d489c:	000d9bec 	.word	0x000d9bec
   d48a0:	000d9bf7 	.word	0x000d9bf7
   d48a4:	2003e610 	.word	0x2003e610
   d48a8:	000d9c06 	.word	0x000d9c06
   d48ac:	2003e040 	.word	0x2003e040
   d48b0:	2003e0fc 	.word	0x2003e0fc
   d48b4:	2003e620 	.word	0x2003e620
   d48b8:	2003e7bc 	.word	0x2003e7bc
   d48bc:	2003e5d4 	.word	0x2003e5d4
   d48c0:	000d9c09 	.word	0x000d9c09
   d48c4:	000d9c13 	.word	0x000d9c13
   d48c8:	2003e5c4 	.word	0x2003e5c4
   d48cc:	000d9c16 	.word	0x000d9c16
   d48d0:	2003e588 	.word	0x2003e588
   d48d4:	2003e11c 	.word	0x2003e11c
   d48d8:	2003e01c 	.word	0x2003e01c
   d48dc:	000d9c1b 	.word	0x000d9c1b
   d48e0:	000d9c24 	.word	0x000d9c24
   d48e4:	000d9cb3 	.word	0x000d9cb3

000d48e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d48e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d48ec:	b094      	sub	sp, #80	; 0x50
   d48ee:	460d      	mov	r5, r1
   d48f0:	4604      	mov	r4, r0
  Serial.println(len);
   d48f2:	f003 fc11 	bl	d8118 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d48f6:	220a      	movs	r2, #10
   d48f8:	4606      	mov	r6, r0
   d48fa:	4629      	mov	r1, r5
   d48fc:	f003 f911 	bl	d7b22 <_ZN5Print11printNumberEmh>
        n += println();
   d4900:	4630      	mov	r0, r6
  switch(count){
   d4902:	4e95      	ldr	r6, [pc, #596]	; (d4b58 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x270>)
   d4904:	f003 f8f7 	bl	d7af6 <_ZN5Print7printlnEv>
   d4908:	6833      	ldr	r3, [r6, #0]
   d490a:	2b05      	cmp	r3, #5
   d490c:	d83a      	bhi.n	d4984 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>
   d490e:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4912:	0034      	.short	0x0034
   d4914:	0006001d 	.word	0x0006001d
   d4918:	00d900b2 	.word	0x00d900b2
   d491c:	00fe      	.short	0x00fe
	String & operator += (char c)			{concat(c); return (*this);}
   d491e:	f8df 8254 	ldr.w	r8, [pc, #596]	; d4b74 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28c>
   d4922:	4425      	add	r5, r4
      for(int i = 0; i < len - 1; i++){
   d4924:	3401      	adds	r4, #1
   d4926:	42a5      	cmp	r5, r4
   d4928:	d04f      	beq.n	d49ca <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe2>
        Serial.println(data[i]);
   d492a:	f003 fbf5 	bl	d8118 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d492e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4932:	4607      	mov	r7, r0
   d4934:	220a      	movs	r2, #10
   d4936:	f003 f8f4 	bl	d7b22 <_ZN5Print11printNumberEmh>
        n += println();
   d493a:	4638      	mov	r0, r7
   d493c:	f003 f8db 	bl	d7af6 <_ZN5Print7printlnEv>
   d4940:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4944:	4640      	mov	r0, r8
   d4946:	f001 fdd2 	bl	d64ee <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   d494a:	e7eb      	b.n	d4924 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c>
   d494c:	f8df 8214 	ldr.w	r8, [pc, #532]	; d4b64 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x27c>
   d4950:	4425      	add	r5, r4
      for(int i = 0; i < len -1; i++){
   d4952:	3401      	adds	r4, #1
   d4954:	42a5      	cmp	r5, r4
   d4956:	d01b      	beq.n	d4990 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa8>
   d4958:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d495c:	4640      	mov	r0, r8
   d495e:	f001 fdc6 	bl	d64ee <_ZN6String6concatEc>
        Serial.println(data[i]);
   d4962:	f003 fbd9 	bl	d8118 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4966:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d496a:	4607      	mov	r7, r0
   d496c:	220a      	movs	r2, #10
   d496e:	f003 f8d8 	bl	d7b22 <_ZN5Print11printNumberEmh>
        n += println();
   d4972:	4638      	mov	r0, r7
   d4974:	f003 f8bf 	bl	d7af6 <_ZN5Print7printlnEv>
      for(int i = 0; i < len -1; i++){
   d4978:	e7eb      	b.n	d4952 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6a>
      txCharacteristic.setValue("Enter network SSID (0 to skip): ");
   d497a:	4978      	ldr	r1, [pc, #480]	; (d4b5c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x274>)
   d497c:	2200      	movs	r2, #0
        txCharacteristic.setValue("Enter device DSID (0 to skip): ");
   d497e:	4878      	ldr	r0, [pc, #480]	; (d4b60 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>)
   d4980:	f002 f9bc 	bl	d6cfc <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
  count++;
   d4984:	6833      	ldr	r3, [r6, #0]
   d4986:	3301      	adds	r3, #1
   d4988:	6033      	str	r3, [r6, #0]
}
   d498a:	b014      	add	sp, #80	; 0x50
   d498c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        operator const char*() const { return c_str(); }
   d4990:	4c74      	ldr	r4, [pc, #464]	; (d4b64 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x27c>)
      Serial.println(ssid);
   d4992:	f003 fbc1 	bl	d8118 <_Z16_fetch_usbserialv>
   d4996:	6821      	ldr	r1, [r4, #0]
   d4998:	f003 f8b9 	bl	d7b0e <_ZN5Print7printlnEPKc>
      Serial.println(ssid.length());
   d499c:	f003 fbbc 	bl	d8118 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d49a0:	220a      	movs	r2, #10
   d49a2:	68a1      	ldr	r1, [r4, #8]
   d49a4:	4605      	mov	r5, r0
   d49a6:	f003 f8bc 	bl	d7b22 <_ZN5Print11printNumberEmh>
        n += println();
   d49aa:	4628      	mov	r0, r5
   d49ac:	f003 f8a3 	bl	d7af6 <_ZN5Print7printlnEv>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d49b0:	496d      	ldr	r1, [pc, #436]	; (d4b68 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x280>)
   d49b2:	4620      	mov	r0, r4
   d49b4:	f001 fdc9 	bl	d654a <_ZNK6String6equalsEPKc>
      if(ssid == "0"){
   d49b8:	4602      	mov	r2, r0
   d49ba:	b120      	cbz	r0, d49c6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xde>
        count = 2;
   d49bc:	2302      	movs	r3, #2
   d49be:	6033      	str	r3, [r6, #0]
        txCharacteristic.setValue("Enter device DSID (0 to skip): ");
   d49c0:	496a      	ldr	r1, [pc, #424]	; (d4b6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x284>)
   d49c2:	2200      	movs	r2, #0
   d49c4:	e7db      	b.n	d497e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
        txCharacteristic.setValue("Enter network password: ");
   d49c6:	496a      	ldr	r1, [pc, #424]	; (d4b70 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x288>)
   d49c8:	e7d9      	b.n	d497e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
        operator const char*() const { return c_str(); }
   d49ca:	4c6a      	ldr	r4, [pc, #424]	; (d4b74 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28c>)
      Serial.println(password);
   d49cc:	f003 fba4 	bl	d8118 <_Z16_fetch_usbserialv>
   d49d0:	6821      	ldr	r1, [r4, #0]
   d49d2:	f003 f89c 	bl	d7b0e <_ZN5Print7printlnEPKc>
      Serial.println(password.length());
   d49d6:	f003 fb9f 	bl	d8118 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d49da:	68a1      	ldr	r1, [r4, #8]
   d49dc:	4605      	mov	r5, r0
   d49de:	220a      	movs	r2, #10
   d49e0:	f003 f89f 	bl	d7b22 <_ZN5Print11printNumberEmh>
        n += println();
   d49e4:	4628      	mov	r0, r5
   d49e6:	f003 f886 	bl	d7af6 <_ZN5Print7printlnEv>
   d49ea:	4b5e      	ldr	r3, [pc, #376]	; (d4b64 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x27c>)
   d49ec:	6825      	ldr	r5, [r4, #0]
   d49ee:	f8d3 8000 	ldr.w	r8, [r3]
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d49f2:	f1b8 0f00 	cmp.w	r8, #0
   d49f6:	d03a      	beq.n	d4a6e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x186>
   d49f8:	4640      	mov	r0, r8
   d49fa:	f005 f815 	bl	d9a28 <strlen>
   d49fe:	4607      	mov	r7, r0
   d4a00:	2d00      	cmp	r5, #0
   d4a02:	d036      	beq.n	d4a72 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18a>
   d4a04:	4628      	mov	r0, r5
   d4a06:	f005 f80f 	bl	d9a28 <strlen>
   d4a0a:	4604      	mov	r4, r0
        memset(&creds, 0, sizeof(creds));
   d4a0c:	2238      	movs	r2, #56	; 0x38
   d4a0e:	2100      	movs	r1, #0
   d4a10:	a806      	add	r0, sp, #24
   d4a12:	f004 ffcb 	bl	d99ac <memset>
        creds.size = sizeof(creds);
   d4a16:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   d4a18:	e9cd 3801 	strd	r3, r8, [sp, #4]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d4a1c:	4856      	ldr	r0, [pc, #344]	; (d4b78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x290>)
        creds.password_len = passwordLen;
   d4a1e:	9405      	str	r4, [sp, #20]
        creds.security = WLanSecurityType(security);
   d4a20:	2303      	movs	r3, #3
   d4a22:	f8ad 3018 	strh.w	r3, [sp, #24]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d4a26:	2300      	movs	r3, #0
   d4a28:	4619      	mov	r1, r3
   d4a2a:	aa01      	add	r2, sp, #4
   d4a2c:	6840      	ldr	r0, [r0, #4]
        creds.password = password;
   d4a2e:	e9cd 7503 	strd	r7, r5, [sp, #12]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d4a32:	f001 f9bd 	bl	d5db0 <network_set_credentials>
      Serial.println("\n\nCredentials set with ssid: " + ssid + "\npassword: " + password + "\n\n");
   d4a36:	f003 fb6f 	bl	d8118 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d4a3a:	4950      	ldr	r1, [pc, #320]	; (d4b7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x294>)
   d4a3c:	4604      	mov	r4, r0
   d4a3e:	a801      	add	r0, sp, #4
   d4a40:	f001 fcba 	bl	d63b8 <_ZN6StringC1EPKc>
   d4a44:	4947      	ldr	r1, [pc, #284]	; (d4b64 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x27c>)
   d4a46:	a801      	add	r0, sp, #4
   d4a48:	f001 fd5e 	bl	d6508 <_ZplRK15StringSumHelperRK6String>
   d4a4c:	494c      	ldr	r1, [pc, #304]	; (d4b80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x298>)
   d4a4e:	f001 fd67 	bl	d6520 <_ZplRK15StringSumHelperPKc>
   d4a52:	4948      	ldr	r1, [pc, #288]	; (d4b74 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28c>)
   d4a54:	f001 fd58 	bl	d6508 <_ZplRK15StringSumHelperRK6String>
   d4a58:	494a      	ldr	r1, [pc, #296]	; (d4b84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x29c>)
   d4a5a:	f001 fd61 	bl	d6520 <_ZplRK15StringSumHelperPKc>
   d4a5e:	6801      	ldr	r1, [r0, #0]
   d4a60:	4620      	mov	r0, r4
   d4a62:	f003 f854 	bl	d7b0e <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   d4a66:	a801      	add	r0, sp, #4
   d4a68:	f001 fc5b 	bl	d6322 <_ZN6StringD1Ev>
      txCharacteristic.setValue("Enter device DSID (0 to skip): ");
   d4a6c:	e7a8      	b.n	d49c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd8>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d4a6e:	4647      	mov	r7, r8
   d4a70:	e7c6      	b.n	d4a00 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x118>
   d4a72:	462c      	mov	r4, r5
   d4a74:	e7ca      	b.n	d4a0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x124>
      if(atoi((char *)data) != 0){
   d4a76:	4620      	mov	r0, r4
   d4a78:	f004 ff3c 	bl	d98f4 <atoi>
   d4a7c:	b180      	cbz	r0, d4aa0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b8>
        EEPROM.put(0, atoi((char *)data));
   d4a7e:	f004 f8bf 	bl	d8c00 <_Z21__fetch_global_EEPROMv>
   d4a82:	4620      	mov	r0, r4
   d4a84:	f004 ff36 	bl	d98f4 <atoi>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4a88:	2204      	movs	r2, #4
   d4a8a:	eb0d 0102 	add.w	r1, sp, r2
   d4a8e:	9001      	str	r0, [sp, #4]
   d4a90:	2000      	movs	r0, #0
   d4a92:	f000 fec3 	bl	d581c <HAL_EEPROM_Put>
        Serial.println("dsid entered");
   d4a96:	f003 fb3f 	bl	d8118 <_Z16_fetch_usbserialv>
   d4a9a:	493b      	ldr	r1, [pc, #236]	; (d4b88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a0>)
   d4a9c:	f003 f837 	bl	d7b0e <_ZN5Print7printlnEPKc>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4aa0:	4c3a      	ldr	r4, [pc, #232]	; (d4b8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a4>)
      EEPROM.get(0, dsid);
   d4aa2:	f004 f8ad 	bl	d8c00 <_Z21__fetch_global_EEPROMv>
   d4aa6:	2204      	movs	r2, #4
   d4aa8:	4621      	mov	r1, r4
   d4aaa:	2000      	movs	r0, #0
   d4aac:	f000 feae 	bl	d580c <HAL_EEPROM_Get>
      Serial.println("dsid: " + dsid);
   d4ab0:	f003 fb32 	bl	d8118 <_Z16_fetch_usbserialv>
   d4ab4:	6823      	ldr	r3, [r4, #0]
   d4ab6:	4936      	ldr	r1, [pc, #216]	; (d4b90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a8>)
   d4ab8:	4419      	add	r1, r3
   d4aba:	f003 f828 	bl	d7b0e <_ZN5Print7printlnEPKc>
      txCharacteristic.setValue("Enter time between data collection (ms): ");
   d4abe:	4935      	ldr	r1, [pc, #212]	; (d4b94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ac>)
   d4ac0:	2200      	movs	r2, #0
   d4ac2:	e75c      	b.n	d497e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
      sleepDuration = atoi((char *)data);
   d4ac4:	4620      	mov	r0, r4
   d4ac6:	f004 ff15 	bl	d98f4 <atoi>
   d4aca:	4c33      	ldr	r4, [pc, #204]	; (d4b98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>)
   d4acc:	6020      	str	r0, [r4, #0]
      EEPROM.put(100, sleepDuration);
   d4ace:	f004 f897 	bl	d8c00 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4ad2:	2204      	movs	r2, #4
   d4ad4:	4621      	mov	r1, r4
   d4ad6:	2064      	movs	r0, #100	; 0x64
   d4ad8:	f000 fea0 	bl	d581c <HAL_EEPROM_Put>
      EEPROM.get(100, sleepDuration);
   d4adc:	f004 f890 	bl	d8c00 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4ae0:	2204      	movs	r2, #4
   d4ae2:	4621      	mov	r1, r4
   d4ae4:	2064      	movs	r0, #100	; 0x64
   d4ae6:	f000 fe91 	bl	d580c <HAL_EEPROM_Get>
        if (valid_) {
   d4aea:	4b2c      	ldr	r3, [pc, #176]	; (d4b9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b4>)
   d4aec:	7d1a      	ldrb	r2, [r3, #20]
   d4aee:	b10a      	cbz	r2, d4af4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x20c>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4af0:	2202      	movs	r2, #2
   d4af2:	721a      	strb	r2, [r3, #8]
      config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration);
   d4af4:	6821      	ldr	r1, [r4, #0]
   d4af6:	4829      	ldr	r0, [pc, #164]	; (d4b9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b4>)
   d4af8:	f7ff fb42 	bl	d4180 <_ZN8particle24SystemSleepConfiguration8durationEm>
      Serial.println(sleepDuration);
   d4afc:	f003 fb0c 	bl	d8118 <_Z16_fetch_usbserialv>
   d4b00:	6821      	ldr	r1, [r4, #0]
   d4b02:	220a      	movs	r2, #10
   d4b04:	f7ff fc40 	bl	d4388 <_ZN5Print7printlnIiLi0EEEjT_i>
      txCharacteristic.setValue("Enter time between WiFi connection (ms): ");
   d4b08:	4925      	ldr	r1, [pc, #148]	; (d4ba0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   d4b0a:	2200      	movs	r2, #0
   d4b0c:	e737      	b.n	d497e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
      wifiInterval = atoi((char *)data);
   d4b0e:	4620      	mov	r0, r4
   d4b10:	f004 fef0 	bl	d98f4 <atoi>
   d4b14:	4c23      	ldr	r4, [pc, #140]	; (d4ba4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2bc>)
   d4b16:	6020      	str	r0, [r4, #0]
      EEPROM.put(200, wifiInterval);
   d4b18:	f004 f872 	bl	d8c00 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4b1c:	4621      	mov	r1, r4
   d4b1e:	2204      	movs	r2, #4
   d4b20:	20c8      	movs	r0, #200	; 0xc8
   d4b22:	f000 fe7b 	bl	d581c <HAL_EEPROM_Put>
      EEPROM.get(200, wifiInterval);
   d4b26:	f004 f86b 	bl	d8c00 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4b2a:	4621      	mov	r1, r4
   d4b2c:	2204      	movs	r2, #4
   d4b2e:	20c8      	movs	r0, #200	; 0xc8
   d4b30:	f000 fe6c 	bl	d580c <HAL_EEPROM_Get>
      wifiTimeLeft = wifiInterval;
   d4b34:	4b1c      	ldr	r3, [pc, #112]	; (d4ba8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c0>)
   d4b36:	6822      	ldr	r2, [r4, #0]
   d4b38:	601a      	str	r2, [r3, #0]
      Serial.println(wifiInterval);
   d4b3a:	f003 faed 	bl	d8118 <_Z16_fetch_usbserialv>
   d4b3e:	6821      	ldr	r1, [r4, #0]
   d4b40:	220a      	movs	r2, #10
   d4b42:	f7ff fc21 	bl	d4388 <_ZN5Print7printlnIiLi0EEEjT_i>
      bleInput = true;
   d4b46:	4b19      	ldr	r3, [pc, #100]	; (d4bac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c4>)
   d4b48:	2201      	movs	r2, #1
      digitalWrite(D7, LOW);
   d4b4a:	2100      	movs	r1, #0
   d4b4c:	2007      	movs	r0, #7
      bleInput = true;
   d4b4e:	701a      	strb	r2, [r3, #0]
      digitalWrite(D7, LOW);
   d4b50:	f004 f829 	bl	d8ba6 <digitalWrite>
      break;
   d4b54:	e716      	b.n	d4984 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>
   d4b56:	bf00      	nop
   d4b58:	2003e114 	.word	0x2003e114
   d4b5c:	000d9c2b 	.word	0x000d9c2b
   d4b60:	2003e608 	.word	0x2003e608
   d4b64:	2003e5f0 	.word	0x2003e5f0
   d4b68:	000d9c4c 	.word	0x000d9c4c
   d4b6c:	000d9c4e 	.word	0x000d9c4e
   d4b70:	000d9c6e 	.word	0x000d9c6e
   d4b74:	2003e568 	.word	0x2003e568
   d4b78:	2003e7bc 	.word	0x2003e7bc
   d4b7c:	000d9c87 	.word	0x000d9c87
   d4b80:	000d9ca5 	.word	0x000d9ca5
   d4b84:	000d9cb1 	.word	0x000d9cb1
   d4b88:	000d9cb4 	.word	0x000d9cb4
   d4b8c:	2003e118 	.word	0x2003e118
   d4b90:	000d9cc1 	.word	0x000d9cc1
   d4b94:	000d9cc8 	.word	0x000d9cc8
   d4b98:	2003e03c 	.word	0x2003e03c
   d4b9c:	2003e0fc 	.word	0x2003e0fc
   d4ba0:	000d9cf2 	.word	0x000d9cf2
   d4ba4:	2003e040 	.word	0x2003e040
   d4ba8:	2003e620 	.word	0x2003e620
   d4bac:	2003e0f8 	.word	0x2003e0f8

000d4bb0 <_ZN15Adafruit_LIS3DHD0Ev>:
   d4bb0:	b510      	push	{r4, lr}
   d4bb2:	212c      	movs	r1, #44	; 0x2c
   d4bb4:	4604      	mov	r4, r0
   d4bb6:	f004 f87e 	bl	d8cb6 <_ZdlPvj>
   d4bba:	4620      	mov	r0, r4
   d4bbc:	bd10      	pop	{r4, pc}
	...

000d4bc0 <_GLOBAL__sub_I_SystemMode>:
   d4bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
              error_(SYSTEM_ERROR_NONE) {
   d4bc4:	4e68      	ldr	r6, [pc, #416]	; (d4d68 <_GLOBAL__sub_I_SystemMode+0x1a8>)
    SleepResult() {}
   d4bc6:	4b69      	ldr	r3, [pc, #420]	; (d4d6c <_GLOBAL__sub_I_SystemMode+0x1ac>)
   d4bc8:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4bca:	2500      	movs	r5, #0
   d4bcc:	b091      	sub	sp, #68	; 0x44
SYSTEM_MODE(MANUAL)
   d4bce:	4c68      	ldr	r4, [pc, #416]	; (d4d70 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4bd0:	6035      	str	r5, [r6, #0]
   d4bd2:	80b5      	strh	r5, [r6, #4]
    SleepResult() {}
   d4bd4:	71b5      	strb	r5, [r6, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4bd6:	2003      	movs	r0, #3
   d4bd8:	f001 f86c 	bl	d5cb4 <set_system_mode>
String payload = "";
   d4bdc:	f8df 81f4 	ldr.w	r8, [pc, #500]	; d4dd4 <_GLOBAL__sub_I_SystemMode+0x214>
SYSTEM_MODE(MANUAL)
   d4be0:	4964      	ldr	r1, [pc, #400]	; (d4d74 <_GLOBAL__sub_I_SystemMode+0x1b4>)
String payload = "";
   d4be2:	4f65      	ldr	r7, [pc, #404]	; (d4d78 <_GLOBAL__sub_I_SystemMode+0x1b8>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d4be4:	f8df 91f0 	ldr.w	r9, [pc, #496]	; d4dd8 <_GLOBAL__sub_I_SystemMode+0x218>
SYSTEM_MODE(MANUAL)
   d4be8:	4630      	mov	r0, r6
String payload = "";
   d4bea:	4e64      	ldr	r6, [pc, #400]	; (d4d7c <_GLOBAL__sub_I_SystemMode+0x1bc>)
SYSTEM_MODE(MANUAL)
   d4bec:	4622      	mov	r2, r4
   d4bee:	f004 f85d 	bl	d8cac <__aeabi_atexit>
String payload = "";
   d4bf2:	4631      	mov	r1, r6
   d4bf4:	4640      	mov	r0, r8
   d4bf6:	f001 fbdf 	bl	d63b8 <_ZN6StringC1EPKc>
   d4bfa:	4640      	mov	r0, r8
String unixTime;
   d4bfc:	f8df 81dc 	ldr.w	r8, [pc, #476]	; d4ddc <_GLOBAL__sub_I_SystemMode+0x21c>
String payload = "";
   d4c00:	4622      	mov	r2, r4
   d4c02:	4639      	mov	r1, r7
   d4c04:	f004 f852 	bl	d8cac <__aeabi_atexit>
String unixTime;
   d4c08:	4631      	mov	r1, r6
   d4c0a:	4640      	mov	r0, r8
   d4c0c:	f001 fbd4 	bl	d63b8 <_ZN6StringC1EPKc>
   d4c10:	4640      	mov	r0, r8
String ssid, password = "";
   d4c12:	f8df 81cc 	ldr.w	r8, [pc, #460]	; d4de0 <_GLOBAL__sub_I_SystemMode+0x220>
String unixTime;
   d4c16:	4622      	mov	r2, r4
   d4c18:	4639      	mov	r1, r7
   d4c1a:	f004 f847 	bl	d8cac <__aeabi_atexit>
String ssid, password = "";
   d4c1e:	4631      	mov	r1, r6
   d4c20:	4640      	mov	r0, r8
   d4c22:	f001 fbc9 	bl	d63b8 <_ZN6StringC1EPKc>
   d4c26:	4640      	mov	r0, r8
   d4c28:	f8df 81b8 	ldr.w	r8, [pc, #440]	; d4de4 <_GLOBAL__sub_I_SystemMode+0x224>
   d4c2c:	4622      	mov	r2, r4
   d4c2e:	4639      	mov	r1, r7
   d4c30:	f004 f83c 	bl	d8cac <__aeabi_atexit>
   d4c34:	4631      	mov	r1, r6
   d4c36:	4640      	mov	r0, r8
   d4c38:	f001 fbbe 	bl	d63b8 <_ZN6StringC1EPKc>
   d4c3c:	4639      	mov	r1, r7
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d4c3e:	4f50      	ldr	r7, [pc, #320]	; (d4d80 <_GLOBAL__sub_I_SystemMode+0x1c0>)
String ssid, password = "";
   d4c40:	4622      	mov	r2, r4
   d4c42:	4640      	mov	r0, r8
   d4c44:	f004 f832 	bl	d8cac <__aeabi_atexit>
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d4c48:	4638      	mov	r0, r7
   d4c4a:	f000 f8f1 	bl	d4e30 <_ZN15Adafruit_LIS3DHC1Ev>
   d4c4e:	4622      	mov	r2, r4
   d4c50:	494c      	ldr	r1, [pc, #304]	; (d4d84 <_GLOBAL__sub_I_SystemMode+0x1c4>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d4c52:	f8df 8194 	ldr.w	r8, [pc, #404]	; d4de8 <_GLOBAL__sub_I_SystemMode+0x228>
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d4c56:	4638      	mov	r0, r7
   d4c58:	f004 f828 	bl	d8cac <__aeabi_atexit>
        : config_(config) {
   d4c5c:	484a      	ldr	r0, [pc, #296]	; (d4d88 <_GLOBAL__sub_I_SystemMode+0x1c8>)
HttpClient http;
   d4c5e:	4f4b      	ldr	r7, [pc, #300]	; (d4d8c <_GLOBAL__sub_I_SystemMode+0x1cc>)
              valid_(true) {
   d4c60:	f8a0 5009 	strh.w	r5, [r0, #9]
        : config_(config) {
   d4c64:	4603      	mov	r3, r0
   d4c66:	1d02      	adds	r2, r0, #4
   d4c68:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d4c6c:	709d      	strb	r5, [r3, #2]
   d4c6e:	2301      	movs	r3, #1
   d4c70:	7503      	strb	r3, [r0, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d4c72:	4b47      	ldr	r3, [pc, #284]	; (d4d90 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4c74:	6043      	str	r3, [r0, #4]
SystemSleepConfiguration config;
   d4c76:	4622      	mov	r2, r4
   d4c78:	4946      	ldr	r1, [pc, #280]	; (d4d94 <_GLOBAL__sub_I_SystemMode+0x1d4>)
        config_.mode = HAL_SLEEP_MODE_NONE;
   d4c7a:	7205      	strb	r5, [r0, #8]
        config_.wakeup_sources = nullptr;
   d4c7c:	e9c0 5503 	strd	r5, r5, [r0, #12]
   d4c80:	f004 f814 	bl	d8cac <__aeabi_atexit>
HttpClient http;
   d4c84:	4638      	mov	r0, r7
   d4c86:	f000 fb22 	bl	d52ce <_ZN10HttpClientC1Ev>
   d4c8a:	4638      	mov	r0, r7
} http_request_t;
   d4c8c:	4f42      	ldr	r7, [pc, #264]	; (d4d98 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d4c8e:	4943      	ldr	r1, [pc, #268]	; (d4d9c <_GLOBAL__sub_I_SystemMode+0x1dc>)
   d4c90:	4622      	mov	r2, r4
   d4c92:	f004 f80b 	bl	d8cac <__aeabi_atexit>
   d4c96:	4631      	mov	r1, r6
   d4c98:	4638      	mov	r0, r7
   d4c9a:	f001 fb8d 	bl	d63b8 <_ZN6StringC1EPKc>
   d4c9e:	f107 0010 	add.w	r0, r7, #16
   d4ca2:	f003 f989 	bl	d7fb8 <_ZN9IPAddressC1Ev>
   d4ca6:	4631      	mov	r1, r6
   d4ca8:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d4cac:	f001 fb84 	bl	d63b8 <_ZN6StringC1EPKc>
   d4cb0:	4631      	mov	r1, r6
   d4cb2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   d4cb6:	f001 fb7f 	bl	d63b8 <_ZN6StringC1EPKc>
http_request_t request;
   d4cba:	4638      	mov	r0, r7
} http_response_t;
   d4cbc:	4f38      	ldr	r7, [pc, #224]	; (d4da0 <_GLOBAL__sub_I_SystemMode+0x1e0>)
   d4cbe:	4939      	ldr	r1, [pc, #228]	; (d4da4 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d4cc0:	4622      	mov	r2, r4
   d4cc2:	f003 fff3 	bl	d8cac <__aeabi_atexit>
   d4cc6:	4631      	mov	r1, r6
   d4cc8:	1d38      	adds	r0, r7, #4
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d4cca:	4e37      	ldr	r6, [pc, #220]	; (d4da8 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   d4ccc:	f001 fb74 	bl	d63b8 <_ZN6StringC1EPKc>
http_response_t response;
   d4cd0:	4622      	mov	r2, r4
   d4cd2:	4936      	ldr	r1, [pc, #216]	; (d4dac <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d4cd4:	4638      	mov	r0, r7
   d4cd6:	f003 ffe9 	bl	d8cac <__aeabi_atexit>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d4cda:	4f35      	ldr	r7, [pc, #212]	; (d4db0 <_GLOBAL__sub_I_SystemMode+0x1f0>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d4cdc:	4935      	ldr	r1, [pc, #212]	; (d4db4 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d4cde:	4630      	mov	r0, r6
   d4ce0:	f001 ff2e 	bl	d6b40 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d4ce4:	4934      	ldr	r1, [pc, #208]	; (d4db8 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d4ce6:	4640      	mov	r0, r8
   d4ce8:	f001 ff2a 	bl	d6b40 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d4cec:	4933      	ldr	r1, [pc, #204]	; (d4dbc <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4cee:	4638      	mov	r0, r7
   d4cf0:	f001 ff26 	bl	d6b40 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   d4cf4:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d4cf6:	4639      	mov	r1, r7
   d4cf8:	a806      	add	r0, sp, #24
   d4cfa:	f88d 3014 	strb.w	r3, [sp, #20]
   d4cfe:	f001 fe39 	bl	d6974 <_ZN8particle7BleUuidC1ERKS0_>
   d4d02:	4631      	mov	r1, r6
   d4d04:	a80b      	add	r0, sp, #44	; 0x2c
   d4d06:	f001 fe35 	bl	d6974 <_ZN8particle7BleUuidC1ERKS0_>
   d4d0a:	4f2d      	ldr	r7, [pc, #180]	; (d4dc0 <_GLOBAL__sub_I_SystemMode+0x200>)
   d4d0c:	492d      	ldr	r1, [pc, #180]	; (d4dc4 <_GLOBAL__sub_I_SystemMode+0x204>)
   d4d0e:	ab0b      	add	r3, sp, #44	; 0x2c
   d4d10:	9300      	str	r3, [sp, #0]
   d4d12:	aa05      	add	r2, sp, #20
   d4d14:	ab06      	add	r3, sp, #24
   d4d16:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d4d1a:	4648      	mov	r0, r9
   d4d1c:	f7ff fb12 	bl	d4344 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4d20:	4622      	mov	r2, r4
   d4d22:	4639      	mov	r1, r7
   d4d24:	4648      	mov	r0, r9
   d4d26:	f003 ffc1 	bl	d8cac <__aeabi_atexit>
   d4d2a:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d4d2c:	4641      	mov	r1, r8
   d4d2e:	a806      	add	r0, sp, #24
   d4d30:	f88d 3014 	strb.w	r3, [sp, #20]
   d4d34:	f001 fe1e 	bl	d6974 <_ZN8particle7BleUuidC1ERKS0_>
   d4d38:	4631      	mov	r1, r6
   d4d3a:	a80b      	add	r0, sp, #44	; 0x2c
   d4d3c:	f001 fe1a 	bl	d6974 <_ZN8particle7BleUuidC1ERKS0_>
   d4d40:	4e21      	ldr	r6, [pc, #132]	; (d4dc8 <_GLOBAL__sub_I_SystemMode+0x208>)
   d4d42:	4b22      	ldr	r3, [pc, #136]	; (d4dcc <_GLOBAL__sub_I_SystemMode+0x20c>)
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	ab0b      	add	r3, sp, #44	; 0x2c
   d4d48:	9300      	str	r3, [sp, #0]
   d4d4a:	aa05      	add	r2, sp, #20
   d4d4c:	ab06      	add	r3, sp, #24
   d4d4e:	4920      	ldr	r1, [pc, #128]	; (d4dd0 <_GLOBAL__sub_I_SystemMode+0x210>)
   d4d50:	9502      	str	r5, [sp, #8]
   d4d52:	4630      	mov	r0, r6
   d4d54:	f7ff faf6 	bl	d4344 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4d58:	4622      	mov	r2, r4
   d4d5a:	4639      	mov	r1, r7
   d4d5c:	4630      	mov	r0, r6
   d4d5e:	f003 ffa5 	bl	d8cac <__aeabi_atexit>
   d4d62:	b011      	add	sp, #68	; 0x44
   d4d64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4d68:	2003e0b0 	.word	0x2003e0b0
   d4d6c:	ffff0000 	.word	0xffff0000
   d4d70:	2003e0ac 	.word	0x2003e0ac
   d4d74:	000d4171 	.word	0x000d4171
   d4d78:	000d6323 	.word	0x000d6323
   d4d7c:	000d9cb3 	.word	0x000d9cb3
   d4d80:	2003e53c 	.word	0x2003e53c
   d4d84:	000d40b3 	.word	0x000d40b3
   d4d88:	2003e0fc 	.word	0x2003e0fc
   d4d8c:	2003e11c 	.word	0x2003e11c
   d4d90:	00030010 	.word	0x00030010
   d4d94:	000d4125 	.word	0x000d4125
   d4d98:	2003e588 	.word	0x2003e588
   d4d9c:	000d413d 	.word	0x000d413d
   d4da0:	2003e5d4 	.word	0x2003e5d4
   d4da4:	000d40c3 	.word	0x000d40c3
   d4da8:	2003e0bc 	.word	0x2003e0bc
   d4dac:	000d40b5 	.word	0x000d40b5
   d4db0:	2003e0e4 	.word	0x2003e0e4
   d4db4:	000d9d1c 	.word	0x000d9d1c
   d4db8:	000d9d41 	.word	0x000d9d41
   d4dbc:	000d9d66 	.word	0x000d9d66
   d4dc0:	000d704b 	.word	0x000d704b
   d4dc4:	000d9d8b 	.word	0x000d9d8b
   d4dc8:	2003e5e8 	.word	0x2003e5e8
   d4dcc:	000d48e9 	.word	0x000d48e9
   d4dd0:	000d9d8e 	.word	0x000d9d8e
   d4dd4:	2003e578 	.word	0x2003e578
   d4dd8:	2003e608 	.word	0x2003e608
   d4ddc:	2003e610 	.word	0x2003e610
   d4de0:	2003e5f0 	.word	0x2003e5f0
   d4de4:	2003e568 	.word	0x2003e568
   d4de8:	2003e0d0 	.word	0x2003e0d0

000d4dec <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d4dec:	4770      	bx	lr
	...

000d4df0 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d4df0:	460b      	mov	r3, r1
   d4df2:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d4df4:	2228      	movs	r2, #40	; 0x28
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d4df6:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d4df8:	2100      	movs	r1, #0
   d4dfa:	4618      	mov	r0, r3
   d4dfc:	f004 fdd6 	bl	d99ac <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d4e00:	4908      	ldr	r1, [pc, #32]	; (d4e24 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
   d4e02:	220b      	movs	r2, #11
   d4e04:	f004 fe18 	bl	d9a38 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d4e08:	2200      	movs	r2, #0
  sensor->version     = 1;
   d4e0a:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d4e0c:	72c2      	strb	r2, [r0, #11]
  sensor->version     = 1;
   d4e0e:	60c1      	str	r1, [r0, #12]
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d4e10:	4603      	mov	r3, r0
  sensor->sensor_id   = _sensorID;
   d4e12:	69a0      	ldr	r0, [r4, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
   d4e14:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   d4e16:	e9c3 0104 	strd	r0, r1, [r3, #16]
  sensor->max_value   = 0;
   d4e1a:	2200      	movs	r2, #0
   d4e1c:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0;
   d4e1e:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0;
   d4e20:	621a      	str	r2, [r3, #32]
}
   d4e22:	bd10      	pop	{r4, pc}
   d4e24:	000d9ddc 	.word	0x000d9ddc

000d4e28 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4e28:	6803      	ldr	r3, [r0, #0]
   d4e2a:	b2c9      	uxtb	r1, r1
   d4e2c:	689b      	ldr	r3, [r3, #8]
   d4e2e:	4718      	bx	r3

000d4e30 <_ZN15Adafruit_LIS3DHC1Ev>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   d4e30:	4a06      	ldr	r2, [pc, #24]	; (d4e4c <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   d4e32:	6002      	str	r2, [r0, #0]
   d4e34:	f04f 32ff 	mov.w	r2, #4294967295
   d4e38:	6182      	str	r2, [r0, #24]
   d4e3a:	7742      	strb	r2, [r0, #29]
   d4e3c:	83c2      	strh	r2, [r0, #30]
   d4e3e:	22ff      	movs	r2, #255	; 0xff
   d4e40:	f880 2020 	strb.w	r2, [r0, #32]
   d4e44:	2208      	movs	r2, #8
   d4e46:	6242      	str	r2, [r0, #36]	; 0x24
}
   d4e48:	4770      	bx	lr
   d4e4a:	bf00      	nop
   d4e4c:	000d9dec 	.word	0x000d9dec

000d4e50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4e50:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4e52:	4c0b      	ldr	r4, [pc, #44]	; (d4e80 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4e54:	7821      	ldrb	r1, [r4, #0]
   d4e56:	f3bf 8f5b 	dmb	ish
   d4e5a:	f011 0101 	ands.w	r1, r1, #1
   d4e5e:	d10b      	bne.n	d4e78 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4e60:	4620      	mov	r0, r4
   d4e62:	9101      	str	r1, [sp, #4]
   d4e64:	f7ff f91d 	bl	d40a2 <__cxa_guard_acquire>
   d4e68:	9901      	ldr	r1, [sp, #4]
   d4e6a:	b128      	cbz	r0, d4e78 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4e6c:	4805      	ldr	r0, [pc, #20]	; (d4e84 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4e6e:	f001 f86b 	bl	d5f48 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4e72:	4620      	mov	r0, r4
   d4e74:	f7ff f91a 	bl	d40ac <__cxa_guard_release>
        return instance;
    }
   d4e78:	4802      	ldr	r0, [pc, #8]	; (d4e84 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4e7a:	b002      	add	sp, #8
   d4e7c:	bd10      	pop	{r4, pc}
   d4e7e:	bf00      	nop
   d4e80:	2003e630 	.word	0x2003e630
   d4e84:	2003e634 	.word	0x2003e634

000d4e88 <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d4e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
   d4e8c:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4e90:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d4e92:	4605      	mov	r5, r0
   d4e94:	460f      	mov	r7, r1
  if (_sck == -1)
   d4e96:	d106      	bne.n	d4ea6 <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4e98:	f7ff ffda 	bl	d4e50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4e9c:	4639      	mov	r1, r7
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
   d4e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4ea2:	f001 b8db 	b.w	d605c <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   d4ea6:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   d4ea8:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   d4eaa:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   d4eae:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d4eb2:	2100      	movs	r1, #0
   d4eb4:	b280      	uxth	r0, r0
   d4eb6:	f003 fe76 	bl	d8ba6 <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   d4eba:	f995 001e 	ldrsb.w	r0, [r5, #30]
   d4ebe:	fa08 f106 	lsl.w	r1, r8, r6
   d4ec2:	4039      	ands	r1, r7
   d4ec4:	b280      	uxth	r0, r0
   d4ec6:	f003 fe6e 	bl	d8ba6 <digitalWrite>
    digitalWrite(_sck, HIGH);
   d4eca:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d4ece:	2101      	movs	r1, #1
   d4ed0:	b280      	uxth	r0, r0
   d4ed2:	f003 fe68 	bl	d8ba6 <digitalWrite>
    if (digitalRead(_miso))
   d4ed6:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
   d4eda:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   d4edc:	b280      	uxth	r0, r0
    reply <<= 1;
   d4ede:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   d4ee0:	f003 fe7a 	bl	d8bd8 <digitalRead>
   d4ee4:	b108      	cbz	r0, d4eea <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   d4ee6:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   d4eea:	3e01      	subs	r6, #1
   d4eec:	d2df      	bcs.n	d4eae <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
   d4eee:	4620      	mov	r0, r4
   d4ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4ef4 <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   d4ef4:	b508      	push	{r3, lr}
        instance().setBitOrder(order);
   d4ef6:	f7ff ffab 	bl	d4e50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4efa:	2101      	movs	r1, #1
   d4efc:	f001 f83f 	bl	d5f7e <_ZN8SPIClass11setBitOrderEh>
        return instance().setClockSpeed(value, scale);
   d4f00:	f7ff ffa6 	bl	d4e50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4f04:	4905      	ldr	r1, [pc, #20]	; (d4f1c <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   d4f06:	2201      	movs	r2, #1
   d4f08:	f001 f876 	bl	d5ff8 <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
   d4f0c:	f7ff ffa0 	bl	d4e50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   d4f10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4f14:	2100      	movs	r1, #0
   d4f16:	f001 b845 	b.w	d5fa4 <_ZN8SPIClass11setDataModeEh>
   d4f1a:	bf00      	nop
   d4f1c:	0007a120 	.word	0x0007a120

000d4f20 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d4f20:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   d4f22:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4f26:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d4f28:	4604      	mov	r4, r0
   d4f2a:	460e      	mov	r6, r1
   d4f2c:	4615      	mov	r5, r2
  if (_cs == -1) {
   d4f2e:	d116      	bne.n	d4f5e <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   d4f30:	f003 fe94 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d4f34:	7f21      	ldrb	r1, [r4, #28]
   d4f36:	f003 fa0b 	bl	d8350 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d4f3a:	f003 fe8f 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d4f3e:	6803      	ldr	r3, [r0, #0]
   d4f40:	4631      	mov	r1, r6
   d4f42:	689b      	ldr	r3, [r3, #8]
   d4f44:	4798      	blx	r3
    Wire.write((uint8_t)value);
   d4f46:	f003 fe89 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d4f4a:	6803      	ldr	r3, [r0, #0]
   d4f4c:	4629      	mov	r1, r5
   d4f4e:	689b      	ldr	r3, [r3, #8]
   d4f50:	4798      	blx	r3
    Wire.endTransmission();
   d4f52:	f003 fe83 	bl	d8c5c <_Z19__fetch_global_Wirev>
}
   d4f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   d4f5a:	f003 ba04 	b.w	d8366 <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
   d4f5e:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4f62:	3301      	adds	r3, #1
   d4f64:	d101      	bne.n	d4f6a <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   d4f66:	f7ff ffc5 	bl	d4ef4 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d4f6a:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4f6e:	2100      	movs	r1, #0
   d4f70:	b280      	uxth	r0, r0
   d4f72:	f003 fe18 	bl	d8ba6 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   d4f76:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4f7a:	4620      	mov	r0, r4
   d4f7c:	f7ff ff84 	bl	d4e88 <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   d4f80:	4629      	mov	r1, r5
   d4f82:	4620      	mov	r0, r4
   d4f84:	f7ff ff80 	bl	d4e88 <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   d4f88:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4f8c:	2101      	movs	r1, #1
}
   d4f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   d4f92:	b280      	uxth	r0, r0
   d4f94:	f003 be07 	b.w	d8ba6 <digitalWrite>

000d4f98 <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d4f98:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d4f9a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4f9e:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d4fa0:	4604      	mov	r4, r0
   d4fa2:	460d      	mov	r5, r1
  if (_cs == -1) {
   d4fa4:	d11d      	bne.n	d4fe2 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   d4fa6:	f003 fe59 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d4faa:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d4fae:	f003 f9d3 	bl	d8358 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   d4fb2:	f003 fe53 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d4fb6:	6803      	ldr	r3, [r0, #0]
   d4fb8:	4629      	mov	r1, r5
   d4fba:	689b      	ldr	r3, [r3, #8]
   d4fbc:	4798      	blx	r3
    Wire.endTransmission();
   d4fbe:	f003 fe4d 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d4fc2:	f003 f9d0 	bl	d8366 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
   d4fc6:	f003 fe49 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d4fca:	7f21      	ldrb	r1, [r4, #28]
   d4fcc:	2201      	movs	r2, #1
   d4fce:	f003 f9bc 	bl	d834a <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   d4fd2:	f003 fe43 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d4fd6:	6803      	ldr	r3, [r0, #0]
   d4fd8:	695b      	ldr	r3, [r3, #20]
   d4fda:	4798      	blx	r3
   d4fdc:	b2c5      	uxtb	r5, r0
}
   d4fde:	4628      	mov	r0, r5
   d4fe0:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
   d4fe2:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4fe6:	3301      	adds	r3, #1
   d4fe8:	d101      	bne.n	d4fee <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   d4fea:	f7ff ff83 	bl	d4ef4 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
   d4fee:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4ff2:	2100      	movs	r1, #0
   d4ff4:	b280      	uxth	r0, r0
   d4ff6:	f003 fdd6 	bl	d8ba6 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   d4ffa:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4ffe:	4620      	mov	r0, r4
   d5000:	f7ff ff42 	bl	d4e88 <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   d5004:	2100      	movs	r1, #0
   d5006:	4620      	mov	r0, r4
   d5008:	f7ff ff3e 	bl	d4e88 <_ZN15Adafruit_LIS3DH7spixferEh>
   d500c:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   d500e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5012:	2101      	movs	r1, #1
   d5014:	b280      	uxth	r0, r0
   d5016:	f003 fdc6 	bl	d8ba6 <digitalWrite>
    if (_sck == -1)
   d501a:	e7e0      	b.n	d4fde <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

000d501c <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>:
{
   d501c:	b538      	push	{r3, r4, r5, lr}
   d501e:	460d      	mov	r5, r1
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d5020:	2123      	movs	r1, #35	; 0x23
{
   d5022:	4604      	mov	r4, r0
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d5024:	f7ff ffb8 	bl	d4f98 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  r &= ~(0x30);
   d5028:	f020 0230 	bic.w	r2, r0, #48	; 0x30
  r |= range << 4;
   d502c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d5030:	4620      	mov	r0, r4
   d5032:	b2d2      	uxtb	r2, r2
}
   d5034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d5038:	2123      	movs	r1, #35	; 0x23
   d503a:	f7ff bf71 	b.w	d4f20 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d503e <_ZN15Adafruit_LIS3DH8getRangeEv>:
{
   d503e:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   d5040:	2123      	movs	r1, #35	; 0x23
   d5042:	f7ff ffa9 	bl	d4f98 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   d5046:	f3c0 1001 	ubfx	r0, r0, #4, #2
   d504a:	bd08      	pop	{r3, pc}

000d504c <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
   d504c:	b538      	push	{r3, r4, r5, lr}
   d504e:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d5050:	2120      	movs	r1, #32
{
   d5052:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d5054:	f7ff ffa0 	bl	d4f98 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
   d5058:	f000 020f 	and.w	r2, r0, #15
  ctl1 |= (dataRate << 4);
   d505c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d5060:	4620      	mov	r0, r4
   d5062:	b2d2      	uxtb	r2, r2
}
   d5064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d5068:	2120      	movs	r1, #32
   d506a:	f7ff bf59 	b.w	d4f20 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d506e <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   d506e:	b510      	push	{r4, lr}
   d5070:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   d5072:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
   d5074:	f990 001d 	ldrsb.w	r0, [r0, #29]
   d5078:	1c42      	adds	r2, r0, #1
   d507a:	d123      	bne.n	d50c4 <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
   d507c:	f003 fdee 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d5080:	f003 f930 	bl	d82e4 <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   d5084:	210f      	movs	r1, #15
   d5086:	4620      	mov	r0, r4
   d5088:	f7ff ff86 	bl	d4f98 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   d508c:	2833      	cmp	r0, #51	; 0x33
   d508e:	d13d      	bne.n	d510c <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   d5090:	2207      	movs	r2, #7
   d5092:	2120      	movs	r1, #32
   d5094:	4620      	mov	r0, r4
   d5096:	f7ff ff43 	bl	d4f20 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
   d509a:	2107      	movs	r1, #7
   d509c:	4620      	mov	r0, r4
   d509e:	f7ff ffd5 	bl	d504c <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   d50a2:	2288      	movs	r2, #136	; 0x88
   d50a4:	2123      	movs	r1, #35	; 0x23
   d50a6:	4620      	mov	r0, r4
   d50a8:	f7ff ff3a 	bl	d4f20 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   d50ac:	2210      	movs	r2, #16
   d50ae:	2122      	movs	r1, #34	; 0x22
   d50b0:	4620      	mov	r0, r4
   d50b2:	f7ff ff35 	bl	d4f20 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   d50b6:	4620      	mov	r0, r4
   d50b8:	2280      	movs	r2, #128	; 0x80
   d50ba:	211f      	movs	r1, #31
   d50bc:	f7ff ff30 	bl	d4f20 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
   d50c0:	2001      	movs	r0, #1
}
   d50c2:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   d50c4:	2101      	movs	r1, #1
   d50c6:	b280      	uxth	r0, r0
   d50c8:	f003 fd6d 	bl	d8ba6 <digitalWrite>
    pinMode(_cs, OUTPUT);
   d50cc:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d50d0:	2101      	movs	r1, #1
   d50d2:	b280      	uxth	r0, r0
   d50d4:	f003 fd56 	bl	d8b84 <pinMode>
    if (_sck == -1) {
   d50d8:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d50dc:	1c43      	adds	r3, r0, #1
   d50de:	d104      	bne.n	d50ea <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
   d50e0:	f7ff feb6 	bl	d4e50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d50e4:	f000 ff3a 	bl	d5f5c <_ZN8SPIClass5beginEv>
    }
   d50e8:	e7cc      	b.n	d5084 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
   d50ea:	2101      	movs	r1, #1
   d50ec:	b280      	uxth	r0, r0
   d50ee:	f003 fd49 	bl	d8b84 <pinMode>
      pinMode(_mosi, OUTPUT);
   d50f2:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d50f6:	2101      	movs	r1, #1
   d50f8:	b280      	uxth	r0, r0
   d50fa:	f003 fd43 	bl	d8b84 <pinMode>
      pinMode(_miso, INPUT);
   d50fe:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d5102:	2100      	movs	r1, #0
   d5104:	b280      	uxth	r0, r0
   d5106:	f003 fd3d 	bl	d8b84 <pinMode>
   d510a:	e7bb      	b.n	d5084 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
   d510c:	2000      	movs	r0, #0
   d510e:	e7d8      	b.n	d50c2 <_ZN15Adafruit_LIS3DH5beginEh+0x54>

000d5110 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
   d5110:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d5112:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d5116:	3301      	adds	r3, #1
void Adafruit_LIS3DH::read(void) {
   d5118:	4604      	mov	r4, r0
  if (_cs == -1) {
   d511a:	d176      	bne.n	d520a <_ZN15Adafruit_LIS3DH4readEv+0xfa>
    Wire.beginTransmission(_i2caddr);
   d511c:	f003 fd9e 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d5120:	f994 101c 	ldrsb.w	r1, [r4, #28]
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d5124:	4d5c      	ldr	r5, [pc, #368]	; (d5298 <_ZN15Adafruit_LIS3DH4readEv+0x188>)
    Wire.beginTransmission(_i2caddr);
   d5126:	f003 f917 	bl	d8358 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   d512a:	f003 fd97 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d512e:	21a8      	movs	r1, #168	; 0xa8
   d5130:	f7ff fe7a 	bl	d4e28 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d5134:	f003 fd92 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d5138:	f003 f915 	bl	d8366 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
   d513c:	f003 fd8e 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d5140:	7f21      	ldrb	r1, [r4, #28]
   d5142:	2206      	movs	r2, #6
   d5144:	f003 f901 	bl	d834a <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d5148:	f003 fd88 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d514c:	6803      	ldr	r3, [r0, #0]
   d514e:	695b      	ldr	r3, [r3, #20]
   d5150:	4798      	blx	r3
   d5152:	80e0      	strh	r0, [r4, #6]
   d5154:	f003 fd82 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d5158:	6803      	ldr	r3, [r0, #0]
   d515a:	695b      	ldr	r3, [r3, #20]
   d515c:	4798      	blx	r3
   d515e:	88e3      	ldrh	r3, [r4, #6]
   d5160:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d5164:	4318      	orrs	r0, r3
   d5166:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   d5168:	f003 fd78 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d516c:	6803      	ldr	r3, [r0, #0]
   d516e:	695b      	ldr	r3, [r3, #20]
   d5170:	4798      	blx	r3
   d5172:	8120      	strh	r0, [r4, #8]
   d5174:	f003 fd72 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d5178:	6803      	ldr	r3, [r0, #0]
   d517a:	695b      	ldr	r3, [r3, #20]
   d517c:	4798      	blx	r3
   d517e:	8923      	ldrh	r3, [r4, #8]
   d5180:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d5184:	4318      	orrs	r0, r3
   d5186:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   d5188:	f003 fd68 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d518c:	6803      	ldr	r3, [r0, #0]
   d518e:	695b      	ldr	r3, [r3, #20]
   d5190:	4798      	blx	r3
   d5192:	8160      	strh	r0, [r4, #10]
   d5194:	f003 fd62 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d5198:	6803      	ldr	r3, [r0, #0]
   d519a:	695b      	ldr	r3, [r3, #20]
   d519c:	4798      	blx	r3
   d519e:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d51a2:	8965      	ldrh	r5, [r4, #10]
   d51a4:	4328      	orrs	r0, r5
   d51a6:	8160      	strh	r0, [r4, #10]
  uint8_t range = getRange();
   d51a8:	4620      	mov	r0, r4
   d51aa:	f7ff ff48 	bl	d503e <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d51ae:	2803      	cmp	r0, #3
   d51b0:	d069      	beq.n	d5286 <_ZN15Adafruit_LIS3DH4readEv+0x176>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d51b2:	2802      	cmp	r0, #2
   d51b4:	d06a      	beq.n	d528c <_ZN15Adafruit_LIS3DH4readEv+0x17c>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d51b6:	2801      	cmp	r0, #1
   d51b8:	d06b      	beq.n	d5292 <_ZN15Adafruit_LIS3DH4readEv+0x182>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   d51ba:	2800      	cmp	r0, #0
   d51bc:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   d51c0:	bf18      	it	ne
   d51c2:	2301      	movne	r3, #1
  x_g = (float)x / divider;
   d51c4:	ee07 3a90 	vmov	s15, r3
   d51c8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d51cc:	ee07 3a10 	vmov	s14, r3
   d51d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d51d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d51d8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  x_g = (float)x / divider;
   d51dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   d51e0:	ee07 3a10 	vmov	s14, r3
   d51e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_g = (float)x / divider;
   d51e8:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   d51ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   d51f0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d51f4:	ee07 3a10 	vmov	s14, r3
   d51f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d51fc:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   d5200:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d5204:	edc4 6a05 	vstr	s13, [r4, #20]
}
   d5208:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
   d520a:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d520e:	3301      	adds	r3, #1
   d5210:	d101      	bne.n	d5216 <_ZN15Adafruit_LIS3DH4readEv+0x106>
      beginTransaction();
   d5212:	f7ff fe6f 	bl	d4ef4 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d5216:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d521a:	2100      	movs	r1, #0
   d521c:	b280      	uxth	r0, r0
   d521e:	f003 fcc2 	bl	d8ba6 <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   d5222:	21e8      	movs	r1, #232	; 0xe8
   d5224:	4620      	mov	r0, r4
   d5226:	f7ff fe2f 	bl	d4e88 <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   d522a:	21ff      	movs	r1, #255	; 0xff
   d522c:	4620      	mov	r0, r4
   d522e:	f7ff fe2b 	bl	d4e88 <_ZN15Adafruit_LIS3DH7spixferEh>
   d5232:	21ff      	movs	r1, #255	; 0xff
   d5234:	80e0      	strh	r0, [r4, #6]
   d5236:	4620      	mov	r0, r4
   d5238:	f7ff fe26 	bl	d4e88 <_ZN15Adafruit_LIS3DH7spixferEh>
   d523c:	88e3      	ldrh	r3, [r4, #6]
   d523e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d5242:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   d5244:	21ff      	movs	r1, #255	; 0xff
   d5246:	4620      	mov	r0, r4
   d5248:	f7ff fe1e 	bl	d4e88 <_ZN15Adafruit_LIS3DH7spixferEh>
   d524c:	21ff      	movs	r1, #255	; 0xff
   d524e:	8120      	strh	r0, [r4, #8]
   d5250:	4620      	mov	r0, r4
   d5252:	f7ff fe19 	bl	d4e88 <_ZN15Adafruit_LIS3DH7spixferEh>
   d5256:	8923      	ldrh	r3, [r4, #8]
   d5258:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d525c:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   d525e:	21ff      	movs	r1, #255	; 0xff
   d5260:	4620      	mov	r0, r4
   d5262:	f7ff fe11 	bl	d4e88 <_ZN15Adafruit_LIS3DH7spixferEh>
   d5266:	21ff      	movs	r1, #255	; 0xff
   d5268:	8160      	strh	r0, [r4, #10]
   d526a:	4620      	mov	r0, r4
   d526c:	f7ff fe0c 	bl	d4e88 <_ZN15Adafruit_LIS3DH7spixferEh>
   d5270:	8963      	ldrh	r3, [r4, #10]
   d5272:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d5276:	8160      	strh	r0, [r4, #10]
    digitalWrite(_cs, HIGH);
   d5278:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d527c:	2101      	movs	r1, #1
   d527e:	b280      	uxth	r0, r0
   d5280:	f003 fc91 	bl	d8ba6 <digitalWrite>
    if (_sck == -1)
   d5284:	e790      	b.n	d51a8 <_ZN15Adafruit_LIS3DH4readEv+0x98>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d5286:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d528a:	e79b      	b.n	d51c4 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d528c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   d5290:	e798      	b.n	d51c4 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d5292:	f641 73fe 	movw	r3, #8190	; 0x1ffe
   d5296:	e795      	b.n	d51c4 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
   d5298:	00ffff00 	.word	0x00ffff00

000d529c <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   d529c:	460c      	mov	r4, r1
   d529e:	4605      	mov	r5, r0
   d52a0:	b508      	push	{r3, lr}
  memset(event, 0, sizeof(sensors_event_t));
   d52a2:	2220      	movs	r2, #32
   d52a4:	2100      	movs	r1, #0
   d52a6:	1d20      	adds	r0, r4, #4
   d52a8:	f004 fb80 	bl	d99ac <memset>
  event->version   = sizeof(sensors_event_t);
   d52ac:	2324      	movs	r3, #36	; 0x24
   d52ae:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d52b0:	69ab      	ldr	r3, [r5, #24]
   d52b2:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   d52b4:	2301      	movs	r3, #1
   d52b6:	60a3      	str	r3, [r4, #8]
  event->timestamp = 0;
   d52b8:	2300      	movs	r3, #0
   d52ba:	6123      	str	r3, [r4, #16]
  read();
   d52bc:	4628      	mov	r0, r5
   d52be:	f7ff ff27 	bl	d5110 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
   d52c2:	68eb      	ldr	r3, [r5, #12]
   d52c4:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   d52c6:	692b      	ldr	r3, [r5, #16]
   d52c8:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   d52ca:	696b      	ldr	r3, [r5, #20]
   d52cc:	61e3      	str	r3, [r4, #28]

000d52ce <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   d52ce:	b510      	push	{r4, lr}
   d52d0:	4604      	mov	r4, r0
   d52d2:	f003 fa99 	bl	d8808 <_ZN9TCPClientC1Ev>
{

}
   d52d6:	4620      	mov	r0, r4
   d52d8:	bd10      	pop	{r4, pc}
	...

000d52dc <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   d52dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   d52de:	4f0f      	ldr	r7, [pc, #60]	; (d531c <_ZN10HttpClient10sendHeaderEPKcS1_+0x40>)
{
   d52e0:	4605      	mov	r5, r0
   d52e2:	4614      	mov	r4, r2
   d52e4:	460e      	mov	r6, r1
    client.print(aHeaderName);
   d52e6:	f002 fbf9 	bl	d7adc <_ZN5Print5printEPKc>
    client.print(": ");
   d52ea:	4639      	mov	r1, r7
   d52ec:	4628      	mov	r0, r5
   d52ee:	f002 fbf5 	bl	d7adc <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d52f2:	4621      	mov	r1, r4
   d52f4:	4628      	mov	r0, r5
   d52f6:	f002 fc0a 	bl	d7b0e <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.print(aHeaderName);
   d52fa:	f002 ff0d 	bl	d8118 <_Z16_fetch_usbserialv>
   d52fe:	4631      	mov	r1, r6
   d5300:	f002 fbec 	bl	d7adc <_ZN5Print5printEPKc>
    Serial.print(": ");
   d5304:	f002 ff08 	bl	d8118 <_Z16_fetch_usbserialv>
   d5308:	4639      	mov	r1, r7
   d530a:	f002 fbe7 	bl	d7adc <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   d530e:	f002 ff03 	bl	d8118 <_Z16_fetch_usbserialv>
   d5312:	4621      	mov	r1, r4
    #endif
}
   d5314:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(aHeaderValue);
   d5318:	f002 bbf9 	b.w	d7b0e <_ZN5Print7printlnEPKc>
   d531c:	000d9c6b 	.word	0x000d9c6b

000d5320 <_ZN10HttpClient10sendHeaderEPKc>:
    Serial.println(aHeaderValue);
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName)
{
   d5320:	b510      	push	{r4, lr}
   d5322:	460c      	mov	r4, r1
    client.println(aHeaderName);
   d5324:	f002 fbf3 	bl	d7b0e <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.println(aHeaderName);
   d5328:	f002 fef6 	bl	d8118 <_Z16_fetch_usbserialv>
   d532c:	4621      	mov	r1, r4
    #endif
}
   d532e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(aHeaderName);
   d5332:	f002 bbec 	b.w	d7b0e <_ZN5Print7printlnEPKc>
	...

000d5338 <_ZN10HttpClient10sendHeaderEPKci>:
{
   d5338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(": ");
   d533a:	4f10      	ldr	r7, [pc, #64]	; (d537c <_ZN10HttpClient10sendHeaderEPKci+0x44>)
{
   d533c:	4605      	mov	r5, r0
   d533e:	4614      	mov	r4, r2
   d5340:	460e      	mov	r6, r1
    client.print(aHeaderName);
   d5342:	f002 fbcb 	bl	d7adc <_ZN5Print5printEPKc>
    client.print(": ");
   d5346:	4639      	mov	r1, r7
   d5348:	4628      	mov	r0, r5
   d534a:	f002 fbc7 	bl	d7adc <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d534e:	220a      	movs	r2, #10
   d5350:	4621      	mov	r1, r4
   d5352:	4628      	mov	r0, r5
   d5354:	f7ff f818 	bl	d4388 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.print(aHeaderName);
   d5358:	f002 fede 	bl	d8118 <_Z16_fetch_usbserialv>
   d535c:	4631      	mov	r1, r6
   d535e:	f002 fbbd 	bl	d7adc <_ZN5Print5printEPKc>
    Serial.print(": ");
   d5362:	f002 fed9 	bl	d8118 <_Z16_fetch_usbserialv>
   d5366:	4639      	mov	r1, r7
   d5368:	f002 fbb8 	bl	d7adc <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   d536c:	f002 fed4 	bl	d8118 <_Z16_fetch_usbserialv>
   d5370:	220a      	movs	r2, #10
   d5372:	4621      	mov	r1, r4
   d5374:	f7ff f808 	bl	d4388 <_ZN5Print7printlnIiLi0EEEjT_i>
}
   d5378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d537a:	bf00      	nop
   d537c:	000d9c6b 	.word	0x000d9c6b

000d5380 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d5380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5384:	460e      	mov	r6, r1
   d5386:	b091      	sub	sp, #68	; 0x44
   d5388:	461f      	mov	r7, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d538a:	f04f 33ff 	mov.w	r3, #4294967295
   d538e:	6013      	str	r3, [r2, #0]
{
   d5390:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d5392:	2100      	movs	r1, #0
   d5394:	4630      	mov	r0, r6
   d5396:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   d539a:	4691      	mov	r9, r2
   d539c:	f001 f8d5 	bl	d654a <_ZNK6String6equalsEPKc>
   d53a0:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   d53a4:	4603      	mov	r3, r0
   d53a6:	2800      	cmp	r0, #0
   d53a8:	d16e      	bne.n	d5488 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x108>
	const char * c_str() const { return buffer; }
   d53aa:	f1be 0f00 	cmp.w	lr, #0
   d53ae:	bf14      	ite	ne
   d53b0:	4672      	movne	r2, lr
   d53b2:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   d53b4:	6831      	ldr	r1, [r6, #0]
   d53b6:	b292      	uxth	r2, r2
   d53b8:	4620      	mov	r0, r4
   d53ba:	f003 fa39 	bl	d8830 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   d53be:	1e05      	subs	r5, r0, #0
   d53c0:	bf18      	it	ne
   d53c2:	2501      	movne	r5, #1
    }

    #ifdef LOGGING
    if (connected) {
   d53c4:	2d00      	cmp	r5, #0
   d53c6:	d07e      	beq.n	d54c6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x146>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d53c8:	2100      	movs	r1, #0
   d53ca:	4630      	mov	r0, r6
   d53cc:	f001 f8bd 	bl	d654a <_ZNK6String6equalsEPKc>
        if(aRequest.hostname!=NULL) {
   d53d0:	2800      	cmp	r0, #0
   d53d2:	d16c      	bne.n	d54ae <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x12e>
            Serial.print("HttpClient>\tConnecting to: ");
   d53d4:	f002 fea0 	bl	d8118 <_Z16_fetch_usbserialv>
   d53d8:	49bb      	ldr	r1, [pc, #748]	; (d56c8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x348>)
   d53da:	f002 fb7f 	bl	d7adc <_ZN5Print5printEPKc>
            Serial.print(aRequest.hostname);
   d53de:	f002 fe9b 	bl	d8118 <_Z16_fetch_usbserialv>
   d53e2:	6831      	ldr	r1, [r6, #0]
   d53e4:	f002 fb7a 	bl	d7adc <_ZN5Print5printEPKc>
        } else {
            Serial.print("HttpClient>\tConnecting to IP: ");
            Serial.print(aRequest.ip);
        }
        Serial.print(":");
   d53e8:	f002 fe96 	bl	d8118 <_Z16_fetch_usbserialv>
   d53ec:	49b7      	ldr	r1, [pc, #732]	; (d56cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x34c>)
   d53ee:	f002 fb75 	bl	d7adc <_ZN5Print5printEPKc>
        Serial.println(aRequest.port);
   d53f2:	f002 fe91 	bl	d8118 <_Z16_fetch_usbserialv>
   d53f6:	220a      	movs	r2, #10
   d53f8:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   d53fa:	f7fe ffc5 	bl	d4388 <_ZN5Print7printlnIiLi0EEEjT_i>
    //
    // Send HTTP Headers
    //

    // Send initial headers (only HTTP 1.0 is supported for now).
    client.print(aHttpMethod);
   d53fe:	4641      	mov	r1, r8
   d5400:	4620      	mov	r0, r4
   d5402:	f002 fb6b 	bl	d7adc <_ZN5Print5printEPKc>
    client.print(" ");
   d5406:	49b2      	ldr	r1, [pc, #712]	; (d56d0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   d5408:	4620      	mov	r0, r4
   d540a:	f002 fb67 	bl	d7adc <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   d540e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   d5410:	4620      	mov	r0, r4
   d5412:	f002 fb63 	bl	d7adc <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   d5416:	49af      	ldr	r1, [pc, #700]	; (d56d4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   d5418:	4620      	mov	r0, r4
   d541a:	f002 fb5f 	bl	d7adc <_ZN5Print5printEPKc>

    #ifdef LOGGING
    Serial.println("HttpClient>\tStart of HTTP Request.");
   d541e:	f002 fe7b 	bl	d8118 <_Z16_fetch_usbserialv>
   d5422:	49ad      	ldr	r1, [pc, #692]	; (d56d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   d5424:	f002 fb73 	bl	d7b0e <_ZN5Print7printlnEPKc>
    Serial.print(aHttpMethod);
   d5428:	f002 fe76 	bl	d8118 <_Z16_fetch_usbserialv>
   d542c:	4641      	mov	r1, r8
   d542e:	f002 fb55 	bl	d7adc <_ZN5Print5printEPKc>
    Serial.print(" ");
   d5432:	f002 fe71 	bl	d8118 <_Z16_fetch_usbserialv>
   d5436:	49a6      	ldr	r1, [pc, #664]	; (d56d0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   d5438:	f002 fb50 	bl	d7adc <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
   d543c:	f002 fe6c 	bl	d8118 <_Z16_fetch_usbserialv>
   d5440:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   d5442:	f002 fb4b 	bl	d7adc <_ZN5Print5printEPKc>
    Serial.print(" HTTP/1.0\r\n");
   d5446:	f002 fe67 	bl	d8118 <_Z16_fetch_usbserialv>
   d544a:	49a2      	ldr	r1, [pc, #648]	; (d56d4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   d544c:	f002 fb46 	bl	d7adc <_ZN5Print5printEPKc>
    #endif

    // Send General and Request Headers.
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   d5450:	49a2      	ldr	r1, [pc, #648]	; (d56dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x35c>)
   d5452:	4aa3      	ldr	r2, [pc, #652]	; (d56e0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x360>)
   d5454:	4620      	mov	r0, r4
   d5456:	f7ff ff41 	bl	d52dc <_ZN10HttpClient10sendHeaderEPKcS1_>
   d545a:	2100      	movs	r1, #0
   d545c:	4630      	mov	r0, r6
   d545e:	f001 f874 	bl	d654a <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   d5462:	b920      	cbnz	r0, d546e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xee>
        sendHeader("HOST", aRequest.hostname.c_str());
   d5464:	6832      	ldr	r2, [r6, #0]
   d5466:	499f      	ldr	r1, [pc, #636]	; (d56e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x364>)
   d5468:	4620      	mov	r0, r4
   d546a:	f7ff ff37 	bl	d52dc <_ZN10HttpClient10sendHeaderEPKcS1_>
    }

    //Send Entity Headers
    // TODO: Check the standard, currently sending Content-Length : 0 for empty
    // POST requests, and no content-length for other types.
    if (aRequest.body != NULL) {
   d546e:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   d5472:	2100      	movs	r1, #0
   d5474:	4650      	mov	r0, sl
   d5476:	f001 f868 	bl	d654a <_ZNK6String6equalsEPKc>
   d547a:	bb78      	cbnz	r0, d54dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x15c>
        sendHeader("Content-Length", (aRequest.body).length());
   d547c:	6c72      	ldr	r2, [r6, #68]	; 0x44
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
        sendHeader("Content-Length", 0);
   d547e:	499a      	ldr	r1, [pc, #616]	; (d56e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x368>)
   d5480:	4620      	mov	r0, r4
   d5482:	f7ff ff59 	bl	d5338 <_ZN10HttpClient10sendHeaderEPKci>
   d5486:	e030      	b.n	d54ea <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5488:	4b98      	ldr	r3, [pc, #608]	; (d56ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x36c>)
   d548a:	930a      	str	r3, [sp, #40]	; 0x28
   d548c:	f106 0c14 	add.w	ip, r6, #20
   d5490:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d5494:	ad0b      	add	r5, sp, #44	; 0x2c
   d5496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5498:	f8dc 3000 	ldr.w	r3, [ip]
   d549c:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   d549e:	fa1f f28e 	uxth.w	r2, lr
   d54a2:	2300      	movs	r3, #0
   d54a4:	a90a      	add	r1, sp, #40	; 0x28
   d54a6:	4620      	mov	r0, r4
   d54a8:	f003 f88f 	bl	d85ca <_ZN9TCPClient7connectE9IPAddresstm>
   d54ac:	e787      	b.n	d53be <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3e>
            Serial.print("HttpClient>\tConnecting to IP: ");
   d54ae:	f002 fe33 	bl	d8118 <_Z16_fetch_usbserialv>
   d54b2:	498f      	ldr	r1, [pc, #572]	; (d56f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x370>)
   d54b4:	f002 fb12 	bl	d7adc <_ZN5Print5printEPKc>
            Serial.print(aRequest.ip);
   d54b8:	f002 fe2e 	bl	d8118 <_Z16_fetch_usbserialv>
   d54bc:	f106 0110 	add.w	r1, r6, #16
   d54c0:	f002 fb13 	bl	d7aea <_ZN5Print5printERK9Printable>
   d54c4:	e790      	b.n	d53e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x68>
        Serial.println("HttpClient>\tConnection failed.");
   d54c6:	f002 fe27 	bl	d8118 <_Z16_fetch_usbserialv>
   d54ca:	498a      	ldr	r1, [pc, #552]	; (d56f4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x374>)
   d54cc:	f002 fb1f 	bl	d7b0e <_ZN5Print7printlnEPKc>
        client.stop();
   d54d0:	4620      	mov	r0, r4
   d54d2:	f003 f94f 	bl	d8774 <_ZN9TCPClient4stopEv>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   d54d6:	b011      	add	sp, #68	; 0x44
   d54d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   d54dc:	4986      	ldr	r1, [pc, #536]	; (d56f8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x378>)
   d54de:	4640      	mov	r0, r8
   d54e0:	f004 fa90 	bl	d9a04 <strcmp>
   d54e4:	4602      	mov	r2, r0
   d54e6:	2800      	cmp	r0, #0
   d54e8:	d0c9      	beq.n	d547e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfe>
    if (headers != NULL)
   d54ea:	b15f      	cbz	r7, d5504 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x184>
        while (headers[i].header != NULL)
   d54ec:	6839      	ldr	r1, [r7, #0]
   d54ee:	b149      	cbz	r1, d5504 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x184>
            if (headers[i].value != NULL) {
   d54f0:	687a      	ldr	r2, [r7, #4]
                sendHeader(headers[i].header, headers[i].value);
   d54f2:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   d54f4:	b11a      	cbz	r2, d54fe <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17e>
                sendHeader(headers[i].header, headers[i].value);
   d54f6:	f7ff fef1 	bl	d52dc <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   d54fa:	3708      	adds	r7, #8
        while (headers[i].header != NULL)
   d54fc:	e7f6      	b.n	d54ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16c>
                sendHeader(headers[i].header);
   d54fe:	f7ff ff0f 	bl	d5320 <_ZN10HttpClient10sendHeaderEPKc>
   d5502:	e7fa      	b.n	d54fa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17a>
    client.println();
   d5504:	4620      	mov	r0, r4
   d5506:	f002 faf6 	bl	d7af6 <_ZN5Print7printlnEv>
    client.flush();
   d550a:	4620      	mov	r0, r4
   d550c:	f002 ff50 	bl	d83b0 <_ZN9TCPClient5flushEv>
   d5510:	2100      	movs	r1, #0
   d5512:	4650      	mov	r0, sl
   d5514:	f001 f819 	bl	d654a <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   d5518:	b940      	cbnz	r0, d552c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ac>
        client.println(aRequest.body);
   d551a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   d551c:	4620      	mov	r0, r4
   d551e:	f002 faf6 	bl	d7b0e <_ZN5Print7printlnEPKc>
        Serial.println(aRequest.body);
   d5522:	f002 fdf9 	bl	d8118 <_Z16_fetch_usbserialv>
   d5526:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   d5528:	f002 faf1 	bl	d7b0e <_ZN5Print7printlnEPKc>
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   d552c:	f002 fdf4 	bl	d8118 <_Z16_fetch_usbserialv>
    memset(&buffer[0], 0, sizeof(buffer));
   d5530:	f104 0a1c 	add.w	sl, r4, #28
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   d5534:	4971      	ldr	r1, [pc, #452]	; (d56fc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x37c>)
   d5536:	f002 faea 	bl	d7b0e <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   d553a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d553e:	2100      	movs	r1, #0
   d5540:	4650      	mov	r0, sl
   d5542:	f004 fa33 	bl	d99ac <memset>
   d5546:	f000 f951 	bl	d57ec <HAL_Timer_Get_Milli_Seconds>
   d554a:	9000      	str	r0, [sp, #0]
   d554c:	f000 f94e 	bl	d57ec <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
   d5550:	2700      	movs	r7, #0
   d5552:	9001      	str	r0, [sp, #4]
        int bytes = client.available();
   d5554:	4620      	mov	r0, r4
   d5556:	f003 f8b3 	bl	d86c0 <_ZN9TCPClient9availableEv>
        if(bytes) {
   d555a:	4606      	mov	r6, r0
   d555c:	b1b0      	cbz	r0, d558c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x20c>
            Serial.print("\r\nHttpClient>\tReceiving TCP transaction of ");
   d555e:	f002 fddb 	bl	d8118 <_Z16_fetch_usbserialv>
   d5562:	4967      	ldr	r1, [pc, #412]	; (d5700 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x380>)
   d5564:	f002 faba 	bl	d7adc <_ZN5Print5printEPKc>
            Serial.print(bytes);
   d5568:	f002 fdd6 	bl	d8118 <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
   d556c:	2e00      	cmp	r6, #0
   d556e:	4683      	mov	fp, r0
   d5570:	da27      	bge.n	d55c2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x242>
            t = print('-');
   d5572:	212d      	movs	r1, #45	; 0x2d
   d5574:	f002 fab6 	bl	d7ae4 <_ZN5Print5printEc>
            val = -n;
   d5578:	4271      	negs	r1, r6
        return printNumber(val, base) + t;
   d557a:	220a      	movs	r2, #10
   d557c:	4658      	mov	r0, fp
   d557e:	f002 fad0 	bl	d7b22 <_ZN5Print11printNumberEmh>
            Serial.println(" bytes.");
   d5582:	f002 fdc9 	bl	d8118 <_Z16_fetch_usbserialv>
   d5586:	495f      	ldr	r1, [pc, #380]	; (d5704 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x384>)
   d5588:	f002 fac1 	bl	d7b0e <_ZN5Print7printlnEPKc>
    unsigned int bufferPosition = 0;
   d558c:	f04f 0b00 	mov.w	fp, #0
        while (client.available()) {
   d5590:	4620      	mov	r0, r4
   d5592:	f003 f895 	bl	d86c0 <_ZN9TCPClient9availableEv>
   d5596:	b338      	cbz	r0, d55e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x268>
            char c = client.read();
   d5598:	4620      	mov	r0, r4
   d559a:	f002 ffca 	bl	d8532 <_ZN9TCPClient4readEv>
   d559e:	fa5f f880 	uxtb.w	r8, r0
            Serial.print(c);
   d55a2:	f002 fdb9 	bl	d8118 <_Z16_fetch_usbserialv>
   d55a6:	4641      	mov	r1, r8
   d55a8:	f002 fa9c 	bl	d7ae4 <_ZN5Print5printEc>
   d55ac:	f000 f91e 	bl	d57ec <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   d55b0:	f240 33fe 	movw	r3, #1022	; 0x3fe
   d55b4:	429f      	cmp	r7, r3
   d55b6:	9000      	str	r0, [sp, #0]
   d55b8:	d805      	bhi.n	d55c6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x246>
                buffer[bufferPosition] = c;
   d55ba:	f80a 8007 	strb.w	r8, [sl, r7]
            bufferPosition++;
   d55be:	3701      	adds	r7, #1
        while (client.available()) {
   d55c0:	e7e6      	b.n	d5590 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x210>
            val = n;
   d55c2:	4631      	mov	r1, r6
   d55c4:	e7d9      	b.n	d557a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fa>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   d55c6:	f240 33ff 	movw	r3, #1023	; 0x3ff
   d55ca:	429f      	cmp	r7, r3
   d55cc:	d1f7      	bne.n	d55be <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23e>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d55ce:	2300      	movs	r3, #0
   d55d0:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   d55d4:	4620      	mov	r0, r4
   d55d6:	f003 f8cd 	bl	d8774 <_ZN9TCPClient4stopEv>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
   d55da:	f002 fd9d 	bl	d8118 <_Z16_fetch_usbserialv>
   d55de:	494a      	ldr	r1, [pc, #296]	; (d5708 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x388>)
   d55e0:	f002 fa95 	bl	d7b0e <_ZN5Print7printlnEPKc>
                error = true;
   d55e4:	46ab      	mov	fp, r5
   d55e6:	e7ea      	b.n	d55be <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23e>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d55e8:	19e3      	adds	r3, r4, r7
   d55ea:	7718      	strb	r0, [r3, #28]
        if (bytes) {
   d55ec:	b126      	cbz	r6, d55f8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x278>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
   d55ee:	f002 fd93 	bl	d8118 <_Z16_fetch_usbserialv>
   d55f2:	4946      	ldr	r1, [pc, #280]	; (d570c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x38c>)
   d55f4:	f002 fa72 	bl	d7adc <_ZN5Print5printEPKc>
   d55f8:	f000 f8f8 	bl	d57ec <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   d55fc:	9b00      	ldr	r3, [sp, #0]
   d55fe:	1ac6      	subs	r6, r0, r3
        if (!error && !timeout) {
   d5600:	f1bb 0f00 	cmp.w	fp, #0
   d5604:	d106      	bne.n	d5614 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x294>
   d5606:	f241 3388 	movw	r3, #5000	; 0x1388
   d560a:	429e      	cmp	r6, r3
   d560c:	d802      	bhi.n	d5614 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x294>
            delay(200);
   d560e:	20c8      	movs	r0, #200	; 0xc8
   d5610:	f002 fbda 	bl	d7dc8 <delay>
    } while (client.connected() && !timeout && !error);
   d5614:	4620      	mov	r0, r4
   d5616:	f002 fecc 	bl	d83b2 <_ZN9TCPClient9connectedEv>
   d561a:	f241 3388 	movw	r3, #5000	; 0x1388
   d561e:	2800      	cmp	r0, #0
   d5620:	d04a      	beq.n	d56b8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x338>
   d5622:	429e      	cmp	r6, r3
   d5624:	d84a      	bhi.n	d56bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x33c>
   d5626:	f1bb 0f00 	cmp.w	fp, #0
   d562a:	d093      	beq.n	d5554 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d4>
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
   d562c:	f002 fd74 	bl	d8118 <_Z16_fetch_usbserialv>
   d5630:	4937      	ldr	r1, [pc, #220]	; (d5710 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x390>)
   d5632:	f002 fa53 	bl	d7adc <_ZN5Print5printEPKc>
    Serial.print(millis() - firstRead);
   d5636:	f002 fd6f 	bl	d8118 <_Z16_fetch_usbserialv>
   d563a:	4605      	mov	r5, r0
   d563c:	f000 f8d6 	bl	d57ec <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   d5640:	9b01      	ldr	r3, [sp, #4]
   d5642:	220a      	movs	r2, #10
   d5644:	1ac1      	subs	r1, r0, r3
   d5646:	4628      	mov	r0, r5
   d5648:	f002 fa6b 	bl	d7b22 <_ZN5Print11printNumberEmh>
    Serial.println("ms).");
   d564c:	f002 fd64 	bl	d8118 <_Z16_fetch_usbserialv>
   d5650:	4930      	ldr	r1, [pc, #192]	; (d5714 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x394>)
   d5652:	f002 fa5c 	bl	d7b0e <_ZN5Print7printlnEPKc>
    client.stop();
   d5656:	4620      	mov	r0, r4
   d5658:	f003 f88c 	bl	d8774 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   d565c:	4651      	mov	r1, sl
   d565e:	a802      	add	r0, sp, #8
   d5660:	f000 feaa 	bl	d63b8 <_ZN6StringC1EPKc>
    String statusCode = raw_response.substring(9,12);
   d5664:	230c      	movs	r3, #12
   d5666:	2209      	movs	r2, #9
   d5668:	a902      	add	r1, sp, #8
   d566a:	a806      	add	r0, sp, #24
   d566c:	f000 ff92 	bl	d6594 <_ZNK6String9substringEjj>
    Serial.print("HttpClient>\tStatus Code: ");
   d5670:	f002 fd52 	bl	d8118 <_Z16_fetch_usbserialv>
   d5674:	4928      	ldr	r1, [pc, #160]	; (d5718 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x398>)
   d5676:	f002 fa31 	bl	d7adc <_ZN5Print5printEPKc>
    Serial.println(statusCode);
   d567a:	f002 fd4d 	bl	d8118 <_Z16_fetch_usbserialv>
   d567e:	9906      	ldr	r1, [sp, #24]
   d5680:	f002 fa45 	bl	d7b0e <_ZN5Print7printlnEPKc>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   d5684:	4925      	ldr	r1, [pc, #148]	; (d571c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x39c>)
   d5686:	a80a      	add	r0, sp, #40	; 0x28
   d5688:	f000 fe96 	bl	d63b8 <_ZN6StringC1EPKc>
   d568c:	a90a      	add	r1, sp, #40	; 0x28
   d568e:	a802      	add	r0, sp, #8
   d5690:	f000 ff7c 	bl	d658c <_ZNK6String7indexOfERKS_>
   d5694:	4604      	mov	r4, r0
   d5696:	a80a      	add	r0, sp, #40	; 0x28
   d5698:	f000 fe43 	bl	d6322 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   d569c:	1c63      	adds	r3, r4, #1
   d569e:	d143      	bne.n	d5728 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a8>
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
   d56a0:	f002 fd3a 	bl	d8118 <_Z16_fetch_usbserialv>
   d56a4:	491e      	ldr	r1, [pc, #120]	; (d5720 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a0>)
   d56a6:	f002 fa32 	bl	d7b0e <_ZN5Print7printlnEPKc>
    String statusCode = raw_response.substring(9,12);
   d56aa:	a806      	add	r0, sp, #24
   d56ac:	f000 fe39 	bl	d6322 <_ZN6StringD1Ev>
    String raw_response(buffer);
   d56b0:	a802      	add	r0, sp, #8
   d56b2:	f000 fe36 	bl	d6322 <_ZN6StringD1Ev>
   d56b6:	e70e      	b.n	d54d6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x156>
    if (timeout) {
   d56b8:	429e      	cmp	r6, r3
   d56ba:	d9b7      	bls.n	d562c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2ac>
        Serial.println("\r\nHttpClient>\tError: Timeout while reading response.");
   d56bc:	f002 fd2c 	bl	d8118 <_Z16_fetch_usbserialv>
   d56c0:	4918      	ldr	r1, [pc, #96]	; (d5724 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a4>)
   d56c2:	f002 fa24 	bl	d7b0e <_ZN5Print7printlnEPKc>
   d56c6:	e7b1      	b.n	d562c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2ac>
   d56c8:	000d9e00 	.word	0x000d9e00
   d56cc:	000d9bea 	.word	0x000d9bea
   d56d0:	000d9c6c 	.word	0x000d9c6c
   d56d4:	000d9e3b 	.word	0x000d9e3b
   d56d8:	000d9e47 	.word	0x000d9e47
   d56dc:	000d9e70 	.word	0x000d9e70
   d56e0:	000d9e6a 	.word	0x000d9e6a
   d56e4:	000d9e9a 	.word	0x000d9e9a
   d56e8:	000d9e9f 	.word	0x000d9e9f
   d56ec:	000da238 	.word	0x000da238
   d56f0:	000d9e1c 	.word	0x000d9e1c
   d56f4:	000d9e7b 	.word	0x000d9e7b
   d56f8:	000d9c16 	.word	0x000d9c16
   d56fc:	000d9eae 	.word	0x000d9eae
   d5700:	000d9ecf 	.word	0x000d9ecf
   d5704:	000d9efb 	.word	0x000d9efb
   d5708:	000d9f03 	.word	0x000d9f03
   d570c:	000d9f38 	.word	0x000d9f38
   d5710:	000d9f93 	.word	0x000d9f93
   d5714:	000d9fb8 	.word	0x000d9fb8
   d5718:	000d9fbd 	.word	0x000d9fbd
   d571c:	000d9fd7 	.word	0x000d9fd7
   d5720:	000d9fdc 	.word	0x000d9fdc
   d5724:	000d9f5e 	.word	0x000d9f5e
    aResponse.body = "";
   d5728:	f109 0504 	add.w	r5, r9, #4
   d572c:	490a      	ldr	r1, [pc, #40]	; (d5758 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3d8>)
   d572e:	4628      	mov	r0, r5
   d5730:	f000 fe8a 	bl	d6448 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   d5734:	1d22      	adds	r2, r4, #4
   d5736:	a902      	add	r1, sp, #8
   d5738:	a80a      	add	r0, sp, #40	; 0x28
   d573a:	f000 ff4b 	bl	d65d4 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d573e:	a90a      	add	r1, sp, #40	; 0x28
   d5740:	4628      	mov	r0, r5
   d5742:	f000 fed0 	bl	d64e6 <_ZN6String6concatERKS_>
   d5746:	a80a      	add	r0, sp, #40	; 0x28
   d5748:	f000 fdeb 	bl	d6322 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   d574c:	9806      	ldr	r0, [sp, #24]
   d574e:	f004 f8d1 	bl	d98f4 <atoi>
   d5752:	f8c9 0000 	str.w	r0, [r9]
   d5756:	e7a8      	b.n	d56aa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x32a>
   d5758:	000d9cb3 	.word	0x000d9cb3

000d575c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d575c:	b508      	push	{r3, lr}
   d575e:	4b02      	ldr	r3, [pc, #8]	; (d5768 <netdb_freeaddrinfo+0xc>)
   d5760:	681b      	ldr	r3, [r3, #0]
   d5762:	689b      	ldr	r3, [r3, #8]
   d5764:	9301      	str	r3, [sp, #4]
   d5766:	bd08      	pop	{r3, pc}
   d5768:	00030268 	.word	0x00030268

000d576c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d576c:	b508      	push	{r3, lr}
   d576e:	4b02      	ldr	r3, [pc, #8]	; (d5778 <netdb_getaddrinfo+0xc>)
   d5770:	681b      	ldr	r3, [r3, #0]
   d5772:	68db      	ldr	r3, [r3, #12]
   d5774:	9301      	str	r3, [sp, #4]
   d5776:	bd08      	pop	{r3, pc}
   d5778:	00030268 	.word	0x00030268

000d577c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d577c:	b508      	push	{r3, lr}
   d577e:	4b02      	ldr	r3, [pc, #8]	; (d5788 <HAL_Pin_Mode+0xc>)
   d5780:	681b      	ldr	r3, [r3, #0]
   d5782:	689b      	ldr	r3, [r3, #8]
   d5784:	9301      	str	r3, [sp, #4]
   d5786:	bd08      	pop	{r3, pc}
   d5788:	0003022c 	.word	0x0003022c

000d578c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d578c:	b508      	push	{r3, lr}
   d578e:	4b02      	ldr	r3, [pc, #8]	; (d5798 <HAL_Get_Pin_Mode+0xc>)
   d5790:	681b      	ldr	r3, [r3, #0]
   d5792:	68db      	ldr	r3, [r3, #12]
   d5794:	9301      	str	r3, [sp, #4]
   d5796:	bd08      	pop	{r3, pc}
   d5798:	0003022c 	.word	0x0003022c

000d579c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d579c:	b508      	push	{r3, lr}
   d579e:	4b02      	ldr	r3, [pc, #8]	; (d57a8 <HAL_GPIO_Write+0xc>)
   d57a0:	681b      	ldr	r3, [r3, #0]
   d57a2:	691b      	ldr	r3, [r3, #16]
   d57a4:	9301      	str	r3, [sp, #4]
   d57a6:	bd08      	pop	{r3, pc}
   d57a8:	0003022c 	.word	0x0003022c

000d57ac <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d57ac:	b508      	push	{r3, lr}
   d57ae:	4b02      	ldr	r3, [pc, #8]	; (d57b8 <HAL_GPIO_Read+0xc>)
   d57b0:	681b      	ldr	r3, [r3, #0]
   d57b2:	695b      	ldr	r3, [r3, #20]
   d57b4:	9301      	str	r3, [sp, #4]
   d57b6:	bd08      	pop	{r3, pc}
   d57b8:	0003022c 	.word	0x0003022c

000d57bc <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d57bc:	b508      	push	{r3, lr}
   d57be:	4b02      	ldr	r3, [pc, #8]	; (d57c8 <if_index_to_name+0xc>)
   d57c0:	681b      	ldr	r3, [r3, #0]
   d57c2:	695b      	ldr	r3, [r3, #20]
   d57c4:	9301      	str	r3, [sp, #4]
   d57c6:	bd08      	pop	{r3, pc}
   d57c8:	0003026c 	.word	0x0003026c

000d57cc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d57cc:	b508      	push	{r3, lr}
   d57ce:	4b02      	ldr	r3, [pc, #8]	; (d57d8 <HAL_RNG_GetRandomNumber+0xc>)
   d57d0:	681b      	ldr	r3, [r3, #0]
   d57d2:	685b      	ldr	r3, [r3, #4]
   d57d4:	9301      	str	r3, [sp, #4]
   d57d6:	bd08      	pop	{r3, pc}
   d57d8:	00030218 	.word	0x00030218

000d57dc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d57dc:	b508      	push	{r3, lr}
   d57de:	4b02      	ldr	r3, [pc, #8]	; (d57e8 <HAL_Delay_Microseconds+0xc>)
   d57e0:	681b      	ldr	r3, [r3, #0]
   d57e2:	68db      	ldr	r3, [r3, #12]
   d57e4:	9301      	str	r3, [sp, #4]
   d57e6:	bd08      	pop	{r3, pc}
   d57e8:	00030218 	.word	0x00030218

000d57ec <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d57ec:	b508      	push	{r3, lr}
   d57ee:	4b02      	ldr	r3, [pc, #8]	; (d57f8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d57f0:	681b      	ldr	r3, [r3, #0]
   d57f2:	695b      	ldr	r3, [r3, #20]
   d57f4:	9301      	str	r3, [sp, #4]
   d57f6:	bd08      	pop	{r3, pc}
   d57f8:	00030218 	.word	0x00030218

000d57fc <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d57fc:	b508      	push	{r3, lr}
   d57fe:	4b02      	ldr	r3, [pc, #8]	; (d5808 <HAL_EEPROM_Init+0xc>)
   d5800:	681b      	ldr	r3, [r3, #0]
   d5802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5804:	9301      	str	r3, [sp, #4]
   d5806:	bd08      	pop	{r3, pc}
   d5808:	00030218 	.word	0x00030218

000d580c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d580c:	b508      	push	{r3, lr}
   d580e:	4b02      	ldr	r3, [pc, #8]	; (d5818 <HAL_EEPROM_Get+0xc>)
   d5810:	681b      	ldr	r3, [r3, #0]
   d5812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5814:	9301      	str	r3, [sp, #4]
   d5816:	bd08      	pop	{r3, pc}
   d5818:	00030218 	.word	0x00030218

000d581c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d581c:	b508      	push	{r3, lr}
   d581e:	4b02      	ldr	r3, [pc, #8]	; (d5828 <HAL_EEPROM_Put+0xc>)
   d5820:	681b      	ldr	r3, [r3, #0]
   d5822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5824:	9301      	str	r3, [sp, #4]
   d5826:	bd08      	pop	{r3, pc}
   d5828:	00030218 	.word	0x00030218

000d582c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d582c:	b508      	push	{r3, lr}
   d582e:	4b02      	ldr	r3, [pc, #8]	; (d5838 <hal_rtc_time_is_valid+0xc>)
   d5830:	681b      	ldr	r3, [r3, #0]
   d5832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5834:	9301      	str	r3, [sp, #4]
   d5836:	bd08      	pop	{r3, pc}
   d5838:	00030218 	.word	0x00030218

000d583c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d583c:	b508      	push	{r3, lr}
   d583e:	4b02      	ldr	r3, [pc, #8]	; (d5848 <hal_rtc_get_time+0xc>)
   d5840:	681b      	ldr	r3, [r3, #0]
   d5842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5844:	9301      	str	r3, [sp, #4]
   d5846:	bd08      	pop	{r3, pc}
   d5848:	00030218 	.word	0x00030218

000d584c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d584c:	b508      	push	{r3, lr}
   d584e:	4b02      	ldr	r3, [pc, #8]	; (d5858 <hal_ble_stack_init+0xc>)
   d5850:	681b      	ldr	r3, [r3, #0]
   d5852:	689b      	ldr	r3, [r3, #8]
   d5854:	9301      	str	r3, [sp, #4]
   d5856:	bd08      	pop	{r3, pc}
   d5858:	00030278 	.word	0x00030278

000d585c <hal_ble_stack_deinit>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
   d585c:	b508      	push	{r3, lr}
   d585e:	4b02      	ldr	r3, [pc, #8]	; (d5868 <hal_ble_stack_deinit+0xc>)
   d5860:	681b      	ldr	r3, [r3, #0]
   d5862:	68db      	ldr	r3, [r3, #12]
   d5864:	9301      	str	r3, [sp, #4]
   d5866:	bd08      	pop	{r3, pc}
   d5868:	00030278 	.word	0x00030278

000d586c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d586c:	b508      	push	{r3, lr}
   d586e:	4b02      	ldr	r3, [pc, #8]	; (d5878 <hal_ble_gap_set_advertising_data+0xc>)
   d5870:	681b      	ldr	r3, [r3, #0]
   d5872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5874:	9301      	str	r3, [sp, #4]
   d5876:	bd08      	pop	{r3, pc}
   d5878:	00030278 	.word	0x00030278

000d587c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d587c:	b508      	push	{r3, lr}
   d587e:	4b02      	ldr	r3, [pc, #8]	; (d5888 <hal_ble_gap_set_scan_response_data+0xc>)
   d5880:	681b      	ldr	r3, [r3, #0]
   d5882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5884:	9301      	str	r3, [sp, #4]
   d5886:	bd08      	pop	{r3, pc}
   d5888:	00030278 	.word	0x00030278

000d588c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d588c:	b508      	push	{r3, lr}
   d588e:	4b02      	ldr	r3, [pc, #8]	; (d5898 <hal_ble_gap_start_advertising+0xc>)
   d5890:	681b      	ldr	r3, [r3, #0]
   d5892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d5894:	9301      	str	r3, [sp, #4]
   d5896:	bd08      	pop	{r3, pc}
   d5898:	00030278 	.word	0x00030278

000d589c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d589c:	b508      	push	{r3, lr}
   d589e:	4b03      	ldr	r3, [pc, #12]	; (d58ac <hal_ble_gap_disconnect+0x10>)
   d58a0:	681b      	ldr	r3, [r3, #0]
   d58a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d58a6:	9301      	str	r3, [sp, #4]
   d58a8:	bd08      	pop	{r3, pc}
   d58aa:	0000      	.short	0x0000
   d58ac:	00030278 	.word	0x00030278

000d58b0 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d58b0:	b508      	push	{r3, lr}
   d58b2:	4b03      	ldr	r3, [pc, #12]	; (d58c0 <hal_ble_gatt_server_add_service+0x10>)
   d58b4:	681b      	ldr	r3, [r3, #0]
   d58b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d58ba:	9301      	str	r3, [sp, #4]
   d58bc:	bd08      	pop	{r3, pc}
   d58be:	0000      	.short	0x0000
   d58c0:	00030278 	.word	0x00030278

000d58c4 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d58c4:	b508      	push	{r3, lr}
   d58c6:	4b03      	ldr	r3, [pc, #12]	; (d58d4 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d58c8:	681b      	ldr	r3, [r3, #0]
   d58ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d58ce:	9301      	str	r3, [sp, #4]
   d58d0:	bd08      	pop	{r3, pc}
   d58d2:	0000      	.short	0x0000
   d58d4:	00030278 	.word	0x00030278

000d58d8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d58d8:	b508      	push	{r3, lr}
   d58da:	4b03      	ldr	r3, [pc, #12]	; (d58e8 <hal_ble_gatt_client_write_with_response+0x10>)
   d58dc:	681b      	ldr	r3, [r3, #0]
   d58de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d58e2:	9301      	str	r3, [sp, #4]
   d58e4:	bd08      	pop	{r3, pc}
   d58e6:	0000      	.short	0x0000
   d58e8:	00030278 	.word	0x00030278

000d58ec <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d58ec:	b508      	push	{r3, lr}
   d58ee:	4b03      	ldr	r3, [pc, #12]	; (d58fc <hal_ble_gatt_client_write_without_response+0x10>)
   d58f0:	681b      	ldr	r3, [r3, #0]
   d58f2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d58f6:	9301      	str	r3, [sp, #4]
   d58f8:	bd08      	pop	{r3, pc}
   d58fa:	0000      	.short	0x0000
   d58fc:	00030278 	.word	0x00030278

000d5900 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   d5900:	b508      	push	{r3, lr}
   d5902:	4b03      	ldr	r3, [pc, #12]	; (d5910 <hal_ble_gap_get_connection_info+0x10>)
   d5904:	681b      	ldr	r3, [r3, #0]
   d5906:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   d590a:	9301      	str	r3, [sp, #4]
   d590c:	bd08      	pop	{r3, pc}
   d590e:	0000      	.short	0x0000
   d5910:	00030278 	.word	0x00030278

000d5914 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d5914:	b508      	push	{r3, lr}
   d5916:	4b03      	ldr	r3, [pc, #12]	; (d5924 <hal_ble_gatt_server_add_characteristic+0x10>)
   d5918:	681b      	ldr	r3, [r3, #0]
   d591a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d591e:	9301      	str	r3, [sp, #4]
   d5920:	bd08      	pop	{r3, pc}
   d5922:	0000      	.short	0x0000
   d5924:	00030278 	.word	0x00030278

000d5928 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d5928:	b508      	push	{r3, lr}
   d592a:	4b03      	ldr	r3, [pc, #12]	; (d5938 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d592c:	681b      	ldr	r3, [r3, #0]
   d592e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d5932:	9301      	str	r3, [sp, #4]
   d5934:	bd08      	pop	{r3, pc}
   d5936:	0000      	.short	0x0000
   d5938:	00030278 	.word	0x00030278

000d593c <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d593c:	b508      	push	{r3, lr}
   d593e:	4b03      	ldr	r3, [pc, #12]	; (d594c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d5940:	681b      	ldr	r3, [r3, #0]
   d5942:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d5946:	9301      	str	r3, [sp, #4]
   d5948:	bd08      	pop	{r3, pc}
   d594a:	0000      	.short	0x0000
   d594c:	00030278 	.word	0x00030278

000d5950 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5950:	b508      	push	{r3, lr}
   d5952:	4b03      	ldr	r3, [pc, #12]	; (d5960 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d5954:	681b      	ldr	r3, [r3, #0]
   d5956:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d595a:	9301      	str	r3, [sp, #4]
   d595c:	bd08      	pop	{r3, pc}
   d595e:	0000      	.short	0x0000
   d5960:	00030278 	.word	0x00030278

000d5964 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5964:	b508      	push	{r3, lr}
   d5966:	4b02      	ldr	r3, [pc, #8]	; (d5970 <os_mutex_recursive_create+0xc>)
   d5968:	681b      	ldr	r3, [r3, #0]
   d596a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d596c:	9301      	str	r3, [sp, #4]
   d596e:	bd08      	pop	{r3, pc}
   d5970:	00030248 	.word	0x00030248

000d5974 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5974:	b508      	push	{r3, lr}
   d5976:	4b02      	ldr	r3, [pc, #8]	; (d5980 <os_mutex_recursive_destroy+0xc>)
   d5978:	681b      	ldr	r3, [r3, #0]
   d597a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d597c:	9301      	str	r3, [sp, #4]
   d597e:	bd08      	pop	{r3, pc}
   d5980:	00030248 	.word	0x00030248

000d5984 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5984:	b508      	push	{r3, lr}
   d5986:	4b02      	ldr	r3, [pc, #8]	; (d5990 <os_mutex_recursive_lock+0xc>)
   d5988:	681b      	ldr	r3, [r3, #0]
   d598a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d598c:	9301      	str	r3, [sp, #4]
   d598e:	bd08      	pop	{r3, pc}
   d5990:	00030248 	.word	0x00030248

000d5994 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5994:	b508      	push	{r3, lr}
   d5996:	4b02      	ldr	r3, [pc, #8]	; (d59a0 <os_mutex_recursive_unlock+0xc>)
   d5998:	681b      	ldr	r3, [r3, #0]
   d599a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d599c:	9301      	str	r3, [sp, #4]
   d599e:	bd08      	pop	{r3, pc}
   d59a0:	00030248 	.word	0x00030248

000d59a4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d59a4:	b508      	push	{r3, lr}
   d59a6:	4b02      	ldr	r3, [pc, #8]	; (d59b0 <inet_inet_ntop+0xc>)
   d59a8:	681b      	ldr	r3, [r3, #0]
   d59aa:	695b      	ldr	r3, [r3, #20]
   d59ac:	9301      	str	r3, [sp, #4]
   d59ae:	bd08      	pop	{r3, pc}
   d59b0:	00030264 	.word	0x00030264

000d59b4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d59b4:	b508      	push	{r3, lr}
   d59b6:	4b02      	ldr	r3, [pc, #8]	; (d59c0 <inet_htonl+0xc>)
   d59b8:	681b      	ldr	r3, [r3, #0]
   d59ba:	6a1b      	ldr	r3, [r3, #32]
   d59bc:	9301      	str	r3, [sp, #4]
   d59be:	bd08      	pop	{r3, pc}
   d59c0:	00030264 	.word	0x00030264

000d59c4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d59c4:	b508      	push	{r3, lr}
   d59c6:	4b02      	ldr	r3, [pc, #8]	; (d59d0 <inet_htons+0xc>)
   d59c8:	681b      	ldr	r3, [r3, #0]
   d59ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d59cc:	9301      	str	r3, [sp, #4]
   d59ce:	bd08      	pop	{r3, pc}
   d59d0:	00030264 	.word	0x00030264

000d59d4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d59d4:	b508      	push	{r3, lr}
   d59d6:	4b02      	ldr	r3, [pc, #8]	; (d59e0 <hal_usart_init+0xc>)
   d59d8:	681b      	ldr	r3, [r3, #0]
   d59da:	681b      	ldr	r3, [r3, #0]
   d59dc:	9301      	str	r3, [sp, #4]
   d59de:	bd08      	pop	{r3, pc}
   d59e0:	0003023c 	.word	0x0003023c

000d59e4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d59e4:	b508      	push	{r3, lr}
   d59e6:	4b02      	ldr	r3, [pc, #8]	; (d59f0 <hal_usart_write+0xc>)
   d59e8:	681b      	ldr	r3, [r3, #0]
   d59ea:	68db      	ldr	r3, [r3, #12]
   d59ec:	9301      	str	r3, [sp, #4]
   d59ee:	bd08      	pop	{r3, pc}
   d59f0:	0003023c 	.word	0x0003023c

000d59f4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d59f4:	b508      	push	{r3, lr}
   d59f6:	4b02      	ldr	r3, [pc, #8]	; (d5a00 <hal_usart_available+0xc>)
   d59f8:	681b      	ldr	r3, [r3, #0]
   d59fa:	691b      	ldr	r3, [r3, #16]
   d59fc:	9301      	str	r3, [sp, #4]
   d59fe:	bd08      	pop	{r3, pc}
   d5a00:	0003023c 	.word	0x0003023c

000d5a04 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5a04:	b508      	push	{r3, lr}
   d5a06:	4b02      	ldr	r3, [pc, #8]	; (d5a10 <hal_usart_read+0xc>)
   d5a08:	681b      	ldr	r3, [r3, #0]
   d5a0a:	695b      	ldr	r3, [r3, #20]
   d5a0c:	9301      	str	r3, [sp, #4]
   d5a0e:	bd08      	pop	{r3, pc}
   d5a10:	0003023c 	.word	0x0003023c

000d5a14 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5a14:	b508      	push	{r3, lr}
   d5a16:	4b02      	ldr	r3, [pc, #8]	; (d5a20 <hal_usart_peek+0xc>)
   d5a18:	681b      	ldr	r3, [r3, #0]
   d5a1a:	699b      	ldr	r3, [r3, #24]
   d5a1c:	9301      	str	r3, [sp, #4]
   d5a1e:	bd08      	pop	{r3, pc}
   d5a20:	0003023c 	.word	0x0003023c

000d5a24 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5a24:	b508      	push	{r3, lr}
   d5a26:	4b02      	ldr	r3, [pc, #8]	; (d5a30 <hal_usart_flush+0xc>)
   d5a28:	681b      	ldr	r3, [r3, #0]
   d5a2a:	69db      	ldr	r3, [r3, #28]
   d5a2c:	9301      	str	r3, [sp, #4]
   d5a2e:	bd08      	pop	{r3, pc}
   d5a30:	0003023c 	.word	0x0003023c

000d5a34 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5a34:	b508      	push	{r3, lr}
   d5a36:	4b02      	ldr	r3, [pc, #8]	; (d5a40 <hal_usart_is_enabled+0xc>)
   d5a38:	681b      	ldr	r3, [r3, #0]
   d5a3a:	6a1b      	ldr	r3, [r3, #32]
   d5a3c:	9301      	str	r3, [sp, #4]
   d5a3e:	bd08      	pop	{r3, pc}
   d5a40:	0003023c 	.word	0x0003023c

000d5a44 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5a44:	b508      	push	{r3, lr}
   d5a46:	4b02      	ldr	r3, [pc, #8]	; (d5a50 <hal_usart_available_data_for_write+0xc>)
   d5a48:	681b      	ldr	r3, [r3, #0]
   d5a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5a4c:	9301      	str	r3, [sp, #4]
   d5a4e:	bd08      	pop	{r3, pc}
   d5a50:	0003023c 	.word	0x0003023c

000d5a54 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5a54:	b508      	push	{r3, lr}
   d5a56:	4b02      	ldr	r3, [pc, #8]	; (d5a60 <hal_i2c_begin+0xc>)
   d5a58:	681b      	ldr	r3, [r3, #0]
   d5a5a:	68db      	ldr	r3, [r3, #12]
   d5a5c:	9301      	str	r3, [sp, #4]
   d5a5e:	bd08      	pop	{r3, pc}
   d5a60:	00030228 	.word	0x00030228

000d5a64 <hal_i2c_end>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
   d5a64:	b508      	push	{r3, lr}
   d5a66:	4b02      	ldr	r3, [pc, #8]	; (d5a70 <hal_i2c_end+0xc>)
   d5a68:	681b      	ldr	r3, [r3, #0]
   d5a6a:	691b      	ldr	r3, [r3, #16]
   d5a6c:	9301      	str	r3, [sp, #4]
   d5a6e:	bd08      	pop	{r3, pc}
   d5a70:	00030228 	.word	0x00030228

000d5a74 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5a74:	b508      	push	{r3, lr}
   d5a76:	4b02      	ldr	r3, [pc, #8]	; (d5a80 <hal_i2c_begin_transmission+0xc>)
   d5a78:	681b      	ldr	r3, [r3, #0]
   d5a7a:	699b      	ldr	r3, [r3, #24]
   d5a7c:	9301      	str	r3, [sp, #4]
   d5a7e:	bd08      	pop	{r3, pc}
   d5a80:	00030228 	.word	0x00030228

000d5a84 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5a84:	b508      	push	{r3, lr}
   d5a86:	4b02      	ldr	r3, [pc, #8]	; (d5a90 <hal_i2c_end_transmission+0xc>)
   d5a88:	681b      	ldr	r3, [r3, #0]
   d5a8a:	69db      	ldr	r3, [r3, #28]
   d5a8c:	9301      	str	r3, [sp, #4]
   d5a8e:	bd08      	pop	{r3, pc}
   d5a90:	00030228 	.word	0x00030228

000d5a94 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5a94:	b508      	push	{r3, lr}
   d5a96:	4b02      	ldr	r3, [pc, #8]	; (d5aa0 <hal_i2c_write+0xc>)
   d5a98:	681b      	ldr	r3, [r3, #0]
   d5a9a:	6a1b      	ldr	r3, [r3, #32]
   d5a9c:	9301      	str	r3, [sp, #4]
   d5a9e:	bd08      	pop	{r3, pc}
   d5aa0:	00030228 	.word	0x00030228

000d5aa4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5aa4:	b508      	push	{r3, lr}
   d5aa6:	4b02      	ldr	r3, [pc, #8]	; (d5ab0 <hal_i2c_available+0xc>)
   d5aa8:	681b      	ldr	r3, [r3, #0]
   d5aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5aac:	9301      	str	r3, [sp, #4]
   d5aae:	bd08      	pop	{r3, pc}
   d5ab0:	00030228 	.word	0x00030228

000d5ab4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5ab4:	b508      	push	{r3, lr}
   d5ab6:	4b02      	ldr	r3, [pc, #8]	; (d5ac0 <hal_i2c_read+0xc>)
   d5ab8:	681b      	ldr	r3, [r3, #0]
   d5aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5abc:	9301      	str	r3, [sp, #4]
   d5abe:	bd08      	pop	{r3, pc}
   d5ac0:	00030228 	.word	0x00030228

000d5ac4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5ac4:	b508      	push	{r3, lr}
   d5ac6:	4b02      	ldr	r3, [pc, #8]	; (d5ad0 <hal_i2c_peek+0xc>)
   d5ac8:	681b      	ldr	r3, [r3, #0]
   d5aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5acc:	9301      	str	r3, [sp, #4]
   d5ace:	bd08      	pop	{r3, pc}
   d5ad0:	00030228 	.word	0x00030228

000d5ad4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5ad4:	b508      	push	{r3, lr}
   d5ad6:	4b02      	ldr	r3, [pc, #8]	; (d5ae0 <hal_i2c_flush+0xc>)
   d5ad8:	681b      	ldr	r3, [r3, #0]
   d5ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5adc:	9301      	str	r3, [sp, #4]
   d5ade:	bd08      	pop	{r3, pc}
   d5ae0:	00030228 	.word	0x00030228

000d5ae4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5ae4:	b508      	push	{r3, lr}
   d5ae6:	4b02      	ldr	r3, [pc, #8]	; (d5af0 <hal_i2c_is_enabled+0xc>)
   d5ae8:	681b      	ldr	r3, [r3, #0]
   d5aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5aec:	9301      	str	r3, [sp, #4]
   d5aee:	bd08      	pop	{r3, pc}
   d5af0:	00030228 	.word	0x00030228

000d5af4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5af4:	b508      	push	{r3, lr}
   d5af6:	4b02      	ldr	r3, [pc, #8]	; (d5b00 <hal_i2c_init+0xc>)
   d5af8:	681b      	ldr	r3, [r3, #0]
   d5afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5afc:	9301      	str	r3, [sp, #4]
   d5afe:	bd08      	pop	{r3, pc}
   d5b00:	00030228 	.word	0x00030228

000d5b04 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5b04:	b508      	push	{r3, lr}
   d5b06:	4b02      	ldr	r3, [pc, #8]	; (d5b10 <hal_i2c_request_ex+0xc>)
   d5b08:	681b      	ldr	r3, [r3, #0]
   d5b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5b0c:	9301      	str	r3, [sp, #4]
   d5b0e:	bd08      	pop	{r3, pc}
   d5b10:	00030228 	.word	0x00030228

000d5b14 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5b14:	b508      	push	{r3, lr}
   d5b16:	4b02      	ldr	r3, [pc, #8]	; (d5b20 <sock_setsockopt+0xc>)
   d5b18:	681b      	ldr	r3, [r3, #0]
   d5b1a:	699b      	ldr	r3, [r3, #24]
   d5b1c:	9301      	str	r3, [sp, #4]
   d5b1e:	bd08      	pop	{r3, pc}
   d5b20:	00030238 	.word	0x00030238

000d5b24 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5b24:	b508      	push	{r3, lr}
   d5b26:	4b02      	ldr	r3, [pc, #8]	; (d5b30 <sock_close+0xc>)
   d5b28:	681b      	ldr	r3, [r3, #0]
   d5b2a:	69db      	ldr	r3, [r3, #28]
   d5b2c:	9301      	str	r3, [sp, #4]
   d5b2e:	bd08      	pop	{r3, pc}
   d5b30:	00030238 	.word	0x00030238

000d5b34 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5b34:	b508      	push	{r3, lr}
   d5b36:	4b02      	ldr	r3, [pc, #8]	; (d5b40 <sock_connect+0xc>)
   d5b38:	681b      	ldr	r3, [r3, #0]
   d5b3a:	6a1b      	ldr	r3, [r3, #32]
   d5b3c:	9301      	str	r3, [sp, #4]
   d5b3e:	bd08      	pop	{r3, pc}
   d5b40:	00030238 	.word	0x00030238

000d5b44 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5b44:	b508      	push	{r3, lr}
   d5b46:	4b02      	ldr	r3, [pc, #8]	; (d5b50 <sock_recv+0xc>)
   d5b48:	681b      	ldr	r3, [r3, #0]
   d5b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b4c:	9301      	str	r3, [sp, #4]
   d5b4e:	bd08      	pop	{r3, pc}
   d5b50:	00030238 	.word	0x00030238

000d5b54 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5b54:	b508      	push	{r3, lr}
   d5b56:	4b02      	ldr	r3, [pc, #8]	; (d5b60 <sock_send+0xc>)
   d5b58:	681b      	ldr	r3, [r3, #0]
   d5b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b5c:	9301      	str	r3, [sp, #4]
   d5b5e:	bd08      	pop	{r3, pc}
   d5b60:	00030238 	.word	0x00030238

000d5b64 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5b64:	b508      	push	{r3, lr}
   d5b66:	4b02      	ldr	r3, [pc, #8]	; (d5b70 <sock_socket+0xc>)
   d5b68:	681b      	ldr	r3, [r3, #0]
   d5b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5b6c:	9301      	str	r3, [sp, #4]
   d5b6e:	bd08      	pop	{r3, pc}
   d5b70:	00030238 	.word	0x00030238

000d5b74 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5b74:	b508      	push	{r3, lr}
   d5b76:	4b02      	ldr	r3, [pc, #8]	; (d5b80 <hal_spi_begin+0xc>)
   d5b78:	681b      	ldr	r3, [r3, #0]
   d5b7a:	681b      	ldr	r3, [r3, #0]
   d5b7c:	9301      	str	r3, [sp, #4]
   d5b7e:	bd08      	pop	{r3, pc}
   d5b80:	00030230 	.word	0x00030230

000d5b84 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d5b84:	b508      	push	{r3, lr}
   d5b86:	4b02      	ldr	r3, [pc, #8]	; (d5b90 <hal_spi_set_bit_order+0xc>)
   d5b88:	681b      	ldr	r3, [r3, #0]
   d5b8a:	689b      	ldr	r3, [r3, #8]
   d5b8c:	9301      	str	r3, [sp, #4]
   d5b8e:	bd08      	pop	{r3, pc}
   d5b90:	00030230 	.word	0x00030230

000d5b94 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d5b94:	b508      	push	{r3, lr}
   d5b96:	4b02      	ldr	r3, [pc, #8]	; (d5ba0 <hal_spi_set_data_mode+0xc>)
   d5b98:	681b      	ldr	r3, [r3, #0]
   d5b9a:	68db      	ldr	r3, [r3, #12]
   d5b9c:	9301      	str	r3, [sp, #4]
   d5b9e:	bd08      	pop	{r3, pc}
   d5ba0:	00030230 	.word	0x00030230

000d5ba4 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d5ba4:	b508      	push	{r3, lr}
   d5ba6:	4b02      	ldr	r3, [pc, #8]	; (d5bb0 <hal_spi_set_clock_divider+0xc>)
   d5ba8:	681b      	ldr	r3, [r3, #0]
   d5baa:	691b      	ldr	r3, [r3, #16]
   d5bac:	9301      	str	r3, [sp, #4]
   d5bae:	bd08      	pop	{r3, pc}
   d5bb0:	00030230 	.word	0x00030230

000d5bb4 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5bb4:	b508      	push	{r3, lr}
   d5bb6:	4b02      	ldr	r3, [pc, #8]	; (d5bc0 <hal_spi_transfer+0xc>)
   d5bb8:	681b      	ldr	r3, [r3, #0]
   d5bba:	695b      	ldr	r3, [r3, #20]
   d5bbc:	9301      	str	r3, [sp, #4]
   d5bbe:	bd08      	pop	{r3, pc}
   d5bc0:	00030230 	.word	0x00030230

000d5bc4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5bc4:	b508      	push	{r3, lr}
   d5bc6:	4b02      	ldr	r3, [pc, #8]	; (d5bd0 <hal_spi_init+0xc>)
   d5bc8:	681b      	ldr	r3, [r3, #0]
   d5bca:	69db      	ldr	r3, [r3, #28]
   d5bcc:	9301      	str	r3, [sp, #4]
   d5bce:	bd08      	pop	{r3, pc}
   d5bd0:	00030230 	.word	0x00030230

000d5bd4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5bd4:	b508      	push	{r3, lr}
   d5bd6:	4b02      	ldr	r3, [pc, #8]	; (d5be0 <hal_spi_is_enabled+0xc>)
   d5bd8:	681b      	ldr	r3, [r3, #0]
   d5bda:	6a1b      	ldr	r3, [r3, #32]
   d5bdc:	9301      	str	r3, [sp, #4]
   d5bde:	bd08      	pop	{r3, pc}
   d5be0:	00030230 	.word	0x00030230

000d5be4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5be4:	b508      	push	{r3, lr}
   d5be6:	4b02      	ldr	r3, [pc, #8]	; (d5bf0 <hal_spi_info+0xc>)
   d5be8:	681b      	ldr	r3, [r3, #0]
   d5bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5bec:	9301      	str	r3, [sp, #4]
   d5bee:	bd08      	pop	{r3, pc}
   d5bf0:	00030230 	.word	0x00030230

000d5bf4 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5bf4:	b508      	push	{r3, lr}
   d5bf6:	4b02      	ldr	r3, [pc, #8]	; (d5c00 <hal_spi_acquire+0xc>)
   d5bf8:	681b      	ldr	r3, [r3, #0]
   d5bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5bfc:	9301      	str	r3, [sp, #4]
   d5bfe:	bd08      	pop	{r3, pc}
   d5c00:	00030230 	.word	0x00030230

000d5c04 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5c04:	b508      	push	{r3, lr}
   d5c06:	4b02      	ldr	r3, [pc, #8]	; (d5c10 <hal_spi_release+0xc>)
   d5c08:	681b      	ldr	r3, [r3, #0]
   d5c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5c0c:	9301      	str	r3, [sp, #4]
   d5c0e:	bd08      	pop	{r3, pc}
   d5c10:	00030230 	.word	0x00030230

000d5c14 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5c14:	b508      	push	{r3, lr}
   d5c16:	4b02      	ldr	r3, [pc, #8]	; (d5c20 <HAL_USB_USART_Init+0xc>)
   d5c18:	681b      	ldr	r3, [r3, #0]
   d5c1a:	681b      	ldr	r3, [r3, #0]
   d5c1c:	9301      	str	r3, [sp, #4]
   d5c1e:	bd08      	pop	{r3, pc}
   d5c20:	0003024c 	.word	0x0003024c

000d5c24 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5c24:	b508      	push	{r3, lr}
   d5c26:	4b02      	ldr	r3, [pc, #8]	; (d5c30 <HAL_USB_USART_Begin+0xc>)
   d5c28:	681b      	ldr	r3, [r3, #0]
   d5c2a:	685b      	ldr	r3, [r3, #4]
   d5c2c:	9301      	str	r3, [sp, #4]
   d5c2e:	bd08      	pop	{r3, pc}
   d5c30:	0003024c 	.word	0x0003024c

000d5c34 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5c34:	b508      	push	{r3, lr}
   d5c36:	4b02      	ldr	r3, [pc, #8]	; (d5c40 <HAL_USB_USART_Available_Data+0xc>)
   d5c38:	681b      	ldr	r3, [r3, #0]
   d5c3a:	691b      	ldr	r3, [r3, #16]
   d5c3c:	9301      	str	r3, [sp, #4]
   d5c3e:	bd08      	pop	{r3, pc}
   d5c40:	0003024c 	.word	0x0003024c

000d5c44 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5c44:	b508      	push	{r3, lr}
   d5c46:	4b02      	ldr	r3, [pc, #8]	; (d5c50 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5c48:	681b      	ldr	r3, [r3, #0]
   d5c4a:	695b      	ldr	r3, [r3, #20]
   d5c4c:	9301      	str	r3, [sp, #4]
   d5c4e:	bd08      	pop	{r3, pc}
   d5c50:	0003024c 	.word	0x0003024c

000d5c54 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5c54:	b508      	push	{r3, lr}
   d5c56:	4b02      	ldr	r3, [pc, #8]	; (d5c60 <HAL_USB_USART_Receive_Data+0xc>)
   d5c58:	681b      	ldr	r3, [r3, #0]
   d5c5a:	699b      	ldr	r3, [r3, #24]
   d5c5c:	9301      	str	r3, [sp, #4]
   d5c5e:	bd08      	pop	{r3, pc}
   d5c60:	0003024c 	.word	0x0003024c

000d5c64 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5c64:	b508      	push	{r3, lr}
   d5c66:	4b02      	ldr	r3, [pc, #8]	; (d5c70 <HAL_USB_USART_Send_Data+0xc>)
   d5c68:	681b      	ldr	r3, [r3, #0]
   d5c6a:	69db      	ldr	r3, [r3, #28]
   d5c6c:	9301      	str	r3, [sp, #4]
   d5c6e:	bd08      	pop	{r3, pc}
   d5c70:	0003024c 	.word	0x0003024c

000d5c74 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5c74:	b508      	push	{r3, lr}
   d5c76:	4b02      	ldr	r3, [pc, #8]	; (d5c80 <HAL_USB_USART_Flush_Data+0xc>)
   d5c78:	681b      	ldr	r3, [r3, #0]
   d5c7a:	6a1b      	ldr	r3, [r3, #32]
   d5c7c:	9301      	str	r3, [sp, #4]
   d5c7e:	bd08      	pop	{r3, pc}
   d5c80:	0003024c 	.word	0x0003024c

000d5c84 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5c84:	b508      	push	{r3, lr}
   d5c86:	4b02      	ldr	r3, [pc, #8]	; (d5c90 <panic_+0xc>)
   d5c88:	681b      	ldr	r3, [r3, #0]
   d5c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c8c:	9301      	str	r3, [sp, #4]
   d5c8e:	bd08      	pop	{r3, pc}
   d5c90:	00030260 	.word	0x00030260

000d5c94 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5c94:	b508      	push	{r3, lr}
   d5c96:	4b02      	ldr	r3, [pc, #8]	; (d5ca0 <log_message+0xc>)
   d5c98:	681b      	ldr	r3, [r3, #0]
   d5c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5c9c:	9301      	str	r3, [sp, #4]
   d5c9e:	bd08      	pop	{r3, pc}
   d5ca0:	00030260 	.word	0x00030260

000d5ca4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5ca4:	b508      	push	{r3, lr}
   d5ca6:	4b02      	ldr	r3, [pc, #8]	; (d5cb0 <system_mode+0xc>)
   d5ca8:	681b      	ldr	r3, [r3, #0]
   d5caa:	681b      	ldr	r3, [r3, #0]
   d5cac:	9301      	str	r3, [sp, #4]
   d5cae:	bd08      	pop	{r3, pc}
   d5cb0:	00030220 	.word	0x00030220

000d5cb4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5cb4:	b508      	push	{r3, lr}
   d5cb6:	4b02      	ldr	r3, [pc, #8]	; (d5cc0 <set_system_mode+0xc>)
   d5cb8:	681b      	ldr	r3, [r3, #0]
   d5cba:	685b      	ldr	r3, [r3, #4]
   d5cbc:	9301      	str	r3, [sp, #4]
   d5cbe:	bd08      	pop	{r3, pc}
   d5cc0:	00030220 	.word	0x00030220

000d5cc4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5cc4:	b508      	push	{r3, lr}
   d5cc6:	4b02      	ldr	r3, [pc, #8]	; (d5cd0 <system_delay_ms+0xc>)
   d5cc8:	681b      	ldr	r3, [r3, #0]
   d5cca:	695b      	ldr	r3, [r3, #20]
   d5ccc:	9301      	str	r3, [sp, #4]
   d5cce:	bd08      	pop	{r3, pc}
   d5cd0:	00030220 	.word	0x00030220

000d5cd4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5cd4:	b508      	push	{r3, lr}
   d5cd6:	4b02      	ldr	r3, [pc, #8]	; (d5ce0 <system_thread_get_state+0xc>)
   d5cd8:	681b      	ldr	r3, [r3, #0]
   d5cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5cdc:	9301      	str	r3, [sp, #4]
   d5cde:	bd08      	pop	{r3, pc}
   d5ce0:	00030220 	.word	0x00030220

000d5ce4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5ce4:	b508      	push	{r3, lr}
   d5ce6:	4b03      	ldr	r3, [pc, #12]	; (d5cf4 <system_ctrl_set_app_request_handler+0x10>)
   d5ce8:	681b      	ldr	r3, [r3, #0]
   d5cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5cee:	9301      	str	r3, [sp, #4]
   d5cf0:	bd08      	pop	{r3, pc}
   d5cf2:	0000      	.short	0x0000
   d5cf4:	00030220 	.word	0x00030220

000d5cf8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5cf8:	b508      	push	{r3, lr}
   d5cfa:	4b03      	ldr	r3, [pc, #12]	; (d5d08 <system_ctrl_set_result+0x10>)
   d5cfc:	681b      	ldr	r3, [r3, #0]
   d5cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5d02:	9301      	str	r3, [sp, #4]
   d5d04:	bd08      	pop	{r3, pc}
   d5d06:	0000      	.short	0x0000
   d5d08:	00030220 	.word	0x00030220

000d5d0c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d5d0c:	b508      	push	{r3, lr}
   d5d0e:	4b03      	ldr	r3, [pc, #12]	; (d5d1c <system_sleep_ext+0x10>)
   d5d10:	681b      	ldr	r3, [r3, #0]
   d5d12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d5d16:	9301      	str	r3, [sp, #4]
   d5d18:	bd08      	pop	{r3, pc}
   d5d1a:	0000      	.short	0x0000
   d5d1c:	00030220 	.word	0x00030220

000d5d20 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d20:	b508      	push	{r3, lr}
   d5d22:	4b02      	ldr	r3, [pc, #8]	; (d5d2c <network_connect+0xc>)
   d5d24:	681b      	ldr	r3, [r3, #0]
   d5d26:	685b      	ldr	r3, [r3, #4]
   d5d28:	9301      	str	r3, [sp, #4]
   d5d2a:	bd08      	pop	{r3, pc}
   d5d2c:	00030240 	.word	0x00030240

000d5d30 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5d30:	b508      	push	{r3, lr}
   d5d32:	4b02      	ldr	r3, [pc, #8]	; (d5d3c <network_connecting+0xc>)
   d5d34:	681b      	ldr	r3, [r3, #0]
   d5d36:	689b      	ldr	r3, [r3, #8]
   d5d38:	9301      	str	r3, [sp, #4]
   d5d3a:	bd08      	pop	{r3, pc}
   d5d3c:	00030240 	.word	0x00030240

000d5d40 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5d40:	b508      	push	{r3, lr}
   d5d42:	4b02      	ldr	r3, [pc, #8]	; (d5d4c <network_disconnect+0xc>)
   d5d44:	681b      	ldr	r3, [r3, #0]
   d5d46:	68db      	ldr	r3, [r3, #12]
   d5d48:	9301      	str	r3, [sp, #4]
   d5d4a:	bd08      	pop	{r3, pc}
   d5d4c:	00030240 	.word	0x00030240

000d5d50 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5d50:	b508      	push	{r3, lr}
   d5d52:	4b02      	ldr	r3, [pc, #8]	; (d5d5c <network_ready+0xc>)
   d5d54:	681b      	ldr	r3, [r3, #0]
   d5d56:	691b      	ldr	r3, [r3, #16]
   d5d58:	9301      	str	r3, [sp, #4]
   d5d5a:	bd08      	pop	{r3, pc}
   d5d5c:	00030240 	.word	0x00030240

000d5d60 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d60:	b508      	push	{r3, lr}
   d5d62:	4b02      	ldr	r3, [pc, #8]	; (d5d6c <network_on+0xc>)
   d5d64:	681b      	ldr	r3, [r3, #0]
   d5d66:	695b      	ldr	r3, [r3, #20]
   d5d68:	9301      	str	r3, [sp, #4]
   d5d6a:	bd08      	pop	{r3, pc}
   d5d6c:	00030240 	.word	0x00030240

000d5d70 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d70:	b508      	push	{r3, lr}
   d5d72:	4b02      	ldr	r3, [pc, #8]	; (d5d7c <network_off+0xc>)
   d5d74:	681b      	ldr	r3, [r3, #0]
   d5d76:	699b      	ldr	r3, [r3, #24]
   d5d78:	9301      	str	r3, [sp, #4]
   d5d7a:	bd08      	pop	{r3, pc}
   d5d7c:	00030240 	.word	0x00030240

000d5d80 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5d80:	b508      	push	{r3, lr}
   d5d82:	4b02      	ldr	r3, [pc, #8]	; (d5d8c <network_listen+0xc>)
   d5d84:	681b      	ldr	r3, [r3, #0]
   d5d86:	69db      	ldr	r3, [r3, #28]
   d5d88:	9301      	str	r3, [sp, #4]
   d5d8a:	bd08      	pop	{r3, pc}
   d5d8c:	00030240 	.word	0x00030240

000d5d90 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5d90:	b508      	push	{r3, lr}
   d5d92:	4b02      	ldr	r3, [pc, #8]	; (d5d9c <network_listening+0xc>)
   d5d94:	681b      	ldr	r3, [r3, #0]
   d5d96:	6a1b      	ldr	r3, [r3, #32]
   d5d98:	9301      	str	r3, [sp, #4]
   d5d9a:	bd08      	pop	{r3, pc}
   d5d9c:	00030240 	.word	0x00030240

000d5da0 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   d5da0:	b508      	push	{r3, lr}
   d5da2:	4b02      	ldr	r3, [pc, #8]	; (d5dac <network_has_credentials+0xc>)
   d5da4:	681b      	ldr	r3, [r3, #0]
   d5da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5da8:	9301      	str	r3, [sp, #4]
   d5daa:	bd08      	pop	{r3, pc}
   d5dac:	00030240 	.word	0x00030240

000d5db0 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d5db0:	b508      	push	{r3, lr}
   d5db2:	4b02      	ldr	r3, [pc, #8]	; (d5dbc <network_set_credentials+0xc>)
   d5db4:	681b      	ldr	r3, [r3, #0]
   d5db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5db8:	9301      	str	r3, [sp, #4]
   d5dba:	bd08      	pop	{r3, pc}
   d5dbc:	00030240 	.word	0x00030240

000d5dc0 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5dc0:	b508      	push	{r3, lr}
   d5dc2:	4b02      	ldr	r3, [pc, #8]	; (d5dcc <network_set_listen_timeout+0xc>)
   d5dc4:	681b      	ldr	r3, [r3, #0]
   d5dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5dc8:	9301      	str	r3, [sp, #4]
   d5dca:	bd08      	pop	{r3, pc}
   d5dcc:	00030240 	.word	0x00030240

000d5dd0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5dd0:	b508      	push	{r3, lr}
   d5dd2:	4b02      	ldr	r3, [pc, #8]	; (d5ddc <network_get_listen_timeout+0xc>)
   d5dd4:	681b      	ldr	r3, [r3, #0]
   d5dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5dd8:	9301      	str	r3, [sp, #4]
   d5dda:	bd08      	pop	{r3, pc}
   d5ddc:	00030240 	.word	0x00030240

000d5de0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5de0:	b508      	push	{r3, lr}
   d5de2:	4b02      	ldr	r3, [pc, #8]	; (d5dec <network_is_on+0xc>)
   d5de4:	681b      	ldr	r3, [r3, #0]
   d5de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5de8:	9301      	str	r3, [sp, #4]
   d5dea:	bd08      	pop	{r3, pc}
   d5dec:	00030240 	.word	0x00030240

000d5df0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5df0:	b508      	push	{r3, lr}
   d5df2:	4b02      	ldr	r3, [pc, #8]	; (d5dfc <network_is_off+0xc>)
   d5df4:	681b      	ldr	r3, [r3, #0]
   d5df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5df8:	9301      	str	r3, [sp, #4]
   d5dfa:	bd08      	pop	{r3, pc}
   d5dfc:	00030240 	.word	0x00030240

000d5e00 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5e00:	b508      	push	{r3, lr}
   d5e02:	4b02      	ldr	r3, [pc, #8]	; (d5e0c <spark_process+0xc>)
   d5e04:	681b      	ldr	r3, [r3, #0]
   d5e06:	689b      	ldr	r3, [r3, #8]
   d5e08:	9301      	str	r3, [sp, #4]
   d5e0a:	bd08      	pop	{r3, pc}
   d5e0c:	00030244 	.word	0x00030244

000d5e10 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d5e10:	b508      	push	{r3, lr}
   d5e12:	4b02      	ldr	r3, [pc, #8]	; (d5e1c <spark_cloud_flag_connect+0xc>)
   d5e14:	681b      	ldr	r3, [r3, #0]
   d5e16:	68db      	ldr	r3, [r3, #12]
   d5e18:	9301      	str	r3, [sp, #4]
   d5e1a:	bd08      	pop	{r3, pc}
   d5e1c:	00030244 	.word	0x00030244

000d5e20 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5e20:	b508      	push	{r3, lr}
   d5e22:	4b02      	ldr	r3, [pc, #8]	; (d5e2c <spark_cloud_flag_connected+0xc>)
   d5e24:	681b      	ldr	r3, [r3, #0]
   d5e26:	695b      	ldr	r3, [r3, #20]
   d5e28:	9301      	str	r3, [sp, #4]
   d5e2a:	bd08      	pop	{r3, pc}
   d5e2c:	00030244 	.word	0x00030244

000d5e30 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5e30:	b508      	push	{r3, lr}
   d5e32:	4b02      	ldr	r3, [pc, #8]	; (d5e3c <spark_sync_time_pending+0xc>)
   d5e34:	681b      	ldr	r3, [r3, #0]
   d5e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e38:	9301      	str	r3, [sp, #4]
   d5e3a:	bd08      	pop	{r3, pc}
   d5e3c:	00030244 	.word	0x00030244

000d5e40 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5e40:	b508      	push	{r3, lr}
   d5e42:	4b02      	ldr	r3, [pc, #8]	; (d5e4c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5e44:	681b      	ldr	r3, [r3, #0]
   d5e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5e48:	9301      	str	r3, [sp, #4]
   d5e4a:	bd08      	pop	{r3, pc}
   d5e4c:	00030244 	.word	0x00030244

000d5e50 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d5e50:	b508      	push	{r3, lr}
   d5e52:	4b02      	ldr	r3, [pc, #8]	; (d5e5c <spark_cloud_disconnect+0xc>)
   d5e54:	681b      	ldr	r3, [r3, #0]
   d5e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5e58:	9301      	str	r3, [sp, #4]
   d5e5a:	bd08      	pop	{r3, pc}
   d5e5c:	00030244 	.word	0x00030244

000d5e60 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5e60:	b508      	push	{r3, lr}
   d5e62:	4b02      	ldr	r3, [pc, #8]	; (d5e6c <malloc+0xc>)
   d5e64:	681b      	ldr	r3, [r3, #0]
   d5e66:	681b      	ldr	r3, [r3, #0]
   d5e68:	9301      	str	r3, [sp, #4]
   d5e6a:	bd08      	pop	{r3, pc}
   d5e6c:	0003021c 	.word	0x0003021c

000d5e70 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5e70:	b508      	push	{r3, lr}
   d5e72:	4b02      	ldr	r3, [pc, #8]	; (d5e7c <free+0xc>)
   d5e74:	681b      	ldr	r3, [r3, #0]
   d5e76:	685b      	ldr	r3, [r3, #4]
   d5e78:	9301      	str	r3, [sp, #4]
   d5e7a:	bd08      	pop	{r3, pc}
   d5e7c:	0003021c 	.word	0x0003021c

000d5e80 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5e80:	b508      	push	{r3, lr}
   d5e82:	4b02      	ldr	r3, [pc, #8]	; (d5e8c <realloc+0xc>)
   d5e84:	681b      	ldr	r3, [r3, #0]
   d5e86:	689b      	ldr	r3, [r3, #8]
   d5e88:	9301      	str	r3, [sp, #4]
   d5e8a:	bd08      	pop	{r3, pc}
   d5e8c:	0003021c 	.word	0x0003021c

000d5e90 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5e90:	b508      	push	{r3, lr}
   d5e92:	4b02      	ldr	r3, [pc, #8]	; (d5e9c <abort+0xc>)
   d5e94:	681b      	ldr	r3, [r3, #0]
   d5e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e98:	9301      	str	r3, [sp, #4]
   d5e9a:	bd08      	pop	{r3, pc}
   d5e9c:	0003021c 	.word	0x0003021c

000d5ea0 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5ea0:	b508      	push	{r3, lr}
   d5ea2:	4b02      	ldr	r3, [pc, #8]	; (d5eac <__errno+0xc>)
   d5ea4:	681b      	ldr	r3, [r3, #0]
   d5ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5ea8:	9301      	str	r3, [sp, #4]
   d5eaa:	bd08      	pop	{r3, pc}
   d5eac:	0003021c 	.word	0x0003021c

000d5eb0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5eb0:	b508      	push	{r3, lr}
   d5eb2:	4b02      	ldr	r3, [pc, #8]	; (d5ebc <newlib_impure_ptr_callback+0xc>)
   d5eb4:	681b      	ldr	r3, [r3, #0]
   d5eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5eb8:	9301      	str	r3, [sp, #4]
   d5eba:	bd08      	pop	{r3, pc}
   d5ebc:	0003021c 	.word	0x0003021c

000d5ec0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5ec0:	2200      	movs	r2, #0
   d5ec2:	6840      	ldr	r0, [r0, #4]
   d5ec4:	4611      	mov	r1, r2
   d5ec6:	f7ff bf63 	b.w	d5d90 <network_listening>

000d5eca <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5eca:	2200      	movs	r2, #0
   d5ecc:	6840      	ldr	r0, [r0, #4]
   d5ece:	4611      	mov	r1, r2
   d5ed0:	f7ff bf7e 	b.w	d5dd0 <network_get_listen_timeout>

000d5ed4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5ed4:	6840      	ldr	r0, [r0, #4]
   d5ed6:	2200      	movs	r2, #0
   d5ed8:	f7ff bf72 	b.w	d5dc0 <network_set_listen_timeout>

000d5edc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5edc:	6840      	ldr	r0, [r0, #4]
   d5ede:	2200      	movs	r2, #0
   d5ee0:	f081 0101 	eor.w	r1, r1, #1
   d5ee4:	f7ff bf4c 	b.w	d5d80 <network_listen>

000d5ee8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5ee8:	2300      	movs	r3, #0
   d5eea:	6840      	ldr	r0, [r0, #4]
   d5eec:	461a      	mov	r2, r3
   d5eee:	4619      	mov	r1, r3
   d5ef0:	f7ff bf3e 	b.w	d5d70 <network_off>

000d5ef4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5ef4:	2300      	movs	r3, #0
   d5ef6:	6840      	ldr	r0, [r0, #4]
   d5ef8:	461a      	mov	r2, r3
   d5efa:	4619      	mov	r1, r3
   d5efc:	f7ff bf30 	b.w	d5d60 <network_on>

000d5f00 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5f00:	2200      	movs	r2, #0
   d5f02:	6840      	ldr	r0, [r0, #4]
   d5f04:	4611      	mov	r1, r2
   d5f06:	f7ff bf23 	b.w	d5d50 <network_ready>

000d5f0a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5f0a:	2200      	movs	r2, #0
   d5f0c:	6840      	ldr	r0, [r0, #4]
   d5f0e:	4611      	mov	r1, r2
   d5f10:	f7ff bf0e 	b.w	d5d30 <network_connecting>

000d5f14 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5f14:	6840      	ldr	r0, [r0, #4]
   d5f16:	2200      	movs	r2, #0
   d5f18:	2102      	movs	r1, #2
   d5f1a:	f7ff bf11 	b.w	d5d40 <network_disconnect>

000d5f1e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5f1e:	2300      	movs	r3, #0
   d5f20:	6840      	ldr	r0, [r0, #4]
   d5f22:	461a      	mov	r2, r3
   d5f24:	f7ff befc 	b.w	d5d20 <network_connect>

000d5f28 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5f28:	4b02      	ldr	r3, [pc, #8]	; (d5f34 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5f2a:	2203      	movs	r2, #3
   d5f2c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5f2e:	4a02      	ldr	r2, [pc, #8]	; (d5f38 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5f30:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5f32:	4770      	bx	lr
   d5f34:	2003e63c 	.word	0x2003e63c
   d5f38:	000da018 	.word	0x000da018

000d5f3c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5f3c:	2100      	movs	r1, #0
   d5f3e:	f7ff be59 	b.w	d5bf4 <hal_spi_acquire>

000d5f42 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5f42:	2100      	movs	r1, #0
   d5f44:	f7ff be5e 	b.w	d5c04 <hal_spi_release>

000d5f48 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5f48:	b510      	push	{r4, lr}
   d5f4a:	4604      	mov	r4, r0
   d5f4c:	4608      	mov	r0, r1
{
    _spi = spi;
   d5f4e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5f50:	f7ff fe38 	bl	d5bc4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5f54:	2300      	movs	r3, #0
   d5f56:	6063      	str	r3, [r4, #4]
}
   d5f58:	4620      	mov	r0, r4
   d5f5a:	bd10      	pop	{r4, pc}

000d5f5c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5f5c:	b510      	push	{r4, lr}
   d5f5e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5f60:	7800      	ldrb	r0, [r0, #0]
   d5f62:	f7ff ffeb 	bl	d5f3c <_ZN8SPIClass4lockEv.isra.0>
   d5f66:	b948      	cbnz	r0, d5f7c <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5f68:	7820      	ldrb	r0, [r4, #0]
   d5f6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5f6e:	f7ff fe01 	bl	d5b74 <hal_spi_begin>
        unlock();
   d5f72:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5f78:	f7ff bfe3 	b.w	d5f42 <_ZN8SPIClass6unlockEv.isra.0>
}
   d5f7c:	bd10      	pop	{r4, pc}

000d5f7e <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5f7e:	b513      	push	{r0, r1, r4, lr}
   d5f80:	4604      	mov	r4, r0
    if (!lock())
   d5f82:	7800      	ldrb	r0, [r0, #0]
{
   d5f84:	9101      	str	r1, [sp, #4]
    if (!lock())
   d5f86:	f7ff ffd9 	bl	d5f3c <_ZN8SPIClass4lockEv.isra.0>
   d5f8a:	9901      	ldr	r1, [sp, #4]
   d5f8c:	b940      	cbnz	r0, d5fa0 <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d5f8e:	7820      	ldrb	r0, [r4, #0]
   d5f90:	f7ff fdf8 	bl	d5b84 <hal_spi_set_bit_order>
        unlock();
   d5f94:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5f96:	b002      	add	sp, #8
   d5f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5f9c:	f7ff bfd1 	b.w	d5f42 <_ZN8SPIClass6unlockEv.isra.0>
}
   d5fa0:	b002      	add	sp, #8
   d5fa2:	bd10      	pop	{r4, pc}

000d5fa4 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d5fa4:	b513      	push	{r0, r1, r4, lr}
   d5fa6:	4604      	mov	r4, r0
    if (!lock())
   d5fa8:	7800      	ldrb	r0, [r0, #0]
{
   d5faa:	9101      	str	r1, [sp, #4]
    if (!lock())
   d5fac:	f7ff ffc6 	bl	d5f3c <_ZN8SPIClass4lockEv.isra.0>
   d5fb0:	9901      	ldr	r1, [sp, #4]
   d5fb2:	b940      	cbnz	r0, d5fc6 <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d5fb4:	7820      	ldrb	r0, [r4, #0]
   d5fb6:	f7ff fded 	bl	d5b94 <hal_spi_set_data_mode>
        unlock();
   d5fba:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5fbc:	b002      	add	sp, #8
   d5fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5fc2:	f7ff bfbe 	b.w	d5f42 <_ZN8SPIClass6unlockEv.isra.0>
}
   d5fc6:	b002      	add	sp, #8
   d5fc8:	bd10      	pop	{r4, pc}
	...

000d5fcc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5fcc:	0840      	lsrs	r0, r0, #1
{
   d5fce:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5fd0:	6018      	str	r0, [r3, #0]
   d5fd2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5fd4:	6818      	ldr	r0, [r3, #0]
   d5fd6:	4288      	cmp	r0, r1
   d5fd8:	b2e5      	uxtb	r5, r4
   d5fda:	d906      	bls.n	d5fea <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5fdc:	3401      	adds	r4, #1
   d5fde:	2c08      	cmp	r4, #8
   d5fe0:	d002      	beq.n	d5fe8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5fe2:	0840      	lsrs	r0, r0, #1
   d5fe4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d5fe6:	e7f5      	b.n	d5fd4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5fe8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d5fea:	4b02      	ldr	r3, [pc, #8]	; (d5ff4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5fec:	5d5b      	ldrb	r3, [r3, r5]
   d5fee:	7013      	strb	r3, [r2, #0]
}
   d5ff0:	bd30      	pop	{r4, r5, pc}
   d5ff2:	bf00      	nop
   d5ff4:	000da04c 	.word	0x000da04c

000d5ff8 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5ffc:	b088      	sub	sp, #32
    unsigned clock = 0;
   d5ffe:	2300      	movs	r3, #0
{
   d6000:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d6002:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d6004:	9302      	str	r3, [sp, #8]
{
   d6006:	460e      	mov	r6, r1
   d6008:	4617      	mov	r7, r2
    if (!lock())
   d600a:	f7ff ff97 	bl	d5f3c <_ZN8SPIClass4lockEv.isra.0>
   d600e:	4605      	mov	r5, r0
   d6010:	bb00      	cbnz	r0, d6054 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d6012:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d6016:	4601      	mov	r1, r0
   d6018:	2214      	movs	r2, #20
   d601a:	a803      	add	r0, sp, #12
   d601c:	f003 fcc6 	bl	d99ac <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6020:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d6022:	462a      	mov	r2, r5
   d6024:	a903      	add	r1, sp, #12
   d6026:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d6028:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d602c:	f7ff fdda 	bl	d5be4 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d6030:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d6032:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d6036:	ab02      	add	r3, sp, #8
   d6038:	f10d 0207 	add.w	r2, sp, #7
   d603c:	fb07 f106 	mul.w	r1, r7, r6
   d6040:	f7ff ffc4 	bl	d5fcc <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d6044:	7820      	ldrb	r0, [r4, #0]
   d6046:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d604a:	f7ff fdab 	bl	d5ba4 <hal_spi_set_clock_divider>
        unlock();
   d604e:	7820      	ldrb	r0, [r4, #0]
   d6050:	f7ff ff77 	bl	d5f42 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d6054:	9802      	ldr	r0, [sp, #8]
   d6056:	b008      	add	sp, #32
   d6058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d605c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d605c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d605e:	7800      	ldrb	r0, [r0, #0]
   d6060:	f7ff fda8 	bl	d5bb4 <hal_spi_transfer>
}
   d6064:	b2c0      	uxtb	r0, r0
   d6066:	bd08      	pop	{r3, pc}

000d6068 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6068:	b510      	push	{r4, lr}
   d606a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d606c:	6800      	ldr	r0, [r0, #0]
   d606e:	b118      	cbz	r0, d6078 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d6070:	f7ff fefe 	bl	d5e70 <free>
            wakeupSource_ = nullptr;
   d6074:	2300      	movs	r3, #0
   d6076:	6023      	str	r3, [r4, #0]
        }
    }
   d6078:	bd10      	pop	{r4, pc}

000d607a <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d607a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d607c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d6080:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d6082:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d6084:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d6086:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d608a:	f8c0 2006 	str.w	r2, [r0, #6]
   d608e:	889b      	ldrh	r3, [r3, #4]
   d6090:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d6092:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d6094:	f7ff ffe8 	bl	d6068 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d6098:	682b      	ldr	r3, [r5, #0]
   d609a:	b113      	cbz	r3, d60a2 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d609c:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d609e:	2300      	movs	r3, #0
   d60a0:	602b      	str	r3, [r5, #0]
    }
   d60a2:	4620      	mov	r0, r4
   d60a4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d60a8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d60a8:	b538      	push	{r3, r4, r5, lr}
   d60aa:	460c      	mov	r4, r1
   d60ac:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d60ae:	f7ff ffdb 	bl	d6068 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d60b2:	b144      	cbz	r4, d60c6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d60b4:	8820      	ldrh	r0, [r4, #0]
   d60b6:	f7ff fed3 	bl	d5e60 <malloc>
   d60ba:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d60bc:	b128      	cbz	r0, d60ca <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d60be:	8822      	ldrh	r2, [r4, #0]
   d60c0:	4621      	mov	r1, r4
   d60c2:	f003 fc4b 	bl	d995c <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d60c6:	2000      	movs	r0, #0
    }
   d60c8:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d60ca:	4801      	ldr	r0, [pc, #4]	; (d60d0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d60cc:	e7fc      	b.n	d60c8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d60ce:	bf00      	nop
   d60d0:	fffffefc 	.word	0xfffffefc

000d60d4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d60d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d60d6:	4d2d      	ldr	r5, [pc, #180]	; (d618c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d60d8:	7d0b      	ldrb	r3, [r1, #20]
   d60da:	4604      	mov	r4, r0
   d60dc:	b08b      	sub	sp, #44	; 0x2c
   d60de:	4608      	mov	r0, r1
   d60e0:	1daf      	adds	r7, r5, #6
   d60e2:	2b00      	cmp	r3, #0
   d60e4:	d038      	beq.n	d6158 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d60e6:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d60e8:	791b      	ldrb	r3, [r3, #4]
   d60ea:	2b00      	cmp	r3, #0
   d60ec:	d034      	beq.n	d6158 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d60ee:	2200      	movs	r2, #0
    SleepResult() {}
   d60f0:	4b27      	ldr	r3, [pc, #156]	; (d6190 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d60f2:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d60f4:	a902      	add	r1, sp, #8
   d60f6:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d60f8:	9202      	str	r2, [sp, #8]
   d60fa:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d60fe:	f88d 200e 	strb.w	r2, [sp, #14]
   d6102:	f7ff fe03 	bl	d5d0c <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d6106:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d610a:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d610e:	b200      	sxth	r0, r0
   d6110:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d6114:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d6118:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d611a:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d611c:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d611e:	4628      	mov	r0, r5
   d6120:	f7ff ffc2 	bl	d60a8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d6124:	a802      	add	r0, sp, #8
   d6126:	f7ff ff9f 	bl	d6068 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d612a:	2300      	movs	r3, #0
   d612c:	6023      	str	r3, [r4, #0]
   d612e:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d6130:	71a3      	strb	r3, [r4, #6]
   d6132:	8123      	strh	r3, [r4, #8]
   d6134:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6138:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d613a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d613e:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d6140:	683b      	ldr	r3, [r7, #0]
   d6142:	f8c4 3006 	str.w	r3, [r4, #6]
   d6146:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d6148:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d614a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d614c:	4620      	mov	r0, r4
   d614e:	f7ff ffab 	bl	d60a8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d6152:	4620      	mov	r0, r4
   d6154:	b00b      	add	sp, #44	; 0x2c
   d6156:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d6158:	2600      	movs	r6, #0
   d615a:	2320      	movs	r3, #32
   d615c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d6160:	4b0c      	ldr	r3, [pc, #48]	; (d6194 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d6162:	9300      	str	r3, [sp, #0]
   d6164:	490c      	ldr	r1, [pc, #48]	; (d6198 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d6166:	4633      	mov	r3, r6
   d6168:	aa02      	add	r2, sp, #8
   d616a:	2032      	movs	r0, #50	; 0x32
   d616c:	f7ff fd92 	bl	d5c94 <log_message>
    SleepResult() {}
   d6170:	4b07      	ldr	r3, [pc, #28]	; (d6190 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d6172:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d6174:	a902      	add	r1, sp, #8
        error_ = error;
   d6176:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d617a:	4804      	ldr	r0, [pc, #16]	; (d618c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d617c:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d617e:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d6182:	f8ad 300c 	strh.w	r3, [sp, #12]
   d6186:	f7ff ff78 	bl	d607a <_ZN17SystemSleepResultaSEOS_>
   d618a:	e7cb      	b.n	d6124 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d618c:	2003e644 	.word	0x2003e644
   d6190:	ffff0000 	.word	0xffff0000
   d6194:	000da05b 	.word	0x000da05b
   d6198:	000da054 	.word	0x000da054

000d619c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d619c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d619e:	4b09      	ldr	r3, [pc, #36]	; (d61c4 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d61a0:	4c09      	ldr	r4, [pc, #36]	; (d61c8 <_GLOBAL__sub_I_System+0x2c>)
   d61a2:	2202      	movs	r2, #2
   d61a4:	2000      	movs	r0, #0
   d61a6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d61a8:	4b08      	ldr	r3, [pc, #32]	; (d61cc <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d61aa:	6020      	str	r0, [r4, #0]
   d61ac:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d61ae:	71a0      	strb	r0, [r4, #6]
   d61b0:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d61b2:	f7ff fd7f 	bl	d5cb4 <set_system_mode>
SystemClass System;
   d61b6:	4620      	mov	r0, r4
   d61b8:	4a05      	ldr	r2, [pc, #20]	; (d61d0 <_GLOBAL__sub_I_System+0x34>)
   d61ba:	4906      	ldr	r1, [pc, #24]	; (d61d4 <_GLOBAL__sub_I_System+0x38>)
   d61bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d61c0:	f002 bd74 	b.w	d8cac <__aeabi_atexit>
   d61c4:	2003e650 	.word	0x2003e650
   d61c8:	2003e644 	.word	0x2003e644
   d61cc:	ffff0000 	.word	0xffff0000
   d61d0:	2003e0ac 	.word	0x2003e0ac
   d61d4:	000d4171 	.word	0x000d4171

000d61d8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d61d8:	b510      	push	{r4, lr}
   d61da:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d61dc:	f003 fc24 	bl	d9a28 <strlen>
   d61e0:	3801      	subs	r0, #1
   d61e2:	1823      	adds	r3, r4, r0
   d61e4:	4620      	mov	r0, r4
	while(i<j){
   d61e6:	4283      	cmp	r3, r0
   d61e8:	d906      	bls.n	d61f8 <_Z11str_reversePc+0x20>
		c = *i;
   d61ea:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d61ec:	7819      	ldrb	r1, [r3, #0]
   d61ee:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d61f2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d61f6:	e7f6      	b.n	d61e6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d61f8:	bd10      	pop	{r4, pc}

000d61fa <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d61fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d61fe:	1e93      	subs	r3, r2, #2
{
   d6200:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   d6202:	2b22      	cmp	r3, #34	; 0x22
   d6204:	f04f 0300 	mov.w	r3, #0
{
   d6208:	460d      	mov	r5, r1
   d620a:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d620c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   d6210:	d927      	bls.n	d6262 <ltoa+0x68>

      if (10 == base && N < 0L)
   d6212:	2800      	cmp	r0, #0
   d6214:	da2a      	bge.n	d626c <ltoa+0x72>
      {
            *head++ = '-';
   d6216:	462e      	mov	r6, r5
   d6218:	232d      	movs	r3, #45	; 0x2d
   d621a:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   d621e:	4240      	negs	r0, r0
   d6220:	240a      	movs	r4, #10
      *tail-- = '\0';
   d6222:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d6226:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d622a:	4622      	mov	r2, r4
   d622c:	4601      	mov	r1, r0
   d622e:	a801      	add	r0, sp, #4
   d6230:	f003 fb72 	bl	d9918 <ldiv>
   d6234:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d6236:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   d6238:	2b09      	cmp	r3, #9
   d623a:	bfcc      	ite	gt
   d623c:	2237      	movgt	r2, #55	; 0x37
   d623e:	2230      	movle	r2, #48	; 0x30
   d6240:	fa52 f383 	uxtab	r3, r2, r3
   d6244:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   d6248:	f108 0801 	add.w	r8, r8, #1
   d624c:	2800      	cmp	r0, #0
   d624e:	d1ec      	bne.n	d622a <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d6250:	4642      	mov	r2, r8
   d6252:	1c79      	adds	r1, r7, #1
   d6254:	4630      	mov	r0, r6
   d6256:	f003 fb81 	bl	d995c <memcpy>
      return str;
}
   d625a:	4628      	mov	r0, r5
   d625c:	b00c      	add	sp, #48	; 0x30
   d625e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   d6262:	2a0a      	cmp	r2, #10
   d6264:	d0d5      	beq.n	d6212 <ltoa+0x18>
      if (uarg)
   d6266:	b118      	cbz	r0, d6270 <ltoa+0x76>
   d6268:	462e      	mov	r6, r5
   d626a:	e7da      	b.n	d6222 <ltoa+0x28>
   d626c:	240a      	movs	r4, #10
   d626e:	e7fa      	b.n	d6266 <ltoa+0x6c>
      else  *tail-- = '0';
   d6270:	2330      	movs	r3, #48	; 0x30
   d6272:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d6276:	462e      	mov	r6, r5
   d6278:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   d627c:	f04f 0802 	mov.w	r8, #2
   d6280:	e7e6      	b.n	d6250 <ltoa+0x56>

000d6282 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6282:	b570      	push	{r4, r5, r6, lr}
   d6284:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d6286:	1e91      	subs	r1, r2, #2
   d6288:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d628a:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d628c:	d822      	bhi.n	d62d4 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d628e:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d6290:	b16d      	cbz	r5, d62ae <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6292:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d6296:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d629a:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d629c:	2d09      	cmp	r5, #9
                *ptr += '0';
   d629e:	bf94      	ite	ls
   d62a0:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d62a2:	3157      	addhi	r1, #87	; 0x57
   d62a4:	b2c9      	uxtb	r1, r1
   d62a6:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d62aa:	4635      	mov	r5, r6
	while(a){
   d62ac:	e7f0      	b.n	d6290 <ultoa+0xe>
   d62ae:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d62b0:	4423      	add	r3, r4
            *ptr++ = '0';
   d62b2:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d62b4:	4293      	cmp	r3, r2
   d62b6:	d902      	bls.n	d62be <ultoa+0x3c>
            *ptr++ = '0';
   d62b8:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d62bc:	e7fa      	b.n	d62b4 <ultoa+0x32>
   d62be:	1a1a      	subs	r2, r3, r0
   d62c0:	4283      	cmp	r3, r0
   d62c2:	bf38      	it	cc
   d62c4:	2200      	movcc	r2, #0

	*ptr = '\0';
   d62c6:	2300      	movs	r3, #0
   d62c8:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d62ca:	4620      	mov	r0, r4
   d62cc:	f7ff ff84 	bl	d61d8 <_Z11str_reversePc>
	return buffer;
   d62d0:	4620      	mov	r0, r4
}
   d62d2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d62d4:	2000      	movs	r0, #0
   d62d6:	e7fc      	b.n	d62d2 <ultoa+0x50>

000d62d8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d62d8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d62da:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d62dc:	460c      	mov	r4, r1
   d62de:	4615      	mov	r5, r2
	if(a<0){
   d62e0:	da0e      	bge.n	d6300 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d62e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d62e6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d62ea:	bf14      	ite	ne
   d62ec:	4258      	negne	r0, r3
   d62ee:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d62f0:	2301      	movs	r3, #1
		*buffer = '-';
   d62f2:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d62f4:	462a      	mov	r2, r5
   d62f6:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d62f8:	f7ff ffc3 	bl	d6282 <ultoa>
	}
	return buffer;
}
   d62fc:	4620      	mov	r0, r4
   d62fe:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d6300:	2301      	movs	r3, #1
   d6302:	e7f9      	b.n	d62f8 <itoa+0x20>

000d6304 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d6304:	b570      	push	{r4, r5, r6, lr}
   d6306:	b086      	sub	sp, #24
   d6308:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d630a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d630c:	4668      	mov	r0, sp
   d630e:	f001 fe97 	bl	d8040 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6314:	1d34      	adds	r4, r6, #4
   d6316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6318:	682b      	ldr	r3, [r5, #0]
   d631a:	7023      	strb	r3, [r4, #0]
    }
   d631c:	4630      	mov	r0, r6
   d631e:	b006      	add	sp, #24
   d6320:	bd70      	pop	{r4, r5, r6, pc}

000d6322 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6322:	b510      	push	{r4, lr}
   d6324:	4604      	mov	r4, r0
{
	free(buffer);
   d6326:	6800      	ldr	r0, [r0, #0]
   d6328:	f7ff fda2 	bl	d5e70 <free>
}
   d632c:	4620      	mov	r0, r4
   d632e:	bd10      	pop	{r4, pc}

000d6330 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6330:	b510      	push	{r4, lr}
   d6332:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6334:	6800      	ldr	r0, [r0, #0]
   d6336:	b108      	cbz	r0, d633c <_ZN6String10invalidateEv+0xc>
   d6338:	f7ff fd9a 	bl	d5e70 <free>
	buffer = NULL;
   d633c:	2300      	movs	r3, #0
	capacity = len = 0;
   d633e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6342:	6023      	str	r3, [r4, #0]
}
   d6344:	bd10      	pop	{r4, pc}

000d6346 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6346:	b538      	push	{r3, r4, r5, lr}
   d6348:	4604      	mov	r4, r0
   d634a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d634c:	6800      	ldr	r0, [r0, #0]
   d634e:	3101      	adds	r1, #1
   d6350:	f7ff fd96 	bl	d5e80 <realloc>
	if (newbuffer) {
   d6354:	b110      	cbz	r0, d635c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6356:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d635a:	2001      	movs	r0, #1
	}
	return 0;
}
   d635c:	bd38      	pop	{r3, r4, r5, pc}

000d635e <_ZN6String7reserveEj>:
{
   d635e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6360:	6803      	ldr	r3, [r0, #0]
{
   d6362:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6364:	b123      	cbz	r3, d6370 <_ZN6String7reserveEj+0x12>
   d6366:	6843      	ldr	r3, [r0, #4]
   d6368:	428b      	cmp	r3, r1
   d636a:	d301      	bcc.n	d6370 <_ZN6String7reserveEj+0x12>
   d636c:	2001      	movs	r0, #1
}
   d636e:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d6370:	4620      	mov	r0, r4
   d6372:	f7ff ffe8 	bl	d6346 <_ZN6String12changeBufferEj>
   d6376:	2800      	cmp	r0, #0
   d6378:	d0f9      	beq.n	d636e <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d637a:	68a3      	ldr	r3, [r4, #8]
   d637c:	2b00      	cmp	r3, #0
   d637e:	d1f5      	bne.n	d636c <_ZN6String7reserveEj+0xe>
   d6380:	6822      	ldr	r2, [r4, #0]
   d6382:	7013      	strb	r3, [r2, #0]
   d6384:	e7f2      	b.n	d636c <_ZN6String7reserveEj+0xe>

000d6386 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6386:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6388:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d638a:	4611      	mov	r1, r2
   d638c:	9201      	str	r2, [sp, #4]
{
   d638e:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d6390:	f7ff ffe5 	bl	d635e <_ZN6String7reserveEj>
   d6394:	9a01      	ldr	r2, [sp, #4]
   d6396:	b928      	cbnz	r0, d63a4 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d6398:	4620      	mov	r0, r4
   d639a:	f7ff ffc9 	bl	d6330 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d639e:	4620      	mov	r0, r4
   d63a0:	b003      	add	sp, #12
   d63a2:	bd30      	pop	{r4, r5, pc}
	len = length;
   d63a4:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d63a6:	4629      	mov	r1, r5
   d63a8:	6820      	ldr	r0, [r4, #0]
   d63aa:	f003 fad7 	bl	d995c <memcpy>
	buffer[len] = 0;
   d63ae:	6822      	ldr	r2, [r4, #0]
   d63b0:	68a3      	ldr	r3, [r4, #8]
   d63b2:	2100      	movs	r1, #0
   d63b4:	54d1      	strb	r1, [r2, r3]
	return *this;
   d63b6:	e7f2      	b.n	d639e <_ZN6String4copyEPKcj+0x18>

000d63b8 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d63b8:	2300      	movs	r3, #0
String::String(const char *cstr)
   d63ba:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d63bc:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d63c0:	4604      	mov	r4, r0
	len = 0;
   d63c2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d63c4:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d63c6:	b141      	cbz	r1, d63da <_ZN6StringC1EPKc+0x22>
   d63c8:	4608      	mov	r0, r1
   d63ca:	9101      	str	r1, [sp, #4]
   d63cc:	f003 fb2c 	bl	d9a28 <strlen>
   d63d0:	9901      	ldr	r1, [sp, #4]
   d63d2:	4602      	mov	r2, r0
   d63d4:	4620      	mov	r0, r4
   d63d6:	f7ff ffd6 	bl	d6386 <_ZN6String4copyEPKcj>
}
   d63da:	4620      	mov	r0, r4
   d63dc:	b002      	add	sp, #8
   d63de:	bd10      	pop	{r4, pc}

000d63e0 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d63e0:	b538      	push	{r3, r4, r5, lr}
   d63e2:	4605      	mov	r5, r0
	if (buffer) {
   d63e4:	6800      	ldr	r0, [r0, #0]
{
   d63e6:	460c      	mov	r4, r1
	if (buffer) {
   d63e8:	b168      	cbz	r0, d6406 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d63ea:	686a      	ldr	r2, [r5, #4]
   d63ec:	688b      	ldr	r3, [r1, #8]
   d63ee:	429a      	cmp	r2, r3
   d63f0:	d307      	bcc.n	d6402 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d63f2:	6809      	ldr	r1, [r1, #0]
   d63f4:	f003 fb10 	bl	d9a18 <strcpy>
			len = rhs.len;
   d63f8:	68a3      	ldr	r3, [r4, #8]
   d63fa:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d63fc:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d63fe:	60a3      	str	r3, [r4, #8]
}
   d6400:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d6402:	f7ff fd35 	bl	d5e70 <free>
	buffer = rhs.buffer;
   d6406:	6823      	ldr	r3, [r4, #0]
   d6408:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d640a:	6863      	ldr	r3, [r4, #4]
   d640c:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d640e:	68a3      	ldr	r3, [r4, #8]
   d6410:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d6412:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d6414:	e9c4 3300 	strd	r3, r3, [r4]
   d6418:	e7f1      	b.n	d63fe <_ZN6String4moveERS_+0x1e>

000d641a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d641a:	4288      	cmp	r0, r1
{
   d641c:	b510      	push	{r4, lr}
   d641e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6420:	d005      	beq.n	d642e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6422:	680b      	ldr	r3, [r1, #0]
   d6424:	b12b      	cbz	r3, d6432 <_ZN6StringaSERKS_+0x18>
   d6426:	688a      	ldr	r2, [r1, #8]
   d6428:	4619      	mov	r1, r3
   d642a:	f7ff ffac 	bl	d6386 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d642e:	4620      	mov	r0, r4
   d6430:	bd10      	pop	{r4, pc}
	else invalidate();
   d6432:	f7ff ff7d 	bl	d6330 <_ZN6String10invalidateEv>
   d6436:	e7fa      	b.n	d642e <_ZN6StringaSERKS_+0x14>

000d6438 <_ZN6StringaSEO15StringSumHelper>:
	return *this;
}

String & String::operator = (StringSumHelper &&rval)
{
	if (this != &rval) move(rval);
   d6438:	4288      	cmp	r0, r1
{
   d643a:	b510      	push	{r4, lr}
   d643c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d643e:	d001      	beq.n	d6444 <_ZN6StringaSEO15StringSumHelper+0xc>
   d6440:	f7ff ffce 	bl	d63e0 <_ZN6String4moveERS_>
	return *this;
}
   d6444:	4620      	mov	r0, r4
   d6446:	bd10      	pop	{r4, pc}

000d6448 <_ZN6StringaSEPKc>:
#endif

String & String::operator = (const char *cstr)
{
   d6448:	b513      	push	{r0, r1, r4, lr}
   d644a:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d644c:	b159      	cbz	r1, d6466 <_ZN6StringaSEPKc+0x1e>
   d644e:	4608      	mov	r0, r1
   d6450:	9101      	str	r1, [sp, #4]
   d6452:	f003 fae9 	bl	d9a28 <strlen>
   d6456:	9901      	ldr	r1, [sp, #4]
   d6458:	4602      	mov	r2, r0
   d645a:	4620      	mov	r0, r4
   d645c:	f7ff ff93 	bl	d6386 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6460:	4620      	mov	r0, r4
   d6462:	b002      	add	sp, #8
   d6464:	bd10      	pop	{r4, pc}
	else invalidate();
   d6466:	f7ff ff63 	bl	d6330 <_ZN6String10invalidateEv>
   d646a:	e7f9      	b.n	d6460 <_ZN6StringaSEPKc+0x18>

000d646c <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d646c:	b510      	push	{r4, lr}
   d646e:	4604      	mov	r4, r0
   d6470:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d6472:	2300      	movs	r3, #0
	capacity = 0;
   d6474:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d6478:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d647a:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d647c:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d647e:	a901      	add	r1, sp, #4
   d6480:	f7ff ff2a 	bl	d62d8 <itoa>
	*this = buf;
   d6484:	a901      	add	r1, sp, #4
   d6486:	4620      	mov	r0, r4
   d6488:	f7ff ffde 	bl	d6448 <_ZN6StringaSEPKc>
}
   d648c:	4620      	mov	r0, r4
   d648e:	b00a      	add	sp, #40	; 0x28
   d6490:	bd10      	pop	{r4, pc}

000d6492 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   d6492:	b510      	push	{r4, lr}
   d6494:	4604      	mov	r4, r0
   d6496:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d6498:	2300      	movs	r3, #0
	capacity = 0;
   d649a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d649e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d64a0:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   d64a2:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   d64a4:	a901      	add	r1, sp, #4
   d64a6:	f7ff fea8 	bl	d61fa <ltoa>
	*this = buf;
   d64aa:	a901      	add	r1, sp, #4
   d64ac:	4620      	mov	r0, r4
   d64ae:	f7ff ffcb 	bl	d6448 <_ZN6StringaSEPKc>
}
   d64b2:	4620      	mov	r0, r4
   d64b4:	b00a      	add	sp, #40	; 0x28
   d64b6:	bd10      	pop	{r4, pc}

000d64b8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d64b8:	b570      	push	{r4, r5, r6, lr}
   d64ba:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d64bc:	460e      	mov	r6, r1
   d64be:	b909      	cbnz	r1, d64c4 <_ZN6String6concatEPKcj+0xc>
   d64c0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d64c2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d64c4:	b16a      	cbz	r2, d64e2 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d64c6:	6884      	ldr	r4, [r0, #8]
   d64c8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d64ca:	4621      	mov	r1, r4
   d64cc:	f7ff ff47 	bl	d635e <_ZN6String7reserveEj>
   d64d0:	2800      	cmp	r0, #0
   d64d2:	d0f5      	beq.n	d64c0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d64d4:	6828      	ldr	r0, [r5, #0]
   d64d6:	68ab      	ldr	r3, [r5, #8]
   d64d8:	4631      	mov	r1, r6
   d64da:	4418      	add	r0, r3
   d64dc:	f003 fa9c 	bl	d9a18 <strcpy>
	len = newlen;
   d64e0:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d64e2:	2001      	movs	r0, #1
   d64e4:	e7ed      	b.n	d64c2 <_ZN6String6concatEPKcj+0xa>

000d64e6 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d64e6:	688a      	ldr	r2, [r1, #8]
   d64e8:	6809      	ldr	r1, [r1, #0]
   d64ea:	f7ff bfe5 	b.w	d64b8 <_ZN6String6concatEPKcj>

000d64ee <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d64ee:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d64f0:	2300      	movs	r3, #0
	buf[0] = c;
   d64f2:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d64f6:	2201      	movs	r2, #1
   d64f8:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d64fa:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d64fe:	f7ff ffdb 	bl	d64b8 <_ZN6String6concatEPKcj>
}
   d6502:	b003      	add	sp, #12
   d6504:	f85d fb04 	ldr.w	pc, [sp], #4

000d6508 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6508:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d650a:	688a      	ldr	r2, [r1, #8]
   d650c:	6809      	ldr	r1, [r1, #0]
{
   d650e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6510:	f7ff ffd2 	bl	d64b8 <_ZN6String6concatEPKcj>
   d6514:	b910      	cbnz	r0, d651c <_ZplRK15StringSumHelperRK6String+0x14>
   d6516:	4620      	mov	r0, r4
   d6518:	f7ff ff0a 	bl	d6330 <_ZN6String10invalidateEv>
	return a;
}
   d651c:	4620      	mov	r0, r4
   d651e:	bd10      	pop	{r4, pc}

000d6520 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d6520:	b513      	push	{r0, r1, r4, lr}
   d6522:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d6524:	b929      	cbnz	r1, d6532 <_ZplRK15StringSumHelperPKc+0x12>
   d6526:	4620      	mov	r0, r4
   d6528:	f7ff ff02 	bl	d6330 <_ZN6String10invalidateEv>
	return a;
}
   d652c:	4620      	mov	r0, r4
   d652e:	b002      	add	sp, #8
   d6530:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d6532:	4608      	mov	r0, r1
   d6534:	9101      	str	r1, [sp, #4]
   d6536:	f003 fa77 	bl	d9a28 <strlen>
   d653a:	9901      	ldr	r1, [sp, #4]
   d653c:	4602      	mov	r2, r0
   d653e:	4620      	mov	r0, r4
   d6540:	f7ff ffba 	bl	d64b8 <_ZN6String6concatEPKcj>
   d6544:	2800      	cmp	r0, #0
   d6546:	d0ee      	beq.n	d6526 <_ZplRK15StringSumHelperPKc+0x6>
   d6548:	e7f0      	b.n	d652c <_ZplRK15StringSumHelperPKc+0xc>

000d654a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d654a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d654c:	6882      	ldr	r2, [r0, #8]
   d654e:	b93a      	cbnz	r2, d6560 <_ZNK6String6equalsEPKc+0x16>
   d6550:	b121      	cbz	r1, d655c <_ZNK6String6equalsEPKc+0x12>
   d6552:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d6554:	fab0 f080 	clz	r0, r0
   d6558:	0940      	lsrs	r0, r0, #5
   d655a:	e000      	b.n	d655e <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d655c:	2001      	movs	r0, #1
}
   d655e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6560:	6800      	ldr	r0, [r0, #0]
   d6562:	b909      	cbnz	r1, d6568 <_ZNK6String6equalsEPKc+0x1e>
   d6564:	7800      	ldrb	r0, [r0, #0]
   d6566:	e7f5      	b.n	d6554 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d6568:	f003 fa4c 	bl	d9a04 <strcmp>
   d656c:	e7f2      	b.n	d6554 <_ZNK6String6equalsEPKc+0xa>

000d656e <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d656e:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d6570:	6883      	ldr	r3, [r0, #8]
   d6572:	4293      	cmp	r3, r2
   d6574:	d907      	bls.n	d6586 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d6576:	6804      	ldr	r4, [r0, #0]
   d6578:	6809      	ldr	r1, [r1, #0]
   d657a:	18a0      	adds	r0, r4, r2
   d657c:	f003 fa7c 	bl	d9a78 <strstr>
	if (found == NULL) return -1;
   d6580:	b108      	cbz	r0, d6586 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d6582:	1b00      	subs	r0, r0, r4
}
   d6584:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   d6586:	f04f 30ff 	mov.w	r0, #4294967295
   d658a:	e7fb      	b.n	d6584 <_ZNK6String7indexOfERKS_j+0x16>

000d658c <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   d658c:	2200      	movs	r2, #0
   d658e:	f7ff bfee 	b.w	d656e <_ZNK6String7indexOfERKS_j>
	...

000d6594 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d6594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d6596:	429a      	cmp	r2, r3
{
   d6598:	460f      	mov	r7, r1
   d659a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d659c:	490c      	ldr	r1, [pc, #48]	; (d65d0 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   d659e:	bf88      	it	hi
   d65a0:	4613      	movhi	r3, r2
{
   d65a2:	4614      	mov	r4, r2
   d65a4:	4606      	mov	r6, r0
	if (left > right) {
   d65a6:	bf84      	itt	hi
   d65a8:	462c      	movhi	r4, r5
   d65aa:	461d      	movhi	r5, r3
	String out;
   d65ac:	f7ff ff04 	bl	d63b8 <_ZN6StringC1EPKc>
	if (left > len) return out;
   d65b0:	68ba      	ldr	r2, [r7, #8]
   d65b2:	42a2      	cmp	r2, r4
   d65b4:	d30a      	bcc.n	d65cc <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d65b6:	6839      	ldr	r1, [r7, #0]
   d65b8:	42aa      	cmp	r2, r5
   d65ba:	bf94      	ite	ls
   d65bc:	ebc4 0202 	rsbls	r2, r4, r2
   d65c0:	ebc4 0205 	rsbhi	r2, r4, r5
   d65c4:	4421      	add	r1, r4
   d65c6:	4630      	mov	r0, r6
   d65c8:	f7ff fedd 	bl	d6386 <_ZN6String4copyEPKcj>
	return out;
}
   d65cc:	4630      	mov	r0, r6
   d65ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d65d0:	000d9cb3 	.word	0x000d9cb3

000d65d4 <_ZNK6String9substringEj>:
{
   d65d4:	b510      	push	{r4, lr}
   d65d6:	4604      	mov	r4, r0
	return substring(left, len);
   d65d8:	688b      	ldr	r3, [r1, #8]
   d65da:	f7ff ffdb 	bl	d6594 <_ZNK6String9substringEjj>
}
   d65de:	4620      	mov	r0, r4
   d65e0:	bd10      	pop	{r4, pc}

000d65e2 <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
   d65e2:	b538      	push	{r3, r4, r5, lr}
   d65e4:	4604      	mov	r4, r0
   d65e6:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
   d65e8:	68a3      	ldr	r3, [r4, #8]
   d65ea:	428b      	cmp	r3, r1
   d65ec:	d911      	bls.n	d6612 <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
   d65ee:	b182      	cbz	r2, d6612 <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
   d65f0:	4411      	add	r1, r2
   d65f2:	428b      	cmp	r3, r1
   d65f4:	bf38      	it	cc
   d65f6:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
   d65f8:	6825      	ldr	r5, [r4, #0]
	len = len - count;
   d65fa:	1a99      	subs	r1, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
   d65fc:	1813      	adds	r3, r2, r0
	len = len - count;
   d65fe:	60a1      	str	r1, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
   d6600:	1a0a      	subs	r2, r1, r0
   d6602:	18e9      	adds	r1, r5, r3
   d6604:	4428      	add	r0, r5
   d6606:	f003 f9b7 	bl	d9978 <memmove>
	buffer[len] = 0;
   d660a:	6822      	ldr	r2, [r4, #0]
   d660c:	68a3      	ldr	r3, [r4, #8]
   d660e:	2100      	movs	r1, #0
   d6610:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6612:	4620      	mov	r0, r4
   d6614:	bd38      	pop	{r3, r4, r5, pc}

000d6616 <_ZN6String6removeEj>:
        int count = len - index;
   d6616:	6882      	ldr	r2, [r0, #8]
        return remove(index, count);
   d6618:	1a52      	subs	r2, r2, r1
   d661a:	f7ff bfe2 	b.w	d65e2 <_ZN6String6removeEjj>

000d661e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d661e:	4770      	bx	lr

000d6620 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d6620:	4770      	bx	lr

000d6622 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d6622:	4770      	bx	lr

000d6624 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6624:	4770      	bx	lr
	...

000d6628 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6628:	4b06      	ldr	r3, [pc, #24]	; (d6644 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d662a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d662c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d662e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6632:	d005      	beq.n	d6640 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6634:	4608      	mov	r0, r1
   d6636:	f002 fb47 	bl	d8cc8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d663a:	2800      	cmp	r0, #0
	return nullptr;
   d663c:	bf08      	it	eq
   d663e:	2400      	moveq	r4, #0
      }
   d6640:	4620      	mov	r0, r4
   d6642:	bd10      	pop	{r4, pc}
   d6644:	000da1cc 	.word	0x000da1cc

000d6648 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6648:	4b06      	ldr	r3, [pc, #24]	; (d6664 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d664a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d664c:	b510      	push	{r4, lr}
   d664e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6652:	d005      	beq.n	d6660 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6654:	4608      	mov	r0, r1
   d6656:	f002 fb37 	bl	d8cc8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d665a:	2800      	cmp	r0, #0
	return nullptr;
   d665c:	bf08      	it	eq
   d665e:	2400      	moveq	r4, #0
      }
   d6660:	4620      	mov	r0, r4
   d6662:	bd10      	pop	{r4, pc}
   d6664:	000da1cc 	.word	0x000da1cc

000d6668 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6668:	4b06      	ldr	r3, [pc, #24]	; (d6684 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d666a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d666c:	b510      	push	{r4, lr}
   d666e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6672:	d005      	beq.n	d6680 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6674:	4608      	mov	r0, r1
   d6676:	f002 fb27 	bl	d8cc8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d667a:	2800      	cmp	r0, #0
	return nullptr;
   d667c:	bf08      	it	eq
   d667e:	2400      	moveq	r4, #0
      }
   d6680:	4620      	mov	r0, r4
   d6682:	bd10      	pop	{r4, pc}
   d6684:	000da1cc 	.word	0x000da1cc

000d6688 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6688:	b510      	push	{r4, lr}
   d668a:	2168      	movs	r1, #104	; 0x68
   d668c:	4604      	mov	r4, r0
   d668e:	f002 fb12 	bl	d8cb6 <_ZdlPvj>
   d6692:	4620      	mov	r0, r4
   d6694:	bd10      	pop	{r4, pc}

000d6696 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d6696:	b510      	push	{r4, lr}
   d6698:	2128      	movs	r1, #40	; 0x28
   d669a:	4604      	mov	r4, r0
   d669c:	f002 fb0b 	bl	d8cb6 <_ZdlPvj>
   d66a0:	4620      	mov	r0, r4
   d66a2:	bd10      	pop	{r4, pc}

000d66a4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d66a4:	b510      	push	{r4, lr}
   d66a6:	2130      	movs	r1, #48	; 0x30
   d66a8:	4604      	mov	r4, r0
   d66aa:	f002 fb04 	bl	d8cb6 <_ZdlPvj>
   d66ae:	4620      	mov	r0, r4
   d66b0:	bd10      	pop	{r4, pc}

000d66b2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d66b2:	f7fd bcf4 	b.w	d409e <_ZdlPv>

000d66b6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d66b6:	f7fd bcf2 	b.w	d409e <_ZdlPv>

000d66ba <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d66ba:	f7fd bcf0 	b.w	d409e <_ZdlPv>

000d66be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d66be:	b510      	push	{r4, lr}
          _M_dispose();
   d66c0:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d66c2:	4604      	mov	r4, r0
          _M_dispose();
   d66c4:	689b      	ldr	r3, [r3, #8]
   d66c6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d66c8:	68a3      	ldr	r3, [r4, #8]
   d66ca:	3b01      	subs	r3, #1
   d66cc:	60a3      	str	r3, [r4, #8]
   d66ce:	b92b      	cbnz	r3, d66dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d66d0:	6823      	ldr	r3, [r4, #0]
   d66d2:	4620      	mov	r0, r4
   d66d4:	68db      	ldr	r3, [r3, #12]
    }
   d66d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d66da:	4718      	bx	r3
    }
   d66dc:	bd10      	pop	{r4, pc}

000d66de <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d66de:	b510      	push	{r4, lr}
   d66e0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d66e2:	6800      	ldr	r0, [r0, #0]
   d66e4:	b108      	cbz	r0, d66ea <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d66e6:	f7ff f945 	bl	d5974 <os_mutex_recursive_destroy>
    }
   d66ea:	4620      	mov	r0, r4
   d66ec:	bd10      	pop	{r4, pc}
	...

000d66f0 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d66f0:	b510      	push	{r4, lr}
        mutex_.lock();
   d66f2:	4b04      	ldr	r3, [pc, #16]	; (d6704 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d66f4:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d66f6:	6818      	ldr	r0, [r3, #0]
   d66f8:	f7ff f944 	bl	d5984 <os_mutex_recursive_lock>
        locked_ = true;
   d66fc:	2301      	movs	r3, #1
   d66fe:	7023      	strb	r3, [r4, #0]
    }
   d6700:	bd10      	pop	{r4, pc}
   d6702:	bf00      	nop
   d6704:	2003e65c 	.word	0x2003e65c

000d6708 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d6708:	b510      	push	{r4, lr}
        mutex_.unlock();
   d670a:	4b04      	ldr	r3, [pc, #16]	; (d671c <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d670c:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d670e:	6818      	ldr	r0, [r3, #0]
   d6710:	f7ff f940 	bl	d5994 <os_mutex_recursive_unlock>
        locked_ = false;
   d6714:	2300      	movs	r3, #0
   d6716:	7023      	strb	r3, [r4, #0]
    }
   d6718:	bd10      	pop	{r4, pc}
   d671a:	bf00      	nop
   d671c:	2003e65c 	.word	0x2003e65c

000d6720 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d6720:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6722:	2500      	movs	r5, #0
   d6724:	1cec      	adds	r4, r5, #3
   d6726:	428c      	cmp	r4, r1
   d6728:	d80d      	bhi.n	d6746 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d672a:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d672c:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d672e:	5d87      	ldrb	r7, [r0, r6]
   d6730:	4297      	cmp	r7, r2
   d6732:	d105      	bne.n	d6740 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d6734:	4426      	add	r6, r4
   d6736:	42b1      	cmp	r1, r6
   d6738:	d305      	bcc.n	d6746 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d673a:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d673c:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d673e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d6740:	3401      	adds	r4, #1
   d6742:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6744:	e7ee      	b.n	d6724 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d6746:	2000      	movs	r0, #0
   d6748:	e7f9      	b.n	d673e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d674a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d674a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d674e:	4604      	mov	r4, r0
   d6750:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d6754:	461e      	mov	r6, r3
   d6756:	4689      	mov	r9, r1
   d6758:	ab01      	add	r3, sp, #4
   d675a:	4690      	mov	r8, r2
   d675c:	460a      	mov	r2, r1
   d675e:	6a01      	ldr	r1, [r0, #32]
   d6760:	f7ff ffde 	bl	d6720 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d6764:	6a25      	ldr	r5, [r4, #32]
   d6766:	1cb3      	adds	r3, r6, #2
   d6768:	bb17      	cbnz	r7, d67b0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d676a:	b308      	cbz	r0, d67b0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d676c:	195f      	adds	r7, r3, r5
   d676e:	1a3f      	subs	r7, r7, r0
   d6770:	2f1f      	cmp	r7, #31
   d6772:	d819      	bhi.n	d67a8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6774:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d6778:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d677c:	eba5 0209 	sub.w	r2, r5, r9
   d6780:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d6782:	eb00 0109 	add.w	r1, r0, r9
   d6786:	eb06 000a 	add.w	r0, r6, sl
   d678a:	b292      	uxth	r2, r2
   d678c:	4421      	add	r1, r4
   d678e:	4420      	add	r0, r4
   d6790:	f003 f8f2 	bl	d9978 <memmove>
            selfData_[offset] = len + 1;
   d6794:	1c73      	adds	r3, r6, #1
   d6796:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d679a:	4632      	mov	r2, r6
   d679c:	4641      	mov	r1, r8
   d679e:	eb04 000a 	add.w	r0, r4, sl
   d67a2:	f003 f8db 	bl	d995c <memcpy>
            selfLen_ = staLen + len + 2;
   d67a6:	6227      	str	r7, [r4, #32]
}
   d67a8:	6a20      	ldr	r0, [r4, #32]
   d67aa:	b002      	add	sp, #8
   d67ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d67b0:	442b      	add	r3, r5
   d67b2:	2b1f      	cmp	r3, #31
   d67b4:	d8f8      	bhi.n	d67a8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d67b6:	1c73      	adds	r3, r6, #1
   d67b8:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d67ba:	1ca8      	adds	r0, r5, #2
   d67bc:	4425      	add	r5, r4
   d67be:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d67c0:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d67c2:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d67c6:	4641      	mov	r1, r8
   d67c8:	4420      	add	r0, r4
   d67ca:	f003 f8c7 	bl	d995c <memcpy>
        selfLen_ += len;
   d67ce:	6a23      	ldr	r3, [r4, #32]
   d67d0:	4433      	add	r3, r6
   d67d2:	6223      	str	r3, [r4, #32]
   d67d4:	e7e8      	b.n	d67a8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
	...

000d67d8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d67d8:	4a02      	ldr	r2, [pc, #8]	; (d67e4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d67da:	2100      	movs	r1, #0
   d67dc:	200a      	movs	r0, #10
   d67de:	f7ff ba51 	b.w	d5c84 <panic_>
   d67e2:	bf00      	nop
   d67e4:	000d57dd 	.word	0x000d57dd

000d67e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d67e8:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d67ea:	b538      	push	{r3, r4, r5, lr}
   d67ec:	4604      	mov	r4, r0
	  switch (__op)
   d67ee:	d007      	beq.n	d6800 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x18>
   d67f0:	2a03      	cmp	r2, #3
   d67f2:	d011      	beq.n	d6818 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x30>
   d67f4:	2a01      	cmp	r2, #1
   d67f6:	d101      	bne.n	d67fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d67f8:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d67fa:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d67fc:	2000      	movs	r0, #0
   d67fe:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6800:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d6802:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6804:	f7fd fc47 	bl	d4096 <_Znwj>
   d6808:	4603      	mov	r3, r0
   d680a:	2800      	cmp	r0, #0
   d680c:	d0f5      	beq.n	d67fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
   d680e:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6812:	e883 0003 	stmia.w	r3, {r0, r1}
   d6816:	e7f0      	b.n	d67fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d6818:	6800      	ldr	r0, [r0, #0]
   d681a:	2800      	cmp	r0, #0
   d681c:	d0ee      	beq.n	d67fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
   d681e:	2108      	movs	r1, #8
   d6820:	f002 fa49 	bl	d8cb6 <_ZdlPvj>
   d6824:	e7ea      	b.n	d67fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>

000d6826 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	  switch (__op)
   d6826:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6828:	b538      	push	{r3, r4, r5, lr}
   d682a:	4604      	mov	r4, r0
	  switch (__op)
   d682c:	d007      	beq.n	d683e <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
   d682e:	2a03      	cmp	r2, #3
   d6830:	d011      	beq.n	d6856 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
   d6832:	2a01      	cmp	r2, #1
   d6834:	d101      	bne.n	d683a <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6836:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d6838:	6023      	str	r3, [r4, #0]
	}
   d683a:	2000      	movs	r0, #0
   d683c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d683e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d6840:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6842:	f7fd fc28 	bl	d4096 <_Znwj>
   d6846:	4603      	mov	r3, r0
   d6848:	2800      	cmp	r0, #0
   d684a:	d0f5      	beq.n	d6838 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
   d684c:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6850:	e883 0003 	stmia.w	r3, {r0, r1}
   d6854:	e7f0      	b.n	d6838 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d6856:	6800      	ldr	r0, [r0, #0]
   d6858:	2800      	cmp	r0, #0
   d685a:	d0ee      	beq.n	d683a <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
   d685c:	2108      	movs	r1, #8
   d685e:	f002 fa2a 	bl	d8cb6 <_ZdlPvj>
   d6862:	e7ea      	b.n	d683a <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

000d6864 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6864:	b430      	push	{r4, r5}
   d6866:	460d      	mov	r5, r1
   d6868:	4611      	mov	r1, r2
   d686a:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   d686c:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d686e:	6809      	ldr	r1, [r1, #0]
   d6870:	6828      	ldr	r0, [r5, #0]
   d6872:	e9d3 4300 	ldrd	r4, r3, [r3]
   d6876:	46a4      	mov	ip, r4
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d6878:	bc30      	pop	{r4, r5}
   d687a:	4760      	bx	ip

000d687c <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d687c:	4603      	mov	r3, r0
   d687e:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   d6880:	681b      	ldr	r3, [r3, #0]
   d6882:	e9d3 2100 	ldrd	r2, r1, [r3]
   d6886:	4710      	bx	r2

000d6888 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d6888:	b510      	push	{r4, lr}
      if (_M_manager)
   d688a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d688c:	4604      	mov	r4, r0
      if (_M_manager)
   d688e:	b113      	cbz	r3, d6896 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6890:	2203      	movs	r2, #3
   d6892:	4601      	mov	r1, r0
   d6894:	4798      	blx	r3
    }
   d6896:	4620      	mov	r0, r4
   d6898:	bd10      	pop	{r4, pc}

000d689a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d689a:	b510      	push	{r4, lr}
   d689c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d689e:	3058      	adds	r0, #88	; 0x58
   d68a0:	f7ff fff2 	bl	d6888 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   d68a4:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   d68a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d68ac:	f7ff bd39 	b.w	d6322 <_ZN6StringD1Ev>

000d68b0 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d68b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d68b4:	b2da      	uxtb	r2, r3
   d68b6:	2a09      	cmp	r2, #9
   d68b8:	d801      	bhi.n	d68be <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d68ba:	4618      	mov	r0, r3
   d68bc:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d68be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d68c2:	2b05      	cmp	r3, #5
   d68c4:	d801      	bhi.n	d68ca <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d68c6:	3857      	subs	r0, #87	; 0x57
   d68c8:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d68ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d68ce:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d68d0:	bf94      	ite	ls
   d68d2:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d68d4:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d68d8:	4770      	bx	lr

000d68da <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d68da:	b510      	push	{r4, lr}
            locked_(false) {
   d68dc:	2300      	movs	r3, #0
    WiringBleLock() :
   d68de:	4604      	mov	r4, r0
            locked_(false) {
   d68e0:	7003      	strb	r3, [r0, #0]
        lock();
   d68e2:	f7ff ff05 	bl	d66f0 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d68e6:	4620      	mov	r0, r4
   d68e8:	bd10      	pop	{r4, pc}

000d68ea <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d68ea:	b510      	push	{r4, lr}
        if (locked_) {
   d68ec:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d68ee:	4604      	mov	r4, r0
        if (locked_) {
   d68f0:	b10b      	cbz	r3, d68f6 <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d68f2:	f7ff ff09 	bl	d6708 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d68f6:	4620      	mov	r0, r4
   d68f8:	bd10      	pop	{r4, pc}

000d68fa <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d68fa:	b082      	sub	sp, #8
   d68fc:	4603      	mov	r3, r0
    address_ = addr;
   d68fe:	6808      	ldr	r0, [r1, #0]
   d6900:	6849      	ldr	r1, [r1, #4]
   d6902:	466a      	mov	r2, sp
   d6904:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d6906:	466a      	mov	r2, sp
   d6908:	ca03      	ldmia	r2!, {r0, r1}
   d690a:	6018      	str	r0, [r3, #0]
}
   d690c:	4618      	mov	r0, r3
    address_ = addr.address_;
   d690e:	6059      	str	r1, [r3, #4]
}
   d6910:	b002      	add	sp, #8
   d6912:	4770      	bx	lr

000d6914 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d6914:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d6916:	7982      	ldrb	r2, [r0, #6]
   d6918:	798b      	ldrb	r3, [r1, #6]
   d691a:	429a      	cmp	r2, r3
   d691c:	d106      	bne.n	d692c <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d691e:	2206      	movs	r2, #6
   d6920:	f003 f80e 	bl	d9940 <memcmp>
   d6924:	fab0 f080 	clz	r0, r0
   d6928:	0940      	lsrs	r0, r0, #5
}
   d692a:	bd08      	pop	{r3, pc}
    return false;
   d692c:	2000      	movs	r0, #0
   d692e:	e7fc      	b.n	d692a <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d6930 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d6930:	f04f 33ff 	mov.w	r3, #4294967295
   d6934:	6003      	str	r3, [r0, #0]
   d6936:	8083      	strh	r3, [r0, #4]
}
   d6938:	2000      	movs	r0, #0
   d693a:	4770      	bx	lr

000d693c <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d693c:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d693e:	b508      	push	{r3, lr}
        : address_{} {
   d6940:	6001      	str	r1, [r0, #0]
   d6942:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d6944:	4602      	mov	r2, r0
    clear();
   d6946:	f7ff fff3 	bl	d6930 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d694a:	7191      	strb	r1, [r2, #6]
}
   d694c:	4610      	mov	r0, r2
   d694e:	bd08      	pop	{r3, pc}

000d6950 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d6950:	2201      	movs	r2, #1
   d6952:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6954:	4a06      	ldr	r2, [pc, #24]	; (d6970 <_ZN8particle7BleUuidC1Ev+0x20>)
   d6956:	6811      	ldr	r1, [r2, #0]
   d6958:	6001      	str	r1, [r0, #0]
   d695a:	6851      	ldr	r1, [r2, #4]
   d695c:	6041      	str	r1, [r0, #4]
   d695e:	8911      	ldrh	r1, [r2, #8]
   d6960:	7a92      	ldrb	r2, [r2, #10]
   d6962:	7282      	strb	r2, [r0, #10]
   d6964:	2200      	movs	r2, #0
   d6966:	8101      	strh	r1, [r0, #8]
   d6968:	f8c0 200b 	str.w	r2, [r0, #11]
   d696c:	73c2      	strb	r2, [r0, #15]
}
   d696e:	4770      	bx	lr
   d6970:	000da1d4 	.word	0x000da1d4

000d6974 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d6974:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d6976:	690b      	ldr	r3, [r1, #16]
   d6978:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d697a:	f101 0210 	add.w	r2, r1, #16
   d697e:	4603      	mov	r3, r0
   d6980:	f851 4b04 	ldr.w	r4, [r1], #4
   d6984:	f843 4b04 	str.w	r4, [r3], #4
   d6988:	4291      	cmp	r1, r2
   d698a:	d1f9      	bne.n	d6980 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d698c:	bd10      	pop	{r4, pc}

000d698e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d698e:	b510      	push	{r4, lr}
    if (uuid128) {
   d6990:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d6992:	4604      	mov	r4, r0
    if (uuid128) {
   d6994:	b1b1      	cbz	r1, d69c4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d6996:	2a01      	cmp	r2, #1
   d6998:	f101 0210 	add.w	r2, r1, #16
   d699c:	d10a      	bne.n	d69b4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d699e:	4601      	mov	r1, r0
   d69a0:	f853 0b04 	ldr.w	r0, [r3], #4
   d69a4:	f841 0b04 	str.w	r0, [r1], #4
   d69a8:	4293      	cmp	r3, r2
   d69aa:	d1f9      	bne.n	d69a0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d69ac:	2301      	movs	r3, #1
   d69ae:	6123      	str	r3, [r4, #16]
}
   d69b0:	4620      	mov	r0, r4
   d69b2:	bd10      	pop	{r4, pc}
   d69b4:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d69b6:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d69ba:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d69be:	429a      	cmp	r2, r3
   d69c0:	d1f9      	bne.n	d69b6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d69c2:	e7f3      	b.n	d69ac <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d69c4:	2210      	movs	r2, #16
   d69c6:	f002 fff1 	bl	d99ac <memset>
   d69ca:	e7f1      	b.n	d69b0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d69cc <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d69cc:	b538      	push	{r3, r4, r5, lr}
   d69ce:	4604      	mov	r4, r0
   d69d0:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d69d2:	461a      	mov	r2, r3
   d69d4:	f7ff ffdb 	bl	d698e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d69d8:	81a5      	strh	r5, [r4, #12]
}
   d69da:	4620      	mov	r0, r4
   d69dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d69e0 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d69e0:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d69e2:	6902      	ldr	r2, [r0, #16]
   d69e4:	b922      	cbnz	r2, d69f0 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d69e6:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d69e8:	3800      	subs	r0, #0
   d69ea:	bf18      	it	ne
   d69ec:	2001      	movne	r0, #1
}
   d69ee:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d69f0:	4902      	ldr	r1, [pc, #8]	; (d69fc <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d69f2:	2210      	movs	r2, #16
   d69f4:	f002 ffa4 	bl	d9940 <memcmp>
   d69f8:	e7f6      	b.n	d69e8 <_ZNK8particle7BleUuid7isValidEv+0x8>
   d69fa:	bf00      	nop
   d69fc:	000da1f4 	.word	0x000da1f4

000d6a00 <_ZNK8particle7BleUuid4typeEv>:
}
   d6a00:	6900      	ldr	r0, [r0, #16]
   d6a02:	4770      	bx	lr

000d6a04 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d6a04:	b538      	push	{r3, r4, r5, lr}
   d6a06:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d6a08:	2214      	movs	r2, #20
   d6a0a:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d6a0c:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d6a0e:	f002 ffcd 	bl	d99ac <memset>
    if (type_ == BleUuidType::SHORT) {
   d6a12:	6923      	ldr	r3, [r4, #16]
   d6a14:	b93b      	cbnz	r3, d6a26 <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d6a16:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d6a18:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d6a1a:	7b23      	ldrb	r3, [r4, #12]
   d6a1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d6a20:	802b      	strh	r3, [r5, #0]
}
   d6a22:	4628      	mov	r0, r5
   d6a24:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d6a26:	2301      	movs	r3, #1
   d6a28:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6a2a:	f104 0210 	add.w	r2, r4, #16
   d6a2e:	462b      	mov	r3, r5
   d6a30:	f854 1b04 	ldr.w	r1, [r4], #4
   d6a34:	f843 1b04 	str.w	r1, [r3], #4
   d6a38:	4294      	cmp	r4, r2
   d6a3a:	d1f9      	bne.n	d6a30 <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d6a3c:	e7f1      	b.n	d6a22 <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d6a3e <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d6a3e:	7b42      	ldrb	r2, [r0, #13]
   d6a40:	7b00      	ldrb	r0, [r0, #12]
}
   d6a42:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d6a46:	4770      	bx	lr

000d6a48 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d6a48:	4770      	bx	lr

000d6a4a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d6a4a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d6a4c:	6902      	ldr	r2, [r0, #16]
   d6a4e:	690b      	ldr	r3, [r1, #16]
   d6a50:	429a      	cmp	r2, r3
   d6a52:	d106      	bne.n	d6a62 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d6a54:	2210      	movs	r2, #16
   d6a56:	f002 ff73 	bl	d9940 <memcmp>
   d6a5a:	fab0 f080 	clz	r0, r0
   d6a5e:	0940      	lsrs	r0, r0, #5
}
   d6a60:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d6a62:	2000      	movs	r0, #0
   d6a64:	e7fc      	b.n	d6a60 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d6a68 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d6a68:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d6a6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d6a6e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6a70:	4b32      	ldr	r3, [pc, #200]	; (d6b3c <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d6a72:	681a      	ldr	r2, [r3, #0]
   d6a74:	6002      	str	r2, [r0, #0]
   d6a76:	685a      	ldr	r2, [r3, #4]
   d6a78:	6042      	str	r2, [r0, #4]
   d6a7a:	2500      	movs	r5, #0
   d6a7c:	891a      	ldrh	r2, [r3, #8]
   d6a7e:	7a9b      	ldrb	r3, [r3, #10]
   d6a80:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d6a82:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6a84:	7283      	strb	r3, [r0, #10]
   d6a86:	f8c0 500b 	str.w	r5, [r0, #11]
   d6a8a:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d6a8c:	460e      	mov	r6, r1
   d6a8e:	b321      	cbz	r1, d6ada <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d6a90:	2124      	movs	r1, #36	; 0x24
   d6a92:	4630      	mov	r0, r6
   d6a94:	f002 ffe3 	bl	d9a5e <strnlen>
   d6a98:	2804      	cmp	r0, #4
   d6a9a:	d121      	bne.n	d6ae0 <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d6a9c:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6aa0:	af01      	add	r7, sp, #4
   d6aa2:	1cb5      	adds	r5, r6, #2
   d6aa4:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d6aa6:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d6aaa:	f7ff ff01 	bl	d68b0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d6aae:	f1b0 0800 	subs.w	r8, r0, #0
   d6ab2:	db10      	blt.n	d6ad6 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d6ab4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d6ab8:	f7ff fefa 	bl	d68b0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d6abc:	2800      	cmp	r0, #0
   d6abe:	db0a      	blt.n	d6ad6 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d6ac0:	3502      	adds	r5, #2
   d6ac2:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d6ac6:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d6ac8:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d6acc:	d1eb      	bne.n	d6aa6 <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d6ace:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d6ad2:	ba5b      	rev16	r3, r3
   d6ad4:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d6ad6:	2300      	movs	r3, #0
   d6ad8:	6123      	str	r3, [r4, #16]
}
   d6ada:	b002      	add	sp, #8
   d6adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d6ae0:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6ae2:	2124      	movs	r1, #36	; 0x24
   d6ae4:	4630      	mov	r0, r6
   d6ae6:	f002 ffba 	bl	d9a5e <strnlen>
   d6aea:	42a8      	cmp	r0, r5
   d6aec:	d806      	bhi.n	d6afc <_ZN8particle7BleUuid9constructEPKc+0x94>
   d6aee:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d6af0:	2300      	movs	r3, #0
    while (len > 0) {
   d6af2:	42bc      	cmp	r4, r7
   d6af4:	d0f1      	beq.n	d6ada <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d6af6:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d6afa:	e7fa      	b.n	d6af2 <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6afc:	2f00      	cmp	r7, #0
   d6afe:	d0ec      	beq.n	d6ada <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d6b00:	5d70      	ldrb	r0, [r6, r5]
   d6b02:	f7ff fed5 	bl	d68b0 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d6b06:	0603      	lsls	r3, r0, #24
   d6b08:	d415      	bmi.n	d6b36 <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d6b0a:	0100      	lsls	r0, r0, #4
   d6b0c:	3f01      	subs	r7, #1
   d6b0e:	fa5f f880 	uxtb.w	r8, r0
   d6b12:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d6b16:	2124      	movs	r1, #36	; 0x24
   d6b18:	4630      	mov	r0, r6
   d6b1a:	f002 ffa0 	bl	d9a5e <strnlen>
   d6b1e:	3501      	adds	r5, #1
   d6b20:	42a8      	cmp	r0, r5
   d6b22:	d908      	bls.n	d6b36 <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d6b24:	5d70      	ldrb	r0, [r6, r5]
   d6b26:	f7ff fec3 	bl	d68b0 <_ZN8particle11hexToNibbleEc>
   d6b2a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d6b2c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d6b2e:	bfa4      	itt	ge
   d6b30:	ea40 0008 	orrge.w	r0, r0, r8
   d6b34:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6b36:	3501      	adds	r5, #1
   d6b38:	e7d3      	b.n	d6ae2 <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d6b3a:	bf00      	nop
   d6b3c:	000da1d4 	.word	0x000da1d4

000d6b40 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d6b40:	b513      	push	{r0, r1, r4, lr}
   d6b42:	4604      	mov	r4, r0
   d6b44:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d6b46:	f7ff ff03 	bl	d6950 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d6b4a:	4620      	mov	r0, r4
   d6b4c:	9901      	ldr	r1, [sp, #4]
   d6b4e:	f7ff ff8b 	bl	d6a68 <_ZN8particle7BleUuid9constructEPKc>
}
   d6b52:	4620      	mov	r0, r4
   d6b54:	b002      	add	sp, #8
   d6b56:	bd10      	pop	{r4, pc}

000d6b58 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d6b58:	b430      	push	{r4, r5}
   d6b5a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d6b5e:	b912      	cbnz	r2, d6b66 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d6b60:	6a00      	ldr	r0, [r0, #32]
}
   d6b62:	bc30      	pop	{r4, r5}
   d6b64:	4770      	bx	lr
   d6b66:	9502      	str	r5, [sp, #8]
   d6b68:	bc30      	pop	{r4, r5}
   d6b6a:	f7ff bdee 	b.w	d674a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d6b6e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d6b6e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6b70:	4604      	mov	r4, r0
          selfLen_(0) {
   d6b72:	4602      	mov	r2, r0
   d6b74:	f100 011f 	add.w	r1, r0, #31
   d6b78:	2300      	movs	r3, #0
   d6b7a:	f802 3b01 	strb.w	r3, [r2], #1
   d6b7e:	4291      	cmp	r1, r2
   d6b80:	d1fb      	bne.n	d6b7a <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d6b82:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6b84:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d6b86:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6b88:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d6b8a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6b8e:	4619      	mov	r1, r3
   d6b90:	f10d 020f 	add.w	r2, sp, #15
   d6b94:	4620      	mov	r0, r4
   d6b96:	f7ff ffdf 	bl	d6b58 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d6b9a:	4620      	mov	r0, r4
   d6b9c:	b004      	add	sp, #16
   d6b9e:	bd10      	pop	{r4, pc}

000d6ba0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d6ba0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d6ba2:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d6ba4:	460e      	mov	r6, r1
   d6ba6:	ab01      	add	r3, sp, #4
   d6ba8:	6a01      	ldr	r1, [r0, #32]
   d6baa:	4604      	mov	r4, r0
   d6bac:	f7ff fdb8 	bl	d6720 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d6bb0:	4605      	mov	r5, r0
   d6bb2:	b178      	cbz	r0, d6bd4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d6bb4:	9801      	ldr	r0, [sp, #4]
   d6bb6:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d6bb8:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d6bba:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d6bbc:	4421      	add	r1, r4
   d6bbe:	1b52      	subs	r2, r2, r5
   d6bc0:	4420      	add	r0, r4
   d6bc2:	f002 fecb 	bl	d995c <memcpy>
        selfLen_ -= len;
   d6bc6:	6a20      	ldr	r0, [r4, #32]
   d6bc8:	1b40      	subs	r0, r0, r5
   d6bca:	6220      	str	r0, [r4, #32]
        remove(type);
   d6bcc:	4631      	mov	r1, r6
   d6bce:	4620      	mov	r0, r4
   d6bd0:	f7ff ffe6 	bl	d6ba0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d6bd4:	b002      	add	sp, #8
   d6bd6:	bd70      	pop	{r4, r5, r6, pc}

000d6bd8 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d6bd8:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   d6bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6bde:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d6be0:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   d6be2:	8043      	strh	r3, [r0, #2]
   d6be4:	220e      	movs	r2, #14
   d6be6:	4629      	mov	r1, r5
   d6be8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d6bea:	7105      	strb	r5, [r0, #4]
   d6bec:	3006      	adds	r0, #6
   d6bee:	f002 fedd 	bl	d99ac <memset>
   d6bf2:	f104 0014 	add.w	r0, r4, #20
   d6bf6:	f7ff feab 	bl	d6950 <_ZN8particle7BleUuidC1Ev>
   d6bfa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d6bfe:	f7ff fea7 	bl	d6950 <_ZN8particle7BleUuidC1Ev>
   d6c02:	4904      	ldr	r1, [pc, #16]	; (d6c14 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d6c04:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6c08:	f7ff fbd6 	bl	d63b8 <_ZN6StringC1EPKc>
    _Function_base() : _M_manager(nullptr) { }
   d6c0c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   d6c0e:	4620      	mov	r0, r4
   d6c10:	bd38      	pop	{r3, r4, r5, pc}
   d6c12:	bf00      	nop
   d6c14:	000d9cb3 	.word	0x000d9cb3

000d6c18 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d6c18:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6c1a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d6c1e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d6c22:	4293      	cmp	r3, r2
   d6c24:	4618      	mov	r0, r3
   d6c26:	d006      	beq.n	d6c36 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d6c28:	6804      	ldr	r4, [r0, #0]
   d6c2a:	8824      	ldrh	r4, [r4, #0]
   d6c2c:	428c      	cmp	r4, r1
   d6c2e:	f103 0308 	add.w	r3, r3, #8
   d6c32:	d1f6      	bne.n	d6c22 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d6c34:	bd10      	pop	{r4, pc}
        return nullptr;
   d6c36:	2000      	movs	r0, #0
   d6c38:	e7fc      	b.n	d6c34 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d6c3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d6c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6c3e:	4606      	mov	r6, r0
   d6c40:	b085      	sub	sp, #20
   d6c42:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d6c44:	460d      	mov	r5, r1
   d6c46:	2900      	cmp	r1, #0
   d6c48:	d050      	beq.n	d6cec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d6c4a:	2a00      	cmp	r2, #0
   d6c4c:	d04e      	beq.n	d6cec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
    void onDataReceived(void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance) {
        onDataReceived((callback && instance) ? std::bind(callback, instance, _1, _2, _3) :(BleOnDataReceivedStdFunction) nullptr);
    }

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d6c4e:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   d6c50:	7823      	ldrb	r3, [r4, #0]
   d6c52:	2af4      	cmp	r2, #244	; 0xf4
   d6c54:	bf28      	it	cs
   d6c56:	22f4      	movcs	r2, #244	; 0xf4
   d6c58:	b343      	cbz	r3, d6cac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d6c5a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d6c5c:	0798      	lsls	r0, r3, #30
   d6c5e:	d509      	bpl.n	d6c74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d6c60:	89a0      	ldrh	r0, [r4, #12]
   d6c62:	9203      	str	r2, [sp, #12]
   d6c64:	2300      	movs	r3, #0
   d6c66:	f7fe fe2d 	bl	d58c4 <hal_ble_gatt_server_set_characteristic_value>
   d6c6a:	2800      	cmp	r0, #0
   d6c6c:	9a03      	ldr	r2, [sp, #12]
   d6c6e:	da03      	bge.n	d6c78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d6c70:	b005      	add	sp, #20
   d6c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d6c74:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d6c78:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d6c7a:	7923      	ldrb	r3, [r4, #4]
   d6c7c:	06d9      	lsls	r1, r3, #27
   d6c7e:	d509      	bpl.n	d6c94 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d6c80:	2f01      	cmp	r7, #1
   d6c82:	d007      	beq.n	d6c94 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6c84:	89a0      	ldrh	r0, [r4, #12]
   d6c86:	2300      	movs	r3, #0
   d6c88:	4629      	mov	r1, r5
}
   d6c8a:	b005      	add	sp, #20
   d6c8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6c90:	f7fe be54 	b.w	d593c <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d6c94:	069b      	lsls	r3, r3, #26
   d6c96:	d5eb      	bpl.n	d6c70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d6c98:	2f02      	cmp	r7, #2
   d6c9a:	d0e9      	beq.n	d6c70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6c9c:	89a0      	ldrh	r0, [r4, #12]
   d6c9e:	2300      	movs	r3, #0
   d6ca0:	4629      	mov	r1, r5
}
   d6ca2:	b005      	add	sp, #20
   d6ca4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6ca8:	f7fe be52 	b.w	d5950 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d6cac:	8860      	ldrh	r0, [r4, #2]
   d6cae:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6cb2:	4288      	cmp	r0, r1
   d6cb4:	d01c      	beq.n	d6cf0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d6cb6:	7921      	ldrb	r1, [r4, #4]
   d6cb8:	074e      	lsls	r6, r1, #29
   d6cba:	d501      	bpl.n	d6cc0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d6cbc:	2f01      	cmp	r7, #1
   d6cbe:	d104      	bne.n	d6cca <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d6cc0:	070b      	lsls	r3, r1, #28
   d6cc2:	d409      	bmi.n	d6cd8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d6cc4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d6cc8:	e7d2      	b.n	d6c70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d6cca:	89a1      	ldrh	r1, [r4, #12]
   d6ccc:	9300      	str	r3, [sp, #0]
   d6cce:	4613      	mov	r3, r2
   d6cd0:	462a      	mov	r2, r5
   d6cd2:	f7fe fe0b 	bl	d58ec <hal_ble_gatt_client_write_without_response>
   d6cd6:	e7cb      	b.n	d6c70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d6cd8:	2f02      	cmp	r7, #2
   d6cda:	d0f3      	beq.n	d6cc4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d6cdc:	2300      	movs	r3, #0
   d6cde:	89a1      	ldrh	r1, [r4, #12]
   d6ce0:	9300      	str	r3, [sp, #0]
   d6ce2:	4613      	mov	r3, r2
   d6ce4:	462a      	mov	r2, r5
   d6ce6:	f7fe fdf7 	bl	d58d8 <hal_ble_gatt_client_write_with_response>
   d6cea:	e7c1      	b.n	d6c70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d6cec:	4802      	ldr	r0, [pc, #8]	; (d6cf8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d6cee:	e7bf      	b.n	d6c70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d6cf0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d6cf4:	e7bc      	b.n	d6c70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d6cf6:	bf00      	nop
   d6cf8:	fffffef2 	.word	0xfffffef2

000d6cfc <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d6cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6cfe:	460c      	mov	r4, r1
   d6d00:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d6d02:	21f4      	movs	r1, #244	; 0xf4
   d6d04:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d6d06:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d6d08:	f002 fea9 	bl	d9a5e <strnlen>
   d6d0c:	9b01      	ldr	r3, [sp, #4]
   d6d0e:	4602      	mov	r2, r0
   d6d10:	4621      	mov	r1, r4
   d6d12:	4628      	mov	r0, r5
}
   d6d14:	b003      	add	sp, #12
   d6d16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d6d1a:	f7ff bf8f 	b.w	d6c3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000d6d20 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d6d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6d24:	2600      	movs	r6, #0
   d6d26:	6006      	str	r6, [r0, #0]
   d6d28:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6d2a:	2028      	movs	r0, #40	; 0x28
   d6d2c:	460c      	mov	r4, r1
   d6d2e:	f7fd f9b2 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d6d32:	1e05      	subs	r5, r0, #0
   d6d34:	f105 080c 	add.w	r8, r5, #12
   d6d38:	d00f      	beq.n	d6d5a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d6d3a:	2301      	movs	r3, #1
   d6d3c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d6d40:	4b08      	ldr	r3, [pc, #32]	; (d6d64 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d6d42:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   d6d44:	4640      	mov	r0, r8
   d6d46:	f7ff fe03 	bl	d6950 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   d6d4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   d6d4c:	622e      	str	r6, [r5, #32]
   d6d4e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   d6d52:	4646      	mov	r6, r8
   d6d54:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6d56:	6823      	ldr	r3, [r4, #0]
   d6d58:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   d6d5a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d6d5e:	4638      	mov	r0, r7
   d6d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6d64:	000da19c 	.word	0x000da19c

000d6d68 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d6d68:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6d6a:	2500      	movs	r5, #0
   d6d6c:	6005      	str	r5, [r0, #0]
   d6d6e:	4606      	mov	r6, r0
   d6d70:	2030      	movs	r0, #48	; 0x30
   d6d72:	f7fd f990 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d6d76:	4604      	mov	r4, r0
   d6d78:	b188      	cbz	r0, d6d9e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d6d7a:	2301      	movs	r3, #1
   d6d7c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d6d80:	4b09      	ldr	r3, [pc, #36]	; (d6da8 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d6d82:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d6d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6d88:	8183      	strh	r3, [r0, #12]
   d6d8a:	300e      	adds	r0, #14
   d6d8c:	f7ff fdd6 	bl	d693c <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d6d90:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d6d94:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d6d98:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d6d9c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d6d9e:	6074      	str	r4, [r6, #4]
   d6da0:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d6da2:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d6da4:	4630      	mov	r0, r6
   d6da6:	bd70      	pop	{r4, r5, r6, pc}
   d6da8:	000da1b8 	.word	0x000da1b8

000d6dac <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d6dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6dae:	460d      	mov	r5, r1
   d6db0:	4604      	mov	r4, r0
    WiringBleLock lk;
   d6db2:	a801      	add	r0, sp, #4
   d6db4:	f7ff fd91 	bl	d68da <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d6db8:	682a      	ldr	r2, [r5, #0]
   d6dba:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d6dbe:	6023      	str	r3, [r4, #0]
   d6dc0:	6853      	ldr	r3, [r2, #4]
   d6dc2:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d6dc4:	a801      	add	r0, sp, #4
   d6dc6:	f7ff fd90 	bl	d68ea <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d6dca:	4620      	mov	r0, r4
   d6dcc:	b003      	add	sp, #12
   d6dce:	bd30      	pop	{r4, r5, pc}

000d6dd0 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d6dd0:	b530      	push	{r4, r5, lr}
   d6dd2:	4605      	mov	r5, r0
   d6dd4:	b087      	sub	sp, #28
   d6dd6:	460c      	mov	r4, r1
    WiringBleLock lk;
   d6dd8:	a801      	add	r0, sp, #4
   d6dda:	f7ff fd7e 	bl	d68da <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d6dde:	682a      	ldr	r2, [r5, #0]
   d6de0:	6823      	ldr	r3, [r4, #0]
   d6de2:	8812      	ldrh	r2, [r2, #0]
   d6de4:	881b      	ldrh	r3, [r3, #0]
   d6de6:	429a      	cmp	r2, r3
   d6de8:	d10d      	bne.n	d6e06 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d6dea:	4629      	mov	r1, r5
   d6dec:	a802      	add	r0, sp, #8
   d6dee:	f7ff ffdd 	bl	d6dac <_ZNK8particle13BlePeerDevice7addressEv>
   d6df2:	4621      	mov	r1, r4
   d6df4:	a804      	add	r0, sp, #16
   d6df6:	f7ff ffd9 	bl	d6dac <_ZNK8particle13BlePeerDevice7addressEv>
   d6dfa:	a904      	add	r1, sp, #16
   d6dfc:	a802      	add	r0, sp, #8
   d6dfe:	f7ff fd89 	bl	d6914 <_ZNK8particle10BleAddresseqERKS0_>
   d6e02:	4604      	mov	r4, r0
   d6e04:	b900      	cbnz	r0, d6e08 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d6e06:	2400      	movs	r4, #0
    WiringBleLock lk;
   d6e08:	a801      	add	r0, sp, #4
   d6e0a:	f7ff fd6e 	bl	d68ea <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d6e0e:	4620      	mov	r0, r4
   d6e10:	b007      	add	sp, #28
   d6e12:	bd30      	pop	{r4, r5, pc}

000d6e14 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d6e14:	b510      	push	{r4, lr}
   d6e16:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d6e18:	2054      	movs	r0, #84	; 0x54
   d6e1a:	f7fd f93c 	bl	d4096 <_Znwj>
   d6e1e:	4601      	mov	r1, r0
   d6e20:	b160      	cbz	r0, d6e3c <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d6e22:	2300      	movs	r3, #0
   d6e24:	e9c0 3300 	strd	r3, r3, [r0]
   d6e28:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d6e2c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d6e30:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d6e34:	6203      	str	r3, [r0, #32]
   d6e36:	62c3      	str	r3, [r0, #44]	; 0x2c
   d6e38:	63c3      	str	r3, [r0, #60]	; 0x3c
   d6e3a:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d6e3c:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d6e3e:	b919      	cbnz	r1, d6e48 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d6e40:	4a09      	ldr	r2, [pc, #36]	; (d6e68 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d6e42:	200a      	movs	r0, #10
   d6e44:	f7fe ff1e 	bl	d5c84 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d6e48:	2000      	movs	r0, #0
   d6e4a:	f7fe fcff 	bl	d584c <hal_ble_stack_init>
   d6e4e:	b120      	cbz	r0, d6e5a <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d6e50:	4a05      	ldr	r2, [pc, #20]	; (d6e68 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d6e52:	2100      	movs	r1, #0
   d6e54:	200a      	movs	r0, #10
   d6e56:	f7fe ff15 	bl	d5c84 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d6e5a:	6821      	ldr	r1, [r4, #0]
   d6e5c:	4803      	ldr	r0, [pc, #12]	; (d6e6c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d6e5e:	2200      	movs	r2, #0
   d6e60:	f7fe fd62 	bl	d5928 <hal_ble_set_callback_on_periph_link_events>
}
   d6e64:	4620      	mov	r0, r4
   d6e66:	bd10      	pop	{r4, pc}
   d6e68:	000d57dd 	.word	0x000d57dd
   d6e6c:	000d72f5 	.word	0x000d72f5

000d6e70 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d6e70:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d6e72:	4c0b      	ldr	r4, [pc, #44]	; (d6ea0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6e74:	7823      	ldrb	r3, [r4, #0]
   d6e76:	f3bf 8f5b 	dmb	ish
   d6e7a:	07db      	lsls	r3, r3, #31
   d6e7c:	d40e      	bmi.n	d6e9c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d6e7e:	4620      	mov	r0, r4
   d6e80:	f7fd f90f 	bl	d40a2 <__cxa_guard_acquire>
   d6e84:	b150      	cbz	r0, d6e9c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d6e86:	4807      	ldr	r0, [pc, #28]	; (d6ea4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6e88:	f7ff ffc4 	bl	d6e14 <_ZN8particle14BleLocalDeviceC1Ev>
   d6e8c:	4620      	mov	r0, r4
   d6e8e:	f7fd f90d 	bl	d40ac <__cxa_guard_release>
   d6e92:	4a05      	ldr	r2, [pc, #20]	; (d6ea8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d6e94:	4905      	ldr	r1, [pc, #20]	; (d6eac <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d6e96:	4803      	ldr	r0, [pc, #12]	; (d6ea4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6e98:	f001 ff08 	bl	d8cac <__aeabi_atexit>
    return instance;
}
   d6e9c:	4801      	ldr	r0, [pc, #4]	; (d6ea4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6e9e:	bd10      	pop	{r4, pc}
   d6ea0:	2003e654 	.word	0x2003e654
   d6ea4:	2003e660 	.word	0x2003e660
   d6ea8:	2003e0ac 	.word	0x2003e0ac
   d6eac:	000d70b5 	.word	0x000d70b5

000d6eb0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d6eb0:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   d6eb2:	6803      	ldr	r3, [r0, #0]
   d6eb4:	3b09      	subs	r3, #9
   d6eb6:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d6eb8:	b08d      	sub	sp, #52	; 0x34
   d6eba:	4604      	mov	r4, r0
   d6ebc:	460d      	mov	r5, r1
    switch (event->type) {
   d6ebe:	d811      	bhi.n	d6ee4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d6ec0:	f7ff ffd6 	bl	d6e70 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d6ec4:	88a1      	ldrh	r1, [r4, #4]
   d6ec6:	6800      	ldr	r0, [r0, #0]
   d6ec8:	f7ff fea6 	bl	d6c18 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d6ecc:	4603      	mov	r3, r0
   d6ece:	b958      	cbnz	r0, d6ee8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d6ed0:	2220      	movs	r2, #32
   d6ed2:	e9cd 2004 	strd	r2, r0, [sp, #16]
   d6ed6:	4a0b      	ldr	r2, [pc, #44]	; (d6f04 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d6ed8:	9200      	str	r2, [sp, #0]
   d6eda:	490b      	ldr	r1, [pc, #44]	; (d6f08 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d6edc:	aa04      	add	r2, sp, #16
   d6ede:	2032      	movs	r0, #50	; 0x32
   d6ee0:	f7fe fed8 	bl	d5c94 <log_message>
}
   d6ee4:	b00d      	add	sp, #52	; 0x34
   d6ee6:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   d6ee8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   d6eea:	2a00      	cmp	r2, #0
   d6eec:	d0fa      	beq.n	d6ee4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   d6eee:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6ef2:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   d6ef6:	e9cd 1203 	strd	r1, r2, [sp, #12]
   d6efa:	6dac      	ldr	r4, [r5, #88]	; 0x58
   d6efc:	aa04      	add	r2, sp, #16
   d6efe:	a903      	add	r1, sp, #12
   d6f00:	47a0      	blx	r4
}
   d6f02:	e7ef      	b.n	d6ee4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   d6f04:	000da0a9 	.word	0x000da0a9
   d6f08:	000da082 	.word	0x000da082

000d6f0c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d6f0c:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   d6f0e:	2000      	movs	r0, #0
   d6f10:	f7fe fc9c 	bl	d584c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   d6f14:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d6f18:	bd08      	pop	{r3, pc}

000d6f1a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d6f1a:	4608      	mov	r0, r1
   d6f1c:	b911      	cbnz	r1, d6f24 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d6f1e:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d6f20:	f7fe bca4 	b.w	d586c <hal_ble_gap_set_advertising_data>
   d6f24:	6a09      	ldr	r1, [r1, #32]
   d6f26:	2200      	movs	r2, #0
   d6f28:	e7fa      	b.n	d6f20 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d6f2a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d6f2a:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d6f2c:	4608      	mov	r0, r1
   d6f2e:	b929      	cbnz	r1, d6f3c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d6f30:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d6f32:	b003      	add	sp, #12
   d6f34:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6f38:	f7fe bca0 	b.w	d587c <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d6f3c:	2101      	movs	r1, #1
   d6f3e:	9001      	str	r0, [sp, #4]
   d6f40:	f7ff fe2e 	bl	d6ba0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6f44:	9801      	ldr	r0, [sp, #4]
   d6f46:	2200      	movs	r2, #0
   d6f48:	6a01      	ldr	r1, [r0, #32]
   d6f4a:	e7f2      	b.n	d6f32 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d6f4c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d6f4c:	b538      	push	{r3, r4, r5, lr}
   d6f4e:	4604      	mov	r4, r0
   d6f50:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   d6f52:	f7ff ffe2 	bl	d6f1a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d6f56:	2800      	cmp	r0, #0
   d6f58:	db0a      	blt.n	d6f70 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   d6f5a:	4629      	mov	r1, r5
   d6f5c:	4620      	mov	r0, r4
   d6f5e:	f7ff ffe4 	bl	d6f2a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d6f62:	2800      	cmp	r0, #0
   d6f64:	db04      	blt.n	d6f70 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   d6f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   d6f6a:	2000      	movs	r0, #0
   d6f6c:	f7fe bc8e 	b.w	d588c <hal_ble_gap_start_advertising>
}
   d6f70:	bd38      	pop	{r3, r4, r5, pc}

000d6f72 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   d6f72:	6803      	ldr	r3, [r0, #0]
   d6f74:	69d8      	ldr	r0, [r3, #28]
}
   d6f76:	2800      	cmp	r0, #0
   d6f78:	bfd4      	ite	le
   d6f7a:	2000      	movle	r0, #0
   d6f7c:	2001      	movgt	r0, #1
   d6f7e:	4770      	bx	lr

000d6f80 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d6f80:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6f82:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d6f84:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6f86:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6f88:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d6f8a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6f8c:	f7fd f883 	bl	d4096 <_Znwj>
   d6f90:	b118      	cbz	r0, d6f9a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d6f92:	682b      	ldr	r3, [r5, #0]
   d6f94:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6f96:	686b      	ldr	r3, [r5, #4]
   d6f98:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d6f9a:	4b03      	ldr	r3, [pc, #12]	; (d6fa8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   d6f9c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6f9e:	4b03      	ldr	r3, [pc, #12]	; (d6fac <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6fa0:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6fa2:	60a3      	str	r3, [r4, #8]
      }
   d6fa4:	4620      	mov	r0, r4
   d6fa6:	bd38      	pop	{r3, r4, r5, pc}
   d6fa8:	000d6865 	.word	0x000d6865
   d6fac:	000d67e9 	.word	0x000d67e9

000d6fb0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d6fb0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6fb2:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d6fb4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6fb6:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6fb8:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d6fba:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6fbc:	f7fd f86b 	bl	d4096 <_Znwj>
   d6fc0:	b118      	cbz	r0, d6fca <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   d6fc2:	682b      	ldr	r3, [r5, #0]
   d6fc4:	6003      	str	r3, [r0, #0]
   d6fc6:	686b      	ldr	r3, [r5, #4]
   d6fc8:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d6fca:	4b03      	ldr	r3, [pc, #12]	; (d6fd8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   d6fcc:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6fce:	4b03      	ldr	r3, [pc, #12]	; (d6fdc <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6fd0:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6fd2:	60a3      	str	r3, [r4, #8]
      }
   d6fd4:	4620      	mov	r0, r4
   d6fd6:	bd38      	pop	{r3, r4, r5, pc}
   d6fd8:	000d687d 	.word	0x000d687d
   d6fdc:	000d6827 	.word	0x000d6827

000d6fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d6fe0:	680b      	ldr	r3, [r1, #0]
   d6fe2:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d6fe4:	b113      	cbz	r3, d6fec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6fe6:	685a      	ldr	r2, [r3, #4]
   d6fe8:	3201      	adds	r2, #1
   d6fea:	605a      	str	r2, [r3, #4]
      }
   d6fec:	4770      	bx	lr

000d6fee <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d6fee:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6ff0:	f851 3b04 	ldr.w	r3, [r1], #4
   d6ff4:	4604      	mov	r4, r0
   d6ff6:	f840 3b04 	str.w	r3, [r0], #4
   d6ffa:	f7ff fff1 	bl	d6fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d6ffe:	6823      	ldr	r3, [r4, #0]
   d7000:	b90b      	cbnz	r3, d7006 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d7002:	f7ff fbe9 	bl	d67d8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d7006:	4620      	mov	r0, r4
   d7008:	bd10      	pop	{r4, pc}

000d700a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d700a:	b510      	push	{r4, lr}
   d700c:	f851 3b04 	ldr.w	r3, [r1], #4
   d7010:	4604      	mov	r4, r0
   d7012:	f840 3b04 	str.w	r3, [r0], #4
   d7016:	f7ff ffe3 	bl	d6fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d701a:	4620      	mov	r0, r4
   d701c:	bd10      	pop	{r4, pc}

000d701e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d701e:	b510      	push	{r4, lr}
   d7020:	f851 3b04 	ldr.w	r3, [r1], #4
   d7024:	4604      	mov	r4, r0
   d7026:	f840 3b04 	str.w	r3, [r0], #4
   d702a:	f7ff ffd9 	bl	d6fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d702e:	4620      	mov	r0, r4
   d7030:	bd10      	pop	{r4, pc}

000d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d7032:	b510      	push	{r4, lr}
   d7034:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d7036:	6800      	ldr	r0, [r0, #0]
   d7038:	b128      	cbz	r0, d7046 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d703a:	6843      	ldr	r3, [r0, #4]
   d703c:	3b01      	subs	r3, #1
   d703e:	6043      	str	r3, [r0, #4]
   d7040:	b90b      	cbnz	r3, d7046 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d7042:	f7ff fb3c 	bl	d66be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d7046:	4620      	mov	r0, r4
   d7048:	bd10      	pop	{r4, pc}

000d704a <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d704a:	b510      	push	{r4, lr}
   d704c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d704e:	3004      	adds	r0, #4
   d7050:	f7ff ffef 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7054:	4620      	mov	r0, r4
   d7056:	bd10      	pop	{r4, pc}

000d7058 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7058:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d705a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d705e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d7060:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d7064:	42ae      	cmp	r6, r5
   d7066:	d004      	beq.n	d7072 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d7068:	1d28      	adds	r0, r5, #4
   d706a:	f7ff ffe2 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d706e:	3508      	adds	r5, #8
   d7070:	e7f8      	b.n	d7064 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d7072:	6820      	ldr	r0, [r4, #0]
   d7074:	f7fe fefc 	bl	d5e70 <free>
}
   d7078:	4620      	mov	r0, r4
   d707a:	bd70      	pop	{r4, r5, r6, pc}

000d707c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d707c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d707e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7082:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d7084:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d7088:	42ae      	cmp	r6, r5
   d708a:	d004      	beq.n	d7096 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d708c:	1d28      	adds	r0, r5, #4
   d708e:	f7ff ffd0 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7092:	3508      	adds	r5, #8
   d7094:	e7f8      	b.n	d7088 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d7096:	6820      	ldr	r0, [r4, #0]
   d7098:	f7fe feea 	bl	d5e70 <free>
}
   d709c:	4620      	mov	r0, r4
   d709e:	bd70      	pop	{r4, r5, r6, pc}

000d70a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d70a0:	b510      	push	{r4, lr}
   d70a2:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d70a4:	3024      	adds	r0, #36	; 0x24
   d70a6:	f7ff ffe9 	bl	d707c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d70aa:	f104 0018 	add.w	r0, r4, #24
   d70ae:	f7ff ffd3 	bl	d7058 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d70b2:	bd10      	pop	{r4, pc}

000d70b4 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d70b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d70b6:	6804      	ldr	r4, [r0, #0]
   d70b8:	4606      	mov	r6, r0
   d70ba:	b324      	cbz	r4, d7106 <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   d70bc:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d70c0:	f7ff fbe2 	bl	d6888 <_ZNSt14_Function_baseD1Ev>
   d70c4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d70c8:	f7ff fbde 	bl	d6888 <_ZNSt14_Function_baseD1Ev>
   d70cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d70d0:	f7ff fbda 	bl	d6888 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d70d4:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d70d8:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d70dc:	42af      	cmp	r7, r5
   d70de:	d004      	beq.n	d70ea <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d70e0:	1d28      	adds	r0, r5, #4
   d70e2:	f7ff ffa6 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d70e6:	3508      	adds	r5, #8
   d70e8:	e7f8      	b.n	d70dc <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d70ea:	69a0      	ldr	r0, [r4, #24]
   d70ec:	f7fe fec0 	bl	d5e70 <free>
    ~BleLocalDeviceImpl() = default;
   d70f0:	f104 000c 	add.w	r0, r4, #12
   d70f4:	f7ff ffc2 	bl	d707c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d70f8:	4620      	mov	r0, r4
   d70fa:	f7ff ffad 	bl	d7058 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d70fe:	2154      	movs	r1, #84	; 0x54
   d7100:	4620      	mov	r0, r4
   d7102:	f001 fdd8 	bl	d8cb6 <_ZdlPvj>
   d7106:	4630      	mov	r0, r6
   d7108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d710a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   d710a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d710c:	b510      	push	{r4, lr}
      if (_M_empty())
   d710e:	b90a      	cbnz	r2, d7114 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d7110:	f001 fdd7 	bl	d8cc2 <_ZSt25__throw_bad_function_callv>
    }
   d7114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7118:	68c3      	ldr	r3, [r0, #12]
   d711a:	4718      	bx	r3

000d711c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
inline void spark::Vector<T, AllocatorT>::clear() {
   d711c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d711e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline void spark::Vector<T, AllocatorT>::clear() {
   d7122:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d7124:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d7128:	42ae      	cmp	r6, r5
   d712a:	d004      	beq.n	d7136 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
   d712c:	1d28      	adds	r0, r5, #4
   d712e:	f7ff ff80 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7132:	3508      	adds	r5, #8
   d7134:	e7f8      	b.n	d7128 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
    size_ = 0;
   d7136:	2300      	movs	r3, #0
   d7138:	6063      	str	r3, [r4, #4]
}
   d713a:	bd70      	pop	{r4, r5, r6, pc}

000d713c <_ZNK8particle14BleLocalDevice3offEv>:
int BleLocalDevice::off() const {
   d713c:	b513      	push	{r0, r1, r4, lr}
   d713e:	4604      	mov	r4, r0
    CHECK(hal_ble_stack_deinit(nullptr));
   d7140:	2000      	movs	r0, #0
   d7142:	f7fe fb8b 	bl	d585c <hal_ble_stack_deinit>
   d7146:	2800      	cmp	r0, #0
   d7148:	db0a      	blt.n	d7160 <_ZNK8particle14BleLocalDevice3offEv+0x24>
        WiringBleLock lk;
   d714a:	a801      	add	r0, sp, #4
   d714c:	f7ff fbc5 	bl	d68da <_ZN8particle3ble13WiringBleLockC1Ev>
        return peers_;
   d7150:	6820      	ldr	r0, [r4, #0]
        impl()->peers().clear();
   d7152:	3018      	adds	r0, #24
   d7154:	f7ff ffe2 	bl	d711c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
        WiringBleLock lk;
   d7158:	a801      	add	r0, sp, #4
   d715a:	f7ff fbc6 	bl	d68ea <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   d715e:	2000      	movs	r0, #0
}
   d7160:	b002      	add	sp, #8
   d7162:	bd10      	pop	{r4, pc}

000d7164 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d7164:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7168:	4604      	mov	r4, r0
   d716a:	460d      	mov	r5, r1
   d716c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d716e:	d914      	bls.n	d719a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7170:	4290      	cmp	r0, r2
   d7172:	d213      	bcs.n	d719c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d7174:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d7178:	1a75      	subs	r5, r6, r1
   d717a:	f1a1 0708 	sub.w	r7, r1, #8
   d717e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d7180:	42b7      	cmp	r7, r6
   d7182:	d018      	beq.n	d71b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7184:	b11c      	cbz	r4, d718e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d7186:	4631      	mov	r1, r6
   d7188:	4620      	mov	r0, r4
   d718a:	f7ff ff48 	bl	d701e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d718e:	1d30      	adds	r0, r6, #4
   d7190:	f7ff ff4f 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d7194:	3e08      	subs	r6, #8
   d7196:	3c08      	subs	r4, #8
   d7198:	e7f2      	b.n	d7180 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d719a:	d00c      	beq.n	d71b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d719c:	42b5      	cmp	r5, r6
   d719e:	d00a      	beq.n	d71b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d71a0:	b11c      	cbz	r4, d71aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d71a2:	4629      	mov	r1, r5
   d71a4:	4620      	mov	r0, r4
   d71a6:	f7ff ff3a 	bl	d701e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d71aa:	1d28      	adds	r0, r5, #4
   d71ac:	f7ff ff41 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d71b0:	3508      	adds	r5, #8
   d71b2:	3408      	adds	r4, #8
   d71b4:	e7f2      	b.n	d719c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d71b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d71b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d71b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d71bc:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d71c0:	4605      	mov	r5, r0
   d71c2:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d71c4:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d71c8:	42a7      	cmp	r7, r4
   d71ca:	d103      	bne.n	d71d4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d71cc:	2600      	movs	r6, #0
}
   d71ce:	4630      	mov	r0, r6
   d71d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d71d4:	4641      	mov	r1, r8
   d71d6:	4620      	mov	r0, r4
   d71d8:	f7ff fdfa 	bl	d6dd0 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d71dc:	4606      	mov	r6, r0
   d71de:	b908      	cbnz	r0, d71e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d71e0:	3408      	adds	r4, #8
   d71e2:	e7f1      	b.n	d71c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d71e4:	2c00      	cmp	r4, #0
   d71e6:	d0f1      	beq.n	d71cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d71e8:	1d20      	adds	r0, r4, #4
   d71ea:	f7ff ff22 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d71ee:	e9d5 3200 	ldrd	r3, r2, [r5]
   d71f2:	f104 0108 	add.w	r1, r4, #8
   d71f6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d71fa:	4620      	mov	r0, r4
   d71fc:	f7ff ffb2 	bl	d7164 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d7200:	686b      	ldr	r3, [r5, #4]
   d7202:	3b01      	subs	r3, #1
   d7204:	606b      	str	r3, [r5, #4]
    return true;
   d7206:	e7e2      	b.n	d71ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d7208 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   d7208:	b5f0      	push	{r4, r5, r6, r7, lr}
   d720a:	4607      	mov	r7, r0
   d720c:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   d720e:	4668      	mov	r0, sp
   d7210:	f7ff fb63 	bl	d68da <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d7214:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   d7216:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   d721a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   d721e:	42ac      	cmp	r4, r5
   d7220:	d02b      	beq.n	d727a <_ZNK8particle14BleLocalDevice10disconnectEv+0x72>
        hal_ble_conn_info_t connInfo = {};
   d7222:	2224      	movs	r2, #36	; 0x24
   d7224:	2100      	movs	r1, #0
   d7226:	a801      	add	r0, sp, #4
   d7228:	f002 fbc0 	bl	d99ac <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   d722c:	6823      	ldr	r3, [r4, #0]
   d722e:	2200      	movs	r2, #0
   d7230:	8818      	ldrh	r0, [r3, #0]
   d7232:	a901      	add	r1, sp, #4
   d7234:	f7fe fb64 	bl	d5900 <hal_ble_gap_get_connection_info>
   d7238:	4606      	mov	r6, r0
   d723a:	b108      	cbz	r0, d7240 <_ZNK8particle14BleLocalDevice10disconnectEv+0x38>
    for (auto& p : impl()->peers()) {
   d723c:	3408      	adds	r4, #8
   d723e:	e7ee      	b.n	d721e <_ZNK8particle14BleLocalDevice10disconnectEv+0x16>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   d7240:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d7244:	2b01      	cmp	r3, #1
   d7246:	d1f9      	bne.n	d723c <_ZNK8particle14BleLocalDevice10disconnectEv+0x34>
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
   d7248:	4668      	mov	r0, sp
   d724a:	f7ff fa5d 	bl	d6708 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   d724e:	6823      	ldr	r3, [r4, #0]
   d7250:	4631      	mov	r1, r6
   d7252:	8818      	ldrh	r0, [r3, #0]
   d7254:	f7fe fb22 	bl	d589c <hal_ble_gap_disconnect>
   d7258:	1e05      	subs	r5, r0, #0
   d725a:	db08      	blt.n	d726e <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>
            lk.lock();
   d725c:	4668      	mov	r0, sp
   d725e:	f7ff fa47 	bl	d66f0 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
        return peers_;
   d7262:	6838      	ldr	r0, [r7, #0]
            impl()->peers().removeOne(p);
   d7264:	4621      	mov	r1, r4
   d7266:	3018      	adds	r0, #24
   d7268:	f7ff ffa6 	bl	d71b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
            return SYSTEM_ERROR_NONE;
   d726c:	4635      	mov	r5, r6
    WiringBleLock lk;
   d726e:	4668      	mov	r0, sp
   d7270:	f7ff fb3b 	bl	d68ea <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   d7274:	4628      	mov	r0, r5
   d7276:	b00b      	add	sp, #44	; 0x2c
   d7278:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   d727a:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   d727e:	e7f6      	b.n	d726e <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>

000d7280 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7282:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7284:	6846      	ldr	r6, [r0, #4]
   d7286:	4668      	mov	r0, sp
   d7288:	f7ff fec9 	bl	d701e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d728c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d7290:	429f      	cmp	r7, r3
   d7292:	db12      	blt.n	d72ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d7294:	3701      	adds	r7, #1
        if (n > 0) {
   d7296:	2f00      	cmp	r7, #0
   d7298:	dd29      	ble.n	d72ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d729a:	00f8      	lsls	r0, r7, #3
   d729c:	f7fe fde0 	bl	d5e60 <malloc>
            if (!d) {
   d72a0:	4605      	mov	r5, r0
   d72a2:	b1f0      	cbz	r0, d72e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d72a4:	e9d4 1200 	ldrd	r1, r2, [r4]
   d72a8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d72ac:	f7ff ff5a 	bl	d7164 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d72b0:	6820      	ldr	r0, [r4, #0]
   d72b2:	f7fe fddd 	bl	d5e70 <free>
        data_ = d;
   d72b6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d72b8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d72ba:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d72bc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d72be:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d72c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d72c6:	4631      	mov	r1, r6
   d72c8:	f106 0008 	add.w	r0, r6, #8
   d72cc:	f7ff ff4a 	bl	d7164 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d72d0:	b11e      	cbz	r6, d72da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d72d2:	4669      	mov	r1, sp
   d72d4:	4630      	mov	r0, r6
   d72d6:	f7ff fea2 	bl	d701e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d72da:	6863      	ldr	r3, [r4, #4]
   d72dc:	3301      	adds	r3, #1
   d72de:	6063      	str	r3, [r4, #4]
    return true;
   d72e0:	2501      	movs	r5, #1
   d72e2:	a801      	add	r0, sp, #4
   d72e4:	f7ff fea5 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d72e8:	4628      	mov	r0, r5
   d72ea:	b003      	add	sp, #12
   d72ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d72ee:	2500      	movs	r5, #0
   d72f0:	e7de      	b.n	d72b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>
	...

000d72f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d72f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d72f8:	4605      	mov	r5, r0
   d72fa:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d72fc:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d72fe:	460c      	mov	r4, r1
        WiringBleLock lk;
   d7300:	f7ff faeb 	bl	d68da <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d7304:	682e      	ldr	r6, [r5, #0]
   d7306:	2e04      	cmp	r6, #4
   d7308:	d06b      	beq.n	d73e2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d730a:	d807      	bhi.n	d731c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d730c:	2e03      	cmp	r6, #3
   d730e:	d028      	beq.n	d7362 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d7310:	a803      	add	r0, sp, #12
   d7312:	f7ff faea 	bl	d68ea <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d7316:	b00e      	add	sp, #56	; 0x38
   d7318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d731c:	f1a6 030c 	sub.w	r3, r6, #12
   d7320:	2b03      	cmp	r3, #3
   d7322:	d8f5      	bhi.n	d7310 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d7324:	89a9      	ldrh	r1, [r5, #12]
   d7326:	4620      	mov	r0, r4
   d7328:	f7ff fc76 	bl	d6c18 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d732c:	4607      	mov	r7, r0
   d732e:	2800      	cmp	r0, #0
   d7330:	d0ee      	beq.n	d7310 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d7332:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d7334:	2b00      	cmp	r3, #0
   d7336:	d0eb      	beq.n	d7310 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d7338:	2210      	movs	r2, #16
   d733a:	2100      	movs	r1, #0
   d733c:	a807      	add	r0, sp, #28
   d733e:	f002 fb35 	bl	d99ac <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d7342:	2e0d      	cmp	r6, #13
                        };
   d7344:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d7346:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d734a:	f040 8092 	bne.w	d7472 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d734e:	686b      	ldr	r3, [r5, #4]
   d7350:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d7352:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d7354:	9308      	str	r3, [sp, #32]
   d7356:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d7358:	a906      	add	r1, sp, #24
   d735a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d735e:	4798      	blx	r3
   d7360:	e7d6      	b.n	d7310 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d7362:	a804      	add	r0, sp, #16
   d7364:	f7ff fd00 	bl	d6d68 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d7368:	9b04      	ldr	r3, [sp, #16]
   d736a:	89aa      	ldrh	r2, [r5, #12]
   d736c:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d736e:	6869      	ldr	r1, [r5, #4]
   d7370:	9804      	ldr	r0, [sp, #16]
   d7372:	3108      	adds	r1, #8
   d7374:	3002      	adds	r0, #2
   d7376:	f7ff fac0 	bl	d68fa <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d737a:	a904      	add	r1, sp, #16
   d737c:	a806      	add	r0, sp, #24
   d737e:	f7ff fe4e 	bl	d701e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d7382:	a906      	add	r1, sp, #24
   d7384:	f104 0018 	add.w	r0, r4, #24
   d7388:	f7ff ff7a 	bl	d7280 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d738c:	4605      	mov	r5, r0
   d738e:	a807      	add	r0, sp, #28
   d7390:	f7ff fe4f 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7394:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d7396:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d7398:	b98d      	cbnz	r5, d73be <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d739a:	4b3e      	ldr	r3, [pc, #248]	; (d7494 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d739c:	493e      	ldr	r1, [pc, #248]	; (d7498 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d739e:	9300      	str	r3, [sp, #0]
   d73a0:	2032      	movs	r0, #50	; 0x32
   d73a2:	462b      	mov	r3, r5
   d73a4:	aa06      	add	r2, sp, #24
   d73a6:	9507      	str	r5, [sp, #28]
   d73a8:	f7fe fc74 	bl	d5c94 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d73ac:	9b04      	ldr	r3, [sp, #16]
   d73ae:	4629      	mov	r1, r5
   d73b0:	8818      	ldrh	r0, [r3, #0]
   d73b2:	f7fe fa73 	bl	d589c <hal_ble_gap_disconnect>
   d73b6:	a805      	add	r0, sp, #20
   d73b8:	f7ff fe3b 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d73bc:	e7a8      	b.n	d7310 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d73be:	4a37      	ldr	r2, [pc, #220]	; (d749c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d73c0:	9200      	str	r2, [sp, #0]
   d73c2:	2300      	movs	r3, #0
   d73c4:	4934      	ldr	r1, [pc, #208]	; (d7498 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d73c6:	9307      	str	r3, [sp, #28]
   d73c8:	aa06      	add	r2, sp, #24
   d73ca:	2001      	movs	r0, #1
   d73cc:	f7fe fc62 	bl	d5c94 <log_message>
                if (impl->connectedCallback_) {
   d73d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d73d2:	2b00      	cmp	r3, #0
   d73d4:	d0ef      	beq.n	d73b6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d73d6:	a904      	add	r1, sp, #16
   d73d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d73dc:	f7ff fe95 	bl	d710a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d73e0:	e7e9      	b.n	d73b6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d73e2:	89a9      	ldrh	r1, [r5, #12]
   d73e4:	4620      	mov	r0, r4
   d73e6:	f7ff fc17 	bl	d6c18 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d73ea:	4606      	mov	r6, r0
   d73ec:	2800      	cmp	r0, #0
   d73ee:	d08f      	beq.n	d7310 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d73f0:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d73f2:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d73f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d73fa:	802a      	strh	r2, [r5, #0]
   d73fc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d7400:	4299      	cmp	r1, r3
   d7402:	d003      	beq.n	d740c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d7404:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d7408:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d740a:	e7f9      	b.n	d7400 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d740c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d7410:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d7414:	45b8      	cmp	r8, r7
   d7416:	d004      	beq.n	d7422 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d7418:	1d38      	adds	r0, r7, #4
   d741a:	f7ff fe0a 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d741e:	3708      	adds	r7, #8
   d7420:	e7f8      	b.n	d7414 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d7422:	2300      	movs	r3, #0
   d7424:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d7426:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d742a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d742e:	45b8      	cmp	r8, r7
   d7430:	d004      	beq.n	d743c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d7432:	1d38      	adds	r0, r7, #4
   d7434:	f7ff fdfd 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7438:	3708      	adds	r7, #8
   d743a:	e7f8      	b.n	d742e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d743c:	2300      	movs	r3, #0
   d743e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d7440:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d7442:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7444:	b123      	cbz	r3, d7450 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d7446:	4631      	mov	r1, r6
   d7448:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d744c:	f7ff fe5d 	bl	d710a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d7450:	2300      	movs	r3, #0
   d7452:	2220      	movs	r2, #32
   d7454:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d7458:	4a11      	ldr	r2, [pc, #68]	; (d74a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d745a:	9200      	str	r2, [sp, #0]
   d745c:	490e      	ldr	r1, [pc, #56]	; (d7498 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d745e:	aa06      	add	r2, sp, #24
   d7460:	2001      	movs	r0, #1
   d7462:	f7fe fc17 	bl	d5c94 <log_message>
                    impl->peers_.removeOne(*peer);
   d7466:	4631      	mov	r1, r6
   d7468:	f104 0018 	add.w	r0, r4, #24
   d746c:	f7ff fea4 	bl	d71b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d7470:	e74e      	b.n	d7310 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d7472:	2e0f      	cmp	r6, #15
   d7474:	f47f af6f 	bne.w	d7356 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d7478:	686b      	ldr	r3, [r5, #4]
   d747a:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d747c:	7a2b      	ldrb	r3, [r5, #8]
   d747e:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d7482:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d7486:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d748a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d748e:	2308      	movs	r3, #8
   d7490:	e760      	b.n	d7354 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d7492:	bf00      	nop
   d7494:	000da0c1 	.word	0x000da0c1
   d7498:	000da082 	.word	0x000da082
   d749c:	000da0e7 	.word	0x000da0e7
   d74a0:	000da104 	.word	0x000da104

000d74a4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
   d74a4:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   d74a6:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   d74a8:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d74aa:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   d74ae:	e9c1 3300 	strd	r3, r3, [r1]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d74b2:	6823      	ldr	r3, [r4, #0]
   d74b4:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d74b6:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d74b8:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   d74ba:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   d74bc:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   d74be:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   d74c0:	f7ff fdb7 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   d74c4:	4620      	mov	r0, r4
   d74c6:	b002      	add	sp, #8
   d74c8:	bd10      	pop	{r4, pc}

000d74ca <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d74ca:	b513      	push	{r0, r1, r4, lr}
   d74cc:	460b      	mov	r3, r1
   d74ce:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d74d0:	e9d0 0100 	ldrd	r0, r1, [r0]
   d74d4:	466c      	mov	r4, sp
   d74d6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d74da:	e893 0003 	ldmia.w	r3, {r0, r1}
   d74de:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d74e2:	e894 0003 	ldmia.w	r4, {r0, r1}
   d74e6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d74ea:	b002      	add	sp, #8
   d74ec:	bd10      	pop	{r4, pc}

000d74ee <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   d74ee:	b538      	push	{r3, r4, r5, lr}
   d74f0:	4605      	mov	r5, r0
   d74f2:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d74f4:	f7ff ffe9 	bl	d74ca <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d74f8:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d74fa:	68a2      	ldr	r2, [r4, #8]
   d74fc:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d74fe:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7500:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7502:	68e2      	ldr	r2, [r4, #12]
   d7504:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7506:	60e3      	str	r3, [r4, #12]
      }
   d7508:	bd38      	pop	{r3, r4, r5, pc}

000d750a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>:
      operator=(function&& __x) noexcept
   d750a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d750c:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d750e:	4604      	mov	r4, r0
   d7510:	4608      	mov	r0, r1
	__x.swap(*this);
   d7512:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d7514:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d7516:	f7ff ffea 	bl	d74ee <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   d751a:	4621      	mov	r1, r4
   d751c:	4668      	mov	r0, sp
   d751e:	f7ff ffe6 	bl	d74ee <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   d7522:	4668      	mov	r0, sp
   d7524:	f7ff f9b0 	bl	d6888 <_ZNSt14_Function_baseD1Ev>
      }
   d7528:	4620      	mov	r0, r4
   d752a:	b004      	add	sp, #16
   d752c:	bd10      	pop	{r4, pc}

000d752e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   d752e:	b570      	push	{r4, r5, r6, lr}
   d7530:	460e      	mov	r6, r1
   d7532:	b088      	sub	sp, #32
   d7534:	4604      	mov	r4, r0
   d7536:	9201      	str	r2, [sp, #4]
   d7538:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   d753a:	f7ff fb4d 	bl	d6bd8 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   d753e:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   d7540:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   d7542:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   d7544:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d7548:	f7fe ff7e 	bl	d6448 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d754c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   d7550:	b185      	cbz	r5, d7574 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x46>
   d7552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7554:	9502      	str	r5, [sp, #8]
   d7556:	a902      	add	r1, sp, #8
   d7558:	a804      	add	r0, sp, #16
   d755a:	9303      	str	r3, [sp, #12]
   d755c:	f7ff fd10 	bl	d6f80 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   d7560:	a904      	add	r1, sp, #16
   d7562:	4630      	mov	r0, r6
   d7564:	f7ff ffd1 	bl	d750a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   d7568:	a804      	add	r0, sp, #16
   d756a:	f7ff f98d 	bl	d6888 <_ZNSt14_Function_baseD1Ev>
    }
   d756e:	4620      	mov	r0, r4
   d7570:	b008      	add	sp, #32
   d7572:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   d7574:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   d7576:	e7f3      	b.n	d7560 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000d7578 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d7578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d757c:	b086      	sub	sp, #24
   d757e:	4607      	mov	r7, r0
   d7580:	461d      	mov	r5, r3
   d7582:	2068      	movs	r0, #104	; 0x68
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d7584:	2300      	movs	r3, #0
   d7586:	4689      	mov	r9, r1
   d7588:	4692      	mov	sl, r2
   d758a:	9304      	str	r3, [sp, #16]
   d758c:	f7fc fd83 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d7590:	1e06      	subs	r6, r0, #0
   d7592:	f106 080c 	add.w	r8, r6, #12
   d7596:	d01d      	beq.n	d75d4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   d7598:	2301      	movs	r3, #1
	: _M_impl(__a)
   d759a:	4634      	mov	r4, r6
      : _M_use_count(1), _M_weak_count(1) { }
   d759c:	e9c6 3301 	strd	r3, r3, [r6, #4]
	: _M_impl(__a)
   d75a0:	4b15      	ldr	r3, [pc, #84]	; (d75f8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x80>)
   d75a2:	f844 3b20 	str.w	r3, [r4], #32
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d75a6:	f89a 3000 	ldrb.w	r3, [sl]
    value_ = flags.value_;
   d75aa:	f88d 300c 	strb.w	r3, [sp, #12]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   d75ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d75b0:	9300      	str	r3, [sp, #0]
   d75b2:	464a      	mov	r2, r9
   d75b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d75b6:	a903      	add	r1, sp, #12
   d75b8:	4640      	mov	r0, r8
   d75ba:	f7ff ffb8 	bl	d752e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   d75be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d75c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d75c2:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
   d75c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        charUuid_ = charUuid;
   d75c6:	6023      	str	r3, [r4, #0]
        svcUuid_ = svcUuid;
   d75c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d75ca:	f106 0434 	add.w	r4, r6, #52	; 0x34
   d75ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d75d0:	682b      	ldr	r3, [r5, #0]
   d75d2:	6023      	str	r3, [r4, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d75d4:	a904      	add	r1, sp, #16
   d75d6:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
   d75d8:	e9cd 8604 	strd	r8, r6, [sp, #16]
   d75dc:	f7ff ff62 	bl	d74a4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
      ~__shared_ptr() = default;
   d75e0:	a805      	add	r0, sp, #20
   d75e2:	f7ff fd26 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d75e6:	6839      	ldr	r1, [r7, #0]
   d75e8:	b919      	cbnz	r1, d75f2 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x7a>
        SPARK_ASSERT(false);
   d75ea:	4a04      	ldr	r2, [pc, #16]	; (d75fc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>)
   d75ec:	200a      	movs	r0, #10
   d75ee:	f7fe fb49 	bl	d5c84 <panic_>
}
   d75f2:	b006      	add	sp, #24
   d75f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d75f8:	000da180 	.word	0x000da180
   d75fc:	000d57dd 	.word	0x000d57dd

000d7600 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   d7600:	b538      	push	{r3, r4, r5, lr}
   d7602:	4605      	mov	r5, r0
   d7604:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d7606:	f7ff ff60 	bl	d74ca <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d760a:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d760c:	68a2      	ldr	r2, [r4, #8]
   d760e:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7610:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7612:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7614:	68e2      	ldr	r2, [r4, #12]
   d7616:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7618:	60e3      	str	r3, [r4, #12]
      }
   d761a:	bd38      	pop	{r3, r4, r5, pc}

000d761c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEaSEOS5_>:
      operator=(function&& __x) noexcept
   d761c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d761e:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d7620:	4604      	mov	r4, r0
   d7622:	4608      	mov	r0, r1
	__x.swap(*this);
   d7624:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d7626:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d7628:	f7ff ffea 	bl	d7600 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   d762c:	4621      	mov	r1, r4
   d762e:	4668      	mov	r0, sp
   d7630:	f7ff ffe6 	bl	d7600 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   d7634:	4668      	mov	r0, sp
   d7636:	f7ff f927 	bl	d6888 <_ZNSt14_Function_baseD1Ev>
      }
   d763a:	4620      	mov	r0, r4
   d763c:	b004      	add	sp, #16
   d763e:	bd10      	pop	{r4, pc}

000d7640 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   d7640:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   d7642:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   d7644:	b086      	sub	sp, #24
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   d7646:	3424      	adds	r4, #36	; 0x24
   d7648:	b171      	cbz	r1, d7668 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x28>
   d764a:	e9cd 1200 	strd	r1, r2, [sp]
   d764e:	a802      	add	r0, sp, #8
   d7650:	4669      	mov	r1, sp
   d7652:	f7ff fcad 	bl	d6fb0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
   d7656:	a902      	add	r1, sp, #8
   d7658:	4620      	mov	r0, r4
   d765a:	f7ff ffdf 	bl	d761c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEaSEOS5_>
    class function<_Res(_ArgTypes...)>
   d765e:	a802      	add	r0, sp, #8
   d7660:	f7ff f912 	bl	d6888 <_ZNSt14_Function_baseD1Ev>
}
   d7664:	b006      	add	sp, #24
   d7666:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   d7668:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   d766a:	e7f4      	b.n	d7656 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000d766c <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   d766c:	b510      	push	{r4, lr}
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   d766e:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   d7670:	b086      	sub	sp, #24
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   d7672:	3434      	adds	r4, #52	; 0x34
   d7674:	b171      	cbz	r1, d7694 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x28>
   d7676:	e9cd 1200 	strd	r1, r2, [sp]
   d767a:	a802      	add	r0, sp, #8
   d767c:	4669      	mov	r1, sp
   d767e:	f7ff fc97 	bl	d6fb0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
   d7682:	a902      	add	r1, sp, #8
   d7684:	4620      	mov	r0, r4
   d7686:	f7ff ffc9 	bl	d761c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEaSEOS5_>
    class function<_Res(_ArgTypes...)>
   d768a:	a802      	add	r0, sp, #8
   d768c:	f7ff f8fc 	bl	d6888 <_ZNSt14_Function_baseD1Ev>
}
   d7690:	b006      	add	sp, #24
   d7692:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   d7694:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   d7696:	e7f4      	b.n	d7682 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000d7698 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d7698:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d769a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d769c:	4604      	mov	r4, r0
   d769e:	460d      	mov	r5, r1
   d76a0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d76a2:	d914      	bls.n	d76ce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d76a4:	4290      	cmp	r0, r2
   d76a6:	d213      	bcs.n	d76d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d76a8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d76ac:	1a75      	subs	r5, r6, r1
   d76ae:	f1a1 0708 	sub.w	r7, r1, #8
   d76b2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d76b4:	42b7      	cmp	r7, r6
   d76b6:	d018      	beq.n	d76ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d76b8:	b11c      	cbz	r4, d76c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default;
   d76ba:	4631      	mov	r1, r6
   d76bc:	4620      	mov	r0, r4
   d76be:	f7ff fca4 	bl	d700a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d76c2:	1d30      	adds	r0, r6, #4
   d76c4:	f7ff fcb5 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d76c8:	3e08      	subs	r6, #8
   d76ca:	3c08      	subs	r4, #8
   d76cc:	e7f2      	b.n	d76b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d76ce:	d00c      	beq.n	d76ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d76d0:	42b5      	cmp	r5, r6
   d76d2:	d00a      	beq.n	d76ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d76d4:	b11c      	cbz	r4, d76de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d76d6:	4629      	mov	r1, r5
   d76d8:	4620      	mov	r0, r4
   d76da:	f7ff fc96 	bl	d700a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d76de:	1d28      	adds	r0, r5, #4
   d76e0:	f7ff fca7 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d76e4:	3508      	adds	r5, #8
   d76e6:	3408      	adds	r4, #8
   d76e8:	e7f2      	b.n	d76d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d76ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d76ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d76ec:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d76ee:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d76f0:	4605      	mov	r5, r0
        if (n > 0) {
   d76f2:	dd11      	ble.n	d7718 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d76f4:	00f0      	lsls	r0, r6, #3
   d76f6:	f7fe fbb3 	bl	d5e60 <malloc>
            if (!d) {
   d76fa:	4604      	mov	r4, r0
   d76fc:	b158      	cbz	r0, d7716 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d76fe:	e9d5 1200 	ldrd	r1, r2, [r5]
   d7702:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7706:	f7ff ffc7 	bl	d7698 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d770a:	6828      	ldr	r0, [r5, #0]
   d770c:	f7fe fbb0 	bl	d5e70 <free>
        data_ = d;
   d7710:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7712:	60ae      	str	r6, [r5, #8]
        return true;
   d7714:	2001      	movs	r0, #1
    }
   d7716:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d7718:	2400      	movs	r4, #0
   d771a:	e7f6      	b.n	d770a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d771c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d771c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d771e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7720:	6845      	ldr	r5, [r0, #4]
   d7722:	4668      	mov	r0, sp
   d7724:	f7ff fc71 	bl	d700a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7728:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d772c:	4299      	cmp	r1, r3
   d772e:	da10      	bge.n	d7752 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d7730:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7732:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d7734:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d7738:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d773c:	4629      	mov	r1, r5
   d773e:	f105 0008 	add.w	r0, r5, #8
   d7742:	f7ff ffa9 	bl	d7698 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d7746:	b98d      	cbnz	r5, d776c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d7748:	6863      	ldr	r3, [r4, #4]
   d774a:	3301      	adds	r3, #1
   d774c:	6063      	str	r3, [r4, #4]
    return true;
   d774e:	2601      	movs	r6, #1
   d7750:	e006      	b.n	d7760 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7752:	3101      	adds	r1, #1
   d7754:	4620      	mov	r0, r4
   d7756:	f7ff ffc9 	bl	d76ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d775a:	4606      	mov	r6, r0
   d775c:	2800      	cmp	r0, #0
   d775e:	d1e7      	bne.n	d7730 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d7760:	a801      	add	r0, sp, #4
   d7762:	f7ff fc66 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7766:	4630      	mov	r0, r6
   d7768:	b002      	add	sp, #8
   d776a:	bd70      	pop	{r4, r5, r6, pc}
   d776c:	4669      	mov	r1, sp
   d776e:	4628      	mov	r0, r5
   d7770:	f7ff fc4b 	bl	d700a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7774:	e7e8      	b.n	d7748 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d7776 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d7776:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d777a:	4604      	mov	r4, r0
   d777c:	460d      	mov	r5, r1
   d777e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7780:	d914      	bls.n	d77ac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7782:	4290      	cmp	r0, r2
   d7784:	d213      	bcs.n	d77ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d7786:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d778a:	1a75      	subs	r5, r6, r1
   d778c:	f1a1 0708 	sub.w	r7, r1, #8
   d7790:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d7792:	42b7      	cmp	r7, r6
   d7794:	d018      	beq.n	d77c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7796:	b11c      	cbz	r4, d77a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d7798:	4631      	mov	r1, r6
   d779a:	4620      	mov	r0, r4
   d779c:	f7ff fc27 	bl	d6fee <_ZN8particle17BleCharacteristicC1ERKS0_>
   d77a0:	1d30      	adds	r0, r6, #4
   d77a2:	f7ff fc46 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d77a6:	3e08      	subs	r6, #8
   d77a8:	3c08      	subs	r4, #8
   d77aa:	e7f2      	b.n	d7792 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d77ac:	d00c      	beq.n	d77c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d77ae:	42b5      	cmp	r5, r6
   d77b0:	d00a      	beq.n	d77c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d77b2:	b11c      	cbz	r4, d77bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d77b4:	4629      	mov	r1, r5
   d77b6:	4620      	mov	r0, r4
   d77b8:	f7ff fc19 	bl	d6fee <_ZN8particle17BleCharacteristicC1ERKS0_>
   d77bc:	1d28      	adds	r0, r5, #4
   d77be:	f7ff fc38 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d77c2:	3508      	adds	r5, #8
   d77c4:	3408      	adds	r4, #8
   d77c6:	e7f2      	b.n	d77ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d77c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d77ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d77ca:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d77cc:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d77ce:	4605      	mov	r5, r0
        if (n > 0) {
   d77d0:	dd11      	ble.n	d77f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d77d2:	00f0      	lsls	r0, r6, #3
   d77d4:	f7fe fb44 	bl	d5e60 <malloc>
            if (!d) {
   d77d8:	4604      	mov	r4, r0
   d77da:	b158      	cbz	r0, d77f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d77dc:	e9d5 1200 	ldrd	r1, r2, [r5]
   d77e0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d77e4:	f7ff ffc7 	bl	d7776 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d77e8:	6828      	ldr	r0, [r5, #0]
   d77ea:	f7fe fb41 	bl	d5e70 <free>
        data_ = d;
   d77ee:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d77f0:	60ae      	str	r6, [r5, #8]
        return true;
   d77f2:	2001      	movs	r0, #1
    }
   d77f4:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d77f6:	2400      	movs	r4, #0
   d77f8:	e7f6      	b.n	d77e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d77fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d77fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d77fc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d77fe:	6845      	ldr	r5, [r0, #4]
   d7800:	4668      	mov	r0, sp
   d7802:	f7ff fbf4 	bl	d6fee <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7806:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d780a:	4299      	cmp	r1, r3
   d780c:	da10      	bge.n	d7830 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d780e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7810:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d7812:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d7816:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d781a:	4629      	mov	r1, r5
   d781c:	f105 0008 	add.w	r0, r5, #8
   d7820:	f7ff ffa9 	bl	d7776 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d7824:	b98d      	cbnz	r5, d784a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d7826:	6863      	ldr	r3, [r4, #4]
   d7828:	3301      	adds	r3, #1
   d782a:	6063      	str	r3, [r4, #4]
    return true;
   d782c:	2601      	movs	r6, #1
   d782e:	e006      	b.n	d783e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7830:	3101      	adds	r1, #1
   d7832:	4620      	mov	r0, r4
   d7834:	f7ff ffc9 	bl	d77ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7838:	4606      	mov	r6, r0
   d783a:	2800      	cmp	r0, #0
   d783c:	d1e7      	bne.n	d780e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d783e:	a801      	add	r0, sp, #4
   d7840:	f7ff fbf7 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7844:	4630      	mov	r0, r6
   d7846:	b002      	add	sp, #8
   d7848:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d784a:	4669      	mov	r1, sp
   d784c:	4628      	mov	r0, r5
   d784e:	f7ff fbce 	bl	d6fee <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7852:	e7e8      	b.n	d7826 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d7854 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d7854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7858:	4617      	mov	r7, r2
   d785a:	b0a1      	sub	sp, #132	; 0x84
   d785c:	4680      	mov	r8, r0
    WiringBleLock lk;
   d785e:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d7860:	460e      	mov	r6, r1
    WiringBleLock lk;
   d7862:	f7ff f83a 	bl	d68da <_ZN8particle3ble13WiringBleLockC1Ev>
   d7866:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d7868:	7923      	ldrb	r3, [r4, #4]
   d786a:	b953      	cbnz	r3, d7882 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d786c:	4639      	mov	r1, r7
   d786e:	4640      	mov	r0, r8
   d7870:	f7ff fbbd 	bl	d6fee <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d7874:	a80a      	add	r0, sp, #40	; 0x28
   d7876:	f7ff f838 	bl	d68ea <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d787a:	4640      	mov	r0, r8
   d787c:	b021      	add	sp, #132	; 0x84
   d787e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7882:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   d7884:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   d7888:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d788c:	9303      	str	r3, [sp, #12]
   d788e:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d7892:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d7896:	9b03      	ldr	r3, [sp, #12]
   d7898:	429d      	cmp	r5, r3
   d789a:	d021      	beq.n	d78e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d789c:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   d78a0:	4658      	mov	r0, fp
   d78a2:	f109 0114 	add.w	r1, r9, #20
   d78a6:	f7ff f8d0 	bl	d6a4a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d78aa:	b1b8      	cbz	r0, d78dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d78ac:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d78b0:	4650      	mov	r0, sl
   d78b2:	f7ff f8ca 	bl	d6a4a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d78b6:	b188      	cbz	r0, d78dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d78b8:	6823      	ldr	r3, [r4, #0]
   d78ba:	f8d9 2000 	ldr.w	r2, [r9]
   d78be:	4053      	eors	r3, r2
   d78c0:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d78c4:	d10a      	bne.n	d78dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d78c6:	2220      	movs	r2, #32
   d78c8:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d78cc:	4a5e      	ldr	r2, [pc, #376]	; (d7a48 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d78ce:	9200      	str	r2, [sp, #0]
   d78d0:	aa15      	add	r2, sp, #84	; 0x54
   d78d2:	495e      	ldr	r1, [pc, #376]	; (d7a4c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d78d4:	2032      	movs	r0, #50	; 0x32
   d78d6:	f7fe f9dd 	bl	d5c94 <log_message>
   d78da:	e7c7      	b.n	d786c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d78dc:	3508      	adds	r5, #8
   d78de:	e7da      	b.n	d7896 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d78e0:	4650      	mov	r0, sl
   d78e2:	f7ff f87d 	bl	d69e0 <_ZNK8particle7BleUuid7isValidEv>
   d78e6:	b960      	cbnz	r0, d7902 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   d78e8:	4959      	ldr	r1, [pc, #356]	; (d7a50 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   d78ea:	2201      	movs	r2, #1
   d78ec:	a815      	add	r0, sp, #84	; 0x54
   d78ee:	ad15      	add	r5, sp, #84	; 0x54
   d78f0:	f7ff f84d 	bl	d698e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d78f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d78f6:	46d4      	mov	ip, sl
   d78f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d78fc:	682b      	ldr	r3, [r5, #0]
   d78fe:	f8cc 3000 	str.w	r3, [ip]
   d7902:	6833      	ldr	r3, [r6, #0]
   d7904:	e9d3 5300 	ldrd	r5, r3, [r3]
   d7908:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d790c:	455d      	cmp	r5, fp
   d790e:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   d7910:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   d7912:	d06e      	beq.n	d79f2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d7914:	f855 0b08 	ldr.w	r0, [r5], #8
   d7918:	f7ff f897 	bl	d6a4a <_ZNK8particle7BleUuideqERKS0_>
   d791c:	2800      	cmp	r0, #0
   d791e:	d0f5      	beq.n	d790c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   d7920:	f104 0a14 	add.w	sl, r4, #20
   d7924:	4650      	mov	r0, sl
   d7926:	f7ff f85b 	bl	d69e0 <_ZNK8particle7BleUuid7isValidEv>
   d792a:	b988      	cbnz	r0, d7950 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   d792c:	4b49      	ldr	r3, [pc, #292]	; (d7a54 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d792e:	4948      	ldr	r1, [pc, #288]	; (d7a50 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   d7930:	881a      	ldrh	r2, [r3, #0]
   d7932:	3201      	adds	r2, #1
   d7934:	b292      	uxth	r2, r2
   d7936:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d7938:	a815      	add	r0, sp, #84	; 0x54
   d793a:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   d793c:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d793e:	f7ff f845 	bl	d69cc <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d7942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7944:	46d4      	mov	ip, sl
   d7946:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d794a:	682b      	ldr	r3, [r5, #0]
   d794c:	f8cc 3000 	str.w	r3, [ip]
    hal_ble_char_init_t charInit = {};
   d7950:	2228      	movs	r2, #40	; 0x28
   d7952:	2100      	movs	r1, #0
   d7954:	a816      	add	r0, sp, #88	; 0x58
   d7956:	f002 f829 	bl	d99ac <memset>
    charInit.version = BLE_API_VERSION;
   d795a:	4b3f      	ldr	r3, [pc, #252]	; (d7a58 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d795c:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d795e:	4651      	mov	r1, sl
   d7960:	a804      	add	r0, sp, #16
   d7962:	f7ff f84f 	bl	d6a04 <_ZN8particle7BleUuid7halUUIDEv>
   d7966:	ab04      	add	r3, sp, #16
   d7968:	aa18      	add	r2, sp, #96	; 0x60
   d796a:	f10d 0c20 	add.w	ip, sp, #32
   d796e:	6818      	ldr	r0, [r3, #0]
   d7970:	6859      	ldr	r1, [r3, #4]
   d7972:	4615      	mov	r5, r2
   d7974:	c503      	stmia	r5!, {r0, r1}
   d7976:	3308      	adds	r3, #8
   d7978:	4563      	cmp	r3, ip
   d797a:	462a      	mov	r2, r5
   d797c:	d1f7      	bne.n	d796e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   d797e:	6818      	ldr	r0, [r3, #0]
   d7980:	6028      	str	r0, [r5, #0]
    charInit.properties = charImpl->properties().value();
   d7982:	7923      	ldrb	r3, [r4, #4]
   d7984:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d7988:	f8d9 3000 	ldr.w	r3, [r9]
   d798c:	8a9b      	ldrh	r3, [r3, #20]
   d798e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d7992:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7994:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d7996:	4b31      	ldr	r3, [pc, #196]	; (d7a5c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d7998:	2200      	movs	r2, #0
   d799a:	1da1      	adds	r1, r4, #6
   d799c:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d799e:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d79a2:	f7fd ffb7 	bl	d5914 <hal_ble_gatt_server_add_characteristic>
   d79a6:	2800      	cmp	r0, #0
   d79a8:	f47f af60 	bne.w	d786c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   d79ac:	2301      	movs	r3, #1
   d79ae:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d79b0:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d79b2:	4639      	mov	r1, r7
        return characteristics_;
   d79b4:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d79b6:	a80d      	add	r0, sp, #52	; 0x34
   d79b8:	f7ff fb19 	bl	d6fee <_ZN8particle17BleCharacteristicC1ERKS0_>
   d79bc:	4620      	mov	r0, r4
   d79be:	a90d      	add	r1, sp, #52	; 0x34
   d79c0:	f7ff ff1b 	bl	d77fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d79c4:	4604      	mov	r4, r0
   d79c6:	a80e      	add	r0, sp, #56	; 0x38
   d79c8:	f7ff fb33 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d79cc:	2c00      	cmp	r4, #0
   d79ce:	f47f af4d 	bne.w	d786c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d79d2:	2320      	movs	r3, #32
   d79d4:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d79d8:	4b21      	ldr	r3, [pc, #132]	; (d7a60 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   d79da:	9300      	str	r3, [sp, #0]
   d79dc:	aa0d      	add	r2, sp, #52	; 0x34
   d79de:	4623      	mov	r3, r4
   d79e0:	e777      	b.n	d78d2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d79e2:	4639      	mov	r1, r7
   d79e4:	4640      	mov	r0, r8
   d79e6:	f7ff fb02 	bl	d6fee <_ZN8particle17BleCharacteristicC1ERKS0_>
   d79ea:	a80c      	add	r0, sp, #48	; 0x30
   d79ec:	f7ff fb21 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d79f0:	e740      	b.n	d7874 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d79f2:	a80b      	add	r0, sp, #44	; 0x2c
   d79f4:	f7ff f994 	bl	d6d20 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d79f8:	4651      	mov	r1, sl
   d79fa:	a815      	add	r0, sp, #84	; 0x54
   d79fc:	f7ff f802 	bl	d6a04 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d7a00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d7a02:	2300      	movs	r3, #0
   d7a04:	3214      	adds	r2, #20
   d7a06:	a915      	add	r1, sp, #84	; 0x54
   d7a08:	2001      	movs	r0, #1
   d7a0a:	f7fd ff51 	bl	d58b0 <hal_ble_gatt_server_add_service>
   d7a0e:	2800      	cmp	r0, #0
   d7a10:	d1e7      	bne.n	d79e2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   d7a12:	6835      	ldr	r5, [r6, #0]
   d7a14:	a90b      	add	r1, sp, #44	; 0x2c
   d7a16:	a80d      	add	r0, sp, #52	; 0x34
   d7a18:	f7ff faf7 	bl	d700a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d7a1c:	4628      	mov	r0, r5
   d7a1e:	a90d      	add	r1, sp, #52	; 0x34
   d7a20:	f7ff fe7c 	bl	d771c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d7a24:	4605      	mov	r5, r0
   d7a26:	a80e      	add	r0, sp, #56	; 0x38
   d7a28:	f7ff fb03 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7a2c:	2d00      	cmp	r5, #0
   d7a2e:	d0d8      	beq.n	d79e2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   d7a30:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   d7a32:	6853      	ldr	r3, [r2, #4]
   d7a34:	6812      	ldr	r2, [r2, #0]
   d7a36:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d7a3a:	3b01      	subs	r3, #1
   d7a3c:	a80c      	add	r0, sp, #48	; 0x30
   d7a3e:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d7a42:	f7ff faf6 	bl	d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7a46:	e76b      	b.n	d7920 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   d7a48:	000da123 	.word	0x000da123
   d7a4c:	000da082 	.word	0x000da082
   d7a50:	000da1e4 	.word	0x000da1e4
   d7a54:	2003e658 	.word	0x2003e658
   d7a58:	002c0001 	.word	0x002c0001
   d7a5c:	000d6eb1 	.word	0x000d6eb1
   d7a60:	000da14e 	.word	0x000da14e

000d7a64 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d7a64:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d7a66:	4c06      	ldr	r4, [pc, #24]	; (d7a80 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7a68:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7a6a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7a6c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d7a6e:	f7fd ff79 	bl	d5964 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d7a72:	4620      	mov	r0, r4
   d7a74:	4a03      	ldr	r2, [pc, #12]	; (d7a84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7a76:	4904      	ldr	r1, [pc, #16]	; (d7a88 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7a7c:	f001 b916 	b.w	d8cac <__aeabi_atexit>
   d7a80:	2003e65c 	.word	0x2003e65c
   d7a84:	2003e0ac 	.word	0x2003e0ac
   d7a88:	000d66df 	.word	0x000d66df

000d7a8c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7a8e:	4606      	mov	r6, r0
   d7a90:	460d      	mov	r5, r1
  size_t n = 0;
   d7a92:	188f      	adds	r7, r1, r2
   d7a94:	2400      	movs	r4, #0
  while (size--) {
   d7a96:	42bd      	cmp	r5, r7
   d7a98:	d00c      	beq.n	d7ab4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7a9a:	6833      	ldr	r3, [r6, #0]
   d7a9c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7aa0:	689b      	ldr	r3, [r3, #8]
   d7aa2:	4630      	mov	r0, r6
   d7aa4:	4798      	blx	r3
     if (chunk>=0)
   d7aa6:	1e03      	subs	r3, r0, #0
   d7aa8:	db01      	blt.n	d7aae <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7aaa:	441c      	add	r4, r3
  while (size--) {
   d7aac:	e7f3      	b.n	d7a96 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7aae:	2c00      	cmp	r4, #0
   d7ab0:	bf08      	it	eq
   d7ab2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7ab4:	4620      	mov	r0, r4
   d7ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7ab8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7ab8:	b513      	push	{r0, r1, r4, lr}
   d7aba:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d7abc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7abe:	b159      	cbz	r1, d7ad8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7ac0:	9101      	str	r1, [sp, #4]
   d7ac2:	f001 ffb1 	bl	d9a28 <strlen>
   d7ac6:	6823      	ldr	r3, [r4, #0]
   d7ac8:	9901      	ldr	r1, [sp, #4]
   d7aca:	68db      	ldr	r3, [r3, #12]
   d7acc:	4602      	mov	r2, r0
   d7ace:	4620      	mov	r0, r4
    }
   d7ad0:	b002      	add	sp, #8
   d7ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7ad6:	4718      	bx	r3
    }
   d7ad8:	b002      	add	sp, #8
   d7ada:	bd10      	pop	{r4, pc}

000d7adc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d7adc:	b508      	push	{r3, lr}
  return write(str);
   d7ade:	f7ff ffeb 	bl	d7ab8 <_ZN5Print5writeEPKc>
}
   d7ae2:	bd08      	pop	{r3, pc}

000d7ae4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7ae4:	6803      	ldr	r3, [r0, #0]
   d7ae6:	689b      	ldr	r3, [r3, #8]
   d7ae8:	4718      	bx	r3

000d7aea <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   d7aea:	680a      	ldr	r2, [r1, #0]
 {
   d7aec:	460b      	mov	r3, r1
   return x.printTo(*this);
   d7aee:	6812      	ldr	r2, [r2, #0]
   d7af0:	4601      	mov	r1, r0
   d7af2:	4618      	mov	r0, r3
   d7af4:	4710      	bx	r2

000d7af6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7af6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7af8:	210d      	movs	r1, #13
{
   d7afa:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7afc:	f7ff fff2 	bl	d7ae4 <_ZN5Print5printEc>
  n += print('\n');
   d7b00:	210a      	movs	r1, #10
  size_t n = print('\r');
   d7b02:	4604      	mov	r4, r0
  n += print('\n');
   d7b04:	4628      	mov	r0, r5
   d7b06:	f7ff ffed 	bl	d7ae4 <_ZN5Print5printEc>
  return n;
}
   d7b0a:	4420      	add	r0, r4
   d7b0c:	bd38      	pop	{r3, r4, r5, pc}

000d7b0e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7b0e:	b538      	push	{r3, r4, r5, lr}
   d7b10:	4605      	mov	r5, r0
  return write(str);
   d7b12:	f7ff ffd1 	bl	d7ab8 <_ZN5Print5writeEPKc>
   d7b16:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d7b18:	4628      	mov	r0, r5
   d7b1a:	f7ff ffec 	bl	d7af6 <_ZN5Print7printlnEv>
  return n;
}
   d7b1e:	4420      	add	r0, r4
   d7b20:	bd38      	pop	{r3, r4, r5, pc}

000d7b22 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7b22:	b530      	push	{r4, r5, lr}
   d7b24:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7b26:	2300      	movs	r3, #0
   d7b28:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7b2c:	2a01      	cmp	r2, #1
   d7b2e:	bf98      	it	ls
   d7b30:	220a      	movls	r2, #10
   d7b32:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7b34:	460d      	mov	r5, r1
   d7b36:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7b3a:	fb01 5312 	mls	r3, r1, r2, r5
   d7b3e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7b42:	2b09      	cmp	r3, #9
   d7b44:	bf94      	ite	ls
   d7b46:	3330      	addls	r3, #48	; 0x30
   d7b48:	3337      	addhi	r3, #55	; 0x37
   d7b4a:	b2db      	uxtb	r3, r3
  } while(n);
   d7b4c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7b4e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7b52:	d9ef      	bls.n	d7b34 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7b54:	4621      	mov	r1, r4
   d7b56:	f7ff ffaf 	bl	d7ab8 <_ZN5Print5writeEPKc>
}
   d7b5a:	b00b      	add	sp, #44	; 0x2c
   d7b5c:	bd30      	pop	{r4, r5, pc}
	...

000d7b60 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d7b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7b64:	ec55 4b10 	vmov	r4, r5, d0
   d7b68:	4606      	mov	r6, r0
   d7b6a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d7b6c:	ee10 2a10 	vmov	r2, s0
   d7b70:	ee10 0a10 	vmov	r0, s0
   d7b74:	462b      	mov	r3, r5
   d7b76:	4629      	mov	r1, r5
   d7b78:	f001 fe0e 	bl	d9798 <__aeabi_dcmpun>
   d7b7c:	b140      	cbz	r0, d7b90 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d7b7e:	4953      	ldr	r1, [pc, #332]	; (d7ccc <_ZN5Print10printFloatEdh+0x16c>)
   d7b80:	4630      	mov	r0, r6
   d7b82:	f7ff ff99 	bl	d7ab8 <_ZN5Print5writeEPKc>
   d7b86:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d7b88:	4650      	mov	r0, sl
   d7b8a:	b003      	add	sp, #12
   d7b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d7b90:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d7b94:	4b4e      	ldr	r3, [pc, #312]	; (d7cd0 <_ZN5Print10printFloatEdh+0x170>)
   d7b96:	f04f 32ff 	mov.w	r2, #4294967295
   d7b9a:	4620      	mov	r0, r4
   d7b9c:	4649      	mov	r1, r9
   d7b9e:	f001 fdfb 	bl	d9798 <__aeabi_dcmpun>
   d7ba2:	b948      	cbnz	r0, d7bb8 <_ZN5Print10printFloatEdh+0x58>
   d7ba4:	4b4a      	ldr	r3, [pc, #296]	; (d7cd0 <_ZN5Print10printFloatEdh+0x170>)
   d7ba6:	f04f 32ff 	mov.w	r2, #4294967295
   d7baa:	4620      	mov	r0, r4
   d7bac:	4649      	mov	r1, r9
   d7bae:	f001 fdd5 	bl	d975c <__aeabi_dcmple>
   d7bb2:	b908      	cbnz	r0, d7bb8 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d7bb4:	4947      	ldr	r1, [pc, #284]	; (d7cd4 <_ZN5Print10printFloatEdh+0x174>)
   d7bb6:	e7e3      	b.n	d7b80 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d7bb8:	4b47      	ldr	r3, [pc, #284]	; (d7cd8 <_ZN5Print10printFloatEdh+0x178>)
   d7bba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7bbe:	4620      	mov	r0, r4
   d7bc0:	4629      	mov	r1, r5
   d7bc2:	f001 fddf 	bl	d9784 <__aeabi_dcmpgt>
   d7bc6:	b108      	cbz	r0, d7bcc <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d7bc8:	4944      	ldr	r1, [pc, #272]	; (d7cdc <_ZN5Print10printFloatEdh+0x17c>)
   d7bca:	e7d9      	b.n	d7b80 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d7bcc:	4b44      	ldr	r3, [pc, #272]	; (d7ce0 <_ZN5Print10printFloatEdh+0x180>)
   d7bce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7bd2:	4620      	mov	r0, r4
   d7bd4:	4629      	mov	r1, r5
   d7bd6:	f001 fdb7 	bl	d9748 <__aeabi_dcmplt>
   d7bda:	2800      	cmp	r0, #0
   d7bdc:	d1f4      	bne.n	d7bc8 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d7bde:	2200      	movs	r2, #0
   d7be0:	2300      	movs	r3, #0
   d7be2:	4620      	mov	r0, r4
   d7be4:	4629      	mov	r1, r5
   d7be6:	f001 fdaf 	bl	d9748 <__aeabi_dcmplt>
   d7bea:	b1d0      	cbz	r0, d7c22 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d7bec:	212d      	movs	r1, #45	; 0x2d
   d7bee:	4630      	mov	r0, r6
   d7bf0:	f7ff ff78 	bl	d7ae4 <_ZN5Print5printEc>
     number = -number;
   d7bf4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d7bf8:	4682      	mov	sl, r0
     number = -number;
   d7bfa:	461d      	mov	r5, r3
  double rounding = 0.5;
   d7bfc:	4939      	ldr	r1, [pc, #228]	; (d7ce4 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d7bfe:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d7cec <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d7c02:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d7c06:	2000      	movs	r0, #0
    rounding /= 10.0;
   d7c08:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d7c0c:	fa5f f38b 	uxtb.w	r3, fp
   d7c10:	429f      	cmp	r7, r3
   d7c12:	d908      	bls.n	d7c26 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d7c14:	4642      	mov	r2, r8
   d7c16:	464b      	mov	r3, r9
   d7c18:	f001 fc4e 	bl	d94b8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d7c1c:	f10b 0b01 	add.w	fp, fp, #1
   d7c20:	e7f4      	b.n	d7c0c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d7c22:	4682      	mov	sl, r0
   d7c24:	e7ea      	b.n	d7bfc <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d7c26:	4622      	mov	r2, r4
   d7c28:	462b      	mov	r3, r5
   d7c2a:	f001 f965 	bl	d8ef8 <__adddf3>
   d7c2e:	460d      	mov	r5, r1
   d7c30:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d7c32:	f001 fdef 	bl	d9814 <__aeabi_d2uiz>
   d7c36:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d7c38:	f001 fa9a 	bl	d9170 <__aeabi_ui2d>
   d7c3c:	4602      	mov	r2, r0
   d7c3e:	460b      	mov	r3, r1
   d7c40:	4620      	mov	r0, r4
   d7c42:	4629      	mov	r1, r5
   d7c44:	f001 f956 	bl	d8ef4 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7c48:	220a      	movs	r2, #10
   d7c4a:	4604      	mov	r4, r0
   d7c4c:	460d      	mov	r5, r1
   d7c4e:	4630      	mov	r0, r6
   d7c50:	4641      	mov	r1, r8
   d7c52:	f7ff ff66 	bl	d7b22 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d7c56:	4482      	add	sl, r0
  if (digits > 0) {
   d7c58:	b127      	cbz	r7, d7c64 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d7c5a:	4923      	ldr	r1, [pc, #140]	; (d7ce8 <_ZN5Print10printFloatEdh+0x188>)
   d7c5c:	4630      	mov	r0, r6
   d7c5e:	f7ff ff2b 	bl	d7ab8 <_ZN5Print5writeEPKc>
    n += print(".");
   d7c62:	4482      	add	sl, r0
    remainder *= 10.0;
   d7c64:	f8df 9084 	ldr.w	r9, [pc, #132]	; d7cec <_ZN5Print10printFloatEdh+0x18c>
   d7c68:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d7c6c:	3f01      	subs	r7, #1
   d7c6e:	b2ff      	uxtb	r7, r7
   d7c70:	2fff      	cmp	r7, #255	; 0xff
   d7c72:	d089      	beq.n	d7b88 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d7c74:	4642      	mov	r2, r8
   d7c76:	464b      	mov	r3, r9
   d7c78:	4620      	mov	r0, r4
   d7c7a:	4629      	mov	r1, r5
   d7c7c:	f001 faf2 	bl	d9264 <__aeabi_dmul>
   d7c80:	4604      	mov	r4, r0
   d7c82:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d7c84:	f001 fd9e 	bl	d97c4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d7c88:	f1b0 0b00 	subs.w	fp, r0, #0
   d7c8c:	da1a      	bge.n	d7cc4 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d7c8e:	212d      	movs	r1, #45	; 0x2d
   d7c90:	4630      	mov	r0, r6
   d7c92:	f7ff ff27 	bl	d7ae4 <_ZN5Print5printEc>
            val = -n;
   d7c96:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d7c9a:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d7c9c:	220a      	movs	r2, #10
   d7c9e:	4630      	mov	r0, r6
   d7ca0:	9301      	str	r3, [sp, #4]
   d7ca2:	f7ff ff3e 	bl	d7b22 <_ZN5Print11printNumberEmh>
   d7ca6:	9b01      	ldr	r3, [sp, #4]
   d7ca8:	4418      	add	r0, r3
    n += print(toPrint);
   d7caa:	4482      	add	sl, r0
    remainder -= toPrint;
   d7cac:	4658      	mov	r0, fp
   d7cae:	f001 fa6f 	bl	d9190 <__aeabi_i2d>
   d7cb2:	4602      	mov	r2, r0
   d7cb4:	460b      	mov	r3, r1
   d7cb6:	4620      	mov	r0, r4
   d7cb8:	4629      	mov	r1, r5
   d7cba:	f001 f91b 	bl	d8ef4 <__aeabi_dsub>
   d7cbe:	4604      	mov	r4, r0
   d7cc0:	460d      	mov	r5, r1
  while (digits-- > 0)
   d7cc2:	e7d3      	b.n	d7c6c <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d7cc4:	4659      	mov	r1, fp
        size_t t = 0;
   d7cc6:	2300      	movs	r3, #0
   d7cc8:	e7e8      	b.n	d7c9c <_ZN5Print10printFloatEdh+0x13c>
   d7cca:	bf00      	nop
   d7ccc:	000da204 	.word	0x000da204
   d7cd0:	7fefffff 	.word	0x7fefffff
   d7cd4:	000da208 	.word	0x000da208
   d7cd8:	41efffff 	.word	0x41efffff
   d7cdc:	000da20c 	.word	0x000da20c
   d7ce0:	c1efffff 	.word	0xc1efffff
   d7ce4:	3fe00000 	.word	0x3fe00000
   d7ce8:	000d9fbb 	.word	0x000d9fbb
   d7cec:	40240000 	.word	0x40240000

000d7cf0 <_ZN5Print7printlnEdi>:
{
   d7cf0:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d7cf2:	b2c9      	uxtb	r1, r1
{
   d7cf4:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d7cf6:	f7ff ff33 	bl	d7b60 <_ZN5Print10printFloatEdh>
   d7cfa:	4604      	mov	r4, r0
  n += println();
   d7cfc:	4628      	mov	r0, r5
   d7cfe:	f7ff fefa 	bl	d7af6 <_ZN5Print7printlnEv>
}
   d7d02:	4420      	add	r0, r4
   d7d04:	bd38      	pop	{r3, r4, r5, pc}

000d7d06 <_ZN5Print7printlnEfi>:
{
   d7d06:	b538      	push	{r3, r4, r5, lr}
   d7d08:	4604      	mov	r4, r0
   d7d0a:	ee10 0a10 	vmov	r0, s0
   d7d0e:	460d      	mov	r5, r1
    return println((double)num, digits);
   d7d10:	f001 fa50 	bl	d91b4 <__aeabi_f2d>
   d7d14:	ec41 0b10 	vmov	d0, r0, r1
   d7d18:	4629      	mov	r1, r5
   d7d1a:	4620      	mov	r0, r4
}
   d7d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d7d20:	f7ff bfe6 	b.w	d7cf0 <_ZN5Print7printlnEdi>

000d7d24 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7d24:	2300      	movs	r3, #0
   d7d26:	6840      	ldr	r0, [r0, #4]
   d7d28:	461a      	mov	r2, r3
   d7d2a:	4619      	mov	r1, r3
   d7d2c:	f7fe b818 	b.w	d5d60 <network_on>

000d7d30 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7d30:	4b01      	ldr	r3, [pc, #4]	; (d7d38 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7d32:	4a02      	ldr	r2, [pc, #8]	; (d7d3c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7d34:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7d36:	4770      	bx	lr
   d7d38:	2003e664 	.word	0x2003e664
   d7d3c:	000da210 	.word	0x000da210

000d7d40 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d7d40:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7d42:	2000      	movs	r0, #0
   d7d44:	f7fe f874 	bl	d5e30 <spark_sync_time_pending>
   d7d48:	b128      	cbz	r0, d7d56 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7d4a:	f7fe f869 	bl	d5e20 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7d4e:	f080 0001 	eor.w	r0, r0, #1
   d7d52:	b2c0      	uxtb	r0, r0
    }
   d7d54:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7d56:	2001      	movs	r0, #1
   d7d58:	e7fc      	b.n	d7d54 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d7d5a <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7d5a:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d7d5c:	2000      	movs	r0, #0
   d7d5e:	f7fd fd65 	bl	d582c <hal_rtc_time_is_valid>
    if (rtcstate)
   d7d62:	4604      	mov	r4, r0
   d7d64:	b9a0      	cbnz	r0, d7d90 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7d66:	f7fd ff9d 	bl	d5ca4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7d6a:	2801      	cmp	r0, #1
   d7d6c:	d110      	bne.n	d7d90 <_ZN9TimeClass7isValidEv+0x36>
   d7d6e:	4620      	mov	r0, r4
   d7d70:	f7fd ffb0 	bl	d5cd4 <system_thread_get_state>
   d7d74:	b960      	cbnz	r0, d7d90 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d7d76:	f7ff ffe3 	bl	d7d40 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7d7a:	b910      	cbnz	r0, d7d82 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d7d7c:	f7fe f840 	bl	d5e00 <spark_process>
        while (_while() && !_condition()) {
   d7d80:	e7f9      	b.n	d7d76 <_ZN9TimeClass7isValidEv+0x1c>
   d7d82:	f7ff ffdd 	bl	d7d40 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d7d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d7d8a:	2000      	movs	r0, #0
   d7d8c:	f7fd bd4e 	b.w	d582c <hal_rtc_time_is_valid>
}
   d7d90:	4620      	mov	r0, r4
   d7d92:	bd10      	pop	{r4, pc}

000d7d94 <_ZN9TimeClass3nowEv>:
{
   d7d94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d7d96:	f7ff ffe0 	bl	d7d5a <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d7d9a:	2210      	movs	r2, #16
   d7d9c:	2100      	movs	r1, #0
   d7d9e:	4668      	mov	r0, sp
   d7da0:	f001 fe04 	bl	d99ac <memset>
    hal_rtc_get_time(&tv, nullptr);
   d7da4:	2100      	movs	r1, #0
   d7da6:	4668      	mov	r0, sp
   d7da8:	f7fd fd48 	bl	d583c <hal_rtc_get_time>
}
   d7dac:	9800      	ldr	r0, [sp, #0]
   d7dae:	b005      	add	sp, #20
   d7db0:	f85d fb04 	ldr.w	pc, [sp], #4

000d7db4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7db4:	4b02      	ldr	r3, [pc, #8]	; (d7dc0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7db6:	681a      	ldr	r2, [r3, #0]
   d7db8:	4b02      	ldr	r3, [pc, #8]	; (d7dc4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7dba:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7dbc:	4770      	bx	lr
   d7dbe:	bf00      	nop
   d7dc0:	2003e044 	.word	0x2003e044
   d7dc4:	2003e668 	.word	0x2003e668

000d7dc8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7dc8:	2100      	movs	r1, #0
   d7dca:	f7fd bf7b 	b.w	d5cc4 <system_delay_ms>

000d7dce <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7dce:	b510      	push	{r4, lr}
   d7dd0:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d7dd2:	f7fe fd59 	bl	d6888 <_ZNSt14_Function_baseD1Ev>
   d7dd6:	4620      	mov	r0, r4
   d7dd8:	bd10      	pop	{r4, pc}
	...

000d7ddc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7ddc:	4803      	ldr	r0, [pc, #12]	; (d7dec <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7dde:	4a04      	ldr	r2, [pc, #16]	; (d7df0 <_GLOBAL__sub_I_RGB+0x14>)
   d7de0:	4904      	ldr	r1, [pc, #16]	; (d7df4 <_GLOBAL__sub_I_RGB+0x18>)
   d7de2:	2300      	movs	r3, #0
   d7de4:	6083      	str	r3, [r0, #8]
   d7de6:	f000 bf61 	b.w	d8cac <__aeabi_atexit>
   d7dea:	bf00      	nop
   d7dec:	2003e66c 	.word	0x2003e66c
   d7df0:	2003e0ac 	.word	0x2003e0ac
   d7df4:	000d7dcf 	.word	0x000d7dcf

000d7df8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7df8:	4b01      	ldr	r3, [pc, #4]	; (d7e00 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7dfa:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7dfc:	4770      	bx	lr
   d7dfe:	bf00      	nop
   d7e00:	2003e048 	.word	0x2003e048

000d7e04 <serialEventRun>:
{
   d7e04:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7e06:	4b0b      	ldr	r3, [pc, #44]	; (d7e34 <serialEventRun+0x30>)
   d7e08:	b143      	cbz	r3, d7e1c <serialEventRun+0x18>
   d7e0a:	f000 f985 	bl	d8118 <_Z16_fetch_usbserialv>
   d7e0e:	6803      	ldr	r3, [r0, #0]
   d7e10:	691b      	ldr	r3, [r3, #16]
   d7e12:	4798      	blx	r3
   d7e14:	2800      	cmp	r0, #0
   d7e16:	dd01      	ble.n	d7e1c <serialEventRun+0x18>
        serialEvent();
   d7e18:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7e1c:	4b06      	ldr	r3, [pc, #24]	; (d7e38 <serialEventRun+0x34>)
   d7e1e:	b143      	cbz	r3, d7e32 <serialEventRun+0x2e>
   d7e20:	f000 f9f8 	bl	d8214 <_Z22__fetch_global_Serial1v>
   d7e24:	6803      	ldr	r3, [r0, #0]
   d7e26:	691b      	ldr	r3, [r3, #16]
   d7e28:	4798      	blx	r3
   d7e2a:	2800      	cmp	r0, #0
   d7e2c:	dd01      	ble.n	d7e32 <serialEventRun+0x2e>
        serialEvent1();
   d7e2e:	f3af 8000 	nop.w
}
   d7e32:	bd08      	pop	{r3, pc}
	...

000d7e3c <_post_loop>:
{
   d7e3c:	b508      	push	{r3, lr}
	serialEventRun();
   d7e3e:	f7ff ffe1 	bl	d7e04 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7e42:	f7fd fcd3 	bl	d57ec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7e46:	4b01      	ldr	r3, [pc, #4]	; (d7e4c <_post_loop+0x10>)
   d7e48:	6018      	str	r0, [r3, #0]
}
   d7e4a:	bd08      	pop	{r3, pc}
   d7e4c:	2003e7cc 	.word	0x2003e7cc

000d7e50 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7e50:	4802      	ldr	r0, [pc, #8]	; (d7e5c <_Z33system_initialize_user_backup_ramv+0xc>)
   d7e52:	4a03      	ldr	r2, [pc, #12]	; (d7e60 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7e54:	4903      	ldr	r1, [pc, #12]	; (d7e64 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7e56:	1a12      	subs	r2, r2, r0
   d7e58:	f001 bd80 	b.w	d995c <memcpy>
   d7e5c:	2003f400 	.word	0x2003f400
   d7e60:	2003f404 	.word	0x2003f404
   d7e64:	000da5e0 	.word	0x000da5e0

000d7e68 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7e68:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7e6a:	2300      	movs	r3, #0
   d7e6c:	9300      	str	r3, [sp, #0]
   d7e6e:	461a      	mov	r2, r3
   d7e70:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7e74:	f7fd ff40 	bl	d5cf8 <system_ctrl_set_result>
}
   d7e78:	b003      	add	sp, #12
   d7e7a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7e80 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7e80:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7e82:	8843      	ldrh	r3, [r0, #2]
   d7e84:	2b0a      	cmp	r3, #10
   d7e86:	d008      	beq.n	d7e9a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7e88:	2b50      	cmp	r3, #80	; 0x50
   d7e8a:	d10b      	bne.n	d7ea4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7e8c:	4b09      	ldr	r3, [pc, #36]	; (d7eb4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7e8e:	681b      	ldr	r3, [r3, #0]
   d7e90:	b14b      	cbz	r3, d7ea6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7e92:	b003      	add	sp, #12
   d7e94:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7e98:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7e9a:	f7ff ffe5 	bl	d7e68 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d7e9e:	b003      	add	sp, #12
   d7ea0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7ea4:	2300      	movs	r3, #0
   d7ea6:	9300      	str	r3, [sp, #0]
   d7ea8:	461a      	mov	r2, r3
   d7eaa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7eae:	f7fd ff23 	bl	d5cf8 <system_ctrl_set_result>
}
   d7eb2:	e7f4      	b.n	d7e9e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7eb4:	2003e680 	.word	0x2003e680

000d7eb8 <module_user_init_hook>:
{
   d7eb8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7eba:	4c12      	ldr	r4, [pc, #72]	; (d7f04 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7ebc:	4812      	ldr	r0, [pc, #72]	; (d7f08 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7ebe:	4d13      	ldr	r5, [pc, #76]	; (d7f0c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7ec0:	2100      	movs	r1, #0
   d7ec2:	f7fd fff5 	bl	d5eb0 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7ec6:	6823      	ldr	r3, [r4, #0]
   d7ec8:	42ab      	cmp	r3, r5
   d7eca:	4b11      	ldr	r3, [pc, #68]	; (d7f10 <module_user_init_hook+0x58>)
   d7ecc:	bf0c      	ite	eq
   d7ece:	2201      	moveq	r2, #1
   d7ed0:	2200      	movne	r2, #0
   d7ed2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7ed4:	d002      	beq.n	d7edc <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7ed6:	f7ff ffbb 	bl	d7e50 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7eda:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7edc:	f7fd fc76 	bl	d57cc <HAL_RNG_GetRandomNumber>
   d7ee0:	4604      	mov	r4, r0
    srand(seed);
   d7ee2:	f001 fd6b 	bl	d99bc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7ee6:	4b0b      	ldr	r3, [pc, #44]	; (d7f14 <module_user_init_hook+0x5c>)
   d7ee8:	b113      	cbz	r3, d7ef0 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d7eea:	4620      	mov	r0, r4
   d7eec:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7ef0:	2100      	movs	r1, #0
   d7ef2:	4808      	ldr	r0, [pc, #32]	; (d7f14 <module_user_init_hook+0x5c>)
   d7ef4:	f7fd ffa4 	bl	d5e40 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7efc:	4806      	ldr	r0, [pc, #24]	; (d7f18 <module_user_init_hook+0x60>)
   d7efe:	2100      	movs	r1, #0
   d7f00:	f7fd bef0 	b.w	d5ce4 <system_ctrl_set_app_request_handler>
   d7f04:	2003f400 	.word	0x2003f400
   d7f08:	000d7df9 	.word	0x000d7df9
   d7f0c:	9a271c1e 	.word	0x9a271c1e
   d7f10:	2003e67c 	.word	0x2003e67c
   d7f14:	00000000 	.word	0x00000000
   d7f18:	000d7e81 	.word	0x000d7e81

000d7f1c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d7f1c:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d7f1e:	2308      	movs	r3, #8
   d7f20:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d7f24:	6803      	ldr	r3, [r0, #0]
   d7f26:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d7f2a:	7a03      	ldrb	r3, [r0, #8]
   d7f2c:	f88d 3003 	strb.w	r3, [sp, #3]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d7f30:	2100      	movs	r1, #0
    opts.timeout = timeout_;
   d7f32:	6843      	ldr	r3, [r0, #4]
   d7f34:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d7f36:	4668      	mov	r0, sp
   d7f38:	f7fd ff8a 	bl	d5e50 <spark_cloud_disconnect>
}
   d7f3c:	b003      	add	sp, #12
   d7f3e:	f85d fb04 	ldr.w	pc, [sp], #4

000d7f42 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d7f42:	4770      	bx	lr

000d7f44 <_ZN9IPAddressD0Ev>:
   d7f44:	b510      	push	{r4, lr}
   d7f46:	2118      	movs	r1, #24
   d7f48:	4604      	mov	r4, r0
   d7f4a:	f000 feb4 	bl	d8cb6 <_ZdlPvj>
   d7f4e:	4620      	mov	r0, r4
   d7f50:	bd10      	pop	{r4, pc}

000d7f52 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7f52:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7f54:	7d03      	ldrb	r3, [r0, #20]
   d7f56:	2b06      	cmp	r3, #6
{
   d7f58:	b08d      	sub	sp, #52	; 0x34
   d7f5a:	460e      	mov	r6, r1
   d7f5c:	f100 0704 	add.w	r7, r0, #4
   d7f60:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d7f64:	d012      	beq.n	d7f8c <_ZNK9IPAddress7printToER5Print+0x3a>
   d7f66:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d7f6a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7f6e:	220a      	movs	r2, #10
   d7f70:	4630      	mov	r0, r6
   d7f72:	f7ff fdd6 	bl	d7b22 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7f76:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7f78:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7f7a:	d019      	beq.n	d7fb0 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d7f7c:	2c00      	cmp	r4, #0
   d7f7e:	d0f4      	beq.n	d7f6a <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d7f80:	212e      	movs	r1, #46	; 0x2e
   d7f82:	4630      	mov	r0, r6
   d7f84:	f7ff fdae 	bl	d7ae4 <_ZN5Print5printEc>
   d7f88:	4404      	add	r4, r0
   d7f8a:	e7ee      	b.n	d7f6a <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7f8c:	232f      	movs	r3, #47	; 0x2f
   d7f8e:	466a      	mov	r2, sp
   d7f90:	4639      	mov	r1, r7
   d7f92:	200a      	movs	r0, #10
		buf[0] = 0;
   d7f94:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7f98:	f7fd fd04 	bl	d59a4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d7f9c:	4668      	mov	r0, sp
   d7f9e:	f001 fd43 	bl	d9a28 <strlen>
   d7fa2:	6833      	ldr	r3, [r6, #0]
   d7fa4:	4602      	mov	r2, r0
   d7fa6:	68db      	ldr	r3, [r3, #12]
   d7fa8:	4669      	mov	r1, sp
   d7faa:	4630      	mov	r0, r6
   d7fac:	4798      	blx	r3
   d7fae:	4604      	mov	r4, r0
    }
    return n;
}
   d7fb0:	4620      	mov	r0, r4
   d7fb2:	b00d      	add	sp, #52	; 0x34
   d7fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7fb8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7fb8:	b510      	push	{r4, lr}
   d7fba:	4b05      	ldr	r3, [pc, #20]	; (d7fd0 <_ZN9IPAddressC1Ev+0x18>)
   d7fbc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7fbe:	2211      	movs	r2, #17
   d7fc0:	f840 3b04 	str.w	r3, [r0], #4
   d7fc4:	2100      	movs	r1, #0
   d7fc6:	f001 fcf1 	bl	d99ac <memset>
}
   d7fca:	4620      	mov	r0, r4
   d7fcc:	bd10      	pop	{r4, pc}
   d7fce:	bf00      	nop
   d7fd0:	000da238 	.word	0x000da238

000d7fd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7fd4:	4603      	mov	r3, r0
   d7fd6:	4a07      	ldr	r2, [pc, #28]	; (d7ff4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7fd8:	b510      	push	{r4, lr}
   d7fda:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7fde:	f101 0210 	add.w	r2, r1, #16
   d7fe2:	f851 4b04 	ldr.w	r4, [r1], #4
   d7fe6:	f843 4b04 	str.w	r4, [r3], #4
   d7fea:	4291      	cmp	r1, r2
   d7fec:	d1f9      	bne.n	d7fe2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7fee:	780a      	ldrb	r2, [r1, #0]
   d7ff0:	701a      	strb	r2, [r3, #0]
}
   d7ff2:	bd10      	pop	{r4, pc}
   d7ff4:	000da238 	.word	0x000da238

000d7ff8 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d7ff8:	7d03      	ldrb	r3, [r0, #20]
   d7ffa:	2b04      	cmp	r3, #4
   d7ffc:	d104      	bne.n	d8008 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d7ffe:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d8000:	3800      	subs	r0, #0
   d8002:	bf18      	it	ne
   d8004:	2001      	movne	r0, #1
   d8006:	4770      	bx	lr
    } else if (version() == 6) {
   d8008:	2b06      	cmp	r3, #6
   d800a:	d107      	bne.n	d801c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d800c:	6843      	ldr	r3, [r0, #4]
   d800e:	b93b      	cbnz	r3, d8020 <_ZNK9IPAddresscvbEv+0x28>
   d8010:	6883      	ldr	r3, [r0, #8]
   d8012:	b92b      	cbnz	r3, d8020 <_ZNK9IPAddresscvbEv+0x28>
   d8014:	68c3      	ldr	r3, [r0, #12]
   d8016:	b91b      	cbnz	r3, d8020 <_ZNK9IPAddresscvbEv+0x28>
   d8018:	6900      	ldr	r0, [r0, #16]
   d801a:	e7f1      	b.n	d8000 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d801c:	2000      	movs	r0, #0
   d801e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d8020:	2001      	movs	r0, #1
}
   d8022:	4770      	bx	lr

000d8024 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d8024:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8026:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d802a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d802e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8032:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d8036:	2304      	movs	r3, #4
   d8038:	6041      	str	r1, [r0, #4]
   d803a:	7503      	strb	r3, [r0, #20]
}
   d803c:	bd10      	pop	{r4, pc}
	...

000d8040 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d8040:	b513      	push	{r0, r1, r4, lr}
   d8042:	4b05      	ldr	r3, [pc, #20]	; (d8058 <_ZN9IPAddressC1EPKh+0x18>)
   d8044:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d8046:	78cb      	ldrb	r3, [r1, #3]
   d8048:	9300      	str	r3, [sp, #0]
   d804a:	788b      	ldrb	r3, [r1, #2]
   d804c:	784a      	ldrb	r2, [r1, #1]
   d804e:	7809      	ldrb	r1, [r1, #0]
   d8050:	f7ff ffe8 	bl	d8024 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8054:	b002      	add	sp, #8
   d8056:	bd10      	pop	{r4, pc}
   d8058:	000da238 	.word	0x000da238

000d805c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d805c:	7441      	strb	r1, [r0, #17]
}
   d805e:	4770      	bx	lr

000d8060 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8060:	4770      	bx	lr

000d8062 <_ZN9USBSerial4readEv>:
{
   d8062:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8064:	2100      	movs	r1, #0
   d8066:	7c00      	ldrb	r0, [r0, #16]
   d8068:	f7fd fdf4 	bl	d5c54 <HAL_USB_USART_Receive_Data>
}
   d806c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8070:	bd08      	pop	{r3, pc}

000d8072 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d8072:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8074:	2101      	movs	r1, #1
   d8076:	7c00      	ldrb	r0, [r0, #16]
   d8078:	f7fd fdec 	bl	d5c54 <HAL_USB_USART_Receive_Data>
}
   d807c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8080:	bd08      	pop	{r3, pc}

000d8082 <_ZN9USBSerial17availableForWriteEv>:
{
   d8082:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8084:	7c00      	ldrb	r0, [r0, #16]
   d8086:	f7fd fddd 	bl	d5c44 <HAL_USB_USART_Available_Data_For_Write>
}
   d808a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d808e:	bd08      	pop	{r3, pc}

000d8090 <_ZN9USBSerial9availableEv>:
{
   d8090:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8092:	7c00      	ldrb	r0, [r0, #16]
   d8094:	f7fd fdce 	bl	d5c34 <HAL_USB_USART_Available_Data>
}
   d8098:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d809c:	bd08      	pop	{r3, pc}

000d809e <_ZN9USBSerial5writeEh>:
{
   d809e:	b513      	push	{r0, r1, r4, lr}
   d80a0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d80a2:	7c00      	ldrb	r0, [r0, #16]
{
   d80a4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d80a6:	f7fd fdcd 	bl	d5c44 <HAL_USB_USART_Available_Data_For_Write>
   d80aa:	2800      	cmp	r0, #0
   d80ac:	9901      	ldr	r1, [sp, #4]
   d80ae:	dc01      	bgt.n	d80b4 <_ZN9USBSerial5writeEh+0x16>
   d80b0:	7c60      	ldrb	r0, [r4, #17]
   d80b2:	b120      	cbz	r0, d80be <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d80b4:	7c20      	ldrb	r0, [r4, #16]
   d80b6:	f7fd fdd5 	bl	d5c64 <HAL_USB_USART_Send_Data>
   d80ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d80be:	b002      	add	sp, #8
   d80c0:	bd10      	pop	{r4, pc}

000d80c2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d80c2:	7c00      	ldrb	r0, [r0, #16]
   d80c4:	f7fd bdd6 	b.w	d5c74 <HAL_USB_USART_Flush_Data>

000d80c8 <_ZN9USBSerialD0Ev>:
   d80c8:	b510      	push	{r4, lr}
   d80ca:	2114      	movs	r1, #20
   d80cc:	4604      	mov	r4, r0
   d80ce:	f000 fdf2 	bl	d8cb6 <_ZdlPvj>
   d80d2:	4620      	mov	r0, r4
   d80d4:	bd10      	pop	{r4, pc}
	...

000d80d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d80d8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d80da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d80de:	4604      	mov	r4, r0
   d80e0:	4608      	mov	r0, r1
   d80e2:	2100      	movs	r1, #0
   d80e4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d80e8:	4b04      	ldr	r3, [pc, #16]	; (d80fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d80ea:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d80ec:	2301      	movs	r3, #1
  _serial = serial;
   d80ee:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d80f0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d80f2:	4611      	mov	r1, r2
   d80f4:	f7fd fd8e 	bl	d5c14 <HAL_USB_USART_Init>
}
   d80f8:	4620      	mov	r0, r4
   d80fa:	bd10      	pop	{r4, pc}
   d80fc:	000da24c 	.word	0x000da24c

000d8100 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8100:	7c00      	ldrb	r0, [r0, #16]
   d8102:	2200      	movs	r2, #0
   d8104:	f7fd bd8e 	b.w	d5c24 <HAL_USB_USART_Begin>

000d8108 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8108:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d810a:	2214      	movs	r2, #20
{
   d810c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d810e:	2100      	movs	r1, #0
   d8110:	f001 fc4c 	bl	d99ac <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8114:	4620      	mov	r0, r4
   d8116:	bd10      	pop	{r4, pc}

000d8118 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8118:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d811a:	4c10      	ldr	r4, [pc, #64]	; (d815c <_Z16_fetch_usbserialv+0x44>)
{
   d811c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d811e:	a803      	add	r0, sp, #12
   d8120:	f7ff fff2 	bl	d8108 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8124:	7821      	ldrb	r1, [r4, #0]
   d8126:	f3bf 8f5b 	dmb	ish
   d812a:	f011 0101 	ands.w	r1, r1, #1
   d812e:	d111      	bne.n	d8154 <_Z16_fetch_usbserialv+0x3c>
   d8130:	4620      	mov	r0, r4
   d8132:	9101      	str	r1, [sp, #4]
   d8134:	f7fb ffb5 	bl	d40a2 <__cxa_guard_acquire>
   d8138:	9901      	ldr	r1, [sp, #4]
   d813a:	b158      	cbz	r0, d8154 <_Z16_fetch_usbserialv+0x3c>
   d813c:	aa03      	add	r2, sp, #12
   d813e:	4808      	ldr	r0, [pc, #32]	; (d8160 <_Z16_fetch_usbserialv+0x48>)
   d8140:	f7ff ffca 	bl	d80d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8144:	4620      	mov	r0, r4
   d8146:	f7fb ffb1 	bl	d40ac <__cxa_guard_release>
   d814a:	4a06      	ldr	r2, [pc, #24]	; (d8164 <_Z16_fetch_usbserialv+0x4c>)
   d814c:	4906      	ldr	r1, [pc, #24]	; (d8168 <_Z16_fetch_usbserialv+0x50>)
   d814e:	4804      	ldr	r0, [pc, #16]	; (d8160 <_Z16_fetch_usbserialv+0x48>)
   d8150:	f000 fdac 	bl	d8cac <__aeabi_atexit>
	return _usbserial;
}
   d8154:	4802      	ldr	r0, [pc, #8]	; (d8160 <_Z16_fetch_usbserialv+0x48>)
   d8156:	b008      	add	sp, #32
   d8158:	bd10      	pop	{r4, pc}
   d815a:	bf00      	nop
   d815c:	2003e684 	.word	0x2003e684
   d8160:	2003e688 	.word	0x2003e688
   d8164:	2003e0ac 	.word	0x2003e0ac
   d8168:	000d8061 	.word	0x000d8061

000d816c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d816c:	4770      	bx	lr

000d816e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d816e:	7441      	strb	r1, [r0, #17]
}
   d8170:	4770      	bx	lr

000d8172 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d8172:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d8174:	7c00      	ldrb	r0, [r0, #16]
   d8176:	f7fd fc65 	bl	d5a44 <hal_usart_available_data_for_write>
}
   d817a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d817e:	bd08      	pop	{r3, pc}

000d8180 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d8180:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d8182:	7c00      	ldrb	r0, [r0, #16]
   d8184:	f7fd fc36 	bl	d59f4 <hal_usart_available>
}
   d8188:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d818c:	bd08      	pop	{r3, pc}

000d818e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d818e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d8190:	7c00      	ldrb	r0, [r0, #16]
   d8192:	f7fd fc3f 	bl	d5a14 <hal_usart_peek>
}
   d8196:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d819a:	bd08      	pop	{r3, pc}

000d819c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d819c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d819e:	7c00      	ldrb	r0, [r0, #16]
   d81a0:	f7fd fc30 	bl	d5a04 <hal_usart_read>
}
   d81a4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d81a8:	bd08      	pop	{r3, pc}

000d81aa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d81aa:	7c00      	ldrb	r0, [r0, #16]
   d81ac:	f7fd bc3a 	b.w	d5a24 <hal_usart_flush>

000d81b0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d81b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d81b2:	7c45      	ldrb	r5, [r0, #17]
{
   d81b4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d81b6:	b12d      	cbz	r5, d81c4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d81b8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d81ba:	b003      	add	sp, #12
   d81bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d81c0:	f7fd bc10 	b.w	d59e4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d81c4:	7c00      	ldrb	r0, [r0, #16]
   d81c6:	9101      	str	r1, [sp, #4]
   d81c8:	f7fd fc3c 	bl	d5a44 <hal_usart_available_data_for_write>
   d81cc:	2800      	cmp	r0, #0
   d81ce:	9901      	ldr	r1, [sp, #4]
   d81d0:	dcf2      	bgt.n	d81b8 <_ZN11USARTSerial5writeEh+0x8>
}
   d81d2:	4628      	mov	r0, r5
   d81d4:	b003      	add	sp, #12
   d81d6:	bd30      	pop	{r4, r5, pc}

000d81d8 <_ZN11USARTSerialD0Ev>:
   d81d8:	b510      	push	{r4, lr}
   d81da:	2114      	movs	r1, #20
   d81dc:	4604      	mov	r4, r0
   d81de:	f000 fd6a 	bl	d8cb6 <_ZdlPvj>
   d81e2:	4620      	mov	r0, r4
   d81e4:	bd10      	pop	{r4, pc}
	...

000d81e8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d81e8:	b510      	push	{r4, lr}
   d81ea:	f04f 0c00 	mov.w	ip, #0
   d81ee:	4604      	mov	r4, r0
   d81f0:	4608      	mov	r0, r1
   d81f2:	4611      	mov	r1, r2
   d81f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d81f8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d81fc:	4a04      	ldr	r2, [pc, #16]	; (d8210 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d81fe:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d8200:	2201      	movs	r2, #1
  _serial = serial;
   d8202:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8204:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d8206:	461a      	mov	r2, r3
   d8208:	f7fd fbe4 	bl	d59d4 <hal_usart_init>
}
   d820c:	4620      	mov	r0, r4
   d820e:	bd10      	pop	{r4, pc}
   d8210:	000da27c 	.word	0x000da27c

000d8214 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8214:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8216:	4c0e      	ldr	r4, [pc, #56]	; (d8250 <_Z22__fetch_global_Serial1v+0x3c>)
   d8218:	7821      	ldrb	r1, [r4, #0]
   d821a:	f3bf 8f5b 	dmb	ish
   d821e:	f011 0101 	ands.w	r1, r1, #1
   d8222:	d112      	bne.n	d824a <_Z22__fetch_global_Serial1v+0x36>
   d8224:	4620      	mov	r0, r4
   d8226:	9101      	str	r1, [sp, #4]
   d8228:	f7fb ff3b 	bl	d40a2 <__cxa_guard_acquire>
   d822c:	9901      	ldr	r1, [sp, #4]
   d822e:	b160      	cbz	r0, d824a <_Z22__fetch_global_Serial1v+0x36>
   d8230:	4a08      	ldr	r2, [pc, #32]	; (d8254 <_Z22__fetch_global_Serial1v+0x40>)
   d8232:	4b09      	ldr	r3, [pc, #36]	; (d8258 <_Z22__fetch_global_Serial1v+0x44>)
   d8234:	4809      	ldr	r0, [pc, #36]	; (d825c <_Z22__fetch_global_Serial1v+0x48>)
   d8236:	f7ff ffd7 	bl	d81e8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d823a:	4620      	mov	r0, r4
   d823c:	f7fb ff36 	bl	d40ac <__cxa_guard_release>
   d8240:	4a07      	ldr	r2, [pc, #28]	; (d8260 <_Z22__fetch_global_Serial1v+0x4c>)
   d8242:	4908      	ldr	r1, [pc, #32]	; (d8264 <_Z22__fetch_global_Serial1v+0x50>)
   d8244:	4805      	ldr	r0, [pc, #20]	; (d825c <_Z22__fetch_global_Serial1v+0x48>)
   d8246:	f000 fd31 	bl	d8cac <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d824a:	4804      	ldr	r0, [pc, #16]	; (d825c <_Z22__fetch_global_Serial1v+0x48>)
   d824c:	b002      	add	sp, #8
   d824e:	bd10      	pop	{r4, pc}
   d8250:	2003e69c 	.word	0x2003e69c
   d8254:	2003e6a0 	.word	0x2003e6a0
   d8258:	2003e724 	.word	0x2003e724
   d825c:	2003e7a8 	.word	0x2003e7a8
   d8260:	2003e0ac 	.word	0x2003e0ac
   d8264:	000d816d 	.word	0x000d816d

000d8268 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8268:	4770      	bx	lr

000d826a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d826a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d826c:	4606      	mov	r6, r0
   d826e:	4615      	mov	r5, r2
   d8270:	460c      	mov	r4, r1
   d8272:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8274:	42bc      	cmp	r4, r7
   d8276:	d006      	beq.n	d8286 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8278:	6833      	ldr	r3, [r6, #0]
   d827a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d827e:	689b      	ldr	r3, [r3, #8]
   d8280:	4630      	mov	r0, r6
   d8282:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d8284:	e7f6      	b.n	d8274 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d8286:	4628      	mov	r0, r5
   d8288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d828a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d828a:	7c00      	ldrb	r0, [r0, #16]
   d828c:	2200      	movs	r2, #0
   d828e:	f7fd bc01 	b.w	d5a94 <hal_i2c_write>

000d8292 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d8292:	7c00      	ldrb	r0, [r0, #16]
   d8294:	2100      	movs	r1, #0
   d8296:	f7fd bc05 	b.w	d5aa4 <hal_i2c_available>

000d829a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d829a:	7c00      	ldrb	r0, [r0, #16]
   d829c:	2100      	movs	r1, #0
   d829e:	f7fd bc09 	b.w	d5ab4 <hal_i2c_read>

000d82a2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d82a2:	7c00      	ldrb	r0, [r0, #16]
   d82a4:	2100      	movs	r1, #0
   d82a6:	f7fd bc0d 	b.w	d5ac4 <hal_i2c_peek>

000d82aa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d82aa:	7c00      	ldrb	r0, [r0, #16]
   d82ac:	2100      	movs	r1, #0
   d82ae:	f7fd bc11 	b.w	d5ad4 <hal_i2c_flush>

000d82b2 <_ZN7TwoWireD0Ev>:
   d82b2:	b510      	push	{r4, lr}
   d82b4:	2114      	movs	r1, #20
   d82b6:	4604      	mov	r4, r0
   d82b8:	f000 fcfd 	bl	d8cb6 <_ZdlPvj>
   d82bc:	4620      	mov	r0, r4
   d82be:	bd10      	pop	{r4, pc}

000d82c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d82c0:	b510      	push	{r4, lr}
   d82c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d82c6:	4604      	mov	r4, r0
   d82c8:	4608      	mov	r0, r1
   d82ca:	2100      	movs	r1, #0
   d82cc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d82d0:	4b03      	ldr	r3, [pc, #12]	; (d82e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d82d2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d82d4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d82d6:	4611      	mov	r1, r2
   d82d8:	f7fd fc0c 	bl	d5af4 <hal_i2c_init>
}
   d82dc:	4620      	mov	r0, r4
   d82de:	bd10      	pop	{r4, pc}
   d82e0:	000da2ac 	.word	0x000da2ac

000d82e4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d82e4:	2300      	movs	r3, #0
   d82e6:	7c00      	ldrb	r0, [r0, #16]
   d82e8:	461a      	mov	r2, r3
   d82ea:	4619      	mov	r1, r3
   d82ec:	f7fd bbb2 	b.w	d5a54 <hal_i2c_begin>

000d82f0 <_ZN7TwoWire3endEv>:
	hal_i2c_end(_i2c, NULL);
   d82f0:	7c00      	ldrb	r0, [r0, #16]
   d82f2:	2100      	movs	r1, #0
   d82f4:	f7fd bbb6 	b.w	d5a64 <hal_i2c_end>

000d82f8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d82f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d82fa:	2200      	movs	r2, #0
   d82fc:	2314      	movs	r3, #20
   d82fe:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d8302:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d8306:	780b      	ldrb	r3, [r1, #0]
   d8308:	f88d 3008 	strb.w	r3, [sp, #8]
   d830c:	684b      	ldr	r3, [r1, #4]
   d830e:	9303      	str	r3, [sp, #12]
   d8310:	68cb      	ldr	r3, [r1, #12]
   d8312:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d8314:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8316:	7a0b      	ldrb	r3, [r1, #8]
   d8318:	9305      	str	r3, [sp, #20]
   d831a:	a901      	add	r1, sp, #4
   d831c:	f7fd fbf2 	bl	d5b04 <hal_i2c_request_ex>
}
   d8320:	b007      	add	sp, #28
   d8322:	f85d fb04 	ldr.w	pc, [sp], #4

000d8326 <_ZN7TwoWire11requestFromEhjh>:
{
   d8326:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8328:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d832a:	f88d 1000 	strb.w	r1, [sp]
   d832e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8332:	9103      	str	r1, [sp, #12]
   d8334:	bf18      	it	ne
   d8336:	2301      	movne	r3, #1
   d8338:	4669      	mov	r1, sp
    size_ = size;
   d833a:	9201      	str	r2, [sp, #4]
   d833c:	f88d 3008 	strb.w	r3, [sp, #8]
   d8340:	f7ff ffda 	bl	d82f8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8344:	b005      	add	sp, #20
   d8346:	f85d fb04 	ldr.w	pc, [sp], #4

000d834a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d834a:	2301      	movs	r3, #1
   d834c:	f7ff bfeb 	b.w	d8326 <_ZN7TwoWire11requestFromEhjh>

000d8350 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d8350:	7c00      	ldrb	r0, [r0, #16]
   d8352:	2200      	movs	r2, #0
   d8354:	f7fd bb8e 	b.w	d5a74 <hal_i2c_begin_transmission>

000d8358 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d8358:	b2c9      	uxtb	r1, r1
   d835a:	f7ff bff9 	b.w	d8350 <_ZN7TwoWire17beginTransmissionEh>

000d835e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d835e:	7c00      	ldrb	r0, [r0, #16]
   d8360:	2200      	movs	r2, #0
   d8362:	f7fd bb8f 	b.w	d5a84 <hal_i2c_end_transmission>

000d8366 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d8366:	2101      	movs	r1, #1
   d8368:	f7ff bff9 	b.w	d835e <_ZN7TwoWire15endTransmissionEh>

000d836c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d836c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d836e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d8370:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d8374:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d8376:	2201      	movs	r2, #1
   d8378:	f04f 33ff 	mov.w	r3, #4294967295
   d837c:	f10d 0107 	add.w	r1, sp, #7
   d8380:	47a0      	blx	r4
}
   d8382:	b002      	add	sp, #8
   d8384:	bd10      	pop	{r4, pc}

000d8386 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d8386:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d8388:	6803      	ldr	r3, [r0, #0]
   d838a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d838c:	f04f 33ff 	mov.w	r3, #4294967295
   d8390:	46a4      	mov	ip, r4
}
   d8392:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d8396:	4760      	bx	ip

000d8398 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d8398:	b513      	push	{r0, r1, r4, lr}
   d839a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d839c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d839e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d83a2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d83a4:	f10d 0107 	add.w	r1, sp, #7
   d83a8:	2201      	movs	r2, #1
   d83aa:	47a0      	blx	r4
}
   d83ac:	b002      	add	sp, #8
   d83ae:	bd10      	pop	{r4, pc}

000d83b0 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d83b0:	4770      	bx	lr

000d83b2 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d83b2:	b538      	push	{r3, r4, r5, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d83b4:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d83b6:	681a      	ldr	r2, [r3, #0]
   d83b8:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d83ba:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d83bc:	da10      	bge.n	d83e0 <_ZN9TCPClient9connectedEv+0x2e>
   d83be:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d83c2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d83c6:	429a      	cmp	r2, r3
   d83c8:	d10a      	bne.n	d83e0 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d83ca:	6803      	ldr	r3, [r0, #0]
   d83cc:	691b      	ldr	r3, [r3, #16]
   d83ce:	4798      	blx	r3
        if (!rv) {
   d83d0:	4604      	mov	r4, r0
   d83d2:	b928      	cbnz	r0, d83e0 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d83d4:	682b      	ldr	r3, [r5, #0]
   d83d6:	4628      	mov	r0, r5
   d83d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d83da:	4798      	blx	r3
        rv = available();
   d83dc:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d83de:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d83e0:	2001      	movs	r0, #1
   d83e2:	e7fc      	b.n	d83de <_ZN9TCPClient9connectedEv+0x2c>

000d83e4 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d83e4:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d83e6:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d83e8:	43c0      	mvns	r0, r0
   d83ea:	0fc0      	lsrs	r0, r0, #31
   d83ec:	4770      	bx	lr

000d83ee <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d83ee:	4770      	bx	lr

000d83f0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d83f0:	4b06      	ldr	r3, [pc, #24]	; (d840c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d83f2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d83f4:	b510      	push	{r4, lr}
   d83f6:	f100 040c 	add.w	r4, r0, #12
	    ||
   d83fa:	d005      	beq.n	d8408 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d83fc:	4608      	mov	r0, r1
   d83fe:	f000 fc63 	bl	d8cc8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d8402:	2800      	cmp	r0, #0
	return nullptr;
   d8404:	bf08      	it	eq
   d8406:	2400      	moveq	r4, #0
      }
   d8408:	4620      	mov	r0, r4
   d840a:	bd10      	pop	{r4, pc}
   d840c:	000da1cc 	.word	0x000da1cc

000d8410 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d8410:	b510      	push	{r4, lr}
   d8412:	21ac      	movs	r1, #172	; 0xac
   d8414:	4604      	mov	r4, r0
   d8416:	f000 fc4e 	bl	d8cb6 <_ZdlPvj>
   d841a:	4620      	mov	r0, r4
   d841c:	bd10      	pop	{r4, pc}

000d841e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p);
   d841e:	f7fb be3e 	b.w	d409e <_ZdlPv>

000d8422 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d8422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d8426:	f04f 0800 	mov.w	r8, #0
   d842a:	b086      	sub	sp, #24
   d842c:	461d      	mov	r5, r3
   d842e:	f8c0 8004 	str.w	r8, [r0, #4]
   d8432:	4604      	mov	r4, r0
   d8434:	460e      	mov	r6, r1
   d8436:	4617      	mov	r7, r2
    struct timeval tv = {};
   d8438:	4641      	mov	r1, r8
   d843a:	2210      	movs	r2, #16
   d843c:	a802      	add	r0, sp, #8
   d843e:	f001 fab5 	bl	d99ac <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d8442:	1c6b      	adds	r3, r5, #1
   d8444:	d009      	beq.n	d845a <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d8446:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d844a:	fbb5 f3f0 	udiv	r3, r5, r0
   d844e:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d8452:	fb00 5313 	mls	r3, r0, r3, r5
   d8456:	4358      	muls	r0, r3
   d8458:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d845a:	6960      	ldr	r0, [r4, #20]
   d845c:	2310      	movs	r3, #16
   d845e:	9300      	str	r3, [sp, #0]
   d8460:	6800      	ldr	r0, [r0, #0]
   d8462:	ab02      	add	r3, sp, #8
   d8464:	f241 0205 	movw	r2, #4101	; 0x1005
   d8468:	f640 71ff 	movw	r1, #4095	; 0xfff
   d846c:	f7fd fb52 	bl	d5b14 <sock_setsockopt>
    if (ret < 0) {
   d8470:	2800      	cmp	r0, #0
   d8472:	da07      	bge.n	d8484 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d8474:	f7fd fd14 	bl	d5ea0 <__errno>
   d8478:	6803      	ldr	r3, [r0, #0]
   d847a:	6063      	str	r3, [r4, #4]
        return 0;
   d847c:	2000      	movs	r0, #0
}
   d847e:	b006      	add	sp, #24
   d8480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d8484:	6960      	ldr	r0, [r4, #20]
   d8486:	2300      	movs	r3, #0
   d8488:	6800      	ldr	r0, [r0, #0]
   d848a:	463a      	mov	r2, r7
   d848c:	4631      	mov	r1, r6
   d848e:	f7fd fb61 	bl	d5b54 <sock_send>
    if (ret < 0) {
   d8492:	1e03      	subs	r3, r0, #0
   d8494:	dbee      	blt.n	d8474 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d8496:	4618      	mov	r0, r3
   d8498:	e7f1      	b.n	d847e <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d849c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d849c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d849e:	6984      	ldr	r4, [r0, #24]
   d84a0:	4b0a      	ldr	r3, [pc, #40]	; (d84cc <_ZN9TCPClientD1Ev+0x30>)
   d84a2:	6003      	str	r3, [r0, #0]
   d84a4:	4605      	mov	r5, r0
   d84a6:	b17c      	cbz	r4, d84c8 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d84a8:	6863      	ldr	r3, [r4, #4]
   d84aa:	3b01      	subs	r3, #1
   d84ac:	6063      	str	r3, [r4, #4]
   d84ae:	b95b      	cbnz	r3, d84c8 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d84b0:	6823      	ldr	r3, [r4, #0]
   d84b2:	4620      	mov	r0, r4
   d84b4:	689b      	ldr	r3, [r3, #8]
   d84b6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d84b8:	68a3      	ldr	r3, [r4, #8]
   d84ba:	3b01      	subs	r3, #1
   d84bc:	60a3      	str	r3, [r4, #8]
   d84be:	b91b      	cbnz	r3, d84c8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d84c0:	6823      	ldr	r3, [r4, #0]
   d84c2:	4620      	mov	r0, r4
   d84c4:	68db      	ldr	r3, [r3, #12]
   d84c6:	4798      	blx	r3
   d84c8:	4628      	mov	r0, r5
   d84ca:	bd38      	pop	{r3, r4, r5, pc}
   d84cc:	000da300 	.word	0x000da300

000d84d0 <_ZN9TCPClientD0Ev>:
   d84d0:	b510      	push	{r4, lr}
   d84d2:	4604      	mov	r4, r0
   d84d4:	f7ff ffe2 	bl	d849c <_ZN9TCPClientD1Ev>
   d84d8:	4620      	mov	r0, r4
   d84da:	211c      	movs	r1, #28
   d84dc:	f000 fbeb 	bl	d8cb6 <_ZdlPvj>
   d84e0:	4620      	mov	r0, r4
   d84e2:	bd10      	pop	{r4, pc}

000d84e4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d84e4:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d84e6:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d84e8:	4b05      	ldr	r3, [pc, #20]	; (d8500 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d84ea:	4604      	mov	r4, r0
   d84ec:	358c      	adds	r5, #140	; 0x8c
   d84ee:	f844 3b04 	str.w	r3, [r4], #4
   d84f2:	4606      	mov	r6, r0
   d84f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d84f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d84f8:	682b      	ldr	r3, [r5, #0]
   d84fa:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d84fc:	4630      	mov	r0, r6
   d84fe:	bd70      	pop	{r4, r5, r6, pc}
   d8500:	000da238 	.word	0x000da238

000d8504 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d8504:	b510      	push	{r4, lr}
   d8506:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8508:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d850c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8510:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d8512:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8514:	d005      	beq.n	d8522 <_ZN9TCPClient4peekEv+0x1e>
   d8516:	6963      	ldr	r3, [r4, #20]
   d8518:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d851c:	4413      	add	r3, r2
   d851e:	7918      	ldrb	r0, [r3, #4]
}
   d8520:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8522:	6803      	ldr	r3, [r0, #0]
   d8524:	691b      	ldr	r3, [r3, #16]
   d8526:	4798      	blx	r3
   d8528:	2800      	cmp	r0, #0
   d852a:	d1f4      	bne.n	d8516 <_ZN9TCPClient4peekEv+0x12>
   d852c:	f04f 30ff 	mov.w	r0, #4294967295
   d8530:	e7f6      	b.n	d8520 <_ZN9TCPClient4peekEv+0x1c>

000d8532 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d8532:	b510      	push	{r4, lr}
   d8534:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8536:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d853a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d853e:	429a      	cmp	r2, r3
int TCPClient::read() {
   d8540:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8542:	d008      	beq.n	d8556 <_ZN9TCPClient4readEv+0x24>
   d8544:	6963      	ldr	r3, [r4, #20]
   d8546:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d854a:	1c51      	adds	r1, r2, #1
   d854c:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d8550:	4413      	add	r3, r2
   d8552:	7918      	ldrb	r0, [r3, #4]
}
   d8554:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8556:	6803      	ldr	r3, [r0, #0]
   d8558:	691b      	ldr	r3, [r3, #16]
   d855a:	4798      	blx	r3
   d855c:	2800      	cmp	r0, #0
   d855e:	d1f1      	bne.n	d8544 <_ZN9TCPClient4readEv+0x12>
   d8560:	f04f 30ff 	mov.w	r0, #4294967295
   d8564:	e7f6      	b.n	d8554 <_ZN9TCPClient4readEv+0x22>

000d8566 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d8566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8568:	6943      	ldr	r3, [r0, #20]
   d856a:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d856c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8570:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8574:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d8576:	4605      	mov	r5, r0
   d8578:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d857a:	d016      	beq.n	d85aa <_ZN9TCPClient4readEPhj+0x44>
   d857c:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d857e:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d8582:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d8586:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d8588:	42bc      	cmp	r4, r7
   d858a:	bf28      	it	cs
   d858c:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d858e:	3304      	adds	r3, #4
   d8590:	4622      	mov	r2, r4
   d8592:	4419      	add	r1, r3
   d8594:	4630      	mov	r0, r6
   d8596:	f001 f9e1 	bl	d995c <memcpy>
   d859a:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d859c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d85a0:	4423      	add	r3, r4
   d85a2:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d85a6:	4620      	mov	r0, r4
   d85a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d85aa:	6803      	ldr	r3, [r0, #0]
   d85ac:	691b      	ldr	r3, [r3, #16]
   d85ae:	4798      	blx	r3
   d85b0:	2800      	cmp	r0, #0
   d85b2:	d1e3      	bne.n	d857c <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d85b4:	f04f 34ff 	mov.w	r4, #4294967295
   d85b8:	e7f5      	b.n	d85a6 <_ZN9TCPClient4readEPhj+0x40>

000d85ba <_ZN9TCPClient12flush_bufferEv>:
   d85ba:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d85bc:	2300      	movs	r3, #0
   d85be:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d85c2:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d85c4:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d85c8:	4770      	bx	lr

000d85ca <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d85ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d85ce:	461f      	mov	r7, r3
    stop();
   d85d0:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d85d2:	460c      	mov	r4, r1
    stop();
   d85d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d85d6:	b08a      	sub	sp, #40	; 0x28
   d85d8:	4605      	mov	r5, r0
   d85da:	4616      	mov	r6, r2
    stop();
   d85dc:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d85de:	7d23      	ldrb	r3, [r4, #20]
   d85e0:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d85e4:	2b04      	cmp	r3, #4
   d85e6:	bf0c      	ite	eq
   d85e8:	2002      	moveq	r0, #2
   d85ea:	200a      	movne	r0, #10
   d85ec:	2206      	movs	r2, #6
   d85ee:	2101      	movs	r1, #1
   d85f0:	f7fd fab8 	bl	d5b64 <sock_socket>
   d85f4:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d85f8:	696b      	ldr	r3, [r5, #20]
   d85fa:	681b      	ldr	r3, [r3, #0]
   d85fc:	2b00      	cmp	r3, #0
   d85fe:	da08      	bge.n	d8612 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d8600:	682b      	ldr	r3, [r5, #0]
   d8602:	4628      	mov	r0, r5
   d8604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8606:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d8608:	4798      	blx	r3
}
   d860a:	4620      	mov	r0, r4
   d860c:	b00a      	add	sp, #40	; 0x28
   d860e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d8612:	4628      	mov	r0, r5
   d8614:	f7ff ffd1 	bl	d85ba <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d8618:	b1b7      	cbz	r7, d8648 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d861a:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d861c:	a903      	add	r1, sp, #12
   d861e:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d8620:	9303      	str	r3, [sp, #12]
   d8622:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8626:	f7fd f8c9 	bl	d57bc <if_index_to_name>
   d862a:	2800      	cmp	r0, #0
   d862c:	d1e8      	bne.n	d8600 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d862e:	6968      	ldr	r0, [r5, #20]
   d8630:	2306      	movs	r3, #6
   d8632:	9300      	str	r3, [sp, #0]
   d8634:	6800      	ldr	r0, [r0, #0]
   d8636:	ab03      	add	r3, sp, #12
   d8638:	f241 020b 	movw	r2, #4107	; 0x100b
   d863c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8640:	f7fd fa68 	bl	d5b14 <sock_setsockopt>
   d8644:	2800      	cmp	r0, #0
   d8646:	d1db      	bne.n	d8600 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d8648:	221c      	movs	r2, #28
   d864a:	2100      	movs	r1, #0
   d864c:	a803      	add	r0, sp, #12
   d864e:	f001 f9ad 	bl	d99ac <memset>
    if (ip.version() == 4) {
   d8652:	7d23      	ldrb	r3, [r4, #20]
   d8654:	2b04      	cmp	r3, #4
   d8656:	d11d      	bne.n	d8694 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d8658:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d865c:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d865e:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d8662:	f7fd f9af 	bl	d59c4 <inet_htons>
   d8666:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d866a:	6860      	ldr	r0, [r4, #4]
   d866c:	f7fd f9a2 	bl	d59b4 <inet_htonl>
   d8670:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d8672:	696b      	ldr	r3, [r5, #20]
   d8674:	221c      	movs	r2, #28
   d8676:	6818      	ldr	r0, [r3, #0]
   d8678:	a903      	add	r1, sp, #12
   d867a:	f7fd fa5b 	bl	d5b34 <sock_connect>
   d867e:	2800      	cmp	r0, #0
   d8680:	d1be      	bne.n	d8600 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d8682:	3404      	adds	r4, #4
   d8684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8686:	696d      	ldr	r5, [r5, #20]
   d8688:	358c      	adds	r5, #140	; 0x8c
   d868a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d868c:	6823      	ldr	r3, [r4, #0]
   d868e:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d8690:	2401      	movs	r4, #1
   d8692:	e7ba      	b.n	d860a <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d8694:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d8698:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d869a:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d869e:	f7fd f991 	bl	d59c4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d86a2:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d86a4:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d86a8:	1d23      	adds	r3, r4, #4
   d86aa:	f104 0714 	add.w	r7, r4, #20
   d86ae:	6818      	ldr	r0, [r3, #0]
   d86b0:	6859      	ldr	r1, [r3, #4]
   d86b2:	4632      	mov	r2, r6
   d86b4:	c203      	stmia	r2!, {r0, r1}
   d86b6:	3308      	adds	r3, #8
   d86b8:	42bb      	cmp	r3, r7
   d86ba:	4616      	mov	r6, r2
   d86bc:	d1f7      	bne.n	d86ae <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d86be:	e7d8      	b.n	d8672 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d86c0 <_ZN9TCPClient9availableEv>:
{
   d86c0:	b530      	push	{r4, r5, lr}
   d86c2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d86c4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d86c8:	b08b      	sub	sp, #44	; 0x2c
   d86ca:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d86cc:	b12b      	cbz	r3, d86da <_ZN9TCPClient9availableEv+0x1a>
   d86ce:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d86d2:	429a      	cmp	r2, r3
   d86d4:	d101      	bne.n	d86da <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d86d6:	f7ff ff70 	bl	d85ba <_ZN9TCPClient12flush_bufferEv>
   d86da:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d86dc:	6808      	ldr	r0, [r1, #0]
   d86de:	2800      	cmp	r0, #0
   d86e0:	db18      	blt.n	d8714 <_ZN9TCPClient9availableEv+0x54>
   d86e2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d86e6:	2d7f      	cmp	r5, #127	; 0x7f
   d86e8:	d814      	bhi.n	d8714 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d86ea:	3104      	adds	r1, #4
   d86ec:	2308      	movs	r3, #8
   d86ee:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d86f2:	4429      	add	r1, r5
   d86f4:	f7fd fa26 	bl	d5b44 <sock_recv>
            if (ret > 0) {
   d86f8:	2800      	cmp	r0, #0
   d86fa:	dd13      	ble.n	d8724 <_ZN9TCPClient9availableEv+0x64>
   d86fc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d86fe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8702:	b90a      	cbnz	r2, d8708 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d8704:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d8708:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d870a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d870e:	4410      	add	r0, r2
   d8710:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d8714:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d8716:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d871a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d871e:	1ac0      	subs	r0, r0, r3
   d8720:	b00b      	add	sp, #44	; 0x2c
   d8722:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d8724:	f7fd fbbc 	bl	d5ea0 <__errno>
   d8728:	6803      	ldr	r3, [r0, #0]
   d872a:	2b0b      	cmp	r3, #11
   d872c:	d0f2      	beq.n	d8714 <_ZN9TCPClient9availableEv+0x54>
   d872e:	f7fd fbb7 	bl	d5ea0 <__errno>
   d8732:	6803      	ldr	r3, [r0, #0]
   d8734:	2b0b      	cmp	r3, #11
   d8736:	d0ed      	beq.n	d8714 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d8738:	2320      	movs	r3, #32
   d873a:	2500      	movs	r5, #0
   d873c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d8740:	f7fd fbae 	bl	d5ea0 <__errno>
   d8744:	6803      	ldr	r3, [r0, #0]
   d8746:	9301      	str	r3, [sp, #4]
   d8748:	4b08      	ldr	r3, [pc, #32]	; (d876c <_ZN9TCPClient9availableEv+0xac>)
   d874a:	4909      	ldr	r1, [pc, #36]	; (d8770 <_ZN9TCPClient9availableEv+0xb0>)
   d874c:	9300      	str	r3, [sp, #0]
   d874e:	aa02      	add	r2, sp, #8
   d8750:	462b      	mov	r3, r5
   d8752:	2032      	movs	r0, #50	; 0x32
   d8754:	f7fd fa9e 	bl	d5c94 <log_message>
                    sock_close(d_->sock);
   d8758:	6963      	ldr	r3, [r4, #20]
   d875a:	6818      	ldr	r0, [r3, #0]
   d875c:	f7fd f9e2 	bl	d5b24 <sock_close>
   d8760:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d8762:	f04f 32ff 	mov.w	r2, #4294967295
   d8766:	601a      	str	r2, [r3, #0]
   d8768:	e7d4      	b.n	d8714 <_ZN9TCPClient9availableEv+0x54>
   d876a:	bf00      	nop
   d876c:	000da2cc 	.word	0x000da2cc
   d8770:	000da054 	.word	0x000da054

000d8774 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d8774:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d8776:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d8778:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d877a:	6818      	ldr	r0, [r3, #0]
   d877c:	2800      	cmp	r0, #0
   d877e:	db01      	blt.n	d8784 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d8780:	f7fd f9d0 	bl	d5b24 <sock_close>
   d8784:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d8786:	f04f 32ff 	mov.w	r2, #4294967295
   d878a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d878c:	6960      	ldr	r0, [r4, #20]
   d878e:	2211      	movs	r2, #17
   d8790:	2100      	movs	r1, #0
   d8792:	308c      	adds	r0, #140	; 0x8c
   d8794:	f001 f90a 	bl	d99ac <memset>
    flush_buffer();
   d8798:	4620      	mov	r0, r4
}
   d879a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d879e:	f7ff bf0c 	b.w	d85ba <_ZN9TCPClient12flush_bufferEv>

000d87a2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d87a2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d87a4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d87a6:	4604      	mov	r4, r0
          total(0) {
   d87a8:	6001      	str	r1, [r0, #0]
   d87aa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d87ae:	3088      	adds	r0, #136	; 0x88
   d87b0:	f7ff fc02 	bl	d7fb8 <_ZN9IPAddressC1Ev>
}
   d87b4:	4620      	mov	r0, r4
   d87b6:	bd10      	pop	{r4, pc}

000d87b8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d87b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d87ba:	2300      	movs	r3, #0
   d87bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d87c0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d87c4:	4a0e      	ldr	r2, [pc, #56]	; (d8800 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d87c6:	6103      	str	r3, [r0, #16]
   d87c8:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d87ca:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d87cc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d87ce:	20ac      	movs	r0, #172	; 0xac
   d87d0:	9101      	str	r1, [sp, #4]
   d87d2:	f7fb fc60 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d87d6:	1e05      	subs	r5, r0, #0
   d87d8:	f105 060c 	add.w	r6, r5, #12
   d87dc:	d008      	beq.n	d87f0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d87de:	2301      	movs	r3, #1
   d87e0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d87e4:	4b07      	ldr	r3, [pc, #28]	; (d8804 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d87e6:	9901      	ldr	r1, [sp, #4]
   d87e8:	602b      	str	r3, [r5, #0]
   d87ea:	4630      	mov	r0, r6
   d87ec:	f7ff ffd9 	bl	d87a2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d87f0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d87f2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d87f6:	f7ff fee0 	bl	d85ba <_ZN9TCPClient12flush_bufferEv>
}
   d87fa:	b002      	add	sp, #8
   d87fc:	bd70      	pop	{r4, r5, r6, pc}
   d87fe:	bf00      	nop
   d8800:	000da300 	.word	0x000da300
   d8804:	000da2e4 	.word	0x000da2e4

000d8808 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d8808:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d880a:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d880e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8810:	f7ff ffd2 	bl	d87b8 <_ZN9TCPClientC1Ei>
}
   d8814:	4620      	mov	r0, r4
   d8816:	bd10      	pop	{r4, pc}

000d8818 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d8818:	b510      	push	{r4, lr}
   d881a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d881c:	6800      	ldr	r0, [r0, #0]
   d881e:	2800      	cmp	r0, #0
   d8820:	db01      	blt.n	d8826 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d8822:	f7fd f97f 	bl	d5b24 <sock_close>
    }
}
   d8826:	4620      	mov	r0, r4
   d8828:	bd10      	pop	{r4, pc}

000d882a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d882a:	300c      	adds	r0, #12
   d882c:	f7ff bff4 	b.w	d8818 <_ZN9TCPClient4DataD1Ev>

000d8830 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8834:	4698      	mov	r8, r3
    stop();
   d8836:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8838:	b093      	sub	sp, #76	; 0x4c
   d883a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d883c:	2400      	movs	r4, #0
    stop();
   d883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8840:	4606      	mov	r6, r0
   d8842:	4617      	mov	r7, r2
    stop();
   d8844:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8846:	4628      	mov	r0, r5
   d8848:	466b      	mov	r3, sp
   d884a:	4622      	mov	r2, r4
   d884c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d884e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8850:	f7fc ff8c 	bl	d576c <netdb_getaddrinfo>
   d8854:	4605      	mov	r5, r0
   d8856:	2800      	cmp	r0, #0
   d8858:	d163      	bne.n	d8922 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d885a:	9b00      	ldr	r3, [sp, #0]
   d885c:	2b00      	cmp	r3, #0
   d885e:	d04b      	beq.n	d88f8 <_ZN9TCPClient7connectEPKctm+0xc8>
   d8860:	695b      	ldr	r3, [r3, #20]
   d8862:	2b00      	cmp	r3, #0
   d8864:	d048      	beq.n	d88f8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d8866:	a806      	add	r0, sp, #24
   d8868:	f7ff fba6 	bl	d7fb8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d886c:	9b00      	ldr	r3, [sp, #0]
   d886e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d8870:	7863      	ldrb	r3, [r4, #1]
   d8872:	2b02      	cmp	r3, #2
   d8874:	d104      	bne.n	d8880 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8876:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8878:	a806      	add	r0, sp, #24
   d887a:	f7fd fd43 	bl	d6304 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d887e:	e026      	b.n	d88ce <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d8880:	2b0a      	cmp	r3, #10
   d8882:	d124      	bne.n	d88ce <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d8884:	2211      	movs	r2, #17
   d8886:	4629      	mov	r1, r5
   d8888:	a801      	add	r0, sp, #4
   d888a:	f001 f88f 	bl	d99ac <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d888e:	68a3      	ldr	r3, [r4, #8]
   d8890:	2b00      	cmp	r3, #0
   d8892:	d038      	beq.n	d8906 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8894:	f104 0308 	add.w	r3, r4, #8
   d8898:	f10d 0c04 	add.w	ip, sp, #4
   d889c:	3418      	adds	r4, #24
   d889e:	6818      	ldr	r0, [r3, #0]
   d88a0:	6859      	ldr	r1, [r3, #4]
   d88a2:	4662      	mov	r2, ip
   d88a4:	c203      	stmia	r2!, {r0, r1}
   d88a6:	3308      	adds	r3, #8
   d88a8:	42a3      	cmp	r3, r4
   d88aa:	4694      	mov	ip, r2
   d88ac:	d1f7      	bne.n	d889e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d88ae:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d88b0:	a901      	add	r1, sp, #4
   d88b2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d88b4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d88b8:	f7ff fb8c 	bl	d7fd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d88bc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d88c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d88c4:	ac07      	add	r4, sp, #28
   d88c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d88c8:	f8dc 3000 	ldr.w	r3, [ip]
   d88cc:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d88ce:	a806      	add	r0, sp, #24
   d88d0:	f7ff fb92 	bl	d7ff8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d88d4:	b180      	cbz	r0, d88f8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d88d6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d88d8:	ad07      	add	r5, sp, #28
   d88da:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d88de:	4b12      	ldr	r3, [pc, #72]	; (d8928 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d88e0:	930c      	str	r3, [sp, #48]	; 0x30
   d88e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d88e4:	ac0d      	add	r4, sp, #52	; 0x34
   d88e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d88e8:	682b      	ldr	r3, [r5, #0]
   d88ea:	7023      	strb	r3, [r4, #0]
   d88ec:	463a      	mov	r2, r7
   d88ee:	4643      	mov	r3, r8
   d88f0:	a90c      	add	r1, sp, #48	; 0x30
   d88f2:	4630      	mov	r0, r6
   d88f4:	47c8      	blx	r9
   d88f6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d88f8:	9800      	ldr	r0, [sp, #0]
   d88fa:	f7fc ff2f 	bl	d575c <netdb_freeaddrinfo>
}
   d88fe:	4628      	mov	r0, r5
   d8900:	b013      	add	sp, #76	; 0x4c
   d8902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8906:	68e3      	ldr	r3, [r4, #12]
   d8908:	2b00      	cmp	r3, #0
   d890a:	d1c3      	bne.n	d8894 <_ZN9TCPClient7connectEPKctm+0x64>
   d890c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d8910:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d8914:	f7fd f84e 	bl	d59b4 <inet_htonl>
   d8918:	4581      	cmp	r9, r0
   d891a:	d1bb      	bne.n	d8894 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d891c:	f104 0114 	add.w	r1, r4, #20
   d8920:	e7aa      	b.n	d8878 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8922:	4625      	mov	r5, r4
   d8924:	e7e8      	b.n	d88f8 <_ZN9TCPClient7connectEPKctm+0xc8>
   d8926:	bf00      	nop
   d8928:	000da238 	.word	0x000da238

000d892c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d892c:	2200      	movs	r2, #0
   d892e:	6840      	ldr	r0, [r0, #4]
   d8930:	4611      	mov	r1, r2
   d8932:	f7fd ba0d 	b.w	d5d50 <network_ready>

000d8936 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8936:	2200      	movs	r2, #0
   d8938:	6840      	ldr	r0, [r0, #4]
   d893a:	4611      	mov	r1, r2
   d893c:	f7fd ba28 	b.w	d5d90 <network_listening>

000d8940 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8940:	2200      	movs	r2, #0
   d8942:	6840      	ldr	r0, [r0, #4]
   d8944:	4611      	mov	r1, r2
   d8946:	f7fd ba43 	b.w	d5dd0 <network_get_listen_timeout>

000d894a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d894a:	6840      	ldr	r0, [r0, #4]
   d894c:	2200      	movs	r2, #0
   d894e:	f7fd ba37 	b.w	d5dc0 <network_set_listen_timeout>

000d8952 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8952:	6840      	ldr	r0, [r0, #4]
   d8954:	2200      	movs	r2, #0
   d8956:	f081 0101 	eor.w	r1, r1, #1
   d895a:	f7fd ba11 	b.w	d5d80 <network_listen>

000d895e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d895e:	2300      	movs	r3, #0
   d8960:	6840      	ldr	r0, [r0, #4]
   d8962:	461a      	mov	r2, r3
   d8964:	4619      	mov	r1, r3
   d8966:	f7fd ba03 	b.w	d5d70 <network_off>

000d896a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d896a:	2200      	movs	r2, #0
   d896c:	6840      	ldr	r0, [r0, #4]
   d896e:	4611      	mov	r1, r2
   d8970:	f7fd b9de 	b.w	d5d30 <network_connecting>

000d8974 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8974:	6840      	ldr	r0, [r0, #4]
   d8976:	2200      	movs	r2, #0
   d8978:	2102      	movs	r1, #2
   d897a:	f7fd b9e1 	b.w	d5d40 <network_disconnect>

000d897e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d897e:	2300      	movs	r3, #0
   d8980:	6840      	ldr	r0, [r0, #4]
   d8982:	461a      	mov	r2, r3
   d8984:	f7fd b9cc 	b.w	d5d20 <network_connect>

000d8988 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8988:	4b02      	ldr	r3, [pc, #8]	; (d8994 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d898a:	2204      	movs	r2, #4
   d898c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d898e:	4a02      	ldr	r2, [pc, #8]	; (d8998 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8990:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d8992:	4770      	bx	lr
   d8994:	2003e7bc 	.word	0x2003e7bc
   d8998:	000da34c 	.word	0x000da34c

000d899c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d899c:	2300      	movs	r3, #0
   d899e:	6840      	ldr	r0, [r0, #4]
   d89a0:	461a      	mov	r2, r3
   d89a2:	f7fd b9bd 	b.w	d5d20 <network_connect>

000d89a6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d89a6:	6840      	ldr	r0, [r0, #4]
   d89a8:	2200      	movs	r2, #0
   d89aa:	2102      	movs	r1, #2
   d89ac:	f7fd b9c8 	b.w	d5d40 <network_disconnect>

000d89b0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d89b0:	2200      	movs	r2, #0
   d89b2:	6840      	ldr	r0, [r0, #4]
   d89b4:	4611      	mov	r1, r2
   d89b6:	f7fd b9bb 	b.w	d5d30 <network_connecting>

000d89ba <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d89ba:	2200      	movs	r2, #0
   d89bc:	6840      	ldr	r0, [r0, #4]
   d89be:	4611      	mov	r1, r2
   d89c0:	f7fd b9c6 	b.w	d5d50 <network_ready>

000d89c4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d89c4:	2300      	movs	r3, #0
   d89c6:	6840      	ldr	r0, [r0, #4]
   d89c8:	461a      	mov	r2, r3
   d89ca:	4619      	mov	r1, r3
   d89cc:	f7fd b9c8 	b.w	d5d60 <network_on>

000d89d0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d89d0:	2300      	movs	r3, #0
   d89d2:	6840      	ldr	r0, [r0, #4]
   d89d4:	461a      	mov	r2, r3
   d89d6:	4619      	mov	r1, r3
   d89d8:	f7fd b9ca 	b.w	d5d70 <network_off>

000d89dc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d89dc:	6840      	ldr	r0, [r0, #4]
   d89de:	2100      	movs	r1, #0
   d89e0:	f7fd b9fe 	b.w	d5de0 <network_is_on>

000d89e4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d89e4:	6840      	ldr	r0, [r0, #4]
   d89e6:	2100      	movs	r1, #0
   d89e8:	f7fd ba02 	b.w	d5df0 <network_is_off>

000d89ec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d89ec:	6840      	ldr	r0, [r0, #4]
   d89ee:	2200      	movs	r2, #0
   d89f0:	f081 0101 	eor.w	r1, r1, #1
   d89f4:	f7fd b9c4 	b.w	d5d80 <network_listen>

000d89f8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d89f8:	6840      	ldr	r0, [r0, #4]
   d89fa:	2200      	movs	r2, #0
   d89fc:	f7fd b9e0 	b.w	d5dc0 <network_set_listen_timeout>

000d8a00 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8a00:	2200      	movs	r2, #0
   d8a02:	6840      	ldr	r0, [r0, #4]
   d8a04:	4611      	mov	r1, r2
   d8a06:	f7fd b9e3 	b.w	d5dd0 <network_get_listen_timeout>

000d8a0a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8a0a:	2200      	movs	r2, #0
   d8a0c:	6840      	ldr	r0, [r0, #4]
   d8a0e:	4611      	mov	r1, r2
   d8a10:	f7fd b9be 	b.w	d5d90 <network_listening>

000d8a14 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8a18:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d8a1a:	b095      	sub	sp, #84	; 0x54
   d8a1c:	4616      	mov	r6, r2
   d8a1e:	460d      	mov	r5, r1
   d8a20:	4607      	mov	r7, r0
    IPAddress addr;
   d8a22:	f7ff fac9 	bl	d7fb8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d8a26:	4621      	mov	r1, r4
   d8a28:	2218      	movs	r2, #24
   d8a2a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d8a2c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8a2e:	f000 ffbd 	bl	d99ac <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8a32:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d8a34:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8a38:	4621      	mov	r1, r4
   d8a3a:	466b      	mov	r3, sp
   d8a3c:	aa0c      	add	r2, sp, #48	; 0x30
   d8a3e:	4630      	mov	r0, r6
   d8a40:	f7fc fe94 	bl	d576c <netdb_getaddrinfo>
    if (!r) {
   d8a44:	4604      	mov	r4, r0
   d8a46:	2800      	cmp	r0, #0
   d8a48:	d14c      	bne.n	d8ae4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8a4a:	4602      	mov	r2, r0
   d8a4c:	2101      	movs	r1, #1
   d8a4e:	6868      	ldr	r0, [r5, #4]
   d8a50:	f7fd f97e 	bl	d5d50 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8a54:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8a56:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8a58:	4622      	mov	r2, r4
   d8a5a:	6868      	ldr	r0, [r5, #4]
   d8a5c:	f7fd f978 	bl	d5d50 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8a60:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8a62:	4681      	mov	r9, r0
        bool ok = false;
   d8a64:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8a66:	2e00      	cmp	r6, #0
   d8a68:	d03c      	beq.n	d8ae4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d8a6a:	2900      	cmp	r1, #0
   d8a6c:	d13a      	bne.n	d8ae4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8a6e:	6873      	ldr	r3, [r6, #4]
   d8a70:	2b02      	cmp	r3, #2
   d8a72:	d003      	beq.n	d8a7c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d8a74:	2b0a      	cmp	r3, #10
   d8a76:	d011      	beq.n	d8a9c <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8a78:	69f6      	ldr	r6, [r6, #28]
   d8a7a:	e7f4      	b.n	d8a66 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8a7c:	f1b8 0f00 	cmp.w	r8, #0
   d8a80:	d00a      	beq.n	d8a98 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8a82:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d8a84:	a806      	add	r0, sp, #24
   d8a86:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d8a88:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d8a8a:	f7ff fad9 	bl	d8040 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d8a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8a90:	1d3c      	adds	r4, r7, #4
   d8a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8a94:	682b      	ldr	r3, [r5, #0]
   d8a96:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d8a98:	4641      	mov	r1, r8
   d8a9a:	e7ed      	b.n	d8a78 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8a9c:	f1b9 0f00 	cmp.w	r9, #0
   d8aa0:	d101      	bne.n	d8aa6 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d8aa2:	4649      	mov	r1, r9
   d8aa4:	e7e8      	b.n	d8a78 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8aa6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8aa8:	2210      	movs	r2, #16
   d8aaa:	a801      	add	r0, sp, #4
   d8aac:	f000 ff7e 	bl	d99ac <memset>
                    a.v = 6;
   d8ab0:	2306      	movs	r3, #6
   d8ab2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8ab6:	ad01      	add	r5, sp, #4
   d8ab8:	f104 0308 	add.w	r3, r4, #8
   d8abc:	3418      	adds	r4, #24
   d8abe:	6818      	ldr	r0, [r3, #0]
   d8ac0:	6859      	ldr	r1, [r3, #4]
   d8ac2:	462a      	mov	r2, r5
   d8ac4:	c203      	stmia	r2!, {r0, r1}
   d8ac6:	3308      	adds	r3, #8
   d8ac8:	42a3      	cmp	r3, r4
   d8aca:	4615      	mov	r5, r2
   d8acc:	d1f7      	bne.n	d8abe <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d8ace:	a901      	add	r1, sp, #4
   d8ad0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d8ad2:	ad07      	add	r5, sp, #28
   d8ad4:	f7ff fa7e 	bl	d7fd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8ada:	1d3c      	adds	r4, r7, #4
   d8adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8ade:	682b      	ldr	r3, [r5, #0]
   d8ae0:	7023      	strb	r3, [r4, #0]
   d8ae2:	e7de      	b.n	d8aa2 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8ae4:	9800      	ldr	r0, [sp, #0]
   d8ae6:	f7fc fe39 	bl	d575c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8aea:	4638      	mov	r0, r7
   d8aec:	b015      	add	sp, #84	; 0x54
   d8aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d8af4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8af4:	4b02      	ldr	r3, [pc, #8]	; (d8b00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8af6:	4a03      	ldr	r2, [pc, #12]	; (d8b04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8af8:	601a      	str	r2, [r3, #0]
   d8afa:	2200      	movs	r2, #0
   d8afc:	605a      	str	r2, [r3, #4]

} // spark
   d8afe:	4770      	bx	lr
   d8b00:	2003e7c4 	.word	0x2003e7c4
   d8b04:	000da388 	.word	0x000da388

000d8b08 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d8b08:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d8b0a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d8b0c:	d902      	bls.n	d8b14 <pinAvailable+0xc>
    return false;
   d8b0e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d8b10:	b002      	add	sp, #8
   d8b12:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d8b14:	f1a0 030b 	sub.w	r3, r0, #11
   d8b18:	2b02      	cmp	r3, #2
   d8b1a:	d81a      	bhi.n	d8b52 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8b1c:	4c17      	ldr	r4, [pc, #92]	; (d8b7c <pinAvailable+0x74>)
   d8b1e:	7821      	ldrb	r1, [r4, #0]
   d8b20:	f3bf 8f5b 	dmb	ish
   d8b24:	f011 0101 	ands.w	r1, r1, #1
   d8b28:	d10b      	bne.n	d8b42 <pinAvailable+0x3a>
   d8b2a:	4620      	mov	r0, r4
   d8b2c:	9101      	str	r1, [sp, #4]
   d8b2e:	f7fb fab8 	bl	d40a2 <__cxa_guard_acquire>
   d8b32:	9901      	ldr	r1, [sp, #4]
   d8b34:	b128      	cbz	r0, d8b42 <pinAvailable+0x3a>
   d8b36:	4812      	ldr	r0, [pc, #72]	; (d8b80 <pinAvailable+0x78>)
   d8b38:	f7fd fa06 	bl	d5f48 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8b3c:	4620      	mov	r0, r4
   d8b3e:	f7fb fab5 	bl	d40ac <__cxa_guard_release>
   d8b42:	4b0f      	ldr	r3, [pc, #60]	; (d8b80 <pinAvailable+0x78>)
   d8b44:	7818      	ldrb	r0, [r3, #0]
   d8b46:	f7fd f845 	bl	d5bd4 <hal_spi_is_enabled>
   d8b4a:	2800      	cmp	r0, #0
   d8b4c:	d1df      	bne.n	d8b0e <pinAvailable+0x6>
  return true; // 'pin' is available
   d8b4e:	2001      	movs	r0, #1
   d8b50:	e7de      	b.n	d8b10 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d8b52:	2801      	cmp	r0, #1
   d8b54:	d809      	bhi.n	d8b6a <pinAvailable+0x62>
   d8b56:	f000 f881 	bl	d8c5c <_Z19__fetch_global_Wirev>
   d8b5a:	2100      	movs	r1, #0
   d8b5c:	7c00      	ldrb	r0, [r0, #16]
   d8b5e:	f7fc ffc1 	bl	d5ae4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d8b62:	f080 0001 	eor.w	r0, r0, #1
   d8b66:	b2c0      	uxtb	r0, r0
   d8b68:	e7d2      	b.n	d8b10 <pinAvailable+0x8>
   d8b6a:	3809      	subs	r0, #9
   d8b6c:	2801      	cmp	r0, #1
   d8b6e:	d8ee      	bhi.n	d8b4e <pinAvailable+0x46>
   d8b70:	f7ff fb50 	bl	d8214 <_Z22__fetch_global_Serial1v>
   d8b74:	7c00      	ldrb	r0, [r0, #16]
   d8b76:	f7fc ff5d 	bl	d5a34 <hal_usart_is_enabled>
   d8b7a:	e7f2      	b.n	d8b62 <pinAvailable+0x5a>
   d8b7c:	2003e630 	.word	0x2003e630
   d8b80:	2003e634 	.word	0x2003e634

000d8b84 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8b84:	2823      	cmp	r0, #35	; 0x23
{
   d8b86:	b538      	push	{r3, r4, r5, lr}
   d8b88:	4604      	mov	r4, r0
   d8b8a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8b8c:	d80a      	bhi.n	d8ba4 <pinMode+0x20>
   d8b8e:	29ff      	cmp	r1, #255	; 0xff
   d8b90:	d008      	beq.n	d8ba4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d8b92:	f7ff ffb9 	bl	d8b08 <pinAvailable>
   d8b96:	b128      	cbz	r0, d8ba4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d8b98:	4629      	mov	r1, r5
   d8b9a:	4620      	mov	r0, r4
}
   d8b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d8ba0:	f7fc bdec 	b.w	d577c <HAL_Pin_Mode>
}
   d8ba4:	bd38      	pop	{r3, r4, r5, pc}

000d8ba6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8ba6:	b538      	push	{r3, r4, r5, lr}
   d8ba8:	4604      	mov	r4, r0
   d8baa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8bac:	f7fc fdee 	bl	d578c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8bb0:	28ff      	cmp	r0, #255	; 0xff
   d8bb2:	d010      	beq.n	d8bd6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d8bb4:	2806      	cmp	r0, #6
   d8bb6:	d804      	bhi.n	d8bc2 <digitalWrite+0x1c>
   d8bb8:	234d      	movs	r3, #77	; 0x4d
   d8bba:	fa23 f000 	lsr.w	r0, r3, r0
   d8bbe:	07c3      	lsls	r3, r0, #31
   d8bc0:	d409      	bmi.n	d8bd6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8bc2:	4620      	mov	r0, r4
   d8bc4:	f7ff ffa0 	bl	d8b08 <pinAvailable>
   d8bc8:	b128      	cbz	r0, d8bd6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8bca:	4629      	mov	r1, r5
   d8bcc:	4620      	mov	r0, r4
}
   d8bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d8bd2:	f7fc bde3 	b.w	d579c <HAL_GPIO_Write>
}
   d8bd6:	bd38      	pop	{r3, r4, r5, pc}

000d8bd8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8bd8:	b510      	push	{r4, lr}
   d8bda:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8bdc:	f7fc fdd6 	bl	d578c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d8be0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d8be2:	b2db      	uxtb	r3, r3
   d8be4:	2b01      	cmp	r3, #1
   d8be6:	d908      	bls.n	d8bfa <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8be8:	4620      	mov	r0, r4
   d8bea:	f7ff ff8d 	bl	d8b08 <pinAvailable>
   d8bee:	b120      	cbz	r0, d8bfa <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8bf0:	4620      	mov	r0, r4
}
   d8bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d8bf6:	f7fc bdd9 	b.w	d57ac <HAL_GPIO_Read>
}
   d8bfa:	2000      	movs	r0, #0
   d8bfc:	bd10      	pop	{r4, pc}
	...

000d8c00 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d8c00:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d8c02:	4c08      	ldr	r4, [pc, #32]	; (d8c24 <_Z21__fetch_global_EEPROMv+0x24>)
   d8c04:	7823      	ldrb	r3, [r4, #0]
   d8c06:	f3bf 8f5b 	dmb	ish
   d8c0a:	07db      	lsls	r3, r3, #31
   d8c0c:	d408      	bmi.n	d8c20 <_Z21__fetch_global_EEPROMv+0x20>
   d8c0e:	4620      	mov	r0, r4
   d8c10:	f7fb fa47 	bl	d40a2 <__cxa_guard_acquire>
   d8c14:	b120      	cbz	r0, d8c20 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d8c16:	f7fc fdf1 	bl	d57fc <HAL_EEPROM_Init>
   d8c1a:	4620      	mov	r0, r4
   d8c1c:	f7fb fa46 	bl	d40ac <__cxa_guard_release>
	return eeprom;
}
   d8c20:	4801      	ldr	r0, [pc, #4]	; (d8c28 <_Z21__fetch_global_EEPROMv+0x28>)
   d8c22:	bd10      	pop	{r4, pc}
   d8c24:	2003e7d0 	.word	0x2003e7d0
   d8c28:	2003e7d4 	.word	0x2003e7d4

000d8c2c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d8c2c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d8c2e:	2300      	movs	r3, #0
   d8c30:	2520      	movs	r5, #32
   d8c32:	8043      	strh	r3, [r0, #2]
   d8c34:	2314      	movs	r3, #20
{
   d8c36:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8c38:	8003      	strh	r3, [r0, #0]
   d8c3a:	6085      	str	r5, [r0, #8]
   d8c3c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8c3e:	4906      	ldr	r1, [pc, #24]	; (d8c58 <_Z17acquireWireBufferv+0x2c>)
   d8c40:	4628      	mov	r0, r5
   d8c42:	f000 f83c 	bl	d8cbe <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8c46:	4904      	ldr	r1, [pc, #16]	; (d8c58 <_Z17acquireWireBufferv+0x2c>)
	};
   d8c48:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8c4a:	4628      	mov	r0, r5
   d8c4c:	f000 f837 	bl	d8cbe <_ZnajRKSt9nothrow_t>
	};
   d8c50:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d8c52:	4620      	mov	r0, r4
   d8c54:	bd38      	pop	{r3, r4, r5, pc}
   d8c56:	bf00      	nop
   d8c58:	000da3bc 	.word	0x000da3bc

000d8c5c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8c5c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8c5e:	4d0f      	ldr	r5, [pc, #60]	; (d8c9c <_Z19__fetch_global_Wirev+0x40>)
   d8c60:	7829      	ldrb	r1, [r5, #0]
   d8c62:	f3bf 8f5b 	dmb	ish
   d8c66:	f011 0401 	ands.w	r4, r1, #1
{
   d8c6a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8c6c:	d113      	bne.n	d8c96 <_Z19__fetch_global_Wirev+0x3a>
   d8c6e:	4628      	mov	r0, r5
   d8c70:	f7fb fa17 	bl	d40a2 <__cxa_guard_acquire>
   d8c74:	b178      	cbz	r0, d8c96 <_Z19__fetch_global_Wirev+0x3a>
   d8c76:	a801      	add	r0, sp, #4
   d8c78:	f7ff ffd8 	bl	d8c2c <_Z17acquireWireBufferv>
   d8c7c:	aa01      	add	r2, sp, #4
   d8c7e:	4621      	mov	r1, r4
   d8c80:	4807      	ldr	r0, [pc, #28]	; (d8ca0 <_Z19__fetch_global_Wirev+0x44>)
   d8c82:	f7ff fb1d 	bl	d82c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d8c86:	4628      	mov	r0, r5
   d8c88:	f7fb fa10 	bl	d40ac <__cxa_guard_release>
   d8c8c:	4a05      	ldr	r2, [pc, #20]	; (d8ca4 <_Z19__fetch_global_Wirev+0x48>)
   d8c8e:	4906      	ldr	r1, [pc, #24]	; (d8ca8 <_Z19__fetch_global_Wirev+0x4c>)
   d8c90:	4803      	ldr	r0, [pc, #12]	; (d8ca0 <_Z19__fetch_global_Wirev+0x44>)
   d8c92:	f000 f80b 	bl	d8cac <__aeabi_atexit>
	return wire;
}
   d8c96:	4802      	ldr	r0, [pc, #8]	; (d8ca0 <_Z19__fetch_global_Wirev+0x44>)
   d8c98:	b007      	add	sp, #28
   d8c9a:	bd30      	pop	{r4, r5, pc}
   d8c9c:	2003e7d8 	.word	0x2003e7d8
   d8ca0:	2003e7dc 	.word	0x2003e7dc
   d8ca4:	2003e0ac 	.word	0x2003e0ac
   d8ca8:	000d8269 	.word	0x000d8269

000d8cac <__aeabi_atexit>:
   d8cac:	460b      	mov	r3, r1
   d8cae:	4601      	mov	r1, r0
   d8cb0:	4618      	mov	r0, r3
   d8cb2:	f000 be23 	b.w	d98fc <__cxa_atexit>

000d8cb6 <_ZdlPvj>:
   d8cb6:	f7fb b9f2 	b.w	d409e <_ZdlPv>

000d8cba <_ZnwjRKSt9nothrow_t>:
   d8cba:	f7fb b9ec 	b.w	d4096 <_Znwj>

000d8cbe <_ZnajRKSt9nothrow_t>:
   d8cbe:	f7fb b9ec 	b.w	d409a <_Znaj>

000d8cc2 <_ZSt25__throw_bad_function_callv>:
   d8cc2:	b508      	push	{r3, lr}
   d8cc4:	f7fd f8e4 	bl	d5e90 <abort>

000d8cc8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d8cc8:	4901      	ldr	r1, [pc, #4]	; (d8cd0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d8cca:	f000 b8f9 	b.w	d8ec0 <_ZNKSt9type_infoeqERKS_>
   d8cce:	bf00      	nop
   d8cd0:	000da3d8 	.word	0x000da3d8

000d8cd4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d8cd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d8cd6:	2400      	movs	r4, #0
   d8cd8:	2310      	movs	r3, #16
   d8cda:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d8cde:	6803      	ldr	r3, [r0, #0]
   d8ce0:	9400      	str	r4, [sp, #0]
   d8ce2:	699e      	ldr	r6, [r3, #24]
   d8ce4:	f88d 4004 	strb.w	r4, [sp, #4]
   d8ce8:	4615      	mov	r5, r2
   d8cea:	466b      	mov	r3, sp
   d8cec:	6812      	ldr	r2, [r2, #0]
   d8cee:	47b0      	blx	r6
   d8cf0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d8cf4:	f003 0306 	and.w	r3, r3, #6
   d8cf8:	2b06      	cmp	r3, #6
   d8cfa:	bf03      	ittte	eq
   d8cfc:	9b00      	ldreq	r3, [sp, #0]
   d8cfe:	602b      	streq	r3, [r5, #0]
   d8d00:	2001      	moveq	r0, #1
   d8d02:	4620      	movne	r0, r4
   d8d04:	b004      	add	sp, #16
   d8d06:	bd70      	pop	{r4, r5, r6, pc}

000d8d08 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d8d08:	9800      	ldr	r0, [sp, #0]
   d8d0a:	4290      	cmp	r0, r2
   d8d0c:	bf14      	ite	ne
   d8d0e:	2001      	movne	r0, #1
   d8d10:	2006      	moveq	r0, #6
   d8d12:	4770      	bx	lr

000d8d14 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d8d14:	b510      	push	{r4, lr}
   d8d16:	4b03      	ldr	r3, [pc, #12]	; (d8d24 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d8d18:	6003      	str	r3, [r0, #0]
   d8d1a:	4604      	mov	r4, r0
   d8d1c:	f000 f8cd 	bl	d8eba <_ZNSt9type_infoD1Ev>
   d8d20:	4620      	mov	r0, r4
   d8d22:	bd10      	pop	{r4, pc}
   d8d24:	000da418 	.word	0x000da418

000d8d28 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d8d28:	b510      	push	{r4, lr}
   d8d2a:	4604      	mov	r4, r0
   d8d2c:	f7ff fff2 	bl	d8d14 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d8d30:	4620      	mov	r0, r4
   d8d32:	2108      	movs	r1, #8
   d8d34:	f7ff ffbf 	bl	d8cb6 <_ZdlPvj>
   d8d38:	4620      	mov	r0, r4
   d8d3a:	bd10      	pop	{r4, pc}

000d8d3c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d8d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8d40:	461f      	mov	r7, r3
   d8d42:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d8d46:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d8d4a:	4598      	cmp	r8, r3
   d8d4c:	4606      	mov	r6, r0
   d8d4e:	4615      	mov	r5, r2
   d8d50:	d107      	bne.n	d8d62 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d8d52:	9907      	ldr	r1, [sp, #28]
   d8d54:	f000 f8b4 	bl	d8ec0 <_ZNKSt9type_infoeqERKS_>
   d8d58:	b118      	cbz	r0, d8d62 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d8d5a:	7165      	strb	r5, [r4, #5]
   d8d5c:	2000      	movs	r0, #0
   d8d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8d62:	4639      	mov	r1, r7
   d8d64:	4630      	mov	r0, r6
   d8d66:	f000 f8ab 	bl	d8ec0 <_ZNKSt9type_infoeqERKS_>
   d8d6a:	2800      	cmp	r0, #0
   d8d6c:	d0f6      	beq.n	d8d5c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d8d6e:	2301      	movs	r3, #1
   d8d70:	f8c4 8000 	str.w	r8, [r4]
   d8d74:	7125      	strb	r5, [r4, #4]
   d8d76:	71a3      	strb	r3, [r4, #6]
   d8d78:	e7f0      	b.n	d8d5c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d8d7a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d8d7a:	b538      	push	{r3, r4, r5, lr}
   d8d7c:	4615      	mov	r5, r2
   d8d7e:	461c      	mov	r4, r3
   d8d80:	f000 f89e 	bl	d8ec0 <_ZNKSt9type_infoeqERKS_>
   d8d84:	b120      	cbz	r0, d8d90 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d8d86:	2308      	movs	r3, #8
   d8d88:	60e3      	str	r3, [r4, #12]
   d8d8a:	2306      	movs	r3, #6
   d8d8c:	6025      	str	r5, [r4, #0]
   d8d8e:	7123      	strb	r3, [r4, #4]
   d8d90:	bd38      	pop	{r3, r4, r5, pc}

000d8d92 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d8d92:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8d94:	4605      	mov	r5, r0
   d8d96:	460c      	mov	r4, r1
   d8d98:	9201      	str	r2, [sp, #4]
   d8d9a:	461e      	mov	r6, r3
   d8d9c:	f000 f890 	bl	d8ec0 <_ZNKSt9type_infoeqERKS_>
   d8da0:	b950      	cbnz	r0, d8db8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d8da2:	2e03      	cmp	r6, #3
   d8da4:	d808      	bhi.n	d8db8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d8da6:	6823      	ldr	r3, [r4, #0]
   d8da8:	9a01      	ldr	r2, [sp, #4]
   d8daa:	695b      	ldr	r3, [r3, #20]
   d8dac:	4629      	mov	r1, r5
   d8dae:	4620      	mov	r0, r4
   d8db0:	b002      	add	sp, #8
   d8db2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8db6:	4718      	bx	r3
   d8db8:	b002      	add	sp, #8
   d8dba:	bd70      	pop	{r4, r5, r6, pc}

000d8dbc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d8dbc:	b510      	push	{r4, lr}
   d8dbe:	4b03      	ldr	r3, [pc, #12]	; (d8dcc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d8dc0:	6003      	str	r3, [r0, #0]
   d8dc2:	4604      	mov	r4, r0
   d8dc4:	f7ff ffa6 	bl	d8d14 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d8dc8:	4620      	mov	r0, r4
   d8dca:	bd10      	pop	{r4, pc}
   d8dcc:	000da478 	.word	0x000da478

000d8dd0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d8dd0:	b510      	push	{r4, lr}
   d8dd2:	4604      	mov	r4, r0
   d8dd4:	f7ff fff2 	bl	d8dbc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d8dd8:	4620      	mov	r0, r4
   d8dda:	210c      	movs	r1, #12
   d8ddc:	f7ff ff6b 	bl	d8cb6 <_ZdlPvj>
   d8de0:	4620      	mov	r0, r4
   d8de2:	bd10      	pop	{r4, pc}

000d8de4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d8de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8de6:	9f08      	ldr	r7, [sp, #32]
   d8de8:	4297      	cmp	r7, r2
   d8dea:	4605      	mov	r5, r0
   d8dec:	460e      	mov	r6, r1
   d8dee:	4614      	mov	r4, r2
   d8df0:	d00a      	beq.n	d8e08 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d8df2:	68a8      	ldr	r0, [r5, #8]
   d8df4:	6802      	ldr	r2, [r0, #0]
   d8df6:	9708      	str	r7, [sp, #32]
   d8df8:	6a15      	ldr	r5, [r2, #32]
   d8dfa:	4631      	mov	r1, r6
   d8dfc:	4622      	mov	r2, r4
   d8dfe:	46ac      	mov	ip, r5
   d8e00:	b003      	add	sp, #12
   d8e02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d8e06:	4760      	bx	ip
   d8e08:	4619      	mov	r1, r3
   d8e0a:	9301      	str	r3, [sp, #4]
   d8e0c:	f000 f858 	bl	d8ec0 <_ZNKSt9type_infoeqERKS_>
   d8e10:	9b01      	ldr	r3, [sp, #4]
   d8e12:	2800      	cmp	r0, #0
   d8e14:	d0ed      	beq.n	d8df2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d8e16:	2006      	movs	r0, #6
   d8e18:	b003      	add	sp, #12
   d8e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8e1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d8e1c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8e20:	460d      	mov	r5, r1
   d8e22:	4619      	mov	r1, r3
   d8e24:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d8e28:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d8e2c:	4681      	mov	r9, r0
   d8e2e:	4617      	mov	r7, r2
   d8e30:	4698      	mov	r8, r3
   d8e32:	f000 f845 	bl	d8ec0 <_ZNKSt9type_infoeqERKS_>
   d8e36:	b190      	cbz	r0, d8e5e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d8e38:	2d00      	cmp	r5, #0
   d8e3a:	6034      	str	r4, [r6, #0]
   d8e3c:	7137      	strb	r7, [r6, #4]
   d8e3e:	db09      	blt.n	d8e54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d8e40:	1961      	adds	r1, r4, r5
   d8e42:	458a      	cmp	sl, r1
   d8e44:	bf0c      	ite	eq
   d8e46:	2106      	moveq	r1, #6
   d8e48:	2101      	movne	r1, #1
   d8e4a:	71b1      	strb	r1, [r6, #6]
   d8e4c:	2000      	movs	r0, #0
   d8e4e:	b001      	add	sp, #4
   d8e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8e54:	3502      	adds	r5, #2
   d8e56:	d1f9      	bne.n	d8e4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8e58:	2301      	movs	r3, #1
   d8e5a:	71b3      	strb	r3, [r6, #6]
   d8e5c:	e7f6      	b.n	d8e4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8e5e:	4554      	cmp	r4, sl
   d8e60:	d106      	bne.n	d8e70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8e62:	4659      	mov	r1, fp
   d8e64:	4648      	mov	r0, r9
   d8e66:	f000 f82b 	bl	d8ec0 <_ZNKSt9type_infoeqERKS_>
   d8e6a:	b108      	cbz	r0, d8e70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8e6c:	7177      	strb	r7, [r6, #5]
   d8e6e:	e7ed      	b.n	d8e4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8e70:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d8e74:	6803      	ldr	r3, [r0, #0]
   d8e76:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d8e7a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d8e7e:	69dc      	ldr	r4, [r3, #28]
   d8e80:	463a      	mov	r2, r7
   d8e82:	4643      	mov	r3, r8
   d8e84:	4629      	mov	r1, r5
   d8e86:	46a4      	mov	ip, r4
   d8e88:	b001      	add	sp, #4
   d8e8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8e8e:	4760      	bx	ip

000d8e90 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d8e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8e94:	4607      	mov	r7, r0
   d8e96:	460c      	mov	r4, r1
   d8e98:	4615      	mov	r5, r2
   d8e9a:	461e      	mov	r6, r3
   d8e9c:	f7ff ff6d 	bl	d8d7a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d8ea0:	b948      	cbnz	r0, d8eb6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d8ea2:	68b8      	ldr	r0, [r7, #8]
   d8ea4:	6803      	ldr	r3, [r0, #0]
   d8ea6:	699f      	ldr	r7, [r3, #24]
   d8ea8:	462a      	mov	r2, r5
   d8eaa:	4633      	mov	r3, r6
   d8eac:	4621      	mov	r1, r4
   d8eae:	46bc      	mov	ip, r7
   d8eb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8eb4:	4760      	bx	ip
   d8eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8eba <_ZNSt9type_infoD1Ev>:
   d8eba:	4770      	bx	lr

000d8ebc <_ZNKSt9type_info14__is_pointer_pEv>:
   d8ebc:	2000      	movs	r0, #0
   d8ebe:	4770      	bx	lr

000d8ec0 <_ZNKSt9type_infoeqERKS_>:
   d8ec0:	4281      	cmp	r1, r0
   d8ec2:	b508      	push	{r3, lr}
   d8ec4:	d00e      	beq.n	d8ee4 <_ZNKSt9type_infoeqERKS_+0x24>
   d8ec6:	6840      	ldr	r0, [r0, #4]
   d8ec8:	7803      	ldrb	r3, [r0, #0]
   d8eca:	2b2a      	cmp	r3, #42	; 0x2a
   d8ecc:	d00c      	beq.n	d8ee8 <_ZNKSt9type_infoeqERKS_+0x28>
   d8ece:	6849      	ldr	r1, [r1, #4]
   d8ed0:	780b      	ldrb	r3, [r1, #0]
   d8ed2:	2b2a      	cmp	r3, #42	; 0x2a
   d8ed4:	bf08      	it	eq
   d8ed6:	3101      	addeq	r1, #1
   d8ed8:	f000 fd94 	bl	d9a04 <strcmp>
   d8edc:	fab0 f080 	clz	r0, r0
   d8ee0:	0940      	lsrs	r0, r0, #5
   d8ee2:	bd08      	pop	{r3, pc}
   d8ee4:	2001      	movs	r0, #1
   d8ee6:	e7fc      	b.n	d8ee2 <_ZNKSt9type_infoeqERKS_+0x22>
   d8ee8:	2000      	movs	r0, #0
   d8eea:	e7fa      	b.n	d8ee2 <_ZNKSt9type_infoeqERKS_+0x22>

000d8eec <__aeabi_drsub>:
   d8eec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8ef0:	e002      	b.n	d8ef8 <__adddf3>
   d8ef2:	bf00      	nop

000d8ef4 <__aeabi_dsub>:
   d8ef4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8ef8 <__adddf3>:
   d8ef8:	b530      	push	{r4, r5, lr}
   d8efa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8efe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8f02:	ea94 0f05 	teq	r4, r5
   d8f06:	bf08      	it	eq
   d8f08:	ea90 0f02 	teqeq	r0, r2
   d8f0c:	bf1f      	itttt	ne
   d8f0e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8f12:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8f16:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8f1a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8f1e:	f000 80e2 	beq.w	d90e6 <__adddf3+0x1ee>
   d8f22:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8f26:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8f2a:	bfb8      	it	lt
   d8f2c:	426d      	neglt	r5, r5
   d8f2e:	dd0c      	ble.n	d8f4a <__adddf3+0x52>
   d8f30:	442c      	add	r4, r5
   d8f32:	ea80 0202 	eor.w	r2, r0, r2
   d8f36:	ea81 0303 	eor.w	r3, r1, r3
   d8f3a:	ea82 0000 	eor.w	r0, r2, r0
   d8f3e:	ea83 0101 	eor.w	r1, r3, r1
   d8f42:	ea80 0202 	eor.w	r2, r0, r2
   d8f46:	ea81 0303 	eor.w	r3, r1, r3
   d8f4a:	2d36      	cmp	r5, #54	; 0x36
   d8f4c:	bf88      	it	hi
   d8f4e:	bd30      	pophi	{r4, r5, pc}
   d8f50:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8f54:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8f58:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8f5c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8f60:	d002      	beq.n	d8f68 <__adddf3+0x70>
   d8f62:	4240      	negs	r0, r0
   d8f64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8f68:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8f6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8f70:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8f74:	d002      	beq.n	d8f7c <__adddf3+0x84>
   d8f76:	4252      	negs	r2, r2
   d8f78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8f7c:	ea94 0f05 	teq	r4, r5
   d8f80:	f000 80a7 	beq.w	d90d2 <__adddf3+0x1da>
   d8f84:	f1a4 0401 	sub.w	r4, r4, #1
   d8f88:	f1d5 0e20 	rsbs	lr, r5, #32
   d8f8c:	db0d      	blt.n	d8faa <__adddf3+0xb2>
   d8f8e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8f92:	fa22 f205 	lsr.w	r2, r2, r5
   d8f96:	1880      	adds	r0, r0, r2
   d8f98:	f141 0100 	adc.w	r1, r1, #0
   d8f9c:	fa03 f20e 	lsl.w	r2, r3, lr
   d8fa0:	1880      	adds	r0, r0, r2
   d8fa2:	fa43 f305 	asr.w	r3, r3, r5
   d8fa6:	4159      	adcs	r1, r3
   d8fa8:	e00e      	b.n	d8fc8 <__adddf3+0xd0>
   d8faa:	f1a5 0520 	sub.w	r5, r5, #32
   d8fae:	f10e 0e20 	add.w	lr, lr, #32
   d8fb2:	2a01      	cmp	r2, #1
   d8fb4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8fb8:	bf28      	it	cs
   d8fba:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8fbe:	fa43 f305 	asr.w	r3, r3, r5
   d8fc2:	18c0      	adds	r0, r0, r3
   d8fc4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8fc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8fcc:	d507      	bpl.n	d8fde <__adddf3+0xe6>
   d8fce:	f04f 0e00 	mov.w	lr, #0
   d8fd2:	f1dc 0c00 	rsbs	ip, ip, #0
   d8fd6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8fda:	eb6e 0101 	sbc.w	r1, lr, r1
   d8fde:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8fe2:	d31b      	bcc.n	d901c <__adddf3+0x124>
   d8fe4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8fe8:	d30c      	bcc.n	d9004 <__adddf3+0x10c>
   d8fea:	0849      	lsrs	r1, r1, #1
   d8fec:	ea5f 0030 	movs.w	r0, r0, rrx
   d8ff0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8ff4:	f104 0401 	add.w	r4, r4, #1
   d8ff8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8ffc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9000:	f080 809a 	bcs.w	d9138 <__adddf3+0x240>
   d9004:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9008:	bf08      	it	eq
   d900a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d900e:	f150 0000 	adcs.w	r0, r0, #0
   d9012:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9016:	ea41 0105 	orr.w	r1, r1, r5
   d901a:	bd30      	pop	{r4, r5, pc}
   d901c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d9020:	4140      	adcs	r0, r0
   d9022:	eb41 0101 	adc.w	r1, r1, r1
   d9026:	3c01      	subs	r4, #1
   d9028:	bf28      	it	cs
   d902a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d902e:	d2e9      	bcs.n	d9004 <__adddf3+0x10c>
   d9030:	f091 0f00 	teq	r1, #0
   d9034:	bf04      	itt	eq
   d9036:	4601      	moveq	r1, r0
   d9038:	2000      	moveq	r0, #0
   d903a:	fab1 f381 	clz	r3, r1
   d903e:	bf08      	it	eq
   d9040:	3320      	addeq	r3, #32
   d9042:	f1a3 030b 	sub.w	r3, r3, #11
   d9046:	f1b3 0220 	subs.w	r2, r3, #32
   d904a:	da0c      	bge.n	d9066 <__adddf3+0x16e>
   d904c:	320c      	adds	r2, #12
   d904e:	dd08      	ble.n	d9062 <__adddf3+0x16a>
   d9050:	f102 0c14 	add.w	ip, r2, #20
   d9054:	f1c2 020c 	rsb	r2, r2, #12
   d9058:	fa01 f00c 	lsl.w	r0, r1, ip
   d905c:	fa21 f102 	lsr.w	r1, r1, r2
   d9060:	e00c      	b.n	d907c <__adddf3+0x184>
   d9062:	f102 0214 	add.w	r2, r2, #20
   d9066:	bfd8      	it	le
   d9068:	f1c2 0c20 	rsble	ip, r2, #32
   d906c:	fa01 f102 	lsl.w	r1, r1, r2
   d9070:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9074:	bfdc      	itt	le
   d9076:	ea41 010c 	orrle.w	r1, r1, ip
   d907a:	4090      	lslle	r0, r2
   d907c:	1ae4      	subs	r4, r4, r3
   d907e:	bfa2      	ittt	ge
   d9080:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9084:	4329      	orrge	r1, r5
   d9086:	bd30      	popge	{r4, r5, pc}
   d9088:	ea6f 0404 	mvn.w	r4, r4
   d908c:	3c1f      	subs	r4, #31
   d908e:	da1c      	bge.n	d90ca <__adddf3+0x1d2>
   d9090:	340c      	adds	r4, #12
   d9092:	dc0e      	bgt.n	d90b2 <__adddf3+0x1ba>
   d9094:	f104 0414 	add.w	r4, r4, #20
   d9098:	f1c4 0220 	rsb	r2, r4, #32
   d909c:	fa20 f004 	lsr.w	r0, r0, r4
   d90a0:	fa01 f302 	lsl.w	r3, r1, r2
   d90a4:	ea40 0003 	orr.w	r0, r0, r3
   d90a8:	fa21 f304 	lsr.w	r3, r1, r4
   d90ac:	ea45 0103 	orr.w	r1, r5, r3
   d90b0:	bd30      	pop	{r4, r5, pc}
   d90b2:	f1c4 040c 	rsb	r4, r4, #12
   d90b6:	f1c4 0220 	rsb	r2, r4, #32
   d90ba:	fa20 f002 	lsr.w	r0, r0, r2
   d90be:	fa01 f304 	lsl.w	r3, r1, r4
   d90c2:	ea40 0003 	orr.w	r0, r0, r3
   d90c6:	4629      	mov	r1, r5
   d90c8:	bd30      	pop	{r4, r5, pc}
   d90ca:	fa21 f004 	lsr.w	r0, r1, r4
   d90ce:	4629      	mov	r1, r5
   d90d0:	bd30      	pop	{r4, r5, pc}
   d90d2:	f094 0f00 	teq	r4, #0
   d90d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d90da:	bf06      	itte	eq
   d90dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d90e0:	3401      	addeq	r4, #1
   d90e2:	3d01      	subne	r5, #1
   d90e4:	e74e      	b.n	d8f84 <__adddf3+0x8c>
   d90e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d90ea:	bf18      	it	ne
   d90ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d90f0:	d029      	beq.n	d9146 <__adddf3+0x24e>
   d90f2:	ea94 0f05 	teq	r4, r5
   d90f6:	bf08      	it	eq
   d90f8:	ea90 0f02 	teqeq	r0, r2
   d90fc:	d005      	beq.n	d910a <__adddf3+0x212>
   d90fe:	ea54 0c00 	orrs.w	ip, r4, r0
   d9102:	bf04      	itt	eq
   d9104:	4619      	moveq	r1, r3
   d9106:	4610      	moveq	r0, r2
   d9108:	bd30      	pop	{r4, r5, pc}
   d910a:	ea91 0f03 	teq	r1, r3
   d910e:	bf1e      	ittt	ne
   d9110:	2100      	movne	r1, #0
   d9112:	2000      	movne	r0, #0
   d9114:	bd30      	popne	{r4, r5, pc}
   d9116:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d911a:	d105      	bne.n	d9128 <__adddf3+0x230>
   d911c:	0040      	lsls	r0, r0, #1
   d911e:	4149      	adcs	r1, r1
   d9120:	bf28      	it	cs
   d9122:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9126:	bd30      	pop	{r4, r5, pc}
   d9128:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d912c:	bf3c      	itt	cc
   d912e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d9132:	bd30      	popcc	{r4, r5, pc}
   d9134:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9138:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d913c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9140:	f04f 0000 	mov.w	r0, #0
   d9144:	bd30      	pop	{r4, r5, pc}
   d9146:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d914a:	bf1a      	itte	ne
   d914c:	4619      	movne	r1, r3
   d914e:	4610      	movne	r0, r2
   d9150:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9154:	bf1c      	itt	ne
   d9156:	460b      	movne	r3, r1
   d9158:	4602      	movne	r2, r0
   d915a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d915e:	bf06      	itte	eq
   d9160:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9164:	ea91 0f03 	teqeq	r1, r3
   d9168:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d916c:	bd30      	pop	{r4, r5, pc}
   d916e:	bf00      	nop

000d9170 <__aeabi_ui2d>:
   d9170:	f090 0f00 	teq	r0, #0
   d9174:	bf04      	itt	eq
   d9176:	2100      	moveq	r1, #0
   d9178:	4770      	bxeq	lr
   d917a:	b530      	push	{r4, r5, lr}
   d917c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9180:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9184:	f04f 0500 	mov.w	r5, #0
   d9188:	f04f 0100 	mov.w	r1, #0
   d918c:	e750      	b.n	d9030 <__adddf3+0x138>
   d918e:	bf00      	nop

000d9190 <__aeabi_i2d>:
   d9190:	f090 0f00 	teq	r0, #0
   d9194:	bf04      	itt	eq
   d9196:	2100      	moveq	r1, #0
   d9198:	4770      	bxeq	lr
   d919a:	b530      	push	{r4, r5, lr}
   d919c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d91a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d91a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d91a8:	bf48      	it	mi
   d91aa:	4240      	negmi	r0, r0
   d91ac:	f04f 0100 	mov.w	r1, #0
   d91b0:	e73e      	b.n	d9030 <__adddf3+0x138>
   d91b2:	bf00      	nop

000d91b4 <__aeabi_f2d>:
   d91b4:	0042      	lsls	r2, r0, #1
   d91b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d91ba:	ea4f 0131 	mov.w	r1, r1, rrx
   d91be:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d91c2:	bf1f      	itttt	ne
   d91c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d91c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d91cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d91d0:	4770      	bxne	lr
   d91d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d91d6:	bf08      	it	eq
   d91d8:	4770      	bxeq	lr
   d91da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d91de:	bf04      	itt	eq
   d91e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d91e4:	4770      	bxeq	lr
   d91e6:	b530      	push	{r4, r5, lr}
   d91e8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d91ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d91f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d91f4:	e71c      	b.n	d9030 <__adddf3+0x138>
   d91f6:	bf00      	nop

000d91f8 <__aeabi_ul2d>:
   d91f8:	ea50 0201 	orrs.w	r2, r0, r1
   d91fc:	bf08      	it	eq
   d91fe:	4770      	bxeq	lr
   d9200:	b530      	push	{r4, r5, lr}
   d9202:	f04f 0500 	mov.w	r5, #0
   d9206:	e00a      	b.n	d921e <__aeabi_l2d+0x16>

000d9208 <__aeabi_l2d>:
   d9208:	ea50 0201 	orrs.w	r2, r0, r1
   d920c:	bf08      	it	eq
   d920e:	4770      	bxeq	lr
   d9210:	b530      	push	{r4, r5, lr}
   d9212:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d9216:	d502      	bpl.n	d921e <__aeabi_l2d+0x16>
   d9218:	4240      	negs	r0, r0
   d921a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d921e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9222:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9226:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d922a:	f43f aed8 	beq.w	d8fde <__adddf3+0xe6>
   d922e:	f04f 0203 	mov.w	r2, #3
   d9232:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9236:	bf18      	it	ne
   d9238:	3203      	addne	r2, #3
   d923a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d923e:	bf18      	it	ne
   d9240:	3203      	addne	r2, #3
   d9242:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d9246:	f1c2 0320 	rsb	r3, r2, #32
   d924a:	fa00 fc03 	lsl.w	ip, r0, r3
   d924e:	fa20 f002 	lsr.w	r0, r0, r2
   d9252:	fa01 fe03 	lsl.w	lr, r1, r3
   d9256:	ea40 000e 	orr.w	r0, r0, lr
   d925a:	fa21 f102 	lsr.w	r1, r1, r2
   d925e:	4414      	add	r4, r2
   d9260:	e6bd      	b.n	d8fde <__adddf3+0xe6>
   d9262:	bf00      	nop

000d9264 <__aeabi_dmul>:
   d9264:	b570      	push	{r4, r5, r6, lr}
   d9266:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d926a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d926e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9272:	bf1d      	ittte	ne
   d9274:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9278:	ea94 0f0c 	teqne	r4, ip
   d927c:	ea95 0f0c 	teqne	r5, ip
   d9280:	f000 f8de 	bleq	d9440 <__aeabi_dmul+0x1dc>
   d9284:	442c      	add	r4, r5
   d9286:	ea81 0603 	eor.w	r6, r1, r3
   d928a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d928e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9292:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9296:	bf18      	it	ne
   d9298:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d929c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d92a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d92a4:	d038      	beq.n	d9318 <__aeabi_dmul+0xb4>
   d92a6:	fba0 ce02 	umull	ip, lr, r0, r2
   d92aa:	f04f 0500 	mov.w	r5, #0
   d92ae:	fbe1 e502 	umlal	lr, r5, r1, r2
   d92b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d92b6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d92ba:	f04f 0600 	mov.w	r6, #0
   d92be:	fbe1 5603 	umlal	r5, r6, r1, r3
   d92c2:	f09c 0f00 	teq	ip, #0
   d92c6:	bf18      	it	ne
   d92c8:	f04e 0e01 	orrne.w	lr, lr, #1
   d92cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d92d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d92d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d92d8:	d204      	bcs.n	d92e4 <__aeabi_dmul+0x80>
   d92da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d92de:	416d      	adcs	r5, r5
   d92e0:	eb46 0606 	adc.w	r6, r6, r6
   d92e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d92e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d92ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d92f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d92f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d92f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d92fc:	bf88      	it	hi
   d92fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9302:	d81e      	bhi.n	d9342 <__aeabi_dmul+0xde>
   d9304:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9308:	bf08      	it	eq
   d930a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d930e:	f150 0000 	adcs.w	r0, r0, #0
   d9312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9316:	bd70      	pop	{r4, r5, r6, pc}
   d9318:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d931c:	ea46 0101 	orr.w	r1, r6, r1
   d9320:	ea40 0002 	orr.w	r0, r0, r2
   d9324:	ea81 0103 	eor.w	r1, r1, r3
   d9328:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d932c:	bfc2      	ittt	gt
   d932e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9332:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9336:	bd70      	popgt	{r4, r5, r6, pc}
   d9338:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d933c:	f04f 0e00 	mov.w	lr, #0
   d9340:	3c01      	subs	r4, #1
   d9342:	f300 80ab 	bgt.w	d949c <__aeabi_dmul+0x238>
   d9346:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d934a:	bfde      	ittt	le
   d934c:	2000      	movle	r0, #0
   d934e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9352:	bd70      	pople	{r4, r5, r6, pc}
   d9354:	f1c4 0400 	rsb	r4, r4, #0
   d9358:	3c20      	subs	r4, #32
   d935a:	da35      	bge.n	d93c8 <__aeabi_dmul+0x164>
   d935c:	340c      	adds	r4, #12
   d935e:	dc1b      	bgt.n	d9398 <__aeabi_dmul+0x134>
   d9360:	f104 0414 	add.w	r4, r4, #20
   d9364:	f1c4 0520 	rsb	r5, r4, #32
   d9368:	fa00 f305 	lsl.w	r3, r0, r5
   d936c:	fa20 f004 	lsr.w	r0, r0, r4
   d9370:	fa01 f205 	lsl.w	r2, r1, r5
   d9374:	ea40 0002 	orr.w	r0, r0, r2
   d9378:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d937c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9384:	fa21 f604 	lsr.w	r6, r1, r4
   d9388:	eb42 0106 	adc.w	r1, r2, r6
   d938c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9390:	bf08      	it	eq
   d9392:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9396:	bd70      	pop	{r4, r5, r6, pc}
   d9398:	f1c4 040c 	rsb	r4, r4, #12
   d939c:	f1c4 0520 	rsb	r5, r4, #32
   d93a0:	fa00 f304 	lsl.w	r3, r0, r4
   d93a4:	fa20 f005 	lsr.w	r0, r0, r5
   d93a8:	fa01 f204 	lsl.w	r2, r1, r4
   d93ac:	ea40 0002 	orr.w	r0, r0, r2
   d93b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d93b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d93b8:	f141 0100 	adc.w	r1, r1, #0
   d93bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d93c0:	bf08      	it	eq
   d93c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d93c6:	bd70      	pop	{r4, r5, r6, pc}
   d93c8:	f1c4 0520 	rsb	r5, r4, #32
   d93cc:	fa00 f205 	lsl.w	r2, r0, r5
   d93d0:	ea4e 0e02 	orr.w	lr, lr, r2
   d93d4:	fa20 f304 	lsr.w	r3, r0, r4
   d93d8:	fa01 f205 	lsl.w	r2, r1, r5
   d93dc:	ea43 0302 	orr.w	r3, r3, r2
   d93e0:	fa21 f004 	lsr.w	r0, r1, r4
   d93e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d93e8:	fa21 f204 	lsr.w	r2, r1, r4
   d93ec:	ea20 0002 	bic.w	r0, r0, r2
   d93f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d93f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d93f8:	bf08      	it	eq
   d93fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d93fe:	bd70      	pop	{r4, r5, r6, pc}
   d9400:	f094 0f00 	teq	r4, #0
   d9404:	d10f      	bne.n	d9426 <__aeabi_dmul+0x1c2>
   d9406:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d940a:	0040      	lsls	r0, r0, #1
   d940c:	eb41 0101 	adc.w	r1, r1, r1
   d9410:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9414:	bf08      	it	eq
   d9416:	3c01      	subeq	r4, #1
   d9418:	d0f7      	beq.n	d940a <__aeabi_dmul+0x1a6>
   d941a:	ea41 0106 	orr.w	r1, r1, r6
   d941e:	f095 0f00 	teq	r5, #0
   d9422:	bf18      	it	ne
   d9424:	4770      	bxne	lr
   d9426:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d942a:	0052      	lsls	r2, r2, #1
   d942c:	eb43 0303 	adc.w	r3, r3, r3
   d9430:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9434:	bf08      	it	eq
   d9436:	3d01      	subeq	r5, #1
   d9438:	d0f7      	beq.n	d942a <__aeabi_dmul+0x1c6>
   d943a:	ea43 0306 	orr.w	r3, r3, r6
   d943e:	4770      	bx	lr
   d9440:	ea94 0f0c 	teq	r4, ip
   d9444:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9448:	bf18      	it	ne
   d944a:	ea95 0f0c 	teqne	r5, ip
   d944e:	d00c      	beq.n	d946a <__aeabi_dmul+0x206>
   d9450:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9454:	bf18      	it	ne
   d9456:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d945a:	d1d1      	bne.n	d9400 <__aeabi_dmul+0x19c>
   d945c:	ea81 0103 	eor.w	r1, r1, r3
   d9460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9464:	f04f 0000 	mov.w	r0, #0
   d9468:	bd70      	pop	{r4, r5, r6, pc}
   d946a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d946e:	bf06      	itte	eq
   d9470:	4610      	moveq	r0, r2
   d9472:	4619      	moveq	r1, r3
   d9474:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9478:	d019      	beq.n	d94ae <__aeabi_dmul+0x24a>
   d947a:	ea94 0f0c 	teq	r4, ip
   d947e:	d102      	bne.n	d9486 <__aeabi_dmul+0x222>
   d9480:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9484:	d113      	bne.n	d94ae <__aeabi_dmul+0x24a>
   d9486:	ea95 0f0c 	teq	r5, ip
   d948a:	d105      	bne.n	d9498 <__aeabi_dmul+0x234>
   d948c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9490:	bf1c      	itt	ne
   d9492:	4610      	movne	r0, r2
   d9494:	4619      	movne	r1, r3
   d9496:	d10a      	bne.n	d94ae <__aeabi_dmul+0x24a>
   d9498:	ea81 0103 	eor.w	r1, r1, r3
   d949c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d94a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d94a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d94a8:	f04f 0000 	mov.w	r0, #0
   d94ac:	bd70      	pop	{r4, r5, r6, pc}
   d94ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d94b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d94b6:	bd70      	pop	{r4, r5, r6, pc}

000d94b8 <__aeabi_ddiv>:
   d94b8:	b570      	push	{r4, r5, r6, lr}
   d94ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d94be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d94c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d94c6:	bf1d      	ittte	ne
   d94c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d94cc:	ea94 0f0c 	teqne	r4, ip
   d94d0:	ea95 0f0c 	teqne	r5, ip
   d94d4:	f000 f8a7 	bleq	d9626 <__aeabi_ddiv+0x16e>
   d94d8:	eba4 0405 	sub.w	r4, r4, r5
   d94dc:	ea81 0e03 	eor.w	lr, r1, r3
   d94e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d94e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d94e8:	f000 8088 	beq.w	d95fc <__aeabi_ddiv+0x144>
   d94ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d94f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d94f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d94f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d94fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9500:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9504:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9508:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d950c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9510:	429d      	cmp	r5, r3
   d9512:	bf08      	it	eq
   d9514:	4296      	cmpeq	r6, r2
   d9516:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d951a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d951e:	d202      	bcs.n	d9526 <__aeabi_ddiv+0x6e>
   d9520:	085b      	lsrs	r3, r3, #1
   d9522:	ea4f 0232 	mov.w	r2, r2, rrx
   d9526:	1ab6      	subs	r6, r6, r2
   d9528:	eb65 0503 	sbc.w	r5, r5, r3
   d952c:	085b      	lsrs	r3, r3, #1
   d952e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9532:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9536:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d953a:	ebb6 0e02 	subs.w	lr, r6, r2
   d953e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9542:	bf22      	ittt	cs
   d9544:	1ab6      	subcs	r6, r6, r2
   d9546:	4675      	movcs	r5, lr
   d9548:	ea40 000c 	orrcs.w	r0, r0, ip
   d954c:	085b      	lsrs	r3, r3, #1
   d954e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9552:	ebb6 0e02 	subs.w	lr, r6, r2
   d9556:	eb75 0e03 	sbcs.w	lr, r5, r3
   d955a:	bf22      	ittt	cs
   d955c:	1ab6      	subcs	r6, r6, r2
   d955e:	4675      	movcs	r5, lr
   d9560:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9564:	085b      	lsrs	r3, r3, #1
   d9566:	ea4f 0232 	mov.w	r2, r2, rrx
   d956a:	ebb6 0e02 	subs.w	lr, r6, r2
   d956e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9572:	bf22      	ittt	cs
   d9574:	1ab6      	subcs	r6, r6, r2
   d9576:	4675      	movcs	r5, lr
   d9578:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d957c:	085b      	lsrs	r3, r3, #1
   d957e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9582:	ebb6 0e02 	subs.w	lr, r6, r2
   d9586:	eb75 0e03 	sbcs.w	lr, r5, r3
   d958a:	bf22      	ittt	cs
   d958c:	1ab6      	subcs	r6, r6, r2
   d958e:	4675      	movcs	r5, lr
   d9590:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9594:	ea55 0e06 	orrs.w	lr, r5, r6
   d9598:	d018      	beq.n	d95cc <__aeabi_ddiv+0x114>
   d959a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d959e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d95a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d95a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d95aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d95ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d95b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d95b6:	d1c0      	bne.n	d953a <__aeabi_ddiv+0x82>
   d95b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d95bc:	d10b      	bne.n	d95d6 <__aeabi_ddiv+0x11e>
   d95be:	ea41 0100 	orr.w	r1, r1, r0
   d95c2:	f04f 0000 	mov.w	r0, #0
   d95c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d95ca:	e7b6      	b.n	d953a <__aeabi_ddiv+0x82>
   d95cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d95d0:	bf04      	itt	eq
   d95d2:	4301      	orreq	r1, r0
   d95d4:	2000      	moveq	r0, #0
   d95d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d95da:	bf88      	it	hi
   d95dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d95e0:	f63f aeaf 	bhi.w	d9342 <__aeabi_dmul+0xde>
   d95e4:	ebb5 0c03 	subs.w	ip, r5, r3
   d95e8:	bf04      	itt	eq
   d95ea:	ebb6 0c02 	subseq.w	ip, r6, r2
   d95ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d95f2:	f150 0000 	adcs.w	r0, r0, #0
   d95f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d95fa:	bd70      	pop	{r4, r5, r6, pc}
   d95fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9600:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9604:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9608:	bfc2      	ittt	gt
   d960a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d960e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9612:	bd70      	popgt	{r4, r5, r6, pc}
   d9614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9618:	f04f 0e00 	mov.w	lr, #0
   d961c:	3c01      	subs	r4, #1
   d961e:	e690      	b.n	d9342 <__aeabi_dmul+0xde>
   d9620:	ea45 0e06 	orr.w	lr, r5, r6
   d9624:	e68d      	b.n	d9342 <__aeabi_dmul+0xde>
   d9626:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d962a:	ea94 0f0c 	teq	r4, ip
   d962e:	bf08      	it	eq
   d9630:	ea95 0f0c 	teqeq	r5, ip
   d9634:	f43f af3b 	beq.w	d94ae <__aeabi_dmul+0x24a>
   d9638:	ea94 0f0c 	teq	r4, ip
   d963c:	d10a      	bne.n	d9654 <__aeabi_ddiv+0x19c>
   d963e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9642:	f47f af34 	bne.w	d94ae <__aeabi_dmul+0x24a>
   d9646:	ea95 0f0c 	teq	r5, ip
   d964a:	f47f af25 	bne.w	d9498 <__aeabi_dmul+0x234>
   d964e:	4610      	mov	r0, r2
   d9650:	4619      	mov	r1, r3
   d9652:	e72c      	b.n	d94ae <__aeabi_dmul+0x24a>
   d9654:	ea95 0f0c 	teq	r5, ip
   d9658:	d106      	bne.n	d9668 <__aeabi_ddiv+0x1b0>
   d965a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d965e:	f43f aefd 	beq.w	d945c <__aeabi_dmul+0x1f8>
   d9662:	4610      	mov	r0, r2
   d9664:	4619      	mov	r1, r3
   d9666:	e722      	b.n	d94ae <__aeabi_dmul+0x24a>
   d9668:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d966c:	bf18      	it	ne
   d966e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9672:	f47f aec5 	bne.w	d9400 <__aeabi_dmul+0x19c>
   d9676:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d967a:	f47f af0d 	bne.w	d9498 <__aeabi_dmul+0x234>
   d967e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9682:	f47f aeeb 	bne.w	d945c <__aeabi_dmul+0x1f8>
   d9686:	e712      	b.n	d94ae <__aeabi_dmul+0x24a>

000d9688 <__gedf2>:
   d9688:	f04f 3cff 	mov.w	ip, #4294967295
   d968c:	e006      	b.n	d969c <__cmpdf2+0x4>
   d968e:	bf00      	nop

000d9690 <__ledf2>:
   d9690:	f04f 0c01 	mov.w	ip, #1
   d9694:	e002      	b.n	d969c <__cmpdf2+0x4>
   d9696:	bf00      	nop

000d9698 <__cmpdf2>:
   d9698:	f04f 0c01 	mov.w	ip, #1
   d969c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d96a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d96a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d96a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d96ac:	bf18      	it	ne
   d96ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d96b2:	d01b      	beq.n	d96ec <__cmpdf2+0x54>
   d96b4:	b001      	add	sp, #4
   d96b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d96ba:	bf0c      	ite	eq
   d96bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d96c0:	ea91 0f03 	teqne	r1, r3
   d96c4:	bf02      	ittt	eq
   d96c6:	ea90 0f02 	teqeq	r0, r2
   d96ca:	2000      	moveq	r0, #0
   d96cc:	4770      	bxeq	lr
   d96ce:	f110 0f00 	cmn.w	r0, #0
   d96d2:	ea91 0f03 	teq	r1, r3
   d96d6:	bf58      	it	pl
   d96d8:	4299      	cmppl	r1, r3
   d96da:	bf08      	it	eq
   d96dc:	4290      	cmpeq	r0, r2
   d96de:	bf2c      	ite	cs
   d96e0:	17d8      	asrcs	r0, r3, #31
   d96e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d96e6:	f040 0001 	orr.w	r0, r0, #1
   d96ea:	4770      	bx	lr
   d96ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d96f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d96f4:	d102      	bne.n	d96fc <__cmpdf2+0x64>
   d96f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d96fa:	d107      	bne.n	d970c <__cmpdf2+0x74>
   d96fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9700:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9704:	d1d6      	bne.n	d96b4 <__cmpdf2+0x1c>
   d9706:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d970a:	d0d3      	beq.n	d96b4 <__cmpdf2+0x1c>
   d970c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9710:	4770      	bx	lr
   d9712:	bf00      	nop

000d9714 <__aeabi_cdrcmple>:
   d9714:	4684      	mov	ip, r0
   d9716:	4610      	mov	r0, r2
   d9718:	4662      	mov	r2, ip
   d971a:	468c      	mov	ip, r1
   d971c:	4619      	mov	r1, r3
   d971e:	4663      	mov	r3, ip
   d9720:	e000      	b.n	d9724 <__aeabi_cdcmpeq>
   d9722:	bf00      	nop

000d9724 <__aeabi_cdcmpeq>:
   d9724:	b501      	push	{r0, lr}
   d9726:	f7ff ffb7 	bl	d9698 <__cmpdf2>
   d972a:	2800      	cmp	r0, #0
   d972c:	bf48      	it	mi
   d972e:	f110 0f00 	cmnmi.w	r0, #0
   d9732:	bd01      	pop	{r0, pc}

000d9734 <__aeabi_dcmpeq>:
   d9734:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9738:	f7ff fff4 	bl	d9724 <__aeabi_cdcmpeq>
   d973c:	bf0c      	ite	eq
   d973e:	2001      	moveq	r0, #1
   d9740:	2000      	movne	r0, #0
   d9742:	f85d fb08 	ldr.w	pc, [sp], #8
   d9746:	bf00      	nop

000d9748 <__aeabi_dcmplt>:
   d9748:	f84d ed08 	str.w	lr, [sp, #-8]!
   d974c:	f7ff ffea 	bl	d9724 <__aeabi_cdcmpeq>
   d9750:	bf34      	ite	cc
   d9752:	2001      	movcc	r0, #1
   d9754:	2000      	movcs	r0, #0
   d9756:	f85d fb08 	ldr.w	pc, [sp], #8
   d975a:	bf00      	nop

000d975c <__aeabi_dcmple>:
   d975c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9760:	f7ff ffe0 	bl	d9724 <__aeabi_cdcmpeq>
   d9764:	bf94      	ite	ls
   d9766:	2001      	movls	r0, #1
   d9768:	2000      	movhi	r0, #0
   d976a:	f85d fb08 	ldr.w	pc, [sp], #8
   d976e:	bf00      	nop

000d9770 <__aeabi_dcmpge>:
   d9770:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9774:	f7ff ffce 	bl	d9714 <__aeabi_cdrcmple>
   d9778:	bf94      	ite	ls
   d977a:	2001      	movls	r0, #1
   d977c:	2000      	movhi	r0, #0
   d977e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9782:	bf00      	nop

000d9784 <__aeabi_dcmpgt>:
   d9784:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9788:	f7ff ffc4 	bl	d9714 <__aeabi_cdrcmple>
   d978c:	bf34      	ite	cc
   d978e:	2001      	movcc	r0, #1
   d9790:	2000      	movcs	r0, #0
   d9792:	f85d fb08 	ldr.w	pc, [sp], #8
   d9796:	bf00      	nop

000d9798 <__aeabi_dcmpun>:
   d9798:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d979c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d97a0:	d102      	bne.n	d97a8 <__aeabi_dcmpun+0x10>
   d97a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d97a6:	d10a      	bne.n	d97be <__aeabi_dcmpun+0x26>
   d97a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d97ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d97b0:	d102      	bne.n	d97b8 <__aeabi_dcmpun+0x20>
   d97b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d97b6:	d102      	bne.n	d97be <__aeabi_dcmpun+0x26>
   d97b8:	f04f 0000 	mov.w	r0, #0
   d97bc:	4770      	bx	lr
   d97be:	f04f 0001 	mov.w	r0, #1
   d97c2:	4770      	bx	lr

000d97c4 <__aeabi_d2iz>:
   d97c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d97c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d97cc:	d215      	bcs.n	d97fa <__aeabi_d2iz+0x36>
   d97ce:	d511      	bpl.n	d97f4 <__aeabi_d2iz+0x30>
   d97d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d97d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d97d8:	d912      	bls.n	d9800 <__aeabi_d2iz+0x3c>
   d97da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d97de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d97e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d97e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d97ea:	fa23 f002 	lsr.w	r0, r3, r2
   d97ee:	bf18      	it	ne
   d97f0:	4240      	negne	r0, r0
   d97f2:	4770      	bx	lr
   d97f4:	f04f 0000 	mov.w	r0, #0
   d97f8:	4770      	bx	lr
   d97fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d97fe:	d105      	bne.n	d980c <__aeabi_d2iz+0x48>
   d9800:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9804:	bf08      	it	eq
   d9806:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d980a:	4770      	bx	lr
   d980c:	f04f 0000 	mov.w	r0, #0
   d9810:	4770      	bx	lr
   d9812:	bf00      	nop

000d9814 <__aeabi_d2uiz>:
   d9814:	004a      	lsls	r2, r1, #1
   d9816:	d211      	bcs.n	d983c <__aeabi_d2uiz+0x28>
   d9818:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d981c:	d211      	bcs.n	d9842 <__aeabi_d2uiz+0x2e>
   d981e:	d50d      	bpl.n	d983c <__aeabi_d2uiz+0x28>
   d9820:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9824:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9828:	d40e      	bmi.n	d9848 <__aeabi_d2uiz+0x34>
   d982a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d982e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9832:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9836:	fa23 f002 	lsr.w	r0, r3, r2
   d983a:	4770      	bx	lr
   d983c:	f04f 0000 	mov.w	r0, #0
   d9840:	4770      	bx	lr
   d9842:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9846:	d102      	bne.n	d984e <__aeabi_d2uiz+0x3a>
   d9848:	f04f 30ff 	mov.w	r0, #4294967295
   d984c:	4770      	bx	lr
   d984e:	f04f 0000 	mov.w	r0, #0
   d9852:	4770      	bx	lr

000d9854 <__aeabi_d2f>:
   d9854:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9858:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d985c:	bf24      	itt	cs
   d985e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9862:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9866:	d90d      	bls.n	d9884 <__aeabi_d2f+0x30>
   d9868:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d986c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9870:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9874:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9878:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d987c:	bf08      	it	eq
   d987e:	f020 0001 	biceq.w	r0, r0, #1
   d9882:	4770      	bx	lr
   d9884:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9888:	d121      	bne.n	d98ce <__aeabi_d2f+0x7a>
   d988a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d988e:	bfbc      	itt	lt
   d9890:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9894:	4770      	bxlt	lr
   d9896:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d989a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d989e:	f1c2 0218 	rsb	r2, r2, #24
   d98a2:	f1c2 0c20 	rsb	ip, r2, #32
   d98a6:	fa10 f30c 	lsls.w	r3, r0, ip
   d98aa:	fa20 f002 	lsr.w	r0, r0, r2
   d98ae:	bf18      	it	ne
   d98b0:	f040 0001 	orrne.w	r0, r0, #1
   d98b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d98b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d98bc:	fa03 fc0c 	lsl.w	ip, r3, ip
   d98c0:	ea40 000c 	orr.w	r0, r0, ip
   d98c4:	fa23 f302 	lsr.w	r3, r3, r2
   d98c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d98cc:	e7cc      	b.n	d9868 <__aeabi_d2f+0x14>
   d98ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d98d2:	d107      	bne.n	d98e4 <__aeabi_d2f+0x90>
   d98d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d98d8:	bf1e      	ittt	ne
   d98da:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d98de:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d98e2:	4770      	bxne	lr
   d98e4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d98e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d98ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d98f0:	4770      	bx	lr
   d98f2:	bf00      	nop

000d98f4 <atoi>:
   d98f4:	220a      	movs	r2, #10
   d98f6:	2100      	movs	r1, #0
   d98f8:	f000 b950 	b.w	d9b9c <strtol>

000d98fc <__cxa_atexit>:
   d98fc:	b510      	push	{r4, lr}
   d98fe:	4c05      	ldr	r4, [pc, #20]	; (d9914 <__cxa_atexit+0x18>)
   d9900:	4613      	mov	r3, r2
   d9902:	b12c      	cbz	r4, d9910 <__cxa_atexit+0x14>
   d9904:	460a      	mov	r2, r1
   d9906:	4601      	mov	r1, r0
   d9908:	2002      	movs	r0, #2
   d990a:	f3af 8000 	nop.w
   d990e:	bd10      	pop	{r4, pc}
   d9910:	4620      	mov	r0, r4
   d9912:	e7fc      	b.n	d990e <__cxa_atexit+0x12>
   d9914:	00000000 	.word	0x00000000

000d9918 <ldiv>:
   d9918:	2900      	cmp	r1, #0
   d991a:	b510      	push	{r4, lr}
   d991c:	fb91 f4f2 	sdiv	r4, r1, r2
   d9920:	fb02 1314 	mls	r3, r2, r4, r1
   d9924:	db06      	blt.n	d9934 <ldiv+0x1c>
   d9926:	2b00      	cmp	r3, #0
   d9928:	da01      	bge.n	d992e <ldiv+0x16>
   d992a:	3401      	adds	r4, #1
   d992c:	1a9b      	subs	r3, r3, r2
   d992e:	e9c0 4300 	strd	r4, r3, [r0]
   d9932:	bd10      	pop	{r4, pc}
   d9934:	2b00      	cmp	r3, #0
   d9936:	bfc4      	itt	gt
   d9938:	f104 34ff 	addgt.w	r4, r4, #4294967295
   d993c:	189b      	addgt	r3, r3, r2
   d993e:	e7f6      	b.n	d992e <ldiv+0x16>

000d9940 <memcmp>:
   d9940:	b530      	push	{r4, r5, lr}
   d9942:	3901      	subs	r1, #1
   d9944:	2400      	movs	r4, #0
   d9946:	42a2      	cmp	r2, r4
   d9948:	d101      	bne.n	d994e <memcmp+0xe>
   d994a:	2000      	movs	r0, #0
   d994c:	e005      	b.n	d995a <memcmp+0x1a>
   d994e:	5d03      	ldrb	r3, [r0, r4]
   d9950:	3401      	adds	r4, #1
   d9952:	5d0d      	ldrb	r5, [r1, r4]
   d9954:	42ab      	cmp	r3, r5
   d9956:	d0f6      	beq.n	d9946 <memcmp+0x6>
   d9958:	1b58      	subs	r0, r3, r5
   d995a:	bd30      	pop	{r4, r5, pc}

000d995c <memcpy>:
   d995c:	440a      	add	r2, r1
   d995e:	4291      	cmp	r1, r2
   d9960:	f100 33ff 	add.w	r3, r0, #4294967295
   d9964:	d100      	bne.n	d9968 <memcpy+0xc>
   d9966:	4770      	bx	lr
   d9968:	b510      	push	{r4, lr}
   d996a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d996e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9972:	4291      	cmp	r1, r2
   d9974:	d1f9      	bne.n	d996a <memcpy+0xe>
   d9976:	bd10      	pop	{r4, pc}

000d9978 <memmove>:
   d9978:	4288      	cmp	r0, r1
   d997a:	b510      	push	{r4, lr}
   d997c:	eb01 0402 	add.w	r4, r1, r2
   d9980:	d902      	bls.n	d9988 <memmove+0x10>
   d9982:	4284      	cmp	r4, r0
   d9984:	4623      	mov	r3, r4
   d9986:	d807      	bhi.n	d9998 <memmove+0x20>
   d9988:	1e43      	subs	r3, r0, #1
   d998a:	42a1      	cmp	r1, r4
   d998c:	d008      	beq.n	d99a0 <memmove+0x28>
   d998e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9992:	f803 2f01 	strb.w	r2, [r3, #1]!
   d9996:	e7f8      	b.n	d998a <memmove+0x12>
   d9998:	4402      	add	r2, r0
   d999a:	4601      	mov	r1, r0
   d999c:	428a      	cmp	r2, r1
   d999e:	d100      	bne.n	d99a2 <memmove+0x2a>
   d99a0:	bd10      	pop	{r4, pc}
   d99a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d99a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d99aa:	e7f7      	b.n	d999c <memmove+0x24>

000d99ac <memset>:
   d99ac:	4402      	add	r2, r0
   d99ae:	4603      	mov	r3, r0
   d99b0:	4293      	cmp	r3, r2
   d99b2:	d100      	bne.n	d99b6 <memset+0xa>
   d99b4:	4770      	bx	lr
   d99b6:	f803 1b01 	strb.w	r1, [r3], #1
   d99ba:	e7f9      	b.n	d99b0 <memset+0x4>

000d99bc <srand>:
   d99bc:	b538      	push	{r3, r4, r5, lr}
   d99be:	4b0d      	ldr	r3, [pc, #52]	; (d99f4 <srand+0x38>)
   d99c0:	681d      	ldr	r5, [r3, #0]
   d99c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d99c4:	4604      	mov	r4, r0
   d99c6:	b97b      	cbnz	r3, d99e8 <srand+0x2c>
   d99c8:	2018      	movs	r0, #24
   d99ca:	f7fc fa49 	bl	d5e60 <malloc>
   d99ce:	4a0a      	ldr	r2, [pc, #40]	; (d99f8 <srand+0x3c>)
   d99d0:	4b0a      	ldr	r3, [pc, #40]	; (d99fc <srand+0x40>)
   d99d2:	63a8      	str	r0, [r5, #56]	; 0x38
   d99d4:	e9c0 2300 	strd	r2, r3, [r0]
   d99d8:	4b09      	ldr	r3, [pc, #36]	; (d9a00 <srand+0x44>)
   d99da:	6083      	str	r3, [r0, #8]
   d99dc:	230b      	movs	r3, #11
   d99de:	8183      	strh	r3, [r0, #12]
   d99e0:	2201      	movs	r2, #1
   d99e2:	2300      	movs	r3, #0
   d99e4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d99e8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d99ea:	2200      	movs	r2, #0
   d99ec:	611c      	str	r4, [r3, #16]
   d99ee:	615a      	str	r2, [r3, #20]
   d99f0:	bd38      	pop	{r3, r4, r5, pc}
   d99f2:	bf00      	nop
   d99f4:	2003e048 	.word	0x2003e048
   d99f8:	abcd330e 	.word	0xabcd330e
   d99fc:	e66d1234 	.word	0xe66d1234
   d9a00:	0005deec 	.word	0x0005deec

000d9a04 <strcmp>:
   d9a04:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9a08:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9a0c:	2a01      	cmp	r2, #1
   d9a0e:	bf28      	it	cs
   d9a10:	429a      	cmpcs	r2, r3
   d9a12:	d0f7      	beq.n	d9a04 <strcmp>
   d9a14:	1ad0      	subs	r0, r2, r3
   d9a16:	4770      	bx	lr

000d9a18 <strcpy>:
   d9a18:	4603      	mov	r3, r0
   d9a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9a1e:	f803 2b01 	strb.w	r2, [r3], #1
   d9a22:	2a00      	cmp	r2, #0
   d9a24:	d1f9      	bne.n	d9a1a <strcpy+0x2>
   d9a26:	4770      	bx	lr

000d9a28 <strlen>:
   d9a28:	4603      	mov	r3, r0
   d9a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9a2e:	2a00      	cmp	r2, #0
   d9a30:	d1fb      	bne.n	d9a2a <strlen+0x2>
   d9a32:	1a18      	subs	r0, r3, r0
   d9a34:	3801      	subs	r0, #1
   d9a36:	4770      	bx	lr

000d9a38 <strncpy>:
   d9a38:	b510      	push	{r4, lr}
   d9a3a:	3901      	subs	r1, #1
   d9a3c:	4603      	mov	r3, r0
   d9a3e:	b132      	cbz	r2, d9a4e <strncpy+0x16>
   d9a40:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9a44:	f803 4b01 	strb.w	r4, [r3], #1
   d9a48:	3a01      	subs	r2, #1
   d9a4a:	2c00      	cmp	r4, #0
   d9a4c:	d1f7      	bne.n	d9a3e <strncpy+0x6>
   d9a4e:	441a      	add	r2, r3
   d9a50:	2100      	movs	r1, #0
   d9a52:	4293      	cmp	r3, r2
   d9a54:	d100      	bne.n	d9a58 <strncpy+0x20>
   d9a56:	bd10      	pop	{r4, pc}
   d9a58:	f803 1b01 	strb.w	r1, [r3], #1
   d9a5c:	e7f9      	b.n	d9a52 <strncpy+0x1a>

000d9a5e <strnlen>:
   d9a5e:	b510      	push	{r4, lr}
   d9a60:	4602      	mov	r2, r0
   d9a62:	4401      	add	r1, r0
   d9a64:	428a      	cmp	r2, r1
   d9a66:	4613      	mov	r3, r2
   d9a68:	d101      	bne.n	d9a6e <strnlen+0x10>
   d9a6a:	1a18      	subs	r0, r3, r0
   d9a6c:	bd10      	pop	{r4, pc}
   d9a6e:	781c      	ldrb	r4, [r3, #0]
   d9a70:	3201      	adds	r2, #1
   d9a72:	2c00      	cmp	r4, #0
   d9a74:	d1f6      	bne.n	d9a64 <strnlen+0x6>
   d9a76:	e7f8      	b.n	d9a6a <strnlen+0xc>

000d9a78 <strstr>:
   d9a78:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9a7a:	780c      	ldrb	r4, [r1, #0]
   d9a7c:	b164      	cbz	r4, d9a98 <strstr+0x20>
   d9a7e:	4603      	mov	r3, r0
   d9a80:	781a      	ldrb	r2, [r3, #0]
   d9a82:	4618      	mov	r0, r3
   d9a84:	1c5e      	adds	r6, r3, #1
   d9a86:	b90a      	cbnz	r2, d9a8c <strstr+0x14>
   d9a88:	4610      	mov	r0, r2
   d9a8a:	e005      	b.n	d9a98 <strstr+0x20>
   d9a8c:	4294      	cmp	r4, r2
   d9a8e:	d108      	bne.n	d9aa2 <strstr+0x2a>
   d9a90:	460d      	mov	r5, r1
   d9a92:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d9a96:	b902      	cbnz	r2, d9a9a <strstr+0x22>
   d9a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9a9a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   d9a9e:	4297      	cmp	r7, r2
   d9aa0:	d0f7      	beq.n	d9a92 <strstr+0x1a>
   d9aa2:	4633      	mov	r3, r6
   d9aa4:	e7ec      	b.n	d9a80 <strstr+0x8>
	...

000d9aa8 <_strtol_l.isra.0>:
   d9aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9aac:	4e3a      	ldr	r6, [pc, #232]	; (d9b98 <_strtol_l.isra.0+0xf0>)
   d9aae:	4686      	mov	lr, r0
   d9ab0:	468c      	mov	ip, r1
   d9ab2:	4660      	mov	r0, ip
   d9ab4:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9ab8:	5da5      	ldrb	r5, [r4, r6]
   d9aba:	f015 0508 	ands.w	r5, r5, #8
   d9abe:	d1f8      	bne.n	d9ab2 <_strtol_l.isra.0+0xa>
   d9ac0:	2c2d      	cmp	r4, #45	; 0x2d
   d9ac2:	d133      	bne.n	d9b2c <_strtol_l.isra.0+0x84>
   d9ac4:	f89c 4000 	ldrb.w	r4, [ip]
   d9ac8:	f04f 0801 	mov.w	r8, #1
   d9acc:	f100 0c02 	add.w	ip, r0, #2
   d9ad0:	2b00      	cmp	r3, #0
   d9ad2:	d05c      	beq.n	d9b8e <_strtol_l.isra.0+0xe6>
   d9ad4:	2b10      	cmp	r3, #16
   d9ad6:	d10c      	bne.n	d9af2 <_strtol_l.isra.0+0x4a>
   d9ad8:	2c30      	cmp	r4, #48	; 0x30
   d9ada:	d10a      	bne.n	d9af2 <_strtol_l.isra.0+0x4a>
   d9adc:	f89c 0000 	ldrb.w	r0, [ip]
   d9ae0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9ae4:	2858      	cmp	r0, #88	; 0x58
   d9ae6:	d14d      	bne.n	d9b84 <_strtol_l.isra.0+0xdc>
   d9ae8:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d9aec:	2310      	movs	r3, #16
   d9aee:	f10c 0c02 	add.w	ip, ip, #2
   d9af2:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d9af6:	3f01      	subs	r7, #1
   d9af8:	2600      	movs	r6, #0
   d9afa:	fbb7 f9f3 	udiv	r9, r7, r3
   d9afe:	4630      	mov	r0, r6
   d9b00:	fb03 7a19 	mls	sl, r3, r9, r7
   d9b04:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d9b08:	2d09      	cmp	r5, #9
   d9b0a:	d818      	bhi.n	d9b3e <_strtol_l.isra.0+0x96>
   d9b0c:	462c      	mov	r4, r5
   d9b0e:	42a3      	cmp	r3, r4
   d9b10:	dd24      	ble.n	d9b5c <_strtol_l.isra.0+0xb4>
   d9b12:	1c75      	adds	r5, r6, #1
   d9b14:	d007      	beq.n	d9b26 <_strtol_l.isra.0+0x7e>
   d9b16:	4581      	cmp	r9, r0
   d9b18:	d31d      	bcc.n	d9b56 <_strtol_l.isra.0+0xae>
   d9b1a:	d101      	bne.n	d9b20 <_strtol_l.isra.0+0x78>
   d9b1c:	45a2      	cmp	sl, r4
   d9b1e:	db1a      	blt.n	d9b56 <_strtol_l.isra.0+0xae>
   d9b20:	fb00 4003 	mla	r0, r0, r3, r4
   d9b24:	2601      	movs	r6, #1
   d9b26:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9b2a:	e7eb      	b.n	d9b04 <_strtol_l.isra.0+0x5c>
   d9b2c:	2c2b      	cmp	r4, #43	; 0x2b
   d9b2e:	bf08      	it	eq
   d9b30:	f89c 4000 	ldrbeq.w	r4, [ip]
   d9b34:	46a8      	mov	r8, r5
   d9b36:	bf08      	it	eq
   d9b38:	f100 0c02 	addeq.w	ip, r0, #2
   d9b3c:	e7c8      	b.n	d9ad0 <_strtol_l.isra.0+0x28>
   d9b3e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d9b42:	2d19      	cmp	r5, #25
   d9b44:	d801      	bhi.n	d9b4a <_strtol_l.isra.0+0xa2>
   d9b46:	3c37      	subs	r4, #55	; 0x37
   d9b48:	e7e1      	b.n	d9b0e <_strtol_l.isra.0+0x66>
   d9b4a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d9b4e:	2d19      	cmp	r5, #25
   d9b50:	d804      	bhi.n	d9b5c <_strtol_l.isra.0+0xb4>
   d9b52:	3c57      	subs	r4, #87	; 0x57
   d9b54:	e7db      	b.n	d9b0e <_strtol_l.isra.0+0x66>
   d9b56:	f04f 36ff 	mov.w	r6, #4294967295
   d9b5a:	e7e4      	b.n	d9b26 <_strtol_l.isra.0+0x7e>
   d9b5c:	1c73      	adds	r3, r6, #1
   d9b5e:	d106      	bne.n	d9b6e <_strtol_l.isra.0+0xc6>
   d9b60:	2322      	movs	r3, #34	; 0x22
   d9b62:	f8ce 3000 	str.w	r3, [lr]
   d9b66:	4638      	mov	r0, r7
   d9b68:	b942      	cbnz	r2, d9b7c <_strtol_l.isra.0+0xd4>
   d9b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9b6e:	f1b8 0f00 	cmp.w	r8, #0
   d9b72:	d000      	beq.n	d9b76 <_strtol_l.isra.0+0xce>
   d9b74:	4240      	negs	r0, r0
   d9b76:	2a00      	cmp	r2, #0
   d9b78:	d0f7      	beq.n	d9b6a <_strtol_l.isra.0+0xc2>
   d9b7a:	b10e      	cbz	r6, d9b80 <_strtol_l.isra.0+0xd8>
   d9b7c:	f10c 31ff 	add.w	r1, ip, #4294967295
   d9b80:	6011      	str	r1, [r2, #0]
   d9b82:	e7f2      	b.n	d9b6a <_strtol_l.isra.0+0xc2>
   d9b84:	2430      	movs	r4, #48	; 0x30
   d9b86:	2b00      	cmp	r3, #0
   d9b88:	d1b3      	bne.n	d9af2 <_strtol_l.isra.0+0x4a>
   d9b8a:	2308      	movs	r3, #8
   d9b8c:	e7b1      	b.n	d9af2 <_strtol_l.isra.0+0x4a>
   d9b8e:	2c30      	cmp	r4, #48	; 0x30
   d9b90:	d0a4      	beq.n	d9adc <_strtol_l.isra.0+0x34>
   d9b92:	230a      	movs	r3, #10
   d9b94:	e7ad      	b.n	d9af2 <_strtol_l.isra.0+0x4a>
   d9b96:	bf00      	nop
   d9b98:	000da4b2 	.word	0x000da4b2

000d9b9c <strtol>:
   d9b9c:	4613      	mov	r3, r2
   d9b9e:	460a      	mov	r2, r1
   d9ba0:	4601      	mov	r1, r0
   d9ba2:	4802      	ldr	r0, [pc, #8]	; (d9bac <strtol+0x10>)
   d9ba4:	6800      	ldr	r0, [r0, #0]
   d9ba6:	f7ff bf7f 	b.w	d9aa8 <_strtol_l.isra.0>
   d9baa:	bf00      	nop
   d9bac:	2003e048 	.word	0x2003e048

000d9bb0 <dynalib_user>:
   d9bb0:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   d9bc0:	00000000 63736964 656e6e6f 64657463     ....disconnected
   d9bd0:	65727400 68742e6b 6c637765 6d6f632e     .trek.thewcl.com
   d9be0:	7b002f00 69736422 003a2264 7622202c     ./.{"dsid":., "v
   d9bf0:	65756c61 2c003a22 69742220 7473656d     alue":., "timest
   d9c00:	22706d61 2c7d003a 64227b00 22617461     amp":.},.{"data"
   d9c10:	5d005b3a 4f50007d 53005453 75746174     :[.]}.POST.Statu
   d9c20:	00203a73 79646f42 4500203a 7265746e     s: .Body: .Enter
   d9c30:	74656e20 6b726f77 49535320 30282044      network SSID (0
   d9c40:	206f7420 70696b73 00203a29 6e450030      to skip): .0.En
   d9c50:	20726574 69766564 44206563 20444953     ter device DSID 
   d9c60:	74203028 6b73206f 3a297069 6e450020     (0 to skip): .En
   d9c70:	20726574 7774656e 206b726f 73736170     ter network pass
   d9c80:	64726f77 0a00203a 6572430a 746e6564     word: ...Credent
   d9c90:	736c6169 74657320 74697720 73732068     ials set with ss
   d9ca0:	203a6469 61700a00 6f777373 203a6472     id: ..password: 
   d9cb0:	000a0a00 64697364 746e6520 64657265     ....dsid entered
   d9cc0:	69736400 00203a64 65746e45 69742072     .dsid: .Enter ti
   d9cd0:	6220656d 65777465 64206e65 20617461     me between data 
   d9ce0:	6c6c6f63 69746365 28206e6f 3a29736d     collection (ms):
   d9cf0:	6e450020 20726574 656d6974 74656220      .Enter time bet
   d9d00:	6e656577 46695720 6f632069 63656e6e     ween WiFi connec
   d9d10:	6e6f6974 736d2820 00203a29 30344536     tion (ms): .6E40
   d9d20:	31303030 4135422d 33462d33 452d3339     0001-B5A3-F393-E
   d9d30:	2d394130 45303545 43443432 45394143     0A9-E50E24DCCA9E
   d9d40:	34453600 30303030 35422d32 462d3341     .6E400002-B5A3-F
   d9d50:	2d333933 39413045 3035452d 44343245     393-E0A9-E50E24D
   d9d60:	39414343 45360045 30303034 422d3330     CCA9E.6E400003-B
   d9d70:	2d334135 33393346 4130452d 35452d39     5A3-F393-E0A9-E5
   d9d80:	34324530 41434344 74004539 78720078     0E24DCCA9E.tx.rx
   d9d90:	63634100 00747065 6c707061 74616369     .Accept.applicat
   d9da0:	2f6e6f69 6e6f736a 6e6f4300 746e6574     ion/json.Content
   d9db0:	7079542d 70610065 6f742d69 006e656b     -Type.api-token.
   d9dc0:	2d495041 65666165 64632d65 2d363562     API-eafee-cdb56-
   d9dd0:	35343533 38332d64 00643766 3353494c     3545d-38f7d.LIS3
   d9de0:	00004844                                DH..

000d9de4 <_ZTV15Adafruit_LIS3DH>:
	...
   d9dec:	000d40b3 000d4bb1 000d4ded 000d529d     .@...K...M...R..
   d9dfc:	000d4df1 70747448 65696c43 093e746e     .M..HttpClient>.
   d9e0c:	6e6e6f43 69746365 7420676e 00203a6f     Connecting to: .
   d9e1c:	70747448 65696c43 093e746e 6e6e6f43     HttpClient>.Conn
   d9e2c:	69746365 7420676e 5049206f 2000203a     ecting to IP: . 
   d9e3c:	50545448 302e312f 48000a0d 43707474     HTTP/1.0...HttpC
   d9e4c:	6e65696c 53093e74 74726174 20666f20     lient>.Start of 
   d9e5c:	50545448 71655220 74736575 6c63002e     HTTP Request..cl
   d9e6c:	0065736f 6e6e6f43 69746365 48006e6f     ose.Connection.H
   d9e7c:	43707474 6e65696c 43093e74 656e6e6f     ttpClient>.Conne
   d9e8c:	6f697463 6166206e 64656c69 4f48002e     ction failed..HO
   d9e9c:	43005453 65746e6f 4c2d746e 74676e65     ST.Content-Lengt
   d9eac:	74480068 6c437074 746e6569 6e45093e     h.HttpClient>.En
   d9ebc:	666f2064 54544820 65522050 73657571     d of HTTP Reques
   d9ecc:	0d002e74 7474480a 696c4370 3e746e65     t....HttpClient>
   d9edc:	63655209 69766965 5420676e 74205043     .Receiving TCP t
   d9eec:	736e6172 69746361 6f206e6f 20002066     ransaction of . 
   d9efc:	65747962 48002e73 43707474 6e65696c     bytes..HttpClien
   d9f0c:	45093e74 726f7272 6552203a 6e6f7073     t>.Error: Respon
   d9f1c:	62206573 2079646f 6772616c 74207265     se body larger t
   d9f2c:	206e6168 66667562 002e7265 74480a0d     han buffer....Ht
   d9f3c:	6c437074 746e6569 6e45093e 666f2064     tpClient>.End of
   d9f4c:	50435420 61727420 6361736e 6e6f6974      TCP transaction
   d9f5c:	0a0d002e 70747448 65696c43 093e746e     ....HttpClient>.
   d9f6c:	6f727245 54203a72 6f656d69 77207475     Error: Timeout w
   d9f7c:	656c6968 61657220 676e6964 73657220     hile reading res
   d9f8c:	736e6f70 0d002e65 7474480a 696c4370     ponse....HttpCli
   d9f9c:	3e746e65 646e4509 20666f20 50545448     ent>.End of HTTP
   d9fac:	73655220 736e6f70 00282065 2e29736d      Response (.ms).
   d9fbc:	74744800 696c4370 3e746e65 61745309     .HttpClient>.Sta
   d9fcc:	20737574 65646f43 0d00203a 000a0d0a     tus Code: ......
   d9fdc:	70747448 65696c43 093e746e 6f727245     HttpClient>.Erro
   d9fec:	43203a72 74276e61 6e696620 54482064     r: Can't find HT
   d9ffc:	72205054 6f707365 2065736e 79646f62     TP response body
   da00c:	0000002e                                ....

000da010 <_ZTVN5spark13EthernetClassE>:
	...
   da018:	000d5f1f 000d5f15 000d5f0b 000d5f01     ._..._..._..._..
   da028:	000d5ef5 000d5ee9 000d89dd 000d89e5     .^...^..........
   da038:	000d5edd 000d5ed5 000d5ecb 000d5ec1     .^...^...^...^..
   da048:	000d8a15                                ....

000da04c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   da04c:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   da05c:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   da06c:	72756769 6f697461 7369206e 766e6920     iguration is inv
   da07c:	64696c61 6977002e 676e6972 656c622e     alid..wiring.ble
   da08c:	61745300 64207472 6f637369 69726576     .Start discoveri
   da09c:	7320676e 69767265 2e736563 65655000     ng services..Pee
   da0ac:	65642072 65636976 20736920 7373696d     r device is miss
   da0bc:	21676e69 69614600 2064656c 61206f74     ing!.Failed to a
   da0cc:	6e657070 65702064 43207265 72746e65     ppend peer Centr
   da0dc:	64206c61 63697665 43002e65 656e6e6f     al device..Conne
   da0ec:	64657463 20796220 746e6543 206c6172     cted by Central 
   da0fc:	69766564 002e6563 63736944 656e6e6f     device..Disconne
   da10c:	64657463 20796220 6f6d6572 64206574     cted by remote d
   da11c:	63697665 44002e65 696c7075 65746163     evice..Duplicate
   da12c:	68632064 63617261 69726574 63697473     d characteristic
   da13c:	6e616320 20746f6e 61206562 64656464      cannot be added
   da14c:	6146002e 64656c69 206f7420 65707061     ..Failed to appe
   da15c:	6c20646e 6c61636f 61686320 74636172     nd local charact
   da16c:	73697265 2e636974 00000000              eristic.....

000da178 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da180:	000d6625 000d6689 000d689b 000d66b3     %f...f...h...f..
   da190:	000d6629                                )f..

000da194 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da19c:	000d6621 000d6697 000d6623 000d66b7     !f...f..#f...f..
   da1ac:	000d6649                                If..

000da1b0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da1b8:	000d661f 000d66a5 000d70a1 000d66bb     .f...f...p...f..
   da1c8:	000d6669                                if..

000da1cc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   da1d4:	5f9b34fb 80000080 00001000 00000000     .4._............

000da1e4 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   da1e4:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000da1f4 <_ZN8particle7BleUuid9BASE_UUIDE>:
   da1f4:	5f9b34fb 80000080 00001000 00000000     .4._............
   da204:	006e616e 00666e69 0066766f 00707061     nan.inf.ovf.app.
   da214:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   da224:	007a2553 74637361 00656d69              S%z.asctime.

000da230 <_ZTV9IPAddress>:
	...
   da238:	000d7f53 000d7f43 000d7f45              S...C...E...

000da244 <_ZTV9USBSerial>:
	...
   da24c:	000d8061 000d80c9 000d809f 000d7a8d     a............z..
   da25c:	000d8091 000d8063 000d8073 000d80c3     ....c...s.......
   da26c:	000d8083 000d805d                       ....]...

000da274 <_ZTV11USARTSerial>:
	...
   da27c:	000d816d 000d81d9 000d81b1 000d7a8d     m............z..
   da28c:	000d8181 000d819d 000d818f 000d81ab     ................
   da29c:	000d816f 000d8173                       o...s...

000da2a4 <_ZTV7TwoWire>:
	...
   da2ac:	000d8269 000d82b3 000d828b 000d826b     i...........k...
   da2bc:	000d8293 000d829b 000d82a3 000d82ab     ................
   da2cc:	76636572 72726520 3d20726f 00642520     recv error = %d.

000da2dc <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da2e4:	000d83ef 000d8411 000d882b 000d841f     ........+.......
   da2f4:	000d83f1                                ....

000da2f8 <_ZTV9TCPClient>:
	...
   da300:	000d849d 000d84d1 000d836d 000d8387     ........m.......
   da310:	000d86c1 000d8533 000d8505 000d83b1     ....3...........
   da320:	000d85cb 000d8831 000d8567 000d8775     ....1...g...u...
   da330:	000d83b3 000d83e5 000d8399 000d8423     ............#...
   da340:	000d84e5                                ....

000da344 <_ZTVN5spark9WiFiClassE>:
	...
   da34c:	000d897f 000d8975 000d896b 000d892d     ....u...k...-...
   da35c:	000d7d25 000d895f 000d89dd 000d89e5     %}.._...........
   da36c:	000d8953 000d894b 000d8941 000d8937     S...K...A...7...
   da37c:	000d8a15                                ....

000da380 <_ZTVN5spark12NetworkClassE>:
	...
   da388:	000d899d 000d89a7 000d89b1 000d89bb     ................
   da398:	000d89c5 000d89d1 000d89dd 000d89e5     ................
   da3a8:	000d89ed 000d89f9 000d8a01 000d8a0b     ................
   da3b8:	000d8a15                                ....

000da3bc <_ZSt7nothrow>:
	...

000da3bd <_ZTSSt19_Sp_make_shared_tag>:
   da3bd:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   da3cd:	5f646572 00676174                        red_tag....

000da3d8 <_ZTISt19_Sp_make_shared_tag>:
   da3d8:	000da418 000da3bd                       ........

000da3e0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   da3e0:	000da478 000da3ec 000da49c              x...........

000da3ec <_ZTSN10__cxxabiv117__class_type_infoE>:
   da3ec:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   da3fc:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   da40c:	00000045                                E...

000da410 <_ZTVN10__cxxabiv117__class_type_infoE>:
   da410:	00000000 000da3e0 000d8d15 000d8d29     ............)...
   da420:	000d8ebd 000d8ebd 000d8d93 000d8cd5     ................
   da430:	000d8d7b 000d8d3d 000d8d09              {...=.......

000da43c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   da43c:	000da478 000da448 000da3e0              x...H.......

000da448 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   da448:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   da458:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   da468:	456f666e 00000000                       nfoE....

000da470 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   da470:	00000000 000da43c 000d8dbd 000d8dd1     ....<...........
   da480:	000d8ebd 000d8ebd 000d8d93 000d8cd5     ................
   da490:	000d8e91 000d8e1d 000d8de5              ............

000da49c <_ZTISt9type_info>:
   da49c:	000da418 000da4a4                       ........

000da4a4 <_ZTSSt9type_info>:
   da4a4:	74397453 5f657079 6f666e69               St9type_info.

000da4b1 <_ctype_>:
   da4b1:	20202000 20202020 28282020 20282828     .         ((((( 
   da4c1:	20202020 20202020 20202020 20202020                     
   da4d1:	10108820 10101010 10101010 10101010      ...............
   da4e1:	04040410 04040404 10040404 10101010     ................
   da4f1:	41411010 41414141 01010101 01010101     ..AAAAAA........
   da501:	01010101 01010101 01010101 10101010     ................
   da511:	42421010 42424242 02020202 02020202     ..BBBBBB........
   da521:	02020202 02020202 02020202 10101010     ................
   da531:	00000020 00000000 00000000 00000000      ...............
	...

000da5b2 <link_const_variable_data_end>:
	...

000da5b4 <link_constructors_location>:
   da5b4:	000d4bc1 	.word	0x000d4bc1
   da5b8:	000d5f29 	.word	0x000d5f29
   da5bc:	000d619d 	.word	0x000d619d
   da5c0:	000d7a65 	.word	0x000d7a65
   da5c4:	000d7d31 	.word	0x000d7d31
   da5c8:	000d7db5 	.word	0x000d7db5
   da5cc:	000d7ddd 	.word	0x000d7ddd
   da5d0:	000d8989 	.word	0x000d8989
   da5d4:	000d8af5 	.word	0x000d8af5

000da5d8 <link_constructors_end>:
	...
