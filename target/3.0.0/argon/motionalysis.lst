
e:/IoT/motionalysis/target/3.0.0/argon/motionalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001944  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5960  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e5a0  000d5964  0001e5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001e8  2003e608  2003e608  0002e608  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d59cc  000d59cc  000259cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d59f4  000d59f4  000259f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00164e8b  00000000  00000000  000259f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00014d1e  00000000  00000000  0018a883  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002ebe3  00000000  00000000  0019f5a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002650  00000000  00000000  001ce184  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000083d0  00000000  00000000  001d07d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037b59  00000000  00000000  001d8ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00036975  00000000  00000000  002106fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001249cd  00000000  00000000  00247072  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000068ac  00000000  00000000  0036ba40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fb45 	bl	d56bc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fb4d 	bl	d56d8 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e5a0 	.word	0x2003e5a0
   d4048:	000d5964 	.word	0x000d5964
   d404c:	2003e608 	.word	0x2003e608
   d4050:	2003e608 	.word	0x2003e608
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 ff3f 	bl	d4ee0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5930 	.word	0x000d5930
   d407c:	000d5954 	.word	0x000d5954

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b832 	b.w	d40e8 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f843 	bl	d4110 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bee9 	b.w	d4e64 <_post_loop>

000d4092 <_Znaj>:
   d4092:	f000 bd0b 	b.w	d4aac <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 bd11 	b.w	d4abc <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr

000d40aa <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   d40aa:	4770      	bx	lr

000d40ac <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ac:	b510      	push	{r4, lr}
   d40ae:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40b0:	6800      	ldr	r0, [r0, #0]
   d40b2:	b108      	cbz	r0, d40b8 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b4:	f000 fd02 	bl	d4abc <free>
class SystemClass {
   d40b8:	4620      	mov	r0, r4
   d40ba:	bd10      	pop	{r4, pc}

000d40bc <_ZN5Print5printIsLi0EEEjT_i.part.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d40bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d40be:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d40c0:	4607      	mov	r7, r0
   d40c2:	4616      	mov	r6, r2
        if (n < 0 && base == 10) {
   d40c4:	da0c      	bge.n	d40e0 <_ZN5Print5printIsLi0EEEjT_i.part.0+0x24>
   d40c6:	2a0a      	cmp	r2, #10
   d40c8:	d10a      	bne.n	d40e0 <_ZN5Print5printIsLi0EEEjT_i.part.0+0x24>
            t = print('-');
   d40ca:	212d      	movs	r1, #45	; 0x2d
   d40cc:	f000 fe4a 	bl	d4d64 <_ZN5Print5printEc>
            val = -n;
   d40d0:	4261      	negs	r1, r4
            t = print('-');
   d40d2:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d40d4:	b2f2      	uxtb	r2, r6
   d40d6:	4638      	mov	r0, r7
   d40d8:	f000 fe53 	bl	d4d82 <_ZN5Print11printNumberEmh>
    }
}
   d40dc:	4428      	add	r0, r5
   d40de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            val = n;
   d40e0:	4621      	mov	r1, r4
        size_t t = 0;
   d40e2:	2500      	movs	r5, #0
   d40e4:	e7f6      	b.n	d40d4 <_ZN5Print5printIsLi0EEEjT_i.part.0+0x18>
	...

000d40e8 <setup>:
#include "Adafruit_LIS3DH.h"


Adafruit_LIS3DH lis = Adafruit_LIS3DH();

void setup() {
   d40e8:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d40ea:	f000 ffff 	bl	d50ec <_Z16_fetch_usbserialv>
   d40ee:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40f2:	f000 ffef 	bl	d50d4 <_ZN9USBSerial5beginEl>
  Wire.begin();
   d40f6:	f001 faa1 	bl	d563c <_Z19__fetch_global_Wirev>
   d40fa:	f001 f8dd 	bl	d52b8 <_ZN7TwoWire5beginEv>
  lis.begin(0x18);
}
   d40fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  lis.begin(0x18);
   d4102:	4802      	ldr	r0, [pc, #8]	; (d410c <setup+0x24>)
   d4104:	2118      	movs	r1, #24
   d4106:	f000 b99b 	b.w	d4440 <_ZN15Adafruit_LIS3DH5beginEh>
   d410a:	bf00      	nop
   d410c:	2003e618 	.word	0x2003e618

000d4110 <loop>:

void loop() {
   d4110:	b510      	push	{r4, lr}
  lis.read();
   d4112:	4c18      	ldr	r4, [pc, #96]	; (d4174 <loop+0x64>)
   d4114:	4620      	mov	r0, r4
   d4116:	f000 f9e5 	bl	d44e4 <_ZN15Adafruit_LIS3DH4readEv>
  Serial.print("X:  "); Serial.print(lis.x);
   d411a:	f000 ffe7 	bl	d50ec <_Z16_fetch_usbserialv>
   d411e:	4916      	ldr	r1, [pc, #88]	; (d4178 <loop+0x68>)
   d4120:	f000 fe1c 	bl	d4d5c <_ZN5Print5printEPKc>
   d4124:	f000 ffe2 	bl	d50ec <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   d4128:	220a      	movs	r2, #10
   d412a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   d412e:	f7ff ffc5 	bl	d40bc <_ZN5Print5printIsLi0EEEjT_i.part.0>
  Serial.print("  \tY:  "); Serial.print(lis.y);
   d4132:	f000 ffdb 	bl	d50ec <_Z16_fetch_usbserialv>
   d4136:	4911      	ldr	r1, [pc, #68]	; (d417c <loop+0x6c>)
   d4138:	f000 fe10 	bl	d4d5c <_ZN5Print5printEPKc>
   d413c:	f000 ffd6 	bl	d50ec <_Z16_fetch_usbserialv>
   d4140:	220a      	movs	r2, #10
   d4142:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d4146:	f7ff ffb9 	bl	d40bc <_ZN5Print5printIsLi0EEEjT_i.part.0>
  Serial.print("  \tZ:  "); Serial.print(lis.z);
   d414a:	f000 ffcf 	bl	d50ec <_Z16_fetch_usbserialv>
   d414e:	490c      	ldr	r1, [pc, #48]	; (d4180 <loop+0x70>)
   d4150:	f000 fe04 	bl	d4d5c <_ZN5Print5printEPKc>
   d4154:	f000 ffca 	bl	d50ec <_Z16_fetch_usbserialv>
   d4158:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   d415c:	220a      	movs	r2, #10
   d415e:	f7ff ffad 	bl	d40bc <_ZN5Print5printIsLi0EEEjT_i.part.0>
  Serial.println();
   d4162:	f000 ffc3 	bl	d50ec <_Z16_fetch_usbserialv>
   d4166:	f000 fe00 	bl	d4d6a <_ZN5Print7printlnEv>
  delay(200);
}
   d416a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(200);
   d416e:	20c8      	movs	r0, #200	; 0xc8
   d4170:	f000 be3e 	b.w	d4df0 <delay>
   d4174:	2003e618 	.word	0x2003e618
   d4178:	000d577c 	.word	0x000d577c
   d417c:	000d5781 	.word	0x000d5781
   d4180:	000d5789 	.word	0x000d5789

000d4184 <_ZN15Adafruit_LIS3DHD0Ev>:
   d4184:	b510      	push	{r4, lr}
   d4186:	212c      	movs	r1, #44	; 0x2c
   d4188:	4604      	mov	r4, r0
   d418a:	f001 fa84 	bl	d5696 <_ZdlPvj>
   d418e:	4620      	mov	r0, r4
   d4190:	bd10      	pop	{r4, pc}
	...

000d4194 <_GLOBAL__sub_I_SystemMode>:
}
   d4194:	b510      	push	{r4, lr}
              error_(SYSTEM_ERROR_NONE) {
   d4196:	4c0d      	ldr	r4, [pc, #52]	; (d41cc <_GLOBAL__sub_I_SystemMode+0x38>)
   d4198:	2300      	movs	r3, #0
   d419a:	6023      	str	r3, [r4, #0]
   d419c:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d419e:	71a3      	strb	r3, [r4, #6]
   d41a0:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   d41a4:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d41a6:	2003      	movs	r0, #3
   d41a8:	f000 fbf4 	bl	d4994 <set_system_mode>
SYSTEM_MODE(MANUAL);
   d41ac:	4620      	mov	r0, r4
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d41ae:	4c08      	ldr	r4, [pc, #32]	; (d41d0 <_GLOBAL__sub_I_SystemMode+0x3c>)
SYSTEM_MODE(MANUAL);
   d41b0:	4a08      	ldr	r2, [pc, #32]	; (d41d4 <_GLOBAL__sub_I_SystemMode+0x40>)
   d41b2:	4909      	ldr	r1, [pc, #36]	; (d41d8 <_GLOBAL__sub_I_SystemMode+0x44>)
   d41b4:	f001 fa6a 	bl	d568c <__aeabi_atexit>
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d41b8:	4620      	mov	r0, r4
   d41ba:	f000 f833 	bl	d4224 <_ZN15Adafruit_LIS3DHC1Ev>
   d41be:	4620      	mov	r0, r4
   d41c0:	4a04      	ldr	r2, [pc, #16]	; (d41d4 <_GLOBAL__sub_I_SystemMode+0x40>)
   d41c2:	4906      	ldr	r1, [pc, #24]	; (d41dc <_GLOBAL__sub_I_SystemMode+0x48>)
}
   d41c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d41c8:	f001 ba60 	b.w	d568c <__aeabi_atexit>
   d41cc:	2003e60c 	.word	0x2003e60c
   d41d0:	2003e618 	.word	0x2003e618
   d41d4:	2003e608 	.word	0x2003e608
   d41d8:	000d40ad 	.word	0x000d40ad
   d41dc:	000d40ab 	.word	0x000d40ab

000d41e0 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d41e0:	4770      	bx	lr
	...

000d41e4 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d41e4:	460b      	mov	r3, r1
   d41e6:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d41e8:	2228      	movs	r2, #40	; 0x28
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d41ea:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d41ec:	2100      	movs	r1, #0
   d41ee:	4618      	mov	r0, r3
   d41f0:	f001 fa72 	bl	d56d8 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d41f4:	4908      	ldr	r1, [pc, #32]	; (d4218 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
   d41f6:	220b      	movs	r2, #11
   d41f8:	f001 faa2 	bl	d5740 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d41fc:	2200      	movs	r2, #0
  sensor->version     = 1;
   d41fe:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d4200:	72c2      	strb	r2, [r0, #11]
  sensor->version     = 1;
   d4202:	60c1      	str	r1, [r0, #12]
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d4204:	4603      	mov	r3, r0
  sensor->sensor_id   = _sensorID;
   d4206:	69a0      	ldr	r0, [r4, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
   d4208:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   d420a:	e9c3 0104 	strd	r0, r1, [r3, #16]
  sensor->max_value   = 0;
   d420e:	2200      	movs	r2, #0
   d4210:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0;
   d4212:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0;
   d4214:	621a      	str	r2, [r3, #32]
}
   d4216:	bd10      	pop	{r4, pc}
   d4218:	000d5791 	.word	0x000d5791

000d421c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d421c:	6803      	ldr	r3, [r0, #0]
   d421e:	b2c9      	uxtb	r1, r1
   d4220:	689b      	ldr	r3, [r3, #8]
   d4222:	4718      	bx	r3

000d4224 <_ZN15Adafruit_LIS3DHC1Ev>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   d4224:	4a06      	ldr	r2, [pc, #24]	; (d4240 <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   d4226:	6002      	str	r2, [r0, #0]
   d4228:	f04f 32ff 	mov.w	r2, #4294967295
   d422c:	6182      	str	r2, [r0, #24]
   d422e:	7742      	strb	r2, [r0, #29]
   d4230:	83c2      	strh	r2, [r0, #30]
   d4232:	22ff      	movs	r2, #255	; 0xff
   d4234:	f880 2020 	strb.w	r2, [r0, #32]
   d4238:	2208      	movs	r2, #8
   d423a:	6242      	str	r2, [r0, #36]	; 0x24
}
   d423c:	4770      	bx	lr
   d423e:	bf00      	nop
   d4240:	000d57a0 	.word	0x000d57a0

000d4244 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4244:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4246:	4c0b      	ldr	r4, [pc, #44]	; (d4274 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4248:	7821      	ldrb	r1, [r4, #0]
   d424a:	f3bf 8f5b 	dmb	ish
   d424e:	f011 0101 	ands.w	r1, r1, #1
   d4252:	d10b      	bne.n	d426c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4254:	4620      	mov	r0, r4
   d4256:	9101      	str	r1, [sp, #4]
   d4258:	f7ff ff1f 	bl	d409a <__cxa_guard_acquire>
   d425c:	9901      	ldr	r1, [sp, #4]
   d425e:	b128      	cbz	r0, d426c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4260:	4805      	ldr	r0, [pc, #20]	; (d4278 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4262:	f000 fc7f 	bl	d4b64 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4266:	4620      	mov	r0, r4
   d4268:	f7ff ff1c 	bl	d40a4 <__cxa_guard_release>
        return instance;
    }
   d426c:	4802      	ldr	r0, [pc, #8]	; (d4278 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d426e:	b002      	add	sp, #8
   d4270:	bd10      	pop	{r4, pc}
   d4272:	bf00      	nop
   d4274:	2003e644 	.word	0x2003e644
   d4278:	2003e648 	.word	0x2003e648

000d427c <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d427c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
   d4280:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4284:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d4286:	4605      	mov	r5, r0
   d4288:	460f      	mov	r7, r1
  if (_sck == -1)
   d428a:	d106      	bne.n	d429a <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d428c:	f7ff ffda 	bl	d4244 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4290:	4639      	mov	r1, r7
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
   d4292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4296:	f000 bcef 	b.w	d4c78 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   d429a:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   d429c:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   d429e:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   d42a2:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d42a6:	2100      	movs	r1, #0
   d42a8:	b280      	uxth	r0, r0
   d42aa:	f001 f982 	bl	d55b2 <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   d42ae:	f995 001e 	ldrsb.w	r0, [r5, #30]
   d42b2:	fa08 f106 	lsl.w	r1, r8, r6
   d42b6:	4039      	ands	r1, r7
   d42b8:	b280      	uxth	r0, r0
   d42ba:	f001 f97a 	bl	d55b2 <digitalWrite>
    digitalWrite(_sck, HIGH);
   d42be:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d42c2:	2101      	movs	r1, #1
   d42c4:	b280      	uxth	r0, r0
   d42c6:	f001 f974 	bl	d55b2 <digitalWrite>
    if (digitalRead(_miso))
   d42ca:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
   d42ce:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   d42d0:	b280      	uxth	r0, r0
    reply <<= 1;
   d42d2:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   d42d4:	f001 f986 	bl	d55e4 <digitalRead>
   d42d8:	b108      	cbz	r0, d42de <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   d42da:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   d42de:	3e01      	subs	r6, #1
   d42e0:	d2df      	bcs.n	d42a2 <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
   d42e2:	4620      	mov	r0, r4
   d42e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d42e8 <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   d42e8:	b508      	push	{r3, lr}
        instance().setBitOrder(order);
   d42ea:	f7ff ffab 	bl	d4244 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d42ee:	2101      	movs	r1, #1
   d42f0:	f000 fc53 	bl	d4b9a <_ZN8SPIClass11setBitOrderEh>
        return instance().setClockSpeed(value, scale);
   d42f4:	f7ff ffa6 	bl	d4244 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d42f8:	4905      	ldr	r1, [pc, #20]	; (d4310 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   d42fa:	2201      	movs	r2, #1
   d42fc:	f000 fc8a 	bl	d4c14 <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
   d4300:	f7ff ffa0 	bl	d4244 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   d4304:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4308:	2100      	movs	r1, #0
   d430a:	f000 bc59 	b.w	d4bc0 <_ZN8SPIClass11setDataModeEh>
   d430e:	bf00      	nop
   d4310:	0007a120 	.word	0x0007a120

000d4314 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d4314:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   d4316:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d431a:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d431c:	4604      	mov	r4, r0
   d431e:	460e      	mov	r6, r1
   d4320:	4615      	mov	r5, r2
  if (_cs == -1) {
   d4322:	d116      	bne.n	d4352 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   d4324:	f001 f98a 	bl	d563c <_Z19__fetch_global_Wirev>
   d4328:	7f21      	ldrb	r1, [r4, #28]
   d432a:	f000 fff7 	bl	d531c <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d432e:	f001 f985 	bl	d563c <_Z19__fetch_global_Wirev>
   d4332:	6803      	ldr	r3, [r0, #0]
   d4334:	4631      	mov	r1, r6
   d4336:	689b      	ldr	r3, [r3, #8]
   d4338:	4798      	blx	r3
    Wire.write((uint8_t)value);
   d433a:	f001 f97f 	bl	d563c <_Z19__fetch_global_Wirev>
   d433e:	6803      	ldr	r3, [r0, #0]
   d4340:	4629      	mov	r1, r5
   d4342:	689b      	ldr	r3, [r3, #8]
   d4344:	4798      	blx	r3
    Wire.endTransmission();
   d4346:	f001 f979 	bl	d563c <_Z19__fetch_global_Wirev>
}
   d434a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   d434e:	f000 bff0 	b.w	d5332 <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
   d4352:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4356:	3301      	adds	r3, #1
   d4358:	d101      	bne.n	d435e <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   d435a:	f7ff ffc5 	bl	d42e8 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d435e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4362:	2100      	movs	r1, #0
   d4364:	b280      	uxth	r0, r0
   d4366:	f001 f924 	bl	d55b2 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   d436a:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d436e:	4620      	mov	r0, r4
   d4370:	f7ff ff84 	bl	d427c <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   d4374:	4629      	mov	r1, r5
   d4376:	4620      	mov	r0, r4
   d4378:	f7ff ff80 	bl	d427c <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   d437c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4380:	2101      	movs	r1, #1
}
   d4382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   d4386:	b280      	uxth	r0, r0
   d4388:	f001 b913 	b.w	d55b2 <digitalWrite>

000d438c <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d438c:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d438e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4392:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d4394:	4604      	mov	r4, r0
   d4396:	460d      	mov	r5, r1
  if (_cs == -1) {
   d4398:	d11d      	bne.n	d43d6 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   d439a:	f001 f94f 	bl	d563c <_Z19__fetch_global_Wirev>
   d439e:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d43a2:	f000 ffbf 	bl	d5324 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   d43a6:	f001 f949 	bl	d563c <_Z19__fetch_global_Wirev>
   d43aa:	6803      	ldr	r3, [r0, #0]
   d43ac:	4629      	mov	r1, r5
   d43ae:	689b      	ldr	r3, [r3, #8]
   d43b0:	4798      	blx	r3
    Wire.endTransmission();
   d43b2:	f001 f943 	bl	d563c <_Z19__fetch_global_Wirev>
   d43b6:	f000 ffbc 	bl	d5332 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
   d43ba:	f001 f93f 	bl	d563c <_Z19__fetch_global_Wirev>
   d43be:	7f21      	ldrb	r1, [r4, #28]
   d43c0:	2201      	movs	r2, #1
   d43c2:	f000 ffa8 	bl	d5316 <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   d43c6:	f001 f939 	bl	d563c <_Z19__fetch_global_Wirev>
   d43ca:	6803      	ldr	r3, [r0, #0]
   d43cc:	695b      	ldr	r3, [r3, #20]
   d43ce:	4798      	blx	r3
   d43d0:	b2c5      	uxtb	r5, r0
}
   d43d2:	4628      	mov	r0, r5
   d43d4:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
   d43d6:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d43da:	3301      	adds	r3, #1
   d43dc:	d101      	bne.n	d43e2 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   d43de:	f7ff ff83 	bl	d42e8 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
   d43e2:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d43e6:	2100      	movs	r1, #0
   d43e8:	b280      	uxth	r0, r0
   d43ea:	f001 f8e2 	bl	d55b2 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   d43ee:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d43f2:	4620      	mov	r0, r4
   d43f4:	f7ff ff42 	bl	d427c <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   d43f8:	2100      	movs	r1, #0
   d43fa:	4620      	mov	r0, r4
   d43fc:	f7ff ff3e 	bl	d427c <_ZN15Adafruit_LIS3DH7spixferEh>
   d4400:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   d4402:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4406:	2101      	movs	r1, #1
   d4408:	b280      	uxth	r0, r0
   d440a:	f001 f8d2 	bl	d55b2 <digitalWrite>
    if (_sck == -1)
   d440e:	e7e0      	b.n	d43d2 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

000d4410 <_ZN15Adafruit_LIS3DH8getRangeEv>:
{
   d4410:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   d4412:	2123      	movs	r1, #35	; 0x23
   d4414:	f7ff ffba 	bl	d438c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   d4418:	f3c0 1001 	ubfx	r0, r0, #4, #2
   d441c:	bd08      	pop	{r3, pc}

000d441e <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
   d441e:	b538      	push	{r3, r4, r5, lr}
   d4420:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d4422:	2120      	movs	r1, #32
{
   d4424:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d4426:	f7ff ffb1 	bl	d438c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
   d442a:	f000 020f 	and.w	r2, r0, #15
  ctl1 |= (dataRate << 4);
   d442e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d4432:	4620      	mov	r0, r4
   d4434:	b2d2      	uxtb	r2, r2
}
   d4436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d443a:	2120      	movs	r1, #32
   d443c:	f7ff bf6a 	b.w	d4314 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d4440 <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   d4440:	b510      	push	{r4, lr}
   d4442:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   d4444:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
   d4446:	f990 001d 	ldrsb.w	r0, [r0, #29]
   d444a:	1c42      	adds	r2, r0, #1
   d444c:	d123      	bne.n	d4496 <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
   d444e:	f001 f8f5 	bl	d563c <_Z19__fetch_global_Wirev>
   d4452:	f000 ff31 	bl	d52b8 <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   d4456:	210f      	movs	r1, #15
   d4458:	4620      	mov	r0, r4
   d445a:	f7ff ff97 	bl	d438c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   d445e:	2833      	cmp	r0, #51	; 0x33
   d4460:	d13d      	bne.n	d44de <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   d4462:	2207      	movs	r2, #7
   d4464:	2120      	movs	r1, #32
   d4466:	4620      	mov	r0, r4
   d4468:	f7ff ff54 	bl	d4314 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
   d446c:	2107      	movs	r1, #7
   d446e:	4620      	mov	r0, r4
   d4470:	f7ff ffd5 	bl	d441e <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   d4474:	2288      	movs	r2, #136	; 0x88
   d4476:	2123      	movs	r1, #35	; 0x23
   d4478:	4620      	mov	r0, r4
   d447a:	f7ff ff4b 	bl	d4314 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   d447e:	2210      	movs	r2, #16
   d4480:	2122      	movs	r1, #34	; 0x22
   d4482:	4620      	mov	r0, r4
   d4484:	f7ff ff46 	bl	d4314 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   d4488:	4620      	mov	r0, r4
   d448a:	2280      	movs	r2, #128	; 0x80
   d448c:	211f      	movs	r1, #31
   d448e:	f7ff ff41 	bl	d4314 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
   d4492:	2001      	movs	r0, #1
}
   d4494:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   d4496:	2101      	movs	r1, #1
   d4498:	b280      	uxth	r0, r0
   d449a:	f001 f88a 	bl	d55b2 <digitalWrite>
    pinMode(_cs, OUTPUT);
   d449e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d44a2:	2101      	movs	r1, #1
   d44a4:	b280      	uxth	r0, r0
   d44a6:	f001 f873 	bl	d5590 <pinMode>
    if (_sck == -1) {
   d44aa:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d44ae:	1c43      	adds	r3, r0, #1
   d44b0:	d104      	bne.n	d44bc <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
   d44b2:	f7ff fec7 	bl	d4244 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d44b6:	f000 fb5f 	bl	d4b78 <_ZN8SPIClass5beginEv>
    }
   d44ba:	e7cc      	b.n	d4456 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
   d44bc:	2101      	movs	r1, #1
   d44be:	b280      	uxth	r0, r0
   d44c0:	f001 f866 	bl	d5590 <pinMode>
      pinMode(_mosi, OUTPUT);
   d44c4:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d44c8:	2101      	movs	r1, #1
   d44ca:	b280      	uxth	r0, r0
   d44cc:	f001 f860 	bl	d5590 <pinMode>
      pinMode(_miso, INPUT);
   d44d0:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d44d4:	2100      	movs	r1, #0
   d44d6:	b280      	uxth	r0, r0
   d44d8:	f001 f85a 	bl	d5590 <pinMode>
   d44dc:	e7bb      	b.n	d4456 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
   d44de:	2000      	movs	r0, #0
   d44e0:	e7d8      	b.n	d4494 <_ZN15Adafruit_LIS3DH5beginEh+0x54>
	...

000d44e4 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
   d44e4:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d44e6:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d44ea:	3301      	adds	r3, #1
void Adafruit_LIS3DH::read(void) {
   d44ec:	4604      	mov	r4, r0
  if (_cs == -1) {
   d44ee:	d176      	bne.n	d45de <_ZN15Adafruit_LIS3DH4readEv+0xfa>
    Wire.beginTransmission(_i2caddr);
   d44f0:	f001 f8a4 	bl	d563c <_Z19__fetch_global_Wirev>
   d44f4:	f994 101c 	ldrsb.w	r1, [r4, #28]
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d44f8:	4d5c      	ldr	r5, [pc, #368]	; (d466c <_ZN15Adafruit_LIS3DH4readEv+0x188>)
    Wire.beginTransmission(_i2caddr);
   d44fa:	f000 ff13 	bl	d5324 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   d44fe:	f001 f89d 	bl	d563c <_Z19__fetch_global_Wirev>
   d4502:	21a8      	movs	r1, #168	; 0xa8
   d4504:	f7ff fe8a 	bl	d421c <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d4508:	f001 f898 	bl	d563c <_Z19__fetch_global_Wirev>
   d450c:	f000 ff11 	bl	d5332 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
   d4510:	f001 f894 	bl	d563c <_Z19__fetch_global_Wirev>
   d4514:	7f21      	ldrb	r1, [r4, #28]
   d4516:	2206      	movs	r2, #6
   d4518:	f000 fefd 	bl	d5316 <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d451c:	f001 f88e 	bl	d563c <_Z19__fetch_global_Wirev>
   d4520:	6803      	ldr	r3, [r0, #0]
   d4522:	695b      	ldr	r3, [r3, #20]
   d4524:	4798      	blx	r3
   d4526:	80e0      	strh	r0, [r4, #6]
   d4528:	f001 f888 	bl	d563c <_Z19__fetch_global_Wirev>
   d452c:	6803      	ldr	r3, [r0, #0]
   d452e:	695b      	ldr	r3, [r3, #20]
   d4530:	4798      	blx	r3
   d4532:	88e3      	ldrh	r3, [r4, #6]
   d4534:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d4538:	4318      	orrs	r0, r3
   d453a:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   d453c:	f001 f87e 	bl	d563c <_Z19__fetch_global_Wirev>
   d4540:	6803      	ldr	r3, [r0, #0]
   d4542:	695b      	ldr	r3, [r3, #20]
   d4544:	4798      	blx	r3
   d4546:	8120      	strh	r0, [r4, #8]
   d4548:	f001 f878 	bl	d563c <_Z19__fetch_global_Wirev>
   d454c:	6803      	ldr	r3, [r0, #0]
   d454e:	695b      	ldr	r3, [r3, #20]
   d4550:	4798      	blx	r3
   d4552:	8923      	ldrh	r3, [r4, #8]
   d4554:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d4558:	4318      	orrs	r0, r3
   d455a:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   d455c:	f001 f86e 	bl	d563c <_Z19__fetch_global_Wirev>
   d4560:	6803      	ldr	r3, [r0, #0]
   d4562:	695b      	ldr	r3, [r3, #20]
   d4564:	4798      	blx	r3
   d4566:	8160      	strh	r0, [r4, #10]
   d4568:	f001 f868 	bl	d563c <_Z19__fetch_global_Wirev>
   d456c:	6803      	ldr	r3, [r0, #0]
   d456e:	695b      	ldr	r3, [r3, #20]
   d4570:	4798      	blx	r3
   d4572:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d4576:	8965      	ldrh	r5, [r4, #10]
   d4578:	4328      	orrs	r0, r5
   d457a:	8160      	strh	r0, [r4, #10]
  uint8_t range = getRange();
   d457c:	4620      	mov	r0, r4
   d457e:	f7ff ff47 	bl	d4410 <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d4582:	2803      	cmp	r0, #3
   d4584:	d069      	beq.n	d465a <_ZN15Adafruit_LIS3DH4readEv+0x176>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d4586:	2802      	cmp	r0, #2
   d4588:	d06a      	beq.n	d4660 <_ZN15Adafruit_LIS3DH4readEv+0x17c>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d458a:	2801      	cmp	r0, #1
   d458c:	d06b      	beq.n	d4666 <_ZN15Adafruit_LIS3DH4readEv+0x182>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   d458e:	2800      	cmp	r0, #0
   d4590:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   d4594:	bf18      	it	ne
   d4596:	2301      	movne	r3, #1
  x_g = (float)x / divider;
   d4598:	ee07 3a90 	vmov	s15, r3
   d459c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d45a0:	ee07 3a10 	vmov	s14, r3
   d45a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d45a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d45ac:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  x_g = (float)x / divider;
   d45b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   d45b4:	ee07 3a10 	vmov	s14, r3
   d45b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_g = (float)x / divider;
   d45bc:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   d45c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   d45c4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d45c8:	ee07 3a10 	vmov	s14, r3
   d45cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d45d0:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   d45d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d45d8:	edc4 6a05 	vstr	s13, [r4, #20]
}
   d45dc:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
   d45de:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d45e2:	3301      	adds	r3, #1
   d45e4:	d101      	bne.n	d45ea <_ZN15Adafruit_LIS3DH4readEv+0x106>
      beginTransaction();
   d45e6:	f7ff fe7f 	bl	d42e8 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d45ea:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d45ee:	2100      	movs	r1, #0
   d45f0:	b280      	uxth	r0, r0
   d45f2:	f000 ffde 	bl	d55b2 <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   d45f6:	21e8      	movs	r1, #232	; 0xe8
   d45f8:	4620      	mov	r0, r4
   d45fa:	f7ff fe3f 	bl	d427c <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   d45fe:	21ff      	movs	r1, #255	; 0xff
   d4600:	4620      	mov	r0, r4
   d4602:	f7ff fe3b 	bl	d427c <_ZN15Adafruit_LIS3DH7spixferEh>
   d4606:	21ff      	movs	r1, #255	; 0xff
   d4608:	80e0      	strh	r0, [r4, #6]
   d460a:	4620      	mov	r0, r4
   d460c:	f7ff fe36 	bl	d427c <_ZN15Adafruit_LIS3DH7spixferEh>
   d4610:	88e3      	ldrh	r3, [r4, #6]
   d4612:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4616:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   d4618:	21ff      	movs	r1, #255	; 0xff
   d461a:	4620      	mov	r0, r4
   d461c:	f7ff fe2e 	bl	d427c <_ZN15Adafruit_LIS3DH7spixferEh>
   d4620:	21ff      	movs	r1, #255	; 0xff
   d4622:	8120      	strh	r0, [r4, #8]
   d4624:	4620      	mov	r0, r4
   d4626:	f7ff fe29 	bl	d427c <_ZN15Adafruit_LIS3DH7spixferEh>
   d462a:	8923      	ldrh	r3, [r4, #8]
   d462c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4630:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   d4632:	21ff      	movs	r1, #255	; 0xff
   d4634:	4620      	mov	r0, r4
   d4636:	f7ff fe21 	bl	d427c <_ZN15Adafruit_LIS3DH7spixferEh>
   d463a:	21ff      	movs	r1, #255	; 0xff
   d463c:	8160      	strh	r0, [r4, #10]
   d463e:	4620      	mov	r0, r4
   d4640:	f7ff fe1c 	bl	d427c <_ZN15Adafruit_LIS3DH7spixferEh>
   d4644:	8963      	ldrh	r3, [r4, #10]
   d4646:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d464a:	8160      	strh	r0, [r4, #10]
    digitalWrite(_cs, HIGH);
   d464c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4650:	2101      	movs	r1, #1
   d4652:	b280      	uxth	r0, r0
   d4654:	f000 ffad 	bl	d55b2 <digitalWrite>
    if (_sck == -1)
   d4658:	e790      	b.n	d457c <_ZN15Adafruit_LIS3DH4readEv+0x98>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d465a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d465e:	e79b      	b.n	d4598 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d4660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   d4664:	e798      	b.n	d4598 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d4666:	f641 73fe 	movw	r3, #8190	; 0x1ffe
   d466a:	e795      	b.n	d4598 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
   d466c:	00ffff00 	.word	0x00ffff00

000d4670 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   d4670:	460c      	mov	r4, r1
   d4672:	4605      	mov	r5, r0
   d4674:	b508      	push	{r3, lr}
  memset(event, 0, sizeof(sensors_event_t));
   d4676:	2220      	movs	r2, #32
   d4678:	2100      	movs	r1, #0
   d467a:	1d20      	adds	r0, r4, #4
   d467c:	f001 f82c 	bl	d56d8 <memset>
  event->version   = sizeof(sensors_event_t);
   d4680:	2324      	movs	r3, #36	; 0x24
   d4682:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d4684:	69ab      	ldr	r3, [r5, #24]
   d4686:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   d4688:	2301      	movs	r3, #1
   d468a:	60a3      	str	r3, [r4, #8]
  event->timestamp = 0;
   d468c:	2300      	movs	r3, #0
   d468e:	6123      	str	r3, [r4, #16]
  read();
   d4690:	4628      	mov	r0, r5
   d4692:	f7ff ff27 	bl	d44e4 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
   d4696:	68eb      	ldr	r3, [r5, #12]
   d4698:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   d469a:	692b      	ldr	r3, [r5, #16]
   d469c:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   d469e:	696b      	ldr	r3, [r5, #20]
   d46a0:	61e3      	str	r3, [r4, #28]
	...

000d46a4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <netdb_freeaddrinfo+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	689b      	ldr	r3, [r3, #8]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	00030268 	.word	0x00030268

000d46b4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <netdb_getaddrinfo+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	68db      	ldr	r3, [r3, #12]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	00030268 	.word	0x00030268

000d46c4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <HAL_Pin_Mode+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	689b      	ldr	r3, [r3, #8]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	0003022c 	.word	0x0003022c

000d46d4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <HAL_Get_Pin_Mode+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	68db      	ldr	r3, [r3, #12]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	0003022c 	.word	0x0003022c

000d46e4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <HAL_GPIO_Write+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	691b      	ldr	r3, [r3, #16]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	0003022c 	.word	0x0003022c

000d46f4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <HAL_GPIO_Read+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	695b      	ldr	r3, [r3, #20]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	0003022c 	.word	0x0003022c

000d4704 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <HAL_RNG_GetRandomNumber+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	685b      	ldr	r3, [r3, #4]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	00030218 	.word	0x00030218

000d4714 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	695b      	ldr	r3, [r3, #20]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	00030218 	.word	0x00030218

000d4724 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <os_mutex_recursive_create+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	00030248 	.word	0x00030248

000d4734 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <os_mutex_recursive_destroy+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	00030248 	.word	0x00030248

000d4744 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <inet_inet_ntop+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	695b      	ldr	r3, [r3, #20]
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	00030264 	.word	0x00030264

000d4754 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <hal_usart_init+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	681b      	ldr	r3, [r3, #0]
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	0003023c 	.word	0x0003023c

000d4764 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <hal_usart_write+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	68db      	ldr	r3, [r3, #12]
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	0003023c 	.word	0x0003023c

000d4774 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <hal_usart_available+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	691b      	ldr	r3, [r3, #16]
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	0003023c 	.word	0x0003023c

000d4784 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <hal_usart_read+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	695b      	ldr	r3, [r3, #20]
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	0003023c 	.word	0x0003023c

000d4794 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <hal_usart_peek+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	699b      	ldr	r3, [r3, #24]
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	0003023c 	.word	0x0003023c

000d47a4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <hal_usart_flush+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	69db      	ldr	r3, [r3, #28]
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	0003023c 	.word	0x0003023c

000d47b4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <hal_usart_is_enabled+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	6a1b      	ldr	r3, [r3, #32]
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	0003023c 	.word	0x0003023c

000d47c4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b02      	ldr	r3, [pc, #8]	; (d47d0 <hal_usart_available_data_for_write+0xc>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47cc:	9301      	str	r3, [sp, #4]
   d47ce:	bd08      	pop	{r3, pc}
   d47d0:	0003023c 	.word	0x0003023c

000d47d4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d47d4:	b508      	push	{r3, lr}
   d47d6:	4b02      	ldr	r3, [pc, #8]	; (d47e0 <hal_i2c_begin+0xc>)
   d47d8:	681b      	ldr	r3, [r3, #0]
   d47da:	68db      	ldr	r3, [r3, #12]
   d47dc:	9301      	str	r3, [sp, #4]
   d47de:	bd08      	pop	{r3, pc}
   d47e0:	00030228 	.word	0x00030228

000d47e4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <hal_i2c_begin_transmission+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	699b      	ldr	r3, [r3, #24]
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	00030228 	.word	0x00030228

000d47f4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d47f4:	b508      	push	{r3, lr}
   d47f6:	4b02      	ldr	r3, [pc, #8]	; (d4800 <hal_i2c_end_transmission+0xc>)
   d47f8:	681b      	ldr	r3, [r3, #0]
   d47fa:	69db      	ldr	r3, [r3, #28]
   d47fc:	9301      	str	r3, [sp, #4]
   d47fe:	bd08      	pop	{r3, pc}
   d4800:	00030228 	.word	0x00030228

000d4804 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4804:	b508      	push	{r3, lr}
   d4806:	4b02      	ldr	r3, [pc, #8]	; (d4810 <hal_i2c_write+0xc>)
   d4808:	681b      	ldr	r3, [r3, #0]
   d480a:	6a1b      	ldr	r3, [r3, #32]
   d480c:	9301      	str	r3, [sp, #4]
   d480e:	bd08      	pop	{r3, pc}
   d4810:	00030228 	.word	0x00030228

000d4814 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4814:	b508      	push	{r3, lr}
   d4816:	4b02      	ldr	r3, [pc, #8]	; (d4820 <hal_i2c_available+0xc>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d481c:	9301      	str	r3, [sp, #4]
   d481e:	bd08      	pop	{r3, pc}
   d4820:	00030228 	.word	0x00030228

000d4824 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4824:	b508      	push	{r3, lr}
   d4826:	4b02      	ldr	r3, [pc, #8]	; (d4830 <hal_i2c_read+0xc>)
   d4828:	681b      	ldr	r3, [r3, #0]
   d482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d482c:	9301      	str	r3, [sp, #4]
   d482e:	bd08      	pop	{r3, pc}
   d4830:	00030228 	.word	0x00030228

000d4834 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4834:	b508      	push	{r3, lr}
   d4836:	4b02      	ldr	r3, [pc, #8]	; (d4840 <hal_i2c_peek+0xc>)
   d4838:	681b      	ldr	r3, [r3, #0]
   d483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d483c:	9301      	str	r3, [sp, #4]
   d483e:	bd08      	pop	{r3, pc}
   d4840:	00030228 	.word	0x00030228

000d4844 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4844:	b508      	push	{r3, lr}
   d4846:	4b02      	ldr	r3, [pc, #8]	; (d4850 <hal_i2c_flush+0xc>)
   d4848:	681b      	ldr	r3, [r3, #0]
   d484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d484c:	9301      	str	r3, [sp, #4]
   d484e:	bd08      	pop	{r3, pc}
   d4850:	00030228 	.word	0x00030228

000d4854 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4854:	b508      	push	{r3, lr}
   d4856:	4b02      	ldr	r3, [pc, #8]	; (d4860 <hal_i2c_is_enabled+0xc>)
   d4858:	681b      	ldr	r3, [r3, #0]
   d485a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d485c:	9301      	str	r3, [sp, #4]
   d485e:	bd08      	pop	{r3, pc}
   d4860:	00030228 	.word	0x00030228

000d4864 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4864:	b508      	push	{r3, lr}
   d4866:	4b02      	ldr	r3, [pc, #8]	; (d4870 <hal_i2c_init+0xc>)
   d4868:	681b      	ldr	r3, [r3, #0]
   d486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d486c:	9301      	str	r3, [sp, #4]
   d486e:	bd08      	pop	{r3, pc}
   d4870:	00030228 	.word	0x00030228

000d4874 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d4874:	b508      	push	{r3, lr}
   d4876:	4b02      	ldr	r3, [pc, #8]	; (d4880 <hal_i2c_request_ex+0xc>)
   d4878:	681b      	ldr	r3, [r3, #0]
   d487a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d487c:	9301      	str	r3, [sp, #4]
   d487e:	bd08      	pop	{r3, pc}
   d4880:	00030228 	.word	0x00030228

000d4884 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d4884:	b508      	push	{r3, lr}
   d4886:	4b02      	ldr	r3, [pc, #8]	; (d4890 <hal_spi_begin+0xc>)
   d4888:	681b      	ldr	r3, [r3, #0]
   d488a:	681b      	ldr	r3, [r3, #0]
   d488c:	9301      	str	r3, [sp, #4]
   d488e:	bd08      	pop	{r3, pc}
   d4890:	00030230 	.word	0x00030230

000d4894 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d4894:	b508      	push	{r3, lr}
   d4896:	4b02      	ldr	r3, [pc, #8]	; (d48a0 <hal_spi_set_bit_order+0xc>)
   d4898:	681b      	ldr	r3, [r3, #0]
   d489a:	689b      	ldr	r3, [r3, #8]
   d489c:	9301      	str	r3, [sp, #4]
   d489e:	bd08      	pop	{r3, pc}
   d48a0:	00030230 	.word	0x00030230

000d48a4 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d48a4:	b508      	push	{r3, lr}
   d48a6:	4b02      	ldr	r3, [pc, #8]	; (d48b0 <hal_spi_set_data_mode+0xc>)
   d48a8:	681b      	ldr	r3, [r3, #0]
   d48aa:	68db      	ldr	r3, [r3, #12]
   d48ac:	9301      	str	r3, [sp, #4]
   d48ae:	bd08      	pop	{r3, pc}
   d48b0:	00030230 	.word	0x00030230

000d48b4 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d48b4:	b508      	push	{r3, lr}
   d48b6:	4b02      	ldr	r3, [pc, #8]	; (d48c0 <hal_spi_set_clock_divider+0xc>)
   d48b8:	681b      	ldr	r3, [r3, #0]
   d48ba:	691b      	ldr	r3, [r3, #16]
   d48bc:	9301      	str	r3, [sp, #4]
   d48be:	bd08      	pop	{r3, pc}
   d48c0:	00030230 	.word	0x00030230

000d48c4 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d48c4:	b508      	push	{r3, lr}
   d48c6:	4b02      	ldr	r3, [pc, #8]	; (d48d0 <hal_spi_transfer+0xc>)
   d48c8:	681b      	ldr	r3, [r3, #0]
   d48ca:	695b      	ldr	r3, [r3, #20]
   d48cc:	9301      	str	r3, [sp, #4]
   d48ce:	bd08      	pop	{r3, pc}
   d48d0:	00030230 	.word	0x00030230

000d48d4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d48d4:	b508      	push	{r3, lr}
   d48d6:	4b02      	ldr	r3, [pc, #8]	; (d48e0 <hal_spi_init+0xc>)
   d48d8:	681b      	ldr	r3, [r3, #0]
   d48da:	69db      	ldr	r3, [r3, #28]
   d48dc:	9301      	str	r3, [sp, #4]
   d48de:	bd08      	pop	{r3, pc}
   d48e0:	00030230 	.word	0x00030230

000d48e4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d48e4:	b508      	push	{r3, lr}
   d48e6:	4b02      	ldr	r3, [pc, #8]	; (d48f0 <hal_spi_is_enabled+0xc>)
   d48e8:	681b      	ldr	r3, [r3, #0]
   d48ea:	6a1b      	ldr	r3, [r3, #32]
   d48ec:	9301      	str	r3, [sp, #4]
   d48ee:	bd08      	pop	{r3, pc}
   d48f0:	00030230 	.word	0x00030230

000d48f4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <hal_spi_info+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	00030230 	.word	0x00030230

000d4904 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <hal_spi_acquire+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	00030230 	.word	0x00030230

000d4914 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <hal_spi_release+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	00030230 	.word	0x00030230

000d4924 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <HAL_USB_USART_Init+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	681b      	ldr	r3, [r3, #0]
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	0003024c 	.word	0x0003024c

000d4934 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <HAL_USB_USART_Begin+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	685b      	ldr	r3, [r3, #4]
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	0003024c 	.word	0x0003024c

000d4944 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <HAL_USB_USART_Available_Data+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	691b      	ldr	r3, [r3, #16]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	0003024c 	.word	0x0003024c

000d4954 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	695b      	ldr	r3, [r3, #20]
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	0003024c 	.word	0x0003024c

000d4964 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <HAL_USB_USART_Receive_Data+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	699b      	ldr	r3, [r3, #24]
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	0003024c 	.word	0x0003024c

000d4974 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <HAL_USB_USART_Send_Data+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	69db      	ldr	r3, [r3, #28]
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	0003024c 	.word	0x0003024c

000d4984 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <HAL_USB_USART_Flush_Data+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	6a1b      	ldr	r3, [r3, #32]
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	0003024c 	.word	0x0003024c

000d4994 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <set_system_mode+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	685b      	ldr	r3, [r3, #4]
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030220 	.word	0x00030220

000d49a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <system_delay_ms+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	695b      	ldr	r3, [r3, #20]
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030220 	.word	0x00030220

000d49b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b03      	ldr	r3, [pc, #12]	; (d49c4 <system_ctrl_set_app_request_handler+0x10>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d49be:	9301      	str	r3, [sp, #4]
   d49c0:	bd08      	pop	{r3, pc}
   d49c2:	0000      	.short	0x0000
   d49c4:	00030220 	.word	0x00030220

000d49c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b03      	ldr	r3, [pc, #12]	; (d49d8 <system_ctrl_set_result+0x10>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d49d2:	9301      	str	r3, [sp, #4]
   d49d4:	bd08      	pop	{r3, pc}
   d49d6:	0000      	.short	0x0000
   d49d8:	00030220 	.word	0x00030220

000d49dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d49dc:	b508      	push	{r3, lr}
   d49de:	4b02      	ldr	r3, [pc, #8]	; (d49e8 <network_connect+0xc>)
   d49e0:	681b      	ldr	r3, [r3, #0]
   d49e2:	685b      	ldr	r3, [r3, #4]
   d49e4:	9301      	str	r3, [sp, #4]
   d49e6:	bd08      	pop	{r3, pc}
   d49e8:	00030240 	.word	0x00030240

000d49ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d49ec:	b508      	push	{r3, lr}
   d49ee:	4b02      	ldr	r3, [pc, #8]	; (d49f8 <network_connecting+0xc>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	689b      	ldr	r3, [r3, #8]
   d49f4:	9301      	str	r3, [sp, #4]
   d49f6:	bd08      	pop	{r3, pc}
   d49f8:	00030240 	.word	0x00030240

000d49fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d49fc:	b508      	push	{r3, lr}
   d49fe:	4b02      	ldr	r3, [pc, #8]	; (d4a08 <network_disconnect+0xc>)
   d4a00:	681b      	ldr	r3, [r3, #0]
   d4a02:	68db      	ldr	r3, [r3, #12]
   d4a04:	9301      	str	r3, [sp, #4]
   d4a06:	bd08      	pop	{r3, pc}
   d4a08:	00030240 	.word	0x00030240

000d4a0c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4a0c:	b508      	push	{r3, lr}
   d4a0e:	4b02      	ldr	r3, [pc, #8]	; (d4a18 <network_ready+0xc>)
   d4a10:	681b      	ldr	r3, [r3, #0]
   d4a12:	691b      	ldr	r3, [r3, #16]
   d4a14:	9301      	str	r3, [sp, #4]
   d4a16:	bd08      	pop	{r3, pc}
   d4a18:	00030240 	.word	0x00030240

000d4a1c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a1c:	b508      	push	{r3, lr}
   d4a1e:	4b02      	ldr	r3, [pc, #8]	; (d4a28 <network_on+0xc>)
   d4a20:	681b      	ldr	r3, [r3, #0]
   d4a22:	695b      	ldr	r3, [r3, #20]
   d4a24:	9301      	str	r3, [sp, #4]
   d4a26:	bd08      	pop	{r3, pc}
   d4a28:	00030240 	.word	0x00030240

000d4a2c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a2c:	b508      	push	{r3, lr}
   d4a2e:	4b02      	ldr	r3, [pc, #8]	; (d4a38 <network_off+0xc>)
   d4a30:	681b      	ldr	r3, [r3, #0]
   d4a32:	699b      	ldr	r3, [r3, #24]
   d4a34:	9301      	str	r3, [sp, #4]
   d4a36:	bd08      	pop	{r3, pc}
   d4a38:	00030240 	.word	0x00030240

000d4a3c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4a3c:	b508      	push	{r3, lr}
   d4a3e:	4b02      	ldr	r3, [pc, #8]	; (d4a48 <network_listen+0xc>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	69db      	ldr	r3, [r3, #28]
   d4a44:	9301      	str	r3, [sp, #4]
   d4a46:	bd08      	pop	{r3, pc}
   d4a48:	00030240 	.word	0x00030240

000d4a4c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4a4c:	b508      	push	{r3, lr}
   d4a4e:	4b02      	ldr	r3, [pc, #8]	; (d4a58 <network_listening+0xc>)
   d4a50:	681b      	ldr	r3, [r3, #0]
   d4a52:	6a1b      	ldr	r3, [r3, #32]
   d4a54:	9301      	str	r3, [sp, #4]
   d4a56:	bd08      	pop	{r3, pc}
   d4a58:	00030240 	.word	0x00030240

000d4a5c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4a5c:	b508      	push	{r3, lr}
   d4a5e:	4b02      	ldr	r3, [pc, #8]	; (d4a68 <network_set_listen_timeout+0xc>)
   d4a60:	681b      	ldr	r3, [r3, #0]
   d4a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a64:	9301      	str	r3, [sp, #4]
   d4a66:	bd08      	pop	{r3, pc}
   d4a68:	00030240 	.word	0x00030240

000d4a6c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4a6c:	b508      	push	{r3, lr}
   d4a6e:	4b02      	ldr	r3, [pc, #8]	; (d4a78 <network_get_listen_timeout+0xc>)
   d4a70:	681b      	ldr	r3, [r3, #0]
   d4a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a74:	9301      	str	r3, [sp, #4]
   d4a76:	bd08      	pop	{r3, pc}
   d4a78:	00030240 	.word	0x00030240

000d4a7c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4a7c:	b508      	push	{r3, lr}
   d4a7e:	4b02      	ldr	r3, [pc, #8]	; (d4a88 <network_is_on+0xc>)
   d4a80:	681b      	ldr	r3, [r3, #0]
   d4a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a84:	9301      	str	r3, [sp, #4]
   d4a86:	bd08      	pop	{r3, pc}
   d4a88:	00030240 	.word	0x00030240

000d4a8c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4a8c:	b508      	push	{r3, lr}
   d4a8e:	4b02      	ldr	r3, [pc, #8]	; (d4a98 <network_is_off+0xc>)
   d4a90:	681b      	ldr	r3, [r3, #0]
   d4a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a94:	9301      	str	r3, [sp, #4]
   d4a96:	bd08      	pop	{r3, pc}
   d4a98:	00030240 	.word	0x00030240

000d4a9c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4a9c:	b508      	push	{r3, lr}
   d4a9e:	4b02      	ldr	r3, [pc, #8]	; (d4aa8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4aa0:	681b      	ldr	r3, [r3, #0]
   d4aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4aa4:	9301      	str	r3, [sp, #4]
   d4aa6:	bd08      	pop	{r3, pc}
   d4aa8:	00030244 	.word	0x00030244

000d4aac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4aac:	b508      	push	{r3, lr}
   d4aae:	4b02      	ldr	r3, [pc, #8]	; (d4ab8 <malloc+0xc>)
   d4ab0:	681b      	ldr	r3, [r3, #0]
   d4ab2:	681b      	ldr	r3, [r3, #0]
   d4ab4:	9301      	str	r3, [sp, #4]
   d4ab6:	bd08      	pop	{r3, pc}
   d4ab8:	0003021c 	.word	0x0003021c

000d4abc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4abc:	b508      	push	{r3, lr}
   d4abe:	4b02      	ldr	r3, [pc, #8]	; (d4ac8 <free+0xc>)
   d4ac0:	681b      	ldr	r3, [r3, #0]
   d4ac2:	685b      	ldr	r3, [r3, #4]
   d4ac4:	9301      	str	r3, [sp, #4]
   d4ac6:	bd08      	pop	{r3, pc}
   d4ac8:	0003021c 	.word	0x0003021c

000d4acc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4acc:	b508      	push	{r3, lr}
   d4ace:	4b02      	ldr	r3, [pc, #8]	; (d4ad8 <newlib_impure_ptr_callback+0xc>)
   d4ad0:	681b      	ldr	r3, [r3, #0]
   d4ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4ad4:	9301      	str	r3, [sp, #4]
   d4ad6:	bd08      	pop	{r3, pc}
   d4ad8:	0003021c 	.word	0x0003021c

000d4adc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4adc:	2200      	movs	r2, #0
   d4ade:	6840      	ldr	r0, [r0, #4]
   d4ae0:	4611      	mov	r1, r2
   d4ae2:	f7ff bfb3 	b.w	d4a4c <network_listening>

000d4ae6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4ae6:	2200      	movs	r2, #0
   d4ae8:	6840      	ldr	r0, [r0, #4]
   d4aea:	4611      	mov	r1, r2
   d4aec:	f7ff bfbe 	b.w	d4a6c <network_get_listen_timeout>

000d4af0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4af0:	6840      	ldr	r0, [r0, #4]
   d4af2:	2200      	movs	r2, #0
   d4af4:	f7ff bfb2 	b.w	d4a5c <network_set_listen_timeout>

000d4af8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4af8:	6840      	ldr	r0, [r0, #4]
   d4afa:	2200      	movs	r2, #0
   d4afc:	f081 0101 	eor.w	r1, r1, #1
   d4b00:	f7ff bf9c 	b.w	d4a3c <network_listen>

000d4b04 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4b04:	2300      	movs	r3, #0
   d4b06:	6840      	ldr	r0, [r0, #4]
   d4b08:	461a      	mov	r2, r3
   d4b0a:	4619      	mov	r1, r3
   d4b0c:	f7ff bf8e 	b.w	d4a2c <network_off>

000d4b10 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4b10:	2300      	movs	r3, #0
   d4b12:	6840      	ldr	r0, [r0, #4]
   d4b14:	461a      	mov	r2, r3
   d4b16:	4619      	mov	r1, r3
   d4b18:	f7ff bf80 	b.w	d4a1c <network_on>

000d4b1c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b1c:	2200      	movs	r2, #0
   d4b1e:	6840      	ldr	r0, [r0, #4]
   d4b20:	4611      	mov	r1, r2
   d4b22:	f7ff bf73 	b.w	d4a0c <network_ready>

000d4b26 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4b26:	2200      	movs	r2, #0
   d4b28:	6840      	ldr	r0, [r0, #4]
   d4b2a:	4611      	mov	r1, r2
   d4b2c:	f7ff bf5e 	b.w	d49ec <network_connecting>

000d4b30 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b30:	6840      	ldr	r0, [r0, #4]
   d4b32:	2200      	movs	r2, #0
   d4b34:	2102      	movs	r1, #2
   d4b36:	f7ff bf61 	b.w	d49fc <network_disconnect>

000d4b3a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4b3a:	2300      	movs	r3, #0
   d4b3c:	6840      	ldr	r0, [r0, #4]
   d4b3e:	461a      	mov	r2, r3
   d4b40:	f7ff bf4c 	b.w	d49dc <network_connect>

000d4b44 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4b44:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4b46:	2203      	movs	r2, #3
   d4b48:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4b4a:	4a02      	ldr	r2, [pc, #8]	; (d4b54 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4b4c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4b4e:	4770      	bx	lr
   d4b50:	2003e650 	.word	0x2003e650
   d4b54:	000d57bc 	.word	0x000d57bc

000d4b58 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d4b58:	2100      	movs	r1, #0
   d4b5a:	f7ff bed3 	b.w	d4904 <hal_spi_acquire>

000d4b5e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d4b5e:	2100      	movs	r1, #0
   d4b60:	f7ff bed8 	b.w	d4914 <hal_spi_release>

000d4b64 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4b64:	b510      	push	{r4, lr}
   d4b66:	4604      	mov	r4, r0
   d4b68:	4608      	mov	r0, r1
{
    _spi = spi;
   d4b6a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4b6c:	f7ff feb2 	bl	d48d4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4b70:	2300      	movs	r3, #0
   d4b72:	6063      	str	r3, [r4, #4]
}
   d4b74:	4620      	mov	r0, r4
   d4b76:	bd10      	pop	{r4, pc}

000d4b78 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d4b78:	b510      	push	{r4, lr}
   d4b7a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d4b7c:	7800      	ldrb	r0, [r0, #0]
   d4b7e:	f7ff ffeb 	bl	d4b58 <_ZN8SPIClass4lockEv.isra.0>
   d4b82:	b948      	cbnz	r0, d4b98 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d4b84:	7820      	ldrb	r0, [r4, #0]
   d4b86:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d4b8a:	f7ff fe7b 	bl	d4884 <hal_spi_begin>
        unlock();
   d4b8e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d4b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d4b94:	f7ff bfe3 	b.w	d4b5e <_ZN8SPIClass6unlockEv.isra.0>
}
   d4b98:	bd10      	pop	{r4, pc}

000d4b9a <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d4b9a:	b513      	push	{r0, r1, r4, lr}
   d4b9c:	4604      	mov	r4, r0
    if (!lock())
   d4b9e:	7800      	ldrb	r0, [r0, #0]
{
   d4ba0:	9101      	str	r1, [sp, #4]
    if (!lock())
   d4ba2:	f7ff ffd9 	bl	d4b58 <_ZN8SPIClass4lockEv.isra.0>
   d4ba6:	9901      	ldr	r1, [sp, #4]
   d4ba8:	b940      	cbnz	r0, d4bbc <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d4baa:	7820      	ldrb	r0, [r4, #0]
   d4bac:	f7ff fe72 	bl	d4894 <hal_spi_set_bit_order>
        unlock();
   d4bb0:	7820      	ldrb	r0, [r4, #0]
    }
}
   d4bb2:	b002      	add	sp, #8
   d4bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d4bb8:	f7ff bfd1 	b.w	d4b5e <_ZN8SPIClass6unlockEv.isra.0>
}
   d4bbc:	b002      	add	sp, #8
   d4bbe:	bd10      	pop	{r4, pc}

000d4bc0 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d4bc0:	b513      	push	{r0, r1, r4, lr}
   d4bc2:	4604      	mov	r4, r0
    if (!lock())
   d4bc4:	7800      	ldrb	r0, [r0, #0]
{
   d4bc6:	9101      	str	r1, [sp, #4]
    if (!lock())
   d4bc8:	f7ff ffc6 	bl	d4b58 <_ZN8SPIClass4lockEv.isra.0>
   d4bcc:	9901      	ldr	r1, [sp, #4]
   d4bce:	b940      	cbnz	r0, d4be2 <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d4bd0:	7820      	ldrb	r0, [r4, #0]
   d4bd2:	f7ff fe67 	bl	d48a4 <hal_spi_set_data_mode>
        unlock();
   d4bd6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d4bd8:	b002      	add	sp, #8
   d4bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d4bde:	f7ff bfbe 	b.w	d4b5e <_ZN8SPIClass6unlockEv.isra.0>
}
   d4be2:	b002      	add	sp, #8
   d4be4:	bd10      	pop	{r4, pc}
	...

000d4be8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d4be8:	0840      	lsrs	r0, r0, #1
{
   d4bea:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d4bec:	6018      	str	r0, [r3, #0]
   d4bee:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d4bf0:	6818      	ldr	r0, [r3, #0]
   d4bf2:	4288      	cmp	r0, r1
   d4bf4:	b2e5      	uxtb	r5, r4
   d4bf6:	d906      	bls.n	d4c06 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d4bf8:	3401      	adds	r4, #1
   d4bfa:	2c08      	cmp	r4, #8
   d4bfc:	d002      	beq.n	d4c04 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d4bfe:	0840      	lsrs	r0, r0, #1
   d4c00:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d4c02:	e7f5      	b.n	d4bf0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d4c04:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d4c06:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d4c08:	5d5b      	ldrb	r3, [r3, r5]
   d4c0a:	7013      	strb	r3, [r2, #0]
}
   d4c0c:	bd30      	pop	{r4, r5, pc}
   d4c0e:	bf00      	nop
   d4c10:	000d57f0 	.word	0x000d57f0

000d4c14 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d4c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4c18:	b088      	sub	sp, #32
    unsigned clock = 0;
   d4c1a:	2300      	movs	r3, #0
{
   d4c1c:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d4c1e:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d4c20:	9302      	str	r3, [sp, #8]
{
   d4c22:	460e      	mov	r6, r1
   d4c24:	4617      	mov	r7, r2
    if (!lock())
   d4c26:	f7ff ff97 	bl	d4b58 <_ZN8SPIClass4lockEv.isra.0>
   d4c2a:	4605      	mov	r5, r0
   d4c2c:	bb00      	cbnz	r0, d4c70 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d4c2e:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d4c32:	4601      	mov	r1, r0
   d4c34:	2214      	movs	r2, #20
   d4c36:	a803      	add	r0, sp, #12
   d4c38:	f000 fd4e 	bl	d56d8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d4c3c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d4c3e:	462a      	mov	r2, r5
   d4c40:	a903      	add	r1, sp, #12
   d4c42:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d4c44:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d4c48:	f7ff fe54 	bl	d48f4 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d4c4c:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d4c4e:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d4c52:	ab02      	add	r3, sp, #8
   d4c54:	f10d 0207 	add.w	r2, sp, #7
   d4c58:	fb07 f106 	mul.w	r1, r7, r6
   d4c5c:	f7ff ffc4 	bl	d4be8 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d4c60:	7820      	ldrb	r0, [r4, #0]
   d4c62:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d4c66:	f7ff fe25 	bl	d48b4 <hal_spi_set_clock_divider>
        unlock();
   d4c6a:	7820      	ldrb	r0, [r4, #0]
   d4c6c:	f7ff ff77 	bl	d4b5e <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d4c70:	9802      	ldr	r0, [sp, #8]
   d4c72:	b008      	add	sp, #32
   d4c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4c78 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d4c78:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d4c7a:	7800      	ldrb	r0, [r0, #0]
   d4c7c:	f7ff fe22 	bl	d48c4 <hal_spi_transfer>
}
   d4c80:	b2c0      	uxtb	r0, r0
   d4c82:	bd08      	pop	{r3, pc}

000d4c84 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4c84:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4c86:	4b09      	ldr	r3, [pc, #36]	; (d4cac <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4c88:	4c09      	ldr	r4, [pc, #36]	; (d4cb0 <_GLOBAL__sub_I_System+0x2c>)
   d4c8a:	2202      	movs	r2, #2
   d4c8c:	2000      	movs	r0, #0
   d4c8e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4c90:	4b08      	ldr	r3, [pc, #32]	; (d4cb4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4c92:	6020      	str	r0, [r4, #0]
   d4c94:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4c96:	71a0      	strb	r0, [r4, #6]
   d4c98:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4c9a:	f7ff fe7b 	bl	d4994 <set_system_mode>
SystemClass System;
   d4c9e:	4620      	mov	r0, r4
   d4ca0:	4a05      	ldr	r2, [pc, #20]	; (d4cb8 <_GLOBAL__sub_I_System+0x34>)
   d4ca2:	4906      	ldr	r1, [pc, #24]	; (d4cbc <_GLOBAL__sub_I_System+0x38>)
   d4ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4ca8:	f000 bcf0 	b.w	d568c <__aeabi_atexit>
   d4cac:	2003e664 	.word	0x2003e664
   d4cb0:	2003e658 	.word	0x2003e658
   d4cb4:	ffff0000 	.word	0xffff0000
   d4cb8:	2003e608 	.word	0x2003e608
   d4cbc:	000d40ad 	.word	0x000d40ad

000d4cc0 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4cc0:	b510      	push	{r4, lr}
   d4cc2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4cc4:	6800      	ldr	r0, [r0, #0]
   d4cc6:	b108      	cbz	r0, d4ccc <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4cc8:	f7ff fd34 	bl	d4734 <os_mutex_recursive_destroy>
    }
   d4ccc:	4620      	mov	r0, r4
   d4cce:	bd10      	pop	{r4, pc}

000d4cd0 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4cd0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4cd2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4cd4:	4604      	mov	r4, r0
      if (_M_manager)
   d4cd6:	b113      	cbz	r3, d4cde <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4cd8:	2203      	movs	r2, #3
   d4cda:	4601      	mov	r1, r0
   d4cdc:	4798      	blx	r3
    }
   d4cde:	4620      	mov	r0, r4
   d4ce0:	bd10      	pop	{r4, pc}
	...

000d4ce4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d4ce4:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4ce6:	4c06      	ldr	r4, [pc, #24]	; (d4d00 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4ce8:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4cea:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4cec:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4cee:	f7ff fd19 	bl	d4724 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4cf2:	4620      	mov	r0, r4
   d4cf4:	4a03      	ldr	r2, [pc, #12]	; (d4d04 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4cf6:	4904      	ldr	r1, [pc, #16]	; (d4d08 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4cfc:	f000 bcc6 	b.w	d568c <__aeabi_atexit>
   d4d00:	2003e668 	.word	0x2003e668
   d4d04:	2003e608 	.word	0x2003e608
   d4d08:	000d4cc1 	.word	0x000d4cc1

000d4d0c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d0e:	4606      	mov	r6, r0
   d4d10:	460d      	mov	r5, r1
  size_t n = 0;
   d4d12:	188f      	adds	r7, r1, r2
   d4d14:	2400      	movs	r4, #0
  while (size--) {
   d4d16:	42bd      	cmp	r5, r7
   d4d18:	d00c      	beq.n	d4d34 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4d1a:	6833      	ldr	r3, [r6, #0]
   d4d1c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4d20:	689b      	ldr	r3, [r3, #8]
   d4d22:	4630      	mov	r0, r6
   d4d24:	4798      	blx	r3
     if (chunk>=0)
   d4d26:	1e03      	subs	r3, r0, #0
   d4d28:	db01      	blt.n	d4d2e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4d2a:	441c      	add	r4, r3
  while (size--) {
   d4d2c:	e7f3      	b.n	d4d16 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4d2e:	2c00      	cmp	r4, #0
   d4d30:	bf08      	it	eq
   d4d32:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4d34:	4620      	mov	r0, r4
   d4d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d38 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4d38:	b513      	push	{r0, r1, r4, lr}
   d4d3a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4d3c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4d3e:	b159      	cbz	r1, d4d58 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4d40:	9101      	str	r1, [sp, #4]
   d4d42:	f000 fcf5 	bl	d5730 <strlen>
   d4d46:	6823      	ldr	r3, [r4, #0]
   d4d48:	9901      	ldr	r1, [sp, #4]
   d4d4a:	68db      	ldr	r3, [r3, #12]
   d4d4c:	4602      	mov	r2, r0
   d4d4e:	4620      	mov	r0, r4
    }
   d4d50:	b002      	add	sp, #8
   d4d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4d56:	4718      	bx	r3
    }
   d4d58:	b002      	add	sp, #8
   d4d5a:	bd10      	pop	{r4, pc}

000d4d5c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d4d5c:	b508      	push	{r3, lr}
  return write(str);
   d4d5e:	f7ff ffeb 	bl	d4d38 <_ZN5Print5writeEPKc>
}
   d4d62:	bd08      	pop	{r3, pc}

000d4d64 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d4d64:	6803      	ldr	r3, [r0, #0]
   d4d66:	689b      	ldr	r3, [r3, #8]
   d4d68:	4718      	bx	r3

000d4d6a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4d6a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4d6c:	210d      	movs	r1, #13
{
   d4d6e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4d70:	f7ff fff8 	bl	d4d64 <_ZN5Print5printEc>
  n += print('\n');
   d4d74:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4d76:	4604      	mov	r4, r0
  n += print('\n');
   d4d78:	4628      	mov	r0, r5
   d4d7a:	f7ff fff3 	bl	d4d64 <_ZN5Print5printEc>
  return n;
}
   d4d7e:	4420      	add	r0, r4
   d4d80:	bd38      	pop	{r3, r4, r5, pc}

000d4d82 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4d82:	b530      	push	{r4, r5, lr}
   d4d84:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4d86:	2300      	movs	r3, #0
   d4d88:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4d8c:	2a01      	cmp	r2, #1
   d4d8e:	bf98      	it	ls
   d4d90:	220a      	movls	r2, #10
   d4d92:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4d94:	460d      	mov	r5, r1
   d4d96:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4d9a:	fb01 5312 	mls	r3, r1, r2, r5
   d4d9e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4da2:	2b09      	cmp	r3, #9
   d4da4:	bf94      	ite	ls
   d4da6:	3330      	addls	r3, #48	; 0x30
   d4da8:	3337      	addhi	r3, #55	; 0x37
   d4daa:	b2db      	uxtb	r3, r3
  } while(n);
   d4dac:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4dae:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4db2:	d9ef      	bls.n	d4d94 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4db4:	4621      	mov	r1, r4
   d4db6:	f7ff ffbf 	bl	d4d38 <_ZN5Print5writeEPKc>
}
   d4dba:	b00b      	add	sp, #44	; 0x2c
   d4dbc:	bd30      	pop	{r4, r5, pc}

000d4dbe <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4dbe:	2300      	movs	r3, #0
   d4dc0:	6840      	ldr	r0, [r0, #4]
   d4dc2:	461a      	mov	r2, r3
   d4dc4:	4619      	mov	r1, r3
   d4dc6:	f7ff be29 	b.w	d4a1c <network_on>
	...

000d4dcc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4dcc:	4b01      	ldr	r3, [pc, #4]	; (d4dd4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4dce:	4a02      	ldr	r2, [pc, #8]	; (d4dd8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4dd0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4dd2:	4770      	bx	lr
   d4dd4:	2003e66c 	.word	0x2003e66c
   d4dd8:	000d57f8 	.word	0x000d57f8

000d4ddc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4ddc:	4b02      	ldr	r3, [pc, #8]	; (d4de8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4dde:	681a      	ldr	r2, [r3, #0]
   d4de0:	4b02      	ldr	r3, [pc, #8]	; (d4dec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4de2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4de4:	4770      	bx	lr
   d4de6:	bf00      	nop
   d4de8:	2003e5a0 	.word	0x2003e5a0
   d4dec:	2003e670 	.word	0x2003e670

000d4df0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4df0:	2100      	movs	r1, #0
   d4df2:	f7ff bdd7 	b.w	d49a4 <system_delay_ms>

000d4df6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4df6:	b510      	push	{r4, lr}
   d4df8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4dfa:	f7ff ff69 	bl	d4cd0 <_ZNSt14_Function_baseD1Ev>
   d4dfe:	4620      	mov	r0, r4
   d4e00:	bd10      	pop	{r4, pc}
	...

000d4e04 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4e04:	4803      	ldr	r0, [pc, #12]	; (d4e14 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4e06:	4a04      	ldr	r2, [pc, #16]	; (d4e18 <_GLOBAL__sub_I_RGB+0x14>)
   d4e08:	4904      	ldr	r1, [pc, #16]	; (d4e1c <_GLOBAL__sub_I_RGB+0x18>)
   d4e0a:	2300      	movs	r3, #0
   d4e0c:	6083      	str	r3, [r0, #8]
   d4e0e:	f000 bc3d 	b.w	d568c <__aeabi_atexit>
   d4e12:	bf00      	nop
   d4e14:	2003e674 	.word	0x2003e674
   d4e18:	2003e608 	.word	0x2003e608
   d4e1c:	000d4df7 	.word	0x000d4df7

000d4e20 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4e20:	4b01      	ldr	r3, [pc, #4]	; (d4e28 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4e22:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4e24:	4770      	bx	lr
   d4e26:	bf00      	nop
   d4e28:	2003e5a4 	.word	0x2003e5a4

000d4e2c <serialEventRun>:
{
   d4e2c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4e2e:	4b0b      	ldr	r3, [pc, #44]	; (d4e5c <serialEventRun+0x30>)
   d4e30:	b143      	cbz	r3, d4e44 <serialEventRun+0x18>
   d4e32:	f000 f95b 	bl	d50ec <_Z16_fetch_usbserialv>
   d4e36:	6803      	ldr	r3, [r0, #0]
   d4e38:	691b      	ldr	r3, [r3, #16]
   d4e3a:	4798      	blx	r3
   d4e3c:	2800      	cmp	r0, #0
   d4e3e:	dd01      	ble.n	d4e44 <serialEventRun+0x18>
        serialEvent();
   d4e40:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4e44:	4b06      	ldr	r3, [pc, #24]	; (d4e60 <serialEventRun+0x34>)
   d4e46:	b143      	cbz	r3, d4e5a <serialEventRun+0x2e>
   d4e48:	f000 f9ce 	bl	d51e8 <_Z22__fetch_global_Serial1v>
   d4e4c:	6803      	ldr	r3, [r0, #0]
   d4e4e:	691b      	ldr	r3, [r3, #16]
   d4e50:	4798      	blx	r3
   d4e52:	2800      	cmp	r0, #0
   d4e54:	dd01      	ble.n	d4e5a <serialEventRun+0x2e>
        serialEvent1();
   d4e56:	f3af 8000 	nop.w
}
   d4e5a:	bd08      	pop	{r3, pc}
	...

000d4e64 <_post_loop>:
{
   d4e64:	b508      	push	{r3, lr}
	serialEventRun();
   d4e66:	f7ff ffe1 	bl	d4e2c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4e6a:	f7ff fc53 	bl	d4714 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4e6e:	4b01      	ldr	r3, [pc, #4]	; (d4e74 <_post_loop+0x10>)
   d4e70:	6018      	str	r0, [r3, #0]
}
   d4e72:	bd08      	pop	{r3, pc}
   d4e74:	2003e7d4 	.word	0x2003e7d4

000d4e78 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4e78:	4802      	ldr	r0, [pc, #8]	; (d4e84 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4e7a:	4a03      	ldr	r2, [pc, #12]	; (d4e88 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4e7c:	4903      	ldr	r1, [pc, #12]	; (d4e8c <_Z33system_initialize_user_backup_ramv+0x14>)
   d4e7e:	1a12      	subs	r2, r2, r0
   d4e80:	f000 bc1c 	b.w	d56bc <memcpy>
   d4e84:	2003f400 	.word	0x2003f400
   d4e88:	2003f404 	.word	0x2003f404
   d4e8c:	000d5960 	.word	0x000d5960

000d4e90 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4e90:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4e92:	2300      	movs	r3, #0
   d4e94:	9300      	str	r3, [sp, #0]
   d4e96:	461a      	mov	r2, r3
   d4e98:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4e9c:	f7ff fd94 	bl	d49c8 <system_ctrl_set_result>
}
   d4ea0:	b003      	add	sp, #12
   d4ea2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4ea8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4ea8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4eaa:	8843      	ldrh	r3, [r0, #2]
   d4eac:	2b0a      	cmp	r3, #10
   d4eae:	d008      	beq.n	d4ec2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4eb0:	2b50      	cmp	r3, #80	; 0x50
   d4eb2:	d10b      	bne.n	d4ecc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4eb4:	4b09      	ldr	r3, [pc, #36]	; (d4edc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4eb6:	681b      	ldr	r3, [r3, #0]
   d4eb8:	b14b      	cbz	r3, d4ece <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4eba:	b003      	add	sp, #12
   d4ebc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4ec0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4ec2:	f7ff ffe5 	bl	d4e90 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4ec6:	b003      	add	sp, #12
   d4ec8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4ecc:	2300      	movs	r3, #0
   d4ece:	9300      	str	r3, [sp, #0]
   d4ed0:	461a      	mov	r2, r3
   d4ed2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4ed6:	f7ff fd77 	bl	d49c8 <system_ctrl_set_result>
}
   d4eda:	e7f4      	b.n	d4ec6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4edc:	2003e688 	.word	0x2003e688

000d4ee0 <module_user_init_hook>:
{
   d4ee0:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4ee2:	4c12      	ldr	r4, [pc, #72]	; (d4f2c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4ee4:	4812      	ldr	r0, [pc, #72]	; (d4f30 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4ee6:	4d13      	ldr	r5, [pc, #76]	; (d4f34 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4ee8:	2100      	movs	r1, #0
   d4eea:	f7ff fdef 	bl	d4acc <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4eee:	6823      	ldr	r3, [r4, #0]
   d4ef0:	42ab      	cmp	r3, r5
   d4ef2:	4b11      	ldr	r3, [pc, #68]	; (d4f38 <module_user_init_hook+0x58>)
   d4ef4:	bf0c      	ite	eq
   d4ef6:	2201      	moveq	r2, #1
   d4ef8:	2200      	movne	r2, #0
   d4efa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4efc:	d002      	beq.n	d4f04 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d4efe:	f7ff ffbb 	bl	d4e78 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4f02:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4f04:	f7ff fbfe 	bl	d4704 <HAL_RNG_GetRandomNumber>
   d4f08:	4604      	mov	r4, r0
    srand(seed);
   d4f0a:	f000 fbed 	bl	d56e8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4f0e:	4b0b      	ldr	r3, [pc, #44]	; (d4f3c <module_user_init_hook+0x5c>)
   d4f10:	b113      	cbz	r3, d4f18 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d4f12:	4620      	mov	r0, r4
   d4f14:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4f18:	2100      	movs	r1, #0
   d4f1a:	4808      	ldr	r0, [pc, #32]	; (d4f3c <module_user_init_hook+0x5c>)
   d4f1c:	f7ff fdbe 	bl	d4a9c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4f24:	4806      	ldr	r0, [pc, #24]	; (d4f40 <module_user_init_hook+0x60>)
   d4f26:	2100      	movs	r1, #0
   d4f28:	f7ff bd44 	b.w	d49b4 <system_ctrl_set_app_request_handler>
   d4f2c:	2003f400 	.word	0x2003f400
   d4f30:	000d4e21 	.word	0x000d4e21
   d4f34:	9a271c1e 	.word	0x9a271c1e
   d4f38:	2003e684 	.word	0x2003e684
   d4f3c:	00000000 	.word	0x00000000
   d4f40:	000d4ea9 	.word	0x000d4ea9

000d4f44 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4f44:	4770      	bx	lr

000d4f46 <_ZN9IPAddressD0Ev>:
   d4f46:	b510      	push	{r4, lr}
   d4f48:	2118      	movs	r1, #24
   d4f4a:	4604      	mov	r4, r0
   d4f4c:	f000 fba3 	bl	d5696 <_ZdlPvj>
   d4f50:	4620      	mov	r0, r4
   d4f52:	bd10      	pop	{r4, pc}

000d4f54 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4f54:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4f56:	7d03      	ldrb	r3, [r0, #20]
   d4f58:	2b06      	cmp	r3, #6
{
   d4f5a:	b08d      	sub	sp, #52	; 0x34
   d4f5c:	460e      	mov	r6, r1
   d4f5e:	f100 0704 	add.w	r7, r0, #4
   d4f62:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4f66:	d012      	beq.n	d4f8e <_ZNK9IPAddress7printToER5Print+0x3a>
   d4f68:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4f6c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4f70:	220a      	movs	r2, #10
   d4f72:	4630      	mov	r0, r6
   d4f74:	f7ff ff05 	bl	d4d82 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4f78:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4f7a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4f7c:	d019      	beq.n	d4fb2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4f7e:	2c00      	cmp	r4, #0
   d4f80:	d0f4      	beq.n	d4f6c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4f82:	212e      	movs	r1, #46	; 0x2e
   d4f84:	4630      	mov	r0, r6
   d4f86:	f7ff feed 	bl	d4d64 <_ZN5Print5printEc>
   d4f8a:	4404      	add	r4, r0
   d4f8c:	e7ee      	b.n	d4f6c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4f8e:	232f      	movs	r3, #47	; 0x2f
   d4f90:	466a      	mov	r2, sp
   d4f92:	4639      	mov	r1, r7
   d4f94:	200a      	movs	r0, #10
		buf[0] = 0;
   d4f96:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4f9a:	f7ff fbd3 	bl	d4744 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4f9e:	4668      	mov	r0, sp
   d4fa0:	f000 fbc6 	bl	d5730 <strlen>
   d4fa4:	6833      	ldr	r3, [r6, #0]
   d4fa6:	4602      	mov	r2, r0
   d4fa8:	68db      	ldr	r3, [r3, #12]
   d4faa:	4669      	mov	r1, sp
   d4fac:	4630      	mov	r0, r6
   d4fae:	4798      	blx	r3
   d4fb0:	4604      	mov	r4, r0
    }
    return n;
}
   d4fb2:	4620      	mov	r0, r4
   d4fb4:	b00d      	add	sp, #52	; 0x34
   d4fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4fb8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4fb8:	b510      	push	{r4, lr}
   d4fba:	4b05      	ldr	r3, [pc, #20]	; (d4fd0 <_ZN9IPAddressC1Ev+0x18>)
   d4fbc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4fbe:	2211      	movs	r2, #17
   d4fc0:	f840 3b04 	str.w	r3, [r0], #4
   d4fc4:	2100      	movs	r1, #0
   d4fc6:	f000 fb87 	bl	d56d8 <memset>
}
   d4fca:	4620      	mov	r0, r4
   d4fcc:	bd10      	pop	{r4, pc}
   d4fce:	bf00      	nop
   d4fd0:	000d5820 	.word	0x000d5820

000d4fd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4fd4:	4603      	mov	r3, r0
   d4fd6:	4a07      	ldr	r2, [pc, #28]	; (d4ff4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4fd8:	b510      	push	{r4, lr}
   d4fda:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4fde:	f101 0210 	add.w	r2, r1, #16
   d4fe2:	f851 4b04 	ldr.w	r4, [r1], #4
   d4fe6:	f843 4b04 	str.w	r4, [r3], #4
   d4fea:	4291      	cmp	r1, r2
   d4fec:	d1f9      	bne.n	d4fe2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4fee:	780a      	ldrb	r2, [r1, #0]
   d4ff0:	701a      	strb	r2, [r3, #0]
}
   d4ff2:	bd10      	pop	{r4, pc}
   d4ff4:	000d5820 	.word	0x000d5820

000d4ff8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4ff8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4ffa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4ffe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5002:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5006:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d500a:	2304      	movs	r3, #4
   d500c:	6041      	str	r1, [r0, #4]
   d500e:	7503      	strb	r3, [r0, #20]
}
   d5010:	bd10      	pop	{r4, pc}
	...

000d5014 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d5014:	b513      	push	{r0, r1, r4, lr}
   d5016:	4b05      	ldr	r3, [pc, #20]	; (d502c <_ZN9IPAddressC1EPKh+0x18>)
   d5018:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d501a:	78cb      	ldrb	r3, [r1, #3]
   d501c:	9300      	str	r3, [sp, #0]
   d501e:	788b      	ldrb	r3, [r1, #2]
   d5020:	784a      	ldrb	r2, [r1, #1]
   d5022:	7809      	ldrb	r1, [r1, #0]
   d5024:	f7ff ffe8 	bl	d4ff8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5028:	b002      	add	sp, #8
   d502a:	bd10      	pop	{r4, pc}
   d502c:	000d5820 	.word	0x000d5820

000d5030 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5030:	7441      	strb	r1, [r0, #17]
}
   d5032:	4770      	bx	lr

000d5034 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5034:	4770      	bx	lr

000d5036 <_ZN9USBSerial4readEv>:
{
   d5036:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5038:	2100      	movs	r1, #0
   d503a:	7c00      	ldrb	r0, [r0, #16]
   d503c:	f7ff fc92 	bl	d4964 <HAL_USB_USART_Receive_Data>
}
   d5040:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5044:	bd08      	pop	{r3, pc}

000d5046 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5046:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5048:	2101      	movs	r1, #1
   d504a:	7c00      	ldrb	r0, [r0, #16]
   d504c:	f7ff fc8a 	bl	d4964 <HAL_USB_USART_Receive_Data>
}
   d5050:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5054:	bd08      	pop	{r3, pc}

000d5056 <_ZN9USBSerial17availableForWriteEv>:
{
   d5056:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5058:	7c00      	ldrb	r0, [r0, #16]
   d505a:	f7ff fc7b 	bl	d4954 <HAL_USB_USART_Available_Data_For_Write>
}
   d505e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5062:	bd08      	pop	{r3, pc}

000d5064 <_ZN9USBSerial9availableEv>:
{
   d5064:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5066:	7c00      	ldrb	r0, [r0, #16]
   d5068:	f7ff fc6c 	bl	d4944 <HAL_USB_USART_Available_Data>
}
   d506c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5070:	bd08      	pop	{r3, pc}

000d5072 <_ZN9USBSerial5writeEh>:
{
   d5072:	b513      	push	{r0, r1, r4, lr}
   d5074:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5076:	7c00      	ldrb	r0, [r0, #16]
{
   d5078:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d507a:	f7ff fc6b 	bl	d4954 <HAL_USB_USART_Available_Data_For_Write>
   d507e:	2800      	cmp	r0, #0
   d5080:	9901      	ldr	r1, [sp, #4]
   d5082:	dc01      	bgt.n	d5088 <_ZN9USBSerial5writeEh+0x16>
   d5084:	7c60      	ldrb	r0, [r4, #17]
   d5086:	b120      	cbz	r0, d5092 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5088:	7c20      	ldrb	r0, [r4, #16]
   d508a:	f7ff fc73 	bl	d4974 <HAL_USB_USART_Send_Data>
   d508e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5092:	b002      	add	sp, #8
   d5094:	bd10      	pop	{r4, pc}

000d5096 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5096:	7c00      	ldrb	r0, [r0, #16]
   d5098:	f7ff bc74 	b.w	d4984 <HAL_USB_USART_Flush_Data>

000d509c <_ZN9USBSerialD0Ev>:
   d509c:	b510      	push	{r4, lr}
   d509e:	2114      	movs	r1, #20
   d50a0:	4604      	mov	r4, r0
   d50a2:	f000 faf8 	bl	d5696 <_ZdlPvj>
   d50a6:	4620      	mov	r0, r4
   d50a8:	bd10      	pop	{r4, pc}
	...

000d50ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d50ac:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d50ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d50b2:	4604      	mov	r4, r0
   d50b4:	4608      	mov	r0, r1
   d50b6:	2100      	movs	r1, #0
   d50b8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d50bc:	4b04      	ldr	r3, [pc, #16]	; (d50d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d50be:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d50c0:	2301      	movs	r3, #1
  _serial = serial;
   d50c2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d50c4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d50c6:	4611      	mov	r1, r2
   d50c8:	f7ff fc2c 	bl	d4924 <HAL_USB_USART_Init>
}
   d50cc:	4620      	mov	r0, r4
   d50ce:	bd10      	pop	{r4, pc}
   d50d0:	000d5834 	.word	0x000d5834

000d50d4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d50d4:	7c00      	ldrb	r0, [r0, #16]
   d50d6:	2200      	movs	r2, #0
   d50d8:	f7ff bc2c 	b.w	d4934 <HAL_USB_USART_Begin>

000d50dc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d50dc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d50de:	2214      	movs	r2, #20
{
   d50e0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d50e2:	2100      	movs	r1, #0
   d50e4:	f000 faf8 	bl	d56d8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d50e8:	4620      	mov	r0, r4
   d50ea:	bd10      	pop	{r4, pc}

000d50ec <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d50ec:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d50ee:	4c10      	ldr	r4, [pc, #64]	; (d5130 <_Z16_fetch_usbserialv+0x44>)
{
   d50f0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d50f2:	a803      	add	r0, sp, #12
   d50f4:	f7ff fff2 	bl	d50dc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d50f8:	7821      	ldrb	r1, [r4, #0]
   d50fa:	f3bf 8f5b 	dmb	ish
   d50fe:	f011 0101 	ands.w	r1, r1, #1
   d5102:	d111      	bne.n	d5128 <_Z16_fetch_usbserialv+0x3c>
   d5104:	4620      	mov	r0, r4
   d5106:	9101      	str	r1, [sp, #4]
   d5108:	f7fe ffc7 	bl	d409a <__cxa_guard_acquire>
   d510c:	9901      	ldr	r1, [sp, #4]
   d510e:	b158      	cbz	r0, d5128 <_Z16_fetch_usbserialv+0x3c>
   d5110:	aa03      	add	r2, sp, #12
   d5112:	4808      	ldr	r0, [pc, #32]	; (d5134 <_Z16_fetch_usbserialv+0x48>)
   d5114:	f7ff ffca 	bl	d50ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5118:	4620      	mov	r0, r4
   d511a:	f7fe ffc3 	bl	d40a4 <__cxa_guard_release>
   d511e:	4a06      	ldr	r2, [pc, #24]	; (d5138 <_Z16_fetch_usbserialv+0x4c>)
   d5120:	4906      	ldr	r1, [pc, #24]	; (d513c <_Z16_fetch_usbserialv+0x50>)
   d5122:	4804      	ldr	r0, [pc, #16]	; (d5134 <_Z16_fetch_usbserialv+0x48>)
   d5124:	f000 fab2 	bl	d568c <__aeabi_atexit>
	return _usbserial;
}
   d5128:	4802      	ldr	r0, [pc, #8]	; (d5134 <_Z16_fetch_usbserialv+0x48>)
   d512a:	b008      	add	sp, #32
   d512c:	bd10      	pop	{r4, pc}
   d512e:	bf00      	nop
   d5130:	2003e68c 	.word	0x2003e68c
   d5134:	2003e690 	.word	0x2003e690
   d5138:	2003e608 	.word	0x2003e608
   d513c:	000d5035 	.word	0x000d5035

000d5140 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5140:	4770      	bx	lr

000d5142 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5142:	7441      	strb	r1, [r0, #17]
}
   d5144:	4770      	bx	lr

000d5146 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5146:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5148:	7c00      	ldrb	r0, [r0, #16]
   d514a:	f7ff fb3b 	bl	d47c4 <hal_usart_available_data_for_write>
}
   d514e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5152:	bd08      	pop	{r3, pc}

000d5154 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5154:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5156:	7c00      	ldrb	r0, [r0, #16]
   d5158:	f7ff fb0c 	bl	d4774 <hal_usart_available>
}
   d515c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5160:	bd08      	pop	{r3, pc}

000d5162 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5162:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5164:	7c00      	ldrb	r0, [r0, #16]
   d5166:	f7ff fb15 	bl	d4794 <hal_usart_peek>
}
   d516a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d516e:	bd08      	pop	{r3, pc}

000d5170 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5170:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5172:	7c00      	ldrb	r0, [r0, #16]
   d5174:	f7ff fb06 	bl	d4784 <hal_usart_read>
}
   d5178:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d517c:	bd08      	pop	{r3, pc}

000d517e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d517e:	7c00      	ldrb	r0, [r0, #16]
   d5180:	f7ff bb10 	b.w	d47a4 <hal_usart_flush>

000d5184 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5184:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5186:	7c45      	ldrb	r5, [r0, #17]
{
   d5188:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d518a:	b12d      	cbz	r5, d5198 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d518c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d518e:	b003      	add	sp, #12
   d5190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5194:	f7ff bae6 	b.w	d4764 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5198:	7c00      	ldrb	r0, [r0, #16]
   d519a:	9101      	str	r1, [sp, #4]
   d519c:	f7ff fb12 	bl	d47c4 <hal_usart_available_data_for_write>
   d51a0:	2800      	cmp	r0, #0
   d51a2:	9901      	ldr	r1, [sp, #4]
   d51a4:	dcf2      	bgt.n	d518c <_ZN11USARTSerial5writeEh+0x8>
}
   d51a6:	4628      	mov	r0, r5
   d51a8:	b003      	add	sp, #12
   d51aa:	bd30      	pop	{r4, r5, pc}

000d51ac <_ZN11USARTSerialD0Ev>:
   d51ac:	b510      	push	{r4, lr}
   d51ae:	2114      	movs	r1, #20
   d51b0:	4604      	mov	r4, r0
   d51b2:	f000 fa70 	bl	d5696 <_ZdlPvj>
   d51b6:	4620      	mov	r0, r4
   d51b8:	bd10      	pop	{r4, pc}
	...

000d51bc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d51bc:	b510      	push	{r4, lr}
   d51be:	f04f 0c00 	mov.w	ip, #0
   d51c2:	4604      	mov	r4, r0
   d51c4:	4608      	mov	r0, r1
   d51c6:	4611      	mov	r1, r2
   d51c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d51cc:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d51d0:	4a04      	ldr	r2, [pc, #16]	; (d51e4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d51d2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d51d4:	2201      	movs	r2, #1
  _serial = serial;
   d51d6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d51d8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d51da:	461a      	mov	r2, r3
   d51dc:	f7ff faba 	bl	d4754 <hal_usart_init>
}
   d51e0:	4620      	mov	r0, r4
   d51e2:	bd10      	pop	{r4, pc}
   d51e4:	000d5864 	.word	0x000d5864

000d51e8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d51e8:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d51ea:	4c0e      	ldr	r4, [pc, #56]	; (d5224 <_Z22__fetch_global_Serial1v+0x3c>)
   d51ec:	7821      	ldrb	r1, [r4, #0]
   d51ee:	f3bf 8f5b 	dmb	ish
   d51f2:	f011 0101 	ands.w	r1, r1, #1
   d51f6:	d112      	bne.n	d521e <_Z22__fetch_global_Serial1v+0x36>
   d51f8:	4620      	mov	r0, r4
   d51fa:	9101      	str	r1, [sp, #4]
   d51fc:	f7fe ff4d 	bl	d409a <__cxa_guard_acquire>
   d5200:	9901      	ldr	r1, [sp, #4]
   d5202:	b160      	cbz	r0, d521e <_Z22__fetch_global_Serial1v+0x36>
   d5204:	4a08      	ldr	r2, [pc, #32]	; (d5228 <_Z22__fetch_global_Serial1v+0x40>)
   d5206:	4b09      	ldr	r3, [pc, #36]	; (d522c <_Z22__fetch_global_Serial1v+0x44>)
   d5208:	4809      	ldr	r0, [pc, #36]	; (d5230 <_Z22__fetch_global_Serial1v+0x48>)
   d520a:	f7ff ffd7 	bl	d51bc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d520e:	4620      	mov	r0, r4
   d5210:	f7fe ff48 	bl	d40a4 <__cxa_guard_release>
   d5214:	4a07      	ldr	r2, [pc, #28]	; (d5234 <_Z22__fetch_global_Serial1v+0x4c>)
   d5216:	4908      	ldr	r1, [pc, #32]	; (d5238 <_Z22__fetch_global_Serial1v+0x50>)
   d5218:	4805      	ldr	r0, [pc, #20]	; (d5230 <_Z22__fetch_global_Serial1v+0x48>)
   d521a:	f000 fa37 	bl	d568c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d521e:	4804      	ldr	r0, [pc, #16]	; (d5230 <_Z22__fetch_global_Serial1v+0x48>)
   d5220:	b002      	add	sp, #8
   d5222:	bd10      	pop	{r4, pc}
   d5224:	2003e6a4 	.word	0x2003e6a4
   d5228:	2003e6a8 	.word	0x2003e6a8
   d522c:	2003e72c 	.word	0x2003e72c
   d5230:	2003e7b0 	.word	0x2003e7b0
   d5234:	2003e608 	.word	0x2003e608
   d5238:	000d5141 	.word	0x000d5141

000d523c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d523c:	4770      	bx	lr

000d523e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d523e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5240:	4606      	mov	r6, r0
   d5242:	4615      	mov	r5, r2
   d5244:	460c      	mov	r4, r1
   d5246:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5248:	42bc      	cmp	r4, r7
   d524a:	d006      	beq.n	d525a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d524c:	6833      	ldr	r3, [r6, #0]
   d524e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5252:	689b      	ldr	r3, [r3, #8]
   d5254:	4630      	mov	r0, r6
   d5256:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5258:	e7f6      	b.n	d5248 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d525a:	4628      	mov	r0, r5
   d525c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d525e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d525e:	7c00      	ldrb	r0, [r0, #16]
   d5260:	2200      	movs	r2, #0
   d5262:	f7ff bacf 	b.w	d4804 <hal_i2c_write>

000d5266 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5266:	7c00      	ldrb	r0, [r0, #16]
   d5268:	2100      	movs	r1, #0
   d526a:	f7ff bad3 	b.w	d4814 <hal_i2c_available>

000d526e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d526e:	7c00      	ldrb	r0, [r0, #16]
   d5270:	2100      	movs	r1, #0
   d5272:	f7ff bad7 	b.w	d4824 <hal_i2c_read>

000d5276 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5276:	7c00      	ldrb	r0, [r0, #16]
   d5278:	2100      	movs	r1, #0
   d527a:	f7ff badb 	b.w	d4834 <hal_i2c_peek>

000d527e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d527e:	7c00      	ldrb	r0, [r0, #16]
   d5280:	2100      	movs	r1, #0
   d5282:	f7ff badf 	b.w	d4844 <hal_i2c_flush>

000d5286 <_ZN7TwoWireD0Ev>:
   d5286:	b510      	push	{r4, lr}
   d5288:	2114      	movs	r1, #20
   d528a:	4604      	mov	r4, r0
   d528c:	f000 fa03 	bl	d5696 <_ZdlPvj>
   d5290:	4620      	mov	r0, r4
   d5292:	bd10      	pop	{r4, pc}

000d5294 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5294:	b510      	push	{r4, lr}
   d5296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d529a:	4604      	mov	r4, r0
   d529c:	4608      	mov	r0, r1
   d529e:	2100      	movs	r1, #0
   d52a0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d52a4:	4b03      	ldr	r3, [pc, #12]	; (d52b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d52a6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d52a8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d52aa:	4611      	mov	r1, r2
   d52ac:	f7ff fada 	bl	d4864 <hal_i2c_init>
}
   d52b0:	4620      	mov	r0, r4
   d52b2:	bd10      	pop	{r4, pc}
   d52b4:	000d5894 	.word	0x000d5894

000d52b8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d52b8:	2300      	movs	r3, #0
   d52ba:	7c00      	ldrb	r0, [r0, #16]
   d52bc:	461a      	mov	r2, r3
   d52be:	4619      	mov	r1, r3
   d52c0:	f7ff ba88 	b.w	d47d4 <hal_i2c_begin>

000d52c4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d52c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d52c6:	2200      	movs	r2, #0
   d52c8:	2314      	movs	r3, #20
   d52ca:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d52ce:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d52d2:	780b      	ldrb	r3, [r1, #0]
   d52d4:	f88d 3008 	strb.w	r3, [sp, #8]
   d52d8:	684b      	ldr	r3, [r1, #4]
   d52da:	9303      	str	r3, [sp, #12]
   d52dc:	68cb      	ldr	r3, [r1, #12]
   d52de:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d52e0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d52e2:	7a0b      	ldrb	r3, [r1, #8]
   d52e4:	9305      	str	r3, [sp, #20]
   d52e6:	a901      	add	r1, sp, #4
   d52e8:	f7ff fac4 	bl	d4874 <hal_i2c_request_ex>
}
   d52ec:	b007      	add	sp, #28
   d52ee:	f85d fb04 	ldr.w	pc, [sp], #4

000d52f2 <_ZN7TwoWire11requestFromEhjh>:
{
   d52f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d52f4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d52f6:	f88d 1000 	strb.w	r1, [sp]
   d52fa:	f04f 0164 	mov.w	r1, #100	; 0x64
   d52fe:	9103      	str	r1, [sp, #12]
   d5300:	bf18      	it	ne
   d5302:	2301      	movne	r3, #1
   d5304:	4669      	mov	r1, sp
    size_ = size;
   d5306:	9201      	str	r2, [sp, #4]
   d5308:	f88d 3008 	strb.w	r3, [sp, #8]
   d530c:	f7ff ffda 	bl	d52c4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5310:	b005      	add	sp, #20
   d5312:	f85d fb04 	ldr.w	pc, [sp], #4

000d5316 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d5316:	2301      	movs	r3, #1
   d5318:	f7ff bfeb 	b.w	d52f2 <_ZN7TwoWire11requestFromEhjh>

000d531c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d531c:	7c00      	ldrb	r0, [r0, #16]
   d531e:	2200      	movs	r2, #0
   d5320:	f7ff ba60 	b.w	d47e4 <hal_i2c_begin_transmission>

000d5324 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d5324:	b2c9      	uxtb	r1, r1
   d5326:	f7ff bff9 	b.w	d531c <_ZN7TwoWire17beginTransmissionEh>

000d532a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d532a:	7c00      	ldrb	r0, [r0, #16]
   d532c:	2200      	movs	r2, #0
   d532e:	f7ff ba61 	b.w	d47f4 <hal_i2c_end_transmission>

000d5332 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d5332:	2101      	movs	r1, #1
   d5334:	f7ff bff9 	b.w	d532a <_ZN7TwoWire15endTransmissionEh>

000d5338 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5338:	2200      	movs	r2, #0
   d533a:	6840      	ldr	r0, [r0, #4]
   d533c:	4611      	mov	r1, r2
   d533e:	f7ff bb65 	b.w	d4a0c <network_ready>

000d5342 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5342:	2200      	movs	r2, #0
   d5344:	6840      	ldr	r0, [r0, #4]
   d5346:	4611      	mov	r1, r2
   d5348:	f7ff bb80 	b.w	d4a4c <network_listening>

000d534c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d534c:	2200      	movs	r2, #0
   d534e:	6840      	ldr	r0, [r0, #4]
   d5350:	4611      	mov	r1, r2
   d5352:	f7ff bb8b 	b.w	d4a6c <network_get_listen_timeout>

000d5356 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5356:	6840      	ldr	r0, [r0, #4]
   d5358:	2200      	movs	r2, #0
   d535a:	f7ff bb7f 	b.w	d4a5c <network_set_listen_timeout>

000d535e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d535e:	6840      	ldr	r0, [r0, #4]
   d5360:	2200      	movs	r2, #0
   d5362:	f081 0101 	eor.w	r1, r1, #1
   d5366:	f7ff bb69 	b.w	d4a3c <network_listen>

000d536a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d536a:	2300      	movs	r3, #0
   d536c:	6840      	ldr	r0, [r0, #4]
   d536e:	461a      	mov	r2, r3
   d5370:	4619      	mov	r1, r3
   d5372:	f7ff bb5b 	b.w	d4a2c <network_off>

000d5376 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5376:	2200      	movs	r2, #0
   d5378:	6840      	ldr	r0, [r0, #4]
   d537a:	4611      	mov	r1, r2
   d537c:	f7ff bb36 	b.w	d49ec <network_connecting>

000d5380 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5380:	6840      	ldr	r0, [r0, #4]
   d5382:	2200      	movs	r2, #0
   d5384:	2102      	movs	r1, #2
   d5386:	f7ff bb39 	b.w	d49fc <network_disconnect>

000d538a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d538a:	2300      	movs	r3, #0
   d538c:	6840      	ldr	r0, [r0, #4]
   d538e:	461a      	mov	r2, r3
   d5390:	f7ff bb24 	b.w	d49dc <network_connect>

000d5394 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5394:	4b02      	ldr	r3, [pc, #8]	; (d53a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5396:	2204      	movs	r2, #4
   d5398:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d539a:	4a02      	ldr	r2, [pc, #8]	; (d53a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d539c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d539e:	4770      	bx	lr
   d53a0:	2003e7c4 	.word	0x2003e7c4
   d53a4:	000d58bc 	.word	0x000d58bc

000d53a8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d53a8:	2300      	movs	r3, #0
   d53aa:	6840      	ldr	r0, [r0, #4]
   d53ac:	461a      	mov	r2, r3
   d53ae:	f7ff bb15 	b.w	d49dc <network_connect>

000d53b2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d53b2:	6840      	ldr	r0, [r0, #4]
   d53b4:	2200      	movs	r2, #0
   d53b6:	2102      	movs	r1, #2
   d53b8:	f7ff bb20 	b.w	d49fc <network_disconnect>

000d53bc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d53bc:	2200      	movs	r2, #0
   d53be:	6840      	ldr	r0, [r0, #4]
   d53c0:	4611      	mov	r1, r2
   d53c2:	f7ff bb13 	b.w	d49ec <network_connecting>

000d53c6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d53c6:	2200      	movs	r2, #0
   d53c8:	6840      	ldr	r0, [r0, #4]
   d53ca:	4611      	mov	r1, r2
   d53cc:	f7ff bb1e 	b.w	d4a0c <network_ready>

000d53d0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d53d0:	2300      	movs	r3, #0
   d53d2:	6840      	ldr	r0, [r0, #4]
   d53d4:	461a      	mov	r2, r3
   d53d6:	4619      	mov	r1, r3
   d53d8:	f7ff bb20 	b.w	d4a1c <network_on>

000d53dc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d53dc:	2300      	movs	r3, #0
   d53de:	6840      	ldr	r0, [r0, #4]
   d53e0:	461a      	mov	r2, r3
   d53e2:	4619      	mov	r1, r3
   d53e4:	f7ff bb22 	b.w	d4a2c <network_off>

000d53e8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d53e8:	6840      	ldr	r0, [r0, #4]
   d53ea:	2100      	movs	r1, #0
   d53ec:	f7ff bb46 	b.w	d4a7c <network_is_on>

000d53f0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d53f0:	6840      	ldr	r0, [r0, #4]
   d53f2:	2100      	movs	r1, #0
   d53f4:	f7ff bb4a 	b.w	d4a8c <network_is_off>

000d53f8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d53f8:	6840      	ldr	r0, [r0, #4]
   d53fa:	2200      	movs	r2, #0
   d53fc:	f081 0101 	eor.w	r1, r1, #1
   d5400:	f7ff bb1c 	b.w	d4a3c <network_listen>

000d5404 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5404:	6840      	ldr	r0, [r0, #4]
   d5406:	2200      	movs	r2, #0
   d5408:	f7ff bb28 	b.w	d4a5c <network_set_listen_timeout>

000d540c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d540c:	2200      	movs	r2, #0
   d540e:	6840      	ldr	r0, [r0, #4]
   d5410:	4611      	mov	r1, r2
   d5412:	f7ff bb2b 	b.w	d4a6c <network_get_listen_timeout>

000d5416 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5416:	2200      	movs	r2, #0
   d5418:	6840      	ldr	r0, [r0, #4]
   d541a:	4611      	mov	r1, r2
   d541c:	f7ff bb16 	b.w	d4a4c <network_listening>

000d5420 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5424:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5426:	b095      	sub	sp, #84	; 0x54
   d5428:	4616      	mov	r6, r2
   d542a:	460d      	mov	r5, r1
   d542c:	4607      	mov	r7, r0
    IPAddress addr;
   d542e:	f7ff fdc3 	bl	d4fb8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5432:	4621      	mov	r1, r4
   d5434:	2218      	movs	r2, #24
   d5436:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5438:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d543a:	f000 f94d 	bl	d56d8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d543e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5440:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5444:	4621      	mov	r1, r4
   d5446:	466b      	mov	r3, sp
   d5448:	aa0c      	add	r2, sp, #48	; 0x30
   d544a:	4630      	mov	r0, r6
   d544c:	f7ff f932 	bl	d46b4 <netdb_getaddrinfo>
    if (!r) {
   d5450:	4604      	mov	r4, r0
   d5452:	2800      	cmp	r0, #0
   d5454:	d14c      	bne.n	d54f0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5456:	4602      	mov	r2, r0
   d5458:	2101      	movs	r1, #1
   d545a:	6868      	ldr	r0, [r5, #4]
   d545c:	f7ff fad6 	bl	d4a0c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5460:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5462:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5464:	4622      	mov	r2, r4
   d5466:	6868      	ldr	r0, [r5, #4]
   d5468:	f7ff fad0 	bl	d4a0c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d546c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d546e:	4681      	mov	r9, r0
        bool ok = false;
   d5470:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5472:	2e00      	cmp	r6, #0
   d5474:	d03c      	beq.n	d54f0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d5476:	2900      	cmp	r1, #0
   d5478:	d13a      	bne.n	d54f0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d547a:	6873      	ldr	r3, [r6, #4]
   d547c:	2b02      	cmp	r3, #2
   d547e:	d003      	beq.n	d5488 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5480:	2b0a      	cmp	r3, #10
   d5482:	d011      	beq.n	d54a8 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5484:	69f6      	ldr	r6, [r6, #28]
   d5486:	e7f4      	b.n	d5472 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5488:	f1b8 0f00 	cmp.w	r8, #0
   d548c:	d00a      	beq.n	d54a4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d548e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d5490:	a806      	add	r0, sp, #24
   d5492:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d5494:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d5496:	f7ff fdbd 	bl	d5014 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d549a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d549c:	1d3c      	adds	r4, r7, #4
   d549e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d54a0:	682b      	ldr	r3, [r5, #0]
   d54a2:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d54a4:	4641      	mov	r1, r8
   d54a6:	e7ed      	b.n	d5484 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d54a8:	f1b9 0f00 	cmp.w	r9, #0
   d54ac:	d101      	bne.n	d54b2 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d54ae:	4649      	mov	r1, r9
   d54b0:	e7e8      	b.n	d5484 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d54b2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d54b4:	2210      	movs	r2, #16
   d54b6:	a801      	add	r0, sp, #4
   d54b8:	f000 f90e 	bl	d56d8 <memset>
                    a.v = 6;
   d54bc:	2306      	movs	r3, #6
   d54be:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d54c2:	ad01      	add	r5, sp, #4
   d54c4:	f104 0308 	add.w	r3, r4, #8
   d54c8:	3418      	adds	r4, #24
   d54ca:	6818      	ldr	r0, [r3, #0]
   d54cc:	6859      	ldr	r1, [r3, #4]
   d54ce:	462a      	mov	r2, r5
   d54d0:	c203      	stmia	r2!, {r0, r1}
   d54d2:	3308      	adds	r3, #8
   d54d4:	42a3      	cmp	r3, r4
   d54d6:	4615      	mov	r5, r2
   d54d8:	d1f7      	bne.n	d54ca <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d54da:	a901      	add	r1, sp, #4
   d54dc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d54de:	ad07      	add	r5, sp, #28
   d54e0:	f7ff fd78 	bl	d4fd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d54e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d54e6:	1d3c      	adds	r4, r7, #4
   d54e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d54ea:	682b      	ldr	r3, [r5, #0]
   d54ec:	7023      	strb	r3, [r4, #0]
   d54ee:	e7de      	b.n	d54ae <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d54f0:	9800      	ldr	r0, [sp, #0]
   d54f2:	f7ff f8d7 	bl	d46a4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d54f6:	4638      	mov	r0, r7
   d54f8:	b015      	add	sp, #84	; 0x54
   d54fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5500 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5500:	4b02      	ldr	r3, [pc, #8]	; (d550c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5502:	4a03      	ldr	r2, [pc, #12]	; (d5510 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5504:	601a      	str	r2, [r3, #0]
   d5506:	2200      	movs	r2, #0
   d5508:	605a      	str	r2, [r3, #4]

} // spark
   d550a:	4770      	bx	lr
   d550c:	2003e7cc 	.word	0x2003e7cc
   d5510:	000d58f8 	.word	0x000d58f8

000d5514 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5514:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5516:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5518:	d902      	bls.n	d5520 <pinAvailable+0xc>
    return false;
   d551a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d551c:	b002      	add	sp, #8
   d551e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5520:	f1a0 030b 	sub.w	r3, r0, #11
   d5524:	2b02      	cmp	r3, #2
   d5526:	d81a      	bhi.n	d555e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5528:	4c17      	ldr	r4, [pc, #92]	; (d5588 <pinAvailable+0x74>)
   d552a:	7821      	ldrb	r1, [r4, #0]
   d552c:	f3bf 8f5b 	dmb	ish
   d5530:	f011 0101 	ands.w	r1, r1, #1
   d5534:	d10b      	bne.n	d554e <pinAvailable+0x3a>
   d5536:	4620      	mov	r0, r4
   d5538:	9101      	str	r1, [sp, #4]
   d553a:	f7fe fdae 	bl	d409a <__cxa_guard_acquire>
   d553e:	9901      	ldr	r1, [sp, #4]
   d5540:	b128      	cbz	r0, d554e <pinAvailable+0x3a>
   d5542:	4812      	ldr	r0, [pc, #72]	; (d558c <pinAvailable+0x78>)
   d5544:	f7ff fb0e 	bl	d4b64 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5548:	4620      	mov	r0, r4
   d554a:	f7fe fdab 	bl	d40a4 <__cxa_guard_release>
   d554e:	4b0f      	ldr	r3, [pc, #60]	; (d558c <pinAvailable+0x78>)
   d5550:	7818      	ldrb	r0, [r3, #0]
   d5552:	f7ff f9c7 	bl	d48e4 <hal_spi_is_enabled>
   d5556:	2800      	cmp	r0, #0
   d5558:	d1df      	bne.n	d551a <pinAvailable+0x6>
  return true; // 'pin' is available
   d555a:	2001      	movs	r0, #1
   d555c:	e7de      	b.n	d551c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d555e:	2801      	cmp	r0, #1
   d5560:	d809      	bhi.n	d5576 <pinAvailable+0x62>
   d5562:	f000 f86b 	bl	d563c <_Z19__fetch_global_Wirev>
   d5566:	2100      	movs	r1, #0
   d5568:	7c00      	ldrb	r0, [r0, #16]
   d556a:	f7ff f973 	bl	d4854 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d556e:	f080 0001 	eor.w	r0, r0, #1
   d5572:	b2c0      	uxtb	r0, r0
   d5574:	e7d2      	b.n	d551c <pinAvailable+0x8>
   d5576:	3809      	subs	r0, #9
   d5578:	2801      	cmp	r0, #1
   d557a:	d8ee      	bhi.n	d555a <pinAvailable+0x46>
   d557c:	f7ff fe34 	bl	d51e8 <_Z22__fetch_global_Serial1v>
   d5580:	7c00      	ldrb	r0, [r0, #16]
   d5582:	f7ff f917 	bl	d47b4 <hal_usart_is_enabled>
   d5586:	e7f2      	b.n	d556e <pinAvailable+0x5a>
   d5588:	2003e644 	.word	0x2003e644
   d558c:	2003e648 	.word	0x2003e648

000d5590 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5590:	2823      	cmp	r0, #35	; 0x23
{
   d5592:	b538      	push	{r3, r4, r5, lr}
   d5594:	4604      	mov	r4, r0
   d5596:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5598:	d80a      	bhi.n	d55b0 <pinMode+0x20>
   d559a:	29ff      	cmp	r1, #255	; 0xff
   d559c:	d008      	beq.n	d55b0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d559e:	f7ff ffb9 	bl	d5514 <pinAvailable>
   d55a2:	b128      	cbz	r0, d55b0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d55a4:	4629      	mov	r1, r5
   d55a6:	4620      	mov	r0, r4
}
   d55a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d55ac:	f7ff b88a 	b.w	d46c4 <HAL_Pin_Mode>
}
   d55b0:	bd38      	pop	{r3, r4, r5, pc}

000d55b2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d55b2:	b538      	push	{r3, r4, r5, lr}
   d55b4:	4604      	mov	r4, r0
   d55b6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d55b8:	f7ff f88c 	bl	d46d4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d55bc:	28ff      	cmp	r0, #255	; 0xff
   d55be:	d010      	beq.n	d55e2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d55c0:	2806      	cmp	r0, #6
   d55c2:	d804      	bhi.n	d55ce <digitalWrite+0x1c>
   d55c4:	234d      	movs	r3, #77	; 0x4d
   d55c6:	fa23 f000 	lsr.w	r0, r3, r0
   d55ca:	07c3      	lsls	r3, r0, #31
   d55cc:	d409      	bmi.n	d55e2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d55ce:	4620      	mov	r0, r4
   d55d0:	f7ff ffa0 	bl	d5514 <pinAvailable>
   d55d4:	b128      	cbz	r0, d55e2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d55d6:	4629      	mov	r1, r5
   d55d8:	4620      	mov	r0, r4
}
   d55da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d55de:	f7ff b881 	b.w	d46e4 <HAL_GPIO_Write>
}
   d55e2:	bd38      	pop	{r3, r4, r5, pc}

000d55e4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d55e4:	b510      	push	{r4, lr}
   d55e6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d55e8:	f7ff f874 	bl	d46d4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d55ec:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d55ee:	b2db      	uxtb	r3, r3
   d55f0:	2b01      	cmp	r3, #1
   d55f2:	d908      	bls.n	d5606 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d55f4:	4620      	mov	r0, r4
   d55f6:	f7ff ff8d 	bl	d5514 <pinAvailable>
   d55fa:	b120      	cbz	r0, d5606 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d55fc:	4620      	mov	r0, r4
}
   d55fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d5602:	f7ff b877 	b.w	d46f4 <HAL_GPIO_Read>
}
   d5606:	2000      	movs	r0, #0
   d5608:	bd10      	pop	{r4, pc}
	...

000d560c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d560c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d560e:	2300      	movs	r3, #0
   d5610:	2520      	movs	r5, #32
   d5612:	8043      	strh	r3, [r0, #2]
   d5614:	2314      	movs	r3, #20
{
   d5616:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5618:	8003      	strh	r3, [r0, #0]
   d561a:	6085      	str	r5, [r0, #8]
   d561c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d561e:	4906      	ldr	r1, [pc, #24]	; (d5638 <_Z17acquireWireBufferv+0x2c>)
   d5620:	4628      	mov	r0, r5
   d5622:	f000 f83a 	bl	d569a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5626:	4904      	ldr	r1, [pc, #16]	; (d5638 <_Z17acquireWireBufferv+0x2c>)
	};
   d5628:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d562a:	4628      	mov	r0, r5
   d562c:	f000 f835 	bl	d569a <_ZnajRKSt9nothrow_t>
	};
   d5630:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d5632:	4620      	mov	r0, r4
   d5634:	bd38      	pop	{r3, r4, r5, pc}
   d5636:	bf00      	nop
   d5638:	000d592c 	.word	0x000d592c

000d563c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d563c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d563e:	4d0f      	ldr	r5, [pc, #60]	; (d567c <_Z19__fetch_global_Wirev+0x40>)
   d5640:	7829      	ldrb	r1, [r5, #0]
   d5642:	f3bf 8f5b 	dmb	ish
   d5646:	f011 0401 	ands.w	r4, r1, #1
{
   d564a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d564c:	d113      	bne.n	d5676 <_Z19__fetch_global_Wirev+0x3a>
   d564e:	4628      	mov	r0, r5
   d5650:	f7fe fd23 	bl	d409a <__cxa_guard_acquire>
   d5654:	b178      	cbz	r0, d5676 <_Z19__fetch_global_Wirev+0x3a>
   d5656:	a801      	add	r0, sp, #4
   d5658:	f7ff ffd8 	bl	d560c <_Z17acquireWireBufferv>
   d565c:	aa01      	add	r2, sp, #4
   d565e:	4621      	mov	r1, r4
   d5660:	4807      	ldr	r0, [pc, #28]	; (d5680 <_Z19__fetch_global_Wirev+0x44>)
   d5662:	f7ff fe17 	bl	d5294 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5666:	4628      	mov	r0, r5
   d5668:	f7fe fd1c 	bl	d40a4 <__cxa_guard_release>
   d566c:	4a05      	ldr	r2, [pc, #20]	; (d5684 <_Z19__fetch_global_Wirev+0x48>)
   d566e:	4906      	ldr	r1, [pc, #24]	; (d5688 <_Z19__fetch_global_Wirev+0x4c>)
   d5670:	4803      	ldr	r0, [pc, #12]	; (d5680 <_Z19__fetch_global_Wirev+0x44>)
   d5672:	f000 f80b 	bl	d568c <__aeabi_atexit>
	return wire;
}
   d5676:	4802      	ldr	r0, [pc, #8]	; (d5680 <_Z19__fetch_global_Wirev+0x44>)
   d5678:	b007      	add	sp, #28
   d567a:	bd30      	pop	{r4, r5, pc}
   d567c:	2003e7d8 	.word	0x2003e7d8
   d5680:	2003e7dc 	.word	0x2003e7dc
   d5684:	2003e608 	.word	0x2003e608
   d5688:	000d523d 	.word	0x000d523d

000d568c <__aeabi_atexit>:
   d568c:	460b      	mov	r3, r1
   d568e:	4601      	mov	r1, r0
   d5690:	4618      	mov	r0, r3
   d5692:	f000 b805 	b.w	d56a0 <__cxa_atexit>

000d5696 <_ZdlPvj>:
   d5696:	f7fe bcfe 	b.w	d4096 <_ZdlPv>

000d569a <_ZnajRKSt9nothrow_t>:
   d569a:	f7fe bcfa 	b.w	d4092 <_Znaj>
	...

000d56a0 <__cxa_atexit>:
   d56a0:	b510      	push	{r4, lr}
   d56a2:	4c05      	ldr	r4, [pc, #20]	; (d56b8 <__cxa_atexit+0x18>)
   d56a4:	4613      	mov	r3, r2
   d56a6:	b12c      	cbz	r4, d56b4 <__cxa_atexit+0x14>
   d56a8:	460a      	mov	r2, r1
   d56aa:	4601      	mov	r1, r0
   d56ac:	2002      	movs	r0, #2
   d56ae:	f3af 8000 	nop.w
   d56b2:	bd10      	pop	{r4, pc}
   d56b4:	4620      	mov	r0, r4
   d56b6:	e7fc      	b.n	d56b2 <__cxa_atexit+0x12>
   d56b8:	00000000 	.word	0x00000000

000d56bc <memcpy>:
   d56bc:	440a      	add	r2, r1
   d56be:	4291      	cmp	r1, r2
   d56c0:	f100 33ff 	add.w	r3, r0, #4294967295
   d56c4:	d100      	bne.n	d56c8 <memcpy+0xc>
   d56c6:	4770      	bx	lr
   d56c8:	b510      	push	{r4, lr}
   d56ca:	f811 4b01 	ldrb.w	r4, [r1], #1
   d56ce:	f803 4f01 	strb.w	r4, [r3, #1]!
   d56d2:	4291      	cmp	r1, r2
   d56d4:	d1f9      	bne.n	d56ca <memcpy+0xe>
   d56d6:	bd10      	pop	{r4, pc}

000d56d8 <memset>:
   d56d8:	4402      	add	r2, r0
   d56da:	4603      	mov	r3, r0
   d56dc:	4293      	cmp	r3, r2
   d56de:	d100      	bne.n	d56e2 <memset+0xa>
   d56e0:	4770      	bx	lr
   d56e2:	f803 1b01 	strb.w	r1, [r3], #1
   d56e6:	e7f9      	b.n	d56dc <memset+0x4>

000d56e8 <srand>:
   d56e8:	b538      	push	{r3, r4, r5, lr}
   d56ea:	4b0d      	ldr	r3, [pc, #52]	; (d5720 <srand+0x38>)
   d56ec:	681d      	ldr	r5, [r3, #0]
   d56ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d56f0:	4604      	mov	r4, r0
   d56f2:	b97b      	cbnz	r3, d5714 <srand+0x2c>
   d56f4:	2018      	movs	r0, #24
   d56f6:	f7ff f9d9 	bl	d4aac <malloc>
   d56fa:	4a0a      	ldr	r2, [pc, #40]	; (d5724 <srand+0x3c>)
   d56fc:	4b0a      	ldr	r3, [pc, #40]	; (d5728 <srand+0x40>)
   d56fe:	63a8      	str	r0, [r5, #56]	; 0x38
   d5700:	e9c0 2300 	strd	r2, r3, [r0]
   d5704:	4b09      	ldr	r3, [pc, #36]	; (d572c <srand+0x44>)
   d5706:	6083      	str	r3, [r0, #8]
   d5708:	230b      	movs	r3, #11
   d570a:	8183      	strh	r3, [r0, #12]
   d570c:	2201      	movs	r2, #1
   d570e:	2300      	movs	r3, #0
   d5710:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5714:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5716:	2200      	movs	r2, #0
   d5718:	611c      	str	r4, [r3, #16]
   d571a:	615a      	str	r2, [r3, #20]
   d571c:	bd38      	pop	{r3, r4, r5, pc}
   d571e:	bf00      	nop
   d5720:	2003e5a4 	.word	0x2003e5a4
   d5724:	abcd330e 	.word	0xabcd330e
   d5728:	e66d1234 	.word	0xe66d1234
   d572c:	0005deec 	.word	0x0005deec

000d5730 <strlen>:
   d5730:	4603      	mov	r3, r0
   d5732:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5736:	2a00      	cmp	r2, #0
   d5738:	d1fb      	bne.n	d5732 <strlen+0x2>
   d573a:	1a18      	subs	r0, r3, r0
   d573c:	3801      	subs	r0, #1
   d573e:	4770      	bx	lr

000d5740 <strncpy>:
   d5740:	b510      	push	{r4, lr}
   d5742:	3901      	subs	r1, #1
   d5744:	4603      	mov	r3, r0
   d5746:	b132      	cbz	r2, d5756 <strncpy+0x16>
   d5748:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d574c:	f803 4b01 	strb.w	r4, [r3], #1
   d5750:	3a01      	subs	r2, #1
   d5752:	2c00      	cmp	r4, #0
   d5754:	d1f7      	bne.n	d5746 <strncpy+0x6>
   d5756:	441a      	add	r2, r3
   d5758:	2100      	movs	r1, #0
   d575a:	4293      	cmp	r3, r2
   d575c:	d100      	bne.n	d5760 <strncpy+0x20>
   d575e:	bd10      	pop	{r4, pc}
   d5760:	f803 1b01 	strb.w	r1, [r3], #1
   d5764:	e7f9      	b.n	d575a <strncpy+0x1a>

000d5766 <link_code_end>:
	...

000d5768 <dynalib_user>:
   d5768:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5778:	0000 0000 3a58 2020 2000 0920 3a59 2020     ....X:  .  .Y:  
   d5788:	2000 0920 3a5a 2020 4c00 5349 4433 0048     .  .Z:  .LIS3DH.

000d5798 <_ZTV15Adafruit_LIS3DH>:
	...
   d57a0:	40ab 000d 4185 000d 41e1 000d 4671 000d     .@...A...A..qF..
   d57b0:	41e5 000d                                   .A..

000d57b4 <_ZTVN5spark13EthernetClassE>:
	...
   d57bc:	4b3b 000d 4b31 000d 4b27 000d 4b1d 000d     ;K..1K..'K...K..
   d57cc:	4b11 000d 4b05 000d 53e9 000d 53f1 000d     .K...K...S...S..
   d57dc:	4af9 000d 4af1 000d 4ae7 000d 4add 000d     .J...J...J...J..
   d57ec:	5421 000d                                   !T..

000d57f0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d57f0:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   d5800:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d5810:	7361 7463 6d69 0065                         asctime.

000d5818 <_ZTV9IPAddress>:
	...
   d5820:	4f55 000d 4f45 000d 4f47 000d               UO..EO..GO..

000d582c <_ZTV9USBSerial>:
	...
   d5834:	5035 000d 509d 000d 5073 000d 4d0d 000d     5P...P..sP...M..
   d5844:	5065 000d 5037 000d 5047 000d 5097 000d     eP..7P..GP...P..
   d5854:	5057 000d 5031 000d                         WP..1P..

000d585c <_ZTV11USARTSerial>:
	...
   d5864:	5141 000d 51ad 000d 5185 000d 4d0d 000d     AQ...Q...Q...M..
   d5874:	5155 000d 5171 000d 5163 000d 517f 000d     UQ..qQ..cQ...Q..
   d5884:	5143 000d 5147 000d                         CQ..GQ..

000d588c <_ZTV7TwoWire>:
	...
   d5894:	523d 000d 5287 000d 525f 000d 523f 000d     =R...R.._R..?R..
   d58a4:	5267 000d 526f 000d 5277 000d 527f 000d     gR..oR..wR...R..

000d58b4 <_ZTVN5spark9WiFiClassE>:
	...
   d58bc:	538b 000d 5381 000d 5377 000d 5339 000d     .S...S..wS..9S..
   d58cc:	4dbf 000d 536b 000d 53e9 000d 53f1 000d     .M..kS...S...S..
   d58dc:	535f 000d 5357 000d 534d 000d 5343 000d     _S..WS..MS..CS..
   d58ec:	5421 000d                                   !T..

000d58f0 <_ZTVN5spark12NetworkClassE>:
	...
   d58f8:	53a9 000d 53b3 000d 53bd 000d 53c7 000d     .S...S...S...S..
   d5908:	53d1 000d 53dd 000d 53e9 000d 53f1 000d     .S...S...S...S..
   d5918:	53f9 000d 5405 000d 540d 000d 5417 000d     .S...T...T...T..
   d5928:	5421 000d                                   !T..

000d592c <_ZSt7nothrow>:
	...

000d592d <link_const_variable_data_end>:
   d592d:	00          	.byte	0x00
	...

000d5930 <link_constructors_location>:
   d5930:	000d4195 	.word	0x000d4195
   d5934:	000d4b45 	.word	0x000d4b45
   d5938:	000d4c85 	.word	0x000d4c85
   d593c:	000d4ce5 	.word	0x000d4ce5
   d5940:	000d4dcd 	.word	0x000d4dcd
   d5944:	000d4ddd 	.word	0x000d4ddd
   d5948:	000d4e05 	.word	0x000d4e05
   d594c:	000d5395 	.word	0x000d5395
   d5950:	000d5501 	.word	0x000d5501

000d5954 <link_constructors_end>:
	...
