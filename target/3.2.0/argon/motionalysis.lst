
/Users/trylaarsdam/Documents/dev/motionalysis/target/3.2.0/argon/motionalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007a20  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000bba40  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000088  20031b78  000bba44  00011b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000cbf0  20031c00  20031c00  00021c00  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000bbacc  000bbacc  0001bacc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000bbaf4  000bbaf4  0001baf4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0012c6ae  00000000  00000000  0001baf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0001441b  00000000  00000000  001481a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0003b89c  00000000  00000000  0015c5c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000033c8  00000000  00000000  00197e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 0000b6d8  00000000  00000000  0019b225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003a296  00000000  00000000  001a68fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00044713  00000000  00000000  001e0b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012cb56  00000000  00000000  002252a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  000090f4  00000000  00000000  00351dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f006 fb2b 	bl	ba68c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f006 fb4d 	bl	ba6dc <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	20031b78 	.word	0x20031b78
   b404c:	000bba44 	.word	0x000bba44
   b4050:	20031c00 	.word	0x20031c00
   b4054:	20031c00 	.word	0x20031c00
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f005 fc11 	bl	b9888 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bba18 	.word	0x000bba18
   b4080:	000bba3c 	.word	0x000bba3c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 ba92 	b.w	b45ac <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fa69 	bl	b5560 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f005 bbb1 	b.w	b97f8 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 be3f 	b.w	b6d18 <malloc>

000b409a <_Znaj>:
   b409a:	f002 be3d 	b.w	b6d18 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 be43 	b.w	b6d28 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   b40b2:	b510      	push	{r4, lr}
   b40b4:	4604      	mov	r4, r0

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   b40b6:	b93a      	cbnz	r2, b40c8 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b40b8:	6803      	ldr	r3, [r0, #0]
   b40ba:	689b      	ldr	r3, [r3, #8]
   b40bc:	4798      	blx	r3
        n += println();
   b40be:	4620      	mov	r0, r4
    }
   b40c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b40c4:	f004 bb3d 	b.w	b8742 <_ZN5Print7printlnEv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40c8:	b2d2      	uxtb	r2, r2
   b40ca:	f004 fb50 	bl	b876e <_ZN5Print11printNumberEmh>
   b40ce:	e7f6      	b.n	b40be <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0xc>

000b40d0 <_ZN9USBSerial4lockEv.isra.0>:
#else
		return true;
#endif
	}

	void lock()
   b40d0:	b508      	push	{r3, lr}
		return os_mutex_recursive_t(system_internal(2, nullptr));
   b40d2:	2100      	movs	r1, #0
   b40d4:	2002      	movs	r0, #2
   b40d6:	f002 fd2f 	bl	b6b38 <system_internal>
	{
#if PLATFORM_THREADING
		os_mutex_recursive_lock(get_mutex());
#endif
	}
   b40da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		os_mutex_recursive_lock(get_mutex());
   b40de:	f002 baeb 	b.w	b66b8 <os_mutex_recursive_lock>

000b40e2 <_ZN11SystemClass14updatesEnabledEv.isra.0>:

    inline uint8_t updatesPending() {
        return get_flag(SYSTEM_FLAG_OTA_UPDATE_PENDING) != 0;
    }

    inline uint8_t updatesEnabled() {
   b40e2:	b507      	push	{r0, r1, r2, lr}

private:
    SystemSleepResult systemSleepResult_;

    static inline uint8_t get_flag(system_flag_t flag) {
        uint8_t value = 0;
   b40e4:	2200      	movs	r2, #0
        system_get_flag(flag, &value, nullptr);
   b40e6:	f10d 0107 	add.w	r1, sp, #7
   b40ea:	2001      	movs	r0, #1
        uint8_t value = 0;
   b40ec:	f88d 2007 	strb.w	r2, [sp, #7]
        system_get_flag(flag, &value, nullptr);
   b40f0:	f002 fd32 	bl	b6b58 <system_get_flag>
    }
   b40f4:	b003      	add	sp, #12
   b40f6:	f85d fb04 	ldr.w	pc, [sp], #4

000b40fa <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40fa:	b40e      	push	{r1, r2, r3}
   b40fc:	b503      	push	{r0, r1, lr}
   b40fe:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   b4100:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4102:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4106:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4108:	f004 fb4f 	bl	b87aa <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b410c:	b002      	add	sp, #8
   b410e:	f85d eb04 	ldr.w	lr, [sp], #4
   b4112:	b003      	add	sp, #12
   b4114:	4770      	bx	lr

000b4116 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4116:	2300      	movs	r3, #0
   b4118:	6840      	ldr	r0, [r0, #4]
   b411a:	461a      	mov	r2, r3
   b411c:	4619      	mov	r1, r3
   b411e:	f002 bda3 	b.w	b6c68 <network_on>

000b4122 <_ZN5spark9WiFiClass3offEv>:
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b4122:	2300      	movs	r3, #0
   b4124:	6840      	ldr	r0, [r0, #4]
   b4126:	461a      	mov	r2, r3
   b4128:	4619      	mov	r1, r3
   b412a:	f002 bda5 	b.w	b6c78 <network_off>

000b412e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   b412e:	2300      	movs	r3, #0
   b4130:	6840      	ldr	r0, [r0, #4]
   b4132:	461a      	mov	r2, r3
   b4134:	f002 bd78 	b.w	b6c28 <network_connect>

000b4138 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4138:	2200      	movs	r2, #0
   b413a:	6840      	ldr	r0, [r0, #4]
   b413c:	4611      	mov	r1, r2
   b413e:	f002 bd8b 	b.w	b6c58 <network_ready>

000b4142 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    void freeWakeupSourceMemory() {
   b4142:	b510      	push	{r4, lr}
   b4144:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b4146:	6800      	ldr	r0, [r0, #0]
   b4148:	b118      	cbz	r0, b4152 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b414a:	f002 fded 	bl	b6d28 <free>
            wakeupSource_ = nullptr;
   b414e:	2300      	movs	r3, #0
   b4150:	6023      	str	r3, [r4, #0]
    }
   b4152:	bd10      	pop	{r4, pc}

000b4154 <_ZN14http_request_tC1Ev>:
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b4154:	b510      	push	{r4, lr}
   b4156:	490a      	ldr	r1, [pc, #40]	; (b4180 <_ZN14http_request_tC1Ev+0x2c>)
   b4158:	4604      	mov	r4, r0
   b415a:	f004 fc42 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
   b415e:	f104 0010 	add.w	r0, r4, #16
   b4162:	f004 f9ab 	bl	b84bc <_ZN9IPAddressC1Ev>
   b4166:	4906      	ldr	r1, [pc, #24]	; (b4180 <_ZN14http_request_tC1Ev+0x2c>)
   b4168:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b416c:	f004 fc39 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
   b4170:	4903      	ldr	r1, [pc, #12]	; (b4180 <_ZN14http_request_tC1Ev+0x2c>)
   b4172:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b4176:	f004 fc34 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
   b417a:	4620      	mov	r0, r4
   b417c:	bd10      	pop	{r4, pc}
   b417e:	bf00      	nop
   b4180:	000bac31 	.word	0x000bac31

000b4184 <_Z16HTTPRequestSetupv>:

int networkCount;
WiFiAccessPoint networks[5];
String networkBuffer;

void HTTPRequestSetup() {
   b4184:	b570      	push	{r4, r5, r6, lr}
  request.hostname = kHTTPHostname;
   b4186:	4c0d      	ldr	r4, [pc, #52]	; (b41bc <_Z16HTTPRequestSetupv+0x38>)
   b4188:	4e0d      	ldr	r6, [pc, #52]	; (b41c0 <_Z16HTTPRequestSetupv+0x3c>)
  request.port = kHTTPRequestPort;
   b418a:	2550      	movs	r5, #80	; 0x50
  request.hostname = kHTTPHostname;
   b418c:	4631      	mov	r1, r6
   b418e:	4620      	mov	r0, r4
   b4190:	f004 fc55 	bl	b8a3e <_ZN6StringaSEPKc>
  request.port = kHTTPRequestPort;
   b4194:	63a5      	str	r5, [r4, #56]	; 0x38
  request.path = "/";
   b4196:	f104 0028 	add.w	r0, r4, #40	; 0x28

  timerequest.hostname = kHTTPHostname;
   b419a:	4c0a      	ldr	r4, [pc, #40]	; (b41c4 <_Z16HTTPRequestSetupv+0x40>)
  request.path = "/";
   b419c:	490a      	ldr	r1, [pc, #40]	; (b41c8 <_Z16HTTPRequestSetupv+0x44>)
   b419e:	f004 fc4e 	bl	b8a3e <_ZN6StringaSEPKc>
  timerequest.hostname = kHTTPHostname;
   b41a2:	4631      	mov	r1, r6
   b41a4:	4620      	mov	r0, r4
   b41a6:	f004 fc4a 	bl	b8a3e <_ZN6StringaSEPKc>
  timerequest.port = kHTTPRequestPort;
   b41aa:	63a5      	str	r5, [r4, #56]	; 0x38
  timerequest.path = "/time";
   b41ac:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b41b0:	4906      	ldr	r1, [pc, #24]	; (b41cc <_Z16HTTPRequestSetupv+0x48>)
}
   b41b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  timerequest.path = "/time";
   b41b6:	f004 bc42 	b.w	b8a3e <_ZN6StringaSEPKc>
   b41ba:	bf00      	nop
   b41bc:	20032214 	.word	0x20032214
   b41c0:	000ba9e0 	.word	0x000ba9e0
   b41c4:	2003e61c 	.word	0x2003e61c
   b41c8:	000ba9ec 	.word	0x000ba9ec
   b41cc:	000ba9ee 	.word	0x000ba9ee

000b41d0 <_Z13writeRegisterhh>:
#include "WatchDog_WCL.h"

Adafruit_LIS3DH lis3dh = Adafruit_LIS3DH();
WatchDog wd = WatchDog();

void writeRegister(byte reg, byte data) {
   b41d0:	b538      	push	{r3, r4, r5, lr}
   b41d2:	460c      	mov	r4, r1
   b41d4:	4605      	mov	r5, r0
  Wire.beginTransmission(kLis3dhAddress);
   b41d6:	f005 fc33 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b41da:	2118      	movs	r1, #24
   b41dc:	f004 f92a 	bl	b8434 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   b41e0:	f005 fc2e 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b41e4:	6803      	ldr	r3, [r0, #0]
   b41e6:	4629      	mov	r1, r5
   b41e8:	689b      	ldr	r3, [r3, #8]
   b41ea:	4798      	blx	r3
  Wire.write(data);
   b41ec:	f005 fc28 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b41f0:	6803      	ldr	r3, [r0, #0]
   b41f2:	4621      	mov	r1, r4
   b41f4:	689b      	ldr	r3, [r3, #8]
   b41f6:	4798      	blx	r3
  Wire.endTransmission();
   b41f8:	f005 fc22 	bl	b9a40 <_Z19__fetch_global_Wirev>
}
   b41fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();
   b4200:	f004 b91f 	b.w	b8442 <_ZN7TwoWire15endTransmissionEv>

000b4204 <_Z12readRegisterh>:

unsigned int readRegister(byte reg) {
   b4204:	b510      	push	{r4, lr}
   b4206:	4604      	mov	r4, r0
  Wire.beginTransmission(kLis3dhAddress);
   b4208:	f005 fc1a 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b420c:	2118      	movs	r1, #24
   b420e:	f004 f911 	bl	b8434 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   b4212:	f005 fc15 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b4216:	6803      	ldr	r3, [r0, #0]
   b4218:	4621      	mov	r1, r4
   b421a:	689b      	ldr	r3, [r3, #8]
   b421c:	4798      	blx	r3
  Wire.endTransmission();
   b421e:	f005 fc0f 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b4222:	f004 f90e 	bl	b8442 <_ZN7TwoWire15endTransmissionEv>
 
  Wire.requestFrom(kLis3dhAddress, 1);
   b4226:	f005 fc0b 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b422a:	2201      	movs	r2, #1
   b422c:	2118      	movs	r1, #24
   b422e:	f004 f8fa 	bl	b8426 <_ZN7TwoWire11requestFromEhj>
  return Wire.read();
   b4232:	f005 fc05 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b4236:	6803      	ldr	r3, [r0, #0]
}
   b4238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return Wire.read();
   b423c:	695b      	ldr	r3, [r3, #20]
   b423e:	4718      	bx	r3

000b4240 <_Z8init_ACCv>:

void init_ACC(void) {
   b4240:	b508      	push	{r3, lr}
  readRegister(0x21);
   b4242:	2021      	movs	r0, #33	; 0x21
   b4244:	f7ff ffde 	bl	b4204 <_Z12readRegisterh>
  readRegister(0x26);
   b4248:	2026      	movs	r0, #38	; 0x26
   b424a:	f7ff ffdb 	bl	b4204 <_Z12readRegisterh>
  readRegister(LIS3DH_REG_INT1SRC);
   b424e:	2031      	movs	r0, #49	; 0x31
   b4250:	f7ff ffd8 	bl	b4204 <_Z12readRegisterh>
  writeRegister(0x20, 0x57); //Write A7h into CTRL_REG1;      // Turn on the sensor, enable X, Y, Z axes with ODR = 100Hz normal mode.
   b4254:	2157      	movs	r1, #87	; 0x57
   b4256:	2020      	movs	r0, #32
   b4258:	f7ff ffba 	bl	b41d0 <_Z13writeRegisterhh>
  writeRegister(0x21, 0x09); //Write 09h into CTRL_REG2;      // High-pass filter (HPF) enabled
   b425c:	2109      	movs	r1, #9
   b425e:	2021      	movs	r0, #33	; 0x21
   b4260:	f7ff ffb6 	bl	b41d0 <_Z13writeRegisterhh>
  writeRegister(0x22, 0x40); //Write 40h into CTRL_REG3;      // ACC AOI1 interrupt signal is routed to INT1 pin.
   b4264:	2140      	movs	r1, #64	; 0x40
   b4266:	2022      	movs	r0, #34	; 0x22
   b4268:	f7ff ffb2 	bl	b41d0 <_Z13writeRegisterhh>
  writeRegister(0x23, 0x00); //Write 00h into CTRL_REG4;      // Full Scale = +/-2 g
   b426c:	2100      	movs	r1, #0
   b426e:	2023      	movs	r0, #35	; 0x23
   b4270:	f7ff ffae 	bl	b41d0 <_Z13writeRegisterhh>
  writeRegister(0x24, 0x00); //Write 08h into CTRL_REG5;      // Default value is 00 for no latching. Interrupt signals on INT1 pin is not latched.
   b4274:	2100      	movs	r1, #0
   b4276:	2024      	movs	r0, #36	; 0x24
   b4278:	f7ff ffaa 	bl	b41d0 <_Z13writeRegisterhh>
                                                              //Users don’t need to read the INT1_SRC register to clear the interrupt signal.
  // configurations for wakeup and motionless detection
  writeRegister(0x32, 0x10); //Write 10h into INT1_THS;          // Threshold (THS) = 16LSBs * 15.625mg/LSB = 250mg.
   b427c:	2110      	movs	r1, #16
   b427e:	2032      	movs	r0, #50	; 0x32
   b4280:	f7ff ffa6 	bl	b41d0 <_Z13writeRegisterhh>
  writeRegister(0x33, 0x00); //Write 00h into INT1_DURATION;     // Duration = 1LSBs * (1/10Hz) = 0.1s.
   b4284:	2100      	movs	r1, #0
   b4286:	2033      	movs	r0, #51	; 0x33
   b4288:	f7ff ffa2 	bl	b41d0 <_Z13writeRegisterhh>
  // readRegister();  //Dummy read to force the HP filter to set reference acceleration/tilt value
  writeRegister(0x30, 0x2A); //Write 2Ah into INT1_CFG;          // Enable XLIE, YLIE, ZLIE interrupt generation, OR logic.
  //lis3dh.setRange(LIS3DH_RANGE_2_G);   // 2, 4, 8 or 16 G!
}
   b428c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  writeRegister(0x30, 0x2A); //Write 2Ah into INT1_CFG;          // Enable XLIE, YLIE, ZLIE interrupt generation, OR logic.
   b4290:	212a      	movs	r1, #42	; 0x2a
   b4292:	2030      	movs	r0, #48	; 0x30
   b4294:	f7ff bf9c 	b.w	b41d0 <_Z13writeRegisterhh>

000b4298 <_Z14initFromEEPROMv>:
  init_ACC();
  wd.runWhileSleeping(true);
  wd.initialize(kWatchDogTimeout);
}

void initFromEEPROM() {
   b4298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b429a:	4f34      	ldr	r7, [pc, #208]	; (b436c <_Z14initFromEEPROMv+0xd4>)
   b429c:	4c34      	ldr	r4, [pc, #208]	; (b4370 <_Z14initFromEEPROMv+0xd8>)
   b429e:	4e35      	ldr	r6, [pc, #212]	; (b4374 <_Z14initFromEEPROMv+0xdc>)
   b42a0:	4d35      	ldr	r5, [pc, #212]	; (b4378 <_Z14initFromEEPROMv+0xe0>)
  EEPROM.get(kRecordingIntervalEEPROMAddress, recordingInterval);
   b42a2:	f005 fb9f 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
   b42a6:	2204      	movs	r2, #4
   b42a8:	4639      	mov	r1, r7
   b42aa:	2064      	movs	r0, #100	; 0x64
   b42ac:	f002 fa3c 	bl	b6728 <HAL_EEPROM_Get>
  EEPROM.get(kDsidEEPROMAddress, dsid);
   b42b0:	f005 fb98 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
   b42b4:	4931      	ldr	r1, [pc, #196]	; (b437c <_Z14initFromEEPROMv+0xe4>)
   b42b6:	2204      	movs	r2, #4
   b42b8:	2000      	movs	r0, #0
   b42ba:	f002 fa35 	bl	b6728 <HAL_EEPROM_Get>
  EEPROM.get(kReportingIntervalEEPROMAddress, reportingInterval);
   b42be:	f005 fb91 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
   b42c2:	2204      	movs	r2, #4
   b42c4:	4621      	mov	r1, r4
   b42c6:	20c8      	movs	r0, #200	; 0xc8
   b42c8:	f002 fa2e 	bl	b6728 <HAL_EEPROM_Get>
  EEPROM.get(kSleepPauseDurationEEPROMAddress, sleepPauseDuration);
   b42cc:	f005 fb8a 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
   b42d0:	2204      	movs	r2, #4
   b42d2:	4631      	mov	r1, r6
   b42d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b42d8:	f002 fa26 	bl	b6728 <HAL_EEPROM_Get>
  EEPROM.get(kReportingModeEEPROMAddress, recordingMode);
   b42dc:	f005 fb82 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
   b42e0:	4629      	mov	r1, r5
   b42e2:	2204      	movs	r2, #4
   b42e4:	f44f 70b6 	mov.w	r0, #364	; 0x16c
   b42e8:	f002 fa1e 	bl	b6728 <HAL_EEPROM_Get>
  reportingInterval = reportingInterval / 1000; // convert to seconds from milliseconds 
   b42ec:	6823      	ldr	r3, [r4, #0]
   b42ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b42f2:	fb93 f3f2 	sdiv	r3, r3, r2
   b42f6:	6023      	str	r3, [r4, #0]
  Serial.printlnf("recordingInterval: %i", recordingInterval);
   b42f8:	f005 f954 	bl	b95a4 <_Z16_fetch_usbserialv>
   b42fc:	683a      	ldr	r2, [r7, #0]
   b42fe:	4920      	ldr	r1, [pc, #128]	; (b4380 <_Z14initFromEEPROMv+0xe8>)
   b4300:	f7ff fefb 	bl	b40fa <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("reportingInterval: %i", reportingInterval);
   b4304:	f005 f94e 	bl	b95a4 <_Z16_fetch_usbserialv>
   b4308:	6822      	ldr	r2, [r4, #0]
   b430a:	491e      	ldr	r1, [pc, #120]	; (b4384 <_Z14initFromEEPROMv+0xec>)
   b430c:	f7ff fef5 	bl	b40fa <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("sleepPauseDuration: %i", sleepPauseDuration);
   b4310:	f005 f948 	bl	b95a4 <_Z16_fetch_usbserialv>
   b4314:	6832      	ldr	r2, [r6, #0]
   b4316:	491c      	ldr	r1, [pc, #112]	; (b4388 <_Z14initFromEEPROMv+0xf0>)
   b4318:	f7ff feef 	bl	b40fa <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("recordingMode: %i", recordingMode);
   b431c:	f005 f942 	bl	b95a4 <_Z16_fetch_usbserialv>
   b4320:	682a      	ldr	r2, [r5, #0]
   b4322:	491a      	ldr	r1, [pc, #104]	; (b438c <_Z14initFromEEPROMv+0xf4>)
   b4324:	f7ff fee9 	bl	b40fa <_ZN5Print8printlnfEPKcz>
  if(recordingInterval == kEEPROMEmptyValue) { // if no value stored in EEPROM, set to default
   b4328:	683b      	ldr	r3, [r7, #0]
   b432a:	3301      	adds	r3, #1
    recordingInterval = kDefaultRecordingInterval; //default value
   b432c:	bf04      	itt	eq
   b432e:	f44f 73fa 	moveq.w	r3, #500	; 0x1f4
   b4332:	603b      	streq	r3, [r7, #0]
    // EEPROM.put(kRecordingIntervalEEPROMAddress, recordingInterval);
  }
  if(reportingInterval == kEEPROMEmptyValue) {
   b4334:	6823      	ldr	r3, [r4, #0]
   b4336:	3301      	adds	r3, #1
    reportingInterval = kDefaultReportingInterval; //default value
   b4338:	bf04      	itt	eq
   b433a:	230f      	moveq	r3, #15
   b433c:	6023      	streq	r3, [r4, #0]
  }
  if(sleepPauseDuration == kEEPROMEmptyValue) {
   b433e:	6833      	ldr	r3, [r6, #0]
   b4340:	3301      	adds	r3, #1
    sleepPauseDuration = kDefaultSleepPauseDuration + 1; //default value
   b4342:	bf04      	itt	eq
   b4344:	2306      	moveq	r3, #6
   b4346:	6033      	streq	r3, [r6, #0]
    // EEPROM.put(kSleepPauseDurationEEPROMAddress, sleepPauseDuration);
  }
  if(recordingMode == kEEPROMEmptyValue) {
   b4348:	682b      	ldr	r3, [r5, #0]
   b434a:	3301      	adds	r3, #1
    recordingMode = kDefaultReportingMode; //default value
   b434c:	bf04      	itt	eq
   b434e:	2300      	moveq	r3, #0
   b4350:	602b      	streq	r3, [r5, #0]
    // EEPROM.put(kReportingModeEEPROMAddress, reportingMode);
  }
  if(dsid == kEEPROMEmptyValue) {
   b4352:	4b0a      	ldr	r3, [pc, #40]	; (b437c <_Z14initFromEEPROMv+0xe4>)
   b4354:	681b      	ldr	r3, [r3, #0]
   b4356:	3301      	adds	r3, #1
   b4358:	d106      	bne.n	b4368 <_Z14initFromEEPROMv+0xd0>
    Serial.println("DSID not stored in EEPROM. BLE config required"); 
   b435a:	f005 f923 	bl	b95a4 <_Z16_fetch_usbserialv>
    // dsid = 51509;
    // EEPROM.put(kDsidEEPROMAddress, dsid);
    //TODO notify user somehow
  }
   b435e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println("DSID not stored in EEPROM. BLE config required"); 
   b4362:	490b      	ldr	r1, [pc, #44]	; (b4390 <_Z14initFromEEPROMv+0xf8>)
   b4364:	f004 b9f9 	b.w	b875a <_ZN5Print7printlnEPKc>
   b4368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b436a:	bf00      	nop
   b436c:	20032208 	.word	0x20032208
   b4370:	20032210 	.word	0x20032210
   b4374:	200322a8 	.word	0x200322a8
   b4378:	2003220c 	.word	0x2003220c
   b437c:	20031c60 	.word	0x20031c60
   b4380:	000ba9f4 	.word	0x000ba9f4
   b4384:	000baa0a 	.word	0x000baa0a
   b4388:	000baa20 	.word	0x000baa20
   b438c:	000baa37 	.word	0x000baa37
   b4390:	000baa49 	.word	0x000baa49

000b4394 <_Z14sleepReadyTestv>:
#include "constants.hpp"
#include "Particle.h"
#include "initHardware.hpp"

bool sleepReadyTest(){
  if(sleepTimeoutCounter >= ((sleepPauseDuration * 1000) / recordingInterval)){
   b4394:	4b07      	ldr	r3, [pc, #28]	; (b43b4 <_Z14sleepReadyTestv+0x20>)
   b4396:	4a08      	ldr	r2, [pc, #32]	; (b43b8 <_Z14sleepReadyTestv+0x24>)
   b4398:	681b      	ldr	r3, [r3, #0]
   b439a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b439e:	4343      	muls	r3, r0
   b43a0:	6810      	ldr	r0, [r2, #0]
   b43a2:	4a06      	ldr	r2, [pc, #24]	; (b43bc <_Z14sleepReadyTestv+0x28>)
   b43a4:	fb93 f3f0 	sdiv	r3, r3, r0
   b43a8:	6810      	ldr	r0, [r2, #0]
    return true;
  }
  else {
    return false;
  }
}
   b43aa:	4283      	cmp	r3, r0
   b43ac:	bfcc      	ite	gt
   b43ae:	2000      	movgt	r0, #0
   b43b0:	2001      	movle	r0, #1
   b43b2:	4770      	bx	lr
   b43b4:	200322a8 	.word	0x200322a8
   b43b8:	20032208 	.word	0x20032208
   b43bc:	200322ac 	.word	0x200322ac

000b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b43c0:	b510      	push	{r4, lr}
		return os_mutex_recursive_t(system_internal(2, nullptr));
   b43c2:	2100      	movs	r1, #0
   b43c4:	4604      	mov	r4, r0
   b43c6:	2002      	movs	r0, #2
   b43c8:	f002 fbb6 	bl	b6b38 <system_internal>

	void unlock()
	{
#if PLATFORM_THREADING
		os_mutex_recursive_unlock(get_mutex());
   b43cc:	f002 f97c 	bl	b66c8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b43d0:	4620      	mov	r0, r4
   b43d2:	bd10      	pop	{r4, pc}

000b43d4 <_Z7getTimev>:

void getTime() {
   b43d4:	b530      	push	{r4, r5, lr}
  int wifiTimeout = kWiFiConnectionTimeout;
  WiFi.on();
   b43d6:	4832      	ldr	r0, [pc, #200]	; (b44a0 <_Z7getTimev+0xcc>)
  WiFi.connect();
  while(!WiFi.ready()){
   b43d8:	4d31      	ldr	r5, [pc, #196]	; (b44a0 <_Z7getTimev+0xcc>)
void getTime() {
   b43da:	b089      	sub	sp, #36	; 0x24
  WiFi.on();
   b43dc:	f7ff fe9b 	bl	b4116 <_ZN5spark9WiFiClass2onEv>
  WiFi.connect();
   b43e0:	482f      	ldr	r0, [pc, #188]	; (b44a0 <_Z7getTimev+0xcc>)
   b43e2:	2100      	movs	r1, #0
   b43e4:	f7ff fea3 	bl	b412e <_ZN5spark9WiFiClass7connectEj>
   b43e8:	24c8      	movs	r4, #200	; 0xc8
  while(!WiFi.ready()){
   b43ea:	4628      	mov	r0, r5
   b43ec:	f7ff fea4 	bl	b4138 <_ZN5spark9WiFiClass5readyEv>
   b43f0:	b920      	cbnz	r0, b43fc <_Z7getTimev+0x28>
    wifiTimeout = wifiTimeout - 100;
    delay(100);
   b43f2:	2064      	movs	r0, #100	; 0x64
   b43f4:	f002 fcd0 	bl	b6d98 <delay>
    if(wifiTimeout == 0) {
   b43f8:	3c01      	subs	r4, #1
   b43fa:	d1f6      	bne.n	b43ea <_Z7getTimev+0x16>
      break;
    }
  }
  if(WiFi.ready() != true) {
   b43fc:	4828      	ldr	r0, [pc, #160]	; (b44a0 <_Z7getTimev+0xcc>)
   b43fe:	f7ff fe9b 	bl	b4138 <_ZN5spark9WiFiClass5readyEv>
   b4402:	b988      	cbnz	r0, b4428 <_Z7getTimev+0x54>
    WITH_LOCK(Serial) {
   b4404:	f005 f8ce 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4408:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b440a:	f7ff fe61 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WiFi failed to connect, time not synced");
   b440e:	f005 f8c9 	bl	b95a4 <_Z16_fetch_usbserialv>
   b4412:	4924      	ldr	r1, [pc, #144]	; (b44a4 <_Z7getTimev+0xd0>)
   b4414:	f004 f9a1 	bl	b875a <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b4418:	a804      	add	r0, sp, #16
      Serial.println("WiFi connected, syncing time");
    }
    WITH_LOCK(Serial) {
      http.get(timerequest, timeresponse, timeheaders);
    }
    WITH_LOCK(Serial) {
   b441a:	f7ff ffd1 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      Serial.println("Time request returned: " + timeresponse.body);
      Time.setTime(timeresponse.body.toInt());
    }
  }

  WiFi.off();
   b441e:	4820      	ldr	r0, [pc, #128]	; (b44a0 <_Z7getTimev+0xcc>)
   b4420:	f7ff fe7f 	bl	b4122 <_ZN5spark9WiFiClass3offEv>
}
   b4424:	b009      	add	sp, #36	; 0x24
   b4426:	bd30      	pop	{r4, r5, pc}
    WITH_LOCK(Serial) {
   b4428:	f005 f8bc 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b442c:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b442e:	f7ff fe4f 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WiFi connected, syncing time");
   b4432:	f005 f8b7 	bl	b95a4 <_Z16_fetch_usbserialv>
   b4436:	491c      	ldr	r1, [pc, #112]	; (b44a8 <_Z7getTimev+0xd4>)
   b4438:	f004 f98f 	bl	b875a <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b443c:	a804      	add	r0, sp, #16
   b443e:	f7ff ffbf 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    WITH_LOCK(Serial) {
   b4442:	f005 f8af 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4446:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b4448:	f7ff fe42 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b444c:	4b17      	ldr	r3, [pc, #92]	; (b44ac <_Z7getTimev+0xd8>)
   b444e:	4a18      	ldr	r2, [pc, #96]	; (b44b0 <_Z7getTimev+0xdc>)
   b4450:	4918      	ldr	r1, [pc, #96]	; (b44b4 <_Z7getTimev+0xe0>)
   b4452:	4819      	ldr	r0, [pc, #100]	; (b44b8 <_Z7getTimev+0xe4>)
   b4454:	9300      	str	r3, [sp, #0]
   b4456:	4b19      	ldr	r3, [pc, #100]	; (b44bc <_Z7getTimev+0xe8>)
   b4458:	f001 fe84 	bl	b6164 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
   b445c:	a804      	add	r0, sp, #16
   b445e:	f7ff ffaf 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    WITH_LOCK(Serial) {
   b4462:	f005 f89f 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4466:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   b4468:	f7ff fe32 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("Time request returned: " + timeresponse.body);
   b446c:	f005 f89a 	bl	b95a4 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4470:	4913      	ldr	r1, [pc, #76]	; (b44c0 <_Z7getTimev+0xec>)
   b4472:	4604      	mov	r4, r0
   b4474:	a804      	add	r0, sp, #16
   b4476:	f004 fab4 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
   b447a:	4912      	ldr	r1, [pc, #72]	; (b44c4 <_Z7getTimev+0xf0>)
   b447c:	a804      	add	r0, sp, #16
   b447e:	f004 fb4f 	bl	b8b20 <_ZplRK15StringSumHelperRK6String>
   b4482:	6801      	ldr	r1, [r0, #0]
   b4484:	4620      	mov	r0, r4
   b4486:	f004 f968 	bl	b875a <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b448a:	a804      	add	r0, sp, #16
   b448c:	f004 fa5e 	bl	b894c <_ZN6StringD1Ev>
      Time.setTime(timeresponse.body.toInt());
   b4490:	480c      	ldr	r0, [pc, #48]	; (b44c4 <_Z7getTimev+0xf0>)
   b4492:	f004 fbda 	bl	b8c4a <_ZNK6String5toIntEv>
   b4496:	17c1      	asrs	r1, r0, #31
   b4498:	f004 ff85 	bl	b93a6 <_ZN9TimeClass7setTimeEx>
    WITH_LOCK(Serial) {
   b449c:	a803      	add	r0, sp, #12
   b449e:	e7bc      	b.n	b441a <_Z7getTimev+0x46>
   b44a0:	2003e710 	.word	0x2003e710
   b44a4:	000baa78 	.word	0x000baa78
   b44a8:	000baaa0 	.word	0x000baaa0
   b44ac:	000baabd 	.word	0x000baabd
   b44b0:	2003e668 	.word	0x2003e668
   b44b4:	2003e61c 	.word	0x2003e61c
   b44b8:	20031c68 	.word	0x20031c68
   b44bc:	2003e614 	.word	0x2003e614
   b44c0:	000baac1 	.word	0x000baac1
   b44c4:	2003e66c 	.word	0x2003e66c

000b44c8 <_Z12initHardwarev>:
void initHardware() {
   b44c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
        return value;
    }

    static inline void set_flag(system_flag_t flag, uint8_t value) {
        system_set_flag(flag, value, nullptr);
   b44ca:	2200      	movs	r2, #0
   b44cc:	2101      	movs	r1, #1
   b44ce:	2003      	movs	r0, #3
   b44d0:	f002 fb3a 	bl	b6b48 <system_set_flag>
  pinMode(kBLEConnectedLED, OUTPUT); //BLE connected indicator 
   b44d4:	2101      	movs	r1, #1
   b44d6:	2007      	movs	r0, #7
   b44d8:	f005 fa46 	bl	b9968 <pinMode>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b44dc:	4d2c      	ldr	r5, [pc, #176]	; (b4590 <_Z12initHardwarev+0xc8>)
  digitalWrite(kBLEConnectedLED, LOW);
   b44de:	2100      	movs	r1, #0
   b44e0:	2007      	movs	r0, #7
   b44e2:	f005 fa52 	bl	b998a <digitalWrite>
  pinMode(kLIS3DHInterruptPin, INPUT); //LIS3DH interrupt pin
   b44e6:	2100      	movs	r1, #0
   b44e8:	2002      	movs	r0, #2
   b44ea:	f005 fa3d 	bl	b9968 <pinMode>
   b44ee:	7d2b      	ldrb	r3, [r5, #20]
   b44f0:	b19b      	cbz	r3, b451a <_Z12initHardwarev+0x52>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b44f2:	2302      	movs	r3, #2
   b44f4:	722b      	strb	r3, [r5, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b44f6:	682b      	ldr	r3, [r5, #0]
   b44f8:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b44fa:	b38b      	cbz	r3, b4560 <_Z12initHardwarev+0x98>
            if (start->type == type) {
   b44fc:	889a      	ldrh	r2, [r3, #4]
   b44fe:	2a01      	cmp	r2, #1
   b4500:	d006      	beq.n	b4510 <_Z12initHardwarev+0x48>
            start = start->next;
   b4502:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4504:	e7f9      	b.n	b44fa <_Z12initHardwarev+0x32>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b4506:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b4508:	b353      	cbz	r3, b4560 <_Z12initHardwarev+0x98>
            if (start->type == type) {
   b450a:	889a      	ldrh	r2, [r3, #4]
   b450c:	2a01      	cmp	r2, #1
   b450e:	d1fa      	bne.n	b4506 <_Z12initHardwarev+0x3e>
                if (gpioWakeup->pin == pin) {
   b4510:	899a      	ldrh	r2, [r3, #12]
   b4512:	2a02      	cmp	r2, #2
   b4514:	d1f7      	bne.n	b4506 <_Z12initHardwarev+0x3e>
                    gpioWakeup->mode = mode;
   b4516:	2201      	movs	r2, #1
   b4518:	739a      	strb	r2, [r3, #14]
  if(!lis3dh.begin(kLis3dhAddress)) {
   b451a:	481e      	ldr	r0, [pc, #120]	; (b4594 <_Z12initHardwarev+0xcc>)
   b451c:	2118      	movs	r1, #24
   b451e:	f001 fd5c 	bl	b5fda <_ZN15Adafruit_LIS3DH5beginEh>
   b4522:	b980      	cbnz	r0, b4546 <_Z12initHardwarev+0x7e>
    delay(1000);
   b4524:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4528:	f002 fc36 	bl	b6d98 <delay>
    WITH_LOCK(Serial) {
   b452c:	f005 f83a 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4530:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4532:	f7ff fdcd 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("Failed to initialize LIS3DH");
   b4536:	f005 f835 	bl	b95a4 <_Z16_fetch_usbserialv>
   b453a:	4917      	ldr	r1, [pc, #92]	; (b4598 <_Z12initHardwarev+0xd0>)
   b453c:	f004 f90d 	bl	b875a <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b4540:	a801      	add	r0, sp, #4
   b4542:	f7ff ff3d 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  init_ACC();
   b4546:	f7ff fe7b 	bl	b4240 <_Z8init_ACCv>
  wd.runWhileSleeping(true);
   b454a:	4814      	ldr	r0, [pc, #80]	; (b459c <_Z12initHardwarev+0xd4>)
   b454c:	2101      	movs	r1, #1
   b454e:	f002 f81b 	bl	b6588 <_ZN8WatchDog16runWhileSleepingEb>
  wd.initialize(kWatchDogTimeout);
   b4552:	4913      	ldr	r1, [pc, #76]	; (b45a0 <_Z12initHardwarev+0xd8>)
   b4554:	4811      	ldr	r0, [pc, #68]	; (b459c <_Z12initHardwarev+0xd4>)
}
   b4556:	b003      	add	sp, #12
   b4558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  wd.initialize(kWatchDogTimeout);
   b455c:	f001 bff0 	b.w	b6540 <_ZN8WatchDog10initializeEm>
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4560:	4910      	ldr	r1, [pc, #64]	; (b45a4 <_Z12initHardwarev+0xdc>)
   b4562:	2010      	movs	r0, #16
   b4564:	f005 fad0 	bl	b9b08 <_ZnwjRKSt9nothrow_t>
   b4568:	4604      	mov	r4, r0
   b456a:	b170      	cbz	r0, b458a <_Z12initHardwarev+0xc2>
   b456c:	2210      	movs	r2, #16
   b456e:	2100      	movs	r1, #0
   b4570:	f006 f8b4 	bl	ba6dc <memset>
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
            wakeupSource->base.next = config_.wakeup_sources;
   b4574:	692a      	ldr	r2, [r5, #16]
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4576:	4b0c      	ldr	r3, [pc, #48]	; (b45a8 <_Z12initHardwarev+0xe0>)
   b4578:	6023      	str	r3, [r4, #0]
            wakeupSource->base.next = config_.wakeup_sources;
   b457a:	60a2      	str	r2, [r4, #8]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b457c:	2301      	movs	r3, #1
            wakeupSource->pin = pin;
   b457e:	2202      	movs	r2, #2
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4580:	80a3      	strh	r3, [r4, #4]
            wakeupSource->pin = pin;
   b4582:	81a2      	strh	r2, [r4, #12]
            wakeupSource->mode = mode;
   b4584:	73a3      	strb	r3, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4586:	612c      	str	r4, [r5, #16]
   b4588:	e7c7      	b.n	b451a <_Z12initHardwarev+0x52>
                valid_ = false;
   b458a:	7528      	strb	r0, [r5, #20]
                return *this;
   b458c:	e7c5      	b.n	b451a <_Z12initHardwarev+0x52>
   b458e:	bf00      	nop
   b4590:	20032290 	.word	0x20032290
   b4594:	20032084 	.word	0x20032084
   b4598:	000baad9 	.word	0x000baad9
   b459c:	2003e695 	.word	0x2003e695
   b45a0:	0036ee80 	.word	0x0036ee80
   b45a4:	000bb7b0 	.word	0x000bb7b0
   b45a8:	00030010 	.word	0x00030010

000b45ac <setup>:

void reportingThread(void *args);

// setup() runs once, when the device is first turned on.
void setup()
{
   b45ac:	b507      	push	{r0, r1, r2, lr}
  Serial.begin(9600);
   b45ae:	f004 fff9 	bl	b95a4 <_Z16_fetch_usbserialv>
   b45b2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b45b6:	f004 ffe5 	bl	b9584 <_ZN9USBSerial5beginEl>
  while (!Serial.isConnected())
   b45ba:	f004 fff3 	bl	b95a4 <_Z16_fetch_usbserialv>
   b45be:	f004 ffe5 	bl	b958c <_ZN9USBSerial11isConnectedEv>
   b45c2:	2800      	cmp	r0, #0
   b45c4:	d0f9      	beq.n	b45ba <setup+0xe>
  {
  }
  initHardware();
   b45c6:	f7ff ff7f 	bl	b44c8 <_Z12initHardwarev>
  HTTPRequestSetup();
   b45ca:	f7ff fddb 	bl	b4184 <_Z16HTTPRequestSetupv>
  initFromEEPROM();
   b45ce:	f7ff fe63 	bl	b4298 <_Z14initFromEEPROMv>
  //   }
  // }

  // WiFi.off();

  getTime();
   b45d2:	f7ff feff 	bl	b43d4 <_Z7getTimev>
  syncSystemTime();

  delay(200);
   b45d6:	20c8      	movs	r0, #200	; 0xc8
   b45d8:	f002 fbde 	bl	b6d98 <delay>
        int reason = RESET_REASON_NONE;
   b45dc:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   b45de:	4611      	mov	r1, r2
   b45e0:	a801      	add	r0, sp, #4
        int reason = RESET_REASON_NONE;
   b45e2:	9201      	str	r2, [sp, #4]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   b45e4:	f002 f878 	bl	b66d8 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   b45e8:	9b01      	ldr	r3, [sp, #4]

  if (System.resetReason() == RESET_REASON_WATCHDOG)
   b45ea:	2b3c      	cmp	r3, #60	; 0x3c
   b45ec:	d107      	bne.n	b45fe <setup+0x52>
  {
    Serial.println("Watchdog reset");
   b45ee:	f004 ffd9 	bl	b95a4 <_Z16_fetch_usbserialv>
   b45f2:	490d      	ldr	r1, [pc, #52]	; (b4628 <setup+0x7c>)
   b45f4:	f004 f8b1 	bl	b875a <_ZN5Print7printlnEPKc>
    restartFromWatchdog = true;
   b45f8:	4b0c      	ldr	r3, [pc, #48]	; (b462c <setup+0x80>)
   b45fa:	2201      	movs	r2, #1
   b45fc:	701a      	strb	r2, [r3, #0]
        int reason = RESET_REASON_NONE;
   b45fe:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   b4600:	4611      	mov	r1, r2
   b4602:	a801      	add	r0, sp, #4
        int reason = RESET_REASON_NONE;
   b4604:	9201      	str	r2, [sp, #4]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   b4606:	f002 f867 	bl	b66d8 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   b460a:	9b01      	ldr	r3, [sp, #4]
  }
  if (System.resetReason() == RESET_REASON_PIN_RESET)
   b460c:	2b14      	cmp	r3, #20
   b460e:	d107      	bne.n	b4620 <setup+0x74>
  {
    Serial.println("External reset");
   b4610:	f004 ffc8 	bl	b95a4 <_Z16_fetch_usbserialv>
   b4614:	4906      	ldr	r1, [pc, #24]	; (b4630 <setup+0x84>)
  // os_mutex_create(&payloadAccessLock);
  // os_mutex_create(&reportingSleepProtectionLock);
  // os_mutex_unlock(&reportingSleepProtectionLock);
  // os_mutex_unlock(&payloadAccessLock);
  // os_thread_create(&reportingThreadHandle, "reportThread", OS_THREAD_PRIORITY_DEFAULT, reportingThread, NULL, 1024);
}
   b4616:	b003      	add	sp, #12
   b4618:	f85d eb04 	ldr.w	lr, [sp], #4
    Serial.println("External reset");
   b461c:	f004 b89d 	b.w	b875a <_ZN5Print7printlnEPKc>
}
   b4620:	b003      	add	sp, #12
   b4622:	f85d fb04 	ldr.w	pc, [sp], #4
   b4626:	bf00      	nop
   b4628:	000baaf5 	.word	0x000baaf5
   b462c:	20032274 	.word	0x20032274
   b4630:	000bab04 	.word	0x000bab04

000b4634 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv>:

  bleQuestionCount++;
}

//kBLEConnectedLED turns on when ble connected
void connectCallback(const BlePeerDevice& peer, void* context){
   b4634:	b507      	push	{r0, r1, r2, lr}
  bleQuestionCount = 0;
   b4636:	4b0b      	ldr	r3, [pc, #44]	; (b4664 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x30>)
   b4638:	2200      	movs	r2, #0
   b463a:	601a      	str	r2, [r3, #0]
  WITH_LOCK(Serial) {
   b463c:	f004 ffb2 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4640:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4642:	f7ff fd45 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("connected");
   b4646:	f004 ffad 	bl	b95a4 <_Z16_fetch_usbserialv>
   b464a:	4907      	ldr	r1, [pc, #28]	; (b4668 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x34>)
   b464c:	f004 f885 	bl	b875a <_ZN5Print7printlnEPKc>
  WITH_LOCK(Serial) {
   b4650:	a801      	add	r0, sp, #4
   b4652:	f7ff feb5 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  }
  digitalWrite(kBLEConnectedLED, HIGH);
   b4656:	2101      	movs	r1, #1
   b4658:	2007      	movs	r0, #7
}
   b465a:	b003      	add	sp, #12
   b465c:	f85d eb04 	ldr.w	lr, [sp], #4
  digitalWrite(kBLEConnectedLED, HIGH);
   b4660:	f005 b993 	b.w	b998a <digitalWrite>
   b4664:	20031c58 	.word	0x20031c58
   b4668:	000bb103 	.word	0x000bb103

000b466c <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv>:

//kBLEConnectedLED turns off when ble disconnected
void disconnectCallback(const BlePeerDevice& peer, void* context){
   b466c:	b507      	push	{r0, r1, r2, lr}
  WITH_LOCK(Serial) {
   b466e:	f004 ff99 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4672:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4674:	f7ff fd2c 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("disconnected");
   b4678:	f004 ff94 	bl	b95a4 <_Z16_fetch_usbserialv>
   b467c:	4906      	ldr	r1, [pc, #24]	; (b4698 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv+0x2c>)
   b467e:	f004 f86c 	bl	b875a <_ZN5Print7printlnEPKc>
  WITH_LOCK(Serial) {
   b4682:	a801      	add	r0, sp, #4
   b4684:	f7ff fe9c 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  }
  digitalWrite(kBLEConnectedLED, LOW);
   b4688:	2100      	movs	r1, #0
   b468a:	2007      	movs	r0, #7
   b468c:	b003      	add	sp, #12
   b468e:	f85d eb04 	ldr.w	lr, [sp], #4
  digitalWrite(kBLEConnectedLED, LOW);
   b4692:	f005 b97a 	b.w	b998a <digitalWrite>
   b4696:	bf00      	nop
   b4698:	000bab13 	.word	0x000bab13

000b469c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch(bleQuestionCount){
   b46a0:	4eaf      	ldr	r6, [pc, #700]	; (b4960 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c4>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b46a2:	b095      	sub	sp, #84	; 0x54
   b46a4:	4605      	mov	r5, r0
   b46a6:	460c      	mov	r4, r1
  bleInputBuffer = "";
   b46a8:	48ae      	ldr	r0, [pc, #696]	; (b4964 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b46aa:	49af      	ldr	r1, [pc, #700]	; (b4968 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
   b46ac:	f004 f9c7 	bl	b8a3e <_ZN6StringaSEPKc>
  switch(bleQuestionCount){
   b46b0:	6833      	ldr	r3, [r6, #0]
   b46b2:	2b09      	cmp	r3, #9
   b46b4:	f200 814d 	bhi.w	b4952 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b6>
   b46b8:	e8df f013 	tbh	[pc, r3, lsl #1]
   b46bc:	010701ba 	.word	0x010701ba
   b46c0:	00cb00e6 	.word	0x00cb00e6
   b46c4:	008700a9 	.word	0x008700a9
   b46c8:	00400065 	.word	0x00400065
   b46cc:	000a0025 	.word	0x000a0025
   b46d0:	442c      	add	r4, r5
   b46d2:	1e6f      	subs	r7, r5, #1
	String & operator += (char c)			{concat(c); return (*this);}
   b46d4:	4da3      	ldr	r5, [pc, #652]	; (b4964 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b46d6:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b46d8:	42bc      	cmp	r4, r7
   b46da:	f000 8409 	beq.w	b4ef0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x854>
        WITH_LOCK(Serial) {
   b46de:	f004 ff61 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b46e2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b46e4:	f7ff fcf4 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b46e8:	f004 ff5c 	bl	b95a4 <_Z16_fetch_usbserialv>
   b46ec:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b46f0:	220a      	movs	r2, #10
   b46f2:	f7ff fcde 	bl	b40b2 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b46f6:	a801      	add	r0, sp, #4
   b46f8:	f7ff fe62 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b46fc:	7839      	ldrb	r1, [r7, #0]
   b46fe:	4628      	mov	r0, r5
   b4700:	f004 f9f0 	bl	b8ae4 <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   b4704:	e7e8      	b.n	b46d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c>
   b4706:	442c      	add	r4, r5
   b4708:	1e6f      	subs	r7, r5, #1
   b470a:	4d96      	ldr	r5, [pc, #600]	; (b4964 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b470c:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b470e:	42bc      	cmp	r4, r7
   b4710:	f000 83c2 	beq.w	b4e98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7fc>
        WITH_LOCK(Serial) {
   b4714:	f004 ff46 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4718:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b471a:	f7ff fcd9 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b471e:	f004 ff41 	bl	b95a4 <_Z16_fetch_usbserialv>
   b4722:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4726:	220a      	movs	r2, #10
   b4728:	f7ff fcc3 	bl	b40b2 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b472c:	a801      	add	r0, sp, #4
   b472e:	f7ff fe47 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4732:	7839      	ldrb	r1, [r7, #0]
   b4734:	4628      	mov	r0, r5
   b4736:	f004 f9d5 	bl	b8ae4 <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   b473a:	e7e8      	b.n	b470e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x72>
   b473c:	442c      	add	r4, r5
   b473e:	1e6f      	subs	r7, r5, #1
   b4740:	f8df 8248 	ldr.w	r8, [pc, #584]	; b498c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f0>
   b4744:	4d87      	ldr	r5, [pc, #540]	; (b4964 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4746:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4748:	42a7      	cmp	r7, r4
   b474a:	f000 8358 	beq.w	b4dfe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x762>
        WITH_LOCK(Serial) {
   b474e:	f004 ff29 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4752:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4754:	f7ff fcbc 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4758:	f004 ff24 	bl	b95a4 <_Z16_fetch_usbserialv>
   b475c:	220a      	movs	r2, #10
   b475e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4762:	f7ff fca6 	bl	b40b2 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4766:	a801      	add	r0, sp, #4
   b4768:	f7ff fe2a 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b476c:	7839      	ldrb	r1, [r7, #0]
   b476e:	487d      	ldr	r0, [pc, #500]	; (b4964 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4770:	f004 f9b8 	bl	b8ae4 <_ZN6String6concatEc>
        reportingInterval = atoi(bleInputBuffer) * 1000;
   b4774:	6828      	ldr	r0, [r5, #0]
   b4776:	f005 ff5d 	bl	ba634 <atoi>
   b477a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b477e:	4358      	muls	r0, r3
   b4780:	f8c8 0000 	str.w	r0, [r8]
      for(int i = 0; i < len - 1; i++){
   b4784:	e7e0      	b.n	b4748 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xac>
   b4786:	442c      	add	r4, r5
   b4788:	1e6f      	subs	r7, r5, #1
   b478a:	f8df 81d8 	ldr.w	r8, [pc, #472]	; b4964 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>
        recordingInterval = atoi(bleInputBuffer);
   b478e:	4d77      	ldr	r5, [pc, #476]	; (b496c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d0>)
   b4790:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4792:	42a7      	cmp	r7, r4
   b4794:	f000 82f6 	beq.w	b4d84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6e8>
        WITH_LOCK(Serial) {
   b4798:	f004 ff04 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b479c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b479e:	f7ff fc97 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b47a2:	f004 feff 	bl	b95a4 <_Z16_fetch_usbserialv>
   b47a6:	220a      	movs	r2, #10
   b47a8:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b47ac:	f7ff fc81 	bl	b40b2 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b47b0:	a801      	add	r0, sp, #4
   b47b2:	f7ff fe05 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b47b6:	7839      	ldrb	r1, [r7, #0]
   b47b8:	486a      	ldr	r0, [pc, #424]	; (b4964 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b47ba:	f004 f993 	bl	b8ae4 <_ZN6String6concatEc>
        recordingInterval = atoi(bleInputBuffer);
   b47be:	f8d8 0000 	ldr.w	r0, [r8]
   b47c2:	f005 ff37 	bl	ba634 <atoi>
   b47c6:	6028      	str	r0, [r5, #0]
      for(int i = 0; i < len - 1; i++){
   b47c8:	e7e3      	b.n	b4792 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf6>
   b47ca:	442c      	add	r4, r5
   b47cc:	1e6f      	subs	r7, r5, #1
   b47ce:	f8df 8194 	ldr.w	r8, [pc, #404]	; b4964 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>
   b47d2:	4d67      	ldr	r5, [pc, #412]	; (b4970 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d4>)
   b47d4:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b47d6:	42a7      	cmp	r7, r4
   b47d8:	f000 828c 	beq.w	b4cf4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x658>
        WITH_LOCK(Serial) {
   b47dc:	f004 fee2 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b47e0:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b47e2:	f7ff fc75 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b47e6:	f004 fedd 	bl	b95a4 <_Z16_fetch_usbserialv>
   b47ea:	220a      	movs	r2, #10
   b47ec:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b47f0:	f7ff fc5f 	bl	b40b2 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b47f4:	a801      	add	r0, sp, #4
   b47f6:	f7ff fde3 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b47fa:	7839      	ldrb	r1, [r7, #0]
   b47fc:	4859      	ldr	r0, [pc, #356]	; (b4964 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b47fe:	f004 f971 	bl	b8ae4 <_ZN6String6concatEc>
        sleepPauseDuration = atoi(bleInputBuffer);
   b4802:	f8d8 0000 	ldr.w	r0, [r8]
   b4806:	f005 ff15 	bl	ba634 <atoi>
   b480a:	6028      	str	r0, [r5, #0]
      for(int i = 0; i < len - 1; i++){
   b480c:	e7e3      	b.n	b47d6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13a>
   b480e:	442c      	add	r4, r5
   b4810:	1e6f      	subs	r7, r5, #1
   b4812:	f8df 8150 	ldr.w	r8, [pc, #336]	; b4964 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>
   b4816:	4d57      	ldr	r5, [pc, #348]	; (b4974 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d8>)
   b4818:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b481a:	42bc      	cmp	r4, r7
   b481c:	f000 81ea 	beq.w	b4bf4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x558>
        WITH_LOCK(Serial) {
   b4820:	f004 fec0 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4824:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4826:	f7ff fc53 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b482a:	f004 febb 	bl	b95a4 <_Z16_fetch_usbserialv>
   b482e:	220a      	movs	r2, #10
   b4830:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4834:	f7ff fc3d 	bl	b40b2 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4838:	a801      	add	r0, sp, #4
   b483a:	f7ff fdc1 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b483e:	7839      	ldrb	r1, [r7, #0]
   b4840:	4848      	ldr	r0, [pc, #288]	; (b4964 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4842:	f004 f94f 	bl	b8ae4 <_ZN6String6concatEc>
        dsid = atoi(bleInputBuffer);
   b4846:	f8d8 0000 	ldr.w	r0, [r8]
   b484a:	f005 fef3 	bl	ba634 <atoi>
   b484e:	6028      	str	r0, [r5, #0]
      for(int i = 0; i < len - 1; i++){
   b4850:	e7e3      	b.n	b481a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x17e>
   b4852:	442c      	add	r4, r5
   b4854:	1e6f      	subs	r7, r5, #1
   b4856:	4d43      	ldr	r5, [pc, #268]	; (b4964 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4858:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b485a:	42a7      	cmp	r7, r4
   b485c:	f000 8190 	beq.w	b4b80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e4>
        WITH_LOCK(Serial) {
   b4860:	f004 fea0 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4864:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4866:	f7ff fc33 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b486a:	f004 fe9b 	bl	b95a4 <_Z16_fetch_usbserialv>
   b486e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4872:	220a      	movs	r2, #10
   b4874:	f7ff fc1d 	bl	b40b2 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4878:	a801      	add	r0, sp, #4
   b487a:	f7ff fda1 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b487e:	7839      	ldrb	r1, [r7, #0]
   b4880:	4628      	mov	r0, r5
   b4882:	f004 f92f 	bl	b8ae4 <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   b4886:	e7e8      	b.n	b485a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1be>
   b4888:	442c      	add	r4, r5
   b488a:	1e6f      	subs	r7, r5, #1
        password = bleInputBuffer;
   b488c:	f8df 8100 	ldr.w	r8, [pc, #256]	; b4990 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f4>
   b4890:	4d34      	ldr	r5, [pc, #208]	; (b4964 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4892:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4894:	42bc      	cmp	r4, r7
   b4896:	f000 810b 	beq.w	b4ab0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x414>
        WITH_LOCK(Serial) {
   b489a:	f004 fe83 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b489e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b48a0:	f7ff fc16 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b48a4:	f004 fe7e 	bl	b95a4 <_Z16_fetch_usbserialv>
   b48a8:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b48ac:	220a      	movs	r2, #10
   b48ae:	f7ff fc00 	bl	b40b2 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b48b2:	a801      	add	r0, sp, #4
   b48b4:	f7ff fd84 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b48b8:	7839      	ldrb	r1, [r7, #0]
   b48ba:	4628      	mov	r0, r5
   b48bc:	f004 f912 	bl	b8ae4 <_ZN6String6concatEc>
        password = bleInputBuffer;
   b48c0:	4629      	mov	r1, r5
   b48c2:	4640      	mov	r0, r8
   b48c4:	f004 f8a1 	bl	b8a0a <_ZN6StringaSERKS_>
      for(int i = 0; i < len - 1; i++){
   b48c8:	e7e4      	b.n	b4894 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1f8>
   b48ca:	1e6f      	subs	r7, r5, #1
        ssid = bleInputBuffer;
   b48cc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b4988 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ec>
   b48d0:	4425      	add	r5, r4
   b48d2:	4c24      	ldr	r4, [pc, #144]	; (b4964 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b48d4:	3d02      	subs	r5, #2
      for(int i = 0; i < len - 1; i++){
   b48d6:	42bd      	cmp	r5, r7
   b48d8:	d05c      	beq.n	b4994 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f8>
   b48da:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b48de:	4620      	mov	r0, r4
   b48e0:	f004 f900 	bl	b8ae4 <_ZN6String6concatEc>
        ssid = bleInputBuffer;
   b48e4:	4621      	mov	r1, r4
   b48e6:	4640      	mov	r0, r8
   b48e8:	f004 f88f 	bl	b8a0a <_ZN6StringaSERKS_>
        WITH_LOCK(Serial) {
   b48ec:	f004 fe5a 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b48f0:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b48f2:	f7ff fbed 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b48f6:	f004 fe55 	bl	b95a4 <_Z16_fetch_usbserialv>
   b48fa:	7839      	ldrb	r1, [r7, #0]
   b48fc:	220a      	movs	r2, #10
   b48fe:	f7ff fbd8 	bl	b40b2 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4902:	a801      	add	r0, sp, #4
   b4904:	f7ff fd5c 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      for(int i = 0; i < len - 1; i++){
   b4908:	e7e5      	b.n	b48d6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x23a>
      networkBuffer = networks[networkCount - 1].ssid;
   b490a:	4b1b      	ldr	r3, [pc, #108]	; (b4978 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2dc>)
   b490c:	481b      	ldr	r0, [pc, #108]	; (b497c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e0>)
   b490e:	2238      	movs	r2, #56	; 0x38
   b4910:	fb02 3101 	mla	r1, r2, r1, r3
   b4914:	3104      	adds	r1, #4
   b4916:	f004 f892 	bl	b8a3e <_ZN6StringaSEPKc>
      WITH_LOCK(Serial) {
   b491a:	f004 fe43 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b491e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4920:	f7ff fbd6 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(networkBuffer.length());
   b4924:	f004 fe3e 	bl	b95a4 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4928:	68a1      	ldr	r1, [r4, #8]
   b492a:	220a      	movs	r2, #10
   b492c:	4605      	mov	r5, r0
   b492e:	f003 ff1e 	bl	b876e <_ZN5Print11printNumberEmh>
        n += println();
   b4932:	4628      	mov	r0, r5
   b4934:	f003 ff05 	bl	b8742 <_ZN5Print7printlnEv>
      WITH_LOCK(Serial) {
   b4938:	a801      	add	r0, sp, #4
   b493a:	f7ff fd41 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      txCharacteristic.setValue(networkBuffer);
   b493e:	490f      	ldr	r1, [pc, #60]	; (b497c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e0>)
   b4940:	480f      	ldr	r0, [pc, #60]	; (b4980 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   b4942:	2200      	movs	r2, #0
   b4944:	f002 fcf6 	bl	b7334 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
      txCharacteristic.setValue("]\nEnter network SSID (blank to skip, 'clear' to reset credentials): ");
   b4948:	490e      	ldr	r1, [pc, #56]	; (b4984 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e8>)
   b494a:	2200      	movs	r2, #0
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   b494c:	480c      	ldr	r0, [pc, #48]	; (b4980 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   b494e:	f002 fcf6 	bl	b733e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
  bleQuestionCount++;
   b4952:	6833      	ldr	r3, [r6, #0]
   b4954:	3301      	adds	r3, #1
   b4956:	6033      	str	r3, [r6, #0]
}
   b4958:	b015      	add	sp, #84	; 0x54
   b495a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b495e:	bf00      	nop
   b4960:	20031c58 	.word	0x20031c58
   b4964:	20031c48 	.word	0x20031c48
   b4968:	000bac31 	.word	0x000bac31
   b496c:	20032208 	.word	0x20032208
   b4970:	200322a8 	.word	0x200322a8
   b4974:	20031c60 	.word	0x20031c60
   b4978:	200320c4 	.word	0x200320c4
   b497c:	200320b0 	.word	0x200320b0
   b4980:	2003e67c 	.word	0x2003e67c
   b4984:	000bab67 	.word	0x000bab67
   b4988:	200322b0 	.word	0x200322b0
   b498c:	20032210 	.word	0x20032210
   b4990:	200321dc 	.word	0x200321dc
      WITH_LOCK(Serial) {
   b4994:	f004 fe06 	bl	b95a4 <_Z16_fetch_usbserialv>
	const char * c_str() const { return buffer; }
   b4998:	4db7      	ldr	r5, [pc, #732]	; (b4c78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5dc>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b499a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b499c:	f7ff fb98 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(ssid);
   b49a0:	f004 fe00 	bl	b95a4 <_Z16_fetch_usbserialv>
   b49a4:	6829      	ldr	r1, [r5, #0]
   b49a6:	f003 fed8 	bl	b875a <_ZN5Print7printlnEPKc>
        Serial.println(ssid.length());
   b49aa:	f004 fdfb 	bl	b95a4 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b49ae:	68a9      	ldr	r1, [r5, #8]
   b49b0:	220a      	movs	r2, #10
   b49b2:	4604      	mov	r4, r0
   b49b4:	f003 fedb 	bl	b876e <_ZN5Print11printNumberEmh>
        n += println();
   b49b8:	4620      	mov	r0, r4
   b49ba:	f003 fec2 	bl	b8742 <_ZN5Print7printlnEv>
      WITH_LOCK(Serial) {
   b49be:	a801      	add	r0, sp, #4
   b49c0:	f7ff fcfe 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b49c4:	49ad      	ldr	r1, [pc, #692]	; (b4c7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e0>)
   b49c6:	4628      	mov	r0, r5
   b49c8:	f004 f8d5 	bl	b8b76 <_ZNK6String6equalsEPKc>
      if(ssid == ""){
   b49cc:	4604      	mov	r4, r0
   b49ce:	b300      	cbz	r0, b4a12 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x376>
        bleQuestionCount = 3;
   b49d0:	2303      	movs	r3, #3
   b49d2:	6033      	str	r3, [r6, #0]
   b49d4:	4caa      	ldr	r4, [pc, #680]	; (b4c80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e4>)
        EEPROM.get(0, dsid);
   b49d6:	f005 f805 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
   b49da:	4621      	mov	r1, r4
   b49dc:	2204      	movs	r2, #4
   b49de:	2000      	movs	r0, #0
   b49e0:	f001 fea2 	bl	b6728 <HAL_EEPROM_Get>
        txCharacteristic.setValue("\nCurrent DSID is [");
   b49e4:	49a7      	ldr	r1, [pc, #668]	; (b4c84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e8>)
   b49e6:	48a8      	ldr	r0, [pc, #672]	; (b4c88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b49e8:	2200      	movs	r2, #0
   b49ea:	f002 fca8 	bl	b733e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        if(dsid != -1){
   b49ee:	6821      	ldr	r1, [r4, #0]
   b49f0:	1c4c      	adds	r4, r1, #1
   b49f2:	d00b      	beq.n	b4a0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x370>
          txCharacteristic.setValue(String(dsid));
   b49f4:	220a      	movs	r2, #10
   b49f6:	a801      	add	r0, sp, #4
   b49f8:	f004 f833 	bl	b8a62 <_ZN6StringC1Eih>
   b49fc:	48a2      	ldr	r0, [pc, #648]	; (b4c88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b49fe:	2200      	movs	r2, #0
   b4a00:	a901      	add	r1, sp, #4
   b4a02:	f002 fc97 	bl	b7334 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b4a06:	a801      	add	r0, sp, #4
   b4a08:	f003 ffa0 	bl	b894c <_ZN6StringD1Ev>
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   b4a0c:	499f      	ldr	r1, [pc, #636]	; (b4c8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f0>)
   b4a0e:	2200      	movs	r2, #0
   b4a10:	e79c      	b.n	b494c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>
   b4a12:	499f      	ldr	r1, [pc, #636]	; (b4c90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   b4a14:	4628      	mov	r0, r5
   b4a16:	f004 f8ae 	bl	b8b76 <_ZNK6String6equalsEPKc>
      }else if(ssid == "clear"){
   b4a1a:	4602      	mov	r2, r0
   b4a1c:	2800      	cmp	r0, #0
   b4a1e:	d045      	beq.n	b4aac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x410>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   b4a20:	489c      	ldr	r0, [pc, #624]	; (b4c94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f8>)
   b4a22:	4623      	mov	r3, r4
   b4a24:	6840      	ldr	r0, [r0, #4]
   b4a26:	4622      	mov	r2, r4
   b4a28:	4621      	mov	r1, r4
   b4a2a:	f002 f94d 	bl	b6cc8 <network_clear_credentials>
          bleQuestionCount = 0;
   b4a2e:	6034      	str	r4, [r6, #0]
      txCharacteristic.setValue("\nv5.3 Motionalysis Firmware\nCredentials are currently stored for:\n[");
   b4a30:	4999      	ldr	r1, [pc, #612]	; (b4c98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5fc>)
   b4a32:	4895      	ldr	r0, [pc, #596]	; (b4c88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
      networkCount = WiFi.getCredentials(networks, 5);
   b4a34:	f8df a2b4 	ldr.w	sl, [pc, #692]	; b4cec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x650>
   b4a38:	4d98      	ldr	r5, [pc, #608]	; (b4c9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x600>)
   b4a3a:	4c99      	ldr	r4, [pc, #612]	; (b4ca0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x604>)
        txCharacteristic.setValue(networkBuffer);
   b4a3c:	f8df 8248 	ldr.w	r8, [pc, #584]	; b4c88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>
        txCharacteristic.setValue(",\n");
   b4a40:	f8df 92ac 	ldr.w	r9, [pc, #684]	; b4cf0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x654>
      txCharacteristic.setValue("\nv5.3 Motionalysis Firmware\nCredentials are currently stored for:\n[");
   b4a44:	2200      	movs	r2, #0
   b4a46:	f002 fc7a 	bl	b733e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      networkCount = WiFi.getCredentials(networks, 5);
   b4a4a:	4996      	ldr	r1, [pc, #600]	; (b4ca4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x608>)
   b4a4c:	4891      	ldr	r0, [pc, #580]	; (b4c94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f8>)
   b4a4e:	2205      	movs	r2, #5
   b4a50:	f004 fe04 	bl	b965c <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>
      for(int i = 0; i < networkCount - 1; i++){
   b4a54:	2700      	movs	r7, #0
      networkCount = WiFi.getCredentials(networks, 5);
   b4a56:	f8ca 0000 	str.w	r0, [sl]
      for(int i = 0; i < networkCount - 1; i++){
   b4a5a:	f8da 1000 	ldr.w	r1, [sl]
   b4a5e:	3901      	subs	r1, #1
   b4a60:	42b9      	cmp	r1, r7
   b4a62:	f77f af52 	ble.w	b490a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26e>
        networkBuffer = networks[i].ssid;
   b4a66:	4629      	mov	r1, r5
   b4a68:	4620      	mov	r0, r4
   b4a6a:	f003 ffe8 	bl	b8a3e <_ZN6StringaSEPKc>
        WITH_LOCK(Serial) {
   b4a6e:	f004 fd99 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4a72:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4a74:	f7ff fb2c 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(networkBuffer.length());
   b4a78:	f004 fd94 	bl	b95a4 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4a7c:	68a1      	ldr	r1, [r4, #8]
   b4a7e:	220a      	movs	r2, #10
   b4a80:	4683      	mov	fp, r0
   b4a82:	f003 fe74 	bl	b876e <_ZN5Print11printNumberEmh>
        n += println();
   b4a86:	4658      	mov	r0, fp
   b4a88:	f003 fe5b 	bl	b8742 <_ZN5Print7printlnEv>
        WITH_LOCK(Serial) {
   b4a8c:	a801      	add	r0, sp, #4
   b4a8e:	f7ff fc97 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        txCharacteristic.setValue(networkBuffer);
   b4a92:	2200      	movs	r2, #0
   b4a94:	4621      	mov	r1, r4
   b4a96:	4640      	mov	r0, r8
   b4a98:	f002 fc4c 	bl	b7334 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        txCharacteristic.setValue(",\n");
   b4a9c:	2200      	movs	r2, #0
   b4a9e:	4649      	mov	r1, r9
   b4aa0:	4640      	mov	r0, r8
   b4aa2:	f002 fc4c 	bl	b733e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      for(int i = 0; i < networkCount - 1; i++){
   b4aa6:	3701      	adds	r7, #1
   b4aa8:	3538      	adds	r5, #56	; 0x38
   b4aaa:	e7d6      	b.n	b4a5a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3be>
        txCharacteristic.setValue("\nEnter network password: ");
   b4aac:	497e      	ldr	r1, [pc, #504]	; (b4ca8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60c>)
   b4aae:	e74d      	b.n	b494c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>
      WITH_LOCK(Serial) {
   b4ab0:	f004 fd78 	bl	b95a4 <_Z16_fetch_usbserialv>
	const char * c_str() const { return buffer; }
   b4ab4:	4c7d      	ldr	r4, [pc, #500]	; (b4cac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x610>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4ab6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4ab8:	f7ff fb0a 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(password);
   b4abc:	f004 fd72 	bl	b95a4 <_Z16_fetch_usbserialv>
   b4ac0:	6821      	ldr	r1, [r4, #0]
   b4ac2:	f003 fe4a 	bl	b875a <_ZN5Print7printlnEPKc>
        Serial.println(password.length());
   b4ac6:	f004 fd6d 	bl	b95a4 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4aca:	68a1      	ldr	r1, [r4, #8]
   b4acc:	4605      	mov	r5, r0
   b4ace:	220a      	movs	r2, #10
   b4ad0:	f003 fe4d 	bl	b876e <_ZN5Print11printNumberEmh>
        n += println();
   b4ad4:	4628      	mov	r0, r5
   b4ad6:	f003 fe34 	bl	b8742 <_ZN5Print7printlnEv>
      WITH_LOCK(Serial) {
   b4ada:	a801      	add	r0, sp, #4
   b4adc:	f7ff fc70 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4ae0:	4b65      	ldr	r3, [pc, #404]	; (b4c78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5dc>)
   b4ae2:	6825      	ldr	r5, [r4, #0]
   b4ae4:	f8d3 8000 	ldr.w	r8, [r3]
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4ae8:	f1b8 0f00 	cmp.w	r8, #0
   b4aec:	d044      	beq.n	b4b78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4dc>
   b4aee:	4640      	mov	r0, r8
   b4af0:	f005 fe3c 	bl	ba76c <strlen>
   b4af4:	4607      	mov	r7, r0
   b4af6:	2d00      	cmp	r5, #0
   b4af8:	d040      	beq.n	b4b7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e0>
   b4afa:	4628      	mov	r0, r5
   b4afc:	f005 fe36 	bl	ba76c <strlen>
   b4b00:	4604      	mov	r4, r0
        memset(&creds, 0, sizeof(creds));
   b4b02:	2238      	movs	r2, #56	; 0x38
   b4b04:	2100      	movs	r1, #0
   b4b06:	a806      	add	r0, sp, #24
   b4b08:	f005 fde8 	bl	ba6dc <memset>
        creds.size = sizeof(creds);
   b4b0c:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b4b0e:	e9cd 3801 	strd	r3, r8, [sp, #4]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4b12:	4860      	ldr	r0, [pc, #384]	; (b4c94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f8>)
        creds.password_len = passwordLen;
   b4b14:	9405      	str	r4, [sp, #20]
        creds.security = WLanSecurityType(security);
   b4b16:	2303      	movs	r3, #3
   b4b18:	f88d 3018 	strb.w	r3, [sp, #24]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4b1c:	2300      	movs	r3, #0
   b4b1e:	aa01      	add	r2, sp, #4
   b4b20:	4619      	mov	r1, r3
   b4b22:	6840      	ldr	r0, [r0, #4]
        creds.password = password;
   b4b24:	e9cd 7503 	strd	r7, r5, [sp, #12]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4b28:	f002 f8c6 	bl	b6cb8 <network_set_credentials>
      WITH_LOCK(Serial) {
   b4b2c:	f004 fd3a 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4b30:	9000      	str	r0, [sp, #0]
      { _M_device.lock(); }
   b4b32:	f7ff facd 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("\n\nCredentials set with ssid: " + ssid + "\npassword: " + password + "\n\n");
   b4b36:	f004 fd35 	bl	b95a4 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4b3a:	495d      	ldr	r1, [pc, #372]	; (b4cb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x614>)
   b4b3c:	4604      	mov	r4, r0
   b4b3e:	a801      	add	r0, sp, #4
   b4b40:	f003 ff4f 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
   b4b44:	494c      	ldr	r1, [pc, #304]	; (b4c78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5dc>)
   b4b46:	a801      	add	r0, sp, #4
   b4b48:	f003 ffea 	bl	b8b20 <_ZplRK15StringSumHelperRK6String>
   b4b4c:	4959      	ldr	r1, [pc, #356]	; (b4cb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x618>)
   b4b4e:	f003 fff3 	bl	b8b38 <_ZplRK15StringSumHelperPKc>
   b4b52:	4956      	ldr	r1, [pc, #344]	; (b4cac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x610>)
   b4b54:	f003 ffe4 	bl	b8b20 <_ZplRK15StringSumHelperRK6String>
   b4b58:	4957      	ldr	r1, [pc, #348]	; (b4cb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x61c>)
   b4b5a:	f003 ffed 	bl	b8b38 <_ZplRK15StringSumHelperPKc>
   b4b5e:	6801      	ldr	r1, [r0, #0]
   b4b60:	4620      	mov	r0, r4
   b4b62:	f003 fdfa 	bl	b875a <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4b66:	a801      	add	r0, sp, #4
   b4b68:	f003 fef0 	bl	b894c <_ZN6StringD1Ev>
      WITH_LOCK(Serial) {
   b4b6c:	4668      	mov	r0, sp
   b4b6e:	f7ff fc27 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      txCharacteristic.setValue("\nEnter 'test' to test credentials (blank to skip): ");
   b4b72:	4952      	ldr	r1, [pc, #328]	; (b4cbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x620>)
   b4b74:	2200      	movs	r2, #0
   b4b76:	e6e9      	b.n	b494c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4b78:	4647      	mov	r7, r8
   b4b7a:	e7bc      	b.n	b4af6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x45a>
   b4b7c:	462c      	mov	r4, r5
   b4b7e:	e7c0      	b.n	b4b02 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x466>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4b80:	494f      	ldr	r1, [pc, #316]	; (b4cc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x624>)
   b4b82:	4850      	ldr	r0, [pc, #320]	; (b4cc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x628>)
   b4b84:	f003 fff7 	bl	b8b76 <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == "test" && WiFi.hasCredentials()){
   b4b88:	2800      	cmp	r0, #0
   b4b8a:	f43f af23 	beq.w	b49d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x338>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4b8e:	4c41      	ldr	r4, [pc, #260]	; (b4c94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f8>)
        return network_has_credentials(*this, 0, NULL);
   b4b90:	2200      	movs	r2, #0
   b4b92:	6860      	ldr	r0, [r4, #4]
   b4b94:	4611      	mov	r1, r2
   b4b96:	f002 f887 	bl	b6ca8 <network_has_credentials>
   b4b9a:	2800      	cmp	r0, #0
   b4b9c:	f43f af1a 	beq.w	b49d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x338>
        WiFi.on();
   b4ba0:	4620      	mov	r0, r4
   b4ba2:	f7ff fab8 	bl	b4116 <_ZN5spark9WiFiClass2onEv>
        WiFi.connect();
   b4ba6:	2100      	movs	r1, #0
   b4ba8:	4620      	mov	r0, r4
   b4baa:	f7ff fac0 	bl	b412e <_ZN5spark9WiFiClass7connectEj>
        return network_connecting(*this, 0, NULL);
   b4bae:	2200      	movs	r2, #0
   b4bb0:	6860      	ldr	r0, [r4, #4]
   b4bb2:	4611      	mov	r1, r2
   b4bb4:	f002 f840 	bl	b6c38 <network_connecting>
        while(WiFi.connecting() || !WiFi.ready()){
   b4bb8:	b178      	cbz	r0, b4bda <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x53e>
            Serial.println("timeout");
   b4bba:	f004 fcf3 	bl	b95a4 <_Z16_fetch_usbserialv>
   b4bbe:	4942      	ldr	r1, [pc, #264]	; (b4cc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x62c>)
   b4bc0:	f003 fdcb 	bl	b875a <_ZN5Print7printlnEPKc>
            wifiTest = false;
   b4bc4:	2400      	movs	r4, #0
        WiFi.off();
   b4bc6:	4833      	ldr	r0, [pc, #204]	; (b4c94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f8>)
   b4bc8:	f7ff faab 	bl	b4122 <_ZN5spark9WiFiClass3offEv>
        if(wifiTest){
   b4bcc:	b164      	cbz	r4, b4be8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x54c>
          txCharacteristic.setValue("Success!\n");
   b4bce:	493f      	ldr	r1, [pc, #252]	; (b4ccc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x630>)
   b4bd0:	482d      	ldr	r0, [pc, #180]	; (b4c88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b4bd2:	2200      	movs	r2, #0
   b4bd4:	f002 fbb3 	bl	b733e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
   b4bd8:	e6fc      	b.n	b49d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x338>
        while(WiFi.connecting() || !WiFi.ready()){
   b4bda:	4620      	mov	r0, r4
   b4bdc:	f7ff faac 	bl	b4138 <_ZN5spark9WiFiClass5readyEv>
   b4be0:	4604      	mov	r4, r0
   b4be2:	2800      	cmp	r0, #0
   b4be4:	d0e9      	beq.n	b4bba <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x51e>
   b4be6:	e7ee      	b.n	b4bc6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x52a>
          txCharacteristic.setValue("ERROR: WiFi connection timeout\n");
   b4be8:	4939      	ldr	r1, [pc, #228]	; (b4cd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x634>)
   b4bea:	4827      	ldr	r0, [pc, #156]	; (b4c88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b4bec:	4622      	mov	r2, r4
   b4bee:	f002 fba6 	bl	b733e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
   b4bf2:	e71c      	b.n	b4a2e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x392>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b4bf4:	4921      	ldr	r1, [pc, #132]	; (b4c7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e0>)
   b4bf6:	4833      	ldr	r0, [pc, #204]	; (b4cc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x628>)
   b4bf8:	f003 ffbd 	bl	b8b76 <_ZNK6String6equalsEPKc>
      if(bleInputBuffer != ""){
   b4bfc:	4604      	mov	r4, r0
   b4bfe:	b998      	cbnz	r0, b4c28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58c>
        EEPROM.put(kDsidEEPROMAddress, dsid);
   b4c00:	f004 fef0 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b4c04:	491e      	ldr	r1, [pc, #120]	; (b4c80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e4>)
   b4c06:	2204      	movs	r2, #4
   b4c08:	4620      	mov	r0, r4
   b4c0a:	f001 fd95 	bl	b6738 <HAL_EEPROM_Put>
        WITH_LOCK(Serial) {
   b4c0e:	f004 fcc9 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4c12:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4c14:	f7ff fa5c 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("dsid entered");
   b4c18:	f004 fcc4 	bl	b95a4 <_Z16_fetch_usbserialv>
   b4c1c:	492d      	ldr	r1, [pc, #180]	; (b4cd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x638>)
   b4c1e:	f003 fd9c 	bl	b875a <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b4c22:	a801      	add	r0, sp, #4
   b4c24:	f7ff fbcc 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      EEPROM.get(kDsidEEPROMAddress, dsid);
   b4c28:	f004 fedc 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b4c2c:	2204      	movs	r2, #4
   b4c2e:	4914      	ldr	r1, [pc, #80]	; (b4c80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e4>)
   b4c30:	2000      	movs	r0, #0
   b4c32:	f001 fd79 	bl	b6728 <HAL_EEPROM_Get>
      Serial.println("dsid: " + dsid);
   b4c36:	f004 fcb5 	bl	b95a4 <_Z16_fetch_usbserialv>
   b4c3a:	682b      	ldr	r3, [r5, #0]
   b4c3c:	4926      	ldr	r1, [pc, #152]	; (b4cd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x63c>)
   b4c3e:	4419      	add	r1, r3
   b4c40:	f003 fd8b 	bl	b875a <_ZN5Print7printlnEPKc>
      txCharacteristic.setValue("\nCurrent value for sleep pause duration is [");
   b4c44:	4925      	ldr	r1, [pc, #148]	; (b4cdc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x640>)
   b4c46:	4810      	ldr	r0, [pc, #64]	; (b4c88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b4c48:	2200      	movs	r2, #0
   b4c4a:	f002 fb78 	bl	b733e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(recordingInterval != -1){
   b4c4e:	4b24      	ldr	r3, [pc, #144]	; (b4ce0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x644>)
   b4c50:	681b      	ldr	r3, [r3, #0]
   b4c52:	3301      	adds	r3, #1
   b4c54:	d00d      	beq.n	b4c72 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d6>
        txCharacteristic.setValue(String(sleepPauseDuration));
   b4c56:	4b23      	ldr	r3, [pc, #140]	; (b4ce4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x648>)
   b4c58:	220a      	movs	r2, #10
   b4c5a:	6819      	ldr	r1, [r3, #0]
   b4c5c:	a801      	add	r0, sp, #4
   b4c5e:	f003 ff00 	bl	b8a62 <_ZN6StringC1Eih>
   b4c62:	4809      	ldr	r0, [pc, #36]	; (b4c88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b4c64:	2200      	movs	r2, #0
   b4c66:	a901      	add	r1, sp, #4
   b4c68:	f002 fb64 	bl	b7334 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b4c6c:	a801      	add	r0, sp, #4
   b4c6e:	f003 fe6d 	bl	b894c <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter sleep pause duration as an integer in seconds (blank to skip): ");
   b4c72:	491d      	ldr	r1, [pc, #116]	; (b4ce8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64c>)
   b4c74:	2200      	movs	r2, #0
   b4c76:	e669      	b.n	b494c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>
   b4c78:	200322b0 	.word	0x200322b0
   b4c7c:	000bac31 	.word	0x000bac31
   b4c80:	20031c60 	.word	0x20031c60
   b4c84:	000babac 	.word	0x000babac
   b4c88:	2003e67c 	.word	0x2003e67c
   b4c8c:	000babbf 	.word	0x000babbf
   b4c90:	000babe5 	.word	0x000babe5
   b4c94:	2003e710 	.word	0x2003e710
   b4c98:	000bab20 	.word	0x000bab20
   b4c9c:	200320c8 	.word	0x200320c8
   b4ca0:	200320b0 	.word	0x200320b0
   b4ca4:	200320c4 	.word	0x200320c4
   b4ca8:	000babeb 	.word	0x000babeb
   b4cac:	200321dc 	.word	0x200321dc
   b4cb0:	000bac05 	.word	0x000bac05
   b4cb4:	000bac23 	.word	0x000bac23
   b4cb8:	000bac2f 	.word	0x000bac2f
   b4cbc:	000bac32 	.word	0x000bac32
   b4cc0:	000bac66 	.word	0x000bac66
   b4cc4:	20031c48 	.word	0x20031c48
   b4cc8:	000bac6b 	.word	0x000bac6b
   b4ccc:	000bac73 	.word	0x000bac73
   b4cd0:	000bac7d 	.word	0x000bac7d
   b4cd4:	000bac9d 	.word	0x000bac9d
   b4cd8:	000bacaa 	.word	0x000bacaa
   b4cdc:	000bacb1 	.word	0x000bacb1
   b4ce0:	20032208 	.word	0x20032208
   b4ce4:	200322a8 	.word	0x200322a8
   b4ce8:	000bacde 	.word	0x000bacde
   b4cec:	200320c0 	.word	0x200320c0
   b4cf0:	000bab64 	.word	0x000bab64
   b4cf4:	49a9      	ldr	r1, [pc, #676]	; (b4f9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x900>)
   b4cf6:	48aa      	ldr	r0, [pc, #680]	; (b4fa0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x904>)
   b4cf8:	f003 ff3d 	bl	b8b76 <_ZNK6String6equalsEPKc>
      if(bleInputBuffer != ""){
   b4cfc:	b9a0      	cbnz	r0, b4d28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x68c>
        EEPROM.put(kSleepPauseDurationEEPROMAddress, sleepPauseDuration);
   b4cfe:	f004 fe71 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b4d02:	49a8      	ldr	r1, [pc, #672]	; (b4fa4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x908>)
   b4d04:	2204      	movs	r2, #4
   b4d06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4d0a:	f001 fd15 	bl	b6738 <HAL_EEPROM_Put>
        WITH_LOCK(Serial) {
   b4d0e:	f004 fc49 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4d12:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4d14:	f7ff f9dc 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("sleep pause duration entered");
   b4d18:	f004 fc44 	bl	b95a4 <_Z16_fetch_usbserialv>
   b4d1c:	49a2      	ldr	r1, [pc, #648]	; (b4fa8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90c>)
   b4d1e:	f003 fd1c 	bl	b875a <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b4d22:	a801      	add	r0, sp, #4
   b4d24:	f7ff fb4c 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      EEPROM.get(kSleepPauseDurationEEPROMAddress, sleepPauseDuration);
   b4d28:	f004 fe5c 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b4d2c:	2204      	movs	r2, #4
   b4d2e:	499d      	ldr	r1, [pc, #628]	; (b4fa4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x908>)
   b4d30:	4c9e      	ldr	r4, [pc, #632]	; (b4fac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x910>)
   b4d32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4d36:	f001 fcf7 	bl	b6728 <HAL_EEPROM_Get>
      Serial.println("sleep pause duration: " + sleepPauseDuration);
   b4d3a:	f004 fc33 	bl	b95a4 <_Z16_fetch_usbserialv>
   b4d3e:	682b      	ldr	r3, [r5, #0]
   b4d40:	499b      	ldr	r1, [pc, #620]	; (b4fb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x914>)
   b4d42:	4419      	add	r1, r3
   b4d44:	f003 fd09 	bl	b875a <_ZN5Print7printlnEPKc>
      EEPROM.get(kRecordingIntervalEEPROMAddress, recordingInterval);
   b4d48:	f004 fe4c 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
   b4d4c:	2204      	movs	r2, #4
   b4d4e:	4621      	mov	r1, r4
   b4d50:	2064      	movs	r0, #100	; 0x64
   b4d52:	f001 fce9 	bl	b6728 <HAL_EEPROM_Get>
      txCharacteristic.setValue("\nCurrent value for data collection interval is [");
   b4d56:	4997      	ldr	r1, [pc, #604]	; (b4fb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x918>)
   b4d58:	4897      	ldr	r0, [pc, #604]	; (b4fb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x91c>)
   b4d5a:	2200      	movs	r2, #0
   b4d5c:	f002 faef 	bl	b733e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(recordingInterval != -1){
   b4d60:	6821      	ldr	r1, [r4, #0]
   b4d62:	1c48      	adds	r0, r1, #1
   b4d64:	d00b      	beq.n	b4d7e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6e2>
        txCharacteristic.setValue(String(recordingInterval));
   b4d66:	220a      	movs	r2, #10
   b4d68:	a801      	add	r0, sp, #4
   b4d6a:	f003 fe7a 	bl	b8a62 <_ZN6StringC1Eih>
   b4d6e:	4892      	ldr	r0, [pc, #584]	; (b4fb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x91c>)
   b4d70:	2200      	movs	r2, #0
   b4d72:	a901      	add	r1, sp, #4
   b4d74:	f002 fade 	bl	b7334 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b4d78:	a801      	add	r0, sp, #4
   b4d7a:	f003 fde7 	bl	b894c <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between data collection as an integer in milliseconds (blank to skip): ");
   b4d7e:	498f      	ldr	r1, [pc, #572]	; (b4fbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x920>)
   b4d80:	2200      	movs	r2, #0
   b4d82:	e5e3      	b.n	b494c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4d84:	4985      	ldr	r1, [pc, #532]	; (b4f9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x900>)
   b4d86:	4886      	ldr	r0, [pc, #536]	; (b4fa0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x904>)
   b4d88:	f003 fef5 	bl	b8b76 <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == ""){
   b4d8c:	b130      	cbz	r0, b4d9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x700>
        EEPROM.get(kRecordingIntervalEEPROMAddress, recordingInterval);
   b4d8e:	f004 fe29 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
   b4d92:	4986      	ldr	r1, [pc, #536]	; (b4fac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x910>)
   b4d94:	2204      	movs	r2, #4
   b4d96:	2064      	movs	r0, #100	; 0x64
   b4d98:	f001 fcc6 	bl	b6728 <HAL_EEPROM_Get>
      EEPROM.put(kRecordingIntervalEEPROMAddress, recordingInterval);
   b4d9c:	f004 fe22 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
   b4da0:	4c87      	ldr	r4, [pc, #540]	; (b4fc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x924>)
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b4da2:	4982      	ldr	r1, [pc, #520]	; (b4fac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x910>)
   b4da4:	2204      	movs	r2, #4
   b4da6:	2064      	movs	r0, #100	; 0x64
   b4da8:	f001 fcc6 	bl	b6738 <HAL_EEPROM_Put>
      EEPROM.get(kRecordingIntervalEEPROMAddress, recordingInterval);
   b4dac:	f004 fe1a 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b4db0:	497e      	ldr	r1, [pc, #504]	; (b4fac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x910>)
   b4db2:	2204      	movs	r2, #4
   b4db4:	2064      	movs	r0, #100	; 0x64
   b4db6:	f001 fcb7 	bl	b6728 <HAL_EEPROM_Get>
      EEPROM.get(kReportingIntervalEEPROMAddress, reportingInterval);
   b4dba:	f004 fe13 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
   b4dbe:	2204      	movs	r2, #4
   b4dc0:	4621      	mov	r1, r4
   b4dc2:	20c8      	movs	r0, #200	; 0xc8
   b4dc4:	f001 fcb0 	bl	b6728 <HAL_EEPROM_Get>
      txCharacteristic.setValue("\nCurrent value for WiFi connection interval is [");
   b4dc8:	2200      	movs	r2, #0
   b4dca:	497e      	ldr	r1, [pc, #504]	; (b4fc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x928>)
   b4dcc:	487a      	ldr	r0, [pc, #488]	; (b4fb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x91c>)
   b4dce:	f002 fab6 	bl	b733e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(reportingInterval != -1){
   b4dd2:	6823      	ldr	r3, [r4, #0]
   b4dd4:	1c5a      	adds	r2, r3, #1
   b4dd6:	d00f      	beq.n	b4df8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x75c>
        txCharacteristic.setValue(String(reportingInterval / 1000));
   b4dd8:	220a      	movs	r2, #10
   b4dda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b4dde:	a801      	add	r0, sp, #4
   b4de0:	fb93 f1f1 	sdiv	r1, r3, r1
   b4de4:	f003 fe3d 	bl	b8a62 <_ZN6StringC1Eih>
   b4de8:	4873      	ldr	r0, [pc, #460]	; (b4fb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x91c>)
   b4dea:	2200      	movs	r2, #0
   b4dec:	a901      	add	r1, sp, #4
   b4dee:	f002 faa1 	bl	b7334 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b4df2:	a801      	add	r0, sp, #4
   b4df4:	f003 fdaa 	bl	b894c <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between WiFi connections as an integer in seconds (blank to skip): ");
   b4df8:	4973      	ldr	r1, [pc, #460]	; (b4fc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x92c>)
   b4dfa:	2200      	movs	r2, #0
   b4dfc:	e5a6      	b.n	b494c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>
   b4dfe:	4967      	ldr	r1, [pc, #412]	; (b4f9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x900>)
   b4e00:	4867      	ldr	r0, [pc, #412]	; (b4fa0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x904>)
   b4e02:	f003 feb8 	bl	b8b76 <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == ""){
   b4e06:	b130      	cbz	r0, b4e16 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x77a>
        EEPROM.get(kReportingIntervalEEPROMAddress, reportingInterval);
   b4e08:	f004 fdec 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
   b4e0c:	496c      	ldr	r1, [pc, #432]	; (b4fc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x924>)
   b4e0e:	2204      	movs	r2, #4
   b4e10:	20c8      	movs	r0, #200	; 0xc8
   b4e12:	f001 fc89 	bl	b6728 <HAL_EEPROM_Get>
      EEPROM.put(kReportingIntervalEEPROMAddress, reportingInterval);
   b4e16:	f004 fde5 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b4e1a:	4969      	ldr	r1, [pc, #420]	; (b4fc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x924>)
   b4e1c:	2204      	movs	r2, #4
   b4e1e:	20c8      	movs	r0, #200	; 0xc8
   b4e20:	f001 fc8a 	bl	b6738 <HAL_EEPROM_Put>
      EEPROM.get(kReportingIntervalEEPROMAddress, reportingInterval);
   b4e24:	f004 fdde 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b4e28:	4965      	ldr	r1, [pc, #404]	; (b4fc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x924>)
   b4e2a:	2204      	movs	r2, #4
   b4e2c:	20c8      	movs	r0, #200	; 0xc8
   b4e2e:	f001 fc7b 	bl	b6728 <HAL_EEPROM_Get>
      WITH_LOCK(Serial) {
   b4e32:	f004 fbb7 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4e36:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4e38:	f7ff f94a 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(reportingInterval);
   b4e3c:	f004 fbb2 	bl	b95a4 <_Z16_fetch_usbserialv>
   b4e40:	f8d8 4000 	ldr.w	r4, [r8]
        if (n < 0 && base == 10) {
   b4e44:	2c00      	cmp	r4, #0
   b4e46:	4605      	mov	r5, r0
   b4e48:	da24      	bge.n	b4e94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7f8>
            t = print('-');
   b4e4a:	212d      	movs	r1, #45	; 0x2d
   b4e4c:	f003 fc70 	bl	b8730 <_ZN5Print5printEc>
            val = -n;
   b4e50:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b4e52:	220a      	movs	r2, #10
   b4e54:	4628      	mov	r0, r5
   b4e56:	f003 fc8a 	bl	b876e <_ZN5Print11printNumberEmh>
   b4e5a:	4c5c      	ldr	r4, [pc, #368]	; (b4fcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x930>)
        n += println();
   b4e5c:	4628      	mov	r0, r5
   b4e5e:	f003 fc70 	bl	b8742 <_ZN5Print7printlnEv>
      WITH_LOCK(Serial) {
   b4e62:	a801      	add	r0, sp, #4
   b4e64:	f7ff faac 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      EEPROM.get(kReportingModeEEPROMAddress, recordingMode);
   b4e68:	f004 fdbc 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
   b4e6c:	4621      	mov	r1, r4
   b4e6e:	2204      	movs	r2, #4
   b4e70:	f44f 70b6 	mov.w	r0, #364	; 0x16c
   b4e74:	f001 fc58 	bl	b6728 <HAL_EEPROM_Get>
      if(recordingMode == 1) {
   b4e78:	6823      	ldr	r3, [r4, #0]
        txCharacteristic.setValue("\nCurrent recording mode is: normal");
   b4e7a:	484f      	ldr	r0, [pc, #316]	; (b4fb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x91c>)
      if(recordingMode == 1) {
   b4e7c:	2b01      	cmp	r3, #1
        txCharacteristic.setValue("\nCurrent recording mode is: by exception\n");
   b4e7e:	f04f 0200 	mov.w	r2, #0
   b4e82:	bf0e      	itee	eq
   b4e84:	4952      	ldreq	r1, [pc, #328]	; (b4fd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x934>)
        txCharacteristic.setValue("\nCurrent recording mode is: normal");
   b4e86:	4953      	ldrne	r1, [pc, #332]	; (b4fd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x938>)
        recordingMode = 0;
   b4e88:	6022      	strne	r2, [r4, #0]
        txCharacteristic.setValue("\nCurrent recording mode is: normal");
   b4e8a:	f002 fa58 	bl	b733e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      txCharacteristic.setValue("\nEnter 'y' to enable exception recording, 'n' to use normal recording (blank to skip): ");
   b4e8e:	4952      	ldr	r1, [pc, #328]	; (b4fd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x93c>)
   b4e90:	2200      	movs	r2, #0
   b4e92:	e55b      	b.n	b494c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>
            val = n;
   b4e94:	4621      	mov	r1, r4
   b4e96:	e7dc      	b.n	b4e52 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7b6>
   b4e98:	4950      	ldr	r1, [pc, #320]	; (b4fdc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x940>)
   b4e9a:	4841      	ldr	r0, [pc, #260]	; (b4fa0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x904>)
   b4e9c:	4c4b      	ldr	r4, [pc, #300]	; (b4fcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x930>)
   b4e9e:	f003 fe6a 	bl	b8b76 <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == "y"){
   b4ea2:	4605      	mov	r5, r0
   b4ea4:	b1e0      	cbz	r0, b4ee0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x844>
        System.updatesEnabled();
   b4ea6:	f7ff f91c 	bl	b40e2 <_ZN11SystemClass14updatesEnabledEv.isra.0>
        recordingMode = 1;
   b4eaa:	2301      	movs	r3, #1
   b4eac:	6023      	str	r3, [r4, #0]
        EEPROM.put(kReportingModeEEPROMAddress, recordingMode);
   b4eae:	f004 fd99 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b4eb2:	2204      	movs	r2, #4
   b4eb4:	4621      	mov	r1, r4
   b4eb6:	f44f 70b6 	mov.w	r0, #364	; 0x16c
   b4eba:	f001 fc3d 	bl	b6738 <HAL_EEPROM_Put>
        EEPROM.get(kReportingModeEEPROMAddress, recordingMode);
   b4ebe:	f004 fd91 	bl	b99e4 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b4ec2:	2204      	movs	r2, #4
   b4ec4:	4621      	mov	r1, r4
   b4ec6:	f44f 70b6 	mov.w	r0, #364	; 0x16c
   b4eca:	f001 fc2d 	bl	b6728 <HAL_EEPROM_Get>
      Serial.printlnf("reporting mode: %i", recordingMode);
   b4ece:	f004 fb69 	bl	b95a4 <_Z16_fetch_usbserialv>
   b4ed2:	6822      	ldr	r2, [r4, #0]
   b4ed4:	4942      	ldr	r1, [pc, #264]	; (b4fe0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x944>)
   b4ed6:	f7ff f910 	bl	b40fa <_ZN5Print8printlnfEPKcz>
      txCharacteristic.setValue("\nEnter 'ota' to wait for OTA update (blank to skip): ");
   b4eda:	4942      	ldr	r1, [pc, #264]	; (b4fe4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x948>)
   b4edc:	2200      	movs	r2, #0
   b4ede:	e535      	b.n	b494c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>
   b4ee0:	4941      	ldr	r1, [pc, #260]	; (b4fe8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94c>)
   b4ee2:	482f      	ldr	r0, [pc, #188]	; (b4fa0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x904>)
   b4ee4:	f003 fe47 	bl	b8b76 <_ZNK6String6equalsEPKc>
      else if(bleInputBuffer == "n"){
   b4ee8:	2800      	cmp	r0, #0
   b4eea:	d0f0      	beq.n	b4ece <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x832>
        recordingMode = 0;
   b4eec:	6025      	str	r5, [r4, #0]
   b4eee:	e7de      	b.n	b4eae <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x812>
   b4ef0:	493e      	ldr	r1, [pc, #248]	; (b4fec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x950>)
   b4ef2:	482b      	ldr	r0, [pc, #172]	; (b4fa0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x904>)
   b4ef4:	4c3e      	ldr	r4, [pc, #248]	; (b4ff0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x954>)
   b4ef6:	f003 fe3e 	bl	b8b76 <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == "ota"){
   b4efa:	b1a8      	cbz	r0, b4f28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88c>
        System.updatesEnabled();
   b4efc:	f7ff f8f1 	bl	b40e2 <_ZN11SystemClass14updatesEnabledEv.isra.0>
        waitingForOTA = true;
   b4f00:	2301      	movs	r3, #1
   b4f02:	7023      	strb	r3, [r4, #0]
        System.updatesEnabled();
   b4f04:	f7ff f8ed 	bl	b40e2 <_ZN11SystemClass14updatesEnabledEv.isra.0>
        WiFi.on();
   b4f08:	483a      	ldr	r0, [pc, #232]	; (b4ff4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x958>)
        while(!WiFi.ready()) {
   b4f0a:	4c3a      	ldr	r4, [pc, #232]	; (b4ff4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x958>)
        WiFi.on();
   b4f0c:	f7ff f903 	bl	b4116 <_ZN5spark9WiFiClass2onEv>
        WiFi.connect();
   b4f10:	4838      	ldr	r0, [pc, #224]	; (b4ff4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x958>)
   b4f12:	2100      	movs	r1, #0
   b4f14:	f7ff f90b 	bl	b412e <_ZN5spark9WiFiClass7connectEj>
        while(!WiFi.ready()) {
   b4f18:	4620      	mov	r0, r4
   b4f1a:	f7ff f90d 	bl	b4138 <_ZN5spark9WiFiClass5readyEv>
   b4f1e:	b948      	cbnz	r0, b4f34 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x898>
          delay(100);
   b4f20:	2064      	movs	r0, #100	; 0x64
   b4f22:	f001 ff39 	bl	b6d98 <delay>
        while(!WiFi.ready()) {
   b4f26:	e7f7      	b.n	b4f18 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x87c>
      if(waitingForOTA) {
   b4f28:	7823      	ldrb	r3, [r4, #0]
   b4f2a:	2b00      	cmp	r3, #0
   b4f2c:	d1ea      	bne.n	b4f04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x868>
      System.reset();
   b4f2e:	f003 fec7 	bl	b8cc0 <_ZN11SystemClass5resetEv>
   b4f32:	e50e      	b.n	b4952 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b6>
        if(WiFi.ready() != true) {
   b4f34:	482f      	ldr	r0, [pc, #188]	; (b4ff4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x958>)
   b4f36:	f7ff f8ff 	bl	b4138 <_ZN5spark9WiFiClass5readyEv>
   b4f3a:	b968      	cbnz	r0, b4f58 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8bc>
          WITH_LOCK(Serial) {
   b4f3c:	f004 fb32 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4f40:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4f42:	f7ff f8c5 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
            Serial.println("WiFi failed to connect, skipping time synchronization");
   b4f46:	f004 fb2d 	bl	b95a4 <_Z16_fetch_usbserialv>
   b4f4a:	492b      	ldr	r1, [pc, #172]	; (b4ff8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x95c>)
   b4f4c:	f003 fc05 	bl	b875a <_ZN5Print7printlnEPKc>
          WITH_LOCK(Serial) {
   b4f50:	a801      	add	r0, sp, #4
   b4f52:	f7ff fa35 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4f56:	e7ea      	b.n	b4f2e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x892>
          WITH_LOCK(Serial) {
   b4f58:	f004 fb24 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4f5c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4f5e:	f7ff f8b7 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
            Serial.println("WiFi connected, awaiting update");
   b4f62:	f004 fb1f 	bl	b95a4 <_Z16_fetch_usbserialv>
   b4f66:	4925      	ldr	r1, [pc, #148]	; (b4ffc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x960>)
   b4f68:	f003 fbf7 	bl	b875a <_ZN5Print7printlnEPKc>
          WITH_LOCK(Serial) {
   b4f6c:	a801      	add	r0, sp, #4
   b4f6e:	f7ff fa27 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
          txCharacteristic.setValue("\nAwaiting OTA update");
   b4f72:	4923      	ldr	r1, [pc, #140]	; (b5000 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x964>)
   b4f74:	4810      	ldr	r0, [pc, #64]	; (b4fb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x91c>)
   b4f76:	2200      	movs	r2, #0
   b4f78:	f002 f9e1 	bl	b733e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4f7c:	f001 fe34 	bl	b6be8 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4f80:	f001 fe3a 	bl	b6bf8 <spark_cloud_flag_connected>
          while(!Particle.connected()) {
   b4f84:	b130      	cbz	r0, b4f94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8f8>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4f86:	4c1f      	ldr	r4, [pc, #124]	; (b5004 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x968>)
		return HAL_Timer_Get_Milli_Seconds();
   b4f88:	f001 fbbe 	bl	b6708 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b4f8c:	6020      	str	r0, [r4, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b4f8e:	f001 fe23 	bl	b6bd8 <spark_process>
   b4f92:	e7f9      	b.n	b4f88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8ec>
            delay(100);
   b4f94:	2064      	movs	r0, #100	; 0x64
   b4f96:	f001 feff 	bl	b6d98 <delay>
          while(!Particle.connected()) {
   b4f9a:	e7f1      	b.n	b4f80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8e4>
   b4f9c:	000bac31 	.word	0x000bac31
   b4fa0:	20031c48 	.word	0x20031c48
   b4fa4:	200322a8 	.word	0x200322a8
   b4fa8:	000bad26 	.word	0x000bad26
   b4fac:	20032208 	.word	0x20032208
   b4fb0:	000bad43 	.word	0x000bad43
   b4fb4:	000bad5a 	.word	0x000bad5a
   b4fb8:	2003e67c 	.word	0x2003e67c
   b4fbc:	000bad8b 	.word	0x000bad8b
   b4fc0:	20032210 	.word	0x20032210
   b4fc4:	000bade0 	.word	0x000bade0
   b4fc8:	000bae11 	.word	0x000bae11
   b4fcc:	2003220c 	.word	0x2003220c
   b4fd0:	000bae62 	.word	0x000bae62
   b4fd4:	000bae8c 	.word	0x000bae8c
   b4fd8:	000baeaf 	.word	0x000baeaf
   b4fdc:	000baf07 	.word	0x000baf07
   b4fe0:	000baf09 	.word	0x000baf09
   b4fe4:	000baf1c 	.word	0x000baf1c
   b4fe8:	000baf8a 	.word	0x000baf8a
   b4fec:	000baf52 	.word	0x000baf52
   b4ff0:	2003e694 	.word	0x2003e694
   b4ff4:	2003e710 	.word	0x2003e710
   b4ff8:	000baf56 	.word	0x000baf56
   b4ffc:	000baf8c 	.word	0x000baf8c
   b5000:	000bafac 	.word	0x000bafac
   b5004:	2003e720 	.word	0x2003e720

000b5008 <_GLOBAL__sub_I_SystemMode>:
  {
    // send data to server, not used
    break;
  }
  }
}
   b5008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
              error_(SYSTEM_ERROR_NONE) {
   b500c:	4b64      	ldr	r3, [pc, #400]	; (b51a0 <_GLOBAL__sub_I_SystemMode+0x198>)
    SleepResult() {}
   b500e:	4a65      	ldr	r2, [pc, #404]	; (b51a4 <_GLOBAL__sub_I_SystemMode+0x19c>)
   b5010:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5012:	2400      	movs	r4, #0
   b5014:	b099      	sub	sp, #100	; 0x64
   b5016:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b501a:	2003      	movs	r0, #3
   b501c:	f001 fd74 	bl	b6b08 <set_system_mode>
SYSTEM_THREAD(ENABLED)
   b5020:	4621      	mov	r1, r4
   b5022:	2001      	movs	r0, #1
   b5024:	f001 fd80 	bl	b6b28 <system_thread_set_state>

int recordingInterval; // interval between lis3dh reads
int reportingInterval; // interval between reporting data to server in seconds
int sleepPauseDuration; // time of inactivity before sleep
int recordingMode; // 0 = reporting disabled, 1 = reporting enabled
String payload = "";
   b5028:	495f      	ldr	r1, [pc, #380]	; (b51a8 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b502a:	4860      	ldr	r0, [pc, #384]	; (b51ac <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b502c:	4d60      	ldr	r5, [pc, #384]	; (b51b0 <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b502e:	f003 fcd8 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
bool valuesChanged = false;
String unixTime;
   b5032:	495d      	ldr	r1, [pc, #372]	; (b51a8 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b5034:	485f      	ldr	r0, [pc, #380]	; (b51b4 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b5036:	f003 fcd4 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
String ssid, password = "";
   b503a:	495b      	ldr	r1, [pc, #364]	; (b51a8 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b503c:	485e      	ldr	r0, [pc, #376]	; (b51b8 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b503e:	f003 fcd0 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
   b5042:	4959      	ldr	r1, [pc, #356]	; (b51a8 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b5044:	485d      	ldr	r0, [pc, #372]	; (b51bc <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b5046:	f003 fccc 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
float x, y, z;
uint8_t storedValues [10000];
long storedTimes [10000];
float prevX, prevY, prevZ;
int storedValuesIndex = 0;
String rolloverPayload = ""; 
   b504a:	4957      	ldr	r1, [pc, #348]	; (b51a8 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b504c:	485c      	ldr	r0, [pc, #368]	; (b51c0 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b504e:	f003 fcc8 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
  RECORDING,
  SENDING
};
uint8_t firmwareState = BLEWAIT;
bool bleWaitForConfig = false; //when true, firmware is waiting for user input over BLE b/c BLE was connected
String bleInputBuffer; // buffer for reading from BLE and writing to EEPROM
   b5052:	4955      	ldr	r1, [pc, #340]	; (b51a8 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b5054:	485b      	ldr	r0, [pc, #364]	; (b51c4 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b5056:	f003 fcc4 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
        : config_(config) {
   b505a:	4b5b      	ldr	r3, [pc, #364]	; (b51c8 <_GLOBAL__sub_I_SystemMode+0x1c0>)
// os_mutex_t recordingSleepProtectionLock; // these 2 mutexes are used to prevent the system from sleeping
// os_mutex_t reportingSleepProtectionLock; // while recording/reporting are in the middle of an action (e.g. POSTing data or reading the accelerometer)
long sleepTimeoutCounter = 0; //counts consecutive data points that have been "0"
SystemSleepConfiguration sleepConfig;

const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b505c:	495b      	ldr	r1, [pc, #364]	; (b51cc <_GLOBAL__sub_I_SystemMode+0x1c4>)
              valid_(true) {
   b505e:	611c      	str	r4, [r3, #16]
        : config_(config) {
   b5060:	1d1a      	adds	r2, r3, #4
   b5062:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b5064:	4a5a      	ldr	r2, [pc, #360]	; (b51d0 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   b5066:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b5068:	2201      	movs	r2, #1
   b506a:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b506e:	751a      	strb	r2, [r3, #20]
   b5070:	4858      	ldr	r0, [pc, #352]	; (b51d4 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b5072:	f002 f8c1 	bl	b71f8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b5076:	4958      	ldr	r1, [pc, #352]	; (b51d8 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   b5078:	4858      	ldr	r0, [pc, #352]	; (b51dc <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b507a:	f002 f8bd 	bl	b71f8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b507e:	4958      	ldr	r1, [pc, #352]	; (b51e0 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b5080:	4858      	ldr	r0, [pc, #352]	; (b51e4 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b5082:	f002 f8b9 	bl	b71f8 <_ZN8particle7BleUuidC1EPKc>
HttpClient http;
   b5086:	4858      	ldr	r0, [pc, #352]	; (b51e8 <_GLOBAL__sub_I_SystemMode+0x1e0>)
   b5088:	f001 f80b 	bl	b60a2 <_ZN10HttpClientC1Ev>
http_request_t request;
   b508c:	4857      	ldr	r0, [pc, #348]	; (b51ec <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b508e:	f7ff f861 	bl	b4154 <_ZN14http_request_tC1Ev>
} http_response_t;
   b5092:	4945      	ldr	r1, [pc, #276]	; (b51a8 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b5094:	4856      	ldr	r0, [pc, #344]	; (b51f0 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   b5096:	f003 fca4 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
http_request_t timerequest;
   b509a:	4856      	ldr	r0, [pc, #344]	; (b51f4 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b509c:	f7ff f85a 	bl	b4154 <_ZN14http_request_tC1Ev>
   b50a0:	4941      	ldr	r1, [pc, #260]	; (b51a8 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b50a2:	4855      	ldr	r0, [pc, #340]	; (b51f8 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   b50a4:	f003 fc9d 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
   b50a8:	2405      	movs	r4, #5
#ifdef __cplusplus

   WiFiAccessPoint()
   {
       memset(this, 0, sizeof(*this));
       size = sizeof(*this);
   b50aa:	2638      	movs	r6, #56	; 0x38
       memset(this, 0, sizeof(*this));
   b50ac:	1d28      	adds	r0, r5, #4
   b50ae:	2234      	movs	r2, #52	; 0x34
   b50b0:	2100      	movs	r1, #0
   b50b2:	f005 fb13 	bl	ba6dc <memset>
WiFiAccessPoint networks[5];
   b50b6:	3c01      	subs	r4, #1
       size = sizeof(*this);
   b50b8:	f845 6b38 	str.w	r6, [r5], #56
   b50bc:	d1f6      	bne.n	b50ac <_GLOBAL__sub_I_SystemMode+0xa4>
String networkBuffer;
   b50be:	493a      	ldr	r1, [pc, #232]	; (b51a8 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b50c0:	484e      	ldr	r0, [pc, #312]	; (b51fc <_GLOBAL__sub_I_SystemMode+0x1f4>)
   b50c2:	4d48      	ldr	r5, [pc, #288]	; (b51e4 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b50c4:	f8df 910c 	ldr.w	r9, [pc, #268]	; b51d4 <_GLOBAL__sub_I_SystemMode+0x1cc>
   b50c8:	f003 fc8b 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
Adafruit_LIS3DH lis3dh = Adafruit_LIS3DH();
   b50cc:	484c      	ldr	r0, [pc, #304]	; (b5200 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b50ce:	f000 fd95 	bl	b5bfc <_ZN15Adafruit_LIS3DHC1Ev>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b50d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b50d4:	f10d 0b10 	add.w	fp, sp, #16
   b50d8:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
   b50dc:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b50e0:	682f      	ldr	r7, [r5, #0]
   b50e2:	f8cb 7000 	str.w	r7, [fp]
   b50e6:	f10d 0824 	add.w	r8, sp, #36	; 0x24
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b50ea:	ad04      	add	r5, sp, #16
   b50ec:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   b50f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b50f2:	ae0e      	add	r6, sp, #56	; 0x38
   b50f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b50f6:	46ca      	mov	sl, r9
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b50f8:	f8df c114 	ldr.w	ip, [pc, #276]	; b5210 <_GLOBAL__sub_I_SystemMode+0x208>
   b50fc:	f85a e910 	ldr.w	lr, [sl], #-16
   b5100:	f8c8 e000 	str.w	lr, [r8]
   b5104:	6037      	str	r7, [r6, #0]
        BleUuid sUuid(svcUuid);
   b5106:	af09      	add	r7, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b5108:	e9cc 4400 	strd	r4, r4, [ip]
   b510c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b510e:	ad13      	add	r5, sp, #76	; 0x4c
   b5110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5112:	af13      	add	r7, sp, #76	; 0x4c
        BleUuid sUuid(svcUuid);
   b5114:	f8c5 e000 	str.w	lr, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5118:	ab0e      	add	r3, sp, #56	; 0x38
   b511a:	4660      	mov	r0, ip
   b511c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5120:	4938      	ldr	r1, [pc, #224]	; (b5204 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   b5122:	9700      	str	r7, [sp, #0]
   b5124:	f04f 0210 	mov.w	r2, #16
   b5128:	f002 fe50 	bl	b7dcc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b512c:	f8df c0ac 	ldr.w	ip, [pc, #172]	; b51dc <_GLOBAL__sub_I_SystemMode+0x1d4>
   b5130:	f8d9 9000 	ldr.w	r9, [r9]
   b5134:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5138:	f10d 0e10 	add.w	lr, sp, #16
   b513c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5140:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
   b5144:	f8dc e000 	ldr.w	lr, [ip]
   b5148:	f8cb e000 	str.w	lr, [fp]
   b514c:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b5150:	f10d 0a10 	add.w	sl, sp, #16
   b5154:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5158:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
   b515c:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   b5160:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5164:	f8c8 9000 	str.w	r9, [r8]
      : _M_ptr(0), _M_refcount()
   b5168:	f8df 80a8 	ldr.w	r8, [pc, #168]	; b5214 <_GLOBAL__sub_I_SystemMode+0x20c>
   b516c:	f8c6 e000 	str.w	lr, [r6]
        BleUuid sUuid(svcUuid);
   b5170:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b5174:	e9c8 4400 	strd	r4, r4, [r8]
   b5178:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b517c:	463e      	mov	r6, r7
   b517e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5180:	4b21      	ldr	r3, [pc, #132]	; (b5208 <_GLOBAL__sub_I_SystemMode+0x200>)
        BleUuid sUuid(svcUuid);
   b5182:	f8c5 9000 	str.w	r9, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5186:	4921      	ldr	r1, [pc, #132]	; (b520c <_GLOBAL__sub_I_SystemMode+0x204>)
   b5188:	9402      	str	r4, [sp, #8]
   b518a:	e9cd 7300 	strd	r7, r3, [sp]
   b518e:	f04f 0204 	mov.w	r2, #4
   b5192:	ab0e      	add	r3, sp, #56	; 0x38
   b5194:	4640      	mov	r0, r8
   b5196:	f002 fe19 	bl	b7dcc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
}
   b519a:	b019      	add	sp, #100	; 0x64
   b519c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b51a0:	20031c00 	.word	0x20031c00
   b51a4:	ffff0000 	.word	0xffff0000
   b51a8:	000bac31 	.word	0x000bac31
   b51ac:	200321ec 	.word	0x200321ec
   b51b0:	200320c4 	.word	0x200320c4
   b51b4:	2003e684 	.word	0x2003e684
   b51b8:	200322b0 	.word	0x200322b0
   b51bc:	200321dc 	.word	0x200321dc
   b51c0:	20032278 	.word	0x20032278
   b51c4:	20031c48 	.word	0x20031c48
   b51c8:	20032290 	.word	0x20032290
   b51cc:	000bafc1 	.word	0x000bafc1
   b51d0:	00030010 	.word	0x00030010
   b51d4:	20031c0c 	.word	0x20031c0c
   b51d8:	000bafe6 	.word	0x000bafe6
   b51dc:	20031c20 	.word	0x20031c20
   b51e0:	000bb00b 	.word	0x000bb00b
   b51e4:	20031c34 	.word	0x20031c34
   b51e8:	20031c68 	.word	0x20031c68
   b51ec:	20032214 	.word	0x20032214
   b51f0:	20032264 	.word	0x20032264
   b51f4:	2003e61c 	.word	0x2003e61c
   b51f8:	2003e66c 	.word	0x2003e66c
   b51fc:	200320b0 	.word	0x200320b0
   b5200:	20032084 	.word	0x20032084
   b5204:	000bb030 	.word	0x000bb030
   b5208:	000b469d 	.word	0x000b469d
   b520c:	000bb033 	.word	0x000bb033
   b5210:	2003e67c 	.word	0x2003e67c
   b5214:	20032288 	.word	0x20032288

000b5218 <_Z10reportData6String>:

void reportData(String payload) {
   b5218:	b530      	push	{r4, r5, lr}
   b521a:	4604      	mov	r4, r0
   b521c:	b089      	sub	sp, #36	; 0x24
  if(WiFi.ready() != true) {
   b521e:	485c      	ldr	r0, [pc, #368]	; (b5390 <_Z10reportData6String+0x178>)
   b5220:	f7fe ff8a 	bl	b4138 <_ZN5spark9WiFiClass5readyEv>
   b5224:	b980      	cbnz	r0, b5248 <_Z10reportData6String+0x30>
    if(WiFi.isOn() != true) {
   b5226:	485a      	ldr	r0, [pc, #360]	; (b5390 <_Z10reportData6String+0x178>)
   b5228:	f003 f9c4 	bl	b85b4 <_ZN5spark12NetworkClass4isOnEv>
   b522c:	b910      	cbnz	r0, b5234 <_Z10reportData6String+0x1c>
      WiFi.on();
   b522e:	4858      	ldr	r0, [pc, #352]	; (b5390 <_Z10reportData6String+0x178>)
   b5230:	f7fe ff71 	bl	b4116 <_ZN5spark9WiFiClass2onEv>
    }
    WiFi.connect();
   b5234:	4856      	ldr	r0, [pc, #344]	; (b5390 <_Z10reportData6String+0x178>)
    while(!WiFi.ready()) {
   b5236:	4d56      	ldr	r5, [pc, #344]	; (b5390 <_Z10reportData6String+0x178>)
    WiFi.connect();
   b5238:	2100      	movs	r1, #0
   b523a:	f7fe ff78 	bl	b412e <_ZN5spark9WiFiClass7connectEj>
    while(!WiFi.ready()) {
   b523e:	4628      	mov	r0, r5
   b5240:	f7fe ff7a 	bl	b4138 <_ZN5spark9WiFiClass5readyEv>
   b5244:	2800      	cmp	r0, #0
   b5246:	d0fa      	beq.n	b523e <_Z10reportData6String+0x26>
      
    }
  }

  WITH_LOCK(Serial) {
   b5248:	f004 f9ac 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b524c:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b524e:	f7fe ff3f 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("WiFi connected, reporting data");
   b5252:	f004 f9a7 	bl	b95a4 <_Z16_fetch_usbserialv>
   b5256:	494f      	ldr	r1, [pc, #316]	; (b5394 <_Z10reportData6String+0x17c>)
   b5258:	f003 fa7f 	bl	b875a <_ZN5Print7printlnEPKc>
  WITH_LOCK(Serial) {
   b525c:	a804      	add	r0, sp, #16
   b525e:	f7ff f8af 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5262:	494d      	ldr	r1, [pc, #308]	; (b5398 <_Z10reportData6String+0x180>)
   b5264:	484d      	ldr	r0, [pc, #308]	; (b539c <_Z10reportData6String+0x184>)
   b5266:	f003 fc86 	bl	b8b76 <_ZNK6String6equalsEPKc>
  }
  if(rolloverPayload != "") {
   b526a:	b9e8      	cbnz	r0, b52a8 <_Z10reportData6String+0x90>
    WITH_LOCK(Serial) {
   b526c:	f004 f99a 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5270:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   b5272:	f7fe ff2d 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("Rollover payload: " + rolloverPayload);
   b5276:	f004 f995 	bl	b95a4 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b527a:	4949      	ldr	r1, [pc, #292]	; (b53a0 <_Z10reportData6String+0x188>)
   b527c:	4605      	mov	r5, r0
   b527e:	a804      	add	r0, sp, #16
   b5280:	f003 fbaf 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
   b5284:	4945      	ldr	r1, [pc, #276]	; (b539c <_Z10reportData6String+0x184>)
   b5286:	a804      	add	r0, sp, #16
   b5288:	f003 fc4a 	bl	b8b20 <_ZplRK15StringSumHelperRK6String>
   b528c:	6801      	ldr	r1, [r0, #0]
   b528e:	4628      	mov	r0, r5
   b5290:	f003 fa63 	bl	b875a <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b5294:	a804      	add	r0, sp, #16
   b5296:	f003 fb59 	bl	b894c <_ZN6StringD1Ev>
    WITH_LOCK(Serial) {
   b529a:	a803      	add	r0, sp, #12
   b529c:	f7ff f890 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b52a0:	493e      	ldr	r1, [pc, #248]	; (b539c <_Z10reportData6String+0x184>)
   b52a2:	4620      	mov	r0, r4
   b52a4:	f003 fc1a 	bl	b8adc <_ZN6String6concatERKS_>
    }
    payload += rolloverPayload;
  }
  payload.remove(payload.length() - 1);
   b52a8:	68a1      	ldr	r1, [r4, #8]
    }

    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
   b52aa:	4d3e      	ldr	r5, [pc, #248]	; (b53a4 <_Z10reportData6String+0x18c>)
   b52ac:	3901      	subs	r1, #1
   b52ae:	4620      	mov	r0, r4
   b52b0:	f003 fcc7 	bl	b8c42 <_ZN6String6removeEj>
	StringSumHelper(const char *p) : String(p) {}
   b52b4:	493c      	ldr	r1, [pc, #240]	; (b53a8 <_Z10reportData6String+0x190>)
   b52b6:	a804      	add	r0, sp, #16
   b52b8:	f003 fb93 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
  request.body = "{\"data\":[" + payload + "]}";
   b52bc:	4621      	mov	r1, r4
   b52be:	a804      	add	r0, sp, #16
   b52c0:	f003 fc2e 	bl	b8b20 <_ZplRK15StringSumHelperRK6String>
   b52c4:	4939      	ldr	r1, [pc, #228]	; (b53ac <_Z10reportData6String+0x194>)
   b52c6:	f003 fc37 	bl	b8b38 <_ZplRK15StringSumHelperPKc>
   b52ca:	4601      	mov	r1, r0
   b52cc:	4838      	ldr	r0, [pc, #224]	; (b53b0 <_Z10reportData6String+0x198>)
   b52ce:	f003 fb9c 	bl	b8a0a <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b52d2:	a804      	add	r0, sp, #16
   b52d4:	f003 fb3a 	bl	b894c <_ZN6StringD1Ev>
  WITH_LOCK(Serial){
   b52d8:	f004 f964 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b52dc:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b52de:	f7fe fef7 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
   b52e2:	4b34      	ldr	r3, [pc, #208]	; (b53b4 <_Z10reportData6String+0x19c>)
   b52e4:	4934      	ldr	r1, [pc, #208]	; (b53b8 <_Z10reportData6String+0x1a0>)
   b52e6:	9300      	str	r3, [sp, #0]
   b52e8:	462a      	mov	r2, r5
   b52ea:	4b34      	ldr	r3, [pc, #208]	; (b53bc <_Z10reportData6String+0x1a4>)
   b52ec:	4834      	ldr	r0, [pc, #208]	; (b53c0 <_Z10reportData6String+0x1a8>)
   b52ee:	f000 ff39 	bl	b6164 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
   b52f2:	a804      	add	r0, sp, #16
   b52f4:	f7ff f864 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    http.post(request, response, headers); //http library is not thread safe with serial, so we need to lock it to prevent panic
  }
  WITH_LOCK(Serial) {
   b52f8:	f004 f954 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b52fc:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b52fe:	f7fe fee7 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("Status: " + response.status);
   b5302:	f004 f94f 	bl	b95a4 <_Z16_fetch_usbserialv>
   b5306:	682b      	ldr	r3, [r5, #0]
   b5308:	492e      	ldr	r1, [pc, #184]	; (b53c4 <_Z10reportData6String+0x1ac>)
   b530a:	4419      	add	r1, r3
   b530c:	f003 fa25 	bl	b875a <_ZN5Print7printlnEPKc>
  WITH_LOCK(Serial) {
   b5310:	a804      	add	r0, sp, #16
   b5312:	f7ff f855 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  }
  WITH_LOCK(Serial) {
   b5316:	f004 f945 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b531a:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   b531c:	f7fe fed8 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("Body: " + response.body);
   b5320:	f004 f940 	bl	b95a4 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b5324:	4928      	ldr	r1, [pc, #160]	; (b53c8 <_Z10reportData6String+0x1b0>)
   b5326:	4604      	mov	r4, r0
   b5328:	a804      	add	r0, sp, #16
   b532a:	f003 fb5a 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
   b532e:	1d29      	adds	r1, r5, #4
   b5330:	a804      	add	r0, sp, #16
   b5332:	f003 fbf5 	bl	b8b20 <_ZplRK15StringSumHelperRK6String>
   b5336:	6801      	ldr	r1, [r0, #0]
   b5338:	4620      	mov	r0, r4
   b533a:	f003 fa0e 	bl	b875a <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b533e:	a804      	add	r0, sp, #16
   b5340:	f003 fb04 	bl	b894c <_ZN6StringD1Ev>
  WITH_LOCK(Serial) {
   b5344:	a803      	add	r0, sp, #12
   b5346:	f7ff f83b 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  }
  WITH_LOCK(Serial) {
   b534a:	f004 f92b 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b534e:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   b5350:	f7fe febe 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("ReqBody: " + request.body);
   b5354:	f004 f926 	bl	b95a4 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b5358:	491c      	ldr	r1, [pc, #112]	; (b53cc <_Z10reportData6String+0x1b4>)
   b535a:	4604      	mov	r4, r0
   b535c:	a804      	add	r0, sp, #16
   b535e:	f003 fb40 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
   b5362:	4913      	ldr	r1, [pc, #76]	; (b53b0 <_Z10reportData6String+0x198>)
   b5364:	a804      	add	r0, sp, #16
   b5366:	f003 fbdb 	bl	b8b20 <_ZplRK15StringSumHelperRK6String>
   b536a:	6801      	ldr	r1, [r0, #0]
   b536c:	4620      	mov	r0, r4
   b536e:	f003 f9f4 	bl	b875a <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b5372:	a804      	add	r0, sp, #16
   b5374:	f003 faea 	bl	b894c <_ZN6StringD1Ev>
  WITH_LOCK(Serial) {
   b5378:	a803      	add	r0, sp, #12
   b537a:	f7ff f821 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  }
  rolloverPayload = "";
   b537e:	4906      	ldr	r1, [pc, #24]	; (b5398 <_Z10reportData6String+0x180>)
   b5380:	4806      	ldr	r0, [pc, #24]	; (b539c <_Z10reportData6String+0x184>)
   b5382:	f003 fb5c 	bl	b8a3e <_ZN6StringaSEPKc>
  
  WiFi.off();
   b5386:	4802      	ldr	r0, [pc, #8]	; (b5390 <_Z10reportData6String+0x178>)
   b5388:	f7fe fecb 	bl	b4122 <_ZN5spark9WiFiClass3offEv>
   b538c:	b009      	add	sp, #36	; 0x24
   b538e:	bd30      	pop	{r4, r5, pc}
   b5390:	2003e710 	.word	0x2003e710
   b5394:	000bb06e 	.word	0x000bb06e
   b5398:	000bac31 	.word	0x000bac31
   b539c:	20032278 	.word	0x20032278
   b53a0:	000bb036 	.word	0x000bb036
   b53a4:	20032260 	.word	0x20032260
   b53a8:	000bb049 	.word	0x000bb049
   b53ac:	000bb053 	.word	0x000bb053
   b53b0:	20032250 	.word	0x20032250
   b53b4:	000bb056 	.word	0x000bb056
   b53b8:	20032214 	.word	0x20032214
   b53bc:	20031b7c 	.word	0x20031b7c
   b53c0:	20031c68 	.word	0x20031c68
   b53c4:	000bb05b 	.word	0x000bb05b
   b53c8:	000bb067 	.word	0x000bb067
   b53cc:	000bb064 	.word	0x000bb064

000b53d0 <_Z11engageSleepv>:

void engageSleep() {
   b53d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b53d4:	b08d      	sub	sp, #52	; 0x34
  WITH_LOCK(Serial) {
   b53d6:	f004 f8e5 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b53da:	9008      	str	r0, [sp, #32]
      { _M_device.lock(); }
   b53dc:	f7fe fe78 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("Engaging sleep.");
   b53e0:	f004 f8e0 	bl	b95a4 <_Z16_fetch_usbserialv>
   b53e4:	494c      	ldr	r1, [pc, #304]	; (b5518 <_Z11engageSleepv+0x148>)
  }
  WITH_LOCK(Serial) {
    Serial.println(">>> CONTINUING REPORTING DATA");
    Serial.printlnf("storedValuesIndex: %i", storedValuesIndex);
   b53e6:	4e4d      	ldr	r6, [pc, #308]	; (b551c <_Z11engageSleepv+0x14c>)
    Serial.println("Engaging sleep.");
   b53e8:	f003 f9b7 	bl	b875a <_ZN5Print7printlnEPKc>
  WITH_LOCK(Serial) {
   b53ec:	a808      	add	r0, sp, #32
   b53ee:	f7fe ffe7 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  WITH_LOCK(Serial) {
   b53f2:	f004 f8d7 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b53f6:	9008      	str	r0, [sp, #32]
      { _M_device.lock(); }
   b53f8:	f7fe fe6a 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
    Serial.println(">>> CONTINUING REPORTING DATA");
   b53fc:	f004 f8d2 	bl	b95a4 <_Z16_fetch_usbserialv>
   b5400:	4947      	ldr	r1, [pc, #284]	; (b5520 <_Z11engageSleepv+0x150>)
   b5402:	f003 f9aa 	bl	b875a <_ZN5Print7printlnEPKc>
    Serial.printlnf("storedValuesIndex: %i", storedValuesIndex);
   b5406:	f004 f8cd 	bl	b95a4 <_Z16_fetch_usbserialv>
   b540a:	6832      	ldr	r2, [r6, #0]
   b540c:	4945      	ldr	r1, [pc, #276]	; (b5524 <_Z11engageSleepv+0x154>)
   b540e:	f7fe fe74 	bl	b40fa <_ZN5Print8printlnfEPKcz>
  WITH_LOCK(Serial) {
   b5412:	a808      	add	r0, sp, #32
   b5414:	f7fe ffd4 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  }
  if(restartFromWatchdog) {
   b5418:	4b43      	ldr	r3, [pc, #268]	; (b5528 <_Z11engageSleepv+0x158>)
   b541a:	781c      	ldrb	r4, [r3, #0]
   b541c:	2c00      	cmp	r4, #0
   b541e:	d140      	bne.n	b54a2 <_Z11engageSleepv+0xd2>
   b5420:	f8df 8128 	ldr.w	r8, [pc, #296]	; b554c <_Z11engageSleepv+0x17c>
   b5424:	4f41      	ldr	r7, [pc, #260]	; (b552c <_Z11engageSleepv+0x15c>)
	StringSumHelper(const char *p) : String(p) {}
   b5426:	f8df b128 	ldr.w	fp, [pc, #296]	; b5550 <_Z11engageSleepv+0x180>
    sleepTimeoutCounter = 0;
  }
  else {
    for (int i = 0; i < storedValuesIndex; i++) {
      //Serial.printf("{timestamp: %i, data: %i}, ", storedTimes[i], storedValues[i]);
      payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b542a:	f8df a128 	ldr.w	sl, [pc, #296]	; b5554 <_Z11engageSleepv+0x184>
   b542e:	f8df 9128 	ldr.w	r9, [pc, #296]	; b5558 <_Z11engageSleepv+0x188>
    for (int i = 0; i < storedValuesIndex; i++) {
   b5432:	6833      	ldr	r3, [r6, #0]
   b5434:	42a3      	cmp	r3, r4
   b5436:	dd44      	ble.n	b54c2 <_Z11engageSleepv+0xf2>
   b5438:	4659      	mov	r1, fp
   b543a:	a804      	add	r0, sp, #16
   b543c:	f003 fad1 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
      payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b5440:	220a      	movs	r2, #10
   b5442:	f8da 1000 	ldr.w	r1, [sl]
   b5446:	4668      	mov	r0, sp
   b5448:	f003 fb0b 	bl	b8a62 <_ZN6StringC1Eih>
   b544c:	4669      	mov	r1, sp
   b544e:	a804      	add	r0, sp, #16
   b5450:	f003 fb66 	bl	b8b20 <_ZplRK15StringSumHelperRK6String>
   b5454:	4649      	mov	r1, r9
   b5456:	f003 fb6f 	bl	b8b38 <_ZplRK15StringSumHelperPKc>
   b545a:	f818 1b01 	ldrb.w	r1, [r8], #1
   b545e:	f003 fb80 	bl	b8b62 <_ZplRK15StringSumHelperh>
   b5462:	4933      	ldr	r1, [pc, #204]	; (b5530 <_Z11engageSleepv+0x160>)
   b5464:	f003 fb68 	bl	b8b38 <_ZplRK15StringSumHelperPKc>
   b5468:	220a      	movs	r2, #10
   b546a:	f857 1b04 	ldr.w	r1, [r7], #4
   b546e:	4605      	mov	r5, r0
   b5470:	a808      	add	r0, sp, #32
   b5472:	f003 fb09 	bl	b8a88 <_ZN6StringC1Elh>
   b5476:	a908      	add	r1, sp, #32
   b5478:	4628      	mov	r0, r5
   b547a:	f003 fb51 	bl	b8b20 <_ZplRK15StringSumHelperRK6String>
   b547e:	492d      	ldr	r1, [pc, #180]	; (b5534 <_Z11engageSleepv+0x164>)
   b5480:	f003 fb5a 	bl	b8b38 <_ZplRK15StringSumHelperPKc>
   b5484:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5486:	482c      	ldr	r0, [pc, #176]	; (b5538 <_Z11engageSleepv+0x168>)
   b5488:	f003 fb28 	bl	b8adc <_ZN6String6concatERKS_>
   b548c:	a808      	add	r0, sp, #32
   b548e:	f003 fa5d 	bl	b894c <_ZN6StringD1Ev>
   b5492:	4668      	mov	r0, sp
   b5494:	f003 fa5a 	bl	b894c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b5498:	a804      	add	r0, sp, #16
   b549a:	f003 fa57 	bl	b894c <_ZN6StringD1Ev>
    for (int i = 0; i < storedValuesIndex; i++) {
   b549e:	3401      	adds	r4, #1
   b54a0:	e7c7      	b.n	b5432 <_Z11engageSleepv+0x62>
    delay(100);
   b54a2:	2064      	movs	r0, #100	; 0x64
   b54a4:	f001 fc78 	bl	b6d98 <delay>
    System.sleep(sleepConfig);
   b54a8:	4924      	ldr	r1, [pc, #144]	; (b553c <_Z11engageSleepv+0x16c>)
   b54aa:	a808      	add	r0, sp, #32
   b54ac:	f003 fc0c 	bl	b8cc8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        freeWakeupSourceMemory();
   b54b0:	a808      	add	r0, sp, #32
   b54b2:	f7fe fe46 	bl	b4142 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
    sleepTimeoutCounter = 0;
   b54b6:	4b22      	ldr	r3, [pc, #136]	; (b5540 <_Z11engageSleepv+0x170>)
   b54b8:	2200      	movs	r2, #0
   b54ba:	601a      	str	r2, [r3, #0]
    sleepTimeoutCounter = 0;
    // init_ACC();
    // os_mutex_unlock(reportingSleepProtectionLock);
  }
  
   b54bc:	b00d      	add	sp, #52	; 0x34
   b54be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    storedValuesIndex = 0;
   b54c2:	2300      	movs	r3, #0
    String localPayload = payload;
   b54c4:	491c      	ldr	r1, [pc, #112]	; (b5538 <_Z11engageSleepv+0x168>)
    storedValuesIndex = 0;
   b54c6:	6033      	str	r3, [r6, #0]
    String localPayload = payload;
   b54c8:	a804      	add	r0, sp, #16
   b54ca:	f003 faad 	bl	b8a28 <_ZN6StringC1ERKS_>
    payload = "";
   b54ce:	491d      	ldr	r1, [pc, #116]	; (b5544 <_Z11engageSleepv+0x174>)
   b54d0:	4819      	ldr	r0, [pc, #100]	; (b5538 <_Z11engageSleepv+0x168>)
    while(WiFi.isOn()) {}
   b54d2:	4d1d      	ldr	r5, [pc, #116]	; (b5548 <_Z11engageSleepv+0x178>)
    payload = "";
   b54d4:	f003 fab3 	bl	b8a3e <_ZN6StringaSEPKc>
    reportData(localPayload);
   b54d8:	a904      	add	r1, sp, #16
   b54da:	a808      	add	r0, sp, #32
   b54dc:	f003 faa4 	bl	b8a28 <_ZN6StringC1ERKS_>
   b54e0:	a808      	add	r0, sp, #32
   b54e2:	f7ff fe99 	bl	b5218 <_Z10reportData6String>
   b54e6:	a808      	add	r0, sp, #32
   b54e8:	f003 fa30 	bl	b894c <_ZN6StringD1Ev>
    while(WiFi.isOn()) {}
   b54ec:	4628      	mov	r0, r5
   b54ee:	f003 f861 	bl	b85b4 <_ZN5spark12NetworkClass4isOnEv>
   b54f2:	4604      	mov	r4, r0
   b54f4:	2800      	cmp	r0, #0
   b54f6:	d1f9      	bne.n	b54ec <_Z11engageSleepv+0x11c>
    delay(100);
   b54f8:	2064      	movs	r0, #100	; 0x64
   b54fa:	f001 fc4d 	bl	b6d98 <delay>
    System.sleep(sleepConfig);
   b54fe:	490f      	ldr	r1, [pc, #60]	; (b553c <_Z11engageSleepv+0x16c>)
   b5500:	a808      	add	r0, sp, #32
   b5502:	f003 fbe1 	bl	b8cc8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
   b5506:	a808      	add	r0, sp, #32
   b5508:	f7fe fe1b 	bl	b4142 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
    sleepTimeoutCounter = 0;
   b550c:	4b0c      	ldr	r3, [pc, #48]	; (b5540 <_Z11engageSleepv+0x170>)
    String localPayload = payload;
   b550e:	a804      	add	r0, sp, #16
    sleepTimeoutCounter = 0;
   b5510:	601c      	str	r4, [r3, #0]
    String localPayload = payload;
   b5512:	f003 fa1b 	bl	b894c <_ZN6StringD1Ev>
   b5516:	e7d1      	b.n	b54bc <_Z11engageSleepv+0xec>
   b5518:	000bb08d 	.word	0x000bb08d
   b551c:	2003e610 	.word	0x2003e610
   b5520:	000bb09d 	.word	0x000bb09d
   b5524:	000bb0bb 	.word	0x000bb0bb
   b5528:	20032274 	.word	0x20032274
   b552c:	200322c0 	.word	0x200322c0
   b5530:	000bb0e5 	.word	0x000bb0e5
   b5534:	000bb0f4 	.word	0x000bb0f4
   b5538:	200321ec 	.word	0x200321ec
   b553c:	20032290 	.word	0x20032290
   b5540:	200322ac 	.word	0x200322ac
   b5544:	000bac31 	.word	0x000bac31
   b5548:	2003e710 	.word	0x2003e710
   b554c:	2003bf00 	.word	0x2003bf00
   b5550:	000bb0d1 	.word	0x000bb0d1
   b5554:	20031c60 	.word	0x20031c60
   b5558:	000bb0da 	.word	0x000bb0da
   b555c:	00000000 	.word	0x00000000

000b5560 <loop>:
{
   b5560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5564:	ed2d 8b02 	vpush	{d8}
  switch (firmwareState)
   b5568:	4eaf      	ldr	r6, [pc, #700]	; (b5828 <loop+0x2c8>)
  wd.pet();
   b556a:	48b0      	ldr	r0, [pc, #704]	; (b582c <loop+0x2cc>)
{
   b556c:	b093      	sub	sp, #76	; 0x4c
  wd.pet();
   b556e:	f001 f801 	bl	b6574 <_ZN8WatchDog3petEv>
  switch (firmwareState)
   b5572:	7837      	ldrb	r7, [r6, #0]
   b5574:	b13f      	cbz	r7, b5586 <loop+0x26>
   b5576:	2f01      	cmp	r7, #1
   b5578:	f000 80d8 	beq.w	b572c <loop+0x1cc>
}
   b557c:	b013      	add	sp, #76	; 0x4c
   b557e:	ecbd 8b02 	vpop	{d8}
   b5582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WITH_LOCK(Serial)
   b5586:	f004 f80d 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b558a:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b558c:	f7fe fda0 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("BLEWAIT");
   b5590:	f004 f808 	bl	b95a4 <_Z16_fetch_usbserialv>
   b5594:	49a6      	ldr	r1, [pc, #664]	; (b5830 <loop+0x2d0>)
   b5596:	4da7      	ldr	r5, [pc, #668]	; (b5834 <loop+0x2d4>)
   b5598:	f003 f8df 	bl	b875a <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial)
   b559c:	a80d      	add	r0, sp, #52	; 0x34
   b559e:	f7fe ff0f 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    BLE.on();
   b55a2:	f001 ff99 	bl	b74d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b55a6:	f001 ffe1 	bl	b756c <_ZNK8particle14BleLocalDevice2onEv>
    BLE.addCharacteristic(txCharacteristic);
   b55aa:	f001 ff95 	bl	b74d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b55ae:	4aa2      	ldr	r2, [pc, #648]	; (b5838 <loop+0x2d8>)
   b55b0:	4601      	mov	r1, r0
   b55b2:	a80d      	add	r0, sp, #52	; 0x34
   b55b4:	f002 fd7c 	bl	b80b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b55b8:	a80d      	add	r0, sp, #52	; 0x34
   b55ba:	f002 f89c 	bl	b76f6 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b55be:	f001 ff8b 	bl	b74d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b55c2:	4a9e      	ldr	r2, [pc, #632]	; (b583c <loop+0x2dc>)
   b55c4:	4601      	mov	r1, r0
   b55c6:	a80d      	add	r0, sp, #52	; 0x34
   b55c8:	f002 fd72 	bl	b80b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b55cc:	a80d      	add	r0, sp, #52	; 0x34
   b55ce:	f002 f892 	bl	b76f6 <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData data;
   b55d2:	a804      	add	r0, sp, #16
   b55d4:	f002 f9e5 	bl	b79a2 <_ZN8particle18BleAdvertisingDataC1Ev>
    data.appendServiceUUID(serviceUuid);
   b55d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b55da:	ac08      	add	r4, sp, #32
   b55dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b55de:	f8d5 c000 	ldr.w	ip, [r5]
   b55e2:	f8c4 c000 	str.w	ip, [r4]
        BleUuid tempUUID(uuid);
   b55e6:	ad08      	add	r5, sp, #32
   b55e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b55ea:	ac0d      	add	r4, sp, #52	; 0x34
   b55ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b55ee:	a80d      	add	r0, sp, #52	; 0x34
        BleUuid tempUUID(uuid);
   b55f0:	f8c4 c000 	str.w	ip, [r4]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b55f4:	f001 fd62 	bl	b70bc <_ZNK8particle7BleUuid4typeEv>
   b55f8:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b55fa:	a80d      	add	r0, sp, #52	; 0x34
        if (tempUUID.type() == BleUuidType::SHORT) {
   b55fc:	2c00      	cmp	r4, #0
   b55fe:	d13f      	bne.n	b5680 <loop+0x120>
            uint16_t uuid16 = tempUUID.shorted();
   b5600:	f001 fd78 	bl	b70f4 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5604:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b5606:	f8ad 000e 	strh.w	r0, [sp, #14]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b560a:	2302      	movs	r3, #2
   b560c:	f10d 020e 	add.w	r2, sp, #14
   b5610:	2103      	movs	r1, #3
   b5612:	a804      	add	r0, sp, #16
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b5614:	f002 f9ba 	bl	b798c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&data);
   b5618:	f001 ff5e 	bl	b74d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b561c:	2200      	movs	r2, #0
   b561e:	a904      	add	r1, sp, #16
   b5620:	f001 fff5 	bl	b760e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    BLE.onConnected(connectCallback);
   b5624:	f001 ff58 	bl	b74d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5628:	4985      	ldr	r1, [pc, #532]	; (b5840 <loop+0x2e0>)
          Serial.print("BLECountdown: ");
   b562a:	f8df 824c 	ldr.w	r8, [pc, #588]	; b5878 <loop+0x318>
    BLE.onConnected(connectCallback);
   b562e:	2200      	movs	r2, #0
   b5630:	f002 fc41 	bl	b7eb6 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
    BLE.onDisconnected(disconnectCallback);
   b5634:	f001 ff50 	bl	b74d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5638:	4982      	ldr	r1, [pc, #520]	; (b5844 <loop+0x2e4>)
   b563a:	2200      	movs	r2, #0
   b563c:	f002 fc1c 	bl	b7e78 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
    int BLECountdown = 15000;
   b5640:	f643 2498 	movw	r4, #15000	; 0x3a98
      BLECountdown = BLECountdown - 10;
   b5644:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    while (!BLE.connected() && BLECountdown > 0)
   b5648:	f001 ff46 	bl	b74d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b564c:	f001 ff9e 	bl	b758c <_ZNK8particle14BleLocalDevice9connectedEv>
   b5650:	b900      	cbnz	r0, b5654 <loop+0xf4>
   b5652:	b9f4      	cbnz	r4, b5692 <loop+0x132>
    if (BLE.connected())
   b5654:	f001 ff40 	bl	b74d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5658:	f001 ff98 	bl	b758c <_ZNK8particle14BleLocalDevice9connectedEv>
   b565c:	4c7a      	ldr	r4, [pc, #488]	; (b5848 <loop+0x2e8>)
   b565e:	2800      	cmp	r0, #0
   b5660:	d141      	bne.n	b56e6 <loop+0x186>
      bleWaitForConfig = false;
   b5662:	7020      	strb	r0, [r4, #0]
      WITH_LOCK(Serial)
   b5664:	f003 ff9e 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5668:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b566a:	f7fe fd31 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("BLE not connected, continuing with stored settings.");
   b566e:	f003 ff99 	bl	b95a4 <_Z16_fetch_usbserialv>
   b5672:	4976      	ldr	r1, [pc, #472]	; (b584c <loop+0x2ec>)
   b5674:	f003 f871 	bl	b875a <_ZN5Print7printlnEPKc>
      WITH_LOCK(Serial)
   b5678:	a80d      	add	r0, sp, #52	; 0x34
   b567a:	f7fe fea1 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b567e:	e041      	b.n	b5704 <loop+0x1a4>
   b5680:	f001 fd3a 	bl	b70f8 <_ZNK8particle7BleUuid8rawBytesEv>
   b5684:	2310      	movs	r3, #16
   b5686:	4602      	mov	r2, r0
   b5688:	9700      	str	r7, [sp, #0]
   b568a:	2107      	movs	r1, #7
   b568c:	eb0d 0003 	add.w	r0, sp, r3
   b5690:	e7c0      	b.n	b5614 <loop+0xb4>
      BLECountdown = BLECountdown - 10;
   b5692:	3c0a      	subs	r4, #10
   b5694:	fb94 f3f7 	sdiv	r3, r4, r7
   b5698:	fb07 4313 	mls	r3, r7, r3, r4
      if (BLECountdown % 1000 == 0 || BLECountdown == 0)
   b569c:	b103      	cbz	r3, b56a0 <loop+0x140>
   b569e:	b9e4      	cbnz	r4, b56da <loop+0x17a>
        WITH_LOCK(Serial)
   b56a0:	f003 ff80 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b56a4:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b56a6:	f7fe fd13 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.print("BLECountdown: ");
   b56aa:	f003 ff7b 	bl	b95a4 <_Z16_fetch_usbserialv>
   b56ae:	4641      	mov	r1, r8
   b56b0:	f003 f83a 	bl	b8728 <_ZN5Print5printEPKc>
          Serial.println(BLECountdown);
   b56b4:	f003 ff76 	bl	b95a4 <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
   b56b8:	2c00      	cmp	r4, #0
   b56ba:	4605      	mov	r5, r0
   b56bc:	da11      	bge.n	b56e2 <loop+0x182>
            t = print('-');
   b56be:	212d      	movs	r1, #45	; 0x2d
   b56c0:	f003 f836 	bl	b8730 <_ZN5Print5printEc>
   b56c4:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b56c6:	220a      	movs	r2, #10
   b56c8:	4628      	mov	r0, r5
   b56ca:	f003 f850 	bl	b876e <_ZN5Print11printNumberEmh>
        n += println();
   b56ce:	4628      	mov	r0, r5
   b56d0:	f003 f837 	bl	b8742 <_ZN5Print7printlnEv>
        WITH_LOCK(Serial)
   b56d4:	a80d      	add	r0, sp, #52	; 0x34
   b56d6:	f7fe fe73 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      delay(10);
   b56da:	200a      	movs	r0, #10
   b56dc:	f001 fb5c 	bl	b6d98 <delay>
    while (!BLE.connected() && BLECountdown > 0)
   b56e0:	e7b2      	b.n	b5648 <loop+0xe8>
   b56e2:	4621      	mov	r1, r4
   b56e4:	e7ef      	b.n	b56c6 <loop+0x166>
      WITH_LOCK(Serial)
   b56e6:	f003 ff5d 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b56ea:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b56ec:	f7fe fcf0 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("BLE connected");
   b56f0:	f003 ff58 	bl	b95a4 <_Z16_fetch_usbserialv>
   b56f4:	4956      	ldr	r1, [pc, #344]	; (b5850 <loop+0x2f0>)
   b56f6:	f003 f830 	bl	b875a <_ZN5Print7printlnEPKc>
      WITH_LOCK(Serial)
   b56fa:	a80d      	add	r0, sp, #52	; 0x34
   b56fc:	f7fe fe60 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      bleWaitForConfig = true;
   b5700:	2301      	movs	r3, #1
   b5702:	7023      	strb	r3, [r4, #0]
    while (bleWaitForConfig)
   b5704:	7823      	ldrb	r3, [r4, #0]
   b5706:	b11b      	cbz	r3, b5710 <loop+0x1b0>
      delay(100);
   b5708:	2064      	movs	r0, #100	; 0x64
   b570a:	f001 fb45 	bl	b6d98 <delay>
    while (bleWaitForConfig)
   b570e:	e7f9      	b.n	b5704 <loop+0x1a4>
    BLE.disconnectAll();
   b5710:	f001 fee2 	bl	b74d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5714:	f002 fae2 	bl	b7cdc <_ZNK8particle14BleLocalDevice13disconnectAllEv>
    BLE.off();
   b5718:	f001 fede 	bl	b74d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b571c:	f002 f878 	bl	b7810 <_ZNK8particle14BleLocalDevice3offEv>
    firmwareState = RECORDING;
   b5720:	2301      	movs	r3, #1
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b5722:	9804      	ldr	r0, [sp, #16]
   b5724:	7033      	strb	r3, [r6, #0]
   b5726:	f001 faff 	bl	b6d28 <free>
   b572a:	e727      	b.n	b557c <loop+0x1c>
    WITH_LOCK(Serial)
   b572c:	f003 ff3a 	bl	b95a4 <_Z16_fetch_usbserialv>
    lis3dh.read();
   b5730:	4c48      	ldr	r4, [pc, #288]	; (b5854 <loop+0x2f4>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5732:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b5734:	f7fe fccc 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("RECORDING");
   b5738:	f003 ff34 	bl	b95a4 <_Z16_fetch_usbserialv>
   b573c:	4946      	ldr	r1, [pc, #280]	; (b5858 <loop+0x2f8>)
    x = lis3dh.x_g;
   b573e:	f8df b13c 	ldr.w	fp, [pc, #316]	; b587c <loop+0x31c>
    y = lis3dh.y_g;
   b5742:	f8df 913c 	ldr.w	r9, [pc, #316]	; b5880 <loop+0x320>
    z = lis3dh.z_g;
   b5746:	4f45      	ldr	r7, [pc, #276]	; (b585c <loop+0x2fc>)
   b5748:	f8df a138 	ldr.w	sl, [pc, #312]	; b5884 <loop+0x324>
   b574c:	f8df 8138 	ldr.w	r8, [pc, #312]	; b5888 <loop+0x328>
      Serial.println("RECORDING");
   b5750:	f003 f803 	bl	b875a <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial)
   b5754:	a80d      	add	r0, sp, #52	; 0x34
   b5756:	f7fe fe33 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    lis3dh.read();
   b575a:	4620      	mov	r0, r4
   b575c:	f000 fb5c 	bl	b5e18 <_ZN15Adafruit_LIS3DH4readEv>
    if (!firstLIS3DHReading)
   b5760:	4b3f      	ldr	r3, [pc, #252]	; (b5860 <loop+0x300>)
    x = lis3dh.x_g;
   b5762:	edd4 7a03 	vldr	s15, [r4, #12]
    y = lis3dh.y_g;
   b5766:	edd4 8a04 	vldr	s17, [r4, #16]
    z = lis3dh.z_g;
   b576a:	ed94 8a05 	vldr	s16, [r4, #20]
    if (!firstLIS3DHReading)
   b576e:	781a      	ldrb	r2, [r3, #0]
   b5770:	4c3c      	ldr	r4, [pc, #240]	; (b5864 <loop+0x304>)
    x = lis3dh.x_g;
   b5772:	edcb 7a00 	vstr	s15, [fp]
    y = lis3dh.y_g;
   b5776:	edc9 8a00 	vstr	s17, [r9]
    z = lis3dh.z_g;
   b577a:	ed87 8a00 	vstr	s16, [r7]
    if (!firstLIS3DHReading)
   b577e:	2a00      	cmp	r2, #0
   b5780:	f040 812f 	bne.w	b59e2 <loop+0x482>
      if (abs(x - prevX) > kDeltaAccelThreshold || abs(y - prevY) > kDeltaAccelThreshold || abs(z - prevZ) > kDeltaAccelThreshold)
   b5784:	ed9a 7a00 	vldr	s14, [sl]
        if (recordingMode == 0) {
   b5788:	4b37      	ldr	r3, [pc, #220]	; (b5868 <loop+0x308>)
          storedValues[storedValuesIndex] = 0;
   b578a:	6825      	ldr	r5, [r4, #0]
        if (recordingMode == 0) {
   b578c:	681e      	ldr	r6, [r3, #0]
      if (abs(x - prevX) > kDeltaAccelThreshold || abs(y - prevY) > kDeltaAccelThreshold || abs(z - prevZ) > kDeltaAccelThreshold)
   b578e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   b5792:	eef0 7ae7 	vabs.f32	s15, s15
   b5796:	ee17 0a90 	vmov	r0, s15
   b579a:	f004 fc33 	bl	ba004 <__aeabi_f2d>
   b579e:	a320      	add	r3, pc, #128	; (adr r3, b5820 <loop+0x2c0>)
   b57a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b57a4:	f004 ff16 	bl	ba5d4 <__aeabi_dcmpgt>
   b57a8:	2800      	cmp	r0, #0
   b57aa:	d16f      	bne.n	b588c <loop+0x32c>
   b57ac:	edd8 7a00 	vldr	s15, [r8]
   b57b0:	ee78 8ae7 	vsub.f32	s17, s17, s15
   b57b4:	eef0 7ae8 	vabs.f32	s15, s17
   b57b8:	ee17 0a90 	vmov	r0, s15
   b57bc:	f004 fc22 	bl	ba004 <__aeabi_f2d>
   b57c0:	a317      	add	r3, pc, #92	; (adr r3, b5820 <loop+0x2c0>)
   b57c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b57c6:	f004 ff05 	bl	ba5d4 <__aeabi_dcmpgt>
   b57ca:	2800      	cmp	r0, #0
   b57cc:	d15e      	bne.n	b588c <loop+0x32c>
   b57ce:	4b27      	ldr	r3, [pc, #156]	; (b586c <loop+0x30c>)
   b57d0:	edd3 7a00 	vldr	s15, [r3]
   b57d4:	ee38 8a67 	vsub.f32	s16, s16, s15
   b57d8:	eef0 7ac8 	vabs.f32	s15, s16
   b57dc:	ee17 0a90 	vmov	r0, s15
   b57e0:	f004 fc10 	bl	ba004 <__aeabi_f2d>
   b57e4:	a30e      	add	r3, pc, #56	; (adr r3, b5820 <loop+0x2c0>)
   b57e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b57ea:	f004 fef3 	bl	ba5d4 <__aeabi_dcmpgt>
   b57ee:	2800      	cmp	r0, #0
   b57f0:	d14c      	bne.n	b588c <loop+0x32c>
        if (recordingMode == 0) {
   b57f2:	4b1f      	ldr	r3, [pc, #124]	; (b5870 <loop+0x310>)
            if (storedValues[storedValuesIndex - 1] != 0) {
   b57f4:	1e6a      	subs	r2, r5, #1
        if (recordingMode == 0) {
   b57f6:	2e00      	cmp	r6, #0
   b57f8:	f000 80eb 	beq.w	b59d2 <loop+0x472>
          if (storedValuesIndex != 0) {
   b57fc:	2d00      	cmp	r5, #0
   b57fe:	f000 80e9 	beq.w	b59d4 <loop+0x474>
            if (storedValues[storedValuesIndex - 1] != 0) {
   b5802:	5c99      	ldrb	r1, [r3, r2]
   b5804:	2900      	cmp	r1, #0
   b5806:	f040 80ea 	bne.w	b59de <loop+0x47e>
          sleepTimeoutCounter++;
   b580a:	4a1a      	ldr	r2, [pc, #104]	; (b5874 <loop+0x314>)
   b580c:	6813      	ldr	r3, [r2, #0]
   b580e:	3301      	adds	r3, #1
   b5810:	6013      	str	r3, [r2, #0]
          if (sleepReadyTest())
   b5812:	f7fe fdbf 	bl	b4394 <_Z14sleepReadyTestv>
   b5816:	2800      	cmp	r0, #0
   b5818:	d04b      	beq.n	b58b2 <loop+0x352>
            engageSleep();
   b581a:	f7ff fdd9 	bl	b53d0 <_Z11engageSleepv>
   b581e:	e048      	b.n	b58b2 <loop+0x352>
   b5820:	9999999a 	.word	0x9999999a
   b5824:	3fa99999 	.word	0x3fa99999
   b5828:	20031c64 	.word	0x20031c64
   b582c:	2003e695 	.word	0x2003e695
   b5830:	000bb0f7 	.word	0x000bb0f7
   b5834:	20031c0c 	.word	0x20031c0c
   b5838:	2003e67c 	.word	0x2003e67c
   b583c:	20032288 	.word	0x20032288
   b5840:	000b4635 	.word	0x000b4635
   b5844:	000b466d 	.word	0x000b466d
   b5848:	20031c5c 	.word	0x20031c5c
   b584c:	000bb10d 	.word	0x000bb10d
   b5850:	000bb0ff 	.word	0x000bb0ff
   b5854:	20032084 	.word	0x20032084
   b5858:	000bb141 	.word	0x000bb141
   b585c:	2003e6a0 	.word	0x2003e6a0
   b5860:	20031b78 	.word	0x20031b78
   b5864:	2003e610 	.word	0x2003e610
   b5868:	2003220c 	.word	0x2003220c
   b586c:	20032204 	.word	0x20032204
   b5870:	2003bf00 	.word	0x2003bf00
   b5874:	200322ac 	.word	0x200322ac
   b5878:	000bb1a5 	.word	0x000bb1a5
   b587c:	2003e698 	.word	0x2003e698
   b5880:	2003e69c 	.word	0x2003e69c
   b5884:	200321fc 	.word	0x200321fc
   b5888:	20032200 	.word	0x20032200
        if (restartFromWatchdog)
   b588c:	4bb7      	ldr	r3, [pc, #732]	; (b5b6c <loop+0x60c>)
   b588e:	781a      	ldrb	r2, [r3, #0]
   b5890:	b10a      	cbz	r2, b5896 <loop+0x336>
          restartFromWatchdog = false;
   b5892:	2200      	movs	r2, #0
   b5894:	701a      	strb	r2, [r3, #0]
        if(recordingMode == 1) {
   b5896:	2e01      	cmp	r6, #1
   b5898:	f040 8097 	bne.w	b59ca <loop+0x46a>
          if(storedValuesIndex != 0) {
   b589c:	b135      	cbz	r5, b58ac <loop+0x34c>
            if(storedValues[storedValuesIndex - 1] != 1) {
   b589e:	4bb4      	ldr	r3, [pc, #720]	; (b5b70 <loop+0x610>)
   b58a0:	195a      	adds	r2, r3, r5
   b58a2:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   b58a6:	2a01      	cmp	r2, #1
   b58a8:	d000      	beq.n	b58ac <loop+0x34c>
              storedValues[storedValuesIndex] = 1;
   b58aa:	555e      	strb	r6, [r3, r5]
        sleepTimeoutCounter = 0; // reset sleep timeout because movement detected
   b58ac:	4bb1      	ldr	r3, [pc, #708]	; (b5b74 <loop+0x614>)
   b58ae:	2200      	movs	r2, #0
   b58b0:	601a      	str	r2, [r3, #0]
      storedTimes[storedValuesIndex] = Time.now();
   b58b2:	6825      	ldr	r5, [r4, #0]
   b58b4:	f003 fda7 	bl	b9406 <_ZN9TimeClass3nowEv>
   b58b8:	4baf      	ldr	r3, [pc, #700]	; (b5b78 <loop+0x618>)
   b58ba:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
      WITH_LOCK(Serial)
   b58be:	f003 fe71 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b58c2:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b58c4:	f7fe fc04 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
        Serial.printlnf("Recording index: %i", storedValuesIndex);
   b58c8:	f003 fe6c 	bl	b95a4 <_Z16_fetch_usbserialv>
   b58cc:	6822      	ldr	r2, [r4, #0]
   b58ce:	49ab      	ldr	r1, [pc, #684]	; (b5b7c <loop+0x61c>)
   b58d0:	f7fe fc13 	bl	b40fa <_ZN5Print8printlnfEPKcz>
      WITH_LOCK(Serial)
   b58d4:	a80d      	add	r0, sp, #52	; 0x34
   b58d6:	f7fe fd73 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      storedValuesIndex++;
   b58da:	6823      	ldr	r3, [r4, #0]
   b58dc:	3301      	adds	r3, #1
   b58de:	6023      	str	r3, [r4, #0]
    prevX = x;
   b58e0:	f8db 3000 	ldr.w	r3, [fp]
    prevZ = z;
   b58e4:	4aa6      	ldr	r2, [pc, #664]	; (b5b80 <loop+0x620>)
    prevX = x;
   b58e6:	f8ca 3000 	str.w	r3, [sl]
    prevY = y;
   b58ea:	f8d9 3000 	ldr.w	r3, [r9]
   b58ee:	f8c8 3000 	str.w	r3, [r8]
    prevZ = z;
   b58f2:	683b      	ldr	r3, [r7, #0]
   b58f4:	6013      	str	r3, [r2, #0]
    if (storedValuesIndex >= ((reportingInterval * kSecondsToMilliseconds) / recordingInterval))
   b58f6:	4ba3      	ldr	r3, [pc, #652]	; (b5b84 <loop+0x624>)
   b58f8:	4ea3      	ldr	r6, [pc, #652]	; (b5b88 <loop+0x628>)
   b58fa:	681b      	ldr	r3, [r3, #0]
   b58fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5900:	4353      	muls	r3, r2
   b5902:	6832      	ldr	r2, [r6, #0]
   b5904:	fb93 f3f2 	sdiv	r3, r3, r2
   b5908:	6822      	ldr	r2, [r4, #0]
   b590a:	4293      	cmp	r3, r2
   b590c:	f300 8090 	bgt.w	b5a30 <loop+0x4d0>
      if (WiFi.ready())
   b5910:	489e      	ldr	r0, [pc, #632]	; (b5b8c <loop+0x62c>)
   b5912:	f7fe fc11 	bl	b4138 <_ZN5spark9WiFiClass5readyEv>
   b5916:	4605      	mov	r5, r0
   b5918:	2800      	cmp	r0, #0
   b591a:	f000 80f8 	beq.w	b5b0e <loop+0x5ae>
        WITH_LOCK(Serial)
   b591e:	f003 fe41 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5922:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b5924:	f7fe fbd4 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(">>> REPORTING DATA");
   b5928:	f003 fe3c 	bl	b95a4 <_Z16_fetch_usbserialv>
   b592c:	4998      	ldr	r1, [pc, #608]	; (b5b90 <loop+0x630>)
   b592e:	f8df 9240 	ldr.w	r9, [pc, #576]	; b5b70 <loop+0x610>
   b5932:	f8df 8244 	ldr.w	r8, [pc, #580]	; b5b78 <loop+0x618>
          payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b5936:	f8df b27c 	ldr.w	fp, [pc, #636]	; b5bb4 <loop+0x654>
   b593a:	f8df a27c 	ldr.w	sl, [pc, #636]	; b5bb8 <loop+0x658>
          Serial.println(">>> REPORTING DATA");
   b593e:	f002 ff0c 	bl	b875a <_ZN5Print7printlnEPKc>
          Serial.printlnf("storedValuesIndex: %i", storedValuesIndex);
   b5942:	f003 fe2f 	bl	b95a4 <_Z16_fetch_usbserialv>
   b5946:	6822      	ldr	r2, [r4, #0]
   b5948:	4992      	ldr	r1, [pc, #584]	; (b5b94 <loop+0x634>)
   b594a:	f7fe fbd6 	bl	b40fa <_ZN5Print8printlnfEPKcz>
        WITH_LOCK(Serial)
   b594e:	a80d      	add	r0, sp, #52	; 0x34
   b5950:	f7fe fd36 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
	StringSumHelper(const char *p) : String(p) {}
   b5954:	4b90      	ldr	r3, [pc, #576]	; (b5b98 <loop+0x638>)
        for (int i = 0; i < storedValuesIndex; i++)
   b5956:	2500      	movs	r5, #0
   b5958:	6822      	ldr	r2, [r4, #0]
   b595a:	42aa      	cmp	r2, r5
   b595c:	dd51      	ble.n	b5a02 <loop+0x4a2>
   b595e:	4619      	mov	r1, r3
   b5960:	a808      	add	r0, sp, #32
   b5962:	f003 f83e 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
          payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b5966:	220a      	movs	r2, #10
   b5968:	f8db 1000 	ldr.w	r1, [fp]
   b596c:	a804      	add	r0, sp, #16
   b596e:	f003 f878 	bl	b8a62 <_ZN6StringC1Eih>
   b5972:	a904      	add	r1, sp, #16
   b5974:	a808      	add	r0, sp, #32
   b5976:	f003 f8d3 	bl	b8b20 <_ZplRK15StringSumHelperRK6String>
   b597a:	4651      	mov	r1, sl
   b597c:	f003 f8dc 	bl	b8b38 <_ZplRK15StringSumHelperPKc>
   b5980:	f819 1b01 	ldrb.w	r1, [r9], #1
   b5984:	f003 f8ed 	bl	b8b62 <_ZplRK15StringSumHelperh>
   b5988:	4984      	ldr	r1, [pc, #528]	; (b5b9c <loop+0x63c>)
   b598a:	f003 f8d5 	bl	b8b38 <_ZplRK15StringSumHelperPKc>
   b598e:	220a      	movs	r2, #10
   b5990:	f858 1b04 	ldr.w	r1, [r8], #4
   b5994:	4607      	mov	r7, r0
   b5996:	a80d      	add	r0, sp, #52	; 0x34
   b5998:	f003 f876 	bl	b8a88 <_ZN6StringC1Elh>
   b599c:	a90d      	add	r1, sp, #52	; 0x34
   b599e:	4638      	mov	r0, r7
   b59a0:	f003 f8be 	bl	b8b20 <_ZplRK15StringSumHelperRK6String>
   b59a4:	497e      	ldr	r1, [pc, #504]	; (b5ba0 <loop+0x640>)
   b59a6:	f003 f8c7 	bl	b8b38 <_ZplRK15StringSumHelperPKc>
   b59aa:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b59ac:	487d      	ldr	r0, [pc, #500]	; (b5ba4 <loop+0x644>)
   b59ae:	f003 f895 	bl	b8adc <_ZN6String6concatERKS_>
   b59b2:	a80d      	add	r0, sp, #52	; 0x34
   b59b4:	f002 ffca 	bl	b894c <_ZN6StringD1Ev>
   b59b8:	a804      	add	r0, sp, #16
   b59ba:	f002 ffc7 	bl	b894c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b59be:	a808      	add	r0, sp, #32
   b59c0:	f002 ffc4 	bl	b894c <_ZN6StringD1Ev>
        for (int i = 0; i < storedValuesIndex; i++)
   b59c4:	3501      	adds	r5, #1
   b59c6:	4b74      	ldr	r3, [pc, #464]	; (b5b98 <loop+0x638>)
   b59c8:	e7c6      	b.n	b5958 <loop+0x3f8>
          storedValues[storedValuesIndex] = 1;
   b59ca:	4b69      	ldr	r3, [pc, #420]	; (b5b70 <loop+0x610>)
   b59cc:	2201      	movs	r2, #1
   b59ce:	555a      	strb	r2, [r3, r5]
   b59d0:	e76c      	b.n	b58ac <loop+0x34c>
          storedValues[storedValuesIndex] = 0;
   b59d2:	555e      	strb	r6, [r3, r5]
        if (storedValues[storedValuesIndex - 1] == 0)
   b59d4:	5c9b      	ldrb	r3, [r3, r2]
   b59d6:	2b00      	cmp	r3, #0
   b59d8:	f47f af6b 	bne.w	b58b2 <loop+0x352>
   b59dc:	e715      	b.n	b580a <loop+0x2aa>
              storedValues[storedValuesIndex] = 0;
   b59de:	5558      	strb	r0, [r3, r5]
   b59e0:	e7f8      	b.n	b59d4 <loop+0x474>
      firstLIS3DHReading = false;
   b59e2:	2200      	movs	r2, #0
   b59e4:	701a      	strb	r2, [r3, #0]
      WITH_LOCK(Serial)
   b59e6:	f003 fddd 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b59ea:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b59ec:	f7fe fb70 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("First reading");
   b59f0:	f003 fdd8 	bl	b95a4 <_Z16_fetch_usbserialv>
   b59f4:	496c      	ldr	r1, [pc, #432]	; (b5ba8 <loop+0x648>)
   b59f6:	f002 feb0 	bl	b875a <_ZN5Print7printlnEPKc>
      WITH_LOCK(Serial)
   b59fa:	a80d      	add	r0, sp, #52	; 0x34
   b59fc:	f7fe fce0 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b5a00:	e76e      	b.n	b58e0 <loop+0x380>
        storedValuesIndex = 0;
   b5a02:	2300      	movs	r3, #0
        String localPayload = payload;
   b5a04:	4967      	ldr	r1, [pc, #412]	; (b5ba4 <loop+0x644>)
        storedValuesIndex = 0;
   b5a06:	6023      	str	r3, [r4, #0]
        String localPayload = payload;
   b5a08:	a808      	add	r0, sp, #32
   b5a0a:	f003 f80d 	bl	b8a28 <_ZN6StringC1ERKS_>
        payload = "";
   b5a0e:	4967      	ldr	r1, [pc, #412]	; (b5bac <loop+0x64c>)
   b5a10:	4864      	ldr	r0, [pc, #400]	; (b5ba4 <loop+0x644>)
   b5a12:	f003 f814 	bl	b8a3e <_ZN6StringaSEPKc>
        reportData(localPayload);
   b5a16:	a908      	add	r1, sp, #32
   b5a18:	a80d      	add	r0, sp, #52	; 0x34
   b5a1a:	f003 f805 	bl	b8a28 <_ZN6StringC1ERKS_>
   b5a1e:	a80d      	add	r0, sp, #52	; 0x34
   b5a20:	f7ff fbfa 	bl	b5218 <_Z10reportData6String>
   b5a24:	a80d      	add	r0, sp, #52	; 0x34
   b5a26:	f002 ff91 	bl	b894c <_ZN6StringD1Ev>
        String localPayload = payload;
   b5a2a:	a808      	add	r0, sp, #32
   b5a2c:	f002 ff8e 	bl	b894c <_ZN6StringD1Ev>
    if (storedValuesIndex >= 9500)
   b5a30:	6822      	ldr	r2, [r4, #0]
   b5a32:	f242 531b 	movw	r3, #9499	; 0x251b
   b5a36:	429a      	cmp	r2, r3
   b5a38:	f77f ada0 	ble.w	b557c <loop+0x1c>
      WITH_LOCK(Serial)
   b5a3c:	f003 fdb2 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5a40:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b5a42:	f7fe fb45 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(">>> REPORTING DUE TO BUFFER CAPACITY");
   b5a46:	f003 fdad 	bl	b95a4 <_Z16_fetch_usbserialv>
   b5a4a:	4959      	ldr	r1, [pc, #356]	; (b5bb0 <loop+0x650>)
   b5a4c:	f002 fe85 	bl	b875a <_ZN5Print7printlnEPKc>
      WITH_LOCK(Serial)
   b5a50:	a80d      	add	r0, sp, #52	; 0x34
   b5a52:	f7fe fcb5 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      if (WiFi.ready())
   b5a56:	484d      	ldr	r0, [pc, #308]	; (b5b8c <loop+0x62c>)
   b5a58:	f7fe fb6e 	bl	b4138 <_ZN5spark9WiFiClass5readyEv>
   b5a5c:	4605      	mov	r5, r0
   b5a5e:	2800      	cmp	r0, #0
   b5a60:	d07c      	beq.n	b5b5c <loop+0x5fc>
        WITH_LOCK(Serial)
   b5a62:	f003 fd9f 	bl	b95a4 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5a66:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b5a68:	f7fe fb32 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(">>> REPORTING DATA");
   b5a6c:	f003 fd9a 	bl	b95a4 <_Z16_fetch_usbserialv>
   b5a70:	4947      	ldr	r1, [pc, #284]	; (b5b90 <loop+0x630>)
   b5a72:	f8df 90fc 	ldr.w	r9, [pc, #252]	; b5b70 <loop+0x610>
   b5a76:	f8df 8100 	ldr.w	r8, [pc, #256]	; b5b78 <loop+0x618>
          payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b5a7a:	f8df b138 	ldr.w	fp, [pc, #312]	; b5bb4 <loop+0x654>
   b5a7e:	f8df a138 	ldr.w	sl, [pc, #312]	; b5bb8 <loop+0x658>
          Serial.println(">>> REPORTING DATA");
   b5a82:	f002 fe6a 	bl	b875a <_ZN5Print7printlnEPKc>
          Serial.printlnf("storedValuesIndex: %i", storedValuesIndex);
   b5a86:	f003 fd8d 	bl	b95a4 <_Z16_fetch_usbserialv>
   b5a8a:	6822      	ldr	r2, [r4, #0]
   b5a8c:	4941      	ldr	r1, [pc, #260]	; (b5b94 <loop+0x634>)
   b5a8e:	f7fe fb34 	bl	b40fa <_ZN5Print8printlnfEPKcz>
        WITH_LOCK(Serial)
   b5a92:	a80d      	add	r0, sp, #52	; 0x34
   b5a94:	f7fe fc94 	bl	b43c0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
	StringSumHelper(const char *p) : String(p) {}
   b5a98:	4b3f      	ldr	r3, [pc, #252]	; (b5b98 <loop+0x638>)
        for (int i = 0; i < storedValuesIndex; i++)
   b5a9a:	2500      	movs	r5, #0
   b5a9c:	6822      	ldr	r2, [r4, #0]
   b5a9e:	42aa      	cmp	r2, r5
   b5aa0:	dd3d      	ble.n	b5b1e <loop+0x5be>
   b5aa2:	4619      	mov	r1, r3
   b5aa4:	a808      	add	r0, sp, #32
   b5aa6:	f002 ff9c 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
          payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b5aaa:	220a      	movs	r2, #10
   b5aac:	f8db 1000 	ldr.w	r1, [fp]
   b5ab0:	a804      	add	r0, sp, #16
   b5ab2:	f002 ffd6 	bl	b8a62 <_ZN6StringC1Eih>
   b5ab6:	a904      	add	r1, sp, #16
   b5ab8:	a808      	add	r0, sp, #32
   b5aba:	f003 f831 	bl	b8b20 <_ZplRK15StringSumHelperRK6String>
   b5abe:	4651      	mov	r1, sl
   b5ac0:	f003 f83a 	bl	b8b38 <_ZplRK15StringSumHelperPKc>
   b5ac4:	f819 1b01 	ldrb.w	r1, [r9], #1
   b5ac8:	f003 f84b 	bl	b8b62 <_ZplRK15StringSumHelperh>
   b5acc:	4933      	ldr	r1, [pc, #204]	; (b5b9c <loop+0x63c>)
   b5ace:	f003 f833 	bl	b8b38 <_ZplRK15StringSumHelperPKc>
   b5ad2:	220a      	movs	r2, #10
   b5ad4:	f858 1b04 	ldr.w	r1, [r8], #4
   b5ad8:	4607      	mov	r7, r0
   b5ada:	a80d      	add	r0, sp, #52	; 0x34
   b5adc:	f002 ffd4 	bl	b8a88 <_ZN6StringC1Elh>
   b5ae0:	a90d      	add	r1, sp, #52	; 0x34
   b5ae2:	4638      	mov	r0, r7
   b5ae4:	f003 f81c 	bl	b8b20 <_ZplRK15StringSumHelperRK6String>
   b5ae8:	492d      	ldr	r1, [pc, #180]	; (b5ba0 <loop+0x640>)
   b5aea:	f003 f825 	bl	b8b38 <_ZplRK15StringSumHelperPKc>
   b5aee:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5af0:	482c      	ldr	r0, [pc, #176]	; (b5ba4 <loop+0x644>)
   b5af2:	f002 fff3 	bl	b8adc <_ZN6String6concatERKS_>
   b5af6:	a80d      	add	r0, sp, #52	; 0x34
   b5af8:	f002 ff28 	bl	b894c <_ZN6StringD1Ev>
   b5afc:	a804      	add	r0, sp, #16
   b5afe:	f002 ff25 	bl	b894c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b5b02:	a808      	add	r0, sp, #32
   b5b04:	f002 ff22 	bl	b894c <_ZN6StringD1Ev>
        for (int i = 0; i < storedValuesIndex; i++)
   b5b08:	3501      	adds	r5, #1
   b5b0a:	4b23      	ldr	r3, [pc, #140]	; (b5b98 <loop+0x638>)
   b5b0c:	e7c6      	b.n	b5a9c <loop+0x53c>
        WiFi.on();
   b5b0e:	481f      	ldr	r0, [pc, #124]	; (b5b8c <loop+0x62c>)
   b5b10:	f7fe fb01 	bl	b4116 <_ZN5spark9WiFiClass2onEv>
        WiFi.connect();
   b5b14:	481d      	ldr	r0, [pc, #116]	; (b5b8c <loop+0x62c>)
   b5b16:	4629      	mov	r1, r5
   b5b18:	f7fe fb09 	bl	b412e <_ZN5spark9WiFiClass7connectEj>
   b5b1c:	e788      	b.n	b5a30 <loop+0x4d0>
        storedValuesIndex = 0;
   b5b1e:	2300      	movs	r3, #0
        String localPayload = payload;
   b5b20:	4920      	ldr	r1, [pc, #128]	; (b5ba4 <loop+0x644>)
        storedValuesIndex = 0;
   b5b22:	6023      	str	r3, [r4, #0]
        String localPayload = payload;
   b5b24:	a808      	add	r0, sp, #32
   b5b26:	f002 ff7f 	bl	b8a28 <_ZN6StringC1ERKS_>
        payload = "";
   b5b2a:	4920      	ldr	r1, [pc, #128]	; (b5bac <loop+0x64c>)
   b5b2c:	481d      	ldr	r0, [pc, #116]	; (b5ba4 <loop+0x644>)
   b5b2e:	f002 ff86 	bl	b8a3e <_ZN6StringaSEPKc>
        reportData(localPayload);
   b5b32:	a908      	add	r1, sp, #32
   b5b34:	a80d      	add	r0, sp, #52	; 0x34
   b5b36:	f002 ff77 	bl	b8a28 <_ZN6StringC1ERKS_>
   b5b3a:	a80d      	add	r0, sp, #52	; 0x34
   b5b3c:	f7ff fb6c 	bl	b5218 <_Z10reportData6String>
   b5b40:	a80d      	add	r0, sp, #52	; 0x34
   b5b42:	f002 ff03 	bl	b894c <_ZN6StringD1Ev>
        String localPayload = payload;
   b5b46:	a808      	add	r0, sp, #32
   b5b48:	f002 ff00 	bl	b894c <_ZN6StringD1Ev>
      delay(recordingInterval);
   b5b4c:	6830      	ldr	r0, [r6, #0]
}
   b5b4e:	b013      	add	sp, #76	; 0x4c
   b5b50:	ecbd 8b02 	vpop	{d8}
   b5b54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      delay(recordingInterval);
   b5b58:	f001 b91e 	b.w	b6d98 <delay>
        WiFi.on();
   b5b5c:	480b      	ldr	r0, [pc, #44]	; (b5b8c <loop+0x62c>)
   b5b5e:	f7fe fada 	bl	b4116 <_ZN5spark9WiFiClass2onEv>
        WiFi.connect();
   b5b62:	480a      	ldr	r0, [pc, #40]	; (b5b8c <loop+0x62c>)
   b5b64:	4629      	mov	r1, r5
   b5b66:	f7fe fae2 	bl	b412e <_ZN5spark9WiFiClass7connectEj>
   b5b6a:	e7ef      	b.n	b5b4c <loop+0x5ec>
   b5b6c:	20032274 	.word	0x20032274
   b5b70:	2003bf00 	.word	0x2003bf00
   b5b74:	200322ac 	.word	0x200322ac
   b5b78:	200322c0 	.word	0x200322c0
   b5b7c:	000bb14b 	.word	0x000bb14b
   b5b80:	20032204 	.word	0x20032204
   b5b84:	20032210 	.word	0x20032210
   b5b88:	20032208 	.word	0x20032208
   b5b8c:	2003e710 	.word	0x2003e710
   b5b90:	000bb16d 	.word	0x000bb16d
   b5b94:	000bb0bb 	.word	0x000bb0bb
   b5b98:	000bb0d1 	.word	0x000bb0d1
   b5b9c:	000bb0e5 	.word	0x000bb0e5
   b5ba0:	000bb0f4 	.word	0x000bb0f4
   b5ba4:	200321ec 	.word	0x200321ec
   b5ba8:	000bb15f 	.word	0x000bb15f
   b5bac:	000bac31 	.word	0x000bac31
   b5bb0:	000bb180 	.word	0x000bb180
   b5bb4:	20031c60 	.word	0x20031c60
   b5bb8:	000bb0da 	.word	0x000bb0da

000b5bbc <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b5bbc:	4770      	bx	lr

000b5bbe <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   b5bbe:	4770      	bx	lr

000b5bc0 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   b5bc0:	b538      	push	{r3, r4, r5, lr}
   b5bc2:	460c      	mov	r4, r1
   b5bc4:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b5bc6:	2220      	movs	r2, #32
   b5bc8:	2100      	movs	r1, #0
   b5bca:	f104 0008 	add.w	r0, r4, #8
   b5bce:	f004 fd85 	bl	ba6dc <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   b5bd2:	220b      	movs	r2, #11
   b5bd4:	4904      	ldr	r1, [pc, #16]	; (b5be8 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x28>)
   b5bd6:	4620      	mov	r0, r4
   b5bd8:	f004 fdd0 	bl	ba77c <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
   b5bdc:	2301      	movs	r3, #1
   b5bde:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id   = _sensorID;
   b5be0:	69aa      	ldr	r2, [r5, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   b5be2:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sensor->min_delay   = 0;
  sensor->max_value   = 0;
  sensor->min_value   = 0;
  sensor->resolution  = 0;
}
   b5be6:	bd38      	pop	{r3, r4, r5, pc}
   b5be8:	000baaee 	.word	0x000baaee

000b5bec <_ZN15Adafruit_LIS3DHD0Ev>:
   b5bec:	b510      	push	{r4, lr}
   b5bee:	212c      	movs	r1, #44	; 0x2c
   b5bf0:	4604      	mov	r4, r0
   b5bf2:	f7fe fa54 	bl	b409e <_ZdlPvj>
   b5bf6:	4620      	mov	r0, r4
   b5bf8:	bd10      	pop	{r4, pc}
	...

000b5bfc <_ZN15Adafruit_LIS3DHC1Ev>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   b5bfc:	4a06      	ldr	r2, [pc, #24]	; (b5c18 <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   b5bfe:	6002      	str	r2, [r0, #0]
   b5c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5c04:	6182      	str	r2, [r0, #24]
   b5c06:	7742      	strb	r2, [r0, #29]
   b5c08:	83c2      	strh	r2, [r0, #30]
   b5c0a:	22ff      	movs	r2, #255	; 0xff
   b5c0c:	f880 2020 	strb.w	r2, [r0, #32]
   b5c10:	2208      	movs	r2, #8
   b5c12:	6242      	str	r2, [r0, #36]	; 0x24
}
   b5c14:	4770      	bx	lr
   b5c16:	bf00      	nop
   b5c18:	000bb1e4 	.word	0x000bb1e4

000b5c1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5c1c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5c1e:	4c0b      	ldr	r4, [pc, #44]	; (b5c4c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5c20:	7821      	ldrb	r1, [r4, #0]
   b5c22:	f3bf 8f5b 	dmb	ish
   b5c26:	f011 0101 	ands.w	r1, r1, #1
   b5c2a:	d10b      	bne.n	b5c44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5c2c:	4620      	mov	r0, r4
   b5c2e:	9101      	str	r1, [sp, #4]
   b5c30:	f7fe fa37 	bl	b40a2 <__cxa_guard_acquire>
   b5c34:	9901      	ldr	r1, [sp, #4]
   b5c36:	b128      	cbz	r0, b5c44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5c38:	4805      	ldr	r0, [pc, #20]	; (b5c50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5c3a:	f002 fdf3 	bl	b8824 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5c3e:	4620      	mov	r0, r4
   b5c40:	f7fe fa34 	bl	b40ac <__cxa_guard_release>
        return instance;
    }
   b5c44:	4802      	ldr	r0, [pc, #8]	; (b5c50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5c46:	b002      	add	sp, #8
   b5c48:	bd10      	pop	{r4, pc}
   b5c4a:	bf00      	nop
   b5c4c:	2003e6a4 	.word	0x2003e6a4
   b5c50:	2003e6a8 	.word	0x2003e6a8

000b5c54 <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   b5c54:	b508      	push	{r3, lr}
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   b5c56:	f7ff ffe1 	bl	b5c1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5c5a:	2101      	movs	r1, #1
   b5c5c:	f002 fe00 	bl	b8860 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b5c60:	f7ff ffdc 	bl	b5c1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5c64:	4905      	ldr	r1, [pc, #20]	; (b5c7c <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   b5c66:	2201      	movs	r2, #1
   b5c68:	f002 fe38 	bl	b88dc <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
   b5c6c:	f7ff ffd6 	bl	b5c1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   b5c70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b5c74:	2100      	movs	r1, #0
   b5c76:	f002 be07 	b.w	b8888 <_ZN8SPIClass11setDataModeEh>
   b5c7a:	bf00      	nop
   b5c7c:	0007a120 	.word	0x0007a120

000b5c80 <_ZN15Adafruit_LIS3DH7spixferEh>:
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   b5c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_sck == -1)
   b5c84:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b5c88:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   b5c8a:	4605      	mov	r5, r0
   b5c8c:	460f      	mov	r7, r1
  if (_sck == -1)
   b5c8e:	d106      	bne.n	b5c9e <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b5c90:	f7ff ffc4 	bl	b5c1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5c94:	4639      	mov	r1, r7
}
   b5c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b5c9a:	f002 be51 	b.w	b8940 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   b5c9e:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   b5ca0:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   b5ca2:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   b5ca6:	f995 0020 	ldrsb.w	r0, [r5, #32]
   b5caa:	2100      	movs	r1, #0
   b5cac:	b280      	uxth	r0, r0
   b5cae:	f003 fe6c 	bl	b998a <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   b5cb2:	f995 001e 	ldrsb.w	r0, [r5, #30]
   b5cb6:	fa08 f106 	lsl.w	r1, r8, r6
   b5cba:	4039      	ands	r1, r7
   b5cbc:	b280      	uxth	r0, r0
   b5cbe:	f003 fe64 	bl	b998a <digitalWrite>
    digitalWrite(_sck, HIGH);
   b5cc2:	f995 0020 	ldrsb.w	r0, [r5, #32]
   b5cc6:	2101      	movs	r1, #1
   b5cc8:	b280      	uxth	r0, r0
   b5cca:	f003 fe5e 	bl	b998a <digitalWrite>
    if (digitalRead(_miso))
   b5cce:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
   b5cd2:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   b5cd4:	b280      	uxth	r0, r0
    reply <<= 1;
   b5cd6:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   b5cd8:	f003 fe70 	bl	b99bc <digitalRead>
   b5cdc:	b108      	cbz	r0, b5ce2 <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   b5cde:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   b5ce2:	3e01      	subs	r6, #1
   b5ce4:	d2df      	bcs.n	b5ca6 <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
   b5ce6:	4620      	mov	r0, r4
   b5ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5cec <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   b5cec:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   b5cee:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5cf2:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   b5cf4:	4604      	mov	r4, r0
   b5cf6:	460e      	mov	r6, r1
   b5cf8:	4615      	mov	r5, r2
  if (_cs == -1) {
   b5cfa:	d116      	bne.n	b5d2a <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   b5cfc:	f003 fea0 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b5d00:	7f21      	ldrb	r1, [r4, #28]
   b5d02:	f002 fb93 	bl	b842c <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   b5d06:	f003 fe9b 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b5d0a:	6803      	ldr	r3, [r0, #0]
   b5d0c:	4631      	mov	r1, r6
   b5d0e:	689b      	ldr	r3, [r3, #8]
   b5d10:	4798      	blx	r3
    Wire.write((uint8_t)value);
   b5d12:	f003 fe95 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b5d16:	6803      	ldr	r3, [r0, #0]
   b5d18:	4629      	mov	r1, r5
   b5d1a:	689b      	ldr	r3, [r3, #8]
   b5d1c:	4798      	blx	r3
    Wire.endTransmission();
   b5d1e:	f003 fe8f 	bl	b9a40 <_Z19__fetch_global_Wirev>
}
   b5d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   b5d26:	f002 bb8c 	b.w	b8442 <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
   b5d2a:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b5d2e:	3301      	adds	r3, #1
   b5d30:	d101      	bne.n	b5d36 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   b5d32:	f7ff ff8f 	bl	b5c54 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   b5d36:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5d3a:	2100      	movs	r1, #0
   b5d3c:	b280      	uxth	r0, r0
   b5d3e:	f003 fe24 	bl	b998a <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   b5d42:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b5d46:	4620      	mov	r0, r4
   b5d48:	f7ff ff9a 	bl	b5c80 <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   b5d4c:	4629      	mov	r1, r5
   b5d4e:	4620      	mov	r0, r4
   b5d50:	f7ff ff96 	bl	b5c80 <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   b5d54:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5d58:	2101      	movs	r1, #1
}
   b5d5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   b5d5e:	b280      	uxth	r0, r0
   b5d60:	f003 be13 	b.w	b998a <digitalWrite>

000b5d64 <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   b5d64:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   b5d66:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5d6a:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   b5d6c:	4604      	mov	r4, r0
   b5d6e:	460d      	mov	r5, r1
  if (_cs == -1) {
   b5d70:	d11d      	bne.n	b5dae <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   b5d72:	f003 fe65 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b5d76:	f994 101c 	ldrsb.w	r1, [r4, #28]
   b5d7a:	f002 fb5b 	bl	b8434 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   b5d7e:	f003 fe5f 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b5d82:	6803      	ldr	r3, [r0, #0]
   b5d84:	4629      	mov	r1, r5
   b5d86:	689b      	ldr	r3, [r3, #8]
   b5d88:	4798      	blx	r3
    Wire.endTransmission();
   b5d8a:	f003 fe59 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b5d8e:	f002 fb58 	bl	b8442 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
   b5d92:	f003 fe55 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b5d96:	7f21      	ldrb	r1, [r4, #28]
   b5d98:	2201      	movs	r2, #1
   b5d9a:	f002 fb44 	bl	b8426 <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   b5d9e:	f003 fe4f 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b5da2:	6803      	ldr	r3, [r0, #0]
   b5da4:	695b      	ldr	r3, [r3, #20]
   b5da6:	4798      	blx	r3
   b5da8:	b2c5      	uxtb	r5, r0
}
   b5daa:	4628      	mov	r0, r5
   b5dac:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
   b5dae:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b5db2:	3301      	adds	r3, #1
   b5db4:	d101      	bne.n	b5dba <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   b5db6:	f7ff ff4d 	bl	b5c54 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
   b5dba:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5dbe:	2100      	movs	r1, #0
   b5dc0:	b280      	uxth	r0, r0
   b5dc2:	f003 fde2 	bl	b998a <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   b5dc6:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b5dca:	4620      	mov	r0, r4
   b5dcc:	f7ff ff58 	bl	b5c80 <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   b5dd0:	2100      	movs	r1, #0
   b5dd2:	4620      	mov	r0, r4
   b5dd4:	f7ff ff54 	bl	b5c80 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5dd8:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   b5dda:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5dde:	2101      	movs	r1, #1
   b5de0:	b280      	uxth	r0, r0
   b5de2:	f003 fdd2 	bl	b998a <digitalWrite>
    if (_sck == -1)
   b5de6:	e7e0      	b.n	b5daa <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

000b5de8 <_ZN15Adafruit_LIS3DH8getRangeEv>:
{
   b5de8:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   b5dea:	2123      	movs	r1, #35	; 0x23
   b5dec:	f7ff ffba 	bl	b5d64 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   b5df0:	f3c0 1001 	ubfx	r0, r0, #4, #2
   b5df4:	bd08      	pop	{r3, pc}

000b5df6 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
   b5df6:	b538      	push	{r3, r4, r5, lr}
   b5df8:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   b5dfa:	2120      	movs	r1, #32
{
   b5dfc:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   b5dfe:	f7ff ffb1 	bl	b5d64 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
   b5e02:	f000 030f 	and.w	r3, r0, #15
  ctl1 |= (dataRate << 4);
   b5e06:	ea43 1205 	orr.w	r2, r3, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   b5e0a:	4620      	mov	r0, r4
   b5e0c:	b2d2      	uxtb	r2, r2
}
   b5e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   b5e12:	2120      	movs	r1, #32
   b5e14:	f7ff bf6a 	b.w	b5cec <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000b5e18 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
   b5e18:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   b5e1a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5e1e:	3301      	adds	r3, #1
void Adafruit_LIS3DH::read(void) {
   b5e20:	4604      	mov	r4, r0
  if (_cs == -1) {
   b5e22:	d177      	bne.n	b5f14 <_ZN15Adafruit_LIS3DH4readEv+0xfc>
    Wire.beginTransmission(_i2caddr);
   b5e24:	f003 fe0c 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b5e28:	f994 101c 	ldrsb.w	r1, [r4, #28]
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   b5e2c:	4d5d      	ldr	r5, [pc, #372]	; (b5fa4 <_ZN15Adafruit_LIS3DH4readEv+0x18c>)
    Wire.beginTransmission(_i2caddr);
   b5e2e:	f002 fb01 	bl	b8434 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   b5e32:	f003 fe05 	bl	b9a40 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5e36:	6803      	ldr	r3, [r0, #0]
   b5e38:	21a8      	movs	r1, #168	; 0xa8
   b5e3a:	689b      	ldr	r3, [r3, #8]
   b5e3c:	4798      	blx	r3
    Wire.endTransmission();
   b5e3e:	f003 fdff 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b5e42:	f002 fafe 	bl	b8442 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
   b5e46:	f003 fdfb 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b5e4a:	7f21      	ldrb	r1, [r4, #28]
   b5e4c:	2206      	movs	r2, #6
   b5e4e:	f002 faea 	bl	b8426 <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   b5e52:	f003 fdf5 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b5e56:	6803      	ldr	r3, [r0, #0]
   b5e58:	695b      	ldr	r3, [r3, #20]
   b5e5a:	4798      	blx	r3
   b5e5c:	80e0      	strh	r0, [r4, #6]
   b5e5e:	f003 fdef 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b5e62:	6803      	ldr	r3, [r0, #0]
   b5e64:	695b      	ldr	r3, [r3, #20]
   b5e66:	4798      	blx	r3
   b5e68:	88e3      	ldrh	r3, [r4, #6]
   b5e6a:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b5e6e:	4318      	orrs	r0, r3
   b5e70:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   b5e72:	f003 fde5 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b5e76:	6803      	ldr	r3, [r0, #0]
   b5e78:	695b      	ldr	r3, [r3, #20]
   b5e7a:	4798      	blx	r3
   b5e7c:	8120      	strh	r0, [r4, #8]
   b5e7e:	f003 fddf 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b5e82:	6803      	ldr	r3, [r0, #0]
   b5e84:	695b      	ldr	r3, [r3, #20]
   b5e86:	4798      	blx	r3
   b5e88:	8923      	ldrh	r3, [r4, #8]
   b5e8a:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b5e8e:	4318      	orrs	r0, r3
   b5e90:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   b5e92:	f003 fdd5 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b5e96:	6803      	ldr	r3, [r0, #0]
   b5e98:	695b      	ldr	r3, [r3, #20]
   b5e9a:	4798      	blx	r3
   b5e9c:	8160      	strh	r0, [r4, #10]
   b5e9e:	f003 fdcf 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b5ea2:	6803      	ldr	r3, [r0, #0]
   b5ea4:	695b      	ldr	r3, [r3, #20]
   b5ea6:	4798      	blx	r3
   b5ea8:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b5eac:	8965      	ldrh	r5, [r4, #10]
   b5eae:	4328      	orrs	r0, r5
   b5eb0:	8160      	strh	r0, [r4, #10]
  uint8_t range = getRange();
   b5eb2:	4620      	mov	r0, r4
   b5eb4:	f7ff ff98 	bl	b5de8 <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   b5eb8:	2803      	cmp	r0, #3
   b5eba:	d069      	beq.n	b5f90 <_ZN15Adafruit_LIS3DH4readEv+0x178>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   b5ebc:	2802      	cmp	r0, #2
   b5ebe:	d06a      	beq.n	b5f96 <_ZN15Adafruit_LIS3DH4readEv+0x17e>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   b5ec0:	2801      	cmp	r0, #1
   b5ec2:	d06b      	beq.n	b5f9c <_ZN15Adafruit_LIS3DH4readEv+0x184>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   b5ec4:	2800      	cmp	r0, #0
   b5ec6:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   b5eca:	bf18      	it	ne
   b5ecc:	2301      	movne	r3, #1
  x_g = (float)x / divider;
   b5ece:	ee07 3a90 	vmov	s15, r3
   b5ed2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   b5ed6:	ee07 3a10 	vmov	s14, r3
   b5eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5ede:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   b5ee2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  x_g = (float)x / divider;
   b5ee6:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   b5eea:	ee07 3a10 	vmov	s14, r3
   b5eee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_g = (float)x / divider;
   b5ef2:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   b5ef6:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   b5efa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5efe:	ee07 3a10 	vmov	s14, r3
   b5f02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   b5f06:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   b5f0a:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b5f0e:	edc4 6a05 	vstr	s13, [r4, #20]
}
   b5f12:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
   b5f14:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b5f18:	3301      	adds	r3, #1
   b5f1a:	d101      	bne.n	b5f20 <_ZN15Adafruit_LIS3DH4readEv+0x108>
      beginTransaction();
   b5f1c:	f7ff fe9a 	bl	b5c54 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   b5f20:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5f24:	2100      	movs	r1, #0
   b5f26:	b280      	uxth	r0, r0
   b5f28:	f003 fd2f 	bl	b998a <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   b5f2c:	21e8      	movs	r1, #232	; 0xe8
   b5f2e:	4620      	mov	r0, r4
   b5f30:	f7ff fea6 	bl	b5c80 <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   b5f34:	21ff      	movs	r1, #255	; 0xff
   b5f36:	4620      	mov	r0, r4
   b5f38:	f7ff fea2 	bl	b5c80 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5f3c:	21ff      	movs	r1, #255	; 0xff
   b5f3e:	80e0      	strh	r0, [r4, #6]
   b5f40:	4620      	mov	r0, r4
   b5f42:	f7ff fe9d 	bl	b5c80 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5f46:	88e3      	ldrh	r3, [r4, #6]
   b5f48:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b5f4c:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   b5f4e:	21ff      	movs	r1, #255	; 0xff
   b5f50:	4620      	mov	r0, r4
   b5f52:	f7ff fe95 	bl	b5c80 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5f56:	21ff      	movs	r1, #255	; 0xff
   b5f58:	8120      	strh	r0, [r4, #8]
   b5f5a:	4620      	mov	r0, r4
   b5f5c:	f7ff fe90 	bl	b5c80 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5f60:	8923      	ldrh	r3, [r4, #8]
   b5f62:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b5f66:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   b5f68:	21ff      	movs	r1, #255	; 0xff
   b5f6a:	4620      	mov	r0, r4
   b5f6c:	f7ff fe88 	bl	b5c80 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5f70:	21ff      	movs	r1, #255	; 0xff
   b5f72:	8160      	strh	r0, [r4, #10]
   b5f74:	4620      	mov	r0, r4
   b5f76:	f7ff fe83 	bl	b5c80 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5f7a:	8963      	ldrh	r3, [r4, #10]
   b5f7c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b5f80:	8160      	strh	r0, [r4, #10]
    digitalWrite(_cs, HIGH);
   b5f82:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5f86:	2101      	movs	r1, #1
   b5f88:	b280      	uxth	r0, r0
   b5f8a:	f003 fcfe 	bl	b998a <digitalWrite>
    if (_sck == -1)
   b5f8e:	e790      	b.n	b5eb2 <_ZN15Adafruit_LIS3DH4readEv+0x9a>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   b5f90:	f44f 6300 	mov.w	r3, #2048	; 0x800
   b5f94:	e79b      	b.n	b5ece <_ZN15Adafruit_LIS3DH4readEv+0xb6>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   b5f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   b5f9a:	e798      	b.n	b5ece <_ZN15Adafruit_LIS3DH4readEv+0xb6>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   b5f9c:	f641 73fe 	movw	r3, #8190	; 0x1ffe
   b5fa0:	e795      	b.n	b5ece <_ZN15Adafruit_LIS3DH4readEv+0xb6>
   b5fa2:	bf00      	nop
   b5fa4:	00ffff00 	.word	0x00ffff00

000b5fa8 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   b5fa8:	b570      	push	{r4, r5, r6, lr}
   b5faa:	460c      	mov	r4, r1
   b5fac:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b5fae:	2220      	movs	r2, #32
   b5fb0:	2100      	movs	r1, #0
   b5fb2:	1d20      	adds	r0, r4, #4
   b5fb4:	f004 fb92 	bl	ba6dc <memset>
  event->version   = sizeof(sensors_event_t);
   b5fb8:	2324      	movs	r3, #36	; 0x24
   b5fba:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b5fbc:	69ab      	ldr	r3, [r5, #24]
   b5fbe:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   b5fc0:	2601      	movs	r6, #1
  read();
   b5fc2:	4628      	mov	r0, r5
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   b5fc4:	60a6      	str	r6, [r4, #8]
  read();
   b5fc6:	f7ff ff27 	bl	b5e18 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
   b5fca:	68eb      	ldr	r3, [r5, #12]
   b5fcc:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   b5fce:	692b      	ldr	r3, [r5, #16]
   b5fd0:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   b5fd2:	696b      	ldr	r3, [r5, #20]
   b5fd4:	61e3      	str	r3, [r4, #28]
}
   b5fd6:	4630      	mov	r0, r6
   b5fd8:	bd70      	pop	{r4, r5, r6, pc}

000b5fda <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   b5fda:	b510      	push	{r4, lr}
   b5fdc:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   b5fde:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
   b5fe0:	f990 001d 	ldrsb.w	r0, [r0, #29]
   b5fe4:	1c42      	adds	r2, r0, #1
   b5fe6:	d123      	bne.n	b6030 <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
   b5fe8:	f003 fd2a 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b5fec:	f002 f9ec 	bl	b83c8 <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   b5ff0:	210f      	movs	r1, #15
   b5ff2:	4620      	mov	r0, r4
   b5ff4:	f7ff feb6 	bl	b5d64 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   b5ff8:	2833      	cmp	r0, #51	; 0x33
   b5ffa:	d13d      	bne.n	b6078 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   b5ffc:	2207      	movs	r2, #7
   b5ffe:	2120      	movs	r1, #32
   b6000:	4620      	mov	r0, r4
   b6002:	f7ff fe73 	bl	b5cec <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
   b6006:	2107      	movs	r1, #7
   b6008:	4620      	mov	r0, r4
   b600a:	f7ff fef4 	bl	b5df6 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   b600e:	2288      	movs	r2, #136	; 0x88
   b6010:	2123      	movs	r1, #35	; 0x23
   b6012:	4620      	mov	r0, r4
   b6014:	f7ff fe6a 	bl	b5cec <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   b6018:	2210      	movs	r2, #16
   b601a:	2122      	movs	r1, #34	; 0x22
   b601c:	4620      	mov	r0, r4
   b601e:	f7ff fe65 	bl	b5cec <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   b6022:	4620      	mov	r0, r4
   b6024:	2280      	movs	r2, #128	; 0x80
   b6026:	211f      	movs	r1, #31
   b6028:	f7ff fe60 	bl	b5cec <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
   b602c:	2001      	movs	r0, #1
}
   b602e:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   b6030:	2101      	movs	r1, #1
   b6032:	b280      	uxth	r0, r0
   b6034:	f003 fca9 	bl	b998a <digitalWrite>
    pinMode(_cs, OUTPUT);
   b6038:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b603c:	2101      	movs	r1, #1
   b603e:	b280      	uxth	r0, r0
   b6040:	f003 fc92 	bl	b9968 <pinMode>
    if (_sck == -1) {
   b6044:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b6048:	1c43      	adds	r3, r0, #1
   b604a:	d104      	bne.n	b6056 <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
   b604c:	f7ff fde6 	bl	b5c1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6050:	f002 fbf2 	bl	b8838 <_ZN8SPIClass5beginEv>
    }
   b6054:	e7cc      	b.n	b5ff0 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
   b6056:	2101      	movs	r1, #1
   b6058:	b280      	uxth	r0, r0
   b605a:	f003 fc85 	bl	b9968 <pinMode>
      pinMode(_mosi, OUTPUT);
   b605e:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b6062:	2101      	movs	r1, #1
   b6064:	b280      	uxth	r0, r0
   b6066:	f003 fc7f 	bl	b9968 <pinMode>
      pinMode(_miso, INPUT);
   b606a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b606e:	2100      	movs	r1, #0
   b6070:	b280      	uxth	r0, r0
   b6072:	f003 fc79 	bl	b9968 <pinMode>
   b6076:	e7bb      	b.n	b5ff0 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
   b6078:	2000      	movs	r0, #0
   b607a:	e7d8      	b.n	b602e <_ZN15Adafruit_LIS3DH5beginEh+0x54>

000b607c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
size_t Print::print(T n, int base)
   b607c:	b570      	push	{r4, r5, r6, lr}
        if (n < 0 && base == 10) {
   b607e:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b6080:	4606      	mov	r6, r0
   b6082:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b6084:	da0b      	bge.n	b609e <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b6086:	2a0a      	cmp	r2, #10
   b6088:	d109      	bne.n	b609e <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b608a:	212d      	movs	r1, #45	; 0x2d
   b608c:	f002 fb50 	bl	b8730 <_ZN5Print5printEc>
            val = -n;
   b6090:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b6092:	b2ea      	uxtb	r2, r5
   b6094:	4630      	mov	r0, r6
    }
}
   b6096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b609a:	f002 bb68 	b.w	b876e <_ZN5Print11printNumberEmh>
            val = n;
   b609e:	4621      	mov	r1, r4
   b60a0:	e7f7      	b.n	b6092 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b60a2 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b60a2:	b510      	push	{r4, lr}
   b60a4:	4604      	mov	r4, r0
   b60a6:	f003 f95d 	bl	b9364 <_ZN9TCPClientC1Ev>
{

}
   b60aa:	4620      	mov	r0, r4
   b60ac:	bd10      	pop	{r4, pc}
	...

000b60b0 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b60b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   b60b2:	4f0f      	ldr	r7, [pc, #60]	; (b60f0 <_ZN10HttpClient10sendHeaderEPKcS1_+0x40>)
{
   b60b4:	4605      	mov	r5, r0
   b60b6:	4614      	mov	r4, r2
   b60b8:	460e      	mov	r6, r1
    client.print(aHeaderName);
   b60ba:	f002 fb35 	bl	b8728 <_ZN5Print5printEPKc>
    client.print(": ");
   b60be:	4639      	mov	r1, r7
   b60c0:	4628      	mov	r0, r5
   b60c2:	f002 fb31 	bl	b8728 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b60c6:	4621      	mov	r1, r4
   b60c8:	4628      	mov	r0, r5
   b60ca:	f002 fb46 	bl	b875a <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.print(aHeaderName);
   b60ce:	f003 fa69 	bl	b95a4 <_Z16_fetch_usbserialv>
   b60d2:	4631      	mov	r1, r6
   b60d4:	f002 fb28 	bl	b8728 <_ZN5Print5printEPKc>
    Serial.print(": ");
   b60d8:	f003 fa64 	bl	b95a4 <_Z16_fetch_usbserialv>
   b60dc:	4639      	mov	r1, r7
   b60de:	f002 fb23 	bl	b8728 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   b60e2:	f003 fa5f 	bl	b95a4 <_Z16_fetch_usbserialv>
   b60e6:	4621      	mov	r1, r4
    #endif
}
   b60e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(aHeaderValue);
   b60ec:	f002 bb35 	b.w	b875a <_ZN5Print7printlnEPKc>
   b60f0:	000babe2 	.word	0x000babe2

000b60f4 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b60f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   b60f6:	4f14      	ldr	r7, [pc, #80]	; (b6148 <_ZN10HttpClient10sendHeaderEPKci+0x54>)
{
   b60f8:	4604      	mov	r4, r0
   b60fa:	4615      	mov	r5, r2
   b60fc:	460e      	mov	r6, r1
    client.print(aHeaderName);
   b60fe:	f002 fb13 	bl	b8728 <_ZN5Print5printEPKc>
    client.print(": ");
   b6102:	4639      	mov	r1, r7
   b6104:	4620      	mov	r0, r4
   b6106:	f002 fb0f 	bl	b8728 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b610a:	220a      	movs	r2, #10
   b610c:	4629      	mov	r1, r5
   b610e:	4620      	mov	r0, r4
   b6110:	f7ff ffb4 	bl	b607c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b6114:	4620      	mov	r0, r4
   b6116:	f002 fb14 	bl	b8742 <_ZN5Print7printlnEv>
    client.println(aHeaderValue);

    #ifdef LOGGING
    Serial.print(aHeaderName);
   b611a:	f003 fa43 	bl	b95a4 <_Z16_fetch_usbserialv>
   b611e:	4631      	mov	r1, r6
   b6120:	f002 fb02 	bl	b8728 <_ZN5Print5printEPKc>
    Serial.print(": ");
   b6124:	f003 fa3e 	bl	b95a4 <_Z16_fetch_usbserialv>
   b6128:	4639      	mov	r1, r7
   b612a:	f002 fafd 	bl	b8728 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   b612e:	f003 fa39 	bl	b95a4 <_Z16_fetch_usbserialv>
   b6132:	4629      	mov	r1, r5
   b6134:	4604      	mov	r4, r0
size_t Print::print(T n, int base)
   b6136:	220a      	movs	r2, #10
   b6138:	f7ff ffa0 	bl	b607c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b613c:	4620      	mov	r0, r4
    #endif
}
   b613e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b6142:	f002 bafe 	b.w	b8742 <_ZN5Print7printlnEv>
   b6146:	bf00      	nop
   b6148:	000babe2 	.word	0x000babe2

000b614c <_ZN10HttpClient10sendHeaderEPKc>:

void HttpClient::sendHeader(const char* aHeaderName)
{
   b614c:	b510      	push	{r4, lr}
   b614e:	460c      	mov	r4, r1
    client.println(aHeaderName);
   b6150:	f002 fb03 	bl	b875a <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.println(aHeaderName);
   b6154:	f003 fa26 	bl	b95a4 <_Z16_fetch_usbserialv>
   b6158:	4621      	mov	r1, r4
    #endif
}
   b615a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(aHeaderName);
   b615e:	f002 bafc 	b.w	b875a <_ZN5Print7printlnEPKc>
	...

000b6164 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b6164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6168:	460e      	mov	r6, r1
   b616a:	b091      	sub	sp, #68	; 0x44
   b616c:	461f      	mov	r7, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b616e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6172:	6013      	str	r3, [r2, #0]
{
   b6174:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b6176:	2100      	movs	r1, #0
   b6178:	4630      	mov	r0, r6
   b617a:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b617e:	4690      	mov	r8, r2
   b6180:	f002 fcf9 	bl	b8b76 <_ZNK6String6equalsEPKc>
   b6184:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b6188:	4603      	mov	r3, r0
   b618a:	b9c0      	cbnz	r0, b61be <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x5a>
	const char * c_str() const { return buffer; }
   b618c:	f1be 0f00 	cmp.w	lr, #0
   b6190:	bf14      	ite	ne
   b6192:	4672      	movne	r2, lr
   b6194:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b6196:	6831      	ldr	r1, [r6, #0]
   b6198:	b292      	uxth	r2, r2
   b619a:	4620      	mov	r0, r4
   b619c:	f002 fee2 	bl	b8f64 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b61a0:	1e05      	subs	r5, r0, #0
   b61a2:	bf18      	it	ne
   b61a4:	2501      	movne	r5, #1
    }

    #ifdef LOGGING
    if (connected) {
   b61a6:	b9ed      	cbnz	r5, b61e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x80>
            Serial.print(aRequest.ip);
        }
        Serial.print(":");
        Serial.println(aRequest.port);
    } else {
        Serial.println("HttpClient>\tConnection failed.");
   b61a8:	f003 f9fc 	bl	b95a4 <_Z16_fetch_usbserialv>
   b61ac:	49be      	ldr	r1, [pc, #760]	; (b64a8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x344>)
   b61ae:	f002 fad4 	bl	b875a <_ZN5Print7printlnEPKc>
    }
    #endif

    if (!connected) {
        client.stop();
   b61b2:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b61b4:	b011      	add	sp, #68	; 0x44
   b61b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b61ba:	f003 b889 	b.w	b92d0 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b61be:	4bbb      	ldr	r3, [pc, #748]	; (b64ac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x348>)
   b61c0:	930a      	str	r3, [sp, #40]	; 0x28
   b61c2:	f106 0c14 	add.w	ip, r6, #20
   b61c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b61ca:	ad0b      	add	r5, sp, #44	; 0x2c
   b61cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b61ce:	f8dc 3000 	ldr.w	r3, [ip]
   b61d2:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b61d4:	fa1f f28e 	uxth.w	r2, lr
   b61d8:	2300      	movs	r3, #0
   b61da:	a90a      	add	r1, sp, #40	; 0x28
   b61dc:	4620      	mov	r0, r4
   b61de:	f002 ffa1 	bl	b9124 <_ZN9TCPClient7connectE9IPAddresstm>
   b61e2:	e7dd      	b.n	b61a0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b61e4:	2100      	movs	r1, #0
   b61e6:	4630      	mov	r0, r6
   b61e8:	f002 fcc5 	bl	b8b76 <_ZNK6String6equalsEPKc>
        if(aRequest.hostname!=NULL) {
   b61ec:	2800      	cmp	r0, #0
   b61ee:	d15d      	bne.n	b62ac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x148>
            Serial.print("HttpClient>\tConnecting to: ");
   b61f0:	f003 f9d8 	bl	b95a4 <_Z16_fetch_usbserialv>
   b61f4:	49ae      	ldr	r1, [pc, #696]	; (b64b0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x34c>)
   b61f6:	f002 fa97 	bl	b8728 <_ZN5Print5printEPKc>
            Serial.print(aRequest.hostname);
   b61fa:	f003 f9d3 	bl	b95a4 <_Z16_fetch_usbserialv>
   b61fe:	6831      	ldr	r1, [r6, #0]
   b6200:	f002 fa92 	bl	b8728 <_ZN5Print5printEPKc>
        Serial.print(":");
   b6204:	f003 f9ce 	bl	b95a4 <_Z16_fetch_usbserialv>
   b6208:	49aa      	ldr	r1, [pc, #680]	; (b64b4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   b620a:	f002 fa8d 	bl	b8728 <_ZN5Print5printEPKc>
        Serial.println(aRequest.port);
   b620e:	f003 f9c9 	bl	b95a4 <_Z16_fetch_usbserialv>
   b6212:	220a      	movs	r2, #10
   b6214:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   b6216:	4682      	mov	sl, r0
size_t Print::print(T n, int base)
   b6218:	f7ff ff30 	bl	b607c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b621c:	4650      	mov	r0, sl
   b621e:	f002 fa90 	bl	b8742 <_ZN5Print7printlnEv>
    client.print(aHttpMethod);
   b6222:	4649      	mov	r1, r9
   b6224:	4620      	mov	r0, r4
   b6226:	f002 fa7f 	bl	b8728 <_ZN5Print5printEPKc>
    client.print(" ");
   b622a:	49a3      	ldr	r1, [pc, #652]	; (b64b8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   b622c:	4620      	mov	r0, r4
   b622e:	f002 fa7b 	bl	b8728 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b6232:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b6234:	4620      	mov	r0, r4
   b6236:	f002 fa77 	bl	b8728 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b623a:	49a0      	ldr	r1, [pc, #640]	; (b64bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   b623c:	4620      	mov	r0, r4
   b623e:	f002 fa73 	bl	b8728 <_ZN5Print5printEPKc>
    Serial.println("HttpClient>\tStart of HTTP Request.");
   b6242:	f003 f9af 	bl	b95a4 <_Z16_fetch_usbserialv>
   b6246:	499e      	ldr	r1, [pc, #632]	; (b64c0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x35c>)
   b6248:	f002 fa87 	bl	b875a <_ZN5Print7printlnEPKc>
    Serial.print(aHttpMethod);
   b624c:	f003 f9aa 	bl	b95a4 <_Z16_fetch_usbserialv>
   b6250:	4649      	mov	r1, r9
   b6252:	f002 fa69 	bl	b8728 <_ZN5Print5printEPKc>
    Serial.print(" ");
   b6256:	f003 f9a5 	bl	b95a4 <_Z16_fetch_usbserialv>
   b625a:	4997      	ldr	r1, [pc, #604]	; (b64b8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   b625c:	f002 fa64 	bl	b8728 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
   b6260:	f003 f9a0 	bl	b95a4 <_Z16_fetch_usbserialv>
   b6264:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b6266:	f002 fa5f 	bl	b8728 <_ZN5Print5printEPKc>
    Serial.print(" HTTP/1.0\r\n");
   b626a:	f003 f99b 	bl	b95a4 <_Z16_fetch_usbserialv>
   b626e:	4993      	ldr	r1, [pc, #588]	; (b64bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   b6270:	f002 fa5a 	bl	b8728 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b6274:	4993      	ldr	r1, [pc, #588]	; (b64c4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x360>)
   b6276:	4a94      	ldr	r2, [pc, #592]	; (b64c8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x364>)
   b6278:	4620      	mov	r0, r4
   b627a:	f7ff ff19 	bl	b60b0 <_ZN10HttpClient10sendHeaderEPKcS1_>
   b627e:	2100      	movs	r1, #0
   b6280:	4630      	mov	r0, r6
   b6282:	f002 fc78 	bl	b8b76 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b6286:	b920      	cbnz	r0, b6292 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x12e>
        sendHeader("HOST", aRequest.hostname.c_str());
   b6288:	6832      	ldr	r2, [r6, #0]
   b628a:	4990      	ldr	r1, [pc, #576]	; (b64cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x368>)
   b628c:	4620      	mov	r0, r4
   b628e:	f7ff ff0f 	bl	b60b0 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b6292:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b6296:	2100      	movs	r1, #0
   b6298:	4650      	mov	r0, sl
   b629a:	f002 fc6c 	bl	b8b76 <_ZNK6String6equalsEPKc>
   b629e:	b988      	cbnz	r0, b62c4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x160>
        sendHeader("Content-Length", (aRequest.body).length());
   b62a0:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b62a2:	498b      	ldr	r1, [pc, #556]	; (b64d0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x36c>)
   b62a4:	4620      	mov	r0, r4
   b62a6:	f7ff ff25 	bl	b60f4 <_ZN10HttpClient10sendHeaderEPKci>
   b62aa:	e012      	b.n	b62d2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16e>
            Serial.print("HttpClient>\tConnecting to IP: ");
   b62ac:	f003 f97a 	bl	b95a4 <_Z16_fetch_usbserialv>
   b62b0:	4988      	ldr	r1, [pc, #544]	; (b64d4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x370>)
   b62b2:	f002 fa39 	bl	b8728 <_ZN5Print5printEPKc>
            Serial.print(aRequest.ip);
   b62b6:	f003 f975 	bl	b95a4 <_Z16_fetch_usbserialv>
   b62ba:	f106 0110 	add.w	r1, r6, #16
   b62be:	f002 fa3a 	bl	b8736 <_ZN5Print5printERK9Printable>
   b62c2:	e79f      	b.n	b6204 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xa0>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b62c4:	4984      	ldr	r1, [pc, #528]	; (b64d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x374>)
   b62c6:	4648      	mov	r0, r9
   b62c8:	f004 fa3e 	bl	ba748 <strcmp>
   b62cc:	4602      	mov	r2, r0
   b62ce:	2800      	cmp	r0, #0
   b62d0:	d0e7      	beq.n	b62a2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x13e>
    if (headers != NULL)
   b62d2:	b15f      	cbz	r7, b62ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x188>
        while (headers[i].header != NULL)
   b62d4:	6839      	ldr	r1, [r7, #0]
   b62d6:	b149      	cbz	r1, b62ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x188>
            if (headers[i].value != NULL) {
   b62d8:	687a      	ldr	r2, [r7, #4]
                sendHeader(headers[i].header, headers[i].value);
   b62da:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b62dc:	b11a      	cbz	r2, b62e6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
                sendHeader(headers[i].header, headers[i].value);
   b62de:	f7ff fee7 	bl	b60b0 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b62e2:	3708      	adds	r7, #8
        while (headers[i].header != NULL)
   b62e4:	e7f6      	b.n	b62d4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
                sendHeader(headers[i].header);
   b62e6:	f7ff ff31 	bl	b614c <_ZN10HttpClient10sendHeaderEPKc>
   b62ea:	e7fa      	b.n	b62e2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17e>
    client.println();
   b62ec:	4620      	mov	r0, r4
   b62ee:	f002 fa28 	bl	b8742 <_ZN5Print7printlnEv>
    client.flush();
   b62f2:	4620      	mov	r0, r4
   b62f4:	f002 fd96 	bl	b8e24 <_ZN9TCPClient5flushEv>
   b62f8:	2100      	movs	r1, #0
   b62fa:	4650      	mov	r0, sl
   b62fc:	f002 fc3b 	bl	b8b76 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b6300:	b940      	cbnz	r0, b6314 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b0>
        client.println(aRequest.body);
   b6302:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b6304:	4620      	mov	r0, r4
   b6306:	f002 fa28 	bl	b875a <_ZN5Print7printlnEPKc>
        Serial.println(aRequest.body);
   b630a:	f003 f94b 	bl	b95a4 <_Z16_fetch_usbserialv>
   b630e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b6310:	f002 fa23 	bl	b875a <_ZN5Print7printlnEPKc>
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   b6314:	f003 f946 	bl	b95a4 <_Z16_fetch_usbserialv>
    memset(&buffer[0], 0, sizeof(buffer));
   b6318:	f104 0a1c 	add.w	sl, r4, #28
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   b631c:	496f      	ldr	r1, [pc, #444]	; (b64dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x378>)
   b631e:	f002 fa1c 	bl	b875a <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b6322:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b6326:	2100      	movs	r1, #0
   b6328:	4650      	mov	r0, sl
   b632a:	f004 f9d7 	bl	ba6dc <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b632e:	f000 f9eb 	bl	b6708 <HAL_Timer_Get_Milli_Seconds>
   b6332:	9000      	str	r0, [sp, #0]
   b6334:	f000 f9e8 	bl	b6708 <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
   b6338:	2600      	movs	r6, #0
   b633a:	9001      	str	r0, [sp, #4]
        int bytes = client.available();
   b633c:	4620      	mov	r0, r4
   b633e:	f002 ff6d 	bl	b921c <_ZN9TCPClient9availableEv>
        if(bytes) {
   b6342:	4681      	mov	r9, r0
   b6344:	b178      	cbz	r0, b6366 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x202>
            Serial.print("\r\nHttpClient>\tReceiving TCP transaction of ");
   b6346:	f003 f92d 	bl	b95a4 <_Z16_fetch_usbserialv>
   b634a:	4965      	ldr	r1, [pc, #404]	; (b64e0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x37c>)
   b634c:	f002 f9ec 	bl	b8728 <_ZN5Print5printEPKc>
            Serial.print(bytes);
   b6350:	f003 f928 	bl	b95a4 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   b6354:	4649      	mov	r1, r9
   b6356:	220a      	movs	r2, #10
   b6358:	f7ff fe90 	bl	b607c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
            Serial.println(" bytes.");
   b635c:	f003 f922 	bl	b95a4 <_Z16_fetch_usbserialv>
   b6360:	4960      	ldr	r1, [pc, #384]	; (b64e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x380>)
   b6362:	f002 f9fa 	bl	b875a <_ZN5Print7printlnEPKc>
    unsigned int bufferPosition = 0;
   b6366:	f04f 0b00 	mov.w	fp, #0
        while (client.available()) {
   b636a:	4620      	mov	r0, r4
   b636c:	f002 ff56 	bl	b921c <_ZN9TCPClient9availableEv>
   b6370:	b320      	cbz	r0, b63bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x258>
            char c = client.read();
   b6372:	4620      	mov	r0, r4
   b6374:	f002 fd3c 	bl	b8df0 <_ZN9TCPClient4readEv>
   b6378:	b2c7      	uxtb	r7, r0
            Serial.print(c);
   b637a:	f003 f913 	bl	b95a4 <_Z16_fetch_usbserialv>
   b637e:	4639      	mov	r1, r7
   b6380:	f002 f9d6 	bl	b8730 <_ZN5Print5printEc>
   b6384:	f000 f9c0 	bl	b6708 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b6388:	f240 33fe 	movw	r3, #1022	; 0x3fe
   b638c:	429e      	cmp	r6, r3
   b638e:	9000      	str	r0, [sp, #0]
   b6390:	d803      	bhi.n	b639a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x236>
                buffer[bufferPosition] = c;
   b6392:	f80a 7006 	strb.w	r7, [sl, r6]
            bufferPosition++;
   b6396:	3601      	adds	r6, #1
        while (client.available()) {
   b6398:	e7e7      	b.n	b636a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x206>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b639a:	f240 33ff 	movw	r3, #1023	; 0x3ff
   b639e:	429e      	cmp	r6, r3
   b63a0:	d1f9      	bne.n	b6396 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x232>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b63a2:	2300      	movs	r3, #0
   b63a4:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   b63a8:	4620      	mov	r0, r4
   b63aa:	f002 ff91 	bl	b92d0 <_ZN9TCPClient4stopEv>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
   b63ae:	f003 f8f9 	bl	b95a4 <_Z16_fetch_usbserialv>
   b63b2:	494d      	ldr	r1, [pc, #308]	; (b64e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x384>)
   b63b4:	f002 f9d1 	bl	b875a <_ZN5Print7printlnEPKc>
                error = true;
   b63b8:	46ab      	mov	fp, r5
   b63ba:	e7ec      	b.n	b6396 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x232>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b63bc:	19a3      	adds	r3, r4, r6
   b63be:	7718      	strb	r0, [r3, #28]
        if (bytes) {
   b63c0:	f1b9 0f00 	cmp.w	r9, #0
   b63c4:	d004      	beq.n	b63d0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x26c>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
   b63c6:	f003 f8ed 	bl	b95a4 <_Z16_fetch_usbserialv>
   b63ca:	4948      	ldr	r1, [pc, #288]	; (b64ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x388>)
   b63cc:	f002 f9ac 	bl	b8728 <_ZN5Print5printEPKc>
   b63d0:	f000 f99a 	bl	b6708 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b63d4:	9b00      	ldr	r3, [sp, #0]
   b63d6:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b63da:	f1bb 0f00 	cmp.w	fp, #0
   b63de:	d106      	bne.n	b63ee <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x28a>
   b63e0:	f241 3388 	movw	r3, #5000	; 0x1388
   b63e4:	4599      	cmp	r9, r3
   b63e6:	d802      	bhi.n	b63ee <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x28a>
            delay(200);
   b63e8:	20c8      	movs	r0, #200	; 0xc8
   b63ea:	f000 fcd5 	bl	b6d98 <delay>
    } while (client.connected() && !timeout && !error);
   b63ee:	4620      	mov	r0, r4
   b63f0:	f002 fe36 	bl	b9060 <_ZN9TCPClient9connectedEv>
   b63f4:	f241 3388 	movw	r3, #5000	; 0x1388
   b63f8:	2800      	cmp	r0, #0
   b63fa:	d04c      	beq.n	b6496 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x332>
   b63fc:	4599      	cmp	r9, r3
   b63fe:	d84c      	bhi.n	b649a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x336>
   b6400:	f1bb 0f00 	cmp.w	fp, #0
   b6404:	d09a      	beq.n	b633c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d8>
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
   b6406:	f003 f8cd 	bl	b95a4 <_Z16_fetch_usbserialv>
   b640a:	4939      	ldr	r1, [pc, #228]	; (b64f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x38c>)
   b640c:	f002 f98c 	bl	b8728 <_ZN5Print5printEPKc>
    Serial.print(millis() - firstRead);
   b6410:	f003 f8c8 	bl	b95a4 <_Z16_fetch_usbserialv>
   b6414:	4605      	mov	r5, r0
   b6416:	f000 f977 	bl	b6708 <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   b641a:	9b01      	ldr	r3, [sp, #4]
   b641c:	220a      	movs	r2, #10
   b641e:	1ac1      	subs	r1, r0, r3
   b6420:	4628      	mov	r0, r5
   b6422:	f002 f9a4 	bl	b876e <_ZN5Print11printNumberEmh>
    Serial.println("ms).");
   b6426:	f003 f8bd 	bl	b95a4 <_Z16_fetch_usbserialv>
   b642a:	4932      	ldr	r1, [pc, #200]	; (b64f4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x390>)
   b642c:	f002 f995 	bl	b875a <_ZN5Print7printlnEPKc>
    client.stop();
   b6430:	4620      	mov	r0, r4
   b6432:	f002 ff4d 	bl	b92d0 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b6436:	4651      	mov	r1, sl
   b6438:	a802      	add	r0, sp, #8
   b643a:	f002 fad2 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b643e:	230c      	movs	r3, #12
   b6440:	2209      	movs	r2, #9
   b6442:	a902      	add	r1, sp, #8
   b6444:	a806      	add	r0, sp, #24
   b6446:	f002 fbbb 	bl	b8bc0 <_ZNK6String9substringEjj>
    Serial.print("HttpClient>\tStatus Code: ");
   b644a:	f003 f8ab 	bl	b95a4 <_Z16_fetch_usbserialv>
   b644e:	492a      	ldr	r1, [pc, #168]	; (b64f8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x394>)
   b6450:	f002 f96a 	bl	b8728 <_ZN5Print5printEPKc>
    Serial.println(statusCode);
   b6454:	f003 f8a6 	bl	b95a4 <_Z16_fetch_usbserialv>
   b6458:	9906      	ldr	r1, [sp, #24]
   b645a:	f002 f97e 	bl	b875a <_ZN5Print7printlnEPKc>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b645e:	4927      	ldr	r1, [pc, #156]	; (b64fc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x398>)
   b6460:	a80a      	add	r0, sp, #40	; 0x28
   b6462:	f002 fabe 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6466:	a90a      	add	r1, sp, #40	; 0x28
   b6468:	a802      	add	r0, sp, #8
   b646a:	f002 fba5 	bl	b8bb8 <_ZNK6String7indexOfERKS_>
   b646e:	4604      	mov	r4, r0
   b6470:	a80a      	add	r0, sp, #40	; 0x28
   b6472:	f002 fa6b 	bl	b894c <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b6476:	1c63      	adds	r3, r4, #1
   b6478:	d146      	bne.n	b6508 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a4>
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
   b647a:	f003 f893 	bl	b95a4 <_Z16_fetch_usbserialv>
   b647e:	4920      	ldr	r1, [pc, #128]	; (b6500 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x39c>)
   b6480:	f002 f96b 	bl	b875a <_ZN5Print7printlnEPKc>
    String statusCode = raw_response.substring(9,12);
   b6484:	a806      	add	r0, sp, #24
   b6486:	f002 fa61 	bl	b894c <_ZN6StringD1Ev>
    String raw_response(buffer);
   b648a:	a802      	add	r0, sp, #8
   b648c:	f002 fa5e 	bl	b894c <_ZN6StringD1Ev>
}
   b6490:	b011      	add	sp, #68	; 0x44
   b6492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (timeout) {
   b6496:	4599      	cmp	r9, r3
   b6498:	d9b5      	bls.n	b6406 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2a2>
        Serial.println("\r\nHttpClient>\tError: Timeout while reading response.");
   b649a:	f003 f883 	bl	b95a4 <_Z16_fetch_usbserialv>
   b649e:	4919      	ldr	r1, [pc, #100]	; (b6504 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a0>)
   b64a0:	f002 f95b 	bl	b875a <_ZN5Print7printlnEPKc>
   b64a4:	e7af      	b.n	b6406 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2a2>
   b64a6:	bf00      	nop
   b64a8:	000bb273 	.word	0x000bb273
   b64ac:	000bb5fc 	.word	0x000bb5fc
   b64b0:	000bb1f8 	.word	0x000bb1f8
   b64b4:	000bb0d8 	.word	0x000bb0d8
   b64b8:	000babe3 	.word	0x000babe3
   b64bc:	000bb233 	.word	0x000bb233
   b64c0:	000bb23f 	.word	0x000bb23f
   b64c4:	000bb268 	.word	0x000bb268
   b64c8:	000bb262 	.word	0x000bb262
   b64cc:	000bb292 	.word	0x000bb292
   b64d0:	000bb297 	.word	0x000bb297
   b64d4:	000bb214 	.word	0x000bb214
   b64d8:	000bb056 	.word	0x000bb056
   b64dc:	000bb2a6 	.word	0x000bb2a6
   b64e0:	000bb2c7 	.word	0x000bb2c7
   b64e4:	000bb2f3 	.word	0x000bb2f3
   b64e8:	000bb2fb 	.word	0x000bb2fb
   b64ec:	000bb330 	.word	0x000bb330
   b64f0:	000bb38b 	.word	0x000bb38b
   b64f4:	000bb3b0 	.word	0x000bb3b0
   b64f8:	000bb3b5 	.word	0x000bb3b5
   b64fc:	000bb3cf 	.word	0x000bb3cf
   b6500:	000bb3d4 	.word	0x000bb3d4
   b6504:	000bb356 	.word	0x000bb356
    aResponse.body = "";
   b6508:	f108 0504 	add.w	r5, r8, #4
   b650c:	490a      	ldr	r1, [pc, #40]	; (b6538 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3d4>)
   b650e:	4628      	mov	r0, r5
   b6510:	f002 fa95 	bl	b8a3e <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b6514:	1d22      	adds	r2, r4, #4
   b6516:	a902      	add	r1, sp, #8
   b6518:	a80a      	add	r0, sp, #40	; 0x28
   b651a:	f002 fb71 	bl	b8c00 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b651e:	a90a      	add	r1, sp, #40	; 0x28
   b6520:	4628      	mov	r0, r5
   b6522:	f002 fadb 	bl	b8adc <_ZN6String6concatERKS_>
   b6526:	a80a      	add	r0, sp, #40	; 0x28
   b6528:	f002 fa10 	bl	b894c <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b652c:	9806      	ldr	r0, [sp, #24]
   b652e:	f004 f881 	bl	ba634 <atoi>
   b6532:	f8c8 0000 	str.w	r0, [r8]
   b6536:	e7a5      	b.n	b6484 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x320>
   b6538:	000bac31 	.word	0x000bac31
   b653c:	00000000 	.word	0x00000000

000b6540 <_ZN8WatchDog10initializeEm>:
#include "WatchDog_WCL.h"

void WatchDog::initialize(uint32_t timeInMilliseconds) {
   b6540:	b538      	push	{r3, r4, r5, lr}
    *(uint32_t *) WDT_RREN_REG = 0x00000001;
   b6542:	4c0b      	ldr	r4, [pc, #44]	; (b6570 <_ZN8WatchDog10initializeEm+0x30>)
   b6544:	2501      	movs	r5, #1
   b6546:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    *(uint32_t *) WDT_CRV_REG = (uint32_t) (timeInMilliseconds * 32.768);
   b654a:	4608      	mov	r0, r1
   b654c:	f003 fd38 	bl	b9fc0 <__aeabi_ui2d>
   b6550:	a305      	add	r3, pc, #20	; (adr r3, b6568 <_ZN8WatchDog10initializeEm+0x28>)
   b6552:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6556:	f003 fdad 	bl	ba0b4 <__aeabi_dmul>
   b655a:	f004 f845 	bl	ba5e8 <__aeabi_d2uiz>
    *(uint32_t *) WDT_REG = 0x00000001;
   b655e:	6025      	str	r5, [r4, #0]
    *(uint32_t *) WDT_CRV_REG = (uint32_t) (timeInMilliseconds * 32.768);
   b6560:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
   b6564:	bd38      	pop	{r3, r4, r5, pc}
   b6566:	bf00      	nop
   b6568:	d2f1a9fc 	.word	0xd2f1a9fc
   b656c:	4040624d 	.word	0x4040624d
   b6570:	40010000 	.word	0x40010000

000b6574 <_ZN8WatchDog3petEv>:

void WatchDog::pet() {
    *(uint32_t *) WDT_RR0_REG = WDT_RELOAD;
   b6574:	4b02      	ldr	r3, [pc, #8]	; (b6580 <_ZN8WatchDog3petEv+0xc>)
   b6576:	4a03      	ldr	r2, [pc, #12]	; (b6584 <_ZN8WatchDog3petEv+0x10>)
   b6578:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   b657c:	4770      	bx	lr
   b657e:	bf00      	nop
   b6580:	40010000 	.word	0x40010000
   b6584:	6e524635 	.word	0x6e524635

000b6588 <_ZN8WatchDog16runWhileSleepingEb>:
    return (*(uint32_t *) WDT_RUNSTATUS_REG == 1);
}

void WatchDog::runWhileSleeping(bool yes) {
    if (yes) {
        *(uint32_t *) WDT_CONFIG_REG |= 0x01;
   b6588:	4a05      	ldr	r2, [pc, #20]	; (b65a0 <_ZN8WatchDog16runWhileSleepingEb+0x18>)
   b658a:	f8d2 350c 	ldr.w	r3, [r2, #1292]	; 0x50c
    if (yes) {
   b658e:	b121      	cbz	r1, b659a <_ZN8WatchDog16runWhileSleepingEb+0x12>
        *(uint32_t *) WDT_CONFIG_REG |= 0x01;
   b6590:	f043 0301 	orr.w	r3, r3, #1
   b6594:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    } else {
        *(uint32_t *) WDT_CONFIG_REG &= ~(0x01);
    }
}
   b6598:	4770      	bx	lr
        *(uint32_t *) WDT_CONFIG_REG &= ~(0x01);
   b659a:	f023 0301 	bic.w	r3, r3, #1
   b659e:	e7f9      	b.n	b6594 <_ZN8WatchDog16runWhileSleepingEb+0xc>
   b65a0:	40010000 	.word	0x40010000

000b65a4 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b65a4:	b508      	push	{r3, lr}
   b65a6:	4b02      	ldr	r3, [pc, #8]	; (b65b0 <hal_ble_stack_init+0xc>)
   b65a8:	681b      	ldr	r3, [r3, #0]
   b65aa:	689b      	ldr	r3, [r3, #8]
   b65ac:	9301      	str	r3, [sp, #4]
   b65ae:	bd08      	pop	{r3, pc}
   b65b0:	00030278 	.word	0x00030278

000b65b4 <hal_ble_stack_deinit>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
   b65b4:	b508      	push	{r3, lr}
   b65b6:	4b02      	ldr	r3, [pc, #8]	; (b65c0 <hal_ble_stack_deinit+0xc>)
   b65b8:	681b      	ldr	r3, [r3, #0]
   b65ba:	68db      	ldr	r3, [r3, #12]
   b65bc:	9301      	str	r3, [sp, #4]
   b65be:	bd08      	pop	{r3, pc}
   b65c0:	00030278 	.word	0x00030278

000b65c4 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b65c4:	b508      	push	{r3, lr}
   b65c6:	4b02      	ldr	r3, [pc, #8]	; (b65d0 <hal_ble_gap_set_advertising_data+0xc>)
   b65c8:	681b      	ldr	r3, [r3, #0]
   b65ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b65cc:	9301      	str	r3, [sp, #4]
   b65ce:	bd08      	pop	{r3, pc}
   b65d0:	00030278 	.word	0x00030278

000b65d4 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b65d4:	b508      	push	{r3, lr}
   b65d6:	4b02      	ldr	r3, [pc, #8]	; (b65e0 <hal_ble_gap_set_scan_response_data+0xc>)
   b65d8:	681b      	ldr	r3, [r3, #0]
   b65da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b65dc:	9301      	str	r3, [sp, #4]
   b65de:	bd08      	pop	{r3, pc}
   b65e0:	00030278 	.word	0x00030278

000b65e4 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b65e4:	b508      	push	{r3, lr}
   b65e6:	4b02      	ldr	r3, [pc, #8]	; (b65f0 <hal_ble_gap_start_advertising+0xc>)
   b65e8:	681b      	ldr	r3, [r3, #0]
   b65ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b65ec:	9301      	str	r3, [sp, #4]
   b65ee:	bd08      	pop	{r3, pc}
   b65f0:	00030278 	.word	0x00030278

000b65f4 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b65f4:	b508      	push	{r3, lr}
   b65f6:	4b03      	ldr	r3, [pc, #12]	; (b6604 <hal_ble_gap_disconnect+0x10>)
   b65f8:	681b      	ldr	r3, [r3, #0]
   b65fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b65fe:	9301      	str	r3, [sp, #4]
   b6600:	bd08      	pop	{r3, pc}
   b6602:	0000      	.short	0x0000
   b6604:	00030278 	.word	0x00030278

000b6608 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b6608:	b508      	push	{r3, lr}
   b660a:	4b03      	ldr	r3, [pc, #12]	; (b6618 <hal_ble_gatt_server_add_service+0x10>)
   b660c:	681b      	ldr	r3, [r3, #0]
   b660e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b6612:	9301      	str	r3, [sp, #4]
   b6614:	bd08      	pop	{r3, pc}
   b6616:	0000      	.short	0x0000
   b6618:	00030278 	.word	0x00030278

000b661c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b661c:	b508      	push	{r3, lr}
   b661e:	4b03      	ldr	r3, [pc, #12]	; (b662c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b6620:	681b      	ldr	r3, [r3, #0]
   b6622:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b6626:	9301      	str	r3, [sp, #4]
   b6628:	bd08      	pop	{r3, pc}
   b662a:	0000      	.short	0x0000
   b662c:	00030278 	.word	0x00030278

000b6630 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6630:	b508      	push	{r3, lr}
   b6632:	4b03      	ldr	r3, [pc, #12]	; (b6640 <hal_ble_gatt_client_write_with_response+0x10>)
   b6634:	681b      	ldr	r3, [r3, #0]
   b6636:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b663a:	9301      	str	r3, [sp, #4]
   b663c:	bd08      	pop	{r3, pc}
   b663e:	0000      	.short	0x0000
   b6640:	00030278 	.word	0x00030278

000b6644 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6644:	b508      	push	{r3, lr}
   b6646:	4b03      	ldr	r3, [pc, #12]	; (b6654 <hal_ble_gatt_client_write_without_response+0x10>)
   b6648:	681b      	ldr	r3, [r3, #0]
   b664a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b664e:	9301      	str	r3, [sp, #4]
   b6650:	bd08      	pop	{r3, pc}
   b6652:	0000      	.short	0x0000
   b6654:	00030278 	.word	0x00030278

000b6658 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b6658:	b508      	push	{r3, lr}
   b665a:	4b03      	ldr	r3, [pc, #12]	; (b6668 <hal_ble_gatt_server_add_characteristic+0x10>)
   b665c:	681b      	ldr	r3, [r3, #0]
   b665e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b6662:	9301      	str	r3, [sp, #4]
   b6664:	bd08      	pop	{r3, pc}
   b6666:	0000      	.short	0x0000
   b6668:	00030278 	.word	0x00030278

000b666c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b666c:	b508      	push	{r3, lr}
   b666e:	4b03      	ldr	r3, [pc, #12]	; (b667c <hal_ble_set_callback_on_periph_link_events+0x10>)
   b6670:	681b      	ldr	r3, [r3, #0]
   b6672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b6676:	9301      	str	r3, [sp, #4]
   b6678:	bd08      	pop	{r3, pc}
   b667a:	0000      	.short	0x0000
   b667c:	00030278 	.word	0x00030278

000b6680 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6680:	b508      	push	{r3, lr}
   b6682:	4b03      	ldr	r3, [pc, #12]	; (b6690 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b6684:	681b      	ldr	r3, [r3, #0]
   b6686:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b668a:	9301      	str	r3, [sp, #4]
   b668c:	bd08      	pop	{r3, pc}
   b668e:	0000      	.short	0x0000
   b6690:	00030278 	.word	0x00030278

000b6694 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6694:	b508      	push	{r3, lr}
   b6696:	4b03      	ldr	r3, [pc, #12]	; (b66a4 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b6698:	681b      	ldr	r3, [r3, #0]
   b669a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b669e:	9301      	str	r3, [sp, #4]
   b66a0:	bd08      	pop	{r3, pc}
   b66a2:	0000      	.short	0x0000
   b66a4:	00030278 	.word	0x00030278

000b66a8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b66a8:	b508      	push	{r3, lr}
   b66aa:	4b02      	ldr	r3, [pc, #8]	; (b66b4 <os_mutex_recursive_create+0xc>)
   b66ac:	681b      	ldr	r3, [r3, #0]
   b66ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b66b0:	9301      	str	r3, [sp, #4]
   b66b2:	bd08      	pop	{r3, pc}
   b66b4:	00030248 	.word	0x00030248

000b66b8 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b66b8:	b508      	push	{r3, lr}
   b66ba:	4b02      	ldr	r3, [pc, #8]	; (b66c4 <os_mutex_recursive_lock+0xc>)
   b66bc:	681b      	ldr	r3, [r3, #0]
   b66be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b66c0:	9301      	str	r3, [sp, #4]
   b66c2:	bd08      	pop	{r3, pc}
   b66c4:	00030248 	.word	0x00030248

000b66c8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b66c8:	b508      	push	{r3, lr}
   b66ca:	4b02      	ldr	r3, [pc, #8]	; (b66d4 <os_mutex_recursive_unlock+0xc>)
   b66cc:	681b      	ldr	r3, [r3, #0]
   b66ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b66d0:	9301      	str	r3, [sp, #4]
   b66d2:	bd08      	pop	{r3, pc}
   b66d4:	00030248 	.word	0x00030248

000b66d8 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   b66d8:	b508      	push	{r3, lr}
   b66da:	4b02      	ldr	r3, [pc, #8]	; (b66e4 <HAL_Core_Get_Last_Reset_Info+0xc>)
   b66dc:	681b      	ldr	r3, [r3, #0]
   b66de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b66e0:	9301      	str	r3, [sp, #4]
   b66e2:	bd08      	pop	{r3, pc}
   b66e4:	00030234 	.word	0x00030234

000b66e8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b66e8:	b508      	push	{r3, lr}
   b66ea:	4b02      	ldr	r3, [pc, #8]	; (b66f4 <HAL_RNG_GetRandomNumber+0xc>)
   b66ec:	681b      	ldr	r3, [r3, #0]
   b66ee:	685b      	ldr	r3, [r3, #4]
   b66f0:	9301      	str	r3, [sp, #4]
   b66f2:	bd08      	pop	{r3, pc}
   b66f4:	00030218 	.word	0x00030218

000b66f8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b66f8:	b508      	push	{r3, lr}
   b66fa:	4b02      	ldr	r3, [pc, #8]	; (b6704 <HAL_Delay_Microseconds+0xc>)
   b66fc:	681b      	ldr	r3, [r3, #0]
   b66fe:	68db      	ldr	r3, [r3, #12]
   b6700:	9301      	str	r3, [sp, #4]
   b6702:	bd08      	pop	{r3, pc}
   b6704:	00030218 	.word	0x00030218

000b6708 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6708:	b508      	push	{r3, lr}
   b670a:	4b02      	ldr	r3, [pc, #8]	; (b6714 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b670c:	681b      	ldr	r3, [r3, #0]
   b670e:	695b      	ldr	r3, [r3, #20]
   b6710:	9301      	str	r3, [sp, #4]
   b6712:	bd08      	pop	{r3, pc}
   b6714:	00030218 	.word	0x00030218

000b6718 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b6718:	b508      	push	{r3, lr}
   b671a:	4b02      	ldr	r3, [pc, #8]	; (b6724 <HAL_EEPROM_Init+0xc>)
   b671c:	681b      	ldr	r3, [r3, #0]
   b671e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6720:	9301      	str	r3, [sp, #4]
   b6722:	bd08      	pop	{r3, pc}
   b6724:	00030218 	.word	0x00030218

000b6728 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   b6728:	b508      	push	{r3, lr}
   b672a:	4b02      	ldr	r3, [pc, #8]	; (b6734 <HAL_EEPROM_Get+0xc>)
   b672c:	681b      	ldr	r3, [r3, #0]
   b672e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6730:	9301      	str	r3, [sp, #4]
   b6732:	bd08      	pop	{r3, pc}
   b6734:	00030218 	.word	0x00030218

000b6738 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   b6738:	b508      	push	{r3, lr}
   b673a:	4b02      	ldr	r3, [pc, #8]	; (b6744 <HAL_EEPROM_Put+0xc>)
   b673c:	681b      	ldr	r3, [r3, #0]
   b673e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6740:	9301      	str	r3, [sp, #4]
   b6742:	bd08      	pop	{r3, pc}
   b6744:	00030218 	.word	0x00030218

000b6748 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b6748:	b508      	push	{r3, lr}
   b674a:	4b02      	ldr	r3, [pc, #8]	; (b6754 <hal_rtc_time_is_valid+0xc>)
   b674c:	681b      	ldr	r3, [r3, #0]
   b674e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6750:	9301      	str	r3, [sp, #4]
   b6752:	bd08      	pop	{r3, pc}
   b6754:	00030218 	.word	0x00030218

000b6758 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b6758:	b508      	push	{r3, lr}
   b675a:	4b02      	ldr	r3, [pc, #8]	; (b6764 <hal_rtc_get_time+0xc>)
   b675c:	681b      	ldr	r3, [r3, #0]
   b675e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6760:	9301      	str	r3, [sp, #4]
   b6762:	bd08      	pop	{r3, pc}
   b6764:	00030218 	.word	0x00030218

000b6768 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b6768:	b508      	push	{r3, lr}
   b676a:	4b02      	ldr	r3, [pc, #8]	; (b6774 <hal_rtc_set_time+0xc>)
   b676c:	681b      	ldr	r3, [r3, #0]
   b676e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b6770:	9301      	str	r3, [sp, #4]
   b6772:	bd08      	pop	{r3, pc}
   b6774:	00030218 	.word	0x00030218

000b6778 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6778:	b508      	push	{r3, lr}
   b677a:	4b02      	ldr	r3, [pc, #8]	; (b6784 <HAL_Pin_Mode+0xc>)
   b677c:	681b      	ldr	r3, [r3, #0]
   b677e:	689b      	ldr	r3, [r3, #8]
   b6780:	9301      	str	r3, [sp, #4]
   b6782:	bd08      	pop	{r3, pc}
   b6784:	0003022c 	.word	0x0003022c

000b6788 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6788:	b508      	push	{r3, lr}
   b678a:	4b02      	ldr	r3, [pc, #8]	; (b6794 <HAL_Get_Pin_Mode+0xc>)
   b678c:	681b      	ldr	r3, [r3, #0]
   b678e:	68db      	ldr	r3, [r3, #12]
   b6790:	9301      	str	r3, [sp, #4]
   b6792:	bd08      	pop	{r3, pc}
   b6794:	0003022c 	.word	0x0003022c

000b6798 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6798:	b508      	push	{r3, lr}
   b679a:	4b02      	ldr	r3, [pc, #8]	; (b67a4 <HAL_GPIO_Write+0xc>)
   b679c:	681b      	ldr	r3, [r3, #0]
   b679e:	691b      	ldr	r3, [r3, #16]
   b67a0:	9301      	str	r3, [sp, #4]
   b67a2:	bd08      	pop	{r3, pc}
   b67a4:	0003022c 	.word	0x0003022c

000b67a8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b67a8:	b508      	push	{r3, lr}
   b67aa:	4b02      	ldr	r3, [pc, #8]	; (b67b4 <HAL_GPIO_Read+0xc>)
   b67ac:	681b      	ldr	r3, [r3, #0]
   b67ae:	695b      	ldr	r3, [r3, #20]
   b67b0:	9301      	str	r3, [sp, #4]
   b67b2:	bd08      	pop	{r3, pc}
   b67b4:	0003022c 	.word	0x0003022c

000b67b8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b67b8:	b508      	push	{r3, lr}
   b67ba:	4b02      	ldr	r3, [pc, #8]	; (b67c4 <hal_i2c_begin+0xc>)
   b67bc:	681b      	ldr	r3, [r3, #0]
   b67be:	68db      	ldr	r3, [r3, #12]
   b67c0:	9301      	str	r3, [sp, #4]
   b67c2:	bd08      	pop	{r3, pc}
   b67c4:	00030228 	.word	0x00030228

000b67c8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b67c8:	b508      	push	{r3, lr}
   b67ca:	4b02      	ldr	r3, [pc, #8]	; (b67d4 <hal_i2c_begin_transmission+0xc>)
   b67cc:	681b      	ldr	r3, [r3, #0]
   b67ce:	699b      	ldr	r3, [r3, #24]
   b67d0:	9301      	str	r3, [sp, #4]
   b67d2:	bd08      	pop	{r3, pc}
   b67d4:	00030228 	.word	0x00030228

000b67d8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b67d8:	b508      	push	{r3, lr}
   b67da:	4b02      	ldr	r3, [pc, #8]	; (b67e4 <hal_i2c_end_transmission+0xc>)
   b67dc:	681b      	ldr	r3, [r3, #0]
   b67de:	69db      	ldr	r3, [r3, #28]
   b67e0:	9301      	str	r3, [sp, #4]
   b67e2:	bd08      	pop	{r3, pc}
   b67e4:	00030228 	.word	0x00030228

000b67e8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b67e8:	b508      	push	{r3, lr}
   b67ea:	4b02      	ldr	r3, [pc, #8]	; (b67f4 <hal_i2c_write+0xc>)
   b67ec:	681b      	ldr	r3, [r3, #0]
   b67ee:	6a1b      	ldr	r3, [r3, #32]
   b67f0:	9301      	str	r3, [sp, #4]
   b67f2:	bd08      	pop	{r3, pc}
   b67f4:	00030228 	.word	0x00030228

000b67f8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b67f8:	b508      	push	{r3, lr}
   b67fa:	4b02      	ldr	r3, [pc, #8]	; (b6804 <hal_i2c_available+0xc>)
   b67fc:	681b      	ldr	r3, [r3, #0]
   b67fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6800:	9301      	str	r3, [sp, #4]
   b6802:	bd08      	pop	{r3, pc}
   b6804:	00030228 	.word	0x00030228

000b6808 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6808:	b508      	push	{r3, lr}
   b680a:	4b02      	ldr	r3, [pc, #8]	; (b6814 <hal_i2c_read+0xc>)
   b680c:	681b      	ldr	r3, [r3, #0]
   b680e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6810:	9301      	str	r3, [sp, #4]
   b6812:	bd08      	pop	{r3, pc}
   b6814:	00030228 	.word	0x00030228

000b6818 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6818:	b508      	push	{r3, lr}
   b681a:	4b02      	ldr	r3, [pc, #8]	; (b6824 <hal_i2c_peek+0xc>)
   b681c:	681b      	ldr	r3, [r3, #0]
   b681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6820:	9301      	str	r3, [sp, #4]
   b6822:	bd08      	pop	{r3, pc}
   b6824:	00030228 	.word	0x00030228

000b6828 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6828:	b508      	push	{r3, lr}
   b682a:	4b02      	ldr	r3, [pc, #8]	; (b6834 <hal_i2c_flush+0xc>)
   b682c:	681b      	ldr	r3, [r3, #0]
   b682e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6830:	9301      	str	r3, [sp, #4]
   b6832:	bd08      	pop	{r3, pc}
   b6834:	00030228 	.word	0x00030228

000b6838 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6838:	b508      	push	{r3, lr}
   b683a:	4b02      	ldr	r3, [pc, #8]	; (b6844 <hal_i2c_is_enabled+0xc>)
   b683c:	681b      	ldr	r3, [r3, #0]
   b683e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6840:	9301      	str	r3, [sp, #4]
   b6842:	bd08      	pop	{r3, pc}
   b6844:	00030228 	.word	0x00030228

000b6848 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6848:	b508      	push	{r3, lr}
   b684a:	4b02      	ldr	r3, [pc, #8]	; (b6854 <hal_i2c_init+0xc>)
   b684c:	681b      	ldr	r3, [r3, #0]
   b684e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6850:	9301      	str	r3, [sp, #4]
   b6852:	bd08      	pop	{r3, pc}
   b6854:	00030228 	.word	0x00030228

000b6858 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b6858:	b508      	push	{r3, lr}
   b685a:	4b02      	ldr	r3, [pc, #8]	; (b6864 <hal_i2c_request_ex+0xc>)
   b685c:	681b      	ldr	r3, [r3, #0]
   b685e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6860:	9301      	str	r3, [sp, #4]
   b6862:	bd08      	pop	{r3, pc}
   b6864:	00030228 	.word	0x00030228

000b6868 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6868:	b508      	push	{r3, lr}
   b686a:	4b02      	ldr	r3, [pc, #8]	; (b6874 <if_index_to_name+0xc>)
   b686c:	681b      	ldr	r3, [r3, #0]
   b686e:	695b      	ldr	r3, [r3, #20]
   b6870:	9301      	str	r3, [sp, #4]
   b6872:	bd08      	pop	{r3, pc}
   b6874:	0003026c 	.word	0x0003026c

000b6878 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6878:	b508      	push	{r3, lr}
   b687a:	4b02      	ldr	r3, [pc, #8]	; (b6884 <inet_inet_ntop+0xc>)
   b687c:	681b      	ldr	r3, [r3, #0]
   b687e:	695b      	ldr	r3, [r3, #20]
   b6880:	9301      	str	r3, [sp, #4]
   b6882:	bd08      	pop	{r3, pc}
   b6884:	00030264 	.word	0x00030264

000b6888 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6888:	b508      	push	{r3, lr}
   b688a:	4b02      	ldr	r3, [pc, #8]	; (b6894 <inet_htonl+0xc>)
   b688c:	681b      	ldr	r3, [r3, #0]
   b688e:	6a1b      	ldr	r3, [r3, #32]
   b6890:	9301      	str	r3, [sp, #4]
   b6892:	bd08      	pop	{r3, pc}
   b6894:	00030264 	.word	0x00030264

000b6898 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6898:	b508      	push	{r3, lr}
   b689a:	4b02      	ldr	r3, [pc, #8]	; (b68a4 <inet_htons+0xc>)
   b689c:	681b      	ldr	r3, [r3, #0]
   b689e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b68a0:	9301      	str	r3, [sp, #4]
   b68a2:	bd08      	pop	{r3, pc}
   b68a4:	00030264 	.word	0x00030264

000b68a8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b68a8:	b508      	push	{r3, lr}
   b68aa:	4b02      	ldr	r3, [pc, #8]	; (b68b4 <netdb_freeaddrinfo+0xc>)
   b68ac:	681b      	ldr	r3, [r3, #0]
   b68ae:	689b      	ldr	r3, [r3, #8]
   b68b0:	9301      	str	r3, [sp, #4]
   b68b2:	bd08      	pop	{r3, pc}
   b68b4:	00030268 	.word	0x00030268

000b68b8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b68b8:	b508      	push	{r3, lr}
   b68ba:	4b02      	ldr	r3, [pc, #8]	; (b68c4 <netdb_getaddrinfo+0xc>)
   b68bc:	681b      	ldr	r3, [r3, #0]
   b68be:	68db      	ldr	r3, [r3, #12]
   b68c0:	9301      	str	r3, [sp, #4]
   b68c2:	bd08      	pop	{r3, pc}
   b68c4:	00030268 	.word	0x00030268

000b68c8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b68c8:	b508      	push	{r3, lr}
   b68ca:	4b02      	ldr	r3, [pc, #8]	; (b68d4 <sock_setsockopt+0xc>)
   b68cc:	681b      	ldr	r3, [r3, #0]
   b68ce:	699b      	ldr	r3, [r3, #24]
   b68d0:	9301      	str	r3, [sp, #4]
   b68d2:	bd08      	pop	{r3, pc}
   b68d4:	00030238 	.word	0x00030238

000b68d8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b68d8:	b508      	push	{r3, lr}
   b68da:	4b02      	ldr	r3, [pc, #8]	; (b68e4 <sock_close+0xc>)
   b68dc:	681b      	ldr	r3, [r3, #0]
   b68de:	69db      	ldr	r3, [r3, #28]
   b68e0:	9301      	str	r3, [sp, #4]
   b68e2:	bd08      	pop	{r3, pc}
   b68e4:	00030238 	.word	0x00030238

000b68e8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b68e8:	b508      	push	{r3, lr}
   b68ea:	4b02      	ldr	r3, [pc, #8]	; (b68f4 <sock_connect+0xc>)
   b68ec:	681b      	ldr	r3, [r3, #0]
   b68ee:	6a1b      	ldr	r3, [r3, #32]
   b68f0:	9301      	str	r3, [sp, #4]
   b68f2:	bd08      	pop	{r3, pc}
   b68f4:	00030238 	.word	0x00030238

000b68f8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b68f8:	b508      	push	{r3, lr}
   b68fa:	4b02      	ldr	r3, [pc, #8]	; (b6904 <sock_recv+0xc>)
   b68fc:	681b      	ldr	r3, [r3, #0]
   b68fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6900:	9301      	str	r3, [sp, #4]
   b6902:	bd08      	pop	{r3, pc}
   b6904:	00030238 	.word	0x00030238

000b6908 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6908:	b508      	push	{r3, lr}
   b690a:	4b02      	ldr	r3, [pc, #8]	; (b6914 <sock_send+0xc>)
   b690c:	681b      	ldr	r3, [r3, #0]
   b690e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6910:	9301      	str	r3, [sp, #4]
   b6912:	bd08      	pop	{r3, pc}
   b6914:	00030238 	.word	0x00030238

000b6918 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6918:	b508      	push	{r3, lr}
   b691a:	4b02      	ldr	r3, [pc, #8]	; (b6924 <sock_socket+0xc>)
   b691c:	681b      	ldr	r3, [r3, #0]
   b691e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6920:	9301      	str	r3, [sp, #4]
   b6922:	bd08      	pop	{r3, pc}
   b6924:	00030238 	.word	0x00030238

000b6928 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6928:	b508      	push	{r3, lr}
   b692a:	4b02      	ldr	r3, [pc, #8]	; (b6934 <hal_spi_begin+0xc>)
   b692c:	681b      	ldr	r3, [r3, #0]
   b692e:	681b      	ldr	r3, [r3, #0]
   b6930:	9301      	str	r3, [sp, #4]
   b6932:	bd08      	pop	{r3, pc}
   b6934:	00030230 	.word	0x00030230

000b6938 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b6938:	b508      	push	{r3, lr}
   b693a:	4b02      	ldr	r3, [pc, #8]	; (b6944 <hal_spi_set_bit_order+0xc>)
   b693c:	681b      	ldr	r3, [r3, #0]
   b693e:	689b      	ldr	r3, [r3, #8]
   b6940:	9301      	str	r3, [sp, #4]
   b6942:	bd08      	pop	{r3, pc}
   b6944:	00030230 	.word	0x00030230

000b6948 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b6948:	b508      	push	{r3, lr}
   b694a:	4b02      	ldr	r3, [pc, #8]	; (b6954 <hal_spi_set_data_mode+0xc>)
   b694c:	681b      	ldr	r3, [r3, #0]
   b694e:	68db      	ldr	r3, [r3, #12]
   b6950:	9301      	str	r3, [sp, #4]
   b6952:	bd08      	pop	{r3, pc}
   b6954:	00030230 	.word	0x00030230

000b6958 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b6958:	b508      	push	{r3, lr}
   b695a:	4b02      	ldr	r3, [pc, #8]	; (b6964 <hal_spi_set_clock_divider+0xc>)
   b695c:	681b      	ldr	r3, [r3, #0]
   b695e:	691b      	ldr	r3, [r3, #16]
   b6960:	9301      	str	r3, [sp, #4]
   b6962:	bd08      	pop	{r3, pc}
   b6964:	00030230 	.word	0x00030230

000b6968 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6968:	b508      	push	{r3, lr}
   b696a:	4b02      	ldr	r3, [pc, #8]	; (b6974 <hal_spi_transfer+0xc>)
   b696c:	681b      	ldr	r3, [r3, #0]
   b696e:	695b      	ldr	r3, [r3, #20]
   b6970:	9301      	str	r3, [sp, #4]
   b6972:	bd08      	pop	{r3, pc}
   b6974:	00030230 	.word	0x00030230

000b6978 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6978:	b508      	push	{r3, lr}
   b697a:	4b02      	ldr	r3, [pc, #8]	; (b6984 <hal_spi_init+0xc>)
   b697c:	681b      	ldr	r3, [r3, #0]
   b697e:	69db      	ldr	r3, [r3, #28]
   b6980:	9301      	str	r3, [sp, #4]
   b6982:	bd08      	pop	{r3, pc}
   b6984:	00030230 	.word	0x00030230

000b6988 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6988:	b508      	push	{r3, lr}
   b698a:	4b02      	ldr	r3, [pc, #8]	; (b6994 <hal_spi_is_enabled+0xc>)
   b698c:	681b      	ldr	r3, [r3, #0]
   b698e:	6a1b      	ldr	r3, [r3, #32]
   b6990:	9301      	str	r3, [sp, #4]
   b6992:	bd08      	pop	{r3, pc}
   b6994:	00030230 	.word	0x00030230

000b6998 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6998:	b508      	push	{r3, lr}
   b699a:	4b02      	ldr	r3, [pc, #8]	; (b69a4 <hal_spi_info+0xc>)
   b699c:	681b      	ldr	r3, [r3, #0]
   b699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b69a0:	9301      	str	r3, [sp, #4]
   b69a2:	bd08      	pop	{r3, pc}
   b69a4:	00030230 	.word	0x00030230

000b69a8 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b69a8:	b508      	push	{r3, lr}
   b69aa:	4b02      	ldr	r3, [pc, #8]	; (b69b4 <hal_spi_acquire+0xc>)
   b69ac:	681b      	ldr	r3, [r3, #0]
   b69ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b69b0:	9301      	str	r3, [sp, #4]
   b69b2:	bd08      	pop	{r3, pc}
   b69b4:	00030230 	.word	0x00030230

000b69b8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b69b8:	b508      	push	{r3, lr}
   b69ba:	4b02      	ldr	r3, [pc, #8]	; (b69c4 <hal_spi_release+0xc>)
   b69bc:	681b      	ldr	r3, [r3, #0]
   b69be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b69c0:	9301      	str	r3, [sp, #4]
   b69c2:	bd08      	pop	{r3, pc}
   b69c4:	00030230 	.word	0x00030230

000b69c8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b69c8:	b508      	push	{r3, lr}
   b69ca:	4b02      	ldr	r3, [pc, #8]	; (b69d4 <hal_usart_write+0xc>)
   b69cc:	681b      	ldr	r3, [r3, #0]
   b69ce:	68db      	ldr	r3, [r3, #12]
   b69d0:	9301      	str	r3, [sp, #4]
   b69d2:	bd08      	pop	{r3, pc}
   b69d4:	0003023c 	.word	0x0003023c

000b69d8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b69d8:	b508      	push	{r3, lr}
   b69da:	4b02      	ldr	r3, [pc, #8]	; (b69e4 <hal_usart_available+0xc>)
   b69dc:	681b      	ldr	r3, [r3, #0]
   b69de:	691b      	ldr	r3, [r3, #16]
   b69e0:	9301      	str	r3, [sp, #4]
   b69e2:	bd08      	pop	{r3, pc}
   b69e4:	0003023c 	.word	0x0003023c

000b69e8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b69e8:	b508      	push	{r3, lr}
   b69ea:	4b02      	ldr	r3, [pc, #8]	; (b69f4 <hal_usart_read+0xc>)
   b69ec:	681b      	ldr	r3, [r3, #0]
   b69ee:	695b      	ldr	r3, [r3, #20]
   b69f0:	9301      	str	r3, [sp, #4]
   b69f2:	bd08      	pop	{r3, pc}
   b69f4:	0003023c 	.word	0x0003023c

000b69f8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b69f8:	b508      	push	{r3, lr}
   b69fa:	4b02      	ldr	r3, [pc, #8]	; (b6a04 <hal_usart_peek+0xc>)
   b69fc:	681b      	ldr	r3, [r3, #0]
   b69fe:	699b      	ldr	r3, [r3, #24]
   b6a00:	9301      	str	r3, [sp, #4]
   b6a02:	bd08      	pop	{r3, pc}
   b6a04:	0003023c 	.word	0x0003023c

000b6a08 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6a08:	b508      	push	{r3, lr}
   b6a0a:	4b02      	ldr	r3, [pc, #8]	; (b6a14 <hal_usart_flush+0xc>)
   b6a0c:	681b      	ldr	r3, [r3, #0]
   b6a0e:	69db      	ldr	r3, [r3, #28]
   b6a10:	9301      	str	r3, [sp, #4]
   b6a12:	bd08      	pop	{r3, pc}
   b6a14:	0003023c 	.word	0x0003023c

000b6a18 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6a18:	b508      	push	{r3, lr}
   b6a1a:	4b02      	ldr	r3, [pc, #8]	; (b6a24 <hal_usart_is_enabled+0xc>)
   b6a1c:	681b      	ldr	r3, [r3, #0]
   b6a1e:	6a1b      	ldr	r3, [r3, #32]
   b6a20:	9301      	str	r3, [sp, #4]
   b6a22:	bd08      	pop	{r3, pc}
   b6a24:	0003023c 	.word	0x0003023c

000b6a28 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6a28:	b508      	push	{r3, lr}
   b6a2a:	4b02      	ldr	r3, [pc, #8]	; (b6a34 <hal_usart_available_data_for_write+0xc>)
   b6a2c:	681b      	ldr	r3, [r3, #0]
   b6a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6a30:	9301      	str	r3, [sp, #4]
   b6a32:	bd08      	pop	{r3, pc}
   b6a34:	0003023c 	.word	0x0003023c

000b6a38 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6a38:	b508      	push	{r3, lr}
   b6a3a:	4b02      	ldr	r3, [pc, #8]	; (b6a44 <hal_usart_init_ex+0xc>)
   b6a3c:	681b      	ldr	r3, [r3, #0]
   b6a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6a40:	9301      	str	r3, [sp, #4]
   b6a42:	bd08      	pop	{r3, pc}
   b6a44:	0003023c 	.word	0x0003023c

000b6a48 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6a48:	b508      	push	{r3, lr}
   b6a4a:	4b02      	ldr	r3, [pc, #8]	; (b6a54 <HAL_USB_USART_Init+0xc>)
   b6a4c:	681b      	ldr	r3, [r3, #0]
   b6a4e:	681b      	ldr	r3, [r3, #0]
   b6a50:	9301      	str	r3, [sp, #4]
   b6a52:	bd08      	pop	{r3, pc}
   b6a54:	0003024c 	.word	0x0003024c

000b6a58 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6a58:	b508      	push	{r3, lr}
   b6a5a:	4b02      	ldr	r3, [pc, #8]	; (b6a64 <HAL_USB_USART_Begin+0xc>)
   b6a5c:	681b      	ldr	r3, [r3, #0]
   b6a5e:	685b      	ldr	r3, [r3, #4]
   b6a60:	9301      	str	r3, [sp, #4]
   b6a62:	bd08      	pop	{r3, pc}
   b6a64:	0003024c 	.word	0x0003024c

000b6a68 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6a68:	b508      	push	{r3, lr}
   b6a6a:	4b02      	ldr	r3, [pc, #8]	; (b6a74 <HAL_USB_USART_Available_Data+0xc>)
   b6a6c:	681b      	ldr	r3, [r3, #0]
   b6a6e:	691b      	ldr	r3, [r3, #16]
   b6a70:	9301      	str	r3, [sp, #4]
   b6a72:	bd08      	pop	{r3, pc}
   b6a74:	0003024c 	.word	0x0003024c

000b6a78 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6a78:	b508      	push	{r3, lr}
   b6a7a:	4b02      	ldr	r3, [pc, #8]	; (b6a84 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6a7c:	681b      	ldr	r3, [r3, #0]
   b6a7e:	695b      	ldr	r3, [r3, #20]
   b6a80:	9301      	str	r3, [sp, #4]
   b6a82:	bd08      	pop	{r3, pc}
   b6a84:	0003024c 	.word	0x0003024c

000b6a88 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6a88:	b508      	push	{r3, lr}
   b6a8a:	4b02      	ldr	r3, [pc, #8]	; (b6a94 <HAL_USB_USART_Receive_Data+0xc>)
   b6a8c:	681b      	ldr	r3, [r3, #0]
   b6a8e:	699b      	ldr	r3, [r3, #24]
   b6a90:	9301      	str	r3, [sp, #4]
   b6a92:	bd08      	pop	{r3, pc}
   b6a94:	0003024c 	.word	0x0003024c

000b6a98 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6a98:	b508      	push	{r3, lr}
   b6a9a:	4b02      	ldr	r3, [pc, #8]	; (b6aa4 <HAL_USB_USART_Send_Data+0xc>)
   b6a9c:	681b      	ldr	r3, [r3, #0]
   b6a9e:	69db      	ldr	r3, [r3, #28]
   b6aa0:	9301      	str	r3, [sp, #4]
   b6aa2:	bd08      	pop	{r3, pc}
   b6aa4:	0003024c 	.word	0x0003024c

000b6aa8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6aa8:	b508      	push	{r3, lr}
   b6aaa:	4b02      	ldr	r3, [pc, #8]	; (b6ab4 <HAL_USB_USART_Flush_Data+0xc>)
   b6aac:	681b      	ldr	r3, [r3, #0]
   b6aae:	6a1b      	ldr	r3, [r3, #32]
   b6ab0:	9301      	str	r3, [sp, #4]
   b6ab2:	bd08      	pop	{r3, pc}
   b6ab4:	0003024c 	.word	0x0003024c

000b6ab8 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b6ab8:	b508      	push	{r3, lr}
   b6aba:	4b02      	ldr	r3, [pc, #8]	; (b6ac4 <HAL_USB_USART_Is_Connected+0xc>)
   b6abc:	681b      	ldr	r3, [r3, #0]
   b6abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6ac0:	9301      	str	r3, [sp, #4]
   b6ac2:	bd08      	pop	{r3, pc}
   b6ac4:	0003024c 	.word	0x0003024c

000b6ac8 <wlan_get_credentials>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
   b6ac8:	b508      	push	{r3, lr}
   b6aca:	4b02      	ldr	r3, [pc, #8]	; (b6ad4 <wlan_get_credentials+0xc>)
   b6acc:	681b      	ldr	r3, [r3, #0]
   b6ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b6ad0:	9301      	str	r3, [sp, #4]
   b6ad2:	bd08      	pop	{r3, pc}
   b6ad4:	00030274 	.word	0x00030274

000b6ad8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6ad8:	b508      	push	{r3, lr}
   b6ada:	4b02      	ldr	r3, [pc, #8]	; (b6ae4 <panic_+0xc>)
   b6adc:	681b      	ldr	r3, [r3, #0]
   b6ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6ae0:	9301      	str	r3, [sp, #4]
   b6ae2:	bd08      	pop	{r3, pc}
   b6ae4:	00030260 	.word	0x00030260

000b6ae8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6ae8:	b508      	push	{r3, lr}
   b6aea:	4b02      	ldr	r3, [pc, #8]	; (b6af4 <log_message+0xc>)
   b6aec:	681b      	ldr	r3, [r3, #0]
   b6aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6af0:	9301      	str	r3, [sp, #4]
   b6af2:	bd08      	pop	{r3, pc}
   b6af4:	00030260 	.word	0x00030260

000b6af8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6af8:	b508      	push	{r3, lr}
   b6afa:	4b02      	ldr	r3, [pc, #8]	; (b6b04 <system_mode+0xc>)
   b6afc:	681b      	ldr	r3, [r3, #0]
   b6afe:	681b      	ldr	r3, [r3, #0]
   b6b00:	9301      	str	r3, [sp, #4]
   b6b02:	bd08      	pop	{r3, pc}
   b6b04:	00030220 	.word	0x00030220

000b6b08 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6b08:	b508      	push	{r3, lr}
   b6b0a:	4b02      	ldr	r3, [pc, #8]	; (b6b14 <set_system_mode+0xc>)
   b6b0c:	681b      	ldr	r3, [r3, #0]
   b6b0e:	685b      	ldr	r3, [r3, #4]
   b6b10:	9301      	str	r3, [sp, #4]
   b6b12:	bd08      	pop	{r3, pc}
   b6b14:	00030220 	.word	0x00030220

000b6b18 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6b18:	b508      	push	{r3, lr}
   b6b1a:	4b02      	ldr	r3, [pc, #8]	; (b6b24 <system_delay_ms+0xc>)
   b6b1c:	681b      	ldr	r3, [r3, #0]
   b6b1e:	695b      	ldr	r3, [r3, #20]
   b6b20:	9301      	str	r3, [sp, #4]
   b6b22:	bd08      	pop	{r3, pc}
   b6b24:	00030220 	.word	0x00030220

000b6b28 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6b28:	b508      	push	{r3, lr}
   b6b2a:	4b02      	ldr	r3, [pc, #8]	; (b6b34 <system_thread_set_state+0xc>)
   b6b2c:	681b      	ldr	r3, [r3, #0]
   b6b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6b30:	9301      	str	r3, [sp, #4]
   b6b32:	bd08      	pop	{r3, pc}
   b6b34:	00030220 	.word	0x00030220

000b6b38 <system_internal>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
   b6b38:	b508      	push	{r3, lr}
   b6b3a:	4b02      	ldr	r3, [pc, #8]	; (b6b44 <system_internal+0xc>)
   b6b3c:	681b      	ldr	r3, [r3, #0]
   b6b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6b40:	9301      	str	r3, [sp, #4]
   b6b42:	bd08      	pop	{r3, pc}
   b6b44:	00030220 	.word	0x00030220

000b6b48 <system_set_flag>:
DYNALIB_FN(14, system, system_set_flag, int(system_flag_t, uint8_t, void*))
   b6b48:	b508      	push	{r3, lr}
   b6b4a:	4b02      	ldr	r3, [pc, #8]	; (b6b54 <system_set_flag+0xc>)
   b6b4c:	681b      	ldr	r3, [r3, #0]
   b6b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6b50:	9301      	str	r3, [sp, #4]
   b6b52:	bd08      	pop	{r3, pc}
   b6b54:	00030220 	.word	0x00030220

000b6b58 <system_get_flag>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
   b6b58:	b508      	push	{r3, lr}
   b6b5a:	4b02      	ldr	r3, [pc, #8]	; (b6b64 <system_get_flag+0xc>)
   b6b5c:	681b      	ldr	r3, [r3, #0]
   b6b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6b60:	9301      	str	r3, [sp, #4]
   b6b62:	bd08      	pop	{r3, pc}
   b6b64:	00030220 	.word	0x00030220

000b6b68 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b6b68:	b508      	push	{r3, lr}
   b6b6a:	4b02      	ldr	r3, [pc, #8]	; (b6b74 <system_thread_get_state+0xc>)
   b6b6c:	681b      	ldr	r3, [r3, #0]
   b6b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6b70:	9301      	str	r3, [sp, #4]
   b6b72:	bd08      	pop	{r3, pc}
   b6b74:	00030220 	.word	0x00030220

000b6b78 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b6b78:	b508      	push	{r3, lr}
   b6b7a:	4b02      	ldr	r3, [pc, #8]	; (b6b84 <system_notify_time_changed+0xc>)
   b6b7c:	681b      	ldr	r3, [r3, #0]
   b6b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b6b80:	9301      	str	r3, [sp, #4]
   b6b82:	bd08      	pop	{r3, pc}
   b6b84:	00030220 	.word	0x00030220

000b6b88 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6b88:	b508      	push	{r3, lr}
   b6b8a:	4b03      	ldr	r3, [pc, #12]	; (b6b98 <system_ctrl_set_app_request_handler+0x10>)
   b6b8c:	681b      	ldr	r3, [r3, #0]
   b6b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6b92:	9301      	str	r3, [sp, #4]
   b6b94:	bd08      	pop	{r3, pc}
   b6b96:	0000      	.short	0x0000
   b6b98:	00030220 	.word	0x00030220

000b6b9c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6b9c:	b508      	push	{r3, lr}
   b6b9e:	4b03      	ldr	r3, [pc, #12]	; (b6bac <system_ctrl_set_result+0x10>)
   b6ba0:	681b      	ldr	r3, [r3, #0]
   b6ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6ba6:	9301      	str	r3, [sp, #4]
   b6ba8:	bd08      	pop	{r3, pc}
   b6baa:	0000      	.short	0x0000
   b6bac:	00030220 	.word	0x00030220

000b6bb0 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b6bb0:	b508      	push	{r3, lr}
   b6bb2:	4b03      	ldr	r3, [pc, #12]	; (b6bc0 <system_sleep_ext+0x10>)
   b6bb4:	681b      	ldr	r3, [r3, #0]
   b6bb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b6bba:	9301      	str	r3, [sp, #4]
   b6bbc:	bd08      	pop	{r3, pc}
   b6bbe:	0000      	.short	0x0000
   b6bc0:	00030220 	.word	0x00030220

000b6bc4 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b6bc4:	b508      	push	{r3, lr}
   b6bc6:	4b03      	ldr	r3, [pc, #12]	; (b6bd4 <system_reset+0x10>)
   b6bc8:	681b      	ldr	r3, [r3, #0]
   b6bca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b6bce:	9301      	str	r3, [sp, #4]
   b6bd0:	bd08      	pop	{r3, pc}
   b6bd2:	0000      	.short	0x0000
   b6bd4:	00030220 	.word	0x00030220

000b6bd8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6bd8:	b508      	push	{r3, lr}
   b6bda:	4b02      	ldr	r3, [pc, #8]	; (b6be4 <spark_process+0xc>)
   b6bdc:	681b      	ldr	r3, [r3, #0]
   b6bde:	689b      	ldr	r3, [r3, #8]
   b6be0:	9301      	str	r3, [sp, #4]
   b6be2:	bd08      	pop	{r3, pc}
   b6be4:	00030244 	.word	0x00030244

000b6be8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b6be8:	b508      	push	{r3, lr}
   b6bea:	4b02      	ldr	r3, [pc, #8]	; (b6bf4 <spark_cloud_flag_connect+0xc>)
   b6bec:	681b      	ldr	r3, [r3, #0]
   b6bee:	68db      	ldr	r3, [r3, #12]
   b6bf0:	9301      	str	r3, [sp, #4]
   b6bf2:	bd08      	pop	{r3, pc}
   b6bf4:	00030244 	.word	0x00030244

000b6bf8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6bf8:	b508      	push	{r3, lr}
   b6bfa:	4b02      	ldr	r3, [pc, #8]	; (b6c04 <spark_cloud_flag_connected+0xc>)
   b6bfc:	681b      	ldr	r3, [r3, #0]
   b6bfe:	695b      	ldr	r3, [r3, #20]
   b6c00:	9301      	str	r3, [sp, #4]
   b6c02:	bd08      	pop	{r3, pc}
   b6c04:	00030244 	.word	0x00030244

000b6c08 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6c08:	b508      	push	{r3, lr}
   b6c0a:	4b02      	ldr	r3, [pc, #8]	; (b6c14 <spark_sync_time_pending+0xc>)
   b6c0c:	681b      	ldr	r3, [r3, #0]
   b6c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6c10:	9301      	str	r3, [sp, #4]
   b6c12:	bd08      	pop	{r3, pc}
   b6c14:	00030244 	.word	0x00030244

000b6c18 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6c18:	b508      	push	{r3, lr}
   b6c1a:	4b02      	ldr	r3, [pc, #8]	; (b6c24 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6c1c:	681b      	ldr	r3, [r3, #0]
   b6c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6c20:	9301      	str	r3, [sp, #4]
   b6c22:	bd08      	pop	{r3, pc}
   b6c24:	00030244 	.word	0x00030244

000b6c28 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6c28:	b508      	push	{r3, lr}
   b6c2a:	4b02      	ldr	r3, [pc, #8]	; (b6c34 <network_connect+0xc>)
   b6c2c:	681b      	ldr	r3, [r3, #0]
   b6c2e:	685b      	ldr	r3, [r3, #4]
   b6c30:	9301      	str	r3, [sp, #4]
   b6c32:	bd08      	pop	{r3, pc}
   b6c34:	00030240 	.word	0x00030240

000b6c38 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6c38:	b508      	push	{r3, lr}
   b6c3a:	4b02      	ldr	r3, [pc, #8]	; (b6c44 <network_connecting+0xc>)
   b6c3c:	681b      	ldr	r3, [r3, #0]
   b6c3e:	689b      	ldr	r3, [r3, #8]
   b6c40:	9301      	str	r3, [sp, #4]
   b6c42:	bd08      	pop	{r3, pc}
   b6c44:	00030240 	.word	0x00030240

000b6c48 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6c48:	b508      	push	{r3, lr}
   b6c4a:	4b02      	ldr	r3, [pc, #8]	; (b6c54 <network_disconnect+0xc>)
   b6c4c:	681b      	ldr	r3, [r3, #0]
   b6c4e:	68db      	ldr	r3, [r3, #12]
   b6c50:	9301      	str	r3, [sp, #4]
   b6c52:	bd08      	pop	{r3, pc}
   b6c54:	00030240 	.word	0x00030240

000b6c58 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6c58:	b508      	push	{r3, lr}
   b6c5a:	4b02      	ldr	r3, [pc, #8]	; (b6c64 <network_ready+0xc>)
   b6c5c:	681b      	ldr	r3, [r3, #0]
   b6c5e:	691b      	ldr	r3, [r3, #16]
   b6c60:	9301      	str	r3, [sp, #4]
   b6c62:	bd08      	pop	{r3, pc}
   b6c64:	00030240 	.word	0x00030240

000b6c68 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6c68:	b508      	push	{r3, lr}
   b6c6a:	4b02      	ldr	r3, [pc, #8]	; (b6c74 <network_on+0xc>)
   b6c6c:	681b      	ldr	r3, [r3, #0]
   b6c6e:	695b      	ldr	r3, [r3, #20]
   b6c70:	9301      	str	r3, [sp, #4]
   b6c72:	bd08      	pop	{r3, pc}
   b6c74:	00030240 	.word	0x00030240

000b6c78 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6c78:	b508      	push	{r3, lr}
   b6c7a:	4b02      	ldr	r3, [pc, #8]	; (b6c84 <network_off+0xc>)
   b6c7c:	681b      	ldr	r3, [r3, #0]
   b6c7e:	699b      	ldr	r3, [r3, #24]
   b6c80:	9301      	str	r3, [sp, #4]
   b6c82:	bd08      	pop	{r3, pc}
   b6c84:	00030240 	.word	0x00030240

000b6c88 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6c88:	b508      	push	{r3, lr}
   b6c8a:	4b02      	ldr	r3, [pc, #8]	; (b6c94 <network_listen+0xc>)
   b6c8c:	681b      	ldr	r3, [r3, #0]
   b6c8e:	69db      	ldr	r3, [r3, #28]
   b6c90:	9301      	str	r3, [sp, #4]
   b6c92:	bd08      	pop	{r3, pc}
   b6c94:	00030240 	.word	0x00030240

000b6c98 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6c98:	b508      	push	{r3, lr}
   b6c9a:	4b02      	ldr	r3, [pc, #8]	; (b6ca4 <network_listening+0xc>)
   b6c9c:	681b      	ldr	r3, [r3, #0]
   b6c9e:	6a1b      	ldr	r3, [r3, #32]
   b6ca0:	9301      	str	r3, [sp, #4]
   b6ca2:	bd08      	pop	{r3, pc}
   b6ca4:	00030240 	.word	0x00030240

000b6ca8 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   b6ca8:	b508      	push	{r3, lr}
   b6caa:	4b02      	ldr	r3, [pc, #8]	; (b6cb4 <network_has_credentials+0xc>)
   b6cac:	681b      	ldr	r3, [r3, #0]
   b6cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6cb0:	9301      	str	r3, [sp, #4]
   b6cb2:	bd08      	pop	{r3, pc}
   b6cb4:	00030240 	.word	0x00030240

000b6cb8 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b6cb8:	b508      	push	{r3, lr}
   b6cba:	4b02      	ldr	r3, [pc, #8]	; (b6cc4 <network_set_credentials+0xc>)
   b6cbc:	681b      	ldr	r3, [r3, #0]
   b6cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6cc0:	9301      	str	r3, [sp, #4]
   b6cc2:	bd08      	pop	{r3, pc}
   b6cc4:	00030240 	.word	0x00030240

000b6cc8 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b6cc8:	b508      	push	{r3, lr}
   b6cca:	4b02      	ldr	r3, [pc, #8]	; (b6cd4 <network_clear_credentials+0xc>)
   b6ccc:	681b      	ldr	r3, [r3, #0]
   b6cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6cd0:	9301      	str	r3, [sp, #4]
   b6cd2:	bd08      	pop	{r3, pc}
   b6cd4:	00030240 	.word	0x00030240

000b6cd8 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6cd8:	b508      	push	{r3, lr}
   b6cda:	4b02      	ldr	r3, [pc, #8]	; (b6ce4 <network_set_listen_timeout+0xc>)
   b6cdc:	681b      	ldr	r3, [r3, #0]
   b6cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6ce0:	9301      	str	r3, [sp, #4]
   b6ce2:	bd08      	pop	{r3, pc}
   b6ce4:	00030240 	.word	0x00030240

000b6ce8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6ce8:	b508      	push	{r3, lr}
   b6cea:	4b02      	ldr	r3, [pc, #8]	; (b6cf4 <network_get_listen_timeout+0xc>)
   b6cec:	681b      	ldr	r3, [r3, #0]
   b6cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6cf0:	9301      	str	r3, [sp, #4]
   b6cf2:	bd08      	pop	{r3, pc}
   b6cf4:	00030240 	.word	0x00030240

000b6cf8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6cf8:	b508      	push	{r3, lr}
   b6cfa:	4b02      	ldr	r3, [pc, #8]	; (b6d04 <network_is_on+0xc>)
   b6cfc:	681b      	ldr	r3, [r3, #0]
   b6cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6d00:	9301      	str	r3, [sp, #4]
   b6d02:	bd08      	pop	{r3, pc}
   b6d04:	00030240 	.word	0x00030240

000b6d08 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6d08:	b508      	push	{r3, lr}
   b6d0a:	4b02      	ldr	r3, [pc, #8]	; (b6d14 <network_is_off+0xc>)
   b6d0c:	681b      	ldr	r3, [r3, #0]
   b6d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6d10:	9301      	str	r3, [sp, #4]
   b6d12:	bd08      	pop	{r3, pc}
   b6d14:	00030240 	.word	0x00030240

000b6d18 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6d18:	b508      	push	{r3, lr}
   b6d1a:	4b02      	ldr	r3, [pc, #8]	; (b6d24 <malloc+0xc>)
   b6d1c:	681b      	ldr	r3, [r3, #0]
   b6d1e:	681b      	ldr	r3, [r3, #0]
   b6d20:	9301      	str	r3, [sp, #4]
   b6d22:	bd08      	pop	{r3, pc}
   b6d24:	0003021c 	.word	0x0003021c

000b6d28 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6d28:	b508      	push	{r3, lr}
   b6d2a:	4b02      	ldr	r3, [pc, #8]	; (b6d34 <free+0xc>)
   b6d2c:	681b      	ldr	r3, [r3, #0]
   b6d2e:	685b      	ldr	r3, [r3, #4]
   b6d30:	9301      	str	r3, [sp, #4]
   b6d32:	bd08      	pop	{r3, pc}
   b6d34:	0003021c 	.word	0x0003021c

000b6d38 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6d38:	b508      	push	{r3, lr}
   b6d3a:	4b02      	ldr	r3, [pc, #8]	; (b6d44 <realloc+0xc>)
   b6d3c:	681b      	ldr	r3, [r3, #0]
   b6d3e:	689b      	ldr	r3, [r3, #8]
   b6d40:	9301      	str	r3, [sp, #4]
   b6d42:	bd08      	pop	{r3, pc}
   b6d44:	0003021c 	.word	0x0003021c

000b6d48 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6d48:	b508      	push	{r3, lr}
   b6d4a:	4b02      	ldr	r3, [pc, #8]	; (b6d54 <vsnprintf+0xc>)
   b6d4c:	681b      	ldr	r3, [r3, #0]
   b6d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6d50:	9301      	str	r3, [sp, #4]
   b6d52:	bd08      	pop	{r3, pc}
   b6d54:	0003021c 	.word	0x0003021c

000b6d58 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6d58:	b508      	push	{r3, lr}
   b6d5a:	4b02      	ldr	r3, [pc, #8]	; (b6d64 <abort+0xc>)
   b6d5c:	681b      	ldr	r3, [r3, #0]
   b6d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6d60:	9301      	str	r3, [sp, #4]
   b6d62:	bd08      	pop	{r3, pc}
   b6d64:	0003021c 	.word	0x0003021c

000b6d68 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6d68:	b508      	push	{r3, lr}
   b6d6a:	4b02      	ldr	r3, [pc, #8]	; (b6d74 <__errno+0xc>)
   b6d6c:	681b      	ldr	r3, [r3, #0]
   b6d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6d70:	9301      	str	r3, [sp, #4]
   b6d72:	bd08      	pop	{r3, pc}
   b6d74:	0003021c 	.word	0x0003021c

000b6d78 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6d78:	b508      	push	{r3, lr}
   b6d7a:	4b02      	ldr	r3, [pc, #8]	; (b6d84 <__assert_func+0xc>)
   b6d7c:	681b      	ldr	r3, [r3, #0]
   b6d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6d80:	9301      	str	r3, [sp, #4]
   b6d82:	bd08      	pop	{r3, pc}
   b6d84:	0003021c 	.word	0x0003021c

000b6d88 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6d88:	b508      	push	{r3, lr}
   b6d8a:	4b02      	ldr	r3, [pc, #8]	; (b6d94 <newlib_impure_ptr_callback+0xc>)
   b6d8c:	681b      	ldr	r3, [r3, #0]
   b6d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6d90:	9301      	str	r3, [sp, #4]
   b6d92:	bd08      	pop	{r3, pc}
   b6d94:	0003021c 	.word	0x0003021c

000b6d98 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6d98:	2100      	movs	r1, #0
   b6d9a:	f7ff bebd 	b.w	b6b18 <system_delay_ms>

000b6d9e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6d9e:	4770      	bx	lr

000b6da0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b6da0:	4770      	bx	lr

000b6da2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b6da2:	4770      	bx	lr

000b6da4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6da4:	4770      	bx	lr
	...

000b6da8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6da8:	4b06      	ldr	r3, [pc, #24]	; (b6dc4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6daa:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6dac:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6dae:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6db2:	d005      	beq.n	b6dc0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6db4:	4608      	mov	r0, r1
   b6db6:	f002 feaf 	bl	b9b18 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6dba:	2800      	cmp	r0, #0
   b6dbc:	bf08      	it	eq
   b6dbe:	2400      	moveq	r4, #0
      }
   b6dc0:	4620      	mov	r0, r4
   b6dc2:	bd10      	pop	{r4, pc}
   b6dc4:	000bb550 	.word	0x000bb550

000b6dc8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6dc8:	4b06      	ldr	r3, [pc, #24]	; (b6de4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6dca:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6dcc:	b510      	push	{r4, lr}
   b6dce:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6dd2:	d005      	beq.n	b6de0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6dd4:	4608      	mov	r0, r1
   b6dd6:	f002 fe9f 	bl	b9b18 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6dda:	2800      	cmp	r0, #0
   b6ddc:	bf08      	it	eq
   b6dde:	2400      	moveq	r4, #0
      }
   b6de0:	4620      	mov	r0, r4
   b6de2:	bd10      	pop	{r4, pc}
   b6de4:	000bb550 	.word	0x000bb550

000b6de8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6de8:	4b06      	ldr	r3, [pc, #24]	; (b6e04 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6dea:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6dec:	b510      	push	{r4, lr}
   b6dee:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6df2:	d005      	beq.n	b6e00 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6df4:	4608      	mov	r0, r1
   b6df6:	f002 fe8f 	bl	b9b18 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6dfa:	2800      	cmp	r0, #0
   b6dfc:	bf08      	it	eq
   b6dfe:	2400      	moveq	r4, #0
      }
   b6e00:	4620      	mov	r0, r4
   b6e02:	bd10      	pop	{r4, pc}
   b6e04:	000bb550 	.word	0x000bb550

000b6e08 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6e08:	b510      	push	{r4, lr}
   b6e0a:	2168      	movs	r1, #104	; 0x68
   b6e0c:	4604      	mov	r4, r0
   b6e0e:	f7fd f946 	bl	b409e <_ZdlPvj>
   b6e12:	4620      	mov	r0, r4
   b6e14:	bd10      	pop	{r4, pc}

000b6e16 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6e16:	b510      	push	{r4, lr}
   b6e18:	2128      	movs	r1, #40	; 0x28
   b6e1a:	4604      	mov	r4, r0
   b6e1c:	f7fd f93f 	bl	b409e <_ZdlPvj>
   b6e20:	4620      	mov	r0, r4
   b6e22:	bd10      	pop	{r4, pc}

000b6e24 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6e24:	b510      	push	{r4, lr}
   b6e26:	2130      	movs	r1, #48	; 0x30
   b6e28:	4604      	mov	r4, r0
   b6e2a:	f7fd f938 	bl	b409e <_ZdlPvj>
   b6e2e:	4620      	mov	r0, r4
   b6e30:	bd10      	pop	{r4, pc}

000b6e32 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6e32:	2168      	movs	r1, #104	; 0x68
   b6e34:	f7fd b933 	b.w	b409e <_ZdlPvj>

000b6e38 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6e38:	2128      	movs	r1, #40	; 0x28
   b6e3a:	f7fd b930 	b.w	b409e <_ZdlPvj>

000b6e3e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6e3e:	2130      	movs	r1, #48	; 0x30
   b6e40:	f7fd b92d 	b.w	b409e <_ZdlPvj>

000b6e44 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6e44:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6e46:	2500      	movs	r5, #0
   b6e48:	1cec      	adds	r4, r5, #3
   b6e4a:	428c      	cmp	r4, r1
   b6e4c:	d80d      	bhi.n	b6e6a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b6e4e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b6e50:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b6e52:	5d87      	ldrb	r7, [r0, r6]
   b6e54:	4297      	cmp	r7, r2
   b6e56:	d105      	bne.n	b6e64 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6e58:	4426      	add	r6, r4
   b6e5a:	42b1      	cmp	r1, r6
   b6e5c:	d305      	bcc.n	b6e6a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b6e5e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b6e60:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b6e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b6e64:	3401      	adds	r4, #1
   b6e66:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6e68:	e7ee      	b.n	b6e48 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b6e6a:	2000      	movs	r0, #0
   b6e6c:	e7f9      	b.n	b6e62 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b6e70 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b6e70:	4a02      	ldr	r2, [pc, #8]	; (b6e7c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b6e72:	2100      	movs	r1, #0
   b6e74:	200a      	movs	r0, #10
   b6e76:	f7ff be2f 	b.w	b6ad8 <panic_>
   b6e7a:	bf00      	nop
   b6e7c:	000b66f9 	.word	0x000b66f9

000b6e80 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6e80:	4603      	mov	r3, r0
   b6e82:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b6e84:	681b      	ldr	r3, [r3, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6e86:	e9d3 2100 	ldrd	r2, r1, [r3]
   b6e8a:	4710      	bx	r2

000b6e8c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6e8c:	b430      	push	{r4, r5}
   b6e8e:	460d      	mov	r5, r1
   b6e90:	4611      	mov	r1, r2
   b6e92:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b6e94:	6803      	ldr	r3, [r0, #0]
   b6e96:	6809      	ldr	r1, [r1, #0]
   b6e98:	6828      	ldr	r0, [r5, #0]
   b6e9a:	e9d3 4300 	ldrd	r4, r3, [r3]
   b6e9e:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b6ea0:	bc30      	pop	{r4, r5}
   b6ea2:	4760      	bx	ip

000b6ea4 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b6ea4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6ea6:	b538      	push	{r3, r4, r5, lr}
   b6ea8:	4604      	mov	r4, r0
	switch (__op)
   b6eaa:	d102      	bne.n	b6eb2 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6eac:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6eae:	6023      	str	r3, [r4, #0]
	}
   b6eb0:	e003      	b.n	b6eba <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b6eb2:	2a02      	cmp	r2, #2
   b6eb4:	d003      	beq.n	b6ebe <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b6eb6:	2a03      	cmp	r2, #3
   b6eb8:	d00d      	beq.n	b6ed6 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b6eba:	2000      	movs	r0, #0
   b6ebc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6ebe:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6ec0:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6ec2:	f7fd f8e8 	bl	b4096 <_Znwj>
   b6ec6:	4603      	mov	r3, r0
   b6ec8:	2800      	cmp	r0, #0
   b6eca:	d0f0      	beq.n	b6eae <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b6ecc:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6ed0:	e883 0003 	stmia.w	r3, {r0, r1}
   b6ed4:	e7eb      	b.n	b6eae <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6ed6:	6800      	ldr	r0, [r0, #0]
   b6ed8:	2800      	cmp	r0, #0
   b6eda:	d0ee      	beq.n	b6eba <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b6edc:	2108      	movs	r1, #8
   b6ede:	f7fd f8de 	bl	b409e <_ZdlPvj>
   b6ee2:	e7ea      	b.n	b6eba <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b6ee4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b6ee4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6ee6:	b538      	push	{r3, r4, r5, lr}
   b6ee8:	4604      	mov	r4, r0
	switch (__op)
   b6eea:	d102      	bne.n	b6ef2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6eec:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6eee:	6023      	str	r3, [r4, #0]
	}
   b6ef0:	e003      	b.n	b6efa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b6ef2:	2a02      	cmp	r2, #2
   b6ef4:	d003      	beq.n	b6efe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b6ef6:	2a03      	cmp	r2, #3
   b6ef8:	d00d      	beq.n	b6f16 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b6efa:	2000      	movs	r0, #0
   b6efc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6efe:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6f00:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6f02:	f7fd f8c8 	bl	b4096 <_Znwj>
   b6f06:	4603      	mov	r3, r0
   b6f08:	2800      	cmp	r0, #0
   b6f0a:	d0f0      	beq.n	b6eee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b6f0c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6f10:	e883 0003 	stmia.w	r3, {r0, r1}
   b6f14:	e7eb      	b.n	b6eee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6f16:	6800      	ldr	r0, [r0, #0]
   b6f18:	2800      	cmp	r0, #0
   b6f1a:	d0ee      	beq.n	b6efa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b6f1c:	2108      	movs	r1, #8
   b6f1e:	f7fd f8be 	bl	b409e <_ZdlPvj>
   b6f22:	e7ea      	b.n	b6efa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b6f24 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b6f24:	b510      	push	{r4, lr}
      if (_M_manager)
   b6f26:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b6f28:	4604      	mov	r4, r0
      if (_M_manager)
   b6f2a:	b113      	cbz	r3, b6f32 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6f2c:	2203      	movs	r2, #3
   b6f2e:	4601      	mov	r1, r0
   b6f30:	4798      	blx	r3
    }
   b6f32:	4620      	mov	r0, r4
   b6f34:	bd10      	pop	{r4, pc}

000b6f36 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6f36:	b510      	push	{r4, lr}
   b6f38:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b6f3a:	3058      	adds	r0, #88	; 0x58
   b6f3c:	f7ff fff2 	bl	b6f24 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b6f40:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b6f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6f48:	f001 bd00 	b.w	b894c <_ZN6StringD1Ev>

000b6f4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6f4c:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6f4e:	6843      	ldr	r3, [r0, #4]
   b6f50:	3b01      	subs	r3, #1
    {
   b6f52:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6f54:	6043      	str	r3, [r0, #4]
   b6f56:	b963      	cbnz	r3, b6f72 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6f58:	6803      	ldr	r3, [r0, #0]
   b6f5a:	689b      	ldr	r3, [r3, #8]
   b6f5c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6f5e:	68a3      	ldr	r3, [r4, #8]
   b6f60:	3b01      	subs	r3, #1
   b6f62:	60a3      	str	r3, [r4, #8]
   b6f64:	b92b      	cbnz	r3, b6f72 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6f66:	6823      	ldr	r3, [r4, #0]
   b6f68:	4620      	mov	r0, r4
   b6f6a:	68db      	ldr	r3, [r3, #12]
    }
   b6f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6f70:	4718      	bx	r3
    }
   b6f72:	bd10      	pop	{r4, pc}

000b6f74 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b6f74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6f78:	b2da      	uxtb	r2, r3
   b6f7a:	2a09      	cmp	r2, #9
   b6f7c:	d801      	bhi.n	b6f82 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b6f7e:	4618      	mov	r0, r3
   b6f80:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b6f82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b6f86:	2b05      	cmp	r3, #5
   b6f88:	d801      	bhi.n	b6f8e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b6f8a:	3857      	subs	r0, #87	; 0x57
   b6f8c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b6f8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b6f92:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b6f94:	bf94      	ite	ls
   b6f96:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b6f98:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b6f9c:	4770      	bx	lr
	...

000b6fa0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b6fa0:	b510      	push	{r4, lr}
            locked_(false) {
   b6fa2:	2300      	movs	r3, #0
   b6fa4:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b6fa6:	4b04      	ldr	r3, [pc, #16]	; (b6fb8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b6fa8:	4604      	mov	r4, r0
   b6faa:	6818      	ldr	r0, [r3, #0]
   b6fac:	f7ff fb84 	bl	b66b8 <os_mutex_recursive_lock>
        locked_ = true;
   b6fb0:	2301      	movs	r3, #1
   b6fb2:	7023      	strb	r3, [r4, #0]
    }
   b6fb4:	4620      	mov	r0, r4
   b6fb6:	bd10      	pop	{r4, pc}
   b6fb8:	2003e6b8 	.word	0x2003e6b8

000b6fbc <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b6fbc:	b510      	push	{r4, lr}
        if (locked_) {
   b6fbe:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b6fc0:	4604      	mov	r4, r0
        if (locked_) {
   b6fc2:	b11b      	cbz	r3, b6fcc <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6fc4:	4b02      	ldr	r3, [pc, #8]	; (b6fd0 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6fc6:	6818      	ldr	r0, [r3, #0]
   b6fc8:	f7ff fb7e 	bl	b66c8 <os_mutex_recursive_unlock>
    }
   b6fcc:	4620      	mov	r0, r4
   b6fce:	bd10      	pop	{r4, pc}
   b6fd0:	2003e6b8 	.word	0x2003e6b8

000b6fd4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b6fd4:	b082      	sub	sp, #8
   b6fd6:	4603      	mov	r3, r0
    address_ = addr;
   b6fd8:	6808      	ldr	r0, [r1, #0]
   b6fda:	6849      	ldr	r1, [r1, #4]
   b6fdc:	466a      	mov	r2, sp
   b6fde:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b6fe0:	466a      	mov	r2, sp
   b6fe2:	ca03      	ldmia	r2!, {r0, r1}
   b6fe4:	6018      	str	r0, [r3, #0]
}
   b6fe6:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6fe8:	6059      	str	r1, [r3, #4]
}
   b6fea:	b002      	add	sp, #8
   b6fec:	4770      	bx	lr

000b6fee <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b6fee:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b6ff0:	7982      	ldrb	r2, [r0, #6]
   b6ff2:	798b      	ldrb	r3, [r1, #6]
   b6ff4:	429a      	cmp	r2, r3
   b6ff6:	d106      	bne.n	b7006 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6ff8:	2206      	movs	r2, #6
   b6ffa:	f003 fb37 	bl	ba66c <memcmp>
   b6ffe:	fab0 f080 	clz	r0, r0
   b7002:	0940      	lsrs	r0, r0, #5
}
   b7004:	bd08      	pop	{r3, pc}
    return false;
   b7006:	2000      	movs	r0, #0
   b7008:	e7fc      	b.n	b7004 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b700a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b700a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b700e:	6003      	str	r3, [r0, #0]
   b7010:	8083      	strh	r3, [r0, #4]
}
   b7012:	2000      	movs	r0, #0
   b7014:	4770      	bx	lr

000b7016 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b7016:	b508      	push	{r3, lr}
   b7018:	4602      	mov	r2, r0
        : address_{} {
   b701a:	2100      	movs	r1, #0
   b701c:	6001      	str	r1, [r0, #0]
   b701e:	6041      	str	r1, [r0, #4]
    clear();
   b7020:	f7ff fff3 	bl	b700a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b7024:	7191      	strb	r1, [r2, #6]
}
   b7026:	4610      	mov	r0, r2
   b7028:	bd08      	pop	{r3, pc}
	...

000b702c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b702c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b702e:	2301      	movs	r3, #1
   b7030:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7032:	4b05      	ldr	r3, [pc, #20]	; (b7048 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b7034:	4602      	mov	r2, r0
   b7036:	f103 0110 	add.w	r1, r3, #16
   b703a:	f853 4b04 	ldr.w	r4, [r3], #4
   b703e:	f842 4b04 	str.w	r4, [r2], #4
   b7042:	428b      	cmp	r3, r1
   b7044:	d1f9      	bne.n	b703a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b7046:	bd10      	pop	{r4, pc}
   b7048:	000bb55e 	.word	0x000bb55e

000b704c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b704c:	b510      	push	{r4, lr}
    if (uuid128) {
   b704e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7050:	4604      	mov	r4, r0
    if (uuid128) {
   b7052:	b1b1      	cbz	r1, b7082 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b7054:	2a01      	cmp	r2, #1
   b7056:	f101 0210 	add.w	r2, r1, #16
   b705a:	d10a      	bne.n	b7072 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b705c:	4601      	mov	r1, r0
   b705e:	f853 0b04 	ldr.w	r0, [r3], #4
   b7062:	f841 0b04 	str.w	r0, [r1], #4
   b7066:	4293      	cmp	r3, r2
   b7068:	d1f9      	bne.n	b705e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b706a:	2301      	movs	r3, #1
   b706c:	6123      	str	r3, [r4, #16]
}
   b706e:	4620      	mov	r0, r4
   b7070:	bd10      	pop	{r4, pc}
   b7072:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b7074:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b7078:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b707c:	429a      	cmp	r2, r3
   b707e:	d1f9      	bne.n	b7074 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b7080:	e7f3      	b.n	b706a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b7082:	2210      	movs	r2, #16
   b7084:	f003 fb2a 	bl	ba6dc <memset>
   b7088:	e7f1      	b.n	b706e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b708a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b708a:	b538      	push	{r3, r4, r5, lr}
   b708c:	4604      	mov	r4, r0
   b708e:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b7090:	461a      	mov	r2, r3
   b7092:	f7ff ffdb 	bl	b704c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b7096:	81a5      	strh	r5, [r4, #12]
}
   b7098:	4620      	mov	r0, r4
   b709a:	bd38      	pop	{r3, r4, r5, pc}

000b709c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b709c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b709e:	6902      	ldr	r2, [r0, #16]
   b70a0:	b922      	cbnz	r2, b70ac <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b70a2:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b70a4:	3800      	subs	r0, #0
   b70a6:	bf18      	it	ne
   b70a8:	2001      	movne	r0, #1
}
   b70aa:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b70ac:	4902      	ldr	r1, [pc, #8]	; (b70b8 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b70ae:	2210      	movs	r2, #16
   b70b0:	f003 fadc 	bl	ba66c <memcmp>
   b70b4:	e7f6      	b.n	b70a4 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b70b6:	bf00      	nop
   b70b8:	000bb57e 	.word	0x000bb57e

000b70bc <_ZNK8particle7BleUuid4typeEv>:
}
   b70bc:	6900      	ldr	r0, [r0, #16]
   b70be:	4770      	bx	lr

000b70c0 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b70c0:	b538      	push	{r3, r4, r5, lr}
   b70c2:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b70c4:	2214      	movs	r2, #20
   b70c6:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b70c8:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b70ca:	f003 fb07 	bl	ba6dc <memset>
    if (type_ == BleUuidType::SHORT) {
   b70ce:	6923      	ldr	r3, [r4, #16]
   b70d0:	b91b      	cbnz	r3, b70da <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b70d2:	89a3      	ldrh	r3, [r4, #12]
   b70d4:	802b      	strh	r3, [r5, #0]
}
   b70d6:	4628      	mov	r0, r5
   b70d8:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b70da:	2301      	movs	r3, #1
   b70dc:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b70de:	4621      	mov	r1, r4
   b70e0:	462b      	mov	r3, r5
   b70e2:	f104 0210 	add.w	r2, r4, #16
   b70e6:	f851 0b04 	ldr.w	r0, [r1], #4
   b70ea:	f843 0b04 	str.w	r0, [r3], #4
   b70ee:	4291      	cmp	r1, r2
   b70f0:	d1f9      	bne.n	b70e6 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b70f2:	e7f0      	b.n	b70d6 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b70f4 <_ZNK8particle7BleUuid7shortedEv>:
}
   b70f4:	8980      	ldrh	r0, [r0, #12]
   b70f6:	4770      	bx	lr

000b70f8 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b70f8:	4770      	bx	lr

000b70fa <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b70fa:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b70fc:	6902      	ldr	r2, [r0, #16]
   b70fe:	690b      	ldr	r3, [r1, #16]
   b7100:	429a      	cmp	r2, r3
   b7102:	d106      	bne.n	b7112 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b7104:	2210      	movs	r2, #16
   b7106:	f003 fab1 	bl	ba66c <memcmp>
   b710a:	fab0 f080 	clz	r0, r0
   b710e:	0940      	lsrs	r0, r0, #5
}
   b7110:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7112:	2000      	movs	r0, #0
   b7114:	e7fc      	b.n	b7110 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b7118 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b7118:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b711a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b711e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7120:	4b34      	ldr	r3, [pc, #208]	; (b71f4 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b7122:	460c      	mov	r4, r1
   b7124:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7126:	4602      	mov	r2, r0
   b7128:	f103 0110 	add.w	r1, r3, #16
   b712c:	f853 0b04 	ldr.w	r0, [r3], #4
   b7130:	f842 0b04 	str.w	r0, [r2], #4
   b7134:	428b      	cmp	r3, r1
   b7136:	d1f9      	bne.n	b712c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b7138:	b344      	cbz	r4, b718c <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b713a:	2124      	movs	r1, #36	; 0x24
   b713c:	4620      	mov	r0, r4
   b713e:	f003 fb30 	bl	ba7a2 <strnlen>
   b7142:	2804      	cmp	r0, #4
   b7144:	f04f 0500 	mov.w	r5, #0
   b7148:	d123      	bne.n	b7192 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b714a:	f8ad 5004 	strh.w	r5, [sp, #4]
   b714e:	af01      	add	r7, sp, #4
   b7150:	1ca5      	adds	r5, r4, #2
   b7152:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b7154:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b7158:	f7ff ff0c 	bl	b6f74 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b715c:	f1b0 0800 	subs.w	r8, r0, #0
   b7160:	db12      	blt.n	b7188 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b7162:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b7166:	f7ff ff05 	bl	b6f74 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b716a:	2800      	cmp	r0, #0
   b716c:	db0c      	blt.n	b7188 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b716e:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7170:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b7174:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7176:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b717a:	d1eb      	bne.n	b7154 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b717c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b7180:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b7182:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7186:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b7188:	2300      	movs	r3, #0
   b718a:	6133      	str	r3, [r6, #16]
}
   b718c:	b002      	add	sp, #8
   b718e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b7192:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7196:	2124      	movs	r1, #36	; 0x24
   b7198:	4620      	mov	r0, r4
   b719a:	f003 fb02 	bl	ba7a2 <strnlen>
   b719e:	42a8      	cmp	r0, r5
   b71a0:	d807      	bhi.n	b71b2 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b71a2:	4642      	mov	r2, r8
   b71a4:	2100      	movs	r1, #0
   b71a6:	4630      	mov	r0, r6
}
   b71a8:	b002      	add	sp, #8
   b71aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b71ae:	f003 ba95 	b.w	ba6dc <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b71b2:	f1b8 0f00 	cmp.w	r8, #0
   b71b6:	d0e9      	beq.n	b718c <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b71b8:	5d60      	ldrb	r0, [r4, r5]
   b71ba:	f7ff fedb 	bl	b6f74 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b71be:	0603      	lsls	r3, r0, #24
   b71c0:	d415      	bmi.n	b71ee <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b71c2:	0100      	lsls	r0, r0, #4
   b71c4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b71c8:	b2c7      	uxtb	r7, r0
   b71ca:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b71ce:	2124      	movs	r1, #36	; 0x24
   b71d0:	4620      	mov	r0, r4
   b71d2:	f003 fae6 	bl	ba7a2 <strnlen>
   b71d6:	3501      	adds	r5, #1
   b71d8:	42a8      	cmp	r0, r5
   b71da:	d908      	bls.n	b71ee <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b71dc:	5d60      	ldrb	r0, [r4, r5]
   b71de:	f7ff fec9 	bl	b6f74 <_ZN8particle11hexToNibbleEc>
   b71e2:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b71e4:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b71e6:	bfa4      	itt	ge
   b71e8:	4338      	orrge	r0, r7
   b71ea:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b71ee:	3501      	adds	r5, #1
   b71f0:	e7d1      	b.n	b7196 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b71f2:	bf00      	nop
   b71f4:	000bb55e 	.word	0x000bb55e

000b71f8 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b71f8:	b513      	push	{r0, r1, r4, lr}
   b71fa:	4604      	mov	r4, r0
   b71fc:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b71fe:	f7ff ff15 	bl	b702c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b7202:	4620      	mov	r0, r4
   b7204:	9901      	ldr	r1, [sp, #4]
   b7206:	f7ff ff87 	bl	b7118 <_ZN8particle7BleUuid9constructEPKc>
}
   b720a:	4620      	mov	r0, r4
   b720c:	b002      	add	sp, #8
   b720e:	bd10      	pop	{r4, pc}

000b7210 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b7210:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b7212:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7216:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b7218:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b721a:	8043      	strh	r3, [r0, #2]
   b721c:	220e      	movs	r2, #14
   b721e:	4629      	mov	r1, r5
   b7220:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b7222:	7105      	strb	r5, [r0, #4]
   b7224:	3006      	adds	r0, #6
   b7226:	f003 fa59 	bl	ba6dc <memset>
   b722a:	f104 0014 	add.w	r0, r4, #20
   b722e:	f7ff fefd 	bl	b702c <_ZN8particle7BleUuidC1Ev>
   b7232:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b7236:	f7ff fef9 	bl	b702c <_ZN8particle7BleUuidC1Ev>
   b723a:	4904      	ldr	r1, [pc, #16]	; (b724c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b723c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7240:	f001 fbcf 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b7244:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b7246:	4620      	mov	r0, r4
   b7248:	bd38      	pop	{r3, r4, r5, pc}
   b724a:	bf00      	nop
   b724c:	000bac31 	.word	0x000bac31

000b7250 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b7250:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b7252:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b7256:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b725a:	4293      	cmp	r3, r2
   b725c:	4618      	mov	r0, r3
   b725e:	d006      	beq.n	b726e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b7260:	6804      	ldr	r4, [r0, #0]
   b7262:	8824      	ldrh	r4, [r4, #0]
   b7264:	428c      	cmp	r4, r1
   b7266:	f103 0308 	add.w	r3, r3, #8
   b726a:	d1f6      	bne.n	b725a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b726c:	bd10      	pop	{r4, pc}
        return nullptr;
   b726e:	2000      	movs	r0, #0
   b7270:	e7fc      	b.n	b726c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b7274 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b7274:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7276:	4606      	mov	r6, r0
   b7278:	b085      	sub	sp, #20
   b727a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b727c:	460d      	mov	r5, r1
   b727e:	2900      	cmp	r1, #0
   b7280:	d050      	beq.n	b7324 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b7282:	2a00      	cmp	r2, #0
   b7284:	d04e      	beq.n	b7324 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7286:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b7288:	7823      	ldrb	r3, [r4, #0]
   b728a:	2af4      	cmp	r2, #244	; 0xf4
   b728c:	bf28      	it	cs
   b728e:	22f4      	movcs	r2, #244	; 0xf4
   b7290:	b343      	cbz	r3, b72e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b7292:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b7294:	0798      	lsls	r0, r3, #30
   b7296:	d509      	bpl.n	b72ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b7298:	89a0      	ldrh	r0, [r4, #12]
   b729a:	9203      	str	r2, [sp, #12]
   b729c:	2300      	movs	r3, #0
   b729e:	f7ff f9bd 	bl	b661c <hal_ble_gatt_server_set_characteristic_value>
   b72a2:	2800      	cmp	r0, #0
   b72a4:	9a03      	ldr	r2, [sp, #12]
   b72a6:	da03      	bge.n	b72b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b72a8:	b005      	add	sp, #20
   b72aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b72ac:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b72b0:	6834      	ldr	r4, [r6, #0]
   b72b2:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b72b4:	06d9      	lsls	r1, r3, #27
   b72b6:	d509      	bpl.n	b72cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b72b8:	2f01      	cmp	r7, #1
   b72ba:	d007      	beq.n	b72cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b72bc:	89a0      	ldrh	r0, [r4, #12]
   b72be:	2300      	movs	r3, #0
   b72c0:	4629      	mov	r1, r5
}
   b72c2:	b005      	add	sp, #20
   b72c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b72c8:	f7ff b9da 	b.w	b6680 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b72cc:	069b      	lsls	r3, r3, #26
   b72ce:	d5eb      	bpl.n	b72a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b72d0:	2f02      	cmp	r7, #2
   b72d2:	d0e9      	beq.n	b72a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b72d4:	89a0      	ldrh	r0, [r4, #12]
   b72d6:	2300      	movs	r3, #0
   b72d8:	4629      	mov	r1, r5
}
   b72da:	b005      	add	sp, #20
   b72dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b72e0:	f7ff b9d8 	b.w	b6694 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b72e4:	8860      	ldrh	r0, [r4, #2]
   b72e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b72ea:	4288      	cmp	r0, r1
   b72ec:	d01c      	beq.n	b7328 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b72ee:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b72f0:	074e      	lsls	r6, r1, #29
   b72f2:	d501      	bpl.n	b72f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b72f4:	2f01      	cmp	r7, #1
   b72f6:	d104      	bne.n	b7302 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b72f8:	070b      	lsls	r3, r1, #28
   b72fa:	d409      	bmi.n	b7310 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b72fc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7300:	e7d2      	b.n	b72a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7302:	89a1      	ldrh	r1, [r4, #12]
   b7304:	9300      	str	r3, [sp, #0]
   b7306:	4613      	mov	r3, r2
   b7308:	462a      	mov	r2, r5
   b730a:	f7ff f99b 	bl	b6644 <hal_ble_gatt_client_write_without_response>
   b730e:	e7cb      	b.n	b72a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7310:	2f02      	cmp	r7, #2
   b7312:	d0f3      	beq.n	b72fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7314:	2300      	movs	r3, #0
   b7316:	89a1      	ldrh	r1, [r4, #12]
   b7318:	9300      	str	r3, [sp, #0]
   b731a:	4613      	mov	r3, r2
   b731c:	462a      	mov	r2, r5
   b731e:	f7ff f987 	bl	b6630 <hal_ble_gatt_client_write_with_response>
   b7322:	e7c1      	b.n	b72a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b7324:	4802      	ldr	r0, [pc, #8]	; (b7330 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b7326:	e7bf      	b.n	b72a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b7328:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b732c:	e7bc      	b.n	b72a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b732e:	bf00      	nop
   b7330:	fffffef2 	.word	0xfffffef2

000b7334 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   b7334:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   b7336:	688a      	ldr	r2, [r1, #8]
   b7338:	6809      	ldr	r1, [r1, #0]
   b733a:	f7ff bf9b 	b.w	b7274 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b733e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b733e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7340:	460c      	mov	r4, r1
   b7342:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b7344:	21f4      	movs	r1, #244	; 0xf4
   b7346:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b7348:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b734a:	f003 fa2a 	bl	ba7a2 <strnlen>
   b734e:	9b01      	ldr	r3, [sp, #4]
   b7350:	4602      	mov	r2, r0
   b7352:	4621      	mov	r1, r4
   b7354:	4628      	mov	r0, r5
}
   b7356:	b003      	add	sp, #12
   b7358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b735c:	f7ff bf8a 	b.w	b7274 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b7360 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b7360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7364:	2600      	movs	r6, #0
   b7366:	6006      	str	r6, [r0, #0]
   b7368:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b736a:	2028      	movs	r0, #40	; 0x28
   b736c:	460c      	mov	r4, r1
   b736e:	f7fc fe92 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7372:	1e05      	subs	r5, r0, #0
   b7374:	f105 080c 	add.w	r8, r5, #12
   b7378:	d00f      	beq.n	b739a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b737a:	2301      	movs	r3, #1
   b737c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7380:	4b08      	ldr	r3, [pc, #32]	; (b73a4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b7382:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b7384:	4640      	mov	r0, r8
   b7386:	f7ff fe51 	bl	b702c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b738a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b738c:	622e      	str	r6, [r5, #32]
   b738e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b7392:	4646      	mov	r6, r8
   b7394:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b7396:	6823      	ldr	r3, [r4, #0]
   b7398:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b739a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b739e:	4638      	mov	r0, r7
   b73a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b73a4:	000bb520 	.word	0x000bb520

000b73a8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b73a8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b73aa:	2500      	movs	r5, #0
   b73ac:	6005      	str	r5, [r0, #0]
   b73ae:	4606      	mov	r6, r0
   b73b0:	2030      	movs	r0, #48	; 0x30
   b73b2:	f7fc fe70 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b73b6:	4604      	mov	r4, r0
   b73b8:	b188      	cbz	r0, b73de <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b73ba:	2301      	movs	r3, #1
   b73bc:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b73c0:	4b09      	ldr	r3, [pc, #36]	; (b73e8 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b73c2:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b73c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b73c8:	8183      	strh	r3, [r0, #12]
   b73ca:	300e      	adds	r0, #14
   b73cc:	f7ff fe23 	bl	b7016 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b73d0:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b73d4:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b73d8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b73dc:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b73de:	6074      	str	r4, [r6, #4]
   b73e0:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b73e2:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b73e4:	4630      	mov	r0, r6
   b73e6:	bd70      	pop	{r4, r5, r6, pc}
   b73e8:	000bb53c 	.word	0x000bb53c

000b73ec <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b73ec:	b513      	push	{r0, r1, r4, lr}
   b73ee:	4604      	mov	r4, r0
    WiringBleLock lk;
   b73f0:	a801      	add	r0, sp, #4
   b73f2:	f7ff fdd5 	bl	b6fa0 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b73f6:	6823      	ldr	r3, [r4, #0]
   b73f8:	881c      	ldrh	r4, [r3, #0]
   b73fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b73fe:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b7400:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b7402:	bf18      	it	ne
   b7404:	2401      	movne	r4, #1
    WiringBleLock lk;
   b7406:	f7ff fdd9 	bl	b6fbc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b740a:	4620      	mov	r0, r4
   b740c:	b002      	add	sp, #8
   b740e:	bd10      	pop	{r4, pc}

000b7410 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b7410:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7412:	460d      	mov	r5, r1
   b7414:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7416:	a801      	add	r0, sp, #4
   b7418:	f7ff fdc2 	bl	b6fa0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b741c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b741e:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b7422:	6023      	str	r3, [r4, #0]
   b7424:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b7428:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b742a:	a801      	add	r0, sp, #4
   b742c:	f7ff fdc6 	bl	b6fbc <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b7430:	4620      	mov	r0, r4
   b7432:	b003      	add	sp, #12
   b7434:	bd30      	pop	{r4, r5, pc}

000b7436 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b7436:	b530      	push	{r4, r5, lr}
   b7438:	4605      	mov	r5, r0
   b743a:	b087      	sub	sp, #28
   b743c:	460c      	mov	r4, r1
    WiringBleLock lk;
   b743e:	a801      	add	r0, sp, #4
   b7440:	f7ff fdae 	bl	b6fa0 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b7444:	682a      	ldr	r2, [r5, #0]
   b7446:	6823      	ldr	r3, [r4, #0]
   b7448:	8812      	ldrh	r2, [r2, #0]
   b744a:	881b      	ldrh	r3, [r3, #0]
   b744c:	429a      	cmp	r2, r3
   b744e:	d10d      	bne.n	b746c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b7450:	4629      	mov	r1, r5
   b7452:	a802      	add	r0, sp, #8
   b7454:	f7ff ffdc 	bl	b7410 <_ZNK8particle13BlePeerDevice7addressEv>
   b7458:	4621      	mov	r1, r4
   b745a:	a804      	add	r0, sp, #16
   b745c:	f7ff ffd8 	bl	b7410 <_ZNK8particle13BlePeerDevice7addressEv>
   b7460:	a904      	add	r1, sp, #16
   b7462:	a802      	add	r0, sp, #8
   b7464:	f7ff fdc3 	bl	b6fee <_ZNK8particle10BleAddresseqERKS0_>
   b7468:	4604      	mov	r4, r0
   b746a:	b900      	cbnz	r0, b746e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b746c:	2400      	movs	r4, #0
    WiringBleLock lk;
   b746e:	a801      	add	r0, sp, #4
   b7470:	f7ff fda4 	bl	b6fbc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7474:	4620      	mov	r0, r4
   b7476:	b007      	add	sp, #28
   b7478:	bd30      	pop	{r4, r5, pc}
	...

000b747c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b747c:	b510      	push	{r4, lr}
   b747e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b7480:	2054      	movs	r0, #84	; 0x54
   b7482:	f7fc fe08 	bl	b4096 <_Znwj>
   b7486:	4601      	mov	r1, r0
   b7488:	b160      	cbz	r0, b74a4 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b748a:	2300      	movs	r3, #0
   b748c:	e9c0 3300 	strd	r3, r3, [r0]
   b7490:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b7494:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b7498:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b749c:	6203      	str	r3, [r0, #32]
   b749e:	62c3      	str	r3, [r0, #44]	; 0x2c
   b74a0:	63c3      	str	r3, [r0, #60]	; 0x3c
   b74a2:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b74a4:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b74a6:	b919      	cbnz	r1, b74b0 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   b74a8:	4a09      	ldr	r2, [pc, #36]	; (b74d0 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b74aa:	200a      	movs	r0, #10
   b74ac:	f7ff fb14 	bl	b6ad8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b74b0:	2000      	movs	r0, #0
   b74b2:	f7ff f877 	bl	b65a4 <hal_ble_stack_init>
   b74b6:	b120      	cbz	r0, b74c2 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   b74b8:	4a05      	ldr	r2, [pc, #20]	; (b74d0 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b74ba:	2100      	movs	r1, #0
   b74bc:	200a      	movs	r0, #10
   b74be:	f7ff fb0b 	bl	b6ad8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b74c2:	6821      	ldr	r1, [r4, #0]
   b74c4:	4803      	ldr	r0, [pc, #12]	; (b74d4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b74c6:	2200      	movs	r2, #0
   b74c8:	f7ff f8d0 	bl	b666c <hal_ble_set_callback_on_periph_link_events>
}
   b74cc:	4620      	mov	r0, r4
   b74ce:	bd10      	pop	{r4, pc}
   b74d0:	000b66f9 	.word	0x000b66f9
   b74d4:	000b7ad5 	.word	0x000b7ad5

000b74d8 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b74d8:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b74da:	4c0a      	ldr	r4, [pc, #40]	; (b7504 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b74dc:	7823      	ldrb	r3, [r4, #0]
   b74de:	f3bf 8f5b 	dmb	ish
   b74e2:	07db      	lsls	r3, r3, #31
   b74e4:	d40c      	bmi.n	b7500 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b74e6:	4620      	mov	r0, r4
   b74e8:	f7fc fddb 	bl	b40a2 <__cxa_guard_acquire>
   b74ec:	b140      	cbz	r0, b7500 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b74ee:	4806      	ldr	r0, [pc, #24]	; (b7508 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b74f0:	f7ff ffc4 	bl	b747c <_ZN8particle14BleLocalDeviceC1Ev>
   b74f4:	4620      	mov	r0, r4
   b74f6:	f7fc fdd9 	bl	b40ac <__cxa_guard_release>
   b74fa:	4804      	ldr	r0, [pc, #16]	; (b750c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b74fc:	f003 f894 	bl	ba628 <atexit>
    return instance;
}
   b7500:	4801      	ldr	r0, [pc, #4]	; (b7508 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7502:	bd10      	pop	{r4, pc}
   b7504:	2003e6b0 	.word	0x2003e6b0
   b7508:	2003e6bc 	.word	0x2003e6bc
   b750c:	000b7761 	.word	0x000b7761

000b7510 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7510:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b7512:	6803      	ldr	r3, [r0, #0]
   b7514:	3b09      	subs	r3, #9
   b7516:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7518:	b08d      	sub	sp, #52	; 0x34
   b751a:	4604      	mov	r4, r0
   b751c:	460d      	mov	r5, r1
    switch (event->type) {
   b751e:	d811      	bhi.n	b7544 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b7520:	f7ff ffda 	bl	b74d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b7524:	88a1      	ldrh	r1, [r4, #4]
   b7526:	6800      	ldr	r0, [r0, #0]
   b7528:	f7ff fe92 	bl	b7250 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b752c:	4603      	mov	r3, r0
   b752e:	b958      	cbnz	r0, b7548 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b7530:	2220      	movs	r2, #32
   b7532:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b7536:	4a0b      	ldr	r2, [pc, #44]	; (b7564 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b7538:	9200      	str	r2, [sp, #0]
   b753a:	490b      	ldr	r1, [pc, #44]	; (b7568 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b753c:	aa04      	add	r2, sp, #16
   b753e:	2032      	movs	r0, #50	; 0x32
   b7540:	f7ff fad2 	bl	b6ae8 <log_message>
}
   b7544:	b00d      	add	sp, #52	; 0x34
   b7546:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b7548:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b754a:	2a00      	cmp	r2, #0
   b754c:	d0fa      	beq.n	b7544 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b754e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7552:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b7556:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b755a:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b755c:	aa04      	add	r2, sp, #16
   b755e:	a903      	add	r1, sp, #12
   b7560:	47a0      	blx	r4
}
   b7562:	e7ef      	b.n	b7544 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b7564:	000bb42d 	.word	0x000bb42d
   b7568:	000bb406 	.word	0x000bb406

000b756c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b756c:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b756e:	2000      	movs	r0, #0
   b7570:	f7ff f818 	bl	b65a4 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b7574:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b7578:	bd08      	pop	{r3, pc}

000b757a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b757a:	b919      	cbnz	r1, b7584 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b757c:	460a      	mov	r2, r1
   b757e:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b7580:	f7ff b820 	b.w	b65c4 <hal_ble_gap_set_advertising_data>
   b7584:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7588:	2200      	movs	r2, #0
   b758a:	e7f9      	b.n	b7580 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b758c <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b758c:	6803      	ldr	r3, [r0, #0]
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b758e:	69d8      	ldr	r0, [r3, #28]
}
   b7590:	2800      	cmp	r0, #0
   b7592:	bfd4      	ite	le
   b7594:	2000      	movle	r0, #0
   b7596:	2001      	movgt	r0, #1
   b7598:	4770      	bx	lr

000b759a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b759a:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b759c:	1e14      	subs	r4, r2, #0
   b759e:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b75a0:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b75a2:	db02      	blt.n	b75aa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b75a4:	1862      	adds	r2, r4, r1
   b75a6:	429a      	cmp	r2, r3
   b75a8:	dd00      	ble.n	b75ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b75aa:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b75ac:	682a      	ldr	r2, [r5, #0]
   b75ae:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b75b0:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b75b2:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b75b4:	1a52      	subs	r2, r2, r1
   b75b6:	f003 f877 	bl	ba6a8 <memmove>
    size_ -= n;
   b75ba:	686a      	ldr	r2, [r5, #4]
   b75bc:	1b12      	subs	r2, r2, r4
   b75be:	606a      	str	r2, [r5, #4]
}
   b75c0:	bd38      	pop	{r3, r4, r5, pc}

000b75c2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b75c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b75c4:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b75c6:	4604      	mov	r4, r0
   b75c8:	460d      	mov	r5, r1
   b75ca:	ab01      	add	r3, sp, #4
   b75cc:	e9d0 0100 	ldrd	r0, r1, [r0]
   b75d0:	f7ff fc38 	bl	b6e44 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b75d4:	4602      	mov	r2, r0
   b75d6:	b138      	cbz	r0, b75e8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b75d8:	9901      	ldr	r1, [sp, #4]
   b75da:	4620      	mov	r0, r4
   b75dc:	f7ff ffdd 	bl	b759a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b75e0:	4629      	mov	r1, r5
   b75e2:	4620      	mov	r0, r4
   b75e4:	f7ff ffed 	bl	b75c2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b75e8:	b003      	add	sp, #12
   b75ea:	bd30      	pop	{r4, r5, pc}

000b75ec <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b75ec:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b75ee:	460c      	mov	r4, r1
   b75f0:	b929      	cbnz	r1, b75fe <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b75f2:	460a      	mov	r2, r1
   b75f4:	4608      	mov	r0, r1
}
   b75f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b75fa:	f7fe bfeb 	b.w	b65d4 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b75fe:	2101      	movs	r1, #1
   b7600:	4620      	mov	r0, r4
   b7602:	f7ff ffde 	bl	b75c2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7606:	e9d4 0100 	ldrd	r0, r1, [r4]
   b760a:	2200      	movs	r2, #0
   b760c:	e7f3      	b.n	b75f6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b760e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b760e:	b538      	push	{r3, r4, r5, lr}
   b7610:	4604      	mov	r4, r0
   b7612:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b7614:	f7ff ffb1 	bl	b757a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b7618:	2800      	cmp	r0, #0
   b761a:	db0a      	blt.n	b7632 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b761c:	4629      	mov	r1, r5
   b761e:	4620      	mov	r0, r4
   b7620:	f7ff ffe4 	bl	b75ec <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b7624:	2800      	cmp	r0, #0
   b7626:	db04      	blt.n	b7632 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b7628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b762c:	2000      	movs	r0, #0
   b762e:	f7fe bfd9 	b.w	b65e4 <hal_ble_gap_start_advertising>
}
   b7632:	bd38      	pop	{r3, r4, r5, pc}

000b7634 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b7634:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7636:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7638:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b763a:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b763c:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b763e:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7640:	f7fc fd29 	bl	b4096 <_Znwj>
   b7644:	b118      	cbz	r0, b764e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b7646:	682b      	ldr	r3, [r5, #0]
   b7648:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b764a:	686b      	ldr	r3, [r5, #4]
   b764c:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b764e:	4b03      	ldr	r3, [pc, #12]	; (b765c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b7650:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7652:	4b03      	ldr	r3, [pc, #12]	; (b7660 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7654:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7656:	60a3      	str	r3, [r4, #8]
      }
   b7658:	4620      	mov	r0, r4
   b765a:	bd38      	pop	{r3, r4, r5, pc}
   b765c:	000b6e8d 	.word	0x000b6e8d
   b7660:	000b6ee5 	.word	0x000b6ee5

000b7664 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b7664:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7666:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7668:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b766a:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b766c:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b766e:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7670:	f7fc fd11 	bl	b4096 <_Znwj>
   b7674:	b118      	cbz	r0, b767e <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   b7676:	682b      	ldr	r3, [r5, #0]
   b7678:	6003      	str	r3, [r0, #0]
   b767a:	686b      	ldr	r3, [r5, #4]
   b767c:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b767e:	4b03      	ldr	r3, [pc, #12]	; (b768c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b7680:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7682:	4b03      	ldr	r3, [pc, #12]	; (b7690 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7684:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7686:	60a3      	str	r3, [r4, #8]
      }
   b7688:	4620      	mov	r0, r4
   b768a:	bd38      	pop	{r3, r4, r5, pc}
   b768c:	000b6e81 	.word	0x000b6e81
   b7690:	000b6ea5 	.word	0x000b6ea5

000b7694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b7694:	680b      	ldr	r3, [r1, #0]
   b7696:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b7698:	b113      	cbz	r3, b76a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b769a:	685a      	ldr	r2, [r3, #4]
   b769c:	3201      	adds	r2, #1
   b769e:	605a      	str	r2, [r3, #4]
      }
   b76a0:	4770      	bx	lr

000b76a2 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b76a2:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b76a4:	f851 3b04 	ldr.w	r3, [r1], #4
   b76a8:	4604      	mov	r4, r0
   b76aa:	f840 3b04 	str.w	r3, [r0], #4
   b76ae:	f7ff fff1 	bl	b7694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b76b2:	6823      	ldr	r3, [r4, #0]
   b76b4:	b90b      	cbnz	r3, b76ba <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b76b6:	f7ff fbdb 	bl	b6e70 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b76ba:	4620      	mov	r0, r4
   b76bc:	bd10      	pop	{r4, pc}

000b76be <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b76be:	b510      	push	{r4, lr}
   b76c0:	f851 3b04 	ldr.w	r3, [r1], #4
   b76c4:	4604      	mov	r4, r0
   b76c6:	f840 3b04 	str.w	r3, [r0], #4
   b76ca:	f7ff ffe3 	bl	b7694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b76ce:	4620      	mov	r0, r4
   b76d0:	bd10      	pop	{r4, pc}

000b76d2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b76d2:	b510      	push	{r4, lr}
   b76d4:	f851 3b04 	ldr.w	r3, [r1], #4
   b76d8:	4604      	mov	r4, r0
   b76da:	f840 3b04 	str.w	r3, [r0], #4
   b76de:	f7ff ffd9 	bl	b7694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b76e2:	4620      	mov	r0, r4
   b76e4:	bd10      	pop	{r4, pc}

000b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b76e6:	b510      	push	{r4, lr}
   b76e8:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b76ea:	6800      	ldr	r0, [r0, #0]
   b76ec:	b108      	cbz	r0, b76f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b76ee:	f7ff fc2d 	bl	b6f4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b76f2:	4620      	mov	r0, r4
   b76f4:	bd10      	pop	{r4, pc}

000b76f6 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b76f6:	b510      	push	{r4, lr}
   b76f8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b76fa:	3004      	adds	r0, #4
   b76fc:	f7ff fff3 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7700:	4620      	mov	r0, r4
   b7702:	bd10      	pop	{r4, pc}

000b7704 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7704:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7706:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b770a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b770c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7710:	42ae      	cmp	r6, r5
   b7712:	d004      	beq.n	b771e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b7714:	1d28      	adds	r0, r5, #4
   b7716:	f7ff ffe6 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b771a:	3508      	adds	r5, #8
   b771c:	e7f8      	b.n	b7710 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b771e:	6820      	ldr	r0, [r4, #0]
   b7720:	f7ff fb02 	bl	b6d28 <free>
}
   b7724:	4620      	mov	r0, r4
   b7726:	bd70      	pop	{r4, r5, r6, pc}

000b7728 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7728:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b772a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b772e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7730:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7734:	42ae      	cmp	r6, r5
   b7736:	d004      	beq.n	b7742 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b7738:	1d28      	adds	r0, r5, #4
   b773a:	f7ff ffd4 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b773e:	3508      	adds	r5, #8
   b7740:	e7f8      	b.n	b7734 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7742:	6820      	ldr	r0, [r4, #0]
   b7744:	f7ff faf0 	bl	b6d28 <free>
}
   b7748:	4620      	mov	r0, r4
   b774a:	bd70      	pop	{r4, r5, r6, pc}

000b774c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b774c:	b510      	push	{r4, lr}
   b774e:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b7750:	3024      	adds	r0, #36	; 0x24
   b7752:	f7ff ffe9 	bl	b7728 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7756:	f104 0018 	add.w	r0, r4, #24
   b775a:	f7ff ffd3 	bl	b7704 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b775e:	bd10      	pop	{r4, pc}

000b7760 <__tcf_0>:
    static BleLocalDevice instance;
   b7760:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b7762:	4b15      	ldr	r3, [pc, #84]	; (b77b8 <__tcf_0+0x58>)
   b7764:	681c      	ldr	r4, [r3, #0]
   b7766:	b334      	cbz	r4, b77b6 <__tcf_0+0x56>
    class function<_Res(_ArgTypes...)>
   b7768:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b776c:	f7ff fbda 	bl	b6f24 <_ZNSt14_Function_baseD1Ev>
   b7770:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7774:	f7ff fbd6 	bl	b6f24 <_ZNSt14_Function_baseD1Ev>
   b7778:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b777c:	f7ff fbd2 	bl	b6f24 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b7780:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b7784:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7788:	42ae      	cmp	r6, r5
   b778a:	d004      	beq.n	b7796 <__tcf_0+0x36>
      ~__shared_ptr() = default;
   b778c:	1d28      	adds	r0, r5, #4
   b778e:	f7ff ffaa 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7792:	3508      	adds	r5, #8
   b7794:	e7f8      	b.n	b7788 <__tcf_0+0x28>
    ::free(ptr);
   b7796:	69a0      	ldr	r0, [r4, #24]
   b7798:	f7ff fac6 	bl	b6d28 <free>
    ~BleLocalDeviceImpl() = default;
   b779c:	f104 000c 	add.w	r0, r4, #12
   b77a0:	f7ff ffc2 	bl	b7728 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b77a4:	4620      	mov	r0, r4
   b77a6:	f7ff ffad 	bl	b7704 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b77aa:	4620      	mov	r0, r4
   b77ac:	2154      	movs	r1, #84	; 0x54
    static BleLocalDevice instance;
   b77ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b77b2:	f7fc bc74 	b.w	b409e <_ZdlPvj>
   b77b6:	bd70      	pop	{r4, r5, r6, pc}
   b77b8:	2003e6bc 	.word	0x2003e6bc

000b77bc <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b77bc:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b77be:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b77c0:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b77c4:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b77c8:	6803      	ldr	r3, [r0, #0]
   b77ca:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b77cc:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b77ce:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b77d0:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b77d2:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b77d4:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b77d6:	f7ff ff86 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b77da:	b002      	add	sp, #8
   b77dc:	bd10      	pop	{r4, pc}

000b77de <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b77de:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b77e0:	b510      	push	{r4, lr}
      if (_M_empty())
   b77e2:	b90a      	cbnz	r2, b77e8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b77e4:	f002 f994 	bl	b9b10 <_ZSt25__throw_bad_function_callv>
    }
   b77e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b77ec:	68c3      	ldr	r3, [r0, #12]
   b77ee:	4718      	bx	r3

000b77f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
inline void spark::Vector<T, AllocatorT>::clear() {
   b77f0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b77f2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline void spark::Vector<T, AllocatorT>::clear() {
   b77f6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b77f8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b77fc:	42ae      	cmp	r6, r5
   b77fe:	d004      	beq.n	b780a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
      ~__shared_ptr() = default;
   b7800:	1d28      	adds	r0, r5, #4
   b7802:	f7ff ff70 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7806:	3508      	adds	r5, #8
   b7808:	e7f8      	b.n	b77fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
    size_ = 0;
   b780a:	2300      	movs	r3, #0
   b780c:	6063      	str	r3, [r4, #4]
}
   b780e:	bd70      	pop	{r4, r5, r6, pc}

000b7810 <_ZNK8particle14BleLocalDevice3offEv>:
int BleLocalDevice::off() const {
   b7810:	b513      	push	{r0, r1, r4, lr}
   b7812:	4604      	mov	r4, r0
    CHECK(hal_ble_stack_deinit(nullptr));
   b7814:	2000      	movs	r0, #0
   b7816:	f7fe fecd 	bl	b65b4 <hal_ble_stack_deinit>
   b781a:	2800      	cmp	r0, #0
   b781c:	db0a      	blt.n	b7834 <_ZNK8particle14BleLocalDevice3offEv+0x24>
        WiringBleLock lk;
   b781e:	a801      	add	r0, sp, #4
   b7820:	f7ff fbbe 	bl	b6fa0 <_ZN8particle3ble13WiringBleLockC1Ev>
        return peers_;
   b7824:	6820      	ldr	r0, [r4, #0]
        impl()->peers().clear();
   b7826:	3018      	adds	r0, #24
   b7828:	f7ff ffe2 	bl	b77f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
        WiringBleLock lk;
   b782c:	a801      	add	r0, sp, #4
   b782e:	f7ff fbc5 	bl	b6fbc <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b7832:	2000      	movs	r0, #0
}
   b7834:	b002      	add	sp, #8
   b7836:	bd10      	pop	{r4, pc}

000b7838 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b7838:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b783a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b783c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b783e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7840:	dd03      	ble.n	b784a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b7842:	f7ff fa79 	bl	b6d38 <realloc>
            if (!d) {
   b7846:	b918      	cbnz	r0, b7850 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b7848:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b784a:	f7ff fa6d 	bl	b6d28 <free>
        T* d = nullptr;
   b784e:	2000      	movs	r0, #0
        data_ = d;
   b7850:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7852:	60a5      	str	r5, [r4, #8]
        return true;
   b7854:	2001      	movs	r0, #1
   b7856:	e7f7      	b.n	b7848 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b7858 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b7858:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b785a:	6883      	ldr	r3, [r0, #8]
   b785c:	428b      	cmp	r3, r1
   b785e:	da02      	bge.n	b7866 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b7860:	f7ff ffea 	bl	b7838 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b7864:	bd08      	pop	{r3, pc}
    return true;
   b7866:	2001      	movs	r0, #1
   b7868:	e7fc      	b.n	b7864 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b786a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b786a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b786e:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7870:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7872:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7874:	4419      	add	r1, r3
   b7876:	6883      	ldr	r3, [r0, #8]
   b7878:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b787a:	4604      	mov	r4, r0
   b787c:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b787e:	dc12      	bgt.n	b78a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b7880:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7882:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7884:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7886:	1bd2      	subs	r2, r2, r7
   b7888:	4631      	mov	r1, r6
   b788a:	1970      	adds	r0, r6, r5
   b788c:	f002 ff0c 	bl	ba6a8 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7890:	462a      	mov	r2, r5
   b7892:	4641      	mov	r1, r8
   b7894:	4630      	mov	r0, r6
   b7896:	f002 fef9 	bl	ba68c <memcpy>
    size_ += n;
   b789a:	6863      	ldr	r3, [r4, #4]
   b789c:	442b      	add	r3, r5
   b789e:	6063      	str	r3, [r4, #4]
    return true;
   b78a0:	2001      	movs	r0, #1
}
   b78a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b78a6:	f7ff ffc7 	bl	b7838 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b78aa:	2800      	cmp	r0, #0
   b78ac:	d1e8      	bne.n	b7880 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b78ae:	e7f8      	b.n	b78a2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b78b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b78b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b78b2:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b78b4:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b78b8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b78ba:	4604      	mov	r4, r0
   b78bc:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b78be:	da0b      	bge.n	b78d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b78c0:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b78c2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b78c4:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b78c6:	1b52      	subs	r2, r2, r5
   b78c8:	1c48      	adds	r0, r1, #1
   b78ca:	f002 feed 	bl	ba6a8 <memmove>
    new(p) T(std::move(value));
   b78ce:	557e      	strb	r6, [r7, r5]
    ++size_;
   b78d0:	6863      	ldr	r3, [r4, #4]
   b78d2:	3301      	adds	r3, #1
   b78d4:	6063      	str	r3, [r4, #4]
}
   b78d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b78d8:	3101      	adds	r1, #1
   b78da:	f7ff ffad 	bl	b7838 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b78de:	2800      	cmp	r0, #0
   b78e0:	d1ee      	bne.n	b78c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b78e2:	e7f8      	b.n	b78d6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b78e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b78e4:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b78e6:	6841      	ldr	r1, [r0, #4]
   b78e8:	f7ff bfe2 	b.w	b78b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b78ec <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b78ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b78f0:	4604      	mov	r4, r0
   b78f2:	461d      	mov	r5, r3
   b78f4:	460f      	mov	r7, r1
   b78f6:	ab01      	add	r3, sp, #4
   b78f8:	4690      	mov	r8, r2
   b78fa:	460a      	mov	r2, r1
   b78fc:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7900:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b7904:	f7ff fa9e 	bl	b6e44 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b7908:	1cae      	adds	r6, r5, #2
   b790a:	6863      	ldr	r3, [r4, #4]
   b790c:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b790e:	f1b9 0f00 	cmp.w	r9, #0
   b7912:	d126      	bne.n	b7962 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b7914:	b328      	cbz	r0, b7962 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7916:	4433      	add	r3, r6
   b7918:	1a1b      	subs	r3, r3, r0
   b791a:	2bff      	cmp	r3, #255	; 0xff
   b791c:	d809      	bhi.n	b7932 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b791e:	9901      	ldr	r1, [sp, #4]
   b7920:	4620      	mov	r0, r4
   b7922:	f7ff fe3a 	bl	b759a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7926:	6861      	ldr	r1, [r4, #4]
   b7928:	4620      	mov	r0, r4
   b792a:	4431      	add	r1, r6
   b792c:	f7ff ff94 	bl	b7858 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7930:	b918      	cbnz	r0, b793a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b7932:	6860      	ldr	r0, [r4, #4]
}
   b7934:	b003      	add	sp, #12
   b7936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b793a:	1c6a      	adds	r2, r5, #1
   b793c:	9901      	ldr	r1, [sp, #4]
   b793e:	b2d2      	uxtb	r2, r2
   b7940:	4620      	mov	r0, r4
   b7942:	f7ff ffb5 	bl	b78b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b7946:	9901      	ldr	r1, [sp, #4]
   b7948:	463a      	mov	r2, r7
   b794a:	3101      	adds	r1, #1
   b794c:	4620      	mov	r0, r4
   b794e:	f7ff ffaf 	bl	b78b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b7952:	9901      	ldr	r1, [sp, #4]
   b7954:	462b      	mov	r3, r5
   b7956:	4642      	mov	r2, r8
   b7958:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b795a:	4620      	mov	r0, r4
   b795c:	f7ff ff85 	bl	b786a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7960:	e7e7      	b.n	b7932 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7962:	18f1      	adds	r1, r6, r3
   b7964:	29ff      	cmp	r1, #255	; 0xff
   b7966:	d8e4      	bhi.n	b7932 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7968:	4620      	mov	r0, r4
   b796a:	f7ff ff75 	bl	b7858 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b796e:	2800      	cmp	r0, #0
   b7970:	d0df      	beq.n	b7932 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b7972:	1c69      	adds	r1, r5, #1
   b7974:	b2c9      	uxtb	r1, r1
   b7976:	4620      	mov	r0, r4
   b7978:	f7ff ffb4 	bl	b78e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b797c:	4639      	mov	r1, r7
   b797e:	4620      	mov	r0, r4
   b7980:	f7ff ffb0 	bl	b78e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7984:	6861      	ldr	r1, [r4, #4]
   b7986:	462b      	mov	r3, r5
   b7988:	4642      	mov	r2, r8
   b798a:	e7e6      	b.n	b795a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b798c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b798c:	b430      	push	{r4, r5}
   b798e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b7992:	b11a      	cbz	r2, b799c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b7994:	9502      	str	r5, [sp, #8]
}
   b7996:	bc30      	pop	{r4, r5}
   b7998:	f7ff bfa8 	b.w	b78ec <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b799c:	6840      	ldr	r0, [r0, #4]
}
   b799e:	bc30      	pop	{r4, r5}
   b79a0:	4770      	bx	lr

000b79a2 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b79a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b79a4:	2300      	movs	r3, #0
   b79a6:	e9c0 3300 	strd	r3, r3, [r0]
   b79aa:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b79ac:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b79ae:	9300      	str	r3, [sp, #0]
   b79b0:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b79b2:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b79b6:	4619      	mov	r1, r3
   b79b8:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b79bc:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b79be:	f7ff ffe5 	bl	b798c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b79c2:	4620      	mov	r0, r4
   b79c4:	b004      	add	sp, #16
   b79c6:	bd10      	pop	{r4, pc}

000b79c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b79c8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b79ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b79cc:	4604      	mov	r4, r0
   b79ce:	460d      	mov	r5, r1
   b79d0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b79d2:	d914      	bls.n	b79fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b79d4:	4290      	cmp	r0, r2
   b79d6:	d213      	bcs.n	b7a00 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b79d8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b79dc:	1a75      	subs	r5, r6, r1
   b79de:	f1a1 0708 	sub.w	r7, r1, #8
   b79e2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b79e4:	42b7      	cmp	r7, r6
   b79e6:	d018      	beq.n	b7a1a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b79e8:	b11c      	cbz	r4, b79f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b79ea:	4631      	mov	r1, r6
   b79ec:	4620      	mov	r0, r4
   b79ee:	f7ff fe70 	bl	b76d2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b79f2:	1d30      	adds	r0, r6, #4
   b79f4:	f7ff fe77 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b79f8:	3e08      	subs	r6, #8
   b79fa:	3c08      	subs	r4, #8
   b79fc:	e7f2      	b.n	b79e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b79fe:	d00c      	beq.n	b7a1a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7a00:	42b5      	cmp	r5, r6
   b7a02:	d00a      	beq.n	b7a1a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7a04:	b11c      	cbz	r4, b7a0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7a06:	4629      	mov	r1, r5
   b7a08:	4620      	mov	r0, r4
   b7a0a:	f7ff fe62 	bl	b76d2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7a0e:	1d28      	adds	r0, r5, #4
   b7a10:	f7ff fe69 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7a14:	3508      	adds	r5, #8
   b7a16:	3408      	adds	r4, #8
   b7a18:	e7f2      	b.n	b7a00 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7a1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7a1e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7a20:	6846      	ldr	r6, [r0, #4]
   b7a22:	4668      	mov	r0, sp
   b7a24:	f7ff fe55 	bl	b76d2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7a28:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7a2c:	429f      	cmp	r7, r3
   b7a2e:	db12      	blt.n	b7a56 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7a30:	3701      	adds	r7, #1
        if (n > 0) {
   b7a32:	2f00      	cmp	r7, #0
   b7a34:	dd29      	ble.n	b7a8a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b7a36:	00f8      	lsls	r0, r7, #3
   b7a38:	f7ff f96e 	bl	b6d18 <malloc>
            if (!d) {
   b7a3c:	4605      	mov	r5, r0
   b7a3e:	b1f0      	cbz	r0, b7a7e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7a40:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7a44:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7a48:	f7ff ffbe 	bl	b79c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7a4c:	6820      	ldr	r0, [r4, #0]
   b7a4e:	f7ff f96b 	bl	b6d28 <free>
        data_ = d;
   b7a52:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7a54:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7a56:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7a58:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7a5a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7a5e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7a62:	4631      	mov	r1, r6
   b7a64:	f106 0008 	add.w	r0, r6, #8
   b7a68:	f7ff ffae 	bl	b79c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7a6c:	b11e      	cbz	r6, b7a76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7a6e:	4669      	mov	r1, sp
   b7a70:	4630      	mov	r0, r6
   b7a72:	f7ff fe2e 	bl	b76d2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b7a76:	6863      	ldr	r3, [r4, #4]
   b7a78:	3301      	adds	r3, #1
   b7a7a:	6063      	str	r3, [r4, #4]
    return true;
   b7a7c:	2501      	movs	r5, #1
   b7a7e:	a801      	add	r0, sp, #4
   b7a80:	f7ff fe31 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7a84:	4628      	mov	r0, r5
   b7a86:	b003      	add	sp, #12
   b7a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7a8a:	2500      	movs	r5, #0
   b7a8c:	e7de      	b.n	b7a4c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b7a8e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7a90:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7a94:	4605      	mov	r5, r0
   b7a96:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b7a98:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7a9c:	42a6      	cmp	r6, r4
   b7a9e:	d005      	beq.n	b7aac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b7aa0:	4639      	mov	r1, r7
   b7aa2:	4620      	mov	r0, r4
   b7aa4:	f7ff fcc7 	bl	b7436 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b7aa8:	b108      	cbz	r0, b7aae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b7aaa:	b914      	cbnz	r4, b7ab2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b7aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b7aae:	3408      	adds	r4, #8
   b7ab0:	e7f4      	b.n	b7a9c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b7ab2:	1d20      	adds	r0, r4, #4
   b7ab4:	f7ff fe17 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b7ab8:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7abc:	f104 0108 	add.w	r1, r4, #8
   b7ac0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7ac4:	4620      	mov	r0, r4
   b7ac6:	f7ff ff7f 	bl	b79c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b7aca:	686b      	ldr	r3, [r5, #4]
   b7acc:	3b01      	subs	r3, #1
   b7ace:	606b      	str	r3, [r5, #4]
    return true;
   b7ad0:	e7ec      	b.n	b7aac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b7ad4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7ad8:	4605      	mov	r5, r0
   b7ada:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7adc:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7ade:	460c      	mov	r4, r1
        WiringBleLock lk;
   b7ae0:	f7ff fa5e 	bl	b6fa0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7ae4:	682e      	ldr	r6, [r5, #0]
   b7ae6:	2e04      	cmp	r6, #4
   b7ae8:	d075      	beq.n	b7bd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
   b7aea:	d807      	bhi.n	b7afc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   b7aec:	2e03      	cmp	r6, #3
   b7aee:	d032      	beq.n	b7b56 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x82>
        WiringBleLock lk;
   b7af0:	a803      	add	r0, sp, #12
   b7af2:	f7ff fa63 	bl	b6fbc <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7af6:	b00e      	add	sp, #56	; 0x38
   b7af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   b7afc:	f1a6 030c 	sub.w	r3, r6, #12
   b7b00:	2b04      	cmp	r3, #4
   b7b02:	d8f5      	bhi.n	b7af0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7b04:	89a9      	ldrh	r1, [r5, #12]
   b7b06:	4620      	mov	r0, r4
   b7b08:	f7ff fba2 	bl	b7250 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7b0c:	2800      	cmp	r0, #0
   b7b0e:	d0ef      	beq.n	b7af0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   b7b10:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7b12:	2b00      	cmp	r3, #0
   b7b14:	d0ec      	beq.n	b7af0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEventPayload payload = {};
   b7b16:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7b18:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7b1a:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7b1e:	d002      	beq.n	b7b26 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x52>
   b7b20:	2e10      	cmp	r6, #16
   b7b22:	f040 80a0 	bne.w	b7c66 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x192>
                        BlePairingEventPayload payload = {};
   b7b26:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b7b28:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b7b2a:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7b2c:	2506      	movs	r5, #6
                        };
   b7b2e:	f88d 3015 	strb.w	r3, [sp, #21]
   b7b32:	9104      	str	r1, [sp, #16]
   b7b34:	f88d 2014 	strb.w	r2, [sp, #20]
   b7b38:	9006      	str	r0, [sp, #24]
   b7b3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b7b3e:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7b40:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7b44:	9508      	str	r5, [sp, #32]
   b7b46:	e883 0003 	stmia.w	r3, {r0, r1}
   b7b4a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7b4c:	a906      	add	r1, sp, #24
   b7b4e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7b52:	4798      	blx	r3
   b7b54:	e7cc      	b.n	b7af0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   b7b56:	a804      	add	r0, sp, #16
   b7b58:	f7ff fc26 	bl	b73a8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b7b5c:	9b04      	ldr	r3, [sp, #16]
   b7b5e:	89aa      	ldrh	r2, [r5, #12]
   b7b60:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b7b62:	6869      	ldr	r1, [r5, #4]
   b7b64:	9804      	ldr	r0, [sp, #16]
   b7b66:	3108      	adds	r1, #8
   b7b68:	3002      	adds	r0, #2
   b7b6a:	f7ff fa33 	bl	b6fd4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7b6e:	a904      	add	r1, sp, #16
   b7b70:	a806      	add	r0, sp, #24
   b7b72:	f7ff fdae 	bl	b76d2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b7b76:	a906      	add	r1, sp, #24
   b7b78:	f104 0018 	add.w	r0, r4, #24
   b7b7c:	f7ff ff4e 	bl	b7a1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b7b80:	4605      	mov	r5, r0
   b7b82:	a807      	add	r0, sp, #28
   b7b84:	f7ff fdaf 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7b88:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b7b8a:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b7b8c:	b98d      	cbnz	r5, b7bb2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xde>
                    LOG(ERROR, "Failed to append peer Central device.");
   b7b8e:	4b3d      	ldr	r3, [pc, #244]	; (b7c84 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b0>)
   b7b90:	493d      	ldr	r1, [pc, #244]	; (b7c88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b4>)
   b7b92:	9300      	str	r3, [sp, #0]
   b7b94:	2032      	movs	r0, #50	; 0x32
   b7b96:	462b      	mov	r3, r5
   b7b98:	aa06      	add	r2, sp, #24
   b7b9a:	9507      	str	r5, [sp, #28]
   b7b9c:	f7fe ffa4 	bl	b6ae8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b7ba0:	9b04      	ldr	r3, [sp, #16]
   b7ba2:	4629      	mov	r1, r5
   b7ba4:	8818      	ldrh	r0, [r3, #0]
   b7ba6:	f7fe fd25 	bl	b65f4 <hal_ble_gap_disconnect>
   b7baa:	a805      	add	r0, sp, #20
   b7bac:	f7ff fd9b 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7bb0:	e79e      	b.n	b7af0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   b7bb2:	4a36      	ldr	r2, [pc, #216]	; (b7c8c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b8>)
   b7bb4:	9200      	str	r2, [sp, #0]
   b7bb6:	2300      	movs	r3, #0
   b7bb8:	4933      	ldr	r1, [pc, #204]	; (b7c88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b4>)
   b7bba:	9307      	str	r3, [sp, #28]
   b7bbc:	aa06      	add	r2, sp, #24
   b7bbe:	2001      	movs	r0, #1
   b7bc0:	f7fe ff92 	bl	b6ae8 <log_message>
                if (impl->connectedCallback_) {
   b7bc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7bc6:	2b00      	cmp	r3, #0
   b7bc8:	d0ef      	beq.n	b7baa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd6>
                    impl->connectedCallback_(peer);
   b7bca:	a904      	add	r1, sp, #16
   b7bcc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7bd0:	f7ff fe05 	bl	b77de <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7bd4:	e7e9      	b.n	b7baa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd6>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7bd6:	89a9      	ldrh	r1, [r5, #12]
   b7bd8:	4620      	mov	r0, r4
   b7bda:	f7ff fb39 	bl	b7250 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7bde:	4606      	mov	r6, r0
   b7be0:	2800      	cmp	r0, #0
   b7be2:	d085      	beq.n	b7af0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
      { return _M_ptr; }
   b7be4:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b7be6:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b7bea:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7bee:	8029      	strh	r1, [r5, #0]
   b7bf0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7bf4:	429a      	cmp	r2, r3
   b7bf6:	d003      	beq.n	b7c00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   b7bf8:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7bfc:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b7bfe:	e7f9      	b.n	b7bf4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    destruct(data_, data_ + size_);
   b7c00:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b7c04:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7c08:	45b8      	cmp	r8, r7
   b7c0a:	d004      	beq.n	b7c16 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x142>
      ~__shared_ptr() = default;
   b7c0c:	1d38      	adds	r0, r7, #4
   b7c0e:	f7ff fd6a 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7c12:	3708      	adds	r7, #8
   b7c14:	e7f8      	b.n	b7c08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x134>
    size_ = 0;
   b7c16:	2300      	movs	r3, #0
   b7c18:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b7c1a:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b7c1e:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7c22:	45b8      	cmp	r8, r7
   b7c24:	d004      	beq.n	b7c30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
   b7c26:	1d38      	adds	r0, r7, #4
   b7c28:	f7ff fd5d 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7c2c:	3708      	adds	r7, #8
   b7c2e:	e7f8      	b.n	b7c22 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14e>
    size_ = 0;
   b7c30:	2300      	movs	r3, #0
   b7c32:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7c34:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b7c36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7c38:	b123      	cbz	r3, b7c44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x170>
                        impl->disconnectedCallback_(*peer);
   b7c3a:	4631      	mov	r1, r6
   b7c3c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7c40:	f7ff fdcd 	bl	b77de <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b7c44:	2300      	movs	r3, #0
   b7c46:	2220      	movs	r2, #32
   b7c48:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7c4c:	4a10      	ldr	r2, [pc, #64]	; (b7c90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1bc>)
   b7c4e:	9200      	str	r2, [sp, #0]
   b7c50:	490d      	ldr	r1, [pc, #52]	; (b7c88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b4>)
   b7c52:	aa06      	add	r2, sp, #24
   b7c54:	2001      	movs	r0, #1
   b7c56:	f7fe ff47 	bl	b6ae8 <log_message>
                    impl->peers_.removeOne(*peer);
   b7c5a:	4631      	mov	r1, r6
   b7c5c:	f104 0018 	add.w	r0, r4, #24
   b7c60:	f7ff ff15 	bl	b7a8e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b7c64:	e744      	b.n	b7af0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7c66:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7c68:	bf01      	itttt	eq
   b7c6a:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b7c6c:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7c6e:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b7c72:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7c74:	bf0f      	iteee	eq
   b7c76:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b7c7a:	461a      	movne	r2, r3
   b7c7c:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b7c7e:	461d      	movne	r5, r3
   b7c80:	e755      	b.n	b7b2e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x5a>
   b7c82:	bf00      	nop
   b7c84:	000bb445 	.word	0x000bb445
   b7c88:	000bb406 	.word	0x000bb406
   b7c8c:	000bb46b 	.word	0x000bb46b
   b7c90:	000bb488 	.word	0x000bb488

000b7c94 <_ZNK8particle13BlePeerDevice10disconnectEv>:
int BlePeerDevice::disconnect() const {
   b7c94:	b513      	push	{r0, r1, r4, lr}
   b7c96:	4604      	mov	r4, r0
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b7c98:	f7ff fba8 	bl	b73ec <_ZNK8particle13BlePeerDevice9connectedEv>
   b7c9c:	b1d0      	cbz	r0, b7cd4 <_ZNK8particle13BlePeerDevice10disconnectEv+0x40>
    CHECK(hal_ble_gap_disconnect(impl()->connHandle(), nullptr));
   b7c9e:	6823      	ldr	r3, [r4, #0]
   b7ca0:	2100      	movs	r1, #0
   b7ca2:	8818      	ldrh	r0, [r3, #0]
   b7ca4:	f7fe fca6 	bl	b65f4 <hal_ble_gap_disconnect>
   b7ca8:	2800      	cmp	r0, #0
   b7caa:	db11      	blt.n	b7cd0 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
        WiringBleLock lk;
   b7cac:	a801      	add	r0, sp, #4
   b7cae:	f7ff f977 	bl	b6fa0 <_ZN8particle3ble13WiringBleLockC1Ev>
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b7cb2:	f7ff fc11 	bl	b74d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b7cb6:	6800      	ldr	r0, [r0, #0]
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b7cb8:	4621      	mov	r1, r4
   b7cba:	3018      	adds	r0, #24
   b7cbc:	f7ff fee7 	bl	b7a8e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
      { return _M_ptr; }
   b7cc0:	6823      	ldr	r3, [r4, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b7cc6:	801a      	strh	r2, [r3, #0]
        WiringBleLock lk;
   b7cc8:	a801      	add	r0, sp, #4
   b7cca:	f7ff f977 	bl	b6fbc <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b7cce:	2000      	movs	r0, #0
}
   b7cd0:	b002      	add	sp, #8
   b7cd2:	bd10      	pop	{r4, pc}
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b7cd4:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7cd8:	e7fa      	b.n	b7cd0 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
	...

000b7cdc <_ZNK8particle14BleLocalDevice13disconnectAllEv>:

int BleLocalDevice::disconnect(const BlePeerDevice& peer) const {
    return peer.disconnect();
}

int BleLocalDevice::disconnectAll() const {
   b7cdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7ce0:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7ce2:	a801      	add	r0, sp, #4
   b7ce4:	f7ff f95c 	bl	b6fa0 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7ce8:	6823      	ldr	r3, [r4, #0]
   b7cea:	4e10      	ldr	r6, [pc, #64]	; (b7d2c <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x50>)
    return data_ + size_;
   b7cec:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
        locked_ = false;
   b7cf0:	f04f 0800 	mov.w	r8, #0
   b7cf4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
        locked_ = true;
   b7cf8:	2701      	movs	r7, #1
    for (auto& p : impl()->peers()) {
   b7cfa:	42ac      	cmp	r4, r5
   b7cfc:	d00e      	beq.n	b7d1c <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x40>
   b7cfe:	6830      	ldr	r0, [r6, #0]
   b7d00:	f7fe fce2 	bl	b66c8 <os_mutex_recursive_unlock>
        lk.unlock();
        p.disconnect();
   b7d04:	4620      	mov	r0, r4
        locked_ = false;
   b7d06:	f88d 8004 	strb.w	r8, [sp, #4]
        p.disconnect();
   b7d0a:	f7ff ffc3 	bl	b7c94 <_ZNK8particle13BlePeerDevice10disconnectEv>
    void lock() { os_mutex_recursive_lock(handle_); }
   b7d0e:	6830      	ldr	r0, [r6, #0]
   b7d10:	f7fe fcd2 	bl	b66b8 <os_mutex_recursive_lock>
        locked_ = true;
   b7d14:	3408      	adds	r4, #8
   b7d16:	f88d 7004 	strb.w	r7, [sp, #4]
    for (auto& p : impl()->peers()) {
   b7d1a:	e7ee      	b.n	b7cfa <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x1e>
    WiringBleLock lk;
   b7d1c:	a801      	add	r0, sp, #4
   b7d1e:	f7ff f94d 	bl	b6fbc <_ZN8particle3ble13WiringBleLockD1Ev>
        lk.lock();
    }
    return SYSTEM_ERROR_NONE;
}
   b7d22:	2000      	movs	r0, #0
   b7d24:	b002      	add	sp, #8
   b7d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7d2a:	bf00      	nop
   b7d2c:	2003e6b8 	.word	0x2003e6b8

000b7d30 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b7d30:	b513      	push	{r0, r1, r4, lr}
   b7d32:	460b      	mov	r3, r1
   b7d34:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7d36:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7d3a:	466c      	mov	r4, sp
   b7d3c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7d40:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7d44:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7d48:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7d4c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7d50:	b002      	add	sp, #8
   b7d52:	bd10      	pop	{r4, pc}

000b7d54 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b7d54:	b538      	push	{r3, r4, r5, lr}
   b7d56:	4605      	mov	r5, r0
   b7d58:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7d5a:	f7ff ffe9 	bl	b7d30 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7d5e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7d60:	68a2      	ldr	r2, [r4, #8]
   b7d62:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7d64:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7d66:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7d68:	68e2      	ldr	r2, [r4, #12]
   b7d6a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7d6c:	60e3      	str	r3, [r4, #12]
      }
   b7d6e:	bd38      	pop	{r3, r4, r5, pc}

000b7d70 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7d70:	b570      	push	{r4, r5, r6, lr}
   b7d72:	4604      	mov	r4, r0
   b7d74:	b08c      	sub	sp, #48	; 0x30
   b7d76:	460e      	mov	r6, r1
   b7d78:	9201      	str	r2, [sp, #4]
   b7d7a:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b7d7c:	f7ff fa48 	bl	b7210 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b7d80:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b7d82:	9901      	ldr	r1, [sp, #4]
   b7d84:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7d88:	f000 fe59 	bl	b8a3e <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7d8c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b7d90:	b1cd      	cbz	r5, b7dc6 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b7d92:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7d94:	9502      	str	r5, [sp, #8]
   b7d96:	a902      	add	r1, sp, #8
   b7d98:	a804      	add	r0, sp, #16
   b7d9a:	9303      	str	r3, [sp, #12]
   b7d9c:	f7ff fc4a 	bl	b7634 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7da0:	2300      	movs	r3, #0
	__x.swap(*this);
   b7da2:	a908      	add	r1, sp, #32
   b7da4:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b7da6:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b7da8:	f7ff ffd4 	bl	b7d54 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7dac:	4631      	mov	r1, r6
   b7dae:	a808      	add	r0, sp, #32
   b7db0:	f7ff ffd0 	bl	b7d54 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7db4:	a808      	add	r0, sp, #32
   b7db6:	f7ff f8b5 	bl	b6f24 <_ZNSt14_Function_baseD1Ev>
   b7dba:	a804      	add	r0, sp, #16
   b7dbc:	f7ff f8b2 	bl	b6f24 <_ZNSt14_Function_baseD1Ev>
    }
   b7dc0:	4620      	mov	r0, r4
   b7dc2:	b00c      	add	sp, #48	; 0x30
   b7dc4:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7dc6:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7dc8:	e7ea      	b.n	b7da0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b7dcc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b7dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7dd0:	b087      	sub	sp, #28
   b7dd2:	461d      	mov	r5, r3
   b7dd4:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b7dd8:	4680      	mov	r8, r0
   b7dda:	468b      	mov	fp, r1
   b7ddc:	4692      	mov	sl, r2
   b7dde:	9912      	ldr	r1, [sp, #72]	; 0x48
   b7de0:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7de2:	2200      	movs	r2, #0
   b7de4:	2068      	movs	r0, #104	; 0x68
   b7de6:	9102      	str	r1, [sp, #8]
   b7de8:	9204      	str	r2, [sp, #16]
   b7dea:	f7fc f954 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7dee:	1e06      	subs	r6, r0, #0
   b7df0:	f106 090c 	add.w	r9, r6, #12
   b7df4:	d018      	beq.n	b7e28 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b7df6:	2201      	movs	r2, #1
	: _M_impl(__a)
   b7df8:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b7dfa:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b7dfe:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b7e00:	4a14      	ldr	r2, [pc, #80]	; (b7e54 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x88>)
   b7e02:	f847 2b20 	str.w	r2, [r7], #32
   b7e06:	9b03      	ldr	r3, [sp, #12]
   b7e08:	9100      	str	r1, [sp, #0]
   b7e0a:	465a      	mov	r2, fp
   b7e0c:	4651      	mov	r1, sl
   b7e0e:	4648      	mov	r0, r9
   b7e10:	f7ff ffae 	bl	b7d70 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b7e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7e16:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b7e18:	682b      	ldr	r3, [r5, #0]
   b7e1a:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b7e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7e1e:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b7e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7e24:	6823      	ldr	r3, [r4, #0]
   b7e26:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b7e28:	a904      	add	r1, sp, #16
   b7e2a:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b7e2c:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b7e30:	f7ff fcc4 	bl	b77bc <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b7e34:	a805      	add	r0, sp, #20
   b7e36:	f7ff fc56 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b7e3a:	f8d8 1000 	ldr.w	r1, [r8]
   b7e3e:	b931      	cbnz	r1, b7e4e <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x82>
        SPARK_ASSERT(false);
   b7e40:	4a05      	ldr	r2, [pc, #20]	; (b7e58 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b7e42:	200a      	movs	r0, #10
}
   b7e44:	b007      	add	sp, #28
   b7e46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b7e4a:	f7fe be45 	b.w	b6ad8 <panic_>
}
   b7e4e:	b007      	add	sp, #28
   b7e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7e54:	000bb504 	.word	0x000bb504
   b7e58:	000b66f9 	.word	0x000b66f9

000b7e5c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b7e5c:	b538      	push	{r3, r4, r5, lr}
   b7e5e:	4605      	mov	r5, r0
   b7e60:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7e62:	f7ff ff65 	bl	b7d30 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7e66:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7e68:	68a2      	ldr	r2, [r4, #8]
   b7e6a:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7e6c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7e6e:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7e70:	68e2      	ldr	r2, [r4, #12]
   b7e72:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7e74:	60e3      	str	r3, [r4, #12]
      }
   b7e76:	bd38      	pop	{r3, r4, r5, pc}

000b7e78 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b7e78:	b510      	push	{r4, lr}
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b7e7a:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b7e7c:	b08a      	sub	sp, #40	; 0x28
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b7e7e:	3434      	adds	r4, #52	; 0x34
   b7e80:	b1b9      	cbz	r1, b7eb2 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b7e82:	e9cd 1200 	strd	r1, r2, [sp]
   b7e86:	a802      	add	r0, sp, #8
   b7e88:	4669      	mov	r1, sp
   b7e8a:	f7ff fbeb 	bl	b7664 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7e8e:	2300      	movs	r3, #0
	__x.swap(*this);
   b7e90:	a906      	add	r1, sp, #24
   b7e92:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7e94:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7e96:	f7ff ffe1 	bl	b7e5c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b7e9a:	4621      	mov	r1, r4
   b7e9c:	a806      	add	r0, sp, #24
   b7e9e:	f7ff ffdd 	bl	b7e5c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b7ea2:	a806      	add	r0, sp, #24
   b7ea4:	f7ff f83e 	bl	b6f24 <_ZNSt14_Function_baseD1Ev>
   b7ea8:	a802      	add	r0, sp, #8
   b7eaa:	f7ff f83b 	bl	b6f24 <_ZNSt14_Function_baseD1Ev>
}
   b7eae:	b00a      	add	sp, #40	; 0x28
   b7eb0:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7eb2:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7eb4:	e7eb      	b.n	b7e8e <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b7eb6 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7eb6:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7eb8:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7eba:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7ebc:	3424      	adds	r4, #36	; 0x24
   b7ebe:	b1b9      	cbz	r1, b7ef0 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b7ec0:	e9cd 1200 	strd	r1, r2, [sp]
   b7ec4:	a802      	add	r0, sp, #8
   b7ec6:	4669      	mov	r1, sp
   b7ec8:	f7ff fbcc 	bl	b7664 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7ecc:	2300      	movs	r3, #0
	__x.swap(*this);
   b7ece:	a906      	add	r1, sp, #24
   b7ed0:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7ed2:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7ed4:	f7ff ffc2 	bl	b7e5c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b7ed8:	4621      	mov	r1, r4
   b7eda:	a806      	add	r0, sp, #24
   b7edc:	f7ff ffbe 	bl	b7e5c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b7ee0:	a806      	add	r0, sp, #24
   b7ee2:	f7ff f81f 	bl	b6f24 <_ZNSt14_Function_baseD1Ev>
   b7ee6:	a802      	add	r0, sp, #8
   b7ee8:	f7ff f81c 	bl	b6f24 <_ZNSt14_Function_baseD1Ev>
}
   b7eec:	b00a      	add	sp, #40	; 0x28
   b7eee:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7ef0:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7ef2:	e7eb      	b.n	b7ecc <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b7ef4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7ef4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7ef8:	4604      	mov	r4, r0
   b7efa:	460d      	mov	r5, r1
   b7efc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7efe:	d914      	bls.n	b7f2a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7f00:	4290      	cmp	r0, r2
   b7f02:	d213      	bcs.n	b7f2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7f04:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7f08:	1a75      	subs	r5, r6, r1
   b7f0a:	f1a1 0708 	sub.w	r7, r1, #8
   b7f0e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7f10:	42b7      	cmp	r7, r6
   b7f12:	d018      	beq.n	b7f46 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7f14:	b11c      	cbz	r4, b7f1e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7f16:	4631      	mov	r1, r6
   b7f18:	4620      	mov	r0, r4
   b7f1a:	f7ff fbd0 	bl	b76be <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7f1e:	1d30      	adds	r0, r6, #4
   b7f20:	f7ff fbe1 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7f24:	3e08      	subs	r6, #8
   b7f26:	3c08      	subs	r4, #8
   b7f28:	e7f2      	b.n	b7f10 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7f2a:	d00c      	beq.n	b7f46 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7f2c:	42b5      	cmp	r5, r6
   b7f2e:	d00a      	beq.n	b7f46 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7f30:	b11c      	cbz	r4, b7f3a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7f32:	4629      	mov	r1, r5
   b7f34:	4620      	mov	r0, r4
   b7f36:	f7ff fbc2 	bl	b76be <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7f3a:	1d28      	adds	r0, r5, #4
   b7f3c:	f7ff fbd3 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7f40:	3508      	adds	r5, #8
   b7f42:	3408      	adds	r4, #8
   b7f44:	e7f2      	b.n	b7f2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7f48 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7f48:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7f4a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7f4c:	4605      	mov	r5, r0
        if (n > 0) {
   b7f4e:	dd11      	ble.n	b7f74 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7f50:	00f0      	lsls	r0, r6, #3
   b7f52:	f7fe fee1 	bl	b6d18 <malloc>
            if (!d) {
   b7f56:	4604      	mov	r4, r0
   b7f58:	b158      	cbz	r0, b7f72 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7f5a:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7f5e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7f62:	f7ff ffc7 	bl	b7ef4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7f66:	6828      	ldr	r0, [r5, #0]
   b7f68:	f7fe fede 	bl	b6d28 <free>
        data_ = d;
   b7f6c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7f6e:	60ae      	str	r6, [r5, #8]
        return true;
   b7f70:	2001      	movs	r0, #1
    }
   b7f72:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7f74:	2400      	movs	r4, #0
   b7f76:	e7f6      	b.n	b7f66 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7f78 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7f78:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7f7a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7f7c:	6845      	ldr	r5, [r0, #4]
   b7f7e:	4668      	mov	r0, sp
   b7f80:	f7ff fb9d 	bl	b76be <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7f84:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7f88:	4299      	cmp	r1, r3
   b7f8a:	da10      	bge.n	b7fae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7f8c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7f8e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7f90:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7f94:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7f98:	4629      	mov	r1, r5
   b7f9a:	f105 0008 	add.w	r0, r5, #8
   b7f9e:	f7ff ffa9 	bl	b7ef4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7fa2:	b98d      	cbnz	r5, b7fc8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7fa4:	6863      	ldr	r3, [r4, #4]
   b7fa6:	3301      	adds	r3, #1
   b7fa8:	6063      	str	r3, [r4, #4]
    return true;
   b7faa:	2601      	movs	r6, #1
   b7fac:	e006      	b.n	b7fbc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7fae:	3101      	adds	r1, #1
   b7fb0:	4620      	mov	r0, r4
   b7fb2:	f7ff ffc9 	bl	b7f48 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7fb6:	4606      	mov	r6, r0
   b7fb8:	2800      	cmp	r0, #0
   b7fba:	d1e7      	bne.n	b7f8c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7fbc:	a801      	add	r0, sp, #4
   b7fbe:	f7ff fb92 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7fc2:	4630      	mov	r0, r6
   b7fc4:	b002      	add	sp, #8
   b7fc6:	bd70      	pop	{r4, r5, r6, pc}
   b7fc8:	4669      	mov	r1, sp
   b7fca:	4628      	mov	r0, r5
   b7fcc:	f7ff fb77 	bl	b76be <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7fd0:	e7e8      	b.n	b7fa4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7fd2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7fd2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7fd6:	4604      	mov	r4, r0
   b7fd8:	460d      	mov	r5, r1
   b7fda:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7fdc:	d914      	bls.n	b8008 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7fde:	4290      	cmp	r0, r2
   b7fe0:	d213      	bcs.n	b800a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7fe2:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7fe6:	1a75      	subs	r5, r6, r1
   b7fe8:	f1a1 0708 	sub.w	r7, r1, #8
   b7fec:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7fee:	42b7      	cmp	r7, r6
   b7ff0:	d018      	beq.n	b8024 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7ff2:	b11c      	cbz	r4, b7ffc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7ff4:	4631      	mov	r1, r6
   b7ff6:	4620      	mov	r0, r4
   b7ff8:	f7ff fb53 	bl	b76a2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7ffc:	1d30      	adds	r0, r6, #4
   b7ffe:	f7ff fb72 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8002:	3e08      	subs	r6, #8
   b8004:	3c08      	subs	r4, #8
   b8006:	e7f2      	b.n	b7fee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8008:	d00c      	beq.n	b8024 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b800a:	42b5      	cmp	r5, r6
   b800c:	d00a      	beq.n	b8024 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b800e:	b11c      	cbz	r4, b8018 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8010:	4629      	mov	r1, r5
   b8012:	4620      	mov	r0, r4
   b8014:	f7ff fb45 	bl	b76a2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8018:	1d28      	adds	r0, r5, #4
   b801a:	f7ff fb64 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b801e:	3508      	adds	r5, #8
   b8020:	3408      	adds	r4, #8
   b8022:	e7f2      	b.n	b800a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8026 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8026:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8028:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b802a:	4605      	mov	r5, r0
        if (n > 0) {
   b802c:	dd11      	ble.n	b8052 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b802e:	00f0      	lsls	r0, r6, #3
   b8030:	f7fe fe72 	bl	b6d18 <malloc>
            if (!d) {
   b8034:	4604      	mov	r4, r0
   b8036:	b158      	cbz	r0, b8050 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8038:	e9d5 1200 	ldrd	r1, r2, [r5]
   b803c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8040:	f7ff ffc7 	bl	b7fd2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8044:	6828      	ldr	r0, [r5, #0]
   b8046:	f7fe fe6f 	bl	b6d28 <free>
        data_ = d;
   b804a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b804c:	60ae      	str	r6, [r5, #8]
        return true;
   b804e:	2001      	movs	r0, #1
    }
   b8050:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8052:	2400      	movs	r4, #0
   b8054:	e7f6      	b.n	b8044 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8056 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8056:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8058:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b805a:	6845      	ldr	r5, [r0, #4]
   b805c:	4668      	mov	r0, sp
   b805e:	f7ff fb20 	bl	b76a2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8062:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8066:	4299      	cmp	r1, r3
   b8068:	da10      	bge.n	b808c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b806a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b806c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b806e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8072:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8076:	4629      	mov	r1, r5
   b8078:	f105 0008 	add.w	r0, r5, #8
   b807c:	f7ff ffa9 	bl	b7fd2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8080:	b98d      	cbnz	r5, b80a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8082:	6863      	ldr	r3, [r4, #4]
   b8084:	3301      	adds	r3, #1
   b8086:	6063      	str	r3, [r4, #4]
    return true;
   b8088:	2601      	movs	r6, #1
   b808a:	e006      	b.n	b809a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b808c:	3101      	adds	r1, #1
   b808e:	4620      	mov	r0, r4
   b8090:	f7ff ffc9 	bl	b8026 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8094:	4606      	mov	r6, r0
   b8096:	2800      	cmp	r0, #0
   b8098:	d1e7      	bne.n	b806a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b809a:	a801      	add	r0, sp, #4
   b809c:	f7ff fb23 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b80a0:	4630      	mov	r0, r6
   b80a2:	b002      	add	sp, #8
   b80a4:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b80a6:	4669      	mov	r1, sp
   b80a8:	4628      	mov	r0, r5
   b80aa:	f7ff fafa 	bl	b76a2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b80ae:	e7e8      	b.n	b8082 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b80b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b80b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b80b4:	4617      	mov	r7, r2
   b80b6:	b0a1      	sub	sp, #132	; 0x84
   b80b8:	4680      	mov	r8, r0
    WiringBleLock lk;
   b80ba:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b80bc:	460e      	mov	r6, r1
    WiringBleLock lk;
   b80be:	f7fe ff6f 	bl	b6fa0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b80c2:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b80c4:	7923      	ldrb	r3, [r4, #4]
   b80c6:	b953      	cbnz	r3, b80de <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b80c8:	4639      	mov	r1, r7
   b80ca:	4640      	mov	r0, r8
   b80cc:	f7ff fae9 	bl	b76a2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b80d0:	a80a      	add	r0, sp, #40	; 0x28
   b80d2:	f7fe ff73 	bl	b6fbc <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b80d6:	4640      	mov	r0, r8
   b80d8:	b021      	add	sp, #132	; 0x84
   b80da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b80de:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b80e0:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b80e4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b80e8:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b80ea:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b80ee:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b80f2:	9b03      	ldr	r3, [sp, #12]
   b80f4:	429d      	cmp	r5, r3
   b80f6:	d021      	beq.n	b813c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b80f8:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b80fc:	4658      	mov	r0, fp
   b80fe:	f109 0114 	add.w	r1, r9, #20
   b8102:	f7fe fffa 	bl	b70fa <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b8106:	b1b8      	cbz	r0, b8138 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b8108:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b810c:	4650      	mov	r0, sl
   b810e:	f7fe fff4 	bl	b70fa <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b8112:	b188      	cbz	r0, b8138 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b8114:	6823      	ldr	r3, [r4, #0]
   b8116:	f8d9 2000 	ldr.w	r2, [r9]
   b811a:	4053      	eors	r3, r2
   b811c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b8120:	d10a      	bne.n	b8138 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b8122:	2220      	movs	r2, #32
   b8124:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b8128:	4a5e      	ldr	r2, [pc, #376]	; (b82a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b812a:	9200      	str	r2, [sp, #0]
   b812c:	aa15      	add	r2, sp, #84	; 0x54
   b812e:	495e      	ldr	r1, [pc, #376]	; (b82a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b8130:	2032      	movs	r0, #50	; 0x32
   b8132:	f7fe fcd9 	bl	b6ae8 <log_message>
   b8136:	e7c7      	b.n	b80c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b8138:	3508      	adds	r5, #8
   b813a:	e7da      	b.n	b80f2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b813c:	4650      	mov	r0, sl
   b813e:	f7fe ffad 	bl	b709c <_ZNK8particle7BleUuid7isValidEv>
   b8142:	b960      	cbnz	r0, b815e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b8144:	4959      	ldr	r1, [pc, #356]	; (b82ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b8146:	2201      	movs	r2, #1
   b8148:	a815      	add	r0, sp, #84	; 0x54
   b814a:	ad15      	add	r5, sp, #84	; 0x54
   b814c:	f7fe ff7e 	bl	b704c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b8150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8152:	46d4      	mov	ip, sl
   b8154:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8158:	682b      	ldr	r3, [r5, #0]
   b815a:	f8cc 3000 	str.w	r3, [ip]
   b815e:	6833      	ldr	r3, [r6, #0]
   b8160:	e9d3 5300 	ldrd	r5, r3, [r3]
   b8164:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b8168:	455d      	cmp	r5, fp
   b816a:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b816c:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b816e:	d06e      	beq.n	b824e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b8170:	f855 0b08 	ldr.w	r0, [r5], #8
   b8174:	f7fe ffc1 	bl	b70fa <_ZNK8particle7BleUuideqERKS0_>
   b8178:	2800      	cmp	r0, #0
   b817a:	d0f5      	beq.n	b8168 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b817c:	f104 0a14 	add.w	sl, r4, #20
   b8180:	4650      	mov	r0, sl
   b8182:	f7fe ff8b 	bl	b709c <_ZNK8particle7BleUuid7isValidEv>
   b8186:	b988      	cbnz	r0, b81ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b8188:	4b49      	ldr	r3, [pc, #292]	; (b82b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b818a:	4948      	ldr	r1, [pc, #288]	; (b82ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b818c:	881a      	ldrh	r2, [r3, #0]
   b818e:	3201      	adds	r2, #1
   b8190:	b292      	uxth	r2, r2
   b8192:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8194:	a815      	add	r0, sp, #84	; 0x54
   b8196:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b8198:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b819a:	f7fe ff76 	bl	b708a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b819e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b81a0:	46d4      	mov	ip, sl
   b81a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b81a6:	682b      	ldr	r3, [r5, #0]
   b81a8:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b81ac:	4b41      	ldr	r3, [pc, #260]	; (b82b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b81ae:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b81b0:	2228      	movs	r2, #40	; 0x28
   b81b2:	2100      	movs	r1, #0
   b81b4:	a816      	add	r0, sp, #88	; 0x58
   b81b6:	f002 fa91 	bl	ba6dc <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b81ba:	4651      	mov	r1, sl
   b81bc:	a804      	add	r0, sp, #16
   b81be:	f7fe ff7f 	bl	b70c0 <_ZN8particle7BleUuid7halUUIDEv>
   b81c2:	ab04      	add	r3, sp, #16
   b81c4:	aa18      	add	r2, sp, #96	; 0x60
   b81c6:	f10d 0c20 	add.w	ip, sp, #32
   b81ca:	6818      	ldr	r0, [r3, #0]
   b81cc:	6859      	ldr	r1, [r3, #4]
   b81ce:	4615      	mov	r5, r2
   b81d0:	c503      	stmia	r5!, {r0, r1}
   b81d2:	3308      	adds	r3, #8
   b81d4:	4563      	cmp	r3, ip
   b81d6:	462a      	mov	r2, r5
   b81d8:	d1f7      	bne.n	b81ca <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b81da:	6818      	ldr	r0, [r3, #0]
   b81dc:	6028      	str	r0, [r5, #0]
    return value_;
   b81de:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b81e0:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b81e4:	f8d9 3000 	ldr.w	r3, [r9]
   b81e8:	8a9b      	ldrh	r3, [r3, #20]
   b81ea:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b81ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b81f0:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b81f2:	4b31      	ldr	r3, [pc, #196]	; (b82b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b81f4:	2200      	movs	r2, #0
   b81f6:	1da1      	adds	r1, r4, #6
   b81f8:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b81fa:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b81fe:	f7fe fa2b 	bl	b6658 <hal_ble_gatt_server_add_characteristic>
   b8202:	2800      	cmp	r0, #0
   b8204:	f47f af60 	bne.w	b80c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b8208:	2301      	movs	r3, #1
   b820a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b820c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b820e:	4639      	mov	r1, r7
        return characteristics_;
   b8210:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b8212:	a80d      	add	r0, sp, #52	; 0x34
   b8214:	f7ff fa45 	bl	b76a2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8218:	4620      	mov	r0, r4
   b821a:	a90d      	add	r1, sp, #52	; 0x34
   b821c:	f7ff ff1b 	bl	b8056 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b8220:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8222:	a80e      	add	r0, sp, #56	; 0x38
   b8224:	f7ff fa5f 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8228:	2c00      	cmp	r4, #0
   b822a:	f47f af4d 	bne.w	b80c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b822e:	2320      	movs	r3, #32
   b8230:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b8234:	4b21      	ldr	r3, [pc, #132]	; (b82bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b8236:	9300      	str	r3, [sp, #0]
   b8238:	aa0d      	add	r2, sp, #52	; 0x34
   b823a:	4623      	mov	r3, r4
   b823c:	e777      	b.n	b812e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b823e:	4639      	mov	r1, r7
   b8240:	4640      	mov	r0, r8
   b8242:	f7ff fa2e 	bl	b76a2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8246:	a80c      	add	r0, sp, #48	; 0x30
   b8248:	f7ff fa4d 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b824c:	e740      	b.n	b80d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b824e:	a80b      	add	r0, sp, #44	; 0x2c
   b8250:	f7ff f886 	bl	b7360 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b8254:	4651      	mov	r1, sl
   b8256:	a815      	add	r0, sp, #84	; 0x54
   b8258:	f7fe ff32 	bl	b70c0 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b825c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b825e:	2300      	movs	r3, #0
   b8260:	3214      	adds	r2, #20
   b8262:	a915      	add	r1, sp, #84	; 0x54
   b8264:	2001      	movs	r0, #1
   b8266:	f7fe f9cf 	bl	b6608 <hal_ble_gatt_server_add_service>
   b826a:	2800      	cmp	r0, #0
   b826c:	d1e7      	bne.n	b823e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b826e:	6835      	ldr	r5, [r6, #0]
   b8270:	a90b      	add	r1, sp, #44	; 0x2c
   b8272:	a80d      	add	r0, sp, #52	; 0x34
   b8274:	f7ff fa23 	bl	b76be <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b8278:	4628      	mov	r0, r5
   b827a:	a90d      	add	r1, sp, #52	; 0x34
   b827c:	f7ff fe7c 	bl	b7f78 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b8280:	4605      	mov	r5, r0
   b8282:	a80e      	add	r0, sp, #56	; 0x38
   b8284:	f7ff fa2f 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8288:	2d00      	cmp	r5, #0
   b828a:	d0d8      	beq.n	b823e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b828c:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b828e:	6853      	ldr	r3, [r2, #4]
   b8290:	6812      	ldr	r2, [r2, #0]
   b8292:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b8296:	3b01      	subs	r3, #1
   b8298:	a80c      	add	r0, sp, #48	; 0x30
   b829a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b829e:	f7ff fa22 	bl	b76e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b82a2:	e76b      	b.n	b817c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b82a4:	000bb4a7 	.word	0x000bb4a7
   b82a8:	000bb406 	.word	0x000bb406
   b82ac:	000bb56e 	.word	0x000bb56e
   b82b0:	2003e6b4 	.word	0x2003e6b4
   b82b4:	002c0003 	.word	0x002c0003
   b82b8:	000b7511 	.word	0x000b7511
   b82bc:	000bb4d2 	.word	0x000bb4d2

000b82c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b82c0:	4802      	ldr	r0, [pc, #8]	; (b82cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b82c2:	2300      	movs	r3, #0
   b82c4:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b82c6:	f7fe b9ef 	b.w	b66a8 <os_mutex_recursive_create>
   b82ca:	bf00      	nop
   b82cc:	2003e6b8 	.word	0x2003e6b8

000b82d0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b82d0:	2200      	movs	r2, #0
   b82d2:	6840      	ldr	r0, [r0, #4]
   b82d4:	4611      	mov	r1, r2
   b82d6:	f7fe bcdf 	b.w	b6c98 <network_listening>

000b82da <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b82da:	2200      	movs	r2, #0
   b82dc:	6840      	ldr	r0, [r0, #4]
   b82de:	4611      	mov	r1, r2
   b82e0:	f7fe bd02 	b.w	b6ce8 <network_get_listen_timeout>

000b82e4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b82e4:	6840      	ldr	r0, [r0, #4]
   b82e6:	2200      	movs	r2, #0
   b82e8:	f7fe bcf6 	b.w	b6cd8 <network_set_listen_timeout>

000b82ec <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b82ec:	6840      	ldr	r0, [r0, #4]
   b82ee:	2200      	movs	r2, #0
   b82f0:	f081 0101 	eor.w	r1, r1, #1
   b82f4:	f7fe bcc8 	b.w	b6c88 <network_listen>

000b82f8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b82f8:	2300      	movs	r3, #0
   b82fa:	6840      	ldr	r0, [r0, #4]
   b82fc:	461a      	mov	r2, r3
   b82fe:	4619      	mov	r1, r3
   b8300:	f7fe bcba 	b.w	b6c78 <network_off>

000b8304 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8304:	2300      	movs	r3, #0
   b8306:	6840      	ldr	r0, [r0, #4]
   b8308:	461a      	mov	r2, r3
   b830a:	4619      	mov	r1, r3
   b830c:	f7fe bcac 	b.w	b6c68 <network_on>

000b8310 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8310:	2200      	movs	r2, #0
   b8312:	6840      	ldr	r0, [r0, #4]
   b8314:	4611      	mov	r1, r2
   b8316:	f7fe bc9f 	b.w	b6c58 <network_ready>

000b831a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b831a:	2200      	movs	r2, #0
   b831c:	6840      	ldr	r0, [r0, #4]
   b831e:	4611      	mov	r1, r2
   b8320:	f7fe bc8a 	b.w	b6c38 <network_connecting>

000b8324 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8324:	6840      	ldr	r0, [r0, #4]
   b8326:	2200      	movs	r2, #0
   b8328:	2102      	movs	r1, #2
   b832a:	f7fe bc8d 	b.w	b6c48 <network_disconnect>

000b832e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b832e:	2300      	movs	r3, #0
   b8330:	6840      	ldr	r0, [r0, #4]
   b8332:	461a      	mov	r2, r3
   b8334:	f7fe bc78 	b.w	b6c28 <network_connect>

000b8338 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8338:	4b02      	ldr	r3, [pc, #8]	; (b8344 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b833a:	2203      	movs	r2, #3
   b833c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b833e:	4a02      	ldr	r2, [pc, #8]	; (b8348 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8340:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8342:	4770      	bx	lr
   b8344:	2003e6c0 	.word	0x2003e6c0
   b8348:	000bb598 	.word	0x000bb598

000b834c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b834c:	4770      	bx	lr

000b834e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b834e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8350:	4606      	mov	r6, r0
   b8352:	4615      	mov	r5, r2
   b8354:	460c      	mov	r4, r1
   b8356:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8358:	42bc      	cmp	r4, r7
   b835a:	d006      	beq.n	b836a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b835c:	6833      	ldr	r3, [r6, #0]
   b835e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8362:	689b      	ldr	r3, [r3, #8]
   b8364:	4630      	mov	r0, r6
   b8366:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8368:	e7f6      	b.n	b8358 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b836a:	4628      	mov	r0, r5
   b836c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b836e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b836e:	7c00      	ldrb	r0, [r0, #16]
   b8370:	2200      	movs	r2, #0
   b8372:	f7fe ba39 	b.w	b67e8 <hal_i2c_write>

000b8376 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8376:	7c00      	ldrb	r0, [r0, #16]
   b8378:	2100      	movs	r1, #0
   b837a:	f7fe ba3d 	b.w	b67f8 <hal_i2c_available>

000b837e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b837e:	7c00      	ldrb	r0, [r0, #16]
   b8380:	2100      	movs	r1, #0
   b8382:	f7fe ba41 	b.w	b6808 <hal_i2c_read>

000b8386 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8386:	7c00      	ldrb	r0, [r0, #16]
   b8388:	2100      	movs	r1, #0
   b838a:	f7fe ba45 	b.w	b6818 <hal_i2c_peek>

000b838e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b838e:	7c00      	ldrb	r0, [r0, #16]
   b8390:	2100      	movs	r1, #0
   b8392:	f7fe ba49 	b.w	b6828 <hal_i2c_flush>

000b8396 <_ZN7TwoWireD0Ev>:
   b8396:	b510      	push	{r4, lr}
   b8398:	2114      	movs	r1, #20
   b839a:	4604      	mov	r4, r0
   b839c:	f7fb fe7f 	bl	b409e <_ZdlPvj>
   b83a0:	4620      	mov	r0, r4
   b83a2:	bd10      	pop	{r4, pc}

000b83a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b83a4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b83a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b83aa:	4604      	mov	r4, r0
   b83ac:	4608      	mov	r0, r1
   b83ae:	2100      	movs	r1, #0
   b83b0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b83b4:	4b03      	ldr	r3, [pc, #12]	; (b83c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b83b6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b83b8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b83ba:	4611      	mov	r1, r2
   b83bc:	f7fe fa44 	bl	b6848 <hal_i2c_init>
}
   b83c0:	4620      	mov	r0, r4
   b83c2:	bd10      	pop	{r4, pc}
   b83c4:	000bb5d4 	.word	0x000bb5d4

000b83c8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b83c8:	2300      	movs	r3, #0
   b83ca:	7c00      	ldrb	r0, [r0, #16]
   b83cc:	461a      	mov	r2, r3
   b83ce:	4619      	mov	r1, r3
   b83d0:	f7fe b9f2 	b.w	b67b8 <hal_i2c_begin>

000b83d4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b83d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b83d6:	2200      	movs	r2, #0
   b83d8:	2314      	movs	r3, #20
   b83da:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b83de:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b83e2:	780b      	ldrb	r3, [r1, #0]
   b83e4:	f88d 3008 	strb.w	r3, [sp, #8]
   b83e8:	684b      	ldr	r3, [r1, #4]
   b83ea:	9303      	str	r3, [sp, #12]
   b83ec:	68cb      	ldr	r3, [r1, #12]
   b83ee:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b83f0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b83f2:	7a0b      	ldrb	r3, [r1, #8]
   b83f4:	9305      	str	r3, [sp, #20]
   b83f6:	a901      	add	r1, sp, #4
   b83f8:	f7fe fa2e 	bl	b6858 <hal_i2c_request_ex>
}
   b83fc:	b007      	add	sp, #28
   b83fe:	f85d fb04 	ldr.w	pc, [sp], #4

000b8402 <_ZN7TwoWire11requestFromEhjh>:
{
   b8402:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b8404:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8406:	f88d 1000 	strb.w	r1, [sp]
   b840a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b840e:	9103      	str	r1, [sp, #12]
   b8410:	bf18      	it	ne
   b8412:	2301      	movne	r3, #1
   b8414:	4669      	mov	r1, sp
    size_ = size;
   b8416:	9201      	str	r2, [sp, #4]
   b8418:	f88d 3008 	strb.w	r3, [sp, #8]
   b841c:	f7ff ffda 	bl	b83d4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b8420:	b005      	add	sp, #20
   b8422:	f85d fb04 	ldr.w	pc, [sp], #4

000b8426 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b8426:	2301      	movs	r3, #1
   b8428:	f7ff bfeb 	b.w	b8402 <_ZN7TwoWire11requestFromEhjh>

000b842c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b842c:	7c00      	ldrb	r0, [r0, #16]
   b842e:	2200      	movs	r2, #0
   b8430:	f7fe b9ca 	b.w	b67c8 <hal_i2c_begin_transmission>

000b8434 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8434:	b2c9      	uxtb	r1, r1
   b8436:	f7ff bff9 	b.w	b842c <_ZN7TwoWire17beginTransmissionEh>

000b843a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b843a:	7c00      	ldrb	r0, [r0, #16]
   b843c:	2200      	movs	r2, #0
   b843e:	f7fe b9cb 	b.w	b67d8 <hal_i2c_end_transmission>

000b8442 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b8442:	2101      	movs	r1, #1
   b8444:	f7ff bff9 	b.w	b843a <_ZN7TwoWire15endTransmissionEh>

000b8448 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8448:	4770      	bx	lr

000b844a <_ZN9IPAddressD0Ev>:
   b844a:	b510      	push	{r4, lr}
   b844c:	2118      	movs	r1, #24
   b844e:	4604      	mov	r4, r0
   b8450:	f7fb fe25 	bl	b409e <_ZdlPvj>
   b8454:	4620      	mov	r0, r4
   b8456:	bd10      	pop	{r4, pc}

000b8458 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8458:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b845a:	7d03      	ldrb	r3, [r0, #20]
   b845c:	2b06      	cmp	r3, #6
{
   b845e:	b08d      	sub	sp, #52	; 0x34
   b8460:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8462:	f100 0704 	add.w	r7, r0, #4
   b8466:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b846a:	d012      	beq.n	b8492 <_ZNK9IPAddress7printToER5Print+0x3a>
   b846c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8470:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8474:	220a      	movs	r2, #10
   b8476:	4630      	mov	r0, r6
   b8478:	f000 f979 	bl	b876e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b847c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b847e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8480:	d019      	beq.n	b84b6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8482:	2c00      	cmp	r4, #0
   b8484:	d0f4      	beq.n	b8470 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8486:	212e      	movs	r1, #46	; 0x2e
   b8488:	4630      	mov	r0, r6
   b848a:	f000 f951 	bl	b8730 <_ZN5Print5printEc>
   b848e:	4404      	add	r4, r0
   b8490:	e7ee      	b.n	b8470 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8492:	232f      	movs	r3, #47	; 0x2f
   b8494:	466a      	mov	r2, sp
   b8496:	4639      	mov	r1, r7
   b8498:	200a      	movs	r0, #10
		buf[0] = 0;
   b849a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b849e:	f7fe f9eb 	bl	b6878 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b84a2:	4668      	mov	r0, sp
   b84a4:	f002 f962 	bl	ba76c <strlen>
   b84a8:	6833      	ldr	r3, [r6, #0]
   b84aa:	4602      	mov	r2, r0
   b84ac:	68db      	ldr	r3, [r3, #12]
   b84ae:	4669      	mov	r1, sp
   b84b0:	4630      	mov	r0, r6
   b84b2:	4798      	blx	r3
   b84b4:	4604      	mov	r4, r0
    }
    return n;
}
   b84b6:	4620      	mov	r0, r4
   b84b8:	b00d      	add	sp, #52	; 0x34
   b84ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b84bc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b84bc:	b510      	push	{r4, lr}
   b84be:	4b05      	ldr	r3, [pc, #20]	; (b84d4 <_ZN9IPAddressC1Ev+0x18>)
   b84c0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b84c2:	2211      	movs	r2, #17
   b84c4:	f840 3b04 	str.w	r3, [r0], #4
   b84c8:	2100      	movs	r1, #0
   b84ca:	f002 f907 	bl	ba6dc <memset>
}
   b84ce:	4620      	mov	r0, r4
   b84d0:	bd10      	pop	{r4, pc}
   b84d2:	bf00      	nop
   b84d4:	000bb5fc 	.word	0x000bb5fc

000b84d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b84d8:	4603      	mov	r3, r0
   b84da:	4a07      	ldr	r2, [pc, #28]	; (b84f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b84dc:	b510      	push	{r4, lr}
   b84de:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b84e2:	f101 0210 	add.w	r2, r1, #16
   b84e6:	f851 4b04 	ldr.w	r4, [r1], #4
   b84ea:	f843 4b04 	str.w	r4, [r3], #4
   b84ee:	4291      	cmp	r1, r2
   b84f0:	d1f9      	bne.n	b84e6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b84f2:	780a      	ldrb	r2, [r1, #0]
   b84f4:	701a      	strb	r2, [r3, #0]
}
   b84f6:	bd10      	pop	{r4, pc}
   b84f8:	000bb5fc 	.word	0x000bb5fc

000b84fc <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b84fc:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b84fe:	2b04      	cmp	r3, #4
   b8500:	d104      	bne.n	b850c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b8502:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8504:	3800      	subs	r0, #0
   b8506:	bf18      	it	ne
   b8508:	2001      	movne	r0, #1
   b850a:	4770      	bx	lr
    } else if (version() == 6) {
   b850c:	2b06      	cmp	r3, #6
   b850e:	d107      	bne.n	b8520 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8510:	6843      	ldr	r3, [r0, #4]
   b8512:	b93b      	cbnz	r3, b8524 <_ZNK9IPAddresscvbEv+0x28>
   b8514:	6883      	ldr	r3, [r0, #8]
   b8516:	b92b      	cbnz	r3, b8524 <_ZNK9IPAddresscvbEv+0x28>
   b8518:	68c3      	ldr	r3, [r0, #12]
   b851a:	b91b      	cbnz	r3, b8524 <_ZNK9IPAddresscvbEv+0x28>
   b851c:	6900      	ldr	r0, [r0, #16]
   b851e:	e7f1      	b.n	b8504 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b8520:	2000      	movs	r0, #0
   b8522:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8524:	2001      	movs	r0, #1
}
   b8526:	4770      	bx	lr

000b8528 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8528:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b852a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b852e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8532:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8536:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b853a:	2304      	movs	r3, #4
   b853c:	6041      	str	r1, [r0, #4]
   b853e:	7503      	strb	r3, [r0, #20]
}
   b8540:	bd10      	pop	{r4, pc}
	...

000b8544 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8544:	b507      	push	{r0, r1, r2, lr}
   b8546:	4b06      	ldr	r3, [pc, #24]	; (b8560 <_ZN9IPAddressC1EPKh+0x1c>)
   b8548:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b854a:	78cb      	ldrb	r3, [r1, #3]
   b854c:	9300      	str	r3, [sp, #0]
   b854e:	788b      	ldrb	r3, [r1, #2]
   b8550:	784a      	ldrb	r2, [r1, #1]
   b8552:	7809      	ldrb	r1, [r1, #0]
   b8554:	f7ff ffe8 	bl	b8528 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8558:	b003      	add	sp, #12
   b855a:	f85d fb04 	ldr.w	pc, [sp], #4
   b855e:	bf00      	nop
   b8560:	000bb5fc 	.word	0x000bb5fc

000b8564 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8564:	4b01      	ldr	r3, [pc, #4]	; (b856c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8566:	4a02      	ldr	r2, [pc, #8]	; (b8570 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8568:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b856a:	4770      	bx	lr
   b856c:	2003e6c8 	.word	0x2003e6c8
   b8570:	000bb608 	.word	0x000bb608

000b8574 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8574:	2300      	movs	r3, #0
   b8576:	6840      	ldr	r0, [r0, #4]
   b8578:	461a      	mov	r2, r3
   b857a:	f7fe bb55 	b.w	b6c28 <network_connect>

000b857e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b857e:	6840      	ldr	r0, [r0, #4]
   b8580:	2200      	movs	r2, #0
   b8582:	2102      	movs	r1, #2
   b8584:	f7fe bb60 	b.w	b6c48 <network_disconnect>

000b8588 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8588:	2200      	movs	r2, #0
   b858a:	6840      	ldr	r0, [r0, #4]
   b858c:	4611      	mov	r1, r2
   b858e:	f7fe bb53 	b.w	b6c38 <network_connecting>

000b8592 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8592:	2200      	movs	r2, #0
   b8594:	6840      	ldr	r0, [r0, #4]
   b8596:	4611      	mov	r1, r2
   b8598:	f7fe bb5e 	b.w	b6c58 <network_ready>

000b859c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b859c:	2300      	movs	r3, #0
   b859e:	6840      	ldr	r0, [r0, #4]
   b85a0:	461a      	mov	r2, r3
   b85a2:	4619      	mov	r1, r3
   b85a4:	f7fe bb60 	b.w	b6c68 <network_on>

000b85a8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b85a8:	2300      	movs	r3, #0
   b85aa:	6840      	ldr	r0, [r0, #4]
   b85ac:	461a      	mov	r2, r3
   b85ae:	4619      	mov	r1, r3
   b85b0:	f7fe bb62 	b.w	b6c78 <network_off>

000b85b4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b85b4:	6840      	ldr	r0, [r0, #4]
   b85b6:	2100      	movs	r1, #0
   b85b8:	f7fe bb9e 	b.w	b6cf8 <network_is_on>

000b85bc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b85bc:	6840      	ldr	r0, [r0, #4]
   b85be:	2100      	movs	r1, #0
   b85c0:	f7fe bba2 	b.w	b6d08 <network_is_off>

000b85c4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b85c4:	6840      	ldr	r0, [r0, #4]
   b85c6:	2200      	movs	r2, #0
   b85c8:	f081 0101 	eor.w	r1, r1, #1
   b85cc:	f7fe bb5c 	b.w	b6c88 <network_listen>

000b85d0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b85d0:	6840      	ldr	r0, [r0, #4]
   b85d2:	2200      	movs	r2, #0
   b85d4:	f7fe bb80 	b.w	b6cd8 <network_set_listen_timeout>

000b85d8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b85d8:	2200      	movs	r2, #0
   b85da:	6840      	ldr	r0, [r0, #4]
   b85dc:	4611      	mov	r1, r2
   b85de:	f7fe bb83 	b.w	b6ce8 <network_get_listen_timeout>

000b85e2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b85e2:	2200      	movs	r2, #0
   b85e4:	6840      	ldr	r0, [r0, #4]
   b85e6:	4611      	mov	r1, r2
   b85e8:	f7fe bb56 	b.w	b6c98 <network_listening>

000b85ec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b85ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b85f0:	b095      	sub	sp, #84	; 0x54
   b85f2:	4614      	mov	r4, r2
   b85f4:	460d      	mov	r5, r1
   b85f6:	4607      	mov	r7, r0
    IPAddress addr;
   b85f8:	f7ff ff60 	bl	b84bc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b85fc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b85fe:	221c      	movs	r2, #28
   b8600:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8602:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8604:	f002 f86a 	bl	ba6dc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8608:	2340      	movs	r3, #64	; 0x40
   b860a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b860c:	4620      	mov	r0, r4
   b860e:	466b      	mov	r3, sp
   b8610:	aa0c      	add	r2, sp, #48	; 0x30
   b8612:	2100      	movs	r1, #0
   b8614:	f7fe f950 	bl	b68b8 <netdb_getaddrinfo>
    if (!r) {
   b8618:	4604      	mov	r4, r0
   b861a:	2800      	cmp	r0, #0
   b861c:	d14b      	bne.n	b86b6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b861e:	4602      	mov	r2, r0
   b8620:	2101      	movs	r1, #1
   b8622:	6868      	ldr	r0, [r5, #4]
   b8624:	f7fe fb18 	bl	b6c58 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8628:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b862a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b862c:	4622      	mov	r2, r4
   b862e:	6868      	ldr	r0, [r5, #4]
   b8630:	f7fe fb12 	bl	b6c58 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8634:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8636:	4681      	mov	r9, r0
        bool ok = false;
   b8638:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b863a:	2e00      	cmp	r6, #0
   b863c:	d03b      	beq.n	b86b6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b863e:	2900      	cmp	r1, #0
   b8640:	d139      	bne.n	b86b6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8642:	6873      	ldr	r3, [r6, #4]
   b8644:	2b02      	cmp	r3, #2
   b8646:	d003      	beq.n	b8650 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8648:	2b0a      	cmp	r3, #10
   b864a:	d011      	beq.n	b8670 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b864c:	69f6      	ldr	r6, [r6, #28]
   b864e:	e7f4      	b.n	b863a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8650:	f1b8 0f00 	cmp.w	r8, #0
   b8654:	d0fa      	beq.n	b864c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b8656:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8658:	a806      	add	r0, sp, #24
   b865a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b865c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b865e:	f7ff ff71 	bl	b8544 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8664:	1d3c      	adds	r4, r7, #4
   b8666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8668:	682b      	ldr	r3, [r5, #0]
   b866a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b866c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b866e:	e7ed      	b.n	b864c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8670:	f1b9 0f00 	cmp.w	r9, #0
   b8674:	d0ea      	beq.n	b864c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b8676:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8678:	2210      	movs	r2, #16
   b867a:	a801      	add	r0, sp, #4
   b867c:	f002 f82e 	bl	ba6dc <memset>
                    a.v = 6;
   b8680:	2306      	movs	r3, #6
   b8682:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8686:	ad01      	add	r5, sp, #4
   b8688:	f104 0308 	add.w	r3, r4, #8
   b868c:	3418      	adds	r4, #24
   b868e:	6818      	ldr	r0, [r3, #0]
   b8690:	6859      	ldr	r1, [r3, #4]
   b8692:	462a      	mov	r2, r5
   b8694:	c203      	stmia	r2!, {r0, r1}
   b8696:	3308      	adds	r3, #8
   b8698:	42a3      	cmp	r3, r4
   b869a:	4615      	mov	r5, r2
   b869c:	d1f7      	bne.n	b868e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b869e:	a901      	add	r1, sp, #4
   b86a0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b86a2:	ad07      	add	r5, sp, #28
   b86a4:	f7ff ff18 	bl	b84d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b86a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b86aa:	1d3c      	adds	r4, r7, #4
   b86ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b86ae:	682b      	ldr	r3, [r5, #0]
   b86b0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b86b2:	4649      	mov	r1, r9
   b86b4:	e7ca      	b.n	b864c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b86b6:	9800      	ldr	r0, [sp, #0]
   b86b8:	f7fe f8f6 	bl	b68a8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b86bc:	4638      	mov	r0, r7
   b86be:	b015      	add	sp, #84	; 0x54
   b86c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b86c4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b86c4:	4b02      	ldr	r3, [pc, #8]	; (b86d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b86c6:	4a03      	ldr	r2, [pc, #12]	; (b86d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b86c8:	601a      	str	r2, [r3, #0]
   b86ca:	2200      	movs	r2, #0
   b86cc:	605a      	str	r2, [r3, #4]

} // spark
   b86ce:	4770      	bx	lr
   b86d0:	2003e6cc 	.word	0x2003e6cc
   b86d4:	000bb614 	.word	0x000bb614

000b86d8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b86d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b86da:	4606      	mov	r6, r0
   b86dc:	460d      	mov	r5, r1
  size_t n = 0;
   b86de:	188f      	adds	r7, r1, r2
   b86e0:	2400      	movs	r4, #0
  while (size--) {
   b86e2:	42bd      	cmp	r5, r7
   b86e4:	d00c      	beq.n	b8700 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b86e6:	6833      	ldr	r3, [r6, #0]
   b86e8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b86ec:	689b      	ldr	r3, [r3, #8]
   b86ee:	4630      	mov	r0, r6
   b86f0:	4798      	blx	r3
     if (chunk>=0)
   b86f2:	1e03      	subs	r3, r0, #0
   b86f4:	db01      	blt.n	b86fa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b86f6:	441c      	add	r4, r3
  while (size--) {
   b86f8:	e7f3      	b.n	b86e2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b86fa:	2c00      	cmp	r4, #0
   b86fc:	bf08      	it	eq
   b86fe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8700:	4620      	mov	r0, r4
   b8702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8704 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b8704:	b513      	push	{r0, r1, r4, lr}
   b8706:	4604      	mov	r4, r0
    }
   b8708:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b870a:	b159      	cbz	r1, b8724 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b870c:	9101      	str	r1, [sp, #4]
   b870e:	f002 f82d 	bl	ba76c <strlen>
   b8712:	6823      	ldr	r3, [r4, #0]
   b8714:	9901      	ldr	r1, [sp, #4]
   b8716:	68db      	ldr	r3, [r3, #12]
   b8718:	4602      	mov	r2, r0
   b871a:	4620      	mov	r0, r4
    }
   b871c:	b002      	add	sp, #8
   b871e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8722:	4718      	bx	r3
    }
   b8724:	b002      	add	sp, #8
   b8726:	bd10      	pop	{r4, pc}

000b8728 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8728:	b508      	push	{r3, lr}
  return write(str);
   b872a:	f7ff ffeb 	bl	b8704 <_ZN5Print5writeEPKc>
}
   b872e:	bd08      	pop	{r3, pc}

000b8730 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b8730:	6803      	ldr	r3, [r0, #0]
   b8732:	689b      	ldr	r3, [r3, #8]
   b8734:	4718      	bx	r3

000b8736 <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   b8736:	680a      	ldr	r2, [r1, #0]
 {
   b8738:	460b      	mov	r3, r1
   return x.printTo(*this);
   b873a:	6812      	ldr	r2, [r2, #0]
   b873c:	4601      	mov	r1, r0
   b873e:	4618      	mov	r0, r3
   b8740:	4710      	bx	r2

000b8742 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8742:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8744:	210d      	movs	r1, #13
{
   b8746:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8748:	f7ff fff2 	bl	b8730 <_ZN5Print5printEc>
  n += print('\n');
   b874c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b874e:	4604      	mov	r4, r0
  n += print('\n');
   b8750:	4628      	mov	r0, r5
   b8752:	f7ff ffed 	bl	b8730 <_ZN5Print5printEc>
  return n;
}
   b8756:	4420      	add	r0, r4
   b8758:	bd38      	pop	{r3, r4, r5, pc}

000b875a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b875a:	b538      	push	{r3, r4, r5, lr}
   b875c:	4605      	mov	r5, r0
  return write(str);
   b875e:	f7ff ffd1 	bl	b8704 <_ZN5Print5writeEPKc>
   b8762:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8764:	4628      	mov	r0, r5
   b8766:	f7ff ffec 	bl	b8742 <_ZN5Print7printlnEv>
  return n;
}
   b876a:	4420      	add	r0, r4
   b876c:	bd38      	pop	{r3, r4, r5, pc}

000b876e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b876e:	b530      	push	{r4, r5, lr}
   b8770:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8772:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8774:	2a01      	cmp	r2, #1
  *str = '\0';
   b8776:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b877a:	bf98      	it	ls
   b877c:	220a      	movls	r2, #10
   b877e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8780:	460d      	mov	r5, r1
   b8782:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8786:	fb01 5312 	mls	r3, r1, r2, r5
   b878a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b878e:	2b09      	cmp	r3, #9
   b8790:	bf94      	ite	ls
   b8792:	3330      	addls	r3, #48	; 0x30
   b8794:	3337      	addhi	r3, #55	; 0x37
   b8796:	b2db      	uxtb	r3, r3
  } while(n);
   b8798:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b879a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b879e:	d9ef      	bls.n	b8780 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b87a0:	4621      	mov	r1, r4
   b87a2:	f7ff ffaf 	bl	b8704 <_ZN5Print5writeEPKc>
}
   b87a6:	b00b      	add	sp, #44	; 0x2c
   b87a8:	bd30      	pop	{r4, r5, pc}

000b87aa <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b87aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b87ae:	b086      	sub	sp, #24
   b87b0:	af00      	add	r7, sp, #0
   b87b2:	4605      	mov	r5, r0
   b87b4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b87b6:	1d38      	adds	r0, r7, #4
   b87b8:	2114      	movs	r1, #20
{
   b87ba:	4614      	mov	r4, r2
    va_copy(args2, args);
   b87bc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b87be:	f7fe fac3 	bl	b6d48 <vsnprintf>

    if (n<bufsize)
   b87c2:	2813      	cmp	r0, #19
   b87c4:	d80e      	bhi.n	b87e4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b87c6:	1d39      	adds	r1, r7, #4
   b87c8:	4628      	mov	r0, r5
   b87ca:	f7ff ff9b 	bl	b8704 <_ZN5Print5writeEPKc>
   b87ce:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b87d0:	b11e      	cbz	r6, b87da <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b87d2:	4628      	mov	r0, r5
   b87d4:	f7ff ffb5 	bl	b8742 <_ZN5Print7printlnEv>
   b87d8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b87da:	4620      	mov	r0, r4
   b87dc:	3718      	adds	r7, #24
   b87de:	46bd      	mov	sp, r7
   b87e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b87e4:	f100 0308 	add.w	r3, r0, #8
   b87e8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b87ec:	46e8      	mov	r8, sp
        char bigger[n+1];
   b87ee:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b87f2:	4622      	mov	r2, r4
   b87f4:	1c41      	adds	r1, r0, #1
   b87f6:	683b      	ldr	r3, [r7, #0]
   b87f8:	4668      	mov	r0, sp
   b87fa:	f7fe faa5 	bl	b6d48 <vsnprintf>
  return write(str);
   b87fe:	4669      	mov	r1, sp
   b8800:	4628      	mov	r0, r5
   b8802:	f7ff ff7f 	bl	b8704 <_ZN5Print5writeEPKc>
   b8806:	4604      	mov	r4, r0
   b8808:	46c5      	mov	sp, r8
   b880a:	e7e1      	b.n	b87d0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b880c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b880c:	4b01      	ldr	r3, [pc, #4]	; (b8814 <_GLOBAL__sub_I_RGB+0x8>)
   b880e:	2200      	movs	r2, #0
   b8810:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b8812:	4770      	bx	lr
   b8814:	2003e6d4 	.word	0x2003e6d4

000b8818 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b8818:	2100      	movs	r1, #0
   b881a:	f7fe b8cd 	b.w	b69b8 <hal_spi_release>

000b881e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b881e:	2100      	movs	r1, #0
   b8820:	f7fe b8c2 	b.w	b69a8 <hal_spi_acquire>

000b8824 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b8824:	b510      	push	{r4, lr}
   b8826:	4604      	mov	r4, r0
   b8828:	4608      	mov	r0, r1
{
    _spi = spi;
   b882a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b882c:	f7fe f8a4 	bl	b6978 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b8830:	2300      	movs	r3, #0
   b8832:	6063      	str	r3, [r4, #4]
}
   b8834:	4620      	mov	r0, r4
   b8836:	bd10      	pop	{r4, pc}

000b8838 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b8838:	b513      	push	{r0, r1, r4, lr}
   b883a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b883c:	7800      	ldrb	r0, [r0, #0]
   b883e:	f7ff ffee 	bl	b881e <_ZN8SPIClass4lockEv.isra.0>
   b8842:	b958      	cbnz	r0, b885c <_ZN8SPIClass5beginEv+0x24>
   b8844:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b8846:	9001      	str	r0, [sp, #4]
   b8848:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b884c:	f7fe f86c 	bl	b6928 <hal_spi_begin>
        unlock();
   b8850:	9801      	ldr	r0, [sp, #4]
    }
}
   b8852:	b002      	add	sp, #8
   b8854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8858:	f7ff bfde 	b.w	b8818 <_ZN8SPIClass6unlockEv.isra.0>
   b885c:	b002      	add	sp, #8
   b885e:	bd10      	pop	{r4, pc}

000b8860 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b8860:	b513      	push	{r0, r1, r4, lr}
   b8862:	4604      	mov	r4, r0
    if (!lock())
   b8864:	7800      	ldrb	r0, [r0, #0]
{
   b8866:	9101      	str	r1, [sp, #4]
    if (!lock())
   b8868:	f7ff ffd9 	bl	b881e <_ZN8SPIClass4lockEv.isra.0>
   b886c:	9901      	ldr	r1, [sp, #4]
   b886e:	b948      	cbnz	r0, b8884 <_ZN8SPIClass11setBitOrderEh+0x24>
   b8870:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b8872:	9001      	str	r0, [sp, #4]
   b8874:	f7fe f860 	bl	b6938 <hal_spi_set_bit_order>
        unlock();
   b8878:	9801      	ldr	r0, [sp, #4]
    }
}
   b887a:	b002      	add	sp, #8
   b887c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8880:	f7ff bfca 	b.w	b8818 <_ZN8SPIClass6unlockEv.isra.0>
   b8884:	b002      	add	sp, #8
   b8886:	bd10      	pop	{r4, pc}

000b8888 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b8888:	b513      	push	{r0, r1, r4, lr}
   b888a:	4604      	mov	r4, r0
    if (!lock())
   b888c:	7800      	ldrb	r0, [r0, #0]
{
   b888e:	9101      	str	r1, [sp, #4]
    if (!lock())
   b8890:	f7ff ffc5 	bl	b881e <_ZN8SPIClass4lockEv.isra.0>
   b8894:	9901      	ldr	r1, [sp, #4]
   b8896:	b948      	cbnz	r0, b88ac <_ZN8SPIClass11setDataModeEh+0x24>
   b8898:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b889a:	9001      	str	r0, [sp, #4]
   b889c:	f7fe f854 	bl	b6948 <hal_spi_set_data_mode>
        unlock();
   b88a0:	9801      	ldr	r0, [sp, #4]
    }
}
   b88a2:	b002      	add	sp, #8
   b88a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b88a8:	f7ff bfb6 	b.w	b8818 <_ZN8SPIClass6unlockEv.isra.0>
   b88ac:	b002      	add	sp, #8
   b88ae:	bd10      	pop	{r4, pc}

000b88b0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b88b0:	0840      	lsrs	r0, r0, #1
{
   b88b2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b88b4:	6018      	str	r0, [r3, #0]
   b88b6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b88b8:	6818      	ldr	r0, [r3, #0]
   b88ba:	4288      	cmp	r0, r1
   b88bc:	b2e5      	uxtb	r5, r4
   b88be:	d906      	bls.n	b88ce <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b88c0:	3401      	adds	r4, #1
   b88c2:	2c08      	cmp	r4, #8
   b88c4:	d002      	beq.n	b88cc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b88c6:	0840      	lsrs	r0, r0, #1
   b88c8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b88ca:	e7f5      	b.n	b88b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b88cc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b88ce:	4b02      	ldr	r3, [pc, #8]	; (b88d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b88d0:	5d5b      	ldrb	r3, [r3, r5]
   b88d2:	7013      	strb	r3, [r2, #0]
}
   b88d4:	bd30      	pop	{r4, r5, pc}
   b88d6:	bf00      	nop
   b88d8:	000bb648 	.word	0x000bb648

000b88dc <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b88dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b88e0:	b088      	sub	sp, #32
    unsigned clock = 0;
   b88e2:	2300      	movs	r3, #0
{
   b88e4:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b88e6:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b88e8:	9302      	str	r3, [sp, #8]
{
   b88ea:	460e      	mov	r6, r1
   b88ec:	4617      	mov	r7, r2
    if (!lock())
   b88ee:	f7ff ff96 	bl	b881e <_ZN8SPIClass4lockEv.isra.0>
   b88f2:	4605      	mov	r5, r0
   b88f4:	bb00      	cbnz	r0, b8938 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b88f6:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b88fa:	4601      	mov	r1, r0
   b88fc:	2214      	movs	r2, #20
   b88fe:	a803      	add	r0, sp, #12
   b8900:	f001 feec 	bl	ba6dc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b8904:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b8906:	462a      	mov	r2, r5
   b8908:	a903      	add	r1, sp, #12
   b890a:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b890c:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b8910:	f7fe f842 	bl	b6998 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b8914:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b8916:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b891a:	ab02      	add	r3, sp, #8
   b891c:	f10d 0207 	add.w	r2, sp, #7
   b8920:	fb07 f106 	mul.w	r1, r7, r6
   b8924:	f7ff ffc4 	bl	b88b0 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b8928:	7820      	ldrb	r0, [r4, #0]
   b892a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b892e:	f7fe f813 	bl	b6958 <hal_spi_set_clock_divider>
        unlock();
   b8932:	7820      	ldrb	r0, [r4, #0]
   b8934:	f7ff ff70 	bl	b8818 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b8938:	9802      	ldr	r0, [sp, #8]
   b893a:	b008      	add	sp, #32
   b893c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8940 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b8940:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b8942:	7800      	ldrb	r0, [r0, #0]
   b8944:	f7fe f810 	bl	b6968 <hal_spi_transfer>
}
   b8948:	b2c0      	uxtb	r0, r0
   b894a:	bd08      	pop	{r3, pc}

000b894c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b894c:	b510      	push	{r4, lr}
   b894e:	4604      	mov	r4, r0
{
	free(buffer);
   b8950:	6800      	ldr	r0, [r0, #0]
   b8952:	f7fe f9e9 	bl	b6d28 <free>
}
   b8956:	4620      	mov	r0, r4
   b8958:	bd10      	pop	{r4, pc}

000b895a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b895a:	b510      	push	{r4, lr}
   b895c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b895e:	6800      	ldr	r0, [r0, #0]
   b8960:	b108      	cbz	r0, b8966 <_ZN6String10invalidateEv+0xc>
   b8962:	f7fe f9e1 	bl	b6d28 <free>
	buffer = NULL;
   b8966:	2300      	movs	r3, #0
	capacity = len = 0;
   b8968:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b896c:	6023      	str	r3, [r4, #0]
}
   b896e:	bd10      	pop	{r4, pc}

000b8970 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8970:	b538      	push	{r3, r4, r5, lr}
   b8972:	4604      	mov	r4, r0
   b8974:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8976:	6800      	ldr	r0, [r0, #0]
   b8978:	3101      	adds	r1, #1
   b897a:	f7fe f9dd 	bl	b6d38 <realloc>
	if (newbuffer) {
   b897e:	b110      	cbz	r0, b8986 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8980:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8984:	2001      	movs	r0, #1
	}
	return 0;
}
   b8986:	bd38      	pop	{r3, r4, r5, pc}

000b8988 <_ZN6String7reserveEj>:
{
   b8988:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b898a:	6803      	ldr	r3, [r0, #0]
{
   b898c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b898e:	b123      	cbz	r3, b899a <_ZN6String7reserveEj+0x12>
   b8990:	6843      	ldr	r3, [r0, #4]
   b8992:	428b      	cmp	r3, r1
   b8994:	d301      	bcc.n	b899a <_ZN6String7reserveEj+0x12>
   b8996:	2001      	movs	r0, #1
}
   b8998:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b899a:	4620      	mov	r0, r4
   b899c:	f7ff ffe8 	bl	b8970 <_ZN6String12changeBufferEj>
   b89a0:	2800      	cmp	r0, #0
   b89a2:	d0f9      	beq.n	b8998 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b89a4:	68a3      	ldr	r3, [r4, #8]
   b89a6:	2b00      	cmp	r3, #0
   b89a8:	d1f5      	bne.n	b8996 <_ZN6String7reserveEj+0xe>
   b89aa:	6822      	ldr	r2, [r4, #0]
   b89ac:	7013      	strb	r3, [r2, #0]
   b89ae:	e7f2      	b.n	b8996 <_ZN6String7reserveEj+0xe>

000b89b0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b89b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b89b2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b89b4:	4611      	mov	r1, r2
   b89b6:	9201      	str	r2, [sp, #4]
{
   b89b8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b89ba:	f7ff ffe5 	bl	b8988 <_ZN6String7reserveEj>
   b89be:	9a01      	ldr	r2, [sp, #4]
   b89c0:	b928      	cbnz	r0, b89ce <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b89c2:	4620      	mov	r0, r4
   b89c4:	f7ff ffc9 	bl	b895a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b89c8:	4620      	mov	r0, r4
   b89ca:	b003      	add	sp, #12
   b89cc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b89ce:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b89d0:	4629      	mov	r1, r5
   b89d2:	6820      	ldr	r0, [r4, #0]
   b89d4:	f001 fe5a 	bl	ba68c <memcpy>
	buffer[len] = 0;
   b89d8:	6822      	ldr	r2, [r4, #0]
   b89da:	68a3      	ldr	r3, [r4, #8]
   b89dc:	2100      	movs	r1, #0
   b89de:	54d1      	strb	r1, [r2, r3]
	return *this;
   b89e0:	e7f2      	b.n	b89c8 <_ZN6String4copyEPKcj+0x18>

000b89e2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b89e2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b89e4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b89e6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b89ea:	4604      	mov	r4, r0
	len = 0;
   b89ec:	6083      	str	r3, [r0, #8]
	flags = 0;
   b89ee:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b89f0:	b141      	cbz	r1, b8a04 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b89f2:	4608      	mov	r0, r1
   b89f4:	9101      	str	r1, [sp, #4]
   b89f6:	f001 feb9 	bl	ba76c <strlen>
   b89fa:	9901      	ldr	r1, [sp, #4]
   b89fc:	4602      	mov	r2, r0
   b89fe:	4620      	mov	r0, r4
   b8a00:	f7ff ffd6 	bl	b89b0 <_ZN6String4copyEPKcj>
}
   b8a04:	4620      	mov	r0, r4
   b8a06:	b002      	add	sp, #8
   b8a08:	bd10      	pop	{r4, pc}

000b8a0a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b8a0a:	4288      	cmp	r0, r1
{
   b8a0c:	b510      	push	{r4, lr}
   b8a0e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8a10:	d005      	beq.n	b8a1e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b8a12:	680b      	ldr	r3, [r1, #0]
   b8a14:	b12b      	cbz	r3, b8a22 <_ZN6StringaSERKS_+0x18>
   b8a16:	688a      	ldr	r2, [r1, #8]
   b8a18:	4619      	mov	r1, r3
   b8a1a:	f7ff ffc9 	bl	b89b0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8a1e:	4620      	mov	r0, r4
   b8a20:	bd10      	pop	{r4, pc}
	else invalidate();
   b8a22:	f7ff ff9a 	bl	b895a <_ZN6String10invalidateEv>
   b8a26:	e7fa      	b.n	b8a1e <_ZN6StringaSERKS_+0x14>

000b8a28 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8a28:	b510      	push	{r4, lr}
	buffer = NULL;
   b8a2a:	2300      	movs	r3, #0
String::String(const String &value)
   b8a2c:	4604      	mov	r4, r0
	capacity = 0;
   b8a2e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8a32:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8a34:	7303      	strb	r3, [r0, #12]
	*this = value;
   b8a36:	f7ff ffe8 	bl	b8a0a <_ZN6StringaSERKS_>
}
   b8a3a:	4620      	mov	r0, r4
   b8a3c:	bd10      	pop	{r4, pc}

000b8a3e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8a3e:	b513      	push	{r0, r1, r4, lr}
   b8a40:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8a42:	b159      	cbz	r1, b8a5c <_ZN6StringaSEPKc+0x1e>
   b8a44:	4608      	mov	r0, r1
   b8a46:	9101      	str	r1, [sp, #4]
   b8a48:	f001 fe90 	bl	ba76c <strlen>
   b8a4c:	9901      	ldr	r1, [sp, #4]
   b8a4e:	4602      	mov	r2, r0
   b8a50:	4620      	mov	r0, r4
   b8a52:	f7ff ffad 	bl	b89b0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8a56:	4620      	mov	r0, r4
   b8a58:	b002      	add	sp, #8
   b8a5a:	bd10      	pop	{r4, pc}
	else invalidate();
   b8a5c:	f7ff ff7d 	bl	b895a <_ZN6String10invalidateEv>
   b8a60:	e7f9      	b.n	b8a56 <_ZN6StringaSEPKc+0x18>

000b8a62 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b8a62:	b510      	push	{r4, lr}
   b8a64:	4604      	mov	r4, r0
   b8a66:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b8a68:	2300      	movs	r3, #0
	capacity = 0;
   b8a6a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b8a6e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b8a70:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b8a72:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b8a74:	a901      	add	r1, sp, #4
   b8a76:	f000 fe87 	bl	b9788 <itoa>
	*this = buf;
   b8a7a:	a901      	add	r1, sp, #4
   b8a7c:	4620      	mov	r0, r4
   b8a7e:	f7ff ffde 	bl	b8a3e <_ZN6StringaSEPKc>
}
   b8a82:	4620      	mov	r0, r4
   b8a84:	b00a      	add	sp, #40	; 0x28
   b8a86:	bd10      	pop	{r4, pc}

000b8a88 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b8a88:	b510      	push	{r4, lr}
   b8a8a:	4604      	mov	r4, r0
   b8a8c:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b8a8e:	2300      	movs	r3, #0
	capacity = 0;
   b8a90:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b8a94:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b8a96:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b8a98:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b8a9a:	a901      	add	r1, sp, #4
   b8a9c:	f000 fe0b 	bl	b96b6 <ltoa>
	*this = buf;
   b8aa0:	a901      	add	r1, sp, #4
   b8aa2:	4620      	mov	r0, r4
   b8aa4:	f7ff ffcb 	bl	b8a3e <_ZN6StringaSEPKc>
}
   b8aa8:	4620      	mov	r0, r4
   b8aaa:	b00a      	add	sp, #40	; 0x28
   b8aac:	bd10      	pop	{r4, pc}

000b8aae <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b8aae:	b570      	push	{r4, r5, r6, lr}
   b8ab0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b8ab2:	460e      	mov	r6, r1
   b8ab4:	b909      	cbnz	r1, b8aba <_ZN6String6concatEPKcj+0xc>
   b8ab6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b8ab8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b8aba:	b16a      	cbz	r2, b8ad8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8abc:	6884      	ldr	r4, [r0, #8]
   b8abe:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b8ac0:	4621      	mov	r1, r4
   b8ac2:	f7ff ff61 	bl	b8988 <_ZN6String7reserveEj>
   b8ac6:	2800      	cmp	r0, #0
   b8ac8:	d0f5      	beq.n	b8ab6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8aca:	6828      	ldr	r0, [r5, #0]
   b8acc:	68ab      	ldr	r3, [r5, #8]
   b8ace:	4631      	mov	r1, r6
   b8ad0:	4418      	add	r0, r3
   b8ad2:	f001 fe43 	bl	ba75c <strcpy>
	len = newlen;
   b8ad6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b8ad8:	2001      	movs	r0, #1
   b8ada:	e7ed      	b.n	b8ab8 <_ZN6String6concatEPKcj+0xa>

000b8adc <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b8adc:	688a      	ldr	r2, [r1, #8]
   b8ade:	6809      	ldr	r1, [r1, #0]
   b8ae0:	f7ff bfe5 	b.w	b8aae <_ZN6String6concatEPKcj>

000b8ae4 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b8ae4:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b8ae6:	2300      	movs	r3, #0
	buf[0] = c;
   b8ae8:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b8aec:	2201      	movs	r2, #1
   b8aee:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b8af0:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b8af4:	f7ff ffdb 	bl	b8aae <_ZN6String6concatEPKcj>
}
   b8af8:	b003      	add	sp, #12
   b8afa:	f85d fb04 	ldr.w	pc, [sp], #4

000b8afe <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
   b8afe:	b513      	push	{r0, r1, r4, lr}
	char buf[4];
	itoa(num, buf, 10);
   b8b00:	220a      	movs	r2, #10
{
   b8b02:	4604      	mov	r4, r0
   b8b04:	4608      	mov	r0, r1
	itoa(num, buf, 10);
   b8b06:	a901      	add	r1, sp, #4
   b8b08:	f000 fe3e 	bl	b9788 <itoa>
	return concat(buf, strlen(buf));
   b8b0c:	a801      	add	r0, sp, #4
   b8b0e:	f001 fe2d 	bl	ba76c <strlen>
   b8b12:	a901      	add	r1, sp, #4
   b8b14:	4602      	mov	r2, r0
   b8b16:	4620      	mov	r0, r4
   b8b18:	f7ff ffc9 	bl	b8aae <_ZN6String6concatEPKcj>
}
   b8b1c:	b002      	add	sp, #8
   b8b1e:	bd10      	pop	{r4, pc}

000b8b20 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b8b20:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b8b22:	688a      	ldr	r2, [r1, #8]
   b8b24:	6809      	ldr	r1, [r1, #0]
{
   b8b26:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b8b28:	f7ff ffc1 	bl	b8aae <_ZN6String6concatEPKcj>
   b8b2c:	b910      	cbnz	r0, b8b34 <_ZplRK15StringSumHelperRK6String+0x14>
   b8b2e:	4620      	mov	r0, r4
   b8b30:	f7ff ff13 	bl	b895a <_ZN6String10invalidateEv>
	return a;
}
   b8b34:	4620      	mov	r0, r4
   b8b36:	bd10      	pop	{r4, pc}

000b8b38 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b8b38:	b513      	push	{r0, r1, r4, lr}
   b8b3a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8b3c:	b929      	cbnz	r1, b8b4a <_ZplRK15StringSumHelperPKc+0x12>
   b8b3e:	4620      	mov	r0, r4
   b8b40:	f7ff ff0b 	bl	b895a <_ZN6String10invalidateEv>
	return a;
}
   b8b44:	4620      	mov	r0, r4
   b8b46:	b002      	add	sp, #8
   b8b48:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8b4a:	4608      	mov	r0, r1
   b8b4c:	9101      	str	r1, [sp, #4]
   b8b4e:	f001 fe0d 	bl	ba76c <strlen>
   b8b52:	9901      	ldr	r1, [sp, #4]
   b8b54:	4602      	mov	r2, r0
   b8b56:	4620      	mov	r0, r4
   b8b58:	f7ff ffa9 	bl	b8aae <_ZN6String6concatEPKcj>
   b8b5c:	2800      	cmp	r0, #0
   b8b5e:	d0ee      	beq.n	b8b3e <_ZplRK15StringSumHelperPKc+0x6>
   b8b60:	e7f0      	b.n	b8b44 <_ZplRK15StringSumHelperPKc+0xc>

000b8b62 <_ZplRK15StringSumHelperh>:
	if (!a.concat(c)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
   b8b62:	b510      	push	{r4, lr}
   b8b64:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   b8b66:	f7ff ffca 	bl	b8afe <_ZN6String6concatEh>
   b8b6a:	b910      	cbnz	r0, b8b72 <_ZplRK15StringSumHelperh+0x10>
   b8b6c:	4620      	mov	r0, r4
   b8b6e:	f7ff fef4 	bl	b895a <_ZN6String10invalidateEv>
	return a;
}
   b8b72:	4620      	mov	r0, r4
   b8b74:	bd10      	pop	{r4, pc}

000b8b76 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b8b76:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8b78:	6882      	ldr	r2, [r0, #8]
   b8b7a:	b93a      	cbnz	r2, b8b8c <_ZNK6String6equalsEPKc+0x16>
   b8b7c:	b121      	cbz	r1, b8b88 <_ZNK6String6equalsEPKc+0x12>
   b8b7e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b8b80:	fab0 f080 	clz	r0, r0
   b8b84:	0940      	lsrs	r0, r0, #5
   b8b86:	e000      	b.n	b8b8a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8b88:	2001      	movs	r0, #1
}
   b8b8a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b8b8c:	6800      	ldr	r0, [r0, #0]
   b8b8e:	b909      	cbnz	r1, b8b94 <_ZNK6String6equalsEPKc+0x1e>
   b8b90:	7800      	ldrb	r0, [r0, #0]
   b8b92:	e7f5      	b.n	b8b80 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b8b94:	f001 fdd8 	bl	ba748 <strcmp>
   b8b98:	e7f2      	b.n	b8b80 <_ZNK6String6equalsEPKc+0xa>

000b8b9a <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b8b9a:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b8b9c:	6883      	ldr	r3, [r0, #8]
   b8b9e:	4293      	cmp	r3, r2
   b8ba0:	d907      	bls.n	b8bb2 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b8ba2:	6804      	ldr	r4, [r0, #0]
   b8ba4:	6809      	ldr	r1, [r1, #0]
   b8ba6:	18a0      	adds	r0, r4, r2
   b8ba8:	f001 fe07 	bl	ba7ba <strstr>
	if (found == NULL) return -1;
   b8bac:	b108      	cbz	r0, b8bb2 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b8bae:	1b00      	subs	r0, r0, r4
}
   b8bb0:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b8bb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8bb6:	e7fb      	b.n	b8bb0 <_ZNK6String7indexOfERKS_j+0x16>

000b8bb8 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b8bb8:	2200      	movs	r2, #0
   b8bba:	f7ff bfee 	b.w	b8b9a <_ZNK6String7indexOfERKS_j>
	...

000b8bc0 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b8bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b8bc2:	429a      	cmp	r2, r3
{
   b8bc4:	460f      	mov	r7, r1
   b8bc6:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b8bc8:	490c      	ldr	r1, [pc, #48]	; (b8bfc <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b8bca:	bf88      	it	hi
   b8bcc:	4613      	movhi	r3, r2
{
   b8bce:	4614      	mov	r4, r2
   b8bd0:	4606      	mov	r6, r0
	if (left > right) {
   b8bd2:	bf84      	itt	hi
   b8bd4:	462c      	movhi	r4, r5
   b8bd6:	461d      	movhi	r5, r3
	String out;
   b8bd8:	f7ff ff03 	bl	b89e2 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b8bdc:	68bb      	ldr	r3, [r7, #8]
   b8bde:	42a3      	cmp	r3, r4
   b8be0:	d30a      	bcc.n	b8bf8 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b8be2:	6839      	ldr	r1, [r7, #0]
   b8be4:	42ab      	cmp	r3, r5
   b8be6:	bf94      	ite	ls
   b8be8:	ebc4 0203 	rsbls	r2, r4, r3
   b8bec:	ebc4 0205 	rsbhi	r2, r4, r5
   b8bf0:	4421      	add	r1, r4
   b8bf2:	4630      	mov	r0, r6
   b8bf4:	f7ff fedc 	bl	b89b0 <_ZN6String4copyEPKcj>
	return out;
}
   b8bf8:	4630      	mov	r0, r6
   b8bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8bfc:	000bac31 	.word	0x000bac31

000b8c00 <_ZNK6String9substringEj>:
{
   b8c00:	b510      	push	{r4, lr}
   b8c02:	4604      	mov	r4, r0
	return substring(left, len);
   b8c04:	688b      	ldr	r3, [r1, #8]
   b8c06:	f7ff ffdb 	bl	b8bc0 <_ZNK6String9substringEjj>
}
   b8c0a:	4620      	mov	r0, r4
   b8c0c:	bd10      	pop	{r4, pc}

000b8c0e <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
   b8c0e:	b538      	push	{r3, r4, r5, lr}
   b8c10:	4604      	mov	r4, r0
   b8c12:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
   b8c14:	68a3      	ldr	r3, [r4, #8]
   b8c16:	428b      	cmp	r3, r1
   b8c18:	d911      	bls.n	b8c3e <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
   b8c1a:	b182      	cbz	r2, b8c3e <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
   b8c1c:	4411      	add	r1, r2
   b8c1e:	428b      	cmp	r3, r1
   b8c20:	bf38      	it	cc
   b8c22:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
   b8c24:	6825      	ldr	r5, [r4, #0]
	len = len - count;
   b8c26:	1a99      	subs	r1, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
   b8c28:	1813      	adds	r3, r2, r0
	len = len - count;
   b8c2a:	60a1      	str	r1, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
   b8c2c:	1a0a      	subs	r2, r1, r0
   b8c2e:	18e9      	adds	r1, r5, r3
   b8c30:	4428      	add	r0, r5
   b8c32:	f001 fd39 	bl	ba6a8 <memmove>
	buffer[len] = 0;
   b8c36:	6822      	ldr	r2, [r4, #0]
   b8c38:	68a3      	ldr	r3, [r4, #8]
   b8c3a:	2100      	movs	r1, #0
   b8c3c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   b8c3e:	4620      	mov	r0, r4
   b8c40:	bd38      	pop	{r3, r4, r5, pc}

000b8c42 <_ZN6String6removeEj>:
        int count = len - index;
   b8c42:	6882      	ldr	r2, [r0, #8]
        return remove(index, count);
   b8c44:	1a52      	subs	r2, r2, r1
   b8c46:	f7ff bfe2 	b.w	b8c0e <_ZN6String6removeEjj>

000b8c4a <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b8c4a:	6800      	ldr	r0, [r0, #0]
   b8c4c:	b108      	cbz	r0, b8c52 <_ZNK6String5toIntEv+0x8>
   b8c4e:	f001 bcf5 	b.w	ba63c <atol>
	return 0;
}
   b8c52:	4770      	bx	lr

000b8c54 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   b8c54:	b538      	push	{r3, r4, r5, lr}
   b8c56:	460c      	mov	r4, r1
   b8c58:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b8c5a:	f7fb fa72 	bl	b4142 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   b8c5e:	b154      	cbz	r4, b8c76 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   b8c60:	8820      	ldrh	r0, [r4, #0]
   b8c62:	f7fe f859 	bl	b6d18 <malloc>
   b8c66:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   b8c68:	b128      	cbz	r0, b8c76 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   b8c6a:	8822      	ldrh	r2, [r4, #0]
   b8c6c:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   b8c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   b8c72:	f001 bd0b 	b.w	ba68c <memcpy>
    }
   b8c76:	bd38      	pop	{r3, r4, r5, pc}

000b8c78 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b8c78:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   b8c7a:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   b8c7e:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   b8c80:	f8d1 3006 	ldr.w	r3, [r1, #6]
   b8c84:	f8c0 3006 	str.w	r3, [r0, #6]
   b8c88:	894b      	ldrh	r3, [r1, #10]
   b8c8a:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b8c8c:	460c      	mov	r4, r1
   b8c8e:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b8c90:	f7fb fa57 	bl	b4142 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   b8c94:	6823      	ldr	r3, [r4, #0]
   b8c96:	b113      	cbz	r3, b8c9e <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   b8c98:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   b8c9a:	2300      	movs	r3, #0
   b8c9c:	6023      	str	r3, [r4, #0]
    }
   b8c9e:	bd38      	pop	{r3, r4, r5, pc}

000b8ca0 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b8ca0:	b507      	push	{r0, r1, r2, lr}
   b8ca2:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8ca4:	2100      	movs	r1, #0
{
   b8ca6:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8ca8:	9100      	str	r1, [sp, #0]
   b8caa:	2001      	movs	r0, #1
   b8cac:	218c      	movs	r1, #140	; 0x8c
   b8cae:	f7fd ff89 	bl	b6bc4 <system_reset>
}
   b8cb2:	b003      	add	sp, #12
   b8cb4:	f85d fb04 	ldr.w	pc, [sp], #4

000b8cb8 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b8cb8:	4601      	mov	r1, r0
    reset(0, flags);
   b8cba:	2000      	movs	r0, #0
   b8cbc:	f7ff bff0 	b.w	b8ca0 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b8cc0 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b8cc0:	2000      	movs	r0, #0
   b8cc2:	f7ff bff9 	b.w	b8cb8 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000b8cc8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   b8cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8cca:	4d2b      	ldr	r5, [pc, #172]	; (b8d78 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   b8ccc:	7d0b      	ldrb	r3, [r1, #20]
   b8cce:	4604      	mov	r4, r0
   b8cd0:	b08b      	sub	sp, #44	; 0x2c
   b8cd2:	4608      	mov	r0, r1
   b8cd4:	1daf      	adds	r7, r5, #6
   b8cd6:	2b00      	cmp	r3, #0
   b8cd8:	d036      	beq.n	b8d48 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   b8cda:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   b8cdc:	791b      	ldrb	r3, [r3, #4]
   b8cde:	2b00      	cmp	r3, #0
   b8ce0:	d032      	beq.n	b8d48 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   b8ce2:	4b26      	ldr	r3, [pc, #152]	; (b8d7c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   b8ce4:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   b8ce6:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   b8ce8:	a902      	add	r1, sp, #8
   b8cea:	3004      	adds	r0, #4
   b8cec:	e9cd 2202 	strd	r2, r2, [sp, #8]
   b8cf0:	f7fd ff5e 	bl	b6bb0 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   b8cf4:	f8dd 300e 	ldr.w	r3, [sp, #14]
   b8cf8:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   b8cfc:	b200      	sxth	r0, r0
   b8cfe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   b8d02:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   b8d06:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   b8d08:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   b8d0a:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b8d0c:	4628      	mov	r0, r5
   b8d0e:	f7ff ffa1 	bl	b8c54 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   b8d12:	a802      	add	r0, sp, #8
   b8d14:	f7fb fa15 	bl	b4142 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   b8d18:	2300      	movs	r3, #0
   b8d1a:	6023      	str	r3, [r4, #0]
   b8d1c:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   b8d1e:	71a3      	strb	r3, [r4, #6]
   b8d20:	8123      	strh	r3, [r4, #8]
   b8d22:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8d26:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   b8d28:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   b8d2c:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   b8d2e:	f8d5 3006 	ldr.w	r3, [r5, #6]
   b8d32:	f8c4 3006 	str.w	r3, [r4, #6]
   b8d36:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b8d38:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   b8d3a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   b8d3c:	4620      	mov	r0, r4
   b8d3e:	f7ff ff89 	bl	b8c54 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   b8d42:	4620      	mov	r0, r4
   b8d44:	b00b      	add	sp, #44	; 0x2c
   b8d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   b8d48:	2600      	movs	r6, #0
   b8d4a:	2320      	movs	r3, #32
   b8d4c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b8d50:	4b0b      	ldr	r3, [pc, #44]	; (b8d80 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   b8d52:	9300      	str	r3, [sp, #0]
   b8d54:	aa02      	add	r2, sp, #8
   b8d56:	4633      	mov	r3, r6
   b8d58:	490a      	ldr	r1, [pc, #40]	; (b8d84 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   b8d5a:	2032      	movs	r0, #50	; 0x32
   b8d5c:	f7fd fec4 	bl	b6ae8 <log_message>
            : wakeupSource_(nullptr),
   b8d60:	4b06      	ldr	r3, [pc, #24]	; (b8d7c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   b8d62:	4805      	ldr	r0, [pc, #20]	; (b8d78 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   b8d64:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   b8d66:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   b8d6a:	a902      	add	r1, sp, #8
   b8d6c:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b8d70:	f7ff ff82 	bl	b8c78 <_ZN17SystemSleepResultaSEOS_.isra.0>
   b8d74:	e7cd      	b.n	b8d12 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   b8d76:	bf00      	nop
   b8d78:	2003e6e4 	.word	0x2003e6e4
   b8d7c:	ffff0000 	.word	0xffff0000
   b8d80:	000bb657 	.word	0x000bb657
   b8d84:	000bb650 	.word	0x000bb650

000b8d88 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8d88:	4b05      	ldr	r3, [pc, #20]	; (b8da0 <_GLOBAL__sub_I_System+0x18>)
   b8d8a:	2202      	movs	r2, #2
   b8d8c:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b8d8e:	4b05      	ldr	r3, [pc, #20]	; (b8da4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8d90:	4a05      	ldr	r2, [pc, #20]	; (b8da8 <_GLOBAL__sub_I_System+0x20>)
   b8d92:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8d94:	2000      	movs	r0, #0
   b8d96:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8d9a:	f7fd beb5 	b.w	b6b08 <set_system_mode>
   b8d9e:	bf00      	nop
   b8da0:	2003e6f0 	.word	0x2003e6f0
   b8da4:	2003e6e4 	.word	0x2003e6e4
   b8da8:	ffff0000 	.word	0xffff0000

000b8dac <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b8dac:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8dae:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b8db0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8db4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8db6:	2201      	movs	r2, #1
   b8db8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8dbc:	f10d 0107 	add.w	r1, sp, #7
   b8dc0:	47a0      	blx	r4
}
   b8dc2:	b002      	add	sp, #8
   b8dc4:	bd10      	pop	{r4, pc}

000b8dc6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b8dc6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8dc8:	6803      	ldr	r3, [r0, #0]
   b8dca:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8dd0:	46a4      	mov	ip, r4
}
   b8dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8dd6:	4760      	bx	ip

000b8dd8 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8dd8:	b513      	push	{r0, r1, r4, lr}
   b8dda:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b8ddc:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8dde:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b8de2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8de4:	f10d 0107 	add.w	r1, sp, #7
   b8de8:	2201      	movs	r2, #1
   b8dea:	47a0      	blx	r4
}
   b8dec:	b002      	add	sp, #8
   b8dee:	bd10      	pop	{r4, pc}

000b8df0 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b8df0:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b8df2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8df4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8df8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8dfc:	429a      	cmp	r2, r3
int TCPClient::read() {
   b8dfe:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8e00:	d008      	beq.n	b8e14 <_ZN9TCPClient4readEv+0x24>
   b8e02:	6963      	ldr	r3, [r4, #20]
   b8e04:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8e08:	1c51      	adds	r1, r2, #1
   b8e0a:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b8e0e:	4413      	add	r3, r2
   b8e10:	7918      	ldrb	r0, [r3, #4]
}
   b8e12:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8e14:	6803      	ldr	r3, [r0, #0]
   b8e16:	691b      	ldr	r3, [r3, #16]
   b8e18:	4798      	blx	r3
   b8e1a:	2800      	cmp	r0, #0
   b8e1c:	d1f1      	bne.n	b8e02 <_ZN9TCPClient4readEv+0x12>
   b8e1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8e22:	e7f6      	b.n	b8e12 <_ZN9TCPClient4readEv+0x22>

000b8e24 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b8e24:	4770      	bx	lr

000b8e26 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b8e26:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b8e28:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b8e2a:	43c0      	mvns	r0, r0
   b8e2c:	0fc0      	lsrs	r0, r0, #31
   b8e2e:	4770      	bx	lr

000b8e30 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8e30:	4770      	bx	lr
	...

000b8e34 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8e34:	4b06      	ldr	r3, [pc, #24]	; (b8e50 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8e36:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8e38:	b510      	push	{r4, lr}
   b8e3a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8e3e:	d005      	beq.n	b8e4c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8e40:	4608      	mov	r0, r1
   b8e42:	f000 fe69 	bl	b9b18 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8e46:	2800      	cmp	r0, #0
   b8e48:	bf08      	it	eq
   b8e4a:	2400      	moveq	r4, #0
      }
   b8e4c:	4620      	mov	r0, r4
   b8e4e:	bd10      	pop	{r4, pc}
   b8e50:	000bb550 	.word	0x000bb550

000b8e54 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8e54:	b510      	push	{r4, lr}
   b8e56:	21ac      	movs	r1, #172	; 0xac
   b8e58:	4604      	mov	r4, r0
   b8e5a:	f7fb f920 	bl	b409e <_ZdlPvj>
   b8e5e:	4620      	mov	r0, r4
   b8e60:	bd10      	pop	{r4, pc}

000b8e62 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b8e62:	21ac      	movs	r1, #172	; 0xac
   b8e64:	f7fb b91b 	b.w	b409e <_ZdlPvj>

000b8e68 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b8e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8e6c:	f04f 0800 	mov.w	r8, #0
   b8e70:	b086      	sub	sp, #24
   b8e72:	461c      	mov	r4, r3
   b8e74:	f8c0 8004 	str.w	r8, [r0, #4]
   b8e78:	4605      	mov	r5, r0
   b8e7a:	460e      	mov	r6, r1
   b8e7c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b8e7e:	4641      	mov	r1, r8
   b8e80:	2210      	movs	r2, #16
   b8e82:	a802      	add	r0, sp, #8
   b8e84:	f001 fc2a 	bl	ba6dc <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b8e88:	1c63      	adds	r3, r4, #1
   b8e8a:	d009      	beq.n	b8ea0 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b8e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8e90:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b8e94:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b8e98:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b8e9c:	435c      	muls	r4, r3
   b8e9e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b8ea0:	6968      	ldr	r0, [r5, #20]
   b8ea2:	2310      	movs	r3, #16
   b8ea4:	9300      	str	r3, [sp, #0]
   b8ea6:	6800      	ldr	r0, [r0, #0]
   b8ea8:	ab02      	add	r3, sp, #8
   b8eaa:	f241 0205 	movw	r2, #4101	; 0x1005
   b8eae:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8eb2:	f7fd fd09 	bl	b68c8 <sock_setsockopt>
    if (ret < 0) {
   b8eb6:	2800      	cmp	r0, #0
   b8eb8:	da07      	bge.n	b8eca <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b8eba:	f7fd ff55 	bl	b6d68 <__errno>
   b8ebe:	6803      	ldr	r3, [r0, #0]
   b8ec0:	606b      	str	r3, [r5, #4]
        return 0;
   b8ec2:	2000      	movs	r0, #0
}
   b8ec4:	b006      	add	sp, #24
   b8ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b8eca:	6968      	ldr	r0, [r5, #20]
   b8ecc:	2300      	movs	r3, #0
   b8ece:	6800      	ldr	r0, [r0, #0]
   b8ed0:	463a      	mov	r2, r7
   b8ed2:	4631      	mov	r1, r6
   b8ed4:	f7fd fd18 	bl	b6908 <sock_send>
    if (ret < 0) {
   b8ed8:	1e03      	subs	r3, r0, #0
   b8eda:	dbee      	blt.n	b8eba <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b8edc:	4618      	mov	r0, r3
   b8ede:	e7f1      	b.n	b8ec4 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b8ee0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b8ee0:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b8ee2:	6984      	ldr	r4, [r0, #24]
   b8ee4:	4b0a      	ldr	r3, [pc, #40]	; (b8f10 <_ZN9TCPClientD1Ev+0x30>)
   b8ee6:	6003      	str	r3, [r0, #0]
   b8ee8:	4605      	mov	r5, r0
   b8eea:	b17c      	cbz	r4, b8f0c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b8eec:	6863      	ldr	r3, [r4, #4]
   b8eee:	3b01      	subs	r3, #1
   b8ef0:	6063      	str	r3, [r4, #4]
   b8ef2:	b95b      	cbnz	r3, b8f0c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b8ef4:	6823      	ldr	r3, [r4, #0]
   b8ef6:	4620      	mov	r0, r4
   b8ef8:	689b      	ldr	r3, [r3, #8]
   b8efa:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8efc:	68a3      	ldr	r3, [r4, #8]
   b8efe:	3b01      	subs	r3, #1
   b8f00:	60a3      	str	r3, [r4, #8]
   b8f02:	b91b      	cbnz	r3, b8f0c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b8f04:	6823      	ldr	r3, [r4, #0]
   b8f06:	4620      	mov	r0, r4
   b8f08:	68db      	ldr	r3, [r3, #12]
   b8f0a:	4798      	blx	r3
   b8f0c:	4628      	mov	r0, r5
   b8f0e:	bd38      	pop	{r3, r4, r5, pc}
   b8f10:	000bb6b4 	.word	0x000bb6b4

000b8f14 <_ZN9TCPClientD0Ev>:
   b8f14:	b510      	push	{r4, lr}
   b8f16:	4604      	mov	r4, r0
   b8f18:	f7ff ffe2 	bl	b8ee0 <_ZN9TCPClientD1Ev>
   b8f1c:	4620      	mov	r0, r4
   b8f1e:	211c      	movs	r1, #28
   b8f20:	f7fb f8bd 	bl	b409e <_ZdlPvj>
   b8f24:	4620      	mov	r0, r4
   b8f26:	bd10      	pop	{r4, pc}

000b8f28 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b8f28:	b530      	push	{r4, r5, lr}
   b8f2a:	b087      	sub	sp, #28
   b8f2c:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b8f2e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b8f30:	4668      	mov	r0, sp
   b8f32:	f7ff fb07 	bl	b8544 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8f36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f38:	3404      	adds	r4, #4
   b8f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f3c:	682b      	ldr	r3, [r5, #0]
   b8f3e:	7023      	strb	r3, [r4, #0]
    }
   b8f40:	b007      	add	sp, #28
   b8f42:	bd30      	pop	{r4, r5, pc}

000b8f44 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b8f44:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b8f46:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b8f48:	4b05      	ldr	r3, [pc, #20]	; (b8f60 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b8f4a:	4604      	mov	r4, r0
   b8f4c:	358c      	adds	r5, #140	; 0x8c
   b8f4e:	f844 3b04 	str.w	r3, [r4], #4
   b8f52:	4606      	mov	r6, r0
   b8f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f58:	682b      	ldr	r3, [r5, #0]
   b8f5a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b8f5c:	4630      	mov	r0, r6
   b8f5e:	bd70      	pop	{r4, r5, r6, pc}
   b8f60:	000bb5fc 	.word	0x000bb5fc

000b8f64 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8f68:	4698      	mov	r8, r3
    stop();
   b8f6a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8f6c:	b093      	sub	sp, #76	; 0x4c
   b8f6e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b8f70:	2400      	movs	r4, #0
    stop();
   b8f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8f74:	4606      	mov	r6, r0
   b8f76:	4617      	mov	r7, r2
    stop();
   b8f78:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8f7a:	4628      	mov	r0, r5
   b8f7c:	466b      	mov	r3, sp
   b8f7e:	4622      	mov	r2, r4
   b8f80:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b8f82:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8f84:	f7fd fc98 	bl	b68b8 <netdb_getaddrinfo>
   b8f88:	4605      	mov	r5, r0
   b8f8a:	2800      	cmp	r0, #0
   b8f8c:	d163      	bne.n	b9056 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b8f8e:	9b00      	ldr	r3, [sp, #0]
   b8f90:	2b00      	cmp	r3, #0
   b8f92:	d04b      	beq.n	b902c <_ZN9TCPClient7connectEPKctm+0xc8>
   b8f94:	695b      	ldr	r3, [r3, #20]
   b8f96:	2b00      	cmp	r3, #0
   b8f98:	d048      	beq.n	b902c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b8f9a:	a806      	add	r0, sp, #24
   b8f9c:	f7ff fa8e 	bl	b84bc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8fa0:	9b00      	ldr	r3, [sp, #0]
   b8fa2:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b8fa4:	7863      	ldrb	r3, [r4, #1]
   b8fa6:	2b02      	cmp	r3, #2
   b8fa8:	d104      	bne.n	b8fb4 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b8faa:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b8fac:	a806      	add	r0, sp, #24
   b8fae:	f7ff ffbb 	bl	b8f28 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b8fb2:	e026      	b.n	b9002 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b8fb4:	2b0a      	cmp	r3, #10
   b8fb6:	d124      	bne.n	b9002 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b8fb8:	2211      	movs	r2, #17
   b8fba:	4629      	mov	r1, r5
   b8fbc:	a801      	add	r0, sp, #4
   b8fbe:	f001 fb8d 	bl	ba6dc <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8fc2:	68a3      	ldr	r3, [r4, #8]
   b8fc4:	2b00      	cmp	r3, #0
   b8fc6:	d038      	beq.n	b903a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8fc8:	f104 0308 	add.w	r3, r4, #8
   b8fcc:	f10d 0c04 	add.w	ip, sp, #4
   b8fd0:	3418      	adds	r4, #24
   b8fd2:	6818      	ldr	r0, [r3, #0]
   b8fd4:	6859      	ldr	r1, [r3, #4]
   b8fd6:	4662      	mov	r2, ip
   b8fd8:	c203      	stmia	r2!, {r0, r1}
   b8fda:	3308      	adds	r3, #8
   b8fdc:	42a3      	cmp	r3, r4
   b8fde:	4694      	mov	ip, r2
   b8fe0:	d1f7      	bne.n	b8fd2 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b8fe2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b8fe4:	a901      	add	r1, sp, #4
   b8fe6:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b8fe8:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b8fec:	f7ff fa74 	bl	b84d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8ff0:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8ff4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b8ff8:	ac07      	add	r4, sp, #28
   b8ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8ffc:	f8dc 3000 	ldr.w	r3, [ip]
   b9000:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b9002:	a806      	add	r0, sp, #24
   b9004:	f7ff fa7a 	bl	b84fc <_ZNK9IPAddresscvbEv>
        if (addr) {
   b9008:	b180      	cbz	r0, b902c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b900a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b900c:	ad07      	add	r5, sp, #28
   b900e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b9012:	4b12      	ldr	r3, [pc, #72]	; (b905c <_ZN9TCPClient7connectEPKctm+0xf8>)
   b9014:	930c      	str	r3, [sp, #48]	; 0x30
   b9016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9018:	ac0d      	add	r4, sp, #52	; 0x34
   b901a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b901c:	682b      	ldr	r3, [r5, #0]
   b901e:	7023      	strb	r3, [r4, #0]
   b9020:	463a      	mov	r2, r7
   b9022:	4643      	mov	r3, r8
   b9024:	a90c      	add	r1, sp, #48	; 0x30
   b9026:	4630      	mov	r0, r6
   b9028:	47c8      	blx	r9
   b902a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b902c:	9800      	ldr	r0, [sp, #0]
   b902e:	f7fd fc3b 	bl	b68a8 <netdb_freeaddrinfo>
}
   b9032:	4628      	mov	r0, r5
   b9034:	b013      	add	sp, #76	; 0x4c
   b9036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b903a:	68e3      	ldr	r3, [r4, #12]
   b903c:	2b00      	cmp	r3, #0
   b903e:	d1c3      	bne.n	b8fc8 <_ZN9TCPClient7connectEPKctm+0x64>
   b9040:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9044:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b9048:	f7fd fc1e 	bl	b6888 <inet_htonl>
   b904c:	4581      	cmp	r9, r0
   b904e:	d1bb      	bne.n	b8fc8 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b9050:	f104 0114 	add.w	r1, r4, #20
   b9054:	e7aa      	b.n	b8fac <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9056:	4625      	mov	r5, r4
   b9058:	e7e8      	b.n	b902c <_ZN9TCPClient7connectEPKctm+0xc8>
   b905a:	bf00      	nop
   b905c:	000bb5fc 	.word	0x000bb5fc

000b9060 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b9060:	b538      	push	{r3, r4, r5, lr}
   b9062:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b9064:	681a      	ldr	r2, [r3, #0]
   b9066:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b9068:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b906a:	da10      	bge.n	b908e <_ZN9TCPClient9connectedEv+0x2e>
   b906c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9070:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9074:	429a      	cmp	r2, r3
   b9076:	d10a      	bne.n	b908e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b9078:	6803      	ldr	r3, [r0, #0]
   b907a:	691b      	ldr	r3, [r3, #16]
   b907c:	4798      	blx	r3
        if (!rv) {
   b907e:	4604      	mov	r4, r0
   b9080:	b928      	cbnz	r0, b908e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b9082:	682b      	ldr	r3, [r5, #0]
   b9084:	4628      	mov	r0, r5
   b9086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9088:	4798      	blx	r3
        rv = available();
   b908a:	4620      	mov	r0, r4
}
   b908c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b908e:	2001      	movs	r0, #1
   b9090:	e7fc      	b.n	b908c <_ZN9TCPClient9connectedEv+0x2c>

000b9092 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b9092:	b510      	push	{r4, lr}
   b9094:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9096:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b909a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b909e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b90a0:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b90a2:	d005      	beq.n	b90b0 <_ZN9TCPClient4peekEv+0x1e>
   b90a4:	6963      	ldr	r3, [r4, #20]
   b90a6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b90aa:	4413      	add	r3, r2
   b90ac:	7918      	ldrb	r0, [r3, #4]
}
   b90ae:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b90b0:	6803      	ldr	r3, [r0, #0]
   b90b2:	691b      	ldr	r3, [r3, #16]
   b90b4:	4798      	blx	r3
   b90b6:	2800      	cmp	r0, #0
   b90b8:	d1f4      	bne.n	b90a4 <_ZN9TCPClient4peekEv+0x12>
   b90ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b90be:	e7f6      	b.n	b90ae <_ZN9TCPClient4peekEv+0x1c>

000b90c0 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b90c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b90c2:	6943      	ldr	r3, [r0, #20]
   b90c4:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b90c6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b90ca:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b90ce:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b90d0:	4605      	mov	r5, r0
   b90d2:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b90d4:	d016      	beq.n	b9104 <_ZN9TCPClient4readEPhj+0x44>
   b90d6:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b90d8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b90dc:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b90e0:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b90e2:	42bc      	cmp	r4, r7
   b90e4:	bf28      	it	cs
   b90e6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b90e8:	3304      	adds	r3, #4
   b90ea:	4622      	mov	r2, r4
   b90ec:	4419      	add	r1, r3
   b90ee:	4630      	mov	r0, r6
   b90f0:	f001 facc 	bl	ba68c <memcpy>
   b90f4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b90f6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b90fa:	4423      	add	r3, r4
   b90fc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b9100:	4620      	mov	r0, r4
   b9102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9104:	6803      	ldr	r3, [r0, #0]
   b9106:	691b      	ldr	r3, [r3, #16]
   b9108:	4798      	blx	r3
   b910a:	2800      	cmp	r0, #0
   b910c:	d1e3      	bne.n	b90d6 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b910e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9112:	e7f5      	b.n	b9100 <_ZN9TCPClient4readEPhj+0x40>

000b9114 <_ZN9TCPClient12flush_bufferEv>:
   b9114:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b9116:	2300      	movs	r3, #0
   b9118:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b911c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b911e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b9122:	4770      	bx	lr

000b9124 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9128:	461f      	mov	r7, r3
    stop();
   b912a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b912c:	460c      	mov	r4, r1
    stop();
   b912e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9130:	b08a      	sub	sp, #40	; 0x28
   b9132:	4605      	mov	r5, r0
   b9134:	4616      	mov	r6, r2
    stop();
   b9136:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b9138:	7d23      	ldrb	r3, [r4, #20]
   b913a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b913e:	2b04      	cmp	r3, #4
   b9140:	bf0c      	ite	eq
   b9142:	2002      	moveq	r0, #2
   b9144:	200a      	movne	r0, #10
   b9146:	2206      	movs	r2, #6
   b9148:	2101      	movs	r1, #1
   b914a:	f7fd fbe5 	bl	b6918 <sock_socket>
   b914e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b9152:	696b      	ldr	r3, [r5, #20]
   b9154:	681b      	ldr	r3, [r3, #0]
   b9156:	2b00      	cmp	r3, #0
   b9158:	da08      	bge.n	b916c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b915a:	682b      	ldr	r3, [r5, #0]
   b915c:	4628      	mov	r0, r5
   b915e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9160:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b9162:	4798      	blx	r3
}
   b9164:	4620      	mov	r0, r4
   b9166:	b00a      	add	sp, #40	; 0x28
   b9168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b916c:	4628      	mov	r0, r5
   b916e:	f7ff ffd1 	bl	b9114 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b9172:	b1b7      	cbz	r7, b91a2 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b9174:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9176:	a903      	add	r1, sp, #12
   b9178:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b917a:	9303      	str	r3, [sp, #12]
   b917c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9180:	f7fd fb72 	bl	b6868 <if_index_to_name>
   b9184:	2800      	cmp	r0, #0
   b9186:	d1e8      	bne.n	b915a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b9188:	6968      	ldr	r0, [r5, #20]
   b918a:	2306      	movs	r3, #6
   b918c:	9300      	str	r3, [sp, #0]
   b918e:	6800      	ldr	r0, [r0, #0]
   b9190:	ab03      	add	r3, sp, #12
   b9192:	f241 020b 	movw	r2, #4107	; 0x100b
   b9196:	f640 71ff 	movw	r1, #4095	; 0xfff
   b919a:	f7fd fb95 	bl	b68c8 <sock_setsockopt>
   b919e:	2800      	cmp	r0, #0
   b91a0:	d1db      	bne.n	b915a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b91a2:	221c      	movs	r2, #28
   b91a4:	2100      	movs	r1, #0
   b91a6:	a803      	add	r0, sp, #12
   b91a8:	f001 fa98 	bl	ba6dc <memset>
    if (ip.version() == 4) {
   b91ac:	7d23      	ldrb	r3, [r4, #20]
   b91ae:	2b04      	cmp	r3, #4
   b91b0:	d11d      	bne.n	b91ee <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b91b2:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b91b6:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b91b8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b91bc:	f7fd fb6c 	bl	b6898 <inet_htons>
   b91c0:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b91c4:	6860      	ldr	r0, [r4, #4]
   b91c6:	f7fd fb5f 	bl	b6888 <inet_htonl>
   b91ca:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b91cc:	696b      	ldr	r3, [r5, #20]
   b91ce:	221c      	movs	r2, #28
   b91d0:	6818      	ldr	r0, [r3, #0]
   b91d2:	a903      	add	r1, sp, #12
   b91d4:	f7fd fb88 	bl	b68e8 <sock_connect>
   b91d8:	2800      	cmp	r0, #0
   b91da:	d1be      	bne.n	b915a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b91dc:	3404      	adds	r4, #4
   b91de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b91e0:	696d      	ldr	r5, [r5, #20]
   b91e2:	358c      	adds	r5, #140	; 0x8c
   b91e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b91e6:	6823      	ldr	r3, [r4, #0]
   b91e8:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b91ea:	2401      	movs	r4, #1
   b91ec:	e7ba      	b.n	b9164 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b91ee:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b91f2:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b91f4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b91f8:	f7fd fb4e 	bl	b6898 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b91fc:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b91fe:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9202:	1d23      	adds	r3, r4, #4
   b9204:	f104 0714 	add.w	r7, r4, #20
   b9208:	6818      	ldr	r0, [r3, #0]
   b920a:	6859      	ldr	r1, [r3, #4]
   b920c:	4632      	mov	r2, r6
   b920e:	c203      	stmia	r2!, {r0, r1}
   b9210:	3308      	adds	r3, #8
   b9212:	42bb      	cmp	r3, r7
   b9214:	4616      	mov	r6, r2
   b9216:	d1f7      	bne.n	b9208 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b9218:	e7d8      	b.n	b91cc <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b921c <_ZN9TCPClient9availableEv>:
{
   b921c:	b530      	push	{r4, r5, lr}
   b921e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b9220:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b9224:	b08b      	sub	sp, #44	; 0x2c
   b9226:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b9228:	b12b      	cbz	r3, b9236 <_ZN9TCPClient9availableEv+0x1a>
   b922a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b922e:	429a      	cmp	r2, r3
   b9230:	d101      	bne.n	b9236 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b9232:	f7ff ff6f 	bl	b9114 <_ZN9TCPClient12flush_bufferEv>
   b9236:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b9238:	6808      	ldr	r0, [r1, #0]
   b923a:	2800      	cmp	r0, #0
   b923c:	db18      	blt.n	b9270 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b923e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b9242:	2d7f      	cmp	r5, #127	; 0x7f
   b9244:	d814      	bhi.n	b9270 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b9246:	3104      	adds	r1, #4
   b9248:	2308      	movs	r3, #8
   b924a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b924e:	4429      	add	r1, r5
   b9250:	f7fd fb52 	bl	b68f8 <sock_recv>
            if (ret > 0) {
   b9254:	2800      	cmp	r0, #0
   b9256:	dd13      	ble.n	b9280 <_ZN9TCPClient9availableEv+0x64>
   b9258:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b925a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b925e:	b90a      	cbnz	r2, b9264 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b9260:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b9264:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b9266:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b926a:	4410      	add	r0, r2
   b926c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b9270:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b9272:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b9276:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b927a:	1ac0      	subs	r0, r0, r3
   b927c:	b00b      	add	sp, #44	; 0x2c
   b927e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b9280:	f7fd fd72 	bl	b6d68 <__errno>
   b9284:	6803      	ldr	r3, [r0, #0]
   b9286:	2b0b      	cmp	r3, #11
   b9288:	d0f2      	beq.n	b9270 <_ZN9TCPClient9availableEv+0x54>
   b928a:	f7fd fd6d 	bl	b6d68 <__errno>
   b928e:	6803      	ldr	r3, [r0, #0]
   b9290:	2b0b      	cmp	r3, #11
   b9292:	d0ed      	beq.n	b9270 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b9294:	2320      	movs	r3, #32
   b9296:	2500      	movs	r5, #0
   b9298:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b929c:	f7fd fd64 	bl	b6d68 <__errno>
   b92a0:	6803      	ldr	r3, [r0, #0]
   b92a2:	9301      	str	r3, [sp, #4]
   b92a4:	4b08      	ldr	r3, [pc, #32]	; (b92c8 <_ZN9TCPClient9availableEv+0xac>)
   b92a6:	4909      	ldr	r1, [pc, #36]	; (b92cc <_ZN9TCPClient9availableEv+0xb0>)
   b92a8:	9300      	str	r3, [sp, #0]
   b92aa:	aa02      	add	r2, sp, #8
   b92ac:	462b      	mov	r3, r5
   b92ae:	2032      	movs	r0, #50	; 0x32
   b92b0:	f7fd fc1a 	bl	b6ae8 <log_message>
                    sock_close(d_->sock);
   b92b4:	6963      	ldr	r3, [r4, #20]
   b92b6:	6818      	ldr	r0, [r3, #0]
   b92b8:	f7fd fb0e 	bl	b68d8 <sock_close>
   b92bc:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b92be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b92c2:	601a      	str	r2, [r3, #0]
   b92c4:	e7d4      	b.n	b9270 <_ZN9TCPClient9availableEv+0x54>
   b92c6:	bf00      	nop
   b92c8:	000bb67e 	.word	0x000bb67e
   b92cc:	000bb650 	.word	0x000bb650

000b92d0 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b92d0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b92d2:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b92d4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b92d6:	6818      	ldr	r0, [r3, #0]
   b92d8:	2800      	cmp	r0, #0
   b92da:	db01      	blt.n	b92e0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b92dc:	f7fd fafc 	bl	b68d8 <sock_close>
   b92e0:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b92e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b92e6:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b92e8:	6960      	ldr	r0, [r4, #20]
   b92ea:	2211      	movs	r2, #17
   b92ec:	2100      	movs	r1, #0
   b92ee:	308c      	adds	r0, #140	; 0x8c
   b92f0:	f001 f9f4 	bl	ba6dc <memset>
    flush_buffer();
   b92f4:	4620      	mov	r0, r4
}
   b92f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b92fa:	f7ff bf0b 	b.w	b9114 <_ZN9TCPClient12flush_bufferEv>

000b92fe <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b92fe:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b9300:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b9302:	4604      	mov	r4, r0
          total(0) {
   b9304:	6001      	str	r1, [r0, #0]
   b9306:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b930a:	3088      	adds	r0, #136	; 0x88
   b930c:	f7ff f8d6 	bl	b84bc <_ZN9IPAddressC1Ev>
}
   b9310:	4620      	mov	r0, r4
   b9312:	bd10      	pop	{r4, pc}

000b9314 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b9314:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9316:	2300      	movs	r3, #0
   b9318:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b931c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b9320:	4a0e      	ldr	r2, [pc, #56]	; (b935c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b9322:	6103      	str	r3, [r0, #16]
   b9324:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9326:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b9328:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b932a:	20ac      	movs	r0, #172	; 0xac
   b932c:	9101      	str	r1, [sp, #4]
   b932e:	f7fa feb2 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9332:	1e05      	subs	r5, r0, #0
   b9334:	f105 060c 	add.w	r6, r5, #12
   b9338:	d008      	beq.n	b934c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b933a:	2301      	movs	r3, #1
   b933c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9340:	4b07      	ldr	r3, [pc, #28]	; (b9360 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9342:	9901      	ldr	r1, [sp, #4]
   b9344:	602b      	str	r3, [r5, #0]
   b9346:	4630      	mov	r0, r6
   b9348:	f7ff ffd9 	bl	b92fe <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b934c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b934e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b9352:	f7ff fedf 	bl	b9114 <_ZN9TCPClient12flush_bufferEv>
}
   b9356:	b002      	add	sp, #8
   b9358:	bd70      	pop	{r4, r5, r6, pc}
   b935a:	bf00      	nop
   b935c:	000bb6b4 	.word	0x000bb6b4
   b9360:	000bb698 	.word	0x000bb698

000b9364 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b9364:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b9366:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b936a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b936c:	f7ff ffd2 	bl	b9314 <_ZN9TCPClientC1Ei>
}
   b9370:	4620      	mov	r0, r4
   b9372:	bd10      	pop	{r4, pc}

000b9374 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b9374:	b510      	push	{r4, lr}
   b9376:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b9378:	6800      	ldr	r0, [r0, #0]
   b937a:	2800      	cmp	r0, #0
   b937c:	db01      	blt.n	b9382 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b937e:	f7fd faab 	bl	b68d8 <sock_close>
    }
}
   b9382:	4620      	mov	r0, r4
   b9384:	bd10      	pop	{r4, pc}

000b9386 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b9386:	300c      	adds	r0, #12
   b9388:	f7ff bff4 	b.w	b9374 <_ZN9TCPClient4DataD1Ev>

000b938c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b938c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b938e:	2000      	movs	r0, #0
   b9390:	f7fd fc3a 	bl	b6c08 <spark_sync_time_pending>
   b9394:	b128      	cbz	r0, b93a2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b9396:	f7fd fc2f 	bl	b6bf8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b939a:	f080 0001 	eor.w	r0, r0, #1
   b939e:	b2c0      	uxtb	r0, r0
    }
   b93a0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b93a2:	2001      	movs	r0, #1
   b93a4:	e7fc      	b.n	b93a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b93a6 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   b93a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b93a8:	4602      	mov	r2, r0
   b93aa:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   b93ac:	4668      	mov	r0, sp
    struct timeval tv = {
   b93ae:	2100      	movs	r1, #0
    };
   b93b0:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   b93b4:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   b93b8:	f7fd f9d6 	bl	b6768 <hal_rtc_set_time>
   b93bc:	4602      	mov	r2, r0
   b93be:	b910      	cbnz	r0, b93c6 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   b93c0:	4601      	mov	r1, r0
   b93c2:	f7fd fbd9 	bl	b6b78 <system_notify_time_changed>
    }
}
   b93c6:	b005      	add	sp, #20
   b93c8:	f85d fb04 	ldr.w	pc, [sp], #4

000b93cc <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b93cc:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b93ce:	2000      	movs	r0, #0
   b93d0:	f7fd f9ba 	bl	b6748 <hal_rtc_time_is_valid>
    if (rtcstate)
   b93d4:	4604      	mov	r4, r0
   b93d6:	b9a0      	cbnz	r0, b9402 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b93d8:	f7fd fb8e 	bl	b6af8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b93dc:	2801      	cmp	r0, #1
   b93de:	d110      	bne.n	b9402 <_ZN9TimeClass7isValidEv+0x36>
   b93e0:	4620      	mov	r0, r4
   b93e2:	f7fd fbc1 	bl	b6b68 <system_thread_get_state>
   b93e6:	b960      	cbnz	r0, b9402 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b93e8:	f7ff ffd0 	bl	b938c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b93ec:	b910      	cbnz	r0, b93f4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b93ee:	f7fd fbf3 	bl	b6bd8 <spark_process>
        while (_while() && !_condition()) {
   b93f2:	e7f9      	b.n	b93e8 <_ZN9TimeClass7isValidEv+0x1c>
   b93f4:	f7ff ffca 	bl	b938c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b93f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b93fc:	2000      	movs	r0, #0
   b93fe:	f7fd b9a3 	b.w	b6748 <hal_rtc_time_is_valid>
}
   b9402:	4620      	mov	r0, r4
   b9404:	bd10      	pop	{r4, pc}

000b9406 <_ZN9TimeClass3nowEv>:
{
   b9406:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b9408:	f7ff ffe0 	bl	b93cc <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b940c:	2210      	movs	r2, #16
   b940e:	2100      	movs	r1, #0
   b9410:	4668      	mov	r0, sp
   b9412:	f001 f963 	bl	ba6dc <memset>
    hal_rtc_get_time(&tv, nullptr);
   b9416:	2100      	movs	r1, #0
   b9418:	4668      	mov	r0, sp
   b941a:	f7fd f99d 	bl	b6758 <hal_rtc_get_time>
}
   b941e:	9800      	ldr	r0, [sp, #0]
   b9420:	b005      	add	sp, #20
   b9422:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9428 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9428:	4b02      	ldr	r3, [pc, #8]	; (b9434 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b942a:	681a      	ldr	r2, [r3, #0]
   b942c:	4b02      	ldr	r3, [pc, #8]	; (b9438 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b942e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9430:	4770      	bx	lr
   b9432:	bf00      	nop
   b9434:	20031b94 	.word	0x20031b94
   b9438:	2003e6f4 	.word	0x2003e6f4

000b943c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b943c:	4770      	bx	lr

000b943e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b943e:	7441      	strb	r1, [r0, #17]
}
   b9440:	4770      	bx	lr

000b9442 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b9442:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9444:	7c00      	ldrb	r0, [r0, #16]
   b9446:	f7fd faef 	bl	b6a28 <hal_usart_available_data_for_write>
}
   b944a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b944e:	bd08      	pop	{r3, pc}

000b9450 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9450:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b9452:	7c00      	ldrb	r0, [r0, #16]
   b9454:	f7fd fac0 	bl	b69d8 <hal_usart_available>
}
   b9458:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b945c:	bd08      	pop	{r3, pc}

000b945e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b945e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9460:	7c00      	ldrb	r0, [r0, #16]
   b9462:	f7fd fac9 	bl	b69f8 <hal_usart_peek>
}
   b9466:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b946a:	bd08      	pop	{r3, pc}

000b946c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b946c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b946e:	7c00      	ldrb	r0, [r0, #16]
   b9470:	f7fd faba 	bl	b69e8 <hal_usart_read>
}
   b9474:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9478:	bd08      	pop	{r3, pc}

000b947a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b947a:	7c00      	ldrb	r0, [r0, #16]
   b947c:	f7fd bac4 	b.w	b6a08 <hal_usart_flush>

000b9480 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b9480:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9482:	7c45      	ldrb	r5, [r0, #17]
{
   b9484:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9486:	b12d      	cbz	r5, b9494 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b9488:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b948a:	b003      	add	sp, #12
   b948c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b9490:	f7fd ba9a 	b.w	b69c8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9494:	7c00      	ldrb	r0, [r0, #16]
   b9496:	9101      	str	r1, [sp, #4]
   b9498:	f7fd fac6 	bl	b6a28 <hal_usart_available_data_for_write>
   b949c:	2800      	cmp	r0, #0
   b949e:	9901      	ldr	r1, [sp, #4]
   b94a0:	dcf2      	bgt.n	b9488 <_ZN11USARTSerial5writeEh+0x8>
}
   b94a2:	4628      	mov	r0, r5
   b94a4:	b003      	add	sp, #12
   b94a6:	bd30      	pop	{r4, r5, pc}

000b94a8 <_ZN11USARTSerialD0Ev>:
   b94a8:	b510      	push	{r4, lr}
   b94aa:	2114      	movs	r1, #20
   b94ac:	4604      	mov	r4, r0
   b94ae:	f7fa fdf6 	bl	b409e <_ZdlPvj>
   b94b2:	4620      	mov	r0, r4
   b94b4:	bd10      	pop	{r4, pc}
	...

000b94b8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b94b8:	b510      	push	{r4, lr}
   b94ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b94be:	4604      	mov	r4, r0
   b94c0:	4608      	mov	r0, r1
   b94c2:	4611      	mov	r1, r2
   b94c4:	2200      	movs	r2, #0
   b94c6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b94ca:	4b04      	ldr	r3, [pc, #16]	; (b94dc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b94cc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b94ce:	2301      	movs	r3, #1
  _serial = serial;
   b94d0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b94d2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b94d4:	f7fd fab0 	bl	b6a38 <hal_usart_init_ex>
}
   b94d8:	4620      	mov	r0, r4
   b94da:	bd10      	pop	{r4, pc}
   b94dc:	000bb71c 	.word	0x000bb71c

000b94e0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b94e0:	7441      	strb	r1, [r0, #17]
}
   b94e2:	4770      	bx	lr

000b94e4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b94e4:	4770      	bx	lr

000b94e6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b94e6:	4770      	bx	lr

000b94e8 <_ZN9USBSerial4readEv>:
{
   b94e8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b94ea:	2100      	movs	r1, #0
   b94ec:	7c00      	ldrb	r0, [r0, #16]
   b94ee:	f7fd facb 	bl	b6a88 <HAL_USB_USART_Receive_Data>
}
   b94f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b94f6:	bd08      	pop	{r3, pc}

000b94f8 <_ZN9USBSerial4peekEv>:
{
   b94f8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b94fa:	2101      	movs	r1, #1
   b94fc:	7c00      	ldrb	r0, [r0, #16]
   b94fe:	f7fd fac3 	bl	b6a88 <HAL_USB_USART_Receive_Data>
}
   b9502:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9506:	bd08      	pop	{r3, pc}

000b9508 <_ZN9USBSerial17availableForWriteEv>:
{
   b9508:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b950a:	7c00      	ldrb	r0, [r0, #16]
   b950c:	f7fd fab4 	bl	b6a78 <HAL_USB_USART_Available_Data_For_Write>
}
   b9510:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9514:	bd08      	pop	{r3, pc}

000b9516 <_ZN9USBSerial9availableEv>:
{
   b9516:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b9518:	7c00      	ldrb	r0, [r0, #16]
   b951a:	f7fd faa5 	bl	b6a68 <HAL_USB_USART_Available_Data>
}
   b951e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9522:	bd08      	pop	{r3, pc}

000b9524 <_ZN9USBSerial5writeEh>:
{
   b9524:	b513      	push	{r0, r1, r4, lr}
   b9526:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9528:	7c00      	ldrb	r0, [r0, #16]
{
   b952a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b952c:	f7fd faa4 	bl	b6a78 <HAL_USB_USART_Available_Data_For_Write>
   b9530:	2800      	cmp	r0, #0
   b9532:	9901      	ldr	r1, [sp, #4]
   b9534:	dc01      	bgt.n	b953a <_ZN9USBSerial5writeEh+0x16>
   b9536:	7c60      	ldrb	r0, [r4, #17]
   b9538:	b120      	cbz	r0, b9544 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b953a:	7c20      	ldrb	r0, [r4, #16]
   b953c:	f7fd faac 	bl	b6a98 <HAL_USB_USART_Send_Data>
   b9540:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b9544:	b002      	add	sp, #8
   b9546:	bd10      	pop	{r4, pc}

000b9548 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b9548:	7c00      	ldrb	r0, [r0, #16]
   b954a:	f7fd baad 	b.w	b6aa8 <HAL_USB_USART_Flush_Data>

000b954e <_ZN9USBSerialD0Ev>:
   b954e:	b510      	push	{r4, lr}
   b9550:	2114      	movs	r1, #20
   b9552:	4604      	mov	r4, r0
   b9554:	f7fa fda3 	bl	b409e <_ZdlPvj>
   b9558:	4620      	mov	r0, r4
   b955a:	bd10      	pop	{r4, pc}

000b955c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b955c:	b510      	push	{r4, lr}
   b955e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9562:	4604      	mov	r4, r0
   b9564:	4608      	mov	r0, r1
   b9566:	2100      	movs	r1, #0
   b9568:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b956c:	4b04      	ldr	r3, [pc, #16]	; (b9580 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b956e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9570:	2301      	movs	r3, #1
  _serial = serial;
   b9572:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9574:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b9576:	4611      	mov	r1, r2
   b9578:	f7fd fa66 	bl	b6a48 <HAL_USB_USART_Init>
}
   b957c:	4620      	mov	r0, r4
   b957e:	bd10      	pop	{r4, pc}
   b9580:	000bb74c 	.word	0x000bb74c

000b9584 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b9584:	7c00      	ldrb	r0, [r0, #16]
   b9586:	2200      	movs	r2, #0
   b9588:	f7fd ba66 	b.w	b6a58 <HAL_USB_USART_Begin>

000b958c <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b958c:	7c00      	ldrb	r0, [r0, #16]
   b958e:	f7fd ba93 	b.w	b6ab8 <HAL_USB_USART_Is_Connected>

000b9592 <_Z19acquireSerialBufferv>:
{
   b9592:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b9594:	2214      	movs	r2, #20
{
   b9596:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b9598:	2100      	movs	r1, #0
   b959a:	f001 f89f 	bl	ba6dc <memset>
}
   b959e:	4620      	mov	r0, r4
   b95a0:	bd10      	pop	{r4, pc}
	...

000b95a4 <_Z16_fetch_usbserialv>:
{
   b95a4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b95a6:	4c0f      	ldr	r4, [pc, #60]	; (b95e4 <_Z16_fetch_usbserialv+0x40>)
{
   b95a8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b95aa:	a803      	add	r0, sp, #12
   b95ac:	f7ff fff1 	bl	b9592 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b95b0:	7821      	ldrb	r1, [r4, #0]
   b95b2:	f3bf 8f5b 	dmb	ish
   b95b6:	f011 0101 	ands.w	r1, r1, #1
   b95ba:	d10f      	bne.n	b95dc <_Z16_fetch_usbserialv+0x38>
   b95bc:	4620      	mov	r0, r4
   b95be:	9101      	str	r1, [sp, #4]
   b95c0:	f7fa fd6f 	bl	b40a2 <__cxa_guard_acquire>
   b95c4:	9901      	ldr	r1, [sp, #4]
   b95c6:	b148      	cbz	r0, b95dc <_Z16_fetch_usbserialv+0x38>
   b95c8:	aa03      	add	r2, sp, #12
   b95ca:	4807      	ldr	r0, [pc, #28]	; (b95e8 <_Z16_fetch_usbserialv+0x44>)
   b95cc:	f7ff ffc6 	bl	b955c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b95d0:	4620      	mov	r0, r4
   b95d2:	f7fa fd6b 	bl	b40ac <__cxa_guard_release>
   b95d6:	4805      	ldr	r0, [pc, #20]	; (b95ec <_Z16_fetch_usbserialv+0x48>)
   b95d8:	f001 f826 	bl	ba628 <atexit>
	return _usbserial;
}
   b95dc:	4802      	ldr	r0, [pc, #8]	; (b95e8 <_Z16_fetch_usbserialv+0x44>)
   b95de:	b008      	add	sp, #32
   b95e0:	bd10      	pop	{r4, pc}
   b95e2:	bf00      	nop
   b95e4:	2003e6f8 	.word	0x2003e6f8
   b95e8:	2003e6fc 	.word	0x2003e6fc
   b95ec:	000b94e5 	.word	0x000b94e5

000b95f0 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv>:
                results[index++] = *result;
            }
        }

    protected:
        static void callback(WiFiAccessPoint* result, void* cookie)
   b95f0:	b530      	push	{r4, r5, lr}
            if (index<count) {
   b95f2:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   b95f6:	4293      	cmp	r3, r2
   b95f8:	da10      	bge.n	b961c <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv+0x2c>
                results[index++] = *result;
   b95fa:	680d      	ldr	r5, [r1, #0]
   b95fc:	1c5a      	adds	r2, r3, #1
   b95fe:	604a      	str	r2, [r1, #4]
   b9600:	4604      	mov	r4, r0
   b9602:	2238      	movs	r2, #56	; 0x38
   b9604:	fb02 5503 	mla	r5, r2, r3, r5
   b9608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b960a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b960c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b960e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9612:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9614:	e894 0003 	ldmia.w	r4, {r0, r1}
   b9618:	e885 0003 	stmia.w	r5, {r0, r1}
        {
            ((APArrayPopulator*)cookie)->addResult(result);
        }
   b961c:	bd30      	pop	{r4, r5, pc}

000b961e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b961e:	2200      	movs	r2, #0
   b9620:	6840      	ldr	r0, [r0, #4]
   b9622:	4611      	mov	r1, r2
   b9624:	f7fd bb38 	b.w	b6c98 <network_listening>

000b9628 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9628:	2200      	movs	r2, #0
   b962a:	6840      	ldr	r0, [r0, #4]
   b962c:	4611      	mov	r1, r2
   b962e:	f7fd bb5b 	b.w	b6ce8 <network_get_listen_timeout>

000b9632 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9632:	6840      	ldr	r0, [r0, #4]
   b9634:	2200      	movs	r2, #0
   b9636:	f7fd bb4f 	b.w	b6cd8 <network_set_listen_timeout>

000b963a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b963a:	6840      	ldr	r0, [r0, #4]
   b963c:	2200      	movs	r2, #0
   b963e:	f081 0101 	eor.w	r1, r1, #1
   b9642:	f7fd bb21 	b.w	b6c88 <network_listen>

000b9646 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9646:	2200      	movs	r2, #0
   b9648:	6840      	ldr	r0, [r0, #4]
   b964a:	4611      	mov	r1, r2
   b964c:	f7fd baf4 	b.w	b6c38 <network_connecting>

000b9650 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9650:	6840      	ldr	r0, [r0, #4]
   b9652:	2200      	movs	r2, #0
   b9654:	2102      	movs	r1, #2
   b9656:	f7fd baf7 	b.w	b6c48 <network_disconnect>
	...

000b965c <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>:
        APScan apScan(results, result_count);
        return apScan.start();
    }

#if !HAL_PLATFORM_WIFI_SCAN_ONLY
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
   b965c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
            this->index = 0;
   b965e:	2300      	movs	r3, #0
            this->results = results;
   b9660:	9101      	str	r1, [sp, #4]
            return std::min(count, wlan_get_credentials(callback, this));
   b9662:	4806      	ldr	r0, [pc, #24]	; (b967c <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj+0x20>)
            this->index = 0;
   b9664:	9302      	str	r3, [sp, #8]
            return std::min(count, wlan_get_credentials(callback, this));
   b9666:	a901      	add	r1, sp, #4
            this->count = size;
   b9668:	9203      	str	r2, [sp, #12]
            return std::min(count, wlan_get_credentials(callback, this));
   b966a:	f7fd fa2d 	bl	b6ac8 <wlan_get_credentials>
        APList apList(results, result_count);
        return apList.start();
    }
   b966e:	9b03      	ldr	r3, [sp, #12]
   b9670:	4298      	cmp	r0, r3
   b9672:	bfa8      	it	ge
   b9674:	4618      	movge	r0, r3
   b9676:	b005      	add	sp, #20
   b9678:	f85d fb04 	ldr.w	pc, [sp], #4
   b967c:	000b95f1 	.word	0x000b95f1

000b9680 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9680:	4b02      	ldr	r3, [pc, #8]	; (b968c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b9682:	2204      	movs	r2, #4
   b9684:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b9686:	4a02      	ldr	r2, [pc, #8]	; (b9690 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b9688:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b968a:	4770      	bx	lr
   b968c:	2003e710 	.word	0x2003e710
   b9690:	000bb77c 	.word	0x000bb77c

000b9694 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b9694:	b510      	push	{r4, lr}
   b9696:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b9698:	f001 f868 	bl	ba76c <strlen>
   b969c:	3801      	subs	r0, #1
   b969e:	1823      	adds	r3, r4, r0
   b96a0:	4620      	mov	r0, r4
	while(i<j){
   b96a2:	4283      	cmp	r3, r0
   b96a4:	d906      	bls.n	b96b4 <_Z11str_reversePc+0x20>
		c = *i;
   b96a6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b96a8:	7819      	ldrb	r1, [r3, #0]
   b96aa:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b96ae:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b96b2:	e7f6      	b.n	b96a2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b96b4:	bd10      	pop	{r4, pc}

000b96b6 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b96b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b96ba:	1e93      	subs	r3, r2, #2
{
   b96bc:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b96be:	2b22      	cmp	r3, #34	; 0x22
   b96c0:	f04f 0300 	mov.w	r3, #0
{
   b96c4:	460d      	mov	r5, r1
   b96c6:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b96c8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b96cc:	d927      	bls.n	b971e <ltoa+0x68>

      if (10 == base && N < 0L)
   b96ce:	2800      	cmp	r0, #0
   b96d0:	da2a      	bge.n	b9728 <ltoa+0x72>
      {
            *head++ = '-';
   b96d2:	462e      	mov	r6, r5
   b96d4:	232d      	movs	r3, #45	; 0x2d
   b96d6:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b96da:	4240      	negs	r0, r0
   b96dc:	240a      	movs	r4, #10
      *tail-- = '\0';
   b96de:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b96e2:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b96e6:	4622      	mov	r2, r4
   b96e8:	4601      	mov	r1, r0
   b96ea:	a801      	add	r0, sp, #4
   b96ec:	f000 ffaa 	bl	ba644 <ldiv>
   b96f0:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b96f2:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b96f4:	2b09      	cmp	r3, #9
   b96f6:	bfcc      	ite	gt
   b96f8:	2237      	movgt	r2, #55	; 0x37
   b96fa:	2230      	movle	r2, #48	; 0x30
   b96fc:	fa52 f383 	uxtab	r3, r2, r3
   b9700:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b9704:	f108 0801 	add.w	r8, r8, #1
   b9708:	2800      	cmp	r0, #0
   b970a:	d1ec      	bne.n	b96e6 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b970c:	4642      	mov	r2, r8
   b970e:	1c79      	adds	r1, r7, #1
   b9710:	4630      	mov	r0, r6
   b9712:	f000 ffbb 	bl	ba68c <memcpy>
      return str;
}
   b9716:	4628      	mov	r0, r5
   b9718:	b00c      	add	sp, #48	; 0x30
   b971a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b971e:	2a0a      	cmp	r2, #10
   b9720:	d0d5      	beq.n	b96ce <ltoa+0x18>
      if (uarg)
   b9722:	b118      	cbz	r0, b972c <ltoa+0x76>
   b9724:	462e      	mov	r6, r5
   b9726:	e7da      	b.n	b96de <ltoa+0x28>
   b9728:	240a      	movs	r4, #10
   b972a:	e7fa      	b.n	b9722 <ltoa+0x6c>
      else  *tail-- = '0';
   b972c:	2330      	movs	r3, #48	; 0x30
   b972e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b9732:	462e      	mov	r6, r5
   b9734:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b9738:	f04f 0802 	mov.w	r8, #2
   b973c:	e7e6      	b.n	b970c <ltoa+0x56>

000b973e <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b973e:	b570      	push	{r4, r5, r6, lr}
   b9740:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b9742:	1e91      	subs	r1, r2, #2
   b9744:	2922      	cmp	r1, #34	; 0x22
   b9746:	d81d      	bhi.n	b9784 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b9748:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b974a:	b930      	cbnz	r0, b975a <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b974c:	4423      	add	r3, r4
            *ptr++ = '0';
   b974e:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b9750:	429d      	cmp	r5, r3
   b9752:	d210      	bcs.n	b9776 <ultoa+0x38>
            *ptr++ = '0';
   b9754:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b9758:	e7fa      	b.n	b9750 <ultoa+0x12>
            result.quot = a/radix;
   b975a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b975e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b9762:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b9764:	2809      	cmp	r0, #9
                *ptr += '0';
   b9766:	bf94      	ite	ls
   b9768:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b976a:	3157      	addhi	r1, #87	; 0x57
   b976c:	b2c9      	uxtb	r1, r1
   b976e:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b9772:	4630      	mov	r0, r6
	while(a){
   b9774:	e7e9      	b.n	b974a <ultoa+0xc>

	*ptr = '\0';
   b9776:	2300      	movs	r3, #0
	str_reverse(buffer);
   b9778:	4620      	mov	r0, r4
	*ptr = '\0';
   b977a:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b977c:	f7ff ff8a 	bl	b9694 <_Z11str_reversePc>
	return buffer;
   b9780:	4620      	mov	r0, r4
}
   b9782:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b9784:	2000      	movs	r0, #0
   b9786:	e7fc      	b.n	b9782 <ultoa+0x44>

000b9788 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b9788:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b978a:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b978c:	460c      	mov	r4, r1
   b978e:	4615      	mov	r5, r2
	if(a<0){
   b9790:	da0e      	bge.n	b97b0 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b9792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b9796:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b979a:	bf14      	ite	ne
   b979c:	4258      	negne	r0, r3
   b979e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b97a0:	2301      	movs	r3, #1
		*buffer = '-';
   b97a2:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b97a4:	462a      	mov	r2, r5
   b97a6:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b97a8:	f7ff ffc9 	bl	b973e <ultoa>
	}
	return buffer;
}
   b97ac:	4620      	mov	r0, r4
   b97ae:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b97b0:	2301      	movs	r3, #1
   b97b2:	e7f9      	b.n	b97a8 <itoa+0x20>

000b97b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b97b4:	4b01      	ldr	r3, [pc, #4]	; (b97bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b97b6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b97b8:	4770      	bx	lr
   b97ba:	bf00      	nop
   b97bc:	20031b98 	.word	0x20031b98

000b97c0 <serialEventRun>:
{
   b97c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b97c2:	4b0b      	ldr	r3, [pc, #44]	; (b97f0 <serialEventRun+0x30>)
   b97c4:	b143      	cbz	r3, b97d8 <serialEventRun+0x18>
   b97c6:	f7ff feed 	bl	b95a4 <_Z16_fetch_usbserialv>
   b97ca:	6803      	ldr	r3, [r0, #0]
   b97cc:	691b      	ldr	r3, [r3, #16]
   b97ce:	4798      	blx	r3
   b97d0:	2800      	cmp	r0, #0
   b97d2:	dd01      	ble.n	b97d8 <serialEventRun+0x18>
        serialEvent();
   b97d4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b97d8:	4b06      	ldr	r3, [pc, #24]	; (b97f4 <serialEventRun+0x34>)
   b97da:	b143      	cbz	r3, b97ee <serialEventRun+0x2e>
   b97dc:	f000 f970 	bl	b9ac0 <_Z22__fetch_global_Serial1v>
   b97e0:	6803      	ldr	r3, [r0, #0]
   b97e2:	691b      	ldr	r3, [r3, #16]
   b97e4:	4798      	blx	r3
   b97e6:	2800      	cmp	r0, #0
   b97e8:	dd01      	ble.n	b97ee <serialEventRun+0x2e>
        serialEvent1();
   b97ea:	f3af 8000 	nop.w
}
   b97ee:	bd08      	pop	{r3, pc}
	...

000b97f8 <_post_loop>:
{
   b97f8:	b508      	push	{r3, lr}
	serialEventRun();
   b97fa:	f7ff ffe1 	bl	b97c0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b97fe:	f7fc ff83 	bl	b6708 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b9802:	4b01      	ldr	r3, [pc, #4]	; (b9808 <_post_loop+0x10>)
   b9804:	6018      	str	r0, [r3, #0]
}
   b9806:	bd08      	pop	{r3, pc}
   b9808:	2003e720 	.word	0x2003e720

000b980c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b980c:	4805      	ldr	r0, [pc, #20]	; (b9824 <_Z33system_initialize_user_backup_ramv+0x18>)
   b980e:	4a06      	ldr	r2, [pc, #24]	; (b9828 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9810:	4906      	ldr	r1, [pc, #24]	; (b982c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b9812:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9814:	1a12      	subs	r2, r2, r0
   b9816:	f000 ff39 	bl	ba68c <memcpy>
    __backup_sram_signature = signature;
   b981a:	4b05      	ldr	r3, [pc, #20]	; (b9830 <_Z33system_initialize_user_backup_ramv+0x24>)
   b981c:	4a05      	ldr	r2, [pc, #20]	; (b9834 <_Z33system_initialize_user_backup_ramv+0x28>)
   b981e:	601a      	str	r2, [r3, #0]
}
   b9820:	bd08      	pop	{r3, pc}
   b9822:	bf00      	nop
   b9824:	2003f400 	.word	0x2003f400
   b9828:	2003f404 	.word	0x2003f404
   b982c:	000bba40 	.word	0x000bba40
   b9830:	2003f400 	.word	0x2003f400
   b9834:	9a271c1e 	.word	0x9a271c1e

000b9838 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b9838:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b983a:	2300      	movs	r3, #0
   b983c:	9300      	str	r3, [sp, #0]
   b983e:	461a      	mov	r2, r3
   b9840:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9844:	f7fd f9aa 	bl	b6b9c <system_ctrl_set_result>
}
   b9848:	b003      	add	sp, #12
   b984a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9850 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b9850:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b9852:	8843      	ldrh	r3, [r0, #2]
   b9854:	2b0a      	cmp	r3, #10
   b9856:	d008      	beq.n	b986a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b9858:	2b50      	cmp	r3, #80	; 0x50
   b985a:	d10b      	bne.n	b9874 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b985c:	4b09      	ldr	r3, [pc, #36]	; (b9884 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b985e:	681b      	ldr	r3, [r3, #0]
   b9860:	b14b      	cbz	r3, b9876 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b9862:	b003      	add	sp, #12
   b9864:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b9868:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b986a:	f7ff ffe5 	bl	b9838 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b986e:	b003      	add	sp, #12
   b9870:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9874:	2300      	movs	r3, #0
   b9876:	9300      	str	r3, [sp, #0]
   b9878:	461a      	mov	r2, r3
   b987a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b987e:	f7fd f98d 	bl	b6b9c <system_ctrl_set_result>
}
   b9882:	e7f4      	b.n	b986e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b9884:	2003e71c 	.word	0x2003e71c

000b9888 <module_user_init_hook>:
{
   b9888:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b988a:	4812      	ldr	r0, [pc, #72]	; (b98d4 <module_user_init_hook+0x4c>)
   b988c:	2100      	movs	r1, #0
   b988e:	f7fd fa7b 	bl	b6d88 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b9892:	4b11      	ldr	r3, [pc, #68]	; (b98d8 <module_user_init_hook+0x50>)
   b9894:	681a      	ldr	r2, [r3, #0]
   b9896:	4b11      	ldr	r3, [pc, #68]	; (b98dc <module_user_init_hook+0x54>)
   b9898:	429a      	cmp	r2, r3
   b989a:	4b11      	ldr	r3, [pc, #68]	; (b98e0 <module_user_init_hook+0x58>)
   b989c:	bf0c      	ite	eq
   b989e:	2201      	moveq	r2, #1
   b98a0:	2200      	movne	r2, #0
   b98a2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b98a4:	d001      	beq.n	b98aa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b98a6:	f7ff ffb1 	bl	b980c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b98aa:	f7fc ff1d 	bl	b66e8 <HAL_RNG_GetRandomNumber>
   b98ae:	4604      	mov	r4, r0
    srand(seed);
   b98b0:	f000 ff1c 	bl	ba6ec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b98b4:	4b0b      	ldr	r3, [pc, #44]	; (b98e4 <module_user_init_hook+0x5c>)
   b98b6:	b113      	cbz	r3, b98be <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b98b8:	4620      	mov	r0, r4
   b98ba:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b98be:	2100      	movs	r1, #0
   b98c0:	4808      	ldr	r0, [pc, #32]	; (b98e4 <module_user_init_hook+0x5c>)
   b98c2:	f7fd f9a9 	bl	b6c18 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b98c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b98ca:	4807      	ldr	r0, [pc, #28]	; (b98e8 <module_user_init_hook+0x60>)
   b98cc:	2100      	movs	r1, #0
   b98ce:	f7fd b95b 	b.w	b6b88 <system_ctrl_set_app_request_handler>
   b98d2:	bf00      	nop
   b98d4:	000b97b5 	.word	0x000b97b5
   b98d8:	2003f400 	.word	0x2003f400
   b98dc:	9a271c1e 	.word	0x9a271c1e
   b98e0:	2003e718 	.word	0x2003e718
   b98e4:	00000000 	.word	0x00000000
   b98e8:	000b9851 	.word	0x000b9851

000b98ec <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b98ec:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b98ee:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b98f0:	d902      	bls.n	b98f8 <pinAvailable+0xc>
    return false;
   b98f2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b98f4:	b002      	add	sp, #8
   b98f6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b98f8:	f1a0 030b 	sub.w	r3, r0, #11
   b98fc:	2b02      	cmp	r3, #2
   b98fe:	d81a      	bhi.n	b9936 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b9900:	4c17      	ldr	r4, [pc, #92]	; (b9960 <pinAvailable+0x74>)
   b9902:	7821      	ldrb	r1, [r4, #0]
   b9904:	f3bf 8f5b 	dmb	ish
   b9908:	f011 0101 	ands.w	r1, r1, #1
   b990c:	d10b      	bne.n	b9926 <pinAvailable+0x3a>
   b990e:	4620      	mov	r0, r4
   b9910:	9101      	str	r1, [sp, #4]
   b9912:	f7fa fbc6 	bl	b40a2 <__cxa_guard_acquire>
   b9916:	9901      	ldr	r1, [sp, #4]
   b9918:	b128      	cbz	r0, b9926 <pinAvailable+0x3a>
   b991a:	4812      	ldr	r0, [pc, #72]	; (b9964 <pinAvailable+0x78>)
   b991c:	f7fe ff82 	bl	b8824 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b9920:	4620      	mov	r0, r4
   b9922:	f7fa fbc3 	bl	b40ac <__cxa_guard_release>
   b9926:	4b0f      	ldr	r3, [pc, #60]	; (b9964 <pinAvailable+0x78>)
   b9928:	7818      	ldrb	r0, [r3, #0]
   b992a:	f7fd f82d 	bl	b6988 <hal_spi_is_enabled>
   b992e:	2800      	cmp	r0, #0
   b9930:	d1df      	bne.n	b98f2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b9932:	2001      	movs	r0, #1
   b9934:	e7de      	b.n	b98f4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b9936:	2801      	cmp	r0, #1
   b9938:	d809      	bhi.n	b994e <pinAvailable+0x62>
   b993a:	f000 f881 	bl	b9a40 <_Z19__fetch_global_Wirev>
   b993e:	2100      	movs	r1, #0
   b9940:	7c00      	ldrb	r0, [r0, #16]
   b9942:	f7fc ff79 	bl	b6838 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b9946:	f080 0001 	eor.w	r0, r0, #1
   b994a:	b2c0      	uxtb	r0, r0
   b994c:	e7d2      	b.n	b98f4 <pinAvailable+0x8>
   b994e:	3809      	subs	r0, #9
   b9950:	2801      	cmp	r0, #1
   b9952:	d8ee      	bhi.n	b9932 <pinAvailable+0x46>
   b9954:	f000 f8b4 	bl	b9ac0 <_Z22__fetch_global_Serial1v>
   b9958:	7c00      	ldrb	r0, [r0, #16]
   b995a:	f7fd f85d 	bl	b6a18 <hal_usart_is_enabled>
   b995e:	e7f2      	b.n	b9946 <pinAvailable+0x5a>
   b9960:	2003e6a4 	.word	0x2003e6a4
   b9964:	2003e6a8 	.word	0x2003e6a8

000b9968 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9968:	2823      	cmp	r0, #35	; 0x23
{
   b996a:	b538      	push	{r3, r4, r5, lr}
   b996c:	4604      	mov	r4, r0
   b996e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9970:	d80a      	bhi.n	b9988 <pinMode+0x20>
   b9972:	29ff      	cmp	r1, #255	; 0xff
   b9974:	d008      	beq.n	b9988 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b9976:	f7ff ffb9 	bl	b98ec <pinAvailable>
   b997a:	b128      	cbz	r0, b9988 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b997c:	4629      	mov	r1, r5
   b997e:	4620      	mov	r0, r4
}
   b9980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b9984:	f7fc bef8 	b.w	b6778 <HAL_Pin_Mode>
}
   b9988:	bd38      	pop	{r3, r4, r5, pc}

000b998a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b998a:	b538      	push	{r3, r4, r5, lr}
   b998c:	4604      	mov	r4, r0
   b998e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9990:	f7fc fefa 	bl	b6788 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b9994:	28ff      	cmp	r0, #255	; 0xff
   b9996:	d010      	beq.n	b99ba <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b9998:	2806      	cmp	r0, #6
   b999a:	d804      	bhi.n	b99a6 <digitalWrite+0x1c>
   b999c:	234d      	movs	r3, #77	; 0x4d
   b999e:	fa23 f000 	lsr.w	r0, r3, r0
   b99a2:	07c3      	lsls	r3, r0, #31
   b99a4:	d409      	bmi.n	b99ba <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b99a6:	4620      	mov	r0, r4
   b99a8:	f7ff ffa0 	bl	b98ec <pinAvailable>
   b99ac:	b128      	cbz	r0, b99ba <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b99ae:	4629      	mov	r1, r5
   b99b0:	4620      	mov	r0, r4
}
   b99b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b99b6:	f7fc beef 	b.w	b6798 <HAL_GPIO_Write>
}
   b99ba:	bd38      	pop	{r3, r4, r5, pc}

000b99bc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b99bc:	b510      	push	{r4, lr}
   b99be:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b99c0:	f7fc fee2 	bl	b6788 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b99c4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b99c6:	b2db      	uxtb	r3, r3
   b99c8:	2b01      	cmp	r3, #1
   b99ca:	d908      	bls.n	b99de <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b99cc:	4620      	mov	r0, r4
   b99ce:	f7ff ff8d 	bl	b98ec <pinAvailable>
   b99d2:	b120      	cbz	r0, b99de <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b99d4:	4620      	mov	r0, r4
}
   b99d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b99da:	f7fc bee5 	b.w	b67a8 <HAL_GPIO_Read>
}
   b99de:	2000      	movs	r0, #0
   b99e0:	bd10      	pop	{r4, pc}
	...

000b99e4 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   b99e4:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   b99e6:	4c08      	ldr	r4, [pc, #32]	; (b9a08 <_Z21__fetch_global_EEPROMv+0x24>)
   b99e8:	7823      	ldrb	r3, [r4, #0]
   b99ea:	f3bf 8f5b 	dmb	ish
   b99ee:	07db      	lsls	r3, r3, #31
   b99f0:	d408      	bmi.n	b9a04 <_Z21__fetch_global_EEPROMv+0x20>
   b99f2:	4620      	mov	r0, r4
   b99f4:	f7fa fb55 	bl	b40a2 <__cxa_guard_acquire>
   b99f8:	b120      	cbz	r0, b9a04 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   b99fa:	f7fc fe8d 	bl	b6718 <HAL_EEPROM_Init>
   b99fe:	4620      	mov	r0, r4
   b9a00:	f7fa fb54 	bl	b40ac <__cxa_guard_release>
	return eeprom;
}
   b9a04:	4801      	ldr	r0, [pc, #4]	; (b9a0c <_Z21__fetch_global_EEPROMv+0x28>)
   b9a06:	bd10      	pop	{r4, pc}
   b9a08:	2003e724 	.word	0x2003e724
   b9a0c:	2003e728 	.word	0x2003e728

000b9a10 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9a10:	4770      	bx	lr
	...

000b9a14 <_Z17acquireWireBufferv>:
{
   b9a14:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b9a16:	2520      	movs	r5, #32
   b9a18:	2314      	movs	r3, #20
{
   b9a1a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9a1c:	6003      	str	r3, [r0, #0]
   b9a1e:	6085      	str	r5, [r0, #8]
   b9a20:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9a22:	4906      	ldr	r1, [pc, #24]	; (b9a3c <_Z17acquireWireBufferv+0x28>)
   b9a24:	4628      	mov	r0, r5
   b9a26:	f000 f871 	bl	b9b0c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9a2a:	4904      	ldr	r1, [pc, #16]	; (b9a3c <_Z17acquireWireBufferv+0x28>)
	};
   b9a2c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9a2e:	4628      	mov	r0, r5
   b9a30:	f000 f86c 	bl	b9b0c <_ZnajRKSt9nothrow_t>
	};
   b9a34:	60e0      	str	r0, [r4, #12]
}
   b9a36:	4620      	mov	r0, r4
   b9a38:	bd38      	pop	{r3, r4, r5, pc}
   b9a3a:	bf00      	nop
   b9a3c:	000bb7b0 	.word	0x000bb7b0

000b9a40 <_Z19__fetch_global_Wirev>:
{
   b9a40:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9a42:	4d0e      	ldr	r5, [pc, #56]	; (b9a7c <_Z19__fetch_global_Wirev+0x3c>)
   b9a44:	7829      	ldrb	r1, [r5, #0]
   b9a46:	f3bf 8f5b 	dmb	ish
   b9a4a:	f011 0401 	ands.w	r4, r1, #1
{
   b9a4e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9a50:	d111      	bne.n	b9a76 <_Z19__fetch_global_Wirev+0x36>
   b9a52:	4628      	mov	r0, r5
   b9a54:	f7fa fb25 	bl	b40a2 <__cxa_guard_acquire>
   b9a58:	b168      	cbz	r0, b9a76 <_Z19__fetch_global_Wirev+0x36>
   b9a5a:	a801      	add	r0, sp, #4
   b9a5c:	f7ff ffda 	bl	b9a14 <_Z17acquireWireBufferv>
   b9a60:	aa01      	add	r2, sp, #4
   b9a62:	4621      	mov	r1, r4
   b9a64:	4806      	ldr	r0, [pc, #24]	; (b9a80 <_Z19__fetch_global_Wirev+0x40>)
   b9a66:	f7fe fc9d 	bl	b83a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b9a6a:	4628      	mov	r0, r5
   b9a6c:	f7fa fb1e 	bl	b40ac <__cxa_guard_release>
   b9a70:	4804      	ldr	r0, [pc, #16]	; (b9a84 <_Z19__fetch_global_Wirev+0x44>)
   b9a72:	f000 fdd9 	bl	ba628 <atexit>
	return wire;
}
   b9a76:	4802      	ldr	r0, [pc, #8]	; (b9a80 <_Z19__fetch_global_Wirev+0x40>)
   b9a78:	b007      	add	sp, #28
   b9a7a:	bd30      	pop	{r4, r5, pc}
   b9a7c:	2003e72c 	.word	0x2003e72c
   b9a80:	2003e730 	.word	0x2003e730
   b9a84:	000b9a11 	.word	0x000b9a11

000b9a88 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9a88:	4770      	bx	lr
	...

000b9a8c <_Z20acquireSerial1Bufferv>:
{
   b9a8c:	b538      	push	{r3, r4, r5, lr}
   b9a8e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b9a90:	2514      	movs	r5, #20
   b9a92:	462a      	mov	r2, r5
   b9a94:	2100      	movs	r1, #0
   b9a96:	f000 fe21 	bl	ba6dc <memset>
   b9a9a:	8025      	strh	r5, [r4, #0]
   b9a9c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9a9e:	4907      	ldr	r1, [pc, #28]	; (b9abc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b9aa0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9aa2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b9aa4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9aa6:	f000 f831 	bl	b9b0c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9aaa:	4904      	ldr	r1, [pc, #16]	; (b9abc <_Z20acquireSerial1Bufferv+0x30>)
    };
   b9aac:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9aae:	4628      	mov	r0, r5
   b9ab0:	f000 f82c 	bl	b9b0c <_ZnajRKSt9nothrow_t>
    };
   b9ab4:	60e0      	str	r0, [r4, #12]
}
   b9ab6:	4620      	mov	r0, r4
   b9ab8:	bd38      	pop	{r3, r4, r5, pc}
   b9aba:	bf00      	nop
   b9abc:	000bb7b0 	.word	0x000bb7b0

000b9ac0 <_Z22__fetch_global_Serial1v>:
{
   b9ac0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9ac2:	4d0e      	ldr	r5, [pc, #56]	; (b9afc <_Z22__fetch_global_Serial1v+0x3c>)
   b9ac4:	7829      	ldrb	r1, [r5, #0]
   b9ac6:	f3bf 8f5b 	dmb	ish
   b9aca:	f011 0401 	ands.w	r4, r1, #1
{
   b9ace:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9ad0:	d111      	bne.n	b9af6 <_Z22__fetch_global_Serial1v+0x36>
   b9ad2:	4628      	mov	r0, r5
   b9ad4:	f7fa fae5 	bl	b40a2 <__cxa_guard_acquire>
   b9ad8:	b168      	cbz	r0, b9af6 <_Z22__fetch_global_Serial1v+0x36>
   b9ada:	a801      	add	r0, sp, #4
   b9adc:	f7ff ffd6 	bl	b9a8c <_Z20acquireSerial1Bufferv>
   b9ae0:	aa01      	add	r2, sp, #4
   b9ae2:	4621      	mov	r1, r4
   b9ae4:	4806      	ldr	r0, [pc, #24]	; (b9b00 <_Z22__fetch_global_Serial1v+0x40>)
   b9ae6:	f7ff fce7 	bl	b94b8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b9aea:	4628      	mov	r0, r5
   b9aec:	f7fa fade 	bl	b40ac <__cxa_guard_release>
   b9af0:	4804      	ldr	r0, [pc, #16]	; (b9b04 <_Z22__fetch_global_Serial1v+0x44>)
   b9af2:	f000 fd99 	bl	ba628 <atexit>
    return serial1;
}
   b9af6:	4802      	ldr	r0, [pc, #8]	; (b9b00 <_Z22__fetch_global_Serial1v+0x40>)
   b9af8:	b007      	add	sp, #28
   b9afa:	bd30      	pop	{r4, r5, pc}
   b9afc:	2003e744 	.word	0x2003e744
   b9b00:	2003e748 	.word	0x2003e748
   b9b04:	000b9a89 	.word	0x000b9a89

000b9b08 <_ZnwjRKSt9nothrow_t>:
   b9b08:	f7fa bac5 	b.w	b4096 <_Znwj>

000b9b0c <_ZnajRKSt9nothrow_t>:
   b9b0c:	f7fa bac5 	b.w	b409a <_Znaj>

000b9b10 <_ZSt25__throw_bad_function_callv>:
   b9b10:	b508      	push	{r3, lr}
   b9b12:	f7fd f921 	bl	b6d58 <abort>
	...

000b9b18 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b9b18:	4901      	ldr	r1, [pc, #4]	; (b9b20 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b9b1a:	f000 b8f9 	b.w	b9d10 <_ZNKSt9type_infoeqERKS_>
   b9b1e:	bf00      	nop
   b9b20:	000bb7cc 	.word	0x000bb7cc

000b9b24 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b9b24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9b26:	2400      	movs	r4, #0
   b9b28:	2310      	movs	r3, #16
   b9b2a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b9b2e:	6803      	ldr	r3, [r0, #0]
   b9b30:	4615      	mov	r5, r2
   b9b32:	699e      	ldr	r6, [r3, #24]
   b9b34:	6812      	ldr	r2, [r2, #0]
   b9b36:	466b      	mov	r3, sp
   b9b38:	e9cd 4400 	strd	r4, r4, [sp]
   b9b3c:	47b0      	blx	r6
   b9b3e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b9b42:	f003 0306 	and.w	r3, r3, #6
   b9b46:	2b06      	cmp	r3, #6
   b9b48:	bf03      	ittte	eq
   b9b4a:	9b00      	ldreq	r3, [sp, #0]
   b9b4c:	602b      	streq	r3, [r5, #0]
   b9b4e:	2001      	moveq	r0, #1
   b9b50:	4620      	movne	r0, r4
   b9b52:	b004      	add	sp, #16
   b9b54:	bd70      	pop	{r4, r5, r6, pc}

000b9b56 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b9b56:	9800      	ldr	r0, [sp, #0]
   b9b58:	4290      	cmp	r0, r2
   b9b5a:	bf14      	ite	ne
   b9b5c:	2001      	movne	r0, #1
   b9b5e:	2006      	moveq	r0, #6
   b9b60:	4770      	bx	lr
	...

000b9b64 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b9b64:	b510      	push	{r4, lr}
   b9b66:	4b03      	ldr	r3, [pc, #12]	; (b9b74 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9b68:	6003      	str	r3, [r0, #0]
   b9b6a:	4604      	mov	r4, r0
   b9b6c:	f000 f8cd 	bl	b9d0a <_ZNSt9type_infoD1Ev>
   b9b70:	4620      	mov	r0, r4
   b9b72:	bd10      	pop	{r4, pc}
   b9b74:	000bb80c 	.word	0x000bb80c

000b9b78 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9b78:	b510      	push	{r4, lr}
   b9b7a:	4604      	mov	r4, r0
   b9b7c:	f7ff fff2 	bl	b9b64 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9b80:	4620      	mov	r0, r4
   b9b82:	2108      	movs	r1, #8
   b9b84:	f7fa fa8b 	bl	b409e <_ZdlPvj>
   b9b88:	4620      	mov	r0, r4
   b9b8a:	bd10      	pop	{r4, pc}

000b9b8c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9b90:	461f      	mov	r7, r3
   b9b92:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9b96:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9b9a:	4598      	cmp	r8, r3
   b9b9c:	4606      	mov	r6, r0
   b9b9e:	4615      	mov	r5, r2
   b9ba0:	d107      	bne.n	b9bb2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9ba2:	9907      	ldr	r1, [sp, #28]
   b9ba4:	f000 f8b4 	bl	b9d10 <_ZNKSt9type_infoeqERKS_>
   b9ba8:	b118      	cbz	r0, b9bb2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9baa:	7165      	strb	r5, [r4, #5]
   b9bac:	2000      	movs	r0, #0
   b9bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9bb2:	4639      	mov	r1, r7
   b9bb4:	4630      	mov	r0, r6
   b9bb6:	f000 f8ab 	bl	b9d10 <_ZNKSt9type_infoeqERKS_>
   b9bba:	2800      	cmp	r0, #0
   b9bbc:	d0f6      	beq.n	b9bac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b9bbe:	2301      	movs	r3, #1
   b9bc0:	f8c4 8000 	str.w	r8, [r4]
   b9bc4:	7125      	strb	r5, [r4, #4]
   b9bc6:	71a3      	strb	r3, [r4, #6]
   b9bc8:	e7f0      	b.n	b9bac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9bca <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9bca:	b538      	push	{r3, r4, r5, lr}
   b9bcc:	4615      	mov	r5, r2
   b9bce:	461c      	mov	r4, r3
   b9bd0:	f000 f89e 	bl	b9d10 <_ZNKSt9type_infoeqERKS_>
   b9bd4:	b120      	cbz	r0, b9be0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9bd6:	2308      	movs	r3, #8
   b9bd8:	60e3      	str	r3, [r4, #12]
   b9bda:	2306      	movs	r3, #6
   b9bdc:	6025      	str	r5, [r4, #0]
   b9bde:	7123      	strb	r3, [r4, #4]
   b9be0:	bd38      	pop	{r3, r4, r5, pc}

000b9be2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b9be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9be4:	4605      	mov	r5, r0
   b9be6:	460c      	mov	r4, r1
   b9be8:	9201      	str	r2, [sp, #4]
   b9bea:	461e      	mov	r6, r3
   b9bec:	f000 f890 	bl	b9d10 <_ZNKSt9type_infoeqERKS_>
   b9bf0:	b950      	cbnz	r0, b9c08 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9bf2:	2e03      	cmp	r6, #3
   b9bf4:	d808      	bhi.n	b9c08 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9bf6:	6823      	ldr	r3, [r4, #0]
   b9bf8:	9a01      	ldr	r2, [sp, #4]
   b9bfa:	695b      	ldr	r3, [r3, #20]
   b9bfc:	4629      	mov	r1, r5
   b9bfe:	4620      	mov	r0, r4
   b9c00:	b002      	add	sp, #8
   b9c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9c06:	4718      	bx	r3
   b9c08:	b002      	add	sp, #8
   b9c0a:	bd70      	pop	{r4, r5, r6, pc}

000b9c0c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9c0c:	b510      	push	{r4, lr}
   b9c0e:	4b03      	ldr	r3, [pc, #12]	; (b9c1c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b9c10:	6003      	str	r3, [r0, #0]
   b9c12:	4604      	mov	r4, r0
   b9c14:	f7ff ffa6 	bl	b9b64 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9c18:	4620      	mov	r0, r4
   b9c1a:	bd10      	pop	{r4, pc}
   b9c1c:	000bb86c 	.word	0x000bb86c

000b9c20 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9c20:	b510      	push	{r4, lr}
   b9c22:	4604      	mov	r4, r0
   b9c24:	f7ff fff2 	bl	b9c0c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9c28:	4620      	mov	r0, r4
   b9c2a:	210c      	movs	r1, #12
   b9c2c:	f7fa fa37 	bl	b409e <_ZdlPvj>
   b9c30:	4620      	mov	r0, r4
   b9c32:	bd10      	pop	{r4, pc}

000b9c34 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b9c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9c36:	9f08      	ldr	r7, [sp, #32]
   b9c38:	4297      	cmp	r7, r2
   b9c3a:	4605      	mov	r5, r0
   b9c3c:	460e      	mov	r6, r1
   b9c3e:	4614      	mov	r4, r2
   b9c40:	d00a      	beq.n	b9c58 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b9c42:	68a8      	ldr	r0, [r5, #8]
   b9c44:	6802      	ldr	r2, [r0, #0]
   b9c46:	9708      	str	r7, [sp, #32]
   b9c48:	6a15      	ldr	r5, [r2, #32]
   b9c4a:	4631      	mov	r1, r6
   b9c4c:	4622      	mov	r2, r4
   b9c4e:	46ac      	mov	ip, r5
   b9c50:	b003      	add	sp, #12
   b9c52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9c56:	4760      	bx	ip
   b9c58:	4619      	mov	r1, r3
   b9c5a:	9301      	str	r3, [sp, #4]
   b9c5c:	f000 f858 	bl	b9d10 <_ZNKSt9type_infoeqERKS_>
   b9c60:	9b01      	ldr	r3, [sp, #4]
   b9c62:	2800      	cmp	r0, #0
   b9c64:	d0ed      	beq.n	b9c42 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b9c66:	2006      	movs	r0, #6
   b9c68:	b003      	add	sp, #12
   b9c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9c6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b9c6c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9c70:	460d      	mov	r5, r1
   b9c72:	4619      	mov	r1, r3
   b9c74:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9c78:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b9c7c:	4681      	mov	r9, r0
   b9c7e:	4617      	mov	r7, r2
   b9c80:	4698      	mov	r8, r3
   b9c82:	f000 f845 	bl	b9d10 <_ZNKSt9type_infoeqERKS_>
   b9c86:	b190      	cbz	r0, b9cae <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9c88:	2d00      	cmp	r5, #0
   b9c8a:	6034      	str	r4, [r6, #0]
   b9c8c:	7137      	strb	r7, [r6, #4]
   b9c8e:	db09      	blt.n	b9ca4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9c90:	1961      	adds	r1, r4, r5
   b9c92:	458a      	cmp	sl, r1
   b9c94:	bf0c      	ite	eq
   b9c96:	2106      	moveq	r1, #6
   b9c98:	2101      	movne	r1, #1
   b9c9a:	71b1      	strb	r1, [r6, #6]
   b9c9c:	2000      	movs	r0, #0
   b9c9e:	b001      	add	sp, #4
   b9ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9ca4:	3502      	adds	r5, #2
   b9ca6:	d1f9      	bne.n	b9c9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9ca8:	2301      	movs	r3, #1
   b9caa:	71b3      	strb	r3, [r6, #6]
   b9cac:	e7f6      	b.n	b9c9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9cae:	4554      	cmp	r4, sl
   b9cb0:	d106      	bne.n	b9cc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9cb2:	4659      	mov	r1, fp
   b9cb4:	4648      	mov	r0, r9
   b9cb6:	f000 f82b 	bl	b9d10 <_ZNKSt9type_infoeqERKS_>
   b9cba:	b108      	cbz	r0, b9cc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9cbc:	7177      	strb	r7, [r6, #5]
   b9cbe:	e7ed      	b.n	b9c9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9cc0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9cc4:	6803      	ldr	r3, [r0, #0]
   b9cc6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b9cca:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b9cce:	69dc      	ldr	r4, [r3, #28]
   b9cd0:	463a      	mov	r2, r7
   b9cd2:	4643      	mov	r3, r8
   b9cd4:	4629      	mov	r1, r5
   b9cd6:	46a4      	mov	ip, r4
   b9cd8:	b001      	add	sp, #4
   b9cda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9cde:	4760      	bx	ip

000b9ce0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9ce4:	4607      	mov	r7, r0
   b9ce6:	460c      	mov	r4, r1
   b9ce8:	4615      	mov	r5, r2
   b9cea:	461e      	mov	r6, r3
   b9cec:	f7ff ff6d 	bl	b9bca <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b9cf0:	b948      	cbnz	r0, b9d06 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b9cf2:	68b8      	ldr	r0, [r7, #8]
   b9cf4:	6803      	ldr	r3, [r0, #0]
   b9cf6:	699f      	ldr	r7, [r3, #24]
   b9cf8:	462a      	mov	r2, r5
   b9cfa:	4633      	mov	r3, r6
   b9cfc:	4621      	mov	r1, r4
   b9cfe:	46bc      	mov	ip, r7
   b9d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9d04:	4760      	bx	ip
   b9d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9d0a <_ZNSt9type_infoD1Ev>:
   b9d0a:	4770      	bx	lr

000b9d0c <_ZNKSt9type_info14__is_pointer_pEv>:
   b9d0c:	2000      	movs	r0, #0
   b9d0e:	4770      	bx	lr

000b9d10 <_ZNKSt9type_infoeqERKS_>:
   b9d10:	4281      	cmp	r1, r0
   b9d12:	b508      	push	{r3, lr}
   b9d14:	d00e      	beq.n	b9d34 <_ZNKSt9type_infoeqERKS_+0x24>
   b9d16:	6840      	ldr	r0, [r0, #4]
   b9d18:	7803      	ldrb	r3, [r0, #0]
   b9d1a:	2b2a      	cmp	r3, #42	; 0x2a
   b9d1c:	d00c      	beq.n	b9d38 <_ZNKSt9type_infoeqERKS_+0x28>
   b9d1e:	6849      	ldr	r1, [r1, #4]
   b9d20:	780b      	ldrb	r3, [r1, #0]
   b9d22:	2b2a      	cmp	r3, #42	; 0x2a
   b9d24:	bf08      	it	eq
   b9d26:	3101      	addeq	r1, #1
   b9d28:	f000 fd0e 	bl	ba748 <strcmp>
   b9d2c:	fab0 f080 	clz	r0, r0
   b9d30:	0940      	lsrs	r0, r0, #5
   b9d32:	bd08      	pop	{r3, pc}
   b9d34:	2001      	movs	r0, #1
   b9d36:	e7fc      	b.n	b9d32 <_ZNKSt9type_infoeqERKS_+0x22>
   b9d38:	2000      	movs	r0, #0
   b9d3a:	e7fa      	b.n	b9d32 <_ZNKSt9type_infoeqERKS_+0x22>

000b9d3c <__aeabi_drsub>:
   b9d3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b9d40:	e002      	b.n	b9d48 <__adddf3>
   b9d42:	bf00      	nop

000b9d44 <__aeabi_dsub>:
   b9d44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b9d48 <__adddf3>:
   b9d48:	b530      	push	{r4, r5, lr}
   b9d4a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b9d4e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b9d52:	ea94 0f05 	teq	r4, r5
   b9d56:	bf08      	it	eq
   b9d58:	ea90 0f02 	teqeq	r0, r2
   b9d5c:	bf1f      	itttt	ne
   b9d5e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b9d62:	ea55 0c02 	orrsne.w	ip, r5, r2
   b9d66:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b9d6a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9d6e:	f000 80e2 	beq.w	b9f36 <__adddf3+0x1ee>
   b9d72:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b9d76:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b9d7a:	bfb8      	it	lt
   b9d7c:	426d      	neglt	r5, r5
   b9d7e:	dd0c      	ble.n	b9d9a <__adddf3+0x52>
   b9d80:	442c      	add	r4, r5
   b9d82:	ea80 0202 	eor.w	r2, r0, r2
   b9d86:	ea81 0303 	eor.w	r3, r1, r3
   b9d8a:	ea82 0000 	eor.w	r0, r2, r0
   b9d8e:	ea83 0101 	eor.w	r1, r3, r1
   b9d92:	ea80 0202 	eor.w	r2, r0, r2
   b9d96:	ea81 0303 	eor.w	r3, r1, r3
   b9d9a:	2d36      	cmp	r5, #54	; 0x36
   b9d9c:	bf88      	it	hi
   b9d9e:	bd30      	pophi	{r4, r5, pc}
   b9da0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9da4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9da8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b9dac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b9db0:	d002      	beq.n	b9db8 <__adddf3+0x70>
   b9db2:	4240      	negs	r0, r0
   b9db4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9db8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b9dbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9dc0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b9dc4:	d002      	beq.n	b9dcc <__adddf3+0x84>
   b9dc6:	4252      	negs	r2, r2
   b9dc8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9dcc:	ea94 0f05 	teq	r4, r5
   b9dd0:	f000 80a7 	beq.w	b9f22 <__adddf3+0x1da>
   b9dd4:	f1a4 0401 	sub.w	r4, r4, #1
   b9dd8:	f1d5 0e20 	rsbs	lr, r5, #32
   b9ddc:	db0d      	blt.n	b9dfa <__adddf3+0xb2>
   b9dde:	fa02 fc0e 	lsl.w	ip, r2, lr
   b9de2:	fa22 f205 	lsr.w	r2, r2, r5
   b9de6:	1880      	adds	r0, r0, r2
   b9de8:	f141 0100 	adc.w	r1, r1, #0
   b9dec:	fa03 f20e 	lsl.w	r2, r3, lr
   b9df0:	1880      	adds	r0, r0, r2
   b9df2:	fa43 f305 	asr.w	r3, r3, r5
   b9df6:	4159      	adcs	r1, r3
   b9df8:	e00e      	b.n	b9e18 <__adddf3+0xd0>
   b9dfa:	f1a5 0520 	sub.w	r5, r5, #32
   b9dfe:	f10e 0e20 	add.w	lr, lr, #32
   b9e02:	2a01      	cmp	r2, #1
   b9e04:	fa03 fc0e 	lsl.w	ip, r3, lr
   b9e08:	bf28      	it	cs
   b9e0a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b9e0e:	fa43 f305 	asr.w	r3, r3, r5
   b9e12:	18c0      	adds	r0, r0, r3
   b9e14:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b9e18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9e1c:	d507      	bpl.n	b9e2e <__adddf3+0xe6>
   b9e1e:	f04f 0e00 	mov.w	lr, #0
   b9e22:	f1dc 0c00 	rsbs	ip, ip, #0
   b9e26:	eb7e 0000 	sbcs.w	r0, lr, r0
   b9e2a:	eb6e 0101 	sbc.w	r1, lr, r1
   b9e2e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b9e32:	d31b      	bcc.n	b9e6c <__adddf3+0x124>
   b9e34:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b9e38:	d30c      	bcc.n	b9e54 <__adddf3+0x10c>
   b9e3a:	0849      	lsrs	r1, r1, #1
   b9e3c:	ea5f 0030 	movs.w	r0, r0, rrx
   b9e40:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b9e44:	f104 0401 	add.w	r4, r4, #1
   b9e48:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b9e4c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b9e50:	f080 809a 	bcs.w	b9f88 <__adddf3+0x240>
   b9e54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b9e58:	bf08      	it	eq
   b9e5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9e5e:	f150 0000 	adcs.w	r0, r0, #0
   b9e62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9e66:	ea41 0105 	orr.w	r1, r1, r5
   b9e6a:	bd30      	pop	{r4, r5, pc}
   b9e6c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b9e70:	4140      	adcs	r0, r0
   b9e72:	eb41 0101 	adc.w	r1, r1, r1
   b9e76:	3c01      	subs	r4, #1
   b9e78:	bf28      	it	cs
   b9e7a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b9e7e:	d2e9      	bcs.n	b9e54 <__adddf3+0x10c>
   b9e80:	f091 0f00 	teq	r1, #0
   b9e84:	bf04      	itt	eq
   b9e86:	4601      	moveq	r1, r0
   b9e88:	2000      	moveq	r0, #0
   b9e8a:	fab1 f381 	clz	r3, r1
   b9e8e:	bf08      	it	eq
   b9e90:	3320      	addeq	r3, #32
   b9e92:	f1a3 030b 	sub.w	r3, r3, #11
   b9e96:	f1b3 0220 	subs.w	r2, r3, #32
   b9e9a:	da0c      	bge.n	b9eb6 <__adddf3+0x16e>
   b9e9c:	320c      	adds	r2, #12
   b9e9e:	dd08      	ble.n	b9eb2 <__adddf3+0x16a>
   b9ea0:	f102 0c14 	add.w	ip, r2, #20
   b9ea4:	f1c2 020c 	rsb	r2, r2, #12
   b9ea8:	fa01 f00c 	lsl.w	r0, r1, ip
   b9eac:	fa21 f102 	lsr.w	r1, r1, r2
   b9eb0:	e00c      	b.n	b9ecc <__adddf3+0x184>
   b9eb2:	f102 0214 	add.w	r2, r2, #20
   b9eb6:	bfd8      	it	le
   b9eb8:	f1c2 0c20 	rsble	ip, r2, #32
   b9ebc:	fa01 f102 	lsl.w	r1, r1, r2
   b9ec0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9ec4:	bfdc      	itt	le
   b9ec6:	ea41 010c 	orrle.w	r1, r1, ip
   b9eca:	4090      	lslle	r0, r2
   b9ecc:	1ae4      	subs	r4, r4, r3
   b9ece:	bfa2      	ittt	ge
   b9ed0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9ed4:	4329      	orrge	r1, r5
   b9ed6:	bd30      	popge	{r4, r5, pc}
   b9ed8:	ea6f 0404 	mvn.w	r4, r4
   b9edc:	3c1f      	subs	r4, #31
   b9ede:	da1c      	bge.n	b9f1a <__adddf3+0x1d2>
   b9ee0:	340c      	adds	r4, #12
   b9ee2:	dc0e      	bgt.n	b9f02 <__adddf3+0x1ba>
   b9ee4:	f104 0414 	add.w	r4, r4, #20
   b9ee8:	f1c4 0220 	rsb	r2, r4, #32
   b9eec:	fa20 f004 	lsr.w	r0, r0, r4
   b9ef0:	fa01 f302 	lsl.w	r3, r1, r2
   b9ef4:	ea40 0003 	orr.w	r0, r0, r3
   b9ef8:	fa21 f304 	lsr.w	r3, r1, r4
   b9efc:	ea45 0103 	orr.w	r1, r5, r3
   b9f00:	bd30      	pop	{r4, r5, pc}
   b9f02:	f1c4 040c 	rsb	r4, r4, #12
   b9f06:	f1c4 0220 	rsb	r2, r4, #32
   b9f0a:	fa20 f002 	lsr.w	r0, r0, r2
   b9f0e:	fa01 f304 	lsl.w	r3, r1, r4
   b9f12:	ea40 0003 	orr.w	r0, r0, r3
   b9f16:	4629      	mov	r1, r5
   b9f18:	bd30      	pop	{r4, r5, pc}
   b9f1a:	fa21 f004 	lsr.w	r0, r1, r4
   b9f1e:	4629      	mov	r1, r5
   b9f20:	bd30      	pop	{r4, r5, pc}
   b9f22:	f094 0f00 	teq	r4, #0
   b9f26:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b9f2a:	bf06      	itte	eq
   b9f2c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b9f30:	3401      	addeq	r4, #1
   b9f32:	3d01      	subne	r5, #1
   b9f34:	e74e      	b.n	b9dd4 <__adddf3+0x8c>
   b9f36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9f3a:	bf18      	it	ne
   b9f3c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9f40:	d029      	beq.n	b9f96 <__adddf3+0x24e>
   b9f42:	ea94 0f05 	teq	r4, r5
   b9f46:	bf08      	it	eq
   b9f48:	ea90 0f02 	teqeq	r0, r2
   b9f4c:	d005      	beq.n	b9f5a <__adddf3+0x212>
   b9f4e:	ea54 0c00 	orrs.w	ip, r4, r0
   b9f52:	bf04      	itt	eq
   b9f54:	4619      	moveq	r1, r3
   b9f56:	4610      	moveq	r0, r2
   b9f58:	bd30      	pop	{r4, r5, pc}
   b9f5a:	ea91 0f03 	teq	r1, r3
   b9f5e:	bf1e      	ittt	ne
   b9f60:	2100      	movne	r1, #0
   b9f62:	2000      	movne	r0, #0
   b9f64:	bd30      	popne	{r4, r5, pc}
   b9f66:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b9f6a:	d105      	bne.n	b9f78 <__adddf3+0x230>
   b9f6c:	0040      	lsls	r0, r0, #1
   b9f6e:	4149      	adcs	r1, r1
   b9f70:	bf28      	it	cs
   b9f72:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b9f76:	bd30      	pop	{r4, r5, pc}
   b9f78:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9f7c:	bf3c      	itt	cc
   b9f7e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9f82:	bd30      	popcc	{r4, r5, pc}
   b9f84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9f88:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9f8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9f90:	f04f 0000 	mov.w	r0, #0
   b9f94:	bd30      	pop	{r4, r5, pc}
   b9f96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9f9a:	bf1a      	itte	ne
   b9f9c:	4619      	movne	r1, r3
   b9f9e:	4610      	movne	r0, r2
   b9fa0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9fa4:	bf1c      	itt	ne
   b9fa6:	460b      	movne	r3, r1
   b9fa8:	4602      	movne	r2, r0
   b9faa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9fae:	bf06      	itte	eq
   b9fb0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9fb4:	ea91 0f03 	teqeq	r1, r3
   b9fb8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9fbc:	bd30      	pop	{r4, r5, pc}
   b9fbe:	bf00      	nop

000b9fc0 <__aeabi_ui2d>:
   b9fc0:	f090 0f00 	teq	r0, #0
   b9fc4:	bf04      	itt	eq
   b9fc6:	2100      	moveq	r1, #0
   b9fc8:	4770      	bxeq	lr
   b9fca:	b530      	push	{r4, r5, lr}
   b9fcc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9fd0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9fd4:	f04f 0500 	mov.w	r5, #0
   b9fd8:	f04f 0100 	mov.w	r1, #0
   b9fdc:	e750      	b.n	b9e80 <__adddf3+0x138>
   b9fde:	bf00      	nop

000b9fe0 <__aeabi_i2d>:
   b9fe0:	f090 0f00 	teq	r0, #0
   b9fe4:	bf04      	itt	eq
   b9fe6:	2100      	moveq	r1, #0
   b9fe8:	4770      	bxeq	lr
   b9fea:	b530      	push	{r4, r5, lr}
   b9fec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9ff0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9ff4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b9ff8:	bf48      	it	mi
   b9ffa:	4240      	negmi	r0, r0
   b9ffc:	f04f 0100 	mov.w	r1, #0
   ba000:	e73e      	b.n	b9e80 <__adddf3+0x138>
   ba002:	bf00      	nop

000ba004 <__aeabi_f2d>:
   ba004:	0042      	lsls	r2, r0, #1
   ba006:	ea4f 01e2 	mov.w	r1, r2, asr #3
   ba00a:	ea4f 0131 	mov.w	r1, r1, rrx
   ba00e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   ba012:	bf1f      	itttt	ne
   ba014:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   ba018:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   ba01c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   ba020:	4770      	bxne	lr
   ba022:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   ba026:	bf08      	it	eq
   ba028:	4770      	bxeq	lr
   ba02a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   ba02e:	bf04      	itt	eq
   ba030:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   ba034:	4770      	bxeq	lr
   ba036:	b530      	push	{r4, r5, lr}
   ba038:	f44f 7460 	mov.w	r4, #896	; 0x380
   ba03c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba040:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba044:	e71c      	b.n	b9e80 <__adddf3+0x138>
   ba046:	bf00      	nop

000ba048 <__aeabi_ul2d>:
   ba048:	ea50 0201 	orrs.w	r2, r0, r1
   ba04c:	bf08      	it	eq
   ba04e:	4770      	bxeq	lr
   ba050:	b530      	push	{r4, r5, lr}
   ba052:	f04f 0500 	mov.w	r5, #0
   ba056:	e00a      	b.n	ba06e <__aeabi_l2d+0x16>

000ba058 <__aeabi_l2d>:
   ba058:	ea50 0201 	orrs.w	r2, r0, r1
   ba05c:	bf08      	it	eq
   ba05e:	4770      	bxeq	lr
   ba060:	b530      	push	{r4, r5, lr}
   ba062:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   ba066:	d502      	bpl.n	ba06e <__aeabi_l2d+0x16>
   ba068:	4240      	negs	r0, r0
   ba06a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba06e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba072:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba076:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   ba07a:	f43f aed8 	beq.w	b9e2e <__adddf3+0xe6>
   ba07e:	f04f 0203 	mov.w	r2, #3
   ba082:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ba086:	bf18      	it	ne
   ba088:	3203      	addne	r2, #3
   ba08a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ba08e:	bf18      	it	ne
   ba090:	3203      	addne	r2, #3
   ba092:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   ba096:	f1c2 0320 	rsb	r3, r2, #32
   ba09a:	fa00 fc03 	lsl.w	ip, r0, r3
   ba09e:	fa20 f002 	lsr.w	r0, r0, r2
   ba0a2:	fa01 fe03 	lsl.w	lr, r1, r3
   ba0a6:	ea40 000e 	orr.w	r0, r0, lr
   ba0aa:	fa21 f102 	lsr.w	r1, r1, r2
   ba0ae:	4414      	add	r4, r2
   ba0b0:	e6bd      	b.n	b9e2e <__adddf3+0xe6>
   ba0b2:	bf00      	nop

000ba0b4 <__aeabi_dmul>:
   ba0b4:	b570      	push	{r4, r5, r6, lr}
   ba0b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ba0ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ba0be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ba0c2:	bf1d      	ittte	ne
   ba0c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ba0c8:	ea94 0f0c 	teqne	r4, ip
   ba0cc:	ea95 0f0c 	teqne	r5, ip
   ba0d0:	f000 f8de 	bleq	ba290 <__aeabi_dmul+0x1dc>
   ba0d4:	442c      	add	r4, r5
   ba0d6:	ea81 0603 	eor.w	r6, r1, r3
   ba0da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   ba0de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   ba0e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   ba0e6:	bf18      	it	ne
   ba0e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   ba0ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba0f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba0f4:	d038      	beq.n	ba168 <__aeabi_dmul+0xb4>
   ba0f6:	fba0 ce02 	umull	ip, lr, r0, r2
   ba0fa:	f04f 0500 	mov.w	r5, #0
   ba0fe:	fbe1 e502 	umlal	lr, r5, r1, r2
   ba102:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   ba106:	fbe0 e503 	umlal	lr, r5, r0, r3
   ba10a:	f04f 0600 	mov.w	r6, #0
   ba10e:	fbe1 5603 	umlal	r5, r6, r1, r3
   ba112:	f09c 0f00 	teq	ip, #0
   ba116:	bf18      	it	ne
   ba118:	f04e 0e01 	orrne.w	lr, lr, #1
   ba11c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   ba120:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   ba124:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   ba128:	d204      	bcs.n	ba134 <__aeabi_dmul+0x80>
   ba12a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   ba12e:	416d      	adcs	r5, r5
   ba130:	eb46 0606 	adc.w	r6, r6, r6
   ba134:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   ba138:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   ba13c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   ba140:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   ba144:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   ba148:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ba14c:	bf88      	it	hi
   ba14e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ba152:	d81e      	bhi.n	ba192 <__aeabi_dmul+0xde>
   ba154:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   ba158:	bf08      	it	eq
   ba15a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   ba15e:	f150 0000 	adcs.w	r0, r0, #0
   ba162:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba166:	bd70      	pop	{r4, r5, r6, pc}
   ba168:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   ba16c:	ea46 0101 	orr.w	r1, r6, r1
   ba170:	ea40 0002 	orr.w	r0, r0, r2
   ba174:	ea81 0103 	eor.w	r1, r1, r3
   ba178:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   ba17c:	bfc2      	ittt	gt
   ba17e:	ebd4 050c 	rsbsgt	r5, r4, ip
   ba182:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ba186:	bd70      	popgt	{r4, r5, r6, pc}
   ba188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba18c:	f04f 0e00 	mov.w	lr, #0
   ba190:	3c01      	subs	r4, #1
   ba192:	f300 80ab 	bgt.w	ba2ec <__aeabi_dmul+0x238>
   ba196:	f114 0f36 	cmn.w	r4, #54	; 0x36
   ba19a:	bfde      	ittt	le
   ba19c:	2000      	movle	r0, #0
   ba19e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   ba1a2:	bd70      	pople	{r4, r5, r6, pc}
   ba1a4:	f1c4 0400 	rsb	r4, r4, #0
   ba1a8:	3c20      	subs	r4, #32
   ba1aa:	da35      	bge.n	ba218 <__aeabi_dmul+0x164>
   ba1ac:	340c      	adds	r4, #12
   ba1ae:	dc1b      	bgt.n	ba1e8 <__aeabi_dmul+0x134>
   ba1b0:	f104 0414 	add.w	r4, r4, #20
   ba1b4:	f1c4 0520 	rsb	r5, r4, #32
   ba1b8:	fa00 f305 	lsl.w	r3, r0, r5
   ba1bc:	fa20 f004 	lsr.w	r0, r0, r4
   ba1c0:	fa01 f205 	lsl.w	r2, r1, r5
   ba1c4:	ea40 0002 	orr.w	r0, r0, r2
   ba1c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   ba1cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba1d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ba1d4:	fa21 f604 	lsr.w	r6, r1, r4
   ba1d8:	eb42 0106 	adc.w	r1, r2, r6
   ba1dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba1e0:	bf08      	it	eq
   ba1e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba1e6:	bd70      	pop	{r4, r5, r6, pc}
   ba1e8:	f1c4 040c 	rsb	r4, r4, #12
   ba1ec:	f1c4 0520 	rsb	r5, r4, #32
   ba1f0:	fa00 f304 	lsl.w	r3, r0, r4
   ba1f4:	fa20 f005 	lsr.w	r0, r0, r5
   ba1f8:	fa01 f204 	lsl.w	r2, r1, r4
   ba1fc:	ea40 0002 	orr.w	r0, r0, r2
   ba200:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba204:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ba208:	f141 0100 	adc.w	r1, r1, #0
   ba20c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba210:	bf08      	it	eq
   ba212:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba216:	bd70      	pop	{r4, r5, r6, pc}
   ba218:	f1c4 0520 	rsb	r5, r4, #32
   ba21c:	fa00 f205 	lsl.w	r2, r0, r5
   ba220:	ea4e 0e02 	orr.w	lr, lr, r2
   ba224:	fa20 f304 	lsr.w	r3, r0, r4
   ba228:	fa01 f205 	lsl.w	r2, r1, r5
   ba22c:	ea43 0302 	orr.w	r3, r3, r2
   ba230:	fa21 f004 	lsr.w	r0, r1, r4
   ba234:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba238:	fa21 f204 	lsr.w	r2, r1, r4
   ba23c:	ea20 0002 	bic.w	r0, r0, r2
   ba240:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   ba244:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba248:	bf08      	it	eq
   ba24a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba24e:	bd70      	pop	{r4, r5, r6, pc}
   ba250:	f094 0f00 	teq	r4, #0
   ba254:	d10f      	bne.n	ba276 <__aeabi_dmul+0x1c2>
   ba256:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   ba25a:	0040      	lsls	r0, r0, #1
   ba25c:	eb41 0101 	adc.w	r1, r1, r1
   ba260:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba264:	bf08      	it	eq
   ba266:	3c01      	subeq	r4, #1
   ba268:	d0f7      	beq.n	ba25a <__aeabi_dmul+0x1a6>
   ba26a:	ea41 0106 	orr.w	r1, r1, r6
   ba26e:	f095 0f00 	teq	r5, #0
   ba272:	bf18      	it	ne
   ba274:	4770      	bxne	lr
   ba276:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   ba27a:	0052      	lsls	r2, r2, #1
   ba27c:	eb43 0303 	adc.w	r3, r3, r3
   ba280:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   ba284:	bf08      	it	eq
   ba286:	3d01      	subeq	r5, #1
   ba288:	d0f7      	beq.n	ba27a <__aeabi_dmul+0x1c6>
   ba28a:	ea43 0306 	orr.w	r3, r3, r6
   ba28e:	4770      	bx	lr
   ba290:	ea94 0f0c 	teq	r4, ip
   ba294:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ba298:	bf18      	it	ne
   ba29a:	ea95 0f0c 	teqne	r5, ip
   ba29e:	d00c      	beq.n	ba2ba <__aeabi_dmul+0x206>
   ba2a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba2a4:	bf18      	it	ne
   ba2a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba2aa:	d1d1      	bne.n	ba250 <__aeabi_dmul+0x19c>
   ba2ac:	ea81 0103 	eor.w	r1, r1, r3
   ba2b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba2b4:	f04f 0000 	mov.w	r0, #0
   ba2b8:	bd70      	pop	{r4, r5, r6, pc}
   ba2ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba2be:	bf06      	itte	eq
   ba2c0:	4610      	moveq	r0, r2
   ba2c2:	4619      	moveq	r1, r3
   ba2c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba2c8:	d019      	beq.n	ba2fe <__aeabi_dmul+0x24a>
   ba2ca:	ea94 0f0c 	teq	r4, ip
   ba2ce:	d102      	bne.n	ba2d6 <__aeabi_dmul+0x222>
   ba2d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   ba2d4:	d113      	bne.n	ba2fe <__aeabi_dmul+0x24a>
   ba2d6:	ea95 0f0c 	teq	r5, ip
   ba2da:	d105      	bne.n	ba2e8 <__aeabi_dmul+0x234>
   ba2dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   ba2e0:	bf1c      	itt	ne
   ba2e2:	4610      	movne	r0, r2
   ba2e4:	4619      	movne	r1, r3
   ba2e6:	d10a      	bne.n	ba2fe <__aeabi_dmul+0x24a>
   ba2e8:	ea81 0103 	eor.w	r1, r1, r3
   ba2ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba2f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ba2f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba2f8:	f04f 0000 	mov.w	r0, #0
   ba2fc:	bd70      	pop	{r4, r5, r6, pc}
   ba2fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ba302:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   ba306:	bd70      	pop	{r4, r5, r6, pc}

000ba308 <__aeabi_ddiv>:
   ba308:	b570      	push	{r4, r5, r6, lr}
   ba30a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ba30e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ba312:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ba316:	bf1d      	ittte	ne
   ba318:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ba31c:	ea94 0f0c 	teqne	r4, ip
   ba320:	ea95 0f0c 	teqne	r5, ip
   ba324:	f000 f8a7 	bleq	ba476 <__aeabi_ddiv+0x16e>
   ba328:	eba4 0405 	sub.w	r4, r4, r5
   ba32c:	ea81 0e03 	eor.w	lr, r1, r3
   ba330:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ba334:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba338:	f000 8088 	beq.w	ba44c <__aeabi_ddiv+0x144>
   ba33c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba340:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   ba344:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   ba348:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   ba34c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   ba350:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   ba354:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   ba358:	ea4f 2600 	mov.w	r6, r0, lsl #8
   ba35c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   ba360:	429d      	cmp	r5, r3
   ba362:	bf08      	it	eq
   ba364:	4296      	cmpeq	r6, r2
   ba366:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   ba36a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   ba36e:	d202      	bcs.n	ba376 <__aeabi_ddiv+0x6e>
   ba370:	085b      	lsrs	r3, r3, #1
   ba372:	ea4f 0232 	mov.w	r2, r2, rrx
   ba376:	1ab6      	subs	r6, r6, r2
   ba378:	eb65 0503 	sbc.w	r5, r5, r3
   ba37c:	085b      	lsrs	r3, r3, #1
   ba37e:	ea4f 0232 	mov.w	r2, r2, rrx
   ba382:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   ba386:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   ba38a:	ebb6 0e02 	subs.w	lr, r6, r2
   ba38e:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba392:	bf22      	ittt	cs
   ba394:	1ab6      	subcs	r6, r6, r2
   ba396:	4675      	movcs	r5, lr
   ba398:	ea40 000c 	orrcs.w	r0, r0, ip
   ba39c:	085b      	lsrs	r3, r3, #1
   ba39e:	ea4f 0232 	mov.w	r2, r2, rrx
   ba3a2:	ebb6 0e02 	subs.w	lr, r6, r2
   ba3a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba3aa:	bf22      	ittt	cs
   ba3ac:	1ab6      	subcs	r6, r6, r2
   ba3ae:	4675      	movcs	r5, lr
   ba3b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   ba3b4:	085b      	lsrs	r3, r3, #1
   ba3b6:	ea4f 0232 	mov.w	r2, r2, rrx
   ba3ba:	ebb6 0e02 	subs.w	lr, r6, r2
   ba3be:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba3c2:	bf22      	ittt	cs
   ba3c4:	1ab6      	subcs	r6, r6, r2
   ba3c6:	4675      	movcs	r5, lr
   ba3c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   ba3cc:	085b      	lsrs	r3, r3, #1
   ba3ce:	ea4f 0232 	mov.w	r2, r2, rrx
   ba3d2:	ebb6 0e02 	subs.w	lr, r6, r2
   ba3d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba3da:	bf22      	ittt	cs
   ba3dc:	1ab6      	subcs	r6, r6, r2
   ba3de:	4675      	movcs	r5, lr
   ba3e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   ba3e4:	ea55 0e06 	orrs.w	lr, r5, r6
   ba3e8:	d018      	beq.n	ba41c <__aeabi_ddiv+0x114>
   ba3ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
   ba3ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   ba3f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   ba3f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   ba3fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   ba3fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   ba402:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   ba406:	d1c0      	bne.n	ba38a <__aeabi_ddiv+0x82>
   ba408:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba40c:	d10b      	bne.n	ba426 <__aeabi_ddiv+0x11e>
   ba40e:	ea41 0100 	orr.w	r1, r1, r0
   ba412:	f04f 0000 	mov.w	r0, #0
   ba416:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   ba41a:	e7b6      	b.n	ba38a <__aeabi_ddiv+0x82>
   ba41c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba420:	bf04      	itt	eq
   ba422:	4301      	orreq	r1, r0
   ba424:	2000      	moveq	r0, #0
   ba426:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ba42a:	bf88      	it	hi
   ba42c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ba430:	f63f aeaf 	bhi.w	ba192 <__aeabi_dmul+0xde>
   ba434:	ebb5 0c03 	subs.w	ip, r5, r3
   ba438:	bf04      	itt	eq
   ba43a:	ebb6 0c02 	subseq.w	ip, r6, r2
   ba43e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba442:	f150 0000 	adcs.w	r0, r0, #0
   ba446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba44a:	bd70      	pop	{r4, r5, r6, pc}
   ba44c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   ba450:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   ba454:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   ba458:	bfc2      	ittt	gt
   ba45a:	ebd4 050c 	rsbsgt	r5, r4, ip
   ba45e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ba462:	bd70      	popgt	{r4, r5, r6, pc}
   ba464:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba468:	f04f 0e00 	mov.w	lr, #0
   ba46c:	3c01      	subs	r4, #1
   ba46e:	e690      	b.n	ba192 <__aeabi_dmul+0xde>
   ba470:	ea45 0e06 	orr.w	lr, r5, r6
   ba474:	e68d      	b.n	ba192 <__aeabi_dmul+0xde>
   ba476:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ba47a:	ea94 0f0c 	teq	r4, ip
   ba47e:	bf08      	it	eq
   ba480:	ea95 0f0c 	teqeq	r5, ip
   ba484:	f43f af3b 	beq.w	ba2fe <__aeabi_dmul+0x24a>
   ba488:	ea94 0f0c 	teq	r4, ip
   ba48c:	d10a      	bne.n	ba4a4 <__aeabi_ddiv+0x19c>
   ba48e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba492:	f47f af34 	bne.w	ba2fe <__aeabi_dmul+0x24a>
   ba496:	ea95 0f0c 	teq	r5, ip
   ba49a:	f47f af25 	bne.w	ba2e8 <__aeabi_dmul+0x234>
   ba49e:	4610      	mov	r0, r2
   ba4a0:	4619      	mov	r1, r3
   ba4a2:	e72c      	b.n	ba2fe <__aeabi_dmul+0x24a>
   ba4a4:	ea95 0f0c 	teq	r5, ip
   ba4a8:	d106      	bne.n	ba4b8 <__aeabi_ddiv+0x1b0>
   ba4aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ba4ae:	f43f aefd 	beq.w	ba2ac <__aeabi_dmul+0x1f8>
   ba4b2:	4610      	mov	r0, r2
   ba4b4:	4619      	mov	r1, r3
   ba4b6:	e722      	b.n	ba2fe <__aeabi_dmul+0x24a>
   ba4b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba4bc:	bf18      	it	ne
   ba4be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba4c2:	f47f aec5 	bne.w	ba250 <__aeabi_dmul+0x19c>
   ba4c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   ba4ca:	f47f af0d 	bne.w	ba2e8 <__aeabi_dmul+0x234>
   ba4ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   ba4d2:	f47f aeeb 	bne.w	ba2ac <__aeabi_dmul+0x1f8>
   ba4d6:	e712      	b.n	ba2fe <__aeabi_dmul+0x24a>

000ba4d8 <__gedf2>:
   ba4d8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   ba4dc:	e006      	b.n	ba4ec <__cmpdf2+0x4>
   ba4de:	bf00      	nop

000ba4e0 <__ledf2>:
   ba4e0:	f04f 0c01 	mov.w	ip, #1
   ba4e4:	e002      	b.n	ba4ec <__cmpdf2+0x4>
   ba4e6:	bf00      	nop

000ba4e8 <__cmpdf2>:
   ba4e8:	f04f 0c01 	mov.w	ip, #1
   ba4ec:	f84d cd04 	str.w	ip, [sp, #-4]!
   ba4f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba4f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba4f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba4fc:	bf18      	it	ne
   ba4fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   ba502:	d01b      	beq.n	ba53c <__cmpdf2+0x54>
   ba504:	b001      	add	sp, #4
   ba506:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   ba50a:	bf0c      	ite	eq
   ba50c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   ba510:	ea91 0f03 	teqne	r1, r3
   ba514:	bf02      	ittt	eq
   ba516:	ea90 0f02 	teqeq	r0, r2
   ba51a:	2000      	moveq	r0, #0
   ba51c:	4770      	bxeq	lr
   ba51e:	f110 0f00 	cmn.w	r0, #0
   ba522:	ea91 0f03 	teq	r1, r3
   ba526:	bf58      	it	pl
   ba528:	4299      	cmppl	r1, r3
   ba52a:	bf08      	it	eq
   ba52c:	4290      	cmpeq	r0, r2
   ba52e:	bf2c      	ite	cs
   ba530:	17d8      	asrcs	r0, r3, #31
   ba532:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   ba536:	f040 0001 	orr.w	r0, r0, #1
   ba53a:	4770      	bx	lr
   ba53c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba544:	d102      	bne.n	ba54c <__cmpdf2+0x64>
   ba546:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   ba54a:	d107      	bne.n	ba55c <__cmpdf2+0x74>
   ba54c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba554:	d1d6      	bne.n	ba504 <__cmpdf2+0x1c>
   ba556:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   ba55a:	d0d3      	beq.n	ba504 <__cmpdf2+0x1c>
   ba55c:	f85d 0b04 	ldr.w	r0, [sp], #4
   ba560:	4770      	bx	lr
   ba562:	bf00      	nop

000ba564 <__aeabi_cdrcmple>:
   ba564:	4684      	mov	ip, r0
   ba566:	4610      	mov	r0, r2
   ba568:	4662      	mov	r2, ip
   ba56a:	468c      	mov	ip, r1
   ba56c:	4619      	mov	r1, r3
   ba56e:	4663      	mov	r3, ip
   ba570:	e000      	b.n	ba574 <__aeabi_cdcmpeq>
   ba572:	bf00      	nop

000ba574 <__aeabi_cdcmpeq>:
   ba574:	b501      	push	{r0, lr}
   ba576:	f7ff ffb7 	bl	ba4e8 <__cmpdf2>
   ba57a:	2800      	cmp	r0, #0
   ba57c:	bf48      	it	mi
   ba57e:	f110 0f00 	cmnmi.w	r0, #0
   ba582:	bd01      	pop	{r0, pc}

000ba584 <__aeabi_dcmpeq>:
   ba584:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba588:	f7ff fff4 	bl	ba574 <__aeabi_cdcmpeq>
   ba58c:	bf0c      	ite	eq
   ba58e:	2001      	moveq	r0, #1
   ba590:	2000      	movne	r0, #0
   ba592:	f85d fb08 	ldr.w	pc, [sp], #8
   ba596:	bf00      	nop

000ba598 <__aeabi_dcmplt>:
   ba598:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba59c:	f7ff ffea 	bl	ba574 <__aeabi_cdcmpeq>
   ba5a0:	bf34      	ite	cc
   ba5a2:	2001      	movcc	r0, #1
   ba5a4:	2000      	movcs	r0, #0
   ba5a6:	f85d fb08 	ldr.w	pc, [sp], #8
   ba5aa:	bf00      	nop

000ba5ac <__aeabi_dcmple>:
   ba5ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba5b0:	f7ff ffe0 	bl	ba574 <__aeabi_cdcmpeq>
   ba5b4:	bf94      	ite	ls
   ba5b6:	2001      	movls	r0, #1
   ba5b8:	2000      	movhi	r0, #0
   ba5ba:	f85d fb08 	ldr.w	pc, [sp], #8
   ba5be:	bf00      	nop

000ba5c0 <__aeabi_dcmpge>:
   ba5c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba5c4:	f7ff ffce 	bl	ba564 <__aeabi_cdrcmple>
   ba5c8:	bf94      	ite	ls
   ba5ca:	2001      	movls	r0, #1
   ba5cc:	2000      	movhi	r0, #0
   ba5ce:	f85d fb08 	ldr.w	pc, [sp], #8
   ba5d2:	bf00      	nop

000ba5d4 <__aeabi_dcmpgt>:
   ba5d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba5d8:	f7ff ffc4 	bl	ba564 <__aeabi_cdrcmple>
   ba5dc:	bf34      	ite	cc
   ba5de:	2001      	movcc	r0, #1
   ba5e0:	2000      	movcs	r0, #0
   ba5e2:	f85d fb08 	ldr.w	pc, [sp], #8
   ba5e6:	bf00      	nop

000ba5e8 <__aeabi_d2uiz>:
   ba5e8:	004a      	lsls	r2, r1, #1
   ba5ea:	d211      	bcs.n	ba610 <__aeabi_d2uiz+0x28>
   ba5ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   ba5f0:	d211      	bcs.n	ba616 <__aeabi_d2uiz+0x2e>
   ba5f2:	d50d      	bpl.n	ba610 <__aeabi_d2uiz+0x28>
   ba5f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   ba5f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   ba5fc:	d40e      	bmi.n	ba61c <__aeabi_d2uiz+0x34>
   ba5fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ba602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   ba606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   ba60a:	fa23 f002 	lsr.w	r0, r3, r2
   ba60e:	4770      	bx	lr
   ba610:	f04f 0000 	mov.w	r0, #0
   ba614:	4770      	bx	lr
   ba616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   ba61a:	d102      	bne.n	ba622 <__aeabi_d2uiz+0x3a>
   ba61c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba620:	4770      	bx	lr
   ba622:	f04f 0000 	mov.w	r0, #0
   ba626:	4770      	bx	lr

000ba628 <atexit>:
   ba628:	2300      	movs	r3, #0
   ba62a:	4601      	mov	r1, r0
   ba62c:	461a      	mov	r2, r3
   ba62e:	4618      	mov	r0, r3
   ba630:	f000 b966 	b.w	ba900 <__register_exitproc>

000ba634 <atoi>:
   ba634:	220a      	movs	r2, #10
   ba636:	2100      	movs	r1, #0
   ba638:	f000 b958 	b.w	ba8ec <strtol>

000ba63c <atol>:
   ba63c:	220a      	movs	r2, #10
   ba63e:	2100      	movs	r1, #0
   ba640:	f000 b954 	b.w	ba8ec <strtol>

000ba644 <ldiv>:
   ba644:	2900      	cmp	r1, #0
   ba646:	b510      	push	{r4, lr}
   ba648:	fb91 f4f2 	sdiv	r4, r1, r2
   ba64c:	fb02 1314 	mls	r3, r2, r4, r1
   ba650:	db06      	blt.n	ba660 <ldiv+0x1c>
   ba652:	2b00      	cmp	r3, #0
   ba654:	da01      	bge.n	ba65a <ldiv+0x16>
   ba656:	3401      	adds	r4, #1
   ba658:	1a9b      	subs	r3, r3, r2
   ba65a:	e9c0 4300 	strd	r4, r3, [r0]
   ba65e:	bd10      	pop	{r4, pc}
   ba660:	2b00      	cmp	r3, #0
   ba662:	bfc4      	itt	gt
   ba664:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   ba668:	189b      	addgt	r3, r3, r2
   ba66a:	e7f6      	b.n	ba65a <ldiv+0x16>

000ba66c <memcmp>:
   ba66c:	b510      	push	{r4, lr}
   ba66e:	3901      	subs	r1, #1
   ba670:	4402      	add	r2, r0
   ba672:	4290      	cmp	r0, r2
   ba674:	d101      	bne.n	ba67a <memcmp+0xe>
   ba676:	2000      	movs	r0, #0
   ba678:	e005      	b.n	ba686 <memcmp+0x1a>
   ba67a:	7803      	ldrb	r3, [r0, #0]
   ba67c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba680:	42a3      	cmp	r3, r4
   ba682:	d001      	beq.n	ba688 <memcmp+0x1c>
   ba684:	1b18      	subs	r0, r3, r4
   ba686:	bd10      	pop	{r4, pc}
   ba688:	3001      	adds	r0, #1
   ba68a:	e7f2      	b.n	ba672 <memcmp+0x6>

000ba68c <memcpy>:
   ba68c:	440a      	add	r2, r1
   ba68e:	4291      	cmp	r1, r2
   ba690:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   ba694:	d100      	bne.n	ba698 <memcpy+0xc>
   ba696:	4770      	bx	lr
   ba698:	b510      	push	{r4, lr}
   ba69a:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba69e:	f803 4f01 	strb.w	r4, [r3, #1]!
   ba6a2:	4291      	cmp	r1, r2
   ba6a4:	d1f9      	bne.n	ba69a <memcpy+0xe>
   ba6a6:	bd10      	pop	{r4, pc}

000ba6a8 <memmove>:
   ba6a8:	4288      	cmp	r0, r1
   ba6aa:	b510      	push	{r4, lr}
   ba6ac:	eb01 0402 	add.w	r4, r1, r2
   ba6b0:	d902      	bls.n	ba6b8 <memmove+0x10>
   ba6b2:	4284      	cmp	r4, r0
   ba6b4:	4623      	mov	r3, r4
   ba6b6:	d807      	bhi.n	ba6c8 <memmove+0x20>
   ba6b8:	1e43      	subs	r3, r0, #1
   ba6ba:	42a1      	cmp	r1, r4
   ba6bc:	d008      	beq.n	ba6d0 <memmove+0x28>
   ba6be:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba6c2:	f803 2f01 	strb.w	r2, [r3, #1]!
   ba6c6:	e7f8      	b.n	ba6ba <memmove+0x12>
   ba6c8:	4402      	add	r2, r0
   ba6ca:	4601      	mov	r1, r0
   ba6cc:	428a      	cmp	r2, r1
   ba6ce:	d100      	bne.n	ba6d2 <memmove+0x2a>
   ba6d0:	bd10      	pop	{r4, pc}
   ba6d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   ba6d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   ba6da:	e7f7      	b.n	ba6cc <memmove+0x24>

000ba6dc <memset>:
   ba6dc:	4402      	add	r2, r0
   ba6de:	4603      	mov	r3, r0
   ba6e0:	4293      	cmp	r3, r2
   ba6e2:	d100      	bne.n	ba6e6 <memset+0xa>
   ba6e4:	4770      	bx	lr
   ba6e6:	f803 1b01 	strb.w	r1, [r3], #1
   ba6ea:	e7f9      	b.n	ba6e0 <memset+0x4>

000ba6ec <srand>:
   ba6ec:	b538      	push	{r3, r4, r5, lr}
   ba6ee:	4b10      	ldr	r3, [pc, #64]	; (ba730 <srand+0x44>)
   ba6f0:	681d      	ldr	r5, [r3, #0]
   ba6f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba6f4:	4604      	mov	r4, r0
   ba6f6:	b9b3      	cbnz	r3, ba726 <srand+0x3a>
   ba6f8:	2018      	movs	r0, #24
   ba6fa:	f7fc fb0d 	bl	b6d18 <malloc>
   ba6fe:	4602      	mov	r2, r0
   ba700:	63a8      	str	r0, [r5, #56]	; 0x38
   ba702:	b920      	cbnz	r0, ba70e <srand+0x22>
   ba704:	4b0b      	ldr	r3, [pc, #44]	; (ba734 <srand+0x48>)
   ba706:	480c      	ldr	r0, [pc, #48]	; (ba738 <srand+0x4c>)
   ba708:	2142      	movs	r1, #66	; 0x42
   ba70a:	f7fc fb35 	bl	b6d78 <__assert_func>
   ba70e:	490b      	ldr	r1, [pc, #44]	; (ba73c <srand+0x50>)
   ba710:	4b0b      	ldr	r3, [pc, #44]	; (ba740 <srand+0x54>)
   ba712:	e9c0 1300 	strd	r1, r3, [r0]
   ba716:	4b0b      	ldr	r3, [pc, #44]	; (ba744 <srand+0x58>)
   ba718:	6083      	str	r3, [r0, #8]
   ba71a:	230b      	movs	r3, #11
   ba71c:	8183      	strh	r3, [r0, #12]
   ba71e:	2100      	movs	r1, #0
   ba720:	2001      	movs	r0, #1
   ba722:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ba726:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba728:	2200      	movs	r2, #0
   ba72a:	611c      	str	r4, [r3, #16]
   ba72c:	615a      	str	r2, [r3, #20]
   ba72e:	bd38      	pop	{r3, r4, r5, pc}
   ba730:	20031b98 	.word	0x20031b98
   ba734:	000bb8a5 	.word	0x000bb8a5
   ba738:	000bb8bc 	.word	0x000bb8bc
   ba73c:	abcd330e 	.word	0xabcd330e
   ba740:	e66d1234 	.word	0xe66d1234
   ba744:	0005deec 	.word	0x0005deec

000ba748 <strcmp>:
   ba748:	f810 2b01 	ldrb.w	r2, [r0], #1
   ba74c:	f811 3b01 	ldrb.w	r3, [r1], #1
   ba750:	2a01      	cmp	r2, #1
   ba752:	bf28      	it	cs
   ba754:	429a      	cmpcs	r2, r3
   ba756:	d0f7      	beq.n	ba748 <strcmp>
   ba758:	1ad0      	subs	r0, r2, r3
   ba75a:	4770      	bx	lr

000ba75c <strcpy>:
   ba75c:	4603      	mov	r3, r0
   ba75e:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba762:	f803 2b01 	strb.w	r2, [r3], #1
   ba766:	2a00      	cmp	r2, #0
   ba768:	d1f9      	bne.n	ba75e <strcpy+0x2>
   ba76a:	4770      	bx	lr

000ba76c <strlen>:
   ba76c:	4603      	mov	r3, r0
   ba76e:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba772:	2a00      	cmp	r2, #0
   ba774:	d1fb      	bne.n	ba76e <strlen+0x2>
   ba776:	1a18      	subs	r0, r3, r0
   ba778:	3801      	subs	r0, #1
   ba77a:	4770      	bx	lr

000ba77c <strncpy>:
   ba77c:	b510      	push	{r4, lr}
   ba77e:	3901      	subs	r1, #1
   ba780:	4603      	mov	r3, r0
   ba782:	b132      	cbz	r2, ba792 <strncpy+0x16>
   ba784:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba788:	f803 4b01 	strb.w	r4, [r3], #1
   ba78c:	3a01      	subs	r2, #1
   ba78e:	2c00      	cmp	r4, #0
   ba790:	d1f7      	bne.n	ba782 <strncpy+0x6>
   ba792:	441a      	add	r2, r3
   ba794:	2100      	movs	r1, #0
   ba796:	4293      	cmp	r3, r2
   ba798:	d100      	bne.n	ba79c <strncpy+0x20>
   ba79a:	bd10      	pop	{r4, pc}
   ba79c:	f803 1b01 	strb.w	r1, [r3], #1
   ba7a0:	e7f9      	b.n	ba796 <strncpy+0x1a>

000ba7a2 <strnlen>:
   ba7a2:	b510      	push	{r4, lr}
   ba7a4:	4602      	mov	r2, r0
   ba7a6:	4401      	add	r1, r0
   ba7a8:	428a      	cmp	r2, r1
   ba7aa:	4613      	mov	r3, r2
   ba7ac:	d003      	beq.n	ba7b6 <strnlen+0x14>
   ba7ae:	781c      	ldrb	r4, [r3, #0]
   ba7b0:	3201      	adds	r2, #1
   ba7b2:	2c00      	cmp	r4, #0
   ba7b4:	d1f8      	bne.n	ba7a8 <strnlen+0x6>
   ba7b6:	1a18      	subs	r0, r3, r0
   ba7b8:	bd10      	pop	{r4, pc}

000ba7ba <strstr>:
   ba7ba:	780a      	ldrb	r2, [r1, #0]
   ba7bc:	b570      	push	{r4, r5, r6, lr}
   ba7be:	b96a      	cbnz	r2, ba7dc <strstr+0x22>
   ba7c0:	bd70      	pop	{r4, r5, r6, pc}
   ba7c2:	429a      	cmp	r2, r3
   ba7c4:	d109      	bne.n	ba7da <strstr+0x20>
   ba7c6:	460c      	mov	r4, r1
   ba7c8:	4605      	mov	r5, r0
   ba7ca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   ba7ce:	2b00      	cmp	r3, #0
   ba7d0:	d0f6      	beq.n	ba7c0 <strstr+0x6>
   ba7d2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   ba7d6:	429e      	cmp	r6, r3
   ba7d8:	d0f7      	beq.n	ba7ca <strstr+0x10>
   ba7da:	3001      	adds	r0, #1
   ba7dc:	7803      	ldrb	r3, [r0, #0]
   ba7de:	2b00      	cmp	r3, #0
   ba7e0:	d1ef      	bne.n	ba7c2 <strstr+0x8>
   ba7e2:	4618      	mov	r0, r3
   ba7e4:	e7ec      	b.n	ba7c0 <strstr+0x6>
	...

000ba7e8 <_strtol_l.constprop.0>:
   ba7e8:	2b01      	cmp	r3, #1
   ba7ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba7ee:	d001      	beq.n	ba7f4 <_strtol_l.constprop.0+0xc>
   ba7f0:	2b24      	cmp	r3, #36	; 0x24
   ba7f2:	d906      	bls.n	ba802 <_strtol_l.constprop.0+0x1a>
   ba7f4:	f7fc fab8 	bl	b6d68 <__errno>
   ba7f8:	2316      	movs	r3, #22
   ba7fa:	6003      	str	r3, [r0, #0]
   ba7fc:	2000      	movs	r0, #0
   ba7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba802:	f8df c0e4 	ldr.w	ip, [pc, #228]	; ba8e8 <_strtol_l.constprop.0+0x100>
   ba806:	460d      	mov	r5, r1
   ba808:	462e      	mov	r6, r5
   ba80a:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba80e:	f814 700c 	ldrb.w	r7, [r4, ip]
   ba812:	f017 0708 	ands.w	r7, r7, #8
   ba816:	d1f7      	bne.n	ba808 <_strtol_l.constprop.0+0x20>
   ba818:	2c2d      	cmp	r4, #45	; 0x2d
   ba81a:	d132      	bne.n	ba882 <_strtol_l.constprop.0+0x9a>
   ba81c:	782c      	ldrb	r4, [r5, #0]
   ba81e:	2701      	movs	r7, #1
   ba820:	1cb5      	adds	r5, r6, #2
   ba822:	2b00      	cmp	r3, #0
   ba824:	d05b      	beq.n	ba8de <_strtol_l.constprop.0+0xf6>
   ba826:	2b10      	cmp	r3, #16
   ba828:	d109      	bne.n	ba83e <_strtol_l.constprop.0+0x56>
   ba82a:	2c30      	cmp	r4, #48	; 0x30
   ba82c:	d107      	bne.n	ba83e <_strtol_l.constprop.0+0x56>
   ba82e:	782c      	ldrb	r4, [r5, #0]
   ba830:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   ba834:	2c58      	cmp	r4, #88	; 0x58
   ba836:	d14d      	bne.n	ba8d4 <_strtol_l.constprop.0+0xec>
   ba838:	786c      	ldrb	r4, [r5, #1]
   ba83a:	2310      	movs	r3, #16
   ba83c:	3502      	adds	r5, #2
   ba83e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   ba842:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   ba846:	f04f 0c00 	mov.w	ip, #0
   ba84a:	fbb8 f9f3 	udiv	r9, r8, r3
   ba84e:	4666      	mov	r6, ip
   ba850:	fb03 8a19 	mls	sl, r3, r9, r8
   ba854:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   ba858:	f1be 0f09 	cmp.w	lr, #9
   ba85c:	d816      	bhi.n	ba88c <_strtol_l.constprop.0+0xa4>
   ba85e:	4674      	mov	r4, lr
   ba860:	42a3      	cmp	r3, r4
   ba862:	dd24      	ble.n	ba8ae <_strtol_l.constprop.0+0xc6>
   ba864:	f1bc 0f00 	cmp.w	ip, #0
   ba868:	db1e      	blt.n	ba8a8 <_strtol_l.constprop.0+0xc0>
   ba86a:	45b1      	cmp	r9, r6
   ba86c:	d31c      	bcc.n	ba8a8 <_strtol_l.constprop.0+0xc0>
   ba86e:	d101      	bne.n	ba874 <_strtol_l.constprop.0+0x8c>
   ba870:	45a2      	cmp	sl, r4
   ba872:	db19      	blt.n	ba8a8 <_strtol_l.constprop.0+0xc0>
   ba874:	fb06 4603 	mla	r6, r6, r3, r4
   ba878:	f04f 0c01 	mov.w	ip, #1
   ba87c:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba880:	e7e8      	b.n	ba854 <_strtol_l.constprop.0+0x6c>
   ba882:	2c2b      	cmp	r4, #43	; 0x2b
   ba884:	bf04      	itt	eq
   ba886:	782c      	ldrbeq	r4, [r5, #0]
   ba888:	1cb5      	addeq	r5, r6, #2
   ba88a:	e7ca      	b.n	ba822 <_strtol_l.constprop.0+0x3a>
   ba88c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   ba890:	f1be 0f19 	cmp.w	lr, #25
   ba894:	d801      	bhi.n	ba89a <_strtol_l.constprop.0+0xb2>
   ba896:	3c37      	subs	r4, #55	; 0x37
   ba898:	e7e2      	b.n	ba860 <_strtol_l.constprop.0+0x78>
   ba89a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   ba89e:	f1be 0f19 	cmp.w	lr, #25
   ba8a2:	d804      	bhi.n	ba8ae <_strtol_l.constprop.0+0xc6>
   ba8a4:	3c57      	subs	r4, #87	; 0x57
   ba8a6:	e7db      	b.n	ba860 <_strtol_l.constprop.0+0x78>
   ba8a8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   ba8ac:	e7e6      	b.n	ba87c <_strtol_l.constprop.0+0x94>
   ba8ae:	f1bc 0f00 	cmp.w	ip, #0
   ba8b2:	da05      	bge.n	ba8c0 <_strtol_l.constprop.0+0xd8>
   ba8b4:	2322      	movs	r3, #34	; 0x22
   ba8b6:	6003      	str	r3, [r0, #0]
   ba8b8:	4646      	mov	r6, r8
   ba8ba:	b942      	cbnz	r2, ba8ce <_strtol_l.constprop.0+0xe6>
   ba8bc:	4630      	mov	r0, r6
   ba8be:	e79e      	b.n	ba7fe <_strtol_l.constprop.0+0x16>
   ba8c0:	b107      	cbz	r7, ba8c4 <_strtol_l.constprop.0+0xdc>
   ba8c2:	4276      	negs	r6, r6
   ba8c4:	2a00      	cmp	r2, #0
   ba8c6:	d0f9      	beq.n	ba8bc <_strtol_l.constprop.0+0xd4>
   ba8c8:	f1bc 0f00 	cmp.w	ip, #0
   ba8cc:	d000      	beq.n	ba8d0 <_strtol_l.constprop.0+0xe8>
   ba8ce:	1e69      	subs	r1, r5, #1
   ba8d0:	6011      	str	r1, [r2, #0]
   ba8d2:	e7f3      	b.n	ba8bc <_strtol_l.constprop.0+0xd4>
   ba8d4:	2430      	movs	r4, #48	; 0x30
   ba8d6:	2b00      	cmp	r3, #0
   ba8d8:	d1b1      	bne.n	ba83e <_strtol_l.constprop.0+0x56>
   ba8da:	2308      	movs	r3, #8
   ba8dc:	e7af      	b.n	ba83e <_strtol_l.constprop.0+0x56>
   ba8de:	2c30      	cmp	r4, #48	; 0x30
   ba8e0:	d0a5      	beq.n	ba82e <_strtol_l.constprop.0+0x46>
   ba8e2:	230a      	movs	r3, #10
   ba8e4:	e7ab      	b.n	ba83e <_strtol_l.constprop.0+0x56>
   ba8e6:	bf00      	nop
   ba8e8:	000bb916 	.word	0x000bb916

000ba8ec <strtol>:
   ba8ec:	4613      	mov	r3, r2
   ba8ee:	460a      	mov	r2, r1
   ba8f0:	4601      	mov	r1, r0
   ba8f2:	4802      	ldr	r0, [pc, #8]	; (ba8fc <strtol+0x10>)
   ba8f4:	6800      	ldr	r0, [r0, #0]
   ba8f6:	f7ff bf77 	b.w	ba7e8 <_strtol_l.constprop.0>
   ba8fa:	bf00      	nop
   ba8fc:	20031b98 	.word	0x20031b98

000ba900 <__register_exitproc>:
   ba900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba904:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba9c0 <__register_exitproc+0xc0>
   ba908:	4606      	mov	r6, r0
   ba90a:	f8d8 0000 	ldr.w	r0, [r8]
   ba90e:	461f      	mov	r7, r3
   ba910:	460d      	mov	r5, r1
   ba912:	4691      	mov	r9, r2
   ba914:	f000 f856 	bl	ba9c4 <__retarget_lock_acquire_recursive>
   ba918:	4b25      	ldr	r3, [pc, #148]	; (ba9b0 <__register_exitproc+0xb0>)
   ba91a:	681c      	ldr	r4, [r3, #0]
   ba91c:	b934      	cbnz	r4, ba92c <__register_exitproc+0x2c>
   ba91e:	4c25      	ldr	r4, [pc, #148]	; (ba9b4 <__register_exitproc+0xb4>)
   ba920:	601c      	str	r4, [r3, #0]
   ba922:	4b25      	ldr	r3, [pc, #148]	; (ba9b8 <__register_exitproc+0xb8>)
   ba924:	b113      	cbz	r3, ba92c <__register_exitproc+0x2c>
   ba926:	681b      	ldr	r3, [r3, #0]
   ba928:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba92c:	6863      	ldr	r3, [r4, #4]
   ba92e:	2b1f      	cmp	r3, #31
   ba930:	dd07      	ble.n	ba942 <__register_exitproc+0x42>
   ba932:	f8d8 0000 	ldr.w	r0, [r8]
   ba936:	f000 f847 	bl	ba9c8 <__retarget_lock_release_recursive>
   ba93a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba93e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba942:	b34e      	cbz	r6, ba998 <__register_exitproc+0x98>
   ba944:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   ba948:	b988      	cbnz	r0, ba96e <__register_exitproc+0x6e>
   ba94a:	4b1c      	ldr	r3, [pc, #112]	; (ba9bc <__register_exitproc+0xbc>)
   ba94c:	b923      	cbnz	r3, ba958 <__register_exitproc+0x58>
   ba94e:	f8d8 0000 	ldr.w	r0, [r8]
   ba952:	f000 f838 	bl	ba9c6 <__retarget_lock_release>
   ba956:	e7f0      	b.n	ba93a <__register_exitproc+0x3a>
   ba958:	f44f 7084 	mov.w	r0, #264	; 0x108
   ba95c:	f7fc f9dc 	bl	b6d18 <malloc>
   ba960:	2800      	cmp	r0, #0
   ba962:	d0f4      	beq.n	ba94e <__register_exitproc+0x4e>
   ba964:	2300      	movs	r3, #0
   ba966:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   ba96a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   ba96e:	6863      	ldr	r3, [r4, #4]
   ba970:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   ba974:	2201      	movs	r2, #1
   ba976:	409a      	lsls	r2, r3
   ba978:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   ba97c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   ba980:	4313      	orrs	r3, r2
   ba982:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   ba986:	2e02      	cmp	r6, #2
   ba988:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   ba98c:	bf02      	ittt	eq
   ba98e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   ba992:	4313      	orreq	r3, r2
   ba994:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   ba998:	6863      	ldr	r3, [r4, #4]
   ba99a:	f8d8 0000 	ldr.w	r0, [r8]
   ba99e:	1c5a      	adds	r2, r3, #1
   ba9a0:	3302      	adds	r3, #2
   ba9a2:	6062      	str	r2, [r4, #4]
   ba9a4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   ba9a8:	f000 f80e 	bl	ba9c8 <__retarget_lock_release_recursive>
   ba9ac:	2000      	movs	r0, #0
   ba9ae:	e7c6      	b.n	ba93e <__register_exitproc+0x3e>
   ba9b0:	2003e7e8 	.word	0x2003e7e8
   ba9b4:	2003e75c 	.word	0x2003e75c
   ba9b8:	00000000 	.word	0x00000000
   ba9bc:	000b6d19 	.word	0x000b6d19
   ba9c0:	20031bfc 	.word	0x20031bfc

000ba9c4 <__retarget_lock_acquire_recursive>:
   ba9c4:	4770      	bx	lr

000ba9c6 <__retarget_lock_release>:
   ba9c6:	4770      	bx	lr

000ba9c8 <__retarget_lock_release_recursive>:
   ba9c8:	4770      	bx	lr

000ba9ca <link_code_end>:
	...

000ba9cc <dynalib_user>:
   ba9cc:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   ba9dc:	0000 0000 6964 6967 6c67 6575 692e 006f     ....digiglue.io.
   ba9ec:	002f 742f 6d69 0065 6572 6f63 6472 6e69     /./time.recordin
   ba9fc:	4967 746e 7265 6176 3a6c 2520 0069 6572     gInterval: %i.re
   baa0c:	6f70 7472 6e69 4967 746e 7265 6176 3a6c     portingInterval:
   baa1c:	2520 0069 6c73 6565 5070 7561 6573 7544      %i.sleepPauseDu
   baa2c:	6172 6974 6e6f 203a 6925 7200 6365 726f     ration: %i.recor
   baa3c:	6964 676e 6f4d 6564 203a 6925 4400 4953     dingMode: %i.DSI
   baa4c:	2044 6f6e 2074 7473 726f 6465 6920 206e     D not stored in 
   baa5c:	4545 5250 4d4f 202e 4c42 2045 6f63 666e     EEPROM. BLE conf
   baa6c:	6769 7220 7165 6975 6572 0064 6957 6946     ig required.WiFi
   baa7c:	6620 6961 656c 2064 6f74 6320 6e6f 656e      failed to conne
   baa8c:	7463 202c 6974 656d 6e20 746f 7320 6e79     ct, time not syn
   baa9c:	6563 0064 6957 6946 6320 6e6f 656e 7463     ced.WiFi connect
   baaac:	6465 202c 7973 636e 6e69 2067 6974 656d     ed, syncing time
   baabc:	4700 5445 5400 6d69 2065 6572 7571 7365     .GET.Time reques
   baacc:	2074 6572 7574 6e72 6465 203a 4600 6961     t returned: .Fai
   baadc:	656c 2064 6f74 6920 696e 6974 6c61 7a69     led to initializ
   baaec:	2065 494c 3353 4844 5700 7461 6863 6f64     e LIS3DH.Watchdo
   baafc:	2067 6572 6573 0074 7845 6574 6e72 6c61     g reset.External
   bab0c:	7220 7365 7465 6400 7369 6f63 6e6e 6365      reset.disconnec
   bab1c:	6574 0064 760a 2e35 2033 6f4d 6974 6e6f     ted..v5.3 Motion
   bab2c:	6c61 7379 7369 4620 7269 776d 7261 0a65     alysis Firmware.
   bab3c:	7243 6465 6e65 6974 6c61 2073 7261 2065     Credentials are 
   bab4c:	7563 7272 6e65 6c74 2079 7473 726f 6465     currently stored
   bab5c:	6620 726f 0a3a 005b 0a2c 5d00 450a 746e      for:.[.,..].Ent
   bab6c:	7265 6e20 7465 6f77 6b72 5320 4953 2044     er network SSID 
   bab7c:	6228 616c 6b6e 7420 206f 6b73 7069 202c     (blank to skip, 
   bab8c:	6327 656c 7261 2027 6f74 7220 7365 7465     'clear' to reset
   bab9c:	6320 6572 6564 746e 6169 736c 3a29 0020      credentials): .
   babac:	430a 7275 6572 746e 4420 4953 2044 7369     .Current DSID is
   babbc:	5b20 5d00 450a 746e 7265 6420 7665 6369      [.].Enter devic
   babcc:	2065 5344 4449 2820 6c62 6e61 206b 6f74     e DSID (blank to
   babdc:	7320 696b 2970 203a 6300 656c 7261 0a00      skip): .clear..
   babec:	6e45 6574 2072 656e 7774 726f 206b 6170     Enter network pa
   babfc:	7373 6f77 6472 203a 0a00 430a 6572 6564     ssword: ...Crede
   bac0c:	746e 6169 736c 7320 7465 7720 7469 2068     ntials set with 
   bac1c:	7373 6469 203a 0a00 6170 7373 6f77 6472     ssid: ..password
   bac2c:	203a 0a00 000a 450a 746e 7265 2720 6574     : .....Enter 'te
   bac3c:	7473 2027 6f74 7420 7365 2074 7263 6465     st' to test cred
   bac4c:	6e65 6974 6c61 2073 6228 616c 6b6e 7420     entials (blank t
   bac5c:	206f 6b73 7069 3a29 0020 6574 7473 7400     o skip): .test.t
   bac6c:	6d69 6f65 7475 5300 6375 6563 7373 0a21     imeout.Success!.
   bac7c:	4500 5252 524f 203a 6957 6946 6320 6e6f     .ERROR: WiFi con
   bac8c:	656e 7463 6f69 206e 6974 656d 756f 0a74     nection timeout.
   bac9c:	6400 6973 2064 6e65 6574 6572 0064 7364     .dsid entered.ds
   bacac:	6469 203a 0a00 7543 7272 6e65 2074 6176     id: ..Current va
   bacbc:	756c 2065 6f66 2072 6c73 6565 2070 6170     lue for sleep pa
   baccc:	7375 2065 7564 6172 6974 6e6f 6920 2073     use duration is 
   bacdc:	005b 0a5d 6e45 6574 2072 6c73 6565 2070     [.].Enter sleep 
   bacec:	6170 7375 2065 7564 6172 6974 6e6f 6120     pause duration a
   bacfc:	2073 6e61 6920 746e 6765 7265 6920 206e     s an integer in 
   bad0c:	6573 6f63 646e 2073 6228 616c 6b6e 7420     seconds (blank t
   bad1c:	206f 6b73 7069 3a29 0020 6c73 6565 2070     o skip): .sleep 
   bad2c:	6170 7375 2065 7564 6172 6974 6e6f 6520     pause duration e
   bad3c:	746e 7265 6465 7300 656c 7065 7020 7561     ntered.sleep pau
   bad4c:	6573 6420 7275 7461 6f69 3a6e 0020 430a     se duration: ..C
   bad5c:	7275 6572 746e 7620 6c61 6575 6620 726f     urrent value for
   bad6c:	6420 7461 2061 6f63 6c6c 6365 6974 6e6f      data collection
   bad7c:	6920 746e 7265 6176 206c 7369 5b20 5d00      interval is [.]
   bad8c:	450a 746e 7265 7420 6d69 2065 6562 7774     .Enter time betw
   bad9c:	6565 206e 6164 6174 6320 6c6f 656c 7463     een data collect
   badac:	6f69 206e 7361 6120 206e 6e69 6574 6567     ion as an intege
   badbc:	2072 6e69 6d20 6c69 696c 6573 6f63 646e     r in millisecond
   badcc:	2073 6228 616c 6b6e 7420 206f 6b73 7069     s (blank to skip
   baddc:	3a29 0020 430a 7275 6572 746e 7620 6c61     ): ..Current val
   badec:	6575 6620 726f 5720 4669 2069 6f63 6e6e     ue for WiFi conn
   badfc:	6365 6974 6e6f 6920 746e 7265 6176 206c     ection interval 
   bae0c:	7369 5b20 5d00 450a 746e 7265 7420 6d69     is [.].Enter tim
   bae1c:	2065 6562 7774 6565 206e 6957 6946 6320     e between WiFi c
   bae2c:	6e6f 656e 7463 6f69 736e 6120 2073 6e61     onnections as an
   bae3c:	6920 746e 6765 7265 6920 206e 6573 6f63      integer in seco
   bae4c:	646e 2073 6228 616c 6b6e 7420 206f 6b73     nds (blank to sk
   bae5c:	7069 3a29 0020 430a 7275 6572 746e 7220     ip): ..Current r
   bae6c:	6365 726f 6964 676e 6d20 646f 2065 7369     ecording mode is
   bae7c:	203a 7962 6520 6378 7065 6974 6e6f 000a     : by exception..
   bae8c:	430a 7275 6572 746e 7220 6365 726f 6964     .Current recordi
   bae9c:	676e 6d20 646f 2065 7369 203a 6f6e 6d72     ng mode is: norm
   baeac:	6c61 0a00 6e45 6574 2072 7927 2027 6f74     al..Enter 'y' to
   baebc:	6520 616e 6c62 2065 7865 6563 7470 6f69      enable exceptio
   baecc:	206e 6572 6f63 6472 6e69 2c67 2720 276e     n recording, 'n'
   baedc:	7420 206f 7375 2065 6f6e 6d72 6c61 7220      to use normal r
   baeec:	6365 726f 6964 676e 2820 6c62 6e61 206b     ecording (blank 
   baefc:	6f74 7320 696b 2970 203a 7900 7200 7065     to skip): .y.rep
   baf0c:	726f 6974 676e 6d20 646f 3a65 2520 0069     orting mode: %i.
   baf1c:	450a 746e 7265 2720 746f 2761 7420 206f     .Enter 'ota' to 
   baf2c:	6177 7469 6620 726f 4f20 4154 7520 6470     wait for OTA upd
   baf3c:	7461 2065 6228 616c 6b6e 7420 206f 6b73     ate (blank to sk
   baf4c:	7069 3a29 0020 746f 0061 6957 6946 6620     ip): .ota.WiFi f
   baf5c:	6961 656c 2064 6f74 6320 6e6f 656e 7463     ailed to connect
   baf6c:	202c 6b73 7069 6970 676e 7420 6d69 2065     , skipping time 
   baf7c:	7973 636e 7268 6e6f 7a69 7461 6f69 006e     synchronization.
   baf8c:	6957 6946 6320 6e6f 656e 7463 6465 202c     WiFi connected, 
   baf9c:	7761 6961 6974 676e 7520 6470 7461 0065     awaiting update.
   bafac:	410a 6177 7469 6e69 2067 544f 2041 7075     .Awaiting OTA up
   bafbc:	6164 6574 3600 3445 3030 3030 2d31 3542     date.6E400001-B5
   bafcc:	3341 462d 3933 2d33 3045 3941 452d 3035     A3-F393-E0A9-E50
   bafdc:	3245 4434 4343 3941 0045 4536 3034 3030     E24DCCA9E.6E4000
   bafec:	3230 422d 4135 2d33 3346 3339 452d 4130     02-B5A3-F393-E0A
   baffc:	2d39 3545 4530 3432 4344 4143 4539 3600     9-E50E24DCCA9E.6
   bb00c:	3445 3030 3030 2d33 3542 3341 462d 3933     E400003-B5A3-F39
   bb01c:	2d33 3045 3941 452d 3035 3245 4434 4343     3-E0A9-E50E24DCC
   bb02c:	3941 0045 7874 7200 0078 6f52 6c6c 766f     A9E.tx.rx.Rollov
   bb03c:	7265 7020 7961 6f6c 6461 203a 7b00 6422     er payload: .{"d
   bb04c:	7461 2261 5b3a 5d00 007d 4f50 5453 5300     ata":[.]}.POST.S
   bb05c:	6174 7574 3a73 0020 6552 4271 646f 3a79     tatus: .ReqBody:
   bb06c:	0020 6957 6946 6320 6e6f 656e 7463 6465      .WiFi connected
   bb07c:	202c 6572 6f70 7472 6e69 2067 6164 6174     , reporting data
   bb08c:	4500 676e 6761 6e69 2067 6c73 6565 2e70     .Engaging sleep.
   bb09c:	3e00 3e3e 4320 4e4f 4954 554e 4e49 2047     .>>> CONTINUING 
   bb0ac:	4552 4f50 5452 4e49 2047 4144 4154 7300     REPORTING DATA.s
   bb0bc:	6f74 6572 5664 6c61 6575 4973 646e 7865     toredValuesIndex
   bb0cc:	203a 6925 7b00 6422 6973 2264 003a 202c     : %i.{"dsid":., 
   bb0dc:	7622 6c61 6575 3a22 2c00 2220 6974 656d     "value":., "time
   bb0ec:	7473 6d61 2270 003a 2c7d 4200 454c 4157     stamp":.},.BLEWA
   bb0fc:	5449 4200 454c 6320 6e6f 656e 7463 6465     IT.BLE connected
   bb10c:	4200 454c 6e20 746f 6320 6e6f 656e 7463     .BLE not connect
   bb11c:	6465 202c 6f63 746e 6e69 6975 676e 7720     ed, continuing w
   bb12c:	7469 2068 7473 726f 6465 7320 7465 6974     ith stored setti
   bb13c:	676e 2e73 5200 4345 524f 4944 474e 5200     ngs..RECORDING.R
   bb14c:	6365 726f 6964 676e 6920 646e 7865 203a     ecording index: 
   bb15c:	6925 4600 7269 7473 7220 6165 6964 676e     %i.First reading
   bb16c:	3e00 3e3e 5220 5045 524f 4954 474e 4420     .>>> REPORTING D
   bb17c:	5441 0041 3e3e 203e 4552 4f50 5452 4e49     ATA.>>> REPORTIN
   bb18c:	2047 5544 2045 4f54 4220 4655 4546 2052     G DUE TO BUFFER 
   bb19c:	4143 4150 4943 5954 4200 454c 6f43 6e75     CAPACITY.BLECoun
   bb1ac:	6474 776f 3a6e 0020 6341 6563 7470 6100     tdown: .Accept.a
   bb1bc:	7070 696c 6163 6974 6e6f 6a2f 6f73 006e     pplication/json.
   bb1cc:	6f43 746e 6e65 2d74 7954 6570 0000 0000     Content-Type....

000bb1dc <_ZTV15Adafruit_LIS3DH>:
	...
   bb1e4:	5bbf 000b 5bed 000b 5bbd 000b 5fa9 000b     .[...[...[..._..
   bb1f4:	5bc1 000b 7448 7074 6c43 6569 746e 093e     .[..HttpClient>.
   bb204:	6f43 6e6e 6365 6974 676e 7420 3a6f 0020     Connecting to: .
   bb214:	7448 7074 6c43 6569 746e 093e 6f43 6e6e     HttpClient>.Conn
   bb224:	6365 6974 676e 7420 206f 5049 203a 2000     ecting to IP: . 
   bb234:	5448 5054 312f 302e 0a0d 4800 7474 4370     HTTP/1.0...HttpC
   bb244:	696c 6e65 3e74 5309 6174 7472 6f20 2066     lient>.Start of 
   bb254:	5448 5054 5220 7165 6575 7473 002e 6c63     HTTP Request..cl
   bb264:	736f 0065 6f43 6e6e 6365 6974 6e6f 4800     ose.Connection.H
   bb274:	7474 4370 696c 6e65 3e74 4309 6e6f 656e     ttpClient>.Conne
   bb284:	7463 6f69 206e 6166 6c69 6465 002e 4f48     ction failed..HO
   bb294:	5453 4300 6e6f 6574 746e 4c2d 6e65 7467     ST.Content-Lengt
   bb2a4:	0068 7448 7074 6c43 6569 746e 093e 6e45     h.HttpClient>.En
   bb2b4:	2064 666f 4820 5454 2050 6552 7571 7365     d of HTTP Reques
   bb2c4:	2e74 0d00 480a 7474 4370 696c 6e65 3e74     t....HttpClient>
   bb2d4:	5209 6365 6965 6976 676e 5420 5043 7420     .Receiving TCP t
   bb2e4:	6172 736e 6361 6974 6e6f 6f20 2066 2000     ransaction of . 
   bb2f4:	7962 6574 2e73 4800 7474 4370 696c 6e65     bytes..HttpClien
   bb304:	3e74 4509 7272 726f 203a 6552 7073 6e6f     t>.Error: Respon
   bb314:	6573 6220 646f 2079 616c 6772 7265 7420     se body larger t
   bb324:	6168 206e 7562 6666 7265 002e 0a0d 7448     han buffer....Ht
   bb334:	7074 6c43 6569 746e 093e 6e45 2064 666f     tpClient>.End of
   bb344:	5420 5043 7420 6172 736e 6361 6974 6e6f      TCP transaction
   bb354:	002e 0a0d 7448 7074 6c43 6569 746e 093e     ....HttpClient>.
   bb364:	7245 6f72 3a72 5420 6d69 6f65 7475 7720     Error: Timeout w
   bb374:	6968 656c 7220 6165 6964 676e 7220 7365     hile reading res
   bb384:	6f70 736e 2e65 0d00 480a 7474 4370 696c     ponse....HttpCli
   bb394:	6e65 3e74 4509 646e 6f20 2066 5448 5054     ent>.End of HTTP
   bb3a4:	5220 7365 6f70 736e 2065 0028 736d 2e29      Response (.ms).
   bb3b4:	4800 7474 4370 696c 6e65 3e74 5309 6174     .HttpClient>.Sta
   bb3c4:	7574 2073 6f43 6564 203a 0d00 0d0a 000a     tus Code: ......
   bb3d4:	7448 7074 6c43 6569 746e 093e 7245 6f72     HttpClient>.Erro
   bb3e4:	3a72 4320 6e61 7427 6620 6e69 2064 5448     r: Can't find HT
   bb3f4:	5054 7220 7365 6f70 736e 2065 6f62 7964     TP response body
   bb404:	002e 6977 6972 676e 622e 656c 5300 6174     ..wiring.ble.Sta
   bb414:	7472 6420 7369 6f63 6576 6972 676e 7320     rt discovering s
   bb424:	7265 6976 6563 2e73 5000 6565 2072 6564     ervices..Peer de
   bb434:	6976 6563 6920 2073 696d 7373 6e69 2167     vice is missing!
   bb444:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   bb454:	2064 6570 7265 4320 6e65 7274 6c61 6420     d peer Central d
   bb464:	7665 6369 2e65 4300 6e6f 656e 7463 6465     evice..Connected
   bb474:	6220 2079 6543 746e 6172 206c 6564 6976      by Central devi
   bb484:	6563 002e 6944 6373 6e6f 656e 7463 6465     ce..Disconnected
   bb494:	6220 2079 6572 6f6d 6574 6420 7665 6369      by remote devic
   bb4a4:	2e65 4400 7075 696c 6163 6574 2064 6863     e..Duplicated ch
   bb4b4:	7261 6361 6574 6972 7473 6369 6320 6e61     aracteristic can
   bb4c4:	6f6e 2074 6562 6120 6464 6465 002e 6146     not be added..Fa
   bb4d4:	6c69 6465 7420 206f 7061 6570 646e 6c20     iled to append l
   bb4e4:	636f 6c61 6320 6168 6172 7463 7265 7369     ocal characteris
   bb4f4:	6974 2e63 0000 0000                         tic.....

000bb4fc <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb504:	6da5 000b 6e09 000b 6f37 000b 6e33 000b     .m...n..7o..3n..
   bb514:	6da9 000b                                   .m..

000bb518 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb520:	6da1 000b 6e17 000b 6da3 000b 6e39 000b     .m...n...m..9n..
   bb530:	6dc9 000b                                   .m..

000bb534 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb53c:	6d9f 000b 6e25 000b 774d 000b 6e3f 000b     .m..%n..Mw..?n..
   bb54c:	6de9 000b                                   .m..

000bb550 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bb55c:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bb56e <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bb56e:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bb57e <_ZN8particle7BleUuid9BASE_UUIDE>:
   bb57e:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000bb590 <_ZTVN5spark13EthernetClassE>:
	...
   bb598:	832f 000b 8325 000b 831b 000b 8311 000b     /...%...........
   bb5a8:	8305 000b 82f9 000b 85b5 000b 85bd 000b     ................
   bb5b8:	82ed 000b 82e5 000b 82db 000b 82d1 000b     ................
   bb5c8:	85ed 000b                                   ....

000bb5cc <_ZTV7TwoWire>:
	...
   bb5d4:	834d 000b 8397 000b 836f 000b 834f 000b     M.......o...O...
   bb5e4:	8377 000b 837f 000b 8387 000b 838f 000b     w...............

000bb5f4 <_ZTV9IPAddress>:
	...
   bb5fc:	8459 000b 8449 000b 844b 000b 7061 0070     Y...I...K...app.

000bb60c <_ZTVN5spark12NetworkClassE>:
	...
   bb614:	8575 000b 857f 000b 8589 000b 8593 000b     u...............
   bb624:	859d 000b 85a9 000b 85b5 000b 85bd 000b     ................
   bb634:	85c5 000b 85d1 000b 85d9 000b 85e3 000b     ................
   bb644:	85ed 000b                                   ....

000bb648 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bb648:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   bb658:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   bb668:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   bb678:	6c61 6469 002e 6572 7663 6520 7272 726f     alid..recv error
   bb688:	3d20 2520 0064 0000                          = %d...

000bb690 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb698:	8e31 000b 8e55 000b 9387 000b 8e63 000b     1...U.......c...
   bb6a8:	8e35 000b                                   5...

000bb6ac <_ZTV9TCPClient>:
	...
   bb6b4:	8ee1 000b 8f15 000b 8dad 000b 8dc7 000b     ................
   bb6c4:	921d 000b 8df1 000b 9093 000b 8e25 000b     ............%...
   bb6d4:	9125 000b 8f65 000b 90c1 000b 92d1 000b     %...e...........
   bb6e4:	9061 000b 8e27 000b 8dd9 000b 8e69 000b     a...'.......i...
   bb6f4:	8f45 000b 5925 252d 2d6d 6425 2554 3a48     E...%Y-%m-%dT%H:
   bb704:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bb714 <_ZTV11USARTSerial>:
	...
   bb71c:	943d 000b 94a9 000b 9481 000b 86d9 000b     =...............
   bb72c:	9451 000b 946d 000b 945f 000b 947b 000b     Q...m..._...{...
   bb73c:	943f 000b 9443 000b                         ?...C...

000bb744 <_ZTV9USBSerial>:
	...
   bb74c:	94e7 000b 954f 000b 9525 000b 86d9 000b     ....O...%.......
   bb75c:	9517 000b 94e9 000b 94f9 000b 9549 000b     ............I...
   bb76c:	9509 000b 94e1 000b                         ........

000bb774 <_ZTVN5spark9WiFiClassE>:
	...
   bb77c:	412f 000b 9651 000b 9647 000b 4139 000b     /A..Q...G...9A..
   bb78c:	4117 000b 4123 000b 85b5 000b 85bd 000b     .A..#A..........
   bb79c:	963b 000b 9633 000b 9629 000b 961f 000b     ;...3...).......
   bb7ac:	85ed 000b                                   ....

000bb7b0 <_ZSt7nothrow>:
	...

000bb7b1 <_ZTSSt19_Sp_make_shared_tag>:
   bb7b1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bb7c1:	6572 5f64 6174 0067 0000                     red_tag....

000bb7cc <_ZTISt19_Sp_make_shared_tag>:
   bb7cc:	b80c 000b b7b1 000b                         ........

000bb7d4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bb7d4:	b86c 000b b7e0 000b b890 000b               l...........

000bb7e0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bb7e0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bb7f0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bb800:	0045 0000                                   E...

000bb804 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bb804:	0000 0000 b7d4 000b 9b65 000b 9b79 000b     ........e...y...
   bb814:	9d0d 000b 9d0d 000b 9be3 000b 9b25 000b     ............%...
   bb824:	9bcb 000b 9b8d 000b 9b57 000b               ........W...

000bb830 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bb830:	b86c 000b b83c 000b b7d4 000b               l...<.......

000bb83c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bb83c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bb84c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bb85c:	666e 456f 0000 0000                         nfoE....

000bb864 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bb864:	0000 0000 b830 000b 9c0d 000b 9c21 000b     ....0.......!...
   bb874:	9d0d 000b 9d0d 000b 9be3 000b 9b25 000b     ............%...
   bb884:	9ce1 000b 9c6d 000b 9c35 000b               ....m...5...

000bb890 <_ZTISt9type_info>:
   bb890:	b80c 000b b898 000b                         ........

000bb898 <_ZTSSt9type_info>:
   bb898:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bb8a8:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bb8b8:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   bb8c8:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bb8d8:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bb8e8:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bb8f8:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bb908:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000bb915 <_ctype_>:
   bb915:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bb925:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bb935:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bb945:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bb955:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bb965:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bb975:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bb985:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bb995:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bba16 <link_const_variable_data_end>:
	...

000bba18 <link_constructors_location>:
   bba18:	000b5009 	.word	0x000b5009
   bba1c:	000b82c1 	.word	0x000b82c1
   bba20:	000b8339 	.word	0x000b8339
   bba24:	000b8565 	.word	0x000b8565
   bba28:	000b86c5 	.word	0x000b86c5
   bba2c:	000b880d 	.word	0x000b880d
   bba30:	000b8d89 	.word	0x000b8d89
   bba34:	000b9429 	.word	0x000b9429
   bba38:	000b9681 	.word	0x000b9681

000bba3c <link_constructors_end>:
   bba3c:	00000000 	.word	0x00000000
