
/Users/trylaarsdam/Documents/dev/motionalysis/target/3.1.0/argon/motionalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007160  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000bb180  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000084  2003d9a8  000bb184  0001d9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000dc4  2003da30  2003da30  0002da30  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000bb208  000bb208  0002b208  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000bb230  000bb230  0002b230  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0011efa5  00000000  00000000  0002b234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00013297  00000000  00000000  0014a1d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00039ef5  00000000  00000000  0015d470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000031b8  00000000  00000000  00197365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 0000b1a0  00000000  00000000  0019a51d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037e69  00000000  00000000  001a56bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003fd50  00000000  00000000  001dd526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012a94d  00000000  00000000  0021d276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00008b80  00000000  00000000  00347bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f005 ff9f 	bl	b9f74 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f005 ffc1 	bl	b9fc4 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d9a8 	.word	0x2003d9a8
   b404c:	000bb184 	.word	0x000bb184
   b4050:	2003da2c 	.word	0x2003da2c
   b4054:	2003da30 	.word	0x2003da30
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f005 fac5 	bl	b95f0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42a5      	cmp	r5, r4
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bb158 	.word	0x000bb158
   b4080:	000bb17c 	.word	0x000bb17c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bc84 	b.w	b4990 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fcb5 	bl	b49f8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f005 ba65 	b.w	b9560 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 bcbf 	b.w	b6a18 <malloc>

000b409a <_Znaj>:
   b409a:	f002 bcbd 	b.w	b6a18 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f002 bcc3 	b.w	b6a28 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   b40b2:	4770      	bx	lr

000b40b4 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b40b4:	b510      	push	{r4, lr}
   b40b6:	4604      	mov	r4, r0
   b40b8:	3004      	adds	r0, #4
   b40ba:	f004 fa95 	bl	b85e8 <_ZN6StringD1Ev>
   b40be:	4620      	mov	r0, r4
   b40c0:	bd10      	pop	{r4, pc}

000b40c2 <_ZN14http_request_tD1Ev>:
} http_request_t;
   b40c2:	b510      	push	{r4, lr}
   b40c4:	4604      	mov	r4, r0
   b40c6:	303c      	adds	r0, #60	; 0x3c
   b40c8:	f004 fa8e 	bl	b85e8 <_ZN6StringD1Ev>
   b40cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b40d0:	f004 fa8a 	bl	b85e8 <_ZN6StringD1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f004 fa87 	bl	b85e8 <_ZN6StringD1Ev>
   b40da:	4620      	mov	r0, r4
   b40dc:	bd10      	pop	{r4, pc}

000b40de <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   b40de:	b510      	push	{r4, lr}
   b40e0:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b40e2:	6800      	ldr	r0, [r0, #0]
   b40e4:	b108      	cbz	r0, b40ea <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   b40e6:	f002 fc9f 	bl	b6a28 <free>
class SystemClass {
   b40ea:	4620      	mov	r0, r4
   b40ec:	bd10      	pop	{r4, pc}

000b40ee <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   b40ee:	b538      	push	{r3, r4, r5, lr}
   b40f0:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   b40f2:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   b40f4:	b128      	cbz	r0, b4102 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   b40f6:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   b40f8:	210c      	movs	r1, #12
   b40fa:	f005 fb80 	bl	b97fe <_ZdlPvj>
            wakeupSource = next;
   b40fe:	4628      	mov	r0, r5
        while (wakeupSource) {
   b4100:	e7f8      	b.n	b40f4 <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   b4102:	4620      	mov	r0, r4
   b4104:	bd38      	pop	{r3, r4, r5, pc}

000b4106 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   b4106:	b510      	push	{r4, lr}
   b4108:	4604      	mov	r4, r0

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   b410a:	b93a      	cbnz	r2, b411c <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b410c:	6803      	ldr	r3, [r0, #0]
   b410e:	689b      	ldr	r3, [r3, #8]
   b4110:	4798      	blx	r3
        n += println();
   b4112:	4620      	mov	r0, r4
    }
   b4114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b4118:	f004 b953 	b.w	b83c2 <_ZN5Print7printlnEv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b411c:	b2d2      	uxtb	r2, r2
   b411e:	f004 f966 	bl	b83ee <_ZN5Print11printNumberEmh>
   b4122:	e7f6      	b.n	b4112 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0xc>

000b4124 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b4124:	b570      	push	{r4, r5, r6, lr}
   b4126:	4605      	mov	r5, r0
   b4128:	460c      	mov	r4, r1
    if (base == 0) {
   b412a:	4616      	mov	r6, r2
   b412c:	b942      	cbnz	r2, b4140 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x1c>
        return write(n);
   b412e:	6803      	ldr	r3, [r0, #0]
   b4130:	b2c9      	uxtb	r1, r1
   b4132:	689b      	ldr	r3, [r3, #8]
   b4134:	4798      	blx	r3
        n += println();
   b4136:	4628      	mov	r0, r5
    }
   b4138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        n += println();
   b413c:	f004 b941 	b.w	b83c2 <_ZN5Print7printlnEv>
        if (n < 0 && base == 10) {
   b4140:	2900      	cmp	r1, #0
   b4142:	da0a      	bge.n	b415a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
   b4144:	2a0a      	cmp	r2, #10
   b4146:	d108      	bne.n	b415a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
            t = print('-');
   b4148:	212d      	movs	r1, #45	; 0x2d
   b414a:	f004 f931 	bl	b83b0 <_ZN5Print5printEc>
            val = -n;
   b414e:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b4150:	b2f2      	uxtb	r2, r6
   b4152:	4628      	mov	r0, r5
   b4154:	f004 f94b 	bl	b83ee <_ZN5Print11printNumberEmh>
   b4158:	e7ed      	b.n	b4136 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x12>
            val = n;
   b415a:	4621      	mov	r1, r4
   b415c:	e7f8      	b.n	b4150 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x2c>

000b415e <_ZN9USBSerial4lockEv.isra.0>:
#else
		return true;
#endif
	}

	void lock()
   b415e:	b508      	push	{r3, lr}
		return os_mutex_recursive_t(system_internal(2, nullptr));
   b4160:	2100      	movs	r1, #0
   b4162:	2002      	movs	r0, #2
   b4164:	f002 fb68 	bl	b6838 <system_internal>
	{
#if PLATFORM_THREADING
		os_mutex_recursive_lock(get_mutex());
#endif
	}
   b4168:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		os_mutex_recursive_lock(get_mutex());
   b416c:	f002 b93c 	b.w	b63e8 <os_mutex_recursive_lock>

000b4170 <_ZN10HttpClientD1Ev>:

class HttpClient {
   b4170:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4172:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b4174:	4b0a      	ldr	r3, [pc, #40]	; (b41a0 <_ZN10HttpClientD1Ev+0x30>)
   b4176:	6003      	str	r3, [r0, #0]
   b4178:	4605      	mov	r5, r0
   b417a:	b17c      	cbz	r4, b419c <_ZN10HttpClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b417c:	6863      	ldr	r3, [r4, #4]
   b417e:	3b01      	subs	r3, #1
   b4180:	6063      	str	r3, [r4, #4]
   b4182:	b95b      	cbnz	r3, b419c <_ZN10HttpClientD1Ev+0x2c>
          _M_dispose();
   b4184:	6823      	ldr	r3, [r4, #0]
   b4186:	4620      	mov	r0, r4
   b4188:	689b      	ldr	r3, [r3, #8]
   b418a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b418c:	68a3      	ldr	r3, [r4, #8]
   b418e:	3b01      	subs	r3, #1
   b4190:	60a3      	str	r3, [r4, #8]
   b4192:	b91b      	cbnz	r3, b419c <_ZN10HttpClientD1Ev+0x2c>
            _M_destroy();
   b4194:	6823      	ldr	r3, [r4, #0]
   b4196:	4620      	mov	r0, r4
   b4198:	68db      	ldr	r3, [r3, #12]
   b419a:	4798      	blx	r3
   b419c:	4628      	mov	r0, r5
   b419e:	bd38      	pop	{r3, r4, r5, pc}
   b41a0:	000bad9c 	.word	0x000bad9c

000b41a4 <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b41a4:	b40e      	push	{r1, r2, r3}
   b41a6:	b503      	push	{r0, r1, lr}
   b41a8:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   b41aa:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b41ac:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b41b0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b41b2:	f004 f93a 	bl	b842a <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b41b6:	b002      	add	sp, #8
   b41b8:	f85d eb04 	ldr.w	lr, [sp], #4
   b41bc:	b003      	add	sp, #12
   b41be:	4770      	bx	lr

000b41c0 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b41c0:	2300      	movs	r3, #0
   b41c2:	6840      	ldr	r0, [r0, #4]
   b41c4:	461a      	mov	r2, r3
   b41c6:	4619      	mov	r1, r3
   b41c8:	f002 bbce 	b.w	b6968 <network_on>

000b41cc <_ZN5spark9WiFiClass3offEv>:
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b41cc:	2300      	movs	r3, #0
   b41ce:	6840      	ldr	r0, [r0, #4]
   b41d0:	461a      	mov	r2, r3
   b41d2:	4619      	mov	r1, r3
   b41d4:	f002 bbd0 	b.w	b6978 <network_off>

000b41d8 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   b41d8:	2300      	movs	r3, #0
   b41da:	6840      	ldr	r0, [r0, #4]
   b41dc:	461a      	mov	r2, r3
   b41de:	f002 bba3 	b.w	b6928 <network_connect>

000b41e2 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b41e2:	2200      	movs	r2, #0
   b41e4:	6840      	ldr	r0, [r0, #4]
   b41e6:	4611      	mov	r1, r2
   b41e8:	f002 bbb6 	b.w	b6958 <network_ready>

000b41ec <_Z16HTTPRequestSetupv>:

int networkCount;
WiFiAccessPoint networks[5];
String networkBuffer;

void HTTPRequestSetup() {
   b41ec:	b510      	push	{r4, lr}
  request.hostname = kHTTPHostname;
   b41ee:	4c07      	ldr	r4, [pc, #28]	; (b420c <_Z16HTTPRequestSetupv+0x20>)
   b41f0:	4907      	ldr	r1, [pc, #28]	; (b4210 <_Z16HTTPRequestSetupv+0x24>)
   b41f2:	4620      	mov	r0, r4
   b41f4:	f004 fa71 	bl	b86da <_ZN6StringaSEPKc>
  request.port = kHTTPRequestPort;
   b41f8:	2350      	movs	r3, #80	; 0x50
   b41fa:	63a3      	str	r3, [r4, #56]	; 0x38
  request.path = "/";
   b41fc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b4200:	4904      	ldr	r1, [pc, #16]	; (b4214 <_Z16HTTPRequestSetupv+0x28>)
}
   b4202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  request.path = "/";
   b4206:	f004 ba68 	b.w	b86da <_ZN6StringaSEPKc>
   b420a:	bf00      	nop
   b420c:	2003e050 	.word	0x2003e050
   b4210:	000ba1fc 	.word	0x000ba1fc
   b4214:	000ba208 	.word	0x000ba208

000b4218 <_Z13writeRegisterhh>:
#include "constants.hpp"
#include <Adafruit_LIS3DH.h>

Adafruit_LIS3DH lis3dh = Adafruit_LIS3DH();

void writeRegister(byte reg, byte data) {
   b4218:	b538      	push	{r3, r4, r5, lr}
   b421a:	460c      	mov	r4, r1
   b421c:	4605      	mov	r5, r0
  Wire.beginTransmission(kLis3dhAddress);
   b421e:	f005 fac1 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b4222:	2118      	movs	r1, #24
   b4224:	f003 ff46 	bl	b80b4 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   b4228:	f005 fabc 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b422c:	6803      	ldr	r3, [r0, #0]
   b422e:	4629      	mov	r1, r5
   b4230:	689b      	ldr	r3, [r3, #8]
   b4232:	4798      	blx	r3
  Wire.write(data);
   b4234:	f005 fab6 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b4238:	6803      	ldr	r3, [r0, #0]
   b423a:	4621      	mov	r1, r4
   b423c:	689b      	ldr	r3, [r3, #8]
   b423e:	4798      	blx	r3
  Wire.endTransmission();
   b4240:	f005 fab0 	bl	b97a4 <_Z19__fetch_global_Wirev>
}
   b4244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();
   b4248:	f003 bf3b 	b.w	b80c2 <_ZN7TwoWire15endTransmissionEv>

000b424c <_Z12readRegisterh>:

unsigned int readRegister(byte reg) {
   b424c:	b510      	push	{r4, lr}
   b424e:	4604      	mov	r4, r0
  Wire.beginTransmission(kLis3dhAddress);
   b4250:	f005 faa8 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b4254:	2118      	movs	r1, #24
   b4256:	f003 ff2d 	bl	b80b4 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   b425a:	f005 faa3 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b425e:	6803      	ldr	r3, [r0, #0]
   b4260:	4621      	mov	r1, r4
   b4262:	689b      	ldr	r3, [r3, #8]
   b4264:	4798      	blx	r3
  Wire.endTransmission();
   b4266:	f005 fa9d 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b426a:	f003 ff2a 	bl	b80c2 <_ZN7TwoWire15endTransmissionEv>
 
  Wire.requestFrom(kLis3dhAddress, 1);
   b426e:	f005 fa99 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b4272:	2201      	movs	r2, #1
   b4274:	2118      	movs	r1, #24
   b4276:	f003 ff16 	bl	b80a6 <_ZN7TwoWire11requestFromEhj>
  return Wire.read();
   b427a:	f005 fa93 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b427e:	6803      	ldr	r3, [r0, #0]
}
   b4280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return Wire.read();
   b4284:	695b      	ldr	r3, [r3, #20]
   b4286:	4718      	bx	r3

000b4288 <_Z8init_ACCv>:

void init_ACC(void) {
   b4288:	b508      	push	{r3, lr}
  readRegister(0x21);
   b428a:	2021      	movs	r0, #33	; 0x21
   b428c:	f7ff ffde 	bl	b424c <_Z12readRegisterh>
  readRegister(0x26);
   b4290:	2026      	movs	r0, #38	; 0x26
   b4292:	f7ff ffdb 	bl	b424c <_Z12readRegisterh>
  readRegister(LIS3DH_REG_INT1SRC);
   b4296:	2031      	movs	r0, #49	; 0x31
   b4298:	f7ff ffd8 	bl	b424c <_Z12readRegisterh>
  writeRegister(0x20, 0x57); //Write A7h into CTRL_REG1;      // Turn on the sensor, enable X, Y, Z axes with ODR = 100Hz normal mode.
   b429c:	2157      	movs	r1, #87	; 0x57
   b429e:	2020      	movs	r0, #32
   b42a0:	f7ff ffba 	bl	b4218 <_Z13writeRegisterhh>
  writeRegister(0x21, 0x09); //Write 09h into CTRL_REG2;      // High-pass filter (HPF) enabled
   b42a4:	2109      	movs	r1, #9
   b42a6:	2021      	movs	r0, #33	; 0x21
   b42a8:	f7ff ffb6 	bl	b4218 <_Z13writeRegisterhh>
  writeRegister(0x22, 0x40); //Write 40h into CTRL_REG3;      // ACC AOI1 interrupt signal is routed to INT1 pin.
   b42ac:	2140      	movs	r1, #64	; 0x40
   b42ae:	2022      	movs	r0, #34	; 0x22
   b42b0:	f7ff ffb2 	bl	b4218 <_Z13writeRegisterhh>
  writeRegister(0x23, 0x00); //Write 00h into CTRL_REG4;      // Full Scale = +/-2 g
   b42b4:	2100      	movs	r1, #0
   b42b6:	2023      	movs	r0, #35	; 0x23
   b42b8:	f7ff ffae 	bl	b4218 <_Z13writeRegisterhh>
  writeRegister(0x24, 0x08); //Write 08h into CTRL_REG5;      // Default value is 00 for no latching. Interrupt signals on INT1 pin is not latched.
   b42bc:	2108      	movs	r1, #8
   b42be:	2024      	movs	r0, #36	; 0x24
   b42c0:	f7ff ffaa 	bl	b4218 <_Z13writeRegisterhh>
                                                              //Users don’t need to read the INT1_SRC register to clear the interrupt signal.
  // configurations for wakeup and motionless detection
  writeRegister(0x32, 0x10); //Write 10h into INT1_THS;          // Threshold (THS) = 16LSBs * 15.625mg/LSB = 250mg.
   b42c4:	2110      	movs	r1, #16
   b42c6:	2032      	movs	r0, #50	; 0x32
   b42c8:	f7ff ffa6 	bl	b4218 <_Z13writeRegisterhh>
  writeRegister(0x33, 0x00); //Write 00h into INT1_DURATION;     // Duration = 1LSBs * (1/10Hz) = 0.1s.
   b42cc:	2100      	movs	r1, #0
   b42ce:	2033      	movs	r0, #51	; 0x33
   b42d0:	f7ff ffa2 	bl	b4218 <_Z13writeRegisterhh>
  //readRegister();  //Dummy read to force the HP filter to set reference acceleration/tilt value
  writeRegister(0x30, 0x2A); //Write 2Ah into INT1_CFG;          // Enable XLIE, YLIE, ZLIE interrupt generation, OR logic.
  //lis3dh.setRange(LIS3DH_RANGE_2_G);   // 2, 4, 8 or 16 G!
}
   b42d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  writeRegister(0x30, 0x2A); //Write 2Ah into INT1_CFG;          // Enable XLIE, YLIE, ZLIE interrupt generation, OR logic.
   b42d8:	212a      	movs	r1, #42	; 0x2a
   b42da:	2030      	movs	r0, #48	; 0x30
   b42dc:	f7ff bf9c 	b.w	b4218 <_Z13writeRegisterhh>

000b42e0 <_Z14initFromEEPROMv>:
    }
  }
  init_ACC();
}

void initFromEEPROM() {
   b42e0:	b538      	push	{r3, r4, r5, lr}
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b42e2:	4d27      	ldr	r5, [pc, #156]	; (b4380 <_Z14initFromEEPROMv+0xa0>)
   b42e4:	4c27      	ldr	r4, [pc, #156]	; (b4384 <_Z14initFromEEPROMv+0xa4>)
  EEPROM.get(kRecordingIntervalEEPROMAddress, recordingInterval);
   b42e6:	f005 fa31 	bl	b974c <_Z21__fetch_global_EEPROMv>
   b42ea:	2204      	movs	r2, #4
   b42ec:	4629      	mov	r1, r5
   b42ee:	2064      	movs	r0, #100	; 0x64
   b42f0:	f002 f8aa 	bl	b6448 <HAL_EEPROM_Get>
  EEPROM.get(kDsidEEPROMAddress, dsid);
   b42f4:	f005 fa2a 	bl	b974c <_Z21__fetch_global_EEPROMv>
   b42f8:	4923      	ldr	r1, [pc, #140]	; (b4388 <_Z14initFromEEPROMv+0xa8>)
   b42fa:	2204      	movs	r2, #4
   b42fc:	2000      	movs	r0, #0
   b42fe:	f002 f8a3 	bl	b6448 <HAL_EEPROM_Get>
  EEPROM.get(kReportingIntervalEEPROMAddress, reportingInterval);
   b4302:	f005 fa23 	bl	b974c <_Z21__fetch_global_EEPROMv>
   b4306:	2204      	movs	r2, #4
   b4308:	4621      	mov	r1, r4
   b430a:	20c8      	movs	r0, #200	; 0xc8
   b430c:	f002 f89c 	bl	b6448 <HAL_EEPROM_Get>
  EEPROM.get(kSleepPauseDurationEEPROMAddress, sleepPauseDuration);
   b4310:	f005 fa1c 	bl	b974c <_Z21__fetch_global_EEPROMv>
   b4314:	491d      	ldr	r1, [pc, #116]	; (b438c <_Z14initFromEEPROMv+0xac>)
   b4316:	2204      	movs	r2, #4
   b4318:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b431c:	f002 f894 	bl	b6448 <HAL_EEPROM_Get>
  reportingInterval = reportingInterval / 1000; // convert to seconds from milliseconds 
   b4320:	6823      	ldr	r3, [r4, #0]
   b4322:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4326:	fb93 f3f2 	sdiv	r3, r3, r2
   b432a:	6023      	str	r3, [r4, #0]
  Serial.printlnf("recordingInterval: %i", recordingInterval);
   b432c:	f004 ffea 	bl	b9304 <_Z16_fetch_usbserialv>
   b4330:	682a      	ldr	r2, [r5, #0]
   b4332:	4917      	ldr	r1, [pc, #92]	; (b4390 <_Z14initFromEEPROMv+0xb0>)
   b4334:	f7ff ff36 	bl	b41a4 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("reportingInterval: %i", reportingInterval);
   b4338:	f004 ffe4 	bl	b9304 <_Z16_fetch_usbserialv>
   b433c:	6822      	ldr	r2, [r4, #0]
   b433e:	4915      	ldr	r1, [pc, #84]	; (b4394 <_Z14initFromEEPROMv+0xb4>)
   b4340:	f7ff ff30 	bl	b41a4 <_ZN5Print8printlnfEPKcz>
  if(recordingInterval == kEEPROMEmptyValue) { // if no value stored in EEPROM, set to default
   b4344:	682b      	ldr	r3, [r5, #0]
   b4346:	3301      	adds	r3, #1
    recordingInterval = kDefaultRecordingInterval; //default value
   b4348:	bf04      	itt	eq
   b434a:	f44f 73fa 	moveq.w	r3, #500	; 0x1f4
   b434e:	602b      	streq	r3, [r5, #0]
  }
  if(reportingInterval == kEEPROMEmptyValue) {
   b4350:	6823      	ldr	r3, [r4, #0]
   b4352:	3301      	adds	r3, #1
    reportingInterval = kDefaultReportingInterval; //default value
   b4354:	bf04      	itt	eq
   b4356:	230f      	moveq	r3, #15
   b4358:	6023      	streq	r3, [r4, #0]
  }
  if(sleepPauseDuration == kEEPROMEmptyValue) {
   b435a:	4b0c      	ldr	r3, [pc, #48]	; (b438c <_Z14initFromEEPROMv+0xac>)
   b435c:	681a      	ldr	r2, [r3, #0]
   b435e:	3201      	adds	r2, #1
    sleepPauseDuration = kDefaultSleepPauseDuration; //default value
   b4360:	bf04      	itt	eq
   b4362:	2205      	moveq	r2, #5
   b4364:	601a      	streq	r2, [r3, #0]
  }
  if(dsid == kEEPROMEmptyValue) {
   b4366:	4b08      	ldr	r3, [pc, #32]	; (b4388 <_Z14initFromEEPROMv+0xa8>)
   b4368:	681b      	ldr	r3, [r3, #0]
   b436a:	3301      	adds	r3, #1
   b436c:	d106      	bne.n	b437c <_Z14initFromEEPROMv+0x9c>
    Serial.println("DSID not stored in EEPROM. BLE config required"); 
   b436e:	f004 ffc9 	bl	b9304 <_Z16_fetch_usbserialv>
    //TODO notify user somehow
  }
   b4372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println("DSID not stored in EEPROM. BLE config required"); 
   b4376:	4908      	ldr	r1, [pc, #32]	; (b4398 <_Z14initFromEEPROMv+0xb8>)
   b4378:	f004 b82f 	b.w	b83da <_ZN5Print7printlnEPKc>
   b437c:	bd38      	pop	{r3, r4, r5, pc}
   b437e:	bf00      	nop
   b4380:	2003e040 	.word	0x2003e040
   b4384:	2003e044 	.word	0x2003e044
   b4388:	2003da94 	.word	0x2003da94
   b438c:	2003e0e0 	.word	0x2003e0e0
   b4390:	000ba20a 	.word	0x000ba20a
   b4394:	000ba220 	.word	0x000ba220
   b4398:	000ba236 	.word	0x000ba236

000b439c <_Z14sleepReadyTestv>:
#include "constants.hpp"
#include "Particle.h"
#include "initHardware.hpp"

bool sleepReadyTest(){
  if(sleepTimeoutCounter >= ((sleepPauseDuration * 1000) / recordingInterval)){
   b439c:	4b07      	ldr	r3, [pc, #28]	; (b43bc <_Z14sleepReadyTestv+0x20>)
   b439e:	4a08      	ldr	r2, [pc, #32]	; (b43c0 <_Z14sleepReadyTestv+0x24>)
   b43a0:	681b      	ldr	r3, [r3, #0]
   b43a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b43a6:	4343      	muls	r3, r0
   b43a8:	6810      	ldr	r0, [r2, #0]
   b43aa:	4a06      	ldr	r2, [pc, #24]	; (b43c4 <_Z14sleepReadyTestv+0x28>)
   b43ac:	fb93 f3f0 	sdiv	r3, r3, r0
   b43b0:	6810      	ldr	r0, [r2, #0]
    return true;
  }
  else {
    return false;
  }
}
   b43b2:	4283      	cmp	r3, r0
   b43b4:	bfcc      	ite	gt
   b43b6:	2000      	movgt	r0, #0
   b43b8:	2001      	movle	r0, #1
   b43ba:	4770      	bx	lr
   b43bc:	2003e0e0 	.word	0x2003e0e0
   b43c0:	2003e040 	.word	0x2003e040
   b43c4:	2003e0e4 	.word	0x2003e0e4

000b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b43c8:	b510      	push	{r4, lr}
		return os_mutex_recursive_t(system_internal(2, nullptr));
   b43ca:	2100      	movs	r1, #0
   b43cc:	4604      	mov	r4, r0
   b43ce:	2002      	movs	r0, #2
   b43d0:	f002 fa32 	bl	b6838 <system_internal>

	void unlock()
	{
#if PLATFORM_THREADING
		os_mutex_recursive_unlock(get_mutex());
   b43d4:	f002 f810 	bl	b63f8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b43d8:	4620      	mov	r0, r4
   b43da:	bd10      	pop	{r4, pc}

000b43dc <_Z10reportData6String>:

void reportData(String payload) {
   b43dc:	b530      	push	{r4, r5, lr}
   b43de:	4604      	mov	r4, r0
   b43e0:	b089      	sub	sp, #36	; 0x24
  WiFi.on();
   b43e2:	4865      	ldr	r0, [pc, #404]	; (b4578 <_Z10reportData6String+0x19c>)
  WiFi.connect();
  while(!WiFi.ready()) {
   b43e4:	4d64      	ldr	r5, [pc, #400]	; (b4578 <_Z10reportData6String+0x19c>)
  WiFi.on();
   b43e6:	f7ff feeb 	bl	b41c0 <_ZN5spark9WiFiClass2onEv>
  WiFi.connect();
   b43ea:	4863      	ldr	r0, [pc, #396]	; (b4578 <_Z10reportData6String+0x19c>)
   b43ec:	2100      	movs	r1, #0
   b43ee:	f7ff fef3 	bl	b41d8 <_ZN5spark9WiFiClass7connectEj>
  while(!WiFi.ready()) {
   b43f2:	4628      	mov	r0, r5
   b43f4:	f7ff fef5 	bl	b41e2 <_ZN5spark9WiFiClass5readyEv>
   b43f8:	b918      	cbnz	r0, b4402 <_Z10reportData6String+0x26>
    delay(100);
   b43fa:	2064      	movs	r0, #100	; 0x64
   b43fc:	f002 fb5c 	bl	b6ab8 <delay>
  while(!WiFi.ready()) {
   b4400:	e7f7      	b.n	b43f2 <_Z10reportData6String+0x16>
  }
  if(WiFi.ready() != true) {
   b4402:	485d      	ldr	r0, [pc, #372]	; (b4578 <_Z10reportData6String+0x19c>)
   b4404:	f7ff feed 	bl	b41e2 <_ZN5spark9WiFiClass5readyEv>
   b4408:	b9a8      	cbnz	r0, b4436 <_Z10reportData6String+0x5a>
    WITH_LOCK(Serial) {
   b440a:	f004 ff7b 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b440e:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b4410:	f7ff fea5 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WiFi failed to connect, data not reported");
   b4414:	f004 ff76 	bl	b9304 <_Z16_fetch_usbserialv>
   b4418:	4958      	ldr	r1, [pc, #352]	; (b457c <_Z10reportData6String+0x1a0>)
   b441a:	f003 ffde 	bl	b83da <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b441e:	a804      	add	r0, sp, #16
   b4420:	f7ff ffd2 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b4424:	4856      	ldr	r0, [pc, #344]	; (b4580 <_Z10reportData6String+0x1a4>)
   b4426:	4621      	mov	r1, r4
   b4428:	f004 f9a6 	bl	b8778 <_ZN6String6concatERKS_>
    WITH_LOCK(Serial) {
      Serial.println("ReqBody: " + request.body);
    }
    rolloverPayload = "";
  }
  WiFi.off();
   b442c:	4852      	ldr	r0, [pc, #328]	; (b4578 <_Z10reportData6String+0x19c>)
   b442e:	f7ff fecd 	bl	b41cc <_ZN5spark9WiFiClass3offEv>
   b4432:	b009      	add	sp, #36	; 0x24
   b4434:	bd30      	pop	{r4, r5, pc}
    WITH_LOCK(Serial) {
   b4436:	f004 ff65 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b443a:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b443c:	f7ff fe8f 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WiFi connected, reporting data");
   b4440:	f004 ff60 	bl	b9304 <_Z16_fetch_usbserialv>
   b4444:	494f      	ldr	r1, [pc, #316]	; (b4584 <_Z10reportData6String+0x1a8>)
   b4446:	f003 ffc8 	bl	b83da <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b444a:	a804      	add	r0, sp, #16
   b444c:	f7ff ffbc 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b4450:	494d      	ldr	r1, [pc, #308]	; (b4588 <_Z10reportData6String+0x1ac>)
   b4452:	484b      	ldr	r0, [pc, #300]	; (b4580 <_Z10reportData6String+0x1a4>)
   b4454:	f004 f9dd 	bl	b8812 <_ZNK6String6equalsEPKc>
    if(rolloverPayload != "") {
   b4458:	b9e8      	cbnz	r0, b4496 <_Z10reportData6String+0xba>
      WITH_LOCK(Serial) {
   b445a:	f004 ff53 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b445e:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   b4460:	f7ff fe7d 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("Rollover payload: " + rolloverPayload);
   b4464:	f004 ff4e 	bl	b9304 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4468:	4948      	ldr	r1, [pc, #288]	; (b458c <_Z10reportData6String+0x1b0>)
   b446a:	4605      	mov	r5, r0
   b446c:	a804      	add	r0, sp, #16
   b446e:	f004 f906 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
   b4472:	4943      	ldr	r1, [pc, #268]	; (b4580 <_Z10reportData6String+0x1a4>)
   b4474:	a804      	add	r0, sp, #16
   b4476:	f004 f9a1 	bl	b87bc <_ZplRK15StringSumHelperRK6String>
   b447a:	6801      	ldr	r1, [r0, #0]
   b447c:	4628      	mov	r0, r5
   b447e:	f003 ffac 	bl	b83da <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4482:	a804      	add	r0, sp, #16
   b4484:	f004 f8b0 	bl	b85e8 <_ZN6StringD1Ev>
      WITH_LOCK(Serial) {
   b4488:	a803      	add	r0, sp, #12
   b448a:	f7ff ff9d 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b448e:	493c      	ldr	r1, [pc, #240]	; (b4580 <_Z10reportData6String+0x1a4>)
   b4490:	4620      	mov	r0, r4
   b4492:	f004 f971 	bl	b8778 <_ZN6String6concatERKS_>
    payload.remove(payload.length() - 1);
   b4496:	68a1      	ldr	r1, [r4, #8]
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
    }

    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
   b4498:	4d3d      	ldr	r5, [pc, #244]	; (b4590 <_Z10reportData6String+0x1b4>)
   b449a:	3901      	subs	r1, #1
   b449c:	4620      	mov	r0, r4
   b449e:	f004 fa1e 	bl	b88de <_ZN6String6removeEj>
	StringSumHelper(const char *p) : String(p) {}
   b44a2:	493c      	ldr	r1, [pc, #240]	; (b4594 <_Z10reportData6String+0x1b8>)
   b44a4:	a804      	add	r0, sp, #16
   b44a6:	f004 f8ea 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
    request.body = "{\"data\":[" + payload + "]}";
   b44aa:	4621      	mov	r1, r4
   b44ac:	a804      	add	r0, sp, #16
   b44ae:	f004 f985 	bl	b87bc <_ZplRK15StringSumHelperRK6String>
   b44b2:	4939      	ldr	r1, [pc, #228]	; (b4598 <_Z10reportData6String+0x1bc>)
   b44b4:	f004 f98e 	bl	b87d4 <_ZplRK15StringSumHelperPKc>
   b44b8:	4601      	mov	r1, r0
   b44ba:	4838      	ldr	r0, [pc, #224]	; (b459c <_Z10reportData6String+0x1c0>)
   b44bc:	f004 f8f3 	bl	b86a6 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b44c0:	a804      	add	r0, sp, #16
   b44c2:	f004 f891 	bl	b85e8 <_ZN6StringD1Ev>
    WITH_LOCK(Serial){
   b44c6:	f004 ff1d 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b44ca:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b44cc:	f7ff fe47 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
   b44d0:	4b33      	ldr	r3, [pc, #204]	; (b45a0 <_Z10reportData6String+0x1c4>)
   b44d2:	4934      	ldr	r1, [pc, #208]	; (b45a4 <_Z10reportData6String+0x1c8>)
   b44d4:	9300      	str	r3, [sp, #0]
   b44d6:	462a      	mov	r2, r5
   b44d8:	4b33      	ldr	r3, [pc, #204]	; (b45a8 <_Z10reportData6String+0x1cc>)
   b44da:	4834      	ldr	r0, [pc, #208]	; (b45ac <_Z10reportData6String+0x1d0>)
   b44dc:	f001 fcde 	bl	b5e9c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
   b44e0:	a804      	add	r0, sp, #16
   b44e2:	f7ff ff71 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    WITH_LOCK(Serial) {
   b44e6:	f004 ff0d 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b44ea:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b44ec:	f7ff fe37 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("Status: " + response.status);
   b44f0:	f004 ff08 	bl	b9304 <_Z16_fetch_usbserialv>
   b44f4:	682b      	ldr	r3, [r5, #0]
   b44f6:	492e      	ldr	r1, [pc, #184]	; (b45b0 <_Z10reportData6String+0x1d4>)
   b44f8:	4419      	add	r1, r3
   b44fa:	f003 ff6e 	bl	b83da <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b44fe:	a804      	add	r0, sp, #16
   b4500:	f7ff ff62 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    WITH_LOCK(Serial) {
   b4504:	f004 fefe 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4508:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   b450a:	f7ff fe28 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("Body: " + response.body);
   b450e:	f004 fef9 	bl	b9304 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4512:	4928      	ldr	r1, [pc, #160]	; (b45b4 <_Z10reportData6String+0x1d8>)
   b4514:	4604      	mov	r4, r0
   b4516:	a804      	add	r0, sp, #16
   b4518:	f004 f8b1 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
   b451c:	1d29      	adds	r1, r5, #4
   b451e:	a804      	add	r0, sp, #16
   b4520:	f004 f94c 	bl	b87bc <_ZplRK15StringSumHelperRK6String>
   b4524:	6801      	ldr	r1, [r0, #0]
   b4526:	4620      	mov	r0, r4
   b4528:	f003 ff57 	bl	b83da <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b452c:	a804      	add	r0, sp, #16
   b452e:	f004 f85b 	bl	b85e8 <_ZN6StringD1Ev>
    WITH_LOCK(Serial) {
   b4532:	a803      	add	r0, sp, #12
   b4534:	f7ff ff48 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    WITH_LOCK(Serial) {
   b4538:	f004 fee4 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b453c:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   b453e:	f7ff fe0e 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("ReqBody: " + request.body);
   b4542:	f004 fedf 	bl	b9304 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4546:	491c      	ldr	r1, [pc, #112]	; (b45b8 <_Z10reportData6String+0x1dc>)
   b4548:	4604      	mov	r4, r0
   b454a:	a804      	add	r0, sp, #16
   b454c:	f004 f897 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
   b4550:	4912      	ldr	r1, [pc, #72]	; (b459c <_Z10reportData6String+0x1c0>)
   b4552:	a804      	add	r0, sp, #16
   b4554:	f004 f932 	bl	b87bc <_ZplRK15StringSumHelperRK6String>
   b4558:	6801      	ldr	r1, [r0, #0]
   b455a:	4620      	mov	r0, r4
   b455c:	f003 ff3d 	bl	b83da <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4560:	a804      	add	r0, sp, #16
   b4562:	f004 f841 	bl	b85e8 <_ZN6StringD1Ev>
    WITH_LOCK(Serial) {
   b4566:	a803      	add	r0, sp, #12
   b4568:	f7ff ff2e 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    rolloverPayload = "";
   b456c:	4906      	ldr	r1, [pc, #24]	; (b4588 <_Z10reportData6String+0x1ac>)
   b456e:	4804      	ldr	r0, [pc, #16]	; (b4580 <_Z10reportData6String+0x1a4>)
   b4570:	f004 f8b3 	bl	b86da <_ZN6StringaSEPKc>
   b4574:	e75a      	b.n	b442c <_Z10reportData6String+0x50>
   b4576:	bf00      	nop
   b4578:	2003e7c0 	.word	0x2003e7c0
   b457c:	000ba265 	.word	0x000ba265
   b4580:	2003e0b0 	.word	0x2003e0b0
   b4584:	000ba28f 	.word	0x000ba28f
   b4588:	000ba587 	.word	0x000ba587
   b458c:	000ba2ae 	.word	0x000ba2ae
   b4590:	2003e09c 	.word	0x2003e09c
   b4594:	000ba2c1 	.word	0x000ba2c1
   b4598:	000ba2cb 	.word	0x000ba2cb
   b459c:	2003e08c 	.word	0x2003e08c
   b45a0:	000ba2ce 	.word	0x000ba2ce
   b45a4:	2003e050 	.word	0x2003e050
   b45a8:	2003d9ac 	.word	0x2003d9ac
   b45ac:	2003da9c 	.word	0x2003da9c
   b45b0:	000ba2d3 	.word	0x000ba2d3
   b45b4:	000ba2df 	.word	0x000ba2df
   b45b8:	000ba2dc 	.word	0x000ba2dc

000b45bc <_Z15reportingThreadPv>:
      break;
    }
  }
}

void reportingThread(void *args) {
   b45bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while(true) {
    if(storedValuesIndex >= ((reportingInterval * kSecondsToMilliseconds) / recordingInterval)) {
   b45c0:	f8df a11c 	ldr.w	sl, [pc, #284]	; b46e0 <_Z15reportingThreadPv+0x124>
   b45c4:	4c3c      	ldr	r4, [pc, #240]	; (b46b8 <_Z15reportingThreadPv+0xfc>)
void reportingThread(void *args) {
   b45c6:	b08d      	sub	sp, #52	; 0x34
    if(storedValuesIndex >= ((reportingInterval * kSecondsToMilliseconds) / recordingInterval)) {
   b45c8:	f8da 3000 	ldr.w	r3, [sl]
   b45cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b45d0:	4353      	muls	r3, r2
   b45d2:	4a3a      	ldr	r2, [pc, #232]	; (b46bc <_Z15reportingThreadPv+0x100>)
   b45d4:	6812      	ldr	r2, [r2, #0]
   b45d6:	fb93 f3f2 	sdiv	r3, r3, r2
   b45da:	6822      	ldr	r2, [r4, #0]
   b45dc:	4293      	cmp	r3, r2
   b45de:	dc67      	bgt.n	b46b0 <_Z15reportingThreadPv+0xf4>

      os_mutex_lock(payloadAccessLock); // lock access to payload before copying to local variable and resetting global payload
   b45e0:	4f37      	ldr	r7, [pc, #220]	; (b46c0 <_Z15reportingThreadPv+0x104>)
   b45e2:	f8df 9100 	ldr.w	r9, [pc, #256]	; b46e4 <_Z15reportingThreadPv+0x128>
   b45e6:	6838      	ldr	r0, [r7, #0]
   b45e8:	f8df 80fc 	ldr.w	r8, [pc, #252]	; b46e8 <_Z15reportingThreadPv+0x12c>
      for (int i = 0; i < storedValuesIndex; i++) {
        //Serial.printf("{timestamp: %i, data: %i}, ", storedTimes[i], storedValues[i]);
        payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b45ec:	f8df b0fc 	ldr.w	fp, [pc, #252]	; b46ec <_Z15reportingThreadPv+0x130>
      os_mutex_lock(payloadAccessLock); // lock access to payload before copying to local variable and resetting global payload
   b45f0:	f001 feda 	bl	b63a8 <os_mutex_lock>
	StringSumHelper(const char *p) : String(p) {}
   b45f4:	4b33      	ldr	r3, [pc, #204]	; (b46c4 <_Z15reportingThreadPv+0x108>)
      for (int i = 0; i < storedValuesIndex; i++) {
   b45f6:	2500      	movs	r5, #0
   b45f8:	6822      	ldr	r2, [r4, #0]
   b45fa:	42aa      	cmp	r2, r5
   b45fc:	dd35      	ble.n	b466a <_Z15reportingThreadPv+0xae>
   b45fe:	4619      	mov	r1, r3
   b4600:	a804      	add	r0, sp, #16
   b4602:	f004 f83c 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
        payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b4606:	4b30      	ldr	r3, [pc, #192]	; (b46c8 <_Z15reportingThreadPv+0x10c>)
   b4608:	220a      	movs	r2, #10
   b460a:	6819      	ldr	r1, [r3, #0]
   b460c:	4668      	mov	r0, sp
   b460e:	f004 f876 	bl	b86fe <_ZN6StringC1Eih>
   b4612:	4669      	mov	r1, sp
   b4614:	a804      	add	r0, sp, #16
   b4616:	f004 f8d1 	bl	b87bc <_ZplRK15StringSumHelperRK6String>
   b461a:	4659      	mov	r1, fp
   b461c:	f004 f8da 	bl	b87d4 <_ZplRK15StringSumHelperPKc>
   b4620:	f819 1b01 	ldrb.w	r1, [r9], #1
   b4624:	f004 f8eb 	bl	b87fe <_ZplRK15StringSumHelperh>
   b4628:	4928      	ldr	r1, [pc, #160]	; (b46cc <_Z15reportingThreadPv+0x110>)
   b462a:	f004 f8d3 	bl	b87d4 <_ZplRK15StringSumHelperPKc>
   b462e:	220a      	movs	r2, #10
   b4630:	f858 1b04 	ldr.w	r1, [r8], #4
   b4634:	4606      	mov	r6, r0
   b4636:	a808      	add	r0, sp, #32
   b4638:	f004 f874 	bl	b8724 <_ZN6StringC1Elh>
   b463c:	a908      	add	r1, sp, #32
   b463e:	4630      	mov	r0, r6
   b4640:	f004 f8bc 	bl	b87bc <_ZplRK15StringSumHelperRK6String>
   b4644:	4922      	ldr	r1, [pc, #136]	; (b46d0 <_Z15reportingThreadPv+0x114>)
   b4646:	f004 f8c5 	bl	b87d4 <_ZplRK15StringSumHelperPKc>
   b464a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b464c:	4821      	ldr	r0, [pc, #132]	; (b46d4 <_Z15reportingThreadPv+0x118>)
   b464e:	f004 f893 	bl	b8778 <_ZN6String6concatERKS_>
   b4652:	a808      	add	r0, sp, #32
   b4654:	f003 ffc8 	bl	b85e8 <_ZN6StringD1Ev>
   b4658:	4668      	mov	r0, sp
   b465a:	f003 ffc5 	bl	b85e8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b465e:	a804      	add	r0, sp, #16
   b4660:	f003 ffc2 	bl	b85e8 <_ZN6StringD1Ev>
      for (int i = 0; i < storedValuesIndex; i++) {
   b4664:	3501      	adds	r5, #1
   b4666:	4b17      	ldr	r3, [pc, #92]	; (b46c4 <_Z15reportingThreadPv+0x108>)
   b4668:	e7c6      	b.n	b45f8 <_Z15reportingThreadPv+0x3c>
      }
      storedValuesIndex = 0;
   b466a:	2300      	movs	r3, #0
      String localPayload = payload;
   b466c:	4919      	ldr	r1, [pc, #100]	; (b46d4 <_Z15reportingThreadPv+0x118>)
      storedValuesIndex = 0;
   b466e:	6023      	str	r3, [r4, #0]
      String localPayload = payload;
   b4670:	a804      	add	r0, sp, #16
   b4672:	f004 f827 	bl	b86c4 <_ZN6StringC1ERKS_>
      payload = "";
      os_mutex_unlock(payloadAccessLock);
      os_mutex_lock(reportingSleepProtectionLock);
   b4676:	4d18      	ldr	r5, [pc, #96]	; (b46d8 <_Z15reportingThreadPv+0x11c>)
      payload = "";
   b4678:	4918      	ldr	r1, [pc, #96]	; (b46dc <_Z15reportingThreadPv+0x120>)
   b467a:	4816      	ldr	r0, [pc, #88]	; (b46d4 <_Z15reportingThreadPv+0x118>)
   b467c:	f004 f82d 	bl	b86da <_ZN6StringaSEPKc>
      os_mutex_unlock(payloadAccessLock);
   b4680:	6838      	ldr	r0, [r7, #0]
   b4682:	f001 fe99 	bl	b63b8 <os_mutex_unlock>
      os_mutex_lock(reportingSleepProtectionLock);
   b4686:	6828      	ldr	r0, [r5, #0]
   b4688:	f001 fe8e 	bl	b63a8 <os_mutex_lock>
      reportData(localPayload);
   b468c:	a904      	add	r1, sp, #16
   b468e:	a808      	add	r0, sp, #32
   b4690:	f004 f818 	bl	b86c4 <_ZN6StringC1ERKS_>
   b4694:	a808      	add	r0, sp, #32
   b4696:	f7ff fea1 	bl	b43dc <_Z10reportData6String>
   b469a:	a808      	add	r0, sp, #32
   b469c:	f003 ffa4 	bl	b85e8 <_ZN6StringD1Ev>
      os_mutex_unlock(reportingSleepProtectionLock);
   b46a0:	6828      	ldr	r0, [r5, #0]
   b46a2:	f001 fe89 	bl	b63b8 <os_mutex_unlock>
      init_ACC();
   b46a6:	f7ff fdef 	bl	b4288 <_Z8init_ACCv>
      String localPayload = payload;
   b46aa:	a804      	add	r0, sp, #16
   b46ac:	f003 ff9c 	bl	b85e8 <_ZN6StringD1Ev>
    }
    os_thread_yield();
   b46b0:	f001 fe6a 	bl	b6388 <os_thread_yield>
  }
   b46b4:	e788      	b.n	b45c8 <_Z15reportingThreadPv+0xc>
   b46b6:	bf00      	nop
   b46b8:	2003e5f8 	.word	0x2003e5f8
   b46bc:	2003e040 	.word	0x2003e040
   b46c0:	2003e030 	.word	0x2003e030
   b46c4:	000ba2e6 	.word	0x000ba2e6
   b46c8:	2003da94 	.word	0x2003da94
   b46cc:	000ba2fa 	.word	0x000ba2fa
   b46d0:	000ba309 	.word	0x000ba309
   b46d4:	2003e020 	.word	0x2003e020
   b46d8:	2003e048 	.word	0x2003e048
   b46dc:	000ba587 	.word	0x000ba587
   b46e0:	2003e044 	.word	0x2003e044
   b46e4:	2003e4f8 	.word	0x2003e4f8
   b46e8:	2003e0f8 	.word	0x2003e0f8
   b46ec:	000ba2ef 	.word	0x000ba2ef

000b46f0 <_Z12initHardwarev>:
void initHardware() {
   b46f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        system_get_flag(flag, &value, nullptr);
        return value;
    }

    static inline void set_flag(system_flag_t flag, uint8_t value) {
        system_set_flag(flag, value, nullptr);
   b46f2:	2200      	movs	r2, #0
   b46f4:	2101      	movs	r1, #1
   b46f6:	2003      	movs	r0, #3
   b46f8:	f002 f8a6 	bl	b6848 <system_set_flag>
  pinMode(kBLEConnectedLED, OUTPUT); //BLE connected indicator 
   b46fc:	2101      	movs	r1, #1
   b46fe:	2007      	movs	r0, #7
   b4700:	f004 ffe6 	bl	b96d0 <pinMode>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b4704:	4d28      	ldr	r5, [pc, #160]	; (b47a8 <_Z12initHardwarev+0xb8>)
  digitalWrite(kBLEConnectedLED, LOW);
   b4706:	2100      	movs	r1, #0
   b4708:	2007      	movs	r0, #7
   b470a:	f004 fff2 	bl	b96f2 <digitalWrite>
  pinMode(kLIS3DHInterruptPin, INPUT); //LIS3DH interrupt pin
   b470e:	2100      	movs	r1, #0
   b4710:	2002      	movs	r0, #2
   b4712:	f004 ffdd 	bl	b96d0 <pinMode>
   b4716:	7d2b      	ldrb	r3, [r5, #20]
   b4718:	b19b      	cbz	r3, b4742 <_Z12initHardwarev+0x52>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b471a:	2302      	movs	r3, #2
   b471c:	722b      	strb	r3, [r5, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b471e:	682b      	ldr	r3, [r5, #0]
   b4720:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b4722:	b34b      	cbz	r3, b4778 <_Z12initHardwarev+0x88>
            if (start->type == type) {
   b4724:	889a      	ldrh	r2, [r3, #4]
   b4726:	2a01      	cmp	r2, #1
   b4728:	d006      	beq.n	b4738 <_Z12initHardwarev+0x48>
            start = start->next;
   b472a:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b472c:	e7f9      	b.n	b4722 <_Z12initHardwarev+0x32>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b472e:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b4730:	b313      	cbz	r3, b4778 <_Z12initHardwarev+0x88>
            if (start->type == type) {
   b4732:	889a      	ldrh	r2, [r3, #4]
   b4734:	2a01      	cmp	r2, #1
   b4736:	d1fa      	bne.n	b472e <_Z12initHardwarev+0x3e>
                if (gpioWakeup->pin == pin) {
   b4738:	899a      	ldrh	r2, [r3, #12]
   b473a:	2a02      	cmp	r2, #2
   b473c:	d1f7      	bne.n	b472e <_Z12initHardwarev+0x3e>
                    gpioWakeup->mode = mode;
   b473e:	2201      	movs	r2, #1
   b4740:	739a      	strb	r2, [r3, #14]
  if(!lis3dh.begin(kLis3dhAddress)) {
   b4742:	481a      	ldr	r0, [pc, #104]	; (b47ac <_Z12initHardwarev+0xbc>)
   b4744:	2118      	movs	r1, #24
   b4746:	f001 fae4 	bl	b5d12 <_ZN15Adafruit_LIS3DH5beginEh>
   b474a:	b980      	cbnz	r0, b476e <_Z12initHardwarev+0x7e>
    delay(1000);
   b474c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4750:	f002 f9b2 	bl	b6ab8 <delay>
    WITH_LOCK(Serial) {
   b4754:	f004 fdd6 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4758:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b475a:	f7ff fd00 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("Failed to initialize LIS3DH");
   b475e:	f004 fdd1 	bl	b9304 <_Z16_fetch_usbserialv>
   b4762:	4913      	ldr	r1, [pc, #76]	; (b47b0 <_Z12initHardwarev+0xc0>)
   b4764:	f003 fe39 	bl	b83da <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b4768:	a801      	add	r0, sp, #4
   b476a:	f7ff fe2d 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
}
   b476e:	b003      	add	sp, #12
   b4770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  init_ACC();
   b4774:	f7ff bd88 	b.w	b4288 <_Z8init_ACCv>
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4778:	490e      	ldr	r1, [pc, #56]	; (b47b4 <_Z12initHardwarev+0xc4>)
   b477a:	2010      	movs	r0, #16
   b477c:	f005 f841 	bl	b9802 <_ZnwjRKSt9nothrow_t>
   b4780:	4604      	mov	r4, r0
   b4782:	b170      	cbz	r0, b47a2 <_Z12initHardwarev+0xb2>
   b4784:	2210      	movs	r2, #16
   b4786:	2100      	movs	r1, #0
   b4788:	f005 fc1c 	bl	b9fc4 <memset>
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
            wakeupSource->base.next = config_.wakeup_sources;
   b478c:	692a      	ldr	r2, [r5, #16]
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b478e:	4b0a      	ldr	r3, [pc, #40]	; (b47b8 <_Z12initHardwarev+0xc8>)
   b4790:	6023      	str	r3, [r4, #0]
            wakeupSource->base.next = config_.wakeup_sources;
   b4792:	60a2      	str	r2, [r4, #8]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4794:	2301      	movs	r3, #1
            wakeupSource->pin = pin;
   b4796:	2202      	movs	r2, #2
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4798:	80a3      	strh	r3, [r4, #4]
            wakeupSource->pin = pin;
   b479a:	81a2      	strh	r2, [r4, #12]
            wakeupSource->mode = mode;
   b479c:	73a3      	strb	r3, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b479e:	612c      	str	r4, [r5, #16]
   b47a0:	e7cf      	b.n	b4742 <_Z12initHardwarev+0x52>
                valid_ = false;
   b47a2:	7528      	strb	r0, [r5, #20]
                return *this;
   b47a4:	e7cd      	b.n	b4742 <_Z12initHardwarev+0x52>
   b47a6:	bf00      	nop
   b47a8:	2003e0c8 	.word	0x2003e0c8
   b47ac:	2003deb8 	.word	0x2003deb8
   b47b0:	000ba30c 	.word	0x000ba30c
   b47b4:	000bae98 	.word	0x000bae98
   b47b8:	00030010 	.word	0x00030010

000b47bc <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv>:

  bleQuestionCount++;
}

//kBLEConnectedLED turns on when ble connected
void connectCallback(const BlePeerDevice& peer, void* context){
   b47bc:	b507      	push	{r0, r1, r2, lr}
  bleQuestionCount = 0;
   b47be:	4b0b      	ldr	r3, [pc, #44]	; (b47ec <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x30>)
   b47c0:	2200      	movs	r2, #0
   b47c2:	601a      	str	r2, [r3, #0]
  WITH_LOCK(Serial) {
   b47c4:	f004 fd9e 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b47c8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b47ca:	f7ff fcc8 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("connected");
   b47ce:	f004 fd99 	bl	b9304 <_Z16_fetch_usbserialv>
   b47d2:	4907      	ldr	r1, [pc, #28]	; (b47f0 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x34>)
   b47d4:	f003 fe01 	bl	b83da <_ZN5Print7printlnEPKc>
  WITH_LOCK(Serial) {
   b47d8:	a801      	add	r0, sp, #4
   b47da:	f7ff fdf5 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  }
  digitalWrite(kBLEConnectedLED, HIGH);
   b47de:	2101      	movs	r1, #1
   b47e0:	2007      	movs	r0, #7
}
   b47e2:	b003      	add	sp, #12
   b47e4:	f85d eb04 	ldr.w	lr, [sp], #4
  digitalWrite(kBLEConnectedLED, HIGH);
   b47e8:	f004 bf83 	b.w	b96f2 <digitalWrite>
   b47ec:	2003da8c 	.word	0x2003da8c
   b47f0:	000ba3db 	.word	0x000ba3db

000b47f4 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv>:

//kBLEConnectedLED turns off when ble disconnected
void disconnectCallback(const BlePeerDevice& peer, void* context){
   b47f4:	b507      	push	{r0, r1, r2, lr}
  WITH_LOCK(Serial) {
   b47f6:	f004 fd85 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b47fa:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b47fc:	f7ff fcaf 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("disconnected");
   b4800:	f004 fd80 	bl	b9304 <_Z16_fetch_usbserialv>
   b4804:	4906      	ldr	r1, [pc, #24]	; (b4820 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv+0x2c>)
   b4806:	f003 fde8 	bl	b83da <_ZN5Print7printlnEPKc>
  WITH_LOCK(Serial) {
   b480a:	a801      	add	r0, sp, #4
   b480c:	f7ff fddc 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  }
  digitalWrite(kBLEConnectedLED, LOW);
   b4810:	2100      	movs	r1, #0
   b4812:	2007      	movs	r0, #7
   b4814:	b003      	add	sp, #12
   b4816:	f85d eb04 	ldr.w	lr, [sp], #4
  digitalWrite(kBLEConnectedLED, LOW);
   b481a:	f004 bf6a 	b.w	b96f2 <digitalWrite>
   b481e:	bf00      	nop
   b4820:	000ba328 	.word	0x000ba328

000b4824 <_Z11engageSleepv>:

void engageSleep() {
   b4824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WITH_LOCK(Serial) {
   b4826:	f004 fd6d 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b482a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b482c:	f7ff fc97 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("Sleep process waiting for mutex locks");
   b4830:	f004 fd68 	bl	b9304 <_Z16_fetch_usbserialv>
   b4834:	490f      	ldr	r1, [pc, #60]	; (b4874 <_Z11engageSleepv+0x50>)
  }
  delay(100);
  os_mutex_lock(reportingSleepProtectionLock);
   b4836:	4c10      	ldr	r4, [pc, #64]	; (b4878 <_Z11engageSleepv+0x54>)
    Serial.println("Sleep process waiting for mutex locks");
   b4838:	f003 fdcf 	bl	b83da <_ZN5Print7printlnEPKc>
  WITH_LOCK(Serial) {
   b483c:	a801      	add	r0, sp, #4
   b483e:	f7ff fdc3 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  delay(100);
   b4842:	2064      	movs	r0, #100	; 0x64
   b4844:	f002 f938 	bl	b6ab8 <delay>
  os_mutex_lock(reportingSleepProtectionLock);
   b4848:	6820      	ldr	r0, [r4, #0]
   b484a:	f001 fdad 	bl	b63a8 <os_mutex_lock>
  System.sleep(sleepConfig);
   b484e:	a801      	add	r0, sp, #4
   b4850:	490a      	ldr	r1, [pc, #40]	; (b487c <_Z11engageSleepv+0x58>)
   b4852:	f004 f88b 	bl	b896c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   b4856:	9801      	ldr	r0, [sp, #4]
   b4858:	b108      	cbz	r0, b485e <_Z11engageSleepv+0x3a>
            free(wakeupSource_);
   b485a:	f002 f8e5 	bl	b6a28 <free>
  sleepTimeoutCounter = 0;
   b485e:	4b08      	ldr	r3, [pc, #32]	; (b4880 <_Z11engageSleepv+0x5c>)
   b4860:	2200      	movs	r2, #0
   b4862:	601a      	str	r2, [r3, #0]
  init_ACC();
   b4864:	f7ff fd10 	bl	b4288 <_Z8init_ACCv>
  os_mutex_unlock(reportingSleepProtectionLock);
   b4868:	6820      	ldr	r0, [r4, #0]
   b486a:	b004      	add	sp, #16
   b486c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  os_mutex_unlock(reportingSleepProtectionLock);
   b4870:	f001 bda2 	b.w	b63b8 <os_mutex_unlock>
   b4874:	000ba335 	.word	0x000ba335
   b4878:	2003e048 	.word	0x2003e048
   b487c:	2003e0c8 	.word	0x2003e0c8
   b4880:	2003e0e4 	.word	0x2003e0e4

000b4884 <_Z14syncSystemTimev>:
#pragma once
#include "globalVariables.hpp"
#include "constants.hpp"

void syncSystemTime() {
   b4884:	b530      	push	{r4, r5, lr}
  int WiFiConnectCountdown = kWiFiConnectionTimeout;

  WiFi.on();
   b4886:	483d      	ldr	r0, [pc, #244]	; (b497c <_Z14syncSystemTimev+0xf8>)
  WiFi.connect();
  //wait for WiFi to connect for kWiFiConnectionTimeout
  while(!WiFi.ready() && WiFiConnectCountdown != 0) {
   b4888:	4d3c      	ldr	r5, [pc, #240]	; (b497c <_Z14syncSystemTimev+0xf8>)
void syncSystemTime() {
   b488a:	b087      	sub	sp, #28
  WiFi.on();
   b488c:	f7ff fc98 	bl	b41c0 <_ZN5spark9WiFiClass2onEv>
  WiFi.connect();
   b4890:	483a      	ldr	r0, [pc, #232]	; (b497c <_Z14syncSystemTimev+0xf8>)
   b4892:	2100      	movs	r1, #0
   b4894:	f7ff fca0 	bl	b41d8 <_ZN5spark9WiFiClass7connectEj>
  int WiFiConnectCountdown = kWiFiConnectionTimeout;
   b4898:	f644 6420 	movw	r4, #20000	; 0x4e20
  while(!WiFi.ready() && WiFiConnectCountdown != 0) {
   b489c:	4628      	mov	r0, r5
   b489e:	f7ff fca0 	bl	b41e2 <_ZN5spark9WiFiClass5readyEv>
   b48a2:	b998      	cbnz	r0, b48cc <_Z14syncSystemTimev+0x48>
   b48a4:	b194      	cbz	r4, b48cc <_Z14syncSystemTimev+0x48>
    WiFiConnectCountdown = WiFiConnectCountdown - kWiFiCheckInterval;
    delay(kWiFiCheckInterval);
   b48a6:	2064      	movs	r0, #100	; 0x64
   b48a8:	f002 f906 	bl	b6ab8 <delay>
    WITH_LOCK(Serial) {
   b48ac:	f004 fd2a 	bl	b9304 <_Z16_fetch_usbserialv>
    WiFiConnectCountdown = WiFiConnectCountdown - kWiFiCheckInterval;
   b48b0:	3c64      	subs	r4, #100	; 0x64
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b48b2:	9002      	str	r0, [sp, #8]
      { _M_device.lock(); }
   b48b4:	f7ff fc53 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.println(WiFiConnectCountdown);
   b48b8:	f004 fd24 	bl	b9304 <_Z16_fetch_usbserialv>
   b48bc:	220a      	movs	r2, #10
   b48be:	4621      	mov	r1, r4
   b48c0:	f7ff fc30 	bl	b4124 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    WITH_LOCK(Serial) {
   b48c4:	a802      	add	r0, sp, #8
   b48c6:	f7ff fd7f 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b48ca:	e7e7      	b.n	b489c <_Z14syncSystemTimev+0x18>
    }
  }
  if(WiFi.ready()) {
   b48cc:	482b      	ldr	r0, [pc, #172]	; (b497c <_Z14syncSystemTimev+0xf8>)
   b48ce:	f7ff fc88 	bl	b41e2 <_ZN5spark9WiFiClass5readyEv>
   b48d2:	2800      	cmp	r0, #0
   b48d4:	d045      	beq.n	b4962 <_Z14syncSystemTimev+0xde>
    WITH_LOCK(Serial){
   b48d6:	f004 fd15 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b48da:	9002      	str	r0, [sp, #8]
      { _M_device.lock(); }
   b48dc:	f7ff fc3f 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WiFi connected, syncing time");
   b48e0:	f004 fd10 	bl	b9304 <_Z16_fetch_usbserialv>
   b48e4:	4926      	ldr	r1, [pc, #152]	; (b4980 <_Z14syncSystemTimev+0xfc>)
   b48e6:	f003 fd78 	bl	b83da <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial){
   b48ea:	a802      	add	r0, sp, #8
   b48ec:	f7ff fd6c 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b48f0:	f001 fff2 	bl	b68d8 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b48f4:	f001 fff8 	bl	b68e8 <spark_cloud_flag_connected>
    }
    Particle.connect();
    while(!Particle.connected()) {} // wait forever until cloud connects
   b48f8:	2800      	cmp	r0, #0
   b48fa:	d0fb      	beq.n	b48f4 <_Z14syncSystemTimev+0x70>
   b48fc:	f001 fff4 	bl	b68e8 <spark_cloud_flag_connected>
        if (!connected()) {
   b4900:	b110      	cbz	r0, b4908 <_Z14syncSystemTimev+0x84>
        return spark_sync_time(NULL);
   b4902:	2000      	movs	r0, #0
   b4904:	f001 fff8 	bl	b68f8 <spark_sync_time>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4908:	4c1e      	ldr	r4, [pc, #120]	; (b4984 <_Z14syncSystemTimev+0x100>)
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b490a:	f001 ffed 	bl	b68e8 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
   b490e:	b148      	cbz	r0, b4924 <_Z14syncSystemTimev+0xa0>
   b4910:	2000      	movs	r0, #0
   b4912:	f001 fff9 	bl	b6908 <spark_sync_time_pending>
   b4916:	b128      	cbz	r0, b4924 <_Z14syncSystemTimev+0xa0>
		return HAL_Timer_Get_Milli_Seconds();
   b4918:	f001 fd86 	bl	b6428 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b491c:	6020      	str	r0, [r4, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b491e:	f001 ffd3 	bl	b68c8 <spark_process>
    }
   b4922:	e7f2      	b.n	b490a <_Z14syncSystemTimev+0x86>
    Particle.syncTime(); // is async
    while(Particle.syncTimePending()) { // wait for syncTime to complete
      Particle.process();
    }
    WITH_LOCK(Serial){
   b4924:	f004 fcee 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4928:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b492a:	f7ff fc18 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.printlnf("Current time is: %s", Time.timeStr().c_str());
   b492e:	f004 fce9 	bl	b9304 <_Z16_fetch_usbserialv>
   b4932:	4604      	mov	r4, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b4934:	f004 fbef 	bl	b9116 <_ZN9TimeClass3nowEv>
   b4938:	17c3      	asrs	r3, r0, #31
   b493a:	4602      	mov	r2, r0
   b493c:	a802      	add	r0, sp, #8
   b493e:	f004 fb91 	bl	b9064 <_ZN9TimeClass7timeStrEx>
   b4942:	9a02      	ldr	r2, [sp, #8]
   b4944:	4910      	ldr	r1, [pc, #64]	; (b4988 <_Z14syncSystemTimev+0x104>)
   b4946:	4620      	mov	r0, r4
   b4948:	f7ff fc2c 	bl	b41a4 <_ZN5Print8printlnfEPKcz>
   b494c:	a802      	add	r0, sp, #8
   b494e:	f003 fe4b 	bl	b85e8 <_ZN6StringD1Ev>
    WITH_LOCK(Serial){
   b4952:	a801      	add	r0, sp, #4
    }
  }
  else {
    WITH_LOCK(Serial) {
   b4954:	f7ff fd38 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      Serial.println("WiFi failed to connect, skipping time synchronization");
    }
  }

  WiFi.off();
   b4958:	4808      	ldr	r0, [pc, #32]	; (b497c <_Z14syncSystemTimev+0xf8>)
   b495a:	f7ff fc37 	bl	b41cc <_ZN5spark9WiFiClass3offEv>
   b495e:	b007      	add	sp, #28
   b4960:	bd30      	pop	{r4, r5, pc}
    WITH_LOCK(Serial) {
   b4962:	f004 fccf 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4966:	9002      	str	r0, [sp, #8]
      { _M_device.lock(); }
   b4968:	f7ff fbf9 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WiFi failed to connect, skipping time synchronization");
   b496c:	f004 fcca 	bl	b9304 <_Z16_fetch_usbserialv>
   b4970:	4906      	ldr	r1, [pc, #24]	; (b498c <_Z14syncSystemTimev+0x108>)
   b4972:	f003 fd32 	bl	b83da <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b4976:	a802      	add	r0, sp, #8
   b4978:	e7ec      	b.n	b4954 <_Z14syncSystemTimev+0xd0>
   b497a:	bf00      	nop
   b497c:	2003e7c0 	.word	0x2003e7c0
   b4980:	000ba35b 	.word	0x000ba35b
   b4984:	2003e7d0 	.word	0x2003e7d0
   b4988:	000ba378 	.word	0x000ba378
   b498c:	000ba38c 	.word	0x000ba38c

000b4990 <setup>:
void setup() {
   b4990:	b537      	push	{r0, r1, r2, r4, r5, lr}
  os_mutex_create(&payloadAccessLock);
   b4992:	4c14      	ldr	r4, [pc, #80]	; (b49e4 <setup+0x54>)
  os_mutex_create(&reportingSleepProtectionLock);
   b4994:	4d14      	ldr	r5, [pc, #80]	; (b49e8 <setup+0x58>)
  Serial.begin(9600);
   b4996:	f004 fcb5 	bl	b9304 <_Z16_fetch_usbserialv>
   b499a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b499e:	f004 fca5 	bl	b92ec <_ZN9USBSerial5beginEl>
  initHardware();
   b49a2:	f7ff fea5 	bl	b46f0 <_Z12initHardwarev>
  HTTPRequestSetup(); 
   b49a6:	f7ff fc21 	bl	b41ec <_Z16HTTPRequestSetupv>
  initFromEEPROM();
   b49aa:	f7ff fc99 	bl	b42e0 <_Z14initFromEEPROMv>
  syncSystemTime();
   b49ae:	f7ff ff69 	bl	b4884 <_Z14syncSystemTimev>
  os_mutex_create(&payloadAccessLock);
   b49b2:	4620      	mov	r0, r4
   b49b4:	f001 fcf0 	bl	b6398 <os_mutex_create>
  os_mutex_create(&reportingSleepProtectionLock);
   b49b8:	4628      	mov	r0, r5
   b49ba:	f001 fced 	bl	b6398 <os_mutex_create>
  os_mutex_unlock(&reportingSleepProtectionLock);
   b49be:	4628      	mov	r0, r5
   b49c0:	f001 fcfa 	bl	b63b8 <os_mutex_unlock>
  os_mutex_unlock(&payloadAccessLock);
   b49c4:	4620      	mov	r0, r4
   b49c6:	f001 fcf7 	bl	b63b8 <os_mutex_unlock>
  os_thread_create(&reportingThreadHandle, "reportThread", OS_THREAD_PRIORITY_DEFAULT, reportingThread, NULL, 1024);
   b49ca:	2300      	movs	r3, #0
   b49cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b49d0:	e9cd 3200 	strd	r3, r2, [sp]
   b49d4:	4905      	ldr	r1, [pc, #20]	; (b49ec <setup+0x5c>)
   b49d6:	4b06      	ldr	r3, [pc, #24]	; (b49f0 <setup+0x60>)
   b49d8:	4806      	ldr	r0, [pc, #24]	; (b49f4 <setup+0x64>)
   b49da:	2202      	movs	r2, #2
   b49dc:	f001 fccc 	bl	b6378 <os_thread_create>
}
   b49e0:	b003      	add	sp, #12
   b49e2:	bd30      	pop	{r4, r5, pc}
   b49e4:	2003e030 	.word	0x2003e030
   b49e8:	2003e048 	.word	0x2003e048
   b49ec:	000ba3c2 	.word	0x000ba3c2
   b49f0:	000b45bd 	.word	0x000b45bd
   b49f4:	2003e04c 	.word	0x2003e04c

000b49f8 <loop>:
void loop() {
   b49f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b49fc:	ed2d 8b02 	vpush	{d8}
  switch (firmwareState) {
   b4a00:	4ec3      	ldr	r6, [pc, #780]	; (b4d10 <loop+0x318>)
   b4a02:	7835      	ldrb	r5, [r6, #0]
void loop() {
   b4a04:	b097      	sub	sp, #92	; 0x5c
  switch (firmwareState) {
   b4a06:	b13d      	cbz	r5, b4a18 <loop+0x20>
   b4a08:	2d01      	cmp	r5, #1
   b4a0a:	f000 80bf 	beq.w	b4b8c <loop+0x194>
}
   b4a0e:	b017      	add	sp, #92	; 0x5c
   b4a10:	ecbd 8b02 	vpop	{d8}
   b4a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      WITH_LOCK(Serial) {
   b4a18:	f004 fc74 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4a1c:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b4a1e:	f7ff fb9e 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("BLEWAIT");
   b4a22:	f004 fc6f 	bl	b9304 <_Z16_fetch_usbserialv>
   b4a26:	49bb      	ldr	r1, [pc, #748]	; (b4d14 <loop+0x31c>)
   b4a28:	f003 fcd7 	bl	b83da <_ZN5Print7printlnEPKc>
      WITH_LOCK(Serial) {
   b4a2c:	a80d      	add	r0, sp, #52	; 0x34
   b4a2e:	f7ff fccb 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      BLE.on();
   b4a32:	f002 fc79 	bl	b7328 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4a36:	f002 fcc5 	bl	b73c4 <_ZNK8particle14BleLocalDevice2onEv>
      BLE.addCharacteristic(txCharacteristic);
   b4a3a:	f002 fc75 	bl	b7328 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4a3e:	4ab6      	ldr	r2, [pc, #728]	; (b4d18 <loop+0x320>)
   b4a40:	4601      	mov	r1, r0
   b4a42:	a80d      	add	r0, sp, #52	; 0x34
   b4a44:	f003 f968 	bl	b7d18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4a48:	a80d      	add	r0, sp, #52	; 0x34
   b4a4a:	f002 fd56 	bl	b74fa <_ZN8particle17BleCharacteristicD1Ev>
      BLE.addCharacteristic(rxCharacteristic);
   b4a4e:	f002 fc6b 	bl	b7328 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4a52:	4ab2      	ldr	r2, [pc, #712]	; (b4d1c <loop+0x324>)
   b4a54:	4601      	mov	r1, r0
   b4a56:	a80d      	add	r0, sp, #52	; 0x34
   b4a58:	f003 f95e 	bl	b7d18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4a5c:	a80d      	add	r0, sp, #52	; 0x34
   b4a5e:	f002 fd4c 	bl	b74fa <_ZN8particle17BleCharacteristicD1Ev>
      BleAdvertisingData data;
   b4a62:	a80d      	add	r0, sp, #52	; 0x34
   b4a64:	f002 fac9 	bl	b6ffa <_ZN8particle18BleAdvertisingDataC1Ev>
      data.appendServiceUUID(serviceUuid);
   b4a68:	49ad      	ldr	r1, [pc, #692]	; (b4d20 <loop+0x328>)
   b4a6a:	a803      	add	r0, sp, #12
   b4a6c:	f002 f9ca 	bl	b6e04 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4a70:	a903      	add	r1, sp, #12
   b4a72:	a808      	add	r0, sp, #32
   b4a74:	f002 f9c6 	bl	b6e04 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4a78:	a808      	add	r0, sp, #32
   b4a7a:	f002 fa09 	bl	b6e90 <_ZNK8particle7BleUuid4typeEv>
   b4a7e:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4a80:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4a82:	2c00      	cmp	r4, #0
   b4a84:	d13a      	bne.n	b4afc <loop+0x104>
            uint16_t uuid16 = tempUUID.shorted();
   b4a86:	f002 fa1f 	bl	b6ec8 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4a8a:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4a8c:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4a90:	2302      	movs	r3, #2
   b4a92:	f10d 020a 	add.w	r2, sp, #10
   b4a96:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4a98:	a80d      	add	r0, sp, #52	; 0x34
   b4a9a:	f002 faa3 	bl	b6fe4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
      BLE.advertise(&data);
   b4a9e:	f002 fc43 	bl	b7328 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4aa2:	2200      	movs	r2, #0
   b4aa4:	a90d      	add	r1, sp, #52	; 0x34
   b4aa6:	f002 fcad 	bl	b7404 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
      BLE.onConnected(connectCallback);
   b4aaa:	f002 fc3d 	bl	b7328 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4aae:	499d      	ldr	r1, [pc, #628]	; (b4d24 <loop+0x32c>)
   b4ab0:	2200      	movs	r2, #0
   b4ab2:	f003 f834 	bl	b7b1e <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
      BLE.onDisconnected(disconnectCallback);
   b4ab6:	f002 fc37 	bl	b7328 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4aba:	499b      	ldr	r1, [pc, #620]	; (b4d28 <loop+0x330>)
   b4abc:	2200      	movs	r2, #0
   b4abe:	f003 f80f 	bl	b7ae0 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
      int BLECountdown = 5000;
   b4ac2:	f241 3488 	movw	r4, #5000	; 0x1388
      while(!BLE.connected() && BLECountdown > 0) {
   b4ac6:	f002 fc2f 	bl	b7328 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4aca:	f002 fcae 	bl	b742a <_ZNK8particle14BleLocalDevice9connectedEv>
   b4ace:	b900      	cbnz	r0, b4ad2 <loop+0xda>
   b4ad0:	b9dc      	cbnz	r4, b4b0a <loop+0x112>
      if(BLE.connected()){ 
   b4ad2:	f002 fc29 	bl	b7328 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ad6:	f002 fca8 	bl	b742a <_ZNK8particle14BleLocalDevice9connectedEv>
   b4ada:	4c94      	ldr	r4, [pc, #592]	; (b4d2c <loop+0x334>)
   b4adc:	bb40      	cbnz	r0, b4b30 <loop+0x138>
        bleWaitForConfig = false;
   b4ade:	7020      	strb	r0, [r4, #0]
        WITH_LOCK(Serial) {
   b4ae0:	f004 fc10 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4ae4:	9008      	str	r0, [sp, #32]
      { _M_device.lock(); }
   b4ae6:	f7ff fb3a 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("BLE not connected, continuing with stored settings.");
   b4aea:	f004 fc0b 	bl	b9304 <_Z16_fetch_usbserialv>
   b4aee:	4990      	ldr	r1, [pc, #576]	; (b4d30 <loop+0x338>)
   b4af0:	f003 fc73 	bl	b83da <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b4af4:	a808      	add	r0, sp, #32
   b4af6:	f7ff fc67 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4afa:	e028      	b.n	b4b4e <loop+0x156>
   b4afc:	f002 f9e6 	bl	b6ecc <_ZNK8particle7BleUuid8rawBytesEv>
   b4b00:	9500      	str	r5, [sp, #0]
   b4b02:	4602      	mov	r2, r0
   b4b04:	2310      	movs	r3, #16
   b4b06:	2107      	movs	r1, #7
   b4b08:	e7c6      	b.n	b4a98 <loop+0xa0>
        WITH_LOCK(Serial) {
   b4b0a:	f004 fbfb 	bl	b9304 <_Z16_fetch_usbserialv>
        BLECountdown = BLECountdown - 10;
   b4b0e:	3c0a      	subs	r4, #10
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4b10:	9008      	str	r0, [sp, #32]
      { _M_device.lock(); }
   b4b12:	f7ff fb24 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(BLECountdown);
   b4b16:	f004 fbf5 	bl	b9304 <_Z16_fetch_usbserialv>
   b4b1a:	220a      	movs	r2, #10
   b4b1c:	4621      	mov	r1, r4
   b4b1e:	f7ff fb01 	bl	b4124 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4b22:	a808      	add	r0, sp, #32
   b4b24:	f7ff fc50 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        delay(10);
   b4b28:	200a      	movs	r0, #10
   b4b2a:	f001 ffc5 	bl	b6ab8 <delay>
      while(!BLE.connected() && BLECountdown > 0) {
   b4b2e:	e7ca      	b.n	b4ac6 <loop+0xce>
        WITH_LOCK(Serial) {
   b4b30:	f004 fbe8 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4b34:	9008      	str	r0, [sp, #32]
      { _M_device.lock(); }
   b4b36:	f7ff fb12 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("BLE connected");
   b4b3a:	f004 fbe3 	bl	b9304 <_Z16_fetch_usbserialv>
   b4b3e:	497d      	ldr	r1, [pc, #500]	; (b4d34 <loop+0x33c>)
   b4b40:	f003 fc4b 	bl	b83da <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b4b44:	a808      	add	r0, sp, #32
   b4b46:	f7ff fc3f 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        bleWaitForConfig = true;
   b4b4a:	2301      	movs	r3, #1
   b4b4c:	7023      	strb	r3, [r4, #0]
          Serial.println("bleWaitForConfig");
   b4b4e:	4d7a      	ldr	r5, [pc, #488]	; (b4d38 <loop+0x340>)
      while(bleWaitForConfig) {
   b4b50:	7823      	ldrb	r3, [r4, #0]
   b4b52:	b183      	cbz	r3, b4b76 <loop+0x17e>
        WITH_LOCK(Serial) {
   b4b54:	f004 fbd6 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4b58:	9008      	str	r0, [sp, #32]
      { _M_device.lock(); }
   b4b5a:	f7ff fb00 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("bleWaitForConfig");
   b4b5e:	f004 fbd1 	bl	b9304 <_Z16_fetch_usbserialv>
   b4b62:	4629      	mov	r1, r5
   b4b64:	f003 fc39 	bl	b83da <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b4b68:	a808      	add	r0, sp, #32
   b4b6a:	f7ff fc2d 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        delay(100);
   b4b6e:	2064      	movs	r0, #100	; 0x64
   b4b70:	f001 ffa2 	bl	b6ab8 <delay>
      while(bleWaitForConfig) {
   b4b74:	e7ec      	b.n	b4b50 <loop+0x158>
      BLE.disconnectAll();
   b4b76:	f002 fbd7 	bl	b7328 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4b7a:	f002 fedf 	bl	b793c <_ZNK8particle14BleLocalDevice13disconnectAllEv>
      BLE.off();
   b4b7e:	f002 fbd3 	bl	b7328 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4b82:	f002 fd44 	bl	b760e <_ZNK8particle14BleLocalDevice3offEv>
      firmwareState = RECORDING;
   b4b86:	2301      	movs	r3, #1
   b4b88:	7033      	strb	r3, [r6, #0]
      break;
   b4b8a:	e740      	b.n	b4a0e <loop+0x16>
      WITH_LOCK(Serial) {
   b4b8c:	f004 fbba 	bl	b9304 <_Z16_fetch_usbserialv>
      lis3dh.read();
   b4b90:	4c6a      	ldr	r4, [pc, #424]	; (b4d3c <loop+0x344>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4b92:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b4b94:	f7ff fae3 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("RECORDING");
   b4b98:	f004 fbb4 	bl	b9304 <_Z16_fetch_usbserialv>
   b4b9c:	4968      	ldr	r1, [pc, #416]	; (b4d40 <loop+0x348>)
      x = lis3dh.x_g;
   b4b9e:	f8df b1d4 	ldr.w	fp, [pc, #468]	; b4d74 <loop+0x37c>
      y = lis3dh.y_g;
   b4ba2:	f8df 91d4 	ldr.w	r9, [pc, #468]	; b4d78 <loop+0x380>
      z = lis3dh.z_g;
   b4ba6:	4f67      	ldr	r7, [pc, #412]	; (b4d44 <loop+0x34c>)
   b4ba8:	f8df a1d0 	ldr.w	sl, [pc, #464]	; b4d7c <loop+0x384>
   b4bac:	f8df 81d0 	ldr.w	r8, [pc, #464]	; b4d80 <loop+0x388>
        Serial.println("RECORDING");
   b4bb0:	f003 fc13 	bl	b83da <_ZN5Print7printlnEPKc>
      WITH_LOCK(Serial) {
   b4bb4:	a80d      	add	r0, sp, #52	; 0x34
   b4bb6:	f7ff fc07 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      lis3dh.read();
   b4bba:	4620      	mov	r0, r4
   b4bbc:	f000 ffc8 	bl	b5b50 <_ZN15Adafruit_LIS3DH4readEv>
      if(!firstLIS3DHReading) {
   b4bc0:	4b61      	ldr	r3, [pc, #388]	; (b4d48 <loop+0x350>)
      x = lis3dh.x_g;
   b4bc2:	edd4 7a03 	vldr	s15, [r4, #12]
      y = lis3dh.y_g;
   b4bc6:	edd4 8a04 	vldr	s17, [r4, #16]
      z = lis3dh.z_g;
   b4bca:	ed94 8a05 	vldr	s16, [r4, #20]
      if(!firstLIS3DHReading) {
   b4bce:	781a      	ldrb	r2, [r3, #0]
      x = lis3dh.x_g;
   b4bd0:	edcb 7a00 	vstr	s15, [fp]
      y = lis3dh.y_g;
   b4bd4:	edc9 8a00 	vstr	s17, [r9]
      z = lis3dh.z_g;
   b4bd8:	ed87 8a00 	vstr	s16, [r7]
      if(!firstLIS3DHReading) {
   b4bdc:	2a00      	cmp	r2, #0
   b4bde:	f040 80dd 	bne.w	b4d9c <loop+0x3a4>
        if(abs(x - prevX) > kDeltaAccelThreshold || abs(y - prevY) > kDeltaAccelThreshold || abs(z - prevZ) > kDeltaAccelThreshold) {
   b4be2:	ed9a 7a00 	vldr	s14, [sl]
          storedValues[storedValuesIndex] = 0;
   b4be6:	4c59      	ldr	r4, [pc, #356]	; (b4d4c <loop+0x354>)
   b4be8:	4d59      	ldr	r5, [pc, #356]	; (b4d50 <loop+0x358>)
   b4bea:	6826      	ldr	r6, [r4, #0]
        if(abs(x - prevX) > kDeltaAccelThreshold || abs(y - prevY) > kDeltaAccelThreshold || abs(z - prevZ) > kDeltaAccelThreshold) {
   b4bec:	ee77 7ac7 	vsub.f32	s15, s15, s14
   b4bf0:	eef0 7ae7 	vabs.f32	s15, s15
   b4bf4:	ee17 0a90 	vmov	r0, s15
   b4bf8:	f005 f880 	bl	b9cfc <__aeabi_f2d>
   b4bfc:	a342      	add	r3, pc, #264	; (adr r3, b4d08 <loop+0x310>)
   b4bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c02:	f005 f951 	bl	b9ea8 <__aeabi_dcmpgt>
   b4c06:	2800      	cmp	r0, #0
   b4c08:	d178      	bne.n	b4cfc <loop+0x304>
   b4c0a:	edd8 7a00 	vldr	s15, [r8]
   b4c0e:	ee78 8ae7 	vsub.f32	s17, s17, s15
   b4c12:	eef0 7ae8 	vabs.f32	s15, s17
   b4c16:	ee17 0a90 	vmov	r0, s15
   b4c1a:	f005 f86f 	bl	b9cfc <__aeabi_f2d>
   b4c1e:	a33a      	add	r3, pc, #232	; (adr r3, b4d08 <loop+0x310>)
   b4c20:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c24:	f005 f940 	bl	b9ea8 <__aeabi_dcmpgt>
   b4c28:	2800      	cmp	r0, #0
   b4c2a:	d167      	bne.n	b4cfc <loop+0x304>
   b4c2c:	4b49      	ldr	r3, [pc, #292]	; (b4d54 <loop+0x35c>)
   b4c2e:	edd3 7a00 	vldr	s15, [r3]
   b4c32:	ee38 8a67 	vsub.f32	s16, s16, s15
   b4c36:	eef0 7ac8 	vabs.f32	s15, s16
   b4c3a:	ee17 0a90 	vmov	r0, s15
   b4c3e:	f005 f85d 	bl	b9cfc <__aeabi_f2d>
   b4c42:	a331      	add	r3, pc, #196	; (adr r3, b4d08 <loop+0x310>)
   b4c44:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c48:	f005 f92e 	bl	b9ea8 <__aeabi_dcmpgt>
   b4c4c:	2800      	cmp	r0, #0
   b4c4e:	d155      	bne.n	b4cfc <loop+0x304>
          storedValues[storedValuesIndex] = 0;
   b4c50:	55a8      	strb	r0, [r5, r6]
          if(storedValues[storedValuesIndex - 1] == 0) {
   b4c52:	4435      	add	r5, r6
   b4c54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   b4c58:	2b00      	cmp	r3, #0
   b4c5a:	f000 8093 	beq.w	b4d84 <loop+0x38c>
        storedTimes[storedValuesIndex] = Time.now(); 
   b4c5e:	6825      	ldr	r5, [r4, #0]
   b4c60:	f004 fa59 	bl	b9116 <_ZN9TimeClass3nowEv>
   b4c64:	4b3c      	ldr	r3, [pc, #240]	; (b4d58 <loop+0x360>)
   b4c66:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
        WITH_LOCK(Serial) {
   b4c6a:	f004 fb4b 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4c6e:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b4c70:	f7ff fa75 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.printlnf("Recording index: %i", storedValuesIndex);
   b4c74:	f004 fb46 	bl	b9304 <_Z16_fetch_usbserialv>
   b4c78:	6822      	ldr	r2, [r4, #0]
   b4c7a:	4938      	ldr	r1, [pc, #224]	; (b4d5c <loop+0x364>)
   b4c7c:	f7ff fa92 	bl	b41a4 <_ZN5Print8printlnfEPKcz>
        WITH_LOCK(Serial) {
   b4c80:	a80d      	add	r0, sp, #52	; 0x34
   b4c82:	f7ff fba1 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        storedValuesIndex++; 
   b4c86:	6823      	ldr	r3, [r4, #0]
   b4c88:	3301      	adds	r3, #1
   b4c8a:	6023      	str	r3, [r4, #0]
        WITH_LOCK(Serial) {
   b4c8c:	f004 fb3a 	bl	b9304 <_Z16_fetch_usbserialv>
        os_mutex_lock(payloadAccessLock);
   b4c90:	4c33      	ldr	r4, [pc, #204]	; (b4d60 <loop+0x368>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4c92:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b4c94:	f7ff fa63 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("requesting payloadAccessLock");
   b4c98:	f004 fb34 	bl	b9304 <_Z16_fetch_usbserialv>
   b4c9c:	4931      	ldr	r1, [pc, #196]	; (b4d64 <loop+0x36c>)
   b4c9e:	f003 fb9c 	bl	b83da <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b4ca2:	a80d      	add	r0, sp, #52	; 0x34
   b4ca4:	f7ff fb90 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        os_mutex_lock(payloadAccessLock);
   b4ca8:	6820      	ldr	r0, [r4, #0]
   b4caa:	f001 fb7d 	bl	b63a8 <os_mutex_lock>
        delay(1);
   b4cae:	2001      	movs	r0, #1
   b4cb0:	f001 ff02 	bl	b6ab8 <delay>
        os_mutex_unlock(payloadAccessLock);
   b4cb4:	6820      	ldr	r0, [r4, #0]
   b4cb6:	f001 fb7f 	bl	b63b8 <os_mutex_unlock>
        WITH_LOCK(Serial) {
   b4cba:	f004 fb23 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4cbe:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b4cc0:	f7ff fa4d 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("payloadAccessLock released by RECORDING");
   b4cc4:	f004 fb1e 	bl	b9304 <_Z16_fetch_usbserialv>
   b4cc8:	4927      	ldr	r1, [pc, #156]	; (b4d68 <loop+0x370>)
          Serial.println("First reading");
   b4cca:	f003 fb86 	bl	b83da <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b4cce:	a80d      	add	r0, sp, #52	; 0x34
   b4cd0:	f7ff fb7a 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      prevX = x;
   b4cd4:	f8db 3000 	ldr.w	r3, [fp]
      prevZ = z;
   b4cd8:	4a1e      	ldr	r2, [pc, #120]	; (b4d54 <loop+0x35c>)
      prevX = x;
   b4cda:	f8ca 3000 	str.w	r3, [sl]
      prevY = y;
   b4cde:	f8d9 3000 	ldr.w	r3, [r9]
   b4ce2:	f8c8 3000 	str.w	r3, [r8]
      prevZ = z;
   b4ce6:	683b      	ldr	r3, [r7, #0]
   b4ce8:	6013      	str	r3, [r2, #0]
      delay(recordingInterval);
   b4cea:	4b20      	ldr	r3, [pc, #128]	; (b4d6c <loop+0x374>)
   b4cec:	6818      	ldr	r0, [r3, #0]
}
   b4cee:	b017      	add	sp, #92	; 0x5c
   b4cf0:	ecbd 8b02 	vpop	{d8}
   b4cf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      delay(recordingInterval);
   b4cf8:	f001 bede 	b.w	b6ab8 <delay>
          storedValues[storedValuesIndex] = 1;
   b4cfc:	2301      	movs	r3, #1
   b4cfe:	55ab      	strb	r3, [r5, r6]
          sleepTimeoutCounter = 0; // reset sleep timeout because movement detected
   b4d00:	4b1b      	ldr	r3, [pc, #108]	; (b4d70 <loop+0x378>)
   b4d02:	2200      	movs	r2, #0
   b4d04:	601a      	str	r2, [r3, #0]
   b4d06:	e7aa      	b.n	b4c5e <loop+0x266>
   b4d08:	9999999a 	.word	0x9999999a
   b4d0c:	3fa99999 	.word	0x3fa99999
   b4d10:	2003da98 	.word	0x2003da98
   b4d14:	000ba3cf 	.word	0x000ba3cf
   b4d18:	2003e5fc 	.word	0x2003e5fc
   b4d1c:	2003e0c0 	.word	0x2003e0c0
   b4d20:	2003da40 	.word	0x2003da40
   b4d24:	000b47bd 	.word	0x000b47bd
   b4d28:	000b47f5 	.word	0x000b47f5
   b4d2c:	2003da90 	.word	0x2003da90
   b4d30:	000ba3e5 	.word	0x000ba3e5
   b4d34:	000ba3d7 	.word	0x000ba3d7
   b4d38:	000ba419 	.word	0x000ba419
   b4d3c:	2003deb8 	.word	0x2003deb8
   b4d40:	000ba479 	.word	0x000ba479
   b4d44:	2003e620 	.word	0x2003e620
   b4d48:	2003d9a8 	.word	0x2003d9a8
   b4d4c:	2003e5f8 	.word	0x2003e5f8
   b4d50:	2003e4f8 	.word	0x2003e4f8
   b4d54:	2003e03c 	.word	0x2003e03c
   b4d58:	2003e0f8 	.word	0x2003e0f8
   b4d5c:	000ba42a 	.word	0x000ba42a
   b4d60:	2003e030 	.word	0x2003e030
   b4d64:	000ba43e 	.word	0x000ba43e
   b4d68:	000ba45b 	.word	0x000ba45b
   b4d6c:	2003e040 	.word	0x2003e040
   b4d70:	2003e0e4 	.word	0x2003e0e4
   b4d74:	2003e618 	.word	0x2003e618
   b4d78:	2003e61c 	.word	0x2003e61c
   b4d7c:	2003e034 	.word	0x2003e034
   b4d80:	2003e038 	.word	0x2003e038
            sleepTimeoutCounter++;
   b4d84:	4a0b      	ldr	r2, [pc, #44]	; (b4db4 <loop+0x3bc>)
   b4d86:	6813      	ldr	r3, [r2, #0]
   b4d88:	3301      	adds	r3, #1
   b4d8a:	6013      	str	r3, [r2, #0]
            if(sleepReadyTest()){
   b4d8c:	f7ff fb06 	bl	b439c <_Z14sleepReadyTestv>
   b4d90:	2800      	cmp	r0, #0
   b4d92:	f43f af64 	beq.w	b4c5e <loop+0x266>
              engageSleep();
   b4d96:	f7ff fd45 	bl	b4824 <_Z11engageSleepv>
   b4d9a:	e760      	b.n	b4c5e <loop+0x266>
        firstLIS3DHReading = false;
   b4d9c:	2200      	movs	r2, #0
   b4d9e:	701a      	strb	r2, [r3, #0]
        WITH_LOCK(Serial) {
   b4da0:	f004 fab0 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4da4:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b4da6:	f7ff f9da 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("First reading");
   b4daa:	f004 faab 	bl	b9304 <_Z16_fetch_usbserialv>
   b4dae:	4902      	ldr	r1, [pc, #8]	; (b4db8 <loop+0x3c0>)
   b4db0:	e78b      	b.n	b4cca <loop+0x2d2>
   b4db2:	bf00      	nop
   b4db4:	2003e0e4 	.word	0x2003e0e4
   b4db8:	000ba483 	.word	0x000ba483

000b4dbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch(bleQuestionCount){
   b4dc0:	4ec1      	ldr	r6, [pc, #772]	; (b50c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x30c>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4dc2:	b095      	sub	sp, #84	; 0x54
   b4dc4:	4605      	mov	r5, r0
   b4dc6:	460c      	mov	r4, r1
  bleInputBuffer = "";
   b4dc8:	48c0      	ldr	r0, [pc, #768]	; (b50cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x310>)
   b4dca:	49c1      	ldr	r1, [pc, #772]	; (b50d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x314>)
   b4dcc:	f003 fc85 	bl	b86da <_ZN6StringaSEPKc>
  switch(bleQuestionCount){
   b4dd0:	6833      	ldr	r3, [r6, #0]
   b4dd2:	2b08      	cmp	r3, #8
   b4dd4:	f200 8131 	bhi.w	b503a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x27e>
   b4dd8:	e8df f013 	tbh	[pc, r3, lsl #1]
   b4ddc:	00eb01a3 	.word	0x00eb01a3
   b4de0:	00af00ca 	.word	0x00af00ca
   b4de4:	006b008d 	.word	0x006b008d
   b4de8:	00240049 	.word	0x00240049
   b4dec:	0009      	.short	0x0009
   b4dee:	442c      	add	r4, r5
   b4df0:	1e6f      	subs	r7, r5, #1
	String & operator += (char c)			{concat(c); return (*this);}
   b4df2:	4db6      	ldr	r5, [pc, #728]	; (b50cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x310>)
   b4df4:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4df6:	42bc      	cmp	r4, r7
   b4df8:	f000 83aa 	beq.w	b5550 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x794>
        WITH_LOCK(Serial) {
   b4dfc:	f004 fa82 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4e00:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4e02:	f7ff f9ac 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4e06:	f004 fa7d 	bl	b9304 <_Z16_fetch_usbserialv>
   b4e0a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4e0e:	220a      	movs	r2, #10
   b4e10:	f7ff f979 	bl	b4106 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4e14:	a801      	add	r0, sp, #4
   b4e16:	f7ff fad7 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4e1a:	7839      	ldrb	r1, [r7, #0]
   b4e1c:	4628      	mov	r0, r5
   b4e1e:	f003 fcaf 	bl	b8780 <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   b4e22:	e7e8      	b.n	b4df6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a>
   b4e24:	442c      	add	r4, r5
   b4e26:	1e6f      	subs	r7, r5, #1
   b4e28:	f8df 82a0 	ldr.w	r8, [pc, #672]	; b50cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x310>
   b4e2c:	4da9      	ldr	r5, [pc, #676]	; (b50d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x318>)
   b4e2e:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4e30:	42bc      	cmp	r4, r7
   b4e32:	f000 8362 	beq.w	b54fa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x73e>
        WITH_LOCK(Serial) {
   b4e36:	f004 fa65 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4e3a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4e3c:	f7ff f98f 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4e40:	f004 fa60 	bl	b9304 <_Z16_fetch_usbserialv>
   b4e44:	220a      	movs	r2, #10
   b4e46:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4e4a:	f7ff f95c 	bl	b4106 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4e4e:	a801      	add	r0, sp, #4
   b4e50:	f7ff faba 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4e54:	7839      	ldrb	r1, [r7, #0]
   b4e56:	489d      	ldr	r0, [pc, #628]	; (b50cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x310>)
   b4e58:	f003 fc92 	bl	b8780 <_ZN6String6concatEc>
        reportingInterval = atoi(bleInputBuffer) * 1000;
   b4e5c:	f8d8 0000 	ldr.w	r0, [r8]
   b4e60:	f005 f852 	bl	b9f08 <atoi>
   b4e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4e68:	4358      	muls	r0, r3
   b4e6a:	6028      	str	r0, [r5, #0]
      for(int i = 0; i < len - 1; i++){
   b4e6c:	e7e0      	b.n	b4e30 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>
   b4e6e:	442c      	add	r4, r5
   b4e70:	1e6f      	subs	r7, r5, #1
   b4e72:	f8df 8258 	ldr.w	r8, [pc, #600]	; b50cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x310>
        recordingInterval = atoi(bleInputBuffer);
   b4e76:	4d98      	ldr	r5, [pc, #608]	; (b50d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x31c>)
   b4e78:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4e7a:	42a7      	cmp	r7, r4
   b4e7c:	f000 8300 	beq.w	b5480 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6c4>
        WITH_LOCK(Serial) {
   b4e80:	f004 fa40 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4e84:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4e86:	f7ff f96a 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4e8a:	f004 fa3b 	bl	b9304 <_Z16_fetch_usbserialv>
   b4e8e:	220a      	movs	r2, #10
   b4e90:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4e94:	f7ff f937 	bl	b4106 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4e98:	a801      	add	r0, sp, #4
   b4e9a:	f7ff fa95 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4e9e:	7839      	ldrb	r1, [r7, #0]
   b4ea0:	488a      	ldr	r0, [pc, #552]	; (b50cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x310>)
   b4ea2:	f003 fc6d 	bl	b8780 <_ZN6String6concatEc>
        recordingInterval = atoi(bleInputBuffer);
   b4ea6:	f8d8 0000 	ldr.w	r0, [r8]
   b4eaa:	f005 f82d 	bl	b9f08 <atoi>
   b4eae:	6028      	str	r0, [r5, #0]
      for(int i = 0; i < len - 1; i++){
   b4eb0:	e7e3      	b.n	b4e7a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xbe>
   b4eb2:	442c      	add	r4, r5
   b4eb4:	1e6f      	subs	r7, r5, #1
   b4eb6:	f8df 8214 	ldr.w	r8, [pc, #532]	; b50cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x310>
   b4eba:	4d88      	ldr	r5, [pc, #544]	; (b50dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x320>)
   b4ebc:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4ebe:	42a7      	cmp	r7, r4
   b4ec0:	f000 8253 	beq.w	b536a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ae>
        WITH_LOCK(Serial) {
   b4ec4:	f004 fa1e 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4ec8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4eca:	f7ff f948 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4ece:	f004 fa19 	bl	b9304 <_Z16_fetch_usbserialv>
   b4ed2:	220a      	movs	r2, #10
   b4ed4:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4ed8:	f7ff f915 	bl	b4106 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4edc:	a801      	add	r0, sp, #4
   b4ede:	f7ff fa73 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4ee2:	7839      	ldrb	r1, [r7, #0]
   b4ee4:	4879      	ldr	r0, [pc, #484]	; (b50cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x310>)
   b4ee6:	f003 fc4b 	bl	b8780 <_ZN6String6concatEc>
        sleepPauseDuration = atoi(bleInputBuffer);
   b4eea:	f8d8 0000 	ldr.w	r0, [r8]
   b4eee:	f005 f80b 	bl	b9f08 <atoi>
   b4ef2:	6028      	str	r0, [r5, #0]
      for(int i = 0; i < len - 1; i++){
   b4ef4:	e7e3      	b.n	b4ebe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x102>
   b4ef6:	442c      	add	r4, r5
   b4ef8:	1e6f      	subs	r7, r5, #1
   b4efa:	f8df 81d0 	ldr.w	r8, [pc, #464]	; b50cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x310>
   b4efe:	4d78      	ldr	r5, [pc, #480]	; (b50e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x324>)
   b4f00:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4f02:	42bc      	cmp	r4, r7
   b4f04:	f000 81ef 	beq.w	b52e6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x52a>
        WITH_LOCK(Serial) {
   b4f08:	f004 f9fc 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4f0c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4f0e:	f7ff f926 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4f12:	f004 f9f7 	bl	b9304 <_Z16_fetch_usbserialv>
   b4f16:	220a      	movs	r2, #10
   b4f18:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4f1c:	f7ff f8f3 	bl	b4106 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4f20:	a801      	add	r0, sp, #4
   b4f22:	f7ff fa51 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4f26:	7839      	ldrb	r1, [r7, #0]
   b4f28:	4868      	ldr	r0, [pc, #416]	; (b50cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x310>)
   b4f2a:	f003 fc29 	bl	b8780 <_ZN6String6concatEc>
        dsid = atoi(bleInputBuffer);
   b4f2e:	f8d8 0000 	ldr.w	r0, [r8]
   b4f32:	f004 ffe9 	bl	b9f08 <atoi>
   b4f36:	6028      	str	r0, [r5, #0]
      for(int i = 0; i < len - 1; i++){
   b4f38:	e7e3      	b.n	b4f02 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x146>
   b4f3a:	442c      	add	r4, r5
   b4f3c:	1e6f      	subs	r7, r5, #1
   b4f3e:	4d63      	ldr	r5, [pc, #396]	; (b50cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x310>)
   b4f40:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4f42:	42bc      	cmp	r4, r7
   b4f44:	f000 8195 	beq.w	b5272 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4b6>
        WITH_LOCK(Serial) {
   b4f48:	f004 f9dc 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4f4c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4f4e:	f7ff f906 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4f52:	f004 f9d7 	bl	b9304 <_Z16_fetch_usbserialv>
   b4f56:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4f5a:	220a      	movs	r2, #10
   b4f5c:	f7ff f8d3 	bl	b4106 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4f60:	a801      	add	r0, sp, #4
   b4f62:	f7ff fa31 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4f66:	7839      	ldrb	r1, [r7, #0]
   b4f68:	4628      	mov	r0, r5
   b4f6a:	f003 fc09 	bl	b8780 <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   b4f6e:	e7e8      	b.n	b4f42 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x186>
   b4f70:	442c      	add	r4, r5
   b4f72:	1e6f      	subs	r7, r5, #1
        password = bleInputBuffer;
   b4f74:	f8df 8188 	ldr.w	r8, [pc, #392]	; b5100 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x344>
   b4f78:	4d54      	ldr	r5, [pc, #336]	; (b50cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x310>)
   b4f7a:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4f7c:	42a7      	cmp	r7, r4
   b4f7e:	f000 8110 	beq.w	b51a2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3e6>
        WITH_LOCK(Serial) {
   b4f82:	f004 f9bf 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4f86:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4f88:	f7ff f8e9 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4f8c:	f004 f9ba 	bl	b9304 <_Z16_fetch_usbserialv>
   b4f90:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4f94:	220a      	movs	r2, #10
   b4f96:	f7ff f8b6 	bl	b4106 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4f9a:	a801      	add	r0, sp, #4
   b4f9c:	f7ff fa14 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4fa0:	7839      	ldrb	r1, [r7, #0]
   b4fa2:	4628      	mov	r0, r5
   b4fa4:	f003 fbec 	bl	b8780 <_ZN6String6concatEc>
        password = bleInputBuffer;
   b4fa8:	4629      	mov	r1, r5
   b4faa:	4640      	mov	r0, r8
   b4fac:	f003 fb7b 	bl	b86a6 <_ZN6StringaSERKS_>
      for(int i = 0; i < len - 1; i++){
   b4fb0:	e7e4      	b.n	b4f7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c0>
   b4fb2:	1e6f      	subs	r7, r5, #1
        ssid = bleInputBuffer;
   b4fb4:	f8df 813c 	ldr.w	r8, [pc, #316]	; b50f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x338>
   b4fb8:	4425      	add	r5, r4
   b4fba:	4c44      	ldr	r4, [pc, #272]	; (b50cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x310>)
   b4fbc:	3d02      	subs	r5, #2
      for(int i = 0; i < len - 1; i++){
   b4fbe:	42bd      	cmp	r5, r7
   b4fc0:	d041      	beq.n	b5046 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28a>
   b4fc2:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4fc6:	4620      	mov	r0, r4
   b4fc8:	f003 fbda 	bl	b8780 <_ZN6String6concatEc>
        ssid = bleInputBuffer;
   b4fcc:	4621      	mov	r1, r4
   b4fce:	4640      	mov	r0, r8
   b4fd0:	f003 fb69 	bl	b86a6 <_ZN6StringaSERKS_>
        WITH_LOCK(Serial) {
   b4fd4:	f004 f996 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4fd8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4fda:	f7ff f8c0 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4fde:	f004 f991 	bl	b9304 <_Z16_fetch_usbserialv>
   b4fe2:	7839      	ldrb	r1, [r7, #0]
   b4fe4:	220a      	movs	r2, #10
   b4fe6:	f7ff f88e 	bl	b4106 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4fea:	a801      	add	r0, sp, #4
   b4fec:	f7ff f9ec 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      for(int i = 0; i < len - 1; i++){
   b4ff0:	e7e5      	b.n	b4fbe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x202>
      networkBuffer = networks[networkCount - 1].ssid;
   b4ff2:	4b3c      	ldr	r3, [pc, #240]	; (b50e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x328>)
   b4ff4:	483c      	ldr	r0, [pc, #240]	; (b50e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x32c>)
   b4ff6:	2238      	movs	r2, #56	; 0x38
   b4ff8:	fb02 3101 	mla	r1, r2, r1, r3
   b4ffc:	3104      	adds	r1, #4
   b4ffe:	f003 fb6c 	bl	b86da <_ZN6StringaSEPKc>
      WITH_LOCK(Serial) {
   b5002:	f004 f97f 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5006:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b5008:	f7ff f8a9 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(networkBuffer.length());
   b500c:	f004 f97a 	bl	b9304 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b5010:	68a1      	ldr	r1, [r4, #8]
   b5012:	220a      	movs	r2, #10
   b5014:	4605      	mov	r5, r0
   b5016:	f003 f9ea 	bl	b83ee <_ZN5Print11printNumberEmh>
        n += println();
   b501a:	4628      	mov	r0, r5
   b501c:	f003 f9d1 	bl	b83c2 <_ZN5Print7printlnEv>
      WITH_LOCK(Serial) {
   b5020:	a801      	add	r0, sp, #4
   b5022:	f7ff f9d1 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      txCharacteristic.setValue(networkBuffer);
   b5026:	4930      	ldr	r1, [pc, #192]	; (b50e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x32c>)
   b5028:	4830      	ldr	r0, [pc, #192]	; (b50ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x330>)
   b502a:	2200      	movs	r2, #0
   b502c:	f002 f8aa 	bl	b7184 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
      txCharacteristic.setValue("]\nEnter network SSID (blank to skip, 'clear' to reset credentials): ");
   b5030:	492f      	ldr	r1, [pc, #188]	; (b50f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x334>)
   b5032:	2200      	movs	r2, #0
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   b5034:	482d      	ldr	r0, [pc, #180]	; (b50ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x330>)
   b5036:	f002 f8aa 	bl	b718e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
  bleQuestionCount++;
   b503a:	6833      	ldr	r3, [r6, #0]
   b503c:	3301      	adds	r3, #1
   b503e:	6033      	str	r3, [r6, #0]
}
   b5040:	b015      	add	sp, #84	; 0x54
   b5042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      WITH_LOCK(Serial) {
   b5046:	f004 f95d 	bl	b9304 <_Z16_fetch_usbserialv>
	const char * c_str() const { return buffer; }
   b504a:	4d2a      	ldr	r5, [pc, #168]	; (b50f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x338>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b504c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b504e:	f7ff f886 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(ssid);
   b5052:	f004 f957 	bl	b9304 <_Z16_fetch_usbserialv>
   b5056:	6829      	ldr	r1, [r5, #0]
   b5058:	f003 f9bf 	bl	b83da <_ZN5Print7printlnEPKc>
        Serial.println(ssid.length());
   b505c:	f004 f952 	bl	b9304 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b5060:	68a9      	ldr	r1, [r5, #8]
   b5062:	220a      	movs	r2, #10
   b5064:	4604      	mov	r4, r0
   b5066:	f003 f9c2 	bl	b83ee <_ZN5Print11printNumberEmh>
        n += println();
   b506a:	4620      	mov	r0, r4
   b506c:	f003 f9a9 	bl	b83c2 <_ZN5Print7printlnEv>
      WITH_LOCK(Serial) {
   b5070:	a801      	add	r0, sp, #4
   b5072:	f7ff f9a9 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5076:	4916      	ldr	r1, [pc, #88]	; (b50d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x314>)
   b5078:	4628      	mov	r0, r5
   b507a:	f003 fbca 	bl	b8812 <_ZNK6String6equalsEPKc>
      if(ssid == ""){
   b507e:	4604      	mov	r4, r0
   b5080:	2800      	cmp	r0, #0
   b5082:	d03f      	beq.n	b5104 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x348>
        bleQuestionCount = 3;
   b5084:	2303      	movs	r3, #3
   b5086:	6033      	str	r3, [r6, #0]
   b5088:	4c15      	ldr	r4, [pc, #84]	; (b50e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x324>)
        EEPROM.get(0, dsid);
   b508a:	f004 fb5f 	bl	b974c <_Z21__fetch_global_EEPROMv>
   b508e:	4621      	mov	r1, r4
   b5090:	2204      	movs	r2, #4
   b5092:	2000      	movs	r0, #0
   b5094:	f001 f9d8 	bl	b6448 <HAL_EEPROM_Get>
        txCharacteristic.setValue("\nCurrent DSID is [");
   b5098:	4917      	ldr	r1, [pc, #92]	; (b50f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x33c>)
   b509a:	4814      	ldr	r0, [pc, #80]	; (b50ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x330>)
   b509c:	2200      	movs	r2, #0
   b509e:	f002 f876 	bl	b718e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        if(dsid != -1){
   b50a2:	6821      	ldr	r1, [r4, #0]
   b50a4:	1c4c      	adds	r4, r1, #1
   b50a6:	d00b      	beq.n	b50c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x304>
          txCharacteristic.setValue(String(dsid));
   b50a8:	220a      	movs	r2, #10
   b50aa:	a801      	add	r0, sp, #4
   b50ac:	f003 fb27 	bl	b86fe <_ZN6StringC1Eih>
   b50b0:	480e      	ldr	r0, [pc, #56]	; (b50ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x330>)
   b50b2:	2200      	movs	r2, #0
   b50b4:	a901      	add	r1, sp, #4
   b50b6:	f002 f865 	bl	b7184 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b50ba:	a801      	add	r0, sp, #4
   b50bc:	f003 fa94 	bl	b85e8 <_ZN6StringD1Ev>
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   b50c0:	490e      	ldr	r1, [pc, #56]	; (b50fc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x340>)
   b50c2:	2200      	movs	r2, #0
   b50c4:	e7b6      	b.n	b5034 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>
   b50c6:	bf00      	nop
   b50c8:	2003da8c 	.word	0x2003da8c
   b50cc:	2003da7c 	.word	0x2003da7c
   b50d0:	000ba587 	.word	0x000ba587
   b50d4:	2003e044 	.word	0x2003e044
   b50d8:	2003e040 	.word	0x2003e040
   b50dc:	2003e0e0 	.word	0x2003e0e0
   b50e0:	2003da94 	.word	0x2003da94
   b50e4:	2003def8 	.word	0x2003def8
   b50e8:	2003dee4 	.word	0x2003dee4
   b50ec:	2003e5fc 	.word	0x2003e5fc
   b50f0:	000ba4bd 	.word	0x000ba4bd
   b50f4:	2003e0e8 	.word	0x2003e0e8
   b50f8:	000ba502 	.word	0x000ba502
   b50fc:	000ba515 	.word	0x000ba515
   b5100:	2003e010 	.word	0x2003e010
   b5104:	49bd      	ldr	r1, [pc, #756]	; (b53fc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x640>)
   b5106:	4628      	mov	r0, r5
   b5108:	f003 fb83 	bl	b8812 <_ZNK6String6equalsEPKc>
      }else if(ssid == "clear"){
   b510c:	4602      	mov	r2, r0
   b510e:	2800      	cmp	r0, #0
   b5110:	d045      	beq.n	b519e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3e2>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   b5112:	48bb      	ldr	r0, [pc, #748]	; (b5400 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x644>)
   b5114:	4623      	mov	r3, r4
   b5116:	6840      	ldr	r0, [r0, #4]
   b5118:	4622      	mov	r2, r4
   b511a:	4621      	mov	r1, r4
   b511c:	f001 fc54 	bl	b69c8 <network_clear_credentials>
          bleQuestionCount = 0;
   b5120:	6034      	str	r4, [r6, #0]
      txCharacteristic.setValue("\nCredentials are currently stored for:\n[");
   b5122:	49b8      	ldr	r1, [pc, #736]	; (b5404 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x648>)
   b5124:	48b8      	ldr	r0, [pc, #736]	; (b5408 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64c>)
      networkCount = WiFi.getCredentials(networks, 5);
   b5126:	f8df a350 	ldr.w	sl, [pc, #848]	; b5478 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6bc>
   b512a:	4db8      	ldr	r5, [pc, #736]	; (b540c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x650>)
   b512c:	4cb8      	ldr	r4, [pc, #736]	; (b5410 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x654>)
        txCharacteristic.setValue(networkBuffer);
   b512e:	f8df 82d8 	ldr.w	r8, [pc, #728]	; b5408 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64c>
        txCharacteristic.setValue(",\n");
   b5132:	f8df 9348 	ldr.w	r9, [pc, #840]	; b547c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6c0>
      txCharacteristic.setValue("\nCredentials are currently stored for:\n[");
   b5136:	2200      	movs	r2, #0
   b5138:	f002 f829 	bl	b718e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      networkCount = WiFi.getCredentials(networks, 5);
   b513c:	49b5      	ldr	r1, [pc, #724]	; (b5414 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x658>)
   b513e:	48b0      	ldr	r0, [pc, #704]	; (b5400 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x644>)
   b5140:	2205      	movs	r2, #5
   b5142:	f004 f93f 	bl	b93c4 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>
      for(int i = 0; i < networkCount - 1; i++){
   b5146:	2700      	movs	r7, #0
      networkCount = WiFi.getCredentials(networks, 5);
   b5148:	f8ca 0000 	str.w	r0, [sl]
      for(int i = 0; i < networkCount - 1; i++){
   b514c:	f8da 1000 	ldr.w	r1, [sl]
   b5150:	3901      	subs	r1, #1
   b5152:	42b9      	cmp	r1, r7
   b5154:	f77f af4d 	ble.w	b4ff2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x236>
        networkBuffer = networks[i].ssid;
   b5158:	4629      	mov	r1, r5
   b515a:	4620      	mov	r0, r4
   b515c:	f003 fabd 	bl	b86da <_ZN6StringaSEPKc>
        WITH_LOCK(Serial) {
   b5160:	f004 f8d0 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5164:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b5166:	f7fe fffa 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(networkBuffer.length());
   b516a:	f004 f8cb 	bl	b9304 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b516e:	68a1      	ldr	r1, [r4, #8]
   b5170:	220a      	movs	r2, #10
   b5172:	4683      	mov	fp, r0
   b5174:	f003 f93b 	bl	b83ee <_ZN5Print11printNumberEmh>
        n += println();
   b5178:	4658      	mov	r0, fp
   b517a:	f003 f922 	bl	b83c2 <_ZN5Print7printlnEv>
        WITH_LOCK(Serial) {
   b517e:	a801      	add	r0, sp, #4
   b5180:	f7ff f922 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        txCharacteristic.setValue(networkBuffer);
   b5184:	2200      	movs	r2, #0
   b5186:	4621      	mov	r1, r4
   b5188:	4640      	mov	r0, r8
   b518a:	f001 fffb 	bl	b7184 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        txCharacteristic.setValue(",\n");
   b518e:	2200      	movs	r2, #0
   b5190:	4649      	mov	r1, r9
   b5192:	4640      	mov	r0, r8
   b5194:	f001 fffb 	bl	b718e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      for(int i = 0; i < networkCount - 1; i++){
   b5198:	3701      	adds	r7, #1
   b519a:	3538      	adds	r5, #56	; 0x38
   b519c:	e7d6      	b.n	b514c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x390>
        txCharacteristic.setValue("\nEnter network password: ");
   b519e:	499e      	ldr	r1, [pc, #632]	; (b5418 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x65c>)
   b51a0:	e748      	b.n	b5034 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>
      WITH_LOCK(Serial) {
   b51a2:	f004 f8af 	bl	b9304 <_Z16_fetch_usbserialv>
	const char * c_str() const { return buffer; }
   b51a6:	4c9d      	ldr	r4, [pc, #628]	; (b541c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x660>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b51a8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b51aa:	f7fe ffd8 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(password);
   b51ae:	f004 f8a9 	bl	b9304 <_Z16_fetch_usbserialv>
   b51b2:	6821      	ldr	r1, [r4, #0]
   b51b4:	f003 f911 	bl	b83da <_ZN5Print7printlnEPKc>
        Serial.println(password.length());
   b51b8:	f004 f8a4 	bl	b9304 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b51bc:	68a1      	ldr	r1, [r4, #8]
   b51be:	4605      	mov	r5, r0
   b51c0:	220a      	movs	r2, #10
   b51c2:	f003 f914 	bl	b83ee <_ZN5Print11printNumberEmh>
        n += println();
   b51c6:	4628      	mov	r0, r5
   b51c8:	f003 f8fb 	bl	b83c2 <_ZN5Print7printlnEv>
      WITH_LOCK(Serial) {
   b51cc:	a801      	add	r0, sp, #4
   b51ce:	f7ff f8fb 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b51d2:	4b93      	ldr	r3, [pc, #588]	; (b5420 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x664>)
   b51d4:	6825      	ldr	r5, [r4, #0]
   b51d6:	f8d3 8000 	ldr.w	r8, [r3]
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b51da:	f1b8 0f00 	cmp.w	r8, #0
   b51de:	d044      	beq.n	b526a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4ae>
   b51e0:	4640      	mov	r0, r8
   b51e2:	f004 ff37 	bl	ba054 <strlen>
   b51e6:	4607      	mov	r7, r0
   b51e8:	2d00      	cmp	r5, #0
   b51ea:	d040      	beq.n	b526e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4b2>
   b51ec:	4628      	mov	r0, r5
   b51ee:	f004 ff31 	bl	ba054 <strlen>
   b51f2:	4604      	mov	r4, r0
        memset(&creds, 0, sizeof(creds));
   b51f4:	2238      	movs	r2, #56	; 0x38
   b51f6:	2100      	movs	r1, #0
   b51f8:	a806      	add	r0, sp, #24
   b51fa:	f004 fee3 	bl	b9fc4 <memset>
        creds.size = sizeof(creds);
   b51fe:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b5200:	e9cd 3801 	strd	r3, r8, [sp, #4]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b5204:	487e      	ldr	r0, [pc, #504]	; (b5400 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x644>)
        creds.password_len = passwordLen;
   b5206:	9405      	str	r4, [sp, #20]
        creds.security = WLanSecurityType(security);
   b5208:	2303      	movs	r3, #3
   b520a:	f88d 3018 	strb.w	r3, [sp, #24]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b520e:	2300      	movs	r3, #0
   b5210:	aa01      	add	r2, sp, #4
   b5212:	4619      	mov	r1, r3
   b5214:	6840      	ldr	r0, [r0, #4]
        creds.password = password;
   b5216:	e9cd 7503 	strd	r7, r5, [sp, #12]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b521a:	f001 fbcd 	bl	b69b8 <network_set_credentials>
      WITH_LOCK(Serial) {
   b521e:	f004 f871 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5222:	9000      	str	r0, [sp, #0]
      { _M_device.lock(); }
   b5224:	f7fe ff9b 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("\n\nCredentials set with ssid: " + ssid + "\npassword: " + password + "\n\n");
   b5228:	f004 f86c 	bl	b9304 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b522c:	497d      	ldr	r1, [pc, #500]	; (b5424 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x668>)
   b522e:	4604      	mov	r4, r0
   b5230:	a801      	add	r0, sp, #4
   b5232:	f003 fa24 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
   b5236:	497a      	ldr	r1, [pc, #488]	; (b5420 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x664>)
   b5238:	a801      	add	r0, sp, #4
   b523a:	f003 fabf 	bl	b87bc <_ZplRK15StringSumHelperRK6String>
   b523e:	497a      	ldr	r1, [pc, #488]	; (b5428 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x66c>)
   b5240:	f003 fac8 	bl	b87d4 <_ZplRK15StringSumHelperPKc>
   b5244:	4975      	ldr	r1, [pc, #468]	; (b541c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x660>)
   b5246:	f003 fab9 	bl	b87bc <_ZplRK15StringSumHelperRK6String>
   b524a:	4978      	ldr	r1, [pc, #480]	; (b542c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x670>)
   b524c:	f003 fac2 	bl	b87d4 <_ZplRK15StringSumHelperPKc>
   b5250:	6801      	ldr	r1, [r0, #0]
   b5252:	4620      	mov	r0, r4
   b5254:	f003 f8c1 	bl	b83da <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b5258:	a801      	add	r0, sp, #4
   b525a:	f003 f9c5 	bl	b85e8 <_ZN6StringD1Ev>
      WITH_LOCK(Serial) {
   b525e:	4668      	mov	r0, sp
   b5260:	f7ff f8b2 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      txCharacteristic.setValue("\nEnter 'test' to test credentials (blank to skip): ");
   b5264:	4972      	ldr	r1, [pc, #456]	; (b5430 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x674>)
   b5266:	2200      	movs	r2, #0
   b5268:	e6e4      	b.n	b5034 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b526a:	4647      	mov	r7, r8
   b526c:	e7bc      	b.n	b51e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x42c>
   b526e:	462c      	mov	r4, r5
   b5270:	e7c0      	b.n	b51f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x438>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5272:	4970      	ldr	r1, [pc, #448]	; (b5434 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x678>)
   b5274:	4870      	ldr	r0, [pc, #448]	; (b5438 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x67c>)
   b5276:	f003 facc 	bl	b8812 <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == "test" && WiFi.hasCredentials()){
   b527a:	2800      	cmp	r0, #0
   b527c:	f43f af04 	beq.w	b5088 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b5280:	4c5f      	ldr	r4, [pc, #380]	; (b5400 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x644>)
        return network_has_credentials(*this, 0, NULL);
   b5282:	2200      	movs	r2, #0
   b5284:	6860      	ldr	r0, [r4, #4]
   b5286:	4611      	mov	r1, r2
   b5288:	f001 fb8e 	bl	b69a8 <network_has_credentials>
   b528c:	2800      	cmp	r0, #0
   b528e:	f43f aefb 	beq.w	b5088 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>
        WiFi.on();
   b5292:	4620      	mov	r0, r4
   b5294:	f7fe ff94 	bl	b41c0 <_ZN5spark9WiFiClass2onEv>
        WiFi.connect();
   b5298:	2100      	movs	r1, #0
   b529a:	4620      	mov	r0, r4
   b529c:	f7fe ff9c 	bl	b41d8 <_ZN5spark9WiFiClass7connectEj>
        return network_connecting(*this, 0, NULL);
   b52a0:	2200      	movs	r2, #0
   b52a2:	6860      	ldr	r0, [r4, #4]
   b52a4:	4611      	mov	r1, r2
   b52a6:	f001 fb47 	bl	b6938 <network_connecting>
        while(WiFi.connecting() || !WiFi.ready()){
   b52aa:	b178      	cbz	r0, b52cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x510>
            Serial.println("timeout");
   b52ac:	f004 f82a 	bl	b9304 <_Z16_fetch_usbserialv>
   b52b0:	4962      	ldr	r1, [pc, #392]	; (b543c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x680>)
   b52b2:	f003 f892 	bl	b83da <_ZN5Print7printlnEPKc>
            wifiTest = false;
   b52b6:	2400      	movs	r4, #0
        WiFi.off();
   b52b8:	4851      	ldr	r0, [pc, #324]	; (b5400 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x644>)
   b52ba:	f7fe ff87 	bl	b41cc <_ZN5spark9WiFiClass3offEv>
        if(wifiTest){
   b52be:	b164      	cbz	r4, b52da <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x51e>
          txCharacteristic.setValue("Success!\n");
   b52c0:	495f      	ldr	r1, [pc, #380]	; (b5440 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x684>)
   b52c2:	4851      	ldr	r0, [pc, #324]	; (b5408 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64c>)
   b52c4:	2200      	movs	r2, #0
   b52c6:	f001 ff62 	bl	b718e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
   b52ca:	e6dd      	b.n	b5088 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>
        while(WiFi.connecting() || !WiFi.ready()){
   b52cc:	4620      	mov	r0, r4
   b52ce:	f7fe ff88 	bl	b41e2 <_ZN5spark9WiFiClass5readyEv>
   b52d2:	4604      	mov	r4, r0
   b52d4:	2800      	cmp	r0, #0
   b52d6:	d0e9      	beq.n	b52ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4f0>
   b52d8:	e7ee      	b.n	b52b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4fc>
          txCharacteristic.setValue("ERROR: WiFi connection timeout\n");
   b52da:	495a      	ldr	r1, [pc, #360]	; (b5444 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x688>)
   b52dc:	484a      	ldr	r0, [pc, #296]	; (b5408 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64c>)
   b52de:	4622      	mov	r2, r4
   b52e0:	f001 ff55 	bl	b718e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
   b52e4:	e71c      	b.n	b5120 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x364>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b52e6:	4958      	ldr	r1, [pc, #352]	; (b5448 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x68c>)
   b52e8:	4853      	ldr	r0, [pc, #332]	; (b5438 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x67c>)
   b52ea:	f003 fa92 	bl	b8812 <_ZNK6String6equalsEPKc>
      if(bleInputBuffer != ""){
   b52ee:	4604      	mov	r4, r0
   b52f0:	b998      	cbnz	r0, b531a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x55e>
        EEPROM.put(kDsidEEPROMAddress, dsid);
   b52f2:	f004 fa2b 	bl	b974c <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b52f6:	4955      	ldr	r1, [pc, #340]	; (b544c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x690>)
   b52f8:	2204      	movs	r2, #4
   b52fa:	4620      	mov	r0, r4
   b52fc:	f001 f8ac 	bl	b6458 <HAL_EEPROM_Put>
        WITH_LOCK(Serial) {
   b5300:	f004 f800 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5304:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b5306:	f7fe ff2a 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("dsid entered");
   b530a:	f003 fffb 	bl	b9304 <_Z16_fetch_usbserialv>
   b530e:	4950      	ldr	r1, [pc, #320]	; (b5450 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x694>)
   b5310:	f003 f863 	bl	b83da <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b5314:	a801      	add	r0, sp, #4
   b5316:	f7ff f857 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      EEPROM.get(kDsidEEPROMAddress, dsid);
   b531a:	f004 fa17 	bl	b974c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b531e:	2204      	movs	r2, #4
   b5320:	494a      	ldr	r1, [pc, #296]	; (b544c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x690>)
   b5322:	2000      	movs	r0, #0
   b5324:	f001 f890 	bl	b6448 <HAL_EEPROM_Get>
      Serial.println("dsid: " + dsid);
   b5328:	f003 ffec 	bl	b9304 <_Z16_fetch_usbserialv>
   b532c:	682b      	ldr	r3, [r5, #0]
   b532e:	4949      	ldr	r1, [pc, #292]	; (b5454 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x698>)
   b5330:	4419      	add	r1, r3
   b5332:	f003 f852 	bl	b83da <_ZN5Print7printlnEPKc>
      txCharacteristic.setValue("\nCurrent value for sleep pause duration is [");
   b5336:	4948      	ldr	r1, [pc, #288]	; (b5458 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x69c>)
   b5338:	4833      	ldr	r0, [pc, #204]	; (b5408 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64c>)
   b533a:	2200      	movs	r2, #0
   b533c:	f001 ff27 	bl	b718e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(recordingInterval != -1){
   b5340:	4b46      	ldr	r3, [pc, #280]	; (b545c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6a0>)
   b5342:	681b      	ldr	r3, [r3, #0]
   b5344:	3301      	adds	r3, #1
   b5346:	d00d      	beq.n	b5364 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a8>
        txCharacteristic.setValue(String(sleepPauseDuration));
   b5348:	4b45      	ldr	r3, [pc, #276]	; (b5460 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6a4>)
   b534a:	220a      	movs	r2, #10
   b534c:	6819      	ldr	r1, [r3, #0]
   b534e:	a801      	add	r0, sp, #4
   b5350:	f003 f9d5 	bl	b86fe <_ZN6StringC1Eih>
   b5354:	482c      	ldr	r0, [pc, #176]	; (b5408 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64c>)
   b5356:	2200      	movs	r2, #0
   b5358:	a901      	add	r1, sp, #4
   b535a:	f001 ff13 	bl	b7184 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b535e:	a801      	add	r0, sp, #4
   b5360:	f003 f942 	bl	b85e8 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter sleep pause duration as an integer in seconds (blank to skip): ");
   b5364:	493f      	ldr	r1, [pc, #252]	; (b5464 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6a8>)
   b5366:	2200      	movs	r2, #0
   b5368:	e664      	b.n	b5034 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>
   b536a:	4937      	ldr	r1, [pc, #220]	; (b5448 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x68c>)
   b536c:	4832      	ldr	r0, [pc, #200]	; (b5438 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x67c>)
   b536e:	f003 fa50 	bl	b8812 <_ZNK6String6equalsEPKc>
      if(bleInputBuffer != ""){
   b5372:	b9a0      	cbnz	r0, b539e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e2>
        EEPROM.put(kSleepPauseDurationEEPROMAddress, sleepPauseDuration);
   b5374:	f004 f9ea 	bl	b974c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b5378:	4939      	ldr	r1, [pc, #228]	; (b5460 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6a4>)
   b537a:	2204      	movs	r2, #4
   b537c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b5380:	f001 f86a 	bl	b6458 <HAL_EEPROM_Put>
        WITH_LOCK(Serial) {
   b5384:	f003 ffbe 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5388:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b538a:	f7fe fee8 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("sleep pause duration entered");
   b538e:	f003 ffb9 	bl	b9304 <_Z16_fetch_usbserialv>
   b5392:	4935      	ldr	r1, [pc, #212]	; (b5468 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6ac>)
   b5394:	f003 f821 	bl	b83da <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b5398:	a801      	add	r0, sp, #4
   b539a:	f7ff f815 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      EEPROM.get(kSleepPauseDurationEEPROMAddress, sleepPauseDuration);
   b539e:	f004 f9d5 	bl	b974c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b53a2:	2204      	movs	r2, #4
   b53a4:	492e      	ldr	r1, [pc, #184]	; (b5460 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6a4>)
   b53a6:	4c2d      	ldr	r4, [pc, #180]	; (b545c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6a0>)
   b53a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b53ac:	f001 f84c 	bl	b6448 <HAL_EEPROM_Get>
      Serial.println("sleep pause duration: " + sleepPauseDuration);
   b53b0:	f003 ffa8 	bl	b9304 <_Z16_fetch_usbserialv>
   b53b4:	682b      	ldr	r3, [r5, #0]
   b53b6:	492d      	ldr	r1, [pc, #180]	; (b546c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6b0>)
   b53b8:	4419      	add	r1, r3
   b53ba:	f003 f80e 	bl	b83da <_ZN5Print7printlnEPKc>
      EEPROM.get(kRecordingIntervalEEPROMAddress, recordingInterval);
   b53be:	f004 f9c5 	bl	b974c <_Z21__fetch_global_EEPROMv>
   b53c2:	2204      	movs	r2, #4
   b53c4:	4621      	mov	r1, r4
   b53c6:	2064      	movs	r0, #100	; 0x64
   b53c8:	f001 f83e 	bl	b6448 <HAL_EEPROM_Get>
      txCharacteristic.setValue("\nCurrent value for data collection interval is [");
   b53cc:	4928      	ldr	r1, [pc, #160]	; (b5470 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6b4>)
   b53ce:	480e      	ldr	r0, [pc, #56]	; (b5408 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64c>)
   b53d0:	2200      	movs	r2, #0
   b53d2:	f001 fedc 	bl	b718e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(recordingInterval != -1){
   b53d6:	6821      	ldr	r1, [r4, #0]
   b53d8:	1c48      	adds	r0, r1, #1
   b53da:	d00b      	beq.n	b53f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x638>
        txCharacteristic.setValue(String(recordingInterval));
   b53dc:	220a      	movs	r2, #10
   b53de:	a801      	add	r0, sp, #4
   b53e0:	f003 f98d 	bl	b86fe <_ZN6StringC1Eih>
   b53e4:	4808      	ldr	r0, [pc, #32]	; (b5408 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64c>)
   b53e6:	2200      	movs	r2, #0
   b53e8:	a901      	add	r1, sp, #4
   b53ea:	f001 fecb 	bl	b7184 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b53ee:	a801      	add	r0, sp, #4
   b53f0:	f003 f8fa 	bl	b85e8 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between data collection as an integer in milliseconds (blank to skip): ");
   b53f4:	491f      	ldr	r1, [pc, #124]	; (b5474 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6b8>)
   b53f6:	2200      	movs	r2, #0
   b53f8:	e61c      	b.n	b5034 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>
   b53fa:	bf00      	nop
   b53fc:	000ba53b 	.word	0x000ba53b
   b5400:	2003e7c0 	.word	0x2003e7c0
   b5404:	000ba491 	.word	0x000ba491
   b5408:	2003e5fc 	.word	0x2003e5fc
   b540c:	2003defc 	.word	0x2003defc
   b5410:	2003dee4 	.word	0x2003dee4
   b5414:	2003def8 	.word	0x2003def8
   b5418:	000ba541 	.word	0x000ba541
   b541c:	2003e010 	.word	0x2003e010
   b5420:	2003e0e8 	.word	0x2003e0e8
   b5424:	000ba55b 	.word	0x000ba55b
   b5428:	000ba579 	.word	0x000ba579
   b542c:	000ba585 	.word	0x000ba585
   b5430:	000ba588 	.word	0x000ba588
   b5434:	000ba5bc 	.word	0x000ba5bc
   b5438:	2003da7c 	.word	0x2003da7c
   b543c:	000ba5c1 	.word	0x000ba5c1
   b5440:	000ba5c9 	.word	0x000ba5c9
   b5444:	000ba5d3 	.word	0x000ba5d3
   b5448:	000ba587 	.word	0x000ba587
   b544c:	2003da94 	.word	0x2003da94
   b5450:	000ba5f3 	.word	0x000ba5f3
   b5454:	000ba600 	.word	0x000ba600
   b5458:	000ba607 	.word	0x000ba607
   b545c:	2003e040 	.word	0x2003e040
   b5460:	2003e0e0 	.word	0x2003e0e0
   b5464:	000ba634 	.word	0x000ba634
   b5468:	000ba67c 	.word	0x000ba67c
   b546c:	000ba699 	.word	0x000ba699
   b5470:	000ba6b0 	.word	0x000ba6b0
   b5474:	000ba6e1 	.word	0x000ba6e1
   b5478:	2003def4 	.word	0x2003def4
   b547c:	000ba4ba 	.word	0x000ba4ba
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5480:	4964      	ldr	r1, [pc, #400]	; (b5614 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x858>)
   b5482:	4865      	ldr	r0, [pc, #404]	; (b5618 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x85c>)
   b5484:	f003 f9c5 	bl	b8812 <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == ""){
   b5488:	b130      	cbz	r0, b5498 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6dc>
        EEPROM.get(kRecordingIntervalEEPROMAddress, recordingInterval);
   b548a:	f004 f95f 	bl	b974c <_Z21__fetch_global_EEPROMv>
   b548e:	4963      	ldr	r1, [pc, #396]	; (b561c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x860>)
   b5490:	2204      	movs	r2, #4
   b5492:	2064      	movs	r0, #100	; 0x64
   b5494:	f000 ffd8 	bl	b6448 <HAL_EEPROM_Get>
      EEPROM.put(kRecordingIntervalEEPROMAddress, recordingInterval);
   b5498:	f004 f958 	bl	b974c <_Z21__fetch_global_EEPROMv>
   b549c:	4c60      	ldr	r4, [pc, #384]	; (b5620 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x864>)
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b549e:	495f      	ldr	r1, [pc, #380]	; (b561c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x860>)
   b54a0:	2204      	movs	r2, #4
   b54a2:	2064      	movs	r0, #100	; 0x64
   b54a4:	f000 ffd8 	bl	b6458 <HAL_EEPROM_Put>
      EEPROM.get(kRecordingIntervalEEPROMAddress, recordingInterval);
   b54a8:	f004 f950 	bl	b974c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b54ac:	495b      	ldr	r1, [pc, #364]	; (b561c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x860>)
   b54ae:	2204      	movs	r2, #4
   b54b0:	2064      	movs	r0, #100	; 0x64
   b54b2:	f000 ffc9 	bl	b6448 <HAL_EEPROM_Get>
      EEPROM.get(kReportingIntervalEEPROMAddress, reportingInterval);
   b54b6:	f004 f949 	bl	b974c <_Z21__fetch_global_EEPROMv>
   b54ba:	2204      	movs	r2, #4
   b54bc:	4621      	mov	r1, r4
   b54be:	20c8      	movs	r0, #200	; 0xc8
   b54c0:	f000 ffc2 	bl	b6448 <HAL_EEPROM_Get>
      txCharacteristic.setValue("\nCurrent value for WiFi connection interval is [");
   b54c4:	2200      	movs	r2, #0
   b54c6:	4957      	ldr	r1, [pc, #348]	; (b5624 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x868>)
   b54c8:	4857      	ldr	r0, [pc, #348]	; (b5628 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86c>)
   b54ca:	f001 fe60 	bl	b718e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(reportingInterval != -1){
   b54ce:	6823      	ldr	r3, [r4, #0]
   b54d0:	1c5a      	adds	r2, r3, #1
   b54d2:	d00f      	beq.n	b54f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x738>
        txCharacteristic.setValue(String(reportingInterval / 1000));
   b54d4:	220a      	movs	r2, #10
   b54d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b54da:	a801      	add	r0, sp, #4
   b54dc:	fb93 f1f1 	sdiv	r1, r3, r1
   b54e0:	f003 f90d 	bl	b86fe <_ZN6StringC1Eih>
   b54e4:	4850      	ldr	r0, [pc, #320]	; (b5628 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86c>)
   b54e6:	2200      	movs	r2, #0
   b54e8:	a901      	add	r1, sp, #4
   b54ea:	f001 fe4b 	bl	b7184 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b54ee:	a801      	add	r0, sp, #4
   b54f0:	f003 f87a 	bl	b85e8 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between WiFi connections as an integer in seconds (blank to skip): ");
   b54f4:	494d      	ldr	r1, [pc, #308]	; (b562c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x870>)
   b54f6:	2200      	movs	r2, #0
   b54f8:	e59c      	b.n	b5034 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>
   b54fa:	4946      	ldr	r1, [pc, #280]	; (b5614 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x858>)
   b54fc:	4846      	ldr	r0, [pc, #280]	; (b5618 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x85c>)
   b54fe:	f003 f988 	bl	b8812 <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == ""){
   b5502:	b130      	cbz	r0, b5512 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x756>
        EEPROM.get(kReportingIntervalEEPROMAddress, reportingInterval);
   b5504:	f004 f922 	bl	b974c <_Z21__fetch_global_EEPROMv>
   b5508:	4945      	ldr	r1, [pc, #276]	; (b5620 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x864>)
   b550a:	2204      	movs	r2, #4
   b550c:	20c8      	movs	r0, #200	; 0xc8
   b550e:	f000 ff9b 	bl	b6448 <HAL_EEPROM_Get>
      EEPROM.put(kReportingIntervalEEPROMAddress, reportingInterval);
   b5512:	f004 f91b 	bl	b974c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b5516:	4942      	ldr	r1, [pc, #264]	; (b5620 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x864>)
   b5518:	2204      	movs	r2, #4
   b551a:	20c8      	movs	r0, #200	; 0xc8
   b551c:	f000 ff9c 	bl	b6458 <HAL_EEPROM_Put>
      EEPROM.get(kReportingIntervalEEPROMAddress, reportingInterval);
   b5520:	f004 f914 	bl	b974c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b5524:	493e      	ldr	r1, [pc, #248]	; (b5620 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x864>)
   b5526:	2204      	movs	r2, #4
   b5528:	20c8      	movs	r0, #200	; 0xc8
   b552a:	f000 ff8d 	bl	b6448 <HAL_EEPROM_Get>
      WITH_LOCK(Serial) {
   b552e:	f003 fee9 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5532:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b5534:	f7fe fe13 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(reportingInterval);
   b5538:	f003 fee4 	bl	b9304 <_Z16_fetch_usbserialv>
   b553c:	6829      	ldr	r1, [r5, #0]
   b553e:	220a      	movs	r2, #10
   b5540:	f7fe fdf0 	bl	b4124 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
      WITH_LOCK(Serial) {
   b5544:	a801      	add	r0, sp, #4
   b5546:	f7fe ff3f 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      txCharacteristic.setValue("\nEnter 'ota' to wait for OTA update (blank to skip): ");
   b554a:	4939      	ldr	r1, [pc, #228]	; (b5630 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x874>)
   b554c:	2200      	movs	r2, #0
   b554e:	e571      	b.n	b5034 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>
   b5550:	4938      	ldr	r1, [pc, #224]	; (b5634 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x878>)
   b5552:	4831      	ldr	r0, [pc, #196]	; (b5618 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x85c>)
   b5554:	4c38      	ldr	r4, [pc, #224]	; (b5638 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x87c>)
   b5556:	f003 f95c 	bl	b8812 <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == "ota"){
   b555a:	b300      	cbz	r0, b559e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7e2>
        uint8_t value = 0;
   b555c:	2200      	movs	r2, #0
        system_get_flag(flag, &value, nullptr);
   b555e:	a901      	add	r1, sp, #4
   b5560:	2001      	movs	r0, #1
        uint8_t value = 0;
   b5562:	f88d 2004 	strb.w	r2, [sp, #4]
        system_get_flag(flag, &value, nullptr);
   b5566:	f001 f977 	bl	b6858 <system_get_flag>
        waitingForOTA = true;
   b556a:	2301      	movs	r3, #1
   b556c:	7023      	strb	r3, [r4, #0]
        uint8_t value = 0;
   b556e:	2400      	movs	r4, #0
        system_get_flag(flag, &value, nullptr);
   b5570:	4622      	mov	r2, r4
   b5572:	a901      	add	r1, sp, #4
   b5574:	2001      	movs	r0, #1
        uint8_t value = 0;
   b5576:	f88d 4004 	strb.w	r4, [sp, #4]
        system_get_flag(flag, &value, nullptr);
   b557a:	f001 f96d 	bl	b6858 <system_get_flag>
        WiFi.on();
   b557e:	482f      	ldr	r0, [pc, #188]	; (b563c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x880>)
   b5580:	f7fe fe1e 	bl	b41c0 <_ZN5spark9WiFiClass2onEv>
        WiFi.connect();
   b5584:	4621      	mov	r1, r4
   b5586:	482d      	ldr	r0, [pc, #180]	; (b563c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x880>)
        while(!WiFi.ready()) {
   b5588:	4c2c      	ldr	r4, [pc, #176]	; (b563c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x880>)
        WiFi.connect();
   b558a:	f7fe fe25 	bl	b41d8 <_ZN5spark9WiFiClass7connectEj>
        while(!WiFi.ready()) {
   b558e:	4620      	mov	r0, r4
   b5590:	f7fe fe27 	bl	b41e2 <_ZN5spark9WiFiClass5readyEv>
   b5594:	b948      	cbnz	r0, b55aa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7ee>
          delay(100);
   b5596:	2064      	movs	r0, #100	; 0x64
   b5598:	f001 fa8e 	bl	b6ab8 <delay>
        while(!WiFi.ready()) {
   b559c:	e7f7      	b.n	b558e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7d2>
      if(waitingForOTA) {
   b559e:	7823      	ldrb	r3, [r4, #0]
   b55a0:	2b00      	cmp	r3, #0
   b55a2:	d1e4      	bne.n	b556e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7b2>
      System.reset();
   b55a4:	f003 f9de 	bl	b8964 <_ZN11SystemClass5resetEv>
   b55a8:	e547      	b.n	b503a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x27e>
        if(WiFi.ready() != true) {
   b55aa:	4824      	ldr	r0, [pc, #144]	; (b563c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x880>)
   b55ac:	f7fe fe19 	bl	b41e2 <_ZN5spark9WiFiClass5readyEv>
   b55b0:	b968      	cbnz	r0, b55ce <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x812>
          WITH_LOCK(Serial) {
   b55b2:	f003 fea7 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b55b6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b55b8:	f7fe fdd1 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
            Serial.println("WiFi failed to connect, skipping time synchronization");
   b55bc:	f003 fea2 	bl	b9304 <_Z16_fetch_usbserialv>
   b55c0:	491f      	ldr	r1, [pc, #124]	; (b5640 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x884>)
   b55c2:	f002 ff0a 	bl	b83da <_ZN5Print7printlnEPKc>
          WITH_LOCK(Serial) {
   b55c6:	a801      	add	r0, sp, #4
   b55c8:	f7fe fefe 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b55cc:	e7ea      	b.n	b55a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7e8>
          WITH_LOCK(Serial) {
   b55ce:	f003 fe99 	bl	b9304 <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b55d2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b55d4:	f7fe fdc3 	bl	b415e <_ZN9USBSerial4lockEv.isra.0>
            Serial.println("WiFi connected, awaiting update");
   b55d8:	f003 fe94 	bl	b9304 <_Z16_fetch_usbserialv>
   b55dc:	4919      	ldr	r1, [pc, #100]	; (b5644 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x888>)
   b55de:	f002 fefc 	bl	b83da <_ZN5Print7printlnEPKc>
          WITH_LOCK(Serial) {
   b55e2:	a801      	add	r0, sp, #4
   b55e4:	f7fe fef0 	bl	b43c8 <_ZNSt10lock_guardIR9USBSerialED1Ev>
          txCharacteristic.setValue("\nAwaiting OTA update");
   b55e8:	4917      	ldr	r1, [pc, #92]	; (b5648 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88c>)
   b55ea:	480f      	ldr	r0, [pc, #60]	; (b5628 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86c>)
   b55ec:	2200      	movs	r2, #0
   b55ee:	f001 fdce 	bl	b718e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        spark_cloud_flag_connect();
   b55f2:	f001 f971 	bl	b68d8 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b55f6:	f001 f977 	bl	b68e8 <spark_cloud_flag_connected>
          while(!Particle.connected()) {
   b55fa:	b130      	cbz	r0, b560a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84e>
   b55fc:	4c13      	ldr	r4, [pc, #76]	; (b564c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x890>)
		return HAL_Timer_Get_Milli_Seconds();
   b55fe:	f000 ff13 	bl	b6428 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b5602:	6020      	str	r0, [r4, #0]
    		spark_process();
   b5604:	f001 f960 	bl	b68c8 <spark_process>
   b5608:	e7f9      	b.n	b55fe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x842>
            delay(100);
   b560a:	2064      	movs	r0, #100	; 0x64
   b560c:	f001 fa54 	bl	b6ab8 <delay>
          while(!Particle.connected()) {
   b5610:	e7f1      	b.n	b55f6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x83a>
   b5612:	bf00      	nop
   b5614:	000ba587 	.word	0x000ba587
   b5618:	2003da7c 	.word	0x2003da7c
   b561c:	2003e040 	.word	0x2003e040
   b5620:	2003e044 	.word	0x2003e044
   b5624:	000ba736 	.word	0x000ba736
   b5628:	2003e5fc 	.word	0x2003e5fc
   b562c:	000ba767 	.word	0x000ba767
   b5630:	000ba7b8 	.word	0x000ba7b8
   b5634:	000ba7ee 	.word	0x000ba7ee
   b5638:	2003e614 	.word	0x2003e614
   b563c:	2003e7c0 	.word	0x2003e7c0
   b5640:	000ba38c 	.word	0x000ba38c
   b5644:	000ba7f2 	.word	0x000ba7f2
   b5648:	000ba812 	.word	0x000ba812
   b564c:	2003e7d0 	.word	0x2003e7d0

000b5650 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b5650:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5652:	4616      	mov	r6, r2
   b5654:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b5656:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5658:	e9c0 2200 	strd	r2, r2, [r0]
   b565c:	4604      	mov	r4, r0
   b565e:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   b5660:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   b5662:	4619      	mov	r1, r3
   b5664:	a806      	add	r0, sp, #24
   b5666:	f001 fbcd 	bl	b6e04 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   b566a:	9916      	ldr	r1, [sp, #88]	; 0x58
   b566c:	4638      	mov	r0, r7
   b566e:	f001 fbc9 	bl	b6e04 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   b5672:	7833      	ldrb	r3, [r6, #0]
   b5674:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5678:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b567a:	9302      	str	r3, [sp, #8]
   b567c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b567e:	4620      	mov	r0, r4
   b5680:	e9cd 7300 	strd	r7, r3, [sp]
   b5684:	aa05      	add	r2, sp, #20
   b5686:	ab06      	add	r3, sp, #24
   b5688:	4629      	mov	r1, r5
   b568a:	f002 f9cf 	bl	b7a2c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b568e:	4620      	mov	r0, r4
   b5690:	b011      	add	sp, #68	; 0x44
   b5692:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5694 <_ZN15Adafruit_LIS3DHD0Ev>:
   b5694:	b510      	push	{r4, lr}
   b5696:	212c      	movs	r1, #44	; 0x2c
   b5698:	4604      	mov	r4, r0
   b569a:	f004 f8b0 	bl	b97fe <_ZdlPvj>
   b569e:	4620      	mov	r0, r4
   b56a0:	bd10      	pop	{r4, pc}
	...

000b56a4 <_GLOBAL__sub_I_SystemMode>:
}
   b56a4:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
   b56a6:	4d6e      	ldr	r5, [pc, #440]	; (b5860 <_GLOBAL__sub_I_SystemMode+0x1bc>)
    SleepResult() {}
   b56a8:	4b6e      	ldr	r3, [pc, #440]	; (b5864 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b56aa:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   b56ac:	2400      	movs	r4, #0
   b56ae:	b090      	sub	sp, #64	; 0x40
   b56b0:	e9c5 4400 	strd	r4, r4, [r5]
        set_system_mode(mode);
   b56b4:	2003      	movs	r0, #3
   b56b6:	f001 f8a7 	bl	b6808 <set_system_mode>
SYSTEM_MODE(MANUAL)
   b56ba:	4a6b      	ldr	r2, [pc, #428]	; (b5868 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b56bc:	496b      	ldr	r1, [pc, #428]	; (b586c <_GLOBAL__sub_I_SystemMode+0x1c8>)
   b56be:	4628      	mov	r0, r5
   b56c0:	f004 f898 	bl	b97f4 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED)
   b56c4:	4621      	mov	r1, r4
   b56c6:	2001      	movs	r0, #1
   b56c8:	f001 f8ae 	bl	b6828 <system_thread_set_state>
#pragma once

int recordingInterval; // interval between lis3dh reads
int reportingInterval; // interval between reporting data to server in seconds
int sleepPauseDuration; // time of inactivity before sleep
String payload = "";
   b56cc:	4968      	ldr	r1, [pc, #416]	; (b5870 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b56ce:	4869      	ldr	r0, [pc, #420]	; (b5874 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   b56d0:	4d69      	ldr	r5, [pc, #420]	; (b5878 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b56d2:	f002 ffd4 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
   b56d6:	4a64      	ldr	r2, [pc, #400]	; (b5868 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b56d8:	4968      	ldr	r1, [pc, #416]	; (b587c <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b56da:	4866      	ldr	r0, [pc, #408]	; (b5874 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   b56dc:	f004 f88a 	bl	b97f4 <__aeabi_atexit>
bool valuesChanged = false;
String unixTime;
   b56e0:	4963      	ldr	r1, [pc, #396]	; (b5870 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b56e2:	4867      	ldr	r0, [pc, #412]	; (b5880 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b56e4:	f002 ffcb 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
   b56e8:	4a5f      	ldr	r2, [pc, #380]	; (b5868 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b56ea:	4964      	ldr	r1, [pc, #400]	; (b587c <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b56ec:	4864      	ldr	r0, [pc, #400]	; (b5880 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b56ee:	f004 f881 	bl	b97f4 <__aeabi_atexit>
String ssid, password = "";
   b56f2:	495f      	ldr	r1, [pc, #380]	; (b5870 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b56f4:	4863      	ldr	r0, [pc, #396]	; (b5884 <_GLOBAL__sub_I_SystemMode+0x1e0>)
   b56f6:	f002 ffc2 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
   b56fa:	4a5b      	ldr	r2, [pc, #364]	; (b5868 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b56fc:	495f      	ldr	r1, [pc, #380]	; (b587c <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b56fe:	4861      	ldr	r0, [pc, #388]	; (b5884 <_GLOBAL__sub_I_SystemMode+0x1e0>)
   b5700:	f004 f878 	bl	b97f4 <__aeabi_atexit>
   b5704:	495a      	ldr	r1, [pc, #360]	; (b5870 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b5706:	4860      	ldr	r0, [pc, #384]	; (b5888 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b5708:	f002 ffb9 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
   b570c:	4a56      	ldr	r2, [pc, #344]	; (b5868 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b570e:	495b      	ldr	r1, [pc, #364]	; (b587c <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b5710:	485d      	ldr	r0, [pc, #372]	; (b5888 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b5712:	f004 f86f 	bl	b97f4 <__aeabi_atexit>
float x, y, z;
uint8_t storedValues [256];
long storedTimes [256];
float prevX, prevY, prevZ;
int storedValuesIndex = 0;
String rolloverPayload = ""; 
   b5716:	4956      	ldr	r1, [pc, #344]	; (b5870 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b5718:	485c      	ldr	r0, [pc, #368]	; (b588c <_GLOBAL__sub_I_SystemMode+0x1e8>)
   b571a:	f002 ffb0 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
   b571e:	4a52      	ldr	r2, [pc, #328]	; (b5868 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5720:	4956      	ldr	r1, [pc, #344]	; (b587c <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b5722:	485a      	ldr	r0, [pc, #360]	; (b588c <_GLOBAL__sub_I_SystemMode+0x1e8>)
   b5724:	f004 f866 	bl	b97f4 <__aeabi_atexit>
  RECORDING,
  SENDING
};
uint8_t firmwareState = BLEWAIT;
bool bleWaitForConfig = false; //when true, firmware is waiting for user input over BLE b/c BLE was connected
String bleInputBuffer; // buffer for reading from BLE and writing to EEPROM
   b5728:	4951      	ldr	r1, [pc, #324]	; (b5870 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b572a:	4859      	ldr	r0, [pc, #356]	; (b5890 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b572c:	f002 ffa7 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
   b5730:	4a4d      	ldr	r2, [pc, #308]	; (b5868 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5732:	4952      	ldr	r1, [pc, #328]	; (b587c <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b5734:	4856      	ldr	r0, [pc, #344]	; (b5890 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b5736:	f004 f85d 	bl	b97f4 <__aeabi_atexit>
        : config_(config) {
   b573a:	4856      	ldr	r0, [pc, #344]	; (b5894 <_GLOBAL__sub_I_SystemMode+0x1f0>)
os_thread_t reportingThreadHandle;
os_mutex_t payloadAccessLock;
os_mutex_t recordingSleepProtectionLock; // these 2 mutexes are used to prevent the system from sleeping
os_mutex_t reportingSleepProtectionLock; // while recording/reporting are in the middle of an action (e.g. POSTing data or reading the accelerometer)
long sleepTimeoutCounter = 0; //counts consecutive data points that have been "0"
SystemSleepConfiguration sleepConfig;
   b573c:	4a4a      	ldr	r2, [pc, #296]	; (b5868 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b573e:	4956      	ldr	r1, [pc, #344]	; (b5898 <_GLOBAL__sub_I_SystemMode+0x1f4>)
              valid_(true) {
   b5740:	6104      	str	r4, [r0, #16]
        : config_(config) {
   b5742:	1d03      	adds	r3, r0, #4
   b5744:	6003      	str	r3, [r0, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b5746:	4b55      	ldr	r3, [pc, #340]	; (b589c <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b5748:	6043      	str	r3, [r0, #4]
              valid_(true) {
   b574a:	2301      	movs	r3, #1
   b574c:	7503      	strb	r3, [r0, #20]
   b574e:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b5752:	f004 f84f 	bl	b97f4 <__aeabi_atexit>

const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b5756:	4952      	ldr	r1, [pc, #328]	; (b58a0 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   b5758:	4852      	ldr	r0, [pc, #328]	; (b58a4 <_GLOBAL__sub_I_SystemMode+0x200>)
   b575a:	f001 fc37 	bl	b6fcc <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b575e:	4952      	ldr	r1, [pc, #328]	; (b58a8 <_GLOBAL__sub_I_SystemMode+0x204>)
   b5760:	4852      	ldr	r0, [pc, #328]	; (b58ac <_GLOBAL__sub_I_SystemMode+0x208>)
   b5762:	f001 fc33 	bl	b6fcc <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b5766:	4952      	ldr	r1, [pc, #328]	; (b58b0 <_GLOBAL__sub_I_SystemMode+0x20c>)
   b5768:	4852      	ldr	r0, [pc, #328]	; (b58b4 <_GLOBAL__sub_I_SystemMode+0x210>)
   b576a:	f001 fc2f 	bl	b6fcc <_ZN8particle7BleUuidC1EPKc>
HttpClient http;
   b576e:	4852      	ldr	r0, [pc, #328]	; (b58b8 <_GLOBAL__sub_I_SystemMode+0x214>)
   b5770:	f000 fb33 	bl	b5dda <_ZN10HttpClientC1Ev>
   b5774:	4a3c      	ldr	r2, [pc, #240]	; (b5868 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5776:	4951      	ldr	r1, [pc, #324]	; (b58bc <_GLOBAL__sub_I_SystemMode+0x218>)
   b5778:	484f      	ldr	r0, [pc, #316]	; (b58b8 <_GLOBAL__sub_I_SystemMode+0x214>)
   b577a:	f004 f83b 	bl	b97f4 <__aeabi_atexit>
} http_request_t;
   b577e:	493c      	ldr	r1, [pc, #240]	; (b5870 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b5780:	484f      	ldr	r0, [pc, #316]	; (b58c0 <_GLOBAL__sub_I_SystemMode+0x21c>)
   b5782:	f002 ff7c 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
   b5786:	484f      	ldr	r0, [pc, #316]	; (b58c4 <_GLOBAL__sub_I_SystemMode+0x220>)
   b5788:	f002 fcd8 	bl	b813c <_ZN9IPAddressC1Ev>
   b578c:	4938      	ldr	r1, [pc, #224]	; (b5870 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b578e:	484e      	ldr	r0, [pc, #312]	; (b58c8 <_GLOBAL__sub_I_SystemMode+0x224>)
   b5790:	f002 ff75 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
   b5794:	4936      	ldr	r1, [pc, #216]	; (b5870 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b5796:	484d      	ldr	r0, [pc, #308]	; (b58cc <_GLOBAL__sub_I_SystemMode+0x228>)
   b5798:	f002 ff71 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
http_request_t request;
   b579c:	4a32      	ldr	r2, [pc, #200]	; (b5868 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b579e:	494c      	ldr	r1, [pc, #304]	; (b58d0 <_GLOBAL__sub_I_SystemMode+0x22c>)
   b57a0:	4847      	ldr	r0, [pc, #284]	; (b58c0 <_GLOBAL__sub_I_SystemMode+0x21c>)
   b57a2:	f004 f827 	bl	b97f4 <__aeabi_atexit>
} http_response_t;
   b57a6:	4932      	ldr	r1, [pc, #200]	; (b5870 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b57a8:	484a      	ldr	r0, [pc, #296]	; (b58d4 <_GLOBAL__sub_I_SystemMode+0x230>)
   b57aa:	f002 ff68 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
http_response_t response;
   b57ae:	4a2e      	ldr	r2, [pc, #184]	; (b5868 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b57b0:	4949      	ldr	r1, [pc, #292]	; (b58d8 <_GLOBAL__sub_I_SystemMode+0x234>)
   b57b2:	484a      	ldr	r0, [pc, #296]	; (b58dc <_GLOBAL__sub_I_SystemMode+0x238>)
   b57b4:	f004 f81e 	bl	b97f4 <__aeabi_atexit>
   b57b8:	2405      	movs	r4, #5
#ifdef __cplusplus

   WiFiAccessPoint()
   {
       memset(this, 0, sizeof(*this));
       size = sizeof(*this);
   b57ba:	2638      	movs	r6, #56	; 0x38
       memset(this, 0, sizeof(*this));
   b57bc:	1d28      	adds	r0, r5, #4
   b57be:	2234      	movs	r2, #52	; 0x34
   b57c0:	2100      	movs	r1, #0
   b57c2:	f004 fbff 	bl	b9fc4 <memset>
WiFiAccessPoint networks[5];
   b57c6:	3c01      	subs	r4, #1
       size = sizeof(*this);
   b57c8:	f845 6b38 	str.w	r6, [r5], #56
   b57cc:	d1f6      	bne.n	b57bc <_GLOBAL__sub_I_SystemMode+0x118>
String networkBuffer;
   b57ce:	4928      	ldr	r1, [pc, #160]	; (b5870 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b57d0:	4843      	ldr	r0, [pc, #268]	; (b58e0 <_GLOBAL__sub_I_SystemMode+0x23c>)
   b57d2:	f002 ff54 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
   b57d6:	4a24      	ldr	r2, [pc, #144]	; (b5868 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b57d8:	4928      	ldr	r1, [pc, #160]	; (b587c <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b57da:	4841      	ldr	r0, [pc, #260]	; (b58e0 <_GLOBAL__sub_I_SystemMode+0x23c>)
   b57dc:	f004 f80a 	bl	b97f4 <__aeabi_atexit>
Adafruit_LIS3DH lis3dh = Adafruit_LIS3DH();
   b57e0:	4840      	ldr	r0, [pc, #256]	; (b58e4 <_GLOBAL__sub_I_SystemMode+0x240>)
   b57e2:	f000 f8a7 	bl	b5934 <_ZN15Adafruit_LIS3DHC1Ev>
   b57e6:	4a20      	ldr	r2, [pc, #128]	; (b5868 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b57e8:	493f      	ldr	r1, [pc, #252]	; (b58e8 <_GLOBAL__sub_I_SystemMode+0x244>)
   b57ea:	483e      	ldr	r0, [pc, #248]	; (b58e4 <_GLOBAL__sub_I_SystemMode+0x240>)
   b57ec:	f004 f802 	bl	b97f4 <__aeabi_atexit>
    value_ = static_cast<ValueType>(value);
   b57f0:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b57f2:	4930      	ldr	r1, [pc, #192]	; (b58b4 <_GLOBAL__sub_I_SystemMode+0x210>)
   b57f4:	f88d 3014 	strb.w	r3, [sp, #20]
   b57f8:	a806      	add	r0, sp, #24
   b57fa:	f001 fb03 	bl	b6e04 <_ZN8particle7BleUuidC1ERKS0_>
   b57fe:	4929      	ldr	r1, [pc, #164]	; (b58a4 <_GLOBAL__sub_I_SystemMode+0x200>)
   b5800:	a80b      	add	r0, sp, #44	; 0x2c
   b5802:	f001 faff 	bl	b6e04 <_ZN8particle7BleUuidC1ERKS0_>
   b5806:	ab0b      	add	r3, sp, #44	; 0x2c
   b5808:	9300      	str	r3, [sp, #0]
   b580a:	aa05      	add	r2, sp, #20
   b580c:	ab06      	add	r3, sp, #24
   b580e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5812:	4936      	ldr	r1, [pc, #216]	; (b58ec <_GLOBAL__sub_I_SystemMode+0x248>)
   b5814:	4836      	ldr	r0, [pc, #216]	; (b58f0 <_GLOBAL__sub_I_SystemMode+0x24c>)
   b5816:	f7ff ff1b 	bl	b5650 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b581a:	4a13      	ldr	r2, [pc, #76]	; (b5868 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b581c:	4935      	ldr	r1, [pc, #212]	; (b58f4 <_GLOBAL__sub_I_SystemMode+0x250>)
   b581e:	4834      	ldr	r0, [pc, #208]	; (b58f0 <_GLOBAL__sub_I_SystemMode+0x24c>)
   b5820:	f003 ffe8 	bl	b97f4 <__aeabi_atexit>
   b5824:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b5826:	4921      	ldr	r1, [pc, #132]	; (b58ac <_GLOBAL__sub_I_SystemMode+0x208>)
   b5828:	f88d 3014 	strb.w	r3, [sp, #20]
   b582c:	a806      	add	r0, sp, #24
   b582e:	f001 fae9 	bl	b6e04 <_ZN8particle7BleUuidC1ERKS0_>
   b5832:	491c      	ldr	r1, [pc, #112]	; (b58a4 <_GLOBAL__sub_I_SystemMode+0x200>)
   b5834:	a80b      	add	r0, sp, #44	; 0x2c
   b5836:	f001 fae5 	bl	b6e04 <_ZN8particle7BleUuidC1ERKS0_>
   b583a:	4b2f      	ldr	r3, [pc, #188]	; (b58f8 <_GLOBAL__sub_I_SystemMode+0x254>)
   b583c:	9301      	str	r3, [sp, #4]
   b583e:	ab0b      	add	r3, sp, #44	; 0x2c
   b5840:	9300      	str	r3, [sp, #0]
   b5842:	aa05      	add	r2, sp, #20
   b5844:	492d      	ldr	r1, [pc, #180]	; (b58fc <_GLOBAL__sub_I_SystemMode+0x258>)
   b5846:	9402      	str	r4, [sp, #8]
   b5848:	ab06      	add	r3, sp, #24
   b584a:	482d      	ldr	r0, [pc, #180]	; (b5900 <_GLOBAL__sub_I_SystemMode+0x25c>)
   b584c:	f7ff ff00 	bl	b5650 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b5850:	4a05      	ldr	r2, [pc, #20]	; (b5868 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5852:	4928      	ldr	r1, [pc, #160]	; (b58f4 <_GLOBAL__sub_I_SystemMode+0x250>)
   b5854:	482a      	ldr	r0, [pc, #168]	; (b5900 <_GLOBAL__sub_I_SystemMode+0x25c>)
}
   b5856:	b010      	add	sp, #64	; 0x40
   b5858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b585c:	f003 bfca 	b.w	b97f4 <__aeabi_atexit>
   b5860:	2003da34 	.word	0x2003da34
   b5864:	ffff0000 	.word	0xffff0000
   b5868:	2003da30 	.word	0x2003da30
   b586c:	000b40df 	.word	0x000b40df
   b5870:	000ba587 	.word	0x000ba587
   b5874:	2003e020 	.word	0x2003e020
   b5878:	2003def8 	.word	0x2003def8
   b587c:	000b85e9 	.word	0x000b85e9
   b5880:	2003e604 	.word	0x2003e604
   b5884:	2003e0e8 	.word	0x2003e0e8
   b5888:	2003e010 	.word	0x2003e010
   b588c:	2003e0b0 	.word	0x2003e0b0
   b5890:	2003da7c 	.word	0x2003da7c
   b5894:	2003e0c8 	.word	0x2003e0c8
   b5898:	000b40ef 	.word	0x000b40ef
   b589c:	00030010 	.word	0x00030010
   b58a0:	000ba827 	.word	0x000ba827
   b58a4:	2003da40 	.word	0x2003da40
   b58a8:	000ba84c 	.word	0x000ba84c
   b58ac:	2003da54 	.word	0x2003da54
   b58b0:	000ba871 	.word	0x000ba871
   b58b4:	2003da68 	.word	0x2003da68
   b58b8:	2003da9c 	.word	0x2003da9c
   b58bc:	000b4171 	.word	0x000b4171
   b58c0:	2003e050 	.word	0x2003e050
   b58c4:	2003e060 	.word	0x2003e060
   b58c8:	2003e078 	.word	0x2003e078
   b58cc:	2003e08c 	.word	0x2003e08c
   b58d0:	000b40c3 	.word	0x000b40c3
   b58d4:	2003e0a0 	.word	0x2003e0a0
   b58d8:	000b40b5 	.word	0x000b40b5
   b58dc:	2003e09c 	.word	0x2003e09c
   b58e0:	2003dee4 	.word	0x2003dee4
   b58e4:	2003deb8 	.word	0x2003deb8
   b58e8:	000b40b3 	.word	0x000b40b3
   b58ec:	000ba896 	.word	0x000ba896
   b58f0:	2003e5fc 	.word	0x2003e5fc
   b58f4:	000b74fb 	.word	0x000b74fb
   b58f8:	000b4dbd 	.word	0x000b4dbd
   b58fc:	000ba899 	.word	0x000ba899
   b5900:	2003e0c0 	.word	0x2003e0c0

000b5904 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b5904:	4770      	bx	lr
	...

000b5908 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   b5908:	b538      	push	{r3, r4, r5, lr}
   b590a:	460c      	mov	r4, r1
   b590c:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b590e:	2220      	movs	r2, #32
   b5910:	2100      	movs	r1, #0
   b5912:	f104 0008 	add.w	r0, r4, #8
   b5916:	f004 fb55 	bl	b9fc4 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   b591a:	220b      	movs	r2, #11
   b591c:	4904      	ldr	r1, [pc, #16]	; (b5930 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x28>)
   b591e:	4620      	mov	r0, r4
   b5920:	f004 fba0 	bl	ba064 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
   b5924:	2301      	movs	r3, #1
   b5926:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id   = _sensorID;
   b5928:	69aa      	ldr	r2, [r5, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   b592a:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sensor->min_delay   = 0;
  sensor->max_value   = 0;
  sensor->min_value   = 0;
  sensor->resolution  = 0;
}
   b592e:	bd38      	pop	{r3, r4, r5, pc}
   b5930:	000ba321 	.word	0x000ba321

000b5934 <_ZN15Adafruit_LIS3DHC1Ev>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   b5934:	4a06      	ldr	r2, [pc, #24]	; (b5950 <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   b5936:	6002      	str	r2, [r0, #0]
   b5938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b593c:	6182      	str	r2, [r0, #24]
   b593e:	7742      	strb	r2, [r0, #29]
   b5940:	83c2      	strh	r2, [r0, #30]
   b5942:	22ff      	movs	r2, #255	; 0xff
   b5944:	f880 2020 	strb.w	r2, [r0, #32]
   b5948:	2208      	movs	r2, #8
   b594a:	6242      	str	r2, [r0, #36]	; 0x24
}
   b594c:	4770      	bx	lr
   b594e:	bf00      	nop
   b5950:	000ba8cc 	.word	0x000ba8cc

000b5954 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5954:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5956:	4c0b      	ldr	r4, [pc, #44]	; (b5984 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5958:	7821      	ldrb	r1, [r4, #0]
   b595a:	f3bf 8f5b 	dmb	ish
   b595e:	f011 0101 	ands.w	r1, r1, #1
   b5962:	d10b      	bne.n	b597c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5964:	4620      	mov	r0, r4
   b5966:	9101      	str	r1, [sp, #4]
   b5968:	f7fe fb9b 	bl	b40a2 <__cxa_guard_acquire>
   b596c:	9901      	ldr	r1, [sp, #4]
   b596e:	b128      	cbz	r0, b597c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5970:	4805      	ldr	r0, [pc, #20]	; (b5988 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5972:	f002 fda5 	bl	b84c0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5976:	4620      	mov	r0, r4
   b5978:	f7fe fb98 	bl	b40ac <__cxa_guard_release>
        return instance;
    }
   b597c:	4802      	ldr	r0, [pc, #8]	; (b5988 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b597e:	b002      	add	sp, #8
   b5980:	bd10      	pop	{r4, pc}
   b5982:	bf00      	nop
   b5984:	2003e624 	.word	0x2003e624
   b5988:	2003e628 	.word	0x2003e628

000b598c <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   b598c:	b508      	push	{r3, lr}
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   b598e:	f7ff ffe1 	bl	b5954 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5992:	2101      	movs	r1, #1
   b5994:	f002 fdb2 	bl	b84fc <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b5998:	f7ff ffdc 	bl	b5954 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b599c:	4905      	ldr	r1, [pc, #20]	; (b59b4 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   b599e:	2201      	movs	r2, #1
   b59a0:	f002 fdea 	bl	b8578 <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
   b59a4:	f7ff ffd6 	bl	b5954 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   b59a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b59ac:	2100      	movs	r1, #0
   b59ae:	f002 bdb9 	b.w	b8524 <_ZN8SPIClass11setDataModeEh>
   b59b2:	bf00      	nop
   b59b4:	0007a120 	.word	0x0007a120

000b59b8 <_ZN15Adafruit_LIS3DH7spixferEh>:
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   b59b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_sck == -1)
   b59bc:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b59c0:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   b59c2:	4605      	mov	r5, r0
   b59c4:	460f      	mov	r7, r1
  if (_sck == -1)
   b59c6:	d106      	bne.n	b59d6 <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b59c8:	f7ff ffc4 	bl	b5954 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b59cc:	4639      	mov	r1, r7
}
   b59ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b59d2:	f002 be03 	b.w	b85dc <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   b59d6:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   b59d8:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   b59da:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   b59de:	f995 0020 	ldrsb.w	r0, [r5, #32]
   b59e2:	2100      	movs	r1, #0
   b59e4:	b280      	uxth	r0, r0
   b59e6:	f003 fe84 	bl	b96f2 <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   b59ea:	f995 001e 	ldrsb.w	r0, [r5, #30]
   b59ee:	fa08 f106 	lsl.w	r1, r8, r6
   b59f2:	4039      	ands	r1, r7
   b59f4:	b280      	uxth	r0, r0
   b59f6:	f003 fe7c 	bl	b96f2 <digitalWrite>
    digitalWrite(_sck, HIGH);
   b59fa:	f995 0020 	ldrsb.w	r0, [r5, #32]
   b59fe:	2101      	movs	r1, #1
   b5a00:	b280      	uxth	r0, r0
   b5a02:	f003 fe76 	bl	b96f2 <digitalWrite>
    if (digitalRead(_miso))
   b5a06:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
   b5a0a:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   b5a0c:	b280      	uxth	r0, r0
    reply <<= 1;
   b5a0e:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   b5a10:	f003 fe88 	bl	b9724 <digitalRead>
   b5a14:	b108      	cbz	r0, b5a1a <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   b5a16:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   b5a1a:	3e01      	subs	r6, #1
   b5a1c:	d2df      	bcs.n	b59de <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
   b5a1e:	4620      	mov	r0, r4
   b5a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5a24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   b5a24:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   b5a26:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5a2a:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   b5a2c:	4604      	mov	r4, r0
   b5a2e:	460e      	mov	r6, r1
   b5a30:	4615      	mov	r5, r2
  if (_cs == -1) {
   b5a32:	d116      	bne.n	b5a62 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   b5a34:	f003 feb6 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b5a38:	7f21      	ldrb	r1, [r4, #28]
   b5a3a:	f002 fb37 	bl	b80ac <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   b5a3e:	f003 feb1 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b5a42:	6803      	ldr	r3, [r0, #0]
   b5a44:	4631      	mov	r1, r6
   b5a46:	689b      	ldr	r3, [r3, #8]
   b5a48:	4798      	blx	r3
    Wire.write((uint8_t)value);
   b5a4a:	f003 feab 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b5a4e:	6803      	ldr	r3, [r0, #0]
   b5a50:	4629      	mov	r1, r5
   b5a52:	689b      	ldr	r3, [r3, #8]
   b5a54:	4798      	blx	r3
    Wire.endTransmission();
   b5a56:	f003 fea5 	bl	b97a4 <_Z19__fetch_global_Wirev>
}
   b5a5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   b5a5e:	f002 bb30 	b.w	b80c2 <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
   b5a62:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b5a66:	3301      	adds	r3, #1
   b5a68:	d101      	bne.n	b5a6e <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   b5a6a:	f7ff ff8f 	bl	b598c <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   b5a6e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5a72:	2100      	movs	r1, #0
   b5a74:	b280      	uxth	r0, r0
   b5a76:	f003 fe3c 	bl	b96f2 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   b5a7a:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b5a7e:	4620      	mov	r0, r4
   b5a80:	f7ff ff9a 	bl	b59b8 <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   b5a84:	4629      	mov	r1, r5
   b5a86:	4620      	mov	r0, r4
   b5a88:	f7ff ff96 	bl	b59b8 <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   b5a8c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5a90:	2101      	movs	r1, #1
}
   b5a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   b5a96:	b280      	uxth	r0, r0
   b5a98:	f003 be2b 	b.w	b96f2 <digitalWrite>

000b5a9c <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   b5a9c:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   b5a9e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5aa2:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   b5aa4:	4604      	mov	r4, r0
   b5aa6:	460d      	mov	r5, r1
  if (_cs == -1) {
   b5aa8:	d11d      	bne.n	b5ae6 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   b5aaa:	f003 fe7b 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b5aae:	f994 101c 	ldrsb.w	r1, [r4, #28]
   b5ab2:	f002 faff 	bl	b80b4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   b5ab6:	f003 fe75 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b5aba:	6803      	ldr	r3, [r0, #0]
   b5abc:	4629      	mov	r1, r5
   b5abe:	689b      	ldr	r3, [r3, #8]
   b5ac0:	4798      	blx	r3
    Wire.endTransmission();
   b5ac2:	f003 fe6f 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b5ac6:	f002 fafc 	bl	b80c2 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
   b5aca:	f003 fe6b 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b5ace:	7f21      	ldrb	r1, [r4, #28]
   b5ad0:	2201      	movs	r2, #1
   b5ad2:	f002 fae8 	bl	b80a6 <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   b5ad6:	f003 fe65 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b5ada:	6803      	ldr	r3, [r0, #0]
   b5adc:	695b      	ldr	r3, [r3, #20]
   b5ade:	4798      	blx	r3
   b5ae0:	b2c5      	uxtb	r5, r0
}
   b5ae2:	4628      	mov	r0, r5
   b5ae4:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
   b5ae6:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b5aea:	3301      	adds	r3, #1
   b5aec:	d101      	bne.n	b5af2 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   b5aee:	f7ff ff4d 	bl	b598c <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
   b5af2:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5af6:	2100      	movs	r1, #0
   b5af8:	b280      	uxth	r0, r0
   b5afa:	f003 fdfa 	bl	b96f2 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   b5afe:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b5b02:	4620      	mov	r0, r4
   b5b04:	f7ff ff58 	bl	b59b8 <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   b5b08:	2100      	movs	r1, #0
   b5b0a:	4620      	mov	r0, r4
   b5b0c:	f7ff ff54 	bl	b59b8 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5b10:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   b5b12:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5b16:	2101      	movs	r1, #1
   b5b18:	b280      	uxth	r0, r0
   b5b1a:	f003 fdea 	bl	b96f2 <digitalWrite>
    if (_sck == -1)
   b5b1e:	e7e0      	b.n	b5ae2 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

000b5b20 <_ZN15Adafruit_LIS3DH8getRangeEv>:
{
   b5b20:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   b5b22:	2123      	movs	r1, #35	; 0x23
   b5b24:	f7ff ffba 	bl	b5a9c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   b5b28:	f3c0 1001 	ubfx	r0, r0, #4, #2
   b5b2c:	bd08      	pop	{r3, pc}

000b5b2e <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
   b5b2e:	b538      	push	{r3, r4, r5, lr}
   b5b30:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   b5b32:	2120      	movs	r1, #32
{
   b5b34:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   b5b36:	f7ff ffb1 	bl	b5a9c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
   b5b3a:	f000 030f 	and.w	r3, r0, #15
  ctl1 |= (dataRate << 4);
   b5b3e:	ea43 1205 	orr.w	r2, r3, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   b5b42:	4620      	mov	r0, r4
   b5b44:	b2d2      	uxtb	r2, r2
}
   b5b46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   b5b4a:	2120      	movs	r1, #32
   b5b4c:	f7ff bf6a 	b.w	b5a24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000b5b50 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
   b5b50:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   b5b52:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5b56:	3301      	adds	r3, #1
void Adafruit_LIS3DH::read(void) {
   b5b58:	4604      	mov	r4, r0
  if (_cs == -1) {
   b5b5a:	d177      	bne.n	b5c4c <_ZN15Adafruit_LIS3DH4readEv+0xfc>
    Wire.beginTransmission(_i2caddr);
   b5b5c:	f003 fe22 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b5b60:	f994 101c 	ldrsb.w	r1, [r4, #28]
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   b5b64:	4d5d      	ldr	r5, [pc, #372]	; (b5cdc <_ZN15Adafruit_LIS3DH4readEv+0x18c>)
    Wire.beginTransmission(_i2caddr);
   b5b66:	f002 faa5 	bl	b80b4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   b5b6a:	f003 fe1b 	bl	b97a4 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5b6e:	6803      	ldr	r3, [r0, #0]
   b5b70:	21a8      	movs	r1, #168	; 0xa8
   b5b72:	689b      	ldr	r3, [r3, #8]
   b5b74:	4798      	blx	r3
    Wire.endTransmission();
   b5b76:	f003 fe15 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b5b7a:	f002 faa2 	bl	b80c2 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
   b5b7e:	f003 fe11 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b5b82:	7f21      	ldrb	r1, [r4, #28]
   b5b84:	2206      	movs	r2, #6
   b5b86:	f002 fa8e 	bl	b80a6 <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   b5b8a:	f003 fe0b 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b5b8e:	6803      	ldr	r3, [r0, #0]
   b5b90:	695b      	ldr	r3, [r3, #20]
   b5b92:	4798      	blx	r3
   b5b94:	80e0      	strh	r0, [r4, #6]
   b5b96:	f003 fe05 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b5b9a:	6803      	ldr	r3, [r0, #0]
   b5b9c:	695b      	ldr	r3, [r3, #20]
   b5b9e:	4798      	blx	r3
   b5ba0:	88e3      	ldrh	r3, [r4, #6]
   b5ba2:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b5ba6:	4318      	orrs	r0, r3
   b5ba8:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   b5baa:	f003 fdfb 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b5bae:	6803      	ldr	r3, [r0, #0]
   b5bb0:	695b      	ldr	r3, [r3, #20]
   b5bb2:	4798      	blx	r3
   b5bb4:	8120      	strh	r0, [r4, #8]
   b5bb6:	f003 fdf5 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b5bba:	6803      	ldr	r3, [r0, #0]
   b5bbc:	695b      	ldr	r3, [r3, #20]
   b5bbe:	4798      	blx	r3
   b5bc0:	8923      	ldrh	r3, [r4, #8]
   b5bc2:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b5bc6:	4318      	orrs	r0, r3
   b5bc8:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   b5bca:	f003 fdeb 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b5bce:	6803      	ldr	r3, [r0, #0]
   b5bd0:	695b      	ldr	r3, [r3, #20]
   b5bd2:	4798      	blx	r3
   b5bd4:	8160      	strh	r0, [r4, #10]
   b5bd6:	f003 fde5 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b5bda:	6803      	ldr	r3, [r0, #0]
   b5bdc:	695b      	ldr	r3, [r3, #20]
   b5bde:	4798      	blx	r3
   b5be0:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b5be4:	8965      	ldrh	r5, [r4, #10]
   b5be6:	4328      	orrs	r0, r5
   b5be8:	8160      	strh	r0, [r4, #10]
  uint8_t range = getRange();
   b5bea:	4620      	mov	r0, r4
   b5bec:	f7ff ff98 	bl	b5b20 <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   b5bf0:	2803      	cmp	r0, #3
   b5bf2:	d069      	beq.n	b5cc8 <_ZN15Adafruit_LIS3DH4readEv+0x178>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   b5bf4:	2802      	cmp	r0, #2
   b5bf6:	d06a      	beq.n	b5cce <_ZN15Adafruit_LIS3DH4readEv+0x17e>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   b5bf8:	2801      	cmp	r0, #1
   b5bfa:	d06b      	beq.n	b5cd4 <_ZN15Adafruit_LIS3DH4readEv+0x184>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   b5bfc:	2800      	cmp	r0, #0
   b5bfe:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   b5c02:	bf18      	it	ne
   b5c04:	2301      	movne	r3, #1
  x_g = (float)x / divider;
   b5c06:	ee07 3a90 	vmov	s15, r3
   b5c0a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   b5c0e:	ee07 3a10 	vmov	s14, r3
   b5c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5c16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   b5c1a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  x_g = (float)x / divider;
   b5c1e:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   b5c22:	ee07 3a10 	vmov	s14, r3
   b5c26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_g = (float)x / divider;
   b5c2a:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   b5c2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   b5c32:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5c36:	ee07 3a10 	vmov	s14, r3
   b5c3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   b5c3e:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   b5c42:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b5c46:	edc4 6a05 	vstr	s13, [r4, #20]
}
   b5c4a:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
   b5c4c:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b5c50:	3301      	adds	r3, #1
   b5c52:	d101      	bne.n	b5c58 <_ZN15Adafruit_LIS3DH4readEv+0x108>
      beginTransaction();
   b5c54:	f7ff fe9a 	bl	b598c <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   b5c58:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5c5c:	2100      	movs	r1, #0
   b5c5e:	b280      	uxth	r0, r0
   b5c60:	f003 fd47 	bl	b96f2 <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   b5c64:	21e8      	movs	r1, #232	; 0xe8
   b5c66:	4620      	mov	r0, r4
   b5c68:	f7ff fea6 	bl	b59b8 <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   b5c6c:	21ff      	movs	r1, #255	; 0xff
   b5c6e:	4620      	mov	r0, r4
   b5c70:	f7ff fea2 	bl	b59b8 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5c74:	21ff      	movs	r1, #255	; 0xff
   b5c76:	80e0      	strh	r0, [r4, #6]
   b5c78:	4620      	mov	r0, r4
   b5c7a:	f7ff fe9d 	bl	b59b8 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5c7e:	88e3      	ldrh	r3, [r4, #6]
   b5c80:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b5c84:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   b5c86:	21ff      	movs	r1, #255	; 0xff
   b5c88:	4620      	mov	r0, r4
   b5c8a:	f7ff fe95 	bl	b59b8 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5c8e:	21ff      	movs	r1, #255	; 0xff
   b5c90:	8120      	strh	r0, [r4, #8]
   b5c92:	4620      	mov	r0, r4
   b5c94:	f7ff fe90 	bl	b59b8 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5c98:	8923      	ldrh	r3, [r4, #8]
   b5c9a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b5c9e:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   b5ca0:	21ff      	movs	r1, #255	; 0xff
   b5ca2:	4620      	mov	r0, r4
   b5ca4:	f7ff fe88 	bl	b59b8 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5ca8:	21ff      	movs	r1, #255	; 0xff
   b5caa:	8160      	strh	r0, [r4, #10]
   b5cac:	4620      	mov	r0, r4
   b5cae:	f7ff fe83 	bl	b59b8 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5cb2:	8963      	ldrh	r3, [r4, #10]
   b5cb4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b5cb8:	8160      	strh	r0, [r4, #10]
    digitalWrite(_cs, HIGH);
   b5cba:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5cbe:	2101      	movs	r1, #1
   b5cc0:	b280      	uxth	r0, r0
   b5cc2:	f003 fd16 	bl	b96f2 <digitalWrite>
    if (_sck == -1)
   b5cc6:	e790      	b.n	b5bea <_ZN15Adafruit_LIS3DH4readEv+0x9a>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   b5cc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   b5ccc:	e79b      	b.n	b5c06 <_ZN15Adafruit_LIS3DH4readEv+0xb6>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   b5cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   b5cd2:	e798      	b.n	b5c06 <_ZN15Adafruit_LIS3DH4readEv+0xb6>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   b5cd4:	f641 73fe 	movw	r3, #8190	; 0x1ffe
   b5cd8:	e795      	b.n	b5c06 <_ZN15Adafruit_LIS3DH4readEv+0xb6>
   b5cda:	bf00      	nop
   b5cdc:	00ffff00 	.word	0x00ffff00

000b5ce0 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   b5ce0:	b570      	push	{r4, r5, r6, lr}
   b5ce2:	460c      	mov	r4, r1
   b5ce4:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b5ce6:	2220      	movs	r2, #32
   b5ce8:	2100      	movs	r1, #0
   b5cea:	1d20      	adds	r0, r4, #4
   b5cec:	f004 f96a 	bl	b9fc4 <memset>
  event->version   = sizeof(sensors_event_t);
   b5cf0:	2324      	movs	r3, #36	; 0x24
   b5cf2:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b5cf4:	69ab      	ldr	r3, [r5, #24]
   b5cf6:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   b5cf8:	2601      	movs	r6, #1
  read();
   b5cfa:	4628      	mov	r0, r5
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   b5cfc:	60a6      	str	r6, [r4, #8]
  read();
   b5cfe:	f7ff ff27 	bl	b5b50 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
   b5d02:	68eb      	ldr	r3, [r5, #12]
   b5d04:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   b5d06:	692b      	ldr	r3, [r5, #16]
   b5d08:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   b5d0a:	696b      	ldr	r3, [r5, #20]
   b5d0c:	61e3      	str	r3, [r4, #28]
}
   b5d0e:	4630      	mov	r0, r6
   b5d10:	bd70      	pop	{r4, r5, r6, pc}

000b5d12 <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   b5d12:	b510      	push	{r4, lr}
   b5d14:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   b5d16:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
   b5d18:	f990 001d 	ldrsb.w	r0, [r0, #29]
   b5d1c:	1c42      	adds	r2, r0, #1
   b5d1e:	d123      	bne.n	b5d68 <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
   b5d20:	f003 fd40 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b5d24:	f002 f990 	bl	b8048 <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   b5d28:	210f      	movs	r1, #15
   b5d2a:	4620      	mov	r0, r4
   b5d2c:	f7ff feb6 	bl	b5a9c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   b5d30:	2833      	cmp	r0, #51	; 0x33
   b5d32:	d13d      	bne.n	b5db0 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   b5d34:	2207      	movs	r2, #7
   b5d36:	2120      	movs	r1, #32
   b5d38:	4620      	mov	r0, r4
   b5d3a:	f7ff fe73 	bl	b5a24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
   b5d3e:	2107      	movs	r1, #7
   b5d40:	4620      	mov	r0, r4
   b5d42:	f7ff fef4 	bl	b5b2e <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   b5d46:	2288      	movs	r2, #136	; 0x88
   b5d48:	2123      	movs	r1, #35	; 0x23
   b5d4a:	4620      	mov	r0, r4
   b5d4c:	f7ff fe6a 	bl	b5a24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   b5d50:	2210      	movs	r2, #16
   b5d52:	2122      	movs	r1, #34	; 0x22
   b5d54:	4620      	mov	r0, r4
   b5d56:	f7ff fe65 	bl	b5a24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   b5d5a:	4620      	mov	r0, r4
   b5d5c:	2280      	movs	r2, #128	; 0x80
   b5d5e:	211f      	movs	r1, #31
   b5d60:	f7ff fe60 	bl	b5a24 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
   b5d64:	2001      	movs	r0, #1
}
   b5d66:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   b5d68:	2101      	movs	r1, #1
   b5d6a:	b280      	uxth	r0, r0
   b5d6c:	f003 fcc1 	bl	b96f2 <digitalWrite>
    pinMode(_cs, OUTPUT);
   b5d70:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5d74:	2101      	movs	r1, #1
   b5d76:	b280      	uxth	r0, r0
   b5d78:	f003 fcaa 	bl	b96d0 <pinMode>
    if (_sck == -1) {
   b5d7c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5d80:	1c43      	adds	r3, r0, #1
   b5d82:	d104      	bne.n	b5d8e <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
   b5d84:	f7ff fde6 	bl	b5954 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5d88:	f002 fba4 	bl	b84d4 <_ZN8SPIClass5beginEv>
    }
   b5d8c:	e7cc      	b.n	b5d28 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
   b5d8e:	2101      	movs	r1, #1
   b5d90:	b280      	uxth	r0, r0
   b5d92:	f003 fc9d 	bl	b96d0 <pinMode>
      pinMode(_mosi, OUTPUT);
   b5d96:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b5d9a:	2101      	movs	r1, #1
   b5d9c:	b280      	uxth	r0, r0
   b5d9e:	f003 fc97 	bl	b96d0 <pinMode>
      pinMode(_miso, INPUT);
   b5da2:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5da6:	2100      	movs	r1, #0
   b5da8:	b280      	uxth	r0, r0
   b5daa:	f003 fc91 	bl	b96d0 <pinMode>
   b5dae:	e7bb      	b.n	b5d28 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
   b5db0:	2000      	movs	r0, #0
   b5db2:	e7d8      	b.n	b5d66 <_ZN15Adafruit_LIS3DH5beginEh+0x54>

000b5db4 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
size_t Print::print(T n, int base)
   b5db4:	b570      	push	{r4, r5, r6, lr}
        if (n < 0 && base == 10) {
   b5db6:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b5db8:	4606      	mov	r6, r0
   b5dba:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b5dbc:	da0b      	bge.n	b5dd6 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b5dbe:	2a0a      	cmp	r2, #10
   b5dc0:	d109      	bne.n	b5dd6 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b5dc2:	212d      	movs	r1, #45	; 0x2d
   b5dc4:	f002 faf4 	bl	b83b0 <_ZN5Print5printEc>
            val = -n;
   b5dc8:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b5dca:	b2ea      	uxtb	r2, r5
   b5dcc:	4630      	mov	r0, r6
    }
}
   b5dce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b5dd2:	f002 bb0c 	b.w	b83ee <_ZN5Print11printNumberEmh>
            val = n;
   b5dd6:	4621      	mov	r1, r4
   b5dd8:	e7f7      	b.n	b5dca <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b5dda <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b5dda:	b510      	push	{r4, lr}
   b5ddc:	4604      	mov	r4, r0
   b5dde:	f003 f91f 	bl	b9020 <_ZN9TCPClientC1Ev>
{

}
   b5de2:	4620      	mov	r0, r4
   b5de4:	bd10      	pop	{r4, pc}
	...

000b5de8 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b5de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   b5dea:	4f0f      	ldr	r7, [pc, #60]	; (b5e28 <_ZN10HttpClient10sendHeaderEPKcS1_+0x40>)
{
   b5dec:	4605      	mov	r5, r0
   b5dee:	4614      	mov	r4, r2
   b5df0:	460e      	mov	r6, r1
    client.print(aHeaderName);
   b5df2:	f002 fad9 	bl	b83a8 <_ZN5Print5printEPKc>
    client.print(": ");
   b5df6:	4639      	mov	r1, r7
   b5df8:	4628      	mov	r0, r5
   b5dfa:	f002 fad5 	bl	b83a8 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b5dfe:	4621      	mov	r1, r4
   b5e00:	4628      	mov	r0, r5
   b5e02:	f002 faea 	bl	b83da <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.print(aHeaderName);
   b5e06:	f003 fa7d 	bl	b9304 <_Z16_fetch_usbserialv>
   b5e0a:	4631      	mov	r1, r6
   b5e0c:	f002 facc 	bl	b83a8 <_ZN5Print5printEPKc>
    Serial.print(": ");
   b5e10:	f003 fa78 	bl	b9304 <_Z16_fetch_usbserialv>
   b5e14:	4639      	mov	r1, r7
   b5e16:	f002 fac7 	bl	b83a8 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   b5e1a:	f003 fa73 	bl	b9304 <_Z16_fetch_usbserialv>
   b5e1e:	4621      	mov	r1, r4
    #endif
}
   b5e20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(aHeaderValue);
   b5e24:	f002 bad9 	b.w	b83da <_ZN5Print7printlnEPKc>
   b5e28:	000ba538 	.word	0x000ba538

000b5e2c <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b5e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   b5e2e:	4f14      	ldr	r7, [pc, #80]	; (b5e80 <_ZN10HttpClient10sendHeaderEPKci+0x54>)
{
   b5e30:	4604      	mov	r4, r0
   b5e32:	4615      	mov	r5, r2
   b5e34:	460e      	mov	r6, r1
    client.print(aHeaderName);
   b5e36:	f002 fab7 	bl	b83a8 <_ZN5Print5printEPKc>
    client.print(": ");
   b5e3a:	4639      	mov	r1, r7
   b5e3c:	4620      	mov	r0, r4
   b5e3e:	f002 fab3 	bl	b83a8 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b5e42:	220a      	movs	r2, #10
   b5e44:	4629      	mov	r1, r5
   b5e46:	4620      	mov	r0, r4
   b5e48:	f7ff ffb4 	bl	b5db4 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b5e4c:	4620      	mov	r0, r4
   b5e4e:	f002 fab8 	bl	b83c2 <_ZN5Print7printlnEv>
    client.println(aHeaderValue);

    #ifdef LOGGING
    Serial.print(aHeaderName);
   b5e52:	f003 fa57 	bl	b9304 <_Z16_fetch_usbserialv>
   b5e56:	4631      	mov	r1, r6
   b5e58:	f002 faa6 	bl	b83a8 <_ZN5Print5printEPKc>
    Serial.print(": ");
   b5e5c:	f003 fa52 	bl	b9304 <_Z16_fetch_usbserialv>
   b5e60:	4639      	mov	r1, r7
   b5e62:	f002 faa1 	bl	b83a8 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   b5e66:	f003 fa4d 	bl	b9304 <_Z16_fetch_usbserialv>
   b5e6a:	4629      	mov	r1, r5
   b5e6c:	4604      	mov	r4, r0
size_t Print::print(T n, int base)
   b5e6e:	220a      	movs	r2, #10
   b5e70:	f7ff ffa0 	bl	b5db4 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b5e74:	4620      	mov	r0, r4
    #endif
}
   b5e76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5e7a:	f002 baa2 	b.w	b83c2 <_ZN5Print7printlnEv>
   b5e7e:	bf00      	nop
   b5e80:	000ba538 	.word	0x000ba538

000b5e84 <_ZN10HttpClient10sendHeaderEPKc>:

void HttpClient::sendHeader(const char* aHeaderName)
{
   b5e84:	b510      	push	{r4, lr}
   b5e86:	460c      	mov	r4, r1
    client.println(aHeaderName);
   b5e88:	f002 faa7 	bl	b83da <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.println(aHeaderName);
   b5e8c:	f003 fa3a 	bl	b9304 <_Z16_fetch_usbserialv>
   b5e90:	4621      	mov	r1, r4
    #endif
}
   b5e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(aHeaderName);
   b5e96:	f002 baa0 	b.w	b83da <_ZN5Print7printlnEPKc>
	...

000b5e9c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b5e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ea0:	460e      	mov	r6, r1
   b5ea2:	b091      	sub	sp, #68	; 0x44
   b5ea4:	461f      	mov	r7, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b5ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5eaa:	6013      	str	r3, [r2, #0]
{
   b5eac:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5eae:	2100      	movs	r1, #0
   b5eb0:	4630      	mov	r0, r6
   b5eb2:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b5eb6:	4690      	mov	r8, r2
   b5eb8:	f002 fcab 	bl	b8812 <_ZNK6String6equalsEPKc>
   b5ebc:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b5ec0:	4603      	mov	r3, r0
   b5ec2:	b9c0      	cbnz	r0, b5ef6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x5a>
	const char * c_str() const { return buffer; }
   b5ec4:	f1be 0f00 	cmp.w	lr, #0
   b5ec8:	bf14      	ite	ne
   b5eca:	4672      	movne	r2, lr
   b5ecc:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b5ece:	6831      	ldr	r1, [r6, #0]
   b5ed0:	b292      	uxth	r2, r2
   b5ed2:	4620      	mov	r0, r4
   b5ed4:	f002 fea4 	bl	b8c20 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b5ed8:	1e05      	subs	r5, r0, #0
   b5eda:	bf18      	it	ne
   b5edc:	2501      	movne	r5, #1
    }

    #ifdef LOGGING
    if (connected) {
   b5ede:	b9ed      	cbnz	r5, b5f1c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x80>
            Serial.print(aRequest.ip);
        }
        Serial.print(":");
        Serial.println(aRequest.port);
    } else {
        Serial.println("HttpClient>\tConnection failed.");
   b5ee0:	f003 fa10 	bl	b9304 <_Z16_fetch_usbserialv>
   b5ee4:	49be      	ldr	r1, [pc, #760]	; (b61e0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x344>)
   b5ee6:	f002 fa78 	bl	b83da <_ZN5Print7printlnEPKc>
    }
    #endif

    if (!connected) {
        client.stop();
   b5eea:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b5eec:	b011      	add	sp, #68	; 0x44
   b5eee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b5ef2:	f003 b84b 	b.w	b8f8c <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b5ef6:	4bbb      	ldr	r3, [pc, #748]	; (b61e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x348>)
   b5ef8:	930a      	str	r3, [sp, #40]	; 0x28
   b5efa:	f106 0c14 	add.w	ip, r6, #20
   b5efe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5f02:	ad0b      	add	r5, sp, #44	; 0x2c
   b5f04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5f06:	f8dc 3000 	ldr.w	r3, [ip]
   b5f0a:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b5f0c:	fa1f f28e 	uxth.w	r2, lr
   b5f10:	2300      	movs	r3, #0
   b5f12:	a90a      	add	r1, sp, #40	; 0x28
   b5f14:	4620      	mov	r0, r4
   b5f16:	f002 ff63 	bl	b8de0 <_ZN9TCPClient7connectE9IPAddresstm>
   b5f1a:	e7dd      	b.n	b5ed8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5f1c:	2100      	movs	r1, #0
   b5f1e:	4630      	mov	r0, r6
   b5f20:	f002 fc77 	bl	b8812 <_ZNK6String6equalsEPKc>
        if(aRequest.hostname!=NULL) {
   b5f24:	2800      	cmp	r0, #0
   b5f26:	d15d      	bne.n	b5fe4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x148>
            Serial.print("HttpClient>\tConnecting to: ");
   b5f28:	f003 f9ec 	bl	b9304 <_Z16_fetch_usbserialv>
   b5f2c:	49ae      	ldr	r1, [pc, #696]	; (b61e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x34c>)
   b5f2e:	f002 fa3b 	bl	b83a8 <_ZN5Print5printEPKc>
            Serial.print(aRequest.hostname);
   b5f32:	f003 f9e7 	bl	b9304 <_Z16_fetch_usbserialv>
   b5f36:	6831      	ldr	r1, [r6, #0]
   b5f38:	f002 fa36 	bl	b83a8 <_ZN5Print5printEPKc>
        Serial.print(":");
   b5f3c:	f003 f9e2 	bl	b9304 <_Z16_fetch_usbserialv>
   b5f40:	49aa      	ldr	r1, [pc, #680]	; (b61ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   b5f42:	f002 fa31 	bl	b83a8 <_ZN5Print5printEPKc>
        Serial.println(aRequest.port);
   b5f46:	f003 f9dd 	bl	b9304 <_Z16_fetch_usbserialv>
   b5f4a:	220a      	movs	r2, #10
   b5f4c:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   b5f4e:	4682      	mov	sl, r0
size_t Print::print(T n, int base)
   b5f50:	f7ff ff30 	bl	b5db4 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b5f54:	4650      	mov	r0, sl
   b5f56:	f002 fa34 	bl	b83c2 <_ZN5Print7printlnEv>
    client.print(aHttpMethod);
   b5f5a:	4649      	mov	r1, r9
   b5f5c:	4620      	mov	r0, r4
   b5f5e:	f002 fa23 	bl	b83a8 <_ZN5Print5printEPKc>
    client.print(" ");
   b5f62:	49a3      	ldr	r1, [pc, #652]	; (b61f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   b5f64:	4620      	mov	r0, r4
   b5f66:	f002 fa1f 	bl	b83a8 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b5f6a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b5f6c:	4620      	mov	r0, r4
   b5f6e:	f002 fa1b 	bl	b83a8 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b5f72:	49a0      	ldr	r1, [pc, #640]	; (b61f4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   b5f74:	4620      	mov	r0, r4
   b5f76:	f002 fa17 	bl	b83a8 <_ZN5Print5printEPKc>
    Serial.println("HttpClient>\tStart of HTTP Request.");
   b5f7a:	f003 f9c3 	bl	b9304 <_Z16_fetch_usbserialv>
   b5f7e:	499e      	ldr	r1, [pc, #632]	; (b61f8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x35c>)
   b5f80:	f002 fa2b 	bl	b83da <_ZN5Print7printlnEPKc>
    Serial.print(aHttpMethod);
   b5f84:	f003 f9be 	bl	b9304 <_Z16_fetch_usbserialv>
   b5f88:	4649      	mov	r1, r9
   b5f8a:	f002 fa0d 	bl	b83a8 <_ZN5Print5printEPKc>
    Serial.print(" ");
   b5f8e:	f003 f9b9 	bl	b9304 <_Z16_fetch_usbserialv>
   b5f92:	4997      	ldr	r1, [pc, #604]	; (b61f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   b5f94:	f002 fa08 	bl	b83a8 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
   b5f98:	f003 f9b4 	bl	b9304 <_Z16_fetch_usbserialv>
   b5f9c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b5f9e:	f002 fa03 	bl	b83a8 <_ZN5Print5printEPKc>
    Serial.print(" HTTP/1.0\r\n");
   b5fa2:	f003 f9af 	bl	b9304 <_Z16_fetch_usbserialv>
   b5fa6:	4993      	ldr	r1, [pc, #588]	; (b61f4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   b5fa8:	f002 f9fe 	bl	b83a8 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b5fac:	4993      	ldr	r1, [pc, #588]	; (b61fc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x360>)
   b5fae:	4a94      	ldr	r2, [pc, #592]	; (b6200 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x364>)
   b5fb0:	4620      	mov	r0, r4
   b5fb2:	f7ff ff19 	bl	b5de8 <_ZN10HttpClient10sendHeaderEPKcS1_>
   b5fb6:	2100      	movs	r1, #0
   b5fb8:	4630      	mov	r0, r6
   b5fba:	f002 fc2a 	bl	b8812 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b5fbe:	b920      	cbnz	r0, b5fca <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x12e>
        sendHeader("HOST", aRequest.hostname.c_str());
   b5fc0:	6832      	ldr	r2, [r6, #0]
   b5fc2:	4990      	ldr	r1, [pc, #576]	; (b6204 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x368>)
   b5fc4:	4620      	mov	r0, r4
   b5fc6:	f7ff ff0f 	bl	b5de8 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b5fca:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b5fce:	2100      	movs	r1, #0
   b5fd0:	4650      	mov	r0, sl
   b5fd2:	f002 fc1e 	bl	b8812 <_ZNK6String6equalsEPKc>
   b5fd6:	b988      	cbnz	r0, b5ffc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x160>
        sendHeader("Content-Length", (aRequest.body).length());
   b5fd8:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b5fda:	498b      	ldr	r1, [pc, #556]	; (b6208 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x36c>)
   b5fdc:	4620      	mov	r0, r4
   b5fde:	f7ff ff25 	bl	b5e2c <_ZN10HttpClient10sendHeaderEPKci>
   b5fe2:	e012      	b.n	b600a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16e>
            Serial.print("HttpClient>\tConnecting to IP: ");
   b5fe4:	f003 f98e 	bl	b9304 <_Z16_fetch_usbserialv>
   b5fe8:	4988      	ldr	r1, [pc, #544]	; (b620c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x370>)
   b5fea:	f002 f9dd 	bl	b83a8 <_ZN5Print5printEPKc>
            Serial.print(aRequest.ip);
   b5fee:	f003 f989 	bl	b9304 <_Z16_fetch_usbserialv>
   b5ff2:	f106 0110 	add.w	r1, r6, #16
   b5ff6:	f002 f9de 	bl	b83b6 <_ZN5Print5printERK9Printable>
   b5ffa:	e79f      	b.n	b5f3c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xa0>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b5ffc:	4984      	ldr	r1, [pc, #528]	; (b6210 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x374>)
   b5ffe:	4648      	mov	r0, r9
   b6000:	f004 f816 	bl	ba030 <strcmp>
   b6004:	4602      	mov	r2, r0
   b6006:	2800      	cmp	r0, #0
   b6008:	d0e7      	beq.n	b5fda <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x13e>
    if (headers != NULL)
   b600a:	b15f      	cbz	r7, b6024 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x188>
        while (headers[i].header != NULL)
   b600c:	6839      	ldr	r1, [r7, #0]
   b600e:	b149      	cbz	r1, b6024 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x188>
            if (headers[i].value != NULL) {
   b6010:	687a      	ldr	r2, [r7, #4]
                sendHeader(headers[i].header, headers[i].value);
   b6012:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b6014:	b11a      	cbz	r2, b601e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
                sendHeader(headers[i].header, headers[i].value);
   b6016:	f7ff fee7 	bl	b5de8 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b601a:	3708      	adds	r7, #8
        while (headers[i].header != NULL)
   b601c:	e7f6      	b.n	b600c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
                sendHeader(headers[i].header);
   b601e:	f7ff ff31 	bl	b5e84 <_ZN10HttpClient10sendHeaderEPKc>
   b6022:	e7fa      	b.n	b601a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17e>
    client.println();
   b6024:	4620      	mov	r0, r4
   b6026:	f002 f9cc 	bl	b83c2 <_ZN5Print7printlnEv>
    client.flush();
   b602a:	4620      	mov	r0, r4
   b602c:	f002 fd58 	bl	b8ae0 <_ZN9TCPClient5flushEv>
   b6030:	2100      	movs	r1, #0
   b6032:	4650      	mov	r0, sl
   b6034:	f002 fbed 	bl	b8812 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b6038:	b940      	cbnz	r0, b604c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b0>
        client.println(aRequest.body);
   b603a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b603c:	4620      	mov	r0, r4
   b603e:	f002 f9cc 	bl	b83da <_ZN5Print7printlnEPKc>
        Serial.println(aRequest.body);
   b6042:	f003 f95f 	bl	b9304 <_Z16_fetch_usbserialv>
   b6046:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b6048:	f002 f9c7 	bl	b83da <_ZN5Print7printlnEPKc>
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   b604c:	f003 f95a 	bl	b9304 <_Z16_fetch_usbserialv>
    memset(&buffer[0], 0, sizeof(buffer));
   b6050:	f104 0a1c 	add.w	sl, r4, #28
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   b6054:	496f      	ldr	r1, [pc, #444]	; (b6214 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x378>)
   b6056:	f002 f9c0 	bl	b83da <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b605a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b605e:	2100      	movs	r1, #0
   b6060:	4650      	mov	r0, sl
   b6062:	f003 ffaf 	bl	b9fc4 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6066:	f000 f9df 	bl	b6428 <HAL_Timer_Get_Milli_Seconds>
   b606a:	9000      	str	r0, [sp, #0]
   b606c:	f000 f9dc 	bl	b6428 <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
   b6070:	2600      	movs	r6, #0
   b6072:	9001      	str	r0, [sp, #4]
        int bytes = client.available();
   b6074:	4620      	mov	r0, r4
   b6076:	f002 ff2f 	bl	b8ed8 <_ZN9TCPClient9availableEv>
        if(bytes) {
   b607a:	4681      	mov	r9, r0
   b607c:	b178      	cbz	r0, b609e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x202>
            Serial.print("\r\nHttpClient>\tReceiving TCP transaction of ");
   b607e:	f003 f941 	bl	b9304 <_Z16_fetch_usbserialv>
   b6082:	4965      	ldr	r1, [pc, #404]	; (b6218 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x37c>)
   b6084:	f002 f990 	bl	b83a8 <_ZN5Print5printEPKc>
            Serial.print(bytes);
   b6088:	f003 f93c 	bl	b9304 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   b608c:	4649      	mov	r1, r9
   b608e:	220a      	movs	r2, #10
   b6090:	f7ff fe90 	bl	b5db4 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
            Serial.println(" bytes.");
   b6094:	f003 f936 	bl	b9304 <_Z16_fetch_usbserialv>
   b6098:	4960      	ldr	r1, [pc, #384]	; (b621c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x380>)
   b609a:	f002 f99e 	bl	b83da <_ZN5Print7printlnEPKc>
    unsigned int bufferPosition = 0;
   b609e:	f04f 0b00 	mov.w	fp, #0
        while (client.available()) {
   b60a2:	4620      	mov	r0, r4
   b60a4:	f002 ff18 	bl	b8ed8 <_ZN9TCPClient9availableEv>
   b60a8:	b320      	cbz	r0, b60f4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x258>
            char c = client.read();
   b60aa:	4620      	mov	r0, r4
   b60ac:	f002 fcfe 	bl	b8aac <_ZN9TCPClient4readEv>
   b60b0:	b2c7      	uxtb	r7, r0
            Serial.print(c);
   b60b2:	f003 f927 	bl	b9304 <_Z16_fetch_usbserialv>
   b60b6:	4639      	mov	r1, r7
   b60b8:	f002 f97a 	bl	b83b0 <_ZN5Print5printEc>
   b60bc:	f000 f9b4 	bl	b6428 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b60c0:	f240 33fe 	movw	r3, #1022	; 0x3fe
   b60c4:	429e      	cmp	r6, r3
   b60c6:	9000      	str	r0, [sp, #0]
   b60c8:	d803      	bhi.n	b60d2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x236>
                buffer[bufferPosition] = c;
   b60ca:	f80a 7006 	strb.w	r7, [sl, r6]
            bufferPosition++;
   b60ce:	3601      	adds	r6, #1
        while (client.available()) {
   b60d0:	e7e7      	b.n	b60a2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x206>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b60d2:	f240 33ff 	movw	r3, #1023	; 0x3ff
   b60d6:	429e      	cmp	r6, r3
   b60d8:	d1f9      	bne.n	b60ce <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x232>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b60da:	2300      	movs	r3, #0
   b60dc:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   b60e0:	4620      	mov	r0, r4
   b60e2:	f002 ff53 	bl	b8f8c <_ZN9TCPClient4stopEv>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
   b60e6:	f003 f90d 	bl	b9304 <_Z16_fetch_usbserialv>
   b60ea:	494d      	ldr	r1, [pc, #308]	; (b6220 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x384>)
   b60ec:	f002 f975 	bl	b83da <_ZN5Print7printlnEPKc>
                error = true;
   b60f0:	46ab      	mov	fp, r5
   b60f2:	e7ec      	b.n	b60ce <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x232>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b60f4:	19a3      	adds	r3, r4, r6
   b60f6:	7718      	strb	r0, [r3, #28]
        if (bytes) {
   b60f8:	f1b9 0f00 	cmp.w	r9, #0
   b60fc:	d004      	beq.n	b6108 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x26c>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
   b60fe:	f003 f901 	bl	b9304 <_Z16_fetch_usbserialv>
   b6102:	4948      	ldr	r1, [pc, #288]	; (b6224 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x388>)
   b6104:	f002 f950 	bl	b83a8 <_ZN5Print5printEPKc>
   b6108:	f000 f98e 	bl	b6428 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b610c:	9b00      	ldr	r3, [sp, #0]
   b610e:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b6112:	f1bb 0f00 	cmp.w	fp, #0
   b6116:	d106      	bne.n	b6126 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x28a>
   b6118:	f241 3388 	movw	r3, #5000	; 0x1388
   b611c:	4599      	cmp	r9, r3
   b611e:	d802      	bhi.n	b6126 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x28a>
            delay(200);
   b6120:	20c8      	movs	r0, #200	; 0xc8
   b6122:	f000 fcc9 	bl	b6ab8 <delay>
    } while (client.connected() && !timeout && !error);
   b6126:	4620      	mov	r0, r4
   b6128:	f002 fdf8 	bl	b8d1c <_ZN9TCPClient9connectedEv>
   b612c:	f241 3388 	movw	r3, #5000	; 0x1388
   b6130:	2800      	cmp	r0, #0
   b6132:	d04c      	beq.n	b61ce <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x332>
   b6134:	4599      	cmp	r9, r3
   b6136:	d84c      	bhi.n	b61d2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x336>
   b6138:	f1bb 0f00 	cmp.w	fp, #0
   b613c:	d09a      	beq.n	b6074 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d8>
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
   b613e:	f003 f8e1 	bl	b9304 <_Z16_fetch_usbserialv>
   b6142:	4939      	ldr	r1, [pc, #228]	; (b6228 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x38c>)
   b6144:	f002 f930 	bl	b83a8 <_ZN5Print5printEPKc>
    Serial.print(millis() - firstRead);
   b6148:	f003 f8dc 	bl	b9304 <_Z16_fetch_usbserialv>
   b614c:	4605      	mov	r5, r0
   b614e:	f000 f96b 	bl	b6428 <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   b6152:	9b01      	ldr	r3, [sp, #4]
   b6154:	220a      	movs	r2, #10
   b6156:	1ac1      	subs	r1, r0, r3
   b6158:	4628      	mov	r0, r5
   b615a:	f002 f948 	bl	b83ee <_ZN5Print11printNumberEmh>
    Serial.println("ms).");
   b615e:	f003 f8d1 	bl	b9304 <_Z16_fetch_usbserialv>
   b6162:	4932      	ldr	r1, [pc, #200]	; (b622c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x390>)
   b6164:	f002 f939 	bl	b83da <_ZN5Print7printlnEPKc>
    client.stop();
   b6168:	4620      	mov	r0, r4
   b616a:	f002 ff0f 	bl	b8f8c <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b616e:	4651      	mov	r1, sl
   b6170:	a802      	add	r0, sp, #8
   b6172:	f002 fa84 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b6176:	230c      	movs	r3, #12
   b6178:	2209      	movs	r2, #9
   b617a:	a902      	add	r1, sp, #8
   b617c:	a806      	add	r0, sp, #24
   b617e:	f002 fb6d 	bl	b885c <_ZNK6String9substringEjj>
    Serial.print("HttpClient>\tStatus Code: ");
   b6182:	f003 f8bf 	bl	b9304 <_Z16_fetch_usbserialv>
   b6186:	492a      	ldr	r1, [pc, #168]	; (b6230 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x394>)
   b6188:	f002 f90e 	bl	b83a8 <_ZN5Print5printEPKc>
    Serial.println(statusCode);
   b618c:	f003 f8ba 	bl	b9304 <_Z16_fetch_usbserialv>
   b6190:	9906      	ldr	r1, [sp, #24]
   b6192:	f002 f922 	bl	b83da <_ZN5Print7printlnEPKc>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b6196:	4927      	ldr	r1, [pc, #156]	; (b6234 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x398>)
   b6198:	a80a      	add	r0, sp, #40	; 0x28
   b619a:	f002 fa70 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
   b619e:	a90a      	add	r1, sp, #40	; 0x28
   b61a0:	a802      	add	r0, sp, #8
   b61a2:	f002 fb57 	bl	b8854 <_ZNK6String7indexOfERKS_>
   b61a6:	4604      	mov	r4, r0
   b61a8:	a80a      	add	r0, sp, #40	; 0x28
   b61aa:	f002 fa1d 	bl	b85e8 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b61ae:	1c63      	adds	r3, r4, #1
   b61b0:	d146      	bne.n	b6240 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a4>
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
   b61b2:	f003 f8a7 	bl	b9304 <_Z16_fetch_usbserialv>
   b61b6:	4920      	ldr	r1, [pc, #128]	; (b6238 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x39c>)
   b61b8:	f002 f90f 	bl	b83da <_ZN5Print7printlnEPKc>
    String statusCode = raw_response.substring(9,12);
   b61bc:	a806      	add	r0, sp, #24
   b61be:	f002 fa13 	bl	b85e8 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b61c2:	a802      	add	r0, sp, #8
   b61c4:	f002 fa10 	bl	b85e8 <_ZN6StringD1Ev>
}
   b61c8:	b011      	add	sp, #68	; 0x44
   b61ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (timeout) {
   b61ce:	4599      	cmp	r9, r3
   b61d0:	d9b5      	bls.n	b613e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2a2>
        Serial.println("\r\nHttpClient>\tError: Timeout while reading response.");
   b61d2:	f003 f897 	bl	b9304 <_Z16_fetch_usbserialv>
   b61d6:	4919      	ldr	r1, [pc, #100]	; (b623c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a0>)
   b61d8:	f002 f8ff 	bl	b83da <_ZN5Print7printlnEPKc>
   b61dc:	e7af      	b.n	b613e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2a2>
   b61de:	bf00      	nop
   b61e0:	000ba95b 	.word	0x000ba95b
   b61e4:	000bace4 	.word	0x000bace4
   b61e8:	000ba8e0 	.word	0x000ba8e0
   b61ec:	000ba2ed 	.word	0x000ba2ed
   b61f0:	000ba539 	.word	0x000ba539
   b61f4:	000ba91b 	.word	0x000ba91b
   b61f8:	000ba927 	.word	0x000ba927
   b61fc:	000ba950 	.word	0x000ba950
   b6200:	000ba94a 	.word	0x000ba94a
   b6204:	000ba97a 	.word	0x000ba97a
   b6208:	000ba97f 	.word	0x000ba97f
   b620c:	000ba8fc 	.word	0x000ba8fc
   b6210:	000ba2ce 	.word	0x000ba2ce
   b6214:	000ba98e 	.word	0x000ba98e
   b6218:	000ba9af 	.word	0x000ba9af
   b621c:	000ba9db 	.word	0x000ba9db
   b6220:	000ba9e3 	.word	0x000ba9e3
   b6224:	000baa18 	.word	0x000baa18
   b6228:	000baa73 	.word	0x000baa73
   b622c:	000baa98 	.word	0x000baa98
   b6230:	000baa9d 	.word	0x000baa9d
   b6234:	000baab7 	.word	0x000baab7
   b6238:	000baabc 	.word	0x000baabc
   b623c:	000baa3e 	.word	0x000baa3e
    aResponse.body = "";
   b6240:	f108 0504 	add.w	r5, r8, #4
   b6244:	490a      	ldr	r1, [pc, #40]	; (b6270 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3d4>)
   b6246:	4628      	mov	r0, r5
   b6248:	f002 fa47 	bl	b86da <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b624c:	1d22      	adds	r2, r4, #4
   b624e:	a902      	add	r1, sp, #8
   b6250:	a80a      	add	r0, sp, #40	; 0x28
   b6252:	f002 fb23 	bl	b889c <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b6256:	a90a      	add	r1, sp, #40	; 0x28
   b6258:	4628      	mov	r0, r5
   b625a:	f002 fa8d 	bl	b8778 <_ZN6String6concatERKS_>
   b625e:	a80a      	add	r0, sp, #40	; 0x28
   b6260:	f002 f9c2 	bl	b85e8 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b6264:	9806      	ldr	r0, [sp, #24]
   b6266:	f003 fe4f 	bl	b9f08 <atoi>
   b626a:	f8c8 0000 	str.w	r0, [r8]
   b626e:	e7a5      	b.n	b61bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x320>
   b6270:	000ba587 	.word	0x000ba587

000b6274 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b6274:	b508      	push	{r3, lr}
   b6276:	4b02      	ldr	r3, [pc, #8]	; (b6280 <hal_ble_stack_init+0xc>)
   b6278:	681b      	ldr	r3, [r3, #0]
   b627a:	689b      	ldr	r3, [r3, #8]
   b627c:	9301      	str	r3, [sp, #4]
   b627e:	bd08      	pop	{r3, pc}
   b6280:	00030278 	.word	0x00030278

000b6284 <hal_ble_stack_deinit>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
   b6284:	b508      	push	{r3, lr}
   b6286:	4b02      	ldr	r3, [pc, #8]	; (b6290 <hal_ble_stack_deinit+0xc>)
   b6288:	681b      	ldr	r3, [r3, #0]
   b628a:	68db      	ldr	r3, [r3, #12]
   b628c:	9301      	str	r3, [sp, #4]
   b628e:	bd08      	pop	{r3, pc}
   b6290:	00030278 	.word	0x00030278

000b6294 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b6294:	b508      	push	{r3, lr}
   b6296:	4b02      	ldr	r3, [pc, #8]	; (b62a0 <hal_ble_gap_set_advertising_data+0xc>)
   b6298:	681b      	ldr	r3, [r3, #0]
   b629a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b629c:	9301      	str	r3, [sp, #4]
   b629e:	bd08      	pop	{r3, pc}
   b62a0:	00030278 	.word	0x00030278

000b62a4 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b62a4:	b508      	push	{r3, lr}
   b62a6:	4b02      	ldr	r3, [pc, #8]	; (b62b0 <hal_ble_gap_set_scan_response_data+0xc>)
   b62a8:	681b      	ldr	r3, [r3, #0]
   b62aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b62ac:	9301      	str	r3, [sp, #4]
   b62ae:	bd08      	pop	{r3, pc}
   b62b0:	00030278 	.word	0x00030278

000b62b4 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b62b4:	b508      	push	{r3, lr}
   b62b6:	4b02      	ldr	r3, [pc, #8]	; (b62c0 <hal_ble_gap_start_advertising+0xc>)
   b62b8:	681b      	ldr	r3, [r3, #0]
   b62ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b62bc:	9301      	str	r3, [sp, #4]
   b62be:	bd08      	pop	{r3, pc}
   b62c0:	00030278 	.word	0x00030278

000b62c4 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b62c4:	b508      	push	{r3, lr}
   b62c6:	4b03      	ldr	r3, [pc, #12]	; (b62d4 <hal_ble_gap_disconnect+0x10>)
   b62c8:	681b      	ldr	r3, [r3, #0]
   b62ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b62ce:	9301      	str	r3, [sp, #4]
   b62d0:	bd08      	pop	{r3, pc}
   b62d2:	0000      	.short	0x0000
   b62d4:	00030278 	.word	0x00030278

000b62d8 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b62d8:	b508      	push	{r3, lr}
   b62da:	4b03      	ldr	r3, [pc, #12]	; (b62e8 <hal_ble_gatt_server_add_service+0x10>)
   b62dc:	681b      	ldr	r3, [r3, #0]
   b62de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b62e2:	9301      	str	r3, [sp, #4]
   b62e4:	bd08      	pop	{r3, pc}
   b62e6:	0000      	.short	0x0000
   b62e8:	00030278 	.word	0x00030278

000b62ec <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b62ec:	b508      	push	{r3, lr}
   b62ee:	4b03      	ldr	r3, [pc, #12]	; (b62fc <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b62f0:	681b      	ldr	r3, [r3, #0]
   b62f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b62f6:	9301      	str	r3, [sp, #4]
   b62f8:	bd08      	pop	{r3, pc}
   b62fa:	0000      	.short	0x0000
   b62fc:	00030278 	.word	0x00030278

000b6300 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6300:	b508      	push	{r3, lr}
   b6302:	4b03      	ldr	r3, [pc, #12]	; (b6310 <hal_ble_gatt_client_write_with_response+0x10>)
   b6304:	681b      	ldr	r3, [r3, #0]
   b6306:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b630a:	9301      	str	r3, [sp, #4]
   b630c:	bd08      	pop	{r3, pc}
   b630e:	0000      	.short	0x0000
   b6310:	00030278 	.word	0x00030278

000b6314 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6314:	b508      	push	{r3, lr}
   b6316:	4b03      	ldr	r3, [pc, #12]	; (b6324 <hal_ble_gatt_client_write_without_response+0x10>)
   b6318:	681b      	ldr	r3, [r3, #0]
   b631a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b631e:	9301      	str	r3, [sp, #4]
   b6320:	bd08      	pop	{r3, pc}
   b6322:	0000      	.short	0x0000
   b6324:	00030278 	.word	0x00030278

000b6328 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b6328:	b508      	push	{r3, lr}
   b632a:	4b03      	ldr	r3, [pc, #12]	; (b6338 <hal_ble_gatt_server_add_characteristic+0x10>)
   b632c:	681b      	ldr	r3, [r3, #0]
   b632e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b6332:	9301      	str	r3, [sp, #4]
   b6334:	bd08      	pop	{r3, pc}
   b6336:	0000      	.short	0x0000
   b6338:	00030278 	.word	0x00030278

000b633c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b633c:	b508      	push	{r3, lr}
   b633e:	4b03      	ldr	r3, [pc, #12]	; (b634c <hal_ble_set_callback_on_periph_link_events+0x10>)
   b6340:	681b      	ldr	r3, [r3, #0]
   b6342:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b6346:	9301      	str	r3, [sp, #4]
   b6348:	bd08      	pop	{r3, pc}
   b634a:	0000      	.short	0x0000
   b634c:	00030278 	.word	0x00030278

000b6350 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6350:	b508      	push	{r3, lr}
   b6352:	4b03      	ldr	r3, [pc, #12]	; (b6360 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b6354:	681b      	ldr	r3, [r3, #0]
   b6356:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b635a:	9301      	str	r3, [sp, #4]
   b635c:	bd08      	pop	{r3, pc}
   b635e:	0000      	.short	0x0000
   b6360:	00030278 	.word	0x00030278

000b6364 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6364:	b508      	push	{r3, lr}
   b6366:	4b03      	ldr	r3, [pc, #12]	; (b6374 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b6368:	681b      	ldr	r3, [r3, #0]
   b636a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b636e:	9301      	str	r3, [sp, #4]
   b6370:	bd08      	pop	{r3, pc}
   b6372:	0000      	.short	0x0000
   b6374:	00030278 	.word	0x00030278

000b6378 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   b6378:	b508      	push	{r3, lr}
   b637a:	4b02      	ldr	r3, [pc, #8]	; (b6384 <os_thread_create+0xc>)
   b637c:	681b      	ldr	r3, [r3, #0]
   b637e:	685b      	ldr	r3, [r3, #4]
   b6380:	9301      	str	r3, [sp, #4]
   b6382:	bd08      	pop	{r3, pc}
   b6384:	00030248 	.word	0x00030248

000b6388 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b6388:	b508      	push	{r3, lr}
   b638a:	4b02      	ldr	r3, [pc, #8]	; (b6394 <os_thread_yield+0xc>)
   b638c:	681b      	ldr	r3, [r3, #0]
   b638e:	68db      	ldr	r3, [r3, #12]
   b6390:	9301      	str	r3, [sp, #4]
   b6392:	bd08      	pop	{r3, pc}
   b6394:	00030248 	.word	0x00030248

000b6398 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6398:	b508      	push	{r3, lr}
   b639a:	4b02      	ldr	r3, [pc, #8]	; (b63a4 <os_mutex_create+0xc>)
   b639c:	681b      	ldr	r3, [r3, #0]
   b639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b63a0:	9301      	str	r3, [sp, #4]
   b63a2:	bd08      	pop	{r3, pc}
   b63a4:	00030248 	.word	0x00030248

000b63a8 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b63a8:	b508      	push	{r3, lr}
   b63aa:	4b02      	ldr	r3, [pc, #8]	; (b63b4 <os_mutex_lock+0xc>)
   b63ac:	681b      	ldr	r3, [r3, #0]
   b63ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b63b0:	9301      	str	r3, [sp, #4]
   b63b2:	bd08      	pop	{r3, pc}
   b63b4:	00030248 	.word	0x00030248

000b63b8 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b63b8:	b508      	push	{r3, lr}
   b63ba:	4b02      	ldr	r3, [pc, #8]	; (b63c4 <os_mutex_unlock+0xc>)
   b63bc:	681b      	ldr	r3, [r3, #0]
   b63be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b63c0:	9301      	str	r3, [sp, #4]
   b63c2:	bd08      	pop	{r3, pc}
   b63c4:	00030248 	.word	0x00030248

000b63c8 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b63c8:	b508      	push	{r3, lr}
   b63ca:	4b02      	ldr	r3, [pc, #8]	; (b63d4 <os_mutex_recursive_create+0xc>)
   b63cc:	681b      	ldr	r3, [r3, #0]
   b63ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b63d0:	9301      	str	r3, [sp, #4]
   b63d2:	bd08      	pop	{r3, pc}
   b63d4:	00030248 	.word	0x00030248

000b63d8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b63d8:	b508      	push	{r3, lr}
   b63da:	4b02      	ldr	r3, [pc, #8]	; (b63e4 <os_mutex_recursive_destroy+0xc>)
   b63dc:	681b      	ldr	r3, [r3, #0]
   b63de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b63e0:	9301      	str	r3, [sp, #4]
   b63e2:	bd08      	pop	{r3, pc}
   b63e4:	00030248 	.word	0x00030248

000b63e8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b63e8:	b508      	push	{r3, lr}
   b63ea:	4b02      	ldr	r3, [pc, #8]	; (b63f4 <os_mutex_recursive_lock+0xc>)
   b63ec:	681b      	ldr	r3, [r3, #0]
   b63ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b63f0:	9301      	str	r3, [sp, #4]
   b63f2:	bd08      	pop	{r3, pc}
   b63f4:	00030248 	.word	0x00030248

000b63f8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b63f8:	b508      	push	{r3, lr}
   b63fa:	4b02      	ldr	r3, [pc, #8]	; (b6404 <os_mutex_recursive_unlock+0xc>)
   b63fc:	681b      	ldr	r3, [r3, #0]
   b63fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6400:	9301      	str	r3, [sp, #4]
   b6402:	bd08      	pop	{r3, pc}
   b6404:	00030248 	.word	0x00030248

000b6408 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6408:	b508      	push	{r3, lr}
   b640a:	4b02      	ldr	r3, [pc, #8]	; (b6414 <HAL_RNG_GetRandomNumber+0xc>)
   b640c:	681b      	ldr	r3, [r3, #0]
   b640e:	685b      	ldr	r3, [r3, #4]
   b6410:	9301      	str	r3, [sp, #4]
   b6412:	bd08      	pop	{r3, pc}
   b6414:	00030218 	.word	0x00030218

000b6418 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6418:	b508      	push	{r3, lr}
   b641a:	4b02      	ldr	r3, [pc, #8]	; (b6424 <HAL_Delay_Microseconds+0xc>)
   b641c:	681b      	ldr	r3, [r3, #0]
   b641e:	68db      	ldr	r3, [r3, #12]
   b6420:	9301      	str	r3, [sp, #4]
   b6422:	bd08      	pop	{r3, pc}
   b6424:	00030218 	.word	0x00030218

000b6428 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6428:	b508      	push	{r3, lr}
   b642a:	4b02      	ldr	r3, [pc, #8]	; (b6434 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b642c:	681b      	ldr	r3, [r3, #0]
   b642e:	695b      	ldr	r3, [r3, #20]
   b6430:	9301      	str	r3, [sp, #4]
   b6432:	bd08      	pop	{r3, pc}
   b6434:	00030218 	.word	0x00030218

000b6438 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b6438:	b508      	push	{r3, lr}
   b643a:	4b02      	ldr	r3, [pc, #8]	; (b6444 <HAL_EEPROM_Init+0xc>)
   b643c:	681b      	ldr	r3, [r3, #0]
   b643e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6440:	9301      	str	r3, [sp, #4]
   b6442:	bd08      	pop	{r3, pc}
   b6444:	00030218 	.word	0x00030218

000b6448 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   b6448:	b508      	push	{r3, lr}
   b644a:	4b02      	ldr	r3, [pc, #8]	; (b6454 <HAL_EEPROM_Get+0xc>)
   b644c:	681b      	ldr	r3, [r3, #0]
   b644e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6450:	9301      	str	r3, [sp, #4]
   b6452:	bd08      	pop	{r3, pc}
   b6454:	00030218 	.word	0x00030218

000b6458 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   b6458:	b508      	push	{r3, lr}
   b645a:	4b02      	ldr	r3, [pc, #8]	; (b6464 <HAL_EEPROM_Put+0xc>)
   b645c:	681b      	ldr	r3, [r3, #0]
   b645e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6460:	9301      	str	r3, [sp, #4]
   b6462:	bd08      	pop	{r3, pc}
   b6464:	00030218 	.word	0x00030218

000b6468 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b6468:	b508      	push	{r3, lr}
   b646a:	4b02      	ldr	r3, [pc, #8]	; (b6474 <hal_rtc_time_is_valid+0xc>)
   b646c:	681b      	ldr	r3, [r3, #0]
   b646e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6470:	9301      	str	r3, [sp, #4]
   b6472:	bd08      	pop	{r3, pc}
   b6474:	00030218 	.word	0x00030218

000b6478 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b6478:	b508      	push	{r3, lr}
   b647a:	4b02      	ldr	r3, [pc, #8]	; (b6484 <hal_rtc_get_time+0xc>)
   b647c:	681b      	ldr	r3, [r3, #0]
   b647e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6480:	9301      	str	r3, [sp, #4]
   b6482:	bd08      	pop	{r3, pc}
   b6484:	00030218 	.word	0x00030218

000b6488 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6488:	b508      	push	{r3, lr}
   b648a:	4b02      	ldr	r3, [pc, #8]	; (b6494 <HAL_Pin_Mode+0xc>)
   b648c:	681b      	ldr	r3, [r3, #0]
   b648e:	689b      	ldr	r3, [r3, #8]
   b6490:	9301      	str	r3, [sp, #4]
   b6492:	bd08      	pop	{r3, pc}
   b6494:	0003022c 	.word	0x0003022c

000b6498 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6498:	b508      	push	{r3, lr}
   b649a:	4b02      	ldr	r3, [pc, #8]	; (b64a4 <HAL_Get_Pin_Mode+0xc>)
   b649c:	681b      	ldr	r3, [r3, #0]
   b649e:	68db      	ldr	r3, [r3, #12]
   b64a0:	9301      	str	r3, [sp, #4]
   b64a2:	bd08      	pop	{r3, pc}
   b64a4:	0003022c 	.word	0x0003022c

000b64a8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b64a8:	b508      	push	{r3, lr}
   b64aa:	4b02      	ldr	r3, [pc, #8]	; (b64b4 <HAL_GPIO_Write+0xc>)
   b64ac:	681b      	ldr	r3, [r3, #0]
   b64ae:	691b      	ldr	r3, [r3, #16]
   b64b0:	9301      	str	r3, [sp, #4]
   b64b2:	bd08      	pop	{r3, pc}
   b64b4:	0003022c 	.word	0x0003022c

000b64b8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b64b8:	b508      	push	{r3, lr}
   b64ba:	4b02      	ldr	r3, [pc, #8]	; (b64c4 <HAL_GPIO_Read+0xc>)
   b64bc:	681b      	ldr	r3, [r3, #0]
   b64be:	695b      	ldr	r3, [r3, #20]
   b64c0:	9301      	str	r3, [sp, #4]
   b64c2:	bd08      	pop	{r3, pc}
   b64c4:	0003022c 	.word	0x0003022c

000b64c8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b64c8:	b508      	push	{r3, lr}
   b64ca:	4b02      	ldr	r3, [pc, #8]	; (b64d4 <hal_i2c_begin+0xc>)
   b64cc:	681b      	ldr	r3, [r3, #0]
   b64ce:	68db      	ldr	r3, [r3, #12]
   b64d0:	9301      	str	r3, [sp, #4]
   b64d2:	bd08      	pop	{r3, pc}
   b64d4:	00030228 	.word	0x00030228

000b64d8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b64d8:	b508      	push	{r3, lr}
   b64da:	4b02      	ldr	r3, [pc, #8]	; (b64e4 <hal_i2c_begin_transmission+0xc>)
   b64dc:	681b      	ldr	r3, [r3, #0]
   b64de:	699b      	ldr	r3, [r3, #24]
   b64e0:	9301      	str	r3, [sp, #4]
   b64e2:	bd08      	pop	{r3, pc}
   b64e4:	00030228 	.word	0x00030228

000b64e8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b64e8:	b508      	push	{r3, lr}
   b64ea:	4b02      	ldr	r3, [pc, #8]	; (b64f4 <hal_i2c_end_transmission+0xc>)
   b64ec:	681b      	ldr	r3, [r3, #0]
   b64ee:	69db      	ldr	r3, [r3, #28]
   b64f0:	9301      	str	r3, [sp, #4]
   b64f2:	bd08      	pop	{r3, pc}
   b64f4:	00030228 	.word	0x00030228

000b64f8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b64f8:	b508      	push	{r3, lr}
   b64fa:	4b02      	ldr	r3, [pc, #8]	; (b6504 <hal_i2c_write+0xc>)
   b64fc:	681b      	ldr	r3, [r3, #0]
   b64fe:	6a1b      	ldr	r3, [r3, #32]
   b6500:	9301      	str	r3, [sp, #4]
   b6502:	bd08      	pop	{r3, pc}
   b6504:	00030228 	.word	0x00030228

000b6508 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6508:	b508      	push	{r3, lr}
   b650a:	4b02      	ldr	r3, [pc, #8]	; (b6514 <hal_i2c_available+0xc>)
   b650c:	681b      	ldr	r3, [r3, #0]
   b650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6510:	9301      	str	r3, [sp, #4]
   b6512:	bd08      	pop	{r3, pc}
   b6514:	00030228 	.word	0x00030228

000b6518 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6518:	b508      	push	{r3, lr}
   b651a:	4b02      	ldr	r3, [pc, #8]	; (b6524 <hal_i2c_read+0xc>)
   b651c:	681b      	ldr	r3, [r3, #0]
   b651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6520:	9301      	str	r3, [sp, #4]
   b6522:	bd08      	pop	{r3, pc}
   b6524:	00030228 	.word	0x00030228

000b6528 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6528:	b508      	push	{r3, lr}
   b652a:	4b02      	ldr	r3, [pc, #8]	; (b6534 <hal_i2c_peek+0xc>)
   b652c:	681b      	ldr	r3, [r3, #0]
   b652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6530:	9301      	str	r3, [sp, #4]
   b6532:	bd08      	pop	{r3, pc}
   b6534:	00030228 	.word	0x00030228

000b6538 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6538:	b508      	push	{r3, lr}
   b653a:	4b02      	ldr	r3, [pc, #8]	; (b6544 <hal_i2c_flush+0xc>)
   b653c:	681b      	ldr	r3, [r3, #0]
   b653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6540:	9301      	str	r3, [sp, #4]
   b6542:	bd08      	pop	{r3, pc}
   b6544:	00030228 	.word	0x00030228

000b6548 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6548:	b508      	push	{r3, lr}
   b654a:	4b02      	ldr	r3, [pc, #8]	; (b6554 <hal_i2c_is_enabled+0xc>)
   b654c:	681b      	ldr	r3, [r3, #0]
   b654e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6550:	9301      	str	r3, [sp, #4]
   b6552:	bd08      	pop	{r3, pc}
   b6554:	00030228 	.word	0x00030228

000b6558 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6558:	b508      	push	{r3, lr}
   b655a:	4b02      	ldr	r3, [pc, #8]	; (b6564 <hal_i2c_init+0xc>)
   b655c:	681b      	ldr	r3, [r3, #0]
   b655e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6560:	9301      	str	r3, [sp, #4]
   b6562:	bd08      	pop	{r3, pc}
   b6564:	00030228 	.word	0x00030228

000b6568 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b6568:	b508      	push	{r3, lr}
   b656a:	4b02      	ldr	r3, [pc, #8]	; (b6574 <hal_i2c_request_ex+0xc>)
   b656c:	681b      	ldr	r3, [r3, #0]
   b656e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6570:	9301      	str	r3, [sp, #4]
   b6572:	bd08      	pop	{r3, pc}
   b6574:	00030228 	.word	0x00030228

000b6578 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6578:	b508      	push	{r3, lr}
   b657a:	4b02      	ldr	r3, [pc, #8]	; (b6584 <if_index_to_name+0xc>)
   b657c:	681b      	ldr	r3, [r3, #0]
   b657e:	695b      	ldr	r3, [r3, #20]
   b6580:	9301      	str	r3, [sp, #4]
   b6582:	bd08      	pop	{r3, pc}
   b6584:	0003026c 	.word	0x0003026c

000b6588 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6588:	b508      	push	{r3, lr}
   b658a:	4b02      	ldr	r3, [pc, #8]	; (b6594 <inet_inet_ntop+0xc>)
   b658c:	681b      	ldr	r3, [r3, #0]
   b658e:	695b      	ldr	r3, [r3, #20]
   b6590:	9301      	str	r3, [sp, #4]
   b6592:	bd08      	pop	{r3, pc}
   b6594:	00030264 	.word	0x00030264

000b6598 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6598:	b508      	push	{r3, lr}
   b659a:	4b02      	ldr	r3, [pc, #8]	; (b65a4 <inet_htonl+0xc>)
   b659c:	681b      	ldr	r3, [r3, #0]
   b659e:	6a1b      	ldr	r3, [r3, #32]
   b65a0:	9301      	str	r3, [sp, #4]
   b65a2:	bd08      	pop	{r3, pc}
   b65a4:	00030264 	.word	0x00030264

000b65a8 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b65a8:	b508      	push	{r3, lr}
   b65aa:	4b02      	ldr	r3, [pc, #8]	; (b65b4 <inet_htons+0xc>)
   b65ac:	681b      	ldr	r3, [r3, #0]
   b65ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b65b0:	9301      	str	r3, [sp, #4]
   b65b2:	bd08      	pop	{r3, pc}
   b65b4:	00030264 	.word	0x00030264

000b65b8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b65b8:	b508      	push	{r3, lr}
   b65ba:	4b02      	ldr	r3, [pc, #8]	; (b65c4 <netdb_freeaddrinfo+0xc>)
   b65bc:	681b      	ldr	r3, [r3, #0]
   b65be:	689b      	ldr	r3, [r3, #8]
   b65c0:	9301      	str	r3, [sp, #4]
   b65c2:	bd08      	pop	{r3, pc}
   b65c4:	00030268 	.word	0x00030268

000b65c8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b65c8:	b508      	push	{r3, lr}
   b65ca:	4b02      	ldr	r3, [pc, #8]	; (b65d4 <netdb_getaddrinfo+0xc>)
   b65cc:	681b      	ldr	r3, [r3, #0]
   b65ce:	68db      	ldr	r3, [r3, #12]
   b65d0:	9301      	str	r3, [sp, #4]
   b65d2:	bd08      	pop	{r3, pc}
   b65d4:	00030268 	.word	0x00030268

000b65d8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b65d8:	b508      	push	{r3, lr}
   b65da:	4b02      	ldr	r3, [pc, #8]	; (b65e4 <sock_setsockopt+0xc>)
   b65dc:	681b      	ldr	r3, [r3, #0]
   b65de:	699b      	ldr	r3, [r3, #24]
   b65e0:	9301      	str	r3, [sp, #4]
   b65e2:	bd08      	pop	{r3, pc}
   b65e4:	00030238 	.word	0x00030238

000b65e8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b65e8:	b508      	push	{r3, lr}
   b65ea:	4b02      	ldr	r3, [pc, #8]	; (b65f4 <sock_close+0xc>)
   b65ec:	681b      	ldr	r3, [r3, #0]
   b65ee:	69db      	ldr	r3, [r3, #28]
   b65f0:	9301      	str	r3, [sp, #4]
   b65f2:	bd08      	pop	{r3, pc}
   b65f4:	00030238 	.word	0x00030238

000b65f8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b65f8:	b508      	push	{r3, lr}
   b65fa:	4b02      	ldr	r3, [pc, #8]	; (b6604 <sock_connect+0xc>)
   b65fc:	681b      	ldr	r3, [r3, #0]
   b65fe:	6a1b      	ldr	r3, [r3, #32]
   b6600:	9301      	str	r3, [sp, #4]
   b6602:	bd08      	pop	{r3, pc}
   b6604:	00030238 	.word	0x00030238

000b6608 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6608:	b508      	push	{r3, lr}
   b660a:	4b02      	ldr	r3, [pc, #8]	; (b6614 <sock_recv+0xc>)
   b660c:	681b      	ldr	r3, [r3, #0]
   b660e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6610:	9301      	str	r3, [sp, #4]
   b6612:	bd08      	pop	{r3, pc}
   b6614:	00030238 	.word	0x00030238

000b6618 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6618:	b508      	push	{r3, lr}
   b661a:	4b02      	ldr	r3, [pc, #8]	; (b6624 <sock_send+0xc>)
   b661c:	681b      	ldr	r3, [r3, #0]
   b661e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6620:	9301      	str	r3, [sp, #4]
   b6622:	bd08      	pop	{r3, pc}
   b6624:	00030238 	.word	0x00030238

000b6628 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6628:	b508      	push	{r3, lr}
   b662a:	4b02      	ldr	r3, [pc, #8]	; (b6634 <sock_socket+0xc>)
   b662c:	681b      	ldr	r3, [r3, #0]
   b662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6630:	9301      	str	r3, [sp, #4]
   b6632:	bd08      	pop	{r3, pc}
   b6634:	00030238 	.word	0x00030238

000b6638 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6638:	b508      	push	{r3, lr}
   b663a:	4b02      	ldr	r3, [pc, #8]	; (b6644 <hal_spi_begin+0xc>)
   b663c:	681b      	ldr	r3, [r3, #0]
   b663e:	681b      	ldr	r3, [r3, #0]
   b6640:	9301      	str	r3, [sp, #4]
   b6642:	bd08      	pop	{r3, pc}
   b6644:	00030230 	.word	0x00030230

000b6648 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b6648:	b508      	push	{r3, lr}
   b664a:	4b02      	ldr	r3, [pc, #8]	; (b6654 <hal_spi_set_bit_order+0xc>)
   b664c:	681b      	ldr	r3, [r3, #0]
   b664e:	689b      	ldr	r3, [r3, #8]
   b6650:	9301      	str	r3, [sp, #4]
   b6652:	bd08      	pop	{r3, pc}
   b6654:	00030230 	.word	0x00030230

000b6658 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b6658:	b508      	push	{r3, lr}
   b665a:	4b02      	ldr	r3, [pc, #8]	; (b6664 <hal_spi_set_data_mode+0xc>)
   b665c:	681b      	ldr	r3, [r3, #0]
   b665e:	68db      	ldr	r3, [r3, #12]
   b6660:	9301      	str	r3, [sp, #4]
   b6662:	bd08      	pop	{r3, pc}
   b6664:	00030230 	.word	0x00030230

000b6668 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b6668:	b508      	push	{r3, lr}
   b666a:	4b02      	ldr	r3, [pc, #8]	; (b6674 <hal_spi_set_clock_divider+0xc>)
   b666c:	681b      	ldr	r3, [r3, #0]
   b666e:	691b      	ldr	r3, [r3, #16]
   b6670:	9301      	str	r3, [sp, #4]
   b6672:	bd08      	pop	{r3, pc}
   b6674:	00030230 	.word	0x00030230

000b6678 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6678:	b508      	push	{r3, lr}
   b667a:	4b02      	ldr	r3, [pc, #8]	; (b6684 <hal_spi_transfer+0xc>)
   b667c:	681b      	ldr	r3, [r3, #0]
   b667e:	695b      	ldr	r3, [r3, #20]
   b6680:	9301      	str	r3, [sp, #4]
   b6682:	bd08      	pop	{r3, pc}
   b6684:	00030230 	.word	0x00030230

000b6688 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6688:	b508      	push	{r3, lr}
   b668a:	4b02      	ldr	r3, [pc, #8]	; (b6694 <hal_spi_init+0xc>)
   b668c:	681b      	ldr	r3, [r3, #0]
   b668e:	69db      	ldr	r3, [r3, #28]
   b6690:	9301      	str	r3, [sp, #4]
   b6692:	bd08      	pop	{r3, pc}
   b6694:	00030230 	.word	0x00030230

000b6698 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6698:	b508      	push	{r3, lr}
   b669a:	4b02      	ldr	r3, [pc, #8]	; (b66a4 <hal_spi_is_enabled+0xc>)
   b669c:	681b      	ldr	r3, [r3, #0]
   b669e:	6a1b      	ldr	r3, [r3, #32]
   b66a0:	9301      	str	r3, [sp, #4]
   b66a2:	bd08      	pop	{r3, pc}
   b66a4:	00030230 	.word	0x00030230

000b66a8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b66a8:	b508      	push	{r3, lr}
   b66aa:	4b02      	ldr	r3, [pc, #8]	; (b66b4 <hal_spi_info+0xc>)
   b66ac:	681b      	ldr	r3, [r3, #0]
   b66ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b66b0:	9301      	str	r3, [sp, #4]
   b66b2:	bd08      	pop	{r3, pc}
   b66b4:	00030230 	.word	0x00030230

000b66b8 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b66b8:	b508      	push	{r3, lr}
   b66ba:	4b02      	ldr	r3, [pc, #8]	; (b66c4 <hal_spi_acquire+0xc>)
   b66bc:	681b      	ldr	r3, [r3, #0]
   b66be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b66c0:	9301      	str	r3, [sp, #4]
   b66c2:	bd08      	pop	{r3, pc}
   b66c4:	00030230 	.word	0x00030230

000b66c8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b66c8:	b508      	push	{r3, lr}
   b66ca:	4b02      	ldr	r3, [pc, #8]	; (b66d4 <hal_spi_release+0xc>)
   b66cc:	681b      	ldr	r3, [r3, #0]
   b66ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b66d0:	9301      	str	r3, [sp, #4]
   b66d2:	bd08      	pop	{r3, pc}
   b66d4:	00030230 	.word	0x00030230

000b66d8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   b66d8:	b508      	push	{r3, lr}
   b66da:	4b02      	ldr	r3, [pc, #8]	; (b66e4 <hal_usart_init+0xc>)
   b66dc:	681b      	ldr	r3, [r3, #0]
   b66de:	681b      	ldr	r3, [r3, #0]
   b66e0:	9301      	str	r3, [sp, #4]
   b66e2:	bd08      	pop	{r3, pc}
   b66e4:	0003023c 	.word	0x0003023c

000b66e8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b66e8:	b508      	push	{r3, lr}
   b66ea:	4b02      	ldr	r3, [pc, #8]	; (b66f4 <hal_usart_write+0xc>)
   b66ec:	681b      	ldr	r3, [r3, #0]
   b66ee:	68db      	ldr	r3, [r3, #12]
   b66f0:	9301      	str	r3, [sp, #4]
   b66f2:	bd08      	pop	{r3, pc}
   b66f4:	0003023c 	.word	0x0003023c

000b66f8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b66f8:	b508      	push	{r3, lr}
   b66fa:	4b02      	ldr	r3, [pc, #8]	; (b6704 <hal_usart_available+0xc>)
   b66fc:	681b      	ldr	r3, [r3, #0]
   b66fe:	691b      	ldr	r3, [r3, #16]
   b6700:	9301      	str	r3, [sp, #4]
   b6702:	bd08      	pop	{r3, pc}
   b6704:	0003023c 	.word	0x0003023c

000b6708 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6708:	b508      	push	{r3, lr}
   b670a:	4b02      	ldr	r3, [pc, #8]	; (b6714 <hal_usart_read+0xc>)
   b670c:	681b      	ldr	r3, [r3, #0]
   b670e:	695b      	ldr	r3, [r3, #20]
   b6710:	9301      	str	r3, [sp, #4]
   b6712:	bd08      	pop	{r3, pc}
   b6714:	0003023c 	.word	0x0003023c

000b6718 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6718:	b508      	push	{r3, lr}
   b671a:	4b02      	ldr	r3, [pc, #8]	; (b6724 <hal_usart_peek+0xc>)
   b671c:	681b      	ldr	r3, [r3, #0]
   b671e:	699b      	ldr	r3, [r3, #24]
   b6720:	9301      	str	r3, [sp, #4]
   b6722:	bd08      	pop	{r3, pc}
   b6724:	0003023c 	.word	0x0003023c

000b6728 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6728:	b508      	push	{r3, lr}
   b672a:	4b02      	ldr	r3, [pc, #8]	; (b6734 <hal_usart_flush+0xc>)
   b672c:	681b      	ldr	r3, [r3, #0]
   b672e:	69db      	ldr	r3, [r3, #28]
   b6730:	9301      	str	r3, [sp, #4]
   b6732:	bd08      	pop	{r3, pc}
   b6734:	0003023c 	.word	0x0003023c

000b6738 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6738:	b508      	push	{r3, lr}
   b673a:	4b02      	ldr	r3, [pc, #8]	; (b6744 <hal_usart_is_enabled+0xc>)
   b673c:	681b      	ldr	r3, [r3, #0]
   b673e:	6a1b      	ldr	r3, [r3, #32]
   b6740:	9301      	str	r3, [sp, #4]
   b6742:	bd08      	pop	{r3, pc}
   b6744:	0003023c 	.word	0x0003023c

000b6748 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6748:	b508      	push	{r3, lr}
   b674a:	4b02      	ldr	r3, [pc, #8]	; (b6754 <hal_usart_available_data_for_write+0xc>)
   b674c:	681b      	ldr	r3, [r3, #0]
   b674e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6750:	9301      	str	r3, [sp, #4]
   b6752:	bd08      	pop	{r3, pc}
   b6754:	0003023c 	.word	0x0003023c

000b6758 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6758:	b508      	push	{r3, lr}
   b675a:	4b02      	ldr	r3, [pc, #8]	; (b6764 <HAL_USB_USART_Init+0xc>)
   b675c:	681b      	ldr	r3, [r3, #0]
   b675e:	681b      	ldr	r3, [r3, #0]
   b6760:	9301      	str	r3, [sp, #4]
   b6762:	bd08      	pop	{r3, pc}
   b6764:	0003024c 	.word	0x0003024c

000b6768 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6768:	b508      	push	{r3, lr}
   b676a:	4b02      	ldr	r3, [pc, #8]	; (b6774 <HAL_USB_USART_Begin+0xc>)
   b676c:	681b      	ldr	r3, [r3, #0]
   b676e:	685b      	ldr	r3, [r3, #4]
   b6770:	9301      	str	r3, [sp, #4]
   b6772:	bd08      	pop	{r3, pc}
   b6774:	0003024c 	.word	0x0003024c

000b6778 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6778:	b508      	push	{r3, lr}
   b677a:	4b02      	ldr	r3, [pc, #8]	; (b6784 <HAL_USB_USART_Available_Data+0xc>)
   b677c:	681b      	ldr	r3, [r3, #0]
   b677e:	691b      	ldr	r3, [r3, #16]
   b6780:	9301      	str	r3, [sp, #4]
   b6782:	bd08      	pop	{r3, pc}
   b6784:	0003024c 	.word	0x0003024c

000b6788 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6788:	b508      	push	{r3, lr}
   b678a:	4b02      	ldr	r3, [pc, #8]	; (b6794 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b678c:	681b      	ldr	r3, [r3, #0]
   b678e:	695b      	ldr	r3, [r3, #20]
   b6790:	9301      	str	r3, [sp, #4]
   b6792:	bd08      	pop	{r3, pc}
   b6794:	0003024c 	.word	0x0003024c

000b6798 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6798:	b508      	push	{r3, lr}
   b679a:	4b02      	ldr	r3, [pc, #8]	; (b67a4 <HAL_USB_USART_Receive_Data+0xc>)
   b679c:	681b      	ldr	r3, [r3, #0]
   b679e:	699b      	ldr	r3, [r3, #24]
   b67a0:	9301      	str	r3, [sp, #4]
   b67a2:	bd08      	pop	{r3, pc}
   b67a4:	0003024c 	.word	0x0003024c

000b67a8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b67a8:	b508      	push	{r3, lr}
   b67aa:	4b02      	ldr	r3, [pc, #8]	; (b67b4 <HAL_USB_USART_Send_Data+0xc>)
   b67ac:	681b      	ldr	r3, [r3, #0]
   b67ae:	69db      	ldr	r3, [r3, #28]
   b67b0:	9301      	str	r3, [sp, #4]
   b67b2:	bd08      	pop	{r3, pc}
   b67b4:	0003024c 	.word	0x0003024c

000b67b8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b67b8:	b508      	push	{r3, lr}
   b67ba:	4b02      	ldr	r3, [pc, #8]	; (b67c4 <HAL_USB_USART_Flush_Data+0xc>)
   b67bc:	681b      	ldr	r3, [r3, #0]
   b67be:	6a1b      	ldr	r3, [r3, #32]
   b67c0:	9301      	str	r3, [sp, #4]
   b67c2:	bd08      	pop	{r3, pc}
   b67c4:	0003024c 	.word	0x0003024c

000b67c8 <wlan_get_credentials>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
   b67c8:	b508      	push	{r3, lr}
   b67ca:	4b02      	ldr	r3, [pc, #8]	; (b67d4 <wlan_get_credentials+0xc>)
   b67cc:	681b      	ldr	r3, [r3, #0]
   b67ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b67d0:	9301      	str	r3, [sp, #4]
   b67d2:	bd08      	pop	{r3, pc}
   b67d4:	00030274 	.word	0x00030274

000b67d8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b67d8:	b508      	push	{r3, lr}
   b67da:	4b02      	ldr	r3, [pc, #8]	; (b67e4 <panic_+0xc>)
   b67dc:	681b      	ldr	r3, [r3, #0]
   b67de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b67e0:	9301      	str	r3, [sp, #4]
   b67e2:	bd08      	pop	{r3, pc}
   b67e4:	00030260 	.word	0x00030260

000b67e8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b67e8:	b508      	push	{r3, lr}
   b67ea:	4b02      	ldr	r3, [pc, #8]	; (b67f4 <log_message+0xc>)
   b67ec:	681b      	ldr	r3, [r3, #0]
   b67ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b67f0:	9301      	str	r3, [sp, #4]
   b67f2:	bd08      	pop	{r3, pc}
   b67f4:	00030260 	.word	0x00030260

000b67f8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b67f8:	b508      	push	{r3, lr}
   b67fa:	4b02      	ldr	r3, [pc, #8]	; (b6804 <system_mode+0xc>)
   b67fc:	681b      	ldr	r3, [r3, #0]
   b67fe:	681b      	ldr	r3, [r3, #0]
   b6800:	9301      	str	r3, [sp, #4]
   b6802:	bd08      	pop	{r3, pc}
   b6804:	00030220 	.word	0x00030220

000b6808 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6808:	b508      	push	{r3, lr}
   b680a:	4b02      	ldr	r3, [pc, #8]	; (b6814 <set_system_mode+0xc>)
   b680c:	681b      	ldr	r3, [r3, #0]
   b680e:	685b      	ldr	r3, [r3, #4]
   b6810:	9301      	str	r3, [sp, #4]
   b6812:	bd08      	pop	{r3, pc}
   b6814:	00030220 	.word	0x00030220

000b6818 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6818:	b508      	push	{r3, lr}
   b681a:	4b02      	ldr	r3, [pc, #8]	; (b6824 <system_delay_ms+0xc>)
   b681c:	681b      	ldr	r3, [r3, #0]
   b681e:	695b      	ldr	r3, [r3, #20]
   b6820:	9301      	str	r3, [sp, #4]
   b6822:	bd08      	pop	{r3, pc}
   b6824:	00030220 	.word	0x00030220

000b6828 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6828:	b508      	push	{r3, lr}
   b682a:	4b02      	ldr	r3, [pc, #8]	; (b6834 <system_thread_set_state+0xc>)
   b682c:	681b      	ldr	r3, [r3, #0]
   b682e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6830:	9301      	str	r3, [sp, #4]
   b6832:	bd08      	pop	{r3, pc}
   b6834:	00030220 	.word	0x00030220

000b6838 <system_internal>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
   b6838:	b508      	push	{r3, lr}
   b683a:	4b02      	ldr	r3, [pc, #8]	; (b6844 <system_internal+0xc>)
   b683c:	681b      	ldr	r3, [r3, #0]
   b683e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6840:	9301      	str	r3, [sp, #4]
   b6842:	bd08      	pop	{r3, pc}
   b6844:	00030220 	.word	0x00030220

000b6848 <system_set_flag>:
DYNALIB_FN(14, system, system_set_flag, int(system_flag_t, uint8_t, void*))
   b6848:	b508      	push	{r3, lr}
   b684a:	4b02      	ldr	r3, [pc, #8]	; (b6854 <system_set_flag+0xc>)
   b684c:	681b      	ldr	r3, [r3, #0]
   b684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6850:	9301      	str	r3, [sp, #4]
   b6852:	bd08      	pop	{r3, pc}
   b6854:	00030220 	.word	0x00030220

000b6858 <system_get_flag>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
   b6858:	b508      	push	{r3, lr}
   b685a:	4b02      	ldr	r3, [pc, #8]	; (b6864 <system_get_flag+0xc>)
   b685c:	681b      	ldr	r3, [r3, #0]
   b685e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6860:	9301      	str	r3, [sp, #4]
   b6862:	bd08      	pop	{r3, pc}
   b6864:	00030220 	.word	0x00030220

000b6868 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b6868:	b508      	push	{r3, lr}
   b686a:	4b02      	ldr	r3, [pc, #8]	; (b6874 <system_thread_get_state+0xc>)
   b686c:	681b      	ldr	r3, [r3, #0]
   b686e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6870:	9301      	str	r3, [sp, #4]
   b6872:	bd08      	pop	{r3, pc}
   b6874:	00030220 	.word	0x00030220

000b6878 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6878:	b508      	push	{r3, lr}
   b687a:	4b03      	ldr	r3, [pc, #12]	; (b6888 <system_ctrl_set_app_request_handler+0x10>)
   b687c:	681b      	ldr	r3, [r3, #0]
   b687e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6882:	9301      	str	r3, [sp, #4]
   b6884:	bd08      	pop	{r3, pc}
   b6886:	0000      	.short	0x0000
   b6888:	00030220 	.word	0x00030220

000b688c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b688c:	b508      	push	{r3, lr}
   b688e:	4b03      	ldr	r3, [pc, #12]	; (b689c <system_ctrl_set_result+0x10>)
   b6890:	681b      	ldr	r3, [r3, #0]
   b6892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6896:	9301      	str	r3, [sp, #4]
   b6898:	bd08      	pop	{r3, pc}
   b689a:	0000      	.short	0x0000
   b689c:	00030220 	.word	0x00030220

000b68a0 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b68a0:	b508      	push	{r3, lr}
   b68a2:	4b03      	ldr	r3, [pc, #12]	; (b68b0 <system_sleep_ext+0x10>)
   b68a4:	681b      	ldr	r3, [r3, #0]
   b68a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b68aa:	9301      	str	r3, [sp, #4]
   b68ac:	bd08      	pop	{r3, pc}
   b68ae:	0000      	.short	0x0000
   b68b0:	00030220 	.word	0x00030220

000b68b4 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b68b4:	b508      	push	{r3, lr}
   b68b6:	4b03      	ldr	r3, [pc, #12]	; (b68c4 <system_reset+0x10>)
   b68b8:	681b      	ldr	r3, [r3, #0]
   b68ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b68be:	9301      	str	r3, [sp, #4]
   b68c0:	bd08      	pop	{r3, pc}
   b68c2:	0000      	.short	0x0000
   b68c4:	00030220 	.word	0x00030220

000b68c8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b68c8:	b508      	push	{r3, lr}
   b68ca:	4b02      	ldr	r3, [pc, #8]	; (b68d4 <spark_process+0xc>)
   b68cc:	681b      	ldr	r3, [r3, #0]
   b68ce:	689b      	ldr	r3, [r3, #8]
   b68d0:	9301      	str	r3, [sp, #4]
   b68d2:	bd08      	pop	{r3, pc}
   b68d4:	00030244 	.word	0x00030244

000b68d8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b68d8:	b508      	push	{r3, lr}
   b68da:	4b02      	ldr	r3, [pc, #8]	; (b68e4 <spark_cloud_flag_connect+0xc>)
   b68dc:	681b      	ldr	r3, [r3, #0]
   b68de:	68db      	ldr	r3, [r3, #12]
   b68e0:	9301      	str	r3, [sp, #4]
   b68e2:	bd08      	pop	{r3, pc}
   b68e4:	00030244 	.word	0x00030244

000b68e8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b68e8:	b508      	push	{r3, lr}
   b68ea:	4b02      	ldr	r3, [pc, #8]	; (b68f4 <spark_cloud_flag_connected+0xc>)
   b68ec:	681b      	ldr	r3, [r3, #0]
   b68ee:	695b      	ldr	r3, [r3, #20]
   b68f0:	9301      	str	r3, [sp, #4]
   b68f2:	bd08      	pop	{r3, pc}
   b68f4:	00030244 	.word	0x00030244

000b68f8 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b68f8:	b508      	push	{r3, lr}
   b68fa:	4b02      	ldr	r3, [pc, #8]	; (b6904 <spark_sync_time+0xc>)
   b68fc:	681b      	ldr	r3, [r3, #0]
   b68fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6900:	9301      	str	r3, [sp, #4]
   b6902:	bd08      	pop	{r3, pc}
   b6904:	00030244 	.word	0x00030244

000b6908 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6908:	b508      	push	{r3, lr}
   b690a:	4b02      	ldr	r3, [pc, #8]	; (b6914 <spark_sync_time_pending+0xc>)
   b690c:	681b      	ldr	r3, [r3, #0]
   b690e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6910:	9301      	str	r3, [sp, #4]
   b6912:	bd08      	pop	{r3, pc}
   b6914:	00030244 	.word	0x00030244

000b6918 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6918:	b508      	push	{r3, lr}
   b691a:	4b02      	ldr	r3, [pc, #8]	; (b6924 <spark_set_random_seed_from_cloud_handler+0xc>)
   b691c:	681b      	ldr	r3, [r3, #0]
   b691e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6920:	9301      	str	r3, [sp, #4]
   b6922:	bd08      	pop	{r3, pc}
   b6924:	00030244 	.word	0x00030244

000b6928 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6928:	b508      	push	{r3, lr}
   b692a:	4b02      	ldr	r3, [pc, #8]	; (b6934 <network_connect+0xc>)
   b692c:	681b      	ldr	r3, [r3, #0]
   b692e:	685b      	ldr	r3, [r3, #4]
   b6930:	9301      	str	r3, [sp, #4]
   b6932:	bd08      	pop	{r3, pc}
   b6934:	00030240 	.word	0x00030240

000b6938 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6938:	b508      	push	{r3, lr}
   b693a:	4b02      	ldr	r3, [pc, #8]	; (b6944 <network_connecting+0xc>)
   b693c:	681b      	ldr	r3, [r3, #0]
   b693e:	689b      	ldr	r3, [r3, #8]
   b6940:	9301      	str	r3, [sp, #4]
   b6942:	bd08      	pop	{r3, pc}
   b6944:	00030240 	.word	0x00030240

000b6948 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6948:	b508      	push	{r3, lr}
   b694a:	4b02      	ldr	r3, [pc, #8]	; (b6954 <network_disconnect+0xc>)
   b694c:	681b      	ldr	r3, [r3, #0]
   b694e:	68db      	ldr	r3, [r3, #12]
   b6950:	9301      	str	r3, [sp, #4]
   b6952:	bd08      	pop	{r3, pc}
   b6954:	00030240 	.word	0x00030240

000b6958 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6958:	b508      	push	{r3, lr}
   b695a:	4b02      	ldr	r3, [pc, #8]	; (b6964 <network_ready+0xc>)
   b695c:	681b      	ldr	r3, [r3, #0]
   b695e:	691b      	ldr	r3, [r3, #16]
   b6960:	9301      	str	r3, [sp, #4]
   b6962:	bd08      	pop	{r3, pc}
   b6964:	00030240 	.word	0x00030240

000b6968 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6968:	b508      	push	{r3, lr}
   b696a:	4b02      	ldr	r3, [pc, #8]	; (b6974 <network_on+0xc>)
   b696c:	681b      	ldr	r3, [r3, #0]
   b696e:	695b      	ldr	r3, [r3, #20]
   b6970:	9301      	str	r3, [sp, #4]
   b6972:	bd08      	pop	{r3, pc}
   b6974:	00030240 	.word	0x00030240

000b6978 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6978:	b508      	push	{r3, lr}
   b697a:	4b02      	ldr	r3, [pc, #8]	; (b6984 <network_off+0xc>)
   b697c:	681b      	ldr	r3, [r3, #0]
   b697e:	699b      	ldr	r3, [r3, #24]
   b6980:	9301      	str	r3, [sp, #4]
   b6982:	bd08      	pop	{r3, pc}
   b6984:	00030240 	.word	0x00030240

000b6988 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6988:	b508      	push	{r3, lr}
   b698a:	4b02      	ldr	r3, [pc, #8]	; (b6994 <network_listen+0xc>)
   b698c:	681b      	ldr	r3, [r3, #0]
   b698e:	69db      	ldr	r3, [r3, #28]
   b6990:	9301      	str	r3, [sp, #4]
   b6992:	bd08      	pop	{r3, pc}
   b6994:	00030240 	.word	0x00030240

000b6998 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6998:	b508      	push	{r3, lr}
   b699a:	4b02      	ldr	r3, [pc, #8]	; (b69a4 <network_listening+0xc>)
   b699c:	681b      	ldr	r3, [r3, #0]
   b699e:	6a1b      	ldr	r3, [r3, #32]
   b69a0:	9301      	str	r3, [sp, #4]
   b69a2:	bd08      	pop	{r3, pc}
   b69a4:	00030240 	.word	0x00030240

000b69a8 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   b69a8:	b508      	push	{r3, lr}
   b69aa:	4b02      	ldr	r3, [pc, #8]	; (b69b4 <network_has_credentials+0xc>)
   b69ac:	681b      	ldr	r3, [r3, #0]
   b69ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b69b0:	9301      	str	r3, [sp, #4]
   b69b2:	bd08      	pop	{r3, pc}
   b69b4:	00030240 	.word	0x00030240

000b69b8 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b69b8:	b508      	push	{r3, lr}
   b69ba:	4b02      	ldr	r3, [pc, #8]	; (b69c4 <network_set_credentials+0xc>)
   b69bc:	681b      	ldr	r3, [r3, #0]
   b69be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b69c0:	9301      	str	r3, [sp, #4]
   b69c2:	bd08      	pop	{r3, pc}
   b69c4:	00030240 	.word	0x00030240

000b69c8 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b69c8:	b508      	push	{r3, lr}
   b69ca:	4b02      	ldr	r3, [pc, #8]	; (b69d4 <network_clear_credentials+0xc>)
   b69cc:	681b      	ldr	r3, [r3, #0]
   b69ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b69d0:	9301      	str	r3, [sp, #4]
   b69d2:	bd08      	pop	{r3, pc}
   b69d4:	00030240 	.word	0x00030240

000b69d8 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b69d8:	b508      	push	{r3, lr}
   b69da:	4b02      	ldr	r3, [pc, #8]	; (b69e4 <network_set_listen_timeout+0xc>)
   b69dc:	681b      	ldr	r3, [r3, #0]
   b69de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b69e0:	9301      	str	r3, [sp, #4]
   b69e2:	bd08      	pop	{r3, pc}
   b69e4:	00030240 	.word	0x00030240

000b69e8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b69e8:	b508      	push	{r3, lr}
   b69ea:	4b02      	ldr	r3, [pc, #8]	; (b69f4 <network_get_listen_timeout+0xc>)
   b69ec:	681b      	ldr	r3, [r3, #0]
   b69ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b69f0:	9301      	str	r3, [sp, #4]
   b69f2:	bd08      	pop	{r3, pc}
   b69f4:	00030240 	.word	0x00030240

000b69f8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b69f8:	b508      	push	{r3, lr}
   b69fa:	4b02      	ldr	r3, [pc, #8]	; (b6a04 <network_is_on+0xc>)
   b69fc:	681b      	ldr	r3, [r3, #0]
   b69fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6a00:	9301      	str	r3, [sp, #4]
   b6a02:	bd08      	pop	{r3, pc}
   b6a04:	00030240 	.word	0x00030240

000b6a08 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6a08:	b508      	push	{r3, lr}
   b6a0a:	4b02      	ldr	r3, [pc, #8]	; (b6a14 <network_is_off+0xc>)
   b6a0c:	681b      	ldr	r3, [r3, #0]
   b6a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6a10:	9301      	str	r3, [sp, #4]
   b6a12:	bd08      	pop	{r3, pc}
   b6a14:	00030240 	.word	0x00030240

000b6a18 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6a18:	b508      	push	{r3, lr}
   b6a1a:	4b02      	ldr	r3, [pc, #8]	; (b6a24 <malloc+0xc>)
   b6a1c:	681b      	ldr	r3, [r3, #0]
   b6a1e:	681b      	ldr	r3, [r3, #0]
   b6a20:	9301      	str	r3, [sp, #4]
   b6a22:	bd08      	pop	{r3, pc}
   b6a24:	0003021c 	.word	0x0003021c

000b6a28 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6a28:	b508      	push	{r3, lr}
   b6a2a:	4b02      	ldr	r3, [pc, #8]	; (b6a34 <free+0xc>)
   b6a2c:	681b      	ldr	r3, [r3, #0]
   b6a2e:	685b      	ldr	r3, [r3, #4]
   b6a30:	9301      	str	r3, [sp, #4]
   b6a32:	bd08      	pop	{r3, pc}
   b6a34:	0003021c 	.word	0x0003021c

000b6a38 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6a38:	b508      	push	{r3, lr}
   b6a3a:	4b02      	ldr	r3, [pc, #8]	; (b6a44 <realloc+0xc>)
   b6a3c:	681b      	ldr	r3, [r3, #0]
   b6a3e:	689b      	ldr	r3, [r3, #8]
   b6a40:	9301      	str	r3, [sp, #4]
   b6a42:	bd08      	pop	{r3, pc}
   b6a44:	0003021c 	.word	0x0003021c

000b6a48 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b6a48:	b508      	push	{r3, lr}
   b6a4a:	4b02      	ldr	r3, [pc, #8]	; (b6a54 <siprintf+0xc>)
   b6a4c:	681b      	ldr	r3, [r3, #0]
   b6a4e:	691b      	ldr	r3, [r3, #16]
   b6a50:	9301      	str	r3, [sp, #4]
   b6a52:	bd08      	pop	{r3, pc}
   b6a54:	0003021c 	.word	0x0003021c

000b6a58 <vsnprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6a58:	b508      	push	{r3, lr}
   b6a5a:	4b02      	ldr	r3, [pc, #8]	; (b6a64 <vsnprintf+0xc>)
   b6a5c:	681b      	ldr	r3, [r3, #0]
   b6a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6a60:	9301      	str	r3, [sp, #4]
   b6a62:	bd08      	pop	{r3, pc}
   b6a64:	0003021c 	.word	0x0003021c

000b6a68 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6a68:	b508      	push	{r3, lr}
   b6a6a:	4b02      	ldr	r3, [pc, #8]	; (b6a74 <abort+0xc>)
   b6a6c:	681b      	ldr	r3, [r3, #0]
   b6a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6a70:	9301      	str	r3, [sp, #4]
   b6a72:	bd08      	pop	{r3, pc}
   b6a74:	0003021c 	.word	0x0003021c

000b6a78 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6a78:	b508      	push	{r3, lr}
   b6a7a:	4b02      	ldr	r3, [pc, #8]	; (b6a84 <__errno+0xc>)
   b6a7c:	681b      	ldr	r3, [r3, #0]
   b6a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6a80:	9301      	str	r3, [sp, #4]
   b6a82:	bd08      	pop	{r3, pc}
   b6a84:	0003021c 	.word	0x0003021c

000b6a88 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6a88:	b508      	push	{r3, lr}
   b6a8a:	4b02      	ldr	r3, [pc, #8]	; (b6a94 <__assert_func+0xc>)
   b6a8c:	681b      	ldr	r3, [r3, #0]
   b6a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6a90:	9301      	str	r3, [sp, #4]
   b6a92:	bd08      	pop	{r3, pc}
   b6a94:	0003021c 	.word	0x0003021c

000b6a98 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6a98:	b508      	push	{r3, lr}
   b6a9a:	4b02      	ldr	r3, [pc, #8]	; (b6aa4 <newlib_impure_ptr_callback+0xc>)
   b6a9c:	681b      	ldr	r3, [r3, #0]
   b6a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6aa0:	9301      	str	r3, [sp, #4]
   b6aa2:	bd08      	pop	{r3, pc}
   b6aa4:	0003021c 	.word	0x0003021c

000b6aa8 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b6aa8:	b508      	push	{r3, lr}
   b6aaa:	4b02      	ldr	r3, [pc, #8]	; (b6ab4 <localtime_r+0xc>)
   b6aac:	681b      	ldr	r3, [r3, #0]
   b6aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6ab0:	9301      	str	r3, [sp, #4]
   b6ab2:	bd08      	pop	{r3, pc}
   b6ab4:	0003021c 	.word	0x0003021c

000b6ab8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6ab8:	2100      	movs	r1, #0
   b6aba:	f7ff bead 	b.w	b6818 <system_delay_ms>

000b6abe <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6abe:	4770      	bx	lr

000b6ac0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b6ac0:	4770      	bx	lr

000b6ac2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b6ac2:	4770      	bx	lr

000b6ac4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6ac4:	4770      	bx	lr
	...

000b6ac8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6ac8:	4b06      	ldr	r3, [pc, #24]	; (b6ae4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6aca:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6acc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6ace:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6ad2:	d005      	beq.n	b6ae0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6ad4:	4608      	mov	r0, r1
   b6ad6:	f002 fe9b 	bl	b9810 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6ada:	2800      	cmp	r0, #0
   b6adc:	bf08      	it	eq
   b6ade:	2400      	moveq	r4, #0
      }
   b6ae0:	4620      	mov	r0, r4
   b6ae2:	bd10      	pop	{r4, pc}
   b6ae4:	000bac38 	.word	0x000bac38

000b6ae8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6ae8:	4b06      	ldr	r3, [pc, #24]	; (b6b04 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6aea:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6aec:	b510      	push	{r4, lr}
   b6aee:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6af2:	d005      	beq.n	b6b00 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6af4:	4608      	mov	r0, r1
   b6af6:	f002 fe8b 	bl	b9810 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6afa:	2800      	cmp	r0, #0
   b6afc:	bf08      	it	eq
   b6afe:	2400      	moveq	r4, #0
      }
   b6b00:	4620      	mov	r0, r4
   b6b02:	bd10      	pop	{r4, pc}
   b6b04:	000bac38 	.word	0x000bac38

000b6b08 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6b08:	4b06      	ldr	r3, [pc, #24]	; (b6b24 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6b0a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6b0c:	b510      	push	{r4, lr}
   b6b0e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6b12:	d005      	beq.n	b6b20 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6b14:	4608      	mov	r0, r1
   b6b16:	f002 fe7b 	bl	b9810 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6b1a:	2800      	cmp	r0, #0
   b6b1c:	bf08      	it	eq
   b6b1e:	2400      	moveq	r4, #0
      }
   b6b20:	4620      	mov	r0, r4
   b6b22:	bd10      	pop	{r4, pc}
   b6b24:	000bac38 	.word	0x000bac38

000b6b28 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6b28:	b510      	push	{r4, lr}
   b6b2a:	2168      	movs	r1, #104	; 0x68
   b6b2c:	4604      	mov	r4, r0
   b6b2e:	f002 fe66 	bl	b97fe <_ZdlPvj>
   b6b32:	4620      	mov	r0, r4
   b6b34:	bd10      	pop	{r4, pc}

000b6b36 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6b36:	b510      	push	{r4, lr}
   b6b38:	2128      	movs	r1, #40	; 0x28
   b6b3a:	4604      	mov	r4, r0
   b6b3c:	f002 fe5f 	bl	b97fe <_ZdlPvj>
   b6b40:	4620      	mov	r0, r4
   b6b42:	bd10      	pop	{r4, pc}

000b6b44 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6b44:	b510      	push	{r4, lr}
   b6b46:	2130      	movs	r1, #48	; 0x30
   b6b48:	4604      	mov	r4, r0
   b6b4a:	f002 fe58 	bl	b97fe <_ZdlPvj>
   b6b4e:	4620      	mov	r0, r4
   b6b50:	bd10      	pop	{r4, pc}

000b6b52 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6b52:	2168      	movs	r1, #104	; 0x68
   b6b54:	f002 be53 	b.w	b97fe <_ZdlPvj>

000b6b58 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6b58:	2128      	movs	r1, #40	; 0x28
   b6b5a:	f002 be50 	b.w	b97fe <_ZdlPvj>

000b6b5e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6b5e:	2130      	movs	r1, #48	; 0x30
   b6b60:	f002 be4d 	b.w	b97fe <_ZdlPvj>

000b6b64 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   b6b64:	b510      	push	{r4, lr}
   b6b66:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   b6b68:	6800      	ldr	r0, [r0, #0]
   b6b6a:	b108      	cbz	r0, b6b70 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   b6b6c:	f7ff fc34 	bl	b63d8 <os_mutex_recursive_destroy>
    }
   b6b70:	4620      	mov	r0, r4
   b6b72:	bd10      	pop	{r4, pc}

000b6b74 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6b74:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6b76:	2500      	movs	r5, #0
   b6b78:	1cec      	adds	r4, r5, #3
   b6b7a:	428c      	cmp	r4, r1
   b6b7c:	d80d      	bhi.n	b6b9a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b6b7e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b6b80:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b6b82:	5d87      	ldrb	r7, [r0, r6]
   b6b84:	4297      	cmp	r7, r2
   b6b86:	d105      	bne.n	b6b94 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6b88:	4426      	add	r6, r4
   b6b8a:	42b1      	cmp	r1, r6
   b6b8c:	d305      	bcc.n	b6b9a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b6b8e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b6b90:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b6b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b6b94:	3401      	adds	r4, #1
   b6b96:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6b98:	e7ee      	b.n	b6b78 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b6b9a:	2000      	movs	r0, #0
   b6b9c:	e7f9      	b.n	b6b92 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000b6b9e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6b9e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6ba2:	4604      	mov	r4, r0
   b6ba4:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   b6ba8:	461e      	mov	r6, r3
   b6baa:	4689      	mov	r9, r1
   b6bac:	ab01      	add	r3, sp, #4
   b6bae:	4690      	mov	r8, r2
   b6bb0:	460a      	mov	r2, r1
   b6bb2:	6a01      	ldr	r1, [r0, #32]
   b6bb4:	f7ff ffde 	bl	b6b74 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   b6bb8:	6a25      	ldr	r5, [r4, #32]
   b6bba:	1cb3      	adds	r3, r6, #2
   b6bbc:	bb0f      	cbnz	r7, b6c02 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x64>
   b6bbe:	b300      	cbz	r0, b6c02 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x64>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   b6bc0:	195f      	adds	r7, r3, r5
   b6bc2:	1a3f      	subs	r7, r7, r0
   b6bc4:	2f1f      	cmp	r7, #31
   b6bc6:	d818      	bhi.n	b6bfa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b6bc8:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b6bcc:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b6bd0:	eba5 0209 	sub.w	r2, r5, r9
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b6bd4:	eb06 030a 	add.w	r3, r6, sl
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b6bd8:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b6bda:	4448      	add	r0, r9
   b6bdc:	1821      	adds	r1, r4, r0
   b6bde:	b292      	uxth	r2, r2
   b6be0:	18e0      	adds	r0, r4, r3
   b6be2:	f003 f9d5 	bl	b9f90 <memmove>
            selfData_[offset] = len + 1;
   b6be6:	1c73      	adds	r3, r6, #1
   b6be8:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   b6bec:	4632      	mov	r2, r6
   b6bee:	4641      	mov	r1, r8
   b6bf0:	eb04 000a 	add.w	r0, r4, sl
   b6bf4:	f003 f9be 	bl	b9f74 <memcpy>
            selfLen_ = staLen + len + 2;
   b6bf8:	6227      	str	r7, [r4, #32]
}
   b6bfa:	6a20      	ldr	r0, [r4, #32]
   b6bfc:	b002      	add	sp, #8
   b6bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   b6c02:	442b      	add	r3, r5
   b6c04:	2b1f      	cmp	r3, #31
   b6c06:	d8f8      	bhi.n	b6bfa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>
        selfData_[selfLen_++] = len + 1;
   b6c08:	1c73      	adds	r3, r6, #1
   b6c0a:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   b6c0c:	1ca8      	adds	r0, r5, #2
   b6c0e:	4425      	add	r5, r4
   b6c10:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   b6c12:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   b6c14:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   b6c18:	4641      	mov	r1, r8
   b6c1a:	4420      	add	r0, r4
   b6c1c:	f003 f9aa 	bl	b9f74 <memcpy>
        selfLen_ += len;
   b6c20:	6a23      	ldr	r3, [r4, #32]
   b6c22:	4433      	add	r3, r6
   b6c24:	6223      	str	r3, [r4, #32]
   b6c26:	e7e8      	b.n	b6bfa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>

000b6c28 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b6c28:	4a02      	ldr	r2, [pc, #8]	; (b6c34 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b6c2a:	2100      	movs	r1, #0
   b6c2c:	200a      	movs	r0, #10
   b6c2e:	f7ff bdd3 	b.w	b67d8 <panic_>
   b6c32:	bf00      	nop
   b6c34:	000b6419 	.word	0x000b6419

000b6c38 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6c38:	4603      	mov	r3, r0
   b6c3a:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b6c3c:	681b      	ldr	r3, [r3, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6c3e:	e9d3 2100 	ldrd	r2, r1, [r3]
   b6c42:	4710      	bx	r2

000b6c44 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6c44:	b430      	push	{r4, r5}
   b6c46:	460d      	mov	r5, r1
   b6c48:	4611      	mov	r1, r2
   b6c4a:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b6c4c:	6803      	ldr	r3, [r0, #0]
   b6c4e:	6809      	ldr	r1, [r1, #0]
   b6c50:	6828      	ldr	r0, [r5, #0]
   b6c52:	e9d3 4300 	ldrd	r4, r3, [r3]
   b6c56:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b6c58:	bc30      	pop	{r4, r5}
   b6c5a:	4760      	bx	ip

000b6c5c <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b6c5c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6c5e:	b538      	push	{r3, r4, r5, lr}
   b6c60:	4604      	mov	r4, r0
	switch (__op)
   b6c62:	d102      	bne.n	b6c6a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6c64:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6c66:	6023      	str	r3, [r4, #0]
	}
   b6c68:	e003      	b.n	b6c72 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b6c6a:	2a02      	cmp	r2, #2
   b6c6c:	d003      	beq.n	b6c76 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b6c6e:	2a03      	cmp	r2, #3
   b6c70:	d00d      	beq.n	b6c8e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b6c72:	2000      	movs	r0, #0
   b6c74:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6c76:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6c78:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6c7a:	f7fd fa0c 	bl	b4096 <_Znwj>
   b6c7e:	4603      	mov	r3, r0
   b6c80:	2800      	cmp	r0, #0
   b6c82:	d0f0      	beq.n	b6c66 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b6c84:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6c88:	e883 0003 	stmia.w	r3, {r0, r1}
   b6c8c:	e7eb      	b.n	b6c66 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6c8e:	6800      	ldr	r0, [r0, #0]
   b6c90:	2800      	cmp	r0, #0
   b6c92:	d0ee      	beq.n	b6c72 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b6c94:	2108      	movs	r1, #8
   b6c96:	f002 fdb2 	bl	b97fe <_ZdlPvj>
   b6c9a:	e7ea      	b.n	b6c72 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b6c9c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b6c9c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6c9e:	b538      	push	{r3, r4, r5, lr}
   b6ca0:	4604      	mov	r4, r0
	switch (__op)
   b6ca2:	d102      	bne.n	b6caa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6ca4:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6ca6:	6023      	str	r3, [r4, #0]
	}
   b6ca8:	e003      	b.n	b6cb2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b6caa:	2a02      	cmp	r2, #2
   b6cac:	d003      	beq.n	b6cb6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b6cae:	2a03      	cmp	r2, #3
   b6cb0:	d00d      	beq.n	b6cce <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b6cb2:	2000      	movs	r0, #0
   b6cb4:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6cb6:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6cb8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6cba:	f7fd f9ec 	bl	b4096 <_Znwj>
   b6cbe:	4603      	mov	r3, r0
   b6cc0:	2800      	cmp	r0, #0
   b6cc2:	d0f0      	beq.n	b6ca6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b6cc4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6cc8:	e883 0003 	stmia.w	r3, {r0, r1}
   b6ccc:	e7eb      	b.n	b6ca6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6cce:	6800      	ldr	r0, [r0, #0]
   b6cd0:	2800      	cmp	r0, #0
   b6cd2:	d0ee      	beq.n	b6cb2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b6cd4:	2108      	movs	r1, #8
   b6cd6:	f002 fd92 	bl	b97fe <_ZdlPvj>
   b6cda:	e7ea      	b.n	b6cb2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b6cdc <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b6cdc:	b510      	push	{r4, lr}
      if (_M_manager)
   b6cde:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b6ce0:	4604      	mov	r4, r0
      if (_M_manager)
   b6ce2:	b113      	cbz	r3, b6cea <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6ce4:	2203      	movs	r2, #3
   b6ce6:	4601      	mov	r1, r0
   b6ce8:	4798      	blx	r3
    }
   b6cea:	4620      	mov	r0, r4
   b6cec:	bd10      	pop	{r4, pc}

000b6cee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6cee:	b510      	push	{r4, lr}
   b6cf0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b6cf2:	3058      	adds	r0, #88	; 0x58
   b6cf4:	f7ff fff2 	bl	b6cdc <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b6cf8:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b6cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6d00:	f001 bc72 	b.w	b85e8 <_ZN6StringD1Ev>

000b6d04 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6d04:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6d06:	6843      	ldr	r3, [r0, #4]
   b6d08:	3b01      	subs	r3, #1
    {
   b6d0a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6d0c:	6043      	str	r3, [r0, #4]
   b6d0e:	b963      	cbnz	r3, b6d2a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6d10:	6803      	ldr	r3, [r0, #0]
   b6d12:	689b      	ldr	r3, [r3, #8]
   b6d14:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6d16:	68a3      	ldr	r3, [r4, #8]
   b6d18:	3b01      	subs	r3, #1
   b6d1a:	60a3      	str	r3, [r4, #8]
   b6d1c:	b92b      	cbnz	r3, b6d2a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6d1e:	6823      	ldr	r3, [r4, #0]
   b6d20:	4620      	mov	r0, r4
   b6d22:	68db      	ldr	r3, [r3, #12]
    }
   b6d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6d28:	4718      	bx	r3
    }
   b6d2a:	bd10      	pop	{r4, pc}

000b6d2c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b6d2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6d30:	b2da      	uxtb	r2, r3
   b6d32:	2a09      	cmp	r2, #9
   b6d34:	d801      	bhi.n	b6d3a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b6d36:	4618      	mov	r0, r3
   b6d38:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b6d3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b6d3e:	2b05      	cmp	r3, #5
   b6d40:	d801      	bhi.n	b6d46 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b6d42:	3857      	subs	r0, #87	; 0x57
   b6d44:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b6d46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b6d4a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b6d4c:	bf94      	ite	ls
   b6d4e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b6d50:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b6d54:	4770      	bx	lr
	...

000b6d58 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b6d58:	b510      	push	{r4, lr}
            locked_(false) {
   b6d5a:	2300      	movs	r3, #0
   b6d5c:	7003      	strb	r3, [r0, #0]
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b6d5e:	4b04      	ldr	r3, [pc, #16]	; (b6d70 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b6d60:	4604      	mov	r4, r0
   b6d62:	6818      	ldr	r0, [r3, #0]
   b6d64:	f7ff fb40 	bl	b63e8 <os_mutex_recursive_lock>
        locked_ = true;
   b6d68:	2301      	movs	r3, #1
   b6d6a:	7023      	strb	r3, [r4, #0]
    }
   b6d6c:	4620      	mov	r0, r4
   b6d6e:	bd10      	pop	{r4, pc}
   b6d70:	2003e638 	.word	0x2003e638

000b6d74 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b6d74:	b510      	push	{r4, lr}
        if (locked_) {
   b6d76:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b6d78:	4604      	mov	r4, r0
        if (locked_) {
   b6d7a:	b11b      	cbz	r3, b6d84 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6d7c:	4b02      	ldr	r3, [pc, #8]	; (b6d88 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6d7e:	6818      	ldr	r0, [r3, #0]
   b6d80:	f7ff fb3a 	bl	b63f8 <os_mutex_recursive_unlock>
    }
   b6d84:	4620      	mov	r0, r4
   b6d86:	bd10      	pop	{r4, pc}
   b6d88:	2003e638 	.word	0x2003e638

000b6d8c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b6d8c:	b082      	sub	sp, #8
   b6d8e:	4603      	mov	r3, r0
    address_ = addr;
   b6d90:	6808      	ldr	r0, [r1, #0]
   b6d92:	6849      	ldr	r1, [r1, #4]
   b6d94:	466a      	mov	r2, sp
   b6d96:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b6d98:	466a      	mov	r2, sp
   b6d9a:	ca03      	ldmia	r2!, {r0, r1}
   b6d9c:	6018      	str	r0, [r3, #0]
}
   b6d9e:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6da0:	6059      	str	r1, [r3, #4]
}
   b6da2:	b002      	add	sp, #8
   b6da4:	4770      	bx	lr

000b6da6 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b6da6:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b6da8:	7982      	ldrb	r2, [r0, #6]
   b6daa:	798b      	ldrb	r3, [r1, #6]
   b6dac:	429a      	cmp	r2, r3
   b6dae:	d106      	bne.n	b6dbe <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6db0:	2206      	movs	r2, #6
   b6db2:	f003 f8cf 	bl	b9f54 <memcmp>
   b6db6:	fab0 f080 	clz	r0, r0
   b6dba:	0940      	lsrs	r0, r0, #5
}
   b6dbc:	bd08      	pop	{r3, pc}
    return false;
   b6dbe:	2000      	movs	r0, #0
   b6dc0:	e7fc      	b.n	b6dbc <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b6dc2 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b6dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6dc6:	6003      	str	r3, [r0, #0]
   b6dc8:	8083      	strh	r3, [r0, #4]
}
   b6dca:	2000      	movs	r0, #0
   b6dcc:	4770      	bx	lr

000b6dce <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b6dce:	b508      	push	{r3, lr}
   b6dd0:	4602      	mov	r2, r0
        : address_{} {
   b6dd2:	2100      	movs	r1, #0
   b6dd4:	6001      	str	r1, [r0, #0]
   b6dd6:	6041      	str	r1, [r0, #4]
    clear();
   b6dd8:	f7ff fff3 	bl	b6dc2 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b6ddc:	7191      	strb	r1, [r2, #6]
}
   b6dde:	4610      	mov	r0, r2
   b6de0:	bd08      	pop	{r3, pc}
	...

000b6de4 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b6de4:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b6de6:	2301      	movs	r3, #1
   b6de8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6dea:	4b05      	ldr	r3, [pc, #20]	; (b6e00 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b6dec:	4602      	mov	r2, r0
   b6dee:	f103 0110 	add.w	r1, r3, #16
   b6df2:	f853 4b04 	ldr.w	r4, [r3], #4
   b6df6:	f842 4b04 	str.w	r4, [r2], #4
   b6dfa:	428b      	cmp	r3, r1
   b6dfc:	d1f9      	bne.n	b6df2 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b6dfe:	bd10      	pop	{r4, pc}
   b6e00:	000bac46 	.word	0x000bac46

000b6e04 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   b6e04:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   b6e06:	690b      	ldr	r3, [r1, #16]
   b6e08:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b6e0a:	f101 0210 	add.w	r2, r1, #16
   b6e0e:	4603      	mov	r3, r0
   b6e10:	f851 4b04 	ldr.w	r4, [r1], #4
   b6e14:	f843 4b04 	str.w	r4, [r3], #4
   b6e18:	4291      	cmp	r1, r2
   b6e1a:	d1f9      	bne.n	b6e10 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   b6e1c:	bd10      	pop	{r4, pc}

000b6e1e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6e1e:	b510      	push	{r4, lr}
    if (uuid128) {
   b6e20:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6e22:	4604      	mov	r4, r0
    if (uuid128) {
   b6e24:	b1b1      	cbz	r1, b6e54 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b6e26:	2a01      	cmp	r2, #1
   b6e28:	f101 0210 	add.w	r2, r1, #16
   b6e2c:	d10a      	bne.n	b6e44 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b6e2e:	4601      	mov	r1, r0
   b6e30:	f853 0b04 	ldr.w	r0, [r3], #4
   b6e34:	f841 0b04 	str.w	r0, [r1], #4
   b6e38:	4293      	cmp	r3, r2
   b6e3a:	d1f9      	bne.n	b6e30 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b6e3c:	2301      	movs	r3, #1
   b6e3e:	6123      	str	r3, [r4, #16]
}
   b6e40:	4620      	mov	r0, r4
   b6e42:	bd10      	pop	{r4, pc}
   b6e44:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b6e46:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b6e4a:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b6e4e:	429a      	cmp	r2, r3
   b6e50:	d1f9      	bne.n	b6e46 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b6e52:	e7f3      	b.n	b6e3c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b6e54:	2210      	movs	r2, #16
   b6e56:	f003 f8b5 	bl	b9fc4 <memset>
   b6e5a:	e7f1      	b.n	b6e40 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b6e5c <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b6e5c:	b538      	push	{r3, r4, r5, lr}
   b6e5e:	4604      	mov	r4, r0
   b6e60:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b6e62:	461a      	mov	r2, r3
   b6e64:	f7ff ffdb 	bl	b6e1e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b6e68:	81a5      	strh	r5, [r4, #12]
}
   b6e6a:	4620      	mov	r0, r4
   b6e6c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6e70 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b6e70:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b6e72:	6902      	ldr	r2, [r0, #16]
   b6e74:	b922      	cbnz	r2, b6e80 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b6e76:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6e78:	3800      	subs	r0, #0
   b6e7a:	bf18      	it	ne
   b6e7c:	2001      	movne	r0, #1
}
   b6e7e:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6e80:	4902      	ldr	r1, [pc, #8]	; (b6e8c <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b6e82:	2210      	movs	r2, #16
   b6e84:	f003 f866 	bl	b9f54 <memcmp>
   b6e88:	e7f6      	b.n	b6e78 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b6e8a:	bf00      	nop
   b6e8c:	000bac66 	.word	0x000bac66

000b6e90 <_ZNK8particle7BleUuid4typeEv>:
}
   b6e90:	6900      	ldr	r0, [r0, #16]
   b6e92:	4770      	bx	lr

000b6e94 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b6e94:	b538      	push	{r3, r4, r5, lr}
   b6e96:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b6e98:	2214      	movs	r2, #20
   b6e9a:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b6e9c:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b6e9e:	f003 f891 	bl	b9fc4 <memset>
    if (type_ == BleUuidType::SHORT) {
   b6ea2:	6923      	ldr	r3, [r4, #16]
   b6ea4:	b91b      	cbnz	r3, b6eae <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b6ea6:	89a3      	ldrh	r3, [r4, #12]
   b6ea8:	802b      	strh	r3, [r5, #0]
}
   b6eaa:	4628      	mov	r0, r5
   b6eac:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b6eae:	2301      	movs	r3, #1
   b6eb0:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b6eb2:	4621      	mov	r1, r4
   b6eb4:	462b      	mov	r3, r5
   b6eb6:	f104 0210 	add.w	r2, r4, #16
   b6eba:	f851 0b04 	ldr.w	r0, [r1], #4
   b6ebe:	f843 0b04 	str.w	r0, [r3], #4
   b6ec2:	4291      	cmp	r1, r2
   b6ec4:	d1f9      	bne.n	b6eba <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b6ec6:	e7f0      	b.n	b6eaa <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b6ec8 <_ZNK8particle7BleUuid7shortedEv>:
}
   b6ec8:	8980      	ldrh	r0, [r0, #12]
   b6eca:	4770      	bx	lr

000b6ecc <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b6ecc:	4770      	bx	lr

000b6ece <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b6ece:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6ed0:	6902      	ldr	r2, [r0, #16]
   b6ed2:	690b      	ldr	r3, [r1, #16]
   b6ed4:	429a      	cmp	r2, r3
   b6ed6:	d106      	bne.n	b6ee6 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b6ed8:	2210      	movs	r2, #16
   b6eda:	f003 f83b 	bl	b9f54 <memcmp>
   b6ede:	fab0 f080 	clz	r0, r0
   b6ee2:	0940      	lsrs	r0, r0, #5
}
   b6ee4:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6ee6:	2000      	movs	r0, #0
   b6ee8:	e7fc      	b.n	b6ee4 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b6eec <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b6eec:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b6eee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b6ef2:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6ef4:	4b34      	ldr	r3, [pc, #208]	; (b6fc8 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b6ef6:	460c      	mov	r4, r1
   b6ef8:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6efa:	4602      	mov	r2, r0
   b6efc:	f103 0110 	add.w	r1, r3, #16
   b6f00:	f853 0b04 	ldr.w	r0, [r3], #4
   b6f04:	f842 0b04 	str.w	r0, [r2], #4
   b6f08:	428b      	cmp	r3, r1
   b6f0a:	d1f9      	bne.n	b6f00 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b6f0c:	b344      	cbz	r4, b6f60 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b6f0e:	2124      	movs	r1, #36	; 0x24
   b6f10:	4620      	mov	r0, r4
   b6f12:	f003 f8ba 	bl	ba08a <strnlen>
   b6f16:	2804      	cmp	r0, #4
   b6f18:	f04f 0500 	mov.w	r5, #0
   b6f1c:	d123      	bne.n	b6f66 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b6f1e:	f8ad 5004 	strh.w	r5, [sp, #4]
   b6f22:	af01      	add	r7, sp, #4
   b6f24:	1ca5      	adds	r5, r4, #2
   b6f26:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b6f28:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b6f2c:	f7ff fefe 	bl	b6d2c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b6f30:	f1b0 0800 	subs.w	r8, r0, #0
   b6f34:	db12      	blt.n	b6f5c <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b6f36:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b6f3a:	f7ff fef7 	bl	b6d2c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b6f3e:	2800      	cmp	r0, #0
   b6f40:	db0c      	blt.n	b6f5c <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b6f42:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6f44:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b6f48:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6f4a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b6f4e:	d1eb      	bne.n	b6f28 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b6f50:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b6f54:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b6f56:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6f5a:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b6f5c:	2300      	movs	r3, #0
   b6f5e:	6133      	str	r3, [r6, #16]
}
   b6f60:	b002      	add	sp, #8
   b6f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b6f66:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6f6a:	2124      	movs	r1, #36	; 0x24
   b6f6c:	4620      	mov	r0, r4
   b6f6e:	f003 f88c 	bl	ba08a <strnlen>
   b6f72:	42a8      	cmp	r0, r5
   b6f74:	d807      	bhi.n	b6f86 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b6f76:	4642      	mov	r2, r8
   b6f78:	2100      	movs	r1, #0
   b6f7a:	4630      	mov	r0, r6
}
   b6f7c:	b002      	add	sp, #8
   b6f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b6f82:	f003 b81f 	b.w	b9fc4 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6f86:	f1b8 0f00 	cmp.w	r8, #0
   b6f8a:	d0e9      	beq.n	b6f60 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b6f8c:	5d60      	ldrb	r0, [r4, r5]
   b6f8e:	f7ff fecd 	bl	b6d2c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b6f92:	0603      	lsls	r3, r0, #24
   b6f94:	d415      	bmi.n	b6fc2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b6f96:	0100      	lsls	r0, r0, #4
   b6f98:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6f9c:	b2c7      	uxtb	r7, r0
   b6f9e:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b6fa2:	2124      	movs	r1, #36	; 0x24
   b6fa4:	4620      	mov	r0, r4
   b6fa6:	f003 f870 	bl	ba08a <strnlen>
   b6faa:	3501      	adds	r5, #1
   b6fac:	42a8      	cmp	r0, r5
   b6fae:	d908      	bls.n	b6fc2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b6fb0:	5d60      	ldrb	r0, [r4, r5]
   b6fb2:	f7ff febb 	bl	b6d2c <_ZN8particle11hexToNibbleEc>
   b6fb6:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b6fb8:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b6fba:	bfa4      	itt	ge
   b6fbc:	4338      	orrge	r0, r7
   b6fbe:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6fc2:	3501      	adds	r5, #1
   b6fc4:	e7d1      	b.n	b6f6a <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b6fc6:	bf00      	nop
   b6fc8:	000bac46 	.word	0x000bac46

000b6fcc <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b6fcc:	b513      	push	{r0, r1, r4, lr}
   b6fce:	4604      	mov	r4, r0
   b6fd0:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b6fd2:	f7ff ff07 	bl	b6de4 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b6fd6:	4620      	mov	r0, r4
   b6fd8:	9901      	ldr	r1, [sp, #4]
   b6fda:	f7ff ff87 	bl	b6eec <_ZN8particle7BleUuid9constructEPKc>
}
   b6fde:	4620      	mov	r0, r4
   b6fe0:	b002      	add	sp, #8
   b6fe2:	bd10      	pop	{r4, pc}

000b6fe4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6fe4:	b430      	push	{r4, r5}
   b6fe6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b6fea:	b11a      	cbz	r2, b6ff4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b6fec:	9502      	str	r5, [sp, #8]
}
   b6fee:	bc30      	pop	{r4, r5}
   b6ff0:	f7ff bdd5 	b.w	b6b9e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfLen_;
   b6ff4:	6a00      	ldr	r0, [r0, #32]
}
   b6ff6:	bc30      	pop	{r4, r5}
   b6ff8:	4770      	bx	lr

000b6ffa <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b6ffa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6ffc:	4604      	mov	r4, r0
          selfLen_(0) {
   b6ffe:	221f      	movs	r2, #31
   b7000:	2100      	movs	r1, #0
   b7002:	f002 ffdf 	bl	b9fc4 <memset>
   b7006:	2300      	movs	r3, #0
   b7008:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b700a:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b700c:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b700e:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7010:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7014:	4619      	mov	r1, r3
   b7016:	f10d 020f 	add.w	r2, sp, #15
   b701a:	4620      	mov	r0, r4
   b701c:	f7ff ffe2 	bl	b6fe4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7020:	4620      	mov	r0, r4
   b7022:	b004      	add	sp, #16
   b7024:	bd10      	pop	{r4, pc}

000b7026 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b7026:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   b7028:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b702a:	460e      	mov	r6, r1
   b702c:	ab01      	add	r3, sp, #4
   b702e:	6a01      	ldr	r1, [r0, #32]
   b7030:	4604      	mov	r4, r0
   b7032:	f7ff fd9f 	bl	b6b74 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b7036:	4605      	mov	r5, r0
   b7038:	b178      	cbz	r0, b705a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   b703a:	9801      	ldr	r0, [sp, #4]
   b703c:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   b703e:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   b7040:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   b7042:	4421      	add	r1, r4
   b7044:	1b52      	subs	r2, r2, r5
   b7046:	4420      	add	r0, r4
   b7048:	f002 ff94 	bl	b9f74 <memcpy>
        selfLen_ -= len;
   b704c:	6a20      	ldr	r0, [r4, #32]
   b704e:	1b40      	subs	r0, r0, r5
   b7050:	6220      	str	r0, [r4, #32]
        remove(type);
   b7052:	4631      	mov	r1, r6
   b7054:	4620      	mov	r0, r4
   b7056:	f7ff ffe6 	bl	b7026 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b705a:	b002      	add	sp, #8
   b705c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7060 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b7060:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b7062:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7066:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b7068:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b706a:	8043      	strh	r3, [r0, #2]
   b706c:	220e      	movs	r2, #14
   b706e:	4629      	mov	r1, r5
   b7070:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b7072:	7105      	strb	r5, [r0, #4]
   b7074:	3006      	adds	r0, #6
   b7076:	f002 ffa5 	bl	b9fc4 <memset>
   b707a:	f104 0014 	add.w	r0, r4, #20
   b707e:	f7ff feb1 	bl	b6de4 <_ZN8particle7BleUuidC1Ev>
   b7082:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b7086:	f7ff fead 	bl	b6de4 <_ZN8particle7BleUuidC1Ev>
   b708a:	4904      	ldr	r1, [pc, #16]	; (b709c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b708c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7090:	f001 faf5 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b7094:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b7096:	4620      	mov	r0, r4
   b7098:	bd38      	pop	{r3, r4, r5, pc}
   b709a:	bf00      	nop
   b709c:	000ba587 	.word	0x000ba587

000b70a0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b70a0:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b70a2:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b70a6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b70aa:	4293      	cmp	r3, r2
   b70ac:	4618      	mov	r0, r3
   b70ae:	d006      	beq.n	b70be <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b70b0:	6804      	ldr	r4, [r0, #0]
   b70b2:	8824      	ldrh	r4, [r4, #0]
   b70b4:	428c      	cmp	r4, r1
   b70b6:	f103 0308 	add.w	r3, r3, #8
   b70ba:	d1f6      	bne.n	b70aa <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b70bc:	bd10      	pop	{r4, pc}
        return nullptr;
   b70be:	2000      	movs	r0, #0
   b70c0:	e7fc      	b.n	b70bc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b70c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b70c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b70c6:	4606      	mov	r6, r0
   b70c8:	b085      	sub	sp, #20
   b70ca:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b70cc:	460d      	mov	r5, r1
   b70ce:	2900      	cmp	r1, #0
   b70d0:	d050      	beq.n	b7174 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b70d2:	2a00      	cmp	r2, #0
   b70d4:	d04e      	beq.n	b7174 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b70d6:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b70d8:	7823      	ldrb	r3, [r4, #0]
   b70da:	2af4      	cmp	r2, #244	; 0xf4
   b70dc:	bf28      	it	cs
   b70de:	22f4      	movcs	r2, #244	; 0xf4
   b70e0:	b343      	cbz	r3, b7134 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b70e2:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b70e4:	0798      	lsls	r0, r3, #30
   b70e6:	d509      	bpl.n	b70fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b70e8:	89a0      	ldrh	r0, [r4, #12]
   b70ea:	9203      	str	r2, [sp, #12]
   b70ec:	2300      	movs	r3, #0
   b70ee:	f7ff f8fd 	bl	b62ec <hal_ble_gatt_server_set_characteristic_value>
   b70f2:	2800      	cmp	r0, #0
   b70f4:	9a03      	ldr	r2, [sp, #12]
   b70f6:	da03      	bge.n	b7100 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b70f8:	b005      	add	sp, #20
   b70fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b70fc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7100:	6834      	ldr	r4, [r6, #0]
   b7102:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b7104:	06d9      	lsls	r1, r3, #27
   b7106:	d509      	bpl.n	b711c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b7108:	2f01      	cmp	r7, #1
   b710a:	d007      	beq.n	b711c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b710c:	89a0      	ldrh	r0, [r4, #12]
   b710e:	2300      	movs	r3, #0
   b7110:	4629      	mov	r1, r5
}
   b7112:	b005      	add	sp, #20
   b7114:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7118:	f7ff b91a 	b.w	b6350 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b711c:	069b      	lsls	r3, r3, #26
   b711e:	d5eb      	bpl.n	b70f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7120:	2f02      	cmp	r7, #2
   b7122:	d0e9      	beq.n	b70f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7124:	89a0      	ldrh	r0, [r4, #12]
   b7126:	2300      	movs	r3, #0
   b7128:	4629      	mov	r1, r5
}
   b712a:	b005      	add	sp, #20
   b712c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7130:	f7ff b918 	b.w	b6364 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b7134:	8860      	ldrh	r0, [r4, #2]
   b7136:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b713a:	4288      	cmp	r0, r1
   b713c:	d01c      	beq.n	b7178 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b713e:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b7140:	074e      	lsls	r6, r1, #29
   b7142:	d501      	bpl.n	b7148 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b7144:	2f01      	cmp	r7, #1
   b7146:	d104      	bne.n	b7152 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7148:	070b      	lsls	r3, r1, #28
   b714a:	d409      	bmi.n	b7160 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b714c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7150:	e7d2      	b.n	b70f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7152:	89a1      	ldrh	r1, [r4, #12]
   b7154:	9300      	str	r3, [sp, #0]
   b7156:	4613      	mov	r3, r2
   b7158:	462a      	mov	r2, r5
   b715a:	f7ff f8db 	bl	b6314 <hal_ble_gatt_client_write_without_response>
   b715e:	e7cb      	b.n	b70f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7160:	2f02      	cmp	r7, #2
   b7162:	d0f3      	beq.n	b714c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7164:	2300      	movs	r3, #0
   b7166:	89a1      	ldrh	r1, [r4, #12]
   b7168:	9300      	str	r3, [sp, #0]
   b716a:	4613      	mov	r3, r2
   b716c:	462a      	mov	r2, r5
   b716e:	f7ff f8c7 	bl	b6300 <hal_ble_gatt_client_write_with_response>
   b7172:	e7c1      	b.n	b70f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b7174:	4802      	ldr	r0, [pc, #8]	; (b7180 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b7176:	e7bf      	b.n	b70f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b7178:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b717c:	e7bc      	b.n	b70f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b717e:	bf00      	nop
   b7180:	fffffef2 	.word	0xfffffef2

000b7184 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   b7184:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   b7186:	688a      	ldr	r2, [r1, #8]
   b7188:	6809      	ldr	r1, [r1, #0]
   b718a:	f7ff bf9b 	b.w	b70c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b718e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b718e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7190:	460c      	mov	r4, r1
   b7192:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b7194:	21f4      	movs	r1, #244	; 0xf4
   b7196:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b7198:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b719a:	f002 ff76 	bl	ba08a <strnlen>
   b719e:	9b01      	ldr	r3, [sp, #4]
   b71a0:	4602      	mov	r2, r0
   b71a2:	4621      	mov	r1, r4
   b71a4:	4628      	mov	r0, r5
}
   b71a6:	b003      	add	sp, #12
   b71a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b71ac:	f7ff bf8a 	b.w	b70c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b71b0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b71b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b71b4:	2600      	movs	r6, #0
   b71b6:	6006      	str	r6, [r0, #0]
   b71b8:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b71ba:	2028      	movs	r0, #40	; 0x28
   b71bc:	460c      	mov	r4, r1
   b71be:	f7fc ff6a 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b71c2:	1e05      	subs	r5, r0, #0
   b71c4:	f105 080c 	add.w	r8, r5, #12
   b71c8:	d00f      	beq.n	b71ea <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b71ca:	2301      	movs	r3, #1
   b71cc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b71d0:	4b08      	ldr	r3, [pc, #32]	; (b71f4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b71d2:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b71d4:	4640      	mov	r0, r8
   b71d6:	f7ff fe05 	bl	b6de4 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b71da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b71dc:	622e      	str	r6, [r5, #32]
   b71de:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b71e2:	4646      	mov	r6, r8
   b71e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b71e6:	6823      	ldr	r3, [r4, #0]
   b71e8:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b71ea:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b71ee:	4638      	mov	r0, r7
   b71f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b71f4:	000bac08 	.word	0x000bac08

000b71f8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b71f8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b71fa:	2500      	movs	r5, #0
   b71fc:	6005      	str	r5, [r0, #0]
   b71fe:	4606      	mov	r6, r0
   b7200:	2030      	movs	r0, #48	; 0x30
   b7202:	f7fc ff48 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7206:	4604      	mov	r4, r0
   b7208:	b188      	cbz	r0, b722e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b720a:	2301      	movs	r3, #1
   b720c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b7210:	4b09      	ldr	r3, [pc, #36]	; (b7238 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b7212:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b7214:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7218:	8183      	strh	r3, [r0, #12]
   b721a:	300e      	adds	r0, #14
   b721c:	f7ff fdd7 	bl	b6dce <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b7220:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b7224:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b7228:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b722c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b722e:	6074      	str	r4, [r6, #4]
   b7230:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b7232:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b7234:	4630      	mov	r0, r6
   b7236:	bd70      	pop	{r4, r5, r6, pc}
   b7238:	000bac24 	.word	0x000bac24

000b723c <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b723c:	b513      	push	{r0, r1, r4, lr}
   b723e:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7240:	a801      	add	r0, sp, #4
   b7242:	f7ff fd89 	bl	b6d58 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b7246:	6823      	ldr	r3, [r4, #0]
   b7248:	881c      	ldrh	r4, [r3, #0]
   b724a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b724e:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b7250:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b7252:	bf18      	it	ne
   b7254:	2401      	movne	r4, #1
    WiringBleLock lk;
   b7256:	f7ff fd8d 	bl	b6d74 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b725a:	4620      	mov	r0, r4
   b725c:	b002      	add	sp, #8
   b725e:	bd10      	pop	{r4, pc}

000b7260 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b7260:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7262:	460d      	mov	r5, r1
   b7264:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7266:	a801      	add	r0, sp, #4
   b7268:	f7ff fd76 	bl	b6d58 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b726c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b726e:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b7272:	6023      	str	r3, [r4, #0]
   b7274:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b7278:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b727a:	a801      	add	r0, sp, #4
   b727c:	f7ff fd7a 	bl	b6d74 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b7280:	4620      	mov	r0, r4
   b7282:	b003      	add	sp, #12
   b7284:	bd30      	pop	{r4, r5, pc}

000b7286 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b7286:	b530      	push	{r4, r5, lr}
   b7288:	4605      	mov	r5, r0
   b728a:	b087      	sub	sp, #28
   b728c:	460c      	mov	r4, r1
    WiringBleLock lk;
   b728e:	a801      	add	r0, sp, #4
   b7290:	f7ff fd62 	bl	b6d58 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b7294:	682a      	ldr	r2, [r5, #0]
   b7296:	6823      	ldr	r3, [r4, #0]
   b7298:	8812      	ldrh	r2, [r2, #0]
   b729a:	881b      	ldrh	r3, [r3, #0]
   b729c:	429a      	cmp	r2, r3
   b729e:	d10d      	bne.n	b72bc <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b72a0:	4629      	mov	r1, r5
   b72a2:	a802      	add	r0, sp, #8
   b72a4:	f7ff ffdc 	bl	b7260 <_ZNK8particle13BlePeerDevice7addressEv>
   b72a8:	4621      	mov	r1, r4
   b72aa:	a804      	add	r0, sp, #16
   b72ac:	f7ff ffd8 	bl	b7260 <_ZNK8particle13BlePeerDevice7addressEv>
   b72b0:	a904      	add	r1, sp, #16
   b72b2:	a802      	add	r0, sp, #8
   b72b4:	f7ff fd77 	bl	b6da6 <_ZNK8particle10BleAddresseqERKS0_>
   b72b8:	4604      	mov	r4, r0
   b72ba:	b900      	cbnz	r0, b72be <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b72bc:	2400      	movs	r4, #0
    WiringBleLock lk;
   b72be:	a801      	add	r0, sp, #4
   b72c0:	f7ff fd58 	bl	b6d74 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b72c4:	4620      	mov	r0, r4
   b72c6:	b007      	add	sp, #28
   b72c8:	bd30      	pop	{r4, r5, pc}
	...

000b72cc <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b72cc:	b510      	push	{r4, lr}
   b72ce:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b72d0:	2054      	movs	r0, #84	; 0x54
   b72d2:	f7fc fee0 	bl	b4096 <_Znwj>
   b72d6:	4601      	mov	r1, r0
   b72d8:	b160      	cbz	r0, b72f4 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b72da:	2300      	movs	r3, #0
   b72dc:	e9c0 3300 	strd	r3, r3, [r0]
   b72e0:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b72e4:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b72e8:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b72ec:	6203      	str	r3, [r0, #32]
   b72ee:	62c3      	str	r3, [r0, #44]	; 0x2c
   b72f0:	63c3      	str	r3, [r0, #60]	; 0x3c
   b72f2:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b72f4:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b72f6:	b919      	cbnz	r1, b7300 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   b72f8:	4a09      	ldr	r2, [pc, #36]	; (b7320 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b72fa:	200a      	movs	r0, #10
   b72fc:	f7ff fa6c 	bl	b67d8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b7300:	2000      	movs	r0, #0
   b7302:	f7fe ffb7 	bl	b6274 <hal_ble_stack_init>
   b7306:	b120      	cbz	r0, b7312 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   b7308:	4a05      	ldr	r2, [pc, #20]	; (b7320 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b730a:	2100      	movs	r1, #0
   b730c:	200a      	movs	r0, #10
   b730e:	f7ff fa63 	bl	b67d8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b7312:	6821      	ldr	r1, [r4, #0]
   b7314:	4803      	ldr	r0, [pc, #12]	; (b7324 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b7316:	2200      	movs	r2, #0
   b7318:	f7ff f810 	bl	b633c <hal_ble_set_callback_on_periph_link_events>
}
   b731c:	4620      	mov	r0, r4
   b731e:	bd10      	pop	{r4, pc}
   b7320:	000b6419 	.word	0x000b6419
   b7324:	000b7741 	.word	0x000b7741

000b7328 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b7328:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b732a:	4c0b      	ldr	r4, [pc, #44]	; (b7358 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b732c:	7823      	ldrb	r3, [r4, #0]
   b732e:	f3bf 8f5b 	dmb	ish
   b7332:	07db      	lsls	r3, r3, #31
   b7334:	d40e      	bmi.n	b7354 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   b7336:	4620      	mov	r0, r4
   b7338:	f7fc feb3 	bl	b40a2 <__cxa_guard_acquire>
   b733c:	b150      	cbz	r0, b7354 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   b733e:	4807      	ldr	r0, [pc, #28]	; (b735c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7340:	f7ff ffc4 	bl	b72cc <_ZN8particle14BleLocalDeviceC1Ev>
   b7344:	4620      	mov	r0, r4
   b7346:	f7fc feb1 	bl	b40ac <__cxa_guard_release>
   b734a:	4a05      	ldr	r2, [pc, #20]	; (b7360 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   b734c:	4905      	ldr	r1, [pc, #20]	; (b7364 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   b734e:	4803      	ldr	r0, [pc, #12]	; (b735c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7350:	f002 fa50 	bl	b97f4 <__aeabi_atexit>
    return instance;
}
   b7354:	4801      	ldr	r0, [pc, #4]	; (b735c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7356:	bd10      	pop	{r4, pc}
   b7358:	2003e630 	.word	0x2003e630
   b735c:	2003e63c 	.word	0x2003e63c
   b7360:	2003da30 	.word	0x2003da30
   b7364:	000b7565 	.word	0x000b7565

000b7368 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7368:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b736a:	6803      	ldr	r3, [r0, #0]
   b736c:	3b09      	subs	r3, #9
   b736e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7370:	b08d      	sub	sp, #52	; 0x34
   b7372:	4604      	mov	r4, r0
   b7374:	460d      	mov	r5, r1
    switch (event->type) {
   b7376:	d811      	bhi.n	b739c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b7378:	f7ff ffd6 	bl	b7328 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b737c:	88a1      	ldrh	r1, [r4, #4]
   b737e:	6800      	ldr	r0, [r0, #0]
   b7380:	f7ff fe8e 	bl	b70a0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b7384:	4603      	mov	r3, r0
   b7386:	b958      	cbnz	r0, b73a0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b7388:	2220      	movs	r2, #32
   b738a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b738e:	4a0b      	ldr	r2, [pc, #44]	; (b73bc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b7390:	9200      	str	r2, [sp, #0]
   b7392:	490b      	ldr	r1, [pc, #44]	; (b73c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b7394:	aa04      	add	r2, sp, #16
   b7396:	2032      	movs	r0, #50	; 0x32
   b7398:	f7ff fa26 	bl	b67e8 <log_message>
}
   b739c:	b00d      	add	sp, #52	; 0x34
   b739e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b73a0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b73a2:	2a00      	cmp	r2, #0
   b73a4:	d0fa      	beq.n	b739c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b73a6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b73aa:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b73ae:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b73b2:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b73b4:	aa04      	add	r2, sp, #16
   b73b6:	a903      	add	r1, sp, #12
   b73b8:	47a0      	blx	r4
}
   b73ba:	e7ef      	b.n	b739c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b73bc:	000bab15 	.word	0x000bab15
   b73c0:	000baaee 	.word	0x000baaee

000b73c4 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b73c4:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b73c6:	2000      	movs	r0, #0
   b73c8:	f7fe ff54 	bl	b6274 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b73cc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b73d0:	bd08      	pop	{r3, pc}

000b73d2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b73d2:	4608      	mov	r0, r1
   b73d4:	b911      	cbnz	r1, b73dc <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b73d6:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b73d8:	f7fe bf5c 	b.w	b6294 <hal_ble_gap_set_advertising_data>
   b73dc:	6a09      	ldr	r1, [r1, #32]
   b73de:	2200      	movs	r2, #0
   b73e0:	e7fa      	b.n	b73d8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b73e2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b73e2:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   b73e4:	4608      	mov	r0, r1
   b73e6:	b929      	cbnz	r1, b73f4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b73e8:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b73ea:	b003      	add	sp, #12
   b73ec:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b73f0:	f7fe bf58 	b.w	b62a4 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b73f4:	2101      	movs	r1, #1
   b73f6:	9001      	str	r0, [sp, #4]
   b73f8:	f7ff fe15 	bl	b7026 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b73fc:	9801      	ldr	r0, [sp, #4]
   b73fe:	2200      	movs	r2, #0
   b7400:	6a01      	ldr	r1, [r0, #32]
   b7402:	e7f2      	b.n	b73ea <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000b7404 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b7404:	b538      	push	{r3, r4, r5, lr}
   b7406:	4604      	mov	r4, r0
   b7408:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b740a:	f7ff ffe2 	bl	b73d2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b740e:	2800      	cmp	r0, #0
   b7410:	db0a      	blt.n	b7428 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b7412:	4629      	mov	r1, r5
   b7414:	4620      	mov	r0, r4
   b7416:	f7ff ffe4 	bl	b73e2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b741a:	2800      	cmp	r0, #0
   b741c:	db04      	blt.n	b7428 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b741e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b7422:	2000      	movs	r0, #0
   b7424:	f7fe bf46 	b.w	b62b4 <hal_ble_gap_start_advertising>
}
   b7428:	bd38      	pop	{r3, r4, r5, pc}

000b742a <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b742a:	6803      	ldr	r3, [r0, #0]
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b742c:	69d8      	ldr	r0, [r3, #28]
}
   b742e:	2800      	cmp	r0, #0
   b7430:	bfd4      	ite	le
   b7432:	2000      	movle	r0, #0
   b7434:	2001      	movgt	r0, #1
   b7436:	4770      	bx	lr

000b7438 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b7438:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b743a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b743c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b743e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7440:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b7442:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7444:	f7fc fe27 	bl	b4096 <_Znwj>
   b7448:	b118      	cbz	r0, b7452 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b744a:	682b      	ldr	r3, [r5, #0]
   b744c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b744e:	686b      	ldr	r3, [r5, #4]
   b7450:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b7452:	4b03      	ldr	r3, [pc, #12]	; (b7460 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b7454:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7456:	4b03      	ldr	r3, [pc, #12]	; (b7464 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7458:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b745a:	60a3      	str	r3, [r4, #8]
      }
   b745c:	4620      	mov	r0, r4
   b745e:	bd38      	pop	{r3, r4, r5, pc}
   b7460:	000b6c45 	.word	0x000b6c45
   b7464:	000b6c9d 	.word	0x000b6c9d

000b7468 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b7468:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b746a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b746c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b746e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7470:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b7472:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7474:	f7fc fe0f 	bl	b4096 <_Znwj>
   b7478:	b118      	cbz	r0, b7482 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   b747a:	682b      	ldr	r3, [r5, #0]
   b747c:	6003      	str	r3, [r0, #0]
   b747e:	686b      	ldr	r3, [r5, #4]
   b7480:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b7482:	4b03      	ldr	r3, [pc, #12]	; (b7490 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b7484:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7486:	4b03      	ldr	r3, [pc, #12]	; (b7494 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7488:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b748a:	60a3      	str	r3, [r4, #8]
      }
   b748c:	4620      	mov	r0, r4
   b748e:	bd38      	pop	{r3, r4, r5, pc}
   b7490:	000b6c39 	.word	0x000b6c39
   b7494:	000b6c5d 	.word	0x000b6c5d

000b7498 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b7498:	680b      	ldr	r3, [r1, #0]
   b749a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b749c:	b113      	cbz	r3, b74a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b749e:	685a      	ldr	r2, [r3, #4]
   b74a0:	3201      	adds	r2, #1
   b74a2:	605a      	str	r2, [r3, #4]
      }
   b74a4:	4770      	bx	lr

000b74a6 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b74a6:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b74a8:	f851 3b04 	ldr.w	r3, [r1], #4
   b74ac:	4604      	mov	r4, r0
   b74ae:	f840 3b04 	str.w	r3, [r0], #4
   b74b2:	f7ff fff1 	bl	b7498 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b74b6:	6823      	ldr	r3, [r4, #0]
   b74b8:	b90b      	cbnz	r3, b74be <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b74ba:	f7ff fbb5 	bl	b6c28 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b74be:	4620      	mov	r0, r4
   b74c0:	bd10      	pop	{r4, pc}

000b74c2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b74c2:	b510      	push	{r4, lr}
   b74c4:	f851 3b04 	ldr.w	r3, [r1], #4
   b74c8:	4604      	mov	r4, r0
   b74ca:	f840 3b04 	str.w	r3, [r0], #4
   b74ce:	f7ff ffe3 	bl	b7498 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b74d2:	4620      	mov	r0, r4
   b74d4:	bd10      	pop	{r4, pc}

000b74d6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b74d6:	b510      	push	{r4, lr}
   b74d8:	f851 3b04 	ldr.w	r3, [r1], #4
   b74dc:	4604      	mov	r4, r0
   b74de:	f840 3b04 	str.w	r3, [r0], #4
   b74e2:	f7ff ffd9 	bl	b7498 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b74e6:	4620      	mov	r0, r4
   b74e8:	bd10      	pop	{r4, pc}

000b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b74ea:	b510      	push	{r4, lr}
   b74ec:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b74ee:	6800      	ldr	r0, [r0, #0]
   b74f0:	b108      	cbz	r0, b74f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b74f2:	f7ff fc07 	bl	b6d04 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b74f6:	4620      	mov	r0, r4
   b74f8:	bd10      	pop	{r4, pc}

000b74fa <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b74fa:	b510      	push	{r4, lr}
   b74fc:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b74fe:	3004      	adds	r0, #4
   b7500:	f7ff fff3 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7504:	4620      	mov	r0, r4
   b7506:	bd10      	pop	{r4, pc}

000b7508 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7508:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b750a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b750e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7510:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7514:	42ae      	cmp	r6, r5
   b7516:	d004      	beq.n	b7522 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b7518:	1d28      	adds	r0, r5, #4
   b751a:	f7ff ffe6 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b751e:	3508      	adds	r5, #8
   b7520:	e7f8      	b.n	b7514 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7522:	6820      	ldr	r0, [r4, #0]
   b7524:	f7ff fa80 	bl	b6a28 <free>
}
   b7528:	4620      	mov	r0, r4
   b752a:	bd70      	pop	{r4, r5, r6, pc}

000b752c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b752c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b752e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7532:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7534:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7538:	42ae      	cmp	r6, r5
   b753a:	d004      	beq.n	b7546 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b753c:	1d28      	adds	r0, r5, #4
   b753e:	f7ff ffd4 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7542:	3508      	adds	r5, #8
   b7544:	e7f8      	b.n	b7538 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7546:	6820      	ldr	r0, [r4, #0]
   b7548:	f7ff fa6e 	bl	b6a28 <free>
}
   b754c:	4620      	mov	r0, r4
   b754e:	bd70      	pop	{r4, r5, r6, pc}

000b7550 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7550:	b510      	push	{r4, lr}
   b7552:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b7554:	3024      	adds	r0, #36	; 0x24
   b7556:	f7ff ffe9 	bl	b752c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b755a:	f104 0018 	add.w	r0, r4, #24
   b755e:	f7ff ffd3 	bl	b7508 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b7562:	bd10      	pop	{r4, pc}

000b7564 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   b7564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   b7566:	6804      	ldr	r4, [r0, #0]
   b7568:	4606      	mov	r6, r0
   b756a:	b324      	cbz	r4, b75b6 <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   b756c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7570:	f7ff fbb4 	bl	b6cdc <_ZNSt14_Function_baseD1Ev>
   b7574:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7578:	f7ff fbb0 	bl	b6cdc <_ZNSt14_Function_baseD1Ev>
   b757c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7580:	f7ff fbac 	bl	b6cdc <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b7584:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b7588:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   b758c:	42af      	cmp	r7, r5
   b758e:	d004      	beq.n	b759a <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   b7590:	1d28      	adds	r0, r5, #4
   b7592:	f7ff ffaa 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7596:	3508      	adds	r5, #8
   b7598:	e7f8      	b.n	b758c <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   b759a:	69a0      	ldr	r0, [r4, #24]
   b759c:	f7ff fa44 	bl	b6a28 <free>
    ~BleLocalDeviceImpl() = default;
   b75a0:	f104 000c 	add.w	r0, r4, #12
   b75a4:	f7ff ffc2 	bl	b752c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b75a8:	4620      	mov	r0, r4
   b75aa:	f7ff ffad 	bl	b7508 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b75ae:	2154      	movs	r1, #84	; 0x54
   b75b0:	4620      	mov	r0, r4
   b75b2:	f002 f924 	bl	b97fe <_ZdlPvj>
   b75b6:	4630      	mov	r0, r6
   b75b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b75ba <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b75ba:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b75bc:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b75be:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b75c2:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b75c6:	6803      	ldr	r3, [r0, #0]
   b75c8:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b75ca:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b75cc:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b75ce:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b75d0:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b75d2:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b75d4:	f7ff ff89 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b75d8:	b002      	add	sp, #8
   b75da:	bd10      	pop	{r4, pc}

000b75dc <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b75dc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b75de:	b510      	push	{r4, lr}
      if (_M_empty())
   b75e0:	b90a      	cbnz	r2, b75e6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b75e2:	f002 f912 	bl	b980a <_ZSt25__throw_bad_function_callv>
    }
   b75e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b75ea:	68c3      	ldr	r3, [r0, #12]
   b75ec:	4718      	bx	r3

000b75ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
inline void spark::Vector<T, AllocatorT>::clear() {
   b75ee:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b75f0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline void spark::Vector<T, AllocatorT>::clear() {
   b75f4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b75f6:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b75fa:	42ae      	cmp	r6, r5
   b75fc:	d004      	beq.n	b7608 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
      ~__shared_ptr() = default;
   b75fe:	1d28      	adds	r0, r5, #4
   b7600:	f7ff ff73 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7604:	3508      	adds	r5, #8
   b7606:	e7f8      	b.n	b75fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
    size_ = 0;
   b7608:	2300      	movs	r3, #0
   b760a:	6063      	str	r3, [r4, #4]
}
   b760c:	bd70      	pop	{r4, r5, r6, pc}

000b760e <_ZNK8particle14BleLocalDevice3offEv>:
int BleLocalDevice::off() const {
   b760e:	b513      	push	{r0, r1, r4, lr}
   b7610:	4604      	mov	r4, r0
    CHECK(hal_ble_stack_deinit(nullptr));
   b7612:	2000      	movs	r0, #0
   b7614:	f7fe fe36 	bl	b6284 <hal_ble_stack_deinit>
   b7618:	2800      	cmp	r0, #0
   b761a:	db0a      	blt.n	b7632 <_ZNK8particle14BleLocalDevice3offEv+0x24>
        WiringBleLock lk;
   b761c:	a801      	add	r0, sp, #4
   b761e:	f7ff fb9b 	bl	b6d58 <_ZN8particle3ble13WiringBleLockC1Ev>
        return peers_;
   b7622:	6820      	ldr	r0, [r4, #0]
        impl()->peers().clear();
   b7624:	3018      	adds	r0, #24
   b7626:	f7ff ffe2 	bl	b75ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
        WiringBleLock lk;
   b762a:	a801      	add	r0, sp, #4
   b762c:	f7ff fba2 	bl	b6d74 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b7630:	2000      	movs	r0, #0
}
   b7632:	b002      	add	sp, #8
   b7634:	bd10      	pop	{r4, pc}

000b7636 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7636:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b763a:	4604      	mov	r4, r0
   b763c:	460d      	mov	r5, r1
   b763e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7640:	d914      	bls.n	b766c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7642:	4290      	cmp	r0, r2
   b7644:	d213      	bcs.n	b766e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7646:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b764a:	1a75      	subs	r5, r6, r1
   b764c:	f1a1 0708 	sub.w	r7, r1, #8
   b7650:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7652:	42b7      	cmp	r7, r6
   b7654:	d018      	beq.n	b7688 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7656:	b11c      	cbz	r4, b7660 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7658:	4631      	mov	r1, r6
   b765a:	4620      	mov	r0, r4
   b765c:	f7ff ff3b 	bl	b74d6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7660:	1d30      	adds	r0, r6, #4
   b7662:	f7ff ff42 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7666:	3e08      	subs	r6, #8
   b7668:	3c08      	subs	r4, #8
   b766a:	e7f2      	b.n	b7652 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b766c:	d00c      	beq.n	b7688 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b766e:	42b5      	cmp	r5, r6
   b7670:	d00a      	beq.n	b7688 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7672:	b11c      	cbz	r4, b767c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7674:	4629      	mov	r1, r5
   b7676:	4620      	mov	r0, r4
   b7678:	f7ff ff2d 	bl	b74d6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b767c:	1d28      	adds	r0, r5, #4
   b767e:	f7ff ff34 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7682:	3508      	adds	r5, #8
   b7684:	3408      	adds	r4, #8
   b7686:	e7f2      	b.n	b766e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b768a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b768a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b768c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b768e:	6846      	ldr	r6, [r0, #4]
   b7690:	4668      	mov	r0, sp
   b7692:	f7ff ff20 	bl	b74d6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7696:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b769a:	429f      	cmp	r7, r3
   b769c:	db12      	blt.n	b76c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b769e:	3701      	adds	r7, #1
        if (n > 0) {
   b76a0:	2f00      	cmp	r7, #0
   b76a2:	dd29      	ble.n	b76f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b76a4:	00f8      	lsls	r0, r7, #3
   b76a6:	f7ff f9b7 	bl	b6a18 <malloc>
            if (!d) {
   b76aa:	4605      	mov	r5, r0
   b76ac:	b1f0      	cbz	r0, b76ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b76ae:	e9d4 1200 	ldrd	r1, r2, [r4]
   b76b2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b76b6:	f7ff ffbe 	bl	b7636 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b76ba:	6820      	ldr	r0, [r4, #0]
   b76bc:	f7ff f9b4 	bl	b6a28 <free>
        data_ = d;
   b76c0:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b76c2:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b76c4:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b76c6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b76c8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b76cc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b76d0:	4631      	mov	r1, r6
   b76d2:	f106 0008 	add.w	r0, r6, #8
   b76d6:	f7ff ffae 	bl	b7636 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b76da:	b11e      	cbz	r6, b76e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b76dc:	4669      	mov	r1, sp
   b76de:	4630      	mov	r0, r6
   b76e0:	f7ff fef9 	bl	b74d6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b76e4:	6863      	ldr	r3, [r4, #4]
   b76e6:	3301      	adds	r3, #1
   b76e8:	6063      	str	r3, [r4, #4]
    return true;
   b76ea:	2501      	movs	r5, #1
   b76ec:	a801      	add	r0, sp, #4
   b76ee:	f7ff fefc 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b76f2:	4628      	mov	r0, r5
   b76f4:	b003      	add	sp, #12
   b76f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b76f8:	2500      	movs	r5, #0
   b76fa:	e7de      	b.n	b76ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b76fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b76fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b76fe:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7702:	4605      	mov	r5, r0
   b7704:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b7706:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b770a:	42a6      	cmp	r6, r4
   b770c:	d005      	beq.n	b771a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b770e:	4639      	mov	r1, r7
   b7710:	4620      	mov	r0, r4
   b7712:	f7ff fdb8 	bl	b7286 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b7716:	b108      	cbz	r0, b771c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b7718:	b914      	cbnz	r4, b7720 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b771a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b771c:	3408      	adds	r4, #8
   b771e:	e7f4      	b.n	b770a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b7720:	1d20      	adds	r0, r4, #4
   b7722:	f7ff fee2 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b7726:	e9d5 3200 	ldrd	r3, r2, [r5]
   b772a:	f104 0108 	add.w	r1, r4, #8
   b772e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7732:	4620      	mov	r0, r4
   b7734:	f7ff ff7f 	bl	b7636 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b7738:	686b      	ldr	r3, [r5, #4]
   b773a:	3b01      	subs	r3, #1
   b773c:	606b      	str	r3, [r5, #4]
    return true;
   b773e:	e7ec      	b.n	b771a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>

000b7740 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7744:	4605      	mov	r5, r0
   b7746:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7748:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b774a:	460c      	mov	r4, r1
        WiringBleLock lk;
   b774c:	f7ff fb04 	bl	b6d58 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7750:	682e      	ldr	r6, [r5, #0]
   b7752:	2e04      	cmp	r6, #4
   b7754:	d06d      	beq.n	b7832 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf2>
   b7756:	d807      	bhi.n	b7768 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   b7758:	2e03      	cmp	r6, #3
   b775a:	d02a      	beq.n	b77b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x72>
        WiringBleLock lk;
   b775c:	a803      	add	r0, sp, #12
   b775e:	f7ff fb09 	bl	b6d74 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7762:	b00e      	add	sp, #56	; 0x38
   b7764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   b7768:	f1a6 030c 	sub.w	r3, r6, #12
   b776c:	2b04      	cmp	r3, #4
   b776e:	d8f5      	bhi.n	b775c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7770:	89a9      	ldrh	r1, [r5, #12]
   b7772:	4620      	mov	r0, r4
   b7774:	f7ff fc94 	bl	b70a0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7778:	4607      	mov	r7, r0
   b777a:	2800      	cmp	r0, #0
   b777c:	d0ee      	beq.n	b775c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   b777e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7780:	2b00      	cmp	r3, #0
   b7782:	d0eb      	beq.n	b775c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   b7784:	2210      	movs	r2, #16
   b7786:	2100      	movs	r1, #0
   b7788:	a807      	add	r0, sp, #28
   b778a:	f002 fc1b 	bl	b9fc4 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b778e:	2e0d      	cmp	r6, #13
                        };
   b7790:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   b7792:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7796:	d002      	beq.n	b779e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x5e>
   b7798:	2e10      	cmp	r6, #16
   b779a:	f040 8092 	bne.w	b78c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x182>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   b779e:	686b      	ldr	r3, [r5, #4]
   b77a0:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b77a2:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   b77a4:	9308      	str	r3, [sp, #32]
   b77a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b77a8:	a906      	add	r1, sp, #24
   b77aa:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b77ae:	4798      	blx	r3
   b77b0:	e7d4      	b.n	b775c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   b77b2:	a804      	add	r0, sp, #16
   b77b4:	f7ff fd20 	bl	b71f8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b77b8:	9b04      	ldr	r3, [sp, #16]
   b77ba:	89aa      	ldrh	r2, [r5, #12]
   b77bc:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b77be:	6869      	ldr	r1, [r5, #4]
   b77c0:	9804      	ldr	r0, [sp, #16]
   b77c2:	3108      	adds	r1, #8
   b77c4:	3002      	adds	r0, #2
   b77c6:	f7ff fae1 	bl	b6d8c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b77ca:	a904      	add	r1, sp, #16
   b77cc:	a806      	add	r0, sp, #24
   b77ce:	f7ff fe82 	bl	b74d6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b77d2:	a906      	add	r1, sp, #24
   b77d4:	f104 0018 	add.w	r0, r4, #24
   b77d8:	f7ff ff57 	bl	b768a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b77dc:	4605      	mov	r5, r0
   b77de:	a807      	add	r0, sp, #28
   b77e0:	f7ff fe83 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b77e4:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b77e6:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b77e8:	b98d      	cbnz	r5, b780e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xce>
                    LOG(ERROR, "Failed to append peer Central device.");
   b77ea:	4b3e      	ldr	r3, [pc, #248]	; (b78e4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   b77ec:	493e      	ldr	r1, [pc, #248]	; (b78e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b77ee:	9300      	str	r3, [sp, #0]
   b77f0:	2032      	movs	r0, #50	; 0x32
   b77f2:	462b      	mov	r3, r5
   b77f4:	aa06      	add	r2, sp, #24
   b77f6:	9507      	str	r5, [sp, #28]
   b77f8:	f7fe fff6 	bl	b67e8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b77fc:	9b04      	ldr	r3, [sp, #16]
   b77fe:	4629      	mov	r1, r5
   b7800:	8818      	ldrh	r0, [r3, #0]
   b7802:	f7fe fd5f 	bl	b62c4 <hal_ble_gap_disconnect>
   b7806:	a805      	add	r0, sp, #20
   b7808:	f7ff fe6f 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b780c:	e7a6      	b.n	b775c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   b780e:	4a37      	ldr	r2, [pc, #220]	; (b78ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   b7810:	9200      	str	r2, [sp, #0]
   b7812:	2300      	movs	r3, #0
   b7814:	4934      	ldr	r1, [pc, #208]	; (b78e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b7816:	9307      	str	r3, [sp, #28]
   b7818:	aa06      	add	r2, sp, #24
   b781a:	2001      	movs	r0, #1
   b781c:	f7fe ffe4 	bl	b67e8 <log_message>
                if (impl->connectedCallback_) {
   b7820:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7822:	2b00      	cmp	r3, #0
   b7824:	d0ef      	beq.n	b7806 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc6>
                    impl->connectedCallback_(peer);
   b7826:	a904      	add	r1, sp, #16
   b7828:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b782c:	f7ff fed6 	bl	b75dc <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7830:	e7e9      	b.n	b7806 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc6>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7832:	89a9      	ldrh	r1, [r5, #12]
   b7834:	4620      	mov	r0, r4
   b7836:	f7ff fc33 	bl	b70a0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b783a:	4606      	mov	r6, r0
   b783c:	2800      	cmp	r0, #0
   b783e:	d08d      	beq.n	b775c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
      { return _M_ptr; }
   b7840:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b7842:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b7846:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b784a:	8029      	strh	r1, [r5, #0]
   b784c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7850:	429a      	cmp	r2, r3
   b7852:	d003      	beq.n	b785c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b7854:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7858:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b785a:	e7f9      	b.n	b7850 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x110>
    destruct(data_, data_ + size_);
   b785c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b7860:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7864:	45b8      	cmp	r8, r7
   b7866:	d004      	beq.n	b7872 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x132>
      ~__shared_ptr() = default;
   b7868:	1d38      	adds	r0, r7, #4
   b786a:	f7ff fe3e 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b786e:	3708      	adds	r7, #8
   b7870:	e7f8      	b.n	b7864 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
    size_ = 0;
   b7872:	2300      	movs	r3, #0
   b7874:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b7876:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b787a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b787e:	45b8      	cmp	r8, r7
   b7880:	d004      	beq.n	b788c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14c>
   b7882:	1d38      	adds	r0, r7, #4
   b7884:	f7ff fe31 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7888:	3708      	adds	r7, #8
   b788a:	e7f8      	b.n	b787e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13e>
    size_ = 0;
   b788c:	2300      	movs	r3, #0
   b788e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7890:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b7892:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7894:	b123      	cbz	r3, b78a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x160>
                        impl->disconnectedCallback_(*peer);
   b7896:	4631      	mov	r1, r6
   b7898:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b789c:	f7ff fe9e 	bl	b75dc <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b78a0:	2300      	movs	r3, #0
   b78a2:	2220      	movs	r2, #32
   b78a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b78a8:	4a11      	ldr	r2, [pc, #68]	; (b78f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b0>)
   b78aa:	9200      	str	r2, [sp, #0]
   b78ac:	490e      	ldr	r1, [pc, #56]	; (b78e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b78ae:	aa06      	add	r2, sp, #24
   b78b0:	2001      	movs	r0, #1
   b78b2:	f7fe ff99 	bl	b67e8 <log_message>
                    impl->peers_.removeOne(*peer);
   b78b6:	4631      	mov	r1, r6
   b78b8:	f104 0018 	add.w	r0, r4, #24
   b78bc:	f7ff ff1e 	bl	b76fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b78c0:	e74c      	b.n	b775c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b78c2:	2e0f      	cmp	r6, #15
   b78c4:	f47f af6f 	bne.w	b77a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x66>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   b78c8:	686b      	ldr	r3, [r5, #4]
   b78ca:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   b78cc:	7a2b      	ldrb	r3, [r5, #8]
   b78ce:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   b78d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   b78d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   b78da:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   b78de:	2308      	movs	r3, #8
   b78e0:	e760      	b.n	b77a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x64>
   b78e2:	bf00      	nop
   b78e4:	000bab2d 	.word	0x000bab2d
   b78e8:	000baaee 	.word	0x000baaee
   b78ec:	000bab53 	.word	0x000bab53
   b78f0:	000bab70 	.word	0x000bab70

000b78f4 <_ZNK8particle13BlePeerDevice10disconnectEv>:
int BlePeerDevice::disconnect() const {
   b78f4:	b513      	push	{r0, r1, r4, lr}
   b78f6:	4604      	mov	r4, r0
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b78f8:	f7ff fca0 	bl	b723c <_ZNK8particle13BlePeerDevice9connectedEv>
   b78fc:	b1d0      	cbz	r0, b7934 <_ZNK8particle13BlePeerDevice10disconnectEv+0x40>
    CHECK(hal_ble_gap_disconnect(impl()->connHandle(), nullptr));
   b78fe:	6823      	ldr	r3, [r4, #0]
   b7900:	2100      	movs	r1, #0
   b7902:	8818      	ldrh	r0, [r3, #0]
   b7904:	f7fe fcde 	bl	b62c4 <hal_ble_gap_disconnect>
   b7908:	2800      	cmp	r0, #0
   b790a:	db11      	blt.n	b7930 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
        WiringBleLock lk;
   b790c:	a801      	add	r0, sp, #4
   b790e:	f7ff fa23 	bl	b6d58 <_ZN8particle3ble13WiringBleLockC1Ev>
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b7912:	f7ff fd09 	bl	b7328 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b7916:	6800      	ldr	r0, [r0, #0]
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b7918:	4621      	mov	r1, r4
   b791a:	3018      	adds	r0, #24
   b791c:	f7ff feee 	bl	b76fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
      { return _M_ptr; }
   b7920:	6823      	ldr	r3, [r4, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7922:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b7926:	801a      	strh	r2, [r3, #0]
        WiringBleLock lk;
   b7928:	a801      	add	r0, sp, #4
   b792a:	f7ff fa23 	bl	b6d74 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b792e:	2000      	movs	r0, #0
}
   b7930:	b002      	add	sp, #8
   b7932:	bd10      	pop	{r4, pc}
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b7934:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7938:	e7fa      	b.n	b7930 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
	...

000b793c <_ZNK8particle14BleLocalDevice13disconnectAllEv>:

int BleLocalDevice::disconnect(const BlePeerDevice& peer) const {
    return peer.disconnect();
}

int BleLocalDevice::disconnectAll() const {
   b793c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7940:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7942:	a801      	add	r0, sp, #4
   b7944:	f7ff fa08 	bl	b6d58 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7948:	6823      	ldr	r3, [r4, #0]
   b794a:	4e10      	ldr	r6, [pc, #64]	; (b798c <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x50>)
    return data_ + size_;
   b794c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
        locked_ = false;
   b7950:	f04f 0800 	mov.w	r8, #0
   b7954:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
        locked_ = true;
   b7958:	2701      	movs	r7, #1
    for (auto& p : impl()->peers()) {
   b795a:	42ac      	cmp	r4, r5
   b795c:	d00e      	beq.n	b797c <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x40>
   b795e:	6830      	ldr	r0, [r6, #0]
   b7960:	f7fe fd4a 	bl	b63f8 <os_mutex_recursive_unlock>
        lk.unlock();
        p.disconnect();
   b7964:	4620      	mov	r0, r4
        locked_ = false;
   b7966:	f88d 8004 	strb.w	r8, [sp, #4]
        p.disconnect();
   b796a:	f7ff ffc3 	bl	b78f4 <_ZNK8particle13BlePeerDevice10disconnectEv>
    void lock() { os_mutex_recursive_lock(handle_); }
   b796e:	6830      	ldr	r0, [r6, #0]
   b7970:	f7fe fd3a 	bl	b63e8 <os_mutex_recursive_lock>
        locked_ = true;
   b7974:	3408      	adds	r4, #8
   b7976:	f88d 7004 	strb.w	r7, [sp, #4]
    for (auto& p : impl()->peers()) {
   b797a:	e7ee      	b.n	b795a <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x1e>
    WiringBleLock lk;
   b797c:	a801      	add	r0, sp, #4
   b797e:	f7ff f9f9 	bl	b6d74 <_ZN8particle3ble13WiringBleLockD1Ev>
        lk.lock();
    }
    return SYSTEM_ERROR_NONE;
}
   b7982:	2000      	movs	r0, #0
   b7984:	b002      	add	sp, #8
   b7986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b798a:	bf00      	nop
   b798c:	2003e638 	.word	0x2003e638

000b7990 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b7990:	b513      	push	{r0, r1, r4, lr}
   b7992:	460b      	mov	r3, r1
   b7994:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7996:	e9d0 0100 	ldrd	r0, r1, [r0]
   b799a:	466c      	mov	r4, sp
   b799c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b79a0:	e893 0003 	ldmia.w	r3, {r0, r1}
   b79a4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b79a8:	e894 0003 	ldmia.w	r4, {r0, r1}
   b79ac:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b79b0:	b002      	add	sp, #8
   b79b2:	bd10      	pop	{r4, pc}

000b79b4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b79b4:	b538      	push	{r3, r4, r5, lr}
   b79b6:	4605      	mov	r5, r0
   b79b8:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b79ba:	f7ff ffe9 	bl	b7990 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b79be:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b79c0:	68a2      	ldr	r2, [r4, #8]
   b79c2:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b79c4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b79c6:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b79c8:	68e2      	ldr	r2, [r4, #12]
   b79ca:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b79cc:	60e3      	str	r3, [r4, #12]
      }
   b79ce:	bd38      	pop	{r3, r4, r5, pc}

000b79d0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b79d0:	b570      	push	{r4, r5, r6, lr}
   b79d2:	460e      	mov	r6, r1
   b79d4:	b08c      	sub	sp, #48	; 0x30
   b79d6:	4604      	mov	r4, r0
   b79d8:	9201      	str	r2, [sp, #4]
   b79da:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b79dc:	f7ff fb40 	bl	b7060 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b79e0:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   b79e2:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   b79e4:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   b79e6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b79ea:	f000 fe76 	bl	b86da <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b79ee:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b79f2:	b1cd      	cbz	r5, b7a28 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x58>
   b79f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b79f6:	9502      	str	r5, [sp, #8]
   b79f8:	a902      	add	r1, sp, #8
   b79fa:	a804      	add	r0, sp, #16
   b79fc:	9303      	str	r3, [sp, #12]
   b79fe:	f7ff fd1b 	bl	b7438 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7a02:	2300      	movs	r3, #0
	__x.swap(*this);
   b7a04:	a908      	add	r1, sp, #32
   b7a06:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b7a08:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b7a0a:	f7ff ffd3 	bl	b79b4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7a0e:	4631      	mov	r1, r6
   b7a10:	a808      	add	r0, sp, #32
   b7a12:	f7ff ffcf 	bl	b79b4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7a16:	a808      	add	r0, sp, #32
   b7a18:	f7ff f960 	bl	b6cdc <_ZNSt14_Function_baseD1Ev>
   b7a1c:	a804      	add	r0, sp, #16
   b7a1e:	f7ff f95d 	bl	b6cdc <_ZNSt14_Function_baseD1Ev>
    }
   b7a22:	4620      	mov	r0, r4
   b7a24:	b00c      	add	sp, #48	; 0x30
   b7a26:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7a28:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7a2a:	e7ea      	b.n	b7a02 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000b7a2c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b7a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7a30:	b089      	sub	sp, #36	; 0x24
   b7a32:	461d      	mov	r5, r3
   b7a34:	e9dd 4312 	ldrd	r4, r3, [sp, #72]	; 0x48
   b7a38:	4680      	mov	r8, r0
   b7a3a:	468a      	mov	sl, r1
   b7a3c:	4693      	mov	fp, r2
   b7a3e:	9914      	ldr	r1, [sp, #80]	; 0x50
   b7a40:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7a42:	2200      	movs	r2, #0
   b7a44:	2068      	movs	r0, #104	; 0x68
   b7a46:	9102      	str	r1, [sp, #8]
   b7a48:	9206      	str	r2, [sp, #24]
   b7a4a:	f7fc fb24 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7a4e:	1e06      	subs	r6, r0, #0
   b7a50:	f106 090c 	add.w	r9, r6, #12
   b7a54:	d01c      	beq.n	b7a90 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x64>
      : _M_use_count(1), _M_weak_count(1) { }
   b7a56:	2201      	movs	r2, #1
	: _M_impl(__a)
   b7a58:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b7a5a:	e9c6 2201 	strd	r2, r2, [r6, #4]
	: _M_impl(__a)
   b7a5e:	4a17      	ldr	r2, [pc, #92]	; (b7abc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b7a60:	f847 2b20 	str.w	r2, [r7], #32
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b7a64:	9902      	ldr	r1, [sp, #8]
   b7a66:	f89b 2000 	ldrb.w	r2, [fp]
   b7a6a:	9b03      	ldr	r3, [sp, #12]
    value_ = flags.value_;
   b7a6c:	f88d 2014 	strb.w	r2, [sp, #20]
   b7a70:	9100      	str	r1, [sp, #0]
   b7a72:	4652      	mov	r2, sl
   b7a74:	a905      	add	r1, sp, #20
   b7a76:	4648      	mov	r0, r9
   b7a78:	f7ff ffaa 	bl	b79d0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b7a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7a7e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b7a80:	682b      	ldr	r3, [r5, #0]
   b7a82:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b7a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7a86:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b7a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7a8c:	6823      	ldr	r3, [r4, #0]
   b7a8e:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b7a90:	a906      	add	r1, sp, #24
   b7a92:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b7a94:	e9cd 9606 	strd	r9, r6, [sp, #24]
   b7a98:	f7ff fd8f 	bl	b75ba <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b7a9c:	a807      	add	r0, sp, #28
   b7a9e:	f7ff fd24 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b7aa2:	f8d8 1000 	ldr.w	r1, [r8]
   b7aa6:	b931      	cbnz	r1, b7ab6 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8a>
        SPARK_ASSERT(false);
   b7aa8:	4a05      	ldr	r2, [pc, #20]	; (b7ac0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b7aaa:	200a      	movs	r0, #10
}
   b7aac:	b009      	add	sp, #36	; 0x24
   b7aae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b7ab2:	f7fe be91 	b.w	b67d8 <panic_>
}
   b7ab6:	b009      	add	sp, #36	; 0x24
   b7ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7abc:	000babec 	.word	0x000babec
   b7ac0:	000b6419 	.word	0x000b6419

000b7ac4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b7ac4:	b538      	push	{r3, r4, r5, lr}
   b7ac6:	4605      	mov	r5, r0
   b7ac8:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7aca:	f7ff ff61 	bl	b7990 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7ace:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7ad0:	68a2      	ldr	r2, [r4, #8]
   b7ad2:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7ad4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7ad6:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7ad8:	68e2      	ldr	r2, [r4, #12]
   b7ada:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7adc:	60e3      	str	r3, [r4, #12]
      }
   b7ade:	bd38      	pop	{r3, r4, r5, pc}

000b7ae0 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b7ae0:	b510      	push	{r4, lr}
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b7ae2:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b7ae4:	b08a      	sub	sp, #40	; 0x28
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b7ae6:	3434      	adds	r4, #52	; 0x34
   b7ae8:	b1b9      	cbz	r1, b7b1a <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b7aea:	e9cd 1200 	strd	r1, r2, [sp]
   b7aee:	a802      	add	r0, sp, #8
   b7af0:	4669      	mov	r1, sp
   b7af2:	f7ff fcb9 	bl	b7468 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7af6:	2300      	movs	r3, #0
	__x.swap(*this);
   b7af8:	a906      	add	r1, sp, #24
   b7afa:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7afc:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7afe:	f7ff ffe1 	bl	b7ac4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b7b02:	4621      	mov	r1, r4
   b7b04:	a806      	add	r0, sp, #24
   b7b06:	f7ff ffdd 	bl	b7ac4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b7b0a:	a806      	add	r0, sp, #24
   b7b0c:	f7ff f8e6 	bl	b6cdc <_ZNSt14_Function_baseD1Ev>
   b7b10:	a802      	add	r0, sp, #8
   b7b12:	f7ff f8e3 	bl	b6cdc <_ZNSt14_Function_baseD1Ev>
}
   b7b16:	b00a      	add	sp, #40	; 0x28
   b7b18:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7b1a:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7b1c:	e7eb      	b.n	b7af6 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b7b1e <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7b1e:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7b20:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7b22:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7b24:	3424      	adds	r4, #36	; 0x24
   b7b26:	b1b9      	cbz	r1, b7b58 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b7b28:	e9cd 1200 	strd	r1, r2, [sp]
   b7b2c:	a802      	add	r0, sp, #8
   b7b2e:	4669      	mov	r1, sp
   b7b30:	f7ff fc9a 	bl	b7468 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7b34:	2300      	movs	r3, #0
	__x.swap(*this);
   b7b36:	a906      	add	r1, sp, #24
   b7b38:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7b3a:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7b3c:	f7ff ffc2 	bl	b7ac4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b7b40:	4621      	mov	r1, r4
   b7b42:	a806      	add	r0, sp, #24
   b7b44:	f7ff ffbe 	bl	b7ac4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b7b48:	a806      	add	r0, sp, #24
   b7b4a:	f7ff f8c7 	bl	b6cdc <_ZNSt14_Function_baseD1Ev>
   b7b4e:	a802      	add	r0, sp, #8
   b7b50:	f7ff f8c4 	bl	b6cdc <_ZNSt14_Function_baseD1Ev>
}
   b7b54:	b00a      	add	sp, #40	; 0x28
   b7b56:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7b58:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7b5a:	e7eb      	b.n	b7b34 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b7b5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7b5c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b60:	4604      	mov	r4, r0
   b7b62:	460d      	mov	r5, r1
   b7b64:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7b66:	d914      	bls.n	b7b92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7b68:	4290      	cmp	r0, r2
   b7b6a:	d213      	bcs.n	b7b94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7b6c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7b70:	1a75      	subs	r5, r6, r1
   b7b72:	f1a1 0708 	sub.w	r7, r1, #8
   b7b76:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7b78:	42b7      	cmp	r7, r6
   b7b7a:	d018      	beq.n	b7bae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7b7c:	b11c      	cbz	r4, b7b86 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7b7e:	4631      	mov	r1, r6
   b7b80:	4620      	mov	r0, r4
   b7b82:	f7ff fc9e 	bl	b74c2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7b86:	1d30      	adds	r0, r6, #4
   b7b88:	f7ff fcaf 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7b8c:	3e08      	subs	r6, #8
   b7b8e:	3c08      	subs	r4, #8
   b7b90:	e7f2      	b.n	b7b78 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7b92:	d00c      	beq.n	b7bae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7b94:	42b5      	cmp	r5, r6
   b7b96:	d00a      	beq.n	b7bae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7b98:	b11c      	cbz	r4, b7ba2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7b9a:	4629      	mov	r1, r5
   b7b9c:	4620      	mov	r0, r4
   b7b9e:	f7ff fc90 	bl	b74c2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7ba2:	1d28      	adds	r0, r5, #4
   b7ba4:	f7ff fca1 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7ba8:	3508      	adds	r5, #8
   b7baa:	3408      	adds	r4, #8
   b7bac:	e7f2      	b.n	b7b94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7bb0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7bb0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7bb2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7bb4:	4605      	mov	r5, r0
        if (n > 0) {
   b7bb6:	dd11      	ble.n	b7bdc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7bb8:	00f0      	lsls	r0, r6, #3
   b7bba:	f7fe ff2d 	bl	b6a18 <malloc>
            if (!d) {
   b7bbe:	4604      	mov	r4, r0
   b7bc0:	b158      	cbz	r0, b7bda <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7bc2:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7bc6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7bca:	f7ff ffc7 	bl	b7b5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7bce:	6828      	ldr	r0, [r5, #0]
   b7bd0:	f7fe ff2a 	bl	b6a28 <free>
        data_ = d;
   b7bd4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7bd6:	60ae      	str	r6, [r5, #8]
        return true;
   b7bd8:	2001      	movs	r0, #1
    }
   b7bda:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7bdc:	2400      	movs	r4, #0
   b7bde:	e7f6      	b.n	b7bce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7be0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7be0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7be2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7be4:	6845      	ldr	r5, [r0, #4]
   b7be6:	4668      	mov	r0, sp
   b7be8:	f7ff fc6b 	bl	b74c2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7bec:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7bf0:	4299      	cmp	r1, r3
   b7bf2:	da10      	bge.n	b7c16 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7bf4:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7bf6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7bf8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7bfc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7c00:	4629      	mov	r1, r5
   b7c02:	f105 0008 	add.w	r0, r5, #8
   b7c06:	f7ff ffa9 	bl	b7b5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7c0a:	b98d      	cbnz	r5, b7c30 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7c0c:	6863      	ldr	r3, [r4, #4]
   b7c0e:	3301      	adds	r3, #1
   b7c10:	6063      	str	r3, [r4, #4]
    return true;
   b7c12:	2601      	movs	r6, #1
   b7c14:	e006      	b.n	b7c24 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7c16:	3101      	adds	r1, #1
   b7c18:	4620      	mov	r0, r4
   b7c1a:	f7ff ffc9 	bl	b7bb0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7c1e:	4606      	mov	r6, r0
   b7c20:	2800      	cmp	r0, #0
   b7c22:	d1e7      	bne.n	b7bf4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7c24:	a801      	add	r0, sp, #4
   b7c26:	f7ff fc60 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7c2a:	4630      	mov	r0, r6
   b7c2c:	b002      	add	sp, #8
   b7c2e:	bd70      	pop	{r4, r5, r6, pc}
   b7c30:	4669      	mov	r1, sp
   b7c32:	4628      	mov	r0, r5
   b7c34:	f7ff fc45 	bl	b74c2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7c38:	e7e8      	b.n	b7c0c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7c3a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7c3a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7c3e:	4604      	mov	r4, r0
   b7c40:	460d      	mov	r5, r1
   b7c42:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7c44:	d914      	bls.n	b7c70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7c46:	4290      	cmp	r0, r2
   b7c48:	d213      	bcs.n	b7c72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7c4a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7c4e:	1a75      	subs	r5, r6, r1
   b7c50:	f1a1 0708 	sub.w	r7, r1, #8
   b7c54:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7c56:	42b7      	cmp	r7, r6
   b7c58:	d018      	beq.n	b7c8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7c5a:	b11c      	cbz	r4, b7c64 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7c5c:	4631      	mov	r1, r6
   b7c5e:	4620      	mov	r0, r4
   b7c60:	f7ff fc21 	bl	b74a6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7c64:	1d30      	adds	r0, r6, #4
   b7c66:	f7ff fc40 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7c6a:	3e08      	subs	r6, #8
   b7c6c:	3c08      	subs	r4, #8
   b7c6e:	e7f2      	b.n	b7c56 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7c70:	d00c      	beq.n	b7c8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7c72:	42b5      	cmp	r5, r6
   b7c74:	d00a      	beq.n	b7c8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7c76:	b11c      	cbz	r4, b7c80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7c78:	4629      	mov	r1, r5
   b7c7a:	4620      	mov	r0, r4
   b7c7c:	f7ff fc13 	bl	b74a6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7c80:	1d28      	adds	r0, r5, #4
   b7c82:	f7ff fc32 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7c86:	3508      	adds	r5, #8
   b7c88:	3408      	adds	r4, #8
   b7c8a:	e7f2      	b.n	b7c72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7c8e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7c8e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7c90:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7c92:	4605      	mov	r5, r0
        if (n > 0) {
   b7c94:	dd11      	ble.n	b7cba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7c96:	00f0      	lsls	r0, r6, #3
   b7c98:	f7fe febe 	bl	b6a18 <malloc>
            if (!d) {
   b7c9c:	4604      	mov	r4, r0
   b7c9e:	b158      	cbz	r0, b7cb8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7ca0:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7ca4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7ca8:	f7ff ffc7 	bl	b7c3a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7cac:	6828      	ldr	r0, [r5, #0]
   b7cae:	f7fe febb 	bl	b6a28 <free>
        data_ = d;
   b7cb2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7cb4:	60ae      	str	r6, [r5, #8]
        return true;
   b7cb6:	2001      	movs	r0, #1
    }
   b7cb8:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7cba:	2400      	movs	r4, #0
   b7cbc:	e7f6      	b.n	b7cac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7cbe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7cbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7cc0:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7cc2:	6845      	ldr	r5, [r0, #4]
   b7cc4:	4668      	mov	r0, sp
   b7cc6:	f7ff fbee 	bl	b74a6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7cca:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7cce:	4299      	cmp	r1, r3
   b7cd0:	da10      	bge.n	b7cf4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7cd2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7cd4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7cd6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7cda:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7cde:	4629      	mov	r1, r5
   b7ce0:	f105 0008 	add.w	r0, r5, #8
   b7ce4:	f7ff ffa9 	bl	b7c3a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7ce8:	b98d      	cbnz	r5, b7d0e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7cea:	6863      	ldr	r3, [r4, #4]
   b7cec:	3301      	adds	r3, #1
   b7cee:	6063      	str	r3, [r4, #4]
    return true;
   b7cf0:	2601      	movs	r6, #1
   b7cf2:	e006      	b.n	b7d02 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7cf4:	3101      	adds	r1, #1
   b7cf6:	4620      	mov	r0, r4
   b7cf8:	f7ff ffc9 	bl	b7c8e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7cfc:	4606      	mov	r6, r0
   b7cfe:	2800      	cmp	r0, #0
   b7d00:	d1e7      	bne.n	b7cd2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7d02:	a801      	add	r0, sp, #4
   b7d04:	f7ff fbf1 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7d08:	4630      	mov	r0, r6
   b7d0a:	b002      	add	sp, #8
   b7d0c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b7d0e:	4669      	mov	r1, sp
   b7d10:	4628      	mov	r0, r5
   b7d12:	f7ff fbc8 	bl	b74a6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7d16:	e7e8      	b.n	b7cea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7d18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7d1c:	4617      	mov	r7, r2
   b7d1e:	b0a1      	sub	sp, #132	; 0x84
   b7d20:	4680      	mov	r8, r0
    WiringBleLock lk;
   b7d22:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7d24:	460e      	mov	r6, r1
    WiringBleLock lk;
   b7d26:	f7ff f817 	bl	b6d58 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7d2a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b7d2c:	7923      	ldrb	r3, [r4, #4]
   b7d2e:	b953      	cbnz	r3, b7d46 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b7d30:	4639      	mov	r1, r7
   b7d32:	4640      	mov	r0, r8
   b7d34:	f7ff fbb7 	bl	b74a6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b7d38:	a80a      	add	r0, sp, #40	; 0x28
   b7d3a:	f7ff f81b 	bl	b6d74 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b7d3e:	4640      	mov	r0, r8
   b7d40:	b021      	add	sp, #132	; 0x84
   b7d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7d46:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b7d48:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b7d4c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b7d50:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b7d52:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b7d56:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b7d5a:	9b03      	ldr	r3, [sp, #12]
   b7d5c:	429d      	cmp	r5, r3
   b7d5e:	d021      	beq.n	b7da4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b7d60:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b7d64:	4658      	mov	r0, fp
   b7d66:	f109 0114 	add.w	r1, r9, #20
   b7d6a:	f7ff f8b0 	bl	b6ece <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b7d6e:	b1b8      	cbz	r0, b7da0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b7d70:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b7d74:	4650      	mov	r0, sl
   b7d76:	f7ff f8aa 	bl	b6ece <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b7d7a:	b188      	cbz	r0, b7da0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b7d7c:	6823      	ldr	r3, [r4, #0]
   b7d7e:	f8d9 2000 	ldr.w	r2, [r9]
   b7d82:	4053      	eors	r3, r2
   b7d84:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b7d88:	d10a      	bne.n	b7da0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b7d8a:	2220      	movs	r2, #32
   b7d8c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b7d90:	4a5e      	ldr	r2, [pc, #376]	; (b7f0c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b7d92:	9200      	str	r2, [sp, #0]
   b7d94:	aa15      	add	r2, sp, #84	; 0x54
   b7d96:	495e      	ldr	r1, [pc, #376]	; (b7f10 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b7d98:	2032      	movs	r0, #50	; 0x32
   b7d9a:	f7fe fd25 	bl	b67e8 <log_message>
   b7d9e:	e7c7      	b.n	b7d30 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b7da0:	3508      	adds	r5, #8
   b7da2:	e7da      	b.n	b7d5a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b7da4:	4650      	mov	r0, sl
   b7da6:	f7ff f863 	bl	b6e70 <_ZNK8particle7BleUuid7isValidEv>
   b7daa:	b960      	cbnz	r0, b7dc6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   b7dac:	4959      	ldr	r1, [pc, #356]	; (b7f14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b7dae:	2201      	movs	r2, #1
   b7db0:	a815      	add	r0, sp, #84	; 0x54
   b7db2:	ad15      	add	r5, sp, #84	; 0x54
   b7db4:	f7ff f833 	bl	b6e1e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b7db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7dba:	46d4      	mov	ip, sl
   b7dbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7dc0:	682b      	ldr	r3, [r5, #0]
   b7dc2:	f8cc 3000 	str.w	r3, [ip]
   b7dc6:	6833      	ldr	r3, [r6, #0]
   b7dc8:	e9d3 5300 	ldrd	r5, r3, [r3]
   b7dcc:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b7dd0:	455d      	cmp	r5, fp
   b7dd2:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b7dd4:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b7dd6:	d06e      	beq.n	b7eb6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b7dd8:	f855 0b08 	ldr.w	r0, [r5], #8
   b7ddc:	f7ff f877 	bl	b6ece <_ZNK8particle7BleUuideqERKS0_>
   b7de0:	2800      	cmp	r0, #0
   b7de2:	d0f5      	beq.n	b7dd0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b7de4:	f104 0a14 	add.w	sl, r4, #20
   b7de8:	4650      	mov	r0, sl
   b7dea:	f7ff f841 	bl	b6e70 <_ZNK8particle7BleUuid7isValidEv>
   b7dee:	b988      	cbnz	r0, b7e14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b7df0:	4b49      	ldr	r3, [pc, #292]	; (b7f18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7df2:	4948      	ldr	r1, [pc, #288]	; (b7f14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b7df4:	881a      	ldrh	r2, [r3, #0]
   b7df6:	3201      	adds	r2, #1
   b7df8:	b292      	uxth	r2, r2
   b7dfa:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7dfc:	a815      	add	r0, sp, #84	; 0x54
   b7dfe:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b7e00:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7e02:	f7ff f82b 	bl	b6e5c <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b7e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7e08:	46d4      	mov	ip, sl
   b7e0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7e0e:	682b      	ldr	r3, [r5, #0]
   b7e10:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b7e14:	4b41      	ldr	r3, [pc, #260]	; (b7f1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b7e16:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b7e18:	2228      	movs	r2, #40	; 0x28
   b7e1a:	2100      	movs	r1, #0
   b7e1c:	a816      	add	r0, sp, #88	; 0x58
   b7e1e:	f002 f8d1 	bl	b9fc4 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b7e22:	4651      	mov	r1, sl
   b7e24:	a804      	add	r0, sp, #16
   b7e26:	f7ff f835 	bl	b6e94 <_ZN8particle7BleUuid7halUUIDEv>
   b7e2a:	ab04      	add	r3, sp, #16
   b7e2c:	aa18      	add	r2, sp, #96	; 0x60
   b7e2e:	f10d 0c20 	add.w	ip, sp, #32
   b7e32:	6818      	ldr	r0, [r3, #0]
   b7e34:	6859      	ldr	r1, [r3, #4]
   b7e36:	4615      	mov	r5, r2
   b7e38:	c503      	stmia	r5!, {r0, r1}
   b7e3a:	3308      	adds	r3, #8
   b7e3c:	4563      	cmp	r3, ip
   b7e3e:	462a      	mov	r2, r5
   b7e40:	d1f7      	bne.n	b7e32 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b7e42:	6818      	ldr	r0, [r3, #0]
   b7e44:	6028      	str	r0, [r5, #0]
    return value_;
   b7e46:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b7e48:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b7e4c:	f8d9 3000 	ldr.w	r3, [r9]
   b7e50:	8a9b      	ldrh	r3, [r3, #20]
   b7e52:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b7e56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7e58:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b7e5a:	4b31      	ldr	r3, [pc, #196]	; (b7f20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7e5c:	2200      	movs	r2, #0
   b7e5e:	1da1      	adds	r1, r4, #6
   b7e60:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b7e62:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7e66:	f7fe fa5f 	bl	b6328 <hal_ble_gatt_server_add_characteristic>
   b7e6a:	2800      	cmp	r0, #0
   b7e6c:	f47f af60 	bne.w	b7d30 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b7e70:	2301      	movs	r3, #1
   b7e72:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b7e74:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b7e76:	4639      	mov	r1, r7
        return characteristics_;
   b7e78:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b7e7a:	a80d      	add	r0, sp, #52	; 0x34
   b7e7c:	f7ff fb13 	bl	b74a6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7e80:	4620      	mov	r0, r4
   b7e82:	a90d      	add	r1, sp, #52	; 0x34
   b7e84:	f7ff ff1b 	bl	b7cbe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b7e88:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7e8a:	a80e      	add	r0, sp, #56	; 0x38
   b7e8c:	f7ff fb2d 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7e90:	2c00      	cmp	r4, #0
   b7e92:	f47f af4d 	bne.w	b7d30 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b7e96:	2320      	movs	r3, #32
   b7e98:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b7e9c:	4b21      	ldr	r3, [pc, #132]	; (b7f24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b7e9e:	9300      	str	r3, [sp, #0]
   b7ea0:	aa0d      	add	r2, sp, #52	; 0x34
   b7ea2:	4623      	mov	r3, r4
   b7ea4:	e777      	b.n	b7d96 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b7ea6:	4639      	mov	r1, r7
   b7ea8:	4640      	mov	r0, r8
   b7eaa:	f7ff fafc 	bl	b74a6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7eae:	a80c      	add	r0, sp, #48	; 0x30
   b7eb0:	f7ff fb1b 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7eb4:	e740      	b.n	b7d38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b7eb6:	a80b      	add	r0, sp, #44	; 0x2c
   b7eb8:	f7ff f97a 	bl	b71b0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b7ebc:	4651      	mov	r1, sl
   b7ebe:	a815      	add	r0, sp, #84	; 0x54
   b7ec0:	f7fe ffe8 	bl	b6e94 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b7ec4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7ec6:	2300      	movs	r3, #0
   b7ec8:	3214      	adds	r2, #20
   b7eca:	a915      	add	r1, sp, #84	; 0x54
   b7ecc:	2001      	movs	r0, #1
   b7ece:	f7fe fa03 	bl	b62d8 <hal_ble_gatt_server_add_service>
   b7ed2:	2800      	cmp	r0, #0
   b7ed4:	d1e7      	bne.n	b7ea6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b7ed6:	6835      	ldr	r5, [r6, #0]
   b7ed8:	a90b      	add	r1, sp, #44	; 0x2c
   b7eda:	a80d      	add	r0, sp, #52	; 0x34
   b7edc:	f7ff faf1 	bl	b74c2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b7ee0:	4628      	mov	r0, r5
   b7ee2:	a90d      	add	r1, sp, #52	; 0x34
   b7ee4:	f7ff fe7c 	bl	b7be0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7ee8:	4605      	mov	r5, r0
   b7eea:	a80e      	add	r0, sp, #56	; 0x38
   b7eec:	f7ff fafd 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7ef0:	2d00      	cmp	r5, #0
   b7ef2:	d0d8      	beq.n	b7ea6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b7ef4:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b7ef6:	6853      	ldr	r3, [r2, #4]
   b7ef8:	6812      	ldr	r2, [r2, #0]
   b7efa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b7efe:	3b01      	subs	r3, #1
   b7f00:	a80c      	add	r0, sp, #48	; 0x30
   b7f02:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b7f06:	f7ff faf0 	bl	b74ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7f0a:	e76b      	b.n	b7de4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b7f0c:	000bab8f 	.word	0x000bab8f
   b7f10:	000baaee 	.word	0x000baaee
   b7f14:	000bac56 	.word	0x000bac56
   b7f18:	2003e634 	.word	0x2003e634
   b7f1c:	002c0003 	.word	0x002c0003
   b7f20:	000b7369 	.word	0x000b7369
   b7f24:	000babba 	.word	0x000babba

000b7f28 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   b7f28:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   b7f2a:	4c06      	ldr	r4, [pc, #24]	; (b7f44 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   b7f2c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   b7f2e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   b7f30:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   b7f32:	f7fe fa49 	bl	b63c8 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   b7f36:	4620      	mov	r0, r4
   b7f38:	4a03      	ldr	r2, [pc, #12]	; (b7f48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   b7f3a:	4904      	ldr	r1, [pc, #16]	; (b7f4c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   b7f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   b7f40:	f001 bc58 	b.w	b97f4 <__aeabi_atexit>
   b7f44:	2003e638 	.word	0x2003e638
   b7f48:	2003da30 	.word	0x2003da30
   b7f4c:	000b6b65 	.word	0x000b6b65

000b7f50 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7f50:	2200      	movs	r2, #0
   b7f52:	6840      	ldr	r0, [r0, #4]
   b7f54:	4611      	mov	r1, r2
   b7f56:	f7fe bd1f 	b.w	b6998 <network_listening>

000b7f5a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7f5a:	2200      	movs	r2, #0
   b7f5c:	6840      	ldr	r0, [r0, #4]
   b7f5e:	4611      	mov	r1, r2
   b7f60:	f7fe bd42 	b.w	b69e8 <network_get_listen_timeout>

000b7f64 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7f64:	6840      	ldr	r0, [r0, #4]
   b7f66:	2200      	movs	r2, #0
   b7f68:	f7fe bd36 	b.w	b69d8 <network_set_listen_timeout>

000b7f6c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7f6c:	6840      	ldr	r0, [r0, #4]
   b7f6e:	2200      	movs	r2, #0
   b7f70:	f081 0101 	eor.w	r1, r1, #1
   b7f74:	f7fe bd08 	b.w	b6988 <network_listen>

000b7f78 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7f78:	2300      	movs	r3, #0
   b7f7a:	6840      	ldr	r0, [r0, #4]
   b7f7c:	461a      	mov	r2, r3
   b7f7e:	4619      	mov	r1, r3
   b7f80:	f7fe bcfa 	b.w	b6978 <network_off>

000b7f84 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7f84:	2300      	movs	r3, #0
   b7f86:	6840      	ldr	r0, [r0, #4]
   b7f88:	461a      	mov	r2, r3
   b7f8a:	4619      	mov	r1, r3
   b7f8c:	f7fe bcec 	b.w	b6968 <network_on>

000b7f90 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7f90:	2200      	movs	r2, #0
   b7f92:	6840      	ldr	r0, [r0, #4]
   b7f94:	4611      	mov	r1, r2
   b7f96:	f7fe bcdf 	b.w	b6958 <network_ready>

000b7f9a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7f9a:	2200      	movs	r2, #0
   b7f9c:	6840      	ldr	r0, [r0, #4]
   b7f9e:	4611      	mov	r1, r2
   b7fa0:	f7fe bcca 	b.w	b6938 <network_connecting>

000b7fa4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7fa4:	6840      	ldr	r0, [r0, #4]
   b7fa6:	2200      	movs	r2, #0
   b7fa8:	2102      	movs	r1, #2
   b7faa:	f7fe bccd 	b.w	b6948 <network_disconnect>

000b7fae <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7fae:	2300      	movs	r3, #0
   b7fb0:	6840      	ldr	r0, [r0, #4]
   b7fb2:	461a      	mov	r2, r3
   b7fb4:	f7fe bcb8 	b.w	b6928 <network_connect>

000b7fb8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7fb8:	4b02      	ldr	r3, [pc, #8]	; (b7fc4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7fba:	2203      	movs	r2, #3
   b7fbc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7fbe:	4a02      	ldr	r2, [pc, #8]	; (b7fc8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7fc0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7fc2:	4770      	bx	lr
   b7fc4:	2003e640 	.word	0x2003e640
   b7fc8:	000bac80 	.word	0x000bac80

000b7fcc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7fcc:	4770      	bx	lr

000b7fce <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7fd0:	4606      	mov	r6, r0
   b7fd2:	4615      	mov	r5, r2
   b7fd4:	460c      	mov	r4, r1
   b7fd6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7fd8:	42bc      	cmp	r4, r7
   b7fda:	d006      	beq.n	b7fea <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7fdc:	6833      	ldr	r3, [r6, #0]
   b7fde:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7fe2:	689b      	ldr	r3, [r3, #8]
   b7fe4:	4630      	mov	r0, r6
   b7fe6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7fe8:	e7f6      	b.n	b7fd8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7fea:	4628      	mov	r0, r5
   b7fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7fee <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7fee:	7c00      	ldrb	r0, [r0, #16]
   b7ff0:	2200      	movs	r2, #0
   b7ff2:	f7fe ba81 	b.w	b64f8 <hal_i2c_write>

000b7ff6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7ff6:	7c00      	ldrb	r0, [r0, #16]
   b7ff8:	2100      	movs	r1, #0
   b7ffa:	f7fe ba85 	b.w	b6508 <hal_i2c_available>

000b7ffe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7ffe:	7c00      	ldrb	r0, [r0, #16]
   b8000:	2100      	movs	r1, #0
   b8002:	f7fe ba89 	b.w	b6518 <hal_i2c_read>

000b8006 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8006:	7c00      	ldrb	r0, [r0, #16]
   b8008:	2100      	movs	r1, #0
   b800a:	f7fe ba8d 	b.w	b6528 <hal_i2c_peek>

000b800e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b800e:	7c00      	ldrb	r0, [r0, #16]
   b8010:	2100      	movs	r1, #0
   b8012:	f7fe ba91 	b.w	b6538 <hal_i2c_flush>

000b8016 <_ZN7TwoWireD0Ev>:
   b8016:	b510      	push	{r4, lr}
   b8018:	2114      	movs	r1, #20
   b801a:	4604      	mov	r4, r0
   b801c:	f001 fbef 	bl	b97fe <_ZdlPvj>
   b8020:	4620      	mov	r0, r4
   b8022:	bd10      	pop	{r4, pc}

000b8024 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8024:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b802a:	4604      	mov	r4, r0
   b802c:	4608      	mov	r0, r1
   b802e:	2100      	movs	r1, #0
   b8030:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8034:	4b03      	ldr	r3, [pc, #12]	; (b8044 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b8036:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8038:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b803a:	4611      	mov	r1, r2
   b803c:	f7fe fa8c 	bl	b6558 <hal_i2c_init>
}
   b8040:	4620      	mov	r0, r4
   b8042:	bd10      	pop	{r4, pc}
   b8044:	000bacbc 	.word	0x000bacbc

000b8048 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8048:	2300      	movs	r3, #0
   b804a:	7c00      	ldrb	r0, [r0, #16]
   b804c:	461a      	mov	r2, r3
   b804e:	4619      	mov	r1, r3
   b8050:	f7fe ba3a 	b.w	b64c8 <hal_i2c_begin>

000b8054 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b8054:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8056:	2200      	movs	r2, #0
   b8058:	2314      	movs	r3, #20
   b805a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b805e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b8062:	780b      	ldrb	r3, [r1, #0]
   b8064:	f88d 3008 	strb.w	r3, [sp, #8]
   b8068:	684b      	ldr	r3, [r1, #4]
   b806a:	9303      	str	r3, [sp, #12]
   b806c:	68cb      	ldr	r3, [r1, #12]
   b806e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b8070:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8072:	7a0b      	ldrb	r3, [r1, #8]
   b8074:	9305      	str	r3, [sp, #20]
   b8076:	a901      	add	r1, sp, #4
   b8078:	f7fe fa76 	bl	b6568 <hal_i2c_request_ex>
}
   b807c:	b007      	add	sp, #28
   b807e:	f85d fb04 	ldr.w	pc, [sp], #4

000b8082 <_ZN7TwoWire11requestFromEhjh>:
{
   b8082:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b8084:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8086:	f88d 1000 	strb.w	r1, [sp]
   b808a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b808e:	9103      	str	r1, [sp, #12]
   b8090:	bf18      	it	ne
   b8092:	2301      	movne	r3, #1
   b8094:	4669      	mov	r1, sp
    size_ = size;
   b8096:	9201      	str	r2, [sp, #4]
   b8098:	f88d 3008 	strb.w	r3, [sp, #8]
   b809c:	f7ff ffda 	bl	b8054 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b80a0:	b005      	add	sp, #20
   b80a2:	f85d fb04 	ldr.w	pc, [sp], #4

000b80a6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b80a6:	2301      	movs	r3, #1
   b80a8:	f7ff bfeb 	b.w	b8082 <_ZN7TwoWire11requestFromEhjh>

000b80ac <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b80ac:	7c00      	ldrb	r0, [r0, #16]
   b80ae:	2200      	movs	r2, #0
   b80b0:	f7fe ba12 	b.w	b64d8 <hal_i2c_begin_transmission>

000b80b4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b80b4:	b2c9      	uxtb	r1, r1
   b80b6:	f7ff bff9 	b.w	b80ac <_ZN7TwoWire17beginTransmissionEh>

000b80ba <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b80ba:	7c00      	ldrb	r0, [r0, #16]
   b80bc:	2200      	movs	r2, #0
   b80be:	f7fe ba13 	b.w	b64e8 <hal_i2c_end_transmission>

000b80c2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b80c2:	2101      	movs	r1, #1
   b80c4:	f7ff bff9 	b.w	b80ba <_ZN7TwoWire15endTransmissionEh>

000b80c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b80c8:	4770      	bx	lr

000b80ca <_ZN9IPAddressD0Ev>:
   b80ca:	b510      	push	{r4, lr}
   b80cc:	2118      	movs	r1, #24
   b80ce:	4604      	mov	r4, r0
   b80d0:	f001 fb95 	bl	b97fe <_ZdlPvj>
   b80d4:	4620      	mov	r0, r4
   b80d6:	bd10      	pop	{r4, pc}

000b80d8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b80d8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b80da:	7d03      	ldrb	r3, [r0, #20]
   b80dc:	2b06      	cmp	r3, #6
{
   b80de:	b08d      	sub	sp, #52	; 0x34
   b80e0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b80e2:	f100 0704 	add.w	r7, r0, #4
   b80e6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b80ea:	d012      	beq.n	b8112 <_ZNK9IPAddress7printToER5Print+0x3a>
   b80ec:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b80f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b80f4:	220a      	movs	r2, #10
   b80f6:	4630      	mov	r0, r6
   b80f8:	f000 f979 	bl	b83ee <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b80fc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b80fe:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8100:	d019      	beq.n	b8136 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8102:	2c00      	cmp	r4, #0
   b8104:	d0f4      	beq.n	b80f0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8106:	212e      	movs	r1, #46	; 0x2e
   b8108:	4630      	mov	r0, r6
   b810a:	f000 f951 	bl	b83b0 <_ZN5Print5printEc>
   b810e:	4404      	add	r4, r0
   b8110:	e7ee      	b.n	b80f0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8112:	232f      	movs	r3, #47	; 0x2f
   b8114:	466a      	mov	r2, sp
   b8116:	4639      	mov	r1, r7
   b8118:	200a      	movs	r0, #10
		buf[0] = 0;
   b811a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b811e:	f7fe fa33 	bl	b6588 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8122:	4668      	mov	r0, sp
   b8124:	f001 ff96 	bl	ba054 <strlen>
   b8128:	6833      	ldr	r3, [r6, #0]
   b812a:	4602      	mov	r2, r0
   b812c:	68db      	ldr	r3, [r3, #12]
   b812e:	4669      	mov	r1, sp
   b8130:	4630      	mov	r0, r6
   b8132:	4798      	blx	r3
   b8134:	4604      	mov	r4, r0
    }
    return n;
}
   b8136:	4620      	mov	r0, r4
   b8138:	b00d      	add	sp, #52	; 0x34
   b813a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b813c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b813c:	b510      	push	{r4, lr}
   b813e:	4b05      	ldr	r3, [pc, #20]	; (b8154 <_ZN9IPAddressC1Ev+0x18>)
   b8140:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b8142:	2211      	movs	r2, #17
   b8144:	f840 3b04 	str.w	r3, [r0], #4
   b8148:	2100      	movs	r1, #0
   b814a:	f001 ff3b 	bl	b9fc4 <memset>
}
   b814e:	4620      	mov	r0, r4
   b8150:	bd10      	pop	{r4, pc}
   b8152:	bf00      	nop
   b8154:	000bace4 	.word	0x000bace4

000b8158 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8158:	4603      	mov	r3, r0
   b815a:	4a07      	ldr	r2, [pc, #28]	; (b8178 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b815c:	b510      	push	{r4, lr}
   b815e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8162:	f101 0210 	add.w	r2, r1, #16
   b8166:	f851 4b04 	ldr.w	r4, [r1], #4
   b816a:	f843 4b04 	str.w	r4, [r3], #4
   b816e:	4291      	cmp	r1, r2
   b8170:	d1f9      	bne.n	b8166 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b8172:	780a      	ldrb	r2, [r1, #0]
   b8174:	701a      	strb	r2, [r3, #0]
}
   b8176:	bd10      	pop	{r4, pc}
   b8178:	000bace4 	.word	0x000bace4

000b817c <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b817c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b817e:	2b04      	cmp	r3, #4
   b8180:	d104      	bne.n	b818c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b8182:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8184:	3800      	subs	r0, #0
   b8186:	bf18      	it	ne
   b8188:	2001      	movne	r0, #1
   b818a:	4770      	bx	lr
    } else if (version() == 6) {
   b818c:	2b06      	cmp	r3, #6
   b818e:	d107      	bne.n	b81a0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8190:	6843      	ldr	r3, [r0, #4]
   b8192:	b93b      	cbnz	r3, b81a4 <_ZNK9IPAddresscvbEv+0x28>
   b8194:	6883      	ldr	r3, [r0, #8]
   b8196:	b92b      	cbnz	r3, b81a4 <_ZNK9IPAddresscvbEv+0x28>
   b8198:	68c3      	ldr	r3, [r0, #12]
   b819a:	b91b      	cbnz	r3, b81a4 <_ZNK9IPAddresscvbEv+0x28>
   b819c:	6900      	ldr	r0, [r0, #16]
   b819e:	e7f1      	b.n	b8184 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b81a0:	2000      	movs	r0, #0
   b81a2:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b81a4:	2001      	movs	r0, #1
}
   b81a6:	4770      	bx	lr

000b81a8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b81a8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b81aa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b81ae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b81b2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b81b6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b81ba:	2304      	movs	r3, #4
   b81bc:	6041      	str	r1, [r0, #4]
   b81be:	7503      	strb	r3, [r0, #20]
}
   b81c0:	bd10      	pop	{r4, pc}
	...

000b81c4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b81c4:	b507      	push	{r0, r1, r2, lr}
   b81c6:	4b06      	ldr	r3, [pc, #24]	; (b81e0 <_ZN9IPAddressC1EPKh+0x1c>)
   b81c8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b81ca:	78cb      	ldrb	r3, [r1, #3]
   b81cc:	9300      	str	r3, [sp, #0]
   b81ce:	788b      	ldrb	r3, [r1, #2]
   b81d0:	784a      	ldrb	r2, [r1, #1]
   b81d2:	7809      	ldrb	r1, [r1, #0]
   b81d4:	f7ff ffe8 	bl	b81a8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b81d8:	b003      	add	sp, #12
   b81da:	f85d fb04 	ldr.w	pc, [sp], #4
   b81de:	bf00      	nop
   b81e0:	000bace4 	.word	0x000bace4

000b81e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b81e4:	4b01      	ldr	r3, [pc, #4]	; (b81ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b81e6:	4a02      	ldr	r2, [pc, #8]	; (b81f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b81e8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b81ea:	4770      	bx	lr
   b81ec:	2003e648 	.word	0x2003e648
   b81f0:	000bacf0 	.word	0x000bacf0

000b81f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b81f4:	2300      	movs	r3, #0
   b81f6:	6840      	ldr	r0, [r0, #4]
   b81f8:	461a      	mov	r2, r3
   b81fa:	f7fe bb95 	b.w	b6928 <network_connect>

000b81fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b81fe:	6840      	ldr	r0, [r0, #4]
   b8200:	2200      	movs	r2, #0
   b8202:	2102      	movs	r1, #2
   b8204:	f7fe bba0 	b.w	b6948 <network_disconnect>

000b8208 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8208:	2200      	movs	r2, #0
   b820a:	6840      	ldr	r0, [r0, #4]
   b820c:	4611      	mov	r1, r2
   b820e:	f7fe bb93 	b.w	b6938 <network_connecting>

000b8212 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8212:	2200      	movs	r2, #0
   b8214:	6840      	ldr	r0, [r0, #4]
   b8216:	4611      	mov	r1, r2
   b8218:	f7fe bb9e 	b.w	b6958 <network_ready>

000b821c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b821c:	2300      	movs	r3, #0
   b821e:	6840      	ldr	r0, [r0, #4]
   b8220:	461a      	mov	r2, r3
   b8222:	4619      	mov	r1, r3
   b8224:	f7fe bba0 	b.w	b6968 <network_on>

000b8228 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8228:	2300      	movs	r3, #0
   b822a:	6840      	ldr	r0, [r0, #4]
   b822c:	461a      	mov	r2, r3
   b822e:	4619      	mov	r1, r3
   b8230:	f7fe bba2 	b.w	b6978 <network_off>

000b8234 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8234:	6840      	ldr	r0, [r0, #4]
   b8236:	2100      	movs	r1, #0
   b8238:	f7fe bbde 	b.w	b69f8 <network_is_on>

000b823c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b823c:	6840      	ldr	r0, [r0, #4]
   b823e:	2100      	movs	r1, #0
   b8240:	f7fe bbe2 	b.w	b6a08 <network_is_off>

000b8244 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8244:	6840      	ldr	r0, [r0, #4]
   b8246:	2200      	movs	r2, #0
   b8248:	f081 0101 	eor.w	r1, r1, #1
   b824c:	f7fe bb9c 	b.w	b6988 <network_listen>

000b8250 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8250:	6840      	ldr	r0, [r0, #4]
   b8252:	2200      	movs	r2, #0
   b8254:	f7fe bbc0 	b.w	b69d8 <network_set_listen_timeout>

000b8258 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b8258:	2200      	movs	r2, #0
   b825a:	6840      	ldr	r0, [r0, #4]
   b825c:	4611      	mov	r1, r2
   b825e:	f7fe bbc3 	b.w	b69e8 <network_get_listen_timeout>

000b8262 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8262:	2200      	movs	r2, #0
   b8264:	6840      	ldr	r0, [r0, #4]
   b8266:	4611      	mov	r1, r2
   b8268:	f7fe bb96 	b.w	b6998 <network_listening>

000b826c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b826c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8270:	b095      	sub	sp, #84	; 0x54
   b8272:	4614      	mov	r4, r2
   b8274:	460d      	mov	r5, r1
   b8276:	4607      	mov	r7, r0
    IPAddress addr;
   b8278:	f7ff ff60 	bl	b813c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b827c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b827e:	221c      	movs	r2, #28
   b8280:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8282:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8284:	f001 fe9e 	bl	b9fc4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8288:	2340      	movs	r3, #64	; 0x40
   b828a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b828c:	4620      	mov	r0, r4
   b828e:	466b      	mov	r3, sp
   b8290:	aa0c      	add	r2, sp, #48	; 0x30
   b8292:	2100      	movs	r1, #0
   b8294:	f7fe f998 	bl	b65c8 <netdb_getaddrinfo>
    if (!r) {
   b8298:	4604      	mov	r4, r0
   b829a:	2800      	cmp	r0, #0
   b829c:	d14b      	bne.n	b8336 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b829e:	4602      	mov	r2, r0
   b82a0:	2101      	movs	r1, #1
   b82a2:	6868      	ldr	r0, [r5, #4]
   b82a4:	f7fe fb58 	bl	b6958 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b82a8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b82aa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b82ac:	4622      	mov	r2, r4
   b82ae:	6868      	ldr	r0, [r5, #4]
   b82b0:	f7fe fb52 	bl	b6958 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b82b4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b82b6:	4681      	mov	r9, r0
        bool ok = false;
   b82b8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b82ba:	2e00      	cmp	r6, #0
   b82bc:	d03b      	beq.n	b8336 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b82be:	2900      	cmp	r1, #0
   b82c0:	d139      	bne.n	b8336 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b82c2:	6873      	ldr	r3, [r6, #4]
   b82c4:	2b02      	cmp	r3, #2
   b82c6:	d003      	beq.n	b82d0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b82c8:	2b0a      	cmp	r3, #10
   b82ca:	d011      	beq.n	b82f0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b82cc:	69f6      	ldr	r6, [r6, #28]
   b82ce:	e7f4      	b.n	b82ba <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b82d0:	f1b8 0f00 	cmp.w	r8, #0
   b82d4:	d0fa      	beq.n	b82cc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b82d6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b82d8:	a806      	add	r0, sp, #24
   b82da:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b82dc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b82de:	f7ff ff71 	bl	b81c4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b82e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b82e4:	1d3c      	adds	r4, r7, #4
   b82e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b82e8:	682b      	ldr	r3, [r5, #0]
   b82ea:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b82ec:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b82ee:	e7ed      	b.n	b82cc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b82f0:	f1b9 0f00 	cmp.w	r9, #0
   b82f4:	d0ea      	beq.n	b82cc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b82f6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b82f8:	2210      	movs	r2, #16
   b82fa:	a801      	add	r0, sp, #4
   b82fc:	f001 fe62 	bl	b9fc4 <memset>
                    a.v = 6;
   b8300:	2306      	movs	r3, #6
   b8302:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8306:	ad01      	add	r5, sp, #4
   b8308:	f104 0308 	add.w	r3, r4, #8
   b830c:	3418      	adds	r4, #24
   b830e:	6818      	ldr	r0, [r3, #0]
   b8310:	6859      	ldr	r1, [r3, #4]
   b8312:	462a      	mov	r2, r5
   b8314:	c203      	stmia	r2!, {r0, r1}
   b8316:	3308      	adds	r3, #8
   b8318:	42a3      	cmp	r3, r4
   b831a:	4615      	mov	r5, r2
   b831c:	d1f7      	bne.n	b830e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b831e:	a901      	add	r1, sp, #4
   b8320:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8322:	ad07      	add	r5, sp, #28
   b8324:	f7ff ff18 	bl	b8158 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b832a:	1d3c      	adds	r4, r7, #4
   b832c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b832e:	682b      	ldr	r3, [r5, #0]
   b8330:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8332:	4649      	mov	r1, r9
   b8334:	e7ca      	b.n	b82cc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b8336:	9800      	ldr	r0, [sp, #0]
   b8338:	f7fe f93e 	bl	b65b8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b833c:	4638      	mov	r0, r7
   b833e:	b015      	add	sp, #84	; 0x54
   b8340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8344 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8344:	4b02      	ldr	r3, [pc, #8]	; (b8350 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b8346:	4a03      	ldr	r2, [pc, #12]	; (b8354 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8348:	601a      	str	r2, [r3, #0]
   b834a:	2200      	movs	r2, #0
   b834c:	605a      	str	r2, [r3, #4]

} // spark
   b834e:	4770      	bx	lr
   b8350:	2003e64c 	.word	0x2003e64c
   b8354:	000bacfc 	.word	0x000bacfc

000b8358 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b835a:	4606      	mov	r6, r0
   b835c:	460d      	mov	r5, r1
  size_t n = 0;
   b835e:	188f      	adds	r7, r1, r2
   b8360:	2400      	movs	r4, #0
  while (size--) {
   b8362:	42bd      	cmp	r5, r7
   b8364:	d00c      	beq.n	b8380 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8366:	6833      	ldr	r3, [r6, #0]
   b8368:	f815 1b01 	ldrb.w	r1, [r5], #1
   b836c:	689b      	ldr	r3, [r3, #8]
   b836e:	4630      	mov	r0, r6
   b8370:	4798      	blx	r3
     if (chunk>=0)
   b8372:	1e03      	subs	r3, r0, #0
   b8374:	db01      	blt.n	b837a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8376:	441c      	add	r4, r3
  while (size--) {
   b8378:	e7f3      	b.n	b8362 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b837a:	2c00      	cmp	r4, #0
   b837c:	bf08      	it	eq
   b837e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8380:	4620      	mov	r0, r4
   b8382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8384 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b8384:	b513      	push	{r0, r1, r4, lr}
   b8386:	4604      	mov	r4, r0
    }
   b8388:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b838a:	b159      	cbz	r1, b83a4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b838c:	9101      	str	r1, [sp, #4]
   b838e:	f001 fe61 	bl	ba054 <strlen>
   b8392:	6823      	ldr	r3, [r4, #0]
   b8394:	9901      	ldr	r1, [sp, #4]
   b8396:	68db      	ldr	r3, [r3, #12]
   b8398:	4602      	mov	r2, r0
   b839a:	4620      	mov	r0, r4
    }
   b839c:	b002      	add	sp, #8
   b839e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b83a2:	4718      	bx	r3
    }
   b83a4:	b002      	add	sp, #8
   b83a6:	bd10      	pop	{r4, pc}

000b83a8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b83a8:	b508      	push	{r3, lr}
  return write(str);
   b83aa:	f7ff ffeb 	bl	b8384 <_ZN5Print5writeEPKc>
}
   b83ae:	bd08      	pop	{r3, pc}

000b83b0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b83b0:	6803      	ldr	r3, [r0, #0]
   b83b2:	689b      	ldr	r3, [r3, #8]
   b83b4:	4718      	bx	r3

000b83b6 <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   b83b6:	680a      	ldr	r2, [r1, #0]
 {
   b83b8:	460b      	mov	r3, r1
   return x.printTo(*this);
   b83ba:	6812      	ldr	r2, [r2, #0]
   b83bc:	4601      	mov	r1, r0
   b83be:	4618      	mov	r0, r3
   b83c0:	4710      	bx	r2

000b83c2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b83c2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b83c4:	210d      	movs	r1, #13
{
   b83c6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b83c8:	f7ff fff2 	bl	b83b0 <_ZN5Print5printEc>
  n += print('\n');
   b83cc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b83ce:	4604      	mov	r4, r0
  n += print('\n');
   b83d0:	4628      	mov	r0, r5
   b83d2:	f7ff ffed 	bl	b83b0 <_ZN5Print5printEc>
  return n;
}
   b83d6:	4420      	add	r0, r4
   b83d8:	bd38      	pop	{r3, r4, r5, pc}

000b83da <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b83da:	b538      	push	{r3, r4, r5, lr}
   b83dc:	4605      	mov	r5, r0
  return write(str);
   b83de:	f7ff ffd1 	bl	b8384 <_ZN5Print5writeEPKc>
   b83e2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b83e4:	4628      	mov	r0, r5
   b83e6:	f7ff ffec 	bl	b83c2 <_ZN5Print7printlnEv>
  return n;
}
   b83ea:	4420      	add	r0, r4
   b83ec:	bd38      	pop	{r3, r4, r5, pc}

000b83ee <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b83ee:	b530      	push	{r4, r5, lr}
   b83f0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b83f2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b83f4:	2a01      	cmp	r2, #1
  *str = '\0';
   b83f6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b83fa:	bf98      	it	ls
   b83fc:	220a      	movls	r2, #10
   b83fe:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8400:	460d      	mov	r5, r1
   b8402:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8406:	fb01 5312 	mls	r3, r1, r2, r5
   b840a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b840e:	2b09      	cmp	r3, #9
   b8410:	bf94      	ite	ls
   b8412:	3330      	addls	r3, #48	; 0x30
   b8414:	3337      	addhi	r3, #55	; 0x37
   b8416:	b2db      	uxtb	r3, r3
  } while(n);
   b8418:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b841a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b841e:	d9ef      	bls.n	b8400 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8420:	4621      	mov	r1, r4
   b8422:	f7ff ffaf 	bl	b8384 <_ZN5Print5writeEPKc>
}
   b8426:	b00b      	add	sp, #44	; 0x2c
   b8428:	bd30      	pop	{r4, r5, pc}

000b842a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b842a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b842e:	b086      	sub	sp, #24
   b8430:	af00      	add	r7, sp, #0
   b8432:	4605      	mov	r5, r0
   b8434:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b8436:	1d38      	adds	r0, r7, #4
   b8438:	2114      	movs	r1, #20
{
   b843a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b843c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b843e:	f7fe fb0b 	bl	b6a58 <vsnprintf>

    if (n<bufsize)
   b8442:	2813      	cmp	r0, #19
   b8444:	d80e      	bhi.n	b8464 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b8446:	1d39      	adds	r1, r7, #4
   b8448:	4628      	mov	r0, r5
   b844a:	f7ff ff9b 	bl	b8384 <_ZN5Print5writeEPKc>
   b844e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8450:	b11e      	cbz	r6, b845a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b8452:	4628      	mov	r0, r5
   b8454:	f7ff ffb5 	bl	b83c2 <_ZN5Print7printlnEv>
   b8458:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b845a:	4620      	mov	r0, r4
   b845c:	3718      	adds	r7, #24
   b845e:	46bd      	mov	sp, r7
   b8460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b8464:	f100 0308 	add.w	r3, r0, #8
   b8468:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b846c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b846e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b8472:	4622      	mov	r2, r4
   b8474:	1c41      	adds	r1, r0, #1
   b8476:	683b      	ldr	r3, [r7, #0]
   b8478:	4668      	mov	r0, sp
   b847a:	f7fe faed 	bl	b6a58 <vsnprintf>
  return write(str);
   b847e:	4669      	mov	r1, sp
   b8480:	4628      	mov	r0, r5
   b8482:	f7ff ff7f 	bl	b8384 <_ZN5Print5writeEPKc>
   b8486:	4604      	mov	r4, r0
   b8488:	46c5      	mov	sp, r8
   b848a:	e7e1      	b.n	b8450 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b848c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   b848c:	b510      	push	{r4, lr}
   b848e:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b8490:	f7fe fc24 	bl	b6cdc <_ZNSt14_Function_baseD1Ev>
   b8494:	4620      	mov	r0, r4
   b8496:	bd10      	pop	{r4, pc}

000b8498 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b8498:	4803      	ldr	r0, [pc, #12]	; (b84a8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   b849a:	4a04      	ldr	r2, [pc, #16]	; (b84ac <_GLOBAL__sub_I_RGB+0x14>)
   b849c:	4904      	ldr	r1, [pc, #16]	; (b84b0 <_GLOBAL__sub_I_RGB+0x18>)
   b849e:	2300      	movs	r3, #0
   b84a0:	6083      	str	r3, [r0, #8]
   b84a2:	f001 b9a7 	b.w	b97f4 <__aeabi_atexit>
   b84a6:	bf00      	nop
   b84a8:	2003e654 	.word	0x2003e654
   b84ac:	2003da30 	.word	0x2003da30
   b84b0:	000b848d 	.word	0x000b848d

000b84b4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b84b4:	2100      	movs	r1, #0
   b84b6:	f7fe b907 	b.w	b66c8 <hal_spi_release>

000b84ba <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b84ba:	2100      	movs	r1, #0
   b84bc:	f7fe b8fc 	b.w	b66b8 <hal_spi_acquire>

000b84c0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b84c0:	b510      	push	{r4, lr}
   b84c2:	4604      	mov	r4, r0
   b84c4:	4608      	mov	r0, r1
{
    _spi = spi;
   b84c6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b84c8:	f7fe f8de 	bl	b6688 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b84cc:	2300      	movs	r3, #0
   b84ce:	6063      	str	r3, [r4, #4]
}
   b84d0:	4620      	mov	r0, r4
   b84d2:	bd10      	pop	{r4, pc}

000b84d4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b84d4:	b513      	push	{r0, r1, r4, lr}
   b84d6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b84d8:	7800      	ldrb	r0, [r0, #0]
   b84da:	f7ff ffee 	bl	b84ba <_ZN8SPIClass4lockEv.isra.0>
   b84de:	b958      	cbnz	r0, b84f8 <_ZN8SPIClass5beginEv+0x24>
   b84e0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b84e2:	9001      	str	r0, [sp, #4]
   b84e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b84e8:	f7fe f8a6 	bl	b6638 <hal_spi_begin>
        unlock();
   b84ec:	9801      	ldr	r0, [sp, #4]
    }
}
   b84ee:	b002      	add	sp, #8
   b84f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b84f4:	f7ff bfde 	b.w	b84b4 <_ZN8SPIClass6unlockEv.isra.0>
   b84f8:	b002      	add	sp, #8
   b84fa:	bd10      	pop	{r4, pc}

000b84fc <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b84fc:	b513      	push	{r0, r1, r4, lr}
   b84fe:	4604      	mov	r4, r0
    if (!lock())
   b8500:	7800      	ldrb	r0, [r0, #0]
{
   b8502:	9101      	str	r1, [sp, #4]
    if (!lock())
   b8504:	f7ff ffd9 	bl	b84ba <_ZN8SPIClass4lockEv.isra.0>
   b8508:	9901      	ldr	r1, [sp, #4]
   b850a:	b948      	cbnz	r0, b8520 <_ZN8SPIClass11setBitOrderEh+0x24>
   b850c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b850e:	9001      	str	r0, [sp, #4]
   b8510:	f7fe f89a 	bl	b6648 <hal_spi_set_bit_order>
        unlock();
   b8514:	9801      	ldr	r0, [sp, #4]
    }
}
   b8516:	b002      	add	sp, #8
   b8518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b851c:	f7ff bfca 	b.w	b84b4 <_ZN8SPIClass6unlockEv.isra.0>
   b8520:	b002      	add	sp, #8
   b8522:	bd10      	pop	{r4, pc}

000b8524 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b8524:	b513      	push	{r0, r1, r4, lr}
   b8526:	4604      	mov	r4, r0
    if (!lock())
   b8528:	7800      	ldrb	r0, [r0, #0]
{
   b852a:	9101      	str	r1, [sp, #4]
    if (!lock())
   b852c:	f7ff ffc5 	bl	b84ba <_ZN8SPIClass4lockEv.isra.0>
   b8530:	9901      	ldr	r1, [sp, #4]
   b8532:	b948      	cbnz	r0, b8548 <_ZN8SPIClass11setDataModeEh+0x24>
   b8534:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b8536:	9001      	str	r0, [sp, #4]
   b8538:	f7fe f88e 	bl	b6658 <hal_spi_set_data_mode>
        unlock();
   b853c:	9801      	ldr	r0, [sp, #4]
    }
}
   b853e:	b002      	add	sp, #8
   b8540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8544:	f7ff bfb6 	b.w	b84b4 <_ZN8SPIClass6unlockEv.isra.0>
   b8548:	b002      	add	sp, #8
   b854a:	bd10      	pop	{r4, pc}

000b854c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b854c:	0840      	lsrs	r0, r0, #1
{
   b854e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b8550:	6018      	str	r0, [r3, #0]
   b8552:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b8554:	6818      	ldr	r0, [r3, #0]
   b8556:	4288      	cmp	r0, r1
   b8558:	b2e5      	uxtb	r5, r4
   b855a:	d906      	bls.n	b856a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b855c:	3401      	adds	r4, #1
   b855e:	2c08      	cmp	r4, #8
   b8560:	d002      	beq.n	b8568 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b8562:	0840      	lsrs	r0, r0, #1
   b8564:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b8566:	e7f5      	b.n	b8554 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b8568:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b856a:	4b02      	ldr	r3, [pc, #8]	; (b8574 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b856c:	5d5b      	ldrb	r3, [r3, r5]
   b856e:	7013      	strb	r3, [r2, #0]
}
   b8570:	bd30      	pop	{r4, r5, pc}
   b8572:	bf00      	nop
   b8574:	000bad30 	.word	0x000bad30

000b8578 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b8578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b857c:	b088      	sub	sp, #32
    unsigned clock = 0;
   b857e:	2300      	movs	r3, #0
{
   b8580:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b8582:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b8584:	9302      	str	r3, [sp, #8]
{
   b8586:	460e      	mov	r6, r1
   b8588:	4617      	mov	r7, r2
    if (!lock())
   b858a:	f7ff ff96 	bl	b84ba <_ZN8SPIClass4lockEv.isra.0>
   b858e:	4605      	mov	r5, r0
   b8590:	bb00      	cbnz	r0, b85d4 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b8592:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b8596:	4601      	mov	r1, r0
   b8598:	2214      	movs	r2, #20
   b859a:	a803      	add	r0, sp, #12
   b859c:	f001 fd12 	bl	b9fc4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b85a0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b85a2:	462a      	mov	r2, r5
   b85a4:	a903      	add	r1, sp, #12
   b85a6:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b85a8:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b85ac:	f7fe f87c 	bl	b66a8 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b85b0:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b85b2:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b85b6:	ab02      	add	r3, sp, #8
   b85b8:	f10d 0207 	add.w	r2, sp, #7
   b85bc:	fb07 f106 	mul.w	r1, r7, r6
   b85c0:	f7ff ffc4 	bl	b854c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b85c4:	7820      	ldrb	r0, [r4, #0]
   b85c6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b85ca:	f7fe f84d 	bl	b6668 <hal_spi_set_clock_divider>
        unlock();
   b85ce:	7820      	ldrb	r0, [r4, #0]
   b85d0:	f7ff ff70 	bl	b84b4 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b85d4:	9802      	ldr	r0, [sp, #8]
   b85d6:	b008      	add	sp, #32
   b85d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b85dc <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b85dc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b85de:	7800      	ldrb	r0, [r0, #0]
   b85e0:	f7fe f84a 	bl	b6678 <hal_spi_transfer>
}
   b85e4:	b2c0      	uxtb	r0, r0
   b85e6:	bd08      	pop	{r3, pc}

000b85e8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b85e8:	b510      	push	{r4, lr}
   b85ea:	4604      	mov	r4, r0
{
	free(buffer);
   b85ec:	6800      	ldr	r0, [r0, #0]
   b85ee:	f7fe fa1b 	bl	b6a28 <free>
}
   b85f2:	4620      	mov	r0, r4
   b85f4:	bd10      	pop	{r4, pc}

000b85f6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b85f6:	b510      	push	{r4, lr}
   b85f8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b85fa:	6800      	ldr	r0, [r0, #0]
   b85fc:	b108      	cbz	r0, b8602 <_ZN6String10invalidateEv+0xc>
   b85fe:	f7fe fa13 	bl	b6a28 <free>
	buffer = NULL;
   b8602:	2300      	movs	r3, #0
	capacity = len = 0;
   b8604:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8608:	6023      	str	r3, [r4, #0]
}
   b860a:	bd10      	pop	{r4, pc}

000b860c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b860c:	b538      	push	{r3, r4, r5, lr}
   b860e:	4604      	mov	r4, r0
   b8610:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8612:	6800      	ldr	r0, [r0, #0]
   b8614:	3101      	adds	r1, #1
   b8616:	f7fe fa0f 	bl	b6a38 <realloc>
	if (newbuffer) {
   b861a:	b110      	cbz	r0, b8622 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b861c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8620:	2001      	movs	r0, #1
	}
	return 0;
}
   b8622:	bd38      	pop	{r3, r4, r5, pc}

000b8624 <_ZN6String7reserveEj>:
{
   b8624:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8626:	6803      	ldr	r3, [r0, #0]
{
   b8628:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b862a:	b123      	cbz	r3, b8636 <_ZN6String7reserveEj+0x12>
   b862c:	6843      	ldr	r3, [r0, #4]
   b862e:	428b      	cmp	r3, r1
   b8630:	d301      	bcc.n	b8636 <_ZN6String7reserveEj+0x12>
   b8632:	2001      	movs	r0, #1
}
   b8634:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8636:	4620      	mov	r0, r4
   b8638:	f7ff ffe8 	bl	b860c <_ZN6String12changeBufferEj>
   b863c:	2800      	cmp	r0, #0
   b863e:	d0f9      	beq.n	b8634 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8640:	68a3      	ldr	r3, [r4, #8]
   b8642:	2b00      	cmp	r3, #0
   b8644:	d1f5      	bne.n	b8632 <_ZN6String7reserveEj+0xe>
   b8646:	6822      	ldr	r2, [r4, #0]
   b8648:	7013      	strb	r3, [r2, #0]
   b864a:	e7f2      	b.n	b8632 <_ZN6String7reserveEj+0xe>

000b864c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b864c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b864e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8650:	4611      	mov	r1, r2
   b8652:	9201      	str	r2, [sp, #4]
{
   b8654:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8656:	f7ff ffe5 	bl	b8624 <_ZN6String7reserveEj>
   b865a:	9a01      	ldr	r2, [sp, #4]
   b865c:	b928      	cbnz	r0, b866a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b865e:	4620      	mov	r0, r4
   b8660:	f7ff ffc9 	bl	b85f6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8664:	4620      	mov	r0, r4
   b8666:	b003      	add	sp, #12
   b8668:	bd30      	pop	{r4, r5, pc}
	len = length;
   b866a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b866c:	4629      	mov	r1, r5
   b866e:	6820      	ldr	r0, [r4, #0]
   b8670:	f001 fc80 	bl	b9f74 <memcpy>
	buffer[len] = 0;
   b8674:	6822      	ldr	r2, [r4, #0]
   b8676:	68a3      	ldr	r3, [r4, #8]
   b8678:	2100      	movs	r1, #0
   b867a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b867c:	e7f2      	b.n	b8664 <_ZN6String4copyEPKcj+0x18>

000b867e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b867e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8680:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8682:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8686:	4604      	mov	r4, r0
	len = 0;
   b8688:	6083      	str	r3, [r0, #8]
	flags = 0;
   b868a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b868c:	b141      	cbz	r1, b86a0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b868e:	4608      	mov	r0, r1
   b8690:	9101      	str	r1, [sp, #4]
   b8692:	f001 fcdf 	bl	ba054 <strlen>
   b8696:	9901      	ldr	r1, [sp, #4]
   b8698:	4602      	mov	r2, r0
   b869a:	4620      	mov	r0, r4
   b869c:	f7ff ffd6 	bl	b864c <_ZN6String4copyEPKcj>
}
   b86a0:	4620      	mov	r0, r4
   b86a2:	b002      	add	sp, #8
   b86a4:	bd10      	pop	{r4, pc}

000b86a6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b86a6:	4288      	cmp	r0, r1
{
   b86a8:	b510      	push	{r4, lr}
   b86aa:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b86ac:	d005      	beq.n	b86ba <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b86ae:	680b      	ldr	r3, [r1, #0]
   b86b0:	b12b      	cbz	r3, b86be <_ZN6StringaSERKS_+0x18>
   b86b2:	688a      	ldr	r2, [r1, #8]
   b86b4:	4619      	mov	r1, r3
   b86b6:	f7ff ffc9 	bl	b864c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b86ba:	4620      	mov	r0, r4
   b86bc:	bd10      	pop	{r4, pc}
	else invalidate();
   b86be:	f7ff ff9a 	bl	b85f6 <_ZN6String10invalidateEv>
   b86c2:	e7fa      	b.n	b86ba <_ZN6StringaSERKS_+0x14>

000b86c4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b86c4:	b510      	push	{r4, lr}
	buffer = NULL;
   b86c6:	2300      	movs	r3, #0
String::String(const String &value)
   b86c8:	4604      	mov	r4, r0
	capacity = 0;
   b86ca:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b86ce:	6083      	str	r3, [r0, #8]
	flags = 0;
   b86d0:	7303      	strb	r3, [r0, #12]
	*this = value;
   b86d2:	f7ff ffe8 	bl	b86a6 <_ZN6StringaSERKS_>
}
   b86d6:	4620      	mov	r0, r4
   b86d8:	bd10      	pop	{r4, pc}

000b86da <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b86da:	b513      	push	{r0, r1, r4, lr}
   b86dc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b86de:	b159      	cbz	r1, b86f8 <_ZN6StringaSEPKc+0x1e>
   b86e0:	4608      	mov	r0, r1
   b86e2:	9101      	str	r1, [sp, #4]
   b86e4:	f001 fcb6 	bl	ba054 <strlen>
   b86e8:	9901      	ldr	r1, [sp, #4]
   b86ea:	4602      	mov	r2, r0
   b86ec:	4620      	mov	r0, r4
   b86ee:	f7ff ffad 	bl	b864c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b86f2:	4620      	mov	r0, r4
   b86f4:	b002      	add	sp, #8
   b86f6:	bd10      	pop	{r4, pc}
	else invalidate();
   b86f8:	f7ff ff7d 	bl	b85f6 <_ZN6String10invalidateEv>
   b86fc:	e7f9      	b.n	b86f2 <_ZN6StringaSEPKc+0x18>

000b86fe <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b86fe:	b510      	push	{r4, lr}
   b8700:	4604      	mov	r4, r0
   b8702:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b8704:	2300      	movs	r3, #0
	capacity = 0;
   b8706:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b870a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b870c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b870e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b8710:	a901      	add	r1, sp, #4
   b8712:	f000 feed 	bl	b94f0 <itoa>
	*this = buf;
   b8716:	a901      	add	r1, sp, #4
   b8718:	4620      	mov	r0, r4
   b871a:	f7ff ffde 	bl	b86da <_ZN6StringaSEPKc>
}
   b871e:	4620      	mov	r0, r4
   b8720:	b00a      	add	sp, #40	; 0x28
   b8722:	bd10      	pop	{r4, pc}

000b8724 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b8724:	b510      	push	{r4, lr}
   b8726:	4604      	mov	r4, r0
   b8728:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b872a:	2300      	movs	r3, #0
	capacity = 0;
   b872c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b8730:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b8732:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b8734:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b8736:	a901      	add	r1, sp, #4
   b8738:	f000 fe71 	bl	b941e <ltoa>
	*this = buf;
   b873c:	a901      	add	r1, sp, #4
   b873e:	4620      	mov	r0, r4
   b8740:	f7ff ffcb 	bl	b86da <_ZN6StringaSEPKc>
}
   b8744:	4620      	mov	r0, r4
   b8746:	b00a      	add	sp, #40	; 0x28
   b8748:	bd10      	pop	{r4, pc}

000b874a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b874a:	b570      	push	{r4, r5, r6, lr}
   b874c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b874e:	460e      	mov	r6, r1
   b8750:	b909      	cbnz	r1, b8756 <_ZN6String6concatEPKcj+0xc>
   b8752:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b8754:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b8756:	b16a      	cbz	r2, b8774 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8758:	6884      	ldr	r4, [r0, #8]
   b875a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b875c:	4621      	mov	r1, r4
   b875e:	f7ff ff61 	bl	b8624 <_ZN6String7reserveEj>
   b8762:	2800      	cmp	r0, #0
   b8764:	d0f5      	beq.n	b8752 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8766:	6828      	ldr	r0, [r5, #0]
   b8768:	68ab      	ldr	r3, [r5, #8]
   b876a:	4631      	mov	r1, r6
   b876c:	4418      	add	r0, r3
   b876e:	f001 fc69 	bl	ba044 <strcpy>
	len = newlen;
   b8772:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b8774:	2001      	movs	r0, #1
   b8776:	e7ed      	b.n	b8754 <_ZN6String6concatEPKcj+0xa>

000b8778 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b8778:	688a      	ldr	r2, [r1, #8]
   b877a:	6809      	ldr	r1, [r1, #0]
   b877c:	f7ff bfe5 	b.w	b874a <_ZN6String6concatEPKcj>

000b8780 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b8780:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b8782:	2300      	movs	r3, #0
	buf[0] = c;
   b8784:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b8788:	2201      	movs	r2, #1
   b878a:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b878c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b8790:	f7ff ffdb 	bl	b874a <_ZN6String6concatEPKcj>
}
   b8794:	b003      	add	sp, #12
   b8796:	f85d fb04 	ldr.w	pc, [sp], #4

000b879a <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
   b879a:	b513      	push	{r0, r1, r4, lr}
	char buf[4];
	itoa(num, buf, 10);
   b879c:	220a      	movs	r2, #10
{
   b879e:	4604      	mov	r4, r0
   b87a0:	4608      	mov	r0, r1
	itoa(num, buf, 10);
   b87a2:	a901      	add	r1, sp, #4
   b87a4:	f000 fea4 	bl	b94f0 <itoa>
	return concat(buf, strlen(buf));
   b87a8:	a801      	add	r0, sp, #4
   b87aa:	f001 fc53 	bl	ba054 <strlen>
   b87ae:	a901      	add	r1, sp, #4
   b87b0:	4602      	mov	r2, r0
   b87b2:	4620      	mov	r0, r4
   b87b4:	f7ff ffc9 	bl	b874a <_ZN6String6concatEPKcj>
}
   b87b8:	b002      	add	sp, #8
   b87ba:	bd10      	pop	{r4, pc}

000b87bc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b87bc:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b87be:	688a      	ldr	r2, [r1, #8]
   b87c0:	6809      	ldr	r1, [r1, #0]
{
   b87c2:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b87c4:	f7ff ffc1 	bl	b874a <_ZN6String6concatEPKcj>
   b87c8:	b910      	cbnz	r0, b87d0 <_ZplRK15StringSumHelperRK6String+0x14>
   b87ca:	4620      	mov	r0, r4
   b87cc:	f7ff ff13 	bl	b85f6 <_ZN6String10invalidateEv>
	return a;
}
   b87d0:	4620      	mov	r0, r4
   b87d2:	bd10      	pop	{r4, pc}

000b87d4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b87d4:	b513      	push	{r0, r1, r4, lr}
   b87d6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b87d8:	b929      	cbnz	r1, b87e6 <_ZplRK15StringSumHelperPKc+0x12>
   b87da:	4620      	mov	r0, r4
   b87dc:	f7ff ff0b 	bl	b85f6 <_ZN6String10invalidateEv>
	return a;
}
   b87e0:	4620      	mov	r0, r4
   b87e2:	b002      	add	sp, #8
   b87e4:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b87e6:	4608      	mov	r0, r1
   b87e8:	9101      	str	r1, [sp, #4]
   b87ea:	f001 fc33 	bl	ba054 <strlen>
   b87ee:	9901      	ldr	r1, [sp, #4]
   b87f0:	4602      	mov	r2, r0
   b87f2:	4620      	mov	r0, r4
   b87f4:	f7ff ffa9 	bl	b874a <_ZN6String6concatEPKcj>
   b87f8:	2800      	cmp	r0, #0
   b87fa:	d0ee      	beq.n	b87da <_ZplRK15StringSumHelperPKc+0x6>
   b87fc:	e7f0      	b.n	b87e0 <_ZplRK15StringSumHelperPKc+0xc>

000b87fe <_ZplRK15StringSumHelperh>:
	if (!a.concat(c)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
   b87fe:	b510      	push	{r4, lr}
   b8800:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   b8802:	f7ff ffca 	bl	b879a <_ZN6String6concatEh>
   b8806:	b910      	cbnz	r0, b880e <_ZplRK15StringSumHelperh+0x10>
   b8808:	4620      	mov	r0, r4
   b880a:	f7ff fef4 	bl	b85f6 <_ZN6String10invalidateEv>
	return a;
}
   b880e:	4620      	mov	r0, r4
   b8810:	bd10      	pop	{r4, pc}

000b8812 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b8812:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8814:	6882      	ldr	r2, [r0, #8]
   b8816:	b93a      	cbnz	r2, b8828 <_ZNK6String6equalsEPKc+0x16>
   b8818:	b121      	cbz	r1, b8824 <_ZNK6String6equalsEPKc+0x12>
   b881a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b881c:	fab0 f080 	clz	r0, r0
   b8820:	0940      	lsrs	r0, r0, #5
   b8822:	e000      	b.n	b8826 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8824:	2001      	movs	r0, #1
}
   b8826:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b8828:	6800      	ldr	r0, [r0, #0]
   b882a:	b909      	cbnz	r1, b8830 <_ZNK6String6equalsEPKc+0x1e>
   b882c:	7800      	ldrb	r0, [r0, #0]
   b882e:	e7f5      	b.n	b881c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b8830:	f001 fbfe 	bl	ba030 <strcmp>
   b8834:	e7f2      	b.n	b881c <_ZNK6String6equalsEPKc+0xa>

000b8836 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b8836:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b8838:	6883      	ldr	r3, [r0, #8]
   b883a:	4293      	cmp	r3, r2
   b883c:	d907      	bls.n	b884e <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b883e:	6804      	ldr	r4, [r0, #0]
   b8840:	6809      	ldr	r1, [r1, #0]
   b8842:	18a0      	adds	r0, r4, r2
   b8844:	f001 fc2d 	bl	ba0a2 <strstr>
	if (found == NULL) return -1;
   b8848:	b108      	cbz	r0, b884e <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b884a:	1b00      	subs	r0, r0, r4
}
   b884c:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b884e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8852:	e7fb      	b.n	b884c <_ZNK6String7indexOfERKS_j+0x16>

000b8854 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b8854:	2200      	movs	r2, #0
   b8856:	f7ff bfee 	b.w	b8836 <_ZNK6String7indexOfERKS_j>
	...

000b885c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b885c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b885e:	429a      	cmp	r2, r3
{
   b8860:	460f      	mov	r7, r1
   b8862:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b8864:	490c      	ldr	r1, [pc, #48]	; (b8898 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b8866:	bf88      	it	hi
   b8868:	4613      	movhi	r3, r2
{
   b886a:	4614      	mov	r4, r2
   b886c:	4606      	mov	r6, r0
	if (left > right) {
   b886e:	bf84      	itt	hi
   b8870:	462c      	movhi	r4, r5
   b8872:	461d      	movhi	r5, r3
	String out;
   b8874:	f7ff ff03 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b8878:	68bb      	ldr	r3, [r7, #8]
   b887a:	42a3      	cmp	r3, r4
   b887c:	d30a      	bcc.n	b8894 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b887e:	6839      	ldr	r1, [r7, #0]
   b8880:	42ab      	cmp	r3, r5
   b8882:	bf94      	ite	ls
   b8884:	ebc4 0203 	rsbls	r2, r4, r3
   b8888:	ebc4 0205 	rsbhi	r2, r4, r5
   b888c:	4421      	add	r1, r4
   b888e:	4630      	mov	r0, r6
   b8890:	f7ff fedc 	bl	b864c <_ZN6String4copyEPKcj>
	return out;
}
   b8894:	4630      	mov	r0, r6
   b8896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8898:	000ba587 	.word	0x000ba587

000b889c <_ZNK6String9substringEj>:
{
   b889c:	b510      	push	{r4, lr}
   b889e:	4604      	mov	r4, r0
	return substring(left, len);
   b88a0:	688b      	ldr	r3, [r1, #8]
   b88a2:	f7ff ffdb 	bl	b885c <_ZNK6String9substringEjj>
}
   b88a6:	4620      	mov	r0, r4
   b88a8:	bd10      	pop	{r4, pc}

000b88aa <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
   b88aa:	b538      	push	{r3, r4, r5, lr}
   b88ac:	4604      	mov	r4, r0
   b88ae:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
   b88b0:	68a3      	ldr	r3, [r4, #8]
   b88b2:	428b      	cmp	r3, r1
   b88b4:	d911      	bls.n	b88da <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
   b88b6:	b182      	cbz	r2, b88da <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
   b88b8:	4411      	add	r1, r2
   b88ba:	428b      	cmp	r3, r1
   b88bc:	bf38      	it	cc
   b88be:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
   b88c0:	6825      	ldr	r5, [r4, #0]
	len = len - count;
   b88c2:	1a99      	subs	r1, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
   b88c4:	1813      	adds	r3, r2, r0
	len = len - count;
   b88c6:	60a1      	str	r1, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
   b88c8:	1a0a      	subs	r2, r1, r0
   b88ca:	18e9      	adds	r1, r5, r3
   b88cc:	4428      	add	r0, r5
   b88ce:	f001 fb5f 	bl	b9f90 <memmove>
	buffer[len] = 0;
   b88d2:	6822      	ldr	r2, [r4, #0]
   b88d4:	68a3      	ldr	r3, [r4, #8]
   b88d6:	2100      	movs	r1, #0
   b88d8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   b88da:	4620      	mov	r0, r4
   b88dc:	bd38      	pop	{r3, r4, r5, pc}

000b88de <_ZN6String6removeEj>:
        int count = len - index;
   b88de:	6882      	ldr	r2, [r0, #8]
        return remove(index, count);
   b88e0:	1a52      	subs	r2, r2, r1
   b88e2:	f7ff bfe2 	b.w	b88aa <_ZN6String6removeEjj>

000b88e6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b88e6:	b510      	push	{r4, lr}
   b88e8:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b88ea:	6800      	ldr	r0, [r0, #0]
   b88ec:	b118      	cbz	r0, b88f6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b88ee:	f7fe f89b 	bl	b6a28 <free>
            wakeupSource_ = nullptr;
   b88f2:	2300      	movs	r3, #0
   b88f4:	6023      	str	r3, [r4, #0]
        }
    }
   b88f6:	bd10      	pop	{r4, pc}

000b88f8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   b88f8:	b538      	push	{r3, r4, r5, lr}
   b88fa:	460c      	mov	r4, r1
   b88fc:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b88fe:	f7ff fff2 	bl	b88e6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   b8902:	b154      	cbz	r4, b891a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   b8904:	8820      	ldrh	r0, [r4, #0]
   b8906:	f7fe f887 	bl	b6a18 <malloc>
   b890a:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   b890c:	b128      	cbz	r0, b891a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   b890e:	8822      	ldrh	r2, [r4, #0]
   b8910:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   b8912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   b8916:	f001 bb2d 	b.w	b9f74 <memcpy>
    }
   b891a:	bd38      	pop	{r3, r4, r5, pc}

000b891c <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b891c:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   b891e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   b8922:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   b8924:	f8d1 3006 	ldr.w	r3, [r1, #6]
   b8928:	f8c0 3006 	str.w	r3, [r0, #6]
   b892c:	894b      	ldrh	r3, [r1, #10]
   b892e:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b8930:	460c      	mov	r4, r1
   b8932:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b8934:	f7ff ffd7 	bl	b88e6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   b8938:	6823      	ldr	r3, [r4, #0]
   b893a:	b113      	cbz	r3, b8942 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   b893c:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   b893e:	2300      	movs	r3, #0
   b8940:	6023      	str	r3, [r4, #0]
    }
   b8942:	bd38      	pop	{r3, r4, r5, pc}

000b8944 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b8944:	b507      	push	{r0, r1, r2, lr}
   b8946:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8948:	2100      	movs	r1, #0
{
   b894a:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b894c:	9100      	str	r1, [sp, #0]
   b894e:	2001      	movs	r0, #1
   b8950:	218c      	movs	r1, #140	; 0x8c
   b8952:	f7fd ffaf 	bl	b68b4 <system_reset>
}
   b8956:	b003      	add	sp, #12
   b8958:	f85d fb04 	ldr.w	pc, [sp], #4

000b895c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b895c:	4601      	mov	r1, r0
    reset(0, flags);
   b895e:	2000      	movs	r0, #0
   b8960:	f7ff bff0 	b.w	b8944 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b8964 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b8964:	2000      	movs	r0, #0
   b8966:	f7ff bff9 	b.w	b895c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000b896c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   b896c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b896e:	4d2b      	ldr	r5, [pc, #172]	; (b8a1c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   b8970:	7d0b      	ldrb	r3, [r1, #20]
   b8972:	4604      	mov	r4, r0
   b8974:	b08b      	sub	sp, #44	; 0x2c
   b8976:	4608      	mov	r0, r1
   b8978:	1daf      	adds	r7, r5, #6
   b897a:	2b00      	cmp	r3, #0
   b897c:	d036      	beq.n	b89ec <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   b897e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   b8980:	791b      	ldrb	r3, [r3, #4]
   b8982:	2b00      	cmp	r3, #0
   b8984:	d032      	beq.n	b89ec <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   b8986:	4b26      	ldr	r3, [pc, #152]	; (b8a20 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   b8988:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   b898a:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   b898c:	a902      	add	r1, sp, #8
   b898e:	3004      	adds	r0, #4
   b8990:	e9cd 2202 	strd	r2, r2, [sp, #8]
   b8994:	f7fd ff84 	bl	b68a0 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   b8998:	f8dd 300e 	ldr.w	r3, [sp, #14]
   b899c:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   b89a0:	b200      	sxth	r0, r0
   b89a2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   b89a6:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   b89aa:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   b89ac:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   b89ae:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b89b0:	4628      	mov	r0, r5
   b89b2:	f7ff ffa1 	bl	b88f8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   b89b6:	a802      	add	r0, sp, #8
   b89b8:	f7ff ff95 	bl	b88e6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   b89bc:	2300      	movs	r3, #0
   b89be:	6023      	str	r3, [r4, #0]
   b89c0:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   b89c2:	71a3      	strb	r3, [r4, #6]
   b89c4:	8123      	strh	r3, [r4, #8]
   b89c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b89ca:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   b89cc:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   b89d0:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   b89d2:	f8d5 3006 	ldr.w	r3, [r5, #6]
   b89d6:	f8c4 3006 	str.w	r3, [r4, #6]
   b89da:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b89dc:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   b89de:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   b89e0:	4620      	mov	r0, r4
   b89e2:	f7ff ff89 	bl	b88f8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   b89e6:	4620      	mov	r0, r4
   b89e8:	b00b      	add	sp, #44	; 0x2c
   b89ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   b89ec:	2600      	movs	r6, #0
   b89ee:	2320      	movs	r3, #32
   b89f0:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b89f4:	4b0b      	ldr	r3, [pc, #44]	; (b8a24 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   b89f6:	9300      	str	r3, [sp, #0]
   b89f8:	aa02      	add	r2, sp, #8
   b89fa:	4633      	mov	r3, r6
   b89fc:	490a      	ldr	r1, [pc, #40]	; (b8a28 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   b89fe:	2032      	movs	r0, #50	; 0x32
   b8a00:	f7fd fef2 	bl	b67e8 <log_message>
            : wakeupSource_(nullptr),
   b8a04:	4b06      	ldr	r3, [pc, #24]	; (b8a20 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   b8a06:	4805      	ldr	r0, [pc, #20]	; (b8a1c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   b8a08:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   b8a0a:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   b8a0e:	a902      	add	r1, sp, #8
   b8a10:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b8a14:	f7ff ff82 	bl	b891c <_ZN17SystemSleepResultaSEOS_.isra.0>
   b8a18:	e7cd      	b.n	b89b6 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   b8a1a:	bf00      	nop
   b8a1c:	2003e664 	.word	0x2003e664
   b8a20:	ffff0000 	.word	0xffff0000
   b8a24:	000bad3f 	.word	0x000bad3f
   b8a28:	000bad38 	.word	0x000bad38

000b8a2c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   b8a2c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8a2e:	4b09      	ldr	r3, [pc, #36]	; (b8a54 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   b8a30:	4c09      	ldr	r4, [pc, #36]	; (b8a58 <_GLOBAL__sub_I_System+0x2c>)
   b8a32:	2202      	movs	r2, #2
   b8a34:	601a      	str	r2, [r3, #0]
   b8a36:	2000      	movs	r0, #0
    SleepResult() {}
   b8a38:	4b08      	ldr	r3, [pc, #32]	; (b8a5c <_GLOBAL__sub_I_System+0x30>)
   b8a3a:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8a3c:	e9c4 0000 	strd	r0, r0, [r4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8a40:	f7fd fee2 	bl	b6808 <set_system_mode>
SystemClass System;
   b8a44:	4620      	mov	r0, r4
   b8a46:	4a06      	ldr	r2, [pc, #24]	; (b8a60 <_GLOBAL__sub_I_System+0x34>)
   b8a48:	4906      	ldr	r1, [pc, #24]	; (b8a64 <_GLOBAL__sub_I_System+0x38>)
   b8a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   b8a4e:	f000 bed1 	b.w	b97f4 <__aeabi_atexit>
   b8a52:	bf00      	nop
   b8a54:	2003e670 	.word	0x2003e670
   b8a58:	2003e664 	.word	0x2003e664
   b8a5c:	ffff0000 	.word	0xffff0000
   b8a60:	2003da30 	.word	0x2003da30
   b8a64:	000b40df 	.word	0x000b40df

000b8a68 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b8a68:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8a6a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b8a6c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8a70:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8a72:	2201      	movs	r2, #1
   b8a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8a78:	f10d 0107 	add.w	r1, sp, #7
   b8a7c:	47a0      	blx	r4
}
   b8a7e:	b002      	add	sp, #8
   b8a80:	bd10      	pop	{r4, pc}

000b8a82 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b8a82:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8a84:	6803      	ldr	r3, [r0, #0]
   b8a86:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8a8c:	46a4      	mov	ip, r4
}
   b8a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8a92:	4760      	bx	ip

000b8a94 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8a94:	b513      	push	{r0, r1, r4, lr}
   b8a96:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b8a98:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8a9a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b8a9e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8aa0:	f10d 0107 	add.w	r1, sp, #7
   b8aa4:	2201      	movs	r2, #1
   b8aa6:	47a0      	blx	r4
}
   b8aa8:	b002      	add	sp, #8
   b8aaa:	bd10      	pop	{r4, pc}

000b8aac <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b8aac:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b8aae:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8ab0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8ab4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8ab8:	429a      	cmp	r2, r3
int TCPClient::read() {
   b8aba:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8abc:	d008      	beq.n	b8ad0 <_ZN9TCPClient4readEv+0x24>
   b8abe:	6963      	ldr	r3, [r4, #20]
   b8ac0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8ac4:	1c51      	adds	r1, r2, #1
   b8ac6:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b8aca:	4413      	add	r3, r2
   b8acc:	7918      	ldrb	r0, [r3, #4]
}
   b8ace:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8ad0:	6803      	ldr	r3, [r0, #0]
   b8ad2:	691b      	ldr	r3, [r3, #16]
   b8ad4:	4798      	blx	r3
   b8ad6:	2800      	cmp	r0, #0
   b8ad8:	d1f1      	bne.n	b8abe <_ZN9TCPClient4readEv+0x12>
   b8ada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8ade:	e7f6      	b.n	b8ace <_ZN9TCPClient4readEv+0x22>

000b8ae0 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b8ae0:	4770      	bx	lr

000b8ae2 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b8ae2:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b8ae4:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b8ae6:	43c0      	mvns	r0, r0
   b8ae8:	0fc0      	lsrs	r0, r0, #31
   b8aea:	4770      	bx	lr

000b8aec <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8aec:	4770      	bx	lr
	...

000b8af0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8af0:	4b06      	ldr	r3, [pc, #24]	; (b8b0c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8af2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8af4:	b510      	push	{r4, lr}
   b8af6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8afa:	d005      	beq.n	b8b08 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8afc:	4608      	mov	r0, r1
   b8afe:	f000 fe87 	bl	b9810 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8b02:	2800      	cmp	r0, #0
   b8b04:	bf08      	it	eq
   b8b06:	2400      	moveq	r4, #0
      }
   b8b08:	4620      	mov	r0, r4
   b8b0a:	bd10      	pop	{r4, pc}
   b8b0c:	000bac38 	.word	0x000bac38

000b8b10 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8b10:	b510      	push	{r4, lr}
   b8b12:	21ac      	movs	r1, #172	; 0xac
   b8b14:	4604      	mov	r4, r0
   b8b16:	f000 fe72 	bl	b97fe <_ZdlPvj>
   b8b1a:	4620      	mov	r0, r4
   b8b1c:	bd10      	pop	{r4, pc}

000b8b1e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b8b1e:	21ac      	movs	r1, #172	; 0xac
   b8b20:	f000 be6d 	b.w	b97fe <_ZdlPvj>

000b8b24 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b8b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8b28:	f04f 0800 	mov.w	r8, #0
   b8b2c:	b086      	sub	sp, #24
   b8b2e:	461c      	mov	r4, r3
   b8b30:	f8c0 8004 	str.w	r8, [r0, #4]
   b8b34:	4605      	mov	r5, r0
   b8b36:	460e      	mov	r6, r1
   b8b38:	4617      	mov	r7, r2
    struct timeval tv = {};
   b8b3a:	4641      	mov	r1, r8
   b8b3c:	2210      	movs	r2, #16
   b8b3e:	a802      	add	r0, sp, #8
   b8b40:	f001 fa40 	bl	b9fc4 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b8b44:	1c63      	adds	r3, r4, #1
   b8b46:	d009      	beq.n	b8b5c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b8b48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8b4c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b8b50:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b8b54:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b8b58:	435c      	muls	r4, r3
   b8b5a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b8b5c:	6968      	ldr	r0, [r5, #20]
   b8b5e:	2310      	movs	r3, #16
   b8b60:	9300      	str	r3, [sp, #0]
   b8b62:	6800      	ldr	r0, [r0, #0]
   b8b64:	ab02      	add	r3, sp, #8
   b8b66:	f241 0205 	movw	r2, #4101	; 0x1005
   b8b6a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8b6e:	f7fd fd33 	bl	b65d8 <sock_setsockopt>
    if (ret < 0) {
   b8b72:	2800      	cmp	r0, #0
   b8b74:	da07      	bge.n	b8b86 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b8b76:	f7fd ff7f 	bl	b6a78 <__errno>
   b8b7a:	6803      	ldr	r3, [r0, #0]
   b8b7c:	606b      	str	r3, [r5, #4]
        return 0;
   b8b7e:	2000      	movs	r0, #0
}
   b8b80:	b006      	add	sp, #24
   b8b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b8b86:	6968      	ldr	r0, [r5, #20]
   b8b88:	2300      	movs	r3, #0
   b8b8a:	6800      	ldr	r0, [r0, #0]
   b8b8c:	463a      	mov	r2, r7
   b8b8e:	4631      	mov	r1, r6
   b8b90:	f7fd fd42 	bl	b6618 <sock_send>
    if (ret < 0) {
   b8b94:	1e03      	subs	r3, r0, #0
   b8b96:	dbee      	blt.n	b8b76 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b8b98:	4618      	mov	r0, r3
   b8b9a:	e7f1      	b.n	b8b80 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b8b9c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b8b9c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b8b9e:	6984      	ldr	r4, [r0, #24]
   b8ba0:	4b0a      	ldr	r3, [pc, #40]	; (b8bcc <_ZN9TCPClientD1Ev+0x30>)
   b8ba2:	6003      	str	r3, [r0, #0]
   b8ba4:	4605      	mov	r5, r0
   b8ba6:	b17c      	cbz	r4, b8bc8 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b8ba8:	6863      	ldr	r3, [r4, #4]
   b8baa:	3b01      	subs	r3, #1
   b8bac:	6063      	str	r3, [r4, #4]
   b8bae:	b95b      	cbnz	r3, b8bc8 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b8bb0:	6823      	ldr	r3, [r4, #0]
   b8bb2:	4620      	mov	r0, r4
   b8bb4:	689b      	ldr	r3, [r3, #8]
   b8bb6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8bb8:	68a3      	ldr	r3, [r4, #8]
   b8bba:	3b01      	subs	r3, #1
   b8bbc:	60a3      	str	r3, [r4, #8]
   b8bbe:	b91b      	cbnz	r3, b8bc8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b8bc0:	6823      	ldr	r3, [r4, #0]
   b8bc2:	4620      	mov	r0, r4
   b8bc4:	68db      	ldr	r3, [r3, #12]
   b8bc6:	4798      	blx	r3
   b8bc8:	4628      	mov	r0, r5
   b8bca:	bd38      	pop	{r3, r4, r5, pc}
   b8bcc:	000bad9c 	.word	0x000bad9c

000b8bd0 <_ZN9TCPClientD0Ev>:
   b8bd0:	b510      	push	{r4, lr}
   b8bd2:	4604      	mov	r4, r0
   b8bd4:	f7ff ffe2 	bl	b8b9c <_ZN9TCPClientD1Ev>
   b8bd8:	4620      	mov	r0, r4
   b8bda:	211c      	movs	r1, #28
   b8bdc:	f000 fe0f 	bl	b97fe <_ZdlPvj>
   b8be0:	4620      	mov	r0, r4
   b8be2:	bd10      	pop	{r4, pc}

000b8be4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b8be4:	b530      	push	{r4, r5, lr}
   b8be6:	b087      	sub	sp, #28
   b8be8:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b8bea:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b8bec:	4668      	mov	r0, sp
   b8bee:	f7ff fae9 	bl	b81c4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8bf4:	3404      	adds	r4, #4
   b8bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8bf8:	682b      	ldr	r3, [r5, #0]
   b8bfa:	7023      	strb	r3, [r4, #0]
    }
   b8bfc:	b007      	add	sp, #28
   b8bfe:	bd30      	pop	{r4, r5, pc}

000b8c00 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b8c00:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b8c02:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b8c04:	4b05      	ldr	r3, [pc, #20]	; (b8c1c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b8c06:	4604      	mov	r4, r0
   b8c08:	358c      	adds	r5, #140	; 0x8c
   b8c0a:	f844 3b04 	str.w	r3, [r4], #4
   b8c0e:	4606      	mov	r6, r0
   b8c10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8c12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8c14:	682b      	ldr	r3, [r5, #0]
   b8c16:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b8c18:	4630      	mov	r0, r6
   b8c1a:	bd70      	pop	{r4, r5, r6, pc}
   b8c1c:	000bace4 	.word	0x000bace4

000b8c20 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8c24:	4698      	mov	r8, r3
    stop();
   b8c26:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8c28:	b093      	sub	sp, #76	; 0x4c
   b8c2a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b8c2c:	2400      	movs	r4, #0
    stop();
   b8c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8c30:	4606      	mov	r6, r0
   b8c32:	4617      	mov	r7, r2
    stop();
   b8c34:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8c36:	4628      	mov	r0, r5
   b8c38:	466b      	mov	r3, sp
   b8c3a:	4622      	mov	r2, r4
   b8c3c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b8c3e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8c40:	f7fd fcc2 	bl	b65c8 <netdb_getaddrinfo>
   b8c44:	4605      	mov	r5, r0
   b8c46:	2800      	cmp	r0, #0
   b8c48:	d163      	bne.n	b8d12 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b8c4a:	9b00      	ldr	r3, [sp, #0]
   b8c4c:	2b00      	cmp	r3, #0
   b8c4e:	d04b      	beq.n	b8ce8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8c50:	695b      	ldr	r3, [r3, #20]
   b8c52:	2b00      	cmp	r3, #0
   b8c54:	d048      	beq.n	b8ce8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b8c56:	a806      	add	r0, sp, #24
   b8c58:	f7ff fa70 	bl	b813c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8c5c:	9b00      	ldr	r3, [sp, #0]
   b8c5e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b8c60:	7863      	ldrb	r3, [r4, #1]
   b8c62:	2b02      	cmp	r3, #2
   b8c64:	d104      	bne.n	b8c70 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b8c66:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b8c68:	a806      	add	r0, sp, #24
   b8c6a:	f7ff ffbb 	bl	b8be4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b8c6e:	e026      	b.n	b8cbe <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b8c70:	2b0a      	cmp	r3, #10
   b8c72:	d124      	bne.n	b8cbe <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b8c74:	2211      	movs	r2, #17
   b8c76:	4629      	mov	r1, r5
   b8c78:	a801      	add	r0, sp, #4
   b8c7a:	f001 f9a3 	bl	b9fc4 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8c7e:	68a3      	ldr	r3, [r4, #8]
   b8c80:	2b00      	cmp	r3, #0
   b8c82:	d038      	beq.n	b8cf6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8c84:	f104 0308 	add.w	r3, r4, #8
   b8c88:	f10d 0c04 	add.w	ip, sp, #4
   b8c8c:	3418      	adds	r4, #24
   b8c8e:	6818      	ldr	r0, [r3, #0]
   b8c90:	6859      	ldr	r1, [r3, #4]
   b8c92:	4662      	mov	r2, ip
   b8c94:	c203      	stmia	r2!, {r0, r1}
   b8c96:	3308      	adds	r3, #8
   b8c98:	42a3      	cmp	r3, r4
   b8c9a:	4694      	mov	ip, r2
   b8c9c:	d1f7      	bne.n	b8c8e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b8c9e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b8ca0:	a901      	add	r1, sp, #4
   b8ca2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b8ca4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b8ca8:	f7ff fa56 	bl	b8158 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8cac:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8cb0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b8cb4:	ac07      	add	r4, sp, #28
   b8cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8cb8:	f8dc 3000 	ldr.w	r3, [ip]
   b8cbc:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b8cbe:	a806      	add	r0, sp, #24
   b8cc0:	f7ff fa5c 	bl	b817c <_ZNK9IPAddresscvbEv>
        if (addr) {
   b8cc4:	b180      	cbz	r0, b8ce8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b8cc6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b8cc8:	ad07      	add	r5, sp, #28
   b8cca:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b8cce:	4b12      	ldr	r3, [pc, #72]	; (b8d18 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b8cd0:	930c      	str	r3, [sp, #48]	; 0x30
   b8cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8cd4:	ac0d      	add	r4, sp, #52	; 0x34
   b8cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8cd8:	682b      	ldr	r3, [r5, #0]
   b8cda:	7023      	strb	r3, [r4, #0]
   b8cdc:	463a      	mov	r2, r7
   b8cde:	4643      	mov	r3, r8
   b8ce0:	a90c      	add	r1, sp, #48	; 0x30
   b8ce2:	4630      	mov	r0, r6
   b8ce4:	47c8      	blx	r9
   b8ce6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b8ce8:	9800      	ldr	r0, [sp, #0]
   b8cea:	f7fd fc65 	bl	b65b8 <netdb_freeaddrinfo>
}
   b8cee:	4628      	mov	r0, r5
   b8cf0:	b013      	add	sp, #76	; 0x4c
   b8cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8cf6:	68e3      	ldr	r3, [r4, #12]
   b8cf8:	2b00      	cmp	r3, #0
   b8cfa:	d1c3      	bne.n	b8c84 <_ZN9TCPClient7connectEPKctm+0x64>
   b8cfc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b8d00:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b8d04:	f7fd fc48 	bl	b6598 <inet_htonl>
   b8d08:	4581      	cmp	r9, r0
   b8d0a:	d1bb      	bne.n	b8c84 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b8d0c:	f104 0114 	add.w	r1, r4, #20
   b8d10:	e7aa      	b.n	b8c68 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8d12:	4625      	mov	r5, r4
   b8d14:	e7e8      	b.n	b8ce8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8d16:	bf00      	nop
   b8d18:	000bace4 	.word	0x000bace4

000b8d1c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b8d1c:	b538      	push	{r3, r4, r5, lr}
   b8d1e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b8d20:	681a      	ldr	r2, [r3, #0]
   b8d22:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b8d24:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b8d26:	da10      	bge.n	b8d4a <_ZN9TCPClient9connectedEv+0x2e>
   b8d28:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8d2c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8d30:	429a      	cmp	r2, r3
   b8d32:	d10a      	bne.n	b8d4a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b8d34:	6803      	ldr	r3, [r0, #0]
   b8d36:	691b      	ldr	r3, [r3, #16]
   b8d38:	4798      	blx	r3
        if (!rv) {
   b8d3a:	4604      	mov	r4, r0
   b8d3c:	b928      	cbnz	r0, b8d4a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b8d3e:	682b      	ldr	r3, [r5, #0]
   b8d40:	4628      	mov	r0, r5
   b8d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8d44:	4798      	blx	r3
        rv = available();
   b8d46:	4620      	mov	r0, r4
}
   b8d48:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b8d4a:	2001      	movs	r0, #1
   b8d4c:	e7fc      	b.n	b8d48 <_ZN9TCPClient9connectedEv+0x2c>

000b8d4e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b8d4e:	b510      	push	{r4, lr}
   b8d50:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8d52:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8d56:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8d5a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b8d5c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8d5e:	d005      	beq.n	b8d6c <_ZN9TCPClient4peekEv+0x1e>
   b8d60:	6963      	ldr	r3, [r4, #20]
   b8d62:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8d66:	4413      	add	r3, r2
   b8d68:	7918      	ldrb	r0, [r3, #4]
}
   b8d6a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8d6c:	6803      	ldr	r3, [r0, #0]
   b8d6e:	691b      	ldr	r3, [r3, #16]
   b8d70:	4798      	blx	r3
   b8d72:	2800      	cmp	r0, #0
   b8d74:	d1f4      	bne.n	b8d60 <_ZN9TCPClient4peekEv+0x12>
   b8d76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8d7a:	e7f6      	b.n	b8d6a <_ZN9TCPClient4peekEv+0x1c>

000b8d7c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8d7e:	6943      	ldr	r3, [r0, #20]
   b8d80:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b8d82:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8d86:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8d8a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8d8c:	4605      	mov	r5, r0
   b8d8e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b8d90:	d016      	beq.n	b8dc0 <_ZN9TCPClient4readEPhj+0x44>
   b8d92:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b8d94:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b8d98:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b8d9c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b8d9e:	42bc      	cmp	r4, r7
   b8da0:	bf28      	it	cs
   b8da2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b8da4:	3304      	adds	r3, #4
   b8da6:	4622      	mov	r2, r4
   b8da8:	4419      	add	r1, r3
   b8daa:	4630      	mov	r0, r6
   b8dac:	f001 f8e2 	bl	b9f74 <memcpy>
   b8db0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b8db2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b8db6:	4423      	add	r3, r4
   b8db8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b8dbc:	4620      	mov	r0, r4
   b8dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b8dc0:	6803      	ldr	r3, [r0, #0]
   b8dc2:	691b      	ldr	r3, [r3, #16]
   b8dc4:	4798      	blx	r3
   b8dc6:	2800      	cmp	r0, #0
   b8dc8:	d1e3      	bne.n	b8d92 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b8dca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b8dce:	e7f5      	b.n	b8dbc <_ZN9TCPClient4readEPhj+0x40>

000b8dd0 <_ZN9TCPClient12flush_bufferEv>:
   b8dd0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b8dd2:	2300      	movs	r3, #0
   b8dd4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b8dd8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b8dda:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b8dde:	4770      	bx	lr

000b8de0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8de4:	461f      	mov	r7, r3
    stop();
   b8de6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8de8:	460c      	mov	r4, r1
    stop();
   b8dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8dec:	b08a      	sub	sp, #40	; 0x28
   b8dee:	4605      	mov	r5, r0
   b8df0:	4616      	mov	r6, r2
    stop();
   b8df2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b8df4:	7d23      	ldrb	r3, [r4, #20]
   b8df6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b8dfa:	2b04      	cmp	r3, #4
   b8dfc:	bf0c      	ite	eq
   b8dfe:	2002      	moveq	r0, #2
   b8e00:	200a      	movne	r0, #10
   b8e02:	2206      	movs	r2, #6
   b8e04:	2101      	movs	r1, #1
   b8e06:	f7fd fc0f 	bl	b6628 <sock_socket>
   b8e0a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b8e0e:	696b      	ldr	r3, [r5, #20]
   b8e10:	681b      	ldr	r3, [r3, #0]
   b8e12:	2b00      	cmp	r3, #0
   b8e14:	da08      	bge.n	b8e28 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b8e16:	682b      	ldr	r3, [r5, #0]
   b8e18:	4628      	mov	r0, r5
   b8e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8e1c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b8e1e:	4798      	blx	r3
}
   b8e20:	4620      	mov	r0, r4
   b8e22:	b00a      	add	sp, #40	; 0x28
   b8e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b8e28:	4628      	mov	r0, r5
   b8e2a:	f7ff ffd1 	bl	b8dd0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b8e2e:	b1b7      	cbz	r7, b8e5e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b8e30:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8e32:	a903      	add	r1, sp, #12
   b8e34:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b8e36:	9303      	str	r3, [sp, #12]
   b8e38:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8e3c:	f7fd fb9c 	bl	b6578 <if_index_to_name>
   b8e40:	2800      	cmp	r0, #0
   b8e42:	d1e8      	bne.n	b8e16 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b8e44:	6968      	ldr	r0, [r5, #20]
   b8e46:	2306      	movs	r3, #6
   b8e48:	9300      	str	r3, [sp, #0]
   b8e4a:	6800      	ldr	r0, [r0, #0]
   b8e4c:	ab03      	add	r3, sp, #12
   b8e4e:	f241 020b 	movw	r2, #4107	; 0x100b
   b8e52:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8e56:	f7fd fbbf 	bl	b65d8 <sock_setsockopt>
   b8e5a:	2800      	cmp	r0, #0
   b8e5c:	d1db      	bne.n	b8e16 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b8e5e:	221c      	movs	r2, #28
   b8e60:	2100      	movs	r1, #0
   b8e62:	a803      	add	r0, sp, #12
   b8e64:	f001 f8ae 	bl	b9fc4 <memset>
    if (ip.version() == 4) {
   b8e68:	7d23      	ldrb	r3, [r4, #20]
   b8e6a:	2b04      	cmp	r3, #4
   b8e6c:	d11d      	bne.n	b8eaa <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b8e6e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b8e72:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b8e74:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b8e78:	f7fd fb96 	bl	b65a8 <inet_htons>
   b8e7c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b8e80:	6860      	ldr	r0, [r4, #4]
   b8e82:	f7fd fb89 	bl	b6598 <inet_htonl>
   b8e86:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b8e88:	696b      	ldr	r3, [r5, #20]
   b8e8a:	221c      	movs	r2, #28
   b8e8c:	6818      	ldr	r0, [r3, #0]
   b8e8e:	a903      	add	r1, sp, #12
   b8e90:	f7fd fbb2 	bl	b65f8 <sock_connect>
   b8e94:	2800      	cmp	r0, #0
   b8e96:	d1be      	bne.n	b8e16 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b8e98:	3404      	adds	r4, #4
   b8e9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8e9c:	696d      	ldr	r5, [r5, #20]
   b8e9e:	358c      	adds	r5, #140	; 0x8c
   b8ea0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8ea2:	6823      	ldr	r3, [r4, #0]
   b8ea4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b8ea6:	2401      	movs	r4, #1
   b8ea8:	e7ba      	b.n	b8e20 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b8eaa:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b8eae:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b8eb0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b8eb4:	f7fd fb78 	bl	b65a8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8eb8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b8eba:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8ebe:	1d23      	adds	r3, r4, #4
   b8ec0:	f104 0714 	add.w	r7, r4, #20
   b8ec4:	6818      	ldr	r0, [r3, #0]
   b8ec6:	6859      	ldr	r1, [r3, #4]
   b8ec8:	4632      	mov	r2, r6
   b8eca:	c203      	stmia	r2!, {r0, r1}
   b8ecc:	3308      	adds	r3, #8
   b8ece:	42bb      	cmp	r3, r7
   b8ed0:	4616      	mov	r6, r2
   b8ed2:	d1f7      	bne.n	b8ec4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b8ed4:	e7d8      	b.n	b8e88 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b8ed8 <_ZN9TCPClient9availableEv>:
{
   b8ed8:	b530      	push	{r4, r5, lr}
   b8eda:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b8edc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b8ee0:	b08b      	sub	sp, #44	; 0x2c
   b8ee2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b8ee4:	b12b      	cbz	r3, b8ef2 <_ZN9TCPClient9availableEv+0x1a>
   b8ee6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b8eea:	429a      	cmp	r2, r3
   b8eec:	d101      	bne.n	b8ef2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b8eee:	f7ff ff6f 	bl	b8dd0 <_ZN9TCPClient12flush_bufferEv>
   b8ef2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b8ef4:	6808      	ldr	r0, [r1, #0]
   b8ef6:	2800      	cmp	r0, #0
   b8ef8:	db18      	blt.n	b8f2c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b8efa:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b8efe:	2d7f      	cmp	r5, #127	; 0x7f
   b8f00:	d814      	bhi.n	b8f2c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b8f02:	3104      	adds	r1, #4
   b8f04:	2308      	movs	r3, #8
   b8f06:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b8f0a:	4429      	add	r1, r5
   b8f0c:	f7fd fb7c 	bl	b6608 <sock_recv>
            if (ret > 0) {
   b8f10:	2800      	cmp	r0, #0
   b8f12:	dd13      	ble.n	b8f3c <_ZN9TCPClient9availableEv+0x64>
   b8f14:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b8f16:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8f1a:	b90a      	cbnz	r2, b8f20 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b8f1c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b8f20:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b8f22:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8f26:	4410      	add	r0, r2
   b8f28:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b8f2c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b8f2e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b8f32:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b8f36:	1ac0      	subs	r0, r0, r3
   b8f38:	b00b      	add	sp, #44	; 0x2c
   b8f3a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b8f3c:	f7fd fd9c 	bl	b6a78 <__errno>
   b8f40:	6803      	ldr	r3, [r0, #0]
   b8f42:	2b0b      	cmp	r3, #11
   b8f44:	d0f2      	beq.n	b8f2c <_ZN9TCPClient9availableEv+0x54>
   b8f46:	f7fd fd97 	bl	b6a78 <__errno>
   b8f4a:	6803      	ldr	r3, [r0, #0]
   b8f4c:	2b0b      	cmp	r3, #11
   b8f4e:	d0ed      	beq.n	b8f2c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b8f50:	2320      	movs	r3, #32
   b8f52:	2500      	movs	r5, #0
   b8f54:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b8f58:	f7fd fd8e 	bl	b6a78 <__errno>
   b8f5c:	6803      	ldr	r3, [r0, #0]
   b8f5e:	9301      	str	r3, [sp, #4]
   b8f60:	4b08      	ldr	r3, [pc, #32]	; (b8f84 <_ZN9TCPClient9availableEv+0xac>)
   b8f62:	4909      	ldr	r1, [pc, #36]	; (b8f88 <_ZN9TCPClient9availableEv+0xb0>)
   b8f64:	9300      	str	r3, [sp, #0]
   b8f66:	aa02      	add	r2, sp, #8
   b8f68:	462b      	mov	r3, r5
   b8f6a:	2032      	movs	r0, #50	; 0x32
   b8f6c:	f7fd fc3c 	bl	b67e8 <log_message>
                    sock_close(d_->sock);
   b8f70:	6963      	ldr	r3, [r4, #20]
   b8f72:	6818      	ldr	r0, [r3, #0]
   b8f74:	f7fd fb38 	bl	b65e8 <sock_close>
   b8f78:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b8f7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8f7e:	601a      	str	r2, [r3, #0]
   b8f80:	e7d4      	b.n	b8f2c <_ZN9TCPClient9availableEv+0x54>
   b8f82:	bf00      	nop
   b8f84:	000bad66 	.word	0x000bad66
   b8f88:	000bad38 	.word	0x000bad38

000b8f8c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b8f8c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b8f8e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b8f90:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b8f92:	6818      	ldr	r0, [r3, #0]
   b8f94:	2800      	cmp	r0, #0
   b8f96:	db01      	blt.n	b8f9c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b8f98:	f7fd fb26 	bl	b65e8 <sock_close>
   b8f9c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b8f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8fa2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b8fa4:	6960      	ldr	r0, [r4, #20]
   b8fa6:	2211      	movs	r2, #17
   b8fa8:	2100      	movs	r1, #0
   b8faa:	308c      	adds	r0, #140	; 0x8c
   b8fac:	f001 f80a 	bl	b9fc4 <memset>
    flush_buffer();
   b8fb0:	4620      	mov	r0, r4
}
   b8fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b8fb6:	f7ff bf0b 	b.w	b8dd0 <_ZN9TCPClient12flush_bufferEv>

000b8fba <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b8fba:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b8fbc:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b8fbe:	4604      	mov	r4, r0
          total(0) {
   b8fc0:	6001      	str	r1, [r0, #0]
   b8fc2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b8fc6:	3088      	adds	r0, #136	; 0x88
   b8fc8:	f7ff f8b8 	bl	b813c <_ZN9IPAddressC1Ev>
}
   b8fcc:	4620      	mov	r0, r4
   b8fce:	bd10      	pop	{r4, pc}

000b8fd0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b8fd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8fd2:	2300      	movs	r3, #0
   b8fd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8fd8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b8fdc:	4a0e      	ldr	r2, [pc, #56]	; (b9018 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b8fde:	6103      	str	r3, [r0, #16]
   b8fe0:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8fe2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b8fe4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8fe6:	20ac      	movs	r0, #172	; 0xac
   b8fe8:	9101      	str	r1, [sp, #4]
   b8fea:	f7fb f854 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8fee:	1e05      	subs	r5, r0, #0
   b8ff0:	f105 060c 	add.w	r6, r5, #12
   b8ff4:	d008      	beq.n	b9008 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b8ff6:	2301      	movs	r3, #1
   b8ff8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8ffc:	4b07      	ldr	r3, [pc, #28]	; (b901c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8ffe:	9901      	ldr	r1, [sp, #4]
   b9000:	602b      	str	r3, [r5, #0]
   b9002:	4630      	mov	r0, r6
   b9004:	f7ff ffd9 	bl	b8fba <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b9008:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b900a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b900e:	f7ff fedf 	bl	b8dd0 <_ZN9TCPClient12flush_bufferEv>
}
   b9012:	b002      	add	sp, #8
   b9014:	bd70      	pop	{r4, r5, r6, pc}
   b9016:	bf00      	nop
   b9018:	000bad9c 	.word	0x000bad9c
   b901c:	000bad80 	.word	0x000bad80

000b9020 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b9020:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b9022:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b9026:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b9028:	f7ff ffd2 	bl	b8fd0 <_ZN9TCPClientC1Ei>
}
   b902c:	4620      	mov	r0, r4
   b902e:	bd10      	pop	{r4, pc}

000b9030 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b9030:	b510      	push	{r4, lr}
   b9032:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b9034:	6800      	ldr	r0, [r0, #0]
   b9036:	2800      	cmp	r0, #0
   b9038:	db01      	blt.n	b903e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b903a:	f7fd fad5 	bl	b65e8 <sock_close>
    }
}
   b903e:	4620      	mov	r0, r4
   b9040:	bd10      	pop	{r4, pc}

000b9042 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b9042:	300c      	adds	r0, #12
   b9044:	f7ff bff4 	b.w	b9030 <_ZN9TCPClient4DataD1Ev>

000b9048 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b9048:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b904a:	2000      	movs	r0, #0
   b904c:	f7fd fc5c 	bl	b6908 <spark_sync_time_pending>
   b9050:	b128      	cbz	r0, b905e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b9052:	f7fd fc49 	bl	b68e8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b9056:	f080 0001 	eor.w	r0, r0, #1
   b905a:	b2c0      	uxtb	r0, r0
    }
   b905c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b905e:	2001      	movs	r0, #1
   b9060:	e7fc      	b.n	b905c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b9064 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b9064:	b530      	push	{r4, r5, lr}
   b9066:	b093      	sub	sp, #76	; 0x4c
   b9068:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b906c:	4b19      	ldr	r3, [pc, #100]	; (b90d4 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b906e:	4604      	mov	r4, r0
    t += time_zone_cache;
   b9070:	e9d3 1000 	ldrd	r1, r0, [r3]
   b9074:	9b01      	ldr	r3, [sp, #4]
   b9076:	1852      	adds	r2, r2, r1
   b9078:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b907c:	4816      	ldr	r0, [pc, #88]	; (b90d8 <_ZN9TimeClass7timeStrEx+0x74>)
   b907e:	e9d0 1000 	ldrd	r1, r0, [r0]
   b9082:	1852      	adds	r2, r2, r1
   b9084:	eb43 0300 	adc.w	r3, r3, r0
   b9088:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b908c:	2224      	movs	r2, #36	; 0x24
   b908e:	eb0d 0002 	add.w	r0, sp, r2
   b9092:	2100      	movs	r1, #0
   b9094:	f000 ff96 	bl	b9fc4 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b9098:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b909a:	a909      	add	r1, sp, #36	; 0x24
   b909c:	4668      	mov	r0, sp
   b909e:	f7fd fd03 	bl	b6aa8 <localtime_r>
    char ascstr[26] = {};
   b90a2:	2216      	movs	r2, #22
   b90a4:	4629      	mov	r1, r5
   b90a6:	a803      	add	r0, sp, #12
   b90a8:	9502      	str	r5, [sp, #8]
   b90aa:	f000 ff8b 	bl	b9fc4 <memset>
    asctime_r(&calendar_time, ascstr);
   b90ae:	a902      	add	r1, sp, #8
   b90b0:	a809      	add	r0, sp, #36	; 0x24
   b90b2:	f000 ff03 	bl	b9ebc <asctime_r>
    int len = strlen(ascstr);
   b90b6:	a802      	add	r0, sp, #8
   b90b8:	f000 ffcc 	bl	ba054 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b90bc:	ab12      	add	r3, sp, #72	; 0x48
   b90be:	4418      	add	r0, r3
    return String(ascstr);
   b90c0:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b90c2:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b90c6:	4620      	mov	r0, r4
   b90c8:	f7ff fad9 	bl	b867e <_ZN6StringC1EPK19__FlashStringHelper>
}
   b90cc:	4620      	mov	r0, r4
   b90ce:	b013      	add	sp, #76	; 0x4c
   b90d0:	bd30      	pop	{r4, r5, pc}
   b90d2:	bf00      	nop
   b90d4:	2003e680 	.word	0x2003e680
   b90d8:	2003e678 	.word	0x2003e678

000b90dc <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b90dc:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b90de:	2000      	movs	r0, #0
   b90e0:	f7fd f9c2 	bl	b6468 <hal_rtc_time_is_valid>
    if (rtcstate)
   b90e4:	4604      	mov	r4, r0
   b90e6:	b9a0      	cbnz	r0, b9112 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b90e8:	f7fd fb86 	bl	b67f8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b90ec:	2801      	cmp	r0, #1
   b90ee:	d110      	bne.n	b9112 <_ZN9TimeClass7isValidEv+0x36>
   b90f0:	4620      	mov	r0, r4
   b90f2:	f7fd fbb9 	bl	b6868 <system_thread_get_state>
   b90f6:	b960      	cbnz	r0, b9112 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b90f8:	f7ff ffa6 	bl	b9048 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b90fc:	b910      	cbnz	r0, b9104 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b90fe:	f7fd fbe3 	bl	b68c8 <spark_process>
        while (_while() && !_condition()) {
   b9102:	e7f9      	b.n	b90f8 <_ZN9TimeClass7isValidEv+0x1c>
   b9104:	f7ff ffa0 	bl	b9048 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b9108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b910c:	2000      	movs	r0, #0
   b910e:	f7fd b9ab 	b.w	b6468 <hal_rtc_time_is_valid>
}
   b9112:	4620      	mov	r0, r4
   b9114:	bd10      	pop	{r4, pc}

000b9116 <_ZN9TimeClass3nowEv>:
{
   b9116:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b9118:	f7ff ffe0 	bl	b90dc <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b911c:	2210      	movs	r2, #16
   b911e:	2100      	movs	r1, #0
   b9120:	4668      	mov	r0, sp
   b9122:	f000 ff4f 	bl	b9fc4 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b9126:	2100      	movs	r1, #0
   b9128:	4668      	mov	r0, sp
   b912a:	f7fd f9a5 	bl	b6478 <hal_rtc_get_time>
}
   b912e:	9800      	ldr	r0, [sp, #0]
   b9130:	b005      	add	sp, #20
   b9132:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9138 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9138:	4b02      	ldr	r3, [pc, #8]	; (b9144 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b913a:	681a      	ldr	r2, [r3, #0]
   b913c:	4b02      	ldr	r3, [pc, #8]	; (b9148 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b913e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9140:	4770      	bx	lr
   b9142:	bf00      	nop
   b9144:	2003d9c4 	.word	0x2003d9c4
   b9148:	2003e674 	.word	0x2003e674

000b914c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   b914c:	4770      	bx	lr

000b914e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b914e:	7441      	strb	r1, [r0, #17]
}
   b9150:	4770      	bx	lr

000b9152 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b9152:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9154:	7c00      	ldrb	r0, [r0, #16]
   b9156:	f7fd faf7 	bl	b6748 <hal_usart_available_data_for_write>
}
   b915a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b915e:	bd08      	pop	{r3, pc}

000b9160 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9160:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b9162:	7c00      	ldrb	r0, [r0, #16]
   b9164:	f7fd fac8 	bl	b66f8 <hal_usart_available>
}
   b9168:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b916c:	bd08      	pop	{r3, pc}

000b916e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b916e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9170:	7c00      	ldrb	r0, [r0, #16]
   b9172:	f7fd fad1 	bl	b6718 <hal_usart_peek>
}
   b9176:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b917a:	bd08      	pop	{r3, pc}

000b917c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b917c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b917e:	7c00      	ldrb	r0, [r0, #16]
   b9180:	f7fd fac2 	bl	b6708 <hal_usart_read>
}
   b9184:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9188:	bd08      	pop	{r3, pc}

000b918a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b918a:	7c00      	ldrb	r0, [r0, #16]
   b918c:	f7fd bacc 	b.w	b6728 <hal_usart_flush>

000b9190 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b9190:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9192:	7c45      	ldrb	r5, [r0, #17]
{
   b9194:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9196:	b12d      	cbz	r5, b91a4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b9198:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b919a:	b003      	add	sp, #12
   b919c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b91a0:	f7fd baa2 	b.w	b66e8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b91a4:	7c00      	ldrb	r0, [r0, #16]
   b91a6:	9101      	str	r1, [sp, #4]
   b91a8:	f7fd face 	bl	b6748 <hal_usart_available_data_for_write>
   b91ac:	2800      	cmp	r0, #0
   b91ae:	9901      	ldr	r1, [sp, #4]
   b91b0:	dcf2      	bgt.n	b9198 <_ZN11USARTSerial5writeEh+0x8>
}
   b91b2:	4628      	mov	r0, r5
   b91b4:	b003      	add	sp, #12
   b91b6:	bd30      	pop	{r4, r5, pc}

000b91b8 <_ZN11USARTSerialD0Ev>:
   b91b8:	b510      	push	{r4, lr}
   b91ba:	2114      	movs	r1, #20
   b91bc:	4604      	mov	r4, r0
   b91be:	f000 fb1e 	bl	b97fe <_ZdlPvj>
   b91c2:	4620      	mov	r0, r4
   b91c4:	bd10      	pop	{r4, pc}
	...

000b91c8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   b91c8:	b510      	push	{r4, lr}
   b91ca:	f04f 0c00 	mov.w	ip, #0
   b91ce:	4604      	mov	r4, r0
   b91d0:	4608      	mov	r0, r1
   b91d2:	4611      	mov	r1, r2
   b91d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b91d8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   b91dc:	4a04      	ldr	r2, [pc, #16]	; (b91f0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   b91de:	6022      	str	r2, [r4, #0]
  _blocking = true;
   b91e0:	2201      	movs	r2, #1
  _serial = serial;
   b91e2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b91e4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   b91e6:	461a      	mov	r2, r3
   b91e8:	f7fd fa76 	bl	b66d8 <hal_usart_init>
}
   b91ec:	4620      	mov	r0, r4
   b91ee:	bd10      	pop	{r4, pc}
   b91f0:	000bae04 	.word	0x000bae04

000b91f4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   b91f4:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   b91f6:	4c0e      	ldr	r4, [pc, #56]	; (b9230 <_Z22__fetch_global_Serial1v+0x3c>)
   b91f8:	7821      	ldrb	r1, [r4, #0]
   b91fa:	f3bf 8f5b 	dmb	ish
   b91fe:	f011 0101 	ands.w	r1, r1, #1
   b9202:	d112      	bne.n	b922a <_Z22__fetch_global_Serial1v+0x36>
   b9204:	4620      	mov	r0, r4
   b9206:	9101      	str	r1, [sp, #4]
   b9208:	f7fa ff4b 	bl	b40a2 <__cxa_guard_acquire>
   b920c:	9901      	ldr	r1, [sp, #4]
   b920e:	b160      	cbz	r0, b922a <_Z22__fetch_global_Serial1v+0x36>
   b9210:	4a08      	ldr	r2, [pc, #32]	; (b9234 <_Z22__fetch_global_Serial1v+0x40>)
   b9212:	4b09      	ldr	r3, [pc, #36]	; (b9238 <_Z22__fetch_global_Serial1v+0x44>)
   b9214:	4809      	ldr	r0, [pc, #36]	; (b923c <_Z22__fetch_global_Serial1v+0x48>)
   b9216:	f7ff ffd7 	bl	b91c8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   b921a:	4620      	mov	r0, r4
   b921c:	f7fa ff46 	bl	b40ac <__cxa_guard_release>
   b9220:	4a07      	ldr	r2, [pc, #28]	; (b9240 <_Z22__fetch_global_Serial1v+0x4c>)
   b9222:	4908      	ldr	r1, [pc, #32]	; (b9244 <_Z22__fetch_global_Serial1v+0x50>)
   b9224:	4805      	ldr	r0, [pc, #20]	; (b923c <_Z22__fetch_global_Serial1v+0x48>)
   b9226:	f000 fae5 	bl	b97f4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   b922a:	4804      	ldr	r0, [pc, #16]	; (b923c <_Z22__fetch_global_Serial1v+0x48>)
   b922c:	b002      	add	sp, #8
   b922e:	bd10      	pop	{r4, pc}
   b9230:	2003e688 	.word	0x2003e688
   b9234:	2003e68c 	.word	0x2003e68c
   b9238:	2003e710 	.word	0x2003e710
   b923c:	2003e794 	.word	0x2003e794
   b9240:	2003da30 	.word	0x2003da30
   b9244:	000b914d 	.word	0x000b914d

000b9248 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9248:	7441      	strb	r1, [r0, #17]
}
   b924a:	4770      	bx	lr

000b924c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b924c:	4770      	bx	lr

000b924e <_ZN9USBSerial4readEv>:
{
   b924e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b9250:	2100      	movs	r1, #0
   b9252:	7c00      	ldrb	r0, [r0, #16]
   b9254:	f7fd faa0 	bl	b6798 <HAL_USB_USART_Receive_Data>
}
   b9258:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b925c:	bd08      	pop	{r3, pc}

000b925e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   b925e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b9260:	2101      	movs	r1, #1
   b9262:	7c00      	ldrb	r0, [r0, #16]
   b9264:	f7fd fa98 	bl	b6798 <HAL_USB_USART_Receive_Data>
}
   b9268:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b926c:	bd08      	pop	{r3, pc}

000b926e <_ZN9USBSerial17availableForWriteEv>:
{
   b926e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b9270:	7c00      	ldrb	r0, [r0, #16]
   b9272:	f7fd fa89 	bl	b6788 <HAL_USB_USART_Available_Data_For_Write>
}
   b9276:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b927a:	bd08      	pop	{r3, pc}

000b927c <_ZN9USBSerial9availableEv>:
{
   b927c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b927e:	7c00      	ldrb	r0, [r0, #16]
   b9280:	f7fd fa7a 	bl	b6778 <HAL_USB_USART_Available_Data>
}
   b9284:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9288:	bd08      	pop	{r3, pc}

000b928a <_ZN9USBSerial5writeEh>:
{
   b928a:	b513      	push	{r0, r1, r4, lr}
   b928c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b928e:	7c00      	ldrb	r0, [r0, #16]
{
   b9290:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9292:	f7fd fa79 	bl	b6788 <HAL_USB_USART_Available_Data_For_Write>
   b9296:	2800      	cmp	r0, #0
   b9298:	9901      	ldr	r1, [sp, #4]
   b929a:	dc01      	bgt.n	b92a0 <_ZN9USBSerial5writeEh+0x16>
   b929c:	7c60      	ldrb	r0, [r4, #17]
   b929e:	b120      	cbz	r0, b92aa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b92a0:	7c20      	ldrb	r0, [r4, #16]
   b92a2:	f7fd fa81 	bl	b67a8 <HAL_USB_USART_Send_Data>
   b92a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b92aa:	b002      	add	sp, #8
   b92ac:	bd10      	pop	{r4, pc}

000b92ae <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b92ae:	7c00      	ldrb	r0, [r0, #16]
   b92b0:	f7fd ba82 	b.w	b67b8 <HAL_USB_USART_Flush_Data>

000b92b4 <_ZN9USBSerialD0Ev>:
   b92b4:	b510      	push	{r4, lr}
   b92b6:	2114      	movs	r1, #20
   b92b8:	4604      	mov	r4, r0
   b92ba:	f000 faa0 	bl	b97fe <_ZdlPvj>
   b92be:	4620      	mov	r0, r4
   b92c0:	bd10      	pop	{r4, pc}
	...

000b92c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b92c4:	b510      	push	{r4, lr}
   b92c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b92ca:	4604      	mov	r4, r0
   b92cc:	4608      	mov	r0, r1
   b92ce:	2100      	movs	r1, #0
   b92d0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b92d4:	4b04      	ldr	r3, [pc, #16]	; (b92e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b92d6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b92d8:	2301      	movs	r3, #1
  _serial = serial;
   b92da:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b92dc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b92de:	4611      	mov	r1, r2
   b92e0:	f7fd fa3a 	bl	b6758 <HAL_USB_USART_Init>
}
   b92e4:	4620      	mov	r0, r4
   b92e6:	bd10      	pop	{r4, pc}
   b92e8:	000bae34 	.word	0x000bae34

000b92ec <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b92ec:	7c00      	ldrb	r0, [r0, #16]
   b92ee:	2200      	movs	r2, #0
   b92f0:	f7fd ba3a 	b.w	b6768 <HAL_USB_USART_Begin>

000b92f4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   b92f4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   b92f6:	2214      	movs	r2, #20
{
   b92f8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   b92fa:	2100      	movs	r1, #0
   b92fc:	f000 fe62 	bl	b9fc4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   b9300:	4620      	mov	r0, r4
   b9302:	bd10      	pop	{r4, pc}

000b9304 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   b9304:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9306:	4c10      	ldr	r4, [pc, #64]	; (b9348 <_Z16_fetch_usbserialv+0x44>)
{
   b9308:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b930a:	a803      	add	r0, sp, #12
   b930c:	f7ff fff2 	bl	b92f4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9310:	7821      	ldrb	r1, [r4, #0]
   b9312:	f3bf 8f5b 	dmb	ish
   b9316:	f011 0101 	ands.w	r1, r1, #1
   b931a:	d111      	bne.n	b9340 <_Z16_fetch_usbserialv+0x3c>
   b931c:	4620      	mov	r0, r4
   b931e:	9101      	str	r1, [sp, #4]
   b9320:	f7fa febf 	bl	b40a2 <__cxa_guard_acquire>
   b9324:	9901      	ldr	r1, [sp, #4]
   b9326:	b158      	cbz	r0, b9340 <_Z16_fetch_usbserialv+0x3c>
   b9328:	aa03      	add	r2, sp, #12
   b932a:	4808      	ldr	r0, [pc, #32]	; (b934c <_Z16_fetch_usbserialv+0x48>)
   b932c:	f7ff ffca 	bl	b92c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9330:	4620      	mov	r0, r4
   b9332:	f7fa febb 	bl	b40ac <__cxa_guard_release>
   b9336:	4a06      	ldr	r2, [pc, #24]	; (b9350 <_Z16_fetch_usbserialv+0x4c>)
   b9338:	4906      	ldr	r1, [pc, #24]	; (b9354 <_Z16_fetch_usbserialv+0x50>)
   b933a:	4804      	ldr	r0, [pc, #16]	; (b934c <_Z16_fetch_usbserialv+0x48>)
   b933c:	f000 fa5a 	bl	b97f4 <__aeabi_atexit>
	return _usbserial;
}
   b9340:	4802      	ldr	r0, [pc, #8]	; (b934c <_Z16_fetch_usbserialv+0x48>)
   b9342:	b008      	add	sp, #32
   b9344:	bd10      	pop	{r4, pc}
   b9346:	bf00      	nop
   b9348:	2003e7a8 	.word	0x2003e7a8
   b934c:	2003e7ac 	.word	0x2003e7ac
   b9350:	2003da30 	.word	0x2003da30
   b9354:	000b924d 	.word	0x000b924d

000b9358 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv>:
                results[index++] = *result;
            }
        }

    protected:
        static void callback(WiFiAccessPoint* result, void* cookie)
   b9358:	b530      	push	{r4, r5, lr}
            if (index<count) {
   b935a:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   b935e:	4293      	cmp	r3, r2
   b9360:	da10      	bge.n	b9384 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv+0x2c>
                results[index++] = *result;
   b9362:	680d      	ldr	r5, [r1, #0]
   b9364:	1c5a      	adds	r2, r3, #1
   b9366:	604a      	str	r2, [r1, #4]
   b9368:	4604      	mov	r4, r0
   b936a:	2238      	movs	r2, #56	; 0x38
   b936c:	fb02 5503 	mla	r5, r2, r3, r5
   b9370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b937a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b937c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b9380:	e885 0003 	stmia.w	r5, {r0, r1}
        {
            ((APArrayPopulator*)cookie)->addResult(result);
        }
   b9384:	bd30      	pop	{r4, r5, pc}

000b9386 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9386:	2200      	movs	r2, #0
   b9388:	6840      	ldr	r0, [r0, #4]
   b938a:	4611      	mov	r1, r2
   b938c:	f7fd bb04 	b.w	b6998 <network_listening>

000b9390 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9390:	2200      	movs	r2, #0
   b9392:	6840      	ldr	r0, [r0, #4]
   b9394:	4611      	mov	r1, r2
   b9396:	f7fd bb27 	b.w	b69e8 <network_get_listen_timeout>

000b939a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b939a:	6840      	ldr	r0, [r0, #4]
   b939c:	2200      	movs	r2, #0
   b939e:	f7fd bb1b 	b.w	b69d8 <network_set_listen_timeout>

000b93a2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b93a2:	6840      	ldr	r0, [r0, #4]
   b93a4:	2200      	movs	r2, #0
   b93a6:	f081 0101 	eor.w	r1, r1, #1
   b93aa:	f7fd baed 	b.w	b6988 <network_listen>

000b93ae <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b93ae:	2200      	movs	r2, #0
   b93b0:	6840      	ldr	r0, [r0, #4]
   b93b2:	4611      	mov	r1, r2
   b93b4:	f7fd bac0 	b.w	b6938 <network_connecting>

000b93b8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b93b8:	6840      	ldr	r0, [r0, #4]
   b93ba:	2200      	movs	r2, #0
   b93bc:	2102      	movs	r1, #2
   b93be:	f7fd bac3 	b.w	b6948 <network_disconnect>
	...

000b93c4 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>:
        APScan apScan(results, result_count);
        return apScan.start();
    }

#if !HAL_PLATFORM_WIFI_SCAN_ONLY
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
   b93c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
            this->index = 0;
   b93c6:	2300      	movs	r3, #0
            this->results = results;
   b93c8:	9101      	str	r1, [sp, #4]
            return std::min(count, wlan_get_credentials(callback, this));
   b93ca:	4806      	ldr	r0, [pc, #24]	; (b93e4 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj+0x20>)
            this->index = 0;
   b93cc:	9302      	str	r3, [sp, #8]
            return std::min(count, wlan_get_credentials(callback, this));
   b93ce:	a901      	add	r1, sp, #4
            this->count = size;
   b93d0:	9203      	str	r2, [sp, #12]
            return std::min(count, wlan_get_credentials(callback, this));
   b93d2:	f7fd f9f9 	bl	b67c8 <wlan_get_credentials>
        APList apList(results, result_count);
        return apList.start();
    }
   b93d6:	9b03      	ldr	r3, [sp, #12]
   b93d8:	4298      	cmp	r0, r3
   b93da:	bfa8      	it	ge
   b93dc:	4618      	movge	r0, r3
   b93de:	b005      	add	sp, #20
   b93e0:	f85d fb04 	ldr.w	pc, [sp], #4
   b93e4:	000b9359 	.word	0x000b9359

000b93e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b93e8:	4b02      	ldr	r3, [pc, #8]	; (b93f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b93ea:	2204      	movs	r2, #4
   b93ec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b93ee:	4a02      	ldr	r2, [pc, #8]	; (b93f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b93f0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b93f2:	4770      	bx	lr
   b93f4:	2003e7c0 	.word	0x2003e7c0
   b93f8:	000bae64 	.word	0x000bae64

000b93fc <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b93fc:	b510      	push	{r4, lr}
   b93fe:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b9400:	f000 fe28 	bl	ba054 <strlen>
   b9404:	3801      	subs	r0, #1
   b9406:	1823      	adds	r3, r4, r0
   b9408:	4620      	mov	r0, r4
	while(i<j){
   b940a:	4283      	cmp	r3, r0
   b940c:	d906      	bls.n	b941c <_Z11str_reversePc+0x20>
		c = *i;
   b940e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b9410:	7819      	ldrb	r1, [r3, #0]
   b9412:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b9416:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b941a:	e7f6      	b.n	b940a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b941c:	bd10      	pop	{r4, pc}

000b941e <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b941e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b9422:	1e93      	subs	r3, r2, #2
{
   b9424:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b9426:	2b22      	cmp	r3, #34	; 0x22
   b9428:	f04f 0300 	mov.w	r3, #0
{
   b942c:	460d      	mov	r5, r1
   b942e:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b9430:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b9434:	d927      	bls.n	b9486 <ltoa+0x68>

      if (10 == base && N < 0L)
   b9436:	2800      	cmp	r0, #0
   b9438:	da2a      	bge.n	b9490 <ltoa+0x72>
      {
            *head++ = '-';
   b943a:	462e      	mov	r6, r5
   b943c:	232d      	movs	r3, #45	; 0x2d
   b943e:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b9442:	4240      	negs	r0, r0
   b9444:	240a      	movs	r4, #10
      *tail-- = '\0';
   b9446:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b944a:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b944e:	4622      	mov	r2, r4
   b9450:	4601      	mov	r1, r0
   b9452:	a801      	add	r0, sp, #4
   b9454:	f000 fd6a 	bl	b9f2c <ldiv>
   b9458:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b945a:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b945c:	2b09      	cmp	r3, #9
   b945e:	bfcc      	ite	gt
   b9460:	2237      	movgt	r2, #55	; 0x37
   b9462:	2230      	movle	r2, #48	; 0x30
   b9464:	fa52 f383 	uxtab	r3, r2, r3
   b9468:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b946c:	f108 0801 	add.w	r8, r8, #1
   b9470:	2800      	cmp	r0, #0
   b9472:	d1ec      	bne.n	b944e <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b9474:	4642      	mov	r2, r8
   b9476:	1c79      	adds	r1, r7, #1
   b9478:	4630      	mov	r0, r6
   b947a:	f000 fd7b 	bl	b9f74 <memcpy>
      return str;
}
   b947e:	4628      	mov	r0, r5
   b9480:	b00c      	add	sp, #48	; 0x30
   b9482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b9486:	2a0a      	cmp	r2, #10
   b9488:	d0d5      	beq.n	b9436 <ltoa+0x18>
      if (uarg)
   b948a:	b118      	cbz	r0, b9494 <ltoa+0x76>
   b948c:	462e      	mov	r6, r5
   b948e:	e7da      	b.n	b9446 <ltoa+0x28>
   b9490:	240a      	movs	r4, #10
   b9492:	e7fa      	b.n	b948a <ltoa+0x6c>
      else  *tail-- = '0';
   b9494:	2330      	movs	r3, #48	; 0x30
   b9496:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b949a:	462e      	mov	r6, r5
   b949c:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b94a0:	f04f 0802 	mov.w	r8, #2
   b94a4:	e7e6      	b.n	b9474 <ltoa+0x56>

000b94a6 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b94a6:	b570      	push	{r4, r5, r6, lr}
   b94a8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b94aa:	1e91      	subs	r1, r2, #2
   b94ac:	2922      	cmp	r1, #34	; 0x22
   b94ae:	d81d      	bhi.n	b94ec <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b94b0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b94b2:	b930      	cbnz	r0, b94c2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b94b4:	4423      	add	r3, r4
            *ptr++ = '0';
   b94b6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b94b8:	429d      	cmp	r5, r3
   b94ba:	d210      	bcs.n	b94de <ultoa+0x38>
            *ptr++ = '0';
   b94bc:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b94c0:	e7fa      	b.n	b94b8 <ultoa+0x12>
            result.quot = a/radix;
   b94c2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b94c6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b94ca:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b94cc:	2809      	cmp	r0, #9
                *ptr += '0';
   b94ce:	bf94      	ite	ls
   b94d0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b94d2:	3157      	addhi	r1, #87	; 0x57
   b94d4:	b2c9      	uxtb	r1, r1
   b94d6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b94da:	4630      	mov	r0, r6
	while(a){
   b94dc:	e7e9      	b.n	b94b2 <ultoa+0xc>

	*ptr = '\0';
   b94de:	2300      	movs	r3, #0
	str_reverse(buffer);
   b94e0:	4620      	mov	r0, r4
	*ptr = '\0';
   b94e2:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b94e4:	f7ff ff8a 	bl	b93fc <_Z11str_reversePc>
	return buffer;
   b94e8:	4620      	mov	r0, r4
}
   b94ea:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b94ec:	2000      	movs	r0, #0
   b94ee:	e7fc      	b.n	b94ea <ultoa+0x44>

000b94f0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b94f0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b94f2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b94f4:	460c      	mov	r4, r1
   b94f6:	4615      	mov	r5, r2
	if(a<0){
   b94f8:	da0e      	bge.n	b9518 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b94fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b94fe:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b9502:	bf14      	ite	ne
   b9504:	4258      	negne	r0, r3
   b9506:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b9508:	2301      	movs	r3, #1
		*buffer = '-';
   b950a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b950c:	462a      	mov	r2, r5
   b950e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b9510:	f7ff ffc9 	bl	b94a6 <ultoa>
	}
	return buffer;
}
   b9514:	4620      	mov	r0, r4
   b9516:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b9518:	2301      	movs	r3, #1
   b951a:	e7f9      	b.n	b9510 <itoa+0x20>

000b951c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b951c:	4b01      	ldr	r3, [pc, #4]	; (b9524 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b951e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b9520:	4770      	bx	lr
   b9522:	bf00      	nop
   b9524:	2003d9c8 	.word	0x2003d9c8

000b9528 <serialEventRun>:
{
   b9528:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b952a:	4b0b      	ldr	r3, [pc, #44]	; (b9558 <serialEventRun+0x30>)
   b952c:	b143      	cbz	r3, b9540 <serialEventRun+0x18>
   b952e:	f7ff fee9 	bl	b9304 <_Z16_fetch_usbserialv>
   b9532:	6803      	ldr	r3, [r0, #0]
   b9534:	691b      	ldr	r3, [r3, #16]
   b9536:	4798      	blx	r3
   b9538:	2800      	cmp	r0, #0
   b953a:	dd01      	ble.n	b9540 <serialEventRun+0x18>
        serialEvent();
   b953c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b9540:	4b06      	ldr	r3, [pc, #24]	; (b955c <serialEventRun+0x34>)
   b9542:	b143      	cbz	r3, b9556 <serialEventRun+0x2e>
   b9544:	f7ff fe56 	bl	b91f4 <_Z22__fetch_global_Serial1v>
   b9548:	6803      	ldr	r3, [r0, #0]
   b954a:	691b      	ldr	r3, [r3, #16]
   b954c:	4798      	blx	r3
   b954e:	2800      	cmp	r0, #0
   b9550:	dd01      	ble.n	b9556 <serialEventRun+0x2e>
        serialEvent1();
   b9552:	f3af 8000 	nop.w
}
   b9556:	bd08      	pop	{r3, pc}
	...

000b9560 <_post_loop>:
{
   b9560:	b508      	push	{r3, lr}
	serialEventRun();
   b9562:	f7ff ffe1 	bl	b9528 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b9566:	f7fc ff5f 	bl	b6428 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b956a:	4b01      	ldr	r3, [pc, #4]	; (b9570 <_post_loop+0x10>)
   b956c:	6018      	str	r0, [r3, #0]
}
   b956e:	bd08      	pop	{r3, pc}
   b9570:	2003e7d0 	.word	0x2003e7d0

000b9574 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9574:	4805      	ldr	r0, [pc, #20]	; (b958c <_Z33system_initialize_user_backup_ramv+0x18>)
   b9576:	4a06      	ldr	r2, [pc, #24]	; (b9590 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9578:	4906      	ldr	r1, [pc, #24]	; (b9594 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b957a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b957c:	1a12      	subs	r2, r2, r0
   b957e:	f000 fcf9 	bl	b9f74 <memcpy>
    __backup_sram_signature = signature;
   b9582:	4b05      	ldr	r3, [pc, #20]	; (b9598 <_Z33system_initialize_user_backup_ramv+0x24>)
   b9584:	4a05      	ldr	r2, [pc, #20]	; (b959c <_Z33system_initialize_user_backup_ramv+0x28>)
   b9586:	601a      	str	r2, [r3, #0]
}
   b9588:	bd08      	pop	{r3, pc}
   b958a:	bf00      	nop
   b958c:	2003f400 	.word	0x2003f400
   b9590:	2003f404 	.word	0x2003f404
   b9594:	000bb180 	.word	0x000bb180
   b9598:	2003f400 	.word	0x2003f400
   b959c:	9a271c1e 	.word	0x9a271c1e

000b95a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b95a0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b95a2:	2300      	movs	r3, #0
   b95a4:	9300      	str	r3, [sp, #0]
   b95a6:	461a      	mov	r2, r3
   b95a8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b95ac:	f7fd f96e 	bl	b688c <system_ctrl_set_result>
}
   b95b0:	b003      	add	sp, #12
   b95b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b95b8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b95b8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b95ba:	8843      	ldrh	r3, [r0, #2]
   b95bc:	2b0a      	cmp	r3, #10
   b95be:	d008      	beq.n	b95d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b95c0:	2b50      	cmp	r3, #80	; 0x50
   b95c2:	d10b      	bne.n	b95dc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b95c4:	4b09      	ldr	r3, [pc, #36]	; (b95ec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b95c6:	681b      	ldr	r3, [r3, #0]
   b95c8:	b14b      	cbz	r3, b95de <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b95ca:	b003      	add	sp, #12
   b95cc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b95d0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b95d2:	f7ff ffe5 	bl	b95a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b95d6:	b003      	add	sp, #12
   b95d8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b95dc:	2300      	movs	r3, #0
   b95de:	9300      	str	r3, [sp, #0]
   b95e0:	461a      	mov	r2, r3
   b95e2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b95e6:	f7fd f951 	bl	b688c <system_ctrl_set_result>
}
   b95ea:	e7f4      	b.n	b95d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b95ec:	2003e7cc 	.word	0x2003e7cc

000b95f0 <module_user_init_hook>:
{
   b95f0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b95f2:	4812      	ldr	r0, [pc, #72]	; (b963c <module_user_init_hook+0x4c>)
   b95f4:	2100      	movs	r1, #0
   b95f6:	f7fd fa4f 	bl	b6a98 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b95fa:	4b11      	ldr	r3, [pc, #68]	; (b9640 <module_user_init_hook+0x50>)
   b95fc:	681a      	ldr	r2, [r3, #0]
   b95fe:	4b11      	ldr	r3, [pc, #68]	; (b9644 <module_user_init_hook+0x54>)
   b9600:	429a      	cmp	r2, r3
   b9602:	4b11      	ldr	r3, [pc, #68]	; (b9648 <module_user_init_hook+0x58>)
   b9604:	bf0c      	ite	eq
   b9606:	2201      	moveq	r2, #1
   b9608:	2200      	movne	r2, #0
   b960a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b960c:	d001      	beq.n	b9612 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b960e:	f7ff ffb1 	bl	b9574 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b9612:	f7fc fef9 	bl	b6408 <HAL_RNG_GetRandomNumber>
   b9616:	4604      	mov	r4, r0
    srand(seed);
   b9618:	f000 fcdc 	bl	b9fd4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b961c:	4b0b      	ldr	r3, [pc, #44]	; (b964c <module_user_init_hook+0x5c>)
   b961e:	b113      	cbz	r3, b9626 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9620:	4620      	mov	r0, r4
   b9622:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b9626:	2100      	movs	r1, #0
   b9628:	4808      	ldr	r0, [pc, #32]	; (b964c <module_user_init_hook+0x5c>)
   b962a:	f7fd f975 	bl	b6918 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b962e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b9632:	4807      	ldr	r0, [pc, #28]	; (b9650 <module_user_init_hook+0x60>)
   b9634:	2100      	movs	r1, #0
   b9636:	f7fd b91f 	b.w	b6878 <system_ctrl_set_app_request_handler>
   b963a:	bf00      	nop
   b963c:	000b951d 	.word	0x000b951d
   b9640:	2003f400 	.word	0x2003f400
   b9644:	9a271c1e 	.word	0x9a271c1e
   b9648:	2003e7c8 	.word	0x2003e7c8
   b964c:	00000000 	.word	0x00000000
   b9650:	000b95b9 	.word	0x000b95b9

000b9654 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b9654:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b9656:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b9658:	d902      	bls.n	b9660 <pinAvailable+0xc>
    return false;
   b965a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b965c:	b002      	add	sp, #8
   b965e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b9660:	f1a0 030b 	sub.w	r3, r0, #11
   b9664:	2b02      	cmp	r3, #2
   b9666:	d81a      	bhi.n	b969e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b9668:	4c17      	ldr	r4, [pc, #92]	; (b96c8 <pinAvailable+0x74>)
   b966a:	7821      	ldrb	r1, [r4, #0]
   b966c:	f3bf 8f5b 	dmb	ish
   b9670:	f011 0101 	ands.w	r1, r1, #1
   b9674:	d10b      	bne.n	b968e <pinAvailable+0x3a>
   b9676:	4620      	mov	r0, r4
   b9678:	9101      	str	r1, [sp, #4]
   b967a:	f7fa fd12 	bl	b40a2 <__cxa_guard_acquire>
   b967e:	9901      	ldr	r1, [sp, #4]
   b9680:	b128      	cbz	r0, b968e <pinAvailable+0x3a>
   b9682:	4812      	ldr	r0, [pc, #72]	; (b96cc <pinAvailable+0x78>)
   b9684:	f7fe ff1c 	bl	b84c0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b9688:	4620      	mov	r0, r4
   b968a:	f7fa fd0f 	bl	b40ac <__cxa_guard_release>
   b968e:	4b0f      	ldr	r3, [pc, #60]	; (b96cc <pinAvailable+0x78>)
   b9690:	7818      	ldrb	r0, [r3, #0]
   b9692:	f7fd f801 	bl	b6698 <hal_spi_is_enabled>
   b9696:	2800      	cmp	r0, #0
   b9698:	d1df      	bne.n	b965a <pinAvailable+0x6>
  return true; // 'pin' is available
   b969a:	2001      	movs	r0, #1
   b969c:	e7de      	b.n	b965c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b969e:	2801      	cmp	r0, #1
   b96a0:	d809      	bhi.n	b96b6 <pinAvailable+0x62>
   b96a2:	f000 f87f 	bl	b97a4 <_Z19__fetch_global_Wirev>
   b96a6:	2100      	movs	r1, #0
   b96a8:	7c00      	ldrb	r0, [r0, #16]
   b96aa:	f7fc ff4d 	bl	b6548 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b96ae:	f080 0001 	eor.w	r0, r0, #1
   b96b2:	b2c0      	uxtb	r0, r0
   b96b4:	e7d2      	b.n	b965c <pinAvailable+0x8>
   b96b6:	3809      	subs	r0, #9
   b96b8:	2801      	cmp	r0, #1
   b96ba:	d8ee      	bhi.n	b969a <pinAvailable+0x46>
   b96bc:	f7ff fd9a 	bl	b91f4 <_Z22__fetch_global_Serial1v>
   b96c0:	7c00      	ldrb	r0, [r0, #16]
   b96c2:	f7fd f839 	bl	b6738 <hal_usart_is_enabled>
   b96c6:	e7f2      	b.n	b96ae <pinAvailable+0x5a>
   b96c8:	2003e624 	.word	0x2003e624
   b96cc:	2003e628 	.word	0x2003e628

000b96d0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b96d0:	2823      	cmp	r0, #35	; 0x23
{
   b96d2:	b538      	push	{r3, r4, r5, lr}
   b96d4:	4604      	mov	r4, r0
   b96d6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b96d8:	d80a      	bhi.n	b96f0 <pinMode+0x20>
   b96da:	29ff      	cmp	r1, #255	; 0xff
   b96dc:	d008      	beq.n	b96f0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b96de:	f7ff ffb9 	bl	b9654 <pinAvailable>
   b96e2:	b128      	cbz	r0, b96f0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b96e4:	4629      	mov	r1, r5
   b96e6:	4620      	mov	r0, r4
}
   b96e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b96ec:	f7fc becc 	b.w	b6488 <HAL_Pin_Mode>
}
   b96f0:	bd38      	pop	{r3, r4, r5, pc}

000b96f2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b96f2:	b538      	push	{r3, r4, r5, lr}
   b96f4:	4604      	mov	r4, r0
   b96f6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b96f8:	f7fc fece 	bl	b6498 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b96fc:	28ff      	cmp	r0, #255	; 0xff
   b96fe:	d010      	beq.n	b9722 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b9700:	2806      	cmp	r0, #6
   b9702:	d804      	bhi.n	b970e <digitalWrite+0x1c>
   b9704:	234d      	movs	r3, #77	; 0x4d
   b9706:	fa23 f000 	lsr.w	r0, r3, r0
   b970a:	07c3      	lsls	r3, r0, #31
   b970c:	d409      	bmi.n	b9722 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b970e:	4620      	mov	r0, r4
   b9710:	f7ff ffa0 	bl	b9654 <pinAvailable>
   b9714:	b128      	cbz	r0, b9722 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b9716:	4629      	mov	r1, r5
   b9718:	4620      	mov	r0, r4
}
   b971a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b971e:	f7fc bec3 	b.w	b64a8 <HAL_GPIO_Write>
}
   b9722:	bd38      	pop	{r3, r4, r5, pc}

000b9724 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b9724:	b510      	push	{r4, lr}
   b9726:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9728:	f7fc feb6 	bl	b6498 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b972c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b972e:	b2db      	uxtb	r3, r3
   b9730:	2b01      	cmp	r3, #1
   b9732:	d908      	bls.n	b9746 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b9734:	4620      	mov	r0, r4
   b9736:	f7ff ff8d 	bl	b9654 <pinAvailable>
   b973a:	b120      	cbz	r0, b9746 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b973c:	4620      	mov	r0, r4
}
   b973e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b9742:	f7fc beb9 	b.w	b64b8 <HAL_GPIO_Read>
}
   b9746:	2000      	movs	r0, #0
   b9748:	bd10      	pop	{r4, pc}
	...

000b974c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   b974c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   b974e:	4c08      	ldr	r4, [pc, #32]	; (b9770 <_Z21__fetch_global_EEPROMv+0x24>)
   b9750:	7823      	ldrb	r3, [r4, #0]
   b9752:	f3bf 8f5b 	dmb	ish
   b9756:	07db      	lsls	r3, r3, #31
   b9758:	d408      	bmi.n	b976c <_Z21__fetch_global_EEPROMv+0x20>
   b975a:	4620      	mov	r0, r4
   b975c:	f7fa fca1 	bl	b40a2 <__cxa_guard_acquire>
   b9760:	b120      	cbz	r0, b976c <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   b9762:	f7fc fe69 	bl	b6438 <HAL_EEPROM_Init>
   b9766:	4620      	mov	r0, r4
   b9768:	f7fa fca0 	bl	b40ac <__cxa_guard_release>
	return eeprom;
}
   b976c:	4801      	ldr	r0, [pc, #4]	; (b9774 <_Z21__fetch_global_EEPROMv+0x28>)
   b976e:	bd10      	pop	{r4, pc}
   b9770:	2003e7d4 	.word	0x2003e7d4
   b9774:	2003e7d8 	.word	0x2003e7d8

000b9778 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   b9778:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b977a:	2520      	movs	r5, #32
   b977c:	2314      	movs	r3, #20
{
   b977e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9780:	6003      	str	r3, [r0, #0]
   b9782:	6085      	str	r5, [r0, #8]
   b9784:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9786:	4906      	ldr	r1, [pc, #24]	; (b97a0 <_Z17acquireWireBufferv+0x28>)
   b9788:	4628      	mov	r0, r5
   b978a:	f000 f83c 	bl	b9806 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b978e:	4904      	ldr	r1, [pc, #16]	; (b97a0 <_Z17acquireWireBufferv+0x28>)
	};
   b9790:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9792:	4628      	mov	r0, r5
   b9794:	f000 f837 	bl	b9806 <_ZnajRKSt9nothrow_t>
	};
   b9798:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   b979a:	4620      	mov	r0, r4
   b979c:	bd38      	pop	{r3, r4, r5, pc}
   b979e:	bf00      	nop
   b97a0:	000bae98 	.word	0x000bae98

000b97a4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   b97a4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b97a6:	4d0f      	ldr	r5, [pc, #60]	; (b97e4 <_Z19__fetch_global_Wirev+0x40>)
   b97a8:	7829      	ldrb	r1, [r5, #0]
   b97aa:	f3bf 8f5b 	dmb	ish
   b97ae:	f011 0401 	ands.w	r4, r1, #1
{
   b97b2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b97b4:	d113      	bne.n	b97de <_Z19__fetch_global_Wirev+0x3a>
   b97b6:	4628      	mov	r0, r5
   b97b8:	f7fa fc73 	bl	b40a2 <__cxa_guard_acquire>
   b97bc:	b178      	cbz	r0, b97de <_Z19__fetch_global_Wirev+0x3a>
   b97be:	a801      	add	r0, sp, #4
   b97c0:	f7ff ffda 	bl	b9778 <_Z17acquireWireBufferv>
   b97c4:	aa01      	add	r2, sp, #4
   b97c6:	4621      	mov	r1, r4
   b97c8:	4807      	ldr	r0, [pc, #28]	; (b97e8 <_Z19__fetch_global_Wirev+0x44>)
   b97ca:	f7fe fc2b 	bl	b8024 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b97ce:	4628      	mov	r0, r5
   b97d0:	f7fa fc6c 	bl	b40ac <__cxa_guard_release>
   b97d4:	4a05      	ldr	r2, [pc, #20]	; (b97ec <_Z19__fetch_global_Wirev+0x48>)
   b97d6:	4906      	ldr	r1, [pc, #24]	; (b97f0 <_Z19__fetch_global_Wirev+0x4c>)
   b97d8:	4803      	ldr	r0, [pc, #12]	; (b97e8 <_Z19__fetch_global_Wirev+0x44>)
   b97da:	f000 f80b 	bl	b97f4 <__aeabi_atexit>
	return wire;
}
   b97de:	4802      	ldr	r0, [pc, #8]	; (b97e8 <_Z19__fetch_global_Wirev+0x44>)
   b97e0:	b007      	add	sp, #28
   b97e2:	bd30      	pop	{r4, r5, pc}
   b97e4:	2003e7dc 	.word	0x2003e7dc
   b97e8:	2003e7e0 	.word	0x2003e7e0
   b97ec:	2003da30 	.word	0x2003da30
   b97f0:	000b7fcd 	.word	0x000b7fcd

000b97f4 <__aeabi_atexit>:
   b97f4:	460b      	mov	r3, r1
   b97f6:	4601      	mov	r1, r0
   b97f8:	4618      	mov	r0, r3
   b97fa:	f000 bb89 	b.w	b9f10 <__cxa_atexit>

000b97fe <_ZdlPvj>:
   b97fe:	f7fa bc4e 	b.w	b409e <_ZdlPv>

000b9802 <_ZnwjRKSt9nothrow_t>:
   b9802:	f7fa bc48 	b.w	b4096 <_Znwj>

000b9806 <_ZnajRKSt9nothrow_t>:
   b9806:	f7fa bc48 	b.w	b409a <_Znaj>

000b980a <_ZSt25__throw_bad_function_callv>:
   b980a:	b508      	push	{r3, lr}
   b980c:	f7fd f92c 	bl	b6a68 <abort>

000b9810 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b9810:	4901      	ldr	r1, [pc, #4]	; (b9818 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b9812:	f000 b8f9 	b.w	b9a08 <_ZNKSt9type_infoeqERKS_>
   b9816:	bf00      	nop
   b9818:	000baeb4 	.word	0x000baeb4

000b981c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b981c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b981e:	2400      	movs	r4, #0
   b9820:	2310      	movs	r3, #16
   b9822:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b9826:	6803      	ldr	r3, [r0, #0]
   b9828:	4615      	mov	r5, r2
   b982a:	699e      	ldr	r6, [r3, #24]
   b982c:	6812      	ldr	r2, [r2, #0]
   b982e:	466b      	mov	r3, sp
   b9830:	e9cd 4400 	strd	r4, r4, [sp]
   b9834:	47b0      	blx	r6
   b9836:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b983a:	f003 0306 	and.w	r3, r3, #6
   b983e:	2b06      	cmp	r3, #6
   b9840:	bf03      	ittte	eq
   b9842:	9b00      	ldreq	r3, [sp, #0]
   b9844:	602b      	streq	r3, [r5, #0]
   b9846:	2001      	moveq	r0, #1
   b9848:	4620      	movne	r0, r4
   b984a:	b004      	add	sp, #16
   b984c:	bd70      	pop	{r4, r5, r6, pc}

000b984e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b984e:	9800      	ldr	r0, [sp, #0]
   b9850:	4290      	cmp	r0, r2
   b9852:	bf14      	ite	ne
   b9854:	2001      	movne	r0, #1
   b9856:	2006      	moveq	r0, #6
   b9858:	4770      	bx	lr
	...

000b985c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b985c:	b510      	push	{r4, lr}
   b985e:	4b03      	ldr	r3, [pc, #12]	; (b986c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9860:	6003      	str	r3, [r0, #0]
   b9862:	4604      	mov	r4, r0
   b9864:	f000 f8cd 	bl	b9a02 <_ZNSt9type_infoD1Ev>
   b9868:	4620      	mov	r0, r4
   b986a:	bd10      	pop	{r4, pc}
   b986c:	000baef4 	.word	0x000baef4

000b9870 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9870:	b510      	push	{r4, lr}
   b9872:	4604      	mov	r4, r0
   b9874:	f7ff fff2 	bl	b985c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9878:	4620      	mov	r0, r4
   b987a:	2108      	movs	r1, #8
   b987c:	f7ff ffbf 	bl	b97fe <_ZdlPvj>
   b9880:	4620      	mov	r0, r4
   b9882:	bd10      	pop	{r4, pc}

000b9884 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9888:	461f      	mov	r7, r3
   b988a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b988e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9892:	4598      	cmp	r8, r3
   b9894:	4606      	mov	r6, r0
   b9896:	4615      	mov	r5, r2
   b9898:	d107      	bne.n	b98aa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b989a:	9907      	ldr	r1, [sp, #28]
   b989c:	f000 f8b4 	bl	b9a08 <_ZNKSt9type_infoeqERKS_>
   b98a0:	b118      	cbz	r0, b98aa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b98a2:	7165      	strb	r5, [r4, #5]
   b98a4:	2000      	movs	r0, #0
   b98a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b98aa:	4639      	mov	r1, r7
   b98ac:	4630      	mov	r0, r6
   b98ae:	f000 f8ab 	bl	b9a08 <_ZNKSt9type_infoeqERKS_>
   b98b2:	2800      	cmp	r0, #0
   b98b4:	d0f6      	beq.n	b98a4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b98b6:	2301      	movs	r3, #1
   b98b8:	f8c4 8000 	str.w	r8, [r4]
   b98bc:	7125      	strb	r5, [r4, #4]
   b98be:	71a3      	strb	r3, [r4, #6]
   b98c0:	e7f0      	b.n	b98a4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b98c2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b98c2:	b538      	push	{r3, r4, r5, lr}
   b98c4:	4615      	mov	r5, r2
   b98c6:	461c      	mov	r4, r3
   b98c8:	f000 f89e 	bl	b9a08 <_ZNKSt9type_infoeqERKS_>
   b98cc:	b120      	cbz	r0, b98d8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b98ce:	2308      	movs	r3, #8
   b98d0:	60e3      	str	r3, [r4, #12]
   b98d2:	2306      	movs	r3, #6
   b98d4:	6025      	str	r5, [r4, #0]
   b98d6:	7123      	strb	r3, [r4, #4]
   b98d8:	bd38      	pop	{r3, r4, r5, pc}

000b98da <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b98da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b98dc:	4605      	mov	r5, r0
   b98de:	460c      	mov	r4, r1
   b98e0:	9201      	str	r2, [sp, #4]
   b98e2:	461e      	mov	r6, r3
   b98e4:	f000 f890 	bl	b9a08 <_ZNKSt9type_infoeqERKS_>
   b98e8:	b950      	cbnz	r0, b9900 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b98ea:	2e03      	cmp	r6, #3
   b98ec:	d808      	bhi.n	b9900 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b98ee:	6823      	ldr	r3, [r4, #0]
   b98f0:	9a01      	ldr	r2, [sp, #4]
   b98f2:	695b      	ldr	r3, [r3, #20]
   b98f4:	4629      	mov	r1, r5
   b98f6:	4620      	mov	r0, r4
   b98f8:	b002      	add	sp, #8
   b98fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b98fe:	4718      	bx	r3
   b9900:	b002      	add	sp, #8
   b9902:	bd70      	pop	{r4, r5, r6, pc}

000b9904 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9904:	b510      	push	{r4, lr}
   b9906:	4b03      	ldr	r3, [pc, #12]	; (b9914 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b9908:	6003      	str	r3, [r0, #0]
   b990a:	4604      	mov	r4, r0
   b990c:	f7ff ffa6 	bl	b985c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9910:	4620      	mov	r0, r4
   b9912:	bd10      	pop	{r4, pc}
   b9914:	000baf54 	.word	0x000baf54

000b9918 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9918:	b510      	push	{r4, lr}
   b991a:	4604      	mov	r4, r0
   b991c:	f7ff fff2 	bl	b9904 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9920:	4620      	mov	r0, r4
   b9922:	210c      	movs	r1, #12
   b9924:	f7ff ff6b 	bl	b97fe <_ZdlPvj>
   b9928:	4620      	mov	r0, r4
   b992a:	bd10      	pop	{r4, pc}

000b992c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b992c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b992e:	9f08      	ldr	r7, [sp, #32]
   b9930:	4297      	cmp	r7, r2
   b9932:	4605      	mov	r5, r0
   b9934:	460e      	mov	r6, r1
   b9936:	4614      	mov	r4, r2
   b9938:	d00a      	beq.n	b9950 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b993a:	68a8      	ldr	r0, [r5, #8]
   b993c:	6802      	ldr	r2, [r0, #0]
   b993e:	9708      	str	r7, [sp, #32]
   b9940:	6a15      	ldr	r5, [r2, #32]
   b9942:	4631      	mov	r1, r6
   b9944:	4622      	mov	r2, r4
   b9946:	46ac      	mov	ip, r5
   b9948:	b003      	add	sp, #12
   b994a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b994e:	4760      	bx	ip
   b9950:	4619      	mov	r1, r3
   b9952:	9301      	str	r3, [sp, #4]
   b9954:	f000 f858 	bl	b9a08 <_ZNKSt9type_infoeqERKS_>
   b9958:	9b01      	ldr	r3, [sp, #4]
   b995a:	2800      	cmp	r0, #0
   b995c:	d0ed      	beq.n	b993a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b995e:	2006      	movs	r0, #6
   b9960:	b003      	add	sp, #12
   b9962:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9964 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b9964:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9968:	460d      	mov	r5, r1
   b996a:	4619      	mov	r1, r3
   b996c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9970:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b9974:	4681      	mov	r9, r0
   b9976:	4617      	mov	r7, r2
   b9978:	4698      	mov	r8, r3
   b997a:	f000 f845 	bl	b9a08 <_ZNKSt9type_infoeqERKS_>
   b997e:	b190      	cbz	r0, b99a6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9980:	2d00      	cmp	r5, #0
   b9982:	6034      	str	r4, [r6, #0]
   b9984:	7137      	strb	r7, [r6, #4]
   b9986:	db09      	blt.n	b999c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9988:	1961      	adds	r1, r4, r5
   b998a:	458a      	cmp	sl, r1
   b998c:	bf0c      	ite	eq
   b998e:	2106      	moveq	r1, #6
   b9990:	2101      	movne	r1, #1
   b9992:	71b1      	strb	r1, [r6, #6]
   b9994:	2000      	movs	r0, #0
   b9996:	b001      	add	sp, #4
   b9998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b999c:	3502      	adds	r5, #2
   b999e:	d1f9      	bne.n	b9994 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b99a0:	2301      	movs	r3, #1
   b99a2:	71b3      	strb	r3, [r6, #6]
   b99a4:	e7f6      	b.n	b9994 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b99a6:	4554      	cmp	r4, sl
   b99a8:	d106      	bne.n	b99b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b99aa:	4659      	mov	r1, fp
   b99ac:	4648      	mov	r0, r9
   b99ae:	f000 f82b 	bl	b9a08 <_ZNKSt9type_infoeqERKS_>
   b99b2:	b108      	cbz	r0, b99b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b99b4:	7177      	strb	r7, [r6, #5]
   b99b6:	e7ed      	b.n	b9994 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b99b8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b99bc:	6803      	ldr	r3, [r0, #0]
   b99be:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b99c2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b99c6:	69dc      	ldr	r4, [r3, #28]
   b99c8:	463a      	mov	r2, r7
   b99ca:	4643      	mov	r3, r8
   b99cc:	4629      	mov	r1, r5
   b99ce:	46a4      	mov	ip, r4
   b99d0:	b001      	add	sp, #4
   b99d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b99d6:	4760      	bx	ip

000b99d8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b99d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b99dc:	4607      	mov	r7, r0
   b99de:	460c      	mov	r4, r1
   b99e0:	4615      	mov	r5, r2
   b99e2:	461e      	mov	r6, r3
   b99e4:	f7ff ff6d 	bl	b98c2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b99e8:	b948      	cbnz	r0, b99fe <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b99ea:	68b8      	ldr	r0, [r7, #8]
   b99ec:	6803      	ldr	r3, [r0, #0]
   b99ee:	699f      	ldr	r7, [r3, #24]
   b99f0:	462a      	mov	r2, r5
   b99f2:	4633      	mov	r3, r6
   b99f4:	4621      	mov	r1, r4
   b99f6:	46bc      	mov	ip, r7
   b99f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b99fc:	4760      	bx	ip
   b99fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9a02 <_ZNSt9type_infoD1Ev>:
   b9a02:	4770      	bx	lr

000b9a04 <_ZNKSt9type_info14__is_pointer_pEv>:
   b9a04:	2000      	movs	r0, #0
   b9a06:	4770      	bx	lr

000b9a08 <_ZNKSt9type_infoeqERKS_>:
   b9a08:	4281      	cmp	r1, r0
   b9a0a:	b508      	push	{r3, lr}
   b9a0c:	d00e      	beq.n	b9a2c <_ZNKSt9type_infoeqERKS_+0x24>
   b9a0e:	6840      	ldr	r0, [r0, #4]
   b9a10:	7803      	ldrb	r3, [r0, #0]
   b9a12:	2b2a      	cmp	r3, #42	; 0x2a
   b9a14:	d00c      	beq.n	b9a30 <_ZNKSt9type_infoeqERKS_+0x28>
   b9a16:	6849      	ldr	r1, [r1, #4]
   b9a18:	780b      	ldrb	r3, [r1, #0]
   b9a1a:	2b2a      	cmp	r3, #42	; 0x2a
   b9a1c:	bf08      	it	eq
   b9a1e:	3101      	addeq	r1, #1
   b9a20:	f000 fb06 	bl	ba030 <strcmp>
   b9a24:	fab0 f080 	clz	r0, r0
   b9a28:	0940      	lsrs	r0, r0, #5
   b9a2a:	bd08      	pop	{r3, pc}
   b9a2c:	2001      	movs	r0, #1
   b9a2e:	e7fc      	b.n	b9a2a <_ZNKSt9type_infoeqERKS_+0x22>
   b9a30:	2000      	movs	r0, #0
   b9a32:	e7fa      	b.n	b9a2a <_ZNKSt9type_infoeqERKS_+0x22>

000b9a34 <__aeabi_drsub>:
   b9a34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b9a38:	e002      	b.n	b9a40 <__adddf3>
   b9a3a:	bf00      	nop

000b9a3c <__aeabi_dsub>:
   b9a3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b9a40 <__adddf3>:
   b9a40:	b530      	push	{r4, r5, lr}
   b9a42:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b9a46:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b9a4a:	ea94 0f05 	teq	r4, r5
   b9a4e:	bf08      	it	eq
   b9a50:	ea90 0f02 	teqeq	r0, r2
   b9a54:	bf1f      	itttt	ne
   b9a56:	ea54 0c00 	orrsne.w	ip, r4, r0
   b9a5a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b9a5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b9a62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9a66:	f000 80e2 	beq.w	b9c2e <__adddf3+0x1ee>
   b9a6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b9a6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b9a72:	bfb8      	it	lt
   b9a74:	426d      	neglt	r5, r5
   b9a76:	dd0c      	ble.n	b9a92 <__adddf3+0x52>
   b9a78:	442c      	add	r4, r5
   b9a7a:	ea80 0202 	eor.w	r2, r0, r2
   b9a7e:	ea81 0303 	eor.w	r3, r1, r3
   b9a82:	ea82 0000 	eor.w	r0, r2, r0
   b9a86:	ea83 0101 	eor.w	r1, r3, r1
   b9a8a:	ea80 0202 	eor.w	r2, r0, r2
   b9a8e:	ea81 0303 	eor.w	r3, r1, r3
   b9a92:	2d36      	cmp	r5, #54	; 0x36
   b9a94:	bf88      	it	hi
   b9a96:	bd30      	pophi	{r4, r5, pc}
   b9a98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9a9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9aa0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b9aa4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b9aa8:	d002      	beq.n	b9ab0 <__adddf3+0x70>
   b9aaa:	4240      	negs	r0, r0
   b9aac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9ab0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b9ab4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9ab8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b9abc:	d002      	beq.n	b9ac4 <__adddf3+0x84>
   b9abe:	4252      	negs	r2, r2
   b9ac0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9ac4:	ea94 0f05 	teq	r4, r5
   b9ac8:	f000 80a7 	beq.w	b9c1a <__adddf3+0x1da>
   b9acc:	f1a4 0401 	sub.w	r4, r4, #1
   b9ad0:	f1d5 0e20 	rsbs	lr, r5, #32
   b9ad4:	db0d      	blt.n	b9af2 <__adddf3+0xb2>
   b9ad6:	fa02 fc0e 	lsl.w	ip, r2, lr
   b9ada:	fa22 f205 	lsr.w	r2, r2, r5
   b9ade:	1880      	adds	r0, r0, r2
   b9ae0:	f141 0100 	adc.w	r1, r1, #0
   b9ae4:	fa03 f20e 	lsl.w	r2, r3, lr
   b9ae8:	1880      	adds	r0, r0, r2
   b9aea:	fa43 f305 	asr.w	r3, r3, r5
   b9aee:	4159      	adcs	r1, r3
   b9af0:	e00e      	b.n	b9b10 <__adddf3+0xd0>
   b9af2:	f1a5 0520 	sub.w	r5, r5, #32
   b9af6:	f10e 0e20 	add.w	lr, lr, #32
   b9afa:	2a01      	cmp	r2, #1
   b9afc:	fa03 fc0e 	lsl.w	ip, r3, lr
   b9b00:	bf28      	it	cs
   b9b02:	f04c 0c02 	orrcs.w	ip, ip, #2
   b9b06:	fa43 f305 	asr.w	r3, r3, r5
   b9b0a:	18c0      	adds	r0, r0, r3
   b9b0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b9b10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9b14:	d507      	bpl.n	b9b26 <__adddf3+0xe6>
   b9b16:	f04f 0e00 	mov.w	lr, #0
   b9b1a:	f1dc 0c00 	rsbs	ip, ip, #0
   b9b1e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b9b22:	eb6e 0101 	sbc.w	r1, lr, r1
   b9b26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b9b2a:	d31b      	bcc.n	b9b64 <__adddf3+0x124>
   b9b2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b9b30:	d30c      	bcc.n	b9b4c <__adddf3+0x10c>
   b9b32:	0849      	lsrs	r1, r1, #1
   b9b34:	ea5f 0030 	movs.w	r0, r0, rrx
   b9b38:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b9b3c:	f104 0401 	add.w	r4, r4, #1
   b9b40:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b9b44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b9b48:	f080 809a 	bcs.w	b9c80 <__adddf3+0x240>
   b9b4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b9b50:	bf08      	it	eq
   b9b52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9b56:	f150 0000 	adcs.w	r0, r0, #0
   b9b5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9b5e:	ea41 0105 	orr.w	r1, r1, r5
   b9b62:	bd30      	pop	{r4, r5, pc}
   b9b64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b9b68:	4140      	adcs	r0, r0
   b9b6a:	eb41 0101 	adc.w	r1, r1, r1
   b9b6e:	3c01      	subs	r4, #1
   b9b70:	bf28      	it	cs
   b9b72:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b9b76:	d2e9      	bcs.n	b9b4c <__adddf3+0x10c>
   b9b78:	f091 0f00 	teq	r1, #0
   b9b7c:	bf04      	itt	eq
   b9b7e:	4601      	moveq	r1, r0
   b9b80:	2000      	moveq	r0, #0
   b9b82:	fab1 f381 	clz	r3, r1
   b9b86:	bf08      	it	eq
   b9b88:	3320      	addeq	r3, #32
   b9b8a:	f1a3 030b 	sub.w	r3, r3, #11
   b9b8e:	f1b3 0220 	subs.w	r2, r3, #32
   b9b92:	da0c      	bge.n	b9bae <__adddf3+0x16e>
   b9b94:	320c      	adds	r2, #12
   b9b96:	dd08      	ble.n	b9baa <__adddf3+0x16a>
   b9b98:	f102 0c14 	add.w	ip, r2, #20
   b9b9c:	f1c2 020c 	rsb	r2, r2, #12
   b9ba0:	fa01 f00c 	lsl.w	r0, r1, ip
   b9ba4:	fa21 f102 	lsr.w	r1, r1, r2
   b9ba8:	e00c      	b.n	b9bc4 <__adddf3+0x184>
   b9baa:	f102 0214 	add.w	r2, r2, #20
   b9bae:	bfd8      	it	le
   b9bb0:	f1c2 0c20 	rsble	ip, r2, #32
   b9bb4:	fa01 f102 	lsl.w	r1, r1, r2
   b9bb8:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9bbc:	bfdc      	itt	le
   b9bbe:	ea41 010c 	orrle.w	r1, r1, ip
   b9bc2:	4090      	lslle	r0, r2
   b9bc4:	1ae4      	subs	r4, r4, r3
   b9bc6:	bfa2      	ittt	ge
   b9bc8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9bcc:	4329      	orrge	r1, r5
   b9bce:	bd30      	popge	{r4, r5, pc}
   b9bd0:	ea6f 0404 	mvn.w	r4, r4
   b9bd4:	3c1f      	subs	r4, #31
   b9bd6:	da1c      	bge.n	b9c12 <__adddf3+0x1d2>
   b9bd8:	340c      	adds	r4, #12
   b9bda:	dc0e      	bgt.n	b9bfa <__adddf3+0x1ba>
   b9bdc:	f104 0414 	add.w	r4, r4, #20
   b9be0:	f1c4 0220 	rsb	r2, r4, #32
   b9be4:	fa20 f004 	lsr.w	r0, r0, r4
   b9be8:	fa01 f302 	lsl.w	r3, r1, r2
   b9bec:	ea40 0003 	orr.w	r0, r0, r3
   b9bf0:	fa21 f304 	lsr.w	r3, r1, r4
   b9bf4:	ea45 0103 	orr.w	r1, r5, r3
   b9bf8:	bd30      	pop	{r4, r5, pc}
   b9bfa:	f1c4 040c 	rsb	r4, r4, #12
   b9bfe:	f1c4 0220 	rsb	r2, r4, #32
   b9c02:	fa20 f002 	lsr.w	r0, r0, r2
   b9c06:	fa01 f304 	lsl.w	r3, r1, r4
   b9c0a:	ea40 0003 	orr.w	r0, r0, r3
   b9c0e:	4629      	mov	r1, r5
   b9c10:	bd30      	pop	{r4, r5, pc}
   b9c12:	fa21 f004 	lsr.w	r0, r1, r4
   b9c16:	4629      	mov	r1, r5
   b9c18:	bd30      	pop	{r4, r5, pc}
   b9c1a:	f094 0f00 	teq	r4, #0
   b9c1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b9c22:	bf06      	itte	eq
   b9c24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b9c28:	3401      	addeq	r4, #1
   b9c2a:	3d01      	subne	r5, #1
   b9c2c:	e74e      	b.n	b9acc <__adddf3+0x8c>
   b9c2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9c32:	bf18      	it	ne
   b9c34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9c38:	d029      	beq.n	b9c8e <__adddf3+0x24e>
   b9c3a:	ea94 0f05 	teq	r4, r5
   b9c3e:	bf08      	it	eq
   b9c40:	ea90 0f02 	teqeq	r0, r2
   b9c44:	d005      	beq.n	b9c52 <__adddf3+0x212>
   b9c46:	ea54 0c00 	orrs.w	ip, r4, r0
   b9c4a:	bf04      	itt	eq
   b9c4c:	4619      	moveq	r1, r3
   b9c4e:	4610      	moveq	r0, r2
   b9c50:	bd30      	pop	{r4, r5, pc}
   b9c52:	ea91 0f03 	teq	r1, r3
   b9c56:	bf1e      	ittt	ne
   b9c58:	2100      	movne	r1, #0
   b9c5a:	2000      	movne	r0, #0
   b9c5c:	bd30      	popne	{r4, r5, pc}
   b9c5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b9c62:	d105      	bne.n	b9c70 <__adddf3+0x230>
   b9c64:	0040      	lsls	r0, r0, #1
   b9c66:	4149      	adcs	r1, r1
   b9c68:	bf28      	it	cs
   b9c6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b9c6e:	bd30      	pop	{r4, r5, pc}
   b9c70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9c74:	bf3c      	itt	cc
   b9c76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9c7a:	bd30      	popcc	{r4, r5, pc}
   b9c7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9c80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9c84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9c88:	f04f 0000 	mov.w	r0, #0
   b9c8c:	bd30      	pop	{r4, r5, pc}
   b9c8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9c92:	bf1a      	itte	ne
   b9c94:	4619      	movne	r1, r3
   b9c96:	4610      	movne	r0, r2
   b9c98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9c9c:	bf1c      	itt	ne
   b9c9e:	460b      	movne	r3, r1
   b9ca0:	4602      	movne	r2, r0
   b9ca2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9ca6:	bf06      	itte	eq
   b9ca8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9cac:	ea91 0f03 	teqeq	r1, r3
   b9cb0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9cb4:	bd30      	pop	{r4, r5, pc}
   b9cb6:	bf00      	nop

000b9cb8 <__aeabi_ui2d>:
   b9cb8:	f090 0f00 	teq	r0, #0
   b9cbc:	bf04      	itt	eq
   b9cbe:	2100      	moveq	r1, #0
   b9cc0:	4770      	bxeq	lr
   b9cc2:	b530      	push	{r4, r5, lr}
   b9cc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9cc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9ccc:	f04f 0500 	mov.w	r5, #0
   b9cd0:	f04f 0100 	mov.w	r1, #0
   b9cd4:	e750      	b.n	b9b78 <__adddf3+0x138>
   b9cd6:	bf00      	nop

000b9cd8 <__aeabi_i2d>:
   b9cd8:	f090 0f00 	teq	r0, #0
   b9cdc:	bf04      	itt	eq
   b9cde:	2100      	moveq	r1, #0
   b9ce0:	4770      	bxeq	lr
   b9ce2:	b530      	push	{r4, r5, lr}
   b9ce4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9ce8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9cec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b9cf0:	bf48      	it	mi
   b9cf2:	4240      	negmi	r0, r0
   b9cf4:	f04f 0100 	mov.w	r1, #0
   b9cf8:	e73e      	b.n	b9b78 <__adddf3+0x138>
   b9cfa:	bf00      	nop

000b9cfc <__aeabi_f2d>:
   b9cfc:	0042      	lsls	r2, r0, #1
   b9cfe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b9d02:	ea4f 0131 	mov.w	r1, r1, rrx
   b9d06:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b9d0a:	bf1f      	itttt	ne
   b9d0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b9d10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9d14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9d18:	4770      	bxne	lr
   b9d1a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b9d1e:	bf08      	it	eq
   b9d20:	4770      	bxeq	lr
   b9d22:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b9d26:	bf04      	itt	eq
   b9d28:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9d2c:	4770      	bxeq	lr
   b9d2e:	b530      	push	{r4, r5, lr}
   b9d30:	f44f 7460 	mov.w	r4, #896	; 0x380
   b9d34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9d38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9d3c:	e71c      	b.n	b9b78 <__adddf3+0x138>
   b9d3e:	bf00      	nop

000b9d40 <__aeabi_ul2d>:
   b9d40:	ea50 0201 	orrs.w	r2, r0, r1
   b9d44:	bf08      	it	eq
   b9d46:	4770      	bxeq	lr
   b9d48:	b530      	push	{r4, r5, lr}
   b9d4a:	f04f 0500 	mov.w	r5, #0
   b9d4e:	e00a      	b.n	b9d66 <__aeabi_l2d+0x16>

000b9d50 <__aeabi_l2d>:
   b9d50:	ea50 0201 	orrs.w	r2, r0, r1
   b9d54:	bf08      	it	eq
   b9d56:	4770      	bxeq	lr
   b9d58:	b530      	push	{r4, r5, lr}
   b9d5a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b9d5e:	d502      	bpl.n	b9d66 <__aeabi_l2d+0x16>
   b9d60:	4240      	negs	r0, r0
   b9d62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9d66:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9d6a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9d6e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b9d72:	f43f aed8 	beq.w	b9b26 <__adddf3+0xe6>
   b9d76:	f04f 0203 	mov.w	r2, #3
   b9d7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9d7e:	bf18      	it	ne
   b9d80:	3203      	addne	r2, #3
   b9d82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9d86:	bf18      	it	ne
   b9d88:	3203      	addne	r2, #3
   b9d8a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b9d8e:	f1c2 0320 	rsb	r3, r2, #32
   b9d92:	fa00 fc03 	lsl.w	ip, r0, r3
   b9d96:	fa20 f002 	lsr.w	r0, r0, r2
   b9d9a:	fa01 fe03 	lsl.w	lr, r1, r3
   b9d9e:	ea40 000e 	orr.w	r0, r0, lr
   b9da2:	fa21 f102 	lsr.w	r1, r1, r2
   b9da6:	4414      	add	r4, r2
   b9da8:	e6bd      	b.n	b9b26 <__adddf3+0xe6>
   b9daa:	bf00      	nop

000b9dac <__gedf2>:
   b9dac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9db0:	e006      	b.n	b9dc0 <__cmpdf2+0x4>
   b9db2:	bf00      	nop

000b9db4 <__ledf2>:
   b9db4:	f04f 0c01 	mov.w	ip, #1
   b9db8:	e002      	b.n	b9dc0 <__cmpdf2+0x4>
   b9dba:	bf00      	nop

000b9dbc <__cmpdf2>:
   b9dbc:	f04f 0c01 	mov.w	ip, #1
   b9dc0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b9dc4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9dc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9dcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9dd0:	bf18      	it	ne
   b9dd2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b9dd6:	d01b      	beq.n	b9e10 <__cmpdf2+0x54>
   b9dd8:	b001      	add	sp, #4
   b9dda:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b9dde:	bf0c      	ite	eq
   b9de0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b9de4:	ea91 0f03 	teqne	r1, r3
   b9de8:	bf02      	ittt	eq
   b9dea:	ea90 0f02 	teqeq	r0, r2
   b9dee:	2000      	moveq	r0, #0
   b9df0:	4770      	bxeq	lr
   b9df2:	f110 0f00 	cmn.w	r0, #0
   b9df6:	ea91 0f03 	teq	r1, r3
   b9dfa:	bf58      	it	pl
   b9dfc:	4299      	cmppl	r1, r3
   b9dfe:	bf08      	it	eq
   b9e00:	4290      	cmpeq	r0, r2
   b9e02:	bf2c      	ite	cs
   b9e04:	17d8      	asrcs	r0, r3, #31
   b9e06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b9e0a:	f040 0001 	orr.w	r0, r0, #1
   b9e0e:	4770      	bx	lr
   b9e10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9e14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9e18:	d102      	bne.n	b9e20 <__cmpdf2+0x64>
   b9e1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b9e1e:	d107      	bne.n	b9e30 <__cmpdf2+0x74>
   b9e20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9e24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9e28:	d1d6      	bne.n	b9dd8 <__cmpdf2+0x1c>
   b9e2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b9e2e:	d0d3      	beq.n	b9dd8 <__cmpdf2+0x1c>
   b9e30:	f85d 0b04 	ldr.w	r0, [sp], #4
   b9e34:	4770      	bx	lr
   b9e36:	bf00      	nop

000b9e38 <__aeabi_cdrcmple>:
   b9e38:	4684      	mov	ip, r0
   b9e3a:	4610      	mov	r0, r2
   b9e3c:	4662      	mov	r2, ip
   b9e3e:	468c      	mov	ip, r1
   b9e40:	4619      	mov	r1, r3
   b9e42:	4663      	mov	r3, ip
   b9e44:	e000      	b.n	b9e48 <__aeabi_cdcmpeq>
   b9e46:	bf00      	nop

000b9e48 <__aeabi_cdcmpeq>:
   b9e48:	b501      	push	{r0, lr}
   b9e4a:	f7ff ffb7 	bl	b9dbc <__cmpdf2>
   b9e4e:	2800      	cmp	r0, #0
   b9e50:	bf48      	it	mi
   b9e52:	f110 0f00 	cmnmi.w	r0, #0
   b9e56:	bd01      	pop	{r0, pc}

000b9e58 <__aeabi_dcmpeq>:
   b9e58:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9e5c:	f7ff fff4 	bl	b9e48 <__aeabi_cdcmpeq>
   b9e60:	bf0c      	ite	eq
   b9e62:	2001      	moveq	r0, #1
   b9e64:	2000      	movne	r0, #0
   b9e66:	f85d fb08 	ldr.w	pc, [sp], #8
   b9e6a:	bf00      	nop

000b9e6c <__aeabi_dcmplt>:
   b9e6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9e70:	f7ff ffea 	bl	b9e48 <__aeabi_cdcmpeq>
   b9e74:	bf34      	ite	cc
   b9e76:	2001      	movcc	r0, #1
   b9e78:	2000      	movcs	r0, #0
   b9e7a:	f85d fb08 	ldr.w	pc, [sp], #8
   b9e7e:	bf00      	nop

000b9e80 <__aeabi_dcmple>:
   b9e80:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9e84:	f7ff ffe0 	bl	b9e48 <__aeabi_cdcmpeq>
   b9e88:	bf94      	ite	ls
   b9e8a:	2001      	movls	r0, #1
   b9e8c:	2000      	movhi	r0, #0
   b9e8e:	f85d fb08 	ldr.w	pc, [sp], #8
   b9e92:	bf00      	nop

000b9e94 <__aeabi_dcmpge>:
   b9e94:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9e98:	f7ff ffce 	bl	b9e38 <__aeabi_cdrcmple>
   b9e9c:	bf94      	ite	ls
   b9e9e:	2001      	movls	r0, #1
   b9ea0:	2000      	movhi	r0, #0
   b9ea2:	f85d fb08 	ldr.w	pc, [sp], #8
   b9ea6:	bf00      	nop

000b9ea8 <__aeabi_dcmpgt>:
   b9ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9eac:	f7ff ffc4 	bl	b9e38 <__aeabi_cdrcmple>
   b9eb0:	bf34      	ite	cc
   b9eb2:	2001      	movcc	r0, #1
   b9eb4:	2000      	movcs	r0, #0
   b9eb6:	f85d fb08 	ldr.w	pc, [sp], #8
   b9eba:	bf00      	nop

000b9ebc <asctime_r>:
   b9ebc:	b510      	push	{r4, lr}
   b9ebe:	460c      	mov	r4, r1
   b9ec0:	6941      	ldr	r1, [r0, #20]
   b9ec2:	6903      	ldr	r3, [r0, #16]
   b9ec4:	6982      	ldr	r2, [r0, #24]
   b9ec6:	b086      	sub	sp, #24
   b9ec8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b9ecc:	9104      	str	r1, [sp, #16]
   b9ece:	6801      	ldr	r1, [r0, #0]
   b9ed0:	9103      	str	r1, [sp, #12]
   b9ed2:	6841      	ldr	r1, [r0, #4]
   b9ed4:	9102      	str	r1, [sp, #8]
   b9ed6:	6881      	ldr	r1, [r0, #8]
   b9ed8:	9101      	str	r1, [sp, #4]
   b9eda:	68c1      	ldr	r1, [r0, #12]
   b9edc:	9100      	str	r1, [sp, #0]
   b9ede:	4907      	ldr	r1, [pc, #28]	; (b9efc <asctime_r+0x40>)
   b9ee0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b9ee4:	440b      	add	r3, r1
   b9ee6:	4906      	ldr	r1, [pc, #24]	; (b9f00 <asctime_r+0x44>)
   b9ee8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b9eec:	440a      	add	r2, r1
   b9eee:	4620      	mov	r0, r4
   b9ef0:	4904      	ldr	r1, [pc, #16]	; (b9f04 <asctime_r+0x48>)
   b9ef2:	f7fc fda9 	bl	b6a48 <siprintf>
   b9ef6:	4620      	mov	r0, r4
   b9ef8:	b006      	add	sp, #24
   b9efa:	bd10      	pop	{r4, pc}
   b9efc:	000bafc2 	.word	0x000bafc2
   b9f00:	000bafad 	.word	0x000bafad
   b9f04:	000baf8d 	.word	0x000baf8d

000b9f08 <atoi>:
   b9f08:	220a      	movs	r2, #10
   b9f0a:	2100      	movs	r1, #0
   b9f0c:	f000 b962 	b.w	ba1d4 <strtol>

000b9f10 <__cxa_atexit>:
   b9f10:	b510      	push	{r4, lr}
   b9f12:	4c05      	ldr	r4, [pc, #20]	; (b9f28 <__cxa_atexit+0x18>)
   b9f14:	4613      	mov	r3, r2
   b9f16:	b12c      	cbz	r4, b9f24 <__cxa_atexit+0x14>
   b9f18:	460a      	mov	r2, r1
   b9f1a:	4601      	mov	r1, r0
   b9f1c:	2002      	movs	r0, #2
   b9f1e:	f3af 8000 	nop.w
   b9f22:	bd10      	pop	{r4, pc}
   b9f24:	4620      	mov	r0, r4
   b9f26:	e7fc      	b.n	b9f22 <__cxa_atexit+0x12>
   b9f28:	00000000 	.word	0x00000000

000b9f2c <ldiv>:
   b9f2c:	2900      	cmp	r1, #0
   b9f2e:	b510      	push	{r4, lr}
   b9f30:	fb91 f4f2 	sdiv	r4, r1, r2
   b9f34:	fb02 1314 	mls	r3, r2, r4, r1
   b9f38:	db06      	blt.n	b9f48 <ldiv+0x1c>
   b9f3a:	2b00      	cmp	r3, #0
   b9f3c:	da01      	bge.n	b9f42 <ldiv+0x16>
   b9f3e:	3401      	adds	r4, #1
   b9f40:	1a9b      	subs	r3, r3, r2
   b9f42:	e9c0 4300 	strd	r4, r3, [r0]
   b9f46:	bd10      	pop	{r4, pc}
   b9f48:	2b00      	cmp	r3, #0
   b9f4a:	bfc4      	itt	gt
   b9f4c:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   b9f50:	189b      	addgt	r3, r3, r2
   b9f52:	e7f6      	b.n	b9f42 <ldiv+0x16>

000b9f54 <memcmp>:
   b9f54:	b510      	push	{r4, lr}
   b9f56:	3901      	subs	r1, #1
   b9f58:	4402      	add	r2, r0
   b9f5a:	4290      	cmp	r0, r2
   b9f5c:	d101      	bne.n	b9f62 <memcmp+0xe>
   b9f5e:	2000      	movs	r0, #0
   b9f60:	e005      	b.n	b9f6e <memcmp+0x1a>
   b9f62:	7803      	ldrb	r3, [r0, #0]
   b9f64:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9f68:	42a3      	cmp	r3, r4
   b9f6a:	d001      	beq.n	b9f70 <memcmp+0x1c>
   b9f6c:	1b18      	subs	r0, r3, r4
   b9f6e:	bd10      	pop	{r4, pc}
   b9f70:	3001      	adds	r0, #1
   b9f72:	e7f2      	b.n	b9f5a <memcmp+0x6>

000b9f74 <memcpy>:
   b9f74:	440a      	add	r2, r1
   b9f76:	4291      	cmp	r1, r2
   b9f78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b9f7c:	d100      	bne.n	b9f80 <memcpy+0xc>
   b9f7e:	4770      	bx	lr
   b9f80:	b510      	push	{r4, lr}
   b9f82:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9f86:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9f8a:	4291      	cmp	r1, r2
   b9f8c:	d1f9      	bne.n	b9f82 <memcpy+0xe>
   b9f8e:	bd10      	pop	{r4, pc}

000b9f90 <memmove>:
   b9f90:	4288      	cmp	r0, r1
   b9f92:	b510      	push	{r4, lr}
   b9f94:	eb01 0402 	add.w	r4, r1, r2
   b9f98:	d902      	bls.n	b9fa0 <memmove+0x10>
   b9f9a:	4284      	cmp	r4, r0
   b9f9c:	4623      	mov	r3, r4
   b9f9e:	d807      	bhi.n	b9fb0 <memmove+0x20>
   b9fa0:	1e43      	subs	r3, r0, #1
   b9fa2:	42a1      	cmp	r1, r4
   b9fa4:	d008      	beq.n	b9fb8 <memmove+0x28>
   b9fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9faa:	f803 2f01 	strb.w	r2, [r3, #1]!
   b9fae:	e7f8      	b.n	b9fa2 <memmove+0x12>
   b9fb0:	4402      	add	r2, r0
   b9fb2:	4601      	mov	r1, r0
   b9fb4:	428a      	cmp	r2, r1
   b9fb6:	d100      	bne.n	b9fba <memmove+0x2a>
   b9fb8:	bd10      	pop	{r4, pc}
   b9fba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b9fbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b9fc2:	e7f7      	b.n	b9fb4 <memmove+0x24>

000b9fc4 <memset>:
   b9fc4:	4402      	add	r2, r0
   b9fc6:	4603      	mov	r3, r0
   b9fc8:	4293      	cmp	r3, r2
   b9fca:	d100      	bne.n	b9fce <memset+0xa>
   b9fcc:	4770      	bx	lr
   b9fce:	f803 1b01 	strb.w	r1, [r3], #1
   b9fd2:	e7f9      	b.n	b9fc8 <memset+0x4>

000b9fd4 <srand>:
   b9fd4:	b538      	push	{r3, r4, r5, lr}
   b9fd6:	4b10      	ldr	r3, [pc, #64]	; (ba018 <srand+0x44>)
   b9fd8:	681d      	ldr	r5, [r3, #0]
   b9fda:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9fdc:	4604      	mov	r4, r0
   b9fde:	b9b3      	cbnz	r3, ba00e <srand+0x3a>
   b9fe0:	2018      	movs	r0, #24
   b9fe2:	f7fc fd19 	bl	b6a18 <malloc>
   b9fe6:	4602      	mov	r2, r0
   b9fe8:	63a8      	str	r0, [r5, #56]	; 0x38
   b9fea:	b920      	cbnz	r0, b9ff6 <srand+0x22>
   b9fec:	4b0b      	ldr	r3, [pc, #44]	; (ba01c <srand+0x48>)
   b9fee:	480c      	ldr	r0, [pc, #48]	; (ba020 <srand+0x4c>)
   b9ff0:	2142      	movs	r1, #66	; 0x42
   b9ff2:	f7fc fd49 	bl	b6a88 <__assert_func>
   b9ff6:	490b      	ldr	r1, [pc, #44]	; (ba024 <srand+0x50>)
   b9ff8:	4b0b      	ldr	r3, [pc, #44]	; (ba028 <srand+0x54>)
   b9ffa:	e9c0 1300 	strd	r1, r3, [r0]
   b9ffe:	4b0b      	ldr	r3, [pc, #44]	; (ba02c <srand+0x58>)
   ba000:	6083      	str	r3, [r0, #8]
   ba002:	230b      	movs	r3, #11
   ba004:	8183      	strh	r3, [r0, #12]
   ba006:	2100      	movs	r1, #0
   ba008:	2001      	movs	r0, #1
   ba00a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ba00e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba010:	2200      	movs	r2, #0
   ba012:	611c      	str	r4, [r3, #16]
   ba014:	615a      	str	r2, [r3, #20]
   ba016:	bd38      	pop	{r3, r4, r5, pc}
   ba018:	2003d9c8 	.word	0x2003d9c8
   ba01c:	000bafe6 	.word	0x000bafe6
   ba020:	000baffd 	.word	0x000baffd
   ba024:	abcd330e 	.word	0xabcd330e
   ba028:	e66d1234 	.word	0xe66d1234
   ba02c:	0005deec 	.word	0x0005deec

000ba030 <strcmp>:
   ba030:	f810 2b01 	ldrb.w	r2, [r0], #1
   ba034:	f811 3b01 	ldrb.w	r3, [r1], #1
   ba038:	2a01      	cmp	r2, #1
   ba03a:	bf28      	it	cs
   ba03c:	429a      	cmpcs	r2, r3
   ba03e:	d0f7      	beq.n	ba030 <strcmp>
   ba040:	1ad0      	subs	r0, r2, r3
   ba042:	4770      	bx	lr

000ba044 <strcpy>:
   ba044:	4603      	mov	r3, r0
   ba046:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba04a:	f803 2b01 	strb.w	r2, [r3], #1
   ba04e:	2a00      	cmp	r2, #0
   ba050:	d1f9      	bne.n	ba046 <strcpy+0x2>
   ba052:	4770      	bx	lr

000ba054 <strlen>:
   ba054:	4603      	mov	r3, r0
   ba056:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba05a:	2a00      	cmp	r2, #0
   ba05c:	d1fb      	bne.n	ba056 <strlen+0x2>
   ba05e:	1a18      	subs	r0, r3, r0
   ba060:	3801      	subs	r0, #1
   ba062:	4770      	bx	lr

000ba064 <strncpy>:
   ba064:	b510      	push	{r4, lr}
   ba066:	3901      	subs	r1, #1
   ba068:	4603      	mov	r3, r0
   ba06a:	b132      	cbz	r2, ba07a <strncpy+0x16>
   ba06c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba070:	f803 4b01 	strb.w	r4, [r3], #1
   ba074:	3a01      	subs	r2, #1
   ba076:	2c00      	cmp	r4, #0
   ba078:	d1f7      	bne.n	ba06a <strncpy+0x6>
   ba07a:	441a      	add	r2, r3
   ba07c:	2100      	movs	r1, #0
   ba07e:	4293      	cmp	r3, r2
   ba080:	d100      	bne.n	ba084 <strncpy+0x20>
   ba082:	bd10      	pop	{r4, pc}
   ba084:	f803 1b01 	strb.w	r1, [r3], #1
   ba088:	e7f9      	b.n	ba07e <strncpy+0x1a>

000ba08a <strnlen>:
   ba08a:	b510      	push	{r4, lr}
   ba08c:	4602      	mov	r2, r0
   ba08e:	4401      	add	r1, r0
   ba090:	428a      	cmp	r2, r1
   ba092:	4613      	mov	r3, r2
   ba094:	d003      	beq.n	ba09e <strnlen+0x14>
   ba096:	781c      	ldrb	r4, [r3, #0]
   ba098:	3201      	adds	r2, #1
   ba09a:	2c00      	cmp	r4, #0
   ba09c:	d1f8      	bne.n	ba090 <strnlen+0x6>
   ba09e:	1a18      	subs	r0, r3, r0
   ba0a0:	bd10      	pop	{r4, pc}

000ba0a2 <strstr>:
   ba0a2:	780a      	ldrb	r2, [r1, #0]
   ba0a4:	b570      	push	{r4, r5, r6, lr}
   ba0a6:	b96a      	cbnz	r2, ba0c4 <strstr+0x22>
   ba0a8:	bd70      	pop	{r4, r5, r6, pc}
   ba0aa:	429a      	cmp	r2, r3
   ba0ac:	d109      	bne.n	ba0c2 <strstr+0x20>
   ba0ae:	460c      	mov	r4, r1
   ba0b0:	4605      	mov	r5, r0
   ba0b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   ba0b6:	2b00      	cmp	r3, #0
   ba0b8:	d0f6      	beq.n	ba0a8 <strstr+0x6>
   ba0ba:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   ba0be:	429e      	cmp	r6, r3
   ba0c0:	d0f7      	beq.n	ba0b2 <strstr+0x10>
   ba0c2:	3001      	adds	r0, #1
   ba0c4:	7803      	ldrb	r3, [r0, #0]
   ba0c6:	2b00      	cmp	r3, #0
   ba0c8:	d1ef      	bne.n	ba0aa <strstr+0x8>
   ba0ca:	4618      	mov	r0, r3
   ba0cc:	e7ec      	b.n	ba0a8 <strstr+0x6>
	...

000ba0d0 <_strtol_l.constprop.0>:
   ba0d0:	2b01      	cmp	r3, #1
   ba0d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba0d6:	d001      	beq.n	ba0dc <_strtol_l.constprop.0+0xc>
   ba0d8:	2b24      	cmp	r3, #36	; 0x24
   ba0da:	d906      	bls.n	ba0ea <_strtol_l.constprop.0+0x1a>
   ba0dc:	f7fc fccc 	bl	b6a78 <__errno>
   ba0e0:	2316      	movs	r3, #22
   ba0e2:	6003      	str	r3, [r0, #0]
   ba0e4:	2000      	movs	r0, #0
   ba0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba0ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; ba1d0 <_strtol_l.constprop.0+0x100>
   ba0ee:	460d      	mov	r5, r1
   ba0f0:	462e      	mov	r6, r5
   ba0f2:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba0f6:	f814 700c 	ldrb.w	r7, [r4, ip]
   ba0fa:	f017 0708 	ands.w	r7, r7, #8
   ba0fe:	d1f7      	bne.n	ba0f0 <_strtol_l.constprop.0+0x20>
   ba100:	2c2d      	cmp	r4, #45	; 0x2d
   ba102:	d132      	bne.n	ba16a <_strtol_l.constprop.0+0x9a>
   ba104:	782c      	ldrb	r4, [r5, #0]
   ba106:	2701      	movs	r7, #1
   ba108:	1cb5      	adds	r5, r6, #2
   ba10a:	2b00      	cmp	r3, #0
   ba10c:	d05b      	beq.n	ba1c6 <_strtol_l.constprop.0+0xf6>
   ba10e:	2b10      	cmp	r3, #16
   ba110:	d109      	bne.n	ba126 <_strtol_l.constprop.0+0x56>
   ba112:	2c30      	cmp	r4, #48	; 0x30
   ba114:	d107      	bne.n	ba126 <_strtol_l.constprop.0+0x56>
   ba116:	782c      	ldrb	r4, [r5, #0]
   ba118:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   ba11c:	2c58      	cmp	r4, #88	; 0x58
   ba11e:	d14d      	bne.n	ba1bc <_strtol_l.constprop.0+0xec>
   ba120:	786c      	ldrb	r4, [r5, #1]
   ba122:	2310      	movs	r3, #16
   ba124:	3502      	adds	r5, #2
   ba126:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   ba12a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   ba12e:	f04f 0c00 	mov.w	ip, #0
   ba132:	fbb8 f9f3 	udiv	r9, r8, r3
   ba136:	4666      	mov	r6, ip
   ba138:	fb03 8a19 	mls	sl, r3, r9, r8
   ba13c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   ba140:	f1be 0f09 	cmp.w	lr, #9
   ba144:	d816      	bhi.n	ba174 <_strtol_l.constprop.0+0xa4>
   ba146:	4674      	mov	r4, lr
   ba148:	42a3      	cmp	r3, r4
   ba14a:	dd24      	ble.n	ba196 <_strtol_l.constprop.0+0xc6>
   ba14c:	f1bc 0f00 	cmp.w	ip, #0
   ba150:	db1e      	blt.n	ba190 <_strtol_l.constprop.0+0xc0>
   ba152:	45b1      	cmp	r9, r6
   ba154:	d31c      	bcc.n	ba190 <_strtol_l.constprop.0+0xc0>
   ba156:	d101      	bne.n	ba15c <_strtol_l.constprop.0+0x8c>
   ba158:	45a2      	cmp	sl, r4
   ba15a:	db19      	blt.n	ba190 <_strtol_l.constprop.0+0xc0>
   ba15c:	fb06 4603 	mla	r6, r6, r3, r4
   ba160:	f04f 0c01 	mov.w	ip, #1
   ba164:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba168:	e7e8      	b.n	ba13c <_strtol_l.constprop.0+0x6c>
   ba16a:	2c2b      	cmp	r4, #43	; 0x2b
   ba16c:	bf04      	itt	eq
   ba16e:	782c      	ldrbeq	r4, [r5, #0]
   ba170:	1cb5      	addeq	r5, r6, #2
   ba172:	e7ca      	b.n	ba10a <_strtol_l.constprop.0+0x3a>
   ba174:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   ba178:	f1be 0f19 	cmp.w	lr, #25
   ba17c:	d801      	bhi.n	ba182 <_strtol_l.constprop.0+0xb2>
   ba17e:	3c37      	subs	r4, #55	; 0x37
   ba180:	e7e2      	b.n	ba148 <_strtol_l.constprop.0+0x78>
   ba182:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   ba186:	f1be 0f19 	cmp.w	lr, #25
   ba18a:	d804      	bhi.n	ba196 <_strtol_l.constprop.0+0xc6>
   ba18c:	3c57      	subs	r4, #87	; 0x57
   ba18e:	e7db      	b.n	ba148 <_strtol_l.constprop.0+0x78>
   ba190:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   ba194:	e7e6      	b.n	ba164 <_strtol_l.constprop.0+0x94>
   ba196:	f1bc 0f00 	cmp.w	ip, #0
   ba19a:	da05      	bge.n	ba1a8 <_strtol_l.constprop.0+0xd8>
   ba19c:	2322      	movs	r3, #34	; 0x22
   ba19e:	6003      	str	r3, [r0, #0]
   ba1a0:	4646      	mov	r6, r8
   ba1a2:	b942      	cbnz	r2, ba1b6 <_strtol_l.constprop.0+0xe6>
   ba1a4:	4630      	mov	r0, r6
   ba1a6:	e79e      	b.n	ba0e6 <_strtol_l.constprop.0+0x16>
   ba1a8:	b107      	cbz	r7, ba1ac <_strtol_l.constprop.0+0xdc>
   ba1aa:	4276      	negs	r6, r6
   ba1ac:	2a00      	cmp	r2, #0
   ba1ae:	d0f9      	beq.n	ba1a4 <_strtol_l.constprop.0+0xd4>
   ba1b0:	f1bc 0f00 	cmp.w	ip, #0
   ba1b4:	d000      	beq.n	ba1b8 <_strtol_l.constprop.0+0xe8>
   ba1b6:	1e69      	subs	r1, r5, #1
   ba1b8:	6011      	str	r1, [r2, #0]
   ba1ba:	e7f3      	b.n	ba1a4 <_strtol_l.constprop.0+0xd4>
   ba1bc:	2430      	movs	r4, #48	; 0x30
   ba1be:	2b00      	cmp	r3, #0
   ba1c0:	d1b1      	bne.n	ba126 <_strtol_l.constprop.0+0x56>
   ba1c2:	2308      	movs	r3, #8
   ba1c4:	e7af      	b.n	ba126 <_strtol_l.constprop.0+0x56>
   ba1c6:	2c30      	cmp	r4, #48	; 0x30
   ba1c8:	d0a5      	beq.n	ba116 <_strtol_l.constprop.0+0x46>
   ba1ca:	230a      	movs	r3, #10
   ba1cc:	e7ab      	b.n	ba126 <_strtol_l.constprop.0+0x56>
   ba1ce:	bf00      	nop
   ba1d0:	000bb057 	.word	0x000bb057

000ba1d4 <strtol>:
   ba1d4:	4613      	mov	r3, r2
   ba1d6:	460a      	mov	r2, r1
   ba1d8:	4601      	mov	r1, r0
   ba1da:	4802      	ldr	r0, [pc, #8]	; (ba1e4 <strtol+0x10>)
   ba1dc:	6800      	ldr	r0, [r0, #0]
   ba1de:	f7ff bf77 	b.w	ba0d0 <_strtol_l.constprop.0>
   ba1e2:	bf00      	nop
   ba1e4:	2003d9c8 	.word	0x2003d9c8

000ba1e8 <dynalib_user>:
   ba1e8:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   ba1f8:	00000000 69676964 65756c67 006f692e     ....digiglue.io.
   ba208:	6572002f 64726f63 49676e69 7265746e     /.recordingInter
   ba218:	3a6c6176 00692520 6f706572 6e697472     val: %i.reportin
   ba228:	746e4967 61767265 25203a6c 53440069     gInterval: %i.DS
   ba238:	6e204449 7320746f 65726f74 6e692064     ID not stored in
   ba248:	50454520 2e4d4f52 454c4220 6e6f6320      EEPROM. BLE con
   ba258:	20676966 75716572 64657269 46695700     fig required.WiF
   ba268:	61662069 64656c69 206f7420 6e6e6f63     i failed to conn
   ba278:	2c746365 74616420 6f6e2061 65722074     ect, data not re
   ba288:	74726f70 57006465 20694669 6e6e6f63     ported.WiFi conn
   ba298:	65746365 72202c64 726f7065 676e6974     ected, reporting
   ba2a8:	74616420 6f520061 766f6c6c 70207265      data.Rollover p
   ba2b8:	6f6c7961 203a6461 64227b00 22617461     ayload: .{"data"
   ba2c8:	5d005b3a 4f50007d 53005453 75746174     :[.]}.POST.Statu
   ba2d8:	00203a73 42716552 3a79646f 227b0020     s: .ReqBody: .{"
   ba2e8:	64697364 2c003a22 61762220 2265756c     dsid":., "value"
   ba2f8:	202c003a 6d697422 61747365 3a22706d     :., "timestamp":
   ba308:	002c7d00 6c696146 74206465 6e69206f     .},.Failed to in
   ba318:	61697469 657a696c 53494c20 00484433     itialize LIS3DH.
   ba328:	63736964 656e6e6f 64657463 656c5300     disconnected.Sle
   ba338:	70207065 65636f72 77207373 69746961     ep process waiti
   ba348:	6620676e 6d20726f 78657475 636f6c20     ng for mutex loc
   ba358:	5700736b 20694669 6e6e6f63 65746365     ks.WiFi connecte
   ba368:	73202c64 69636e79 7420676e 00656d69     d, syncing time.
   ba378:	72727543 20746e65 656d6974 3a736920     Current time is:
   ba388:	00732520 69466957 69616620 2064656c      %s.WiFi failed 
   ba398:	63206f74 656e6e6f 202c7463 70696b73     to connect, skip
   ba3a8:	676e6970 6d697420 79732065 7268636e     ping time synchr
   ba3b8:	7a696e6f 6f697461 6572006e 74726f70     onization.report
   ba3c8:	65726854 42006461 4157454c 42005449     Thread.BLEWAIT.B
   ba3d8:	6320454c 656e6e6f 64657463 454c4200     LE connected.BLE
   ba3e8:	746f6e20 6e6f6320 7463656e 202c6465      not connected, 
   ba3f8:	746e6f63 69756e69 7720676e 20687469     continuing with 
   ba408:	726f7473 73206465 69747465 2e73676e     stored settings.
   ba418:	656c6200 74696157 43726f46 69666e6f     .bleWaitForConfi
   ba428:	65520067 64726f63 20676e69 65646e69     g.Recording inde
   ba438:	25203a78 65720069 73657571 676e6974     x: %i.requesting
   ba448:	79617020 64616f6c 65636341 6f4c7373      payloadAccessLo
   ba458:	70006b63 6f6c7961 63416461 73736563     ck.payloadAccess
   ba468:	6b636f4c 6c657220 65736165 79622064     Lock released by
   ba478:	43455220 4944524f 4600474e 74737269      RECORDING.First
   ba488:	61657220 676e6964 72430a00 6e656465      reading..Creden
   ba498:	6c616974 72612073 75632065 6e657272     tials are curren
   ba4a8:	20796c74 726f7473 66206465 0a3a726f     tly stored for:.
   ba4b8:	0a2c005b 450a5d00 7265746e 74656e20     [.,..].Enter net
   ba4c8:	6b726f77 49535320 62282044 6b6e616c     work SSID (blank
   ba4d8:	206f7420 70696b73 6327202c 7261656c      to skip, 'clear
   ba4e8:	6f742027 73657220 63207465 65646572     ' to reset crede
   ba4f8:	6169746e 3a29736c 430a0020 65727275     ntials): ..Curre
   ba508:	4420746e 20444953 5b207369 450a5d00     nt DSID is [.].E
   ba518:	7265746e 76656420 20656369 44495344     nter device DSID
   ba528:	6c622820 206b6e61 73206f74 2970696b      (blank to skip)
   ba538:	6300203a 7261656c 6e450a00 20726574     : .clear..Enter 
   ba548:	7774656e 206b726f 73736170 64726f77     network password
   ba558:	0a00203a 6572430a 746e6564 736c6169     : ...Credentials
   ba568:	74657320 74697720 73732068 203a6469      set with ssid: 
   ba578:	61700a00 6f777373 203a6472 000a0a00     ..password: ....
   ba588:	746e450a 27207265 74736574 6f742027     .Enter 'test' to
   ba598:	73657420 72632074 6e656465 6c616974      test credential
   ba5a8:	62282073 6b6e616c 206f7420 70696b73     s (blank to skip
   ba5b8:	00203a29 74736574 6d697400 74756f65     ): .test.timeout
   ba5c8:	63755300 73736563 45000a21 524f5252     .Success!..ERROR
   ba5d8:	6957203a 63206946 656e6e6f 6f697463     : WiFi connectio
   ba5e8:	6974206e 756f656d 64000a74 20646973     n timeout..dsid 
   ba5f8:	65746e65 00646572 64697364 0a00203a     entered.dsid: ..
   ba608:	72727543 20746e65 756c6176 6f662065     Current value fo
   ba618:	6c732072 20706565 73756170 75642065     r sleep pause du
   ba628:	69746172 69206e6f 005b2073 6e450a5d     ration is [.].En
   ba638:	20726574 65656c73 61702070 20657375     ter sleep pause 
   ba648:	61727564 6e6f6974 20736120 69206e61     duration as an i
   ba658:	6765746e 69207265 6573206e 646e6f63     nteger in second
   ba668:	62282073 6b6e616c 206f7420 70696b73     s (blank to skip
   ba678:	00203a29 65656c73 61702070 20657375     ): .sleep pause 
   ba688:	61727564 6e6f6974 746e6520 64657265     duration entered
   ba698:	656c7300 70207065 65737561 72756420     .sleep pause dur
   ba6a8:	6f697461 00203a6e 7275430a 746e6572     ation: ..Current
   ba6b8:	6c617620 66206575 6420726f 20617461      value for data 
   ba6c8:	6c6c6f63 69746365 69206e6f 7265746e     collection inter
   ba6d8:	206c6176 5b207369 450a5d00 7265746e     val is [.].Enter
   ba6e8:	6d697420 65622065 65657774 6164206e      time between da
   ba6f8:	63206174 656c6c6f 6f697463 7361206e     ta collection as
   ba708:	206e6120 65746e69 20726567 6d206e69      an integer in m
   ba718:	696c6c69 6f636573 2073646e 616c6228     illiseconds (bla
   ba728:	74206b6e 6b73206f 3a297069 430a0020     nk to skip): ..C
   ba738:	65727275 7620746e 65756c61 726f6620     urrent value for
   ba748:	46695720 6f632069 63656e6e 6e6f6974      WiFi connection
   ba758:	746e6920 61767265 7369206c 5d005b20      interval is [.]
   ba768:	746e450a 74207265 20656d69 77746562     .Enter time betw
   ba778:	206e6565 69466957 6e6f6320 7463656e     een WiFi connect
   ba788:	736e6f69 20736120 69206e61 6765746e     ions as an integ
   ba798:	69207265 6573206e 646e6f63 62282073     er in seconds (b
   ba7a8:	6b6e616c 206f7420 70696b73 00203a29     lank to skip): .
   ba7b8:	746e450a 27207265 2761746f 206f7420     .Enter 'ota' to 
   ba7c8:	74696177 726f6620 41544f20 64707520     wait for OTA upd
   ba7d8:	20657461 616c6228 74206b6e 6b73206f     ate (blank to sk
   ba7e8:	3a297069 746f0020 69570061 63206946     ip): .ota.WiFi c
   ba7f8:	656e6e6f 64657463 7761202c 69746961     onnected, awaiti
   ba808:	7520676e 74616470 410a0065 74696177     ng update..Await
   ba818:	20676e69 2041544f 61647075 36006574     ing OTA update.6
   ba828:	30303445 2d313030 33413542 3933462d     E400001-B5A3-F39
   ba838:	30452d33 452d3941 32453035 43434434     3-E0A9-E50E24DCC
   ba848:	00453941 30344536 32303030 4135422d     A9E.6E400002-B5A
   ba858:	33462d33 452d3339 2d394130 45303545     3-F393-E0A9-E50E
   ba868:	43443432 45394143 34453600 30303030     24DCCA9E.6E40000
   ba878:	35422d33 462d3341 2d333933 39413045     3-B5A3-F393-E0A9
   ba888:	3035452d 44343245 39414343 78740045     -E50E24DCCA9E.tx
   ba898:	00787200 65636341 61007470 696c7070     .rx.Accept.appli
   ba8a8:	69746163 6a2f6e6f 006e6f73 746e6f43     cation/json.Cont
   ba8b8:	2d746e65 65707954 00000000              ent-Type....

000ba8c4 <_ZTV15Adafruit_LIS3DH>:
	...
   ba8cc:	000b40b3 000b5695 000b5905 000b5ce1     .@...V...Y...\..
   ba8dc:	000b5909 70747448 65696c43 093e746e     .Y..HttpClient>.
   ba8ec:	6e6e6f43 69746365 7420676e 00203a6f     Connecting to: .
   ba8fc:	70747448 65696c43 093e746e 6e6e6f43     HttpClient>.Conn
   ba90c:	69746365 7420676e 5049206f 2000203a     ecting to IP: . 
   ba91c:	50545448 302e312f 48000a0d 43707474     HTTP/1.0...HttpC
   ba92c:	6e65696c 53093e74 74726174 20666f20     lient>.Start of 
   ba93c:	50545448 71655220 74736575 6c63002e     HTTP Request..cl
   ba94c:	0065736f 6e6e6f43 69746365 48006e6f     ose.Connection.H
   ba95c:	43707474 6e65696c 43093e74 656e6e6f     ttpClient>.Conne
   ba96c:	6f697463 6166206e 64656c69 4f48002e     ction failed..HO
   ba97c:	43005453 65746e6f 4c2d746e 74676e65     ST.Content-Lengt
   ba98c:	74480068 6c437074 746e6569 6e45093e     h.HttpClient>.En
   ba99c:	666f2064 54544820 65522050 73657571     d of HTTP Reques
   ba9ac:	0d002e74 7474480a 696c4370 3e746e65     t....HttpClient>
   ba9bc:	63655209 69766965 5420676e 74205043     .Receiving TCP t
   ba9cc:	736e6172 69746361 6f206e6f 20002066     ransaction of . 
   ba9dc:	65747962 48002e73 43707474 6e65696c     bytes..HttpClien
   ba9ec:	45093e74 726f7272 6552203a 6e6f7073     t>.Error: Respon
   ba9fc:	62206573 2079646f 6772616c 74207265     se body larger t
   baa0c:	206e6168 66667562 002e7265 74480a0d     han buffer....Ht
   baa1c:	6c437074 746e6569 6e45093e 666f2064     tpClient>.End of
   baa2c:	50435420 61727420 6361736e 6e6f6974      TCP transaction
   baa3c:	0a0d002e 70747448 65696c43 093e746e     ....HttpClient>.
   baa4c:	6f727245 54203a72 6f656d69 77207475     Error: Timeout w
   baa5c:	656c6968 61657220 676e6964 73657220     hile reading res
   baa6c:	736e6f70 0d002e65 7474480a 696c4370     ponse....HttpCli
   baa7c:	3e746e65 646e4509 20666f20 50545448     ent>.End of HTTP
   baa8c:	73655220 736e6f70 00282065 2e29736d      Response (.ms).
   baa9c:	74744800 696c4370 3e746e65 61745309     .HttpClient>.Sta
   baaac:	20737574 65646f43 0d00203a 000a0d0a     tus Code: ......
   baabc:	70747448 65696c43 093e746e 6f727245     HttpClient>.Erro
   baacc:	43203a72 74276e61 6e696620 54482064     r: Can't find HT
   baadc:	72205054 6f707365 2065736e 79646f62     TP response body
   baaec:	6977002e 676e6972 656c622e 61745300     ..wiring.ble.Sta
   baafc:	64207472 6f637369 69726576 7320676e     rt discovering s
   bab0c:	69767265 2e736563 65655000 65642072     ervices..Peer de
   bab1c:	65636976 20736920 7373696d 21676e69     vice is missing!
   bab2c:	69614600 2064656c 61206f74 6e657070     .Failed to appen
   bab3c:	65702064 43207265 72746e65 64206c61     d peer Central d
   bab4c:	63697665 43002e65 656e6e6f 64657463     evice..Connected
   bab5c:	20796220 746e6543 206c6172 69766564      by Central devi
   bab6c:	002e6563 63736944 656e6e6f 64657463     ce..Disconnected
   bab7c:	20796220 6f6d6572 64206574 63697665      by remote devic
   bab8c:	44002e65 696c7075 65746163 68632064     e..Duplicated ch
   bab9c:	63617261 69726574 63697473 6e616320     aracteristic can
   babac:	20746f6e 61206562 64656464 6146002e     not be added..Fa
   babbc:	64656c69 206f7420 65707061 6c20646e     iled to append l
   babcc:	6c61636f 61686320 74636172 73697265     ocal characteris
   babdc:	2e636974 00000000                       tic.....

000babe4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   babec:	000b6ac5 000b6b29 000b6cef 000b6b53     .j..)k...l..Sk..
   babfc:	000b6ac9                                .j..

000bac00 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bac08:	000b6ac1 000b6b37 000b6ac3 000b6b59     .j..7k...j..Yk..
   bac18:	000b6ae9                                .j..

000bac1c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bac24:	000b6abf 000b6b45 000b7551 000b6b5f     .j..Ek..Qu.._k..
   bac34:	000b6b09                                .k..

000bac38 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bac44:	34fb0000 00805f9b 10008000 00000000     ...4._..........
	...

000bac56 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bac56:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000bac66 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bac66:	5f9b34fb 80000080 00001000 00000000     .4._............
	...

000bac78 <_ZTVN5spark13EthernetClassE>:
	...
   bac80:	000b7faf 000b7fa5 000b7f9b 000b7f91     ................
   bac90:	000b7f85 000b7f79 000b8235 000b823d     ....y...5...=...
   baca0:	000b7f6d 000b7f65 000b7f5b 000b7f51     m...e...[...Q...
   bacb0:	000b826d                                m...

000bacb4 <_ZTV7TwoWire>:
	...
   bacbc:	000b7fcd 000b8017 000b7fef 000b7fcf     ................
   baccc:	000b7ff7 000b7fff 000b8007 000b800f     ................

000bacdc <_ZTV9IPAddress>:
	...
   bace4:	000b80d9 000b80c9 000b80cb 00707061     ............app.

000bacf4 <_ZTVN5spark12NetworkClassE>:
	...
   bacfc:	000b81f5 000b81ff 000b8209 000b8213     ................
   bad0c:	000b821d 000b8229 000b8235 000b823d     ....)...5...=...
   bad1c:	000b8245 000b8251 000b8259 000b8263     E...Q...Y...c...
   bad2c:	000b826d                                m...

000bad30 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bad30:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   bad40:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   bad50:	72756769 6f697461 7369206e 766e6920     iguration is inv
   bad60:	64696c61 6572002e 65207663 726f7272     alid..recv error
   bad70:	25203d20 00000064                        = %d...

000bad78 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bad80:	000b8aed 000b8b11 000b9043 000b8b1f     ........C.......
   bad90:	000b8af1                                ....

000bad94 <_ZTV9TCPClient>:
	...
   bad9c:	000b8b9d 000b8bd1 000b8a69 000b8a83     ........i.......
   badac:	000b8ed9 000b8aad 000b8d4f 000b8ae1     ........O.......
   badbc:	000b8de1 000b8c21 000b8d7d 000b8f8d     ....!...}.......
   badcc:	000b8d1d 000b8ae3 000b8a95 000b8b25     ............%...
   baddc:	000b8c01 252d5925 64252d6d 3a482554     ....%Y-%m-%dT%H:
   badec:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000badfc <_ZTV11USARTSerial>:
	...
   bae04:	000b914d 000b91b9 000b9191 000b8359     M...........Y...
   bae14:	000b9161 000b917d 000b916f 000b918b     a...}...o.......
   bae24:	000b914f 000b9153                       O...S...

000bae2c <_ZTV9USBSerial>:
	...
   bae34:	000b924d 000b92b5 000b928b 000b8359     M...........Y...
   bae44:	000b927d 000b924f 000b925f 000b92af     }...O..._.......
   bae54:	000b926f 000b9249                       o...I...

000bae5c <_ZTVN5spark9WiFiClassE>:
	...
   bae64:	000b41d9 000b93b9 000b93af 000b41e3     .A...........A..
   bae74:	000b41c1 000b41cd 000b8235 000b823d     .A...A..5...=...
   bae84:	000b93a3 000b939b 000b9391 000b9387     ................
   bae94:	000b826d                                m...

000bae98 <_ZSt7nothrow>:
	...

000bae99 <_ZTSSt19_Sp_make_shared_tag>:
   bae99:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   baea9:	5f646572 00676174                        red_tag....

000baeb4 <_ZTISt19_Sp_make_shared_tag>:
   baeb4:	000baef4 000bae99                       ........

000baebc <_ZTIN10__cxxabiv117__class_type_infoE>:
   baebc:	000baf54 000baec8 000baf78              T.......x...

000baec8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   baec8:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   baed8:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   baee8:	00000045                                E...

000baeec <_ZTVN10__cxxabiv117__class_type_infoE>:
   baeec:	00000000 000baebc 000b985d 000b9871     ........]...q...
   baefc:	000b9a05 000b9a05 000b98db 000b981d     ................
   baf0c:	000b98c3 000b9885 000b984f              ........O...

000baf18 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   baf18:	000baf54 000baf24 000baebc              T...$.......

000baf24 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   baf24:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   baf34:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   baf44:	456f666e 00000000                       nfoE....

000baf4c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   baf4c:	00000000 000baf18 000b9905 000b9919     ................
   baf5c:	000b9a05 000b9a05 000b98db 000b981d     ................
   baf6c:	000b99d9 000b9965 000b992d              ....e...-...

000baf78 <_ZTISt9type_info>:
   baf78:	000baef4 000baf80                       ........

000baf80 <_ZTSSt9type_info>:
   baf80:	74397453 5f657079 6f666e69 332e2500     St9type_info.%.3
   baf90:	2e252073 33257333 2e252064 253a6432     s %.3s%3d %.2d:%
   bafa0:	3a64322e 64322e25 0a642520               .2d:%.2d %d..

000bafad <day_name.1>:
   bafad:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   bafbd:	61536972                                 riSat

000bafc2 <mon_name.0>:
   bafc2:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   bafd2:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   bafe2:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   baff2:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   bb002:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   bb012:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   bb022:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   bb032:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   bb042:	62696c2f 74732f63 62696c64 6e61722f     /libc/stdlib/ran
   bb052:	00632e64                                d.c.

000bb056 <_ctype_>:
   bb056:	20202000 20202020 28282020 20282828     .         ((((( 
   bb066:	20202020 20202020 20202020 20202020                     
   bb076:	10108820 10101010 10101010 10101010      ...............
   bb086:	04040410 04040404 10040404 10101010     ................
   bb096:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bb0a6:	01010101 01010101 01010101 10101010     ................
   bb0b6:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bb0c6:	02020202 02020202 02020202 10101010     ................
   bb0d6:	00000020 00000000 00000000 00000000      ...............
	...

000bb157 <link_const_variable_data_end>:
	...

000bb158 <link_constructors_location>:
   bb158:	000b56a5 	.word	0x000b56a5
   bb15c:	000b7f29 	.word	0x000b7f29
   bb160:	000b7fb9 	.word	0x000b7fb9
   bb164:	000b81e5 	.word	0x000b81e5
   bb168:	000b8345 	.word	0x000b8345
   bb16c:	000b8499 	.word	0x000b8499
   bb170:	000b8a2d 	.word	0x000b8a2d
   bb174:	000b9139 	.word	0x000b9139
   bb178:	000b93e9 	.word	0x000b93e9

000bb17c <link_constructors_end>:
   bb17c:	00000000 	.word	0x00000000
