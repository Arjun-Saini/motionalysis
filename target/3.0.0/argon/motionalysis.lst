
c:/Users/Arjun/Documents/GitHub/motionalysis/target/3.0.0/argon/motionalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003464  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7480  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000008c  2003e0d8  000d7484  0001e0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000068c  2003e164  2003e164  0002e164  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7510  000d7510  00027510  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7538  000d7538  00027538  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001b313c  00000000  00000000  0002753c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00019be8  00000000  00000000  001da678  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003b09b  00000000  00000000  001f4260  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003048  00000000  00000000  0022f2fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a3f8  00000000  00000000  00232343  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003c4ed  00000000  00000000  0023c73b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00042f26  00000000  00000000  00278c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00130fc2  00000000  00000000  002bbb4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000087c4  00000000  00000000  003ecb10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
   d4022:	b508      	push	{r3, lr}
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fd73 	bl	d6b18 <memcpy>
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fd7b 	bl	d6b34 <memset>
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e0d8 	.word	0x2003e0d8
   d4048:	000d7484 	.word	0x000d7484
   d404c:	2003e164 	.word	0x2003e164
   d4050:	2003e164 	.word	0x2003e164
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
   d4058:	b570      	push	{r4, r5, r6, lr}
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d405e:	f001 fd4b 	bl	d5af8 <module_user_init_hook>
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
   d406c:	bd70      	pop	{r4, r5, r6, pc}
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d7454 	.word	0x000d7454
   d407c:	000d7478 	.word	0x000d7478

000d4080 <module_user_setup>:
   d4080:	f000 b85a 	b.w	d4138 <setup>

000d4084 <module_user_loop>:
   d4084:	b508      	push	{r3, lr}
   d4086:	f000 f8c7 	bl	d4218 <loop>
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d408e:	f001 bcf5 	b.w	d5a7c <_post_loop>

000d4092 <_Znwj>:
   d4092:	f001 b96b 	b.w	d536c <malloc>

000d4096 <_Znaj>:
   d4096:	f001 b969 	b.w	d536c <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 b96f 	b.w	d537c <free>

000d409e <__cxa_guard_acquire>:
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   d40ae:	4770      	bx	lr

000d40b0 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   d40b0:	b510      	push	{r4, lr}
   d40b2:	4604      	mov	r4, r0
   d40b4:	3004      	adds	r0, #4
   d40b6:	f001 fb1c 	bl	d56f2 <_ZN6StringD1Ev>
   d40ba:	4620      	mov	r0, r4
   d40bc:	bd10      	pop	{r4, pc}

000d40be <_ZN14http_request_tD1Ev>:
} http_request_t;
   d40be:	b510      	push	{r4, lr}
   d40c0:	4604      	mov	r4, r0
   d40c2:	303c      	adds	r0, #60	; 0x3c
   d40c4:	f001 fb15 	bl	d56f2 <_ZN6StringD1Ev>
   d40c8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d40cc:	f001 fb11 	bl	d56f2 <_ZN6StringD1Ev>
   d40d0:	4620      	mov	r0, r4
   d40d2:	f001 fb0e 	bl	d56f2 <_ZN6StringD1Ev>
   d40d6:	4620      	mov	r0, r4
   d40d8:	bd10      	pop	{r4, pc}

000d40da <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40da:	b538      	push	{r3, r4, r5, lr}
   d40dc:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40de:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40e0:	b128      	cbz	r0, d40ee <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40e2:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40e4:	210c      	movs	r1, #12
   d40e6:	f002 fbec 	bl	d68c2 <_ZdlPvj>
            wakeupSource = next;
   d40ea:	4628      	mov	r0, r5
        while (wakeupSource) {
   d40ec:	e7f8      	b.n	d40e0 <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d40ee:	4620      	mov	r0, r4
   d40f0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d40f4 <_ZN10HttpClientD1Ev>:

class HttpClient {
   d40f4:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40f6:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40f8:	4b0a      	ldr	r3, [pc, #40]	; (d4124 <_ZN10HttpClientD1Ev+0x30>)
   d40fa:	6003      	str	r3, [r0, #0]
   d40fc:	4605      	mov	r5, r0
   d40fe:	b17c      	cbz	r4, d4120 <_ZN10HttpClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4100:	6863      	ldr	r3, [r4, #4]
   d4102:	3b01      	subs	r3, #1
   d4104:	6063      	str	r3, [r4, #4]
   d4106:	b95b      	cbnz	r3, d4120 <_ZN10HttpClientD1Ev+0x2c>
          _M_dispose();
   d4108:	6823      	ldr	r3, [r4, #0]
   d410a:	4620      	mov	r0, r4
   d410c:	689b      	ldr	r3, [r3, #8]
   d410e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4110:	68a3      	ldr	r3, [r4, #8]
   d4112:	3b01      	subs	r3, #1
   d4114:	60a3      	str	r3, [r4, #8]
   d4116:	b91b      	cbnz	r3, d4120 <_ZN10HttpClientD1Ev+0x2c>
            _M_destroy();
   d4118:	6823      	ldr	r3, [r4, #0]
   d411a:	4620      	mov	r0, r4
   d411c:	68db      	ldr	r3, [r3, #12]
   d411e:	4798      	blx	r3
   d4120:	4628      	mov	r0, r5
   d4122:	bd38      	pop	{r3, r4, r5, pc}
   d4124:	000d71a0 	.word	0x000d71a0

000d4128 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4128:	b510      	push	{r4, lr}
   d412a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d412c:	6800      	ldr	r0, [r0, #0]
   d412e:	b108      	cbz	r0, d4134 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4130:	f001 f924 	bl	d537c <free>
class SystemClass {
   d4134:	4620      	mov	r0, r4
   d4136:	bd10      	pop	{r4, pc}

000d4138 <setup>:
  {NULL, NULL}
};
http_request_t request;
http_response_t response;

void setup() {
   d4138:	b538      	push	{r3, r4, r5, lr}
  Serial.begin(9600);
   d413a:	f001 fe0d 	bl	d5d58 <_Z16_fetch_usbserialv>
   d413e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4142:	f001 fdfd 	bl	d5d40 <_ZN9USBSerial5beginEl>

  //start transmission from accelerometer
  lis.begin(I2C_ADDRESS);
   d4146:	2119      	movs	r1, #25
   d4148:	4829      	ldr	r0, [pc, #164]	; (d41f0 <setup+0xb8>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d414a:	4d2a      	ldr	r5, [pc, #168]	; (d41f4 <setup+0xbc>)
   d414c:	f000 fac3 	bl	d46d6 <_ZN15Adafruit_LIS3DH5beginEh>
  lis.setRange(LIS3DH_RANGE_2_G);
   d4150:	4827      	ldr	r0, [pc, #156]	; (d41f0 <setup+0xb8>)
   d4152:	2100      	movs	r1, #0
   d4154:	f000 fa96 	bl	d4684 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>
  lis.setDataRate(LIS3DH_DATARATE_400_HZ);
   d4158:	4825      	ldr	r0, [pc, #148]	; (d41f0 <setup+0xb8>)
   d415a:	2107      	movs	r1, #7
   d415c:	f000 faaa 	bl	d46b4 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>

  //setup sleep system with interrupt pin
  pinMode(SDO_OUTPUT_PIN, OUTPUT);
   d4160:	2101      	movs	r1, #1
   d4162:	2008      	movs	r0, #8
   d4164:	f002 fb2a 	bl	d67bc <pinMode>
  digitalWrite(SDO_OUTPUT_PIN, HIGH);
   d4168:	2101      	movs	r1, #1
   d416a:	2008      	movs	r0, #8
   d416c:	f002 fb37 	bl	d67de <digitalWrite>
   d4170:	7d2b      	ldrb	r3, [r5, #20]
   d4172:	b1eb      	cbz	r3, d41b0 <setup+0x78>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4174:	2302      	movs	r3, #2
   d4176:	722b      	strb	r3, [r5, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4178:	682b      	ldr	r3, [r5, #0]
   d417a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d417c:	b123      	cbz	r3, d4188 <setup+0x50>
            if (start->type == type) {
   d417e:	889a      	ldrh	r2, [r3, #4]
   d4180:	2a04      	cmp	r2, #4
   d4182:	d031      	beq.n	d41e8 <setup+0xb0>
            start = start->next;
   d4184:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4186:	e7f9      	b.n	d417c <setup+0x44>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4188:	491b      	ldr	r1, [pc, #108]	; (d41f8 <setup+0xc0>)
   d418a:	2010      	movs	r0, #16
   d418c:	f002 fb9b 	bl	d68c6 <_ZnwjRKSt9nothrow_t>
   d4190:	4604      	mov	r4, r0
   d4192:	b338      	cbz	r0, d41e4 <setup+0xac>
   d4194:	2210      	movs	r2, #16
   d4196:	2100      	movs	r1, #0
   d4198:	f002 fccc 	bl	d6b34 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d419c:	4b17      	ldr	r3, [pc, #92]	; (d41fc <setup+0xc4>)
   d419e:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d41a0:	2304      	movs	r3, #4
   d41a2:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d41a4:	692b      	ldr	r3, [r5, #16]
   d41a6:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
   d41a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d41ac:	60e3      	str	r3, [r4, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d41ae:	612c      	str	r4, [r5, #16]

  config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(SLEEP_DURATION);

  request.hostname = "ptsv2.com";
   d41b0:	4c13      	ldr	r4, [pc, #76]	; (d4200 <setup+0xc8>)
   d41b2:	4914      	ldr	r1, [pc, #80]	; (d4204 <setup+0xcc>)
   d41b4:	4620      	mov	r0, r4
   d41b6:	f001 fafb 	bl	d57b0 <_ZN6StringaSEPKc>
  request.port = 80;
   d41ba:	2350      	movs	r3, #80	; 0x50
  request.path = "/t/q2wns-1625165230/post";
   d41bc:	4912      	ldr	r1, [pc, #72]	; (d4208 <setup+0xd0>)
  request.port = 80;
   d41be:	63a3      	str	r3, [r4, #56]	; 0x38
  request.path = "/t/q2wns-1625165230/post";
   d41c0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d41c4:	f001 faf4 	bl	d57b0 <_ZN6StringaSEPKc>

  request.hostname = "api.getshiftworx.com";
   d41c8:	4910      	ldr	r1, [pc, #64]	; (d420c <setup+0xd4>)
   d41ca:	4620      	mov	r0, r4
   d41cc:	f001 faf0 	bl	d57b0 <_ZN6StringaSEPKc>
  request.path = "v1/datasource/data";
   d41d0:	490f      	ldr	r1, [pc, #60]	; (d4210 <setup+0xd8>)
   d41d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d41d6:	f001 faeb 	bl	d57b0 <_ZN6StringaSEPKc>

  wifiTimeLeft = WIFI_INTERVAL;
   d41da:	4b0e      	ldr	r3, [pc, #56]	; (d4214 <setup+0xdc>)
   d41dc:	f242 7210 	movw	r2, #10000	; 0x2710
   d41e0:	601a      	str	r2, [r3, #0]
}
   d41e2:	bd38      	pop	{r3, r4, r5, pc}
                valid_ = false;
   d41e4:	7528      	strb	r0, [r5, #20]
                return *this;
   d41e6:	e7e3      	b.n	d41b0 <setup+0x78>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d41e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d41ec:	60da      	str	r2, [r3, #12]
                return *this;
   d41ee:	e7df      	b.n	d41b0 <setup+0x78>
   d41f0:	2003e5a8 	.word	0x2003e5a8
   d41f4:	2003e174 	.word	0x2003e174
   d41f8:	000d725c 	.word	0x000d725c
   d41fc:	00030010 	.word	0x00030010
   d4200:	2003e5e4 	.word	0x2003e5e4
   d4204:	000d6d30 	.word	0x000d6d30
   d4208:	000d6d3a 	.word	0x000d6d3a
   d420c:	000d6d53 	.word	0x000d6d53
   d4210:	000d6d68 	.word	0x000d6d68
   d4214:	2003e0f8 	.word	0x2003e0f8

000d4218 <loop>:

void loop() {
   d4218:	b5f0      	push	{r4, r5, r6, r7, lr}
  lis.read();
   d421a:	4837      	ldr	r0, [pc, #220]	; (d42f8 <loop+0xe0>)
void loop() {
   d421c:	b087      	sub	sp, #28
  lis.read();
   d421e:	f000 faf1 	bl	d4804 <_ZN15Adafruit_LIS3DH4readEv>
  //payload += "{\"x\":\"" + String(GRAVITY * lis.x_g) + "\"," + "\"y\":\"" + String(GRAVITY * lis.y_g) + "\"," + "\"z\":\"" + String(GRAVITY * lis.z_g) + "\"},";
  //payload +=  "{\"dsid\":50983, \"value\":3},";

  lis.setupLowPowerWakeMode(16);
   d4222:	2110      	movs	r1, #16
   d4224:	4834      	ldr	r0, [pc, #208]	; (d42f8 <loop+0xe0>)
   d4226:	f000 faa7 	bl	d4778 <_ZN15Adafruit_LIS3DH21setupLowPowerWakeModeEh>
  System.sleep(config);
   d422a:	a802      	add	r0, sp, #8
   d422c:	4933      	ldr	r1, [pc, #204]	; (d42fc <loop+0xe4>)
   d422e:	f001 f9cf 	bl	d55d0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d4232:	9802      	ldr	r0, [sp, #8]
   d4234:	b108      	cbz	r0, d423a <loop+0x22>
            free(wakeupSource_);
   d4236:	f001 f8a1 	bl	d537c <free>
  
  if(wifiTimeLeft <= 0){
   d423a:	4c31      	ldr	r4, [pc, #196]	; (d4300 <loop+0xe8>)
   d423c:	6823      	ldr	r3, [r4, #0]
   d423e:	2b00      	cmp	r3, #0
   d4240:	dc54      	bgt.n	d42ec <loop+0xd4>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4242:	4f30      	ldr	r7, [pc, #192]	; (d4304 <loop+0xec>)
   d4244:	2300      	movs	r3, #0
   d4246:	461a      	mov	r2, r3
   d4248:	4619      	mov	r1, r3
   d424a:	6878      	ldr	r0, [r7, #4]
   d424c:	f001 f836 	bl	d52bc <network_on>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4250:	2300      	movs	r3, #0
   d4252:	6878      	ldr	r0, [r7, #4]
   d4254:	461a      	mov	r2, r3
   d4256:	4619      	mov	r1, r3
   d4258:	f001 f810 	bl	d527c <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d425c:	2200      	movs	r2, #0
   d425e:	6878      	ldr	r0, [r7, #4]
   d4260:	4611      	mov	r1, r2
   d4262:	f001 f823 	bl	d52ac <network_ready>
    WiFi.on();
    WiFi.connect();
    while(!WiFi.ready()){}
   d4266:	2800      	cmp	r0, #0
   d4268:	d0f8      	beq.n	d425c <loop+0x44>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d426a:	f001 f867 	bl	d533c <spark_cloud_flag_connect>
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
    }

    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
   d426e:	4e26      	ldr	r6, [pc, #152]	; (d4308 <loop+0xf0>)
    
    client.publish(MQTT_PATH, "[" + payload + "]");
    client.loop();*/
    //payload.remove(payload.length() - 1);
    //request.body = "{\"data\":[" + payload + "]}";
    request.body = "{\"data\":[{\"dsid\":50983,\"value\":5}]}";
   d4270:	4926      	ldr	r1, [pc, #152]	; (d430c <loop+0xf4>)
   d4272:	4827      	ldr	r0, [pc, #156]	; (d4310 <loop+0xf8>)
   d4274:	f001 fa9c 	bl	d57b0 <_ZN6StringaSEPKc>
   d4278:	4b26      	ldr	r3, [pc, #152]	; (d4314 <loop+0xfc>)
   d427a:	4927      	ldr	r1, [pc, #156]	; (d4318 <loop+0x100>)
   d427c:	4827      	ldr	r0, [pc, #156]	; (d431c <loop+0x104>)
   d427e:	9300      	str	r3, [sp, #0]
   d4280:	4632      	mov	r2, r6
   d4282:	4b27      	ldr	r3, [pc, #156]	; (d4320 <loop+0x108>)
   d4284:	f000 fc16 	bl	d4ab4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
    http.post(request, response, headers);
    delay(1000);
   d4288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d428c:	f001 fbbc 	bl	d5a08 <delay>
    Serial.println("Status: " + response.status);
   d4290:	f001 fd62 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4294:	6833      	ldr	r3, [r6, #0]
   d4296:	4923      	ldr	r1, [pc, #140]	; (d4324 <loop+0x10c>)
   d4298:	4419      	add	r1, r3
   d429a:	f001 fb74 	bl	d5986 <_ZN5Print7printlnEPKc>
    Serial.println("Body: " + response.body);
   d429e:	f001 fd5b 	bl	d5d58 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d42a2:	4921      	ldr	r1, [pc, #132]	; (d4328 <loop+0x110>)
   d42a4:	4605      	mov	r5, r0
   d42a6:	a802      	add	r0, sp, #8
   d42a8:	f001 fa6e 	bl	d5788 <_ZN6StringC1EPKc>
   d42ac:	1d31      	adds	r1, r6, #4
   d42ae:	a802      	add	r0, sp, #8
   d42b0:	f001 faab 	bl	d580a <_ZplRK15StringSumHelperRK6String>
   d42b4:	6801      	ldr	r1, [r0, #0]
   d42b6:	4628      	mov	r0, r5
   d42b8:	f001 fb65 	bl	d5986 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   d42bc:	a802      	add	r0, sp, #8
   d42be:	f001 fa18 	bl	d56f2 <_ZN6StringD1Ev>

    payload = "";
   d42c2:	491a      	ldr	r1, [pc, #104]	; (d432c <loop+0x114>)
   d42c4:	481a      	ldr	r0, [pc, #104]	; (d4330 <loop+0x118>)
   d42c6:	f001 fa73 	bl	d57b0 <_ZN6StringaSEPKc>
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
   d42ca:	2500      	movs	r5, #0
    
    wifiTimeLeft = WIFI_INTERVAL;
   d42cc:	f242 7310 	movw	r3, #10000	; 0x2710

    Particle.disconnect();
   d42d0:	a802      	add	r0, sp, #8
    wifiTimeLeft = WIFI_INTERVAL;
   d42d2:	6023      	str	r3, [r4, #0]
   d42d4:	e9cd 5502 	strd	r5, r5, [sp, #8]
   d42d8:	f88d 5010 	strb.w	r5, [sp, #16]
    Particle.disconnect();
   d42dc:	f001 fc3e 	bl	d5b5c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        network_off(*this, 0, 0, NULL);
   d42e0:	6878      	ldr	r0, [r7, #4]
   d42e2:	462b      	mov	r3, r5
   d42e4:	462a      	mov	r2, r5
   d42e6:	4629      	mov	r1, r5
   d42e8:	f000 fff0 	bl	d52cc <network_off>
    WiFi.off();
  }

  wifiTimeLeft -= SLEEP_DURATION;
   d42ec:	6823      	ldr	r3, [r4, #0]
   d42ee:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   d42f2:	6023      	str	r3, [r4, #0]
}
   d42f4:	b007      	add	sp, #28
   d42f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d42f8:	2003e5a8 	.word	0x2003e5a8
   d42fc:	2003e174 	.word	0x2003e174
   d4300:	2003e0f8 	.word	0x2003e0f8
   d4304:	2003e7c4 	.word	0x2003e7c4
   d4308:	2003e630 	.word	0x2003e630
   d430c:	000d6d7b 	.word	0x000d6d7b
   d4310:	2003e620 	.word	0x2003e620
   d4314:	000d6d9f 	.word	0x000d6d9f
   d4318:	2003e5e4 	.word	0x2003e5e4
   d431c:	2003e18c 	.word	0x2003e18c
   d4320:	2003e0d8 	.word	0x2003e0d8
   d4324:	000d6da4 	.word	0x000d6da4
   d4328:	000d6dad 	.word	0x000d6dad
   d432c:	000d7001 	.word	0x000d7001
   d4330:	2003e5d4 	.word	0x2003e5d4

000d4334 <_ZN15Adafruit_LIS3DHD0Ev>:
   d4334:	b510      	push	{r4, lr}
   d4336:	212c      	movs	r1, #44	; 0x2c
   d4338:	4604      	mov	r4, r0
   d433a:	f002 fac2 	bl	d68c2 <_ZdlPvj>
   d433e:	4620      	mov	r0, r4
   d4340:	bd10      	pop	{r4, pc}
	...

000d4344 <_GLOBAL__sub_I_SystemMode>:

void callback(char* topic, byte* payload, unsigned int length){
  
   d4344:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
   d4346:	4d31      	ldr	r5, [pc, #196]	; (d440c <_GLOBAL__sub_I_SystemMode+0xc8>)
    SleepResult() {}
   d4348:	4b31      	ldr	r3, [pc, #196]	; (d4410 <_GLOBAL__sub_I_SystemMode+0xcc>)
   d434a:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d434c:	2400      	movs	r4, #0
   d434e:	602c      	str	r4, [r5, #0]
   d4350:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d4352:	71ac      	strb	r4, [r5, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4354:	2003      	movs	r0, #3
   d4356:	f000 ff63 	bl	d5220 <set_system_mode>
String payload = "";
   d435a:	4e2e      	ldr	r6, [pc, #184]	; (d4414 <_GLOBAL__sub_I_SystemMode+0xd0>)
SYSTEM_MODE(MANUAL)
   d435c:	4a2e      	ldr	r2, [pc, #184]	; (d4418 <_GLOBAL__sub_I_SystemMode+0xd4>)
   d435e:	492f      	ldr	r1, [pc, #188]	; (d441c <_GLOBAL__sub_I_SystemMode+0xd8>)
   d4360:	4628      	mov	r0, r5
String payload = "";
   d4362:	4d2f      	ldr	r5, [pc, #188]	; (d4420 <_GLOBAL__sub_I_SystemMode+0xdc>)
SYSTEM_MODE(MANUAL)
   d4364:	f002 faa8 	bl	d68b8 <__aeabi_atexit>
String payload = "";
   d4368:	4629      	mov	r1, r5
   d436a:	4630      	mov	r0, r6
   d436c:	f001 fa0c 	bl	d5788 <_ZN6StringC1EPKc>
   d4370:	4630      	mov	r0, r6
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d4372:	4e2c      	ldr	r6, [pc, #176]	; (d4424 <_GLOBAL__sub_I_SystemMode+0xe0>)
String payload = "";
   d4374:	4a28      	ldr	r2, [pc, #160]	; (d4418 <_GLOBAL__sub_I_SystemMode+0xd4>)
   d4376:	492c      	ldr	r1, [pc, #176]	; (d4428 <_GLOBAL__sub_I_SystemMode+0xe4>)
   d4378:	f002 fa9e 	bl	d68b8 <__aeabi_atexit>
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d437c:	4630      	mov	r0, r6
   d437e:	f000 f88b 	bl	d4498 <_ZN15Adafruit_LIS3DHC1Ev>
   d4382:	4a25      	ldr	r2, [pc, #148]	; (d4418 <_GLOBAL__sub_I_SystemMode+0xd4>)
   d4384:	4929      	ldr	r1, [pc, #164]	; (d442c <_GLOBAL__sub_I_SystemMode+0xe8>)
   d4386:	4630      	mov	r0, r6
   d4388:	f002 fa96 	bl	d68b8 <__aeabi_atexit>
        : config_(config) {
   d438c:	4828      	ldr	r0, [pc, #160]	; (d4430 <_GLOBAL__sub_I_SystemMode+0xec>)
SystemSleepConfiguration config;
   d438e:	4a22      	ldr	r2, [pc, #136]	; (d4418 <_GLOBAL__sub_I_SystemMode+0xd4>)
              valid_(true) {
   d4390:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d4394:	4603      	mov	r3, r0
   d4396:	1d01      	adds	r1, r0, #4
   d4398:	f843 1b09 	str.w	r1, [r3], #9
              valid_(true) {
   d439c:	709c      	strb	r4, [r3, #2]
   d439e:	2301      	movs	r3, #1
        config_.wakeup_sources = nullptr;
   d43a0:	e9c0 4403 	strd	r4, r4, [r0, #12]
              valid_(true) {
   d43a4:	7503      	strb	r3, [r0, #20]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d43a6:	7204      	strb	r4, [r0, #8]
        config_.size = sizeof(hal_sleep_config_t);
   d43a8:	4b22      	ldr	r3, [pc, #136]	; (d4434 <_GLOBAL__sub_I_SystemMode+0xf0>)
HttpClient http;
   d43aa:	4c23      	ldr	r4, [pc, #140]	; (d4438 <_GLOBAL__sub_I_SystemMode+0xf4>)
   d43ac:	6043      	str	r3, [r0, #4]
SystemSleepConfiguration config;
   d43ae:	4923      	ldr	r1, [pc, #140]	; (d443c <_GLOBAL__sub_I_SystemMode+0xf8>)
   d43b0:	f002 fa82 	bl	d68b8 <__aeabi_atexit>
HttpClient http;
   d43b4:	4620      	mov	r0, r4
   d43b6:	f000 fb04 	bl	d49c2 <_ZN10HttpClientC1Ev>
   d43ba:	4620      	mov	r0, r4
} http_request_t;
   d43bc:	4c20      	ldr	r4, [pc, #128]	; (d4440 <_GLOBAL__sub_I_SystemMode+0xfc>)
   d43be:	4a16      	ldr	r2, [pc, #88]	; (d4418 <_GLOBAL__sub_I_SystemMode+0xd4>)
   d43c0:	4920      	ldr	r1, [pc, #128]	; (d4444 <_GLOBAL__sub_I_SystemMode+0x100>)
   d43c2:	f002 fa79 	bl	d68b8 <__aeabi_atexit>
   d43c6:	4629      	mov	r1, r5
   d43c8:	4620      	mov	r0, r4
   d43ca:	f001 f9dd 	bl	d5788 <_ZN6StringC1EPKc>
   d43ce:	f104 0010 	add.w	r0, r4, #16
   d43d2:	f001 fc11 	bl	d5bf8 <_ZN9IPAddressC1Ev>
   d43d6:	4629      	mov	r1, r5
   d43d8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d43dc:	f001 f9d4 	bl	d5788 <_ZN6StringC1EPKc>
   d43e0:	4629      	mov	r1, r5
   d43e2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d43e6:	f001 f9cf 	bl	d5788 <_ZN6StringC1EPKc>
http_request_t request;
   d43ea:	4620      	mov	r0, r4
} http_response_t;
   d43ec:	4c16      	ldr	r4, [pc, #88]	; (d4448 <_GLOBAL__sub_I_SystemMode+0x104>)
   d43ee:	4a0a      	ldr	r2, [pc, #40]	; (d4418 <_GLOBAL__sub_I_SystemMode+0xd4>)
   d43f0:	4916      	ldr	r1, [pc, #88]	; (d444c <_GLOBAL__sub_I_SystemMode+0x108>)
   d43f2:	f002 fa61 	bl	d68b8 <__aeabi_atexit>
   d43f6:	4629      	mov	r1, r5
   d43f8:	1d20      	adds	r0, r4, #4
   d43fa:	f001 f9c5 	bl	d5788 <_ZN6StringC1EPKc>
http_response_t response;
   d43fe:	4620      	mov	r0, r4
   d4400:	4a05      	ldr	r2, [pc, #20]	; (d4418 <_GLOBAL__sub_I_SystemMode+0xd4>)
   d4402:	4913      	ldr	r1, [pc, #76]	; (d4450 <_GLOBAL__sub_I_SystemMode+0x10c>)
   d4404:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
http_response_t response;
   d4408:	f002 ba56 	b.w	d68b8 <__aeabi_atexit>
   d440c:	2003e168 	.word	0x2003e168
   d4410:	ffff0000 	.word	0xffff0000
   d4414:	2003e5d4 	.word	0x2003e5d4
   d4418:	2003e164 	.word	0x2003e164
   d441c:	000d4129 	.word	0x000d4129
   d4420:	000d7001 	.word	0x000d7001
   d4424:	2003e5a8 	.word	0x2003e5a8
   d4428:	000d56f3 	.word	0x000d56f3
   d442c:	000d40af 	.word	0x000d40af
   d4430:	2003e174 	.word	0x2003e174
   d4434:	00030010 	.word	0x00030010
   d4438:	2003e18c 	.word	0x2003e18c
   d443c:	000d40db 	.word	0x000d40db
   d4440:	2003e5e4 	.word	0x2003e5e4
   d4444:	000d40f5 	.word	0x000d40f5
   d4448:	2003e630 	.word	0x2003e630
   d444c:	000d40bf 	.word	0x000d40bf
   d4450:	000d40b1 	.word	0x000d40b1

000d4454 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d4454:	4770      	bx	lr
	...

000d4458 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d4458:	460b      	mov	r3, r1
   d445a:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d445c:	2228      	movs	r2, #40	; 0x28
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d445e:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d4460:	2100      	movs	r1, #0
   d4462:	4618      	mov	r0, r3
   d4464:	f002 fb66 	bl	d6b34 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d4468:	4908      	ldr	r1, [pc, #32]	; (d448c <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
   d446a:	220b      	movs	r2, #11
   d446c:	f002 fba8 	bl	d6bc0 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d4470:	2200      	movs	r2, #0
  sensor->version     = 1;
   d4472:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d4474:	72c2      	strb	r2, [r0, #11]
  sensor->version     = 1;
   d4476:	60c1      	str	r1, [r0, #12]
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d4478:	4603      	mov	r3, r0
  sensor->sensor_id   = _sensorID;
   d447a:	69a0      	ldr	r0, [r4, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
   d447c:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   d447e:	e9c3 0104 	strd	r0, r1, [r3, #16]
  sensor->max_value   = 0;
   d4482:	2200      	movs	r2, #0
   d4484:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0;
   d4486:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0;
   d4488:	621a      	str	r2, [r3, #32]
}
   d448a:	bd10      	pop	{r4, pc}
   d448c:	000d6dff 	.word	0x000d6dff

000d4490 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4490:	6803      	ldr	r3, [r0, #0]
   d4492:	b2c9      	uxtb	r1, r1
   d4494:	689b      	ldr	r3, [r3, #8]
   d4496:	4718      	bx	r3

000d4498 <_ZN15Adafruit_LIS3DHC1Ev>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   d4498:	4a06      	ldr	r2, [pc, #24]	; (d44b4 <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   d449a:	6002      	str	r2, [r0, #0]
   d449c:	f04f 32ff 	mov.w	r2, #4294967295
   d44a0:	6182      	str	r2, [r0, #24]
   d44a2:	7742      	strb	r2, [r0, #29]
   d44a4:	83c2      	strh	r2, [r0, #30]
   d44a6:	22ff      	movs	r2, #255	; 0xff
   d44a8:	f880 2020 	strb.w	r2, [r0, #32]
   d44ac:	2208      	movs	r2, #8
   d44ae:	6242      	str	r2, [r0, #36]	; 0x24
}
   d44b0:	4770      	bx	lr
   d44b2:	bf00      	nop
   d44b4:	000d6e10 	.word	0x000d6e10

000d44b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d44b8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d44ba:	4c0b      	ldr	r4, [pc, #44]	; (d44e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d44bc:	7821      	ldrb	r1, [r4, #0]
   d44be:	f3bf 8f5b 	dmb	ish
   d44c2:	f011 0101 	ands.w	r1, r1, #1
   d44c6:	d10b      	bne.n	d44e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d44c8:	4620      	mov	r0, r4
   d44ca:	9101      	str	r1, [sp, #4]
   d44cc:	f7ff fde7 	bl	d409e <__cxa_guard_acquire>
   d44d0:	9901      	ldr	r1, [sp, #4]
   d44d2:	b128      	cbz	r0, d44e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d44d4:	4805      	ldr	r0, [pc, #20]	; (d44ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d44d6:	f000 ffb5 	bl	d5444 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d44da:	4620      	mov	r0, r4
   d44dc:	f7ff fde4 	bl	d40a8 <__cxa_guard_release>
        return instance;
    }
   d44e0:	4802      	ldr	r0, [pc, #8]	; (d44ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d44e2:	b002      	add	sp, #8
   d44e4:	bd10      	pop	{r4, pc}
   d44e6:	bf00      	nop
   d44e8:	2003e644 	.word	0x2003e644
   d44ec:	2003e648 	.word	0x2003e648

000d44f0 <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d44f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
   d44f4:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d44f8:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d44fa:	4605      	mov	r5, r0
   d44fc:	460f      	mov	r7, r1
  if (_sck == -1)
   d44fe:	d106      	bne.n	d450e <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4500:	f7ff ffda 	bl	d44b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4504:	4639      	mov	r1, r7
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
   d4506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d450a:	f001 b825 	b.w	d5558 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   d450e:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   d4510:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   d4512:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   d4516:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d451a:	2100      	movs	r1, #0
   d451c:	b280      	uxth	r0, r0
   d451e:	f002 f95e 	bl	d67de <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   d4522:	f995 001e 	ldrsb.w	r0, [r5, #30]
   d4526:	fa08 f106 	lsl.w	r1, r8, r6
   d452a:	4039      	ands	r1, r7
   d452c:	b280      	uxth	r0, r0
   d452e:	f002 f956 	bl	d67de <digitalWrite>
    digitalWrite(_sck, HIGH);
   d4532:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d4536:	2101      	movs	r1, #1
   d4538:	b280      	uxth	r0, r0
   d453a:	f002 f950 	bl	d67de <digitalWrite>
    if (digitalRead(_miso))
   d453e:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
   d4542:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   d4544:	b280      	uxth	r0, r0
    reply <<= 1;
   d4546:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   d4548:	f002 f962 	bl	d6810 <digitalRead>
   d454c:	b108      	cbz	r0, d4552 <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   d454e:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   d4552:	3e01      	subs	r6, #1
   d4554:	d2df      	bcs.n	d4516 <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
   d4556:	4620      	mov	r0, r4
   d4558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d455c <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   d455c:	b508      	push	{r3, lr}
        instance().setBitOrder(order);
   d455e:	f7ff ffab 	bl	d44b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4562:	2101      	movs	r1, #1
   d4564:	f000 ff89 	bl	d547a <_ZN8SPIClass11setBitOrderEh>
        return instance().setClockSpeed(value, scale);
   d4568:	f7ff ffa6 	bl	d44b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d456c:	4905      	ldr	r1, [pc, #20]	; (d4584 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   d456e:	2201      	movs	r2, #1
   d4570:	f000 ffc0 	bl	d54f4 <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
   d4574:	f7ff ffa0 	bl	d44b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   d4578:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d457c:	2100      	movs	r1, #0
   d457e:	f000 bf8f 	b.w	d54a0 <_ZN8SPIClass11setDataModeEh>
   d4582:	bf00      	nop
   d4584:	0007a120 	.word	0x0007a120

000d4588 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d4588:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   d458a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d458e:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d4590:	4604      	mov	r4, r0
   d4592:	460e      	mov	r6, r1
   d4594:	4615      	mov	r5, r2
  if (_cs == -1) {
   d4596:	d116      	bne.n	d45c6 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   d4598:	f002 f966 	bl	d6868 <_Z19__fetch_global_Wirev>
   d459c:	7f21      	ldrb	r1, [r4, #28]
   d459e:	f001 fcf3 	bl	d5f88 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d45a2:	f002 f961 	bl	d6868 <_Z19__fetch_global_Wirev>
   d45a6:	6803      	ldr	r3, [r0, #0]
   d45a8:	4631      	mov	r1, r6
   d45aa:	689b      	ldr	r3, [r3, #8]
   d45ac:	4798      	blx	r3
    Wire.write((uint8_t)value);
   d45ae:	f002 f95b 	bl	d6868 <_Z19__fetch_global_Wirev>
   d45b2:	6803      	ldr	r3, [r0, #0]
   d45b4:	4629      	mov	r1, r5
   d45b6:	689b      	ldr	r3, [r3, #8]
   d45b8:	4798      	blx	r3
    Wire.endTransmission();
   d45ba:	f002 f955 	bl	d6868 <_Z19__fetch_global_Wirev>
}
   d45be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   d45c2:	f001 bcec 	b.w	d5f9e <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
   d45c6:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d45ca:	3301      	adds	r3, #1
   d45cc:	d101      	bne.n	d45d2 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   d45ce:	f7ff ffc5 	bl	d455c <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d45d2:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d45d6:	2100      	movs	r1, #0
   d45d8:	b280      	uxth	r0, r0
   d45da:	f002 f900 	bl	d67de <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   d45de:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d45e2:	4620      	mov	r0, r4
   d45e4:	f7ff ff84 	bl	d44f0 <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   d45e8:	4629      	mov	r1, r5
   d45ea:	4620      	mov	r0, r4
   d45ec:	f7ff ff80 	bl	d44f0 <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   d45f0:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d45f4:	2101      	movs	r1, #1
}
   d45f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   d45fa:	b280      	uxth	r0, r0
   d45fc:	f002 b8ef 	b.w	d67de <digitalWrite>

000d4600 <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d4600:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d4602:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4606:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d4608:	4604      	mov	r4, r0
   d460a:	460d      	mov	r5, r1
  if (_cs == -1) {
   d460c:	d11d      	bne.n	d464a <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   d460e:	f002 f92b 	bl	d6868 <_Z19__fetch_global_Wirev>
   d4612:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d4616:	f001 fcbb 	bl	d5f90 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   d461a:	f002 f925 	bl	d6868 <_Z19__fetch_global_Wirev>
   d461e:	6803      	ldr	r3, [r0, #0]
   d4620:	4629      	mov	r1, r5
   d4622:	689b      	ldr	r3, [r3, #8]
   d4624:	4798      	blx	r3
    Wire.endTransmission();
   d4626:	f002 f91f 	bl	d6868 <_Z19__fetch_global_Wirev>
   d462a:	f001 fcb8 	bl	d5f9e <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
   d462e:	f002 f91b 	bl	d6868 <_Z19__fetch_global_Wirev>
   d4632:	7f21      	ldrb	r1, [r4, #28]
   d4634:	2201      	movs	r2, #1
   d4636:	f001 fca4 	bl	d5f82 <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   d463a:	f002 f915 	bl	d6868 <_Z19__fetch_global_Wirev>
   d463e:	6803      	ldr	r3, [r0, #0]
   d4640:	695b      	ldr	r3, [r3, #20]
   d4642:	4798      	blx	r3
   d4644:	b2c5      	uxtb	r5, r0
}
   d4646:	4628      	mov	r0, r5
   d4648:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
   d464a:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d464e:	3301      	adds	r3, #1
   d4650:	d101      	bne.n	d4656 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   d4652:	f7ff ff83 	bl	d455c <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
   d4656:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d465a:	2100      	movs	r1, #0
   d465c:	b280      	uxth	r0, r0
   d465e:	f002 f8be 	bl	d67de <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   d4662:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4666:	4620      	mov	r0, r4
   d4668:	f7ff ff42 	bl	d44f0 <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   d466c:	2100      	movs	r1, #0
   d466e:	4620      	mov	r0, r4
   d4670:	f7ff ff3e 	bl	d44f0 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4674:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   d4676:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d467a:	2101      	movs	r1, #1
   d467c:	b280      	uxth	r0, r0
   d467e:	f002 f8ae 	bl	d67de <digitalWrite>
    if (_sck == -1)
   d4682:	e7e0      	b.n	d4646 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

000d4684 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>:
{
   d4684:	b538      	push	{r3, r4, r5, lr}
   d4686:	460d      	mov	r5, r1
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d4688:	2123      	movs	r1, #35	; 0x23
{
   d468a:	4604      	mov	r4, r0
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d468c:	f7ff ffb8 	bl	d4600 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  r &= ~(0x30);
   d4690:	f020 0230 	bic.w	r2, r0, #48	; 0x30
  r |= range << 4;
   d4694:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d4698:	4620      	mov	r0, r4
   d469a:	b2d2      	uxtb	r2, r2
}
   d469c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d46a0:	2123      	movs	r1, #35	; 0x23
   d46a2:	f7ff bf71 	b.w	d4588 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d46a6 <_ZN15Adafruit_LIS3DH8getRangeEv>:
{
   d46a6:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   d46a8:	2123      	movs	r1, #35	; 0x23
   d46aa:	f7ff ffa9 	bl	d4600 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   d46ae:	f3c0 1001 	ubfx	r0, r0, #4, #2
   d46b2:	bd08      	pop	{r3, pc}

000d46b4 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
   d46b4:	b538      	push	{r3, r4, r5, lr}
   d46b6:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d46b8:	2120      	movs	r1, #32
{
   d46ba:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d46bc:	f7ff ffa0 	bl	d4600 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
   d46c0:	f000 020f 	and.w	r2, r0, #15
  ctl1 |= (dataRate << 4);
   d46c4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d46c8:	4620      	mov	r0, r4
   d46ca:	b2d2      	uxtb	r2, r2
}
   d46cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d46d0:	2120      	movs	r1, #32
   d46d2:	f7ff bf59 	b.w	d4588 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d46d6 <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   d46d6:	b510      	push	{r4, lr}
   d46d8:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   d46da:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
   d46dc:	f990 001d 	ldrsb.w	r0, [r0, #29]
   d46e0:	1c42      	adds	r2, r0, #1
   d46e2:	d123      	bne.n	d472c <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
   d46e4:	f002 f8c0 	bl	d6868 <_Z19__fetch_global_Wirev>
   d46e8:	f001 fc1c 	bl	d5f24 <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   d46ec:	210f      	movs	r1, #15
   d46ee:	4620      	mov	r0, r4
   d46f0:	f7ff ff86 	bl	d4600 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   d46f4:	2833      	cmp	r0, #51	; 0x33
   d46f6:	d13d      	bne.n	d4774 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   d46f8:	2207      	movs	r2, #7
   d46fa:	2120      	movs	r1, #32
   d46fc:	4620      	mov	r0, r4
   d46fe:	f7ff ff43 	bl	d4588 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
   d4702:	2107      	movs	r1, #7
   d4704:	4620      	mov	r0, r4
   d4706:	f7ff ffd5 	bl	d46b4 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   d470a:	2288      	movs	r2, #136	; 0x88
   d470c:	2123      	movs	r1, #35	; 0x23
   d470e:	4620      	mov	r0, r4
   d4710:	f7ff ff3a 	bl	d4588 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   d4714:	2210      	movs	r2, #16
   d4716:	2122      	movs	r1, #34	; 0x22
   d4718:	4620      	mov	r0, r4
   d471a:	f7ff ff35 	bl	d4588 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   d471e:	4620      	mov	r0, r4
   d4720:	2280      	movs	r2, #128	; 0x80
   d4722:	211f      	movs	r1, #31
   d4724:	f7ff ff30 	bl	d4588 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
   d4728:	2001      	movs	r0, #1
}
   d472a:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   d472c:	2101      	movs	r1, #1
   d472e:	b280      	uxth	r0, r0
   d4730:	f002 f855 	bl	d67de <digitalWrite>
    pinMode(_cs, OUTPUT);
   d4734:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4738:	2101      	movs	r1, #1
   d473a:	b280      	uxth	r0, r0
   d473c:	f002 f83e 	bl	d67bc <pinMode>
    if (_sck == -1) {
   d4740:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4744:	1c43      	adds	r3, r0, #1
   d4746:	d104      	bne.n	d4752 <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
   d4748:	f7ff feb6 	bl	d44b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d474c:	f000 fe84 	bl	d5458 <_ZN8SPIClass5beginEv>
    }
   d4750:	e7cc      	b.n	d46ec <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
   d4752:	2101      	movs	r1, #1
   d4754:	b280      	uxth	r0, r0
   d4756:	f002 f831 	bl	d67bc <pinMode>
      pinMode(_mosi, OUTPUT);
   d475a:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d475e:	2101      	movs	r1, #1
   d4760:	b280      	uxth	r0, r0
   d4762:	f002 f82b 	bl	d67bc <pinMode>
      pinMode(_miso, INPUT);
   d4766:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d476a:	2100      	movs	r1, #0
   d476c:	b280      	uxth	r0, r0
   d476e:	f002 f825 	bl	d67bc <pinMode>
   d4772:	e7bb      	b.n	d46ec <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
   d4774:	2000      	movs	r0, #0
   d4776:	e7d8      	b.n	d472a <_ZN15Adafruit_LIS3DH5beginEh+0x54>

000d4778 <_ZN15Adafruit_LIS3DH21setupLowPowerWakeModeEh>:
bool Adafruit_LIS3DH::setupLowPowerWakeMode(uint8_t movementThreshold) {
   d4778:	b538      	push	{r3, r4, r5, lr}
	writeRegister8(LIS3DH_REG_CTRL1, LIS3DH_CTRL_REG1_ODR1 | LIS3DH_CTRL_REG1_LPEN | LIS3DH_CTRL_REG1_ZEN | LIS3DH_CTRL_REG1_YEN | LIS3DH_CTRL_REG1_XEN);
   d477a:	222f      	movs	r2, #47	; 0x2f
bool Adafruit_LIS3DH::setupLowPowerWakeMode(uint8_t movementThreshold) {
   d477c:	4604      	mov	r4, r0
   d477e:	460d      	mov	r5, r1
	writeRegister8(LIS3DH_REG_CTRL1, LIS3DH_CTRL_REG1_ODR1 | LIS3DH_CTRL_REG1_LPEN | LIS3DH_CTRL_REG1_ZEN | LIS3DH_CTRL_REG1_YEN | LIS3DH_CTRL_REG1_XEN);
   d4780:	2120      	movs	r1, #32
   d4782:	f7ff ff01 	bl	d4588 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
	writeRegister8(LIS3DH_REG_CTRL2, 0);
   d4786:	2200      	movs	r2, #0
   d4788:	2121      	movs	r1, #33	; 0x21
   d478a:	4620      	mov	r0, r4
   d478c:	f7ff fefc 	bl	d4588 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
	writeRegister8(LIS3DH_REG_CTRL3, LIS3DH_CTRL_REG3_I1_INT1);
   d4790:	2240      	movs	r2, #64	; 0x40
   d4792:	2122      	movs	r1, #34	; 0x22
   d4794:	4620      	mov	r0, r4
   d4796:	f7ff fef7 	bl	d4588 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
	writeRegister8(LIS3DH_REG_CTRL4, 0);
   d479a:	2200      	movs	r2, #0
   d479c:	2123      	movs	r1, #35	; 0x23
   d479e:	4620      	mov	r0, r4
   d47a0:	f7ff fef2 	bl	d4588 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
	writeRegister8(LIS3DH_REG_CTRL5, LIS3DH_CTRL_REG5_LIR_INT1);
   d47a4:	2208      	movs	r2, #8
   d47a6:	2124      	movs	r1, #36	; 0x24
   d47a8:	4620      	mov	r0, r4
   d47aa:	f7ff feed 	bl	d4588 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
	writeRegister8(LIS3DH_REG_CTRL6, 0);
   d47ae:	2200      	movs	r2, #0
   d47b0:	2125      	movs	r1, #37	; 0x25
   d47b2:	4620      	mov	r0, r4
   d47b4:	f7ff fee8 	bl	d4588 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
	readRegister8(LIS3DH_REG_REFERENCE);
   d47b8:	2126      	movs	r1, #38	; 0x26
   d47ba:	4620      	mov	r0, r4
   d47bc:	f7ff ff20 	bl	d4600 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
	writeRegister8(LIS3DH_REG_INT1THS, movementThreshold);
   d47c0:	462a      	mov	r2, r5
   d47c2:	2132      	movs	r1, #50	; 0x32
   d47c4:	4620      	mov	r0, r4
   d47c6:	f7ff fedf 	bl	d4588 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
	writeRegister8(LIS3DH_REG_INT1DUR, 0);
   d47ca:	2200      	movs	r2, #0
   d47cc:	2133      	movs	r1, #51	; 0x33
   d47ce:	4620      	mov	r0, r4
   d47d0:	f7ff feda 	bl	d4588 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
	if (intPin >= 0) {
   d47d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d47d6:	2b00      	cmp	r3, #0
   d47d8:	db0c      	blt.n	d47f4 <_ZN15Adafruit_LIS3DH21setupLowPowerWakeModeEh+0x7c>
		int1_cfg = LIS3DH_INT1_CFG_YHIE_YUPE | LIS3DH_INT1_CFG_XHIE_XUPE;
   d47da:	220a      	movs	r2, #10
		writeRegister8(LIS3DH_REG_INT1CFG, int1_cfg);
   d47dc:	2130      	movs	r1, #48	; 0x30
   d47de:	4620      	mov	r0, r4
		int1_cfg = LIS3DH_INT1_CFG_YHIE_YUPE | LIS3DH_INT1_CFG_XHIE_XUPE;
   d47e0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		writeRegister8(LIS3DH_REG_INT1CFG, int1_cfg);
   d47e4:	f7ff fed0 	bl	d4588 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
		readRegister8(LIS3DH_REG_INT1SRC);
   d47e8:	2131      	movs	r1, #49	; 0x31
   d47ea:	4620      	mov	r0, r4
   d47ec:	f7ff ff08 	bl	d4600 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   d47f0:	2001      	movs	r0, #1
   d47f2:	bd38      	pop	{r3, r4, r5, pc}
		int1_cfg = 0;
   d47f4:	2200      	movs	r2, #0
   d47f6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		writeRegister8(LIS3DH_REG_INT1CFG, 0);
   d47fa:	2130      	movs	r1, #48	; 0x30
   d47fc:	4620      	mov	r0, r4
   d47fe:	f7ff fec3 	bl	d4588 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
   d4802:	e7f5      	b.n	d47f0 <_ZN15Adafruit_LIS3DH21setupLowPowerWakeModeEh+0x78>

000d4804 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
   d4804:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d4806:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d480a:	3301      	adds	r3, #1
void Adafruit_LIS3DH::read(void) {
   d480c:	4604      	mov	r4, r0
  if (_cs == -1) {
   d480e:	d176      	bne.n	d48fe <_ZN15Adafruit_LIS3DH4readEv+0xfa>
    Wire.beginTransmission(_i2caddr);
   d4810:	f002 f82a 	bl	d6868 <_Z19__fetch_global_Wirev>
   d4814:	f994 101c 	ldrsb.w	r1, [r4, #28]
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d4818:	4d5c      	ldr	r5, [pc, #368]	; (d498c <_ZN15Adafruit_LIS3DH4readEv+0x188>)
    Wire.beginTransmission(_i2caddr);
   d481a:	f001 fbb9 	bl	d5f90 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   d481e:	f002 f823 	bl	d6868 <_Z19__fetch_global_Wirev>
   d4822:	21a8      	movs	r1, #168	; 0xa8
   d4824:	f7ff fe34 	bl	d4490 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d4828:	f002 f81e 	bl	d6868 <_Z19__fetch_global_Wirev>
   d482c:	f001 fbb7 	bl	d5f9e <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
   d4830:	f002 f81a 	bl	d6868 <_Z19__fetch_global_Wirev>
   d4834:	7f21      	ldrb	r1, [r4, #28]
   d4836:	2206      	movs	r2, #6
   d4838:	f001 fba3 	bl	d5f82 <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d483c:	f002 f814 	bl	d6868 <_Z19__fetch_global_Wirev>
   d4840:	6803      	ldr	r3, [r0, #0]
   d4842:	695b      	ldr	r3, [r3, #20]
   d4844:	4798      	blx	r3
   d4846:	80e0      	strh	r0, [r4, #6]
   d4848:	f002 f80e 	bl	d6868 <_Z19__fetch_global_Wirev>
   d484c:	6803      	ldr	r3, [r0, #0]
   d484e:	695b      	ldr	r3, [r3, #20]
   d4850:	4798      	blx	r3
   d4852:	88e3      	ldrh	r3, [r4, #6]
   d4854:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d4858:	4318      	orrs	r0, r3
   d485a:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   d485c:	f002 f804 	bl	d6868 <_Z19__fetch_global_Wirev>
   d4860:	6803      	ldr	r3, [r0, #0]
   d4862:	695b      	ldr	r3, [r3, #20]
   d4864:	4798      	blx	r3
   d4866:	8120      	strh	r0, [r4, #8]
   d4868:	f001 fffe 	bl	d6868 <_Z19__fetch_global_Wirev>
   d486c:	6803      	ldr	r3, [r0, #0]
   d486e:	695b      	ldr	r3, [r3, #20]
   d4870:	4798      	blx	r3
   d4872:	8923      	ldrh	r3, [r4, #8]
   d4874:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d4878:	4318      	orrs	r0, r3
   d487a:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   d487c:	f001 fff4 	bl	d6868 <_Z19__fetch_global_Wirev>
   d4880:	6803      	ldr	r3, [r0, #0]
   d4882:	695b      	ldr	r3, [r3, #20]
   d4884:	4798      	blx	r3
   d4886:	8160      	strh	r0, [r4, #10]
   d4888:	f001 ffee 	bl	d6868 <_Z19__fetch_global_Wirev>
   d488c:	6803      	ldr	r3, [r0, #0]
   d488e:	695b      	ldr	r3, [r3, #20]
   d4890:	4798      	blx	r3
   d4892:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d4896:	8965      	ldrh	r5, [r4, #10]
   d4898:	4328      	orrs	r0, r5
   d489a:	8160      	strh	r0, [r4, #10]
  uint8_t range = getRange();
   d489c:	4620      	mov	r0, r4
   d489e:	f7ff ff02 	bl	d46a6 <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d48a2:	2803      	cmp	r0, #3
   d48a4:	d069      	beq.n	d497a <_ZN15Adafruit_LIS3DH4readEv+0x176>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d48a6:	2802      	cmp	r0, #2
   d48a8:	d06a      	beq.n	d4980 <_ZN15Adafruit_LIS3DH4readEv+0x17c>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d48aa:	2801      	cmp	r0, #1
   d48ac:	d06b      	beq.n	d4986 <_ZN15Adafruit_LIS3DH4readEv+0x182>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   d48ae:	2800      	cmp	r0, #0
   d48b0:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   d48b4:	bf18      	it	ne
   d48b6:	2301      	movne	r3, #1
  x_g = (float)x / divider;
   d48b8:	ee07 3a90 	vmov	s15, r3
   d48bc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d48c0:	ee07 3a10 	vmov	s14, r3
   d48c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d48c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d48cc:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  x_g = (float)x / divider;
   d48d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   d48d4:	ee07 3a10 	vmov	s14, r3
   d48d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_g = (float)x / divider;
   d48dc:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   d48e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   d48e4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d48e8:	ee07 3a10 	vmov	s14, r3
   d48ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d48f0:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   d48f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d48f8:	edc4 6a05 	vstr	s13, [r4, #20]
}
   d48fc:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
   d48fe:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4902:	3301      	adds	r3, #1
   d4904:	d101      	bne.n	d490a <_ZN15Adafruit_LIS3DH4readEv+0x106>
      beginTransaction();
   d4906:	f7ff fe29 	bl	d455c <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d490a:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d490e:	2100      	movs	r1, #0
   d4910:	b280      	uxth	r0, r0
   d4912:	f001 ff64 	bl	d67de <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   d4916:	21e8      	movs	r1, #232	; 0xe8
   d4918:	4620      	mov	r0, r4
   d491a:	f7ff fde9 	bl	d44f0 <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   d491e:	21ff      	movs	r1, #255	; 0xff
   d4920:	4620      	mov	r0, r4
   d4922:	f7ff fde5 	bl	d44f0 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4926:	21ff      	movs	r1, #255	; 0xff
   d4928:	80e0      	strh	r0, [r4, #6]
   d492a:	4620      	mov	r0, r4
   d492c:	f7ff fde0 	bl	d44f0 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4930:	88e3      	ldrh	r3, [r4, #6]
   d4932:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4936:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   d4938:	21ff      	movs	r1, #255	; 0xff
   d493a:	4620      	mov	r0, r4
   d493c:	f7ff fdd8 	bl	d44f0 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4940:	21ff      	movs	r1, #255	; 0xff
   d4942:	8120      	strh	r0, [r4, #8]
   d4944:	4620      	mov	r0, r4
   d4946:	f7ff fdd3 	bl	d44f0 <_ZN15Adafruit_LIS3DH7spixferEh>
   d494a:	8923      	ldrh	r3, [r4, #8]
   d494c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4950:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   d4952:	21ff      	movs	r1, #255	; 0xff
   d4954:	4620      	mov	r0, r4
   d4956:	f7ff fdcb 	bl	d44f0 <_ZN15Adafruit_LIS3DH7spixferEh>
   d495a:	21ff      	movs	r1, #255	; 0xff
   d495c:	8160      	strh	r0, [r4, #10]
   d495e:	4620      	mov	r0, r4
   d4960:	f7ff fdc6 	bl	d44f0 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4964:	8963      	ldrh	r3, [r4, #10]
   d4966:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d496a:	8160      	strh	r0, [r4, #10]
    digitalWrite(_cs, HIGH);
   d496c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4970:	2101      	movs	r1, #1
   d4972:	b280      	uxth	r0, r0
   d4974:	f001 ff33 	bl	d67de <digitalWrite>
    if (_sck == -1)
   d4978:	e790      	b.n	d489c <_ZN15Adafruit_LIS3DH4readEv+0x98>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d497a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d497e:	e79b      	b.n	d48b8 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d4980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   d4984:	e798      	b.n	d48b8 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d4986:	f641 73fe 	movw	r3, #8190	; 0x1ffe
   d498a:	e795      	b.n	d48b8 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
   d498c:	00ffff00 	.word	0x00ffff00

000d4990 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   d4990:	460c      	mov	r4, r1
   d4992:	4605      	mov	r5, r0
   d4994:	b508      	push	{r3, lr}
  memset(event, 0, sizeof(sensors_event_t));
   d4996:	2220      	movs	r2, #32
   d4998:	2100      	movs	r1, #0
   d499a:	1d20      	adds	r0, r4, #4
   d499c:	f002 f8ca 	bl	d6b34 <memset>
  event->version   = sizeof(sensors_event_t);
   d49a0:	2324      	movs	r3, #36	; 0x24
   d49a2:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d49a4:	69ab      	ldr	r3, [r5, #24]
   d49a6:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   d49a8:	2301      	movs	r3, #1
   d49aa:	60a3      	str	r3, [r4, #8]
  event->timestamp = 0;
   d49ac:	2300      	movs	r3, #0
   d49ae:	6123      	str	r3, [r4, #16]
  read();
   d49b0:	4628      	mov	r0, r5
   d49b2:	f7ff ff27 	bl	d4804 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
   d49b6:	68eb      	ldr	r3, [r5, #12]
   d49b8:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   d49ba:	692b      	ldr	r3, [r5, #16]
   d49bc:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   d49be:	696b      	ldr	r3, [r5, #20]
   d49c0:	61e3      	str	r3, [r4, #28]

000d49c2 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   d49c2:	b510      	push	{r4, lr}
   d49c4:	4604      	mov	r4, r0
   d49c6:	f001 fd3b 	bl	d6440 <_ZN9TCPClientC1Ev>
{

}
   d49ca:	4620      	mov	r0, r4
   d49cc:	bd10      	pop	{r4, pc}
	...

000d49d0 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   d49d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   d49d2:	4f0f      	ldr	r7, [pc, #60]	; (d4a10 <_ZN10HttpClient10sendHeaderEPKcS1_+0x40>)
{
   d49d4:	4605      	mov	r5, r0
   d49d6:	4614      	mov	r4, r2
   d49d8:	460e      	mov	r6, r1
    client.print(aHeaderName);
   d49da:	f000 ffbb 	bl	d5954 <_ZN5Print5printEPKc>
    client.print(": ");
   d49de:	4639      	mov	r1, r7
   d49e0:	4628      	mov	r0, r5
   d49e2:	f000 ffb7 	bl	d5954 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d49e6:	4621      	mov	r1, r4
   d49e8:	4628      	mov	r0, r5
   d49ea:	f000 ffcc 	bl	d5986 <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.print(aHeaderName);
   d49ee:	f001 f9b3 	bl	d5d58 <_Z16_fetch_usbserialv>
   d49f2:	4631      	mov	r1, r6
   d49f4:	f000 ffae 	bl	d5954 <_ZN5Print5printEPKc>
    Serial.print(": ");
   d49f8:	f001 f9ae 	bl	d5d58 <_Z16_fetch_usbserialv>
   d49fc:	4639      	mov	r1, r7
   d49fe:	f000 ffa9 	bl	d5954 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   d4a02:	f001 f9a9 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4a06:	4621      	mov	r1, r4
    #endif
}
   d4a08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(aHeaderValue);
   d4a0c:	f000 bfbb 	b.w	d5986 <_ZN5Print7printlnEPKc>
   d4a10:	000d6e5c 	.word	0x000d6e5c

000d4a14 <_ZN10HttpClient10sendHeaderEPKc>:
    Serial.println(aHeaderValue);
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName)
{
   d4a14:	b510      	push	{r4, lr}
   d4a16:	460c      	mov	r4, r1
    client.println(aHeaderName);
   d4a18:	f000 ffb5 	bl	d5986 <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.println(aHeaderName);
   d4a1c:	f001 f99c 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4a20:	4621      	mov	r1, r4
    #endif
}
   d4a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(aHeaderName);
   d4a26:	f000 bfae 	b.w	d5986 <_ZN5Print7printlnEPKc>

000d4a2a <_ZN5Print7printlnIiLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   d4a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a2c:	4605      	mov	r5, r0
   d4a2e:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d4a30:	4616      	mov	r6, r2
   d4a32:	b94a      	cbnz	r2, d4a48 <_ZN5Print7printlnIiLi0EEEjT_i+0x1e>
        return write(n);
   d4a34:	6803      	ldr	r3, [r0, #0]
   d4a36:	b2c9      	uxtb	r1, r1
   d4a38:	689b      	ldr	r3, [r3, #8]
   d4a3a:	4798      	blx	r3
   d4a3c:	4607      	mov	r7, r0
        n += println();
   d4a3e:	4628      	mov	r0, r5
   d4a40:	f000 ff95 	bl	d596e <_ZN5Print7printlnEv>
    }
   d4a44:	4438      	add	r0, r7
   d4a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d4a48:	2900      	cmp	r1, #0
   d4a4a:	da0c      	bge.n	d4a66 <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
   d4a4c:	2a0a      	cmp	r2, #10
   d4a4e:	d10a      	bne.n	d4a66 <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
            t = print('-');
   d4a50:	212d      	movs	r1, #45	; 0x2d
   d4a52:	f000 ff83 	bl	d595c <_ZN5Print5printEc>
            val = -n;
   d4a56:	4261      	negs	r1, r4
            t = print('-');
   d4a58:	4607      	mov	r7, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4a5a:	b2f2      	uxtb	r2, r6
   d4a5c:	4628      	mov	r0, r5
   d4a5e:	f000 ff9c 	bl	d599a <_ZN5Print11printNumberEmh>
   d4a62:	4407      	add	r7, r0
   d4a64:	e7eb      	b.n	d4a3e <_ZN5Print7printlnIiLi0EEEjT_i+0x14>
            val = n;
   d4a66:	4621      	mov	r1, r4
        size_t t = 0;
   d4a68:	2700      	movs	r7, #0
   d4a6a:	e7f6      	b.n	d4a5a <_ZN5Print7printlnIiLi0EEEjT_i+0x30>

000d4a6c <_ZN10HttpClient10sendHeaderEPKci>:
{
   d4a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(": ");
   d4a6e:	4f10      	ldr	r7, [pc, #64]	; (d4ab0 <_ZN10HttpClient10sendHeaderEPKci+0x44>)
{
   d4a70:	4605      	mov	r5, r0
   d4a72:	4614      	mov	r4, r2
   d4a74:	460e      	mov	r6, r1
    client.print(aHeaderName);
   d4a76:	f000 ff6d 	bl	d5954 <_ZN5Print5printEPKc>
    client.print(": ");
   d4a7a:	4639      	mov	r1, r7
   d4a7c:	4628      	mov	r0, r5
   d4a7e:	f000 ff69 	bl	d5954 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d4a82:	220a      	movs	r2, #10
   d4a84:	4621      	mov	r1, r4
   d4a86:	4628      	mov	r0, r5
   d4a88:	f7ff ffcf 	bl	d4a2a <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.print(aHeaderName);
   d4a8c:	f001 f964 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4a90:	4631      	mov	r1, r6
   d4a92:	f000 ff5f 	bl	d5954 <_ZN5Print5printEPKc>
    Serial.print(": ");
   d4a96:	f001 f95f 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4a9a:	4639      	mov	r1, r7
   d4a9c:	f000 ff5a 	bl	d5954 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   d4aa0:	f001 f95a 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4aa4:	220a      	movs	r2, #10
   d4aa6:	4621      	mov	r1, r4
   d4aa8:	f7ff ffbf 	bl	d4a2a <_ZN5Print7printlnIiLi0EEEjT_i>
}
   d4aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4aae:	bf00      	nop
   d4ab0:	000d6e5c 	.word	0x000d6e5c

000d4ab4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d4ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ab8:	460e      	mov	r6, r1
   d4aba:	b091      	sub	sp, #68	; 0x44
   d4abc:	461f      	mov	r7, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d4abe:	f04f 33ff 	mov.w	r3, #4294967295
   d4ac2:	6013      	str	r3, [r2, #0]
{
   d4ac4:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4ac6:	2100      	movs	r1, #0
   d4ac8:	4630      	mov	r0, r6
   d4aca:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   d4ace:	4691      	mov	r9, r2
   d4ad0:	f000 fea7 	bl	d5822 <_ZNK6String6equalsEPKc>
   d4ad4:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   d4ad8:	4603      	mov	r3, r0
   d4ada:	2800      	cmp	r0, #0
   d4adc:	d16e      	bne.n	d4bbc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x108>
	const char * c_str() const { return buffer; }
   d4ade:	f1be 0f00 	cmp.w	lr, #0
   d4ae2:	bf14      	ite	ne
   d4ae4:	4672      	movne	r2, lr
   d4ae6:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   d4ae8:	6831      	ldr	r1, [r6, #0]
   d4aea:	b292      	uxth	r2, r2
   d4aec:	4620      	mov	r0, r4
   d4aee:	f001 fcbb 	bl	d6468 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   d4af2:	1e05      	subs	r5, r0, #0
   d4af4:	bf18      	it	ne
   d4af6:	2501      	movne	r5, #1
    }

    #ifdef LOGGING
    if (connected) {
   d4af8:	2d00      	cmp	r5, #0
   d4afa:	d07e      	beq.n	d4bfa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x146>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4afc:	2100      	movs	r1, #0
   d4afe:	4630      	mov	r0, r6
   d4b00:	f000 fe8f 	bl	d5822 <_ZNK6String6equalsEPKc>
        if(aRequest.hostname!=NULL) {
   d4b04:	2800      	cmp	r0, #0
   d4b06:	d16c      	bne.n	d4be2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x12e>
            Serial.print("HttpClient>\tConnecting to: ");
   d4b08:	f001 f926 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4b0c:	49bb      	ldr	r1, [pc, #748]	; (d4dfc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x348>)
   d4b0e:	f000 ff21 	bl	d5954 <_ZN5Print5printEPKc>
            Serial.print(aRequest.hostname);
   d4b12:	f001 f921 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4b16:	6831      	ldr	r1, [r6, #0]
   d4b18:	f000 ff1c 	bl	d5954 <_ZN5Print5printEPKc>
        } else {
            Serial.print("HttpClient>\tConnecting to IP: ");
            Serial.print(aRequest.ip);
        }
        Serial.print(":");
   d4b1c:	f001 f91c 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4b20:	49b7      	ldr	r1, [pc, #732]	; (d4e00 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x34c>)
   d4b22:	f000 ff17 	bl	d5954 <_ZN5Print5printEPKc>
        Serial.println(aRequest.port);
   d4b26:	f001 f917 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4b2a:	220a      	movs	r2, #10
   d4b2c:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   d4b2e:	f7ff ff7c 	bl	d4a2a <_ZN5Print7printlnIiLi0EEEjT_i>
    //
    // Send HTTP Headers
    //

    // Send initial headers (only HTTP 1.0 is supported for now).
    client.print(aHttpMethod);
   d4b32:	4641      	mov	r1, r8
   d4b34:	4620      	mov	r0, r4
   d4b36:	f000 ff0d 	bl	d5954 <_ZN5Print5printEPKc>
    client.print(" ");
   d4b3a:	49b2      	ldr	r1, [pc, #712]	; (d4e04 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   d4b3c:	4620      	mov	r0, r4
   d4b3e:	f000 ff09 	bl	d5954 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   d4b42:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   d4b44:	4620      	mov	r0, r4
   d4b46:	f000 ff05 	bl	d5954 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   d4b4a:	49af      	ldr	r1, [pc, #700]	; (d4e08 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   d4b4c:	4620      	mov	r0, r4
   d4b4e:	f000 ff01 	bl	d5954 <_ZN5Print5printEPKc>

    #ifdef LOGGING
    Serial.println("HttpClient>\tStart of HTTP Request.");
   d4b52:	f001 f901 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4b56:	49ad      	ldr	r1, [pc, #692]	; (d4e0c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   d4b58:	f000 ff15 	bl	d5986 <_ZN5Print7printlnEPKc>
    Serial.print(aHttpMethod);
   d4b5c:	f001 f8fc 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4b60:	4641      	mov	r1, r8
   d4b62:	f000 fef7 	bl	d5954 <_ZN5Print5printEPKc>
    Serial.print(" ");
   d4b66:	f001 f8f7 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4b6a:	49a6      	ldr	r1, [pc, #664]	; (d4e04 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   d4b6c:	f000 fef2 	bl	d5954 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
   d4b70:	f001 f8f2 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4b74:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   d4b76:	f000 feed 	bl	d5954 <_ZN5Print5printEPKc>
    Serial.print(" HTTP/1.0\r\n");
   d4b7a:	f001 f8ed 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4b7e:	49a2      	ldr	r1, [pc, #648]	; (d4e08 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   d4b80:	f000 fee8 	bl	d5954 <_ZN5Print5printEPKc>
    #endif

    // Send General and Request Headers.
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   d4b84:	49a2      	ldr	r1, [pc, #648]	; (d4e10 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x35c>)
   d4b86:	4aa3      	ldr	r2, [pc, #652]	; (d4e14 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x360>)
   d4b88:	4620      	mov	r0, r4
   d4b8a:	f7ff ff21 	bl	d49d0 <_ZN10HttpClient10sendHeaderEPKcS1_>
   d4b8e:	2100      	movs	r1, #0
   d4b90:	4630      	mov	r0, r6
   d4b92:	f000 fe46 	bl	d5822 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   d4b96:	b920      	cbnz	r0, d4ba2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xee>
        sendHeader("HOST", aRequest.hostname.c_str());
   d4b98:	6832      	ldr	r2, [r6, #0]
   d4b9a:	499f      	ldr	r1, [pc, #636]	; (d4e18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x364>)
   d4b9c:	4620      	mov	r0, r4
   d4b9e:	f7ff ff17 	bl	d49d0 <_ZN10HttpClient10sendHeaderEPKcS1_>
    }

    //Send Entity Headers
    // TODO: Check the standard, currently sending Content-Length : 0 for empty
    // POST requests, and no content-length for other types.
    if (aRequest.body != NULL) {
   d4ba2:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   d4ba6:	2100      	movs	r1, #0
   d4ba8:	4650      	mov	r0, sl
   d4baa:	f000 fe3a 	bl	d5822 <_ZNK6String6equalsEPKc>
   d4bae:	bb78      	cbnz	r0, d4c10 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x15c>
        sendHeader("Content-Length", (aRequest.body).length());
   d4bb0:	6c72      	ldr	r2, [r6, #68]	; 0x44
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
        sendHeader("Content-Length", 0);
   d4bb2:	499a      	ldr	r1, [pc, #616]	; (d4e1c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x368>)
   d4bb4:	4620      	mov	r0, r4
   d4bb6:	f7ff ff59 	bl	d4a6c <_ZN10HttpClient10sendHeaderEPKci>
   d4bba:	e030      	b.n	d4c1e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4bbc:	4b98      	ldr	r3, [pc, #608]	; (d4e20 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x36c>)
   d4bbe:	930a      	str	r3, [sp, #40]	; 0x28
   d4bc0:	f106 0c14 	add.w	ip, r6, #20
   d4bc4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d4bc8:	ad0b      	add	r5, sp, #44	; 0x2c
   d4bca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4bcc:	f8dc 3000 	ldr.w	r3, [ip]
   d4bd0:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   d4bd2:	fa1f f28e 	uxth.w	r2, lr
   d4bd6:	2300      	movs	r3, #0
   d4bd8:	a90a      	add	r1, sp, #40	; 0x28
   d4bda:	4620      	mov	r0, r4
   d4bdc:	f001 fb11 	bl	d6202 <_ZN9TCPClient7connectE9IPAddresstm>
   d4be0:	e787      	b.n	d4af2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3e>
            Serial.print("HttpClient>\tConnecting to IP: ");
   d4be2:	f001 f8b9 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4be6:	498f      	ldr	r1, [pc, #572]	; (d4e24 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x370>)
   d4be8:	f000 feb4 	bl	d5954 <_ZN5Print5printEPKc>
            Serial.print(aRequest.ip);
   d4bec:	f001 f8b4 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4bf0:	f106 0110 	add.w	r1, r6, #16
   d4bf4:	f000 feb5 	bl	d5962 <_ZN5Print5printERK9Printable>
   d4bf8:	e790      	b.n	d4b1c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x68>
        Serial.println("HttpClient>\tConnection failed.");
   d4bfa:	f001 f8ad 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4bfe:	498a      	ldr	r1, [pc, #552]	; (d4e28 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x374>)
   d4c00:	f000 fec1 	bl	d5986 <_ZN5Print7printlnEPKc>
        client.stop();
   d4c04:	4620      	mov	r0, r4
   d4c06:	f001 fbd1 	bl	d63ac <_ZN9TCPClient4stopEv>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   d4c0a:	b011      	add	sp, #68	; 0x44
   d4c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   d4c10:	4986      	ldr	r1, [pc, #536]	; (d4e2c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x378>)
   d4c12:	4640      	mov	r0, r8
   d4c14:	f001 ffba 	bl	d6b8c <strcmp>
   d4c18:	4602      	mov	r2, r0
   d4c1a:	2800      	cmp	r0, #0
   d4c1c:	d0c9      	beq.n	d4bb2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfe>
    if (headers != NULL)
   d4c1e:	b15f      	cbz	r7, d4c38 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x184>
        while (headers[i].header != NULL)
   d4c20:	6839      	ldr	r1, [r7, #0]
   d4c22:	b149      	cbz	r1, d4c38 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x184>
            if (headers[i].value != NULL) {
   d4c24:	687a      	ldr	r2, [r7, #4]
                sendHeader(headers[i].header, headers[i].value);
   d4c26:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   d4c28:	b11a      	cbz	r2, d4c32 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17e>
                sendHeader(headers[i].header, headers[i].value);
   d4c2a:	f7ff fed1 	bl	d49d0 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   d4c2e:	3708      	adds	r7, #8
        while (headers[i].header != NULL)
   d4c30:	e7f6      	b.n	d4c20 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16c>
                sendHeader(headers[i].header);
   d4c32:	f7ff feef 	bl	d4a14 <_ZN10HttpClient10sendHeaderEPKc>
   d4c36:	e7fa      	b.n	d4c2e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17a>
    client.println();
   d4c38:	4620      	mov	r0, r4
   d4c3a:	f000 fe98 	bl	d596e <_ZN5Print7printlnEv>
    client.flush();
   d4c3e:	4620      	mov	r0, r4
   d4c40:	f001 f9d2 	bl	d5fe8 <_ZN9TCPClient5flushEv>
   d4c44:	2100      	movs	r1, #0
   d4c46:	4650      	mov	r0, sl
   d4c48:	f000 fdeb 	bl	d5822 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   d4c4c:	b940      	cbnz	r0, d4c60 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ac>
        client.println(aRequest.body);
   d4c4e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   d4c50:	4620      	mov	r0, r4
   d4c52:	f000 fe98 	bl	d5986 <_ZN5Print7printlnEPKc>
        Serial.println(aRequest.body);
   d4c56:	f001 f87f 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4c5a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   d4c5c:	f000 fe93 	bl	d5986 <_ZN5Print7printlnEPKc>
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   d4c60:	f001 f87a 	bl	d5d58 <_Z16_fetch_usbserialv>
    memset(&buffer[0], 0, sizeof(buffer));
   d4c64:	f104 0a1c 	add.w	sl, r4, #28
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   d4c68:	4971      	ldr	r1, [pc, #452]	; (d4e30 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x37c>)
   d4c6a:	f000 fe8c 	bl	d5986 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   d4c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4c72:	2100      	movs	r1, #0
   d4c74:	4650      	mov	r0, sl
   d4c76:	f001 ff5d 	bl	d6b34 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4c7a:	f000 f949 	bl	d4f10 <HAL_Timer_Get_Milli_Seconds>
   d4c7e:	9000      	str	r0, [sp, #0]
   d4c80:	f000 f946 	bl	d4f10 <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
   d4c84:	2700      	movs	r7, #0
   d4c86:	9001      	str	r0, [sp, #4]
        int bytes = client.available();
   d4c88:	4620      	mov	r0, r4
   d4c8a:	f001 fb35 	bl	d62f8 <_ZN9TCPClient9availableEv>
        if(bytes) {
   d4c8e:	4606      	mov	r6, r0
   d4c90:	b1b0      	cbz	r0, d4cc0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x20c>
            Serial.print("\r\nHttpClient>\tReceiving TCP transaction of ");
   d4c92:	f001 f861 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4c96:	4967      	ldr	r1, [pc, #412]	; (d4e34 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x380>)
   d4c98:	f000 fe5c 	bl	d5954 <_ZN5Print5printEPKc>
            Serial.print(bytes);
   d4c9c:	f001 f85c 	bl	d5d58 <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
   d4ca0:	2e00      	cmp	r6, #0
   d4ca2:	4683      	mov	fp, r0
   d4ca4:	da27      	bge.n	d4cf6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x242>
            t = print('-');
   d4ca6:	212d      	movs	r1, #45	; 0x2d
   d4ca8:	f000 fe58 	bl	d595c <_ZN5Print5printEc>
            val = -n;
   d4cac:	4271      	negs	r1, r6
        return printNumber(val, base) + t;
   d4cae:	220a      	movs	r2, #10
   d4cb0:	4658      	mov	r0, fp
   d4cb2:	f000 fe72 	bl	d599a <_ZN5Print11printNumberEmh>
            Serial.println(" bytes.");
   d4cb6:	f001 f84f 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4cba:	495f      	ldr	r1, [pc, #380]	; (d4e38 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x384>)
   d4cbc:	f000 fe63 	bl	d5986 <_ZN5Print7printlnEPKc>
    unsigned int bufferPosition = 0;
   d4cc0:	f04f 0b00 	mov.w	fp, #0
        while (client.available()) {
   d4cc4:	4620      	mov	r0, r4
   d4cc6:	f001 fb17 	bl	d62f8 <_ZN9TCPClient9availableEv>
   d4cca:	b338      	cbz	r0, d4d1c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x268>
            char c = client.read();
   d4ccc:	4620      	mov	r0, r4
   d4cce:	f001 fa4c 	bl	d616a <_ZN9TCPClient4readEv>
   d4cd2:	fa5f f880 	uxtb.w	r8, r0
            Serial.print(c);
   d4cd6:	f001 f83f 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4cda:	4641      	mov	r1, r8
   d4cdc:	f000 fe3e 	bl	d595c <_ZN5Print5printEc>
   d4ce0:	f000 f916 	bl	d4f10 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   d4ce4:	f240 33fe 	movw	r3, #1022	; 0x3fe
   d4ce8:	429f      	cmp	r7, r3
   d4cea:	9000      	str	r0, [sp, #0]
   d4cec:	d805      	bhi.n	d4cfa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x246>
                buffer[bufferPosition] = c;
   d4cee:	f80a 8007 	strb.w	r8, [sl, r7]
            bufferPosition++;
   d4cf2:	3701      	adds	r7, #1
        while (client.available()) {
   d4cf4:	e7e6      	b.n	d4cc4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x210>
            val = n;
   d4cf6:	4631      	mov	r1, r6
   d4cf8:	e7d9      	b.n	d4cae <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fa>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   d4cfa:	f240 33ff 	movw	r3, #1023	; 0x3ff
   d4cfe:	429f      	cmp	r7, r3
   d4d00:	d1f7      	bne.n	d4cf2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23e>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d4d02:	2300      	movs	r3, #0
   d4d04:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   d4d08:	4620      	mov	r0, r4
   d4d0a:	f001 fb4f 	bl	d63ac <_ZN9TCPClient4stopEv>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
   d4d0e:	f001 f823 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4d12:	494a      	ldr	r1, [pc, #296]	; (d4e3c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x388>)
   d4d14:	f000 fe37 	bl	d5986 <_ZN5Print7printlnEPKc>
                error = true;
   d4d18:	46ab      	mov	fp, r5
   d4d1a:	e7ea      	b.n	d4cf2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23e>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d4d1c:	19e3      	adds	r3, r4, r7
   d4d1e:	7718      	strb	r0, [r3, #28]
        if (bytes) {
   d4d20:	b126      	cbz	r6, d4d2c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x278>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
   d4d22:	f001 f819 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4d26:	4946      	ldr	r1, [pc, #280]	; (d4e40 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x38c>)
   d4d28:	f000 fe14 	bl	d5954 <_ZN5Print5printEPKc>
   d4d2c:	f000 f8f0 	bl	d4f10 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   d4d30:	9b00      	ldr	r3, [sp, #0]
   d4d32:	1ac6      	subs	r6, r0, r3
        if (!error && !timeout) {
   d4d34:	f1bb 0f00 	cmp.w	fp, #0
   d4d38:	d106      	bne.n	d4d48 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x294>
   d4d3a:	f241 3388 	movw	r3, #5000	; 0x1388
   d4d3e:	429e      	cmp	r6, r3
   d4d40:	d802      	bhi.n	d4d48 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x294>
            delay(200);
   d4d42:	20c8      	movs	r0, #200	; 0xc8
   d4d44:	f000 fe60 	bl	d5a08 <delay>
    } while (client.connected() && !timeout && !error);
   d4d48:	4620      	mov	r0, r4
   d4d4a:	f001 f94e 	bl	d5fea <_ZN9TCPClient9connectedEv>
   d4d4e:	f241 3388 	movw	r3, #5000	; 0x1388
   d4d52:	2800      	cmp	r0, #0
   d4d54:	d04a      	beq.n	d4dec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x338>
   d4d56:	429e      	cmp	r6, r3
   d4d58:	d84a      	bhi.n	d4df0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x33c>
   d4d5a:	f1bb 0f00 	cmp.w	fp, #0
   d4d5e:	d093      	beq.n	d4c88 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d4>
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
   d4d60:	f000 fffa 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4d64:	4937      	ldr	r1, [pc, #220]	; (d4e44 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x390>)
   d4d66:	f000 fdf5 	bl	d5954 <_ZN5Print5printEPKc>
    Serial.print(millis() - firstRead);
   d4d6a:	f000 fff5 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4d6e:	4605      	mov	r5, r0
   d4d70:	f000 f8ce 	bl	d4f10 <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   d4d74:	9b01      	ldr	r3, [sp, #4]
   d4d76:	220a      	movs	r2, #10
   d4d78:	1ac1      	subs	r1, r0, r3
   d4d7a:	4628      	mov	r0, r5
   d4d7c:	f000 fe0d 	bl	d599a <_ZN5Print11printNumberEmh>
    Serial.println("ms).");
   d4d80:	f000 ffea 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4d84:	4930      	ldr	r1, [pc, #192]	; (d4e48 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x394>)
   d4d86:	f000 fdfe 	bl	d5986 <_ZN5Print7printlnEPKc>
    client.stop();
   d4d8a:	4620      	mov	r0, r4
   d4d8c:	f001 fb0e 	bl	d63ac <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   d4d90:	4651      	mov	r1, sl
   d4d92:	a802      	add	r0, sp, #8
   d4d94:	f000 fcf8 	bl	d5788 <_ZN6StringC1EPKc>
    String statusCode = raw_response.substring(9,12);
   d4d98:	230c      	movs	r3, #12
   d4d9a:	2209      	movs	r2, #9
   d4d9c:	a902      	add	r1, sp, #8
   d4d9e:	a806      	add	r0, sp, #24
   d4da0:	f000 fd64 	bl	d586c <_ZNK6String9substringEjj>
    Serial.print("HttpClient>\tStatus Code: ");
   d4da4:	f000 ffd8 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4da8:	4928      	ldr	r1, [pc, #160]	; (d4e4c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x398>)
   d4daa:	f000 fdd3 	bl	d5954 <_ZN5Print5printEPKc>
    Serial.println(statusCode);
   d4dae:	f000 ffd3 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4db2:	9906      	ldr	r1, [sp, #24]
   d4db4:	f000 fde7 	bl	d5986 <_ZN5Print7printlnEPKc>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   d4db8:	4925      	ldr	r1, [pc, #148]	; (d4e50 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x39c>)
   d4dba:	a80a      	add	r0, sp, #40	; 0x28
   d4dbc:	f000 fce4 	bl	d5788 <_ZN6StringC1EPKc>
   d4dc0:	a90a      	add	r1, sp, #40	; 0x28
   d4dc2:	a802      	add	r0, sp, #8
   d4dc4:	f000 fd4e 	bl	d5864 <_ZNK6String7indexOfERKS_>
   d4dc8:	4604      	mov	r4, r0
   d4dca:	a80a      	add	r0, sp, #40	; 0x28
   d4dcc:	f000 fc91 	bl	d56f2 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   d4dd0:	1c63      	adds	r3, r4, #1
   d4dd2:	d143      	bne.n	d4e5c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a8>
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
   d4dd4:	f000 ffc0 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4dd8:	491e      	ldr	r1, [pc, #120]	; (d4e54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a0>)
   d4dda:	f000 fdd4 	bl	d5986 <_ZN5Print7printlnEPKc>
    String statusCode = raw_response.substring(9,12);
   d4dde:	a806      	add	r0, sp, #24
   d4de0:	f000 fc87 	bl	d56f2 <_ZN6StringD1Ev>
    String raw_response(buffer);
   d4de4:	a802      	add	r0, sp, #8
   d4de6:	f000 fc84 	bl	d56f2 <_ZN6StringD1Ev>
   d4dea:	e70e      	b.n	d4c0a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x156>
    if (timeout) {
   d4dec:	429e      	cmp	r6, r3
   d4dee:	d9b7      	bls.n	d4d60 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2ac>
        Serial.println("\r\nHttpClient>\tError: Timeout while reading response.");
   d4df0:	f000 ffb2 	bl	d5d58 <_Z16_fetch_usbserialv>
   d4df4:	4918      	ldr	r1, [pc, #96]	; (d4e58 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a4>)
   d4df6:	f000 fdc6 	bl	d5986 <_ZN5Print7printlnEPKc>
   d4dfa:	e7b1      	b.n	d4d60 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2ac>
   d4dfc:	000d6e24 	.word	0x000d6e24
   d4e00:	000d6e5f 	.word	0x000d6e5f
   d4e04:	000d6e5d 	.word	0x000d6e5d
   d4e08:	000d6e61 	.word	0x000d6e61
   d4e0c:	000d6e6d 	.word	0x000d6e6d
   d4e10:	000d6e96 	.word	0x000d6e96
   d4e14:	000d6e90 	.word	0x000d6e90
   d4e18:	000d6ec0 	.word	0x000d6ec0
   d4e1c:	000d6ec5 	.word	0x000d6ec5
   d4e20:	000d70d8 	.word	0x000d70d8
   d4e24:	000d6e40 	.word	0x000d6e40
   d4e28:	000d6ea1 	.word	0x000d6ea1
   d4e2c:	000d6d9f 	.word	0x000d6d9f
   d4e30:	000d6ed4 	.word	0x000d6ed4
   d4e34:	000d6ef5 	.word	0x000d6ef5
   d4e38:	000d6f21 	.word	0x000d6f21
   d4e3c:	000d6f29 	.word	0x000d6f29
   d4e40:	000d6f5e 	.word	0x000d6f5e
   d4e44:	000d6fb9 	.word	0x000d6fb9
   d4e48:	000d6fde 	.word	0x000d6fde
   d4e4c:	000d6fe3 	.word	0x000d6fe3
   d4e50:	000d6ffd 	.word	0x000d6ffd
   d4e54:	000d7002 	.word	0x000d7002
   d4e58:	000d6f84 	.word	0x000d6f84
    aResponse.body = "";
   d4e5c:	f109 0504 	add.w	r5, r9, #4
   d4e60:	490a      	ldr	r1, [pc, #40]	; (d4e8c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3d8>)
   d4e62:	4628      	mov	r0, r5
   d4e64:	f000 fca4 	bl	d57b0 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   d4e68:	1d22      	adds	r2, r4, #4
   d4e6a:	a902      	add	r1, sp, #8
   d4e6c:	a80a      	add	r0, sp, #40	; 0x28
   d4e6e:	f000 fd1d 	bl	d58ac <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4e72:	a90a      	add	r1, sp, #40	; 0x28
   d4e74:	4628      	mov	r0, r5
   d4e76:	f000 fcc4 	bl	d5802 <_ZN6String6concatERKS_>
   d4e7a:	a80a      	add	r0, sp, #40	; 0x28
   d4e7c:	f000 fc39 	bl	d56f2 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   d4e80:	9806      	ldr	r0, [sp, #24]
   d4e82:	f001 fe37 	bl	d6af4 <atoi>
   d4e86:	f8c9 0000 	str.w	r0, [r9]
   d4e8a:	e7a8      	b.n	d4dde <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x32a>
   d4e8c:	000d7001 	.word	0x000d7001

000d4e90 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4e90:	b508      	push	{r3, lr}
   d4e92:	4b02      	ldr	r3, [pc, #8]	; (d4e9c <netdb_freeaddrinfo+0xc>)
   d4e94:	681b      	ldr	r3, [r3, #0]
   d4e96:	689b      	ldr	r3, [r3, #8]
   d4e98:	9301      	str	r3, [sp, #4]
   d4e9a:	bd08      	pop	{r3, pc}
   d4e9c:	00030268 	.word	0x00030268

000d4ea0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4ea0:	b508      	push	{r3, lr}
   d4ea2:	4b02      	ldr	r3, [pc, #8]	; (d4eac <netdb_getaddrinfo+0xc>)
   d4ea4:	681b      	ldr	r3, [r3, #0]
   d4ea6:	68db      	ldr	r3, [r3, #12]
   d4ea8:	9301      	str	r3, [sp, #4]
   d4eaa:	bd08      	pop	{r3, pc}
   d4eac:	00030268 	.word	0x00030268

000d4eb0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4eb0:	b508      	push	{r3, lr}
   d4eb2:	4b02      	ldr	r3, [pc, #8]	; (d4ebc <HAL_Pin_Mode+0xc>)
   d4eb4:	681b      	ldr	r3, [r3, #0]
   d4eb6:	689b      	ldr	r3, [r3, #8]
   d4eb8:	9301      	str	r3, [sp, #4]
   d4eba:	bd08      	pop	{r3, pc}
   d4ebc:	0003022c 	.word	0x0003022c

000d4ec0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4ec0:	b508      	push	{r3, lr}
   d4ec2:	4b02      	ldr	r3, [pc, #8]	; (d4ecc <HAL_Get_Pin_Mode+0xc>)
   d4ec4:	681b      	ldr	r3, [r3, #0]
   d4ec6:	68db      	ldr	r3, [r3, #12]
   d4ec8:	9301      	str	r3, [sp, #4]
   d4eca:	bd08      	pop	{r3, pc}
   d4ecc:	0003022c 	.word	0x0003022c

000d4ed0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4ed0:	b508      	push	{r3, lr}
   d4ed2:	4b02      	ldr	r3, [pc, #8]	; (d4edc <HAL_GPIO_Write+0xc>)
   d4ed4:	681b      	ldr	r3, [r3, #0]
   d4ed6:	691b      	ldr	r3, [r3, #16]
   d4ed8:	9301      	str	r3, [sp, #4]
   d4eda:	bd08      	pop	{r3, pc}
   d4edc:	0003022c 	.word	0x0003022c

000d4ee0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4ee0:	b508      	push	{r3, lr}
   d4ee2:	4b02      	ldr	r3, [pc, #8]	; (d4eec <HAL_GPIO_Read+0xc>)
   d4ee4:	681b      	ldr	r3, [r3, #0]
   d4ee6:	695b      	ldr	r3, [r3, #20]
   d4ee8:	9301      	str	r3, [sp, #4]
   d4eea:	bd08      	pop	{r3, pc}
   d4eec:	0003022c 	.word	0x0003022c

000d4ef0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4ef0:	b508      	push	{r3, lr}
   d4ef2:	4b02      	ldr	r3, [pc, #8]	; (d4efc <if_index_to_name+0xc>)
   d4ef4:	681b      	ldr	r3, [r3, #0]
   d4ef6:	695b      	ldr	r3, [r3, #20]
   d4ef8:	9301      	str	r3, [sp, #4]
   d4efa:	bd08      	pop	{r3, pc}
   d4efc:	0003026c 	.word	0x0003026c

000d4f00 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4f00:	b508      	push	{r3, lr}
   d4f02:	4b02      	ldr	r3, [pc, #8]	; (d4f0c <HAL_RNG_GetRandomNumber+0xc>)
   d4f04:	681b      	ldr	r3, [r3, #0]
   d4f06:	685b      	ldr	r3, [r3, #4]
   d4f08:	9301      	str	r3, [sp, #4]
   d4f0a:	bd08      	pop	{r3, pc}
   d4f0c:	00030218 	.word	0x00030218

000d4f10 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4f10:	b508      	push	{r3, lr}
   d4f12:	4b02      	ldr	r3, [pc, #8]	; (d4f1c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4f14:	681b      	ldr	r3, [r3, #0]
   d4f16:	695b      	ldr	r3, [r3, #20]
   d4f18:	9301      	str	r3, [sp, #4]
   d4f1a:	bd08      	pop	{r3, pc}
   d4f1c:	00030218 	.word	0x00030218

000d4f20 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4f20:	b508      	push	{r3, lr}
   d4f22:	4b02      	ldr	r3, [pc, #8]	; (d4f2c <os_mutex_recursive_create+0xc>)
   d4f24:	681b      	ldr	r3, [r3, #0]
   d4f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f28:	9301      	str	r3, [sp, #4]
   d4f2a:	bd08      	pop	{r3, pc}
   d4f2c:	00030248 	.word	0x00030248

000d4f30 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4f30:	b508      	push	{r3, lr}
   d4f32:	4b02      	ldr	r3, [pc, #8]	; (d4f3c <os_mutex_recursive_destroy+0xc>)
   d4f34:	681b      	ldr	r3, [r3, #0]
   d4f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4f38:	9301      	str	r3, [sp, #4]
   d4f3a:	bd08      	pop	{r3, pc}
   d4f3c:	00030248 	.word	0x00030248

000d4f40 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4f40:	b508      	push	{r3, lr}
   d4f42:	4b02      	ldr	r3, [pc, #8]	; (d4f4c <inet_inet_ntop+0xc>)
   d4f44:	681b      	ldr	r3, [r3, #0]
   d4f46:	695b      	ldr	r3, [r3, #20]
   d4f48:	9301      	str	r3, [sp, #4]
   d4f4a:	bd08      	pop	{r3, pc}
   d4f4c:	00030264 	.word	0x00030264

000d4f50 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4f50:	b508      	push	{r3, lr}
   d4f52:	4b02      	ldr	r3, [pc, #8]	; (d4f5c <inet_htonl+0xc>)
   d4f54:	681b      	ldr	r3, [r3, #0]
   d4f56:	6a1b      	ldr	r3, [r3, #32]
   d4f58:	9301      	str	r3, [sp, #4]
   d4f5a:	bd08      	pop	{r3, pc}
   d4f5c:	00030264 	.word	0x00030264

000d4f60 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4f60:	b508      	push	{r3, lr}
   d4f62:	4b02      	ldr	r3, [pc, #8]	; (d4f6c <inet_htons+0xc>)
   d4f64:	681b      	ldr	r3, [r3, #0]
   d4f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f68:	9301      	str	r3, [sp, #4]
   d4f6a:	bd08      	pop	{r3, pc}
   d4f6c:	00030264 	.word	0x00030264

000d4f70 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4f70:	b508      	push	{r3, lr}
   d4f72:	4b02      	ldr	r3, [pc, #8]	; (d4f7c <hal_usart_init+0xc>)
   d4f74:	681b      	ldr	r3, [r3, #0]
   d4f76:	681b      	ldr	r3, [r3, #0]
   d4f78:	9301      	str	r3, [sp, #4]
   d4f7a:	bd08      	pop	{r3, pc}
   d4f7c:	0003023c 	.word	0x0003023c

000d4f80 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4f80:	b508      	push	{r3, lr}
   d4f82:	4b02      	ldr	r3, [pc, #8]	; (d4f8c <hal_usart_write+0xc>)
   d4f84:	681b      	ldr	r3, [r3, #0]
   d4f86:	68db      	ldr	r3, [r3, #12]
   d4f88:	9301      	str	r3, [sp, #4]
   d4f8a:	bd08      	pop	{r3, pc}
   d4f8c:	0003023c 	.word	0x0003023c

000d4f90 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4f90:	b508      	push	{r3, lr}
   d4f92:	4b02      	ldr	r3, [pc, #8]	; (d4f9c <hal_usart_available+0xc>)
   d4f94:	681b      	ldr	r3, [r3, #0]
   d4f96:	691b      	ldr	r3, [r3, #16]
   d4f98:	9301      	str	r3, [sp, #4]
   d4f9a:	bd08      	pop	{r3, pc}
   d4f9c:	0003023c 	.word	0x0003023c

000d4fa0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4fa0:	b508      	push	{r3, lr}
   d4fa2:	4b02      	ldr	r3, [pc, #8]	; (d4fac <hal_usart_read+0xc>)
   d4fa4:	681b      	ldr	r3, [r3, #0]
   d4fa6:	695b      	ldr	r3, [r3, #20]
   d4fa8:	9301      	str	r3, [sp, #4]
   d4faa:	bd08      	pop	{r3, pc}
   d4fac:	0003023c 	.word	0x0003023c

000d4fb0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4fb0:	b508      	push	{r3, lr}
   d4fb2:	4b02      	ldr	r3, [pc, #8]	; (d4fbc <hal_usart_peek+0xc>)
   d4fb4:	681b      	ldr	r3, [r3, #0]
   d4fb6:	699b      	ldr	r3, [r3, #24]
   d4fb8:	9301      	str	r3, [sp, #4]
   d4fba:	bd08      	pop	{r3, pc}
   d4fbc:	0003023c 	.word	0x0003023c

000d4fc0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4fc0:	b508      	push	{r3, lr}
   d4fc2:	4b02      	ldr	r3, [pc, #8]	; (d4fcc <hal_usart_flush+0xc>)
   d4fc4:	681b      	ldr	r3, [r3, #0]
   d4fc6:	69db      	ldr	r3, [r3, #28]
   d4fc8:	9301      	str	r3, [sp, #4]
   d4fca:	bd08      	pop	{r3, pc}
   d4fcc:	0003023c 	.word	0x0003023c

000d4fd0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4fd0:	b508      	push	{r3, lr}
   d4fd2:	4b02      	ldr	r3, [pc, #8]	; (d4fdc <hal_usart_is_enabled+0xc>)
   d4fd4:	681b      	ldr	r3, [r3, #0]
   d4fd6:	6a1b      	ldr	r3, [r3, #32]
   d4fd8:	9301      	str	r3, [sp, #4]
   d4fda:	bd08      	pop	{r3, pc}
   d4fdc:	0003023c 	.word	0x0003023c

000d4fe0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4fe0:	b508      	push	{r3, lr}
   d4fe2:	4b02      	ldr	r3, [pc, #8]	; (d4fec <hal_usart_available_data_for_write+0xc>)
   d4fe4:	681b      	ldr	r3, [r3, #0]
   d4fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4fe8:	9301      	str	r3, [sp, #4]
   d4fea:	bd08      	pop	{r3, pc}
   d4fec:	0003023c 	.word	0x0003023c

000d4ff0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d4ff0:	b508      	push	{r3, lr}
   d4ff2:	4b02      	ldr	r3, [pc, #8]	; (d4ffc <hal_i2c_begin+0xc>)
   d4ff4:	681b      	ldr	r3, [r3, #0]
   d4ff6:	68db      	ldr	r3, [r3, #12]
   d4ff8:	9301      	str	r3, [sp, #4]
   d4ffa:	bd08      	pop	{r3, pc}
   d4ffc:	00030228 	.word	0x00030228

000d5000 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5000:	b508      	push	{r3, lr}
   d5002:	4b02      	ldr	r3, [pc, #8]	; (d500c <hal_i2c_begin_transmission+0xc>)
   d5004:	681b      	ldr	r3, [r3, #0]
   d5006:	699b      	ldr	r3, [r3, #24]
   d5008:	9301      	str	r3, [sp, #4]
   d500a:	bd08      	pop	{r3, pc}
   d500c:	00030228 	.word	0x00030228

000d5010 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5010:	b508      	push	{r3, lr}
   d5012:	4b02      	ldr	r3, [pc, #8]	; (d501c <hal_i2c_end_transmission+0xc>)
   d5014:	681b      	ldr	r3, [r3, #0]
   d5016:	69db      	ldr	r3, [r3, #28]
   d5018:	9301      	str	r3, [sp, #4]
   d501a:	bd08      	pop	{r3, pc}
   d501c:	00030228 	.word	0x00030228

000d5020 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5020:	b508      	push	{r3, lr}
   d5022:	4b02      	ldr	r3, [pc, #8]	; (d502c <hal_i2c_write+0xc>)
   d5024:	681b      	ldr	r3, [r3, #0]
   d5026:	6a1b      	ldr	r3, [r3, #32]
   d5028:	9301      	str	r3, [sp, #4]
   d502a:	bd08      	pop	{r3, pc}
   d502c:	00030228 	.word	0x00030228

000d5030 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5030:	b508      	push	{r3, lr}
   d5032:	4b02      	ldr	r3, [pc, #8]	; (d503c <hal_i2c_available+0xc>)
   d5034:	681b      	ldr	r3, [r3, #0]
   d5036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5038:	9301      	str	r3, [sp, #4]
   d503a:	bd08      	pop	{r3, pc}
   d503c:	00030228 	.word	0x00030228

000d5040 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5040:	b508      	push	{r3, lr}
   d5042:	4b02      	ldr	r3, [pc, #8]	; (d504c <hal_i2c_read+0xc>)
   d5044:	681b      	ldr	r3, [r3, #0]
   d5046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5048:	9301      	str	r3, [sp, #4]
   d504a:	bd08      	pop	{r3, pc}
   d504c:	00030228 	.word	0x00030228

000d5050 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5050:	b508      	push	{r3, lr}
   d5052:	4b02      	ldr	r3, [pc, #8]	; (d505c <hal_i2c_peek+0xc>)
   d5054:	681b      	ldr	r3, [r3, #0]
   d5056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5058:	9301      	str	r3, [sp, #4]
   d505a:	bd08      	pop	{r3, pc}
   d505c:	00030228 	.word	0x00030228

000d5060 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5060:	b508      	push	{r3, lr}
   d5062:	4b02      	ldr	r3, [pc, #8]	; (d506c <hal_i2c_flush+0xc>)
   d5064:	681b      	ldr	r3, [r3, #0]
   d5066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5068:	9301      	str	r3, [sp, #4]
   d506a:	bd08      	pop	{r3, pc}
   d506c:	00030228 	.word	0x00030228

000d5070 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5070:	b508      	push	{r3, lr}
   d5072:	4b02      	ldr	r3, [pc, #8]	; (d507c <hal_i2c_is_enabled+0xc>)
   d5074:	681b      	ldr	r3, [r3, #0]
   d5076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5078:	9301      	str	r3, [sp, #4]
   d507a:	bd08      	pop	{r3, pc}
   d507c:	00030228 	.word	0x00030228

000d5080 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5080:	b508      	push	{r3, lr}
   d5082:	4b02      	ldr	r3, [pc, #8]	; (d508c <hal_i2c_init+0xc>)
   d5084:	681b      	ldr	r3, [r3, #0]
   d5086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5088:	9301      	str	r3, [sp, #4]
   d508a:	bd08      	pop	{r3, pc}
   d508c:	00030228 	.word	0x00030228

000d5090 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5090:	b508      	push	{r3, lr}
   d5092:	4b02      	ldr	r3, [pc, #8]	; (d509c <hal_i2c_request_ex+0xc>)
   d5094:	681b      	ldr	r3, [r3, #0]
   d5096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5098:	9301      	str	r3, [sp, #4]
   d509a:	bd08      	pop	{r3, pc}
   d509c:	00030228 	.word	0x00030228

000d50a0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d50a0:	b508      	push	{r3, lr}
   d50a2:	4b02      	ldr	r3, [pc, #8]	; (d50ac <sock_setsockopt+0xc>)
   d50a4:	681b      	ldr	r3, [r3, #0]
   d50a6:	699b      	ldr	r3, [r3, #24]
   d50a8:	9301      	str	r3, [sp, #4]
   d50aa:	bd08      	pop	{r3, pc}
   d50ac:	00030238 	.word	0x00030238

000d50b0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d50b0:	b508      	push	{r3, lr}
   d50b2:	4b02      	ldr	r3, [pc, #8]	; (d50bc <sock_close+0xc>)
   d50b4:	681b      	ldr	r3, [r3, #0]
   d50b6:	69db      	ldr	r3, [r3, #28]
   d50b8:	9301      	str	r3, [sp, #4]
   d50ba:	bd08      	pop	{r3, pc}
   d50bc:	00030238 	.word	0x00030238

000d50c0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d50c0:	b508      	push	{r3, lr}
   d50c2:	4b02      	ldr	r3, [pc, #8]	; (d50cc <sock_connect+0xc>)
   d50c4:	681b      	ldr	r3, [r3, #0]
   d50c6:	6a1b      	ldr	r3, [r3, #32]
   d50c8:	9301      	str	r3, [sp, #4]
   d50ca:	bd08      	pop	{r3, pc}
   d50cc:	00030238 	.word	0x00030238

000d50d0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d50d0:	b508      	push	{r3, lr}
   d50d2:	4b02      	ldr	r3, [pc, #8]	; (d50dc <sock_recv+0xc>)
   d50d4:	681b      	ldr	r3, [r3, #0]
   d50d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d50d8:	9301      	str	r3, [sp, #4]
   d50da:	bd08      	pop	{r3, pc}
   d50dc:	00030238 	.word	0x00030238

000d50e0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d50e0:	b508      	push	{r3, lr}
   d50e2:	4b02      	ldr	r3, [pc, #8]	; (d50ec <sock_send+0xc>)
   d50e4:	681b      	ldr	r3, [r3, #0]
   d50e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d50e8:	9301      	str	r3, [sp, #4]
   d50ea:	bd08      	pop	{r3, pc}
   d50ec:	00030238 	.word	0x00030238

000d50f0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d50f0:	b508      	push	{r3, lr}
   d50f2:	4b02      	ldr	r3, [pc, #8]	; (d50fc <sock_socket+0xc>)
   d50f4:	681b      	ldr	r3, [r3, #0]
   d50f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d50f8:	9301      	str	r3, [sp, #4]
   d50fa:	bd08      	pop	{r3, pc}
   d50fc:	00030238 	.word	0x00030238

000d5100 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5100:	b508      	push	{r3, lr}
   d5102:	4b02      	ldr	r3, [pc, #8]	; (d510c <hal_spi_begin+0xc>)
   d5104:	681b      	ldr	r3, [r3, #0]
   d5106:	681b      	ldr	r3, [r3, #0]
   d5108:	9301      	str	r3, [sp, #4]
   d510a:	bd08      	pop	{r3, pc}
   d510c:	00030230 	.word	0x00030230

000d5110 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d5110:	b508      	push	{r3, lr}
   d5112:	4b02      	ldr	r3, [pc, #8]	; (d511c <hal_spi_set_bit_order+0xc>)
   d5114:	681b      	ldr	r3, [r3, #0]
   d5116:	689b      	ldr	r3, [r3, #8]
   d5118:	9301      	str	r3, [sp, #4]
   d511a:	bd08      	pop	{r3, pc}
   d511c:	00030230 	.word	0x00030230

000d5120 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d5120:	b508      	push	{r3, lr}
   d5122:	4b02      	ldr	r3, [pc, #8]	; (d512c <hal_spi_set_data_mode+0xc>)
   d5124:	681b      	ldr	r3, [r3, #0]
   d5126:	68db      	ldr	r3, [r3, #12]
   d5128:	9301      	str	r3, [sp, #4]
   d512a:	bd08      	pop	{r3, pc}
   d512c:	00030230 	.word	0x00030230

000d5130 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d5130:	b508      	push	{r3, lr}
   d5132:	4b02      	ldr	r3, [pc, #8]	; (d513c <hal_spi_set_clock_divider+0xc>)
   d5134:	681b      	ldr	r3, [r3, #0]
   d5136:	691b      	ldr	r3, [r3, #16]
   d5138:	9301      	str	r3, [sp, #4]
   d513a:	bd08      	pop	{r3, pc}
   d513c:	00030230 	.word	0x00030230

000d5140 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5140:	b508      	push	{r3, lr}
   d5142:	4b02      	ldr	r3, [pc, #8]	; (d514c <hal_spi_transfer+0xc>)
   d5144:	681b      	ldr	r3, [r3, #0]
   d5146:	695b      	ldr	r3, [r3, #20]
   d5148:	9301      	str	r3, [sp, #4]
   d514a:	bd08      	pop	{r3, pc}
   d514c:	00030230 	.word	0x00030230

000d5150 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5150:	b508      	push	{r3, lr}
   d5152:	4b02      	ldr	r3, [pc, #8]	; (d515c <hal_spi_init+0xc>)
   d5154:	681b      	ldr	r3, [r3, #0]
   d5156:	69db      	ldr	r3, [r3, #28]
   d5158:	9301      	str	r3, [sp, #4]
   d515a:	bd08      	pop	{r3, pc}
   d515c:	00030230 	.word	0x00030230

000d5160 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5160:	b508      	push	{r3, lr}
   d5162:	4b02      	ldr	r3, [pc, #8]	; (d516c <hal_spi_is_enabled+0xc>)
   d5164:	681b      	ldr	r3, [r3, #0]
   d5166:	6a1b      	ldr	r3, [r3, #32]
   d5168:	9301      	str	r3, [sp, #4]
   d516a:	bd08      	pop	{r3, pc}
   d516c:	00030230 	.word	0x00030230

000d5170 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5170:	b508      	push	{r3, lr}
   d5172:	4b02      	ldr	r3, [pc, #8]	; (d517c <hal_spi_info+0xc>)
   d5174:	681b      	ldr	r3, [r3, #0]
   d5176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5178:	9301      	str	r3, [sp, #4]
   d517a:	bd08      	pop	{r3, pc}
   d517c:	00030230 	.word	0x00030230

000d5180 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5180:	b508      	push	{r3, lr}
   d5182:	4b02      	ldr	r3, [pc, #8]	; (d518c <hal_spi_acquire+0xc>)
   d5184:	681b      	ldr	r3, [r3, #0]
   d5186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5188:	9301      	str	r3, [sp, #4]
   d518a:	bd08      	pop	{r3, pc}
   d518c:	00030230 	.word	0x00030230

000d5190 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5190:	b508      	push	{r3, lr}
   d5192:	4b02      	ldr	r3, [pc, #8]	; (d519c <hal_spi_release+0xc>)
   d5194:	681b      	ldr	r3, [r3, #0]
   d5196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5198:	9301      	str	r3, [sp, #4]
   d519a:	bd08      	pop	{r3, pc}
   d519c:	00030230 	.word	0x00030230

000d51a0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d51a0:	b508      	push	{r3, lr}
   d51a2:	4b02      	ldr	r3, [pc, #8]	; (d51ac <HAL_USB_USART_Init+0xc>)
   d51a4:	681b      	ldr	r3, [r3, #0]
   d51a6:	681b      	ldr	r3, [r3, #0]
   d51a8:	9301      	str	r3, [sp, #4]
   d51aa:	bd08      	pop	{r3, pc}
   d51ac:	0003024c 	.word	0x0003024c

000d51b0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d51b0:	b508      	push	{r3, lr}
   d51b2:	4b02      	ldr	r3, [pc, #8]	; (d51bc <HAL_USB_USART_Begin+0xc>)
   d51b4:	681b      	ldr	r3, [r3, #0]
   d51b6:	685b      	ldr	r3, [r3, #4]
   d51b8:	9301      	str	r3, [sp, #4]
   d51ba:	bd08      	pop	{r3, pc}
   d51bc:	0003024c 	.word	0x0003024c

000d51c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d51c0:	b508      	push	{r3, lr}
   d51c2:	4b02      	ldr	r3, [pc, #8]	; (d51cc <HAL_USB_USART_Available_Data+0xc>)
   d51c4:	681b      	ldr	r3, [r3, #0]
   d51c6:	691b      	ldr	r3, [r3, #16]
   d51c8:	9301      	str	r3, [sp, #4]
   d51ca:	bd08      	pop	{r3, pc}
   d51cc:	0003024c 	.word	0x0003024c

000d51d0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d51d0:	b508      	push	{r3, lr}
   d51d2:	4b02      	ldr	r3, [pc, #8]	; (d51dc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d51d4:	681b      	ldr	r3, [r3, #0]
   d51d6:	695b      	ldr	r3, [r3, #20]
   d51d8:	9301      	str	r3, [sp, #4]
   d51da:	bd08      	pop	{r3, pc}
   d51dc:	0003024c 	.word	0x0003024c

000d51e0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d51e0:	b508      	push	{r3, lr}
   d51e2:	4b02      	ldr	r3, [pc, #8]	; (d51ec <HAL_USB_USART_Receive_Data+0xc>)
   d51e4:	681b      	ldr	r3, [r3, #0]
   d51e6:	699b      	ldr	r3, [r3, #24]
   d51e8:	9301      	str	r3, [sp, #4]
   d51ea:	bd08      	pop	{r3, pc}
   d51ec:	0003024c 	.word	0x0003024c

000d51f0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d51f0:	b508      	push	{r3, lr}
   d51f2:	4b02      	ldr	r3, [pc, #8]	; (d51fc <HAL_USB_USART_Send_Data+0xc>)
   d51f4:	681b      	ldr	r3, [r3, #0]
   d51f6:	69db      	ldr	r3, [r3, #28]
   d51f8:	9301      	str	r3, [sp, #4]
   d51fa:	bd08      	pop	{r3, pc}
   d51fc:	0003024c 	.word	0x0003024c

000d5200 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5200:	b508      	push	{r3, lr}
   d5202:	4b02      	ldr	r3, [pc, #8]	; (d520c <HAL_USB_USART_Flush_Data+0xc>)
   d5204:	681b      	ldr	r3, [r3, #0]
   d5206:	6a1b      	ldr	r3, [r3, #32]
   d5208:	9301      	str	r3, [sp, #4]
   d520a:	bd08      	pop	{r3, pc}
   d520c:	0003024c 	.word	0x0003024c

000d5210 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5210:	b508      	push	{r3, lr}
   d5212:	4b02      	ldr	r3, [pc, #8]	; (d521c <log_message+0xc>)
   d5214:	681b      	ldr	r3, [r3, #0]
   d5216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5218:	9301      	str	r3, [sp, #4]
   d521a:	bd08      	pop	{r3, pc}
   d521c:	00030260 	.word	0x00030260

000d5220 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5220:	b508      	push	{r3, lr}
   d5222:	4b02      	ldr	r3, [pc, #8]	; (d522c <set_system_mode+0xc>)
   d5224:	681b      	ldr	r3, [r3, #0]
   d5226:	685b      	ldr	r3, [r3, #4]
   d5228:	9301      	str	r3, [sp, #4]
   d522a:	bd08      	pop	{r3, pc}
   d522c:	00030220 	.word	0x00030220

000d5230 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5230:	b508      	push	{r3, lr}
   d5232:	4b02      	ldr	r3, [pc, #8]	; (d523c <system_delay_ms+0xc>)
   d5234:	681b      	ldr	r3, [r3, #0]
   d5236:	695b      	ldr	r3, [r3, #20]
   d5238:	9301      	str	r3, [sp, #4]
   d523a:	bd08      	pop	{r3, pc}
   d523c:	00030220 	.word	0x00030220

000d5240 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5240:	b508      	push	{r3, lr}
   d5242:	4b03      	ldr	r3, [pc, #12]	; (d5250 <system_ctrl_set_app_request_handler+0x10>)
   d5244:	681b      	ldr	r3, [r3, #0]
   d5246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d524a:	9301      	str	r3, [sp, #4]
   d524c:	bd08      	pop	{r3, pc}
   d524e:	0000      	.short	0x0000
   d5250:	00030220 	.word	0x00030220

000d5254 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5254:	b508      	push	{r3, lr}
   d5256:	4b03      	ldr	r3, [pc, #12]	; (d5264 <system_ctrl_set_result+0x10>)
   d5258:	681b      	ldr	r3, [r3, #0]
   d525a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d525e:	9301      	str	r3, [sp, #4]
   d5260:	bd08      	pop	{r3, pc}
   d5262:	0000      	.short	0x0000
   d5264:	00030220 	.word	0x00030220

000d5268 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d5268:	b508      	push	{r3, lr}
   d526a:	4b03      	ldr	r3, [pc, #12]	; (d5278 <system_sleep_ext+0x10>)
   d526c:	681b      	ldr	r3, [r3, #0]
   d526e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d5272:	9301      	str	r3, [sp, #4]
   d5274:	bd08      	pop	{r3, pc}
   d5276:	0000      	.short	0x0000
   d5278:	00030220 	.word	0x00030220

000d527c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d527c:	b508      	push	{r3, lr}
   d527e:	4b02      	ldr	r3, [pc, #8]	; (d5288 <network_connect+0xc>)
   d5280:	681b      	ldr	r3, [r3, #0]
   d5282:	685b      	ldr	r3, [r3, #4]
   d5284:	9301      	str	r3, [sp, #4]
   d5286:	bd08      	pop	{r3, pc}
   d5288:	00030240 	.word	0x00030240

000d528c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d528c:	b508      	push	{r3, lr}
   d528e:	4b02      	ldr	r3, [pc, #8]	; (d5298 <network_connecting+0xc>)
   d5290:	681b      	ldr	r3, [r3, #0]
   d5292:	689b      	ldr	r3, [r3, #8]
   d5294:	9301      	str	r3, [sp, #4]
   d5296:	bd08      	pop	{r3, pc}
   d5298:	00030240 	.word	0x00030240

000d529c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d529c:	b508      	push	{r3, lr}
   d529e:	4b02      	ldr	r3, [pc, #8]	; (d52a8 <network_disconnect+0xc>)
   d52a0:	681b      	ldr	r3, [r3, #0]
   d52a2:	68db      	ldr	r3, [r3, #12]
   d52a4:	9301      	str	r3, [sp, #4]
   d52a6:	bd08      	pop	{r3, pc}
   d52a8:	00030240 	.word	0x00030240

000d52ac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d52ac:	b508      	push	{r3, lr}
   d52ae:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <network_ready+0xc>)
   d52b0:	681b      	ldr	r3, [r3, #0]
   d52b2:	691b      	ldr	r3, [r3, #16]
   d52b4:	9301      	str	r3, [sp, #4]
   d52b6:	bd08      	pop	{r3, pc}
   d52b8:	00030240 	.word	0x00030240

000d52bc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d52bc:	b508      	push	{r3, lr}
   d52be:	4b02      	ldr	r3, [pc, #8]	; (d52c8 <network_on+0xc>)
   d52c0:	681b      	ldr	r3, [r3, #0]
   d52c2:	695b      	ldr	r3, [r3, #20]
   d52c4:	9301      	str	r3, [sp, #4]
   d52c6:	bd08      	pop	{r3, pc}
   d52c8:	00030240 	.word	0x00030240

000d52cc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d52cc:	b508      	push	{r3, lr}
   d52ce:	4b02      	ldr	r3, [pc, #8]	; (d52d8 <network_off+0xc>)
   d52d0:	681b      	ldr	r3, [r3, #0]
   d52d2:	699b      	ldr	r3, [r3, #24]
   d52d4:	9301      	str	r3, [sp, #4]
   d52d6:	bd08      	pop	{r3, pc}
   d52d8:	00030240 	.word	0x00030240

000d52dc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d52dc:	b508      	push	{r3, lr}
   d52de:	4b02      	ldr	r3, [pc, #8]	; (d52e8 <network_listen+0xc>)
   d52e0:	681b      	ldr	r3, [r3, #0]
   d52e2:	69db      	ldr	r3, [r3, #28]
   d52e4:	9301      	str	r3, [sp, #4]
   d52e6:	bd08      	pop	{r3, pc}
   d52e8:	00030240 	.word	0x00030240

000d52ec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d52ec:	b508      	push	{r3, lr}
   d52ee:	4b02      	ldr	r3, [pc, #8]	; (d52f8 <network_listening+0xc>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	6a1b      	ldr	r3, [r3, #32]
   d52f4:	9301      	str	r3, [sp, #4]
   d52f6:	bd08      	pop	{r3, pc}
   d52f8:	00030240 	.word	0x00030240

000d52fc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d52fc:	b508      	push	{r3, lr}
   d52fe:	4b02      	ldr	r3, [pc, #8]	; (d5308 <network_set_listen_timeout+0xc>)
   d5300:	681b      	ldr	r3, [r3, #0]
   d5302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5304:	9301      	str	r3, [sp, #4]
   d5306:	bd08      	pop	{r3, pc}
   d5308:	00030240 	.word	0x00030240

000d530c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d530c:	b508      	push	{r3, lr}
   d530e:	4b02      	ldr	r3, [pc, #8]	; (d5318 <network_get_listen_timeout+0xc>)
   d5310:	681b      	ldr	r3, [r3, #0]
   d5312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5314:	9301      	str	r3, [sp, #4]
   d5316:	bd08      	pop	{r3, pc}
   d5318:	00030240 	.word	0x00030240

000d531c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d531c:	b508      	push	{r3, lr}
   d531e:	4b02      	ldr	r3, [pc, #8]	; (d5328 <network_is_on+0xc>)
   d5320:	681b      	ldr	r3, [r3, #0]
   d5322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5324:	9301      	str	r3, [sp, #4]
   d5326:	bd08      	pop	{r3, pc}
   d5328:	00030240 	.word	0x00030240

000d532c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <network_is_off+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	00030240 	.word	0x00030240

000d533c <spark_cloud_flag_connect>:
DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b02      	ldr	r3, [pc, #8]	; (d5348 <spark_cloud_flag_connect+0xc>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	68db      	ldr	r3, [r3, #12]
   d5344:	9301      	str	r3, [sp, #4]
   d5346:	bd08      	pop	{r3, pc}
   d5348:	00030244 	.word	0x00030244

000d534c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d534c:	b508      	push	{r3, lr}
   d534e:	4b02      	ldr	r3, [pc, #8]	; (d5358 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5350:	681b      	ldr	r3, [r3, #0]
   d5352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5354:	9301      	str	r3, [sp, #4]
   d5356:	bd08      	pop	{r3, pc}
   d5358:	00030244 	.word	0x00030244

000d535c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d535c:	b508      	push	{r3, lr}
   d535e:	4b02      	ldr	r3, [pc, #8]	; (d5368 <spark_cloud_disconnect+0xc>)
   d5360:	681b      	ldr	r3, [r3, #0]
   d5362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5364:	9301      	str	r3, [sp, #4]
   d5366:	bd08      	pop	{r3, pc}
   d5368:	00030244 	.word	0x00030244

000d536c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d536c:	b508      	push	{r3, lr}
   d536e:	4b02      	ldr	r3, [pc, #8]	; (d5378 <malloc+0xc>)
   d5370:	681b      	ldr	r3, [r3, #0]
   d5372:	681b      	ldr	r3, [r3, #0]
   d5374:	9301      	str	r3, [sp, #4]
   d5376:	bd08      	pop	{r3, pc}
   d5378:	0003021c 	.word	0x0003021c

000d537c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d537c:	b508      	push	{r3, lr}
   d537e:	4b02      	ldr	r3, [pc, #8]	; (d5388 <free+0xc>)
   d5380:	681b      	ldr	r3, [r3, #0]
   d5382:	685b      	ldr	r3, [r3, #4]
   d5384:	9301      	str	r3, [sp, #4]
   d5386:	bd08      	pop	{r3, pc}
   d5388:	0003021c 	.word	0x0003021c

000d538c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d538c:	b508      	push	{r3, lr}
   d538e:	4b02      	ldr	r3, [pc, #8]	; (d5398 <realloc+0xc>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	689b      	ldr	r3, [r3, #8]
   d5394:	9301      	str	r3, [sp, #4]
   d5396:	bd08      	pop	{r3, pc}
   d5398:	0003021c 	.word	0x0003021c

000d539c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d539c:	b508      	push	{r3, lr}
   d539e:	4b02      	ldr	r3, [pc, #8]	; (d53a8 <__errno+0xc>)
   d53a0:	681b      	ldr	r3, [r3, #0]
   d53a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d53a4:	9301      	str	r3, [sp, #4]
   d53a6:	bd08      	pop	{r3, pc}
   d53a8:	0003021c 	.word	0x0003021c

000d53ac <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d53ac:	b508      	push	{r3, lr}
   d53ae:	4b02      	ldr	r3, [pc, #8]	; (d53b8 <newlib_impure_ptr_callback+0xc>)
   d53b0:	681b      	ldr	r3, [r3, #0]
   d53b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d53b4:	9301      	str	r3, [sp, #4]
   d53b6:	bd08      	pop	{r3, pc}
   d53b8:	0003021c 	.word	0x0003021c

000d53bc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d53bc:	2200      	movs	r2, #0
   d53be:	6840      	ldr	r0, [r0, #4]
   d53c0:	4611      	mov	r1, r2
   d53c2:	f7ff bf93 	b.w	d52ec <network_listening>

000d53c6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d53c6:	2200      	movs	r2, #0
   d53c8:	6840      	ldr	r0, [r0, #4]
   d53ca:	4611      	mov	r1, r2
   d53cc:	f7ff bf9e 	b.w	d530c <network_get_listen_timeout>

000d53d0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d53d0:	6840      	ldr	r0, [r0, #4]
   d53d2:	2200      	movs	r2, #0
   d53d4:	f7ff bf92 	b.w	d52fc <network_set_listen_timeout>

000d53d8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d53d8:	6840      	ldr	r0, [r0, #4]
   d53da:	2200      	movs	r2, #0
   d53dc:	f081 0101 	eor.w	r1, r1, #1
   d53e0:	f7ff bf7c 	b.w	d52dc <network_listen>

000d53e4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d53e4:	2300      	movs	r3, #0
   d53e6:	6840      	ldr	r0, [r0, #4]
   d53e8:	461a      	mov	r2, r3
   d53ea:	4619      	mov	r1, r3
   d53ec:	f7ff bf6e 	b.w	d52cc <network_off>

000d53f0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d53f0:	2300      	movs	r3, #0
   d53f2:	6840      	ldr	r0, [r0, #4]
   d53f4:	461a      	mov	r2, r3
   d53f6:	4619      	mov	r1, r3
   d53f8:	f7ff bf60 	b.w	d52bc <network_on>

000d53fc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d53fc:	2200      	movs	r2, #0
   d53fe:	6840      	ldr	r0, [r0, #4]
   d5400:	4611      	mov	r1, r2
   d5402:	f7ff bf53 	b.w	d52ac <network_ready>

000d5406 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5406:	2200      	movs	r2, #0
   d5408:	6840      	ldr	r0, [r0, #4]
   d540a:	4611      	mov	r1, r2
   d540c:	f7ff bf3e 	b.w	d528c <network_connecting>

000d5410 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5410:	6840      	ldr	r0, [r0, #4]
   d5412:	2200      	movs	r2, #0
   d5414:	2102      	movs	r1, #2
   d5416:	f7ff bf41 	b.w	d529c <network_disconnect>

000d541a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d541a:	2300      	movs	r3, #0
   d541c:	6840      	ldr	r0, [r0, #4]
   d541e:	461a      	mov	r2, r3
   d5420:	f7ff bf2c 	b.w	d527c <network_connect>

000d5424 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5424:	4b02      	ldr	r3, [pc, #8]	; (d5430 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5426:	2203      	movs	r2, #3
   d5428:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d542a:	4a02      	ldr	r2, [pc, #8]	; (d5434 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d542c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d542e:	4770      	bx	lr
   d5430:	2003e650 	.word	0x2003e650
   d5434:	000d703c 	.word	0x000d703c

000d5438 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5438:	2100      	movs	r1, #0
   d543a:	f7ff bea1 	b.w	d5180 <hal_spi_acquire>

000d543e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d543e:	2100      	movs	r1, #0
   d5440:	f7ff bea6 	b.w	d5190 <hal_spi_release>

000d5444 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5444:	b510      	push	{r4, lr}
   d5446:	4604      	mov	r4, r0
   d5448:	4608      	mov	r0, r1
{
    _spi = spi;
   d544a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d544c:	f7ff fe80 	bl	d5150 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5450:	2300      	movs	r3, #0
   d5452:	6063      	str	r3, [r4, #4]
}
   d5454:	4620      	mov	r0, r4
   d5456:	bd10      	pop	{r4, pc}

000d5458 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5458:	b510      	push	{r4, lr}
   d545a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d545c:	7800      	ldrb	r0, [r0, #0]
   d545e:	f7ff ffeb 	bl	d5438 <_ZN8SPIClass4lockEv.isra.0>
   d5462:	b948      	cbnz	r0, d5478 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5464:	7820      	ldrb	r0, [r4, #0]
   d5466:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d546a:	f7ff fe49 	bl	d5100 <hal_spi_begin>
        unlock();
   d546e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5474:	f7ff bfe3 	b.w	d543e <_ZN8SPIClass6unlockEv.isra.0>
}
   d5478:	bd10      	pop	{r4, pc}

000d547a <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d547a:	b513      	push	{r0, r1, r4, lr}
   d547c:	4604      	mov	r4, r0
    if (!lock())
   d547e:	7800      	ldrb	r0, [r0, #0]
{
   d5480:	9101      	str	r1, [sp, #4]
    if (!lock())
   d5482:	f7ff ffd9 	bl	d5438 <_ZN8SPIClass4lockEv.isra.0>
   d5486:	9901      	ldr	r1, [sp, #4]
   d5488:	b940      	cbnz	r0, d549c <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d548a:	7820      	ldrb	r0, [r4, #0]
   d548c:	f7ff fe40 	bl	d5110 <hal_spi_set_bit_order>
        unlock();
   d5490:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5492:	b002      	add	sp, #8
   d5494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5498:	f7ff bfd1 	b.w	d543e <_ZN8SPIClass6unlockEv.isra.0>
}
   d549c:	b002      	add	sp, #8
   d549e:	bd10      	pop	{r4, pc}

000d54a0 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d54a0:	b513      	push	{r0, r1, r4, lr}
   d54a2:	4604      	mov	r4, r0
    if (!lock())
   d54a4:	7800      	ldrb	r0, [r0, #0]
{
   d54a6:	9101      	str	r1, [sp, #4]
    if (!lock())
   d54a8:	f7ff ffc6 	bl	d5438 <_ZN8SPIClass4lockEv.isra.0>
   d54ac:	9901      	ldr	r1, [sp, #4]
   d54ae:	b940      	cbnz	r0, d54c2 <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d54b0:	7820      	ldrb	r0, [r4, #0]
   d54b2:	f7ff fe35 	bl	d5120 <hal_spi_set_data_mode>
        unlock();
   d54b6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d54b8:	b002      	add	sp, #8
   d54ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d54be:	f7ff bfbe 	b.w	d543e <_ZN8SPIClass6unlockEv.isra.0>
}
   d54c2:	b002      	add	sp, #8
   d54c4:	bd10      	pop	{r4, pc}
	...

000d54c8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d54c8:	0840      	lsrs	r0, r0, #1
{
   d54ca:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d54cc:	6018      	str	r0, [r3, #0]
   d54ce:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d54d0:	6818      	ldr	r0, [r3, #0]
   d54d2:	4288      	cmp	r0, r1
   d54d4:	b2e5      	uxtb	r5, r4
   d54d6:	d906      	bls.n	d54e6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d54d8:	3401      	adds	r4, #1
   d54da:	2c08      	cmp	r4, #8
   d54dc:	d002      	beq.n	d54e4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d54de:	0840      	lsrs	r0, r0, #1
   d54e0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d54e2:	e7f5      	b.n	d54d0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d54e4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d54e6:	4b02      	ldr	r3, [pc, #8]	; (d54f0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d54e8:	5d5b      	ldrb	r3, [r3, r5]
   d54ea:	7013      	strb	r3, [r2, #0]
}
   d54ec:	bd30      	pop	{r4, r5, pc}
   d54ee:	bf00      	nop
   d54f0:	000d7070 	.word	0x000d7070

000d54f4 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d54f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d54f8:	b088      	sub	sp, #32
    unsigned clock = 0;
   d54fa:	2300      	movs	r3, #0
{
   d54fc:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d54fe:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d5500:	9302      	str	r3, [sp, #8]
{
   d5502:	460e      	mov	r6, r1
   d5504:	4617      	mov	r7, r2
    if (!lock())
   d5506:	f7ff ff97 	bl	d5438 <_ZN8SPIClass4lockEv.isra.0>
   d550a:	4605      	mov	r5, r0
   d550c:	bb00      	cbnz	r0, d5550 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d550e:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5512:	4601      	mov	r1, r0
   d5514:	2214      	movs	r2, #20
   d5516:	a803      	add	r0, sp, #12
   d5518:	f001 fb0c 	bl	d6b34 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d551c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d551e:	462a      	mov	r2, r5
   d5520:	a903      	add	r1, sp, #12
   d5522:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d5524:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d5528:	f7ff fe22 	bl	d5170 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d552c:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d552e:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5532:	ab02      	add	r3, sp, #8
   d5534:	f10d 0207 	add.w	r2, sp, #7
   d5538:	fb07 f106 	mul.w	r1, r7, r6
   d553c:	f7ff ffc4 	bl	d54c8 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d5540:	7820      	ldrb	r0, [r4, #0]
   d5542:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5546:	f7ff fdf3 	bl	d5130 <hal_spi_set_clock_divider>
        unlock();
   d554a:	7820      	ldrb	r0, [r4, #0]
   d554c:	f7ff ff77 	bl	d543e <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d5550:	9802      	ldr	r0, [sp, #8]
   d5552:	b008      	add	sp, #32
   d5554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5558 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d5558:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d555a:	7800      	ldrb	r0, [r0, #0]
   d555c:	f7ff fdf0 	bl	d5140 <hal_spi_transfer>
}
   d5560:	b2c0      	uxtb	r0, r0
   d5562:	bd08      	pop	{r3, pc}

000d5564 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5564:	b510      	push	{r4, lr}
   d5566:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5568:	6800      	ldr	r0, [r0, #0]
   d556a:	b118      	cbz	r0, d5574 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d556c:	f7ff ff06 	bl	d537c <free>
            wakeupSource_ = nullptr;
   d5570:	2300      	movs	r3, #0
   d5572:	6023      	str	r3, [r4, #0]
        }
    }
   d5574:	bd10      	pop	{r4, pc}

000d5576 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5576:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d5578:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d557c:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d557e:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5580:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d5582:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d5586:	f8c0 2006 	str.w	r2, [r0, #6]
   d558a:	889b      	ldrh	r3, [r3, #4]
   d558c:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d558e:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5590:	f7ff ffe8 	bl	d5564 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d5594:	682b      	ldr	r3, [r5, #0]
   d5596:	b113      	cbz	r3, d559e <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d5598:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d559a:	2300      	movs	r3, #0
   d559c:	602b      	str	r3, [r5, #0]
    }
   d559e:	4620      	mov	r0, r4
   d55a0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d55a4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d55a4:	b538      	push	{r3, r4, r5, lr}
   d55a6:	460c      	mov	r4, r1
   d55a8:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d55aa:	f7ff ffdb 	bl	d5564 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d55ae:	b144      	cbz	r4, d55c2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d55b0:	8820      	ldrh	r0, [r4, #0]
   d55b2:	f7ff fedb 	bl	d536c <malloc>
   d55b6:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d55b8:	b128      	cbz	r0, d55c6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d55ba:	8822      	ldrh	r2, [r4, #0]
   d55bc:	4621      	mov	r1, r4
   d55be:	f001 faab 	bl	d6b18 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d55c2:	2000      	movs	r0, #0
    }
   d55c4:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d55c6:	4801      	ldr	r0, [pc, #4]	; (d55cc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d55c8:	e7fc      	b.n	d55c4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d55ca:	bf00      	nop
   d55cc:	fffffefc 	.word	0xfffffefc

000d55d0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d55d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d55d2:	4d2d      	ldr	r5, [pc, #180]	; (d5688 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d55d4:	7d0b      	ldrb	r3, [r1, #20]
   d55d6:	4604      	mov	r4, r0
   d55d8:	b08b      	sub	sp, #44	; 0x2c
   d55da:	4608      	mov	r0, r1
   d55dc:	1daf      	adds	r7, r5, #6
   d55de:	2b00      	cmp	r3, #0
   d55e0:	d038      	beq.n	d5654 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d55e2:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d55e4:	791b      	ldrb	r3, [r3, #4]
   d55e6:	2b00      	cmp	r3, #0
   d55e8:	d034      	beq.n	d5654 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d55ea:	2200      	movs	r2, #0
    SleepResult() {}
   d55ec:	4b27      	ldr	r3, [pc, #156]	; (d568c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d55ee:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d55f0:	a902      	add	r1, sp, #8
   d55f2:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d55f4:	9202      	str	r2, [sp, #8]
   d55f6:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d55fa:	f88d 200e 	strb.w	r2, [sp, #14]
   d55fe:	f7ff fe33 	bl	d5268 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d5602:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d5606:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d560a:	b200      	sxth	r0, r0
   d560c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d5610:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d5614:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d5616:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d5618:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d561a:	4628      	mov	r0, r5
   d561c:	f7ff ffc2 	bl	d55a4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d5620:	a802      	add	r0, sp, #8
   d5622:	f7ff ff9f 	bl	d5564 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d5626:	2300      	movs	r3, #0
   d5628:	6023      	str	r3, [r4, #0]
   d562a:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d562c:	71a3      	strb	r3, [r4, #6]
   d562e:	8123      	strh	r3, [r4, #8]
   d5630:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5634:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d5636:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d563a:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d563c:	683b      	ldr	r3, [r7, #0]
   d563e:	f8c4 3006 	str.w	r3, [r4, #6]
   d5642:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d5644:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d5646:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d5648:	4620      	mov	r0, r4
   d564a:	f7ff ffab 	bl	d55a4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d564e:	4620      	mov	r0, r4
   d5650:	b00b      	add	sp, #44	; 0x2c
   d5652:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d5654:	2600      	movs	r6, #0
   d5656:	2320      	movs	r3, #32
   d5658:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d565c:	4b0c      	ldr	r3, [pc, #48]	; (d5690 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d565e:	9300      	str	r3, [sp, #0]
   d5660:	490c      	ldr	r1, [pc, #48]	; (d5694 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d5662:	4633      	mov	r3, r6
   d5664:	aa02      	add	r2, sp, #8
   d5666:	2032      	movs	r0, #50	; 0x32
   d5668:	f7ff fdd2 	bl	d5210 <log_message>
    SleepResult() {}
   d566c:	4b07      	ldr	r3, [pc, #28]	; (d568c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d566e:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d5670:	a902      	add	r1, sp, #8
        error_ = error;
   d5672:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d5676:	4804      	ldr	r0, [pc, #16]	; (d5688 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d5678:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d567a:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d567e:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5682:	f7ff ff78 	bl	d5576 <_ZN17SystemSleepResultaSEOS_>
   d5686:	e7cb      	b.n	d5620 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d5688:	2003e658 	.word	0x2003e658
   d568c:	ffff0000 	.word	0xffff0000
   d5690:	000d707f 	.word	0x000d707f
   d5694:	000d7078 	.word	0x000d7078

000d5698 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5698:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d569a:	4b09      	ldr	r3, [pc, #36]	; (d56c0 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d569c:	4c09      	ldr	r4, [pc, #36]	; (d56c4 <_GLOBAL__sub_I_System+0x2c>)
   d569e:	2202      	movs	r2, #2
   d56a0:	2000      	movs	r0, #0
   d56a2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d56a4:	4b08      	ldr	r3, [pc, #32]	; (d56c8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d56a6:	6020      	str	r0, [r4, #0]
   d56a8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d56aa:	71a0      	strb	r0, [r4, #6]
   d56ac:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d56ae:	f7ff fdb7 	bl	d5220 <set_system_mode>
SystemClass System;
   d56b2:	4620      	mov	r0, r4
   d56b4:	4a05      	ldr	r2, [pc, #20]	; (d56cc <_GLOBAL__sub_I_System+0x34>)
   d56b6:	4906      	ldr	r1, [pc, #24]	; (d56d0 <_GLOBAL__sub_I_System+0x38>)
   d56b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d56bc:	f001 b8fc 	b.w	d68b8 <__aeabi_atexit>
   d56c0:	2003e664 	.word	0x2003e664
   d56c4:	2003e658 	.word	0x2003e658
   d56c8:	ffff0000 	.word	0xffff0000
   d56cc:	2003e164 	.word	0x2003e164
   d56d0:	000d4129 	.word	0x000d4129

000d56d4 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d56d4:	b570      	push	{r4, r5, r6, lr}
   d56d6:	b086      	sub	sp, #24
   d56d8:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d56da:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d56dc:	4668      	mov	r0, sp
   d56de:	f000 facf 	bl	d5c80 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d56e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d56e4:	1d34      	adds	r4, r6, #4
   d56e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d56e8:	682b      	ldr	r3, [r5, #0]
   d56ea:	7023      	strb	r3, [r4, #0]
    }
   d56ec:	4630      	mov	r0, r6
   d56ee:	b006      	add	sp, #24
   d56f0:	bd70      	pop	{r4, r5, r6, pc}

000d56f2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d56f2:	b510      	push	{r4, lr}
   d56f4:	4604      	mov	r4, r0
{
	free(buffer);
   d56f6:	6800      	ldr	r0, [r0, #0]
   d56f8:	f7ff fe40 	bl	d537c <free>
}
   d56fc:	4620      	mov	r0, r4
   d56fe:	bd10      	pop	{r4, pc}

000d5700 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5700:	b510      	push	{r4, lr}
   d5702:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5704:	6800      	ldr	r0, [r0, #0]
   d5706:	b108      	cbz	r0, d570c <_ZN6String10invalidateEv+0xc>
   d5708:	f7ff fe38 	bl	d537c <free>
	buffer = NULL;
   d570c:	2300      	movs	r3, #0
	capacity = len = 0;
   d570e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5712:	6023      	str	r3, [r4, #0]
}
   d5714:	bd10      	pop	{r4, pc}

000d5716 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5716:	b538      	push	{r3, r4, r5, lr}
   d5718:	4604      	mov	r4, r0
   d571a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d571c:	6800      	ldr	r0, [r0, #0]
   d571e:	3101      	adds	r1, #1
   d5720:	f7ff fe34 	bl	d538c <realloc>
	if (newbuffer) {
   d5724:	b110      	cbz	r0, d572c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5726:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d572a:	2001      	movs	r0, #1
	}
	return 0;
}
   d572c:	bd38      	pop	{r3, r4, r5, pc}

000d572e <_ZN6String7reserveEj>:
{
   d572e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5730:	6803      	ldr	r3, [r0, #0]
{
   d5732:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5734:	b123      	cbz	r3, d5740 <_ZN6String7reserveEj+0x12>
   d5736:	6843      	ldr	r3, [r0, #4]
   d5738:	428b      	cmp	r3, r1
   d573a:	d301      	bcc.n	d5740 <_ZN6String7reserveEj+0x12>
   d573c:	2001      	movs	r0, #1
}
   d573e:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5740:	4620      	mov	r0, r4
   d5742:	f7ff ffe8 	bl	d5716 <_ZN6String12changeBufferEj>
   d5746:	2800      	cmp	r0, #0
   d5748:	d0f9      	beq.n	d573e <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d574a:	68a3      	ldr	r3, [r4, #8]
   d574c:	2b00      	cmp	r3, #0
   d574e:	d1f5      	bne.n	d573c <_ZN6String7reserveEj+0xe>
   d5750:	6822      	ldr	r2, [r4, #0]
   d5752:	7013      	strb	r3, [r2, #0]
   d5754:	e7f2      	b.n	d573c <_ZN6String7reserveEj+0xe>

000d5756 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5756:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5758:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d575a:	4611      	mov	r1, r2
   d575c:	9201      	str	r2, [sp, #4]
{
   d575e:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5760:	f7ff ffe5 	bl	d572e <_ZN6String7reserveEj>
   d5764:	9a01      	ldr	r2, [sp, #4]
   d5766:	b928      	cbnz	r0, d5774 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5768:	4620      	mov	r0, r4
   d576a:	f7ff ffc9 	bl	d5700 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d576e:	4620      	mov	r0, r4
   d5770:	b003      	add	sp, #12
   d5772:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5774:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5776:	4629      	mov	r1, r5
   d5778:	6820      	ldr	r0, [r4, #0]
   d577a:	f001 f9cd 	bl	d6b18 <memcpy>
	buffer[len] = 0;
   d577e:	6822      	ldr	r2, [r4, #0]
   d5780:	68a3      	ldr	r3, [r4, #8]
   d5782:	2100      	movs	r1, #0
   d5784:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5786:	e7f2      	b.n	d576e <_ZN6String4copyEPKcj+0x18>

000d5788 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5788:	2300      	movs	r3, #0
String::String(const char *cstr)
   d578a:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d578c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5790:	4604      	mov	r4, r0
	len = 0;
   d5792:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5794:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5796:	b141      	cbz	r1, d57aa <_ZN6StringC1EPKc+0x22>
   d5798:	4608      	mov	r0, r1
   d579a:	9101      	str	r1, [sp, #4]
   d579c:	f001 fa08 	bl	d6bb0 <strlen>
   d57a0:	9901      	ldr	r1, [sp, #4]
   d57a2:	4602      	mov	r2, r0
   d57a4:	4620      	mov	r0, r4
   d57a6:	f7ff ffd6 	bl	d5756 <_ZN6String4copyEPKcj>
}
   d57aa:	4620      	mov	r0, r4
   d57ac:	b002      	add	sp, #8
   d57ae:	bd10      	pop	{r4, pc}

000d57b0 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d57b0:	b513      	push	{r0, r1, r4, lr}
   d57b2:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d57b4:	b159      	cbz	r1, d57ce <_ZN6StringaSEPKc+0x1e>
   d57b6:	4608      	mov	r0, r1
   d57b8:	9101      	str	r1, [sp, #4]
   d57ba:	f001 f9f9 	bl	d6bb0 <strlen>
   d57be:	9901      	ldr	r1, [sp, #4]
   d57c0:	4602      	mov	r2, r0
   d57c2:	4620      	mov	r0, r4
   d57c4:	f7ff ffc7 	bl	d5756 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d57c8:	4620      	mov	r0, r4
   d57ca:	b002      	add	sp, #8
   d57cc:	bd10      	pop	{r4, pc}
	else invalidate();
   d57ce:	f7ff ff97 	bl	d5700 <_ZN6String10invalidateEv>
   d57d2:	e7f9      	b.n	d57c8 <_ZN6StringaSEPKc+0x18>

000d57d4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d57d4:	b570      	push	{r4, r5, r6, lr}
   d57d6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d57d8:	460e      	mov	r6, r1
   d57da:	b909      	cbnz	r1, d57e0 <_ZN6String6concatEPKcj+0xc>
   d57dc:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d57de:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d57e0:	b16a      	cbz	r2, d57fe <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d57e2:	6884      	ldr	r4, [r0, #8]
   d57e4:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d57e6:	4621      	mov	r1, r4
   d57e8:	f7ff ffa1 	bl	d572e <_ZN6String7reserveEj>
   d57ec:	2800      	cmp	r0, #0
   d57ee:	d0f5      	beq.n	d57dc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d57f0:	6828      	ldr	r0, [r5, #0]
   d57f2:	68ab      	ldr	r3, [r5, #8]
   d57f4:	4631      	mov	r1, r6
   d57f6:	4418      	add	r0, r3
   d57f8:	f001 f9d2 	bl	d6ba0 <strcpy>
	len = newlen;
   d57fc:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d57fe:	2001      	movs	r0, #1
   d5800:	e7ed      	b.n	d57de <_ZN6String6concatEPKcj+0xa>

000d5802 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d5802:	688a      	ldr	r2, [r1, #8]
   d5804:	6809      	ldr	r1, [r1, #0]
   d5806:	f7ff bfe5 	b.w	d57d4 <_ZN6String6concatEPKcj>

000d580a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d580a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d580c:	688a      	ldr	r2, [r1, #8]
   d580e:	6809      	ldr	r1, [r1, #0]
{
   d5810:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5812:	f7ff ffdf 	bl	d57d4 <_ZN6String6concatEPKcj>
   d5816:	b910      	cbnz	r0, d581e <_ZplRK15StringSumHelperRK6String+0x14>
   d5818:	4620      	mov	r0, r4
   d581a:	f7ff ff71 	bl	d5700 <_ZN6String10invalidateEv>
	return a;
}
   d581e:	4620      	mov	r0, r4
   d5820:	bd10      	pop	{r4, pc}

000d5822 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5822:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5824:	6882      	ldr	r2, [r0, #8]
   d5826:	b93a      	cbnz	r2, d5838 <_ZNK6String6equalsEPKc+0x16>
   d5828:	b121      	cbz	r1, d5834 <_ZNK6String6equalsEPKc+0x12>
   d582a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d582c:	fab0 f080 	clz	r0, r0
   d5830:	0940      	lsrs	r0, r0, #5
   d5832:	e000      	b.n	d5836 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5834:	2001      	movs	r0, #1
}
   d5836:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5838:	6800      	ldr	r0, [r0, #0]
   d583a:	b909      	cbnz	r1, d5840 <_ZNK6String6equalsEPKc+0x1e>
   d583c:	7800      	ldrb	r0, [r0, #0]
   d583e:	e7f5      	b.n	d582c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d5840:	f001 f9a4 	bl	d6b8c <strcmp>
   d5844:	e7f2      	b.n	d582c <_ZNK6String6equalsEPKc+0xa>

000d5846 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d5846:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d5848:	6883      	ldr	r3, [r0, #8]
   d584a:	4293      	cmp	r3, r2
   d584c:	d907      	bls.n	d585e <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d584e:	6804      	ldr	r4, [r0, #0]
   d5850:	6809      	ldr	r1, [r1, #0]
   d5852:	18a0      	adds	r0, r4, r2
   d5854:	f001 f9c7 	bl	d6be6 <strstr>
	if (found == NULL) return -1;
   d5858:	b108      	cbz	r0, d585e <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d585a:	1b00      	subs	r0, r0, r4
}
   d585c:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   d585e:	f04f 30ff 	mov.w	r0, #4294967295
   d5862:	e7fb      	b.n	d585c <_ZNK6String7indexOfERKS_j+0x16>

000d5864 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   d5864:	2200      	movs	r2, #0
   d5866:	f7ff bfee 	b.w	d5846 <_ZNK6String7indexOfERKS_j>
	...

000d586c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d586e:	429a      	cmp	r2, r3
{
   d5870:	460f      	mov	r7, r1
   d5872:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d5874:	490c      	ldr	r1, [pc, #48]	; (d58a8 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   d5876:	bf88      	it	hi
   d5878:	4613      	movhi	r3, r2
{
   d587a:	4614      	mov	r4, r2
   d587c:	4606      	mov	r6, r0
	if (left > right) {
   d587e:	bf84      	itt	hi
   d5880:	462c      	movhi	r4, r5
   d5882:	461d      	movhi	r5, r3
	String out;
   d5884:	f7ff ff80 	bl	d5788 <_ZN6StringC1EPKc>
	if (left > len) return out;
   d5888:	68ba      	ldr	r2, [r7, #8]
   d588a:	42a2      	cmp	r2, r4
   d588c:	d30a      	bcc.n	d58a4 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d588e:	6839      	ldr	r1, [r7, #0]
   d5890:	42aa      	cmp	r2, r5
   d5892:	bf94      	ite	ls
   d5894:	ebc4 0202 	rsbls	r2, r4, r2
   d5898:	ebc4 0205 	rsbhi	r2, r4, r5
   d589c:	4421      	add	r1, r4
   d589e:	4630      	mov	r0, r6
   d58a0:	f7ff ff59 	bl	d5756 <_ZN6String4copyEPKcj>
	return out;
}
   d58a4:	4630      	mov	r0, r6
   d58a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d58a8:	000d7001 	.word	0x000d7001

000d58ac <_ZNK6String9substringEj>:
{
   d58ac:	b510      	push	{r4, lr}
   d58ae:	4604      	mov	r4, r0
	return substring(left, len);
   d58b0:	688b      	ldr	r3, [r1, #8]
   d58b2:	f7ff ffdb 	bl	d586c <_ZNK6String9substringEjj>
}
   d58b6:	4620      	mov	r0, r4
   d58b8:	bd10      	pop	{r4, pc}

000d58ba <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d58ba:	b510      	push	{r4, lr}
   d58bc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d58be:	6800      	ldr	r0, [r0, #0]
   d58c0:	b108      	cbz	r0, d58c6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d58c2:	f7ff fb35 	bl	d4f30 <os_mutex_recursive_destroy>
    }
   d58c6:	4620      	mov	r0, r4
   d58c8:	bd10      	pop	{r4, pc}

000d58ca <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d58ca:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d58cc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d58ce:	4604      	mov	r4, r0
      if (_M_manager)
   d58d0:	b113      	cbz	r3, d58d8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d58d2:	2203      	movs	r2, #3
   d58d4:	4601      	mov	r1, r0
   d58d6:	4798      	blx	r3
    }
   d58d8:	4620      	mov	r0, r4
   d58da:	bd10      	pop	{r4, pc}

000d58dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d58dc:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d58de:	4c06      	ldr	r4, [pc, #24]	; (d58f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d58e0:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d58e2:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d58e4:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d58e6:	f7ff fb1b 	bl	d4f20 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d58ea:	4620      	mov	r0, r4
   d58ec:	4a03      	ldr	r2, [pc, #12]	; (d58fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d58ee:	4904      	ldr	r1, [pc, #16]	; (d5900 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d58f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d58f4:	f000 bfe0 	b.w	d68b8 <__aeabi_atexit>
   d58f8:	2003e668 	.word	0x2003e668
   d58fc:	2003e164 	.word	0x2003e164
   d5900:	000d58bb 	.word	0x000d58bb

000d5904 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5906:	4606      	mov	r6, r0
   d5908:	460d      	mov	r5, r1
  size_t n = 0;
   d590a:	188f      	adds	r7, r1, r2
   d590c:	2400      	movs	r4, #0
  while (size--) {
   d590e:	42bd      	cmp	r5, r7
   d5910:	d00c      	beq.n	d592c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5912:	6833      	ldr	r3, [r6, #0]
   d5914:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5918:	689b      	ldr	r3, [r3, #8]
   d591a:	4630      	mov	r0, r6
   d591c:	4798      	blx	r3
     if (chunk>=0)
   d591e:	1e03      	subs	r3, r0, #0
   d5920:	db01      	blt.n	d5926 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5922:	441c      	add	r4, r3
  while (size--) {
   d5924:	e7f3      	b.n	d590e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5926:	2c00      	cmp	r4, #0
   d5928:	bf08      	it	eq
   d592a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d592c:	4620      	mov	r0, r4
   d592e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5930 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5930:	b513      	push	{r0, r1, r4, lr}
   d5932:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5934:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5936:	b159      	cbz	r1, d5950 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5938:	9101      	str	r1, [sp, #4]
   d593a:	f001 f939 	bl	d6bb0 <strlen>
   d593e:	6823      	ldr	r3, [r4, #0]
   d5940:	9901      	ldr	r1, [sp, #4]
   d5942:	68db      	ldr	r3, [r3, #12]
   d5944:	4602      	mov	r2, r0
   d5946:	4620      	mov	r0, r4
    }
   d5948:	b002      	add	sp, #8
   d594a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d594e:	4718      	bx	r3
    }
   d5950:	b002      	add	sp, #8
   d5952:	bd10      	pop	{r4, pc}

000d5954 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5954:	b508      	push	{r3, lr}
  return write(str);
   d5956:	f7ff ffeb 	bl	d5930 <_ZN5Print5writeEPKc>
}
   d595a:	bd08      	pop	{r3, pc}

000d595c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d595c:	6803      	ldr	r3, [r0, #0]
   d595e:	689b      	ldr	r3, [r3, #8]
   d5960:	4718      	bx	r3

000d5962 <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   d5962:	680a      	ldr	r2, [r1, #0]
 {
   d5964:	460b      	mov	r3, r1
   return x.printTo(*this);
   d5966:	6812      	ldr	r2, [r2, #0]
   d5968:	4601      	mov	r1, r0
   d596a:	4618      	mov	r0, r3
   d596c:	4710      	bx	r2

000d596e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d596e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5970:	210d      	movs	r1, #13
{
   d5972:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5974:	f7ff fff2 	bl	d595c <_ZN5Print5printEc>
  n += print('\n');
   d5978:	210a      	movs	r1, #10
  size_t n = print('\r');
   d597a:	4604      	mov	r4, r0
  n += print('\n');
   d597c:	4628      	mov	r0, r5
   d597e:	f7ff ffed 	bl	d595c <_ZN5Print5printEc>
  return n;
}
   d5982:	4420      	add	r0, r4
   d5984:	bd38      	pop	{r3, r4, r5, pc}

000d5986 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5986:	b538      	push	{r3, r4, r5, lr}
   d5988:	4605      	mov	r5, r0
  return write(str);
   d598a:	f7ff ffd1 	bl	d5930 <_ZN5Print5writeEPKc>
   d598e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5990:	4628      	mov	r0, r5
   d5992:	f7ff ffec 	bl	d596e <_ZN5Print7printlnEv>
  return n;
}
   d5996:	4420      	add	r0, r4
   d5998:	bd38      	pop	{r3, r4, r5, pc}

000d599a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d599a:	b530      	push	{r4, r5, lr}
   d599c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d599e:	2300      	movs	r3, #0
   d59a0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d59a4:	2a01      	cmp	r2, #1
   d59a6:	bf98      	it	ls
   d59a8:	220a      	movls	r2, #10
   d59aa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d59ac:	460d      	mov	r5, r1
   d59ae:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d59b2:	fb01 5312 	mls	r3, r1, r2, r5
   d59b6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d59ba:	2b09      	cmp	r3, #9
   d59bc:	bf94      	ite	ls
   d59be:	3330      	addls	r3, #48	; 0x30
   d59c0:	3337      	addhi	r3, #55	; 0x37
   d59c2:	b2db      	uxtb	r3, r3
  } while(n);
   d59c4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d59c6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d59ca:	d9ef      	bls.n	d59ac <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d59cc:	4621      	mov	r1, r4
   d59ce:	f7ff ffaf 	bl	d5930 <_ZN5Print5writeEPKc>
}
   d59d2:	b00b      	add	sp, #44	; 0x2c
   d59d4:	bd30      	pop	{r4, r5, pc}

000d59d6 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d59d6:	2300      	movs	r3, #0
   d59d8:	6840      	ldr	r0, [r0, #4]
   d59da:	461a      	mov	r2, r3
   d59dc:	4619      	mov	r1, r3
   d59de:	f7ff bc6d 	b.w	d52bc <network_on>
	...

000d59e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d59e4:	4b01      	ldr	r3, [pc, #4]	; (d59ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d59e6:	4a02      	ldr	r2, [pc, #8]	; (d59f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d59e8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d59ea:	4770      	bx	lr
   d59ec:	2003e66c 	.word	0x2003e66c
   d59f0:	000d70b0 	.word	0x000d70b0

000d59f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d59f4:	4b02      	ldr	r3, [pc, #8]	; (d5a00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d59f6:	681a      	ldr	r2, [r3, #0]
   d59f8:	4b02      	ldr	r3, [pc, #8]	; (d5a04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d59fa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d59fc:	4770      	bx	lr
   d59fe:	bf00      	nop
   d5a00:	2003e0fc 	.word	0x2003e0fc
   d5a04:	2003e670 	.word	0x2003e670

000d5a08 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5a08:	2100      	movs	r1, #0
   d5a0a:	f7ff bc11 	b.w	d5230 <system_delay_ms>

000d5a0e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5a0e:	b510      	push	{r4, lr}
   d5a10:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a12:	f7ff ff5a 	bl	d58ca <_ZNSt14_Function_baseD1Ev>
   d5a16:	4620      	mov	r0, r4
   d5a18:	bd10      	pop	{r4, pc}
	...

000d5a1c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5a1c:	4803      	ldr	r0, [pc, #12]	; (d5a2c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5a1e:	4a04      	ldr	r2, [pc, #16]	; (d5a30 <_GLOBAL__sub_I_RGB+0x14>)
   d5a20:	4904      	ldr	r1, [pc, #16]	; (d5a34 <_GLOBAL__sub_I_RGB+0x18>)
   d5a22:	2300      	movs	r3, #0
   d5a24:	6083      	str	r3, [r0, #8]
   d5a26:	f000 bf47 	b.w	d68b8 <__aeabi_atexit>
   d5a2a:	bf00      	nop
   d5a2c:	2003e674 	.word	0x2003e674
   d5a30:	2003e164 	.word	0x2003e164
   d5a34:	000d5a0f 	.word	0x000d5a0f

000d5a38 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5a38:	4b01      	ldr	r3, [pc, #4]	; (d5a40 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5a3a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5a3c:	4770      	bx	lr
   d5a3e:	bf00      	nop
   d5a40:	2003e100 	.word	0x2003e100

000d5a44 <serialEventRun>:
{
   d5a44:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5a46:	4b0b      	ldr	r3, [pc, #44]	; (d5a74 <serialEventRun+0x30>)
   d5a48:	b143      	cbz	r3, d5a5c <serialEventRun+0x18>
   d5a4a:	f000 f985 	bl	d5d58 <_Z16_fetch_usbserialv>
   d5a4e:	6803      	ldr	r3, [r0, #0]
   d5a50:	691b      	ldr	r3, [r3, #16]
   d5a52:	4798      	blx	r3
   d5a54:	2800      	cmp	r0, #0
   d5a56:	dd01      	ble.n	d5a5c <serialEventRun+0x18>
        serialEvent();
   d5a58:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5a5c:	4b06      	ldr	r3, [pc, #24]	; (d5a78 <serialEventRun+0x34>)
   d5a5e:	b143      	cbz	r3, d5a72 <serialEventRun+0x2e>
   d5a60:	f000 f9f8 	bl	d5e54 <_Z22__fetch_global_Serial1v>
   d5a64:	6803      	ldr	r3, [r0, #0]
   d5a66:	691b      	ldr	r3, [r3, #16]
   d5a68:	4798      	blx	r3
   d5a6a:	2800      	cmp	r0, #0
   d5a6c:	dd01      	ble.n	d5a72 <serialEventRun+0x2e>
        serialEvent1();
   d5a6e:	f3af 8000 	nop.w
}
   d5a72:	bd08      	pop	{r3, pc}
	...

000d5a7c <_post_loop>:
{
   d5a7c:	b508      	push	{r3, lr}
	serialEventRun();
   d5a7e:	f7ff ffe1 	bl	d5a44 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5a82:	f7ff fa45 	bl	d4f10 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5a86:	4b01      	ldr	r3, [pc, #4]	; (d5a8c <_post_loop+0x10>)
   d5a88:	6018      	str	r0, [r3, #0]
}
   d5a8a:	bd08      	pop	{r3, pc}
   d5a8c:	2003e7d4 	.word	0x2003e7d4

000d5a90 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5a90:	4802      	ldr	r0, [pc, #8]	; (d5a9c <_Z33system_initialize_user_backup_ramv+0xc>)
   d5a92:	4a03      	ldr	r2, [pc, #12]	; (d5aa0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5a94:	4903      	ldr	r1, [pc, #12]	; (d5aa4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5a96:	1a12      	subs	r2, r2, r0
   d5a98:	f001 b83e 	b.w	d6b18 <memcpy>
   d5a9c:	2003f400 	.word	0x2003f400
   d5aa0:	2003f404 	.word	0x2003f404
   d5aa4:	000d7480 	.word	0x000d7480

000d5aa8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5aa8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5aaa:	2300      	movs	r3, #0
   d5aac:	9300      	str	r3, [sp, #0]
   d5aae:	461a      	mov	r2, r3
   d5ab0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5ab4:	f7ff fbce 	bl	d5254 <system_ctrl_set_result>
}
   d5ab8:	b003      	add	sp, #12
   d5aba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5ac0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5ac0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5ac2:	8843      	ldrh	r3, [r0, #2]
   d5ac4:	2b0a      	cmp	r3, #10
   d5ac6:	d008      	beq.n	d5ada <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5ac8:	2b50      	cmp	r3, #80	; 0x50
   d5aca:	d10b      	bne.n	d5ae4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5acc:	4b09      	ldr	r3, [pc, #36]	; (d5af4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5ace:	681b      	ldr	r3, [r3, #0]
   d5ad0:	b14b      	cbz	r3, d5ae6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5ad2:	b003      	add	sp, #12
   d5ad4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5ad8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5ada:	f7ff ffe5 	bl	d5aa8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5ade:	b003      	add	sp, #12
   d5ae0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5ae4:	2300      	movs	r3, #0
   d5ae6:	9300      	str	r3, [sp, #0]
   d5ae8:	461a      	mov	r2, r3
   d5aea:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5aee:	f7ff fbb1 	bl	d5254 <system_ctrl_set_result>
}
   d5af2:	e7f4      	b.n	d5ade <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5af4:	2003e688 	.word	0x2003e688

000d5af8 <module_user_init_hook>:
{
   d5af8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5afa:	4c12      	ldr	r4, [pc, #72]	; (d5b44 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5afc:	4812      	ldr	r0, [pc, #72]	; (d5b48 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5afe:	4d13      	ldr	r5, [pc, #76]	; (d5b4c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5b00:	2100      	movs	r1, #0
   d5b02:	f7ff fc53 	bl	d53ac <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5b06:	6823      	ldr	r3, [r4, #0]
   d5b08:	42ab      	cmp	r3, r5
   d5b0a:	4b11      	ldr	r3, [pc, #68]	; (d5b50 <module_user_init_hook+0x58>)
   d5b0c:	bf0c      	ite	eq
   d5b0e:	2201      	moveq	r2, #1
   d5b10:	2200      	movne	r2, #0
   d5b12:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5b14:	d002      	beq.n	d5b1c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5b16:	f7ff ffbb 	bl	d5a90 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5b1a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5b1c:	f7ff f9f0 	bl	d4f00 <HAL_RNG_GetRandomNumber>
   d5b20:	4604      	mov	r4, r0
    srand(seed);
   d5b22:	f001 f80f 	bl	d6b44 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5b26:	4b0b      	ldr	r3, [pc, #44]	; (d5b54 <module_user_init_hook+0x5c>)
   d5b28:	b113      	cbz	r3, d5b30 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5b2a:	4620      	mov	r0, r4
   d5b2c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5b30:	2100      	movs	r1, #0
   d5b32:	4808      	ldr	r0, [pc, #32]	; (d5b54 <module_user_init_hook+0x5c>)
   d5b34:	f7ff fc0a 	bl	d534c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5b3c:	4806      	ldr	r0, [pc, #24]	; (d5b58 <module_user_init_hook+0x60>)
   d5b3e:	2100      	movs	r1, #0
   d5b40:	f7ff bb7e 	b.w	d5240 <system_ctrl_set_app_request_handler>
   d5b44:	2003f400 	.word	0x2003f400
   d5b48:	000d5a39 	.word	0x000d5a39
   d5b4c:	9a271c1e 	.word	0x9a271c1e
   d5b50:	2003e684 	.word	0x2003e684
   d5b54:	00000000 	.word	0x00000000
   d5b58:	000d5ac1 	.word	0x000d5ac1

000d5b5c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d5b5c:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d5b5e:	2308      	movs	r3, #8
   d5b60:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d5b64:	6803      	ldr	r3, [r0, #0]
   d5b66:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d5b6a:	7a03      	ldrb	r3, [r0, #8]
   d5b6c:	f88d 3003 	strb.w	r3, [sp, #3]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d5b70:	2100      	movs	r1, #0
    opts.timeout = timeout_;
   d5b72:	6843      	ldr	r3, [r0, #4]
   d5b74:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d5b76:	4668      	mov	r0, sp
   d5b78:	f7ff fbf0 	bl	d535c <spark_cloud_disconnect>
}
   d5b7c:	b003      	add	sp, #12
   d5b7e:	f85d fb04 	ldr.w	pc, [sp], #4

000d5b82 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d5b82:	4770      	bx	lr

000d5b84 <_ZN9IPAddressD0Ev>:
   d5b84:	b510      	push	{r4, lr}
   d5b86:	2118      	movs	r1, #24
   d5b88:	4604      	mov	r4, r0
   d5b8a:	f000 fe9a 	bl	d68c2 <_ZdlPvj>
   d5b8e:	4620      	mov	r0, r4
   d5b90:	bd10      	pop	{r4, pc}

000d5b92 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5b92:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5b94:	7d03      	ldrb	r3, [r0, #20]
   d5b96:	2b06      	cmp	r3, #6
{
   d5b98:	b08d      	sub	sp, #52	; 0x34
   d5b9a:	460e      	mov	r6, r1
   d5b9c:	f100 0704 	add.w	r7, r0, #4
   d5ba0:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5ba4:	d012      	beq.n	d5bcc <_ZNK9IPAddress7printToER5Print+0x3a>
   d5ba6:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5baa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5bae:	220a      	movs	r2, #10
   d5bb0:	4630      	mov	r0, r6
   d5bb2:	f7ff fef2 	bl	d599a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5bb6:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5bb8:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5bba:	d019      	beq.n	d5bf0 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5bbc:	2c00      	cmp	r4, #0
   d5bbe:	d0f4      	beq.n	d5baa <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5bc0:	212e      	movs	r1, #46	; 0x2e
   d5bc2:	4630      	mov	r0, r6
   d5bc4:	f7ff feca 	bl	d595c <_ZN5Print5printEc>
   d5bc8:	4404      	add	r4, r0
   d5bca:	e7ee      	b.n	d5baa <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5bcc:	232f      	movs	r3, #47	; 0x2f
   d5bce:	466a      	mov	r2, sp
   d5bd0:	4639      	mov	r1, r7
   d5bd2:	200a      	movs	r0, #10
		buf[0] = 0;
   d5bd4:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5bd8:	f7ff f9b2 	bl	d4f40 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5bdc:	4668      	mov	r0, sp
   d5bde:	f000 ffe7 	bl	d6bb0 <strlen>
   d5be2:	6833      	ldr	r3, [r6, #0]
   d5be4:	4602      	mov	r2, r0
   d5be6:	68db      	ldr	r3, [r3, #12]
   d5be8:	4669      	mov	r1, sp
   d5bea:	4630      	mov	r0, r6
   d5bec:	4798      	blx	r3
   d5bee:	4604      	mov	r4, r0
    }
    return n;
}
   d5bf0:	4620      	mov	r0, r4
   d5bf2:	b00d      	add	sp, #52	; 0x34
   d5bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5bf8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5bf8:	b510      	push	{r4, lr}
   d5bfa:	4b05      	ldr	r3, [pc, #20]	; (d5c10 <_ZN9IPAddressC1Ev+0x18>)
   d5bfc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5bfe:	2211      	movs	r2, #17
   d5c00:	f840 3b04 	str.w	r3, [r0], #4
   d5c04:	2100      	movs	r1, #0
   d5c06:	f000 ff95 	bl	d6b34 <memset>
}
   d5c0a:	4620      	mov	r0, r4
   d5c0c:	bd10      	pop	{r4, pc}
   d5c0e:	bf00      	nop
   d5c10:	000d70d8 	.word	0x000d70d8

000d5c14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5c14:	4603      	mov	r3, r0
   d5c16:	4a07      	ldr	r2, [pc, #28]	; (d5c34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5c18:	b510      	push	{r4, lr}
   d5c1a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5c1e:	f101 0210 	add.w	r2, r1, #16
   d5c22:	f851 4b04 	ldr.w	r4, [r1], #4
   d5c26:	f843 4b04 	str.w	r4, [r3], #4
   d5c2a:	4291      	cmp	r1, r2
   d5c2c:	d1f9      	bne.n	d5c22 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5c2e:	780a      	ldrb	r2, [r1, #0]
   d5c30:	701a      	strb	r2, [r3, #0]
}
   d5c32:	bd10      	pop	{r4, pc}
   d5c34:	000d70d8 	.word	0x000d70d8

000d5c38 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d5c38:	7d03      	ldrb	r3, [r0, #20]
   d5c3a:	2b04      	cmp	r3, #4
   d5c3c:	d104      	bne.n	d5c48 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d5c3e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5c40:	3800      	subs	r0, #0
   d5c42:	bf18      	it	ne
   d5c44:	2001      	movne	r0, #1
   d5c46:	4770      	bx	lr
    } else if (version() == 6) {
   d5c48:	2b06      	cmp	r3, #6
   d5c4a:	d107      	bne.n	d5c5c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5c4c:	6843      	ldr	r3, [r0, #4]
   d5c4e:	b93b      	cbnz	r3, d5c60 <_ZNK9IPAddresscvbEv+0x28>
   d5c50:	6883      	ldr	r3, [r0, #8]
   d5c52:	b92b      	cbnz	r3, d5c60 <_ZNK9IPAddresscvbEv+0x28>
   d5c54:	68c3      	ldr	r3, [r0, #12]
   d5c56:	b91b      	cbnz	r3, d5c60 <_ZNK9IPAddresscvbEv+0x28>
   d5c58:	6900      	ldr	r0, [r0, #16]
   d5c5a:	e7f1      	b.n	d5c40 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d5c5c:	2000      	movs	r0, #0
   d5c5e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5c60:	2001      	movs	r0, #1
}
   d5c62:	4770      	bx	lr

000d5c64 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5c64:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5c66:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5c6a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5c6e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5c72:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5c76:	2304      	movs	r3, #4
   d5c78:	6041      	str	r1, [r0, #4]
   d5c7a:	7503      	strb	r3, [r0, #20]
}
   d5c7c:	bd10      	pop	{r4, pc}
	...

000d5c80 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d5c80:	b513      	push	{r0, r1, r4, lr}
   d5c82:	4b05      	ldr	r3, [pc, #20]	; (d5c98 <_ZN9IPAddressC1EPKh+0x18>)
   d5c84:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d5c86:	78cb      	ldrb	r3, [r1, #3]
   d5c88:	9300      	str	r3, [sp, #0]
   d5c8a:	788b      	ldrb	r3, [r1, #2]
   d5c8c:	784a      	ldrb	r2, [r1, #1]
   d5c8e:	7809      	ldrb	r1, [r1, #0]
   d5c90:	f7ff ffe8 	bl	d5c64 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5c94:	b002      	add	sp, #8
   d5c96:	bd10      	pop	{r4, pc}
   d5c98:	000d70d8 	.word	0x000d70d8

000d5c9c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5c9c:	7441      	strb	r1, [r0, #17]
}
   d5c9e:	4770      	bx	lr

000d5ca0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5ca0:	4770      	bx	lr

000d5ca2 <_ZN9USBSerial4readEv>:
{
   d5ca2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5ca4:	2100      	movs	r1, #0
   d5ca6:	7c00      	ldrb	r0, [r0, #16]
   d5ca8:	f7ff fa9a 	bl	d51e0 <HAL_USB_USART_Receive_Data>
}
   d5cac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5cb0:	bd08      	pop	{r3, pc}

000d5cb2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5cb2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5cb4:	2101      	movs	r1, #1
   d5cb6:	7c00      	ldrb	r0, [r0, #16]
   d5cb8:	f7ff fa92 	bl	d51e0 <HAL_USB_USART_Receive_Data>
}
   d5cbc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5cc0:	bd08      	pop	{r3, pc}

000d5cc2 <_ZN9USBSerial17availableForWriteEv>:
{
   d5cc2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5cc4:	7c00      	ldrb	r0, [r0, #16]
   d5cc6:	f7ff fa83 	bl	d51d0 <HAL_USB_USART_Available_Data_For_Write>
}
   d5cca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5cce:	bd08      	pop	{r3, pc}

000d5cd0 <_ZN9USBSerial9availableEv>:
{
   d5cd0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5cd2:	7c00      	ldrb	r0, [r0, #16]
   d5cd4:	f7ff fa74 	bl	d51c0 <HAL_USB_USART_Available_Data>
}
   d5cd8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5cdc:	bd08      	pop	{r3, pc}

000d5cde <_ZN9USBSerial5writeEh>:
{
   d5cde:	b513      	push	{r0, r1, r4, lr}
   d5ce0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5ce2:	7c00      	ldrb	r0, [r0, #16]
{
   d5ce4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5ce6:	f7ff fa73 	bl	d51d0 <HAL_USB_USART_Available_Data_For_Write>
   d5cea:	2800      	cmp	r0, #0
   d5cec:	9901      	ldr	r1, [sp, #4]
   d5cee:	dc01      	bgt.n	d5cf4 <_ZN9USBSerial5writeEh+0x16>
   d5cf0:	7c60      	ldrb	r0, [r4, #17]
   d5cf2:	b120      	cbz	r0, d5cfe <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5cf4:	7c20      	ldrb	r0, [r4, #16]
   d5cf6:	f7ff fa7b 	bl	d51f0 <HAL_USB_USART_Send_Data>
   d5cfa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5cfe:	b002      	add	sp, #8
   d5d00:	bd10      	pop	{r4, pc}

000d5d02 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5d02:	7c00      	ldrb	r0, [r0, #16]
   d5d04:	f7ff ba7c 	b.w	d5200 <HAL_USB_USART_Flush_Data>

000d5d08 <_ZN9USBSerialD0Ev>:
   d5d08:	b510      	push	{r4, lr}
   d5d0a:	2114      	movs	r1, #20
   d5d0c:	4604      	mov	r4, r0
   d5d0e:	f000 fdd8 	bl	d68c2 <_ZdlPvj>
   d5d12:	4620      	mov	r0, r4
   d5d14:	bd10      	pop	{r4, pc}
	...

000d5d18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5d18:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5d1e:	4604      	mov	r4, r0
   d5d20:	4608      	mov	r0, r1
   d5d22:	2100      	movs	r1, #0
   d5d24:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5d28:	4b04      	ldr	r3, [pc, #16]	; (d5d3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5d2a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5d2c:	2301      	movs	r3, #1
  _serial = serial;
   d5d2e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5d30:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5d32:	4611      	mov	r1, r2
   d5d34:	f7ff fa34 	bl	d51a0 <HAL_USB_USART_Init>
}
   d5d38:	4620      	mov	r0, r4
   d5d3a:	bd10      	pop	{r4, pc}
   d5d3c:	000d70ec 	.word	0x000d70ec

000d5d40 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5d40:	7c00      	ldrb	r0, [r0, #16]
   d5d42:	2200      	movs	r2, #0
   d5d44:	f7ff ba34 	b.w	d51b0 <HAL_USB_USART_Begin>

000d5d48 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5d48:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5d4a:	2214      	movs	r2, #20
{
   d5d4c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5d4e:	2100      	movs	r1, #0
   d5d50:	f000 fef0 	bl	d6b34 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5d54:	4620      	mov	r0, r4
   d5d56:	bd10      	pop	{r4, pc}

000d5d58 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5d58:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5d5a:	4c10      	ldr	r4, [pc, #64]	; (d5d9c <_Z16_fetch_usbserialv+0x44>)
{
   d5d5c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5d5e:	a803      	add	r0, sp, #12
   d5d60:	f7ff fff2 	bl	d5d48 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5d64:	7821      	ldrb	r1, [r4, #0]
   d5d66:	f3bf 8f5b 	dmb	ish
   d5d6a:	f011 0101 	ands.w	r1, r1, #1
   d5d6e:	d111      	bne.n	d5d94 <_Z16_fetch_usbserialv+0x3c>
   d5d70:	4620      	mov	r0, r4
   d5d72:	9101      	str	r1, [sp, #4]
   d5d74:	f7fe f993 	bl	d409e <__cxa_guard_acquire>
   d5d78:	9901      	ldr	r1, [sp, #4]
   d5d7a:	b158      	cbz	r0, d5d94 <_Z16_fetch_usbserialv+0x3c>
   d5d7c:	aa03      	add	r2, sp, #12
   d5d7e:	4808      	ldr	r0, [pc, #32]	; (d5da0 <_Z16_fetch_usbserialv+0x48>)
   d5d80:	f7ff ffca 	bl	d5d18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5d84:	4620      	mov	r0, r4
   d5d86:	f7fe f98f 	bl	d40a8 <__cxa_guard_release>
   d5d8a:	4a06      	ldr	r2, [pc, #24]	; (d5da4 <_Z16_fetch_usbserialv+0x4c>)
   d5d8c:	4906      	ldr	r1, [pc, #24]	; (d5da8 <_Z16_fetch_usbserialv+0x50>)
   d5d8e:	4804      	ldr	r0, [pc, #16]	; (d5da0 <_Z16_fetch_usbserialv+0x48>)
   d5d90:	f000 fd92 	bl	d68b8 <__aeabi_atexit>
	return _usbserial;
}
   d5d94:	4802      	ldr	r0, [pc, #8]	; (d5da0 <_Z16_fetch_usbserialv+0x48>)
   d5d96:	b008      	add	sp, #32
   d5d98:	bd10      	pop	{r4, pc}
   d5d9a:	bf00      	nop
   d5d9c:	2003e68c 	.word	0x2003e68c
   d5da0:	2003e690 	.word	0x2003e690
   d5da4:	2003e164 	.word	0x2003e164
   d5da8:	000d5ca1 	.word	0x000d5ca1

000d5dac <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5dac:	4770      	bx	lr

000d5dae <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5dae:	7441      	strb	r1, [r0, #17]
}
   d5db0:	4770      	bx	lr

000d5db2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5db2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5db4:	7c00      	ldrb	r0, [r0, #16]
   d5db6:	f7ff f913 	bl	d4fe0 <hal_usart_available_data_for_write>
}
   d5dba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5dbe:	bd08      	pop	{r3, pc}

000d5dc0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5dc0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5dc2:	7c00      	ldrb	r0, [r0, #16]
   d5dc4:	f7ff f8e4 	bl	d4f90 <hal_usart_available>
}
   d5dc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5dcc:	bd08      	pop	{r3, pc}

000d5dce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5dce:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5dd0:	7c00      	ldrb	r0, [r0, #16]
   d5dd2:	f7ff f8ed 	bl	d4fb0 <hal_usart_peek>
}
   d5dd6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5dda:	bd08      	pop	{r3, pc}

000d5ddc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5ddc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5dde:	7c00      	ldrb	r0, [r0, #16]
   d5de0:	f7ff f8de 	bl	d4fa0 <hal_usart_read>
}
   d5de4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5de8:	bd08      	pop	{r3, pc}

000d5dea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5dea:	7c00      	ldrb	r0, [r0, #16]
   d5dec:	f7ff b8e8 	b.w	d4fc0 <hal_usart_flush>

000d5df0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5df0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5df2:	7c45      	ldrb	r5, [r0, #17]
{
   d5df4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5df6:	b12d      	cbz	r5, d5e04 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5df8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5dfa:	b003      	add	sp, #12
   d5dfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5e00:	f7ff b8be 	b.w	d4f80 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5e04:	7c00      	ldrb	r0, [r0, #16]
   d5e06:	9101      	str	r1, [sp, #4]
   d5e08:	f7ff f8ea 	bl	d4fe0 <hal_usart_available_data_for_write>
   d5e0c:	2800      	cmp	r0, #0
   d5e0e:	9901      	ldr	r1, [sp, #4]
   d5e10:	dcf2      	bgt.n	d5df8 <_ZN11USARTSerial5writeEh+0x8>
}
   d5e12:	4628      	mov	r0, r5
   d5e14:	b003      	add	sp, #12
   d5e16:	bd30      	pop	{r4, r5, pc}

000d5e18 <_ZN11USARTSerialD0Ev>:
   d5e18:	b510      	push	{r4, lr}
   d5e1a:	2114      	movs	r1, #20
   d5e1c:	4604      	mov	r4, r0
   d5e1e:	f000 fd50 	bl	d68c2 <_ZdlPvj>
   d5e22:	4620      	mov	r0, r4
   d5e24:	bd10      	pop	{r4, pc}
	...

000d5e28 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5e28:	b510      	push	{r4, lr}
   d5e2a:	f04f 0c00 	mov.w	ip, #0
   d5e2e:	4604      	mov	r4, r0
   d5e30:	4608      	mov	r0, r1
   d5e32:	4611      	mov	r1, r2
   d5e34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5e38:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5e3c:	4a04      	ldr	r2, [pc, #16]	; (d5e50 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5e3e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5e40:	2201      	movs	r2, #1
  _serial = serial;
   d5e42:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5e44:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5e46:	461a      	mov	r2, r3
   d5e48:	f7ff f892 	bl	d4f70 <hal_usart_init>
}
   d5e4c:	4620      	mov	r0, r4
   d5e4e:	bd10      	pop	{r4, pc}
   d5e50:	000d711c 	.word	0x000d711c

000d5e54 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5e54:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5e56:	4c0e      	ldr	r4, [pc, #56]	; (d5e90 <_Z22__fetch_global_Serial1v+0x3c>)
   d5e58:	7821      	ldrb	r1, [r4, #0]
   d5e5a:	f3bf 8f5b 	dmb	ish
   d5e5e:	f011 0101 	ands.w	r1, r1, #1
   d5e62:	d112      	bne.n	d5e8a <_Z22__fetch_global_Serial1v+0x36>
   d5e64:	4620      	mov	r0, r4
   d5e66:	9101      	str	r1, [sp, #4]
   d5e68:	f7fe f919 	bl	d409e <__cxa_guard_acquire>
   d5e6c:	9901      	ldr	r1, [sp, #4]
   d5e6e:	b160      	cbz	r0, d5e8a <_Z22__fetch_global_Serial1v+0x36>
   d5e70:	4a08      	ldr	r2, [pc, #32]	; (d5e94 <_Z22__fetch_global_Serial1v+0x40>)
   d5e72:	4b09      	ldr	r3, [pc, #36]	; (d5e98 <_Z22__fetch_global_Serial1v+0x44>)
   d5e74:	4809      	ldr	r0, [pc, #36]	; (d5e9c <_Z22__fetch_global_Serial1v+0x48>)
   d5e76:	f7ff ffd7 	bl	d5e28 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5e7a:	4620      	mov	r0, r4
   d5e7c:	f7fe f914 	bl	d40a8 <__cxa_guard_release>
   d5e80:	4a07      	ldr	r2, [pc, #28]	; (d5ea0 <_Z22__fetch_global_Serial1v+0x4c>)
   d5e82:	4908      	ldr	r1, [pc, #32]	; (d5ea4 <_Z22__fetch_global_Serial1v+0x50>)
   d5e84:	4805      	ldr	r0, [pc, #20]	; (d5e9c <_Z22__fetch_global_Serial1v+0x48>)
   d5e86:	f000 fd17 	bl	d68b8 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5e8a:	4804      	ldr	r0, [pc, #16]	; (d5e9c <_Z22__fetch_global_Serial1v+0x48>)
   d5e8c:	b002      	add	sp, #8
   d5e8e:	bd10      	pop	{r4, pc}
   d5e90:	2003e6a4 	.word	0x2003e6a4
   d5e94:	2003e6a8 	.word	0x2003e6a8
   d5e98:	2003e72c 	.word	0x2003e72c
   d5e9c:	2003e7b0 	.word	0x2003e7b0
   d5ea0:	2003e164 	.word	0x2003e164
   d5ea4:	000d5dad 	.word	0x000d5dad

000d5ea8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5ea8:	4770      	bx	lr

000d5eaa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5eac:	4606      	mov	r6, r0
   d5eae:	4615      	mov	r5, r2
   d5eb0:	460c      	mov	r4, r1
   d5eb2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5eb4:	42bc      	cmp	r4, r7
   d5eb6:	d006      	beq.n	d5ec6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5eb8:	6833      	ldr	r3, [r6, #0]
   d5eba:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5ebe:	689b      	ldr	r3, [r3, #8]
   d5ec0:	4630      	mov	r0, r6
   d5ec2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5ec4:	e7f6      	b.n	d5eb4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5ec6:	4628      	mov	r0, r5
   d5ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5eca <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5eca:	7c00      	ldrb	r0, [r0, #16]
   d5ecc:	2200      	movs	r2, #0
   d5ece:	f7ff b8a7 	b.w	d5020 <hal_i2c_write>

000d5ed2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5ed2:	7c00      	ldrb	r0, [r0, #16]
   d5ed4:	2100      	movs	r1, #0
   d5ed6:	f7ff b8ab 	b.w	d5030 <hal_i2c_available>

000d5eda <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5eda:	7c00      	ldrb	r0, [r0, #16]
   d5edc:	2100      	movs	r1, #0
   d5ede:	f7ff b8af 	b.w	d5040 <hal_i2c_read>

000d5ee2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5ee2:	7c00      	ldrb	r0, [r0, #16]
   d5ee4:	2100      	movs	r1, #0
   d5ee6:	f7ff b8b3 	b.w	d5050 <hal_i2c_peek>

000d5eea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5eea:	7c00      	ldrb	r0, [r0, #16]
   d5eec:	2100      	movs	r1, #0
   d5eee:	f7ff b8b7 	b.w	d5060 <hal_i2c_flush>

000d5ef2 <_ZN7TwoWireD0Ev>:
   d5ef2:	b510      	push	{r4, lr}
   d5ef4:	2114      	movs	r1, #20
   d5ef6:	4604      	mov	r4, r0
   d5ef8:	f000 fce3 	bl	d68c2 <_ZdlPvj>
   d5efc:	4620      	mov	r0, r4
   d5efe:	bd10      	pop	{r4, pc}

000d5f00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5f00:	b510      	push	{r4, lr}
   d5f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5f06:	4604      	mov	r4, r0
   d5f08:	4608      	mov	r0, r1
   d5f0a:	2100      	movs	r1, #0
   d5f0c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5f10:	4b03      	ldr	r3, [pc, #12]	; (d5f20 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5f12:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5f14:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5f16:	4611      	mov	r1, r2
   d5f18:	f7ff f8b2 	bl	d5080 <hal_i2c_init>
}
   d5f1c:	4620      	mov	r0, r4
   d5f1e:	bd10      	pop	{r4, pc}
   d5f20:	000d714c 	.word	0x000d714c

000d5f24 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5f24:	2300      	movs	r3, #0
   d5f26:	7c00      	ldrb	r0, [r0, #16]
   d5f28:	461a      	mov	r2, r3
   d5f2a:	4619      	mov	r1, r3
   d5f2c:	f7ff b860 	b.w	d4ff0 <hal_i2c_begin>

000d5f30 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5f30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d5f32:	2200      	movs	r2, #0
   d5f34:	2314      	movs	r3, #20
   d5f36:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d5f3a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d5f3e:	780b      	ldrb	r3, [r1, #0]
   d5f40:	f88d 3008 	strb.w	r3, [sp, #8]
   d5f44:	684b      	ldr	r3, [r1, #4]
   d5f46:	9303      	str	r3, [sp, #12]
   d5f48:	68cb      	ldr	r3, [r1, #12]
   d5f4a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d5f4c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d5f4e:	7a0b      	ldrb	r3, [r1, #8]
   d5f50:	9305      	str	r3, [sp, #20]
   d5f52:	a901      	add	r1, sp, #4
   d5f54:	f7ff f89c 	bl	d5090 <hal_i2c_request_ex>
}
   d5f58:	b007      	add	sp, #28
   d5f5a:	f85d fb04 	ldr.w	pc, [sp], #4

000d5f5e <_ZN7TwoWire11requestFromEhjh>:
{
   d5f5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5f60:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5f62:	f88d 1000 	strb.w	r1, [sp]
   d5f66:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5f6a:	9103      	str	r1, [sp, #12]
   d5f6c:	bf18      	it	ne
   d5f6e:	2301      	movne	r3, #1
   d5f70:	4669      	mov	r1, sp
    size_ = size;
   d5f72:	9201      	str	r2, [sp, #4]
   d5f74:	f88d 3008 	strb.w	r3, [sp, #8]
   d5f78:	f7ff ffda 	bl	d5f30 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5f7c:	b005      	add	sp, #20
   d5f7e:	f85d fb04 	ldr.w	pc, [sp], #4

000d5f82 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d5f82:	2301      	movs	r3, #1
   d5f84:	f7ff bfeb 	b.w	d5f5e <_ZN7TwoWire11requestFromEhjh>

000d5f88 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d5f88:	7c00      	ldrb	r0, [r0, #16]
   d5f8a:	2200      	movs	r2, #0
   d5f8c:	f7ff b838 	b.w	d5000 <hal_i2c_begin_transmission>

000d5f90 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d5f90:	b2c9      	uxtb	r1, r1
   d5f92:	f7ff bff9 	b.w	d5f88 <_ZN7TwoWire17beginTransmissionEh>

000d5f96 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d5f96:	7c00      	ldrb	r0, [r0, #16]
   d5f98:	2200      	movs	r2, #0
   d5f9a:	f7ff b839 	b.w	d5010 <hal_i2c_end_transmission>

000d5f9e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d5f9e:	2101      	movs	r1, #1
   d5fa0:	f7ff bff9 	b.w	d5f96 <_ZN7TwoWire15endTransmissionEh>

000d5fa4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d5fa4:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5fa6:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d5fa8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5fac:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5fae:	2201      	movs	r2, #1
   d5fb0:	f04f 33ff 	mov.w	r3, #4294967295
   d5fb4:	f10d 0107 	add.w	r1, sp, #7
   d5fb8:	47a0      	blx	r4
}
   d5fba:	b002      	add	sp, #8
   d5fbc:	bd10      	pop	{r4, pc}

000d5fbe <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d5fbe:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5fc0:	6803      	ldr	r3, [r0, #0]
   d5fc2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5fc4:	f04f 33ff 	mov.w	r3, #4294967295
   d5fc8:	46a4      	mov	ip, r4
}
   d5fca:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5fce:	4760      	bx	ip

000d5fd0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5fd0:	b513      	push	{r0, r1, r4, lr}
   d5fd2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d5fd4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5fd6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d5fda:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d5fdc:	f10d 0107 	add.w	r1, sp, #7
   d5fe0:	2201      	movs	r2, #1
   d5fe2:	47a0      	blx	r4
}
   d5fe4:	b002      	add	sp, #8
   d5fe6:	bd10      	pop	{r4, pc}

000d5fe8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d5fe8:	4770      	bx	lr

000d5fea <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5fea:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5fec:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d5fee:	681a      	ldr	r2, [r3, #0]
   d5ff0:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d5ff2:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d5ff4:	da10      	bge.n	d6018 <_ZN9TCPClient9connectedEv+0x2e>
   d5ff6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5ffa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5ffe:	429a      	cmp	r2, r3
   d6000:	d10a      	bne.n	d6018 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d6002:	6803      	ldr	r3, [r0, #0]
   d6004:	691b      	ldr	r3, [r3, #16]
   d6006:	4798      	blx	r3
        if (!rv) {
   d6008:	4604      	mov	r4, r0
   d600a:	b928      	cbnz	r0, d6018 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d600c:	682b      	ldr	r3, [r5, #0]
   d600e:	4628      	mov	r0, r5
   d6010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6012:	4798      	blx	r3
        rv = available();
   d6014:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d6016:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d6018:	2001      	movs	r0, #1
   d601a:	e7fc      	b.n	d6016 <_ZN9TCPClient9connectedEv+0x2c>

000d601c <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d601c:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d601e:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d6020:	43c0      	mvns	r0, r0
   d6022:	0fc0      	lsrs	r0, r0, #31
   d6024:	4770      	bx	lr

000d6026 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6026:	4770      	bx	lr

000d6028 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6028:	4b06      	ldr	r3, [pc, #24]	; (d6044 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d602a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d602c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d602e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6032:	d005      	beq.n	d6040 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6034:	4608      	mov	r0, r1
   d6036:	f000 fc4b 	bl	d68d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d603a:	2800      	cmp	r0, #0
	return nullptr;
   d603c:	bf08      	it	eq
   d603e:	2400      	moveq	r4, #0
      }
   d6040:	4620      	mov	r0, r4
   d6042:	bd10      	pop	{r4, pc}
   d6044:	000d70a8 	.word	0x000d70a8

000d6048 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6048:	b510      	push	{r4, lr}
   d604a:	21ac      	movs	r1, #172	; 0xac
   d604c:	4604      	mov	r4, r0
   d604e:	f000 fc38 	bl	d68c2 <_ZdlPvj>
   d6052:	4620      	mov	r0, r4
   d6054:	bd10      	pop	{r4, pc}

000d6056 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d6056:	f7fe b820 	b.w	d409a <_ZdlPv>

000d605a <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d605a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d605e:	f04f 0800 	mov.w	r8, #0
   d6062:	b086      	sub	sp, #24
   d6064:	461d      	mov	r5, r3
   d6066:	f8c0 8004 	str.w	r8, [r0, #4]
   d606a:	4604      	mov	r4, r0
   d606c:	460e      	mov	r6, r1
   d606e:	4617      	mov	r7, r2
    struct timeval tv = {};
   d6070:	4641      	mov	r1, r8
   d6072:	2210      	movs	r2, #16
   d6074:	a802      	add	r0, sp, #8
   d6076:	f000 fd5d 	bl	d6b34 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d607a:	1c6b      	adds	r3, r5, #1
   d607c:	d009      	beq.n	d6092 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d607e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6082:	fbb5 f3f0 	udiv	r3, r5, r0
   d6086:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d608a:	fb00 5313 	mls	r3, r0, r3, r5
   d608e:	4358      	muls	r0, r3
   d6090:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6092:	6960      	ldr	r0, [r4, #20]
   d6094:	2310      	movs	r3, #16
   d6096:	9300      	str	r3, [sp, #0]
   d6098:	6800      	ldr	r0, [r0, #0]
   d609a:	ab02      	add	r3, sp, #8
   d609c:	f241 0205 	movw	r2, #4101	; 0x1005
   d60a0:	f640 71ff 	movw	r1, #4095	; 0xfff
   d60a4:	f7fe fffc 	bl	d50a0 <sock_setsockopt>
    if (ret < 0) {
   d60a8:	2800      	cmp	r0, #0
   d60aa:	da07      	bge.n	d60bc <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d60ac:	f7ff f976 	bl	d539c <__errno>
   d60b0:	6803      	ldr	r3, [r0, #0]
   d60b2:	6063      	str	r3, [r4, #4]
        return 0;
   d60b4:	2000      	movs	r0, #0
}
   d60b6:	b006      	add	sp, #24
   d60b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d60bc:	6960      	ldr	r0, [r4, #20]
   d60be:	2300      	movs	r3, #0
   d60c0:	6800      	ldr	r0, [r0, #0]
   d60c2:	463a      	mov	r2, r7
   d60c4:	4631      	mov	r1, r6
   d60c6:	f7ff f80b 	bl	d50e0 <sock_send>
    if (ret < 0) {
   d60ca:	1e03      	subs	r3, r0, #0
   d60cc:	dbee      	blt.n	d60ac <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d60ce:	4618      	mov	r0, r3
   d60d0:	e7f1      	b.n	d60b6 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d60d4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d60d4:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d60d6:	6984      	ldr	r4, [r0, #24]
   d60d8:	4b0a      	ldr	r3, [pc, #40]	; (d6104 <_ZN9TCPClientD1Ev+0x30>)
   d60da:	6003      	str	r3, [r0, #0]
   d60dc:	4605      	mov	r5, r0
   d60de:	b17c      	cbz	r4, d6100 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d60e0:	6863      	ldr	r3, [r4, #4]
   d60e2:	3b01      	subs	r3, #1
   d60e4:	6063      	str	r3, [r4, #4]
   d60e6:	b95b      	cbnz	r3, d6100 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d60e8:	6823      	ldr	r3, [r4, #0]
   d60ea:	4620      	mov	r0, r4
   d60ec:	689b      	ldr	r3, [r3, #8]
   d60ee:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d60f0:	68a3      	ldr	r3, [r4, #8]
   d60f2:	3b01      	subs	r3, #1
   d60f4:	60a3      	str	r3, [r4, #8]
   d60f6:	b91b      	cbnz	r3, d6100 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d60f8:	6823      	ldr	r3, [r4, #0]
   d60fa:	4620      	mov	r0, r4
   d60fc:	68db      	ldr	r3, [r3, #12]
   d60fe:	4798      	blx	r3
   d6100:	4628      	mov	r0, r5
   d6102:	bd38      	pop	{r3, r4, r5, pc}
   d6104:	000d71a0 	.word	0x000d71a0

000d6108 <_ZN9TCPClientD0Ev>:
   d6108:	b510      	push	{r4, lr}
   d610a:	4604      	mov	r4, r0
   d610c:	f7ff ffe2 	bl	d60d4 <_ZN9TCPClientD1Ev>
   d6110:	4620      	mov	r0, r4
   d6112:	211c      	movs	r1, #28
   d6114:	f000 fbd5 	bl	d68c2 <_ZdlPvj>
   d6118:	4620      	mov	r0, r4
   d611a:	bd10      	pop	{r4, pc}

000d611c <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d611c:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d611e:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d6120:	4b05      	ldr	r3, [pc, #20]	; (d6138 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d6122:	4604      	mov	r4, r0
   d6124:	358c      	adds	r5, #140	; 0x8c
   d6126:	f844 3b04 	str.w	r3, [r4], #4
   d612a:	4606      	mov	r6, r0
   d612c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d612e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6130:	682b      	ldr	r3, [r5, #0]
   d6132:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d6134:	4630      	mov	r0, r6
   d6136:	bd70      	pop	{r4, r5, r6, pc}
   d6138:	000d70d8 	.word	0x000d70d8

000d613c <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d613c:	b510      	push	{r4, lr}
   d613e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6140:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6144:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6148:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d614a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d614c:	d005      	beq.n	d615a <_ZN9TCPClient4peekEv+0x1e>
   d614e:	6963      	ldr	r3, [r4, #20]
   d6150:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d6154:	4413      	add	r3, r2
   d6156:	7918      	ldrb	r0, [r3, #4]
}
   d6158:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d615a:	6803      	ldr	r3, [r0, #0]
   d615c:	691b      	ldr	r3, [r3, #16]
   d615e:	4798      	blx	r3
   d6160:	2800      	cmp	r0, #0
   d6162:	d1f4      	bne.n	d614e <_ZN9TCPClient4peekEv+0x12>
   d6164:	f04f 30ff 	mov.w	r0, #4294967295
   d6168:	e7f6      	b.n	d6158 <_ZN9TCPClient4peekEv+0x1c>

000d616a <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d616a:	b510      	push	{r4, lr}
   d616c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d616e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6172:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6176:	429a      	cmp	r2, r3
int TCPClient::read() {
   d6178:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d617a:	d008      	beq.n	d618e <_ZN9TCPClient4readEv+0x24>
   d617c:	6963      	ldr	r3, [r4, #20]
   d617e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d6182:	1c51      	adds	r1, r2, #1
   d6184:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d6188:	4413      	add	r3, r2
   d618a:	7918      	ldrb	r0, [r3, #4]
}
   d618c:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d618e:	6803      	ldr	r3, [r0, #0]
   d6190:	691b      	ldr	r3, [r3, #16]
   d6192:	4798      	blx	r3
   d6194:	2800      	cmp	r0, #0
   d6196:	d1f1      	bne.n	d617c <_ZN9TCPClient4readEv+0x12>
   d6198:	f04f 30ff 	mov.w	r0, #4294967295
   d619c:	e7f6      	b.n	d618c <_ZN9TCPClient4readEv+0x22>

000d619e <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d619e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d61a0:	6943      	ldr	r3, [r0, #20]
   d61a2:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d61a4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d61a8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d61ac:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d61ae:	4605      	mov	r5, r0
   d61b0:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d61b2:	d016      	beq.n	d61e2 <_ZN9TCPClient4readEPhj+0x44>
   d61b4:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d61b6:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d61ba:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d61be:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d61c0:	42bc      	cmp	r4, r7
   d61c2:	bf28      	it	cs
   d61c4:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d61c6:	3304      	adds	r3, #4
   d61c8:	4622      	mov	r2, r4
   d61ca:	4419      	add	r1, r3
   d61cc:	4630      	mov	r0, r6
   d61ce:	f000 fca3 	bl	d6b18 <memcpy>
   d61d2:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d61d4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d61d8:	4423      	add	r3, r4
   d61da:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d61de:	4620      	mov	r0, r4
   d61e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d61e2:	6803      	ldr	r3, [r0, #0]
   d61e4:	691b      	ldr	r3, [r3, #16]
   d61e6:	4798      	blx	r3
   d61e8:	2800      	cmp	r0, #0
   d61ea:	d1e3      	bne.n	d61b4 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d61ec:	f04f 34ff 	mov.w	r4, #4294967295
   d61f0:	e7f5      	b.n	d61de <_ZN9TCPClient4readEPhj+0x40>

000d61f2 <_ZN9TCPClient12flush_bufferEv>:
   d61f2:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d61f4:	2300      	movs	r3, #0
   d61f6:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d61fa:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d61fc:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d6200:	4770      	bx	lr

000d6202 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6206:	461f      	mov	r7, r3
    stop();
   d6208:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d620a:	460c      	mov	r4, r1
    stop();
   d620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d620e:	b08a      	sub	sp, #40	; 0x28
   d6210:	4605      	mov	r5, r0
   d6212:	4616      	mov	r6, r2
    stop();
   d6214:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d6216:	7d23      	ldrb	r3, [r4, #20]
   d6218:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d621c:	2b04      	cmp	r3, #4
   d621e:	bf0c      	ite	eq
   d6220:	2002      	moveq	r0, #2
   d6222:	200a      	movne	r0, #10
   d6224:	2206      	movs	r2, #6
   d6226:	2101      	movs	r1, #1
   d6228:	f7fe ff62 	bl	d50f0 <sock_socket>
   d622c:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d6230:	696b      	ldr	r3, [r5, #20]
   d6232:	681b      	ldr	r3, [r3, #0]
   d6234:	2b00      	cmp	r3, #0
   d6236:	da08      	bge.n	d624a <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d6238:	682b      	ldr	r3, [r5, #0]
   d623a:	4628      	mov	r0, r5
   d623c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d623e:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d6240:	4798      	blx	r3
}
   d6242:	4620      	mov	r0, r4
   d6244:	b00a      	add	sp, #40	; 0x28
   d6246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d624a:	4628      	mov	r0, r5
   d624c:	f7ff ffd1 	bl	d61f2 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d6250:	b1b7      	cbz	r7, d6280 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d6252:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6254:	a903      	add	r1, sp, #12
   d6256:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d6258:	9303      	str	r3, [sp, #12]
   d625a:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d625e:	f7fe fe47 	bl	d4ef0 <if_index_to_name>
   d6262:	2800      	cmp	r0, #0
   d6264:	d1e8      	bne.n	d6238 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d6266:	6968      	ldr	r0, [r5, #20]
   d6268:	2306      	movs	r3, #6
   d626a:	9300      	str	r3, [sp, #0]
   d626c:	6800      	ldr	r0, [r0, #0]
   d626e:	ab03      	add	r3, sp, #12
   d6270:	f241 020b 	movw	r2, #4107	; 0x100b
   d6274:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6278:	f7fe ff12 	bl	d50a0 <sock_setsockopt>
   d627c:	2800      	cmp	r0, #0
   d627e:	d1db      	bne.n	d6238 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d6280:	221c      	movs	r2, #28
   d6282:	2100      	movs	r1, #0
   d6284:	a803      	add	r0, sp, #12
   d6286:	f000 fc55 	bl	d6b34 <memset>
    if (ip.version() == 4) {
   d628a:	7d23      	ldrb	r3, [r4, #20]
   d628c:	2b04      	cmp	r3, #4
   d628e:	d11d      	bne.n	d62cc <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d6290:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d6294:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d6296:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d629a:	f7fe fe61 	bl	d4f60 <inet_htons>
   d629e:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d62a2:	6860      	ldr	r0, [r4, #4]
   d62a4:	f7fe fe54 	bl	d4f50 <inet_htonl>
   d62a8:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d62aa:	696b      	ldr	r3, [r5, #20]
   d62ac:	221c      	movs	r2, #28
   d62ae:	6818      	ldr	r0, [r3, #0]
   d62b0:	a903      	add	r1, sp, #12
   d62b2:	f7fe ff05 	bl	d50c0 <sock_connect>
   d62b6:	2800      	cmp	r0, #0
   d62b8:	d1be      	bne.n	d6238 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d62ba:	3404      	adds	r4, #4
   d62bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d62be:	696d      	ldr	r5, [r5, #20]
   d62c0:	358c      	adds	r5, #140	; 0x8c
   d62c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d62c4:	6823      	ldr	r3, [r4, #0]
   d62c6:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d62c8:	2401      	movs	r4, #1
   d62ca:	e7ba      	b.n	d6242 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d62cc:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d62d0:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d62d2:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d62d6:	f7fe fe43 	bl	d4f60 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d62da:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d62dc:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d62e0:	1d23      	adds	r3, r4, #4
   d62e2:	f104 0714 	add.w	r7, r4, #20
   d62e6:	6818      	ldr	r0, [r3, #0]
   d62e8:	6859      	ldr	r1, [r3, #4]
   d62ea:	4632      	mov	r2, r6
   d62ec:	c203      	stmia	r2!, {r0, r1}
   d62ee:	3308      	adds	r3, #8
   d62f0:	42bb      	cmp	r3, r7
   d62f2:	4616      	mov	r6, r2
   d62f4:	d1f7      	bne.n	d62e6 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d62f6:	e7d8      	b.n	d62aa <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d62f8 <_ZN9TCPClient9availableEv>:
{
   d62f8:	b530      	push	{r4, r5, lr}
   d62fa:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d62fc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d6300:	b08b      	sub	sp, #44	; 0x2c
   d6302:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d6304:	b12b      	cbz	r3, d6312 <_ZN9TCPClient9availableEv+0x1a>
   d6306:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d630a:	429a      	cmp	r2, r3
   d630c:	d101      	bne.n	d6312 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d630e:	f7ff ff70 	bl	d61f2 <_ZN9TCPClient12flush_bufferEv>
   d6312:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d6314:	6808      	ldr	r0, [r1, #0]
   d6316:	2800      	cmp	r0, #0
   d6318:	db18      	blt.n	d634c <_ZN9TCPClient9availableEv+0x54>
   d631a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d631e:	2d7f      	cmp	r5, #127	; 0x7f
   d6320:	d814      	bhi.n	d634c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d6322:	3104      	adds	r1, #4
   d6324:	2308      	movs	r3, #8
   d6326:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d632a:	4429      	add	r1, r5
   d632c:	f7fe fed0 	bl	d50d0 <sock_recv>
            if (ret > 0) {
   d6330:	2800      	cmp	r0, #0
   d6332:	dd13      	ble.n	d635c <_ZN9TCPClient9availableEv+0x64>
   d6334:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d6336:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d633a:	b90a      	cbnz	r2, d6340 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d633c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d6340:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d6342:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6346:	4410      	add	r0, r2
   d6348:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d634c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d634e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d6352:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d6356:	1ac0      	subs	r0, r0, r3
   d6358:	b00b      	add	sp, #44	; 0x2c
   d635a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d635c:	f7ff f81e 	bl	d539c <__errno>
   d6360:	6803      	ldr	r3, [r0, #0]
   d6362:	2b0b      	cmp	r3, #11
   d6364:	d0f2      	beq.n	d634c <_ZN9TCPClient9availableEv+0x54>
   d6366:	f7ff f819 	bl	d539c <__errno>
   d636a:	6803      	ldr	r3, [r0, #0]
   d636c:	2b0b      	cmp	r3, #11
   d636e:	d0ed      	beq.n	d634c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d6370:	2320      	movs	r3, #32
   d6372:	2500      	movs	r5, #0
   d6374:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d6378:	f7ff f810 	bl	d539c <__errno>
   d637c:	6803      	ldr	r3, [r0, #0]
   d637e:	9301      	str	r3, [sp, #4]
   d6380:	4b08      	ldr	r3, [pc, #32]	; (d63a4 <_ZN9TCPClient9availableEv+0xac>)
   d6382:	4909      	ldr	r1, [pc, #36]	; (d63a8 <_ZN9TCPClient9availableEv+0xb0>)
   d6384:	9300      	str	r3, [sp, #0]
   d6386:	aa02      	add	r2, sp, #8
   d6388:	462b      	mov	r3, r5
   d638a:	2032      	movs	r0, #50	; 0x32
   d638c:	f7fe ff40 	bl	d5210 <log_message>
                    sock_close(d_->sock);
   d6390:	6963      	ldr	r3, [r4, #20]
   d6392:	6818      	ldr	r0, [r3, #0]
   d6394:	f7fe fe8c 	bl	d50b0 <sock_close>
   d6398:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d639a:	f04f 32ff 	mov.w	r2, #4294967295
   d639e:	601a      	str	r2, [r3, #0]
   d63a0:	e7d4      	b.n	d634c <_ZN9TCPClient9availableEv+0x54>
   d63a2:	bf00      	nop
   d63a4:	000d716c 	.word	0x000d716c
   d63a8:	000d7078 	.word	0x000d7078

000d63ac <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d63ac:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d63ae:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d63b0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d63b2:	6818      	ldr	r0, [r3, #0]
   d63b4:	2800      	cmp	r0, #0
   d63b6:	db01      	blt.n	d63bc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d63b8:	f7fe fe7a 	bl	d50b0 <sock_close>
   d63bc:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d63be:	f04f 32ff 	mov.w	r2, #4294967295
   d63c2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d63c4:	6960      	ldr	r0, [r4, #20]
   d63c6:	2211      	movs	r2, #17
   d63c8:	2100      	movs	r1, #0
   d63ca:	308c      	adds	r0, #140	; 0x8c
   d63cc:	f000 fbb2 	bl	d6b34 <memset>
    flush_buffer();
   d63d0:	4620      	mov	r0, r4
}
   d63d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d63d6:	f7ff bf0c 	b.w	d61f2 <_ZN9TCPClient12flush_bufferEv>

000d63da <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d63da:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d63dc:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d63de:	4604      	mov	r4, r0
          total(0) {
   d63e0:	6001      	str	r1, [r0, #0]
   d63e2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d63e6:	3088      	adds	r0, #136	; 0x88
   d63e8:	f7ff fc06 	bl	d5bf8 <_ZN9IPAddressC1Ev>
}
   d63ec:	4620      	mov	r0, r4
   d63ee:	bd10      	pop	{r4, pc}

000d63f0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d63f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d63f2:	2300      	movs	r3, #0
   d63f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d63f8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d63fc:	4a0e      	ldr	r2, [pc, #56]	; (d6438 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d63fe:	6103      	str	r3, [r0, #16]
   d6400:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6402:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d6404:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6406:	20ac      	movs	r0, #172	; 0xac
   d6408:	9101      	str	r1, [sp, #4]
   d640a:	f7fd fe42 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d640e:	1e05      	subs	r5, r0, #0
   d6410:	f105 060c 	add.w	r6, r5, #12
   d6414:	d008      	beq.n	d6428 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d6416:	2301      	movs	r3, #1
   d6418:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d641c:	4b07      	ldr	r3, [pc, #28]	; (d643c <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d641e:	9901      	ldr	r1, [sp, #4]
   d6420:	602b      	str	r3, [r5, #0]
   d6422:	4630      	mov	r0, r6
   d6424:	f7ff ffd9 	bl	d63da <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d6428:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d642a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d642e:	f7ff fee0 	bl	d61f2 <_ZN9TCPClient12flush_bufferEv>
}
   d6432:	b002      	add	sp, #8
   d6434:	bd70      	pop	{r4, r5, r6, pc}
   d6436:	bf00      	nop
   d6438:	000d71a0 	.word	0x000d71a0
   d643c:	000d7184 	.word	0x000d7184

000d6440 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d6440:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d6442:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d6446:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6448:	f7ff ffd2 	bl	d63f0 <_ZN9TCPClientC1Ei>
}
   d644c:	4620      	mov	r0, r4
   d644e:	bd10      	pop	{r4, pc}

000d6450 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d6450:	b510      	push	{r4, lr}
   d6452:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6454:	6800      	ldr	r0, [r0, #0]
   d6456:	2800      	cmp	r0, #0
   d6458:	db01      	blt.n	d645e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d645a:	f7fe fe29 	bl	d50b0 <sock_close>
    }
}
   d645e:	4620      	mov	r0, r4
   d6460:	bd10      	pop	{r4, pc}

000d6462 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d6462:	300c      	adds	r0, #12
   d6464:	f7ff bff4 	b.w	d6450 <_ZN9TCPClient4DataD1Ev>

000d6468 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d646c:	4698      	mov	r8, r3
    stop();
   d646e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6470:	b093      	sub	sp, #76	; 0x4c
   d6472:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d6474:	2400      	movs	r4, #0
    stop();
   d6476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6478:	4606      	mov	r6, r0
   d647a:	4617      	mov	r7, r2
    stop();
   d647c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d647e:	4628      	mov	r0, r5
   d6480:	466b      	mov	r3, sp
   d6482:	4622      	mov	r2, r4
   d6484:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d6486:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6488:	f7fe fd0a 	bl	d4ea0 <netdb_getaddrinfo>
   d648c:	4605      	mov	r5, r0
   d648e:	2800      	cmp	r0, #0
   d6490:	d163      	bne.n	d655a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d6492:	9b00      	ldr	r3, [sp, #0]
   d6494:	2b00      	cmp	r3, #0
   d6496:	d04b      	beq.n	d6530 <_ZN9TCPClient7connectEPKctm+0xc8>
   d6498:	695b      	ldr	r3, [r3, #20]
   d649a:	2b00      	cmp	r3, #0
   d649c:	d048      	beq.n	d6530 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d649e:	a806      	add	r0, sp, #24
   d64a0:	f7ff fbaa 	bl	d5bf8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d64a4:	9b00      	ldr	r3, [sp, #0]
   d64a6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d64a8:	7863      	ldrb	r3, [r4, #1]
   d64aa:	2b02      	cmp	r3, #2
   d64ac:	d104      	bne.n	d64b8 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d64ae:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d64b0:	a806      	add	r0, sp, #24
   d64b2:	f7ff f90f 	bl	d56d4 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d64b6:	e026      	b.n	d6506 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d64b8:	2b0a      	cmp	r3, #10
   d64ba:	d124      	bne.n	d6506 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d64bc:	2211      	movs	r2, #17
   d64be:	4629      	mov	r1, r5
   d64c0:	a801      	add	r0, sp, #4
   d64c2:	f000 fb37 	bl	d6b34 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d64c6:	68a3      	ldr	r3, [r4, #8]
   d64c8:	2b00      	cmp	r3, #0
   d64ca:	d038      	beq.n	d653e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d64cc:	f104 0308 	add.w	r3, r4, #8
   d64d0:	f10d 0c04 	add.w	ip, sp, #4
   d64d4:	3418      	adds	r4, #24
   d64d6:	6818      	ldr	r0, [r3, #0]
   d64d8:	6859      	ldr	r1, [r3, #4]
   d64da:	4662      	mov	r2, ip
   d64dc:	c203      	stmia	r2!, {r0, r1}
   d64de:	3308      	adds	r3, #8
   d64e0:	42a3      	cmp	r3, r4
   d64e2:	4694      	mov	ip, r2
   d64e4:	d1f7      	bne.n	d64d6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d64e6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d64e8:	a901      	add	r1, sp, #4
   d64ea:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d64ec:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d64f0:	f7ff fb90 	bl	d5c14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d64f4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d64f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d64fc:	ac07      	add	r4, sp, #28
   d64fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6500:	f8dc 3000 	ldr.w	r3, [ip]
   d6504:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d6506:	a806      	add	r0, sp, #24
   d6508:	f7ff fb96 	bl	d5c38 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d650c:	b180      	cbz	r0, d6530 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d650e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d6510:	ad07      	add	r5, sp, #28
   d6512:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d6516:	4b12      	ldr	r3, [pc, #72]	; (d6560 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d6518:	930c      	str	r3, [sp, #48]	; 0x30
   d651a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d651c:	ac0d      	add	r4, sp, #52	; 0x34
   d651e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6520:	682b      	ldr	r3, [r5, #0]
   d6522:	7023      	strb	r3, [r4, #0]
   d6524:	463a      	mov	r2, r7
   d6526:	4643      	mov	r3, r8
   d6528:	a90c      	add	r1, sp, #48	; 0x30
   d652a:	4630      	mov	r0, r6
   d652c:	47c8      	blx	r9
   d652e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d6530:	9800      	ldr	r0, [sp, #0]
   d6532:	f7fe fcad 	bl	d4e90 <netdb_freeaddrinfo>
}
   d6536:	4628      	mov	r0, r5
   d6538:	b013      	add	sp, #76	; 0x4c
   d653a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d653e:	68e3      	ldr	r3, [r4, #12]
   d6540:	2b00      	cmp	r3, #0
   d6542:	d1c3      	bne.n	d64cc <_ZN9TCPClient7connectEPKctm+0x64>
   d6544:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6548:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d654c:	f7fe fd00 	bl	d4f50 <inet_htonl>
   d6550:	4581      	cmp	r9, r0
   d6552:	d1bb      	bne.n	d64cc <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d6554:	f104 0114 	add.w	r1, r4, #20
   d6558:	e7aa      	b.n	d64b0 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d655a:	4625      	mov	r5, r4
   d655c:	e7e8      	b.n	d6530 <_ZN9TCPClient7connectEPKctm+0xc8>
   d655e:	bf00      	nop
   d6560:	000d70d8 	.word	0x000d70d8

000d6564 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6564:	2200      	movs	r2, #0
   d6566:	6840      	ldr	r0, [r0, #4]
   d6568:	4611      	mov	r1, r2
   d656a:	f7fe be9f 	b.w	d52ac <network_ready>

000d656e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d656e:	2200      	movs	r2, #0
   d6570:	6840      	ldr	r0, [r0, #4]
   d6572:	4611      	mov	r1, r2
   d6574:	f7fe beba 	b.w	d52ec <network_listening>

000d6578 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6578:	2200      	movs	r2, #0
   d657a:	6840      	ldr	r0, [r0, #4]
   d657c:	4611      	mov	r1, r2
   d657e:	f7fe bec5 	b.w	d530c <network_get_listen_timeout>

000d6582 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6582:	6840      	ldr	r0, [r0, #4]
   d6584:	2200      	movs	r2, #0
   d6586:	f7fe beb9 	b.w	d52fc <network_set_listen_timeout>

000d658a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d658a:	6840      	ldr	r0, [r0, #4]
   d658c:	2200      	movs	r2, #0
   d658e:	f081 0101 	eor.w	r1, r1, #1
   d6592:	f7fe bea3 	b.w	d52dc <network_listen>

000d6596 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6596:	2300      	movs	r3, #0
   d6598:	6840      	ldr	r0, [r0, #4]
   d659a:	461a      	mov	r2, r3
   d659c:	4619      	mov	r1, r3
   d659e:	f7fe be95 	b.w	d52cc <network_off>

000d65a2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d65a2:	2200      	movs	r2, #0
   d65a4:	6840      	ldr	r0, [r0, #4]
   d65a6:	4611      	mov	r1, r2
   d65a8:	f7fe be70 	b.w	d528c <network_connecting>

000d65ac <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d65ac:	6840      	ldr	r0, [r0, #4]
   d65ae:	2200      	movs	r2, #0
   d65b0:	2102      	movs	r1, #2
   d65b2:	f7fe be73 	b.w	d529c <network_disconnect>

000d65b6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d65b6:	2300      	movs	r3, #0
   d65b8:	6840      	ldr	r0, [r0, #4]
   d65ba:	461a      	mov	r2, r3
   d65bc:	f7fe be5e 	b.w	d527c <network_connect>

000d65c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d65c0:	4b02      	ldr	r3, [pc, #8]	; (d65cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d65c2:	2204      	movs	r2, #4
   d65c4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d65c6:	4a02      	ldr	r2, [pc, #8]	; (d65d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d65c8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d65ca:	4770      	bx	lr
   d65cc:	2003e7c4 	.word	0x2003e7c4
   d65d0:	000d71ec 	.word	0x000d71ec

000d65d4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d65d4:	2300      	movs	r3, #0
   d65d6:	6840      	ldr	r0, [r0, #4]
   d65d8:	461a      	mov	r2, r3
   d65da:	f7fe be4f 	b.w	d527c <network_connect>

000d65de <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d65de:	6840      	ldr	r0, [r0, #4]
   d65e0:	2200      	movs	r2, #0
   d65e2:	2102      	movs	r1, #2
   d65e4:	f7fe be5a 	b.w	d529c <network_disconnect>

000d65e8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d65e8:	2200      	movs	r2, #0
   d65ea:	6840      	ldr	r0, [r0, #4]
   d65ec:	4611      	mov	r1, r2
   d65ee:	f7fe be4d 	b.w	d528c <network_connecting>

000d65f2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d65f2:	2200      	movs	r2, #0
   d65f4:	6840      	ldr	r0, [r0, #4]
   d65f6:	4611      	mov	r1, r2
   d65f8:	f7fe be58 	b.w	d52ac <network_ready>

000d65fc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d65fc:	2300      	movs	r3, #0
   d65fe:	6840      	ldr	r0, [r0, #4]
   d6600:	461a      	mov	r2, r3
   d6602:	4619      	mov	r1, r3
   d6604:	f7fe be5a 	b.w	d52bc <network_on>

000d6608 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6608:	2300      	movs	r3, #0
   d660a:	6840      	ldr	r0, [r0, #4]
   d660c:	461a      	mov	r2, r3
   d660e:	4619      	mov	r1, r3
   d6610:	f7fe be5c 	b.w	d52cc <network_off>

000d6614 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6614:	6840      	ldr	r0, [r0, #4]
   d6616:	2100      	movs	r1, #0
   d6618:	f7fe be80 	b.w	d531c <network_is_on>

000d661c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d661c:	6840      	ldr	r0, [r0, #4]
   d661e:	2100      	movs	r1, #0
   d6620:	f7fe be84 	b.w	d532c <network_is_off>

000d6624 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6624:	6840      	ldr	r0, [r0, #4]
   d6626:	2200      	movs	r2, #0
   d6628:	f081 0101 	eor.w	r1, r1, #1
   d662c:	f7fe be56 	b.w	d52dc <network_listen>

000d6630 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6630:	6840      	ldr	r0, [r0, #4]
   d6632:	2200      	movs	r2, #0
   d6634:	f7fe be62 	b.w	d52fc <network_set_listen_timeout>

000d6638 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6638:	2200      	movs	r2, #0
   d663a:	6840      	ldr	r0, [r0, #4]
   d663c:	4611      	mov	r1, r2
   d663e:	f7fe be65 	b.w	d530c <network_get_listen_timeout>

000d6642 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6642:	2200      	movs	r2, #0
   d6644:	6840      	ldr	r0, [r0, #4]
   d6646:	4611      	mov	r1, r2
   d6648:	f7fe be50 	b.w	d52ec <network_listening>

000d664c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d664c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6650:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6652:	b095      	sub	sp, #84	; 0x54
   d6654:	4616      	mov	r6, r2
   d6656:	460d      	mov	r5, r1
   d6658:	4607      	mov	r7, r0
    IPAddress addr;
   d665a:	f7ff facd 	bl	d5bf8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d665e:	4621      	mov	r1, r4
   d6660:	2218      	movs	r2, #24
   d6662:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6664:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6666:	f000 fa65 	bl	d6b34 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d666a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d666c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6670:	4621      	mov	r1, r4
   d6672:	466b      	mov	r3, sp
   d6674:	aa0c      	add	r2, sp, #48	; 0x30
   d6676:	4630      	mov	r0, r6
   d6678:	f7fe fc12 	bl	d4ea0 <netdb_getaddrinfo>
    if (!r) {
   d667c:	4604      	mov	r4, r0
   d667e:	2800      	cmp	r0, #0
   d6680:	d14c      	bne.n	d671c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6682:	4602      	mov	r2, r0
   d6684:	2101      	movs	r1, #1
   d6686:	6868      	ldr	r0, [r5, #4]
   d6688:	f7fe fe10 	bl	d52ac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d668c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d668e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6690:	4622      	mov	r2, r4
   d6692:	6868      	ldr	r0, [r5, #4]
   d6694:	f7fe fe0a 	bl	d52ac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6698:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d669a:	4681      	mov	r9, r0
        bool ok = false;
   d669c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d669e:	2e00      	cmp	r6, #0
   d66a0:	d03c      	beq.n	d671c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d66a2:	2900      	cmp	r1, #0
   d66a4:	d13a      	bne.n	d671c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d66a6:	6873      	ldr	r3, [r6, #4]
   d66a8:	2b02      	cmp	r3, #2
   d66aa:	d003      	beq.n	d66b4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d66ac:	2b0a      	cmp	r3, #10
   d66ae:	d011      	beq.n	d66d4 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d66b0:	69f6      	ldr	r6, [r6, #28]
   d66b2:	e7f4      	b.n	d669e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d66b4:	f1b8 0f00 	cmp.w	r8, #0
   d66b8:	d00a      	beq.n	d66d0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d66ba:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d66bc:	a806      	add	r0, sp, #24
   d66be:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d66c0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d66c2:	f7ff fadd 	bl	d5c80 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d66c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d66c8:	1d3c      	adds	r4, r7, #4
   d66ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d66cc:	682b      	ldr	r3, [r5, #0]
   d66ce:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d66d0:	4641      	mov	r1, r8
   d66d2:	e7ed      	b.n	d66b0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d66d4:	f1b9 0f00 	cmp.w	r9, #0
   d66d8:	d101      	bne.n	d66de <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d66da:	4649      	mov	r1, r9
   d66dc:	e7e8      	b.n	d66b0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d66de:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d66e0:	2210      	movs	r2, #16
   d66e2:	a801      	add	r0, sp, #4
   d66e4:	f000 fa26 	bl	d6b34 <memset>
                    a.v = 6;
   d66e8:	2306      	movs	r3, #6
   d66ea:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d66ee:	ad01      	add	r5, sp, #4
   d66f0:	f104 0308 	add.w	r3, r4, #8
   d66f4:	3418      	adds	r4, #24
   d66f6:	6818      	ldr	r0, [r3, #0]
   d66f8:	6859      	ldr	r1, [r3, #4]
   d66fa:	462a      	mov	r2, r5
   d66fc:	c203      	stmia	r2!, {r0, r1}
   d66fe:	3308      	adds	r3, #8
   d6700:	42a3      	cmp	r3, r4
   d6702:	4615      	mov	r5, r2
   d6704:	d1f7      	bne.n	d66f6 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6706:	a901      	add	r1, sp, #4
   d6708:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d670a:	ad07      	add	r5, sp, #28
   d670c:	f7ff fa82 	bl	d5c14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6712:	1d3c      	adds	r4, r7, #4
   d6714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6716:	682b      	ldr	r3, [r5, #0]
   d6718:	7023      	strb	r3, [r4, #0]
   d671a:	e7de      	b.n	d66da <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d671c:	9800      	ldr	r0, [sp, #0]
   d671e:	f7fe fbb7 	bl	d4e90 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6722:	4638      	mov	r0, r7
   d6724:	b015      	add	sp, #84	; 0x54
   d6726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d672c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d672c:	4b02      	ldr	r3, [pc, #8]	; (d6738 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d672e:	4a03      	ldr	r2, [pc, #12]	; (d673c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6730:	601a      	str	r2, [r3, #0]
   d6732:	2200      	movs	r2, #0
   d6734:	605a      	str	r2, [r3, #4]

} // spark
   d6736:	4770      	bx	lr
   d6738:	2003e7cc 	.word	0x2003e7cc
   d673c:	000d7228 	.word	0x000d7228

000d6740 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6740:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6742:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6744:	d902      	bls.n	d674c <pinAvailable+0xc>
    return false;
   d6746:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6748:	b002      	add	sp, #8
   d674a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d674c:	f1a0 030b 	sub.w	r3, r0, #11
   d6750:	2b02      	cmp	r3, #2
   d6752:	d81a      	bhi.n	d678a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6754:	4c17      	ldr	r4, [pc, #92]	; (d67b4 <pinAvailable+0x74>)
   d6756:	7821      	ldrb	r1, [r4, #0]
   d6758:	f3bf 8f5b 	dmb	ish
   d675c:	f011 0101 	ands.w	r1, r1, #1
   d6760:	d10b      	bne.n	d677a <pinAvailable+0x3a>
   d6762:	4620      	mov	r0, r4
   d6764:	9101      	str	r1, [sp, #4]
   d6766:	f7fd fc9a 	bl	d409e <__cxa_guard_acquire>
   d676a:	9901      	ldr	r1, [sp, #4]
   d676c:	b128      	cbz	r0, d677a <pinAvailable+0x3a>
   d676e:	4812      	ldr	r0, [pc, #72]	; (d67b8 <pinAvailable+0x78>)
   d6770:	f7fe fe68 	bl	d5444 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6774:	4620      	mov	r0, r4
   d6776:	f7fd fc97 	bl	d40a8 <__cxa_guard_release>
   d677a:	4b0f      	ldr	r3, [pc, #60]	; (d67b8 <pinAvailable+0x78>)
   d677c:	7818      	ldrb	r0, [r3, #0]
   d677e:	f7fe fcef 	bl	d5160 <hal_spi_is_enabled>
   d6782:	2800      	cmp	r0, #0
   d6784:	d1df      	bne.n	d6746 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6786:	2001      	movs	r0, #1
   d6788:	e7de      	b.n	d6748 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d678a:	2801      	cmp	r0, #1
   d678c:	d809      	bhi.n	d67a2 <pinAvailable+0x62>
   d678e:	f000 f86b 	bl	d6868 <_Z19__fetch_global_Wirev>
   d6792:	2100      	movs	r1, #0
   d6794:	7c00      	ldrb	r0, [r0, #16]
   d6796:	f7fe fc6b 	bl	d5070 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d679a:	f080 0001 	eor.w	r0, r0, #1
   d679e:	b2c0      	uxtb	r0, r0
   d67a0:	e7d2      	b.n	d6748 <pinAvailable+0x8>
   d67a2:	3809      	subs	r0, #9
   d67a4:	2801      	cmp	r0, #1
   d67a6:	d8ee      	bhi.n	d6786 <pinAvailable+0x46>
   d67a8:	f7ff fb54 	bl	d5e54 <_Z22__fetch_global_Serial1v>
   d67ac:	7c00      	ldrb	r0, [r0, #16]
   d67ae:	f7fe fc0f 	bl	d4fd0 <hal_usart_is_enabled>
   d67b2:	e7f2      	b.n	d679a <pinAvailable+0x5a>
   d67b4:	2003e644 	.word	0x2003e644
   d67b8:	2003e648 	.word	0x2003e648

000d67bc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d67bc:	2823      	cmp	r0, #35	; 0x23
{
   d67be:	b538      	push	{r3, r4, r5, lr}
   d67c0:	4604      	mov	r4, r0
   d67c2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d67c4:	d80a      	bhi.n	d67dc <pinMode+0x20>
   d67c6:	29ff      	cmp	r1, #255	; 0xff
   d67c8:	d008      	beq.n	d67dc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d67ca:	f7ff ffb9 	bl	d6740 <pinAvailable>
   d67ce:	b128      	cbz	r0, d67dc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d67d0:	4629      	mov	r1, r5
   d67d2:	4620      	mov	r0, r4
}
   d67d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d67d8:	f7fe bb6a 	b.w	d4eb0 <HAL_Pin_Mode>
}
   d67dc:	bd38      	pop	{r3, r4, r5, pc}

000d67de <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d67de:	b538      	push	{r3, r4, r5, lr}
   d67e0:	4604      	mov	r4, r0
   d67e2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d67e4:	f7fe fb6c 	bl	d4ec0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d67e8:	28ff      	cmp	r0, #255	; 0xff
   d67ea:	d010      	beq.n	d680e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d67ec:	2806      	cmp	r0, #6
   d67ee:	d804      	bhi.n	d67fa <digitalWrite+0x1c>
   d67f0:	234d      	movs	r3, #77	; 0x4d
   d67f2:	fa23 f000 	lsr.w	r0, r3, r0
   d67f6:	07c3      	lsls	r3, r0, #31
   d67f8:	d409      	bmi.n	d680e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d67fa:	4620      	mov	r0, r4
   d67fc:	f7ff ffa0 	bl	d6740 <pinAvailable>
   d6800:	b128      	cbz	r0, d680e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6802:	4629      	mov	r1, r5
   d6804:	4620      	mov	r0, r4
}
   d6806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d680a:	f7fe bb61 	b.w	d4ed0 <HAL_GPIO_Write>
}
   d680e:	bd38      	pop	{r3, r4, r5, pc}

000d6810 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6810:	b510      	push	{r4, lr}
   d6812:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6814:	f7fe fb54 	bl	d4ec0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d6818:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d681a:	b2db      	uxtb	r3, r3
   d681c:	2b01      	cmp	r3, #1
   d681e:	d908      	bls.n	d6832 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6820:	4620      	mov	r0, r4
   d6822:	f7ff ff8d 	bl	d6740 <pinAvailable>
   d6826:	b120      	cbz	r0, d6832 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6828:	4620      	mov	r0, r4
}
   d682a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d682e:	f7fe bb57 	b.w	d4ee0 <HAL_GPIO_Read>
}
   d6832:	2000      	movs	r0, #0
   d6834:	bd10      	pop	{r4, pc}
	...

000d6838 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6838:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d683a:	2300      	movs	r3, #0
   d683c:	2520      	movs	r5, #32
   d683e:	8043      	strh	r3, [r0, #2]
   d6840:	2314      	movs	r3, #20
{
   d6842:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6844:	8003      	strh	r3, [r0, #0]
   d6846:	6085      	str	r5, [r0, #8]
   d6848:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d684a:	4906      	ldr	r1, [pc, #24]	; (d6864 <_Z17acquireWireBufferv+0x2c>)
   d684c:	4628      	mov	r0, r5
   d684e:	f000 f83c 	bl	d68ca <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6852:	4904      	ldr	r1, [pc, #16]	; (d6864 <_Z17acquireWireBufferv+0x2c>)
	};
   d6854:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6856:	4628      	mov	r0, r5
   d6858:	f000 f837 	bl	d68ca <_ZnajRKSt9nothrow_t>
	};
   d685c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d685e:	4620      	mov	r0, r4
   d6860:	bd38      	pop	{r3, r4, r5, pc}
   d6862:	bf00      	nop
   d6864:	000d725c 	.word	0x000d725c

000d6868 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6868:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d686a:	4d0f      	ldr	r5, [pc, #60]	; (d68a8 <_Z19__fetch_global_Wirev+0x40>)
   d686c:	7829      	ldrb	r1, [r5, #0]
   d686e:	f3bf 8f5b 	dmb	ish
   d6872:	f011 0401 	ands.w	r4, r1, #1
{
   d6876:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6878:	d113      	bne.n	d68a2 <_Z19__fetch_global_Wirev+0x3a>
   d687a:	4628      	mov	r0, r5
   d687c:	f7fd fc0f 	bl	d409e <__cxa_guard_acquire>
   d6880:	b178      	cbz	r0, d68a2 <_Z19__fetch_global_Wirev+0x3a>
   d6882:	a801      	add	r0, sp, #4
   d6884:	f7ff ffd8 	bl	d6838 <_Z17acquireWireBufferv>
   d6888:	aa01      	add	r2, sp, #4
   d688a:	4621      	mov	r1, r4
   d688c:	4807      	ldr	r0, [pc, #28]	; (d68ac <_Z19__fetch_global_Wirev+0x44>)
   d688e:	f7ff fb37 	bl	d5f00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6892:	4628      	mov	r0, r5
   d6894:	f7fd fc08 	bl	d40a8 <__cxa_guard_release>
   d6898:	4a05      	ldr	r2, [pc, #20]	; (d68b0 <_Z19__fetch_global_Wirev+0x48>)
   d689a:	4906      	ldr	r1, [pc, #24]	; (d68b4 <_Z19__fetch_global_Wirev+0x4c>)
   d689c:	4803      	ldr	r0, [pc, #12]	; (d68ac <_Z19__fetch_global_Wirev+0x44>)
   d689e:	f000 f80b 	bl	d68b8 <__aeabi_atexit>
	return wire;
}
   d68a2:	4802      	ldr	r0, [pc, #8]	; (d68ac <_Z19__fetch_global_Wirev+0x44>)
   d68a4:	b007      	add	sp, #28
   d68a6:	bd30      	pop	{r4, r5, pc}
   d68a8:	2003e7d8 	.word	0x2003e7d8
   d68ac:	2003e7dc 	.word	0x2003e7dc
   d68b0:	2003e164 	.word	0x2003e164
   d68b4:	000d5ea9 	.word	0x000d5ea9

000d68b8 <__aeabi_atexit>:
   d68b8:	460b      	mov	r3, r1
   d68ba:	4601      	mov	r1, r0
   d68bc:	4618      	mov	r0, r3
   d68be:	f000 b91d 	b.w	d6afc <__cxa_atexit>

000d68c2 <_ZdlPvj>:
   d68c2:	f7fd bbea 	b.w	d409a <_ZdlPv>

000d68c6 <_ZnwjRKSt9nothrow_t>:
   d68c6:	f7fd bbe4 	b.w	d4092 <_Znwj>

000d68ca <_ZnajRKSt9nothrow_t>:
   d68ca:	f7fd bbe4 	b.w	d4096 <_Znaj>
	...

000d68d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d68d0:	4901      	ldr	r1, [pc, #4]	; (d68d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d68d2:	f000 b8f9 	b.w	d6ac8 <_ZNKSt9type_infoeqERKS_>
   d68d6:	bf00      	nop
   d68d8:	000d7278 	.word	0x000d7278

000d68dc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d68dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d68de:	2400      	movs	r4, #0
   d68e0:	2310      	movs	r3, #16
   d68e2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d68e6:	6803      	ldr	r3, [r0, #0]
   d68e8:	9400      	str	r4, [sp, #0]
   d68ea:	699e      	ldr	r6, [r3, #24]
   d68ec:	f88d 4004 	strb.w	r4, [sp, #4]
   d68f0:	4615      	mov	r5, r2
   d68f2:	466b      	mov	r3, sp
   d68f4:	6812      	ldr	r2, [r2, #0]
   d68f6:	47b0      	blx	r6
   d68f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d68fc:	f003 0306 	and.w	r3, r3, #6
   d6900:	2b06      	cmp	r3, #6
   d6902:	bf03      	ittte	eq
   d6904:	9b00      	ldreq	r3, [sp, #0]
   d6906:	602b      	streq	r3, [r5, #0]
   d6908:	2001      	moveq	r0, #1
   d690a:	4620      	movne	r0, r4
   d690c:	b004      	add	sp, #16
   d690e:	bd70      	pop	{r4, r5, r6, pc}

000d6910 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d6910:	9800      	ldr	r0, [sp, #0]
   d6912:	4290      	cmp	r0, r2
   d6914:	bf14      	ite	ne
   d6916:	2001      	movne	r0, #1
   d6918:	2006      	moveq	r0, #6
   d691a:	4770      	bx	lr

000d691c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d691c:	b510      	push	{r4, lr}
   d691e:	4b03      	ldr	r3, [pc, #12]	; (d692c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d6920:	6003      	str	r3, [r0, #0]
   d6922:	4604      	mov	r4, r0
   d6924:	f000 f8cd 	bl	d6ac2 <_ZNSt9type_infoD1Ev>
   d6928:	4620      	mov	r0, r4
   d692a:	bd10      	pop	{r4, pc}
   d692c:	000d72b8 	.word	0x000d72b8

000d6930 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d6930:	b510      	push	{r4, lr}
   d6932:	4604      	mov	r4, r0
   d6934:	f7ff fff2 	bl	d691c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6938:	4620      	mov	r0, r4
   d693a:	2108      	movs	r1, #8
   d693c:	f7ff ffc1 	bl	d68c2 <_ZdlPvj>
   d6940:	4620      	mov	r0, r4
   d6942:	bd10      	pop	{r4, pc}

000d6944 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d6944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6948:	461f      	mov	r7, r3
   d694a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d694e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d6952:	4598      	cmp	r8, r3
   d6954:	4606      	mov	r6, r0
   d6956:	4615      	mov	r5, r2
   d6958:	d107      	bne.n	d696a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d695a:	9907      	ldr	r1, [sp, #28]
   d695c:	f000 f8b4 	bl	d6ac8 <_ZNKSt9type_infoeqERKS_>
   d6960:	b118      	cbz	r0, d696a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6962:	7165      	strb	r5, [r4, #5]
   d6964:	2000      	movs	r0, #0
   d6966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d696a:	4639      	mov	r1, r7
   d696c:	4630      	mov	r0, r6
   d696e:	f000 f8ab 	bl	d6ac8 <_ZNKSt9type_infoeqERKS_>
   d6972:	2800      	cmp	r0, #0
   d6974:	d0f6      	beq.n	d6964 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d6976:	2301      	movs	r3, #1
   d6978:	f8c4 8000 	str.w	r8, [r4]
   d697c:	7125      	strb	r5, [r4, #4]
   d697e:	71a3      	strb	r3, [r4, #6]
   d6980:	e7f0      	b.n	d6964 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d6982 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d6982:	b538      	push	{r3, r4, r5, lr}
   d6984:	4615      	mov	r5, r2
   d6986:	461c      	mov	r4, r3
   d6988:	f000 f89e 	bl	d6ac8 <_ZNKSt9type_infoeqERKS_>
   d698c:	b120      	cbz	r0, d6998 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d698e:	2308      	movs	r3, #8
   d6990:	60e3      	str	r3, [r4, #12]
   d6992:	2306      	movs	r3, #6
   d6994:	6025      	str	r5, [r4, #0]
   d6996:	7123      	strb	r3, [r4, #4]
   d6998:	bd38      	pop	{r3, r4, r5, pc}

000d699a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d699a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d699c:	4605      	mov	r5, r0
   d699e:	460c      	mov	r4, r1
   d69a0:	9201      	str	r2, [sp, #4]
   d69a2:	461e      	mov	r6, r3
   d69a4:	f000 f890 	bl	d6ac8 <_ZNKSt9type_infoeqERKS_>
   d69a8:	b950      	cbnz	r0, d69c0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d69aa:	2e03      	cmp	r6, #3
   d69ac:	d808      	bhi.n	d69c0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d69ae:	6823      	ldr	r3, [r4, #0]
   d69b0:	9a01      	ldr	r2, [sp, #4]
   d69b2:	695b      	ldr	r3, [r3, #20]
   d69b4:	4629      	mov	r1, r5
   d69b6:	4620      	mov	r0, r4
   d69b8:	b002      	add	sp, #8
   d69ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d69be:	4718      	bx	r3
   d69c0:	b002      	add	sp, #8
   d69c2:	bd70      	pop	{r4, r5, r6, pc}

000d69c4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d69c4:	b510      	push	{r4, lr}
   d69c6:	4b03      	ldr	r3, [pc, #12]	; (d69d4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d69c8:	6003      	str	r3, [r0, #0]
   d69ca:	4604      	mov	r4, r0
   d69cc:	f7ff ffa6 	bl	d691c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d69d0:	4620      	mov	r0, r4
   d69d2:	bd10      	pop	{r4, pc}
   d69d4:	000d7318 	.word	0x000d7318

000d69d8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d69d8:	b510      	push	{r4, lr}
   d69da:	4604      	mov	r4, r0
   d69dc:	f7ff fff2 	bl	d69c4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d69e0:	4620      	mov	r0, r4
   d69e2:	210c      	movs	r1, #12
   d69e4:	f7ff ff6d 	bl	d68c2 <_ZdlPvj>
   d69e8:	4620      	mov	r0, r4
   d69ea:	bd10      	pop	{r4, pc}

000d69ec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d69ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d69ee:	9f08      	ldr	r7, [sp, #32]
   d69f0:	4297      	cmp	r7, r2
   d69f2:	4605      	mov	r5, r0
   d69f4:	460e      	mov	r6, r1
   d69f6:	4614      	mov	r4, r2
   d69f8:	d00a      	beq.n	d6a10 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d69fa:	68a8      	ldr	r0, [r5, #8]
   d69fc:	6802      	ldr	r2, [r0, #0]
   d69fe:	9708      	str	r7, [sp, #32]
   d6a00:	6a15      	ldr	r5, [r2, #32]
   d6a02:	4631      	mov	r1, r6
   d6a04:	4622      	mov	r2, r4
   d6a06:	46ac      	mov	ip, r5
   d6a08:	b003      	add	sp, #12
   d6a0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6a0e:	4760      	bx	ip
   d6a10:	4619      	mov	r1, r3
   d6a12:	9301      	str	r3, [sp, #4]
   d6a14:	f000 f858 	bl	d6ac8 <_ZNKSt9type_infoeqERKS_>
   d6a18:	9b01      	ldr	r3, [sp, #4]
   d6a1a:	2800      	cmp	r0, #0
   d6a1c:	d0ed      	beq.n	d69fa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d6a1e:	2006      	movs	r0, #6
   d6a20:	b003      	add	sp, #12
   d6a22:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6a24 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d6a24:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6a28:	460d      	mov	r5, r1
   d6a2a:	4619      	mov	r1, r3
   d6a2c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d6a30:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d6a34:	4681      	mov	r9, r0
   d6a36:	4617      	mov	r7, r2
   d6a38:	4698      	mov	r8, r3
   d6a3a:	f000 f845 	bl	d6ac8 <_ZNKSt9type_infoeqERKS_>
   d6a3e:	b190      	cbz	r0, d6a66 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d6a40:	2d00      	cmp	r5, #0
   d6a42:	6034      	str	r4, [r6, #0]
   d6a44:	7137      	strb	r7, [r6, #4]
   d6a46:	db09      	blt.n	d6a5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d6a48:	1961      	adds	r1, r4, r5
   d6a4a:	458a      	cmp	sl, r1
   d6a4c:	bf0c      	ite	eq
   d6a4e:	2106      	moveq	r1, #6
   d6a50:	2101      	movne	r1, #1
   d6a52:	71b1      	strb	r1, [r6, #6]
   d6a54:	2000      	movs	r0, #0
   d6a56:	b001      	add	sp, #4
   d6a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6a5c:	3502      	adds	r5, #2
   d6a5e:	d1f9      	bne.n	d6a54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6a60:	2301      	movs	r3, #1
   d6a62:	71b3      	strb	r3, [r6, #6]
   d6a64:	e7f6      	b.n	d6a54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6a66:	4554      	cmp	r4, sl
   d6a68:	d106      	bne.n	d6a78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6a6a:	4659      	mov	r1, fp
   d6a6c:	4648      	mov	r0, r9
   d6a6e:	f000 f82b 	bl	d6ac8 <_ZNKSt9type_infoeqERKS_>
   d6a72:	b108      	cbz	r0, d6a78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6a74:	7177      	strb	r7, [r6, #5]
   d6a76:	e7ed      	b.n	d6a54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6a78:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d6a7c:	6803      	ldr	r3, [r0, #0]
   d6a7e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d6a82:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d6a86:	69dc      	ldr	r4, [r3, #28]
   d6a88:	463a      	mov	r2, r7
   d6a8a:	4643      	mov	r3, r8
   d6a8c:	4629      	mov	r1, r5
   d6a8e:	46a4      	mov	ip, r4
   d6a90:	b001      	add	sp, #4
   d6a92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6a96:	4760      	bx	ip

000d6a98 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d6a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6a9c:	4607      	mov	r7, r0
   d6a9e:	460c      	mov	r4, r1
   d6aa0:	4615      	mov	r5, r2
   d6aa2:	461e      	mov	r6, r3
   d6aa4:	f7ff ff6d 	bl	d6982 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d6aa8:	b948      	cbnz	r0, d6abe <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d6aaa:	68b8      	ldr	r0, [r7, #8]
   d6aac:	6803      	ldr	r3, [r0, #0]
   d6aae:	699f      	ldr	r7, [r3, #24]
   d6ab0:	462a      	mov	r2, r5
   d6ab2:	4633      	mov	r3, r6
   d6ab4:	4621      	mov	r1, r4
   d6ab6:	46bc      	mov	ip, r7
   d6ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d6abc:	4760      	bx	ip
   d6abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6ac2 <_ZNSt9type_infoD1Ev>:
   d6ac2:	4770      	bx	lr

000d6ac4 <_ZNKSt9type_info14__is_pointer_pEv>:
   d6ac4:	2000      	movs	r0, #0
   d6ac6:	4770      	bx	lr

000d6ac8 <_ZNKSt9type_infoeqERKS_>:
   d6ac8:	4281      	cmp	r1, r0
   d6aca:	b508      	push	{r3, lr}
   d6acc:	d00e      	beq.n	d6aec <_ZNKSt9type_infoeqERKS_+0x24>
   d6ace:	6840      	ldr	r0, [r0, #4]
   d6ad0:	7803      	ldrb	r3, [r0, #0]
   d6ad2:	2b2a      	cmp	r3, #42	; 0x2a
   d6ad4:	d00c      	beq.n	d6af0 <_ZNKSt9type_infoeqERKS_+0x28>
   d6ad6:	6849      	ldr	r1, [r1, #4]
   d6ad8:	780b      	ldrb	r3, [r1, #0]
   d6ada:	2b2a      	cmp	r3, #42	; 0x2a
   d6adc:	bf08      	it	eq
   d6ade:	3101      	addeq	r1, #1
   d6ae0:	f000 f854 	bl	d6b8c <strcmp>
   d6ae4:	fab0 f080 	clz	r0, r0
   d6ae8:	0940      	lsrs	r0, r0, #5
   d6aea:	bd08      	pop	{r3, pc}
   d6aec:	2001      	movs	r0, #1
   d6aee:	e7fc      	b.n	d6aea <_ZNKSt9type_infoeqERKS_+0x22>
   d6af0:	2000      	movs	r0, #0
   d6af2:	e7fa      	b.n	d6aea <_ZNKSt9type_infoeqERKS_+0x22>

000d6af4 <atoi>:
   d6af4:	220a      	movs	r2, #10
   d6af6:	2100      	movs	r1, #0
   d6af8:	f000 b906 	b.w	d6d08 <strtol>

000d6afc <__cxa_atexit>:
   d6afc:	b510      	push	{r4, lr}
   d6afe:	4c05      	ldr	r4, [pc, #20]	; (d6b14 <__cxa_atexit+0x18>)
   d6b00:	4613      	mov	r3, r2
   d6b02:	b12c      	cbz	r4, d6b10 <__cxa_atexit+0x14>
   d6b04:	460a      	mov	r2, r1
   d6b06:	4601      	mov	r1, r0
   d6b08:	2002      	movs	r0, #2
   d6b0a:	f3af 8000 	nop.w
   d6b0e:	bd10      	pop	{r4, pc}
   d6b10:	4620      	mov	r0, r4
   d6b12:	e7fc      	b.n	d6b0e <__cxa_atexit+0x12>
   d6b14:	00000000 	.word	0x00000000

000d6b18 <memcpy>:
   d6b18:	440a      	add	r2, r1
   d6b1a:	4291      	cmp	r1, r2
   d6b1c:	f100 33ff 	add.w	r3, r0, #4294967295
   d6b20:	d100      	bne.n	d6b24 <memcpy+0xc>
   d6b22:	4770      	bx	lr
   d6b24:	b510      	push	{r4, lr}
   d6b26:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6b2a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6b2e:	4291      	cmp	r1, r2
   d6b30:	d1f9      	bne.n	d6b26 <memcpy+0xe>
   d6b32:	bd10      	pop	{r4, pc}

000d6b34 <memset>:
   d6b34:	4402      	add	r2, r0
   d6b36:	4603      	mov	r3, r0
   d6b38:	4293      	cmp	r3, r2
   d6b3a:	d100      	bne.n	d6b3e <memset+0xa>
   d6b3c:	4770      	bx	lr
   d6b3e:	f803 1b01 	strb.w	r1, [r3], #1
   d6b42:	e7f9      	b.n	d6b38 <memset+0x4>

000d6b44 <srand>:
   d6b44:	b538      	push	{r3, r4, r5, lr}
   d6b46:	4b0d      	ldr	r3, [pc, #52]	; (d6b7c <srand+0x38>)
   d6b48:	681d      	ldr	r5, [r3, #0]
   d6b4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6b4c:	4604      	mov	r4, r0
   d6b4e:	b97b      	cbnz	r3, d6b70 <srand+0x2c>
   d6b50:	2018      	movs	r0, #24
   d6b52:	f7fe fc0b 	bl	d536c <malloc>
   d6b56:	4a0a      	ldr	r2, [pc, #40]	; (d6b80 <srand+0x3c>)
   d6b58:	4b0a      	ldr	r3, [pc, #40]	; (d6b84 <srand+0x40>)
   d6b5a:	63a8      	str	r0, [r5, #56]	; 0x38
   d6b5c:	e9c0 2300 	strd	r2, r3, [r0]
   d6b60:	4b09      	ldr	r3, [pc, #36]	; (d6b88 <srand+0x44>)
   d6b62:	6083      	str	r3, [r0, #8]
   d6b64:	230b      	movs	r3, #11
   d6b66:	8183      	strh	r3, [r0, #12]
   d6b68:	2201      	movs	r2, #1
   d6b6a:	2300      	movs	r3, #0
   d6b6c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6b70:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6b72:	2200      	movs	r2, #0
   d6b74:	611c      	str	r4, [r3, #16]
   d6b76:	615a      	str	r2, [r3, #20]
   d6b78:	bd38      	pop	{r3, r4, r5, pc}
   d6b7a:	bf00      	nop
   d6b7c:	2003e100 	.word	0x2003e100
   d6b80:	abcd330e 	.word	0xabcd330e
   d6b84:	e66d1234 	.word	0xe66d1234
   d6b88:	0005deec 	.word	0x0005deec

000d6b8c <strcmp>:
   d6b8c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6b90:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6b94:	2a01      	cmp	r2, #1
   d6b96:	bf28      	it	cs
   d6b98:	429a      	cmpcs	r2, r3
   d6b9a:	d0f7      	beq.n	d6b8c <strcmp>
   d6b9c:	1ad0      	subs	r0, r2, r3
   d6b9e:	4770      	bx	lr

000d6ba0 <strcpy>:
   d6ba0:	4603      	mov	r3, r0
   d6ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6ba6:	f803 2b01 	strb.w	r2, [r3], #1
   d6baa:	2a00      	cmp	r2, #0
   d6bac:	d1f9      	bne.n	d6ba2 <strcpy+0x2>
   d6bae:	4770      	bx	lr

000d6bb0 <strlen>:
   d6bb0:	4603      	mov	r3, r0
   d6bb2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6bb6:	2a00      	cmp	r2, #0
   d6bb8:	d1fb      	bne.n	d6bb2 <strlen+0x2>
   d6bba:	1a18      	subs	r0, r3, r0
   d6bbc:	3801      	subs	r0, #1
   d6bbe:	4770      	bx	lr

000d6bc0 <strncpy>:
   d6bc0:	b510      	push	{r4, lr}
   d6bc2:	3901      	subs	r1, #1
   d6bc4:	4603      	mov	r3, r0
   d6bc6:	b132      	cbz	r2, d6bd6 <strncpy+0x16>
   d6bc8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6bcc:	f803 4b01 	strb.w	r4, [r3], #1
   d6bd0:	3a01      	subs	r2, #1
   d6bd2:	2c00      	cmp	r4, #0
   d6bd4:	d1f7      	bne.n	d6bc6 <strncpy+0x6>
   d6bd6:	441a      	add	r2, r3
   d6bd8:	2100      	movs	r1, #0
   d6bda:	4293      	cmp	r3, r2
   d6bdc:	d100      	bne.n	d6be0 <strncpy+0x20>
   d6bde:	bd10      	pop	{r4, pc}
   d6be0:	f803 1b01 	strb.w	r1, [r3], #1
   d6be4:	e7f9      	b.n	d6bda <strncpy+0x1a>

000d6be6 <strstr>:
   d6be6:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6be8:	780c      	ldrb	r4, [r1, #0]
   d6bea:	b164      	cbz	r4, d6c06 <strstr+0x20>
   d6bec:	4603      	mov	r3, r0
   d6bee:	781a      	ldrb	r2, [r3, #0]
   d6bf0:	4618      	mov	r0, r3
   d6bf2:	1c5e      	adds	r6, r3, #1
   d6bf4:	b90a      	cbnz	r2, d6bfa <strstr+0x14>
   d6bf6:	4610      	mov	r0, r2
   d6bf8:	e005      	b.n	d6c06 <strstr+0x20>
   d6bfa:	4294      	cmp	r4, r2
   d6bfc:	d108      	bne.n	d6c10 <strstr+0x2a>
   d6bfe:	460d      	mov	r5, r1
   d6c00:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d6c04:	b902      	cbnz	r2, d6c08 <strstr+0x22>
   d6c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6c08:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   d6c0c:	4297      	cmp	r7, r2
   d6c0e:	d0f7      	beq.n	d6c00 <strstr+0x1a>
   d6c10:	4633      	mov	r3, r6
   d6c12:	e7ec      	b.n	d6bee <strstr+0x8>

000d6c14 <_strtol_l.isra.0>:
   d6c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6c18:	4e3a      	ldr	r6, [pc, #232]	; (d6d04 <_strtol_l.isra.0+0xf0>)
   d6c1a:	4686      	mov	lr, r0
   d6c1c:	468c      	mov	ip, r1
   d6c1e:	4660      	mov	r0, ip
   d6c20:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d6c24:	5da5      	ldrb	r5, [r4, r6]
   d6c26:	f015 0508 	ands.w	r5, r5, #8
   d6c2a:	d1f8      	bne.n	d6c1e <_strtol_l.isra.0+0xa>
   d6c2c:	2c2d      	cmp	r4, #45	; 0x2d
   d6c2e:	d133      	bne.n	d6c98 <_strtol_l.isra.0+0x84>
   d6c30:	f89c 4000 	ldrb.w	r4, [ip]
   d6c34:	f04f 0801 	mov.w	r8, #1
   d6c38:	f100 0c02 	add.w	ip, r0, #2
   d6c3c:	2b00      	cmp	r3, #0
   d6c3e:	d05c      	beq.n	d6cfa <_strtol_l.isra.0+0xe6>
   d6c40:	2b10      	cmp	r3, #16
   d6c42:	d10c      	bne.n	d6c5e <_strtol_l.isra.0+0x4a>
   d6c44:	2c30      	cmp	r4, #48	; 0x30
   d6c46:	d10a      	bne.n	d6c5e <_strtol_l.isra.0+0x4a>
   d6c48:	f89c 0000 	ldrb.w	r0, [ip]
   d6c4c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6c50:	2858      	cmp	r0, #88	; 0x58
   d6c52:	d14d      	bne.n	d6cf0 <_strtol_l.isra.0+0xdc>
   d6c54:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d6c58:	2310      	movs	r3, #16
   d6c5a:	f10c 0c02 	add.w	ip, ip, #2
   d6c5e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d6c62:	3f01      	subs	r7, #1
   d6c64:	2600      	movs	r6, #0
   d6c66:	fbb7 f9f3 	udiv	r9, r7, r3
   d6c6a:	4630      	mov	r0, r6
   d6c6c:	fb03 7a19 	mls	sl, r3, r9, r7
   d6c70:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d6c74:	2d09      	cmp	r5, #9
   d6c76:	d818      	bhi.n	d6caa <_strtol_l.isra.0+0x96>
   d6c78:	462c      	mov	r4, r5
   d6c7a:	42a3      	cmp	r3, r4
   d6c7c:	dd24      	ble.n	d6cc8 <_strtol_l.isra.0+0xb4>
   d6c7e:	1c75      	adds	r5, r6, #1
   d6c80:	d007      	beq.n	d6c92 <_strtol_l.isra.0+0x7e>
   d6c82:	4581      	cmp	r9, r0
   d6c84:	d31d      	bcc.n	d6cc2 <_strtol_l.isra.0+0xae>
   d6c86:	d101      	bne.n	d6c8c <_strtol_l.isra.0+0x78>
   d6c88:	45a2      	cmp	sl, r4
   d6c8a:	db1a      	blt.n	d6cc2 <_strtol_l.isra.0+0xae>
   d6c8c:	fb00 4003 	mla	r0, r0, r3, r4
   d6c90:	2601      	movs	r6, #1
   d6c92:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d6c96:	e7eb      	b.n	d6c70 <_strtol_l.isra.0+0x5c>
   d6c98:	2c2b      	cmp	r4, #43	; 0x2b
   d6c9a:	bf08      	it	eq
   d6c9c:	f89c 4000 	ldrbeq.w	r4, [ip]
   d6ca0:	46a8      	mov	r8, r5
   d6ca2:	bf08      	it	eq
   d6ca4:	f100 0c02 	addeq.w	ip, r0, #2
   d6ca8:	e7c8      	b.n	d6c3c <_strtol_l.isra.0+0x28>
   d6caa:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d6cae:	2d19      	cmp	r5, #25
   d6cb0:	d801      	bhi.n	d6cb6 <_strtol_l.isra.0+0xa2>
   d6cb2:	3c37      	subs	r4, #55	; 0x37
   d6cb4:	e7e1      	b.n	d6c7a <_strtol_l.isra.0+0x66>
   d6cb6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d6cba:	2d19      	cmp	r5, #25
   d6cbc:	d804      	bhi.n	d6cc8 <_strtol_l.isra.0+0xb4>
   d6cbe:	3c57      	subs	r4, #87	; 0x57
   d6cc0:	e7db      	b.n	d6c7a <_strtol_l.isra.0+0x66>
   d6cc2:	f04f 36ff 	mov.w	r6, #4294967295
   d6cc6:	e7e4      	b.n	d6c92 <_strtol_l.isra.0+0x7e>
   d6cc8:	1c73      	adds	r3, r6, #1
   d6cca:	d106      	bne.n	d6cda <_strtol_l.isra.0+0xc6>
   d6ccc:	2322      	movs	r3, #34	; 0x22
   d6cce:	f8ce 3000 	str.w	r3, [lr]
   d6cd2:	4638      	mov	r0, r7
   d6cd4:	b942      	cbnz	r2, d6ce8 <_strtol_l.isra.0+0xd4>
   d6cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6cda:	f1b8 0f00 	cmp.w	r8, #0
   d6cde:	d000      	beq.n	d6ce2 <_strtol_l.isra.0+0xce>
   d6ce0:	4240      	negs	r0, r0
   d6ce2:	2a00      	cmp	r2, #0
   d6ce4:	d0f7      	beq.n	d6cd6 <_strtol_l.isra.0+0xc2>
   d6ce6:	b10e      	cbz	r6, d6cec <_strtol_l.isra.0+0xd8>
   d6ce8:	f10c 31ff 	add.w	r1, ip, #4294967295
   d6cec:	6011      	str	r1, [r2, #0]
   d6cee:	e7f2      	b.n	d6cd6 <_strtol_l.isra.0+0xc2>
   d6cf0:	2430      	movs	r4, #48	; 0x30
   d6cf2:	2b00      	cmp	r3, #0
   d6cf4:	d1b3      	bne.n	d6c5e <_strtol_l.isra.0+0x4a>
   d6cf6:	2308      	movs	r3, #8
   d6cf8:	e7b1      	b.n	d6c5e <_strtol_l.isra.0+0x4a>
   d6cfa:	2c30      	cmp	r4, #48	; 0x30
   d6cfc:	d0a4      	beq.n	d6c48 <_strtol_l.isra.0+0x34>
   d6cfe:	230a      	movs	r3, #10
   d6d00:	e7ad      	b.n	d6c5e <_strtol_l.isra.0+0x4a>
   d6d02:	bf00      	nop
   d6d04:	000d7352 	.word	0x000d7352

000d6d08 <strtol>:
   d6d08:	4613      	mov	r3, r2
   d6d0a:	460a      	mov	r2, r1
   d6d0c:	4601      	mov	r1, r0
   d6d0e:	4802      	ldr	r0, [pc, #8]	; (d6d18 <strtol+0x10>)
   d6d10:	6800      	ldr	r0, [r0, #0]
   d6d12:	f7ff bf7f 	b.w	d6c14 <_strtol_l.isra.0>
   d6d16:	bf00      	nop
   d6d18:	2003e100 	.word	0x2003e100

000d6d1c <dynalib_user>:
   d6d1c:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d6d2c:	00000000 76737470 6f632e32 742f006d     ....ptsv2.com./t
   d6d3c:	7732712f 312d736e 31353236 33323536     /q2wns-162516523
   d6d4c:	6f702f30 61007473 672e6970 68737465     0/post.api.getsh
   d6d5c:	77746669 2e78726f 006d6f63 642f3176     iftworx.com.v1/d
   d6d6c:	73617461 6372756f 61642f65 7b006174     atasource/data.{
   d6d7c:	74616422 5b3a2261 7364227b 3a226469     "data":[{"dsid":
   d6d8c:	38393035 76222c33 65756c61 7d353a22     50983,"value":5}
   d6d9c:	50007d5d 0054534f 74617453 203a7375     ]}.POST.Status: 
   d6dac:	646f4200 00203a79 65636341 61007470     .Body: .Accept.a
   d6dbc:	696c7070 69746163 6a2f6e6f 006e6f73     pplication/json.
   d6dcc:	746e6f43 2d746e65 65707954 69706100     Content-Type.api
   d6ddc:	6b6f742d 41006e65 652d4950 65656661     -token.API-eafee
   d6dec:	6264632d 332d3635 64353435 6638332d     -cdb56-3545d-38f
   d6dfc:	4c006437 44335349 00000048              7d.LIS3DH...

000d6e08 <_ZTV15Adafruit_LIS3DH>:
	...
   d6e10:	000d40af 000d4335 000d4455 000d4991     .@..5C..UD...I..
   d6e20:	000d4459 70747448 65696c43 093e746e     YD..HttpClient>.
   d6e30:	6e6e6f43 69746365 7420676e 00203a6f     Connecting to: .
   d6e40:	70747448 65696c43 093e746e 6e6e6f43     HttpClient>.Conn
   d6e50:	69746365 7420676e 5049206f 3a00203a     ecting to IP: .:
   d6e60:	54482000 312f5054 0a0d302e 74744800     . HTTP/1.0...Htt
   d6e70:	696c4370 3e746e65 61745309 6f207472     pClient>.Start o
   d6e80:	54482066 52205054 65757165 002e7473     f HTTP Request..
   d6e90:	736f6c63 6f430065 63656e6e 6e6f6974     close.Connection
   d6ea0:	74744800 696c4370 3e746e65 6e6f4309     .HttpClient>.Con
   d6eb0:	7463656e 206e6f69 6c696166 002e6465     nection failed..
   d6ec0:	54534f48 6e6f4300 746e6574 6e654c2d     HOST.Content-Len
   d6ed0:	00687467 70747448 65696c43 093e746e     gth.HttpClient>.
   d6ee0:	20646e45 4820666f 20505454 75716552     End of HTTP Requ
   d6ef0:	2e747365 480a0d00 43707474 6e65696c     est....HttpClien
   d6f00:	52093e74 69656365 676e6976 50435420     t>.Receiving TCP
   d6f10:	61727420 6361736e 6e6f6974 20666f20      transaction of 
   d6f20:	79622000 2e736574 74744800 696c4370     . bytes..HttpCli
   d6f30:	3e746e65 72724509 203a726f 70736552     ent>.Error: Resp
   d6f40:	65736e6f 646f6220 616c2079 72656772     onse body larger
   d6f50:	61687420 7562206e 72656666 0a0d002e      than buffer....
   d6f60:	70747448 65696c43 093e746e 20646e45     HttpClient>.End 
   d6f70:	5420666f 74205043 736e6172 69746361     of TCP transacti
   d6f80:	002e6e6f 74480a0d 6c437074 746e6569     on....HttpClient
   d6f90:	7245093e 3a726f72 6d695420 74756f65     >.Error: Timeout
   d6fa0:	69687720 7220656c 69646165 7220676e      while reading r
   d6fb0:	6f707365 2e65736e 480a0d00 43707474     esponse....HttpC
   d6fc0:	6e65696c 45093e74 6f20646e 54482066     lient>.End of HT
   d6fd0:	52205054 6f707365 2065736e 736d0028     TP Response (.ms
   d6fe0:	48002e29 43707474 6e65696c 53093e74     )..HttpClient>.S
   d6ff0:	75746174 6f432073 203a6564 0d0a0d00     tatus Code: ....
   d7000:	7448000a 6c437074 746e6569 7245093e     ..HttpClient>.Er
   d7010:	3a726f72 6e614320 66207427 20646e69     ror: Can't find 
   d7020:	50545448 73657220 736e6f70 6f622065     HTTP response bo
   d7030:	002e7964                                dy..

000d7034 <_ZTVN5spark13EthernetClassE>:
	...
   d703c:	000d541b 000d5411 000d5407 000d53fd     .T...T...T...S..
   d704c:	000d53f1 000d53e5 000d6615 000d661d     .S...S...f...f..
   d705c:	000d53d9 000d53d1 000d53c7 000d53bd     .S...S...S...S..
   d706c:	000d664d                                Mf..

000d7070 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7070:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   d7080:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   d7090:	72756769 6f697461 7369206e 766e6920     iguration is inv
   d70a0:	64696c61 0000002e                       alid....

000d70a8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d70b0:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   d70c0:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000d70d0 <_ZTV9IPAddress>:
	...
   d70d8:	000d5b93 000d5b83 000d5b85              .[...[...[..

000d70e4 <_ZTV9USBSerial>:
	...
   d70ec:	000d5ca1 000d5d09 000d5cdf 000d5905     .\...]...\...Y..
   d70fc:	000d5cd1 000d5ca3 000d5cb3 000d5d03     .\...\...\...]..
   d710c:	000d5cc3 000d5c9d                       .\...\..

000d7114 <_ZTV11USARTSerial>:
	...
   d711c:	000d5dad 000d5e19 000d5df1 000d5905     .]...^...]...Y..
   d712c:	000d5dc1 000d5ddd 000d5dcf 000d5deb     .]...]...]...]..
   d713c:	000d5daf 000d5db3                       .]...]..

000d7144 <_ZTV7TwoWire>:
	...
   d714c:	000d5ea9 000d5ef3 000d5ecb 000d5eab     .^...^...^...^..
   d715c:	000d5ed3 000d5edb 000d5ee3 000d5eeb     .^...^...^...^..
   d716c:	76636572 72726520 3d20726f 00642520     recv error = %d.

000d717c <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7184:	000d6027 000d6049 000d6463 000d6057     '`..I`..cd..W`..
   d7194:	000d6029                                )`..

000d7198 <_ZTV9TCPClient>:
	...
   d71a0:	000d60d5 000d6109 000d5fa5 000d5fbf     .`...a..._..._..
   d71b0:	000d62f9 000d616b 000d613d 000d5fe9     .b..ka..=a..._..
   d71c0:	000d6203 000d6469 000d619f 000d63ad     .b..id...a...c..
   d71d0:	000d5feb 000d601d 000d5fd1 000d605b     ._...`..._..[`..
   d71e0:	000d611d                                .a..

000d71e4 <_ZTVN5spark9WiFiClassE>:
	...
   d71ec:	000d65b7 000d65ad 000d65a3 000d6565     .e...e...e..ee..
   d71fc:	000d59d7 000d6597 000d6615 000d661d     .Y...e...f...f..
   d720c:	000d658b 000d6583 000d6579 000d656f     .e...e..ye..oe..
   d721c:	000d664d                                Mf..

000d7220 <_ZTVN5spark12NetworkClassE>:
	...
   d7228:	000d65d5 000d65df 000d65e9 000d65f3     .e...e...e...e..
   d7238:	000d65fd 000d6609 000d6615 000d661d     .e...f...f...f..
   d7248:	000d6625 000d6631 000d6639 000d6643     %f..1f..9f..Cf..
   d7258:	000d664d                                Mf..

000d725c <_ZSt7nothrow>:
	...

000d725d <_ZTSSt19_Sp_make_shared_tag>:
   d725d:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d726d:	5f646572 00676174                        red_tag....

000d7278 <_ZTISt19_Sp_make_shared_tag>:
   d7278:	000d72b8 000d725d                       .r..]r..

000d7280 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d7280:	000d7318 000d728c 000d733c              .s...r..<s..

000d728c <_ZTSN10__cxxabiv117__class_type_infoE>:
   d728c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d729c:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d72ac:	00000045                                E...

000d72b0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d72b0:	00000000 000d7280 000d691d 000d6931     .....r...i..1i..
   d72c0:	000d6ac5 000d6ac5 000d699b 000d68dd     .j...j...i...h..
   d72d0:	000d6983 000d6945 000d6911              .i..Ei...i..

000d72dc <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d72dc:	000d7318 000d72e8 000d7280              .s...r...r..

000d72e8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d72e8:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d72f8:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d7308:	456f666e 00000000                       nfoE....

000d7310 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d7310:	00000000 000d72dc 000d69c5 000d69d9     .....r...i...i..
   d7320:	000d6ac5 000d6ac5 000d699b 000d68dd     .j...j...i...h..
   d7330:	000d6a99 000d6a25 000d69ed              .j..%j...i..

000d733c <_ZTISt9type_info>:
   d733c:	000d72b8 000d7344                       .r..Ds..

000d7344 <_ZTSSt9type_info>:
   d7344:	74397453 5f657079 6f666e69               St9type_info.

000d7351 <_ctype_>:
   d7351:	20202000 20202020 28282020 20282828     .         ((((( 
   d7361:	20202020 20202020 20202020 20202020                     
   d7371:	10108820 10101010 10101010 10101010      ...............
   d7381:	04040410 04040404 10040404 10101010     ................
   d7391:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d73a1:	01010101 01010101 01010101 10101010     ................
   d73b1:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d73c1:	02020202 02020202 02020202 10101010     ................
   d73d1:	00000020 00000000 00000000 00000000      ...............
	...

000d7452 <link_const_variable_data_end>:
	...

000d7454 <link_constructors_location>:
   d7454:	000d4345 	.word	0x000d4345
   d7458:	000d5425 	.word	0x000d5425
   d745c:	000d5699 	.word	0x000d5699
   d7460:	000d58dd 	.word	0x000d58dd
   d7464:	000d59e5 	.word	0x000d59e5
   d7468:	000d59f5 	.word	0x000d59f5
   d746c:	000d5a1d 	.word	0x000d5a1d
   d7470:	000d65c1 	.word	0x000d65c1
   d7474:	000d672d 	.word	0x000d672d

000d7478 <link_constructors_end>:
	...
