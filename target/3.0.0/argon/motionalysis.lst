
c:/Users/Arjun/Documents/GitHub/motionalysis/target/3.0.0/argon/motionalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004360  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8380  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000008c  2003e0b8  000d8384  0001e0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006ac  2003e144  2003e144  0002e144  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8410  000d8410  00028410  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8438  000d8438  00028438  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001b4ab5  00000000  00000000  0002843c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00019fd2  00000000  00000000  001dcef1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003b9a1  00000000  00000000  001f6ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003088  00000000  00000000  00232864  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a468  00000000  00000000  002358ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003c6b8  00000000  00000000  0023fd54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004382c  00000000  00000000  0027c40c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00131048  00000000  00000000  002bfc38  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008ac8  00000000  00000000  003f0c80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
   d4026:	b508      	push	{r3, lr}
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fcef 	bl	d7a14 <memcpy>
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fd11 	bl	d7a64 <memset>
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e0b8 	.word	0x2003e0b8
   d404c:	000d8384 	.word	0x000d8384
   d4050:	2003e144 	.word	0x2003e144
   d4054:	2003e144 	.word	0x2003e144
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
   d405c:	b570      	push	{r4, r5, r6, lr}
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4062:	f002 f809 	bl	d6078 <module_user_init_hook>
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
   d4070:	bd70      	pop	{r4, r5, r6, pc}
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d835c 	.word	0x000d835c
   d4080:	000d8380 	.word	0x000d8380

000d4084 <module_user_setup>:
   d4084:	f000 b85a 	b.w	d413c <setup>

000d4088 <module_user_loop>:
   d4088:	b508      	push	{r3, lr}
   d408a:	f000 f8c5 	bl	d4218 <loop>
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4092:	f001 bfb3 	b.w	d5ffc <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bacd 	b.w	d5634 <malloc>

000d409a <_Znaj>:
   d409a:	f001 bacb 	b.w	d5634 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bad1 	b.w	d5644 <free>

000d40a2 <__cxa_guard_acquire>:
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   d40b2:	4770      	bx	lr

000d40b4 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   d40b4:	b510      	push	{r4, lr}
   d40b6:	4604      	mov	r4, r0
   d40b8:	3004      	adds	r0, #4
   d40ba:	f001 fd14 	bl	d5ae6 <_ZN6StringD1Ev>
   d40be:	4620      	mov	r0, r4
   d40c0:	bd10      	pop	{r4, pc}

000d40c2 <_ZN14http_request_tD1Ev>:
} http_request_t;
   d40c2:	b510      	push	{r4, lr}
   d40c4:	4604      	mov	r4, r0
   d40c6:	303c      	adds	r0, #60	; 0x3c
   d40c8:	f001 fd0d 	bl	d5ae6 <_ZN6StringD1Ev>
   d40cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d40d0:	f001 fd09 	bl	d5ae6 <_ZN6StringD1Ev>
   d40d4:	4620      	mov	r0, r4
   d40d6:	f001 fd06 	bl	d5ae6 <_ZN6StringD1Ev>
   d40da:	4620      	mov	r0, r4
   d40dc:	bd10      	pop	{r4, pc}

000d40de <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40de:	b538      	push	{r3, r4, r5, lr}
   d40e0:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40e2:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40e4:	b128      	cbz	r0, d40f2 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40e6:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40e8:	210c      	movs	r1, #12
   d40ea:	f002 feae 	bl	d6e4a <_ZdlPvj>
            wakeupSource = next;
   d40ee:	4628      	mov	r0, r5
        while (wakeupSource) {
   d40f0:	e7f8      	b.n	d40e4 <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d40f2:	4620      	mov	r0, r4
   d40f4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d40f8 <_ZN10HttpClientD1Ev>:

class HttpClient {
   d40f8:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40fa:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40fc:	4b0a      	ldr	r3, [pc, #40]	; (d4128 <_ZN10HttpClientD1Ev+0x30>)
   d40fe:	6003      	str	r3, [r0, #0]
   d4100:	4605      	mov	r5, r0
   d4102:	b17c      	cbz	r4, d4124 <_ZN10HttpClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4104:	6863      	ldr	r3, [r4, #4]
   d4106:	3b01      	subs	r3, #1
   d4108:	6063      	str	r3, [r4, #4]
   d410a:	b95b      	cbnz	r3, d4124 <_ZN10HttpClientD1Ev+0x2c>
          _M_dispose();
   d410c:	6823      	ldr	r3, [r4, #0]
   d410e:	4620      	mov	r0, r4
   d4110:	689b      	ldr	r3, [r3, #8]
   d4112:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4114:	68a3      	ldr	r3, [r4, #8]
   d4116:	3b01      	subs	r3, #1
   d4118:	60a3      	str	r3, [r4, #8]
   d411a:	b91b      	cbnz	r3, d4124 <_ZN10HttpClientD1Ev+0x2c>
            _M_destroy();
   d411c:	6823      	ldr	r3, [r4, #0]
   d411e:	4620      	mov	r0, r4
   d4120:	68db      	ldr	r3, [r3, #12]
   d4122:	4798      	blx	r3
   d4124:	4628      	mov	r0, r5
   d4126:	bd38      	pop	{r3, r4, r5, pc}
   d4128:	000d80a8 	.word	0x000d80a8

000d412c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d412c:	b510      	push	{r4, lr}
   d412e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4130:	6800      	ldr	r0, [r0, #0]
   d4132:	b108      	cbz	r0, d4138 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4134:	f001 fa86 	bl	d5644 <free>
class SystemClass {
   d4138:	4620      	mov	r0, r4
   d413a:	bd10      	pop	{r4, pc}

000d413c <setup>:
  {NULL, NULL}
};
http_request_t request;
http_response_t response;

void setup() {
   d413c:	b538      	push	{r3, r4, r5, lr}
  Serial.begin(9600);
   d413e:	f002 f8cb 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4142:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4146:	f002 f8bb 	bl	d62c0 <_ZN9USBSerial5beginEl>

  //start transmission from accelerometer
  lis.begin(0x18);
   d414a:	2118      	movs	r1, #24
   d414c:	4829      	ldr	r0, [pc, #164]	; (d41f4 <setup+0xb8>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d414e:	4d2a      	ldr	r5, [pc, #168]	; (d41f8 <setup+0xbc>)
   d4150:	f000 fc2b 	bl	d49aa <_ZN15Adafruit_LIS3DH5beginEh>
  Wire.end();
   d4154:	f002 fe4c 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d4158:	f002 f9aa 	bl	d64b0 <_ZN7TwoWire3endEv>
  lis.begin(I2C_ADDRESS);
   d415c:	2119      	movs	r1, #25
   d415e:	4825      	ldr	r0, [pc, #148]	; (d41f4 <setup+0xb8>)
   d4160:	f000 fc23 	bl	d49aa <_ZN15Adafruit_LIS3DH5beginEh>
  lis.setRange(LIS3DH_RANGE_2_G);
   d4164:	4823      	ldr	r0, [pc, #140]	; (d41f4 <setup+0xb8>)
   d4166:	2100      	movs	r1, #0
   d4168:	f000 fbf6 	bl	d4958 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>
  lis.setDataRate(LIS3DH_DATARATE_400_HZ);
   d416c:	4821      	ldr	r0, [pc, #132]	; (d41f4 <setup+0xb8>)
   d416e:	2107      	movs	r1, #7
   d4170:	f000 fc0a 	bl	d4988 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>

  //pull sdo pin high to reduce power usage, switches i2c address from 0x18 to 0x19
  pinMode(SDO_OUTPUT_PIN, OUTPUT);
   d4174:	2101      	movs	r1, #1
   d4176:	2008      	movs	r0, #8
   d4178:	f002 fde4 	bl	d6d44 <pinMode>
  digitalWrite(SDO_OUTPUT_PIN, HIGH);
   d417c:	2101      	movs	r1, #1
   d417e:	2008      	movs	r0, #8
   d4180:	f002 fdf1 	bl	d6d66 <digitalWrite>
   d4184:	7d2b      	ldrb	r3, [r5, #20]
   d4186:	b1eb      	cbz	r3, d41c4 <setup+0x88>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4188:	2302      	movs	r3, #2
   d418a:	722b      	strb	r3, [r5, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d418c:	682b      	ldr	r3, [r5, #0]
   d418e:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4190:	b123      	cbz	r3, d419c <setup+0x60>
            if (start->type == type) {
   d4192:	889a      	ldrh	r2, [r3, #4]
   d4194:	2a04      	cmp	r2, #4
   d4196:	d029      	beq.n	d41ec <setup+0xb0>
            start = start->next;
   d4198:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d419a:	e7f9      	b.n	d4190 <setup+0x54>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d419c:	4917      	ldr	r1, [pc, #92]	; (d41fc <setup+0xc0>)
   d419e:	2010      	movs	r0, #16
   d41a0:	f002 fe55 	bl	d6e4e <_ZnwjRKSt9nothrow_t>
   d41a4:	4604      	mov	r4, r0
   d41a6:	b1f8      	cbz	r0, d41e8 <setup+0xac>
   d41a8:	2210      	movs	r2, #16
   d41aa:	2100      	movs	r1, #0
   d41ac:	f003 fc5a 	bl	d7a64 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d41b0:	4b13      	ldr	r3, [pc, #76]	; (d4200 <setup+0xc4>)
   d41b2:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d41b4:	2304      	movs	r3, #4
   d41b6:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d41b8:	692b      	ldr	r3, [r5, #16]
   d41ba:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
   d41bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d41c0:	60e3      	str	r3, [r4, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d41c2:	612c      	str	r4, [r5, #16]

  config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(SLEEP_DURATION);

  //test post request server, this works correctly
  request.hostname = "trek.thewcl.com";
   d41c4:	4c0f      	ldr	r4, [pc, #60]	; (d4204 <setup+0xc8>)
   d41c6:	4910      	ldr	r1, [pc, #64]	; (d4208 <setup+0xcc>)
   d41c8:	4620      	mov	r0, r4
   d41ca:	f001 fd1f 	bl	d5c0c <_ZN6StringaSEPKc>
  request.port = 3000;
   d41ce:	f640 33b8 	movw	r3, #3000	; 0xbb8
  request.path = "/";
   d41d2:	490e      	ldr	r1, [pc, #56]	; (d420c <setup+0xd0>)
  request.port = 3000;
   d41d4:	63a3      	str	r3, [r4, #56]	; 0x38
  request.path = "/";
   d41d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d41da:	f001 fd17 	bl	d5c0c <_ZN6StringaSEPKc>

  wifiTimeLeft = WIFI_INTERVAL;
   d41de:	4b0c      	ldr	r3, [pc, #48]	; (d4210 <setup+0xd4>)
   d41e0:	f644 6220 	movw	r2, #20000	; 0x4e20
   d41e4:	601a      	str	r2, [r3, #0]
}
   d41e6:	bd38      	pop	{r3, r4, r5, pc}
                valid_ = false;
   d41e8:	7528      	strb	r0, [r5, #20]
                return *this;
   d41ea:	e7eb      	b.n	d41c4 <setup+0x88>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d41ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d41f0:	60da      	str	r2, [r3, #12]
                return *this;
   d41f2:	e7e7      	b.n	d41c4 <setup+0x88>
   d41f4:	2003e58c 	.word	0x2003e58c
   d41f8:	2003e154 	.word	0x2003e154
   d41fc:	000d8164 	.word	0x000d8164
   d4200:	00030010 	.word	0x00030010
   d4204:	2003e5c8 	.word	0x2003e5c8
   d4208:	000d7c60 	.word	0x000d7c60
   d420c:	000d7c70 	.word	0x000d7c70
   d4210:	2003e0d8 	.word	0x2003e0d8
   d4214:	00000000 	.word	0x00000000

000d4218 <loop>:

void loop() {
   d4218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d421c:	ed2d 8b04 	vpush	{d8-d9}
  lis.read();
   d4220:	4cb9      	ldr	r4, [pc, #740]	; (d4508 <loop+0x2f0>)
  unixTime = Time.now();
  isMoving = 0;
   d4222:	4dba      	ldr	r5, [pc, #744]	; (d450c <loop+0x2f4>)
   d4224:	f8df b340 	ldr.w	fp, [pc, #832]	; d4568 <loop+0x350>
void loop() {
   d4228:	b08b      	sub	sp, #44	; 0x2c
  lis.read();
   d422a:	4620      	mov	r0, r4
   d422c:	f000 fc0e 	bl	d4a4c <_ZN15Adafruit_LIS3DH4readEv>
  unixTime = Time.now();
   d4230:	f001 fe90 	bl	d5f54 <_ZN9TimeClass3nowEv>
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(char c) : String(c) {}
	StringSumHelper(unsigned char num) : String(num) {}
	StringSumHelper(int num) : String(num) {}
	StringSumHelper(unsigned int num) : String(num) {}
	StringSumHelper(long num) : String(num) {}
   d4234:	220a      	movs	r2, #10
   d4236:	4601      	mov	r1, r0
   d4238:	a806      	add	r0, sp, #24
   d423a:	f001 fd0c 	bl	d5c56 <_ZN6StringC1Elh>
   d423e:	a906      	add	r1, sp, #24
   d4240:	48b3      	ldr	r0, [pc, #716]	; (d4510 <loop+0x2f8>)
   d4242:	f001 fcdb 	bl	d5bfc <_ZN6StringaSEO15StringSumHelper>
class StringSumHelper : public String
   d4246:	a806      	add	r0, sp, #24
   d4248:	f001 fc4d 	bl	d5ae6 <_ZN6StringD1Ev>

  if(lis.x_g >= 0.8 && lis.x_g <= 1.2){
   d424c:	edd4 8a03 	vldr	s17, [r4, #12]
  isMoving = 0;
   d4250:	2300      	movs	r3, #0
   d4252:	602b      	str	r3, [r5, #0]
  if(lis.x_g >= 0.8 && lis.x_g <= 1.2){
   d4254:	ee18 0a90 	vmov	r0, s17
   d4258:	f003 f874 	bl	d7344 <__aeabi_f2d>
   d425c:	a3a6      	add	r3, pc, #664	; (adr r3, d44f8 <loop+0x2e0>)
   d425e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4262:	4606      	mov	r6, r0
   d4264:	460f      	mov	r7, r1
   d4266:	f003 fb4b 	bl	d7900 <__aeabi_dcmpge>
   d426a:	46a0      	mov	r8, r4
   d426c:	46aa      	mov	sl, r5
   d426e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   d4272:	b358      	cbz	r0, d42cc <loop+0xb4>
   d4274:	4ba7      	ldr	r3, [pc, #668]	; (d4514 <loop+0x2fc>)
   d4276:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d427a:	4630      	mov	r0, r6
   d427c:	4639      	mov	r1, r7
   d427e:	f003 fb35 	bl	d78ec <__aeabi_dcmple>
   d4282:	b318      	cbz	r0, d42cc <loop+0xb4>
    x = GRAVITY * (lis.x_g - 1);
   d4284:	ee78 7ac8 	vsub.f32	s15, s17, s16
   d4288:	6925      	ldr	r5, [r4, #16]
   d428a:	6964      	ldr	r4, [r4, #20]
   d428c:	ee17 0a90 	vmov	r0, s15
   d4290:	f003 f858 	bl	d7344 <__aeabi_f2d>
   d4294:	a39a      	add	r3, pc, #616	; (adr r3, d4500 <loop+0x2e8>)
   d4296:	e9d3 2300 	ldrd	r2, r3, [r3]
   d429a:	f003 f8ab 	bl	d73f4 <__aeabi_dmul>
   d429e:	f003 fb43 	bl	d7928 <__aeabi_d2f>
   d42a2:	f8cb 0000 	str.w	r0, [fp]
    y = GRAVITY * lis.y_g;
   d42a6:	4628      	mov	r0, r5
   d42a8:	f003 f84c 	bl	d7344 <__aeabi_f2d>
   d42ac:	a394      	add	r3, pc, #592	; (adr r3, d4500 <loop+0x2e8>)
   d42ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42b2:	f003 f89f 	bl	d73f4 <__aeabi_dmul>
   d42b6:	f003 fb37 	bl	d7928 <__aeabi_d2f>
   d42ba:	4b97      	ldr	r3, [pc, #604]	; (d4518 <loop+0x300>)
   d42bc:	6018      	str	r0, [r3, #0]
    z = GRAVITY * lis.z_g;
   d42be:	4620      	mov	r0, r4
    y = GRAVITY * (lis.y_g - 1);
    z = GRAVITY * lis.z_g;
  }else if(lis.z_g >= 0.8 && lis.z_g <= 1.2){
    x = GRAVITY * lis.x_g;
    y = GRAVITY * lis.y_g;
    z = GRAVITY * (lis.z_g - 1);
   d42c0:	f003 f840 	bl	d7344 <__aeabi_f2d>
   d42c4:	a38e      	add	r3, pc, #568	; (adr r3, d4500 <loop+0x2e8>)
   d42c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42ca:	e042      	b.n	d4352 <loop+0x13a>
  } else if(lis.y_g >= 0.8 && lis.y_g <= 1.2){
   d42cc:	ed98 9a04 	vldr	s18, [r8, #16]
   d42d0:	ee19 0a10 	vmov	r0, s18
   d42d4:	f003 f836 	bl	d7344 <__aeabi_f2d>
   d42d8:	edd8 8a05 	vldr	s17, [r8, #20]
   d42dc:	4604      	mov	r4, r0
   d42de:	ee18 0a90 	vmov	r0, s17
   d42e2:	460d      	mov	r5, r1
   d42e4:	f003 f82e 	bl	d7344 <__aeabi_f2d>
   d42e8:	a383      	add	r3, pc, #524	; (adr r3, d44f8 <loop+0x2e0>)
   d42ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42ee:	4680      	mov	r8, r0
   d42f0:	4689      	mov	r9, r1
   d42f2:	4620      	mov	r0, r4
   d42f4:	4629      	mov	r1, r5
   d42f6:	f003 fb03 	bl	d7900 <__aeabi_dcmpge>
   d42fa:	2800      	cmp	r0, #0
   d42fc:	f000 8136 	beq.w	d456c <loop+0x354>
   d4300:	4b84      	ldr	r3, [pc, #528]	; (d4514 <loop+0x2fc>)
   d4302:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d4306:	4620      	mov	r0, r4
   d4308:	4629      	mov	r1, r5
   d430a:	f003 faef 	bl	d78ec <__aeabi_dcmple>
   d430e:	2800      	cmp	r0, #0
   d4310:	f000 812c 	beq.w	d456c <loop+0x354>
    x = GRAVITY * lis.x_g;
   d4314:	a37a      	add	r3, pc, #488	; (adr r3, d4500 <loop+0x2e8>)
   d4316:	e9d3 2300 	ldrd	r2, r3, [r3]
   d431a:	4630      	mov	r0, r6
   d431c:	4639      	mov	r1, r7
   d431e:	f003 f869 	bl	d73f4 <__aeabi_dmul>
   d4322:	f003 fb01 	bl	d7928 <__aeabi_d2f>
    y = GRAVITY * (lis.y_g - 1);
   d4326:	ee79 7a48 	vsub.f32	s15, s18, s16
    x = GRAVITY * lis.x_g;
   d432a:	f8cb 0000 	str.w	r0, [fp]
    y = GRAVITY * (lis.y_g - 1);
   d432e:	ee17 0a90 	vmov	r0, s15
   d4332:	f003 f807 	bl	d7344 <__aeabi_f2d>
   d4336:	a372      	add	r3, pc, #456	; (adr r3, d4500 <loop+0x2e8>)
   d4338:	e9d3 2300 	ldrd	r2, r3, [r3]
   d433c:	f003 f85a 	bl	d73f4 <__aeabi_dmul>
   d4340:	f003 faf2 	bl	d7928 <__aeabi_d2f>
   d4344:	4b74      	ldr	r3, [pc, #464]	; (d4518 <loop+0x300>)
   d4346:	6018      	str	r0, [r3, #0]
    z = GRAVITY * lis.z_g;
   d4348:	a36d      	add	r3, pc, #436	; (adr r3, d4500 <loop+0x2e8>)
   d434a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d434e:	4640      	mov	r0, r8
   d4350:	4649      	mov	r1, r9
    z = GRAVITY * (lis.z_g - 1);
   d4352:	f003 f84f 	bl	d73f4 <__aeabi_dmul>
   d4356:	f003 fae7 	bl	d7928 <__aeabi_d2f>
   d435a:	4b70      	ldr	r3, [pc, #448]	; (d451c <loop+0x304>)
   d435c:	6018      	str	r0, [r3, #0]
  }

  if(abs(x) > 1 || abs(y) > 1 || abs(z) > 1){
   d435e:	eddb 7a00 	vldr	s15, [fp]
   d4362:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d436a:	bfd8      	it	le
   d436c:	eef1 7a67 	vnegle.f32	s15, s15
   d4370:	eef4 7ac8 	vcmpe.f32	s15, s16
   d4374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4378:	dc1d      	bgt.n	d43b6 <loop+0x19e>
   d437a:	4b67      	ldr	r3, [pc, #412]	; (d4518 <loop+0x300>)
   d437c:	edd3 7a00 	vldr	s15, [r3]
   d4380:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4388:	bfd8      	it	le
   d438a:	eef1 7a67 	vnegle.f32	s15, s15
   d438e:	eef4 7ac8 	vcmpe.f32	s15, s16
   d4392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4396:	dc0e      	bgt.n	d43b6 <loop+0x19e>
   d4398:	4b60      	ldr	r3, [pc, #384]	; (d451c <loop+0x304>)
   d439a:	edd3 7a00 	vldr	s15, [r3]
   d439e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d43a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d43a6:	bfd8      	it	le
   d43a8:	eef1 7a67 	vnegle.f32	s15, s15
   d43ac:	eef4 7ac8 	vcmpe.f32	s15, s16
   d43b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d43b4:	dd02      	ble.n	d43bc <loop+0x1a4>
    isMoving = 1;
   d43b6:	2301      	movs	r3, #1
   d43b8:	f8ca 3000 	str.w	r3, [sl]
	StringSumHelper(const char *p) : String(p) {}
   d43bc:	4958      	ldr	r1, [pc, #352]	; (d4520 <loop+0x308>)
   d43be:	a806      	add	r0, sp, #24
   d43c0:	f001 fbdc 	bl	d5b7c <_ZN6StringC1EPKc>
  }

  payload +=  "{\"dsid\":50983, \"value\":" + String(isMoving) + ", \"timestamp\":" + unixTime + "},";
   d43c4:	220a      	movs	r2, #10
   d43c6:	f8da 1000 	ldr.w	r1, [sl]
   d43ca:	a802      	add	r0, sp, #8
   d43cc:	f001 fc30 	bl	d5c30 <_ZN6StringC1Eih>
   d43d0:	a902      	add	r1, sp, #8
   d43d2:	a806      	add	r0, sp, #24
   d43d4:	f001 fc6d 	bl	d5cb2 <_ZplRK15StringSumHelperRK6String>
   d43d8:	4952      	ldr	r1, [pc, #328]	; (d4524 <loop+0x30c>)
   d43da:	f001 fc76 	bl	d5cca <_ZplRK15StringSumHelperPKc>
   d43de:	494c      	ldr	r1, [pc, #304]	; (d4510 <loop+0x2f8>)
   d43e0:	f001 fc67 	bl	d5cb2 <_ZplRK15StringSumHelperRK6String>
   d43e4:	4950      	ldr	r1, [pc, #320]	; (d4528 <loop+0x310>)
   d43e6:	f001 fc70 	bl	d5cca <_ZplRK15StringSumHelperPKc>
   d43ea:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d43ec:	484f      	ldr	r0, [pc, #316]	; (d452c <loop+0x314>)
   d43ee:	f001 fc5c 	bl	d5caa <_ZN6String6concatERKS_>
   d43f2:	a802      	add	r0, sp, #8
   d43f4:	f001 fb77 	bl	d5ae6 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d43f8:	a806      	add	r0, sp, #24
   d43fa:	f001 fb74 	bl	d5ae6 <_ZN6StringD1Ev>

  //lis.setupLowPowerWakeMode(16);
  System.sleep(config);
   d43fe:	a806      	add	r0, sp, #24
   d4400:	494b      	ldr	r1, [pc, #300]	; (d4530 <loop+0x318>)
   d4402:	f001 fa49 	bl	d5898 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d4406:	9806      	ldr	r0, [sp, #24]
   d4408:	b108      	cbz	r0, d440e <loop+0x1f6>
            free(wakeupSource_);
   d440a:	f001 f91b 	bl	d5644 <free>
  
  if(wifiTimeLeft <= 0){
   d440e:	4c49      	ldr	r4, [pc, #292]	; (d4534 <loop+0x31c>)
   d4410:	6823      	ldr	r3, [r4, #0]
   d4412:	2b00      	cmp	r3, #0
   d4414:	dc67      	bgt.n	d44e6 <loop+0x2ce>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4416:	4d48      	ldr	r5, [pc, #288]	; (d4538 <loop+0x320>)
   d4418:	2300      	movs	r3, #0
   d441a:	461a      	mov	r2, r3
   d441c:	4619      	mov	r1, r3
   d441e:	6868      	ldr	r0, [r5, #4]
   d4420:	f001 f898 	bl	d5554 <network_on>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4424:	2300      	movs	r3, #0
   d4426:	6868      	ldr	r0, [r5, #4]
   d4428:	461a      	mov	r2, r3
   d442a:	4619      	mov	r1, r3
   d442c:	f001 f872 	bl	d5514 <network_connect>
   d4430:	46a8      	mov	r8, r5
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4432:	2200      	movs	r2, #0
   d4434:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d4438:	4611      	mov	r1, r2
   d443a:	f001 f883 	bl	d5544 <network_ready>
    WiFi.on();
    WiFi.connect();
    while(!WiFi.ready()){}
   d443e:	2800      	cmp	r0, #0
   d4440:	d0f7      	beq.n	d4432 <loop+0x21a>
    while(!client.isConnected()){
      client.connect(System.deviceID());
    
    client.publish(MQTT_PATH, "[" + payload + "]");
    client.loop();*/
    payload.remove(payload.length() - 1);
   d4442:	4d3a      	ldr	r5, [pc, #232]	; (d452c <loop+0x314>)
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
    }

    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
   d4444:	4f3d      	ldr	r7, [pc, #244]	; (d453c <loop+0x324>)
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4446:	f001 f8cd 	bl	d55e4 <spark_cloud_flag_connect>
   d444a:	68a9      	ldr	r1, [r5, #8]
   d444c:	4628      	mov	r0, r5
   d444e:	3901      	subs	r1, #1
   d4450:	f001 fcb5 	bl	d5dbe <_ZN6String6removeEj>
	StringSumHelper(const char *p) : String(p) {}
   d4454:	493a      	ldr	r1, [pc, #232]	; (d4540 <loop+0x328>)
   d4456:	a806      	add	r0, sp, #24
   d4458:	f001 fb90 	bl	d5b7c <_ZN6StringC1EPKc>
    request.body = "{\"data\":[" + payload + "]}";
   d445c:	4629      	mov	r1, r5
   d445e:	a806      	add	r0, sp, #24
   d4460:	f001 fc27 	bl	d5cb2 <_ZplRK15StringSumHelperRK6String>
   d4464:	4937      	ldr	r1, [pc, #220]	; (d4544 <loop+0x32c>)
   d4466:	f001 fc30 	bl	d5cca <_ZplRK15StringSumHelperPKc>
   d446a:	4601      	mov	r1, r0
   d446c:	4836      	ldr	r0, [pc, #216]	; (d4548 <loop+0x330>)
   d446e:	f001 fbb6 	bl	d5bde <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d4472:	a806      	add	r0, sp, #24
   d4474:	f001 fb37 	bl	d5ae6 <_ZN6StringD1Ev>
   d4478:	4b34      	ldr	r3, [pc, #208]	; (d454c <loop+0x334>)
   d447a:	4935      	ldr	r1, [pc, #212]	; (d4550 <loop+0x338>)
   d447c:	4835      	ldr	r0, [pc, #212]	; (d4554 <loop+0x33c>)
   d447e:	9300      	str	r3, [sp, #0]
   d4480:	463a      	mov	r2, r7
   d4482:	4b35      	ldr	r3, [pc, #212]	; (d4558 <loop+0x340>)
   d4484:	f000 fc3a 	bl	d4cfc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>

    //request.body = "{\"data\":[{\"dsid\":50983,\"value\":0}]}";
    http.post(request, response, headers);
    Serial.println("Status: " + response.status);
   d4488:	f001 ff26 	bl	d62d8 <_Z16_fetch_usbserialv>
   d448c:	683b      	ldr	r3, [r7, #0]
   d448e:	4933      	ldr	r1, [pc, #204]	; (d455c <loop+0x344>)
   d4490:	4419      	add	r1, r3
   d4492:	f001 fcfe 	bl	d5e92 <_ZN5Print7printlnEPKc>
    Serial.println("Body: " + response.body);
   d4496:	f001 ff1f 	bl	d62d8 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d449a:	4931      	ldr	r1, [pc, #196]	; (d4560 <loop+0x348>)
   d449c:	4606      	mov	r6, r0
   d449e:	a806      	add	r0, sp, #24
   d44a0:	f001 fb6c 	bl	d5b7c <_ZN6StringC1EPKc>
   d44a4:	1d39      	adds	r1, r7, #4
   d44a6:	a806      	add	r0, sp, #24
   d44a8:	f001 fc03 	bl	d5cb2 <_ZplRK15StringSumHelperRK6String>
   d44ac:	6801      	ldr	r1, [r0, #0]
   d44ae:	4630      	mov	r0, r6
   d44b0:	f001 fcef 	bl	d5e92 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   d44b4:	a806      	add	r0, sp, #24
   d44b6:	f001 fb16 	bl	d5ae6 <_ZN6StringD1Ev>

    payload = "";
   d44ba:	492a      	ldr	r1, [pc, #168]	; (d4564 <loop+0x34c>)
   d44bc:	4628      	mov	r0, r5
   d44be:	f001 fba5 	bl	d5c0c <_ZN6StringaSEPKc>
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
   d44c2:	2500      	movs	r5, #0
    
    wifiTimeLeft = WIFI_INTERVAL;
   d44c4:	f644 6320 	movw	r3, #20000	; 0x4e20

    Particle.disconnect();
   d44c8:	a806      	add	r0, sp, #24
    wifiTimeLeft = WIFI_INTERVAL;
   d44ca:	6023      	str	r3, [r4, #0]
   d44cc:	e9cd 5506 	strd	r5, r5, [sp, #24]
   d44d0:	f88d 5020 	strb.w	r5, [sp, #32]
    Particle.disconnect();
   d44d4:	f001 fe02 	bl	d60dc <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        network_off(*this, 0, 0, NULL);
   d44d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d44dc:	462b      	mov	r3, r5
   d44de:	462a      	mov	r2, r5
   d44e0:	4629      	mov	r1, r5
   d44e2:	f001 f83f 	bl	d5564 <network_off>
    WiFi.off();
  }

  wifiTimeLeft -= SLEEP_DURATION;
   d44e6:	6823      	ldr	r3, [r4, #0]
   d44e8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   d44ec:	6023      	str	r3, [r4, #0]
}
   d44ee:	b00b      	add	sp, #44	; 0x2c
   d44f0:	ecbd 8b04 	vpop	{d8-d9}
   d44f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d44f8:	9999999a 	.word	0x9999999a
   d44fc:	3fe99999 	.word	0x3fe99999
   d4500:	acd9e83e 	.word	0xacd9e83e
   d4504:	40239cfa 	.word	0x40239cfa
   d4508:	2003e58c 	.word	0x2003e58c
   d450c:	2003e588 	.word	0x2003e588
   d4510:	2003e628 	.word	0x2003e628
   d4514:	3ff33333 	.word	0x3ff33333
   d4518:	2003e63c 	.word	0x2003e63c
   d451c:	2003e640 	.word	0x2003e640
   d4520:	000d7c72 	.word	0x000d7c72
   d4524:	000d7c8a 	.word	0x000d7c8a
   d4528:	000d7c99 	.word	0x000d7c99
   d452c:	2003e5b8 	.word	0x2003e5b8
   d4530:	2003e154 	.word	0x2003e154
   d4534:	2003e0d8 	.word	0x2003e0d8
   d4538:	2003e7c4 	.word	0x2003e7c4
   d453c:	2003e614 	.word	0x2003e614
   d4540:	000d7c9c 	.word	0x000d7c9c
   d4544:	000d7ca6 	.word	0x000d7ca6
   d4548:	2003e604 	.word	0x2003e604
   d454c:	000d7ca9 	.word	0x000d7ca9
   d4550:	2003e5c8 	.word	0x2003e5c8
   d4554:	2003e16c 	.word	0x2003e16c
   d4558:	2003e0b8 	.word	0x2003e0b8
   d455c:	000d7cae 	.word	0x000d7cae
   d4560:	000d7cb7 	.word	0x000d7cb7
   d4564:	000d7f07 	.word	0x000d7f07
   d4568:	2003e638 	.word	0x2003e638
  }else if(lis.z_g >= 0.8 && lis.z_g <= 1.2){
   d456c:	a31c      	add	r3, pc, #112	; (adr r3, d45e0 <loop+0x3c8>)
   d456e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4572:	4640      	mov	r0, r8
   d4574:	4649      	mov	r1, r9
   d4576:	f003 f9c3 	bl	d7900 <__aeabi_dcmpge>
   d457a:	2800      	cmp	r0, #0
   d457c:	f43f aeef 	beq.w	d435e <loop+0x146>
   d4580:	4b15      	ldr	r3, [pc, #84]	; (d45d8 <loop+0x3c0>)
   d4582:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d4586:	4640      	mov	r0, r8
   d4588:	4649      	mov	r1, r9
   d458a:	f003 f9af 	bl	d78ec <__aeabi_dcmple>
   d458e:	2800      	cmp	r0, #0
   d4590:	f43f aee5 	beq.w	d435e <loop+0x146>
    x = GRAVITY * lis.x_g;
   d4594:	a30e      	add	r3, pc, #56	; (adr r3, d45d0 <loop+0x3b8>)
   d4596:	e9d3 2300 	ldrd	r2, r3, [r3]
   d459a:	4630      	mov	r0, r6
   d459c:	4639      	mov	r1, r7
   d459e:	f002 ff29 	bl	d73f4 <__aeabi_dmul>
   d45a2:	f003 f9c1 	bl	d7928 <__aeabi_d2f>
    y = GRAVITY * lis.y_g;
   d45a6:	a30a      	add	r3, pc, #40	; (adr r3, d45d0 <loop+0x3b8>)
   d45a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    x = GRAVITY * lis.x_g;
   d45ac:	f8cb 0000 	str.w	r0, [fp]
    y = GRAVITY * lis.y_g;
   d45b0:	4629      	mov	r1, r5
   d45b2:	4620      	mov	r0, r4
   d45b4:	f002 ff1e 	bl	d73f4 <__aeabi_dmul>
   d45b8:	f003 f9b6 	bl	d7928 <__aeabi_d2f>
   d45bc:	4b07      	ldr	r3, [pc, #28]	; (d45dc <loop+0x3c4>)
    z = GRAVITY * (lis.z_g - 1);
   d45be:	ee78 7ac8 	vsub.f32	s15, s17, s16
    y = GRAVITY * lis.y_g;
   d45c2:	6018      	str	r0, [r3, #0]
    z = GRAVITY * (lis.z_g - 1);
   d45c4:	ee17 0a90 	vmov	r0, s15
   d45c8:	e67a      	b.n	d42c0 <loop+0xa8>
   d45ca:	bf00      	nop
   d45cc:	f3af 8000 	nop.w
   d45d0:	acd9e83e 	.word	0xacd9e83e
   d45d4:	40239cfa 	.word	0x40239cfa
   d45d8:	3ff33333 	.word	0x3ff33333
   d45dc:	2003e63c 	.word	0x2003e63c
   d45e0:	9999999a 	.word	0x9999999a
   d45e4:	3fe99999 	.word	0x3fe99999

000d45e8 <_ZN15Adafruit_LIS3DHD0Ev>:
   d45e8:	b510      	push	{r4, lr}
   d45ea:	212c      	movs	r1, #44	; 0x2c
   d45ec:	4604      	mov	r4, r0
   d45ee:	f002 fc2c 	bl	d6e4a <_ZdlPvj>
   d45f2:	4620      	mov	r0, r4
   d45f4:	bd10      	pop	{r4, pc}
	...

000d45f8 <_GLOBAL__sub_I_SystemMode>:

void callback(char* topic, byte* payload, unsigned int length){
  
   d45f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
              error_(SYSTEM_ERROR_NONE) {
   d45fc:	4e37      	ldr	r6, [pc, #220]	; (d46dc <_GLOBAL__sub_I_SystemMode+0xe4>)
    SleepResult() {}
   d45fe:	4b38      	ldr	r3, [pc, #224]	; (d46e0 <_GLOBAL__sub_I_SystemMode+0xe8>)
   d4600:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4602:	2500      	movs	r5, #0
SYSTEM_MODE(MANUAL)
   d4604:	4c37      	ldr	r4, [pc, #220]	; (d46e4 <_GLOBAL__sub_I_SystemMode+0xec>)
   d4606:	6035      	str	r5, [r6, #0]
   d4608:	80b5      	strh	r5, [r6, #4]
    SleepResult() {}
   d460a:	71b5      	strb	r5, [r6, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d460c:	2003      	movs	r0, #3
   d460e:	f000 ff4b 	bl	d54a8 <set_system_mode>
String payload = "";
   d4612:	4f35      	ldr	r7, [pc, #212]	; (d46e8 <_GLOBAL__sub_I_SystemMode+0xf0>)
SYSTEM_MODE(MANUAL)
   d4614:	4935      	ldr	r1, [pc, #212]	; (d46ec <_GLOBAL__sub_I_SystemMode+0xf4>)
String payload = "";
   d4616:	f8df 810c 	ldr.w	r8, [pc, #268]	; d4724 <_GLOBAL__sub_I_SystemMode+0x12c>
SYSTEM_MODE(MANUAL)
   d461a:	4630      	mov	r0, r6
String payload = "";
   d461c:	4e34      	ldr	r6, [pc, #208]	; (d46f0 <_GLOBAL__sub_I_SystemMode+0xf8>)
SYSTEM_MODE(MANUAL)
   d461e:	4622      	mov	r2, r4
   d4620:	f002 fc0e 	bl	d6e40 <__aeabi_atexit>
String payload = "";
   d4624:	4631      	mov	r1, r6
   d4626:	4638      	mov	r0, r7
   d4628:	f001 faa8 	bl	d5b7c <_ZN6StringC1EPKc>
   d462c:	4638      	mov	r0, r7
String unixTime;
   d462e:	4f31      	ldr	r7, [pc, #196]	; (d46f4 <_GLOBAL__sub_I_SystemMode+0xfc>)
String payload = "";
   d4630:	4622      	mov	r2, r4
   d4632:	4641      	mov	r1, r8
   d4634:	f002 fc04 	bl	d6e40 <__aeabi_atexit>
String unixTime;
   d4638:	4631      	mov	r1, r6
   d463a:	4638      	mov	r0, r7
   d463c:	f001 fa9e 	bl	d5b7c <_ZN6StringC1EPKc>
   d4640:	4638      	mov	r0, r7
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d4642:	4f2d      	ldr	r7, [pc, #180]	; (d46f8 <_GLOBAL__sub_I_SystemMode+0x100>)
String unixTime;
   d4644:	4622      	mov	r2, r4
   d4646:	4641      	mov	r1, r8
   d4648:	f002 fbfa 	bl	d6e40 <__aeabi_atexit>
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d464c:	4638      	mov	r0, r7
   d464e:	f000 f88d 	bl	d476c <_ZN15Adafruit_LIS3DHC1Ev>
   d4652:	4622      	mov	r2, r4
   d4654:	4929      	ldr	r1, [pc, #164]	; (d46fc <_GLOBAL__sub_I_SystemMode+0x104>)
   d4656:	4638      	mov	r0, r7
   d4658:	f002 fbf2 	bl	d6e40 <__aeabi_atexit>
        : config_(config) {
   d465c:	4828      	ldr	r0, [pc, #160]	; (d4700 <_GLOBAL__sub_I_SystemMode+0x108>)
SystemSleepConfiguration config;
   d465e:	4929      	ldr	r1, [pc, #164]	; (d4704 <_GLOBAL__sub_I_SystemMode+0x10c>)
              valid_(true) {
   d4660:	f8a0 5009 	strh.w	r5, [r0, #9]
        : config_(config) {
   d4664:	4603      	mov	r3, r0
   d4666:	1d02      	adds	r2, r0, #4
   d4668:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d466c:	709d      	strb	r5, [r3, #2]
   d466e:	2301      	movs	r3, #1
        config_.wakeup_sources = nullptr;
   d4670:	e9c0 5503 	strd	r5, r5, [r0, #12]
              valid_(true) {
   d4674:	7503      	strb	r3, [r0, #20]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d4676:	7205      	strb	r5, [r0, #8]
        config_.size = sizeof(hal_sleep_config_t);
   d4678:	4b23      	ldr	r3, [pc, #140]	; (d4708 <_GLOBAL__sub_I_SystemMode+0x110>)
HttpClient http;
   d467a:	4d24      	ldr	r5, [pc, #144]	; (d470c <_GLOBAL__sub_I_SystemMode+0x114>)
   d467c:	6043      	str	r3, [r0, #4]
SystemSleepConfiguration config;
   d467e:	4622      	mov	r2, r4
   d4680:	f002 fbde 	bl	d6e40 <__aeabi_atexit>
HttpClient http;
   d4684:	4628      	mov	r0, r5
   d4686:	f000 fac0 	bl	d4c0a <_ZN10HttpClientC1Ev>
   d468a:	4628      	mov	r0, r5
} http_request_t;
   d468c:	4d20      	ldr	r5, [pc, #128]	; (d4710 <_GLOBAL__sub_I_SystemMode+0x118>)
   d468e:	4921      	ldr	r1, [pc, #132]	; (d4714 <_GLOBAL__sub_I_SystemMode+0x11c>)
   d4690:	4622      	mov	r2, r4
   d4692:	f002 fbd5 	bl	d6e40 <__aeabi_atexit>
   d4696:	4631      	mov	r1, r6
   d4698:	4628      	mov	r0, r5
   d469a:	f001 fa6f 	bl	d5b7c <_ZN6StringC1EPKc>
   d469e:	f105 0010 	add.w	r0, r5, #16
   d46a2:	f001 fd69 	bl	d6178 <_ZN9IPAddressC1Ev>
   d46a6:	4631      	mov	r1, r6
   d46a8:	f105 0028 	add.w	r0, r5, #40	; 0x28
   d46ac:	f001 fa66 	bl	d5b7c <_ZN6StringC1EPKc>
   d46b0:	4631      	mov	r1, r6
   d46b2:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   d46b6:	f001 fa61 	bl	d5b7c <_ZN6StringC1EPKc>
http_request_t request;
   d46ba:	4628      	mov	r0, r5
} http_response_t;
   d46bc:	4d16      	ldr	r5, [pc, #88]	; (d4718 <_GLOBAL__sub_I_SystemMode+0x120>)
   d46be:	4917      	ldr	r1, [pc, #92]	; (d471c <_GLOBAL__sub_I_SystemMode+0x124>)
   d46c0:	4622      	mov	r2, r4
   d46c2:	f002 fbbd 	bl	d6e40 <__aeabi_atexit>
   d46c6:	4631      	mov	r1, r6
   d46c8:	1d28      	adds	r0, r5, #4
   d46ca:	f001 fa57 	bl	d5b7c <_ZN6StringC1EPKc>
http_response_t response;
   d46ce:	4622      	mov	r2, r4
   d46d0:	4628      	mov	r0, r5
   d46d2:	4913      	ldr	r1, [pc, #76]	; (d4720 <_GLOBAL__sub_I_SystemMode+0x128>)
   d46d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
http_response_t response;
   d46d8:	f002 bbb2 	b.w	d6e40 <__aeabi_atexit>
   d46dc:	2003e148 	.word	0x2003e148
   d46e0:	ffff0000 	.word	0xffff0000
   d46e4:	2003e144 	.word	0x2003e144
   d46e8:	2003e5b8 	.word	0x2003e5b8
   d46ec:	000d412d 	.word	0x000d412d
   d46f0:	000d7f07 	.word	0x000d7f07
   d46f4:	2003e628 	.word	0x2003e628
   d46f8:	2003e58c 	.word	0x2003e58c
   d46fc:	000d40b3 	.word	0x000d40b3
   d4700:	2003e154 	.word	0x2003e154
   d4704:	000d40df 	.word	0x000d40df
   d4708:	00030010 	.word	0x00030010
   d470c:	2003e16c 	.word	0x2003e16c
   d4710:	2003e5c8 	.word	0x2003e5c8
   d4714:	000d40f9 	.word	0x000d40f9
   d4718:	2003e614 	.word	0x2003e614
   d471c:	000d40c3 	.word	0x000d40c3
   d4720:	000d40b5 	.word	0x000d40b5
   d4724:	000d5ae7 	.word	0x000d5ae7

000d4728 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d4728:	4770      	bx	lr
	...

000d472c <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d472c:	460b      	mov	r3, r1
   d472e:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d4730:	2228      	movs	r2, #40	; 0x28
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d4732:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d4734:	2100      	movs	r1, #0
   d4736:	4618      	mov	r0, r3
   d4738:	f003 f994 	bl	d7a64 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d473c:	4908      	ldr	r1, [pc, #32]	; (d4760 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
   d473e:	220b      	movs	r2, #11
   d4740:	f003 f9d6 	bl	d7af0 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d4744:	2200      	movs	r2, #0
  sensor->version     = 1;
   d4746:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d4748:	72c2      	strb	r2, [r0, #11]
  sensor->version     = 1;
   d474a:	60c1      	str	r1, [r0, #12]
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d474c:	4603      	mov	r3, r0
  sensor->sensor_id   = _sensorID;
   d474e:	69a0      	ldr	r0, [r4, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
   d4750:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   d4752:	e9c3 0104 	strd	r0, r1, [r3, #16]
  sensor->max_value   = 0;
   d4756:	2200      	movs	r2, #0
   d4758:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0;
   d475a:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0;
   d475c:	621a      	str	r2, [r3, #32]
}
   d475e:	bd10      	pop	{r4, pc}
   d4760:	000d7d09 	.word	0x000d7d09

000d4764 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4764:	6803      	ldr	r3, [r0, #0]
   d4766:	b2c9      	uxtb	r1, r1
   d4768:	689b      	ldr	r3, [r3, #8]
   d476a:	4718      	bx	r3

000d476c <_ZN15Adafruit_LIS3DHC1Ev>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   d476c:	4a06      	ldr	r2, [pc, #24]	; (d4788 <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   d476e:	6002      	str	r2, [r0, #0]
   d4770:	f04f 32ff 	mov.w	r2, #4294967295
   d4774:	6182      	str	r2, [r0, #24]
   d4776:	7742      	strb	r2, [r0, #29]
   d4778:	83c2      	strh	r2, [r0, #30]
   d477a:	22ff      	movs	r2, #255	; 0xff
   d477c:	f880 2020 	strb.w	r2, [r0, #32]
   d4780:	2208      	movs	r2, #8
   d4782:	6242      	str	r2, [r0, #36]	; 0x24
}
   d4784:	4770      	bx	lr
   d4786:	bf00      	nop
   d4788:	000d7d18 	.word	0x000d7d18

000d478c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d478c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d478e:	4c0b      	ldr	r4, [pc, #44]	; (d47bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4790:	7821      	ldrb	r1, [r4, #0]
   d4792:	f3bf 8f5b 	dmb	ish
   d4796:	f011 0101 	ands.w	r1, r1, #1
   d479a:	d10b      	bne.n	d47b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d479c:	4620      	mov	r0, r4
   d479e:	9101      	str	r1, [sp, #4]
   d47a0:	f7ff fc7f 	bl	d40a2 <__cxa_guard_acquire>
   d47a4:	9901      	ldr	r1, [sp, #4]
   d47a6:	b128      	cbz	r0, d47b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d47a8:	4805      	ldr	r0, [pc, #20]	; (d47c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d47aa:	f000 ffaf 	bl	d570c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d47ae:	4620      	mov	r0, r4
   d47b0:	f7ff fc7c 	bl	d40ac <__cxa_guard_release>
        return instance;
    }
   d47b4:	4802      	ldr	r0, [pc, #8]	; (d47c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d47b6:	b002      	add	sp, #8
   d47b8:	bd10      	pop	{r4, pc}
   d47ba:	bf00      	nop
   d47bc:	2003e644 	.word	0x2003e644
   d47c0:	2003e648 	.word	0x2003e648

000d47c4 <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d47c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
   d47c8:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d47cc:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d47ce:	4605      	mov	r5, r0
   d47d0:	460f      	mov	r7, r1
  if (_sck == -1)
   d47d2:	d106      	bne.n	d47e2 <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d47d4:	f7ff ffda 	bl	d478c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d47d8:	4639      	mov	r1, r7
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
   d47da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d47de:	f001 b81f 	b.w	d5820 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   d47e2:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   d47e4:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   d47e6:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   d47ea:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d47ee:	2100      	movs	r1, #0
   d47f0:	b280      	uxth	r0, r0
   d47f2:	f002 fab8 	bl	d6d66 <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   d47f6:	f995 001e 	ldrsb.w	r0, [r5, #30]
   d47fa:	fa08 f106 	lsl.w	r1, r8, r6
   d47fe:	4039      	ands	r1, r7
   d4800:	b280      	uxth	r0, r0
   d4802:	f002 fab0 	bl	d6d66 <digitalWrite>
    digitalWrite(_sck, HIGH);
   d4806:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d480a:	2101      	movs	r1, #1
   d480c:	b280      	uxth	r0, r0
   d480e:	f002 faaa 	bl	d6d66 <digitalWrite>
    if (digitalRead(_miso))
   d4812:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
   d4816:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   d4818:	b280      	uxth	r0, r0
    reply <<= 1;
   d481a:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   d481c:	f002 fabc 	bl	d6d98 <digitalRead>
   d4820:	b108      	cbz	r0, d4826 <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   d4822:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   d4826:	3e01      	subs	r6, #1
   d4828:	d2df      	bcs.n	d47ea <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
   d482a:	4620      	mov	r0, r4
   d482c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4830 <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   d4830:	b508      	push	{r3, lr}
        instance().setBitOrder(order);
   d4832:	f7ff ffab 	bl	d478c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4836:	2101      	movs	r1, #1
   d4838:	f000 ff83 	bl	d5742 <_ZN8SPIClass11setBitOrderEh>
        return instance().setClockSpeed(value, scale);
   d483c:	f7ff ffa6 	bl	d478c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4840:	4905      	ldr	r1, [pc, #20]	; (d4858 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   d4842:	2201      	movs	r2, #1
   d4844:	f000 ffba 	bl	d57bc <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
   d4848:	f7ff ffa0 	bl	d478c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   d484c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4850:	2100      	movs	r1, #0
   d4852:	f000 bf89 	b.w	d5768 <_ZN8SPIClass11setDataModeEh>
   d4856:	bf00      	nop
   d4858:	0007a120 	.word	0x0007a120

000d485c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d485c:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   d485e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4862:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d4864:	4604      	mov	r4, r0
   d4866:	460e      	mov	r6, r1
   d4868:	4615      	mov	r5, r2
  if (_cs == -1) {
   d486a:	d116      	bne.n	d489a <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   d486c:	f002 fac0 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d4870:	7f21      	ldrb	r1, [r4, #28]
   d4872:	f001 fe4d 	bl	d6510 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d4876:	f002 fabb 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d487a:	6803      	ldr	r3, [r0, #0]
   d487c:	4631      	mov	r1, r6
   d487e:	689b      	ldr	r3, [r3, #8]
   d4880:	4798      	blx	r3
    Wire.write((uint8_t)value);
   d4882:	f002 fab5 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d4886:	6803      	ldr	r3, [r0, #0]
   d4888:	4629      	mov	r1, r5
   d488a:	689b      	ldr	r3, [r3, #8]
   d488c:	4798      	blx	r3
    Wire.endTransmission();
   d488e:	f002 faaf 	bl	d6df0 <_Z19__fetch_global_Wirev>
}
   d4892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   d4896:	f001 be46 	b.w	d6526 <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
   d489a:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d489e:	3301      	adds	r3, #1
   d48a0:	d101      	bne.n	d48a6 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   d48a2:	f7ff ffc5 	bl	d4830 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d48a6:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d48aa:	2100      	movs	r1, #0
   d48ac:	b280      	uxth	r0, r0
   d48ae:	f002 fa5a 	bl	d6d66 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   d48b2:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d48b6:	4620      	mov	r0, r4
   d48b8:	f7ff ff84 	bl	d47c4 <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   d48bc:	4629      	mov	r1, r5
   d48be:	4620      	mov	r0, r4
   d48c0:	f7ff ff80 	bl	d47c4 <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   d48c4:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d48c8:	2101      	movs	r1, #1
}
   d48ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   d48ce:	b280      	uxth	r0, r0
   d48d0:	f002 ba49 	b.w	d6d66 <digitalWrite>

000d48d4 <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d48d4:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d48d6:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d48da:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d48dc:	4604      	mov	r4, r0
   d48de:	460d      	mov	r5, r1
  if (_cs == -1) {
   d48e0:	d11d      	bne.n	d491e <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   d48e2:	f002 fa85 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d48e6:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d48ea:	f001 fe15 	bl	d6518 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   d48ee:	f002 fa7f 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d48f2:	6803      	ldr	r3, [r0, #0]
   d48f4:	4629      	mov	r1, r5
   d48f6:	689b      	ldr	r3, [r3, #8]
   d48f8:	4798      	blx	r3
    Wire.endTransmission();
   d48fa:	f002 fa79 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d48fe:	f001 fe12 	bl	d6526 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
   d4902:	f002 fa75 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d4906:	7f21      	ldrb	r1, [r4, #28]
   d4908:	2201      	movs	r2, #1
   d490a:	f001 fdfe 	bl	d650a <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   d490e:	f002 fa6f 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d4912:	6803      	ldr	r3, [r0, #0]
   d4914:	695b      	ldr	r3, [r3, #20]
   d4916:	4798      	blx	r3
   d4918:	b2c5      	uxtb	r5, r0
}
   d491a:	4628      	mov	r0, r5
   d491c:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
   d491e:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4922:	3301      	adds	r3, #1
   d4924:	d101      	bne.n	d492a <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   d4926:	f7ff ff83 	bl	d4830 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
   d492a:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d492e:	2100      	movs	r1, #0
   d4930:	b280      	uxth	r0, r0
   d4932:	f002 fa18 	bl	d6d66 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   d4936:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d493a:	4620      	mov	r0, r4
   d493c:	f7ff ff42 	bl	d47c4 <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   d4940:	2100      	movs	r1, #0
   d4942:	4620      	mov	r0, r4
   d4944:	f7ff ff3e 	bl	d47c4 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4948:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   d494a:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d494e:	2101      	movs	r1, #1
   d4950:	b280      	uxth	r0, r0
   d4952:	f002 fa08 	bl	d6d66 <digitalWrite>
    if (_sck == -1)
   d4956:	e7e0      	b.n	d491a <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

000d4958 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>:
{
   d4958:	b538      	push	{r3, r4, r5, lr}
   d495a:	460d      	mov	r5, r1
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d495c:	2123      	movs	r1, #35	; 0x23
{
   d495e:	4604      	mov	r4, r0
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d4960:	f7ff ffb8 	bl	d48d4 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  r &= ~(0x30);
   d4964:	f020 0230 	bic.w	r2, r0, #48	; 0x30
  r |= range << 4;
   d4968:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d496c:	4620      	mov	r0, r4
   d496e:	b2d2      	uxtb	r2, r2
}
   d4970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d4974:	2123      	movs	r1, #35	; 0x23
   d4976:	f7ff bf71 	b.w	d485c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d497a <_ZN15Adafruit_LIS3DH8getRangeEv>:
{
   d497a:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   d497c:	2123      	movs	r1, #35	; 0x23
   d497e:	f7ff ffa9 	bl	d48d4 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   d4982:	f3c0 1001 	ubfx	r0, r0, #4, #2
   d4986:	bd08      	pop	{r3, pc}

000d4988 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
   d4988:	b538      	push	{r3, r4, r5, lr}
   d498a:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d498c:	2120      	movs	r1, #32
{
   d498e:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d4990:	f7ff ffa0 	bl	d48d4 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
   d4994:	f000 020f 	and.w	r2, r0, #15
  ctl1 |= (dataRate << 4);
   d4998:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d499c:	4620      	mov	r0, r4
   d499e:	b2d2      	uxtb	r2, r2
}
   d49a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d49a4:	2120      	movs	r1, #32
   d49a6:	f7ff bf59 	b.w	d485c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d49aa <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   d49aa:	b510      	push	{r4, lr}
   d49ac:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   d49ae:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
   d49b0:	f990 001d 	ldrsb.w	r0, [r0, #29]
   d49b4:	1c42      	adds	r2, r0, #1
   d49b6:	d123      	bne.n	d4a00 <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
   d49b8:	f002 fa1a 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d49bc:	f001 fd72 	bl	d64a4 <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   d49c0:	210f      	movs	r1, #15
   d49c2:	4620      	mov	r0, r4
   d49c4:	f7ff ff86 	bl	d48d4 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   d49c8:	2833      	cmp	r0, #51	; 0x33
   d49ca:	d13d      	bne.n	d4a48 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   d49cc:	2207      	movs	r2, #7
   d49ce:	2120      	movs	r1, #32
   d49d0:	4620      	mov	r0, r4
   d49d2:	f7ff ff43 	bl	d485c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
   d49d6:	2107      	movs	r1, #7
   d49d8:	4620      	mov	r0, r4
   d49da:	f7ff ffd5 	bl	d4988 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   d49de:	2288      	movs	r2, #136	; 0x88
   d49e0:	2123      	movs	r1, #35	; 0x23
   d49e2:	4620      	mov	r0, r4
   d49e4:	f7ff ff3a 	bl	d485c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   d49e8:	2210      	movs	r2, #16
   d49ea:	2122      	movs	r1, #34	; 0x22
   d49ec:	4620      	mov	r0, r4
   d49ee:	f7ff ff35 	bl	d485c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   d49f2:	4620      	mov	r0, r4
   d49f4:	2280      	movs	r2, #128	; 0x80
   d49f6:	211f      	movs	r1, #31
   d49f8:	f7ff ff30 	bl	d485c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
   d49fc:	2001      	movs	r0, #1
}
   d49fe:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   d4a00:	2101      	movs	r1, #1
   d4a02:	b280      	uxth	r0, r0
   d4a04:	f002 f9af 	bl	d6d66 <digitalWrite>
    pinMode(_cs, OUTPUT);
   d4a08:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4a0c:	2101      	movs	r1, #1
   d4a0e:	b280      	uxth	r0, r0
   d4a10:	f002 f998 	bl	d6d44 <pinMode>
    if (_sck == -1) {
   d4a14:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4a18:	1c43      	adds	r3, r0, #1
   d4a1a:	d104      	bne.n	d4a26 <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
   d4a1c:	f7ff feb6 	bl	d478c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4a20:	f000 fe7e 	bl	d5720 <_ZN8SPIClass5beginEv>
    }
   d4a24:	e7cc      	b.n	d49c0 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
   d4a26:	2101      	movs	r1, #1
   d4a28:	b280      	uxth	r0, r0
   d4a2a:	f002 f98b 	bl	d6d44 <pinMode>
      pinMode(_mosi, OUTPUT);
   d4a2e:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d4a32:	2101      	movs	r1, #1
   d4a34:	b280      	uxth	r0, r0
   d4a36:	f002 f985 	bl	d6d44 <pinMode>
      pinMode(_miso, INPUT);
   d4a3a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4a3e:	2100      	movs	r1, #0
   d4a40:	b280      	uxth	r0, r0
   d4a42:	f002 f97f 	bl	d6d44 <pinMode>
   d4a46:	e7bb      	b.n	d49c0 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
   d4a48:	2000      	movs	r0, #0
   d4a4a:	e7d8      	b.n	d49fe <_ZN15Adafruit_LIS3DH5beginEh+0x54>

000d4a4c <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
   d4a4c:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d4a4e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4a52:	3301      	adds	r3, #1
void Adafruit_LIS3DH::read(void) {
   d4a54:	4604      	mov	r4, r0
  if (_cs == -1) {
   d4a56:	d176      	bne.n	d4b46 <_ZN15Adafruit_LIS3DH4readEv+0xfa>
    Wire.beginTransmission(_i2caddr);
   d4a58:	f002 f9ca 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d4a5c:	f994 101c 	ldrsb.w	r1, [r4, #28]
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d4a60:	4d5c      	ldr	r5, [pc, #368]	; (d4bd4 <_ZN15Adafruit_LIS3DH4readEv+0x188>)
    Wire.beginTransmission(_i2caddr);
   d4a62:	f001 fd59 	bl	d6518 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   d4a66:	f002 f9c3 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d4a6a:	21a8      	movs	r1, #168	; 0xa8
   d4a6c:	f7ff fe7a 	bl	d4764 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d4a70:	f002 f9be 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d4a74:	f001 fd57 	bl	d6526 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
   d4a78:	f002 f9ba 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d4a7c:	7f21      	ldrb	r1, [r4, #28]
   d4a7e:	2206      	movs	r2, #6
   d4a80:	f001 fd43 	bl	d650a <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d4a84:	f002 f9b4 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d4a88:	6803      	ldr	r3, [r0, #0]
   d4a8a:	695b      	ldr	r3, [r3, #20]
   d4a8c:	4798      	blx	r3
   d4a8e:	80e0      	strh	r0, [r4, #6]
   d4a90:	f002 f9ae 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d4a94:	6803      	ldr	r3, [r0, #0]
   d4a96:	695b      	ldr	r3, [r3, #20]
   d4a98:	4798      	blx	r3
   d4a9a:	88e3      	ldrh	r3, [r4, #6]
   d4a9c:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d4aa0:	4318      	orrs	r0, r3
   d4aa2:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   d4aa4:	f002 f9a4 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d4aa8:	6803      	ldr	r3, [r0, #0]
   d4aaa:	695b      	ldr	r3, [r3, #20]
   d4aac:	4798      	blx	r3
   d4aae:	8120      	strh	r0, [r4, #8]
   d4ab0:	f002 f99e 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d4ab4:	6803      	ldr	r3, [r0, #0]
   d4ab6:	695b      	ldr	r3, [r3, #20]
   d4ab8:	4798      	blx	r3
   d4aba:	8923      	ldrh	r3, [r4, #8]
   d4abc:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d4ac0:	4318      	orrs	r0, r3
   d4ac2:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   d4ac4:	f002 f994 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d4ac8:	6803      	ldr	r3, [r0, #0]
   d4aca:	695b      	ldr	r3, [r3, #20]
   d4acc:	4798      	blx	r3
   d4ace:	8160      	strh	r0, [r4, #10]
   d4ad0:	f002 f98e 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d4ad4:	6803      	ldr	r3, [r0, #0]
   d4ad6:	695b      	ldr	r3, [r3, #20]
   d4ad8:	4798      	blx	r3
   d4ada:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d4ade:	8965      	ldrh	r5, [r4, #10]
   d4ae0:	4328      	orrs	r0, r5
   d4ae2:	8160      	strh	r0, [r4, #10]
  uint8_t range = getRange();
   d4ae4:	4620      	mov	r0, r4
   d4ae6:	f7ff ff48 	bl	d497a <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d4aea:	2803      	cmp	r0, #3
   d4aec:	d069      	beq.n	d4bc2 <_ZN15Adafruit_LIS3DH4readEv+0x176>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d4aee:	2802      	cmp	r0, #2
   d4af0:	d06a      	beq.n	d4bc8 <_ZN15Adafruit_LIS3DH4readEv+0x17c>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d4af2:	2801      	cmp	r0, #1
   d4af4:	d06b      	beq.n	d4bce <_ZN15Adafruit_LIS3DH4readEv+0x182>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   d4af6:	2800      	cmp	r0, #0
   d4af8:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   d4afc:	bf18      	it	ne
   d4afe:	2301      	movne	r3, #1
  x_g = (float)x / divider;
   d4b00:	ee07 3a90 	vmov	s15, r3
   d4b04:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d4b08:	ee07 3a10 	vmov	s14, r3
   d4b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4b10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d4b14:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  x_g = (float)x / divider;
   d4b18:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   d4b1c:	ee07 3a10 	vmov	s14, r3
   d4b20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_g = (float)x / divider;
   d4b24:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   d4b28:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   d4b2c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d4b30:	ee07 3a10 	vmov	s14, r3
   d4b34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d4b38:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   d4b3c:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d4b40:	edc4 6a05 	vstr	s13, [r4, #20]
}
   d4b44:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
   d4b46:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4b4a:	3301      	adds	r3, #1
   d4b4c:	d101      	bne.n	d4b52 <_ZN15Adafruit_LIS3DH4readEv+0x106>
      beginTransaction();
   d4b4e:	f7ff fe6f 	bl	d4830 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d4b52:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4b56:	2100      	movs	r1, #0
   d4b58:	b280      	uxth	r0, r0
   d4b5a:	f002 f904 	bl	d6d66 <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   d4b5e:	21e8      	movs	r1, #232	; 0xe8
   d4b60:	4620      	mov	r0, r4
   d4b62:	f7ff fe2f 	bl	d47c4 <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   d4b66:	21ff      	movs	r1, #255	; 0xff
   d4b68:	4620      	mov	r0, r4
   d4b6a:	f7ff fe2b 	bl	d47c4 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4b6e:	21ff      	movs	r1, #255	; 0xff
   d4b70:	80e0      	strh	r0, [r4, #6]
   d4b72:	4620      	mov	r0, r4
   d4b74:	f7ff fe26 	bl	d47c4 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4b78:	88e3      	ldrh	r3, [r4, #6]
   d4b7a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4b7e:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   d4b80:	21ff      	movs	r1, #255	; 0xff
   d4b82:	4620      	mov	r0, r4
   d4b84:	f7ff fe1e 	bl	d47c4 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4b88:	21ff      	movs	r1, #255	; 0xff
   d4b8a:	8120      	strh	r0, [r4, #8]
   d4b8c:	4620      	mov	r0, r4
   d4b8e:	f7ff fe19 	bl	d47c4 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4b92:	8923      	ldrh	r3, [r4, #8]
   d4b94:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4b98:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   d4b9a:	21ff      	movs	r1, #255	; 0xff
   d4b9c:	4620      	mov	r0, r4
   d4b9e:	f7ff fe11 	bl	d47c4 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4ba2:	21ff      	movs	r1, #255	; 0xff
   d4ba4:	8160      	strh	r0, [r4, #10]
   d4ba6:	4620      	mov	r0, r4
   d4ba8:	f7ff fe0c 	bl	d47c4 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4bac:	8963      	ldrh	r3, [r4, #10]
   d4bae:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4bb2:	8160      	strh	r0, [r4, #10]
    digitalWrite(_cs, HIGH);
   d4bb4:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4bb8:	2101      	movs	r1, #1
   d4bba:	b280      	uxth	r0, r0
   d4bbc:	f002 f8d3 	bl	d6d66 <digitalWrite>
    if (_sck == -1)
   d4bc0:	e790      	b.n	d4ae4 <_ZN15Adafruit_LIS3DH4readEv+0x98>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d4bc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d4bc6:	e79b      	b.n	d4b00 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d4bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   d4bcc:	e798      	b.n	d4b00 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d4bce:	f641 73fe 	movw	r3, #8190	; 0x1ffe
   d4bd2:	e795      	b.n	d4b00 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
   d4bd4:	00ffff00 	.word	0x00ffff00

000d4bd8 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   d4bd8:	460c      	mov	r4, r1
   d4bda:	4605      	mov	r5, r0
   d4bdc:	b508      	push	{r3, lr}
  memset(event, 0, sizeof(sensors_event_t));
   d4bde:	2220      	movs	r2, #32
   d4be0:	2100      	movs	r1, #0
   d4be2:	1d20      	adds	r0, r4, #4
   d4be4:	f002 ff3e 	bl	d7a64 <memset>
  event->version   = sizeof(sensors_event_t);
   d4be8:	2324      	movs	r3, #36	; 0x24
   d4bea:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d4bec:	69ab      	ldr	r3, [r5, #24]
   d4bee:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   d4bf0:	2301      	movs	r3, #1
   d4bf2:	60a3      	str	r3, [r4, #8]
  event->timestamp = 0;
   d4bf4:	2300      	movs	r3, #0
   d4bf6:	6123      	str	r3, [r4, #16]
  read();
   d4bf8:	4628      	mov	r0, r5
   d4bfa:	f7ff ff27 	bl	d4a4c <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
   d4bfe:	68eb      	ldr	r3, [r5, #12]
   d4c00:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   d4c02:	692b      	ldr	r3, [r5, #16]
   d4c04:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   d4c06:	696b      	ldr	r3, [r5, #20]
   d4c08:	61e3      	str	r3, [r4, #28]

000d4c0a <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   d4c0a:	b510      	push	{r4, lr}
   d4c0c:	4604      	mov	r4, r0
   d4c0e:	f001 fedb 	bl	d69c8 <_ZN9TCPClientC1Ev>
{

}
   d4c12:	4620      	mov	r0, r4
   d4c14:	bd10      	pop	{r4, pc}
	...

000d4c18 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   d4c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   d4c1a:	4f0f      	ldr	r7, [pc, #60]	; (d4c58 <_ZN10HttpClient10sendHeaderEPKcS1_+0x40>)
{
   d4c1c:	4605      	mov	r5, r0
   d4c1e:	4614      	mov	r4, r2
   d4c20:	460e      	mov	r6, r1
    client.print(aHeaderName);
   d4c22:	f001 f91d 	bl	d5e60 <_ZN5Print5printEPKc>
    client.print(": ");
   d4c26:	4639      	mov	r1, r7
   d4c28:	4628      	mov	r0, r5
   d4c2a:	f001 f919 	bl	d5e60 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d4c2e:	4621      	mov	r1, r4
   d4c30:	4628      	mov	r0, r5
   d4c32:	f001 f92e 	bl	d5e92 <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.print(aHeaderName);
   d4c36:	f001 fb4f 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4c3a:	4631      	mov	r1, r6
   d4c3c:	f001 f910 	bl	d5e60 <_ZN5Print5printEPKc>
    Serial.print(": ");
   d4c40:	f001 fb4a 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4c44:	4639      	mov	r1, r7
   d4c46:	f001 f90b 	bl	d5e60 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   d4c4a:	f001 fb45 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4c4e:	4621      	mov	r1, r4
    #endif
}
   d4c50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(aHeaderValue);
   d4c54:	f001 b91d 	b.w	d5e92 <_ZN5Print7printlnEPKc>
   d4c58:	000d7d64 	.word	0x000d7d64

000d4c5c <_ZN10HttpClient10sendHeaderEPKc>:
    Serial.println(aHeaderValue);
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName)
{
   d4c5c:	b510      	push	{r4, lr}
   d4c5e:	460c      	mov	r4, r1
    client.println(aHeaderName);
   d4c60:	f001 f917 	bl	d5e92 <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.println(aHeaderName);
   d4c64:	f001 fb38 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4c68:	4621      	mov	r1, r4
    #endif
}
   d4c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(aHeaderName);
   d4c6e:	f001 b910 	b.w	d5e92 <_ZN5Print7printlnEPKc>

000d4c72 <_ZN5Print7printlnIiLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   d4c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c74:	4605      	mov	r5, r0
   d4c76:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d4c78:	4616      	mov	r6, r2
   d4c7a:	b94a      	cbnz	r2, d4c90 <_ZN5Print7printlnIiLi0EEEjT_i+0x1e>
        return write(n);
   d4c7c:	6803      	ldr	r3, [r0, #0]
   d4c7e:	b2c9      	uxtb	r1, r1
   d4c80:	689b      	ldr	r3, [r3, #8]
   d4c82:	4798      	blx	r3
   d4c84:	4607      	mov	r7, r0
        n += println();
   d4c86:	4628      	mov	r0, r5
   d4c88:	f001 f8f7 	bl	d5e7a <_ZN5Print7printlnEv>
    }
   d4c8c:	4438      	add	r0, r7
   d4c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d4c90:	2900      	cmp	r1, #0
   d4c92:	da0c      	bge.n	d4cae <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
   d4c94:	2a0a      	cmp	r2, #10
   d4c96:	d10a      	bne.n	d4cae <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
            t = print('-');
   d4c98:	212d      	movs	r1, #45	; 0x2d
   d4c9a:	f001 f8e5 	bl	d5e68 <_ZN5Print5printEc>
            val = -n;
   d4c9e:	4261      	negs	r1, r4
            t = print('-');
   d4ca0:	4607      	mov	r7, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4ca2:	b2f2      	uxtb	r2, r6
   d4ca4:	4628      	mov	r0, r5
   d4ca6:	f001 f8fe 	bl	d5ea6 <_ZN5Print11printNumberEmh>
   d4caa:	4407      	add	r7, r0
   d4cac:	e7eb      	b.n	d4c86 <_ZN5Print7printlnIiLi0EEEjT_i+0x14>
            val = n;
   d4cae:	4621      	mov	r1, r4
        size_t t = 0;
   d4cb0:	2700      	movs	r7, #0
   d4cb2:	e7f6      	b.n	d4ca2 <_ZN5Print7printlnIiLi0EEEjT_i+0x30>

000d4cb4 <_ZN10HttpClient10sendHeaderEPKci>:
{
   d4cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(": ");
   d4cb6:	4f10      	ldr	r7, [pc, #64]	; (d4cf8 <_ZN10HttpClient10sendHeaderEPKci+0x44>)
{
   d4cb8:	4605      	mov	r5, r0
   d4cba:	4614      	mov	r4, r2
   d4cbc:	460e      	mov	r6, r1
    client.print(aHeaderName);
   d4cbe:	f001 f8cf 	bl	d5e60 <_ZN5Print5printEPKc>
    client.print(": ");
   d4cc2:	4639      	mov	r1, r7
   d4cc4:	4628      	mov	r0, r5
   d4cc6:	f001 f8cb 	bl	d5e60 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d4cca:	220a      	movs	r2, #10
   d4ccc:	4621      	mov	r1, r4
   d4cce:	4628      	mov	r0, r5
   d4cd0:	f7ff ffcf 	bl	d4c72 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.print(aHeaderName);
   d4cd4:	f001 fb00 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4cd8:	4631      	mov	r1, r6
   d4cda:	f001 f8c1 	bl	d5e60 <_ZN5Print5printEPKc>
    Serial.print(": ");
   d4cde:	f001 fafb 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4ce2:	4639      	mov	r1, r7
   d4ce4:	f001 f8bc 	bl	d5e60 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   d4ce8:	f001 faf6 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4cec:	220a      	movs	r2, #10
   d4cee:	4621      	mov	r1, r4
   d4cf0:	f7ff ffbf 	bl	d4c72 <_ZN5Print7printlnIiLi0EEEjT_i>
}
   d4cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4cf6:	bf00      	nop
   d4cf8:	000d7d64 	.word	0x000d7d64

000d4cfc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d4cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4d00:	460e      	mov	r6, r1
   d4d02:	b091      	sub	sp, #68	; 0x44
   d4d04:	461f      	mov	r7, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d4d06:	f04f 33ff 	mov.w	r3, #4294967295
   d4d0a:	6013      	str	r3, [r2, #0]
{
   d4d0c:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4d0e:	2100      	movs	r1, #0
   d4d10:	4630      	mov	r0, r6
   d4d12:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   d4d16:	4691      	mov	r9, r2
   d4d18:	f000 ffec 	bl	d5cf4 <_ZNK6String6equalsEPKc>
   d4d1c:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   d4d20:	4603      	mov	r3, r0
   d4d22:	2800      	cmp	r0, #0
   d4d24:	d16e      	bne.n	d4e04 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x108>
	const char * c_str() const { return buffer; }
   d4d26:	f1be 0f00 	cmp.w	lr, #0
   d4d2a:	bf14      	ite	ne
   d4d2c:	4672      	movne	r2, lr
   d4d2e:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   d4d30:	6831      	ldr	r1, [r6, #0]
   d4d32:	b292      	uxth	r2, r2
   d4d34:	4620      	mov	r0, r4
   d4d36:	f001 fe5b 	bl	d69f0 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   d4d3a:	1e05      	subs	r5, r0, #0
   d4d3c:	bf18      	it	ne
   d4d3e:	2501      	movne	r5, #1
    }

    #ifdef LOGGING
    if (connected) {
   d4d40:	2d00      	cmp	r5, #0
   d4d42:	d07e      	beq.n	d4e42 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x146>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4d44:	2100      	movs	r1, #0
   d4d46:	4630      	mov	r0, r6
   d4d48:	f000 ffd4 	bl	d5cf4 <_ZNK6String6equalsEPKc>
        if(aRequest.hostname!=NULL) {
   d4d4c:	2800      	cmp	r0, #0
   d4d4e:	d16c      	bne.n	d4e2a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x12e>
            Serial.print("HttpClient>\tConnecting to: ");
   d4d50:	f001 fac2 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4d54:	49bb      	ldr	r1, [pc, #748]	; (d5044 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x348>)
   d4d56:	f001 f883 	bl	d5e60 <_ZN5Print5printEPKc>
            Serial.print(aRequest.hostname);
   d4d5a:	f001 fabd 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4d5e:	6831      	ldr	r1, [r6, #0]
   d4d60:	f001 f87e 	bl	d5e60 <_ZN5Print5printEPKc>
        } else {
            Serial.print("HttpClient>\tConnecting to IP: ");
            Serial.print(aRequest.ip);
        }
        Serial.print(":");
   d4d64:	f001 fab8 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4d68:	49b7      	ldr	r1, [pc, #732]	; (d5048 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x34c>)
   d4d6a:	f001 f879 	bl	d5e60 <_ZN5Print5printEPKc>
        Serial.println(aRequest.port);
   d4d6e:	f001 fab3 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4d72:	220a      	movs	r2, #10
   d4d74:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   d4d76:	f7ff ff7c 	bl	d4c72 <_ZN5Print7printlnIiLi0EEEjT_i>
    //
    // Send HTTP Headers
    //

    // Send initial headers (only HTTP 1.0 is supported for now).
    client.print(aHttpMethod);
   d4d7a:	4641      	mov	r1, r8
   d4d7c:	4620      	mov	r0, r4
   d4d7e:	f001 f86f 	bl	d5e60 <_ZN5Print5printEPKc>
    client.print(" ");
   d4d82:	49b2      	ldr	r1, [pc, #712]	; (d504c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   d4d84:	4620      	mov	r0, r4
   d4d86:	f001 f86b 	bl	d5e60 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   d4d8a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   d4d8c:	4620      	mov	r0, r4
   d4d8e:	f001 f867 	bl	d5e60 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   d4d92:	49af      	ldr	r1, [pc, #700]	; (d5050 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   d4d94:	4620      	mov	r0, r4
   d4d96:	f001 f863 	bl	d5e60 <_ZN5Print5printEPKc>

    #ifdef LOGGING
    Serial.println("HttpClient>\tStart of HTTP Request.");
   d4d9a:	f001 fa9d 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4d9e:	49ad      	ldr	r1, [pc, #692]	; (d5054 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   d4da0:	f001 f877 	bl	d5e92 <_ZN5Print7printlnEPKc>
    Serial.print(aHttpMethod);
   d4da4:	f001 fa98 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4da8:	4641      	mov	r1, r8
   d4daa:	f001 f859 	bl	d5e60 <_ZN5Print5printEPKc>
    Serial.print(" ");
   d4dae:	f001 fa93 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4db2:	49a6      	ldr	r1, [pc, #664]	; (d504c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   d4db4:	f001 f854 	bl	d5e60 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
   d4db8:	f001 fa8e 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4dbc:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   d4dbe:	f001 f84f 	bl	d5e60 <_ZN5Print5printEPKc>
    Serial.print(" HTTP/1.0\r\n");
   d4dc2:	f001 fa89 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4dc6:	49a2      	ldr	r1, [pc, #648]	; (d5050 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   d4dc8:	f001 f84a 	bl	d5e60 <_ZN5Print5printEPKc>
    #endif

    // Send General and Request Headers.
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   d4dcc:	49a2      	ldr	r1, [pc, #648]	; (d5058 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x35c>)
   d4dce:	4aa3      	ldr	r2, [pc, #652]	; (d505c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x360>)
   d4dd0:	4620      	mov	r0, r4
   d4dd2:	f7ff ff21 	bl	d4c18 <_ZN10HttpClient10sendHeaderEPKcS1_>
   d4dd6:	2100      	movs	r1, #0
   d4dd8:	4630      	mov	r0, r6
   d4dda:	f000 ff8b 	bl	d5cf4 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   d4dde:	b920      	cbnz	r0, d4dea <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xee>
        sendHeader("HOST", aRequest.hostname.c_str());
   d4de0:	6832      	ldr	r2, [r6, #0]
   d4de2:	499f      	ldr	r1, [pc, #636]	; (d5060 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x364>)
   d4de4:	4620      	mov	r0, r4
   d4de6:	f7ff ff17 	bl	d4c18 <_ZN10HttpClient10sendHeaderEPKcS1_>
    }

    //Send Entity Headers
    // TODO: Check the standard, currently sending Content-Length : 0 for empty
    // POST requests, and no content-length for other types.
    if (aRequest.body != NULL) {
   d4dea:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   d4dee:	2100      	movs	r1, #0
   d4df0:	4650      	mov	r0, sl
   d4df2:	f000 ff7f 	bl	d5cf4 <_ZNK6String6equalsEPKc>
   d4df6:	bb78      	cbnz	r0, d4e58 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x15c>
        sendHeader("Content-Length", (aRequest.body).length());
   d4df8:	6c72      	ldr	r2, [r6, #68]	; 0x44
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
        sendHeader("Content-Length", 0);
   d4dfa:	499a      	ldr	r1, [pc, #616]	; (d5064 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x368>)
   d4dfc:	4620      	mov	r0, r4
   d4dfe:	f7ff ff59 	bl	d4cb4 <_ZN10HttpClient10sendHeaderEPKci>
   d4e02:	e030      	b.n	d4e66 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4e04:	4b98      	ldr	r3, [pc, #608]	; (d5068 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x36c>)
   d4e06:	930a      	str	r3, [sp, #40]	; 0x28
   d4e08:	f106 0c14 	add.w	ip, r6, #20
   d4e0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d4e10:	ad0b      	add	r5, sp, #44	; 0x2c
   d4e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4e14:	f8dc 3000 	ldr.w	r3, [ip]
   d4e18:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   d4e1a:	fa1f f28e 	uxth.w	r2, lr
   d4e1e:	2300      	movs	r3, #0
   d4e20:	a90a      	add	r1, sp, #40	; 0x28
   d4e22:	4620      	mov	r0, r4
   d4e24:	f001 fcb1 	bl	d678a <_ZN9TCPClient7connectE9IPAddresstm>
   d4e28:	e787      	b.n	d4d3a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3e>
            Serial.print("HttpClient>\tConnecting to IP: ");
   d4e2a:	f001 fa55 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4e2e:	498f      	ldr	r1, [pc, #572]	; (d506c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x370>)
   d4e30:	f001 f816 	bl	d5e60 <_ZN5Print5printEPKc>
            Serial.print(aRequest.ip);
   d4e34:	f001 fa50 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4e38:	f106 0110 	add.w	r1, r6, #16
   d4e3c:	f001 f817 	bl	d5e6e <_ZN5Print5printERK9Printable>
   d4e40:	e790      	b.n	d4d64 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x68>
        Serial.println("HttpClient>\tConnection failed.");
   d4e42:	f001 fa49 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4e46:	498a      	ldr	r1, [pc, #552]	; (d5070 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x374>)
   d4e48:	f001 f823 	bl	d5e92 <_ZN5Print7printlnEPKc>
        client.stop();
   d4e4c:	4620      	mov	r0, r4
   d4e4e:	f001 fd71 	bl	d6934 <_ZN9TCPClient4stopEv>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   d4e52:	b011      	add	sp, #68	; 0x44
   d4e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   d4e58:	4986      	ldr	r1, [pc, #536]	; (d5074 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x378>)
   d4e5a:	4640      	mov	r0, r8
   d4e5c:	f002 fe2e 	bl	d7abc <strcmp>
   d4e60:	4602      	mov	r2, r0
   d4e62:	2800      	cmp	r0, #0
   d4e64:	d0c9      	beq.n	d4dfa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfe>
    if (headers != NULL)
   d4e66:	b15f      	cbz	r7, d4e80 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x184>
        while (headers[i].header != NULL)
   d4e68:	6839      	ldr	r1, [r7, #0]
   d4e6a:	b149      	cbz	r1, d4e80 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x184>
            if (headers[i].value != NULL) {
   d4e6c:	687a      	ldr	r2, [r7, #4]
                sendHeader(headers[i].header, headers[i].value);
   d4e6e:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   d4e70:	b11a      	cbz	r2, d4e7a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17e>
                sendHeader(headers[i].header, headers[i].value);
   d4e72:	f7ff fed1 	bl	d4c18 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   d4e76:	3708      	adds	r7, #8
        while (headers[i].header != NULL)
   d4e78:	e7f6      	b.n	d4e68 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16c>
                sendHeader(headers[i].header);
   d4e7a:	f7ff feef 	bl	d4c5c <_ZN10HttpClient10sendHeaderEPKc>
   d4e7e:	e7fa      	b.n	d4e76 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17a>
    client.println();
   d4e80:	4620      	mov	r0, r4
   d4e82:	f000 fffa 	bl	d5e7a <_ZN5Print7printlnEv>
    client.flush();
   d4e86:	4620      	mov	r0, r4
   d4e88:	f001 fb72 	bl	d6570 <_ZN9TCPClient5flushEv>
   d4e8c:	2100      	movs	r1, #0
   d4e8e:	4650      	mov	r0, sl
   d4e90:	f000 ff30 	bl	d5cf4 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   d4e94:	b940      	cbnz	r0, d4ea8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ac>
        client.println(aRequest.body);
   d4e96:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   d4e98:	4620      	mov	r0, r4
   d4e9a:	f000 fffa 	bl	d5e92 <_ZN5Print7printlnEPKc>
        Serial.println(aRequest.body);
   d4e9e:	f001 fa1b 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4ea2:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   d4ea4:	f000 fff5 	bl	d5e92 <_ZN5Print7printlnEPKc>
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   d4ea8:	f001 fa16 	bl	d62d8 <_Z16_fetch_usbserialv>
    memset(&buffer[0], 0, sizeof(buffer));
   d4eac:	f104 0a1c 	add.w	sl, r4, #28
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   d4eb0:	4971      	ldr	r1, [pc, #452]	; (d5078 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x37c>)
   d4eb2:	f000 ffee 	bl	d5e92 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   d4eb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4eba:	2100      	movs	r1, #0
   d4ebc:	4650      	mov	r0, sl
   d4ebe:	f002 fdd1 	bl	d7a64 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4ec2:	f000 f949 	bl	d5158 <HAL_Timer_Get_Milli_Seconds>
   d4ec6:	9000      	str	r0, [sp, #0]
   d4ec8:	f000 f946 	bl	d5158 <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
   d4ecc:	2700      	movs	r7, #0
   d4ece:	9001      	str	r0, [sp, #4]
        int bytes = client.available();
   d4ed0:	4620      	mov	r0, r4
   d4ed2:	f001 fcd5 	bl	d6880 <_ZN9TCPClient9availableEv>
        if(bytes) {
   d4ed6:	4606      	mov	r6, r0
   d4ed8:	b1b0      	cbz	r0, d4f08 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x20c>
            Serial.print("\r\nHttpClient>\tReceiving TCP transaction of ");
   d4eda:	f001 f9fd 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4ede:	4967      	ldr	r1, [pc, #412]	; (d507c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x380>)
   d4ee0:	f000 ffbe 	bl	d5e60 <_ZN5Print5printEPKc>
            Serial.print(bytes);
   d4ee4:	f001 f9f8 	bl	d62d8 <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
   d4ee8:	2e00      	cmp	r6, #0
   d4eea:	4683      	mov	fp, r0
   d4eec:	da27      	bge.n	d4f3e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x242>
            t = print('-');
   d4eee:	212d      	movs	r1, #45	; 0x2d
   d4ef0:	f000 ffba 	bl	d5e68 <_ZN5Print5printEc>
            val = -n;
   d4ef4:	4271      	negs	r1, r6
        return printNumber(val, base) + t;
   d4ef6:	220a      	movs	r2, #10
   d4ef8:	4658      	mov	r0, fp
   d4efa:	f000 ffd4 	bl	d5ea6 <_ZN5Print11printNumberEmh>
            Serial.println(" bytes.");
   d4efe:	f001 f9eb 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4f02:	495f      	ldr	r1, [pc, #380]	; (d5080 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x384>)
   d4f04:	f000 ffc5 	bl	d5e92 <_ZN5Print7printlnEPKc>
    unsigned int bufferPosition = 0;
   d4f08:	f04f 0b00 	mov.w	fp, #0
        while (client.available()) {
   d4f0c:	4620      	mov	r0, r4
   d4f0e:	f001 fcb7 	bl	d6880 <_ZN9TCPClient9availableEv>
   d4f12:	b338      	cbz	r0, d4f64 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x268>
            char c = client.read();
   d4f14:	4620      	mov	r0, r4
   d4f16:	f001 fbec 	bl	d66f2 <_ZN9TCPClient4readEv>
   d4f1a:	fa5f f880 	uxtb.w	r8, r0
            Serial.print(c);
   d4f1e:	f001 f9db 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4f22:	4641      	mov	r1, r8
   d4f24:	f000 ffa0 	bl	d5e68 <_ZN5Print5printEc>
   d4f28:	f000 f916 	bl	d5158 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   d4f2c:	f240 33fe 	movw	r3, #1022	; 0x3fe
   d4f30:	429f      	cmp	r7, r3
   d4f32:	9000      	str	r0, [sp, #0]
   d4f34:	d805      	bhi.n	d4f42 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x246>
                buffer[bufferPosition] = c;
   d4f36:	f80a 8007 	strb.w	r8, [sl, r7]
            bufferPosition++;
   d4f3a:	3701      	adds	r7, #1
        while (client.available()) {
   d4f3c:	e7e6      	b.n	d4f0c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x210>
            val = n;
   d4f3e:	4631      	mov	r1, r6
   d4f40:	e7d9      	b.n	d4ef6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fa>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   d4f42:	f240 33ff 	movw	r3, #1023	; 0x3ff
   d4f46:	429f      	cmp	r7, r3
   d4f48:	d1f7      	bne.n	d4f3a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23e>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d4f4a:	2300      	movs	r3, #0
   d4f4c:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   d4f50:	4620      	mov	r0, r4
   d4f52:	f001 fcef 	bl	d6934 <_ZN9TCPClient4stopEv>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
   d4f56:	f001 f9bf 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4f5a:	494a      	ldr	r1, [pc, #296]	; (d5084 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x388>)
   d4f5c:	f000 ff99 	bl	d5e92 <_ZN5Print7printlnEPKc>
                error = true;
   d4f60:	46ab      	mov	fp, r5
   d4f62:	e7ea      	b.n	d4f3a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23e>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d4f64:	19e3      	adds	r3, r4, r7
   d4f66:	7718      	strb	r0, [r3, #28]
        if (bytes) {
   d4f68:	b126      	cbz	r6, d4f74 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x278>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
   d4f6a:	f001 f9b5 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4f6e:	4946      	ldr	r1, [pc, #280]	; (d5088 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x38c>)
   d4f70:	f000 ff76 	bl	d5e60 <_ZN5Print5printEPKc>
   d4f74:	f000 f8f0 	bl	d5158 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   d4f78:	9b00      	ldr	r3, [sp, #0]
   d4f7a:	1ac6      	subs	r6, r0, r3
        if (!error && !timeout) {
   d4f7c:	f1bb 0f00 	cmp.w	fp, #0
   d4f80:	d106      	bne.n	d4f90 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x294>
   d4f82:	f241 3388 	movw	r3, #5000	; 0x1388
   d4f86:	429e      	cmp	r6, r3
   d4f88:	d802      	bhi.n	d4f90 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x294>
            delay(200);
   d4f8a:	20c8      	movs	r0, #200	; 0xc8
   d4f8c:	f000 fffc 	bl	d5f88 <delay>
    } while (client.connected() && !timeout && !error);
   d4f90:	4620      	mov	r0, r4
   d4f92:	f001 faee 	bl	d6572 <_ZN9TCPClient9connectedEv>
   d4f96:	f241 3388 	movw	r3, #5000	; 0x1388
   d4f9a:	2800      	cmp	r0, #0
   d4f9c:	d04a      	beq.n	d5034 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x338>
   d4f9e:	429e      	cmp	r6, r3
   d4fa0:	d84a      	bhi.n	d5038 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x33c>
   d4fa2:	f1bb 0f00 	cmp.w	fp, #0
   d4fa6:	d093      	beq.n	d4ed0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d4>
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
   d4fa8:	f001 f996 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4fac:	4937      	ldr	r1, [pc, #220]	; (d508c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x390>)
   d4fae:	f000 ff57 	bl	d5e60 <_ZN5Print5printEPKc>
    Serial.print(millis() - firstRead);
   d4fb2:	f001 f991 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4fb6:	4605      	mov	r5, r0
   d4fb8:	f000 f8ce 	bl	d5158 <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   d4fbc:	9b01      	ldr	r3, [sp, #4]
   d4fbe:	220a      	movs	r2, #10
   d4fc0:	1ac1      	subs	r1, r0, r3
   d4fc2:	4628      	mov	r0, r5
   d4fc4:	f000 ff6f 	bl	d5ea6 <_ZN5Print11printNumberEmh>
    Serial.println("ms).");
   d4fc8:	f001 f986 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4fcc:	4930      	ldr	r1, [pc, #192]	; (d5090 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x394>)
   d4fce:	f000 ff60 	bl	d5e92 <_ZN5Print7printlnEPKc>
    client.stop();
   d4fd2:	4620      	mov	r0, r4
   d4fd4:	f001 fcae 	bl	d6934 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   d4fd8:	4651      	mov	r1, sl
   d4fda:	a802      	add	r0, sp, #8
   d4fdc:	f000 fdce 	bl	d5b7c <_ZN6StringC1EPKc>
    String statusCode = raw_response.substring(9,12);
   d4fe0:	230c      	movs	r3, #12
   d4fe2:	2209      	movs	r2, #9
   d4fe4:	a902      	add	r1, sp, #8
   d4fe6:	a806      	add	r0, sp, #24
   d4fe8:	f000 fea8 	bl	d5d3c <_ZNK6String9substringEjj>
    Serial.print("HttpClient>\tStatus Code: ");
   d4fec:	f001 f974 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4ff0:	4928      	ldr	r1, [pc, #160]	; (d5094 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x398>)
   d4ff2:	f000 ff35 	bl	d5e60 <_ZN5Print5printEPKc>
    Serial.println(statusCode);
   d4ff6:	f001 f96f 	bl	d62d8 <_Z16_fetch_usbserialv>
   d4ffa:	9906      	ldr	r1, [sp, #24]
   d4ffc:	f000 ff49 	bl	d5e92 <_ZN5Print7printlnEPKc>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   d5000:	4925      	ldr	r1, [pc, #148]	; (d5098 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x39c>)
   d5002:	a80a      	add	r0, sp, #40	; 0x28
   d5004:	f000 fdba 	bl	d5b7c <_ZN6StringC1EPKc>
   d5008:	a90a      	add	r1, sp, #40	; 0x28
   d500a:	a802      	add	r0, sp, #8
   d500c:	f000 fe93 	bl	d5d36 <_ZNK6String7indexOfERKS_>
   d5010:	4604      	mov	r4, r0
   d5012:	a80a      	add	r0, sp, #40	; 0x28
   d5014:	f000 fd67 	bl	d5ae6 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   d5018:	1c63      	adds	r3, r4, #1
   d501a:	d143      	bne.n	d50a4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a8>
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
   d501c:	f001 f95c 	bl	d62d8 <_Z16_fetch_usbserialv>
   d5020:	491e      	ldr	r1, [pc, #120]	; (d509c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a0>)
   d5022:	f000 ff36 	bl	d5e92 <_ZN5Print7printlnEPKc>
    String statusCode = raw_response.substring(9,12);
   d5026:	a806      	add	r0, sp, #24
   d5028:	f000 fd5d 	bl	d5ae6 <_ZN6StringD1Ev>
    String raw_response(buffer);
   d502c:	a802      	add	r0, sp, #8
   d502e:	f000 fd5a 	bl	d5ae6 <_ZN6StringD1Ev>
   d5032:	e70e      	b.n	d4e52 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x156>
    if (timeout) {
   d5034:	429e      	cmp	r6, r3
   d5036:	d9b7      	bls.n	d4fa8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2ac>
        Serial.println("\r\nHttpClient>\tError: Timeout while reading response.");
   d5038:	f001 f94e 	bl	d62d8 <_Z16_fetch_usbserialv>
   d503c:	4918      	ldr	r1, [pc, #96]	; (d50a0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a4>)
   d503e:	f000 ff28 	bl	d5e92 <_ZN5Print7printlnEPKc>
   d5042:	e7b1      	b.n	d4fa8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2ac>
   d5044:	000d7d2c 	.word	0x000d7d2c
   d5048:	000d7c88 	.word	0x000d7c88
   d504c:	000d7d65 	.word	0x000d7d65
   d5050:	000d7d67 	.word	0x000d7d67
   d5054:	000d7d73 	.word	0x000d7d73
   d5058:	000d7d9c 	.word	0x000d7d9c
   d505c:	000d7d96 	.word	0x000d7d96
   d5060:	000d7dc6 	.word	0x000d7dc6
   d5064:	000d7dcb 	.word	0x000d7dcb
   d5068:	000d7fe0 	.word	0x000d7fe0
   d506c:	000d7d48 	.word	0x000d7d48
   d5070:	000d7da7 	.word	0x000d7da7
   d5074:	000d7ca9 	.word	0x000d7ca9
   d5078:	000d7dda 	.word	0x000d7dda
   d507c:	000d7dfb 	.word	0x000d7dfb
   d5080:	000d7e27 	.word	0x000d7e27
   d5084:	000d7e2f 	.word	0x000d7e2f
   d5088:	000d7e64 	.word	0x000d7e64
   d508c:	000d7ebf 	.word	0x000d7ebf
   d5090:	000d7ee4 	.word	0x000d7ee4
   d5094:	000d7ee9 	.word	0x000d7ee9
   d5098:	000d7f03 	.word	0x000d7f03
   d509c:	000d7f08 	.word	0x000d7f08
   d50a0:	000d7e8a 	.word	0x000d7e8a
    aResponse.body = "";
   d50a4:	f109 0504 	add.w	r5, r9, #4
   d50a8:	490a      	ldr	r1, [pc, #40]	; (d50d4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3d8>)
   d50aa:	4628      	mov	r0, r5
   d50ac:	f000 fdae 	bl	d5c0c <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   d50b0:	1d22      	adds	r2, r4, #4
   d50b2:	a902      	add	r1, sp, #8
   d50b4:	a80a      	add	r0, sp, #40	; 0x28
   d50b6:	f000 fe61 	bl	d5d7c <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d50ba:	a90a      	add	r1, sp, #40	; 0x28
   d50bc:	4628      	mov	r0, r5
   d50be:	f000 fdf4 	bl	d5caa <_ZN6String6concatERKS_>
   d50c2:	a80a      	add	r0, sp, #40	; 0x28
   d50c4:	f000 fd0f 	bl	d5ae6 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   d50c8:	9806      	ldr	r0, [sp, #24]
   d50ca:	f002 fc7d 	bl	d79c8 <atoi>
   d50ce:	f8c9 0000 	str.w	r0, [r9]
   d50d2:	e7a8      	b.n	d5026 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x32a>
   d50d4:	000d7f07 	.word	0x000d7f07

000d50d8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d50d8:	b508      	push	{r3, lr}
   d50da:	4b02      	ldr	r3, [pc, #8]	; (d50e4 <netdb_freeaddrinfo+0xc>)
   d50dc:	681b      	ldr	r3, [r3, #0]
   d50de:	689b      	ldr	r3, [r3, #8]
   d50e0:	9301      	str	r3, [sp, #4]
   d50e2:	bd08      	pop	{r3, pc}
   d50e4:	00030268 	.word	0x00030268

000d50e8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d50e8:	b508      	push	{r3, lr}
   d50ea:	4b02      	ldr	r3, [pc, #8]	; (d50f4 <netdb_getaddrinfo+0xc>)
   d50ec:	681b      	ldr	r3, [r3, #0]
   d50ee:	68db      	ldr	r3, [r3, #12]
   d50f0:	9301      	str	r3, [sp, #4]
   d50f2:	bd08      	pop	{r3, pc}
   d50f4:	00030268 	.word	0x00030268

000d50f8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d50f8:	b508      	push	{r3, lr}
   d50fa:	4b02      	ldr	r3, [pc, #8]	; (d5104 <HAL_Pin_Mode+0xc>)
   d50fc:	681b      	ldr	r3, [r3, #0]
   d50fe:	689b      	ldr	r3, [r3, #8]
   d5100:	9301      	str	r3, [sp, #4]
   d5102:	bd08      	pop	{r3, pc}
   d5104:	0003022c 	.word	0x0003022c

000d5108 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5108:	b508      	push	{r3, lr}
   d510a:	4b02      	ldr	r3, [pc, #8]	; (d5114 <HAL_Get_Pin_Mode+0xc>)
   d510c:	681b      	ldr	r3, [r3, #0]
   d510e:	68db      	ldr	r3, [r3, #12]
   d5110:	9301      	str	r3, [sp, #4]
   d5112:	bd08      	pop	{r3, pc}
   d5114:	0003022c 	.word	0x0003022c

000d5118 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5118:	b508      	push	{r3, lr}
   d511a:	4b02      	ldr	r3, [pc, #8]	; (d5124 <HAL_GPIO_Write+0xc>)
   d511c:	681b      	ldr	r3, [r3, #0]
   d511e:	691b      	ldr	r3, [r3, #16]
   d5120:	9301      	str	r3, [sp, #4]
   d5122:	bd08      	pop	{r3, pc}
   d5124:	0003022c 	.word	0x0003022c

000d5128 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5128:	b508      	push	{r3, lr}
   d512a:	4b02      	ldr	r3, [pc, #8]	; (d5134 <HAL_GPIO_Read+0xc>)
   d512c:	681b      	ldr	r3, [r3, #0]
   d512e:	695b      	ldr	r3, [r3, #20]
   d5130:	9301      	str	r3, [sp, #4]
   d5132:	bd08      	pop	{r3, pc}
   d5134:	0003022c 	.word	0x0003022c

000d5138 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5138:	b508      	push	{r3, lr}
   d513a:	4b02      	ldr	r3, [pc, #8]	; (d5144 <if_index_to_name+0xc>)
   d513c:	681b      	ldr	r3, [r3, #0]
   d513e:	695b      	ldr	r3, [r3, #20]
   d5140:	9301      	str	r3, [sp, #4]
   d5142:	bd08      	pop	{r3, pc}
   d5144:	0003026c 	.word	0x0003026c

000d5148 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5148:	b508      	push	{r3, lr}
   d514a:	4b02      	ldr	r3, [pc, #8]	; (d5154 <HAL_RNG_GetRandomNumber+0xc>)
   d514c:	681b      	ldr	r3, [r3, #0]
   d514e:	685b      	ldr	r3, [r3, #4]
   d5150:	9301      	str	r3, [sp, #4]
   d5152:	bd08      	pop	{r3, pc}
   d5154:	00030218 	.word	0x00030218

000d5158 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5158:	b508      	push	{r3, lr}
   d515a:	4b02      	ldr	r3, [pc, #8]	; (d5164 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d515c:	681b      	ldr	r3, [r3, #0]
   d515e:	695b      	ldr	r3, [r3, #20]
   d5160:	9301      	str	r3, [sp, #4]
   d5162:	bd08      	pop	{r3, pc}
   d5164:	00030218 	.word	0x00030218

000d5168 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d5168:	b508      	push	{r3, lr}
   d516a:	4b02      	ldr	r3, [pc, #8]	; (d5174 <hal_rtc_time_is_valid+0xc>)
   d516c:	681b      	ldr	r3, [r3, #0]
   d516e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5170:	9301      	str	r3, [sp, #4]
   d5172:	bd08      	pop	{r3, pc}
   d5174:	00030218 	.word	0x00030218

000d5178 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d5178:	b508      	push	{r3, lr}
   d517a:	4b02      	ldr	r3, [pc, #8]	; (d5184 <hal_rtc_get_time+0xc>)
   d517c:	681b      	ldr	r3, [r3, #0]
   d517e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5180:	9301      	str	r3, [sp, #4]
   d5182:	bd08      	pop	{r3, pc}
   d5184:	00030218 	.word	0x00030218

000d5188 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5188:	b508      	push	{r3, lr}
   d518a:	4b02      	ldr	r3, [pc, #8]	; (d5194 <os_mutex_recursive_create+0xc>)
   d518c:	681b      	ldr	r3, [r3, #0]
   d518e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5190:	9301      	str	r3, [sp, #4]
   d5192:	bd08      	pop	{r3, pc}
   d5194:	00030248 	.word	0x00030248

000d5198 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5198:	b508      	push	{r3, lr}
   d519a:	4b02      	ldr	r3, [pc, #8]	; (d51a4 <os_mutex_recursive_destroy+0xc>)
   d519c:	681b      	ldr	r3, [r3, #0]
   d519e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d51a0:	9301      	str	r3, [sp, #4]
   d51a2:	bd08      	pop	{r3, pc}
   d51a4:	00030248 	.word	0x00030248

000d51a8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d51a8:	b508      	push	{r3, lr}
   d51aa:	4b02      	ldr	r3, [pc, #8]	; (d51b4 <inet_inet_ntop+0xc>)
   d51ac:	681b      	ldr	r3, [r3, #0]
   d51ae:	695b      	ldr	r3, [r3, #20]
   d51b0:	9301      	str	r3, [sp, #4]
   d51b2:	bd08      	pop	{r3, pc}
   d51b4:	00030264 	.word	0x00030264

000d51b8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d51b8:	b508      	push	{r3, lr}
   d51ba:	4b02      	ldr	r3, [pc, #8]	; (d51c4 <inet_htonl+0xc>)
   d51bc:	681b      	ldr	r3, [r3, #0]
   d51be:	6a1b      	ldr	r3, [r3, #32]
   d51c0:	9301      	str	r3, [sp, #4]
   d51c2:	bd08      	pop	{r3, pc}
   d51c4:	00030264 	.word	0x00030264

000d51c8 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d51c8:	b508      	push	{r3, lr}
   d51ca:	4b02      	ldr	r3, [pc, #8]	; (d51d4 <inet_htons+0xc>)
   d51cc:	681b      	ldr	r3, [r3, #0]
   d51ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d51d0:	9301      	str	r3, [sp, #4]
   d51d2:	bd08      	pop	{r3, pc}
   d51d4:	00030264 	.word	0x00030264

000d51d8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d51d8:	b508      	push	{r3, lr}
   d51da:	4b02      	ldr	r3, [pc, #8]	; (d51e4 <hal_usart_init+0xc>)
   d51dc:	681b      	ldr	r3, [r3, #0]
   d51de:	681b      	ldr	r3, [r3, #0]
   d51e0:	9301      	str	r3, [sp, #4]
   d51e2:	bd08      	pop	{r3, pc}
   d51e4:	0003023c 	.word	0x0003023c

000d51e8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d51e8:	b508      	push	{r3, lr}
   d51ea:	4b02      	ldr	r3, [pc, #8]	; (d51f4 <hal_usart_write+0xc>)
   d51ec:	681b      	ldr	r3, [r3, #0]
   d51ee:	68db      	ldr	r3, [r3, #12]
   d51f0:	9301      	str	r3, [sp, #4]
   d51f2:	bd08      	pop	{r3, pc}
   d51f4:	0003023c 	.word	0x0003023c

000d51f8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d51f8:	b508      	push	{r3, lr}
   d51fa:	4b02      	ldr	r3, [pc, #8]	; (d5204 <hal_usart_available+0xc>)
   d51fc:	681b      	ldr	r3, [r3, #0]
   d51fe:	691b      	ldr	r3, [r3, #16]
   d5200:	9301      	str	r3, [sp, #4]
   d5202:	bd08      	pop	{r3, pc}
   d5204:	0003023c 	.word	0x0003023c

000d5208 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5208:	b508      	push	{r3, lr}
   d520a:	4b02      	ldr	r3, [pc, #8]	; (d5214 <hal_usart_read+0xc>)
   d520c:	681b      	ldr	r3, [r3, #0]
   d520e:	695b      	ldr	r3, [r3, #20]
   d5210:	9301      	str	r3, [sp, #4]
   d5212:	bd08      	pop	{r3, pc}
   d5214:	0003023c 	.word	0x0003023c

000d5218 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5218:	b508      	push	{r3, lr}
   d521a:	4b02      	ldr	r3, [pc, #8]	; (d5224 <hal_usart_peek+0xc>)
   d521c:	681b      	ldr	r3, [r3, #0]
   d521e:	699b      	ldr	r3, [r3, #24]
   d5220:	9301      	str	r3, [sp, #4]
   d5222:	bd08      	pop	{r3, pc}
   d5224:	0003023c 	.word	0x0003023c

000d5228 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5228:	b508      	push	{r3, lr}
   d522a:	4b02      	ldr	r3, [pc, #8]	; (d5234 <hal_usart_flush+0xc>)
   d522c:	681b      	ldr	r3, [r3, #0]
   d522e:	69db      	ldr	r3, [r3, #28]
   d5230:	9301      	str	r3, [sp, #4]
   d5232:	bd08      	pop	{r3, pc}
   d5234:	0003023c 	.word	0x0003023c

000d5238 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5238:	b508      	push	{r3, lr}
   d523a:	4b02      	ldr	r3, [pc, #8]	; (d5244 <hal_usart_is_enabled+0xc>)
   d523c:	681b      	ldr	r3, [r3, #0]
   d523e:	6a1b      	ldr	r3, [r3, #32]
   d5240:	9301      	str	r3, [sp, #4]
   d5242:	bd08      	pop	{r3, pc}
   d5244:	0003023c 	.word	0x0003023c

000d5248 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5248:	b508      	push	{r3, lr}
   d524a:	4b02      	ldr	r3, [pc, #8]	; (d5254 <hal_usart_available_data_for_write+0xc>)
   d524c:	681b      	ldr	r3, [r3, #0]
   d524e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5250:	9301      	str	r3, [sp, #4]
   d5252:	bd08      	pop	{r3, pc}
   d5254:	0003023c 	.word	0x0003023c

000d5258 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5258:	b508      	push	{r3, lr}
   d525a:	4b02      	ldr	r3, [pc, #8]	; (d5264 <hal_i2c_begin+0xc>)
   d525c:	681b      	ldr	r3, [r3, #0]
   d525e:	68db      	ldr	r3, [r3, #12]
   d5260:	9301      	str	r3, [sp, #4]
   d5262:	bd08      	pop	{r3, pc}
   d5264:	00030228 	.word	0x00030228

000d5268 <hal_i2c_end>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
   d5268:	b508      	push	{r3, lr}
   d526a:	4b02      	ldr	r3, [pc, #8]	; (d5274 <hal_i2c_end+0xc>)
   d526c:	681b      	ldr	r3, [r3, #0]
   d526e:	691b      	ldr	r3, [r3, #16]
   d5270:	9301      	str	r3, [sp, #4]
   d5272:	bd08      	pop	{r3, pc}
   d5274:	00030228 	.word	0x00030228

000d5278 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5278:	b508      	push	{r3, lr}
   d527a:	4b02      	ldr	r3, [pc, #8]	; (d5284 <hal_i2c_begin_transmission+0xc>)
   d527c:	681b      	ldr	r3, [r3, #0]
   d527e:	699b      	ldr	r3, [r3, #24]
   d5280:	9301      	str	r3, [sp, #4]
   d5282:	bd08      	pop	{r3, pc}
   d5284:	00030228 	.word	0x00030228

000d5288 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5288:	b508      	push	{r3, lr}
   d528a:	4b02      	ldr	r3, [pc, #8]	; (d5294 <hal_i2c_end_transmission+0xc>)
   d528c:	681b      	ldr	r3, [r3, #0]
   d528e:	69db      	ldr	r3, [r3, #28]
   d5290:	9301      	str	r3, [sp, #4]
   d5292:	bd08      	pop	{r3, pc}
   d5294:	00030228 	.word	0x00030228

000d5298 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5298:	b508      	push	{r3, lr}
   d529a:	4b02      	ldr	r3, [pc, #8]	; (d52a4 <hal_i2c_write+0xc>)
   d529c:	681b      	ldr	r3, [r3, #0]
   d529e:	6a1b      	ldr	r3, [r3, #32]
   d52a0:	9301      	str	r3, [sp, #4]
   d52a2:	bd08      	pop	{r3, pc}
   d52a4:	00030228 	.word	0x00030228

000d52a8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d52a8:	b508      	push	{r3, lr}
   d52aa:	4b02      	ldr	r3, [pc, #8]	; (d52b4 <hal_i2c_available+0xc>)
   d52ac:	681b      	ldr	r3, [r3, #0]
   d52ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d52b0:	9301      	str	r3, [sp, #4]
   d52b2:	bd08      	pop	{r3, pc}
   d52b4:	00030228 	.word	0x00030228

000d52b8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d52b8:	b508      	push	{r3, lr}
   d52ba:	4b02      	ldr	r3, [pc, #8]	; (d52c4 <hal_i2c_read+0xc>)
   d52bc:	681b      	ldr	r3, [r3, #0]
   d52be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d52c0:	9301      	str	r3, [sp, #4]
   d52c2:	bd08      	pop	{r3, pc}
   d52c4:	00030228 	.word	0x00030228

000d52c8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d52c8:	b508      	push	{r3, lr}
   d52ca:	4b02      	ldr	r3, [pc, #8]	; (d52d4 <hal_i2c_peek+0xc>)
   d52cc:	681b      	ldr	r3, [r3, #0]
   d52ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d52d0:	9301      	str	r3, [sp, #4]
   d52d2:	bd08      	pop	{r3, pc}
   d52d4:	00030228 	.word	0x00030228

000d52d8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d52d8:	b508      	push	{r3, lr}
   d52da:	4b02      	ldr	r3, [pc, #8]	; (d52e4 <hal_i2c_flush+0xc>)
   d52dc:	681b      	ldr	r3, [r3, #0]
   d52de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52e0:	9301      	str	r3, [sp, #4]
   d52e2:	bd08      	pop	{r3, pc}
   d52e4:	00030228 	.word	0x00030228

000d52e8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d52e8:	b508      	push	{r3, lr}
   d52ea:	4b02      	ldr	r3, [pc, #8]	; (d52f4 <hal_i2c_is_enabled+0xc>)
   d52ec:	681b      	ldr	r3, [r3, #0]
   d52ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d52f0:	9301      	str	r3, [sp, #4]
   d52f2:	bd08      	pop	{r3, pc}
   d52f4:	00030228 	.word	0x00030228

000d52f8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d52f8:	b508      	push	{r3, lr}
   d52fa:	4b02      	ldr	r3, [pc, #8]	; (d5304 <hal_i2c_init+0xc>)
   d52fc:	681b      	ldr	r3, [r3, #0]
   d52fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5300:	9301      	str	r3, [sp, #4]
   d5302:	bd08      	pop	{r3, pc}
   d5304:	00030228 	.word	0x00030228

000d5308 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5308:	b508      	push	{r3, lr}
   d530a:	4b02      	ldr	r3, [pc, #8]	; (d5314 <hal_i2c_request_ex+0xc>)
   d530c:	681b      	ldr	r3, [r3, #0]
   d530e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5310:	9301      	str	r3, [sp, #4]
   d5312:	bd08      	pop	{r3, pc}
   d5314:	00030228 	.word	0x00030228

000d5318 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5318:	b508      	push	{r3, lr}
   d531a:	4b02      	ldr	r3, [pc, #8]	; (d5324 <sock_setsockopt+0xc>)
   d531c:	681b      	ldr	r3, [r3, #0]
   d531e:	699b      	ldr	r3, [r3, #24]
   d5320:	9301      	str	r3, [sp, #4]
   d5322:	bd08      	pop	{r3, pc}
   d5324:	00030238 	.word	0x00030238

000d5328 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5328:	b508      	push	{r3, lr}
   d532a:	4b02      	ldr	r3, [pc, #8]	; (d5334 <sock_close+0xc>)
   d532c:	681b      	ldr	r3, [r3, #0]
   d532e:	69db      	ldr	r3, [r3, #28]
   d5330:	9301      	str	r3, [sp, #4]
   d5332:	bd08      	pop	{r3, pc}
   d5334:	00030238 	.word	0x00030238

000d5338 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5338:	b508      	push	{r3, lr}
   d533a:	4b02      	ldr	r3, [pc, #8]	; (d5344 <sock_connect+0xc>)
   d533c:	681b      	ldr	r3, [r3, #0]
   d533e:	6a1b      	ldr	r3, [r3, #32]
   d5340:	9301      	str	r3, [sp, #4]
   d5342:	bd08      	pop	{r3, pc}
   d5344:	00030238 	.word	0x00030238

000d5348 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5348:	b508      	push	{r3, lr}
   d534a:	4b02      	ldr	r3, [pc, #8]	; (d5354 <sock_recv+0xc>)
   d534c:	681b      	ldr	r3, [r3, #0]
   d534e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5350:	9301      	str	r3, [sp, #4]
   d5352:	bd08      	pop	{r3, pc}
   d5354:	00030238 	.word	0x00030238

000d5358 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5358:	b508      	push	{r3, lr}
   d535a:	4b02      	ldr	r3, [pc, #8]	; (d5364 <sock_send+0xc>)
   d535c:	681b      	ldr	r3, [r3, #0]
   d535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5360:	9301      	str	r3, [sp, #4]
   d5362:	bd08      	pop	{r3, pc}
   d5364:	00030238 	.word	0x00030238

000d5368 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5368:	b508      	push	{r3, lr}
   d536a:	4b02      	ldr	r3, [pc, #8]	; (d5374 <sock_socket+0xc>)
   d536c:	681b      	ldr	r3, [r3, #0]
   d536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5370:	9301      	str	r3, [sp, #4]
   d5372:	bd08      	pop	{r3, pc}
   d5374:	00030238 	.word	0x00030238

000d5378 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5378:	b508      	push	{r3, lr}
   d537a:	4b02      	ldr	r3, [pc, #8]	; (d5384 <hal_spi_begin+0xc>)
   d537c:	681b      	ldr	r3, [r3, #0]
   d537e:	681b      	ldr	r3, [r3, #0]
   d5380:	9301      	str	r3, [sp, #4]
   d5382:	bd08      	pop	{r3, pc}
   d5384:	00030230 	.word	0x00030230

000d5388 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d5388:	b508      	push	{r3, lr}
   d538a:	4b02      	ldr	r3, [pc, #8]	; (d5394 <hal_spi_set_bit_order+0xc>)
   d538c:	681b      	ldr	r3, [r3, #0]
   d538e:	689b      	ldr	r3, [r3, #8]
   d5390:	9301      	str	r3, [sp, #4]
   d5392:	bd08      	pop	{r3, pc}
   d5394:	00030230 	.word	0x00030230

000d5398 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d5398:	b508      	push	{r3, lr}
   d539a:	4b02      	ldr	r3, [pc, #8]	; (d53a4 <hal_spi_set_data_mode+0xc>)
   d539c:	681b      	ldr	r3, [r3, #0]
   d539e:	68db      	ldr	r3, [r3, #12]
   d53a0:	9301      	str	r3, [sp, #4]
   d53a2:	bd08      	pop	{r3, pc}
   d53a4:	00030230 	.word	0x00030230

000d53a8 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d53a8:	b508      	push	{r3, lr}
   d53aa:	4b02      	ldr	r3, [pc, #8]	; (d53b4 <hal_spi_set_clock_divider+0xc>)
   d53ac:	681b      	ldr	r3, [r3, #0]
   d53ae:	691b      	ldr	r3, [r3, #16]
   d53b0:	9301      	str	r3, [sp, #4]
   d53b2:	bd08      	pop	{r3, pc}
   d53b4:	00030230 	.word	0x00030230

000d53b8 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d53b8:	b508      	push	{r3, lr}
   d53ba:	4b02      	ldr	r3, [pc, #8]	; (d53c4 <hal_spi_transfer+0xc>)
   d53bc:	681b      	ldr	r3, [r3, #0]
   d53be:	695b      	ldr	r3, [r3, #20]
   d53c0:	9301      	str	r3, [sp, #4]
   d53c2:	bd08      	pop	{r3, pc}
   d53c4:	00030230 	.word	0x00030230

000d53c8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d53c8:	b508      	push	{r3, lr}
   d53ca:	4b02      	ldr	r3, [pc, #8]	; (d53d4 <hal_spi_init+0xc>)
   d53cc:	681b      	ldr	r3, [r3, #0]
   d53ce:	69db      	ldr	r3, [r3, #28]
   d53d0:	9301      	str	r3, [sp, #4]
   d53d2:	bd08      	pop	{r3, pc}
   d53d4:	00030230 	.word	0x00030230

000d53d8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d53d8:	b508      	push	{r3, lr}
   d53da:	4b02      	ldr	r3, [pc, #8]	; (d53e4 <hal_spi_is_enabled+0xc>)
   d53dc:	681b      	ldr	r3, [r3, #0]
   d53de:	6a1b      	ldr	r3, [r3, #32]
   d53e0:	9301      	str	r3, [sp, #4]
   d53e2:	bd08      	pop	{r3, pc}
   d53e4:	00030230 	.word	0x00030230

000d53e8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d53e8:	b508      	push	{r3, lr}
   d53ea:	4b02      	ldr	r3, [pc, #8]	; (d53f4 <hal_spi_info+0xc>)
   d53ec:	681b      	ldr	r3, [r3, #0]
   d53ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d53f0:	9301      	str	r3, [sp, #4]
   d53f2:	bd08      	pop	{r3, pc}
   d53f4:	00030230 	.word	0x00030230

000d53f8 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d53f8:	b508      	push	{r3, lr}
   d53fa:	4b02      	ldr	r3, [pc, #8]	; (d5404 <hal_spi_acquire+0xc>)
   d53fc:	681b      	ldr	r3, [r3, #0]
   d53fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5400:	9301      	str	r3, [sp, #4]
   d5402:	bd08      	pop	{r3, pc}
   d5404:	00030230 	.word	0x00030230

000d5408 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5408:	b508      	push	{r3, lr}
   d540a:	4b02      	ldr	r3, [pc, #8]	; (d5414 <hal_spi_release+0xc>)
   d540c:	681b      	ldr	r3, [r3, #0]
   d540e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5410:	9301      	str	r3, [sp, #4]
   d5412:	bd08      	pop	{r3, pc}
   d5414:	00030230 	.word	0x00030230

000d5418 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5418:	b508      	push	{r3, lr}
   d541a:	4b02      	ldr	r3, [pc, #8]	; (d5424 <HAL_USB_USART_Init+0xc>)
   d541c:	681b      	ldr	r3, [r3, #0]
   d541e:	681b      	ldr	r3, [r3, #0]
   d5420:	9301      	str	r3, [sp, #4]
   d5422:	bd08      	pop	{r3, pc}
   d5424:	0003024c 	.word	0x0003024c

000d5428 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5428:	b508      	push	{r3, lr}
   d542a:	4b02      	ldr	r3, [pc, #8]	; (d5434 <HAL_USB_USART_Begin+0xc>)
   d542c:	681b      	ldr	r3, [r3, #0]
   d542e:	685b      	ldr	r3, [r3, #4]
   d5430:	9301      	str	r3, [sp, #4]
   d5432:	bd08      	pop	{r3, pc}
   d5434:	0003024c 	.word	0x0003024c

000d5438 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5438:	b508      	push	{r3, lr}
   d543a:	4b02      	ldr	r3, [pc, #8]	; (d5444 <HAL_USB_USART_Available_Data+0xc>)
   d543c:	681b      	ldr	r3, [r3, #0]
   d543e:	691b      	ldr	r3, [r3, #16]
   d5440:	9301      	str	r3, [sp, #4]
   d5442:	bd08      	pop	{r3, pc}
   d5444:	0003024c 	.word	0x0003024c

000d5448 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5448:	b508      	push	{r3, lr}
   d544a:	4b02      	ldr	r3, [pc, #8]	; (d5454 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d544c:	681b      	ldr	r3, [r3, #0]
   d544e:	695b      	ldr	r3, [r3, #20]
   d5450:	9301      	str	r3, [sp, #4]
   d5452:	bd08      	pop	{r3, pc}
   d5454:	0003024c 	.word	0x0003024c

000d5458 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5458:	b508      	push	{r3, lr}
   d545a:	4b02      	ldr	r3, [pc, #8]	; (d5464 <HAL_USB_USART_Receive_Data+0xc>)
   d545c:	681b      	ldr	r3, [r3, #0]
   d545e:	699b      	ldr	r3, [r3, #24]
   d5460:	9301      	str	r3, [sp, #4]
   d5462:	bd08      	pop	{r3, pc}
   d5464:	0003024c 	.word	0x0003024c

000d5468 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5468:	b508      	push	{r3, lr}
   d546a:	4b02      	ldr	r3, [pc, #8]	; (d5474 <HAL_USB_USART_Send_Data+0xc>)
   d546c:	681b      	ldr	r3, [r3, #0]
   d546e:	69db      	ldr	r3, [r3, #28]
   d5470:	9301      	str	r3, [sp, #4]
   d5472:	bd08      	pop	{r3, pc}
   d5474:	0003024c 	.word	0x0003024c

000d5478 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5478:	b508      	push	{r3, lr}
   d547a:	4b02      	ldr	r3, [pc, #8]	; (d5484 <HAL_USB_USART_Flush_Data+0xc>)
   d547c:	681b      	ldr	r3, [r3, #0]
   d547e:	6a1b      	ldr	r3, [r3, #32]
   d5480:	9301      	str	r3, [sp, #4]
   d5482:	bd08      	pop	{r3, pc}
   d5484:	0003024c 	.word	0x0003024c

000d5488 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5488:	b508      	push	{r3, lr}
   d548a:	4b02      	ldr	r3, [pc, #8]	; (d5494 <log_message+0xc>)
   d548c:	681b      	ldr	r3, [r3, #0]
   d548e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5490:	9301      	str	r3, [sp, #4]
   d5492:	bd08      	pop	{r3, pc}
   d5494:	00030260 	.word	0x00030260

000d5498 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5498:	b508      	push	{r3, lr}
   d549a:	4b02      	ldr	r3, [pc, #8]	; (d54a4 <system_mode+0xc>)
   d549c:	681b      	ldr	r3, [r3, #0]
   d549e:	681b      	ldr	r3, [r3, #0]
   d54a0:	9301      	str	r3, [sp, #4]
   d54a2:	bd08      	pop	{r3, pc}
   d54a4:	00030220 	.word	0x00030220

000d54a8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d54a8:	b508      	push	{r3, lr}
   d54aa:	4b02      	ldr	r3, [pc, #8]	; (d54b4 <set_system_mode+0xc>)
   d54ac:	681b      	ldr	r3, [r3, #0]
   d54ae:	685b      	ldr	r3, [r3, #4]
   d54b0:	9301      	str	r3, [sp, #4]
   d54b2:	bd08      	pop	{r3, pc}
   d54b4:	00030220 	.word	0x00030220

000d54b8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d54b8:	b508      	push	{r3, lr}
   d54ba:	4b02      	ldr	r3, [pc, #8]	; (d54c4 <system_delay_ms+0xc>)
   d54bc:	681b      	ldr	r3, [r3, #0]
   d54be:	695b      	ldr	r3, [r3, #20]
   d54c0:	9301      	str	r3, [sp, #4]
   d54c2:	bd08      	pop	{r3, pc}
   d54c4:	00030220 	.word	0x00030220

000d54c8 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d54c8:	b508      	push	{r3, lr}
   d54ca:	4b02      	ldr	r3, [pc, #8]	; (d54d4 <system_thread_get_state+0xc>)
   d54cc:	681b      	ldr	r3, [r3, #0]
   d54ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d54d0:	9301      	str	r3, [sp, #4]
   d54d2:	bd08      	pop	{r3, pc}
   d54d4:	00030220 	.word	0x00030220

000d54d8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d54d8:	b508      	push	{r3, lr}
   d54da:	4b03      	ldr	r3, [pc, #12]	; (d54e8 <system_ctrl_set_app_request_handler+0x10>)
   d54dc:	681b      	ldr	r3, [r3, #0]
   d54de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d54e2:	9301      	str	r3, [sp, #4]
   d54e4:	bd08      	pop	{r3, pc}
   d54e6:	0000      	.short	0x0000
   d54e8:	00030220 	.word	0x00030220

000d54ec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d54ec:	b508      	push	{r3, lr}
   d54ee:	4b03      	ldr	r3, [pc, #12]	; (d54fc <system_ctrl_set_result+0x10>)
   d54f0:	681b      	ldr	r3, [r3, #0]
   d54f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d54f6:	9301      	str	r3, [sp, #4]
   d54f8:	bd08      	pop	{r3, pc}
   d54fa:	0000      	.short	0x0000
   d54fc:	00030220 	.word	0x00030220

000d5500 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d5500:	b508      	push	{r3, lr}
   d5502:	4b03      	ldr	r3, [pc, #12]	; (d5510 <system_sleep_ext+0x10>)
   d5504:	681b      	ldr	r3, [r3, #0]
   d5506:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d550a:	9301      	str	r3, [sp, #4]
   d550c:	bd08      	pop	{r3, pc}
   d550e:	0000      	.short	0x0000
   d5510:	00030220 	.word	0x00030220

000d5514 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5514:	b508      	push	{r3, lr}
   d5516:	4b02      	ldr	r3, [pc, #8]	; (d5520 <network_connect+0xc>)
   d5518:	681b      	ldr	r3, [r3, #0]
   d551a:	685b      	ldr	r3, [r3, #4]
   d551c:	9301      	str	r3, [sp, #4]
   d551e:	bd08      	pop	{r3, pc}
   d5520:	00030240 	.word	0x00030240

000d5524 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5524:	b508      	push	{r3, lr}
   d5526:	4b02      	ldr	r3, [pc, #8]	; (d5530 <network_connecting+0xc>)
   d5528:	681b      	ldr	r3, [r3, #0]
   d552a:	689b      	ldr	r3, [r3, #8]
   d552c:	9301      	str	r3, [sp, #4]
   d552e:	bd08      	pop	{r3, pc}
   d5530:	00030240 	.word	0x00030240

000d5534 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5534:	b508      	push	{r3, lr}
   d5536:	4b02      	ldr	r3, [pc, #8]	; (d5540 <network_disconnect+0xc>)
   d5538:	681b      	ldr	r3, [r3, #0]
   d553a:	68db      	ldr	r3, [r3, #12]
   d553c:	9301      	str	r3, [sp, #4]
   d553e:	bd08      	pop	{r3, pc}
   d5540:	00030240 	.word	0x00030240

000d5544 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5544:	b508      	push	{r3, lr}
   d5546:	4b02      	ldr	r3, [pc, #8]	; (d5550 <network_ready+0xc>)
   d5548:	681b      	ldr	r3, [r3, #0]
   d554a:	691b      	ldr	r3, [r3, #16]
   d554c:	9301      	str	r3, [sp, #4]
   d554e:	bd08      	pop	{r3, pc}
   d5550:	00030240 	.word	0x00030240

000d5554 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5554:	b508      	push	{r3, lr}
   d5556:	4b02      	ldr	r3, [pc, #8]	; (d5560 <network_on+0xc>)
   d5558:	681b      	ldr	r3, [r3, #0]
   d555a:	695b      	ldr	r3, [r3, #20]
   d555c:	9301      	str	r3, [sp, #4]
   d555e:	bd08      	pop	{r3, pc}
   d5560:	00030240 	.word	0x00030240

000d5564 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5564:	b508      	push	{r3, lr}
   d5566:	4b02      	ldr	r3, [pc, #8]	; (d5570 <network_off+0xc>)
   d5568:	681b      	ldr	r3, [r3, #0]
   d556a:	699b      	ldr	r3, [r3, #24]
   d556c:	9301      	str	r3, [sp, #4]
   d556e:	bd08      	pop	{r3, pc}
   d5570:	00030240 	.word	0x00030240

000d5574 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5574:	b508      	push	{r3, lr}
   d5576:	4b02      	ldr	r3, [pc, #8]	; (d5580 <network_listen+0xc>)
   d5578:	681b      	ldr	r3, [r3, #0]
   d557a:	69db      	ldr	r3, [r3, #28]
   d557c:	9301      	str	r3, [sp, #4]
   d557e:	bd08      	pop	{r3, pc}
   d5580:	00030240 	.word	0x00030240

000d5584 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5584:	b508      	push	{r3, lr}
   d5586:	4b02      	ldr	r3, [pc, #8]	; (d5590 <network_listening+0xc>)
   d5588:	681b      	ldr	r3, [r3, #0]
   d558a:	6a1b      	ldr	r3, [r3, #32]
   d558c:	9301      	str	r3, [sp, #4]
   d558e:	bd08      	pop	{r3, pc}
   d5590:	00030240 	.word	0x00030240

000d5594 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5594:	b508      	push	{r3, lr}
   d5596:	4b02      	ldr	r3, [pc, #8]	; (d55a0 <network_set_listen_timeout+0xc>)
   d5598:	681b      	ldr	r3, [r3, #0]
   d559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d559c:	9301      	str	r3, [sp, #4]
   d559e:	bd08      	pop	{r3, pc}
   d55a0:	00030240 	.word	0x00030240

000d55a4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d55a4:	b508      	push	{r3, lr}
   d55a6:	4b02      	ldr	r3, [pc, #8]	; (d55b0 <network_get_listen_timeout+0xc>)
   d55a8:	681b      	ldr	r3, [r3, #0]
   d55aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d55ac:	9301      	str	r3, [sp, #4]
   d55ae:	bd08      	pop	{r3, pc}
   d55b0:	00030240 	.word	0x00030240

000d55b4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d55b4:	b508      	push	{r3, lr}
   d55b6:	4b02      	ldr	r3, [pc, #8]	; (d55c0 <network_is_on+0xc>)
   d55b8:	681b      	ldr	r3, [r3, #0]
   d55ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d55bc:	9301      	str	r3, [sp, #4]
   d55be:	bd08      	pop	{r3, pc}
   d55c0:	00030240 	.word	0x00030240

000d55c4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d55c4:	b508      	push	{r3, lr}
   d55c6:	4b02      	ldr	r3, [pc, #8]	; (d55d0 <network_is_off+0xc>)
   d55c8:	681b      	ldr	r3, [r3, #0]
   d55ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d55cc:	9301      	str	r3, [sp, #4]
   d55ce:	bd08      	pop	{r3, pc}
   d55d0:	00030240 	.word	0x00030240

000d55d4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d55d4:	b508      	push	{r3, lr}
   d55d6:	4b02      	ldr	r3, [pc, #8]	; (d55e0 <spark_process+0xc>)
   d55d8:	681b      	ldr	r3, [r3, #0]
   d55da:	689b      	ldr	r3, [r3, #8]
   d55dc:	9301      	str	r3, [sp, #4]
   d55de:	bd08      	pop	{r3, pc}
   d55e0:	00030244 	.word	0x00030244

000d55e4 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d55e4:	b508      	push	{r3, lr}
   d55e6:	4b02      	ldr	r3, [pc, #8]	; (d55f0 <spark_cloud_flag_connect+0xc>)
   d55e8:	681b      	ldr	r3, [r3, #0]
   d55ea:	68db      	ldr	r3, [r3, #12]
   d55ec:	9301      	str	r3, [sp, #4]
   d55ee:	bd08      	pop	{r3, pc}
   d55f0:	00030244 	.word	0x00030244

000d55f4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d55f4:	b508      	push	{r3, lr}
   d55f6:	4b02      	ldr	r3, [pc, #8]	; (d5600 <spark_cloud_flag_connected+0xc>)
   d55f8:	681b      	ldr	r3, [r3, #0]
   d55fa:	695b      	ldr	r3, [r3, #20]
   d55fc:	9301      	str	r3, [sp, #4]
   d55fe:	bd08      	pop	{r3, pc}
   d5600:	00030244 	.word	0x00030244

000d5604 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5604:	b508      	push	{r3, lr}
   d5606:	4b02      	ldr	r3, [pc, #8]	; (d5610 <spark_sync_time_pending+0xc>)
   d5608:	681b      	ldr	r3, [r3, #0]
   d560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d560c:	9301      	str	r3, [sp, #4]
   d560e:	bd08      	pop	{r3, pc}
   d5610:	00030244 	.word	0x00030244

000d5614 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5614:	b508      	push	{r3, lr}
   d5616:	4b02      	ldr	r3, [pc, #8]	; (d5620 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5618:	681b      	ldr	r3, [r3, #0]
   d561a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d561c:	9301      	str	r3, [sp, #4]
   d561e:	bd08      	pop	{r3, pc}
   d5620:	00030244 	.word	0x00030244

000d5624 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <spark_cloud_disconnect+0xc>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	bd08      	pop	{r3, pc}
   d5630:	00030244 	.word	0x00030244

000d5634 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <malloc+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	681b      	ldr	r3, [r3, #0]
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	0003021c 	.word	0x0003021c

000d5644 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <free+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	685b      	ldr	r3, [r3, #4]
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	0003021c 	.word	0x0003021c

000d5654 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <realloc+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	689b      	ldr	r3, [r3, #8]
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	0003021c 	.word	0x0003021c

000d5664 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <__errno+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	0003021c 	.word	0x0003021c

000d5674 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <newlib_impure_ptr_callback+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	0003021c 	.word	0x0003021c

000d5684 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5684:	2200      	movs	r2, #0
   d5686:	6840      	ldr	r0, [r0, #4]
   d5688:	4611      	mov	r1, r2
   d568a:	f7ff bf7b 	b.w	d5584 <network_listening>

000d568e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d568e:	2200      	movs	r2, #0
   d5690:	6840      	ldr	r0, [r0, #4]
   d5692:	4611      	mov	r1, r2
   d5694:	f7ff bf86 	b.w	d55a4 <network_get_listen_timeout>

000d5698 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5698:	6840      	ldr	r0, [r0, #4]
   d569a:	2200      	movs	r2, #0
   d569c:	f7ff bf7a 	b.w	d5594 <network_set_listen_timeout>

000d56a0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d56a0:	6840      	ldr	r0, [r0, #4]
   d56a2:	2200      	movs	r2, #0
   d56a4:	f081 0101 	eor.w	r1, r1, #1
   d56a8:	f7ff bf64 	b.w	d5574 <network_listen>

000d56ac <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d56ac:	2300      	movs	r3, #0
   d56ae:	6840      	ldr	r0, [r0, #4]
   d56b0:	461a      	mov	r2, r3
   d56b2:	4619      	mov	r1, r3
   d56b4:	f7ff bf56 	b.w	d5564 <network_off>

000d56b8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d56b8:	2300      	movs	r3, #0
   d56ba:	6840      	ldr	r0, [r0, #4]
   d56bc:	461a      	mov	r2, r3
   d56be:	4619      	mov	r1, r3
   d56c0:	f7ff bf48 	b.w	d5554 <network_on>

000d56c4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d56c4:	2200      	movs	r2, #0
   d56c6:	6840      	ldr	r0, [r0, #4]
   d56c8:	4611      	mov	r1, r2
   d56ca:	f7ff bf3b 	b.w	d5544 <network_ready>

000d56ce <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d56ce:	2200      	movs	r2, #0
   d56d0:	6840      	ldr	r0, [r0, #4]
   d56d2:	4611      	mov	r1, r2
   d56d4:	f7ff bf26 	b.w	d5524 <network_connecting>

000d56d8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d56d8:	6840      	ldr	r0, [r0, #4]
   d56da:	2200      	movs	r2, #0
   d56dc:	2102      	movs	r1, #2
   d56de:	f7ff bf29 	b.w	d5534 <network_disconnect>

000d56e2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d56e2:	2300      	movs	r3, #0
   d56e4:	6840      	ldr	r0, [r0, #4]
   d56e6:	461a      	mov	r2, r3
   d56e8:	f7ff bf14 	b.w	d5514 <network_connect>

000d56ec <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d56ec:	4b02      	ldr	r3, [pc, #8]	; (d56f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d56ee:	2203      	movs	r2, #3
   d56f0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d56f2:	4a02      	ldr	r2, [pc, #8]	; (d56fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d56f4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d56f6:	4770      	bx	lr
   d56f8:	2003e650 	.word	0x2003e650
   d56fc:	000d7f44 	.word	0x000d7f44

000d5700 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5700:	2100      	movs	r1, #0
   d5702:	f7ff be79 	b.w	d53f8 <hal_spi_acquire>

000d5706 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5706:	2100      	movs	r1, #0
   d5708:	f7ff be7e 	b.w	d5408 <hal_spi_release>

000d570c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d570c:	b510      	push	{r4, lr}
   d570e:	4604      	mov	r4, r0
   d5710:	4608      	mov	r0, r1
{
    _spi = spi;
   d5712:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5714:	f7ff fe58 	bl	d53c8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5718:	2300      	movs	r3, #0
   d571a:	6063      	str	r3, [r4, #4]
}
   d571c:	4620      	mov	r0, r4
   d571e:	bd10      	pop	{r4, pc}

000d5720 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5720:	b510      	push	{r4, lr}
   d5722:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5724:	7800      	ldrb	r0, [r0, #0]
   d5726:	f7ff ffeb 	bl	d5700 <_ZN8SPIClass4lockEv.isra.0>
   d572a:	b948      	cbnz	r0, d5740 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d572c:	7820      	ldrb	r0, [r4, #0]
   d572e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5732:	f7ff fe21 	bl	d5378 <hal_spi_begin>
        unlock();
   d5736:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d573c:	f7ff bfe3 	b.w	d5706 <_ZN8SPIClass6unlockEv.isra.0>
}
   d5740:	bd10      	pop	{r4, pc}

000d5742 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5742:	b513      	push	{r0, r1, r4, lr}
   d5744:	4604      	mov	r4, r0
    if (!lock())
   d5746:	7800      	ldrb	r0, [r0, #0]
{
   d5748:	9101      	str	r1, [sp, #4]
    if (!lock())
   d574a:	f7ff ffd9 	bl	d5700 <_ZN8SPIClass4lockEv.isra.0>
   d574e:	9901      	ldr	r1, [sp, #4]
   d5750:	b940      	cbnz	r0, d5764 <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d5752:	7820      	ldrb	r0, [r4, #0]
   d5754:	f7ff fe18 	bl	d5388 <hal_spi_set_bit_order>
        unlock();
   d5758:	7820      	ldrb	r0, [r4, #0]
    }
}
   d575a:	b002      	add	sp, #8
   d575c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5760:	f7ff bfd1 	b.w	d5706 <_ZN8SPIClass6unlockEv.isra.0>
}
   d5764:	b002      	add	sp, #8
   d5766:	bd10      	pop	{r4, pc}

000d5768 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d5768:	b513      	push	{r0, r1, r4, lr}
   d576a:	4604      	mov	r4, r0
    if (!lock())
   d576c:	7800      	ldrb	r0, [r0, #0]
{
   d576e:	9101      	str	r1, [sp, #4]
    if (!lock())
   d5770:	f7ff ffc6 	bl	d5700 <_ZN8SPIClass4lockEv.isra.0>
   d5774:	9901      	ldr	r1, [sp, #4]
   d5776:	b940      	cbnz	r0, d578a <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d5778:	7820      	ldrb	r0, [r4, #0]
   d577a:	f7ff fe0d 	bl	d5398 <hal_spi_set_data_mode>
        unlock();
   d577e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5780:	b002      	add	sp, #8
   d5782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5786:	f7ff bfbe 	b.w	d5706 <_ZN8SPIClass6unlockEv.isra.0>
}
   d578a:	b002      	add	sp, #8
   d578c:	bd10      	pop	{r4, pc}
	...

000d5790 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5790:	0840      	lsrs	r0, r0, #1
{
   d5792:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5794:	6018      	str	r0, [r3, #0]
   d5796:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5798:	6818      	ldr	r0, [r3, #0]
   d579a:	4288      	cmp	r0, r1
   d579c:	b2e5      	uxtb	r5, r4
   d579e:	d906      	bls.n	d57ae <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d57a0:	3401      	adds	r4, #1
   d57a2:	2c08      	cmp	r4, #8
   d57a4:	d002      	beq.n	d57ac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d57a6:	0840      	lsrs	r0, r0, #1
   d57a8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d57aa:	e7f5      	b.n	d5798 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d57ac:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d57ae:	4b02      	ldr	r3, [pc, #8]	; (d57b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d57b0:	5d5b      	ldrb	r3, [r3, r5]
   d57b2:	7013      	strb	r3, [r2, #0]
}
   d57b4:	bd30      	pop	{r4, r5, pc}
   d57b6:	bf00      	nop
   d57b8:	000d7f78 	.word	0x000d7f78

000d57bc <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d57bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d57c0:	b088      	sub	sp, #32
    unsigned clock = 0;
   d57c2:	2300      	movs	r3, #0
{
   d57c4:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d57c6:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d57c8:	9302      	str	r3, [sp, #8]
{
   d57ca:	460e      	mov	r6, r1
   d57cc:	4617      	mov	r7, r2
    if (!lock())
   d57ce:	f7ff ff97 	bl	d5700 <_ZN8SPIClass4lockEv.isra.0>
   d57d2:	4605      	mov	r5, r0
   d57d4:	bb00      	cbnz	r0, d5818 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d57d6:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d57da:	4601      	mov	r1, r0
   d57dc:	2214      	movs	r2, #20
   d57de:	a803      	add	r0, sp, #12
   d57e0:	f002 f940 	bl	d7a64 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d57e4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d57e6:	462a      	mov	r2, r5
   d57e8:	a903      	add	r1, sp, #12
   d57ea:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d57ec:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d57f0:	f7ff fdfa 	bl	d53e8 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d57f4:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d57f6:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d57fa:	ab02      	add	r3, sp, #8
   d57fc:	f10d 0207 	add.w	r2, sp, #7
   d5800:	fb07 f106 	mul.w	r1, r7, r6
   d5804:	f7ff ffc4 	bl	d5790 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d5808:	7820      	ldrb	r0, [r4, #0]
   d580a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d580e:	f7ff fdcb 	bl	d53a8 <hal_spi_set_clock_divider>
        unlock();
   d5812:	7820      	ldrb	r0, [r4, #0]
   d5814:	f7ff ff77 	bl	d5706 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d5818:	9802      	ldr	r0, [sp, #8]
   d581a:	b008      	add	sp, #32
   d581c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5820 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d5820:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5822:	7800      	ldrb	r0, [r0, #0]
   d5824:	f7ff fdc8 	bl	d53b8 <hal_spi_transfer>
}
   d5828:	b2c0      	uxtb	r0, r0
   d582a:	bd08      	pop	{r3, pc}

000d582c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d582c:	b510      	push	{r4, lr}
   d582e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5830:	6800      	ldr	r0, [r0, #0]
   d5832:	b118      	cbz	r0, d583c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5834:	f7ff ff06 	bl	d5644 <free>
            wakeupSource_ = nullptr;
   d5838:	2300      	movs	r3, #0
   d583a:	6023      	str	r3, [r4, #0]
        }
    }
   d583c:	bd10      	pop	{r4, pc}

000d583e <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d583e:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d5840:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d5844:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d5846:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5848:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d584a:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d584e:	f8c0 2006 	str.w	r2, [r0, #6]
   d5852:	889b      	ldrh	r3, [r3, #4]
   d5854:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5856:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5858:	f7ff ffe8 	bl	d582c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d585c:	682b      	ldr	r3, [r5, #0]
   d585e:	b113      	cbz	r3, d5866 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d5860:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d5862:	2300      	movs	r3, #0
   d5864:	602b      	str	r3, [r5, #0]
    }
   d5866:	4620      	mov	r0, r4
   d5868:	bd38      	pop	{r3, r4, r5, pc}
	...

000d586c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d586c:	b538      	push	{r3, r4, r5, lr}
   d586e:	460c      	mov	r4, r1
   d5870:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d5872:	f7ff ffdb 	bl	d582c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d5876:	b144      	cbz	r4, d588a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d5878:	8820      	ldrh	r0, [r4, #0]
   d587a:	f7ff fedb 	bl	d5634 <malloc>
   d587e:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d5880:	b128      	cbz	r0, d588e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d5882:	8822      	ldrh	r2, [r4, #0]
   d5884:	4621      	mov	r1, r4
   d5886:	f002 f8c5 	bl	d7a14 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d588a:	2000      	movs	r0, #0
    }
   d588c:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d588e:	4801      	ldr	r0, [pc, #4]	; (d5894 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d5890:	e7fc      	b.n	d588c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d5892:	bf00      	nop
   d5894:	fffffefc 	.word	0xfffffefc

000d5898 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d5898:	b5f0      	push	{r4, r5, r6, r7, lr}
   d589a:	4d2d      	ldr	r5, [pc, #180]	; (d5950 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d589c:	7d0b      	ldrb	r3, [r1, #20]
   d589e:	4604      	mov	r4, r0
   d58a0:	b08b      	sub	sp, #44	; 0x2c
   d58a2:	4608      	mov	r0, r1
   d58a4:	1daf      	adds	r7, r5, #6
   d58a6:	2b00      	cmp	r3, #0
   d58a8:	d038      	beq.n	d591c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d58aa:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d58ac:	791b      	ldrb	r3, [r3, #4]
   d58ae:	2b00      	cmp	r3, #0
   d58b0:	d034      	beq.n	d591c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d58b2:	2200      	movs	r2, #0
    SleepResult() {}
   d58b4:	4b27      	ldr	r3, [pc, #156]	; (d5954 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d58b6:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d58b8:	a902      	add	r1, sp, #8
   d58ba:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d58bc:	9202      	str	r2, [sp, #8]
   d58be:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d58c2:	f88d 200e 	strb.w	r2, [sp, #14]
   d58c6:	f7ff fe1b 	bl	d5500 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d58ca:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d58ce:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d58d2:	b200      	sxth	r0, r0
   d58d4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d58d8:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d58dc:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d58de:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d58e0:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d58e2:	4628      	mov	r0, r5
   d58e4:	f7ff ffc2 	bl	d586c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d58e8:	a802      	add	r0, sp, #8
   d58ea:	f7ff ff9f 	bl	d582c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d58ee:	2300      	movs	r3, #0
   d58f0:	6023      	str	r3, [r4, #0]
   d58f2:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d58f4:	71a3      	strb	r3, [r4, #6]
   d58f6:	8123      	strh	r3, [r4, #8]
   d58f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d58fc:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d58fe:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d5902:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d5904:	683b      	ldr	r3, [r7, #0]
   d5906:	f8c4 3006 	str.w	r3, [r4, #6]
   d590a:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d590c:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d590e:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d5910:	4620      	mov	r0, r4
   d5912:	f7ff ffab 	bl	d586c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d5916:	4620      	mov	r0, r4
   d5918:	b00b      	add	sp, #44	; 0x2c
   d591a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d591c:	2600      	movs	r6, #0
   d591e:	2320      	movs	r3, #32
   d5920:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d5924:	4b0c      	ldr	r3, [pc, #48]	; (d5958 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d5926:	9300      	str	r3, [sp, #0]
   d5928:	490c      	ldr	r1, [pc, #48]	; (d595c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d592a:	4633      	mov	r3, r6
   d592c:	aa02      	add	r2, sp, #8
   d592e:	2032      	movs	r0, #50	; 0x32
   d5930:	f7ff fdaa 	bl	d5488 <log_message>
    SleepResult() {}
   d5934:	4b07      	ldr	r3, [pc, #28]	; (d5954 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d5936:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d5938:	a902      	add	r1, sp, #8
        error_ = error;
   d593a:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d593e:	4804      	ldr	r0, [pc, #16]	; (d5950 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d5940:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d5942:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d5946:	f8ad 300c 	strh.w	r3, [sp, #12]
   d594a:	f7ff ff78 	bl	d583e <_ZN17SystemSleepResultaSEOS_>
   d594e:	e7cb      	b.n	d58e8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d5950:	2003e658 	.word	0x2003e658
   d5954:	ffff0000 	.word	0xffff0000
   d5958:	000d7f87 	.word	0x000d7f87
   d595c:	000d7f80 	.word	0x000d7f80

000d5960 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5960:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5962:	4b09      	ldr	r3, [pc, #36]	; (d5988 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5964:	4c09      	ldr	r4, [pc, #36]	; (d598c <_GLOBAL__sub_I_System+0x2c>)
   d5966:	2202      	movs	r2, #2
   d5968:	2000      	movs	r0, #0
   d596a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d596c:	4b08      	ldr	r3, [pc, #32]	; (d5990 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d596e:	6020      	str	r0, [r4, #0]
   d5970:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5972:	71a0      	strb	r0, [r4, #6]
   d5974:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5976:	f7ff fd97 	bl	d54a8 <set_system_mode>
SystemClass System;
   d597a:	4620      	mov	r0, r4
   d597c:	4a05      	ldr	r2, [pc, #20]	; (d5994 <_GLOBAL__sub_I_System+0x34>)
   d597e:	4906      	ldr	r1, [pc, #24]	; (d5998 <_GLOBAL__sub_I_System+0x38>)
   d5980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5984:	f001 ba5c 	b.w	d6e40 <__aeabi_atexit>
   d5988:	2003e664 	.word	0x2003e664
   d598c:	2003e658 	.word	0x2003e658
   d5990:	ffff0000 	.word	0xffff0000
   d5994:	2003e144 	.word	0x2003e144
   d5998:	000d412d 	.word	0x000d412d

000d599c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d599c:	b510      	push	{r4, lr}
   d599e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d59a0:	f002 f89e 	bl	d7ae0 <strlen>
   d59a4:	3801      	subs	r0, #1
   d59a6:	1823      	adds	r3, r4, r0
   d59a8:	4620      	mov	r0, r4
	while(i<j){
   d59aa:	4283      	cmp	r3, r0
   d59ac:	d906      	bls.n	d59bc <_Z11str_reversePc+0x20>
		c = *i;
   d59ae:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d59b0:	7819      	ldrb	r1, [r3, #0]
   d59b2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d59b6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d59ba:	e7f6      	b.n	d59aa <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d59bc:	bd10      	pop	{r4, pc}

000d59be <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d59be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d59c2:	1e93      	subs	r3, r2, #2
{
   d59c4:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   d59c6:	2b22      	cmp	r3, #34	; 0x22
   d59c8:	f04f 0300 	mov.w	r3, #0
{
   d59cc:	460d      	mov	r5, r1
   d59ce:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d59d0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   d59d4:	d927      	bls.n	d5a26 <ltoa+0x68>

      if (10 == base && N < 0L)
   d59d6:	2800      	cmp	r0, #0
   d59d8:	da2a      	bge.n	d5a30 <ltoa+0x72>
      {
            *head++ = '-';
   d59da:	462e      	mov	r6, r5
   d59dc:	232d      	movs	r3, #45	; 0x2d
   d59de:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   d59e2:	4240      	negs	r0, r0
   d59e4:	240a      	movs	r4, #10
      *tail-- = '\0';
   d59e6:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d59ea:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d59ee:	4622      	mov	r2, r4
   d59f0:	4601      	mov	r1, r0
   d59f2:	a801      	add	r0, sp, #4
   d59f4:	f001 fffa 	bl	d79ec <ldiv>
   d59f8:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d59fa:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   d59fc:	2b09      	cmp	r3, #9
   d59fe:	bfcc      	ite	gt
   d5a00:	2237      	movgt	r2, #55	; 0x37
   d5a02:	2230      	movle	r2, #48	; 0x30
   d5a04:	fa52 f383 	uxtab	r3, r2, r3
   d5a08:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   d5a0c:	f108 0801 	add.w	r8, r8, #1
   d5a10:	2800      	cmp	r0, #0
   d5a12:	d1ec      	bne.n	d59ee <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d5a14:	4642      	mov	r2, r8
   d5a16:	1c79      	adds	r1, r7, #1
   d5a18:	4630      	mov	r0, r6
   d5a1a:	f001 fffb 	bl	d7a14 <memcpy>
      return str;
}
   d5a1e:	4628      	mov	r0, r5
   d5a20:	b00c      	add	sp, #48	; 0x30
   d5a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   d5a26:	2a0a      	cmp	r2, #10
   d5a28:	d0d5      	beq.n	d59d6 <ltoa+0x18>
      if (uarg)
   d5a2a:	b118      	cbz	r0, d5a34 <ltoa+0x76>
   d5a2c:	462e      	mov	r6, r5
   d5a2e:	e7da      	b.n	d59e6 <ltoa+0x28>
   d5a30:	240a      	movs	r4, #10
   d5a32:	e7fa      	b.n	d5a2a <ltoa+0x6c>
      else  *tail-- = '0';
   d5a34:	2330      	movs	r3, #48	; 0x30
   d5a36:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d5a3a:	462e      	mov	r6, r5
   d5a3c:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   d5a40:	f04f 0802 	mov.w	r8, #2
   d5a44:	e7e6      	b.n	d5a14 <ltoa+0x56>

000d5a46 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5a46:	b570      	push	{r4, r5, r6, lr}
   d5a48:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5a4a:	1e91      	subs	r1, r2, #2
   d5a4c:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5a4e:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d5a50:	d822      	bhi.n	d5a98 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d5a52:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d5a54:	b16d      	cbz	r5, d5a72 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5a56:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d5a5a:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d5a5e:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d5a60:	2d09      	cmp	r5, #9
                *ptr += '0';
   d5a62:	bf94      	ite	ls
   d5a64:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5a66:	3157      	addhi	r1, #87	; 0x57
   d5a68:	b2c9      	uxtb	r1, r1
   d5a6a:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d5a6e:	4635      	mov	r5, r6
	while(a){
   d5a70:	e7f0      	b.n	d5a54 <ultoa+0xe>
   d5a72:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d5a74:	4423      	add	r3, r4
            *ptr++ = '0';
   d5a76:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d5a78:	4293      	cmp	r3, r2
   d5a7a:	d902      	bls.n	d5a82 <ultoa+0x3c>
            *ptr++ = '0';
   d5a7c:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d5a80:	e7fa      	b.n	d5a78 <ultoa+0x32>
   d5a82:	1a1a      	subs	r2, r3, r0
   d5a84:	4283      	cmp	r3, r0
   d5a86:	bf38      	it	cc
   d5a88:	2200      	movcc	r2, #0

	*ptr = '\0';
   d5a8a:	2300      	movs	r3, #0
   d5a8c:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d5a8e:	4620      	mov	r0, r4
   d5a90:	f7ff ff84 	bl	d599c <_Z11str_reversePc>
	return buffer;
   d5a94:	4620      	mov	r0, r4
}
   d5a96:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d5a98:	2000      	movs	r0, #0
   d5a9a:	e7fc      	b.n	d5a96 <ultoa+0x50>

000d5a9c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5a9c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d5a9e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5aa0:	460c      	mov	r4, r1
   d5aa2:	4615      	mov	r5, r2
	if(a<0){
   d5aa4:	da0e      	bge.n	d5ac4 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d5aaa:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5aae:	bf14      	ite	ne
   d5ab0:	4258      	negne	r0, r3
   d5ab2:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d5ab4:	2301      	movs	r3, #1
		*buffer = '-';
   d5ab6:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d5ab8:	462a      	mov	r2, r5
   d5aba:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d5abc:	f7ff ffc3 	bl	d5a46 <ultoa>
	}
	return buffer;
}
   d5ac0:	4620      	mov	r0, r4
   d5ac2:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d5ac4:	2301      	movs	r3, #1
   d5ac6:	e7f9      	b.n	d5abc <itoa+0x20>

000d5ac8 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d5ac8:	b570      	push	{r4, r5, r6, lr}
   d5aca:	b086      	sub	sp, #24
   d5acc:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d5ace:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d5ad0:	4668      	mov	r0, sp
   d5ad2:	f000 fb95 	bl	d6200 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d5ad6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5ad8:	1d34      	adds	r4, r6, #4
   d5ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5adc:	682b      	ldr	r3, [r5, #0]
   d5ade:	7023      	strb	r3, [r4, #0]
    }
   d5ae0:	4630      	mov	r0, r6
   d5ae2:	b006      	add	sp, #24
   d5ae4:	bd70      	pop	{r4, r5, r6, pc}

000d5ae6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5ae6:	b510      	push	{r4, lr}
   d5ae8:	4604      	mov	r4, r0
{
	free(buffer);
   d5aea:	6800      	ldr	r0, [r0, #0]
   d5aec:	f7ff fdaa 	bl	d5644 <free>
}
   d5af0:	4620      	mov	r0, r4
   d5af2:	bd10      	pop	{r4, pc}

000d5af4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5af4:	b510      	push	{r4, lr}
   d5af6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5af8:	6800      	ldr	r0, [r0, #0]
   d5afa:	b108      	cbz	r0, d5b00 <_ZN6String10invalidateEv+0xc>
   d5afc:	f7ff fda2 	bl	d5644 <free>
	buffer = NULL;
   d5b00:	2300      	movs	r3, #0
	capacity = len = 0;
   d5b02:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5b06:	6023      	str	r3, [r4, #0]
}
   d5b08:	bd10      	pop	{r4, pc}

000d5b0a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5b0a:	b538      	push	{r3, r4, r5, lr}
   d5b0c:	4604      	mov	r4, r0
   d5b0e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5b10:	6800      	ldr	r0, [r0, #0]
   d5b12:	3101      	adds	r1, #1
   d5b14:	f7ff fd9e 	bl	d5654 <realloc>
	if (newbuffer) {
   d5b18:	b110      	cbz	r0, d5b20 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5b1a:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5b1e:	2001      	movs	r0, #1
	}
	return 0;
}
   d5b20:	bd38      	pop	{r3, r4, r5, pc}

000d5b22 <_ZN6String7reserveEj>:
{
   d5b22:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5b24:	6803      	ldr	r3, [r0, #0]
{
   d5b26:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5b28:	b123      	cbz	r3, d5b34 <_ZN6String7reserveEj+0x12>
   d5b2a:	6843      	ldr	r3, [r0, #4]
   d5b2c:	428b      	cmp	r3, r1
   d5b2e:	d301      	bcc.n	d5b34 <_ZN6String7reserveEj+0x12>
   d5b30:	2001      	movs	r0, #1
}
   d5b32:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5b34:	4620      	mov	r0, r4
   d5b36:	f7ff ffe8 	bl	d5b0a <_ZN6String12changeBufferEj>
   d5b3a:	2800      	cmp	r0, #0
   d5b3c:	d0f9      	beq.n	d5b32 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5b3e:	68a3      	ldr	r3, [r4, #8]
   d5b40:	2b00      	cmp	r3, #0
   d5b42:	d1f5      	bne.n	d5b30 <_ZN6String7reserveEj+0xe>
   d5b44:	6822      	ldr	r2, [r4, #0]
   d5b46:	7013      	strb	r3, [r2, #0]
   d5b48:	e7f2      	b.n	d5b30 <_ZN6String7reserveEj+0xe>

000d5b4a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5b4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5b4c:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5b4e:	4611      	mov	r1, r2
   d5b50:	9201      	str	r2, [sp, #4]
{
   d5b52:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5b54:	f7ff ffe5 	bl	d5b22 <_ZN6String7reserveEj>
   d5b58:	9a01      	ldr	r2, [sp, #4]
   d5b5a:	b928      	cbnz	r0, d5b68 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5b5c:	4620      	mov	r0, r4
   d5b5e:	f7ff ffc9 	bl	d5af4 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5b62:	4620      	mov	r0, r4
   d5b64:	b003      	add	sp, #12
   d5b66:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5b68:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5b6a:	4629      	mov	r1, r5
   d5b6c:	6820      	ldr	r0, [r4, #0]
   d5b6e:	f001 ff51 	bl	d7a14 <memcpy>
	buffer[len] = 0;
   d5b72:	6822      	ldr	r2, [r4, #0]
   d5b74:	68a3      	ldr	r3, [r4, #8]
   d5b76:	2100      	movs	r1, #0
   d5b78:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5b7a:	e7f2      	b.n	d5b62 <_ZN6String4copyEPKcj+0x18>

000d5b7c <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5b7c:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5b7e:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5b80:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5b84:	4604      	mov	r4, r0
	len = 0;
   d5b86:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5b88:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5b8a:	b141      	cbz	r1, d5b9e <_ZN6StringC1EPKc+0x22>
   d5b8c:	4608      	mov	r0, r1
   d5b8e:	9101      	str	r1, [sp, #4]
   d5b90:	f001 ffa6 	bl	d7ae0 <strlen>
   d5b94:	9901      	ldr	r1, [sp, #4]
   d5b96:	4602      	mov	r2, r0
   d5b98:	4620      	mov	r0, r4
   d5b9a:	f7ff ffd6 	bl	d5b4a <_ZN6String4copyEPKcj>
}
   d5b9e:	4620      	mov	r0, r4
   d5ba0:	b002      	add	sp, #8
   d5ba2:	bd10      	pop	{r4, pc}

000d5ba4 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5ba4:	b538      	push	{r3, r4, r5, lr}
   d5ba6:	4605      	mov	r5, r0
	if (buffer) {
   d5ba8:	6800      	ldr	r0, [r0, #0]
{
   d5baa:	460c      	mov	r4, r1
	if (buffer) {
   d5bac:	b168      	cbz	r0, d5bca <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d5bae:	686a      	ldr	r2, [r5, #4]
   d5bb0:	688b      	ldr	r3, [r1, #8]
   d5bb2:	429a      	cmp	r2, r3
   d5bb4:	d307      	bcc.n	d5bc6 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d5bb6:	6809      	ldr	r1, [r1, #0]
   d5bb8:	f001 ff8a 	bl	d7ad0 <strcpy>
			len = rhs.len;
   d5bbc:	68a3      	ldr	r3, [r4, #8]
   d5bbe:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5bc0:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d5bc2:	60a3      	str	r3, [r4, #8]
}
   d5bc4:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d5bc6:	f7ff fd3d 	bl	d5644 <free>
	buffer = rhs.buffer;
   d5bca:	6823      	ldr	r3, [r4, #0]
   d5bcc:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d5bce:	6863      	ldr	r3, [r4, #4]
   d5bd0:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5bd2:	68a3      	ldr	r3, [r4, #8]
   d5bd4:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5bd6:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d5bd8:	e9c4 3300 	strd	r3, r3, [r4]
   d5bdc:	e7f1      	b.n	d5bc2 <_ZN6String4moveERS_+0x1e>

000d5bde <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5bde:	4288      	cmp	r0, r1
{
   d5be0:	b510      	push	{r4, lr}
   d5be2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5be4:	d005      	beq.n	d5bf2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5be6:	680b      	ldr	r3, [r1, #0]
   d5be8:	b12b      	cbz	r3, d5bf6 <_ZN6StringaSERKS_+0x18>
   d5bea:	688a      	ldr	r2, [r1, #8]
   d5bec:	4619      	mov	r1, r3
   d5bee:	f7ff ffac 	bl	d5b4a <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5bf2:	4620      	mov	r0, r4
   d5bf4:	bd10      	pop	{r4, pc}
	else invalidate();
   d5bf6:	f7ff ff7d 	bl	d5af4 <_ZN6String10invalidateEv>
   d5bfa:	e7fa      	b.n	d5bf2 <_ZN6StringaSERKS_+0x14>

000d5bfc <_ZN6StringaSEO15StringSumHelper>:
	return *this;
}

String & String::operator = (StringSumHelper &&rval)
{
	if (this != &rval) move(rval);
   d5bfc:	4288      	cmp	r0, r1
{
   d5bfe:	b510      	push	{r4, lr}
   d5c00:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d5c02:	d001      	beq.n	d5c08 <_ZN6StringaSEO15StringSumHelper+0xc>
   d5c04:	f7ff ffce 	bl	d5ba4 <_ZN6String4moveERS_>
	return *this;
}
   d5c08:	4620      	mov	r0, r4
   d5c0a:	bd10      	pop	{r4, pc}

000d5c0c <_ZN6StringaSEPKc>:
#endif

String & String::operator = (const char *cstr)
{
   d5c0c:	b513      	push	{r0, r1, r4, lr}
   d5c0e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5c10:	b159      	cbz	r1, d5c2a <_ZN6StringaSEPKc+0x1e>
   d5c12:	4608      	mov	r0, r1
   d5c14:	9101      	str	r1, [sp, #4]
   d5c16:	f001 ff63 	bl	d7ae0 <strlen>
   d5c1a:	9901      	ldr	r1, [sp, #4]
   d5c1c:	4602      	mov	r2, r0
   d5c1e:	4620      	mov	r0, r4
   d5c20:	f7ff ff93 	bl	d5b4a <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5c24:	4620      	mov	r0, r4
   d5c26:	b002      	add	sp, #8
   d5c28:	bd10      	pop	{r4, pc}
	else invalidate();
   d5c2a:	f7ff ff63 	bl	d5af4 <_ZN6String10invalidateEv>
   d5c2e:	e7f9      	b.n	d5c24 <_ZN6StringaSEPKc+0x18>

000d5c30 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d5c30:	b510      	push	{r4, lr}
   d5c32:	4604      	mov	r4, r0
   d5c34:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d5c36:	2300      	movs	r3, #0
	capacity = 0;
   d5c38:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d5c3c:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5c3e:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d5c40:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d5c42:	a901      	add	r1, sp, #4
   d5c44:	f7ff ff2a 	bl	d5a9c <itoa>
	*this = buf;
   d5c48:	a901      	add	r1, sp, #4
   d5c4a:	4620      	mov	r0, r4
   d5c4c:	f7ff ffde 	bl	d5c0c <_ZN6StringaSEPKc>
}
   d5c50:	4620      	mov	r0, r4
   d5c52:	b00a      	add	sp, #40	; 0x28
   d5c54:	bd10      	pop	{r4, pc}

000d5c56 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   d5c56:	b510      	push	{r4, lr}
   d5c58:	4604      	mov	r4, r0
   d5c5a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d5c5c:	2300      	movs	r3, #0
	capacity = 0;
   d5c5e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d5c62:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5c64:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   d5c66:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   d5c68:	a901      	add	r1, sp, #4
   d5c6a:	f7ff fea8 	bl	d59be <ltoa>
	*this = buf;
   d5c6e:	a901      	add	r1, sp, #4
   d5c70:	4620      	mov	r0, r4
   d5c72:	f7ff ffcb 	bl	d5c0c <_ZN6StringaSEPKc>
}
   d5c76:	4620      	mov	r0, r4
   d5c78:	b00a      	add	sp, #40	; 0x28
   d5c7a:	bd10      	pop	{r4, pc}

000d5c7c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5c7c:	b570      	push	{r4, r5, r6, lr}
   d5c7e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5c80:	460e      	mov	r6, r1
   d5c82:	b909      	cbnz	r1, d5c88 <_ZN6String6concatEPKcj+0xc>
   d5c84:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5c86:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5c88:	b16a      	cbz	r2, d5ca6 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d5c8a:	6884      	ldr	r4, [r0, #8]
   d5c8c:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d5c8e:	4621      	mov	r1, r4
   d5c90:	f7ff ff47 	bl	d5b22 <_ZN6String7reserveEj>
   d5c94:	2800      	cmp	r0, #0
   d5c96:	d0f5      	beq.n	d5c84 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5c98:	6828      	ldr	r0, [r5, #0]
   d5c9a:	68ab      	ldr	r3, [r5, #8]
   d5c9c:	4631      	mov	r1, r6
   d5c9e:	4418      	add	r0, r3
   d5ca0:	f001 ff16 	bl	d7ad0 <strcpy>
	len = newlen;
   d5ca4:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d5ca6:	2001      	movs	r0, #1
   d5ca8:	e7ed      	b.n	d5c86 <_ZN6String6concatEPKcj+0xa>

000d5caa <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d5caa:	688a      	ldr	r2, [r1, #8]
   d5cac:	6809      	ldr	r1, [r1, #0]
   d5cae:	f7ff bfe5 	b.w	d5c7c <_ZN6String6concatEPKcj>

000d5cb2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d5cb2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5cb4:	688a      	ldr	r2, [r1, #8]
   d5cb6:	6809      	ldr	r1, [r1, #0]
{
   d5cb8:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5cba:	f7ff ffdf 	bl	d5c7c <_ZN6String6concatEPKcj>
   d5cbe:	b910      	cbnz	r0, d5cc6 <_ZplRK15StringSumHelperRK6String+0x14>
   d5cc0:	4620      	mov	r0, r4
   d5cc2:	f7ff ff17 	bl	d5af4 <_ZN6String10invalidateEv>
	return a;
}
   d5cc6:	4620      	mov	r0, r4
   d5cc8:	bd10      	pop	{r4, pc}

000d5cca <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d5cca:	b513      	push	{r0, r1, r4, lr}
   d5ccc:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d5cce:	b929      	cbnz	r1, d5cdc <_ZplRK15StringSumHelperPKc+0x12>
   d5cd0:	4620      	mov	r0, r4
   d5cd2:	f7ff ff0f 	bl	d5af4 <_ZN6String10invalidateEv>
	return a;
}
   d5cd6:	4620      	mov	r0, r4
   d5cd8:	b002      	add	sp, #8
   d5cda:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d5cdc:	4608      	mov	r0, r1
   d5cde:	9101      	str	r1, [sp, #4]
   d5ce0:	f001 fefe 	bl	d7ae0 <strlen>
   d5ce4:	9901      	ldr	r1, [sp, #4]
   d5ce6:	4602      	mov	r2, r0
   d5ce8:	4620      	mov	r0, r4
   d5cea:	f7ff ffc7 	bl	d5c7c <_ZN6String6concatEPKcj>
   d5cee:	2800      	cmp	r0, #0
   d5cf0:	d0ee      	beq.n	d5cd0 <_ZplRK15StringSumHelperPKc+0x6>
   d5cf2:	e7f0      	b.n	d5cd6 <_ZplRK15StringSumHelperPKc+0xc>

000d5cf4 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5cf4:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5cf6:	6882      	ldr	r2, [r0, #8]
   d5cf8:	b93a      	cbnz	r2, d5d0a <_ZNK6String6equalsEPKc+0x16>
   d5cfa:	b121      	cbz	r1, d5d06 <_ZNK6String6equalsEPKc+0x12>
   d5cfc:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d5cfe:	fab0 f080 	clz	r0, r0
   d5d02:	0940      	lsrs	r0, r0, #5
   d5d04:	e000      	b.n	d5d08 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5d06:	2001      	movs	r0, #1
}
   d5d08:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5d0a:	6800      	ldr	r0, [r0, #0]
   d5d0c:	b909      	cbnz	r1, d5d12 <_ZNK6String6equalsEPKc+0x1e>
   d5d0e:	7800      	ldrb	r0, [r0, #0]
   d5d10:	e7f5      	b.n	d5cfe <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d5d12:	f001 fed3 	bl	d7abc <strcmp>
   d5d16:	e7f2      	b.n	d5cfe <_ZNK6String6equalsEPKc+0xa>

000d5d18 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d5d18:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d5d1a:	6883      	ldr	r3, [r0, #8]
   d5d1c:	4293      	cmp	r3, r2
   d5d1e:	d907      	bls.n	d5d30 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d5d20:	6804      	ldr	r4, [r0, #0]
   d5d22:	6809      	ldr	r1, [r1, #0]
   d5d24:	18a0      	adds	r0, r4, r2
   d5d26:	f001 fef6 	bl	d7b16 <strstr>
	if (found == NULL) return -1;
   d5d2a:	b108      	cbz	r0, d5d30 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d5d2c:	1b00      	subs	r0, r0, r4
}
   d5d2e:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   d5d30:	f04f 30ff 	mov.w	r0, #4294967295
   d5d34:	e7fb      	b.n	d5d2e <_ZNK6String7indexOfERKS_j+0x16>

000d5d36 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   d5d36:	2200      	movs	r2, #0
   d5d38:	f7ff bfee 	b.w	d5d18 <_ZNK6String7indexOfERKS_j>

000d5d3c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d5d3e:	429a      	cmp	r2, r3
{
   d5d40:	460f      	mov	r7, r1
   d5d42:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d5d44:	490c      	ldr	r1, [pc, #48]	; (d5d78 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   d5d46:	bf88      	it	hi
   d5d48:	4613      	movhi	r3, r2
{
   d5d4a:	4614      	mov	r4, r2
   d5d4c:	4606      	mov	r6, r0
	if (left > right) {
   d5d4e:	bf84      	itt	hi
   d5d50:	462c      	movhi	r4, r5
   d5d52:	461d      	movhi	r5, r3
	String out;
   d5d54:	f7ff ff12 	bl	d5b7c <_ZN6StringC1EPKc>
	if (left > len) return out;
   d5d58:	68ba      	ldr	r2, [r7, #8]
   d5d5a:	42a2      	cmp	r2, r4
   d5d5c:	d30a      	bcc.n	d5d74 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d5d5e:	6839      	ldr	r1, [r7, #0]
   d5d60:	42aa      	cmp	r2, r5
   d5d62:	bf94      	ite	ls
   d5d64:	ebc4 0202 	rsbls	r2, r4, r2
   d5d68:	ebc4 0205 	rsbhi	r2, r4, r5
   d5d6c:	4421      	add	r1, r4
   d5d6e:	4630      	mov	r0, r6
   d5d70:	f7ff feeb 	bl	d5b4a <_ZN6String4copyEPKcj>
	return out;
}
   d5d74:	4630      	mov	r0, r6
   d5d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5d78:	000d7f07 	.word	0x000d7f07

000d5d7c <_ZNK6String9substringEj>:
{
   d5d7c:	b510      	push	{r4, lr}
   d5d7e:	4604      	mov	r4, r0
	return substring(left, len);
   d5d80:	688b      	ldr	r3, [r1, #8]
   d5d82:	f7ff ffdb 	bl	d5d3c <_ZNK6String9substringEjj>
}
   d5d86:	4620      	mov	r0, r4
   d5d88:	bd10      	pop	{r4, pc}

000d5d8a <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
   d5d8a:	b538      	push	{r3, r4, r5, lr}
   d5d8c:	4604      	mov	r4, r0
   d5d8e:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
   d5d90:	68a3      	ldr	r3, [r4, #8]
   d5d92:	428b      	cmp	r3, r1
   d5d94:	d911      	bls.n	d5dba <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
   d5d96:	b182      	cbz	r2, d5dba <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
   d5d98:	4411      	add	r1, r2
   d5d9a:	428b      	cmp	r3, r1
   d5d9c:	bf38      	it	cc
   d5d9e:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
   d5da0:	6825      	ldr	r5, [r4, #0]
	len = len - count;
   d5da2:	1a99      	subs	r1, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
   d5da4:	1813      	adds	r3, r2, r0
	len = len - count;
   d5da6:	60a1      	str	r1, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
   d5da8:	1a0a      	subs	r2, r1, r0
   d5daa:	18e9      	adds	r1, r5, r3
   d5dac:	4428      	add	r0, r5
   d5dae:	f001 fe3f 	bl	d7a30 <memmove>
	buffer[len] = 0;
   d5db2:	6822      	ldr	r2, [r4, #0]
   d5db4:	68a3      	ldr	r3, [r4, #8]
   d5db6:	2100      	movs	r1, #0
   d5db8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5dba:	4620      	mov	r0, r4
   d5dbc:	bd38      	pop	{r3, r4, r5, pc}

000d5dbe <_ZN6String6removeEj>:
        int count = len - index;
   d5dbe:	6882      	ldr	r2, [r0, #8]
        return remove(index, count);
   d5dc0:	1a52      	subs	r2, r2, r1
   d5dc2:	f7ff bfe2 	b.w	d5d8a <_ZN6String6removeEjj>

000d5dc6 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5dc6:	b510      	push	{r4, lr}
   d5dc8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5dca:	6800      	ldr	r0, [r0, #0]
   d5dcc:	b108      	cbz	r0, d5dd2 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5dce:	f7ff f9e3 	bl	d5198 <os_mutex_recursive_destroy>
    }
   d5dd2:	4620      	mov	r0, r4
   d5dd4:	bd10      	pop	{r4, pc}

000d5dd6 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5dd6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5dd8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5dda:	4604      	mov	r4, r0
      if (_M_manager)
   d5ddc:	b113      	cbz	r3, d5de4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5dde:	2203      	movs	r2, #3
   d5de0:	4601      	mov	r1, r0
   d5de2:	4798      	blx	r3
    }
   d5de4:	4620      	mov	r0, r4
   d5de6:	bd10      	pop	{r4, pc}

000d5de8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5de8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5dea:	4c06      	ldr	r4, [pc, #24]	; (d5e04 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5dec:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5dee:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5df0:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5df2:	f7ff f9c9 	bl	d5188 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5df6:	4620      	mov	r0, r4
   d5df8:	4a03      	ldr	r2, [pc, #12]	; (d5e08 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5dfa:	4904      	ldr	r1, [pc, #16]	; (d5e0c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5e00:	f001 b81e 	b.w	d6e40 <__aeabi_atexit>
   d5e04:	2003e668 	.word	0x2003e668
   d5e08:	2003e144 	.word	0x2003e144
   d5e0c:	000d5dc7 	.word	0x000d5dc7

000d5e10 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e12:	4606      	mov	r6, r0
   d5e14:	460d      	mov	r5, r1
  size_t n = 0;
   d5e16:	188f      	adds	r7, r1, r2
   d5e18:	2400      	movs	r4, #0
  while (size--) {
   d5e1a:	42bd      	cmp	r5, r7
   d5e1c:	d00c      	beq.n	d5e38 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5e1e:	6833      	ldr	r3, [r6, #0]
   d5e20:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5e24:	689b      	ldr	r3, [r3, #8]
   d5e26:	4630      	mov	r0, r6
   d5e28:	4798      	blx	r3
     if (chunk>=0)
   d5e2a:	1e03      	subs	r3, r0, #0
   d5e2c:	db01      	blt.n	d5e32 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5e2e:	441c      	add	r4, r3
  while (size--) {
   d5e30:	e7f3      	b.n	d5e1a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5e32:	2c00      	cmp	r4, #0
   d5e34:	bf08      	it	eq
   d5e36:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5e38:	4620      	mov	r0, r4
   d5e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e3c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5e3c:	b513      	push	{r0, r1, r4, lr}
   d5e3e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5e40:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5e42:	b159      	cbz	r1, d5e5c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5e44:	9101      	str	r1, [sp, #4]
   d5e46:	f001 fe4b 	bl	d7ae0 <strlen>
   d5e4a:	6823      	ldr	r3, [r4, #0]
   d5e4c:	9901      	ldr	r1, [sp, #4]
   d5e4e:	68db      	ldr	r3, [r3, #12]
   d5e50:	4602      	mov	r2, r0
   d5e52:	4620      	mov	r0, r4
    }
   d5e54:	b002      	add	sp, #8
   d5e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5e5a:	4718      	bx	r3
    }
   d5e5c:	b002      	add	sp, #8
   d5e5e:	bd10      	pop	{r4, pc}

000d5e60 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5e60:	b508      	push	{r3, lr}
  return write(str);
   d5e62:	f7ff ffeb 	bl	d5e3c <_ZN5Print5writeEPKc>
}
   d5e66:	bd08      	pop	{r3, pc}

000d5e68 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5e68:	6803      	ldr	r3, [r0, #0]
   d5e6a:	689b      	ldr	r3, [r3, #8]
   d5e6c:	4718      	bx	r3

000d5e6e <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   d5e6e:	680a      	ldr	r2, [r1, #0]
 {
   d5e70:	460b      	mov	r3, r1
   return x.printTo(*this);
   d5e72:	6812      	ldr	r2, [r2, #0]
   d5e74:	4601      	mov	r1, r0
   d5e76:	4618      	mov	r0, r3
   d5e78:	4710      	bx	r2

000d5e7a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5e7a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5e7c:	210d      	movs	r1, #13
{
   d5e7e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5e80:	f7ff fff2 	bl	d5e68 <_ZN5Print5printEc>
  n += print('\n');
   d5e84:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5e86:	4604      	mov	r4, r0
  n += print('\n');
   d5e88:	4628      	mov	r0, r5
   d5e8a:	f7ff ffed 	bl	d5e68 <_ZN5Print5printEc>
  return n;
}
   d5e8e:	4420      	add	r0, r4
   d5e90:	bd38      	pop	{r3, r4, r5, pc}

000d5e92 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5e92:	b538      	push	{r3, r4, r5, lr}
   d5e94:	4605      	mov	r5, r0
  return write(str);
   d5e96:	f7ff ffd1 	bl	d5e3c <_ZN5Print5writeEPKc>
   d5e9a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5e9c:	4628      	mov	r0, r5
   d5e9e:	f7ff ffec 	bl	d5e7a <_ZN5Print7printlnEv>
  return n;
}
   d5ea2:	4420      	add	r0, r4
   d5ea4:	bd38      	pop	{r3, r4, r5, pc}

000d5ea6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5ea6:	b530      	push	{r4, r5, lr}
   d5ea8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5eaa:	2300      	movs	r3, #0
   d5eac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5eb0:	2a01      	cmp	r2, #1
   d5eb2:	bf98      	it	ls
   d5eb4:	220a      	movls	r2, #10
   d5eb6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5eb8:	460d      	mov	r5, r1
   d5eba:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5ebe:	fb01 5312 	mls	r3, r1, r2, r5
   d5ec2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5ec6:	2b09      	cmp	r3, #9
   d5ec8:	bf94      	ite	ls
   d5eca:	3330      	addls	r3, #48	; 0x30
   d5ecc:	3337      	addhi	r3, #55	; 0x37
   d5ece:	b2db      	uxtb	r3, r3
  } while(n);
   d5ed0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5ed2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5ed6:	d9ef      	bls.n	d5eb8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5ed8:	4621      	mov	r1, r4
   d5eda:	f7ff ffaf 	bl	d5e3c <_ZN5Print5writeEPKc>
}
   d5ede:	b00b      	add	sp, #44	; 0x2c
   d5ee0:	bd30      	pop	{r4, r5, pc}

000d5ee2 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5ee2:	2300      	movs	r3, #0
   d5ee4:	6840      	ldr	r0, [r0, #4]
   d5ee6:	461a      	mov	r2, r3
   d5ee8:	4619      	mov	r1, r3
   d5eea:	f7ff bb33 	b.w	d5554 <network_on>
	...

000d5ef0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5ef0:	4b01      	ldr	r3, [pc, #4]	; (d5ef8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5ef2:	4a02      	ldr	r2, [pc, #8]	; (d5efc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5ef4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5ef6:	4770      	bx	lr
   d5ef8:	2003e66c 	.word	0x2003e66c
   d5efc:	000d7fb8 	.word	0x000d7fb8

000d5f00 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d5f00:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5f02:	2000      	movs	r0, #0
   d5f04:	f7ff fb7e 	bl	d5604 <spark_sync_time_pending>
   d5f08:	b128      	cbz	r0, d5f16 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5f0a:	f7ff fb73 	bl	d55f4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5f0e:	f080 0001 	eor.w	r0, r0, #1
   d5f12:	b2c0      	uxtb	r0, r0
    }
   d5f14:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5f16:	2001      	movs	r0, #1
   d5f18:	e7fc      	b.n	d5f14 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d5f1a <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5f1a:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d5f1c:	2000      	movs	r0, #0
   d5f1e:	f7ff f923 	bl	d5168 <hal_rtc_time_is_valid>
    if (rtcstate)
   d5f22:	4604      	mov	r4, r0
   d5f24:	b9a0      	cbnz	r0, d5f50 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5f26:	f7ff fab7 	bl	d5498 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5f2a:	2801      	cmp	r0, #1
   d5f2c:	d110      	bne.n	d5f50 <_ZN9TimeClass7isValidEv+0x36>
   d5f2e:	4620      	mov	r0, r4
   d5f30:	f7ff faca 	bl	d54c8 <system_thread_get_state>
   d5f34:	b960      	cbnz	r0, d5f50 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d5f36:	f7ff ffe3 	bl	d5f00 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5f3a:	b910      	cbnz	r0, d5f42 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d5f3c:	f7ff fb4a 	bl	d55d4 <spark_process>
        while (_while() && !_condition()) {
   d5f40:	e7f9      	b.n	d5f36 <_ZN9TimeClass7isValidEv+0x1c>
   d5f42:	f7ff ffdd 	bl	d5f00 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d5f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d5f4a:	2000      	movs	r0, #0
   d5f4c:	f7ff b90c 	b.w	d5168 <hal_rtc_time_is_valid>
}
   d5f50:	4620      	mov	r0, r4
   d5f52:	bd10      	pop	{r4, pc}

000d5f54 <_ZN9TimeClass3nowEv>:
{
   d5f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d5f56:	f7ff ffe0 	bl	d5f1a <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d5f5a:	2210      	movs	r2, #16
   d5f5c:	2100      	movs	r1, #0
   d5f5e:	4668      	mov	r0, sp
   d5f60:	f001 fd80 	bl	d7a64 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d5f64:	2100      	movs	r1, #0
   d5f66:	4668      	mov	r0, sp
   d5f68:	f7ff f906 	bl	d5178 <hal_rtc_get_time>
}
   d5f6c:	9800      	ldr	r0, [sp, #0]
   d5f6e:	b005      	add	sp, #20
   d5f70:	f85d fb04 	ldr.w	pc, [sp], #4

000d5f74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5f74:	4b02      	ldr	r3, [pc, #8]	; (d5f80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5f76:	681a      	ldr	r2, [r3, #0]
   d5f78:	4b02      	ldr	r3, [pc, #8]	; (d5f84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5f7a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5f7c:	4770      	bx	lr
   d5f7e:	bf00      	nop
   d5f80:	2003e0dc 	.word	0x2003e0dc
   d5f84:	2003e670 	.word	0x2003e670

000d5f88 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5f88:	2100      	movs	r1, #0
   d5f8a:	f7ff ba95 	b.w	d54b8 <system_delay_ms>

000d5f8e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5f8e:	b510      	push	{r4, lr}
   d5f90:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5f92:	f7ff ff20 	bl	d5dd6 <_ZNSt14_Function_baseD1Ev>
   d5f96:	4620      	mov	r0, r4
   d5f98:	bd10      	pop	{r4, pc}
	...

000d5f9c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5f9c:	4803      	ldr	r0, [pc, #12]	; (d5fac <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5f9e:	4a04      	ldr	r2, [pc, #16]	; (d5fb0 <_GLOBAL__sub_I_RGB+0x14>)
   d5fa0:	4904      	ldr	r1, [pc, #16]	; (d5fb4 <_GLOBAL__sub_I_RGB+0x18>)
   d5fa2:	2300      	movs	r3, #0
   d5fa4:	6083      	str	r3, [r0, #8]
   d5fa6:	f000 bf4b 	b.w	d6e40 <__aeabi_atexit>
   d5faa:	bf00      	nop
   d5fac:	2003e674 	.word	0x2003e674
   d5fb0:	2003e144 	.word	0x2003e144
   d5fb4:	000d5f8f 	.word	0x000d5f8f

000d5fb8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5fb8:	4b01      	ldr	r3, [pc, #4]	; (d5fc0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5fba:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5fbc:	4770      	bx	lr
   d5fbe:	bf00      	nop
   d5fc0:	2003e0e0 	.word	0x2003e0e0

000d5fc4 <serialEventRun>:
{
   d5fc4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5fc6:	4b0b      	ldr	r3, [pc, #44]	; (d5ff4 <serialEventRun+0x30>)
   d5fc8:	b143      	cbz	r3, d5fdc <serialEventRun+0x18>
   d5fca:	f000 f985 	bl	d62d8 <_Z16_fetch_usbserialv>
   d5fce:	6803      	ldr	r3, [r0, #0]
   d5fd0:	691b      	ldr	r3, [r3, #16]
   d5fd2:	4798      	blx	r3
   d5fd4:	2800      	cmp	r0, #0
   d5fd6:	dd01      	ble.n	d5fdc <serialEventRun+0x18>
        serialEvent();
   d5fd8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5fdc:	4b06      	ldr	r3, [pc, #24]	; (d5ff8 <serialEventRun+0x34>)
   d5fde:	b143      	cbz	r3, d5ff2 <serialEventRun+0x2e>
   d5fe0:	f000 f9f8 	bl	d63d4 <_Z22__fetch_global_Serial1v>
   d5fe4:	6803      	ldr	r3, [r0, #0]
   d5fe6:	691b      	ldr	r3, [r3, #16]
   d5fe8:	4798      	blx	r3
   d5fea:	2800      	cmp	r0, #0
   d5fec:	dd01      	ble.n	d5ff2 <serialEventRun+0x2e>
        serialEvent1();
   d5fee:	f3af 8000 	nop.w
}
   d5ff2:	bd08      	pop	{r3, pc}
	...

000d5ffc <_post_loop>:
{
   d5ffc:	b508      	push	{r3, lr}
	serialEventRun();
   d5ffe:	f7ff ffe1 	bl	d5fc4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6002:	f7ff f8a9 	bl	d5158 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6006:	4b01      	ldr	r3, [pc, #4]	; (d600c <_post_loop+0x10>)
   d6008:	6018      	str	r0, [r3, #0]
}
   d600a:	bd08      	pop	{r3, pc}
   d600c:	2003e7d4 	.word	0x2003e7d4

000d6010 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6010:	4802      	ldr	r0, [pc, #8]	; (d601c <_Z33system_initialize_user_backup_ramv+0xc>)
   d6012:	4a03      	ldr	r2, [pc, #12]	; (d6020 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6014:	4903      	ldr	r1, [pc, #12]	; (d6024 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6016:	1a12      	subs	r2, r2, r0
   d6018:	f001 bcfc 	b.w	d7a14 <memcpy>
   d601c:	2003f400 	.word	0x2003f400
   d6020:	2003f404 	.word	0x2003f404
   d6024:	000d8380 	.word	0x000d8380

000d6028 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6028:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d602a:	2300      	movs	r3, #0
   d602c:	9300      	str	r3, [sp, #0]
   d602e:	461a      	mov	r2, r3
   d6030:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6034:	f7ff fa5a 	bl	d54ec <system_ctrl_set_result>
}
   d6038:	b003      	add	sp, #12
   d603a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6040 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6040:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6042:	8843      	ldrh	r3, [r0, #2]
   d6044:	2b0a      	cmp	r3, #10
   d6046:	d008      	beq.n	d605a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6048:	2b50      	cmp	r3, #80	; 0x50
   d604a:	d10b      	bne.n	d6064 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d604c:	4b09      	ldr	r3, [pc, #36]	; (d6074 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d604e:	681b      	ldr	r3, [r3, #0]
   d6050:	b14b      	cbz	r3, d6066 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6052:	b003      	add	sp, #12
   d6054:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6058:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d605a:	f7ff ffe5 	bl	d6028 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d605e:	b003      	add	sp, #12
   d6060:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6064:	2300      	movs	r3, #0
   d6066:	9300      	str	r3, [sp, #0]
   d6068:	461a      	mov	r2, r3
   d606a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d606e:	f7ff fa3d 	bl	d54ec <system_ctrl_set_result>
}
   d6072:	e7f4      	b.n	d605e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6074:	2003e688 	.word	0x2003e688

000d6078 <module_user_init_hook>:
{
   d6078:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d607a:	4c12      	ldr	r4, [pc, #72]	; (d60c4 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d607c:	4812      	ldr	r0, [pc, #72]	; (d60c8 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d607e:	4d13      	ldr	r5, [pc, #76]	; (d60cc <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6080:	2100      	movs	r1, #0
   d6082:	f7ff faf7 	bl	d5674 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6086:	6823      	ldr	r3, [r4, #0]
   d6088:	42ab      	cmp	r3, r5
   d608a:	4b11      	ldr	r3, [pc, #68]	; (d60d0 <module_user_init_hook+0x58>)
   d608c:	bf0c      	ite	eq
   d608e:	2201      	moveq	r2, #1
   d6090:	2200      	movne	r2, #0
   d6092:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6094:	d002      	beq.n	d609c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d6096:	f7ff ffbb 	bl	d6010 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d609a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d609c:	f7ff f854 	bl	d5148 <HAL_RNG_GetRandomNumber>
   d60a0:	4604      	mov	r4, r0
    srand(seed);
   d60a2:	f001 fce7 	bl	d7a74 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d60a6:	4b0b      	ldr	r3, [pc, #44]	; (d60d4 <module_user_init_hook+0x5c>)
   d60a8:	b113      	cbz	r3, d60b0 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d60aa:	4620      	mov	r0, r4
   d60ac:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d60b0:	2100      	movs	r1, #0
   d60b2:	4808      	ldr	r0, [pc, #32]	; (d60d4 <module_user_init_hook+0x5c>)
   d60b4:	f7ff faae 	bl	d5614 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d60b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d60bc:	4806      	ldr	r0, [pc, #24]	; (d60d8 <module_user_init_hook+0x60>)
   d60be:	2100      	movs	r1, #0
   d60c0:	f7ff ba0a 	b.w	d54d8 <system_ctrl_set_app_request_handler>
   d60c4:	2003f400 	.word	0x2003f400
   d60c8:	000d5fb9 	.word	0x000d5fb9
   d60cc:	9a271c1e 	.word	0x9a271c1e
   d60d0:	2003e684 	.word	0x2003e684
   d60d4:	00000000 	.word	0x00000000
   d60d8:	000d6041 	.word	0x000d6041

000d60dc <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d60dc:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d60de:	2308      	movs	r3, #8
   d60e0:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d60e4:	6803      	ldr	r3, [r0, #0]
   d60e6:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d60ea:	7a03      	ldrb	r3, [r0, #8]
   d60ec:	f88d 3003 	strb.w	r3, [sp, #3]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d60f0:	2100      	movs	r1, #0
    opts.timeout = timeout_;
   d60f2:	6843      	ldr	r3, [r0, #4]
   d60f4:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d60f6:	4668      	mov	r0, sp
   d60f8:	f7ff fa94 	bl	d5624 <spark_cloud_disconnect>
}
   d60fc:	b003      	add	sp, #12
   d60fe:	f85d fb04 	ldr.w	pc, [sp], #4

000d6102 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d6102:	4770      	bx	lr

000d6104 <_ZN9IPAddressD0Ev>:
   d6104:	b510      	push	{r4, lr}
   d6106:	2118      	movs	r1, #24
   d6108:	4604      	mov	r4, r0
   d610a:	f000 fe9e 	bl	d6e4a <_ZdlPvj>
   d610e:	4620      	mov	r0, r4
   d6110:	bd10      	pop	{r4, pc}

000d6112 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6112:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6114:	7d03      	ldrb	r3, [r0, #20]
   d6116:	2b06      	cmp	r3, #6
{
   d6118:	b08d      	sub	sp, #52	; 0x34
   d611a:	460e      	mov	r6, r1
   d611c:	f100 0704 	add.w	r7, r0, #4
   d6120:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6124:	d012      	beq.n	d614c <_ZNK9IPAddress7printToER5Print+0x3a>
   d6126:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d612a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d612e:	220a      	movs	r2, #10
   d6130:	4630      	mov	r0, r6
   d6132:	f7ff feb8 	bl	d5ea6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6136:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6138:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d613a:	d019      	beq.n	d6170 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d613c:	2c00      	cmp	r4, #0
   d613e:	d0f4      	beq.n	d612a <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6140:	212e      	movs	r1, #46	; 0x2e
   d6142:	4630      	mov	r0, r6
   d6144:	f7ff fe90 	bl	d5e68 <_ZN5Print5printEc>
   d6148:	4404      	add	r4, r0
   d614a:	e7ee      	b.n	d612a <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d614c:	232f      	movs	r3, #47	; 0x2f
   d614e:	466a      	mov	r2, sp
   d6150:	4639      	mov	r1, r7
   d6152:	200a      	movs	r0, #10
		buf[0] = 0;
   d6154:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6158:	f7ff f826 	bl	d51a8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d615c:	4668      	mov	r0, sp
   d615e:	f001 fcbf 	bl	d7ae0 <strlen>
   d6162:	6833      	ldr	r3, [r6, #0]
   d6164:	4602      	mov	r2, r0
   d6166:	68db      	ldr	r3, [r3, #12]
   d6168:	4669      	mov	r1, sp
   d616a:	4630      	mov	r0, r6
   d616c:	4798      	blx	r3
   d616e:	4604      	mov	r4, r0
    }
    return n;
}
   d6170:	4620      	mov	r0, r4
   d6172:	b00d      	add	sp, #52	; 0x34
   d6174:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6178 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6178:	b510      	push	{r4, lr}
   d617a:	4b05      	ldr	r3, [pc, #20]	; (d6190 <_ZN9IPAddressC1Ev+0x18>)
   d617c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d617e:	2211      	movs	r2, #17
   d6180:	f840 3b04 	str.w	r3, [r0], #4
   d6184:	2100      	movs	r1, #0
   d6186:	f001 fc6d 	bl	d7a64 <memset>
}
   d618a:	4620      	mov	r0, r4
   d618c:	bd10      	pop	{r4, pc}
   d618e:	bf00      	nop
   d6190:	000d7fe0 	.word	0x000d7fe0

000d6194 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6194:	4603      	mov	r3, r0
   d6196:	4a07      	ldr	r2, [pc, #28]	; (d61b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6198:	b510      	push	{r4, lr}
   d619a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d619e:	f101 0210 	add.w	r2, r1, #16
   d61a2:	f851 4b04 	ldr.w	r4, [r1], #4
   d61a6:	f843 4b04 	str.w	r4, [r3], #4
   d61aa:	4291      	cmp	r1, r2
   d61ac:	d1f9      	bne.n	d61a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d61ae:	780a      	ldrb	r2, [r1, #0]
   d61b0:	701a      	strb	r2, [r3, #0]
}
   d61b2:	bd10      	pop	{r4, pc}
   d61b4:	000d7fe0 	.word	0x000d7fe0

000d61b8 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d61b8:	7d03      	ldrb	r3, [r0, #20]
   d61ba:	2b04      	cmp	r3, #4
   d61bc:	d104      	bne.n	d61c8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d61be:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d61c0:	3800      	subs	r0, #0
   d61c2:	bf18      	it	ne
   d61c4:	2001      	movne	r0, #1
   d61c6:	4770      	bx	lr
    } else if (version() == 6) {
   d61c8:	2b06      	cmp	r3, #6
   d61ca:	d107      	bne.n	d61dc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d61cc:	6843      	ldr	r3, [r0, #4]
   d61ce:	b93b      	cbnz	r3, d61e0 <_ZNK9IPAddresscvbEv+0x28>
   d61d0:	6883      	ldr	r3, [r0, #8]
   d61d2:	b92b      	cbnz	r3, d61e0 <_ZNK9IPAddresscvbEv+0x28>
   d61d4:	68c3      	ldr	r3, [r0, #12]
   d61d6:	b91b      	cbnz	r3, d61e0 <_ZNK9IPAddresscvbEv+0x28>
   d61d8:	6900      	ldr	r0, [r0, #16]
   d61da:	e7f1      	b.n	d61c0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d61dc:	2000      	movs	r0, #0
   d61de:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d61e0:	2001      	movs	r0, #1
}
   d61e2:	4770      	bx	lr

000d61e4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d61e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d61e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d61ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d61ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d61f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d61f6:	2304      	movs	r3, #4
   d61f8:	6041      	str	r1, [r0, #4]
   d61fa:	7503      	strb	r3, [r0, #20]
}
   d61fc:	bd10      	pop	{r4, pc}
	...

000d6200 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d6200:	b513      	push	{r0, r1, r4, lr}
   d6202:	4b05      	ldr	r3, [pc, #20]	; (d6218 <_ZN9IPAddressC1EPKh+0x18>)
   d6204:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d6206:	78cb      	ldrb	r3, [r1, #3]
   d6208:	9300      	str	r3, [sp, #0]
   d620a:	788b      	ldrb	r3, [r1, #2]
   d620c:	784a      	ldrb	r2, [r1, #1]
   d620e:	7809      	ldrb	r1, [r1, #0]
   d6210:	f7ff ffe8 	bl	d61e4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6214:	b002      	add	sp, #8
   d6216:	bd10      	pop	{r4, pc}
   d6218:	000d7fe0 	.word	0x000d7fe0

000d621c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d621c:	7441      	strb	r1, [r0, #17]
}
   d621e:	4770      	bx	lr

000d6220 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6220:	4770      	bx	lr

000d6222 <_ZN9USBSerial4readEv>:
{
   d6222:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6224:	2100      	movs	r1, #0
   d6226:	7c00      	ldrb	r0, [r0, #16]
   d6228:	f7ff f916 	bl	d5458 <HAL_USB_USART_Receive_Data>
}
   d622c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6230:	bd08      	pop	{r3, pc}

000d6232 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6232:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6234:	2101      	movs	r1, #1
   d6236:	7c00      	ldrb	r0, [r0, #16]
   d6238:	f7ff f90e 	bl	d5458 <HAL_USB_USART_Receive_Data>
}
   d623c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6240:	bd08      	pop	{r3, pc}

000d6242 <_ZN9USBSerial17availableForWriteEv>:
{
   d6242:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6244:	7c00      	ldrb	r0, [r0, #16]
   d6246:	f7ff f8ff 	bl	d5448 <HAL_USB_USART_Available_Data_For_Write>
}
   d624a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d624e:	bd08      	pop	{r3, pc}

000d6250 <_ZN9USBSerial9availableEv>:
{
   d6250:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6252:	7c00      	ldrb	r0, [r0, #16]
   d6254:	f7ff f8f0 	bl	d5438 <HAL_USB_USART_Available_Data>
}
   d6258:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d625c:	bd08      	pop	{r3, pc}

000d625e <_ZN9USBSerial5writeEh>:
{
   d625e:	b513      	push	{r0, r1, r4, lr}
   d6260:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6262:	7c00      	ldrb	r0, [r0, #16]
{
   d6264:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6266:	f7ff f8ef 	bl	d5448 <HAL_USB_USART_Available_Data_For_Write>
   d626a:	2800      	cmp	r0, #0
   d626c:	9901      	ldr	r1, [sp, #4]
   d626e:	dc01      	bgt.n	d6274 <_ZN9USBSerial5writeEh+0x16>
   d6270:	7c60      	ldrb	r0, [r4, #17]
   d6272:	b120      	cbz	r0, d627e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6274:	7c20      	ldrb	r0, [r4, #16]
   d6276:	f7ff f8f7 	bl	d5468 <HAL_USB_USART_Send_Data>
   d627a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d627e:	b002      	add	sp, #8
   d6280:	bd10      	pop	{r4, pc}

000d6282 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6282:	7c00      	ldrb	r0, [r0, #16]
   d6284:	f7ff b8f8 	b.w	d5478 <HAL_USB_USART_Flush_Data>

000d6288 <_ZN9USBSerialD0Ev>:
   d6288:	b510      	push	{r4, lr}
   d628a:	2114      	movs	r1, #20
   d628c:	4604      	mov	r4, r0
   d628e:	f000 fddc 	bl	d6e4a <_ZdlPvj>
   d6292:	4620      	mov	r0, r4
   d6294:	bd10      	pop	{r4, pc}
	...

000d6298 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6298:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d629a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d629e:	4604      	mov	r4, r0
   d62a0:	4608      	mov	r0, r1
   d62a2:	2100      	movs	r1, #0
   d62a4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d62a8:	4b04      	ldr	r3, [pc, #16]	; (d62bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d62aa:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d62ac:	2301      	movs	r3, #1
  _serial = serial;
   d62ae:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d62b0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d62b2:	4611      	mov	r1, r2
   d62b4:	f7ff f8b0 	bl	d5418 <HAL_USB_USART_Init>
}
   d62b8:	4620      	mov	r0, r4
   d62ba:	bd10      	pop	{r4, pc}
   d62bc:	000d7ff4 	.word	0x000d7ff4

000d62c0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d62c0:	7c00      	ldrb	r0, [r0, #16]
   d62c2:	2200      	movs	r2, #0
   d62c4:	f7ff b8b0 	b.w	d5428 <HAL_USB_USART_Begin>

000d62c8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d62c8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d62ca:	2214      	movs	r2, #20
{
   d62cc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d62ce:	2100      	movs	r1, #0
   d62d0:	f001 fbc8 	bl	d7a64 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d62d4:	4620      	mov	r0, r4
   d62d6:	bd10      	pop	{r4, pc}

000d62d8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d62d8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d62da:	4c10      	ldr	r4, [pc, #64]	; (d631c <_Z16_fetch_usbserialv+0x44>)
{
   d62dc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d62de:	a803      	add	r0, sp, #12
   d62e0:	f7ff fff2 	bl	d62c8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d62e4:	7821      	ldrb	r1, [r4, #0]
   d62e6:	f3bf 8f5b 	dmb	ish
   d62ea:	f011 0101 	ands.w	r1, r1, #1
   d62ee:	d111      	bne.n	d6314 <_Z16_fetch_usbserialv+0x3c>
   d62f0:	4620      	mov	r0, r4
   d62f2:	9101      	str	r1, [sp, #4]
   d62f4:	f7fd fed5 	bl	d40a2 <__cxa_guard_acquire>
   d62f8:	9901      	ldr	r1, [sp, #4]
   d62fa:	b158      	cbz	r0, d6314 <_Z16_fetch_usbserialv+0x3c>
   d62fc:	aa03      	add	r2, sp, #12
   d62fe:	4808      	ldr	r0, [pc, #32]	; (d6320 <_Z16_fetch_usbserialv+0x48>)
   d6300:	f7ff ffca 	bl	d6298 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6304:	4620      	mov	r0, r4
   d6306:	f7fd fed1 	bl	d40ac <__cxa_guard_release>
   d630a:	4a06      	ldr	r2, [pc, #24]	; (d6324 <_Z16_fetch_usbserialv+0x4c>)
   d630c:	4906      	ldr	r1, [pc, #24]	; (d6328 <_Z16_fetch_usbserialv+0x50>)
   d630e:	4804      	ldr	r0, [pc, #16]	; (d6320 <_Z16_fetch_usbserialv+0x48>)
   d6310:	f000 fd96 	bl	d6e40 <__aeabi_atexit>
	return _usbserial;
}
   d6314:	4802      	ldr	r0, [pc, #8]	; (d6320 <_Z16_fetch_usbserialv+0x48>)
   d6316:	b008      	add	sp, #32
   d6318:	bd10      	pop	{r4, pc}
   d631a:	bf00      	nop
   d631c:	2003e68c 	.word	0x2003e68c
   d6320:	2003e690 	.word	0x2003e690
   d6324:	2003e144 	.word	0x2003e144
   d6328:	000d6221 	.word	0x000d6221

000d632c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d632c:	4770      	bx	lr

000d632e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d632e:	7441      	strb	r1, [r0, #17]
}
   d6330:	4770      	bx	lr

000d6332 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6332:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6334:	7c00      	ldrb	r0, [r0, #16]
   d6336:	f7fe ff87 	bl	d5248 <hal_usart_available_data_for_write>
}
   d633a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d633e:	bd08      	pop	{r3, pc}

000d6340 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6340:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6342:	7c00      	ldrb	r0, [r0, #16]
   d6344:	f7fe ff58 	bl	d51f8 <hal_usart_available>
}
   d6348:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d634c:	bd08      	pop	{r3, pc}

000d634e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d634e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6350:	7c00      	ldrb	r0, [r0, #16]
   d6352:	f7fe ff61 	bl	d5218 <hal_usart_peek>
}
   d6356:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d635a:	bd08      	pop	{r3, pc}

000d635c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d635c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d635e:	7c00      	ldrb	r0, [r0, #16]
   d6360:	f7fe ff52 	bl	d5208 <hal_usart_read>
}
   d6364:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6368:	bd08      	pop	{r3, pc}

000d636a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d636a:	7c00      	ldrb	r0, [r0, #16]
   d636c:	f7fe bf5c 	b.w	d5228 <hal_usart_flush>

000d6370 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6370:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6372:	7c45      	ldrb	r5, [r0, #17]
{
   d6374:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6376:	b12d      	cbz	r5, d6384 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6378:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d637a:	b003      	add	sp, #12
   d637c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6380:	f7fe bf32 	b.w	d51e8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6384:	7c00      	ldrb	r0, [r0, #16]
   d6386:	9101      	str	r1, [sp, #4]
   d6388:	f7fe ff5e 	bl	d5248 <hal_usart_available_data_for_write>
   d638c:	2800      	cmp	r0, #0
   d638e:	9901      	ldr	r1, [sp, #4]
   d6390:	dcf2      	bgt.n	d6378 <_ZN11USARTSerial5writeEh+0x8>
}
   d6392:	4628      	mov	r0, r5
   d6394:	b003      	add	sp, #12
   d6396:	bd30      	pop	{r4, r5, pc}

000d6398 <_ZN11USARTSerialD0Ev>:
   d6398:	b510      	push	{r4, lr}
   d639a:	2114      	movs	r1, #20
   d639c:	4604      	mov	r4, r0
   d639e:	f000 fd54 	bl	d6e4a <_ZdlPvj>
   d63a2:	4620      	mov	r0, r4
   d63a4:	bd10      	pop	{r4, pc}
	...

000d63a8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d63a8:	b510      	push	{r4, lr}
   d63aa:	f04f 0c00 	mov.w	ip, #0
   d63ae:	4604      	mov	r4, r0
   d63b0:	4608      	mov	r0, r1
   d63b2:	4611      	mov	r1, r2
   d63b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d63b8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d63bc:	4a04      	ldr	r2, [pc, #16]	; (d63d0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d63be:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d63c0:	2201      	movs	r2, #1
  _serial = serial;
   d63c2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d63c4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d63c6:	461a      	mov	r2, r3
   d63c8:	f7fe ff06 	bl	d51d8 <hal_usart_init>
}
   d63cc:	4620      	mov	r0, r4
   d63ce:	bd10      	pop	{r4, pc}
   d63d0:	000d8024 	.word	0x000d8024

000d63d4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d63d4:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d63d6:	4c0e      	ldr	r4, [pc, #56]	; (d6410 <_Z22__fetch_global_Serial1v+0x3c>)
   d63d8:	7821      	ldrb	r1, [r4, #0]
   d63da:	f3bf 8f5b 	dmb	ish
   d63de:	f011 0101 	ands.w	r1, r1, #1
   d63e2:	d112      	bne.n	d640a <_Z22__fetch_global_Serial1v+0x36>
   d63e4:	4620      	mov	r0, r4
   d63e6:	9101      	str	r1, [sp, #4]
   d63e8:	f7fd fe5b 	bl	d40a2 <__cxa_guard_acquire>
   d63ec:	9901      	ldr	r1, [sp, #4]
   d63ee:	b160      	cbz	r0, d640a <_Z22__fetch_global_Serial1v+0x36>
   d63f0:	4a08      	ldr	r2, [pc, #32]	; (d6414 <_Z22__fetch_global_Serial1v+0x40>)
   d63f2:	4b09      	ldr	r3, [pc, #36]	; (d6418 <_Z22__fetch_global_Serial1v+0x44>)
   d63f4:	4809      	ldr	r0, [pc, #36]	; (d641c <_Z22__fetch_global_Serial1v+0x48>)
   d63f6:	f7ff ffd7 	bl	d63a8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d63fa:	4620      	mov	r0, r4
   d63fc:	f7fd fe56 	bl	d40ac <__cxa_guard_release>
   d6400:	4a07      	ldr	r2, [pc, #28]	; (d6420 <_Z22__fetch_global_Serial1v+0x4c>)
   d6402:	4908      	ldr	r1, [pc, #32]	; (d6424 <_Z22__fetch_global_Serial1v+0x50>)
   d6404:	4805      	ldr	r0, [pc, #20]	; (d641c <_Z22__fetch_global_Serial1v+0x48>)
   d6406:	f000 fd1b 	bl	d6e40 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d640a:	4804      	ldr	r0, [pc, #16]	; (d641c <_Z22__fetch_global_Serial1v+0x48>)
   d640c:	b002      	add	sp, #8
   d640e:	bd10      	pop	{r4, pc}
   d6410:	2003e6a4 	.word	0x2003e6a4
   d6414:	2003e6a8 	.word	0x2003e6a8
   d6418:	2003e72c 	.word	0x2003e72c
   d641c:	2003e7b0 	.word	0x2003e7b0
   d6420:	2003e144 	.word	0x2003e144
   d6424:	000d632d 	.word	0x000d632d

000d6428 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6428:	4770      	bx	lr

000d642a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d642a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d642c:	4606      	mov	r6, r0
   d642e:	4615      	mov	r5, r2
   d6430:	460c      	mov	r4, r1
   d6432:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6434:	42bc      	cmp	r4, r7
   d6436:	d006      	beq.n	d6446 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6438:	6833      	ldr	r3, [r6, #0]
   d643a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d643e:	689b      	ldr	r3, [r3, #8]
   d6440:	4630      	mov	r0, r6
   d6442:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6444:	e7f6      	b.n	d6434 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6446:	4628      	mov	r0, r5
   d6448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d644a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d644a:	7c00      	ldrb	r0, [r0, #16]
   d644c:	2200      	movs	r2, #0
   d644e:	f7fe bf23 	b.w	d5298 <hal_i2c_write>

000d6452 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6452:	7c00      	ldrb	r0, [r0, #16]
   d6454:	2100      	movs	r1, #0
   d6456:	f7fe bf27 	b.w	d52a8 <hal_i2c_available>

000d645a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d645a:	7c00      	ldrb	r0, [r0, #16]
   d645c:	2100      	movs	r1, #0
   d645e:	f7fe bf2b 	b.w	d52b8 <hal_i2c_read>

000d6462 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6462:	7c00      	ldrb	r0, [r0, #16]
   d6464:	2100      	movs	r1, #0
   d6466:	f7fe bf2f 	b.w	d52c8 <hal_i2c_peek>

000d646a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d646a:	7c00      	ldrb	r0, [r0, #16]
   d646c:	2100      	movs	r1, #0
   d646e:	f7fe bf33 	b.w	d52d8 <hal_i2c_flush>

000d6472 <_ZN7TwoWireD0Ev>:
   d6472:	b510      	push	{r4, lr}
   d6474:	2114      	movs	r1, #20
   d6476:	4604      	mov	r4, r0
   d6478:	f000 fce7 	bl	d6e4a <_ZdlPvj>
   d647c:	4620      	mov	r0, r4
   d647e:	bd10      	pop	{r4, pc}

000d6480 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6480:	b510      	push	{r4, lr}
   d6482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6486:	4604      	mov	r4, r0
   d6488:	4608      	mov	r0, r1
   d648a:	2100      	movs	r1, #0
   d648c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6490:	4b03      	ldr	r3, [pc, #12]	; (d64a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6492:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6494:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6496:	4611      	mov	r1, r2
   d6498:	f7fe ff2e 	bl	d52f8 <hal_i2c_init>
}
   d649c:	4620      	mov	r0, r4
   d649e:	bd10      	pop	{r4, pc}
   d64a0:	000d8054 	.word	0x000d8054

000d64a4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d64a4:	2300      	movs	r3, #0
   d64a6:	7c00      	ldrb	r0, [r0, #16]
   d64a8:	461a      	mov	r2, r3
   d64aa:	4619      	mov	r1, r3
   d64ac:	f7fe bed4 	b.w	d5258 <hal_i2c_begin>

000d64b0 <_ZN7TwoWire3endEv>:
	hal_i2c_end(_i2c, NULL);
   d64b0:	7c00      	ldrb	r0, [r0, #16]
   d64b2:	2100      	movs	r1, #0
   d64b4:	f7fe bed8 	b.w	d5268 <hal_i2c_end>

000d64b8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d64b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d64ba:	2200      	movs	r2, #0
   d64bc:	2314      	movs	r3, #20
   d64be:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d64c2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d64c6:	780b      	ldrb	r3, [r1, #0]
   d64c8:	f88d 3008 	strb.w	r3, [sp, #8]
   d64cc:	684b      	ldr	r3, [r1, #4]
   d64ce:	9303      	str	r3, [sp, #12]
   d64d0:	68cb      	ldr	r3, [r1, #12]
   d64d2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d64d4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d64d6:	7a0b      	ldrb	r3, [r1, #8]
   d64d8:	9305      	str	r3, [sp, #20]
   d64da:	a901      	add	r1, sp, #4
   d64dc:	f7fe ff14 	bl	d5308 <hal_i2c_request_ex>
}
   d64e0:	b007      	add	sp, #28
   d64e2:	f85d fb04 	ldr.w	pc, [sp], #4

000d64e6 <_ZN7TwoWire11requestFromEhjh>:
{
   d64e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d64e8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d64ea:	f88d 1000 	strb.w	r1, [sp]
   d64ee:	f04f 0164 	mov.w	r1, #100	; 0x64
   d64f2:	9103      	str	r1, [sp, #12]
   d64f4:	bf18      	it	ne
   d64f6:	2301      	movne	r3, #1
   d64f8:	4669      	mov	r1, sp
    size_ = size;
   d64fa:	9201      	str	r2, [sp, #4]
   d64fc:	f88d 3008 	strb.w	r3, [sp, #8]
   d6500:	f7ff ffda 	bl	d64b8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6504:	b005      	add	sp, #20
   d6506:	f85d fb04 	ldr.w	pc, [sp], #4

000d650a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d650a:	2301      	movs	r3, #1
   d650c:	f7ff bfeb 	b.w	d64e6 <_ZN7TwoWire11requestFromEhjh>

000d6510 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6510:	7c00      	ldrb	r0, [r0, #16]
   d6512:	2200      	movs	r2, #0
   d6514:	f7fe beb0 	b.w	d5278 <hal_i2c_begin_transmission>

000d6518 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d6518:	b2c9      	uxtb	r1, r1
   d651a:	f7ff bff9 	b.w	d6510 <_ZN7TwoWire17beginTransmissionEh>

000d651e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d651e:	7c00      	ldrb	r0, [r0, #16]
   d6520:	2200      	movs	r2, #0
   d6522:	f7fe beb1 	b.w	d5288 <hal_i2c_end_transmission>

000d6526 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d6526:	2101      	movs	r1, #1
   d6528:	f7ff bff9 	b.w	d651e <_ZN7TwoWire15endTransmissionEh>

000d652c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d652c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d652e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d6530:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6534:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6536:	2201      	movs	r2, #1
   d6538:	f04f 33ff 	mov.w	r3, #4294967295
   d653c:	f10d 0107 	add.w	r1, sp, #7
   d6540:	47a0      	blx	r4
}
   d6542:	b002      	add	sp, #8
   d6544:	bd10      	pop	{r4, pc}

000d6546 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d6546:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6548:	6803      	ldr	r3, [r0, #0]
   d654a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d654c:	f04f 33ff 	mov.w	r3, #4294967295
   d6550:	46a4      	mov	ip, r4
}
   d6552:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6556:	4760      	bx	ip

000d6558 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6558:	b513      	push	{r0, r1, r4, lr}
   d655a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d655c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d655e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d6562:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d6564:	f10d 0107 	add.w	r1, sp, #7
   d6568:	2201      	movs	r2, #1
   d656a:	47a0      	blx	r4
}
   d656c:	b002      	add	sp, #8
   d656e:	bd10      	pop	{r4, pc}

000d6570 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d6570:	4770      	bx	lr

000d6572 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6572:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6574:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d6576:	681a      	ldr	r2, [r3, #0]
   d6578:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d657a:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d657c:	da10      	bge.n	d65a0 <_ZN9TCPClient9connectedEv+0x2e>
   d657e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6582:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6586:	429a      	cmp	r2, r3
   d6588:	d10a      	bne.n	d65a0 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d658a:	6803      	ldr	r3, [r0, #0]
   d658c:	691b      	ldr	r3, [r3, #16]
   d658e:	4798      	blx	r3
        if (!rv) {
   d6590:	4604      	mov	r4, r0
   d6592:	b928      	cbnz	r0, d65a0 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d6594:	682b      	ldr	r3, [r5, #0]
   d6596:	4628      	mov	r0, r5
   d6598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d659a:	4798      	blx	r3
        rv = available();
   d659c:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d659e:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d65a0:	2001      	movs	r0, #1
   d65a2:	e7fc      	b.n	d659e <_ZN9TCPClient9connectedEv+0x2c>

000d65a4 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d65a4:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d65a6:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d65a8:	43c0      	mvns	r0, r0
   d65aa:	0fc0      	lsrs	r0, r0, #31
   d65ac:	4770      	bx	lr

000d65ae <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d65ae:	4770      	bx	lr

000d65b0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d65b0:	4b06      	ldr	r3, [pc, #24]	; (d65cc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d65b2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d65b4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d65b6:	f100 040c 	add.w	r4, r0, #12
	    ||
   d65ba:	d005      	beq.n	d65c8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d65bc:	4608      	mov	r0, r1
   d65be:	f000 fc4b 	bl	d6e58 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d65c2:	2800      	cmp	r0, #0
	return nullptr;
   d65c4:	bf08      	it	eq
   d65c6:	2400      	moveq	r4, #0
      }
   d65c8:	4620      	mov	r0, r4
   d65ca:	bd10      	pop	{r4, pc}
   d65cc:	000d7fb0 	.word	0x000d7fb0

000d65d0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d65d0:	b510      	push	{r4, lr}
   d65d2:	21ac      	movs	r1, #172	; 0xac
   d65d4:	4604      	mov	r4, r0
   d65d6:	f000 fc38 	bl	d6e4a <_ZdlPvj>
   d65da:	4620      	mov	r0, r4
   d65dc:	bd10      	pop	{r4, pc}

000d65de <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d65de:	f7fd bd5e 	b.w	d409e <_ZdlPv>

000d65e2 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d65e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d65e6:	f04f 0800 	mov.w	r8, #0
   d65ea:	b086      	sub	sp, #24
   d65ec:	461d      	mov	r5, r3
   d65ee:	f8c0 8004 	str.w	r8, [r0, #4]
   d65f2:	4604      	mov	r4, r0
   d65f4:	460e      	mov	r6, r1
   d65f6:	4617      	mov	r7, r2
    struct timeval tv = {};
   d65f8:	4641      	mov	r1, r8
   d65fa:	2210      	movs	r2, #16
   d65fc:	a802      	add	r0, sp, #8
   d65fe:	f001 fa31 	bl	d7a64 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6602:	1c6b      	adds	r3, r5, #1
   d6604:	d009      	beq.n	d661a <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d6606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d660a:	fbb5 f3f0 	udiv	r3, r5, r0
   d660e:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d6612:	fb00 5313 	mls	r3, r0, r3, r5
   d6616:	4358      	muls	r0, r3
   d6618:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d661a:	6960      	ldr	r0, [r4, #20]
   d661c:	2310      	movs	r3, #16
   d661e:	9300      	str	r3, [sp, #0]
   d6620:	6800      	ldr	r0, [r0, #0]
   d6622:	ab02      	add	r3, sp, #8
   d6624:	f241 0205 	movw	r2, #4101	; 0x1005
   d6628:	f640 71ff 	movw	r1, #4095	; 0xfff
   d662c:	f7fe fe74 	bl	d5318 <sock_setsockopt>
    if (ret < 0) {
   d6630:	2800      	cmp	r0, #0
   d6632:	da07      	bge.n	d6644 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d6634:	f7ff f816 	bl	d5664 <__errno>
   d6638:	6803      	ldr	r3, [r0, #0]
   d663a:	6063      	str	r3, [r4, #4]
        return 0;
   d663c:	2000      	movs	r0, #0
}
   d663e:	b006      	add	sp, #24
   d6640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d6644:	6960      	ldr	r0, [r4, #20]
   d6646:	2300      	movs	r3, #0
   d6648:	6800      	ldr	r0, [r0, #0]
   d664a:	463a      	mov	r2, r7
   d664c:	4631      	mov	r1, r6
   d664e:	f7fe fe83 	bl	d5358 <sock_send>
    if (ret < 0) {
   d6652:	1e03      	subs	r3, r0, #0
   d6654:	dbee      	blt.n	d6634 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d6656:	4618      	mov	r0, r3
   d6658:	e7f1      	b.n	d663e <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d665c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d665c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d665e:	6984      	ldr	r4, [r0, #24]
   d6660:	4b0a      	ldr	r3, [pc, #40]	; (d668c <_ZN9TCPClientD1Ev+0x30>)
   d6662:	6003      	str	r3, [r0, #0]
   d6664:	4605      	mov	r5, r0
   d6666:	b17c      	cbz	r4, d6688 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d6668:	6863      	ldr	r3, [r4, #4]
   d666a:	3b01      	subs	r3, #1
   d666c:	6063      	str	r3, [r4, #4]
   d666e:	b95b      	cbnz	r3, d6688 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d6670:	6823      	ldr	r3, [r4, #0]
   d6672:	4620      	mov	r0, r4
   d6674:	689b      	ldr	r3, [r3, #8]
   d6676:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6678:	68a3      	ldr	r3, [r4, #8]
   d667a:	3b01      	subs	r3, #1
   d667c:	60a3      	str	r3, [r4, #8]
   d667e:	b91b      	cbnz	r3, d6688 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d6680:	6823      	ldr	r3, [r4, #0]
   d6682:	4620      	mov	r0, r4
   d6684:	68db      	ldr	r3, [r3, #12]
   d6686:	4798      	blx	r3
   d6688:	4628      	mov	r0, r5
   d668a:	bd38      	pop	{r3, r4, r5, pc}
   d668c:	000d80a8 	.word	0x000d80a8

000d6690 <_ZN9TCPClientD0Ev>:
   d6690:	b510      	push	{r4, lr}
   d6692:	4604      	mov	r4, r0
   d6694:	f7ff ffe2 	bl	d665c <_ZN9TCPClientD1Ev>
   d6698:	4620      	mov	r0, r4
   d669a:	211c      	movs	r1, #28
   d669c:	f000 fbd5 	bl	d6e4a <_ZdlPvj>
   d66a0:	4620      	mov	r0, r4
   d66a2:	bd10      	pop	{r4, pc}

000d66a4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d66a4:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d66a6:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d66a8:	4b05      	ldr	r3, [pc, #20]	; (d66c0 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d66aa:	4604      	mov	r4, r0
   d66ac:	358c      	adds	r5, #140	; 0x8c
   d66ae:	f844 3b04 	str.w	r3, [r4], #4
   d66b2:	4606      	mov	r6, r0
   d66b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d66b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d66b8:	682b      	ldr	r3, [r5, #0]
   d66ba:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d66bc:	4630      	mov	r0, r6
   d66be:	bd70      	pop	{r4, r5, r6, pc}
   d66c0:	000d7fe0 	.word	0x000d7fe0

000d66c4 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d66c4:	b510      	push	{r4, lr}
   d66c6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d66c8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d66cc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d66d0:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d66d2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d66d4:	d005      	beq.n	d66e2 <_ZN9TCPClient4peekEv+0x1e>
   d66d6:	6963      	ldr	r3, [r4, #20]
   d66d8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d66dc:	4413      	add	r3, r2
   d66de:	7918      	ldrb	r0, [r3, #4]
}
   d66e0:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d66e2:	6803      	ldr	r3, [r0, #0]
   d66e4:	691b      	ldr	r3, [r3, #16]
   d66e6:	4798      	blx	r3
   d66e8:	2800      	cmp	r0, #0
   d66ea:	d1f4      	bne.n	d66d6 <_ZN9TCPClient4peekEv+0x12>
   d66ec:	f04f 30ff 	mov.w	r0, #4294967295
   d66f0:	e7f6      	b.n	d66e0 <_ZN9TCPClient4peekEv+0x1c>

000d66f2 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d66f2:	b510      	push	{r4, lr}
   d66f4:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d66f6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d66fa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d66fe:	429a      	cmp	r2, r3
int TCPClient::read() {
   d6700:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6702:	d008      	beq.n	d6716 <_ZN9TCPClient4readEv+0x24>
   d6704:	6963      	ldr	r3, [r4, #20]
   d6706:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d670a:	1c51      	adds	r1, r2, #1
   d670c:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d6710:	4413      	add	r3, r2
   d6712:	7918      	ldrb	r0, [r3, #4]
}
   d6714:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6716:	6803      	ldr	r3, [r0, #0]
   d6718:	691b      	ldr	r3, [r3, #16]
   d671a:	4798      	blx	r3
   d671c:	2800      	cmp	r0, #0
   d671e:	d1f1      	bne.n	d6704 <_ZN9TCPClient4readEv+0x12>
   d6720:	f04f 30ff 	mov.w	r0, #4294967295
   d6724:	e7f6      	b.n	d6714 <_ZN9TCPClient4readEv+0x22>

000d6726 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d6726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6728:	6943      	ldr	r3, [r0, #20]
   d672a:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d672c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6730:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6734:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d6736:	4605      	mov	r5, r0
   d6738:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d673a:	d016      	beq.n	d676a <_ZN9TCPClient4readEPhj+0x44>
   d673c:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d673e:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d6742:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d6746:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d6748:	42bc      	cmp	r4, r7
   d674a:	bf28      	it	cs
   d674c:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d674e:	3304      	adds	r3, #4
   d6750:	4622      	mov	r2, r4
   d6752:	4419      	add	r1, r3
   d6754:	4630      	mov	r0, r6
   d6756:	f001 f95d 	bl	d7a14 <memcpy>
   d675a:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d675c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6760:	4423      	add	r3, r4
   d6762:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d6766:	4620      	mov	r0, r4
   d6768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d676a:	6803      	ldr	r3, [r0, #0]
   d676c:	691b      	ldr	r3, [r3, #16]
   d676e:	4798      	blx	r3
   d6770:	2800      	cmp	r0, #0
   d6772:	d1e3      	bne.n	d673c <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d6774:	f04f 34ff 	mov.w	r4, #4294967295
   d6778:	e7f5      	b.n	d6766 <_ZN9TCPClient4readEPhj+0x40>

000d677a <_ZN9TCPClient12flush_bufferEv>:
   d677a:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d677c:	2300      	movs	r3, #0
   d677e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d6782:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d6784:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d6788:	4770      	bx	lr

000d678a <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d678a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d678e:	461f      	mov	r7, r3
    stop();
   d6790:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6792:	460c      	mov	r4, r1
    stop();
   d6794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6796:	b08a      	sub	sp, #40	; 0x28
   d6798:	4605      	mov	r5, r0
   d679a:	4616      	mov	r6, r2
    stop();
   d679c:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d679e:	7d23      	ldrb	r3, [r4, #20]
   d67a0:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d67a4:	2b04      	cmp	r3, #4
   d67a6:	bf0c      	ite	eq
   d67a8:	2002      	moveq	r0, #2
   d67aa:	200a      	movne	r0, #10
   d67ac:	2206      	movs	r2, #6
   d67ae:	2101      	movs	r1, #1
   d67b0:	f7fe fdda 	bl	d5368 <sock_socket>
   d67b4:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d67b8:	696b      	ldr	r3, [r5, #20]
   d67ba:	681b      	ldr	r3, [r3, #0]
   d67bc:	2b00      	cmp	r3, #0
   d67be:	da08      	bge.n	d67d2 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d67c0:	682b      	ldr	r3, [r5, #0]
   d67c2:	4628      	mov	r0, r5
   d67c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d67c6:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d67c8:	4798      	blx	r3
}
   d67ca:	4620      	mov	r0, r4
   d67cc:	b00a      	add	sp, #40	; 0x28
   d67ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d67d2:	4628      	mov	r0, r5
   d67d4:	f7ff ffd1 	bl	d677a <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d67d8:	b1b7      	cbz	r7, d6808 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d67da:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d67dc:	a903      	add	r1, sp, #12
   d67de:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d67e0:	9303      	str	r3, [sp, #12]
   d67e2:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d67e6:	f7fe fca7 	bl	d5138 <if_index_to_name>
   d67ea:	2800      	cmp	r0, #0
   d67ec:	d1e8      	bne.n	d67c0 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d67ee:	6968      	ldr	r0, [r5, #20]
   d67f0:	2306      	movs	r3, #6
   d67f2:	9300      	str	r3, [sp, #0]
   d67f4:	6800      	ldr	r0, [r0, #0]
   d67f6:	ab03      	add	r3, sp, #12
   d67f8:	f241 020b 	movw	r2, #4107	; 0x100b
   d67fc:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6800:	f7fe fd8a 	bl	d5318 <sock_setsockopt>
   d6804:	2800      	cmp	r0, #0
   d6806:	d1db      	bne.n	d67c0 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d6808:	221c      	movs	r2, #28
   d680a:	2100      	movs	r1, #0
   d680c:	a803      	add	r0, sp, #12
   d680e:	f001 f929 	bl	d7a64 <memset>
    if (ip.version() == 4) {
   d6812:	7d23      	ldrb	r3, [r4, #20]
   d6814:	2b04      	cmp	r3, #4
   d6816:	d11d      	bne.n	d6854 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d6818:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d681c:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d681e:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d6822:	f7fe fcd1 	bl	d51c8 <inet_htons>
   d6826:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d682a:	6860      	ldr	r0, [r4, #4]
   d682c:	f7fe fcc4 	bl	d51b8 <inet_htonl>
   d6830:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d6832:	696b      	ldr	r3, [r5, #20]
   d6834:	221c      	movs	r2, #28
   d6836:	6818      	ldr	r0, [r3, #0]
   d6838:	a903      	add	r1, sp, #12
   d683a:	f7fe fd7d 	bl	d5338 <sock_connect>
   d683e:	2800      	cmp	r0, #0
   d6840:	d1be      	bne.n	d67c0 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d6842:	3404      	adds	r4, #4
   d6844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6846:	696d      	ldr	r5, [r5, #20]
   d6848:	358c      	adds	r5, #140	; 0x8c
   d684a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d684c:	6823      	ldr	r3, [r4, #0]
   d684e:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d6850:	2401      	movs	r4, #1
   d6852:	e7ba      	b.n	d67ca <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d6854:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d6858:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d685a:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d685e:	f7fe fcb3 	bl	d51c8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6862:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d6864:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6868:	1d23      	adds	r3, r4, #4
   d686a:	f104 0714 	add.w	r7, r4, #20
   d686e:	6818      	ldr	r0, [r3, #0]
   d6870:	6859      	ldr	r1, [r3, #4]
   d6872:	4632      	mov	r2, r6
   d6874:	c203      	stmia	r2!, {r0, r1}
   d6876:	3308      	adds	r3, #8
   d6878:	42bb      	cmp	r3, r7
   d687a:	4616      	mov	r6, r2
   d687c:	d1f7      	bne.n	d686e <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d687e:	e7d8      	b.n	d6832 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d6880 <_ZN9TCPClient9availableEv>:
{
   d6880:	b530      	push	{r4, r5, lr}
   d6882:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d6884:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d6888:	b08b      	sub	sp, #44	; 0x2c
   d688a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d688c:	b12b      	cbz	r3, d689a <_ZN9TCPClient9availableEv+0x1a>
   d688e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d6892:	429a      	cmp	r2, r3
   d6894:	d101      	bne.n	d689a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d6896:	f7ff ff70 	bl	d677a <_ZN9TCPClient12flush_bufferEv>
   d689a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d689c:	6808      	ldr	r0, [r1, #0]
   d689e:	2800      	cmp	r0, #0
   d68a0:	db18      	blt.n	d68d4 <_ZN9TCPClient9availableEv+0x54>
   d68a2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d68a6:	2d7f      	cmp	r5, #127	; 0x7f
   d68a8:	d814      	bhi.n	d68d4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d68aa:	3104      	adds	r1, #4
   d68ac:	2308      	movs	r3, #8
   d68ae:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d68b2:	4429      	add	r1, r5
   d68b4:	f7fe fd48 	bl	d5348 <sock_recv>
            if (ret > 0) {
   d68b8:	2800      	cmp	r0, #0
   d68ba:	dd13      	ble.n	d68e4 <_ZN9TCPClient9availableEv+0x64>
   d68bc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d68be:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d68c2:	b90a      	cbnz	r2, d68c8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d68c4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d68c8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d68ca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d68ce:	4410      	add	r0, r2
   d68d0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d68d4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d68d6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d68da:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d68de:	1ac0      	subs	r0, r0, r3
   d68e0:	b00b      	add	sp, #44	; 0x2c
   d68e2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d68e4:	f7fe febe 	bl	d5664 <__errno>
   d68e8:	6803      	ldr	r3, [r0, #0]
   d68ea:	2b0b      	cmp	r3, #11
   d68ec:	d0f2      	beq.n	d68d4 <_ZN9TCPClient9availableEv+0x54>
   d68ee:	f7fe feb9 	bl	d5664 <__errno>
   d68f2:	6803      	ldr	r3, [r0, #0]
   d68f4:	2b0b      	cmp	r3, #11
   d68f6:	d0ed      	beq.n	d68d4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d68f8:	2320      	movs	r3, #32
   d68fa:	2500      	movs	r5, #0
   d68fc:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d6900:	f7fe feb0 	bl	d5664 <__errno>
   d6904:	6803      	ldr	r3, [r0, #0]
   d6906:	9301      	str	r3, [sp, #4]
   d6908:	4b08      	ldr	r3, [pc, #32]	; (d692c <_ZN9TCPClient9availableEv+0xac>)
   d690a:	4909      	ldr	r1, [pc, #36]	; (d6930 <_ZN9TCPClient9availableEv+0xb0>)
   d690c:	9300      	str	r3, [sp, #0]
   d690e:	aa02      	add	r2, sp, #8
   d6910:	462b      	mov	r3, r5
   d6912:	2032      	movs	r0, #50	; 0x32
   d6914:	f7fe fdb8 	bl	d5488 <log_message>
                    sock_close(d_->sock);
   d6918:	6963      	ldr	r3, [r4, #20]
   d691a:	6818      	ldr	r0, [r3, #0]
   d691c:	f7fe fd04 	bl	d5328 <sock_close>
   d6920:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d6922:	f04f 32ff 	mov.w	r2, #4294967295
   d6926:	601a      	str	r2, [r3, #0]
   d6928:	e7d4      	b.n	d68d4 <_ZN9TCPClient9availableEv+0x54>
   d692a:	bf00      	nop
   d692c:	000d8074 	.word	0x000d8074
   d6930:	000d7f80 	.word	0x000d7f80

000d6934 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d6934:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d6936:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d6938:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d693a:	6818      	ldr	r0, [r3, #0]
   d693c:	2800      	cmp	r0, #0
   d693e:	db01      	blt.n	d6944 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d6940:	f7fe fcf2 	bl	d5328 <sock_close>
   d6944:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d6946:	f04f 32ff 	mov.w	r2, #4294967295
   d694a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d694c:	6960      	ldr	r0, [r4, #20]
   d694e:	2211      	movs	r2, #17
   d6950:	2100      	movs	r1, #0
   d6952:	308c      	adds	r0, #140	; 0x8c
   d6954:	f001 f886 	bl	d7a64 <memset>
    flush_buffer();
   d6958:	4620      	mov	r0, r4
}
   d695a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d695e:	f7ff bf0c 	b.w	d677a <_ZN9TCPClient12flush_bufferEv>

000d6962 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d6962:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d6964:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d6966:	4604      	mov	r4, r0
          total(0) {
   d6968:	6001      	str	r1, [r0, #0]
   d696a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d696e:	3088      	adds	r0, #136	; 0x88
   d6970:	f7ff fc02 	bl	d6178 <_ZN9IPAddressC1Ev>
}
   d6974:	4620      	mov	r0, r4
   d6976:	bd10      	pop	{r4, pc}

000d6978 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d6978:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d697a:	2300      	movs	r3, #0
   d697c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6980:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d6984:	4a0e      	ldr	r2, [pc, #56]	; (d69c0 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d6986:	6103      	str	r3, [r0, #16]
   d6988:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d698a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d698c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d698e:	20ac      	movs	r0, #172	; 0xac
   d6990:	9101      	str	r1, [sp, #4]
   d6992:	f7fd fb80 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d6996:	1e05      	subs	r5, r0, #0
   d6998:	f105 060c 	add.w	r6, r5, #12
   d699c:	d008      	beq.n	d69b0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d699e:	2301      	movs	r3, #1
   d69a0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d69a4:	4b07      	ldr	r3, [pc, #28]	; (d69c4 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d69a6:	9901      	ldr	r1, [sp, #4]
   d69a8:	602b      	str	r3, [r5, #0]
   d69aa:	4630      	mov	r0, r6
   d69ac:	f7ff ffd9 	bl	d6962 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d69b0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d69b2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d69b6:	f7ff fee0 	bl	d677a <_ZN9TCPClient12flush_bufferEv>
}
   d69ba:	b002      	add	sp, #8
   d69bc:	bd70      	pop	{r4, r5, r6, pc}
   d69be:	bf00      	nop
   d69c0:	000d80a8 	.word	0x000d80a8
   d69c4:	000d808c 	.word	0x000d808c

000d69c8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d69c8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d69ca:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d69ce:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d69d0:	f7ff ffd2 	bl	d6978 <_ZN9TCPClientC1Ei>
}
   d69d4:	4620      	mov	r0, r4
   d69d6:	bd10      	pop	{r4, pc}

000d69d8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d69d8:	b510      	push	{r4, lr}
   d69da:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d69dc:	6800      	ldr	r0, [r0, #0]
   d69de:	2800      	cmp	r0, #0
   d69e0:	db01      	blt.n	d69e6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d69e2:	f7fe fca1 	bl	d5328 <sock_close>
    }
}
   d69e6:	4620      	mov	r0, r4
   d69e8:	bd10      	pop	{r4, pc}

000d69ea <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d69ea:	300c      	adds	r0, #12
   d69ec:	f7ff bff4 	b.w	d69d8 <_ZN9TCPClient4DataD1Ev>

000d69f0 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d69f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d69f4:	4698      	mov	r8, r3
    stop();
   d69f6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d69f8:	b093      	sub	sp, #76	; 0x4c
   d69fa:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d69fc:	2400      	movs	r4, #0
    stop();
   d69fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6a00:	4606      	mov	r6, r0
   d6a02:	4617      	mov	r7, r2
    stop();
   d6a04:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6a06:	4628      	mov	r0, r5
   d6a08:	466b      	mov	r3, sp
   d6a0a:	4622      	mov	r2, r4
   d6a0c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d6a0e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6a10:	f7fe fb6a 	bl	d50e8 <netdb_getaddrinfo>
   d6a14:	4605      	mov	r5, r0
   d6a16:	2800      	cmp	r0, #0
   d6a18:	d163      	bne.n	d6ae2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d6a1a:	9b00      	ldr	r3, [sp, #0]
   d6a1c:	2b00      	cmp	r3, #0
   d6a1e:	d04b      	beq.n	d6ab8 <_ZN9TCPClient7connectEPKctm+0xc8>
   d6a20:	695b      	ldr	r3, [r3, #20]
   d6a22:	2b00      	cmp	r3, #0
   d6a24:	d048      	beq.n	d6ab8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d6a26:	a806      	add	r0, sp, #24
   d6a28:	f7ff fba6 	bl	d6178 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6a2c:	9b00      	ldr	r3, [sp, #0]
   d6a2e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d6a30:	7863      	ldrb	r3, [r4, #1]
   d6a32:	2b02      	cmp	r3, #2
   d6a34:	d104      	bne.n	d6a40 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6a36:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6a38:	a806      	add	r0, sp, #24
   d6a3a:	f7ff f845 	bl	d5ac8 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d6a3e:	e026      	b.n	d6a8e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d6a40:	2b0a      	cmp	r3, #10
   d6a42:	d124      	bne.n	d6a8e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d6a44:	2211      	movs	r2, #17
   d6a46:	4629      	mov	r1, r5
   d6a48:	a801      	add	r0, sp, #4
   d6a4a:	f001 f80b 	bl	d7a64 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6a4e:	68a3      	ldr	r3, [r4, #8]
   d6a50:	2b00      	cmp	r3, #0
   d6a52:	d038      	beq.n	d6ac6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6a54:	f104 0308 	add.w	r3, r4, #8
   d6a58:	f10d 0c04 	add.w	ip, sp, #4
   d6a5c:	3418      	adds	r4, #24
   d6a5e:	6818      	ldr	r0, [r3, #0]
   d6a60:	6859      	ldr	r1, [r3, #4]
   d6a62:	4662      	mov	r2, ip
   d6a64:	c203      	stmia	r2!, {r0, r1}
   d6a66:	3308      	adds	r3, #8
   d6a68:	42a3      	cmp	r3, r4
   d6a6a:	4694      	mov	ip, r2
   d6a6c:	d1f7      	bne.n	d6a5e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d6a6e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6a70:	a901      	add	r1, sp, #4
   d6a72:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d6a74:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6a78:	f7ff fb8c 	bl	d6194 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d6a7c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d6a80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d6a84:	ac07      	add	r4, sp, #28
   d6a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6a88:	f8dc 3000 	ldr.w	r3, [ip]
   d6a8c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d6a8e:	a806      	add	r0, sp, #24
   d6a90:	f7ff fb92 	bl	d61b8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6a94:	b180      	cbz	r0, d6ab8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d6a96:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d6a98:	ad07      	add	r5, sp, #28
   d6a9a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d6a9e:	4b12      	ldr	r3, [pc, #72]	; (d6ae8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d6aa0:	930c      	str	r3, [sp, #48]	; 0x30
   d6aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6aa4:	ac0d      	add	r4, sp, #52	; 0x34
   d6aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6aa8:	682b      	ldr	r3, [r5, #0]
   d6aaa:	7023      	strb	r3, [r4, #0]
   d6aac:	463a      	mov	r2, r7
   d6aae:	4643      	mov	r3, r8
   d6ab0:	a90c      	add	r1, sp, #48	; 0x30
   d6ab2:	4630      	mov	r0, r6
   d6ab4:	47c8      	blx	r9
   d6ab6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d6ab8:	9800      	ldr	r0, [sp, #0]
   d6aba:	f7fe fb0d 	bl	d50d8 <netdb_freeaddrinfo>
}
   d6abe:	4628      	mov	r0, r5
   d6ac0:	b013      	add	sp, #76	; 0x4c
   d6ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6ac6:	68e3      	ldr	r3, [r4, #12]
   d6ac8:	2b00      	cmp	r3, #0
   d6aca:	d1c3      	bne.n	d6a54 <_ZN9TCPClient7connectEPKctm+0x64>
   d6acc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6ad0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d6ad4:	f7fe fb70 	bl	d51b8 <inet_htonl>
   d6ad8:	4581      	cmp	r9, r0
   d6ada:	d1bb      	bne.n	d6a54 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d6adc:	f104 0114 	add.w	r1, r4, #20
   d6ae0:	e7aa      	b.n	d6a38 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6ae2:	4625      	mov	r5, r4
   d6ae4:	e7e8      	b.n	d6ab8 <_ZN9TCPClient7connectEPKctm+0xc8>
   d6ae6:	bf00      	nop
   d6ae8:	000d7fe0 	.word	0x000d7fe0

000d6aec <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6aec:	2200      	movs	r2, #0
   d6aee:	6840      	ldr	r0, [r0, #4]
   d6af0:	4611      	mov	r1, r2
   d6af2:	f7fe bd27 	b.w	d5544 <network_ready>

000d6af6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6af6:	2200      	movs	r2, #0
   d6af8:	6840      	ldr	r0, [r0, #4]
   d6afa:	4611      	mov	r1, r2
   d6afc:	f7fe bd42 	b.w	d5584 <network_listening>

000d6b00 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6b00:	2200      	movs	r2, #0
   d6b02:	6840      	ldr	r0, [r0, #4]
   d6b04:	4611      	mov	r1, r2
   d6b06:	f7fe bd4d 	b.w	d55a4 <network_get_listen_timeout>

000d6b0a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6b0a:	6840      	ldr	r0, [r0, #4]
   d6b0c:	2200      	movs	r2, #0
   d6b0e:	f7fe bd41 	b.w	d5594 <network_set_listen_timeout>

000d6b12 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6b12:	6840      	ldr	r0, [r0, #4]
   d6b14:	2200      	movs	r2, #0
   d6b16:	f081 0101 	eor.w	r1, r1, #1
   d6b1a:	f7fe bd2b 	b.w	d5574 <network_listen>

000d6b1e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6b1e:	2300      	movs	r3, #0
   d6b20:	6840      	ldr	r0, [r0, #4]
   d6b22:	461a      	mov	r2, r3
   d6b24:	4619      	mov	r1, r3
   d6b26:	f7fe bd1d 	b.w	d5564 <network_off>

000d6b2a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6b2a:	2200      	movs	r2, #0
   d6b2c:	6840      	ldr	r0, [r0, #4]
   d6b2e:	4611      	mov	r1, r2
   d6b30:	f7fe bcf8 	b.w	d5524 <network_connecting>

000d6b34 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6b34:	6840      	ldr	r0, [r0, #4]
   d6b36:	2200      	movs	r2, #0
   d6b38:	2102      	movs	r1, #2
   d6b3a:	f7fe bcfb 	b.w	d5534 <network_disconnect>

000d6b3e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6b3e:	2300      	movs	r3, #0
   d6b40:	6840      	ldr	r0, [r0, #4]
   d6b42:	461a      	mov	r2, r3
   d6b44:	f7fe bce6 	b.w	d5514 <network_connect>

000d6b48 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6b48:	4b02      	ldr	r3, [pc, #8]	; (d6b54 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6b4a:	2204      	movs	r2, #4
   d6b4c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6b4e:	4a02      	ldr	r2, [pc, #8]	; (d6b58 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6b50:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d6b52:	4770      	bx	lr
   d6b54:	2003e7c4 	.word	0x2003e7c4
   d6b58:	000d80f4 	.word	0x000d80f4

000d6b5c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6b5c:	2300      	movs	r3, #0
   d6b5e:	6840      	ldr	r0, [r0, #4]
   d6b60:	461a      	mov	r2, r3
   d6b62:	f7fe bcd7 	b.w	d5514 <network_connect>

000d6b66 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6b66:	6840      	ldr	r0, [r0, #4]
   d6b68:	2200      	movs	r2, #0
   d6b6a:	2102      	movs	r1, #2
   d6b6c:	f7fe bce2 	b.w	d5534 <network_disconnect>

000d6b70 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6b70:	2200      	movs	r2, #0
   d6b72:	6840      	ldr	r0, [r0, #4]
   d6b74:	4611      	mov	r1, r2
   d6b76:	f7fe bcd5 	b.w	d5524 <network_connecting>

000d6b7a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6b7a:	2200      	movs	r2, #0
   d6b7c:	6840      	ldr	r0, [r0, #4]
   d6b7e:	4611      	mov	r1, r2
   d6b80:	f7fe bce0 	b.w	d5544 <network_ready>

000d6b84 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6b84:	2300      	movs	r3, #0
   d6b86:	6840      	ldr	r0, [r0, #4]
   d6b88:	461a      	mov	r2, r3
   d6b8a:	4619      	mov	r1, r3
   d6b8c:	f7fe bce2 	b.w	d5554 <network_on>

000d6b90 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6b90:	2300      	movs	r3, #0
   d6b92:	6840      	ldr	r0, [r0, #4]
   d6b94:	461a      	mov	r2, r3
   d6b96:	4619      	mov	r1, r3
   d6b98:	f7fe bce4 	b.w	d5564 <network_off>

000d6b9c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6b9c:	6840      	ldr	r0, [r0, #4]
   d6b9e:	2100      	movs	r1, #0
   d6ba0:	f7fe bd08 	b.w	d55b4 <network_is_on>

000d6ba4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6ba4:	6840      	ldr	r0, [r0, #4]
   d6ba6:	2100      	movs	r1, #0
   d6ba8:	f7fe bd0c 	b.w	d55c4 <network_is_off>

000d6bac <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6bac:	6840      	ldr	r0, [r0, #4]
   d6bae:	2200      	movs	r2, #0
   d6bb0:	f081 0101 	eor.w	r1, r1, #1
   d6bb4:	f7fe bcde 	b.w	d5574 <network_listen>

000d6bb8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6bb8:	6840      	ldr	r0, [r0, #4]
   d6bba:	2200      	movs	r2, #0
   d6bbc:	f7fe bcea 	b.w	d5594 <network_set_listen_timeout>

000d6bc0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6bc0:	2200      	movs	r2, #0
   d6bc2:	6840      	ldr	r0, [r0, #4]
   d6bc4:	4611      	mov	r1, r2
   d6bc6:	f7fe bced 	b.w	d55a4 <network_get_listen_timeout>

000d6bca <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6bca:	2200      	movs	r2, #0
   d6bcc:	6840      	ldr	r0, [r0, #4]
   d6bce:	4611      	mov	r1, r2
   d6bd0:	f7fe bcd8 	b.w	d5584 <network_listening>

000d6bd4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6bd8:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6bda:	b095      	sub	sp, #84	; 0x54
   d6bdc:	4616      	mov	r6, r2
   d6bde:	460d      	mov	r5, r1
   d6be0:	4607      	mov	r7, r0
    IPAddress addr;
   d6be2:	f7ff fac9 	bl	d6178 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6be6:	4621      	mov	r1, r4
   d6be8:	2218      	movs	r2, #24
   d6bea:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6bec:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6bee:	f000 ff39 	bl	d7a64 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6bf2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6bf4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6bf8:	4621      	mov	r1, r4
   d6bfa:	466b      	mov	r3, sp
   d6bfc:	aa0c      	add	r2, sp, #48	; 0x30
   d6bfe:	4630      	mov	r0, r6
   d6c00:	f7fe fa72 	bl	d50e8 <netdb_getaddrinfo>
    if (!r) {
   d6c04:	4604      	mov	r4, r0
   d6c06:	2800      	cmp	r0, #0
   d6c08:	d14c      	bne.n	d6ca4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6c0a:	4602      	mov	r2, r0
   d6c0c:	2101      	movs	r1, #1
   d6c0e:	6868      	ldr	r0, [r5, #4]
   d6c10:	f7fe fc98 	bl	d5544 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c14:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6c16:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c18:	4622      	mov	r2, r4
   d6c1a:	6868      	ldr	r0, [r5, #4]
   d6c1c:	f7fe fc92 	bl	d5544 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c20:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c22:	4681      	mov	r9, r0
        bool ok = false;
   d6c24:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c26:	2e00      	cmp	r6, #0
   d6c28:	d03c      	beq.n	d6ca4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6c2a:	2900      	cmp	r1, #0
   d6c2c:	d13a      	bne.n	d6ca4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6c2e:	6873      	ldr	r3, [r6, #4]
   d6c30:	2b02      	cmp	r3, #2
   d6c32:	d003      	beq.n	d6c3c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6c34:	2b0a      	cmp	r3, #10
   d6c36:	d011      	beq.n	d6c5c <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c38:	69f6      	ldr	r6, [r6, #28]
   d6c3a:	e7f4      	b.n	d6c26 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6c3c:	f1b8 0f00 	cmp.w	r8, #0
   d6c40:	d00a      	beq.n	d6c58 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6c42:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d6c44:	a806      	add	r0, sp, #24
   d6c46:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d6c48:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d6c4a:	f7ff fad9 	bl	d6200 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6c50:	1d3c      	adds	r4, r7, #4
   d6c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c54:	682b      	ldr	r3, [r5, #0]
   d6c56:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d6c58:	4641      	mov	r1, r8
   d6c5a:	e7ed      	b.n	d6c38 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6c5c:	f1b9 0f00 	cmp.w	r9, #0
   d6c60:	d101      	bne.n	d6c66 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6c62:	4649      	mov	r1, r9
   d6c64:	e7e8      	b.n	d6c38 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6c66:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6c68:	2210      	movs	r2, #16
   d6c6a:	a801      	add	r0, sp, #4
   d6c6c:	f000 fefa 	bl	d7a64 <memset>
                    a.v = 6;
   d6c70:	2306      	movs	r3, #6
   d6c72:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6c76:	ad01      	add	r5, sp, #4
   d6c78:	f104 0308 	add.w	r3, r4, #8
   d6c7c:	3418      	adds	r4, #24
   d6c7e:	6818      	ldr	r0, [r3, #0]
   d6c80:	6859      	ldr	r1, [r3, #4]
   d6c82:	462a      	mov	r2, r5
   d6c84:	c203      	stmia	r2!, {r0, r1}
   d6c86:	3308      	adds	r3, #8
   d6c88:	42a3      	cmp	r3, r4
   d6c8a:	4615      	mov	r5, r2
   d6c8c:	d1f7      	bne.n	d6c7e <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6c8e:	a901      	add	r1, sp, #4
   d6c90:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6c92:	ad07      	add	r5, sp, #28
   d6c94:	f7ff fa7e 	bl	d6194 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6c9a:	1d3c      	adds	r4, r7, #4
   d6c9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c9e:	682b      	ldr	r3, [r5, #0]
   d6ca0:	7023      	strb	r3, [r4, #0]
   d6ca2:	e7de      	b.n	d6c62 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6ca4:	9800      	ldr	r0, [sp, #0]
   d6ca6:	f7fe fa17 	bl	d50d8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6caa:	4638      	mov	r0, r7
   d6cac:	b015      	add	sp, #84	; 0x54
   d6cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6cb4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6cb4:	4b02      	ldr	r3, [pc, #8]	; (d6cc0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6cb6:	4a03      	ldr	r2, [pc, #12]	; (d6cc4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6cb8:	601a      	str	r2, [r3, #0]
   d6cba:	2200      	movs	r2, #0
   d6cbc:	605a      	str	r2, [r3, #4]

} // spark
   d6cbe:	4770      	bx	lr
   d6cc0:	2003e7cc 	.word	0x2003e7cc
   d6cc4:	000d8130 	.word	0x000d8130

000d6cc8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6cc8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6cca:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6ccc:	d902      	bls.n	d6cd4 <pinAvailable+0xc>
    return false;
   d6cce:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6cd0:	b002      	add	sp, #8
   d6cd2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6cd4:	f1a0 030b 	sub.w	r3, r0, #11
   d6cd8:	2b02      	cmp	r3, #2
   d6cda:	d81a      	bhi.n	d6d12 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6cdc:	4c17      	ldr	r4, [pc, #92]	; (d6d3c <pinAvailable+0x74>)
   d6cde:	7821      	ldrb	r1, [r4, #0]
   d6ce0:	f3bf 8f5b 	dmb	ish
   d6ce4:	f011 0101 	ands.w	r1, r1, #1
   d6ce8:	d10b      	bne.n	d6d02 <pinAvailable+0x3a>
   d6cea:	4620      	mov	r0, r4
   d6cec:	9101      	str	r1, [sp, #4]
   d6cee:	f7fd f9d8 	bl	d40a2 <__cxa_guard_acquire>
   d6cf2:	9901      	ldr	r1, [sp, #4]
   d6cf4:	b128      	cbz	r0, d6d02 <pinAvailable+0x3a>
   d6cf6:	4812      	ldr	r0, [pc, #72]	; (d6d40 <pinAvailable+0x78>)
   d6cf8:	f7fe fd08 	bl	d570c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6cfc:	4620      	mov	r0, r4
   d6cfe:	f7fd f9d5 	bl	d40ac <__cxa_guard_release>
   d6d02:	4b0f      	ldr	r3, [pc, #60]	; (d6d40 <pinAvailable+0x78>)
   d6d04:	7818      	ldrb	r0, [r3, #0]
   d6d06:	f7fe fb67 	bl	d53d8 <hal_spi_is_enabled>
   d6d0a:	2800      	cmp	r0, #0
   d6d0c:	d1df      	bne.n	d6cce <pinAvailable+0x6>
  return true; // 'pin' is available
   d6d0e:	2001      	movs	r0, #1
   d6d10:	e7de      	b.n	d6cd0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6d12:	2801      	cmp	r0, #1
   d6d14:	d809      	bhi.n	d6d2a <pinAvailable+0x62>
   d6d16:	f000 f86b 	bl	d6df0 <_Z19__fetch_global_Wirev>
   d6d1a:	2100      	movs	r1, #0
   d6d1c:	7c00      	ldrb	r0, [r0, #16]
   d6d1e:	f7fe fae3 	bl	d52e8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6d22:	f080 0001 	eor.w	r0, r0, #1
   d6d26:	b2c0      	uxtb	r0, r0
   d6d28:	e7d2      	b.n	d6cd0 <pinAvailable+0x8>
   d6d2a:	3809      	subs	r0, #9
   d6d2c:	2801      	cmp	r0, #1
   d6d2e:	d8ee      	bhi.n	d6d0e <pinAvailable+0x46>
   d6d30:	f7ff fb50 	bl	d63d4 <_Z22__fetch_global_Serial1v>
   d6d34:	7c00      	ldrb	r0, [r0, #16]
   d6d36:	f7fe fa7f 	bl	d5238 <hal_usart_is_enabled>
   d6d3a:	e7f2      	b.n	d6d22 <pinAvailable+0x5a>
   d6d3c:	2003e644 	.word	0x2003e644
   d6d40:	2003e648 	.word	0x2003e648

000d6d44 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6d44:	2823      	cmp	r0, #35	; 0x23
{
   d6d46:	b538      	push	{r3, r4, r5, lr}
   d6d48:	4604      	mov	r4, r0
   d6d4a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6d4c:	d80a      	bhi.n	d6d64 <pinMode+0x20>
   d6d4e:	29ff      	cmp	r1, #255	; 0xff
   d6d50:	d008      	beq.n	d6d64 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6d52:	f7ff ffb9 	bl	d6cc8 <pinAvailable>
   d6d56:	b128      	cbz	r0, d6d64 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6d58:	4629      	mov	r1, r5
   d6d5a:	4620      	mov	r0, r4
}
   d6d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6d60:	f7fe b9ca 	b.w	d50f8 <HAL_Pin_Mode>
}
   d6d64:	bd38      	pop	{r3, r4, r5, pc}

000d6d66 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6d66:	b538      	push	{r3, r4, r5, lr}
   d6d68:	4604      	mov	r4, r0
   d6d6a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6d6c:	f7fe f9cc 	bl	d5108 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6d70:	28ff      	cmp	r0, #255	; 0xff
   d6d72:	d010      	beq.n	d6d96 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6d74:	2806      	cmp	r0, #6
   d6d76:	d804      	bhi.n	d6d82 <digitalWrite+0x1c>
   d6d78:	234d      	movs	r3, #77	; 0x4d
   d6d7a:	fa23 f000 	lsr.w	r0, r3, r0
   d6d7e:	07c3      	lsls	r3, r0, #31
   d6d80:	d409      	bmi.n	d6d96 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6d82:	4620      	mov	r0, r4
   d6d84:	f7ff ffa0 	bl	d6cc8 <pinAvailable>
   d6d88:	b128      	cbz	r0, d6d96 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6d8a:	4629      	mov	r1, r5
   d6d8c:	4620      	mov	r0, r4
}
   d6d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6d92:	f7fe b9c1 	b.w	d5118 <HAL_GPIO_Write>
}
   d6d96:	bd38      	pop	{r3, r4, r5, pc}

000d6d98 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6d98:	b510      	push	{r4, lr}
   d6d9a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6d9c:	f7fe f9b4 	bl	d5108 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d6da0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d6da2:	b2db      	uxtb	r3, r3
   d6da4:	2b01      	cmp	r3, #1
   d6da6:	d908      	bls.n	d6dba <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6da8:	4620      	mov	r0, r4
   d6daa:	f7ff ff8d 	bl	d6cc8 <pinAvailable>
   d6dae:	b120      	cbz	r0, d6dba <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6db0:	4620      	mov	r0, r4
}
   d6db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d6db6:	f7fe b9b7 	b.w	d5128 <HAL_GPIO_Read>
}
   d6dba:	2000      	movs	r0, #0
   d6dbc:	bd10      	pop	{r4, pc}
	...

000d6dc0 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6dc0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6dc2:	2300      	movs	r3, #0
   d6dc4:	2520      	movs	r5, #32
   d6dc6:	8043      	strh	r3, [r0, #2]
   d6dc8:	2314      	movs	r3, #20
{
   d6dca:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6dcc:	8003      	strh	r3, [r0, #0]
   d6dce:	6085      	str	r5, [r0, #8]
   d6dd0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6dd2:	4906      	ldr	r1, [pc, #24]	; (d6dec <_Z17acquireWireBufferv+0x2c>)
   d6dd4:	4628      	mov	r0, r5
   d6dd6:	f000 f83c 	bl	d6e52 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6dda:	4904      	ldr	r1, [pc, #16]	; (d6dec <_Z17acquireWireBufferv+0x2c>)
	};
   d6ddc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6dde:	4628      	mov	r0, r5
   d6de0:	f000 f837 	bl	d6e52 <_ZnajRKSt9nothrow_t>
	};
   d6de4:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6de6:	4620      	mov	r0, r4
   d6de8:	bd38      	pop	{r3, r4, r5, pc}
   d6dea:	bf00      	nop
   d6dec:	000d8164 	.word	0x000d8164

000d6df0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6df0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6df2:	4d0f      	ldr	r5, [pc, #60]	; (d6e30 <_Z19__fetch_global_Wirev+0x40>)
   d6df4:	7829      	ldrb	r1, [r5, #0]
   d6df6:	f3bf 8f5b 	dmb	ish
   d6dfa:	f011 0401 	ands.w	r4, r1, #1
{
   d6dfe:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6e00:	d113      	bne.n	d6e2a <_Z19__fetch_global_Wirev+0x3a>
   d6e02:	4628      	mov	r0, r5
   d6e04:	f7fd f94d 	bl	d40a2 <__cxa_guard_acquire>
   d6e08:	b178      	cbz	r0, d6e2a <_Z19__fetch_global_Wirev+0x3a>
   d6e0a:	a801      	add	r0, sp, #4
   d6e0c:	f7ff ffd8 	bl	d6dc0 <_Z17acquireWireBufferv>
   d6e10:	aa01      	add	r2, sp, #4
   d6e12:	4621      	mov	r1, r4
   d6e14:	4807      	ldr	r0, [pc, #28]	; (d6e34 <_Z19__fetch_global_Wirev+0x44>)
   d6e16:	f7ff fb33 	bl	d6480 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6e1a:	4628      	mov	r0, r5
   d6e1c:	f7fd f946 	bl	d40ac <__cxa_guard_release>
   d6e20:	4a05      	ldr	r2, [pc, #20]	; (d6e38 <_Z19__fetch_global_Wirev+0x48>)
   d6e22:	4906      	ldr	r1, [pc, #24]	; (d6e3c <_Z19__fetch_global_Wirev+0x4c>)
   d6e24:	4803      	ldr	r0, [pc, #12]	; (d6e34 <_Z19__fetch_global_Wirev+0x44>)
   d6e26:	f000 f80b 	bl	d6e40 <__aeabi_atexit>
	return wire;
}
   d6e2a:	4802      	ldr	r0, [pc, #8]	; (d6e34 <_Z19__fetch_global_Wirev+0x44>)
   d6e2c:	b007      	add	sp, #28
   d6e2e:	bd30      	pop	{r4, r5, pc}
   d6e30:	2003e7d8 	.word	0x2003e7d8
   d6e34:	2003e7dc 	.word	0x2003e7dc
   d6e38:	2003e144 	.word	0x2003e144
   d6e3c:	000d6429 	.word	0x000d6429

000d6e40 <__aeabi_atexit>:
   d6e40:	460b      	mov	r3, r1
   d6e42:	4601      	mov	r1, r0
   d6e44:	4618      	mov	r0, r3
   d6e46:	f000 bdc3 	b.w	d79d0 <__cxa_atexit>

000d6e4a <_ZdlPvj>:
   d6e4a:	f7fd b928 	b.w	d409e <_ZdlPv>

000d6e4e <_ZnwjRKSt9nothrow_t>:
   d6e4e:	f7fd b922 	b.w	d4096 <_Znwj>

000d6e52 <_ZnajRKSt9nothrow_t>:
   d6e52:	f7fd b922 	b.w	d409a <_Znaj>
	...

000d6e58 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d6e58:	4901      	ldr	r1, [pc, #4]	; (d6e60 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d6e5a:	f000 b8f9 	b.w	d7050 <_ZNKSt9type_infoeqERKS_>
   d6e5e:	bf00      	nop
   d6e60:	000d8180 	.word	0x000d8180

000d6e64 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d6e64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6e66:	2400      	movs	r4, #0
   d6e68:	2310      	movs	r3, #16
   d6e6a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d6e6e:	6803      	ldr	r3, [r0, #0]
   d6e70:	9400      	str	r4, [sp, #0]
   d6e72:	699e      	ldr	r6, [r3, #24]
   d6e74:	f88d 4004 	strb.w	r4, [sp, #4]
   d6e78:	4615      	mov	r5, r2
   d6e7a:	466b      	mov	r3, sp
   d6e7c:	6812      	ldr	r2, [r2, #0]
   d6e7e:	47b0      	blx	r6
   d6e80:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d6e84:	f003 0306 	and.w	r3, r3, #6
   d6e88:	2b06      	cmp	r3, #6
   d6e8a:	bf03      	ittte	eq
   d6e8c:	9b00      	ldreq	r3, [sp, #0]
   d6e8e:	602b      	streq	r3, [r5, #0]
   d6e90:	2001      	moveq	r0, #1
   d6e92:	4620      	movne	r0, r4
   d6e94:	b004      	add	sp, #16
   d6e96:	bd70      	pop	{r4, r5, r6, pc}

000d6e98 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d6e98:	9800      	ldr	r0, [sp, #0]
   d6e9a:	4290      	cmp	r0, r2
   d6e9c:	bf14      	ite	ne
   d6e9e:	2001      	movne	r0, #1
   d6ea0:	2006      	moveq	r0, #6
   d6ea2:	4770      	bx	lr

000d6ea4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d6ea4:	b510      	push	{r4, lr}
   d6ea6:	4b03      	ldr	r3, [pc, #12]	; (d6eb4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d6ea8:	6003      	str	r3, [r0, #0]
   d6eaa:	4604      	mov	r4, r0
   d6eac:	f000 f8cd 	bl	d704a <_ZNSt9type_infoD1Ev>
   d6eb0:	4620      	mov	r0, r4
   d6eb2:	bd10      	pop	{r4, pc}
   d6eb4:	000d81c0 	.word	0x000d81c0

000d6eb8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d6eb8:	b510      	push	{r4, lr}
   d6eba:	4604      	mov	r4, r0
   d6ebc:	f7ff fff2 	bl	d6ea4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6ec0:	4620      	mov	r0, r4
   d6ec2:	2108      	movs	r1, #8
   d6ec4:	f7ff ffc1 	bl	d6e4a <_ZdlPvj>
   d6ec8:	4620      	mov	r0, r4
   d6eca:	bd10      	pop	{r4, pc}

000d6ecc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d6ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6ed0:	461f      	mov	r7, r3
   d6ed2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d6ed6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d6eda:	4598      	cmp	r8, r3
   d6edc:	4606      	mov	r6, r0
   d6ede:	4615      	mov	r5, r2
   d6ee0:	d107      	bne.n	d6ef2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6ee2:	9907      	ldr	r1, [sp, #28]
   d6ee4:	f000 f8b4 	bl	d7050 <_ZNKSt9type_infoeqERKS_>
   d6ee8:	b118      	cbz	r0, d6ef2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6eea:	7165      	strb	r5, [r4, #5]
   d6eec:	2000      	movs	r0, #0
   d6eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6ef2:	4639      	mov	r1, r7
   d6ef4:	4630      	mov	r0, r6
   d6ef6:	f000 f8ab 	bl	d7050 <_ZNKSt9type_infoeqERKS_>
   d6efa:	2800      	cmp	r0, #0
   d6efc:	d0f6      	beq.n	d6eec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d6efe:	2301      	movs	r3, #1
   d6f00:	f8c4 8000 	str.w	r8, [r4]
   d6f04:	7125      	strb	r5, [r4, #4]
   d6f06:	71a3      	strb	r3, [r4, #6]
   d6f08:	e7f0      	b.n	d6eec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d6f0a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d6f0a:	b538      	push	{r3, r4, r5, lr}
   d6f0c:	4615      	mov	r5, r2
   d6f0e:	461c      	mov	r4, r3
   d6f10:	f000 f89e 	bl	d7050 <_ZNKSt9type_infoeqERKS_>
   d6f14:	b120      	cbz	r0, d6f20 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d6f16:	2308      	movs	r3, #8
   d6f18:	60e3      	str	r3, [r4, #12]
   d6f1a:	2306      	movs	r3, #6
   d6f1c:	6025      	str	r5, [r4, #0]
   d6f1e:	7123      	strb	r3, [r4, #4]
   d6f20:	bd38      	pop	{r3, r4, r5, pc}

000d6f22 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d6f22:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6f24:	4605      	mov	r5, r0
   d6f26:	460c      	mov	r4, r1
   d6f28:	9201      	str	r2, [sp, #4]
   d6f2a:	461e      	mov	r6, r3
   d6f2c:	f000 f890 	bl	d7050 <_ZNKSt9type_infoeqERKS_>
   d6f30:	b950      	cbnz	r0, d6f48 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6f32:	2e03      	cmp	r6, #3
   d6f34:	d808      	bhi.n	d6f48 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6f36:	6823      	ldr	r3, [r4, #0]
   d6f38:	9a01      	ldr	r2, [sp, #4]
   d6f3a:	695b      	ldr	r3, [r3, #20]
   d6f3c:	4629      	mov	r1, r5
   d6f3e:	4620      	mov	r0, r4
   d6f40:	b002      	add	sp, #8
   d6f42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6f46:	4718      	bx	r3
   d6f48:	b002      	add	sp, #8
   d6f4a:	bd70      	pop	{r4, r5, r6, pc}

000d6f4c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d6f4c:	b510      	push	{r4, lr}
   d6f4e:	4b03      	ldr	r3, [pc, #12]	; (d6f5c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d6f50:	6003      	str	r3, [r0, #0]
   d6f52:	4604      	mov	r4, r0
   d6f54:	f7ff ffa6 	bl	d6ea4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6f58:	4620      	mov	r0, r4
   d6f5a:	bd10      	pop	{r4, pc}
   d6f5c:	000d8220 	.word	0x000d8220

000d6f60 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d6f60:	b510      	push	{r4, lr}
   d6f62:	4604      	mov	r4, r0
   d6f64:	f7ff fff2 	bl	d6f4c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d6f68:	4620      	mov	r0, r4
   d6f6a:	210c      	movs	r1, #12
   d6f6c:	f7ff ff6d 	bl	d6e4a <_ZdlPvj>
   d6f70:	4620      	mov	r0, r4
   d6f72:	bd10      	pop	{r4, pc}

000d6f74 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d6f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6f76:	9f08      	ldr	r7, [sp, #32]
   d6f78:	4297      	cmp	r7, r2
   d6f7a:	4605      	mov	r5, r0
   d6f7c:	460e      	mov	r6, r1
   d6f7e:	4614      	mov	r4, r2
   d6f80:	d00a      	beq.n	d6f98 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d6f82:	68a8      	ldr	r0, [r5, #8]
   d6f84:	6802      	ldr	r2, [r0, #0]
   d6f86:	9708      	str	r7, [sp, #32]
   d6f88:	6a15      	ldr	r5, [r2, #32]
   d6f8a:	4631      	mov	r1, r6
   d6f8c:	4622      	mov	r2, r4
   d6f8e:	46ac      	mov	ip, r5
   d6f90:	b003      	add	sp, #12
   d6f92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6f96:	4760      	bx	ip
   d6f98:	4619      	mov	r1, r3
   d6f9a:	9301      	str	r3, [sp, #4]
   d6f9c:	f000 f858 	bl	d7050 <_ZNKSt9type_infoeqERKS_>
   d6fa0:	9b01      	ldr	r3, [sp, #4]
   d6fa2:	2800      	cmp	r0, #0
   d6fa4:	d0ed      	beq.n	d6f82 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d6fa6:	2006      	movs	r0, #6
   d6fa8:	b003      	add	sp, #12
   d6faa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6fac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d6fac:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6fb0:	460d      	mov	r5, r1
   d6fb2:	4619      	mov	r1, r3
   d6fb4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d6fb8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d6fbc:	4681      	mov	r9, r0
   d6fbe:	4617      	mov	r7, r2
   d6fc0:	4698      	mov	r8, r3
   d6fc2:	f000 f845 	bl	d7050 <_ZNKSt9type_infoeqERKS_>
   d6fc6:	b190      	cbz	r0, d6fee <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d6fc8:	2d00      	cmp	r5, #0
   d6fca:	6034      	str	r4, [r6, #0]
   d6fcc:	7137      	strb	r7, [r6, #4]
   d6fce:	db09      	blt.n	d6fe4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d6fd0:	1961      	adds	r1, r4, r5
   d6fd2:	458a      	cmp	sl, r1
   d6fd4:	bf0c      	ite	eq
   d6fd6:	2106      	moveq	r1, #6
   d6fd8:	2101      	movne	r1, #1
   d6fda:	71b1      	strb	r1, [r6, #6]
   d6fdc:	2000      	movs	r0, #0
   d6fde:	b001      	add	sp, #4
   d6fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6fe4:	3502      	adds	r5, #2
   d6fe6:	d1f9      	bne.n	d6fdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6fe8:	2301      	movs	r3, #1
   d6fea:	71b3      	strb	r3, [r6, #6]
   d6fec:	e7f6      	b.n	d6fdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6fee:	4554      	cmp	r4, sl
   d6ff0:	d106      	bne.n	d7000 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6ff2:	4659      	mov	r1, fp
   d6ff4:	4648      	mov	r0, r9
   d6ff6:	f000 f82b 	bl	d7050 <_ZNKSt9type_infoeqERKS_>
   d6ffa:	b108      	cbz	r0, d7000 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6ffc:	7177      	strb	r7, [r6, #5]
   d6ffe:	e7ed      	b.n	d6fdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7000:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d7004:	6803      	ldr	r3, [r0, #0]
   d7006:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d700a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d700e:	69dc      	ldr	r4, [r3, #28]
   d7010:	463a      	mov	r2, r7
   d7012:	4643      	mov	r3, r8
   d7014:	4629      	mov	r1, r5
   d7016:	46a4      	mov	ip, r4
   d7018:	b001      	add	sp, #4
   d701a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d701e:	4760      	bx	ip

000d7020 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d7020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7024:	4607      	mov	r7, r0
   d7026:	460c      	mov	r4, r1
   d7028:	4615      	mov	r5, r2
   d702a:	461e      	mov	r6, r3
   d702c:	f7ff ff6d 	bl	d6f0a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d7030:	b948      	cbnz	r0, d7046 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d7032:	68b8      	ldr	r0, [r7, #8]
   d7034:	6803      	ldr	r3, [r0, #0]
   d7036:	699f      	ldr	r7, [r3, #24]
   d7038:	462a      	mov	r2, r5
   d703a:	4633      	mov	r3, r6
   d703c:	4621      	mov	r1, r4
   d703e:	46bc      	mov	ip, r7
   d7040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d7044:	4760      	bx	ip
   d7046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d704a <_ZNSt9type_infoD1Ev>:
   d704a:	4770      	bx	lr

000d704c <_ZNKSt9type_info14__is_pointer_pEv>:
   d704c:	2000      	movs	r0, #0
   d704e:	4770      	bx	lr

000d7050 <_ZNKSt9type_infoeqERKS_>:
   d7050:	4281      	cmp	r1, r0
   d7052:	b508      	push	{r3, lr}
   d7054:	d00e      	beq.n	d7074 <_ZNKSt9type_infoeqERKS_+0x24>
   d7056:	6840      	ldr	r0, [r0, #4]
   d7058:	7803      	ldrb	r3, [r0, #0]
   d705a:	2b2a      	cmp	r3, #42	; 0x2a
   d705c:	d00c      	beq.n	d7078 <_ZNKSt9type_infoeqERKS_+0x28>
   d705e:	6849      	ldr	r1, [r1, #4]
   d7060:	780b      	ldrb	r3, [r1, #0]
   d7062:	2b2a      	cmp	r3, #42	; 0x2a
   d7064:	bf08      	it	eq
   d7066:	3101      	addeq	r1, #1
   d7068:	f000 fd28 	bl	d7abc <strcmp>
   d706c:	fab0 f080 	clz	r0, r0
   d7070:	0940      	lsrs	r0, r0, #5
   d7072:	bd08      	pop	{r3, pc}
   d7074:	2001      	movs	r0, #1
   d7076:	e7fc      	b.n	d7072 <_ZNKSt9type_infoeqERKS_+0x22>
   d7078:	2000      	movs	r0, #0
   d707a:	e7fa      	b.n	d7072 <_ZNKSt9type_infoeqERKS_+0x22>

000d707c <__aeabi_drsub>:
   d707c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7080:	e002      	b.n	d7088 <__adddf3>
   d7082:	bf00      	nop

000d7084 <__aeabi_dsub>:
   d7084:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7088 <__adddf3>:
   d7088:	b530      	push	{r4, r5, lr}
   d708a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d708e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7092:	ea94 0f05 	teq	r4, r5
   d7096:	bf08      	it	eq
   d7098:	ea90 0f02 	teqeq	r0, r2
   d709c:	bf1f      	itttt	ne
   d709e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d70a2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d70a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d70aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d70ae:	f000 80e2 	beq.w	d7276 <__adddf3+0x1ee>
   d70b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d70b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d70ba:	bfb8      	it	lt
   d70bc:	426d      	neglt	r5, r5
   d70be:	dd0c      	ble.n	d70da <__adddf3+0x52>
   d70c0:	442c      	add	r4, r5
   d70c2:	ea80 0202 	eor.w	r2, r0, r2
   d70c6:	ea81 0303 	eor.w	r3, r1, r3
   d70ca:	ea82 0000 	eor.w	r0, r2, r0
   d70ce:	ea83 0101 	eor.w	r1, r3, r1
   d70d2:	ea80 0202 	eor.w	r2, r0, r2
   d70d6:	ea81 0303 	eor.w	r3, r1, r3
   d70da:	2d36      	cmp	r5, #54	; 0x36
   d70dc:	bf88      	it	hi
   d70de:	bd30      	pophi	{r4, r5, pc}
   d70e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d70e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d70e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d70ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d70f0:	d002      	beq.n	d70f8 <__adddf3+0x70>
   d70f2:	4240      	negs	r0, r0
   d70f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d70f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d70fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7100:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7104:	d002      	beq.n	d710c <__adddf3+0x84>
   d7106:	4252      	negs	r2, r2
   d7108:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d710c:	ea94 0f05 	teq	r4, r5
   d7110:	f000 80a7 	beq.w	d7262 <__adddf3+0x1da>
   d7114:	f1a4 0401 	sub.w	r4, r4, #1
   d7118:	f1d5 0e20 	rsbs	lr, r5, #32
   d711c:	db0d      	blt.n	d713a <__adddf3+0xb2>
   d711e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7122:	fa22 f205 	lsr.w	r2, r2, r5
   d7126:	1880      	adds	r0, r0, r2
   d7128:	f141 0100 	adc.w	r1, r1, #0
   d712c:	fa03 f20e 	lsl.w	r2, r3, lr
   d7130:	1880      	adds	r0, r0, r2
   d7132:	fa43 f305 	asr.w	r3, r3, r5
   d7136:	4159      	adcs	r1, r3
   d7138:	e00e      	b.n	d7158 <__adddf3+0xd0>
   d713a:	f1a5 0520 	sub.w	r5, r5, #32
   d713e:	f10e 0e20 	add.w	lr, lr, #32
   d7142:	2a01      	cmp	r2, #1
   d7144:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7148:	bf28      	it	cs
   d714a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d714e:	fa43 f305 	asr.w	r3, r3, r5
   d7152:	18c0      	adds	r0, r0, r3
   d7154:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7158:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d715c:	d507      	bpl.n	d716e <__adddf3+0xe6>
   d715e:	f04f 0e00 	mov.w	lr, #0
   d7162:	f1dc 0c00 	rsbs	ip, ip, #0
   d7166:	eb7e 0000 	sbcs.w	r0, lr, r0
   d716a:	eb6e 0101 	sbc.w	r1, lr, r1
   d716e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7172:	d31b      	bcc.n	d71ac <__adddf3+0x124>
   d7174:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7178:	d30c      	bcc.n	d7194 <__adddf3+0x10c>
   d717a:	0849      	lsrs	r1, r1, #1
   d717c:	ea5f 0030 	movs.w	r0, r0, rrx
   d7180:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7184:	f104 0401 	add.w	r4, r4, #1
   d7188:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d718c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7190:	f080 809a 	bcs.w	d72c8 <__adddf3+0x240>
   d7194:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7198:	bf08      	it	eq
   d719a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d719e:	f150 0000 	adcs.w	r0, r0, #0
   d71a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d71a6:	ea41 0105 	orr.w	r1, r1, r5
   d71aa:	bd30      	pop	{r4, r5, pc}
   d71ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d71b0:	4140      	adcs	r0, r0
   d71b2:	eb41 0101 	adc.w	r1, r1, r1
   d71b6:	3c01      	subs	r4, #1
   d71b8:	bf28      	it	cs
   d71ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d71be:	d2e9      	bcs.n	d7194 <__adddf3+0x10c>
   d71c0:	f091 0f00 	teq	r1, #0
   d71c4:	bf04      	itt	eq
   d71c6:	4601      	moveq	r1, r0
   d71c8:	2000      	moveq	r0, #0
   d71ca:	fab1 f381 	clz	r3, r1
   d71ce:	bf08      	it	eq
   d71d0:	3320      	addeq	r3, #32
   d71d2:	f1a3 030b 	sub.w	r3, r3, #11
   d71d6:	f1b3 0220 	subs.w	r2, r3, #32
   d71da:	da0c      	bge.n	d71f6 <__adddf3+0x16e>
   d71dc:	320c      	adds	r2, #12
   d71de:	dd08      	ble.n	d71f2 <__adddf3+0x16a>
   d71e0:	f102 0c14 	add.w	ip, r2, #20
   d71e4:	f1c2 020c 	rsb	r2, r2, #12
   d71e8:	fa01 f00c 	lsl.w	r0, r1, ip
   d71ec:	fa21 f102 	lsr.w	r1, r1, r2
   d71f0:	e00c      	b.n	d720c <__adddf3+0x184>
   d71f2:	f102 0214 	add.w	r2, r2, #20
   d71f6:	bfd8      	it	le
   d71f8:	f1c2 0c20 	rsble	ip, r2, #32
   d71fc:	fa01 f102 	lsl.w	r1, r1, r2
   d7200:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7204:	bfdc      	itt	le
   d7206:	ea41 010c 	orrle.w	r1, r1, ip
   d720a:	4090      	lslle	r0, r2
   d720c:	1ae4      	subs	r4, r4, r3
   d720e:	bfa2      	ittt	ge
   d7210:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7214:	4329      	orrge	r1, r5
   d7216:	bd30      	popge	{r4, r5, pc}
   d7218:	ea6f 0404 	mvn.w	r4, r4
   d721c:	3c1f      	subs	r4, #31
   d721e:	da1c      	bge.n	d725a <__adddf3+0x1d2>
   d7220:	340c      	adds	r4, #12
   d7222:	dc0e      	bgt.n	d7242 <__adddf3+0x1ba>
   d7224:	f104 0414 	add.w	r4, r4, #20
   d7228:	f1c4 0220 	rsb	r2, r4, #32
   d722c:	fa20 f004 	lsr.w	r0, r0, r4
   d7230:	fa01 f302 	lsl.w	r3, r1, r2
   d7234:	ea40 0003 	orr.w	r0, r0, r3
   d7238:	fa21 f304 	lsr.w	r3, r1, r4
   d723c:	ea45 0103 	orr.w	r1, r5, r3
   d7240:	bd30      	pop	{r4, r5, pc}
   d7242:	f1c4 040c 	rsb	r4, r4, #12
   d7246:	f1c4 0220 	rsb	r2, r4, #32
   d724a:	fa20 f002 	lsr.w	r0, r0, r2
   d724e:	fa01 f304 	lsl.w	r3, r1, r4
   d7252:	ea40 0003 	orr.w	r0, r0, r3
   d7256:	4629      	mov	r1, r5
   d7258:	bd30      	pop	{r4, r5, pc}
   d725a:	fa21 f004 	lsr.w	r0, r1, r4
   d725e:	4629      	mov	r1, r5
   d7260:	bd30      	pop	{r4, r5, pc}
   d7262:	f094 0f00 	teq	r4, #0
   d7266:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d726a:	bf06      	itte	eq
   d726c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7270:	3401      	addeq	r4, #1
   d7272:	3d01      	subne	r5, #1
   d7274:	e74e      	b.n	d7114 <__adddf3+0x8c>
   d7276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d727a:	bf18      	it	ne
   d727c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7280:	d029      	beq.n	d72d6 <__adddf3+0x24e>
   d7282:	ea94 0f05 	teq	r4, r5
   d7286:	bf08      	it	eq
   d7288:	ea90 0f02 	teqeq	r0, r2
   d728c:	d005      	beq.n	d729a <__adddf3+0x212>
   d728e:	ea54 0c00 	orrs.w	ip, r4, r0
   d7292:	bf04      	itt	eq
   d7294:	4619      	moveq	r1, r3
   d7296:	4610      	moveq	r0, r2
   d7298:	bd30      	pop	{r4, r5, pc}
   d729a:	ea91 0f03 	teq	r1, r3
   d729e:	bf1e      	ittt	ne
   d72a0:	2100      	movne	r1, #0
   d72a2:	2000      	movne	r0, #0
   d72a4:	bd30      	popne	{r4, r5, pc}
   d72a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d72aa:	d105      	bne.n	d72b8 <__adddf3+0x230>
   d72ac:	0040      	lsls	r0, r0, #1
   d72ae:	4149      	adcs	r1, r1
   d72b0:	bf28      	it	cs
   d72b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d72b6:	bd30      	pop	{r4, r5, pc}
   d72b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d72bc:	bf3c      	itt	cc
   d72be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d72c2:	bd30      	popcc	{r4, r5, pc}
   d72c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d72c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d72cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d72d0:	f04f 0000 	mov.w	r0, #0
   d72d4:	bd30      	pop	{r4, r5, pc}
   d72d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d72da:	bf1a      	itte	ne
   d72dc:	4619      	movne	r1, r3
   d72de:	4610      	movne	r0, r2
   d72e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d72e4:	bf1c      	itt	ne
   d72e6:	460b      	movne	r3, r1
   d72e8:	4602      	movne	r2, r0
   d72ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d72ee:	bf06      	itte	eq
   d72f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d72f4:	ea91 0f03 	teqeq	r1, r3
   d72f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d72fc:	bd30      	pop	{r4, r5, pc}
   d72fe:	bf00      	nop

000d7300 <__aeabi_ui2d>:
   d7300:	f090 0f00 	teq	r0, #0
   d7304:	bf04      	itt	eq
   d7306:	2100      	moveq	r1, #0
   d7308:	4770      	bxeq	lr
   d730a:	b530      	push	{r4, r5, lr}
   d730c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7310:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7314:	f04f 0500 	mov.w	r5, #0
   d7318:	f04f 0100 	mov.w	r1, #0
   d731c:	e750      	b.n	d71c0 <__adddf3+0x138>
   d731e:	bf00      	nop

000d7320 <__aeabi_i2d>:
   d7320:	f090 0f00 	teq	r0, #0
   d7324:	bf04      	itt	eq
   d7326:	2100      	moveq	r1, #0
   d7328:	4770      	bxeq	lr
   d732a:	b530      	push	{r4, r5, lr}
   d732c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7330:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7334:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7338:	bf48      	it	mi
   d733a:	4240      	negmi	r0, r0
   d733c:	f04f 0100 	mov.w	r1, #0
   d7340:	e73e      	b.n	d71c0 <__adddf3+0x138>
   d7342:	bf00      	nop

000d7344 <__aeabi_f2d>:
   d7344:	0042      	lsls	r2, r0, #1
   d7346:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d734a:	ea4f 0131 	mov.w	r1, r1, rrx
   d734e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7352:	bf1f      	itttt	ne
   d7354:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7358:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d735c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7360:	4770      	bxne	lr
   d7362:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d7366:	bf08      	it	eq
   d7368:	4770      	bxeq	lr
   d736a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d736e:	bf04      	itt	eq
   d7370:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d7374:	4770      	bxeq	lr
   d7376:	b530      	push	{r4, r5, lr}
   d7378:	f44f 7460 	mov.w	r4, #896	; 0x380
   d737c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7380:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7384:	e71c      	b.n	d71c0 <__adddf3+0x138>
   d7386:	bf00      	nop

000d7388 <__aeabi_ul2d>:
   d7388:	ea50 0201 	orrs.w	r2, r0, r1
   d738c:	bf08      	it	eq
   d738e:	4770      	bxeq	lr
   d7390:	b530      	push	{r4, r5, lr}
   d7392:	f04f 0500 	mov.w	r5, #0
   d7396:	e00a      	b.n	d73ae <__aeabi_l2d+0x16>

000d7398 <__aeabi_l2d>:
   d7398:	ea50 0201 	orrs.w	r2, r0, r1
   d739c:	bf08      	it	eq
   d739e:	4770      	bxeq	lr
   d73a0:	b530      	push	{r4, r5, lr}
   d73a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d73a6:	d502      	bpl.n	d73ae <__aeabi_l2d+0x16>
   d73a8:	4240      	negs	r0, r0
   d73aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d73ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d73b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d73b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d73ba:	f43f aed8 	beq.w	d716e <__adddf3+0xe6>
   d73be:	f04f 0203 	mov.w	r2, #3
   d73c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d73c6:	bf18      	it	ne
   d73c8:	3203      	addne	r2, #3
   d73ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d73ce:	bf18      	it	ne
   d73d0:	3203      	addne	r2, #3
   d73d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d73d6:	f1c2 0320 	rsb	r3, r2, #32
   d73da:	fa00 fc03 	lsl.w	ip, r0, r3
   d73de:	fa20 f002 	lsr.w	r0, r0, r2
   d73e2:	fa01 fe03 	lsl.w	lr, r1, r3
   d73e6:	ea40 000e 	orr.w	r0, r0, lr
   d73ea:	fa21 f102 	lsr.w	r1, r1, r2
   d73ee:	4414      	add	r4, r2
   d73f0:	e6bd      	b.n	d716e <__adddf3+0xe6>
   d73f2:	bf00      	nop

000d73f4 <__aeabi_dmul>:
   d73f4:	b570      	push	{r4, r5, r6, lr}
   d73f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d73fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d73fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7402:	bf1d      	ittte	ne
   d7404:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7408:	ea94 0f0c 	teqne	r4, ip
   d740c:	ea95 0f0c 	teqne	r5, ip
   d7410:	f000 f8de 	bleq	d75d0 <__aeabi_dmul+0x1dc>
   d7414:	442c      	add	r4, r5
   d7416:	ea81 0603 	eor.w	r6, r1, r3
   d741a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d741e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7422:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7426:	bf18      	it	ne
   d7428:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d742c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7434:	d038      	beq.n	d74a8 <__aeabi_dmul+0xb4>
   d7436:	fba0 ce02 	umull	ip, lr, r0, r2
   d743a:	f04f 0500 	mov.w	r5, #0
   d743e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7442:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7446:	fbe0 e503 	umlal	lr, r5, r0, r3
   d744a:	f04f 0600 	mov.w	r6, #0
   d744e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7452:	f09c 0f00 	teq	ip, #0
   d7456:	bf18      	it	ne
   d7458:	f04e 0e01 	orrne.w	lr, lr, #1
   d745c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7460:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7464:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7468:	d204      	bcs.n	d7474 <__aeabi_dmul+0x80>
   d746a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d746e:	416d      	adcs	r5, r5
   d7470:	eb46 0606 	adc.w	r6, r6, r6
   d7474:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7478:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d747c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7480:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7484:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7488:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d748c:	bf88      	it	hi
   d748e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7492:	d81e      	bhi.n	d74d2 <__aeabi_dmul+0xde>
   d7494:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7498:	bf08      	it	eq
   d749a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d749e:	f150 0000 	adcs.w	r0, r0, #0
   d74a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d74a6:	bd70      	pop	{r4, r5, r6, pc}
   d74a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d74ac:	ea46 0101 	orr.w	r1, r6, r1
   d74b0:	ea40 0002 	orr.w	r0, r0, r2
   d74b4:	ea81 0103 	eor.w	r1, r1, r3
   d74b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d74bc:	bfc2      	ittt	gt
   d74be:	ebd4 050c 	rsbsgt	r5, r4, ip
   d74c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d74c6:	bd70      	popgt	{r4, r5, r6, pc}
   d74c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d74cc:	f04f 0e00 	mov.w	lr, #0
   d74d0:	3c01      	subs	r4, #1
   d74d2:	f300 80ab 	bgt.w	d762c <__aeabi_dmul+0x238>
   d74d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d74da:	bfde      	ittt	le
   d74dc:	2000      	movle	r0, #0
   d74de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d74e2:	bd70      	pople	{r4, r5, r6, pc}
   d74e4:	f1c4 0400 	rsb	r4, r4, #0
   d74e8:	3c20      	subs	r4, #32
   d74ea:	da35      	bge.n	d7558 <__aeabi_dmul+0x164>
   d74ec:	340c      	adds	r4, #12
   d74ee:	dc1b      	bgt.n	d7528 <__aeabi_dmul+0x134>
   d74f0:	f104 0414 	add.w	r4, r4, #20
   d74f4:	f1c4 0520 	rsb	r5, r4, #32
   d74f8:	fa00 f305 	lsl.w	r3, r0, r5
   d74fc:	fa20 f004 	lsr.w	r0, r0, r4
   d7500:	fa01 f205 	lsl.w	r2, r1, r5
   d7504:	ea40 0002 	orr.w	r0, r0, r2
   d7508:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d750c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7510:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7514:	fa21 f604 	lsr.w	r6, r1, r4
   d7518:	eb42 0106 	adc.w	r1, r2, r6
   d751c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7520:	bf08      	it	eq
   d7522:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7526:	bd70      	pop	{r4, r5, r6, pc}
   d7528:	f1c4 040c 	rsb	r4, r4, #12
   d752c:	f1c4 0520 	rsb	r5, r4, #32
   d7530:	fa00 f304 	lsl.w	r3, r0, r4
   d7534:	fa20 f005 	lsr.w	r0, r0, r5
   d7538:	fa01 f204 	lsl.w	r2, r1, r4
   d753c:	ea40 0002 	orr.w	r0, r0, r2
   d7540:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7544:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7548:	f141 0100 	adc.w	r1, r1, #0
   d754c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7550:	bf08      	it	eq
   d7552:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7556:	bd70      	pop	{r4, r5, r6, pc}
   d7558:	f1c4 0520 	rsb	r5, r4, #32
   d755c:	fa00 f205 	lsl.w	r2, r0, r5
   d7560:	ea4e 0e02 	orr.w	lr, lr, r2
   d7564:	fa20 f304 	lsr.w	r3, r0, r4
   d7568:	fa01 f205 	lsl.w	r2, r1, r5
   d756c:	ea43 0302 	orr.w	r3, r3, r2
   d7570:	fa21 f004 	lsr.w	r0, r1, r4
   d7574:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7578:	fa21 f204 	lsr.w	r2, r1, r4
   d757c:	ea20 0002 	bic.w	r0, r0, r2
   d7580:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7584:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7588:	bf08      	it	eq
   d758a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d758e:	bd70      	pop	{r4, r5, r6, pc}
   d7590:	f094 0f00 	teq	r4, #0
   d7594:	d10f      	bne.n	d75b6 <__aeabi_dmul+0x1c2>
   d7596:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d759a:	0040      	lsls	r0, r0, #1
   d759c:	eb41 0101 	adc.w	r1, r1, r1
   d75a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d75a4:	bf08      	it	eq
   d75a6:	3c01      	subeq	r4, #1
   d75a8:	d0f7      	beq.n	d759a <__aeabi_dmul+0x1a6>
   d75aa:	ea41 0106 	orr.w	r1, r1, r6
   d75ae:	f095 0f00 	teq	r5, #0
   d75b2:	bf18      	it	ne
   d75b4:	4770      	bxne	lr
   d75b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d75ba:	0052      	lsls	r2, r2, #1
   d75bc:	eb43 0303 	adc.w	r3, r3, r3
   d75c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d75c4:	bf08      	it	eq
   d75c6:	3d01      	subeq	r5, #1
   d75c8:	d0f7      	beq.n	d75ba <__aeabi_dmul+0x1c6>
   d75ca:	ea43 0306 	orr.w	r3, r3, r6
   d75ce:	4770      	bx	lr
   d75d0:	ea94 0f0c 	teq	r4, ip
   d75d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d75d8:	bf18      	it	ne
   d75da:	ea95 0f0c 	teqne	r5, ip
   d75de:	d00c      	beq.n	d75fa <__aeabi_dmul+0x206>
   d75e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d75e4:	bf18      	it	ne
   d75e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d75ea:	d1d1      	bne.n	d7590 <__aeabi_dmul+0x19c>
   d75ec:	ea81 0103 	eor.w	r1, r1, r3
   d75f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d75f4:	f04f 0000 	mov.w	r0, #0
   d75f8:	bd70      	pop	{r4, r5, r6, pc}
   d75fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d75fe:	bf06      	itte	eq
   d7600:	4610      	moveq	r0, r2
   d7602:	4619      	moveq	r1, r3
   d7604:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7608:	d019      	beq.n	d763e <__aeabi_dmul+0x24a>
   d760a:	ea94 0f0c 	teq	r4, ip
   d760e:	d102      	bne.n	d7616 <__aeabi_dmul+0x222>
   d7610:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7614:	d113      	bne.n	d763e <__aeabi_dmul+0x24a>
   d7616:	ea95 0f0c 	teq	r5, ip
   d761a:	d105      	bne.n	d7628 <__aeabi_dmul+0x234>
   d761c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7620:	bf1c      	itt	ne
   d7622:	4610      	movne	r0, r2
   d7624:	4619      	movne	r1, r3
   d7626:	d10a      	bne.n	d763e <__aeabi_dmul+0x24a>
   d7628:	ea81 0103 	eor.w	r1, r1, r3
   d762c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7630:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7634:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7638:	f04f 0000 	mov.w	r0, #0
   d763c:	bd70      	pop	{r4, r5, r6, pc}
   d763e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7642:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7646:	bd70      	pop	{r4, r5, r6, pc}

000d7648 <__aeabi_ddiv>:
   d7648:	b570      	push	{r4, r5, r6, lr}
   d764a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d764e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7656:	bf1d      	ittte	ne
   d7658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d765c:	ea94 0f0c 	teqne	r4, ip
   d7660:	ea95 0f0c 	teqne	r5, ip
   d7664:	f000 f8a7 	bleq	d77b6 <__aeabi_ddiv+0x16e>
   d7668:	eba4 0405 	sub.w	r4, r4, r5
   d766c:	ea81 0e03 	eor.w	lr, r1, r3
   d7670:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7674:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7678:	f000 8088 	beq.w	d778c <__aeabi_ddiv+0x144>
   d767c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7680:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7684:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7688:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d768c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7690:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7694:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7698:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d769c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d76a0:	429d      	cmp	r5, r3
   d76a2:	bf08      	it	eq
   d76a4:	4296      	cmpeq	r6, r2
   d76a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d76aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d76ae:	d202      	bcs.n	d76b6 <__aeabi_ddiv+0x6e>
   d76b0:	085b      	lsrs	r3, r3, #1
   d76b2:	ea4f 0232 	mov.w	r2, r2, rrx
   d76b6:	1ab6      	subs	r6, r6, r2
   d76b8:	eb65 0503 	sbc.w	r5, r5, r3
   d76bc:	085b      	lsrs	r3, r3, #1
   d76be:	ea4f 0232 	mov.w	r2, r2, rrx
   d76c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d76c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d76ca:	ebb6 0e02 	subs.w	lr, r6, r2
   d76ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   d76d2:	bf22      	ittt	cs
   d76d4:	1ab6      	subcs	r6, r6, r2
   d76d6:	4675      	movcs	r5, lr
   d76d8:	ea40 000c 	orrcs.w	r0, r0, ip
   d76dc:	085b      	lsrs	r3, r3, #1
   d76de:	ea4f 0232 	mov.w	r2, r2, rrx
   d76e2:	ebb6 0e02 	subs.w	lr, r6, r2
   d76e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d76ea:	bf22      	ittt	cs
   d76ec:	1ab6      	subcs	r6, r6, r2
   d76ee:	4675      	movcs	r5, lr
   d76f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d76f4:	085b      	lsrs	r3, r3, #1
   d76f6:	ea4f 0232 	mov.w	r2, r2, rrx
   d76fa:	ebb6 0e02 	subs.w	lr, r6, r2
   d76fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7702:	bf22      	ittt	cs
   d7704:	1ab6      	subcs	r6, r6, r2
   d7706:	4675      	movcs	r5, lr
   d7708:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d770c:	085b      	lsrs	r3, r3, #1
   d770e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7712:	ebb6 0e02 	subs.w	lr, r6, r2
   d7716:	eb75 0e03 	sbcs.w	lr, r5, r3
   d771a:	bf22      	ittt	cs
   d771c:	1ab6      	subcs	r6, r6, r2
   d771e:	4675      	movcs	r5, lr
   d7720:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7724:	ea55 0e06 	orrs.w	lr, r5, r6
   d7728:	d018      	beq.n	d775c <__aeabi_ddiv+0x114>
   d772a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d772e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7732:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7736:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d773a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d773e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7742:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7746:	d1c0      	bne.n	d76ca <__aeabi_ddiv+0x82>
   d7748:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d774c:	d10b      	bne.n	d7766 <__aeabi_ddiv+0x11e>
   d774e:	ea41 0100 	orr.w	r1, r1, r0
   d7752:	f04f 0000 	mov.w	r0, #0
   d7756:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d775a:	e7b6      	b.n	d76ca <__aeabi_ddiv+0x82>
   d775c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7760:	bf04      	itt	eq
   d7762:	4301      	orreq	r1, r0
   d7764:	2000      	moveq	r0, #0
   d7766:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d776a:	bf88      	it	hi
   d776c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7770:	f63f aeaf 	bhi.w	d74d2 <__aeabi_dmul+0xde>
   d7774:	ebb5 0c03 	subs.w	ip, r5, r3
   d7778:	bf04      	itt	eq
   d777a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d777e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7782:	f150 0000 	adcs.w	r0, r0, #0
   d7786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d778a:	bd70      	pop	{r4, r5, r6, pc}
   d778c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7790:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7794:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7798:	bfc2      	ittt	gt
   d779a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d779e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d77a2:	bd70      	popgt	{r4, r5, r6, pc}
   d77a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d77a8:	f04f 0e00 	mov.w	lr, #0
   d77ac:	3c01      	subs	r4, #1
   d77ae:	e690      	b.n	d74d2 <__aeabi_dmul+0xde>
   d77b0:	ea45 0e06 	orr.w	lr, r5, r6
   d77b4:	e68d      	b.n	d74d2 <__aeabi_dmul+0xde>
   d77b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d77ba:	ea94 0f0c 	teq	r4, ip
   d77be:	bf08      	it	eq
   d77c0:	ea95 0f0c 	teqeq	r5, ip
   d77c4:	f43f af3b 	beq.w	d763e <__aeabi_dmul+0x24a>
   d77c8:	ea94 0f0c 	teq	r4, ip
   d77cc:	d10a      	bne.n	d77e4 <__aeabi_ddiv+0x19c>
   d77ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d77d2:	f47f af34 	bne.w	d763e <__aeabi_dmul+0x24a>
   d77d6:	ea95 0f0c 	teq	r5, ip
   d77da:	f47f af25 	bne.w	d7628 <__aeabi_dmul+0x234>
   d77de:	4610      	mov	r0, r2
   d77e0:	4619      	mov	r1, r3
   d77e2:	e72c      	b.n	d763e <__aeabi_dmul+0x24a>
   d77e4:	ea95 0f0c 	teq	r5, ip
   d77e8:	d106      	bne.n	d77f8 <__aeabi_ddiv+0x1b0>
   d77ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d77ee:	f43f aefd 	beq.w	d75ec <__aeabi_dmul+0x1f8>
   d77f2:	4610      	mov	r0, r2
   d77f4:	4619      	mov	r1, r3
   d77f6:	e722      	b.n	d763e <__aeabi_dmul+0x24a>
   d77f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d77fc:	bf18      	it	ne
   d77fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7802:	f47f aec5 	bne.w	d7590 <__aeabi_dmul+0x19c>
   d7806:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d780a:	f47f af0d 	bne.w	d7628 <__aeabi_dmul+0x234>
   d780e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7812:	f47f aeeb 	bne.w	d75ec <__aeabi_dmul+0x1f8>
   d7816:	e712      	b.n	d763e <__aeabi_dmul+0x24a>

000d7818 <__gedf2>:
   d7818:	f04f 3cff 	mov.w	ip, #4294967295
   d781c:	e006      	b.n	d782c <__cmpdf2+0x4>
   d781e:	bf00      	nop

000d7820 <__ledf2>:
   d7820:	f04f 0c01 	mov.w	ip, #1
   d7824:	e002      	b.n	d782c <__cmpdf2+0x4>
   d7826:	bf00      	nop

000d7828 <__cmpdf2>:
   d7828:	f04f 0c01 	mov.w	ip, #1
   d782c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7830:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7838:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d783c:	bf18      	it	ne
   d783e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7842:	d01b      	beq.n	d787c <__cmpdf2+0x54>
   d7844:	b001      	add	sp, #4
   d7846:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d784a:	bf0c      	ite	eq
   d784c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7850:	ea91 0f03 	teqne	r1, r3
   d7854:	bf02      	ittt	eq
   d7856:	ea90 0f02 	teqeq	r0, r2
   d785a:	2000      	moveq	r0, #0
   d785c:	4770      	bxeq	lr
   d785e:	f110 0f00 	cmn.w	r0, #0
   d7862:	ea91 0f03 	teq	r1, r3
   d7866:	bf58      	it	pl
   d7868:	4299      	cmppl	r1, r3
   d786a:	bf08      	it	eq
   d786c:	4290      	cmpeq	r0, r2
   d786e:	bf2c      	ite	cs
   d7870:	17d8      	asrcs	r0, r3, #31
   d7872:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7876:	f040 0001 	orr.w	r0, r0, #1
   d787a:	4770      	bx	lr
   d787c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7880:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7884:	d102      	bne.n	d788c <__cmpdf2+0x64>
   d7886:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d788a:	d107      	bne.n	d789c <__cmpdf2+0x74>
   d788c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7890:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7894:	d1d6      	bne.n	d7844 <__cmpdf2+0x1c>
   d7896:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d789a:	d0d3      	beq.n	d7844 <__cmpdf2+0x1c>
   d789c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d78a0:	4770      	bx	lr
   d78a2:	bf00      	nop

000d78a4 <__aeabi_cdrcmple>:
   d78a4:	4684      	mov	ip, r0
   d78a6:	4610      	mov	r0, r2
   d78a8:	4662      	mov	r2, ip
   d78aa:	468c      	mov	ip, r1
   d78ac:	4619      	mov	r1, r3
   d78ae:	4663      	mov	r3, ip
   d78b0:	e000      	b.n	d78b4 <__aeabi_cdcmpeq>
   d78b2:	bf00      	nop

000d78b4 <__aeabi_cdcmpeq>:
   d78b4:	b501      	push	{r0, lr}
   d78b6:	f7ff ffb7 	bl	d7828 <__cmpdf2>
   d78ba:	2800      	cmp	r0, #0
   d78bc:	bf48      	it	mi
   d78be:	f110 0f00 	cmnmi.w	r0, #0
   d78c2:	bd01      	pop	{r0, pc}

000d78c4 <__aeabi_dcmpeq>:
   d78c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d78c8:	f7ff fff4 	bl	d78b4 <__aeabi_cdcmpeq>
   d78cc:	bf0c      	ite	eq
   d78ce:	2001      	moveq	r0, #1
   d78d0:	2000      	movne	r0, #0
   d78d2:	f85d fb08 	ldr.w	pc, [sp], #8
   d78d6:	bf00      	nop

000d78d8 <__aeabi_dcmplt>:
   d78d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d78dc:	f7ff ffea 	bl	d78b4 <__aeabi_cdcmpeq>
   d78e0:	bf34      	ite	cc
   d78e2:	2001      	movcc	r0, #1
   d78e4:	2000      	movcs	r0, #0
   d78e6:	f85d fb08 	ldr.w	pc, [sp], #8
   d78ea:	bf00      	nop

000d78ec <__aeabi_dcmple>:
   d78ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d78f0:	f7ff ffe0 	bl	d78b4 <__aeabi_cdcmpeq>
   d78f4:	bf94      	ite	ls
   d78f6:	2001      	movls	r0, #1
   d78f8:	2000      	movhi	r0, #0
   d78fa:	f85d fb08 	ldr.w	pc, [sp], #8
   d78fe:	bf00      	nop

000d7900 <__aeabi_dcmpge>:
   d7900:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7904:	f7ff ffce 	bl	d78a4 <__aeabi_cdrcmple>
   d7908:	bf94      	ite	ls
   d790a:	2001      	movls	r0, #1
   d790c:	2000      	movhi	r0, #0
   d790e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7912:	bf00      	nop

000d7914 <__aeabi_dcmpgt>:
   d7914:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7918:	f7ff ffc4 	bl	d78a4 <__aeabi_cdrcmple>
   d791c:	bf34      	ite	cc
   d791e:	2001      	movcc	r0, #1
   d7920:	2000      	movcs	r0, #0
   d7922:	f85d fb08 	ldr.w	pc, [sp], #8
   d7926:	bf00      	nop

000d7928 <__aeabi_d2f>:
   d7928:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d792c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7930:	bf24      	itt	cs
   d7932:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7936:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d793a:	d90d      	bls.n	d7958 <__aeabi_d2f+0x30>
   d793c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7940:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7944:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7948:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d794c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7950:	bf08      	it	eq
   d7952:	f020 0001 	biceq.w	r0, r0, #1
   d7956:	4770      	bx	lr
   d7958:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d795c:	d121      	bne.n	d79a2 <__aeabi_d2f+0x7a>
   d795e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7962:	bfbc      	itt	lt
   d7964:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7968:	4770      	bxlt	lr
   d796a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d796e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7972:	f1c2 0218 	rsb	r2, r2, #24
   d7976:	f1c2 0c20 	rsb	ip, r2, #32
   d797a:	fa10 f30c 	lsls.w	r3, r0, ip
   d797e:	fa20 f002 	lsr.w	r0, r0, r2
   d7982:	bf18      	it	ne
   d7984:	f040 0001 	orrne.w	r0, r0, #1
   d7988:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d798c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7990:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7994:	ea40 000c 	orr.w	r0, r0, ip
   d7998:	fa23 f302 	lsr.w	r3, r3, r2
   d799c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d79a0:	e7cc      	b.n	d793c <__aeabi_d2f+0x14>
   d79a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d79a6:	d107      	bne.n	d79b8 <__aeabi_d2f+0x90>
   d79a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d79ac:	bf1e      	ittt	ne
   d79ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d79b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d79b6:	4770      	bxne	lr
   d79b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d79bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d79c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d79c4:	4770      	bx	lr
   d79c6:	bf00      	nop

000d79c8 <atoi>:
   d79c8:	220a      	movs	r2, #10
   d79ca:	2100      	movs	r1, #0
   d79cc:	f000 b934 	b.w	d7c38 <strtol>

000d79d0 <__cxa_atexit>:
   d79d0:	b510      	push	{r4, lr}
   d79d2:	4c05      	ldr	r4, [pc, #20]	; (d79e8 <__cxa_atexit+0x18>)
   d79d4:	4613      	mov	r3, r2
   d79d6:	b12c      	cbz	r4, d79e4 <__cxa_atexit+0x14>
   d79d8:	460a      	mov	r2, r1
   d79da:	4601      	mov	r1, r0
   d79dc:	2002      	movs	r0, #2
   d79de:	f3af 8000 	nop.w
   d79e2:	bd10      	pop	{r4, pc}
   d79e4:	4620      	mov	r0, r4
   d79e6:	e7fc      	b.n	d79e2 <__cxa_atexit+0x12>
   d79e8:	00000000 	.word	0x00000000

000d79ec <ldiv>:
   d79ec:	2900      	cmp	r1, #0
   d79ee:	b510      	push	{r4, lr}
   d79f0:	fb91 f4f2 	sdiv	r4, r1, r2
   d79f4:	fb02 1314 	mls	r3, r2, r4, r1
   d79f8:	db06      	blt.n	d7a08 <ldiv+0x1c>
   d79fa:	2b00      	cmp	r3, #0
   d79fc:	da01      	bge.n	d7a02 <ldiv+0x16>
   d79fe:	3401      	adds	r4, #1
   d7a00:	1a9b      	subs	r3, r3, r2
   d7a02:	e9c0 4300 	strd	r4, r3, [r0]
   d7a06:	bd10      	pop	{r4, pc}
   d7a08:	2b00      	cmp	r3, #0
   d7a0a:	bfc4      	itt	gt
   d7a0c:	f104 34ff 	addgt.w	r4, r4, #4294967295
   d7a10:	189b      	addgt	r3, r3, r2
   d7a12:	e7f6      	b.n	d7a02 <ldiv+0x16>

000d7a14 <memcpy>:
   d7a14:	440a      	add	r2, r1
   d7a16:	4291      	cmp	r1, r2
   d7a18:	f100 33ff 	add.w	r3, r0, #4294967295
   d7a1c:	d100      	bne.n	d7a20 <memcpy+0xc>
   d7a1e:	4770      	bx	lr
   d7a20:	b510      	push	{r4, lr}
   d7a22:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7a26:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7a2a:	4291      	cmp	r1, r2
   d7a2c:	d1f9      	bne.n	d7a22 <memcpy+0xe>
   d7a2e:	bd10      	pop	{r4, pc}

000d7a30 <memmove>:
   d7a30:	4288      	cmp	r0, r1
   d7a32:	b510      	push	{r4, lr}
   d7a34:	eb01 0402 	add.w	r4, r1, r2
   d7a38:	d902      	bls.n	d7a40 <memmove+0x10>
   d7a3a:	4284      	cmp	r4, r0
   d7a3c:	4623      	mov	r3, r4
   d7a3e:	d807      	bhi.n	d7a50 <memmove+0x20>
   d7a40:	1e43      	subs	r3, r0, #1
   d7a42:	42a1      	cmp	r1, r4
   d7a44:	d008      	beq.n	d7a58 <memmove+0x28>
   d7a46:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7a4a:	f803 2f01 	strb.w	r2, [r3, #1]!
   d7a4e:	e7f8      	b.n	d7a42 <memmove+0x12>
   d7a50:	4402      	add	r2, r0
   d7a52:	4601      	mov	r1, r0
   d7a54:	428a      	cmp	r2, r1
   d7a56:	d100      	bne.n	d7a5a <memmove+0x2a>
   d7a58:	bd10      	pop	{r4, pc}
   d7a5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7a5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d7a62:	e7f7      	b.n	d7a54 <memmove+0x24>

000d7a64 <memset>:
   d7a64:	4402      	add	r2, r0
   d7a66:	4603      	mov	r3, r0
   d7a68:	4293      	cmp	r3, r2
   d7a6a:	d100      	bne.n	d7a6e <memset+0xa>
   d7a6c:	4770      	bx	lr
   d7a6e:	f803 1b01 	strb.w	r1, [r3], #1
   d7a72:	e7f9      	b.n	d7a68 <memset+0x4>

000d7a74 <srand>:
   d7a74:	b538      	push	{r3, r4, r5, lr}
   d7a76:	4b0d      	ldr	r3, [pc, #52]	; (d7aac <srand+0x38>)
   d7a78:	681d      	ldr	r5, [r3, #0]
   d7a7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7a7c:	4604      	mov	r4, r0
   d7a7e:	b97b      	cbnz	r3, d7aa0 <srand+0x2c>
   d7a80:	2018      	movs	r0, #24
   d7a82:	f7fd fdd7 	bl	d5634 <malloc>
   d7a86:	4a0a      	ldr	r2, [pc, #40]	; (d7ab0 <srand+0x3c>)
   d7a88:	4b0a      	ldr	r3, [pc, #40]	; (d7ab4 <srand+0x40>)
   d7a8a:	63a8      	str	r0, [r5, #56]	; 0x38
   d7a8c:	e9c0 2300 	strd	r2, r3, [r0]
   d7a90:	4b09      	ldr	r3, [pc, #36]	; (d7ab8 <srand+0x44>)
   d7a92:	6083      	str	r3, [r0, #8]
   d7a94:	230b      	movs	r3, #11
   d7a96:	8183      	strh	r3, [r0, #12]
   d7a98:	2201      	movs	r2, #1
   d7a9a:	2300      	movs	r3, #0
   d7a9c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7aa0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7aa2:	2200      	movs	r2, #0
   d7aa4:	611c      	str	r4, [r3, #16]
   d7aa6:	615a      	str	r2, [r3, #20]
   d7aa8:	bd38      	pop	{r3, r4, r5, pc}
   d7aaa:	bf00      	nop
   d7aac:	2003e0e0 	.word	0x2003e0e0
   d7ab0:	abcd330e 	.word	0xabcd330e
   d7ab4:	e66d1234 	.word	0xe66d1234
   d7ab8:	0005deec 	.word	0x0005deec

000d7abc <strcmp>:
   d7abc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7ac0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7ac4:	2a01      	cmp	r2, #1
   d7ac6:	bf28      	it	cs
   d7ac8:	429a      	cmpcs	r2, r3
   d7aca:	d0f7      	beq.n	d7abc <strcmp>
   d7acc:	1ad0      	subs	r0, r2, r3
   d7ace:	4770      	bx	lr

000d7ad0 <strcpy>:
   d7ad0:	4603      	mov	r3, r0
   d7ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7ad6:	f803 2b01 	strb.w	r2, [r3], #1
   d7ada:	2a00      	cmp	r2, #0
   d7adc:	d1f9      	bne.n	d7ad2 <strcpy+0x2>
   d7ade:	4770      	bx	lr

000d7ae0 <strlen>:
   d7ae0:	4603      	mov	r3, r0
   d7ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7ae6:	2a00      	cmp	r2, #0
   d7ae8:	d1fb      	bne.n	d7ae2 <strlen+0x2>
   d7aea:	1a18      	subs	r0, r3, r0
   d7aec:	3801      	subs	r0, #1
   d7aee:	4770      	bx	lr

000d7af0 <strncpy>:
   d7af0:	b510      	push	{r4, lr}
   d7af2:	3901      	subs	r1, #1
   d7af4:	4603      	mov	r3, r0
   d7af6:	b132      	cbz	r2, d7b06 <strncpy+0x16>
   d7af8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7afc:	f803 4b01 	strb.w	r4, [r3], #1
   d7b00:	3a01      	subs	r2, #1
   d7b02:	2c00      	cmp	r4, #0
   d7b04:	d1f7      	bne.n	d7af6 <strncpy+0x6>
   d7b06:	441a      	add	r2, r3
   d7b08:	2100      	movs	r1, #0
   d7b0a:	4293      	cmp	r3, r2
   d7b0c:	d100      	bne.n	d7b10 <strncpy+0x20>
   d7b0e:	bd10      	pop	{r4, pc}
   d7b10:	f803 1b01 	strb.w	r1, [r3], #1
   d7b14:	e7f9      	b.n	d7b0a <strncpy+0x1a>

000d7b16 <strstr>:
   d7b16:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7b18:	780c      	ldrb	r4, [r1, #0]
   d7b1a:	b164      	cbz	r4, d7b36 <strstr+0x20>
   d7b1c:	4603      	mov	r3, r0
   d7b1e:	781a      	ldrb	r2, [r3, #0]
   d7b20:	4618      	mov	r0, r3
   d7b22:	1c5e      	adds	r6, r3, #1
   d7b24:	b90a      	cbnz	r2, d7b2a <strstr+0x14>
   d7b26:	4610      	mov	r0, r2
   d7b28:	e005      	b.n	d7b36 <strstr+0x20>
   d7b2a:	4294      	cmp	r4, r2
   d7b2c:	d108      	bne.n	d7b40 <strstr+0x2a>
   d7b2e:	460d      	mov	r5, r1
   d7b30:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d7b34:	b902      	cbnz	r2, d7b38 <strstr+0x22>
   d7b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7b38:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   d7b3c:	4297      	cmp	r7, r2
   d7b3e:	d0f7      	beq.n	d7b30 <strstr+0x1a>
   d7b40:	4633      	mov	r3, r6
   d7b42:	e7ec      	b.n	d7b1e <strstr+0x8>

000d7b44 <_strtol_l.isra.0>:
   d7b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7b48:	4e3a      	ldr	r6, [pc, #232]	; (d7c34 <_strtol_l.isra.0+0xf0>)
   d7b4a:	4686      	mov	lr, r0
   d7b4c:	468c      	mov	ip, r1
   d7b4e:	4660      	mov	r0, ip
   d7b50:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7b54:	5da5      	ldrb	r5, [r4, r6]
   d7b56:	f015 0508 	ands.w	r5, r5, #8
   d7b5a:	d1f8      	bne.n	d7b4e <_strtol_l.isra.0+0xa>
   d7b5c:	2c2d      	cmp	r4, #45	; 0x2d
   d7b5e:	d133      	bne.n	d7bc8 <_strtol_l.isra.0+0x84>
   d7b60:	f89c 4000 	ldrb.w	r4, [ip]
   d7b64:	f04f 0801 	mov.w	r8, #1
   d7b68:	f100 0c02 	add.w	ip, r0, #2
   d7b6c:	2b00      	cmp	r3, #0
   d7b6e:	d05c      	beq.n	d7c2a <_strtol_l.isra.0+0xe6>
   d7b70:	2b10      	cmp	r3, #16
   d7b72:	d10c      	bne.n	d7b8e <_strtol_l.isra.0+0x4a>
   d7b74:	2c30      	cmp	r4, #48	; 0x30
   d7b76:	d10a      	bne.n	d7b8e <_strtol_l.isra.0+0x4a>
   d7b78:	f89c 0000 	ldrb.w	r0, [ip]
   d7b7c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7b80:	2858      	cmp	r0, #88	; 0x58
   d7b82:	d14d      	bne.n	d7c20 <_strtol_l.isra.0+0xdc>
   d7b84:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d7b88:	2310      	movs	r3, #16
   d7b8a:	f10c 0c02 	add.w	ip, ip, #2
   d7b8e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d7b92:	3f01      	subs	r7, #1
   d7b94:	2600      	movs	r6, #0
   d7b96:	fbb7 f9f3 	udiv	r9, r7, r3
   d7b9a:	4630      	mov	r0, r6
   d7b9c:	fb03 7a19 	mls	sl, r3, r9, r7
   d7ba0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d7ba4:	2d09      	cmp	r5, #9
   d7ba6:	d818      	bhi.n	d7bda <_strtol_l.isra.0+0x96>
   d7ba8:	462c      	mov	r4, r5
   d7baa:	42a3      	cmp	r3, r4
   d7bac:	dd24      	ble.n	d7bf8 <_strtol_l.isra.0+0xb4>
   d7bae:	1c75      	adds	r5, r6, #1
   d7bb0:	d007      	beq.n	d7bc2 <_strtol_l.isra.0+0x7e>
   d7bb2:	4581      	cmp	r9, r0
   d7bb4:	d31d      	bcc.n	d7bf2 <_strtol_l.isra.0+0xae>
   d7bb6:	d101      	bne.n	d7bbc <_strtol_l.isra.0+0x78>
   d7bb8:	45a2      	cmp	sl, r4
   d7bba:	db1a      	blt.n	d7bf2 <_strtol_l.isra.0+0xae>
   d7bbc:	fb00 4003 	mla	r0, r0, r3, r4
   d7bc0:	2601      	movs	r6, #1
   d7bc2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7bc6:	e7eb      	b.n	d7ba0 <_strtol_l.isra.0+0x5c>
   d7bc8:	2c2b      	cmp	r4, #43	; 0x2b
   d7bca:	bf08      	it	eq
   d7bcc:	f89c 4000 	ldrbeq.w	r4, [ip]
   d7bd0:	46a8      	mov	r8, r5
   d7bd2:	bf08      	it	eq
   d7bd4:	f100 0c02 	addeq.w	ip, r0, #2
   d7bd8:	e7c8      	b.n	d7b6c <_strtol_l.isra.0+0x28>
   d7bda:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d7bde:	2d19      	cmp	r5, #25
   d7be0:	d801      	bhi.n	d7be6 <_strtol_l.isra.0+0xa2>
   d7be2:	3c37      	subs	r4, #55	; 0x37
   d7be4:	e7e1      	b.n	d7baa <_strtol_l.isra.0+0x66>
   d7be6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d7bea:	2d19      	cmp	r5, #25
   d7bec:	d804      	bhi.n	d7bf8 <_strtol_l.isra.0+0xb4>
   d7bee:	3c57      	subs	r4, #87	; 0x57
   d7bf0:	e7db      	b.n	d7baa <_strtol_l.isra.0+0x66>
   d7bf2:	f04f 36ff 	mov.w	r6, #4294967295
   d7bf6:	e7e4      	b.n	d7bc2 <_strtol_l.isra.0+0x7e>
   d7bf8:	1c73      	adds	r3, r6, #1
   d7bfa:	d106      	bne.n	d7c0a <_strtol_l.isra.0+0xc6>
   d7bfc:	2322      	movs	r3, #34	; 0x22
   d7bfe:	f8ce 3000 	str.w	r3, [lr]
   d7c02:	4638      	mov	r0, r7
   d7c04:	b942      	cbnz	r2, d7c18 <_strtol_l.isra.0+0xd4>
   d7c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7c0a:	f1b8 0f00 	cmp.w	r8, #0
   d7c0e:	d000      	beq.n	d7c12 <_strtol_l.isra.0+0xce>
   d7c10:	4240      	negs	r0, r0
   d7c12:	2a00      	cmp	r2, #0
   d7c14:	d0f7      	beq.n	d7c06 <_strtol_l.isra.0+0xc2>
   d7c16:	b10e      	cbz	r6, d7c1c <_strtol_l.isra.0+0xd8>
   d7c18:	f10c 31ff 	add.w	r1, ip, #4294967295
   d7c1c:	6011      	str	r1, [r2, #0]
   d7c1e:	e7f2      	b.n	d7c06 <_strtol_l.isra.0+0xc2>
   d7c20:	2430      	movs	r4, #48	; 0x30
   d7c22:	2b00      	cmp	r3, #0
   d7c24:	d1b3      	bne.n	d7b8e <_strtol_l.isra.0+0x4a>
   d7c26:	2308      	movs	r3, #8
   d7c28:	e7b1      	b.n	d7b8e <_strtol_l.isra.0+0x4a>
   d7c2a:	2c30      	cmp	r4, #48	; 0x30
   d7c2c:	d0a4      	beq.n	d7b78 <_strtol_l.isra.0+0x34>
   d7c2e:	230a      	movs	r3, #10
   d7c30:	e7ad      	b.n	d7b8e <_strtol_l.isra.0+0x4a>
   d7c32:	bf00      	nop
   d7c34:	000d825a 	.word	0x000d825a

000d7c38 <strtol>:
   d7c38:	4613      	mov	r3, r2
   d7c3a:	460a      	mov	r2, r1
   d7c3c:	4601      	mov	r1, r0
   d7c3e:	4802      	ldr	r0, [pc, #8]	; (d7c48 <strtol+0x10>)
   d7c40:	6800      	ldr	r0, [r0, #0]
   d7c42:	f7ff bf7f 	b.w	d7b44 <_strtol_l.isra.0>
   d7c46:	bf00      	nop
   d7c48:	2003e0e0 	.word	0x2003e0e0

000d7c4c <dynalib_user>:
   d7c4c:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   d7c5c:	00000000 6b657274 6568742e 2e6c6377     ....trek.thewcl.
   d7c6c:	006d6f63 227b002f 64697364 30353a22     com./.{"dsid":50
   d7c7c:	2c333839 61762220 2265756c 202c003a     983, "value":., 
   d7c8c:	6d697422 61747365 3a22706d 002c7d00     "timestamp":.},.
   d7c9c:	6164227b 3a226174 7d5d005b 534f5000     {"data":[.]}.POS
   d7cac:	74530054 73757461 4200203a 3a79646f     T.Status: .Body:
   d7cbc:	63410020 74706563 70706100 6163696c      .Accept.applica
   d7ccc:	6e6f6974 6f736a2f 6f43006e 6e65746e     tion/json.Conten
   d7cdc:	79542d74 61006570 742d6970 6e656b6f     t-Type.api-token
   d7cec:	49504100 6661652d 632d6565 36356264     .API-eafee-cdb56
   d7cfc:	3435332d 332d6435 64376638 53494c00     -3545d-38f7d.LIS
   d7d0c:	00484433                                3DH.

000d7d10 <_ZTV15Adafruit_LIS3DH>:
	...
   d7d18:	000d40b3 000d45e9 000d4729 000d4bd9     .@...E..)G...K..
   d7d28:	000d472d 70747448 65696c43 093e746e     -G..HttpClient>.
   d7d38:	6e6e6f43 69746365 7420676e 00203a6f     Connecting to: .
   d7d48:	70747448 65696c43 093e746e 6e6e6f43     HttpClient>.Conn
   d7d58:	69746365 7420676e 5049206f 2000203a     ecting to IP: . 
   d7d68:	50545448 302e312f 48000a0d 43707474     HTTP/1.0...HttpC
   d7d78:	6e65696c 53093e74 74726174 20666f20     lient>.Start of 
   d7d88:	50545448 71655220 74736575 6c63002e     HTTP Request..cl
   d7d98:	0065736f 6e6e6f43 69746365 48006e6f     ose.Connection.H
   d7da8:	43707474 6e65696c 43093e74 656e6e6f     ttpClient>.Conne
   d7db8:	6f697463 6166206e 64656c69 4f48002e     ction failed..HO
   d7dc8:	43005453 65746e6f 4c2d746e 74676e65     ST.Content-Lengt
   d7dd8:	74480068 6c437074 746e6569 6e45093e     h.HttpClient>.En
   d7de8:	666f2064 54544820 65522050 73657571     d of HTTP Reques
   d7df8:	0d002e74 7474480a 696c4370 3e746e65     t....HttpClient>
   d7e08:	63655209 69766965 5420676e 74205043     .Receiving TCP t
   d7e18:	736e6172 69746361 6f206e6f 20002066     ransaction of . 
   d7e28:	65747962 48002e73 43707474 6e65696c     bytes..HttpClien
   d7e38:	45093e74 726f7272 6552203a 6e6f7073     t>.Error: Respon
   d7e48:	62206573 2079646f 6772616c 74207265     se body larger t
   d7e58:	206e6168 66667562 002e7265 74480a0d     han buffer....Ht
   d7e68:	6c437074 746e6569 6e45093e 666f2064     tpClient>.End of
   d7e78:	50435420 61727420 6361736e 6e6f6974      TCP transaction
   d7e88:	0a0d002e 70747448 65696c43 093e746e     ....HttpClient>.
   d7e98:	6f727245 54203a72 6f656d69 77207475     Error: Timeout w
   d7ea8:	656c6968 61657220 676e6964 73657220     hile reading res
   d7eb8:	736e6f70 0d002e65 7474480a 696c4370     ponse....HttpCli
   d7ec8:	3e746e65 646e4509 20666f20 50545448     ent>.End of HTTP
   d7ed8:	73655220 736e6f70 00282065 2e29736d      Response (.ms).
   d7ee8:	74744800 696c4370 3e746e65 61745309     .HttpClient>.Sta
   d7ef8:	20737574 65646f43 0d00203a 000a0d0a     tus Code: ......
   d7f08:	70747448 65696c43 093e746e 6f727245     HttpClient>.Erro
   d7f18:	43203a72 74276e61 6e696620 54482064     r: Can't find HT
   d7f28:	72205054 6f707365 2065736e 79646f62     TP response body
   d7f38:	0000002e                                ....

000d7f3c <_ZTVN5spark13EthernetClassE>:
	...
   d7f44:	000d56e3 000d56d9 000d56cf 000d56c5     .V...V...V...V..
   d7f54:	000d56b9 000d56ad 000d6b9d 000d6ba5     .V...V...k...k..
   d7f64:	000d56a1 000d5699 000d568f 000d5685     .V...V...V...V..
   d7f74:	000d6bd5                                .k..

000d7f78 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7f78:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   d7f88:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   d7f98:	72756769 6f697461 7369206e 766e6920     iguration is inv
   d7fa8:	64696c61 0000002e                       alid....

000d7fb0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d7fb8:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   d7fc8:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000d7fd8 <_ZTV9IPAddress>:
	...
   d7fe0:	000d6113 000d6103 000d6105              .a...a...a..

000d7fec <_ZTV9USBSerial>:
	...
   d7ff4:	000d6221 000d6289 000d625f 000d5e11     !b...b.._b...^..
   d8004:	000d6251 000d6223 000d6233 000d6283     Qb..#b..3b...b..
   d8014:	000d6243 000d621d                       Cb...b..

000d801c <_ZTV11USARTSerial>:
	...
   d8024:	000d632d 000d6399 000d6371 000d5e11     -c...c..qc...^..
   d8034:	000d6341 000d635d 000d634f 000d636b     Ac..]c..Oc..kc..
   d8044:	000d632f 000d6333                       /c..3c..

000d804c <_ZTV7TwoWire>:
	...
   d8054:	000d6429 000d6473 000d644b 000d642b     )d..sd..Kd..+d..
   d8064:	000d6453 000d645b 000d6463 000d646b     Sd..[d..cd..kd..
   d8074:	76636572 72726520 3d20726f 00642520     recv error = %d.

000d8084 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d808c:	000d65af 000d65d1 000d69eb 000d65df     .e...e...i...e..
   d809c:	000d65b1                                .e..

000d80a0 <_ZTV9TCPClient>:
	...
   d80a8:	000d665d 000d6691 000d652d 000d6547     ]f...f..-e..Ge..
   d80b8:	000d6881 000d66f3 000d66c5 000d6571     .h...f...f..qe..
   d80c8:	000d678b 000d69f1 000d6727 000d6935     .g...i..'g..5i..
   d80d8:	000d6573 000d65a5 000d6559 000d65e3     se...e..Ye...e..
   d80e8:	000d66a5                                .f..

000d80ec <_ZTVN5spark9WiFiClassE>:
	...
   d80f4:	000d6b3f 000d6b35 000d6b2b 000d6aed     ?k..5k..+k...j..
   d8104:	000d5ee3 000d6b1f 000d6b9d 000d6ba5     .^...k...k...k..
   d8114:	000d6b13 000d6b0b 000d6b01 000d6af7     .k...k...k...j..
   d8124:	000d6bd5                                .k..

000d8128 <_ZTVN5spark12NetworkClassE>:
	...
   d8130:	000d6b5d 000d6b67 000d6b71 000d6b7b     ]k..gk..qk..{k..
   d8140:	000d6b85 000d6b91 000d6b9d 000d6ba5     .k...k...k...k..
   d8150:	000d6bad 000d6bb9 000d6bc1 000d6bcb     .k...k...k...k..
   d8160:	000d6bd5                                .k..

000d8164 <_ZSt7nothrow>:
	...

000d8165 <_ZTSSt19_Sp_make_shared_tag>:
   d8165:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d8175:	5f646572 00676174                        red_tag....

000d8180 <_ZTISt19_Sp_make_shared_tag>:
   d8180:	000d81c0 000d8165                       ....e...

000d8188 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d8188:	000d8220 000d8194 000d8244               .......D...

000d8194 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d8194:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d81a4:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d81b4:	00000045                                E...

000d81b8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d81b8:	00000000 000d8188 000d6ea5 000d6eb9     .........n...n..
   d81c8:	000d704d 000d704d 000d6f23 000d6e65     Mp..Mp..#o..en..
   d81d8:	000d6f0b 000d6ecd 000d6e99              .o...n...n..

000d81e4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d81e4:	000d8220 000d81f0 000d8188               ...........

000d81f0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d81f0:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d8200:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d8210:	456f666e 00000000                       nfoE....

000d8218 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d8218:	00000000 000d81e4 000d6f4d 000d6f61     ........Mo..ao..
   d8228:	000d704d 000d704d 000d6f23 000d6e65     Mp..Mp..#o..en..
   d8238:	000d7021 000d6fad 000d6f75              !p...o..uo..

000d8244 <_ZTISt9type_info>:
   d8244:	000d81c0 000d824c                       ....L...

000d824c <_ZTSSt9type_info>:
   d824c:	74397453 5f657079 6f666e69               St9type_info.

000d8259 <_ctype_>:
   d8259:	20202000 20202020 28282020 20282828     .         ((((( 
   d8269:	20202020 20202020 20202020 20202020                     
   d8279:	10108820 10101010 10101010 10101010      ...............
   d8289:	04040410 04040404 10040404 10101010     ................
   d8299:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d82a9:	01010101 01010101 01010101 10101010     ................
   d82b9:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d82c9:	02020202 02020202 02020202 10101010     ................
   d82d9:	00000020 00000000 00000000 00000000      ...............
	...

000d835a <link_const_variable_data_end>:
	...

000d835c <link_constructors_location>:
   d835c:	000d45f9 	.word	0x000d45f9
   d8360:	000d56ed 	.word	0x000d56ed
   d8364:	000d5961 	.word	0x000d5961
   d8368:	000d5de9 	.word	0x000d5de9
   d836c:	000d5ef1 	.word	0x000d5ef1
   d8370:	000d5f75 	.word	0x000d5f75
   d8374:	000d5f9d 	.word	0x000d5f9d
   d8378:	000d6b49 	.word	0x000d6b49
   d837c:	000d6cb5 	.word	0x000d6cb5
