
e:/IoT/motionalysis/target/3.0.0/argon/motionalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006fa4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000dafc0  000dafc0  0000afc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000dafc8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  2003ded4  000dafcc  0001ded4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000888  2003df68  2003df68  0002df68  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000db060  000db060  0002b060  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000db088  000db088  0002b088  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001aeaa8  00000000  00000000  0002b08c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000191dc  00000000  00000000  001d9b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003c212  00000000  00000000  001f2d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000033b0  00000000  00000000  0022ef22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000a928  00000000  00000000  002322d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003b5da  00000000  00000000  0023cbfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00042a53  00000000  00000000  002781d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013230c  00000000  00000000  002bac27  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000091e0  00000000  00000000  003ecf34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
   d4022:	b508      	push	{r3, lr}
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f006 f8a1 	bl	da174 <memcpy>
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f006 f8c3 	bl	da1c4 <memset>
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003ded4 	.word	0x2003ded4
   d4048:	000dafcc 	.word	0x000dafcc
   d404c:	2003df68 	.word	0x2003df68
   d4050:	2003df68 	.word	0x2003df68
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
   d4058:	b570      	push	{r4, r5, r6, lr}
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d405e:	f004 f9ad 	bl	d83bc <module_user_init_hook>
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
   d406c:	bd70      	pop	{r4, r5, r6, pc}
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000daf9c 	.word	0x000daf9c
   d407c:	000dafc0 	.word	0x000dafc0

000d4080 <module_user_setup>:
   d4080:	f000 b8da 	b.w	d4238 <setup>

000d4084 <module_user_loop>:
   d4084:	b508      	push	{r3, lr}
   d4086:	f000 f9d3 	bl	d4430 <loop>
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d408e:	f004 b957 	b.w	d8340 <_post_loop>

000d4092 <_Znwj>:
   d4092:	f002 b8f1 	b.w	d6278 <malloc>

000d4096 <_Znaj>:
   d4096:	f002 b8ef 	b.w	d6278 <malloc>

000d409a <_ZdlPv>:
   d409a:	f002 b8f5 	b.w	d6288 <free>

000d409e <__cxa_guard_acquire>:
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   d40ae:	4770      	bx	lr

000d40b0 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   d40b0:	b510      	push	{r4, lr}
   d40b2:	4604      	mov	r4, r0
   d40b4:	3004      	adds	r0, #4
   d40b6:	f002 fb9f 	bl	d67f8 <_ZN6StringD1Ev>
   d40ba:	4620      	mov	r0, r4
   d40bc:	bd10      	pop	{r4, pc}

000d40be <_ZN14http_request_tD1Ev>:
} http_request_t;
   d40be:	b510      	push	{r4, lr}
   d40c0:	4604      	mov	r4, r0
   d40c2:	303c      	adds	r0, #60	; 0x3c
   d40c4:	f002 fb98 	bl	d67f8 <_ZN6StringD1Ev>
   d40c8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d40cc:	f002 fb94 	bl	d67f8 <_ZN6StringD1Ev>
   d40d0:	4620      	mov	r0, r4
   d40d2:	f002 fb91 	bl	d67f8 <_ZN6StringD1Ev>
   d40d6:	4620      	mov	r0, r4
   d40d8:	bd10      	pop	{r4, pc}
	...

000d40dc <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv>:
  }

  count++;
}

void connectCallback(const BlePeerDevice& peer, void* context){
   d40dc:	b508      	push	{r3, lr}
  count = 0;
   d40de:	4b07      	ldr	r3, [pc, #28]	; (d40fc <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x20>)
   d40e0:	2200      	movs	r2, #0
   d40e2:	601a      	str	r2, [r3, #0]
  Serial.println("connected");
   d40e4:	f004 fa9a 	bl	d861c <_Z16_fetch_usbserialv>
   d40e8:	4905      	ldr	r1, [pc, #20]	; (d4100 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x24>)
   d40ea:	f003 ff98 	bl	d801e <_ZN5Print7printlnEPKc>
  digitalWrite(D7, HIGH);
}
   d40ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(D7, HIGH);
   d40f2:	2101      	movs	r1, #1
   d40f4:	2007      	movs	r0, #7
   d40f6:	f004 bff2 	b.w	d90de <digitalWrite>
   d40fa:	bf00      	nop
   d40fc:	2003dfd0 	.word	0x2003dfd0
   d4100:	000da3df 	.word	0x000da3df

000d4104 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv>:

void disconnectCallback(const BlePeerDevice& peer, void* context){
   d4104:	b508      	push	{r3, lr}
  Serial.println("disconnected");
   d4106:	f004 fa89 	bl	d861c <_Z16_fetch_usbserialv>
   d410a:	4904      	ldr	r1, [pc, #16]	; (d411c <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   d410c:	f003 ff87 	bl	d801e <_ZN5Print7printlnEPKc>
  digitalWrite(D7, LOW);
   d4110:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(D7, LOW);
   d4114:	2100      	movs	r1, #0
   d4116:	2007      	movs	r0, #7
   d4118:	f004 bfe1 	b.w	d90de <digitalWrite>
   d411c:	000da3dc 	.word	0x000da3dc

000d4120 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d4120:	b538      	push	{r3, r4, r5, lr}
   d4122:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d4124:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d4126:	b128      	cbz	r0, d4134 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d4128:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d412a:	210c      	movs	r1, #12
   d412c:	f005 f85f 	bl	d91ee <_ZdlPvj>
            wakeupSource = next;
   d4130:	4628      	mov	r0, r5
        while (wakeupSource) {
   d4132:	e7f8      	b.n	d4126 <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d4134:	4620      	mov	r0, r4
   d4136:	bd38      	pop	{r3, r4, r5, pc}

000d4138 <_ZN10CloudClass8syncTimeEv.isra.0>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   d4138:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d413a:	f002 f86d 	bl	d6218 <spark_cloud_flag_connected>
        if (!connected()) {
   d413e:	b120      	cbz	r0, d414a <_ZN10CloudClass8syncTimeEv.isra.0+0x12>
    }
   d4140:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return spark_sync_time(NULL);
   d4144:	2000      	movs	r0, #0
   d4146:	f002 b86f 	b.w	d6228 <spark_sync_time>
    }
   d414a:	bd08      	pop	{r3, pc}

000d414c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>:
    EEPtr begin()                        { return 0x00; }
    EEPtr end()                          { return length(); } //Standards requires this to be the item after the last valid entry. The returned pointer is invalid.
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
   d414c:	b510      	push	{r4, lr}
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d414e:	2204      	movs	r2, #4
    template <typename T> T &get( int idx, T &t )
   d4150:	460c      	mov	r4, r1
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4152:	f001 fd3f 	bl	d5bd4 <HAL_EEPROM_Get>
        return t;
    }
   d4156:	4620      	mov	r0, r4
   d4158:	bd10      	pop	{r4, pc}
	...

000d415c <_ZN10HttpClientD1Ev>:

class HttpClient {
   d415c:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d415e:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4160:	4b0a      	ldr	r3, [pc, #40]	; (d418c <_ZN10HttpClientD1Ev+0x30>)
   d4162:	6003      	str	r3, [r0, #0]
   d4164:	4605      	mov	r5, r0
   d4166:	b17c      	cbz	r4, d4188 <_ZN10HttpClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4168:	6863      	ldr	r3, [r4, #4]
   d416a:	3b01      	subs	r3, #1
   d416c:	6063      	str	r3, [r4, #4]
   d416e:	b95b      	cbnz	r3, d4188 <_ZN10HttpClientD1Ev+0x2c>
          _M_dispose();
   d4170:	6823      	ldr	r3, [r4, #0]
   d4172:	4620      	mov	r0, r4
   d4174:	689b      	ldr	r3, [r3, #8]
   d4176:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4178:	68a3      	ldr	r3, [r4, #8]
   d417a:	3b01      	subs	r3, #1
   d417c:	60a3      	str	r3, [r4, #8]
   d417e:	b91b      	cbnz	r3, d4188 <_ZN10HttpClientD1Ev+0x2c>
            _M_destroy();
   d4180:	6823      	ldr	r3, [r4, #0]
   d4182:	4620      	mov	r0, r4
   d4184:	68db      	ldr	r3, [r3, #12]
   d4186:	4798      	blx	r3
   d4188:	4628      	mov	r0, r5
   d418a:	bd38      	pop	{r3, r4, r5, pc}
   d418c:	000dace8 	.word	0x000dace8

000d4190 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4190:	b510      	push	{r4, lr}
   d4192:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4194:	6800      	ldr	r0, [r0, #0]
   d4196:	b108      	cbz	r0, d419c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4198:	f002 f876 	bl	d6288 <free>
class SystemClass {
   d419c:	4620      	mov	r0, r4
   d419e:	bd10      	pop	{r4, pc}

000d41a0 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d41a0:	2300      	movs	r3, #0
   d41a2:	6840      	ldr	r0, [r0, #4]
   d41a4:	461a      	mov	r2, r3
   d41a6:	4619      	mov	r1, r3
   d41a8:	f001 bfce 	b.w	d6148 <network_on>

000d41ac <_ZN5spark9WiFiClass3offEv>:
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d41ac:	2300      	movs	r3, #0
   d41ae:	6840      	ldr	r0, [r0, #4]
   d41b0:	461a      	mov	r2, r3
   d41b2:	4619      	mov	r1, r3
   d41b4:	f001 bfd0 	b.w	d6158 <network_off>

000d41b8 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d41b8:	2300      	movs	r3, #0
   d41ba:	6840      	ldr	r0, [r0, #4]
   d41bc:	461a      	mov	r2, r3
   d41be:	f001 bfa3 	b.w	d6108 <network_connect>

000d41c2 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d41c2:	2200      	movs	r2, #0
   d41c4:	6840      	ldr	r0, [r0, #4]
   d41c6:	4611      	mov	r1, r2
   d41c8:	f001 bfb6 	b.w	d6138 <network_ready>

000d41cc <_ZN8particle24SystemSleepConfiguration8durationEm>:
            gpio(pins[i], mode);
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d41cc:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d41ce:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d41d0:	4605      	mov	r5, r0
   d41d2:	460e      	mov	r6, r1
        if (valid_) {
   d41d4:	b1cb      	cbz	r3, d420a <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d41d6:	6803      	ldr	r3, [r0, #0]
   d41d8:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d41da:	b123      	cbz	r3, d41e6 <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d41dc:	889a      	ldrh	r2, [r3, #4]
   d41de:	2a04      	cmp	r2, #4
   d41e0:	d017      	beq.n	d4212 <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d41e2:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d41e4:	e7f9      	b.n	d41da <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d41e6:	490c      	ldr	r1, [pc, #48]	; (d4218 <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d41e8:	2010      	movs	r0, #16
   d41ea:	f005 f802 	bl	d91f2 <_ZnwjRKSt9nothrow_t>
   d41ee:	4604      	mov	r4, r0
   d41f0:	b168      	cbz	r0, d420e <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d41f2:	2210      	movs	r2, #16
   d41f4:	2100      	movs	r1, #0
   d41f6:	f005 ffe5 	bl	da1c4 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d41fa:	4b08      	ldr	r3, [pc, #32]	; (d421c <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d41fc:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d41fe:	2304      	movs	r3, #4
   d4200:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4202:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4204:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d4206:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d420a:	4628      	mov	r0, r5
   d420c:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d420e:	7528      	strb	r0, [r5, #20]
                return *this;
   d4210:	e7fb      	b.n	d420a <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4212:	60de      	str	r6, [r3, #12]
                return *this;
   d4214:	e7f9      	b.n	d420a <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d4216:	bf00      	nop
   d4218:	000dada4 	.word	0x000dada4
   d421c:	00030010 	.word	0x00030010

000d4220 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   d4220:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4222:	f001 fcc7 	bl	d5bb4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4226:	4b03      	ldr	r3, [pc, #12]	; (d4234 <_ZN10CloudClass7processEv+0x14>)
   d4228:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d422a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   d422e:	f001 bfe3 	b.w	d61f8 <spark_process>
   d4232:	bf00      	nop
   d4234:	2003e7cc 	.word	0x2003e7cc

000d4238 <setup>:
void setup() {
   d4238:	b510      	push	{r4, lr}
   d423a:	b096      	sub	sp, #88	; 0x58
  EEPROM.get(200, wifiTimeLeft);
   d423c:	f004 ff7c 	bl	d9138 <_Z21__fetch_global_EEPROMv>
   d4240:	494c      	ldr	r1, [pc, #304]	; (d4374 <setup+0x13c>)
   d4242:	20c8      	movs	r0, #200	; 0xc8
   d4244:	f7ff ff82 	bl	d414c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
        if (valid_) {
   d4248:	4b4b      	ldr	r3, [pc, #300]	; (d4378 <setup+0x140>)
   d424a:	7d1a      	ldrb	r2, [r3, #20]
   d424c:	b10a      	cbz	r2, d4252 <setup+0x1a>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d424e:	2202      	movs	r2, #2
   d4250:	721a      	strb	r2, [r3, #8]
  config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(1000 - SLEEP_DELAY);
   d4252:	f240 31a2 	movw	r1, #930	; 0x3a2
   d4256:	4848      	ldr	r0, [pc, #288]	; (d4378 <setup+0x140>)
  request.hostname = "trek.thewcl.com";
   d4258:	4c48      	ldr	r4, [pc, #288]	; (d437c <setup+0x144>)
  config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(1000 - SLEEP_DELAY);
   d425a:	f7ff ffb7 	bl	d41cc <_ZN8particle24SystemSleepConfiguration8durationEm>
  Serial.begin(9600);
   d425e:	f004 f9dd 	bl	d861c <_Z16_fetch_usbserialv>
   d4262:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4266:	f004 f9cd 	bl	d8604 <_ZN9USBSerial5beginEl>
  lis.begin(0x18);
   d426a:	2118      	movs	r1, #24
   d426c:	4844      	ldr	r0, [pc, #272]	; (d4380 <setup+0x148>)
   d426e:	f001 fb28 	bl	d58c2 <_ZN15Adafruit_LIS3DH5beginEh>
  Wire.end();
   d4272:	f004 ff8f 	bl	d9194 <_Z19__fetch_global_Wirev>
   d4276:	f004 fabd 	bl	d87f4 <_ZN7TwoWire3endEv>
  lis.begin(I2C_ADDRESS);
   d427a:	2119      	movs	r1, #25
   d427c:	4840      	ldr	r0, [pc, #256]	; (d4380 <setup+0x148>)
   d427e:	f001 fb20 	bl	d58c2 <_ZN15Adafruit_LIS3DH5beginEh>
  lis.setRange(LIS3DH_RANGE_16_G);
   d4282:	483f      	ldr	r0, [pc, #252]	; (d4380 <setup+0x148>)
   d4284:	2103      	movs	r1, #3
   d4286:	f001 faf3 	bl	d5870 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>
  lis.setDataRate(LIS3DH_DATARATE_100_HZ);
   d428a:	483d      	ldr	r0, [pc, #244]	; (d4380 <setup+0x148>)
   d428c:	2105      	movs	r1, #5
   d428e:	f001 fb07 	bl	d58a0 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  pinMode(SDO_OUTPUT_PIN, OUTPUT);
   d4292:	2101      	movs	r1, #1
   d4294:	2008      	movs	r0, #8
   d4296:	f004 ff11 	bl	d90bc <pinMode>
  digitalWrite(SDO_OUTPUT_PIN, HIGH);
   d429a:	2101      	movs	r1, #1
   d429c:	2008      	movs	r0, #8
   d429e:	f004 ff1e 	bl	d90de <digitalWrite>
  request.hostname = "trek.thewcl.com";
   d42a2:	4938      	ldr	r1, [pc, #224]	; (d4384 <setup+0x14c>)
   d42a4:	4620      	mov	r0, r4
   d42a6:	f002 fb3a 	bl	d691e <_ZN6StringaSEPKc>
  request.port = 3000;
   d42aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
  request.path = "/";
   d42ae:	4936      	ldr	r1, [pc, #216]	; (d4388 <setup+0x150>)
  request.port = 3000;
   d42b0:	63a3      	str	r3, [r4, #56]	; 0x38
  request.path = "/";
   d42b2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d42b6:	f002 fb32 	bl	d691e <_ZN6StringaSEPKc>
  BLE.on();
   d42ba:	f003 f861 	bl	d7380 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42be:	f003 f8ad 	bl	d741c <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   d42c2:	f003 f85d 	bl	d7380 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42c6:	4a31      	ldr	r2, [pc, #196]	; (d438c <setup+0x154>)
   d42c8:	4601      	mov	r1, r0
   d42ca:	a80d      	add	r0, sp, #52	; 0x34
   d42cc:	f003 fd4a 	bl	d7d64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d42d0:	a80d      	add	r0, sp, #52	; 0x34
   d42d2:	f003 f942 	bl	d755a <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   d42d6:	f003 f853 	bl	d7380 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42da:	4a2d      	ldr	r2, [pc, #180]	; (d4390 <setup+0x158>)
   d42dc:	4601      	mov	r1, r0
   d42de:	a80d      	add	r0, sp, #52	; 0x34
   d42e0:	f003 fd40 	bl	d7d64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d42e4:	a80d      	add	r0, sp, #52	; 0x34
   d42e6:	f003 f938 	bl	d755a <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   d42ea:	a80d      	add	r0, sp, #52	; 0x34
   d42ec:	f002 fec3 	bl	d7076 <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   d42f0:	4928      	ldr	r1, [pc, #160]	; (d4394 <setup+0x15c>)
   d42f2:	a803      	add	r0, sp, #12
   d42f4:	f002 fdc2 	bl	d6e7c <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d42f8:	a903      	add	r1, sp, #12
   d42fa:	a808      	add	r0, sp, #32
   d42fc:	f002 fdbe 	bl	d6e7c <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4300:	a808      	add	r0, sp, #32
   d4302:	f002 fe01 	bl	d6f08 <_ZNK8particle7BleUuid4typeEv>
   d4306:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d4308:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   d430a:	bb54      	cbnz	r4, d4362 <setup+0x12a>
            uint16_t uuid16 = tempUUID.shorted();
   d430c:	f002 fe1b 	bl	d6f46 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4310:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d4312:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4316:	2302      	movs	r3, #2
   d4318:	f10d 020a 	add.w	r2, sp, #10
   d431c:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d431e:	a80d      	add	r0, sp, #52	; 0x34
   d4320:	f002 fe9e 	bl	d7060 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   d4324:	f003 f82c 	bl	d7380 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4328:	a90d      	add	r1, sp, #52	; 0x34
   d432a:	2200      	movs	r2, #0
   d432c:	f003 f896 	bl	d745c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  BLE.onConnected(connectCallback);
   d4330:	f003 f826 	bl	d7380 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4334:	4918      	ldr	r1, [pc, #96]	; (d4398 <setup+0x160>)
   d4336:	2200      	movs	r2, #0
   d4338:	f003 fc0a 	bl	d7b50 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
  BLE.onDisconnected(disconnectCallback);
   d433c:	f003 f820 	bl	d7380 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4340:	2200      	movs	r2, #0
   d4342:	4916      	ldr	r1, [pc, #88]	; (d439c <setup+0x164>)
   d4344:	f003 fc1a 	bl	d7b7c <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
  pinMode(D7, OUTPUT);
   d4348:	2101      	movs	r1, #1
   d434a:	2007      	movs	r0, #7
   d434c:	f004 feb6 	bl	d90bc <pinMode>
  count = 0;
   d4350:	4b13      	ldr	r3, [pc, #76]	; (d43a0 <setup+0x168>)
   d4352:	2200      	movs	r2, #0
   d4354:	601a      	str	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4356:	f001 fc2d 	bl	d5bb4 <HAL_Timer_Get_Milli_Seconds>
  time1 = millis();
   d435a:	4b12      	ldr	r3, [pc, #72]	; (d43a4 <setup+0x16c>)
   d435c:	6018      	str	r0, [r3, #0]
}
   d435e:	b016      	add	sp, #88	; 0x58
   d4360:	bd10      	pop	{r4, pc}
   d4362:	f002 fdf5 	bl	d6f50 <_ZNK8particle7BleUuid8rawBytesEv>
   d4366:	2300      	movs	r3, #0
   d4368:	9300      	str	r3, [sp, #0]
   d436a:	4602      	mov	r2, r0
   d436c:	2310      	movs	r3, #16
   d436e:	2107      	movs	r1, #7
   d4370:	e7d5      	b.n	d431e <setup+0xe6>
   d4372:	bf00      	nop
   d4374:	2003e62c 	.word	0x2003e62c
   d4378:	2003dfb8 	.word	0x2003dfb8
   d437c:	2003e580 	.word	0x2003e580
   d4380:	2003e404 	.word	0x2003e404
   d4384:	000da3e9 	.word	0x000da3e9
   d4388:	000da3f9 	.word	0x000da3f9
   d438c:	2003e614 	.word	0x2003e614
   d4390:	2003e5e0 	.word	0x2003e5e0
   d4394:	2003df78 	.word	0x2003df78
   d4398:	000d40dd 	.word	0x000d40dd
   d439c:	000d4105 	.word	0x000d4105
   d43a0:	2003dfd0 	.word	0x2003dfd0
   d43a4:	2003e608 	.word	0x2003e608

000d43a8 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d43a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d43aa:	4616      	mov	r6, r2
   d43ac:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d43ae:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d43b0:	e9c0 2200 	strd	r2, r2, [r0]
   d43b4:	4604      	mov	r4, r0
   d43b6:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d43b8:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d43ba:	4619      	mov	r1, r3
   d43bc:	a806      	add	r0, sp, #24
   d43be:	f002 fd5d 	bl	d6e7c <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d43c2:	9916      	ldr	r1, [sp, #88]	; 0x58
   d43c4:	4638      	mov	r0, r7
   d43c6:	f002 fd59 	bl	d6e7c <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d43ca:	7833      	ldrb	r3, [r6, #0]
   d43cc:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d43d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d43d2:	9302      	str	r3, [sp, #8]
   d43d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d43d6:	4620      	mov	r0, r4
   d43d8:	e9cd 7300 	strd	r7, r3, [sp]
   d43dc:	aa05      	add	r2, sp, #20
   d43de:	ab06      	add	r3, sp, #24
   d43e0:	4629      	mov	r1, r5
   d43e2:	f003 fb51 	bl	d7a88 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d43e6:	4620      	mov	r0, r4
   d43e8:	b011      	add	sp, #68	; 0x44
   d43ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d43ec <_ZN5Print7printlnIiLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   d43ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d43ee:	4605      	mov	r5, r0
   d43f0:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d43f2:	4616      	mov	r6, r2
   d43f4:	b94a      	cbnz	r2, d440a <_ZN5Print7printlnIiLi0EEEjT_i+0x1e>
        return write(n);
   d43f6:	6803      	ldr	r3, [r0, #0]
   d43f8:	b2c9      	uxtb	r1, r1
   d43fa:	689b      	ldr	r3, [r3, #8]
   d43fc:	4798      	blx	r3
   d43fe:	4607      	mov	r7, r0
        n += println();
   d4400:	4628      	mov	r0, r5
   d4402:	f003 fe00 	bl	d8006 <_ZN5Print7printlnEv>
    }
   d4406:	4438      	add	r0, r7
   d4408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d440a:	2900      	cmp	r1, #0
   d440c:	da0c      	bge.n	d4428 <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
   d440e:	2a0a      	cmp	r2, #10
   d4410:	d10a      	bne.n	d4428 <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
            t = print('-');
   d4412:	212d      	movs	r1, #45	; 0x2d
   d4414:	f003 fdee 	bl	d7ff4 <_ZN5Print5printEc>
            val = -n;
   d4418:	4261      	negs	r1, r4
            t = print('-');
   d441a:	4607      	mov	r7, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d441c:	b2f2      	uxtb	r2, r6
   d441e:	4628      	mov	r0, r5
   d4420:	f003 fe07 	bl	d8032 <_ZN5Print11printNumberEmh>
   d4424:	4407      	add	r7, r0
   d4426:	e7eb      	b.n	d4400 <_ZN5Print7printlnIiLi0EEEjT_i+0x14>
            val = n;
   d4428:	4621      	mov	r1, r4
        size_t t = 0;
   d442a:	2700      	movs	r7, #0
   d442c:	e7f6      	b.n	d441c <_ZN5Print7printlnIiLi0EEEjT_i+0x30>
	...

000d4430 <loop>:
void loop() {
   d4430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4434:	ed2d 8b02 	vpush	{d8}
  if(ota){
   d4438:	4c09      	ldr	r4, [pc, #36]	; (d4460 <loop+0x30>)
void loop() {
   d443a:	b097      	sub	sp, #92	; 0x5c
  Particle.process();
   d443c:	f7ff fef0 	bl	d4220 <_ZN10CloudClass7processEv>
  if(ota){
   d4440:	7825      	ldrb	r5, [r4, #0]
   d4442:	b17d      	cbz	r5, d4464 <loop+0x34>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4444:	f001 fee8 	bl	d6218 <spark_cloud_flag_connected>
    while(!Particle.connected()){
   d4448:	b920      	cbnz	r0, d4454 <loop+0x24>
      Particle.process();
   d444a:	f7ff fee9 	bl	d4220 <_ZN10CloudClass7processEv>
        spark_cloud_flag_connect();
   d444e:	f001 fedb 	bl	d6208 <spark_cloud_flag_connect>
    }
   d4452:	e7f7      	b.n	d4444 <loop+0x14>
    ota = false;
   d4454:	2300      	movs	r3, #0
   d4456:	7023      	strb	r3, [r4, #0]
    while(true){Particle.process();}
   d4458:	f7ff fee2 	bl	d4220 <_ZN10CloudClass7processEv>
   d445c:	e7fc      	b.n	d4458 <loop+0x28>
   d445e:	bf00      	nop
   d4460:	2003e55c 	.word	0x2003e55c
   d4464:	f001 fba6 	bl	d5bb4 <HAL_Timer_Get_Milli_Seconds>
  time2 = millis();
   d4468:	4bc9      	ldr	r3, [pc, #804]	; (d4790 <loop+0x360>)
   d446a:	6018      	str	r0, [r3, #0]
  if(bleInput | ((time2 - CONFIG_WAIT_TIME >= time1) && WiFi.hasCredentials() && !(BLE.connected()))){
   d446c:	4bc9      	ldr	r3, [pc, #804]	; (d4794 <loop+0x364>)
   d446e:	f5a0 40ea 	sub.w	r0, r0, #29952	; 0x7500
   d4472:	681b      	ldr	r3, [r3, #0]
   d4474:	382f      	subs	r0, #47	; 0x2f
   d4476:	4298      	cmp	r0, r3
   d4478:	f300 81ec 	bgt.w	d4854 <loop+0x424>
   d447c:	4bc6      	ldr	r3, [pc, #792]	; (d4798 <loop+0x368>)
   d447e:	781b      	ldrb	r3, [r3, #0]
   d4480:	2b00      	cmp	r3, #0
   d4482:	f000 81e2 	beq.w	d484a <loop+0x41a>
    if(!timeFix){
   d4486:	4cc5      	ldr	r4, [pc, #788]	; (d479c <loop+0x36c>)
   d4488:	7825      	ldrb	r5, [r4, #0]
   d448a:	bb2d      	cbnz	r5, d44d8 <loop+0xa8>
      Particle.process();
   d448c:	f7ff fec8 	bl	d4220 <_ZN10CloudClass7processEv>
      WiFi.on();
   d4490:	48c3      	ldr	r0, [pc, #780]	; (d47a0 <loop+0x370>)
   d4492:	f7ff fe85 	bl	d41a0 <_ZN5spark9WiFiClass2onEv>
      WiFi.connect();
   d4496:	4629      	mov	r1, r5
   d4498:	48c1      	ldr	r0, [pc, #772]	; (d47a0 <loop+0x370>)
      while(!WiFi.ready()){}
   d449a:	4dc1      	ldr	r5, [pc, #772]	; (d47a0 <loop+0x370>)
      WiFi.connect();
   d449c:	f7ff fe8c 	bl	d41b8 <_ZN5spark9WiFiClass7connectEj>
      while(!WiFi.ready()){}
   d44a0:	4628      	mov	r0, r5
   d44a2:	f7ff fe8e 	bl	d41c2 <_ZN5spark9WiFiClass5readyEv>
   d44a6:	2800      	cmp	r0, #0
   d44a8:	d0fa      	beq.n	d44a0 <loop+0x70>
        spark_cloud_flag_connect();
   d44aa:	f001 fead 	bl	d6208 <spark_cloud_flag_connect>
      Particle.syncTime();
   d44ae:	f7ff fe43 	bl	d4138 <_ZN10CloudClass8syncTimeEv.isra.0>
      delay(5000);
   d44b2:	f241 3088 	movw	r0, #5000	; 0x1388
   d44b6:	f003 ff09 	bl	d82cc <delay>
      Particle.process();
   d44ba:	f7ff feb1 	bl	d4220 <_ZN10CloudClass7processEv>
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
   d44be:	2300      	movs	r3, #0
      Particle.disconnect();
   d44c0:	a812      	add	r0, sp, #72	; 0x48
   d44c2:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
   d44c6:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
   d44ca:	f003 ffa9 	bl	d8420 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
      WiFi.off();
   d44ce:	48b4      	ldr	r0, [pc, #720]	; (d47a0 <loop+0x370>)
   d44d0:	f7ff fe6c 	bl	d41ac <_ZN5spark9WiFiClass3offEv>
      timeFix = true;
   d44d4:	2301      	movs	r3, #1
   d44d6:	7023      	strb	r3, [r4, #0]
    EEPROM.get(0, dsid);
   d44d8:	f004 fe2e 	bl	d9138 <_Z21__fetch_global_EEPROMv>
   d44dc:	49b1      	ldr	r1, [pc, #708]	; (d47a4 <loop+0x374>)
   d44de:	2000      	movs	r0, #0
   d44e0:	f7ff fe34 	bl	d414c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(100, sleepDuration);
   d44e4:	f004 fe28 	bl	d9138 <_Z21__fetch_global_EEPROMv>
   d44e8:	49af      	ldr	r1, [pc, #700]	; (d47a8 <loop+0x378>)
   d44ea:	2064      	movs	r0, #100	; 0x64
   d44ec:	f7ff fe2e 	bl	d414c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(200, wifiInterval);
   d44f0:	f004 fe22 	bl	d9138 <_Z21__fetch_global_EEPROMv>
   d44f4:	49ad      	ldr	r1, [pc, #692]	; (d47ac <loop+0x37c>)
   d44f6:	20c8      	movs	r0, #200	; 0xc8
   d44f8:	f7ff fe28 	bl	d414c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
        if (valid_) {
   d44fc:	4bac      	ldr	r3, [pc, #688]	; (d47b0 <loop+0x380>)
   d44fe:	7d1a      	ldrb	r2, [r3, #20]
   d4500:	b10a      	cbz	r2, d4506 <loop+0xd6>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4502:	2202      	movs	r2, #2
   d4504:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration - SLEEP_DELAY);
   d4506:	4ea8      	ldr	r6, [pc, #672]	; (d47a8 <loop+0x378>)
    lis.read();
   d4508:	4caa      	ldr	r4, [pc, #680]	; (d47b4 <loop+0x384>)
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration - SLEEP_DELAY);
   d450a:	6831      	ldr	r1, [r6, #0]
   d450c:	48a8      	ldr	r0, [pc, #672]	; (d47b0 <loop+0x380>)
    payload +=  "{\"dsid\":" + String(dsid) + ", \"value\":\"" + String(round(lis.x_g * ROUNDING_FACTOR) / ROUNDING_FACTOR) + "," + String(round(lis.y_g * ROUNDING_FACTOR) / ROUNDING_FACTOR) + "," + String(round(lis.z_g * ROUNDING_FACTOR) / ROUNDING_FACTOR) + "\", \"timestamp\":" + unixTime + "},";
   d450e:	f8df 8294 	ldr.w	r8, [pc, #660]	; d47a4 <loop+0x374>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4512:	4fa9      	ldr	r7, [pc, #676]	; (d47b8 <loop+0x388>)
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration - SLEEP_DELAY);
   d4514:	3946      	subs	r1, #70	; 0x46
   d4516:	f7ff fe59 	bl	d41cc <_ZN8particle24SystemSleepConfiguration8durationEm>
    lis.read();
   d451a:	4620      	mov	r0, r4
   d451c:	f001 fa22 	bl	d5964 <_ZN15Adafruit_LIS3DH4readEv>
    unixTime = Time.now();
   d4520:	f003 feba 	bl	d8298 <_ZN9TimeClass3nowEv>
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(char c) : String(c) {}
	StringSumHelper(unsigned char num) : String(num) {}
	StringSumHelper(int num) : String(num) {}
	StringSumHelper(unsigned int num) : String(num) {}
	StringSumHelper(long num) : String(num) {}
   d4524:	220a      	movs	r2, #10
   d4526:	4601      	mov	r1, r0
   d4528:	a812      	add	r0, sp, #72	; 0x48
   d452a:	f002 fa1d 	bl	d6968 <_ZN6StringC1Elh>
   d452e:	a912      	add	r1, sp, #72	; 0x48
   d4530:	48a2      	ldr	r0, [pc, #648]	; (d47bc <loop+0x38c>)
   d4532:	f002 f9ec 	bl	d690e <_ZN6StringaSEO15StringSumHelper>
class StringSumHelper : public String
   d4536:	a812      	add	r0, sp, #72	; 0x48
   d4538:	f002 f95e 	bl	d67f8 <_ZN6StringD1Ev>
    Serial.println(lis.x_g);
   d453c:	f004 f86e 	bl	d861c <_Z16_fetch_usbserialv>
   d4540:	ed94 0a03 	vldr	s0, [r4, #12]
   d4544:	2102      	movs	r1, #2
   d4546:	f003 fe66 	bl	d8216 <_ZN5Print7printlnEfi>
    Serial.println(lis.y_g);
   d454a:	f004 f867 	bl	d861c <_Z16_fetch_usbserialv>
   d454e:	ed94 0a04 	vldr	s0, [r4, #16]
   d4552:	2102      	movs	r1, #2
   d4554:	f003 fe5f 	bl	d8216 <_ZN5Print7printlnEfi>
    Serial.println(lis.z_g);
   d4558:	f004 f860 	bl	d861c <_Z16_fetch_usbserialv>
   d455c:	ed94 0a05 	vldr	s0, [r4, #20]
   d4560:	2102      	movs	r1, #2
   d4562:	f003 fe58 	bl	d8216 <_ZN5Print7printlnEfi>
	StringSumHelper(const char *p) : String(p) {}
   d4566:	4996      	ldr	r1, [pc, #600]	; (d47c0 <loop+0x390>)
   d4568:	a802      	add	r0, sp, #8
   d456a:	f002 f990 	bl	d688e <_ZN6StringC1EPKc>
    payload +=  "{\"dsid\":" + String(dsid) + ", \"value\":\"" + String(round(lis.x_g * ROUNDING_FACTOR) / ROUNDING_FACTOR) + "," + String(round(lis.y_g * ROUNDING_FACTOR) / ROUNDING_FACTOR) + "," + String(round(lis.z_g * ROUNDING_FACTOR) / ROUNDING_FACTOR) + "\", \"timestamp\":" + unixTime + "},";
   d456e:	220a      	movs	r2, #10
   d4570:	f8d8 1000 	ldr.w	r1, [r8]
   d4574:	a806      	add	r0, sp, #24
   d4576:	f002 f9e4 	bl	d6942 <_ZN6StringC1Eih>
   d457a:	a906      	add	r1, sp, #24
   d457c:	a802      	add	r0, sp, #8
   d457e:	f002 fa48 	bl	d6a12 <_ZplRK15StringSumHelperRK6String>
   d4582:	4990      	ldr	r1, [pc, #576]	; (d47c4 <loop+0x394>)
   d4584:	f002 fa51 	bl	d6a2a <_ZplRK15StringSumHelperPKc>
   d4588:	ed94 0a03 	vldr	s0, [r4, #12]
   d458c:	eeb2 8a04 	vmov.f32	s16, #36	; 0x41200000  10.0
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
   d4590:	ee20 0a08 	vmul.f32	s0, s0, s16
   d4594:	4605      	mov	r5, r0
   d4596:	f004 ff45 	bl	d9424 <roundf>
   d459a:	2106      	movs	r1, #6
   d459c:	ee80 0a08 	vdiv.f32	s0, s0, s16
   d45a0:	a80a      	add	r0, sp, #40	; 0x28
   d45a2:	f002 f9f4 	bl	d698e <_ZN6StringC1Efi>
   d45a6:	a90a      	add	r1, sp, #40	; 0x28
   d45a8:	4628      	mov	r0, r5
   d45aa:	f002 fa32 	bl	d6a12 <_ZplRK15StringSumHelperRK6String>
   d45ae:	4986      	ldr	r1, [pc, #536]	; (d47c8 <loop+0x398>)
   d45b0:	f002 fa3b 	bl	d6a2a <_ZplRK15StringSumHelperPKc>
   d45b4:	ed94 0a04 	vldr	s0, [r4, #16]
   d45b8:	ee20 0a08 	vmul.f32	s0, s0, s16
   d45bc:	4605      	mov	r5, r0
   d45be:	f004 ff31 	bl	d9424 <roundf>
   d45c2:	2106      	movs	r1, #6
   d45c4:	ee80 0a08 	vdiv.f32	s0, s0, s16
   d45c8:	a80e      	add	r0, sp, #56	; 0x38
   d45ca:	f002 f9e0 	bl	d698e <_ZN6StringC1Efi>
   d45ce:	a90e      	add	r1, sp, #56	; 0x38
   d45d0:	4628      	mov	r0, r5
   d45d2:	f002 fa1e 	bl	d6a12 <_ZplRK15StringSumHelperRK6String>
   d45d6:	497c      	ldr	r1, [pc, #496]	; (d47c8 <loop+0x398>)
   d45d8:	f002 fa27 	bl	d6a2a <_ZplRK15StringSumHelperPKc>
   d45dc:	ed94 0a05 	vldr	s0, [r4, #20]
    Serial.println(t3);
   d45e0:	4c7a      	ldr	r4, [pc, #488]	; (d47cc <loop+0x39c>)
   d45e2:	ee20 0a08 	vmul.f32	s0, s0, s16
    payload +=  "{\"dsid\":" + String(dsid) + ", \"value\":\"" + String(round(lis.x_g * ROUNDING_FACTOR) / ROUNDING_FACTOR) + "," + String(round(lis.y_g * ROUNDING_FACTOR) / ROUNDING_FACTOR) + "," + String(round(lis.z_g * ROUNDING_FACTOR) / ROUNDING_FACTOR) + "\", \"timestamp\":" + unixTime + "},";
   d45e6:	4605      	mov	r5, r0
   d45e8:	f004 ff1c 	bl	d9424 <roundf>
   d45ec:	2106      	movs	r1, #6
   d45ee:	ee80 0a08 	vdiv.f32	s0, s0, s16
   d45f2:	a812      	add	r0, sp, #72	; 0x48
   d45f4:	f002 f9cb 	bl	d698e <_ZN6StringC1Efi>
   d45f8:	a912      	add	r1, sp, #72	; 0x48
   d45fa:	4628      	mov	r0, r5
   d45fc:	f002 fa09 	bl	d6a12 <_ZplRK15StringSumHelperRK6String>
   d4600:	4973      	ldr	r1, [pc, #460]	; (d47d0 <loop+0x3a0>)
    Serial.println(wifiInterval);
   d4602:	4d6a      	ldr	r5, [pc, #424]	; (d47ac <loop+0x37c>)
    payload +=  "{\"dsid\":" + String(dsid) + ", \"value\":\"" + String(round(lis.x_g * ROUNDING_FACTOR) / ROUNDING_FACTOR) + "," + String(round(lis.y_g * ROUNDING_FACTOR) / ROUNDING_FACTOR) + "," + String(round(lis.z_g * ROUNDING_FACTOR) / ROUNDING_FACTOR) + "\", \"timestamp\":" + unixTime + "},";
   d4604:	f002 fa11 	bl	d6a2a <_ZplRK15StringSumHelperPKc>
   d4608:	496c      	ldr	r1, [pc, #432]	; (d47bc <loop+0x38c>)
   d460a:	f002 fa02 	bl	d6a12 <_ZplRK15StringSumHelperRK6String>
   d460e:	4971      	ldr	r1, [pc, #452]	; (d47d4 <loop+0x3a4>)
   d4610:	f002 fa0b 	bl	d6a2a <_ZplRK15StringSumHelperPKc>
   d4614:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4616:	4638      	mov	r0, r7
   d4618:	f002 f9ea 	bl	d69f0 <_ZN6String6concatERKS_>
   d461c:	a812      	add	r0, sp, #72	; 0x48
   d461e:	f002 f8eb 	bl	d67f8 <_ZN6StringD1Ev>
   d4622:	a80e      	add	r0, sp, #56	; 0x38
   d4624:	f002 f8e8 	bl	d67f8 <_ZN6StringD1Ev>
   d4628:	a80a      	add	r0, sp, #40	; 0x28
   d462a:	f002 f8e5 	bl	d67f8 <_ZN6StringD1Ev>
   d462e:	a806      	add	r0, sp, #24
   d4630:	f002 f8e2 	bl	d67f8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4634:	a802      	add	r0, sp, #8
   d4636:	f002 f8df 	bl	d67f8 <_ZN6StringD1Ev>
    Serial.println(payload);
   d463a:	f003 ffef 	bl	d861c <_Z16_fetch_usbserialv>
   d463e:	6839      	ldr	r1, [r7, #0]
   d4640:	f003 fced 	bl	d801e <_ZN5Print7printlnEPKc>
    Serial.println(dsid);
   d4644:	f003 ffea 	bl	d861c <_Z16_fetch_usbserialv>
   d4648:	f8d8 1000 	ldr.w	r1, [r8]
   d464c:	220a      	movs	r2, #10
   d464e:	f7ff fecd 	bl	d43ec <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println(sleepDuration);
   d4652:	f003 ffe3 	bl	d861c <_Z16_fetch_usbserialv>
   d4656:	6831      	ldr	r1, [r6, #0]
   d4658:	220a      	movs	r2, #10
   d465a:	f7ff fec7 	bl	d43ec <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println(wifiInterval);
   d465e:	f003 ffdd 	bl	d861c <_Z16_fetch_usbserialv>
   d4662:	6829      	ldr	r1, [r5, #0]
   d4664:	220a      	movs	r2, #10
   d4666:	f7ff fec1 	bl	d43ec <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println(t3);
   d466a:	f003 ffd7 	bl	d861c <_Z16_fetch_usbserialv>
   d466e:	6821      	ldr	r1, [r4, #0]
   d4670:	220a      	movs	r2, #10
   d4672:	f7ff febb 	bl	d43ec <_ZN5Print7printlnIiLi0EEEjT_i>
    BLE.disconnect();
   d4676:	f002 fe83 	bl	d7380 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d467a:	f003 f84d 	bl	d7718 <_ZNK8particle14BleLocalDevice10disconnectEv>
    BLE.off();
   d467e:	f002 fe7f 	bl	d7380 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4682:	f002 ffe3 	bl	d764c <_ZNK8particle14BleLocalDevice3offEv>
    System.sleep(config);
   d4686:	a812      	add	r0, sp, #72	; 0x48
   d4688:	4949      	ldr	r1, [pc, #292]	; (d47b0 <loop+0x380>)
   d468a:	f001 ff2f 	bl	d64ec <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d468e:	9812      	ldr	r0, [sp, #72]	; 0x48
   d4690:	46a8      	mov	r8, r5
   d4692:	b108      	cbz	r0, d4698 <loop+0x268>
            free(wakeupSource_);
   d4694:	f001 fdf8 	bl	d6288 <free>
   d4698:	f001 fa8c 	bl	d5bb4 <HAL_Timer_Get_Milli_Seconds>
    t2 = millis();
   d469c:	4b4e      	ldr	r3, [pc, #312]	; (d47d8 <loop+0x3a8>)
    if(wifiTimeLeft <= 0){
   d469e:	4d4f      	ldr	r5, [pc, #316]	; (d47dc <loop+0x3ac>)
    t2 = millis();
   d46a0:	6018      	str	r0, [r3, #0]
    t3 = t2 - t1;
   d46a2:	4b4f      	ldr	r3, [pc, #316]	; (d47e0 <loop+0x3b0>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	1ac0      	subs	r0, r0, r3
    if(wifiTimeLeft <= 0){
   d46a8:	682b      	ldr	r3, [r5, #0]
    t3 = t2 - t1;
   d46aa:	6020      	str	r0, [r4, #0]
    if(wifiTimeLeft <= 0){
   d46ac:	2b00      	cmp	r3, #0
   d46ae:	f300 80c8 	bgt.w	d4842 <loop+0x412>
      WiFi.on();
   d46b2:	483b      	ldr	r0, [pc, #236]	; (d47a0 <loop+0x370>)
      while(!WiFi.ready()){}
   d46b4:	4c3a      	ldr	r4, [pc, #232]	; (d47a0 <loop+0x370>)
      WiFi.on();
   d46b6:	f7ff fd73 	bl	d41a0 <_ZN5spark9WiFiClass2onEv>
      WiFi.connect();
   d46ba:	4839      	ldr	r0, [pc, #228]	; (d47a0 <loop+0x370>)
   d46bc:	2100      	movs	r1, #0
   d46be:	f7ff fd7b 	bl	d41b8 <_ZN5spark9WiFiClass7connectEj>
      while(!WiFi.ready()){}
   d46c2:	4620      	mov	r0, r4
   d46c4:	f7ff fd7d 	bl	d41c2 <_ZN5spark9WiFiClass5readyEv>
   d46c8:	2800      	cmp	r0, #0
   d46ca:	d0fa      	beq.n	d46c2 <loop+0x292>
        spark_cloud_flag_connect();
   d46cc:	f001 fd9c 	bl	d6208 <spark_cloud_flag_connect>
      Particle.syncTime();
   d46d0:	f7ff fd32 	bl	d4138 <_ZN10CloudClass8syncTimeEv.isra.0>
      delay(1000);
   d46d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d46d8:	f003 fdf8 	bl	d82cc <delay>
      Particle.process();
   d46dc:	f7ff fda0 	bl	d4220 <_ZN10CloudClass7processEv>
      Serial.println(Particle.timeSyncedLast());
   d46e0:	f003 ff9c 	bl	d861c <_Z16_fetch_usbserialv>
        tm = 0;
   d46e4:	2300      	movs	r3, #0
   d46e6:	4604      	mov	r4, r0
   d46e8:	2200      	movs	r2, #0
        return spark_sync_time_last(nullptr, &tm);
   d46ea:	a912      	add	r1, sp, #72	; 0x48
   d46ec:	2000      	movs	r0, #0
        tm = 0;
   d46ee:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        return spark_sync_time_last(nullptr, &tm);
   d46f2:	f001 fda9 	bl	d6248 <spark_sync_time_last>
        return printNumber(val, base) + t;
   d46f6:	220a      	movs	r2, #10
   d46f8:	4601      	mov	r1, r0
   d46fa:	4620      	mov	r0, r4
   d46fc:	f003 fc99 	bl	d8032 <_ZN5Print11printNumberEmh>
        n += println();
   d4700:	4620      	mov	r0, r4
   d4702:	f003 fc80 	bl	d8006 <_ZN5Print7printlnEv>
      Serial.println(Time.now());
   d4706:	f003 ff89 	bl	d861c <_Z16_fetch_usbserialv>
   d470a:	4681      	mov	r9, r0
   d470c:	f003 fdc4 	bl	d8298 <_ZN9TimeClass3nowEv>
        if (n < 0 && base == 10) {
   d4710:	1e04      	subs	r4, r0, #0
   d4712:	f280 80b0 	bge.w	d4876 <loop+0x446>
            t = print('-');
   d4716:	212d      	movs	r1, #45	; 0x2d
   d4718:	4648      	mov	r0, r9
   d471a:	f003 fc6b 	bl	d7ff4 <_ZN5Print5printEc>
            val = -n;
   d471e:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d4720:	220a      	movs	r2, #10
   d4722:	4648      	mov	r0, r9
   d4724:	f003 fc85 	bl	d8032 <_ZN5Print11printNumberEmh>
        n += println();
   d4728:	4648      	mov	r0, r9
   d472a:	f003 fc6c 	bl	d8006 <_ZN5Print7printlnEv>
      payload.remove(payload.length() - 1);
   d472e:	68b9      	ldr	r1, [r7, #8]
   d4730:	4821      	ldr	r0, [pc, #132]	; (d47b8 <loop+0x388>)
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
    }

    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
   d4732:	4f2c      	ldr	r7, [pc, #176]	; (d47e4 <loop+0x3b4>)
   d4734:	3901      	subs	r1, #1
   d4736:	f002 f9f2 	bl	d6b1e <_ZN6String6removeEj>
	StringSumHelper(const char *p) : String(p) {}
   d473a:	492b      	ldr	r1, [pc, #172]	; (d47e8 <loop+0x3b8>)
   d473c:	a812      	add	r0, sp, #72	; 0x48
   d473e:	f002 f8a6 	bl	d688e <_ZN6StringC1EPKc>
      request.body = "{\"data\":[" + payload + "]}";
   d4742:	491d      	ldr	r1, [pc, #116]	; (d47b8 <loop+0x388>)
   d4744:	a812      	add	r0, sp, #72	; 0x48
   d4746:	f002 f964 	bl	d6a12 <_ZplRK15StringSumHelperRK6String>
   d474a:	4928      	ldr	r1, [pc, #160]	; (d47ec <loop+0x3bc>)
   d474c:	f002 f96d 	bl	d6a2a <_ZplRK15StringSumHelperPKc>
   d4750:	4601      	mov	r1, r0
   d4752:	4827      	ldr	r0, [pc, #156]	; (d47f0 <loop+0x3c0>)
   d4754:	f002 f8cc 	bl	d68f0 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d4758:	a812      	add	r0, sp, #72	; 0x48
   d475a:	f002 f84d 	bl	d67f8 <_ZN6StringD1Ev>
   d475e:	4b25      	ldr	r3, [pc, #148]	; (d47f4 <loop+0x3c4>)
   d4760:	4925      	ldr	r1, [pc, #148]	; (d47f8 <loop+0x3c8>)
   d4762:	4826      	ldr	r0, [pc, #152]	; (d47fc <loop+0x3cc>)
   d4764:	9300      	str	r3, [sp, #0]
   d4766:	463a      	mov	r2, r7
   d4768:	4b25      	ldr	r3, [pc, #148]	; (d4800 <loop+0x3d0>)
   d476a:	f000 fd7b 	bl	d5264 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("Status: " + response.status);
   d476e:	f003 ff55 	bl	d861c <_Z16_fetch_usbserialv>
   d4772:	683b      	ldr	r3, [r7, #0]
   d4774:	4923      	ldr	r1, [pc, #140]	; (d4804 <loop+0x3d4>)
   d4776:	4419      	add	r1, r3
   d4778:	f003 fc51 	bl	d801e <_ZN5Print7printlnEPKc>
      Serial.println("Body: " + response.body);
   d477c:	f003 ff4e 	bl	d861c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d4780:	4921      	ldr	r1, [pc, #132]	; (d4808 <loop+0x3d8>)
   d4782:	4604      	mov	r4, r0
   d4784:	a812      	add	r0, sp, #72	; 0x48
   d4786:	f002 f882 	bl	d688e <_ZN6StringC1EPKc>
   d478a:	1d39      	adds	r1, r7, #4
   d478c:	a812      	add	r0, sp, #72	; 0x48
   d478e:	e03d      	b.n	d480c <loop+0x3dc>
   d4790:	2003e60c 	.word	0x2003e60c
   d4794:	2003e608 	.word	0x2003e608
   d4798:	2003dfb4 	.word	0x2003dfb4
   d479c:	2003e610 	.word	0x2003e610
   d47a0:	2003e7bc 	.word	0x2003e7bc
   d47a4:	2003dfd4 	.word	0x2003dfd4
   d47a8:	2003def4 	.word	0x2003def4
   d47ac:	2003def8 	.word	0x2003def8
   d47b0:	2003dfb8 	.word	0x2003dfb8
   d47b4:	2003e404 	.word	0x2003e404
   d47b8:	2003e570 	.word	0x2003e570
   d47bc:	2003e61c 	.word	0x2003e61c
   d47c0:	000da3fb 	.word	0x000da3fb
   d47c4:	000da404 	.word	0x000da404
   d47c8:	000da421 	.word	0x000da421
   d47cc:	2003e600 	.word	0x2003e600
   d47d0:	000da410 	.word	0x000da410
   d47d4:	000da420 	.word	0x000da420
   d47d8:	2003e5fc 	.word	0x2003e5fc
   d47dc:	2003e62c 	.word	0x2003e62c
   d47e0:	2003e5f8 	.word	0x2003e5f8
   d47e4:	2003e5cc 	.word	0x2003e5cc
   d47e8:	000da423 	.word	0x000da423
   d47ec:	000da42d 	.word	0x000da42d
   d47f0:	2003e5bc 	.word	0x2003e5bc
   d47f4:	000da430 	.word	0x000da430
   d47f8:	2003e580 	.word	0x2003e580
   d47fc:	2003dfd8 	.word	0x2003dfd8
   d4800:	2003ded4 	.word	0x2003ded4
   d4804:	000da435 	.word	0x000da435
   d4808:	000da43e 	.word	0x000da43e
   d480c:	f002 f901 	bl	d6a12 <_ZplRK15StringSumHelperRK6String>
   d4810:	6801      	ldr	r1, [r0, #0]
   d4812:	4620      	mov	r0, r4
   d4814:	f003 fc03 	bl	d801e <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   d4818:	a812      	add	r0, sp, #72	; 0x48
   d481a:	f001 ffed 	bl	d67f8 <_ZN6StringD1Ev>
      payload = "";
   d481e:	4917      	ldr	r1, [pc, #92]	; (d487c <loop+0x44c>)
   d4820:	4817      	ldr	r0, [pc, #92]	; (d4880 <loop+0x450>)
   d4822:	f002 f87c 	bl	d691e <_ZN6StringaSEPKc>
      wifiTimeLeft = wifiInterval;
   d4826:	f8d8 3000 	ldr.w	r3, [r8]
   d482a:	602b      	str	r3, [r5, #0]
      Particle.disconnect();
   d482c:	a812      	add	r0, sp, #72	; 0x48
        graceful_(graceful) {
   d482e:	2300      	movs	r3, #0
   d4830:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
   d4834:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
   d4838:	f003 fdf2 	bl	d8420 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
      WiFi.off();
   d483c:	4811      	ldr	r0, [pc, #68]	; (d4884 <loop+0x454>)
   d483e:	f7ff fcb5 	bl	d41ac <_ZN5spark9WiFiClass3offEv>
    wifiTimeLeft -= sleepDuration;
   d4842:	682b      	ldr	r3, [r5, #0]
   d4844:	6832      	ldr	r2, [r6, #0]
   d4846:	1a9b      	subs	r3, r3, r2
   d4848:	602b      	str	r3, [r5, #0]
}
   d484a:	b017      	add	sp, #92	; 0x5c
   d484c:	ecbd 8b02 	vpop	{d8}
   d4850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WLanCredentials creds = credentials.getHalCredentials();
        network_set_credentials(*this, 0, &creds, NULL);
    }

    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
   d4854:	4b0b      	ldr	r3, [pc, #44]	; (d4884 <loop+0x454>)
   d4856:	462a      	mov	r2, r5
   d4858:	6858      	ldr	r0, [r3, #4]
   d485a:	4629      	mov	r1, r5
   d485c:	f001 fc94 	bl	d6188 <network_has_credentials>
  if(bleInput | ((time2 - CONFIG_WAIT_TIME >= time1) && WiFi.hasCredentials() && !(BLE.connected()))){
   d4860:	2800      	cmp	r0, #0
   d4862:	f43f ae0b 	beq.w	d447c <loop+0x4c>
   d4866:	f002 fd8b 	bl	d7380 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d486a:	f002 fe0a 	bl	d7482 <_ZNK8particle14BleLocalDevice9connectedEv>
   d486e:	2800      	cmp	r0, #0
   d4870:	f47f ae04 	bne.w	d447c <loop+0x4c>
   d4874:	e607      	b.n	d4486 <loop+0x56>
            val = n;
   d4876:	4621      	mov	r1, r4
   d4878:	e752      	b.n	d4720 <loop+0x2f0>
   d487a:	bf00      	nop
   d487c:	000da53b 	.word	0x000da53b
   d4880:	2003e570 	.word	0x2003e570
   d4884:	2003e7bc 	.word	0x2003e7bc

000d4888 <_ZN5Print7printlnIjLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
   d4888:	b538      	push	{r3, r4, r5, lr}
   d488a:	4605      	mov	r5, r0
    if (base == 0) {
   d488c:	b94a      	cbnz	r2, d48a2 <_ZN5Print7printlnIjLi0EEEjT_i+0x1a>
        return write(n);
   d488e:	6802      	ldr	r2, [r0, #0]
   d4890:	b2c9      	uxtb	r1, r1
   d4892:	6892      	ldr	r2, [r2, #8]
   d4894:	4790      	blx	r2
        return printNumber(val, base) + t;
   d4896:	4604      	mov	r4, r0
        n += println();
   d4898:	4628      	mov	r0, r5
   d489a:	f003 fbb4 	bl	d8006 <_ZN5Print7printlnEv>
    }
   d489e:	4420      	add	r0, r4
   d48a0:	bd38      	pop	{r3, r4, r5, pc}
        return printNumber(val, base) + t;
   d48a2:	b2d2      	uxtb	r2, r2
   d48a4:	f003 fbc5 	bl	d8032 <_ZN5Print11printNumberEmh>
   d48a8:	e7f5      	b.n	d4896 <_ZN5Print7printlnIjLi0EEEjT_i+0xe>

000d48aa <_ZN5Print7printlnIhLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
   d48aa:	b538      	push	{r3, r4, r5, lr}
   d48ac:	4605      	mov	r5, r0
    if (base == 0) {
   d48ae:	b942      	cbnz	r2, d48c2 <_ZN5Print7printlnIhLi0EEEjT_i+0x18>
        return write(n);
   d48b0:	6803      	ldr	r3, [r0, #0]
   d48b2:	689b      	ldr	r3, [r3, #8]
   d48b4:	4798      	blx	r3
        return printNumber(val, base) + t;
   d48b6:	4604      	mov	r4, r0
        n += println();
   d48b8:	4628      	mov	r0, r5
   d48ba:	f003 fba4 	bl	d8006 <_ZN5Print7printlnEv>
    }
   d48be:	4420      	add	r0, r4
   d48c0:	bd38      	pop	{r3, r4, r5, pc}
        return printNumber(val, base) + t;
   d48c2:	b2d2      	uxtb	r2, r2
   d48c4:	f003 fbb5 	bl	d8032 <_ZN5Print11printNumberEmh>
   d48c8:	e7f5      	b.n	d48b6 <_ZN5Print7printlnIhLi0EEEjT_i+0xc>
	...

000d48cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d48cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d48d0:	460e      	mov	r6, r1
   d48d2:	b095      	sub	sp, #84	; 0x54
  switch(count){
   d48d4:	4da9      	ldr	r5, [pc, #676]	; (d4b7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d48d6:	4604      	mov	r4, r0
  Serial.println(len);
   d48d8:	f003 fea0 	bl	d861c <_Z16_fetch_usbserialv>
   d48dc:	220a      	movs	r2, #10
   d48de:	4631      	mov	r1, r6
   d48e0:	f7ff ffd2 	bl	d4888 <_ZN5Print7printlnIjLi0EEEjT_i>
  inputBuffer = "";
   d48e4:	49a6      	ldr	r1, [pc, #664]	; (d4b80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b4>)
   d48e6:	48a7      	ldr	r0, [pc, #668]	; (d4b84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   d48e8:	f002 f819 	bl	d691e <_ZN6StringaSEPKc>
  switch(count){
   d48ec:	682b      	ldr	r3, [r5, #0]
   d48ee:	2b07      	cmp	r3, #7
   d48f0:	f200 80c9 	bhi.w	d4a86 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ba>
   d48f4:	e8df f013 	tbh	[pc, r3, lsl #1]
   d48f8:	0098010e 	.word	0x0098010e
   d48fc:	006c007f 	.word	0x006c007f
   d4900:	00380052 	.word	0x00380052
   d4904:	0008001b 	.word	0x0008001b
	String & operator += (char c)			{concat(c); return (*this);}
   d4908:	4f9e      	ldr	r7, [pc, #632]	; (d4b84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   d490a:	4426      	add	r6, r4
      for(int i = 0; i < len - 1; i++){
   d490c:	3401      	adds	r4, #1
   d490e:	42b4      	cmp	r4, r6
   d4910:	f000 82f4 	beq.w	d4efc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x630>
        Serial.println(data[i]);
   d4914:	f003 fe82 	bl	d861c <_Z16_fetch_usbserialv>
   d4918:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d491c:	220a      	movs	r2, #10
   d491e:	f7ff ffc4 	bl	d48aa <_ZN5Print7printlnIhLi0EEEjT_i>
   d4922:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4926:	4638      	mov	r0, r7
   d4928:	f002 f866 	bl	d69f8 <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   d492c:	e7ee      	b.n	d490c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x40>
   d492e:	4f96      	ldr	r7, [pc, #600]	; (d4b88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2bc>)
   d4930:	f8df 8250 	ldr.w	r8, [pc, #592]	; d4b84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>
   d4934:	4426      	add	r6, r4
      for(int i = 0; i < len - 1; i++){
   d4936:	3401      	adds	r4, #1
   d4938:	42b4      	cmp	r4, r6
   d493a:	f000 8282 	beq.w	d4e42 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x576>
        Serial.println(data[i]);
   d493e:	f003 fe6d 	bl	d861c <_Z16_fetch_usbserialv>
   d4942:	220a      	movs	r2, #10
   d4944:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4948:	f7ff ffaf 	bl	d48aa <_ZN5Print7printlnIhLi0EEEjT_i>
   d494c:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4950:	488c      	ldr	r0, [pc, #560]	; (d4b84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   d4952:	f002 f851 	bl	d69f8 <_ZN6String6concatEc>
        wifiInterval = atoi(inputBuffer) * 1000;
   d4956:	f8d8 0000 	ldr.w	r0, [r8]
   d495a:	f005 fbd7 	bl	da10c <atoi>
   d495e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4962:	4358      	muls	r0, r3
   d4964:	6038      	str	r0, [r7, #0]
      for(int i = 0; i < len - 1; i++){
   d4966:	e7e6      	b.n	d4936 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6a>
   d4968:	4f88      	ldr	r7, [pc, #544]	; (d4b8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c0>)
   d496a:	f8df 8218 	ldr.w	r8, [pc, #536]	; d4b84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>
   d496e:	4426      	add	r6, r4
      for(int i = 0; i < len - 1; i++){
   d4970:	3401      	adds	r4, #1
   d4972:	42a6      	cmp	r6, r4
   d4974:	f000 821b 	beq.w	d4dae <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e2>
        Serial.println(data[i]);
   d4978:	f003 fe50 	bl	d861c <_Z16_fetch_usbserialv>
   d497c:	220a      	movs	r2, #10
   d497e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4982:	f7ff ff92 	bl	d48aa <_ZN5Print7printlnIhLi0EEEjT_i>
   d4986:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d498a:	487e      	ldr	r0, [pc, #504]	; (d4b84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   d498c:	f002 f834 	bl	d69f8 <_ZN6String6concatEc>
        sleepDuration = atoi(inputBuffer);
   d4990:	f8d8 0000 	ldr.w	r0, [r8]
   d4994:	f005 fbba 	bl	da10c <atoi>
   d4998:	6038      	str	r0, [r7, #0]
      for(int i = 0; i < len - 1; i++){
   d499a:	e7e9      	b.n	d4970 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>
   d499c:	4f7c      	ldr	r7, [pc, #496]	; (d4b90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c4>)
   d499e:	f8df 81e4 	ldr.w	r8, [pc, #484]	; d4b84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>
   d49a2:	4426      	add	r6, r4
      for(int i = 0; i < len - 1; i++){
   d49a4:	3401      	adds	r4, #1
   d49a6:	42b4      	cmp	r4, r6
   d49a8:	f000 81c4 	beq.w	d4d34 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x468>
        Serial.println(data[i]);
   d49ac:	f003 fe36 	bl	d861c <_Z16_fetch_usbserialv>
   d49b0:	220a      	movs	r2, #10
   d49b2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d49b6:	f7ff ff78 	bl	d48aa <_ZN5Print7printlnIhLi0EEEjT_i>
   d49ba:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d49be:	4871      	ldr	r0, [pc, #452]	; (d4b84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   d49c0:	f002 f81a 	bl	d69f8 <_ZN6String6concatEc>
        dsid = atoi(inputBuffer);
   d49c4:	f8d8 0000 	ldr.w	r0, [r8]
   d49c8:	f005 fba0 	bl	da10c <atoi>
   d49cc:	6038      	str	r0, [r7, #0]
      for(int i = 0; i < len - 1; i++){
   d49ce:	e7e9      	b.n	d49a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd8>
   d49d0:	4f6c      	ldr	r7, [pc, #432]	; (d4b84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   d49d2:	4426      	add	r6, r4
      for(int i = 0; i < len - 1; i++){
   d49d4:	3401      	adds	r4, #1
   d49d6:	42a6      	cmp	r6, r4
   d49d8:	f000 814c 	beq.w	d4c74 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a8>
        Serial.println(data[i]);
   d49dc:	f003 fe1e 	bl	d861c <_Z16_fetch_usbserialv>
   d49e0:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d49e4:	220a      	movs	r2, #10
   d49e6:	f7ff ff60 	bl	d48aa <_ZN5Print7printlnIhLi0EEEjT_i>
   d49ea:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d49ee:	4638      	mov	r0, r7
   d49f0:	f002 f802 	bl	d69f8 <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   d49f4:	e7ee      	b.n	d49d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x108>
   d49f6:	4f63      	ldr	r7, [pc, #396]	; (d4b84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
        password = inputBuffer;
   d49f8:	f8df 81c8 	ldr.w	r8, [pc, #456]	; d4bc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f8>
   d49fc:	4426      	add	r6, r4
      for(int i = 0; i < len - 1; i++){
   d49fe:	3401      	adds	r4, #1
   d4a00:	42a6      	cmp	r6, r4
   d4a02:	f000 80e3 	beq.w	d4bcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x300>
        Serial.println(data[i]);
   d4a06:	f003 fe09 	bl	d861c <_Z16_fetch_usbserialv>
   d4a0a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4a0e:	220a      	movs	r2, #10
   d4a10:	f7ff ff4b 	bl	d48aa <_ZN5Print7printlnIhLi0EEEjT_i>
   d4a14:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4a18:	4638      	mov	r0, r7
   d4a1a:	f001 ffed 	bl	d69f8 <_ZN6String6concatEc>
        password = inputBuffer;
   d4a1e:	4639      	mov	r1, r7
   d4a20:	4640      	mov	r0, r8
   d4a22:	f001 ff65 	bl	d68f0 <_ZN6StringaSERKS_>
      for(int i = 0; i < len - 1; i++){
   d4a26:	e7ea      	b.n	d49fe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x132>
   d4a28:	4f56      	ldr	r7, [pc, #344]	; (d4b84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
        ssid = inputBuffer;
   d4a2a:	f8df 8174 	ldr.w	r8, [pc, #372]	; d4ba0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d4>
   d4a2e:	4426      	add	r6, r4
      for(int i = 0; i < len - 1; i++){
   d4a30:	3401      	adds	r4, #1
   d4a32:	42a6      	cmp	r6, r4
   d4a34:	d02d      	beq.n	d4a92 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c6>
   d4a36:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4a3a:	4638      	mov	r0, r7
   d4a3c:	f001 ffdc 	bl	d69f8 <_ZN6String6concatEc>
        ssid = inputBuffer;
   d4a40:	4639      	mov	r1, r7
   d4a42:	4640      	mov	r0, r8
   d4a44:	f001 ff54 	bl	d68f0 <_ZN6StringaSERKS_>
        Serial.println(data[i]);
   d4a48:	f003 fde8 	bl	d861c <_Z16_fetch_usbserialv>
   d4a4c:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4a50:	220a      	movs	r2, #10
   d4a52:	f7ff ff2a 	bl	d48aa <_ZN5Print7printlnIhLi0EEEjT_i>
      for(int i = 0; i < len - 1; i++){
   d4a56:	e7eb      	b.n	d4a30 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x164>
      networkBuffer = networks[networkCount - 1].ssid;
   d4a58:	2138      	movs	r1, #56	; 0x38
   d4a5a:	fb01 a103 	mla	r1, r1, r3, sl
   d4a5e:	3104      	adds	r1, #4
   d4a60:	484c      	ldr	r0, [pc, #304]	; (d4b94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   d4a62:	f001 ff5c 	bl	d691e <_ZN6StringaSEPKc>
      Serial.println(networkBuffer.length());
   d4a66:	f003 fdd9 	bl	d861c <_Z16_fetch_usbserialv>
   d4a6a:	68a1      	ldr	r1, [r4, #8]
   d4a6c:	220a      	movs	r2, #10
   d4a6e:	f7ff ff0b 	bl	d4888 <_ZN5Print7printlnIjLi0EEEjT_i>
      txCharacteristic.setValue(networkBuffer);
   d4a72:	4948      	ldr	r1, [pc, #288]	; (d4b94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   d4a74:	4848      	ldr	r0, [pc, #288]	; (d4b98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
   d4a76:	2200      	movs	r2, #0
   d4a78:	f002 fbc4 	bl	d7204 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
      txCharacteristic.setValue("]\nEnter network SSID (blank to skip, 'clear' to reset credentials): ");
   d4a7c:	4947      	ldr	r1, [pc, #284]	; (d4b9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d0>)
   d4a7e:	2200      	movs	r2, #0
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   d4a80:	4845      	ldr	r0, [pc, #276]	; (d4b98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
   d4a82:	f002 fbc4 	bl	d720e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
  count++;
   d4a86:	682b      	ldr	r3, [r5, #0]
   d4a88:	3301      	adds	r3, #1
   d4a8a:	602b      	str	r3, [r5, #0]
}
   d4a8c:	b015      	add	sp, #84	; 0x54
   d4a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        operator const char*() const { return c_str(); }
   d4a92:	4e43      	ldr	r6, [pc, #268]	; (d4ba0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d4>)
      Serial.println(ssid);
   d4a94:	f003 fdc2 	bl	d861c <_Z16_fetch_usbserialv>
   d4a98:	6831      	ldr	r1, [r6, #0]
   d4a9a:	f003 fac0 	bl	d801e <_ZN5Print7printlnEPKc>
      Serial.println(ssid.length());
   d4a9e:	f003 fdbd 	bl	d861c <_Z16_fetch_usbserialv>
   d4aa2:	68b1      	ldr	r1, [r6, #8]
   d4aa4:	220a      	movs	r2, #10
   d4aa6:	f7ff feef 	bl	d4888 <_ZN5Print7printlnIjLi0EEEjT_i>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4aaa:	4935      	ldr	r1, [pc, #212]	; (d4b80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b4>)
   d4aac:	4630      	mov	r0, r6
   d4aae:	f001 ffd1 	bl	d6a54 <_ZNK6String6equalsEPKc>
      if(ssid == ""){
   d4ab2:	4604      	mov	r4, r0
   d4ab4:	b1f8      	cbz	r0, d4af6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x22a>
        count = 3;
   d4ab6:	2303      	movs	r3, #3
   d4ab8:	602b      	str	r3, [r5, #0]
        EEPROM.get(0, dsid);
   d4aba:	4c35      	ldr	r4, [pc, #212]	; (d4b90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c4>)
   d4abc:	f004 fb3c 	bl	d9138 <_Z21__fetch_global_EEPROMv>
   d4ac0:	4621      	mov	r1, r4
   d4ac2:	2000      	movs	r0, #0
   d4ac4:	f7ff fb42 	bl	d414c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
        txCharacteristic.setValue("\nCurrent DSID is [");
   d4ac8:	4936      	ldr	r1, [pc, #216]	; (d4ba4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d8>)
   d4aca:	4833      	ldr	r0, [pc, #204]	; (d4b98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
   d4acc:	2200      	movs	r2, #0
   d4ace:	f002 fb9e 	bl	d720e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        if(dsid != -1){
   d4ad2:	6821      	ldr	r1, [r4, #0]
   d4ad4:	1c4c      	adds	r4, r1, #1
   d4ad6:	d00b      	beq.n	d4af0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x224>
          txCharacteristic.setValue(String(dsid));
   d4ad8:	220a      	movs	r2, #10
   d4ada:	a801      	add	r0, sp, #4
   d4adc:	f001 ff31 	bl	d6942 <_ZN6StringC1Eih>
   d4ae0:	482d      	ldr	r0, [pc, #180]	; (d4b98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
   d4ae2:	2200      	movs	r2, #0
   d4ae4:	a901      	add	r1, sp, #4
   d4ae6:	f002 fb8d 	bl	d7204 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   d4aea:	a801      	add	r0, sp, #4
   d4aec:	f001 fe84 	bl	d67f8 <_ZN6StringD1Ev>
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   d4af0:	492d      	ldr	r1, [pc, #180]	; (d4ba8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2dc>)
   d4af2:	2200      	movs	r2, #0
   d4af4:	e7c4      	b.n	d4a80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
   d4af6:	492d      	ldr	r1, [pc, #180]	; (d4bac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e0>)
   d4af8:	4630      	mov	r0, r6
   d4afa:	f001 ffab 	bl	d6a54 <_ZNK6String6equalsEPKc>
      }else if(ssid == "clear"){
   d4afe:	4602      	mov	r2, r0
   d4b00:	2800      	cmp	r0, #0
   d4b02:	d038      	beq.n	d4b76 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2aa>
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   d4b04:	482a      	ldr	r0, [pc, #168]	; (d4bb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   d4b06:	4623      	mov	r3, r4
   d4b08:	6840      	ldr	r0, [r0, #4]
   d4b0a:	4622      	mov	r2, r4
   d4b0c:	4621      	mov	r1, r4
   d4b0e:	f001 fb4b 	bl	d61a8 <network_clear_credentials>
        count = 0;
   d4b12:	602c      	str	r4, [r5, #0]
      txCharacteristic.setValue("\nCredentials are currently stored for:\n[");
   d4b14:	4927      	ldr	r1, [pc, #156]	; (d4bb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e8>)
   d4b16:	4820      	ldr	r0, [pc, #128]	; (d4b98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
      networkCount = WiFi.getCredentials(networks, 5);
   d4b18:	4e27      	ldr	r6, [pc, #156]	; (d4bb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ec>)
   d4b1a:	4c1e      	ldr	r4, [pc, #120]	; (d4b94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
        txCharacteristic.setValue(networkBuffer);
   d4b1c:	f8df 8078 	ldr.w	r8, [pc, #120]	; d4b98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>
        txCharacteristic.setValue(",\n");
   d4b20:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d4bc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2fc>
      txCharacteristic.setValue("\nCredentials are currently stored for:\n[");
   d4b24:	2200      	movs	r2, #0
   d4b26:	f002 fb72 	bl	d720e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      networkCount = WiFi.getCredentials(networks, 5);
   d4b2a:	4924      	ldr	r1, [pc, #144]	; (d4bbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f0>)
   d4b2c:	4820      	ldr	r0, [pc, #128]	; (d4bb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   d4b2e:	2205      	movs	r2, #5
   d4b30:	f004 f9b4 	bl	d8e9c <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>
   d4b34:	4921      	ldr	r1, [pc, #132]	; (d4bbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f0>)
   d4b36:	6030      	str	r0, [r6, #0]
      for(int i = 0; i < networkCount - 1; i++){
   d4b38:	2700      	movs	r7, #0
   d4b3a:	468a      	mov	sl, r1
   d4b3c:	6833      	ldr	r3, [r6, #0]
   d4b3e:	3b01      	subs	r3, #1
   d4b40:	42bb      	cmp	r3, r7
   d4b42:	f101 0b38 	add.w	fp, r1, #56	; 0x38
   d4b46:	dd87      	ble.n	d4a58 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18c>
        networkBuffer = networks[i].ssid;
   d4b48:	3104      	adds	r1, #4
   d4b4a:	4620      	mov	r0, r4
   d4b4c:	f001 fee7 	bl	d691e <_ZN6StringaSEPKc>
        Serial.println(networkBuffer.length());
   d4b50:	f003 fd64 	bl	d861c <_Z16_fetch_usbserialv>
   d4b54:	68a1      	ldr	r1, [r4, #8]
   d4b56:	220a      	movs	r2, #10
   d4b58:	f7ff fe96 	bl	d4888 <_ZN5Print7printlnIjLi0EEEjT_i>
        txCharacteristic.setValue(networkBuffer);
   d4b5c:	2200      	movs	r2, #0
   d4b5e:	4621      	mov	r1, r4
   d4b60:	4640      	mov	r0, r8
   d4b62:	f002 fb4f 	bl	d7204 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        txCharacteristic.setValue(",\n");
   d4b66:	4649      	mov	r1, r9
   d4b68:	2200      	movs	r2, #0
   d4b6a:	4640      	mov	r0, r8
   d4b6c:	f002 fb4f 	bl	d720e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      for(int i = 0; i < networkCount - 1; i++){
   d4b70:	3701      	adds	r7, #1
   d4b72:	4659      	mov	r1, fp
   d4b74:	e7e2      	b.n	d4b3c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x270>
        txCharacteristic.setValue("\nEnter network password: ");
   d4b76:	4912      	ldr	r1, [pc, #72]	; (d4bc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f4>)
   d4b78:	e782      	b.n	d4a80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
   d4b7a:	bf00      	nop
   d4b7c:	2003dfd0 	.word	0x2003dfd0
   d4b80:	000da53b 	.word	0x000da53b
   d4b84:	2003e3f4 	.word	0x2003e3f4
   d4b88:	2003def8 	.word	0x2003def8
   d4b8c:	2003def4 	.word	0x2003def4
   d4b90:	2003dfd4 	.word	0x2003dfd4
   d4b94:	2003e430 	.word	0x2003e430
   d4b98:	2003e614 	.word	0x2003e614
   d4b9c:	000da471 	.word	0x000da471
   d4ba0:	2003e5e8 	.word	0x2003e5e8
   d4ba4:	000da4b6 	.word	0x000da4b6
   d4ba8:	000da4c9 	.word	0x000da4c9
   d4bac:	000da4ef 	.word	0x000da4ef
   d4bb0:	2003e7bc 	.word	0x2003e7bc
   d4bb4:	000da445 	.word	0x000da445
   d4bb8:	2003e440 	.word	0x2003e440
   d4bbc:	2003e444 	.word	0x2003e444
   d4bc0:	000da4f5 	.word	0x000da4f5
   d4bc4:	2003e560 	.word	0x2003e560
   d4bc8:	000da46e 	.word	0x000da46e
        operator const char*() const { return c_str(); }
   d4bcc:	4caf      	ldr	r4, [pc, #700]	; (d4e8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c0>)
      Serial.println(password);
   d4bce:	f003 fd25 	bl	d861c <_Z16_fetch_usbserialv>
   d4bd2:	6821      	ldr	r1, [r4, #0]
   d4bd4:	f003 fa23 	bl	d801e <_ZN5Print7printlnEPKc>
      Serial.println(password.length());
   d4bd8:	f003 fd20 	bl	d861c <_Z16_fetch_usbserialv>
   d4bdc:	68a1      	ldr	r1, [r4, #8]
   d4bde:	220a      	movs	r2, #10
   d4be0:	f7ff fe52 	bl	d4888 <_ZN5Print7printlnIjLi0EEEjT_i>
   d4be4:	4baa      	ldr	r3, [pc, #680]	; (d4e90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c4>)
   d4be6:	6826      	ldr	r6, [r4, #0]
   d4be8:	f8d3 8000 	ldr.w	r8, [r3]
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d4bec:	f1b8 0f00 	cmp.w	r8, #0
   d4bf0:	d03c      	beq.n	d4c6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a0>
   d4bf2:	4640      	mov	r0, r8
   d4bf4:	f005 fb24 	bl	da240 <strlen>
   d4bf8:	4607      	mov	r7, r0
   d4bfa:	2e00      	cmp	r6, #0
   d4bfc:	d038      	beq.n	d4c70 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a4>
   d4bfe:	4630      	mov	r0, r6
   d4c00:	f005 fb1e 	bl	da240 <strlen>
   d4c04:	4604      	mov	r4, r0
        memset(&creds, 0, sizeof(creds));
   d4c06:	2238      	movs	r2, #56	; 0x38
   d4c08:	2100      	movs	r1, #0
   d4c0a:	a806      	add	r0, sp, #24
   d4c0c:	f005 fada 	bl	da1c4 <memset>
        creds.size = sizeof(creds);
   d4c10:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   d4c12:	e9cd 3801 	strd	r3, r8, [sp, #4]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d4c16:	489f      	ldr	r0, [pc, #636]	; (d4e94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c8>)
        creds.password_len = passwordLen;
   d4c18:	9405      	str	r4, [sp, #20]
        creds.security = WLanSecurityType(security);
   d4c1a:	2303      	movs	r3, #3
   d4c1c:	f8ad 3018 	strh.w	r3, [sp, #24]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d4c20:	2300      	movs	r3, #0
   d4c22:	aa01      	add	r2, sp, #4
   d4c24:	4619      	mov	r1, r3
   d4c26:	6840      	ldr	r0, [r0, #4]
        creds.password = password;
   d4c28:	e9cd 7603 	strd	r7, r6, [sp, #12]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d4c2c:	f001 fab4 	bl	d6198 <network_set_credentials>
      Serial.println("\n\nCredentials set with ssid: " + ssid + "\npassword: " + password + "\n\n");
   d4c30:	f003 fcf4 	bl	d861c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d4c34:	4998      	ldr	r1, [pc, #608]	; (d4e98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5cc>)
   d4c36:	4604      	mov	r4, r0
   d4c38:	a801      	add	r0, sp, #4
   d4c3a:	f001 fe28 	bl	d688e <_ZN6StringC1EPKc>
   d4c3e:	4994      	ldr	r1, [pc, #592]	; (d4e90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c4>)
   d4c40:	a801      	add	r0, sp, #4
   d4c42:	f001 fee6 	bl	d6a12 <_ZplRK15StringSumHelperRK6String>
   d4c46:	4995      	ldr	r1, [pc, #596]	; (d4e9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d0>)
   d4c48:	f001 feef 	bl	d6a2a <_ZplRK15StringSumHelperPKc>
   d4c4c:	498f      	ldr	r1, [pc, #572]	; (d4e8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c0>)
   d4c4e:	f001 fee0 	bl	d6a12 <_ZplRK15StringSumHelperRK6String>
   d4c52:	4993      	ldr	r1, [pc, #588]	; (d4ea0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d4>)
   d4c54:	f001 fee9 	bl	d6a2a <_ZplRK15StringSumHelperPKc>
   d4c58:	6801      	ldr	r1, [r0, #0]
   d4c5a:	4620      	mov	r0, r4
   d4c5c:	f003 f9df 	bl	d801e <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   d4c60:	a801      	add	r0, sp, #4
   d4c62:	f001 fdc9 	bl	d67f8 <_ZN6StringD1Ev>
      txCharacteristic.setValue("\nEnter 'test' to test credentials (blank to skip): ");
   d4c66:	498f      	ldr	r1, [pc, #572]	; (d4ea4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d8>)
   d4c68:	2200      	movs	r2, #0
   d4c6a:	e709      	b.n	d4a80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d4c6c:	4647      	mov	r7, r8
   d4c6e:	e7c4      	b.n	d4bfa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x32e>
   d4c70:	4634      	mov	r4, r6
   d4c72:	e7c8      	b.n	d4c06 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x33a>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4c74:	498c      	ldr	r1, [pc, #560]	; (d4ea8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5dc>)
   d4c76:	488d      	ldr	r0, [pc, #564]	; (d4eac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e0>)
   d4c78:	f001 feec 	bl	d6a54 <_ZNK6String6equalsEPKc>
      if(inputBuffer == "test" && WiFi.hasCredentials()){
   d4c7c:	2800      	cmp	r0, #0
   d4c7e:	f43f af1c 	beq.w	d4aba <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ee>
        return network_has_credentials(*this, 0, NULL);
   d4c82:	4c84      	ldr	r4, [pc, #528]	; (d4e94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c8>)
   d4c84:	2200      	movs	r2, #0
   d4c86:	6860      	ldr	r0, [r4, #4]
   d4c88:	4611      	mov	r1, r2
   d4c8a:	f001 fa7d 	bl	d6188 <network_has_credentials>
   d4c8e:	2800      	cmp	r0, #0
   d4c90:	f43f af13 	beq.w	d4aba <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ee>
   d4c94:	f000 ff8e 	bl	d5bb4 <HAL_Timer_Get_Milli_Seconds>
        t4 = millis();
   d4c98:	4e85      	ldr	r6, [pc, #532]	; (d4eb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e4>)
   d4c9a:	6030      	str	r0, [r6, #0]
        WiFi.on();
   d4c9c:	4620      	mov	r0, r4
   d4c9e:	f7ff fa7f 	bl	d41a0 <_ZN5spark9WiFiClass2onEv>
        WiFi.connect();
   d4ca2:	2100      	movs	r1, #0
   d4ca4:	4620      	mov	r0, r4
   d4ca6:	f7ff fa87 	bl	d41b8 <_ZN5spark9WiFiClass7connectEj>
        while(WiFi.connecting() || !WiFi.ready()){
   d4caa:	4627      	mov	r7, r4
          if(millis() >= t4 + WIFI_TEST_TIMEOUT){
   d4cac:	f247 5830 	movw	r8, #30000	; 0x7530
        return network_connecting(*this, 0, NULL);
   d4cb0:	2200      	movs	r2, #0
   d4cb2:	6860      	ldr	r0, [r4, #4]
   d4cb4:	4611      	mov	r1, r2
   d4cb6:	f001 fa2f 	bl	d6118 <network_connecting>
        while(WiFi.connecting() || !WiFi.ready()){
   d4cba:	b308      	cbz	r0, d4d00 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x434>
   d4cbc:	f000 ff7a 	bl	d5bb4 <HAL_Timer_Get_Milli_Seconds>
          if(millis() >= t4 + WIFI_TEST_TIMEOUT){
   d4cc0:	6833      	ldr	r3, [r6, #0]
   d4cc2:	4443      	add	r3, r8
   d4cc4:	4283      	cmp	r3, r0
   d4cc6:	d8f3      	bhi.n	d4cb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3e4>
            wifiTest = false;
   d4cc8:	4b7a      	ldr	r3, [pc, #488]	; (d4eb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e8>)
   d4cca:	2200      	movs	r2, #0
   d4ccc:	701a      	strb	r2, [r3, #0]
            Serial.println("timeout");
   d4cce:	f003 fca5 	bl	d861c <_Z16_fetch_usbserialv>
   d4cd2:	4979      	ldr	r1, [pc, #484]	; (d4eb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   d4cd4:	f003 f9a3 	bl	d801e <_ZN5Print7printlnEPKc>
            Serial.println(millis());
   d4cd8:	f003 fca0 	bl	d861c <_Z16_fetch_usbserialv>
   d4cdc:	4604      	mov	r4, r0
   d4cde:	f000 ff69 	bl	d5bb4 <HAL_Timer_Get_Milli_Seconds>
   d4ce2:	220a      	movs	r2, #10
   d4ce4:	4601      	mov	r1, r0
   d4ce6:	4620      	mov	r0, r4
   d4ce8:	f003 f9a3 	bl	d8032 <_ZN5Print11printNumberEmh>
        n += println();
   d4cec:	4620      	mov	r0, r4
   d4cee:	f003 f98a 	bl	d8006 <_ZN5Print7printlnEv>
            Serial.println(t4);
   d4cf2:	f003 fc93 	bl	d861c <_Z16_fetch_usbserialv>
   d4cf6:	6831      	ldr	r1, [r6, #0]
   d4cf8:	220a      	movs	r2, #10
   d4cfa:	f7ff fb77 	bl	d43ec <_ZN5Print7printlnIiLi0EEEjT_i>
            break;
   d4cfe:	e004      	b.n	d4d0a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x43e>
        while(WiFi.connecting() || !WiFi.ready()){
   d4d00:	4638      	mov	r0, r7
   d4d02:	f7ff fa5e 	bl	d41c2 <_ZN5spark9WiFiClass5readyEv>
   d4d06:	2800      	cmp	r0, #0
   d4d08:	d0d8      	beq.n	d4cbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3f0>
        if(wifiTest){
   d4d0a:	4e6a      	ldr	r6, [pc, #424]	; (d4eb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e8>)
        WiFi.off();
   d4d0c:	4861      	ldr	r0, [pc, #388]	; (d4e94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c8>)
   d4d0e:	f7ff fa4d 	bl	d41ac <_ZN5spark9WiFiClass3offEv>
        if(wifiTest){
   d4d12:	7834      	ldrb	r4, [r6, #0]
   d4d14:	b12c      	cbz	r4, d4d22 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x456>
          txCharacteristic.setValue("Success!\n");
   d4d16:	4969      	ldr	r1, [pc, #420]	; (d4ebc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f0>)
   d4d18:	4869      	ldr	r0, [pc, #420]	; (d4ec0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   d4d1a:	2200      	movs	r2, #0
   d4d1c:	f002 fa77 	bl	d720e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
   d4d20:	e6cb      	b.n	d4aba <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ee>
          txCharacteristic.setValue("ERROR: WiFi connection timeout\n");
   d4d22:	4968      	ldr	r1, [pc, #416]	; (d4ec4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f8>)
   d4d24:	4866      	ldr	r0, [pc, #408]	; (d4ec0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   d4d26:	4622      	mov	r2, r4
   d4d28:	f002 fa71 	bl	d720e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
          wifiTest = true;
   d4d2c:	2301      	movs	r3, #1
          count = 0;
   d4d2e:	602c      	str	r4, [r5, #0]
          wifiTest = true;
   d4d30:	7033      	strb	r3, [r6, #0]
          goto SSID;
   d4d32:	e6ef      	b.n	d4b14 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x248>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4d34:	4964      	ldr	r1, [pc, #400]	; (d4ec8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5fc>)
   d4d36:	485d      	ldr	r0, [pc, #372]	; (d4eac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e0>)
   d4d38:	f001 fe8c 	bl	d6a54 <_ZNK6String6equalsEPKc>
      if(inputBuffer != ""){
   d4d3c:	4604      	mov	r4, r0
   d4d3e:	b958      	cbnz	r0, d4d58 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48c>
        EEPROM.put(0, dsid);
   d4d40:	f004 f9fa 	bl	d9138 <_Z21__fetch_global_EEPROMv>

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4d44:	4961      	ldr	r1, [pc, #388]	; (d4ecc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x600>)
   d4d46:	2204      	movs	r2, #4
   d4d48:	4620      	mov	r0, r4
   d4d4a:	f000 ff4b 	bl	d5be4 <HAL_EEPROM_Put>
        Serial.println("dsid entered");
   d4d4e:	f003 fc65 	bl	d861c <_Z16_fetch_usbserialv>
   d4d52:	495f      	ldr	r1, [pc, #380]	; (d4ed0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x604>)
   d4d54:	f003 f963 	bl	d801e <_ZN5Print7printlnEPKc>
      EEPROM.get(0, dsid);
   d4d58:	f004 f9ee 	bl	d9138 <_Z21__fetch_global_EEPROMv>
   d4d5c:	495b      	ldr	r1, [pc, #364]	; (d4ecc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x600>)
      EEPROM.get(100, sleepDuration);
   d4d5e:	4c5d      	ldr	r4, [pc, #372]	; (d4ed4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x608>)
      EEPROM.get(0, dsid);
   d4d60:	2000      	movs	r0, #0
   d4d62:	f7ff f9f3 	bl	d414c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
      Serial.println("dsid: " + dsid);
   d4d66:	f003 fc59 	bl	d861c <_Z16_fetch_usbserialv>
   d4d6a:	683b      	ldr	r3, [r7, #0]
   d4d6c:	495a      	ldr	r1, [pc, #360]	; (d4ed8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60c>)
   d4d6e:	4419      	add	r1, r3
   d4d70:	f003 f955 	bl	d801e <_ZN5Print7printlnEPKc>
      EEPROM.get(100, sleepDuration);
   d4d74:	f004 f9e0 	bl	d9138 <_Z21__fetch_global_EEPROMv>
   d4d78:	4621      	mov	r1, r4
   d4d7a:	2064      	movs	r0, #100	; 0x64
   d4d7c:	f7ff f9e6 	bl	d414c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
      txCharacteristic.setValue("\nCurrent value for data collection interval is [");
   d4d80:	4956      	ldr	r1, [pc, #344]	; (d4edc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x610>)
   d4d82:	484f      	ldr	r0, [pc, #316]	; (d4ec0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   d4d84:	2200      	movs	r2, #0
   d4d86:	f002 fa42 	bl	d720e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(sleepDuration != -1){
   d4d8a:	6821      	ldr	r1, [r4, #0]
   d4d8c:	1c48      	adds	r0, r1, #1
   d4d8e:	d00b      	beq.n	d4da8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4dc>
        txCharacteristic.setValue(String(sleepDuration));
   d4d90:	220a      	movs	r2, #10
   d4d92:	a801      	add	r0, sp, #4
   d4d94:	f001 fdd5 	bl	d6942 <_ZN6StringC1Eih>
   d4d98:	4849      	ldr	r0, [pc, #292]	; (d4ec0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   d4d9a:	2200      	movs	r2, #0
   d4d9c:	a901      	add	r1, sp, #4
   d4d9e:	f002 fa31 	bl	d7204 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   d4da2:	a801      	add	r0, sp, #4
   d4da4:	f001 fd28 	bl	d67f8 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between data collection as an integer in milliseconds (blank to skip): ");
   d4da8:	494d      	ldr	r1, [pc, #308]	; (d4ee0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x614>)
   d4daa:	2200      	movs	r2, #0
   d4dac:	e668      	b.n	d4a80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4dae:	4946      	ldr	r1, [pc, #280]	; (d4ec8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5fc>)
   d4db0:	483e      	ldr	r0, [pc, #248]	; (d4eac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e0>)
   d4db2:	f001 fe4f 	bl	d6a54 <_ZNK6String6equalsEPKc>
      if(inputBuffer == ""){
   d4db6:	b128      	cbz	r0, d4dc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4f8>
        EEPROM.get(100, sleepDuration);
   d4db8:	f004 f9be 	bl	d9138 <_Z21__fetch_global_EEPROMv>
   d4dbc:	4945      	ldr	r1, [pc, #276]	; (d4ed4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x608>)
   d4dbe:	2064      	movs	r0, #100	; 0x64
   d4dc0:	f7ff f9c4 	bl	d414c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
      EEPROM.put(100, sleepDuration);
   d4dc4:	f004 f9b8 	bl	d9138 <_Z21__fetch_global_EEPROMv>
   d4dc8:	2204      	movs	r2, #4
   d4dca:	4942      	ldr	r1, [pc, #264]	; (d4ed4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x608>)
   d4dcc:	2064      	movs	r0, #100	; 0x64
   d4dce:	f000 ff09 	bl	d5be4 <HAL_EEPROM_Put>
      EEPROM.get(100, sleepDuration);
   d4dd2:	f004 f9b1 	bl	d9138 <_Z21__fetch_global_EEPROMv>
   d4dd6:	493f      	ldr	r1, [pc, #252]	; (d4ed4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x608>)
   d4dd8:	2064      	movs	r0, #100	; 0x64
   d4dda:	f7ff f9b7 	bl	d414c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
        if (valid_) {
   d4dde:	4b41      	ldr	r3, [pc, #260]	; (d4ee4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x618>)
   d4de0:	7d1a      	ldrb	r2, [r3, #20]
   d4de2:	b10a      	cbz	r2, d4de8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x51c>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4de4:	2202      	movs	r2, #2
   d4de6:	721a      	strb	r2, [r3, #8]
      config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration - SLEEP_DELAY);
   d4de8:	6839      	ldr	r1, [r7, #0]
      EEPROM.get(200, wifiInterval);
   d4dea:	4c3f      	ldr	r4, [pc, #252]	; (d4ee8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x61c>)
      config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration - SLEEP_DELAY);
   d4dec:	483d      	ldr	r0, [pc, #244]	; (d4ee4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x618>)
   d4dee:	3946      	subs	r1, #70	; 0x46
   d4df0:	f7ff f9ec 	bl	d41cc <_ZN8particle24SystemSleepConfiguration8durationEm>
      Serial.println(sleepDuration);
   d4df4:	f003 fc12 	bl	d861c <_Z16_fetch_usbserialv>
   d4df8:	220a      	movs	r2, #10
   d4dfa:	6839      	ldr	r1, [r7, #0]
   d4dfc:	f7ff faf6 	bl	d43ec <_ZN5Print7printlnIiLi0EEEjT_i>
      EEPROM.get(200, wifiInterval);
   d4e00:	f004 f99a 	bl	d9138 <_Z21__fetch_global_EEPROMv>
   d4e04:	4621      	mov	r1, r4
   d4e06:	20c8      	movs	r0, #200	; 0xc8
   d4e08:	f7ff f9a0 	bl	d414c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
      txCharacteristic.setValue("\nCurrent value for WiFi connection interval is [");
   d4e0c:	2200      	movs	r2, #0
   d4e0e:	4937      	ldr	r1, [pc, #220]	; (d4eec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x620>)
   d4e10:	482b      	ldr	r0, [pc, #172]	; (d4ec0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   d4e12:	f002 f9fc 	bl	d720e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(wifiInterval != -1){
   d4e16:	6823      	ldr	r3, [r4, #0]
   d4e18:	1c5a      	adds	r2, r3, #1
   d4e1a:	d00f      	beq.n	d4e3c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x570>
        txCharacteristic.setValue(String(wifiInterval / 1000));
   d4e1c:	220a      	movs	r2, #10
   d4e1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4e22:	a801      	add	r0, sp, #4
   d4e24:	fb93 f1f1 	sdiv	r1, r3, r1
   d4e28:	f001 fd8b 	bl	d6942 <_ZN6StringC1Eih>
   d4e2c:	4824      	ldr	r0, [pc, #144]	; (d4ec0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   d4e2e:	2200      	movs	r2, #0
   d4e30:	a901      	add	r1, sp, #4
   d4e32:	f002 f9e7 	bl	d7204 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   d4e36:	a801      	add	r0, sp, #4
   d4e38:	f001 fcde 	bl	d67f8 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between WiFi connections as an integer in seconds (blank to skip): ");
   d4e3c:	492c      	ldr	r1, [pc, #176]	; (d4ef0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x624>)
   d4e3e:	2200      	movs	r2, #0
   d4e40:	e61e      	b.n	d4a80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
   d4e42:	4921      	ldr	r1, [pc, #132]	; (d4ec8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5fc>)
   d4e44:	4819      	ldr	r0, [pc, #100]	; (d4eac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e0>)
   d4e46:	f001 fe05 	bl	d6a54 <_ZNK6String6equalsEPKc>
      if(inputBuffer == ""){
   d4e4a:	b128      	cbz	r0, d4e58 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58c>
        EEPROM.get(200, wifiInterval);
   d4e4c:	f004 f974 	bl	d9138 <_Z21__fetch_global_EEPROMv>
   d4e50:	4925      	ldr	r1, [pc, #148]	; (d4ee8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x61c>)
   d4e52:	20c8      	movs	r0, #200	; 0xc8
   d4e54:	f7ff f97a 	bl	d414c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
      EEPROM.put(200, wifiInterval);
   d4e58:	f004 f96e 	bl	d9138 <_Z21__fetch_global_EEPROMv>
   d4e5c:	2204      	movs	r2, #4
   d4e5e:	4922      	ldr	r1, [pc, #136]	; (d4ee8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x61c>)
   d4e60:	20c8      	movs	r0, #200	; 0xc8
   d4e62:	f000 febf 	bl	d5be4 <HAL_EEPROM_Put>
      EEPROM.get(200, wifiInterval);
   d4e66:	f004 f967 	bl	d9138 <_Z21__fetch_global_EEPROMv>
   d4e6a:	491f      	ldr	r1, [pc, #124]	; (d4ee8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x61c>)
   d4e6c:	20c8      	movs	r0, #200	; 0xc8
   d4e6e:	f7ff f96d 	bl	d414c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
      wifiTimeLeft = wifiInterval;
   d4e72:	4b20      	ldr	r3, [pc, #128]	; (d4ef4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x628>)
   d4e74:	683a      	ldr	r2, [r7, #0]
   d4e76:	601a      	str	r2, [r3, #0]
      Serial.println(wifiInterval);
   d4e78:	f003 fbd0 	bl	d861c <_Z16_fetch_usbserialv>
   d4e7c:	6839      	ldr	r1, [r7, #0]
   d4e7e:	220a      	movs	r2, #10
   d4e80:	f7ff fab4 	bl	d43ec <_ZN5Print7printlnIiLi0EEEjT_i>
      txCharacteristic.setValue("\nEnter 'ota' to wait for OTA update (blank to skip): ");
   d4e84:	491c      	ldr	r1, [pc, #112]	; (d4ef8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x62c>)
   d4e86:	2200      	movs	r2, #0
   d4e88:	e5fa      	b.n	d4a80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
   d4e8a:	bf00      	nop
   d4e8c:	2003e560 	.word	0x2003e560
   d4e90:	2003e5e8 	.word	0x2003e5e8
   d4e94:	2003e7bc 	.word	0x2003e7bc
   d4e98:	000da50f 	.word	0x000da50f
   d4e9c:	000da52d 	.word	0x000da52d
   d4ea0:	000da539 	.word	0x000da539
   d4ea4:	000da53c 	.word	0x000da53c
   d4ea8:	000da570 	.word	0x000da570
   d4eac:	2003e3f4 	.word	0x2003e3f4
   d4eb0:	2003e604 	.word	0x2003e604
   d4eb4:	2003defc 	.word	0x2003defc
   d4eb8:	000da575 	.word	0x000da575
   d4ebc:	000da57d 	.word	0x000da57d
   d4ec0:	2003e614 	.word	0x2003e614
   d4ec4:	000da587 	.word	0x000da587
   d4ec8:	000da53b 	.word	0x000da53b
   d4ecc:	2003dfd4 	.word	0x2003dfd4
   d4ed0:	000da5a7 	.word	0x000da5a7
   d4ed4:	2003def4 	.word	0x2003def4
   d4ed8:	000da5b4 	.word	0x000da5b4
   d4edc:	000da5bb 	.word	0x000da5bb
   d4ee0:	000da5ec 	.word	0x000da5ec
   d4ee4:	2003dfb8 	.word	0x2003dfb8
   d4ee8:	2003def8 	.word	0x2003def8
   d4eec:	000da641 	.word	0x000da641
   d4ef0:	000da672 	.word	0x000da672
   d4ef4:	2003e62c 	.word	0x2003e62c
   d4ef8:	000da6c3 	.word	0x000da6c3
   d4efc:	4910      	ldr	r1, [pc, #64]	; (d4f40 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x674>)
   d4efe:	4811      	ldr	r0, [pc, #68]	; (d4f44 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x678>)
   d4f00:	f001 fda8 	bl	d6a54 <_ZNK6String6equalsEPKc>
      if(inputBuffer == "ota"){
   d4f04:	b198      	cbz	r0, d4f2e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x662>
        Serial.println("346");
   d4f06:	f003 fb89 	bl	d861c <_Z16_fetch_usbserialv>
   d4f0a:	490f      	ldr	r1, [pc, #60]	; (d4f48 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x67c>)
   d4f0c:	f003 f887 	bl	d801e <_ZN5Print7printlnEPKc>

private:
    SystemSleepResult systemSleepResult_;

    static inline uint8_t get_flag(system_flag_t flag) {
        uint8_t value = 0;
   d4f10:	2200      	movs	r2, #0
        system_get_flag(flag, &value, nullptr);
   d4f12:	a901      	add	r1, sp, #4
   d4f14:	2001      	movs	r0, #1
        uint8_t value = 0;
   d4f16:	f88d 2004 	strb.w	r2, [sp, #4]
        system_get_flag(flag, &value, nullptr);
   d4f1a:	f001 f8c7 	bl	d60ac <system_get_flag>
        Serial.println("348");
   d4f1e:	f003 fb7d 	bl	d861c <_Z16_fetch_usbserialv>
   d4f22:	490a      	ldr	r1, [pc, #40]	; (d4f4c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x680>)
   d4f24:	f003 f87b 	bl	d801e <_ZN5Print7printlnEPKc>
        ota = true;
   d4f28:	4b09      	ldr	r3, [pc, #36]	; (d4f50 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x684>)
   d4f2a:	2201      	movs	r2, #1
   d4f2c:	701a      	strb	r2, [r3, #0]
      bleInput = true;
   d4f2e:	4b09      	ldr	r3, [pc, #36]	; (d4f54 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x688>)
   d4f30:	2201      	movs	r2, #1
      digitalWrite(D7, LOW);
   d4f32:	2100      	movs	r1, #0
   d4f34:	2007      	movs	r0, #7
      bleInput = true;
   d4f36:	701a      	strb	r2, [r3, #0]
      digitalWrite(D7, LOW);
   d4f38:	f004 f8d1 	bl	d90de <digitalWrite>
   d4f3c:	e5a3      	b.n	d4a86 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ba>
   d4f3e:	bf00      	nop
   d4f40:	000da6f9 	.word	0x000da6f9
   d4f44:	2003e3f4 	.word	0x2003e3f4
   d4f48:	000da6fd 	.word	0x000da6fd
   d4f4c:	000da701 	.word	0x000da701
   d4f50:	2003e55c 	.word	0x2003e55c
   d4f54:	2003dfb4 	.word	0x2003dfb4

000d4f58 <_ZN15Adafruit_LIS3DHD0Ev>:
   d4f58:	b510      	push	{r4, lr}
   d4f5a:	212c      	movs	r1, #44	; 0x2c
   d4f5c:	4604      	mov	r4, r0
   d4f5e:	f004 f946 	bl	d91ee <_ZdlPvj>
   d4f62:	4620      	mov	r0, r4
   d4f64:	bd10      	pop	{r4, pc}
	...

000d4f68 <_GLOBAL__sub_I_SystemMode>:
   d4f68:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
   d4f6a:	4d6a      	ldr	r5, [pc, #424]	; (d5114 <_GLOBAL__sub_I_SystemMode+0x1ac>)
    SleepResult() {}
   d4f6c:	4b6a      	ldr	r3, [pc, #424]	; (d5118 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4f6e:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4f70:	2400      	movs	r4, #0
   d4f72:	b090      	sub	sp, #64	; 0x40
   d4f74:	602c      	str	r4, [r5, #0]
   d4f76:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d4f78:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d4f7a:	2003      	movs	r0, #3
   d4f7c:	f001 f886 	bl	d608c <set_system_mode>
SYSTEM_MODE(MANUAL)
   d4f80:	4a66      	ldr	r2, [pc, #408]	; (d511c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4f82:	4967      	ldr	r1, [pc, #412]	; (d5120 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   d4f84:	4628      	mov	r0, r5
   d4f86:	f004 f92d 	bl	d91e4 <__aeabi_atexit>
String payload = "";
   d4f8a:	4966      	ldr	r1, [pc, #408]	; (d5124 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d4f8c:	4866      	ldr	r0, [pc, #408]	; (d5128 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   d4f8e:	4d67      	ldr	r5, [pc, #412]	; (d512c <_GLOBAL__sub_I_SystemMode+0x1c4>)
   d4f90:	f001 fc7d 	bl	d688e <_ZN6StringC1EPKc>
   d4f94:	4a61      	ldr	r2, [pc, #388]	; (d511c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4f96:	4966      	ldr	r1, [pc, #408]	; (d5130 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d4f98:	4863      	ldr	r0, [pc, #396]	; (d5128 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   d4f9a:	f004 f923 	bl	d91e4 <__aeabi_atexit>
String unixTime;
   d4f9e:	4961      	ldr	r1, [pc, #388]	; (d5124 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d4fa0:	4864      	ldr	r0, [pc, #400]	; (d5134 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   d4fa2:	f001 fc74 	bl	d688e <_ZN6StringC1EPKc>
   d4fa6:	4a5d      	ldr	r2, [pc, #372]	; (d511c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4fa8:	4961      	ldr	r1, [pc, #388]	; (d5130 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d4faa:	4862      	ldr	r0, [pc, #392]	; (d5134 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   d4fac:	f004 f91a 	bl	d91e4 <__aeabi_atexit>
String ssid, password = "";
   d4fb0:	495c      	ldr	r1, [pc, #368]	; (d5124 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d4fb2:	4861      	ldr	r0, [pc, #388]	; (d5138 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4fb4:	f001 fc6b 	bl	d688e <_ZN6StringC1EPKc>
   d4fb8:	4a58      	ldr	r2, [pc, #352]	; (d511c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4fba:	495d      	ldr	r1, [pc, #372]	; (d5130 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d4fbc:	485e      	ldr	r0, [pc, #376]	; (d5138 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4fbe:	f004 f911 	bl	d91e4 <__aeabi_atexit>
   d4fc2:	4958      	ldr	r1, [pc, #352]	; (d5124 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d4fc4:	485d      	ldr	r0, [pc, #372]	; (d513c <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d4fc6:	f001 fc62 	bl	d688e <_ZN6StringC1EPKc>
   d4fca:	4a54      	ldr	r2, [pc, #336]	; (d511c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4fcc:	4958      	ldr	r1, [pc, #352]	; (d5130 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d4fce:	485b      	ldr	r0, [pc, #364]	; (d513c <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d4fd0:	f004 f908 	bl	d91e4 <__aeabi_atexit>
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d4fd4:	485a      	ldr	r0, [pc, #360]	; (d5140 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d4fd6:	f000 fb55 	bl	d5684 <_ZN15Adafruit_LIS3DHC1Ev>
   d4fda:	4a50      	ldr	r2, [pc, #320]	; (d511c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4fdc:	4959      	ldr	r1, [pc, #356]	; (d5144 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   d4fde:	4858      	ldr	r0, [pc, #352]	; (d5140 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d4fe0:	f004 f900 	bl	d91e4 <__aeabi_atexit>
        : config_(config) {
   d4fe4:	4858      	ldr	r0, [pc, #352]	; (d5148 <_GLOBAL__sub_I_SystemMode+0x1e0>)
SystemSleepConfiguration config;
   d4fe6:	4959      	ldr	r1, [pc, #356]	; (d514c <_GLOBAL__sub_I_SystemMode+0x1e4>)
              valid_(true) {
   d4fe8:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d4fec:	4603      	mov	r3, r0
   d4fee:	1d02      	adds	r2, r0, #4
   d4ff0:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d4ff4:	709c      	strb	r4, [r3, #2]
   d4ff6:	2301      	movs	r3, #1
   d4ff8:	7503      	strb	r3, [r0, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d4ffa:	4b55      	ldr	r3, [pc, #340]	; (d5150 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   d4ffc:	6043      	str	r3, [r0, #4]
   d4ffe:	4a47      	ldr	r2, [pc, #284]	; (d511c <_GLOBAL__sub_I_SystemMode+0x1b4>)
        config_.mode = HAL_SLEEP_MODE_NONE;
   d5000:	7204      	strb	r4, [r0, #8]
        config_.wakeup_sources = nullptr;
   d5002:	e9c0 4403 	strd	r4, r4, [r0, #12]
   d5006:	f004 f8ed 	bl	d91e4 <__aeabi_atexit>
HttpClient http;
   d500a:	4852      	ldr	r0, [pc, #328]	; (d5154 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d500c:	f000 f8d2 	bl	d51b4 <_ZN10HttpClientC1Ev>
   d5010:	4a42      	ldr	r2, [pc, #264]	; (d511c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d5012:	4951      	ldr	r1, [pc, #324]	; (d5158 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d5014:	484f      	ldr	r0, [pc, #316]	; (d5154 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d5016:	f004 f8e5 	bl	d91e4 <__aeabi_atexit>
} http_request_t;
   d501a:	4942      	ldr	r1, [pc, #264]	; (d5124 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d501c:	484f      	ldr	r0, [pc, #316]	; (d515c <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d501e:	f001 fc36 	bl	d688e <_ZN6StringC1EPKc>
   d5022:	484f      	ldr	r0, [pc, #316]	; (d5160 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d5024:	f003 fa4a 	bl	d84bc <_ZN9IPAddressC1Ev>
   d5028:	493e      	ldr	r1, [pc, #248]	; (d5124 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d502a:	484e      	ldr	r0, [pc, #312]	; (d5164 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d502c:	f001 fc2f 	bl	d688e <_ZN6StringC1EPKc>
   d5030:	493c      	ldr	r1, [pc, #240]	; (d5124 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d5032:	484d      	ldr	r0, [pc, #308]	; (d5168 <_GLOBAL__sub_I_SystemMode+0x200>)
   d5034:	f001 fc2b 	bl	d688e <_ZN6StringC1EPKc>
http_request_t request;
   d5038:	4a38      	ldr	r2, [pc, #224]	; (d511c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d503a:	494c      	ldr	r1, [pc, #304]	; (d516c <_GLOBAL__sub_I_SystemMode+0x204>)
   d503c:	4847      	ldr	r0, [pc, #284]	; (d515c <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d503e:	f004 f8d1 	bl	d91e4 <__aeabi_atexit>
} http_response_t;
   d5042:	4938      	ldr	r1, [pc, #224]	; (d5124 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d5044:	484a      	ldr	r0, [pc, #296]	; (d5170 <_GLOBAL__sub_I_SystemMode+0x208>)
   d5046:	f001 fc22 	bl	d688e <_ZN6StringC1EPKc>
http_response_t response;
   d504a:	4a34      	ldr	r2, [pc, #208]	; (d511c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d504c:	4949      	ldr	r1, [pc, #292]	; (d5174 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d504e:	484a      	ldr	r0, [pc, #296]	; (d5178 <_GLOBAL__sub_I_SystemMode+0x210>)
   d5050:	f004 f8c8 	bl	d91e4 <__aeabi_atexit>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d5054:	4949      	ldr	r1, [pc, #292]	; (d517c <_GLOBAL__sub_I_SystemMode+0x214>)
   d5056:	484a      	ldr	r0, [pc, #296]	; (d5180 <_GLOBAL__sub_I_SystemMode+0x218>)
   d5058:	f001 fff6 	bl	d7048 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d505c:	4949      	ldr	r1, [pc, #292]	; (d5184 <_GLOBAL__sub_I_SystemMode+0x21c>)
   d505e:	484a      	ldr	r0, [pc, #296]	; (d5188 <_GLOBAL__sub_I_SystemMode+0x220>)
   d5060:	f001 fff2 	bl	d7048 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d5064:	4949      	ldr	r1, [pc, #292]	; (d518c <_GLOBAL__sub_I_SystemMode+0x224>)
   d5066:	484a      	ldr	r0, [pc, #296]	; (d5190 <_GLOBAL__sub_I_SystemMode+0x228>)
   d5068:	f001 ffee 	bl	d7048 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   d506c:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d506e:	4948      	ldr	r1, [pc, #288]	; (d5190 <_GLOBAL__sub_I_SystemMode+0x228>)
   d5070:	f88d 3014 	strb.w	r3, [sp, #20]
   d5074:	a806      	add	r0, sp, #24
   d5076:	f001 ff01 	bl	d6e7c <_ZN8particle7BleUuidC1ERKS0_>
   d507a:	4941      	ldr	r1, [pc, #260]	; (d5180 <_GLOBAL__sub_I_SystemMode+0x218>)
   d507c:	a80b      	add	r0, sp, #44	; 0x2c
   d507e:	f001 fefd 	bl	d6e7c <_ZN8particle7BleUuidC1ERKS0_>
   d5082:	ab0b      	add	r3, sp, #44	; 0x2c
   d5084:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5088:	4942      	ldr	r1, [pc, #264]	; (d5194 <_GLOBAL__sub_I_SystemMode+0x22c>)
   d508a:	9300      	str	r3, [sp, #0]
   d508c:	aa05      	add	r2, sp, #20
   d508e:	ab06      	add	r3, sp, #24
   d5090:	4841      	ldr	r0, [pc, #260]	; (d5198 <_GLOBAL__sub_I_SystemMode+0x230>)
   d5092:	f7ff f989 	bl	d43a8 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d5096:	4a21      	ldr	r2, [pc, #132]	; (d511c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d5098:	4940      	ldr	r1, [pc, #256]	; (d519c <_GLOBAL__sub_I_SystemMode+0x234>)
   d509a:	483f      	ldr	r0, [pc, #252]	; (d5198 <_GLOBAL__sub_I_SystemMode+0x230>)
   d509c:	f004 f8a2 	bl	d91e4 <__aeabi_atexit>
   d50a0:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d50a2:	4939      	ldr	r1, [pc, #228]	; (d5188 <_GLOBAL__sub_I_SystemMode+0x220>)
   d50a4:	f88d 3014 	strb.w	r3, [sp, #20]
   d50a8:	a806      	add	r0, sp, #24
   d50aa:	f001 fee7 	bl	d6e7c <_ZN8particle7BleUuidC1ERKS0_>
   d50ae:	4934      	ldr	r1, [pc, #208]	; (d5180 <_GLOBAL__sub_I_SystemMode+0x218>)
   d50b0:	a80b      	add	r0, sp, #44	; 0x2c
   d50b2:	f001 fee3 	bl	d6e7c <_ZN8particle7BleUuidC1ERKS0_>
   d50b6:	4b3a      	ldr	r3, [pc, #232]	; (d51a0 <_GLOBAL__sub_I_SystemMode+0x238>)
   d50b8:	9301      	str	r3, [sp, #4]
   d50ba:	ab0b      	add	r3, sp, #44	; 0x2c
   d50bc:	4939      	ldr	r1, [pc, #228]	; (d51a4 <_GLOBAL__sub_I_SystemMode+0x23c>)
   d50be:	9402      	str	r4, [sp, #8]
   d50c0:	9300      	str	r3, [sp, #0]
   d50c2:	aa05      	add	r2, sp, #20
   d50c4:	ab06      	add	r3, sp, #24
   d50c6:	4838      	ldr	r0, [pc, #224]	; (d51a8 <_GLOBAL__sub_I_SystemMode+0x240>)
   d50c8:	f7ff f96e 	bl	d43a8 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d50cc:	4a13      	ldr	r2, [pc, #76]	; (d511c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d50ce:	4933      	ldr	r1, [pc, #204]	; (d519c <_GLOBAL__sub_I_SystemMode+0x234>)
   d50d0:	4835      	ldr	r0, [pc, #212]	; (d51a8 <_GLOBAL__sub_I_SystemMode+0x240>)
   d50d2:	f004 f887 	bl	d91e4 <__aeabi_atexit>
String inputBuffer;
   d50d6:	4913      	ldr	r1, [pc, #76]	; (d5124 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d50d8:	4834      	ldr	r0, [pc, #208]	; (d51ac <_GLOBAL__sub_I_SystemMode+0x244>)
   d50da:	f001 fbd8 	bl	d688e <_ZN6StringC1EPKc>
   d50de:	4a0f      	ldr	r2, [pc, #60]	; (d511c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d50e0:	4913      	ldr	r1, [pc, #76]	; (d5130 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d50e2:	4832      	ldr	r0, [pc, #200]	; (d51ac <_GLOBAL__sub_I_SystemMode+0x244>)
   d50e4:	f004 f87e 	bl	d91e4 <__aeabi_atexit>
   d50e8:	2405      	movs	r4, #5
#ifdef __cplusplus

   WiFiAccessPoint()
   {
       memset(this, 0, sizeof(*this));
       size = sizeof(*this);
   d50ea:	2638      	movs	r6, #56	; 0x38
       memset(this, 0, sizeof(*this));
   d50ec:	1d28      	adds	r0, r5, #4
   d50ee:	2234      	movs	r2, #52	; 0x34
   d50f0:	2100      	movs	r1, #0
   d50f2:	f005 f867 	bl	da1c4 <memset>
WiFiAccessPoint networks[5];
   d50f6:	3c01      	subs	r4, #1
       size = sizeof(*this);
   d50f8:	f845 6b38 	str.w	r6, [r5], #56
   d50fc:	d1f6      	bne.n	d50ec <_GLOBAL__sub_I_SystemMode+0x184>
String networkBuffer;
   d50fe:	4909      	ldr	r1, [pc, #36]	; (d5124 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d5100:	482b      	ldr	r0, [pc, #172]	; (d51b0 <_GLOBAL__sub_I_SystemMode+0x248>)
   d5102:	f001 fbc4 	bl	d688e <_ZN6StringC1EPKc>
   d5106:	4a05      	ldr	r2, [pc, #20]	; (d511c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d5108:	4909      	ldr	r1, [pc, #36]	; (d5130 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d510a:	4829      	ldr	r0, [pc, #164]	; (d51b0 <_GLOBAL__sub_I_SystemMode+0x248>)
   d510c:	f004 f86a 	bl	d91e4 <__aeabi_atexit>
   d5110:	b010      	add	sp, #64	; 0x40
   d5112:	bd70      	pop	{r4, r5, r6, pc}
   d5114:	2003df6c 	.word	0x2003df6c
   d5118:	ffff0000 	.word	0xffff0000
   d511c:	2003df68 	.word	0x2003df68
   d5120:	000d4191 	.word	0x000d4191
   d5124:	000da53b 	.word	0x000da53b
   d5128:	2003e570 	.word	0x2003e570
   d512c:	2003e444 	.word	0x2003e444
   d5130:	000d67f9 	.word	0x000d67f9
   d5134:	2003e61c 	.word	0x2003e61c
   d5138:	2003e5e8 	.word	0x2003e5e8
   d513c:	2003e560 	.word	0x2003e560
   d5140:	2003e404 	.word	0x2003e404
   d5144:	000d40af 	.word	0x000d40af
   d5148:	2003dfb8 	.word	0x2003dfb8
   d514c:	000d4121 	.word	0x000d4121
   d5150:	00030010 	.word	0x00030010
   d5154:	2003dfd8 	.word	0x2003dfd8
   d5158:	000d415d 	.word	0x000d415d
   d515c:	2003e580 	.word	0x2003e580
   d5160:	2003e590 	.word	0x2003e590
   d5164:	2003e5a8 	.word	0x2003e5a8
   d5168:	2003e5bc 	.word	0x2003e5bc
   d516c:	000d40bf 	.word	0x000d40bf
   d5170:	2003e5d0 	.word	0x2003e5d0
   d5174:	000d40b1 	.word	0x000d40b1
   d5178:	2003e5cc 	.word	0x2003e5cc
   d517c:	000da705 	.word	0x000da705
   d5180:	2003df78 	.word	0x2003df78
   d5184:	000da72a 	.word	0x000da72a
   d5188:	2003df8c 	.word	0x2003df8c
   d518c:	000da74f 	.word	0x000da74f
   d5190:	2003dfa0 	.word	0x2003dfa0
   d5194:	000da774 	.word	0x000da774
   d5198:	2003e614 	.word	0x2003e614
   d519c:	000d755b 	.word	0x000d755b
   d51a0:	000d48cd 	.word	0x000d48cd
   d51a4:	000da777 	.word	0x000da777
   d51a8:	2003e5e0 	.word	0x2003e5e0
   d51ac:	2003e3f4 	.word	0x2003e3f4
   d51b0:	2003e430 	.word	0x2003e430

000d51b4 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   d51b4:	b510      	push	{r4, lr}
   d51b6:	4604      	mov	r4, r0
   d51b8:	f003 fda8 	bl	d8d0c <_ZN9TCPClientC1Ev>
{

}
   d51bc:	4620      	mov	r0, r4
   d51be:	bd10      	pop	{r4, pc}

000d51c0 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   d51c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   d51c2:	4f0f      	ldr	r7, [pc, #60]	; (d5200 <_ZN10HttpClient10sendHeaderEPKcS1_+0x40>)
{
   d51c4:	4605      	mov	r5, r0
   d51c6:	4614      	mov	r4, r2
   d51c8:	460e      	mov	r6, r1
    client.print(aHeaderName);
   d51ca:	f002 ff0f 	bl	d7fec <_ZN5Print5printEPKc>
    client.print(": ");
   d51ce:	4639      	mov	r1, r7
   d51d0:	4628      	mov	r0, r5
   d51d2:	f002 ff0b 	bl	d7fec <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d51d6:	4621      	mov	r1, r4
   d51d8:	4628      	mov	r0, r5
   d51da:	f002 ff20 	bl	d801e <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.print(aHeaderName);
   d51de:	f003 fa1d 	bl	d861c <_Z16_fetch_usbserialv>
   d51e2:	4631      	mov	r1, r6
   d51e4:	f002 ff02 	bl	d7fec <_ZN5Print5printEPKc>
    Serial.print(": ");
   d51e8:	f003 fa18 	bl	d861c <_Z16_fetch_usbserialv>
   d51ec:	4639      	mov	r1, r7
   d51ee:	f002 fefd 	bl	d7fec <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   d51f2:	f003 fa13 	bl	d861c <_Z16_fetch_usbserialv>
   d51f6:	4621      	mov	r1, r4
    #endif
}
   d51f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(aHeaderValue);
   d51fc:	f002 bf0f 	b.w	d801e <_ZN5Print7printlnEPKc>
   d5200:	000da4ec 	.word	0x000da4ec

000d5204 <_ZN10HttpClient10sendHeaderEPKc>:
    Serial.println(aHeaderValue);
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName)
{
   d5204:	b510      	push	{r4, lr}
   d5206:	460c      	mov	r4, r1
    client.println(aHeaderName);
   d5208:	f002 ff09 	bl	d801e <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.println(aHeaderName);
   d520c:	f003 fa06 	bl	d861c <_Z16_fetch_usbserialv>
   d5210:	4621      	mov	r1, r4
    #endif
}
   d5212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(aHeaderName);
   d5216:	f002 bf02 	b.w	d801e <_ZN5Print7printlnEPKc>
	...

000d521c <_ZN10HttpClient10sendHeaderEPKci>:
{
   d521c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(": ");
   d521e:	4f10      	ldr	r7, [pc, #64]	; (d5260 <_ZN10HttpClient10sendHeaderEPKci+0x44>)
{
   d5220:	4605      	mov	r5, r0
   d5222:	4614      	mov	r4, r2
   d5224:	460e      	mov	r6, r1
    client.print(aHeaderName);
   d5226:	f002 fee1 	bl	d7fec <_ZN5Print5printEPKc>
    client.print(": ");
   d522a:	4639      	mov	r1, r7
   d522c:	4628      	mov	r0, r5
   d522e:	f002 fedd 	bl	d7fec <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d5232:	220a      	movs	r2, #10
   d5234:	4621      	mov	r1, r4
   d5236:	4628      	mov	r0, r5
   d5238:	f7ff f8d8 	bl	d43ec <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.print(aHeaderName);
   d523c:	f003 f9ee 	bl	d861c <_Z16_fetch_usbserialv>
   d5240:	4631      	mov	r1, r6
   d5242:	f002 fed3 	bl	d7fec <_ZN5Print5printEPKc>
    Serial.print(": ");
   d5246:	f003 f9e9 	bl	d861c <_Z16_fetch_usbserialv>
   d524a:	4639      	mov	r1, r7
   d524c:	f002 fece 	bl	d7fec <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   d5250:	f003 f9e4 	bl	d861c <_Z16_fetch_usbserialv>
   d5254:	220a      	movs	r2, #10
   d5256:	4621      	mov	r1, r4
   d5258:	f7ff f8c8 	bl	d43ec <_ZN5Print7printlnIiLi0EEEjT_i>
}
   d525c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d525e:	bf00      	nop
   d5260:	000da4ec 	.word	0x000da4ec

000d5264 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d5264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5268:	460e      	mov	r6, r1
   d526a:	b091      	sub	sp, #68	; 0x44
   d526c:	461f      	mov	r7, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d526e:	f04f 33ff 	mov.w	r3, #4294967295
   d5272:	6013      	str	r3, [r2, #0]
{
   d5274:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d5276:	2100      	movs	r1, #0
   d5278:	4630      	mov	r0, r6
   d527a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   d527e:	4691      	mov	r9, r2
   d5280:	f001 fbe8 	bl	d6a54 <_ZNK6String6equalsEPKc>
   d5284:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   d5288:	4603      	mov	r3, r0
   d528a:	2800      	cmp	r0, #0
   d528c:	d16e      	bne.n	d536c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x108>
	const char * c_str() const { return buffer; }
   d528e:	f1be 0f00 	cmp.w	lr, #0
   d5292:	bf14      	ite	ne
   d5294:	4672      	movne	r2, lr
   d5296:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   d5298:	6831      	ldr	r1, [r6, #0]
   d529a:	b292      	uxth	r2, r2
   d529c:	4620      	mov	r0, r4
   d529e:	f003 fd49 	bl	d8d34 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   d52a2:	1e05      	subs	r5, r0, #0
   d52a4:	bf18      	it	ne
   d52a6:	2501      	movne	r5, #1
    }

    #ifdef LOGGING
    if (connected) {
   d52a8:	2d00      	cmp	r5, #0
   d52aa:	d07e      	beq.n	d53aa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x146>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d52ac:	2100      	movs	r1, #0
   d52ae:	4630      	mov	r0, r6
   d52b0:	f001 fbd0 	bl	d6a54 <_ZNK6String6equalsEPKc>
        if(aRequest.hostname!=NULL) {
   d52b4:	2800      	cmp	r0, #0
   d52b6:	d16c      	bne.n	d5392 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x12e>
            Serial.print("HttpClient>\tConnecting to: ");
   d52b8:	f003 f9b0 	bl	d861c <_Z16_fetch_usbserialv>
   d52bc:	49bb      	ldr	r1, [pc, #748]	; (d55ac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x348>)
   d52be:	f002 fe95 	bl	d7fec <_ZN5Print5printEPKc>
            Serial.print(aRequest.hostname);
   d52c2:	f003 f9ab 	bl	d861c <_Z16_fetch_usbserialv>
   d52c6:	6831      	ldr	r1, [r6, #0]
   d52c8:	f002 fe90 	bl	d7fec <_ZN5Print5printEPKc>
        } else {
            Serial.print("HttpClient>\tConnecting to IP: ");
            Serial.print(aRequest.ip);
        }
        Serial.print(":");
   d52cc:	f003 f9a6 	bl	d861c <_Z16_fetch_usbserialv>
   d52d0:	49b7      	ldr	r1, [pc, #732]	; (d55b0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x34c>)
   d52d2:	f002 fe8b 	bl	d7fec <_ZN5Print5printEPKc>
        Serial.println(aRequest.port);
   d52d6:	f003 f9a1 	bl	d861c <_Z16_fetch_usbserialv>
   d52da:	220a      	movs	r2, #10
   d52dc:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   d52de:	f7ff f885 	bl	d43ec <_ZN5Print7printlnIiLi0EEEjT_i>
    //
    // Send HTTP Headers
    //

    // Send initial headers (only HTTP 1.0 is supported for now).
    client.print(aHttpMethod);
   d52e2:	4641      	mov	r1, r8
   d52e4:	4620      	mov	r0, r4
   d52e6:	f002 fe81 	bl	d7fec <_ZN5Print5printEPKc>
    client.print(" ");
   d52ea:	49b2      	ldr	r1, [pc, #712]	; (d55b4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   d52ec:	4620      	mov	r0, r4
   d52ee:	f002 fe7d 	bl	d7fec <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   d52f2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   d52f4:	4620      	mov	r0, r4
   d52f6:	f002 fe79 	bl	d7fec <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   d52fa:	49af      	ldr	r1, [pc, #700]	; (d55b8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   d52fc:	4620      	mov	r0, r4
   d52fe:	f002 fe75 	bl	d7fec <_ZN5Print5printEPKc>

    #ifdef LOGGING
    Serial.println("HttpClient>\tStart of HTTP Request.");
   d5302:	f003 f98b 	bl	d861c <_Z16_fetch_usbserialv>
   d5306:	49ad      	ldr	r1, [pc, #692]	; (d55bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   d5308:	f002 fe89 	bl	d801e <_ZN5Print7printlnEPKc>
    Serial.print(aHttpMethod);
   d530c:	f003 f986 	bl	d861c <_Z16_fetch_usbserialv>
   d5310:	4641      	mov	r1, r8
   d5312:	f002 fe6b 	bl	d7fec <_ZN5Print5printEPKc>
    Serial.print(" ");
   d5316:	f003 f981 	bl	d861c <_Z16_fetch_usbserialv>
   d531a:	49a6      	ldr	r1, [pc, #664]	; (d55b4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   d531c:	f002 fe66 	bl	d7fec <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
   d5320:	f003 f97c 	bl	d861c <_Z16_fetch_usbserialv>
   d5324:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   d5326:	f002 fe61 	bl	d7fec <_ZN5Print5printEPKc>
    Serial.print(" HTTP/1.0\r\n");
   d532a:	f003 f977 	bl	d861c <_Z16_fetch_usbserialv>
   d532e:	49a2      	ldr	r1, [pc, #648]	; (d55b8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   d5330:	f002 fe5c 	bl	d7fec <_ZN5Print5printEPKc>
    #endif

    // Send General and Request Headers.
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   d5334:	49a2      	ldr	r1, [pc, #648]	; (d55c0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x35c>)
   d5336:	4aa3      	ldr	r2, [pc, #652]	; (d55c4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x360>)
   d5338:	4620      	mov	r0, r4
   d533a:	f7ff ff41 	bl	d51c0 <_ZN10HttpClient10sendHeaderEPKcS1_>
   d533e:	2100      	movs	r1, #0
   d5340:	4630      	mov	r0, r6
   d5342:	f001 fb87 	bl	d6a54 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   d5346:	b920      	cbnz	r0, d5352 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xee>
        sendHeader("HOST", aRequest.hostname.c_str());
   d5348:	6832      	ldr	r2, [r6, #0]
   d534a:	499f      	ldr	r1, [pc, #636]	; (d55c8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x364>)
   d534c:	4620      	mov	r0, r4
   d534e:	f7ff ff37 	bl	d51c0 <_ZN10HttpClient10sendHeaderEPKcS1_>
    }

    //Send Entity Headers
    // TODO: Check the standard, currently sending Content-Length : 0 for empty
    // POST requests, and no content-length for other types.
    if (aRequest.body != NULL) {
   d5352:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   d5356:	2100      	movs	r1, #0
   d5358:	4650      	mov	r0, sl
   d535a:	f001 fb7b 	bl	d6a54 <_ZNK6String6equalsEPKc>
   d535e:	bb78      	cbnz	r0, d53c0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x15c>
        sendHeader("Content-Length", (aRequest.body).length());
   d5360:	6c72      	ldr	r2, [r6, #68]	; 0x44
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
        sendHeader("Content-Length", 0);
   d5362:	499a      	ldr	r1, [pc, #616]	; (d55cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x368>)
   d5364:	4620      	mov	r0, r4
   d5366:	f7ff ff59 	bl	d521c <_ZN10HttpClient10sendHeaderEPKci>
   d536a:	e030      	b.n	d53ce <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d536c:	4b98      	ldr	r3, [pc, #608]	; (d55d0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x36c>)
   d536e:	930a      	str	r3, [sp, #40]	; 0x28
   d5370:	f106 0c14 	add.w	ip, r6, #20
   d5374:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d5378:	ad0b      	add	r5, sp, #44	; 0x2c
   d537a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d537c:	f8dc 3000 	ldr.w	r3, [ip]
   d5380:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   d5382:	fa1f f28e 	uxth.w	r2, lr
   d5386:	2300      	movs	r3, #0
   d5388:	a90a      	add	r1, sp, #40	; 0x28
   d538a:	4620      	mov	r0, r4
   d538c:	f003 fb9f 	bl	d8ace <_ZN9TCPClient7connectE9IPAddresstm>
   d5390:	e787      	b.n	d52a2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3e>
            Serial.print("HttpClient>\tConnecting to IP: ");
   d5392:	f003 f943 	bl	d861c <_Z16_fetch_usbserialv>
   d5396:	498f      	ldr	r1, [pc, #572]	; (d55d4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x370>)
   d5398:	f002 fe28 	bl	d7fec <_ZN5Print5printEPKc>
            Serial.print(aRequest.ip);
   d539c:	f003 f93e 	bl	d861c <_Z16_fetch_usbserialv>
   d53a0:	f106 0110 	add.w	r1, r6, #16
   d53a4:	f002 fe29 	bl	d7ffa <_ZN5Print5printERK9Printable>
   d53a8:	e790      	b.n	d52cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x68>
        Serial.println("HttpClient>\tConnection failed.");
   d53aa:	f003 f937 	bl	d861c <_Z16_fetch_usbserialv>
   d53ae:	498a      	ldr	r1, [pc, #552]	; (d55d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x374>)
   d53b0:	f002 fe35 	bl	d801e <_ZN5Print7printlnEPKc>
        client.stop();
   d53b4:	4620      	mov	r0, r4
   d53b6:	f003 fc5f 	bl	d8c78 <_ZN9TCPClient4stopEv>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   d53ba:	b011      	add	sp, #68	; 0x44
   d53bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   d53c0:	4986      	ldr	r1, [pc, #536]	; (d55dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x378>)
   d53c2:	4640      	mov	r0, r8
   d53c4:	f004 ff2a 	bl	da21c <strcmp>
   d53c8:	4602      	mov	r2, r0
   d53ca:	2800      	cmp	r0, #0
   d53cc:	d0c9      	beq.n	d5362 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfe>
    if (headers != NULL)
   d53ce:	b15f      	cbz	r7, d53e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x184>
        while (headers[i].header != NULL)
   d53d0:	6839      	ldr	r1, [r7, #0]
   d53d2:	b149      	cbz	r1, d53e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x184>
            if (headers[i].value != NULL) {
   d53d4:	687a      	ldr	r2, [r7, #4]
                sendHeader(headers[i].header, headers[i].value);
   d53d6:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   d53d8:	b11a      	cbz	r2, d53e2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17e>
                sendHeader(headers[i].header, headers[i].value);
   d53da:	f7ff fef1 	bl	d51c0 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   d53de:	3708      	adds	r7, #8
        while (headers[i].header != NULL)
   d53e0:	e7f6      	b.n	d53d0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16c>
                sendHeader(headers[i].header);
   d53e2:	f7ff ff0f 	bl	d5204 <_ZN10HttpClient10sendHeaderEPKc>
   d53e6:	e7fa      	b.n	d53de <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17a>
    client.println();
   d53e8:	4620      	mov	r0, r4
   d53ea:	f002 fe0c 	bl	d8006 <_ZN5Print7printlnEv>
    client.flush();
   d53ee:	4620      	mov	r0, r4
   d53f0:	f003 fa60 	bl	d88b4 <_ZN9TCPClient5flushEv>
   d53f4:	2100      	movs	r1, #0
   d53f6:	4650      	mov	r0, sl
   d53f8:	f001 fb2c 	bl	d6a54 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   d53fc:	b940      	cbnz	r0, d5410 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ac>
        client.println(aRequest.body);
   d53fe:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   d5400:	4620      	mov	r0, r4
   d5402:	f002 fe0c 	bl	d801e <_ZN5Print7printlnEPKc>
        Serial.println(aRequest.body);
   d5406:	f003 f909 	bl	d861c <_Z16_fetch_usbserialv>
   d540a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   d540c:	f002 fe07 	bl	d801e <_ZN5Print7printlnEPKc>
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   d5410:	f003 f904 	bl	d861c <_Z16_fetch_usbserialv>
    memset(&buffer[0], 0, sizeof(buffer));
   d5414:	f104 0a1c 	add.w	sl, r4, #28
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   d5418:	4971      	ldr	r1, [pc, #452]	; (d55e0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x37c>)
   d541a:	f002 fe00 	bl	d801e <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   d541e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d5422:	2100      	movs	r1, #0
   d5424:	4650      	mov	r0, sl
   d5426:	f004 fecd 	bl	da1c4 <memset>
   d542a:	f000 fbc3 	bl	d5bb4 <HAL_Timer_Get_Milli_Seconds>
   d542e:	9000      	str	r0, [sp, #0]
   d5430:	f000 fbc0 	bl	d5bb4 <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
   d5434:	2700      	movs	r7, #0
   d5436:	9001      	str	r0, [sp, #4]
        int bytes = client.available();
   d5438:	4620      	mov	r0, r4
   d543a:	f003 fbc3 	bl	d8bc4 <_ZN9TCPClient9availableEv>
        if(bytes) {
   d543e:	4606      	mov	r6, r0
   d5440:	b1b0      	cbz	r0, d5470 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x20c>
            Serial.print("\r\nHttpClient>\tReceiving TCP transaction of ");
   d5442:	f003 f8eb 	bl	d861c <_Z16_fetch_usbserialv>
   d5446:	4967      	ldr	r1, [pc, #412]	; (d55e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x380>)
   d5448:	f002 fdd0 	bl	d7fec <_ZN5Print5printEPKc>
            Serial.print(bytes);
   d544c:	f003 f8e6 	bl	d861c <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
   d5450:	2e00      	cmp	r6, #0
   d5452:	4683      	mov	fp, r0
   d5454:	da27      	bge.n	d54a6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x242>
            t = print('-');
   d5456:	212d      	movs	r1, #45	; 0x2d
   d5458:	f002 fdcc 	bl	d7ff4 <_ZN5Print5printEc>
            val = -n;
   d545c:	4271      	negs	r1, r6
        return printNumber(val, base) + t;
   d545e:	220a      	movs	r2, #10
   d5460:	4658      	mov	r0, fp
   d5462:	f002 fde6 	bl	d8032 <_ZN5Print11printNumberEmh>
            Serial.println(" bytes.");
   d5466:	f003 f8d9 	bl	d861c <_Z16_fetch_usbserialv>
   d546a:	495f      	ldr	r1, [pc, #380]	; (d55e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x384>)
   d546c:	f002 fdd7 	bl	d801e <_ZN5Print7printlnEPKc>
    unsigned int bufferPosition = 0;
   d5470:	f04f 0b00 	mov.w	fp, #0
        while (client.available()) {
   d5474:	4620      	mov	r0, r4
   d5476:	f003 fba5 	bl	d8bc4 <_ZN9TCPClient9availableEv>
   d547a:	b338      	cbz	r0, d54cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x268>
            char c = client.read();
   d547c:	4620      	mov	r0, r4
   d547e:	f003 fada 	bl	d8a36 <_ZN9TCPClient4readEv>
   d5482:	fa5f f880 	uxtb.w	r8, r0
            Serial.print(c);
   d5486:	f003 f8c9 	bl	d861c <_Z16_fetch_usbserialv>
   d548a:	4641      	mov	r1, r8
   d548c:	f002 fdb2 	bl	d7ff4 <_ZN5Print5printEc>
   d5490:	f000 fb90 	bl	d5bb4 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   d5494:	f240 33fe 	movw	r3, #1022	; 0x3fe
   d5498:	429f      	cmp	r7, r3
   d549a:	9000      	str	r0, [sp, #0]
   d549c:	d805      	bhi.n	d54aa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x246>
                buffer[bufferPosition] = c;
   d549e:	f80a 8007 	strb.w	r8, [sl, r7]
            bufferPosition++;
   d54a2:	3701      	adds	r7, #1
        while (client.available()) {
   d54a4:	e7e6      	b.n	d5474 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x210>
            val = n;
   d54a6:	4631      	mov	r1, r6
   d54a8:	e7d9      	b.n	d545e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fa>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   d54aa:	f240 33ff 	movw	r3, #1023	; 0x3ff
   d54ae:	429f      	cmp	r7, r3
   d54b0:	d1f7      	bne.n	d54a2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23e>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d54b2:	2300      	movs	r3, #0
   d54b4:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   d54b8:	4620      	mov	r0, r4
   d54ba:	f003 fbdd 	bl	d8c78 <_ZN9TCPClient4stopEv>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
   d54be:	f003 f8ad 	bl	d861c <_Z16_fetch_usbserialv>
   d54c2:	494a      	ldr	r1, [pc, #296]	; (d55ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x388>)
   d54c4:	f002 fdab 	bl	d801e <_ZN5Print7printlnEPKc>
                error = true;
   d54c8:	46ab      	mov	fp, r5
   d54ca:	e7ea      	b.n	d54a2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23e>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d54cc:	19e3      	adds	r3, r4, r7
   d54ce:	7718      	strb	r0, [r3, #28]
        if (bytes) {
   d54d0:	b126      	cbz	r6, d54dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x278>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
   d54d2:	f003 f8a3 	bl	d861c <_Z16_fetch_usbserialv>
   d54d6:	4946      	ldr	r1, [pc, #280]	; (d55f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x38c>)
   d54d8:	f002 fd88 	bl	d7fec <_ZN5Print5printEPKc>
   d54dc:	f000 fb6a 	bl	d5bb4 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   d54e0:	9b00      	ldr	r3, [sp, #0]
   d54e2:	1ac6      	subs	r6, r0, r3
        if (!error && !timeout) {
   d54e4:	f1bb 0f00 	cmp.w	fp, #0
   d54e8:	d106      	bne.n	d54f8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x294>
   d54ea:	f241 3388 	movw	r3, #5000	; 0x1388
   d54ee:	429e      	cmp	r6, r3
   d54f0:	d802      	bhi.n	d54f8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x294>
            delay(200);
   d54f2:	20c8      	movs	r0, #200	; 0xc8
   d54f4:	f002 feea 	bl	d82cc <delay>
    } while (client.connected() && !timeout && !error);
   d54f8:	4620      	mov	r0, r4
   d54fa:	f003 f9dc 	bl	d88b6 <_ZN9TCPClient9connectedEv>
   d54fe:	f241 3388 	movw	r3, #5000	; 0x1388
   d5502:	2800      	cmp	r0, #0
   d5504:	d04a      	beq.n	d559c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x338>
   d5506:	429e      	cmp	r6, r3
   d5508:	d84a      	bhi.n	d55a0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x33c>
   d550a:	f1bb 0f00 	cmp.w	fp, #0
   d550e:	d093      	beq.n	d5438 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d4>
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
   d5510:	f003 f884 	bl	d861c <_Z16_fetch_usbserialv>
   d5514:	4937      	ldr	r1, [pc, #220]	; (d55f4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x390>)
   d5516:	f002 fd69 	bl	d7fec <_ZN5Print5printEPKc>
    Serial.print(millis() - firstRead);
   d551a:	f003 f87f 	bl	d861c <_Z16_fetch_usbserialv>
   d551e:	4605      	mov	r5, r0
   d5520:	f000 fb48 	bl	d5bb4 <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   d5524:	9b01      	ldr	r3, [sp, #4]
   d5526:	220a      	movs	r2, #10
   d5528:	1ac1      	subs	r1, r0, r3
   d552a:	4628      	mov	r0, r5
   d552c:	f002 fd81 	bl	d8032 <_ZN5Print11printNumberEmh>
    Serial.println("ms).");
   d5530:	f003 f874 	bl	d861c <_Z16_fetch_usbserialv>
   d5534:	4930      	ldr	r1, [pc, #192]	; (d55f8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x394>)
   d5536:	f002 fd72 	bl	d801e <_ZN5Print7printlnEPKc>
    client.stop();
   d553a:	4620      	mov	r0, r4
   d553c:	f003 fb9c 	bl	d8c78 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   d5540:	4651      	mov	r1, sl
   d5542:	a802      	add	r0, sp, #8
   d5544:	f001 f9a3 	bl	d688e <_ZN6StringC1EPKc>
    String statusCode = raw_response.substring(9,12);
   d5548:	230c      	movs	r3, #12
   d554a:	2209      	movs	r2, #9
   d554c:	a902      	add	r1, sp, #8
   d554e:	a806      	add	r0, sp, #24
   d5550:	f001 faa4 	bl	d6a9c <_ZNK6String9substringEjj>
    Serial.print("HttpClient>\tStatus Code: ");
   d5554:	f003 f862 	bl	d861c <_Z16_fetch_usbserialv>
   d5558:	4928      	ldr	r1, [pc, #160]	; (d55fc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x398>)
   d555a:	f002 fd47 	bl	d7fec <_ZN5Print5printEPKc>
    Serial.println(statusCode);
   d555e:	f003 f85d 	bl	d861c <_Z16_fetch_usbserialv>
   d5562:	9906      	ldr	r1, [sp, #24]
   d5564:	f002 fd5b 	bl	d801e <_ZN5Print7printlnEPKc>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   d5568:	4925      	ldr	r1, [pc, #148]	; (d5600 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x39c>)
   d556a:	a80a      	add	r0, sp, #40	; 0x28
   d556c:	f001 f98f 	bl	d688e <_ZN6StringC1EPKc>
   d5570:	a90a      	add	r1, sp, #40	; 0x28
   d5572:	a802      	add	r0, sp, #8
   d5574:	f001 fa8f 	bl	d6a96 <_ZNK6String7indexOfERKS_>
   d5578:	4604      	mov	r4, r0
   d557a:	a80a      	add	r0, sp, #40	; 0x28
   d557c:	f001 f93c 	bl	d67f8 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   d5580:	1c63      	adds	r3, r4, #1
   d5582:	d143      	bne.n	d560c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a8>
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
   d5584:	f003 f84a 	bl	d861c <_Z16_fetch_usbserialv>
   d5588:	491e      	ldr	r1, [pc, #120]	; (d5604 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a0>)
   d558a:	f002 fd48 	bl	d801e <_ZN5Print7printlnEPKc>
    String statusCode = raw_response.substring(9,12);
   d558e:	a806      	add	r0, sp, #24
   d5590:	f001 f932 	bl	d67f8 <_ZN6StringD1Ev>
    String raw_response(buffer);
   d5594:	a802      	add	r0, sp, #8
   d5596:	f001 f92f 	bl	d67f8 <_ZN6StringD1Ev>
   d559a:	e70e      	b.n	d53ba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x156>
    if (timeout) {
   d559c:	429e      	cmp	r6, r3
   d559e:	d9b7      	bls.n	d5510 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2ac>
        Serial.println("\r\nHttpClient>\tError: Timeout while reading response.");
   d55a0:	f003 f83c 	bl	d861c <_Z16_fetch_usbserialv>
   d55a4:	4918      	ldr	r1, [pc, #96]	; (d5608 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a4>)
   d55a6:	f002 fd3a 	bl	d801e <_ZN5Print7printlnEPKc>
   d55aa:	e7b1      	b.n	d5510 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2ac>
   d55ac:	000da7c5 	.word	0x000da7c5
   d55b0:	000da402 	.word	0x000da402
   d55b4:	000da4ed 	.word	0x000da4ed
   d55b8:	000da800 	.word	0x000da800
   d55bc:	000da80c 	.word	0x000da80c
   d55c0:	000da835 	.word	0x000da835
   d55c4:	000da82f 	.word	0x000da82f
   d55c8:	000da85f 	.word	0x000da85f
   d55cc:	000da864 	.word	0x000da864
   d55d0:	000dac20 	.word	0x000dac20
   d55d4:	000da7e1 	.word	0x000da7e1
   d55d8:	000da840 	.word	0x000da840
   d55dc:	000da430 	.word	0x000da430
   d55e0:	000da873 	.word	0x000da873
   d55e4:	000da894 	.word	0x000da894
   d55e8:	000da8c0 	.word	0x000da8c0
   d55ec:	000da8c8 	.word	0x000da8c8
   d55f0:	000da8fd 	.word	0x000da8fd
   d55f4:	000da958 	.word	0x000da958
   d55f8:	000da97d 	.word	0x000da97d
   d55fc:	000da982 	.word	0x000da982
   d5600:	000da99c 	.word	0x000da99c
   d5604:	000da9a1 	.word	0x000da9a1
   d5608:	000da923 	.word	0x000da923
    aResponse.body = "";
   d560c:	f109 0504 	add.w	r5, r9, #4
   d5610:	490a      	ldr	r1, [pc, #40]	; (d563c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3d8>)
   d5612:	4628      	mov	r0, r5
   d5614:	f001 f983 	bl	d691e <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   d5618:	1d22      	adds	r2, r4, #4
   d561a:	a902      	add	r1, sp, #8
   d561c:	a80a      	add	r0, sp, #40	; 0x28
   d561e:	f001 fa5d 	bl	d6adc <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d5622:	a90a      	add	r1, sp, #40	; 0x28
   d5624:	4628      	mov	r0, r5
   d5626:	f001 f9e3 	bl	d69f0 <_ZN6String6concatERKS_>
   d562a:	a80a      	add	r0, sp, #40	; 0x28
   d562c:	f001 f8e4 	bl	d67f8 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   d5630:	9806      	ldr	r0, [sp, #24]
   d5632:	f004 fd6b 	bl	da10c <atoi>
   d5636:	f8c9 0000 	str.w	r0, [r9]
   d563a:	e7a8      	b.n	d558e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x32a>
   d563c:	000da53b 	.word	0x000da53b

000d5640 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d5640:	4770      	bx	lr
	...

000d5644 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d5644:	460b      	mov	r3, r1
   d5646:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d5648:	2228      	movs	r2, #40	; 0x28
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d564a:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d564c:	2100      	movs	r1, #0
   d564e:	4618      	mov	r0, r3
   d5650:	f004 fdb8 	bl	da1c4 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d5654:	4908      	ldr	r1, [pc, #32]	; (d5678 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
   d5656:	220b      	movs	r2, #11
   d5658:	f004 fdfa 	bl	da250 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d565c:	2200      	movs	r2, #0
  sensor->version     = 1;
   d565e:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d5660:	72c2      	strb	r2, [r0, #11]
  sensor->version     = 1;
   d5662:	60c1      	str	r1, [r0, #12]
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d5664:	4603      	mov	r3, r0
  sensor->sensor_id   = _sensorID;
   d5666:	69a0      	ldr	r0, [r4, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
   d5668:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   d566a:	e9c3 0104 	strd	r0, r1, [r3, #16]
  sensor->max_value   = 0;
   d566e:	2200      	movs	r2, #0
   d5670:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0;
   d5672:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0;
   d5674:	621a      	str	r2, [r3, #32]
}
   d5676:	bd10      	pop	{r4, pc}
   d5678:	000da9d3 	.word	0x000da9d3

000d567c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d567c:	6803      	ldr	r3, [r0, #0]
   d567e:	b2c9      	uxtb	r1, r1
   d5680:	689b      	ldr	r3, [r3, #8]
   d5682:	4718      	bx	r3

000d5684 <_ZN15Adafruit_LIS3DHC1Ev>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   d5684:	4a06      	ldr	r2, [pc, #24]	; (d56a0 <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   d5686:	6002      	str	r2, [r0, #0]
   d5688:	f04f 32ff 	mov.w	r2, #4294967295
   d568c:	6182      	str	r2, [r0, #24]
   d568e:	7742      	strb	r2, [r0, #29]
   d5690:	83c2      	strh	r2, [r0, #30]
   d5692:	22ff      	movs	r2, #255	; 0xff
   d5694:	f880 2020 	strb.w	r2, [r0, #32]
   d5698:	2208      	movs	r2, #8
   d569a:	6242      	str	r2, [r0, #36]	; 0x24
}
   d569c:	4770      	bx	lr
   d569e:	bf00      	nop
   d56a0:	000da9e4 	.word	0x000da9e4

000d56a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d56a4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d56a6:	4c0b      	ldr	r4, [pc, #44]	; (d56d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d56a8:	7821      	ldrb	r1, [r4, #0]
   d56aa:	f3bf 8f5b 	dmb	ish
   d56ae:	f011 0101 	ands.w	r1, r1, #1
   d56b2:	d10b      	bne.n	d56cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d56b4:	4620      	mov	r0, r4
   d56b6:	9101      	str	r1, [sp, #4]
   d56b8:	f7fe fcf1 	bl	d409e <__cxa_guard_acquire>
   d56bc:	9901      	ldr	r1, [sp, #4]
   d56be:	b128      	cbz	r0, d56cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d56c0:	4805      	ldr	r0, [pc, #20]	; (d56d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d56c2:	f000 fe4d 	bl	d6360 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d56c6:	4620      	mov	r0, r4
   d56c8:	f7fe fcee 	bl	d40a8 <__cxa_guard_release>
        return instance;
    }
   d56cc:	4802      	ldr	r0, [pc, #8]	; (d56d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d56ce:	b002      	add	sp, #8
   d56d0:	bd10      	pop	{r4, pc}
   d56d2:	bf00      	nop
   d56d4:	2003e630 	.word	0x2003e630
   d56d8:	2003e634 	.word	0x2003e634

000d56dc <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d56dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
   d56e0:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d56e4:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d56e6:	4605      	mov	r5, r0
   d56e8:	460f      	mov	r7, r1
  if (_sck == -1)
   d56ea:	d106      	bne.n	d56fa <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d56ec:	f7ff ffda 	bl	d56a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d56f0:	4639      	mov	r1, r7
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
   d56f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d56f6:	f000 bebd 	b.w	d6474 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   d56fa:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   d56fc:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   d56fe:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   d5702:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d5706:	2100      	movs	r1, #0
   d5708:	b280      	uxth	r0, r0
   d570a:	f003 fce8 	bl	d90de <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   d570e:	f995 001e 	ldrsb.w	r0, [r5, #30]
   d5712:	fa08 f106 	lsl.w	r1, r8, r6
   d5716:	4039      	ands	r1, r7
   d5718:	b280      	uxth	r0, r0
   d571a:	f003 fce0 	bl	d90de <digitalWrite>
    digitalWrite(_sck, HIGH);
   d571e:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d5722:	2101      	movs	r1, #1
   d5724:	b280      	uxth	r0, r0
   d5726:	f003 fcda 	bl	d90de <digitalWrite>
    if (digitalRead(_miso))
   d572a:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
   d572e:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   d5730:	b280      	uxth	r0, r0
    reply <<= 1;
   d5732:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   d5734:	f003 fcec 	bl	d9110 <digitalRead>
   d5738:	b108      	cbz	r0, d573e <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   d573a:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   d573e:	3e01      	subs	r6, #1
   d5740:	d2df      	bcs.n	d5702 <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
   d5742:	4620      	mov	r0, r4
   d5744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5748 <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   d5748:	b508      	push	{r3, lr}
        instance().setBitOrder(order);
   d574a:	f7ff ffab 	bl	d56a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d574e:	2101      	movs	r1, #1
   d5750:	f000 fe21 	bl	d6396 <_ZN8SPIClass11setBitOrderEh>
        return instance().setClockSpeed(value, scale);
   d5754:	f7ff ffa6 	bl	d56a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5758:	4905      	ldr	r1, [pc, #20]	; (d5770 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   d575a:	2201      	movs	r2, #1
   d575c:	f000 fe58 	bl	d6410 <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
   d5760:	f7ff ffa0 	bl	d56a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   d5764:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d5768:	2100      	movs	r1, #0
   d576a:	f000 be27 	b.w	d63bc <_ZN8SPIClass11setDataModeEh>
   d576e:	bf00      	nop
   d5770:	0007a120 	.word	0x0007a120

000d5774 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d5774:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   d5776:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d577a:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d577c:	4604      	mov	r4, r0
   d577e:	460e      	mov	r6, r1
   d5780:	4615      	mov	r5, r2
  if (_cs == -1) {
   d5782:	d116      	bne.n	d57b2 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   d5784:	f003 fd06 	bl	d9194 <_Z19__fetch_global_Wirev>
   d5788:	7f21      	ldrb	r1, [r4, #28]
   d578a:	f003 f863 	bl	d8854 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d578e:	f003 fd01 	bl	d9194 <_Z19__fetch_global_Wirev>
   d5792:	6803      	ldr	r3, [r0, #0]
   d5794:	4631      	mov	r1, r6
   d5796:	689b      	ldr	r3, [r3, #8]
   d5798:	4798      	blx	r3
    Wire.write((uint8_t)value);
   d579a:	f003 fcfb 	bl	d9194 <_Z19__fetch_global_Wirev>
   d579e:	6803      	ldr	r3, [r0, #0]
   d57a0:	4629      	mov	r1, r5
   d57a2:	689b      	ldr	r3, [r3, #8]
   d57a4:	4798      	blx	r3
    Wire.endTransmission();
   d57a6:	f003 fcf5 	bl	d9194 <_Z19__fetch_global_Wirev>
}
   d57aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   d57ae:	f003 b85c 	b.w	d886a <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
   d57b2:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d57b6:	3301      	adds	r3, #1
   d57b8:	d101      	bne.n	d57be <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   d57ba:	f7ff ffc5 	bl	d5748 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d57be:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d57c2:	2100      	movs	r1, #0
   d57c4:	b280      	uxth	r0, r0
   d57c6:	f003 fc8a 	bl	d90de <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   d57ca:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d57ce:	4620      	mov	r0, r4
   d57d0:	f7ff ff84 	bl	d56dc <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   d57d4:	4629      	mov	r1, r5
   d57d6:	4620      	mov	r0, r4
   d57d8:	f7ff ff80 	bl	d56dc <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   d57dc:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d57e0:	2101      	movs	r1, #1
}
   d57e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   d57e6:	b280      	uxth	r0, r0
   d57e8:	f003 bc79 	b.w	d90de <digitalWrite>

000d57ec <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d57ec:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d57ee:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d57f2:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d57f4:	4604      	mov	r4, r0
   d57f6:	460d      	mov	r5, r1
  if (_cs == -1) {
   d57f8:	d11d      	bne.n	d5836 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   d57fa:	f003 fccb 	bl	d9194 <_Z19__fetch_global_Wirev>
   d57fe:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d5802:	f003 f82b 	bl	d885c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   d5806:	f003 fcc5 	bl	d9194 <_Z19__fetch_global_Wirev>
   d580a:	6803      	ldr	r3, [r0, #0]
   d580c:	4629      	mov	r1, r5
   d580e:	689b      	ldr	r3, [r3, #8]
   d5810:	4798      	blx	r3
    Wire.endTransmission();
   d5812:	f003 fcbf 	bl	d9194 <_Z19__fetch_global_Wirev>
   d5816:	f003 f828 	bl	d886a <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
   d581a:	f003 fcbb 	bl	d9194 <_Z19__fetch_global_Wirev>
   d581e:	7f21      	ldrb	r1, [r4, #28]
   d5820:	2201      	movs	r2, #1
   d5822:	f003 f814 	bl	d884e <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   d5826:	f003 fcb5 	bl	d9194 <_Z19__fetch_global_Wirev>
   d582a:	6803      	ldr	r3, [r0, #0]
   d582c:	695b      	ldr	r3, [r3, #20]
   d582e:	4798      	blx	r3
   d5830:	b2c5      	uxtb	r5, r0
}
   d5832:	4628      	mov	r0, r5
   d5834:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
   d5836:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d583a:	3301      	adds	r3, #1
   d583c:	d101      	bne.n	d5842 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   d583e:	f7ff ff83 	bl	d5748 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
   d5842:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5846:	2100      	movs	r1, #0
   d5848:	b280      	uxth	r0, r0
   d584a:	f003 fc48 	bl	d90de <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   d584e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5852:	4620      	mov	r0, r4
   d5854:	f7ff ff42 	bl	d56dc <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   d5858:	2100      	movs	r1, #0
   d585a:	4620      	mov	r0, r4
   d585c:	f7ff ff3e 	bl	d56dc <_ZN15Adafruit_LIS3DH7spixferEh>
   d5860:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   d5862:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5866:	2101      	movs	r1, #1
   d5868:	b280      	uxth	r0, r0
   d586a:	f003 fc38 	bl	d90de <digitalWrite>
    if (_sck == -1)
   d586e:	e7e0      	b.n	d5832 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

000d5870 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>:
{
   d5870:	b538      	push	{r3, r4, r5, lr}
   d5872:	460d      	mov	r5, r1
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d5874:	2123      	movs	r1, #35	; 0x23
{
   d5876:	4604      	mov	r4, r0
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d5878:	f7ff ffb8 	bl	d57ec <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  r &= ~(0x30);
   d587c:	f020 0230 	bic.w	r2, r0, #48	; 0x30
  r |= range << 4;
   d5880:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d5884:	4620      	mov	r0, r4
   d5886:	b2d2      	uxtb	r2, r2
}
   d5888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d588c:	2123      	movs	r1, #35	; 0x23
   d588e:	f7ff bf71 	b.w	d5774 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d5892 <_ZN15Adafruit_LIS3DH8getRangeEv>:
{
   d5892:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   d5894:	2123      	movs	r1, #35	; 0x23
   d5896:	f7ff ffa9 	bl	d57ec <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   d589a:	f3c0 1001 	ubfx	r0, r0, #4, #2
   d589e:	bd08      	pop	{r3, pc}

000d58a0 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
   d58a0:	b538      	push	{r3, r4, r5, lr}
   d58a2:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d58a4:	2120      	movs	r1, #32
{
   d58a6:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d58a8:	f7ff ffa0 	bl	d57ec <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
   d58ac:	f000 020f 	and.w	r2, r0, #15
  ctl1 |= (dataRate << 4);
   d58b0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d58b4:	4620      	mov	r0, r4
   d58b6:	b2d2      	uxtb	r2, r2
}
   d58b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d58bc:	2120      	movs	r1, #32
   d58be:	f7ff bf59 	b.w	d5774 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d58c2 <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   d58c2:	b510      	push	{r4, lr}
   d58c4:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   d58c6:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
   d58c8:	f990 001d 	ldrsb.w	r0, [r0, #29]
   d58cc:	1c42      	adds	r2, r0, #1
   d58ce:	d123      	bne.n	d5918 <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
   d58d0:	f003 fc60 	bl	d9194 <_Z19__fetch_global_Wirev>
   d58d4:	f002 ff88 	bl	d87e8 <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   d58d8:	210f      	movs	r1, #15
   d58da:	4620      	mov	r0, r4
   d58dc:	f7ff ff86 	bl	d57ec <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   d58e0:	2833      	cmp	r0, #51	; 0x33
   d58e2:	d13d      	bne.n	d5960 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   d58e4:	2207      	movs	r2, #7
   d58e6:	2120      	movs	r1, #32
   d58e8:	4620      	mov	r0, r4
   d58ea:	f7ff ff43 	bl	d5774 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
   d58ee:	2107      	movs	r1, #7
   d58f0:	4620      	mov	r0, r4
   d58f2:	f7ff ffd5 	bl	d58a0 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   d58f6:	2288      	movs	r2, #136	; 0x88
   d58f8:	2123      	movs	r1, #35	; 0x23
   d58fa:	4620      	mov	r0, r4
   d58fc:	f7ff ff3a 	bl	d5774 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   d5900:	2210      	movs	r2, #16
   d5902:	2122      	movs	r1, #34	; 0x22
   d5904:	4620      	mov	r0, r4
   d5906:	f7ff ff35 	bl	d5774 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   d590a:	4620      	mov	r0, r4
   d590c:	2280      	movs	r2, #128	; 0x80
   d590e:	211f      	movs	r1, #31
   d5910:	f7ff ff30 	bl	d5774 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
   d5914:	2001      	movs	r0, #1
}
   d5916:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   d5918:	2101      	movs	r1, #1
   d591a:	b280      	uxth	r0, r0
   d591c:	f003 fbdf 	bl	d90de <digitalWrite>
    pinMode(_cs, OUTPUT);
   d5920:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5924:	2101      	movs	r1, #1
   d5926:	b280      	uxth	r0, r0
   d5928:	f003 fbc8 	bl	d90bc <pinMode>
    if (_sck == -1) {
   d592c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5930:	1c43      	adds	r3, r0, #1
   d5932:	d104      	bne.n	d593e <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
   d5934:	f7ff feb6 	bl	d56a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5938:	f000 fd1c 	bl	d6374 <_ZN8SPIClass5beginEv>
    }
   d593c:	e7cc      	b.n	d58d8 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
   d593e:	2101      	movs	r1, #1
   d5940:	b280      	uxth	r0, r0
   d5942:	f003 fbbb 	bl	d90bc <pinMode>
      pinMode(_mosi, OUTPUT);
   d5946:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d594a:	2101      	movs	r1, #1
   d594c:	b280      	uxth	r0, r0
   d594e:	f003 fbb5 	bl	d90bc <pinMode>
      pinMode(_miso, INPUT);
   d5952:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d5956:	2100      	movs	r1, #0
   d5958:	b280      	uxth	r0, r0
   d595a:	f003 fbaf 	bl	d90bc <pinMode>
   d595e:	e7bb      	b.n	d58d8 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
   d5960:	2000      	movs	r0, #0
   d5962:	e7d8      	b.n	d5916 <_ZN15Adafruit_LIS3DH5beginEh+0x54>

000d5964 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
   d5964:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d5966:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d596a:	3301      	adds	r3, #1
void Adafruit_LIS3DH::read(void) {
   d596c:	4604      	mov	r4, r0
  if (_cs == -1) {
   d596e:	d176      	bne.n	d5a5e <_ZN15Adafruit_LIS3DH4readEv+0xfa>
    Wire.beginTransmission(_i2caddr);
   d5970:	f003 fc10 	bl	d9194 <_Z19__fetch_global_Wirev>
   d5974:	f994 101c 	ldrsb.w	r1, [r4, #28]
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d5978:	4d5c      	ldr	r5, [pc, #368]	; (d5aec <_ZN15Adafruit_LIS3DH4readEv+0x188>)
    Wire.beginTransmission(_i2caddr);
   d597a:	f002 ff6f 	bl	d885c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   d597e:	f003 fc09 	bl	d9194 <_Z19__fetch_global_Wirev>
   d5982:	21a8      	movs	r1, #168	; 0xa8
   d5984:	f7ff fe7a 	bl	d567c <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d5988:	f003 fc04 	bl	d9194 <_Z19__fetch_global_Wirev>
   d598c:	f002 ff6d 	bl	d886a <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
   d5990:	f003 fc00 	bl	d9194 <_Z19__fetch_global_Wirev>
   d5994:	7f21      	ldrb	r1, [r4, #28]
   d5996:	2206      	movs	r2, #6
   d5998:	f002 ff59 	bl	d884e <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d599c:	f003 fbfa 	bl	d9194 <_Z19__fetch_global_Wirev>
   d59a0:	6803      	ldr	r3, [r0, #0]
   d59a2:	695b      	ldr	r3, [r3, #20]
   d59a4:	4798      	blx	r3
   d59a6:	80e0      	strh	r0, [r4, #6]
   d59a8:	f003 fbf4 	bl	d9194 <_Z19__fetch_global_Wirev>
   d59ac:	6803      	ldr	r3, [r0, #0]
   d59ae:	695b      	ldr	r3, [r3, #20]
   d59b0:	4798      	blx	r3
   d59b2:	88e3      	ldrh	r3, [r4, #6]
   d59b4:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d59b8:	4318      	orrs	r0, r3
   d59ba:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   d59bc:	f003 fbea 	bl	d9194 <_Z19__fetch_global_Wirev>
   d59c0:	6803      	ldr	r3, [r0, #0]
   d59c2:	695b      	ldr	r3, [r3, #20]
   d59c4:	4798      	blx	r3
   d59c6:	8120      	strh	r0, [r4, #8]
   d59c8:	f003 fbe4 	bl	d9194 <_Z19__fetch_global_Wirev>
   d59cc:	6803      	ldr	r3, [r0, #0]
   d59ce:	695b      	ldr	r3, [r3, #20]
   d59d0:	4798      	blx	r3
   d59d2:	8923      	ldrh	r3, [r4, #8]
   d59d4:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d59d8:	4318      	orrs	r0, r3
   d59da:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   d59dc:	f003 fbda 	bl	d9194 <_Z19__fetch_global_Wirev>
   d59e0:	6803      	ldr	r3, [r0, #0]
   d59e2:	695b      	ldr	r3, [r3, #20]
   d59e4:	4798      	blx	r3
   d59e6:	8160      	strh	r0, [r4, #10]
   d59e8:	f003 fbd4 	bl	d9194 <_Z19__fetch_global_Wirev>
   d59ec:	6803      	ldr	r3, [r0, #0]
   d59ee:	695b      	ldr	r3, [r3, #20]
   d59f0:	4798      	blx	r3
   d59f2:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d59f6:	8965      	ldrh	r5, [r4, #10]
   d59f8:	4328      	orrs	r0, r5
   d59fa:	8160      	strh	r0, [r4, #10]
  uint8_t range = getRange();
   d59fc:	4620      	mov	r0, r4
   d59fe:	f7ff ff48 	bl	d5892 <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d5a02:	2803      	cmp	r0, #3
   d5a04:	d069      	beq.n	d5ada <_ZN15Adafruit_LIS3DH4readEv+0x176>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d5a06:	2802      	cmp	r0, #2
   d5a08:	d06a      	beq.n	d5ae0 <_ZN15Adafruit_LIS3DH4readEv+0x17c>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d5a0a:	2801      	cmp	r0, #1
   d5a0c:	d06b      	beq.n	d5ae6 <_ZN15Adafruit_LIS3DH4readEv+0x182>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   d5a0e:	2800      	cmp	r0, #0
   d5a10:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   d5a14:	bf18      	it	ne
   d5a16:	2301      	movne	r3, #1
  x_g = (float)x / divider;
   d5a18:	ee07 3a90 	vmov	s15, r3
   d5a1c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d5a20:	ee07 3a10 	vmov	s14, r3
   d5a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5a28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d5a2c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  x_g = (float)x / divider;
   d5a30:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   d5a34:	ee07 3a10 	vmov	s14, r3
   d5a38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_g = (float)x / divider;
   d5a3c:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   d5a40:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   d5a44:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5a48:	ee07 3a10 	vmov	s14, r3
   d5a4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d5a50:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   d5a54:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d5a58:	edc4 6a05 	vstr	s13, [r4, #20]
}
   d5a5c:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
   d5a5e:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d5a62:	3301      	adds	r3, #1
   d5a64:	d101      	bne.n	d5a6a <_ZN15Adafruit_LIS3DH4readEv+0x106>
      beginTransaction();
   d5a66:	f7ff fe6f 	bl	d5748 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d5a6a:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5a6e:	2100      	movs	r1, #0
   d5a70:	b280      	uxth	r0, r0
   d5a72:	f003 fb34 	bl	d90de <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   d5a76:	21e8      	movs	r1, #232	; 0xe8
   d5a78:	4620      	mov	r0, r4
   d5a7a:	f7ff fe2f 	bl	d56dc <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   d5a7e:	21ff      	movs	r1, #255	; 0xff
   d5a80:	4620      	mov	r0, r4
   d5a82:	f7ff fe2b 	bl	d56dc <_ZN15Adafruit_LIS3DH7spixferEh>
   d5a86:	21ff      	movs	r1, #255	; 0xff
   d5a88:	80e0      	strh	r0, [r4, #6]
   d5a8a:	4620      	mov	r0, r4
   d5a8c:	f7ff fe26 	bl	d56dc <_ZN15Adafruit_LIS3DH7spixferEh>
   d5a90:	88e3      	ldrh	r3, [r4, #6]
   d5a92:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d5a96:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   d5a98:	21ff      	movs	r1, #255	; 0xff
   d5a9a:	4620      	mov	r0, r4
   d5a9c:	f7ff fe1e 	bl	d56dc <_ZN15Adafruit_LIS3DH7spixferEh>
   d5aa0:	21ff      	movs	r1, #255	; 0xff
   d5aa2:	8120      	strh	r0, [r4, #8]
   d5aa4:	4620      	mov	r0, r4
   d5aa6:	f7ff fe19 	bl	d56dc <_ZN15Adafruit_LIS3DH7spixferEh>
   d5aaa:	8923      	ldrh	r3, [r4, #8]
   d5aac:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d5ab0:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   d5ab2:	21ff      	movs	r1, #255	; 0xff
   d5ab4:	4620      	mov	r0, r4
   d5ab6:	f7ff fe11 	bl	d56dc <_ZN15Adafruit_LIS3DH7spixferEh>
   d5aba:	21ff      	movs	r1, #255	; 0xff
   d5abc:	8160      	strh	r0, [r4, #10]
   d5abe:	4620      	mov	r0, r4
   d5ac0:	f7ff fe0c 	bl	d56dc <_ZN15Adafruit_LIS3DH7spixferEh>
   d5ac4:	8963      	ldrh	r3, [r4, #10]
   d5ac6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d5aca:	8160      	strh	r0, [r4, #10]
    digitalWrite(_cs, HIGH);
   d5acc:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5ad0:	2101      	movs	r1, #1
   d5ad2:	b280      	uxth	r0, r0
   d5ad4:	f003 fb03 	bl	d90de <digitalWrite>
    if (_sck == -1)
   d5ad8:	e790      	b.n	d59fc <_ZN15Adafruit_LIS3DH4readEv+0x98>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d5ada:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d5ade:	e79b      	b.n	d5a18 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d5ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   d5ae4:	e798      	b.n	d5a18 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d5ae6:	f641 73fe 	movw	r3, #8190	; 0x1ffe
   d5aea:	e795      	b.n	d5a18 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
   d5aec:	00ffff00 	.word	0x00ffff00

000d5af0 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   d5af0:	460c      	mov	r4, r1
   d5af2:	4605      	mov	r5, r0
   d5af4:	b508      	push	{r3, lr}
  memset(event, 0, sizeof(sensors_event_t));
   d5af6:	2220      	movs	r2, #32
   d5af8:	2100      	movs	r1, #0
   d5afa:	1d20      	adds	r0, r4, #4
   d5afc:	f004 fb62 	bl	da1c4 <memset>
  event->version   = sizeof(sensors_event_t);
   d5b00:	2324      	movs	r3, #36	; 0x24
   d5b02:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d5b04:	69ab      	ldr	r3, [r5, #24]
   d5b06:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   d5b08:	2301      	movs	r3, #1
   d5b0a:	60a3      	str	r3, [r4, #8]
  event->timestamp = 0;
   d5b0c:	2300      	movs	r3, #0
   d5b0e:	6123      	str	r3, [r4, #16]
  read();
   d5b10:	4628      	mov	r0, r5
   d5b12:	f7ff ff27 	bl	d5964 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
   d5b16:	68eb      	ldr	r3, [r5, #12]
   d5b18:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   d5b1a:	692b      	ldr	r3, [r5, #16]
   d5b1c:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   d5b1e:	696b      	ldr	r3, [r5, #20]
   d5b20:	61e3      	str	r3, [r4, #28]
	...

000d5b24 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5b24:	b508      	push	{r3, lr}
   d5b26:	4b02      	ldr	r3, [pc, #8]	; (d5b30 <netdb_freeaddrinfo+0xc>)
   d5b28:	681b      	ldr	r3, [r3, #0]
   d5b2a:	689b      	ldr	r3, [r3, #8]
   d5b2c:	9301      	str	r3, [sp, #4]
   d5b2e:	bd08      	pop	{r3, pc}
   d5b30:	00030268 	.word	0x00030268

000d5b34 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5b34:	b508      	push	{r3, lr}
   d5b36:	4b02      	ldr	r3, [pc, #8]	; (d5b40 <netdb_getaddrinfo+0xc>)
   d5b38:	681b      	ldr	r3, [r3, #0]
   d5b3a:	68db      	ldr	r3, [r3, #12]
   d5b3c:	9301      	str	r3, [sp, #4]
   d5b3e:	bd08      	pop	{r3, pc}
   d5b40:	00030268 	.word	0x00030268

000d5b44 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5b44:	b508      	push	{r3, lr}
   d5b46:	4b02      	ldr	r3, [pc, #8]	; (d5b50 <HAL_Pin_Mode+0xc>)
   d5b48:	681b      	ldr	r3, [r3, #0]
   d5b4a:	689b      	ldr	r3, [r3, #8]
   d5b4c:	9301      	str	r3, [sp, #4]
   d5b4e:	bd08      	pop	{r3, pc}
   d5b50:	0003022c 	.word	0x0003022c

000d5b54 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5b54:	b508      	push	{r3, lr}
   d5b56:	4b02      	ldr	r3, [pc, #8]	; (d5b60 <HAL_Get_Pin_Mode+0xc>)
   d5b58:	681b      	ldr	r3, [r3, #0]
   d5b5a:	68db      	ldr	r3, [r3, #12]
   d5b5c:	9301      	str	r3, [sp, #4]
   d5b5e:	bd08      	pop	{r3, pc}
   d5b60:	0003022c 	.word	0x0003022c

000d5b64 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5b64:	b508      	push	{r3, lr}
   d5b66:	4b02      	ldr	r3, [pc, #8]	; (d5b70 <HAL_GPIO_Write+0xc>)
   d5b68:	681b      	ldr	r3, [r3, #0]
   d5b6a:	691b      	ldr	r3, [r3, #16]
   d5b6c:	9301      	str	r3, [sp, #4]
   d5b6e:	bd08      	pop	{r3, pc}
   d5b70:	0003022c 	.word	0x0003022c

000d5b74 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5b74:	b508      	push	{r3, lr}
   d5b76:	4b02      	ldr	r3, [pc, #8]	; (d5b80 <HAL_GPIO_Read+0xc>)
   d5b78:	681b      	ldr	r3, [r3, #0]
   d5b7a:	695b      	ldr	r3, [r3, #20]
   d5b7c:	9301      	str	r3, [sp, #4]
   d5b7e:	bd08      	pop	{r3, pc}
   d5b80:	0003022c 	.word	0x0003022c

000d5b84 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5b84:	b508      	push	{r3, lr}
   d5b86:	4b02      	ldr	r3, [pc, #8]	; (d5b90 <if_index_to_name+0xc>)
   d5b88:	681b      	ldr	r3, [r3, #0]
   d5b8a:	695b      	ldr	r3, [r3, #20]
   d5b8c:	9301      	str	r3, [sp, #4]
   d5b8e:	bd08      	pop	{r3, pc}
   d5b90:	0003026c 	.word	0x0003026c

000d5b94 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5b94:	b508      	push	{r3, lr}
   d5b96:	4b02      	ldr	r3, [pc, #8]	; (d5ba0 <HAL_RNG_GetRandomNumber+0xc>)
   d5b98:	681b      	ldr	r3, [r3, #0]
   d5b9a:	685b      	ldr	r3, [r3, #4]
   d5b9c:	9301      	str	r3, [sp, #4]
   d5b9e:	bd08      	pop	{r3, pc}
   d5ba0:	00030218 	.word	0x00030218

000d5ba4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5ba4:	b508      	push	{r3, lr}
   d5ba6:	4b02      	ldr	r3, [pc, #8]	; (d5bb0 <HAL_Delay_Microseconds+0xc>)
   d5ba8:	681b      	ldr	r3, [r3, #0]
   d5baa:	68db      	ldr	r3, [r3, #12]
   d5bac:	9301      	str	r3, [sp, #4]
   d5bae:	bd08      	pop	{r3, pc}
   d5bb0:	00030218 	.word	0x00030218

000d5bb4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5bb4:	b508      	push	{r3, lr}
   d5bb6:	4b02      	ldr	r3, [pc, #8]	; (d5bc0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5bb8:	681b      	ldr	r3, [r3, #0]
   d5bba:	695b      	ldr	r3, [r3, #20]
   d5bbc:	9301      	str	r3, [sp, #4]
   d5bbe:	bd08      	pop	{r3, pc}
   d5bc0:	00030218 	.word	0x00030218

000d5bc4 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d5bc4:	b508      	push	{r3, lr}
   d5bc6:	4b02      	ldr	r3, [pc, #8]	; (d5bd0 <HAL_EEPROM_Init+0xc>)
   d5bc8:	681b      	ldr	r3, [r3, #0]
   d5bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5bcc:	9301      	str	r3, [sp, #4]
   d5bce:	bd08      	pop	{r3, pc}
   d5bd0:	00030218 	.word	0x00030218

000d5bd4 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d5bd4:	b508      	push	{r3, lr}
   d5bd6:	4b02      	ldr	r3, [pc, #8]	; (d5be0 <HAL_EEPROM_Get+0xc>)
   d5bd8:	681b      	ldr	r3, [r3, #0]
   d5bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5bdc:	9301      	str	r3, [sp, #4]
   d5bde:	bd08      	pop	{r3, pc}
   d5be0:	00030218 	.word	0x00030218

000d5be4 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d5be4:	b508      	push	{r3, lr}
   d5be6:	4b02      	ldr	r3, [pc, #8]	; (d5bf0 <HAL_EEPROM_Put+0xc>)
   d5be8:	681b      	ldr	r3, [r3, #0]
   d5bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5bec:	9301      	str	r3, [sp, #4]
   d5bee:	bd08      	pop	{r3, pc}
   d5bf0:	00030218 	.word	0x00030218

000d5bf4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d5bf4:	b508      	push	{r3, lr}
   d5bf6:	4b02      	ldr	r3, [pc, #8]	; (d5c00 <hal_rtc_time_is_valid+0xc>)
   d5bf8:	681b      	ldr	r3, [r3, #0]
   d5bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5bfc:	9301      	str	r3, [sp, #4]
   d5bfe:	bd08      	pop	{r3, pc}
   d5c00:	00030218 	.word	0x00030218

000d5c04 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d5c04:	b508      	push	{r3, lr}
   d5c06:	4b02      	ldr	r3, [pc, #8]	; (d5c10 <hal_rtc_get_time+0xc>)
   d5c08:	681b      	ldr	r3, [r3, #0]
   d5c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5c0c:	9301      	str	r3, [sp, #4]
   d5c0e:	bd08      	pop	{r3, pc}
   d5c10:	00030218 	.word	0x00030218

000d5c14 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d5c14:	b508      	push	{r3, lr}
   d5c16:	4b02      	ldr	r3, [pc, #8]	; (d5c20 <hal_ble_stack_init+0xc>)
   d5c18:	681b      	ldr	r3, [r3, #0]
   d5c1a:	689b      	ldr	r3, [r3, #8]
   d5c1c:	9301      	str	r3, [sp, #4]
   d5c1e:	bd08      	pop	{r3, pc}
   d5c20:	00030278 	.word	0x00030278

000d5c24 <hal_ble_stack_deinit>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
   d5c24:	b508      	push	{r3, lr}
   d5c26:	4b02      	ldr	r3, [pc, #8]	; (d5c30 <hal_ble_stack_deinit+0xc>)
   d5c28:	681b      	ldr	r3, [r3, #0]
   d5c2a:	68db      	ldr	r3, [r3, #12]
   d5c2c:	9301      	str	r3, [sp, #4]
   d5c2e:	bd08      	pop	{r3, pc}
   d5c30:	00030278 	.word	0x00030278

000d5c34 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d5c34:	b508      	push	{r3, lr}
   d5c36:	4b02      	ldr	r3, [pc, #8]	; (d5c40 <hal_ble_gap_set_advertising_data+0xc>)
   d5c38:	681b      	ldr	r3, [r3, #0]
   d5c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5c3c:	9301      	str	r3, [sp, #4]
   d5c3e:	bd08      	pop	{r3, pc}
   d5c40:	00030278 	.word	0x00030278

000d5c44 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d5c44:	b508      	push	{r3, lr}
   d5c46:	4b02      	ldr	r3, [pc, #8]	; (d5c50 <hal_ble_gap_set_scan_response_data+0xc>)
   d5c48:	681b      	ldr	r3, [r3, #0]
   d5c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5c4c:	9301      	str	r3, [sp, #4]
   d5c4e:	bd08      	pop	{r3, pc}
   d5c50:	00030278 	.word	0x00030278

000d5c54 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d5c54:	b508      	push	{r3, lr}
   d5c56:	4b02      	ldr	r3, [pc, #8]	; (d5c60 <hal_ble_gap_start_advertising+0xc>)
   d5c58:	681b      	ldr	r3, [r3, #0]
   d5c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d5c5c:	9301      	str	r3, [sp, #4]
   d5c5e:	bd08      	pop	{r3, pc}
   d5c60:	00030278 	.word	0x00030278

000d5c64 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d5c64:	b508      	push	{r3, lr}
   d5c66:	4b03      	ldr	r3, [pc, #12]	; (d5c74 <hal_ble_gap_disconnect+0x10>)
   d5c68:	681b      	ldr	r3, [r3, #0]
   d5c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d5c6e:	9301      	str	r3, [sp, #4]
   d5c70:	bd08      	pop	{r3, pc}
   d5c72:	0000      	.short	0x0000
   d5c74:	00030278 	.word	0x00030278

000d5c78 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d5c78:	b508      	push	{r3, lr}
   d5c7a:	4b03      	ldr	r3, [pc, #12]	; (d5c88 <hal_ble_gatt_server_add_service+0x10>)
   d5c7c:	681b      	ldr	r3, [r3, #0]
   d5c7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d5c82:	9301      	str	r3, [sp, #4]
   d5c84:	bd08      	pop	{r3, pc}
   d5c86:	0000      	.short	0x0000
   d5c88:	00030278 	.word	0x00030278

000d5c8c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5c8c:	b508      	push	{r3, lr}
   d5c8e:	4b03      	ldr	r3, [pc, #12]	; (d5c9c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d5c90:	681b      	ldr	r3, [r3, #0]
   d5c92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d5c96:	9301      	str	r3, [sp, #4]
   d5c98:	bd08      	pop	{r3, pc}
   d5c9a:	0000      	.short	0x0000
   d5c9c:	00030278 	.word	0x00030278

000d5ca0 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5ca0:	b508      	push	{r3, lr}
   d5ca2:	4b03      	ldr	r3, [pc, #12]	; (d5cb0 <hal_ble_gatt_client_write_with_response+0x10>)
   d5ca4:	681b      	ldr	r3, [r3, #0]
   d5ca6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d5caa:	9301      	str	r3, [sp, #4]
   d5cac:	bd08      	pop	{r3, pc}
   d5cae:	0000      	.short	0x0000
   d5cb0:	00030278 	.word	0x00030278

000d5cb4 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5cb4:	b508      	push	{r3, lr}
   d5cb6:	4b03      	ldr	r3, [pc, #12]	; (d5cc4 <hal_ble_gatt_client_write_without_response+0x10>)
   d5cb8:	681b      	ldr	r3, [r3, #0]
   d5cba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d5cbe:	9301      	str	r3, [sp, #4]
   d5cc0:	bd08      	pop	{r3, pc}
   d5cc2:	0000      	.short	0x0000
   d5cc4:	00030278 	.word	0x00030278

000d5cc8 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   d5cc8:	b508      	push	{r3, lr}
   d5cca:	4b03      	ldr	r3, [pc, #12]	; (d5cd8 <hal_ble_gap_get_connection_info+0x10>)
   d5ccc:	681b      	ldr	r3, [r3, #0]
   d5cce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   d5cd2:	9301      	str	r3, [sp, #4]
   d5cd4:	bd08      	pop	{r3, pc}
   d5cd6:	0000      	.short	0x0000
   d5cd8:	00030278 	.word	0x00030278

000d5cdc <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d5cdc:	b508      	push	{r3, lr}
   d5cde:	4b03      	ldr	r3, [pc, #12]	; (d5cec <hal_ble_gatt_server_add_characteristic+0x10>)
   d5ce0:	681b      	ldr	r3, [r3, #0]
   d5ce2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d5ce6:	9301      	str	r3, [sp, #4]
   d5ce8:	bd08      	pop	{r3, pc}
   d5cea:	0000      	.short	0x0000
   d5cec:	00030278 	.word	0x00030278

000d5cf0 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d5cf0:	b508      	push	{r3, lr}
   d5cf2:	4b03      	ldr	r3, [pc, #12]	; (d5d00 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d5cf4:	681b      	ldr	r3, [r3, #0]
   d5cf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d5cfa:	9301      	str	r3, [sp, #4]
   d5cfc:	bd08      	pop	{r3, pc}
   d5cfe:	0000      	.short	0x0000
   d5d00:	00030278 	.word	0x00030278

000d5d04 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5d04:	b508      	push	{r3, lr}
   d5d06:	4b03      	ldr	r3, [pc, #12]	; (d5d14 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d5d08:	681b      	ldr	r3, [r3, #0]
   d5d0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d5d0e:	9301      	str	r3, [sp, #4]
   d5d10:	bd08      	pop	{r3, pc}
   d5d12:	0000      	.short	0x0000
   d5d14:	00030278 	.word	0x00030278

000d5d18 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5d18:	b508      	push	{r3, lr}
   d5d1a:	4b03      	ldr	r3, [pc, #12]	; (d5d28 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d5d1c:	681b      	ldr	r3, [r3, #0]
   d5d1e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d5d22:	9301      	str	r3, [sp, #4]
   d5d24:	bd08      	pop	{r3, pc}
   d5d26:	0000      	.short	0x0000
   d5d28:	00030278 	.word	0x00030278

000d5d2c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5d2c:	b508      	push	{r3, lr}
   d5d2e:	4b02      	ldr	r3, [pc, #8]	; (d5d38 <os_mutex_recursive_create+0xc>)
   d5d30:	681b      	ldr	r3, [r3, #0]
   d5d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d34:	9301      	str	r3, [sp, #4]
   d5d36:	bd08      	pop	{r3, pc}
   d5d38:	00030248 	.word	0x00030248

000d5d3c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5d3c:	b508      	push	{r3, lr}
   d5d3e:	4b02      	ldr	r3, [pc, #8]	; (d5d48 <os_mutex_recursive_destroy+0xc>)
   d5d40:	681b      	ldr	r3, [r3, #0]
   d5d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5d44:	9301      	str	r3, [sp, #4]
   d5d46:	bd08      	pop	{r3, pc}
   d5d48:	00030248 	.word	0x00030248

000d5d4c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5d4c:	b508      	push	{r3, lr}
   d5d4e:	4b02      	ldr	r3, [pc, #8]	; (d5d58 <os_mutex_recursive_lock+0xc>)
   d5d50:	681b      	ldr	r3, [r3, #0]
   d5d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5d54:	9301      	str	r3, [sp, #4]
   d5d56:	bd08      	pop	{r3, pc}
   d5d58:	00030248 	.word	0x00030248

000d5d5c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5d5c:	b508      	push	{r3, lr}
   d5d5e:	4b02      	ldr	r3, [pc, #8]	; (d5d68 <os_mutex_recursive_unlock+0xc>)
   d5d60:	681b      	ldr	r3, [r3, #0]
   d5d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5d64:	9301      	str	r3, [sp, #4]
   d5d66:	bd08      	pop	{r3, pc}
   d5d68:	00030248 	.word	0x00030248

000d5d6c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5d6c:	b508      	push	{r3, lr}
   d5d6e:	4b02      	ldr	r3, [pc, #8]	; (d5d78 <inet_inet_ntop+0xc>)
   d5d70:	681b      	ldr	r3, [r3, #0]
   d5d72:	695b      	ldr	r3, [r3, #20]
   d5d74:	9301      	str	r3, [sp, #4]
   d5d76:	bd08      	pop	{r3, pc}
   d5d78:	00030264 	.word	0x00030264

000d5d7c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5d7c:	b508      	push	{r3, lr}
   d5d7e:	4b02      	ldr	r3, [pc, #8]	; (d5d88 <inet_htonl+0xc>)
   d5d80:	681b      	ldr	r3, [r3, #0]
   d5d82:	6a1b      	ldr	r3, [r3, #32]
   d5d84:	9301      	str	r3, [sp, #4]
   d5d86:	bd08      	pop	{r3, pc}
   d5d88:	00030264 	.word	0x00030264

000d5d8c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5d8c:	b508      	push	{r3, lr}
   d5d8e:	4b02      	ldr	r3, [pc, #8]	; (d5d98 <inet_htons+0xc>)
   d5d90:	681b      	ldr	r3, [r3, #0]
   d5d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5d94:	9301      	str	r3, [sp, #4]
   d5d96:	bd08      	pop	{r3, pc}
   d5d98:	00030264 	.word	0x00030264

000d5d9c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5d9c:	b508      	push	{r3, lr}
   d5d9e:	4b02      	ldr	r3, [pc, #8]	; (d5da8 <hal_usart_init+0xc>)
   d5da0:	681b      	ldr	r3, [r3, #0]
   d5da2:	681b      	ldr	r3, [r3, #0]
   d5da4:	9301      	str	r3, [sp, #4]
   d5da6:	bd08      	pop	{r3, pc}
   d5da8:	0003023c 	.word	0x0003023c

000d5dac <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5dac:	b508      	push	{r3, lr}
   d5dae:	4b02      	ldr	r3, [pc, #8]	; (d5db8 <hal_usart_write+0xc>)
   d5db0:	681b      	ldr	r3, [r3, #0]
   d5db2:	68db      	ldr	r3, [r3, #12]
   d5db4:	9301      	str	r3, [sp, #4]
   d5db6:	bd08      	pop	{r3, pc}
   d5db8:	0003023c 	.word	0x0003023c

000d5dbc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5dbc:	b508      	push	{r3, lr}
   d5dbe:	4b02      	ldr	r3, [pc, #8]	; (d5dc8 <hal_usart_available+0xc>)
   d5dc0:	681b      	ldr	r3, [r3, #0]
   d5dc2:	691b      	ldr	r3, [r3, #16]
   d5dc4:	9301      	str	r3, [sp, #4]
   d5dc6:	bd08      	pop	{r3, pc}
   d5dc8:	0003023c 	.word	0x0003023c

000d5dcc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5dcc:	b508      	push	{r3, lr}
   d5dce:	4b02      	ldr	r3, [pc, #8]	; (d5dd8 <hal_usart_read+0xc>)
   d5dd0:	681b      	ldr	r3, [r3, #0]
   d5dd2:	695b      	ldr	r3, [r3, #20]
   d5dd4:	9301      	str	r3, [sp, #4]
   d5dd6:	bd08      	pop	{r3, pc}
   d5dd8:	0003023c 	.word	0x0003023c

000d5ddc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5ddc:	b508      	push	{r3, lr}
   d5dde:	4b02      	ldr	r3, [pc, #8]	; (d5de8 <hal_usart_peek+0xc>)
   d5de0:	681b      	ldr	r3, [r3, #0]
   d5de2:	699b      	ldr	r3, [r3, #24]
   d5de4:	9301      	str	r3, [sp, #4]
   d5de6:	bd08      	pop	{r3, pc}
   d5de8:	0003023c 	.word	0x0003023c

000d5dec <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5dec:	b508      	push	{r3, lr}
   d5dee:	4b02      	ldr	r3, [pc, #8]	; (d5df8 <hal_usart_flush+0xc>)
   d5df0:	681b      	ldr	r3, [r3, #0]
   d5df2:	69db      	ldr	r3, [r3, #28]
   d5df4:	9301      	str	r3, [sp, #4]
   d5df6:	bd08      	pop	{r3, pc}
   d5df8:	0003023c 	.word	0x0003023c

000d5dfc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5dfc:	b508      	push	{r3, lr}
   d5dfe:	4b02      	ldr	r3, [pc, #8]	; (d5e08 <hal_usart_is_enabled+0xc>)
   d5e00:	681b      	ldr	r3, [r3, #0]
   d5e02:	6a1b      	ldr	r3, [r3, #32]
   d5e04:	9301      	str	r3, [sp, #4]
   d5e06:	bd08      	pop	{r3, pc}
   d5e08:	0003023c 	.word	0x0003023c

000d5e0c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5e0c:	b508      	push	{r3, lr}
   d5e0e:	4b02      	ldr	r3, [pc, #8]	; (d5e18 <hal_usart_available_data_for_write+0xc>)
   d5e10:	681b      	ldr	r3, [r3, #0]
   d5e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e14:	9301      	str	r3, [sp, #4]
   d5e16:	bd08      	pop	{r3, pc}
   d5e18:	0003023c 	.word	0x0003023c

000d5e1c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5e1c:	b508      	push	{r3, lr}
   d5e1e:	4b02      	ldr	r3, [pc, #8]	; (d5e28 <hal_i2c_begin+0xc>)
   d5e20:	681b      	ldr	r3, [r3, #0]
   d5e22:	68db      	ldr	r3, [r3, #12]
   d5e24:	9301      	str	r3, [sp, #4]
   d5e26:	bd08      	pop	{r3, pc}
   d5e28:	00030228 	.word	0x00030228

000d5e2c <hal_i2c_end>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
   d5e2c:	b508      	push	{r3, lr}
   d5e2e:	4b02      	ldr	r3, [pc, #8]	; (d5e38 <hal_i2c_end+0xc>)
   d5e30:	681b      	ldr	r3, [r3, #0]
   d5e32:	691b      	ldr	r3, [r3, #16]
   d5e34:	9301      	str	r3, [sp, #4]
   d5e36:	bd08      	pop	{r3, pc}
   d5e38:	00030228 	.word	0x00030228

000d5e3c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5e3c:	b508      	push	{r3, lr}
   d5e3e:	4b02      	ldr	r3, [pc, #8]	; (d5e48 <hal_i2c_begin_transmission+0xc>)
   d5e40:	681b      	ldr	r3, [r3, #0]
   d5e42:	699b      	ldr	r3, [r3, #24]
   d5e44:	9301      	str	r3, [sp, #4]
   d5e46:	bd08      	pop	{r3, pc}
   d5e48:	00030228 	.word	0x00030228

000d5e4c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5e4c:	b508      	push	{r3, lr}
   d5e4e:	4b02      	ldr	r3, [pc, #8]	; (d5e58 <hal_i2c_end_transmission+0xc>)
   d5e50:	681b      	ldr	r3, [r3, #0]
   d5e52:	69db      	ldr	r3, [r3, #28]
   d5e54:	9301      	str	r3, [sp, #4]
   d5e56:	bd08      	pop	{r3, pc}
   d5e58:	00030228 	.word	0x00030228

000d5e5c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5e5c:	b508      	push	{r3, lr}
   d5e5e:	4b02      	ldr	r3, [pc, #8]	; (d5e68 <hal_i2c_write+0xc>)
   d5e60:	681b      	ldr	r3, [r3, #0]
   d5e62:	6a1b      	ldr	r3, [r3, #32]
   d5e64:	9301      	str	r3, [sp, #4]
   d5e66:	bd08      	pop	{r3, pc}
   d5e68:	00030228 	.word	0x00030228

000d5e6c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5e6c:	b508      	push	{r3, lr}
   d5e6e:	4b02      	ldr	r3, [pc, #8]	; (d5e78 <hal_i2c_available+0xc>)
   d5e70:	681b      	ldr	r3, [r3, #0]
   d5e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5e74:	9301      	str	r3, [sp, #4]
   d5e76:	bd08      	pop	{r3, pc}
   d5e78:	00030228 	.word	0x00030228

000d5e7c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5e7c:	b508      	push	{r3, lr}
   d5e7e:	4b02      	ldr	r3, [pc, #8]	; (d5e88 <hal_i2c_read+0xc>)
   d5e80:	681b      	ldr	r3, [r3, #0]
   d5e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e84:	9301      	str	r3, [sp, #4]
   d5e86:	bd08      	pop	{r3, pc}
   d5e88:	00030228 	.word	0x00030228

000d5e8c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5e8c:	b508      	push	{r3, lr}
   d5e8e:	4b02      	ldr	r3, [pc, #8]	; (d5e98 <hal_i2c_peek+0xc>)
   d5e90:	681b      	ldr	r3, [r3, #0]
   d5e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e94:	9301      	str	r3, [sp, #4]
   d5e96:	bd08      	pop	{r3, pc}
   d5e98:	00030228 	.word	0x00030228

000d5e9c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5e9c:	b508      	push	{r3, lr}
   d5e9e:	4b02      	ldr	r3, [pc, #8]	; (d5ea8 <hal_i2c_flush+0xc>)
   d5ea0:	681b      	ldr	r3, [r3, #0]
   d5ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ea4:	9301      	str	r3, [sp, #4]
   d5ea6:	bd08      	pop	{r3, pc}
   d5ea8:	00030228 	.word	0x00030228

000d5eac <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5eac:	b508      	push	{r3, lr}
   d5eae:	4b02      	ldr	r3, [pc, #8]	; (d5eb8 <hal_i2c_is_enabled+0xc>)
   d5eb0:	681b      	ldr	r3, [r3, #0]
   d5eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5eb4:	9301      	str	r3, [sp, #4]
   d5eb6:	bd08      	pop	{r3, pc}
   d5eb8:	00030228 	.word	0x00030228

000d5ebc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5ebc:	b508      	push	{r3, lr}
   d5ebe:	4b02      	ldr	r3, [pc, #8]	; (d5ec8 <hal_i2c_init+0xc>)
   d5ec0:	681b      	ldr	r3, [r3, #0]
   d5ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5ec4:	9301      	str	r3, [sp, #4]
   d5ec6:	bd08      	pop	{r3, pc}
   d5ec8:	00030228 	.word	0x00030228

000d5ecc <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5ecc:	b508      	push	{r3, lr}
   d5ece:	4b02      	ldr	r3, [pc, #8]	; (d5ed8 <hal_i2c_request_ex+0xc>)
   d5ed0:	681b      	ldr	r3, [r3, #0]
   d5ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5ed4:	9301      	str	r3, [sp, #4]
   d5ed6:	bd08      	pop	{r3, pc}
   d5ed8:	00030228 	.word	0x00030228

000d5edc <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5edc:	b508      	push	{r3, lr}
   d5ede:	4b02      	ldr	r3, [pc, #8]	; (d5ee8 <sock_setsockopt+0xc>)
   d5ee0:	681b      	ldr	r3, [r3, #0]
   d5ee2:	699b      	ldr	r3, [r3, #24]
   d5ee4:	9301      	str	r3, [sp, #4]
   d5ee6:	bd08      	pop	{r3, pc}
   d5ee8:	00030238 	.word	0x00030238

000d5eec <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5eec:	b508      	push	{r3, lr}
   d5eee:	4b02      	ldr	r3, [pc, #8]	; (d5ef8 <sock_close+0xc>)
   d5ef0:	681b      	ldr	r3, [r3, #0]
   d5ef2:	69db      	ldr	r3, [r3, #28]
   d5ef4:	9301      	str	r3, [sp, #4]
   d5ef6:	bd08      	pop	{r3, pc}
   d5ef8:	00030238 	.word	0x00030238

000d5efc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5efc:	b508      	push	{r3, lr}
   d5efe:	4b02      	ldr	r3, [pc, #8]	; (d5f08 <sock_connect+0xc>)
   d5f00:	681b      	ldr	r3, [r3, #0]
   d5f02:	6a1b      	ldr	r3, [r3, #32]
   d5f04:	9301      	str	r3, [sp, #4]
   d5f06:	bd08      	pop	{r3, pc}
   d5f08:	00030238 	.word	0x00030238

000d5f0c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5f0c:	b508      	push	{r3, lr}
   d5f0e:	4b02      	ldr	r3, [pc, #8]	; (d5f18 <sock_recv+0xc>)
   d5f10:	681b      	ldr	r3, [r3, #0]
   d5f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5f14:	9301      	str	r3, [sp, #4]
   d5f16:	bd08      	pop	{r3, pc}
   d5f18:	00030238 	.word	0x00030238

000d5f1c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5f1c:	b508      	push	{r3, lr}
   d5f1e:	4b02      	ldr	r3, [pc, #8]	; (d5f28 <sock_send+0xc>)
   d5f20:	681b      	ldr	r3, [r3, #0]
   d5f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5f24:	9301      	str	r3, [sp, #4]
   d5f26:	bd08      	pop	{r3, pc}
   d5f28:	00030238 	.word	0x00030238

000d5f2c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5f2c:	b508      	push	{r3, lr}
   d5f2e:	4b02      	ldr	r3, [pc, #8]	; (d5f38 <sock_socket+0xc>)
   d5f30:	681b      	ldr	r3, [r3, #0]
   d5f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5f34:	9301      	str	r3, [sp, #4]
   d5f36:	bd08      	pop	{r3, pc}
   d5f38:	00030238 	.word	0x00030238

000d5f3c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5f3c:	b508      	push	{r3, lr}
   d5f3e:	4b02      	ldr	r3, [pc, #8]	; (d5f48 <hal_spi_begin+0xc>)
   d5f40:	681b      	ldr	r3, [r3, #0]
   d5f42:	681b      	ldr	r3, [r3, #0]
   d5f44:	9301      	str	r3, [sp, #4]
   d5f46:	bd08      	pop	{r3, pc}
   d5f48:	00030230 	.word	0x00030230

000d5f4c <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d5f4c:	b508      	push	{r3, lr}
   d5f4e:	4b02      	ldr	r3, [pc, #8]	; (d5f58 <hal_spi_set_bit_order+0xc>)
   d5f50:	681b      	ldr	r3, [r3, #0]
   d5f52:	689b      	ldr	r3, [r3, #8]
   d5f54:	9301      	str	r3, [sp, #4]
   d5f56:	bd08      	pop	{r3, pc}
   d5f58:	00030230 	.word	0x00030230

000d5f5c <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d5f5c:	b508      	push	{r3, lr}
   d5f5e:	4b02      	ldr	r3, [pc, #8]	; (d5f68 <hal_spi_set_data_mode+0xc>)
   d5f60:	681b      	ldr	r3, [r3, #0]
   d5f62:	68db      	ldr	r3, [r3, #12]
   d5f64:	9301      	str	r3, [sp, #4]
   d5f66:	bd08      	pop	{r3, pc}
   d5f68:	00030230 	.word	0x00030230

000d5f6c <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d5f6c:	b508      	push	{r3, lr}
   d5f6e:	4b02      	ldr	r3, [pc, #8]	; (d5f78 <hal_spi_set_clock_divider+0xc>)
   d5f70:	681b      	ldr	r3, [r3, #0]
   d5f72:	691b      	ldr	r3, [r3, #16]
   d5f74:	9301      	str	r3, [sp, #4]
   d5f76:	bd08      	pop	{r3, pc}
   d5f78:	00030230 	.word	0x00030230

000d5f7c <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5f7c:	b508      	push	{r3, lr}
   d5f7e:	4b02      	ldr	r3, [pc, #8]	; (d5f88 <hal_spi_transfer+0xc>)
   d5f80:	681b      	ldr	r3, [r3, #0]
   d5f82:	695b      	ldr	r3, [r3, #20]
   d5f84:	9301      	str	r3, [sp, #4]
   d5f86:	bd08      	pop	{r3, pc}
   d5f88:	00030230 	.word	0x00030230

000d5f8c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5f8c:	b508      	push	{r3, lr}
   d5f8e:	4b02      	ldr	r3, [pc, #8]	; (d5f98 <hal_spi_init+0xc>)
   d5f90:	681b      	ldr	r3, [r3, #0]
   d5f92:	69db      	ldr	r3, [r3, #28]
   d5f94:	9301      	str	r3, [sp, #4]
   d5f96:	bd08      	pop	{r3, pc}
   d5f98:	00030230 	.word	0x00030230

000d5f9c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5f9c:	b508      	push	{r3, lr}
   d5f9e:	4b02      	ldr	r3, [pc, #8]	; (d5fa8 <hal_spi_is_enabled+0xc>)
   d5fa0:	681b      	ldr	r3, [r3, #0]
   d5fa2:	6a1b      	ldr	r3, [r3, #32]
   d5fa4:	9301      	str	r3, [sp, #4]
   d5fa6:	bd08      	pop	{r3, pc}
   d5fa8:	00030230 	.word	0x00030230

000d5fac <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5fac:	b508      	push	{r3, lr}
   d5fae:	4b02      	ldr	r3, [pc, #8]	; (d5fb8 <hal_spi_info+0xc>)
   d5fb0:	681b      	ldr	r3, [r3, #0]
   d5fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5fb4:	9301      	str	r3, [sp, #4]
   d5fb6:	bd08      	pop	{r3, pc}
   d5fb8:	00030230 	.word	0x00030230

000d5fbc <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5fbc:	b508      	push	{r3, lr}
   d5fbe:	4b02      	ldr	r3, [pc, #8]	; (d5fc8 <hal_spi_acquire+0xc>)
   d5fc0:	681b      	ldr	r3, [r3, #0]
   d5fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5fc4:	9301      	str	r3, [sp, #4]
   d5fc6:	bd08      	pop	{r3, pc}
   d5fc8:	00030230 	.word	0x00030230

000d5fcc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5fcc:	b508      	push	{r3, lr}
   d5fce:	4b02      	ldr	r3, [pc, #8]	; (d5fd8 <hal_spi_release+0xc>)
   d5fd0:	681b      	ldr	r3, [r3, #0]
   d5fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5fd4:	9301      	str	r3, [sp, #4]
   d5fd6:	bd08      	pop	{r3, pc}
   d5fd8:	00030230 	.word	0x00030230

000d5fdc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5fdc:	b508      	push	{r3, lr}
   d5fde:	4b02      	ldr	r3, [pc, #8]	; (d5fe8 <HAL_USB_USART_Init+0xc>)
   d5fe0:	681b      	ldr	r3, [r3, #0]
   d5fe2:	681b      	ldr	r3, [r3, #0]
   d5fe4:	9301      	str	r3, [sp, #4]
   d5fe6:	bd08      	pop	{r3, pc}
   d5fe8:	0003024c 	.word	0x0003024c

000d5fec <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5fec:	b508      	push	{r3, lr}
   d5fee:	4b02      	ldr	r3, [pc, #8]	; (d5ff8 <HAL_USB_USART_Begin+0xc>)
   d5ff0:	681b      	ldr	r3, [r3, #0]
   d5ff2:	685b      	ldr	r3, [r3, #4]
   d5ff4:	9301      	str	r3, [sp, #4]
   d5ff6:	bd08      	pop	{r3, pc}
   d5ff8:	0003024c 	.word	0x0003024c

000d5ffc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5ffc:	b508      	push	{r3, lr}
   d5ffe:	4b02      	ldr	r3, [pc, #8]	; (d6008 <HAL_USB_USART_Available_Data+0xc>)
   d6000:	681b      	ldr	r3, [r3, #0]
   d6002:	691b      	ldr	r3, [r3, #16]
   d6004:	9301      	str	r3, [sp, #4]
   d6006:	bd08      	pop	{r3, pc}
   d6008:	0003024c 	.word	0x0003024c

000d600c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d600c:	b508      	push	{r3, lr}
   d600e:	4b02      	ldr	r3, [pc, #8]	; (d6018 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6010:	681b      	ldr	r3, [r3, #0]
   d6012:	695b      	ldr	r3, [r3, #20]
   d6014:	9301      	str	r3, [sp, #4]
   d6016:	bd08      	pop	{r3, pc}
   d6018:	0003024c 	.word	0x0003024c

000d601c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d601c:	b508      	push	{r3, lr}
   d601e:	4b02      	ldr	r3, [pc, #8]	; (d6028 <HAL_USB_USART_Receive_Data+0xc>)
   d6020:	681b      	ldr	r3, [r3, #0]
   d6022:	699b      	ldr	r3, [r3, #24]
   d6024:	9301      	str	r3, [sp, #4]
   d6026:	bd08      	pop	{r3, pc}
   d6028:	0003024c 	.word	0x0003024c

000d602c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d602c:	b508      	push	{r3, lr}
   d602e:	4b02      	ldr	r3, [pc, #8]	; (d6038 <HAL_USB_USART_Send_Data+0xc>)
   d6030:	681b      	ldr	r3, [r3, #0]
   d6032:	69db      	ldr	r3, [r3, #28]
   d6034:	9301      	str	r3, [sp, #4]
   d6036:	bd08      	pop	{r3, pc}
   d6038:	0003024c 	.word	0x0003024c

000d603c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d603c:	b508      	push	{r3, lr}
   d603e:	4b02      	ldr	r3, [pc, #8]	; (d6048 <HAL_USB_USART_Flush_Data+0xc>)
   d6040:	681b      	ldr	r3, [r3, #0]
   d6042:	6a1b      	ldr	r3, [r3, #32]
   d6044:	9301      	str	r3, [sp, #4]
   d6046:	bd08      	pop	{r3, pc}
   d6048:	0003024c 	.word	0x0003024c

000d604c <wlan_get_credentials>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
   d604c:	b508      	push	{r3, lr}
   d604e:	4b02      	ldr	r3, [pc, #8]	; (d6058 <wlan_get_credentials+0xc>)
   d6050:	681b      	ldr	r3, [r3, #0]
   d6052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d6054:	9301      	str	r3, [sp, #4]
   d6056:	bd08      	pop	{r3, pc}
   d6058:	00030274 	.word	0x00030274

000d605c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d605c:	b508      	push	{r3, lr}
   d605e:	4b02      	ldr	r3, [pc, #8]	; (d6068 <panic_+0xc>)
   d6060:	681b      	ldr	r3, [r3, #0]
   d6062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6064:	9301      	str	r3, [sp, #4]
   d6066:	bd08      	pop	{r3, pc}
   d6068:	00030260 	.word	0x00030260

000d606c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d606c:	b508      	push	{r3, lr}
   d606e:	4b02      	ldr	r3, [pc, #8]	; (d6078 <log_message+0xc>)
   d6070:	681b      	ldr	r3, [r3, #0]
   d6072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6074:	9301      	str	r3, [sp, #4]
   d6076:	bd08      	pop	{r3, pc}
   d6078:	00030260 	.word	0x00030260

000d607c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d607c:	b508      	push	{r3, lr}
   d607e:	4b02      	ldr	r3, [pc, #8]	; (d6088 <system_mode+0xc>)
   d6080:	681b      	ldr	r3, [r3, #0]
   d6082:	681b      	ldr	r3, [r3, #0]
   d6084:	9301      	str	r3, [sp, #4]
   d6086:	bd08      	pop	{r3, pc}
   d6088:	00030220 	.word	0x00030220

000d608c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d608c:	b508      	push	{r3, lr}
   d608e:	4b02      	ldr	r3, [pc, #8]	; (d6098 <set_system_mode+0xc>)
   d6090:	681b      	ldr	r3, [r3, #0]
   d6092:	685b      	ldr	r3, [r3, #4]
   d6094:	9301      	str	r3, [sp, #4]
   d6096:	bd08      	pop	{r3, pc}
   d6098:	00030220 	.word	0x00030220

000d609c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d609c:	b508      	push	{r3, lr}
   d609e:	4b02      	ldr	r3, [pc, #8]	; (d60a8 <system_delay_ms+0xc>)
   d60a0:	681b      	ldr	r3, [r3, #0]
   d60a2:	695b      	ldr	r3, [r3, #20]
   d60a4:	9301      	str	r3, [sp, #4]
   d60a6:	bd08      	pop	{r3, pc}
   d60a8:	00030220 	.word	0x00030220

000d60ac <system_get_flag>:
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
DYNALIB_FN(14, system, system_set_flag, int(system_flag_t, uint8_t, void*))
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
   d60ac:	b508      	push	{r3, lr}
   d60ae:	4b02      	ldr	r3, [pc, #8]	; (d60b8 <system_get_flag+0xc>)
   d60b0:	681b      	ldr	r3, [r3, #0]
   d60b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d60b4:	9301      	str	r3, [sp, #4]
   d60b6:	bd08      	pop	{r3, pc}
   d60b8:	00030220 	.word	0x00030220

000d60bc <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d60bc:	b508      	push	{r3, lr}
   d60be:	4b02      	ldr	r3, [pc, #8]	; (d60c8 <system_thread_get_state+0xc>)
   d60c0:	681b      	ldr	r3, [r3, #0]
   d60c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d60c4:	9301      	str	r3, [sp, #4]
   d60c6:	bd08      	pop	{r3, pc}
   d60c8:	00030220 	.word	0x00030220

000d60cc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d60cc:	b508      	push	{r3, lr}
   d60ce:	4b03      	ldr	r3, [pc, #12]	; (d60dc <system_ctrl_set_app_request_handler+0x10>)
   d60d0:	681b      	ldr	r3, [r3, #0]
   d60d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d60d6:	9301      	str	r3, [sp, #4]
   d60d8:	bd08      	pop	{r3, pc}
   d60da:	0000      	.short	0x0000
   d60dc:	00030220 	.word	0x00030220

000d60e0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d60e0:	b508      	push	{r3, lr}
   d60e2:	4b03      	ldr	r3, [pc, #12]	; (d60f0 <system_ctrl_set_result+0x10>)
   d60e4:	681b      	ldr	r3, [r3, #0]
   d60e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d60ea:	9301      	str	r3, [sp, #4]
   d60ec:	bd08      	pop	{r3, pc}
   d60ee:	0000      	.short	0x0000
   d60f0:	00030220 	.word	0x00030220

000d60f4 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d60f4:	b508      	push	{r3, lr}
   d60f6:	4b03      	ldr	r3, [pc, #12]	; (d6104 <system_sleep_ext+0x10>)
   d60f8:	681b      	ldr	r3, [r3, #0]
   d60fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d60fe:	9301      	str	r3, [sp, #4]
   d6100:	bd08      	pop	{r3, pc}
   d6102:	0000      	.short	0x0000
   d6104:	00030220 	.word	0x00030220

000d6108 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6108:	b508      	push	{r3, lr}
   d610a:	4b02      	ldr	r3, [pc, #8]	; (d6114 <network_connect+0xc>)
   d610c:	681b      	ldr	r3, [r3, #0]
   d610e:	685b      	ldr	r3, [r3, #4]
   d6110:	9301      	str	r3, [sp, #4]
   d6112:	bd08      	pop	{r3, pc}
   d6114:	00030240 	.word	0x00030240

000d6118 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6118:	b508      	push	{r3, lr}
   d611a:	4b02      	ldr	r3, [pc, #8]	; (d6124 <network_connecting+0xc>)
   d611c:	681b      	ldr	r3, [r3, #0]
   d611e:	689b      	ldr	r3, [r3, #8]
   d6120:	9301      	str	r3, [sp, #4]
   d6122:	bd08      	pop	{r3, pc}
   d6124:	00030240 	.word	0x00030240

000d6128 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6128:	b508      	push	{r3, lr}
   d612a:	4b02      	ldr	r3, [pc, #8]	; (d6134 <network_disconnect+0xc>)
   d612c:	681b      	ldr	r3, [r3, #0]
   d612e:	68db      	ldr	r3, [r3, #12]
   d6130:	9301      	str	r3, [sp, #4]
   d6132:	bd08      	pop	{r3, pc}
   d6134:	00030240 	.word	0x00030240

000d6138 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6138:	b508      	push	{r3, lr}
   d613a:	4b02      	ldr	r3, [pc, #8]	; (d6144 <network_ready+0xc>)
   d613c:	681b      	ldr	r3, [r3, #0]
   d613e:	691b      	ldr	r3, [r3, #16]
   d6140:	9301      	str	r3, [sp, #4]
   d6142:	bd08      	pop	{r3, pc}
   d6144:	00030240 	.word	0x00030240

000d6148 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6148:	b508      	push	{r3, lr}
   d614a:	4b02      	ldr	r3, [pc, #8]	; (d6154 <network_on+0xc>)
   d614c:	681b      	ldr	r3, [r3, #0]
   d614e:	695b      	ldr	r3, [r3, #20]
   d6150:	9301      	str	r3, [sp, #4]
   d6152:	bd08      	pop	{r3, pc}
   d6154:	00030240 	.word	0x00030240

000d6158 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6158:	b508      	push	{r3, lr}
   d615a:	4b02      	ldr	r3, [pc, #8]	; (d6164 <network_off+0xc>)
   d615c:	681b      	ldr	r3, [r3, #0]
   d615e:	699b      	ldr	r3, [r3, #24]
   d6160:	9301      	str	r3, [sp, #4]
   d6162:	bd08      	pop	{r3, pc}
   d6164:	00030240 	.word	0x00030240

000d6168 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6168:	b508      	push	{r3, lr}
   d616a:	4b02      	ldr	r3, [pc, #8]	; (d6174 <network_listen+0xc>)
   d616c:	681b      	ldr	r3, [r3, #0]
   d616e:	69db      	ldr	r3, [r3, #28]
   d6170:	9301      	str	r3, [sp, #4]
   d6172:	bd08      	pop	{r3, pc}
   d6174:	00030240 	.word	0x00030240

000d6178 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6178:	b508      	push	{r3, lr}
   d617a:	4b02      	ldr	r3, [pc, #8]	; (d6184 <network_listening+0xc>)
   d617c:	681b      	ldr	r3, [r3, #0]
   d617e:	6a1b      	ldr	r3, [r3, #32]
   d6180:	9301      	str	r3, [sp, #4]
   d6182:	bd08      	pop	{r3, pc}
   d6184:	00030240 	.word	0x00030240

000d6188 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   d6188:	b508      	push	{r3, lr}
   d618a:	4b02      	ldr	r3, [pc, #8]	; (d6194 <network_has_credentials+0xc>)
   d618c:	681b      	ldr	r3, [r3, #0]
   d618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6190:	9301      	str	r3, [sp, #4]
   d6192:	bd08      	pop	{r3, pc}
   d6194:	00030240 	.word	0x00030240

000d6198 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d6198:	b508      	push	{r3, lr}
   d619a:	4b02      	ldr	r3, [pc, #8]	; (d61a4 <network_set_credentials+0xc>)
   d619c:	681b      	ldr	r3, [r3, #0]
   d619e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d61a0:	9301      	str	r3, [sp, #4]
   d61a2:	bd08      	pop	{r3, pc}
   d61a4:	00030240 	.word	0x00030240

000d61a8 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d61a8:	b508      	push	{r3, lr}
   d61aa:	4b02      	ldr	r3, [pc, #8]	; (d61b4 <network_clear_credentials+0xc>)
   d61ac:	681b      	ldr	r3, [r3, #0]
   d61ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d61b0:	9301      	str	r3, [sp, #4]
   d61b2:	bd08      	pop	{r3, pc}
   d61b4:	00030240 	.word	0x00030240

000d61b8 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d61b8:	b508      	push	{r3, lr}
   d61ba:	4b02      	ldr	r3, [pc, #8]	; (d61c4 <network_set_listen_timeout+0xc>)
   d61bc:	681b      	ldr	r3, [r3, #0]
   d61be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d61c0:	9301      	str	r3, [sp, #4]
   d61c2:	bd08      	pop	{r3, pc}
   d61c4:	00030240 	.word	0x00030240

000d61c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d61c8:	b508      	push	{r3, lr}
   d61ca:	4b02      	ldr	r3, [pc, #8]	; (d61d4 <network_get_listen_timeout+0xc>)
   d61cc:	681b      	ldr	r3, [r3, #0]
   d61ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d61d0:	9301      	str	r3, [sp, #4]
   d61d2:	bd08      	pop	{r3, pc}
   d61d4:	00030240 	.word	0x00030240

000d61d8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d61d8:	b508      	push	{r3, lr}
   d61da:	4b02      	ldr	r3, [pc, #8]	; (d61e4 <network_is_on+0xc>)
   d61dc:	681b      	ldr	r3, [r3, #0]
   d61de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d61e0:	9301      	str	r3, [sp, #4]
   d61e2:	bd08      	pop	{r3, pc}
   d61e4:	00030240 	.word	0x00030240

000d61e8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d61e8:	b508      	push	{r3, lr}
   d61ea:	4b02      	ldr	r3, [pc, #8]	; (d61f4 <network_is_off+0xc>)
   d61ec:	681b      	ldr	r3, [r3, #0]
   d61ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d61f0:	9301      	str	r3, [sp, #4]
   d61f2:	bd08      	pop	{r3, pc}
   d61f4:	00030240 	.word	0x00030240

000d61f8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d61f8:	b508      	push	{r3, lr}
   d61fa:	4b02      	ldr	r3, [pc, #8]	; (d6204 <spark_process+0xc>)
   d61fc:	681b      	ldr	r3, [r3, #0]
   d61fe:	689b      	ldr	r3, [r3, #8]
   d6200:	9301      	str	r3, [sp, #4]
   d6202:	bd08      	pop	{r3, pc}
   d6204:	00030244 	.word	0x00030244

000d6208 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d6208:	b508      	push	{r3, lr}
   d620a:	4b02      	ldr	r3, [pc, #8]	; (d6214 <spark_cloud_flag_connect+0xc>)
   d620c:	681b      	ldr	r3, [r3, #0]
   d620e:	68db      	ldr	r3, [r3, #12]
   d6210:	9301      	str	r3, [sp, #4]
   d6212:	bd08      	pop	{r3, pc}
   d6214:	00030244 	.word	0x00030244

000d6218 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6218:	b508      	push	{r3, lr}
   d621a:	4b02      	ldr	r3, [pc, #8]	; (d6224 <spark_cloud_flag_connected+0xc>)
   d621c:	681b      	ldr	r3, [r3, #0]
   d621e:	695b      	ldr	r3, [r3, #20]
   d6220:	9301      	str	r3, [sp, #4]
   d6222:	bd08      	pop	{r3, pc}
   d6224:	00030244 	.word	0x00030244

000d6228 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6228:	b508      	push	{r3, lr}
   d622a:	4b02      	ldr	r3, [pc, #8]	; (d6234 <spark_sync_time+0xc>)
   d622c:	681b      	ldr	r3, [r3, #0]
   d622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6230:	9301      	str	r3, [sp, #4]
   d6232:	bd08      	pop	{r3, pc}
   d6234:	00030244 	.word	0x00030244

000d6238 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6238:	b508      	push	{r3, lr}
   d623a:	4b02      	ldr	r3, [pc, #8]	; (d6244 <spark_sync_time_pending+0xc>)
   d623c:	681b      	ldr	r3, [r3, #0]
   d623e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6240:	9301      	str	r3, [sp, #4]
   d6242:	bd08      	pop	{r3, pc}
   d6244:	00030244 	.word	0x00030244

000d6248 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d6248:	b508      	push	{r3, lr}
   d624a:	4b02      	ldr	r3, [pc, #8]	; (d6254 <spark_sync_time_last+0xc>)
   d624c:	681b      	ldr	r3, [r3, #0]
   d624e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6250:	9301      	str	r3, [sp, #4]
   d6252:	bd08      	pop	{r3, pc}
   d6254:	00030244 	.word	0x00030244

000d6258 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6258:	b508      	push	{r3, lr}
   d625a:	4b02      	ldr	r3, [pc, #8]	; (d6264 <spark_set_random_seed_from_cloud_handler+0xc>)
   d625c:	681b      	ldr	r3, [r3, #0]
   d625e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6260:	9301      	str	r3, [sp, #4]
   d6262:	bd08      	pop	{r3, pc}
   d6264:	00030244 	.word	0x00030244

000d6268 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d6268:	b508      	push	{r3, lr}
   d626a:	4b02      	ldr	r3, [pc, #8]	; (d6274 <spark_cloud_disconnect+0xc>)
   d626c:	681b      	ldr	r3, [r3, #0]
   d626e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6270:	9301      	str	r3, [sp, #4]
   d6272:	bd08      	pop	{r3, pc}
   d6274:	00030244 	.word	0x00030244

000d6278 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6278:	b508      	push	{r3, lr}
   d627a:	4b02      	ldr	r3, [pc, #8]	; (d6284 <malloc+0xc>)
   d627c:	681b      	ldr	r3, [r3, #0]
   d627e:	681b      	ldr	r3, [r3, #0]
   d6280:	9301      	str	r3, [sp, #4]
   d6282:	bd08      	pop	{r3, pc}
   d6284:	0003021c 	.word	0x0003021c

000d6288 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6288:	b508      	push	{r3, lr}
   d628a:	4b02      	ldr	r3, [pc, #8]	; (d6294 <free+0xc>)
   d628c:	681b      	ldr	r3, [r3, #0]
   d628e:	685b      	ldr	r3, [r3, #4]
   d6290:	9301      	str	r3, [sp, #4]
   d6292:	bd08      	pop	{r3, pc}
   d6294:	0003021c 	.word	0x0003021c

000d6298 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6298:	b508      	push	{r3, lr}
   d629a:	4b02      	ldr	r3, [pc, #8]	; (d62a4 <realloc+0xc>)
   d629c:	681b      	ldr	r3, [r3, #0]
   d629e:	689b      	ldr	r3, [r3, #8]
   d62a0:	9301      	str	r3, [sp, #4]
   d62a2:	bd08      	pop	{r3, pc}
   d62a4:	0003021c 	.word	0x0003021c

000d62a8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d62a8:	b508      	push	{r3, lr}
   d62aa:	4b02      	ldr	r3, [pc, #8]	; (d62b4 <abort+0xc>)
   d62ac:	681b      	ldr	r3, [r3, #0]
   d62ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d62b0:	9301      	str	r3, [sp, #4]
   d62b2:	bd08      	pop	{r3, pc}
   d62b4:	0003021c 	.word	0x0003021c

000d62b8 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d62b8:	b508      	push	{r3, lr}
   d62ba:	4b02      	ldr	r3, [pc, #8]	; (d62c4 <__errno+0xc>)
   d62bc:	681b      	ldr	r3, [r3, #0]
   d62be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d62c0:	9301      	str	r3, [sp, #4]
   d62c2:	bd08      	pop	{r3, pc}
   d62c4:	0003021c 	.word	0x0003021c

000d62c8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d62c8:	b508      	push	{r3, lr}
   d62ca:	4b02      	ldr	r3, [pc, #8]	; (d62d4 <newlib_impure_ptr_callback+0xc>)
   d62cc:	681b      	ldr	r3, [r3, #0]
   d62ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d62d0:	9301      	str	r3, [sp, #4]
   d62d2:	bd08      	pop	{r3, pc}
   d62d4:	0003021c 	.word	0x0003021c

000d62d8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d62d8:	2200      	movs	r2, #0
   d62da:	6840      	ldr	r0, [r0, #4]
   d62dc:	4611      	mov	r1, r2
   d62de:	f7ff bf4b 	b.w	d6178 <network_listening>

000d62e2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d62e2:	2200      	movs	r2, #0
   d62e4:	6840      	ldr	r0, [r0, #4]
   d62e6:	4611      	mov	r1, r2
   d62e8:	f7ff bf6e 	b.w	d61c8 <network_get_listen_timeout>

000d62ec <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d62ec:	6840      	ldr	r0, [r0, #4]
   d62ee:	2200      	movs	r2, #0
   d62f0:	f7ff bf62 	b.w	d61b8 <network_set_listen_timeout>

000d62f4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d62f4:	6840      	ldr	r0, [r0, #4]
   d62f6:	2200      	movs	r2, #0
   d62f8:	f081 0101 	eor.w	r1, r1, #1
   d62fc:	f7ff bf34 	b.w	d6168 <network_listen>

000d6300 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6300:	2300      	movs	r3, #0
   d6302:	6840      	ldr	r0, [r0, #4]
   d6304:	461a      	mov	r2, r3
   d6306:	4619      	mov	r1, r3
   d6308:	f7ff bf26 	b.w	d6158 <network_off>

000d630c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d630c:	2300      	movs	r3, #0
   d630e:	6840      	ldr	r0, [r0, #4]
   d6310:	461a      	mov	r2, r3
   d6312:	4619      	mov	r1, r3
   d6314:	f7ff bf18 	b.w	d6148 <network_on>

000d6318 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6318:	2200      	movs	r2, #0
   d631a:	6840      	ldr	r0, [r0, #4]
   d631c:	4611      	mov	r1, r2
   d631e:	f7ff bf0b 	b.w	d6138 <network_ready>

000d6322 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6322:	2200      	movs	r2, #0
   d6324:	6840      	ldr	r0, [r0, #4]
   d6326:	4611      	mov	r1, r2
   d6328:	f7ff bef6 	b.w	d6118 <network_connecting>

000d632c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d632c:	6840      	ldr	r0, [r0, #4]
   d632e:	2200      	movs	r2, #0
   d6330:	2102      	movs	r1, #2
   d6332:	f7ff bef9 	b.w	d6128 <network_disconnect>

000d6336 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6336:	2300      	movs	r3, #0
   d6338:	6840      	ldr	r0, [r0, #4]
   d633a:	461a      	mov	r2, r3
   d633c:	f7ff bee4 	b.w	d6108 <network_connect>

000d6340 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6340:	4b02      	ldr	r3, [pc, #8]	; (d634c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6342:	2203      	movs	r2, #3
   d6344:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6346:	4a02      	ldr	r2, [pc, #8]	; (d6350 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6348:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d634a:	4770      	bx	lr
   d634c:	2003e63c 	.word	0x2003e63c
   d6350:	000daa00 	.word	0x000daa00

000d6354 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d6354:	2100      	movs	r1, #0
   d6356:	f7ff be31 	b.w	d5fbc <hal_spi_acquire>

000d635a <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d635a:	2100      	movs	r1, #0
   d635c:	f7ff be36 	b.w	d5fcc <hal_spi_release>

000d6360 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6360:	b510      	push	{r4, lr}
   d6362:	4604      	mov	r4, r0
   d6364:	4608      	mov	r0, r1
{
    _spi = spi;
   d6366:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6368:	f7ff fe10 	bl	d5f8c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d636c:	2300      	movs	r3, #0
   d636e:	6063      	str	r3, [r4, #4]
}
   d6370:	4620      	mov	r0, r4
   d6372:	bd10      	pop	{r4, pc}

000d6374 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6374:	b510      	push	{r4, lr}
   d6376:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6378:	7800      	ldrb	r0, [r0, #0]
   d637a:	f7ff ffeb 	bl	d6354 <_ZN8SPIClass4lockEv.isra.0>
   d637e:	b948      	cbnz	r0, d6394 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d6380:	7820      	ldrb	r0, [r4, #0]
   d6382:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6386:	f7ff fdd9 	bl	d5f3c <hal_spi_begin>
        unlock();
   d638a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d638c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6390:	f7ff bfe3 	b.w	d635a <_ZN8SPIClass6unlockEv.isra.0>
}
   d6394:	bd10      	pop	{r4, pc}

000d6396 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d6396:	b513      	push	{r0, r1, r4, lr}
   d6398:	4604      	mov	r4, r0
    if (!lock())
   d639a:	7800      	ldrb	r0, [r0, #0]
{
   d639c:	9101      	str	r1, [sp, #4]
    if (!lock())
   d639e:	f7ff ffd9 	bl	d6354 <_ZN8SPIClass4lockEv.isra.0>
   d63a2:	9901      	ldr	r1, [sp, #4]
   d63a4:	b940      	cbnz	r0, d63b8 <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d63a6:	7820      	ldrb	r0, [r4, #0]
   d63a8:	f7ff fdd0 	bl	d5f4c <hal_spi_set_bit_order>
        unlock();
   d63ac:	7820      	ldrb	r0, [r4, #0]
    }
}
   d63ae:	b002      	add	sp, #8
   d63b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d63b4:	f7ff bfd1 	b.w	d635a <_ZN8SPIClass6unlockEv.isra.0>
}
   d63b8:	b002      	add	sp, #8
   d63ba:	bd10      	pop	{r4, pc}

000d63bc <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d63bc:	b513      	push	{r0, r1, r4, lr}
   d63be:	4604      	mov	r4, r0
    if (!lock())
   d63c0:	7800      	ldrb	r0, [r0, #0]
{
   d63c2:	9101      	str	r1, [sp, #4]
    if (!lock())
   d63c4:	f7ff ffc6 	bl	d6354 <_ZN8SPIClass4lockEv.isra.0>
   d63c8:	9901      	ldr	r1, [sp, #4]
   d63ca:	b940      	cbnz	r0, d63de <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d63cc:	7820      	ldrb	r0, [r4, #0]
   d63ce:	f7ff fdc5 	bl	d5f5c <hal_spi_set_data_mode>
        unlock();
   d63d2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d63d4:	b002      	add	sp, #8
   d63d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d63da:	f7ff bfbe 	b.w	d635a <_ZN8SPIClass6unlockEv.isra.0>
}
   d63de:	b002      	add	sp, #8
   d63e0:	bd10      	pop	{r4, pc}
	...

000d63e4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d63e4:	0840      	lsrs	r0, r0, #1
{
   d63e6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d63e8:	6018      	str	r0, [r3, #0]
   d63ea:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d63ec:	6818      	ldr	r0, [r3, #0]
   d63ee:	4288      	cmp	r0, r1
   d63f0:	b2e5      	uxtb	r5, r4
   d63f2:	d906      	bls.n	d6402 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d63f4:	3401      	adds	r4, #1
   d63f6:	2c08      	cmp	r4, #8
   d63f8:	d002      	beq.n	d6400 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d63fa:	0840      	lsrs	r0, r0, #1
   d63fc:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d63fe:	e7f5      	b.n	d63ec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6400:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d6402:	4b02      	ldr	r3, [pc, #8]	; (d640c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6404:	5d5b      	ldrb	r3, [r3, r5]
   d6406:	7013      	strb	r3, [r2, #0]
}
   d6408:	bd30      	pop	{r4, r5, pc}
   d640a:	bf00      	nop
   d640c:	000daa34 	.word	0x000daa34

000d6410 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6414:	b088      	sub	sp, #32
    unsigned clock = 0;
   d6416:	2300      	movs	r3, #0
{
   d6418:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d641a:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d641c:	9302      	str	r3, [sp, #8]
{
   d641e:	460e      	mov	r6, r1
   d6420:	4617      	mov	r7, r2
    if (!lock())
   d6422:	f7ff ff97 	bl	d6354 <_ZN8SPIClass4lockEv.isra.0>
   d6426:	4605      	mov	r5, r0
   d6428:	bb00      	cbnz	r0, d646c <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d642a:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d642e:	4601      	mov	r1, r0
   d6430:	2214      	movs	r2, #20
   d6432:	a803      	add	r0, sp, #12
   d6434:	f003 fec6 	bl	da1c4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6438:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d643a:	462a      	mov	r2, r5
   d643c:	a903      	add	r1, sp, #12
   d643e:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d6440:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d6444:	f7ff fdb2 	bl	d5fac <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d6448:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d644a:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d644e:	ab02      	add	r3, sp, #8
   d6450:	f10d 0207 	add.w	r2, sp, #7
   d6454:	fb07 f106 	mul.w	r1, r7, r6
   d6458:	f7ff ffc4 	bl	d63e4 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d645c:	7820      	ldrb	r0, [r4, #0]
   d645e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d6462:	f7ff fd83 	bl	d5f6c <hal_spi_set_clock_divider>
        unlock();
   d6466:	7820      	ldrb	r0, [r4, #0]
   d6468:	f7ff ff77 	bl	d635a <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d646c:	9802      	ldr	r0, [sp, #8]
   d646e:	b008      	add	sp, #32
   d6470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6474 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d6474:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d6476:	7800      	ldrb	r0, [r0, #0]
   d6478:	f7ff fd80 	bl	d5f7c <hal_spi_transfer>
}
   d647c:	b2c0      	uxtb	r0, r0
   d647e:	bd08      	pop	{r3, pc}

000d6480 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6480:	b510      	push	{r4, lr}
   d6482:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6484:	6800      	ldr	r0, [r0, #0]
   d6486:	b118      	cbz	r0, d6490 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d6488:	f7ff fefe 	bl	d6288 <free>
            wakeupSource_ = nullptr;
   d648c:	2300      	movs	r3, #0
   d648e:	6023      	str	r3, [r4, #0]
        }
    }
   d6490:	bd10      	pop	{r4, pc}

000d6492 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d6492:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d6494:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d6498:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d649a:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d649c:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d649e:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d64a2:	f8c0 2006 	str.w	r2, [r0, #6]
   d64a6:	889b      	ldrh	r3, [r3, #4]
   d64a8:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d64aa:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d64ac:	f7ff ffe8 	bl	d6480 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d64b0:	682b      	ldr	r3, [r5, #0]
   d64b2:	b113      	cbz	r3, d64ba <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d64b4:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d64b6:	2300      	movs	r3, #0
   d64b8:	602b      	str	r3, [r5, #0]
    }
   d64ba:	4620      	mov	r0, r4
   d64bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d64c0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d64c0:	b538      	push	{r3, r4, r5, lr}
   d64c2:	460c      	mov	r4, r1
   d64c4:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d64c6:	f7ff ffdb 	bl	d6480 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d64ca:	b144      	cbz	r4, d64de <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d64cc:	8820      	ldrh	r0, [r4, #0]
   d64ce:	f7ff fed3 	bl	d6278 <malloc>
   d64d2:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d64d4:	b128      	cbz	r0, d64e2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d64d6:	8822      	ldrh	r2, [r4, #0]
   d64d8:	4621      	mov	r1, r4
   d64da:	f003 fe4b 	bl	da174 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d64de:	2000      	movs	r0, #0
    }
   d64e0:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d64e2:	4801      	ldr	r0, [pc, #4]	; (d64e8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d64e4:	e7fc      	b.n	d64e0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d64e6:	bf00      	nop
   d64e8:	fffffefc 	.word	0xfffffefc

000d64ec <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d64ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d64ee:	4d2d      	ldr	r5, [pc, #180]	; (d65a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d64f0:	7d0b      	ldrb	r3, [r1, #20]
   d64f2:	4604      	mov	r4, r0
   d64f4:	b08b      	sub	sp, #44	; 0x2c
   d64f6:	4608      	mov	r0, r1
   d64f8:	1daf      	adds	r7, r5, #6
   d64fa:	2b00      	cmp	r3, #0
   d64fc:	d038      	beq.n	d6570 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d64fe:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d6500:	791b      	ldrb	r3, [r3, #4]
   d6502:	2b00      	cmp	r3, #0
   d6504:	d034      	beq.n	d6570 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d6506:	2200      	movs	r2, #0
    SleepResult() {}
   d6508:	4b27      	ldr	r3, [pc, #156]	; (d65a8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d650a:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d650c:	a902      	add	r1, sp, #8
   d650e:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d6510:	9202      	str	r2, [sp, #8]
   d6512:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d6516:	f88d 200e 	strb.w	r2, [sp, #14]
   d651a:	f7ff fdeb 	bl	d60f4 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d651e:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d6522:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d6526:	b200      	sxth	r0, r0
   d6528:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d652c:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d6530:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d6532:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d6534:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d6536:	4628      	mov	r0, r5
   d6538:	f7ff ffc2 	bl	d64c0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d653c:	a802      	add	r0, sp, #8
   d653e:	f7ff ff9f 	bl	d6480 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d6542:	2300      	movs	r3, #0
   d6544:	6023      	str	r3, [r4, #0]
   d6546:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d6548:	71a3      	strb	r3, [r4, #6]
   d654a:	8123      	strh	r3, [r4, #8]
   d654c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6550:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d6552:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d6556:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d6558:	683b      	ldr	r3, [r7, #0]
   d655a:	f8c4 3006 	str.w	r3, [r4, #6]
   d655e:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d6560:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d6562:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d6564:	4620      	mov	r0, r4
   d6566:	f7ff ffab 	bl	d64c0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d656a:	4620      	mov	r0, r4
   d656c:	b00b      	add	sp, #44	; 0x2c
   d656e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d6570:	2600      	movs	r6, #0
   d6572:	2320      	movs	r3, #32
   d6574:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d6578:	4b0c      	ldr	r3, [pc, #48]	; (d65ac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d657a:	9300      	str	r3, [sp, #0]
   d657c:	490c      	ldr	r1, [pc, #48]	; (d65b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d657e:	4633      	mov	r3, r6
   d6580:	aa02      	add	r2, sp, #8
   d6582:	2032      	movs	r0, #50	; 0x32
   d6584:	f7ff fd72 	bl	d606c <log_message>
    SleepResult() {}
   d6588:	4b07      	ldr	r3, [pc, #28]	; (d65a8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d658a:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d658c:	a902      	add	r1, sp, #8
        error_ = error;
   d658e:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d6592:	4804      	ldr	r0, [pc, #16]	; (d65a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d6594:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d6596:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d659a:	f8ad 300c 	strh.w	r3, [sp, #12]
   d659e:	f7ff ff78 	bl	d6492 <_ZN17SystemSleepResultaSEOS_>
   d65a2:	e7cb      	b.n	d653c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d65a4:	2003e644 	.word	0x2003e644
   d65a8:	ffff0000 	.word	0xffff0000
   d65ac:	000daa43 	.word	0x000daa43
   d65b0:	000daa3c 	.word	0x000daa3c

000d65b4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d65b4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d65b6:	4b09      	ldr	r3, [pc, #36]	; (d65dc <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d65b8:	4c09      	ldr	r4, [pc, #36]	; (d65e0 <_GLOBAL__sub_I_System+0x2c>)
   d65ba:	2202      	movs	r2, #2
   d65bc:	2000      	movs	r0, #0
   d65be:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d65c0:	4b08      	ldr	r3, [pc, #32]	; (d65e4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d65c2:	6020      	str	r0, [r4, #0]
   d65c4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d65c6:	71a0      	strb	r0, [r4, #6]
   d65c8:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d65ca:	f7ff fd5f 	bl	d608c <set_system_mode>
SystemClass System;
   d65ce:	4620      	mov	r0, r4
   d65d0:	4a05      	ldr	r2, [pc, #20]	; (d65e8 <_GLOBAL__sub_I_System+0x34>)
   d65d2:	4906      	ldr	r1, [pc, #24]	; (d65ec <_GLOBAL__sub_I_System+0x38>)
   d65d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d65d8:	f002 be04 	b.w	d91e4 <__aeabi_atexit>
   d65dc:	2003e650 	.word	0x2003e650
   d65e0:	2003e644 	.word	0x2003e644
   d65e4:	ffff0000 	.word	0xffff0000
   d65e8:	2003df68 	.word	0x2003df68
   d65ec:	000d4191 	.word	0x000d4191

000d65f0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d65f0:	b510      	push	{r4, lr}
   d65f2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d65f4:	f003 fe24 	bl	da240 <strlen>
   d65f8:	3801      	subs	r0, #1
   d65fa:	1823      	adds	r3, r4, r0
   d65fc:	4620      	mov	r0, r4
	while(i<j){
   d65fe:	4283      	cmp	r3, r0
   d6600:	d906      	bls.n	d6610 <_Z11str_reversePc+0x20>
		c = *i;
   d6602:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d6604:	7819      	ldrb	r1, [r3, #0]
   d6606:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d660a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d660e:	e7f6      	b.n	d65fe <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d6610:	bd10      	pop	{r4, pc}

000d6612 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d6612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d6616:	1e93      	subs	r3, r2, #2
{
   d6618:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   d661a:	2b22      	cmp	r3, #34	; 0x22
   d661c:	f04f 0300 	mov.w	r3, #0
{
   d6620:	460d      	mov	r5, r1
   d6622:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d6624:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   d6628:	d927      	bls.n	d667a <ltoa+0x68>

      if (10 == base && N < 0L)
   d662a:	2800      	cmp	r0, #0
   d662c:	da2a      	bge.n	d6684 <ltoa+0x72>
      {
            *head++ = '-';
   d662e:	462e      	mov	r6, r5
   d6630:	232d      	movs	r3, #45	; 0x2d
   d6632:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   d6636:	4240      	negs	r0, r0
   d6638:	240a      	movs	r4, #10
      *tail-- = '\0';
   d663a:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d663e:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d6642:	4622      	mov	r2, r4
   d6644:	4601      	mov	r1, r0
   d6646:	a801      	add	r0, sp, #4
   d6648:	f003 fd72 	bl	da130 <ldiv>
   d664c:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d664e:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   d6650:	2b09      	cmp	r3, #9
   d6652:	bfcc      	ite	gt
   d6654:	2237      	movgt	r2, #55	; 0x37
   d6656:	2230      	movle	r2, #48	; 0x30
   d6658:	fa52 f383 	uxtab	r3, r2, r3
   d665c:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   d6660:	f108 0801 	add.w	r8, r8, #1
   d6664:	2800      	cmp	r0, #0
   d6666:	d1ec      	bne.n	d6642 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d6668:	4642      	mov	r2, r8
   d666a:	1c79      	adds	r1, r7, #1
   d666c:	4630      	mov	r0, r6
   d666e:	f003 fd81 	bl	da174 <memcpy>
      return str;
}
   d6672:	4628      	mov	r0, r5
   d6674:	b00c      	add	sp, #48	; 0x30
   d6676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   d667a:	2a0a      	cmp	r2, #10
   d667c:	d0d5      	beq.n	d662a <ltoa+0x18>
      if (uarg)
   d667e:	b118      	cbz	r0, d6688 <ltoa+0x76>
   d6680:	462e      	mov	r6, r5
   d6682:	e7da      	b.n	d663a <ltoa+0x28>
   d6684:	240a      	movs	r4, #10
   d6686:	e7fa      	b.n	d667e <ltoa+0x6c>
      else  *tail-- = '0';
   d6688:	2330      	movs	r3, #48	; 0x30
   d668a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d668e:	462e      	mov	r6, r5
   d6690:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   d6694:	f04f 0802 	mov.w	r8, #2
   d6698:	e7e6      	b.n	d6668 <ltoa+0x56>

000d669a <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d669a:	b570      	push	{r4, r5, r6, lr}
   d669c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d669e:	1e91      	subs	r1, r2, #2
   d66a0:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d66a2:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d66a4:	d822      	bhi.n	d66ec <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d66a6:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d66a8:	b16d      	cbz	r5, d66c6 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d66aa:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d66ae:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d66b2:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d66b4:	2d09      	cmp	r5, #9
                *ptr += '0';
   d66b6:	bf94      	ite	ls
   d66b8:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d66ba:	3157      	addhi	r1, #87	; 0x57
   d66bc:	b2c9      	uxtb	r1, r1
   d66be:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d66c2:	4635      	mov	r5, r6
	while(a){
   d66c4:	e7f0      	b.n	d66a8 <ultoa+0xe>
   d66c6:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d66c8:	4423      	add	r3, r4
            *ptr++ = '0';
   d66ca:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d66cc:	4293      	cmp	r3, r2
   d66ce:	d902      	bls.n	d66d6 <ultoa+0x3c>
            *ptr++ = '0';
   d66d0:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d66d4:	e7fa      	b.n	d66cc <ultoa+0x32>
   d66d6:	1a1a      	subs	r2, r3, r0
   d66d8:	4283      	cmp	r3, r0
   d66da:	bf38      	it	cc
   d66dc:	2200      	movcc	r2, #0

	*ptr = '\0';
   d66de:	2300      	movs	r3, #0
   d66e0:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d66e2:	4620      	mov	r0, r4
   d66e4:	f7ff ff84 	bl	d65f0 <_Z11str_reversePc>
	return buffer;
   d66e8:	4620      	mov	r0, r4
}
   d66ea:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d66ec:	2000      	movs	r0, #0
   d66ee:	e7fc      	b.n	d66ea <ultoa+0x50>

000d66f0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d66f0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d66f2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d66f4:	460c      	mov	r4, r1
   d66f6:	4615      	mov	r5, r2
	if(a<0){
   d66f8:	da0e      	bge.n	d6718 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d66fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d66fe:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6702:	bf14      	ite	ne
   d6704:	4258      	negne	r0, r3
   d6706:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d6708:	2301      	movs	r3, #1
		*buffer = '-';
   d670a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d670c:	462a      	mov	r2, r5
   d670e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d6710:	f7ff ffc3 	bl	d669a <ultoa>
	}
	return buffer;
}
   d6714:	4620      	mov	r0, r4
   d6716:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d6718:	2301      	movs	r3, #1
   d671a:	e7f9      	b.n	d6710 <itoa+0x20>

000d671c <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d671c:	b570      	push	{r4, r5, r6, lr}
   d671e:	b086      	sub	sp, #24
   d6720:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d6722:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d6724:	4668      	mov	r0, sp
   d6726:	f001 ff0d 	bl	d8544 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d672a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d672c:	1d34      	adds	r4, r6, #4
   d672e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6730:	682b      	ldr	r3, [r5, #0]
   d6732:	7023      	strb	r3, [r4, #0]
    }
   d6734:	4630      	mov	r0, r6
   d6736:	b006      	add	sp, #24
   d6738:	bd70      	pop	{r4, r5, r6, pc}
	...

000d673c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d673c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6740:	ec57 6b10 	vmov	r6, r7, d0
   d6744:	4680      	mov	r8, r0
   d6746:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d6748:	ee10 0a10 	vmov	r0, s0
   d674c:	2200      	movs	r2, #0
   d674e:	2300      	movs	r3, #0
   d6750:	4639      	mov	r1, r7
   d6752:	f003 fabb 	bl	d9ccc <__aeabi_dcmplt>
   d6756:	b128      	cbz	r0, d6764 <_Z4dtoadhPc+0x28>
        val = -val;
   d6758:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d675c:	461f      	mov	r7, r3
        *sout++ = '-';
   d675e:	232d      	movs	r3, #45	; 0x2d
   d6760:	f804 3b01 	strb.w	r3, [r4], #1
   d6764:	2300      	movs	r3, #0
    }
    long scale = 1;
   d6766:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d676a:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d676c:	b2d9      	uxtb	r1, r3
   d676e:	4588      	cmp	r8, r1
   d6770:	d903      	bls.n	d677a <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d6772:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d6776:	3301      	adds	r3, #1
   d6778:	e7f8      	b.n	d676c <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d677a:	4648      	mov	r0, r9
   d677c:	f002 ffca 	bl	d9714 <__aeabi_i2d>
   d6780:	4632      	mov	r2, r6
   d6782:	463b      	mov	r3, r7
   d6784:	f003 f830 	bl	d97e8 <__aeabi_dmul>
   d6788:	4606      	mov	r6, r0
   d678a:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d678c:	f003 fb3c 	bl	d9e08 <__aeabi_d2ulz>
   d6790:	4605      	mov	r5, r0
   d6792:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d6794:	f002 fff2 	bl	d977c <__aeabi_ul2d>
   d6798:	4602      	mov	r2, r0
   d679a:	460b      	mov	r3, r1
   d679c:	4630      	mov	r0, r6
   d679e:	4639      	mov	r1, r7
   d67a0:	f002 fe6a 	bl	d9478 <__aeabi_dsub>
   d67a4:	4b13      	ldr	r3, [pc, #76]	; (d67f4 <_Z4dtoadhPc+0xb8>)
   d67a6:	2200      	movs	r2, #0
   d67a8:	f003 faa4 	bl	d9cf4 <__aeabi_dcmpge>
   d67ac:	b110      	cbz	r0, d67b4 <_Z4dtoadhPc+0x78>
        fixed++;
   d67ae:	3501      	adds	r5, #1
   d67b0:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d67b4:	464a      	mov	r2, r9
   d67b6:	4628      	mov	r0, r5
   d67b8:	17d3      	asrs	r3, r2, #31
   d67ba:	4651      	mov	r1, sl
   d67bc:	f003 fb0c 	bl	d9dd8 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d67c0:	2301      	movs	r3, #1
   d67c2:	4615      	mov	r5, r2
   d67c4:	4621      	mov	r1, r4
   d67c6:	220a      	movs	r2, #10
   d67c8:	f7ff ff67 	bl	d669a <ultoa>
    if (prec) {
   d67cc:	f1b8 0f00 	cmp.w	r8, #0
   d67d0:	d00d      	beq.n	d67ee <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d67d2:	4620      	mov	r0, r4
   d67d4:	f003 fd34 	bl	da240 <strlen>
        *sout++ = '.';
   d67d8:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d67da:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d67dc:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d67de:	220a      	movs	r2, #10
   d67e0:	4643      	mov	r3, r8
   d67e2:	4628      	mov	r0, r5
   d67e4:	3101      	adds	r1, #1
    }
}
   d67e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d67ea:	f7ff bf56 	b.w	d669a <ultoa>
}
   d67ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d67f2:	bf00      	nop
   d67f4:	3fe00000 	.word	0x3fe00000

000d67f8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d67f8:	b510      	push	{r4, lr}
   d67fa:	4604      	mov	r4, r0
{
	free(buffer);
   d67fc:	6800      	ldr	r0, [r0, #0]
   d67fe:	f7ff fd43 	bl	d6288 <free>
}
   d6802:	4620      	mov	r0, r4
   d6804:	bd10      	pop	{r4, pc}

000d6806 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6806:	b510      	push	{r4, lr}
   d6808:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d680a:	6800      	ldr	r0, [r0, #0]
   d680c:	b108      	cbz	r0, d6812 <_ZN6String10invalidateEv+0xc>
   d680e:	f7ff fd3b 	bl	d6288 <free>
	buffer = NULL;
   d6812:	2300      	movs	r3, #0
	capacity = len = 0;
   d6814:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6818:	6023      	str	r3, [r4, #0]
}
   d681a:	bd10      	pop	{r4, pc}

000d681c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d681c:	b538      	push	{r3, r4, r5, lr}
   d681e:	4604      	mov	r4, r0
   d6820:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6822:	6800      	ldr	r0, [r0, #0]
   d6824:	3101      	adds	r1, #1
   d6826:	f7ff fd37 	bl	d6298 <realloc>
	if (newbuffer) {
   d682a:	b110      	cbz	r0, d6832 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d682c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6830:	2001      	movs	r0, #1
	}
	return 0;
}
   d6832:	bd38      	pop	{r3, r4, r5, pc}

000d6834 <_ZN6String7reserveEj>:
{
   d6834:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6836:	6803      	ldr	r3, [r0, #0]
{
   d6838:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d683a:	b123      	cbz	r3, d6846 <_ZN6String7reserveEj+0x12>
   d683c:	6843      	ldr	r3, [r0, #4]
   d683e:	428b      	cmp	r3, r1
   d6840:	d301      	bcc.n	d6846 <_ZN6String7reserveEj+0x12>
   d6842:	2001      	movs	r0, #1
}
   d6844:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d6846:	4620      	mov	r0, r4
   d6848:	f7ff ffe8 	bl	d681c <_ZN6String12changeBufferEj>
   d684c:	2800      	cmp	r0, #0
   d684e:	d0f9      	beq.n	d6844 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6850:	68a3      	ldr	r3, [r4, #8]
   d6852:	2b00      	cmp	r3, #0
   d6854:	d1f5      	bne.n	d6842 <_ZN6String7reserveEj+0xe>
   d6856:	6822      	ldr	r2, [r4, #0]
   d6858:	7013      	strb	r3, [r2, #0]
   d685a:	e7f2      	b.n	d6842 <_ZN6String7reserveEj+0xe>

000d685c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d685c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d685e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d6860:	4611      	mov	r1, r2
   d6862:	9201      	str	r2, [sp, #4]
{
   d6864:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d6866:	f7ff ffe5 	bl	d6834 <_ZN6String7reserveEj>
   d686a:	9a01      	ldr	r2, [sp, #4]
   d686c:	b928      	cbnz	r0, d687a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d686e:	4620      	mov	r0, r4
   d6870:	f7ff ffc9 	bl	d6806 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d6874:	4620      	mov	r0, r4
   d6876:	b003      	add	sp, #12
   d6878:	bd30      	pop	{r4, r5, pc}
	len = length;
   d687a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d687c:	4629      	mov	r1, r5
   d687e:	6820      	ldr	r0, [r4, #0]
   d6880:	f003 fc78 	bl	da174 <memcpy>
	buffer[len] = 0;
   d6884:	6822      	ldr	r2, [r4, #0]
   d6886:	68a3      	ldr	r3, [r4, #8]
   d6888:	2100      	movs	r1, #0
   d688a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d688c:	e7f2      	b.n	d6874 <_ZN6String4copyEPKcj+0x18>

000d688e <_ZN6StringC1EPKc>:
	buffer = NULL;
   d688e:	2300      	movs	r3, #0
String::String(const char *cstr)
   d6890:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d6892:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d6896:	4604      	mov	r4, r0
	len = 0;
   d6898:	6083      	str	r3, [r0, #8]
	flags = 0;
   d689a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d689c:	b141      	cbz	r1, d68b0 <_ZN6StringC1EPKc+0x22>
   d689e:	4608      	mov	r0, r1
   d68a0:	9101      	str	r1, [sp, #4]
   d68a2:	f003 fccd 	bl	da240 <strlen>
   d68a6:	9901      	ldr	r1, [sp, #4]
   d68a8:	4602      	mov	r2, r0
   d68aa:	4620      	mov	r0, r4
   d68ac:	f7ff ffd6 	bl	d685c <_ZN6String4copyEPKcj>
}
   d68b0:	4620      	mov	r0, r4
   d68b2:	b002      	add	sp, #8
   d68b4:	bd10      	pop	{r4, pc}

000d68b6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d68b6:	b538      	push	{r3, r4, r5, lr}
   d68b8:	4605      	mov	r5, r0
	if (buffer) {
   d68ba:	6800      	ldr	r0, [r0, #0]
{
   d68bc:	460c      	mov	r4, r1
	if (buffer) {
   d68be:	b168      	cbz	r0, d68dc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d68c0:	686a      	ldr	r2, [r5, #4]
   d68c2:	688b      	ldr	r3, [r1, #8]
   d68c4:	429a      	cmp	r2, r3
   d68c6:	d307      	bcc.n	d68d8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d68c8:	6809      	ldr	r1, [r1, #0]
   d68ca:	f003 fcb1 	bl	da230 <strcpy>
			len = rhs.len;
   d68ce:	68a3      	ldr	r3, [r4, #8]
   d68d0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d68d2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d68d4:	60a3      	str	r3, [r4, #8]
}
   d68d6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d68d8:	f7ff fcd6 	bl	d6288 <free>
	buffer = rhs.buffer;
   d68dc:	6823      	ldr	r3, [r4, #0]
   d68de:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d68e0:	6863      	ldr	r3, [r4, #4]
   d68e2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d68e4:	68a3      	ldr	r3, [r4, #8]
   d68e6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d68e8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d68ea:	e9c4 3300 	strd	r3, r3, [r4]
   d68ee:	e7f1      	b.n	d68d4 <_ZN6String4moveERS_+0x1e>

000d68f0 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d68f0:	4288      	cmp	r0, r1
{
   d68f2:	b510      	push	{r4, lr}
   d68f4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d68f6:	d005      	beq.n	d6904 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d68f8:	680b      	ldr	r3, [r1, #0]
   d68fa:	b12b      	cbz	r3, d6908 <_ZN6StringaSERKS_+0x18>
   d68fc:	688a      	ldr	r2, [r1, #8]
   d68fe:	4619      	mov	r1, r3
   d6900:	f7ff ffac 	bl	d685c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6904:	4620      	mov	r0, r4
   d6906:	bd10      	pop	{r4, pc}
	else invalidate();
   d6908:	f7ff ff7d 	bl	d6806 <_ZN6String10invalidateEv>
   d690c:	e7fa      	b.n	d6904 <_ZN6StringaSERKS_+0x14>

000d690e <_ZN6StringaSEO15StringSumHelper>:
	return *this;
}

String & String::operator = (StringSumHelper &&rval)
{
	if (this != &rval) move(rval);
   d690e:	4288      	cmp	r0, r1
{
   d6910:	b510      	push	{r4, lr}
   d6912:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d6914:	d001      	beq.n	d691a <_ZN6StringaSEO15StringSumHelper+0xc>
   d6916:	f7ff ffce 	bl	d68b6 <_ZN6String4moveERS_>
	return *this;
}
   d691a:	4620      	mov	r0, r4
   d691c:	bd10      	pop	{r4, pc}

000d691e <_ZN6StringaSEPKc>:
#endif

String & String::operator = (const char *cstr)
{
   d691e:	b513      	push	{r0, r1, r4, lr}
   d6920:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6922:	b159      	cbz	r1, d693c <_ZN6StringaSEPKc+0x1e>
   d6924:	4608      	mov	r0, r1
   d6926:	9101      	str	r1, [sp, #4]
   d6928:	f003 fc8a 	bl	da240 <strlen>
   d692c:	9901      	ldr	r1, [sp, #4]
   d692e:	4602      	mov	r2, r0
   d6930:	4620      	mov	r0, r4
   d6932:	f7ff ff93 	bl	d685c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6936:	4620      	mov	r0, r4
   d6938:	b002      	add	sp, #8
   d693a:	bd10      	pop	{r4, pc}
	else invalidate();
   d693c:	f7ff ff63 	bl	d6806 <_ZN6String10invalidateEv>
   d6940:	e7f9      	b.n	d6936 <_ZN6StringaSEPKc+0x18>

000d6942 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d6942:	b510      	push	{r4, lr}
   d6944:	4604      	mov	r4, r0
   d6946:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d6948:	2300      	movs	r3, #0
	capacity = 0;
   d694a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d694e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6950:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d6952:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d6954:	a901      	add	r1, sp, #4
   d6956:	f7ff fecb 	bl	d66f0 <itoa>
	*this = buf;
   d695a:	a901      	add	r1, sp, #4
   d695c:	4620      	mov	r0, r4
   d695e:	f7ff ffde 	bl	d691e <_ZN6StringaSEPKc>
}
   d6962:	4620      	mov	r0, r4
   d6964:	b00a      	add	sp, #40	; 0x28
   d6966:	bd10      	pop	{r4, pc}

000d6968 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   d6968:	b510      	push	{r4, lr}
   d696a:	4604      	mov	r4, r0
   d696c:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d696e:	2300      	movs	r3, #0
	capacity = 0;
   d6970:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d6974:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6976:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   d6978:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   d697a:	a901      	add	r1, sp, #4
   d697c:	f7ff fe49 	bl	d6612 <ltoa>
	*this = buf;
   d6980:	a901      	add	r1, sp, #4
   d6982:	4620      	mov	r0, r4
   d6984:	f7ff ffcb 	bl	d691e <_ZN6StringaSEPKc>
}
   d6988:	4620      	mov	r0, r4
   d698a:	b00a      	add	sp, #40	; 0x28
   d698c:	bd10      	pop	{r4, pc}

000d698e <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d698e:	b530      	push	{r4, r5, lr}
   d6990:	4604      	mov	r4, r0
	buffer = NULL;
   d6992:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d6994:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d6996:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d699a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d699c:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d699e:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d69a2:	b2cd      	uxtb	r5, r1
   d69a4:	f002 fec8 	bl	d9738 <__aeabi_f2d>
   d69a8:	ec41 0b10 	vmov	d0, r0, r1
   d69ac:	a901      	add	r1, sp, #4
   d69ae:	4628      	mov	r0, r5
   d69b0:	f7ff fec4 	bl	d673c <_Z4dtoadhPc>
        *this = buf;
   d69b4:	a901      	add	r1, sp, #4
   d69b6:	4620      	mov	r0, r4
   d69b8:	f7ff ffb1 	bl	d691e <_ZN6StringaSEPKc>
}
   d69bc:	4620      	mov	r0, r4
   d69be:	b00b      	add	sp, #44	; 0x2c
   d69c0:	bd30      	pop	{r4, r5, pc}

000d69c2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d69c2:	b570      	push	{r4, r5, r6, lr}
   d69c4:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d69c6:	460e      	mov	r6, r1
   d69c8:	b909      	cbnz	r1, d69ce <_ZN6String6concatEPKcj+0xc>
   d69ca:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d69cc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d69ce:	b16a      	cbz	r2, d69ec <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d69d0:	6884      	ldr	r4, [r0, #8]
   d69d2:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d69d4:	4621      	mov	r1, r4
   d69d6:	f7ff ff2d 	bl	d6834 <_ZN6String7reserveEj>
   d69da:	2800      	cmp	r0, #0
   d69dc:	d0f5      	beq.n	d69ca <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d69de:	6828      	ldr	r0, [r5, #0]
   d69e0:	68ab      	ldr	r3, [r5, #8]
   d69e2:	4631      	mov	r1, r6
   d69e4:	4418      	add	r0, r3
   d69e6:	f003 fc23 	bl	da230 <strcpy>
	len = newlen;
   d69ea:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d69ec:	2001      	movs	r0, #1
   d69ee:	e7ed      	b.n	d69cc <_ZN6String6concatEPKcj+0xa>

000d69f0 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d69f0:	688a      	ldr	r2, [r1, #8]
   d69f2:	6809      	ldr	r1, [r1, #0]
   d69f4:	f7ff bfe5 	b.w	d69c2 <_ZN6String6concatEPKcj>

000d69f8 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d69f8:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d69fa:	2300      	movs	r3, #0
	buf[0] = c;
   d69fc:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d6a00:	2201      	movs	r2, #1
   d6a02:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d6a04:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d6a08:	f7ff ffdb 	bl	d69c2 <_ZN6String6concatEPKcj>
}
   d6a0c:	b003      	add	sp, #12
   d6a0e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6a12 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6a12:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6a14:	688a      	ldr	r2, [r1, #8]
   d6a16:	6809      	ldr	r1, [r1, #0]
{
   d6a18:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6a1a:	f7ff ffd2 	bl	d69c2 <_ZN6String6concatEPKcj>
   d6a1e:	b910      	cbnz	r0, d6a26 <_ZplRK15StringSumHelperRK6String+0x14>
   d6a20:	4620      	mov	r0, r4
   d6a22:	f7ff fef0 	bl	d6806 <_ZN6String10invalidateEv>
	return a;
}
   d6a26:	4620      	mov	r0, r4
   d6a28:	bd10      	pop	{r4, pc}

000d6a2a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d6a2a:	b513      	push	{r0, r1, r4, lr}
   d6a2c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d6a2e:	b929      	cbnz	r1, d6a3c <_ZplRK15StringSumHelperPKc+0x12>
   d6a30:	4620      	mov	r0, r4
   d6a32:	f7ff fee8 	bl	d6806 <_ZN6String10invalidateEv>
	return a;
}
   d6a36:	4620      	mov	r0, r4
   d6a38:	b002      	add	sp, #8
   d6a3a:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d6a3c:	4608      	mov	r0, r1
   d6a3e:	9101      	str	r1, [sp, #4]
   d6a40:	f003 fbfe 	bl	da240 <strlen>
   d6a44:	9901      	ldr	r1, [sp, #4]
   d6a46:	4602      	mov	r2, r0
   d6a48:	4620      	mov	r0, r4
   d6a4a:	f7ff ffba 	bl	d69c2 <_ZN6String6concatEPKcj>
   d6a4e:	2800      	cmp	r0, #0
   d6a50:	d0ee      	beq.n	d6a30 <_ZplRK15StringSumHelperPKc+0x6>
   d6a52:	e7f0      	b.n	d6a36 <_ZplRK15StringSumHelperPKc+0xc>

000d6a54 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6a54:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6a56:	6882      	ldr	r2, [r0, #8]
   d6a58:	b93a      	cbnz	r2, d6a6a <_ZNK6String6equalsEPKc+0x16>
   d6a5a:	b121      	cbz	r1, d6a66 <_ZNK6String6equalsEPKc+0x12>
   d6a5c:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d6a5e:	fab0 f080 	clz	r0, r0
   d6a62:	0940      	lsrs	r0, r0, #5
   d6a64:	e000      	b.n	d6a68 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6a66:	2001      	movs	r0, #1
}
   d6a68:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6a6a:	6800      	ldr	r0, [r0, #0]
   d6a6c:	b909      	cbnz	r1, d6a72 <_ZNK6String6equalsEPKc+0x1e>
   d6a6e:	7800      	ldrb	r0, [r0, #0]
   d6a70:	e7f5      	b.n	d6a5e <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d6a72:	f003 fbd3 	bl	da21c <strcmp>
   d6a76:	e7f2      	b.n	d6a5e <_ZNK6String6equalsEPKc+0xa>

000d6a78 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d6a78:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d6a7a:	6883      	ldr	r3, [r0, #8]
   d6a7c:	4293      	cmp	r3, r2
   d6a7e:	d907      	bls.n	d6a90 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d6a80:	6804      	ldr	r4, [r0, #0]
   d6a82:	6809      	ldr	r1, [r1, #0]
   d6a84:	18a0      	adds	r0, r4, r2
   d6a86:	f003 fc03 	bl	da290 <strstr>
	if (found == NULL) return -1;
   d6a8a:	b108      	cbz	r0, d6a90 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d6a8c:	1b00      	subs	r0, r0, r4
}
   d6a8e:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   d6a90:	f04f 30ff 	mov.w	r0, #4294967295
   d6a94:	e7fb      	b.n	d6a8e <_ZNK6String7indexOfERKS_j+0x16>

000d6a96 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   d6a96:	2200      	movs	r2, #0
   d6a98:	f7ff bfee 	b.w	d6a78 <_ZNK6String7indexOfERKS_j>

000d6a9c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d6a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d6a9e:	429a      	cmp	r2, r3
{
   d6aa0:	460f      	mov	r7, r1
   d6aa2:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d6aa4:	490c      	ldr	r1, [pc, #48]	; (d6ad8 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   d6aa6:	bf88      	it	hi
   d6aa8:	4613      	movhi	r3, r2
{
   d6aaa:	4614      	mov	r4, r2
   d6aac:	4606      	mov	r6, r0
	if (left > right) {
   d6aae:	bf84      	itt	hi
   d6ab0:	462c      	movhi	r4, r5
   d6ab2:	461d      	movhi	r5, r3
	String out;
   d6ab4:	f7ff feeb 	bl	d688e <_ZN6StringC1EPKc>
	if (left > len) return out;
   d6ab8:	68ba      	ldr	r2, [r7, #8]
   d6aba:	42a2      	cmp	r2, r4
   d6abc:	d30a      	bcc.n	d6ad4 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d6abe:	6839      	ldr	r1, [r7, #0]
   d6ac0:	42aa      	cmp	r2, r5
   d6ac2:	bf94      	ite	ls
   d6ac4:	ebc4 0202 	rsbls	r2, r4, r2
   d6ac8:	ebc4 0205 	rsbhi	r2, r4, r5
   d6acc:	4421      	add	r1, r4
   d6ace:	4630      	mov	r0, r6
   d6ad0:	f7ff fec4 	bl	d685c <_ZN6String4copyEPKcj>
	return out;
}
   d6ad4:	4630      	mov	r0, r6
   d6ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6ad8:	000da53b 	.word	0x000da53b

000d6adc <_ZNK6String9substringEj>:
{
   d6adc:	b510      	push	{r4, lr}
   d6ade:	4604      	mov	r4, r0
	return substring(left, len);
   d6ae0:	688b      	ldr	r3, [r1, #8]
   d6ae2:	f7ff ffdb 	bl	d6a9c <_ZNK6String9substringEjj>
}
   d6ae6:	4620      	mov	r0, r4
   d6ae8:	bd10      	pop	{r4, pc}

000d6aea <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
   d6aea:	b538      	push	{r3, r4, r5, lr}
   d6aec:	4604      	mov	r4, r0
   d6aee:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
   d6af0:	68a3      	ldr	r3, [r4, #8]
   d6af2:	428b      	cmp	r3, r1
   d6af4:	d911      	bls.n	d6b1a <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
   d6af6:	b182      	cbz	r2, d6b1a <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
   d6af8:	4411      	add	r1, r2
   d6afa:	428b      	cmp	r3, r1
   d6afc:	bf38      	it	cc
   d6afe:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
   d6b00:	6825      	ldr	r5, [r4, #0]
	len = len - count;
   d6b02:	1a99      	subs	r1, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
   d6b04:	1813      	adds	r3, r2, r0
	len = len - count;
   d6b06:	60a1      	str	r1, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
   d6b08:	1a0a      	subs	r2, r1, r0
   d6b0a:	18e9      	adds	r1, r5, r3
   d6b0c:	4428      	add	r0, r5
   d6b0e:	f003 fb3f 	bl	da190 <memmove>
	buffer[len] = 0;
   d6b12:	6822      	ldr	r2, [r4, #0]
   d6b14:	68a3      	ldr	r3, [r4, #8]
   d6b16:	2100      	movs	r1, #0
   d6b18:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6b1a:	4620      	mov	r0, r4
   d6b1c:	bd38      	pop	{r3, r4, r5, pc}

000d6b1e <_ZN6String6removeEj>:
        int count = len - index;
   d6b1e:	6882      	ldr	r2, [r0, #8]
        return remove(index, count);
   d6b20:	1a52      	subs	r2, r2, r1
   d6b22:	f7ff bfe2 	b.w	d6aea <_ZN6String6removeEjj>

000d6b26 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6b26:	4770      	bx	lr

000d6b28 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d6b28:	4770      	bx	lr

000d6b2a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d6b2a:	4770      	bx	lr

000d6b2c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6b2c:	4770      	bx	lr
	...

000d6b30 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6b30:	4b06      	ldr	r3, [pc, #24]	; (d6b4c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d6b32:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6b34:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d6b36:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6b3a:	d005      	beq.n	d6b48 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6b3c:	4608      	mov	r0, r1
   d6b3e:	f002 fb5f 	bl	d9200 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6b42:	2800      	cmp	r0, #0
	return nullptr;
   d6b44:	bf08      	it	eq
   d6b46:	2400      	moveq	r4, #0
      }
   d6b48:	4620      	mov	r0, r4
   d6b4a:	bd10      	pop	{r4, pc}
   d6b4c:	000dabb4 	.word	0x000dabb4

000d6b50 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6b50:	4b06      	ldr	r3, [pc, #24]	; (d6b6c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d6b52:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6b54:	b510      	push	{r4, lr}
   d6b56:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6b5a:	d005      	beq.n	d6b68 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6b5c:	4608      	mov	r0, r1
   d6b5e:	f002 fb4f 	bl	d9200 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6b62:	2800      	cmp	r0, #0
	return nullptr;
   d6b64:	bf08      	it	eq
   d6b66:	2400      	moveq	r4, #0
      }
   d6b68:	4620      	mov	r0, r4
   d6b6a:	bd10      	pop	{r4, pc}
   d6b6c:	000dabb4 	.word	0x000dabb4

000d6b70 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6b70:	4b06      	ldr	r3, [pc, #24]	; (d6b8c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d6b72:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6b74:	b510      	push	{r4, lr}
   d6b76:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6b7a:	d005      	beq.n	d6b88 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6b7c:	4608      	mov	r0, r1
   d6b7e:	f002 fb3f 	bl	d9200 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6b82:	2800      	cmp	r0, #0
	return nullptr;
   d6b84:	bf08      	it	eq
   d6b86:	2400      	moveq	r4, #0
      }
   d6b88:	4620      	mov	r0, r4
   d6b8a:	bd10      	pop	{r4, pc}
   d6b8c:	000dabb4 	.word	0x000dabb4

000d6b90 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6b90:	b510      	push	{r4, lr}
   d6b92:	2168      	movs	r1, #104	; 0x68
   d6b94:	4604      	mov	r4, r0
   d6b96:	f002 fb2a 	bl	d91ee <_ZdlPvj>
   d6b9a:	4620      	mov	r0, r4
   d6b9c:	bd10      	pop	{r4, pc}

000d6b9e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d6b9e:	b510      	push	{r4, lr}
   d6ba0:	2128      	movs	r1, #40	; 0x28
   d6ba2:	4604      	mov	r4, r0
   d6ba4:	f002 fb23 	bl	d91ee <_ZdlPvj>
   d6ba8:	4620      	mov	r0, r4
   d6baa:	bd10      	pop	{r4, pc}

000d6bac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d6bac:	b510      	push	{r4, lr}
   d6bae:	2130      	movs	r1, #48	; 0x30
   d6bb0:	4604      	mov	r4, r0
   d6bb2:	f002 fb1c 	bl	d91ee <_ZdlPvj>
   d6bb6:	4620      	mov	r0, r4
   d6bb8:	bd10      	pop	{r4, pc}

000d6bba <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d6bba:	f7fd ba6e 	b.w	d409a <_ZdlPv>

000d6bbe <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d6bbe:	f7fd ba6c 	b.w	d409a <_ZdlPv>

000d6bc2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d6bc2:	f7fd ba6a 	b.w	d409a <_ZdlPv>

000d6bc6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6bc6:	b510      	push	{r4, lr}
          _M_dispose();
   d6bc8:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6bca:	4604      	mov	r4, r0
          _M_dispose();
   d6bcc:	689b      	ldr	r3, [r3, #8]
   d6bce:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6bd0:	68a3      	ldr	r3, [r4, #8]
   d6bd2:	3b01      	subs	r3, #1
   d6bd4:	60a3      	str	r3, [r4, #8]
   d6bd6:	b92b      	cbnz	r3, d6be4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6bd8:	6823      	ldr	r3, [r4, #0]
   d6bda:	4620      	mov	r0, r4
   d6bdc:	68db      	ldr	r3, [r3, #12]
    }
   d6bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6be2:	4718      	bx	r3
    }
   d6be4:	bd10      	pop	{r4, pc}

000d6be6 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6be6:	b510      	push	{r4, lr}
   d6be8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6bea:	6800      	ldr	r0, [r0, #0]
   d6bec:	b108      	cbz	r0, d6bf2 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6bee:	f7ff f8a5 	bl	d5d3c <os_mutex_recursive_destroy>
    }
   d6bf2:	4620      	mov	r0, r4
   d6bf4:	bd10      	pop	{r4, pc}
	...

000d6bf8 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d6bf8:	b510      	push	{r4, lr}
        mutex_.lock();
   d6bfa:	4b04      	ldr	r3, [pc, #16]	; (d6c0c <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d6bfc:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6bfe:	6818      	ldr	r0, [r3, #0]
   d6c00:	f7ff f8a4 	bl	d5d4c <os_mutex_recursive_lock>
        locked_ = true;
   d6c04:	2301      	movs	r3, #1
   d6c06:	7023      	strb	r3, [r4, #0]
    }
   d6c08:	bd10      	pop	{r4, pc}
   d6c0a:	bf00      	nop
   d6c0c:	2003e65c 	.word	0x2003e65c

000d6c10 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d6c10:	b510      	push	{r4, lr}
        mutex_.unlock();
   d6c12:	4b04      	ldr	r3, [pc, #16]	; (d6c24 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d6c14:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6c16:	6818      	ldr	r0, [r3, #0]
   d6c18:	f7ff f8a0 	bl	d5d5c <os_mutex_recursive_unlock>
        locked_ = false;
   d6c1c:	2300      	movs	r3, #0
   d6c1e:	7023      	strb	r3, [r4, #0]
    }
   d6c20:	bd10      	pop	{r4, pc}
   d6c22:	bf00      	nop
   d6c24:	2003e65c 	.word	0x2003e65c

000d6c28 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d6c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6c2a:	2500      	movs	r5, #0
   d6c2c:	1cec      	adds	r4, r5, #3
   d6c2e:	428c      	cmp	r4, r1
   d6c30:	d80d      	bhi.n	d6c4e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d6c32:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d6c34:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d6c36:	5d87      	ldrb	r7, [r0, r6]
   d6c38:	4297      	cmp	r7, r2
   d6c3a:	d105      	bne.n	d6c48 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d6c3c:	4426      	add	r6, r4
   d6c3e:	42b1      	cmp	r1, r6
   d6c40:	d305      	bcc.n	d6c4e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d6c42:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d6c44:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d6c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d6c48:	3401      	adds	r4, #1
   d6c4a:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6c4c:	e7ee      	b.n	d6c2c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d6c4e:	2000      	movs	r0, #0
   d6c50:	e7f9      	b.n	d6c46 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d6c52 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d6c52:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6c56:	4604      	mov	r4, r0
   d6c58:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d6c5c:	461e      	mov	r6, r3
   d6c5e:	4689      	mov	r9, r1
   d6c60:	ab01      	add	r3, sp, #4
   d6c62:	4690      	mov	r8, r2
   d6c64:	460a      	mov	r2, r1
   d6c66:	6a01      	ldr	r1, [r0, #32]
   d6c68:	f7ff ffde 	bl	d6c28 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d6c6c:	6a25      	ldr	r5, [r4, #32]
   d6c6e:	1cb3      	adds	r3, r6, #2
   d6c70:	bb17      	cbnz	r7, d6cb8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d6c72:	b308      	cbz	r0, d6cb8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d6c74:	195f      	adds	r7, r3, r5
   d6c76:	1a3f      	subs	r7, r7, r0
   d6c78:	2f1f      	cmp	r7, #31
   d6c7a:	d819      	bhi.n	d6cb0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6c7c:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d6c80:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6c84:	eba5 0209 	sub.w	r2, r5, r9
   d6c88:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d6c8a:	eb00 0109 	add.w	r1, r0, r9
   d6c8e:	eb06 000a 	add.w	r0, r6, sl
   d6c92:	b292      	uxth	r2, r2
   d6c94:	4421      	add	r1, r4
   d6c96:	4420      	add	r0, r4
   d6c98:	f003 fa7a 	bl	da190 <memmove>
            selfData_[offset] = len + 1;
   d6c9c:	1c73      	adds	r3, r6, #1
   d6c9e:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d6ca2:	4632      	mov	r2, r6
   d6ca4:	4641      	mov	r1, r8
   d6ca6:	eb04 000a 	add.w	r0, r4, sl
   d6caa:	f003 fa63 	bl	da174 <memcpy>
            selfLen_ = staLen + len + 2;
   d6cae:	6227      	str	r7, [r4, #32]
}
   d6cb0:	6a20      	ldr	r0, [r4, #32]
   d6cb2:	b002      	add	sp, #8
   d6cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d6cb8:	442b      	add	r3, r5
   d6cba:	2b1f      	cmp	r3, #31
   d6cbc:	d8f8      	bhi.n	d6cb0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d6cbe:	1c73      	adds	r3, r6, #1
   d6cc0:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d6cc2:	1ca8      	adds	r0, r5, #2
   d6cc4:	4425      	add	r5, r4
   d6cc6:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d6cc8:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d6cca:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d6cce:	4641      	mov	r1, r8
   d6cd0:	4420      	add	r0, r4
   d6cd2:	f003 fa4f 	bl	da174 <memcpy>
        selfLen_ += len;
   d6cd6:	6a23      	ldr	r3, [r4, #32]
   d6cd8:	4433      	add	r3, r6
   d6cda:	6223      	str	r3, [r4, #32]
   d6cdc:	e7e8      	b.n	d6cb0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
	...

000d6ce0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d6ce0:	4a02      	ldr	r2, [pc, #8]	; (d6cec <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d6ce2:	2100      	movs	r1, #0
   d6ce4:	200a      	movs	r0, #10
   d6ce6:	f7ff b9b9 	b.w	d605c <panic_>
   d6cea:	bf00      	nop
   d6cec:	000d5ba5 	.word	0x000d5ba5

000d6cf0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6cf0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6cf2:	b538      	push	{r3, r4, r5, lr}
   d6cf4:	4604      	mov	r4, r0
	  switch (__op)
   d6cf6:	d007      	beq.n	d6d08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x18>
   d6cf8:	2a03      	cmp	r2, #3
   d6cfa:	d011      	beq.n	d6d20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x30>
   d6cfc:	2a01      	cmp	r2, #1
   d6cfe:	d101      	bne.n	d6d04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6d00:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d6d02:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6d04:	2000      	movs	r0, #0
   d6d06:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6d08:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d6d0a:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6d0c:	f7fd f9c1 	bl	d4092 <_Znwj>
   d6d10:	4603      	mov	r3, r0
   d6d12:	2800      	cmp	r0, #0
   d6d14:	d0f5      	beq.n	d6d02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
   d6d16:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6d1a:	e883 0003 	stmia.w	r3, {r0, r1}
   d6d1e:	e7f0      	b.n	d6d02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d6d20:	6800      	ldr	r0, [r0, #0]
   d6d22:	2800      	cmp	r0, #0
   d6d24:	d0ee      	beq.n	d6d04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
   d6d26:	2108      	movs	r1, #8
   d6d28:	f002 fa61 	bl	d91ee <_ZdlPvj>
   d6d2c:	e7ea      	b.n	d6d04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>

000d6d2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	  switch (__op)
   d6d2e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6d30:	b538      	push	{r3, r4, r5, lr}
   d6d32:	4604      	mov	r4, r0
	  switch (__op)
   d6d34:	d007      	beq.n	d6d46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
   d6d36:	2a03      	cmp	r2, #3
   d6d38:	d011      	beq.n	d6d5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
   d6d3a:	2a01      	cmp	r2, #1
   d6d3c:	d101      	bne.n	d6d42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6d3e:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d6d40:	6023      	str	r3, [r4, #0]
	}
   d6d42:	2000      	movs	r0, #0
   d6d44:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6d46:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d6d48:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6d4a:	f7fd f9a2 	bl	d4092 <_Znwj>
   d6d4e:	4603      	mov	r3, r0
   d6d50:	2800      	cmp	r0, #0
   d6d52:	d0f5      	beq.n	d6d40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
   d6d54:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6d58:	e883 0003 	stmia.w	r3, {r0, r1}
   d6d5c:	e7f0      	b.n	d6d40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d6d5e:	6800      	ldr	r0, [r0, #0]
   d6d60:	2800      	cmp	r0, #0
   d6d62:	d0ee      	beq.n	d6d42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
   d6d64:	2108      	movs	r1, #8
   d6d66:	f002 fa42 	bl	d91ee <_ZdlPvj>
   d6d6a:	e7ea      	b.n	d6d42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

000d6d6c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6d6c:	b430      	push	{r4, r5}
   d6d6e:	460d      	mov	r5, r1
   d6d70:	4611      	mov	r1, r2
   d6d72:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   d6d74:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6d76:	6809      	ldr	r1, [r1, #0]
   d6d78:	6828      	ldr	r0, [r5, #0]
   d6d7a:	e9d3 4300 	ldrd	r4, r3, [r3]
   d6d7e:	46a4      	mov	ip, r4
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d6d80:	bc30      	pop	{r4, r5}
   d6d82:	4760      	bx	ip

000d6d84 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6d84:	4603      	mov	r3, r0
   d6d86:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   d6d88:	681b      	ldr	r3, [r3, #0]
   d6d8a:	e9d3 2100 	ldrd	r2, r1, [r3]
   d6d8e:	4710      	bx	r2

000d6d90 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d6d90:	b510      	push	{r4, lr}
      if (_M_manager)
   d6d92:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6d94:	4604      	mov	r4, r0
      if (_M_manager)
   d6d96:	b113      	cbz	r3, d6d9e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6d98:	2203      	movs	r2, #3
   d6d9a:	4601      	mov	r1, r0
   d6d9c:	4798      	blx	r3
    }
   d6d9e:	4620      	mov	r0, r4
   d6da0:	bd10      	pop	{r4, pc}

000d6da2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6da2:	b510      	push	{r4, lr}
   d6da4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6da6:	3058      	adds	r0, #88	; 0x58
   d6da8:	f7ff fff2 	bl	d6d90 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   d6dac:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   d6db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6db4:	f7ff bd20 	b.w	d67f8 <_ZN6StringD1Ev>

000d6db8 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d6db8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6dbc:	b2da      	uxtb	r2, r3
   d6dbe:	2a09      	cmp	r2, #9
   d6dc0:	d801      	bhi.n	d6dc6 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d6dc2:	4618      	mov	r0, r3
   d6dc4:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d6dc6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d6dca:	2b05      	cmp	r3, #5
   d6dcc:	d801      	bhi.n	d6dd2 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d6dce:	3857      	subs	r0, #87	; 0x57
   d6dd0:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d6dd2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d6dd6:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d6dd8:	bf94      	ite	ls
   d6dda:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d6ddc:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d6de0:	4770      	bx	lr

000d6de2 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d6de2:	b510      	push	{r4, lr}
            locked_(false) {
   d6de4:	2300      	movs	r3, #0
    WiringBleLock() :
   d6de6:	4604      	mov	r4, r0
            locked_(false) {
   d6de8:	7003      	strb	r3, [r0, #0]
        lock();
   d6dea:	f7ff ff05 	bl	d6bf8 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d6dee:	4620      	mov	r0, r4
   d6df0:	bd10      	pop	{r4, pc}

000d6df2 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d6df2:	b510      	push	{r4, lr}
        if (locked_) {
   d6df4:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d6df6:	4604      	mov	r4, r0
        if (locked_) {
   d6df8:	b10b      	cbz	r3, d6dfe <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d6dfa:	f7ff ff09 	bl	d6c10 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d6dfe:	4620      	mov	r0, r4
   d6e00:	bd10      	pop	{r4, pc}

000d6e02 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d6e02:	b082      	sub	sp, #8
   d6e04:	4603      	mov	r3, r0
    address_ = addr;
   d6e06:	6808      	ldr	r0, [r1, #0]
   d6e08:	6849      	ldr	r1, [r1, #4]
   d6e0a:	466a      	mov	r2, sp
   d6e0c:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d6e0e:	466a      	mov	r2, sp
   d6e10:	ca03      	ldmia	r2!, {r0, r1}
   d6e12:	6018      	str	r0, [r3, #0]
}
   d6e14:	4618      	mov	r0, r3
    address_ = addr.address_;
   d6e16:	6059      	str	r1, [r3, #4]
}
   d6e18:	b002      	add	sp, #8
   d6e1a:	4770      	bx	lr

000d6e1c <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d6e1c:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d6e1e:	7982      	ldrb	r2, [r0, #6]
   d6e20:	798b      	ldrb	r3, [r1, #6]
   d6e22:	429a      	cmp	r2, r3
   d6e24:	d106      	bne.n	d6e34 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d6e26:	2206      	movs	r2, #6
   d6e28:	f003 f996 	bl	da158 <memcmp>
   d6e2c:	fab0 f080 	clz	r0, r0
   d6e30:	0940      	lsrs	r0, r0, #5
}
   d6e32:	bd08      	pop	{r3, pc}
    return false;
   d6e34:	2000      	movs	r0, #0
   d6e36:	e7fc      	b.n	d6e32 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d6e38 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d6e38:	f04f 33ff 	mov.w	r3, #4294967295
   d6e3c:	6003      	str	r3, [r0, #0]
   d6e3e:	8083      	strh	r3, [r0, #4]
}
   d6e40:	2000      	movs	r0, #0
   d6e42:	4770      	bx	lr

000d6e44 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d6e44:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d6e46:	b508      	push	{r3, lr}
        : address_{} {
   d6e48:	6001      	str	r1, [r0, #0]
   d6e4a:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d6e4c:	4602      	mov	r2, r0
    clear();
   d6e4e:	f7ff fff3 	bl	d6e38 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d6e52:	7191      	strb	r1, [r2, #6]
}
   d6e54:	4610      	mov	r0, r2
   d6e56:	bd08      	pop	{r3, pc}

000d6e58 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d6e58:	2201      	movs	r2, #1
   d6e5a:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6e5c:	4a06      	ldr	r2, [pc, #24]	; (d6e78 <_ZN8particle7BleUuidC1Ev+0x20>)
   d6e5e:	6811      	ldr	r1, [r2, #0]
   d6e60:	6001      	str	r1, [r0, #0]
   d6e62:	6851      	ldr	r1, [r2, #4]
   d6e64:	6041      	str	r1, [r0, #4]
   d6e66:	8911      	ldrh	r1, [r2, #8]
   d6e68:	7a92      	ldrb	r2, [r2, #10]
   d6e6a:	7282      	strb	r2, [r0, #10]
   d6e6c:	2200      	movs	r2, #0
   d6e6e:	8101      	strh	r1, [r0, #8]
   d6e70:	f8c0 200b 	str.w	r2, [r0, #11]
   d6e74:	73c2      	strb	r2, [r0, #15]
}
   d6e76:	4770      	bx	lr
   d6e78:	000dabbc 	.word	0x000dabbc

000d6e7c <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d6e7c:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d6e7e:	690b      	ldr	r3, [r1, #16]
   d6e80:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6e82:	f101 0210 	add.w	r2, r1, #16
   d6e86:	4603      	mov	r3, r0
   d6e88:	f851 4b04 	ldr.w	r4, [r1], #4
   d6e8c:	f843 4b04 	str.w	r4, [r3], #4
   d6e90:	4291      	cmp	r1, r2
   d6e92:	d1f9      	bne.n	d6e88 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d6e94:	bd10      	pop	{r4, pc}

000d6e96 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d6e96:	b510      	push	{r4, lr}
    if (uuid128) {
   d6e98:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d6e9a:	4604      	mov	r4, r0
    if (uuid128) {
   d6e9c:	b1b1      	cbz	r1, d6ecc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d6e9e:	2a01      	cmp	r2, #1
   d6ea0:	f101 0210 	add.w	r2, r1, #16
   d6ea4:	d10a      	bne.n	d6ebc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d6ea6:	4601      	mov	r1, r0
   d6ea8:	f853 0b04 	ldr.w	r0, [r3], #4
   d6eac:	f841 0b04 	str.w	r0, [r1], #4
   d6eb0:	4293      	cmp	r3, r2
   d6eb2:	d1f9      	bne.n	d6ea8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d6eb4:	2301      	movs	r3, #1
   d6eb6:	6123      	str	r3, [r4, #16]
}
   d6eb8:	4620      	mov	r0, r4
   d6eba:	bd10      	pop	{r4, pc}
   d6ebc:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d6ebe:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d6ec2:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d6ec6:	429a      	cmp	r2, r3
   d6ec8:	d1f9      	bne.n	d6ebe <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d6eca:	e7f3      	b.n	d6eb4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d6ecc:	2210      	movs	r2, #16
   d6ece:	f003 f979 	bl	da1c4 <memset>
   d6ed2:	e7f1      	b.n	d6eb8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d6ed4 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d6ed4:	b538      	push	{r3, r4, r5, lr}
   d6ed6:	4604      	mov	r4, r0
   d6ed8:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d6eda:	461a      	mov	r2, r3
   d6edc:	f7ff ffdb 	bl	d6e96 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d6ee0:	81a5      	strh	r5, [r4, #12]
}
   d6ee2:	4620      	mov	r0, r4
   d6ee4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6ee8 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d6ee8:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d6eea:	6902      	ldr	r2, [r0, #16]
   d6eec:	b922      	cbnz	r2, d6ef8 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d6eee:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6ef0:	3800      	subs	r0, #0
   d6ef2:	bf18      	it	ne
   d6ef4:	2001      	movne	r0, #1
}
   d6ef6:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6ef8:	4902      	ldr	r1, [pc, #8]	; (d6f04 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d6efa:	2210      	movs	r2, #16
   d6efc:	f003 f92c 	bl	da158 <memcmp>
   d6f00:	e7f6      	b.n	d6ef0 <_ZNK8particle7BleUuid7isValidEv+0x8>
   d6f02:	bf00      	nop
   d6f04:	000dabdc 	.word	0x000dabdc

000d6f08 <_ZNK8particle7BleUuid4typeEv>:
}
   d6f08:	6900      	ldr	r0, [r0, #16]
   d6f0a:	4770      	bx	lr

000d6f0c <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d6f0c:	b538      	push	{r3, r4, r5, lr}
   d6f0e:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d6f10:	2214      	movs	r2, #20
   d6f12:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d6f14:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d6f16:	f003 f955 	bl	da1c4 <memset>
    if (type_ == BleUuidType::SHORT) {
   d6f1a:	6923      	ldr	r3, [r4, #16]
   d6f1c:	b93b      	cbnz	r3, d6f2e <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d6f1e:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d6f20:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d6f22:	7b23      	ldrb	r3, [r4, #12]
   d6f24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d6f28:	802b      	strh	r3, [r5, #0]
}
   d6f2a:	4628      	mov	r0, r5
   d6f2c:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d6f2e:	2301      	movs	r3, #1
   d6f30:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6f32:	f104 0210 	add.w	r2, r4, #16
   d6f36:	462b      	mov	r3, r5
   d6f38:	f854 1b04 	ldr.w	r1, [r4], #4
   d6f3c:	f843 1b04 	str.w	r1, [r3], #4
   d6f40:	4294      	cmp	r4, r2
   d6f42:	d1f9      	bne.n	d6f38 <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d6f44:	e7f1      	b.n	d6f2a <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d6f46 <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d6f46:	7b42      	ldrb	r2, [r0, #13]
   d6f48:	7b00      	ldrb	r0, [r0, #12]
}
   d6f4a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d6f4e:	4770      	bx	lr

000d6f50 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d6f50:	4770      	bx	lr

000d6f52 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d6f52:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d6f54:	6902      	ldr	r2, [r0, #16]
   d6f56:	690b      	ldr	r3, [r1, #16]
   d6f58:	429a      	cmp	r2, r3
   d6f5a:	d106      	bne.n	d6f6a <_ZNK8particle7BleUuideqERKS0_+0x18>
   d6f5c:	2210      	movs	r2, #16
   d6f5e:	f003 f8fb 	bl	da158 <memcmp>
   d6f62:	fab0 f080 	clz	r0, r0
   d6f66:	0940      	lsrs	r0, r0, #5
}
   d6f68:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d6f6a:	2000      	movs	r0, #0
   d6f6c:	e7fc      	b.n	d6f68 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d6f70 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d6f70:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d6f72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d6f76:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6f78:	4b32      	ldr	r3, [pc, #200]	; (d7044 <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d6f7a:	681a      	ldr	r2, [r3, #0]
   d6f7c:	6002      	str	r2, [r0, #0]
   d6f7e:	685a      	ldr	r2, [r3, #4]
   d6f80:	6042      	str	r2, [r0, #4]
   d6f82:	2500      	movs	r5, #0
   d6f84:	891a      	ldrh	r2, [r3, #8]
   d6f86:	7a9b      	ldrb	r3, [r3, #10]
   d6f88:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d6f8a:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6f8c:	7283      	strb	r3, [r0, #10]
   d6f8e:	f8c0 500b 	str.w	r5, [r0, #11]
   d6f92:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d6f94:	460e      	mov	r6, r1
   d6f96:	b321      	cbz	r1, d6fe2 <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d6f98:	2124      	movs	r1, #36	; 0x24
   d6f9a:	4630      	mov	r0, r6
   d6f9c:	f003 f96b 	bl	da276 <strnlen>
   d6fa0:	2804      	cmp	r0, #4
   d6fa2:	d121      	bne.n	d6fe8 <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d6fa4:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6fa8:	af01      	add	r7, sp, #4
   d6faa:	1cb5      	adds	r5, r6, #2
   d6fac:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d6fae:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d6fb2:	f7ff ff01 	bl	d6db8 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d6fb6:	f1b0 0800 	subs.w	r8, r0, #0
   d6fba:	db10      	blt.n	d6fde <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d6fbc:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d6fc0:	f7ff fefa 	bl	d6db8 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d6fc4:	2800      	cmp	r0, #0
   d6fc6:	db0a      	blt.n	d6fde <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d6fc8:	3502      	adds	r5, #2
   d6fca:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d6fce:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d6fd0:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d6fd4:	d1eb      	bne.n	d6fae <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d6fd6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d6fda:	ba5b      	rev16	r3, r3
   d6fdc:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d6fde:	2300      	movs	r3, #0
   d6fe0:	6123      	str	r3, [r4, #16]
}
   d6fe2:	b002      	add	sp, #8
   d6fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d6fe8:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6fea:	2124      	movs	r1, #36	; 0x24
   d6fec:	4630      	mov	r0, r6
   d6fee:	f003 f942 	bl	da276 <strnlen>
   d6ff2:	42a8      	cmp	r0, r5
   d6ff4:	d806      	bhi.n	d7004 <_ZN8particle7BleUuid9constructEPKc+0x94>
   d6ff6:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d6ff8:	2300      	movs	r3, #0
    while (len > 0) {
   d6ffa:	42bc      	cmp	r4, r7
   d6ffc:	d0f1      	beq.n	d6fe2 <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d6ffe:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d7002:	e7fa      	b.n	d6ffa <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d7004:	2f00      	cmp	r7, #0
   d7006:	d0ec      	beq.n	d6fe2 <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d7008:	5d70      	ldrb	r0, [r6, r5]
   d700a:	f7ff fed5 	bl	d6db8 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d700e:	0603      	lsls	r3, r0, #24
   d7010:	d415      	bmi.n	d703e <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d7012:	0100      	lsls	r0, r0, #4
   d7014:	3f01      	subs	r7, #1
   d7016:	fa5f f880 	uxtb.w	r8, r0
   d701a:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d701e:	2124      	movs	r1, #36	; 0x24
   d7020:	4630      	mov	r0, r6
   d7022:	f003 f928 	bl	da276 <strnlen>
   d7026:	3501      	adds	r5, #1
   d7028:	42a8      	cmp	r0, r5
   d702a:	d908      	bls.n	d703e <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d702c:	5d70      	ldrb	r0, [r6, r5]
   d702e:	f7ff fec3 	bl	d6db8 <_ZN8particle11hexToNibbleEc>
   d7032:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d7034:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d7036:	bfa4      	itt	ge
   d7038:	ea40 0008 	orrge.w	r0, r0, r8
   d703c:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d703e:	3501      	adds	r5, #1
   d7040:	e7d3      	b.n	d6fea <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d7042:	bf00      	nop
   d7044:	000dabbc 	.word	0x000dabbc

000d7048 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d7048:	b513      	push	{r0, r1, r4, lr}
   d704a:	4604      	mov	r4, r0
   d704c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d704e:	f7ff ff03 	bl	d6e58 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d7052:	4620      	mov	r0, r4
   d7054:	9901      	ldr	r1, [sp, #4]
   d7056:	f7ff ff8b 	bl	d6f70 <_ZN8particle7BleUuid9constructEPKc>
}
   d705a:	4620      	mov	r0, r4
   d705c:	b002      	add	sp, #8
   d705e:	bd10      	pop	{r4, pc}

000d7060 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d7060:	b430      	push	{r4, r5}
   d7062:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d7066:	b912      	cbnz	r2, d706e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d7068:	6a00      	ldr	r0, [r0, #32]
}
   d706a:	bc30      	pop	{r4, r5}
   d706c:	4770      	bx	lr
   d706e:	9502      	str	r5, [sp, #8]
   d7070:	bc30      	pop	{r4, r5}
   d7072:	f7ff bdee 	b.w	d6c52 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d7076 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d7076:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7078:	4604      	mov	r4, r0
          selfLen_(0) {
   d707a:	4602      	mov	r2, r0
   d707c:	f100 011f 	add.w	r1, r0, #31
   d7080:	2300      	movs	r3, #0
   d7082:	f802 3b01 	strb.w	r3, [r2], #1
   d7086:	4291      	cmp	r1, r2
   d7088:	d1fb      	bne.n	d7082 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d708a:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d708c:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d708e:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d7090:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d7092:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d7096:	4619      	mov	r1, r3
   d7098:	f10d 020f 	add.w	r2, sp, #15
   d709c:	4620      	mov	r0, r4
   d709e:	f7ff ffdf 	bl	d7060 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d70a2:	4620      	mov	r0, r4
   d70a4:	b004      	add	sp, #16
   d70a6:	bd10      	pop	{r4, pc}

000d70a8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d70a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d70aa:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d70ac:	460e      	mov	r6, r1
   d70ae:	ab01      	add	r3, sp, #4
   d70b0:	6a01      	ldr	r1, [r0, #32]
   d70b2:	4604      	mov	r4, r0
   d70b4:	f7ff fdb8 	bl	d6c28 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d70b8:	4605      	mov	r5, r0
   d70ba:	b178      	cbz	r0, d70dc <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d70bc:	9801      	ldr	r0, [sp, #4]
   d70be:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d70c0:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d70c2:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d70c4:	4421      	add	r1, r4
   d70c6:	1b52      	subs	r2, r2, r5
   d70c8:	4420      	add	r0, r4
   d70ca:	f003 f853 	bl	da174 <memcpy>
        selfLen_ -= len;
   d70ce:	6a20      	ldr	r0, [r4, #32]
   d70d0:	1b40      	subs	r0, r0, r5
   d70d2:	6220      	str	r0, [r4, #32]
        remove(type);
   d70d4:	4631      	mov	r1, r6
   d70d6:	4620      	mov	r0, r4
   d70d8:	f7ff ffe6 	bl	d70a8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d70dc:	b002      	add	sp, #8
   d70de:	bd70      	pop	{r4, r5, r6, pc}

000d70e0 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d70e0:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   d70e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d70e6:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d70e8:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   d70ea:	8043      	strh	r3, [r0, #2]
   d70ec:	220e      	movs	r2, #14
   d70ee:	4629      	mov	r1, r5
   d70f0:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d70f2:	7105      	strb	r5, [r0, #4]
   d70f4:	3006      	adds	r0, #6
   d70f6:	f003 f865 	bl	da1c4 <memset>
   d70fa:	f104 0014 	add.w	r0, r4, #20
   d70fe:	f7ff feab 	bl	d6e58 <_ZN8particle7BleUuidC1Ev>
   d7102:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d7106:	f7ff fea7 	bl	d6e58 <_ZN8particle7BleUuidC1Ev>
   d710a:	4904      	ldr	r1, [pc, #16]	; (d711c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d710c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d7110:	f7ff fbbd 	bl	d688e <_ZN6StringC1EPKc>
    _Function_base() : _M_manager(nullptr) { }
   d7114:	6565      	str	r5, [r4, #84]	; 0x54
    }
   d7116:	4620      	mov	r0, r4
   d7118:	bd38      	pop	{r3, r4, r5, pc}
   d711a:	bf00      	nop
   d711c:	000da53b 	.word	0x000da53b

000d7120 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d7120:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7122:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d7126:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d712a:	4293      	cmp	r3, r2
   d712c:	4618      	mov	r0, r3
   d712e:	d006      	beq.n	d713e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d7130:	6804      	ldr	r4, [r0, #0]
   d7132:	8824      	ldrh	r4, [r4, #0]
   d7134:	428c      	cmp	r4, r1
   d7136:	f103 0308 	add.w	r3, r3, #8
   d713a:	d1f6      	bne.n	d712a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d713c:	bd10      	pop	{r4, pc}
        return nullptr;
   d713e:	2000      	movs	r0, #0
   d7140:	e7fc      	b.n	d713c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d7144 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d7144:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7146:	4606      	mov	r6, r0
   d7148:	b085      	sub	sp, #20
   d714a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d714c:	460d      	mov	r5, r1
   d714e:	2900      	cmp	r1, #0
   d7150:	d050      	beq.n	d71f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d7152:	2a00      	cmp	r2, #0
   d7154:	d04e      	beq.n	d71f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
    void onDataReceived(void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance) {
        onDataReceived((callback && instance) ? std::bind(callback, instance, _1, _2, _3) :(BleOnDataReceivedStdFunction) nullptr);
    }

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d7156:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   d7158:	7823      	ldrb	r3, [r4, #0]
   d715a:	2af4      	cmp	r2, #244	; 0xf4
   d715c:	bf28      	it	cs
   d715e:	22f4      	movcs	r2, #244	; 0xf4
   d7160:	b343      	cbz	r3, d71b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d7162:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d7164:	0798      	lsls	r0, r3, #30
   d7166:	d509      	bpl.n	d717c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d7168:	89a0      	ldrh	r0, [r4, #12]
   d716a:	9203      	str	r2, [sp, #12]
   d716c:	2300      	movs	r3, #0
   d716e:	f7fe fd8d 	bl	d5c8c <hal_ble_gatt_server_set_characteristic_value>
   d7172:	2800      	cmp	r0, #0
   d7174:	9a03      	ldr	r2, [sp, #12]
   d7176:	da03      	bge.n	d7180 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d7178:	b005      	add	sp, #20
   d717a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d717c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d7180:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d7182:	7923      	ldrb	r3, [r4, #4]
   d7184:	06d9      	lsls	r1, r3, #27
   d7186:	d509      	bpl.n	d719c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d7188:	2f01      	cmp	r7, #1
   d718a:	d007      	beq.n	d719c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d718c:	89a0      	ldrh	r0, [r4, #12]
   d718e:	2300      	movs	r3, #0
   d7190:	4629      	mov	r1, r5
}
   d7192:	b005      	add	sp, #20
   d7194:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d7198:	f7fe bdb4 	b.w	d5d04 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d719c:	069b      	lsls	r3, r3, #26
   d719e:	d5eb      	bpl.n	d7178 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d71a0:	2f02      	cmp	r7, #2
   d71a2:	d0e9      	beq.n	d7178 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d71a4:	89a0      	ldrh	r0, [r4, #12]
   d71a6:	2300      	movs	r3, #0
   d71a8:	4629      	mov	r1, r5
}
   d71aa:	b005      	add	sp, #20
   d71ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d71b0:	f7fe bdb2 	b.w	d5d18 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d71b4:	8860      	ldrh	r0, [r4, #2]
   d71b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d71ba:	4288      	cmp	r0, r1
   d71bc:	d01c      	beq.n	d71f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d71be:	7921      	ldrb	r1, [r4, #4]
   d71c0:	074e      	lsls	r6, r1, #29
   d71c2:	d501      	bpl.n	d71c8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d71c4:	2f01      	cmp	r7, #1
   d71c6:	d104      	bne.n	d71d2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d71c8:	070b      	lsls	r3, r1, #28
   d71ca:	d409      	bmi.n	d71e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d71cc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d71d0:	e7d2      	b.n	d7178 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d71d2:	89a1      	ldrh	r1, [r4, #12]
   d71d4:	9300      	str	r3, [sp, #0]
   d71d6:	4613      	mov	r3, r2
   d71d8:	462a      	mov	r2, r5
   d71da:	f7fe fd6b 	bl	d5cb4 <hal_ble_gatt_client_write_without_response>
   d71de:	e7cb      	b.n	d7178 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d71e0:	2f02      	cmp	r7, #2
   d71e2:	d0f3      	beq.n	d71cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d71e4:	2300      	movs	r3, #0
   d71e6:	89a1      	ldrh	r1, [r4, #12]
   d71e8:	9300      	str	r3, [sp, #0]
   d71ea:	4613      	mov	r3, r2
   d71ec:	462a      	mov	r2, r5
   d71ee:	f7fe fd57 	bl	d5ca0 <hal_ble_gatt_client_write_with_response>
   d71f2:	e7c1      	b.n	d7178 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d71f4:	4802      	ldr	r0, [pc, #8]	; (d7200 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d71f6:	e7bf      	b.n	d7178 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d71f8:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d71fc:	e7bc      	b.n	d7178 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d71fe:	bf00      	nop
   d7200:	fffffef2 	.word	0xfffffef2

000d7204 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   d7204:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   d7206:	688a      	ldr	r2, [r1, #8]
   d7208:	6809      	ldr	r1, [r1, #0]
   d720a:	f7ff bf9b 	b.w	d7144 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000d720e <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d720e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7210:	460c      	mov	r4, r1
   d7212:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d7214:	21f4      	movs	r1, #244	; 0xf4
   d7216:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d7218:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d721a:	f003 f82c 	bl	da276 <strnlen>
   d721e:	9b01      	ldr	r3, [sp, #4]
   d7220:	4602      	mov	r2, r0
   d7222:	4621      	mov	r1, r4
   d7224:	4628      	mov	r0, r5
}
   d7226:	b003      	add	sp, #12
   d7228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d722c:	f7ff bf8a 	b.w	d7144 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000d7230 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d7230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d7234:	2600      	movs	r6, #0
   d7236:	6006      	str	r6, [r0, #0]
   d7238:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d723a:	2028      	movs	r0, #40	; 0x28
   d723c:	460c      	mov	r4, r1
   d723e:	f7fc ff28 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d7242:	1e05      	subs	r5, r0, #0
   d7244:	f105 080c 	add.w	r8, r5, #12
   d7248:	d00f      	beq.n	d726a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d724a:	2301      	movs	r3, #1
   d724c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d7250:	4b08      	ldr	r3, [pc, #32]	; (d7274 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d7252:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   d7254:	4640      	mov	r0, r8
   d7256:	f7ff fdff 	bl	d6e58 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   d725a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   d725c:	622e      	str	r6, [r5, #32]
   d725e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   d7262:	4646      	mov	r6, r8
   d7264:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d7266:	6823      	ldr	r3, [r4, #0]
   d7268:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   d726a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d726e:	4638      	mov	r0, r7
   d7270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7274:	000dab84 	.word	0x000dab84

000d7278 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d7278:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d727a:	2500      	movs	r5, #0
   d727c:	6005      	str	r5, [r0, #0]
   d727e:	4606      	mov	r6, r0
   d7280:	2030      	movs	r0, #48	; 0x30
   d7282:	f7fc ff06 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d7286:	4604      	mov	r4, r0
   d7288:	b188      	cbz	r0, d72ae <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d728a:	2301      	movs	r3, #1
   d728c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d7290:	4b09      	ldr	r3, [pc, #36]	; (d72b8 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d7292:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d7294:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7298:	8183      	strh	r3, [r0, #12]
   d729a:	300e      	adds	r0, #14
   d729c:	f7ff fdd2 	bl	d6e44 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d72a0:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d72a4:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d72a8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d72ac:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d72ae:	6074      	str	r4, [r6, #4]
   d72b0:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d72b2:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d72b4:	4630      	mov	r0, r6
   d72b6:	bd70      	pop	{r4, r5, r6, pc}
   d72b8:	000daba0 	.word	0x000daba0

000d72bc <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d72bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d72be:	460d      	mov	r5, r1
   d72c0:	4604      	mov	r4, r0
    WiringBleLock lk;
   d72c2:	a801      	add	r0, sp, #4
   d72c4:	f7ff fd8d 	bl	d6de2 <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d72c8:	682a      	ldr	r2, [r5, #0]
   d72ca:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d72ce:	6023      	str	r3, [r4, #0]
   d72d0:	6853      	ldr	r3, [r2, #4]
   d72d2:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d72d4:	a801      	add	r0, sp, #4
   d72d6:	f7ff fd8c 	bl	d6df2 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d72da:	4620      	mov	r0, r4
   d72dc:	b003      	add	sp, #12
   d72de:	bd30      	pop	{r4, r5, pc}

000d72e0 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d72e0:	b530      	push	{r4, r5, lr}
   d72e2:	4605      	mov	r5, r0
   d72e4:	b087      	sub	sp, #28
   d72e6:	460c      	mov	r4, r1
    WiringBleLock lk;
   d72e8:	a801      	add	r0, sp, #4
   d72ea:	f7ff fd7a 	bl	d6de2 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d72ee:	682a      	ldr	r2, [r5, #0]
   d72f0:	6823      	ldr	r3, [r4, #0]
   d72f2:	8812      	ldrh	r2, [r2, #0]
   d72f4:	881b      	ldrh	r3, [r3, #0]
   d72f6:	429a      	cmp	r2, r3
   d72f8:	d10d      	bne.n	d7316 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d72fa:	4629      	mov	r1, r5
   d72fc:	a802      	add	r0, sp, #8
   d72fe:	f7ff ffdd 	bl	d72bc <_ZNK8particle13BlePeerDevice7addressEv>
   d7302:	4621      	mov	r1, r4
   d7304:	a804      	add	r0, sp, #16
   d7306:	f7ff ffd9 	bl	d72bc <_ZNK8particle13BlePeerDevice7addressEv>
   d730a:	a904      	add	r1, sp, #16
   d730c:	a802      	add	r0, sp, #8
   d730e:	f7ff fd85 	bl	d6e1c <_ZNK8particle10BleAddresseqERKS0_>
   d7312:	4604      	mov	r4, r0
   d7314:	b900      	cbnz	r0, d7318 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d7316:	2400      	movs	r4, #0
    WiringBleLock lk;
   d7318:	a801      	add	r0, sp, #4
   d731a:	f7ff fd6a 	bl	d6df2 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d731e:	4620      	mov	r0, r4
   d7320:	b007      	add	sp, #28
   d7322:	bd30      	pop	{r4, r5, pc}

000d7324 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d7324:	b510      	push	{r4, lr}
   d7326:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d7328:	2054      	movs	r0, #84	; 0x54
   d732a:	f7fc feb2 	bl	d4092 <_Znwj>
   d732e:	4601      	mov	r1, r0
   d7330:	b160      	cbz	r0, d734c <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d7332:	2300      	movs	r3, #0
   d7334:	e9c0 3300 	strd	r3, r3, [r0]
   d7338:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d733c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d7340:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d7344:	6203      	str	r3, [r0, #32]
   d7346:	62c3      	str	r3, [r0, #44]	; 0x2c
   d7348:	63c3      	str	r3, [r0, #60]	; 0x3c
   d734a:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d734c:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d734e:	b919      	cbnz	r1, d7358 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d7350:	4a09      	ldr	r2, [pc, #36]	; (d7378 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d7352:	200a      	movs	r0, #10
   d7354:	f7fe fe82 	bl	d605c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d7358:	2000      	movs	r0, #0
   d735a:	f7fe fc5b 	bl	d5c14 <hal_ble_stack_init>
   d735e:	b120      	cbz	r0, d736a <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d7360:	4a05      	ldr	r2, [pc, #20]	; (d7378 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d7362:	2100      	movs	r1, #0
   d7364:	200a      	movs	r0, #10
   d7366:	f7fe fe79 	bl	d605c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d736a:	6821      	ldr	r1, [r4, #0]
   d736c:	4803      	ldr	r0, [pc, #12]	; (d737c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d736e:	2200      	movs	r2, #0
   d7370:	f7fe fcbe 	bl	d5cf0 <hal_ble_set_callback_on_periph_link_events>
}
   d7374:	4620      	mov	r0, r4
   d7376:	bd10      	pop	{r4, pc}
   d7378:	000d5ba5 	.word	0x000d5ba5
   d737c:	000d7805 	.word	0x000d7805

000d7380 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d7380:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d7382:	4c0b      	ldr	r4, [pc, #44]	; (d73b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d7384:	7823      	ldrb	r3, [r4, #0]
   d7386:	f3bf 8f5b 	dmb	ish
   d738a:	07db      	lsls	r3, r3, #31
   d738c:	d40e      	bmi.n	d73ac <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d738e:	4620      	mov	r0, r4
   d7390:	f7fc fe85 	bl	d409e <__cxa_guard_acquire>
   d7394:	b150      	cbz	r0, d73ac <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d7396:	4807      	ldr	r0, [pc, #28]	; (d73b4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d7398:	f7ff ffc4 	bl	d7324 <_ZN8particle14BleLocalDeviceC1Ev>
   d739c:	4620      	mov	r0, r4
   d739e:	f7fc fe83 	bl	d40a8 <__cxa_guard_release>
   d73a2:	4a05      	ldr	r2, [pc, #20]	; (d73b8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d73a4:	4905      	ldr	r1, [pc, #20]	; (d73bc <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d73a6:	4803      	ldr	r0, [pc, #12]	; (d73b4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d73a8:	f001 ff1c 	bl	d91e4 <__aeabi_atexit>
    return instance;
}
   d73ac:	4801      	ldr	r0, [pc, #4]	; (d73b4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d73ae:	bd10      	pop	{r4, pc}
   d73b0:	2003e654 	.word	0x2003e654
   d73b4:	2003e660 	.word	0x2003e660
   d73b8:	2003df68 	.word	0x2003df68
   d73bc:	000d75c5 	.word	0x000d75c5

000d73c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d73c0:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   d73c2:	6803      	ldr	r3, [r0, #0]
   d73c4:	3b09      	subs	r3, #9
   d73c6:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d73c8:	b08d      	sub	sp, #52	; 0x34
   d73ca:	4604      	mov	r4, r0
   d73cc:	460d      	mov	r5, r1
    switch (event->type) {
   d73ce:	d811      	bhi.n	d73f4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d73d0:	f7ff ffd6 	bl	d7380 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d73d4:	88a1      	ldrh	r1, [r4, #4]
   d73d6:	6800      	ldr	r0, [r0, #0]
   d73d8:	f7ff fea2 	bl	d7120 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d73dc:	4603      	mov	r3, r0
   d73de:	b958      	cbnz	r0, d73f8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d73e0:	2220      	movs	r2, #32
   d73e2:	e9cd 2004 	strd	r2, r0, [sp, #16]
   d73e6:	4a0b      	ldr	r2, [pc, #44]	; (d7414 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d73e8:	9200      	str	r2, [sp, #0]
   d73ea:	490b      	ldr	r1, [pc, #44]	; (d7418 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d73ec:	aa04      	add	r2, sp, #16
   d73ee:	2032      	movs	r0, #50	; 0x32
   d73f0:	f7fe fe3c 	bl	d606c <log_message>
}
   d73f4:	b00d      	add	sp, #52	; 0x34
   d73f6:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   d73f8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   d73fa:	2a00      	cmp	r2, #0
   d73fc:	d0fa      	beq.n	d73f4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   d73fe:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7402:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   d7406:	e9cd 1203 	strd	r1, r2, [sp, #12]
   d740a:	6dac      	ldr	r4, [r5, #88]	; 0x58
   d740c:	aa04      	add	r2, sp, #16
   d740e:	a903      	add	r1, sp, #12
   d7410:	47a0      	blx	r4
}
   d7412:	e7ef      	b.n	d73f4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   d7414:	000daa91 	.word	0x000daa91
   d7418:	000daa6a 	.word	0x000daa6a

000d741c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d741c:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   d741e:	2000      	movs	r0, #0
   d7420:	f7fe fbf8 	bl	d5c14 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   d7424:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d7428:	bd08      	pop	{r3, pc}

000d742a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d742a:	4608      	mov	r0, r1
   d742c:	b911      	cbnz	r1, d7434 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d742e:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d7430:	f7fe bc00 	b.w	d5c34 <hal_ble_gap_set_advertising_data>
   d7434:	6a09      	ldr	r1, [r1, #32]
   d7436:	2200      	movs	r2, #0
   d7438:	e7fa      	b.n	d7430 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d743a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d743a:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d743c:	4608      	mov	r0, r1
   d743e:	b929      	cbnz	r1, d744c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d7440:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d7442:	b003      	add	sp, #12
   d7444:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d7448:	f7fe bbfc 	b.w	d5c44 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d744c:	2101      	movs	r1, #1
   d744e:	9001      	str	r0, [sp, #4]
   d7450:	f7ff fe2a 	bl	d70a8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d7454:	9801      	ldr	r0, [sp, #4]
   d7456:	2200      	movs	r2, #0
   d7458:	6a01      	ldr	r1, [r0, #32]
   d745a:	e7f2      	b.n	d7442 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d745c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d745c:	b538      	push	{r3, r4, r5, lr}
   d745e:	4604      	mov	r4, r0
   d7460:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   d7462:	f7ff ffe2 	bl	d742a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d7466:	2800      	cmp	r0, #0
   d7468:	db0a      	blt.n	d7480 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   d746a:	4629      	mov	r1, r5
   d746c:	4620      	mov	r0, r4
   d746e:	f7ff ffe4 	bl	d743a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d7472:	2800      	cmp	r0, #0
   d7474:	db04      	blt.n	d7480 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   d7476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   d747a:	2000      	movs	r0, #0
   d747c:	f7fe bbea 	b.w	d5c54 <hal_ble_gap_start_advertising>
}
   d7480:	bd38      	pop	{r3, r4, r5, pc}

000d7482 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   d7482:	6803      	ldr	r3, [r0, #0]
   d7484:	69d8      	ldr	r0, [r3, #28]
}
   d7486:	2800      	cmp	r0, #0
   d7488:	bfd4      	ite	le
   d748a:	2000      	movle	r0, #0
   d748c:	2001      	movgt	r0, #1
   d748e:	4770      	bx	lr

000d7490 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d7490:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7492:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d7494:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d7496:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7498:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d749a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d749c:	f7fc fdf9 	bl	d4092 <_Znwj>
   d74a0:	b118      	cbz	r0, d74aa <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d74a2:	682b      	ldr	r3, [r5, #0]
   d74a4:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d74a6:	686b      	ldr	r3, [r5, #4]
   d74a8:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d74aa:	4b03      	ldr	r3, [pc, #12]	; (d74b8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   d74ac:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d74ae:	4b03      	ldr	r3, [pc, #12]	; (d74bc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d74b0:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d74b2:	60a3      	str	r3, [r4, #8]
      }
   d74b4:	4620      	mov	r0, r4
   d74b6:	bd38      	pop	{r3, r4, r5, pc}
   d74b8:	000d6d6d 	.word	0x000d6d6d
   d74bc:	000d6cf1 	.word	0x000d6cf1

000d74c0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d74c0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d74c2:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d74c4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d74c6:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d74c8:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d74ca:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d74cc:	f7fc fde1 	bl	d4092 <_Znwj>
   d74d0:	b118      	cbz	r0, d74da <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   d74d2:	682b      	ldr	r3, [r5, #0]
   d74d4:	6003      	str	r3, [r0, #0]
   d74d6:	686b      	ldr	r3, [r5, #4]
   d74d8:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d74da:	4b03      	ldr	r3, [pc, #12]	; (d74e8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   d74dc:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d74de:	4b03      	ldr	r3, [pc, #12]	; (d74ec <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d74e0:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d74e2:	60a3      	str	r3, [r4, #8]
      }
   d74e4:	4620      	mov	r0, r4
   d74e6:	bd38      	pop	{r3, r4, r5, pc}
   d74e8:	000d6d85 	.word	0x000d6d85
   d74ec:	000d6d2f 	.word	0x000d6d2f

000d74f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d74f0:	680b      	ldr	r3, [r1, #0]
   d74f2:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d74f4:	b113      	cbz	r3, d74fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d74f6:	685a      	ldr	r2, [r3, #4]
   d74f8:	3201      	adds	r2, #1
   d74fa:	605a      	str	r2, [r3, #4]
      }
   d74fc:	4770      	bx	lr

000d74fe <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d74fe:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7500:	f851 3b04 	ldr.w	r3, [r1], #4
   d7504:	4604      	mov	r4, r0
   d7506:	f840 3b04 	str.w	r3, [r0], #4
   d750a:	f7ff fff1 	bl	d74f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d750e:	6823      	ldr	r3, [r4, #0]
   d7510:	b90b      	cbnz	r3, d7516 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d7512:	f7ff fbe5 	bl	d6ce0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d7516:	4620      	mov	r0, r4
   d7518:	bd10      	pop	{r4, pc}

000d751a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d751a:	b510      	push	{r4, lr}
   d751c:	f851 3b04 	ldr.w	r3, [r1], #4
   d7520:	4604      	mov	r4, r0
   d7522:	f840 3b04 	str.w	r3, [r0], #4
   d7526:	f7ff ffe3 	bl	d74f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d752a:	4620      	mov	r0, r4
   d752c:	bd10      	pop	{r4, pc}

000d752e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d752e:	b510      	push	{r4, lr}
   d7530:	f851 3b04 	ldr.w	r3, [r1], #4
   d7534:	4604      	mov	r4, r0
   d7536:	f840 3b04 	str.w	r3, [r0], #4
   d753a:	f7ff ffd9 	bl	d74f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d753e:	4620      	mov	r0, r4
   d7540:	bd10      	pop	{r4, pc}

000d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d7542:	b510      	push	{r4, lr}
   d7544:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d7546:	6800      	ldr	r0, [r0, #0]
   d7548:	b128      	cbz	r0, d7556 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d754a:	6843      	ldr	r3, [r0, #4]
   d754c:	3b01      	subs	r3, #1
   d754e:	6043      	str	r3, [r0, #4]
   d7550:	b90b      	cbnz	r3, d7556 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d7552:	f7ff fb38 	bl	d6bc6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d7556:	4620      	mov	r0, r4
   d7558:	bd10      	pop	{r4, pc}

000d755a <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d755a:	b510      	push	{r4, lr}
   d755c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d755e:	3004      	adds	r0, #4
   d7560:	f7ff ffef 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7564:	4620      	mov	r0, r4
   d7566:	bd10      	pop	{r4, pc}

000d7568 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7568:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d756a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d756e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d7570:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d7574:	42ae      	cmp	r6, r5
   d7576:	d004      	beq.n	d7582 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d7578:	1d28      	adds	r0, r5, #4
   d757a:	f7ff ffe2 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d757e:	3508      	adds	r5, #8
   d7580:	e7f8      	b.n	d7574 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d7582:	6820      	ldr	r0, [r4, #0]
   d7584:	f7fe fe80 	bl	d6288 <free>
}
   d7588:	4620      	mov	r0, r4
   d758a:	bd70      	pop	{r4, r5, r6, pc}

000d758c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d758c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d758e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7592:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d7594:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d7598:	42ae      	cmp	r6, r5
   d759a:	d004      	beq.n	d75a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d759c:	1d28      	adds	r0, r5, #4
   d759e:	f7ff ffd0 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d75a2:	3508      	adds	r5, #8
   d75a4:	e7f8      	b.n	d7598 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d75a6:	6820      	ldr	r0, [r4, #0]
   d75a8:	f7fe fe6e 	bl	d6288 <free>
}
   d75ac:	4620      	mov	r0, r4
   d75ae:	bd70      	pop	{r4, r5, r6, pc}

000d75b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d75b0:	b510      	push	{r4, lr}
   d75b2:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d75b4:	3024      	adds	r0, #36	; 0x24
   d75b6:	f7ff ffe9 	bl	d758c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d75ba:	f104 0018 	add.w	r0, r4, #24
   d75be:	f7ff ffd3 	bl	d7568 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d75c2:	bd10      	pop	{r4, pc}

000d75c4 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d75c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d75c6:	6804      	ldr	r4, [r0, #0]
   d75c8:	4606      	mov	r6, r0
   d75ca:	b324      	cbz	r4, d7616 <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   d75cc:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d75d0:	f7ff fbde 	bl	d6d90 <_ZNSt14_Function_baseD1Ev>
   d75d4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d75d8:	f7ff fbda 	bl	d6d90 <_ZNSt14_Function_baseD1Ev>
   d75dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d75e0:	f7ff fbd6 	bl	d6d90 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d75e4:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d75e8:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d75ec:	42af      	cmp	r7, r5
   d75ee:	d004      	beq.n	d75fa <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d75f0:	1d28      	adds	r0, r5, #4
   d75f2:	f7ff ffa6 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d75f6:	3508      	adds	r5, #8
   d75f8:	e7f8      	b.n	d75ec <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d75fa:	69a0      	ldr	r0, [r4, #24]
   d75fc:	f7fe fe44 	bl	d6288 <free>
    ~BleLocalDeviceImpl() = default;
   d7600:	f104 000c 	add.w	r0, r4, #12
   d7604:	f7ff ffc2 	bl	d758c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d7608:	4620      	mov	r0, r4
   d760a:	f7ff ffad 	bl	d7568 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d760e:	2154      	movs	r1, #84	; 0x54
   d7610:	4620      	mov	r0, r4
   d7612:	f001 fdec 	bl	d91ee <_ZdlPvj>
   d7616:	4630      	mov	r0, r6
   d7618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d761a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   d761a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d761c:	b510      	push	{r4, lr}
      if (_M_empty())
   d761e:	b90a      	cbnz	r2, d7624 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d7620:	f001 fdeb 	bl	d91fa <_ZSt25__throw_bad_function_callv>
    }
   d7624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7628:	68c3      	ldr	r3, [r0, #12]
   d762a:	4718      	bx	r3

000d762c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
inline void spark::Vector<T, AllocatorT>::clear() {
   d762c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d762e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline void spark::Vector<T, AllocatorT>::clear() {
   d7632:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d7634:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d7638:	42ae      	cmp	r6, r5
   d763a:	d004      	beq.n	d7646 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
   d763c:	1d28      	adds	r0, r5, #4
   d763e:	f7ff ff80 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7642:	3508      	adds	r5, #8
   d7644:	e7f8      	b.n	d7638 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
    size_ = 0;
   d7646:	2300      	movs	r3, #0
   d7648:	6063      	str	r3, [r4, #4]
}
   d764a:	bd70      	pop	{r4, r5, r6, pc}

000d764c <_ZNK8particle14BleLocalDevice3offEv>:
int BleLocalDevice::off() const {
   d764c:	b513      	push	{r0, r1, r4, lr}
   d764e:	4604      	mov	r4, r0
    CHECK(hal_ble_stack_deinit(nullptr));
   d7650:	2000      	movs	r0, #0
   d7652:	f7fe fae7 	bl	d5c24 <hal_ble_stack_deinit>
   d7656:	2800      	cmp	r0, #0
   d7658:	db0a      	blt.n	d7670 <_ZNK8particle14BleLocalDevice3offEv+0x24>
        WiringBleLock lk;
   d765a:	a801      	add	r0, sp, #4
   d765c:	f7ff fbc1 	bl	d6de2 <_ZN8particle3ble13WiringBleLockC1Ev>
        return peers_;
   d7660:	6820      	ldr	r0, [r4, #0]
        impl()->peers().clear();
   d7662:	3018      	adds	r0, #24
   d7664:	f7ff ffe2 	bl	d762c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
        WiringBleLock lk;
   d7668:	a801      	add	r0, sp, #4
   d766a:	f7ff fbc2 	bl	d6df2 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   d766e:	2000      	movs	r0, #0
}
   d7670:	b002      	add	sp, #8
   d7672:	bd10      	pop	{r4, pc}

000d7674 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d7674:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7678:	4604      	mov	r4, r0
   d767a:	460d      	mov	r5, r1
   d767c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d767e:	d914      	bls.n	d76aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7680:	4290      	cmp	r0, r2
   d7682:	d213      	bcs.n	d76ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d7684:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d7688:	1a75      	subs	r5, r6, r1
   d768a:	f1a1 0708 	sub.w	r7, r1, #8
   d768e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d7690:	42b7      	cmp	r7, r6
   d7692:	d018      	beq.n	d76c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7694:	b11c      	cbz	r4, d769e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d7696:	4631      	mov	r1, r6
   d7698:	4620      	mov	r0, r4
   d769a:	f7ff ff48 	bl	d752e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d769e:	1d30      	adds	r0, r6, #4
   d76a0:	f7ff ff4f 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d76a4:	3e08      	subs	r6, #8
   d76a6:	3c08      	subs	r4, #8
   d76a8:	e7f2      	b.n	d7690 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d76aa:	d00c      	beq.n	d76c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d76ac:	42b5      	cmp	r5, r6
   d76ae:	d00a      	beq.n	d76c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d76b0:	b11c      	cbz	r4, d76ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d76b2:	4629      	mov	r1, r5
   d76b4:	4620      	mov	r0, r4
   d76b6:	f7ff ff3a 	bl	d752e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d76ba:	1d28      	adds	r0, r5, #4
   d76bc:	f7ff ff41 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d76c0:	3508      	adds	r5, #8
   d76c2:	3408      	adds	r4, #8
   d76c4:	e7f2      	b.n	d76ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d76c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d76c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d76c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d76cc:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d76d0:	4605      	mov	r5, r0
   d76d2:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d76d4:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d76d8:	42a7      	cmp	r7, r4
   d76da:	d103      	bne.n	d76e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d76dc:	2600      	movs	r6, #0
}
   d76de:	4630      	mov	r0, r6
   d76e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d76e4:	4641      	mov	r1, r8
   d76e6:	4620      	mov	r0, r4
   d76e8:	f7ff fdfa 	bl	d72e0 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d76ec:	4606      	mov	r6, r0
   d76ee:	b908      	cbnz	r0, d76f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d76f0:	3408      	adds	r4, #8
   d76f2:	e7f1      	b.n	d76d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d76f4:	2c00      	cmp	r4, #0
   d76f6:	d0f1      	beq.n	d76dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d76f8:	1d20      	adds	r0, r4, #4
   d76fa:	f7ff ff22 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d76fe:	e9d5 3200 	ldrd	r3, r2, [r5]
   d7702:	f104 0108 	add.w	r1, r4, #8
   d7706:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d770a:	4620      	mov	r0, r4
   d770c:	f7ff ffb2 	bl	d7674 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d7710:	686b      	ldr	r3, [r5, #4]
   d7712:	3b01      	subs	r3, #1
   d7714:	606b      	str	r3, [r5, #4]
    return true;
   d7716:	e7e2      	b.n	d76de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d7718 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   d7718:	b5f0      	push	{r4, r5, r6, r7, lr}
   d771a:	4607      	mov	r7, r0
   d771c:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   d771e:	4668      	mov	r0, sp
   d7720:	f7ff fb5f 	bl	d6de2 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d7724:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   d7726:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   d772a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   d772e:	42ac      	cmp	r4, r5
   d7730:	d02b      	beq.n	d778a <_ZNK8particle14BleLocalDevice10disconnectEv+0x72>
        hal_ble_conn_info_t connInfo = {};
   d7732:	2224      	movs	r2, #36	; 0x24
   d7734:	2100      	movs	r1, #0
   d7736:	a801      	add	r0, sp, #4
   d7738:	f002 fd44 	bl	da1c4 <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   d773c:	6823      	ldr	r3, [r4, #0]
   d773e:	2200      	movs	r2, #0
   d7740:	8818      	ldrh	r0, [r3, #0]
   d7742:	a901      	add	r1, sp, #4
   d7744:	f7fe fac0 	bl	d5cc8 <hal_ble_gap_get_connection_info>
   d7748:	4606      	mov	r6, r0
   d774a:	b108      	cbz	r0, d7750 <_ZNK8particle14BleLocalDevice10disconnectEv+0x38>
    for (auto& p : impl()->peers()) {
   d774c:	3408      	adds	r4, #8
   d774e:	e7ee      	b.n	d772e <_ZNK8particle14BleLocalDevice10disconnectEv+0x16>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   d7750:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d7754:	2b01      	cmp	r3, #1
   d7756:	d1f9      	bne.n	d774c <_ZNK8particle14BleLocalDevice10disconnectEv+0x34>
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
   d7758:	4668      	mov	r0, sp
   d775a:	f7ff fa59 	bl	d6c10 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   d775e:	6823      	ldr	r3, [r4, #0]
   d7760:	4631      	mov	r1, r6
   d7762:	8818      	ldrh	r0, [r3, #0]
   d7764:	f7fe fa7e 	bl	d5c64 <hal_ble_gap_disconnect>
   d7768:	1e05      	subs	r5, r0, #0
   d776a:	db08      	blt.n	d777e <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>
            lk.lock();
   d776c:	4668      	mov	r0, sp
   d776e:	f7ff fa43 	bl	d6bf8 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
        return peers_;
   d7772:	6838      	ldr	r0, [r7, #0]
            impl()->peers().removeOne(p);
   d7774:	4621      	mov	r1, r4
   d7776:	3018      	adds	r0, #24
   d7778:	f7ff ffa6 	bl	d76c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
            return SYSTEM_ERROR_NONE;
   d777c:	4635      	mov	r5, r6
    WiringBleLock lk;
   d777e:	4668      	mov	r0, sp
   d7780:	f7ff fb37 	bl	d6df2 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   d7784:	4628      	mov	r0, r5
   d7786:	b00b      	add	sp, #44	; 0x2c
   d7788:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   d778a:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   d778e:	e7f6      	b.n	d777e <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>

000d7790 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7792:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7794:	6846      	ldr	r6, [r0, #4]
   d7796:	4668      	mov	r0, sp
   d7798:	f7ff fec9 	bl	d752e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d779c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d77a0:	429f      	cmp	r7, r3
   d77a2:	db12      	blt.n	d77ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d77a4:	3701      	adds	r7, #1
        if (n > 0) {
   d77a6:	2f00      	cmp	r7, #0
   d77a8:	dd29      	ble.n	d77fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d77aa:	00f8      	lsls	r0, r7, #3
   d77ac:	f7fe fd64 	bl	d6278 <malloc>
            if (!d) {
   d77b0:	4605      	mov	r5, r0
   d77b2:	b1f0      	cbz	r0, d77f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d77b4:	e9d4 1200 	ldrd	r1, r2, [r4]
   d77b8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d77bc:	f7ff ff5a 	bl	d7674 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d77c0:	6820      	ldr	r0, [r4, #0]
   d77c2:	f7fe fd61 	bl	d6288 <free>
        data_ = d;
   d77c6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d77c8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d77ca:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d77cc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d77ce:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d77d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d77d6:	4631      	mov	r1, r6
   d77d8:	f106 0008 	add.w	r0, r6, #8
   d77dc:	f7ff ff4a 	bl	d7674 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d77e0:	b11e      	cbz	r6, d77ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d77e2:	4669      	mov	r1, sp
   d77e4:	4630      	mov	r0, r6
   d77e6:	f7ff fea2 	bl	d752e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d77ea:	6863      	ldr	r3, [r4, #4]
   d77ec:	3301      	adds	r3, #1
   d77ee:	6063      	str	r3, [r4, #4]
    return true;
   d77f0:	2501      	movs	r5, #1
   d77f2:	a801      	add	r0, sp, #4
   d77f4:	f7ff fea5 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d77f8:	4628      	mov	r0, r5
   d77fa:	b003      	add	sp, #12
   d77fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d77fe:	2500      	movs	r5, #0
   d7800:	e7de      	b.n	d77c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>
	...

000d7804 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d7804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7808:	4605      	mov	r5, r0
   d780a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d780c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d780e:	460c      	mov	r4, r1
        WiringBleLock lk;
   d7810:	f7ff fae7 	bl	d6de2 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d7814:	682e      	ldr	r6, [r5, #0]
   d7816:	2e04      	cmp	r6, #4
   d7818:	d06b      	beq.n	d78f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d781a:	d807      	bhi.n	d782c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d781c:	2e03      	cmp	r6, #3
   d781e:	d028      	beq.n	d7872 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d7820:	a803      	add	r0, sp, #12
   d7822:	f7ff fae6 	bl	d6df2 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d7826:	b00e      	add	sp, #56	; 0x38
   d7828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d782c:	f1a6 030c 	sub.w	r3, r6, #12
   d7830:	2b03      	cmp	r3, #3
   d7832:	d8f5      	bhi.n	d7820 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d7834:	89a9      	ldrh	r1, [r5, #12]
   d7836:	4620      	mov	r0, r4
   d7838:	f7ff fc72 	bl	d7120 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d783c:	4607      	mov	r7, r0
   d783e:	2800      	cmp	r0, #0
   d7840:	d0ee      	beq.n	d7820 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d7842:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d7844:	2b00      	cmp	r3, #0
   d7846:	d0eb      	beq.n	d7820 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d7848:	2210      	movs	r2, #16
   d784a:	2100      	movs	r1, #0
   d784c:	a807      	add	r0, sp, #28
   d784e:	f002 fcb9 	bl	da1c4 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d7852:	2e0d      	cmp	r6, #13
                        };
   d7854:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d7856:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d785a:	f040 8092 	bne.w	d7982 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d785e:	686b      	ldr	r3, [r5, #4]
   d7860:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d7862:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d7864:	9308      	str	r3, [sp, #32]
   d7866:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d7868:	a906      	add	r1, sp, #24
   d786a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d786e:	4798      	blx	r3
   d7870:	e7d6      	b.n	d7820 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d7872:	a804      	add	r0, sp, #16
   d7874:	f7ff fd00 	bl	d7278 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d7878:	9b04      	ldr	r3, [sp, #16]
   d787a:	89aa      	ldrh	r2, [r5, #12]
   d787c:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d787e:	6869      	ldr	r1, [r5, #4]
   d7880:	9804      	ldr	r0, [sp, #16]
   d7882:	3108      	adds	r1, #8
   d7884:	3002      	adds	r0, #2
   d7886:	f7ff fabc 	bl	d6e02 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d788a:	a904      	add	r1, sp, #16
   d788c:	a806      	add	r0, sp, #24
   d788e:	f7ff fe4e 	bl	d752e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d7892:	a906      	add	r1, sp, #24
   d7894:	f104 0018 	add.w	r0, r4, #24
   d7898:	f7ff ff7a 	bl	d7790 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d789c:	4605      	mov	r5, r0
   d789e:	a807      	add	r0, sp, #28
   d78a0:	f7ff fe4f 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d78a4:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d78a6:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d78a8:	b98d      	cbnz	r5, d78ce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d78aa:	4b3e      	ldr	r3, [pc, #248]	; (d79a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d78ac:	493e      	ldr	r1, [pc, #248]	; (d79a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d78ae:	9300      	str	r3, [sp, #0]
   d78b0:	2032      	movs	r0, #50	; 0x32
   d78b2:	462b      	mov	r3, r5
   d78b4:	aa06      	add	r2, sp, #24
   d78b6:	9507      	str	r5, [sp, #28]
   d78b8:	f7fe fbd8 	bl	d606c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d78bc:	9b04      	ldr	r3, [sp, #16]
   d78be:	4629      	mov	r1, r5
   d78c0:	8818      	ldrh	r0, [r3, #0]
   d78c2:	f7fe f9cf 	bl	d5c64 <hal_ble_gap_disconnect>
   d78c6:	a805      	add	r0, sp, #20
   d78c8:	f7ff fe3b 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d78cc:	e7a8      	b.n	d7820 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d78ce:	4a37      	ldr	r2, [pc, #220]	; (d79ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d78d0:	9200      	str	r2, [sp, #0]
   d78d2:	2300      	movs	r3, #0
   d78d4:	4934      	ldr	r1, [pc, #208]	; (d79a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d78d6:	9307      	str	r3, [sp, #28]
   d78d8:	aa06      	add	r2, sp, #24
   d78da:	2001      	movs	r0, #1
   d78dc:	f7fe fbc6 	bl	d606c <log_message>
                if (impl->connectedCallback_) {
   d78e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d78e2:	2b00      	cmp	r3, #0
   d78e4:	d0ef      	beq.n	d78c6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d78e6:	a904      	add	r1, sp, #16
   d78e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d78ec:	f7ff fe95 	bl	d761a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d78f0:	e7e9      	b.n	d78c6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d78f2:	89a9      	ldrh	r1, [r5, #12]
   d78f4:	4620      	mov	r0, r4
   d78f6:	f7ff fc13 	bl	d7120 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d78fa:	4606      	mov	r6, r0
   d78fc:	2800      	cmp	r0, #0
   d78fe:	d08f      	beq.n	d7820 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d7900:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d7902:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d7906:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d790a:	802a      	strh	r2, [r5, #0]
   d790c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d7910:	4299      	cmp	r1, r3
   d7912:	d003      	beq.n	d791c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d7914:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d7918:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d791a:	e7f9      	b.n	d7910 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d791c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d7920:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d7924:	45b8      	cmp	r8, r7
   d7926:	d004      	beq.n	d7932 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d7928:	1d38      	adds	r0, r7, #4
   d792a:	f7ff fe0a 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d792e:	3708      	adds	r7, #8
   d7930:	e7f8      	b.n	d7924 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d7932:	2300      	movs	r3, #0
   d7934:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d7936:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d793a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d793e:	45b8      	cmp	r8, r7
   d7940:	d004      	beq.n	d794c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d7942:	1d38      	adds	r0, r7, #4
   d7944:	f7ff fdfd 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7948:	3708      	adds	r7, #8
   d794a:	e7f8      	b.n	d793e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d794c:	2300      	movs	r3, #0
   d794e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d7950:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d7952:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7954:	b123      	cbz	r3, d7960 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d7956:	4631      	mov	r1, r6
   d7958:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d795c:	f7ff fe5d 	bl	d761a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d7960:	2300      	movs	r3, #0
   d7962:	2220      	movs	r2, #32
   d7964:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d7968:	4a11      	ldr	r2, [pc, #68]	; (d79b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d796a:	9200      	str	r2, [sp, #0]
   d796c:	490e      	ldr	r1, [pc, #56]	; (d79a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d796e:	aa06      	add	r2, sp, #24
   d7970:	2001      	movs	r0, #1
   d7972:	f7fe fb7b 	bl	d606c <log_message>
                    impl->peers_.removeOne(*peer);
   d7976:	4631      	mov	r1, r6
   d7978:	f104 0018 	add.w	r0, r4, #24
   d797c:	f7ff fea4 	bl	d76c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d7980:	e74e      	b.n	d7820 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d7982:	2e0f      	cmp	r6, #15
   d7984:	f47f af6f 	bne.w	d7866 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d7988:	686b      	ldr	r3, [r5, #4]
   d798a:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d798c:	7a2b      	ldrb	r3, [r5, #8]
   d798e:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d7992:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d7996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d799a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d799e:	2308      	movs	r3, #8
   d79a0:	e760      	b.n	d7864 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d79a2:	bf00      	nop
   d79a4:	000daaa9 	.word	0x000daaa9
   d79a8:	000daa6a 	.word	0x000daa6a
   d79ac:	000daacf 	.word	0x000daacf
   d79b0:	000daaec 	.word	0x000daaec

000d79b4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
   d79b4:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   d79b6:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   d79b8:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d79ba:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   d79be:	e9c1 3300 	strd	r3, r3, [r1]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d79c2:	6823      	ldr	r3, [r4, #0]
   d79c4:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d79c6:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d79c8:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   d79ca:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   d79cc:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   d79ce:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   d79d0:	f7ff fdb7 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   d79d4:	4620      	mov	r0, r4
   d79d6:	b002      	add	sp, #8
   d79d8:	bd10      	pop	{r4, pc}

000d79da <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d79da:	b513      	push	{r0, r1, r4, lr}
   d79dc:	460b      	mov	r3, r1
   d79de:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d79e0:	e9d0 0100 	ldrd	r0, r1, [r0]
   d79e4:	466c      	mov	r4, sp
   d79e6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d79ea:	e893 0003 	ldmia.w	r3, {r0, r1}
   d79ee:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d79f2:	e894 0003 	ldmia.w	r4, {r0, r1}
   d79f6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d79fa:	b002      	add	sp, #8
   d79fc:	bd10      	pop	{r4, pc}

000d79fe <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   d79fe:	b538      	push	{r3, r4, r5, lr}
   d7a00:	4605      	mov	r5, r0
   d7a02:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d7a04:	f7ff ffe9 	bl	d79da <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7a08:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7a0a:	68a2      	ldr	r2, [r4, #8]
   d7a0c:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a0e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7a10:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7a12:	68e2      	ldr	r2, [r4, #12]
   d7a14:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a16:	60e3      	str	r3, [r4, #12]
      }
   d7a18:	bd38      	pop	{r3, r4, r5, pc}

000d7a1a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>:
      operator=(function&& __x) noexcept
   d7a1a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7a1c:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d7a1e:	4604      	mov	r4, r0
   d7a20:	4608      	mov	r0, r1
	__x.swap(*this);
   d7a22:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d7a24:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d7a26:	f7ff ffea 	bl	d79fe <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   d7a2a:	4621      	mov	r1, r4
   d7a2c:	4668      	mov	r0, sp
   d7a2e:	f7ff ffe6 	bl	d79fe <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   d7a32:	4668      	mov	r0, sp
   d7a34:	f7ff f9ac 	bl	d6d90 <_ZNSt14_Function_baseD1Ev>
      }
   d7a38:	4620      	mov	r0, r4
   d7a3a:	b004      	add	sp, #16
   d7a3c:	bd10      	pop	{r4, pc}

000d7a3e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   d7a3e:	b570      	push	{r4, r5, r6, lr}
   d7a40:	460e      	mov	r6, r1
   d7a42:	b088      	sub	sp, #32
   d7a44:	4604      	mov	r4, r0
   d7a46:	9201      	str	r2, [sp, #4]
   d7a48:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   d7a4a:	f7ff fb49 	bl	d70e0 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   d7a4e:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   d7a50:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   d7a52:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   d7a54:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d7a58:	f7fe ff61 	bl	d691e <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d7a5c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   d7a60:	b185      	cbz	r5, d7a84 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x46>
   d7a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7a64:	9502      	str	r5, [sp, #8]
   d7a66:	a902      	add	r1, sp, #8
   d7a68:	a804      	add	r0, sp, #16
   d7a6a:	9303      	str	r3, [sp, #12]
   d7a6c:	f7ff fd10 	bl	d7490 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   d7a70:	a904      	add	r1, sp, #16
   d7a72:	4630      	mov	r0, r6
   d7a74:	f7ff ffd1 	bl	d7a1a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   d7a78:	a804      	add	r0, sp, #16
   d7a7a:	f7ff f989 	bl	d6d90 <_ZNSt14_Function_baseD1Ev>
    }
   d7a7e:	4620      	mov	r0, r4
   d7a80:	b008      	add	sp, #32
   d7a82:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   d7a84:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   d7a86:	e7f3      	b.n	d7a70 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000d7a88 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d7a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7a8c:	b086      	sub	sp, #24
   d7a8e:	4607      	mov	r7, r0
   d7a90:	461d      	mov	r5, r3
   d7a92:	2068      	movs	r0, #104	; 0x68
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d7a94:	2300      	movs	r3, #0
   d7a96:	4689      	mov	r9, r1
   d7a98:	4692      	mov	sl, r2
   d7a9a:	9304      	str	r3, [sp, #16]
   d7a9c:	f7fc faf9 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d7aa0:	1e06      	subs	r6, r0, #0
   d7aa2:	f106 080c 	add.w	r8, r6, #12
   d7aa6:	d01d      	beq.n	d7ae4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   d7aa8:	2301      	movs	r3, #1
	: _M_impl(__a)
   d7aaa:	4634      	mov	r4, r6
      : _M_use_count(1), _M_weak_count(1) { }
   d7aac:	e9c6 3301 	strd	r3, r3, [r6, #4]
	: _M_impl(__a)
   d7ab0:	4b15      	ldr	r3, [pc, #84]	; (d7b08 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x80>)
   d7ab2:	f844 3b20 	str.w	r3, [r4], #32
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d7ab6:	f89a 3000 	ldrb.w	r3, [sl]
    value_ = flags.value_;
   d7aba:	f88d 300c 	strb.w	r3, [sp, #12]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   d7abe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d7ac0:	9300      	str	r3, [sp, #0]
   d7ac2:	464a      	mov	r2, r9
   d7ac4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7ac6:	a903      	add	r1, sp, #12
   d7ac8:	4640      	mov	r0, r8
   d7aca:	f7ff ffb8 	bl	d7a3e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   d7ace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7ad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7ad2:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
   d7ad4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        charUuid_ = charUuid;
   d7ad6:	6023      	str	r3, [r4, #0]
        svcUuid_ = svcUuid;
   d7ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7ada:	f106 0434 	add.w	r4, r6, #52	; 0x34
   d7ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7ae0:	682b      	ldr	r3, [r5, #0]
   d7ae2:	6023      	str	r3, [r4, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d7ae4:	a904      	add	r1, sp, #16
   d7ae6:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
   d7ae8:	e9cd 8604 	strd	r8, r6, [sp, #16]
   d7aec:	f7ff ff62 	bl	d79b4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
      ~__shared_ptr() = default;
   d7af0:	a805      	add	r0, sp, #20
   d7af2:	f7ff fd26 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d7af6:	6839      	ldr	r1, [r7, #0]
   d7af8:	b919      	cbnz	r1, d7b02 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x7a>
        SPARK_ASSERT(false);
   d7afa:	4a04      	ldr	r2, [pc, #16]	; (d7b0c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>)
   d7afc:	200a      	movs	r0, #10
   d7afe:	f7fe faad 	bl	d605c <panic_>
}
   d7b02:	b006      	add	sp, #24
   d7b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7b08:	000dab68 	.word	0x000dab68
   d7b0c:	000d5ba5 	.word	0x000d5ba5

000d7b10 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   d7b10:	b538      	push	{r3, r4, r5, lr}
   d7b12:	4605      	mov	r5, r0
   d7b14:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d7b16:	f7ff ff60 	bl	d79da <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b1a:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7b1c:	68a2      	ldr	r2, [r4, #8]
   d7b1e:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b20:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b22:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7b24:	68e2      	ldr	r2, [r4, #12]
   d7b26:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b28:	60e3      	str	r3, [r4, #12]
      }
   d7b2a:	bd38      	pop	{r3, r4, r5, pc}

000d7b2c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEaSEOS5_>:
      operator=(function&& __x) noexcept
   d7b2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7b2e:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d7b30:	4604      	mov	r4, r0
   d7b32:	4608      	mov	r0, r1
	__x.swap(*this);
   d7b34:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d7b36:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d7b38:	f7ff ffea 	bl	d7b10 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   d7b3c:	4621      	mov	r1, r4
   d7b3e:	4668      	mov	r0, sp
   d7b40:	f7ff ffe6 	bl	d7b10 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   d7b44:	4668      	mov	r0, sp
   d7b46:	f7ff f923 	bl	d6d90 <_ZNSt14_Function_baseD1Ev>
      }
   d7b4a:	4620      	mov	r0, r4
   d7b4c:	b004      	add	sp, #16
   d7b4e:	bd10      	pop	{r4, pc}

000d7b50 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   d7b50:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   d7b52:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   d7b54:	b086      	sub	sp, #24
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   d7b56:	3424      	adds	r4, #36	; 0x24
   d7b58:	b171      	cbz	r1, d7b78 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x28>
   d7b5a:	e9cd 1200 	strd	r1, r2, [sp]
   d7b5e:	a802      	add	r0, sp, #8
   d7b60:	4669      	mov	r1, sp
   d7b62:	f7ff fcad 	bl	d74c0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
   d7b66:	a902      	add	r1, sp, #8
   d7b68:	4620      	mov	r0, r4
   d7b6a:	f7ff ffdf 	bl	d7b2c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEaSEOS5_>
    class function<_Res(_ArgTypes...)>
   d7b6e:	a802      	add	r0, sp, #8
   d7b70:	f7ff f90e 	bl	d6d90 <_ZNSt14_Function_baseD1Ev>
}
   d7b74:	b006      	add	sp, #24
   d7b76:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   d7b78:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   d7b7a:	e7f4      	b.n	d7b66 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000d7b7c <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   d7b7c:	b510      	push	{r4, lr}
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   d7b7e:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   d7b80:	b086      	sub	sp, #24
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   d7b82:	3434      	adds	r4, #52	; 0x34
   d7b84:	b171      	cbz	r1, d7ba4 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x28>
   d7b86:	e9cd 1200 	strd	r1, r2, [sp]
   d7b8a:	a802      	add	r0, sp, #8
   d7b8c:	4669      	mov	r1, sp
   d7b8e:	f7ff fc97 	bl	d74c0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
   d7b92:	a902      	add	r1, sp, #8
   d7b94:	4620      	mov	r0, r4
   d7b96:	f7ff ffc9 	bl	d7b2c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEaSEOS5_>
    class function<_Res(_ArgTypes...)>
   d7b9a:	a802      	add	r0, sp, #8
   d7b9c:	f7ff f8f8 	bl	d6d90 <_ZNSt14_Function_baseD1Ev>
}
   d7ba0:	b006      	add	sp, #24
   d7ba2:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   d7ba4:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   d7ba6:	e7f4      	b.n	d7b92 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000d7ba8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d7ba8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7bac:	4604      	mov	r4, r0
   d7bae:	460d      	mov	r5, r1
   d7bb0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7bb2:	d914      	bls.n	d7bde <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7bb4:	4290      	cmp	r0, r2
   d7bb6:	d213      	bcs.n	d7be0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d7bb8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d7bbc:	1a75      	subs	r5, r6, r1
   d7bbe:	f1a1 0708 	sub.w	r7, r1, #8
   d7bc2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d7bc4:	42b7      	cmp	r7, r6
   d7bc6:	d018      	beq.n	d7bfa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7bc8:	b11c      	cbz	r4, d7bd2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default;
   d7bca:	4631      	mov	r1, r6
   d7bcc:	4620      	mov	r0, r4
   d7bce:	f7ff fca4 	bl	d751a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7bd2:	1d30      	adds	r0, r6, #4
   d7bd4:	f7ff fcb5 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d7bd8:	3e08      	subs	r6, #8
   d7bda:	3c08      	subs	r4, #8
   d7bdc:	e7f2      	b.n	d7bc4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d7bde:	d00c      	beq.n	d7bfa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7be0:	42b5      	cmp	r5, r6
   d7be2:	d00a      	beq.n	d7bfa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7be4:	b11c      	cbz	r4, d7bee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7be6:	4629      	mov	r1, r5
   d7be8:	4620      	mov	r0, r4
   d7bea:	f7ff fc96 	bl	d751a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7bee:	1d28      	adds	r0, r5, #4
   d7bf0:	f7ff fca7 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d7bf4:	3508      	adds	r5, #8
   d7bf6:	3408      	adds	r4, #8
   d7bf8:	e7f2      	b.n	d7be0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d7bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7bfc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d7bfc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d7bfe:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d7c00:	4605      	mov	r5, r0
        if (n > 0) {
   d7c02:	dd11      	ble.n	d7c28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d7c04:	00f0      	lsls	r0, r6, #3
   d7c06:	f7fe fb37 	bl	d6278 <malloc>
            if (!d) {
   d7c0a:	4604      	mov	r4, r0
   d7c0c:	b158      	cbz	r0, d7c26 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d7c0e:	e9d5 1200 	ldrd	r1, r2, [r5]
   d7c12:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7c16:	f7ff ffc7 	bl	d7ba8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d7c1a:	6828      	ldr	r0, [r5, #0]
   d7c1c:	f7fe fb34 	bl	d6288 <free>
        data_ = d;
   d7c20:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7c22:	60ae      	str	r6, [r5, #8]
        return true;
   d7c24:	2001      	movs	r0, #1
    }
   d7c26:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d7c28:	2400      	movs	r4, #0
   d7c2a:	e7f6      	b.n	d7c1a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d7c2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7c2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7c2e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7c30:	6845      	ldr	r5, [r0, #4]
   d7c32:	4668      	mov	r0, sp
   d7c34:	f7ff fc71 	bl	d751a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7c38:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d7c3c:	4299      	cmp	r1, r3
   d7c3e:	da10      	bge.n	d7c62 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d7c40:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7c42:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d7c44:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d7c48:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7c4c:	4629      	mov	r1, r5
   d7c4e:	f105 0008 	add.w	r0, r5, #8
   d7c52:	f7ff ffa9 	bl	d7ba8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d7c56:	b98d      	cbnz	r5, d7c7c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d7c58:	6863      	ldr	r3, [r4, #4]
   d7c5a:	3301      	adds	r3, #1
   d7c5c:	6063      	str	r3, [r4, #4]
    return true;
   d7c5e:	2601      	movs	r6, #1
   d7c60:	e006      	b.n	d7c70 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7c62:	3101      	adds	r1, #1
   d7c64:	4620      	mov	r0, r4
   d7c66:	f7ff ffc9 	bl	d7bfc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7c6a:	4606      	mov	r6, r0
   d7c6c:	2800      	cmp	r0, #0
   d7c6e:	d1e7      	bne.n	d7c40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d7c70:	a801      	add	r0, sp, #4
   d7c72:	f7ff fc66 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7c76:	4630      	mov	r0, r6
   d7c78:	b002      	add	sp, #8
   d7c7a:	bd70      	pop	{r4, r5, r6, pc}
   d7c7c:	4669      	mov	r1, sp
   d7c7e:	4628      	mov	r0, r5
   d7c80:	f7ff fc4b 	bl	d751a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7c84:	e7e8      	b.n	d7c58 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d7c86 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d7c86:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c8a:	4604      	mov	r4, r0
   d7c8c:	460d      	mov	r5, r1
   d7c8e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7c90:	d914      	bls.n	d7cbc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7c92:	4290      	cmp	r0, r2
   d7c94:	d213      	bcs.n	d7cbe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d7c96:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d7c9a:	1a75      	subs	r5, r6, r1
   d7c9c:	f1a1 0708 	sub.w	r7, r1, #8
   d7ca0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d7ca2:	42b7      	cmp	r7, r6
   d7ca4:	d018      	beq.n	d7cd8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7ca6:	b11c      	cbz	r4, d7cb0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d7ca8:	4631      	mov	r1, r6
   d7caa:	4620      	mov	r0, r4
   d7cac:	f7ff fc27 	bl	d74fe <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7cb0:	1d30      	adds	r0, r6, #4
   d7cb2:	f7ff fc46 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d7cb6:	3e08      	subs	r6, #8
   d7cb8:	3c08      	subs	r4, #8
   d7cba:	e7f2      	b.n	d7ca2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d7cbc:	d00c      	beq.n	d7cd8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7cbe:	42b5      	cmp	r5, r6
   d7cc0:	d00a      	beq.n	d7cd8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7cc2:	b11c      	cbz	r4, d7ccc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7cc4:	4629      	mov	r1, r5
   d7cc6:	4620      	mov	r0, r4
   d7cc8:	f7ff fc19 	bl	d74fe <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7ccc:	1d28      	adds	r0, r5, #4
   d7cce:	f7ff fc38 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d7cd2:	3508      	adds	r5, #8
   d7cd4:	3408      	adds	r4, #8
   d7cd6:	e7f2      	b.n	d7cbe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d7cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7cda <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d7cda:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d7cdc:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d7cde:	4605      	mov	r5, r0
        if (n > 0) {
   d7ce0:	dd11      	ble.n	d7d06 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d7ce2:	00f0      	lsls	r0, r6, #3
   d7ce4:	f7fe fac8 	bl	d6278 <malloc>
            if (!d) {
   d7ce8:	4604      	mov	r4, r0
   d7cea:	b158      	cbz	r0, d7d04 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d7cec:	e9d5 1200 	ldrd	r1, r2, [r5]
   d7cf0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7cf4:	f7ff ffc7 	bl	d7c86 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d7cf8:	6828      	ldr	r0, [r5, #0]
   d7cfa:	f7fe fac5 	bl	d6288 <free>
        data_ = d;
   d7cfe:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7d00:	60ae      	str	r6, [r5, #8]
        return true;
   d7d02:	2001      	movs	r0, #1
    }
   d7d04:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d7d06:	2400      	movs	r4, #0
   d7d08:	e7f6      	b.n	d7cf8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d7d0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7d0c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7d0e:	6845      	ldr	r5, [r0, #4]
   d7d10:	4668      	mov	r0, sp
   d7d12:	f7ff fbf4 	bl	d74fe <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7d16:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d7d1a:	4299      	cmp	r1, r3
   d7d1c:	da10      	bge.n	d7d40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d7d1e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7d20:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d7d22:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d7d26:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7d2a:	4629      	mov	r1, r5
   d7d2c:	f105 0008 	add.w	r0, r5, #8
   d7d30:	f7ff ffa9 	bl	d7c86 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d7d34:	b98d      	cbnz	r5, d7d5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d7d36:	6863      	ldr	r3, [r4, #4]
   d7d38:	3301      	adds	r3, #1
   d7d3a:	6063      	str	r3, [r4, #4]
    return true;
   d7d3c:	2601      	movs	r6, #1
   d7d3e:	e006      	b.n	d7d4e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7d40:	3101      	adds	r1, #1
   d7d42:	4620      	mov	r0, r4
   d7d44:	f7ff ffc9 	bl	d7cda <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7d48:	4606      	mov	r6, r0
   d7d4a:	2800      	cmp	r0, #0
   d7d4c:	d1e7      	bne.n	d7d1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d7d4e:	a801      	add	r0, sp, #4
   d7d50:	f7ff fbf7 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7d54:	4630      	mov	r0, r6
   d7d56:	b002      	add	sp, #8
   d7d58:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d7d5a:	4669      	mov	r1, sp
   d7d5c:	4628      	mov	r0, r5
   d7d5e:	f7ff fbce 	bl	d74fe <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7d62:	e7e8      	b.n	d7d36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d7d64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d7d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7d68:	4617      	mov	r7, r2
   d7d6a:	b0a1      	sub	sp, #132	; 0x84
   d7d6c:	4680      	mov	r8, r0
    WiringBleLock lk;
   d7d6e:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d7d70:	460e      	mov	r6, r1
    WiringBleLock lk;
   d7d72:	f7ff f836 	bl	d6de2 <_ZN8particle3ble13WiringBleLockC1Ev>
   d7d76:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d7d78:	7923      	ldrb	r3, [r4, #4]
   d7d7a:	b953      	cbnz	r3, d7d92 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d7d7c:	4639      	mov	r1, r7
   d7d7e:	4640      	mov	r0, r8
   d7d80:	f7ff fbbd 	bl	d74fe <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d7d84:	a80a      	add	r0, sp, #40	; 0x28
   d7d86:	f7ff f834 	bl	d6df2 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d7d8a:	4640      	mov	r0, r8
   d7d8c:	b021      	add	sp, #132	; 0x84
   d7d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7d92:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   d7d94:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   d7d98:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d7d9c:	9303      	str	r3, [sp, #12]
   d7d9e:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d7da2:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d7da6:	9b03      	ldr	r3, [sp, #12]
   d7da8:	429d      	cmp	r5, r3
   d7daa:	d021      	beq.n	d7df0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d7dac:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   d7db0:	4658      	mov	r0, fp
   d7db2:	f109 0114 	add.w	r1, r9, #20
   d7db6:	f7ff f8cc 	bl	d6f52 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d7dba:	b1b8      	cbz	r0, d7dec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d7dbc:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d7dc0:	4650      	mov	r0, sl
   d7dc2:	f7ff f8c6 	bl	d6f52 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d7dc6:	b188      	cbz	r0, d7dec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d7dc8:	6823      	ldr	r3, [r4, #0]
   d7dca:	f8d9 2000 	ldr.w	r2, [r9]
   d7dce:	4053      	eors	r3, r2
   d7dd0:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d7dd4:	d10a      	bne.n	d7dec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d7dd6:	2220      	movs	r2, #32
   d7dd8:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d7ddc:	4a5e      	ldr	r2, [pc, #376]	; (d7f58 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d7dde:	9200      	str	r2, [sp, #0]
   d7de0:	aa15      	add	r2, sp, #84	; 0x54
   d7de2:	495e      	ldr	r1, [pc, #376]	; (d7f5c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d7de4:	2032      	movs	r0, #50	; 0x32
   d7de6:	f7fe f941 	bl	d606c <log_message>
   d7dea:	e7c7      	b.n	d7d7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d7dec:	3508      	adds	r5, #8
   d7dee:	e7da      	b.n	d7da6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d7df0:	4650      	mov	r0, sl
   d7df2:	f7ff f879 	bl	d6ee8 <_ZNK8particle7BleUuid7isValidEv>
   d7df6:	b960      	cbnz	r0, d7e12 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   d7df8:	4959      	ldr	r1, [pc, #356]	; (d7f60 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   d7dfa:	2201      	movs	r2, #1
   d7dfc:	a815      	add	r0, sp, #84	; 0x54
   d7dfe:	ad15      	add	r5, sp, #84	; 0x54
   d7e00:	f7ff f849 	bl	d6e96 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d7e04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7e06:	46d4      	mov	ip, sl
   d7e08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d7e0c:	682b      	ldr	r3, [r5, #0]
   d7e0e:	f8cc 3000 	str.w	r3, [ip]
   d7e12:	6833      	ldr	r3, [r6, #0]
   d7e14:	e9d3 5300 	ldrd	r5, r3, [r3]
   d7e18:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d7e1c:	455d      	cmp	r5, fp
   d7e1e:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   d7e20:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   d7e22:	d06e      	beq.n	d7f02 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d7e24:	f855 0b08 	ldr.w	r0, [r5], #8
   d7e28:	f7ff f893 	bl	d6f52 <_ZNK8particle7BleUuideqERKS0_>
   d7e2c:	2800      	cmp	r0, #0
   d7e2e:	d0f5      	beq.n	d7e1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   d7e30:	f104 0a14 	add.w	sl, r4, #20
   d7e34:	4650      	mov	r0, sl
   d7e36:	f7ff f857 	bl	d6ee8 <_ZNK8particle7BleUuid7isValidEv>
   d7e3a:	b988      	cbnz	r0, d7e60 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   d7e3c:	4b49      	ldr	r3, [pc, #292]	; (d7f64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d7e3e:	4948      	ldr	r1, [pc, #288]	; (d7f60 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   d7e40:	881a      	ldrh	r2, [r3, #0]
   d7e42:	3201      	adds	r2, #1
   d7e44:	b292      	uxth	r2, r2
   d7e46:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d7e48:	a815      	add	r0, sp, #84	; 0x54
   d7e4a:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   d7e4c:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d7e4e:	f7ff f841 	bl	d6ed4 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d7e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7e54:	46d4      	mov	ip, sl
   d7e56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d7e5a:	682b      	ldr	r3, [r5, #0]
   d7e5c:	f8cc 3000 	str.w	r3, [ip]
    hal_ble_char_init_t charInit = {};
   d7e60:	2228      	movs	r2, #40	; 0x28
   d7e62:	2100      	movs	r1, #0
   d7e64:	a816      	add	r0, sp, #88	; 0x58
   d7e66:	f002 f9ad 	bl	da1c4 <memset>
    charInit.version = BLE_API_VERSION;
   d7e6a:	4b3f      	ldr	r3, [pc, #252]	; (d7f68 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d7e6c:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d7e6e:	4651      	mov	r1, sl
   d7e70:	a804      	add	r0, sp, #16
   d7e72:	f7ff f84b 	bl	d6f0c <_ZN8particle7BleUuid7halUUIDEv>
   d7e76:	ab04      	add	r3, sp, #16
   d7e78:	aa18      	add	r2, sp, #96	; 0x60
   d7e7a:	f10d 0c20 	add.w	ip, sp, #32
   d7e7e:	6818      	ldr	r0, [r3, #0]
   d7e80:	6859      	ldr	r1, [r3, #4]
   d7e82:	4615      	mov	r5, r2
   d7e84:	c503      	stmia	r5!, {r0, r1}
   d7e86:	3308      	adds	r3, #8
   d7e88:	4563      	cmp	r3, ip
   d7e8a:	462a      	mov	r2, r5
   d7e8c:	d1f7      	bne.n	d7e7e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   d7e8e:	6818      	ldr	r0, [r3, #0]
   d7e90:	6028      	str	r0, [r5, #0]
    charInit.properties = charImpl->properties().value();
   d7e92:	7923      	ldrb	r3, [r4, #4]
   d7e94:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d7e98:	f8d9 3000 	ldr.w	r3, [r9]
   d7e9c:	8a9b      	ldrh	r3, [r3, #20]
   d7e9e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d7ea2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7ea4:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d7ea6:	4b31      	ldr	r3, [pc, #196]	; (d7f6c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d7ea8:	2200      	movs	r2, #0
   d7eaa:	1da1      	adds	r1, r4, #6
   d7eac:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d7eae:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d7eb2:	f7fd ff13 	bl	d5cdc <hal_ble_gatt_server_add_characteristic>
   d7eb6:	2800      	cmp	r0, #0
   d7eb8:	f47f af60 	bne.w	d7d7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   d7ebc:	2301      	movs	r3, #1
   d7ebe:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d7ec0:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d7ec2:	4639      	mov	r1, r7
        return characteristics_;
   d7ec4:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d7ec6:	a80d      	add	r0, sp, #52	; 0x34
   d7ec8:	f7ff fb19 	bl	d74fe <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7ecc:	4620      	mov	r0, r4
   d7ece:	a90d      	add	r1, sp, #52	; 0x34
   d7ed0:	f7ff ff1b 	bl	d7d0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d7ed4:	4604      	mov	r4, r0
   d7ed6:	a80e      	add	r0, sp, #56	; 0x38
   d7ed8:	f7ff fb33 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7edc:	2c00      	cmp	r4, #0
   d7ede:	f47f af4d 	bne.w	d7d7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d7ee2:	2320      	movs	r3, #32
   d7ee4:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d7ee8:	4b21      	ldr	r3, [pc, #132]	; (d7f70 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   d7eea:	9300      	str	r3, [sp, #0]
   d7eec:	aa0d      	add	r2, sp, #52	; 0x34
   d7eee:	4623      	mov	r3, r4
   d7ef0:	e777      	b.n	d7de2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d7ef2:	4639      	mov	r1, r7
   d7ef4:	4640      	mov	r0, r8
   d7ef6:	f7ff fb02 	bl	d74fe <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7efa:	a80c      	add	r0, sp, #48	; 0x30
   d7efc:	f7ff fb21 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7f00:	e740      	b.n	d7d84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d7f02:	a80b      	add	r0, sp, #44	; 0x2c
   d7f04:	f7ff f994 	bl	d7230 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d7f08:	4651      	mov	r1, sl
   d7f0a:	a815      	add	r0, sp, #84	; 0x54
   d7f0c:	f7fe fffe 	bl	d6f0c <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d7f10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d7f12:	2300      	movs	r3, #0
   d7f14:	3214      	adds	r2, #20
   d7f16:	a915      	add	r1, sp, #84	; 0x54
   d7f18:	2001      	movs	r0, #1
   d7f1a:	f7fd fead 	bl	d5c78 <hal_ble_gatt_server_add_service>
   d7f1e:	2800      	cmp	r0, #0
   d7f20:	d1e7      	bne.n	d7ef2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   d7f22:	6835      	ldr	r5, [r6, #0]
   d7f24:	a90b      	add	r1, sp, #44	; 0x2c
   d7f26:	a80d      	add	r0, sp, #52	; 0x34
   d7f28:	f7ff faf7 	bl	d751a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d7f2c:	4628      	mov	r0, r5
   d7f2e:	a90d      	add	r1, sp, #52	; 0x34
   d7f30:	f7ff fe7c 	bl	d7c2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d7f34:	4605      	mov	r5, r0
   d7f36:	a80e      	add	r0, sp, #56	; 0x38
   d7f38:	f7ff fb03 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7f3c:	2d00      	cmp	r5, #0
   d7f3e:	d0d8      	beq.n	d7ef2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   d7f40:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   d7f42:	6853      	ldr	r3, [r2, #4]
   d7f44:	6812      	ldr	r2, [r2, #0]
   d7f46:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d7f4a:	3b01      	subs	r3, #1
   d7f4c:	a80c      	add	r0, sp, #48	; 0x30
   d7f4e:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d7f52:	f7ff faf6 	bl	d7542 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7f56:	e76b      	b.n	d7e30 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   d7f58:	000dab0b 	.word	0x000dab0b
   d7f5c:	000daa6a 	.word	0x000daa6a
   d7f60:	000dabcc 	.word	0x000dabcc
   d7f64:	2003e658 	.word	0x2003e658
   d7f68:	002c0001 	.word	0x002c0001
   d7f6c:	000d73c1 	.word	0x000d73c1
   d7f70:	000dab36 	.word	0x000dab36

000d7f74 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d7f74:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d7f76:	4c06      	ldr	r4, [pc, #24]	; (d7f90 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7f78:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7f7a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7f7c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d7f7e:	f7fd fed5 	bl	d5d2c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d7f82:	4620      	mov	r0, r4
   d7f84:	4a03      	ldr	r2, [pc, #12]	; (d7f94 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7f86:	4904      	ldr	r1, [pc, #16]	; (d7f98 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7f8c:	f001 b92a 	b.w	d91e4 <__aeabi_atexit>
   d7f90:	2003e65c 	.word	0x2003e65c
   d7f94:	2003df68 	.word	0x2003df68
   d7f98:	000d6be7 	.word	0x000d6be7

000d7f9c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7f9e:	4606      	mov	r6, r0
   d7fa0:	460d      	mov	r5, r1
  size_t n = 0;
   d7fa2:	188f      	adds	r7, r1, r2
   d7fa4:	2400      	movs	r4, #0
  while (size--) {
   d7fa6:	42bd      	cmp	r5, r7
   d7fa8:	d00c      	beq.n	d7fc4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7faa:	6833      	ldr	r3, [r6, #0]
   d7fac:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7fb0:	689b      	ldr	r3, [r3, #8]
   d7fb2:	4630      	mov	r0, r6
   d7fb4:	4798      	blx	r3
     if (chunk>=0)
   d7fb6:	1e03      	subs	r3, r0, #0
   d7fb8:	db01      	blt.n	d7fbe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7fba:	441c      	add	r4, r3
  while (size--) {
   d7fbc:	e7f3      	b.n	d7fa6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7fbe:	2c00      	cmp	r4, #0
   d7fc0:	bf08      	it	eq
   d7fc2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7fc4:	4620      	mov	r0, r4
   d7fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7fc8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7fc8:	b513      	push	{r0, r1, r4, lr}
   d7fca:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d7fcc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7fce:	b159      	cbz	r1, d7fe8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7fd0:	9101      	str	r1, [sp, #4]
   d7fd2:	f002 f935 	bl	da240 <strlen>
   d7fd6:	6823      	ldr	r3, [r4, #0]
   d7fd8:	9901      	ldr	r1, [sp, #4]
   d7fda:	68db      	ldr	r3, [r3, #12]
   d7fdc:	4602      	mov	r2, r0
   d7fde:	4620      	mov	r0, r4
    }
   d7fe0:	b002      	add	sp, #8
   d7fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7fe6:	4718      	bx	r3
    }
   d7fe8:	b002      	add	sp, #8
   d7fea:	bd10      	pop	{r4, pc}

000d7fec <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d7fec:	b508      	push	{r3, lr}
  return write(str);
   d7fee:	f7ff ffeb 	bl	d7fc8 <_ZN5Print5writeEPKc>
}
   d7ff2:	bd08      	pop	{r3, pc}

000d7ff4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7ff4:	6803      	ldr	r3, [r0, #0]
   d7ff6:	689b      	ldr	r3, [r3, #8]
   d7ff8:	4718      	bx	r3

000d7ffa <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   d7ffa:	680a      	ldr	r2, [r1, #0]
 {
   d7ffc:	460b      	mov	r3, r1
   return x.printTo(*this);
   d7ffe:	6812      	ldr	r2, [r2, #0]
   d8000:	4601      	mov	r1, r0
   d8002:	4618      	mov	r0, r3
   d8004:	4710      	bx	r2

000d8006 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8006:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8008:	210d      	movs	r1, #13
{
   d800a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d800c:	f7ff fff2 	bl	d7ff4 <_ZN5Print5printEc>
  n += print('\n');
   d8010:	210a      	movs	r1, #10
  size_t n = print('\r');
   d8012:	4604      	mov	r4, r0
  n += print('\n');
   d8014:	4628      	mov	r0, r5
   d8016:	f7ff ffed 	bl	d7ff4 <_ZN5Print5printEc>
  return n;
}
   d801a:	4420      	add	r0, r4
   d801c:	bd38      	pop	{r3, r4, r5, pc}

000d801e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d801e:	b538      	push	{r3, r4, r5, lr}
   d8020:	4605      	mov	r5, r0
  return write(str);
   d8022:	f7ff ffd1 	bl	d7fc8 <_ZN5Print5writeEPKc>
   d8026:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d8028:	4628      	mov	r0, r5
   d802a:	f7ff ffec 	bl	d8006 <_ZN5Print7printlnEv>
  return n;
}
   d802e:	4420      	add	r0, r4
   d8030:	bd38      	pop	{r3, r4, r5, pc}

000d8032 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d8032:	b530      	push	{r4, r5, lr}
   d8034:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8036:	2300      	movs	r3, #0
   d8038:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d803c:	2a01      	cmp	r2, #1
   d803e:	bf98      	it	ls
   d8040:	220a      	movls	r2, #10
   d8042:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d8044:	460d      	mov	r5, r1
   d8046:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d804a:	fb01 5312 	mls	r3, r1, r2, r5
   d804e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8052:	2b09      	cmp	r3, #9
   d8054:	bf94      	ite	ls
   d8056:	3330      	addls	r3, #48	; 0x30
   d8058:	3337      	addhi	r3, #55	; 0x37
   d805a:	b2db      	uxtb	r3, r3
  } while(n);
   d805c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d805e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d8062:	d9ef      	bls.n	d8044 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d8064:	4621      	mov	r1, r4
   d8066:	f7ff ffaf 	bl	d7fc8 <_ZN5Print5writeEPKc>
}
   d806a:	b00b      	add	sp, #44	; 0x2c
   d806c:	bd30      	pop	{r4, r5, pc}
	...

000d8070 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d8070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8074:	ec55 4b10 	vmov	r4, r5, d0
   d8078:	4606      	mov	r6, r0
   d807a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d807c:	ee10 2a10 	vmov	r2, s0
   d8080:	ee10 0a10 	vmov	r0, s0
   d8084:	462b      	mov	r3, r5
   d8086:	4629      	mov	r1, r5
   d8088:	f001 fe48 	bl	d9d1c <__aeabi_dcmpun>
   d808c:	b140      	cbz	r0, d80a0 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d808e:	4953      	ldr	r1, [pc, #332]	; (d81dc <_ZN5Print10printFloatEdh+0x16c>)
   d8090:	4630      	mov	r0, r6
   d8092:	f7ff ff99 	bl	d7fc8 <_ZN5Print5writeEPKc>
   d8096:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d8098:	4650      	mov	r0, sl
   d809a:	b003      	add	sp, #12
   d809c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  { return __builtin_isinf(__x); }
   d80a0:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d80a4:	4b4e      	ldr	r3, [pc, #312]	; (d81e0 <_ZN5Print10printFloatEdh+0x170>)
   d80a6:	f04f 32ff 	mov.w	r2, #4294967295
   d80aa:	4620      	mov	r0, r4
   d80ac:	4649      	mov	r1, r9
   d80ae:	f001 fe35 	bl	d9d1c <__aeabi_dcmpun>
   d80b2:	b948      	cbnz	r0, d80c8 <_ZN5Print10printFloatEdh+0x58>
   d80b4:	4b4a      	ldr	r3, [pc, #296]	; (d81e0 <_ZN5Print10printFloatEdh+0x170>)
   d80b6:	f04f 32ff 	mov.w	r2, #4294967295
   d80ba:	4620      	mov	r0, r4
   d80bc:	4649      	mov	r1, r9
   d80be:	f001 fe0f 	bl	d9ce0 <__aeabi_dcmple>
   d80c2:	b908      	cbnz	r0, d80c8 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d80c4:	4947      	ldr	r1, [pc, #284]	; (d81e4 <_ZN5Print10printFloatEdh+0x174>)
   d80c6:	e7e3      	b.n	d8090 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d80c8:	4b47      	ldr	r3, [pc, #284]	; (d81e8 <_ZN5Print10printFloatEdh+0x178>)
   d80ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d80ce:	4620      	mov	r0, r4
   d80d0:	4629      	mov	r1, r5
   d80d2:	f001 fe19 	bl	d9d08 <__aeabi_dcmpgt>
   d80d6:	b108      	cbz	r0, d80dc <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d80d8:	4944      	ldr	r1, [pc, #272]	; (d81ec <_ZN5Print10printFloatEdh+0x17c>)
   d80da:	e7d9      	b.n	d8090 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d80dc:	4b44      	ldr	r3, [pc, #272]	; (d81f0 <_ZN5Print10printFloatEdh+0x180>)
   d80de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d80e2:	4620      	mov	r0, r4
   d80e4:	4629      	mov	r1, r5
   d80e6:	f001 fdf1 	bl	d9ccc <__aeabi_dcmplt>
   d80ea:	2800      	cmp	r0, #0
   d80ec:	d1f4      	bne.n	d80d8 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d80ee:	2200      	movs	r2, #0
   d80f0:	2300      	movs	r3, #0
   d80f2:	4620      	mov	r0, r4
   d80f4:	4629      	mov	r1, r5
   d80f6:	f001 fde9 	bl	d9ccc <__aeabi_dcmplt>
   d80fa:	b1d0      	cbz	r0, d8132 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d80fc:	212d      	movs	r1, #45	; 0x2d
   d80fe:	4630      	mov	r0, r6
   d8100:	f7ff ff78 	bl	d7ff4 <_ZN5Print5printEc>
     number = -number;
   d8104:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d8108:	4682      	mov	sl, r0
     number = -number;
   d810a:	461d      	mov	r5, r3
  double rounding = 0.5;
   d810c:	4939      	ldr	r1, [pc, #228]	; (d81f4 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d810e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d81fc <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d8112:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d8116:	2000      	movs	r0, #0
    rounding /= 10.0;
   d8118:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d811c:	fa5f f38b 	uxtb.w	r3, fp
   d8120:	429f      	cmp	r7, r3
   d8122:	d908      	bls.n	d8136 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d8124:	4642      	mov	r2, r8
   d8126:	464b      	mov	r3, r9
   d8128:	f001 fc88 	bl	d9a3c <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d812c:	f10b 0b01 	add.w	fp, fp, #1
   d8130:	e7f4      	b.n	d811c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d8132:	4682      	mov	sl, r0
   d8134:	e7ea      	b.n	d810c <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d8136:	4622      	mov	r2, r4
   d8138:	462b      	mov	r3, r5
   d813a:	f001 f99f 	bl	d947c <__adddf3>
   d813e:	460d      	mov	r5, r1
   d8140:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d8142:	f001 fe29 	bl	d9d98 <__aeabi_d2uiz>
   d8146:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d8148:	f001 fad4 	bl	d96f4 <__aeabi_ui2d>
   d814c:	4602      	mov	r2, r0
   d814e:	460b      	mov	r3, r1
   d8150:	4620      	mov	r0, r4
   d8152:	4629      	mov	r1, r5
   d8154:	f001 f990 	bl	d9478 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d8158:	220a      	movs	r2, #10
   d815a:	4604      	mov	r4, r0
   d815c:	460d      	mov	r5, r1
   d815e:	4630      	mov	r0, r6
   d8160:	4641      	mov	r1, r8
   d8162:	f7ff ff66 	bl	d8032 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d8166:	4482      	add	sl, r0
  if (digits > 0) {
   d8168:	b127      	cbz	r7, d8174 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d816a:	4923      	ldr	r1, [pc, #140]	; (d81f8 <_ZN5Print10printFloatEdh+0x188>)
   d816c:	4630      	mov	r0, r6
   d816e:	f7ff ff2b 	bl	d7fc8 <_ZN5Print5writeEPKc>
    n += print(".");
   d8172:	4482      	add	sl, r0
    remainder *= 10.0;
   d8174:	f8df 9084 	ldr.w	r9, [pc, #132]	; d81fc <_ZN5Print10printFloatEdh+0x18c>
   d8178:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d817c:	3f01      	subs	r7, #1
   d817e:	b2ff      	uxtb	r7, r7
   d8180:	2fff      	cmp	r7, #255	; 0xff
   d8182:	d089      	beq.n	d8098 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d8184:	4642      	mov	r2, r8
   d8186:	464b      	mov	r3, r9
   d8188:	4620      	mov	r0, r4
   d818a:	4629      	mov	r1, r5
   d818c:	f001 fb2c 	bl	d97e8 <__aeabi_dmul>
   d8190:	4604      	mov	r4, r0
   d8192:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d8194:	f001 fdd8 	bl	d9d48 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d8198:	f1b0 0b00 	subs.w	fp, r0, #0
   d819c:	da1a      	bge.n	d81d4 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d819e:	212d      	movs	r1, #45	; 0x2d
   d81a0:	4630      	mov	r0, r6
   d81a2:	f7ff ff27 	bl	d7ff4 <_ZN5Print5printEc>
            val = -n;
   d81a6:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d81aa:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d81ac:	220a      	movs	r2, #10
   d81ae:	4630      	mov	r0, r6
   d81b0:	9301      	str	r3, [sp, #4]
   d81b2:	f7ff ff3e 	bl	d8032 <_ZN5Print11printNumberEmh>
   d81b6:	9b01      	ldr	r3, [sp, #4]
   d81b8:	4418      	add	r0, r3
    n += print(toPrint);
   d81ba:	4482      	add	sl, r0
    remainder -= toPrint;
   d81bc:	4658      	mov	r0, fp
   d81be:	f001 faa9 	bl	d9714 <__aeabi_i2d>
   d81c2:	4602      	mov	r2, r0
   d81c4:	460b      	mov	r3, r1
   d81c6:	4620      	mov	r0, r4
   d81c8:	4629      	mov	r1, r5
   d81ca:	f001 f955 	bl	d9478 <__aeabi_dsub>
   d81ce:	4604      	mov	r4, r0
   d81d0:	460d      	mov	r5, r1
  while (digits-- > 0)
   d81d2:	e7d3      	b.n	d817c <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d81d4:	4659      	mov	r1, fp
        size_t t = 0;
   d81d6:	2300      	movs	r3, #0
   d81d8:	e7e8      	b.n	d81ac <_ZN5Print10printFloatEdh+0x13c>
   d81da:	bf00      	nop
   d81dc:	000dabec 	.word	0x000dabec
   d81e0:	7fefffff 	.word	0x7fefffff
   d81e4:	000dabf0 	.word	0x000dabf0
   d81e8:	41efffff 	.word	0x41efffff
   d81ec:	000dabf4 	.word	0x000dabf4
   d81f0:	c1efffff 	.word	0xc1efffff
   d81f4:	3fe00000 	.word	0x3fe00000
   d81f8:	000da980 	.word	0x000da980
   d81fc:	40240000 	.word	0x40240000

000d8200 <_ZN5Print7printlnEdi>:
{
   d8200:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d8202:	b2c9      	uxtb	r1, r1
{
   d8204:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d8206:	f7ff ff33 	bl	d8070 <_ZN5Print10printFloatEdh>
   d820a:	4604      	mov	r4, r0
  n += println();
   d820c:	4628      	mov	r0, r5
   d820e:	f7ff fefa 	bl	d8006 <_ZN5Print7printlnEv>
}
   d8212:	4420      	add	r0, r4
   d8214:	bd38      	pop	{r3, r4, r5, pc}

000d8216 <_ZN5Print7printlnEfi>:
{
   d8216:	b538      	push	{r3, r4, r5, lr}
   d8218:	4604      	mov	r4, r0
   d821a:	ee10 0a10 	vmov	r0, s0
   d821e:	460d      	mov	r5, r1
    return println((double)num, digits);
   d8220:	f001 fa8a 	bl	d9738 <__aeabi_f2d>
   d8224:	ec41 0b10 	vmov	d0, r0, r1
   d8228:	4629      	mov	r1, r5
   d822a:	4620      	mov	r0, r4
}
   d822c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d8230:	f7ff bfe6 	b.w	d8200 <_ZN5Print7printlnEdi>

000d8234 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8234:	4b01      	ldr	r3, [pc, #4]	; (d823c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8236:	4a02      	ldr	r2, [pc, #8]	; (d8240 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8238:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d823a:	4770      	bx	lr
   d823c:	2003e664 	.word	0x2003e664
   d8240:	000dabf8 	.word	0x000dabf8

000d8244 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d8244:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8246:	2000      	movs	r0, #0
   d8248:	f7fd fff6 	bl	d6238 <spark_sync_time_pending>
   d824c:	b128      	cbz	r0, d825a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d824e:	f7fd ffe3 	bl	d6218 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8252:	f080 0001 	eor.w	r0, r0, #1
   d8256:	b2c0      	uxtb	r0, r0
    }
   d8258:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d825a:	2001      	movs	r0, #1
   d825c:	e7fc      	b.n	d8258 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d825e <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d825e:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d8260:	2000      	movs	r0, #0
   d8262:	f7fd fcc7 	bl	d5bf4 <hal_rtc_time_is_valid>
    if (rtcstate)
   d8266:	4604      	mov	r4, r0
   d8268:	b9a0      	cbnz	r0, d8294 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d826a:	f7fd ff07 	bl	d607c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d826e:	2801      	cmp	r0, #1
   d8270:	d110      	bne.n	d8294 <_ZN9TimeClass7isValidEv+0x36>
   d8272:	4620      	mov	r0, r4
   d8274:	f7fd ff22 	bl	d60bc <system_thread_get_state>
   d8278:	b960      	cbnz	r0, d8294 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d827a:	f7ff ffe3 	bl	d8244 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d827e:	b910      	cbnz	r0, d8286 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d8280:	f7fd ffba 	bl	d61f8 <spark_process>
        while (_while() && !_condition()) {
   d8284:	e7f9      	b.n	d827a <_ZN9TimeClass7isValidEv+0x1c>
   d8286:	f7ff ffdd 	bl	d8244 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d828a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d828e:	2000      	movs	r0, #0
   d8290:	f7fd bcb0 	b.w	d5bf4 <hal_rtc_time_is_valid>
}
   d8294:	4620      	mov	r0, r4
   d8296:	bd10      	pop	{r4, pc}

000d8298 <_ZN9TimeClass3nowEv>:
{
   d8298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d829a:	f7ff ffe0 	bl	d825e <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d829e:	2210      	movs	r2, #16
   d82a0:	2100      	movs	r1, #0
   d82a2:	4668      	mov	r0, sp
   d82a4:	f001 ff8e 	bl	da1c4 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d82a8:	2100      	movs	r1, #0
   d82aa:	4668      	mov	r0, sp
   d82ac:	f7fd fcaa 	bl	d5c04 <hal_rtc_get_time>
}
   d82b0:	9800      	ldr	r0, [sp, #0]
   d82b2:	b005      	add	sp, #20
   d82b4:	f85d fb04 	ldr.w	pc, [sp], #4

000d82b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d82b8:	4b02      	ldr	r3, [pc, #8]	; (d82c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d82ba:	681a      	ldr	r2, [r3, #0]
   d82bc:	4b02      	ldr	r3, [pc, #8]	; (d82c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d82be:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d82c0:	4770      	bx	lr
   d82c2:	bf00      	nop
   d82c4:	2003df00 	.word	0x2003df00
   d82c8:	2003e668 	.word	0x2003e668

000d82cc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d82cc:	2100      	movs	r1, #0
   d82ce:	f7fd bee5 	b.w	d609c <system_delay_ms>

000d82d2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d82d2:	b510      	push	{r4, lr}
   d82d4:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d82d6:	f7fe fd5b 	bl	d6d90 <_ZNSt14_Function_baseD1Ev>
   d82da:	4620      	mov	r0, r4
   d82dc:	bd10      	pop	{r4, pc}
	...

000d82e0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d82e0:	4803      	ldr	r0, [pc, #12]	; (d82f0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d82e2:	4a04      	ldr	r2, [pc, #16]	; (d82f4 <_GLOBAL__sub_I_RGB+0x14>)
   d82e4:	4904      	ldr	r1, [pc, #16]	; (d82f8 <_GLOBAL__sub_I_RGB+0x18>)
   d82e6:	2300      	movs	r3, #0
   d82e8:	6083      	str	r3, [r0, #8]
   d82ea:	f000 bf7b 	b.w	d91e4 <__aeabi_atexit>
   d82ee:	bf00      	nop
   d82f0:	2003e66c 	.word	0x2003e66c
   d82f4:	2003df68 	.word	0x2003df68
   d82f8:	000d82d3 	.word	0x000d82d3

000d82fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d82fc:	4b01      	ldr	r3, [pc, #4]	; (d8304 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d82fe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d8300:	4770      	bx	lr
   d8302:	bf00      	nop
   d8304:	2003df04 	.word	0x2003df04

000d8308 <serialEventRun>:
{
   d8308:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d830a:	4b0b      	ldr	r3, [pc, #44]	; (d8338 <serialEventRun+0x30>)
   d830c:	b143      	cbz	r3, d8320 <serialEventRun+0x18>
   d830e:	f000 f985 	bl	d861c <_Z16_fetch_usbserialv>
   d8312:	6803      	ldr	r3, [r0, #0]
   d8314:	691b      	ldr	r3, [r3, #16]
   d8316:	4798      	blx	r3
   d8318:	2800      	cmp	r0, #0
   d831a:	dd01      	ble.n	d8320 <serialEventRun+0x18>
        serialEvent();
   d831c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d8320:	4b06      	ldr	r3, [pc, #24]	; (d833c <serialEventRun+0x34>)
   d8322:	b143      	cbz	r3, d8336 <serialEventRun+0x2e>
   d8324:	f000 f9f8 	bl	d8718 <_Z22__fetch_global_Serial1v>
   d8328:	6803      	ldr	r3, [r0, #0]
   d832a:	691b      	ldr	r3, [r3, #16]
   d832c:	4798      	blx	r3
   d832e:	2800      	cmp	r0, #0
   d8330:	dd01      	ble.n	d8336 <serialEventRun+0x2e>
        serialEvent1();
   d8332:	f3af 8000 	nop.w
}
   d8336:	bd08      	pop	{r3, pc}
	...

000d8340 <_post_loop>:
{
   d8340:	b508      	push	{r3, lr}
	serialEventRun();
   d8342:	f7ff ffe1 	bl	d8308 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8346:	f7fd fc35 	bl	d5bb4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d834a:	4b01      	ldr	r3, [pc, #4]	; (d8350 <_post_loop+0x10>)
   d834c:	6018      	str	r0, [r3, #0]
}
   d834e:	bd08      	pop	{r3, pc}
   d8350:	2003e7cc 	.word	0x2003e7cc

000d8354 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8354:	4802      	ldr	r0, [pc, #8]	; (d8360 <_Z33system_initialize_user_backup_ramv+0xc>)
   d8356:	4a03      	ldr	r2, [pc, #12]	; (d8364 <_Z33system_initialize_user_backup_ramv+0x10>)
   d8358:	4903      	ldr	r1, [pc, #12]	; (d8368 <_Z33system_initialize_user_backup_ramv+0x14>)
   d835a:	1a12      	subs	r2, r2, r0
   d835c:	f001 bf0a 	b.w	da174 <memcpy>
   d8360:	2003f400 	.word	0x2003f400
   d8364:	2003f404 	.word	0x2003f404
   d8368:	000dafc8 	.word	0x000dafc8

000d836c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d836c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d836e:	2300      	movs	r3, #0
   d8370:	9300      	str	r3, [sp, #0]
   d8372:	461a      	mov	r2, r3
   d8374:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8378:	f7fd feb2 	bl	d60e0 <system_ctrl_set_result>
}
   d837c:	b003      	add	sp, #12
   d837e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8384 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d8384:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8386:	8843      	ldrh	r3, [r0, #2]
   d8388:	2b0a      	cmp	r3, #10
   d838a:	d008      	beq.n	d839e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d838c:	2b50      	cmp	r3, #80	; 0x50
   d838e:	d10b      	bne.n	d83a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d8390:	4b09      	ldr	r3, [pc, #36]	; (d83b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8392:	681b      	ldr	r3, [r3, #0]
   d8394:	b14b      	cbz	r3, d83aa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d8396:	b003      	add	sp, #12
   d8398:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d839c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d839e:	f7ff ffe5 	bl	d836c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d83a2:	b003      	add	sp, #12
   d83a4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d83a8:	2300      	movs	r3, #0
   d83aa:	9300      	str	r3, [sp, #0]
   d83ac:	461a      	mov	r2, r3
   d83ae:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d83b2:	f7fd fe95 	bl	d60e0 <system_ctrl_set_result>
}
   d83b6:	e7f4      	b.n	d83a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d83b8:	2003e680 	.word	0x2003e680

000d83bc <module_user_init_hook>:
{
   d83bc:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d83be:	4c12      	ldr	r4, [pc, #72]	; (d8408 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d83c0:	4812      	ldr	r0, [pc, #72]	; (d840c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d83c2:	4d13      	ldr	r5, [pc, #76]	; (d8410 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d83c4:	2100      	movs	r1, #0
   d83c6:	f7fd ff7f 	bl	d62c8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d83ca:	6823      	ldr	r3, [r4, #0]
   d83cc:	42ab      	cmp	r3, r5
   d83ce:	4b11      	ldr	r3, [pc, #68]	; (d8414 <module_user_init_hook+0x58>)
   d83d0:	bf0c      	ite	eq
   d83d2:	2201      	moveq	r2, #1
   d83d4:	2200      	movne	r2, #0
   d83d6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d83d8:	d002      	beq.n	d83e0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d83da:	f7ff ffbb 	bl	d8354 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d83de:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d83e0:	f7fd fbd8 	bl	d5b94 <HAL_RNG_GetRandomNumber>
   d83e4:	4604      	mov	r4, r0
    srand(seed);
   d83e6:	f001 fef5 	bl	da1d4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d83ea:	4b0b      	ldr	r3, [pc, #44]	; (d8418 <module_user_init_hook+0x5c>)
   d83ec:	b113      	cbz	r3, d83f4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d83ee:	4620      	mov	r0, r4
   d83f0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d83f4:	2100      	movs	r1, #0
   d83f6:	4808      	ldr	r0, [pc, #32]	; (d8418 <module_user_init_hook+0x5c>)
   d83f8:	f7fd ff2e 	bl	d6258 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d83fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8400:	4806      	ldr	r0, [pc, #24]	; (d841c <module_user_init_hook+0x60>)
   d8402:	2100      	movs	r1, #0
   d8404:	f7fd be62 	b.w	d60cc <system_ctrl_set_app_request_handler>
   d8408:	2003f400 	.word	0x2003f400
   d840c:	000d82fd 	.word	0x000d82fd
   d8410:	9a271c1e 	.word	0x9a271c1e
   d8414:	2003e67c 	.word	0x2003e67c
   d8418:	00000000 	.word	0x00000000
   d841c:	000d8385 	.word	0x000d8385

000d8420 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d8420:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d8422:	2308      	movs	r3, #8
   d8424:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d8428:	6803      	ldr	r3, [r0, #0]
   d842a:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d842e:	7a03      	ldrb	r3, [r0, #8]
   d8430:	f88d 3003 	strb.w	r3, [sp, #3]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d8434:	2100      	movs	r1, #0
    opts.timeout = timeout_;
   d8436:	6843      	ldr	r3, [r0, #4]
   d8438:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d843a:	4668      	mov	r0, sp
   d843c:	f7fd ff14 	bl	d6268 <spark_cloud_disconnect>
}
   d8440:	b003      	add	sp, #12
   d8442:	f85d fb04 	ldr.w	pc, [sp], #4

000d8446 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d8446:	4770      	bx	lr

000d8448 <_ZN9IPAddressD0Ev>:
   d8448:	b510      	push	{r4, lr}
   d844a:	2118      	movs	r1, #24
   d844c:	4604      	mov	r4, r0
   d844e:	f000 fece 	bl	d91ee <_ZdlPvj>
   d8452:	4620      	mov	r0, r4
   d8454:	bd10      	pop	{r4, pc}

000d8456 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8456:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8458:	7d03      	ldrb	r3, [r0, #20]
   d845a:	2b06      	cmp	r3, #6
{
   d845c:	b08d      	sub	sp, #52	; 0x34
   d845e:	460e      	mov	r6, r1
   d8460:	f100 0704 	add.w	r7, r0, #4
   d8464:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d8468:	d012      	beq.n	d8490 <_ZNK9IPAddress7printToER5Print+0x3a>
   d846a:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d846e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8472:	220a      	movs	r2, #10
   d8474:	4630      	mov	r0, r6
   d8476:	f7ff fddc 	bl	d8032 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d847a:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d847c:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d847e:	d019      	beq.n	d84b4 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d8480:	2c00      	cmp	r4, #0
   d8482:	d0f4      	beq.n	d846e <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d8484:	212e      	movs	r1, #46	; 0x2e
   d8486:	4630      	mov	r0, r6
   d8488:	f7ff fdb4 	bl	d7ff4 <_ZN5Print5printEc>
   d848c:	4404      	add	r4, r0
   d848e:	e7ee      	b.n	d846e <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8490:	232f      	movs	r3, #47	; 0x2f
   d8492:	466a      	mov	r2, sp
   d8494:	4639      	mov	r1, r7
   d8496:	200a      	movs	r0, #10
		buf[0] = 0;
   d8498:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d849c:	f7fd fc66 	bl	d5d6c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d84a0:	4668      	mov	r0, sp
   d84a2:	f001 fecd 	bl	da240 <strlen>
   d84a6:	6833      	ldr	r3, [r6, #0]
   d84a8:	4602      	mov	r2, r0
   d84aa:	68db      	ldr	r3, [r3, #12]
   d84ac:	4669      	mov	r1, sp
   d84ae:	4630      	mov	r0, r6
   d84b0:	4798      	blx	r3
   d84b2:	4604      	mov	r4, r0
    }
    return n;
}
   d84b4:	4620      	mov	r0, r4
   d84b6:	b00d      	add	sp, #52	; 0x34
   d84b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d84bc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d84bc:	b510      	push	{r4, lr}
   d84be:	4b05      	ldr	r3, [pc, #20]	; (d84d4 <_ZN9IPAddressC1Ev+0x18>)
   d84c0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d84c2:	2211      	movs	r2, #17
   d84c4:	f840 3b04 	str.w	r3, [r0], #4
   d84c8:	2100      	movs	r1, #0
   d84ca:	f001 fe7b 	bl	da1c4 <memset>
}
   d84ce:	4620      	mov	r0, r4
   d84d0:	bd10      	pop	{r4, pc}
   d84d2:	bf00      	nop
   d84d4:	000dac20 	.word	0x000dac20

000d84d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d84d8:	4603      	mov	r3, r0
   d84da:	4a07      	ldr	r2, [pc, #28]	; (d84f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d84dc:	b510      	push	{r4, lr}
   d84de:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d84e2:	f101 0210 	add.w	r2, r1, #16
   d84e6:	f851 4b04 	ldr.w	r4, [r1], #4
   d84ea:	f843 4b04 	str.w	r4, [r3], #4
   d84ee:	4291      	cmp	r1, r2
   d84f0:	d1f9      	bne.n	d84e6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d84f2:	780a      	ldrb	r2, [r1, #0]
   d84f4:	701a      	strb	r2, [r3, #0]
}
   d84f6:	bd10      	pop	{r4, pc}
   d84f8:	000dac20 	.word	0x000dac20

000d84fc <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d84fc:	7d03      	ldrb	r3, [r0, #20]
   d84fe:	2b04      	cmp	r3, #4
   d8500:	d104      	bne.n	d850c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d8502:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d8504:	3800      	subs	r0, #0
   d8506:	bf18      	it	ne
   d8508:	2001      	movne	r0, #1
   d850a:	4770      	bx	lr
    } else if (version() == 6) {
   d850c:	2b06      	cmp	r3, #6
   d850e:	d107      	bne.n	d8520 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d8510:	6843      	ldr	r3, [r0, #4]
   d8512:	b93b      	cbnz	r3, d8524 <_ZNK9IPAddresscvbEv+0x28>
   d8514:	6883      	ldr	r3, [r0, #8]
   d8516:	b92b      	cbnz	r3, d8524 <_ZNK9IPAddresscvbEv+0x28>
   d8518:	68c3      	ldr	r3, [r0, #12]
   d851a:	b91b      	cbnz	r3, d8524 <_ZNK9IPAddresscvbEv+0x28>
   d851c:	6900      	ldr	r0, [r0, #16]
   d851e:	e7f1      	b.n	d8504 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d8520:	2000      	movs	r0, #0
   d8522:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d8524:	2001      	movs	r0, #1
}
   d8526:	4770      	bx	lr

000d8528 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d8528:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d852a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d852e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8532:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8536:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d853a:	2304      	movs	r3, #4
   d853c:	6041      	str	r1, [r0, #4]
   d853e:	7503      	strb	r3, [r0, #20]
}
   d8540:	bd10      	pop	{r4, pc}
	...

000d8544 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d8544:	b513      	push	{r0, r1, r4, lr}
   d8546:	4b05      	ldr	r3, [pc, #20]	; (d855c <_ZN9IPAddressC1EPKh+0x18>)
   d8548:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d854a:	78cb      	ldrb	r3, [r1, #3]
   d854c:	9300      	str	r3, [sp, #0]
   d854e:	788b      	ldrb	r3, [r1, #2]
   d8550:	784a      	ldrb	r2, [r1, #1]
   d8552:	7809      	ldrb	r1, [r1, #0]
   d8554:	f7ff ffe8 	bl	d8528 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8558:	b002      	add	sp, #8
   d855a:	bd10      	pop	{r4, pc}
   d855c:	000dac20 	.word	0x000dac20

000d8560 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8560:	7441      	strb	r1, [r0, #17]
}
   d8562:	4770      	bx	lr

000d8564 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8564:	4770      	bx	lr

000d8566 <_ZN9USBSerial4readEv>:
{
   d8566:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8568:	2100      	movs	r1, #0
   d856a:	7c00      	ldrb	r0, [r0, #16]
   d856c:	f7fd fd56 	bl	d601c <HAL_USB_USART_Receive_Data>
}
   d8570:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8574:	bd08      	pop	{r3, pc}

000d8576 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d8576:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8578:	2101      	movs	r1, #1
   d857a:	7c00      	ldrb	r0, [r0, #16]
   d857c:	f7fd fd4e 	bl	d601c <HAL_USB_USART_Receive_Data>
}
   d8580:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8584:	bd08      	pop	{r3, pc}

000d8586 <_ZN9USBSerial17availableForWriteEv>:
{
   d8586:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8588:	7c00      	ldrb	r0, [r0, #16]
   d858a:	f7fd fd3f 	bl	d600c <HAL_USB_USART_Available_Data_For_Write>
}
   d858e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8592:	bd08      	pop	{r3, pc}

000d8594 <_ZN9USBSerial9availableEv>:
{
   d8594:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8596:	7c00      	ldrb	r0, [r0, #16]
   d8598:	f7fd fd30 	bl	d5ffc <HAL_USB_USART_Available_Data>
}
   d859c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d85a0:	bd08      	pop	{r3, pc}

000d85a2 <_ZN9USBSerial5writeEh>:
{
   d85a2:	b513      	push	{r0, r1, r4, lr}
   d85a4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d85a6:	7c00      	ldrb	r0, [r0, #16]
{
   d85a8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d85aa:	f7fd fd2f 	bl	d600c <HAL_USB_USART_Available_Data_For_Write>
   d85ae:	2800      	cmp	r0, #0
   d85b0:	9901      	ldr	r1, [sp, #4]
   d85b2:	dc01      	bgt.n	d85b8 <_ZN9USBSerial5writeEh+0x16>
   d85b4:	7c60      	ldrb	r0, [r4, #17]
   d85b6:	b120      	cbz	r0, d85c2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d85b8:	7c20      	ldrb	r0, [r4, #16]
   d85ba:	f7fd fd37 	bl	d602c <HAL_USB_USART_Send_Data>
   d85be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d85c2:	b002      	add	sp, #8
   d85c4:	bd10      	pop	{r4, pc}

000d85c6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d85c6:	7c00      	ldrb	r0, [r0, #16]
   d85c8:	f7fd bd38 	b.w	d603c <HAL_USB_USART_Flush_Data>

000d85cc <_ZN9USBSerialD0Ev>:
   d85cc:	b510      	push	{r4, lr}
   d85ce:	2114      	movs	r1, #20
   d85d0:	4604      	mov	r4, r0
   d85d2:	f000 fe0c 	bl	d91ee <_ZdlPvj>
   d85d6:	4620      	mov	r0, r4
   d85d8:	bd10      	pop	{r4, pc}
	...

000d85dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d85dc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d85de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d85e2:	4604      	mov	r4, r0
   d85e4:	4608      	mov	r0, r1
   d85e6:	2100      	movs	r1, #0
   d85e8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d85ec:	4b04      	ldr	r3, [pc, #16]	; (d8600 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d85ee:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d85f0:	2301      	movs	r3, #1
  _serial = serial;
   d85f2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d85f4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d85f6:	4611      	mov	r1, r2
   d85f8:	f7fd fcf0 	bl	d5fdc <HAL_USB_USART_Init>
}
   d85fc:	4620      	mov	r0, r4
   d85fe:	bd10      	pop	{r4, pc}
   d8600:	000dac34 	.word	0x000dac34

000d8604 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8604:	7c00      	ldrb	r0, [r0, #16]
   d8606:	2200      	movs	r2, #0
   d8608:	f7fd bcf0 	b.w	d5fec <HAL_USB_USART_Begin>

000d860c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d860c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d860e:	2214      	movs	r2, #20
{
   d8610:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8612:	2100      	movs	r1, #0
   d8614:	f001 fdd6 	bl	da1c4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8618:	4620      	mov	r0, r4
   d861a:	bd10      	pop	{r4, pc}

000d861c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d861c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d861e:	4c10      	ldr	r4, [pc, #64]	; (d8660 <_Z16_fetch_usbserialv+0x44>)
{
   d8620:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8622:	a803      	add	r0, sp, #12
   d8624:	f7ff fff2 	bl	d860c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8628:	7821      	ldrb	r1, [r4, #0]
   d862a:	f3bf 8f5b 	dmb	ish
   d862e:	f011 0101 	ands.w	r1, r1, #1
   d8632:	d111      	bne.n	d8658 <_Z16_fetch_usbserialv+0x3c>
   d8634:	4620      	mov	r0, r4
   d8636:	9101      	str	r1, [sp, #4]
   d8638:	f7fb fd31 	bl	d409e <__cxa_guard_acquire>
   d863c:	9901      	ldr	r1, [sp, #4]
   d863e:	b158      	cbz	r0, d8658 <_Z16_fetch_usbserialv+0x3c>
   d8640:	aa03      	add	r2, sp, #12
   d8642:	4808      	ldr	r0, [pc, #32]	; (d8664 <_Z16_fetch_usbserialv+0x48>)
   d8644:	f7ff ffca 	bl	d85dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8648:	4620      	mov	r0, r4
   d864a:	f7fb fd2d 	bl	d40a8 <__cxa_guard_release>
   d864e:	4a06      	ldr	r2, [pc, #24]	; (d8668 <_Z16_fetch_usbserialv+0x4c>)
   d8650:	4906      	ldr	r1, [pc, #24]	; (d866c <_Z16_fetch_usbserialv+0x50>)
   d8652:	4804      	ldr	r0, [pc, #16]	; (d8664 <_Z16_fetch_usbserialv+0x48>)
   d8654:	f000 fdc6 	bl	d91e4 <__aeabi_atexit>
	return _usbserial;
}
   d8658:	4802      	ldr	r0, [pc, #8]	; (d8664 <_Z16_fetch_usbserialv+0x48>)
   d865a:	b008      	add	sp, #32
   d865c:	bd10      	pop	{r4, pc}
   d865e:	bf00      	nop
   d8660:	2003e684 	.word	0x2003e684
   d8664:	2003e688 	.word	0x2003e688
   d8668:	2003df68 	.word	0x2003df68
   d866c:	000d8565 	.word	0x000d8565

000d8670 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d8670:	4770      	bx	lr

000d8672 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8672:	7441      	strb	r1, [r0, #17]
}
   d8674:	4770      	bx	lr

000d8676 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d8676:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d8678:	7c00      	ldrb	r0, [r0, #16]
   d867a:	f7fd fbc7 	bl	d5e0c <hal_usart_available_data_for_write>
}
   d867e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8682:	bd08      	pop	{r3, pc}

000d8684 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d8684:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d8686:	7c00      	ldrb	r0, [r0, #16]
   d8688:	f7fd fb98 	bl	d5dbc <hal_usart_available>
}
   d868c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8690:	bd08      	pop	{r3, pc}

000d8692 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d8692:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d8694:	7c00      	ldrb	r0, [r0, #16]
   d8696:	f7fd fba1 	bl	d5ddc <hal_usart_peek>
}
   d869a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d869e:	bd08      	pop	{r3, pc}

000d86a0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d86a0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d86a2:	7c00      	ldrb	r0, [r0, #16]
   d86a4:	f7fd fb92 	bl	d5dcc <hal_usart_read>
}
   d86a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d86ac:	bd08      	pop	{r3, pc}

000d86ae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d86ae:	7c00      	ldrb	r0, [r0, #16]
   d86b0:	f7fd bb9c 	b.w	d5dec <hal_usart_flush>

000d86b4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d86b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d86b6:	7c45      	ldrb	r5, [r0, #17]
{
   d86b8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d86ba:	b12d      	cbz	r5, d86c8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d86bc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d86be:	b003      	add	sp, #12
   d86c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d86c4:	f7fd bb72 	b.w	d5dac <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d86c8:	7c00      	ldrb	r0, [r0, #16]
   d86ca:	9101      	str	r1, [sp, #4]
   d86cc:	f7fd fb9e 	bl	d5e0c <hal_usart_available_data_for_write>
   d86d0:	2800      	cmp	r0, #0
   d86d2:	9901      	ldr	r1, [sp, #4]
   d86d4:	dcf2      	bgt.n	d86bc <_ZN11USARTSerial5writeEh+0x8>
}
   d86d6:	4628      	mov	r0, r5
   d86d8:	b003      	add	sp, #12
   d86da:	bd30      	pop	{r4, r5, pc}

000d86dc <_ZN11USARTSerialD0Ev>:
   d86dc:	b510      	push	{r4, lr}
   d86de:	2114      	movs	r1, #20
   d86e0:	4604      	mov	r4, r0
   d86e2:	f000 fd84 	bl	d91ee <_ZdlPvj>
   d86e6:	4620      	mov	r0, r4
   d86e8:	bd10      	pop	{r4, pc}
	...

000d86ec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d86ec:	b510      	push	{r4, lr}
   d86ee:	f04f 0c00 	mov.w	ip, #0
   d86f2:	4604      	mov	r4, r0
   d86f4:	4608      	mov	r0, r1
   d86f6:	4611      	mov	r1, r2
   d86f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d86fc:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d8700:	4a04      	ldr	r2, [pc, #16]	; (d8714 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d8702:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d8704:	2201      	movs	r2, #1
  _serial = serial;
   d8706:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8708:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d870a:	461a      	mov	r2, r3
   d870c:	f7fd fb46 	bl	d5d9c <hal_usart_init>
}
   d8710:	4620      	mov	r0, r4
   d8712:	bd10      	pop	{r4, pc}
   d8714:	000dac64 	.word	0x000dac64

000d8718 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8718:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d871a:	4c0e      	ldr	r4, [pc, #56]	; (d8754 <_Z22__fetch_global_Serial1v+0x3c>)
   d871c:	7821      	ldrb	r1, [r4, #0]
   d871e:	f3bf 8f5b 	dmb	ish
   d8722:	f011 0101 	ands.w	r1, r1, #1
   d8726:	d112      	bne.n	d874e <_Z22__fetch_global_Serial1v+0x36>
   d8728:	4620      	mov	r0, r4
   d872a:	9101      	str	r1, [sp, #4]
   d872c:	f7fb fcb7 	bl	d409e <__cxa_guard_acquire>
   d8730:	9901      	ldr	r1, [sp, #4]
   d8732:	b160      	cbz	r0, d874e <_Z22__fetch_global_Serial1v+0x36>
   d8734:	4a08      	ldr	r2, [pc, #32]	; (d8758 <_Z22__fetch_global_Serial1v+0x40>)
   d8736:	4b09      	ldr	r3, [pc, #36]	; (d875c <_Z22__fetch_global_Serial1v+0x44>)
   d8738:	4809      	ldr	r0, [pc, #36]	; (d8760 <_Z22__fetch_global_Serial1v+0x48>)
   d873a:	f7ff ffd7 	bl	d86ec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d873e:	4620      	mov	r0, r4
   d8740:	f7fb fcb2 	bl	d40a8 <__cxa_guard_release>
   d8744:	4a07      	ldr	r2, [pc, #28]	; (d8764 <_Z22__fetch_global_Serial1v+0x4c>)
   d8746:	4908      	ldr	r1, [pc, #32]	; (d8768 <_Z22__fetch_global_Serial1v+0x50>)
   d8748:	4805      	ldr	r0, [pc, #20]	; (d8760 <_Z22__fetch_global_Serial1v+0x48>)
   d874a:	f000 fd4b 	bl	d91e4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d874e:	4804      	ldr	r0, [pc, #16]	; (d8760 <_Z22__fetch_global_Serial1v+0x48>)
   d8750:	b002      	add	sp, #8
   d8752:	bd10      	pop	{r4, pc}
   d8754:	2003e69c 	.word	0x2003e69c
   d8758:	2003e6a0 	.word	0x2003e6a0
   d875c:	2003e724 	.word	0x2003e724
   d8760:	2003e7a8 	.word	0x2003e7a8
   d8764:	2003df68 	.word	0x2003df68
   d8768:	000d8671 	.word	0x000d8671

000d876c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d876c:	4770      	bx	lr

000d876e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d876e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8770:	4606      	mov	r6, r0
   d8772:	4615      	mov	r5, r2
   d8774:	460c      	mov	r4, r1
   d8776:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8778:	42bc      	cmp	r4, r7
   d877a:	d006      	beq.n	d878a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d877c:	6833      	ldr	r3, [r6, #0]
   d877e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8782:	689b      	ldr	r3, [r3, #8]
   d8784:	4630      	mov	r0, r6
   d8786:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d8788:	e7f6      	b.n	d8778 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d878a:	4628      	mov	r0, r5
   d878c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d878e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d878e:	7c00      	ldrb	r0, [r0, #16]
   d8790:	2200      	movs	r2, #0
   d8792:	f7fd bb63 	b.w	d5e5c <hal_i2c_write>

000d8796 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d8796:	7c00      	ldrb	r0, [r0, #16]
   d8798:	2100      	movs	r1, #0
   d879a:	f7fd bb67 	b.w	d5e6c <hal_i2c_available>

000d879e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d879e:	7c00      	ldrb	r0, [r0, #16]
   d87a0:	2100      	movs	r1, #0
   d87a2:	f7fd bb6b 	b.w	d5e7c <hal_i2c_read>

000d87a6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d87a6:	7c00      	ldrb	r0, [r0, #16]
   d87a8:	2100      	movs	r1, #0
   d87aa:	f7fd bb6f 	b.w	d5e8c <hal_i2c_peek>

000d87ae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d87ae:	7c00      	ldrb	r0, [r0, #16]
   d87b0:	2100      	movs	r1, #0
   d87b2:	f7fd bb73 	b.w	d5e9c <hal_i2c_flush>

000d87b6 <_ZN7TwoWireD0Ev>:
   d87b6:	b510      	push	{r4, lr}
   d87b8:	2114      	movs	r1, #20
   d87ba:	4604      	mov	r4, r0
   d87bc:	f000 fd17 	bl	d91ee <_ZdlPvj>
   d87c0:	4620      	mov	r0, r4
   d87c2:	bd10      	pop	{r4, pc}

000d87c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d87c4:	b510      	push	{r4, lr}
   d87c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d87ca:	4604      	mov	r4, r0
   d87cc:	4608      	mov	r0, r1
   d87ce:	2100      	movs	r1, #0
   d87d0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d87d4:	4b03      	ldr	r3, [pc, #12]	; (d87e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d87d6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d87d8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d87da:	4611      	mov	r1, r2
   d87dc:	f7fd fb6e 	bl	d5ebc <hal_i2c_init>
}
   d87e0:	4620      	mov	r0, r4
   d87e2:	bd10      	pop	{r4, pc}
   d87e4:	000dac94 	.word	0x000dac94

000d87e8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d87e8:	2300      	movs	r3, #0
   d87ea:	7c00      	ldrb	r0, [r0, #16]
   d87ec:	461a      	mov	r2, r3
   d87ee:	4619      	mov	r1, r3
   d87f0:	f7fd bb14 	b.w	d5e1c <hal_i2c_begin>

000d87f4 <_ZN7TwoWire3endEv>:
	hal_i2c_end(_i2c, NULL);
   d87f4:	7c00      	ldrb	r0, [r0, #16]
   d87f6:	2100      	movs	r1, #0
   d87f8:	f7fd bb18 	b.w	d5e2c <hal_i2c_end>

000d87fc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d87fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d87fe:	2200      	movs	r2, #0
   d8800:	2314      	movs	r3, #20
   d8802:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d8806:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d880a:	780b      	ldrb	r3, [r1, #0]
   d880c:	f88d 3008 	strb.w	r3, [sp, #8]
   d8810:	684b      	ldr	r3, [r1, #4]
   d8812:	9303      	str	r3, [sp, #12]
   d8814:	68cb      	ldr	r3, [r1, #12]
   d8816:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d8818:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d881a:	7a0b      	ldrb	r3, [r1, #8]
   d881c:	9305      	str	r3, [sp, #20]
   d881e:	a901      	add	r1, sp, #4
   d8820:	f7fd fb54 	bl	d5ecc <hal_i2c_request_ex>
}
   d8824:	b007      	add	sp, #28
   d8826:	f85d fb04 	ldr.w	pc, [sp], #4

000d882a <_ZN7TwoWire11requestFromEhjh>:
{
   d882a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d882c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d882e:	f88d 1000 	strb.w	r1, [sp]
   d8832:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8836:	9103      	str	r1, [sp, #12]
   d8838:	bf18      	it	ne
   d883a:	2301      	movne	r3, #1
   d883c:	4669      	mov	r1, sp
    size_ = size;
   d883e:	9201      	str	r2, [sp, #4]
   d8840:	f88d 3008 	strb.w	r3, [sp, #8]
   d8844:	f7ff ffda 	bl	d87fc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8848:	b005      	add	sp, #20
   d884a:	f85d fb04 	ldr.w	pc, [sp], #4

000d884e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d884e:	2301      	movs	r3, #1
   d8850:	f7ff bfeb 	b.w	d882a <_ZN7TwoWire11requestFromEhjh>

000d8854 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d8854:	7c00      	ldrb	r0, [r0, #16]
   d8856:	2200      	movs	r2, #0
   d8858:	f7fd baf0 	b.w	d5e3c <hal_i2c_begin_transmission>

000d885c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d885c:	b2c9      	uxtb	r1, r1
   d885e:	f7ff bff9 	b.w	d8854 <_ZN7TwoWire17beginTransmissionEh>

000d8862 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d8862:	7c00      	ldrb	r0, [r0, #16]
   d8864:	2200      	movs	r2, #0
   d8866:	f7fd baf1 	b.w	d5e4c <hal_i2c_end_transmission>

000d886a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d886a:	2101      	movs	r1, #1
   d886c:	f7ff bff9 	b.w	d8862 <_ZN7TwoWire15endTransmissionEh>

000d8870 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d8870:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d8872:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d8874:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d8878:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d887a:	2201      	movs	r2, #1
   d887c:	f04f 33ff 	mov.w	r3, #4294967295
   d8880:	f10d 0107 	add.w	r1, sp, #7
   d8884:	47a0      	blx	r4
}
   d8886:	b002      	add	sp, #8
   d8888:	bd10      	pop	{r4, pc}

000d888a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d888a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d888c:	6803      	ldr	r3, [r0, #0]
   d888e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d8890:	f04f 33ff 	mov.w	r3, #4294967295
   d8894:	46a4      	mov	ip, r4
}
   d8896:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d889a:	4760      	bx	ip

000d889c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d889c:	b513      	push	{r0, r1, r4, lr}
   d889e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d88a0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d88a2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d88a6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d88a8:	f10d 0107 	add.w	r1, sp, #7
   d88ac:	2201      	movs	r2, #1
   d88ae:	47a0      	blx	r4
}
   d88b0:	b002      	add	sp, #8
   d88b2:	bd10      	pop	{r4, pc}

000d88b4 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d88b4:	4770      	bx	lr

000d88b6 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d88b6:	b538      	push	{r3, r4, r5, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d88b8:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d88ba:	681a      	ldr	r2, [r3, #0]
   d88bc:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d88be:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d88c0:	da10      	bge.n	d88e4 <_ZN9TCPClient9connectedEv+0x2e>
   d88c2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d88c6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d88ca:	429a      	cmp	r2, r3
   d88cc:	d10a      	bne.n	d88e4 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d88ce:	6803      	ldr	r3, [r0, #0]
   d88d0:	691b      	ldr	r3, [r3, #16]
   d88d2:	4798      	blx	r3
        if (!rv) {
   d88d4:	4604      	mov	r4, r0
   d88d6:	b928      	cbnz	r0, d88e4 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d88d8:	682b      	ldr	r3, [r5, #0]
   d88da:	4628      	mov	r0, r5
   d88dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d88de:	4798      	blx	r3
        rv = available();
   d88e0:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d88e2:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d88e4:	2001      	movs	r0, #1
   d88e6:	e7fc      	b.n	d88e2 <_ZN9TCPClient9connectedEv+0x2c>

000d88e8 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d88e8:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d88ea:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d88ec:	43c0      	mvns	r0, r0
   d88ee:	0fc0      	lsrs	r0, r0, #31
   d88f0:	4770      	bx	lr

000d88f2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d88f2:	4770      	bx	lr

000d88f4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d88f4:	4b06      	ldr	r3, [pc, #24]	; (d8910 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d88f6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d88f8:	b510      	push	{r4, lr}
   d88fa:	f100 040c 	add.w	r4, r0, #12
	    ||
   d88fe:	d005      	beq.n	d890c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d8900:	4608      	mov	r0, r1
   d8902:	f000 fc7d 	bl	d9200 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d8906:	2800      	cmp	r0, #0
	return nullptr;
   d8908:	bf08      	it	eq
   d890a:	2400      	moveq	r4, #0
      }
   d890c:	4620      	mov	r0, r4
   d890e:	bd10      	pop	{r4, pc}
   d8910:	000dabb4 	.word	0x000dabb4

000d8914 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d8914:	b510      	push	{r4, lr}
   d8916:	21ac      	movs	r1, #172	; 0xac
   d8918:	4604      	mov	r4, r0
   d891a:	f000 fc68 	bl	d91ee <_ZdlPvj>
   d891e:	4620      	mov	r0, r4
   d8920:	bd10      	pop	{r4, pc}

000d8922 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p);
   d8922:	f7fb bbba 	b.w	d409a <_ZdlPv>

000d8926 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d8926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d892a:	f04f 0800 	mov.w	r8, #0
   d892e:	b086      	sub	sp, #24
   d8930:	461d      	mov	r5, r3
   d8932:	f8c0 8004 	str.w	r8, [r0, #4]
   d8936:	4604      	mov	r4, r0
   d8938:	460e      	mov	r6, r1
   d893a:	4617      	mov	r7, r2
    struct timeval tv = {};
   d893c:	4641      	mov	r1, r8
   d893e:	2210      	movs	r2, #16
   d8940:	a802      	add	r0, sp, #8
   d8942:	f001 fc3f 	bl	da1c4 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d8946:	1c6b      	adds	r3, r5, #1
   d8948:	d009      	beq.n	d895e <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d894a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d894e:	fbb5 f3f0 	udiv	r3, r5, r0
   d8952:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d8956:	fb00 5313 	mls	r3, r0, r3, r5
   d895a:	4358      	muls	r0, r3
   d895c:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d895e:	6960      	ldr	r0, [r4, #20]
   d8960:	2310      	movs	r3, #16
   d8962:	9300      	str	r3, [sp, #0]
   d8964:	6800      	ldr	r0, [r0, #0]
   d8966:	ab02      	add	r3, sp, #8
   d8968:	f241 0205 	movw	r2, #4101	; 0x1005
   d896c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8970:	f7fd fab4 	bl	d5edc <sock_setsockopt>
    if (ret < 0) {
   d8974:	2800      	cmp	r0, #0
   d8976:	da07      	bge.n	d8988 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d8978:	f7fd fc9e 	bl	d62b8 <__errno>
   d897c:	6803      	ldr	r3, [r0, #0]
   d897e:	6063      	str	r3, [r4, #4]
        return 0;
   d8980:	2000      	movs	r0, #0
}
   d8982:	b006      	add	sp, #24
   d8984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d8988:	6960      	ldr	r0, [r4, #20]
   d898a:	2300      	movs	r3, #0
   d898c:	6800      	ldr	r0, [r0, #0]
   d898e:	463a      	mov	r2, r7
   d8990:	4631      	mov	r1, r6
   d8992:	f7fd fac3 	bl	d5f1c <sock_send>
    if (ret < 0) {
   d8996:	1e03      	subs	r3, r0, #0
   d8998:	dbee      	blt.n	d8978 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d899a:	4618      	mov	r0, r3
   d899c:	e7f1      	b.n	d8982 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d89a0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d89a0:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d89a2:	6984      	ldr	r4, [r0, #24]
   d89a4:	4b0a      	ldr	r3, [pc, #40]	; (d89d0 <_ZN9TCPClientD1Ev+0x30>)
   d89a6:	6003      	str	r3, [r0, #0]
   d89a8:	4605      	mov	r5, r0
   d89aa:	b17c      	cbz	r4, d89cc <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d89ac:	6863      	ldr	r3, [r4, #4]
   d89ae:	3b01      	subs	r3, #1
   d89b0:	6063      	str	r3, [r4, #4]
   d89b2:	b95b      	cbnz	r3, d89cc <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d89b4:	6823      	ldr	r3, [r4, #0]
   d89b6:	4620      	mov	r0, r4
   d89b8:	689b      	ldr	r3, [r3, #8]
   d89ba:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d89bc:	68a3      	ldr	r3, [r4, #8]
   d89be:	3b01      	subs	r3, #1
   d89c0:	60a3      	str	r3, [r4, #8]
   d89c2:	b91b      	cbnz	r3, d89cc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d89c4:	6823      	ldr	r3, [r4, #0]
   d89c6:	4620      	mov	r0, r4
   d89c8:	68db      	ldr	r3, [r3, #12]
   d89ca:	4798      	blx	r3
   d89cc:	4628      	mov	r0, r5
   d89ce:	bd38      	pop	{r3, r4, r5, pc}
   d89d0:	000dace8 	.word	0x000dace8

000d89d4 <_ZN9TCPClientD0Ev>:
   d89d4:	b510      	push	{r4, lr}
   d89d6:	4604      	mov	r4, r0
   d89d8:	f7ff ffe2 	bl	d89a0 <_ZN9TCPClientD1Ev>
   d89dc:	4620      	mov	r0, r4
   d89de:	211c      	movs	r1, #28
   d89e0:	f000 fc05 	bl	d91ee <_ZdlPvj>
   d89e4:	4620      	mov	r0, r4
   d89e6:	bd10      	pop	{r4, pc}

000d89e8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d89e8:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d89ea:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d89ec:	4b05      	ldr	r3, [pc, #20]	; (d8a04 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d89ee:	4604      	mov	r4, r0
   d89f0:	358c      	adds	r5, #140	; 0x8c
   d89f2:	f844 3b04 	str.w	r3, [r4], #4
   d89f6:	4606      	mov	r6, r0
   d89f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d89fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d89fc:	682b      	ldr	r3, [r5, #0]
   d89fe:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d8a00:	4630      	mov	r0, r6
   d8a02:	bd70      	pop	{r4, r5, r6, pc}
   d8a04:	000dac20 	.word	0x000dac20

000d8a08 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d8a08:	b510      	push	{r4, lr}
   d8a0a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8a0c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8a10:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8a14:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d8a16:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8a18:	d005      	beq.n	d8a26 <_ZN9TCPClient4peekEv+0x1e>
   d8a1a:	6963      	ldr	r3, [r4, #20]
   d8a1c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d8a20:	4413      	add	r3, r2
   d8a22:	7918      	ldrb	r0, [r3, #4]
}
   d8a24:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8a26:	6803      	ldr	r3, [r0, #0]
   d8a28:	691b      	ldr	r3, [r3, #16]
   d8a2a:	4798      	blx	r3
   d8a2c:	2800      	cmp	r0, #0
   d8a2e:	d1f4      	bne.n	d8a1a <_ZN9TCPClient4peekEv+0x12>
   d8a30:	f04f 30ff 	mov.w	r0, #4294967295
   d8a34:	e7f6      	b.n	d8a24 <_ZN9TCPClient4peekEv+0x1c>

000d8a36 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d8a36:	b510      	push	{r4, lr}
   d8a38:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8a3a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8a3e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8a42:	429a      	cmp	r2, r3
int TCPClient::read() {
   d8a44:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8a46:	d008      	beq.n	d8a5a <_ZN9TCPClient4readEv+0x24>
   d8a48:	6963      	ldr	r3, [r4, #20]
   d8a4a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d8a4e:	1c51      	adds	r1, r2, #1
   d8a50:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d8a54:	4413      	add	r3, r2
   d8a56:	7918      	ldrb	r0, [r3, #4]
}
   d8a58:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8a5a:	6803      	ldr	r3, [r0, #0]
   d8a5c:	691b      	ldr	r3, [r3, #16]
   d8a5e:	4798      	blx	r3
   d8a60:	2800      	cmp	r0, #0
   d8a62:	d1f1      	bne.n	d8a48 <_ZN9TCPClient4readEv+0x12>
   d8a64:	f04f 30ff 	mov.w	r0, #4294967295
   d8a68:	e7f6      	b.n	d8a58 <_ZN9TCPClient4readEv+0x22>

000d8a6a <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d8a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8a6c:	6943      	ldr	r3, [r0, #20]
   d8a6e:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d8a70:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8a74:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8a78:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d8a7a:	4605      	mov	r5, r0
   d8a7c:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d8a7e:	d016      	beq.n	d8aae <_ZN9TCPClient4readEPhj+0x44>
   d8a80:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d8a82:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d8a86:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d8a8a:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d8a8c:	42bc      	cmp	r4, r7
   d8a8e:	bf28      	it	cs
   d8a90:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d8a92:	3304      	adds	r3, #4
   d8a94:	4622      	mov	r2, r4
   d8a96:	4419      	add	r1, r3
   d8a98:	4630      	mov	r0, r6
   d8a9a:	f001 fb6b 	bl	da174 <memcpy>
   d8a9e:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d8aa0:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8aa4:	4423      	add	r3, r4
   d8aa6:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d8aaa:	4620      	mov	r0, r4
   d8aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d8aae:	6803      	ldr	r3, [r0, #0]
   d8ab0:	691b      	ldr	r3, [r3, #16]
   d8ab2:	4798      	blx	r3
   d8ab4:	2800      	cmp	r0, #0
   d8ab6:	d1e3      	bne.n	d8a80 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d8ab8:	f04f 34ff 	mov.w	r4, #4294967295
   d8abc:	e7f5      	b.n	d8aaa <_ZN9TCPClient4readEPhj+0x40>

000d8abe <_ZN9TCPClient12flush_bufferEv>:
   d8abe:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d8ac0:	2300      	movs	r3, #0
   d8ac2:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d8ac6:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d8ac8:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d8acc:	4770      	bx	lr

000d8ace <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8ad2:	461f      	mov	r7, r3
    stop();
   d8ad4:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8ad6:	460c      	mov	r4, r1
    stop();
   d8ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8ada:	b08a      	sub	sp, #40	; 0x28
   d8adc:	4605      	mov	r5, r0
   d8ade:	4616      	mov	r6, r2
    stop();
   d8ae0:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d8ae2:	7d23      	ldrb	r3, [r4, #20]
   d8ae4:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d8ae8:	2b04      	cmp	r3, #4
   d8aea:	bf0c      	ite	eq
   d8aec:	2002      	moveq	r0, #2
   d8aee:	200a      	movne	r0, #10
   d8af0:	2206      	movs	r2, #6
   d8af2:	2101      	movs	r1, #1
   d8af4:	f7fd fa1a 	bl	d5f2c <sock_socket>
   d8af8:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d8afc:	696b      	ldr	r3, [r5, #20]
   d8afe:	681b      	ldr	r3, [r3, #0]
   d8b00:	2b00      	cmp	r3, #0
   d8b02:	da08      	bge.n	d8b16 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d8b04:	682b      	ldr	r3, [r5, #0]
   d8b06:	4628      	mov	r0, r5
   d8b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8b0a:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d8b0c:	4798      	blx	r3
}
   d8b0e:	4620      	mov	r0, r4
   d8b10:	b00a      	add	sp, #40	; 0x28
   d8b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d8b16:	4628      	mov	r0, r5
   d8b18:	f7ff ffd1 	bl	d8abe <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d8b1c:	b1b7      	cbz	r7, d8b4c <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d8b1e:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8b20:	a903      	add	r1, sp, #12
   d8b22:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d8b24:	9303      	str	r3, [sp, #12]
   d8b26:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8b2a:	f7fd f82b 	bl	d5b84 <if_index_to_name>
   d8b2e:	2800      	cmp	r0, #0
   d8b30:	d1e8      	bne.n	d8b04 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d8b32:	6968      	ldr	r0, [r5, #20]
   d8b34:	2306      	movs	r3, #6
   d8b36:	9300      	str	r3, [sp, #0]
   d8b38:	6800      	ldr	r0, [r0, #0]
   d8b3a:	ab03      	add	r3, sp, #12
   d8b3c:	f241 020b 	movw	r2, #4107	; 0x100b
   d8b40:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8b44:	f7fd f9ca 	bl	d5edc <sock_setsockopt>
   d8b48:	2800      	cmp	r0, #0
   d8b4a:	d1db      	bne.n	d8b04 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d8b4c:	221c      	movs	r2, #28
   d8b4e:	2100      	movs	r1, #0
   d8b50:	a803      	add	r0, sp, #12
   d8b52:	f001 fb37 	bl	da1c4 <memset>
    if (ip.version() == 4) {
   d8b56:	7d23      	ldrb	r3, [r4, #20]
   d8b58:	2b04      	cmp	r3, #4
   d8b5a:	d11d      	bne.n	d8b98 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d8b5c:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d8b60:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d8b62:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d8b66:	f7fd f911 	bl	d5d8c <inet_htons>
   d8b6a:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d8b6e:	6860      	ldr	r0, [r4, #4]
   d8b70:	f7fd f904 	bl	d5d7c <inet_htonl>
   d8b74:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d8b76:	696b      	ldr	r3, [r5, #20]
   d8b78:	221c      	movs	r2, #28
   d8b7a:	6818      	ldr	r0, [r3, #0]
   d8b7c:	a903      	add	r1, sp, #12
   d8b7e:	f7fd f9bd 	bl	d5efc <sock_connect>
   d8b82:	2800      	cmp	r0, #0
   d8b84:	d1be      	bne.n	d8b04 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d8b86:	3404      	adds	r4, #4
   d8b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8b8a:	696d      	ldr	r5, [r5, #20]
   d8b8c:	358c      	adds	r5, #140	; 0x8c
   d8b8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8b90:	6823      	ldr	r3, [r4, #0]
   d8b92:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d8b94:	2401      	movs	r4, #1
   d8b96:	e7ba      	b.n	d8b0e <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d8b98:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d8b9c:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d8b9e:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d8ba2:	f7fd f8f3 	bl	d5d8c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8ba6:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d8ba8:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8bac:	1d23      	adds	r3, r4, #4
   d8bae:	f104 0714 	add.w	r7, r4, #20
   d8bb2:	6818      	ldr	r0, [r3, #0]
   d8bb4:	6859      	ldr	r1, [r3, #4]
   d8bb6:	4632      	mov	r2, r6
   d8bb8:	c203      	stmia	r2!, {r0, r1}
   d8bba:	3308      	adds	r3, #8
   d8bbc:	42bb      	cmp	r3, r7
   d8bbe:	4616      	mov	r6, r2
   d8bc0:	d1f7      	bne.n	d8bb2 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d8bc2:	e7d8      	b.n	d8b76 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d8bc4 <_ZN9TCPClient9availableEv>:
{
   d8bc4:	b530      	push	{r4, r5, lr}
   d8bc6:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d8bc8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d8bcc:	b08b      	sub	sp, #44	; 0x2c
   d8bce:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d8bd0:	b12b      	cbz	r3, d8bde <_ZN9TCPClient9availableEv+0x1a>
   d8bd2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d8bd6:	429a      	cmp	r2, r3
   d8bd8:	d101      	bne.n	d8bde <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d8bda:	f7ff ff70 	bl	d8abe <_ZN9TCPClient12flush_bufferEv>
   d8bde:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d8be0:	6808      	ldr	r0, [r1, #0]
   d8be2:	2800      	cmp	r0, #0
   d8be4:	db18      	blt.n	d8c18 <_ZN9TCPClient9availableEv+0x54>
   d8be6:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d8bea:	2d7f      	cmp	r5, #127	; 0x7f
   d8bec:	d814      	bhi.n	d8c18 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d8bee:	3104      	adds	r1, #4
   d8bf0:	2308      	movs	r3, #8
   d8bf2:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d8bf6:	4429      	add	r1, r5
   d8bf8:	f7fd f988 	bl	d5f0c <sock_recv>
            if (ret > 0) {
   d8bfc:	2800      	cmp	r0, #0
   d8bfe:	dd13      	ble.n	d8c28 <_ZN9TCPClient9availableEv+0x64>
   d8c00:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d8c02:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8c06:	b90a      	cbnz	r2, d8c0c <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d8c08:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d8c0c:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d8c0e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8c12:	4410      	add	r0, r2
   d8c14:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d8c18:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d8c1a:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d8c1e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d8c22:	1ac0      	subs	r0, r0, r3
   d8c24:	b00b      	add	sp, #44	; 0x2c
   d8c26:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d8c28:	f7fd fb46 	bl	d62b8 <__errno>
   d8c2c:	6803      	ldr	r3, [r0, #0]
   d8c2e:	2b0b      	cmp	r3, #11
   d8c30:	d0f2      	beq.n	d8c18 <_ZN9TCPClient9availableEv+0x54>
   d8c32:	f7fd fb41 	bl	d62b8 <__errno>
   d8c36:	6803      	ldr	r3, [r0, #0]
   d8c38:	2b0b      	cmp	r3, #11
   d8c3a:	d0ed      	beq.n	d8c18 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d8c3c:	2320      	movs	r3, #32
   d8c3e:	2500      	movs	r5, #0
   d8c40:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d8c44:	f7fd fb38 	bl	d62b8 <__errno>
   d8c48:	6803      	ldr	r3, [r0, #0]
   d8c4a:	9301      	str	r3, [sp, #4]
   d8c4c:	4b08      	ldr	r3, [pc, #32]	; (d8c70 <_ZN9TCPClient9availableEv+0xac>)
   d8c4e:	4909      	ldr	r1, [pc, #36]	; (d8c74 <_ZN9TCPClient9availableEv+0xb0>)
   d8c50:	9300      	str	r3, [sp, #0]
   d8c52:	aa02      	add	r2, sp, #8
   d8c54:	462b      	mov	r3, r5
   d8c56:	2032      	movs	r0, #50	; 0x32
   d8c58:	f7fd fa08 	bl	d606c <log_message>
                    sock_close(d_->sock);
   d8c5c:	6963      	ldr	r3, [r4, #20]
   d8c5e:	6818      	ldr	r0, [r3, #0]
   d8c60:	f7fd f944 	bl	d5eec <sock_close>
   d8c64:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d8c66:	f04f 32ff 	mov.w	r2, #4294967295
   d8c6a:	601a      	str	r2, [r3, #0]
   d8c6c:	e7d4      	b.n	d8c18 <_ZN9TCPClient9availableEv+0x54>
   d8c6e:	bf00      	nop
   d8c70:	000dacb4 	.word	0x000dacb4
   d8c74:	000daa3c 	.word	0x000daa3c

000d8c78 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d8c78:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d8c7a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d8c7c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d8c7e:	6818      	ldr	r0, [r3, #0]
   d8c80:	2800      	cmp	r0, #0
   d8c82:	db01      	blt.n	d8c88 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d8c84:	f7fd f932 	bl	d5eec <sock_close>
   d8c88:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d8c8a:	f04f 32ff 	mov.w	r2, #4294967295
   d8c8e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d8c90:	6960      	ldr	r0, [r4, #20]
   d8c92:	2211      	movs	r2, #17
   d8c94:	2100      	movs	r1, #0
   d8c96:	308c      	adds	r0, #140	; 0x8c
   d8c98:	f001 fa94 	bl	da1c4 <memset>
    flush_buffer();
   d8c9c:	4620      	mov	r0, r4
}
   d8c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d8ca2:	f7ff bf0c 	b.w	d8abe <_ZN9TCPClient12flush_bufferEv>

000d8ca6 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d8ca6:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d8ca8:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d8caa:	4604      	mov	r4, r0
          total(0) {
   d8cac:	6001      	str	r1, [r0, #0]
   d8cae:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d8cb2:	3088      	adds	r0, #136	; 0x88
   d8cb4:	f7ff fc02 	bl	d84bc <_ZN9IPAddressC1Ev>
}
   d8cb8:	4620      	mov	r0, r4
   d8cba:	bd10      	pop	{r4, pc}

000d8cbc <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d8cbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8cbe:	2300      	movs	r3, #0
   d8cc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8cc4:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d8cc8:	4a0e      	ldr	r2, [pc, #56]	; (d8d04 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d8cca:	6103      	str	r3, [r0, #16]
   d8ccc:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d8cce:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d8cd0:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8cd2:	20ac      	movs	r0, #172	; 0xac
   d8cd4:	9101      	str	r1, [sp, #4]
   d8cd6:	f7fb f9dc 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d8cda:	1e05      	subs	r5, r0, #0
   d8cdc:	f105 060c 	add.w	r6, r5, #12
   d8ce0:	d008      	beq.n	d8cf4 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d8ce2:	2301      	movs	r3, #1
   d8ce4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d8ce8:	4b07      	ldr	r3, [pc, #28]	; (d8d08 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8cea:	9901      	ldr	r1, [sp, #4]
   d8cec:	602b      	str	r3, [r5, #0]
   d8cee:	4630      	mov	r0, r6
   d8cf0:	f7ff ffd9 	bl	d8ca6 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d8cf4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d8cf6:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d8cfa:	f7ff fee0 	bl	d8abe <_ZN9TCPClient12flush_bufferEv>
}
   d8cfe:	b002      	add	sp, #8
   d8d00:	bd70      	pop	{r4, r5, r6, pc}
   d8d02:	bf00      	nop
   d8d04:	000dace8 	.word	0x000dace8
   d8d08:	000daccc 	.word	0x000daccc

000d8d0c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d8d0c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d8d0e:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d8d12:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8d14:	f7ff ffd2 	bl	d8cbc <_ZN9TCPClientC1Ei>
}
   d8d18:	4620      	mov	r0, r4
   d8d1a:	bd10      	pop	{r4, pc}

000d8d1c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d8d1c:	b510      	push	{r4, lr}
   d8d1e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8d20:	6800      	ldr	r0, [r0, #0]
   d8d22:	2800      	cmp	r0, #0
   d8d24:	db01      	blt.n	d8d2a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d8d26:	f7fd f8e1 	bl	d5eec <sock_close>
    }
}
   d8d2a:	4620      	mov	r0, r4
   d8d2c:	bd10      	pop	{r4, pc}

000d8d2e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d8d2e:	300c      	adds	r0, #12
   d8d30:	f7ff bff4 	b.w	d8d1c <_ZN9TCPClient4DataD1Ev>

000d8d34 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8d34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8d38:	4698      	mov	r8, r3
    stop();
   d8d3a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8d3c:	b093      	sub	sp, #76	; 0x4c
   d8d3e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d8d40:	2400      	movs	r4, #0
    stop();
   d8d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8d44:	4606      	mov	r6, r0
   d8d46:	4617      	mov	r7, r2
    stop();
   d8d48:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8d4a:	4628      	mov	r0, r5
   d8d4c:	466b      	mov	r3, sp
   d8d4e:	4622      	mov	r2, r4
   d8d50:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d8d52:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8d54:	f7fc feee 	bl	d5b34 <netdb_getaddrinfo>
   d8d58:	4605      	mov	r5, r0
   d8d5a:	2800      	cmp	r0, #0
   d8d5c:	d163      	bne.n	d8e26 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d8d5e:	9b00      	ldr	r3, [sp, #0]
   d8d60:	2b00      	cmp	r3, #0
   d8d62:	d04b      	beq.n	d8dfc <_ZN9TCPClient7connectEPKctm+0xc8>
   d8d64:	695b      	ldr	r3, [r3, #20]
   d8d66:	2b00      	cmp	r3, #0
   d8d68:	d048      	beq.n	d8dfc <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d8d6a:	a806      	add	r0, sp, #24
   d8d6c:	f7ff fba6 	bl	d84bc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d8d70:	9b00      	ldr	r3, [sp, #0]
   d8d72:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d8d74:	7863      	ldrb	r3, [r4, #1]
   d8d76:	2b02      	cmp	r3, #2
   d8d78:	d104      	bne.n	d8d84 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8d7a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8d7c:	a806      	add	r0, sp, #24
   d8d7e:	f7fd fccd 	bl	d671c <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d8d82:	e026      	b.n	d8dd2 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d8d84:	2b0a      	cmp	r3, #10
   d8d86:	d124      	bne.n	d8dd2 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d8d88:	2211      	movs	r2, #17
   d8d8a:	4629      	mov	r1, r5
   d8d8c:	a801      	add	r0, sp, #4
   d8d8e:	f001 fa19 	bl	da1c4 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8d92:	68a3      	ldr	r3, [r4, #8]
   d8d94:	2b00      	cmp	r3, #0
   d8d96:	d038      	beq.n	d8e0a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8d98:	f104 0308 	add.w	r3, r4, #8
   d8d9c:	f10d 0c04 	add.w	ip, sp, #4
   d8da0:	3418      	adds	r4, #24
   d8da2:	6818      	ldr	r0, [r3, #0]
   d8da4:	6859      	ldr	r1, [r3, #4]
   d8da6:	4662      	mov	r2, ip
   d8da8:	c203      	stmia	r2!, {r0, r1}
   d8daa:	3308      	adds	r3, #8
   d8dac:	42a3      	cmp	r3, r4
   d8dae:	4694      	mov	ip, r2
   d8db0:	d1f7      	bne.n	d8da2 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d8db2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d8db4:	a901      	add	r1, sp, #4
   d8db6:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d8db8:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d8dbc:	f7ff fb8c 	bl	d84d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d8dc0:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d8dc4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d8dc8:	ac07      	add	r4, sp, #28
   d8dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8dcc:	f8dc 3000 	ldr.w	r3, [ip]
   d8dd0:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d8dd2:	a806      	add	r0, sp, #24
   d8dd4:	f7ff fb92 	bl	d84fc <_ZNK9IPAddresscvbEv>
        if (addr) {
   d8dd8:	b180      	cbz	r0, d8dfc <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d8dda:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d8ddc:	ad07      	add	r5, sp, #28
   d8dde:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d8de2:	4b12      	ldr	r3, [pc, #72]	; (d8e2c <_ZN9TCPClient7connectEPKctm+0xf8>)
   d8de4:	930c      	str	r3, [sp, #48]	; 0x30
   d8de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8de8:	ac0d      	add	r4, sp, #52	; 0x34
   d8dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8dec:	682b      	ldr	r3, [r5, #0]
   d8dee:	7023      	strb	r3, [r4, #0]
   d8df0:	463a      	mov	r2, r7
   d8df2:	4643      	mov	r3, r8
   d8df4:	a90c      	add	r1, sp, #48	; 0x30
   d8df6:	4630      	mov	r0, r6
   d8df8:	47c8      	blx	r9
   d8dfa:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d8dfc:	9800      	ldr	r0, [sp, #0]
   d8dfe:	f7fc fe91 	bl	d5b24 <netdb_freeaddrinfo>
}
   d8e02:	4628      	mov	r0, r5
   d8e04:	b013      	add	sp, #76	; 0x4c
   d8e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8e0a:	68e3      	ldr	r3, [r4, #12]
   d8e0c:	2b00      	cmp	r3, #0
   d8e0e:	d1c3      	bne.n	d8d98 <_ZN9TCPClient7connectEPKctm+0x64>
   d8e10:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d8e14:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d8e18:	f7fc ffb0 	bl	d5d7c <inet_htonl>
   d8e1c:	4581      	cmp	r9, r0
   d8e1e:	d1bb      	bne.n	d8d98 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d8e20:	f104 0114 	add.w	r1, r4, #20
   d8e24:	e7aa      	b.n	d8d7c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8e26:	4625      	mov	r5, r4
   d8e28:	e7e8      	b.n	d8dfc <_ZN9TCPClient7connectEPKctm+0xc8>
   d8e2a:	bf00      	nop
   d8e2c:	000dac20 	.word	0x000dac20

000d8e30 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv>:
                results[index++] = *result;
            }
        }

    protected:
        static void callback(WiFiAccessPoint* result, void* cookie)
   d8e30:	b530      	push	{r4, r5, lr}
            if (index<count) {
   d8e32:	e9d1 4301 	ldrd	r4, r3, [r1, #4]
   d8e36:	429c      	cmp	r4, r3
   d8e38:	da10      	bge.n	d8e5c <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv+0x2c>
                results[index++] = *result;
   d8e3a:	680b      	ldr	r3, [r1, #0]
   d8e3c:	1c62      	adds	r2, r4, #1
   d8e3e:	604a      	str	r2, [r1, #4]
   d8e40:	4605      	mov	r5, r0
   d8e42:	2238      	movs	r2, #56	; 0x38
   d8e44:	fb02 3404 	mla	r4, r2, r4, r3
   d8e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8e54:	e895 0003 	ldmia.w	r5, {r0, r1}
   d8e58:	e884 0003 	stmia.w	r4, {r0, r1}
        {
            ((APArrayPopulator*)cookie)->addResult(result);
        }
   d8e5c:	bd30      	pop	{r4, r5, pc}

000d8e5e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8e5e:	2200      	movs	r2, #0
   d8e60:	6840      	ldr	r0, [r0, #4]
   d8e62:	4611      	mov	r1, r2
   d8e64:	f7fd b988 	b.w	d6178 <network_listening>

000d8e68 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8e68:	2200      	movs	r2, #0
   d8e6a:	6840      	ldr	r0, [r0, #4]
   d8e6c:	4611      	mov	r1, r2
   d8e6e:	f7fd b9ab 	b.w	d61c8 <network_get_listen_timeout>

000d8e72 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8e72:	6840      	ldr	r0, [r0, #4]
   d8e74:	2200      	movs	r2, #0
   d8e76:	f7fd b99f 	b.w	d61b8 <network_set_listen_timeout>

000d8e7a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8e7a:	6840      	ldr	r0, [r0, #4]
   d8e7c:	2200      	movs	r2, #0
   d8e7e:	f081 0101 	eor.w	r1, r1, #1
   d8e82:	f7fd b971 	b.w	d6168 <network_listen>

000d8e86 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8e86:	2200      	movs	r2, #0
   d8e88:	6840      	ldr	r0, [r0, #4]
   d8e8a:	4611      	mov	r1, r2
   d8e8c:	f7fd b944 	b.w	d6118 <network_connecting>

000d8e90 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8e90:	6840      	ldr	r0, [r0, #4]
   d8e92:	2200      	movs	r2, #0
   d8e94:	2102      	movs	r1, #2
   d8e96:	f7fd b947 	b.w	d6128 <network_disconnect>
	...

000d8e9c <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>:
        APScan apScan(results, result_count);
        return apScan.start();
    }

#if !HAL_PLATFORM_WIFI_SCAN_ONLY
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
   d8e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
            this->index = 0;
   d8e9e:	2300      	movs	r3, #0
            this->results = results;
   d8ea0:	9101      	str	r1, [sp, #4]
            return std::min(count, wlan_get_credentials(callback, this));
   d8ea2:	4806      	ldr	r0, [pc, #24]	; (d8ebc <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj+0x20>)
            this->index = 0;
   d8ea4:	9302      	str	r3, [sp, #8]
            return std::min(count, wlan_get_credentials(callback, this));
   d8ea6:	a901      	add	r1, sp, #4
            this->count = size;
   d8ea8:	9203      	str	r2, [sp, #12]
            return std::min(count, wlan_get_credentials(callback, this));
   d8eaa:	f7fd f8cf 	bl	d604c <wlan_get_credentials>
        APList apList(results, result_count);
        return apList.start();
    }
   d8eae:	9b03      	ldr	r3, [sp, #12]
   d8eb0:	4298      	cmp	r0, r3
   d8eb2:	bfa8      	it	ge
   d8eb4:	4618      	movge	r0, r3
   d8eb6:	b005      	add	sp, #20
   d8eb8:	f85d fb04 	ldr.w	pc, [sp], #4
   d8ebc:	000d8e31 	.word	0x000d8e31

000d8ec0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8ec0:	4b02      	ldr	r3, [pc, #8]	; (d8ecc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8ec2:	2204      	movs	r2, #4
   d8ec4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8ec6:	4a02      	ldr	r2, [pc, #8]	; (d8ed0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8ec8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d8eca:	4770      	bx	lr
   d8ecc:	2003e7bc 	.word	0x2003e7bc
   d8ed0:	000dad34 	.word	0x000dad34

000d8ed4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8ed4:	2300      	movs	r3, #0
   d8ed6:	6840      	ldr	r0, [r0, #4]
   d8ed8:	461a      	mov	r2, r3
   d8eda:	f7fd b915 	b.w	d6108 <network_connect>

000d8ede <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8ede:	6840      	ldr	r0, [r0, #4]
   d8ee0:	2200      	movs	r2, #0
   d8ee2:	2102      	movs	r1, #2
   d8ee4:	f7fd b920 	b.w	d6128 <network_disconnect>

000d8ee8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8ee8:	2200      	movs	r2, #0
   d8eea:	6840      	ldr	r0, [r0, #4]
   d8eec:	4611      	mov	r1, r2
   d8eee:	f7fd b913 	b.w	d6118 <network_connecting>

000d8ef2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8ef2:	2200      	movs	r2, #0
   d8ef4:	6840      	ldr	r0, [r0, #4]
   d8ef6:	4611      	mov	r1, r2
   d8ef8:	f7fd b91e 	b.w	d6138 <network_ready>

000d8efc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8efc:	2300      	movs	r3, #0
   d8efe:	6840      	ldr	r0, [r0, #4]
   d8f00:	461a      	mov	r2, r3
   d8f02:	4619      	mov	r1, r3
   d8f04:	f7fd b920 	b.w	d6148 <network_on>

000d8f08 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8f08:	2300      	movs	r3, #0
   d8f0a:	6840      	ldr	r0, [r0, #4]
   d8f0c:	461a      	mov	r2, r3
   d8f0e:	4619      	mov	r1, r3
   d8f10:	f7fd b922 	b.w	d6158 <network_off>

000d8f14 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d8f14:	6840      	ldr	r0, [r0, #4]
   d8f16:	2100      	movs	r1, #0
   d8f18:	f7fd b95e 	b.w	d61d8 <network_is_on>

000d8f1c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d8f1c:	6840      	ldr	r0, [r0, #4]
   d8f1e:	2100      	movs	r1, #0
   d8f20:	f7fd b962 	b.w	d61e8 <network_is_off>

000d8f24 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8f24:	6840      	ldr	r0, [r0, #4]
   d8f26:	2200      	movs	r2, #0
   d8f28:	f081 0101 	eor.w	r1, r1, #1
   d8f2c:	f7fd b91c 	b.w	d6168 <network_listen>

000d8f30 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8f30:	6840      	ldr	r0, [r0, #4]
   d8f32:	2200      	movs	r2, #0
   d8f34:	f7fd b940 	b.w	d61b8 <network_set_listen_timeout>

000d8f38 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8f38:	2200      	movs	r2, #0
   d8f3a:	6840      	ldr	r0, [r0, #4]
   d8f3c:	4611      	mov	r1, r2
   d8f3e:	f7fd b943 	b.w	d61c8 <network_get_listen_timeout>

000d8f42 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8f42:	2200      	movs	r2, #0
   d8f44:	6840      	ldr	r0, [r0, #4]
   d8f46:	4611      	mov	r1, r2
   d8f48:	f7fd b916 	b.w	d6178 <network_listening>

000d8f4c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8f50:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d8f52:	b095      	sub	sp, #84	; 0x54
   d8f54:	4616      	mov	r6, r2
   d8f56:	460d      	mov	r5, r1
   d8f58:	4607      	mov	r7, r0
    IPAddress addr;
   d8f5a:	f7ff faaf 	bl	d84bc <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d8f5e:	4621      	mov	r1, r4
   d8f60:	2218      	movs	r2, #24
   d8f62:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d8f64:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8f66:	f001 f92d 	bl	da1c4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8f6a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d8f6c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8f70:	4621      	mov	r1, r4
   d8f72:	466b      	mov	r3, sp
   d8f74:	aa0c      	add	r2, sp, #48	; 0x30
   d8f76:	4630      	mov	r0, r6
   d8f78:	f7fc fddc 	bl	d5b34 <netdb_getaddrinfo>
    if (!r) {
   d8f7c:	4604      	mov	r4, r0
   d8f7e:	2800      	cmp	r0, #0
   d8f80:	d14c      	bne.n	d901c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8f82:	4602      	mov	r2, r0
   d8f84:	2101      	movs	r1, #1
   d8f86:	6868      	ldr	r0, [r5, #4]
   d8f88:	f7fd f8d6 	bl	d6138 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8f8c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8f8e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8f90:	4622      	mov	r2, r4
   d8f92:	6868      	ldr	r0, [r5, #4]
   d8f94:	f7fd f8d0 	bl	d6138 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8f98:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8f9a:	4681      	mov	r9, r0
        bool ok = false;
   d8f9c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8f9e:	2e00      	cmp	r6, #0
   d8fa0:	d03c      	beq.n	d901c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d8fa2:	2900      	cmp	r1, #0
   d8fa4:	d13a      	bne.n	d901c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8fa6:	6873      	ldr	r3, [r6, #4]
   d8fa8:	2b02      	cmp	r3, #2
   d8faa:	d003      	beq.n	d8fb4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d8fac:	2b0a      	cmp	r3, #10
   d8fae:	d011      	beq.n	d8fd4 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8fb0:	69f6      	ldr	r6, [r6, #28]
   d8fb2:	e7f4      	b.n	d8f9e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8fb4:	f1b8 0f00 	cmp.w	r8, #0
   d8fb8:	d00a      	beq.n	d8fd0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8fba:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d8fbc:	a806      	add	r0, sp, #24
   d8fbe:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d8fc0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d8fc2:	f7ff fabf 	bl	d8544 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d8fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8fc8:	1d3c      	adds	r4, r7, #4
   d8fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8fcc:	682b      	ldr	r3, [r5, #0]
   d8fce:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d8fd0:	4641      	mov	r1, r8
   d8fd2:	e7ed      	b.n	d8fb0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8fd4:	f1b9 0f00 	cmp.w	r9, #0
   d8fd8:	d101      	bne.n	d8fde <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d8fda:	4649      	mov	r1, r9
   d8fdc:	e7e8      	b.n	d8fb0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8fde:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8fe0:	2210      	movs	r2, #16
   d8fe2:	a801      	add	r0, sp, #4
   d8fe4:	f001 f8ee 	bl	da1c4 <memset>
                    a.v = 6;
   d8fe8:	2306      	movs	r3, #6
   d8fea:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8fee:	ad01      	add	r5, sp, #4
   d8ff0:	f104 0308 	add.w	r3, r4, #8
   d8ff4:	3418      	adds	r4, #24
   d8ff6:	6818      	ldr	r0, [r3, #0]
   d8ff8:	6859      	ldr	r1, [r3, #4]
   d8ffa:	462a      	mov	r2, r5
   d8ffc:	c203      	stmia	r2!, {r0, r1}
   d8ffe:	3308      	adds	r3, #8
   d9000:	42a3      	cmp	r3, r4
   d9002:	4615      	mov	r5, r2
   d9004:	d1f7      	bne.n	d8ff6 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d9006:	a901      	add	r1, sp, #4
   d9008:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d900a:	ad07      	add	r5, sp, #28
   d900c:	f7ff fa64 	bl	d84d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9012:	1d3c      	adds	r4, r7, #4
   d9014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9016:	682b      	ldr	r3, [r5, #0]
   d9018:	7023      	strb	r3, [r4, #0]
   d901a:	e7de      	b.n	d8fda <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d901c:	9800      	ldr	r0, [sp, #0]
   d901e:	f7fc fd81 	bl	d5b24 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9022:	4638      	mov	r0, r7
   d9024:	b015      	add	sp, #84	; 0x54
   d9026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d902c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d902c:	4b02      	ldr	r3, [pc, #8]	; (d9038 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d902e:	4a03      	ldr	r2, [pc, #12]	; (d903c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9030:	601a      	str	r2, [r3, #0]
   d9032:	2200      	movs	r2, #0
   d9034:	605a      	str	r2, [r3, #4]

} // spark
   d9036:	4770      	bx	lr
   d9038:	2003e7c4 	.word	0x2003e7c4
   d903c:	000dad70 	.word	0x000dad70

000d9040 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d9040:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d9042:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d9044:	d902      	bls.n	d904c <pinAvailable+0xc>
    return false;
   d9046:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d9048:	b002      	add	sp, #8
   d904a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d904c:	f1a0 030b 	sub.w	r3, r0, #11
   d9050:	2b02      	cmp	r3, #2
   d9052:	d81a      	bhi.n	d908a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d9054:	4c17      	ldr	r4, [pc, #92]	; (d90b4 <pinAvailable+0x74>)
   d9056:	7821      	ldrb	r1, [r4, #0]
   d9058:	f3bf 8f5b 	dmb	ish
   d905c:	f011 0101 	ands.w	r1, r1, #1
   d9060:	d10b      	bne.n	d907a <pinAvailable+0x3a>
   d9062:	4620      	mov	r0, r4
   d9064:	9101      	str	r1, [sp, #4]
   d9066:	f7fb f81a 	bl	d409e <__cxa_guard_acquire>
   d906a:	9901      	ldr	r1, [sp, #4]
   d906c:	b128      	cbz	r0, d907a <pinAvailable+0x3a>
   d906e:	4812      	ldr	r0, [pc, #72]	; (d90b8 <pinAvailable+0x78>)
   d9070:	f7fd f976 	bl	d6360 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d9074:	4620      	mov	r0, r4
   d9076:	f7fb f817 	bl	d40a8 <__cxa_guard_release>
   d907a:	4b0f      	ldr	r3, [pc, #60]	; (d90b8 <pinAvailable+0x78>)
   d907c:	7818      	ldrb	r0, [r3, #0]
   d907e:	f7fc ff8d 	bl	d5f9c <hal_spi_is_enabled>
   d9082:	2800      	cmp	r0, #0
   d9084:	d1df      	bne.n	d9046 <pinAvailable+0x6>
  return true; // 'pin' is available
   d9086:	2001      	movs	r0, #1
   d9088:	e7de      	b.n	d9048 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d908a:	2801      	cmp	r0, #1
   d908c:	d809      	bhi.n	d90a2 <pinAvailable+0x62>
   d908e:	f000 f881 	bl	d9194 <_Z19__fetch_global_Wirev>
   d9092:	2100      	movs	r1, #0
   d9094:	7c00      	ldrb	r0, [r0, #16]
   d9096:	f7fc ff09 	bl	d5eac <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d909a:	f080 0001 	eor.w	r0, r0, #1
   d909e:	b2c0      	uxtb	r0, r0
   d90a0:	e7d2      	b.n	d9048 <pinAvailable+0x8>
   d90a2:	3809      	subs	r0, #9
   d90a4:	2801      	cmp	r0, #1
   d90a6:	d8ee      	bhi.n	d9086 <pinAvailable+0x46>
   d90a8:	f7ff fb36 	bl	d8718 <_Z22__fetch_global_Serial1v>
   d90ac:	7c00      	ldrb	r0, [r0, #16]
   d90ae:	f7fc fea5 	bl	d5dfc <hal_usart_is_enabled>
   d90b2:	e7f2      	b.n	d909a <pinAvailable+0x5a>
   d90b4:	2003e630 	.word	0x2003e630
   d90b8:	2003e634 	.word	0x2003e634

000d90bc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d90bc:	2823      	cmp	r0, #35	; 0x23
{
   d90be:	b538      	push	{r3, r4, r5, lr}
   d90c0:	4604      	mov	r4, r0
   d90c2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d90c4:	d80a      	bhi.n	d90dc <pinMode+0x20>
   d90c6:	29ff      	cmp	r1, #255	; 0xff
   d90c8:	d008      	beq.n	d90dc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d90ca:	f7ff ffb9 	bl	d9040 <pinAvailable>
   d90ce:	b128      	cbz	r0, d90dc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d90d0:	4629      	mov	r1, r5
   d90d2:	4620      	mov	r0, r4
}
   d90d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d90d8:	f7fc bd34 	b.w	d5b44 <HAL_Pin_Mode>
}
   d90dc:	bd38      	pop	{r3, r4, r5, pc}

000d90de <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d90de:	b538      	push	{r3, r4, r5, lr}
   d90e0:	4604      	mov	r4, r0
   d90e2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d90e4:	f7fc fd36 	bl	d5b54 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d90e8:	28ff      	cmp	r0, #255	; 0xff
   d90ea:	d010      	beq.n	d910e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d90ec:	2806      	cmp	r0, #6
   d90ee:	d804      	bhi.n	d90fa <digitalWrite+0x1c>
   d90f0:	234d      	movs	r3, #77	; 0x4d
   d90f2:	fa23 f000 	lsr.w	r0, r3, r0
   d90f6:	07c3      	lsls	r3, r0, #31
   d90f8:	d409      	bmi.n	d910e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d90fa:	4620      	mov	r0, r4
   d90fc:	f7ff ffa0 	bl	d9040 <pinAvailable>
   d9100:	b128      	cbz	r0, d910e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9102:	4629      	mov	r1, r5
   d9104:	4620      	mov	r0, r4
}
   d9106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d910a:	f7fc bd2b 	b.w	d5b64 <HAL_GPIO_Write>
}
   d910e:	bd38      	pop	{r3, r4, r5, pc}

000d9110 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d9110:	b510      	push	{r4, lr}
   d9112:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9114:	f7fc fd1e 	bl	d5b54 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d9118:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d911a:	b2db      	uxtb	r3, r3
   d911c:	2b01      	cmp	r3, #1
   d911e:	d908      	bls.n	d9132 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d9120:	4620      	mov	r0, r4
   d9122:	f7ff ff8d 	bl	d9040 <pinAvailable>
   d9126:	b120      	cbz	r0, d9132 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d9128:	4620      	mov	r0, r4
}
   d912a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d912e:	f7fc bd21 	b.w	d5b74 <HAL_GPIO_Read>
}
   d9132:	2000      	movs	r0, #0
   d9134:	bd10      	pop	{r4, pc}
	...

000d9138 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d9138:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d913a:	4c08      	ldr	r4, [pc, #32]	; (d915c <_Z21__fetch_global_EEPROMv+0x24>)
   d913c:	7823      	ldrb	r3, [r4, #0]
   d913e:	f3bf 8f5b 	dmb	ish
   d9142:	07db      	lsls	r3, r3, #31
   d9144:	d408      	bmi.n	d9158 <_Z21__fetch_global_EEPROMv+0x20>
   d9146:	4620      	mov	r0, r4
   d9148:	f7fa ffa9 	bl	d409e <__cxa_guard_acquire>
   d914c:	b120      	cbz	r0, d9158 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d914e:	f7fc fd39 	bl	d5bc4 <HAL_EEPROM_Init>
   d9152:	4620      	mov	r0, r4
   d9154:	f7fa ffa8 	bl	d40a8 <__cxa_guard_release>
	return eeprom;
}
   d9158:	4801      	ldr	r0, [pc, #4]	; (d9160 <_Z21__fetch_global_EEPROMv+0x28>)
   d915a:	bd10      	pop	{r4, pc}
   d915c:	2003e7d0 	.word	0x2003e7d0
   d9160:	2003e7d4 	.word	0x2003e7d4

000d9164 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d9164:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d9166:	2300      	movs	r3, #0
   d9168:	2520      	movs	r5, #32
   d916a:	8043      	strh	r3, [r0, #2]
   d916c:	2314      	movs	r3, #20
{
   d916e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d9170:	8003      	strh	r3, [r0, #0]
   d9172:	6085      	str	r5, [r0, #8]
   d9174:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9176:	4906      	ldr	r1, [pc, #24]	; (d9190 <_Z17acquireWireBufferv+0x2c>)
   d9178:	4628      	mov	r0, r5
   d917a:	f000 f83c 	bl	d91f6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d917e:	4904      	ldr	r1, [pc, #16]	; (d9190 <_Z17acquireWireBufferv+0x2c>)
	};
   d9180:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9182:	4628      	mov	r0, r5
   d9184:	f000 f837 	bl	d91f6 <_ZnajRKSt9nothrow_t>
	};
   d9188:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d918a:	4620      	mov	r0, r4
   d918c:	bd38      	pop	{r3, r4, r5, pc}
   d918e:	bf00      	nop
   d9190:	000dada4 	.word	0x000dada4

000d9194 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9194:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9196:	4d0f      	ldr	r5, [pc, #60]	; (d91d4 <_Z19__fetch_global_Wirev+0x40>)
   d9198:	7829      	ldrb	r1, [r5, #0]
   d919a:	f3bf 8f5b 	dmb	ish
   d919e:	f011 0401 	ands.w	r4, r1, #1
{
   d91a2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d91a4:	d113      	bne.n	d91ce <_Z19__fetch_global_Wirev+0x3a>
   d91a6:	4628      	mov	r0, r5
   d91a8:	f7fa ff79 	bl	d409e <__cxa_guard_acquire>
   d91ac:	b178      	cbz	r0, d91ce <_Z19__fetch_global_Wirev+0x3a>
   d91ae:	a801      	add	r0, sp, #4
   d91b0:	f7ff ffd8 	bl	d9164 <_Z17acquireWireBufferv>
   d91b4:	aa01      	add	r2, sp, #4
   d91b6:	4621      	mov	r1, r4
   d91b8:	4807      	ldr	r0, [pc, #28]	; (d91d8 <_Z19__fetch_global_Wirev+0x44>)
   d91ba:	f7ff fb03 	bl	d87c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d91be:	4628      	mov	r0, r5
   d91c0:	f7fa ff72 	bl	d40a8 <__cxa_guard_release>
   d91c4:	4a05      	ldr	r2, [pc, #20]	; (d91dc <_Z19__fetch_global_Wirev+0x48>)
   d91c6:	4906      	ldr	r1, [pc, #24]	; (d91e0 <_Z19__fetch_global_Wirev+0x4c>)
   d91c8:	4803      	ldr	r0, [pc, #12]	; (d91d8 <_Z19__fetch_global_Wirev+0x44>)
   d91ca:	f000 f80b 	bl	d91e4 <__aeabi_atexit>
	return wire;
}
   d91ce:	4802      	ldr	r0, [pc, #8]	; (d91d8 <_Z19__fetch_global_Wirev+0x44>)
   d91d0:	b007      	add	sp, #28
   d91d2:	bd30      	pop	{r4, r5, pc}
   d91d4:	2003e7d8 	.word	0x2003e7d8
   d91d8:	2003e7dc 	.word	0x2003e7dc
   d91dc:	2003df68 	.word	0x2003df68
   d91e0:	000d876d 	.word	0x000d876d

000d91e4 <__aeabi_atexit>:
   d91e4:	460b      	mov	r3, r1
   d91e6:	4601      	mov	r1, r0
   d91e8:	4618      	mov	r0, r3
   d91ea:	f000 bf93 	b.w	da114 <__cxa_atexit>

000d91ee <_ZdlPvj>:
   d91ee:	f7fa bf54 	b.w	d409a <_ZdlPv>

000d91f2 <_ZnwjRKSt9nothrow_t>:
   d91f2:	f7fa bf4e 	b.w	d4092 <_Znwj>

000d91f6 <_ZnajRKSt9nothrow_t>:
   d91f6:	f7fa bf4e 	b.w	d4096 <_Znaj>

000d91fa <_ZSt25__throw_bad_function_callv>:
   d91fa:	b508      	push	{r3, lr}
   d91fc:	f7fd f854 	bl	d62a8 <abort>

000d9200 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d9200:	4901      	ldr	r1, [pc, #4]	; (d9208 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d9202:	f000 b8f9 	b.w	d93f8 <_ZNKSt9type_infoeqERKS_>
   d9206:	bf00      	nop
   d9208:	000dadc0 	.word	0x000dadc0

000d920c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d920c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d920e:	2400      	movs	r4, #0
   d9210:	2310      	movs	r3, #16
   d9212:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d9216:	6803      	ldr	r3, [r0, #0]
   d9218:	9400      	str	r4, [sp, #0]
   d921a:	699e      	ldr	r6, [r3, #24]
   d921c:	f88d 4004 	strb.w	r4, [sp, #4]
   d9220:	4615      	mov	r5, r2
   d9222:	466b      	mov	r3, sp
   d9224:	6812      	ldr	r2, [r2, #0]
   d9226:	47b0      	blx	r6
   d9228:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d922c:	f003 0306 	and.w	r3, r3, #6
   d9230:	2b06      	cmp	r3, #6
   d9232:	bf03      	ittte	eq
   d9234:	9b00      	ldreq	r3, [sp, #0]
   d9236:	602b      	streq	r3, [r5, #0]
   d9238:	2001      	moveq	r0, #1
   d923a:	4620      	movne	r0, r4
   d923c:	b004      	add	sp, #16
   d923e:	bd70      	pop	{r4, r5, r6, pc}

000d9240 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d9240:	9800      	ldr	r0, [sp, #0]
   d9242:	4290      	cmp	r0, r2
   d9244:	bf14      	ite	ne
   d9246:	2001      	movne	r0, #1
   d9248:	2006      	moveq	r0, #6
   d924a:	4770      	bx	lr

000d924c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d924c:	b510      	push	{r4, lr}
   d924e:	4b03      	ldr	r3, [pc, #12]	; (d925c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d9250:	6003      	str	r3, [r0, #0]
   d9252:	4604      	mov	r4, r0
   d9254:	f000 f8cd 	bl	d93f2 <_ZNSt9type_infoD1Ev>
   d9258:	4620      	mov	r0, r4
   d925a:	bd10      	pop	{r4, pc}
   d925c:	000dae00 	.word	0x000dae00

000d9260 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d9260:	b510      	push	{r4, lr}
   d9262:	4604      	mov	r4, r0
   d9264:	f7ff fff2 	bl	d924c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d9268:	4620      	mov	r0, r4
   d926a:	2108      	movs	r1, #8
   d926c:	f7ff ffbf 	bl	d91ee <_ZdlPvj>
   d9270:	4620      	mov	r0, r4
   d9272:	bd10      	pop	{r4, pc}

000d9274 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d9274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9278:	461f      	mov	r7, r3
   d927a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d927e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d9282:	4598      	cmp	r8, r3
   d9284:	4606      	mov	r6, r0
   d9286:	4615      	mov	r5, r2
   d9288:	d107      	bne.n	d929a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d928a:	9907      	ldr	r1, [sp, #28]
   d928c:	f000 f8b4 	bl	d93f8 <_ZNKSt9type_infoeqERKS_>
   d9290:	b118      	cbz	r0, d929a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d9292:	7165      	strb	r5, [r4, #5]
   d9294:	2000      	movs	r0, #0
   d9296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d929a:	4639      	mov	r1, r7
   d929c:	4630      	mov	r0, r6
   d929e:	f000 f8ab 	bl	d93f8 <_ZNKSt9type_infoeqERKS_>
   d92a2:	2800      	cmp	r0, #0
   d92a4:	d0f6      	beq.n	d9294 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d92a6:	2301      	movs	r3, #1
   d92a8:	f8c4 8000 	str.w	r8, [r4]
   d92ac:	7125      	strb	r5, [r4, #4]
   d92ae:	71a3      	strb	r3, [r4, #6]
   d92b0:	e7f0      	b.n	d9294 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d92b2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d92b2:	b538      	push	{r3, r4, r5, lr}
   d92b4:	4615      	mov	r5, r2
   d92b6:	461c      	mov	r4, r3
   d92b8:	f000 f89e 	bl	d93f8 <_ZNKSt9type_infoeqERKS_>
   d92bc:	b120      	cbz	r0, d92c8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d92be:	2308      	movs	r3, #8
   d92c0:	60e3      	str	r3, [r4, #12]
   d92c2:	2306      	movs	r3, #6
   d92c4:	6025      	str	r5, [r4, #0]
   d92c6:	7123      	strb	r3, [r4, #4]
   d92c8:	bd38      	pop	{r3, r4, r5, pc}

000d92ca <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d92ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d92cc:	4605      	mov	r5, r0
   d92ce:	460c      	mov	r4, r1
   d92d0:	9201      	str	r2, [sp, #4]
   d92d2:	461e      	mov	r6, r3
   d92d4:	f000 f890 	bl	d93f8 <_ZNKSt9type_infoeqERKS_>
   d92d8:	b950      	cbnz	r0, d92f0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d92da:	2e03      	cmp	r6, #3
   d92dc:	d808      	bhi.n	d92f0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d92de:	6823      	ldr	r3, [r4, #0]
   d92e0:	9a01      	ldr	r2, [sp, #4]
   d92e2:	695b      	ldr	r3, [r3, #20]
   d92e4:	4629      	mov	r1, r5
   d92e6:	4620      	mov	r0, r4
   d92e8:	b002      	add	sp, #8
   d92ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d92ee:	4718      	bx	r3
   d92f0:	b002      	add	sp, #8
   d92f2:	bd70      	pop	{r4, r5, r6, pc}

000d92f4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d92f4:	b510      	push	{r4, lr}
   d92f6:	4b03      	ldr	r3, [pc, #12]	; (d9304 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d92f8:	6003      	str	r3, [r0, #0]
   d92fa:	4604      	mov	r4, r0
   d92fc:	f7ff ffa6 	bl	d924c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d9300:	4620      	mov	r0, r4
   d9302:	bd10      	pop	{r4, pc}
   d9304:	000dae60 	.word	0x000dae60

000d9308 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d9308:	b510      	push	{r4, lr}
   d930a:	4604      	mov	r4, r0
   d930c:	f7ff fff2 	bl	d92f4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d9310:	4620      	mov	r0, r4
   d9312:	210c      	movs	r1, #12
   d9314:	f7ff ff6b 	bl	d91ee <_ZdlPvj>
   d9318:	4620      	mov	r0, r4
   d931a:	bd10      	pop	{r4, pc}

000d931c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d931c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d931e:	9f08      	ldr	r7, [sp, #32]
   d9320:	4297      	cmp	r7, r2
   d9322:	4605      	mov	r5, r0
   d9324:	460e      	mov	r6, r1
   d9326:	4614      	mov	r4, r2
   d9328:	d00a      	beq.n	d9340 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d932a:	68a8      	ldr	r0, [r5, #8]
   d932c:	6802      	ldr	r2, [r0, #0]
   d932e:	9708      	str	r7, [sp, #32]
   d9330:	6a15      	ldr	r5, [r2, #32]
   d9332:	4631      	mov	r1, r6
   d9334:	4622      	mov	r2, r4
   d9336:	46ac      	mov	ip, r5
   d9338:	b003      	add	sp, #12
   d933a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d933e:	4760      	bx	ip
   d9340:	4619      	mov	r1, r3
   d9342:	9301      	str	r3, [sp, #4]
   d9344:	f000 f858 	bl	d93f8 <_ZNKSt9type_infoeqERKS_>
   d9348:	9b01      	ldr	r3, [sp, #4]
   d934a:	2800      	cmp	r0, #0
   d934c:	d0ed      	beq.n	d932a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d934e:	2006      	movs	r0, #6
   d9350:	b003      	add	sp, #12
   d9352:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9354 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d9354:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9358:	460d      	mov	r5, r1
   d935a:	4619      	mov	r1, r3
   d935c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d9360:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d9364:	4681      	mov	r9, r0
   d9366:	4617      	mov	r7, r2
   d9368:	4698      	mov	r8, r3
   d936a:	f000 f845 	bl	d93f8 <_ZNKSt9type_infoeqERKS_>
   d936e:	b190      	cbz	r0, d9396 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d9370:	2d00      	cmp	r5, #0
   d9372:	6034      	str	r4, [r6, #0]
   d9374:	7137      	strb	r7, [r6, #4]
   d9376:	db09      	blt.n	d938c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d9378:	1961      	adds	r1, r4, r5
   d937a:	458a      	cmp	sl, r1
   d937c:	bf0c      	ite	eq
   d937e:	2106      	moveq	r1, #6
   d9380:	2101      	movne	r1, #1
   d9382:	71b1      	strb	r1, [r6, #6]
   d9384:	2000      	movs	r0, #0
   d9386:	b001      	add	sp, #4
   d9388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d938c:	3502      	adds	r5, #2
   d938e:	d1f9      	bne.n	d9384 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d9390:	2301      	movs	r3, #1
   d9392:	71b3      	strb	r3, [r6, #6]
   d9394:	e7f6      	b.n	d9384 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d9396:	4554      	cmp	r4, sl
   d9398:	d106      	bne.n	d93a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d939a:	4659      	mov	r1, fp
   d939c:	4648      	mov	r0, r9
   d939e:	f000 f82b 	bl	d93f8 <_ZNKSt9type_infoeqERKS_>
   d93a2:	b108      	cbz	r0, d93a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d93a4:	7177      	strb	r7, [r6, #5]
   d93a6:	e7ed      	b.n	d9384 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d93a8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d93ac:	6803      	ldr	r3, [r0, #0]
   d93ae:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d93b2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d93b6:	69dc      	ldr	r4, [r3, #28]
   d93b8:	463a      	mov	r2, r7
   d93ba:	4643      	mov	r3, r8
   d93bc:	4629      	mov	r1, r5
   d93be:	46a4      	mov	ip, r4
   d93c0:	b001      	add	sp, #4
   d93c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d93c6:	4760      	bx	ip

000d93c8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d93c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d93cc:	4607      	mov	r7, r0
   d93ce:	460c      	mov	r4, r1
   d93d0:	4615      	mov	r5, r2
   d93d2:	461e      	mov	r6, r3
   d93d4:	f7ff ff6d 	bl	d92b2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d93d8:	b948      	cbnz	r0, d93ee <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d93da:	68b8      	ldr	r0, [r7, #8]
   d93dc:	6803      	ldr	r3, [r0, #0]
   d93de:	699f      	ldr	r7, [r3, #24]
   d93e0:	462a      	mov	r2, r5
   d93e2:	4633      	mov	r3, r6
   d93e4:	4621      	mov	r1, r4
   d93e6:	46bc      	mov	ip, r7
   d93e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d93ec:	4760      	bx	ip
   d93ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d93f2 <_ZNSt9type_infoD1Ev>:
   d93f2:	4770      	bx	lr

000d93f4 <_ZNKSt9type_info14__is_pointer_pEv>:
   d93f4:	2000      	movs	r0, #0
   d93f6:	4770      	bx	lr

000d93f8 <_ZNKSt9type_infoeqERKS_>:
   d93f8:	4281      	cmp	r1, r0
   d93fa:	b508      	push	{r3, lr}
   d93fc:	d00e      	beq.n	d941c <_ZNKSt9type_infoeqERKS_+0x24>
   d93fe:	6840      	ldr	r0, [r0, #4]
   d9400:	7803      	ldrb	r3, [r0, #0]
   d9402:	2b2a      	cmp	r3, #42	; 0x2a
   d9404:	d00c      	beq.n	d9420 <_ZNKSt9type_infoeqERKS_+0x28>
   d9406:	6849      	ldr	r1, [r1, #4]
   d9408:	780b      	ldrb	r3, [r1, #0]
   d940a:	2b2a      	cmp	r3, #42	; 0x2a
   d940c:	bf08      	it	eq
   d940e:	3101      	addeq	r1, #1
   d9410:	f000 ff04 	bl	da21c <strcmp>
   d9414:	fab0 f080 	clz	r0, r0
   d9418:	0940      	lsrs	r0, r0, #5
   d941a:	bd08      	pop	{r3, pc}
   d941c:	2001      	movs	r0, #1
   d941e:	e7fc      	b.n	d941a <_ZNKSt9type_infoeqERKS_+0x22>
   d9420:	2000      	movs	r0, #0
   d9422:	e7fa      	b.n	d941a <_ZNKSt9type_infoeqERKS_+0x22>

000d9424 <roundf>:
   d9424:	ee10 3a10 	vmov	r3, s0
   d9428:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   d942c:	3a7f      	subs	r2, #127	; 0x7f
   d942e:	2a16      	cmp	r2, #22
   d9430:	ee10 1a10 	vmov	r1, s0
   d9434:	dc0e      	bgt.n	d9454 <roundf+0x30>
   d9436:	2a00      	cmp	r2, #0
   d9438:	db11      	blt.n	d945e <roundf+0x3a>
   d943a:	480c      	ldr	r0, [pc, #48]	; (d946c <roundf+0x48>)
   d943c:	4110      	asrs	r0, r2
   d943e:	4203      	tst	r3, r0
   d9440:	d005      	beq.n	d944e <roundf+0x2a>
   d9442:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   d9446:	4113      	asrs	r3, r2
   d9448:	440b      	add	r3, r1
   d944a:	ea23 0300 	bic.w	r3, r3, r0
   d944e:	ee00 3a10 	vmov	s0, r3
   d9452:	4770      	bx	lr
   d9454:	2a80      	cmp	r2, #128	; 0x80
   d9456:	d1fa      	bne.n	d944e <roundf+0x2a>
   d9458:	ee30 0a00 	vadd.f32	s0, s0, s0
   d945c:	4770      	bx	lr
   d945e:	3201      	adds	r2, #1
   d9460:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   d9464:	d1f3      	bne.n	d944e <roundf+0x2a>
   d9466:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   d946a:	e7f0      	b.n	d944e <roundf+0x2a>
   d946c:	007fffff 	.word	0x007fffff

000d9470 <__aeabi_drsub>:
   d9470:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9474:	e002      	b.n	d947c <__adddf3>
   d9476:	bf00      	nop

000d9478 <__aeabi_dsub>:
   d9478:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d947c <__adddf3>:
   d947c:	b530      	push	{r4, r5, lr}
   d947e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d9482:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d9486:	ea94 0f05 	teq	r4, r5
   d948a:	bf08      	it	eq
   d948c:	ea90 0f02 	teqeq	r0, r2
   d9490:	bf1f      	itttt	ne
   d9492:	ea54 0c00 	orrsne.w	ip, r4, r0
   d9496:	ea55 0c02 	orrsne.w	ip, r5, r2
   d949a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d949e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d94a2:	f000 80e2 	beq.w	d966a <__adddf3+0x1ee>
   d94a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d94aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d94ae:	bfb8      	it	lt
   d94b0:	426d      	neglt	r5, r5
   d94b2:	dd0c      	ble.n	d94ce <__adddf3+0x52>
   d94b4:	442c      	add	r4, r5
   d94b6:	ea80 0202 	eor.w	r2, r0, r2
   d94ba:	ea81 0303 	eor.w	r3, r1, r3
   d94be:	ea82 0000 	eor.w	r0, r2, r0
   d94c2:	ea83 0101 	eor.w	r1, r3, r1
   d94c6:	ea80 0202 	eor.w	r2, r0, r2
   d94ca:	ea81 0303 	eor.w	r3, r1, r3
   d94ce:	2d36      	cmp	r5, #54	; 0x36
   d94d0:	bf88      	it	hi
   d94d2:	bd30      	pophi	{r4, r5, pc}
   d94d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d94d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d94dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d94e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d94e4:	d002      	beq.n	d94ec <__adddf3+0x70>
   d94e6:	4240      	negs	r0, r0
   d94e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d94ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d94f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d94f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d94f8:	d002      	beq.n	d9500 <__adddf3+0x84>
   d94fa:	4252      	negs	r2, r2
   d94fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9500:	ea94 0f05 	teq	r4, r5
   d9504:	f000 80a7 	beq.w	d9656 <__adddf3+0x1da>
   d9508:	f1a4 0401 	sub.w	r4, r4, #1
   d950c:	f1d5 0e20 	rsbs	lr, r5, #32
   d9510:	db0d      	blt.n	d952e <__adddf3+0xb2>
   d9512:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9516:	fa22 f205 	lsr.w	r2, r2, r5
   d951a:	1880      	adds	r0, r0, r2
   d951c:	f141 0100 	adc.w	r1, r1, #0
   d9520:	fa03 f20e 	lsl.w	r2, r3, lr
   d9524:	1880      	adds	r0, r0, r2
   d9526:	fa43 f305 	asr.w	r3, r3, r5
   d952a:	4159      	adcs	r1, r3
   d952c:	e00e      	b.n	d954c <__adddf3+0xd0>
   d952e:	f1a5 0520 	sub.w	r5, r5, #32
   d9532:	f10e 0e20 	add.w	lr, lr, #32
   d9536:	2a01      	cmp	r2, #1
   d9538:	fa03 fc0e 	lsl.w	ip, r3, lr
   d953c:	bf28      	it	cs
   d953e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9542:	fa43 f305 	asr.w	r3, r3, r5
   d9546:	18c0      	adds	r0, r0, r3
   d9548:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d954c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9550:	d507      	bpl.n	d9562 <__adddf3+0xe6>
   d9552:	f04f 0e00 	mov.w	lr, #0
   d9556:	f1dc 0c00 	rsbs	ip, ip, #0
   d955a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d955e:	eb6e 0101 	sbc.w	r1, lr, r1
   d9562:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9566:	d31b      	bcc.n	d95a0 <__adddf3+0x124>
   d9568:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d956c:	d30c      	bcc.n	d9588 <__adddf3+0x10c>
   d956e:	0849      	lsrs	r1, r1, #1
   d9570:	ea5f 0030 	movs.w	r0, r0, rrx
   d9574:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9578:	f104 0401 	add.w	r4, r4, #1
   d957c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9580:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9584:	f080 809a 	bcs.w	d96bc <__adddf3+0x240>
   d9588:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d958c:	bf08      	it	eq
   d958e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9592:	f150 0000 	adcs.w	r0, r0, #0
   d9596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d959a:	ea41 0105 	orr.w	r1, r1, r5
   d959e:	bd30      	pop	{r4, r5, pc}
   d95a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d95a4:	4140      	adcs	r0, r0
   d95a6:	eb41 0101 	adc.w	r1, r1, r1
   d95aa:	3c01      	subs	r4, #1
   d95ac:	bf28      	it	cs
   d95ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d95b2:	d2e9      	bcs.n	d9588 <__adddf3+0x10c>
   d95b4:	f091 0f00 	teq	r1, #0
   d95b8:	bf04      	itt	eq
   d95ba:	4601      	moveq	r1, r0
   d95bc:	2000      	moveq	r0, #0
   d95be:	fab1 f381 	clz	r3, r1
   d95c2:	bf08      	it	eq
   d95c4:	3320      	addeq	r3, #32
   d95c6:	f1a3 030b 	sub.w	r3, r3, #11
   d95ca:	f1b3 0220 	subs.w	r2, r3, #32
   d95ce:	da0c      	bge.n	d95ea <__adddf3+0x16e>
   d95d0:	320c      	adds	r2, #12
   d95d2:	dd08      	ble.n	d95e6 <__adddf3+0x16a>
   d95d4:	f102 0c14 	add.w	ip, r2, #20
   d95d8:	f1c2 020c 	rsb	r2, r2, #12
   d95dc:	fa01 f00c 	lsl.w	r0, r1, ip
   d95e0:	fa21 f102 	lsr.w	r1, r1, r2
   d95e4:	e00c      	b.n	d9600 <__adddf3+0x184>
   d95e6:	f102 0214 	add.w	r2, r2, #20
   d95ea:	bfd8      	it	le
   d95ec:	f1c2 0c20 	rsble	ip, r2, #32
   d95f0:	fa01 f102 	lsl.w	r1, r1, r2
   d95f4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d95f8:	bfdc      	itt	le
   d95fa:	ea41 010c 	orrle.w	r1, r1, ip
   d95fe:	4090      	lslle	r0, r2
   d9600:	1ae4      	subs	r4, r4, r3
   d9602:	bfa2      	ittt	ge
   d9604:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9608:	4329      	orrge	r1, r5
   d960a:	bd30      	popge	{r4, r5, pc}
   d960c:	ea6f 0404 	mvn.w	r4, r4
   d9610:	3c1f      	subs	r4, #31
   d9612:	da1c      	bge.n	d964e <__adddf3+0x1d2>
   d9614:	340c      	adds	r4, #12
   d9616:	dc0e      	bgt.n	d9636 <__adddf3+0x1ba>
   d9618:	f104 0414 	add.w	r4, r4, #20
   d961c:	f1c4 0220 	rsb	r2, r4, #32
   d9620:	fa20 f004 	lsr.w	r0, r0, r4
   d9624:	fa01 f302 	lsl.w	r3, r1, r2
   d9628:	ea40 0003 	orr.w	r0, r0, r3
   d962c:	fa21 f304 	lsr.w	r3, r1, r4
   d9630:	ea45 0103 	orr.w	r1, r5, r3
   d9634:	bd30      	pop	{r4, r5, pc}
   d9636:	f1c4 040c 	rsb	r4, r4, #12
   d963a:	f1c4 0220 	rsb	r2, r4, #32
   d963e:	fa20 f002 	lsr.w	r0, r0, r2
   d9642:	fa01 f304 	lsl.w	r3, r1, r4
   d9646:	ea40 0003 	orr.w	r0, r0, r3
   d964a:	4629      	mov	r1, r5
   d964c:	bd30      	pop	{r4, r5, pc}
   d964e:	fa21 f004 	lsr.w	r0, r1, r4
   d9652:	4629      	mov	r1, r5
   d9654:	bd30      	pop	{r4, r5, pc}
   d9656:	f094 0f00 	teq	r4, #0
   d965a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d965e:	bf06      	itte	eq
   d9660:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9664:	3401      	addeq	r4, #1
   d9666:	3d01      	subne	r5, #1
   d9668:	e74e      	b.n	d9508 <__adddf3+0x8c>
   d966a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d966e:	bf18      	it	ne
   d9670:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9674:	d029      	beq.n	d96ca <__adddf3+0x24e>
   d9676:	ea94 0f05 	teq	r4, r5
   d967a:	bf08      	it	eq
   d967c:	ea90 0f02 	teqeq	r0, r2
   d9680:	d005      	beq.n	d968e <__adddf3+0x212>
   d9682:	ea54 0c00 	orrs.w	ip, r4, r0
   d9686:	bf04      	itt	eq
   d9688:	4619      	moveq	r1, r3
   d968a:	4610      	moveq	r0, r2
   d968c:	bd30      	pop	{r4, r5, pc}
   d968e:	ea91 0f03 	teq	r1, r3
   d9692:	bf1e      	ittt	ne
   d9694:	2100      	movne	r1, #0
   d9696:	2000      	movne	r0, #0
   d9698:	bd30      	popne	{r4, r5, pc}
   d969a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d969e:	d105      	bne.n	d96ac <__adddf3+0x230>
   d96a0:	0040      	lsls	r0, r0, #1
   d96a2:	4149      	adcs	r1, r1
   d96a4:	bf28      	it	cs
   d96a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d96aa:	bd30      	pop	{r4, r5, pc}
   d96ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d96b0:	bf3c      	itt	cc
   d96b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d96b6:	bd30      	popcc	{r4, r5, pc}
   d96b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d96bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d96c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d96c4:	f04f 0000 	mov.w	r0, #0
   d96c8:	bd30      	pop	{r4, r5, pc}
   d96ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d96ce:	bf1a      	itte	ne
   d96d0:	4619      	movne	r1, r3
   d96d2:	4610      	movne	r0, r2
   d96d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d96d8:	bf1c      	itt	ne
   d96da:	460b      	movne	r3, r1
   d96dc:	4602      	movne	r2, r0
   d96de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d96e2:	bf06      	itte	eq
   d96e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d96e8:	ea91 0f03 	teqeq	r1, r3
   d96ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d96f0:	bd30      	pop	{r4, r5, pc}
   d96f2:	bf00      	nop

000d96f4 <__aeabi_ui2d>:
   d96f4:	f090 0f00 	teq	r0, #0
   d96f8:	bf04      	itt	eq
   d96fa:	2100      	moveq	r1, #0
   d96fc:	4770      	bxeq	lr
   d96fe:	b530      	push	{r4, r5, lr}
   d9700:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9704:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9708:	f04f 0500 	mov.w	r5, #0
   d970c:	f04f 0100 	mov.w	r1, #0
   d9710:	e750      	b.n	d95b4 <__adddf3+0x138>
   d9712:	bf00      	nop

000d9714 <__aeabi_i2d>:
   d9714:	f090 0f00 	teq	r0, #0
   d9718:	bf04      	itt	eq
   d971a:	2100      	moveq	r1, #0
   d971c:	4770      	bxeq	lr
   d971e:	b530      	push	{r4, r5, lr}
   d9720:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9724:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9728:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d972c:	bf48      	it	mi
   d972e:	4240      	negmi	r0, r0
   d9730:	f04f 0100 	mov.w	r1, #0
   d9734:	e73e      	b.n	d95b4 <__adddf3+0x138>
   d9736:	bf00      	nop

000d9738 <__aeabi_f2d>:
   d9738:	0042      	lsls	r2, r0, #1
   d973a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d973e:	ea4f 0131 	mov.w	r1, r1, rrx
   d9742:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9746:	bf1f      	itttt	ne
   d9748:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d974c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9750:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9754:	4770      	bxne	lr
   d9756:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d975a:	bf08      	it	eq
   d975c:	4770      	bxeq	lr
   d975e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d9762:	bf04      	itt	eq
   d9764:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d9768:	4770      	bxeq	lr
   d976a:	b530      	push	{r4, r5, lr}
   d976c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9770:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9778:	e71c      	b.n	d95b4 <__adddf3+0x138>
   d977a:	bf00      	nop

000d977c <__aeabi_ul2d>:
   d977c:	ea50 0201 	orrs.w	r2, r0, r1
   d9780:	bf08      	it	eq
   d9782:	4770      	bxeq	lr
   d9784:	b530      	push	{r4, r5, lr}
   d9786:	f04f 0500 	mov.w	r5, #0
   d978a:	e00a      	b.n	d97a2 <__aeabi_l2d+0x16>

000d978c <__aeabi_l2d>:
   d978c:	ea50 0201 	orrs.w	r2, r0, r1
   d9790:	bf08      	it	eq
   d9792:	4770      	bxeq	lr
   d9794:	b530      	push	{r4, r5, lr}
   d9796:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d979a:	d502      	bpl.n	d97a2 <__aeabi_l2d+0x16>
   d979c:	4240      	negs	r0, r0
   d979e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d97a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d97a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d97aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d97ae:	f43f aed8 	beq.w	d9562 <__adddf3+0xe6>
   d97b2:	f04f 0203 	mov.w	r2, #3
   d97b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d97ba:	bf18      	it	ne
   d97bc:	3203      	addne	r2, #3
   d97be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d97c2:	bf18      	it	ne
   d97c4:	3203      	addne	r2, #3
   d97c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d97ca:	f1c2 0320 	rsb	r3, r2, #32
   d97ce:	fa00 fc03 	lsl.w	ip, r0, r3
   d97d2:	fa20 f002 	lsr.w	r0, r0, r2
   d97d6:	fa01 fe03 	lsl.w	lr, r1, r3
   d97da:	ea40 000e 	orr.w	r0, r0, lr
   d97de:	fa21 f102 	lsr.w	r1, r1, r2
   d97e2:	4414      	add	r4, r2
   d97e4:	e6bd      	b.n	d9562 <__adddf3+0xe6>
   d97e6:	bf00      	nop

000d97e8 <__aeabi_dmul>:
   d97e8:	b570      	push	{r4, r5, r6, lr}
   d97ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d97ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d97f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d97f6:	bf1d      	ittte	ne
   d97f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d97fc:	ea94 0f0c 	teqne	r4, ip
   d9800:	ea95 0f0c 	teqne	r5, ip
   d9804:	f000 f8de 	bleq	d99c4 <__aeabi_dmul+0x1dc>
   d9808:	442c      	add	r4, r5
   d980a:	ea81 0603 	eor.w	r6, r1, r3
   d980e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9812:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9816:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d981a:	bf18      	it	ne
   d981c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9820:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9824:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9828:	d038      	beq.n	d989c <__aeabi_dmul+0xb4>
   d982a:	fba0 ce02 	umull	ip, lr, r0, r2
   d982e:	f04f 0500 	mov.w	r5, #0
   d9832:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9836:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d983a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d983e:	f04f 0600 	mov.w	r6, #0
   d9842:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9846:	f09c 0f00 	teq	ip, #0
   d984a:	bf18      	it	ne
   d984c:	f04e 0e01 	orrne.w	lr, lr, #1
   d9850:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9854:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9858:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d985c:	d204      	bcs.n	d9868 <__aeabi_dmul+0x80>
   d985e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9862:	416d      	adcs	r5, r5
   d9864:	eb46 0606 	adc.w	r6, r6, r6
   d9868:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d986c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9870:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9874:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9878:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d987c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9880:	bf88      	it	hi
   d9882:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9886:	d81e      	bhi.n	d98c6 <__aeabi_dmul+0xde>
   d9888:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d988c:	bf08      	it	eq
   d988e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9892:	f150 0000 	adcs.w	r0, r0, #0
   d9896:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d989a:	bd70      	pop	{r4, r5, r6, pc}
   d989c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d98a0:	ea46 0101 	orr.w	r1, r6, r1
   d98a4:	ea40 0002 	orr.w	r0, r0, r2
   d98a8:	ea81 0103 	eor.w	r1, r1, r3
   d98ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d98b0:	bfc2      	ittt	gt
   d98b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d98b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d98ba:	bd70      	popgt	{r4, r5, r6, pc}
   d98bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d98c0:	f04f 0e00 	mov.w	lr, #0
   d98c4:	3c01      	subs	r4, #1
   d98c6:	f300 80ab 	bgt.w	d9a20 <__aeabi_dmul+0x238>
   d98ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d98ce:	bfde      	ittt	le
   d98d0:	2000      	movle	r0, #0
   d98d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d98d6:	bd70      	pople	{r4, r5, r6, pc}
   d98d8:	f1c4 0400 	rsb	r4, r4, #0
   d98dc:	3c20      	subs	r4, #32
   d98de:	da35      	bge.n	d994c <__aeabi_dmul+0x164>
   d98e0:	340c      	adds	r4, #12
   d98e2:	dc1b      	bgt.n	d991c <__aeabi_dmul+0x134>
   d98e4:	f104 0414 	add.w	r4, r4, #20
   d98e8:	f1c4 0520 	rsb	r5, r4, #32
   d98ec:	fa00 f305 	lsl.w	r3, r0, r5
   d98f0:	fa20 f004 	lsr.w	r0, r0, r4
   d98f4:	fa01 f205 	lsl.w	r2, r1, r5
   d98f8:	ea40 0002 	orr.w	r0, r0, r2
   d98fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9900:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9904:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9908:	fa21 f604 	lsr.w	r6, r1, r4
   d990c:	eb42 0106 	adc.w	r1, r2, r6
   d9910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9914:	bf08      	it	eq
   d9916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d991a:	bd70      	pop	{r4, r5, r6, pc}
   d991c:	f1c4 040c 	rsb	r4, r4, #12
   d9920:	f1c4 0520 	rsb	r5, r4, #32
   d9924:	fa00 f304 	lsl.w	r3, r0, r4
   d9928:	fa20 f005 	lsr.w	r0, r0, r5
   d992c:	fa01 f204 	lsl.w	r2, r1, r4
   d9930:	ea40 0002 	orr.w	r0, r0, r2
   d9934:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9938:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d993c:	f141 0100 	adc.w	r1, r1, #0
   d9940:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9944:	bf08      	it	eq
   d9946:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d994a:	bd70      	pop	{r4, r5, r6, pc}
   d994c:	f1c4 0520 	rsb	r5, r4, #32
   d9950:	fa00 f205 	lsl.w	r2, r0, r5
   d9954:	ea4e 0e02 	orr.w	lr, lr, r2
   d9958:	fa20 f304 	lsr.w	r3, r0, r4
   d995c:	fa01 f205 	lsl.w	r2, r1, r5
   d9960:	ea43 0302 	orr.w	r3, r3, r2
   d9964:	fa21 f004 	lsr.w	r0, r1, r4
   d9968:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d996c:	fa21 f204 	lsr.w	r2, r1, r4
   d9970:	ea20 0002 	bic.w	r0, r0, r2
   d9974:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9978:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d997c:	bf08      	it	eq
   d997e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9982:	bd70      	pop	{r4, r5, r6, pc}
   d9984:	f094 0f00 	teq	r4, #0
   d9988:	d10f      	bne.n	d99aa <__aeabi_dmul+0x1c2>
   d998a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d998e:	0040      	lsls	r0, r0, #1
   d9990:	eb41 0101 	adc.w	r1, r1, r1
   d9994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9998:	bf08      	it	eq
   d999a:	3c01      	subeq	r4, #1
   d999c:	d0f7      	beq.n	d998e <__aeabi_dmul+0x1a6>
   d999e:	ea41 0106 	orr.w	r1, r1, r6
   d99a2:	f095 0f00 	teq	r5, #0
   d99a6:	bf18      	it	ne
   d99a8:	4770      	bxne	lr
   d99aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d99ae:	0052      	lsls	r2, r2, #1
   d99b0:	eb43 0303 	adc.w	r3, r3, r3
   d99b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d99b8:	bf08      	it	eq
   d99ba:	3d01      	subeq	r5, #1
   d99bc:	d0f7      	beq.n	d99ae <__aeabi_dmul+0x1c6>
   d99be:	ea43 0306 	orr.w	r3, r3, r6
   d99c2:	4770      	bx	lr
   d99c4:	ea94 0f0c 	teq	r4, ip
   d99c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d99cc:	bf18      	it	ne
   d99ce:	ea95 0f0c 	teqne	r5, ip
   d99d2:	d00c      	beq.n	d99ee <__aeabi_dmul+0x206>
   d99d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d99d8:	bf18      	it	ne
   d99da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d99de:	d1d1      	bne.n	d9984 <__aeabi_dmul+0x19c>
   d99e0:	ea81 0103 	eor.w	r1, r1, r3
   d99e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d99e8:	f04f 0000 	mov.w	r0, #0
   d99ec:	bd70      	pop	{r4, r5, r6, pc}
   d99ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d99f2:	bf06      	itte	eq
   d99f4:	4610      	moveq	r0, r2
   d99f6:	4619      	moveq	r1, r3
   d99f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d99fc:	d019      	beq.n	d9a32 <__aeabi_dmul+0x24a>
   d99fe:	ea94 0f0c 	teq	r4, ip
   d9a02:	d102      	bne.n	d9a0a <__aeabi_dmul+0x222>
   d9a04:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9a08:	d113      	bne.n	d9a32 <__aeabi_dmul+0x24a>
   d9a0a:	ea95 0f0c 	teq	r5, ip
   d9a0e:	d105      	bne.n	d9a1c <__aeabi_dmul+0x234>
   d9a10:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9a14:	bf1c      	itt	ne
   d9a16:	4610      	movne	r0, r2
   d9a18:	4619      	movne	r1, r3
   d9a1a:	d10a      	bne.n	d9a32 <__aeabi_dmul+0x24a>
   d9a1c:	ea81 0103 	eor.w	r1, r1, r3
   d9a20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9a24:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9a28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9a2c:	f04f 0000 	mov.w	r0, #0
   d9a30:	bd70      	pop	{r4, r5, r6, pc}
   d9a32:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9a36:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9a3a:	bd70      	pop	{r4, r5, r6, pc}

000d9a3c <__aeabi_ddiv>:
   d9a3c:	b570      	push	{r4, r5, r6, lr}
   d9a3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9a42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9a46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9a4a:	bf1d      	ittte	ne
   d9a4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9a50:	ea94 0f0c 	teqne	r4, ip
   d9a54:	ea95 0f0c 	teqne	r5, ip
   d9a58:	f000 f8a7 	bleq	d9baa <__aeabi_ddiv+0x16e>
   d9a5c:	eba4 0405 	sub.w	r4, r4, r5
   d9a60:	ea81 0e03 	eor.w	lr, r1, r3
   d9a64:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9a68:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9a6c:	f000 8088 	beq.w	d9b80 <__aeabi_ddiv+0x144>
   d9a70:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9a74:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9a78:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9a7c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9a80:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9a84:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9a88:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9a8c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9a90:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9a94:	429d      	cmp	r5, r3
   d9a96:	bf08      	it	eq
   d9a98:	4296      	cmpeq	r6, r2
   d9a9a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d9a9e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9aa2:	d202      	bcs.n	d9aaa <__aeabi_ddiv+0x6e>
   d9aa4:	085b      	lsrs	r3, r3, #1
   d9aa6:	ea4f 0232 	mov.w	r2, r2, rrx
   d9aaa:	1ab6      	subs	r6, r6, r2
   d9aac:	eb65 0503 	sbc.w	r5, r5, r3
   d9ab0:	085b      	lsrs	r3, r3, #1
   d9ab2:	ea4f 0232 	mov.w	r2, r2, rrx
   d9ab6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9aba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9abe:	ebb6 0e02 	subs.w	lr, r6, r2
   d9ac2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9ac6:	bf22      	ittt	cs
   d9ac8:	1ab6      	subcs	r6, r6, r2
   d9aca:	4675      	movcs	r5, lr
   d9acc:	ea40 000c 	orrcs.w	r0, r0, ip
   d9ad0:	085b      	lsrs	r3, r3, #1
   d9ad2:	ea4f 0232 	mov.w	r2, r2, rrx
   d9ad6:	ebb6 0e02 	subs.w	lr, r6, r2
   d9ada:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9ade:	bf22      	ittt	cs
   d9ae0:	1ab6      	subcs	r6, r6, r2
   d9ae2:	4675      	movcs	r5, lr
   d9ae4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9ae8:	085b      	lsrs	r3, r3, #1
   d9aea:	ea4f 0232 	mov.w	r2, r2, rrx
   d9aee:	ebb6 0e02 	subs.w	lr, r6, r2
   d9af2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9af6:	bf22      	ittt	cs
   d9af8:	1ab6      	subcs	r6, r6, r2
   d9afa:	4675      	movcs	r5, lr
   d9afc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9b00:	085b      	lsrs	r3, r3, #1
   d9b02:	ea4f 0232 	mov.w	r2, r2, rrx
   d9b06:	ebb6 0e02 	subs.w	lr, r6, r2
   d9b0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9b0e:	bf22      	ittt	cs
   d9b10:	1ab6      	subcs	r6, r6, r2
   d9b12:	4675      	movcs	r5, lr
   d9b14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9b18:	ea55 0e06 	orrs.w	lr, r5, r6
   d9b1c:	d018      	beq.n	d9b50 <__aeabi_ddiv+0x114>
   d9b1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9b22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9b26:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9b2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9b2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9b32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9b36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9b3a:	d1c0      	bne.n	d9abe <__aeabi_ddiv+0x82>
   d9b3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9b40:	d10b      	bne.n	d9b5a <__aeabi_ddiv+0x11e>
   d9b42:	ea41 0100 	orr.w	r1, r1, r0
   d9b46:	f04f 0000 	mov.w	r0, #0
   d9b4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9b4e:	e7b6      	b.n	d9abe <__aeabi_ddiv+0x82>
   d9b50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9b54:	bf04      	itt	eq
   d9b56:	4301      	orreq	r1, r0
   d9b58:	2000      	moveq	r0, #0
   d9b5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9b5e:	bf88      	it	hi
   d9b60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9b64:	f63f aeaf 	bhi.w	d98c6 <__aeabi_dmul+0xde>
   d9b68:	ebb5 0c03 	subs.w	ip, r5, r3
   d9b6c:	bf04      	itt	eq
   d9b6e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9b72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9b76:	f150 0000 	adcs.w	r0, r0, #0
   d9b7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9b7e:	bd70      	pop	{r4, r5, r6, pc}
   d9b80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9b84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9b88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9b8c:	bfc2      	ittt	gt
   d9b8e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9b92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9b96:	bd70      	popgt	{r4, r5, r6, pc}
   d9b98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9b9c:	f04f 0e00 	mov.w	lr, #0
   d9ba0:	3c01      	subs	r4, #1
   d9ba2:	e690      	b.n	d98c6 <__aeabi_dmul+0xde>
   d9ba4:	ea45 0e06 	orr.w	lr, r5, r6
   d9ba8:	e68d      	b.n	d98c6 <__aeabi_dmul+0xde>
   d9baa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9bae:	ea94 0f0c 	teq	r4, ip
   d9bb2:	bf08      	it	eq
   d9bb4:	ea95 0f0c 	teqeq	r5, ip
   d9bb8:	f43f af3b 	beq.w	d9a32 <__aeabi_dmul+0x24a>
   d9bbc:	ea94 0f0c 	teq	r4, ip
   d9bc0:	d10a      	bne.n	d9bd8 <__aeabi_ddiv+0x19c>
   d9bc2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9bc6:	f47f af34 	bne.w	d9a32 <__aeabi_dmul+0x24a>
   d9bca:	ea95 0f0c 	teq	r5, ip
   d9bce:	f47f af25 	bne.w	d9a1c <__aeabi_dmul+0x234>
   d9bd2:	4610      	mov	r0, r2
   d9bd4:	4619      	mov	r1, r3
   d9bd6:	e72c      	b.n	d9a32 <__aeabi_dmul+0x24a>
   d9bd8:	ea95 0f0c 	teq	r5, ip
   d9bdc:	d106      	bne.n	d9bec <__aeabi_ddiv+0x1b0>
   d9bde:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9be2:	f43f aefd 	beq.w	d99e0 <__aeabi_dmul+0x1f8>
   d9be6:	4610      	mov	r0, r2
   d9be8:	4619      	mov	r1, r3
   d9bea:	e722      	b.n	d9a32 <__aeabi_dmul+0x24a>
   d9bec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9bf0:	bf18      	it	ne
   d9bf2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9bf6:	f47f aec5 	bne.w	d9984 <__aeabi_dmul+0x19c>
   d9bfa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9bfe:	f47f af0d 	bne.w	d9a1c <__aeabi_dmul+0x234>
   d9c02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9c06:	f47f aeeb 	bne.w	d99e0 <__aeabi_dmul+0x1f8>
   d9c0a:	e712      	b.n	d9a32 <__aeabi_dmul+0x24a>

000d9c0c <__gedf2>:
   d9c0c:	f04f 3cff 	mov.w	ip, #4294967295
   d9c10:	e006      	b.n	d9c20 <__cmpdf2+0x4>
   d9c12:	bf00      	nop

000d9c14 <__ledf2>:
   d9c14:	f04f 0c01 	mov.w	ip, #1
   d9c18:	e002      	b.n	d9c20 <__cmpdf2+0x4>
   d9c1a:	bf00      	nop

000d9c1c <__cmpdf2>:
   d9c1c:	f04f 0c01 	mov.w	ip, #1
   d9c20:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9c24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9c28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9c2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9c30:	bf18      	it	ne
   d9c32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d9c36:	d01b      	beq.n	d9c70 <__cmpdf2+0x54>
   d9c38:	b001      	add	sp, #4
   d9c3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9c3e:	bf0c      	ite	eq
   d9c40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9c44:	ea91 0f03 	teqne	r1, r3
   d9c48:	bf02      	ittt	eq
   d9c4a:	ea90 0f02 	teqeq	r0, r2
   d9c4e:	2000      	moveq	r0, #0
   d9c50:	4770      	bxeq	lr
   d9c52:	f110 0f00 	cmn.w	r0, #0
   d9c56:	ea91 0f03 	teq	r1, r3
   d9c5a:	bf58      	it	pl
   d9c5c:	4299      	cmppl	r1, r3
   d9c5e:	bf08      	it	eq
   d9c60:	4290      	cmpeq	r0, r2
   d9c62:	bf2c      	ite	cs
   d9c64:	17d8      	asrcs	r0, r3, #31
   d9c66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9c6a:	f040 0001 	orr.w	r0, r0, #1
   d9c6e:	4770      	bx	lr
   d9c70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9c74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9c78:	d102      	bne.n	d9c80 <__cmpdf2+0x64>
   d9c7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9c7e:	d107      	bne.n	d9c90 <__cmpdf2+0x74>
   d9c80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9c84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9c88:	d1d6      	bne.n	d9c38 <__cmpdf2+0x1c>
   d9c8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9c8e:	d0d3      	beq.n	d9c38 <__cmpdf2+0x1c>
   d9c90:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9c94:	4770      	bx	lr
   d9c96:	bf00      	nop

000d9c98 <__aeabi_cdrcmple>:
   d9c98:	4684      	mov	ip, r0
   d9c9a:	4610      	mov	r0, r2
   d9c9c:	4662      	mov	r2, ip
   d9c9e:	468c      	mov	ip, r1
   d9ca0:	4619      	mov	r1, r3
   d9ca2:	4663      	mov	r3, ip
   d9ca4:	e000      	b.n	d9ca8 <__aeabi_cdcmpeq>
   d9ca6:	bf00      	nop

000d9ca8 <__aeabi_cdcmpeq>:
   d9ca8:	b501      	push	{r0, lr}
   d9caa:	f7ff ffb7 	bl	d9c1c <__cmpdf2>
   d9cae:	2800      	cmp	r0, #0
   d9cb0:	bf48      	it	mi
   d9cb2:	f110 0f00 	cmnmi.w	r0, #0
   d9cb6:	bd01      	pop	{r0, pc}

000d9cb8 <__aeabi_dcmpeq>:
   d9cb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9cbc:	f7ff fff4 	bl	d9ca8 <__aeabi_cdcmpeq>
   d9cc0:	bf0c      	ite	eq
   d9cc2:	2001      	moveq	r0, #1
   d9cc4:	2000      	movne	r0, #0
   d9cc6:	f85d fb08 	ldr.w	pc, [sp], #8
   d9cca:	bf00      	nop

000d9ccc <__aeabi_dcmplt>:
   d9ccc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9cd0:	f7ff ffea 	bl	d9ca8 <__aeabi_cdcmpeq>
   d9cd4:	bf34      	ite	cc
   d9cd6:	2001      	movcc	r0, #1
   d9cd8:	2000      	movcs	r0, #0
   d9cda:	f85d fb08 	ldr.w	pc, [sp], #8
   d9cde:	bf00      	nop

000d9ce0 <__aeabi_dcmple>:
   d9ce0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9ce4:	f7ff ffe0 	bl	d9ca8 <__aeabi_cdcmpeq>
   d9ce8:	bf94      	ite	ls
   d9cea:	2001      	movls	r0, #1
   d9cec:	2000      	movhi	r0, #0
   d9cee:	f85d fb08 	ldr.w	pc, [sp], #8
   d9cf2:	bf00      	nop

000d9cf4 <__aeabi_dcmpge>:
   d9cf4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9cf8:	f7ff ffce 	bl	d9c98 <__aeabi_cdrcmple>
   d9cfc:	bf94      	ite	ls
   d9cfe:	2001      	movls	r0, #1
   d9d00:	2000      	movhi	r0, #0
   d9d02:	f85d fb08 	ldr.w	pc, [sp], #8
   d9d06:	bf00      	nop

000d9d08 <__aeabi_dcmpgt>:
   d9d08:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9d0c:	f7ff ffc4 	bl	d9c98 <__aeabi_cdrcmple>
   d9d10:	bf34      	ite	cc
   d9d12:	2001      	movcc	r0, #1
   d9d14:	2000      	movcs	r0, #0
   d9d16:	f85d fb08 	ldr.w	pc, [sp], #8
   d9d1a:	bf00      	nop

000d9d1c <__aeabi_dcmpun>:
   d9d1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9d20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9d24:	d102      	bne.n	d9d2c <__aeabi_dcmpun+0x10>
   d9d26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9d2a:	d10a      	bne.n	d9d42 <__aeabi_dcmpun+0x26>
   d9d2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9d30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9d34:	d102      	bne.n	d9d3c <__aeabi_dcmpun+0x20>
   d9d36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9d3a:	d102      	bne.n	d9d42 <__aeabi_dcmpun+0x26>
   d9d3c:	f04f 0000 	mov.w	r0, #0
   d9d40:	4770      	bx	lr
   d9d42:	f04f 0001 	mov.w	r0, #1
   d9d46:	4770      	bx	lr

000d9d48 <__aeabi_d2iz>:
   d9d48:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9d4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9d50:	d215      	bcs.n	d9d7e <__aeabi_d2iz+0x36>
   d9d52:	d511      	bpl.n	d9d78 <__aeabi_d2iz+0x30>
   d9d54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9d58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9d5c:	d912      	bls.n	d9d84 <__aeabi_d2iz+0x3c>
   d9d5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9d62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9d66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9d6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9d6e:	fa23 f002 	lsr.w	r0, r3, r2
   d9d72:	bf18      	it	ne
   d9d74:	4240      	negne	r0, r0
   d9d76:	4770      	bx	lr
   d9d78:	f04f 0000 	mov.w	r0, #0
   d9d7c:	4770      	bx	lr
   d9d7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9d82:	d105      	bne.n	d9d90 <__aeabi_d2iz+0x48>
   d9d84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9d88:	bf08      	it	eq
   d9d8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9d8e:	4770      	bx	lr
   d9d90:	f04f 0000 	mov.w	r0, #0
   d9d94:	4770      	bx	lr
   d9d96:	bf00      	nop

000d9d98 <__aeabi_d2uiz>:
   d9d98:	004a      	lsls	r2, r1, #1
   d9d9a:	d211      	bcs.n	d9dc0 <__aeabi_d2uiz+0x28>
   d9d9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9da0:	d211      	bcs.n	d9dc6 <__aeabi_d2uiz+0x2e>
   d9da2:	d50d      	bpl.n	d9dc0 <__aeabi_d2uiz+0x28>
   d9da4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9da8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9dac:	d40e      	bmi.n	d9dcc <__aeabi_d2uiz+0x34>
   d9dae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9db6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9dba:	fa23 f002 	lsr.w	r0, r3, r2
   d9dbe:	4770      	bx	lr
   d9dc0:	f04f 0000 	mov.w	r0, #0
   d9dc4:	4770      	bx	lr
   d9dc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9dca:	d102      	bne.n	d9dd2 <__aeabi_d2uiz+0x3a>
   d9dcc:	f04f 30ff 	mov.w	r0, #4294967295
   d9dd0:	4770      	bx	lr
   d9dd2:	f04f 0000 	mov.w	r0, #0
   d9dd6:	4770      	bx	lr

000d9dd8 <__aeabi_uldivmod>:
   d9dd8:	b953      	cbnz	r3, d9df0 <__aeabi_uldivmod+0x18>
   d9dda:	b94a      	cbnz	r2, d9df0 <__aeabi_uldivmod+0x18>
   d9ddc:	2900      	cmp	r1, #0
   d9dde:	bf08      	it	eq
   d9de0:	2800      	cmpeq	r0, #0
   d9de2:	bf1c      	itt	ne
   d9de4:	f04f 31ff 	movne.w	r1, #4294967295
   d9de8:	f04f 30ff 	movne.w	r0, #4294967295
   d9dec:	f000 b98c 	b.w	da108 <__aeabi_idiv0>
   d9df0:	f1ad 0c08 	sub.w	ip, sp, #8
   d9df4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d9df8:	f000 f824 	bl	d9e44 <__udivmoddi4>
   d9dfc:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9e00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9e04:	b004      	add	sp, #16
   d9e06:	4770      	bx	lr

000d9e08 <__aeabi_d2ulz>:
   d9e08:	b5d0      	push	{r4, r6, r7, lr}
   d9e0a:	4b0c      	ldr	r3, [pc, #48]	; (d9e3c <__aeabi_d2ulz+0x34>)
   d9e0c:	2200      	movs	r2, #0
   d9e0e:	4606      	mov	r6, r0
   d9e10:	460f      	mov	r7, r1
   d9e12:	f7ff fce9 	bl	d97e8 <__aeabi_dmul>
   d9e16:	f7ff ffbf 	bl	d9d98 <__aeabi_d2uiz>
   d9e1a:	4604      	mov	r4, r0
   d9e1c:	f7ff fc6a 	bl	d96f4 <__aeabi_ui2d>
   d9e20:	4b07      	ldr	r3, [pc, #28]	; (d9e40 <__aeabi_d2ulz+0x38>)
   d9e22:	2200      	movs	r2, #0
   d9e24:	f7ff fce0 	bl	d97e8 <__aeabi_dmul>
   d9e28:	4602      	mov	r2, r0
   d9e2a:	460b      	mov	r3, r1
   d9e2c:	4630      	mov	r0, r6
   d9e2e:	4639      	mov	r1, r7
   d9e30:	f7ff fb22 	bl	d9478 <__aeabi_dsub>
   d9e34:	f7ff ffb0 	bl	d9d98 <__aeabi_d2uiz>
   d9e38:	4621      	mov	r1, r4
   d9e3a:	bdd0      	pop	{r4, r6, r7, pc}
   d9e3c:	3df00000 	.word	0x3df00000
   d9e40:	41f00000 	.word	0x41f00000

000d9e44 <__udivmoddi4>:
   d9e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9e48:	9d08      	ldr	r5, [sp, #32]
   d9e4a:	4604      	mov	r4, r0
   d9e4c:	468c      	mov	ip, r1
   d9e4e:	2b00      	cmp	r3, #0
   d9e50:	f040 8083 	bne.w	d9f5a <__udivmoddi4+0x116>
   d9e54:	428a      	cmp	r2, r1
   d9e56:	4617      	mov	r7, r2
   d9e58:	d947      	bls.n	d9eea <__udivmoddi4+0xa6>
   d9e5a:	fab2 f282 	clz	r2, r2
   d9e5e:	b142      	cbz	r2, d9e72 <__udivmoddi4+0x2e>
   d9e60:	f1c2 0020 	rsb	r0, r2, #32
   d9e64:	fa24 f000 	lsr.w	r0, r4, r0
   d9e68:	4091      	lsls	r1, r2
   d9e6a:	4097      	lsls	r7, r2
   d9e6c:	ea40 0c01 	orr.w	ip, r0, r1
   d9e70:	4094      	lsls	r4, r2
   d9e72:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d9e76:	0c23      	lsrs	r3, r4, #16
   d9e78:	fbbc f6f8 	udiv	r6, ip, r8
   d9e7c:	fa1f fe87 	uxth.w	lr, r7
   d9e80:	fb08 c116 	mls	r1, r8, r6, ip
   d9e84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d9e88:	fb06 f10e 	mul.w	r1, r6, lr
   d9e8c:	4299      	cmp	r1, r3
   d9e8e:	d909      	bls.n	d9ea4 <__udivmoddi4+0x60>
   d9e90:	18fb      	adds	r3, r7, r3
   d9e92:	f106 30ff 	add.w	r0, r6, #4294967295
   d9e96:	f080 8119 	bcs.w	da0cc <__udivmoddi4+0x288>
   d9e9a:	4299      	cmp	r1, r3
   d9e9c:	f240 8116 	bls.w	da0cc <__udivmoddi4+0x288>
   d9ea0:	3e02      	subs	r6, #2
   d9ea2:	443b      	add	r3, r7
   d9ea4:	1a5b      	subs	r3, r3, r1
   d9ea6:	b2a4      	uxth	r4, r4
   d9ea8:	fbb3 f0f8 	udiv	r0, r3, r8
   d9eac:	fb08 3310 	mls	r3, r8, r0, r3
   d9eb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d9eb4:	fb00 fe0e 	mul.w	lr, r0, lr
   d9eb8:	45a6      	cmp	lr, r4
   d9eba:	d909      	bls.n	d9ed0 <__udivmoddi4+0x8c>
   d9ebc:	193c      	adds	r4, r7, r4
   d9ebe:	f100 33ff 	add.w	r3, r0, #4294967295
   d9ec2:	f080 8105 	bcs.w	da0d0 <__udivmoddi4+0x28c>
   d9ec6:	45a6      	cmp	lr, r4
   d9ec8:	f240 8102 	bls.w	da0d0 <__udivmoddi4+0x28c>
   d9ecc:	3802      	subs	r0, #2
   d9ece:	443c      	add	r4, r7
   d9ed0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d9ed4:	eba4 040e 	sub.w	r4, r4, lr
   d9ed8:	2600      	movs	r6, #0
   d9eda:	b11d      	cbz	r5, d9ee4 <__udivmoddi4+0xa0>
   d9edc:	40d4      	lsrs	r4, r2
   d9ede:	2300      	movs	r3, #0
   d9ee0:	e9c5 4300 	strd	r4, r3, [r5]
   d9ee4:	4631      	mov	r1, r6
   d9ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9eea:	b902      	cbnz	r2, d9eee <__udivmoddi4+0xaa>
   d9eec:	deff      	udf	#255	; 0xff
   d9eee:	fab2 f282 	clz	r2, r2
   d9ef2:	2a00      	cmp	r2, #0
   d9ef4:	d150      	bne.n	d9f98 <__udivmoddi4+0x154>
   d9ef6:	1bcb      	subs	r3, r1, r7
   d9ef8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d9efc:	fa1f f887 	uxth.w	r8, r7
   d9f00:	2601      	movs	r6, #1
   d9f02:	fbb3 fcfe 	udiv	ip, r3, lr
   d9f06:	0c21      	lsrs	r1, r4, #16
   d9f08:	fb0e 331c 	mls	r3, lr, ip, r3
   d9f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d9f10:	fb08 f30c 	mul.w	r3, r8, ip
   d9f14:	428b      	cmp	r3, r1
   d9f16:	d907      	bls.n	d9f28 <__udivmoddi4+0xe4>
   d9f18:	1879      	adds	r1, r7, r1
   d9f1a:	f10c 30ff 	add.w	r0, ip, #4294967295
   d9f1e:	d202      	bcs.n	d9f26 <__udivmoddi4+0xe2>
   d9f20:	428b      	cmp	r3, r1
   d9f22:	f200 80e9 	bhi.w	da0f8 <__udivmoddi4+0x2b4>
   d9f26:	4684      	mov	ip, r0
   d9f28:	1ac9      	subs	r1, r1, r3
   d9f2a:	b2a3      	uxth	r3, r4
   d9f2c:	fbb1 f0fe 	udiv	r0, r1, lr
   d9f30:	fb0e 1110 	mls	r1, lr, r0, r1
   d9f34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d9f38:	fb08 f800 	mul.w	r8, r8, r0
   d9f3c:	45a0      	cmp	r8, r4
   d9f3e:	d907      	bls.n	d9f50 <__udivmoddi4+0x10c>
   d9f40:	193c      	adds	r4, r7, r4
   d9f42:	f100 33ff 	add.w	r3, r0, #4294967295
   d9f46:	d202      	bcs.n	d9f4e <__udivmoddi4+0x10a>
   d9f48:	45a0      	cmp	r8, r4
   d9f4a:	f200 80d9 	bhi.w	da100 <__udivmoddi4+0x2bc>
   d9f4e:	4618      	mov	r0, r3
   d9f50:	eba4 0408 	sub.w	r4, r4, r8
   d9f54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d9f58:	e7bf      	b.n	d9eda <__udivmoddi4+0x96>
   d9f5a:	428b      	cmp	r3, r1
   d9f5c:	d909      	bls.n	d9f72 <__udivmoddi4+0x12e>
   d9f5e:	2d00      	cmp	r5, #0
   d9f60:	f000 80b1 	beq.w	da0c6 <__udivmoddi4+0x282>
   d9f64:	2600      	movs	r6, #0
   d9f66:	e9c5 0100 	strd	r0, r1, [r5]
   d9f6a:	4630      	mov	r0, r6
   d9f6c:	4631      	mov	r1, r6
   d9f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9f72:	fab3 f683 	clz	r6, r3
   d9f76:	2e00      	cmp	r6, #0
   d9f78:	d14a      	bne.n	da010 <__udivmoddi4+0x1cc>
   d9f7a:	428b      	cmp	r3, r1
   d9f7c:	d302      	bcc.n	d9f84 <__udivmoddi4+0x140>
   d9f7e:	4282      	cmp	r2, r0
   d9f80:	f200 80b8 	bhi.w	da0f4 <__udivmoddi4+0x2b0>
   d9f84:	1a84      	subs	r4, r0, r2
   d9f86:	eb61 0103 	sbc.w	r1, r1, r3
   d9f8a:	2001      	movs	r0, #1
   d9f8c:	468c      	mov	ip, r1
   d9f8e:	2d00      	cmp	r5, #0
   d9f90:	d0a8      	beq.n	d9ee4 <__udivmoddi4+0xa0>
   d9f92:	e9c5 4c00 	strd	r4, ip, [r5]
   d9f96:	e7a5      	b.n	d9ee4 <__udivmoddi4+0xa0>
   d9f98:	f1c2 0320 	rsb	r3, r2, #32
   d9f9c:	fa20 f603 	lsr.w	r6, r0, r3
   d9fa0:	4097      	lsls	r7, r2
   d9fa2:	fa01 f002 	lsl.w	r0, r1, r2
   d9fa6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d9faa:	40d9      	lsrs	r1, r3
   d9fac:	4330      	orrs	r0, r6
   d9fae:	0c03      	lsrs	r3, r0, #16
   d9fb0:	fbb1 f6fe 	udiv	r6, r1, lr
   d9fb4:	fa1f f887 	uxth.w	r8, r7
   d9fb8:	fb0e 1116 	mls	r1, lr, r6, r1
   d9fbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d9fc0:	fb06 f108 	mul.w	r1, r6, r8
   d9fc4:	4299      	cmp	r1, r3
   d9fc6:	fa04 f402 	lsl.w	r4, r4, r2
   d9fca:	d909      	bls.n	d9fe0 <__udivmoddi4+0x19c>
   d9fcc:	18fb      	adds	r3, r7, r3
   d9fce:	f106 3cff 	add.w	ip, r6, #4294967295
   d9fd2:	f080 808d 	bcs.w	da0f0 <__udivmoddi4+0x2ac>
   d9fd6:	4299      	cmp	r1, r3
   d9fd8:	f240 808a 	bls.w	da0f0 <__udivmoddi4+0x2ac>
   d9fdc:	3e02      	subs	r6, #2
   d9fde:	443b      	add	r3, r7
   d9fe0:	1a5b      	subs	r3, r3, r1
   d9fe2:	b281      	uxth	r1, r0
   d9fe4:	fbb3 f0fe 	udiv	r0, r3, lr
   d9fe8:	fb0e 3310 	mls	r3, lr, r0, r3
   d9fec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d9ff0:	fb00 f308 	mul.w	r3, r0, r8
   d9ff4:	428b      	cmp	r3, r1
   d9ff6:	d907      	bls.n	da008 <__udivmoddi4+0x1c4>
   d9ff8:	1879      	adds	r1, r7, r1
   d9ffa:	f100 3cff 	add.w	ip, r0, #4294967295
   d9ffe:	d273      	bcs.n	da0e8 <__udivmoddi4+0x2a4>
   da000:	428b      	cmp	r3, r1
   da002:	d971      	bls.n	da0e8 <__udivmoddi4+0x2a4>
   da004:	3802      	subs	r0, #2
   da006:	4439      	add	r1, r7
   da008:	1acb      	subs	r3, r1, r3
   da00a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   da00e:	e778      	b.n	d9f02 <__udivmoddi4+0xbe>
   da010:	f1c6 0c20 	rsb	ip, r6, #32
   da014:	fa03 f406 	lsl.w	r4, r3, r6
   da018:	fa22 f30c 	lsr.w	r3, r2, ip
   da01c:	431c      	orrs	r4, r3
   da01e:	fa20 f70c 	lsr.w	r7, r0, ip
   da022:	fa01 f306 	lsl.w	r3, r1, r6
   da026:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   da02a:	fa21 f10c 	lsr.w	r1, r1, ip
   da02e:	431f      	orrs	r7, r3
   da030:	0c3b      	lsrs	r3, r7, #16
   da032:	fbb1 f9fe 	udiv	r9, r1, lr
   da036:	fa1f f884 	uxth.w	r8, r4
   da03a:	fb0e 1119 	mls	r1, lr, r9, r1
   da03e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   da042:	fb09 fa08 	mul.w	sl, r9, r8
   da046:	458a      	cmp	sl, r1
   da048:	fa02 f206 	lsl.w	r2, r2, r6
   da04c:	fa00 f306 	lsl.w	r3, r0, r6
   da050:	d908      	bls.n	da064 <__udivmoddi4+0x220>
   da052:	1861      	adds	r1, r4, r1
   da054:	f109 30ff 	add.w	r0, r9, #4294967295
   da058:	d248      	bcs.n	da0ec <__udivmoddi4+0x2a8>
   da05a:	458a      	cmp	sl, r1
   da05c:	d946      	bls.n	da0ec <__udivmoddi4+0x2a8>
   da05e:	f1a9 0902 	sub.w	r9, r9, #2
   da062:	4421      	add	r1, r4
   da064:	eba1 010a 	sub.w	r1, r1, sl
   da068:	b2bf      	uxth	r7, r7
   da06a:	fbb1 f0fe 	udiv	r0, r1, lr
   da06e:	fb0e 1110 	mls	r1, lr, r0, r1
   da072:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   da076:	fb00 f808 	mul.w	r8, r0, r8
   da07a:	45b8      	cmp	r8, r7
   da07c:	d907      	bls.n	da08e <__udivmoddi4+0x24a>
   da07e:	19e7      	adds	r7, r4, r7
   da080:	f100 31ff 	add.w	r1, r0, #4294967295
   da084:	d22e      	bcs.n	da0e4 <__udivmoddi4+0x2a0>
   da086:	45b8      	cmp	r8, r7
   da088:	d92c      	bls.n	da0e4 <__udivmoddi4+0x2a0>
   da08a:	3802      	subs	r0, #2
   da08c:	4427      	add	r7, r4
   da08e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   da092:	eba7 0708 	sub.w	r7, r7, r8
   da096:	fba0 8902 	umull	r8, r9, r0, r2
   da09a:	454f      	cmp	r7, r9
   da09c:	46c6      	mov	lr, r8
   da09e:	4649      	mov	r1, r9
   da0a0:	d31a      	bcc.n	da0d8 <__udivmoddi4+0x294>
   da0a2:	d017      	beq.n	da0d4 <__udivmoddi4+0x290>
   da0a4:	b15d      	cbz	r5, da0be <__udivmoddi4+0x27a>
   da0a6:	ebb3 020e 	subs.w	r2, r3, lr
   da0aa:	eb67 0701 	sbc.w	r7, r7, r1
   da0ae:	fa07 fc0c 	lsl.w	ip, r7, ip
   da0b2:	40f2      	lsrs	r2, r6
   da0b4:	ea4c 0202 	orr.w	r2, ip, r2
   da0b8:	40f7      	lsrs	r7, r6
   da0ba:	e9c5 2700 	strd	r2, r7, [r5]
   da0be:	2600      	movs	r6, #0
   da0c0:	4631      	mov	r1, r6
   da0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da0c6:	462e      	mov	r6, r5
   da0c8:	4628      	mov	r0, r5
   da0ca:	e70b      	b.n	d9ee4 <__udivmoddi4+0xa0>
   da0cc:	4606      	mov	r6, r0
   da0ce:	e6e9      	b.n	d9ea4 <__udivmoddi4+0x60>
   da0d0:	4618      	mov	r0, r3
   da0d2:	e6fd      	b.n	d9ed0 <__udivmoddi4+0x8c>
   da0d4:	4543      	cmp	r3, r8
   da0d6:	d2e5      	bcs.n	da0a4 <__udivmoddi4+0x260>
   da0d8:	ebb8 0e02 	subs.w	lr, r8, r2
   da0dc:	eb69 0104 	sbc.w	r1, r9, r4
   da0e0:	3801      	subs	r0, #1
   da0e2:	e7df      	b.n	da0a4 <__udivmoddi4+0x260>
   da0e4:	4608      	mov	r0, r1
   da0e6:	e7d2      	b.n	da08e <__udivmoddi4+0x24a>
   da0e8:	4660      	mov	r0, ip
   da0ea:	e78d      	b.n	da008 <__udivmoddi4+0x1c4>
   da0ec:	4681      	mov	r9, r0
   da0ee:	e7b9      	b.n	da064 <__udivmoddi4+0x220>
   da0f0:	4666      	mov	r6, ip
   da0f2:	e775      	b.n	d9fe0 <__udivmoddi4+0x19c>
   da0f4:	4630      	mov	r0, r6
   da0f6:	e74a      	b.n	d9f8e <__udivmoddi4+0x14a>
   da0f8:	f1ac 0c02 	sub.w	ip, ip, #2
   da0fc:	4439      	add	r1, r7
   da0fe:	e713      	b.n	d9f28 <__udivmoddi4+0xe4>
   da100:	3802      	subs	r0, #2
   da102:	443c      	add	r4, r7
   da104:	e724      	b.n	d9f50 <__udivmoddi4+0x10c>
   da106:	bf00      	nop

000da108 <__aeabi_idiv0>:
   da108:	4770      	bx	lr
   da10a:	bf00      	nop

000da10c <atoi>:
   da10c:	220a      	movs	r2, #10
   da10e:	2100      	movs	r1, #0
   da110:	f000 b950 	b.w	da3b4 <strtol>

000da114 <__cxa_atexit>:
   da114:	b510      	push	{r4, lr}
   da116:	4c05      	ldr	r4, [pc, #20]	; (da12c <__cxa_atexit+0x18>)
   da118:	4613      	mov	r3, r2
   da11a:	b12c      	cbz	r4, da128 <__cxa_atexit+0x14>
   da11c:	460a      	mov	r2, r1
   da11e:	4601      	mov	r1, r0
   da120:	2002      	movs	r0, #2
   da122:	f3af 8000 	nop.w
   da126:	bd10      	pop	{r4, pc}
   da128:	4620      	mov	r0, r4
   da12a:	e7fc      	b.n	da126 <__cxa_atexit+0x12>
   da12c:	00000000 	.word	0x00000000

000da130 <ldiv>:
   da130:	2900      	cmp	r1, #0
   da132:	b510      	push	{r4, lr}
   da134:	fb91 f4f2 	sdiv	r4, r1, r2
   da138:	fb02 1314 	mls	r3, r2, r4, r1
   da13c:	db06      	blt.n	da14c <ldiv+0x1c>
   da13e:	2b00      	cmp	r3, #0
   da140:	da01      	bge.n	da146 <ldiv+0x16>
   da142:	3401      	adds	r4, #1
   da144:	1a9b      	subs	r3, r3, r2
   da146:	e9c0 4300 	strd	r4, r3, [r0]
   da14a:	bd10      	pop	{r4, pc}
   da14c:	2b00      	cmp	r3, #0
   da14e:	bfc4      	itt	gt
   da150:	f104 34ff 	addgt.w	r4, r4, #4294967295
   da154:	189b      	addgt	r3, r3, r2
   da156:	e7f6      	b.n	da146 <ldiv+0x16>

000da158 <memcmp>:
   da158:	b530      	push	{r4, r5, lr}
   da15a:	3901      	subs	r1, #1
   da15c:	2400      	movs	r4, #0
   da15e:	42a2      	cmp	r2, r4
   da160:	d101      	bne.n	da166 <memcmp+0xe>
   da162:	2000      	movs	r0, #0
   da164:	e005      	b.n	da172 <memcmp+0x1a>
   da166:	5d03      	ldrb	r3, [r0, r4]
   da168:	3401      	adds	r4, #1
   da16a:	5d0d      	ldrb	r5, [r1, r4]
   da16c:	42ab      	cmp	r3, r5
   da16e:	d0f6      	beq.n	da15e <memcmp+0x6>
   da170:	1b58      	subs	r0, r3, r5
   da172:	bd30      	pop	{r4, r5, pc}

000da174 <memcpy>:
   da174:	440a      	add	r2, r1
   da176:	4291      	cmp	r1, r2
   da178:	f100 33ff 	add.w	r3, r0, #4294967295
   da17c:	d100      	bne.n	da180 <memcpy+0xc>
   da17e:	4770      	bx	lr
   da180:	b510      	push	{r4, lr}
   da182:	f811 4b01 	ldrb.w	r4, [r1], #1
   da186:	f803 4f01 	strb.w	r4, [r3, #1]!
   da18a:	4291      	cmp	r1, r2
   da18c:	d1f9      	bne.n	da182 <memcpy+0xe>
   da18e:	bd10      	pop	{r4, pc}

000da190 <memmove>:
   da190:	4288      	cmp	r0, r1
   da192:	b510      	push	{r4, lr}
   da194:	eb01 0402 	add.w	r4, r1, r2
   da198:	d902      	bls.n	da1a0 <memmove+0x10>
   da19a:	4284      	cmp	r4, r0
   da19c:	4623      	mov	r3, r4
   da19e:	d807      	bhi.n	da1b0 <memmove+0x20>
   da1a0:	1e43      	subs	r3, r0, #1
   da1a2:	42a1      	cmp	r1, r4
   da1a4:	d008      	beq.n	da1b8 <memmove+0x28>
   da1a6:	f811 2b01 	ldrb.w	r2, [r1], #1
   da1aa:	f803 2f01 	strb.w	r2, [r3, #1]!
   da1ae:	e7f8      	b.n	da1a2 <memmove+0x12>
   da1b0:	4402      	add	r2, r0
   da1b2:	4601      	mov	r1, r0
   da1b4:	428a      	cmp	r2, r1
   da1b6:	d100      	bne.n	da1ba <memmove+0x2a>
   da1b8:	bd10      	pop	{r4, pc}
   da1ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   da1be:	f802 4d01 	strb.w	r4, [r2, #-1]!
   da1c2:	e7f7      	b.n	da1b4 <memmove+0x24>

000da1c4 <memset>:
   da1c4:	4402      	add	r2, r0
   da1c6:	4603      	mov	r3, r0
   da1c8:	4293      	cmp	r3, r2
   da1ca:	d100      	bne.n	da1ce <memset+0xa>
   da1cc:	4770      	bx	lr
   da1ce:	f803 1b01 	strb.w	r1, [r3], #1
   da1d2:	e7f9      	b.n	da1c8 <memset+0x4>

000da1d4 <srand>:
   da1d4:	b538      	push	{r3, r4, r5, lr}
   da1d6:	4b0d      	ldr	r3, [pc, #52]	; (da20c <srand+0x38>)
   da1d8:	681d      	ldr	r5, [r3, #0]
   da1da:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da1dc:	4604      	mov	r4, r0
   da1de:	b97b      	cbnz	r3, da200 <srand+0x2c>
   da1e0:	2018      	movs	r0, #24
   da1e2:	f7fc f849 	bl	d6278 <malloc>
   da1e6:	4a0a      	ldr	r2, [pc, #40]	; (da210 <srand+0x3c>)
   da1e8:	4b0a      	ldr	r3, [pc, #40]	; (da214 <srand+0x40>)
   da1ea:	63a8      	str	r0, [r5, #56]	; 0x38
   da1ec:	e9c0 2300 	strd	r2, r3, [r0]
   da1f0:	4b09      	ldr	r3, [pc, #36]	; (da218 <srand+0x44>)
   da1f2:	6083      	str	r3, [r0, #8]
   da1f4:	230b      	movs	r3, #11
   da1f6:	8183      	strh	r3, [r0, #12]
   da1f8:	2201      	movs	r2, #1
   da1fa:	2300      	movs	r3, #0
   da1fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
   da200:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da202:	2200      	movs	r2, #0
   da204:	611c      	str	r4, [r3, #16]
   da206:	615a      	str	r2, [r3, #20]
   da208:	bd38      	pop	{r3, r4, r5, pc}
   da20a:	bf00      	nop
   da20c:	2003df04 	.word	0x2003df04
   da210:	abcd330e 	.word	0xabcd330e
   da214:	e66d1234 	.word	0xe66d1234
   da218:	0005deec 	.word	0x0005deec

000da21c <strcmp>:
   da21c:	f810 2b01 	ldrb.w	r2, [r0], #1
   da220:	f811 3b01 	ldrb.w	r3, [r1], #1
   da224:	2a01      	cmp	r2, #1
   da226:	bf28      	it	cs
   da228:	429a      	cmpcs	r2, r3
   da22a:	d0f7      	beq.n	da21c <strcmp>
   da22c:	1ad0      	subs	r0, r2, r3
   da22e:	4770      	bx	lr

000da230 <strcpy>:
   da230:	4603      	mov	r3, r0
   da232:	f811 2b01 	ldrb.w	r2, [r1], #1
   da236:	f803 2b01 	strb.w	r2, [r3], #1
   da23a:	2a00      	cmp	r2, #0
   da23c:	d1f9      	bne.n	da232 <strcpy+0x2>
   da23e:	4770      	bx	lr

000da240 <strlen>:
   da240:	4603      	mov	r3, r0
   da242:	f813 2b01 	ldrb.w	r2, [r3], #1
   da246:	2a00      	cmp	r2, #0
   da248:	d1fb      	bne.n	da242 <strlen+0x2>
   da24a:	1a18      	subs	r0, r3, r0
   da24c:	3801      	subs	r0, #1
   da24e:	4770      	bx	lr

000da250 <strncpy>:
   da250:	b510      	push	{r4, lr}
   da252:	3901      	subs	r1, #1
   da254:	4603      	mov	r3, r0
   da256:	b132      	cbz	r2, da266 <strncpy+0x16>
   da258:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   da25c:	f803 4b01 	strb.w	r4, [r3], #1
   da260:	3a01      	subs	r2, #1
   da262:	2c00      	cmp	r4, #0
   da264:	d1f7      	bne.n	da256 <strncpy+0x6>
   da266:	441a      	add	r2, r3
   da268:	2100      	movs	r1, #0
   da26a:	4293      	cmp	r3, r2
   da26c:	d100      	bne.n	da270 <strncpy+0x20>
   da26e:	bd10      	pop	{r4, pc}
   da270:	f803 1b01 	strb.w	r1, [r3], #1
   da274:	e7f9      	b.n	da26a <strncpy+0x1a>

000da276 <strnlen>:
   da276:	b510      	push	{r4, lr}
   da278:	4602      	mov	r2, r0
   da27a:	4401      	add	r1, r0
   da27c:	428a      	cmp	r2, r1
   da27e:	4613      	mov	r3, r2
   da280:	d101      	bne.n	da286 <strnlen+0x10>
   da282:	1a18      	subs	r0, r3, r0
   da284:	bd10      	pop	{r4, pc}
   da286:	781c      	ldrb	r4, [r3, #0]
   da288:	3201      	adds	r2, #1
   da28a:	2c00      	cmp	r4, #0
   da28c:	d1f6      	bne.n	da27c <strnlen+0x6>
   da28e:	e7f8      	b.n	da282 <strnlen+0xc>

000da290 <strstr>:
   da290:	b5f0      	push	{r4, r5, r6, r7, lr}
   da292:	780c      	ldrb	r4, [r1, #0]
   da294:	b164      	cbz	r4, da2b0 <strstr+0x20>
   da296:	4603      	mov	r3, r0
   da298:	781a      	ldrb	r2, [r3, #0]
   da29a:	4618      	mov	r0, r3
   da29c:	1c5e      	adds	r6, r3, #1
   da29e:	b90a      	cbnz	r2, da2a4 <strstr+0x14>
   da2a0:	4610      	mov	r0, r2
   da2a2:	e005      	b.n	da2b0 <strstr+0x20>
   da2a4:	4294      	cmp	r4, r2
   da2a6:	d108      	bne.n	da2ba <strstr+0x2a>
   da2a8:	460d      	mov	r5, r1
   da2aa:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   da2ae:	b902      	cbnz	r2, da2b2 <strstr+0x22>
   da2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da2b2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   da2b6:	4297      	cmp	r7, r2
   da2b8:	d0f7      	beq.n	da2aa <strstr+0x1a>
   da2ba:	4633      	mov	r3, r6
   da2bc:	e7ec      	b.n	da298 <strstr+0x8>
	...

000da2c0 <_strtol_l.isra.0>:
   da2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da2c4:	4e3a      	ldr	r6, [pc, #232]	; (da3b0 <_strtol_l.isra.0+0xf0>)
   da2c6:	4686      	mov	lr, r0
   da2c8:	468c      	mov	ip, r1
   da2ca:	4660      	mov	r0, ip
   da2cc:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da2d0:	5da5      	ldrb	r5, [r4, r6]
   da2d2:	f015 0508 	ands.w	r5, r5, #8
   da2d6:	d1f8      	bne.n	da2ca <_strtol_l.isra.0+0xa>
   da2d8:	2c2d      	cmp	r4, #45	; 0x2d
   da2da:	d133      	bne.n	da344 <_strtol_l.isra.0+0x84>
   da2dc:	f89c 4000 	ldrb.w	r4, [ip]
   da2e0:	f04f 0801 	mov.w	r8, #1
   da2e4:	f100 0c02 	add.w	ip, r0, #2
   da2e8:	2b00      	cmp	r3, #0
   da2ea:	d05c      	beq.n	da3a6 <_strtol_l.isra.0+0xe6>
   da2ec:	2b10      	cmp	r3, #16
   da2ee:	d10c      	bne.n	da30a <_strtol_l.isra.0+0x4a>
   da2f0:	2c30      	cmp	r4, #48	; 0x30
   da2f2:	d10a      	bne.n	da30a <_strtol_l.isra.0+0x4a>
   da2f4:	f89c 0000 	ldrb.w	r0, [ip]
   da2f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da2fc:	2858      	cmp	r0, #88	; 0x58
   da2fe:	d14d      	bne.n	da39c <_strtol_l.isra.0+0xdc>
   da300:	f89c 4001 	ldrb.w	r4, [ip, #1]
   da304:	2310      	movs	r3, #16
   da306:	f10c 0c02 	add.w	ip, ip, #2
   da30a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   da30e:	3f01      	subs	r7, #1
   da310:	2600      	movs	r6, #0
   da312:	fbb7 f9f3 	udiv	r9, r7, r3
   da316:	4630      	mov	r0, r6
   da318:	fb03 7a19 	mls	sl, r3, r9, r7
   da31c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   da320:	2d09      	cmp	r5, #9
   da322:	d818      	bhi.n	da356 <_strtol_l.isra.0+0x96>
   da324:	462c      	mov	r4, r5
   da326:	42a3      	cmp	r3, r4
   da328:	dd24      	ble.n	da374 <_strtol_l.isra.0+0xb4>
   da32a:	1c75      	adds	r5, r6, #1
   da32c:	d007      	beq.n	da33e <_strtol_l.isra.0+0x7e>
   da32e:	4581      	cmp	r9, r0
   da330:	d31d      	bcc.n	da36e <_strtol_l.isra.0+0xae>
   da332:	d101      	bne.n	da338 <_strtol_l.isra.0+0x78>
   da334:	45a2      	cmp	sl, r4
   da336:	db1a      	blt.n	da36e <_strtol_l.isra.0+0xae>
   da338:	fb00 4003 	mla	r0, r0, r3, r4
   da33c:	2601      	movs	r6, #1
   da33e:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da342:	e7eb      	b.n	da31c <_strtol_l.isra.0+0x5c>
   da344:	2c2b      	cmp	r4, #43	; 0x2b
   da346:	bf08      	it	eq
   da348:	f89c 4000 	ldrbeq.w	r4, [ip]
   da34c:	46a8      	mov	r8, r5
   da34e:	bf08      	it	eq
   da350:	f100 0c02 	addeq.w	ip, r0, #2
   da354:	e7c8      	b.n	da2e8 <_strtol_l.isra.0+0x28>
   da356:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   da35a:	2d19      	cmp	r5, #25
   da35c:	d801      	bhi.n	da362 <_strtol_l.isra.0+0xa2>
   da35e:	3c37      	subs	r4, #55	; 0x37
   da360:	e7e1      	b.n	da326 <_strtol_l.isra.0+0x66>
   da362:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   da366:	2d19      	cmp	r5, #25
   da368:	d804      	bhi.n	da374 <_strtol_l.isra.0+0xb4>
   da36a:	3c57      	subs	r4, #87	; 0x57
   da36c:	e7db      	b.n	da326 <_strtol_l.isra.0+0x66>
   da36e:	f04f 36ff 	mov.w	r6, #4294967295
   da372:	e7e4      	b.n	da33e <_strtol_l.isra.0+0x7e>
   da374:	1c73      	adds	r3, r6, #1
   da376:	d106      	bne.n	da386 <_strtol_l.isra.0+0xc6>
   da378:	2322      	movs	r3, #34	; 0x22
   da37a:	f8ce 3000 	str.w	r3, [lr]
   da37e:	4638      	mov	r0, r7
   da380:	b942      	cbnz	r2, da394 <_strtol_l.isra.0+0xd4>
   da382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da386:	f1b8 0f00 	cmp.w	r8, #0
   da38a:	d000      	beq.n	da38e <_strtol_l.isra.0+0xce>
   da38c:	4240      	negs	r0, r0
   da38e:	2a00      	cmp	r2, #0
   da390:	d0f7      	beq.n	da382 <_strtol_l.isra.0+0xc2>
   da392:	b10e      	cbz	r6, da398 <_strtol_l.isra.0+0xd8>
   da394:	f10c 31ff 	add.w	r1, ip, #4294967295
   da398:	6011      	str	r1, [r2, #0]
   da39a:	e7f2      	b.n	da382 <_strtol_l.isra.0+0xc2>
   da39c:	2430      	movs	r4, #48	; 0x30
   da39e:	2b00      	cmp	r3, #0
   da3a0:	d1b3      	bne.n	da30a <_strtol_l.isra.0+0x4a>
   da3a2:	2308      	movs	r3, #8
   da3a4:	e7b1      	b.n	da30a <_strtol_l.isra.0+0x4a>
   da3a6:	2c30      	cmp	r4, #48	; 0x30
   da3a8:	d0a4      	beq.n	da2f4 <_strtol_l.isra.0+0x34>
   da3aa:	230a      	movs	r3, #10
   da3ac:	e7ad      	b.n	da30a <_strtol_l.isra.0+0x4a>
   da3ae:	bf00      	nop
   da3b0:	000dae9a 	.word	0x000dae9a

000da3b4 <strtol>:
   da3b4:	4613      	mov	r3, r2
   da3b6:	460a      	mov	r2, r1
   da3b8:	4601      	mov	r1, r0
   da3ba:	4802      	ldr	r0, [pc, #8]	; (da3c4 <strtol+0x10>)
   da3bc:	6800      	ldr	r0, [r0, #0]
   da3be:	f7ff bf7f 	b.w	da2c0 <_strtol_l.isra.0>
   da3c2:	bf00      	nop
   da3c4:	2003df04 	.word	0x2003df04

000da3c8 <dynalib_user>:
   da3c8:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   da3d8:	00000000 63736964 656e6e6f 64657463     ....disconnected
   da3e8:	65727400 68742e6b 6c637765 6d6f632e     .trek.thewcl.com
   da3f8:	7b002f00 69736422 003a2264 7622202c     ./.{"dsid":., "v
   da408:	65756c61 00223a22 22202c22 656d6974     alue":".", "time
   da418:	6d617473 003a2270 7b002c7d 74616422     stamp":.},.{"dat
   da428:	5b3a2261 007d5d00 54534f50 61745300     a":[.]}.POST.Sta
   da438:	3a737574 6f420020 203a7964 72430a00     tus: .Body: ..Cr
   da448:	6e656465 6c616974 72612073 75632065     edentials are cu
   da458:	6e657272 20796c74 726f7473 66206465     rrently stored f
   da468:	0a3a726f 0a2c005b 450a5d00 7265746e     or:.[.,..].Enter
   da478:	74656e20 6b726f77 49535320 62282044      network SSID (b
   da488:	6b6e616c 206f7420 70696b73 6327202c     lank to skip, 'c
   da498:	7261656c 6f742027 73657220 63207465     lear' to reset c
   da4a8:	65646572 6169746e 3a29736c 430a0020     redentials): ..C
   da4b8:	65727275 4420746e 20444953 5b207369     urrent DSID is [
   da4c8:	450a5d00 7265746e 76656420 20656369     .].Enter device 
   da4d8:	44495344 6c622820 206b6e61 73206f74     DSID (blank to s
   da4e8:	2970696b 6300203a 7261656c 6e450a00     kip): .clear..En
   da4f8:	20726574 7774656e 206b726f 73736170     ter network pass
   da508:	64726f77 0a00203a 6572430a 746e6564     word: ...Credent
   da518:	736c6169 74657320 74697720 73732068     ials set with ss
   da528:	203a6469 61700a00 6f777373 203a6472     id: ..password: 
   da538:	000a0a00 746e450a 27207265 74736574     .....Enter 'test
   da548:	6f742027 73657420 72632074 6e656465     ' to test creden
   da558:	6c616974 62282073 6b6e616c 206f7420     tials (blank to 
   da568:	70696b73 00203a29 74736574 6d697400     skip): .test.tim
   da578:	74756f65 63755300 73736563 45000a21     eout.Success!..E
   da588:	524f5252 6957203a 63206946 656e6e6f     RROR: WiFi conne
   da598:	6f697463 6974206e 756f656d 64000a74     ction timeout..d
   da5a8:	20646973 65746e65 00646572 64697364     sid entered.dsid
   da5b8:	0a00203a 72727543 20746e65 756c6176     : ..Current valu
   da5c8:	6f662065 61642072 63206174 656c6c6f     e for data colle
   da5d8:	6f697463 6e69206e 76726574 69206c61     ction interval i
   da5e8:	005b2073 6e450a5d 20726574 656d6974     s [.].Enter time
   da5f8:	74656220 6e656577 74616420 6f632061      between data co
   da608:	63656c6c 6e6f6974 20736120 69206e61     llection as an i
   da618:	6765746e 69207265 696d206e 73696c6c     nteger in millis
   da628:	6e6f6365 28207364 6e616c62 6f74206b     econds (blank to
   da638:	696b7320 203a2970 75430a00 6e657272      skip): ..Curren
   da648:	61762074 2065756c 20726f66 69466957     t value for WiFi
   da658:	6e6f6320 7463656e 206e6f69 65746e69      connection inte
   da668:	6c617672 20736920 0a5d005b 65746e45     rval is [.].Ente
   da678:	69742072 6220656d 65777465 57206e65     r time between W
   da688:	20694669 6e6e6f63 69746365 20736e6f     iFi connections 
   da698:	61207361 6e69206e 65676574 6e692072     as an integer in
   da6a8:	63657320 73646e6f 6c622820 206b6e61      seconds (blank 
   da6b8:	73206f74 2970696b 0a00203a 65746e45     to skip): ..Ente
   da6c8:	6f272072 20276174 77206f74 20746961     r 'ota' to wait 
   da6d8:	20726f66 2041544f 61647075 28206574     for OTA update (
   da6e8:	6e616c62 6f74206b 696b7320 203a2970     blank to skip): 
   da6f8:	61746f00 36343300 38343300 34453600     .ota.346.348.6E4
   da708:	30303030 35422d31 462d3341 2d333933     00001-B5A3-F393-
   da718:	39413045 3035452d 44343245 39414343     E0A9-E50E24DCCA9
   da728:	45360045 30303034 422d3230 2d334135     E.6E400002-B5A3-
   da738:	33393346 4130452d 35452d39 34324530     F393-E0A9-E50E24
   da748:	41434344 36004539 30303445 2d333030     DCCA9E.6E400003-
   da758:	33413542 3933462d 30452d33 452d3941     B5A3-F393-E0A9-E
   da768:	32453035 43434434 00453941 72007874     50E24DCCA9E.tx.r
   da778:	63410078 74706563 70706100 6163696c     x.Accept.applica
   da788:	6e6f6974 6f736a2f 6f43006e 6e65746e     tion/json.Conten
   da798:	79542d74 61006570 742d6970 6e656b6f     t-Type.api-token
   da7a8:	49504100 6661652d 632d6565 36356264     .API-eafee-cdb56
   da7b8:	3435332d 332d6435 64376638 74744800     -3545d-38f7d.Htt
   da7c8:	696c4370 3e746e65 6e6f4309 7463656e     pClient>.Connect
   da7d8:	20676e69 203a6f74 74744800 696c4370     ing to: .HttpCli
   da7e8:	3e746e65 6e6f4309 7463656e 20676e69     ent>.Connecting 
   da7f8:	49206f74 00203a50 54544820 2e312f50     to IP: . HTTP/1.
   da808:	000a0d30 70747448 65696c43 093e746e     0...HttpClient>.
   da818:	72617453 666f2074 54544820 65522050     Start of HTTP Re
   da828:	73657571 63002e74 65736f6c 6e6f4300     quest..close.Con
   da838:	7463656e 006e6f69 70747448 65696c43     nection.HttpClie
   da848:	093e746e 6e6e6f43 69746365 66206e6f     nt>.Connection f
   da858:	656c6961 48002e64 0054534f 746e6f43     ailed..HOST.Cont
   da868:	2d746e65 676e654c 48006874 43707474     ent-Length.HttpC
   da878:	6e65696c 45093e74 6f20646e 54482066     lient>.End of HT
   da888:	52205054 65757165 002e7473 74480a0d     TP Request....Ht
   da898:	6c437074 746e6569 6552093e 76696563     tpClient>.Receiv
   da8a8:	20676e69 20504354 6e617274 74636173     ing TCP transact
   da8b8:	206e6f69 0020666f 74796220 002e7365     ion of . bytes..
   da8c8:	70747448 65696c43 093e746e 6f727245     HttpClient>.Erro
   da8d8:	52203a72 6f707365 2065736e 79646f62     r: Response body
   da8e8:	72616c20 20726567 6e616874 66756220      larger than buf
   da8f8:	2e726566 480a0d00 43707474 6e65696c     fer....HttpClien
   da908:	45093e74 6f20646e 43542066 72742050     t>.End of TCP tr
   da918:	61736e61 6f697463 0d002e6e 7474480a     ansaction....Htt
   da928:	696c4370 3e746e65 72724509 203a726f     pClient>.Error: 
   da938:	656d6954 2074756f 6c696877 65722065     Timeout while re
   da948:	6e696461 65722067 6e6f7073 002e6573     ading response..
   da958:	74480a0d 6c437074 746e6569 6e45093e     ..HttpClient>.En
   da968:	666f2064 54544820 65522050 6e6f7073     d of HTTP Respon
   da978:	28206573 29736d00 7448002e 6c437074     se (.ms)..HttpCl
   da988:	746e6569 7453093e 73757461 646f4320     ient>.Status Cod
   da998:	00203a65 0a0d0a0d 74744800 696c4370     e: ......HttpCli
   da9a8:	3e746e65 72724509 203a726f 276e6143     ent>.Error: Can'
   da9b8:	69662074 4820646e 20505454 70736572     t find HTTP resp
   da9c8:	65736e6f 646f6220 4c002e79 44335349     onse body..LIS3D
   da9d8:	00000048                                H...

000da9dc <_ZTV15Adafruit_LIS3DH>:
	...
   da9e4:	000d40af 000d4f59 000d5641 000d5af1     .@..YO..AV...Z..
   da9f4:	000d5645                                EV..

000da9f8 <_ZTVN5spark13EthernetClassE>:
	...
   daa00:	000d6337 000d632d 000d6323 000d6319     7c..-c..#c...c..
   daa10:	000d630d 000d6301 000d8f15 000d8f1d     .c...c..........
   daa20:	000d62f5 000d62ed 000d62e3 000d62d9     .b...b...b...b..
   daa30:	000d8f4d                                M...

000daa34 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   daa34:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   daa44:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   daa54:	72756769 6f697461 7369206e 766e6920     iguration is inv
   daa64:	64696c61 6977002e 676e6972 656c622e     alid..wiring.ble
   daa74:	61745300 64207472 6f637369 69726576     .Start discoveri
   daa84:	7320676e 69767265 2e736563 65655000     ng services..Pee
   daa94:	65642072 65636976 20736920 7373696d     r device is miss
   daaa4:	21676e69 69614600 2064656c 61206f74     ing!.Failed to a
   daab4:	6e657070 65702064 43207265 72746e65     ppend peer Centr
   daac4:	64206c61 63697665 43002e65 656e6e6f     al device..Conne
   daad4:	64657463 20796220 746e6543 206c6172     cted by Central 
   daae4:	69766564 002e6563 63736944 656e6e6f     device..Disconne
   daaf4:	64657463 20796220 6f6d6572 64206574     cted by remote d
   dab04:	63697665 44002e65 696c7075 65746163     evice..Duplicate
   dab14:	68632064 63617261 69726574 63697473     d characteristic
   dab24:	6e616320 20746f6e 61206562 64656464      cannot be added
   dab34:	6146002e 64656c69 206f7420 65707061     ..Failed to appe
   dab44:	6c20646e 6c61636f 61686320 74636172     nd local charact
   dab54:	73697265 2e636974 00000000              eristic.....

000dab60 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dab68:	000d6b2d 000d6b91 000d6da3 000d6bbb     -k...k...m...k..
   dab78:	000d6b31                                1k..

000dab7c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dab84:	000d6b29 000d6b9f 000d6b2b 000d6bbf     )k...k..+k...k..
   dab94:	000d6b51                                Qk..

000dab98 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   daba0:	000d6b27 000d6bad 000d75b1 000d6bc3     'k...k...u...k..
   dabb0:	000d6b71                                qk..

000dabb4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   dabbc:	5f9b34fb 80000080 00001000 00000000     .4._............

000dabcc <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   dabcc:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000dabdc <_ZN8particle7BleUuid9BASE_UUIDE>:
   dabdc:	5f9b34fb 80000080 00001000 00000000     .4._............
   dabec:	006e616e 00666e69 0066766f 00707061     nan.inf.ovf.app.
   dabfc:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   dac0c:	007a2553 74637361 00656d69              S%z.asctime.

000dac18 <_ZTV9IPAddress>:
	...
   dac20:	000d8457 000d8447 000d8449              W...G...I...

000dac2c <_ZTV9USBSerial>:
	...
   dac34:	000d8565 000d85cd 000d85a3 000d7f9d     e...............
   dac44:	000d8595 000d8567 000d8577 000d85c7     ....g...w.......
   dac54:	000d8587 000d8561                       ....a...

000dac5c <_ZTV11USARTSerial>:
	...
   dac64:	000d8671 000d86dd 000d86b5 000d7f9d     q...............
   dac74:	000d8685 000d86a1 000d8693 000d86af     ................
   dac84:	000d8673 000d8677                       s...w...

000dac8c <_ZTV7TwoWire>:
	...
   dac94:	000d876d 000d87b7 000d878f 000d876f     m...........o...
   daca4:	000d8797 000d879f 000d87a7 000d87af     ................
   dacb4:	76636572 72726520 3d20726f 00642520     recv error = %d.

000dacc4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   daccc:	000d88f3 000d8915 000d8d2f 000d8923     ......../...#...
   dacdc:	000d88f5                                ....

000dace0 <_ZTV9TCPClient>:
	...
   dace8:	000d89a1 000d89d5 000d8871 000d888b     ........q.......
   dacf8:	000d8bc5 000d8a37 000d8a09 000d88b5     ....7...........
   dad08:	000d8acf 000d8d35 000d8a6b 000d8c79     ....5...k...y...
   dad18:	000d88b7 000d88e9 000d889d 000d8927     ............'...
   dad28:	000d89e9                                ....

000dad2c <_ZTVN5spark9WiFiClassE>:
	...
   dad34:	000d41b9 000d8e91 000d8e87 000d41c3     .A...........A..
   dad44:	000d41a1 000d41ad 000d8f15 000d8f1d     .A...A..........
   dad54:	000d8e7b 000d8e73 000d8e69 000d8e5f     {...s...i..._...
   dad64:	000d8f4d                                M...

000dad68 <_ZTVN5spark12NetworkClassE>:
	...
   dad70:	000d8ed5 000d8edf 000d8ee9 000d8ef3     ................
   dad80:	000d8efd 000d8f09 000d8f15 000d8f1d     ................
   dad90:	000d8f25 000d8f31 000d8f39 000d8f43     %...1...9...C...
   dada0:	000d8f4d                                M...

000dada4 <_ZSt7nothrow>:
	...

000dada5 <_ZTSSt19_Sp_make_shared_tag>:
   dada5:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   dadb5:	5f646572 00676174                        red_tag....

000dadc0 <_ZTISt19_Sp_make_shared_tag>:
   dadc0:	000dae00 000dada5                       ........

000dadc8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   dadc8:	000dae60 000dadd4 000dae84              `...........

000dadd4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   dadd4:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   dade4:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   dadf4:	00000045                                E...

000dadf8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   dadf8:	00000000 000dadc8 000d924d 000d9261     ........M...a...
   dae08:	000d93f5 000d93f5 000d92cb 000d920d     ................
   dae18:	000d92b3 000d9275 000d9241              ....u...A...

000dae24 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   dae24:	000dae60 000dae30 000dadc8              `...0.......

000dae30 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   dae30:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   dae40:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   dae50:	456f666e 00000000                       nfoE....

000dae58 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   dae58:	00000000 000dae24 000d92f5 000d9309     ....$...........
   dae68:	000d93f5 000d93f5 000d92cb 000d920d     ................
   dae78:	000d93c9 000d9355 000d931d              ....U.......

000dae84 <_ZTISt9type_info>:
   dae84:	000dae00 000dae8c                       ........

000dae8c <_ZTSSt9type_info>:
   dae8c:	74397453 5f657079 6f666e69               St9type_info.

000dae99 <_ctype_>:
   dae99:	20202000 20202020 28282020 20282828     .         ((((( 
   daea9:	20202020 20202020 20202020 20202020                     
   daeb9:	10108820 10101010 10101010 10101010      ...............
   daec9:	04040410 04040404 10040404 10101010     ................
   daed9:	41411010 41414141 01010101 01010101     ..AAAAAA........
   daee9:	01010101 01010101 01010101 10101010     ................
   daef9:	42421010 42424242 02020202 02020202     ..BBBBBB........
   daf09:	02020202 02020202 02020202 10101010     ................
   daf19:	00000020 00000000 00000000 00000000      ...............
	...

000daf9a <link_const_variable_data_end>:
	...

000daf9c <link_constructors_location>:
   daf9c:	000d4f69 	.word	0x000d4f69
   dafa0:	000d6341 	.word	0x000d6341
   dafa4:	000d65b5 	.word	0x000d65b5
   dafa8:	000d7f75 	.word	0x000d7f75
   dafac:	000d8235 	.word	0x000d8235
   dafb0:	000d82b9 	.word	0x000d82b9
   dafb4:	000d82e1 	.word	0x000d82e1
   dafb8:	000d8ec1 	.word	0x000d8ec1
   dafbc:	000d902d 	.word	0x000d902d
