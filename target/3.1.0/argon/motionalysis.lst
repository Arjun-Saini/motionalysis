
/Users/trylaarsdam/Documents/dev/motionalysis/target/3.1.0/argon/motionalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006580  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000ba5a0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000084  2003d9d0  000ba5a4  0001d9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000d9c  2003da58  2003da58  0002da58  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000ba628  000ba628  0002a628  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000ba650  000ba650  0002a650  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0011bd03  00000000  00000000  0002a654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 000131c2  00000000  00000000  00146357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    000386e1  00000000  00000000  00159519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00003150  00000000  00000000  00191bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 0000a8e8  00000000  00000000  00194d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037dd4  00000000  00000000  0019f632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003e842  00000000  00000000  001d7406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012a31c  00000000  00000000  00215c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  000089d0  00000000  00000000  0033ff64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f005 faa1 	bl	b9578 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f005 fac3 	bl	b95c8 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d9d0 	.word	0x2003d9d0
   b404c:	000ba5a4 	.word	0x000ba5a4
   b4050:	2003da54 	.word	0x2003da54
   b4054:	2003da58 	.word	0x2003da58
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 fdc9 	bl	b8bf8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42a5      	cmp	r5, r4
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000ba578 	.word	0x000ba578
   b4080:	000ba59c 	.word	0x000ba59c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bbca 	b.w	b481c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fc9d 	bl	b49c8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 bd69 	b.w	b8b68 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 b85f 	b.w	b6158 <malloc>

000b409a <_Znaj>:
   b409a:	f002 b85d 	b.w	b6158 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f002 b863 	b.w	b6168 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   b40b2:	4770      	bx	lr

000b40b4 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b40b4:	b510      	push	{r4, lr}
   b40b6:	4604      	mov	r4, r0
   b40b8:	3004      	adds	r0, #4
   b40ba:	f003 fe35 	bl	b7d28 <_ZN6StringD1Ev>
   b40be:	4620      	mov	r0, r4
   b40c0:	bd10      	pop	{r4, pc}

000b40c2 <_ZN14http_request_tD1Ev>:
} http_request_t;
   b40c2:	b510      	push	{r4, lr}
   b40c4:	4604      	mov	r4, r0
   b40c6:	303c      	adds	r0, #60	; 0x3c
   b40c8:	f003 fe2e 	bl	b7d28 <_ZN6StringD1Ev>
   b40cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b40d0:	f003 fe2a 	bl	b7d28 <_ZN6StringD1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f003 fe27 	bl	b7d28 <_ZN6StringD1Ev>
   b40da:	4620      	mov	r0, r4
   b40dc:	bd10      	pop	{r4, pc}
	...

000b40e0 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv>:

  count++;
}

//d7 led turns on when ble connected
void connectCallback(const BlePeerDevice& peer, void* context){
   b40e0:	b508      	push	{r3, lr}
  count = 0;
   b40e2:	4b07      	ldr	r3, [pc, #28]	; (b4100 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x20>)
   b40e4:	2200      	movs	r2, #0
   b40e6:	601a      	str	r2, [r3, #0]
  Serial.println("connected");
   b40e8:	f004 fc10 	bl	b890c <_Z16_fetch_usbserialv>
   b40ec:	4905      	ldr	r1, [pc, #20]	; (b4104 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x24>)
   b40ee:	f003 fd14 	bl	b7b1a <_ZN5Print7printlnEPKc>
  digitalWrite(D7, HIGH);
}
   b40f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(D7, HIGH);
   b40f6:	2101      	movs	r1, #1
   b40f8:	2007      	movs	r0, #7
   b40fa:	f004 bdfe 	b.w	b8cfa <digitalWrite>
   b40fe:	bf00      	nop
   b4100:	2003daa8 	.word	0x2003daa8
   b4104:	000b9b8c 	.word	0x000b9b8c

000b4108 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv>:

//d7 led turns off when ble disconnected
void disconnectCallback(const BlePeerDevice& peer, void* context){
   b4108:	b508      	push	{r3, lr}
  Serial.println("disconnected");
   b410a:	f004 fbff 	bl	b890c <_Z16_fetch_usbserialv>
   b410e:	4904      	ldr	r1, [pc, #16]	; (b4120 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   b4110:	f003 fd03 	bl	b7b1a <_ZN5Print7printlnEPKc>
  digitalWrite(D7, LOW);
   b4114:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(D7, LOW);
   b4118:	2100      	movs	r1, #0
   b411a:	2007      	movs	r0, #7
   b411c:	f004 bded 	b.w	b8cfa <digitalWrite>
   b4120:	000b9800 	.word	0x000b9800

000b4124 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   b4124:	b510      	push	{r4, lr}
   b4126:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b4128:	6800      	ldr	r0, [r0, #0]
   b412a:	b108      	cbz	r0, b4130 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   b412c:	f002 f81c 	bl	b6168 <free>
class SystemClass {
   b4130:	4620      	mov	r0, r4
   b4132:	bd10      	pop	{r4, pc}

000b4134 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   b4134:	b510      	push	{r4, lr}
   b4136:	4604      	mov	r4, r0

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   b4138:	b93a      	cbnz	r2, b414a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b413a:	6803      	ldr	r3, [r0, #0]
   b413c:	689b      	ldr	r3, [r3, #8]
   b413e:	4798      	blx	r3
        n += println();
   b4140:	4620      	mov	r0, r4
    }
   b4142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b4146:	f003 bcdc 	b.w	b7b02 <_ZN5Print7printlnEv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b414a:	b2d2      	uxtb	r2, r2
   b414c:	f003 fcef 	bl	b7b2e <_ZN5Print11printNumberEmh>
   b4150:	e7f6      	b.n	b4140 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0xc>

000b4152 <_ZN5Print7printlnIjLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b4152:	b510      	push	{r4, lr}
   b4154:	4604      	mov	r4, r0
    if (base == 0) {
   b4156:	b942      	cbnz	r2, b416a <_ZN5Print7printlnIjLi0EEEjT_i.isra.0+0x18>
        return write(n);
   b4158:	6802      	ldr	r2, [r0, #0]
   b415a:	b2c9      	uxtb	r1, r1
   b415c:	6892      	ldr	r2, [r2, #8]
   b415e:	4790      	blx	r2
        n += println();
   b4160:	4620      	mov	r0, r4
    }
   b4162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b4166:	f003 bccc 	b.w	b7b02 <_ZN5Print7printlnEv>
        return printNumber(val, base) + t;
   b416a:	b2d2      	uxtb	r2, r2
   b416c:	f003 fcdf 	bl	b7b2e <_ZN5Print11printNumberEmh>
   b4170:	e7f6      	b.n	b4160 <_ZN5Print7printlnIjLi0EEEjT_i.isra.0+0xe>

000b4172 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b4172:	b570      	push	{r4, r5, r6, lr}
   b4174:	4605      	mov	r5, r0
   b4176:	460c      	mov	r4, r1
    if (base == 0) {
   b4178:	4616      	mov	r6, r2
   b417a:	b942      	cbnz	r2, b418e <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x1c>
        return write(n);
   b417c:	6803      	ldr	r3, [r0, #0]
   b417e:	b2c9      	uxtb	r1, r1
   b4180:	689b      	ldr	r3, [r3, #8]
   b4182:	4798      	blx	r3
        n += println();
   b4184:	4628      	mov	r0, r5
    }
   b4186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        n += println();
   b418a:	f003 bcba 	b.w	b7b02 <_ZN5Print7printlnEv>
        if (n < 0 && base == 10) {
   b418e:	2900      	cmp	r1, #0
   b4190:	da0a      	bge.n	b41a8 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
   b4192:	2a0a      	cmp	r2, #10
   b4194:	d108      	bne.n	b41a8 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
            t = print('-');
   b4196:	212d      	movs	r1, #45	; 0x2d
   b4198:	f003 fcaa 	bl	b7af0 <_ZN5Print5printEc>
            val = -n;
   b419c:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b419e:	b2f2      	uxtb	r2, r6
   b41a0:	4628      	mov	r0, r5
   b41a2:	f003 fcc4 	bl	b7b2e <_ZN5Print11printNumberEmh>
   b41a6:	e7ed      	b.n	b4184 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x12>
            val = n;
   b41a8:	4621      	mov	r1, r4
   b41aa:	e7f8      	b.n	b419e <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x2c>

000b41ac <_ZN10HttpClientD1Ev>:

class HttpClient {
   b41ac:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b41ae:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b41b0:	4b0a      	ldr	r3, [pc, #40]	; (b41dc <_ZN10HttpClientD1Ev+0x30>)
   b41b2:	6003      	str	r3, [r0, #0]
   b41b4:	4605      	mov	r5, r0
   b41b6:	b17c      	cbz	r4, b41d8 <_ZN10HttpClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b41b8:	6863      	ldr	r3, [r4, #4]
   b41ba:	3b01      	subs	r3, #1
   b41bc:	6063      	str	r3, [r4, #4]
   b41be:	b95b      	cbnz	r3, b41d8 <_ZN10HttpClientD1Ev+0x2c>
          _M_dispose();
   b41c0:	6823      	ldr	r3, [r4, #0]
   b41c2:	4620      	mov	r0, r4
   b41c4:	689b      	ldr	r3, [r3, #8]
   b41c6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b41c8:	68a3      	ldr	r3, [r4, #8]
   b41ca:	3b01      	subs	r3, #1
   b41cc:	60a3      	str	r3, [r4, #8]
   b41ce:	b91b      	cbnz	r3, b41d8 <_ZN10HttpClientD1Ev+0x2c>
            _M_destroy();
   b41d0:	6823      	ldr	r3, [r4, #0]
   b41d2:	4620      	mov	r0, r4
   b41d4:	68db      	ldr	r3, [r3, #12]
   b41d6:	4798      	blx	r3
   b41d8:	4628      	mov	r0, r5
   b41da:	bd38      	pop	{r3, r4, r5, pc}
   b41dc:	000ba1bc 	.word	0x000ba1bc

000b41e0 <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b41e0:	b40e      	push	{r1, r2, r3}
   b41e2:	b503      	push	{r0, r1, lr}
   b41e4:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   b41e6:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b41e8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b41ec:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b41ee:	f003 fcbc 	bl	b7b6a <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b41f2:	b002      	add	sp, #8
   b41f4:	f85d eb04 	ldr.w	lr, [sp], #4
   b41f8:	b003      	add	sp, #12
   b41fa:	4770      	bx	lr

000b41fc <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b41fc:	2300      	movs	r3, #0
   b41fe:	6840      	ldr	r0, [r0, #4]
   b4200:	461a      	mov	r2, r3
   b4202:	4619      	mov	r1, r3
   b4204:	f001 bf58 	b.w	b60b8 <network_on>

000b4208 <_ZN5spark9WiFiClass3offEv>:
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b4208:	2300      	movs	r3, #0
   b420a:	6840      	ldr	r0, [r0, #4]
   b420c:	461a      	mov	r2, r3
   b420e:	4619      	mov	r1, r3
   b4210:	f001 bf5a 	b.w	b60c8 <network_off>

000b4214 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   b4214:	2300      	movs	r3, #0
   b4216:	6840      	ldr	r0, [r0, #4]
   b4218:	461a      	mov	r2, r3
   b421a:	f001 bf2d 	b.w	b6078 <network_connect>

000b421e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b421e:	2200      	movs	r2, #0
   b4220:	6840      	ldr	r0, [r0, #4]
   b4222:	4611      	mov	r1, r2
   b4224:	f001 bf40 	b.w	b60a8 <network_ready>

000b4228 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b422c:	460c      	mov	r4, r1
   b422e:	b094      	sub	sp, #80	; 0x50
  switch(count){
   b4230:	4ea9      	ldr	r6, [pc, #676]	; (b44d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4232:	4605      	mov	r5, r0
  Serial.println(len);
   b4234:	f004 fb6a 	bl	b890c <_Z16_fetch_usbserialv>
   b4238:	220a      	movs	r2, #10
   b423a:	4621      	mov	r1, r4
   b423c:	f7ff ff89 	bl	b4152 <_ZN5Print7printlnIjLi0EEEjT_i.isra.0>
  inputBuffer = "";
   b4240:	49a6      	ldr	r1, [pc, #664]	; (b44dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b4>)
   b4242:	48a7      	ldr	r0, [pc, #668]	; (b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b4244:	f003 fdde 	bl	b7e04 <_ZN6StringaSEPKc>
  switch(count){
   b4248:	6833      	ldr	r3, [r6, #0]
   b424a:	2b07      	cmp	r3, #7
   b424c:	f200 80c9 	bhi.w	b43e2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ba>
   b4250:	e8df f013 	tbh	[pc, r3, lsl #1]
   b4254:	0097010f 	.word	0x0097010f
   b4258:	006c007e 	.word	0x006c007e
   b425c:	00380052 	.word	0x00380052
   b4260:	0008001b 	.word	0x0008001b
   b4264:	442c      	add	r4, r5
   b4266:	1e6f      	subs	r7, r5, #1

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b4268:	4d9d      	ldr	r5, [pc, #628]	; (b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b426a:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b426c:	42a7      	cmp	r7, r4
   b426e:	f000 8250 	beq.w	b4712 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4ea>
        Serial.println(data[i]);
   b4272:	f004 fb4b 	bl	b890c <_Z16_fetch_usbserialv>
   b4276:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b427a:	220a      	movs	r2, #10
   b427c:	f7ff ff5a 	bl	b4134 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   b4280:	7839      	ldrb	r1, [r7, #0]
   b4282:	4628      	mov	r0, r5
   b4284:	f003 fe11 	bl	b7eaa <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   b4288:	e7f0      	b.n	b426c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
   b428a:	442c      	add	r4, r5
   b428c:	1e6f      	subs	r7, r5, #1
   b428e:	f8df 8250 	ldr.w	r8, [pc, #592]	; b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>
   b4292:	4d94      	ldr	r5, [pc, #592]	; (b44e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2bc>)
   b4294:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4296:	42a7      	cmp	r7, r4
   b4298:	f000 8218 	beq.w	b46cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4a4>
        Serial.println(data[i]);
   b429c:	f004 fb36 	bl	b890c <_Z16_fetch_usbserialv>
   b42a0:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b42a4:	220a      	movs	r2, #10
   b42a6:	f7ff ff45 	bl	b4134 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   b42aa:	7839      	ldrb	r1, [r7, #0]
   b42ac:	488c      	ldr	r0, [pc, #560]	; (b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b42ae:	f003 fdfc 	bl	b7eaa <_ZN6String6concatEc>
        reportingInterval = atoi(inputBuffer) * 1000;
   b42b2:	f8d8 0000 	ldr.w	r0, [r8]
   b42b6:	f005 f929 	bl	b950c <atoi>
   b42ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b42be:	4358      	muls	r0, r3
   b42c0:	6028      	str	r0, [r5, #0]
      for(int i = 0; i < len - 1; i++){
   b42c2:	e7e8      	b.n	b4296 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6e>
   b42c4:	442c      	add	r4, r5
   b42c6:	1e6f      	subs	r7, r5, #1
   b42c8:	f8df 8214 	ldr.w	r8, [pc, #532]	; b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>
        recordingInterval = atoi(inputBuffer);
   b42cc:	4d86      	ldr	r5, [pc, #536]	; (b44e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c0>)
   b42ce:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b42d0:	42a7      	cmp	r7, r4
   b42d2:	f000 81be 	beq.w	b4652 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x42a>
        Serial.println(data[i]);
   b42d6:	f004 fb19 	bl	b890c <_Z16_fetch_usbserialv>
   b42da:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b42de:	220a      	movs	r2, #10
   b42e0:	f7ff ff28 	bl	b4134 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   b42e4:	7839      	ldrb	r1, [r7, #0]
   b42e6:	487e      	ldr	r0, [pc, #504]	; (b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b42e8:	f003 fddf 	bl	b7eaa <_ZN6String6concatEc>
        recordingInterval = atoi(inputBuffer);
   b42ec:	f8d8 0000 	ldr.w	r0, [r8]
   b42f0:	f005 f90c 	bl	b950c <atoi>
   b42f4:	6028      	str	r0, [r5, #0]
      for(int i = 0; i < len - 1; i++){
   b42f6:	e7eb      	b.n	b42d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa8>
   b42f8:	442c      	add	r4, r5
   b42fa:	1e6f      	subs	r7, r5, #1
   b42fc:	f8df 81e0 	ldr.w	r8, [pc, #480]	; b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>
   b4300:	4d7a      	ldr	r5, [pc, #488]	; (b44ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c4>)
   b4302:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4304:	42a7      	cmp	r7, r4
   b4306:	f000 8165 	beq.w	b45d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3ac>
        Serial.println(data[i]);
   b430a:	f004 faff 	bl	b890c <_Z16_fetch_usbserialv>
   b430e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4312:	220a      	movs	r2, #10
   b4314:	f7ff ff0e 	bl	b4134 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   b4318:	7839      	ldrb	r1, [r7, #0]
   b431a:	4871      	ldr	r0, [pc, #452]	; (b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b431c:	f003 fdc5 	bl	b7eaa <_ZN6String6concatEc>
        dsid = atoi(inputBuffer);
   b4320:	f8d8 0000 	ldr.w	r0, [r8]
   b4324:	f005 f8f2 	bl	b950c <atoi>
   b4328:	6028      	str	r0, [r5, #0]
      for(int i = 0; i < len - 1; i++){
   b432a:	e7eb      	b.n	b4304 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xdc>
   b432c:	442c      	add	r4, r5
   b432e:	1e6f      	subs	r7, r5, #1
   b4330:	4d6b      	ldr	r5, [pc, #428]	; (b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b4332:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4334:	42bc      	cmp	r4, r7
   b4336:	d06e      	beq.n	b4416 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ee>
        Serial.println(data[i]);
   b4338:	f004 fae8 	bl	b890c <_Z16_fetch_usbserialv>
   b433c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4340:	220a      	movs	r2, #10
   b4342:	f7ff fef7 	bl	b4134 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   b4346:	7839      	ldrb	r1, [r7, #0]
   b4348:	4628      	mov	r0, r5
   b434a:	f003 fdae 	bl	b7eaa <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   b434e:	e7f1      	b.n	b4334 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>
   b4350:	442c      	add	r4, r5
   b4352:	1e6f      	subs	r7, r5, #1
        password = inputBuffer;
   b4354:	f8df 81c8 	ldr.w	r8, [pc, #456]	; b4520 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f8>
   b4358:	4d61      	ldr	r5, [pc, #388]	; (b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b435a:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b435c:	42a7      	cmp	r7, r4
   b435e:	f000 80e5 	beq.w	b452c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x304>
        Serial.println(data[i]);
   b4362:	f004 fad3 	bl	b890c <_Z16_fetch_usbserialv>
   b4366:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b436a:	220a      	movs	r2, #10
   b436c:	f7ff fee2 	bl	b4134 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   b4370:	7839      	ldrb	r1, [r7, #0]
   b4372:	4628      	mov	r0, r5
   b4374:	f003 fd99 	bl	b7eaa <_ZN6String6concatEc>
        password = inputBuffer;
   b4378:	4629      	mov	r1, r5
   b437a:	4640      	mov	r0, r8
   b437c:	f003 fd33 	bl	b7de6 <_ZN6StringaSERKS_>
      for(int i = 0; i < len - 1; i++){
   b4380:	e7ec      	b.n	b435c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>
   b4382:	1e6f      	subs	r7, r5, #1
        ssid = inputBuffer;
   b4384:	f8df 8178 	ldr.w	r8, [pc, #376]	; b4500 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d8>
   b4388:	4425      	add	r5, r4
   b438a:	4c55      	ldr	r4, [pc, #340]	; (b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b438c:	3d02      	subs	r5, #2
      for(int i = 0; i < len - 1; i++){
   b438e:	42bd      	cmp	r5, r7
   b4390:	d02d      	beq.n	b43ee <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c6>
   b4392:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4396:	4620      	mov	r0, r4
   b4398:	f003 fd87 	bl	b7eaa <_ZN6String6concatEc>
        ssid = inputBuffer;
   b439c:	4621      	mov	r1, r4
   b439e:	4640      	mov	r0, r8
   b43a0:	f003 fd21 	bl	b7de6 <_ZN6StringaSERKS_>
        Serial.println(data[i]);
   b43a4:	f004 fab2 	bl	b890c <_Z16_fetch_usbserialv>
   b43a8:	7839      	ldrb	r1, [r7, #0]
   b43aa:	220a      	movs	r2, #10
   b43ac:	f7ff fec2 	bl	b4134 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
      for(int i = 0; i < len - 1; i++){
   b43b0:	e7ed      	b.n	b438e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x166>
      networkBuffer = networks[networkCount - 1].ssid;
   b43b2:	4b4f      	ldr	r3, [pc, #316]	; (b44f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b43b4:	484f      	ldr	r0, [pc, #316]	; (b44f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
   b43b6:	2238      	movs	r2, #56	; 0x38
   b43b8:	fb02 3101 	mla	r1, r2, r1, r3
   b43bc:	3104      	adds	r1, #4
   b43be:	f003 fd21 	bl	b7e04 <_ZN6StringaSEPKc>
      Serial.println(networkBuffer.length());
   b43c2:	f004 faa3 	bl	b890c <_Z16_fetch_usbserialv>
   b43c6:	68a1      	ldr	r1, [r4, #8]
   b43c8:	220a      	movs	r2, #10
   b43ca:	f7ff fec2 	bl	b4152 <_ZN5Print7printlnIjLi0EEEjT_i.isra.0>
      txCharacteristic.setValue(networkBuffer);
   b43ce:	4949      	ldr	r1, [pc, #292]	; (b44f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
   b43d0:	4849      	ldr	r0, [pc, #292]	; (b44f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d0>)
   b43d2:	2200      	movs	r2, #0
   b43d4:	f002 fa76 	bl	b68c4 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
      txCharacteristic.setValue("]\nEnter network SSID (blank to skip, 'clear' to reset credentials): ");
   b43d8:	4948      	ldr	r1, [pc, #288]	; (b44fc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d4>)
   b43da:	2200      	movs	r2, #0
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   b43dc:	4846      	ldr	r0, [pc, #280]	; (b44f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d0>)
   b43de:	f002 fa76 	bl	b68ce <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
  count++;
   b43e2:	6833      	ldr	r3, [r6, #0]
   b43e4:	3301      	adds	r3, #1
   b43e6:	6033      	str	r3, [r6, #0]
}
   b43e8:	b014      	add	sp, #80	; 0x50
   b43ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b43ee:	4d44      	ldr	r5, [pc, #272]	; (b4500 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d8>)
      Serial.println(ssid);
   b43f0:	f004 fa8c 	bl	b890c <_Z16_fetch_usbserialv>
   b43f4:	6829      	ldr	r1, [r5, #0]
   b43f6:	f003 fb90 	bl	b7b1a <_ZN5Print7printlnEPKc>
      Serial.println(ssid.length());
   b43fa:	f004 fa87 	bl	b890c <_Z16_fetch_usbserialv>
   b43fe:	68a9      	ldr	r1, [r5, #8]
   b4400:	220a      	movs	r2, #10
   b4402:	f7ff fea6 	bl	b4152 <_ZN5Print7printlnIjLi0EEEjT_i.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4406:	4935      	ldr	r1, [pc, #212]	; (b44dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b4>)
   b4408:	4628      	mov	r0, r5
   b440a:	f003 fd97 	bl	b7f3c <_ZNK6String6equalsEPKc>
      if(ssid == ""){
   b440e:	4604      	mov	r4, r0
   b4410:	b300      	cbz	r0, b4454 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x22c>
        count = 3;
   b4412:	2303      	movs	r3, #3
   b4414:	6033      	str	r3, [r6, #0]
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b4416:	4c35      	ldr	r4, [pc, #212]	; (b44ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c4>)
        EEPROM.get(0, dsid);
   b4418:	f004 fc9c 	bl	b8d54 <_Z21__fetch_global_EEPROMv>
   b441c:	4621      	mov	r1, r4
   b441e:	2204      	movs	r2, #4
   b4420:	2000      	movs	r0, #0
   b4422:	f001 fbd3 	bl	b5bcc <HAL_EEPROM_Get>
        txCharacteristic.setValue("\nCurrent DSID is [");
   b4426:	4937      	ldr	r1, [pc, #220]	; (b4504 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2dc>)
   b4428:	4833      	ldr	r0, [pc, #204]	; (b44f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d0>)
   b442a:	2200      	movs	r2, #0
   b442c:	f002 fa4f 	bl	b68ce <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        if(dsid != -1){
   b4430:	6821      	ldr	r1, [r4, #0]
   b4432:	1c4c      	adds	r4, r1, #1
   b4434:	d00b      	beq.n	b444e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x226>
          txCharacteristic.setValue(String(dsid));
   b4436:	220a      	movs	r2, #10
   b4438:	a801      	add	r0, sp, #4
   b443a:	f003 fcf5 	bl	b7e28 <_ZN6StringC1Eih>
   b443e:	482e      	ldr	r0, [pc, #184]	; (b44f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d0>)
   b4440:	2200      	movs	r2, #0
   b4442:	a901      	add	r1, sp, #4
   b4444:	f002 fa3e 	bl	b68c4 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b4448:	a801      	add	r0, sp, #4
   b444a:	f003 fc6d 	bl	b7d28 <_ZN6StringD1Ev>
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   b444e:	492e      	ldr	r1, [pc, #184]	; (b4508 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e0>)
   b4450:	2200      	movs	r2, #0
   b4452:	e7c3      	b.n	b43dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
   b4454:	492d      	ldr	r1, [pc, #180]	; (b450c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   b4456:	4628      	mov	r0, r5
   b4458:	f003 fd70 	bl	b7f3c <_ZNK6String6equalsEPKc>
      }else if(ssid == "clear"){
   b445c:	4602      	mov	r2, r0
   b445e:	2800      	cmp	r0, #0
   b4460:	d038      	beq.n	b44d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ac>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   b4462:	482b      	ldr	r0, [pc, #172]	; (b4510 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e8>)
   b4464:	4623      	mov	r3, r4
   b4466:	6840      	ldr	r0, [r0, #4]
   b4468:	4622      	mov	r2, r4
   b446a:	4621      	mov	r1, r4
   b446c:	f001 fe4c 	bl	b6108 <network_clear_credentials>
        count = 0;
   b4470:	6034      	str	r4, [r6, #0]
      txCharacteristic.setValue("\nCredentials are currently stored for:\n[");
   b4472:	4928      	ldr	r1, [pc, #160]	; (b4514 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ec>)
   b4474:	4820      	ldr	r0, [pc, #128]	; (b44f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d0>)
      networkCount = WiFi.getCredentials(networks, 5);
   b4476:	f8df a0ac 	ldr.w	sl, [pc, #172]	; b4524 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2fc>
   b447a:	4d27      	ldr	r5, [pc, #156]	; (b4518 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f0>)
   b447c:	4c1d      	ldr	r4, [pc, #116]	; (b44f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
        txCharacteristic.setValue(networkBuffer);
   b447e:	f8df 8078 	ldr.w	r8, [pc, #120]	; b44f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d0>
        txCharacteristic.setValue(",\n");
   b4482:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b4528 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x300>
      txCharacteristic.setValue("\nCredentials are currently stored for:\n[");
   b4486:	2200      	movs	r2, #0
   b4488:	f002 fa21 	bl	b68ce <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      networkCount = WiFi.getCredentials(networks, 5);
   b448c:	4918      	ldr	r1, [pc, #96]	; (b44f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b448e:	4820      	ldr	r0, [pc, #128]	; (b4510 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e8>)
   b4490:	2205      	movs	r2, #5
   b4492:	f004 fa9b 	bl	b89cc <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>
      for(int i = 0; i < networkCount - 1; i++){
   b4496:	2700      	movs	r7, #0
      networkCount = WiFi.getCredentials(networks, 5);
   b4498:	f8ca 0000 	str.w	r0, [sl]
      for(int i = 0; i < networkCount - 1; i++){
   b449c:	f8da 1000 	ldr.w	r1, [sl]
   b44a0:	3901      	subs	r1, #1
   b44a2:	42b9      	cmp	r1, r7
   b44a4:	dd85      	ble.n	b43b2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18a>
        networkBuffer = networks[i].ssid;
   b44a6:	4629      	mov	r1, r5
   b44a8:	4620      	mov	r0, r4
   b44aa:	f003 fcab 	bl	b7e04 <_ZN6StringaSEPKc>
        Serial.println(networkBuffer.length());
   b44ae:	f004 fa2d 	bl	b890c <_Z16_fetch_usbserialv>
   b44b2:	68a1      	ldr	r1, [r4, #8]
   b44b4:	220a      	movs	r2, #10
   b44b6:	f7ff fe4c 	bl	b4152 <_ZN5Print7printlnIjLi0EEEjT_i.isra.0>
        txCharacteristic.setValue(networkBuffer);
   b44ba:	2200      	movs	r2, #0
   b44bc:	4621      	mov	r1, r4
   b44be:	4640      	mov	r0, r8
   b44c0:	f002 fa00 	bl	b68c4 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        txCharacteristic.setValue(",\n");
   b44c4:	2200      	movs	r2, #0
   b44c6:	4649      	mov	r1, r9
   b44c8:	4640      	mov	r0, r8
   b44ca:	f002 fa00 	bl	b68ce <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      for(int i = 0; i < networkCount - 1; i++){
   b44ce:	3701      	adds	r7, #1
   b44d0:	3538      	adds	r5, #56	; 0x38
   b44d2:	e7e3      	b.n	b449c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x274>
        txCharacteristic.setValue("\nEnter network password: ");
   b44d4:	4911      	ldr	r1, [pc, #68]	; (b451c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f4>)
   b44d6:	e781      	b.n	b43dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
   b44d8:	2003daa8 	.word	0x2003daa8
   b44dc:	000b9903 	.word	0x000b9903
   b44e0:	2003ded0 	.word	0x2003ded0
   b44e4:	2003e07c 	.word	0x2003e07c
   b44e8:	2003e078 	.word	0x2003e078
   b44ec:	2003daac 	.word	0x2003daac
   b44f0:	2003df20 	.word	0x2003df20
   b44f4:	2003df0c 	.word	0x2003df0c
   b44f8:	2003e5fc 	.word	0x2003e5fc
   b44fc:	000b9839 	.word	0x000b9839
   b4500:	2003e0e8 	.word	0x2003e0e8
   b4504:	000b987e 	.word	0x000b987e
   b4508:	000b9891 	.word	0x000b9891
   b450c:	000b98b7 	.word	0x000b98b7
   b4510:	2003e7c0 	.word	0x2003e7c0
   b4514:	000b980d 	.word	0x000b980d
   b4518:	2003df24 	.word	0x2003df24
   b451c:	000b98bd 	.word	0x000b98bd
   b4520:	2003e03c 	.word	0x2003e03c
   b4524:	2003df1c 	.word	0x2003df1c
   b4528:	000b9836 	.word	0x000b9836
	const char * c_str() const { return buffer; }
   b452c:	4ca1      	ldr	r4, [pc, #644]	; (b47b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58c>)
      Serial.println(password);
   b452e:	f004 f9ed 	bl	b890c <_Z16_fetch_usbserialv>
   b4532:	6821      	ldr	r1, [r4, #0]
   b4534:	f003 faf1 	bl	b7b1a <_ZN5Print7printlnEPKc>
      Serial.println(password.length());
   b4538:	f004 f9e8 	bl	b890c <_Z16_fetch_usbserialv>
   b453c:	68a1      	ldr	r1, [r4, #8]
   b453e:	220a      	movs	r2, #10
   b4540:	f7ff fe07 	bl	b4152 <_ZN5Print7printlnIjLi0EEEjT_i.isra.0>
   b4544:	4b9c      	ldr	r3, [pc, #624]	; (b47b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x590>)
   b4546:	6825      	ldr	r5, [r4, #0]
   b4548:	f8d3 8000 	ldr.w	r8, [r3]
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b454c:	f1b8 0f00 	cmp.w	r8, #0
   b4550:	d03c      	beq.n	b45cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a4>
   b4552:	4640      	mov	r0, r8
   b4554:	f005 f880 	bl	b9658 <strlen>
   b4558:	4607      	mov	r7, r0
   b455a:	2d00      	cmp	r5, #0
   b455c:	d038      	beq.n	b45d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a8>
   b455e:	4628      	mov	r0, r5
   b4560:	f005 f87a 	bl	b9658 <strlen>
   b4564:	4604      	mov	r4, r0
        memset(&creds, 0, sizeof(creds));
   b4566:	2238      	movs	r2, #56	; 0x38
   b4568:	2100      	movs	r1, #0
   b456a:	a806      	add	r0, sp, #24
   b456c:	f005 f82c 	bl	b95c8 <memset>
        creds.size = sizeof(creds);
   b4570:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b4572:	e9cd 3801 	strd	r3, r8, [sp, #4]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4576:	4891      	ldr	r0, [pc, #580]	; (b47bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x594>)
        creds.password_len = passwordLen;
   b4578:	9405      	str	r4, [sp, #20]
        creds.security = WLanSecurityType(security);
   b457a:	2303      	movs	r3, #3
   b457c:	f88d 3018 	strb.w	r3, [sp, #24]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4580:	2300      	movs	r3, #0
   b4582:	aa01      	add	r2, sp, #4
   b4584:	4619      	mov	r1, r3
   b4586:	6840      	ldr	r0, [r0, #4]
        creds.password = password;
   b4588:	e9cd 7503 	strd	r7, r5, [sp, #12]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b458c:	f001 fdb4 	bl	b60f8 <network_set_credentials>
      Serial.println("\n\nCredentials set with ssid: " + ssid + "\npassword: " + password + "\n\n");
   b4590:	f004 f9bc 	bl	b890c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4594:	498a      	ldr	r1, [pc, #552]	; (b47c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x598>)
   b4596:	4604      	mov	r4, r0
   b4598:	a801      	add	r0, sp, #4
   b459a:	f003 fc10 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
   b459e:	4986      	ldr	r1, [pc, #536]	; (b47b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x590>)
   b45a0:	a801      	add	r0, sp, #4
   b45a2:	f003 fca0 	bl	b7ee6 <_ZplRK15StringSumHelperRK6String>
   b45a6:	4987      	ldr	r1, [pc, #540]	; (b47c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x59c>)
   b45a8:	f003 fca9 	bl	b7efe <_ZplRK15StringSumHelperPKc>
   b45ac:	4981      	ldr	r1, [pc, #516]	; (b47b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58c>)
   b45ae:	f003 fc9a 	bl	b7ee6 <_ZplRK15StringSumHelperRK6String>
   b45b2:	4985      	ldr	r1, [pc, #532]	; (b47c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a0>)
   b45b4:	f003 fca3 	bl	b7efe <_ZplRK15StringSumHelperPKc>
   b45b8:	6801      	ldr	r1, [r0, #0]
   b45ba:	4620      	mov	r0, r4
   b45bc:	f003 faad 	bl	b7b1a <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b45c0:	a801      	add	r0, sp, #4
   b45c2:	f003 fbb1 	bl	b7d28 <_ZN6StringD1Ev>
      txCharacteristic.setValue("\nEnter 'test' to test credentials (blank to skip): ");
   b45c6:	4981      	ldr	r1, [pc, #516]	; (b47cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a4>)
   b45c8:	2200      	movs	r2, #0
   b45ca:	e707      	b.n	b43dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b45cc:	4647      	mov	r7, r8
   b45ce:	e7c4      	b.n	b455a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x332>
   b45d0:	462c      	mov	r4, r5
   b45d2:	e7c8      	b.n	b4566 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x33e>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b45d4:	497e      	ldr	r1, [pc, #504]	; (b47d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a8>)
   b45d6:	487f      	ldr	r0, [pc, #508]	; (b47d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ac>)
   b45d8:	f003 fcb0 	bl	b7f3c <_ZNK6String6equalsEPKc>
      if(inputBuffer != ""){
   b45dc:	4604      	mov	r4, r0
   b45de:	b958      	cbnz	r0, b45f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3d0>
        EEPROM.put(0, dsid);
   b45e0:	f004 fbb8 	bl	b8d54 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b45e4:	497c      	ldr	r1, [pc, #496]	; (b47d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b0>)
   b45e6:	2204      	movs	r2, #4
   b45e8:	4620      	mov	r0, r4
   b45ea:	f001 faf7 	bl	b5bdc <HAL_EEPROM_Put>
        Serial.println("dsid entered");
   b45ee:	f004 f98d 	bl	b890c <_Z16_fetch_usbserialv>
   b45f2:	497a      	ldr	r1, [pc, #488]	; (b47dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b4>)
   b45f4:	f003 fa91 	bl	b7b1a <_ZN5Print7printlnEPKc>
      EEPROM.get(0, dsid);
   b45f8:	f004 fbac 	bl	b8d54 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b45fc:	2204      	movs	r2, #4
   b45fe:	4976      	ldr	r1, [pc, #472]	; (b47d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b0>)
   b4600:	4c77      	ldr	r4, [pc, #476]	; (b47e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b8>)
   b4602:	2000      	movs	r0, #0
   b4604:	f001 fae2 	bl	b5bcc <HAL_EEPROM_Get>
      Serial.println("dsid: " + dsid);
   b4608:	f004 f980 	bl	b890c <_Z16_fetch_usbserialv>
   b460c:	682b      	ldr	r3, [r5, #0]
   b460e:	4975      	ldr	r1, [pc, #468]	; (b47e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5bc>)
   b4610:	4419      	add	r1, r3
   b4612:	f003 fa82 	bl	b7b1a <_ZN5Print7printlnEPKc>
      EEPROM.get(100, recordingInterval);
   b4616:	f004 fb9d 	bl	b8d54 <_Z21__fetch_global_EEPROMv>
   b461a:	2204      	movs	r2, #4
   b461c:	4621      	mov	r1, r4
   b461e:	2064      	movs	r0, #100	; 0x64
   b4620:	f001 fad4 	bl	b5bcc <HAL_EEPROM_Get>
      txCharacteristic.setValue("\nCurrent value for data collection interval is [");
   b4624:	4970      	ldr	r1, [pc, #448]	; (b47e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c0>)
   b4626:	4871      	ldr	r0, [pc, #452]	; (b47ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c4>)
   b4628:	2200      	movs	r2, #0
   b462a:	f002 f950 	bl	b68ce <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(recordingInterval != -1){
   b462e:	6821      	ldr	r1, [r4, #0]
   b4630:	1c48      	adds	r0, r1, #1
   b4632:	d00b      	beq.n	b464c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x424>
        txCharacteristic.setValue(String(recordingInterval));
   b4634:	220a      	movs	r2, #10
   b4636:	a801      	add	r0, sp, #4
   b4638:	f003 fbf6 	bl	b7e28 <_ZN6StringC1Eih>
   b463c:	486b      	ldr	r0, [pc, #428]	; (b47ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c4>)
   b463e:	2200      	movs	r2, #0
   b4640:	a901      	add	r1, sp, #4
   b4642:	f002 f93f 	bl	b68c4 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b4646:	a801      	add	r0, sp, #4
   b4648:	f003 fb6e 	bl	b7d28 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between data collection as an integer in milliseconds (blank to skip): ");
   b464c:	4968      	ldr	r1, [pc, #416]	; (b47f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c8>)
   b464e:	2200      	movs	r2, #0
   b4650:	e6c4      	b.n	b43dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4652:	495f      	ldr	r1, [pc, #380]	; (b47d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a8>)
   b4654:	485f      	ldr	r0, [pc, #380]	; (b47d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ac>)
   b4656:	f003 fc71 	bl	b7f3c <_ZNK6String6equalsEPKc>
      if(inputBuffer == ""){
   b465a:	b130      	cbz	r0, b466a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x442>
        EEPROM.get(100, recordingInterval);
   b465c:	f004 fb7a 	bl	b8d54 <_Z21__fetch_global_EEPROMv>
   b4660:	495f      	ldr	r1, [pc, #380]	; (b47e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b8>)
   b4662:	2204      	movs	r2, #4
   b4664:	2064      	movs	r0, #100	; 0x64
   b4666:	f001 fab1 	bl	b5bcc <HAL_EEPROM_Get>
      EEPROM.put(100, recordingInterval);
   b466a:	f004 fb73 	bl	b8d54 <_Z21__fetch_global_EEPROMv>
   b466e:	4c61      	ldr	r4, [pc, #388]	; (b47f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5cc>)
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b4670:	495b      	ldr	r1, [pc, #364]	; (b47e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b8>)
   b4672:	2204      	movs	r2, #4
   b4674:	2064      	movs	r0, #100	; 0x64
   b4676:	f001 fab1 	bl	b5bdc <HAL_EEPROM_Put>
      EEPROM.get(100, recordingInterval);
   b467a:	f004 fb6b 	bl	b8d54 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b467e:	4958      	ldr	r1, [pc, #352]	; (b47e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b8>)
   b4680:	2204      	movs	r2, #4
   b4682:	2064      	movs	r0, #100	; 0x64
   b4684:	f001 faa2 	bl	b5bcc <HAL_EEPROM_Get>
      EEPROM.get(200, reportingInterval);
   b4688:	f004 fb64 	bl	b8d54 <_Z21__fetch_global_EEPROMv>
   b468c:	2204      	movs	r2, #4
   b468e:	4621      	mov	r1, r4
   b4690:	20c8      	movs	r0, #200	; 0xc8
   b4692:	f001 fa9b 	bl	b5bcc <HAL_EEPROM_Get>
      txCharacteristic.setValue("\nCurrent value for WiFi connection interval is [");
   b4696:	2200      	movs	r2, #0
   b4698:	4957      	ldr	r1, [pc, #348]	; (b47f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d0>)
   b469a:	4854      	ldr	r0, [pc, #336]	; (b47ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c4>)
   b469c:	f002 f917 	bl	b68ce <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(reportingInterval != -1){
   b46a0:	6823      	ldr	r3, [r4, #0]
   b46a2:	1c5a      	adds	r2, r3, #1
   b46a4:	d00f      	beq.n	b46c6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x49e>
        txCharacteristic.setValue(String(reportingInterval / 1000));
   b46a6:	220a      	movs	r2, #10
   b46a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b46ac:	a801      	add	r0, sp, #4
   b46ae:	fb93 f1f1 	sdiv	r1, r3, r1
   b46b2:	f003 fbb9 	bl	b7e28 <_ZN6StringC1Eih>
   b46b6:	484d      	ldr	r0, [pc, #308]	; (b47ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c4>)
   b46b8:	2200      	movs	r2, #0
   b46ba:	a901      	add	r1, sp, #4
   b46bc:	f002 f902 	bl	b68c4 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b46c0:	a801      	add	r0, sp, #4
   b46c2:	f003 fb31 	bl	b7d28 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between WiFi connections as an integer in seconds (blank to skip): ");
   b46c6:	494d      	ldr	r1, [pc, #308]	; (b47fc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d4>)
   b46c8:	2200      	movs	r2, #0
   b46ca:	e687      	b.n	b43dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
   b46cc:	4940      	ldr	r1, [pc, #256]	; (b47d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a8>)
   b46ce:	4841      	ldr	r0, [pc, #260]	; (b47d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ac>)
   b46d0:	f003 fc34 	bl	b7f3c <_ZNK6String6equalsEPKc>
      if(inputBuffer == ""){
   b46d4:	b130      	cbz	r0, b46e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4bc>
        EEPROM.get(200, reportingInterval);
   b46d6:	f004 fb3d 	bl	b8d54 <_Z21__fetch_global_EEPROMv>
   b46da:	4946      	ldr	r1, [pc, #280]	; (b47f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5cc>)
   b46dc:	2204      	movs	r2, #4
   b46de:	20c8      	movs	r0, #200	; 0xc8
   b46e0:	f001 fa74 	bl	b5bcc <HAL_EEPROM_Get>
      EEPROM.put(200, reportingInterval);
   b46e4:	f004 fb36 	bl	b8d54 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b46e8:	4942      	ldr	r1, [pc, #264]	; (b47f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5cc>)
   b46ea:	2204      	movs	r2, #4
   b46ec:	20c8      	movs	r0, #200	; 0xc8
   b46ee:	f001 fa75 	bl	b5bdc <HAL_EEPROM_Put>
      EEPROM.get(200, reportingInterval);
   b46f2:	f004 fb2f 	bl	b8d54 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b46f6:	493f      	ldr	r1, [pc, #252]	; (b47f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5cc>)
   b46f8:	2204      	movs	r2, #4
   b46fa:	20c8      	movs	r0, #200	; 0xc8
   b46fc:	f001 fa66 	bl	b5bcc <HAL_EEPROM_Get>
      Serial.println(reportingInterval);
   b4700:	f004 f904 	bl	b890c <_Z16_fetch_usbserialv>
   b4704:	6829      	ldr	r1, [r5, #0]
   b4706:	220a      	movs	r2, #10
   b4708:	f7ff fd33 	bl	b4172 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
      txCharacteristic.setValue("\nEnter 'ota' to wait for OTA update (blank to skip): ");
   b470c:	493c      	ldr	r1, [pc, #240]	; (b4800 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d8>)
   b470e:	2200      	movs	r2, #0
   b4710:	e664      	b.n	b43dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
   b4712:	493c      	ldr	r1, [pc, #240]	; (b4804 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5dc>)
   b4714:	482f      	ldr	r0, [pc, #188]	; (b47d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ac>)
   b4716:	4c3c      	ldr	r4, [pc, #240]	; (b4808 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e0>)
   b4718:	f003 fc10 	bl	b7f3c <_ZNK6String6equalsEPKc>
      if(inputBuffer == "ota"){
   b471c:	b300      	cbz	r0, b4760 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x538>

private:
    SystemSleepResult systemSleepResult_;

    static inline uint8_t get_flag(system_flag_t flag) {
        uint8_t value = 0;
   b471e:	2200      	movs	r2, #0
        system_get_flag(flag, &value, nullptr);
   b4720:	a901      	add	r1, sp, #4
   b4722:	2001      	movs	r0, #1
        uint8_t value = 0;
   b4724:	f88d 2004 	strb.w	r2, [sp, #4]
        system_get_flag(flag, &value, nullptr);
   b4728:	f001 fc48 	bl	b5fbc <system_get_flag>
        ota = true;
   b472c:	2301      	movs	r3, #1
   b472e:	7023      	strb	r3, [r4, #0]
        uint8_t value = 0;
   b4730:	2400      	movs	r4, #0
        system_get_flag(flag, &value, nullptr);
   b4732:	4622      	mov	r2, r4
   b4734:	a901      	add	r1, sp, #4
   b4736:	2001      	movs	r0, #1
        uint8_t value = 0;
   b4738:	f88d 4004 	strb.w	r4, [sp, #4]
        system_get_flag(flag, &value, nullptr);
   b473c:	f001 fc3e 	bl	b5fbc <system_get_flag>
        WiFi.on();
   b4740:	481e      	ldr	r0, [pc, #120]	; (b47bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x594>)
   b4742:	f7ff fd5b 	bl	b41fc <_ZN5spark9WiFiClass2onEv>
        WiFi.connect();
   b4746:	4621      	mov	r1, r4
   b4748:	481c      	ldr	r0, [pc, #112]	; (b47bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x594>)
        while(!WiFi.ready()) {
   b474a:	4c1c      	ldr	r4, [pc, #112]	; (b47bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x594>)
        WiFi.connect();
   b474c:	f7ff fd62 	bl	b4214 <_ZN5spark9WiFiClass7connectEj>
        while(!WiFi.ready()) {
   b4750:	4620      	mov	r0, r4
   b4752:	f7ff fd64 	bl	b421e <_ZN5spark9WiFiClass5readyEv>
   b4756:	b948      	cbnz	r0, b476c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x544>
          delay(100);
   b4758:	2064      	movs	r0, #100	; 0x64
   b475a:	f001 fd4d 	bl	b61f8 <delay>
        while(!WiFi.ready()) {
   b475e:	e7f7      	b.n	b4750 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x528>
      if(ota) {
   b4760:	7823      	ldrb	r3, [r4, #0]
   b4762:	2b00      	cmp	r3, #0
   b4764:	d1e4      	bne.n	b4730 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x508>
      System.reset();
   b4766:	f003 fc62 	bl	b802e <_ZN11SystemClass5resetEv>
   b476a:	e63a      	b.n	b43e2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ba>
        if(WiFi.ready() != true) {
   b476c:	4813      	ldr	r0, [pc, #76]	; (b47bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x594>)
   b476e:	f7ff fd56 	bl	b421e <_ZN5spark9WiFiClass5readyEv>
   b4772:	b928      	cbnz	r0, b4780 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x558>
          Serial.println("WiFi failed to connect, skipping time synchronization");
   b4774:	f004 f8ca 	bl	b890c <_Z16_fetch_usbserialv>
   b4778:	4924      	ldr	r1, [pc, #144]	; (b480c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e4>)
   b477a:	f003 f9ce 	bl	b7b1a <_ZN5Print7printlnEPKc>
   b477e:	e7f2      	b.n	b4766 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x53e>
          Serial.println("WiFi connected, awaiting update");
   b4780:	f004 f8c4 	bl	b890c <_Z16_fetch_usbserialv>
   b4784:	4922      	ldr	r1, [pc, #136]	; (b4810 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e8>)
   b4786:	f003 f9c8 	bl	b7b1a <_ZN5Print7printlnEPKc>
          txCharacteristic.setValue("\nAwaiting OTA update");
   b478a:	4922      	ldr	r1, [pc, #136]	; (b4814 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b478c:	4817      	ldr	r0, [pc, #92]	; (b47ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c4>)
   b478e:	2200      	movs	r2, #0
   b4790:	f002 f89d 	bl	b68ce <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4794:	f001 fc48 	bl	b6028 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4798:	f001 fc4e 	bl	b6038 <spark_cloud_flag_connected>
          while(!Particle.connected()) {
   b479c:	b130      	cbz	r0, b47ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x584>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b479e:	4c1e      	ldr	r4, [pc, #120]	; (b4818 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f0>)
		return HAL_Timer_Get_Milli_Seconds();
   b47a0:	f001 fa04 	bl	b5bac <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b47a4:	6020      	str	r0, [r4, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b47a6:	f001 fc37 	bl	b6018 <spark_process>
   b47aa:	e7f9      	b.n	b47a0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x578>
            delay(100);
   b47ac:	2064      	movs	r0, #100	; 0x64
   b47ae:	f001 fd23 	bl	b61f8 <delay>
          while(!Particle.connected()) {
   b47b2:	e7f1      	b.n	b4798 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x570>
   b47b4:	2003e03c 	.word	0x2003e03c
   b47b8:	2003e0e8 	.word	0x2003e0e8
   b47bc:	2003e7c0 	.word	0x2003e7c0
   b47c0:	000b98d7 	.word	0x000b98d7
   b47c4:	000b98f5 	.word	0x000b98f5
   b47c8:	000b9901 	.word	0x000b9901
   b47cc:	000b9904 	.word	0x000b9904
   b47d0:	000b9903 	.word	0x000b9903
   b47d4:	2003ded0 	.word	0x2003ded0
   b47d8:	2003daac 	.word	0x2003daac
   b47dc:	000b9938 	.word	0x000b9938
   b47e0:	2003e078 	.word	0x2003e078
   b47e4:	000b9945 	.word	0x000b9945
   b47e8:	000b994c 	.word	0x000b994c
   b47ec:	2003e5fc 	.word	0x2003e5fc
   b47f0:	000b997d 	.word	0x000b997d
   b47f4:	2003e07c 	.word	0x2003e07c
   b47f8:	000b99d2 	.word	0x000b99d2
   b47fc:	000b9a03 	.word	0x000b9a03
   b4800:	000b9a54 	.word	0x000b9a54
   b4804:	000b9a8a 	.word	0x000b9a8a
   b4808:	2003e038 	.word	0x2003e038
   b480c:	000b9a8e 	.word	0x000b9a8e
   b4810:	000b9ac4 	.word	0x000b9ac4
   b4814:	000b9ae4 	.word	0x000b9ae4
   b4818:	2003e7d0 	.word	0x2003e7d0

000b481c <setup>:
void setup() {
   b481c:	b530      	push	{r4, r5, lr}
  request.hostname = "digiglue.io";
   b481e:	4c5b      	ldr	r4, [pc, #364]	; (b498c <setup+0x170>)
void setup() {
   b4820:	b085      	sub	sp, #20
        return value;
    }

    static inline void set_flag(system_flag_t flag, uint8_t value) {
        system_set_flag(flag, value, nullptr);
   b4822:	2200      	movs	r2, #0
   b4824:	2101      	movs	r1, #1
   b4826:	2003      	movs	r0, #3
   b4828:	f001 fbc0 	bl	b5fac <system_set_flag>
  request.hostname = "digiglue.io";
   b482c:	4958      	ldr	r1, [pc, #352]	; (b4990 <setup+0x174>)
   b482e:	4620      	mov	r0, r4
   b4830:	f003 fae8 	bl	b7e04 <_ZN6StringaSEPKc>
  request.port = 80;
   b4834:	2350      	movs	r3, #80	; 0x50
  request.path = "/";
   b4836:	4957      	ldr	r1, [pc, #348]	; (b4994 <setup+0x178>)
  request.port = 80;
   b4838:	63a3      	str	r3, [r4, #56]	; 0x38
  request.path = "/";
   b483a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b483e:	f003 fae1 	bl	b7e04 <_ZN6StringaSEPKc>
  Serial.begin(9600);
   b4842:	f004 f863 	bl	b890c <_Z16_fetch_usbserialv>
   b4846:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b484a:	f004 f853 	bl	b88f4 <_ZN9USBSerial5beginEl>
  if(!lis3dh.begin(0x18)) {
   b484e:	4852      	ldr	r0, [pc, #328]	; (b4998 <setup+0x17c>)
   b4850:	2118      	movs	r1, #24
   b4852:	f000 fe48 	bl	b54e6 <_ZN15Adafruit_LIS3DH5beginEh>
   b4856:	b940      	cbnz	r0, b486a <setup+0x4e>
    delay(1000);
   b4858:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b485c:	f001 fccc 	bl	b61f8 <delay>
    Serial.println("Failed to initialize LIS3DH");
   b4860:	f004 f854 	bl	b890c <_Z16_fetch_usbserialv>
   b4864:	494d      	ldr	r1, [pc, #308]	; (b499c <setup+0x180>)
   b4866:	f003 f958 	bl	b7b1a <_ZN5Print7printlnEPKc>
   b486a:	4d4d      	ldr	r5, [pc, #308]	; (b49a0 <setup+0x184>)
   b486c:	4c4d      	ldr	r4, [pc, #308]	; (b49a4 <setup+0x188>)
  EEPROM.get(100, recordingInterval);
   b486e:	f004 fa71 	bl	b8d54 <_Z21__fetch_global_EEPROMv>
   b4872:	4629      	mov	r1, r5
   b4874:	2204      	movs	r2, #4
   b4876:	2064      	movs	r0, #100	; 0x64
   b4878:	f001 f9a8 	bl	b5bcc <HAL_EEPROM_Get>
  EEPROM.get(0, dsid);
   b487c:	f004 fa6a 	bl	b8d54 <_Z21__fetch_global_EEPROMv>
   b4880:	4949      	ldr	r1, [pc, #292]	; (b49a8 <setup+0x18c>)
   b4882:	2204      	movs	r2, #4
   b4884:	2000      	movs	r0, #0
   b4886:	f001 f9a1 	bl	b5bcc <HAL_EEPROM_Get>
  Serial.println(recordingInterval);
   b488a:	f004 f83f 	bl	b890c <_Z16_fetch_usbserialv>
   b488e:	6829      	ldr	r1, [r5, #0]
   b4890:	220a      	movs	r2, #10
   b4892:	f7ff fc6e 	bl	b4172 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
  EEPROM.get(200, reportingInterval);
   b4896:	f004 fa5d 	bl	b8d54 <_Z21__fetch_global_EEPROMv>
   b489a:	4621      	mov	r1, r4
   b489c:	2204      	movs	r2, #4
   b489e:	20c8      	movs	r0, #200	; 0xc8
   b48a0:	f001 f994 	bl	b5bcc <HAL_EEPROM_Get>
  reportingInterval = reportingInterval / 1000; // convert to seconds from milliseconds 
   b48a4:	6823      	ldr	r3, [r4, #0]
   b48a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b48aa:	fb93 f3f2 	sdiv	r3, r3, r2
   b48ae:	6023      	str	r3, [r4, #0]
  Serial.printlnf("recordingInterval: %i", recordingInterval);
   b48b0:	f004 f82c 	bl	b890c <_Z16_fetch_usbserialv>
   b48b4:	682a      	ldr	r2, [r5, #0]
   b48b6:	493d      	ldr	r1, [pc, #244]	; (b49ac <setup+0x190>)
   b48b8:	f7ff fc92 	bl	b41e0 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("reportingInterval: %i", reportingInterval);
   b48bc:	f004 f826 	bl	b890c <_Z16_fetch_usbserialv>
   b48c0:	6822      	ldr	r2, [r4, #0]
   b48c2:	493b      	ldr	r1, [pc, #236]	; (b49b0 <setup+0x194>)
   b48c4:	f7ff fc8c 	bl	b41e0 <_ZN5Print8printlnfEPKcz>
  if(recordingInterval == -1) {
   b48c8:	682b      	ldr	r3, [r5, #0]
  WiFi.on();
   b48ca:	483a      	ldr	r0, [pc, #232]	; (b49b4 <setup+0x198>)
  if(recordingInterval == -1) {
   b48cc:	3301      	adds	r3, #1
    recordingInterval = 500; //default value
   b48ce:	bf04      	itt	eq
   b48d0:	f44f 73fa 	moveq.w	r3, #500	; 0x1f4
   b48d4:	602b      	streq	r3, [r5, #0]
  if(reportingInterval == -1) {
   b48d6:	6823      	ldr	r3, [r4, #0]
  while(!WiFi.ready() && WiFiConnectCountdown != 0) {
   b48d8:	4d36      	ldr	r5, [pc, #216]	; (b49b4 <setup+0x198>)
  if(reportingInterval == -1) {
   b48da:	3301      	adds	r3, #1
    reportingInterval = 10; //default value
   b48dc:	bf04      	itt	eq
   b48de:	230a      	moveq	r3, #10
   b48e0:	6023      	streq	r3, [r4, #0]
  WiFi.on();
   b48e2:	f7ff fc8b 	bl	b41fc <_ZN5spark9WiFiClass2onEv>
  WiFi.connect();
   b48e6:	4833      	ldr	r0, [pc, #204]	; (b49b4 <setup+0x198>)
   b48e8:	2100      	movs	r1, #0
   b48ea:	f7ff fc93 	bl	b4214 <_ZN5spark9WiFiClass7connectEj>
   b48ee:	24c9      	movs	r4, #201	; 0xc9
  while(!WiFi.ready() && WiFiConnectCountdown != 0) {
   b48f0:	4628      	mov	r0, r5
   b48f2:	f7ff fc94 	bl	b421e <_ZN5spark9WiFiClass5readyEv>
   b48f6:	b928      	cbnz	r0, b4904 <setup+0xe8>
   b48f8:	3c01      	subs	r4, #1
   b48fa:	d003      	beq.n	b4904 <setup+0xe8>
    delay(100);
   b48fc:	2064      	movs	r0, #100	; 0x64
   b48fe:	f001 fc7b 	bl	b61f8 <delay>
  while(!WiFi.ready() && WiFiConnectCountdown != 0) {
   b4902:	e7f5      	b.n	b48f0 <setup+0xd4>
  if(WiFi.ready() != true) {
   b4904:	482b      	ldr	r0, [pc, #172]	; (b49b4 <setup+0x198>)
   b4906:	f7ff fc8a 	bl	b421e <_ZN5spark9WiFiClass5readyEv>
   b490a:	b948      	cbnz	r0, b4920 <setup+0x104>
    Serial.println("WiFi failed to connect, skipping time synchronization");
   b490c:	f003 fffe 	bl	b890c <_Z16_fetch_usbserialv>
   b4910:	4929      	ldr	r1, [pc, #164]	; (b49b8 <setup+0x19c>)
   b4912:	f003 f902 	bl	b7b1a <_ZN5Print7printlnEPKc>
  WiFi.off();
   b4916:	4827      	ldr	r0, [pc, #156]	; (b49b4 <setup+0x198>)
   b4918:	f7ff fc76 	bl	b4208 <_ZN5spark9WiFiClass3offEv>
}
   b491c:	b005      	add	sp, #20
   b491e:	bd30      	pop	{r4, r5, pc}
    Serial.println("WiFi connected, syncing time");
   b4920:	f003 fff4 	bl	b890c <_Z16_fetch_usbserialv>
   b4924:	4925      	ldr	r1, [pc, #148]	; (b49bc <setup+0x1a0>)
   b4926:	f003 f8f8 	bl	b7b1a <_ZN5Print7printlnEPKc>
        spark_cloud_flag_connect();
   b492a:	f001 fb7d 	bl	b6028 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b492e:	f001 fb83 	bl	b6038 <spark_cloud_flag_connected>
    while(!Particle.connected()) {
   b4932:	b918      	cbnz	r0, b493c <setup+0x120>
      delay(100);
   b4934:	2064      	movs	r0, #100	; 0x64
   b4936:	f001 fc5f 	bl	b61f8 <delay>
    while(!Particle.connected()) {
   b493a:	e7f8      	b.n	b492e <setup+0x112>
   b493c:	f001 fb7c 	bl	b6038 <spark_cloud_flag_connected>
        if (!connected()) {
   b4940:	b110      	cbz	r0, b4948 <setup+0x12c>
        return spark_sync_time(NULL);
   b4942:	2000      	movs	r0, #0
   b4944:	f001 fb80 	bl	b6048 <spark_sync_time>
   b4948:	4c1d      	ldr	r4, [pc, #116]	; (b49c0 <setup+0x1a4>)
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b494a:	f001 fb75 	bl	b6038 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
   b494e:	b148      	cbz	r0, b4964 <setup+0x148>
   b4950:	2000      	movs	r0, #0
   b4952:	f001 fb81 	bl	b6058 <spark_sync_time_pending>
   b4956:	b128      	cbz	r0, b4964 <setup+0x148>
		return HAL_Timer_Get_Milli_Seconds();
   b4958:	f001 f928 	bl	b5bac <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b495c:	6020      	str	r0, [r4, #0]
    		spark_process();
   b495e:	f001 fb5b 	bl	b6018 <spark_process>
    }
   b4962:	e7f2      	b.n	b494a <setup+0x12e>
    Serial.printlnf("Current time is: %s", Time.timeStr().c_str());
   b4964:	f003 ffd2 	bl	b890c <_Z16_fetch_usbserialv>
   b4968:	4604      	mov	r4, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b496a:	f003 fed8 	bl	b871e <_ZN9TimeClass3nowEv>
   b496e:	17c3      	asrs	r3, r0, #31
   b4970:	4602      	mov	r2, r0
   b4972:	4668      	mov	r0, sp
   b4974:	f003 fe7a 	bl	b866c <_ZN9TimeClass7timeStrEx>
   b4978:	9a00      	ldr	r2, [sp, #0]
   b497a:	4912      	ldr	r1, [pc, #72]	; (b49c4 <setup+0x1a8>)
   b497c:	4620      	mov	r0, r4
   b497e:	f7ff fc2f 	bl	b41e0 <_ZN5Print8printlnfEPKcz>
   b4982:	4668      	mov	r0, sp
   b4984:	f003 f9d0 	bl	b7d28 <_ZN6StringD1Ev>
   b4988:	e7c5      	b.n	b4916 <setup+0xfa>
   b498a:	bf00      	nop
   b498c:	2003e080 	.word	0x2003e080
   b4990:	000b9af9 	.word	0x000b9af9
   b4994:	000b9b05 	.word	0x000b9b05
   b4998:	2003dee0 	.word	0x2003dee0
   b499c:	000b9b07 	.word	0x000b9b07
   b49a0:	2003e078 	.word	0x2003e078
   b49a4:	2003e07c 	.word	0x2003e07c
   b49a8:	2003daac 	.word	0x2003daac
   b49ac:	000b9b23 	.word	0x000b9b23
   b49b0:	000b9b39 	.word	0x000b9b39
   b49b4:	2003e7c0 	.word	0x2003e7c0
   b49b8:	000b9a8e 	.word	0x000b9a8e
   b49bc:	000b9b4f 	.word	0x000b9b4f
   b49c0:	2003e7d0 	.word	0x2003e7d0
   b49c4:	000b9b6c 	.word	0x000b9b6c

000b49c8 <loop>:
void loop() {
   b49c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b49cc:	ed2d 8b02 	vpush	{d8}
  switch (firmwareState) {
   b49d0:	4eaf      	ldr	r6, [pc, #700]	; (b4c90 <loop+0x2c8>)
   b49d2:	7835      	ldrb	r5, [r6, #0]
void loop() {
   b49d4:	b099      	sub	sp, #100	; 0x64
  switch (firmwareState) {
   b49d6:	b13d      	cbz	r5, b49e8 <loop+0x20>
   b49d8:	2d01      	cmp	r5, #1
   b49da:	f000 8096 	beq.w	b4b0a <loop+0x142>
}
   b49de:	b019      	add	sp, #100	; 0x64
   b49e0:	ecbd 8b02 	vpop	{d8}
   b49e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Serial.println("BLEWAIT");
   b49e8:	f003 ff90 	bl	b890c <_Z16_fetch_usbserialv>
   b49ec:	49a9      	ldr	r1, [pc, #676]	; (b4c94 <loop+0x2cc>)
   b49ee:	f003 f894 	bl	b7b1a <_ZN5Print7printlnEPKc>
      BLE.on();
   b49f2:	f002 f839 	bl	b6a68 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b49f6:	f002 f885 	bl	b6b04 <_ZNK8particle14BleLocalDevice2onEv>
      BLE.addCharacteristic(txCharacteristic);
   b49fa:	f002 f835 	bl	b6a68 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b49fe:	4aa6      	ldr	r2, [pc, #664]	; (b4c98 <loop+0x2d0>)
   b4a00:	4601      	mov	r1, r0
   b4a02:	a80f      	add	r0, sp, #60	; 0x3c
   b4a04:	f002 fd28 	bl	b7458 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4a08:	a80f      	add	r0, sp, #60	; 0x3c
   b4a0a:	f002 f916 	bl	b6c3a <_ZN8particle17BleCharacteristicD1Ev>
      BLE.addCharacteristic(rxCharacteristic);
   b4a0e:	f002 f82b 	bl	b6a68 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4a12:	4aa2      	ldr	r2, [pc, #648]	; (b4c9c <loop+0x2d4>)
   b4a14:	4601      	mov	r1, r0
   b4a16:	a80f      	add	r0, sp, #60	; 0x3c
   b4a18:	f002 fd1e 	bl	b7458 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4a1c:	a80f      	add	r0, sp, #60	; 0x3c
   b4a1e:	f002 f90c 	bl	b6c3a <_ZN8particle17BleCharacteristicD1Ev>
      BleAdvertisingData data;
   b4a22:	a80f      	add	r0, sp, #60	; 0x3c
   b4a24:	f001 fe89 	bl	b673a <_ZN8particle18BleAdvertisingDataC1Ev>
      data.appendServiceUUID(serviceUuid);
   b4a28:	499d      	ldr	r1, [pc, #628]	; (b4ca0 <loop+0x2d8>)
   b4a2a:	a805      	add	r0, sp, #20
   b4a2c:	f001 fd8a 	bl	b6544 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4a30:	a905      	add	r1, sp, #20
   b4a32:	a80a      	add	r0, sp, #40	; 0x28
   b4a34:	f001 fd86 	bl	b6544 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4a38:	a80a      	add	r0, sp, #40	; 0x28
   b4a3a:	f001 fdc9 	bl	b65d0 <_ZNK8particle7BleUuid4typeEv>
   b4a3e:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4a40:	a80a      	add	r0, sp, #40	; 0x28
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4a42:	bb84      	cbnz	r4, b4aa6 <loop+0xde>
            uint16_t uuid16 = tempUUID.shorted();
   b4a44:	f001 fde0 	bl	b6608 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4a48:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4a4a:	f8ad 0012 	strh.w	r0, [sp, #18]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4a4e:	2302      	movs	r3, #2
   b4a50:	f10d 0212 	add.w	r2, sp, #18
   b4a54:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4a56:	a80f      	add	r0, sp, #60	; 0x3c
   b4a58:	f001 fe64 	bl	b6724 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
      BLE.advertise(&data);
   b4a5c:	f002 f804 	bl	b6a68 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4a60:	2200      	movs	r2, #0
   b4a62:	a90f      	add	r1, sp, #60	; 0x3c
   b4a64:	f002 f86e 	bl	b6b44 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
      BLE.onConnected(connectCallback);
   b4a68:	f001 fffe 	bl	b6a68 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4a6c:	498d      	ldr	r1, [pc, #564]	; (b4ca4 <loop+0x2dc>)
   b4a6e:	2200      	movs	r2, #0
   b4a70:	f002 fbf5 	bl	b725e <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
      BLE.onDisconnected(disconnectCallback);
   b4a74:	f001 fff8 	bl	b6a68 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4a78:	498b      	ldr	r1, [pc, #556]	; (b4ca8 <loop+0x2e0>)
   b4a7a:	2200      	movs	r2, #0
   b4a7c:	f002 fbd0 	bl	b7220 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
      int BLECountdown = 5000;
   b4a80:	f241 3488 	movw	r4, #5000	; 0x1388
      while(!BLE.connected() && BLECountdown > 0) {
   b4a84:	f001 fff0 	bl	b6a68 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4a88:	f002 f86f 	bl	b6b6a <_ZNK8particle14BleLocalDevice9connectedEv>
   b4a8c:	b990      	cbnz	r0, b4ab4 <loop+0xec>
   b4a8e:	b18c      	cbz	r4, b4ab4 <loop+0xec>
        BLECountdown = BLECountdown - 10;
   b4a90:	3c0a      	subs	r4, #10
        Serial.println(BLECountdown);
   b4a92:	f003 ff3b 	bl	b890c <_Z16_fetch_usbserialv>
   b4a96:	220a      	movs	r2, #10
   b4a98:	4621      	mov	r1, r4
   b4a9a:	f7ff fb6a 	bl	b4172 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
        delay(10);
   b4a9e:	200a      	movs	r0, #10
   b4aa0:	f001 fbaa 	bl	b61f8 <delay>
      while(!BLE.connected() && BLECountdown > 0) {
   b4aa4:	e7ee      	b.n	b4a84 <loop+0xbc>
   b4aa6:	f001 fdb1 	bl	b660c <_ZNK8particle7BleUuid8rawBytesEv>
   b4aaa:	9500      	str	r5, [sp, #0]
   b4aac:	4602      	mov	r2, r0
   b4aae:	2310      	movs	r3, #16
   b4ab0:	2107      	movs	r1, #7
   b4ab2:	e7d0      	b.n	b4a56 <loop+0x8e>
      if(BLE.connected()){ 
   b4ab4:	f001 ffd8 	bl	b6a68 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ab8:	f002 f857 	bl	b6b6a <_ZNK8particle14BleLocalDevice9connectedEv>
   b4abc:	4c7b      	ldr	r4, [pc, #492]	; (b4cac <loop+0x2e4>)
   b4abe:	b190      	cbz	r0, b4ae6 <loop+0x11e>
        Serial.println("BLE connected");
   b4ac0:	f003 ff24 	bl	b890c <_Z16_fetch_usbserialv>
   b4ac4:	497a      	ldr	r1, [pc, #488]	; (b4cb0 <loop+0x2e8>)
   b4ac6:	f003 f828 	bl	b7b1a <_ZN5Print7printlnEPKc>
        bleWaitForConfig = true;
   b4aca:	2301      	movs	r3, #1
   b4acc:	7023      	strb	r3, [r4, #0]
        Serial.println("bleWaitForConfig");
   b4ace:	4d79      	ldr	r5, [pc, #484]	; (b4cb4 <loop+0x2ec>)
      while(bleWaitForConfig) {
   b4ad0:	7823      	ldrb	r3, [r4, #0]
   b4ad2:	b17b      	cbz	r3, b4af4 <loop+0x12c>
        Serial.println("bleWaitForConfig");
   b4ad4:	f003 ff1a 	bl	b890c <_Z16_fetch_usbserialv>
   b4ad8:	4629      	mov	r1, r5
   b4ada:	f003 f81e 	bl	b7b1a <_ZN5Print7printlnEPKc>
        delay(100);
   b4ade:	2064      	movs	r0, #100	; 0x64
   b4ae0:	f001 fb8a 	bl	b61f8 <delay>
      while(bleWaitForConfig) {
   b4ae4:	e7f4      	b.n	b4ad0 <loop+0x108>
        bleWaitForConfig = false;
   b4ae6:	7020      	strb	r0, [r4, #0]
        Serial.println("BLE not connected, continuing with stored settings.");
   b4ae8:	f003 ff10 	bl	b890c <_Z16_fetch_usbserialv>
   b4aec:	4972      	ldr	r1, [pc, #456]	; (b4cb8 <loop+0x2f0>)
   b4aee:	f003 f814 	bl	b7b1a <_ZN5Print7printlnEPKc>
   b4af2:	e7ec      	b.n	b4ace <loop+0x106>
      BLE.disconnectAll();
   b4af4:	f001 ffb8 	bl	b6a68 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4af8:	f002 fac0 	bl	b707c <_ZNK8particle14BleLocalDevice13disconnectAllEv>
      BLE.off();
   b4afc:	f001 ffb4 	bl	b6a68 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4b00:	f002 f925 	bl	b6d4e <_ZNK8particle14BleLocalDevice3offEv>
      firmwareState = RECORDING;
   b4b04:	2301      	movs	r3, #1
   b4b06:	7033      	strb	r3, [r6, #0]
      break;
   b4b08:	e769      	b.n	b49de <loop+0x16>
      lis3dh.read();
   b4b0a:	4c6c      	ldr	r4, [pc, #432]	; (b4cbc <loop+0x2f4>)
      if(abs(x - prevX) > 0.05 || abs(y - prevY) > 0.05 || abs(z - prevZ) > 0.05) {
   b4b0c:	f8df a1e0 	ldr.w	sl, [pc, #480]	; b4cf0 <loop+0x328>
      x = lis3dh.x_g;
   b4b10:	f8df b1e0 	ldr.w	fp, [pc, #480]	; b4cf4 <loop+0x32c>
      y = lis3dh.y_g;
   b4b14:	f8df 91e0 	ldr.w	r9, [pc, #480]	; b4cf8 <loop+0x330>
      z = lis3dh.z_g;
   b4b18:	4f69      	ldr	r7, [pc, #420]	; (b4cc0 <loop+0x2f8>)
   b4b1a:	f8df 81e0 	ldr.w	r8, [pc, #480]	; b4cfc <loop+0x334>
   b4b1e:	4e69      	ldr	r6, [pc, #420]	; (b4cc4 <loop+0x2fc>)
   b4b20:	4d69      	ldr	r5, [pc, #420]	; (b4cc8 <loop+0x300>)
      lis3dh.read();
   b4b22:	4620      	mov	r0, r4
   b4b24:	f000 fbfe 	bl	b5324 <_ZN15Adafruit_LIS3DH4readEv>
      x = lis3dh.x_g;
   b4b28:	edd4 7a03 	vldr	s15, [r4, #12]
      if(abs(x - prevX) > 0.05 || abs(y - prevY) > 0.05 || abs(z - prevZ) > 0.05) {
   b4b2c:	ed9a 7a00 	vldr	s14, [sl]
      x = lis3dh.x_g;
   b4b30:	edcb 7a00 	vstr	s15, [fp]
      if(abs(x - prevX) > 0.05 || abs(y - prevY) > 0.05 || abs(z - prevZ) > 0.05) {
   b4b34:	ee77 7ac7 	vsub.f32	s15, s15, s14
      y = lis3dh.y_g;
   b4b38:	edd4 8a04 	vldr	s17, [r4, #16]
      z = lis3dh.z_g;
   b4b3c:	ed94 8a05 	vldr	s16, [r4, #20]
      y = lis3dh.y_g;
   b4b40:	edc9 8a00 	vstr	s17, [r9]
      if(abs(x - prevX) > 0.05 || abs(y - prevY) > 0.05 || abs(z - prevZ) > 0.05) {
   b4b44:	eef0 7ae7 	vabs.f32	s15, s15
   b4b48:	ee17 0a90 	vmov	r0, s15
      z = lis3dh.z_g;
   b4b4c:	ed87 8a00 	vstr	s16, [r7]
      if(abs(x - prevX) > 0.05 || abs(y - prevY) > 0.05 || abs(z - prevZ) > 0.05) {
   b4b50:	f004 fbd6 	bl	b9300 <__aeabi_f2d>
   b4b54:	a34c      	add	r3, pc, #304	; (adr r3, b4c88 <loop+0x2c0>)
   b4b56:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4b5a:	f004 fca7 	bl	b94ac <__aeabi_dcmpgt>
   b4b5e:	4c5b      	ldr	r4, [pc, #364]	; (b4ccc <loop+0x304>)
   b4b60:	2800      	cmp	r0, #0
   b4b62:	f040 8087 	bne.w	b4c74 <loop+0x2ac>
   b4b66:	edd8 7a00 	vldr	s15, [r8]
   b4b6a:	ee78 8ae7 	vsub.f32	s17, s17, s15
   b4b6e:	eef0 7ae8 	vabs.f32	s15, s17
   b4b72:	ee17 0a90 	vmov	r0, s15
   b4b76:	f004 fbc3 	bl	b9300 <__aeabi_f2d>
   b4b7a:	a343      	add	r3, pc, #268	; (adr r3, b4c88 <loop+0x2c0>)
   b4b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4b80:	f004 fc94 	bl	b94ac <__aeabi_dcmpgt>
   b4b84:	2800      	cmp	r0, #0
   b4b86:	d175      	bne.n	b4c74 <loop+0x2ac>
   b4b88:	edd6 7a00 	vldr	s15, [r6]
   b4b8c:	ee38 8a67 	vsub.f32	s16, s16, s15
   b4b90:	eef0 7ac8 	vabs.f32	s15, s16
   b4b94:	ee17 0a90 	vmov	r0, s15
   b4b98:	f004 fbb2 	bl	b9300 <__aeabi_f2d>
   b4b9c:	a33a      	add	r3, pc, #232	; (adr r3, b4c88 <loop+0x2c0>)
   b4b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4ba2:	f004 fc83 	bl	b94ac <__aeabi_dcmpgt>
   b4ba6:	2800      	cmp	r0, #0
   b4ba8:	d164      	bne.n	b4c74 <loop+0x2ac>
        storedValues[storedValuesPos] = 0;
   b4baa:	6823      	ldr	r3, [r4, #0]
   b4bac:	54e8      	strb	r0, [r5, r3]
      storedTimes[storedValuesPos] = Time.now();
   b4bae:	6823      	ldr	r3, [r4, #0]
   b4bb0:	9303      	str	r3, [sp, #12]
   b4bb2:	f003 fdb4 	bl	b871e <_ZN9TimeClass3nowEv>
   b4bb6:	4d46      	ldr	r5, [pc, #280]	; (b4cd0 <loop+0x308>)
   b4bb8:	9b03      	ldr	r3, [sp, #12]
      storedValuesPos++;
   b4bba:	6822      	ldr	r2, [r4, #0]
      storedTimes[storedValuesPos] = Time.now();
   b4bbc:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
      prevX = x;
   b4bc0:	f8db 3000 	ldr.w	r3, [fp]
   b4bc4:	f8ca 3000 	str.w	r3, [sl]
      prevY = y;
   b4bc8:	f8d9 3000 	ldr.w	r3, [r9]
   b4bcc:	f8c8 3000 	str.w	r3, [r8]
      prevZ = z;
   b4bd0:	683b      	ldr	r3, [r7, #0]
   b4bd2:	6033      	str	r3, [r6, #0]
      if(storedValuesPos >= ((reportingInterval * 1000) / recordingInterval)) {
   b4bd4:	4b3f      	ldr	r3, [pc, #252]	; (b4cd4 <loop+0x30c>)
   b4bd6:	4e40      	ldr	r6, [pc, #256]	; (b4cd8 <loop+0x310>)
   b4bd8:	681b      	ldr	r3, [r3, #0]
      storedValuesPos++;
   b4bda:	3201      	adds	r2, #1
      if(storedValuesPos >= ((reportingInterval * 1000) / recordingInterval)) {
   b4bdc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b4be0:	434b      	muls	r3, r1
   b4be2:	6831      	ldr	r1, [r6, #0]
   b4be4:	fb93 f3f1 	sdiv	r3, r3, r1
   b4be8:	429a      	cmp	r2, r3
      storedValuesPos++;
   b4bea:	6022      	str	r2, [r4, #0]
      if(storedValuesPos >= ((reportingInterval * 1000) / recordingInterval)) {
   b4bec:	f2c0 80ae 	blt.w	b4d4c <loop+0x384>
   b4bf0:	f8df 90d4 	ldr.w	r9, [pc, #212]	; b4cc8 <loop+0x300>
	StringSumHelper(const char *p) : String(p) {}
   b4bf4:	4b39      	ldr	r3, [pc, #228]	; (b4cdc <loop+0x314>)
          payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b4bf6:	f8df b108 	ldr.w	fp, [pc, #264]	; b4d00 <loop+0x338>
   b4bfa:	f8df a108 	ldr.w	sl, [pc, #264]	; b4d04 <loop+0x33c>
        for (int i = 0; i < storedValuesPos; i++) {
   b4bfe:	2700      	movs	r7, #0
   b4c00:	6822      	ldr	r2, [r4, #0]
   b4c02:	42ba      	cmp	r2, r7
   b4c04:	f340 8080 	ble.w	b4d08 <loop+0x340>
   b4c08:	4619      	mov	r1, r3
   b4c0a:	a80a      	add	r0, sp, #40	; 0x28
   b4c0c:	f003 f8d7 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
          payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b4c10:	220a      	movs	r2, #10
   b4c12:	f8db 1000 	ldr.w	r1, [fp]
   b4c16:	a805      	add	r0, sp, #20
   b4c18:	f003 f906 	bl	b7e28 <_ZN6StringC1Eih>
   b4c1c:	a905      	add	r1, sp, #20
   b4c1e:	a80a      	add	r0, sp, #40	; 0x28
   b4c20:	f003 f961 	bl	b7ee6 <_ZplRK15StringSumHelperRK6String>
   b4c24:	4651      	mov	r1, sl
   b4c26:	f003 f96a 	bl	b7efe <_ZplRK15StringSumHelperPKc>
   b4c2a:	f819 1b01 	ldrb.w	r1, [r9], #1
   b4c2e:	f003 f97b 	bl	b7f28 <_ZplRK15StringSumHelperh>
   b4c32:	492b      	ldr	r1, [pc, #172]	; (b4ce0 <loop+0x318>)
   b4c34:	f003 f963 	bl	b7efe <_ZplRK15StringSumHelperPKc>
   b4c38:	220a      	movs	r2, #10
   b4c3a:	f855 1b04 	ldr.w	r1, [r5], #4
   b4c3e:	4680      	mov	r8, r0
   b4c40:	a80f      	add	r0, sp, #60	; 0x3c
   b4c42:	f003 f904 	bl	b7e4e <_ZN6StringC1Elh>
   b4c46:	a90f      	add	r1, sp, #60	; 0x3c
   b4c48:	4640      	mov	r0, r8
   b4c4a:	f003 f94c 	bl	b7ee6 <_ZplRK15StringSumHelperRK6String>
   b4c4e:	4925      	ldr	r1, [pc, #148]	; (b4ce4 <loop+0x31c>)
   b4c50:	f003 f955 	bl	b7efe <_ZplRK15StringSumHelperPKc>
   b4c54:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b4c56:	4824      	ldr	r0, [pc, #144]	; (b4ce8 <loop+0x320>)
   b4c58:	f003 f923 	bl	b7ea2 <_ZN6String6concatERKS_>
   b4c5c:	a80f      	add	r0, sp, #60	; 0x3c
   b4c5e:	f003 f863 	bl	b7d28 <_ZN6StringD1Ev>
   b4c62:	a805      	add	r0, sp, #20
   b4c64:	f003 f860 	bl	b7d28 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4c68:	a80a      	add	r0, sp, #40	; 0x28
   b4c6a:	f003 f85d 	bl	b7d28 <_ZN6StringD1Ev>
        for (int i = 0; i < storedValuesPos; i++) {
   b4c6e:	3701      	adds	r7, #1
   b4c70:	4b1a      	ldr	r3, [pc, #104]	; (b4cdc <loop+0x314>)
   b4c72:	e7c5      	b.n	b4c00 <loop+0x238>
        if(firstRecord) {
   b4c74:	491d      	ldr	r1, [pc, #116]	; (b4cec <loop+0x324>)
        storedValues[storedValuesPos] = 0;
   b4c76:	6823      	ldr	r3, [r4, #0]
        if(firstRecord) {
   b4c78:	780a      	ldrb	r2, [r1, #0]
   b4c7a:	b11a      	cbz	r2, b4c84 <loop+0x2bc>
          firstRecord = false;
   b4c7c:	2200      	movs	r2, #0
   b4c7e:	700a      	strb	r2, [r1, #0]
          storedValues[storedValuesPos] = 1;
   b4c80:	54ea      	strb	r2, [r5, r3]
   b4c82:	e794      	b.n	b4bae <loop+0x1e6>
   b4c84:	2201      	movs	r2, #1
   b4c86:	e7fb      	b.n	b4c80 <loop+0x2b8>
   b4c88:	9999999a 	.word	0x9999999a
   b4c8c:	3fa99999 	.word	0x3fa99999
   b4c90:	2003dab0 	.word	0x2003dab0
   b4c94:	000b9b80 	.word	0x000b9b80
   b4c98:	2003e5fc 	.word	0x2003e5fc
   b4c9c:	2003e0e0 	.word	0x2003e0e0
   b4ca0:	2003da68 	.word	0x2003da68
   b4ca4:	000b40e1 	.word	0x000b40e1
   b4ca8:	000b4109 	.word	0x000b4109
   b4cac:	2003daa4 	.word	0x2003daa4
   b4cb0:	000b9b88 	.word	0x000b9b88
   b4cb4:	000b9bca 	.word	0x000b9bca
   b4cb8:	000b9b96 	.word	0x000b9b96
   b4cbc:	2003dee0 	.word	0x2003dee0
   b4cc0:	2003e61c 	.word	0x2003e61c
   b4cc4:	2003e074 	.word	0x2003e074
   b4cc8:	2003e4f8 	.word	0x2003e4f8
   b4ccc:	2003e5f8 	.word	0x2003e5f8
   b4cd0:	2003e0f8 	.word	0x2003e0f8
   b4cd4:	2003e07c 	.word	0x2003e07c
   b4cd8:	2003e078 	.word	0x2003e078
   b4cdc:	000b9bdb 	.word	0x000b9bdb
   b4ce0:	000b9bef 	.word	0x000b9bef
   b4ce4:	000b9bfe 	.word	0x000b9bfe
   b4ce8:	2003e04c 	.word	0x2003e04c
   b4cec:	2003d9d0 	.word	0x2003d9d0
   b4cf0:	2003e06c 	.word	0x2003e06c
   b4cf4:	2003e614 	.word	0x2003e614
   b4cf8:	2003e618 	.word	0x2003e618
   b4cfc:	2003e070 	.word	0x2003e070
   b4d00:	2003daac 	.word	0x2003daac
   b4d04:	000b9be4 	.word	0x000b9be4
        Serial.println("\n");
   b4d08:	f003 fe00 	bl	b890c <_Z16_fetch_usbserialv>
   b4d0c:	4940      	ldr	r1, [pc, #256]	; (b4e10 <loop+0x448>)
   b4d0e:	f002 ff04 	bl	b7b1a <_ZN5Print7printlnEPKc>
        storedValuesPos = 0;
   b4d12:	2500      	movs	r5, #0
        WiFi.on();
   b4d14:	483f      	ldr	r0, [pc, #252]	; (b4e14 <loop+0x44c>)
        storedValuesPos = 0;
   b4d16:	6025      	str	r5, [r4, #0]
        WiFi.on();
   b4d18:	f7ff fa70 	bl	b41fc <_ZN5spark9WiFiClass2onEv>
        WiFi.connect();
   b4d1c:	4629      	mov	r1, r5
   b4d1e:	483d      	ldr	r0, [pc, #244]	; (b4e14 <loop+0x44c>)
        while(!WiFi.ready() && WiFiConnectCountdown != 0) {
   b4d20:	4d3c      	ldr	r5, [pc, #240]	; (b4e14 <loop+0x44c>)
        WiFi.connect();
   b4d22:	f7ff fa77 	bl	b4214 <_ZN5spark9WiFiClass7connectEj>
   b4d26:	24c9      	movs	r4, #201	; 0xc9
        while(!WiFi.ready() && WiFiConnectCountdown != 0) {
   b4d28:	4628      	mov	r0, r5
   b4d2a:	f7ff fa78 	bl	b421e <_ZN5spark9WiFiClass5readyEv>
   b4d2e:	b908      	cbnz	r0, b4d34 <loop+0x36c>
   b4d30:	3c01      	subs	r4, #1
   b4d32:	d113      	bne.n	b4d5c <loop+0x394>
        if(WiFi.ready() != true) {
   b4d34:	4837      	ldr	r0, [pc, #220]	; (b4e14 <loop+0x44c>)
   b4d36:	f7ff fa72 	bl	b421e <_ZN5spark9WiFiClass5readyEv>
   b4d3a:	b998      	cbnz	r0, b4d64 <loop+0x39c>
          Serial.println("WiFi failed to connect, data not reported");
   b4d3c:	f003 fde6 	bl	b890c <_Z16_fetch_usbserialv>
   b4d40:	4935      	ldr	r1, [pc, #212]	; (b4e18 <loop+0x450>)
   b4d42:	f002 feea 	bl	b7b1a <_ZN5Print7printlnEPKc>
        WiFi.off();
   b4d46:	4833      	ldr	r0, [pc, #204]	; (b4e14 <loop+0x44c>)
   b4d48:	f7ff fa5e 	bl	b4208 <_ZN5spark9WiFiClass3offEv>
      delay(recordingInterval);
   b4d4c:	6830      	ldr	r0, [r6, #0]
}
   b4d4e:	b019      	add	sp, #100	; 0x64
   b4d50:	ecbd 8b02 	vpop	{d8}
   b4d54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      delay(recordingInterval);
   b4d58:	f001 ba4e 	b.w	b61f8 <delay>
          delay(100);
   b4d5c:	2064      	movs	r0, #100	; 0x64
   b4d5e:	f001 fa4b 	bl	b61f8 <delay>
        while(!WiFi.ready() && WiFiConnectCountdown != 0) {
   b4d62:	e7e1      	b.n	b4d28 <loop+0x360>
	inline unsigned int length(void) const {return len;}
   b4d64:	4c2d      	ldr	r4, [pc, #180]	; (b4e1c <loop+0x454>)
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
    }

    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
   b4d66:	4d2e      	ldr	r5, [pc, #184]	; (b4e20 <loop+0x458>)
          Serial.println("WiFi connected, reporting data");
   b4d68:	f003 fdd0 	bl	b890c <_Z16_fetch_usbserialv>
   b4d6c:	492d      	ldr	r1, [pc, #180]	; (b4e24 <loop+0x45c>)
   b4d6e:	f002 fed4 	bl	b7b1a <_ZN5Print7printlnEPKc>
          payload.remove(payload.length() - 1);
   b4d72:	68a1      	ldr	r1, [r4, #8]
   b4d74:	4620      	mov	r0, r4
   b4d76:	3901      	subs	r1, #1
   b4d78:	f003 f945 	bl	b8006 <_ZN6String6removeEj>
	StringSumHelper(const char *p) : String(p) {}
   b4d7c:	492a      	ldr	r1, [pc, #168]	; (b4e28 <loop+0x460>)
   b4d7e:	a80f      	add	r0, sp, #60	; 0x3c
   b4d80:	f003 f81d 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
          request.body = "{\"data\":[" + payload + "]}";
   b4d84:	4621      	mov	r1, r4
   b4d86:	a80f      	add	r0, sp, #60	; 0x3c
   b4d88:	f003 f8ad 	bl	b7ee6 <_ZplRK15StringSumHelperRK6String>
   b4d8c:	4927      	ldr	r1, [pc, #156]	; (b4e2c <loop+0x464>)
   b4d8e:	f003 f8b6 	bl	b7efe <_ZplRK15StringSumHelperPKc>
   b4d92:	4601      	mov	r1, r0
   b4d94:	4826      	ldr	r0, [pc, #152]	; (b4e30 <loop+0x468>)
   b4d96:	f003 f826 	bl	b7de6 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b4d9a:	a80f      	add	r0, sp, #60	; 0x3c
   b4d9c:	f002 ffc4 	bl	b7d28 <_ZN6StringD1Ev>
          payload = "";
   b4da0:	4924      	ldr	r1, [pc, #144]	; (b4e34 <loop+0x46c>)
   b4da2:	4620      	mov	r0, r4
   b4da4:	f003 f82e 	bl	b7e04 <_ZN6StringaSEPKc>
   b4da8:	4b23      	ldr	r3, [pc, #140]	; (b4e38 <loop+0x470>)
   b4daa:	4924      	ldr	r1, [pc, #144]	; (b4e3c <loop+0x474>)
   b4dac:	9300      	str	r3, [sp, #0]
   b4dae:	462a      	mov	r2, r5
   b4db0:	4b23      	ldr	r3, [pc, #140]	; (b4e40 <loop+0x478>)
   b4db2:	4824      	ldr	r0, [pc, #144]	; (b4e44 <loop+0x47c>)
   b4db4:	f000 fc5c 	bl	b5670 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
          Serial.println("Status: " + response.status);
   b4db8:	f003 fda8 	bl	b890c <_Z16_fetch_usbserialv>
   b4dbc:	682b      	ldr	r3, [r5, #0]
   b4dbe:	4922      	ldr	r1, [pc, #136]	; (b4e48 <loop+0x480>)
   b4dc0:	4419      	add	r1, r3
   b4dc2:	f002 feaa 	bl	b7b1a <_ZN5Print7printlnEPKc>
          Serial.println("Body: " + response.body);
   b4dc6:	f003 fda1 	bl	b890c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4dca:	4920      	ldr	r1, [pc, #128]	; (b4e4c <loop+0x484>)
   b4dcc:	4604      	mov	r4, r0
   b4dce:	a80f      	add	r0, sp, #60	; 0x3c
   b4dd0:	f002 fff5 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
   b4dd4:	1d29      	adds	r1, r5, #4
   b4dd6:	a80f      	add	r0, sp, #60	; 0x3c
   b4dd8:	f003 f885 	bl	b7ee6 <_ZplRK15StringSumHelperRK6String>
   b4ddc:	6801      	ldr	r1, [r0, #0]
   b4dde:	4620      	mov	r0, r4
   b4de0:	f002 fe9b 	bl	b7b1a <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4de4:	a80f      	add	r0, sp, #60	; 0x3c
   b4de6:	f002 ff9f 	bl	b7d28 <_ZN6StringD1Ev>
          Serial.println("ReqBody: " + request.body);
   b4dea:	f003 fd8f 	bl	b890c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4dee:	4918      	ldr	r1, [pc, #96]	; (b4e50 <loop+0x488>)
   b4df0:	4604      	mov	r4, r0
   b4df2:	a80f      	add	r0, sp, #60	; 0x3c
   b4df4:	f002 ffe3 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
   b4df8:	490d      	ldr	r1, [pc, #52]	; (b4e30 <loop+0x468>)
   b4dfa:	a80f      	add	r0, sp, #60	; 0x3c
   b4dfc:	f003 f873 	bl	b7ee6 <_ZplRK15StringSumHelperRK6String>
   b4e00:	6801      	ldr	r1, [r0, #0]
   b4e02:	4620      	mov	r0, r4
   b4e04:	f002 fe89 	bl	b7b1a <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4e08:	a80f      	add	r0, sp, #60	; 0x3c
   b4e0a:	f002 ff8d 	bl	b7d28 <_ZN6StringD1Ev>
   b4e0e:	e79a      	b.n	b4d46 <loop+0x37e>
   b4e10:	000b9902 	.word	0x000b9902
   b4e14:	2003e7c0 	.word	0x2003e7c0
   b4e18:	000b9c01 	.word	0x000b9c01
   b4e1c:	2003e04c 	.word	0x2003e04c
   b4e20:	2003e0cc 	.word	0x2003e0cc
   b4e24:	000b9c2b 	.word	0x000b9c2b
   b4e28:	000b9c4a 	.word	0x000b9c4a
   b4e2c:	000b9c54 	.word	0x000b9c54
   b4e30:	2003e0bc 	.word	0x2003e0bc
   b4e34:	000b9903 	.word	0x000b9903
   b4e38:	000b9c57 	.word	0x000b9c57
   b4e3c:	2003e080 	.word	0x2003e080
   b4e40:	2003d9d4 	.word	0x2003d9d4
   b4e44:	2003dab4 	.word	0x2003dab4
   b4e48:	000b9c5c 	.word	0x000b9c5c
   b4e4c:	000b9c68 	.word	0x000b9c68
   b4e50:	000b9c65 	.word	0x000b9c65

000b4e54 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b4e54:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4e56:	4616      	mov	r6, r2
   b4e58:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b4e5a:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4e5c:	e9c0 2200 	strd	r2, r2, [r0]
   b4e60:	4604      	mov	r4, r0
   b4e62:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   b4e64:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   b4e66:	4619      	mov	r1, r3
   b4e68:	a806      	add	r0, sp, #24
   b4e6a:	f001 fb6b 	bl	b6544 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   b4e6e:	9916      	ldr	r1, [sp, #88]	; 0x58
   b4e70:	4638      	mov	r0, r7
   b4e72:	f001 fb67 	bl	b6544 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   b4e76:	7833      	ldrb	r3, [r6, #0]
   b4e78:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4e7c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b4e7e:	9302      	str	r3, [sp, #8]
   b4e80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b4e82:	4620      	mov	r0, r4
   b4e84:	e9cd 7300 	strd	r7, r3, [sp]
   b4e88:	aa05      	add	r2, sp, #20
   b4e8a:	ab06      	add	r3, sp, #24
   b4e8c:	4629      	mov	r1, r5
   b4e8e:	f002 f96d 	bl	b716c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b4e92:	4620      	mov	r0, r4
   b4e94:	b011      	add	sp, #68	; 0x44
   b4e96:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4e98 <_ZN15Adafruit_LIS3DHD0Ev>:
   b4e98:	b510      	push	{r4, lr}
   b4e9a:	212c      	movs	r1, #44	; 0x2c
   b4e9c:	4604      	mov	r4, r0
   b4e9e:	f003 ffb2 	bl	b8e06 <_ZdlPvj>
   b4ea2:	4620      	mov	r0, r4
   b4ea4:	bd10      	pop	{r4, pc}
	...

000b4ea8 <_GLOBAL__sub_I_SystemMode>:
   b4ea8:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
   b4eaa:	4c66      	ldr	r4, [pc, #408]	; (b5044 <_GLOBAL__sub_I_SystemMode+0x19c>)
   b4eac:	4d66      	ldr	r5, [pc, #408]	; (b5048 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b4eae:	2300      	movs	r3, #0
   b4eb0:	e9c4 3300 	strd	r3, r3, [r4]
    SleepResult() {}
   b4eb4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   b4eb8:	60a3      	str	r3, [r4, #8]
   b4eba:	b090      	sub	sp, #64	; 0x40
        set_system_mode(mode);
   b4ebc:	2003      	movs	r0, #3
   b4ebe:	f001 f865 	bl	b5f8c <set_system_mode>
SYSTEM_MODE(MANUAL)
   b4ec2:	4a62      	ldr	r2, [pc, #392]	; (b504c <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b4ec4:	4962      	ldr	r1, [pc, #392]	; (b5050 <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b4ec6:	4620      	mov	r0, r4
   b4ec8:	f003 ff98 	bl	b8dfc <__aeabi_atexit>
Adafruit_LIS3DH lis3dh = Adafruit_LIS3DH();
   b4ecc:	4861      	ldr	r0, [pc, #388]	; (b5054 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b4ece:	f000 f91b 	bl	b5108 <_ZN15Adafruit_LIS3DHC1Ev>
   b4ed2:	4a5e      	ldr	r2, [pc, #376]	; (b504c <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b4ed4:	4960      	ldr	r1, [pc, #384]	; (b5058 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b4ed6:	485f      	ldr	r0, [pc, #380]	; (b5054 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b4ed8:	f003 ff90 	bl	b8dfc <__aeabi_atexit>
String payload, prevPayload = "";
   b4edc:	495f      	ldr	r1, [pc, #380]	; (b505c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b4ede:	4860      	ldr	r0, [pc, #384]	; (b5060 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b4ee0:	f002 ff6d 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
   b4ee4:	4a59      	ldr	r2, [pc, #356]	; (b504c <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b4ee6:	495f      	ldr	r1, [pc, #380]	; (b5064 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b4ee8:	485d      	ldr	r0, [pc, #372]	; (b5060 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b4eea:	f003 ff87 	bl	b8dfc <__aeabi_atexit>
   b4eee:	495b      	ldr	r1, [pc, #364]	; (b505c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b4ef0:	485d      	ldr	r0, [pc, #372]	; (b5068 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b4ef2:	f002 ff64 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
   b4ef6:	4a55      	ldr	r2, [pc, #340]	; (b504c <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b4ef8:	495a      	ldr	r1, [pc, #360]	; (b5064 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b4efa:	485b      	ldr	r0, [pc, #364]	; (b5068 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b4efc:	f003 ff7e 	bl	b8dfc <__aeabi_atexit>
String unixTime;
   b4f00:	4956      	ldr	r1, [pc, #344]	; (b505c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b4f02:	485a      	ldr	r0, [pc, #360]	; (b506c <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b4f04:	f002 ff5b 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
   b4f08:	4a50      	ldr	r2, [pc, #320]	; (b504c <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b4f0a:	4956      	ldr	r1, [pc, #344]	; (b5064 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b4f0c:	4857      	ldr	r0, [pc, #348]	; (b506c <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b4f0e:	f003 ff75 	bl	b8dfc <__aeabi_atexit>
String ssid, password = "";
   b4f12:	4952      	ldr	r1, [pc, #328]	; (b505c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b4f14:	4856      	ldr	r0, [pc, #344]	; (b5070 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   b4f16:	f002 ff52 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
   b4f1a:	4a4c      	ldr	r2, [pc, #304]	; (b504c <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b4f1c:	4951      	ldr	r1, [pc, #324]	; (b5064 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b4f1e:	4854      	ldr	r0, [pc, #336]	; (b5070 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   b4f20:	f003 ff6c 	bl	b8dfc <__aeabi_atexit>
   b4f24:	494d      	ldr	r1, [pc, #308]	; (b505c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b4f26:	4853      	ldr	r0, [pc, #332]	; (b5074 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b4f28:	f002 ff49 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
   b4f2c:	4a47      	ldr	r2, [pc, #284]	; (b504c <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b4f2e:	494d      	ldr	r1, [pc, #308]	; (b5064 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b4f30:	4850      	ldr	r0, [pc, #320]	; (b5074 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b4f32:	f003 ff63 	bl	b8dfc <__aeabi_atexit>
String inputBuffer;
   b4f36:	4949      	ldr	r1, [pc, #292]	; (b505c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b4f38:	484f      	ldr	r0, [pc, #316]	; (b5078 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   b4f3a:	f002 ff40 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
   b4f3e:	4a43      	ldr	r2, [pc, #268]	; (b504c <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b4f40:	4948      	ldr	r1, [pc, #288]	; (b5064 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b4f42:	484d      	ldr	r0, [pc, #308]	; (b5078 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   b4f44:	f003 ff5a 	bl	b8dfc <__aeabi_atexit>
HttpClient http;
   b4f48:	484c      	ldr	r0, [pc, #304]	; (b507c <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b4f4a:	f000 fb30 	bl	b55ae <_ZN10HttpClientC1Ev>
   b4f4e:	4a3f      	ldr	r2, [pc, #252]	; (b504c <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b4f50:	494b      	ldr	r1, [pc, #300]	; (b5080 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b4f52:	484a      	ldr	r0, [pc, #296]	; (b507c <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b4f54:	f003 ff52 	bl	b8dfc <__aeabi_atexit>
} http_request_t;
   b4f58:	4940      	ldr	r1, [pc, #256]	; (b505c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b4f5a:	484a      	ldr	r0, [pc, #296]	; (b5084 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b4f5c:	f002 ff2f 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
   b4f60:	4849      	ldr	r0, [pc, #292]	; (b5088 <_GLOBAL__sub_I_SystemMode+0x1e0>)
   b4f62:	f002 fc8b 	bl	b787c <_ZN9IPAddressC1Ev>
   b4f66:	493d      	ldr	r1, [pc, #244]	; (b505c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b4f68:	4848      	ldr	r0, [pc, #288]	; (b508c <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b4f6a:	f002 ff28 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
   b4f6e:	493b      	ldr	r1, [pc, #236]	; (b505c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b4f70:	4847      	ldr	r0, [pc, #284]	; (b5090 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   b4f72:	f002 ff24 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
http_request_t request;
   b4f76:	4a35      	ldr	r2, [pc, #212]	; (b504c <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b4f78:	4946      	ldr	r1, [pc, #280]	; (b5094 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b4f7a:	4842      	ldr	r0, [pc, #264]	; (b5084 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b4f7c:	f003 ff3e 	bl	b8dfc <__aeabi_atexit>
} http_response_t;
   b4f80:	4936      	ldr	r1, [pc, #216]	; (b505c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b4f82:	4845      	ldr	r0, [pc, #276]	; (b5098 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   b4f84:	f002 ff1b 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
http_response_t response;
   b4f88:	4a30      	ldr	r2, [pc, #192]	; (b504c <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b4f8a:	4944      	ldr	r1, [pc, #272]	; (b509c <_GLOBAL__sub_I_SystemMode+0x1f4>)
   b4f8c:	4844      	ldr	r0, [pc, #272]	; (b50a0 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b4f8e:	f003 ff35 	bl	b8dfc <__aeabi_atexit>
   b4f92:	2405      	movs	r4, #5
#ifdef __cplusplus

   WiFiAccessPoint()
   {
       memset(this, 0, sizeof(*this));
       size = sizeof(*this);
   b4f94:	2638      	movs	r6, #56	; 0x38
       memset(this, 0, sizeof(*this));
   b4f96:	1d28      	adds	r0, r5, #4
   b4f98:	2234      	movs	r2, #52	; 0x34
   b4f9a:	2100      	movs	r1, #0
   b4f9c:	f004 fb14 	bl	b95c8 <memset>
WiFiAccessPoint networks[5];
   b4fa0:	3c01      	subs	r4, #1
       size = sizeof(*this);
   b4fa2:	f845 6b38 	str.w	r6, [r5], #56
   b4fa6:	d1f6      	bne.n	b4f96 <_GLOBAL__sub_I_SystemMode+0xee>
String networkBuffer;
   b4fa8:	492c      	ldr	r1, [pc, #176]	; (b505c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b4faa:	483e      	ldr	r0, [pc, #248]	; (b50a4 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   b4fac:	f002 ff07 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
   b4fb0:	4a26      	ldr	r2, [pc, #152]	; (b504c <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b4fb2:	492c      	ldr	r1, [pc, #176]	; (b5064 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b4fb4:	483b      	ldr	r0, [pc, #236]	; (b50a4 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   b4fb6:	f003 ff21 	bl	b8dfc <__aeabi_atexit>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b4fba:	493b      	ldr	r1, [pc, #236]	; (b50a8 <_GLOBAL__sub_I_SystemMode+0x200>)
   b4fbc:	483b      	ldr	r0, [pc, #236]	; (b50ac <_GLOBAL__sub_I_SystemMode+0x204>)
   b4fbe:	f001 fba5 	bl	b670c <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b4fc2:	493b      	ldr	r1, [pc, #236]	; (b50b0 <_GLOBAL__sub_I_SystemMode+0x208>)
   b4fc4:	483b      	ldr	r0, [pc, #236]	; (b50b4 <_GLOBAL__sub_I_SystemMode+0x20c>)
   b4fc6:	f001 fba1 	bl	b670c <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b4fca:	493b      	ldr	r1, [pc, #236]	; (b50b8 <_GLOBAL__sub_I_SystemMode+0x210>)
   b4fcc:	483b      	ldr	r0, [pc, #236]	; (b50bc <_GLOBAL__sub_I_SystemMode+0x214>)
   b4fce:	f001 fb9d 	bl	b670c <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   b4fd2:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b4fd4:	4939      	ldr	r1, [pc, #228]	; (b50bc <_GLOBAL__sub_I_SystemMode+0x214>)
   b4fd6:	f88d 3014 	strb.w	r3, [sp, #20]
   b4fda:	a806      	add	r0, sp, #24
   b4fdc:	f001 fab2 	bl	b6544 <_ZN8particle7BleUuidC1ERKS0_>
   b4fe0:	4932      	ldr	r1, [pc, #200]	; (b50ac <_GLOBAL__sub_I_SystemMode+0x204>)
   b4fe2:	a80b      	add	r0, sp, #44	; 0x2c
   b4fe4:	f001 faae 	bl	b6544 <_ZN8particle7BleUuidC1ERKS0_>
   b4fe8:	ab0b      	add	r3, sp, #44	; 0x2c
   b4fea:	9300      	str	r3, [sp, #0]
   b4fec:	aa05      	add	r2, sp, #20
   b4fee:	ab06      	add	r3, sp, #24
   b4ff0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4ff4:	4932      	ldr	r1, [pc, #200]	; (b50c0 <_GLOBAL__sub_I_SystemMode+0x218>)
   b4ff6:	4833      	ldr	r0, [pc, #204]	; (b50c4 <_GLOBAL__sub_I_SystemMode+0x21c>)
   b4ff8:	f7ff ff2c 	bl	b4e54 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b4ffc:	4a13      	ldr	r2, [pc, #76]	; (b504c <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b4ffe:	4932      	ldr	r1, [pc, #200]	; (b50c8 <_GLOBAL__sub_I_SystemMode+0x220>)
   b5000:	4830      	ldr	r0, [pc, #192]	; (b50c4 <_GLOBAL__sub_I_SystemMode+0x21c>)
   b5002:	f003 fefb 	bl	b8dfc <__aeabi_atexit>
   b5006:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b5008:	492a      	ldr	r1, [pc, #168]	; (b50b4 <_GLOBAL__sub_I_SystemMode+0x20c>)
   b500a:	f88d 3014 	strb.w	r3, [sp, #20]
   b500e:	a806      	add	r0, sp, #24
   b5010:	f001 fa98 	bl	b6544 <_ZN8particle7BleUuidC1ERKS0_>
   b5014:	4925      	ldr	r1, [pc, #148]	; (b50ac <_GLOBAL__sub_I_SystemMode+0x204>)
   b5016:	a80b      	add	r0, sp, #44	; 0x2c
   b5018:	f001 fa94 	bl	b6544 <_ZN8particle7BleUuidC1ERKS0_>
   b501c:	4b2b      	ldr	r3, [pc, #172]	; (b50cc <_GLOBAL__sub_I_SystemMode+0x224>)
   b501e:	9301      	str	r3, [sp, #4]
   b5020:	ab0b      	add	r3, sp, #44	; 0x2c
   b5022:	9300      	str	r3, [sp, #0]
   b5024:	aa05      	add	r2, sp, #20
   b5026:	492a      	ldr	r1, [pc, #168]	; (b50d0 <_GLOBAL__sub_I_SystemMode+0x228>)
   b5028:	9402      	str	r4, [sp, #8]
   b502a:	ab06      	add	r3, sp, #24
   b502c:	4829      	ldr	r0, [pc, #164]	; (b50d4 <_GLOBAL__sub_I_SystemMode+0x22c>)
   b502e:	f7ff ff11 	bl	b4e54 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b5032:	4a06      	ldr	r2, [pc, #24]	; (b504c <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b5034:	4924      	ldr	r1, [pc, #144]	; (b50c8 <_GLOBAL__sub_I_SystemMode+0x220>)
   b5036:	4827      	ldr	r0, [pc, #156]	; (b50d4 <_GLOBAL__sub_I_SystemMode+0x22c>)
   b5038:	b010      	add	sp, #64	; 0x40
   b503a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b503e:	f003 bedd 	b.w	b8dfc <__aeabi_atexit>
   b5042:	bf00      	nop
   b5044:	2003da5c 	.word	0x2003da5c
   b5048:	2003df20 	.word	0x2003df20
   b504c:	2003da58 	.word	0x2003da58
   b5050:	000b4125 	.word	0x000b4125
   b5054:	2003dee0 	.word	0x2003dee0
   b5058:	000b40b3 	.word	0x000b40b3
   b505c:	000b9903 	.word	0x000b9903
   b5060:	2003e04c 	.word	0x2003e04c
   b5064:	000b7d29 	.word	0x000b7d29
   b5068:	2003e05c 	.word	0x2003e05c
   b506c:	2003e604 	.word	0x2003e604
   b5070:	2003e0e8 	.word	0x2003e0e8
   b5074:	2003e03c 	.word	0x2003e03c
   b5078:	2003ded0 	.word	0x2003ded0
   b507c:	2003dab4 	.word	0x2003dab4
   b5080:	000b41ad 	.word	0x000b41ad
   b5084:	2003e080 	.word	0x2003e080
   b5088:	2003e090 	.word	0x2003e090
   b508c:	2003e0a8 	.word	0x2003e0a8
   b5090:	2003e0bc 	.word	0x2003e0bc
   b5094:	000b40c3 	.word	0x000b40c3
   b5098:	2003e0d0 	.word	0x2003e0d0
   b509c:	000b40b5 	.word	0x000b40b5
   b50a0:	2003e0cc 	.word	0x2003e0cc
   b50a4:	2003df0c 	.word	0x2003df0c
   b50a8:	000b9c6f 	.word	0x000b9c6f
   b50ac:	2003da68 	.word	0x2003da68
   b50b0:	000b9c94 	.word	0x000b9c94
   b50b4:	2003da7c 	.word	0x2003da7c
   b50b8:	000b9cb9 	.word	0x000b9cb9
   b50bc:	2003da90 	.word	0x2003da90
   b50c0:	000b9cde 	.word	0x000b9cde
   b50c4:	2003e5fc 	.word	0x2003e5fc
   b50c8:	000b6c3b 	.word	0x000b6c3b
   b50cc:	000b4229 	.word	0x000b4229
   b50d0:	000b9ce1 	.word	0x000b9ce1
   b50d4:	2003e0e0 	.word	0x2003e0e0

000b50d8 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b50d8:	4770      	bx	lr
	...

000b50dc <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   b50dc:	b538      	push	{r3, r4, r5, lr}
   b50de:	460c      	mov	r4, r1
   b50e0:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b50e2:	2220      	movs	r2, #32
   b50e4:	2100      	movs	r1, #0
   b50e6:	f104 0008 	add.w	r0, r4, #8
   b50ea:	f004 fa6d 	bl	b95c8 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   b50ee:	220b      	movs	r2, #11
   b50f0:	4904      	ldr	r1, [pc, #16]	; (b5104 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x28>)
   b50f2:	4620      	mov	r0, r4
   b50f4:	f004 fab8 	bl	b9668 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
   b50f8:	2301      	movs	r3, #1
   b50fa:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id   = _sensorID;
   b50fc:	69aa      	ldr	r2, [r5, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   b50fe:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sensor->min_delay   = 0;
  sensor->max_value   = 0;
  sensor->min_value   = 0;
  sensor->resolution  = 0;
}
   b5102:	bd38      	pop	{r3, r4, r5, pc}
   b5104:	000b9b1c 	.word	0x000b9b1c

000b5108 <_ZN15Adafruit_LIS3DHC1Ev>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   b5108:	4a06      	ldr	r2, [pc, #24]	; (b5124 <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   b510a:	6002      	str	r2, [r0, #0]
   b510c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5110:	6182      	str	r2, [r0, #24]
   b5112:	7742      	strb	r2, [r0, #29]
   b5114:	83c2      	strh	r2, [r0, #30]
   b5116:	22ff      	movs	r2, #255	; 0xff
   b5118:	f880 2020 	strb.w	r2, [r0, #32]
   b511c:	2208      	movs	r2, #8
   b511e:	6242      	str	r2, [r0, #36]	; 0x24
}
   b5120:	4770      	bx	lr
   b5122:	bf00      	nop
   b5124:	000b9d14 	.word	0x000b9d14

000b5128 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5128:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b512a:	4c0b      	ldr	r4, [pc, #44]	; (b5158 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b512c:	7821      	ldrb	r1, [r4, #0]
   b512e:	f3bf 8f5b 	dmb	ish
   b5132:	f011 0101 	ands.w	r1, r1, #1
   b5136:	d10b      	bne.n	b5150 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5138:	4620      	mov	r0, r4
   b513a:	9101      	str	r1, [sp, #4]
   b513c:	f7fe ffb1 	bl	b40a2 <__cxa_guard_acquire>
   b5140:	9901      	ldr	r1, [sp, #4]
   b5142:	b128      	cbz	r0, b5150 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5144:	4805      	ldr	r0, [pc, #20]	; (b515c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5146:	f002 fd5b 	bl	b7c00 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b514a:	4620      	mov	r0, r4
   b514c:	f7fe ffae 	bl	b40ac <__cxa_guard_release>
        return instance;
    }
   b5150:	4802      	ldr	r0, [pc, #8]	; (b515c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5152:	b002      	add	sp, #8
   b5154:	bd10      	pop	{r4, pc}
   b5156:	bf00      	nop
   b5158:	2003e620 	.word	0x2003e620
   b515c:	2003e624 	.word	0x2003e624

000b5160 <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   b5160:	b508      	push	{r3, lr}
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   b5162:	f7ff ffe1 	bl	b5128 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5166:	2101      	movs	r1, #1
   b5168:	f002 fd68 	bl	b7c3c <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b516c:	f7ff ffdc 	bl	b5128 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5170:	4905      	ldr	r1, [pc, #20]	; (b5188 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   b5172:	2201      	movs	r2, #1
   b5174:	f002 fda0 	bl	b7cb8 <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
   b5178:	f7ff ffd6 	bl	b5128 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   b517c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b5180:	2100      	movs	r1, #0
   b5182:	f002 bd6f 	b.w	b7c64 <_ZN8SPIClass11setDataModeEh>
   b5186:	bf00      	nop
   b5188:	0007a120 	.word	0x0007a120

000b518c <_ZN15Adafruit_LIS3DH7spixferEh>:
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   b518c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_sck == -1)
   b5190:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b5194:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   b5196:	4605      	mov	r5, r0
   b5198:	460f      	mov	r7, r1
  if (_sck == -1)
   b519a:	d106      	bne.n	b51aa <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b519c:	f7ff ffc4 	bl	b5128 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b51a0:	4639      	mov	r1, r7
}
   b51a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b51a6:	f002 bdb9 	b.w	b7d1c <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   b51aa:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   b51ac:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   b51ae:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   b51b2:	f995 0020 	ldrsb.w	r0, [r5, #32]
   b51b6:	2100      	movs	r1, #0
   b51b8:	b280      	uxth	r0, r0
   b51ba:	f003 fd9e 	bl	b8cfa <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   b51be:	f995 001e 	ldrsb.w	r0, [r5, #30]
   b51c2:	fa08 f106 	lsl.w	r1, r8, r6
   b51c6:	4039      	ands	r1, r7
   b51c8:	b280      	uxth	r0, r0
   b51ca:	f003 fd96 	bl	b8cfa <digitalWrite>
    digitalWrite(_sck, HIGH);
   b51ce:	f995 0020 	ldrsb.w	r0, [r5, #32]
   b51d2:	2101      	movs	r1, #1
   b51d4:	b280      	uxth	r0, r0
   b51d6:	f003 fd90 	bl	b8cfa <digitalWrite>
    if (digitalRead(_miso))
   b51da:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
   b51de:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   b51e0:	b280      	uxth	r0, r0
    reply <<= 1;
   b51e2:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   b51e4:	f003 fda2 	bl	b8d2c <digitalRead>
   b51e8:	b108      	cbz	r0, b51ee <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   b51ea:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   b51ee:	3e01      	subs	r6, #1
   b51f0:	d2df      	bcs.n	b51b2 <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
   b51f2:	4620      	mov	r0, r4
   b51f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b51f8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   b51f8:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   b51fa:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b51fe:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   b5200:	4604      	mov	r4, r0
   b5202:	460e      	mov	r6, r1
   b5204:	4615      	mov	r5, r2
  if (_cs == -1) {
   b5206:	d116      	bne.n	b5236 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   b5208:	f003 fdd0 	bl	b8dac <_Z19__fetch_global_Wirev>
   b520c:	7f21      	ldrb	r1, [r4, #28]
   b520e:	f002 faed 	bl	b77ec <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   b5212:	f003 fdcb 	bl	b8dac <_Z19__fetch_global_Wirev>
   b5216:	6803      	ldr	r3, [r0, #0]
   b5218:	4631      	mov	r1, r6
   b521a:	689b      	ldr	r3, [r3, #8]
   b521c:	4798      	blx	r3
    Wire.write((uint8_t)value);
   b521e:	f003 fdc5 	bl	b8dac <_Z19__fetch_global_Wirev>
   b5222:	6803      	ldr	r3, [r0, #0]
   b5224:	4629      	mov	r1, r5
   b5226:	689b      	ldr	r3, [r3, #8]
   b5228:	4798      	blx	r3
    Wire.endTransmission();
   b522a:	f003 fdbf 	bl	b8dac <_Z19__fetch_global_Wirev>
}
   b522e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   b5232:	f002 bae6 	b.w	b7802 <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
   b5236:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b523a:	3301      	adds	r3, #1
   b523c:	d101      	bne.n	b5242 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   b523e:	f7ff ff8f 	bl	b5160 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   b5242:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5246:	2100      	movs	r1, #0
   b5248:	b280      	uxth	r0, r0
   b524a:	f003 fd56 	bl	b8cfa <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   b524e:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b5252:	4620      	mov	r0, r4
   b5254:	f7ff ff9a 	bl	b518c <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   b5258:	4629      	mov	r1, r5
   b525a:	4620      	mov	r0, r4
   b525c:	f7ff ff96 	bl	b518c <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   b5260:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5264:	2101      	movs	r1, #1
}
   b5266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   b526a:	b280      	uxth	r0, r0
   b526c:	f003 bd45 	b.w	b8cfa <digitalWrite>

000b5270 <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   b5270:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   b5272:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5276:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   b5278:	4604      	mov	r4, r0
   b527a:	460d      	mov	r5, r1
  if (_cs == -1) {
   b527c:	d11d      	bne.n	b52ba <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   b527e:	f003 fd95 	bl	b8dac <_Z19__fetch_global_Wirev>
   b5282:	f994 101c 	ldrsb.w	r1, [r4, #28]
   b5286:	f002 fab5 	bl	b77f4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   b528a:	f003 fd8f 	bl	b8dac <_Z19__fetch_global_Wirev>
   b528e:	6803      	ldr	r3, [r0, #0]
   b5290:	4629      	mov	r1, r5
   b5292:	689b      	ldr	r3, [r3, #8]
   b5294:	4798      	blx	r3
    Wire.endTransmission();
   b5296:	f003 fd89 	bl	b8dac <_Z19__fetch_global_Wirev>
   b529a:	f002 fab2 	bl	b7802 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
   b529e:	f003 fd85 	bl	b8dac <_Z19__fetch_global_Wirev>
   b52a2:	7f21      	ldrb	r1, [r4, #28]
   b52a4:	2201      	movs	r2, #1
   b52a6:	f002 fa9e 	bl	b77e6 <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   b52aa:	f003 fd7f 	bl	b8dac <_Z19__fetch_global_Wirev>
   b52ae:	6803      	ldr	r3, [r0, #0]
   b52b0:	695b      	ldr	r3, [r3, #20]
   b52b2:	4798      	blx	r3
   b52b4:	b2c5      	uxtb	r5, r0
}
   b52b6:	4628      	mov	r0, r5
   b52b8:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
   b52ba:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b52be:	3301      	adds	r3, #1
   b52c0:	d101      	bne.n	b52c6 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   b52c2:	f7ff ff4d 	bl	b5160 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
   b52c6:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b52ca:	2100      	movs	r1, #0
   b52cc:	b280      	uxth	r0, r0
   b52ce:	f003 fd14 	bl	b8cfa <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   b52d2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b52d6:	4620      	mov	r0, r4
   b52d8:	f7ff ff58 	bl	b518c <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   b52dc:	2100      	movs	r1, #0
   b52de:	4620      	mov	r0, r4
   b52e0:	f7ff ff54 	bl	b518c <_ZN15Adafruit_LIS3DH7spixferEh>
   b52e4:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   b52e6:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b52ea:	2101      	movs	r1, #1
   b52ec:	b280      	uxth	r0, r0
   b52ee:	f003 fd04 	bl	b8cfa <digitalWrite>
    if (_sck == -1)
   b52f2:	e7e0      	b.n	b52b6 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

000b52f4 <_ZN15Adafruit_LIS3DH8getRangeEv>:
{
   b52f4:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   b52f6:	2123      	movs	r1, #35	; 0x23
   b52f8:	f7ff ffba 	bl	b5270 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   b52fc:	f3c0 1001 	ubfx	r0, r0, #4, #2
   b5300:	bd08      	pop	{r3, pc}

000b5302 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
   b5302:	b538      	push	{r3, r4, r5, lr}
   b5304:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   b5306:	2120      	movs	r1, #32
{
   b5308:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   b530a:	f7ff ffb1 	bl	b5270 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
   b530e:	f000 030f 	and.w	r3, r0, #15
  ctl1 |= (dataRate << 4);
   b5312:	ea43 1205 	orr.w	r2, r3, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   b5316:	4620      	mov	r0, r4
   b5318:	b2d2      	uxtb	r2, r2
}
   b531a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   b531e:	2120      	movs	r1, #32
   b5320:	f7ff bf6a 	b.w	b51f8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000b5324 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
   b5324:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   b5326:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b532a:	3301      	adds	r3, #1
void Adafruit_LIS3DH::read(void) {
   b532c:	4604      	mov	r4, r0
  if (_cs == -1) {
   b532e:	d177      	bne.n	b5420 <_ZN15Adafruit_LIS3DH4readEv+0xfc>
    Wire.beginTransmission(_i2caddr);
   b5330:	f003 fd3c 	bl	b8dac <_Z19__fetch_global_Wirev>
   b5334:	f994 101c 	ldrsb.w	r1, [r4, #28]
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   b5338:	4d5d      	ldr	r5, [pc, #372]	; (b54b0 <_ZN15Adafruit_LIS3DH4readEv+0x18c>)
    Wire.beginTransmission(_i2caddr);
   b533a:	f002 fa5b 	bl	b77f4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   b533e:	f003 fd35 	bl	b8dac <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5342:	6803      	ldr	r3, [r0, #0]
   b5344:	21a8      	movs	r1, #168	; 0xa8
   b5346:	689b      	ldr	r3, [r3, #8]
   b5348:	4798      	blx	r3
    Wire.endTransmission();
   b534a:	f003 fd2f 	bl	b8dac <_Z19__fetch_global_Wirev>
   b534e:	f002 fa58 	bl	b7802 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
   b5352:	f003 fd2b 	bl	b8dac <_Z19__fetch_global_Wirev>
   b5356:	7f21      	ldrb	r1, [r4, #28]
   b5358:	2206      	movs	r2, #6
   b535a:	f002 fa44 	bl	b77e6 <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   b535e:	f003 fd25 	bl	b8dac <_Z19__fetch_global_Wirev>
   b5362:	6803      	ldr	r3, [r0, #0]
   b5364:	695b      	ldr	r3, [r3, #20]
   b5366:	4798      	blx	r3
   b5368:	80e0      	strh	r0, [r4, #6]
   b536a:	f003 fd1f 	bl	b8dac <_Z19__fetch_global_Wirev>
   b536e:	6803      	ldr	r3, [r0, #0]
   b5370:	695b      	ldr	r3, [r3, #20]
   b5372:	4798      	blx	r3
   b5374:	88e3      	ldrh	r3, [r4, #6]
   b5376:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b537a:	4318      	orrs	r0, r3
   b537c:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   b537e:	f003 fd15 	bl	b8dac <_Z19__fetch_global_Wirev>
   b5382:	6803      	ldr	r3, [r0, #0]
   b5384:	695b      	ldr	r3, [r3, #20]
   b5386:	4798      	blx	r3
   b5388:	8120      	strh	r0, [r4, #8]
   b538a:	f003 fd0f 	bl	b8dac <_Z19__fetch_global_Wirev>
   b538e:	6803      	ldr	r3, [r0, #0]
   b5390:	695b      	ldr	r3, [r3, #20]
   b5392:	4798      	blx	r3
   b5394:	8923      	ldrh	r3, [r4, #8]
   b5396:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b539a:	4318      	orrs	r0, r3
   b539c:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   b539e:	f003 fd05 	bl	b8dac <_Z19__fetch_global_Wirev>
   b53a2:	6803      	ldr	r3, [r0, #0]
   b53a4:	695b      	ldr	r3, [r3, #20]
   b53a6:	4798      	blx	r3
   b53a8:	8160      	strh	r0, [r4, #10]
   b53aa:	f003 fcff 	bl	b8dac <_Z19__fetch_global_Wirev>
   b53ae:	6803      	ldr	r3, [r0, #0]
   b53b0:	695b      	ldr	r3, [r3, #20]
   b53b2:	4798      	blx	r3
   b53b4:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b53b8:	8965      	ldrh	r5, [r4, #10]
   b53ba:	4328      	orrs	r0, r5
   b53bc:	8160      	strh	r0, [r4, #10]
  uint8_t range = getRange();
   b53be:	4620      	mov	r0, r4
   b53c0:	f7ff ff98 	bl	b52f4 <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   b53c4:	2803      	cmp	r0, #3
   b53c6:	d069      	beq.n	b549c <_ZN15Adafruit_LIS3DH4readEv+0x178>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   b53c8:	2802      	cmp	r0, #2
   b53ca:	d06a      	beq.n	b54a2 <_ZN15Adafruit_LIS3DH4readEv+0x17e>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   b53cc:	2801      	cmp	r0, #1
   b53ce:	d06b      	beq.n	b54a8 <_ZN15Adafruit_LIS3DH4readEv+0x184>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   b53d0:	2800      	cmp	r0, #0
   b53d2:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   b53d6:	bf18      	it	ne
   b53d8:	2301      	movne	r3, #1
  x_g = (float)x / divider;
   b53da:	ee07 3a90 	vmov	s15, r3
   b53de:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   b53e2:	ee07 3a10 	vmov	s14, r3
   b53e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b53ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   b53ee:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  x_g = (float)x / divider;
   b53f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   b53f6:	ee07 3a10 	vmov	s14, r3
   b53fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_g = (float)x / divider;
   b53fe:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   b5402:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   b5406:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b540a:	ee07 3a10 	vmov	s14, r3
   b540e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   b5412:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   b5416:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b541a:	edc4 6a05 	vstr	s13, [r4, #20]
}
   b541e:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
   b5420:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b5424:	3301      	adds	r3, #1
   b5426:	d101      	bne.n	b542c <_ZN15Adafruit_LIS3DH4readEv+0x108>
      beginTransaction();
   b5428:	f7ff fe9a 	bl	b5160 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   b542c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5430:	2100      	movs	r1, #0
   b5432:	b280      	uxth	r0, r0
   b5434:	f003 fc61 	bl	b8cfa <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   b5438:	21e8      	movs	r1, #232	; 0xe8
   b543a:	4620      	mov	r0, r4
   b543c:	f7ff fea6 	bl	b518c <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   b5440:	21ff      	movs	r1, #255	; 0xff
   b5442:	4620      	mov	r0, r4
   b5444:	f7ff fea2 	bl	b518c <_ZN15Adafruit_LIS3DH7spixferEh>
   b5448:	21ff      	movs	r1, #255	; 0xff
   b544a:	80e0      	strh	r0, [r4, #6]
   b544c:	4620      	mov	r0, r4
   b544e:	f7ff fe9d 	bl	b518c <_ZN15Adafruit_LIS3DH7spixferEh>
   b5452:	88e3      	ldrh	r3, [r4, #6]
   b5454:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b5458:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   b545a:	21ff      	movs	r1, #255	; 0xff
   b545c:	4620      	mov	r0, r4
   b545e:	f7ff fe95 	bl	b518c <_ZN15Adafruit_LIS3DH7spixferEh>
   b5462:	21ff      	movs	r1, #255	; 0xff
   b5464:	8120      	strh	r0, [r4, #8]
   b5466:	4620      	mov	r0, r4
   b5468:	f7ff fe90 	bl	b518c <_ZN15Adafruit_LIS3DH7spixferEh>
   b546c:	8923      	ldrh	r3, [r4, #8]
   b546e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b5472:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   b5474:	21ff      	movs	r1, #255	; 0xff
   b5476:	4620      	mov	r0, r4
   b5478:	f7ff fe88 	bl	b518c <_ZN15Adafruit_LIS3DH7spixferEh>
   b547c:	21ff      	movs	r1, #255	; 0xff
   b547e:	8160      	strh	r0, [r4, #10]
   b5480:	4620      	mov	r0, r4
   b5482:	f7ff fe83 	bl	b518c <_ZN15Adafruit_LIS3DH7spixferEh>
   b5486:	8963      	ldrh	r3, [r4, #10]
   b5488:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b548c:	8160      	strh	r0, [r4, #10]
    digitalWrite(_cs, HIGH);
   b548e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5492:	2101      	movs	r1, #1
   b5494:	b280      	uxth	r0, r0
   b5496:	f003 fc30 	bl	b8cfa <digitalWrite>
    if (_sck == -1)
   b549a:	e790      	b.n	b53be <_ZN15Adafruit_LIS3DH4readEv+0x9a>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   b549c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   b54a0:	e79b      	b.n	b53da <_ZN15Adafruit_LIS3DH4readEv+0xb6>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   b54a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   b54a6:	e798      	b.n	b53da <_ZN15Adafruit_LIS3DH4readEv+0xb6>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   b54a8:	f641 73fe 	movw	r3, #8190	; 0x1ffe
   b54ac:	e795      	b.n	b53da <_ZN15Adafruit_LIS3DH4readEv+0xb6>
   b54ae:	bf00      	nop
   b54b0:	00ffff00 	.word	0x00ffff00

000b54b4 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   b54b4:	b570      	push	{r4, r5, r6, lr}
   b54b6:	460c      	mov	r4, r1
   b54b8:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b54ba:	2220      	movs	r2, #32
   b54bc:	2100      	movs	r1, #0
   b54be:	1d20      	adds	r0, r4, #4
   b54c0:	f004 f882 	bl	b95c8 <memset>
  event->version   = sizeof(sensors_event_t);
   b54c4:	2324      	movs	r3, #36	; 0x24
   b54c6:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b54c8:	69ab      	ldr	r3, [r5, #24]
   b54ca:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   b54cc:	2601      	movs	r6, #1
  read();
   b54ce:	4628      	mov	r0, r5
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   b54d0:	60a6      	str	r6, [r4, #8]
  read();
   b54d2:	f7ff ff27 	bl	b5324 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
   b54d6:	68eb      	ldr	r3, [r5, #12]
   b54d8:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   b54da:	692b      	ldr	r3, [r5, #16]
   b54dc:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   b54de:	696b      	ldr	r3, [r5, #20]
   b54e0:	61e3      	str	r3, [r4, #28]
}
   b54e2:	4630      	mov	r0, r6
   b54e4:	bd70      	pop	{r4, r5, r6, pc}

000b54e6 <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   b54e6:	b510      	push	{r4, lr}
   b54e8:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   b54ea:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
   b54ec:	f990 001d 	ldrsb.w	r0, [r0, #29]
   b54f0:	1c42      	adds	r2, r0, #1
   b54f2:	d123      	bne.n	b553c <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
   b54f4:	f003 fc5a 	bl	b8dac <_Z19__fetch_global_Wirev>
   b54f8:	f002 f946 	bl	b7788 <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   b54fc:	210f      	movs	r1, #15
   b54fe:	4620      	mov	r0, r4
   b5500:	f7ff feb6 	bl	b5270 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   b5504:	2833      	cmp	r0, #51	; 0x33
   b5506:	d13d      	bne.n	b5584 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   b5508:	2207      	movs	r2, #7
   b550a:	2120      	movs	r1, #32
   b550c:	4620      	mov	r0, r4
   b550e:	f7ff fe73 	bl	b51f8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
   b5512:	2107      	movs	r1, #7
   b5514:	4620      	mov	r0, r4
   b5516:	f7ff fef4 	bl	b5302 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   b551a:	2288      	movs	r2, #136	; 0x88
   b551c:	2123      	movs	r1, #35	; 0x23
   b551e:	4620      	mov	r0, r4
   b5520:	f7ff fe6a 	bl	b51f8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   b5524:	2210      	movs	r2, #16
   b5526:	2122      	movs	r1, #34	; 0x22
   b5528:	4620      	mov	r0, r4
   b552a:	f7ff fe65 	bl	b51f8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   b552e:	4620      	mov	r0, r4
   b5530:	2280      	movs	r2, #128	; 0x80
   b5532:	211f      	movs	r1, #31
   b5534:	f7ff fe60 	bl	b51f8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
   b5538:	2001      	movs	r0, #1
}
   b553a:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   b553c:	2101      	movs	r1, #1
   b553e:	b280      	uxth	r0, r0
   b5540:	f003 fbdb 	bl	b8cfa <digitalWrite>
    pinMode(_cs, OUTPUT);
   b5544:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5548:	2101      	movs	r1, #1
   b554a:	b280      	uxth	r0, r0
   b554c:	f003 fbc4 	bl	b8cd8 <pinMode>
    if (_sck == -1) {
   b5550:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5554:	1c43      	adds	r3, r0, #1
   b5556:	d104      	bne.n	b5562 <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
   b5558:	f7ff fde6 	bl	b5128 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b555c:	f002 fb5a 	bl	b7c14 <_ZN8SPIClass5beginEv>
    }
   b5560:	e7cc      	b.n	b54fc <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
   b5562:	2101      	movs	r1, #1
   b5564:	b280      	uxth	r0, r0
   b5566:	f003 fbb7 	bl	b8cd8 <pinMode>
      pinMode(_mosi, OUTPUT);
   b556a:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b556e:	2101      	movs	r1, #1
   b5570:	b280      	uxth	r0, r0
   b5572:	f003 fbb1 	bl	b8cd8 <pinMode>
      pinMode(_miso, INPUT);
   b5576:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b557a:	2100      	movs	r1, #0
   b557c:	b280      	uxth	r0, r0
   b557e:	f003 fbab 	bl	b8cd8 <pinMode>
   b5582:	e7bb      	b.n	b54fc <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
   b5584:	2000      	movs	r0, #0
   b5586:	e7d8      	b.n	b553a <_ZN15Adafruit_LIS3DH5beginEh+0x54>

000b5588 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
size_t Print::print(T n, int base)
   b5588:	b570      	push	{r4, r5, r6, lr}
        if (n < 0 && base == 10) {
   b558a:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b558c:	4606      	mov	r6, r0
   b558e:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b5590:	da0b      	bge.n	b55aa <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b5592:	2a0a      	cmp	r2, #10
   b5594:	d109      	bne.n	b55aa <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b5596:	212d      	movs	r1, #45	; 0x2d
   b5598:	f002 faaa 	bl	b7af0 <_ZN5Print5printEc>
            val = -n;
   b559c:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b559e:	b2ea      	uxtb	r2, r5
   b55a0:	4630      	mov	r0, r6
    }
}
   b55a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b55a6:	f002 bac2 	b.w	b7b2e <_ZN5Print11printNumberEmh>
            val = n;
   b55aa:	4621      	mov	r1, r4
   b55ac:	e7f7      	b.n	b559e <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b55ae <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b55ae:	b510      	push	{r4, lr}
   b55b0:	4604      	mov	r4, r0
   b55b2:	f003 f839 	bl	b8628 <_ZN9TCPClientC1Ev>
{

}
   b55b6:	4620      	mov	r0, r4
   b55b8:	bd10      	pop	{r4, pc}
	...

000b55bc <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b55bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   b55be:	4f0f      	ldr	r7, [pc, #60]	; (b55fc <_ZN10HttpClient10sendHeaderEPKcS1_+0x40>)
{
   b55c0:	4605      	mov	r5, r0
   b55c2:	4614      	mov	r4, r2
   b55c4:	460e      	mov	r6, r1
    client.print(aHeaderName);
   b55c6:	f002 fa8f 	bl	b7ae8 <_ZN5Print5printEPKc>
    client.print(": ");
   b55ca:	4639      	mov	r1, r7
   b55cc:	4628      	mov	r0, r5
   b55ce:	f002 fa8b 	bl	b7ae8 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b55d2:	4621      	mov	r1, r4
   b55d4:	4628      	mov	r0, r5
   b55d6:	f002 faa0 	bl	b7b1a <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.print(aHeaderName);
   b55da:	f003 f997 	bl	b890c <_Z16_fetch_usbserialv>
   b55de:	4631      	mov	r1, r6
   b55e0:	f002 fa82 	bl	b7ae8 <_ZN5Print5printEPKc>
    Serial.print(": ");
   b55e4:	f003 f992 	bl	b890c <_Z16_fetch_usbserialv>
   b55e8:	4639      	mov	r1, r7
   b55ea:	f002 fa7d 	bl	b7ae8 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   b55ee:	f003 f98d 	bl	b890c <_Z16_fetch_usbserialv>
   b55f2:	4621      	mov	r1, r4
    #endif
}
   b55f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(aHeaderValue);
   b55f8:	f002 ba8f 	b.w	b7b1a <_ZN5Print7printlnEPKc>
   b55fc:	000b98b4 	.word	0x000b98b4

000b5600 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b5600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   b5602:	4f14      	ldr	r7, [pc, #80]	; (b5654 <_ZN10HttpClient10sendHeaderEPKci+0x54>)
{
   b5604:	4604      	mov	r4, r0
   b5606:	4615      	mov	r5, r2
   b5608:	460e      	mov	r6, r1
    client.print(aHeaderName);
   b560a:	f002 fa6d 	bl	b7ae8 <_ZN5Print5printEPKc>
    client.print(": ");
   b560e:	4639      	mov	r1, r7
   b5610:	4620      	mov	r0, r4
   b5612:	f002 fa69 	bl	b7ae8 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b5616:	220a      	movs	r2, #10
   b5618:	4629      	mov	r1, r5
   b561a:	4620      	mov	r0, r4
   b561c:	f7ff ffb4 	bl	b5588 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b5620:	4620      	mov	r0, r4
   b5622:	f002 fa6e 	bl	b7b02 <_ZN5Print7printlnEv>
    client.println(aHeaderValue);

    #ifdef LOGGING
    Serial.print(aHeaderName);
   b5626:	f003 f971 	bl	b890c <_Z16_fetch_usbserialv>
   b562a:	4631      	mov	r1, r6
   b562c:	f002 fa5c 	bl	b7ae8 <_ZN5Print5printEPKc>
    Serial.print(": ");
   b5630:	f003 f96c 	bl	b890c <_Z16_fetch_usbserialv>
   b5634:	4639      	mov	r1, r7
   b5636:	f002 fa57 	bl	b7ae8 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   b563a:	f003 f967 	bl	b890c <_Z16_fetch_usbserialv>
   b563e:	4629      	mov	r1, r5
   b5640:	4604      	mov	r4, r0
size_t Print::print(T n, int base)
   b5642:	220a      	movs	r2, #10
   b5644:	f7ff ffa0 	bl	b5588 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b5648:	4620      	mov	r0, r4
    #endif
}
   b564a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b564e:	f002 ba58 	b.w	b7b02 <_ZN5Print7printlnEv>
   b5652:	bf00      	nop
   b5654:	000b98b4 	.word	0x000b98b4

000b5658 <_ZN10HttpClient10sendHeaderEPKc>:

void HttpClient::sendHeader(const char* aHeaderName)
{
   b5658:	b510      	push	{r4, lr}
   b565a:	460c      	mov	r4, r1
    client.println(aHeaderName);
   b565c:	f002 fa5d 	bl	b7b1a <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.println(aHeaderName);
   b5660:	f003 f954 	bl	b890c <_Z16_fetch_usbserialv>
   b5664:	4621      	mov	r1, r4
    #endif
}
   b5666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(aHeaderName);
   b566a:	f002 ba56 	b.w	b7b1a <_ZN5Print7printlnEPKc>
	...

000b5670 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b5670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5674:	460e      	mov	r6, r1
   b5676:	b091      	sub	sp, #68	; 0x44
   b5678:	461f      	mov	r7, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b567a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b567e:	6013      	str	r3, [r2, #0]
{
   b5680:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5682:	2100      	movs	r1, #0
   b5684:	4630      	mov	r0, r6
   b5686:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b568a:	4690      	mov	r8, r2
   b568c:	f002 fc56 	bl	b7f3c <_ZNK6String6equalsEPKc>
   b5690:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b5694:	4603      	mov	r3, r0
   b5696:	b9c0      	cbnz	r0, b56ca <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x5a>
	const char * c_str() const { return buffer; }
   b5698:	f1be 0f00 	cmp.w	lr, #0
   b569c:	bf14      	ite	ne
   b569e:	4672      	movne	r2, lr
   b56a0:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b56a2:	6831      	ldr	r1, [r6, #0]
   b56a4:	b292      	uxth	r2, r2
   b56a6:	4620      	mov	r0, r4
   b56a8:	f002 fdbe 	bl	b8228 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b56ac:	1e05      	subs	r5, r0, #0
   b56ae:	bf18      	it	ne
   b56b0:	2501      	movne	r5, #1
    }

    #ifdef LOGGING
    if (connected) {
   b56b2:	b9ed      	cbnz	r5, b56f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x80>
            Serial.print(aRequest.ip);
        }
        Serial.print(":");
        Serial.println(aRequest.port);
    } else {
        Serial.println("HttpClient>\tConnection failed.");
   b56b4:	f003 f92a 	bl	b890c <_Z16_fetch_usbserialv>
   b56b8:	49be      	ldr	r1, [pc, #760]	; (b59b4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x344>)
   b56ba:	f002 fa2e 	bl	b7b1a <_ZN5Print7printlnEPKc>
    }
    #endif

    if (!connected) {
        client.stop();
   b56be:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b56c0:	b011      	add	sp, #68	; 0x44
   b56c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b56c6:	f002 bf65 	b.w	b8594 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b56ca:	4bbb      	ldr	r3, [pc, #748]	; (b59b8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x348>)
   b56cc:	930a      	str	r3, [sp, #40]	; 0x28
   b56ce:	f106 0c14 	add.w	ip, r6, #20
   b56d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b56d6:	ad0b      	add	r5, sp, #44	; 0x2c
   b56d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b56da:	f8dc 3000 	ldr.w	r3, [ip]
   b56de:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b56e0:	fa1f f28e 	uxth.w	r2, lr
   b56e4:	2300      	movs	r3, #0
   b56e6:	a90a      	add	r1, sp, #40	; 0x28
   b56e8:	4620      	mov	r0, r4
   b56ea:	f002 fe7d 	bl	b83e8 <_ZN9TCPClient7connectE9IPAddresstm>
   b56ee:	e7dd      	b.n	b56ac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b56f0:	2100      	movs	r1, #0
   b56f2:	4630      	mov	r0, r6
   b56f4:	f002 fc22 	bl	b7f3c <_ZNK6String6equalsEPKc>
        if(aRequest.hostname!=NULL) {
   b56f8:	2800      	cmp	r0, #0
   b56fa:	d15d      	bne.n	b57b8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x148>
            Serial.print("HttpClient>\tConnecting to: ");
   b56fc:	f003 f906 	bl	b890c <_Z16_fetch_usbserialv>
   b5700:	49ae      	ldr	r1, [pc, #696]	; (b59bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x34c>)
   b5702:	f002 f9f1 	bl	b7ae8 <_ZN5Print5printEPKc>
            Serial.print(aRequest.hostname);
   b5706:	f003 f901 	bl	b890c <_Z16_fetch_usbserialv>
   b570a:	6831      	ldr	r1, [r6, #0]
   b570c:	f002 f9ec 	bl	b7ae8 <_ZN5Print5printEPKc>
        Serial.print(":");
   b5710:	f003 f8fc 	bl	b890c <_Z16_fetch_usbserialv>
   b5714:	49aa      	ldr	r1, [pc, #680]	; (b59c0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   b5716:	f002 f9e7 	bl	b7ae8 <_ZN5Print5printEPKc>
        Serial.println(aRequest.port);
   b571a:	f003 f8f7 	bl	b890c <_Z16_fetch_usbserialv>
   b571e:	220a      	movs	r2, #10
   b5720:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   b5722:	4682      	mov	sl, r0
size_t Print::print(T n, int base)
   b5724:	f7ff ff30 	bl	b5588 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b5728:	4650      	mov	r0, sl
   b572a:	f002 f9ea 	bl	b7b02 <_ZN5Print7printlnEv>
    client.print(aHttpMethod);
   b572e:	4649      	mov	r1, r9
   b5730:	4620      	mov	r0, r4
   b5732:	f002 f9d9 	bl	b7ae8 <_ZN5Print5printEPKc>
    client.print(" ");
   b5736:	49a3      	ldr	r1, [pc, #652]	; (b59c4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   b5738:	4620      	mov	r0, r4
   b573a:	f002 f9d5 	bl	b7ae8 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b573e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b5740:	4620      	mov	r0, r4
   b5742:	f002 f9d1 	bl	b7ae8 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b5746:	49a0      	ldr	r1, [pc, #640]	; (b59c8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   b5748:	4620      	mov	r0, r4
   b574a:	f002 f9cd 	bl	b7ae8 <_ZN5Print5printEPKc>
    Serial.println("HttpClient>\tStart of HTTP Request.");
   b574e:	f003 f8dd 	bl	b890c <_Z16_fetch_usbserialv>
   b5752:	499e      	ldr	r1, [pc, #632]	; (b59cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x35c>)
   b5754:	f002 f9e1 	bl	b7b1a <_ZN5Print7printlnEPKc>
    Serial.print(aHttpMethod);
   b5758:	f003 f8d8 	bl	b890c <_Z16_fetch_usbserialv>
   b575c:	4649      	mov	r1, r9
   b575e:	f002 f9c3 	bl	b7ae8 <_ZN5Print5printEPKc>
    Serial.print(" ");
   b5762:	f003 f8d3 	bl	b890c <_Z16_fetch_usbserialv>
   b5766:	4997      	ldr	r1, [pc, #604]	; (b59c4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   b5768:	f002 f9be 	bl	b7ae8 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
   b576c:	f003 f8ce 	bl	b890c <_Z16_fetch_usbserialv>
   b5770:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b5772:	f002 f9b9 	bl	b7ae8 <_ZN5Print5printEPKc>
    Serial.print(" HTTP/1.0\r\n");
   b5776:	f003 f8c9 	bl	b890c <_Z16_fetch_usbserialv>
   b577a:	4993      	ldr	r1, [pc, #588]	; (b59c8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   b577c:	f002 f9b4 	bl	b7ae8 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b5780:	4993      	ldr	r1, [pc, #588]	; (b59d0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x360>)
   b5782:	4a94      	ldr	r2, [pc, #592]	; (b59d4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x364>)
   b5784:	4620      	mov	r0, r4
   b5786:	f7ff ff19 	bl	b55bc <_ZN10HttpClient10sendHeaderEPKcS1_>
   b578a:	2100      	movs	r1, #0
   b578c:	4630      	mov	r0, r6
   b578e:	f002 fbd5 	bl	b7f3c <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b5792:	b920      	cbnz	r0, b579e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x12e>
        sendHeader("HOST", aRequest.hostname.c_str());
   b5794:	6832      	ldr	r2, [r6, #0]
   b5796:	4990      	ldr	r1, [pc, #576]	; (b59d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x368>)
   b5798:	4620      	mov	r0, r4
   b579a:	f7ff ff0f 	bl	b55bc <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b579e:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b57a2:	2100      	movs	r1, #0
   b57a4:	4650      	mov	r0, sl
   b57a6:	f002 fbc9 	bl	b7f3c <_ZNK6String6equalsEPKc>
   b57aa:	b988      	cbnz	r0, b57d0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x160>
        sendHeader("Content-Length", (aRequest.body).length());
   b57ac:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b57ae:	498b      	ldr	r1, [pc, #556]	; (b59dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x36c>)
   b57b0:	4620      	mov	r0, r4
   b57b2:	f7ff ff25 	bl	b5600 <_ZN10HttpClient10sendHeaderEPKci>
   b57b6:	e012      	b.n	b57de <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16e>
            Serial.print("HttpClient>\tConnecting to IP: ");
   b57b8:	f003 f8a8 	bl	b890c <_Z16_fetch_usbserialv>
   b57bc:	4988      	ldr	r1, [pc, #544]	; (b59e0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x370>)
   b57be:	f002 f993 	bl	b7ae8 <_ZN5Print5printEPKc>
            Serial.print(aRequest.ip);
   b57c2:	f003 f8a3 	bl	b890c <_Z16_fetch_usbserialv>
   b57c6:	f106 0110 	add.w	r1, r6, #16
   b57ca:	f002 f994 	bl	b7af6 <_ZN5Print5printERK9Printable>
   b57ce:	e79f      	b.n	b5710 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xa0>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b57d0:	4984      	ldr	r1, [pc, #528]	; (b59e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x374>)
   b57d2:	4648      	mov	r0, r9
   b57d4:	f003 ff2e 	bl	b9634 <strcmp>
   b57d8:	4602      	mov	r2, r0
   b57da:	2800      	cmp	r0, #0
   b57dc:	d0e7      	beq.n	b57ae <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x13e>
    if (headers != NULL)
   b57de:	b15f      	cbz	r7, b57f8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x188>
        while (headers[i].header != NULL)
   b57e0:	6839      	ldr	r1, [r7, #0]
   b57e2:	b149      	cbz	r1, b57f8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x188>
            if (headers[i].value != NULL) {
   b57e4:	687a      	ldr	r2, [r7, #4]
                sendHeader(headers[i].header, headers[i].value);
   b57e6:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b57e8:	b11a      	cbz	r2, b57f2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
                sendHeader(headers[i].header, headers[i].value);
   b57ea:	f7ff fee7 	bl	b55bc <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b57ee:	3708      	adds	r7, #8
        while (headers[i].header != NULL)
   b57f0:	e7f6      	b.n	b57e0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
                sendHeader(headers[i].header);
   b57f2:	f7ff ff31 	bl	b5658 <_ZN10HttpClient10sendHeaderEPKc>
   b57f6:	e7fa      	b.n	b57ee <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17e>
    client.println();
   b57f8:	4620      	mov	r0, r4
   b57fa:	f002 f982 	bl	b7b02 <_ZN5Print7printlnEv>
    client.flush();
   b57fe:	4620      	mov	r0, r4
   b5800:	f002 fc72 	bl	b80e8 <_ZN9TCPClient5flushEv>
   b5804:	2100      	movs	r1, #0
   b5806:	4650      	mov	r0, sl
   b5808:	f002 fb98 	bl	b7f3c <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b580c:	b940      	cbnz	r0, b5820 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b0>
        client.println(aRequest.body);
   b580e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b5810:	4620      	mov	r0, r4
   b5812:	f002 f982 	bl	b7b1a <_ZN5Print7printlnEPKc>
        Serial.println(aRequest.body);
   b5816:	f003 f879 	bl	b890c <_Z16_fetch_usbserialv>
   b581a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b581c:	f002 f97d 	bl	b7b1a <_ZN5Print7printlnEPKc>
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   b5820:	f003 f874 	bl	b890c <_Z16_fetch_usbserialv>
    memset(&buffer[0], 0, sizeof(buffer));
   b5824:	f104 0a1c 	add.w	sl, r4, #28
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   b5828:	496f      	ldr	r1, [pc, #444]	; (b59e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x378>)
   b582a:	f002 f976 	bl	b7b1a <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b582e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5832:	2100      	movs	r1, #0
   b5834:	4650      	mov	r0, sl
   b5836:	f003 fec7 	bl	b95c8 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b583a:	f000 f9b7 	bl	b5bac <HAL_Timer_Get_Milli_Seconds>
   b583e:	9000      	str	r0, [sp, #0]
   b5840:	f000 f9b4 	bl	b5bac <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
   b5844:	2600      	movs	r6, #0
   b5846:	9001      	str	r0, [sp, #4]
        int bytes = client.available();
   b5848:	4620      	mov	r0, r4
   b584a:	f002 fe49 	bl	b84e0 <_ZN9TCPClient9availableEv>
        if(bytes) {
   b584e:	4681      	mov	r9, r0
   b5850:	b178      	cbz	r0, b5872 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x202>
            Serial.print("\r\nHttpClient>\tReceiving TCP transaction of ");
   b5852:	f003 f85b 	bl	b890c <_Z16_fetch_usbserialv>
   b5856:	4965      	ldr	r1, [pc, #404]	; (b59ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x37c>)
   b5858:	f002 f946 	bl	b7ae8 <_ZN5Print5printEPKc>
            Serial.print(bytes);
   b585c:	f003 f856 	bl	b890c <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   b5860:	4649      	mov	r1, r9
   b5862:	220a      	movs	r2, #10
   b5864:	f7ff fe90 	bl	b5588 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
            Serial.println(" bytes.");
   b5868:	f003 f850 	bl	b890c <_Z16_fetch_usbserialv>
   b586c:	4960      	ldr	r1, [pc, #384]	; (b59f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x380>)
   b586e:	f002 f954 	bl	b7b1a <_ZN5Print7printlnEPKc>
    unsigned int bufferPosition = 0;
   b5872:	f04f 0b00 	mov.w	fp, #0
        while (client.available()) {
   b5876:	4620      	mov	r0, r4
   b5878:	f002 fe32 	bl	b84e0 <_ZN9TCPClient9availableEv>
   b587c:	b320      	cbz	r0, b58c8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x258>
            char c = client.read();
   b587e:	4620      	mov	r0, r4
   b5880:	f002 fc18 	bl	b80b4 <_ZN9TCPClient4readEv>
   b5884:	b2c7      	uxtb	r7, r0
            Serial.print(c);
   b5886:	f003 f841 	bl	b890c <_Z16_fetch_usbserialv>
   b588a:	4639      	mov	r1, r7
   b588c:	f002 f930 	bl	b7af0 <_ZN5Print5printEc>
   b5890:	f000 f98c 	bl	b5bac <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b5894:	f240 33fe 	movw	r3, #1022	; 0x3fe
   b5898:	429e      	cmp	r6, r3
   b589a:	9000      	str	r0, [sp, #0]
   b589c:	d803      	bhi.n	b58a6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x236>
                buffer[bufferPosition] = c;
   b589e:	f80a 7006 	strb.w	r7, [sl, r6]
            bufferPosition++;
   b58a2:	3601      	adds	r6, #1
        while (client.available()) {
   b58a4:	e7e7      	b.n	b5876 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x206>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b58a6:	f240 33ff 	movw	r3, #1023	; 0x3ff
   b58aa:	429e      	cmp	r6, r3
   b58ac:	d1f9      	bne.n	b58a2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x232>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b58ae:	2300      	movs	r3, #0
   b58b0:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   b58b4:	4620      	mov	r0, r4
   b58b6:	f002 fe6d 	bl	b8594 <_ZN9TCPClient4stopEv>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
   b58ba:	f003 f827 	bl	b890c <_Z16_fetch_usbserialv>
   b58be:	494d      	ldr	r1, [pc, #308]	; (b59f4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x384>)
   b58c0:	f002 f92b 	bl	b7b1a <_ZN5Print7printlnEPKc>
                error = true;
   b58c4:	46ab      	mov	fp, r5
   b58c6:	e7ec      	b.n	b58a2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x232>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b58c8:	19a3      	adds	r3, r4, r6
   b58ca:	7718      	strb	r0, [r3, #28]
        if (bytes) {
   b58cc:	f1b9 0f00 	cmp.w	r9, #0
   b58d0:	d004      	beq.n	b58dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x26c>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
   b58d2:	f003 f81b 	bl	b890c <_Z16_fetch_usbserialv>
   b58d6:	4948      	ldr	r1, [pc, #288]	; (b59f8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x388>)
   b58d8:	f002 f906 	bl	b7ae8 <_ZN5Print5printEPKc>
   b58dc:	f000 f966 	bl	b5bac <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b58e0:	9b00      	ldr	r3, [sp, #0]
   b58e2:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b58e6:	f1bb 0f00 	cmp.w	fp, #0
   b58ea:	d106      	bne.n	b58fa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x28a>
   b58ec:	f241 3388 	movw	r3, #5000	; 0x1388
   b58f0:	4599      	cmp	r9, r3
   b58f2:	d802      	bhi.n	b58fa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x28a>
            delay(200);
   b58f4:	20c8      	movs	r0, #200	; 0xc8
   b58f6:	f000 fc7f 	bl	b61f8 <delay>
    } while (client.connected() && !timeout && !error);
   b58fa:	4620      	mov	r0, r4
   b58fc:	f002 fd12 	bl	b8324 <_ZN9TCPClient9connectedEv>
   b5900:	f241 3388 	movw	r3, #5000	; 0x1388
   b5904:	2800      	cmp	r0, #0
   b5906:	d04c      	beq.n	b59a2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x332>
   b5908:	4599      	cmp	r9, r3
   b590a:	d84c      	bhi.n	b59a6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x336>
   b590c:	f1bb 0f00 	cmp.w	fp, #0
   b5910:	d09a      	beq.n	b5848 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d8>
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
   b5912:	f002 fffb 	bl	b890c <_Z16_fetch_usbserialv>
   b5916:	4939      	ldr	r1, [pc, #228]	; (b59fc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x38c>)
   b5918:	f002 f8e6 	bl	b7ae8 <_ZN5Print5printEPKc>
    Serial.print(millis() - firstRead);
   b591c:	f002 fff6 	bl	b890c <_Z16_fetch_usbserialv>
   b5920:	4605      	mov	r5, r0
   b5922:	f000 f943 	bl	b5bac <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   b5926:	9b01      	ldr	r3, [sp, #4]
   b5928:	220a      	movs	r2, #10
   b592a:	1ac1      	subs	r1, r0, r3
   b592c:	4628      	mov	r0, r5
   b592e:	f002 f8fe 	bl	b7b2e <_ZN5Print11printNumberEmh>
    Serial.println("ms).");
   b5932:	f002 ffeb 	bl	b890c <_Z16_fetch_usbserialv>
   b5936:	4932      	ldr	r1, [pc, #200]	; (b5a00 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x390>)
   b5938:	f002 f8ef 	bl	b7b1a <_ZN5Print7printlnEPKc>
    client.stop();
   b593c:	4620      	mov	r0, r4
   b593e:	f002 fe29 	bl	b8594 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b5942:	4651      	mov	r1, sl
   b5944:	a802      	add	r0, sp, #8
   b5946:	f002 fa3a 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b594a:	230c      	movs	r3, #12
   b594c:	2209      	movs	r2, #9
   b594e:	a902      	add	r1, sp, #8
   b5950:	a806      	add	r0, sp, #24
   b5952:	f002 fb17 	bl	b7f84 <_ZNK6String9substringEjj>
    Serial.print("HttpClient>\tStatus Code: ");
   b5956:	f002 ffd9 	bl	b890c <_Z16_fetch_usbserialv>
   b595a:	492a      	ldr	r1, [pc, #168]	; (b5a04 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x394>)
   b595c:	f002 f8c4 	bl	b7ae8 <_ZN5Print5printEPKc>
    Serial.println(statusCode);
   b5960:	f002 ffd4 	bl	b890c <_Z16_fetch_usbserialv>
   b5964:	9906      	ldr	r1, [sp, #24]
   b5966:	f002 f8d8 	bl	b7b1a <_ZN5Print7printlnEPKc>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b596a:	4927      	ldr	r1, [pc, #156]	; (b5a08 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x398>)
   b596c:	a80a      	add	r0, sp, #40	; 0x28
   b596e:	f002 fa26 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
   b5972:	a90a      	add	r1, sp, #40	; 0x28
   b5974:	a802      	add	r0, sp, #8
   b5976:	f002 fb02 	bl	b7f7e <_ZNK6String7indexOfERKS_>
   b597a:	4604      	mov	r4, r0
   b597c:	a80a      	add	r0, sp, #40	; 0x28
   b597e:	f002 f9d3 	bl	b7d28 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b5982:	1c63      	adds	r3, r4, #1
   b5984:	d146      	bne.n	b5a14 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a4>
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
   b5986:	f002 ffc1 	bl	b890c <_Z16_fetch_usbserialv>
   b598a:	4920      	ldr	r1, [pc, #128]	; (b5a0c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x39c>)
   b598c:	f002 f8c5 	bl	b7b1a <_ZN5Print7printlnEPKc>
    String statusCode = raw_response.substring(9,12);
   b5990:	a806      	add	r0, sp, #24
   b5992:	f002 f9c9 	bl	b7d28 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b5996:	a802      	add	r0, sp, #8
   b5998:	f002 f9c6 	bl	b7d28 <_ZN6StringD1Ev>
}
   b599c:	b011      	add	sp, #68	; 0x44
   b599e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (timeout) {
   b59a2:	4599      	cmp	r9, r3
   b59a4:	d9b5      	bls.n	b5912 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2a2>
        Serial.println("\r\nHttpClient>\tError: Timeout while reading response.");
   b59a6:	f002 ffb1 	bl	b890c <_Z16_fetch_usbserialv>
   b59aa:	4919      	ldr	r1, [pc, #100]	; (b5a10 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a0>)
   b59ac:	f002 f8b5 	bl	b7b1a <_ZN5Print7printlnEPKc>
   b59b0:	e7af      	b.n	b5912 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2a2>
   b59b2:	bf00      	nop
   b59b4:	000b9da3 	.word	0x000b9da3
   b59b8:	000ba12c 	.word	0x000ba12c
   b59bc:	000b9d28 	.word	0x000b9d28
   b59c0:	000b9be2 	.word	0x000b9be2
   b59c4:	000b98b5 	.word	0x000b98b5
   b59c8:	000b9d63 	.word	0x000b9d63
   b59cc:	000b9d6f 	.word	0x000b9d6f
   b59d0:	000b9d98 	.word	0x000b9d98
   b59d4:	000b9d92 	.word	0x000b9d92
   b59d8:	000b9dc2 	.word	0x000b9dc2
   b59dc:	000b9dc7 	.word	0x000b9dc7
   b59e0:	000b9d44 	.word	0x000b9d44
   b59e4:	000b9c57 	.word	0x000b9c57
   b59e8:	000b9dd6 	.word	0x000b9dd6
   b59ec:	000b9df7 	.word	0x000b9df7
   b59f0:	000b9e23 	.word	0x000b9e23
   b59f4:	000b9e2b 	.word	0x000b9e2b
   b59f8:	000b9e60 	.word	0x000b9e60
   b59fc:	000b9ebb 	.word	0x000b9ebb
   b5a00:	000b9ee0 	.word	0x000b9ee0
   b5a04:	000b9ee5 	.word	0x000b9ee5
   b5a08:	000b9eff 	.word	0x000b9eff
   b5a0c:	000b9f04 	.word	0x000b9f04
   b5a10:	000b9e86 	.word	0x000b9e86
    aResponse.body = "";
   b5a14:	f108 0504 	add.w	r5, r8, #4
   b5a18:	490a      	ldr	r1, [pc, #40]	; (b5a44 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3d4>)
   b5a1a:	4628      	mov	r0, r5
   b5a1c:	f002 f9f2 	bl	b7e04 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b5a20:	1d22      	adds	r2, r4, #4
   b5a22:	a902      	add	r1, sp, #8
   b5a24:	a80a      	add	r0, sp, #40	; 0x28
   b5a26:	f002 facd 	bl	b7fc4 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5a2a:	a90a      	add	r1, sp, #40	; 0x28
   b5a2c:	4628      	mov	r0, r5
   b5a2e:	f002 fa38 	bl	b7ea2 <_ZN6String6concatERKS_>
   b5a32:	a80a      	add	r0, sp, #40	; 0x28
   b5a34:	f002 f978 	bl	b7d28 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b5a38:	9806      	ldr	r0, [sp, #24]
   b5a3a:	f003 fd67 	bl	b950c <atoi>
   b5a3e:	f8c8 0000 	str.w	r0, [r8]
   b5a42:	e7a5      	b.n	b5990 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x320>
   b5a44:	000b9903 	.word	0x000b9903

000b5a48 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b5a48:	b508      	push	{r3, lr}
   b5a4a:	4b02      	ldr	r3, [pc, #8]	; (b5a54 <hal_ble_stack_init+0xc>)
   b5a4c:	681b      	ldr	r3, [r3, #0]
   b5a4e:	689b      	ldr	r3, [r3, #8]
   b5a50:	9301      	str	r3, [sp, #4]
   b5a52:	bd08      	pop	{r3, pc}
   b5a54:	00030278 	.word	0x00030278

000b5a58 <hal_ble_stack_deinit>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
   b5a58:	b508      	push	{r3, lr}
   b5a5a:	4b02      	ldr	r3, [pc, #8]	; (b5a64 <hal_ble_stack_deinit+0xc>)
   b5a5c:	681b      	ldr	r3, [r3, #0]
   b5a5e:	68db      	ldr	r3, [r3, #12]
   b5a60:	9301      	str	r3, [sp, #4]
   b5a62:	bd08      	pop	{r3, pc}
   b5a64:	00030278 	.word	0x00030278

000b5a68 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b5a68:	b508      	push	{r3, lr}
   b5a6a:	4b02      	ldr	r3, [pc, #8]	; (b5a74 <hal_ble_gap_set_advertising_data+0xc>)
   b5a6c:	681b      	ldr	r3, [r3, #0]
   b5a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5a70:	9301      	str	r3, [sp, #4]
   b5a72:	bd08      	pop	{r3, pc}
   b5a74:	00030278 	.word	0x00030278

000b5a78 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b5a78:	b508      	push	{r3, lr}
   b5a7a:	4b02      	ldr	r3, [pc, #8]	; (b5a84 <hal_ble_gap_set_scan_response_data+0xc>)
   b5a7c:	681b      	ldr	r3, [r3, #0]
   b5a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5a80:	9301      	str	r3, [sp, #4]
   b5a82:	bd08      	pop	{r3, pc}
   b5a84:	00030278 	.word	0x00030278

000b5a88 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b5a88:	b508      	push	{r3, lr}
   b5a8a:	4b02      	ldr	r3, [pc, #8]	; (b5a94 <hal_ble_gap_start_advertising+0xc>)
   b5a8c:	681b      	ldr	r3, [r3, #0]
   b5a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b5a90:	9301      	str	r3, [sp, #4]
   b5a92:	bd08      	pop	{r3, pc}
   b5a94:	00030278 	.word	0x00030278

000b5a98 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b5a98:	b508      	push	{r3, lr}
   b5a9a:	4b03      	ldr	r3, [pc, #12]	; (b5aa8 <hal_ble_gap_disconnect+0x10>)
   b5a9c:	681b      	ldr	r3, [r3, #0]
   b5a9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b5aa2:	9301      	str	r3, [sp, #4]
   b5aa4:	bd08      	pop	{r3, pc}
   b5aa6:	0000      	.short	0x0000
   b5aa8:	00030278 	.word	0x00030278

000b5aac <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b5aac:	b508      	push	{r3, lr}
   b5aae:	4b03      	ldr	r3, [pc, #12]	; (b5abc <hal_ble_gatt_server_add_service+0x10>)
   b5ab0:	681b      	ldr	r3, [r3, #0]
   b5ab2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b5ab6:	9301      	str	r3, [sp, #4]
   b5ab8:	bd08      	pop	{r3, pc}
   b5aba:	0000      	.short	0x0000
   b5abc:	00030278 	.word	0x00030278

000b5ac0 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5ac0:	b508      	push	{r3, lr}
   b5ac2:	4b03      	ldr	r3, [pc, #12]	; (b5ad0 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b5ac4:	681b      	ldr	r3, [r3, #0]
   b5ac6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b5aca:	9301      	str	r3, [sp, #4]
   b5acc:	bd08      	pop	{r3, pc}
   b5ace:	0000      	.short	0x0000
   b5ad0:	00030278 	.word	0x00030278

000b5ad4 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5ad4:	b508      	push	{r3, lr}
   b5ad6:	4b03      	ldr	r3, [pc, #12]	; (b5ae4 <hal_ble_gatt_client_write_with_response+0x10>)
   b5ad8:	681b      	ldr	r3, [r3, #0]
   b5ada:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b5ade:	9301      	str	r3, [sp, #4]
   b5ae0:	bd08      	pop	{r3, pc}
   b5ae2:	0000      	.short	0x0000
   b5ae4:	00030278 	.word	0x00030278

000b5ae8 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5ae8:	b508      	push	{r3, lr}
   b5aea:	4b03      	ldr	r3, [pc, #12]	; (b5af8 <hal_ble_gatt_client_write_without_response+0x10>)
   b5aec:	681b      	ldr	r3, [r3, #0]
   b5aee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b5af2:	9301      	str	r3, [sp, #4]
   b5af4:	bd08      	pop	{r3, pc}
   b5af6:	0000      	.short	0x0000
   b5af8:	00030278 	.word	0x00030278

000b5afc <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b5afc:	b508      	push	{r3, lr}
   b5afe:	4b03      	ldr	r3, [pc, #12]	; (b5b0c <hal_ble_gatt_server_add_characteristic+0x10>)
   b5b00:	681b      	ldr	r3, [r3, #0]
   b5b02:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b5b06:	9301      	str	r3, [sp, #4]
   b5b08:	bd08      	pop	{r3, pc}
   b5b0a:	0000      	.short	0x0000
   b5b0c:	00030278 	.word	0x00030278

000b5b10 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b5b10:	b508      	push	{r3, lr}
   b5b12:	4b03      	ldr	r3, [pc, #12]	; (b5b20 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b5b14:	681b      	ldr	r3, [r3, #0]
   b5b16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b5b1a:	9301      	str	r3, [sp, #4]
   b5b1c:	bd08      	pop	{r3, pc}
   b5b1e:	0000      	.short	0x0000
   b5b20:	00030278 	.word	0x00030278

000b5b24 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5b24:	b508      	push	{r3, lr}
   b5b26:	4b03      	ldr	r3, [pc, #12]	; (b5b34 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b5b28:	681b      	ldr	r3, [r3, #0]
   b5b2a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b5b2e:	9301      	str	r3, [sp, #4]
   b5b30:	bd08      	pop	{r3, pc}
   b5b32:	0000      	.short	0x0000
   b5b34:	00030278 	.word	0x00030278

000b5b38 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5b38:	b508      	push	{r3, lr}
   b5b3a:	4b03      	ldr	r3, [pc, #12]	; (b5b48 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b5b3c:	681b      	ldr	r3, [r3, #0]
   b5b3e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b5b42:	9301      	str	r3, [sp, #4]
   b5b44:	bd08      	pop	{r3, pc}
   b5b46:	0000      	.short	0x0000
   b5b48:	00030278 	.word	0x00030278

000b5b4c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5b4c:	b508      	push	{r3, lr}
   b5b4e:	4b02      	ldr	r3, [pc, #8]	; (b5b58 <os_mutex_recursive_create+0xc>)
   b5b50:	681b      	ldr	r3, [r3, #0]
   b5b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5b54:	9301      	str	r3, [sp, #4]
   b5b56:	bd08      	pop	{r3, pc}
   b5b58:	00030248 	.word	0x00030248

000b5b5c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b5b5c:	b508      	push	{r3, lr}
   b5b5e:	4b02      	ldr	r3, [pc, #8]	; (b5b68 <os_mutex_recursive_destroy+0xc>)
   b5b60:	681b      	ldr	r3, [r3, #0]
   b5b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5b64:	9301      	str	r3, [sp, #4]
   b5b66:	bd08      	pop	{r3, pc}
   b5b68:	00030248 	.word	0x00030248

000b5b6c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5b6c:	b508      	push	{r3, lr}
   b5b6e:	4b02      	ldr	r3, [pc, #8]	; (b5b78 <os_mutex_recursive_lock+0xc>)
   b5b70:	681b      	ldr	r3, [r3, #0]
   b5b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5b74:	9301      	str	r3, [sp, #4]
   b5b76:	bd08      	pop	{r3, pc}
   b5b78:	00030248 	.word	0x00030248

000b5b7c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5b7c:	b508      	push	{r3, lr}
   b5b7e:	4b02      	ldr	r3, [pc, #8]	; (b5b88 <os_mutex_recursive_unlock+0xc>)
   b5b80:	681b      	ldr	r3, [r3, #0]
   b5b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5b84:	9301      	str	r3, [sp, #4]
   b5b86:	bd08      	pop	{r3, pc}
   b5b88:	00030248 	.word	0x00030248

000b5b8c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5b8c:	b508      	push	{r3, lr}
   b5b8e:	4b02      	ldr	r3, [pc, #8]	; (b5b98 <HAL_RNG_GetRandomNumber+0xc>)
   b5b90:	681b      	ldr	r3, [r3, #0]
   b5b92:	685b      	ldr	r3, [r3, #4]
   b5b94:	9301      	str	r3, [sp, #4]
   b5b96:	bd08      	pop	{r3, pc}
   b5b98:	00030218 	.word	0x00030218

000b5b9c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5b9c:	b508      	push	{r3, lr}
   b5b9e:	4b02      	ldr	r3, [pc, #8]	; (b5ba8 <HAL_Delay_Microseconds+0xc>)
   b5ba0:	681b      	ldr	r3, [r3, #0]
   b5ba2:	68db      	ldr	r3, [r3, #12]
   b5ba4:	9301      	str	r3, [sp, #4]
   b5ba6:	bd08      	pop	{r3, pc}
   b5ba8:	00030218 	.word	0x00030218

000b5bac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5bac:	b508      	push	{r3, lr}
   b5bae:	4b02      	ldr	r3, [pc, #8]	; (b5bb8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5bb0:	681b      	ldr	r3, [r3, #0]
   b5bb2:	695b      	ldr	r3, [r3, #20]
   b5bb4:	9301      	str	r3, [sp, #4]
   b5bb6:	bd08      	pop	{r3, pc}
   b5bb8:	00030218 	.word	0x00030218

000b5bbc <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b5bbc:	b508      	push	{r3, lr}
   b5bbe:	4b02      	ldr	r3, [pc, #8]	; (b5bc8 <HAL_EEPROM_Init+0xc>)
   b5bc0:	681b      	ldr	r3, [r3, #0]
   b5bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5bc4:	9301      	str	r3, [sp, #4]
   b5bc6:	bd08      	pop	{r3, pc}
   b5bc8:	00030218 	.word	0x00030218

000b5bcc <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   b5bcc:	b508      	push	{r3, lr}
   b5bce:	4b02      	ldr	r3, [pc, #8]	; (b5bd8 <HAL_EEPROM_Get+0xc>)
   b5bd0:	681b      	ldr	r3, [r3, #0]
   b5bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5bd4:	9301      	str	r3, [sp, #4]
   b5bd6:	bd08      	pop	{r3, pc}
   b5bd8:	00030218 	.word	0x00030218

000b5bdc <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   b5bdc:	b508      	push	{r3, lr}
   b5bde:	4b02      	ldr	r3, [pc, #8]	; (b5be8 <HAL_EEPROM_Put+0xc>)
   b5be0:	681b      	ldr	r3, [r3, #0]
   b5be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5be4:	9301      	str	r3, [sp, #4]
   b5be6:	bd08      	pop	{r3, pc}
   b5be8:	00030218 	.word	0x00030218

000b5bec <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5bec:	b508      	push	{r3, lr}
   b5bee:	4b02      	ldr	r3, [pc, #8]	; (b5bf8 <hal_rtc_time_is_valid+0xc>)
   b5bf0:	681b      	ldr	r3, [r3, #0]
   b5bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5bf4:	9301      	str	r3, [sp, #4]
   b5bf6:	bd08      	pop	{r3, pc}
   b5bf8:	00030218 	.word	0x00030218

000b5bfc <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5bfc:	b508      	push	{r3, lr}
   b5bfe:	4b02      	ldr	r3, [pc, #8]	; (b5c08 <hal_rtc_get_time+0xc>)
   b5c00:	681b      	ldr	r3, [r3, #0]
   b5c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5c04:	9301      	str	r3, [sp, #4]
   b5c06:	bd08      	pop	{r3, pc}
   b5c08:	00030218 	.word	0x00030218

000b5c0c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5c0c:	b508      	push	{r3, lr}
   b5c0e:	4b02      	ldr	r3, [pc, #8]	; (b5c18 <HAL_Pin_Mode+0xc>)
   b5c10:	681b      	ldr	r3, [r3, #0]
   b5c12:	689b      	ldr	r3, [r3, #8]
   b5c14:	9301      	str	r3, [sp, #4]
   b5c16:	bd08      	pop	{r3, pc}
   b5c18:	0003022c 	.word	0x0003022c

000b5c1c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5c1c:	b508      	push	{r3, lr}
   b5c1e:	4b02      	ldr	r3, [pc, #8]	; (b5c28 <HAL_Get_Pin_Mode+0xc>)
   b5c20:	681b      	ldr	r3, [r3, #0]
   b5c22:	68db      	ldr	r3, [r3, #12]
   b5c24:	9301      	str	r3, [sp, #4]
   b5c26:	bd08      	pop	{r3, pc}
   b5c28:	0003022c 	.word	0x0003022c

000b5c2c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5c2c:	b508      	push	{r3, lr}
   b5c2e:	4b02      	ldr	r3, [pc, #8]	; (b5c38 <HAL_GPIO_Write+0xc>)
   b5c30:	681b      	ldr	r3, [r3, #0]
   b5c32:	691b      	ldr	r3, [r3, #16]
   b5c34:	9301      	str	r3, [sp, #4]
   b5c36:	bd08      	pop	{r3, pc}
   b5c38:	0003022c 	.word	0x0003022c

000b5c3c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5c3c:	b508      	push	{r3, lr}
   b5c3e:	4b02      	ldr	r3, [pc, #8]	; (b5c48 <HAL_GPIO_Read+0xc>)
   b5c40:	681b      	ldr	r3, [r3, #0]
   b5c42:	695b      	ldr	r3, [r3, #20]
   b5c44:	9301      	str	r3, [sp, #4]
   b5c46:	bd08      	pop	{r3, pc}
   b5c48:	0003022c 	.word	0x0003022c

000b5c4c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5c4c:	b508      	push	{r3, lr}
   b5c4e:	4b02      	ldr	r3, [pc, #8]	; (b5c58 <hal_i2c_begin+0xc>)
   b5c50:	681b      	ldr	r3, [r3, #0]
   b5c52:	68db      	ldr	r3, [r3, #12]
   b5c54:	9301      	str	r3, [sp, #4]
   b5c56:	bd08      	pop	{r3, pc}
   b5c58:	00030228 	.word	0x00030228

000b5c5c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5c5c:	b508      	push	{r3, lr}
   b5c5e:	4b02      	ldr	r3, [pc, #8]	; (b5c68 <hal_i2c_begin_transmission+0xc>)
   b5c60:	681b      	ldr	r3, [r3, #0]
   b5c62:	699b      	ldr	r3, [r3, #24]
   b5c64:	9301      	str	r3, [sp, #4]
   b5c66:	bd08      	pop	{r3, pc}
   b5c68:	00030228 	.word	0x00030228

000b5c6c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5c6c:	b508      	push	{r3, lr}
   b5c6e:	4b02      	ldr	r3, [pc, #8]	; (b5c78 <hal_i2c_end_transmission+0xc>)
   b5c70:	681b      	ldr	r3, [r3, #0]
   b5c72:	69db      	ldr	r3, [r3, #28]
   b5c74:	9301      	str	r3, [sp, #4]
   b5c76:	bd08      	pop	{r3, pc}
   b5c78:	00030228 	.word	0x00030228

000b5c7c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5c7c:	b508      	push	{r3, lr}
   b5c7e:	4b02      	ldr	r3, [pc, #8]	; (b5c88 <hal_i2c_write+0xc>)
   b5c80:	681b      	ldr	r3, [r3, #0]
   b5c82:	6a1b      	ldr	r3, [r3, #32]
   b5c84:	9301      	str	r3, [sp, #4]
   b5c86:	bd08      	pop	{r3, pc}
   b5c88:	00030228 	.word	0x00030228

000b5c8c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5c8c:	b508      	push	{r3, lr}
   b5c8e:	4b02      	ldr	r3, [pc, #8]	; (b5c98 <hal_i2c_available+0xc>)
   b5c90:	681b      	ldr	r3, [r3, #0]
   b5c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5c94:	9301      	str	r3, [sp, #4]
   b5c96:	bd08      	pop	{r3, pc}
   b5c98:	00030228 	.word	0x00030228

000b5c9c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5c9c:	b508      	push	{r3, lr}
   b5c9e:	4b02      	ldr	r3, [pc, #8]	; (b5ca8 <hal_i2c_read+0xc>)
   b5ca0:	681b      	ldr	r3, [r3, #0]
   b5ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5ca4:	9301      	str	r3, [sp, #4]
   b5ca6:	bd08      	pop	{r3, pc}
   b5ca8:	00030228 	.word	0x00030228

000b5cac <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5cac:	b508      	push	{r3, lr}
   b5cae:	4b02      	ldr	r3, [pc, #8]	; (b5cb8 <hal_i2c_peek+0xc>)
   b5cb0:	681b      	ldr	r3, [r3, #0]
   b5cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5cb4:	9301      	str	r3, [sp, #4]
   b5cb6:	bd08      	pop	{r3, pc}
   b5cb8:	00030228 	.word	0x00030228

000b5cbc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5cbc:	b508      	push	{r3, lr}
   b5cbe:	4b02      	ldr	r3, [pc, #8]	; (b5cc8 <hal_i2c_flush+0xc>)
   b5cc0:	681b      	ldr	r3, [r3, #0]
   b5cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5cc4:	9301      	str	r3, [sp, #4]
   b5cc6:	bd08      	pop	{r3, pc}
   b5cc8:	00030228 	.word	0x00030228

000b5ccc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5ccc:	b508      	push	{r3, lr}
   b5cce:	4b02      	ldr	r3, [pc, #8]	; (b5cd8 <hal_i2c_is_enabled+0xc>)
   b5cd0:	681b      	ldr	r3, [r3, #0]
   b5cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5cd4:	9301      	str	r3, [sp, #4]
   b5cd6:	bd08      	pop	{r3, pc}
   b5cd8:	00030228 	.word	0x00030228

000b5cdc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5cdc:	b508      	push	{r3, lr}
   b5cde:	4b02      	ldr	r3, [pc, #8]	; (b5ce8 <hal_i2c_init+0xc>)
   b5ce0:	681b      	ldr	r3, [r3, #0]
   b5ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5ce4:	9301      	str	r3, [sp, #4]
   b5ce6:	bd08      	pop	{r3, pc}
   b5ce8:	00030228 	.word	0x00030228

000b5cec <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5cec:	b508      	push	{r3, lr}
   b5cee:	4b02      	ldr	r3, [pc, #8]	; (b5cf8 <hal_i2c_request_ex+0xc>)
   b5cf0:	681b      	ldr	r3, [r3, #0]
   b5cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5cf4:	9301      	str	r3, [sp, #4]
   b5cf6:	bd08      	pop	{r3, pc}
   b5cf8:	00030228 	.word	0x00030228

000b5cfc <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5cfc:	b508      	push	{r3, lr}
   b5cfe:	4b02      	ldr	r3, [pc, #8]	; (b5d08 <if_index_to_name+0xc>)
   b5d00:	681b      	ldr	r3, [r3, #0]
   b5d02:	695b      	ldr	r3, [r3, #20]
   b5d04:	9301      	str	r3, [sp, #4]
   b5d06:	bd08      	pop	{r3, pc}
   b5d08:	0003026c 	.word	0x0003026c

000b5d0c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5d0c:	b508      	push	{r3, lr}
   b5d0e:	4b02      	ldr	r3, [pc, #8]	; (b5d18 <inet_inet_ntop+0xc>)
   b5d10:	681b      	ldr	r3, [r3, #0]
   b5d12:	695b      	ldr	r3, [r3, #20]
   b5d14:	9301      	str	r3, [sp, #4]
   b5d16:	bd08      	pop	{r3, pc}
   b5d18:	00030264 	.word	0x00030264

000b5d1c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5d1c:	b508      	push	{r3, lr}
   b5d1e:	4b02      	ldr	r3, [pc, #8]	; (b5d28 <inet_htonl+0xc>)
   b5d20:	681b      	ldr	r3, [r3, #0]
   b5d22:	6a1b      	ldr	r3, [r3, #32]
   b5d24:	9301      	str	r3, [sp, #4]
   b5d26:	bd08      	pop	{r3, pc}
   b5d28:	00030264 	.word	0x00030264

000b5d2c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5d2c:	b508      	push	{r3, lr}
   b5d2e:	4b02      	ldr	r3, [pc, #8]	; (b5d38 <inet_htons+0xc>)
   b5d30:	681b      	ldr	r3, [r3, #0]
   b5d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5d34:	9301      	str	r3, [sp, #4]
   b5d36:	bd08      	pop	{r3, pc}
   b5d38:	00030264 	.word	0x00030264

000b5d3c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5d3c:	b508      	push	{r3, lr}
   b5d3e:	4b02      	ldr	r3, [pc, #8]	; (b5d48 <netdb_freeaddrinfo+0xc>)
   b5d40:	681b      	ldr	r3, [r3, #0]
   b5d42:	689b      	ldr	r3, [r3, #8]
   b5d44:	9301      	str	r3, [sp, #4]
   b5d46:	bd08      	pop	{r3, pc}
   b5d48:	00030268 	.word	0x00030268

000b5d4c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5d4c:	b508      	push	{r3, lr}
   b5d4e:	4b02      	ldr	r3, [pc, #8]	; (b5d58 <netdb_getaddrinfo+0xc>)
   b5d50:	681b      	ldr	r3, [r3, #0]
   b5d52:	68db      	ldr	r3, [r3, #12]
   b5d54:	9301      	str	r3, [sp, #4]
   b5d56:	bd08      	pop	{r3, pc}
   b5d58:	00030268 	.word	0x00030268

000b5d5c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5d5c:	b508      	push	{r3, lr}
   b5d5e:	4b02      	ldr	r3, [pc, #8]	; (b5d68 <sock_setsockopt+0xc>)
   b5d60:	681b      	ldr	r3, [r3, #0]
   b5d62:	699b      	ldr	r3, [r3, #24]
   b5d64:	9301      	str	r3, [sp, #4]
   b5d66:	bd08      	pop	{r3, pc}
   b5d68:	00030238 	.word	0x00030238

000b5d6c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5d6c:	b508      	push	{r3, lr}
   b5d6e:	4b02      	ldr	r3, [pc, #8]	; (b5d78 <sock_close+0xc>)
   b5d70:	681b      	ldr	r3, [r3, #0]
   b5d72:	69db      	ldr	r3, [r3, #28]
   b5d74:	9301      	str	r3, [sp, #4]
   b5d76:	bd08      	pop	{r3, pc}
   b5d78:	00030238 	.word	0x00030238

000b5d7c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5d7c:	b508      	push	{r3, lr}
   b5d7e:	4b02      	ldr	r3, [pc, #8]	; (b5d88 <sock_connect+0xc>)
   b5d80:	681b      	ldr	r3, [r3, #0]
   b5d82:	6a1b      	ldr	r3, [r3, #32]
   b5d84:	9301      	str	r3, [sp, #4]
   b5d86:	bd08      	pop	{r3, pc}
   b5d88:	00030238 	.word	0x00030238

000b5d8c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5d8c:	b508      	push	{r3, lr}
   b5d8e:	4b02      	ldr	r3, [pc, #8]	; (b5d98 <sock_recv+0xc>)
   b5d90:	681b      	ldr	r3, [r3, #0]
   b5d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5d94:	9301      	str	r3, [sp, #4]
   b5d96:	bd08      	pop	{r3, pc}
   b5d98:	00030238 	.word	0x00030238

000b5d9c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5d9c:	b508      	push	{r3, lr}
   b5d9e:	4b02      	ldr	r3, [pc, #8]	; (b5da8 <sock_send+0xc>)
   b5da0:	681b      	ldr	r3, [r3, #0]
   b5da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5da4:	9301      	str	r3, [sp, #4]
   b5da6:	bd08      	pop	{r3, pc}
   b5da8:	00030238 	.word	0x00030238

000b5dac <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5dac:	b508      	push	{r3, lr}
   b5dae:	4b02      	ldr	r3, [pc, #8]	; (b5db8 <sock_socket+0xc>)
   b5db0:	681b      	ldr	r3, [r3, #0]
   b5db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5db4:	9301      	str	r3, [sp, #4]
   b5db6:	bd08      	pop	{r3, pc}
   b5db8:	00030238 	.word	0x00030238

000b5dbc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5dbc:	b508      	push	{r3, lr}
   b5dbe:	4b02      	ldr	r3, [pc, #8]	; (b5dc8 <hal_spi_begin+0xc>)
   b5dc0:	681b      	ldr	r3, [r3, #0]
   b5dc2:	681b      	ldr	r3, [r3, #0]
   b5dc4:	9301      	str	r3, [sp, #4]
   b5dc6:	bd08      	pop	{r3, pc}
   b5dc8:	00030230 	.word	0x00030230

000b5dcc <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b5dcc:	b508      	push	{r3, lr}
   b5dce:	4b02      	ldr	r3, [pc, #8]	; (b5dd8 <hal_spi_set_bit_order+0xc>)
   b5dd0:	681b      	ldr	r3, [r3, #0]
   b5dd2:	689b      	ldr	r3, [r3, #8]
   b5dd4:	9301      	str	r3, [sp, #4]
   b5dd6:	bd08      	pop	{r3, pc}
   b5dd8:	00030230 	.word	0x00030230

000b5ddc <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b5ddc:	b508      	push	{r3, lr}
   b5dde:	4b02      	ldr	r3, [pc, #8]	; (b5de8 <hal_spi_set_data_mode+0xc>)
   b5de0:	681b      	ldr	r3, [r3, #0]
   b5de2:	68db      	ldr	r3, [r3, #12]
   b5de4:	9301      	str	r3, [sp, #4]
   b5de6:	bd08      	pop	{r3, pc}
   b5de8:	00030230 	.word	0x00030230

000b5dec <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b5dec:	b508      	push	{r3, lr}
   b5dee:	4b02      	ldr	r3, [pc, #8]	; (b5df8 <hal_spi_set_clock_divider+0xc>)
   b5df0:	681b      	ldr	r3, [r3, #0]
   b5df2:	691b      	ldr	r3, [r3, #16]
   b5df4:	9301      	str	r3, [sp, #4]
   b5df6:	bd08      	pop	{r3, pc}
   b5df8:	00030230 	.word	0x00030230

000b5dfc <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5dfc:	b508      	push	{r3, lr}
   b5dfe:	4b02      	ldr	r3, [pc, #8]	; (b5e08 <hal_spi_transfer+0xc>)
   b5e00:	681b      	ldr	r3, [r3, #0]
   b5e02:	695b      	ldr	r3, [r3, #20]
   b5e04:	9301      	str	r3, [sp, #4]
   b5e06:	bd08      	pop	{r3, pc}
   b5e08:	00030230 	.word	0x00030230

000b5e0c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5e0c:	b508      	push	{r3, lr}
   b5e0e:	4b02      	ldr	r3, [pc, #8]	; (b5e18 <hal_spi_init+0xc>)
   b5e10:	681b      	ldr	r3, [r3, #0]
   b5e12:	69db      	ldr	r3, [r3, #28]
   b5e14:	9301      	str	r3, [sp, #4]
   b5e16:	bd08      	pop	{r3, pc}
   b5e18:	00030230 	.word	0x00030230

000b5e1c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5e1c:	b508      	push	{r3, lr}
   b5e1e:	4b02      	ldr	r3, [pc, #8]	; (b5e28 <hal_spi_is_enabled+0xc>)
   b5e20:	681b      	ldr	r3, [r3, #0]
   b5e22:	6a1b      	ldr	r3, [r3, #32]
   b5e24:	9301      	str	r3, [sp, #4]
   b5e26:	bd08      	pop	{r3, pc}
   b5e28:	00030230 	.word	0x00030230

000b5e2c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5e2c:	b508      	push	{r3, lr}
   b5e2e:	4b02      	ldr	r3, [pc, #8]	; (b5e38 <hal_spi_info+0xc>)
   b5e30:	681b      	ldr	r3, [r3, #0]
   b5e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5e34:	9301      	str	r3, [sp, #4]
   b5e36:	bd08      	pop	{r3, pc}
   b5e38:	00030230 	.word	0x00030230

000b5e3c <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5e3c:	b508      	push	{r3, lr}
   b5e3e:	4b02      	ldr	r3, [pc, #8]	; (b5e48 <hal_spi_acquire+0xc>)
   b5e40:	681b      	ldr	r3, [r3, #0]
   b5e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5e44:	9301      	str	r3, [sp, #4]
   b5e46:	bd08      	pop	{r3, pc}
   b5e48:	00030230 	.word	0x00030230

000b5e4c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5e4c:	b508      	push	{r3, lr}
   b5e4e:	4b02      	ldr	r3, [pc, #8]	; (b5e58 <hal_spi_release+0xc>)
   b5e50:	681b      	ldr	r3, [r3, #0]
   b5e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5e54:	9301      	str	r3, [sp, #4]
   b5e56:	bd08      	pop	{r3, pc}
   b5e58:	00030230 	.word	0x00030230

000b5e5c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   b5e5c:	b508      	push	{r3, lr}
   b5e5e:	4b02      	ldr	r3, [pc, #8]	; (b5e68 <hal_usart_init+0xc>)
   b5e60:	681b      	ldr	r3, [r3, #0]
   b5e62:	681b      	ldr	r3, [r3, #0]
   b5e64:	9301      	str	r3, [sp, #4]
   b5e66:	bd08      	pop	{r3, pc}
   b5e68:	0003023c 	.word	0x0003023c

000b5e6c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5e6c:	b508      	push	{r3, lr}
   b5e6e:	4b02      	ldr	r3, [pc, #8]	; (b5e78 <hal_usart_write+0xc>)
   b5e70:	681b      	ldr	r3, [r3, #0]
   b5e72:	68db      	ldr	r3, [r3, #12]
   b5e74:	9301      	str	r3, [sp, #4]
   b5e76:	bd08      	pop	{r3, pc}
   b5e78:	0003023c 	.word	0x0003023c

000b5e7c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5e7c:	b508      	push	{r3, lr}
   b5e7e:	4b02      	ldr	r3, [pc, #8]	; (b5e88 <hal_usart_available+0xc>)
   b5e80:	681b      	ldr	r3, [r3, #0]
   b5e82:	691b      	ldr	r3, [r3, #16]
   b5e84:	9301      	str	r3, [sp, #4]
   b5e86:	bd08      	pop	{r3, pc}
   b5e88:	0003023c 	.word	0x0003023c

000b5e8c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5e8c:	b508      	push	{r3, lr}
   b5e8e:	4b02      	ldr	r3, [pc, #8]	; (b5e98 <hal_usart_read+0xc>)
   b5e90:	681b      	ldr	r3, [r3, #0]
   b5e92:	695b      	ldr	r3, [r3, #20]
   b5e94:	9301      	str	r3, [sp, #4]
   b5e96:	bd08      	pop	{r3, pc}
   b5e98:	0003023c 	.word	0x0003023c

000b5e9c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5e9c:	b508      	push	{r3, lr}
   b5e9e:	4b02      	ldr	r3, [pc, #8]	; (b5ea8 <hal_usart_peek+0xc>)
   b5ea0:	681b      	ldr	r3, [r3, #0]
   b5ea2:	699b      	ldr	r3, [r3, #24]
   b5ea4:	9301      	str	r3, [sp, #4]
   b5ea6:	bd08      	pop	{r3, pc}
   b5ea8:	0003023c 	.word	0x0003023c

000b5eac <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5eac:	b508      	push	{r3, lr}
   b5eae:	4b02      	ldr	r3, [pc, #8]	; (b5eb8 <hal_usart_flush+0xc>)
   b5eb0:	681b      	ldr	r3, [r3, #0]
   b5eb2:	69db      	ldr	r3, [r3, #28]
   b5eb4:	9301      	str	r3, [sp, #4]
   b5eb6:	bd08      	pop	{r3, pc}
   b5eb8:	0003023c 	.word	0x0003023c

000b5ebc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5ebc:	b508      	push	{r3, lr}
   b5ebe:	4b02      	ldr	r3, [pc, #8]	; (b5ec8 <hal_usart_is_enabled+0xc>)
   b5ec0:	681b      	ldr	r3, [r3, #0]
   b5ec2:	6a1b      	ldr	r3, [r3, #32]
   b5ec4:	9301      	str	r3, [sp, #4]
   b5ec6:	bd08      	pop	{r3, pc}
   b5ec8:	0003023c 	.word	0x0003023c

000b5ecc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5ecc:	b508      	push	{r3, lr}
   b5ece:	4b02      	ldr	r3, [pc, #8]	; (b5ed8 <hal_usart_available_data_for_write+0xc>)
   b5ed0:	681b      	ldr	r3, [r3, #0]
   b5ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5ed4:	9301      	str	r3, [sp, #4]
   b5ed6:	bd08      	pop	{r3, pc}
   b5ed8:	0003023c 	.word	0x0003023c

000b5edc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5edc:	b508      	push	{r3, lr}
   b5ede:	4b02      	ldr	r3, [pc, #8]	; (b5ee8 <HAL_USB_USART_Init+0xc>)
   b5ee0:	681b      	ldr	r3, [r3, #0]
   b5ee2:	681b      	ldr	r3, [r3, #0]
   b5ee4:	9301      	str	r3, [sp, #4]
   b5ee6:	bd08      	pop	{r3, pc}
   b5ee8:	0003024c 	.word	0x0003024c

000b5eec <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5eec:	b508      	push	{r3, lr}
   b5eee:	4b02      	ldr	r3, [pc, #8]	; (b5ef8 <HAL_USB_USART_Begin+0xc>)
   b5ef0:	681b      	ldr	r3, [r3, #0]
   b5ef2:	685b      	ldr	r3, [r3, #4]
   b5ef4:	9301      	str	r3, [sp, #4]
   b5ef6:	bd08      	pop	{r3, pc}
   b5ef8:	0003024c 	.word	0x0003024c

000b5efc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5efc:	b508      	push	{r3, lr}
   b5efe:	4b02      	ldr	r3, [pc, #8]	; (b5f08 <HAL_USB_USART_Available_Data+0xc>)
   b5f00:	681b      	ldr	r3, [r3, #0]
   b5f02:	691b      	ldr	r3, [r3, #16]
   b5f04:	9301      	str	r3, [sp, #4]
   b5f06:	bd08      	pop	{r3, pc}
   b5f08:	0003024c 	.word	0x0003024c

000b5f0c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5f0c:	b508      	push	{r3, lr}
   b5f0e:	4b02      	ldr	r3, [pc, #8]	; (b5f18 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5f10:	681b      	ldr	r3, [r3, #0]
   b5f12:	695b      	ldr	r3, [r3, #20]
   b5f14:	9301      	str	r3, [sp, #4]
   b5f16:	bd08      	pop	{r3, pc}
   b5f18:	0003024c 	.word	0x0003024c

000b5f1c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5f1c:	b508      	push	{r3, lr}
   b5f1e:	4b02      	ldr	r3, [pc, #8]	; (b5f28 <HAL_USB_USART_Receive_Data+0xc>)
   b5f20:	681b      	ldr	r3, [r3, #0]
   b5f22:	699b      	ldr	r3, [r3, #24]
   b5f24:	9301      	str	r3, [sp, #4]
   b5f26:	bd08      	pop	{r3, pc}
   b5f28:	0003024c 	.word	0x0003024c

000b5f2c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5f2c:	b508      	push	{r3, lr}
   b5f2e:	4b02      	ldr	r3, [pc, #8]	; (b5f38 <HAL_USB_USART_Send_Data+0xc>)
   b5f30:	681b      	ldr	r3, [r3, #0]
   b5f32:	69db      	ldr	r3, [r3, #28]
   b5f34:	9301      	str	r3, [sp, #4]
   b5f36:	bd08      	pop	{r3, pc}
   b5f38:	0003024c 	.word	0x0003024c

000b5f3c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5f3c:	b508      	push	{r3, lr}
   b5f3e:	4b02      	ldr	r3, [pc, #8]	; (b5f48 <HAL_USB_USART_Flush_Data+0xc>)
   b5f40:	681b      	ldr	r3, [r3, #0]
   b5f42:	6a1b      	ldr	r3, [r3, #32]
   b5f44:	9301      	str	r3, [sp, #4]
   b5f46:	bd08      	pop	{r3, pc}
   b5f48:	0003024c 	.word	0x0003024c

000b5f4c <wlan_get_credentials>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
   b5f4c:	b508      	push	{r3, lr}
   b5f4e:	4b02      	ldr	r3, [pc, #8]	; (b5f58 <wlan_get_credentials+0xc>)
   b5f50:	681b      	ldr	r3, [r3, #0]
   b5f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b5f54:	9301      	str	r3, [sp, #4]
   b5f56:	bd08      	pop	{r3, pc}
   b5f58:	00030274 	.word	0x00030274

000b5f5c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5f5c:	b508      	push	{r3, lr}
   b5f5e:	4b02      	ldr	r3, [pc, #8]	; (b5f68 <panic_+0xc>)
   b5f60:	681b      	ldr	r3, [r3, #0]
   b5f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5f64:	9301      	str	r3, [sp, #4]
   b5f66:	bd08      	pop	{r3, pc}
   b5f68:	00030260 	.word	0x00030260

000b5f6c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5f6c:	b508      	push	{r3, lr}
   b5f6e:	4b02      	ldr	r3, [pc, #8]	; (b5f78 <log_message+0xc>)
   b5f70:	681b      	ldr	r3, [r3, #0]
   b5f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5f74:	9301      	str	r3, [sp, #4]
   b5f76:	bd08      	pop	{r3, pc}
   b5f78:	00030260 	.word	0x00030260

000b5f7c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b5f7c:	b508      	push	{r3, lr}
   b5f7e:	4b02      	ldr	r3, [pc, #8]	; (b5f88 <system_mode+0xc>)
   b5f80:	681b      	ldr	r3, [r3, #0]
   b5f82:	681b      	ldr	r3, [r3, #0]
   b5f84:	9301      	str	r3, [sp, #4]
   b5f86:	bd08      	pop	{r3, pc}
   b5f88:	00030220 	.word	0x00030220

000b5f8c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5f8c:	b508      	push	{r3, lr}
   b5f8e:	4b02      	ldr	r3, [pc, #8]	; (b5f98 <set_system_mode+0xc>)
   b5f90:	681b      	ldr	r3, [r3, #0]
   b5f92:	685b      	ldr	r3, [r3, #4]
   b5f94:	9301      	str	r3, [sp, #4]
   b5f96:	bd08      	pop	{r3, pc}
   b5f98:	00030220 	.word	0x00030220

000b5f9c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5f9c:	b508      	push	{r3, lr}
   b5f9e:	4b02      	ldr	r3, [pc, #8]	; (b5fa8 <system_delay_ms+0xc>)
   b5fa0:	681b      	ldr	r3, [r3, #0]
   b5fa2:	695b      	ldr	r3, [r3, #20]
   b5fa4:	9301      	str	r3, [sp, #4]
   b5fa6:	bd08      	pop	{r3, pc}
   b5fa8:	00030220 	.word	0x00030220

000b5fac <system_set_flag>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
DYNALIB_FN(14, system, system_set_flag, int(system_flag_t, uint8_t, void*))
   b5fac:	b508      	push	{r3, lr}
   b5fae:	4b02      	ldr	r3, [pc, #8]	; (b5fb8 <system_set_flag+0xc>)
   b5fb0:	681b      	ldr	r3, [r3, #0]
   b5fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5fb4:	9301      	str	r3, [sp, #4]
   b5fb6:	bd08      	pop	{r3, pc}
   b5fb8:	00030220 	.word	0x00030220

000b5fbc <system_get_flag>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
   b5fbc:	b508      	push	{r3, lr}
   b5fbe:	4b02      	ldr	r3, [pc, #8]	; (b5fc8 <system_get_flag+0xc>)
   b5fc0:	681b      	ldr	r3, [r3, #0]
   b5fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5fc4:	9301      	str	r3, [sp, #4]
   b5fc6:	bd08      	pop	{r3, pc}
   b5fc8:	00030220 	.word	0x00030220

000b5fcc <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b5fcc:	b508      	push	{r3, lr}
   b5fce:	4b02      	ldr	r3, [pc, #8]	; (b5fd8 <system_thread_get_state+0xc>)
   b5fd0:	681b      	ldr	r3, [r3, #0]
   b5fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5fd4:	9301      	str	r3, [sp, #4]
   b5fd6:	bd08      	pop	{r3, pc}
   b5fd8:	00030220 	.word	0x00030220

000b5fdc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5fdc:	b508      	push	{r3, lr}
   b5fde:	4b03      	ldr	r3, [pc, #12]	; (b5fec <system_ctrl_set_app_request_handler+0x10>)
   b5fe0:	681b      	ldr	r3, [r3, #0]
   b5fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5fe6:	9301      	str	r3, [sp, #4]
   b5fe8:	bd08      	pop	{r3, pc}
   b5fea:	0000      	.short	0x0000
   b5fec:	00030220 	.word	0x00030220

000b5ff0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5ff0:	b508      	push	{r3, lr}
   b5ff2:	4b03      	ldr	r3, [pc, #12]	; (b6000 <system_ctrl_set_result+0x10>)
   b5ff4:	681b      	ldr	r3, [r3, #0]
   b5ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5ffa:	9301      	str	r3, [sp, #4]
   b5ffc:	bd08      	pop	{r3, pc}
   b5ffe:	0000      	.short	0x0000
   b6000:	00030220 	.word	0x00030220

000b6004 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b6004:	b508      	push	{r3, lr}
   b6006:	4b03      	ldr	r3, [pc, #12]	; (b6014 <system_reset+0x10>)
   b6008:	681b      	ldr	r3, [r3, #0]
   b600a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b600e:	9301      	str	r3, [sp, #4]
   b6010:	bd08      	pop	{r3, pc}
   b6012:	0000      	.short	0x0000
   b6014:	00030220 	.word	0x00030220

000b6018 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6018:	b508      	push	{r3, lr}
   b601a:	4b02      	ldr	r3, [pc, #8]	; (b6024 <spark_process+0xc>)
   b601c:	681b      	ldr	r3, [r3, #0]
   b601e:	689b      	ldr	r3, [r3, #8]
   b6020:	9301      	str	r3, [sp, #4]
   b6022:	bd08      	pop	{r3, pc}
   b6024:	00030244 	.word	0x00030244

000b6028 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b6028:	b508      	push	{r3, lr}
   b602a:	4b02      	ldr	r3, [pc, #8]	; (b6034 <spark_cloud_flag_connect+0xc>)
   b602c:	681b      	ldr	r3, [r3, #0]
   b602e:	68db      	ldr	r3, [r3, #12]
   b6030:	9301      	str	r3, [sp, #4]
   b6032:	bd08      	pop	{r3, pc}
   b6034:	00030244 	.word	0x00030244

000b6038 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6038:	b508      	push	{r3, lr}
   b603a:	4b02      	ldr	r3, [pc, #8]	; (b6044 <spark_cloud_flag_connected+0xc>)
   b603c:	681b      	ldr	r3, [r3, #0]
   b603e:	695b      	ldr	r3, [r3, #20]
   b6040:	9301      	str	r3, [sp, #4]
   b6042:	bd08      	pop	{r3, pc}
   b6044:	00030244 	.word	0x00030244

000b6048 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b6048:	b508      	push	{r3, lr}
   b604a:	4b02      	ldr	r3, [pc, #8]	; (b6054 <spark_sync_time+0xc>)
   b604c:	681b      	ldr	r3, [r3, #0]
   b604e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6050:	9301      	str	r3, [sp, #4]
   b6052:	bd08      	pop	{r3, pc}
   b6054:	00030244 	.word	0x00030244

000b6058 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6058:	b508      	push	{r3, lr}
   b605a:	4b02      	ldr	r3, [pc, #8]	; (b6064 <spark_sync_time_pending+0xc>)
   b605c:	681b      	ldr	r3, [r3, #0]
   b605e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6060:	9301      	str	r3, [sp, #4]
   b6062:	bd08      	pop	{r3, pc}
   b6064:	00030244 	.word	0x00030244

000b6068 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6068:	b508      	push	{r3, lr}
   b606a:	4b02      	ldr	r3, [pc, #8]	; (b6074 <spark_set_random_seed_from_cloud_handler+0xc>)
   b606c:	681b      	ldr	r3, [r3, #0]
   b606e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6070:	9301      	str	r3, [sp, #4]
   b6072:	bd08      	pop	{r3, pc}
   b6074:	00030244 	.word	0x00030244

000b6078 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6078:	b508      	push	{r3, lr}
   b607a:	4b02      	ldr	r3, [pc, #8]	; (b6084 <network_connect+0xc>)
   b607c:	681b      	ldr	r3, [r3, #0]
   b607e:	685b      	ldr	r3, [r3, #4]
   b6080:	9301      	str	r3, [sp, #4]
   b6082:	bd08      	pop	{r3, pc}
   b6084:	00030240 	.word	0x00030240

000b6088 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6088:	b508      	push	{r3, lr}
   b608a:	4b02      	ldr	r3, [pc, #8]	; (b6094 <network_connecting+0xc>)
   b608c:	681b      	ldr	r3, [r3, #0]
   b608e:	689b      	ldr	r3, [r3, #8]
   b6090:	9301      	str	r3, [sp, #4]
   b6092:	bd08      	pop	{r3, pc}
   b6094:	00030240 	.word	0x00030240

000b6098 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6098:	b508      	push	{r3, lr}
   b609a:	4b02      	ldr	r3, [pc, #8]	; (b60a4 <network_disconnect+0xc>)
   b609c:	681b      	ldr	r3, [r3, #0]
   b609e:	68db      	ldr	r3, [r3, #12]
   b60a0:	9301      	str	r3, [sp, #4]
   b60a2:	bd08      	pop	{r3, pc}
   b60a4:	00030240 	.word	0x00030240

000b60a8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b60a8:	b508      	push	{r3, lr}
   b60aa:	4b02      	ldr	r3, [pc, #8]	; (b60b4 <network_ready+0xc>)
   b60ac:	681b      	ldr	r3, [r3, #0]
   b60ae:	691b      	ldr	r3, [r3, #16]
   b60b0:	9301      	str	r3, [sp, #4]
   b60b2:	bd08      	pop	{r3, pc}
   b60b4:	00030240 	.word	0x00030240

000b60b8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b60b8:	b508      	push	{r3, lr}
   b60ba:	4b02      	ldr	r3, [pc, #8]	; (b60c4 <network_on+0xc>)
   b60bc:	681b      	ldr	r3, [r3, #0]
   b60be:	695b      	ldr	r3, [r3, #20]
   b60c0:	9301      	str	r3, [sp, #4]
   b60c2:	bd08      	pop	{r3, pc}
   b60c4:	00030240 	.word	0x00030240

000b60c8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b60c8:	b508      	push	{r3, lr}
   b60ca:	4b02      	ldr	r3, [pc, #8]	; (b60d4 <network_off+0xc>)
   b60cc:	681b      	ldr	r3, [r3, #0]
   b60ce:	699b      	ldr	r3, [r3, #24]
   b60d0:	9301      	str	r3, [sp, #4]
   b60d2:	bd08      	pop	{r3, pc}
   b60d4:	00030240 	.word	0x00030240

000b60d8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b60d8:	b508      	push	{r3, lr}
   b60da:	4b02      	ldr	r3, [pc, #8]	; (b60e4 <network_listen+0xc>)
   b60dc:	681b      	ldr	r3, [r3, #0]
   b60de:	69db      	ldr	r3, [r3, #28]
   b60e0:	9301      	str	r3, [sp, #4]
   b60e2:	bd08      	pop	{r3, pc}
   b60e4:	00030240 	.word	0x00030240

000b60e8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b60e8:	b508      	push	{r3, lr}
   b60ea:	4b02      	ldr	r3, [pc, #8]	; (b60f4 <network_listening+0xc>)
   b60ec:	681b      	ldr	r3, [r3, #0]
   b60ee:	6a1b      	ldr	r3, [r3, #32]
   b60f0:	9301      	str	r3, [sp, #4]
   b60f2:	bd08      	pop	{r3, pc}
   b60f4:	00030240 	.word	0x00030240

000b60f8 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b60f8:	b508      	push	{r3, lr}
   b60fa:	4b02      	ldr	r3, [pc, #8]	; (b6104 <network_set_credentials+0xc>)
   b60fc:	681b      	ldr	r3, [r3, #0]
   b60fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6100:	9301      	str	r3, [sp, #4]
   b6102:	bd08      	pop	{r3, pc}
   b6104:	00030240 	.word	0x00030240

000b6108 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b6108:	b508      	push	{r3, lr}
   b610a:	4b02      	ldr	r3, [pc, #8]	; (b6114 <network_clear_credentials+0xc>)
   b610c:	681b      	ldr	r3, [r3, #0]
   b610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6110:	9301      	str	r3, [sp, #4]
   b6112:	bd08      	pop	{r3, pc}
   b6114:	00030240 	.word	0x00030240

000b6118 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6118:	b508      	push	{r3, lr}
   b611a:	4b02      	ldr	r3, [pc, #8]	; (b6124 <network_set_listen_timeout+0xc>)
   b611c:	681b      	ldr	r3, [r3, #0]
   b611e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6120:	9301      	str	r3, [sp, #4]
   b6122:	bd08      	pop	{r3, pc}
   b6124:	00030240 	.word	0x00030240

000b6128 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6128:	b508      	push	{r3, lr}
   b612a:	4b02      	ldr	r3, [pc, #8]	; (b6134 <network_get_listen_timeout+0xc>)
   b612c:	681b      	ldr	r3, [r3, #0]
   b612e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6130:	9301      	str	r3, [sp, #4]
   b6132:	bd08      	pop	{r3, pc}
   b6134:	00030240 	.word	0x00030240

000b6138 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6138:	b508      	push	{r3, lr}
   b613a:	4b02      	ldr	r3, [pc, #8]	; (b6144 <network_is_on+0xc>)
   b613c:	681b      	ldr	r3, [r3, #0]
   b613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6140:	9301      	str	r3, [sp, #4]
   b6142:	bd08      	pop	{r3, pc}
   b6144:	00030240 	.word	0x00030240

000b6148 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6148:	b508      	push	{r3, lr}
   b614a:	4b02      	ldr	r3, [pc, #8]	; (b6154 <network_is_off+0xc>)
   b614c:	681b      	ldr	r3, [r3, #0]
   b614e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6150:	9301      	str	r3, [sp, #4]
   b6152:	bd08      	pop	{r3, pc}
   b6154:	00030240 	.word	0x00030240

000b6158 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6158:	b508      	push	{r3, lr}
   b615a:	4b02      	ldr	r3, [pc, #8]	; (b6164 <malloc+0xc>)
   b615c:	681b      	ldr	r3, [r3, #0]
   b615e:	681b      	ldr	r3, [r3, #0]
   b6160:	9301      	str	r3, [sp, #4]
   b6162:	bd08      	pop	{r3, pc}
   b6164:	0003021c 	.word	0x0003021c

000b6168 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6168:	b508      	push	{r3, lr}
   b616a:	4b02      	ldr	r3, [pc, #8]	; (b6174 <free+0xc>)
   b616c:	681b      	ldr	r3, [r3, #0]
   b616e:	685b      	ldr	r3, [r3, #4]
   b6170:	9301      	str	r3, [sp, #4]
   b6172:	bd08      	pop	{r3, pc}
   b6174:	0003021c 	.word	0x0003021c

000b6178 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6178:	b508      	push	{r3, lr}
   b617a:	4b02      	ldr	r3, [pc, #8]	; (b6184 <realloc+0xc>)
   b617c:	681b      	ldr	r3, [r3, #0]
   b617e:	689b      	ldr	r3, [r3, #8]
   b6180:	9301      	str	r3, [sp, #4]
   b6182:	bd08      	pop	{r3, pc}
   b6184:	0003021c 	.word	0x0003021c

000b6188 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b6188:	b508      	push	{r3, lr}
   b618a:	4b02      	ldr	r3, [pc, #8]	; (b6194 <siprintf+0xc>)
   b618c:	681b      	ldr	r3, [r3, #0]
   b618e:	691b      	ldr	r3, [r3, #16]
   b6190:	9301      	str	r3, [sp, #4]
   b6192:	bd08      	pop	{r3, pc}
   b6194:	0003021c 	.word	0x0003021c

000b6198 <vsnprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6198:	b508      	push	{r3, lr}
   b619a:	4b02      	ldr	r3, [pc, #8]	; (b61a4 <vsnprintf+0xc>)
   b619c:	681b      	ldr	r3, [r3, #0]
   b619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b61a0:	9301      	str	r3, [sp, #4]
   b61a2:	bd08      	pop	{r3, pc}
   b61a4:	0003021c 	.word	0x0003021c

000b61a8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b61a8:	b508      	push	{r3, lr}
   b61aa:	4b02      	ldr	r3, [pc, #8]	; (b61b4 <abort+0xc>)
   b61ac:	681b      	ldr	r3, [r3, #0]
   b61ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b61b0:	9301      	str	r3, [sp, #4]
   b61b2:	bd08      	pop	{r3, pc}
   b61b4:	0003021c 	.word	0x0003021c

000b61b8 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b61b8:	b508      	push	{r3, lr}
   b61ba:	4b02      	ldr	r3, [pc, #8]	; (b61c4 <__errno+0xc>)
   b61bc:	681b      	ldr	r3, [r3, #0]
   b61be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b61c0:	9301      	str	r3, [sp, #4]
   b61c2:	bd08      	pop	{r3, pc}
   b61c4:	0003021c 	.word	0x0003021c

000b61c8 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b61c8:	b508      	push	{r3, lr}
   b61ca:	4b02      	ldr	r3, [pc, #8]	; (b61d4 <__assert_func+0xc>)
   b61cc:	681b      	ldr	r3, [r3, #0]
   b61ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b61d0:	9301      	str	r3, [sp, #4]
   b61d2:	bd08      	pop	{r3, pc}
   b61d4:	0003021c 	.word	0x0003021c

000b61d8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b61d8:	b508      	push	{r3, lr}
   b61da:	4b02      	ldr	r3, [pc, #8]	; (b61e4 <newlib_impure_ptr_callback+0xc>)
   b61dc:	681b      	ldr	r3, [r3, #0]
   b61de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b61e0:	9301      	str	r3, [sp, #4]
   b61e2:	bd08      	pop	{r3, pc}
   b61e4:	0003021c 	.word	0x0003021c

000b61e8 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b61e8:	b508      	push	{r3, lr}
   b61ea:	4b02      	ldr	r3, [pc, #8]	; (b61f4 <localtime_r+0xc>)
   b61ec:	681b      	ldr	r3, [r3, #0]
   b61ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b61f0:	9301      	str	r3, [sp, #4]
   b61f2:	bd08      	pop	{r3, pc}
   b61f4:	0003021c 	.word	0x0003021c

000b61f8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b61f8:	2100      	movs	r1, #0
   b61fa:	f7ff becf 	b.w	b5f9c <system_delay_ms>

000b61fe <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b61fe:	4770      	bx	lr

000b6200 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b6200:	4770      	bx	lr

000b6202 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b6202:	4770      	bx	lr

000b6204 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6204:	4770      	bx	lr
	...

000b6208 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6208:	4b06      	ldr	r3, [pc, #24]	; (b6224 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b620a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b620c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b620e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6212:	d005      	beq.n	b6220 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6214:	4608      	mov	r0, r1
   b6216:	f002 fdfd 	bl	b8e14 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b621a:	2800      	cmp	r0, #0
   b621c:	bf08      	it	eq
   b621e:	2400      	moveq	r4, #0
      }
   b6220:	4620      	mov	r0, r4
   b6222:	bd10      	pop	{r4, pc}
   b6224:	000ba080 	.word	0x000ba080

000b6228 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6228:	4b06      	ldr	r3, [pc, #24]	; (b6244 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b622a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b622c:	b510      	push	{r4, lr}
   b622e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6232:	d005      	beq.n	b6240 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6234:	4608      	mov	r0, r1
   b6236:	f002 fded 	bl	b8e14 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b623a:	2800      	cmp	r0, #0
   b623c:	bf08      	it	eq
   b623e:	2400      	moveq	r4, #0
      }
   b6240:	4620      	mov	r0, r4
   b6242:	bd10      	pop	{r4, pc}
   b6244:	000ba080 	.word	0x000ba080

000b6248 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6248:	4b06      	ldr	r3, [pc, #24]	; (b6264 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b624a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b624c:	b510      	push	{r4, lr}
   b624e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6252:	d005      	beq.n	b6260 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6254:	4608      	mov	r0, r1
   b6256:	f002 fddd 	bl	b8e14 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b625a:	2800      	cmp	r0, #0
   b625c:	bf08      	it	eq
   b625e:	2400      	moveq	r4, #0
      }
   b6260:	4620      	mov	r0, r4
   b6262:	bd10      	pop	{r4, pc}
   b6264:	000ba080 	.word	0x000ba080

000b6268 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6268:	b510      	push	{r4, lr}
   b626a:	2168      	movs	r1, #104	; 0x68
   b626c:	4604      	mov	r4, r0
   b626e:	f002 fdca 	bl	b8e06 <_ZdlPvj>
   b6272:	4620      	mov	r0, r4
   b6274:	bd10      	pop	{r4, pc}

000b6276 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6276:	b510      	push	{r4, lr}
   b6278:	2128      	movs	r1, #40	; 0x28
   b627a:	4604      	mov	r4, r0
   b627c:	f002 fdc3 	bl	b8e06 <_ZdlPvj>
   b6280:	4620      	mov	r0, r4
   b6282:	bd10      	pop	{r4, pc}

000b6284 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6284:	b510      	push	{r4, lr}
   b6286:	2130      	movs	r1, #48	; 0x30
   b6288:	4604      	mov	r4, r0
   b628a:	f002 fdbc 	bl	b8e06 <_ZdlPvj>
   b628e:	4620      	mov	r0, r4
   b6290:	bd10      	pop	{r4, pc}

000b6292 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6292:	2168      	movs	r1, #104	; 0x68
   b6294:	f002 bdb7 	b.w	b8e06 <_ZdlPvj>

000b6298 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6298:	2128      	movs	r1, #40	; 0x28
   b629a:	f002 bdb4 	b.w	b8e06 <_ZdlPvj>

000b629e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b629e:	2130      	movs	r1, #48	; 0x30
   b62a0:	f002 bdb1 	b.w	b8e06 <_ZdlPvj>

000b62a4 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   b62a4:	b510      	push	{r4, lr}
   b62a6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   b62a8:	6800      	ldr	r0, [r0, #0]
   b62aa:	b108      	cbz	r0, b62b0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   b62ac:	f7ff fc56 	bl	b5b5c <os_mutex_recursive_destroy>
    }
   b62b0:	4620      	mov	r0, r4
   b62b2:	bd10      	pop	{r4, pc}

000b62b4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b62b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b62b6:	2500      	movs	r5, #0
   b62b8:	1cec      	adds	r4, r5, #3
   b62ba:	428c      	cmp	r4, r1
   b62bc:	d80d      	bhi.n	b62da <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b62be:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b62c0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b62c2:	5d87      	ldrb	r7, [r0, r6]
   b62c4:	4297      	cmp	r7, r2
   b62c6:	d105      	bne.n	b62d4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b62c8:	4426      	add	r6, r4
   b62ca:	42b1      	cmp	r1, r6
   b62cc:	d305      	bcc.n	b62da <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b62ce:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b62d0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b62d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b62d4:	3401      	adds	r4, #1
   b62d6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b62d8:	e7ee      	b.n	b62b8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b62da:	2000      	movs	r0, #0
   b62dc:	e7f9      	b.n	b62d2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000b62de <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b62de:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b62e2:	4604      	mov	r4, r0
   b62e4:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   b62e8:	461e      	mov	r6, r3
   b62ea:	4689      	mov	r9, r1
   b62ec:	ab01      	add	r3, sp, #4
   b62ee:	4690      	mov	r8, r2
   b62f0:	460a      	mov	r2, r1
   b62f2:	6a01      	ldr	r1, [r0, #32]
   b62f4:	f7ff ffde 	bl	b62b4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   b62f8:	6a25      	ldr	r5, [r4, #32]
   b62fa:	1cb3      	adds	r3, r6, #2
   b62fc:	bb0f      	cbnz	r7, b6342 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x64>
   b62fe:	b300      	cbz	r0, b6342 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x64>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   b6300:	195f      	adds	r7, r3, r5
   b6302:	1a3f      	subs	r7, r7, r0
   b6304:	2f1f      	cmp	r7, #31
   b6306:	d818      	bhi.n	b633a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b6308:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b630c:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b6310:	eba5 0209 	sub.w	r2, r5, r9
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b6314:	eb06 030a 	add.w	r3, r6, sl
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b6318:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b631a:	4448      	add	r0, r9
   b631c:	1821      	adds	r1, r4, r0
   b631e:	b292      	uxth	r2, r2
   b6320:	18e0      	adds	r0, r4, r3
   b6322:	f003 f937 	bl	b9594 <memmove>
            selfData_[offset] = len + 1;
   b6326:	1c73      	adds	r3, r6, #1
   b6328:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   b632c:	4632      	mov	r2, r6
   b632e:	4641      	mov	r1, r8
   b6330:	eb04 000a 	add.w	r0, r4, sl
   b6334:	f003 f920 	bl	b9578 <memcpy>
            selfLen_ = staLen + len + 2;
   b6338:	6227      	str	r7, [r4, #32]
}
   b633a:	6a20      	ldr	r0, [r4, #32]
   b633c:	b002      	add	sp, #8
   b633e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   b6342:	442b      	add	r3, r5
   b6344:	2b1f      	cmp	r3, #31
   b6346:	d8f8      	bhi.n	b633a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>
        selfData_[selfLen_++] = len + 1;
   b6348:	1c73      	adds	r3, r6, #1
   b634a:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   b634c:	1ca8      	adds	r0, r5, #2
   b634e:	4425      	add	r5, r4
   b6350:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   b6352:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   b6354:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   b6358:	4641      	mov	r1, r8
   b635a:	4420      	add	r0, r4
   b635c:	f003 f90c 	bl	b9578 <memcpy>
        selfLen_ += len;
   b6360:	6a23      	ldr	r3, [r4, #32]
   b6362:	4433      	add	r3, r6
   b6364:	6223      	str	r3, [r4, #32]
   b6366:	e7e8      	b.n	b633a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>

000b6368 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b6368:	4a02      	ldr	r2, [pc, #8]	; (b6374 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b636a:	2100      	movs	r1, #0
   b636c:	200a      	movs	r0, #10
   b636e:	f7ff bdf5 	b.w	b5f5c <panic_>
   b6372:	bf00      	nop
   b6374:	000b5b9d 	.word	0x000b5b9d

000b6378 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6378:	4603      	mov	r3, r0
   b637a:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b637c:	681b      	ldr	r3, [r3, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b637e:	e9d3 2100 	ldrd	r2, r1, [r3]
   b6382:	4710      	bx	r2

000b6384 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6384:	b430      	push	{r4, r5}
   b6386:	460d      	mov	r5, r1
   b6388:	4611      	mov	r1, r2
   b638a:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b638c:	6803      	ldr	r3, [r0, #0]
   b638e:	6809      	ldr	r1, [r1, #0]
   b6390:	6828      	ldr	r0, [r5, #0]
   b6392:	e9d3 4300 	ldrd	r4, r3, [r3]
   b6396:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b6398:	bc30      	pop	{r4, r5}
   b639a:	4760      	bx	ip

000b639c <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b639c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b639e:	b538      	push	{r3, r4, r5, lr}
   b63a0:	4604      	mov	r4, r0
	switch (__op)
   b63a2:	d102      	bne.n	b63aa <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b63a4:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b63a6:	6023      	str	r3, [r4, #0]
	}
   b63a8:	e003      	b.n	b63b2 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b63aa:	2a02      	cmp	r2, #2
   b63ac:	d003      	beq.n	b63b6 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b63ae:	2a03      	cmp	r2, #3
   b63b0:	d00d      	beq.n	b63ce <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b63b2:	2000      	movs	r0, #0
   b63b4:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b63b6:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b63b8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b63ba:	f7fd fe6c 	bl	b4096 <_Znwj>
   b63be:	4603      	mov	r3, r0
   b63c0:	2800      	cmp	r0, #0
   b63c2:	d0f0      	beq.n	b63a6 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b63c4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b63c8:	e883 0003 	stmia.w	r3, {r0, r1}
   b63cc:	e7eb      	b.n	b63a6 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b63ce:	6800      	ldr	r0, [r0, #0]
   b63d0:	2800      	cmp	r0, #0
   b63d2:	d0ee      	beq.n	b63b2 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b63d4:	2108      	movs	r1, #8
   b63d6:	f002 fd16 	bl	b8e06 <_ZdlPvj>
   b63da:	e7ea      	b.n	b63b2 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b63dc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b63dc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b63de:	b538      	push	{r3, r4, r5, lr}
   b63e0:	4604      	mov	r4, r0
	switch (__op)
   b63e2:	d102      	bne.n	b63ea <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b63e4:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b63e6:	6023      	str	r3, [r4, #0]
	}
   b63e8:	e003      	b.n	b63f2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b63ea:	2a02      	cmp	r2, #2
   b63ec:	d003      	beq.n	b63f6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b63ee:	2a03      	cmp	r2, #3
   b63f0:	d00d      	beq.n	b640e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b63f2:	2000      	movs	r0, #0
   b63f4:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b63f6:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b63f8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b63fa:	f7fd fe4c 	bl	b4096 <_Znwj>
   b63fe:	4603      	mov	r3, r0
   b6400:	2800      	cmp	r0, #0
   b6402:	d0f0      	beq.n	b63e6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b6404:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6408:	e883 0003 	stmia.w	r3, {r0, r1}
   b640c:	e7eb      	b.n	b63e6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b640e:	6800      	ldr	r0, [r0, #0]
   b6410:	2800      	cmp	r0, #0
   b6412:	d0ee      	beq.n	b63f2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b6414:	2108      	movs	r1, #8
   b6416:	f002 fcf6 	bl	b8e06 <_ZdlPvj>
   b641a:	e7ea      	b.n	b63f2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b641c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b641c:	b510      	push	{r4, lr}
      if (_M_manager)
   b641e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b6420:	4604      	mov	r4, r0
      if (_M_manager)
   b6422:	b113      	cbz	r3, b642a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6424:	2203      	movs	r2, #3
   b6426:	4601      	mov	r1, r0
   b6428:	4798      	blx	r3
    }
   b642a:	4620      	mov	r0, r4
   b642c:	bd10      	pop	{r4, pc}

000b642e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b642e:	b510      	push	{r4, lr}
   b6430:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b6432:	3058      	adds	r0, #88	; 0x58
   b6434:	f7ff fff2 	bl	b641c <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b6438:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b643c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6440:	f001 bc72 	b.w	b7d28 <_ZN6StringD1Ev>

000b6444 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6444:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6446:	6843      	ldr	r3, [r0, #4]
   b6448:	3b01      	subs	r3, #1
    {
   b644a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b644c:	6043      	str	r3, [r0, #4]
   b644e:	b963      	cbnz	r3, b646a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6450:	6803      	ldr	r3, [r0, #0]
   b6452:	689b      	ldr	r3, [r3, #8]
   b6454:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6456:	68a3      	ldr	r3, [r4, #8]
   b6458:	3b01      	subs	r3, #1
   b645a:	60a3      	str	r3, [r4, #8]
   b645c:	b92b      	cbnz	r3, b646a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b645e:	6823      	ldr	r3, [r4, #0]
   b6460:	4620      	mov	r0, r4
   b6462:	68db      	ldr	r3, [r3, #12]
    }
   b6464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6468:	4718      	bx	r3
    }
   b646a:	bd10      	pop	{r4, pc}

000b646c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b646c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6470:	b2da      	uxtb	r2, r3
   b6472:	2a09      	cmp	r2, #9
   b6474:	d801      	bhi.n	b647a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b6476:	4618      	mov	r0, r3
   b6478:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b647a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b647e:	2b05      	cmp	r3, #5
   b6480:	d801      	bhi.n	b6486 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b6482:	3857      	subs	r0, #87	; 0x57
   b6484:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b6486:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b648a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b648c:	bf94      	ite	ls
   b648e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b6490:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b6494:	4770      	bx	lr
	...

000b6498 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b6498:	b510      	push	{r4, lr}
            locked_(false) {
   b649a:	2300      	movs	r3, #0
   b649c:	7003      	strb	r3, [r0, #0]
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b649e:	4b04      	ldr	r3, [pc, #16]	; (b64b0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b64a0:	4604      	mov	r4, r0
   b64a2:	6818      	ldr	r0, [r3, #0]
   b64a4:	f7ff fb62 	bl	b5b6c <os_mutex_recursive_lock>
        locked_ = true;
   b64a8:	2301      	movs	r3, #1
   b64aa:	7023      	strb	r3, [r4, #0]
    }
   b64ac:	4620      	mov	r0, r4
   b64ae:	bd10      	pop	{r4, pc}
   b64b0:	2003e634 	.word	0x2003e634

000b64b4 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b64b4:	b510      	push	{r4, lr}
        if (locked_) {
   b64b6:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b64b8:	4604      	mov	r4, r0
        if (locked_) {
   b64ba:	b11b      	cbz	r3, b64c4 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b64bc:	4b02      	ldr	r3, [pc, #8]	; (b64c8 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b64be:	6818      	ldr	r0, [r3, #0]
   b64c0:	f7ff fb5c 	bl	b5b7c <os_mutex_recursive_unlock>
    }
   b64c4:	4620      	mov	r0, r4
   b64c6:	bd10      	pop	{r4, pc}
   b64c8:	2003e634 	.word	0x2003e634

000b64cc <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b64cc:	b082      	sub	sp, #8
   b64ce:	4603      	mov	r3, r0
    address_ = addr;
   b64d0:	6808      	ldr	r0, [r1, #0]
   b64d2:	6849      	ldr	r1, [r1, #4]
   b64d4:	466a      	mov	r2, sp
   b64d6:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b64d8:	466a      	mov	r2, sp
   b64da:	ca03      	ldmia	r2!, {r0, r1}
   b64dc:	6018      	str	r0, [r3, #0]
}
   b64de:	4618      	mov	r0, r3
    address_ = addr.address_;
   b64e0:	6059      	str	r1, [r3, #4]
}
   b64e2:	b002      	add	sp, #8
   b64e4:	4770      	bx	lr

000b64e6 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b64e6:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b64e8:	7982      	ldrb	r2, [r0, #6]
   b64ea:	798b      	ldrb	r3, [r1, #6]
   b64ec:	429a      	cmp	r2, r3
   b64ee:	d106      	bne.n	b64fe <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b64f0:	2206      	movs	r2, #6
   b64f2:	f003 f831 	bl	b9558 <memcmp>
   b64f6:	fab0 f080 	clz	r0, r0
   b64fa:	0940      	lsrs	r0, r0, #5
}
   b64fc:	bd08      	pop	{r3, pc}
    return false;
   b64fe:	2000      	movs	r0, #0
   b6500:	e7fc      	b.n	b64fc <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b6502 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b6502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6506:	6003      	str	r3, [r0, #0]
   b6508:	8083      	strh	r3, [r0, #4]
}
   b650a:	2000      	movs	r0, #0
   b650c:	4770      	bx	lr

000b650e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b650e:	b508      	push	{r3, lr}
   b6510:	4602      	mov	r2, r0
        : address_{} {
   b6512:	2100      	movs	r1, #0
   b6514:	6001      	str	r1, [r0, #0]
   b6516:	6041      	str	r1, [r0, #4]
    clear();
   b6518:	f7ff fff3 	bl	b6502 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b651c:	7191      	strb	r1, [r2, #6]
}
   b651e:	4610      	mov	r0, r2
   b6520:	bd08      	pop	{r3, pc}
	...

000b6524 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b6524:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b6526:	2301      	movs	r3, #1
   b6528:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b652a:	4b05      	ldr	r3, [pc, #20]	; (b6540 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b652c:	4602      	mov	r2, r0
   b652e:	f103 0110 	add.w	r1, r3, #16
   b6532:	f853 4b04 	ldr.w	r4, [r3], #4
   b6536:	f842 4b04 	str.w	r4, [r2], #4
   b653a:	428b      	cmp	r3, r1
   b653c:	d1f9      	bne.n	b6532 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b653e:	bd10      	pop	{r4, pc}
   b6540:	000ba08e 	.word	0x000ba08e

000b6544 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   b6544:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   b6546:	690b      	ldr	r3, [r1, #16]
   b6548:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b654a:	f101 0210 	add.w	r2, r1, #16
   b654e:	4603      	mov	r3, r0
   b6550:	f851 4b04 	ldr.w	r4, [r1], #4
   b6554:	f843 4b04 	str.w	r4, [r3], #4
   b6558:	4291      	cmp	r1, r2
   b655a:	d1f9      	bne.n	b6550 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   b655c:	bd10      	pop	{r4, pc}

000b655e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b655e:	b510      	push	{r4, lr}
    if (uuid128) {
   b6560:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6562:	4604      	mov	r4, r0
    if (uuid128) {
   b6564:	b1b1      	cbz	r1, b6594 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b6566:	2a01      	cmp	r2, #1
   b6568:	f101 0210 	add.w	r2, r1, #16
   b656c:	d10a      	bne.n	b6584 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b656e:	4601      	mov	r1, r0
   b6570:	f853 0b04 	ldr.w	r0, [r3], #4
   b6574:	f841 0b04 	str.w	r0, [r1], #4
   b6578:	4293      	cmp	r3, r2
   b657a:	d1f9      	bne.n	b6570 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b657c:	2301      	movs	r3, #1
   b657e:	6123      	str	r3, [r4, #16]
}
   b6580:	4620      	mov	r0, r4
   b6582:	bd10      	pop	{r4, pc}
   b6584:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b6586:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b658a:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b658e:	429a      	cmp	r2, r3
   b6590:	d1f9      	bne.n	b6586 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b6592:	e7f3      	b.n	b657c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b6594:	2210      	movs	r2, #16
   b6596:	f003 f817 	bl	b95c8 <memset>
   b659a:	e7f1      	b.n	b6580 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b659c <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b659c:	b538      	push	{r3, r4, r5, lr}
   b659e:	4604      	mov	r4, r0
   b65a0:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b65a2:	461a      	mov	r2, r3
   b65a4:	f7ff ffdb 	bl	b655e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b65a8:	81a5      	strh	r5, [r4, #12]
}
   b65aa:	4620      	mov	r0, r4
   b65ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000b65b0 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b65b0:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b65b2:	6902      	ldr	r2, [r0, #16]
   b65b4:	b922      	cbnz	r2, b65c0 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b65b6:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b65b8:	3800      	subs	r0, #0
   b65ba:	bf18      	it	ne
   b65bc:	2001      	movne	r0, #1
}
   b65be:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b65c0:	4902      	ldr	r1, [pc, #8]	; (b65cc <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b65c2:	2210      	movs	r2, #16
   b65c4:	f002 ffc8 	bl	b9558 <memcmp>
   b65c8:	e7f6      	b.n	b65b8 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b65ca:	bf00      	nop
   b65cc:	000ba0ae 	.word	0x000ba0ae

000b65d0 <_ZNK8particle7BleUuid4typeEv>:
}
   b65d0:	6900      	ldr	r0, [r0, #16]
   b65d2:	4770      	bx	lr

000b65d4 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b65d4:	b538      	push	{r3, r4, r5, lr}
   b65d6:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b65d8:	2214      	movs	r2, #20
   b65da:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b65dc:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b65de:	f002 fff3 	bl	b95c8 <memset>
    if (type_ == BleUuidType::SHORT) {
   b65e2:	6923      	ldr	r3, [r4, #16]
   b65e4:	b91b      	cbnz	r3, b65ee <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b65e6:	89a3      	ldrh	r3, [r4, #12]
   b65e8:	802b      	strh	r3, [r5, #0]
}
   b65ea:	4628      	mov	r0, r5
   b65ec:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b65ee:	2301      	movs	r3, #1
   b65f0:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b65f2:	4621      	mov	r1, r4
   b65f4:	462b      	mov	r3, r5
   b65f6:	f104 0210 	add.w	r2, r4, #16
   b65fa:	f851 0b04 	ldr.w	r0, [r1], #4
   b65fe:	f843 0b04 	str.w	r0, [r3], #4
   b6602:	4291      	cmp	r1, r2
   b6604:	d1f9      	bne.n	b65fa <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b6606:	e7f0      	b.n	b65ea <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b6608 <_ZNK8particle7BleUuid7shortedEv>:
}
   b6608:	8980      	ldrh	r0, [r0, #12]
   b660a:	4770      	bx	lr

000b660c <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b660c:	4770      	bx	lr

000b660e <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b660e:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6610:	6902      	ldr	r2, [r0, #16]
   b6612:	690b      	ldr	r3, [r1, #16]
   b6614:	429a      	cmp	r2, r3
   b6616:	d106      	bne.n	b6626 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b6618:	2210      	movs	r2, #16
   b661a:	f002 ff9d 	bl	b9558 <memcmp>
   b661e:	fab0 f080 	clz	r0, r0
   b6622:	0940      	lsrs	r0, r0, #5
}
   b6624:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6626:	2000      	movs	r0, #0
   b6628:	e7fc      	b.n	b6624 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b662c <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b662c:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b662e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b6632:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6634:	4b34      	ldr	r3, [pc, #208]	; (b6708 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b6636:	460c      	mov	r4, r1
   b6638:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b663a:	4602      	mov	r2, r0
   b663c:	f103 0110 	add.w	r1, r3, #16
   b6640:	f853 0b04 	ldr.w	r0, [r3], #4
   b6644:	f842 0b04 	str.w	r0, [r2], #4
   b6648:	428b      	cmp	r3, r1
   b664a:	d1f9      	bne.n	b6640 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b664c:	b344      	cbz	r4, b66a0 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b664e:	2124      	movs	r1, #36	; 0x24
   b6650:	4620      	mov	r0, r4
   b6652:	f003 f81c 	bl	b968e <strnlen>
   b6656:	2804      	cmp	r0, #4
   b6658:	f04f 0500 	mov.w	r5, #0
   b665c:	d123      	bne.n	b66a6 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b665e:	f8ad 5004 	strh.w	r5, [sp, #4]
   b6662:	af01      	add	r7, sp, #4
   b6664:	1ca5      	adds	r5, r4, #2
   b6666:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b6668:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b666c:	f7ff fefe 	bl	b646c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b6670:	f1b0 0800 	subs.w	r8, r0, #0
   b6674:	db12      	blt.n	b669c <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b6676:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b667a:	f7ff fef7 	bl	b646c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b667e:	2800      	cmp	r0, #0
   b6680:	db0c      	blt.n	b669c <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b6682:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6684:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b6688:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b668a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b668e:	d1eb      	bne.n	b6668 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b6690:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b6694:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b6696:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b669a:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b669c:	2300      	movs	r3, #0
   b669e:	6133      	str	r3, [r6, #16]
}
   b66a0:	b002      	add	sp, #8
   b66a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b66a6:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b66aa:	2124      	movs	r1, #36	; 0x24
   b66ac:	4620      	mov	r0, r4
   b66ae:	f002 ffee 	bl	b968e <strnlen>
   b66b2:	42a8      	cmp	r0, r5
   b66b4:	d807      	bhi.n	b66c6 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b66b6:	4642      	mov	r2, r8
   b66b8:	2100      	movs	r1, #0
   b66ba:	4630      	mov	r0, r6
}
   b66bc:	b002      	add	sp, #8
   b66be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b66c2:	f002 bf81 	b.w	b95c8 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b66c6:	f1b8 0f00 	cmp.w	r8, #0
   b66ca:	d0e9      	beq.n	b66a0 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b66cc:	5d60      	ldrb	r0, [r4, r5]
   b66ce:	f7ff fecd 	bl	b646c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b66d2:	0603      	lsls	r3, r0, #24
   b66d4:	d415      	bmi.n	b6702 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b66d6:	0100      	lsls	r0, r0, #4
   b66d8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b66dc:	b2c7      	uxtb	r7, r0
   b66de:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b66e2:	2124      	movs	r1, #36	; 0x24
   b66e4:	4620      	mov	r0, r4
   b66e6:	f002 ffd2 	bl	b968e <strnlen>
   b66ea:	3501      	adds	r5, #1
   b66ec:	42a8      	cmp	r0, r5
   b66ee:	d908      	bls.n	b6702 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b66f0:	5d60      	ldrb	r0, [r4, r5]
   b66f2:	f7ff febb 	bl	b646c <_ZN8particle11hexToNibbleEc>
   b66f6:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b66f8:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b66fa:	bfa4      	itt	ge
   b66fc:	4338      	orrge	r0, r7
   b66fe:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6702:	3501      	adds	r5, #1
   b6704:	e7d1      	b.n	b66aa <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b6706:	bf00      	nop
   b6708:	000ba08e 	.word	0x000ba08e

000b670c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b670c:	b513      	push	{r0, r1, r4, lr}
   b670e:	4604      	mov	r4, r0
   b6710:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b6712:	f7ff ff07 	bl	b6524 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b6716:	4620      	mov	r0, r4
   b6718:	9901      	ldr	r1, [sp, #4]
   b671a:	f7ff ff87 	bl	b662c <_ZN8particle7BleUuid9constructEPKc>
}
   b671e:	4620      	mov	r0, r4
   b6720:	b002      	add	sp, #8
   b6722:	bd10      	pop	{r4, pc}

000b6724 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6724:	b430      	push	{r4, r5}
   b6726:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b672a:	b11a      	cbz	r2, b6734 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b672c:	9502      	str	r5, [sp, #8]
}
   b672e:	bc30      	pop	{r4, r5}
   b6730:	f7ff bdd5 	b.w	b62de <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfLen_;
   b6734:	6a00      	ldr	r0, [r0, #32]
}
   b6736:	bc30      	pop	{r4, r5}
   b6738:	4770      	bx	lr

000b673a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b673a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b673c:	4604      	mov	r4, r0
          selfLen_(0) {
   b673e:	221f      	movs	r2, #31
   b6740:	2100      	movs	r1, #0
   b6742:	f002 ff41 	bl	b95c8 <memset>
   b6746:	2300      	movs	r3, #0
   b6748:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b674a:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b674c:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b674e:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6750:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6754:	4619      	mov	r1, r3
   b6756:	f10d 020f 	add.w	r2, sp, #15
   b675a:	4620      	mov	r0, r4
   b675c:	f7ff ffe2 	bl	b6724 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b6760:	4620      	mov	r0, r4
   b6762:	b004      	add	sp, #16
   b6764:	bd10      	pop	{r4, pc}

000b6766 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6766:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   b6768:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b676a:	460e      	mov	r6, r1
   b676c:	ab01      	add	r3, sp, #4
   b676e:	6a01      	ldr	r1, [r0, #32]
   b6770:	4604      	mov	r4, r0
   b6772:	f7ff fd9f 	bl	b62b4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b6776:	4605      	mov	r5, r0
   b6778:	b178      	cbz	r0, b679a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   b677a:	9801      	ldr	r0, [sp, #4]
   b677c:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   b677e:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   b6780:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   b6782:	4421      	add	r1, r4
   b6784:	1b52      	subs	r2, r2, r5
   b6786:	4420      	add	r0, r4
   b6788:	f002 fef6 	bl	b9578 <memcpy>
        selfLen_ -= len;
   b678c:	6a20      	ldr	r0, [r4, #32]
   b678e:	1b40      	subs	r0, r0, r5
   b6790:	6220      	str	r0, [r4, #32]
        remove(type);
   b6792:	4631      	mov	r1, r6
   b6794:	4620      	mov	r0, r4
   b6796:	f7ff ffe6 	bl	b6766 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b679a:	b002      	add	sp, #8
   b679c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b67a0 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b67a0:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b67a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b67a6:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b67a8:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b67aa:	8043      	strh	r3, [r0, #2]
   b67ac:	220e      	movs	r2, #14
   b67ae:	4629      	mov	r1, r5
   b67b0:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b67b2:	7105      	strb	r5, [r0, #4]
   b67b4:	3006      	adds	r0, #6
   b67b6:	f002 ff07 	bl	b95c8 <memset>
   b67ba:	f104 0014 	add.w	r0, r4, #20
   b67be:	f7ff feb1 	bl	b6524 <_ZN8particle7BleUuidC1Ev>
   b67c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b67c6:	f7ff fead 	bl	b6524 <_ZN8particle7BleUuidC1Ev>
   b67ca:	4904      	ldr	r1, [pc, #16]	; (b67dc <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b67cc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b67d0:	f001 faf5 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b67d4:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b67d6:	4620      	mov	r0, r4
   b67d8:	bd38      	pop	{r3, r4, r5, pc}
   b67da:	bf00      	nop
   b67dc:	000b9903 	.word	0x000b9903

000b67e0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b67e0:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b67e2:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b67e6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b67ea:	4293      	cmp	r3, r2
   b67ec:	4618      	mov	r0, r3
   b67ee:	d006      	beq.n	b67fe <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b67f0:	6804      	ldr	r4, [r0, #0]
   b67f2:	8824      	ldrh	r4, [r4, #0]
   b67f4:	428c      	cmp	r4, r1
   b67f6:	f103 0308 	add.w	r3, r3, #8
   b67fa:	d1f6      	bne.n	b67ea <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b67fc:	bd10      	pop	{r4, pc}
        return nullptr;
   b67fe:	2000      	movs	r0, #0
   b6800:	e7fc      	b.n	b67fc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b6804 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b6804:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6806:	4606      	mov	r6, r0
   b6808:	b085      	sub	sp, #20
   b680a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b680c:	460d      	mov	r5, r1
   b680e:	2900      	cmp	r1, #0
   b6810:	d050      	beq.n	b68b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b6812:	2a00      	cmp	r2, #0
   b6814:	d04e      	beq.n	b68b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6816:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b6818:	7823      	ldrb	r3, [r4, #0]
   b681a:	2af4      	cmp	r2, #244	; 0xf4
   b681c:	bf28      	it	cs
   b681e:	22f4      	movcs	r2, #244	; 0xf4
   b6820:	b343      	cbz	r3, b6874 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b6822:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b6824:	0798      	lsls	r0, r3, #30
   b6826:	d509      	bpl.n	b683c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b6828:	89a0      	ldrh	r0, [r4, #12]
   b682a:	9203      	str	r2, [sp, #12]
   b682c:	2300      	movs	r3, #0
   b682e:	f7ff f947 	bl	b5ac0 <hal_ble_gatt_server_set_characteristic_value>
   b6832:	2800      	cmp	r0, #0
   b6834:	9a03      	ldr	r2, [sp, #12]
   b6836:	da03      	bge.n	b6840 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b6838:	b005      	add	sp, #20
   b683a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b683c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6840:	6834      	ldr	r4, [r6, #0]
   b6842:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b6844:	06d9      	lsls	r1, r3, #27
   b6846:	d509      	bpl.n	b685c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b6848:	2f01      	cmp	r7, #1
   b684a:	d007      	beq.n	b685c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b684c:	89a0      	ldrh	r0, [r4, #12]
   b684e:	2300      	movs	r3, #0
   b6850:	4629      	mov	r1, r5
}
   b6852:	b005      	add	sp, #20
   b6854:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6858:	f7ff b964 	b.w	b5b24 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b685c:	069b      	lsls	r3, r3, #26
   b685e:	d5eb      	bpl.n	b6838 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6860:	2f02      	cmp	r7, #2
   b6862:	d0e9      	beq.n	b6838 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6864:	89a0      	ldrh	r0, [r4, #12]
   b6866:	2300      	movs	r3, #0
   b6868:	4629      	mov	r1, r5
}
   b686a:	b005      	add	sp, #20
   b686c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6870:	f7ff b962 	b.w	b5b38 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b6874:	8860      	ldrh	r0, [r4, #2]
   b6876:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b687a:	4288      	cmp	r0, r1
   b687c:	d01c      	beq.n	b68b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b687e:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b6880:	074e      	lsls	r6, r1, #29
   b6882:	d501      	bpl.n	b6888 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b6884:	2f01      	cmp	r7, #1
   b6886:	d104      	bne.n	b6892 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6888:	070b      	lsls	r3, r1, #28
   b688a:	d409      	bmi.n	b68a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b688c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6890:	e7d2      	b.n	b6838 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6892:	89a1      	ldrh	r1, [r4, #12]
   b6894:	9300      	str	r3, [sp, #0]
   b6896:	4613      	mov	r3, r2
   b6898:	462a      	mov	r2, r5
   b689a:	f7ff f925 	bl	b5ae8 <hal_ble_gatt_client_write_without_response>
   b689e:	e7cb      	b.n	b6838 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b68a0:	2f02      	cmp	r7, #2
   b68a2:	d0f3      	beq.n	b688c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b68a4:	2300      	movs	r3, #0
   b68a6:	89a1      	ldrh	r1, [r4, #12]
   b68a8:	9300      	str	r3, [sp, #0]
   b68aa:	4613      	mov	r3, r2
   b68ac:	462a      	mov	r2, r5
   b68ae:	f7ff f911 	bl	b5ad4 <hal_ble_gatt_client_write_with_response>
   b68b2:	e7c1      	b.n	b6838 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b68b4:	4802      	ldr	r0, [pc, #8]	; (b68c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b68b6:	e7bf      	b.n	b6838 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b68b8:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b68bc:	e7bc      	b.n	b6838 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b68be:	bf00      	nop
   b68c0:	fffffef2 	.word	0xfffffef2

000b68c4 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   b68c4:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   b68c6:	688a      	ldr	r2, [r1, #8]
   b68c8:	6809      	ldr	r1, [r1, #0]
   b68ca:	f7ff bf9b 	b.w	b6804 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b68ce <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b68ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b68d0:	460c      	mov	r4, r1
   b68d2:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b68d4:	21f4      	movs	r1, #244	; 0xf4
   b68d6:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b68d8:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b68da:	f002 fed8 	bl	b968e <strnlen>
   b68de:	9b01      	ldr	r3, [sp, #4]
   b68e0:	4602      	mov	r2, r0
   b68e2:	4621      	mov	r1, r4
   b68e4:	4628      	mov	r0, r5
}
   b68e6:	b003      	add	sp, #12
   b68e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b68ec:	f7ff bf8a 	b.w	b6804 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b68f0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b68f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b68f4:	2600      	movs	r6, #0
   b68f6:	6006      	str	r6, [r0, #0]
   b68f8:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b68fa:	2028      	movs	r0, #40	; 0x28
   b68fc:	460c      	mov	r4, r1
   b68fe:	f7fd fbca 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6902:	1e05      	subs	r5, r0, #0
   b6904:	f105 080c 	add.w	r8, r5, #12
   b6908:	d00f      	beq.n	b692a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b690a:	2301      	movs	r3, #1
   b690c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6910:	4b08      	ldr	r3, [pc, #32]	; (b6934 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b6912:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b6914:	4640      	mov	r0, r8
   b6916:	f7ff fe05 	bl	b6524 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b691a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b691c:	622e      	str	r6, [r5, #32]
   b691e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b6922:	4646      	mov	r6, r8
   b6924:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6926:	6823      	ldr	r3, [r4, #0]
   b6928:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b692a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b692e:	4638      	mov	r0, r7
   b6930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6934:	000ba050 	.word	0x000ba050

000b6938 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6938:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b693a:	2500      	movs	r5, #0
   b693c:	6005      	str	r5, [r0, #0]
   b693e:	4606      	mov	r6, r0
   b6940:	2030      	movs	r0, #48	; 0x30
   b6942:	f7fd fba8 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6946:	4604      	mov	r4, r0
   b6948:	b188      	cbz	r0, b696e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b694a:	2301      	movs	r3, #1
   b694c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6950:	4b09      	ldr	r3, [pc, #36]	; (b6978 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b6952:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b6954:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6958:	8183      	strh	r3, [r0, #12]
   b695a:	300e      	adds	r0, #14
   b695c:	f7ff fdd7 	bl	b650e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6960:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b6964:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6968:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b696c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b696e:	6074      	str	r4, [r6, #4]
   b6970:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b6972:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6974:	4630      	mov	r0, r6
   b6976:	bd70      	pop	{r4, r5, r6, pc}
   b6978:	000ba06c 	.word	0x000ba06c

000b697c <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b697c:	b513      	push	{r0, r1, r4, lr}
   b697e:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6980:	a801      	add	r0, sp, #4
   b6982:	f7ff fd89 	bl	b6498 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b6986:	6823      	ldr	r3, [r4, #0]
   b6988:	881c      	ldrh	r4, [r3, #0]
   b698a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b698e:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b6990:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b6992:	bf18      	it	ne
   b6994:	2401      	movne	r4, #1
    WiringBleLock lk;
   b6996:	f7ff fd8d 	bl	b64b4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b699a:	4620      	mov	r0, r4
   b699c:	b002      	add	sp, #8
   b699e:	bd10      	pop	{r4, pc}

000b69a0 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b69a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b69a2:	460d      	mov	r5, r1
   b69a4:	4604      	mov	r4, r0
    WiringBleLock lk;
   b69a6:	a801      	add	r0, sp, #4
   b69a8:	f7ff fd76 	bl	b6498 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b69ac:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b69ae:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b69b2:	6023      	str	r3, [r4, #0]
   b69b4:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b69b8:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b69ba:	a801      	add	r0, sp, #4
   b69bc:	f7ff fd7a 	bl	b64b4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b69c0:	4620      	mov	r0, r4
   b69c2:	b003      	add	sp, #12
   b69c4:	bd30      	pop	{r4, r5, pc}

000b69c6 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b69c6:	b530      	push	{r4, r5, lr}
   b69c8:	4605      	mov	r5, r0
   b69ca:	b087      	sub	sp, #28
   b69cc:	460c      	mov	r4, r1
    WiringBleLock lk;
   b69ce:	a801      	add	r0, sp, #4
   b69d0:	f7ff fd62 	bl	b6498 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b69d4:	682a      	ldr	r2, [r5, #0]
   b69d6:	6823      	ldr	r3, [r4, #0]
   b69d8:	8812      	ldrh	r2, [r2, #0]
   b69da:	881b      	ldrh	r3, [r3, #0]
   b69dc:	429a      	cmp	r2, r3
   b69de:	d10d      	bne.n	b69fc <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b69e0:	4629      	mov	r1, r5
   b69e2:	a802      	add	r0, sp, #8
   b69e4:	f7ff ffdc 	bl	b69a0 <_ZNK8particle13BlePeerDevice7addressEv>
   b69e8:	4621      	mov	r1, r4
   b69ea:	a804      	add	r0, sp, #16
   b69ec:	f7ff ffd8 	bl	b69a0 <_ZNK8particle13BlePeerDevice7addressEv>
   b69f0:	a904      	add	r1, sp, #16
   b69f2:	a802      	add	r0, sp, #8
   b69f4:	f7ff fd77 	bl	b64e6 <_ZNK8particle10BleAddresseqERKS0_>
   b69f8:	4604      	mov	r4, r0
   b69fa:	b900      	cbnz	r0, b69fe <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b69fc:	2400      	movs	r4, #0
    WiringBleLock lk;
   b69fe:	a801      	add	r0, sp, #4
   b6a00:	f7ff fd58 	bl	b64b4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6a04:	4620      	mov	r0, r4
   b6a06:	b007      	add	sp, #28
   b6a08:	bd30      	pop	{r4, r5, pc}
	...

000b6a0c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6a0c:	b510      	push	{r4, lr}
   b6a0e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b6a10:	2054      	movs	r0, #84	; 0x54
   b6a12:	f7fd fb40 	bl	b4096 <_Znwj>
   b6a16:	4601      	mov	r1, r0
   b6a18:	b160      	cbz	r0, b6a34 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b6a1a:	2300      	movs	r3, #0
   b6a1c:	e9c0 3300 	strd	r3, r3, [r0]
   b6a20:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6a24:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6a28:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b6a2c:	6203      	str	r3, [r0, #32]
   b6a2e:	62c3      	str	r3, [r0, #44]	; 0x2c
   b6a30:	63c3      	str	r3, [r0, #60]	; 0x3c
   b6a32:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6a34:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b6a36:	b919      	cbnz	r1, b6a40 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   b6a38:	4a09      	ldr	r2, [pc, #36]	; (b6a60 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b6a3a:	200a      	movs	r0, #10
   b6a3c:	f7ff fa8e 	bl	b5f5c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b6a40:	2000      	movs	r0, #0
   b6a42:	f7ff f801 	bl	b5a48 <hal_ble_stack_init>
   b6a46:	b120      	cbz	r0, b6a52 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   b6a48:	4a05      	ldr	r2, [pc, #20]	; (b6a60 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b6a4a:	2100      	movs	r1, #0
   b6a4c:	200a      	movs	r0, #10
   b6a4e:	f7ff fa85 	bl	b5f5c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b6a52:	6821      	ldr	r1, [r4, #0]
   b6a54:	4803      	ldr	r0, [pc, #12]	; (b6a64 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6a56:	2200      	movs	r2, #0
   b6a58:	f7ff f85a 	bl	b5b10 <hal_ble_set_callback_on_periph_link_events>
}
   b6a5c:	4620      	mov	r0, r4
   b6a5e:	bd10      	pop	{r4, pc}
   b6a60:	000b5b9d 	.word	0x000b5b9d
   b6a64:	000b6e81 	.word	0x000b6e81

000b6a68 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b6a68:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b6a6a:	4c0b      	ldr	r4, [pc, #44]	; (b6a98 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6a6c:	7823      	ldrb	r3, [r4, #0]
   b6a6e:	f3bf 8f5b 	dmb	ish
   b6a72:	07db      	lsls	r3, r3, #31
   b6a74:	d40e      	bmi.n	b6a94 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   b6a76:	4620      	mov	r0, r4
   b6a78:	f7fd fb13 	bl	b40a2 <__cxa_guard_acquire>
   b6a7c:	b150      	cbz	r0, b6a94 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   b6a7e:	4807      	ldr	r0, [pc, #28]	; (b6a9c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6a80:	f7ff ffc4 	bl	b6a0c <_ZN8particle14BleLocalDeviceC1Ev>
   b6a84:	4620      	mov	r0, r4
   b6a86:	f7fd fb11 	bl	b40ac <__cxa_guard_release>
   b6a8a:	4a05      	ldr	r2, [pc, #20]	; (b6aa0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   b6a8c:	4905      	ldr	r1, [pc, #20]	; (b6aa4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   b6a8e:	4803      	ldr	r0, [pc, #12]	; (b6a9c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6a90:	f002 f9b4 	bl	b8dfc <__aeabi_atexit>
    return instance;
}
   b6a94:	4801      	ldr	r0, [pc, #4]	; (b6a9c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6a96:	bd10      	pop	{r4, pc}
   b6a98:	2003e62c 	.word	0x2003e62c
   b6a9c:	2003e638 	.word	0x2003e638
   b6aa0:	2003da58 	.word	0x2003da58
   b6aa4:	000b6ca5 	.word	0x000b6ca5

000b6aa8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6aa8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b6aaa:	6803      	ldr	r3, [r0, #0]
   b6aac:	3b09      	subs	r3, #9
   b6aae:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6ab0:	b08d      	sub	sp, #52	; 0x34
   b6ab2:	4604      	mov	r4, r0
   b6ab4:	460d      	mov	r5, r1
    switch (event->type) {
   b6ab6:	d811      	bhi.n	b6adc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b6ab8:	f7ff ffd6 	bl	b6a68 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6abc:	88a1      	ldrh	r1, [r4, #4]
   b6abe:	6800      	ldr	r0, [r0, #0]
   b6ac0:	f7ff fe8e 	bl	b67e0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b6ac4:	4603      	mov	r3, r0
   b6ac6:	b958      	cbnz	r0, b6ae0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b6ac8:	2220      	movs	r2, #32
   b6aca:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b6ace:	4a0b      	ldr	r2, [pc, #44]	; (b6afc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b6ad0:	9200      	str	r2, [sp, #0]
   b6ad2:	490b      	ldr	r1, [pc, #44]	; (b6b00 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b6ad4:	aa04      	add	r2, sp, #16
   b6ad6:	2032      	movs	r0, #50	; 0x32
   b6ad8:	f7ff fa48 	bl	b5f6c <log_message>
}
   b6adc:	b00d      	add	sp, #52	; 0x34
   b6ade:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b6ae0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b6ae2:	2a00      	cmp	r2, #0
   b6ae4:	d0fa      	beq.n	b6adc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b6ae6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6aea:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b6aee:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b6af2:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b6af4:	aa04      	add	r2, sp, #16
   b6af6:	a903      	add	r1, sp, #12
   b6af8:	47a0      	blx	r4
}
   b6afa:	e7ef      	b.n	b6adc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b6afc:	000b9f5d 	.word	0x000b9f5d
   b6b00:	000b9f36 	.word	0x000b9f36

000b6b04 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b6b04:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b6b06:	2000      	movs	r0, #0
   b6b08:	f7fe ff9e 	bl	b5a48 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b6b0c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6b10:	bd08      	pop	{r3, pc}

000b6b12 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b6b12:	4608      	mov	r0, r1
   b6b14:	b911      	cbnz	r1, b6b1c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b6b16:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b6b18:	f7fe bfa6 	b.w	b5a68 <hal_ble_gap_set_advertising_data>
   b6b1c:	6a09      	ldr	r1, [r1, #32]
   b6b1e:	2200      	movs	r2, #0
   b6b20:	e7fa      	b.n	b6b18 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b6b22 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b6b22:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   b6b24:	4608      	mov	r0, r1
   b6b26:	b929      	cbnz	r1, b6b34 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b6b28:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b6b2a:	b003      	add	sp, #12
   b6b2c:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6b30:	f7fe bfa2 	b.w	b5a78 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b6b34:	2101      	movs	r1, #1
   b6b36:	9001      	str	r0, [sp, #4]
   b6b38:	f7ff fe15 	bl	b6766 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6b3c:	9801      	ldr	r0, [sp, #4]
   b6b3e:	2200      	movs	r2, #0
   b6b40:	6a01      	ldr	r1, [r0, #32]
   b6b42:	e7f2      	b.n	b6b2a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000b6b44 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b6b44:	b538      	push	{r3, r4, r5, lr}
   b6b46:	4604      	mov	r4, r0
   b6b48:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b6b4a:	f7ff ffe2 	bl	b6b12 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b6b4e:	2800      	cmp	r0, #0
   b6b50:	db0a      	blt.n	b6b68 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b6b52:	4629      	mov	r1, r5
   b6b54:	4620      	mov	r0, r4
   b6b56:	f7ff ffe4 	bl	b6b22 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b6b5a:	2800      	cmp	r0, #0
   b6b5c:	db04      	blt.n	b6b68 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b6b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b6b62:	2000      	movs	r0, #0
   b6b64:	f7fe bf90 	b.w	b5a88 <hal_ble_gap_start_advertising>
}
   b6b68:	bd38      	pop	{r3, r4, r5, pc}

000b6b6a <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b6b6a:	6803      	ldr	r3, [r0, #0]
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b6b6c:	69d8      	ldr	r0, [r3, #28]
}
   b6b6e:	2800      	cmp	r0, #0
   b6b70:	bfd4      	ite	le
   b6b72:	2000      	movle	r0, #0
   b6b74:	2001      	movgt	r0, #1
   b6b76:	4770      	bx	lr

000b6b78 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6b78:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6b7a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6b7c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6b7e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6b80:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6b82:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6b84:	f7fd fa87 	bl	b4096 <_Znwj>
   b6b88:	b118      	cbz	r0, b6b92 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6b8a:	682b      	ldr	r3, [r5, #0]
   b6b8c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6b8e:	686b      	ldr	r3, [r5, #4]
   b6b90:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6b92:	4b03      	ldr	r3, [pc, #12]	; (b6ba0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b6b94:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6b96:	4b03      	ldr	r3, [pc, #12]	; (b6ba4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6b98:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6b9a:	60a3      	str	r3, [r4, #8]
      }
   b6b9c:	4620      	mov	r0, r4
   b6b9e:	bd38      	pop	{r3, r4, r5, pc}
   b6ba0:	000b6385 	.word	0x000b6385
   b6ba4:	000b63dd 	.word	0x000b63dd

000b6ba8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6ba8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6baa:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6bac:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6bae:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6bb0:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6bb2:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6bb4:	f7fd fa6f 	bl	b4096 <_Znwj>
   b6bb8:	b118      	cbz	r0, b6bc2 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   b6bba:	682b      	ldr	r3, [r5, #0]
   b6bbc:	6003      	str	r3, [r0, #0]
   b6bbe:	686b      	ldr	r3, [r5, #4]
   b6bc0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6bc2:	4b03      	ldr	r3, [pc, #12]	; (b6bd0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b6bc4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6bc6:	4b03      	ldr	r3, [pc, #12]	; (b6bd4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6bc8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6bca:	60a3      	str	r3, [r4, #8]
      }
   b6bcc:	4620      	mov	r0, r4
   b6bce:	bd38      	pop	{r3, r4, r5, pc}
   b6bd0:	000b6379 	.word	0x000b6379
   b6bd4:	000b639d 	.word	0x000b639d

000b6bd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b6bd8:	680b      	ldr	r3, [r1, #0]
   b6bda:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b6bdc:	b113      	cbz	r3, b6be4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b6bde:	685a      	ldr	r2, [r3, #4]
   b6be0:	3201      	adds	r2, #1
   b6be2:	605a      	str	r2, [r3, #4]
      }
   b6be4:	4770      	bx	lr

000b6be6 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b6be6:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6be8:	f851 3b04 	ldr.w	r3, [r1], #4
   b6bec:	4604      	mov	r4, r0
   b6bee:	f840 3b04 	str.w	r3, [r0], #4
   b6bf2:	f7ff fff1 	bl	b6bd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b6bf6:	6823      	ldr	r3, [r4, #0]
   b6bf8:	b90b      	cbnz	r3, b6bfe <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b6bfa:	f7ff fbb5 	bl	b6368 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b6bfe:	4620      	mov	r0, r4
   b6c00:	bd10      	pop	{r4, pc}

000b6c02 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6c02:	b510      	push	{r4, lr}
   b6c04:	f851 3b04 	ldr.w	r3, [r1], #4
   b6c08:	4604      	mov	r4, r0
   b6c0a:	f840 3b04 	str.w	r3, [r0], #4
   b6c0e:	f7ff ffe3 	bl	b6bd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6c12:	4620      	mov	r0, r4
   b6c14:	bd10      	pop	{r4, pc}

000b6c16 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6c16:	b510      	push	{r4, lr}
   b6c18:	f851 3b04 	ldr.w	r3, [r1], #4
   b6c1c:	4604      	mov	r4, r0
   b6c1e:	f840 3b04 	str.w	r3, [r0], #4
   b6c22:	f7ff ffd9 	bl	b6bd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6c26:	4620      	mov	r0, r4
   b6c28:	bd10      	pop	{r4, pc}

000b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b6c2a:	b510      	push	{r4, lr}
   b6c2c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b6c2e:	6800      	ldr	r0, [r0, #0]
   b6c30:	b108      	cbz	r0, b6c36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b6c32:	f7ff fc07 	bl	b6444 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b6c36:	4620      	mov	r0, r4
   b6c38:	bd10      	pop	{r4, pc}

000b6c3a <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b6c3a:	b510      	push	{r4, lr}
   b6c3c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6c3e:	3004      	adds	r0, #4
   b6c40:	f7ff fff3 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6c44:	4620      	mov	r0, r4
   b6c46:	bd10      	pop	{r4, pc}

000b6c48 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6c48:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6c4a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6c4e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6c50:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6c54:	42ae      	cmp	r6, r5
   b6c56:	d004      	beq.n	b6c62 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b6c58:	1d28      	adds	r0, r5, #4
   b6c5a:	f7ff ffe6 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6c5e:	3508      	adds	r5, #8
   b6c60:	e7f8      	b.n	b6c54 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6c62:	6820      	ldr	r0, [r4, #0]
   b6c64:	f7ff fa80 	bl	b6168 <free>
}
   b6c68:	4620      	mov	r0, r4
   b6c6a:	bd70      	pop	{r4, r5, r6, pc}

000b6c6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6c6c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6c6e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6c72:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6c74:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6c78:	42ae      	cmp	r6, r5
   b6c7a:	d004      	beq.n	b6c86 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b6c7c:	1d28      	adds	r0, r5, #4
   b6c7e:	f7ff ffd4 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6c82:	3508      	adds	r5, #8
   b6c84:	e7f8      	b.n	b6c78 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6c86:	6820      	ldr	r0, [r4, #0]
   b6c88:	f7ff fa6e 	bl	b6168 <free>
}
   b6c8c:	4620      	mov	r0, r4
   b6c8e:	bd70      	pop	{r4, r5, r6, pc}

000b6c90 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6c90:	b510      	push	{r4, lr}
   b6c92:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b6c94:	3024      	adds	r0, #36	; 0x24
   b6c96:	f7ff ffe9 	bl	b6c6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6c9a:	f104 0018 	add.w	r0, r4, #24
   b6c9e:	f7ff ffd3 	bl	b6c48 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b6ca2:	bd10      	pop	{r4, pc}

000b6ca4 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   b6ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   b6ca6:	6804      	ldr	r4, [r0, #0]
   b6ca8:	4606      	mov	r6, r0
   b6caa:	b324      	cbz	r4, b6cf6 <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   b6cac:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6cb0:	f7ff fbb4 	bl	b641c <_ZNSt14_Function_baseD1Ev>
   b6cb4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6cb8:	f7ff fbb0 	bl	b641c <_ZNSt14_Function_baseD1Ev>
   b6cbc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6cc0:	f7ff fbac 	bl	b641c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6cc4:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b6cc8:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6ccc:	42af      	cmp	r7, r5
   b6cce:	d004      	beq.n	b6cda <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   b6cd0:	1d28      	adds	r0, r5, #4
   b6cd2:	f7ff ffaa 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6cd6:	3508      	adds	r5, #8
   b6cd8:	e7f8      	b.n	b6ccc <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   b6cda:	69a0      	ldr	r0, [r4, #24]
   b6cdc:	f7ff fa44 	bl	b6168 <free>
    ~BleLocalDeviceImpl() = default;
   b6ce0:	f104 000c 	add.w	r0, r4, #12
   b6ce4:	f7ff ffc2 	bl	b6c6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6ce8:	4620      	mov	r0, r4
   b6cea:	f7ff ffad 	bl	b6c48 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b6cee:	2154      	movs	r1, #84	; 0x54
   b6cf0:	4620      	mov	r0, r4
   b6cf2:	f002 f888 	bl	b8e06 <_ZdlPvj>
   b6cf6:	4630      	mov	r0, r6
   b6cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6cfa <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b6cfa:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b6cfc:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6cfe:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b6d02:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b6d06:	6803      	ldr	r3, [r0, #0]
   b6d08:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6d0a:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6d0c:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b6d0e:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b6d10:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b6d12:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b6d14:	f7ff ff89 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b6d18:	b002      	add	sp, #8
   b6d1a:	bd10      	pop	{r4, pc}

000b6d1c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b6d1c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6d1e:	b510      	push	{r4, lr}
      if (_M_empty())
   b6d20:	b90a      	cbnz	r2, b6d26 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b6d22:	f002 f874 	bl	b8e0e <_ZSt25__throw_bad_function_callv>
    }
   b6d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6d2a:	68c3      	ldr	r3, [r0, #12]
   b6d2c:	4718      	bx	r3

000b6d2e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
inline void spark::Vector<T, AllocatorT>::clear() {
   b6d2e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6d30:	e9d0 5300 	ldrd	r5, r3, [r0]
inline void spark::Vector<T, AllocatorT>::clear() {
   b6d34:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6d36:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6d3a:	42ae      	cmp	r6, r5
   b6d3c:	d004      	beq.n	b6d48 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
      ~__shared_ptr() = default;
   b6d3e:	1d28      	adds	r0, r5, #4
   b6d40:	f7ff ff73 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6d44:	3508      	adds	r5, #8
   b6d46:	e7f8      	b.n	b6d3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
    size_ = 0;
   b6d48:	2300      	movs	r3, #0
   b6d4a:	6063      	str	r3, [r4, #4]
}
   b6d4c:	bd70      	pop	{r4, r5, r6, pc}

000b6d4e <_ZNK8particle14BleLocalDevice3offEv>:
int BleLocalDevice::off() const {
   b6d4e:	b513      	push	{r0, r1, r4, lr}
   b6d50:	4604      	mov	r4, r0
    CHECK(hal_ble_stack_deinit(nullptr));
   b6d52:	2000      	movs	r0, #0
   b6d54:	f7fe fe80 	bl	b5a58 <hal_ble_stack_deinit>
   b6d58:	2800      	cmp	r0, #0
   b6d5a:	db0a      	blt.n	b6d72 <_ZNK8particle14BleLocalDevice3offEv+0x24>
        WiringBleLock lk;
   b6d5c:	a801      	add	r0, sp, #4
   b6d5e:	f7ff fb9b 	bl	b6498 <_ZN8particle3ble13WiringBleLockC1Ev>
        return peers_;
   b6d62:	6820      	ldr	r0, [r4, #0]
        impl()->peers().clear();
   b6d64:	3018      	adds	r0, #24
   b6d66:	f7ff ffe2 	bl	b6d2e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
        WiringBleLock lk;
   b6d6a:	a801      	add	r0, sp, #4
   b6d6c:	f7ff fba2 	bl	b64b4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b6d70:	2000      	movs	r0, #0
}
   b6d72:	b002      	add	sp, #8
   b6d74:	bd10      	pop	{r4, pc}

000b6d76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6d76:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6d7a:	4604      	mov	r4, r0
   b6d7c:	460d      	mov	r5, r1
   b6d7e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6d80:	d914      	bls.n	b6dac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6d82:	4290      	cmp	r0, r2
   b6d84:	d213      	bcs.n	b6dae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6d86:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6d8a:	1a75      	subs	r5, r6, r1
   b6d8c:	f1a1 0708 	sub.w	r7, r1, #8
   b6d90:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6d92:	42b7      	cmp	r7, r6
   b6d94:	d018      	beq.n	b6dc8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6d96:	b11c      	cbz	r4, b6da0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6d98:	4631      	mov	r1, r6
   b6d9a:	4620      	mov	r0, r4
   b6d9c:	f7ff ff3b 	bl	b6c16 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6da0:	1d30      	adds	r0, r6, #4
   b6da2:	f7ff ff42 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6da6:	3e08      	subs	r6, #8
   b6da8:	3c08      	subs	r4, #8
   b6daa:	e7f2      	b.n	b6d92 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6dac:	d00c      	beq.n	b6dc8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6dae:	42b5      	cmp	r5, r6
   b6db0:	d00a      	beq.n	b6dc8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6db2:	b11c      	cbz	r4, b6dbc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6db4:	4629      	mov	r1, r5
   b6db6:	4620      	mov	r0, r4
   b6db8:	f7ff ff2d 	bl	b6c16 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6dbc:	1d28      	adds	r0, r5, #4
   b6dbe:	f7ff ff34 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6dc2:	3508      	adds	r5, #8
   b6dc4:	3408      	adds	r4, #8
   b6dc6:	e7f2      	b.n	b6dae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6dca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6dca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6dcc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6dce:	6846      	ldr	r6, [r0, #4]
   b6dd0:	4668      	mov	r0, sp
   b6dd2:	f7ff ff20 	bl	b6c16 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6dd6:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b6dda:	429f      	cmp	r7, r3
   b6ddc:	db12      	blt.n	b6e04 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b6dde:	3701      	adds	r7, #1
        if (n > 0) {
   b6de0:	2f00      	cmp	r7, #0
   b6de2:	dd29      	ble.n	b6e38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b6de4:	00f8      	lsls	r0, r7, #3
   b6de6:	f7ff f9b7 	bl	b6158 <malloc>
            if (!d) {
   b6dea:	4605      	mov	r5, r0
   b6dec:	b1f0      	cbz	r0, b6e2c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b6dee:	e9d4 1200 	ldrd	r1, r2, [r4]
   b6df2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6df6:	f7ff ffbe 	bl	b6d76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6dfa:	6820      	ldr	r0, [r4, #0]
   b6dfc:	f7ff f9b4 	bl	b6168 <free>
        data_ = d;
   b6e00:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b6e02:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b6e04:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6e06:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6e08:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b6e0c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6e10:	4631      	mov	r1, r6
   b6e12:	f106 0008 	add.w	r0, r6, #8
   b6e16:	f7ff ffae 	bl	b6d76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6e1a:	b11e      	cbz	r6, b6e24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b6e1c:	4669      	mov	r1, sp
   b6e1e:	4630      	mov	r0, r6
   b6e20:	f7ff fef9 	bl	b6c16 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b6e24:	6863      	ldr	r3, [r4, #4]
   b6e26:	3301      	adds	r3, #1
   b6e28:	6063      	str	r3, [r4, #4]
    return true;
   b6e2a:	2501      	movs	r5, #1
   b6e2c:	a801      	add	r0, sp, #4
   b6e2e:	f7ff fefc 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6e32:	4628      	mov	r0, r5
   b6e34:	b003      	add	sp, #12
   b6e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b6e38:	2500      	movs	r5, #0
   b6e3a:	e7de      	b.n	b6dfa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b6e3c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b6e3e:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6e42:	4605      	mov	r5, r0
   b6e44:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b6e46:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b6e4a:	42a6      	cmp	r6, r4
   b6e4c:	d005      	beq.n	b6e5a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b6e4e:	4639      	mov	r1, r7
   b6e50:	4620      	mov	r0, r4
   b6e52:	f7ff fdb8 	bl	b69c6 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b6e56:	b108      	cbz	r0, b6e5c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b6e58:	b914      	cbnz	r4, b6e60 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b6e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b6e5c:	3408      	adds	r4, #8
   b6e5e:	e7f4      	b.n	b6e4a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b6e60:	1d20      	adds	r0, r4, #4
   b6e62:	f7ff fee2 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b6e66:	e9d5 3200 	ldrd	r3, r2, [r5]
   b6e6a:	f104 0108 	add.w	r1, r4, #8
   b6e6e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6e72:	4620      	mov	r0, r4
   b6e74:	f7ff ff7f 	bl	b6d76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b6e78:	686b      	ldr	r3, [r5, #4]
   b6e7a:	3b01      	subs	r3, #1
   b6e7c:	606b      	str	r3, [r5, #4]
    return true;
   b6e7e:	e7ec      	b.n	b6e5a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>

000b6e80 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b6e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6e84:	4605      	mov	r5, r0
   b6e86:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b6e88:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b6e8a:	460c      	mov	r4, r1
        WiringBleLock lk;
   b6e8c:	f7ff fb04 	bl	b6498 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b6e90:	682e      	ldr	r6, [r5, #0]
   b6e92:	2e04      	cmp	r6, #4
   b6e94:	d06d      	beq.n	b6f72 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf2>
   b6e96:	d807      	bhi.n	b6ea8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   b6e98:	2e03      	cmp	r6, #3
   b6e9a:	d02a      	beq.n	b6ef2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x72>
        WiringBleLock lk;
   b6e9c:	a803      	add	r0, sp, #12
   b6e9e:	f7ff fb09 	bl	b64b4 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b6ea2:	b00e      	add	sp, #56	; 0x38
   b6ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   b6ea8:	f1a6 030c 	sub.w	r3, r6, #12
   b6eac:	2b04      	cmp	r3, #4
   b6eae:	d8f5      	bhi.n	b6e9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b6eb0:	89a9      	ldrh	r1, [r5, #12]
   b6eb2:	4620      	mov	r0, r4
   b6eb4:	f7ff fc94 	bl	b67e0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b6eb8:	4607      	mov	r7, r0
   b6eba:	2800      	cmp	r0, #0
   b6ebc:	d0ee      	beq.n	b6e9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   b6ebe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b6ec0:	2b00      	cmp	r3, #0
   b6ec2:	d0eb      	beq.n	b6e9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   b6ec4:	2210      	movs	r2, #16
   b6ec6:	2100      	movs	r1, #0
   b6ec8:	a807      	add	r0, sp, #28
   b6eca:	f002 fb7d 	bl	b95c8 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b6ece:	2e0d      	cmp	r6, #13
                        };
   b6ed0:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   b6ed2:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b6ed6:	d002      	beq.n	b6ede <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x5e>
   b6ed8:	2e10      	cmp	r6, #16
   b6eda:	f040 8092 	bne.w	b7002 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x182>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   b6ede:	686b      	ldr	r3, [r5, #4]
   b6ee0:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b6ee2:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   b6ee4:	9308      	str	r3, [sp, #32]
   b6ee6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6ee8:	a906      	add	r1, sp, #24
   b6eea:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6eee:	4798      	blx	r3
   b6ef0:	e7d4      	b.n	b6e9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   b6ef2:	a804      	add	r0, sp, #16
   b6ef4:	f7ff fd20 	bl	b6938 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b6ef8:	9b04      	ldr	r3, [sp, #16]
   b6efa:	89aa      	ldrh	r2, [r5, #12]
   b6efc:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b6efe:	6869      	ldr	r1, [r5, #4]
   b6f00:	9804      	ldr	r0, [sp, #16]
   b6f02:	3108      	adds	r1, #8
   b6f04:	3002      	adds	r0, #2
   b6f06:	f7ff fae1 	bl	b64cc <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b6f0a:	a904      	add	r1, sp, #16
   b6f0c:	a806      	add	r0, sp, #24
   b6f0e:	f7ff fe82 	bl	b6c16 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b6f12:	a906      	add	r1, sp, #24
   b6f14:	f104 0018 	add.w	r0, r4, #24
   b6f18:	f7ff ff57 	bl	b6dca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b6f1c:	4605      	mov	r5, r0
   b6f1e:	a807      	add	r0, sp, #28
   b6f20:	f7ff fe83 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6f24:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b6f26:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b6f28:	b98d      	cbnz	r5, b6f4e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xce>
                    LOG(ERROR, "Failed to append peer Central device.");
   b6f2a:	4b3e      	ldr	r3, [pc, #248]	; (b7024 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   b6f2c:	493e      	ldr	r1, [pc, #248]	; (b7028 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b6f2e:	9300      	str	r3, [sp, #0]
   b6f30:	2032      	movs	r0, #50	; 0x32
   b6f32:	462b      	mov	r3, r5
   b6f34:	aa06      	add	r2, sp, #24
   b6f36:	9507      	str	r5, [sp, #28]
   b6f38:	f7ff f818 	bl	b5f6c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b6f3c:	9b04      	ldr	r3, [sp, #16]
   b6f3e:	4629      	mov	r1, r5
   b6f40:	8818      	ldrh	r0, [r3, #0]
   b6f42:	f7fe fda9 	bl	b5a98 <hal_ble_gap_disconnect>
   b6f46:	a805      	add	r0, sp, #20
   b6f48:	f7ff fe6f 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6f4c:	e7a6      	b.n	b6e9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   b6f4e:	4a37      	ldr	r2, [pc, #220]	; (b702c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   b6f50:	9200      	str	r2, [sp, #0]
   b6f52:	2300      	movs	r3, #0
   b6f54:	4934      	ldr	r1, [pc, #208]	; (b7028 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b6f56:	9307      	str	r3, [sp, #28]
   b6f58:	aa06      	add	r2, sp, #24
   b6f5a:	2001      	movs	r0, #1
   b6f5c:	f7ff f806 	bl	b5f6c <log_message>
                if (impl->connectedCallback_) {
   b6f60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b6f62:	2b00      	cmp	r3, #0
   b6f64:	d0ef      	beq.n	b6f46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc6>
                    impl->connectedCallback_(peer);
   b6f66:	a904      	add	r1, sp, #16
   b6f68:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6f6c:	f7ff fed6 	bl	b6d1c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b6f70:	e7e9      	b.n	b6f46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc6>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b6f72:	89a9      	ldrh	r1, [r5, #12]
   b6f74:	4620      	mov	r0, r4
   b6f76:	f7ff fc33 	bl	b67e0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b6f7a:	4606      	mov	r6, r0
   b6f7c:	2800      	cmp	r0, #0
   b6f7e:	d08d      	beq.n	b6e9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
      { return _M_ptr; }
   b6f80:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b6f82:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b6f86:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6f8a:	8029      	strh	r1, [r5, #0]
   b6f8c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b6f90:	429a      	cmp	r2, r3
   b6f92:	d003      	beq.n	b6f9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b6f94:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b6f98:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b6f9a:	e7f9      	b.n	b6f90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x110>
    destruct(data_, data_ + size_);
   b6f9c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b6fa0:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b6fa4:	45b8      	cmp	r8, r7
   b6fa6:	d004      	beq.n	b6fb2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x132>
      ~__shared_ptr() = default;
   b6fa8:	1d38      	adds	r0, r7, #4
   b6faa:	f7ff fe3e 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6fae:	3708      	adds	r7, #8
   b6fb0:	e7f8      	b.n	b6fa4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
    size_ = 0;
   b6fb2:	2300      	movs	r3, #0
   b6fb4:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b6fb6:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b6fba:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b6fbe:	45b8      	cmp	r8, r7
   b6fc0:	d004      	beq.n	b6fcc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14c>
   b6fc2:	1d38      	adds	r0, r7, #4
   b6fc4:	f7ff fe31 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6fc8:	3708      	adds	r7, #8
   b6fca:	e7f8      	b.n	b6fbe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13e>
    size_ = 0;
   b6fcc:	2300      	movs	r3, #0
   b6fce:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b6fd0:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b6fd2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b6fd4:	b123      	cbz	r3, b6fe0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x160>
                        impl->disconnectedCallback_(*peer);
   b6fd6:	4631      	mov	r1, r6
   b6fd8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6fdc:	f7ff fe9e 	bl	b6d1c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b6fe0:	2300      	movs	r3, #0
   b6fe2:	2220      	movs	r2, #32
   b6fe4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b6fe8:	4a11      	ldr	r2, [pc, #68]	; (b7030 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b0>)
   b6fea:	9200      	str	r2, [sp, #0]
   b6fec:	490e      	ldr	r1, [pc, #56]	; (b7028 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b6fee:	aa06      	add	r2, sp, #24
   b6ff0:	2001      	movs	r0, #1
   b6ff2:	f7fe ffbb 	bl	b5f6c <log_message>
                    impl->peers_.removeOne(*peer);
   b6ff6:	4631      	mov	r1, r6
   b6ff8:	f104 0018 	add.w	r0, r4, #24
   b6ffc:	f7ff ff1e 	bl	b6e3c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b7000:	e74c      	b.n	b6e9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7002:	2e0f      	cmp	r6, #15
   b7004:	f47f af6f 	bne.w	b6ee6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x66>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   b7008:	686b      	ldr	r3, [r5, #4]
   b700a:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   b700c:	7a2b      	ldrb	r3, [r5, #8]
   b700e:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   b7012:	f3c3 0340 	ubfx	r3, r3, #1, #1
   b7016:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   b701a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   b701e:	2308      	movs	r3, #8
   b7020:	e760      	b.n	b6ee4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x64>
   b7022:	bf00      	nop
   b7024:	000b9f75 	.word	0x000b9f75
   b7028:	000b9f36 	.word	0x000b9f36
   b702c:	000b9f9b 	.word	0x000b9f9b
   b7030:	000b9fb8 	.word	0x000b9fb8

000b7034 <_ZNK8particle13BlePeerDevice10disconnectEv>:
int BlePeerDevice::disconnect() const {
   b7034:	b513      	push	{r0, r1, r4, lr}
   b7036:	4604      	mov	r4, r0
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b7038:	f7ff fca0 	bl	b697c <_ZNK8particle13BlePeerDevice9connectedEv>
   b703c:	b1d0      	cbz	r0, b7074 <_ZNK8particle13BlePeerDevice10disconnectEv+0x40>
    CHECK(hal_ble_gap_disconnect(impl()->connHandle(), nullptr));
   b703e:	6823      	ldr	r3, [r4, #0]
   b7040:	2100      	movs	r1, #0
   b7042:	8818      	ldrh	r0, [r3, #0]
   b7044:	f7fe fd28 	bl	b5a98 <hal_ble_gap_disconnect>
   b7048:	2800      	cmp	r0, #0
   b704a:	db11      	blt.n	b7070 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
        WiringBleLock lk;
   b704c:	a801      	add	r0, sp, #4
   b704e:	f7ff fa23 	bl	b6498 <_ZN8particle3ble13WiringBleLockC1Ev>
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b7052:	f7ff fd09 	bl	b6a68 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b7056:	6800      	ldr	r0, [r0, #0]
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b7058:	4621      	mov	r1, r4
   b705a:	3018      	adds	r0, #24
   b705c:	f7ff feee 	bl	b6e3c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
      { return _M_ptr; }
   b7060:	6823      	ldr	r3, [r4, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7062:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b7066:	801a      	strh	r2, [r3, #0]
        WiringBleLock lk;
   b7068:	a801      	add	r0, sp, #4
   b706a:	f7ff fa23 	bl	b64b4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b706e:	2000      	movs	r0, #0
}
   b7070:	b002      	add	sp, #8
   b7072:	bd10      	pop	{r4, pc}
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b7074:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7078:	e7fa      	b.n	b7070 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
	...

000b707c <_ZNK8particle14BleLocalDevice13disconnectAllEv>:

int BleLocalDevice::disconnect(const BlePeerDevice& peer) const {
    return peer.disconnect();
}

int BleLocalDevice::disconnectAll() const {
   b707c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7080:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7082:	a801      	add	r0, sp, #4
   b7084:	f7ff fa08 	bl	b6498 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7088:	6823      	ldr	r3, [r4, #0]
   b708a:	4e10      	ldr	r6, [pc, #64]	; (b70cc <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x50>)
    return data_ + size_;
   b708c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
        locked_ = false;
   b7090:	f04f 0800 	mov.w	r8, #0
   b7094:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
        locked_ = true;
   b7098:	2701      	movs	r7, #1
    for (auto& p : impl()->peers()) {
   b709a:	42ac      	cmp	r4, r5
   b709c:	d00e      	beq.n	b70bc <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x40>
   b709e:	6830      	ldr	r0, [r6, #0]
   b70a0:	f7fe fd6c 	bl	b5b7c <os_mutex_recursive_unlock>
        lk.unlock();
        p.disconnect();
   b70a4:	4620      	mov	r0, r4
        locked_ = false;
   b70a6:	f88d 8004 	strb.w	r8, [sp, #4]
        p.disconnect();
   b70aa:	f7ff ffc3 	bl	b7034 <_ZNK8particle13BlePeerDevice10disconnectEv>
    void lock() { os_mutex_recursive_lock(handle_); }
   b70ae:	6830      	ldr	r0, [r6, #0]
   b70b0:	f7fe fd5c 	bl	b5b6c <os_mutex_recursive_lock>
        locked_ = true;
   b70b4:	3408      	adds	r4, #8
   b70b6:	f88d 7004 	strb.w	r7, [sp, #4]
    for (auto& p : impl()->peers()) {
   b70ba:	e7ee      	b.n	b709a <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x1e>
    WiringBleLock lk;
   b70bc:	a801      	add	r0, sp, #4
   b70be:	f7ff f9f9 	bl	b64b4 <_ZN8particle3ble13WiringBleLockD1Ev>
        lk.lock();
    }
    return SYSTEM_ERROR_NONE;
}
   b70c2:	2000      	movs	r0, #0
   b70c4:	b002      	add	sp, #8
   b70c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b70ca:	bf00      	nop
   b70cc:	2003e634 	.word	0x2003e634

000b70d0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b70d0:	b513      	push	{r0, r1, r4, lr}
   b70d2:	460b      	mov	r3, r1
   b70d4:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b70d6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b70da:	466c      	mov	r4, sp
   b70dc:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b70e0:	e893 0003 	ldmia.w	r3, {r0, r1}
   b70e4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b70e8:	e894 0003 	ldmia.w	r4, {r0, r1}
   b70ec:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b70f0:	b002      	add	sp, #8
   b70f2:	bd10      	pop	{r4, pc}

000b70f4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b70f4:	b538      	push	{r3, r4, r5, lr}
   b70f6:	4605      	mov	r5, r0
   b70f8:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b70fa:	f7ff ffe9 	bl	b70d0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b70fe:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7100:	68a2      	ldr	r2, [r4, #8]
   b7102:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7104:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7106:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7108:	68e2      	ldr	r2, [r4, #12]
   b710a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b710c:	60e3      	str	r3, [r4, #12]
      }
   b710e:	bd38      	pop	{r3, r4, r5, pc}

000b7110 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7110:	b570      	push	{r4, r5, r6, lr}
   b7112:	460e      	mov	r6, r1
   b7114:	b08c      	sub	sp, #48	; 0x30
   b7116:	4604      	mov	r4, r0
   b7118:	9201      	str	r2, [sp, #4]
   b711a:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b711c:	f7ff fb40 	bl	b67a0 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b7120:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   b7122:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   b7124:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   b7126:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b712a:	f000 fe6b 	bl	b7e04 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b712e:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b7132:	b1cd      	cbz	r5, b7168 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x58>
   b7134:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7136:	9502      	str	r5, [sp, #8]
   b7138:	a902      	add	r1, sp, #8
   b713a:	a804      	add	r0, sp, #16
   b713c:	9303      	str	r3, [sp, #12]
   b713e:	f7ff fd1b 	bl	b6b78 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7142:	2300      	movs	r3, #0
	__x.swap(*this);
   b7144:	a908      	add	r1, sp, #32
   b7146:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b7148:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b714a:	f7ff ffd3 	bl	b70f4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b714e:	4631      	mov	r1, r6
   b7150:	a808      	add	r0, sp, #32
   b7152:	f7ff ffcf 	bl	b70f4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7156:	a808      	add	r0, sp, #32
   b7158:	f7ff f960 	bl	b641c <_ZNSt14_Function_baseD1Ev>
   b715c:	a804      	add	r0, sp, #16
   b715e:	f7ff f95d 	bl	b641c <_ZNSt14_Function_baseD1Ev>
    }
   b7162:	4620      	mov	r0, r4
   b7164:	b00c      	add	sp, #48	; 0x30
   b7166:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7168:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b716a:	e7ea      	b.n	b7142 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000b716c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b716c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7170:	b089      	sub	sp, #36	; 0x24
   b7172:	461d      	mov	r5, r3
   b7174:	e9dd 4312 	ldrd	r4, r3, [sp, #72]	; 0x48
   b7178:	4680      	mov	r8, r0
   b717a:	468a      	mov	sl, r1
   b717c:	4693      	mov	fp, r2
   b717e:	9914      	ldr	r1, [sp, #80]	; 0x50
   b7180:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7182:	2200      	movs	r2, #0
   b7184:	2068      	movs	r0, #104	; 0x68
   b7186:	9102      	str	r1, [sp, #8]
   b7188:	9206      	str	r2, [sp, #24]
   b718a:	f7fc ff84 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b718e:	1e06      	subs	r6, r0, #0
   b7190:	f106 090c 	add.w	r9, r6, #12
   b7194:	d01c      	beq.n	b71d0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x64>
      : _M_use_count(1), _M_weak_count(1) { }
   b7196:	2201      	movs	r2, #1
	: _M_impl(__a)
   b7198:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b719a:	e9c6 2201 	strd	r2, r2, [r6, #4]
	: _M_impl(__a)
   b719e:	4a17      	ldr	r2, [pc, #92]	; (b71fc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b71a0:	f847 2b20 	str.w	r2, [r7], #32
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b71a4:	9902      	ldr	r1, [sp, #8]
   b71a6:	f89b 2000 	ldrb.w	r2, [fp]
   b71aa:	9b03      	ldr	r3, [sp, #12]
    value_ = flags.value_;
   b71ac:	f88d 2014 	strb.w	r2, [sp, #20]
   b71b0:	9100      	str	r1, [sp, #0]
   b71b2:	4652      	mov	r2, sl
   b71b4:	a905      	add	r1, sp, #20
   b71b6:	4648      	mov	r0, r9
   b71b8:	f7ff ffaa 	bl	b7110 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b71bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b71be:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b71c0:	682b      	ldr	r3, [r5, #0]
   b71c2:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b71c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b71c6:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b71ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b71cc:	6823      	ldr	r3, [r4, #0]
   b71ce:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b71d0:	a906      	add	r1, sp, #24
   b71d2:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b71d4:	e9cd 9606 	strd	r9, r6, [sp, #24]
   b71d8:	f7ff fd8f 	bl	b6cfa <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b71dc:	a807      	add	r0, sp, #28
   b71de:	f7ff fd24 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b71e2:	f8d8 1000 	ldr.w	r1, [r8]
   b71e6:	b931      	cbnz	r1, b71f6 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8a>
        SPARK_ASSERT(false);
   b71e8:	4a05      	ldr	r2, [pc, #20]	; (b7200 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b71ea:	200a      	movs	r0, #10
}
   b71ec:	b009      	add	sp, #36	; 0x24
   b71ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b71f2:	f7fe beb3 	b.w	b5f5c <panic_>
}
   b71f6:	b009      	add	sp, #36	; 0x24
   b71f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b71fc:	000ba034 	.word	0x000ba034
   b7200:	000b5b9d 	.word	0x000b5b9d

000b7204 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b7204:	b538      	push	{r3, r4, r5, lr}
   b7206:	4605      	mov	r5, r0
   b7208:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b720a:	f7ff ff61 	bl	b70d0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b720e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7210:	68a2      	ldr	r2, [r4, #8]
   b7212:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7214:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7216:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7218:	68e2      	ldr	r2, [r4, #12]
   b721a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b721c:	60e3      	str	r3, [r4, #12]
      }
   b721e:	bd38      	pop	{r3, r4, r5, pc}

000b7220 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b7220:	b510      	push	{r4, lr}
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b7222:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b7224:	b08a      	sub	sp, #40	; 0x28
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b7226:	3434      	adds	r4, #52	; 0x34
   b7228:	b1b9      	cbz	r1, b725a <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b722a:	e9cd 1200 	strd	r1, r2, [sp]
   b722e:	a802      	add	r0, sp, #8
   b7230:	4669      	mov	r1, sp
   b7232:	f7ff fcb9 	bl	b6ba8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7236:	2300      	movs	r3, #0
	__x.swap(*this);
   b7238:	a906      	add	r1, sp, #24
   b723a:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b723c:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b723e:	f7ff ffe1 	bl	b7204 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b7242:	4621      	mov	r1, r4
   b7244:	a806      	add	r0, sp, #24
   b7246:	f7ff ffdd 	bl	b7204 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b724a:	a806      	add	r0, sp, #24
   b724c:	f7ff f8e6 	bl	b641c <_ZNSt14_Function_baseD1Ev>
   b7250:	a802      	add	r0, sp, #8
   b7252:	f7ff f8e3 	bl	b641c <_ZNSt14_Function_baseD1Ev>
}
   b7256:	b00a      	add	sp, #40	; 0x28
   b7258:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b725a:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b725c:	e7eb      	b.n	b7236 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b725e <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b725e:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7260:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7262:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7264:	3424      	adds	r4, #36	; 0x24
   b7266:	b1b9      	cbz	r1, b7298 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b7268:	e9cd 1200 	strd	r1, r2, [sp]
   b726c:	a802      	add	r0, sp, #8
   b726e:	4669      	mov	r1, sp
   b7270:	f7ff fc9a 	bl	b6ba8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7274:	2300      	movs	r3, #0
	__x.swap(*this);
   b7276:	a906      	add	r1, sp, #24
   b7278:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b727a:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b727c:	f7ff ffc2 	bl	b7204 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b7280:	4621      	mov	r1, r4
   b7282:	a806      	add	r0, sp, #24
   b7284:	f7ff ffbe 	bl	b7204 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b7288:	a806      	add	r0, sp, #24
   b728a:	f7ff f8c7 	bl	b641c <_ZNSt14_Function_baseD1Ev>
   b728e:	a802      	add	r0, sp, #8
   b7290:	f7ff f8c4 	bl	b641c <_ZNSt14_Function_baseD1Ev>
}
   b7294:	b00a      	add	sp, #40	; 0x28
   b7296:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7298:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b729a:	e7eb      	b.n	b7274 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b729c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b729c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b729e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b72a0:	4604      	mov	r4, r0
   b72a2:	460d      	mov	r5, r1
   b72a4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b72a6:	d914      	bls.n	b72d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b72a8:	4290      	cmp	r0, r2
   b72aa:	d213      	bcs.n	b72d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b72ac:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b72b0:	1a75      	subs	r5, r6, r1
   b72b2:	f1a1 0708 	sub.w	r7, r1, #8
   b72b6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b72b8:	42b7      	cmp	r7, r6
   b72ba:	d018      	beq.n	b72ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b72bc:	b11c      	cbz	r4, b72c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b72be:	4631      	mov	r1, r6
   b72c0:	4620      	mov	r0, r4
   b72c2:	f7ff fc9e 	bl	b6c02 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b72c6:	1d30      	adds	r0, r6, #4
   b72c8:	f7ff fcaf 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b72cc:	3e08      	subs	r6, #8
   b72ce:	3c08      	subs	r4, #8
   b72d0:	e7f2      	b.n	b72b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b72d2:	d00c      	beq.n	b72ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b72d4:	42b5      	cmp	r5, r6
   b72d6:	d00a      	beq.n	b72ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b72d8:	b11c      	cbz	r4, b72e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b72da:	4629      	mov	r1, r5
   b72dc:	4620      	mov	r0, r4
   b72de:	f7ff fc90 	bl	b6c02 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b72e2:	1d28      	adds	r0, r5, #4
   b72e4:	f7ff fca1 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b72e8:	3508      	adds	r5, #8
   b72ea:	3408      	adds	r4, #8
   b72ec:	e7f2      	b.n	b72d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b72ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b72f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b72f0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b72f2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b72f4:	4605      	mov	r5, r0
        if (n > 0) {
   b72f6:	dd11      	ble.n	b731c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b72f8:	00f0      	lsls	r0, r6, #3
   b72fa:	f7fe ff2d 	bl	b6158 <malloc>
            if (!d) {
   b72fe:	4604      	mov	r4, r0
   b7300:	b158      	cbz	r0, b731a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7302:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7306:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b730a:	f7ff ffc7 	bl	b729c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b730e:	6828      	ldr	r0, [r5, #0]
   b7310:	f7fe ff2a 	bl	b6168 <free>
        data_ = d;
   b7314:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7316:	60ae      	str	r6, [r5, #8]
        return true;
   b7318:	2001      	movs	r0, #1
    }
   b731a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b731c:	2400      	movs	r4, #0
   b731e:	e7f6      	b.n	b730e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7320 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7320:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7322:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7324:	6845      	ldr	r5, [r0, #4]
   b7326:	4668      	mov	r0, sp
   b7328:	f7ff fc6b 	bl	b6c02 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b732c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7330:	4299      	cmp	r1, r3
   b7332:	da10      	bge.n	b7356 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7334:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7336:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7338:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b733c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7340:	4629      	mov	r1, r5
   b7342:	f105 0008 	add.w	r0, r5, #8
   b7346:	f7ff ffa9 	bl	b729c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b734a:	b98d      	cbnz	r5, b7370 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b734c:	6863      	ldr	r3, [r4, #4]
   b734e:	3301      	adds	r3, #1
   b7350:	6063      	str	r3, [r4, #4]
    return true;
   b7352:	2601      	movs	r6, #1
   b7354:	e006      	b.n	b7364 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7356:	3101      	adds	r1, #1
   b7358:	4620      	mov	r0, r4
   b735a:	f7ff ffc9 	bl	b72f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b735e:	4606      	mov	r6, r0
   b7360:	2800      	cmp	r0, #0
   b7362:	d1e7      	bne.n	b7334 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7364:	a801      	add	r0, sp, #4
   b7366:	f7ff fc60 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b736a:	4630      	mov	r0, r6
   b736c:	b002      	add	sp, #8
   b736e:	bd70      	pop	{r4, r5, r6, pc}
   b7370:	4669      	mov	r1, sp
   b7372:	4628      	mov	r0, r5
   b7374:	f7ff fc45 	bl	b6c02 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7378:	e7e8      	b.n	b734c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b737a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b737a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b737e:	4604      	mov	r4, r0
   b7380:	460d      	mov	r5, r1
   b7382:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7384:	d914      	bls.n	b73b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7386:	4290      	cmp	r0, r2
   b7388:	d213      	bcs.n	b73b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b738a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b738e:	1a75      	subs	r5, r6, r1
   b7390:	f1a1 0708 	sub.w	r7, r1, #8
   b7394:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7396:	42b7      	cmp	r7, r6
   b7398:	d018      	beq.n	b73cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b739a:	b11c      	cbz	r4, b73a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b739c:	4631      	mov	r1, r6
   b739e:	4620      	mov	r0, r4
   b73a0:	f7ff fc21 	bl	b6be6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b73a4:	1d30      	adds	r0, r6, #4
   b73a6:	f7ff fc40 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b73aa:	3e08      	subs	r6, #8
   b73ac:	3c08      	subs	r4, #8
   b73ae:	e7f2      	b.n	b7396 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b73b0:	d00c      	beq.n	b73cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b73b2:	42b5      	cmp	r5, r6
   b73b4:	d00a      	beq.n	b73cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b73b6:	b11c      	cbz	r4, b73c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b73b8:	4629      	mov	r1, r5
   b73ba:	4620      	mov	r0, r4
   b73bc:	f7ff fc13 	bl	b6be6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b73c0:	1d28      	adds	r0, r5, #4
   b73c2:	f7ff fc32 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b73c6:	3508      	adds	r5, #8
   b73c8:	3408      	adds	r4, #8
   b73ca:	e7f2      	b.n	b73b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b73cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b73ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b73ce:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b73d0:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b73d2:	4605      	mov	r5, r0
        if (n > 0) {
   b73d4:	dd11      	ble.n	b73fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b73d6:	00f0      	lsls	r0, r6, #3
   b73d8:	f7fe febe 	bl	b6158 <malloc>
            if (!d) {
   b73dc:	4604      	mov	r4, r0
   b73de:	b158      	cbz	r0, b73f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b73e0:	e9d5 1200 	ldrd	r1, r2, [r5]
   b73e4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b73e8:	f7ff ffc7 	bl	b737a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b73ec:	6828      	ldr	r0, [r5, #0]
   b73ee:	f7fe febb 	bl	b6168 <free>
        data_ = d;
   b73f2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b73f4:	60ae      	str	r6, [r5, #8]
        return true;
   b73f6:	2001      	movs	r0, #1
    }
   b73f8:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b73fa:	2400      	movs	r4, #0
   b73fc:	e7f6      	b.n	b73ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b73fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b73fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7400:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7402:	6845      	ldr	r5, [r0, #4]
   b7404:	4668      	mov	r0, sp
   b7406:	f7ff fbee 	bl	b6be6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b740a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b740e:	4299      	cmp	r1, r3
   b7410:	da10      	bge.n	b7434 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7412:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7414:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7416:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b741a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b741e:	4629      	mov	r1, r5
   b7420:	f105 0008 	add.w	r0, r5, #8
   b7424:	f7ff ffa9 	bl	b737a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7428:	b98d      	cbnz	r5, b744e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b742a:	6863      	ldr	r3, [r4, #4]
   b742c:	3301      	adds	r3, #1
   b742e:	6063      	str	r3, [r4, #4]
    return true;
   b7430:	2601      	movs	r6, #1
   b7432:	e006      	b.n	b7442 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7434:	3101      	adds	r1, #1
   b7436:	4620      	mov	r0, r4
   b7438:	f7ff ffc9 	bl	b73ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b743c:	4606      	mov	r6, r0
   b743e:	2800      	cmp	r0, #0
   b7440:	d1e7      	bne.n	b7412 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7442:	a801      	add	r0, sp, #4
   b7444:	f7ff fbf1 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7448:	4630      	mov	r0, r6
   b744a:	b002      	add	sp, #8
   b744c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b744e:	4669      	mov	r1, sp
   b7450:	4628      	mov	r0, r5
   b7452:	f7ff fbc8 	bl	b6be6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7456:	e7e8      	b.n	b742a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7458 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b745c:	4617      	mov	r7, r2
   b745e:	b0a1      	sub	sp, #132	; 0x84
   b7460:	4680      	mov	r8, r0
    WiringBleLock lk;
   b7462:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7464:	460e      	mov	r6, r1
    WiringBleLock lk;
   b7466:	f7ff f817 	bl	b6498 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b746a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b746c:	7923      	ldrb	r3, [r4, #4]
   b746e:	b953      	cbnz	r3, b7486 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b7470:	4639      	mov	r1, r7
   b7472:	4640      	mov	r0, r8
   b7474:	f7ff fbb7 	bl	b6be6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b7478:	a80a      	add	r0, sp, #40	; 0x28
   b747a:	f7ff f81b 	bl	b64b4 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b747e:	4640      	mov	r0, r8
   b7480:	b021      	add	sp, #132	; 0x84
   b7482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7486:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b7488:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b748c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b7490:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b7492:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b7496:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b749a:	9b03      	ldr	r3, [sp, #12]
   b749c:	429d      	cmp	r5, r3
   b749e:	d021      	beq.n	b74e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b74a0:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b74a4:	4658      	mov	r0, fp
   b74a6:	f109 0114 	add.w	r1, r9, #20
   b74aa:	f7ff f8b0 	bl	b660e <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b74ae:	b1b8      	cbz	r0, b74e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b74b0:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b74b4:	4650      	mov	r0, sl
   b74b6:	f7ff f8aa 	bl	b660e <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b74ba:	b188      	cbz	r0, b74e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b74bc:	6823      	ldr	r3, [r4, #0]
   b74be:	f8d9 2000 	ldr.w	r2, [r9]
   b74c2:	4053      	eors	r3, r2
   b74c4:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b74c8:	d10a      	bne.n	b74e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b74ca:	2220      	movs	r2, #32
   b74cc:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b74d0:	4a5e      	ldr	r2, [pc, #376]	; (b764c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b74d2:	9200      	str	r2, [sp, #0]
   b74d4:	aa15      	add	r2, sp, #84	; 0x54
   b74d6:	495e      	ldr	r1, [pc, #376]	; (b7650 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b74d8:	2032      	movs	r0, #50	; 0x32
   b74da:	f7fe fd47 	bl	b5f6c <log_message>
   b74de:	e7c7      	b.n	b7470 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b74e0:	3508      	adds	r5, #8
   b74e2:	e7da      	b.n	b749a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b74e4:	4650      	mov	r0, sl
   b74e6:	f7ff f863 	bl	b65b0 <_ZNK8particle7BleUuid7isValidEv>
   b74ea:	b960      	cbnz	r0, b7506 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   b74ec:	4959      	ldr	r1, [pc, #356]	; (b7654 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b74ee:	2201      	movs	r2, #1
   b74f0:	a815      	add	r0, sp, #84	; 0x54
   b74f2:	ad15      	add	r5, sp, #84	; 0x54
   b74f4:	f7ff f833 	bl	b655e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b74f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b74fa:	46d4      	mov	ip, sl
   b74fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7500:	682b      	ldr	r3, [r5, #0]
   b7502:	f8cc 3000 	str.w	r3, [ip]
   b7506:	6833      	ldr	r3, [r6, #0]
   b7508:	e9d3 5300 	ldrd	r5, r3, [r3]
   b750c:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b7510:	455d      	cmp	r5, fp
   b7512:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b7514:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b7516:	d06e      	beq.n	b75f6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b7518:	f855 0b08 	ldr.w	r0, [r5], #8
   b751c:	f7ff f877 	bl	b660e <_ZNK8particle7BleUuideqERKS0_>
   b7520:	2800      	cmp	r0, #0
   b7522:	d0f5      	beq.n	b7510 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b7524:	f104 0a14 	add.w	sl, r4, #20
   b7528:	4650      	mov	r0, sl
   b752a:	f7ff f841 	bl	b65b0 <_ZNK8particle7BleUuid7isValidEv>
   b752e:	b988      	cbnz	r0, b7554 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b7530:	4b49      	ldr	r3, [pc, #292]	; (b7658 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7532:	4948      	ldr	r1, [pc, #288]	; (b7654 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b7534:	881a      	ldrh	r2, [r3, #0]
   b7536:	3201      	adds	r2, #1
   b7538:	b292      	uxth	r2, r2
   b753a:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b753c:	a815      	add	r0, sp, #84	; 0x54
   b753e:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b7540:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7542:	f7ff f82b 	bl	b659c <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b7546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7548:	46d4      	mov	ip, sl
   b754a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b754e:	682b      	ldr	r3, [r5, #0]
   b7550:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b7554:	4b41      	ldr	r3, [pc, #260]	; (b765c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b7556:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b7558:	2228      	movs	r2, #40	; 0x28
   b755a:	2100      	movs	r1, #0
   b755c:	a816      	add	r0, sp, #88	; 0x58
   b755e:	f002 f833 	bl	b95c8 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b7562:	4651      	mov	r1, sl
   b7564:	a804      	add	r0, sp, #16
   b7566:	f7ff f835 	bl	b65d4 <_ZN8particle7BleUuid7halUUIDEv>
   b756a:	ab04      	add	r3, sp, #16
   b756c:	aa18      	add	r2, sp, #96	; 0x60
   b756e:	f10d 0c20 	add.w	ip, sp, #32
   b7572:	6818      	ldr	r0, [r3, #0]
   b7574:	6859      	ldr	r1, [r3, #4]
   b7576:	4615      	mov	r5, r2
   b7578:	c503      	stmia	r5!, {r0, r1}
   b757a:	3308      	adds	r3, #8
   b757c:	4563      	cmp	r3, ip
   b757e:	462a      	mov	r2, r5
   b7580:	d1f7      	bne.n	b7572 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b7582:	6818      	ldr	r0, [r3, #0]
   b7584:	6028      	str	r0, [r5, #0]
    return value_;
   b7586:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b7588:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b758c:	f8d9 3000 	ldr.w	r3, [r9]
   b7590:	8a9b      	ldrh	r3, [r3, #20]
   b7592:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b7596:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7598:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b759a:	4b31      	ldr	r3, [pc, #196]	; (b7660 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b759c:	2200      	movs	r2, #0
   b759e:	1da1      	adds	r1, r4, #6
   b75a0:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b75a2:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b75a6:	f7fe faa9 	bl	b5afc <hal_ble_gatt_server_add_characteristic>
   b75aa:	2800      	cmp	r0, #0
   b75ac:	f47f af60 	bne.w	b7470 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b75b0:	2301      	movs	r3, #1
   b75b2:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b75b4:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b75b6:	4639      	mov	r1, r7
        return characteristics_;
   b75b8:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b75ba:	a80d      	add	r0, sp, #52	; 0x34
   b75bc:	f7ff fb13 	bl	b6be6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b75c0:	4620      	mov	r0, r4
   b75c2:	a90d      	add	r1, sp, #52	; 0x34
   b75c4:	f7ff ff1b 	bl	b73fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b75c8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b75ca:	a80e      	add	r0, sp, #56	; 0x38
   b75cc:	f7ff fb2d 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b75d0:	2c00      	cmp	r4, #0
   b75d2:	f47f af4d 	bne.w	b7470 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b75d6:	2320      	movs	r3, #32
   b75d8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b75dc:	4b21      	ldr	r3, [pc, #132]	; (b7664 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b75de:	9300      	str	r3, [sp, #0]
   b75e0:	aa0d      	add	r2, sp, #52	; 0x34
   b75e2:	4623      	mov	r3, r4
   b75e4:	e777      	b.n	b74d6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b75e6:	4639      	mov	r1, r7
   b75e8:	4640      	mov	r0, r8
   b75ea:	f7ff fafc 	bl	b6be6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b75ee:	a80c      	add	r0, sp, #48	; 0x30
   b75f0:	f7ff fb1b 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b75f4:	e740      	b.n	b7478 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b75f6:	a80b      	add	r0, sp, #44	; 0x2c
   b75f8:	f7ff f97a 	bl	b68f0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b75fc:	4651      	mov	r1, sl
   b75fe:	a815      	add	r0, sp, #84	; 0x54
   b7600:	f7fe ffe8 	bl	b65d4 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b7604:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7606:	2300      	movs	r3, #0
   b7608:	3214      	adds	r2, #20
   b760a:	a915      	add	r1, sp, #84	; 0x54
   b760c:	2001      	movs	r0, #1
   b760e:	f7fe fa4d 	bl	b5aac <hal_ble_gatt_server_add_service>
   b7612:	2800      	cmp	r0, #0
   b7614:	d1e7      	bne.n	b75e6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b7616:	6835      	ldr	r5, [r6, #0]
   b7618:	a90b      	add	r1, sp, #44	; 0x2c
   b761a:	a80d      	add	r0, sp, #52	; 0x34
   b761c:	f7ff faf1 	bl	b6c02 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b7620:	4628      	mov	r0, r5
   b7622:	a90d      	add	r1, sp, #52	; 0x34
   b7624:	f7ff fe7c 	bl	b7320 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7628:	4605      	mov	r5, r0
   b762a:	a80e      	add	r0, sp, #56	; 0x38
   b762c:	f7ff fafd 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7630:	2d00      	cmp	r5, #0
   b7632:	d0d8      	beq.n	b75e6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b7634:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b7636:	6853      	ldr	r3, [r2, #4]
   b7638:	6812      	ldr	r2, [r2, #0]
   b763a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b763e:	3b01      	subs	r3, #1
   b7640:	a80c      	add	r0, sp, #48	; 0x30
   b7642:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b7646:	f7ff faf0 	bl	b6c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b764a:	e76b      	b.n	b7524 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b764c:	000b9fd7 	.word	0x000b9fd7
   b7650:	000b9f36 	.word	0x000b9f36
   b7654:	000ba09e 	.word	0x000ba09e
   b7658:	2003e630 	.word	0x2003e630
   b765c:	002c0003 	.word	0x002c0003
   b7660:	000b6aa9 	.word	0x000b6aa9
   b7664:	000ba002 	.word	0x000ba002

000b7668 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   b7668:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   b766a:	4c06      	ldr	r4, [pc, #24]	; (b7684 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   b766c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   b766e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   b7670:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   b7672:	f7fe fa6b 	bl	b5b4c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   b7676:	4620      	mov	r0, r4
   b7678:	4a03      	ldr	r2, [pc, #12]	; (b7688 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   b767a:	4904      	ldr	r1, [pc, #16]	; (b768c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   b767c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   b7680:	f001 bbbc 	b.w	b8dfc <__aeabi_atexit>
   b7684:	2003e634 	.word	0x2003e634
   b7688:	2003da58 	.word	0x2003da58
   b768c:	000b62a5 	.word	0x000b62a5

000b7690 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7690:	2200      	movs	r2, #0
   b7692:	6840      	ldr	r0, [r0, #4]
   b7694:	4611      	mov	r1, r2
   b7696:	f7fe bd27 	b.w	b60e8 <network_listening>

000b769a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b769a:	2200      	movs	r2, #0
   b769c:	6840      	ldr	r0, [r0, #4]
   b769e:	4611      	mov	r1, r2
   b76a0:	f7fe bd42 	b.w	b6128 <network_get_listen_timeout>

000b76a4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b76a4:	6840      	ldr	r0, [r0, #4]
   b76a6:	2200      	movs	r2, #0
   b76a8:	f7fe bd36 	b.w	b6118 <network_set_listen_timeout>

000b76ac <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b76ac:	6840      	ldr	r0, [r0, #4]
   b76ae:	2200      	movs	r2, #0
   b76b0:	f081 0101 	eor.w	r1, r1, #1
   b76b4:	f7fe bd10 	b.w	b60d8 <network_listen>

000b76b8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b76b8:	2300      	movs	r3, #0
   b76ba:	6840      	ldr	r0, [r0, #4]
   b76bc:	461a      	mov	r2, r3
   b76be:	4619      	mov	r1, r3
   b76c0:	f7fe bd02 	b.w	b60c8 <network_off>

000b76c4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b76c4:	2300      	movs	r3, #0
   b76c6:	6840      	ldr	r0, [r0, #4]
   b76c8:	461a      	mov	r2, r3
   b76ca:	4619      	mov	r1, r3
   b76cc:	f7fe bcf4 	b.w	b60b8 <network_on>

000b76d0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b76d0:	2200      	movs	r2, #0
   b76d2:	6840      	ldr	r0, [r0, #4]
   b76d4:	4611      	mov	r1, r2
   b76d6:	f7fe bce7 	b.w	b60a8 <network_ready>

000b76da <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b76da:	2200      	movs	r2, #0
   b76dc:	6840      	ldr	r0, [r0, #4]
   b76de:	4611      	mov	r1, r2
   b76e0:	f7fe bcd2 	b.w	b6088 <network_connecting>

000b76e4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b76e4:	6840      	ldr	r0, [r0, #4]
   b76e6:	2200      	movs	r2, #0
   b76e8:	2102      	movs	r1, #2
   b76ea:	f7fe bcd5 	b.w	b6098 <network_disconnect>

000b76ee <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b76ee:	2300      	movs	r3, #0
   b76f0:	6840      	ldr	r0, [r0, #4]
   b76f2:	461a      	mov	r2, r3
   b76f4:	f7fe bcc0 	b.w	b6078 <network_connect>

000b76f8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b76f8:	4b02      	ldr	r3, [pc, #8]	; (b7704 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b76fa:	2203      	movs	r2, #3
   b76fc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b76fe:	4a02      	ldr	r2, [pc, #8]	; (b7708 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7700:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7702:	4770      	bx	lr
   b7704:	2003e63c 	.word	0x2003e63c
   b7708:	000ba0c8 	.word	0x000ba0c8

000b770c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b770c:	4770      	bx	lr

000b770e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b770e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7710:	4606      	mov	r6, r0
   b7712:	4615      	mov	r5, r2
   b7714:	460c      	mov	r4, r1
   b7716:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7718:	42bc      	cmp	r4, r7
   b771a:	d006      	beq.n	b772a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b771c:	6833      	ldr	r3, [r6, #0]
   b771e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7722:	689b      	ldr	r3, [r3, #8]
   b7724:	4630      	mov	r0, r6
   b7726:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7728:	e7f6      	b.n	b7718 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b772a:	4628      	mov	r0, r5
   b772c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b772e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b772e:	7c00      	ldrb	r0, [r0, #16]
   b7730:	2200      	movs	r2, #0
   b7732:	f7fe baa3 	b.w	b5c7c <hal_i2c_write>

000b7736 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7736:	7c00      	ldrb	r0, [r0, #16]
   b7738:	2100      	movs	r1, #0
   b773a:	f7fe baa7 	b.w	b5c8c <hal_i2c_available>

000b773e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b773e:	7c00      	ldrb	r0, [r0, #16]
   b7740:	2100      	movs	r1, #0
   b7742:	f7fe baab 	b.w	b5c9c <hal_i2c_read>

000b7746 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7746:	7c00      	ldrb	r0, [r0, #16]
   b7748:	2100      	movs	r1, #0
   b774a:	f7fe baaf 	b.w	b5cac <hal_i2c_peek>

000b774e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b774e:	7c00      	ldrb	r0, [r0, #16]
   b7750:	2100      	movs	r1, #0
   b7752:	f7fe bab3 	b.w	b5cbc <hal_i2c_flush>

000b7756 <_ZN7TwoWireD0Ev>:
   b7756:	b510      	push	{r4, lr}
   b7758:	2114      	movs	r1, #20
   b775a:	4604      	mov	r4, r0
   b775c:	f001 fb53 	bl	b8e06 <_ZdlPvj>
   b7760:	4620      	mov	r0, r4
   b7762:	bd10      	pop	{r4, pc}

000b7764 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7764:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b776a:	4604      	mov	r4, r0
   b776c:	4608      	mov	r0, r1
   b776e:	2100      	movs	r1, #0
   b7770:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7774:	4b03      	ldr	r3, [pc, #12]	; (b7784 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7776:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7778:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b777a:	4611      	mov	r1, r2
   b777c:	f7fe faae 	bl	b5cdc <hal_i2c_init>
}
   b7780:	4620      	mov	r0, r4
   b7782:	bd10      	pop	{r4, pc}
   b7784:	000ba104 	.word	0x000ba104

000b7788 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7788:	2300      	movs	r3, #0
   b778a:	7c00      	ldrb	r0, [r0, #16]
   b778c:	461a      	mov	r2, r3
   b778e:	4619      	mov	r1, r3
   b7790:	f7fe ba5c 	b.w	b5c4c <hal_i2c_begin>

000b7794 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b7794:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b7796:	2200      	movs	r2, #0
   b7798:	2314      	movs	r3, #20
   b779a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b779e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b77a2:	780b      	ldrb	r3, [r1, #0]
   b77a4:	f88d 3008 	strb.w	r3, [sp, #8]
   b77a8:	684b      	ldr	r3, [r1, #4]
   b77aa:	9303      	str	r3, [sp, #12]
   b77ac:	68cb      	ldr	r3, [r1, #12]
   b77ae:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b77b0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b77b2:	7a0b      	ldrb	r3, [r1, #8]
   b77b4:	9305      	str	r3, [sp, #20]
   b77b6:	a901      	add	r1, sp, #4
   b77b8:	f7fe fa98 	bl	b5cec <hal_i2c_request_ex>
}
   b77bc:	b007      	add	sp, #28
   b77be:	f85d fb04 	ldr.w	pc, [sp], #4

000b77c2 <_ZN7TwoWire11requestFromEhjh>:
{
   b77c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b77c4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b77c6:	f88d 1000 	strb.w	r1, [sp]
   b77ca:	f04f 0164 	mov.w	r1, #100	; 0x64
   b77ce:	9103      	str	r1, [sp, #12]
   b77d0:	bf18      	it	ne
   b77d2:	2301      	movne	r3, #1
   b77d4:	4669      	mov	r1, sp
    size_ = size;
   b77d6:	9201      	str	r2, [sp, #4]
   b77d8:	f88d 3008 	strb.w	r3, [sp, #8]
   b77dc:	f7ff ffda 	bl	b7794 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b77e0:	b005      	add	sp, #20
   b77e2:	f85d fb04 	ldr.w	pc, [sp], #4

000b77e6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b77e6:	2301      	movs	r3, #1
   b77e8:	f7ff bfeb 	b.w	b77c2 <_ZN7TwoWire11requestFromEhjh>

000b77ec <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b77ec:	7c00      	ldrb	r0, [r0, #16]
   b77ee:	2200      	movs	r2, #0
   b77f0:	f7fe ba34 	b.w	b5c5c <hal_i2c_begin_transmission>

000b77f4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b77f4:	b2c9      	uxtb	r1, r1
   b77f6:	f7ff bff9 	b.w	b77ec <_ZN7TwoWire17beginTransmissionEh>

000b77fa <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b77fa:	7c00      	ldrb	r0, [r0, #16]
   b77fc:	2200      	movs	r2, #0
   b77fe:	f7fe ba35 	b.w	b5c6c <hal_i2c_end_transmission>

000b7802 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7802:	2101      	movs	r1, #1
   b7804:	f7ff bff9 	b.w	b77fa <_ZN7TwoWire15endTransmissionEh>

000b7808 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7808:	4770      	bx	lr

000b780a <_ZN9IPAddressD0Ev>:
   b780a:	b510      	push	{r4, lr}
   b780c:	2118      	movs	r1, #24
   b780e:	4604      	mov	r4, r0
   b7810:	f001 faf9 	bl	b8e06 <_ZdlPvj>
   b7814:	4620      	mov	r0, r4
   b7816:	bd10      	pop	{r4, pc}

000b7818 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7818:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b781a:	7d03      	ldrb	r3, [r0, #20]
   b781c:	2b06      	cmp	r3, #6
{
   b781e:	b08d      	sub	sp, #52	; 0x34
   b7820:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7822:	f100 0704 	add.w	r7, r0, #4
   b7826:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b782a:	d012      	beq.n	b7852 <_ZNK9IPAddress7printToER5Print+0x3a>
   b782c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7830:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7834:	220a      	movs	r2, #10
   b7836:	4630      	mov	r0, r6
   b7838:	f000 f979 	bl	b7b2e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b783c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b783e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7840:	d019      	beq.n	b7876 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7842:	2c00      	cmp	r4, #0
   b7844:	d0f4      	beq.n	b7830 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7846:	212e      	movs	r1, #46	; 0x2e
   b7848:	4630      	mov	r0, r6
   b784a:	f000 f951 	bl	b7af0 <_ZN5Print5printEc>
   b784e:	4404      	add	r4, r0
   b7850:	e7ee      	b.n	b7830 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7852:	232f      	movs	r3, #47	; 0x2f
   b7854:	466a      	mov	r2, sp
   b7856:	4639      	mov	r1, r7
   b7858:	200a      	movs	r0, #10
		buf[0] = 0;
   b785a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b785e:	f7fe fa55 	bl	b5d0c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7862:	4668      	mov	r0, sp
   b7864:	f001 fef8 	bl	b9658 <strlen>
   b7868:	6833      	ldr	r3, [r6, #0]
   b786a:	4602      	mov	r2, r0
   b786c:	68db      	ldr	r3, [r3, #12]
   b786e:	4669      	mov	r1, sp
   b7870:	4630      	mov	r0, r6
   b7872:	4798      	blx	r3
   b7874:	4604      	mov	r4, r0
    }
    return n;
}
   b7876:	4620      	mov	r0, r4
   b7878:	b00d      	add	sp, #52	; 0x34
   b787a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b787c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b787c:	b510      	push	{r4, lr}
   b787e:	4b05      	ldr	r3, [pc, #20]	; (b7894 <_ZN9IPAddressC1Ev+0x18>)
   b7880:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7882:	2211      	movs	r2, #17
   b7884:	f840 3b04 	str.w	r3, [r0], #4
   b7888:	2100      	movs	r1, #0
   b788a:	f001 fe9d 	bl	b95c8 <memset>
}
   b788e:	4620      	mov	r0, r4
   b7890:	bd10      	pop	{r4, pc}
   b7892:	bf00      	nop
   b7894:	000ba12c 	.word	0x000ba12c

000b7898 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7898:	4603      	mov	r3, r0
   b789a:	4a07      	ldr	r2, [pc, #28]	; (b78b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b789c:	b510      	push	{r4, lr}
   b789e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b78a2:	f101 0210 	add.w	r2, r1, #16
   b78a6:	f851 4b04 	ldr.w	r4, [r1], #4
   b78aa:	f843 4b04 	str.w	r4, [r3], #4
   b78ae:	4291      	cmp	r1, r2
   b78b0:	d1f9      	bne.n	b78a6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b78b2:	780a      	ldrb	r2, [r1, #0]
   b78b4:	701a      	strb	r2, [r3, #0]
}
   b78b6:	bd10      	pop	{r4, pc}
   b78b8:	000ba12c 	.word	0x000ba12c

000b78bc <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b78bc:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b78be:	2b04      	cmp	r3, #4
   b78c0:	d104      	bne.n	b78cc <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b78c2:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b78c4:	3800      	subs	r0, #0
   b78c6:	bf18      	it	ne
   b78c8:	2001      	movne	r0, #1
   b78ca:	4770      	bx	lr
    } else if (version() == 6) {
   b78cc:	2b06      	cmp	r3, #6
   b78ce:	d107      	bne.n	b78e0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b78d0:	6843      	ldr	r3, [r0, #4]
   b78d2:	b93b      	cbnz	r3, b78e4 <_ZNK9IPAddresscvbEv+0x28>
   b78d4:	6883      	ldr	r3, [r0, #8]
   b78d6:	b92b      	cbnz	r3, b78e4 <_ZNK9IPAddresscvbEv+0x28>
   b78d8:	68c3      	ldr	r3, [r0, #12]
   b78da:	b91b      	cbnz	r3, b78e4 <_ZNK9IPAddresscvbEv+0x28>
   b78dc:	6900      	ldr	r0, [r0, #16]
   b78de:	e7f1      	b.n	b78c4 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b78e0:	2000      	movs	r0, #0
   b78e2:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b78e4:	2001      	movs	r0, #1
}
   b78e6:	4770      	bx	lr

000b78e8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b78e8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b78ea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b78ee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b78f2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b78f6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b78fa:	2304      	movs	r3, #4
   b78fc:	6041      	str	r1, [r0, #4]
   b78fe:	7503      	strb	r3, [r0, #20]
}
   b7900:	bd10      	pop	{r4, pc}
	...

000b7904 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7904:	b507      	push	{r0, r1, r2, lr}
   b7906:	4b06      	ldr	r3, [pc, #24]	; (b7920 <_ZN9IPAddressC1EPKh+0x1c>)
   b7908:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b790a:	78cb      	ldrb	r3, [r1, #3]
   b790c:	9300      	str	r3, [sp, #0]
   b790e:	788b      	ldrb	r3, [r1, #2]
   b7910:	784a      	ldrb	r2, [r1, #1]
   b7912:	7809      	ldrb	r1, [r1, #0]
   b7914:	f7ff ffe8 	bl	b78e8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7918:	b003      	add	sp, #12
   b791a:	f85d fb04 	ldr.w	pc, [sp], #4
   b791e:	bf00      	nop
   b7920:	000ba12c 	.word	0x000ba12c

000b7924 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7924:	4b01      	ldr	r3, [pc, #4]	; (b792c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7926:	4a02      	ldr	r2, [pc, #8]	; (b7930 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7928:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b792a:	4770      	bx	lr
   b792c:	2003e644 	.word	0x2003e644
   b7930:	000ba138 	.word	0x000ba138

000b7934 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7934:	2300      	movs	r3, #0
   b7936:	6840      	ldr	r0, [r0, #4]
   b7938:	461a      	mov	r2, r3
   b793a:	f7fe bb9d 	b.w	b6078 <network_connect>

000b793e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b793e:	6840      	ldr	r0, [r0, #4]
   b7940:	2200      	movs	r2, #0
   b7942:	2102      	movs	r1, #2
   b7944:	f7fe bba8 	b.w	b6098 <network_disconnect>

000b7948 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7948:	2200      	movs	r2, #0
   b794a:	6840      	ldr	r0, [r0, #4]
   b794c:	4611      	mov	r1, r2
   b794e:	f7fe bb9b 	b.w	b6088 <network_connecting>

000b7952 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7952:	2200      	movs	r2, #0
   b7954:	6840      	ldr	r0, [r0, #4]
   b7956:	4611      	mov	r1, r2
   b7958:	f7fe bba6 	b.w	b60a8 <network_ready>

000b795c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b795c:	2300      	movs	r3, #0
   b795e:	6840      	ldr	r0, [r0, #4]
   b7960:	461a      	mov	r2, r3
   b7962:	4619      	mov	r1, r3
   b7964:	f7fe bba8 	b.w	b60b8 <network_on>

000b7968 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7968:	2300      	movs	r3, #0
   b796a:	6840      	ldr	r0, [r0, #4]
   b796c:	461a      	mov	r2, r3
   b796e:	4619      	mov	r1, r3
   b7970:	f7fe bbaa 	b.w	b60c8 <network_off>

000b7974 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7974:	6840      	ldr	r0, [r0, #4]
   b7976:	2100      	movs	r1, #0
   b7978:	f7fe bbde 	b.w	b6138 <network_is_on>

000b797c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b797c:	6840      	ldr	r0, [r0, #4]
   b797e:	2100      	movs	r1, #0
   b7980:	f7fe bbe2 	b.w	b6148 <network_is_off>

000b7984 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7984:	6840      	ldr	r0, [r0, #4]
   b7986:	2200      	movs	r2, #0
   b7988:	f081 0101 	eor.w	r1, r1, #1
   b798c:	f7fe bba4 	b.w	b60d8 <network_listen>

000b7990 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7990:	6840      	ldr	r0, [r0, #4]
   b7992:	2200      	movs	r2, #0
   b7994:	f7fe bbc0 	b.w	b6118 <network_set_listen_timeout>

000b7998 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7998:	2200      	movs	r2, #0
   b799a:	6840      	ldr	r0, [r0, #4]
   b799c:	4611      	mov	r1, r2
   b799e:	f7fe bbc3 	b.w	b6128 <network_get_listen_timeout>

000b79a2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b79a2:	2200      	movs	r2, #0
   b79a4:	6840      	ldr	r0, [r0, #4]
   b79a6:	4611      	mov	r1, r2
   b79a8:	f7fe bb9e 	b.w	b60e8 <network_listening>

000b79ac <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b79ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b79b0:	b095      	sub	sp, #84	; 0x54
   b79b2:	4614      	mov	r4, r2
   b79b4:	460d      	mov	r5, r1
   b79b6:	4607      	mov	r7, r0
    IPAddress addr;
   b79b8:	f7ff ff60 	bl	b787c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b79bc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b79be:	221c      	movs	r2, #28
   b79c0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b79c2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b79c4:	f001 fe00 	bl	b95c8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b79c8:	2340      	movs	r3, #64	; 0x40
   b79ca:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b79cc:	4620      	mov	r0, r4
   b79ce:	466b      	mov	r3, sp
   b79d0:	aa0c      	add	r2, sp, #48	; 0x30
   b79d2:	2100      	movs	r1, #0
   b79d4:	f7fe f9ba 	bl	b5d4c <netdb_getaddrinfo>
    if (!r) {
   b79d8:	4604      	mov	r4, r0
   b79da:	2800      	cmp	r0, #0
   b79dc:	d14b      	bne.n	b7a76 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b79de:	4602      	mov	r2, r0
   b79e0:	2101      	movs	r1, #1
   b79e2:	6868      	ldr	r0, [r5, #4]
   b79e4:	f7fe fb60 	bl	b60a8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b79e8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b79ea:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b79ec:	4622      	mov	r2, r4
   b79ee:	6868      	ldr	r0, [r5, #4]
   b79f0:	f7fe fb5a 	bl	b60a8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b79f4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b79f6:	4681      	mov	r9, r0
        bool ok = false;
   b79f8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b79fa:	2e00      	cmp	r6, #0
   b79fc:	d03b      	beq.n	b7a76 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b79fe:	2900      	cmp	r1, #0
   b7a00:	d139      	bne.n	b7a76 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7a02:	6873      	ldr	r3, [r6, #4]
   b7a04:	2b02      	cmp	r3, #2
   b7a06:	d003      	beq.n	b7a10 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7a08:	2b0a      	cmp	r3, #10
   b7a0a:	d011      	beq.n	b7a30 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7a0c:	69f6      	ldr	r6, [r6, #28]
   b7a0e:	e7f4      	b.n	b79fa <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7a10:	f1b8 0f00 	cmp.w	r8, #0
   b7a14:	d0fa      	beq.n	b7a0c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7a16:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7a18:	a806      	add	r0, sp, #24
   b7a1a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7a1c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7a1e:	f7ff ff71 	bl	b7904 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7a24:	1d3c      	adds	r4, r7, #4
   b7a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7a28:	682b      	ldr	r3, [r5, #0]
   b7a2a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7a2c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7a2e:	e7ed      	b.n	b7a0c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7a30:	f1b9 0f00 	cmp.w	r9, #0
   b7a34:	d0ea      	beq.n	b7a0c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7a36:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7a38:	2210      	movs	r2, #16
   b7a3a:	a801      	add	r0, sp, #4
   b7a3c:	f001 fdc4 	bl	b95c8 <memset>
                    a.v = 6;
   b7a40:	2306      	movs	r3, #6
   b7a42:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7a46:	ad01      	add	r5, sp, #4
   b7a48:	f104 0308 	add.w	r3, r4, #8
   b7a4c:	3418      	adds	r4, #24
   b7a4e:	6818      	ldr	r0, [r3, #0]
   b7a50:	6859      	ldr	r1, [r3, #4]
   b7a52:	462a      	mov	r2, r5
   b7a54:	c203      	stmia	r2!, {r0, r1}
   b7a56:	3308      	adds	r3, #8
   b7a58:	42a3      	cmp	r3, r4
   b7a5a:	4615      	mov	r5, r2
   b7a5c:	d1f7      	bne.n	b7a4e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7a5e:	a901      	add	r1, sp, #4
   b7a60:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7a62:	ad07      	add	r5, sp, #28
   b7a64:	f7ff ff18 	bl	b7898 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7a6a:	1d3c      	adds	r4, r7, #4
   b7a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7a6e:	682b      	ldr	r3, [r5, #0]
   b7a70:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7a72:	4649      	mov	r1, r9
   b7a74:	e7ca      	b.n	b7a0c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7a76:	9800      	ldr	r0, [sp, #0]
   b7a78:	f7fe f960 	bl	b5d3c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7a7c:	4638      	mov	r0, r7
   b7a7e:	b015      	add	sp, #84	; 0x54
   b7a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7a84 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7a84:	4b02      	ldr	r3, [pc, #8]	; (b7a90 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7a86:	4a03      	ldr	r2, [pc, #12]	; (b7a94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7a88:	601a      	str	r2, [r3, #0]
   b7a8a:	2200      	movs	r2, #0
   b7a8c:	605a      	str	r2, [r3, #4]

} // spark
   b7a8e:	4770      	bx	lr
   b7a90:	2003e648 	.word	0x2003e648
   b7a94:	000ba144 	.word	0x000ba144

000b7a98 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7a9a:	4606      	mov	r6, r0
   b7a9c:	460d      	mov	r5, r1
  size_t n = 0;
   b7a9e:	188f      	adds	r7, r1, r2
   b7aa0:	2400      	movs	r4, #0
  while (size--) {
   b7aa2:	42bd      	cmp	r5, r7
   b7aa4:	d00c      	beq.n	b7ac0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7aa6:	6833      	ldr	r3, [r6, #0]
   b7aa8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7aac:	689b      	ldr	r3, [r3, #8]
   b7aae:	4630      	mov	r0, r6
   b7ab0:	4798      	blx	r3
     if (chunk>=0)
   b7ab2:	1e03      	subs	r3, r0, #0
   b7ab4:	db01      	blt.n	b7aba <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7ab6:	441c      	add	r4, r3
  while (size--) {
   b7ab8:	e7f3      	b.n	b7aa2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7aba:	2c00      	cmp	r4, #0
   b7abc:	bf08      	it	eq
   b7abe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7ac0:	4620      	mov	r0, r4
   b7ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7ac4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7ac4:	b513      	push	{r0, r1, r4, lr}
   b7ac6:	4604      	mov	r4, r0
    }
   b7ac8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7aca:	b159      	cbz	r1, b7ae4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7acc:	9101      	str	r1, [sp, #4]
   b7ace:	f001 fdc3 	bl	b9658 <strlen>
   b7ad2:	6823      	ldr	r3, [r4, #0]
   b7ad4:	9901      	ldr	r1, [sp, #4]
   b7ad6:	68db      	ldr	r3, [r3, #12]
   b7ad8:	4602      	mov	r2, r0
   b7ada:	4620      	mov	r0, r4
    }
   b7adc:	b002      	add	sp, #8
   b7ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7ae2:	4718      	bx	r3
    }
   b7ae4:	b002      	add	sp, #8
   b7ae6:	bd10      	pop	{r4, pc}

000b7ae8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b7ae8:	b508      	push	{r3, lr}
  return write(str);
   b7aea:	f7ff ffeb 	bl	b7ac4 <_ZN5Print5writeEPKc>
}
   b7aee:	bd08      	pop	{r3, pc}

000b7af0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7af0:	6803      	ldr	r3, [r0, #0]
   b7af2:	689b      	ldr	r3, [r3, #8]
   b7af4:	4718      	bx	r3

000b7af6 <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   b7af6:	680a      	ldr	r2, [r1, #0]
 {
   b7af8:	460b      	mov	r3, r1
   return x.printTo(*this);
   b7afa:	6812      	ldr	r2, [r2, #0]
   b7afc:	4601      	mov	r1, r0
   b7afe:	4618      	mov	r0, r3
   b7b00:	4710      	bx	r2

000b7b02 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b7b02:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7b04:	210d      	movs	r1, #13
{
   b7b06:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7b08:	f7ff fff2 	bl	b7af0 <_ZN5Print5printEc>
  n += print('\n');
   b7b0c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7b0e:	4604      	mov	r4, r0
  n += print('\n');
   b7b10:	4628      	mov	r0, r5
   b7b12:	f7ff ffed 	bl	b7af0 <_ZN5Print5printEc>
  return n;
}
   b7b16:	4420      	add	r0, r4
   b7b18:	bd38      	pop	{r3, r4, r5, pc}

000b7b1a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7b1a:	b538      	push	{r3, r4, r5, lr}
   b7b1c:	4605      	mov	r5, r0
  return write(str);
   b7b1e:	f7ff ffd1 	bl	b7ac4 <_ZN5Print5writeEPKc>
   b7b22:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7b24:	4628      	mov	r0, r5
   b7b26:	f7ff ffec 	bl	b7b02 <_ZN5Print7printlnEv>
  return n;
}
   b7b2a:	4420      	add	r0, r4
   b7b2c:	bd38      	pop	{r3, r4, r5, pc}

000b7b2e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7b2e:	b530      	push	{r4, r5, lr}
   b7b30:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7b32:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7b34:	2a01      	cmp	r2, #1
  *str = '\0';
   b7b36:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7b3a:	bf98      	it	ls
   b7b3c:	220a      	movls	r2, #10
   b7b3e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7b40:	460d      	mov	r5, r1
   b7b42:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7b46:	fb01 5312 	mls	r3, r1, r2, r5
   b7b4a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7b4e:	2b09      	cmp	r3, #9
   b7b50:	bf94      	ite	ls
   b7b52:	3330      	addls	r3, #48	; 0x30
   b7b54:	3337      	addhi	r3, #55	; 0x37
   b7b56:	b2db      	uxtb	r3, r3
  } while(n);
   b7b58:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7b5a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7b5e:	d9ef      	bls.n	b7b40 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7b60:	4621      	mov	r1, r4
   b7b62:	f7ff ffaf 	bl	b7ac4 <_ZN5Print5writeEPKc>
}
   b7b66:	b00b      	add	sp, #44	; 0x2c
   b7b68:	bd30      	pop	{r4, r5, pc}

000b7b6a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7b6e:	b086      	sub	sp, #24
   b7b70:	af00      	add	r7, sp, #0
   b7b72:	4605      	mov	r5, r0
   b7b74:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7b76:	1d38      	adds	r0, r7, #4
   b7b78:	2114      	movs	r1, #20
{
   b7b7a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7b7c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7b7e:	f7fe fb0b 	bl	b6198 <vsnprintf>

    if (n<bufsize)
   b7b82:	2813      	cmp	r0, #19
   b7b84:	d80e      	bhi.n	b7ba4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7b86:	1d39      	adds	r1, r7, #4
   b7b88:	4628      	mov	r0, r5
   b7b8a:	f7ff ff9b 	bl	b7ac4 <_ZN5Print5writeEPKc>
   b7b8e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7b90:	b11e      	cbz	r6, b7b9a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7b92:	4628      	mov	r0, r5
   b7b94:	f7ff ffb5 	bl	b7b02 <_ZN5Print7printlnEv>
   b7b98:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7b9a:	4620      	mov	r0, r4
   b7b9c:	3718      	adds	r7, #24
   b7b9e:	46bd      	mov	sp, r7
   b7ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7ba4:	f100 0308 	add.w	r3, r0, #8
   b7ba8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7bac:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7bae:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7bb2:	4622      	mov	r2, r4
   b7bb4:	1c41      	adds	r1, r0, #1
   b7bb6:	683b      	ldr	r3, [r7, #0]
   b7bb8:	4668      	mov	r0, sp
   b7bba:	f7fe faed 	bl	b6198 <vsnprintf>
  return write(str);
   b7bbe:	4669      	mov	r1, sp
   b7bc0:	4628      	mov	r0, r5
   b7bc2:	f7ff ff7f 	bl	b7ac4 <_ZN5Print5writeEPKc>
   b7bc6:	4604      	mov	r4, r0
   b7bc8:	46c5      	mov	sp, r8
   b7bca:	e7e1      	b.n	b7b90 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7bcc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   b7bcc:	b510      	push	{r4, lr}
   b7bce:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b7bd0:	f7fe fc24 	bl	b641c <_ZNSt14_Function_baseD1Ev>
   b7bd4:	4620      	mov	r0, r4
   b7bd6:	bd10      	pop	{r4, pc}

000b7bd8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7bd8:	4803      	ldr	r0, [pc, #12]	; (b7be8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   b7bda:	4a04      	ldr	r2, [pc, #16]	; (b7bec <_GLOBAL__sub_I_RGB+0x14>)
   b7bdc:	4904      	ldr	r1, [pc, #16]	; (b7bf0 <_GLOBAL__sub_I_RGB+0x18>)
   b7bde:	2300      	movs	r3, #0
   b7be0:	6083      	str	r3, [r0, #8]
   b7be2:	f001 b90b 	b.w	b8dfc <__aeabi_atexit>
   b7be6:	bf00      	nop
   b7be8:	2003e650 	.word	0x2003e650
   b7bec:	2003da58 	.word	0x2003da58
   b7bf0:	000b7bcd 	.word	0x000b7bcd

000b7bf4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7bf4:	2100      	movs	r1, #0
   b7bf6:	f7fe b929 	b.w	b5e4c <hal_spi_release>

000b7bfa <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7bfa:	2100      	movs	r1, #0
   b7bfc:	f7fe b91e 	b.w	b5e3c <hal_spi_acquire>

000b7c00 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7c00:	b510      	push	{r4, lr}
   b7c02:	4604      	mov	r4, r0
   b7c04:	4608      	mov	r0, r1
{
    _spi = spi;
   b7c06:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7c08:	f7fe f900 	bl	b5e0c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7c0c:	2300      	movs	r3, #0
   b7c0e:	6063      	str	r3, [r4, #4]
}
   b7c10:	4620      	mov	r0, r4
   b7c12:	bd10      	pop	{r4, pc}

000b7c14 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7c14:	b513      	push	{r0, r1, r4, lr}
   b7c16:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7c18:	7800      	ldrb	r0, [r0, #0]
   b7c1a:	f7ff ffee 	bl	b7bfa <_ZN8SPIClass4lockEv.isra.0>
   b7c1e:	b958      	cbnz	r0, b7c38 <_ZN8SPIClass5beginEv+0x24>
   b7c20:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7c22:	9001      	str	r0, [sp, #4]
   b7c24:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7c28:	f7fe f8c8 	bl	b5dbc <hal_spi_begin>
        unlock();
   b7c2c:	9801      	ldr	r0, [sp, #4]
    }
}
   b7c2e:	b002      	add	sp, #8
   b7c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7c34:	f7ff bfde 	b.w	b7bf4 <_ZN8SPIClass6unlockEv.isra.0>
   b7c38:	b002      	add	sp, #8
   b7c3a:	bd10      	pop	{r4, pc}

000b7c3c <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b7c3c:	b513      	push	{r0, r1, r4, lr}
   b7c3e:	4604      	mov	r4, r0
    if (!lock())
   b7c40:	7800      	ldrb	r0, [r0, #0]
{
   b7c42:	9101      	str	r1, [sp, #4]
    if (!lock())
   b7c44:	f7ff ffd9 	bl	b7bfa <_ZN8SPIClass4lockEv.isra.0>
   b7c48:	9901      	ldr	r1, [sp, #4]
   b7c4a:	b948      	cbnz	r0, b7c60 <_ZN8SPIClass11setBitOrderEh+0x24>
   b7c4c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b7c4e:	9001      	str	r0, [sp, #4]
   b7c50:	f7fe f8bc 	bl	b5dcc <hal_spi_set_bit_order>
        unlock();
   b7c54:	9801      	ldr	r0, [sp, #4]
    }
}
   b7c56:	b002      	add	sp, #8
   b7c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7c5c:	f7ff bfca 	b.w	b7bf4 <_ZN8SPIClass6unlockEv.isra.0>
   b7c60:	b002      	add	sp, #8
   b7c62:	bd10      	pop	{r4, pc}

000b7c64 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b7c64:	b513      	push	{r0, r1, r4, lr}
   b7c66:	4604      	mov	r4, r0
    if (!lock())
   b7c68:	7800      	ldrb	r0, [r0, #0]
{
   b7c6a:	9101      	str	r1, [sp, #4]
    if (!lock())
   b7c6c:	f7ff ffc5 	bl	b7bfa <_ZN8SPIClass4lockEv.isra.0>
   b7c70:	9901      	ldr	r1, [sp, #4]
   b7c72:	b948      	cbnz	r0, b7c88 <_ZN8SPIClass11setDataModeEh+0x24>
   b7c74:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b7c76:	9001      	str	r0, [sp, #4]
   b7c78:	f7fe f8b0 	bl	b5ddc <hal_spi_set_data_mode>
        unlock();
   b7c7c:	9801      	ldr	r0, [sp, #4]
    }
}
   b7c7e:	b002      	add	sp, #8
   b7c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7c84:	f7ff bfb6 	b.w	b7bf4 <_ZN8SPIClass6unlockEv.isra.0>
   b7c88:	b002      	add	sp, #8
   b7c8a:	bd10      	pop	{r4, pc}

000b7c8c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7c8c:	0840      	lsrs	r0, r0, #1
{
   b7c8e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7c90:	6018      	str	r0, [r3, #0]
   b7c92:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7c94:	6818      	ldr	r0, [r3, #0]
   b7c96:	4288      	cmp	r0, r1
   b7c98:	b2e5      	uxtb	r5, r4
   b7c9a:	d906      	bls.n	b7caa <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7c9c:	3401      	adds	r4, #1
   b7c9e:	2c08      	cmp	r4, #8
   b7ca0:	d002      	beq.n	b7ca8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7ca2:	0840      	lsrs	r0, r0, #1
   b7ca4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7ca6:	e7f5      	b.n	b7c94 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7ca8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7caa:	4b02      	ldr	r3, [pc, #8]	; (b7cb4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7cac:	5d5b      	ldrb	r3, [r3, r5]
   b7cae:	7013      	strb	r3, [r2, #0]
}
   b7cb0:	bd30      	pop	{r4, r5, pc}
   b7cb2:	bf00      	nop
   b7cb4:	000ba178 	.word	0x000ba178

000b7cb8 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b7cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7cbc:	b088      	sub	sp, #32
    unsigned clock = 0;
   b7cbe:	2300      	movs	r3, #0
{
   b7cc0:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b7cc2:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b7cc4:	9302      	str	r3, [sp, #8]
{
   b7cc6:	460e      	mov	r6, r1
   b7cc8:	4617      	mov	r7, r2
    if (!lock())
   b7cca:	f7ff ff96 	bl	b7bfa <_ZN8SPIClass4lockEv.isra.0>
   b7cce:	4605      	mov	r5, r0
   b7cd0:	bb00      	cbnz	r0, b7d14 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b7cd2:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7cd6:	4601      	mov	r1, r0
   b7cd8:	2214      	movs	r2, #20
   b7cda:	a803      	add	r0, sp, #12
   b7cdc:	f001 fc74 	bl	b95c8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7ce0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7ce2:	462a      	mov	r2, r5
   b7ce4:	a903      	add	r1, sp, #12
   b7ce6:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b7ce8:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b7cec:	f7fe f89e 	bl	b5e2c <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b7cf0:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b7cf2:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b7cf6:	ab02      	add	r3, sp, #8
   b7cf8:	f10d 0207 	add.w	r2, sp, #7
   b7cfc:	fb07 f106 	mul.w	r1, r7, r6
   b7d00:	f7ff ffc4 	bl	b7c8c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b7d04:	7820      	ldrb	r0, [r4, #0]
   b7d06:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b7d0a:	f7fe f86f 	bl	b5dec <hal_spi_set_clock_divider>
        unlock();
   b7d0e:	7820      	ldrb	r0, [r4, #0]
   b7d10:	f7ff ff70 	bl	b7bf4 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b7d14:	9802      	ldr	r0, [sp, #8]
   b7d16:	b008      	add	sp, #32
   b7d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7d1c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b7d1c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7d1e:	7800      	ldrb	r0, [r0, #0]
   b7d20:	f7fe f86c 	bl	b5dfc <hal_spi_transfer>
}
   b7d24:	b2c0      	uxtb	r0, r0
   b7d26:	bd08      	pop	{r3, pc}

000b7d28 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7d28:	b510      	push	{r4, lr}
   b7d2a:	4604      	mov	r4, r0
{
	free(buffer);
   b7d2c:	6800      	ldr	r0, [r0, #0]
   b7d2e:	f7fe fa1b 	bl	b6168 <free>
}
   b7d32:	4620      	mov	r0, r4
   b7d34:	bd10      	pop	{r4, pc}

000b7d36 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b7d36:	b510      	push	{r4, lr}
   b7d38:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7d3a:	6800      	ldr	r0, [r0, #0]
   b7d3c:	b108      	cbz	r0, b7d42 <_ZN6String10invalidateEv+0xc>
   b7d3e:	f7fe fa13 	bl	b6168 <free>
	buffer = NULL;
   b7d42:	2300      	movs	r3, #0
	capacity = len = 0;
   b7d44:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7d48:	6023      	str	r3, [r4, #0]
}
   b7d4a:	bd10      	pop	{r4, pc}

000b7d4c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7d4c:	b538      	push	{r3, r4, r5, lr}
   b7d4e:	4604      	mov	r4, r0
   b7d50:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7d52:	6800      	ldr	r0, [r0, #0]
   b7d54:	3101      	adds	r1, #1
   b7d56:	f7fe fa0f 	bl	b6178 <realloc>
	if (newbuffer) {
   b7d5a:	b110      	cbz	r0, b7d62 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7d5c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7d60:	2001      	movs	r0, #1
	}
	return 0;
}
   b7d62:	bd38      	pop	{r3, r4, r5, pc}

000b7d64 <_ZN6String7reserveEj>:
{
   b7d64:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7d66:	6803      	ldr	r3, [r0, #0]
{
   b7d68:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7d6a:	b123      	cbz	r3, b7d76 <_ZN6String7reserveEj+0x12>
   b7d6c:	6843      	ldr	r3, [r0, #4]
   b7d6e:	428b      	cmp	r3, r1
   b7d70:	d301      	bcc.n	b7d76 <_ZN6String7reserveEj+0x12>
   b7d72:	2001      	movs	r0, #1
}
   b7d74:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7d76:	4620      	mov	r0, r4
   b7d78:	f7ff ffe8 	bl	b7d4c <_ZN6String12changeBufferEj>
   b7d7c:	2800      	cmp	r0, #0
   b7d7e:	d0f9      	beq.n	b7d74 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7d80:	68a3      	ldr	r3, [r4, #8]
   b7d82:	2b00      	cmp	r3, #0
   b7d84:	d1f5      	bne.n	b7d72 <_ZN6String7reserveEj+0xe>
   b7d86:	6822      	ldr	r2, [r4, #0]
   b7d88:	7013      	strb	r3, [r2, #0]
   b7d8a:	e7f2      	b.n	b7d72 <_ZN6String7reserveEj+0xe>

000b7d8c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7d8e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7d90:	4611      	mov	r1, r2
   b7d92:	9201      	str	r2, [sp, #4]
{
   b7d94:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7d96:	f7ff ffe5 	bl	b7d64 <_ZN6String7reserveEj>
   b7d9a:	9a01      	ldr	r2, [sp, #4]
   b7d9c:	b928      	cbnz	r0, b7daa <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7d9e:	4620      	mov	r0, r4
   b7da0:	f7ff ffc9 	bl	b7d36 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7da4:	4620      	mov	r0, r4
   b7da6:	b003      	add	sp, #12
   b7da8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7daa:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7dac:	4629      	mov	r1, r5
   b7dae:	6820      	ldr	r0, [r4, #0]
   b7db0:	f001 fbe2 	bl	b9578 <memcpy>
	buffer[len] = 0;
   b7db4:	6822      	ldr	r2, [r4, #0]
   b7db6:	68a3      	ldr	r3, [r4, #8]
   b7db8:	2100      	movs	r1, #0
   b7dba:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7dbc:	e7f2      	b.n	b7da4 <_ZN6String4copyEPKcj+0x18>

000b7dbe <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7dbe:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7dc0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7dc2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7dc6:	4604      	mov	r4, r0
	len = 0;
   b7dc8:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7dca:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7dcc:	b141      	cbz	r1, b7de0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7dce:	4608      	mov	r0, r1
   b7dd0:	9101      	str	r1, [sp, #4]
   b7dd2:	f001 fc41 	bl	b9658 <strlen>
   b7dd6:	9901      	ldr	r1, [sp, #4]
   b7dd8:	4602      	mov	r2, r0
   b7dda:	4620      	mov	r0, r4
   b7ddc:	f7ff ffd6 	bl	b7d8c <_ZN6String4copyEPKcj>
}
   b7de0:	4620      	mov	r0, r4
   b7de2:	b002      	add	sp, #8
   b7de4:	bd10      	pop	{r4, pc}

000b7de6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b7de6:	4288      	cmp	r0, r1
{
   b7de8:	b510      	push	{r4, lr}
   b7dea:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7dec:	d005      	beq.n	b7dfa <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b7dee:	680b      	ldr	r3, [r1, #0]
   b7df0:	b12b      	cbz	r3, b7dfe <_ZN6StringaSERKS_+0x18>
   b7df2:	688a      	ldr	r2, [r1, #8]
   b7df4:	4619      	mov	r1, r3
   b7df6:	f7ff ffc9 	bl	b7d8c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7dfa:	4620      	mov	r0, r4
   b7dfc:	bd10      	pop	{r4, pc}
	else invalidate();
   b7dfe:	f7ff ff9a 	bl	b7d36 <_ZN6String10invalidateEv>
   b7e02:	e7fa      	b.n	b7dfa <_ZN6StringaSERKS_+0x14>

000b7e04 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7e04:	b513      	push	{r0, r1, r4, lr}
   b7e06:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7e08:	b159      	cbz	r1, b7e22 <_ZN6StringaSEPKc+0x1e>
   b7e0a:	4608      	mov	r0, r1
   b7e0c:	9101      	str	r1, [sp, #4]
   b7e0e:	f001 fc23 	bl	b9658 <strlen>
   b7e12:	9901      	ldr	r1, [sp, #4]
   b7e14:	4602      	mov	r2, r0
   b7e16:	4620      	mov	r0, r4
   b7e18:	f7ff ffb8 	bl	b7d8c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7e1c:	4620      	mov	r0, r4
   b7e1e:	b002      	add	sp, #8
   b7e20:	bd10      	pop	{r4, pc}
	else invalidate();
   b7e22:	f7ff ff88 	bl	b7d36 <_ZN6String10invalidateEv>
   b7e26:	e7f9      	b.n	b7e1c <_ZN6StringaSEPKc+0x18>

000b7e28 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b7e28:	b510      	push	{r4, lr}
   b7e2a:	4604      	mov	r4, r0
   b7e2c:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b7e2e:	2300      	movs	r3, #0
	capacity = 0;
   b7e30:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b7e34:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b7e36:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b7e38:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b7e3a:	a901      	add	r1, sp, #4
   b7e3c:	f000 fe5c 	bl	b8af8 <itoa>
	*this = buf;
   b7e40:	a901      	add	r1, sp, #4
   b7e42:	4620      	mov	r0, r4
   b7e44:	f7ff ffde 	bl	b7e04 <_ZN6StringaSEPKc>
}
   b7e48:	4620      	mov	r0, r4
   b7e4a:	b00a      	add	sp, #40	; 0x28
   b7e4c:	bd10      	pop	{r4, pc}

000b7e4e <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b7e4e:	b510      	push	{r4, lr}
   b7e50:	4604      	mov	r4, r0
   b7e52:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b7e54:	2300      	movs	r3, #0
	capacity = 0;
   b7e56:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b7e5a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b7e5c:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b7e5e:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b7e60:	a901      	add	r1, sp, #4
   b7e62:	f000 fde0 	bl	b8a26 <ltoa>
	*this = buf;
   b7e66:	a901      	add	r1, sp, #4
   b7e68:	4620      	mov	r0, r4
   b7e6a:	f7ff ffcb 	bl	b7e04 <_ZN6StringaSEPKc>
}
   b7e6e:	4620      	mov	r0, r4
   b7e70:	b00a      	add	sp, #40	; 0x28
   b7e72:	bd10      	pop	{r4, pc}

000b7e74 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b7e74:	b570      	push	{r4, r5, r6, lr}
   b7e76:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b7e78:	460e      	mov	r6, r1
   b7e7a:	b909      	cbnz	r1, b7e80 <_ZN6String6concatEPKcj+0xc>
   b7e7c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b7e7e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b7e80:	b16a      	cbz	r2, b7e9e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b7e82:	6884      	ldr	r4, [r0, #8]
   b7e84:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b7e86:	4621      	mov	r1, r4
   b7e88:	f7ff ff6c 	bl	b7d64 <_ZN6String7reserveEj>
   b7e8c:	2800      	cmp	r0, #0
   b7e8e:	d0f5      	beq.n	b7e7c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b7e90:	6828      	ldr	r0, [r5, #0]
   b7e92:	68ab      	ldr	r3, [r5, #8]
   b7e94:	4631      	mov	r1, r6
   b7e96:	4418      	add	r0, r3
   b7e98:	f001 fbd6 	bl	b9648 <strcpy>
	len = newlen;
   b7e9c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b7e9e:	2001      	movs	r0, #1
   b7ea0:	e7ed      	b.n	b7e7e <_ZN6String6concatEPKcj+0xa>

000b7ea2 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b7ea2:	688a      	ldr	r2, [r1, #8]
   b7ea4:	6809      	ldr	r1, [r1, #0]
   b7ea6:	f7ff bfe5 	b.w	b7e74 <_ZN6String6concatEPKcj>

000b7eaa <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b7eaa:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b7eac:	2300      	movs	r3, #0
	buf[0] = c;
   b7eae:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b7eb2:	2201      	movs	r2, #1
   b7eb4:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b7eb6:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b7eba:	f7ff ffdb 	bl	b7e74 <_ZN6String6concatEPKcj>
}
   b7ebe:	b003      	add	sp, #12
   b7ec0:	f85d fb04 	ldr.w	pc, [sp], #4

000b7ec4 <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
   b7ec4:	b513      	push	{r0, r1, r4, lr}
	char buf[4];
	itoa(num, buf, 10);
   b7ec6:	220a      	movs	r2, #10
{
   b7ec8:	4604      	mov	r4, r0
   b7eca:	4608      	mov	r0, r1
	itoa(num, buf, 10);
   b7ecc:	a901      	add	r1, sp, #4
   b7ece:	f000 fe13 	bl	b8af8 <itoa>
	return concat(buf, strlen(buf));
   b7ed2:	a801      	add	r0, sp, #4
   b7ed4:	f001 fbc0 	bl	b9658 <strlen>
   b7ed8:	a901      	add	r1, sp, #4
   b7eda:	4602      	mov	r2, r0
   b7edc:	4620      	mov	r0, r4
   b7ede:	f7ff ffc9 	bl	b7e74 <_ZN6String6concatEPKcj>
}
   b7ee2:	b002      	add	sp, #8
   b7ee4:	bd10      	pop	{r4, pc}

000b7ee6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b7ee6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7ee8:	688a      	ldr	r2, [r1, #8]
   b7eea:	6809      	ldr	r1, [r1, #0]
{
   b7eec:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7eee:	f7ff ffc1 	bl	b7e74 <_ZN6String6concatEPKcj>
   b7ef2:	b910      	cbnz	r0, b7efa <_ZplRK15StringSumHelperRK6String+0x14>
   b7ef4:	4620      	mov	r0, r4
   b7ef6:	f7ff ff1e 	bl	b7d36 <_ZN6String10invalidateEv>
	return a;
}
   b7efa:	4620      	mov	r0, r4
   b7efc:	bd10      	pop	{r4, pc}

000b7efe <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b7efe:	b513      	push	{r0, r1, r4, lr}
   b7f00:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b7f02:	b929      	cbnz	r1, b7f10 <_ZplRK15StringSumHelperPKc+0x12>
   b7f04:	4620      	mov	r0, r4
   b7f06:	f7ff ff16 	bl	b7d36 <_ZN6String10invalidateEv>
	return a;
}
   b7f0a:	4620      	mov	r0, r4
   b7f0c:	b002      	add	sp, #8
   b7f0e:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b7f10:	4608      	mov	r0, r1
   b7f12:	9101      	str	r1, [sp, #4]
   b7f14:	f001 fba0 	bl	b9658 <strlen>
   b7f18:	9901      	ldr	r1, [sp, #4]
   b7f1a:	4602      	mov	r2, r0
   b7f1c:	4620      	mov	r0, r4
   b7f1e:	f7ff ffa9 	bl	b7e74 <_ZN6String6concatEPKcj>
   b7f22:	2800      	cmp	r0, #0
   b7f24:	d0ee      	beq.n	b7f04 <_ZplRK15StringSumHelperPKc+0x6>
   b7f26:	e7f0      	b.n	b7f0a <_ZplRK15StringSumHelperPKc+0xc>

000b7f28 <_ZplRK15StringSumHelperh>:
	if (!a.concat(c)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
   b7f28:	b510      	push	{r4, lr}
   b7f2a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   b7f2c:	f7ff ffca 	bl	b7ec4 <_ZN6String6concatEh>
   b7f30:	b910      	cbnz	r0, b7f38 <_ZplRK15StringSumHelperh+0x10>
   b7f32:	4620      	mov	r0, r4
   b7f34:	f7ff feff 	bl	b7d36 <_ZN6String10invalidateEv>
	return a;
}
   b7f38:	4620      	mov	r0, r4
   b7f3a:	bd10      	pop	{r4, pc}

000b7f3c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b7f3c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b7f3e:	6882      	ldr	r2, [r0, #8]
   b7f40:	b93a      	cbnz	r2, b7f52 <_ZNK6String6equalsEPKc+0x16>
   b7f42:	b121      	cbz	r1, b7f4e <_ZNK6String6equalsEPKc+0x12>
   b7f44:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b7f46:	fab0 f080 	clz	r0, r0
   b7f4a:	0940      	lsrs	r0, r0, #5
   b7f4c:	e000      	b.n	b7f50 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b7f4e:	2001      	movs	r0, #1
}
   b7f50:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b7f52:	6800      	ldr	r0, [r0, #0]
   b7f54:	b909      	cbnz	r1, b7f5a <_ZNK6String6equalsEPKc+0x1e>
   b7f56:	7800      	ldrb	r0, [r0, #0]
   b7f58:	e7f5      	b.n	b7f46 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b7f5a:	f001 fb6b 	bl	b9634 <strcmp>
   b7f5e:	e7f2      	b.n	b7f46 <_ZNK6String6equalsEPKc+0xa>

000b7f60 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b7f60:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b7f62:	6883      	ldr	r3, [r0, #8]
   b7f64:	4293      	cmp	r3, r2
   b7f66:	d907      	bls.n	b7f78 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b7f68:	6804      	ldr	r4, [r0, #0]
   b7f6a:	6809      	ldr	r1, [r1, #0]
   b7f6c:	18a0      	adds	r0, r4, r2
   b7f6e:	f001 fb9a 	bl	b96a6 <strstr>
	if (found == NULL) return -1;
   b7f72:	b108      	cbz	r0, b7f78 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b7f74:	1b00      	subs	r0, r0, r4
}
   b7f76:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b7f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7f7c:	e7fb      	b.n	b7f76 <_ZNK6String7indexOfERKS_j+0x16>

000b7f7e <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b7f7e:	2200      	movs	r2, #0
   b7f80:	f7ff bfee 	b.w	b7f60 <_ZNK6String7indexOfERKS_j>

000b7f84 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b7f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b7f86:	429a      	cmp	r2, r3
{
   b7f88:	460f      	mov	r7, r1
   b7f8a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b7f8c:	490c      	ldr	r1, [pc, #48]	; (b7fc0 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b7f8e:	bf88      	it	hi
   b7f90:	4613      	movhi	r3, r2
{
   b7f92:	4614      	mov	r4, r2
   b7f94:	4606      	mov	r6, r0
	if (left > right) {
   b7f96:	bf84      	itt	hi
   b7f98:	462c      	movhi	r4, r5
   b7f9a:	461d      	movhi	r5, r3
	String out;
   b7f9c:	f7ff ff0f 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b7fa0:	68bb      	ldr	r3, [r7, #8]
   b7fa2:	42a3      	cmp	r3, r4
   b7fa4:	d30a      	bcc.n	b7fbc <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b7fa6:	6839      	ldr	r1, [r7, #0]
   b7fa8:	42ab      	cmp	r3, r5
   b7faa:	bf94      	ite	ls
   b7fac:	ebc4 0203 	rsbls	r2, r4, r3
   b7fb0:	ebc4 0205 	rsbhi	r2, r4, r5
   b7fb4:	4421      	add	r1, r4
   b7fb6:	4630      	mov	r0, r6
   b7fb8:	f7ff fee8 	bl	b7d8c <_ZN6String4copyEPKcj>
	return out;
}
   b7fbc:	4630      	mov	r0, r6
   b7fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7fc0:	000b9903 	.word	0x000b9903

000b7fc4 <_ZNK6String9substringEj>:
{
   b7fc4:	b510      	push	{r4, lr}
   b7fc6:	4604      	mov	r4, r0
	return substring(left, len);
   b7fc8:	688b      	ldr	r3, [r1, #8]
   b7fca:	f7ff ffdb 	bl	b7f84 <_ZNK6String9substringEjj>
}
   b7fce:	4620      	mov	r0, r4
   b7fd0:	bd10      	pop	{r4, pc}

000b7fd2 <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
   b7fd2:	b538      	push	{r3, r4, r5, lr}
   b7fd4:	4604      	mov	r4, r0
   b7fd6:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
   b7fd8:	68a3      	ldr	r3, [r4, #8]
   b7fda:	428b      	cmp	r3, r1
   b7fdc:	d911      	bls.n	b8002 <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
   b7fde:	b182      	cbz	r2, b8002 <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
   b7fe0:	4411      	add	r1, r2
   b7fe2:	428b      	cmp	r3, r1
   b7fe4:	bf38      	it	cc
   b7fe6:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
   b7fe8:	6825      	ldr	r5, [r4, #0]
	len = len - count;
   b7fea:	1a99      	subs	r1, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
   b7fec:	1813      	adds	r3, r2, r0
	len = len - count;
   b7fee:	60a1      	str	r1, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
   b7ff0:	1a0a      	subs	r2, r1, r0
   b7ff2:	18e9      	adds	r1, r5, r3
   b7ff4:	4428      	add	r0, r5
   b7ff6:	f001 facd 	bl	b9594 <memmove>
	buffer[len] = 0;
   b7ffa:	6822      	ldr	r2, [r4, #0]
   b7ffc:	68a3      	ldr	r3, [r4, #8]
   b7ffe:	2100      	movs	r1, #0
   b8000:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   b8002:	4620      	mov	r0, r4
   b8004:	bd38      	pop	{r3, r4, r5, pc}

000b8006 <_ZN6String6removeEj>:
        int count = len - index;
   b8006:	6882      	ldr	r2, [r0, #8]
        return remove(index, count);
   b8008:	1a52      	subs	r2, r2, r1
   b800a:	f7ff bfe2 	b.w	b7fd2 <_ZN6String6removeEjj>

000b800e <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b800e:	b507      	push	{r0, r1, r2, lr}
   b8010:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8012:	2100      	movs	r1, #0
{
   b8014:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8016:	9100      	str	r1, [sp, #0]
   b8018:	2001      	movs	r0, #1
   b801a:	218c      	movs	r1, #140	; 0x8c
   b801c:	f7fd fff2 	bl	b6004 <system_reset>
}
   b8020:	b003      	add	sp, #12
   b8022:	f85d fb04 	ldr.w	pc, [sp], #4

000b8026 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b8026:	4601      	mov	r1, r0
    reset(0, flags);
   b8028:	2000      	movs	r0, #0
   b802a:	f7ff bff0 	b.w	b800e <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b802e <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b802e:	2000      	movs	r0, #0
   b8030:	f7ff bff9 	b.w	b8026 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000b8034 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   b8034:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8036:	4b09      	ldr	r3, [pc, #36]	; (b805c <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8038:	4c09      	ldr	r4, [pc, #36]	; (b8060 <_GLOBAL__sub_I_System+0x2c>)
   b803a:	2202      	movs	r2, #2
   b803c:	601a      	str	r2, [r3, #0]
   b803e:	2000      	movs	r0, #0
    SleepResult() {}
   b8040:	4b08      	ldr	r3, [pc, #32]	; (b8064 <_GLOBAL__sub_I_System+0x30>)
   b8042:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8044:	e9c4 0000 	strd	r0, r0, [r4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8048:	f7fd ffa0 	bl	b5f8c <set_system_mode>
SystemClass System;
   b804c:	4620      	mov	r0, r4
   b804e:	4a06      	ldr	r2, [pc, #24]	; (b8068 <_GLOBAL__sub_I_System+0x34>)
   b8050:	4906      	ldr	r1, [pc, #24]	; (b806c <_GLOBAL__sub_I_System+0x38>)
   b8052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   b8056:	f000 bed1 	b.w	b8dfc <__aeabi_atexit>
   b805a:	bf00      	nop
   b805c:	2003e66c 	.word	0x2003e66c
   b8060:	2003e660 	.word	0x2003e660
   b8064:	ffff0000 	.word	0xffff0000
   b8068:	2003da58 	.word	0x2003da58
   b806c:	000b4125 	.word	0x000b4125

000b8070 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b8070:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8072:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b8074:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8078:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b807a:	2201      	movs	r2, #1
   b807c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8080:	f10d 0107 	add.w	r1, sp, #7
   b8084:	47a0      	blx	r4
}
   b8086:	b002      	add	sp, #8
   b8088:	bd10      	pop	{r4, pc}

000b808a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b808a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b808c:	6803      	ldr	r3, [r0, #0]
   b808e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8094:	46a4      	mov	ip, r4
}
   b8096:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b809a:	4760      	bx	ip

000b809c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b809c:	b513      	push	{r0, r1, r4, lr}
   b809e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b80a0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b80a2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b80a6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b80a8:	f10d 0107 	add.w	r1, sp, #7
   b80ac:	2201      	movs	r2, #1
   b80ae:	47a0      	blx	r4
}
   b80b0:	b002      	add	sp, #8
   b80b2:	bd10      	pop	{r4, pc}

000b80b4 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b80b4:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b80b6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b80b8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b80bc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b80c0:	429a      	cmp	r2, r3
int TCPClient::read() {
   b80c2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b80c4:	d008      	beq.n	b80d8 <_ZN9TCPClient4readEv+0x24>
   b80c6:	6963      	ldr	r3, [r4, #20]
   b80c8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b80cc:	1c51      	adds	r1, r2, #1
   b80ce:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b80d2:	4413      	add	r3, r2
   b80d4:	7918      	ldrb	r0, [r3, #4]
}
   b80d6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b80d8:	6803      	ldr	r3, [r0, #0]
   b80da:	691b      	ldr	r3, [r3, #16]
   b80dc:	4798      	blx	r3
   b80de:	2800      	cmp	r0, #0
   b80e0:	d1f1      	bne.n	b80c6 <_ZN9TCPClient4readEv+0x12>
   b80e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b80e6:	e7f6      	b.n	b80d6 <_ZN9TCPClient4readEv+0x22>

000b80e8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b80e8:	4770      	bx	lr

000b80ea <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b80ea:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b80ec:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b80ee:	43c0      	mvns	r0, r0
   b80f0:	0fc0      	lsrs	r0, r0, #31
   b80f2:	4770      	bx	lr

000b80f4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b80f4:	4770      	bx	lr
	...

000b80f8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b80f8:	4b06      	ldr	r3, [pc, #24]	; (b8114 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b80fa:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b80fc:	b510      	push	{r4, lr}
   b80fe:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8102:	d005      	beq.n	b8110 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8104:	4608      	mov	r0, r1
   b8106:	f000 fe85 	bl	b8e14 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b810a:	2800      	cmp	r0, #0
   b810c:	bf08      	it	eq
   b810e:	2400      	moveq	r4, #0
      }
   b8110:	4620      	mov	r0, r4
   b8112:	bd10      	pop	{r4, pc}
   b8114:	000ba080 	.word	0x000ba080

000b8118 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8118:	b510      	push	{r4, lr}
   b811a:	21ac      	movs	r1, #172	; 0xac
   b811c:	4604      	mov	r4, r0
   b811e:	f000 fe72 	bl	b8e06 <_ZdlPvj>
   b8122:	4620      	mov	r0, r4
   b8124:	bd10      	pop	{r4, pc}

000b8126 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b8126:	21ac      	movs	r1, #172	; 0xac
   b8128:	f000 be6d 	b.w	b8e06 <_ZdlPvj>

000b812c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b812c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8130:	f04f 0800 	mov.w	r8, #0
   b8134:	b086      	sub	sp, #24
   b8136:	461c      	mov	r4, r3
   b8138:	f8c0 8004 	str.w	r8, [r0, #4]
   b813c:	4605      	mov	r5, r0
   b813e:	460e      	mov	r6, r1
   b8140:	4617      	mov	r7, r2
    struct timeval tv = {};
   b8142:	4641      	mov	r1, r8
   b8144:	2210      	movs	r2, #16
   b8146:	a802      	add	r0, sp, #8
   b8148:	f001 fa3e 	bl	b95c8 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b814c:	1c63      	adds	r3, r4, #1
   b814e:	d009      	beq.n	b8164 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b8150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8154:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b8158:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b815c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b8160:	435c      	muls	r4, r3
   b8162:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b8164:	6968      	ldr	r0, [r5, #20]
   b8166:	2310      	movs	r3, #16
   b8168:	9300      	str	r3, [sp, #0]
   b816a:	6800      	ldr	r0, [r0, #0]
   b816c:	ab02      	add	r3, sp, #8
   b816e:	f241 0205 	movw	r2, #4101	; 0x1005
   b8172:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8176:	f7fd fdf1 	bl	b5d5c <sock_setsockopt>
    if (ret < 0) {
   b817a:	2800      	cmp	r0, #0
   b817c:	da07      	bge.n	b818e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b817e:	f7fe f81b 	bl	b61b8 <__errno>
   b8182:	6803      	ldr	r3, [r0, #0]
   b8184:	606b      	str	r3, [r5, #4]
        return 0;
   b8186:	2000      	movs	r0, #0
}
   b8188:	b006      	add	sp, #24
   b818a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b818e:	6968      	ldr	r0, [r5, #20]
   b8190:	2300      	movs	r3, #0
   b8192:	6800      	ldr	r0, [r0, #0]
   b8194:	463a      	mov	r2, r7
   b8196:	4631      	mov	r1, r6
   b8198:	f7fd fe00 	bl	b5d9c <sock_send>
    if (ret < 0) {
   b819c:	1e03      	subs	r3, r0, #0
   b819e:	dbee      	blt.n	b817e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b81a0:	4618      	mov	r0, r3
   b81a2:	e7f1      	b.n	b8188 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b81a4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b81a4:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b81a6:	6984      	ldr	r4, [r0, #24]
   b81a8:	4b0a      	ldr	r3, [pc, #40]	; (b81d4 <_ZN9TCPClientD1Ev+0x30>)
   b81aa:	6003      	str	r3, [r0, #0]
   b81ac:	4605      	mov	r5, r0
   b81ae:	b17c      	cbz	r4, b81d0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b81b0:	6863      	ldr	r3, [r4, #4]
   b81b2:	3b01      	subs	r3, #1
   b81b4:	6063      	str	r3, [r4, #4]
   b81b6:	b95b      	cbnz	r3, b81d0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b81b8:	6823      	ldr	r3, [r4, #0]
   b81ba:	4620      	mov	r0, r4
   b81bc:	689b      	ldr	r3, [r3, #8]
   b81be:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b81c0:	68a3      	ldr	r3, [r4, #8]
   b81c2:	3b01      	subs	r3, #1
   b81c4:	60a3      	str	r3, [r4, #8]
   b81c6:	b91b      	cbnz	r3, b81d0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b81c8:	6823      	ldr	r3, [r4, #0]
   b81ca:	4620      	mov	r0, r4
   b81cc:	68db      	ldr	r3, [r3, #12]
   b81ce:	4798      	blx	r3
   b81d0:	4628      	mov	r0, r5
   b81d2:	bd38      	pop	{r3, r4, r5, pc}
   b81d4:	000ba1bc 	.word	0x000ba1bc

000b81d8 <_ZN9TCPClientD0Ev>:
   b81d8:	b510      	push	{r4, lr}
   b81da:	4604      	mov	r4, r0
   b81dc:	f7ff ffe2 	bl	b81a4 <_ZN9TCPClientD1Ev>
   b81e0:	4620      	mov	r0, r4
   b81e2:	211c      	movs	r1, #28
   b81e4:	f000 fe0f 	bl	b8e06 <_ZdlPvj>
   b81e8:	4620      	mov	r0, r4
   b81ea:	bd10      	pop	{r4, pc}

000b81ec <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b81ec:	b530      	push	{r4, r5, lr}
   b81ee:	b087      	sub	sp, #28
   b81f0:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b81f2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b81f4:	4668      	mov	r0, sp
   b81f6:	f7ff fb85 	bl	b7904 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b81fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b81fc:	3404      	adds	r4, #4
   b81fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8200:	682b      	ldr	r3, [r5, #0]
   b8202:	7023      	strb	r3, [r4, #0]
    }
   b8204:	b007      	add	sp, #28
   b8206:	bd30      	pop	{r4, r5, pc}

000b8208 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b8208:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b820a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b820c:	4b05      	ldr	r3, [pc, #20]	; (b8224 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b820e:	4604      	mov	r4, r0
   b8210:	358c      	adds	r5, #140	; 0x8c
   b8212:	f844 3b04 	str.w	r3, [r4], #4
   b8216:	4606      	mov	r6, r0
   b8218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b821a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b821c:	682b      	ldr	r3, [r5, #0]
   b821e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b8220:	4630      	mov	r0, r6
   b8222:	bd70      	pop	{r4, r5, r6, pc}
   b8224:	000ba12c 	.word	0x000ba12c

000b8228 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b822c:	4698      	mov	r8, r3
    stop();
   b822e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8230:	b093      	sub	sp, #76	; 0x4c
   b8232:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b8234:	2400      	movs	r4, #0
    stop();
   b8236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8238:	4606      	mov	r6, r0
   b823a:	4617      	mov	r7, r2
    stop();
   b823c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b823e:	4628      	mov	r0, r5
   b8240:	466b      	mov	r3, sp
   b8242:	4622      	mov	r2, r4
   b8244:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b8246:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8248:	f7fd fd80 	bl	b5d4c <netdb_getaddrinfo>
   b824c:	4605      	mov	r5, r0
   b824e:	2800      	cmp	r0, #0
   b8250:	d163      	bne.n	b831a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b8252:	9b00      	ldr	r3, [sp, #0]
   b8254:	2b00      	cmp	r3, #0
   b8256:	d04b      	beq.n	b82f0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8258:	695b      	ldr	r3, [r3, #20]
   b825a:	2b00      	cmp	r3, #0
   b825c:	d048      	beq.n	b82f0 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b825e:	a806      	add	r0, sp, #24
   b8260:	f7ff fb0c 	bl	b787c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8264:	9b00      	ldr	r3, [sp, #0]
   b8266:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b8268:	7863      	ldrb	r3, [r4, #1]
   b826a:	2b02      	cmp	r3, #2
   b826c:	d104      	bne.n	b8278 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b826e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b8270:	a806      	add	r0, sp, #24
   b8272:	f7ff ffbb 	bl	b81ec <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b8276:	e026      	b.n	b82c6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b8278:	2b0a      	cmp	r3, #10
   b827a:	d124      	bne.n	b82c6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b827c:	2211      	movs	r2, #17
   b827e:	4629      	mov	r1, r5
   b8280:	a801      	add	r0, sp, #4
   b8282:	f001 f9a1 	bl	b95c8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8286:	68a3      	ldr	r3, [r4, #8]
   b8288:	2b00      	cmp	r3, #0
   b828a:	d038      	beq.n	b82fe <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b828c:	f104 0308 	add.w	r3, r4, #8
   b8290:	f10d 0c04 	add.w	ip, sp, #4
   b8294:	3418      	adds	r4, #24
   b8296:	6818      	ldr	r0, [r3, #0]
   b8298:	6859      	ldr	r1, [r3, #4]
   b829a:	4662      	mov	r2, ip
   b829c:	c203      	stmia	r2!, {r0, r1}
   b829e:	3308      	adds	r3, #8
   b82a0:	42a3      	cmp	r3, r4
   b82a2:	4694      	mov	ip, r2
   b82a4:	d1f7      	bne.n	b8296 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b82a6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b82a8:	a901      	add	r1, sp, #4
   b82aa:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b82ac:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b82b0:	f7ff faf2 	bl	b7898 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b82b4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b82b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b82bc:	ac07      	add	r4, sp, #28
   b82be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b82c0:	f8dc 3000 	ldr.w	r3, [ip]
   b82c4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b82c6:	a806      	add	r0, sp, #24
   b82c8:	f7ff faf8 	bl	b78bc <_ZNK9IPAddresscvbEv>
        if (addr) {
   b82cc:	b180      	cbz	r0, b82f0 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b82ce:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b82d0:	ad07      	add	r5, sp, #28
   b82d2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b82d6:	4b12      	ldr	r3, [pc, #72]	; (b8320 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b82d8:	930c      	str	r3, [sp, #48]	; 0x30
   b82da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b82dc:	ac0d      	add	r4, sp, #52	; 0x34
   b82de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b82e0:	682b      	ldr	r3, [r5, #0]
   b82e2:	7023      	strb	r3, [r4, #0]
   b82e4:	463a      	mov	r2, r7
   b82e6:	4643      	mov	r3, r8
   b82e8:	a90c      	add	r1, sp, #48	; 0x30
   b82ea:	4630      	mov	r0, r6
   b82ec:	47c8      	blx	r9
   b82ee:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b82f0:	9800      	ldr	r0, [sp, #0]
   b82f2:	f7fd fd23 	bl	b5d3c <netdb_freeaddrinfo>
}
   b82f6:	4628      	mov	r0, r5
   b82f8:	b013      	add	sp, #76	; 0x4c
   b82fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b82fe:	68e3      	ldr	r3, [r4, #12]
   b8300:	2b00      	cmp	r3, #0
   b8302:	d1c3      	bne.n	b828c <_ZN9TCPClient7connectEPKctm+0x64>
   b8304:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b8308:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b830c:	f7fd fd06 	bl	b5d1c <inet_htonl>
   b8310:	4581      	cmp	r9, r0
   b8312:	d1bb      	bne.n	b828c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b8314:	f104 0114 	add.w	r1, r4, #20
   b8318:	e7aa      	b.n	b8270 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b831a:	4625      	mov	r5, r4
   b831c:	e7e8      	b.n	b82f0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b831e:	bf00      	nop
   b8320:	000ba12c 	.word	0x000ba12c

000b8324 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b8324:	b538      	push	{r3, r4, r5, lr}
   b8326:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b8328:	681a      	ldr	r2, [r3, #0]
   b832a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b832c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b832e:	da10      	bge.n	b8352 <_ZN9TCPClient9connectedEv+0x2e>
   b8330:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8334:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8338:	429a      	cmp	r2, r3
   b833a:	d10a      	bne.n	b8352 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b833c:	6803      	ldr	r3, [r0, #0]
   b833e:	691b      	ldr	r3, [r3, #16]
   b8340:	4798      	blx	r3
        if (!rv) {
   b8342:	4604      	mov	r4, r0
   b8344:	b928      	cbnz	r0, b8352 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b8346:	682b      	ldr	r3, [r5, #0]
   b8348:	4628      	mov	r0, r5
   b834a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b834c:	4798      	blx	r3
        rv = available();
   b834e:	4620      	mov	r0, r4
}
   b8350:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b8352:	2001      	movs	r0, #1
   b8354:	e7fc      	b.n	b8350 <_ZN9TCPClient9connectedEv+0x2c>

000b8356 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b8356:	b510      	push	{r4, lr}
   b8358:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b835a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b835e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8362:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b8364:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8366:	d005      	beq.n	b8374 <_ZN9TCPClient4peekEv+0x1e>
   b8368:	6963      	ldr	r3, [r4, #20]
   b836a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b836e:	4413      	add	r3, r2
   b8370:	7918      	ldrb	r0, [r3, #4]
}
   b8372:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8374:	6803      	ldr	r3, [r0, #0]
   b8376:	691b      	ldr	r3, [r3, #16]
   b8378:	4798      	blx	r3
   b837a:	2800      	cmp	r0, #0
   b837c:	d1f4      	bne.n	b8368 <_ZN9TCPClient4peekEv+0x12>
   b837e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8382:	e7f6      	b.n	b8372 <_ZN9TCPClient4peekEv+0x1c>

000b8384 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8386:	6943      	ldr	r3, [r0, #20]
   b8388:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b838a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b838e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8392:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8394:	4605      	mov	r5, r0
   b8396:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b8398:	d016      	beq.n	b83c8 <_ZN9TCPClient4readEPhj+0x44>
   b839a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b839c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b83a0:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b83a4:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b83a6:	42bc      	cmp	r4, r7
   b83a8:	bf28      	it	cs
   b83aa:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b83ac:	3304      	adds	r3, #4
   b83ae:	4622      	mov	r2, r4
   b83b0:	4419      	add	r1, r3
   b83b2:	4630      	mov	r0, r6
   b83b4:	f001 f8e0 	bl	b9578 <memcpy>
   b83b8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b83ba:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b83be:	4423      	add	r3, r4
   b83c0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b83c4:	4620      	mov	r0, r4
   b83c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b83c8:	6803      	ldr	r3, [r0, #0]
   b83ca:	691b      	ldr	r3, [r3, #16]
   b83cc:	4798      	blx	r3
   b83ce:	2800      	cmp	r0, #0
   b83d0:	d1e3      	bne.n	b839a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b83d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b83d6:	e7f5      	b.n	b83c4 <_ZN9TCPClient4readEPhj+0x40>

000b83d8 <_ZN9TCPClient12flush_bufferEv>:
   b83d8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b83da:	2300      	movs	r3, #0
   b83dc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b83e0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b83e2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b83e6:	4770      	bx	lr

000b83e8 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b83e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b83ec:	461f      	mov	r7, r3
    stop();
   b83ee:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b83f0:	460c      	mov	r4, r1
    stop();
   b83f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b83f4:	b08a      	sub	sp, #40	; 0x28
   b83f6:	4605      	mov	r5, r0
   b83f8:	4616      	mov	r6, r2
    stop();
   b83fa:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b83fc:	7d23      	ldrb	r3, [r4, #20]
   b83fe:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b8402:	2b04      	cmp	r3, #4
   b8404:	bf0c      	ite	eq
   b8406:	2002      	moveq	r0, #2
   b8408:	200a      	movne	r0, #10
   b840a:	2206      	movs	r2, #6
   b840c:	2101      	movs	r1, #1
   b840e:	f7fd fccd 	bl	b5dac <sock_socket>
   b8412:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b8416:	696b      	ldr	r3, [r5, #20]
   b8418:	681b      	ldr	r3, [r3, #0]
   b841a:	2b00      	cmp	r3, #0
   b841c:	da08      	bge.n	b8430 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b841e:	682b      	ldr	r3, [r5, #0]
   b8420:	4628      	mov	r0, r5
   b8422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8424:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b8426:	4798      	blx	r3
}
   b8428:	4620      	mov	r0, r4
   b842a:	b00a      	add	sp, #40	; 0x28
   b842c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b8430:	4628      	mov	r0, r5
   b8432:	f7ff ffd1 	bl	b83d8 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b8436:	b1b7      	cbz	r7, b8466 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b8438:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b843a:	a903      	add	r1, sp, #12
   b843c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b843e:	9303      	str	r3, [sp, #12]
   b8440:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8444:	f7fd fc5a 	bl	b5cfc <if_index_to_name>
   b8448:	2800      	cmp	r0, #0
   b844a:	d1e8      	bne.n	b841e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b844c:	6968      	ldr	r0, [r5, #20]
   b844e:	2306      	movs	r3, #6
   b8450:	9300      	str	r3, [sp, #0]
   b8452:	6800      	ldr	r0, [r0, #0]
   b8454:	ab03      	add	r3, sp, #12
   b8456:	f241 020b 	movw	r2, #4107	; 0x100b
   b845a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b845e:	f7fd fc7d 	bl	b5d5c <sock_setsockopt>
   b8462:	2800      	cmp	r0, #0
   b8464:	d1db      	bne.n	b841e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b8466:	221c      	movs	r2, #28
   b8468:	2100      	movs	r1, #0
   b846a:	a803      	add	r0, sp, #12
   b846c:	f001 f8ac 	bl	b95c8 <memset>
    if (ip.version() == 4) {
   b8470:	7d23      	ldrb	r3, [r4, #20]
   b8472:	2b04      	cmp	r3, #4
   b8474:	d11d      	bne.n	b84b2 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b8476:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b847a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b847c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b8480:	f7fd fc54 	bl	b5d2c <inet_htons>
   b8484:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b8488:	6860      	ldr	r0, [r4, #4]
   b848a:	f7fd fc47 	bl	b5d1c <inet_htonl>
   b848e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b8490:	696b      	ldr	r3, [r5, #20]
   b8492:	221c      	movs	r2, #28
   b8494:	6818      	ldr	r0, [r3, #0]
   b8496:	a903      	add	r1, sp, #12
   b8498:	f7fd fc70 	bl	b5d7c <sock_connect>
   b849c:	2800      	cmp	r0, #0
   b849e:	d1be      	bne.n	b841e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b84a0:	3404      	adds	r4, #4
   b84a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b84a4:	696d      	ldr	r5, [r5, #20]
   b84a6:	358c      	adds	r5, #140	; 0x8c
   b84a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b84aa:	6823      	ldr	r3, [r4, #0]
   b84ac:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b84ae:	2401      	movs	r4, #1
   b84b0:	e7ba      	b.n	b8428 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b84b2:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b84b6:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b84b8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b84bc:	f7fd fc36 	bl	b5d2c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b84c0:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b84c2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b84c6:	1d23      	adds	r3, r4, #4
   b84c8:	f104 0714 	add.w	r7, r4, #20
   b84cc:	6818      	ldr	r0, [r3, #0]
   b84ce:	6859      	ldr	r1, [r3, #4]
   b84d0:	4632      	mov	r2, r6
   b84d2:	c203      	stmia	r2!, {r0, r1}
   b84d4:	3308      	adds	r3, #8
   b84d6:	42bb      	cmp	r3, r7
   b84d8:	4616      	mov	r6, r2
   b84da:	d1f7      	bne.n	b84cc <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b84dc:	e7d8      	b.n	b8490 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b84e0 <_ZN9TCPClient9availableEv>:
{
   b84e0:	b530      	push	{r4, r5, lr}
   b84e2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b84e4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b84e8:	b08b      	sub	sp, #44	; 0x2c
   b84ea:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b84ec:	b12b      	cbz	r3, b84fa <_ZN9TCPClient9availableEv+0x1a>
   b84ee:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b84f2:	429a      	cmp	r2, r3
   b84f4:	d101      	bne.n	b84fa <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b84f6:	f7ff ff6f 	bl	b83d8 <_ZN9TCPClient12flush_bufferEv>
   b84fa:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b84fc:	6808      	ldr	r0, [r1, #0]
   b84fe:	2800      	cmp	r0, #0
   b8500:	db18      	blt.n	b8534 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b8502:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b8506:	2d7f      	cmp	r5, #127	; 0x7f
   b8508:	d814      	bhi.n	b8534 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b850a:	3104      	adds	r1, #4
   b850c:	2308      	movs	r3, #8
   b850e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b8512:	4429      	add	r1, r5
   b8514:	f7fd fc3a 	bl	b5d8c <sock_recv>
            if (ret > 0) {
   b8518:	2800      	cmp	r0, #0
   b851a:	dd13      	ble.n	b8544 <_ZN9TCPClient9availableEv+0x64>
   b851c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b851e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8522:	b90a      	cbnz	r2, b8528 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b8524:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b8528:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b852a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b852e:	4410      	add	r0, r2
   b8530:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b8534:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b8536:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b853a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b853e:	1ac0      	subs	r0, r0, r3
   b8540:	b00b      	add	sp, #44	; 0x2c
   b8542:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b8544:	f7fd fe38 	bl	b61b8 <__errno>
   b8548:	6803      	ldr	r3, [r0, #0]
   b854a:	2b0b      	cmp	r3, #11
   b854c:	d0f2      	beq.n	b8534 <_ZN9TCPClient9availableEv+0x54>
   b854e:	f7fd fe33 	bl	b61b8 <__errno>
   b8552:	6803      	ldr	r3, [r0, #0]
   b8554:	2b0b      	cmp	r3, #11
   b8556:	d0ed      	beq.n	b8534 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b8558:	2320      	movs	r3, #32
   b855a:	2500      	movs	r5, #0
   b855c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b8560:	f7fd fe2a 	bl	b61b8 <__errno>
   b8564:	6803      	ldr	r3, [r0, #0]
   b8566:	9301      	str	r3, [sp, #4]
   b8568:	4b08      	ldr	r3, [pc, #32]	; (b858c <_ZN9TCPClient9availableEv+0xac>)
   b856a:	4909      	ldr	r1, [pc, #36]	; (b8590 <_ZN9TCPClient9availableEv+0xb0>)
   b856c:	9300      	str	r3, [sp, #0]
   b856e:	aa02      	add	r2, sp, #8
   b8570:	462b      	mov	r3, r5
   b8572:	2032      	movs	r0, #50	; 0x32
   b8574:	f7fd fcfa 	bl	b5f6c <log_message>
                    sock_close(d_->sock);
   b8578:	6963      	ldr	r3, [r4, #20]
   b857a:	6818      	ldr	r0, [r3, #0]
   b857c:	f7fd fbf6 	bl	b5d6c <sock_close>
   b8580:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b8582:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8586:	601a      	str	r2, [r3, #0]
   b8588:	e7d4      	b.n	b8534 <_ZN9TCPClient9availableEv+0x54>
   b858a:	bf00      	nop
   b858c:	000ba187 	.word	0x000ba187
   b8590:	000ba180 	.word	0x000ba180

000b8594 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b8594:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b8596:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b8598:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b859a:	6818      	ldr	r0, [r3, #0]
   b859c:	2800      	cmp	r0, #0
   b859e:	db01      	blt.n	b85a4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b85a0:	f7fd fbe4 	bl	b5d6c <sock_close>
   b85a4:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b85a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b85aa:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b85ac:	6960      	ldr	r0, [r4, #20]
   b85ae:	2211      	movs	r2, #17
   b85b0:	2100      	movs	r1, #0
   b85b2:	308c      	adds	r0, #140	; 0x8c
   b85b4:	f001 f808 	bl	b95c8 <memset>
    flush_buffer();
   b85b8:	4620      	mov	r0, r4
}
   b85ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b85be:	f7ff bf0b 	b.w	b83d8 <_ZN9TCPClient12flush_bufferEv>

000b85c2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b85c2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b85c4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b85c6:	4604      	mov	r4, r0
          total(0) {
   b85c8:	6001      	str	r1, [r0, #0]
   b85ca:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b85ce:	3088      	adds	r0, #136	; 0x88
   b85d0:	f7ff f954 	bl	b787c <_ZN9IPAddressC1Ev>
}
   b85d4:	4620      	mov	r0, r4
   b85d6:	bd10      	pop	{r4, pc}

000b85d8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b85d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b85da:	2300      	movs	r3, #0
   b85dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b85e0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b85e4:	4a0e      	ldr	r2, [pc, #56]	; (b8620 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b85e6:	6103      	str	r3, [r0, #16]
   b85e8:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b85ea:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b85ec:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b85ee:	20ac      	movs	r0, #172	; 0xac
   b85f0:	9101      	str	r1, [sp, #4]
   b85f2:	f7fb fd50 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b85f6:	1e05      	subs	r5, r0, #0
   b85f8:	f105 060c 	add.w	r6, r5, #12
   b85fc:	d008      	beq.n	b8610 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b85fe:	2301      	movs	r3, #1
   b8600:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8604:	4b07      	ldr	r3, [pc, #28]	; (b8624 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8606:	9901      	ldr	r1, [sp, #4]
   b8608:	602b      	str	r3, [r5, #0]
   b860a:	4630      	mov	r0, r6
   b860c:	f7ff ffd9 	bl	b85c2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b8610:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b8612:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b8616:	f7ff fedf 	bl	b83d8 <_ZN9TCPClient12flush_bufferEv>
}
   b861a:	b002      	add	sp, #8
   b861c:	bd70      	pop	{r4, r5, r6, pc}
   b861e:	bf00      	nop
   b8620:	000ba1bc 	.word	0x000ba1bc
   b8624:	000ba1a0 	.word	0x000ba1a0

000b8628 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b8628:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b862a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b862e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b8630:	f7ff ffd2 	bl	b85d8 <_ZN9TCPClientC1Ei>
}
   b8634:	4620      	mov	r0, r4
   b8636:	bd10      	pop	{r4, pc}

000b8638 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b8638:	b510      	push	{r4, lr}
   b863a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b863c:	6800      	ldr	r0, [r0, #0]
   b863e:	2800      	cmp	r0, #0
   b8640:	db01      	blt.n	b8646 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b8642:	f7fd fb93 	bl	b5d6c <sock_close>
    }
}
   b8646:	4620      	mov	r0, r4
   b8648:	bd10      	pop	{r4, pc}

000b864a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b864a:	300c      	adds	r0, #12
   b864c:	f7ff bff4 	b.w	b8638 <_ZN9TCPClient4DataD1Ev>

000b8650 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b8650:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8652:	2000      	movs	r0, #0
   b8654:	f7fd fd00 	bl	b6058 <spark_sync_time_pending>
   b8658:	b128      	cbz	r0, b8666 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b865a:	f7fd fced 	bl	b6038 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b865e:	f080 0001 	eor.w	r0, r0, #1
   b8662:	b2c0      	uxtb	r0, r0
    }
   b8664:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8666:	2001      	movs	r0, #1
   b8668:	e7fc      	b.n	b8664 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b866c <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b866c:	b530      	push	{r4, r5, lr}
   b866e:	b093      	sub	sp, #76	; 0x4c
   b8670:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b8674:	4b19      	ldr	r3, [pc, #100]	; (b86dc <_ZN9TimeClass7timeStrEx+0x70>)
{
   b8676:	4604      	mov	r4, r0
    t += time_zone_cache;
   b8678:	e9d3 1000 	ldrd	r1, r0, [r3]
   b867c:	9b01      	ldr	r3, [sp, #4]
   b867e:	1852      	adds	r2, r2, r1
   b8680:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b8684:	4816      	ldr	r0, [pc, #88]	; (b86e0 <_ZN9TimeClass7timeStrEx+0x74>)
   b8686:	e9d0 1000 	ldrd	r1, r0, [r0]
   b868a:	1852      	adds	r2, r2, r1
   b868c:	eb43 0300 	adc.w	r3, r3, r0
   b8690:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b8694:	2224      	movs	r2, #36	; 0x24
   b8696:	eb0d 0002 	add.w	r0, sp, r2
   b869a:	2100      	movs	r1, #0
   b869c:	f000 ff94 	bl	b95c8 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b86a0:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b86a2:	a909      	add	r1, sp, #36	; 0x24
   b86a4:	4668      	mov	r0, sp
   b86a6:	f7fd fd9f 	bl	b61e8 <localtime_r>
    char ascstr[26] = {};
   b86aa:	2216      	movs	r2, #22
   b86ac:	4629      	mov	r1, r5
   b86ae:	a803      	add	r0, sp, #12
   b86b0:	9502      	str	r5, [sp, #8]
   b86b2:	f000 ff89 	bl	b95c8 <memset>
    asctime_r(&calendar_time, ascstr);
   b86b6:	a902      	add	r1, sp, #8
   b86b8:	a809      	add	r0, sp, #36	; 0x24
   b86ba:	f000 ff01 	bl	b94c0 <asctime_r>
    int len = strlen(ascstr);
   b86be:	a802      	add	r0, sp, #8
   b86c0:	f000 ffca 	bl	b9658 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b86c4:	ab12      	add	r3, sp, #72	; 0x48
   b86c6:	4418      	add	r0, r3
    return String(ascstr);
   b86c8:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b86ca:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b86ce:	4620      	mov	r0, r4
   b86d0:	f7ff fb75 	bl	b7dbe <_ZN6StringC1EPK19__FlashStringHelper>
}
   b86d4:	4620      	mov	r0, r4
   b86d6:	b013      	add	sp, #76	; 0x4c
   b86d8:	bd30      	pop	{r4, r5, pc}
   b86da:	bf00      	nop
   b86dc:	2003e680 	.word	0x2003e680
   b86e0:	2003e678 	.word	0x2003e678

000b86e4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b86e4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b86e6:	2000      	movs	r0, #0
   b86e8:	f7fd fa80 	bl	b5bec <hal_rtc_time_is_valid>
    if (rtcstate)
   b86ec:	4604      	mov	r4, r0
   b86ee:	b9a0      	cbnz	r0, b871a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b86f0:	f7fd fc44 	bl	b5f7c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b86f4:	2801      	cmp	r0, #1
   b86f6:	d110      	bne.n	b871a <_ZN9TimeClass7isValidEv+0x36>
   b86f8:	4620      	mov	r0, r4
   b86fa:	f7fd fc67 	bl	b5fcc <system_thread_get_state>
   b86fe:	b960      	cbnz	r0, b871a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b8700:	f7ff ffa6 	bl	b8650 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b8704:	b910      	cbnz	r0, b870c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b8706:	f7fd fc87 	bl	b6018 <spark_process>
        while (_while() && !_condition()) {
   b870a:	e7f9      	b.n	b8700 <_ZN9TimeClass7isValidEv+0x1c>
   b870c:	f7ff ffa0 	bl	b8650 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b8710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b8714:	2000      	movs	r0, #0
   b8716:	f7fd ba69 	b.w	b5bec <hal_rtc_time_is_valid>
}
   b871a:	4620      	mov	r0, r4
   b871c:	bd10      	pop	{r4, pc}

000b871e <_ZN9TimeClass3nowEv>:
{
   b871e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b8720:	f7ff ffe0 	bl	b86e4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b8724:	2210      	movs	r2, #16
   b8726:	2100      	movs	r1, #0
   b8728:	4668      	mov	r0, sp
   b872a:	f000 ff4d 	bl	b95c8 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b872e:	2100      	movs	r1, #0
   b8730:	4668      	mov	r0, sp
   b8732:	f7fd fa63 	bl	b5bfc <hal_rtc_get_time>
}
   b8736:	9800      	ldr	r0, [sp, #0]
   b8738:	b005      	add	sp, #20
   b873a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8740 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8740:	4b02      	ldr	r3, [pc, #8]	; (b874c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b8742:	681a      	ldr	r2, [r3, #0]
   b8744:	4b02      	ldr	r3, [pc, #8]	; (b8750 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b8746:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8748:	4770      	bx	lr
   b874a:	bf00      	nop
   b874c:	2003d9ec 	.word	0x2003d9ec
   b8750:	2003e670 	.word	0x2003e670

000b8754 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   b8754:	4770      	bx	lr

000b8756 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8756:	7441      	strb	r1, [r0, #17]
}
   b8758:	4770      	bx	lr

000b875a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b875a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b875c:	7c00      	ldrb	r0, [r0, #16]
   b875e:	f7fd fbb5 	bl	b5ecc <hal_usart_available_data_for_write>
}
   b8762:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8766:	bd08      	pop	{r3, pc}

000b8768 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8768:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b876a:	7c00      	ldrb	r0, [r0, #16]
   b876c:	f7fd fb86 	bl	b5e7c <hal_usart_available>
}
   b8770:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8774:	bd08      	pop	{r3, pc}

000b8776 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8776:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8778:	7c00      	ldrb	r0, [r0, #16]
   b877a:	f7fd fb8f 	bl	b5e9c <hal_usart_peek>
}
   b877e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8782:	bd08      	pop	{r3, pc}

000b8784 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8784:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8786:	7c00      	ldrb	r0, [r0, #16]
   b8788:	f7fd fb80 	bl	b5e8c <hal_usart_read>
}
   b878c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8790:	bd08      	pop	{r3, pc}

000b8792 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8792:	7c00      	ldrb	r0, [r0, #16]
   b8794:	f7fd bb8a 	b.w	b5eac <hal_usart_flush>

000b8798 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8798:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b879a:	7c45      	ldrb	r5, [r0, #17]
{
   b879c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b879e:	b12d      	cbz	r5, b87ac <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b87a0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b87a2:	b003      	add	sp, #12
   b87a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b87a8:	f7fd bb60 	b.w	b5e6c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b87ac:	7c00      	ldrb	r0, [r0, #16]
   b87ae:	9101      	str	r1, [sp, #4]
   b87b0:	f7fd fb8c 	bl	b5ecc <hal_usart_available_data_for_write>
   b87b4:	2800      	cmp	r0, #0
   b87b6:	9901      	ldr	r1, [sp, #4]
   b87b8:	dcf2      	bgt.n	b87a0 <_ZN11USARTSerial5writeEh+0x8>
}
   b87ba:	4628      	mov	r0, r5
   b87bc:	b003      	add	sp, #12
   b87be:	bd30      	pop	{r4, r5, pc}

000b87c0 <_ZN11USARTSerialD0Ev>:
   b87c0:	b510      	push	{r4, lr}
   b87c2:	2114      	movs	r1, #20
   b87c4:	4604      	mov	r4, r0
   b87c6:	f000 fb1e 	bl	b8e06 <_ZdlPvj>
   b87ca:	4620      	mov	r0, r4
   b87cc:	bd10      	pop	{r4, pc}
	...

000b87d0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   b87d0:	b510      	push	{r4, lr}
   b87d2:	f04f 0c00 	mov.w	ip, #0
   b87d6:	4604      	mov	r4, r0
   b87d8:	4608      	mov	r0, r1
   b87da:	4611      	mov	r1, r2
   b87dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b87e0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   b87e4:	4a04      	ldr	r2, [pc, #16]	; (b87f8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   b87e6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   b87e8:	2201      	movs	r2, #1
  _serial = serial;
   b87ea:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b87ec:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   b87ee:	461a      	mov	r2, r3
   b87f0:	f7fd fb34 	bl	b5e5c <hal_usart_init>
}
   b87f4:	4620      	mov	r0, r4
   b87f6:	bd10      	pop	{r4, pc}
   b87f8:	000ba224 	.word	0x000ba224

000b87fc <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   b87fc:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   b87fe:	4c0e      	ldr	r4, [pc, #56]	; (b8838 <_Z22__fetch_global_Serial1v+0x3c>)
   b8800:	7821      	ldrb	r1, [r4, #0]
   b8802:	f3bf 8f5b 	dmb	ish
   b8806:	f011 0101 	ands.w	r1, r1, #1
   b880a:	d112      	bne.n	b8832 <_Z22__fetch_global_Serial1v+0x36>
   b880c:	4620      	mov	r0, r4
   b880e:	9101      	str	r1, [sp, #4]
   b8810:	f7fb fc47 	bl	b40a2 <__cxa_guard_acquire>
   b8814:	9901      	ldr	r1, [sp, #4]
   b8816:	b160      	cbz	r0, b8832 <_Z22__fetch_global_Serial1v+0x36>
   b8818:	4a08      	ldr	r2, [pc, #32]	; (b883c <_Z22__fetch_global_Serial1v+0x40>)
   b881a:	4b09      	ldr	r3, [pc, #36]	; (b8840 <_Z22__fetch_global_Serial1v+0x44>)
   b881c:	4809      	ldr	r0, [pc, #36]	; (b8844 <_Z22__fetch_global_Serial1v+0x48>)
   b881e:	f7ff ffd7 	bl	b87d0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   b8822:	4620      	mov	r0, r4
   b8824:	f7fb fc42 	bl	b40ac <__cxa_guard_release>
   b8828:	4a07      	ldr	r2, [pc, #28]	; (b8848 <_Z22__fetch_global_Serial1v+0x4c>)
   b882a:	4908      	ldr	r1, [pc, #32]	; (b884c <_Z22__fetch_global_Serial1v+0x50>)
   b882c:	4805      	ldr	r0, [pc, #20]	; (b8844 <_Z22__fetch_global_Serial1v+0x48>)
   b882e:	f000 fae5 	bl	b8dfc <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   b8832:	4804      	ldr	r0, [pc, #16]	; (b8844 <_Z22__fetch_global_Serial1v+0x48>)
   b8834:	b002      	add	sp, #8
   b8836:	bd10      	pop	{r4, pc}
   b8838:	2003e688 	.word	0x2003e688
   b883c:	2003e68c 	.word	0x2003e68c
   b8840:	2003e710 	.word	0x2003e710
   b8844:	2003e794 	.word	0x2003e794
   b8848:	2003da58 	.word	0x2003da58
   b884c:	000b8755 	.word	0x000b8755

000b8850 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8850:	7441      	strb	r1, [r0, #17]
}
   b8852:	4770      	bx	lr

000b8854 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8854:	4770      	bx	lr

000b8856 <_ZN9USBSerial4readEv>:
{
   b8856:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8858:	2100      	movs	r1, #0
   b885a:	7c00      	ldrb	r0, [r0, #16]
   b885c:	f7fd fb5e 	bl	b5f1c <HAL_USB_USART_Receive_Data>
}
   b8860:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8864:	bd08      	pop	{r3, pc}

000b8866 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   b8866:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8868:	2101      	movs	r1, #1
   b886a:	7c00      	ldrb	r0, [r0, #16]
   b886c:	f7fd fb56 	bl	b5f1c <HAL_USB_USART_Receive_Data>
}
   b8870:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8874:	bd08      	pop	{r3, pc}

000b8876 <_ZN9USBSerial17availableForWriteEv>:
{
   b8876:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8878:	7c00      	ldrb	r0, [r0, #16]
   b887a:	f7fd fb47 	bl	b5f0c <HAL_USB_USART_Available_Data_For_Write>
}
   b887e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8882:	bd08      	pop	{r3, pc}

000b8884 <_ZN9USBSerial9availableEv>:
{
   b8884:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8886:	7c00      	ldrb	r0, [r0, #16]
   b8888:	f7fd fb38 	bl	b5efc <HAL_USB_USART_Available_Data>
}
   b888c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8890:	bd08      	pop	{r3, pc}

000b8892 <_ZN9USBSerial5writeEh>:
{
   b8892:	b513      	push	{r0, r1, r4, lr}
   b8894:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8896:	7c00      	ldrb	r0, [r0, #16]
{
   b8898:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b889a:	f7fd fb37 	bl	b5f0c <HAL_USB_USART_Available_Data_For_Write>
   b889e:	2800      	cmp	r0, #0
   b88a0:	9901      	ldr	r1, [sp, #4]
   b88a2:	dc01      	bgt.n	b88a8 <_ZN9USBSerial5writeEh+0x16>
   b88a4:	7c60      	ldrb	r0, [r4, #17]
   b88a6:	b120      	cbz	r0, b88b2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b88a8:	7c20      	ldrb	r0, [r4, #16]
   b88aa:	f7fd fb3f 	bl	b5f2c <HAL_USB_USART_Send_Data>
   b88ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b88b2:	b002      	add	sp, #8
   b88b4:	bd10      	pop	{r4, pc}

000b88b6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b88b6:	7c00      	ldrb	r0, [r0, #16]
   b88b8:	f7fd bb40 	b.w	b5f3c <HAL_USB_USART_Flush_Data>

000b88bc <_ZN9USBSerialD0Ev>:
   b88bc:	b510      	push	{r4, lr}
   b88be:	2114      	movs	r1, #20
   b88c0:	4604      	mov	r4, r0
   b88c2:	f000 faa0 	bl	b8e06 <_ZdlPvj>
   b88c6:	4620      	mov	r0, r4
   b88c8:	bd10      	pop	{r4, pc}
	...

000b88cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b88cc:	b510      	push	{r4, lr}
   b88ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b88d2:	4604      	mov	r4, r0
   b88d4:	4608      	mov	r0, r1
   b88d6:	2100      	movs	r1, #0
   b88d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b88dc:	4b04      	ldr	r3, [pc, #16]	; (b88f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b88de:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b88e0:	2301      	movs	r3, #1
  _serial = serial;
   b88e2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b88e4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b88e6:	4611      	mov	r1, r2
   b88e8:	f7fd faf8 	bl	b5edc <HAL_USB_USART_Init>
}
   b88ec:	4620      	mov	r0, r4
   b88ee:	bd10      	pop	{r4, pc}
   b88f0:	000ba254 	.word	0x000ba254

000b88f4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b88f4:	7c00      	ldrb	r0, [r0, #16]
   b88f6:	2200      	movs	r2, #0
   b88f8:	f7fd baf8 	b.w	b5eec <HAL_USB_USART_Begin>

000b88fc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   b88fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   b88fe:	2214      	movs	r2, #20
{
   b8900:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   b8902:	2100      	movs	r1, #0
   b8904:	f000 fe60 	bl	b95c8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   b8908:	4620      	mov	r0, r4
   b890a:	bd10      	pop	{r4, pc}

000b890c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   b890c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b890e:	4c10      	ldr	r4, [pc, #64]	; (b8950 <_Z16_fetch_usbserialv+0x44>)
{
   b8910:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8912:	a803      	add	r0, sp, #12
   b8914:	f7ff fff2 	bl	b88fc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8918:	7821      	ldrb	r1, [r4, #0]
   b891a:	f3bf 8f5b 	dmb	ish
   b891e:	f011 0101 	ands.w	r1, r1, #1
   b8922:	d111      	bne.n	b8948 <_Z16_fetch_usbserialv+0x3c>
   b8924:	4620      	mov	r0, r4
   b8926:	9101      	str	r1, [sp, #4]
   b8928:	f7fb fbbb 	bl	b40a2 <__cxa_guard_acquire>
   b892c:	9901      	ldr	r1, [sp, #4]
   b892e:	b158      	cbz	r0, b8948 <_Z16_fetch_usbserialv+0x3c>
   b8930:	aa03      	add	r2, sp, #12
   b8932:	4808      	ldr	r0, [pc, #32]	; (b8954 <_Z16_fetch_usbserialv+0x48>)
   b8934:	f7ff ffca 	bl	b88cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8938:	4620      	mov	r0, r4
   b893a:	f7fb fbb7 	bl	b40ac <__cxa_guard_release>
   b893e:	4a06      	ldr	r2, [pc, #24]	; (b8958 <_Z16_fetch_usbserialv+0x4c>)
   b8940:	4906      	ldr	r1, [pc, #24]	; (b895c <_Z16_fetch_usbserialv+0x50>)
   b8942:	4804      	ldr	r0, [pc, #16]	; (b8954 <_Z16_fetch_usbserialv+0x48>)
   b8944:	f000 fa5a 	bl	b8dfc <__aeabi_atexit>
	return _usbserial;
}
   b8948:	4802      	ldr	r0, [pc, #8]	; (b8954 <_Z16_fetch_usbserialv+0x48>)
   b894a:	b008      	add	sp, #32
   b894c:	bd10      	pop	{r4, pc}
   b894e:	bf00      	nop
   b8950:	2003e7a8 	.word	0x2003e7a8
   b8954:	2003e7ac 	.word	0x2003e7ac
   b8958:	2003da58 	.word	0x2003da58
   b895c:	000b8855 	.word	0x000b8855

000b8960 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv>:
                results[index++] = *result;
            }
        }

    protected:
        static void callback(WiFiAccessPoint* result, void* cookie)
   b8960:	b530      	push	{r4, r5, lr}
            if (index<count) {
   b8962:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   b8966:	4293      	cmp	r3, r2
   b8968:	da10      	bge.n	b898c <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv+0x2c>
                results[index++] = *result;
   b896a:	680d      	ldr	r5, [r1, #0]
   b896c:	1c5a      	adds	r2, r3, #1
   b896e:	604a      	str	r2, [r1, #4]
   b8970:	4604      	mov	r4, r0
   b8972:	2238      	movs	r2, #56	; 0x38
   b8974:	fb02 5503 	mla	r5, r2, r3, r5
   b8978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b897a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b897c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b897e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8984:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8988:	e885 0003 	stmia.w	r5, {r0, r1}
        {
            ((APArrayPopulator*)cookie)->addResult(result);
        }
   b898c:	bd30      	pop	{r4, r5, pc}

000b898e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b898e:	2200      	movs	r2, #0
   b8990:	6840      	ldr	r0, [r0, #4]
   b8992:	4611      	mov	r1, r2
   b8994:	f7fd bba8 	b.w	b60e8 <network_listening>

000b8998 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8998:	2200      	movs	r2, #0
   b899a:	6840      	ldr	r0, [r0, #4]
   b899c:	4611      	mov	r1, r2
   b899e:	f7fd bbc3 	b.w	b6128 <network_get_listen_timeout>

000b89a2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b89a2:	6840      	ldr	r0, [r0, #4]
   b89a4:	2200      	movs	r2, #0
   b89a6:	f7fd bbb7 	b.w	b6118 <network_set_listen_timeout>

000b89aa <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b89aa:	6840      	ldr	r0, [r0, #4]
   b89ac:	2200      	movs	r2, #0
   b89ae:	f081 0101 	eor.w	r1, r1, #1
   b89b2:	f7fd bb91 	b.w	b60d8 <network_listen>

000b89b6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b89b6:	2200      	movs	r2, #0
   b89b8:	6840      	ldr	r0, [r0, #4]
   b89ba:	4611      	mov	r1, r2
   b89bc:	f7fd bb64 	b.w	b6088 <network_connecting>

000b89c0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b89c0:	6840      	ldr	r0, [r0, #4]
   b89c2:	2200      	movs	r2, #0
   b89c4:	2102      	movs	r1, #2
   b89c6:	f7fd bb67 	b.w	b6098 <network_disconnect>
	...

000b89cc <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>:
        APScan apScan(results, result_count);
        return apScan.start();
    }

#if !HAL_PLATFORM_WIFI_SCAN_ONLY
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
   b89cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
            this->index = 0;
   b89ce:	2300      	movs	r3, #0
            this->results = results;
   b89d0:	9101      	str	r1, [sp, #4]
            return std::min(count, wlan_get_credentials(callback, this));
   b89d2:	4806      	ldr	r0, [pc, #24]	; (b89ec <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj+0x20>)
            this->index = 0;
   b89d4:	9302      	str	r3, [sp, #8]
            return std::min(count, wlan_get_credentials(callback, this));
   b89d6:	a901      	add	r1, sp, #4
            this->count = size;
   b89d8:	9203      	str	r2, [sp, #12]
            return std::min(count, wlan_get_credentials(callback, this));
   b89da:	f7fd fab7 	bl	b5f4c <wlan_get_credentials>
        APList apList(results, result_count);
        return apList.start();
    }
   b89de:	9b03      	ldr	r3, [sp, #12]
   b89e0:	4298      	cmp	r0, r3
   b89e2:	bfa8      	it	ge
   b89e4:	4618      	movge	r0, r3
   b89e6:	b005      	add	sp, #20
   b89e8:	f85d fb04 	ldr.w	pc, [sp], #4
   b89ec:	000b8961 	.word	0x000b8961

000b89f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b89f0:	4b02      	ldr	r3, [pc, #8]	; (b89fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b89f2:	2204      	movs	r2, #4
   b89f4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b89f6:	4a02      	ldr	r2, [pc, #8]	; (b8a00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b89f8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b89fa:	4770      	bx	lr
   b89fc:	2003e7c0 	.word	0x2003e7c0
   b8a00:	000ba284 	.word	0x000ba284

000b8a04 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b8a04:	b510      	push	{r4, lr}
   b8a06:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b8a08:	f000 fe26 	bl	b9658 <strlen>
   b8a0c:	3801      	subs	r0, #1
   b8a0e:	1823      	adds	r3, r4, r0
   b8a10:	4620      	mov	r0, r4
	while(i<j){
   b8a12:	4283      	cmp	r3, r0
   b8a14:	d906      	bls.n	b8a24 <_Z11str_reversePc+0x20>
		c = *i;
   b8a16:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b8a18:	7819      	ldrb	r1, [r3, #0]
   b8a1a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b8a1e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b8a22:	e7f6      	b.n	b8a12 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b8a24:	bd10      	pop	{r4, pc}

000b8a26 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b8a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b8a2a:	1e93      	subs	r3, r2, #2
{
   b8a2c:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b8a2e:	2b22      	cmp	r3, #34	; 0x22
   b8a30:	f04f 0300 	mov.w	r3, #0
{
   b8a34:	460d      	mov	r5, r1
   b8a36:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b8a38:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b8a3c:	d927      	bls.n	b8a8e <ltoa+0x68>

      if (10 == base && N < 0L)
   b8a3e:	2800      	cmp	r0, #0
   b8a40:	da2a      	bge.n	b8a98 <ltoa+0x72>
      {
            *head++ = '-';
   b8a42:	462e      	mov	r6, r5
   b8a44:	232d      	movs	r3, #45	; 0x2d
   b8a46:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b8a4a:	4240      	negs	r0, r0
   b8a4c:	240a      	movs	r4, #10
      *tail-- = '\0';
   b8a4e:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b8a52:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b8a56:	4622      	mov	r2, r4
   b8a58:	4601      	mov	r1, r0
   b8a5a:	a801      	add	r0, sp, #4
   b8a5c:	f000 fd68 	bl	b9530 <ldiv>
   b8a60:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b8a62:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b8a64:	2b09      	cmp	r3, #9
   b8a66:	bfcc      	ite	gt
   b8a68:	2237      	movgt	r2, #55	; 0x37
   b8a6a:	2230      	movle	r2, #48	; 0x30
   b8a6c:	fa52 f383 	uxtab	r3, r2, r3
   b8a70:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b8a74:	f108 0801 	add.w	r8, r8, #1
   b8a78:	2800      	cmp	r0, #0
   b8a7a:	d1ec      	bne.n	b8a56 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b8a7c:	4642      	mov	r2, r8
   b8a7e:	1c79      	adds	r1, r7, #1
   b8a80:	4630      	mov	r0, r6
   b8a82:	f000 fd79 	bl	b9578 <memcpy>
      return str;
}
   b8a86:	4628      	mov	r0, r5
   b8a88:	b00c      	add	sp, #48	; 0x30
   b8a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b8a8e:	2a0a      	cmp	r2, #10
   b8a90:	d0d5      	beq.n	b8a3e <ltoa+0x18>
      if (uarg)
   b8a92:	b118      	cbz	r0, b8a9c <ltoa+0x76>
   b8a94:	462e      	mov	r6, r5
   b8a96:	e7da      	b.n	b8a4e <ltoa+0x28>
   b8a98:	240a      	movs	r4, #10
   b8a9a:	e7fa      	b.n	b8a92 <ltoa+0x6c>
      else  *tail-- = '0';
   b8a9c:	2330      	movs	r3, #48	; 0x30
   b8a9e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b8aa2:	462e      	mov	r6, r5
   b8aa4:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b8aa8:	f04f 0802 	mov.w	r8, #2
   b8aac:	e7e6      	b.n	b8a7c <ltoa+0x56>

000b8aae <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b8aae:	b570      	push	{r4, r5, r6, lr}
   b8ab0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b8ab2:	1e91      	subs	r1, r2, #2
   b8ab4:	2922      	cmp	r1, #34	; 0x22
   b8ab6:	d81d      	bhi.n	b8af4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b8ab8:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b8aba:	b930      	cbnz	r0, b8aca <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b8abc:	4423      	add	r3, r4
            *ptr++ = '0';
   b8abe:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b8ac0:	429d      	cmp	r5, r3
   b8ac2:	d210      	bcs.n	b8ae6 <ultoa+0x38>
            *ptr++ = '0';
   b8ac4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b8ac8:	e7fa      	b.n	b8ac0 <ultoa+0x12>
            result.quot = a/radix;
   b8aca:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b8ace:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b8ad2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b8ad4:	2809      	cmp	r0, #9
                *ptr += '0';
   b8ad6:	bf94      	ite	ls
   b8ad8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b8ada:	3157      	addhi	r1, #87	; 0x57
   b8adc:	b2c9      	uxtb	r1, r1
   b8ade:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b8ae2:	4630      	mov	r0, r6
	while(a){
   b8ae4:	e7e9      	b.n	b8aba <ultoa+0xc>

	*ptr = '\0';
   b8ae6:	2300      	movs	r3, #0
	str_reverse(buffer);
   b8ae8:	4620      	mov	r0, r4
	*ptr = '\0';
   b8aea:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b8aec:	f7ff ff8a 	bl	b8a04 <_Z11str_reversePc>
	return buffer;
   b8af0:	4620      	mov	r0, r4
}
   b8af2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b8af4:	2000      	movs	r0, #0
   b8af6:	e7fc      	b.n	b8af2 <ultoa+0x44>

000b8af8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8af8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b8afa:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8afc:	460c      	mov	r4, r1
   b8afe:	4615      	mov	r5, r2
	if(a<0){
   b8b00:	da0e      	bge.n	b8b20 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8b02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b8b06:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8b0a:	bf14      	ite	ne
   b8b0c:	4258      	negne	r0, r3
   b8b0e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b8b10:	2301      	movs	r3, #1
		*buffer = '-';
   b8b12:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b8b14:	462a      	mov	r2, r5
   b8b16:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b8b18:	f7ff ffc9 	bl	b8aae <ultoa>
	}
	return buffer;
}
   b8b1c:	4620      	mov	r0, r4
   b8b1e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b8b20:	2301      	movs	r3, #1
   b8b22:	e7f9      	b.n	b8b18 <itoa+0x20>

000b8b24 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8b24:	4b01      	ldr	r3, [pc, #4]	; (b8b2c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8b26:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8b28:	4770      	bx	lr
   b8b2a:	bf00      	nop
   b8b2c:	2003d9f0 	.word	0x2003d9f0

000b8b30 <serialEventRun>:
{
   b8b30:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8b32:	4b0b      	ldr	r3, [pc, #44]	; (b8b60 <serialEventRun+0x30>)
   b8b34:	b143      	cbz	r3, b8b48 <serialEventRun+0x18>
   b8b36:	f7ff fee9 	bl	b890c <_Z16_fetch_usbserialv>
   b8b3a:	6803      	ldr	r3, [r0, #0]
   b8b3c:	691b      	ldr	r3, [r3, #16]
   b8b3e:	4798      	blx	r3
   b8b40:	2800      	cmp	r0, #0
   b8b42:	dd01      	ble.n	b8b48 <serialEventRun+0x18>
        serialEvent();
   b8b44:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8b48:	4b06      	ldr	r3, [pc, #24]	; (b8b64 <serialEventRun+0x34>)
   b8b4a:	b143      	cbz	r3, b8b5e <serialEventRun+0x2e>
   b8b4c:	f7ff fe56 	bl	b87fc <_Z22__fetch_global_Serial1v>
   b8b50:	6803      	ldr	r3, [r0, #0]
   b8b52:	691b      	ldr	r3, [r3, #16]
   b8b54:	4798      	blx	r3
   b8b56:	2800      	cmp	r0, #0
   b8b58:	dd01      	ble.n	b8b5e <serialEventRun+0x2e>
        serialEvent1();
   b8b5a:	f3af 8000 	nop.w
}
   b8b5e:	bd08      	pop	{r3, pc}
	...

000b8b68 <_post_loop>:
{
   b8b68:	b508      	push	{r3, lr}
	serialEventRun();
   b8b6a:	f7ff ffe1 	bl	b8b30 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8b6e:	f7fd f81d 	bl	b5bac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8b72:	4b01      	ldr	r3, [pc, #4]	; (b8b78 <_post_loop+0x10>)
   b8b74:	6018      	str	r0, [r3, #0]
}
   b8b76:	bd08      	pop	{r3, pc}
   b8b78:	2003e7d0 	.word	0x2003e7d0

000b8b7c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8b7c:	4805      	ldr	r0, [pc, #20]	; (b8b94 <_Z33system_initialize_user_backup_ramv+0x18>)
   b8b7e:	4a06      	ldr	r2, [pc, #24]	; (b8b98 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8b80:	4906      	ldr	r1, [pc, #24]	; (b8b9c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8b82:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8b84:	1a12      	subs	r2, r2, r0
   b8b86:	f000 fcf7 	bl	b9578 <memcpy>
    __backup_sram_signature = signature;
   b8b8a:	4b05      	ldr	r3, [pc, #20]	; (b8ba0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8b8c:	4a05      	ldr	r2, [pc, #20]	; (b8ba4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b8b8e:	601a      	str	r2, [r3, #0]
}
   b8b90:	bd08      	pop	{r3, pc}
   b8b92:	bf00      	nop
   b8b94:	2003f400 	.word	0x2003f400
   b8b98:	2003f404 	.word	0x2003f404
   b8b9c:	000ba5a0 	.word	0x000ba5a0
   b8ba0:	2003f400 	.word	0x2003f400
   b8ba4:	9a271c1e 	.word	0x9a271c1e

000b8ba8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8ba8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8baa:	2300      	movs	r3, #0
   b8bac:	9300      	str	r3, [sp, #0]
   b8bae:	461a      	mov	r2, r3
   b8bb0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8bb4:	f7fd fa1c 	bl	b5ff0 <system_ctrl_set_result>
}
   b8bb8:	b003      	add	sp, #12
   b8bba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8bc0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8bc0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b8bc2:	8843      	ldrh	r3, [r0, #2]
   b8bc4:	2b0a      	cmp	r3, #10
   b8bc6:	d008      	beq.n	b8bda <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8bc8:	2b50      	cmp	r3, #80	; 0x50
   b8bca:	d10b      	bne.n	b8be4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8bcc:	4b09      	ldr	r3, [pc, #36]	; (b8bf4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8bce:	681b      	ldr	r3, [r3, #0]
   b8bd0:	b14b      	cbz	r3, b8be6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8bd2:	b003      	add	sp, #12
   b8bd4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8bd8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8bda:	f7ff ffe5 	bl	b8ba8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8bde:	b003      	add	sp, #12
   b8be0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8be4:	2300      	movs	r3, #0
   b8be6:	9300      	str	r3, [sp, #0]
   b8be8:	461a      	mov	r2, r3
   b8bea:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8bee:	f7fd f9ff 	bl	b5ff0 <system_ctrl_set_result>
}
   b8bf2:	e7f4      	b.n	b8bde <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8bf4:	2003e7cc 	.word	0x2003e7cc

000b8bf8 <module_user_init_hook>:
{
   b8bf8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b8bfa:	4812      	ldr	r0, [pc, #72]	; (b8c44 <module_user_init_hook+0x4c>)
   b8bfc:	2100      	movs	r1, #0
   b8bfe:	f7fd faeb 	bl	b61d8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8c02:	4b11      	ldr	r3, [pc, #68]	; (b8c48 <module_user_init_hook+0x50>)
   b8c04:	681a      	ldr	r2, [r3, #0]
   b8c06:	4b11      	ldr	r3, [pc, #68]	; (b8c4c <module_user_init_hook+0x54>)
   b8c08:	429a      	cmp	r2, r3
   b8c0a:	4b11      	ldr	r3, [pc, #68]	; (b8c50 <module_user_init_hook+0x58>)
   b8c0c:	bf0c      	ite	eq
   b8c0e:	2201      	moveq	r2, #1
   b8c10:	2200      	movne	r2, #0
   b8c12:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8c14:	d001      	beq.n	b8c1a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8c16:	f7ff ffb1 	bl	b8b7c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8c1a:	f7fc ffb7 	bl	b5b8c <HAL_RNG_GetRandomNumber>
   b8c1e:	4604      	mov	r4, r0
    srand(seed);
   b8c20:	f000 fcda 	bl	b95d8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8c24:	4b0b      	ldr	r3, [pc, #44]	; (b8c54 <module_user_init_hook+0x5c>)
   b8c26:	b113      	cbz	r3, b8c2e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8c28:	4620      	mov	r0, r4
   b8c2a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8c2e:	2100      	movs	r1, #0
   b8c30:	4808      	ldr	r0, [pc, #32]	; (b8c54 <module_user_init_hook+0x5c>)
   b8c32:	f7fd fa19 	bl	b6068 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8c3a:	4807      	ldr	r0, [pc, #28]	; (b8c58 <module_user_init_hook+0x60>)
   b8c3c:	2100      	movs	r1, #0
   b8c3e:	f7fd b9cd 	b.w	b5fdc <system_ctrl_set_app_request_handler>
   b8c42:	bf00      	nop
   b8c44:	000b8b25 	.word	0x000b8b25
   b8c48:	2003f400 	.word	0x2003f400
   b8c4c:	9a271c1e 	.word	0x9a271c1e
   b8c50:	2003e7c8 	.word	0x2003e7c8
   b8c54:	00000000 	.word	0x00000000
   b8c58:	000b8bc1 	.word	0x000b8bc1

000b8c5c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8c5c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8c5e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8c60:	d902      	bls.n	b8c68 <pinAvailable+0xc>
    return false;
   b8c62:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8c64:	b002      	add	sp, #8
   b8c66:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8c68:	f1a0 030b 	sub.w	r3, r0, #11
   b8c6c:	2b02      	cmp	r3, #2
   b8c6e:	d81a      	bhi.n	b8ca6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8c70:	4c17      	ldr	r4, [pc, #92]	; (b8cd0 <pinAvailable+0x74>)
   b8c72:	7821      	ldrb	r1, [r4, #0]
   b8c74:	f3bf 8f5b 	dmb	ish
   b8c78:	f011 0101 	ands.w	r1, r1, #1
   b8c7c:	d10b      	bne.n	b8c96 <pinAvailable+0x3a>
   b8c7e:	4620      	mov	r0, r4
   b8c80:	9101      	str	r1, [sp, #4]
   b8c82:	f7fb fa0e 	bl	b40a2 <__cxa_guard_acquire>
   b8c86:	9901      	ldr	r1, [sp, #4]
   b8c88:	b128      	cbz	r0, b8c96 <pinAvailable+0x3a>
   b8c8a:	4812      	ldr	r0, [pc, #72]	; (b8cd4 <pinAvailable+0x78>)
   b8c8c:	f7fe ffb8 	bl	b7c00 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8c90:	4620      	mov	r0, r4
   b8c92:	f7fb fa0b 	bl	b40ac <__cxa_guard_release>
   b8c96:	4b0f      	ldr	r3, [pc, #60]	; (b8cd4 <pinAvailable+0x78>)
   b8c98:	7818      	ldrb	r0, [r3, #0]
   b8c9a:	f7fd f8bf 	bl	b5e1c <hal_spi_is_enabled>
   b8c9e:	2800      	cmp	r0, #0
   b8ca0:	d1df      	bne.n	b8c62 <pinAvailable+0x6>
  return true; // 'pin' is available
   b8ca2:	2001      	movs	r0, #1
   b8ca4:	e7de      	b.n	b8c64 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b8ca6:	2801      	cmp	r0, #1
   b8ca8:	d809      	bhi.n	b8cbe <pinAvailable+0x62>
   b8caa:	f000 f87f 	bl	b8dac <_Z19__fetch_global_Wirev>
   b8cae:	2100      	movs	r1, #0
   b8cb0:	7c00      	ldrb	r0, [r0, #16]
   b8cb2:	f7fd f80b 	bl	b5ccc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b8cb6:	f080 0001 	eor.w	r0, r0, #1
   b8cba:	b2c0      	uxtb	r0, r0
   b8cbc:	e7d2      	b.n	b8c64 <pinAvailable+0x8>
   b8cbe:	3809      	subs	r0, #9
   b8cc0:	2801      	cmp	r0, #1
   b8cc2:	d8ee      	bhi.n	b8ca2 <pinAvailable+0x46>
   b8cc4:	f7ff fd9a 	bl	b87fc <_Z22__fetch_global_Serial1v>
   b8cc8:	7c00      	ldrb	r0, [r0, #16]
   b8cca:	f7fd f8f7 	bl	b5ebc <hal_usart_is_enabled>
   b8cce:	e7f2      	b.n	b8cb6 <pinAvailable+0x5a>
   b8cd0:	2003e620 	.word	0x2003e620
   b8cd4:	2003e624 	.word	0x2003e624

000b8cd8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8cd8:	2823      	cmp	r0, #35	; 0x23
{
   b8cda:	b538      	push	{r3, r4, r5, lr}
   b8cdc:	4604      	mov	r4, r0
   b8cde:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8ce0:	d80a      	bhi.n	b8cf8 <pinMode+0x20>
   b8ce2:	29ff      	cmp	r1, #255	; 0xff
   b8ce4:	d008      	beq.n	b8cf8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b8ce6:	f7ff ffb9 	bl	b8c5c <pinAvailable>
   b8cea:	b128      	cbz	r0, b8cf8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b8cec:	4629      	mov	r1, r5
   b8cee:	4620      	mov	r0, r4
}
   b8cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b8cf4:	f7fc bf8a 	b.w	b5c0c <HAL_Pin_Mode>
}
   b8cf8:	bd38      	pop	{r3, r4, r5, pc}

000b8cfa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b8cfa:	b538      	push	{r3, r4, r5, lr}
   b8cfc:	4604      	mov	r4, r0
   b8cfe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8d00:	f7fc ff8c 	bl	b5c1c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8d04:	28ff      	cmp	r0, #255	; 0xff
   b8d06:	d010      	beq.n	b8d2a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b8d08:	2806      	cmp	r0, #6
   b8d0a:	d804      	bhi.n	b8d16 <digitalWrite+0x1c>
   b8d0c:	234d      	movs	r3, #77	; 0x4d
   b8d0e:	fa23 f000 	lsr.w	r0, r3, r0
   b8d12:	07c3      	lsls	r3, r0, #31
   b8d14:	d409      	bmi.n	b8d2a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8d16:	4620      	mov	r0, r4
   b8d18:	f7ff ffa0 	bl	b8c5c <pinAvailable>
   b8d1c:	b128      	cbz	r0, b8d2a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b8d1e:	4629      	mov	r1, r5
   b8d20:	4620      	mov	r0, r4
}
   b8d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b8d26:	f7fc bf81 	b.w	b5c2c <HAL_GPIO_Write>
}
   b8d2a:	bd38      	pop	{r3, r4, r5, pc}

000b8d2c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b8d2c:	b510      	push	{r4, lr}
   b8d2e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8d30:	f7fc ff74 	bl	b5c1c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8d34:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b8d36:	b2db      	uxtb	r3, r3
   b8d38:	2b01      	cmp	r3, #1
   b8d3a:	d908      	bls.n	b8d4e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b8d3c:	4620      	mov	r0, r4
   b8d3e:	f7ff ff8d 	bl	b8c5c <pinAvailable>
   b8d42:	b120      	cbz	r0, b8d4e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b8d44:	4620      	mov	r0, r4
}
   b8d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b8d4a:	f7fc bf77 	b.w	b5c3c <HAL_GPIO_Read>
}
   b8d4e:	2000      	movs	r0, #0
   b8d50:	bd10      	pop	{r4, pc}
	...

000b8d54 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   b8d54:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   b8d56:	4c08      	ldr	r4, [pc, #32]	; (b8d78 <_Z21__fetch_global_EEPROMv+0x24>)
   b8d58:	7823      	ldrb	r3, [r4, #0]
   b8d5a:	f3bf 8f5b 	dmb	ish
   b8d5e:	07db      	lsls	r3, r3, #31
   b8d60:	d408      	bmi.n	b8d74 <_Z21__fetch_global_EEPROMv+0x20>
   b8d62:	4620      	mov	r0, r4
   b8d64:	f7fb f99d 	bl	b40a2 <__cxa_guard_acquire>
   b8d68:	b120      	cbz	r0, b8d74 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   b8d6a:	f7fc ff27 	bl	b5bbc <HAL_EEPROM_Init>
   b8d6e:	4620      	mov	r0, r4
   b8d70:	f7fb f99c 	bl	b40ac <__cxa_guard_release>
	return eeprom;
}
   b8d74:	4801      	ldr	r0, [pc, #4]	; (b8d7c <_Z21__fetch_global_EEPROMv+0x28>)
   b8d76:	bd10      	pop	{r4, pc}
   b8d78:	2003e7d4 	.word	0x2003e7d4
   b8d7c:	2003e7d8 	.word	0x2003e7d8

000b8d80 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   b8d80:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8d82:	2520      	movs	r5, #32
   b8d84:	2314      	movs	r3, #20
{
   b8d86:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8d88:	6003      	str	r3, [r0, #0]
   b8d8a:	6085      	str	r5, [r0, #8]
   b8d8c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8d8e:	4906      	ldr	r1, [pc, #24]	; (b8da8 <_Z17acquireWireBufferv+0x28>)
   b8d90:	4628      	mov	r0, r5
   b8d92:	f000 f83a 	bl	b8e0a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8d96:	4904      	ldr	r1, [pc, #16]	; (b8da8 <_Z17acquireWireBufferv+0x28>)
	};
   b8d98:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8d9a:	4628      	mov	r0, r5
   b8d9c:	f000 f835 	bl	b8e0a <_ZnajRKSt9nothrow_t>
	};
   b8da0:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   b8da2:	4620      	mov	r0, r4
   b8da4:	bd38      	pop	{r3, r4, r5, pc}
   b8da6:	bf00      	nop
   b8da8:	000ba2b8 	.word	0x000ba2b8

000b8dac <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   b8dac:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8dae:	4d0f      	ldr	r5, [pc, #60]	; (b8dec <_Z19__fetch_global_Wirev+0x40>)
   b8db0:	7829      	ldrb	r1, [r5, #0]
   b8db2:	f3bf 8f5b 	dmb	ish
   b8db6:	f011 0401 	ands.w	r4, r1, #1
{
   b8dba:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8dbc:	d113      	bne.n	b8de6 <_Z19__fetch_global_Wirev+0x3a>
   b8dbe:	4628      	mov	r0, r5
   b8dc0:	f7fb f96f 	bl	b40a2 <__cxa_guard_acquire>
   b8dc4:	b178      	cbz	r0, b8de6 <_Z19__fetch_global_Wirev+0x3a>
   b8dc6:	a801      	add	r0, sp, #4
   b8dc8:	f7ff ffda 	bl	b8d80 <_Z17acquireWireBufferv>
   b8dcc:	aa01      	add	r2, sp, #4
   b8dce:	4621      	mov	r1, r4
   b8dd0:	4807      	ldr	r0, [pc, #28]	; (b8df0 <_Z19__fetch_global_Wirev+0x44>)
   b8dd2:	f7fe fcc7 	bl	b7764 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8dd6:	4628      	mov	r0, r5
   b8dd8:	f7fb f968 	bl	b40ac <__cxa_guard_release>
   b8ddc:	4a05      	ldr	r2, [pc, #20]	; (b8df4 <_Z19__fetch_global_Wirev+0x48>)
   b8dde:	4906      	ldr	r1, [pc, #24]	; (b8df8 <_Z19__fetch_global_Wirev+0x4c>)
   b8de0:	4803      	ldr	r0, [pc, #12]	; (b8df0 <_Z19__fetch_global_Wirev+0x44>)
   b8de2:	f000 f80b 	bl	b8dfc <__aeabi_atexit>
	return wire;
}
   b8de6:	4802      	ldr	r0, [pc, #8]	; (b8df0 <_Z19__fetch_global_Wirev+0x44>)
   b8de8:	b007      	add	sp, #28
   b8dea:	bd30      	pop	{r4, r5, pc}
   b8dec:	2003e7dc 	.word	0x2003e7dc
   b8df0:	2003e7e0 	.word	0x2003e7e0
   b8df4:	2003da58 	.word	0x2003da58
   b8df8:	000b770d 	.word	0x000b770d

000b8dfc <__aeabi_atexit>:
   b8dfc:	460b      	mov	r3, r1
   b8dfe:	4601      	mov	r1, r0
   b8e00:	4618      	mov	r0, r3
   b8e02:	f000 bb87 	b.w	b9514 <__cxa_atexit>

000b8e06 <_ZdlPvj>:
   b8e06:	f7fb b94a 	b.w	b409e <_ZdlPv>

000b8e0a <_ZnajRKSt9nothrow_t>:
   b8e0a:	f7fb b946 	b.w	b409a <_Znaj>

000b8e0e <_ZSt25__throw_bad_function_callv>:
   b8e0e:	b508      	push	{r3, lr}
   b8e10:	f7fd f9ca 	bl	b61a8 <abort>

000b8e14 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8e14:	4901      	ldr	r1, [pc, #4]	; (b8e1c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8e16:	f000 b8f9 	b.w	b900c <_ZNKSt9type_infoeqERKS_>
   b8e1a:	bf00      	nop
   b8e1c:	000ba2d4 	.word	0x000ba2d4

000b8e20 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8e20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8e22:	2400      	movs	r4, #0
   b8e24:	2310      	movs	r3, #16
   b8e26:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8e2a:	6803      	ldr	r3, [r0, #0]
   b8e2c:	4615      	mov	r5, r2
   b8e2e:	699e      	ldr	r6, [r3, #24]
   b8e30:	6812      	ldr	r2, [r2, #0]
   b8e32:	466b      	mov	r3, sp
   b8e34:	e9cd 4400 	strd	r4, r4, [sp]
   b8e38:	47b0      	blx	r6
   b8e3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8e3e:	f003 0306 	and.w	r3, r3, #6
   b8e42:	2b06      	cmp	r3, #6
   b8e44:	bf03      	ittte	eq
   b8e46:	9b00      	ldreq	r3, [sp, #0]
   b8e48:	602b      	streq	r3, [r5, #0]
   b8e4a:	2001      	moveq	r0, #1
   b8e4c:	4620      	movne	r0, r4
   b8e4e:	b004      	add	sp, #16
   b8e50:	bd70      	pop	{r4, r5, r6, pc}

000b8e52 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b8e52:	9800      	ldr	r0, [sp, #0]
   b8e54:	4290      	cmp	r0, r2
   b8e56:	bf14      	ite	ne
   b8e58:	2001      	movne	r0, #1
   b8e5a:	2006      	moveq	r0, #6
   b8e5c:	4770      	bx	lr
	...

000b8e60 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8e60:	b510      	push	{r4, lr}
   b8e62:	4b03      	ldr	r3, [pc, #12]	; (b8e70 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8e64:	6003      	str	r3, [r0, #0]
   b8e66:	4604      	mov	r4, r0
   b8e68:	f000 f8cd 	bl	b9006 <_ZNSt9type_infoD1Ev>
   b8e6c:	4620      	mov	r0, r4
   b8e6e:	bd10      	pop	{r4, pc}
   b8e70:	000ba314 	.word	0x000ba314

000b8e74 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8e74:	b510      	push	{r4, lr}
   b8e76:	4604      	mov	r4, r0
   b8e78:	f7ff fff2 	bl	b8e60 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8e7c:	4620      	mov	r0, r4
   b8e7e:	2108      	movs	r1, #8
   b8e80:	f7ff ffc1 	bl	b8e06 <_ZdlPvj>
   b8e84:	4620      	mov	r0, r4
   b8e86:	bd10      	pop	{r4, pc}

000b8e88 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b8e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8e8c:	461f      	mov	r7, r3
   b8e8e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b8e92:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8e96:	4598      	cmp	r8, r3
   b8e98:	4606      	mov	r6, r0
   b8e9a:	4615      	mov	r5, r2
   b8e9c:	d107      	bne.n	b8eae <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8e9e:	9907      	ldr	r1, [sp, #28]
   b8ea0:	f000 f8b4 	bl	b900c <_ZNKSt9type_infoeqERKS_>
   b8ea4:	b118      	cbz	r0, b8eae <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8ea6:	7165      	strb	r5, [r4, #5]
   b8ea8:	2000      	movs	r0, #0
   b8eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8eae:	4639      	mov	r1, r7
   b8eb0:	4630      	mov	r0, r6
   b8eb2:	f000 f8ab 	bl	b900c <_ZNKSt9type_infoeqERKS_>
   b8eb6:	2800      	cmp	r0, #0
   b8eb8:	d0f6      	beq.n	b8ea8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8eba:	2301      	movs	r3, #1
   b8ebc:	f8c4 8000 	str.w	r8, [r4]
   b8ec0:	7125      	strb	r5, [r4, #4]
   b8ec2:	71a3      	strb	r3, [r4, #6]
   b8ec4:	e7f0      	b.n	b8ea8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8ec6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8ec6:	b538      	push	{r3, r4, r5, lr}
   b8ec8:	4615      	mov	r5, r2
   b8eca:	461c      	mov	r4, r3
   b8ecc:	f000 f89e 	bl	b900c <_ZNKSt9type_infoeqERKS_>
   b8ed0:	b120      	cbz	r0, b8edc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b8ed2:	2308      	movs	r3, #8
   b8ed4:	60e3      	str	r3, [r4, #12]
   b8ed6:	2306      	movs	r3, #6
   b8ed8:	6025      	str	r5, [r4, #0]
   b8eda:	7123      	strb	r3, [r4, #4]
   b8edc:	bd38      	pop	{r3, r4, r5, pc}

000b8ede <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b8ede:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8ee0:	4605      	mov	r5, r0
   b8ee2:	460c      	mov	r4, r1
   b8ee4:	9201      	str	r2, [sp, #4]
   b8ee6:	461e      	mov	r6, r3
   b8ee8:	f000 f890 	bl	b900c <_ZNKSt9type_infoeqERKS_>
   b8eec:	b950      	cbnz	r0, b8f04 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8eee:	2e03      	cmp	r6, #3
   b8ef0:	d808      	bhi.n	b8f04 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8ef2:	6823      	ldr	r3, [r4, #0]
   b8ef4:	9a01      	ldr	r2, [sp, #4]
   b8ef6:	695b      	ldr	r3, [r3, #20]
   b8ef8:	4629      	mov	r1, r5
   b8efa:	4620      	mov	r0, r4
   b8efc:	b002      	add	sp, #8
   b8efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8f02:	4718      	bx	r3
   b8f04:	b002      	add	sp, #8
   b8f06:	bd70      	pop	{r4, r5, r6, pc}

000b8f08 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8f08:	b510      	push	{r4, lr}
   b8f0a:	4b03      	ldr	r3, [pc, #12]	; (b8f18 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8f0c:	6003      	str	r3, [r0, #0]
   b8f0e:	4604      	mov	r4, r0
   b8f10:	f7ff ffa6 	bl	b8e60 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8f14:	4620      	mov	r0, r4
   b8f16:	bd10      	pop	{r4, pc}
   b8f18:	000ba374 	.word	0x000ba374

000b8f1c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8f1c:	b510      	push	{r4, lr}
   b8f1e:	4604      	mov	r4, r0
   b8f20:	f7ff fff2 	bl	b8f08 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8f24:	4620      	mov	r0, r4
   b8f26:	210c      	movs	r1, #12
   b8f28:	f7ff ff6d 	bl	b8e06 <_ZdlPvj>
   b8f2c:	4620      	mov	r0, r4
   b8f2e:	bd10      	pop	{r4, pc}

000b8f30 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b8f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8f32:	9f08      	ldr	r7, [sp, #32]
   b8f34:	4297      	cmp	r7, r2
   b8f36:	4605      	mov	r5, r0
   b8f38:	460e      	mov	r6, r1
   b8f3a:	4614      	mov	r4, r2
   b8f3c:	d00a      	beq.n	b8f54 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b8f3e:	68a8      	ldr	r0, [r5, #8]
   b8f40:	6802      	ldr	r2, [r0, #0]
   b8f42:	9708      	str	r7, [sp, #32]
   b8f44:	6a15      	ldr	r5, [r2, #32]
   b8f46:	4631      	mov	r1, r6
   b8f48:	4622      	mov	r2, r4
   b8f4a:	46ac      	mov	ip, r5
   b8f4c:	b003      	add	sp, #12
   b8f4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8f52:	4760      	bx	ip
   b8f54:	4619      	mov	r1, r3
   b8f56:	9301      	str	r3, [sp, #4]
   b8f58:	f000 f858 	bl	b900c <_ZNKSt9type_infoeqERKS_>
   b8f5c:	9b01      	ldr	r3, [sp, #4]
   b8f5e:	2800      	cmp	r0, #0
   b8f60:	d0ed      	beq.n	b8f3e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b8f62:	2006      	movs	r0, #6
   b8f64:	b003      	add	sp, #12
   b8f66:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8f68 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8f68:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8f6c:	460d      	mov	r5, r1
   b8f6e:	4619      	mov	r1, r3
   b8f70:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8f74:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8f78:	4681      	mov	r9, r0
   b8f7a:	4617      	mov	r7, r2
   b8f7c:	4698      	mov	r8, r3
   b8f7e:	f000 f845 	bl	b900c <_ZNKSt9type_infoeqERKS_>
   b8f82:	b190      	cbz	r0, b8faa <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8f84:	2d00      	cmp	r5, #0
   b8f86:	6034      	str	r4, [r6, #0]
   b8f88:	7137      	strb	r7, [r6, #4]
   b8f8a:	db09      	blt.n	b8fa0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b8f8c:	1961      	adds	r1, r4, r5
   b8f8e:	458a      	cmp	sl, r1
   b8f90:	bf0c      	ite	eq
   b8f92:	2106      	moveq	r1, #6
   b8f94:	2101      	movne	r1, #1
   b8f96:	71b1      	strb	r1, [r6, #6]
   b8f98:	2000      	movs	r0, #0
   b8f9a:	b001      	add	sp, #4
   b8f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8fa0:	3502      	adds	r5, #2
   b8fa2:	d1f9      	bne.n	b8f98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8fa4:	2301      	movs	r3, #1
   b8fa6:	71b3      	strb	r3, [r6, #6]
   b8fa8:	e7f6      	b.n	b8f98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8faa:	4554      	cmp	r4, sl
   b8fac:	d106      	bne.n	b8fbc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8fae:	4659      	mov	r1, fp
   b8fb0:	4648      	mov	r0, r9
   b8fb2:	f000 f82b 	bl	b900c <_ZNKSt9type_infoeqERKS_>
   b8fb6:	b108      	cbz	r0, b8fbc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8fb8:	7177      	strb	r7, [r6, #5]
   b8fba:	e7ed      	b.n	b8f98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8fbc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8fc0:	6803      	ldr	r3, [r0, #0]
   b8fc2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8fc6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8fca:	69dc      	ldr	r4, [r3, #28]
   b8fcc:	463a      	mov	r2, r7
   b8fce:	4643      	mov	r3, r8
   b8fd0:	4629      	mov	r1, r5
   b8fd2:	46a4      	mov	ip, r4
   b8fd4:	b001      	add	sp, #4
   b8fd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8fda:	4760      	bx	ip

000b8fdc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8fe0:	4607      	mov	r7, r0
   b8fe2:	460c      	mov	r4, r1
   b8fe4:	4615      	mov	r5, r2
   b8fe6:	461e      	mov	r6, r3
   b8fe8:	f7ff ff6d 	bl	b8ec6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8fec:	b948      	cbnz	r0, b9002 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8fee:	68b8      	ldr	r0, [r7, #8]
   b8ff0:	6803      	ldr	r3, [r0, #0]
   b8ff2:	699f      	ldr	r7, [r3, #24]
   b8ff4:	462a      	mov	r2, r5
   b8ff6:	4633      	mov	r3, r6
   b8ff8:	4621      	mov	r1, r4
   b8ffa:	46bc      	mov	ip, r7
   b8ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9000:	4760      	bx	ip
   b9002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9006 <_ZNSt9type_infoD1Ev>:
   b9006:	4770      	bx	lr

000b9008 <_ZNKSt9type_info14__is_pointer_pEv>:
   b9008:	2000      	movs	r0, #0
   b900a:	4770      	bx	lr

000b900c <_ZNKSt9type_infoeqERKS_>:
   b900c:	4281      	cmp	r1, r0
   b900e:	b508      	push	{r3, lr}
   b9010:	d00e      	beq.n	b9030 <_ZNKSt9type_infoeqERKS_+0x24>
   b9012:	6840      	ldr	r0, [r0, #4]
   b9014:	7803      	ldrb	r3, [r0, #0]
   b9016:	2b2a      	cmp	r3, #42	; 0x2a
   b9018:	d00c      	beq.n	b9034 <_ZNKSt9type_infoeqERKS_+0x28>
   b901a:	6849      	ldr	r1, [r1, #4]
   b901c:	780b      	ldrb	r3, [r1, #0]
   b901e:	2b2a      	cmp	r3, #42	; 0x2a
   b9020:	bf08      	it	eq
   b9022:	3101      	addeq	r1, #1
   b9024:	f000 fb06 	bl	b9634 <strcmp>
   b9028:	fab0 f080 	clz	r0, r0
   b902c:	0940      	lsrs	r0, r0, #5
   b902e:	bd08      	pop	{r3, pc}
   b9030:	2001      	movs	r0, #1
   b9032:	e7fc      	b.n	b902e <_ZNKSt9type_infoeqERKS_+0x22>
   b9034:	2000      	movs	r0, #0
   b9036:	e7fa      	b.n	b902e <_ZNKSt9type_infoeqERKS_+0x22>

000b9038 <__aeabi_drsub>:
   b9038:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b903c:	e002      	b.n	b9044 <__adddf3>
   b903e:	bf00      	nop

000b9040 <__aeabi_dsub>:
   b9040:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b9044 <__adddf3>:
   b9044:	b530      	push	{r4, r5, lr}
   b9046:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b904a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b904e:	ea94 0f05 	teq	r4, r5
   b9052:	bf08      	it	eq
   b9054:	ea90 0f02 	teqeq	r0, r2
   b9058:	bf1f      	itttt	ne
   b905a:	ea54 0c00 	orrsne.w	ip, r4, r0
   b905e:	ea55 0c02 	orrsne.w	ip, r5, r2
   b9062:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b9066:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b906a:	f000 80e2 	beq.w	b9232 <__adddf3+0x1ee>
   b906e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b9072:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b9076:	bfb8      	it	lt
   b9078:	426d      	neglt	r5, r5
   b907a:	dd0c      	ble.n	b9096 <__adddf3+0x52>
   b907c:	442c      	add	r4, r5
   b907e:	ea80 0202 	eor.w	r2, r0, r2
   b9082:	ea81 0303 	eor.w	r3, r1, r3
   b9086:	ea82 0000 	eor.w	r0, r2, r0
   b908a:	ea83 0101 	eor.w	r1, r3, r1
   b908e:	ea80 0202 	eor.w	r2, r0, r2
   b9092:	ea81 0303 	eor.w	r3, r1, r3
   b9096:	2d36      	cmp	r5, #54	; 0x36
   b9098:	bf88      	it	hi
   b909a:	bd30      	pophi	{r4, r5, pc}
   b909c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b90a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b90a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b90a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b90ac:	d002      	beq.n	b90b4 <__adddf3+0x70>
   b90ae:	4240      	negs	r0, r0
   b90b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b90b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b90b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b90bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b90c0:	d002      	beq.n	b90c8 <__adddf3+0x84>
   b90c2:	4252      	negs	r2, r2
   b90c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b90c8:	ea94 0f05 	teq	r4, r5
   b90cc:	f000 80a7 	beq.w	b921e <__adddf3+0x1da>
   b90d0:	f1a4 0401 	sub.w	r4, r4, #1
   b90d4:	f1d5 0e20 	rsbs	lr, r5, #32
   b90d8:	db0d      	blt.n	b90f6 <__adddf3+0xb2>
   b90da:	fa02 fc0e 	lsl.w	ip, r2, lr
   b90de:	fa22 f205 	lsr.w	r2, r2, r5
   b90e2:	1880      	adds	r0, r0, r2
   b90e4:	f141 0100 	adc.w	r1, r1, #0
   b90e8:	fa03 f20e 	lsl.w	r2, r3, lr
   b90ec:	1880      	adds	r0, r0, r2
   b90ee:	fa43 f305 	asr.w	r3, r3, r5
   b90f2:	4159      	adcs	r1, r3
   b90f4:	e00e      	b.n	b9114 <__adddf3+0xd0>
   b90f6:	f1a5 0520 	sub.w	r5, r5, #32
   b90fa:	f10e 0e20 	add.w	lr, lr, #32
   b90fe:	2a01      	cmp	r2, #1
   b9100:	fa03 fc0e 	lsl.w	ip, r3, lr
   b9104:	bf28      	it	cs
   b9106:	f04c 0c02 	orrcs.w	ip, ip, #2
   b910a:	fa43 f305 	asr.w	r3, r3, r5
   b910e:	18c0      	adds	r0, r0, r3
   b9110:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b9114:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9118:	d507      	bpl.n	b912a <__adddf3+0xe6>
   b911a:	f04f 0e00 	mov.w	lr, #0
   b911e:	f1dc 0c00 	rsbs	ip, ip, #0
   b9122:	eb7e 0000 	sbcs.w	r0, lr, r0
   b9126:	eb6e 0101 	sbc.w	r1, lr, r1
   b912a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b912e:	d31b      	bcc.n	b9168 <__adddf3+0x124>
   b9130:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b9134:	d30c      	bcc.n	b9150 <__adddf3+0x10c>
   b9136:	0849      	lsrs	r1, r1, #1
   b9138:	ea5f 0030 	movs.w	r0, r0, rrx
   b913c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b9140:	f104 0401 	add.w	r4, r4, #1
   b9144:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b9148:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b914c:	f080 809a 	bcs.w	b9284 <__adddf3+0x240>
   b9150:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b9154:	bf08      	it	eq
   b9156:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b915a:	f150 0000 	adcs.w	r0, r0, #0
   b915e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9162:	ea41 0105 	orr.w	r1, r1, r5
   b9166:	bd30      	pop	{r4, r5, pc}
   b9168:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b916c:	4140      	adcs	r0, r0
   b916e:	eb41 0101 	adc.w	r1, r1, r1
   b9172:	3c01      	subs	r4, #1
   b9174:	bf28      	it	cs
   b9176:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b917a:	d2e9      	bcs.n	b9150 <__adddf3+0x10c>
   b917c:	f091 0f00 	teq	r1, #0
   b9180:	bf04      	itt	eq
   b9182:	4601      	moveq	r1, r0
   b9184:	2000      	moveq	r0, #0
   b9186:	fab1 f381 	clz	r3, r1
   b918a:	bf08      	it	eq
   b918c:	3320      	addeq	r3, #32
   b918e:	f1a3 030b 	sub.w	r3, r3, #11
   b9192:	f1b3 0220 	subs.w	r2, r3, #32
   b9196:	da0c      	bge.n	b91b2 <__adddf3+0x16e>
   b9198:	320c      	adds	r2, #12
   b919a:	dd08      	ble.n	b91ae <__adddf3+0x16a>
   b919c:	f102 0c14 	add.w	ip, r2, #20
   b91a0:	f1c2 020c 	rsb	r2, r2, #12
   b91a4:	fa01 f00c 	lsl.w	r0, r1, ip
   b91a8:	fa21 f102 	lsr.w	r1, r1, r2
   b91ac:	e00c      	b.n	b91c8 <__adddf3+0x184>
   b91ae:	f102 0214 	add.w	r2, r2, #20
   b91b2:	bfd8      	it	le
   b91b4:	f1c2 0c20 	rsble	ip, r2, #32
   b91b8:	fa01 f102 	lsl.w	r1, r1, r2
   b91bc:	fa20 fc0c 	lsr.w	ip, r0, ip
   b91c0:	bfdc      	itt	le
   b91c2:	ea41 010c 	orrle.w	r1, r1, ip
   b91c6:	4090      	lslle	r0, r2
   b91c8:	1ae4      	subs	r4, r4, r3
   b91ca:	bfa2      	ittt	ge
   b91cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b91d0:	4329      	orrge	r1, r5
   b91d2:	bd30      	popge	{r4, r5, pc}
   b91d4:	ea6f 0404 	mvn.w	r4, r4
   b91d8:	3c1f      	subs	r4, #31
   b91da:	da1c      	bge.n	b9216 <__adddf3+0x1d2>
   b91dc:	340c      	adds	r4, #12
   b91de:	dc0e      	bgt.n	b91fe <__adddf3+0x1ba>
   b91e0:	f104 0414 	add.w	r4, r4, #20
   b91e4:	f1c4 0220 	rsb	r2, r4, #32
   b91e8:	fa20 f004 	lsr.w	r0, r0, r4
   b91ec:	fa01 f302 	lsl.w	r3, r1, r2
   b91f0:	ea40 0003 	orr.w	r0, r0, r3
   b91f4:	fa21 f304 	lsr.w	r3, r1, r4
   b91f8:	ea45 0103 	orr.w	r1, r5, r3
   b91fc:	bd30      	pop	{r4, r5, pc}
   b91fe:	f1c4 040c 	rsb	r4, r4, #12
   b9202:	f1c4 0220 	rsb	r2, r4, #32
   b9206:	fa20 f002 	lsr.w	r0, r0, r2
   b920a:	fa01 f304 	lsl.w	r3, r1, r4
   b920e:	ea40 0003 	orr.w	r0, r0, r3
   b9212:	4629      	mov	r1, r5
   b9214:	bd30      	pop	{r4, r5, pc}
   b9216:	fa21 f004 	lsr.w	r0, r1, r4
   b921a:	4629      	mov	r1, r5
   b921c:	bd30      	pop	{r4, r5, pc}
   b921e:	f094 0f00 	teq	r4, #0
   b9222:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b9226:	bf06      	itte	eq
   b9228:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b922c:	3401      	addeq	r4, #1
   b922e:	3d01      	subne	r5, #1
   b9230:	e74e      	b.n	b90d0 <__adddf3+0x8c>
   b9232:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9236:	bf18      	it	ne
   b9238:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b923c:	d029      	beq.n	b9292 <__adddf3+0x24e>
   b923e:	ea94 0f05 	teq	r4, r5
   b9242:	bf08      	it	eq
   b9244:	ea90 0f02 	teqeq	r0, r2
   b9248:	d005      	beq.n	b9256 <__adddf3+0x212>
   b924a:	ea54 0c00 	orrs.w	ip, r4, r0
   b924e:	bf04      	itt	eq
   b9250:	4619      	moveq	r1, r3
   b9252:	4610      	moveq	r0, r2
   b9254:	bd30      	pop	{r4, r5, pc}
   b9256:	ea91 0f03 	teq	r1, r3
   b925a:	bf1e      	ittt	ne
   b925c:	2100      	movne	r1, #0
   b925e:	2000      	movne	r0, #0
   b9260:	bd30      	popne	{r4, r5, pc}
   b9262:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b9266:	d105      	bne.n	b9274 <__adddf3+0x230>
   b9268:	0040      	lsls	r0, r0, #1
   b926a:	4149      	adcs	r1, r1
   b926c:	bf28      	it	cs
   b926e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b9272:	bd30      	pop	{r4, r5, pc}
   b9274:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9278:	bf3c      	itt	cc
   b927a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b927e:	bd30      	popcc	{r4, r5, pc}
   b9280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9284:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9288:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b928c:	f04f 0000 	mov.w	r0, #0
   b9290:	bd30      	pop	{r4, r5, pc}
   b9292:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9296:	bf1a      	itte	ne
   b9298:	4619      	movne	r1, r3
   b929a:	4610      	movne	r0, r2
   b929c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b92a0:	bf1c      	itt	ne
   b92a2:	460b      	movne	r3, r1
   b92a4:	4602      	movne	r2, r0
   b92a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b92aa:	bf06      	itte	eq
   b92ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b92b0:	ea91 0f03 	teqeq	r1, r3
   b92b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b92b8:	bd30      	pop	{r4, r5, pc}
   b92ba:	bf00      	nop

000b92bc <__aeabi_ui2d>:
   b92bc:	f090 0f00 	teq	r0, #0
   b92c0:	bf04      	itt	eq
   b92c2:	2100      	moveq	r1, #0
   b92c4:	4770      	bxeq	lr
   b92c6:	b530      	push	{r4, r5, lr}
   b92c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b92cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b92d0:	f04f 0500 	mov.w	r5, #0
   b92d4:	f04f 0100 	mov.w	r1, #0
   b92d8:	e750      	b.n	b917c <__adddf3+0x138>
   b92da:	bf00      	nop

000b92dc <__aeabi_i2d>:
   b92dc:	f090 0f00 	teq	r0, #0
   b92e0:	bf04      	itt	eq
   b92e2:	2100      	moveq	r1, #0
   b92e4:	4770      	bxeq	lr
   b92e6:	b530      	push	{r4, r5, lr}
   b92e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b92ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b92f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b92f4:	bf48      	it	mi
   b92f6:	4240      	negmi	r0, r0
   b92f8:	f04f 0100 	mov.w	r1, #0
   b92fc:	e73e      	b.n	b917c <__adddf3+0x138>
   b92fe:	bf00      	nop

000b9300 <__aeabi_f2d>:
   b9300:	0042      	lsls	r2, r0, #1
   b9302:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b9306:	ea4f 0131 	mov.w	r1, r1, rrx
   b930a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b930e:	bf1f      	itttt	ne
   b9310:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b9314:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9318:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b931c:	4770      	bxne	lr
   b931e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b9322:	bf08      	it	eq
   b9324:	4770      	bxeq	lr
   b9326:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b932a:	bf04      	itt	eq
   b932c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9330:	4770      	bxeq	lr
   b9332:	b530      	push	{r4, r5, lr}
   b9334:	f44f 7460 	mov.w	r4, #896	; 0x380
   b9338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b933c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9340:	e71c      	b.n	b917c <__adddf3+0x138>
   b9342:	bf00      	nop

000b9344 <__aeabi_ul2d>:
   b9344:	ea50 0201 	orrs.w	r2, r0, r1
   b9348:	bf08      	it	eq
   b934a:	4770      	bxeq	lr
   b934c:	b530      	push	{r4, r5, lr}
   b934e:	f04f 0500 	mov.w	r5, #0
   b9352:	e00a      	b.n	b936a <__aeabi_l2d+0x16>

000b9354 <__aeabi_l2d>:
   b9354:	ea50 0201 	orrs.w	r2, r0, r1
   b9358:	bf08      	it	eq
   b935a:	4770      	bxeq	lr
   b935c:	b530      	push	{r4, r5, lr}
   b935e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b9362:	d502      	bpl.n	b936a <__aeabi_l2d+0x16>
   b9364:	4240      	negs	r0, r0
   b9366:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b936a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b936e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9372:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b9376:	f43f aed8 	beq.w	b912a <__adddf3+0xe6>
   b937a:	f04f 0203 	mov.w	r2, #3
   b937e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9382:	bf18      	it	ne
   b9384:	3203      	addne	r2, #3
   b9386:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b938a:	bf18      	it	ne
   b938c:	3203      	addne	r2, #3
   b938e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b9392:	f1c2 0320 	rsb	r3, r2, #32
   b9396:	fa00 fc03 	lsl.w	ip, r0, r3
   b939a:	fa20 f002 	lsr.w	r0, r0, r2
   b939e:	fa01 fe03 	lsl.w	lr, r1, r3
   b93a2:	ea40 000e 	orr.w	r0, r0, lr
   b93a6:	fa21 f102 	lsr.w	r1, r1, r2
   b93aa:	4414      	add	r4, r2
   b93ac:	e6bd      	b.n	b912a <__adddf3+0xe6>
   b93ae:	bf00      	nop

000b93b0 <__gedf2>:
   b93b0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b93b4:	e006      	b.n	b93c4 <__cmpdf2+0x4>
   b93b6:	bf00      	nop

000b93b8 <__ledf2>:
   b93b8:	f04f 0c01 	mov.w	ip, #1
   b93bc:	e002      	b.n	b93c4 <__cmpdf2+0x4>
   b93be:	bf00      	nop

000b93c0 <__cmpdf2>:
   b93c0:	f04f 0c01 	mov.w	ip, #1
   b93c4:	f84d cd04 	str.w	ip, [sp, #-4]!
   b93c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b93cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b93d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b93d4:	bf18      	it	ne
   b93d6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b93da:	d01b      	beq.n	b9414 <__cmpdf2+0x54>
   b93dc:	b001      	add	sp, #4
   b93de:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b93e2:	bf0c      	ite	eq
   b93e4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b93e8:	ea91 0f03 	teqne	r1, r3
   b93ec:	bf02      	ittt	eq
   b93ee:	ea90 0f02 	teqeq	r0, r2
   b93f2:	2000      	moveq	r0, #0
   b93f4:	4770      	bxeq	lr
   b93f6:	f110 0f00 	cmn.w	r0, #0
   b93fa:	ea91 0f03 	teq	r1, r3
   b93fe:	bf58      	it	pl
   b9400:	4299      	cmppl	r1, r3
   b9402:	bf08      	it	eq
   b9404:	4290      	cmpeq	r0, r2
   b9406:	bf2c      	ite	cs
   b9408:	17d8      	asrcs	r0, r3, #31
   b940a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b940e:	f040 0001 	orr.w	r0, r0, #1
   b9412:	4770      	bx	lr
   b9414:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9418:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b941c:	d102      	bne.n	b9424 <__cmpdf2+0x64>
   b941e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b9422:	d107      	bne.n	b9434 <__cmpdf2+0x74>
   b9424:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9428:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b942c:	d1d6      	bne.n	b93dc <__cmpdf2+0x1c>
   b942e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b9432:	d0d3      	beq.n	b93dc <__cmpdf2+0x1c>
   b9434:	f85d 0b04 	ldr.w	r0, [sp], #4
   b9438:	4770      	bx	lr
   b943a:	bf00      	nop

000b943c <__aeabi_cdrcmple>:
   b943c:	4684      	mov	ip, r0
   b943e:	4610      	mov	r0, r2
   b9440:	4662      	mov	r2, ip
   b9442:	468c      	mov	ip, r1
   b9444:	4619      	mov	r1, r3
   b9446:	4663      	mov	r3, ip
   b9448:	e000      	b.n	b944c <__aeabi_cdcmpeq>
   b944a:	bf00      	nop

000b944c <__aeabi_cdcmpeq>:
   b944c:	b501      	push	{r0, lr}
   b944e:	f7ff ffb7 	bl	b93c0 <__cmpdf2>
   b9452:	2800      	cmp	r0, #0
   b9454:	bf48      	it	mi
   b9456:	f110 0f00 	cmnmi.w	r0, #0
   b945a:	bd01      	pop	{r0, pc}

000b945c <__aeabi_dcmpeq>:
   b945c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9460:	f7ff fff4 	bl	b944c <__aeabi_cdcmpeq>
   b9464:	bf0c      	ite	eq
   b9466:	2001      	moveq	r0, #1
   b9468:	2000      	movne	r0, #0
   b946a:	f85d fb08 	ldr.w	pc, [sp], #8
   b946e:	bf00      	nop

000b9470 <__aeabi_dcmplt>:
   b9470:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9474:	f7ff ffea 	bl	b944c <__aeabi_cdcmpeq>
   b9478:	bf34      	ite	cc
   b947a:	2001      	movcc	r0, #1
   b947c:	2000      	movcs	r0, #0
   b947e:	f85d fb08 	ldr.w	pc, [sp], #8
   b9482:	bf00      	nop

000b9484 <__aeabi_dcmple>:
   b9484:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9488:	f7ff ffe0 	bl	b944c <__aeabi_cdcmpeq>
   b948c:	bf94      	ite	ls
   b948e:	2001      	movls	r0, #1
   b9490:	2000      	movhi	r0, #0
   b9492:	f85d fb08 	ldr.w	pc, [sp], #8
   b9496:	bf00      	nop

000b9498 <__aeabi_dcmpge>:
   b9498:	f84d ed08 	str.w	lr, [sp, #-8]!
   b949c:	f7ff ffce 	bl	b943c <__aeabi_cdrcmple>
   b94a0:	bf94      	ite	ls
   b94a2:	2001      	movls	r0, #1
   b94a4:	2000      	movhi	r0, #0
   b94a6:	f85d fb08 	ldr.w	pc, [sp], #8
   b94aa:	bf00      	nop

000b94ac <__aeabi_dcmpgt>:
   b94ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   b94b0:	f7ff ffc4 	bl	b943c <__aeabi_cdrcmple>
   b94b4:	bf34      	ite	cc
   b94b6:	2001      	movcc	r0, #1
   b94b8:	2000      	movcs	r0, #0
   b94ba:	f85d fb08 	ldr.w	pc, [sp], #8
   b94be:	bf00      	nop

000b94c0 <asctime_r>:
   b94c0:	b510      	push	{r4, lr}
   b94c2:	460c      	mov	r4, r1
   b94c4:	6941      	ldr	r1, [r0, #20]
   b94c6:	6903      	ldr	r3, [r0, #16]
   b94c8:	6982      	ldr	r2, [r0, #24]
   b94ca:	b086      	sub	sp, #24
   b94cc:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b94d0:	9104      	str	r1, [sp, #16]
   b94d2:	6801      	ldr	r1, [r0, #0]
   b94d4:	9103      	str	r1, [sp, #12]
   b94d6:	6841      	ldr	r1, [r0, #4]
   b94d8:	9102      	str	r1, [sp, #8]
   b94da:	6881      	ldr	r1, [r0, #8]
   b94dc:	9101      	str	r1, [sp, #4]
   b94de:	68c1      	ldr	r1, [r0, #12]
   b94e0:	9100      	str	r1, [sp, #0]
   b94e2:	4907      	ldr	r1, [pc, #28]	; (b9500 <asctime_r+0x40>)
   b94e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b94e8:	440b      	add	r3, r1
   b94ea:	4906      	ldr	r1, [pc, #24]	; (b9504 <asctime_r+0x44>)
   b94ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b94f0:	440a      	add	r2, r1
   b94f2:	4620      	mov	r0, r4
   b94f4:	4904      	ldr	r1, [pc, #16]	; (b9508 <asctime_r+0x48>)
   b94f6:	f7fc fe47 	bl	b6188 <siprintf>
   b94fa:	4620      	mov	r0, r4
   b94fc:	b006      	add	sp, #24
   b94fe:	bd10      	pop	{r4, pc}
   b9500:	000ba3e2 	.word	0x000ba3e2
   b9504:	000ba3cd 	.word	0x000ba3cd
   b9508:	000ba3ad 	.word	0x000ba3ad

000b950c <atoi>:
   b950c:	220a      	movs	r2, #10
   b950e:	2100      	movs	r1, #0
   b9510:	f000 b962 	b.w	b97d8 <strtol>

000b9514 <__cxa_atexit>:
   b9514:	b510      	push	{r4, lr}
   b9516:	4c05      	ldr	r4, [pc, #20]	; (b952c <__cxa_atexit+0x18>)
   b9518:	4613      	mov	r3, r2
   b951a:	b12c      	cbz	r4, b9528 <__cxa_atexit+0x14>
   b951c:	460a      	mov	r2, r1
   b951e:	4601      	mov	r1, r0
   b9520:	2002      	movs	r0, #2
   b9522:	f3af 8000 	nop.w
   b9526:	bd10      	pop	{r4, pc}
   b9528:	4620      	mov	r0, r4
   b952a:	e7fc      	b.n	b9526 <__cxa_atexit+0x12>
   b952c:	00000000 	.word	0x00000000

000b9530 <ldiv>:
   b9530:	2900      	cmp	r1, #0
   b9532:	b510      	push	{r4, lr}
   b9534:	fb91 f4f2 	sdiv	r4, r1, r2
   b9538:	fb02 1314 	mls	r3, r2, r4, r1
   b953c:	db06      	blt.n	b954c <ldiv+0x1c>
   b953e:	2b00      	cmp	r3, #0
   b9540:	da01      	bge.n	b9546 <ldiv+0x16>
   b9542:	3401      	adds	r4, #1
   b9544:	1a9b      	subs	r3, r3, r2
   b9546:	e9c0 4300 	strd	r4, r3, [r0]
   b954a:	bd10      	pop	{r4, pc}
   b954c:	2b00      	cmp	r3, #0
   b954e:	bfc4      	itt	gt
   b9550:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   b9554:	189b      	addgt	r3, r3, r2
   b9556:	e7f6      	b.n	b9546 <ldiv+0x16>

000b9558 <memcmp>:
   b9558:	b510      	push	{r4, lr}
   b955a:	3901      	subs	r1, #1
   b955c:	4402      	add	r2, r0
   b955e:	4290      	cmp	r0, r2
   b9560:	d101      	bne.n	b9566 <memcmp+0xe>
   b9562:	2000      	movs	r0, #0
   b9564:	e005      	b.n	b9572 <memcmp+0x1a>
   b9566:	7803      	ldrb	r3, [r0, #0]
   b9568:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b956c:	42a3      	cmp	r3, r4
   b956e:	d001      	beq.n	b9574 <memcmp+0x1c>
   b9570:	1b18      	subs	r0, r3, r4
   b9572:	bd10      	pop	{r4, pc}
   b9574:	3001      	adds	r0, #1
   b9576:	e7f2      	b.n	b955e <memcmp+0x6>

000b9578 <memcpy>:
   b9578:	440a      	add	r2, r1
   b957a:	4291      	cmp	r1, r2
   b957c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b9580:	d100      	bne.n	b9584 <memcpy+0xc>
   b9582:	4770      	bx	lr
   b9584:	b510      	push	{r4, lr}
   b9586:	f811 4b01 	ldrb.w	r4, [r1], #1
   b958a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b958e:	4291      	cmp	r1, r2
   b9590:	d1f9      	bne.n	b9586 <memcpy+0xe>
   b9592:	bd10      	pop	{r4, pc}

000b9594 <memmove>:
   b9594:	4288      	cmp	r0, r1
   b9596:	b510      	push	{r4, lr}
   b9598:	eb01 0402 	add.w	r4, r1, r2
   b959c:	d902      	bls.n	b95a4 <memmove+0x10>
   b959e:	4284      	cmp	r4, r0
   b95a0:	4623      	mov	r3, r4
   b95a2:	d807      	bhi.n	b95b4 <memmove+0x20>
   b95a4:	1e43      	subs	r3, r0, #1
   b95a6:	42a1      	cmp	r1, r4
   b95a8:	d008      	beq.n	b95bc <memmove+0x28>
   b95aa:	f811 2b01 	ldrb.w	r2, [r1], #1
   b95ae:	f803 2f01 	strb.w	r2, [r3, #1]!
   b95b2:	e7f8      	b.n	b95a6 <memmove+0x12>
   b95b4:	4402      	add	r2, r0
   b95b6:	4601      	mov	r1, r0
   b95b8:	428a      	cmp	r2, r1
   b95ba:	d100      	bne.n	b95be <memmove+0x2a>
   b95bc:	bd10      	pop	{r4, pc}
   b95be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b95c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b95c6:	e7f7      	b.n	b95b8 <memmove+0x24>

000b95c8 <memset>:
   b95c8:	4402      	add	r2, r0
   b95ca:	4603      	mov	r3, r0
   b95cc:	4293      	cmp	r3, r2
   b95ce:	d100      	bne.n	b95d2 <memset+0xa>
   b95d0:	4770      	bx	lr
   b95d2:	f803 1b01 	strb.w	r1, [r3], #1
   b95d6:	e7f9      	b.n	b95cc <memset+0x4>

000b95d8 <srand>:
   b95d8:	b538      	push	{r3, r4, r5, lr}
   b95da:	4b10      	ldr	r3, [pc, #64]	; (b961c <srand+0x44>)
   b95dc:	681d      	ldr	r5, [r3, #0]
   b95de:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b95e0:	4604      	mov	r4, r0
   b95e2:	b9b3      	cbnz	r3, b9612 <srand+0x3a>
   b95e4:	2018      	movs	r0, #24
   b95e6:	f7fc fdb7 	bl	b6158 <malloc>
   b95ea:	4602      	mov	r2, r0
   b95ec:	63a8      	str	r0, [r5, #56]	; 0x38
   b95ee:	b920      	cbnz	r0, b95fa <srand+0x22>
   b95f0:	4b0b      	ldr	r3, [pc, #44]	; (b9620 <srand+0x48>)
   b95f2:	480c      	ldr	r0, [pc, #48]	; (b9624 <srand+0x4c>)
   b95f4:	2142      	movs	r1, #66	; 0x42
   b95f6:	f7fc fde7 	bl	b61c8 <__assert_func>
   b95fa:	490b      	ldr	r1, [pc, #44]	; (b9628 <srand+0x50>)
   b95fc:	4b0b      	ldr	r3, [pc, #44]	; (b962c <srand+0x54>)
   b95fe:	e9c0 1300 	strd	r1, r3, [r0]
   b9602:	4b0b      	ldr	r3, [pc, #44]	; (b9630 <srand+0x58>)
   b9604:	6083      	str	r3, [r0, #8]
   b9606:	230b      	movs	r3, #11
   b9608:	8183      	strh	r3, [r0, #12]
   b960a:	2100      	movs	r1, #0
   b960c:	2001      	movs	r0, #1
   b960e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9612:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9614:	2200      	movs	r2, #0
   b9616:	611c      	str	r4, [r3, #16]
   b9618:	615a      	str	r2, [r3, #20]
   b961a:	bd38      	pop	{r3, r4, r5, pc}
   b961c:	2003d9f0 	.word	0x2003d9f0
   b9620:	000ba406 	.word	0x000ba406
   b9624:	000ba41d 	.word	0x000ba41d
   b9628:	abcd330e 	.word	0xabcd330e
   b962c:	e66d1234 	.word	0xe66d1234
   b9630:	0005deec 	.word	0x0005deec

000b9634 <strcmp>:
   b9634:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9638:	f811 3b01 	ldrb.w	r3, [r1], #1
   b963c:	2a01      	cmp	r2, #1
   b963e:	bf28      	it	cs
   b9640:	429a      	cmpcs	r2, r3
   b9642:	d0f7      	beq.n	b9634 <strcmp>
   b9644:	1ad0      	subs	r0, r2, r3
   b9646:	4770      	bx	lr

000b9648 <strcpy>:
   b9648:	4603      	mov	r3, r0
   b964a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b964e:	f803 2b01 	strb.w	r2, [r3], #1
   b9652:	2a00      	cmp	r2, #0
   b9654:	d1f9      	bne.n	b964a <strcpy+0x2>
   b9656:	4770      	bx	lr

000b9658 <strlen>:
   b9658:	4603      	mov	r3, r0
   b965a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b965e:	2a00      	cmp	r2, #0
   b9660:	d1fb      	bne.n	b965a <strlen+0x2>
   b9662:	1a18      	subs	r0, r3, r0
   b9664:	3801      	subs	r0, #1
   b9666:	4770      	bx	lr

000b9668 <strncpy>:
   b9668:	b510      	push	{r4, lr}
   b966a:	3901      	subs	r1, #1
   b966c:	4603      	mov	r3, r0
   b966e:	b132      	cbz	r2, b967e <strncpy+0x16>
   b9670:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9674:	f803 4b01 	strb.w	r4, [r3], #1
   b9678:	3a01      	subs	r2, #1
   b967a:	2c00      	cmp	r4, #0
   b967c:	d1f7      	bne.n	b966e <strncpy+0x6>
   b967e:	441a      	add	r2, r3
   b9680:	2100      	movs	r1, #0
   b9682:	4293      	cmp	r3, r2
   b9684:	d100      	bne.n	b9688 <strncpy+0x20>
   b9686:	bd10      	pop	{r4, pc}
   b9688:	f803 1b01 	strb.w	r1, [r3], #1
   b968c:	e7f9      	b.n	b9682 <strncpy+0x1a>

000b968e <strnlen>:
   b968e:	b510      	push	{r4, lr}
   b9690:	4602      	mov	r2, r0
   b9692:	4401      	add	r1, r0
   b9694:	428a      	cmp	r2, r1
   b9696:	4613      	mov	r3, r2
   b9698:	d003      	beq.n	b96a2 <strnlen+0x14>
   b969a:	781c      	ldrb	r4, [r3, #0]
   b969c:	3201      	adds	r2, #1
   b969e:	2c00      	cmp	r4, #0
   b96a0:	d1f8      	bne.n	b9694 <strnlen+0x6>
   b96a2:	1a18      	subs	r0, r3, r0
   b96a4:	bd10      	pop	{r4, pc}

000b96a6 <strstr>:
   b96a6:	780a      	ldrb	r2, [r1, #0]
   b96a8:	b570      	push	{r4, r5, r6, lr}
   b96aa:	b96a      	cbnz	r2, b96c8 <strstr+0x22>
   b96ac:	bd70      	pop	{r4, r5, r6, pc}
   b96ae:	429a      	cmp	r2, r3
   b96b0:	d109      	bne.n	b96c6 <strstr+0x20>
   b96b2:	460c      	mov	r4, r1
   b96b4:	4605      	mov	r5, r0
   b96b6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   b96ba:	2b00      	cmp	r3, #0
   b96bc:	d0f6      	beq.n	b96ac <strstr+0x6>
   b96be:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   b96c2:	429e      	cmp	r6, r3
   b96c4:	d0f7      	beq.n	b96b6 <strstr+0x10>
   b96c6:	3001      	adds	r0, #1
   b96c8:	7803      	ldrb	r3, [r0, #0]
   b96ca:	2b00      	cmp	r3, #0
   b96cc:	d1ef      	bne.n	b96ae <strstr+0x8>
   b96ce:	4618      	mov	r0, r3
   b96d0:	e7ec      	b.n	b96ac <strstr+0x6>
	...

000b96d4 <_strtol_l.constprop.0>:
   b96d4:	2b01      	cmp	r3, #1
   b96d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b96da:	d001      	beq.n	b96e0 <_strtol_l.constprop.0+0xc>
   b96dc:	2b24      	cmp	r3, #36	; 0x24
   b96de:	d906      	bls.n	b96ee <_strtol_l.constprop.0+0x1a>
   b96e0:	f7fc fd6a 	bl	b61b8 <__errno>
   b96e4:	2316      	movs	r3, #22
   b96e6:	6003      	str	r3, [r0, #0]
   b96e8:	2000      	movs	r0, #0
   b96ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b96ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b97d4 <_strtol_l.constprop.0+0x100>
   b96f2:	460d      	mov	r5, r1
   b96f4:	462e      	mov	r6, r5
   b96f6:	f815 4b01 	ldrb.w	r4, [r5], #1
   b96fa:	f814 700c 	ldrb.w	r7, [r4, ip]
   b96fe:	f017 0708 	ands.w	r7, r7, #8
   b9702:	d1f7      	bne.n	b96f4 <_strtol_l.constprop.0+0x20>
   b9704:	2c2d      	cmp	r4, #45	; 0x2d
   b9706:	d132      	bne.n	b976e <_strtol_l.constprop.0+0x9a>
   b9708:	782c      	ldrb	r4, [r5, #0]
   b970a:	2701      	movs	r7, #1
   b970c:	1cb5      	adds	r5, r6, #2
   b970e:	2b00      	cmp	r3, #0
   b9710:	d05b      	beq.n	b97ca <_strtol_l.constprop.0+0xf6>
   b9712:	2b10      	cmp	r3, #16
   b9714:	d109      	bne.n	b972a <_strtol_l.constprop.0+0x56>
   b9716:	2c30      	cmp	r4, #48	; 0x30
   b9718:	d107      	bne.n	b972a <_strtol_l.constprop.0+0x56>
   b971a:	782c      	ldrb	r4, [r5, #0]
   b971c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b9720:	2c58      	cmp	r4, #88	; 0x58
   b9722:	d14d      	bne.n	b97c0 <_strtol_l.constprop.0+0xec>
   b9724:	786c      	ldrb	r4, [r5, #1]
   b9726:	2310      	movs	r3, #16
   b9728:	3502      	adds	r5, #2
   b972a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b972e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9732:	f04f 0c00 	mov.w	ip, #0
   b9736:	fbb8 f9f3 	udiv	r9, r8, r3
   b973a:	4666      	mov	r6, ip
   b973c:	fb03 8a19 	mls	sl, r3, r9, r8
   b9740:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b9744:	f1be 0f09 	cmp.w	lr, #9
   b9748:	d816      	bhi.n	b9778 <_strtol_l.constprop.0+0xa4>
   b974a:	4674      	mov	r4, lr
   b974c:	42a3      	cmp	r3, r4
   b974e:	dd24      	ble.n	b979a <_strtol_l.constprop.0+0xc6>
   b9750:	f1bc 0f00 	cmp.w	ip, #0
   b9754:	db1e      	blt.n	b9794 <_strtol_l.constprop.0+0xc0>
   b9756:	45b1      	cmp	r9, r6
   b9758:	d31c      	bcc.n	b9794 <_strtol_l.constprop.0+0xc0>
   b975a:	d101      	bne.n	b9760 <_strtol_l.constprop.0+0x8c>
   b975c:	45a2      	cmp	sl, r4
   b975e:	db19      	blt.n	b9794 <_strtol_l.constprop.0+0xc0>
   b9760:	fb06 4603 	mla	r6, r6, r3, r4
   b9764:	f04f 0c01 	mov.w	ip, #1
   b9768:	f815 4b01 	ldrb.w	r4, [r5], #1
   b976c:	e7e8      	b.n	b9740 <_strtol_l.constprop.0+0x6c>
   b976e:	2c2b      	cmp	r4, #43	; 0x2b
   b9770:	bf04      	itt	eq
   b9772:	782c      	ldrbeq	r4, [r5, #0]
   b9774:	1cb5      	addeq	r5, r6, #2
   b9776:	e7ca      	b.n	b970e <_strtol_l.constprop.0+0x3a>
   b9778:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b977c:	f1be 0f19 	cmp.w	lr, #25
   b9780:	d801      	bhi.n	b9786 <_strtol_l.constprop.0+0xb2>
   b9782:	3c37      	subs	r4, #55	; 0x37
   b9784:	e7e2      	b.n	b974c <_strtol_l.constprop.0+0x78>
   b9786:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b978a:	f1be 0f19 	cmp.w	lr, #25
   b978e:	d804      	bhi.n	b979a <_strtol_l.constprop.0+0xc6>
   b9790:	3c57      	subs	r4, #87	; 0x57
   b9792:	e7db      	b.n	b974c <_strtol_l.constprop.0+0x78>
   b9794:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9798:	e7e6      	b.n	b9768 <_strtol_l.constprop.0+0x94>
   b979a:	f1bc 0f00 	cmp.w	ip, #0
   b979e:	da05      	bge.n	b97ac <_strtol_l.constprop.0+0xd8>
   b97a0:	2322      	movs	r3, #34	; 0x22
   b97a2:	6003      	str	r3, [r0, #0]
   b97a4:	4646      	mov	r6, r8
   b97a6:	b942      	cbnz	r2, b97ba <_strtol_l.constprop.0+0xe6>
   b97a8:	4630      	mov	r0, r6
   b97aa:	e79e      	b.n	b96ea <_strtol_l.constprop.0+0x16>
   b97ac:	b107      	cbz	r7, b97b0 <_strtol_l.constprop.0+0xdc>
   b97ae:	4276      	negs	r6, r6
   b97b0:	2a00      	cmp	r2, #0
   b97b2:	d0f9      	beq.n	b97a8 <_strtol_l.constprop.0+0xd4>
   b97b4:	f1bc 0f00 	cmp.w	ip, #0
   b97b8:	d000      	beq.n	b97bc <_strtol_l.constprop.0+0xe8>
   b97ba:	1e69      	subs	r1, r5, #1
   b97bc:	6011      	str	r1, [r2, #0]
   b97be:	e7f3      	b.n	b97a8 <_strtol_l.constprop.0+0xd4>
   b97c0:	2430      	movs	r4, #48	; 0x30
   b97c2:	2b00      	cmp	r3, #0
   b97c4:	d1b1      	bne.n	b972a <_strtol_l.constprop.0+0x56>
   b97c6:	2308      	movs	r3, #8
   b97c8:	e7af      	b.n	b972a <_strtol_l.constprop.0+0x56>
   b97ca:	2c30      	cmp	r4, #48	; 0x30
   b97cc:	d0a5      	beq.n	b971a <_strtol_l.constprop.0+0x46>
   b97ce:	230a      	movs	r3, #10
   b97d0:	e7ab      	b.n	b972a <_strtol_l.constprop.0+0x56>
   b97d2:	bf00      	nop
   b97d4:	000ba477 	.word	0x000ba477

000b97d8 <strtol>:
   b97d8:	4613      	mov	r3, r2
   b97da:	460a      	mov	r2, r1
   b97dc:	4601      	mov	r1, r0
   b97de:	4802      	ldr	r0, [pc, #8]	; (b97e8 <strtol+0x10>)
   b97e0:	6800      	ldr	r0, [r0, #0]
   b97e2:	f7ff bf77 	b.w	b96d4 <_strtol_l.constprop.0>
   b97e6:	bf00      	nop
   b97e8:	2003d9f0 	.word	0x2003d9f0

000b97ec <dynalib_user>:
   b97ec:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   b97fc:	00000000 63736964 656e6e6f 64657463     ....disconnected
   b980c:	72430a00 6e656465 6c616974 72612073     ..Credentials ar
   b981c:	75632065 6e657272 20796c74 726f7473     e currently stor
   b982c:	66206465 0a3a726f 0a2c005b 450a5d00     ed for:.[.,..].E
   b983c:	7265746e 74656e20 6b726f77 49535320     nter network SSI
   b984c:	62282044 6b6e616c 206f7420 70696b73     D (blank to skip
   b985c:	6327202c 7261656c 6f742027 73657220     , 'clear' to res
   b986c:	63207465 65646572 6169746e 3a29736c     et credentials):
   b987c:	430a0020 65727275 4420746e 20444953      ..Current DSID 
   b988c:	5b207369 450a5d00 7265746e 76656420     is [.].Enter dev
   b989c:	20656369 44495344 6c622820 206b6e61     ice DSID (blank 
   b98ac:	73206f74 2970696b 6300203a 7261656c     to skip): .clear
   b98bc:	6e450a00 20726574 7774656e 206b726f     ..Enter network 
   b98cc:	73736170 64726f77 0a00203a 6572430a     password: ...Cre
   b98dc:	746e6564 736c6169 74657320 74697720     dentials set wit
   b98ec:	73732068 203a6469 61700a00 6f777373     h ssid: ..passwo
   b98fc:	203a6472 000a0a00 746e450a 27207265     rd: .....Enter '
   b990c:	74736574 6f742027 73657420 72632074     test' to test cr
   b991c:	6e656465 6c616974 62282073 6b6e616c     edentials (blank
   b992c:	206f7420 70696b73 00203a29 64697364      to skip): .dsid
   b993c:	746e6520 64657265 69736400 00203a64      entered.dsid: .
   b994c:	7275430a 746e6572 6c617620 66206575     .Current value f
   b995c:	6420726f 20617461 6c6c6f63 69746365     or data collecti
   b996c:	69206e6f 7265746e 206c6176 5b207369     on interval is [
   b997c:	450a5d00 7265746e 6d697420 65622065     .].Enter time be
   b998c:	65657774 6164206e 63206174 656c6c6f     tween data colle
   b999c:	6f697463 7361206e 206e6120 65746e69     ction as an inte
   b99ac:	20726567 6d206e69 696c6c69 6f636573     ger in milliseco
   b99bc:	2073646e 616c6228 74206b6e 6b73206f     nds (blank to sk
   b99cc:	3a297069 430a0020 65727275 7620746e     ip): ..Current v
   b99dc:	65756c61 726f6620 46695720 6f632069     alue for WiFi co
   b99ec:	63656e6e 6e6f6974 746e6920 61767265     nnection interva
   b99fc:	7369206c 5d005b20 746e450a 74207265     l is [.].Enter t
   b9a0c:	20656d69 77746562 206e6565 69466957     ime between WiFi
   b9a1c:	6e6f6320 7463656e 736e6f69 20736120      connections as 
   b9a2c:	69206e61 6765746e 69207265 6573206e     an integer in se
   b9a3c:	646e6f63 62282073 6b6e616c 206f7420     conds (blank to 
   b9a4c:	70696b73 00203a29 746e450a 27207265     skip): ..Enter '
   b9a5c:	2761746f 206f7420 74696177 726f6620     ota' to wait for
   b9a6c:	41544f20 64707520 20657461 616c6228      OTA update (bla
   b9a7c:	74206b6e 6b73206f 3a297069 746f0020     nk to skip): .ot
   b9a8c:	69570061 66206946 656c6961 6f742064     a.WiFi failed to
   b9a9c:	6e6f6320 7463656e 6b73202c 69707069      connect, skippi
   b9aac:	7420676e 20656d69 636e7973 6e6f7268     ng time synchron
   b9abc:	74617a69 006e6f69 69466957 6e6f6320     ization.WiFi con
   b9acc:	7463656e 202c6465 69617761 676e6974     nected, awaiting
   b9adc:	64707520 00657461 6177410a 6e697469      update..Awaitin
   b9aec:	544f2067 70752041 65746164 67696400     g OTA update.dig
   b9afc:	756c6769 6f692e65 46002f00 656c6961     iglue.io./.Faile
   b9b0c:	6f742064 696e6920 6c616974 20657a69     d to initialize 
   b9b1c:	3353494c 72004844 726f6365 676e6964     LIS3DH.recording
   b9b2c:	65746e49 6c617672 6925203a 70657200     Interval: %i.rep
   b9b3c:	6974726f 6e49676e 76726574 203a6c61     ortingInterval: 
   b9b4c:	57006925 20694669 6e6e6f63 65746365     %i.WiFi connecte
   b9b5c:	73202c64 69636e79 7420676e 00656d69     d, syncing time.
   b9b6c:	72727543 20746e65 656d6974 3a736920     Current time is:
   b9b7c:	00732520 57454c42 00544941 20454c42      %s.BLEWAIT.BLE 
   b9b8c:	6e6e6f63 65746365 4c420064 6f6e2045     connected.BLE no
   b9b9c:	6f632074 63656e6e 2c646574 6e6f6320     t connected, con
   b9bac:	756e6974 20676e69 68746977 6f747320     tinuing with sto
   b9bbc:	20646572 74746573 73676e69 6c62002e     red settings..bl
   b9bcc:	69615765 726f4674 666e6f43 7b006769     eWaitForConfig.{
   b9bdc:	69736422 003a2264 7622202c 65756c61     "dsid":., "value
   b9bec:	2c003a22 69742220 7473656d 22706d61     ":., "timestamp"
   b9bfc:	2c7d003a 46695700 61662069 64656c69     :.},.WiFi failed
   b9c0c:	206f7420 6e6e6f63 2c746365 74616420      to connect, dat
   b9c1c:	6f6e2061 65722074 74726f70 57006465     a not reported.W
   b9c2c:	20694669 6e6e6f63 65746365 72202c64     iFi connected, r
   b9c3c:	726f7065 676e6974 74616420 227b0061     eporting data.{"
   b9c4c:	61746164 005b3a22 50007d5d 0054534f     data":[.]}.POST.
   b9c5c:	74617453 203a7375 71655200 79646f42     Status: .ReqBody
   b9c6c:	3600203a 30303445 2d313030 33413542     : .6E400001-B5A3
   b9c7c:	3933462d 30452d33 452d3941 32453035     -F393-E0A9-E50E2
   b9c8c:	43434434 00453941 30344536 32303030     4DCCA9E.6E400002
   b9c9c:	4135422d 33462d33 452d3339 2d394130     -B5A3-F393-E0A9-
   b9cac:	45303545 43443432 45394143 34453600     E50E24DCCA9E.6E4
   b9cbc:	30303030 35422d33 462d3341 2d333933     00003-B5A3-F393-
   b9ccc:	39413045 3035452d 44343245 39414343     E0A9-E50E24DCCA9
   b9cdc:	78740045 00787200 65636341 61007470     E.tx.rx.Accept.a
   b9cec:	696c7070 69746163 6a2f6e6f 006e6f73     pplication/json.
   b9cfc:	746e6f43 2d746e65 65707954 00000000     Content-Type....

000b9d0c <_ZTV15Adafruit_LIS3DH>:
	...
   b9d14:	000b40b3 000b4e99 000b50d9 000b54b5     .@...N...P...T..
   b9d24:	000b50dd 70747448 65696c43 093e746e     .P..HttpClient>.
   b9d34:	6e6e6f43 69746365 7420676e 00203a6f     Connecting to: .
   b9d44:	70747448 65696c43 093e746e 6e6e6f43     HttpClient>.Conn
   b9d54:	69746365 7420676e 5049206f 2000203a     ecting to IP: . 
   b9d64:	50545448 302e312f 48000a0d 43707474     HTTP/1.0...HttpC
   b9d74:	6e65696c 53093e74 74726174 20666f20     lient>.Start of 
   b9d84:	50545448 71655220 74736575 6c63002e     HTTP Request..cl
   b9d94:	0065736f 6e6e6f43 69746365 48006e6f     ose.Connection.H
   b9da4:	43707474 6e65696c 43093e74 656e6e6f     ttpClient>.Conne
   b9db4:	6f697463 6166206e 64656c69 4f48002e     ction failed..HO
   b9dc4:	43005453 65746e6f 4c2d746e 74676e65     ST.Content-Lengt
   b9dd4:	74480068 6c437074 746e6569 6e45093e     h.HttpClient>.En
   b9de4:	666f2064 54544820 65522050 73657571     d of HTTP Reques
   b9df4:	0d002e74 7474480a 696c4370 3e746e65     t....HttpClient>
   b9e04:	63655209 69766965 5420676e 74205043     .Receiving TCP t
   b9e14:	736e6172 69746361 6f206e6f 20002066     ransaction of . 
   b9e24:	65747962 48002e73 43707474 6e65696c     bytes..HttpClien
   b9e34:	45093e74 726f7272 6552203a 6e6f7073     t>.Error: Respon
   b9e44:	62206573 2079646f 6772616c 74207265     se body larger t
   b9e54:	206e6168 66667562 002e7265 74480a0d     han buffer....Ht
   b9e64:	6c437074 746e6569 6e45093e 666f2064     tpClient>.End of
   b9e74:	50435420 61727420 6361736e 6e6f6974      TCP transaction
   b9e84:	0a0d002e 70747448 65696c43 093e746e     ....HttpClient>.
   b9e94:	6f727245 54203a72 6f656d69 77207475     Error: Timeout w
   b9ea4:	656c6968 61657220 676e6964 73657220     hile reading res
   b9eb4:	736e6f70 0d002e65 7474480a 696c4370     ponse....HttpCli
   b9ec4:	3e746e65 646e4509 20666f20 50545448     ent>.End of HTTP
   b9ed4:	73655220 736e6f70 00282065 2e29736d      Response (.ms).
   b9ee4:	74744800 696c4370 3e746e65 61745309     .HttpClient>.Sta
   b9ef4:	20737574 65646f43 0d00203a 000a0d0a     tus Code: ......
   b9f04:	70747448 65696c43 093e746e 6f727245     HttpClient>.Erro
   b9f14:	43203a72 74276e61 6e696620 54482064     r: Can't find HT
   b9f24:	72205054 6f707365 2065736e 79646f62     TP response body
   b9f34:	6977002e 676e6972 656c622e 61745300     ..wiring.ble.Sta
   b9f44:	64207472 6f637369 69726576 7320676e     rt discovering s
   b9f54:	69767265 2e736563 65655000 65642072     ervices..Peer de
   b9f64:	65636976 20736920 7373696d 21676e69     vice is missing!
   b9f74:	69614600 2064656c 61206f74 6e657070     .Failed to appen
   b9f84:	65702064 43207265 72746e65 64206c61     d peer Central d
   b9f94:	63697665 43002e65 656e6e6f 64657463     evice..Connected
   b9fa4:	20796220 746e6543 206c6172 69766564      by Central devi
   b9fb4:	002e6563 63736944 656e6e6f 64657463     ce..Disconnected
   b9fc4:	20796220 6f6d6572 64206574 63697665      by remote devic
   b9fd4:	44002e65 696c7075 65746163 68632064     e..Duplicated ch
   b9fe4:	63617261 69726574 63697473 6e616320     aracteristic can
   b9ff4:	20746f6e 61206562 64656464 6146002e     not be added..Fa
   ba004:	64656c69 206f7420 65707061 6c20646e     iled to append l
   ba014:	6c61636f 61686320 74636172 73697265     ocal characteris
   ba024:	2e636974 00000000                       tic.....

000ba02c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba034:	000b6205 000b6269 000b642f 000b6293     .b..ib../d...b..
   ba044:	000b6209                                .b..

000ba048 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba050:	000b6201 000b6277 000b6203 000b6299     .b..wb...b...b..
   ba060:	000b6229                                )b..

000ba064 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba06c:	000b61ff 000b6285 000b6c91 000b629f     .a...b...l...b..
   ba07c:	000b6249                                Ib..

000ba080 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   ba08c:	34fb0000 00805f9b 10008000 00000000     ...4._..........
	...

000ba09e <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   ba09e:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000ba0ae <_ZN8particle7BleUuid9BASE_UUIDE>:
   ba0ae:	5f9b34fb 80000080 00001000 00000000     .4._............
	...

000ba0c0 <_ZTVN5spark13EthernetClassE>:
	...
   ba0c8:	000b76ef 000b76e5 000b76db 000b76d1     .v...v...v...v..
   ba0d8:	000b76c5 000b76b9 000b7975 000b797d     .v...v..uy..}y..
   ba0e8:	000b76ad 000b76a5 000b769b 000b7691     .v...v...v...v..
   ba0f8:	000b79ad                                .y..

000ba0fc <_ZTV7TwoWire>:
	...
   ba104:	000b770d 000b7757 000b772f 000b770f     .w..Ww../w...w..
   ba114:	000b7737 000b773f 000b7747 000b774f     7w..?w..Gw..Ow..

000ba124 <_ZTV9IPAddress>:
	...
   ba12c:	000b7819 000b7809 000b780b 00707061     .x...x...x..app.

000ba13c <_ZTVN5spark12NetworkClassE>:
	...
   ba144:	000b7935 000b793f 000b7949 000b7953     5y..?y..Iy..Sy..
   ba154:	000b795d 000b7969 000b7975 000b797d     ]y..iy..uy..}y..
   ba164:	000b7985 000b7991 000b7999 000b79a3     .y...y...y...y..
   ba174:	000b79ad                                .y..

000ba178 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   ba178:	18100800 38302820 69726977 7200676e     .... (08wiring.r
   ba188:	20766365 6f727265 203d2072 00006425     ecv error = %d..

000ba198 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba1a0:	000b80f5 000b8119 000b864b 000b8127     ........K...'...
   ba1b0:	000b80f9                                ....

000ba1b4 <_ZTV9TCPClient>:
	...
   ba1bc:	000b81a5 000b81d9 000b8071 000b808b     ........q.......
   ba1cc:	000b84e1 000b80b5 000b8357 000b80e9     ........W.......
   ba1dc:	000b83e9 000b8229 000b8385 000b8595     ....)...........
   ba1ec:	000b8325 000b80eb 000b809d 000b812d     %...........-...
   ba1fc:	000b8209 252d5925 64252d6d 3a482554     ....%Y-%m-%dT%H:
   ba20c:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000ba21c <_ZTV11USARTSerial>:
	...
   ba224:	000b8755 000b87c1 000b8799 000b7a99     U............z..
   ba234:	000b8769 000b8785 000b8777 000b8793     i.......w.......
   ba244:	000b8757 000b875b                       W...[...

000ba24c <_ZTV9USBSerial>:
	...
   ba254:	000b8855 000b88bd 000b8893 000b7a99     U............z..
   ba264:	000b8885 000b8857 000b8867 000b88b7     ....W...g.......
   ba274:	000b8877 000b8851                       w...Q...

000ba27c <_ZTVN5spark9WiFiClassE>:
	...
   ba284:	000b4215 000b89c1 000b89b7 000b421f     .B...........B..
   ba294:	000b41fd 000b4209 000b7975 000b797d     .A...B..uy..}y..
   ba2a4:	000b89ab 000b89a3 000b8999 000b898f     ................
   ba2b4:	000b79ad                                .y..

000ba2b8 <_ZSt7nothrow>:
	...

000ba2b9 <_ZTSSt19_Sp_make_shared_tag>:
   ba2b9:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   ba2c9:	5f646572 00676174                        red_tag....

000ba2d4 <_ZTISt19_Sp_make_shared_tag>:
   ba2d4:	000ba314 000ba2b9                       ........

000ba2dc <_ZTIN10__cxxabiv117__class_type_infoE>:
   ba2dc:	000ba374 000ba2e8 000ba398              t...........

000ba2e8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   ba2e8:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   ba2f8:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   ba308:	00000045                                E...

000ba30c <_ZTVN10__cxxabiv117__class_type_infoE>:
   ba30c:	00000000 000ba2dc 000b8e61 000b8e75     ........a...u...
   ba31c:	000b9009 000b9009 000b8edf 000b8e21     ............!...
   ba32c:	000b8ec7 000b8e89 000b8e53              ........S...

000ba338 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   ba338:	000ba374 000ba344 000ba2dc              t...D.......

000ba344 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   ba344:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   ba354:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   ba364:	456f666e 00000000                       nfoE....

000ba36c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   ba36c:	00000000 000ba338 000b8f09 000b8f1d     ....8...........
   ba37c:	000b9009 000b9009 000b8edf 000b8e21     ............!...
   ba38c:	000b8fdd 000b8f69 000b8f31              ....i...1...

000ba398 <_ZTISt9type_info>:
   ba398:	000ba314 000ba3a0                       ........

000ba3a0 <_ZTSSt9type_info>:
   ba3a0:	74397453 5f657079 6f666e69 332e2500     St9type_info.%.3
   ba3b0:	2e252073 33257333 2e252064 253a6432     s %.3s%3d %.2d:%
   ba3c0:	3a64322e 64322e25 0a642520               .2d:%.2d %d..

000ba3cd <day_name.1>:
   ba3cd:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   ba3dd:	61536972                                 riSat

000ba3e2 <mon_name.0>:
   ba3e2:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   ba3f2:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   ba402:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   ba412:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   ba422:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   ba432:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   ba442:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   ba452:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   ba462:	62696c2f 74732f63 62696c64 6e61722f     /libc/stdlib/ran
   ba472:	00632e64                                d.c.

000ba476 <_ctype_>:
   ba476:	20202000 20202020 28282020 20282828     .         ((((( 
   ba486:	20202020 20202020 20202020 20202020                     
   ba496:	10108820 10101010 10101010 10101010      ...............
   ba4a6:	04040410 04040404 10040404 10101010     ................
   ba4b6:	41411010 41414141 01010101 01010101     ..AAAAAA........
   ba4c6:	01010101 01010101 01010101 10101010     ................
   ba4d6:	42421010 42424242 02020202 02020202     ..BBBBBB........
   ba4e6:	02020202 02020202 02020202 10101010     ................
   ba4f6:	00000020 00000000 00000000 00000000      ...............
	...

000ba577 <link_const_variable_data_end>:
	...

000ba578 <link_constructors_location>:
   ba578:	000b4ea9 	.word	0x000b4ea9
   ba57c:	000b7669 	.word	0x000b7669
   ba580:	000b76f9 	.word	0x000b76f9
   ba584:	000b7925 	.word	0x000b7925
   ba588:	000b7a85 	.word	0x000b7a85
   ba58c:	000b7bd9 	.word	0x000b7bd9
   ba590:	000b8035 	.word	0x000b8035
   ba594:	000b8741 	.word	0x000b8741
   ba598:	000b89f1 	.word	0x000b89f1

000ba59c <link_constructors_end>:
   ba59c:	00000000 	.word	0x00000000
