
/Users/trylaarsdam/Documents/dev/motionalysis/target/3.2.0/argon/motionalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007990  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000bb9b0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000088  20031b7c  000bb9b4  00011b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000cbec  20031c04  20031c04  00021c04  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000bba3c  000bba3c  0001ba3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000bba64  000bba64  0001ba64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0012c505  00000000  00000000  0001ba68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00014419  00000000  00000000  00147f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0003b746  00000000  00000000  0015c386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000033c0  00000000  00000000  00197acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 0000b758  00000000  00000000  0019ae8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003a296  00000000  00000000  001a65e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00044645  00000000  00000000  001e087a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012cb42  00000000  00000000  00224ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  000090e4  00000000  00000000  00351a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f006 fadf 	bl	ba5f4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f006 fb01 	bl	ba644 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	20031b7c 	.word	0x20031b7c
   b404c:	000bb9b4 	.word	0x000bb9b4
   b4050:	20031c04 	.word	0x20031c04
   b4054:	20031c04 	.word	0x20031c04
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f005 fbc5 	bl	b97f0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bb980 	.word	0x000bb980
   b4080:	000bb9a4 	.word	0x000bb9a4

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 ba8a 	b.w	b459c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fa41 	bl	b5510 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f005 bb65 	b.w	b9760 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 bdeb 	b.w	b6c70 <malloc>

000b409a <_Znaj>:
   b409a:	f002 bde9 	b.w	b6c70 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 bdef 	b.w	b6c80 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   b40b2:	b510      	push	{r4, lr}
   b40b4:	4604      	mov	r4, r0

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   b40b6:	b93a      	cbnz	r2, b40c8 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b40b8:	6803      	ldr	r3, [r0, #0]
   b40ba:	689b      	ldr	r3, [r3, #8]
   b40bc:	4798      	blx	r3
        n += println();
   b40be:	4620      	mov	r0, r4
    }
   b40c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b40c4:	f004 bae9 	b.w	b869a <_ZN5Print7printlnEv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40c8:	b2d2      	uxtb	r2, r2
   b40ca:	f004 fafc 	bl	b86c6 <_ZN5Print11printNumberEmh>
   b40ce:	e7f6      	b.n	b40be <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0xc>

000b40d0 <_ZN9USBSerial4lockEv.isra.0>:
#else
		return true;
#endif
	}

	void lock()
   b40d0:	b508      	push	{r3, lr}
		return os_mutex_recursive_t(system_internal(2, nullptr));
   b40d2:	2100      	movs	r1, #0
   b40d4:	2002      	movs	r0, #2
   b40d6:	f002 fcdb 	bl	b6a90 <system_internal>
	{
#if PLATFORM_THREADING
		os_mutex_recursive_lock(get_mutex());
#endif
	}
   b40da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		os_mutex_recursive_lock(get_mutex());
   b40de:	f002 ba97 	b.w	b6610 <os_mutex_recursive_lock>

000b40e2 <_ZN11SystemClass14updatesEnabledEv.isra.0>:

    inline uint8_t updatesPending() {
        return get_flag(SYSTEM_FLAG_OTA_UPDATE_PENDING) != 0;
    }

    inline uint8_t updatesEnabled() {
   b40e2:	b507      	push	{r0, r1, r2, lr}

private:
    SystemSleepResult systemSleepResult_;

    static inline uint8_t get_flag(system_flag_t flag) {
        uint8_t value = 0;
   b40e4:	2200      	movs	r2, #0
        system_get_flag(flag, &value, nullptr);
   b40e6:	f10d 0107 	add.w	r1, sp, #7
   b40ea:	2001      	movs	r0, #1
        uint8_t value = 0;
   b40ec:	f88d 2007 	strb.w	r2, [sp, #7]
        system_get_flag(flag, &value, nullptr);
   b40f0:	f002 fcde 	bl	b6ab0 <system_get_flag>
    }
   b40f4:	b003      	add	sp, #12
   b40f6:	f85d fb04 	ldr.w	pc, [sp], #4

000b40fa <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40fa:	b40e      	push	{r1, r2, r3}
   b40fc:	b503      	push	{r0, r1, lr}
   b40fe:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   b4100:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4102:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4106:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4108:	f004 fafb 	bl	b8702 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b410c:	b002      	add	sp, #8
   b410e:	f85d eb04 	ldr.w	lr, [sp], #4
   b4112:	b003      	add	sp, #12
   b4114:	4770      	bx	lr

000b4116 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4116:	2300      	movs	r3, #0
   b4118:	6840      	ldr	r0, [r0, #4]
   b411a:	461a      	mov	r2, r3
   b411c:	4619      	mov	r1, r3
   b411e:	f002 bd4f 	b.w	b6bc0 <network_on>

000b4122 <_ZN5spark9WiFiClass3offEv>:
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b4122:	2300      	movs	r3, #0
   b4124:	6840      	ldr	r0, [r0, #4]
   b4126:	461a      	mov	r2, r3
   b4128:	4619      	mov	r1, r3
   b412a:	f002 bd51 	b.w	b6bd0 <network_off>

000b412e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   b412e:	2300      	movs	r3, #0
   b4130:	6840      	ldr	r0, [r0, #4]
   b4132:	461a      	mov	r2, r3
   b4134:	f002 bd24 	b.w	b6b80 <network_connect>

000b4138 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4138:	2200      	movs	r2, #0
   b413a:	6840      	ldr	r0, [r0, #4]
   b413c:	4611      	mov	r1, r2
   b413e:	f002 bd37 	b.w	b6bb0 <network_ready>
	...

000b4144 <_ZN14http_request_tC1Ev>:
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b4144:	b510      	push	{r4, lr}
   b4146:	490a      	ldr	r1, [pc, #40]	; (b4170 <_ZN14http_request_tC1Ev+0x2c>)
   b4148:	4604      	mov	r4, r0
   b414a:	f004 fbf6 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
   b414e:	f104 0010 	add.w	r0, r4, #16
   b4152:	f004 f95f 	bl	b8414 <_ZN9IPAddressC1Ev>
   b4156:	4906      	ldr	r1, [pc, #24]	; (b4170 <_ZN14http_request_tC1Ev+0x2c>)
   b4158:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b415c:	f004 fbed 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
   b4160:	4903      	ldr	r1, [pc, #12]	; (b4170 <_ZN14http_request_tC1Ev+0x2c>)
   b4162:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b4166:	f004 fbe8 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
   b416a:	4620      	mov	r0, r4
   b416c:	bd10      	pop	{r4, pc}
   b416e:	bf00      	nop
   b4170:	000bab99 	.word	0x000bab99

000b4174 <_Z16HTTPRequestSetupv>:

int networkCount;
WiFiAccessPoint networks[5];
String networkBuffer;

void HTTPRequestSetup() {
   b4174:	b570      	push	{r4, r5, r6, lr}
  request.hostname = kHTTPHostname;
   b4176:	4c0d      	ldr	r4, [pc, #52]	; (b41ac <_Z16HTTPRequestSetupv+0x38>)
   b4178:	4e0d      	ldr	r6, [pc, #52]	; (b41b0 <_Z16HTTPRequestSetupv+0x3c>)
  request.port = kHTTPRequestPort;
   b417a:	2550      	movs	r5, #80	; 0x50
  request.hostname = kHTTPHostname;
   b417c:	4631      	mov	r1, r6
   b417e:	4620      	mov	r0, r4
   b4180:	f004 fc09 	bl	b8996 <_ZN6StringaSEPKc>
  request.port = kHTTPRequestPort;
   b4184:	63a5      	str	r5, [r4, #56]	; 0x38
  request.path = "/";
   b4186:	f104 0028 	add.w	r0, r4, #40	; 0x28

  timerequest.hostname = kHTTPHostname;
   b418a:	4c0a      	ldr	r4, [pc, #40]	; (b41b4 <_Z16HTTPRequestSetupv+0x40>)
  request.path = "/";
   b418c:	490a      	ldr	r1, [pc, #40]	; (b41b8 <_Z16HTTPRequestSetupv+0x44>)
   b418e:	f004 fc02 	bl	b8996 <_ZN6StringaSEPKc>
  timerequest.hostname = kHTTPHostname;
   b4192:	4631      	mov	r1, r6
   b4194:	4620      	mov	r0, r4
   b4196:	f004 fbfe 	bl	b8996 <_ZN6StringaSEPKc>
  timerequest.port = kHTTPRequestPort;
   b419a:	63a5      	str	r5, [r4, #56]	; 0x38
  timerequest.path = "/time";
   b419c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b41a0:	4906      	ldr	r1, [pc, #24]	; (b41bc <_Z16HTTPRequestSetupv+0x48>)
}
   b41a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  timerequest.path = "/time";
   b41a6:	f004 bbf6 	b.w	b8996 <_ZN6StringaSEPKc>
   b41aa:	bf00      	nop
   b41ac:	20032218 	.word	0x20032218
   b41b0:	000ba948 	.word	0x000ba948
   b41b4:	2003e61c 	.word	0x2003e61c
   b41b8:	000ba954 	.word	0x000ba954
   b41bc:	000ba956 	.word	0x000ba956

000b41c0 <_Z13writeRegisterhh>:
#include "WatchDog_WCL.h"

Adafruit_LIS3DH lis3dh = Adafruit_LIS3DH();
WatchDog wd = WatchDog();

void writeRegister(byte reg, byte data) {
   b41c0:	b538      	push	{r3, r4, r5, lr}
   b41c2:	460c      	mov	r4, r1
   b41c4:	4605      	mov	r5, r0
  Wire.beginTransmission(kLis3dhAddress);
   b41c6:	f005 fbef 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b41ca:	2118      	movs	r1, #24
   b41cc:	f004 f8de 	bl	b838c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   b41d0:	f005 fbea 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b41d4:	6803      	ldr	r3, [r0, #0]
   b41d6:	4629      	mov	r1, r5
   b41d8:	689b      	ldr	r3, [r3, #8]
   b41da:	4798      	blx	r3
  Wire.write(data);
   b41dc:	f005 fbe4 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b41e0:	6803      	ldr	r3, [r0, #0]
   b41e2:	4621      	mov	r1, r4
   b41e4:	689b      	ldr	r3, [r3, #8]
   b41e6:	4798      	blx	r3
  Wire.endTransmission();
   b41e8:	f005 fbde 	bl	b99a8 <_Z19__fetch_global_Wirev>
}
   b41ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();
   b41f0:	f004 b8d3 	b.w	b839a <_ZN7TwoWire15endTransmissionEv>

000b41f4 <_Z12readRegisterh>:

unsigned int readRegister(byte reg) {
   b41f4:	b510      	push	{r4, lr}
   b41f6:	4604      	mov	r4, r0
  Wire.beginTransmission(kLis3dhAddress);
   b41f8:	f005 fbd6 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b41fc:	2118      	movs	r1, #24
   b41fe:	f004 f8c5 	bl	b838c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   b4202:	f005 fbd1 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b4206:	6803      	ldr	r3, [r0, #0]
   b4208:	4621      	mov	r1, r4
   b420a:	689b      	ldr	r3, [r3, #8]
   b420c:	4798      	blx	r3
  Wire.endTransmission();
   b420e:	f005 fbcb 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b4212:	f004 f8c2 	bl	b839a <_ZN7TwoWire15endTransmissionEv>
 
  Wire.requestFrom(kLis3dhAddress, 1);
   b4216:	f005 fbc7 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b421a:	2201      	movs	r2, #1
   b421c:	2118      	movs	r1, #24
   b421e:	f004 f8ae 	bl	b837e <_ZN7TwoWire11requestFromEhj>
  return Wire.read();
   b4222:	f005 fbc1 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b4226:	6803      	ldr	r3, [r0, #0]
}
   b4228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return Wire.read();
   b422c:	695b      	ldr	r3, [r3, #20]
   b422e:	4718      	bx	r3

000b4230 <_Z8init_ACCv>:

void init_ACC(void) {
   b4230:	b508      	push	{r3, lr}
  readRegister(0x21);
   b4232:	2021      	movs	r0, #33	; 0x21
   b4234:	f7ff ffde 	bl	b41f4 <_Z12readRegisterh>
  readRegister(0x26);
   b4238:	2026      	movs	r0, #38	; 0x26
   b423a:	f7ff ffdb 	bl	b41f4 <_Z12readRegisterh>
  readRegister(LIS3DH_REG_INT1SRC);
   b423e:	2031      	movs	r0, #49	; 0x31
   b4240:	f7ff ffd8 	bl	b41f4 <_Z12readRegisterh>
  writeRegister(0x20, 0x57); //Write A7h into CTRL_REG1;      // Turn on the sensor, enable X, Y, Z axes with ODR = 100Hz normal mode.
   b4244:	2157      	movs	r1, #87	; 0x57
   b4246:	2020      	movs	r0, #32
   b4248:	f7ff ffba 	bl	b41c0 <_Z13writeRegisterhh>
  writeRegister(0x21, 0x09); //Write 09h into CTRL_REG2;      // High-pass filter (HPF) enabled
   b424c:	2109      	movs	r1, #9
   b424e:	2021      	movs	r0, #33	; 0x21
   b4250:	f7ff ffb6 	bl	b41c0 <_Z13writeRegisterhh>
  writeRegister(0x22, 0x40); //Write 40h into CTRL_REG3;      // ACC AOI1 interrupt signal is routed to INT1 pin.
   b4254:	2140      	movs	r1, #64	; 0x40
   b4256:	2022      	movs	r0, #34	; 0x22
   b4258:	f7ff ffb2 	bl	b41c0 <_Z13writeRegisterhh>
  writeRegister(0x23, 0x00); //Write 00h into CTRL_REG4;      // Full Scale = +/-2 g
   b425c:	2100      	movs	r1, #0
   b425e:	2023      	movs	r0, #35	; 0x23
   b4260:	f7ff ffae 	bl	b41c0 <_Z13writeRegisterhh>
  writeRegister(0x24, 0x00); //Write 08h into CTRL_REG5;      // Default value is 00 for no latching. Interrupt signals on INT1 pin is not latched.
   b4264:	2100      	movs	r1, #0
   b4266:	2024      	movs	r0, #36	; 0x24
   b4268:	f7ff ffaa 	bl	b41c0 <_Z13writeRegisterhh>
                                                              //Users don’t need to read the INT1_SRC register to clear the interrupt signal.
  // configurations for wakeup and motionless detection
  writeRegister(0x32, 0x10); //Write 10h into INT1_THS;          // Threshold (THS) = 16LSBs * 15.625mg/LSB = 250mg.
   b426c:	2110      	movs	r1, #16
   b426e:	2032      	movs	r0, #50	; 0x32
   b4270:	f7ff ffa6 	bl	b41c0 <_Z13writeRegisterhh>
  writeRegister(0x33, 0x00); //Write 00h into INT1_DURATION;     // Duration = 1LSBs * (1/10Hz) = 0.1s.
   b4274:	2100      	movs	r1, #0
   b4276:	2033      	movs	r0, #51	; 0x33
   b4278:	f7ff ffa2 	bl	b41c0 <_Z13writeRegisterhh>
  // readRegister();  //Dummy read to force the HP filter to set reference acceleration/tilt value
  writeRegister(0x30, 0x2A); //Write 2Ah into INT1_CFG;          // Enable XLIE, YLIE, ZLIE interrupt generation, OR logic.
  //lis3dh.setRange(LIS3DH_RANGE_2_G);   // 2, 4, 8 or 16 G!
}
   b427c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  writeRegister(0x30, 0x2A); //Write 2Ah into INT1_CFG;          // Enable XLIE, YLIE, ZLIE interrupt generation, OR logic.
   b4280:	212a      	movs	r1, #42	; 0x2a
   b4282:	2030      	movs	r0, #48	; 0x30
   b4284:	f7ff bf9c 	b.w	b41c0 <_Z13writeRegisterhh>

000b4288 <_Z14initFromEEPROMv>:
  init_ACC();
  wd.runWhileSleeping(true);
  wd.initialize(kWatchDogTimeout);
}

void initFromEEPROM() {
   b4288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b428a:	4f34      	ldr	r7, [pc, #208]	; (b435c <_Z14initFromEEPROMv+0xd4>)
   b428c:	4c34      	ldr	r4, [pc, #208]	; (b4360 <_Z14initFromEEPROMv+0xd8>)
   b428e:	4e35      	ldr	r6, [pc, #212]	; (b4364 <_Z14initFromEEPROMv+0xdc>)
   b4290:	4d35      	ldr	r5, [pc, #212]	; (b4368 <_Z14initFromEEPROMv+0xe0>)
  EEPROM.get(kRecordingIntervalEEPROMAddress, recordingInterval);
   b4292:	f005 fb5b 	bl	b994c <_Z21__fetch_global_EEPROMv>
   b4296:	2204      	movs	r2, #4
   b4298:	4639      	mov	r1, r7
   b429a:	2064      	movs	r0, #100	; 0x64
   b429c:	f002 f9f0 	bl	b6680 <HAL_EEPROM_Get>
  EEPROM.get(kDsidEEPROMAddress, dsid);
   b42a0:	f005 fb54 	bl	b994c <_Z21__fetch_global_EEPROMv>
   b42a4:	4931      	ldr	r1, [pc, #196]	; (b436c <_Z14initFromEEPROMv+0xe4>)
   b42a6:	2204      	movs	r2, #4
   b42a8:	2000      	movs	r0, #0
   b42aa:	f002 f9e9 	bl	b6680 <HAL_EEPROM_Get>
  EEPROM.get(kReportingIntervalEEPROMAddress, reportingInterval);
   b42ae:	f005 fb4d 	bl	b994c <_Z21__fetch_global_EEPROMv>
   b42b2:	2204      	movs	r2, #4
   b42b4:	4621      	mov	r1, r4
   b42b6:	20c8      	movs	r0, #200	; 0xc8
   b42b8:	f002 f9e2 	bl	b6680 <HAL_EEPROM_Get>
  EEPROM.get(kSleepPauseDurationEEPROMAddress, sleepPauseDuration);
   b42bc:	f005 fb46 	bl	b994c <_Z21__fetch_global_EEPROMv>
   b42c0:	2204      	movs	r2, #4
   b42c2:	4631      	mov	r1, r6
   b42c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b42c8:	f002 f9da 	bl	b6680 <HAL_EEPROM_Get>
  EEPROM.get(kReportingModeEEPROMAddress, reportingMode);
   b42cc:	f005 fb3e 	bl	b994c <_Z21__fetch_global_EEPROMv>
   b42d0:	4629      	mov	r1, r5
   b42d2:	2204      	movs	r2, #4
   b42d4:	f44f 70b6 	mov.w	r0, #364	; 0x16c
   b42d8:	f002 f9d2 	bl	b6680 <HAL_EEPROM_Get>
  reportingInterval = reportingInterval / 1000; // convert to seconds from milliseconds 
   b42dc:	6823      	ldr	r3, [r4, #0]
   b42de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b42e2:	fb93 f3f2 	sdiv	r3, r3, r2
   b42e6:	6023      	str	r3, [r4, #0]
  Serial.printlnf("recordingInterval: %i", recordingInterval);
   b42e8:	f005 f910 	bl	b950c <_Z16_fetch_usbserialv>
   b42ec:	683a      	ldr	r2, [r7, #0]
   b42ee:	4920      	ldr	r1, [pc, #128]	; (b4370 <_Z14initFromEEPROMv+0xe8>)
   b42f0:	f7ff ff03 	bl	b40fa <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("reportingInterval: %i", reportingInterval);
   b42f4:	f005 f90a 	bl	b950c <_Z16_fetch_usbserialv>
   b42f8:	6822      	ldr	r2, [r4, #0]
   b42fa:	491e      	ldr	r1, [pc, #120]	; (b4374 <_Z14initFromEEPROMv+0xec>)
   b42fc:	f7ff fefd 	bl	b40fa <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("sleepPauseDuration: %i", sleepPauseDuration);
   b4300:	f005 f904 	bl	b950c <_Z16_fetch_usbserialv>
   b4304:	6832      	ldr	r2, [r6, #0]
   b4306:	491c      	ldr	r1, [pc, #112]	; (b4378 <_Z14initFromEEPROMv+0xf0>)
   b4308:	f7ff fef7 	bl	b40fa <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("reportingMode: %i", reportingMode);
   b430c:	f005 f8fe 	bl	b950c <_Z16_fetch_usbserialv>
   b4310:	682a      	ldr	r2, [r5, #0]
   b4312:	491a      	ldr	r1, [pc, #104]	; (b437c <_Z14initFromEEPROMv+0xf4>)
   b4314:	f7ff fef1 	bl	b40fa <_ZN5Print8printlnfEPKcz>
  if(recordingInterval == kEEPROMEmptyValue) { // if no value stored in EEPROM, set to default
   b4318:	683b      	ldr	r3, [r7, #0]
   b431a:	3301      	adds	r3, #1
    recordingInterval = kDefaultRecordingInterval; //default value
   b431c:	bf04      	itt	eq
   b431e:	f44f 73fa 	moveq.w	r3, #500	; 0x1f4
   b4322:	603b      	streq	r3, [r7, #0]
    // EEPROM.put(kRecordingIntervalEEPROMAddress, recordingInterval);
  }
  if(reportingInterval == kEEPROMEmptyValue) {
   b4324:	6823      	ldr	r3, [r4, #0]
   b4326:	3301      	adds	r3, #1
    reportingInterval = kDefaultReportingInterval; //default value
   b4328:	bf04      	itt	eq
   b432a:	230f      	moveq	r3, #15
   b432c:	6023      	streq	r3, [r4, #0]
  }
  if(sleepPauseDuration == kEEPROMEmptyValue) {
   b432e:	6833      	ldr	r3, [r6, #0]
   b4330:	3301      	adds	r3, #1
    sleepPauseDuration = kDefaultSleepPauseDuration + 1; //default value
   b4332:	bf04      	itt	eq
   b4334:	2306      	moveq	r3, #6
   b4336:	6033      	streq	r3, [r6, #0]
    // EEPROM.put(kSleepPauseDurationEEPROMAddress, sleepPauseDuration);
  }
  if(reportingMode == kEEPROMEmptyValue) {
   b4338:	682b      	ldr	r3, [r5, #0]
   b433a:	3301      	adds	r3, #1
    reportingMode = kDefaultReportingMode; //default value
   b433c:	bf04      	itt	eq
   b433e:	2300      	moveq	r3, #0
   b4340:	602b      	streq	r3, [r5, #0]
    // EEPROM.put(kReportingModeEEPROMAddress, reportingMode);
  }
  if(dsid == kEEPROMEmptyValue) {
   b4342:	4b0a      	ldr	r3, [pc, #40]	; (b436c <_Z14initFromEEPROMv+0xe4>)
   b4344:	681b      	ldr	r3, [r3, #0]
   b4346:	3301      	adds	r3, #1
   b4348:	d106      	bne.n	b4358 <_Z14initFromEEPROMv+0xd0>
    Serial.println("DSID not stored in EEPROM. BLE config required"); 
   b434a:	f005 f8df 	bl	b950c <_Z16_fetch_usbserialv>
    // dsid = 51509;
    // EEPROM.put(kDsidEEPROMAddress, dsid);
    //TODO notify user somehow
  }
   b434e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println("DSID not stored in EEPROM. BLE config required"); 
   b4352:	490b      	ldr	r1, [pc, #44]	; (b4380 <_Z14initFromEEPROMv+0xf8>)
   b4354:	f004 b9ad 	b.w	b86b2 <_ZN5Print7printlnEPKc>
   b4358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b435a:	bf00      	nop
   b435c:	2003220c 	.word	0x2003220c
   b4360:	20032210 	.word	0x20032210
   b4364:	200322a8 	.word	0x200322a8
   b4368:	20032214 	.word	0x20032214
   b436c:	20031c64 	.word	0x20031c64
   b4370:	000ba95c 	.word	0x000ba95c
   b4374:	000ba972 	.word	0x000ba972
   b4378:	000ba988 	.word	0x000ba988
   b437c:	000ba99f 	.word	0x000ba99f
   b4380:	000ba9b1 	.word	0x000ba9b1

000b4384 <_Z14sleepReadyTestv>:
#include "constants.hpp"
#include "Particle.h"
#include "initHardware.hpp"

bool sleepReadyTest(){
  if(sleepTimeoutCounter >= ((sleepPauseDuration * 1000) / recordingInterval)){
   b4384:	4b07      	ldr	r3, [pc, #28]	; (b43a4 <_Z14sleepReadyTestv+0x20>)
   b4386:	4a08      	ldr	r2, [pc, #32]	; (b43a8 <_Z14sleepReadyTestv+0x24>)
   b4388:	681b      	ldr	r3, [r3, #0]
   b438a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b438e:	4343      	muls	r3, r0
   b4390:	6810      	ldr	r0, [r2, #0]
   b4392:	4a06      	ldr	r2, [pc, #24]	; (b43ac <_Z14sleepReadyTestv+0x28>)
   b4394:	fb93 f3f0 	sdiv	r3, r3, r0
   b4398:	6810      	ldr	r0, [r2, #0]
    return true;
  }
  else {
    return false;
  }
}
   b439a:	4283      	cmp	r3, r0
   b439c:	bfcc      	ite	gt
   b439e:	2000      	movgt	r0, #0
   b43a0:	2001      	movle	r0, #1
   b43a2:	4770      	bx	lr
   b43a4:	200322a8 	.word	0x200322a8
   b43a8:	2003220c 	.word	0x2003220c
   b43ac:	200322ac 	.word	0x200322ac

000b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b43b0:	b510      	push	{r4, lr}
		return os_mutex_recursive_t(system_internal(2, nullptr));
   b43b2:	2100      	movs	r1, #0
   b43b4:	4604      	mov	r4, r0
   b43b6:	2002      	movs	r0, #2
   b43b8:	f002 fb6a 	bl	b6a90 <system_internal>

	void unlock()
	{
#if PLATFORM_THREADING
		os_mutex_recursive_unlock(get_mutex());
   b43bc:	f002 f930 	bl	b6620 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b43c0:	4620      	mov	r0, r4
   b43c2:	bd10      	pop	{r4, pc}

000b43c4 <_Z7getTimev>:

void getTime() {
   b43c4:	b530      	push	{r4, r5, lr}
  int wifiTimeout = kWiFiConnectionTimeout;
  WiFi.on();
   b43c6:	4832      	ldr	r0, [pc, #200]	; (b4490 <_Z7getTimev+0xcc>)
  WiFi.connect();
  while(!WiFi.ready()){
   b43c8:	4d31      	ldr	r5, [pc, #196]	; (b4490 <_Z7getTimev+0xcc>)
void getTime() {
   b43ca:	b089      	sub	sp, #36	; 0x24
  WiFi.on();
   b43cc:	f7ff fea3 	bl	b4116 <_ZN5spark9WiFiClass2onEv>
  WiFi.connect();
   b43d0:	482f      	ldr	r0, [pc, #188]	; (b4490 <_Z7getTimev+0xcc>)
   b43d2:	2100      	movs	r1, #0
   b43d4:	f7ff feab 	bl	b412e <_ZN5spark9WiFiClass7connectEj>
   b43d8:	24c8      	movs	r4, #200	; 0xc8
  while(!WiFi.ready()){
   b43da:	4628      	mov	r0, r5
   b43dc:	f7ff feac 	bl	b4138 <_ZN5spark9WiFiClass5readyEv>
   b43e0:	b920      	cbnz	r0, b43ec <_Z7getTimev+0x28>
    wifiTimeout = wifiTimeout - 100;
    delay(100);
   b43e2:	2064      	movs	r0, #100	; 0x64
   b43e4:	f002 fc84 	bl	b6cf0 <delay>
    if(wifiTimeout == 0) {
   b43e8:	3c01      	subs	r4, #1
   b43ea:	d1f6      	bne.n	b43da <_Z7getTimev+0x16>
      break;
    }
  }
  if(WiFi.ready() != true) {
   b43ec:	4828      	ldr	r0, [pc, #160]	; (b4490 <_Z7getTimev+0xcc>)
   b43ee:	f7ff fea3 	bl	b4138 <_ZN5spark9WiFiClass5readyEv>
   b43f2:	b988      	cbnz	r0, b4418 <_Z7getTimev+0x54>
    WITH_LOCK(Serial) {
   b43f4:	f005 f88a 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b43f8:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b43fa:	f7ff fe69 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WiFi failed to connect, time not synced");
   b43fe:	f005 f885 	bl	b950c <_Z16_fetch_usbserialv>
   b4402:	4924      	ldr	r1, [pc, #144]	; (b4494 <_Z7getTimev+0xd0>)
   b4404:	f004 f955 	bl	b86b2 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b4408:	a804      	add	r0, sp, #16
      Serial.println("WiFi connected, syncing time");
    }
    WITH_LOCK(Serial) {
      http.get(timerequest, timeresponse, timeheaders);
    }
    WITH_LOCK(Serial) {
   b440a:	f7ff ffd1 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      Serial.println("Time request returned: " + timeresponse.body);
      Time.setTime(timeresponse.body.toInt());
    }
  }

  WiFi.off();
   b440e:	4820      	ldr	r0, [pc, #128]	; (b4490 <_Z7getTimev+0xcc>)
   b4410:	f7ff fe87 	bl	b4122 <_ZN5spark9WiFiClass3offEv>
}
   b4414:	b009      	add	sp, #36	; 0x24
   b4416:	bd30      	pop	{r4, r5, pc}
    WITH_LOCK(Serial) {
   b4418:	f005 f878 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b441c:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b441e:	f7ff fe57 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WiFi connected, syncing time");
   b4422:	f005 f873 	bl	b950c <_Z16_fetch_usbserialv>
   b4426:	491c      	ldr	r1, [pc, #112]	; (b4498 <_Z7getTimev+0xd4>)
   b4428:	f004 f943 	bl	b86b2 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b442c:	a804      	add	r0, sp, #16
   b442e:	f7ff ffbf 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    WITH_LOCK(Serial) {
   b4432:	f005 f86b 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4436:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b4438:	f7ff fe4a 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b443c:	4b17      	ldr	r3, [pc, #92]	; (b449c <_Z7getTimev+0xd8>)
   b443e:	4a18      	ldr	r2, [pc, #96]	; (b44a0 <_Z7getTimev+0xdc>)
   b4440:	4918      	ldr	r1, [pc, #96]	; (b44a4 <_Z7getTimev+0xe0>)
   b4442:	4819      	ldr	r0, [pc, #100]	; (b44a8 <_Z7getTimev+0xe4>)
   b4444:	9300      	str	r3, [sp, #0]
   b4446:	4b19      	ldr	r3, [pc, #100]	; (b44ac <_Z7getTimev+0xe8>)
   b4448:	f001 fe38 	bl	b60bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
   b444c:	a804      	add	r0, sp, #16
   b444e:	f7ff ffaf 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    WITH_LOCK(Serial) {
   b4452:	f005 f85b 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4456:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   b4458:	f7ff fe3a 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("Time request returned: " + timeresponse.body);
   b445c:	f005 f856 	bl	b950c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4460:	4913      	ldr	r1, [pc, #76]	; (b44b0 <_Z7getTimev+0xec>)
   b4462:	4604      	mov	r4, r0
   b4464:	a804      	add	r0, sp, #16
   b4466:	f004 fa68 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
   b446a:	4912      	ldr	r1, [pc, #72]	; (b44b4 <_Z7getTimev+0xf0>)
   b446c:	a804      	add	r0, sp, #16
   b446e:	f004 fb03 	bl	b8a78 <_ZplRK15StringSumHelperRK6String>
   b4472:	6801      	ldr	r1, [r0, #0]
   b4474:	4620      	mov	r0, r4
   b4476:	f004 f91c 	bl	b86b2 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b447a:	a804      	add	r0, sp, #16
   b447c:	f004 fa12 	bl	b88a4 <_ZN6StringD1Ev>
      Time.setTime(timeresponse.body.toInt());
   b4480:	480c      	ldr	r0, [pc, #48]	; (b44b4 <_Z7getTimev+0xf0>)
   b4482:	f004 fb8e 	bl	b8ba2 <_ZNK6String5toIntEv>
   b4486:	17c1      	asrs	r1, r0, #31
   b4488:	f004 ff41 	bl	b930e <_ZN9TimeClass7setTimeEx>
    WITH_LOCK(Serial) {
   b448c:	a803      	add	r0, sp, #12
   b448e:	e7bc      	b.n	b440a <_Z7getTimev+0x46>
   b4490:	2003e710 	.word	0x2003e710
   b4494:	000ba9e0 	.word	0x000ba9e0
   b4498:	000baa08 	.word	0x000baa08
   b449c:	000baa25 	.word	0x000baa25
   b44a0:	2003e668 	.word	0x2003e668
   b44a4:	2003e61c 	.word	0x2003e61c
   b44a8:	20031c6c 	.word	0x20031c6c
   b44ac:	2003e614 	.word	0x2003e614
   b44b0:	000baa29 	.word	0x000baa29
   b44b4:	2003e66c 	.word	0x2003e66c

000b44b8 <_Z12initHardwarev>:
void initHardware() {
   b44b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
        return value;
    }

    static inline void set_flag(system_flag_t flag, uint8_t value) {
        system_set_flag(flag, value, nullptr);
   b44ba:	2200      	movs	r2, #0
   b44bc:	2101      	movs	r1, #1
   b44be:	2003      	movs	r0, #3
   b44c0:	f002 faee 	bl	b6aa0 <system_set_flag>
  pinMode(kBLEConnectedLED, OUTPUT); //BLE connected indicator 
   b44c4:	2101      	movs	r1, #1
   b44c6:	2007      	movs	r0, #7
   b44c8:	f005 fa02 	bl	b98d0 <pinMode>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b44cc:	4d2c      	ldr	r5, [pc, #176]	; (b4580 <_Z12initHardwarev+0xc8>)
  digitalWrite(kBLEConnectedLED, LOW);
   b44ce:	2100      	movs	r1, #0
   b44d0:	2007      	movs	r0, #7
   b44d2:	f005 fa0e 	bl	b98f2 <digitalWrite>
  pinMode(kLIS3DHInterruptPin, INPUT); //LIS3DH interrupt pin
   b44d6:	2100      	movs	r1, #0
   b44d8:	2002      	movs	r0, #2
   b44da:	f005 f9f9 	bl	b98d0 <pinMode>
   b44de:	7d2b      	ldrb	r3, [r5, #20]
   b44e0:	b19b      	cbz	r3, b450a <_Z12initHardwarev+0x52>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b44e2:	2302      	movs	r3, #2
   b44e4:	722b      	strb	r3, [r5, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b44e6:	682b      	ldr	r3, [r5, #0]
   b44e8:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b44ea:	b38b      	cbz	r3, b4550 <_Z12initHardwarev+0x98>
            if (start->type == type) {
   b44ec:	889a      	ldrh	r2, [r3, #4]
   b44ee:	2a01      	cmp	r2, #1
   b44f0:	d006      	beq.n	b4500 <_Z12initHardwarev+0x48>
            start = start->next;
   b44f2:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b44f4:	e7f9      	b.n	b44ea <_Z12initHardwarev+0x32>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b44f6:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b44f8:	b353      	cbz	r3, b4550 <_Z12initHardwarev+0x98>
            if (start->type == type) {
   b44fa:	889a      	ldrh	r2, [r3, #4]
   b44fc:	2a01      	cmp	r2, #1
   b44fe:	d1fa      	bne.n	b44f6 <_Z12initHardwarev+0x3e>
                if (gpioWakeup->pin == pin) {
   b4500:	899a      	ldrh	r2, [r3, #12]
   b4502:	2a02      	cmp	r2, #2
   b4504:	d1f7      	bne.n	b44f6 <_Z12initHardwarev+0x3e>
                    gpioWakeup->mode = mode;
   b4506:	2201      	movs	r2, #1
   b4508:	739a      	strb	r2, [r3, #14]
  if(!lis3dh.begin(kLis3dhAddress)) {
   b450a:	481e      	ldr	r0, [pc, #120]	; (b4584 <_Z12initHardwarev+0xcc>)
   b450c:	2118      	movs	r1, #24
   b450e:	f001 fd10 	bl	b5f32 <_ZN15Adafruit_LIS3DH5beginEh>
   b4512:	b980      	cbnz	r0, b4536 <_Z12initHardwarev+0x7e>
    delay(1000);
   b4514:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4518:	f002 fbea 	bl	b6cf0 <delay>
    WITH_LOCK(Serial) {
   b451c:	f004 fff6 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4520:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4522:	f7ff fdd5 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("Failed to initialize LIS3DH");
   b4526:	f004 fff1 	bl	b950c <_Z16_fetch_usbserialv>
   b452a:	4917      	ldr	r1, [pc, #92]	; (b4588 <_Z12initHardwarev+0xd0>)
   b452c:	f004 f8c1 	bl	b86b2 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b4530:	a801      	add	r0, sp, #4
   b4532:	f7ff ff3d 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  init_ACC();
   b4536:	f7ff fe7b 	bl	b4230 <_Z8init_ACCv>
  wd.runWhileSleeping(true);
   b453a:	4814      	ldr	r0, [pc, #80]	; (b458c <_Z12initHardwarev+0xd4>)
   b453c:	2101      	movs	r1, #1
   b453e:	f001 ffcf 	bl	b64e0 <_ZN8WatchDog16runWhileSleepingEb>
  wd.initialize(kWatchDogTimeout);
   b4542:	4913      	ldr	r1, [pc, #76]	; (b4590 <_Z12initHardwarev+0xd8>)
   b4544:	4811      	ldr	r0, [pc, #68]	; (b458c <_Z12initHardwarev+0xd4>)
}
   b4546:	b003      	add	sp, #12
   b4548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  wd.initialize(kWatchDogTimeout);
   b454c:	f001 bfa4 	b.w	b6498 <_ZN8WatchDog10initializeEm>
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4550:	4910      	ldr	r1, [pc, #64]	; (b4594 <_Z12initHardwarev+0xdc>)
   b4552:	2010      	movs	r0, #16
   b4554:	f005 fa8c 	bl	b9a70 <_ZnwjRKSt9nothrow_t>
   b4558:	4604      	mov	r4, r0
   b455a:	b170      	cbz	r0, b457a <_Z12initHardwarev+0xc2>
   b455c:	2210      	movs	r2, #16
   b455e:	2100      	movs	r1, #0
   b4560:	f006 f870 	bl	ba644 <memset>
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
            wakeupSource->base.next = config_.wakeup_sources;
   b4564:	692a      	ldr	r2, [r5, #16]
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4566:	4b0c      	ldr	r3, [pc, #48]	; (b4598 <_Z12initHardwarev+0xe0>)
   b4568:	6023      	str	r3, [r4, #0]
            wakeupSource->base.next = config_.wakeup_sources;
   b456a:	60a2      	str	r2, [r4, #8]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b456c:	2301      	movs	r3, #1
            wakeupSource->pin = pin;
   b456e:	2202      	movs	r2, #2
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4570:	80a3      	strh	r3, [r4, #4]
            wakeupSource->pin = pin;
   b4572:	81a2      	strh	r2, [r4, #12]
            wakeupSource->mode = mode;
   b4574:	73a3      	strb	r3, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4576:	612c      	str	r4, [r5, #16]
   b4578:	e7c7      	b.n	b450a <_Z12initHardwarev+0x52>
                valid_ = false;
   b457a:	7528      	strb	r0, [r5, #20]
                return *this;
   b457c:	e7c5      	b.n	b450a <_Z12initHardwarev+0x52>
   b457e:	bf00      	nop
   b4580:	20032290 	.word	0x20032290
   b4584:	20032088 	.word	0x20032088
   b4588:	000baa41 	.word	0x000baa41
   b458c:	2003e695 	.word	0x2003e695
   b4590:	0036ee80 	.word	0x0036ee80
   b4594:	000bb718 	.word	0x000bb718
   b4598:	00030010 	.word	0x00030010

000b459c <setup>:
#include "sleep.hpp"

void reportingThread(void* args);

// setup() runs once, when the device is first turned on.
void setup() {
   b459c:	b513      	push	{r0, r1, r4, lr}
  Serial.begin(9600);
   b459e:	f004 ffb5 	bl	b950c <_Z16_fetch_usbserialv>
   b45a2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b45a6:	f004 ffa1 	bl	b94ec <_ZN9USBSerial5beginEl>
  while(!Serial.isConnected()){} 
   b45aa:	f004 ffaf 	bl	b950c <_Z16_fetch_usbserialv>
   b45ae:	f004 ffa1 	bl	b94f4 <_ZN9USBSerial11isConnectedEv>
   b45b2:	2800      	cmp	r0, #0
   b45b4:	d0f9      	beq.n	b45aa <setup+0xe>
  initHardware();
   b45b6:	f7ff ff7f 	bl	b44b8 <_Z12initHardwarev>
        int reason = RESET_REASON_NONE;
   b45ba:	2400      	movs	r4, #0
  HTTPRequestSetup(); 
   b45bc:	f7ff fdda 	bl	b4174 <_Z16HTTPRequestSetupv>
  initFromEEPROM();
   b45c0:	f7ff fe62 	bl	b4288 <_Z14initFromEEPROMv>
  //   }
  // }

  // WiFi.off();

  getTime();
   b45c4:	f7ff fefe 	bl	b43c4 <_Z7getTimev>
  syncSystemTime();

  delay(200);
   b45c8:	20c8      	movs	r0, #200	; 0xc8
   b45ca:	f002 fb91 	bl	b6cf0 <delay>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   b45ce:	4622      	mov	r2, r4
   b45d0:	4621      	mov	r1, r4
   b45d2:	a801      	add	r0, sp, #4
        int reason = RESET_REASON_NONE;
   b45d4:	9401      	str	r4, [sp, #4]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   b45d6:	f002 f82b 	bl	b6630 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   b45da:	9b01      	ldr	r3, [sp, #4]

  if (System.resetReason() == RESET_REASON_WATCHDOG) {
   b45dc:	2b3c      	cmp	r3, #60	; 0x3c
   b45de:	d104      	bne.n	b45ea <setup+0x4e>
    Serial.println("Watchdog reset");
   b45e0:	f004 ff94 	bl	b950c <_Z16_fetch_usbserialv>
   b45e4:	490a      	ldr	r1, [pc, #40]	; (b4610 <setup+0x74>)
   b45e6:	f004 f864 	bl	b86b2 <_ZN5Print7printlnEPKc>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   b45ea:	2200      	movs	r2, #0
   b45ec:	4611      	mov	r1, r2
   b45ee:	a801      	add	r0, sp, #4
        int reason = RESET_REASON_NONE;
   b45f0:	9401      	str	r4, [sp, #4]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   b45f2:	f002 f81d 	bl	b6630 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   b45f6:	9b01      	ldr	r3, [sp, #4]
  }
  if (System.resetReason() == RESET_REASON_PIN_RESET) {
   b45f8:	2b14      	cmp	r3, #20
   b45fa:	d107      	bne.n	b460c <setup+0x70>
    Serial.println("External reset");
   b45fc:	f004 ff86 	bl	b950c <_Z16_fetch_usbserialv>
   b4600:	4904      	ldr	r1, [pc, #16]	; (b4614 <setup+0x78>)
  // os_mutex_create(&payloadAccessLock);
  // os_mutex_create(&reportingSleepProtectionLock);
  // os_mutex_unlock(&reportingSleepProtectionLock);
  // os_mutex_unlock(&payloadAccessLock);
  // os_thread_create(&reportingThreadHandle, "reportThread", OS_THREAD_PRIORITY_DEFAULT, reportingThread, NULL, 1024);
}
   b4602:	b002      	add	sp, #8
   b4604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("External reset");
   b4608:	f004 b853 	b.w	b86b2 <_ZN5Print7printlnEPKc>
}
   b460c:	b002      	add	sp, #8
   b460e:	bd10      	pop	{r4, pc}
   b4610:	000baa5d 	.word	0x000baa5d
   b4614:	000baa6c 	.word	0x000baa6c

000b4618 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv>:

  bleQuestionCount++;
}

//kBLEConnectedLED turns on when ble connected
void connectCallback(const BlePeerDevice& peer, void* context){
   b4618:	b507      	push	{r0, r1, r2, lr}
  bleQuestionCount = 0;
   b461a:	4b0b      	ldr	r3, [pc, #44]	; (b4648 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x30>)
   b461c:	2200      	movs	r2, #0
   b461e:	601a      	str	r2, [r3, #0]
  WITH_LOCK(Serial) {
   b4620:	f004 ff74 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4624:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4626:	f7ff fd53 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("connected");
   b462a:	f004 ff6f 	bl	b950c <_Z16_fetch_usbserialv>
   b462e:	4907      	ldr	r1, [pc, #28]	; (b464c <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x34>)
   b4630:	f004 f83f 	bl	b86b2 <_ZN5Print7printlnEPKc>
  WITH_LOCK(Serial) {
   b4634:	a801      	add	r0, sp, #4
   b4636:	f7ff febb 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  }
  digitalWrite(kBLEConnectedLED, HIGH);
   b463a:	2101      	movs	r1, #1
   b463c:	2007      	movs	r0, #7
}
   b463e:	b003      	add	sp, #12
   b4640:	f85d eb04 	ldr.w	lr, [sp], #4
  digitalWrite(kBLEConnectedLED, HIGH);
   b4644:	f005 b955 	b.w	b98f2 <digitalWrite>
   b4648:	20031c5c 	.word	0x20031c5c
   b464c:	000bb06b 	.word	0x000bb06b

000b4650 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv>:

//kBLEConnectedLED turns off when ble disconnected
void disconnectCallback(const BlePeerDevice& peer, void* context){
   b4650:	b507      	push	{r0, r1, r2, lr}
  WITH_LOCK(Serial) {
   b4652:	f004 ff5b 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4656:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4658:	f7ff fd3a 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("disconnected");
   b465c:	f004 ff56 	bl	b950c <_Z16_fetch_usbserialv>
   b4660:	4906      	ldr	r1, [pc, #24]	; (b467c <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv+0x2c>)
   b4662:	f004 f826 	bl	b86b2 <_ZN5Print7printlnEPKc>
  WITH_LOCK(Serial) {
   b4666:	a801      	add	r0, sp, #4
   b4668:	f7ff fea2 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  }
  digitalWrite(kBLEConnectedLED, LOW);
   b466c:	2100      	movs	r1, #0
   b466e:	2007      	movs	r0, #7
   b4670:	b003      	add	sp, #12
   b4672:	f85d eb04 	ldr.w	lr, [sp], #4
  digitalWrite(kBLEConnectedLED, LOW);
   b4676:	f005 b93c 	b.w	b98f2 <digitalWrite>
   b467a:	bf00      	nop
   b467c:	000baa7b 	.word	0x000baa7b

000b4680 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch(bleQuestionCount){
   b4684:	4eaf      	ldr	r6, [pc, #700]	; (b4944 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c4>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4686:	b095      	sub	sp, #84	; 0x54
   b4688:	4605      	mov	r5, r0
   b468a:	460c      	mov	r4, r1
  bleInputBuffer = "";
   b468c:	48ae      	ldr	r0, [pc, #696]	; (b4948 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b468e:	49af      	ldr	r1, [pc, #700]	; (b494c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
   b4690:	f004 f981 	bl	b8996 <_ZN6StringaSEPKc>
  switch(bleQuestionCount){
   b4694:	6833      	ldr	r3, [r6, #0]
   b4696:	2b09      	cmp	r3, #9
   b4698:	f200 814d 	bhi.w	b4936 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b6>
   b469c:	e8df f013 	tbh	[pc, r3, lsl #1]
   b46a0:	010701ba 	.word	0x010701ba
   b46a4:	00cb00e6 	.word	0x00cb00e6
   b46a8:	008700a9 	.word	0x008700a9
   b46ac:	00400065 	.word	0x00400065
   b46b0:	000a0025 	.word	0x000a0025
   b46b4:	442c      	add	r4, r5
   b46b6:	1e6f      	subs	r7, r5, #1
	String & operator += (char c)			{concat(c); return (*this);}
   b46b8:	4da3      	ldr	r5, [pc, #652]	; (b4948 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b46ba:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b46bc:	42bc      	cmp	r4, r7
   b46be:	f000 8402 	beq.w	b4ec6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x846>
        WITH_LOCK(Serial) {
   b46c2:	f004 ff23 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b46c6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b46c8:	f7ff fd02 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b46cc:	f004 ff1e 	bl	b950c <_Z16_fetch_usbserialv>
   b46d0:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b46d4:	220a      	movs	r2, #10
   b46d6:	f7ff fcec 	bl	b40b2 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b46da:	a801      	add	r0, sp, #4
   b46dc:	f7ff fe68 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b46e0:	7839      	ldrb	r1, [r7, #0]
   b46e2:	4628      	mov	r0, r5
   b46e4:	f004 f9aa 	bl	b8a3c <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   b46e8:	e7e8      	b.n	b46bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c>
   b46ea:	442c      	add	r4, r5
   b46ec:	1e6f      	subs	r7, r5, #1
   b46ee:	4d96      	ldr	r5, [pc, #600]	; (b4948 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b46f0:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b46f2:	42bc      	cmp	r4, r7
   b46f4:	f000 83c2 	beq.w	b4e7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7fc>
        WITH_LOCK(Serial) {
   b46f8:	f004 ff08 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b46fc:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b46fe:	f7ff fce7 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4702:	f004 ff03 	bl	b950c <_Z16_fetch_usbserialv>
   b4706:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b470a:	220a      	movs	r2, #10
   b470c:	f7ff fcd1 	bl	b40b2 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4710:	a801      	add	r0, sp, #4
   b4712:	f7ff fe4d 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4716:	7839      	ldrb	r1, [r7, #0]
   b4718:	4628      	mov	r0, r5
   b471a:	f004 f98f 	bl	b8a3c <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   b471e:	e7e8      	b.n	b46f2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x72>
   b4720:	442c      	add	r4, r5
   b4722:	1e6f      	subs	r7, r5, #1
   b4724:	f8df 8248 	ldr.w	r8, [pc, #584]	; b4970 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f0>
   b4728:	4d87      	ldr	r5, [pc, #540]	; (b4948 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b472a:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b472c:	42a7      	cmp	r7, r4
   b472e:	f000 8358 	beq.w	b4de2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x762>
        WITH_LOCK(Serial) {
   b4732:	f004 feeb 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4736:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4738:	f7ff fcca 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b473c:	f004 fee6 	bl	b950c <_Z16_fetch_usbserialv>
   b4740:	220a      	movs	r2, #10
   b4742:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4746:	f7ff fcb4 	bl	b40b2 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b474a:	a801      	add	r0, sp, #4
   b474c:	f7ff fe30 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4750:	7839      	ldrb	r1, [r7, #0]
   b4752:	487d      	ldr	r0, [pc, #500]	; (b4948 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4754:	f004 f972 	bl	b8a3c <_ZN6String6concatEc>
        reportingInterval = atoi(bleInputBuffer) * 1000;
   b4758:	6828      	ldr	r0, [r5, #0]
   b475a:	f005 ff1f 	bl	ba59c <atoi>
   b475e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4762:	4358      	muls	r0, r3
   b4764:	f8c8 0000 	str.w	r0, [r8]
      for(int i = 0; i < len - 1; i++){
   b4768:	e7e0      	b.n	b472c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xac>
   b476a:	442c      	add	r4, r5
   b476c:	1e6f      	subs	r7, r5, #1
   b476e:	f8df 81d8 	ldr.w	r8, [pc, #472]	; b4948 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>
        recordingInterval = atoi(bleInputBuffer);
   b4772:	4d77      	ldr	r5, [pc, #476]	; (b4950 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d0>)
   b4774:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4776:	42a7      	cmp	r7, r4
   b4778:	f000 82f6 	beq.w	b4d68 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6e8>
        WITH_LOCK(Serial) {
   b477c:	f004 fec6 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4780:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4782:	f7ff fca5 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4786:	f004 fec1 	bl	b950c <_Z16_fetch_usbserialv>
   b478a:	220a      	movs	r2, #10
   b478c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4790:	f7ff fc8f 	bl	b40b2 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4794:	a801      	add	r0, sp, #4
   b4796:	f7ff fe0b 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b479a:	7839      	ldrb	r1, [r7, #0]
   b479c:	486a      	ldr	r0, [pc, #424]	; (b4948 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b479e:	f004 f94d 	bl	b8a3c <_ZN6String6concatEc>
        recordingInterval = atoi(bleInputBuffer);
   b47a2:	f8d8 0000 	ldr.w	r0, [r8]
   b47a6:	f005 fef9 	bl	ba59c <atoi>
   b47aa:	6028      	str	r0, [r5, #0]
      for(int i = 0; i < len - 1; i++){
   b47ac:	e7e3      	b.n	b4776 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf6>
   b47ae:	442c      	add	r4, r5
   b47b0:	1e6f      	subs	r7, r5, #1
   b47b2:	f8df 8194 	ldr.w	r8, [pc, #404]	; b4948 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>
   b47b6:	4d67      	ldr	r5, [pc, #412]	; (b4954 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d4>)
   b47b8:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b47ba:	42a7      	cmp	r7, r4
   b47bc:	f000 828c 	beq.w	b4cd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x658>
        WITH_LOCK(Serial) {
   b47c0:	f004 fea4 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b47c4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b47c6:	f7ff fc83 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b47ca:	f004 fe9f 	bl	b950c <_Z16_fetch_usbserialv>
   b47ce:	220a      	movs	r2, #10
   b47d0:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b47d4:	f7ff fc6d 	bl	b40b2 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b47d8:	a801      	add	r0, sp, #4
   b47da:	f7ff fde9 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b47de:	7839      	ldrb	r1, [r7, #0]
   b47e0:	4859      	ldr	r0, [pc, #356]	; (b4948 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b47e2:	f004 f92b 	bl	b8a3c <_ZN6String6concatEc>
        sleepPauseDuration = atoi(bleInputBuffer);
   b47e6:	f8d8 0000 	ldr.w	r0, [r8]
   b47ea:	f005 fed7 	bl	ba59c <atoi>
   b47ee:	6028      	str	r0, [r5, #0]
      for(int i = 0; i < len - 1; i++){
   b47f0:	e7e3      	b.n	b47ba <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13a>
   b47f2:	442c      	add	r4, r5
   b47f4:	1e6f      	subs	r7, r5, #1
   b47f6:	f8df 8150 	ldr.w	r8, [pc, #336]	; b4948 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>
   b47fa:	4d57      	ldr	r5, [pc, #348]	; (b4958 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d8>)
   b47fc:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b47fe:	42bc      	cmp	r4, r7
   b4800:	f000 81ea 	beq.w	b4bd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x558>
        WITH_LOCK(Serial) {
   b4804:	f004 fe82 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4808:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b480a:	f7ff fc61 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b480e:	f004 fe7d 	bl	b950c <_Z16_fetch_usbserialv>
   b4812:	220a      	movs	r2, #10
   b4814:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4818:	f7ff fc4b 	bl	b40b2 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b481c:	a801      	add	r0, sp, #4
   b481e:	f7ff fdc7 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4822:	7839      	ldrb	r1, [r7, #0]
   b4824:	4848      	ldr	r0, [pc, #288]	; (b4948 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4826:	f004 f909 	bl	b8a3c <_ZN6String6concatEc>
        dsid = atoi(bleInputBuffer);
   b482a:	f8d8 0000 	ldr.w	r0, [r8]
   b482e:	f005 feb5 	bl	ba59c <atoi>
   b4832:	6028      	str	r0, [r5, #0]
      for(int i = 0; i < len - 1; i++){
   b4834:	e7e3      	b.n	b47fe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x17e>
   b4836:	442c      	add	r4, r5
   b4838:	1e6f      	subs	r7, r5, #1
   b483a:	4d43      	ldr	r5, [pc, #268]	; (b4948 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b483c:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b483e:	42a7      	cmp	r7, r4
   b4840:	f000 8190 	beq.w	b4b64 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e4>
        WITH_LOCK(Serial) {
   b4844:	f004 fe62 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4848:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b484a:	f7ff fc41 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b484e:	f004 fe5d 	bl	b950c <_Z16_fetch_usbserialv>
   b4852:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4856:	220a      	movs	r2, #10
   b4858:	f7ff fc2b 	bl	b40b2 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b485c:	a801      	add	r0, sp, #4
   b485e:	f7ff fda7 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4862:	7839      	ldrb	r1, [r7, #0]
   b4864:	4628      	mov	r0, r5
   b4866:	f004 f8e9 	bl	b8a3c <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   b486a:	e7e8      	b.n	b483e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1be>
   b486c:	442c      	add	r4, r5
   b486e:	1e6f      	subs	r7, r5, #1
        password = bleInputBuffer;
   b4870:	f8df 8100 	ldr.w	r8, [pc, #256]	; b4974 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f4>
   b4874:	4d34      	ldr	r5, [pc, #208]	; (b4948 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4876:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4878:	42bc      	cmp	r4, r7
   b487a:	f000 810b 	beq.w	b4a94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x414>
        WITH_LOCK(Serial) {
   b487e:	f004 fe45 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4882:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4884:	f7ff fc24 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4888:	f004 fe40 	bl	b950c <_Z16_fetch_usbserialv>
   b488c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b4890:	220a      	movs	r2, #10
   b4892:	f7ff fc0e 	bl	b40b2 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4896:	a801      	add	r0, sp, #4
   b4898:	f7ff fd8a 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b489c:	7839      	ldrb	r1, [r7, #0]
   b489e:	4628      	mov	r0, r5
   b48a0:	f004 f8cc 	bl	b8a3c <_ZN6String6concatEc>
        password = bleInputBuffer;
   b48a4:	4629      	mov	r1, r5
   b48a6:	4640      	mov	r0, r8
   b48a8:	f004 f85b 	bl	b8962 <_ZN6StringaSERKS_>
      for(int i = 0; i < len - 1; i++){
   b48ac:	e7e4      	b.n	b4878 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1f8>
   b48ae:	1e6f      	subs	r7, r5, #1
        ssid = bleInputBuffer;
   b48b0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b496c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ec>
   b48b4:	4425      	add	r5, r4
   b48b6:	4c24      	ldr	r4, [pc, #144]	; (b4948 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b48b8:	3d02      	subs	r5, #2
      for(int i = 0; i < len - 1; i++){
   b48ba:	42bd      	cmp	r5, r7
   b48bc:	d05c      	beq.n	b4978 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f8>
   b48be:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   b48c2:	4620      	mov	r0, r4
   b48c4:	f004 f8ba 	bl	b8a3c <_ZN6String6concatEc>
        ssid = bleInputBuffer;
   b48c8:	4621      	mov	r1, r4
   b48ca:	4640      	mov	r0, r8
   b48cc:	f004 f849 	bl	b8962 <_ZN6StringaSERKS_>
        WITH_LOCK(Serial) {
   b48d0:	f004 fe1c 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b48d4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b48d6:	f7ff fbfb 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b48da:	f004 fe17 	bl	b950c <_Z16_fetch_usbserialv>
   b48de:	7839      	ldrb	r1, [r7, #0]
   b48e0:	220a      	movs	r2, #10
   b48e2:	f7ff fbe6 	bl	b40b2 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b48e6:	a801      	add	r0, sp, #4
   b48e8:	f7ff fd62 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      for(int i = 0; i < len - 1; i++){
   b48ec:	e7e5      	b.n	b48ba <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x23a>
      networkBuffer = networks[networkCount - 1].ssid;
   b48ee:	4b1b      	ldr	r3, [pc, #108]	; (b495c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2dc>)
   b48f0:	481b      	ldr	r0, [pc, #108]	; (b4960 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e0>)
   b48f2:	2238      	movs	r2, #56	; 0x38
   b48f4:	fb02 3101 	mla	r1, r2, r1, r3
   b48f8:	3104      	adds	r1, #4
   b48fa:	f004 f84c 	bl	b8996 <_ZN6StringaSEPKc>
      WITH_LOCK(Serial) {
   b48fe:	f004 fe05 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4902:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4904:	f7ff fbe4 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(networkBuffer.length());
   b4908:	f004 fe00 	bl	b950c <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b490c:	68a1      	ldr	r1, [r4, #8]
   b490e:	220a      	movs	r2, #10
   b4910:	4605      	mov	r5, r0
   b4912:	f003 fed8 	bl	b86c6 <_ZN5Print11printNumberEmh>
        n += println();
   b4916:	4628      	mov	r0, r5
   b4918:	f003 febf 	bl	b869a <_ZN5Print7printlnEv>
      WITH_LOCK(Serial) {
   b491c:	a801      	add	r0, sp, #4
   b491e:	f7ff fd47 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      txCharacteristic.setValue(networkBuffer);
   b4922:	490f      	ldr	r1, [pc, #60]	; (b4960 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e0>)
   b4924:	480f      	ldr	r0, [pc, #60]	; (b4964 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   b4926:	2200      	movs	r2, #0
   b4928:	f002 fcb0 	bl	b728c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
      txCharacteristic.setValue("]\nEnter network SSID (blank to skip, 'clear' to reset credentials): ");
   b492c:	490e      	ldr	r1, [pc, #56]	; (b4968 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e8>)
   b492e:	2200      	movs	r2, #0
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   b4930:	480c      	ldr	r0, [pc, #48]	; (b4964 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   b4932:	f002 fcb0 	bl	b7296 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
  bleQuestionCount++;
   b4936:	6833      	ldr	r3, [r6, #0]
   b4938:	3301      	adds	r3, #1
   b493a:	6033      	str	r3, [r6, #0]
}
   b493c:	b015      	add	sp, #84	; 0x54
   b493e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4942:	bf00      	nop
   b4944:	20031c5c 	.word	0x20031c5c
   b4948:	20031c4c 	.word	0x20031c4c
   b494c:	000bab99 	.word	0x000bab99
   b4950:	2003220c 	.word	0x2003220c
   b4954:	200322a8 	.word	0x200322a8
   b4958:	20031c64 	.word	0x20031c64
   b495c:	200320c8 	.word	0x200320c8
   b4960:	200320b4 	.word	0x200320b4
   b4964:	2003e67c 	.word	0x2003e67c
   b4968:	000baacf 	.word	0x000baacf
   b496c:	200322b0 	.word	0x200322b0
   b4970:	20032210 	.word	0x20032210
   b4974:	200321e0 	.word	0x200321e0
      WITH_LOCK(Serial) {
   b4978:	f004 fdc8 	bl	b950c <_Z16_fetch_usbserialv>
	const char * c_str() const { return buffer; }
   b497c:	4db7      	ldr	r5, [pc, #732]	; (b4c5c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5dc>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b497e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4980:	f7ff fba6 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(ssid);
   b4984:	f004 fdc2 	bl	b950c <_Z16_fetch_usbserialv>
   b4988:	6829      	ldr	r1, [r5, #0]
   b498a:	f003 fe92 	bl	b86b2 <_ZN5Print7printlnEPKc>
        Serial.println(ssid.length());
   b498e:	f004 fdbd 	bl	b950c <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4992:	68a9      	ldr	r1, [r5, #8]
   b4994:	220a      	movs	r2, #10
   b4996:	4604      	mov	r4, r0
   b4998:	f003 fe95 	bl	b86c6 <_ZN5Print11printNumberEmh>
        n += println();
   b499c:	4620      	mov	r0, r4
   b499e:	f003 fe7c 	bl	b869a <_ZN5Print7printlnEv>
      WITH_LOCK(Serial) {
   b49a2:	a801      	add	r0, sp, #4
   b49a4:	f7ff fd04 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b49a8:	49ad      	ldr	r1, [pc, #692]	; (b4c60 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e0>)
   b49aa:	4628      	mov	r0, r5
   b49ac:	f004 f88f 	bl	b8ace <_ZNK6String6equalsEPKc>
      if(ssid == ""){
   b49b0:	4604      	mov	r4, r0
   b49b2:	b300      	cbz	r0, b49f6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x376>
        bleQuestionCount = 3;
   b49b4:	2303      	movs	r3, #3
   b49b6:	6033      	str	r3, [r6, #0]
   b49b8:	4caa      	ldr	r4, [pc, #680]	; (b4c64 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e4>)
        EEPROM.get(0, dsid);
   b49ba:	f004 ffc7 	bl	b994c <_Z21__fetch_global_EEPROMv>
   b49be:	4621      	mov	r1, r4
   b49c0:	2204      	movs	r2, #4
   b49c2:	2000      	movs	r0, #0
   b49c4:	f001 fe5c 	bl	b6680 <HAL_EEPROM_Get>
        txCharacteristic.setValue("\nCurrent DSID is [");
   b49c8:	49a7      	ldr	r1, [pc, #668]	; (b4c68 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e8>)
   b49ca:	48a8      	ldr	r0, [pc, #672]	; (b4c6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b49cc:	2200      	movs	r2, #0
   b49ce:	f002 fc62 	bl	b7296 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        if(dsid != -1){
   b49d2:	6821      	ldr	r1, [r4, #0]
   b49d4:	1c4c      	adds	r4, r1, #1
   b49d6:	d00b      	beq.n	b49f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x370>
          txCharacteristic.setValue(String(dsid));
   b49d8:	220a      	movs	r2, #10
   b49da:	a801      	add	r0, sp, #4
   b49dc:	f003 ffed 	bl	b89ba <_ZN6StringC1Eih>
   b49e0:	48a2      	ldr	r0, [pc, #648]	; (b4c6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b49e2:	2200      	movs	r2, #0
   b49e4:	a901      	add	r1, sp, #4
   b49e6:	f002 fc51 	bl	b728c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b49ea:	a801      	add	r0, sp, #4
   b49ec:	f003 ff5a 	bl	b88a4 <_ZN6StringD1Ev>
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   b49f0:	499f      	ldr	r1, [pc, #636]	; (b4c70 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f0>)
   b49f2:	2200      	movs	r2, #0
   b49f4:	e79c      	b.n	b4930 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>
   b49f6:	499f      	ldr	r1, [pc, #636]	; (b4c74 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   b49f8:	4628      	mov	r0, r5
   b49fa:	f004 f868 	bl	b8ace <_ZNK6String6equalsEPKc>
      }else if(ssid == "clear"){
   b49fe:	4602      	mov	r2, r0
   b4a00:	2800      	cmp	r0, #0
   b4a02:	d045      	beq.n	b4a90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x410>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   b4a04:	489c      	ldr	r0, [pc, #624]	; (b4c78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f8>)
   b4a06:	4623      	mov	r3, r4
   b4a08:	6840      	ldr	r0, [r0, #4]
   b4a0a:	4622      	mov	r2, r4
   b4a0c:	4621      	mov	r1, r4
   b4a0e:	f002 f907 	bl	b6c20 <network_clear_credentials>
          bleQuestionCount = 0;
   b4a12:	6034      	str	r4, [r6, #0]
      txCharacteristic.setValue("\nv5.2 Motionalysis Firmware\nCredentials are currently stored for:\n[");
   b4a14:	4999      	ldr	r1, [pc, #612]	; (b4c7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5fc>)
   b4a16:	4895      	ldr	r0, [pc, #596]	; (b4c6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
      networkCount = WiFi.getCredentials(networks, 5);
   b4a18:	f8df a2b4 	ldr.w	sl, [pc, #692]	; b4cd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x650>
   b4a1c:	4d98      	ldr	r5, [pc, #608]	; (b4c80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x600>)
   b4a1e:	4c99      	ldr	r4, [pc, #612]	; (b4c84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x604>)
        txCharacteristic.setValue(networkBuffer);
   b4a20:	f8df 8248 	ldr.w	r8, [pc, #584]	; b4c6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>
        txCharacteristic.setValue(",\n");
   b4a24:	f8df 92ac 	ldr.w	r9, [pc, #684]	; b4cd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x654>
      txCharacteristic.setValue("\nv5.2 Motionalysis Firmware\nCredentials are currently stored for:\n[");
   b4a28:	2200      	movs	r2, #0
   b4a2a:	f002 fc34 	bl	b7296 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      networkCount = WiFi.getCredentials(networks, 5);
   b4a2e:	4996      	ldr	r1, [pc, #600]	; (b4c88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x608>)
   b4a30:	4891      	ldr	r0, [pc, #580]	; (b4c78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f8>)
   b4a32:	2205      	movs	r2, #5
   b4a34:	f004 fdc6 	bl	b95c4 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>
      for(int i = 0; i < networkCount - 1; i++){
   b4a38:	2700      	movs	r7, #0
      networkCount = WiFi.getCredentials(networks, 5);
   b4a3a:	f8ca 0000 	str.w	r0, [sl]
      for(int i = 0; i < networkCount - 1; i++){
   b4a3e:	f8da 1000 	ldr.w	r1, [sl]
   b4a42:	3901      	subs	r1, #1
   b4a44:	42b9      	cmp	r1, r7
   b4a46:	f77f af52 	ble.w	b48ee <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26e>
        networkBuffer = networks[i].ssid;
   b4a4a:	4629      	mov	r1, r5
   b4a4c:	4620      	mov	r0, r4
   b4a4e:	f003 ffa2 	bl	b8996 <_ZN6StringaSEPKc>
        WITH_LOCK(Serial) {
   b4a52:	f004 fd5b 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4a56:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4a58:	f7ff fb3a 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(networkBuffer.length());
   b4a5c:	f004 fd56 	bl	b950c <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4a60:	68a1      	ldr	r1, [r4, #8]
   b4a62:	220a      	movs	r2, #10
   b4a64:	4683      	mov	fp, r0
   b4a66:	f003 fe2e 	bl	b86c6 <_ZN5Print11printNumberEmh>
        n += println();
   b4a6a:	4658      	mov	r0, fp
   b4a6c:	f003 fe15 	bl	b869a <_ZN5Print7printlnEv>
        WITH_LOCK(Serial) {
   b4a70:	a801      	add	r0, sp, #4
   b4a72:	f7ff fc9d 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        txCharacteristic.setValue(networkBuffer);
   b4a76:	2200      	movs	r2, #0
   b4a78:	4621      	mov	r1, r4
   b4a7a:	4640      	mov	r0, r8
   b4a7c:	f002 fc06 	bl	b728c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        txCharacteristic.setValue(",\n");
   b4a80:	2200      	movs	r2, #0
   b4a82:	4649      	mov	r1, r9
   b4a84:	4640      	mov	r0, r8
   b4a86:	f002 fc06 	bl	b7296 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      for(int i = 0; i < networkCount - 1; i++){
   b4a8a:	3701      	adds	r7, #1
   b4a8c:	3538      	adds	r5, #56	; 0x38
   b4a8e:	e7d6      	b.n	b4a3e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3be>
        txCharacteristic.setValue("\nEnter network password: ");
   b4a90:	497e      	ldr	r1, [pc, #504]	; (b4c8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60c>)
   b4a92:	e74d      	b.n	b4930 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>
      WITH_LOCK(Serial) {
   b4a94:	f004 fd3a 	bl	b950c <_Z16_fetch_usbserialv>
	const char * c_str() const { return buffer; }
   b4a98:	4c7d      	ldr	r4, [pc, #500]	; (b4c90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x610>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4a9a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4a9c:	f7ff fb18 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(password);
   b4aa0:	f004 fd34 	bl	b950c <_Z16_fetch_usbserialv>
   b4aa4:	6821      	ldr	r1, [r4, #0]
   b4aa6:	f003 fe04 	bl	b86b2 <_ZN5Print7printlnEPKc>
        Serial.println(password.length());
   b4aaa:	f004 fd2f 	bl	b950c <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4aae:	68a1      	ldr	r1, [r4, #8]
   b4ab0:	4605      	mov	r5, r0
   b4ab2:	220a      	movs	r2, #10
   b4ab4:	f003 fe07 	bl	b86c6 <_ZN5Print11printNumberEmh>
        n += println();
   b4ab8:	4628      	mov	r0, r5
   b4aba:	f003 fdee 	bl	b869a <_ZN5Print7printlnEv>
      WITH_LOCK(Serial) {
   b4abe:	a801      	add	r0, sp, #4
   b4ac0:	f7ff fc76 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4ac4:	4b65      	ldr	r3, [pc, #404]	; (b4c5c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5dc>)
   b4ac6:	6825      	ldr	r5, [r4, #0]
   b4ac8:	f8d3 8000 	ldr.w	r8, [r3]
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4acc:	f1b8 0f00 	cmp.w	r8, #0
   b4ad0:	d044      	beq.n	b4b5c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4dc>
   b4ad2:	4640      	mov	r0, r8
   b4ad4:	f005 fdfe 	bl	ba6d4 <strlen>
   b4ad8:	4607      	mov	r7, r0
   b4ada:	2d00      	cmp	r5, #0
   b4adc:	d040      	beq.n	b4b60 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e0>
   b4ade:	4628      	mov	r0, r5
   b4ae0:	f005 fdf8 	bl	ba6d4 <strlen>
   b4ae4:	4604      	mov	r4, r0
        memset(&creds, 0, sizeof(creds));
   b4ae6:	2238      	movs	r2, #56	; 0x38
   b4ae8:	2100      	movs	r1, #0
   b4aea:	a806      	add	r0, sp, #24
   b4aec:	f005 fdaa 	bl	ba644 <memset>
        creds.size = sizeof(creds);
   b4af0:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b4af2:	e9cd 3801 	strd	r3, r8, [sp, #4]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4af6:	4860      	ldr	r0, [pc, #384]	; (b4c78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f8>)
        creds.password_len = passwordLen;
   b4af8:	9405      	str	r4, [sp, #20]
        creds.security = WLanSecurityType(security);
   b4afa:	2303      	movs	r3, #3
   b4afc:	f88d 3018 	strb.w	r3, [sp, #24]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4b00:	2300      	movs	r3, #0
   b4b02:	aa01      	add	r2, sp, #4
   b4b04:	4619      	mov	r1, r3
   b4b06:	6840      	ldr	r0, [r0, #4]
        creds.password = password;
   b4b08:	e9cd 7503 	strd	r7, r5, [sp, #12]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4b0c:	f002 f880 	bl	b6c10 <network_set_credentials>
      WITH_LOCK(Serial) {
   b4b10:	f004 fcfc 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4b14:	9000      	str	r0, [sp, #0]
      { _M_device.lock(); }
   b4b16:	f7ff fadb 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("\n\nCredentials set with ssid: " + ssid + "\npassword: " + password + "\n\n");
   b4b1a:	f004 fcf7 	bl	b950c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4b1e:	495d      	ldr	r1, [pc, #372]	; (b4c94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x614>)
   b4b20:	4604      	mov	r4, r0
   b4b22:	a801      	add	r0, sp, #4
   b4b24:	f003 ff09 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
   b4b28:	494c      	ldr	r1, [pc, #304]	; (b4c5c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5dc>)
   b4b2a:	a801      	add	r0, sp, #4
   b4b2c:	f003 ffa4 	bl	b8a78 <_ZplRK15StringSumHelperRK6String>
   b4b30:	4959      	ldr	r1, [pc, #356]	; (b4c98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x618>)
   b4b32:	f003 ffad 	bl	b8a90 <_ZplRK15StringSumHelperPKc>
   b4b36:	4956      	ldr	r1, [pc, #344]	; (b4c90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x610>)
   b4b38:	f003 ff9e 	bl	b8a78 <_ZplRK15StringSumHelperRK6String>
   b4b3c:	4957      	ldr	r1, [pc, #348]	; (b4c9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x61c>)
   b4b3e:	f003 ffa7 	bl	b8a90 <_ZplRK15StringSumHelperPKc>
   b4b42:	6801      	ldr	r1, [r0, #0]
   b4b44:	4620      	mov	r0, r4
   b4b46:	f003 fdb4 	bl	b86b2 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4b4a:	a801      	add	r0, sp, #4
   b4b4c:	f003 feaa 	bl	b88a4 <_ZN6StringD1Ev>
      WITH_LOCK(Serial) {
   b4b50:	4668      	mov	r0, sp
   b4b52:	f7ff fc2d 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      txCharacteristic.setValue("\nEnter 'test' to test credentials (blank to skip): ");
   b4b56:	4952      	ldr	r1, [pc, #328]	; (b4ca0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x620>)
   b4b58:	2200      	movs	r2, #0
   b4b5a:	e6e9      	b.n	b4930 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4b5c:	4647      	mov	r7, r8
   b4b5e:	e7bc      	b.n	b4ada <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x45a>
   b4b60:	462c      	mov	r4, r5
   b4b62:	e7c0      	b.n	b4ae6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x466>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4b64:	494f      	ldr	r1, [pc, #316]	; (b4ca4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x624>)
   b4b66:	4850      	ldr	r0, [pc, #320]	; (b4ca8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x628>)
   b4b68:	f003 ffb1 	bl	b8ace <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == "test" && WiFi.hasCredentials()){
   b4b6c:	2800      	cmp	r0, #0
   b4b6e:	f43f af23 	beq.w	b49b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x338>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4b72:	4c41      	ldr	r4, [pc, #260]	; (b4c78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f8>)
        return network_has_credentials(*this, 0, NULL);
   b4b74:	2200      	movs	r2, #0
   b4b76:	6860      	ldr	r0, [r4, #4]
   b4b78:	4611      	mov	r1, r2
   b4b7a:	f002 f841 	bl	b6c00 <network_has_credentials>
   b4b7e:	2800      	cmp	r0, #0
   b4b80:	f43f af1a 	beq.w	b49b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x338>
        WiFi.on();
   b4b84:	4620      	mov	r0, r4
   b4b86:	f7ff fac6 	bl	b4116 <_ZN5spark9WiFiClass2onEv>
        WiFi.connect();
   b4b8a:	2100      	movs	r1, #0
   b4b8c:	4620      	mov	r0, r4
   b4b8e:	f7ff face 	bl	b412e <_ZN5spark9WiFiClass7connectEj>
        return network_connecting(*this, 0, NULL);
   b4b92:	2200      	movs	r2, #0
   b4b94:	6860      	ldr	r0, [r4, #4]
   b4b96:	4611      	mov	r1, r2
   b4b98:	f001 fffa 	bl	b6b90 <network_connecting>
        while(WiFi.connecting() || !WiFi.ready()){
   b4b9c:	b178      	cbz	r0, b4bbe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x53e>
            Serial.println("timeout");
   b4b9e:	f004 fcb5 	bl	b950c <_Z16_fetch_usbserialv>
   b4ba2:	4942      	ldr	r1, [pc, #264]	; (b4cac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x62c>)
   b4ba4:	f003 fd85 	bl	b86b2 <_ZN5Print7printlnEPKc>
            wifiTest = false;
   b4ba8:	2400      	movs	r4, #0
        WiFi.off();
   b4baa:	4833      	ldr	r0, [pc, #204]	; (b4c78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f8>)
   b4bac:	f7ff fab9 	bl	b4122 <_ZN5spark9WiFiClass3offEv>
        if(wifiTest){
   b4bb0:	b164      	cbz	r4, b4bcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x54c>
          txCharacteristic.setValue("Success!\n");
   b4bb2:	493f      	ldr	r1, [pc, #252]	; (b4cb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x630>)
   b4bb4:	482d      	ldr	r0, [pc, #180]	; (b4c6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b4bb6:	2200      	movs	r2, #0
   b4bb8:	f002 fb6d 	bl	b7296 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
   b4bbc:	e6fc      	b.n	b49b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x338>
        while(WiFi.connecting() || !WiFi.ready()){
   b4bbe:	4620      	mov	r0, r4
   b4bc0:	f7ff faba 	bl	b4138 <_ZN5spark9WiFiClass5readyEv>
   b4bc4:	4604      	mov	r4, r0
   b4bc6:	2800      	cmp	r0, #0
   b4bc8:	d0e9      	beq.n	b4b9e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x51e>
   b4bca:	e7ee      	b.n	b4baa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x52a>
          txCharacteristic.setValue("ERROR: WiFi connection timeout\n");
   b4bcc:	4939      	ldr	r1, [pc, #228]	; (b4cb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x634>)
   b4bce:	4827      	ldr	r0, [pc, #156]	; (b4c6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b4bd0:	4622      	mov	r2, r4
   b4bd2:	f002 fb60 	bl	b7296 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
   b4bd6:	e71c      	b.n	b4a12 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x392>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b4bd8:	4921      	ldr	r1, [pc, #132]	; (b4c60 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e0>)
   b4bda:	4833      	ldr	r0, [pc, #204]	; (b4ca8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x628>)
   b4bdc:	f003 ff77 	bl	b8ace <_ZNK6String6equalsEPKc>
      if(bleInputBuffer != ""){
   b4be0:	4604      	mov	r4, r0
   b4be2:	b998      	cbnz	r0, b4c0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58c>
        EEPROM.put(kDsidEEPROMAddress, dsid);
   b4be4:	f004 feb2 	bl	b994c <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b4be8:	491e      	ldr	r1, [pc, #120]	; (b4c64 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e4>)
   b4bea:	2204      	movs	r2, #4
   b4bec:	4620      	mov	r0, r4
   b4bee:	f001 fd4f 	bl	b6690 <HAL_EEPROM_Put>
        WITH_LOCK(Serial) {
   b4bf2:	f004 fc8b 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4bf6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4bf8:	f7ff fa6a 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("dsid entered");
   b4bfc:	f004 fc86 	bl	b950c <_Z16_fetch_usbserialv>
   b4c00:	492d      	ldr	r1, [pc, #180]	; (b4cb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x638>)
   b4c02:	f003 fd56 	bl	b86b2 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b4c06:	a801      	add	r0, sp, #4
   b4c08:	f7ff fbd2 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      EEPROM.get(kDsidEEPROMAddress, dsid);
   b4c0c:	f004 fe9e 	bl	b994c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b4c10:	2204      	movs	r2, #4
   b4c12:	4914      	ldr	r1, [pc, #80]	; (b4c64 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e4>)
   b4c14:	2000      	movs	r0, #0
   b4c16:	f001 fd33 	bl	b6680 <HAL_EEPROM_Get>
      Serial.println("dsid: " + dsid);
   b4c1a:	f004 fc77 	bl	b950c <_Z16_fetch_usbserialv>
   b4c1e:	682b      	ldr	r3, [r5, #0]
   b4c20:	4926      	ldr	r1, [pc, #152]	; (b4cbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x63c>)
   b4c22:	4419      	add	r1, r3
   b4c24:	f003 fd45 	bl	b86b2 <_ZN5Print7printlnEPKc>
      txCharacteristic.setValue("\nCurrent value for sleep pause duration is [");
   b4c28:	4925      	ldr	r1, [pc, #148]	; (b4cc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x640>)
   b4c2a:	4810      	ldr	r0, [pc, #64]	; (b4c6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b4c2c:	2200      	movs	r2, #0
   b4c2e:	f002 fb32 	bl	b7296 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(recordingInterval != -1){
   b4c32:	4b24      	ldr	r3, [pc, #144]	; (b4cc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x644>)
   b4c34:	681b      	ldr	r3, [r3, #0]
   b4c36:	3301      	adds	r3, #1
   b4c38:	d00d      	beq.n	b4c56 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d6>
        txCharacteristic.setValue(String(sleepPauseDuration));
   b4c3a:	4b23      	ldr	r3, [pc, #140]	; (b4cc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x648>)
   b4c3c:	220a      	movs	r2, #10
   b4c3e:	6819      	ldr	r1, [r3, #0]
   b4c40:	a801      	add	r0, sp, #4
   b4c42:	f003 feba 	bl	b89ba <_ZN6StringC1Eih>
   b4c46:	4809      	ldr	r0, [pc, #36]	; (b4c6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b4c48:	2200      	movs	r2, #0
   b4c4a:	a901      	add	r1, sp, #4
   b4c4c:	f002 fb1e 	bl	b728c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b4c50:	a801      	add	r0, sp, #4
   b4c52:	f003 fe27 	bl	b88a4 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter sleep pause duration as an integer in seconds (blank to skip): ");
   b4c56:	491d      	ldr	r1, [pc, #116]	; (b4ccc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64c>)
   b4c58:	2200      	movs	r2, #0
   b4c5a:	e669      	b.n	b4930 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>
   b4c5c:	200322b0 	.word	0x200322b0
   b4c60:	000bab99 	.word	0x000bab99
   b4c64:	20031c64 	.word	0x20031c64
   b4c68:	000bab14 	.word	0x000bab14
   b4c6c:	2003e67c 	.word	0x2003e67c
   b4c70:	000bab27 	.word	0x000bab27
   b4c74:	000bab4d 	.word	0x000bab4d
   b4c78:	2003e710 	.word	0x2003e710
   b4c7c:	000baa88 	.word	0x000baa88
   b4c80:	200320cc 	.word	0x200320cc
   b4c84:	200320b4 	.word	0x200320b4
   b4c88:	200320c8 	.word	0x200320c8
   b4c8c:	000bab53 	.word	0x000bab53
   b4c90:	200321e0 	.word	0x200321e0
   b4c94:	000bab6d 	.word	0x000bab6d
   b4c98:	000bab8b 	.word	0x000bab8b
   b4c9c:	000bab97 	.word	0x000bab97
   b4ca0:	000bab9a 	.word	0x000bab9a
   b4ca4:	000babce 	.word	0x000babce
   b4ca8:	20031c4c 	.word	0x20031c4c
   b4cac:	000babd3 	.word	0x000babd3
   b4cb0:	000babdb 	.word	0x000babdb
   b4cb4:	000babe5 	.word	0x000babe5
   b4cb8:	000bac05 	.word	0x000bac05
   b4cbc:	000bac12 	.word	0x000bac12
   b4cc0:	000bac19 	.word	0x000bac19
   b4cc4:	2003220c 	.word	0x2003220c
   b4cc8:	200322a8 	.word	0x200322a8
   b4ccc:	000bac46 	.word	0x000bac46
   b4cd0:	200320c4 	.word	0x200320c4
   b4cd4:	000baacc 	.word	0x000baacc
   b4cd8:	49a6      	ldr	r1, [pc, #664]	; (b4f74 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8f4>)
   b4cda:	48a7      	ldr	r0, [pc, #668]	; (b4f78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8f8>)
   b4cdc:	f003 fef7 	bl	b8ace <_ZNK6String6equalsEPKc>
      if(bleInputBuffer != ""){
   b4ce0:	b9a0      	cbnz	r0, b4d0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x68c>
        EEPROM.put(kSleepPauseDurationEEPROMAddress, sleepPauseDuration);
   b4ce2:	f004 fe33 	bl	b994c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b4ce6:	49a5      	ldr	r1, [pc, #660]	; (b4f7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8fc>)
   b4ce8:	2204      	movs	r2, #4
   b4cea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4cee:	f001 fccf 	bl	b6690 <HAL_EEPROM_Put>
        WITH_LOCK(Serial) {
   b4cf2:	f004 fc0b 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4cf6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4cf8:	f7ff f9ea 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("sleep pause duration entered");
   b4cfc:	f004 fc06 	bl	b950c <_Z16_fetch_usbserialv>
   b4d00:	499f      	ldr	r1, [pc, #636]	; (b4f80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x900>)
   b4d02:	f003 fcd6 	bl	b86b2 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b4d06:	a801      	add	r0, sp, #4
   b4d08:	f7ff fb52 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      EEPROM.get(kSleepPauseDurationEEPROMAddress, sleepPauseDuration);
   b4d0c:	f004 fe1e 	bl	b994c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b4d10:	2204      	movs	r2, #4
   b4d12:	499a      	ldr	r1, [pc, #616]	; (b4f7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8fc>)
   b4d14:	4c9b      	ldr	r4, [pc, #620]	; (b4f84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x904>)
   b4d16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4d1a:	f001 fcb1 	bl	b6680 <HAL_EEPROM_Get>
      Serial.println("sleep pause duration: " + sleepPauseDuration);
   b4d1e:	f004 fbf5 	bl	b950c <_Z16_fetch_usbserialv>
   b4d22:	682b      	ldr	r3, [r5, #0]
   b4d24:	4998      	ldr	r1, [pc, #608]	; (b4f88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x908>)
   b4d26:	4419      	add	r1, r3
   b4d28:	f003 fcc3 	bl	b86b2 <_ZN5Print7printlnEPKc>
      EEPROM.get(kRecordingIntervalEEPROMAddress, recordingInterval);
   b4d2c:	f004 fe0e 	bl	b994c <_Z21__fetch_global_EEPROMv>
   b4d30:	2204      	movs	r2, #4
   b4d32:	4621      	mov	r1, r4
   b4d34:	2064      	movs	r0, #100	; 0x64
   b4d36:	f001 fca3 	bl	b6680 <HAL_EEPROM_Get>
      txCharacteristic.setValue("\nCurrent value for data collection interval is [");
   b4d3a:	4994      	ldr	r1, [pc, #592]	; (b4f8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90c>)
   b4d3c:	4894      	ldr	r0, [pc, #592]	; (b4f90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x910>)
   b4d3e:	2200      	movs	r2, #0
   b4d40:	f002 faa9 	bl	b7296 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(recordingInterval != -1){
   b4d44:	6821      	ldr	r1, [r4, #0]
   b4d46:	1c48      	adds	r0, r1, #1
   b4d48:	d00b      	beq.n	b4d62 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6e2>
        txCharacteristic.setValue(String(recordingInterval));
   b4d4a:	220a      	movs	r2, #10
   b4d4c:	a801      	add	r0, sp, #4
   b4d4e:	f003 fe34 	bl	b89ba <_ZN6StringC1Eih>
   b4d52:	488f      	ldr	r0, [pc, #572]	; (b4f90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x910>)
   b4d54:	2200      	movs	r2, #0
   b4d56:	a901      	add	r1, sp, #4
   b4d58:	f002 fa98 	bl	b728c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b4d5c:	a801      	add	r0, sp, #4
   b4d5e:	f003 fda1 	bl	b88a4 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between data collection as an integer in milliseconds (blank to skip): ");
   b4d62:	498c      	ldr	r1, [pc, #560]	; (b4f94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x914>)
   b4d64:	2200      	movs	r2, #0
   b4d66:	e5e3      	b.n	b4930 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4d68:	4982      	ldr	r1, [pc, #520]	; (b4f74 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8f4>)
   b4d6a:	4883      	ldr	r0, [pc, #524]	; (b4f78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8f8>)
   b4d6c:	f003 feaf 	bl	b8ace <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == ""){
   b4d70:	b130      	cbz	r0, b4d80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x700>
        EEPROM.get(kRecordingIntervalEEPROMAddress, recordingInterval);
   b4d72:	f004 fdeb 	bl	b994c <_Z21__fetch_global_EEPROMv>
   b4d76:	4983      	ldr	r1, [pc, #524]	; (b4f84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x904>)
   b4d78:	2204      	movs	r2, #4
   b4d7a:	2064      	movs	r0, #100	; 0x64
   b4d7c:	f001 fc80 	bl	b6680 <HAL_EEPROM_Get>
      EEPROM.put(kRecordingIntervalEEPROMAddress, recordingInterval);
   b4d80:	f004 fde4 	bl	b994c <_Z21__fetch_global_EEPROMv>
   b4d84:	4c84      	ldr	r4, [pc, #528]	; (b4f98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x918>)
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b4d86:	497f      	ldr	r1, [pc, #508]	; (b4f84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x904>)
   b4d88:	2204      	movs	r2, #4
   b4d8a:	2064      	movs	r0, #100	; 0x64
   b4d8c:	f001 fc80 	bl	b6690 <HAL_EEPROM_Put>
      EEPROM.get(kRecordingIntervalEEPROMAddress, recordingInterval);
   b4d90:	f004 fddc 	bl	b994c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b4d94:	497b      	ldr	r1, [pc, #492]	; (b4f84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x904>)
   b4d96:	2204      	movs	r2, #4
   b4d98:	2064      	movs	r0, #100	; 0x64
   b4d9a:	f001 fc71 	bl	b6680 <HAL_EEPROM_Get>
      EEPROM.get(kReportingIntervalEEPROMAddress, reportingInterval);
   b4d9e:	f004 fdd5 	bl	b994c <_Z21__fetch_global_EEPROMv>
   b4da2:	2204      	movs	r2, #4
   b4da4:	4621      	mov	r1, r4
   b4da6:	20c8      	movs	r0, #200	; 0xc8
   b4da8:	f001 fc6a 	bl	b6680 <HAL_EEPROM_Get>
      txCharacteristic.setValue("\nCurrent value for WiFi connection interval is [");
   b4dac:	2200      	movs	r2, #0
   b4dae:	497b      	ldr	r1, [pc, #492]	; (b4f9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x91c>)
   b4db0:	4877      	ldr	r0, [pc, #476]	; (b4f90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x910>)
   b4db2:	f002 fa70 	bl	b7296 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(reportingInterval != -1){
   b4db6:	6823      	ldr	r3, [r4, #0]
   b4db8:	1c5a      	adds	r2, r3, #1
   b4dba:	d00f      	beq.n	b4ddc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x75c>
        txCharacteristic.setValue(String(reportingInterval / 1000));
   b4dbc:	220a      	movs	r2, #10
   b4dbe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b4dc2:	a801      	add	r0, sp, #4
   b4dc4:	fb93 f1f1 	sdiv	r1, r3, r1
   b4dc8:	f003 fdf7 	bl	b89ba <_ZN6StringC1Eih>
   b4dcc:	4870      	ldr	r0, [pc, #448]	; (b4f90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x910>)
   b4dce:	2200      	movs	r2, #0
   b4dd0:	a901      	add	r1, sp, #4
   b4dd2:	f002 fa5b 	bl	b728c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b4dd6:	a801      	add	r0, sp, #4
   b4dd8:	f003 fd64 	bl	b88a4 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between WiFi connections as an integer in seconds (blank to skip): ");
   b4ddc:	4970      	ldr	r1, [pc, #448]	; (b4fa0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x920>)
   b4dde:	2200      	movs	r2, #0
   b4de0:	e5a6      	b.n	b4930 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>
   b4de2:	4964      	ldr	r1, [pc, #400]	; (b4f74 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8f4>)
   b4de4:	4864      	ldr	r0, [pc, #400]	; (b4f78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8f8>)
   b4de6:	f003 fe72 	bl	b8ace <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == ""){
   b4dea:	b130      	cbz	r0, b4dfa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x77a>
        EEPROM.get(kReportingIntervalEEPROMAddress, reportingInterval);
   b4dec:	f004 fdae 	bl	b994c <_Z21__fetch_global_EEPROMv>
   b4df0:	4969      	ldr	r1, [pc, #420]	; (b4f98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x918>)
   b4df2:	2204      	movs	r2, #4
   b4df4:	20c8      	movs	r0, #200	; 0xc8
   b4df6:	f001 fc43 	bl	b6680 <HAL_EEPROM_Get>
      EEPROM.put(kReportingIntervalEEPROMAddress, reportingInterval);
   b4dfa:	f004 fda7 	bl	b994c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b4dfe:	4966      	ldr	r1, [pc, #408]	; (b4f98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x918>)
   b4e00:	2204      	movs	r2, #4
   b4e02:	20c8      	movs	r0, #200	; 0xc8
   b4e04:	f001 fc44 	bl	b6690 <HAL_EEPROM_Put>
      EEPROM.get(kReportingIntervalEEPROMAddress, reportingInterval);
   b4e08:	f004 fda0 	bl	b994c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b4e0c:	4962      	ldr	r1, [pc, #392]	; (b4f98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x918>)
   b4e0e:	2204      	movs	r2, #4
   b4e10:	20c8      	movs	r0, #200	; 0xc8
   b4e12:	f001 fc35 	bl	b6680 <HAL_EEPROM_Get>
      WITH_LOCK(Serial) {
   b4e16:	f004 fb79 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4e1a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4e1c:	f7ff f958 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(reportingInterval);
   b4e20:	f004 fb74 	bl	b950c <_Z16_fetch_usbserialv>
   b4e24:	f8d8 4000 	ldr.w	r4, [r8]
        if (n < 0 && base == 10) {
   b4e28:	2c00      	cmp	r4, #0
   b4e2a:	4605      	mov	r5, r0
   b4e2c:	da24      	bge.n	b4e78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7f8>
            t = print('-');
   b4e2e:	212d      	movs	r1, #45	; 0x2d
   b4e30:	f003 fc2a 	bl	b8688 <_ZN5Print5printEc>
            val = -n;
   b4e34:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b4e36:	220a      	movs	r2, #10
   b4e38:	4628      	mov	r0, r5
   b4e3a:	f003 fc44 	bl	b86c6 <_ZN5Print11printNumberEmh>
   b4e3e:	4c59      	ldr	r4, [pc, #356]	; (b4fa4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x924>)
        n += println();
   b4e40:	4628      	mov	r0, r5
   b4e42:	f003 fc2a 	bl	b869a <_ZN5Print7printlnEv>
      WITH_LOCK(Serial) {
   b4e46:	a801      	add	r0, sp, #4
   b4e48:	f7ff fab2 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      EEPROM.get(kReportingModeEEPROMAddress, reportingMode);
   b4e4c:	f004 fd7e 	bl	b994c <_Z21__fetch_global_EEPROMv>
   b4e50:	4621      	mov	r1, r4
   b4e52:	2204      	movs	r2, #4
   b4e54:	f44f 70b6 	mov.w	r0, #364	; 0x16c
   b4e58:	f001 fc12 	bl	b6680 <HAL_EEPROM_Get>
      if(reportingMode == 1) {
   b4e5c:	6823      	ldr	r3, [r4, #0]
        txCharacteristic.setValue("\nCurrent reporting mode is: normal");
   b4e5e:	484c      	ldr	r0, [pc, #304]	; (b4f90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x910>)
      if(reportingMode == 1) {
   b4e60:	2b01      	cmp	r3, #1
        txCharacteristic.setValue("\nCurrent reporting mode is: by exception\n");
   b4e62:	f04f 0200 	mov.w	r2, #0
   b4e66:	bf0e      	itee	eq
   b4e68:	494f      	ldreq	r1, [pc, #316]	; (b4fa8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x928>)
        txCharacteristic.setValue("\nCurrent reporting mode is: normal");
   b4e6a:	4950      	ldrne	r1, [pc, #320]	; (b4fac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x92c>)
        reportingMode = 0;
   b4e6c:	6022      	strne	r2, [r4, #0]
        txCharacteristic.setValue("\nCurrent reporting mode is: normal");
   b4e6e:	f002 fa12 	bl	b7296 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      txCharacteristic.setValue("\nEnter 'y' to enable exception reporting, 'n' to use normal reporting (blank to skip): ");
   b4e72:	494f      	ldr	r1, [pc, #316]	; (b4fb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x930>)
   b4e74:	2200      	movs	r2, #0
   b4e76:	e55b      	b.n	b4930 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>
            val = n;
   b4e78:	4621      	mov	r1, r4
   b4e7a:	e7dc      	b.n	b4e36 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7b6>
   b4e7c:	494d      	ldr	r1, [pc, #308]	; (b4fb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x934>)
   b4e7e:	483e      	ldr	r0, [pc, #248]	; (b4f78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8f8>)
   b4e80:	4c48      	ldr	r4, [pc, #288]	; (b4fa4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x924>)
   b4e82:	f003 fe24 	bl	b8ace <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == "y"){
   b4e86:	b1e0      	cbz	r0, b4ec2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x842>
        System.updatesEnabled();
   b4e88:	f7ff f92b 	bl	b40e2 <_ZN11SystemClass14updatesEnabledEv.isra.0>
        reportingMode = 1;
   b4e8c:	2301      	movs	r3, #1
   b4e8e:	6023      	str	r3, [r4, #0]
        EEPROM.put(kReportingModeEEPROMAddress, reportingMode);
   b4e90:	f004 fd5c 	bl	b994c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b4e94:	2204      	movs	r2, #4
   b4e96:	4621      	mov	r1, r4
   b4e98:	f44f 70b6 	mov.w	r0, #364	; 0x16c
   b4e9c:	f001 fbf8 	bl	b6690 <HAL_EEPROM_Put>
        EEPROM.get(kReportingModeEEPROMAddress, reportingMode);
   b4ea0:	f004 fd54 	bl	b994c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b4ea4:	2204      	movs	r2, #4
   b4ea6:	4621      	mov	r1, r4
   b4ea8:	f44f 70b6 	mov.w	r0, #364	; 0x16c
   b4eac:	f001 fbe8 	bl	b6680 <HAL_EEPROM_Get>
      Serial.printlnf("reporting mode: %i", reportingMode);
   b4eb0:	f004 fb2c 	bl	b950c <_Z16_fetch_usbserialv>
   b4eb4:	6822      	ldr	r2, [r4, #0]
   b4eb6:	4940      	ldr	r1, [pc, #256]	; (b4fb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x938>)
   b4eb8:	f7ff f91f 	bl	b40fa <_ZN5Print8printlnfEPKcz>
      txCharacteristic.setValue("\nEnter 'ota' to wait for OTA update (blank to skip): ");
   b4ebc:	493f      	ldr	r1, [pc, #252]	; (b4fbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x93c>)
   b4ebe:	2200      	movs	r2, #0
   b4ec0:	e536      	b.n	b4930 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>
        reportingMode = 0;
   b4ec2:	6020      	str	r0, [r4, #0]
   b4ec4:	e7e4      	b.n	b4e90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x810>
   b4ec6:	493e      	ldr	r1, [pc, #248]	; (b4fc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x940>)
   b4ec8:	482b      	ldr	r0, [pc, #172]	; (b4f78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8f8>)
   b4eca:	4c3e      	ldr	r4, [pc, #248]	; (b4fc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x944>)
   b4ecc:	f003 fdff 	bl	b8ace <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == "ota"){
   b4ed0:	b1a8      	cbz	r0, b4efe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x87e>
        System.updatesEnabled();
   b4ed2:	f7ff f906 	bl	b40e2 <_ZN11SystemClass14updatesEnabledEv.isra.0>
        waitingForOTA = true;
   b4ed6:	2301      	movs	r3, #1
   b4ed8:	7023      	strb	r3, [r4, #0]
        System.updatesEnabled();
   b4eda:	f7ff f902 	bl	b40e2 <_ZN11SystemClass14updatesEnabledEv.isra.0>
        WiFi.on();
   b4ede:	483a      	ldr	r0, [pc, #232]	; (b4fc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x948>)
        while(!WiFi.ready()) {
   b4ee0:	4c39      	ldr	r4, [pc, #228]	; (b4fc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x948>)
        WiFi.on();
   b4ee2:	f7ff f918 	bl	b4116 <_ZN5spark9WiFiClass2onEv>
        WiFi.connect();
   b4ee6:	4838      	ldr	r0, [pc, #224]	; (b4fc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x948>)
   b4ee8:	2100      	movs	r1, #0
   b4eea:	f7ff f920 	bl	b412e <_ZN5spark9WiFiClass7connectEj>
        while(!WiFi.ready()) {
   b4eee:	4620      	mov	r0, r4
   b4ef0:	f7ff f922 	bl	b4138 <_ZN5spark9WiFiClass5readyEv>
   b4ef4:	b948      	cbnz	r0, b4f0a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88a>
          delay(100);
   b4ef6:	2064      	movs	r0, #100	; 0x64
   b4ef8:	f001 fefa 	bl	b6cf0 <delay>
        while(!WiFi.ready()) {
   b4efc:	e7f7      	b.n	b4eee <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86e>
      if(waitingForOTA) {
   b4efe:	7823      	ldrb	r3, [r4, #0]
   b4f00:	2b00      	cmp	r3, #0
   b4f02:	d1ea      	bne.n	b4eda <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x85a>
      System.reset();
   b4f04:	f003 fe91 	bl	b8c2a <_ZN11SystemClass5resetEv>
   b4f08:	e515      	b.n	b4936 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b6>
        if(WiFi.ready() != true) {
   b4f0a:	482f      	ldr	r0, [pc, #188]	; (b4fc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x948>)
   b4f0c:	f7ff f914 	bl	b4138 <_ZN5spark9WiFiClass5readyEv>
   b4f10:	b968      	cbnz	r0, b4f2e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8ae>
          WITH_LOCK(Serial) {
   b4f12:	f004 fafb 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4f16:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4f18:	f7ff f8da 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
            Serial.println("WiFi failed to connect, skipping time synchronization");
   b4f1c:	f004 faf6 	bl	b950c <_Z16_fetch_usbserialv>
   b4f20:	492a      	ldr	r1, [pc, #168]	; (b4fcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94c>)
   b4f22:	f003 fbc6 	bl	b86b2 <_ZN5Print7printlnEPKc>
          WITH_LOCK(Serial) {
   b4f26:	a801      	add	r0, sp, #4
   b4f28:	f7ff fa42 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4f2c:	e7ea      	b.n	b4f04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x884>
          WITH_LOCK(Serial) {
   b4f2e:	f004 faed 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4f32:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4f34:	f7ff f8cc 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
            Serial.println("WiFi connected, awaiting update");
   b4f38:	f004 fae8 	bl	b950c <_Z16_fetch_usbserialv>
   b4f3c:	4924      	ldr	r1, [pc, #144]	; (b4fd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x950>)
   b4f3e:	f003 fbb8 	bl	b86b2 <_ZN5Print7printlnEPKc>
          WITH_LOCK(Serial) {
   b4f42:	a801      	add	r0, sp, #4
   b4f44:	f7ff fa34 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
          txCharacteristic.setValue("\nAwaiting OTA update");
   b4f48:	4922      	ldr	r1, [pc, #136]	; (b4fd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x954>)
   b4f4a:	4811      	ldr	r0, [pc, #68]	; (b4f90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x910>)
   b4f4c:	2200      	movs	r2, #0
   b4f4e:	f002 f9a2 	bl	b7296 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4f52:	f001 fdf5 	bl	b6b40 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4f56:	f001 fdfb 	bl	b6b50 <spark_cloud_flag_connected>
          while(!Particle.connected()) {
   b4f5a:	b130      	cbz	r0, b4f6a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8ea>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4f5c:	4c1e      	ldr	r4, [pc, #120]	; (b4fd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x958>)
		return HAL_Timer_Get_Milli_Seconds();
   b4f5e:	f001 fb7f 	bl	b6660 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b4f62:	6020      	str	r0, [r4, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b4f64:	f001 fde4 	bl	b6b30 <spark_process>
   b4f68:	e7f9      	b.n	b4f5e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8de>
            delay(100);
   b4f6a:	2064      	movs	r0, #100	; 0x64
   b4f6c:	f001 fec0 	bl	b6cf0 <delay>
          while(!Particle.connected()) {
   b4f70:	e7f1      	b.n	b4f56 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8d6>
   b4f72:	bf00      	nop
   b4f74:	000bab99 	.word	0x000bab99
   b4f78:	20031c4c 	.word	0x20031c4c
   b4f7c:	200322a8 	.word	0x200322a8
   b4f80:	000bac8e 	.word	0x000bac8e
   b4f84:	2003220c 	.word	0x2003220c
   b4f88:	000bacab 	.word	0x000bacab
   b4f8c:	000bacc2 	.word	0x000bacc2
   b4f90:	2003e67c 	.word	0x2003e67c
   b4f94:	000bacf3 	.word	0x000bacf3
   b4f98:	20032210 	.word	0x20032210
   b4f9c:	000bad48 	.word	0x000bad48
   b4fa0:	000bad79 	.word	0x000bad79
   b4fa4:	20032214 	.word	0x20032214
   b4fa8:	000badca 	.word	0x000badca
   b4fac:	000badf4 	.word	0x000badf4
   b4fb0:	000bae17 	.word	0x000bae17
   b4fb4:	000bae6f 	.word	0x000bae6f
   b4fb8:	000bae71 	.word	0x000bae71
   b4fbc:	000bae84 	.word	0x000bae84
   b4fc0:	000baeba 	.word	0x000baeba
   b4fc4:	2003e694 	.word	0x2003e694
   b4fc8:	2003e710 	.word	0x2003e710
   b4fcc:	000baebe 	.word	0x000baebe
   b4fd0:	000baef4 	.word	0x000baef4
   b4fd4:	000baf14 	.word	0x000baf14
   b4fd8:	2003e720 	.word	0x2003e720

000b4fdc <_GLOBAL__sub_I_SystemMode>:
    case SENDING: {
      //send data to server, not used 
      break;
    }
  }
}
   b4fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
              error_(SYSTEM_ERROR_NONE) {
   b4fe0:	4b64      	ldr	r3, [pc, #400]	; (b5174 <_GLOBAL__sub_I_SystemMode+0x198>)
    SleepResult() {}
   b4fe2:	4a65      	ldr	r2, [pc, #404]	; (b5178 <_GLOBAL__sub_I_SystemMode+0x19c>)
   b4fe4:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4fe6:	2400      	movs	r4, #0
   b4fe8:	b099      	sub	sp, #100	; 0x64
   b4fea:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b4fee:	2003      	movs	r0, #3
   b4ff0:	f001 fd36 	bl	b6a60 <set_system_mode>
SYSTEM_THREAD(ENABLED)
   b4ff4:	4621      	mov	r1, r4
   b4ff6:	2001      	movs	r0, #1
   b4ff8:	f001 fd42 	bl	b6a80 <system_thread_set_state>

int recordingInterval; // interval between lis3dh reads
int reportingInterval; // interval between reporting data to server in seconds
int sleepPauseDuration; // time of inactivity before sleep
int reportingMode; // 0 = reporting disabled, 1 = reporting enabled
String payload = "";
   b4ffc:	495f      	ldr	r1, [pc, #380]	; (b517c <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b4ffe:	4860      	ldr	r0, [pc, #384]	; (b5180 <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b5000:	4d60      	ldr	r5, [pc, #384]	; (b5184 <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b5002:	f003 fc9a 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
bool valuesChanged = false;
String unixTime;
   b5006:	495d      	ldr	r1, [pc, #372]	; (b517c <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b5008:	485f      	ldr	r0, [pc, #380]	; (b5188 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b500a:	f003 fc96 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
String ssid, password = "";
   b500e:	495b      	ldr	r1, [pc, #364]	; (b517c <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b5010:	485e      	ldr	r0, [pc, #376]	; (b518c <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b5012:	f003 fc92 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
   b5016:	4959      	ldr	r1, [pc, #356]	; (b517c <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b5018:	485d      	ldr	r0, [pc, #372]	; (b5190 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b501a:	f003 fc8e 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
float x, y, z;
uint8_t storedValues [10000];
long storedTimes [10000];
float prevX, prevY, prevZ;
int storedValuesIndex = 0;
String rolloverPayload = ""; 
   b501e:	4957      	ldr	r1, [pc, #348]	; (b517c <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b5020:	485c      	ldr	r0, [pc, #368]	; (b5194 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b5022:	f003 fc8a 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
  RECORDING,
  SENDING
};
uint8_t firmwareState = BLEWAIT;
bool bleWaitForConfig = false; //when true, firmware is waiting for user input over BLE b/c BLE was connected
String bleInputBuffer; // buffer for reading from BLE and writing to EEPROM
   b5026:	4955      	ldr	r1, [pc, #340]	; (b517c <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b5028:	485b      	ldr	r0, [pc, #364]	; (b5198 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b502a:	f003 fc86 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
        : config_(config) {
   b502e:	4b5b      	ldr	r3, [pc, #364]	; (b519c <_GLOBAL__sub_I_SystemMode+0x1c0>)
// os_mutex_t recordingSleepProtectionLock; // these 2 mutexes are used to prevent the system from sleeping
// os_mutex_t reportingSleepProtectionLock; // while recording/reporting are in the middle of an action (e.g. POSTing data or reading the accelerometer)
long sleepTimeoutCounter = 0; //counts consecutive data points that have been "0"
SystemSleepConfiguration sleepConfig;

const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b5030:	495b      	ldr	r1, [pc, #364]	; (b51a0 <_GLOBAL__sub_I_SystemMode+0x1c4>)
              valid_(true) {
   b5032:	611c      	str	r4, [r3, #16]
        : config_(config) {
   b5034:	1d1a      	adds	r2, r3, #4
   b5036:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b5038:	4a5a      	ldr	r2, [pc, #360]	; (b51a4 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   b503a:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b503c:	2201      	movs	r2, #1
   b503e:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b5042:	751a      	strb	r2, [r3, #20]
   b5044:	4858      	ldr	r0, [pc, #352]	; (b51a8 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b5046:	f002 f883 	bl	b7150 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b504a:	4958      	ldr	r1, [pc, #352]	; (b51ac <_GLOBAL__sub_I_SystemMode+0x1d0>)
   b504c:	4858      	ldr	r0, [pc, #352]	; (b51b0 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b504e:	f002 f87f 	bl	b7150 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b5052:	4958      	ldr	r1, [pc, #352]	; (b51b4 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b5054:	4858      	ldr	r0, [pc, #352]	; (b51b8 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b5056:	f002 f87b 	bl	b7150 <_ZN8particle7BleUuidC1EPKc>
HttpClient http;
   b505a:	4858      	ldr	r0, [pc, #352]	; (b51bc <_GLOBAL__sub_I_SystemMode+0x1e0>)
   b505c:	f000 ffcd 	bl	b5ffa <_ZN10HttpClientC1Ev>
http_request_t request;
   b5060:	4857      	ldr	r0, [pc, #348]	; (b51c0 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b5062:	f7ff f86f 	bl	b4144 <_ZN14http_request_tC1Ev>
} http_response_t;
   b5066:	4945      	ldr	r1, [pc, #276]	; (b517c <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b5068:	4856      	ldr	r0, [pc, #344]	; (b51c4 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   b506a:	f003 fc66 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
http_request_t timerequest;
   b506e:	4856      	ldr	r0, [pc, #344]	; (b51c8 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b5070:	f7ff f868 	bl	b4144 <_ZN14http_request_tC1Ev>
   b5074:	4941      	ldr	r1, [pc, #260]	; (b517c <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b5076:	4855      	ldr	r0, [pc, #340]	; (b51cc <_GLOBAL__sub_I_SystemMode+0x1f0>)
   b5078:	f003 fc5f 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
   b507c:	2405      	movs	r4, #5
#ifdef __cplusplus

   WiFiAccessPoint()
   {
       memset(this, 0, sizeof(*this));
       size = sizeof(*this);
   b507e:	2638      	movs	r6, #56	; 0x38
       memset(this, 0, sizeof(*this));
   b5080:	1d28      	adds	r0, r5, #4
   b5082:	2234      	movs	r2, #52	; 0x34
   b5084:	2100      	movs	r1, #0
   b5086:	f005 fadd 	bl	ba644 <memset>
WiFiAccessPoint networks[5];
   b508a:	3c01      	subs	r4, #1
       size = sizeof(*this);
   b508c:	f845 6b38 	str.w	r6, [r5], #56
   b5090:	d1f6      	bne.n	b5080 <_GLOBAL__sub_I_SystemMode+0xa4>
String networkBuffer;
   b5092:	493a      	ldr	r1, [pc, #232]	; (b517c <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b5094:	484e      	ldr	r0, [pc, #312]	; (b51d0 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   b5096:	4d48      	ldr	r5, [pc, #288]	; (b51b8 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b5098:	f8df 910c 	ldr.w	r9, [pc, #268]	; b51a8 <_GLOBAL__sub_I_SystemMode+0x1cc>
   b509c:	f003 fc4d 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
Adafruit_LIS3DH lis3dh = Adafruit_LIS3DH();
   b50a0:	484c      	ldr	r0, [pc, #304]	; (b51d4 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b50a2:	f000 fd57 	bl	b5b54 <_ZN15Adafruit_LIS3DHC1Ev>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b50a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b50a8:	f10d 0b10 	add.w	fp, sp, #16
   b50ac:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
   b50b0:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b50b4:	682f      	ldr	r7, [r5, #0]
   b50b6:	f8cb 7000 	str.w	r7, [fp]
   b50ba:	f10d 0824 	add.w	r8, sp, #36	; 0x24
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b50be:	ad04      	add	r5, sp, #16
   b50c0:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   b50c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b50c6:	ae0e      	add	r6, sp, #56	; 0x38
   b50c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b50ca:	46ca      	mov	sl, r9
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b50cc:	f8df c114 	ldr.w	ip, [pc, #276]	; b51e4 <_GLOBAL__sub_I_SystemMode+0x208>
   b50d0:	f85a e910 	ldr.w	lr, [sl], #-16
   b50d4:	f8c8 e000 	str.w	lr, [r8]
   b50d8:	6037      	str	r7, [r6, #0]
        BleUuid sUuid(svcUuid);
   b50da:	af09      	add	r7, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b50dc:	e9cc 4400 	strd	r4, r4, [ip]
   b50e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b50e2:	ad13      	add	r5, sp, #76	; 0x4c
   b50e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b50e6:	af13      	add	r7, sp, #76	; 0x4c
        BleUuid sUuid(svcUuid);
   b50e8:	f8c5 e000 	str.w	lr, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b50ec:	ab0e      	add	r3, sp, #56	; 0x38
   b50ee:	4660      	mov	r0, ip
   b50f0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b50f4:	4938      	ldr	r1, [pc, #224]	; (b51d8 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   b50f6:	9700      	str	r7, [sp, #0]
   b50f8:	f04f 0210 	mov.w	r2, #16
   b50fc:	f002 fe12 	bl	b7d24 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b5100:	f8df c0ac 	ldr.w	ip, [pc, #172]	; b51b0 <_GLOBAL__sub_I_SystemMode+0x1d4>
   b5104:	f8d9 9000 	ldr.w	r9, [r9]
   b5108:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b510c:	f10d 0e10 	add.w	lr, sp, #16
   b5110:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5114:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
   b5118:	f8dc e000 	ldr.w	lr, [ip]
   b511c:	f8cb e000 	str.w	lr, [fp]
   b5120:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b5124:	f10d 0a10 	add.w	sl, sp, #16
   b5128:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b512c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
   b5130:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   b5134:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5138:	f8c8 9000 	str.w	r9, [r8]
      : _M_ptr(0), _M_refcount()
   b513c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; b51e8 <_GLOBAL__sub_I_SystemMode+0x20c>
   b5140:	f8c6 e000 	str.w	lr, [r6]
        BleUuid sUuid(svcUuid);
   b5144:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b5148:	e9c8 4400 	strd	r4, r4, [r8]
   b514c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5150:	463e      	mov	r6, r7
   b5152:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5154:	4b21      	ldr	r3, [pc, #132]	; (b51dc <_GLOBAL__sub_I_SystemMode+0x200>)
        BleUuid sUuid(svcUuid);
   b5156:	f8c5 9000 	str.w	r9, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b515a:	4921      	ldr	r1, [pc, #132]	; (b51e0 <_GLOBAL__sub_I_SystemMode+0x204>)
   b515c:	9402      	str	r4, [sp, #8]
   b515e:	e9cd 7300 	strd	r7, r3, [sp]
   b5162:	f04f 0204 	mov.w	r2, #4
   b5166:	ab0e      	add	r3, sp, #56	; 0x38
   b5168:	4640      	mov	r0, r8
   b516a:	f002 fddb 	bl	b7d24 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
}
   b516e:	b019      	add	sp, #100	; 0x64
   b5170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5174:	20031c04 	.word	0x20031c04
   b5178:	ffff0000 	.word	0xffff0000
   b517c:	000bab99 	.word	0x000bab99
   b5180:	200321f0 	.word	0x200321f0
   b5184:	200320c8 	.word	0x200320c8
   b5188:	2003e684 	.word	0x2003e684
   b518c:	200322b0 	.word	0x200322b0
   b5190:	200321e0 	.word	0x200321e0
   b5194:	20032278 	.word	0x20032278
   b5198:	20031c4c 	.word	0x20031c4c
   b519c:	20032290 	.word	0x20032290
   b51a0:	000baf29 	.word	0x000baf29
   b51a4:	00030010 	.word	0x00030010
   b51a8:	20031c10 	.word	0x20031c10
   b51ac:	000baf4e 	.word	0x000baf4e
   b51b0:	20031c24 	.word	0x20031c24
   b51b4:	000baf73 	.word	0x000baf73
   b51b8:	20031c38 	.word	0x20031c38
   b51bc:	20031c6c 	.word	0x20031c6c
   b51c0:	20032218 	.word	0x20032218
   b51c4:	20032268 	.word	0x20032268
   b51c8:	2003e61c 	.word	0x2003e61c
   b51cc:	2003e66c 	.word	0x2003e66c
   b51d0:	200320b4 	.word	0x200320b4
   b51d4:	20032088 	.word	0x20032088
   b51d8:	000baf98 	.word	0x000baf98
   b51dc:	000b4681 	.word	0x000b4681
   b51e0:	000baf9b 	.word	0x000baf9b
   b51e4:	2003e67c 	.word	0x2003e67c
   b51e8:	20032288 	.word	0x20032288

000b51ec <_Z10reportData6String>:

void reportData(String payload) {
   b51ec:	b530      	push	{r4, r5, lr}
   b51ee:	4604      	mov	r4, r0
   b51f0:	b089      	sub	sp, #36	; 0x24
  if(WiFi.ready() != true) {
   b51f2:	485c      	ldr	r0, [pc, #368]	; (b5364 <_Z10reportData6String+0x178>)
   b51f4:	f7fe ffa0 	bl	b4138 <_ZN5spark9WiFiClass5readyEv>
   b51f8:	b980      	cbnz	r0, b521c <_Z10reportData6String+0x30>
    if(WiFi.isOn() != true) {
   b51fa:	485a      	ldr	r0, [pc, #360]	; (b5364 <_Z10reportData6String+0x178>)
   b51fc:	f003 f986 	bl	b850c <_ZN5spark12NetworkClass4isOnEv>
   b5200:	b910      	cbnz	r0, b5208 <_Z10reportData6String+0x1c>
      WiFi.on();
   b5202:	4858      	ldr	r0, [pc, #352]	; (b5364 <_Z10reportData6String+0x178>)
   b5204:	f7fe ff87 	bl	b4116 <_ZN5spark9WiFiClass2onEv>
    }
    WiFi.connect();
   b5208:	4856      	ldr	r0, [pc, #344]	; (b5364 <_Z10reportData6String+0x178>)
    while(!WiFi.ready()) {
   b520a:	4d56      	ldr	r5, [pc, #344]	; (b5364 <_Z10reportData6String+0x178>)
    WiFi.connect();
   b520c:	2100      	movs	r1, #0
   b520e:	f7fe ff8e 	bl	b412e <_ZN5spark9WiFiClass7connectEj>
    while(!WiFi.ready()) {
   b5212:	4628      	mov	r0, r5
   b5214:	f7fe ff90 	bl	b4138 <_ZN5spark9WiFiClass5readyEv>
   b5218:	2800      	cmp	r0, #0
   b521a:	d0fa      	beq.n	b5212 <_Z10reportData6String+0x26>
      
    }
  }

  WITH_LOCK(Serial) {
   b521c:	f004 f976 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5220:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b5222:	f7fe ff55 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("WiFi connected, reporting data");
   b5226:	f004 f971 	bl	b950c <_Z16_fetch_usbserialv>
   b522a:	494f      	ldr	r1, [pc, #316]	; (b5368 <_Z10reportData6String+0x17c>)
   b522c:	f003 fa41 	bl	b86b2 <_ZN5Print7printlnEPKc>
  WITH_LOCK(Serial) {
   b5230:	a804      	add	r0, sp, #16
   b5232:	f7ff f8bd 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5236:	494d      	ldr	r1, [pc, #308]	; (b536c <_Z10reportData6String+0x180>)
   b5238:	484d      	ldr	r0, [pc, #308]	; (b5370 <_Z10reportData6String+0x184>)
   b523a:	f003 fc48 	bl	b8ace <_ZNK6String6equalsEPKc>
  }
  if(rolloverPayload != "") {
   b523e:	b9e8      	cbnz	r0, b527c <_Z10reportData6String+0x90>
    WITH_LOCK(Serial) {
   b5240:	f004 f964 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5244:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   b5246:	f7fe ff43 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("Rollover payload: " + rolloverPayload);
   b524a:	f004 f95f 	bl	b950c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b524e:	4949      	ldr	r1, [pc, #292]	; (b5374 <_Z10reportData6String+0x188>)
   b5250:	4605      	mov	r5, r0
   b5252:	a804      	add	r0, sp, #16
   b5254:	f003 fb71 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
   b5258:	4945      	ldr	r1, [pc, #276]	; (b5370 <_Z10reportData6String+0x184>)
   b525a:	a804      	add	r0, sp, #16
   b525c:	f003 fc0c 	bl	b8a78 <_ZplRK15StringSumHelperRK6String>
   b5260:	6801      	ldr	r1, [r0, #0]
   b5262:	4628      	mov	r0, r5
   b5264:	f003 fa25 	bl	b86b2 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b5268:	a804      	add	r0, sp, #16
   b526a:	f003 fb1b 	bl	b88a4 <_ZN6StringD1Ev>
    WITH_LOCK(Serial) {
   b526e:	a803      	add	r0, sp, #12
   b5270:	f7ff f89e 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5274:	493e      	ldr	r1, [pc, #248]	; (b5370 <_Z10reportData6String+0x184>)
   b5276:	4620      	mov	r0, r4
   b5278:	f003 fbdc 	bl	b8a34 <_ZN6String6concatERKS_>
    }
    payload += rolloverPayload;
  }
  payload.remove(payload.length() - 1);
   b527c:	68a1      	ldr	r1, [r4, #8]
    }

    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
   b527e:	4d3e      	ldr	r5, [pc, #248]	; (b5378 <_Z10reportData6String+0x18c>)
   b5280:	3901      	subs	r1, #1
   b5282:	4620      	mov	r0, r4
   b5284:	f003 fc89 	bl	b8b9a <_ZN6String6removeEj>
	StringSumHelper(const char *p) : String(p) {}
   b5288:	493c      	ldr	r1, [pc, #240]	; (b537c <_Z10reportData6String+0x190>)
   b528a:	a804      	add	r0, sp, #16
   b528c:	f003 fb55 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
  request.body = "{\"data\":[" + payload + "]}";
   b5290:	4621      	mov	r1, r4
   b5292:	a804      	add	r0, sp, #16
   b5294:	f003 fbf0 	bl	b8a78 <_ZplRK15StringSumHelperRK6String>
   b5298:	4939      	ldr	r1, [pc, #228]	; (b5380 <_Z10reportData6String+0x194>)
   b529a:	f003 fbf9 	bl	b8a90 <_ZplRK15StringSumHelperPKc>
   b529e:	4601      	mov	r1, r0
   b52a0:	4838      	ldr	r0, [pc, #224]	; (b5384 <_Z10reportData6String+0x198>)
   b52a2:	f003 fb5e 	bl	b8962 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b52a6:	a804      	add	r0, sp, #16
   b52a8:	f003 fafc 	bl	b88a4 <_ZN6StringD1Ev>
  WITH_LOCK(Serial){
   b52ac:	f004 f92e 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b52b0:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b52b2:	f7fe ff0d 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
   b52b6:	4b34      	ldr	r3, [pc, #208]	; (b5388 <_Z10reportData6String+0x19c>)
   b52b8:	4934      	ldr	r1, [pc, #208]	; (b538c <_Z10reportData6String+0x1a0>)
   b52ba:	9300      	str	r3, [sp, #0]
   b52bc:	462a      	mov	r2, r5
   b52be:	4b34      	ldr	r3, [pc, #208]	; (b5390 <_Z10reportData6String+0x1a4>)
   b52c0:	4834      	ldr	r0, [pc, #208]	; (b5394 <_Z10reportData6String+0x1a8>)
   b52c2:	f000 fefb 	bl	b60bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
   b52c6:	a804      	add	r0, sp, #16
   b52c8:	f7ff f872 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
    http.post(request, response, headers); //http library is not thread safe with serial, so we need to lock it to prevent panic
  }
  WITH_LOCK(Serial) {
   b52cc:	f004 f91e 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b52d0:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b52d2:	f7fe fefd 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("Status: " + response.status);
   b52d6:	f004 f919 	bl	b950c <_Z16_fetch_usbserialv>
   b52da:	682b      	ldr	r3, [r5, #0]
   b52dc:	492e      	ldr	r1, [pc, #184]	; (b5398 <_Z10reportData6String+0x1ac>)
   b52de:	4419      	add	r1, r3
   b52e0:	f003 f9e7 	bl	b86b2 <_ZN5Print7printlnEPKc>
  WITH_LOCK(Serial) {
   b52e4:	a804      	add	r0, sp, #16
   b52e6:	f7ff f863 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  }
  WITH_LOCK(Serial) {
   b52ea:	f004 f90f 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b52ee:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   b52f0:	f7fe feee 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("Body: " + response.body);
   b52f4:	f004 f90a 	bl	b950c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b52f8:	4928      	ldr	r1, [pc, #160]	; (b539c <_Z10reportData6String+0x1b0>)
   b52fa:	4604      	mov	r4, r0
   b52fc:	a804      	add	r0, sp, #16
   b52fe:	f003 fb1c 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
   b5302:	1d29      	adds	r1, r5, #4
   b5304:	a804      	add	r0, sp, #16
   b5306:	f003 fbb7 	bl	b8a78 <_ZplRK15StringSumHelperRK6String>
   b530a:	6801      	ldr	r1, [r0, #0]
   b530c:	4620      	mov	r0, r4
   b530e:	f003 f9d0 	bl	b86b2 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b5312:	a804      	add	r0, sp, #16
   b5314:	f003 fac6 	bl	b88a4 <_ZN6StringD1Ev>
  WITH_LOCK(Serial) {
   b5318:	a803      	add	r0, sp, #12
   b531a:	f7ff f849 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  }
  WITH_LOCK(Serial) {
   b531e:	f004 f8f5 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5322:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   b5324:	f7fe fed4 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("ReqBody: " + request.body);
   b5328:	f004 f8f0 	bl	b950c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b532c:	491c      	ldr	r1, [pc, #112]	; (b53a0 <_Z10reportData6String+0x1b4>)
   b532e:	4604      	mov	r4, r0
   b5330:	a804      	add	r0, sp, #16
   b5332:	f003 fb02 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
   b5336:	4913      	ldr	r1, [pc, #76]	; (b5384 <_Z10reportData6String+0x198>)
   b5338:	a804      	add	r0, sp, #16
   b533a:	f003 fb9d 	bl	b8a78 <_ZplRK15StringSumHelperRK6String>
   b533e:	6801      	ldr	r1, [r0, #0]
   b5340:	4620      	mov	r0, r4
   b5342:	f003 f9b6 	bl	b86b2 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b5346:	a804      	add	r0, sp, #16
   b5348:	f003 faac 	bl	b88a4 <_ZN6StringD1Ev>
  WITH_LOCK(Serial) {
   b534c:	a803      	add	r0, sp, #12
   b534e:	f7ff f82f 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  }
  rolloverPayload = "";
   b5352:	4906      	ldr	r1, [pc, #24]	; (b536c <_Z10reportData6String+0x180>)
   b5354:	4806      	ldr	r0, [pc, #24]	; (b5370 <_Z10reportData6String+0x184>)
   b5356:	f003 fb1e 	bl	b8996 <_ZN6StringaSEPKc>
  
  WiFi.off();
   b535a:	4802      	ldr	r0, [pc, #8]	; (b5364 <_Z10reportData6String+0x178>)
   b535c:	f7fe fee1 	bl	b4122 <_ZN5spark9WiFiClass3offEv>
   b5360:	b009      	add	sp, #36	; 0x24
   b5362:	bd30      	pop	{r4, r5, pc}
   b5364:	2003e710 	.word	0x2003e710
   b5368:	000bafd6 	.word	0x000bafd6
   b536c:	000bab99 	.word	0x000bab99
   b5370:	20032278 	.word	0x20032278
   b5374:	000baf9e 	.word	0x000baf9e
   b5378:	20032264 	.word	0x20032264
   b537c:	000bafb1 	.word	0x000bafb1
   b5380:	000bafbb 	.word	0x000bafbb
   b5384:	20032254 	.word	0x20032254
   b5388:	000bafbe 	.word	0x000bafbe
   b538c:	20032218 	.word	0x20032218
   b5390:	20031b80 	.word	0x20031b80
   b5394:	20031c6c 	.word	0x20031c6c
   b5398:	000bafc3 	.word	0x000bafc3
   b539c:	000bafcf 	.word	0x000bafcf
   b53a0:	000bafcc 	.word	0x000bafcc

000b53a4 <_Z11engageSleepv>:

void engageSleep() {
   b53a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b53a8:	b08d      	sub	sp, #52	; 0x34
  WITH_LOCK(Serial) {
   b53aa:	f004 f8af 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b53ae:	9008      	str	r0, [sp, #32]
      { _M_device.lock(); }
   b53b0:	f7fe fe8e 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("Engaging sleep.");
   b53b4:	f004 f8aa 	bl	b950c <_Z16_fetch_usbserialv>
   b53b8:	4944      	ldr	r1, [pc, #272]	; (b54cc <_Z11engageSleepv+0x128>)
  }
  WITH_LOCK(Serial) {
    Serial.println(">>> CONTINUING REPORTING DATA");
    Serial.printlnf("storedValuesIndex: %i", storedValuesIndex);
   b53ba:	4c45      	ldr	r4, [pc, #276]	; (b54d0 <_Z11engageSleepv+0x12c>)
   b53bc:	f8df 813c 	ldr.w	r8, [pc, #316]	; b54fc <_Z11engageSleepv+0x158>
   b53c0:	4f44      	ldr	r7, [pc, #272]	; (b54d4 <_Z11engageSleepv+0x130>)
	StringSumHelper(const char *p) : String(p) {}
   b53c2:	f8df b13c 	ldr.w	fp, [pc, #316]	; b5500 <_Z11engageSleepv+0x15c>
  }
  for (int i = 0; i < storedValuesIndex; i++) {
    //Serial.printf("{timestamp: %i, data: %i}, ", storedTimes[i], storedValues[i]);
    payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b53c6:	f8df a13c 	ldr.w	sl, [pc, #316]	; b5504 <_Z11engageSleepv+0x160>
   b53ca:	f8df 913c 	ldr.w	r9, [pc, #316]	; b5508 <_Z11engageSleepv+0x164>
    Serial.println("Engaging sleep.");
   b53ce:	f003 f970 	bl	b86b2 <_ZN5Print7printlnEPKc>
  WITH_LOCK(Serial) {
   b53d2:	a808      	add	r0, sp, #32
   b53d4:	f7fe ffec 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  WITH_LOCK(Serial) {
   b53d8:	f004 f898 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b53dc:	9008      	str	r0, [sp, #32]
      { _M_device.lock(); }
   b53de:	f7fe fe77 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
    Serial.println(">>> CONTINUING REPORTING DATA");
   b53e2:	f004 f893 	bl	b950c <_Z16_fetch_usbserialv>
   b53e6:	493c      	ldr	r1, [pc, #240]	; (b54d8 <_Z11engageSleepv+0x134>)
   b53e8:	f003 f963 	bl	b86b2 <_ZN5Print7printlnEPKc>
    Serial.printlnf("storedValuesIndex: %i", storedValuesIndex);
   b53ec:	f004 f88e 	bl	b950c <_Z16_fetch_usbserialv>
   b53f0:	6822      	ldr	r2, [r4, #0]
   b53f2:	493a      	ldr	r1, [pc, #232]	; (b54dc <_Z11engageSleepv+0x138>)
   b53f4:	f7fe fe81 	bl	b40fa <_ZN5Print8printlnfEPKcz>
  WITH_LOCK(Serial) {
   b53f8:	a808      	add	r0, sp, #32
   b53fa:	f7fe ffd9 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
  for (int i = 0; i < storedValuesIndex; i++) {
   b53fe:	2500      	movs	r5, #0
   b5400:	6823      	ldr	r3, [r4, #0]
   b5402:	42ab      	cmp	r3, r5
   b5404:	dd34      	ble.n	b5470 <_Z11engageSleepv+0xcc>
   b5406:	4659      	mov	r1, fp
   b5408:	a804      	add	r0, sp, #16
   b540a:	f003 fa96 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
    payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b540e:	220a      	movs	r2, #10
   b5410:	f8da 1000 	ldr.w	r1, [sl]
   b5414:	4668      	mov	r0, sp
   b5416:	f003 fad0 	bl	b89ba <_ZN6StringC1Eih>
   b541a:	4669      	mov	r1, sp
   b541c:	a804      	add	r0, sp, #16
   b541e:	f003 fb2b 	bl	b8a78 <_ZplRK15StringSumHelperRK6String>
   b5422:	4649      	mov	r1, r9
   b5424:	f003 fb34 	bl	b8a90 <_ZplRK15StringSumHelperPKc>
   b5428:	f818 1b01 	ldrb.w	r1, [r8], #1
   b542c:	f003 fb45 	bl	b8aba <_ZplRK15StringSumHelperh>
   b5430:	492b      	ldr	r1, [pc, #172]	; (b54e0 <_Z11engageSleepv+0x13c>)
   b5432:	f003 fb2d 	bl	b8a90 <_ZplRK15StringSumHelperPKc>
   b5436:	220a      	movs	r2, #10
   b5438:	f857 1b04 	ldr.w	r1, [r7], #4
   b543c:	4606      	mov	r6, r0
   b543e:	a808      	add	r0, sp, #32
   b5440:	f003 face 	bl	b89e0 <_ZN6StringC1Elh>
   b5444:	a908      	add	r1, sp, #32
   b5446:	4630      	mov	r0, r6
   b5448:	f003 fb16 	bl	b8a78 <_ZplRK15StringSumHelperRK6String>
   b544c:	4925      	ldr	r1, [pc, #148]	; (b54e4 <_Z11engageSleepv+0x140>)
   b544e:	f003 fb1f 	bl	b8a90 <_ZplRK15StringSumHelperPKc>
   b5452:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5454:	4824      	ldr	r0, [pc, #144]	; (b54e8 <_Z11engageSleepv+0x144>)
   b5456:	f003 faed 	bl	b8a34 <_ZN6String6concatERKS_>
   b545a:	a808      	add	r0, sp, #32
   b545c:	f003 fa22 	bl	b88a4 <_ZN6StringD1Ev>
   b5460:	4668      	mov	r0, sp
   b5462:	f003 fa1f 	bl	b88a4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b5466:	a804      	add	r0, sp, #16
   b5468:	f003 fa1c 	bl	b88a4 <_ZN6StringD1Ev>
  for (int i = 0; i < storedValuesIndex; i++) {
   b546c:	3501      	adds	r5, #1
   b546e:	e7c7      	b.n	b5400 <_Z11engageSleepv+0x5c>
  }
  storedValuesIndex = 0;
   b5470:	2300      	movs	r3, #0
  String localPayload = payload;
   b5472:	491d      	ldr	r1, [pc, #116]	; (b54e8 <_Z11engageSleepv+0x144>)
  storedValuesIndex = 0;
   b5474:	6023      	str	r3, [r4, #0]
  String localPayload = payload;
   b5476:	a804      	add	r0, sp, #16
   b5478:	f003 fa82 	bl	b8980 <_ZN6StringC1ERKS_>
  payload = "";
   b547c:	491b      	ldr	r1, [pc, #108]	; (b54ec <_Z11engageSleepv+0x148>)
   b547e:	481a      	ldr	r0, [pc, #104]	; (b54e8 <_Z11engageSleepv+0x144>)

  reportData(localPayload);

  while(WiFi.isOn()) {}
   b5480:	4c1b      	ldr	r4, [pc, #108]	; (b54f0 <_Z11engageSleepv+0x14c>)
  payload = "";
   b5482:	f003 fa88 	bl	b8996 <_ZN6StringaSEPKc>
  reportData(localPayload);
   b5486:	a904      	add	r1, sp, #16
   b5488:	a808      	add	r0, sp, #32
   b548a:	f003 fa79 	bl	b8980 <_ZN6StringC1ERKS_>
   b548e:	a808      	add	r0, sp, #32
   b5490:	f7ff feac 	bl	b51ec <_Z10reportData6String>
   b5494:	a808      	add	r0, sp, #32
   b5496:	f003 fa05 	bl	b88a4 <_ZN6StringD1Ev>
  while(WiFi.isOn()) {}
   b549a:	4620      	mov	r0, r4
   b549c:	f003 f836 	bl	b850c <_ZN5spark12NetworkClass4isOnEv>
   b54a0:	2800      	cmp	r0, #0
   b54a2:	d1fa      	bne.n	b549a <_Z11engageSleepv+0xf6>
  // init_ACC();

  delay(100);
   b54a4:	2064      	movs	r0, #100	; 0x64
   b54a6:	f001 fc23 	bl	b6cf0 <delay>
  System.sleep(sleepConfig);
   b54aa:	a808      	add	r0, sp, #32
   b54ac:	4911      	ldr	r1, [pc, #68]	; (b54f4 <_Z11engageSleepv+0x150>)
   b54ae:	f003 fbbf 	bl	b8c30 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   b54b2:	9808      	ldr	r0, [sp, #32]
   b54b4:	b108      	cbz	r0, b54ba <_Z11engageSleepv+0x116>
            free(wakeupSource_);
   b54b6:	f001 fbe3 	bl	b6c80 <free>
  sleepTimeoutCounter = 0;
   b54ba:	4b0f      	ldr	r3, [pc, #60]	; (b54f8 <_Z11engageSleepv+0x154>)
   b54bc:	2200      	movs	r2, #0
  String localPayload = payload;
   b54be:	a804      	add	r0, sp, #16
  sleepTimeoutCounter = 0;
   b54c0:	601a      	str	r2, [r3, #0]
  String localPayload = payload;
   b54c2:	f003 f9ef 	bl	b88a4 <_ZN6StringD1Ev>
  // init_ACC();
  // os_mutex_unlock(reportingSleepProtectionLock);
   b54c6:	b00d      	add	sp, #52	; 0x34
   b54c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b54cc:	000baff5 	.word	0x000baff5
   b54d0:	2003e610 	.word	0x2003e610
   b54d4:	200322c0 	.word	0x200322c0
   b54d8:	000bb005 	.word	0x000bb005
   b54dc:	000bb023 	.word	0x000bb023
   b54e0:	000bb04d 	.word	0x000bb04d
   b54e4:	000bb05c 	.word	0x000bb05c
   b54e8:	200321f0 	.word	0x200321f0
   b54ec:	000bab99 	.word	0x000bab99
   b54f0:	2003e710 	.word	0x2003e710
   b54f4:	20032290 	.word	0x20032290
   b54f8:	200322ac 	.word	0x200322ac
   b54fc:	2003bf00 	.word	0x2003bf00
   b5500:	000bb039 	.word	0x000bb039
   b5504:	20031c64 	.word	0x20031c64
   b5508:	000bb042 	.word	0x000bb042
   b550c:	00000000 	.word	0x00000000

000b5510 <loop>:
void loop() {
   b5510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5514:	ed2d 8b02 	vpush	{d8}
  switch (firmwareState) {
   b5518:	4e70      	ldr	r6, [pc, #448]	; (b56dc <loop+0x1cc>)
  wd.pet();
   b551a:	4871      	ldr	r0, [pc, #452]	; (b56e0 <loop+0x1d0>)
void loop() {
   b551c:	b093      	sub	sp, #76	; 0x4c
  wd.pet();
   b551e:	f000 ffd5 	bl	b64cc <_ZN8WatchDog3petEv>
  switch (firmwareState) {
   b5522:	7837      	ldrb	r7, [r6, #0]
   b5524:	b13f      	cbz	r7, b5536 <loop+0x26>
   b5526:	2f01      	cmp	r7, #1
   b5528:	f000 80f0 	beq.w	b570c <loop+0x1fc>
}
   b552c:	b013      	add	sp, #76	; 0x4c
   b552e:	ecbd 8b02 	vpop	{d8}
   b5532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      WITH_LOCK(Serial) {
   b5536:	f003 ffe9 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b553a:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b553c:	f7fe fdc8 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("BLEWAIT");
   b5540:	f003 ffe4 	bl	b950c <_Z16_fetch_usbserialv>
   b5544:	4967      	ldr	r1, [pc, #412]	; (b56e4 <loop+0x1d4>)
   b5546:	4d68      	ldr	r5, [pc, #416]	; (b56e8 <loop+0x1d8>)
   b5548:	f003 f8b3 	bl	b86b2 <_ZN5Print7printlnEPKc>
      WITH_LOCK(Serial) {
   b554c:	a80d      	add	r0, sp, #52	; 0x34
   b554e:	f7fe ff2f 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      BLE.on();
   b5552:	f001 ff6d 	bl	b7430 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5556:	f001 ffb5 	bl	b74c4 <_ZNK8particle14BleLocalDevice2onEv>
      BLE.addCharacteristic(txCharacteristic);
   b555a:	f001 ff69 	bl	b7430 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b555e:	4a63      	ldr	r2, [pc, #396]	; (b56ec <loop+0x1dc>)
   b5560:	4601      	mov	r1, r0
   b5562:	a80d      	add	r0, sp, #52	; 0x34
   b5564:	f002 fd50 	bl	b8008 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5568:	a80d      	add	r0, sp, #52	; 0x34
   b556a:	f002 f870 	bl	b764e <_ZN8particle17BleCharacteristicD1Ev>
      BLE.addCharacteristic(rxCharacteristic);
   b556e:	f001 ff5f 	bl	b7430 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5572:	4a5f      	ldr	r2, [pc, #380]	; (b56f0 <loop+0x1e0>)
   b5574:	4601      	mov	r1, r0
   b5576:	a80d      	add	r0, sp, #52	; 0x34
   b5578:	f002 fd46 	bl	b8008 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b557c:	a80d      	add	r0, sp, #52	; 0x34
   b557e:	f002 f866 	bl	b764e <_ZN8particle17BleCharacteristicD1Ev>
      BleAdvertisingData data;
   b5582:	a804      	add	r0, sp, #16
   b5584:	f002 f9b9 	bl	b78fa <_ZN8particle18BleAdvertisingDataC1Ev>
      data.appendServiceUUID(serviceUuid);
   b5588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b558a:	ac08      	add	r4, sp, #32
   b558c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b558e:	f8d5 c000 	ldr.w	ip, [r5]
   b5592:	f8c4 c000 	str.w	ip, [r4]
        BleUuid tempUUID(uuid);
   b5596:	ad08      	add	r5, sp, #32
   b5598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b559a:	ac0d      	add	r4, sp, #52	; 0x34
   b559c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b559e:	a80d      	add	r0, sp, #52	; 0x34
        BleUuid tempUUID(uuid);
   b55a0:	f8c4 c000 	str.w	ip, [r4]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b55a4:	f001 fd36 	bl	b7014 <_ZNK8particle7BleUuid4typeEv>
   b55a8:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b55aa:	a80d      	add	r0, sp, #52	; 0x34
        if (tempUUID.type() == BleUuidType::SHORT) {
   b55ac:	2c00      	cmp	r4, #0
   b55ae:	d13f      	bne.n	b5630 <loop+0x120>
            uint16_t uuid16 = tempUUID.shorted();
   b55b0:	f001 fd4c 	bl	b704c <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b55b4:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b55b6:	f8ad 000e 	strh.w	r0, [sp, #14]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b55ba:	2302      	movs	r3, #2
   b55bc:	f10d 020e 	add.w	r2, sp, #14
   b55c0:	2103      	movs	r1, #3
   b55c2:	a804      	add	r0, sp, #16
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b55c4:	f002 f98e 	bl	b78e4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
      BLE.advertise(&data);
   b55c8:	f001 ff32 	bl	b7430 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b55cc:	2200      	movs	r2, #0
   b55ce:	a904      	add	r1, sp, #16
   b55d0:	f001 ffc9 	bl	b7566 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
      BLE.onConnected(connectCallback);
   b55d4:	f001 ff2c 	bl	b7430 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b55d8:	4946      	ldr	r1, [pc, #280]	; (b56f4 <loop+0x1e4>)
            Serial.print("BLECountdown: ");
   b55da:	f8df 812c 	ldr.w	r8, [pc, #300]	; b5708 <loop+0x1f8>
      BLE.onConnected(connectCallback);
   b55de:	2200      	movs	r2, #0
   b55e0:	f002 fc15 	bl	b7e0e <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
      BLE.onDisconnected(disconnectCallback);
   b55e4:	f001 ff24 	bl	b7430 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b55e8:	4943      	ldr	r1, [pc, #268]	; (b56f8 <loop+0x1e8>)
   b55ea:	2200      	movs	r2, #0
   b55ec:	f002 fbf0 	bl	b7dd0 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
      int BLECountdown = 15000;
   b55f0:	f643 2498 	movw	r4, #15000	; 0x3a98
        BLECountdown = BLECountdown - 10;
   b55f4:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
      while(!BLE.connected() && BLECountdown > 0) {
   b55f8:	f001 ff1a 	bl	b7430 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b55fc:	f001 ff72 	bl	b74e4 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5600:	b900      	cbnz	r0, b5604 <loop+0xf4>
   b5602:	b9f4      	cbnz	r4, b5642 <loop+0x132>
      if(BLE.connected()){ 
   b5604:	f001 ff14 	bl	b7430 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5608:	f001 ff6c 	bl	b74e4 <_ZNK8particle14BleLocalDevice9connectedEv>
   b560c:	4c3b      	ldr	r4, [pc, #236]	; (b56fc <loop+0x1ec>)
   b560e:	2800      	cmp	r0, #0
   b5610:	d141      	bne.n	b5696 <loop+0x186>
        bleWaitForConfig = false;
   b5612:	7020      	strb	r0, [r4, #0]
        WITH_LOCK(Serial) {
   b5614:	f003 ff7a 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5618:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b561a:	f7fe fd59 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("BLE not connected, continuing with stored settings.");
   b561e:	f003 ff75 	bl	b950c <_Z16_fetch_usbserialv>
   b5622:	4937      	ldr	r1, [pc, #220]	; (b5700 <loop+0x1f0>)
   b5624:	f003 f845 	bl	b86b2 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b5628:	a80d      	add	r0, sp, #52	; 0x34
   b562a:	f7fe fec1 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b562e:	e041      	b.n	b56b4 <loop+0x1a4>
   b5630:	f001 fd0e 	bl	b7050 <_ZNK8particle7BleUuid8rawBytesEv>
   b5634:	2310      	movs	r3, #16
   b5636:	4602      	mov	r2, r0
   b5638:	9700      	str	r7, [sp, #0]
   b563a:	2107      	movs	r1, #7
   b563c:	eb0d 0003 	add.w	r0, sp, r3
   b5640:	e7c0      	b.n	b55c4 <loop+0xb4>
        BLECountdown = BLECountdown - 10;
   b5642:	3c0a      	subs	r4, #10
   b5644:	fb94 f3f7 	sdiv	r3, r4, r7
   b5648:	fb07 4313 	mls	r3, r7, r3, r4
        if(BLECountdown % 1000 == 0 || BLECountdown == 0) {
   b564c:	b103      	cbz	r3, b5650 <loop+0x140>
   b564e:	b9e4      	cbnz	r4, b568a <loop+0x17a>
          WITH_LOCK(Serial) {
   b5650:	f003 ff5c 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5654:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b5656:	f7fe fd3b 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
            Serial.print("BLECountdown: ");
   b565a:	f003 ff57 	bl	b950c <_Z16_fetch_usbserialv>
   b565e:	4641      	mov	r1, r8
   b5660:	f003 f80e 	bl	b8680 <_ZN5Print5printEPKc>
            Serial.println(BLECountdown);
   b5664:	f003 ff52 	bl	b950c <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
   b5668:	2c00      	cmp	r4, #0
   b566a:	4605      	mov	r5, r0
   b566c:	da11      	bge.n	b5692 <loop+0x182>
            t = print('-');
   b566e:	212d      	movs	r1, #45	; 0x2d
   b5670:	f003 f80a 	bl	b8688 <_ZN5Print5printEc>
   b5674:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b5676:	220a      	movs	r2, #10
   b5678:	4628      	mov	r0, r5
   b567a:	f003 f824 	bl	b86c6 <_ZN5Print11printNumberEmh>
        n += println();
   b567e:	4628      	mov	r0, r5
   b5680:	f003 f80b 	bl	b869a <_ZN5Print7printlnEv>
          WITH_LOCK(Serial) {
   b5684:	a80d      	add	r0, sp, #52	; 0x34
   b5686:	f7fe fe93 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        delay(10);
   b568a:	200a      	movs	r0, #10
   b568c:	f001 fb30 	bl	b6cf0 <delay>
      while(!BLE.connected() && BLECountdown > 0) {
   b5690:	e7b2      	b.n	b55f8 <loop+0xe8>
   b5692:	4621      	mov	r1, r4
   b5694:	e7ef      	b.n	b5676 <loop+0x166>
        WITH_LOCK(Serial) {
   b5696:	f003 ff39 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b569a:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b569c:	f7fe fd18 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("BLE connected");
   b56a0:	f003 ff34 	bl	b950c <_Z16_fetch_usbserialv>
   b56a4:	4917      	ldr	r1, [pc, #92]	; (b5704 <loop+0x1f4>)
   b56a6:	f003 f804 	bl	b86b2 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b56aa:	a80d      	add	r0, sp, #52	; 0x34
   b56ac:	f7fe fe80 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        bleWaitForConfig = true;
   b56b0:	2301      	movs	r3, #1
   b56b2:	7023      	strb	r3, [r4, #0]
      while(bleWaitForConfig) {
   b56b4:	7823      	ldrb	r3, [r4, #0]
   b56b6:	b11b      	cbz	r3, b56c0 <loop+0x1b0>
        delay(100);
   b56b8:	2064      	movs	r0, #100	; 0x64
   b56ba:	f001 fb19 	bl	b6cf0 <delay>
      while(bleWaitForConfig) {
   b56be:	e7f9      	b.n	b56b4 <loop+0x1a4>
      BLE.disconnectAll();
   b56c0:	f001 feb6 	bl	b7430 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b56c4:	f002 fab6 	bl	b7c34 <_ZNK8particle14BleLocalDevice13disconnectAllEv>
      BLE.off();
   b56c8:	f001 feb2 	bl	b7430 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b56cc:	f002 f84c 	bl	b7768 <_ZNK8particle14BleLocalDevice3offEv>
      firmwareState = RECORDING;
   b56d0:	2301      	movs	r3, #1
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b56d2:	9804      	ldr	r0, [sp, #16]
   b56d4:	7033      	strb	r3, [r6, #0]
   b56d6:	f001 fad3 	bl	b6c80 <free>
   b56da:	e727      	b.n	b552c <loop+0x1c>
   b56dc:	20031c68 	.word	0x20031c68
   b56e0:	2003e695 	.word	0x2003e695
   b56e4:	000bb05f 	.word	0x000bb05f
   b56e8:	20031c10 	.word	0x20031c10
   b56ec:	2003e67c 	.word	0x2003e67c
   b56f0:	20032288 	.word	0x20032288
   b56f4:	000b4619 	.word	0x000b4619
   b56f8:	000b4651 	.word	0x000b4651
   b56fc:	20031c60 	.word	0x20031c60
   b5700:	000bb075 	.word	0x000bb075
   b5704:	000bb067 	.word	0x000bb067
   b5708:	000bb10d 	.word	0x000bb10d
      WITH_LOCK(Serial) {
   b570c:	f003 fefe 	bl	b950c <_Z16_fetch_usbserialv>
      lis3dh.read();
   b5710:	4c97      	ldr	r4, [pc, #604]	; (b5970 <loop+0x460>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5712:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b5714:	f7fe fcdc 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("RECORDING");
   b5718:	f003 fef8 	bl	b950c <_Z16_fetch_usbserialv>
   b571c:	4995      	ldr	r1, [pc, #596]	; (b5974 <loop+0x464>)
      x = lis3dh.x_g;
   b571e:	f8df b2a0 	ldr.w	fp, [pc, #672]	; b59c0 <loop+0x4b0>
      y = lis3dh.y_g;
   b5722:	f8df 92a0 	ldr.w	r9, [pc, #672]	; b59c4 <loop+0x4b4>
      z = lis3dh.z_g;
   b5726:	4f94      	ldr	r7, [pc, #592]	; (b5978 <loop+0x468>)
   b5728:	f8df a29c 	ldr.w	sl, [pc, #668]	; b59c8 <loop+0x4b8>
   b572c:	f8df 829c 	ldr.w	r8, [pc, #668]	; b59cc <loop+0x4bc>
        Serial.println("RECORDING");
   b5730:	f002 ffbf 	bl	b86b2 <_ZN5Print7printlnEPKc>
      WITH_LOCK(Serial) {
   b5734:	a80d      	add	r0, sp, #52	; 0x34
   b5736:	f7fe fe3b 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
      lis3dh.read();
   b573a:	4620      	mov	r0, r4
   b573c:	f000 fb18 	bl	b5d70 <_ZN15Adafruit_LIS3DH4readEv>
      if(!firstLIS3DHReading) {
   b5740:	4b8e      	ldr	r3, [pc, #568]	; (b597c <loop+0x46c>)
      x = lis3dh.x_g;
   b5742:	edd4 7a03 	vldr	s15, [r4, #12]
      y = lis3dh.y_g;
   b5746:	edd4 8a04 	vldr	s17, [r4, #16]
      z = lis3dh.z_g;
   b574a:	ed94 8a05 	vldr	s16, [r4, #20]
      if(!firstLIS3DHReading) {
   b574e:	781a      	ldrb	r2, [r3, #0]
   b5750:	4c8b      	ldr	r4, [pc, #556]	; (b5980 <loop+0x470>)
      x = lis3dh.x_g;
   b5752:	edcb 7a00 	vstr	s15, [fp]
      y = lis3dh.y_g;
   b5756:	edc9 8a00 	vstr	s17, [r9]
      z = lis3dh.z_g;
   b575a:	ed87 8a00 	vstr	s16, [r7]
      if(!firstLIS3DHReading) {
   b575e:	2a00      	cmp	r2, #0
   b5760:	f040 80e0 	bne.w	b5924 <loop+0x414>
        if(abs(x - prevX) > kDeltaAccelThreshold || abs(y - prevY) > kDeltaAccelThreshold || abs(z - prevZ) > kDeltaAccelThreshold) {
   b5764:	ed9a 7a00 	vldr	s14, [sl]
          storedValues[storedValuesIndex] = 0;
   b5768:	6826      	ldr	r6, [r4, #0]
   b576a:	4d86      	ldr	r5, [pc, #536]	; (b5984 <loop+0x474>)
        if(abs(x - prevX) > kDeltaAccelThreshold || abs(y - prevY) > kDeltaAccelThreshold || abs(z - prevZ) > kDeltaAccelThreshold) {
   b576c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   b5770:	eef0 7ae7 	vabs.f32	s15, s15
   b5774:	ee17 0a90 	vmov	r0, s15
   b5778:	f004 fbf8 	bl	b9f6c <__aeabi_f2d>
   b577c:	a37a      	add	r3, pc, #488	; (adr r3, b5968 <loop+0x458>)
   b577e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5782:	f004 fedb 	bl	ba53c <__aeabi_dcmpgt>
   b5786:	2800      	cmp	r0, #0
   b5788:	f040 80ba 	bne.w	b5900 <loop+0x3f0>
   b578c:	edd8 7a00 	vldr	s15, [r8]
   b5790:	ee78 8ae7 	vsub.f32	s17, s17, s15
   b5794:	eef0 7ae8 	vabs.f32	s15, s17
   b5798:	ee17 0a90 	vmov	r0, s15
   b579c:	f004 fbe6 	bl	b9f6c <__aeabi_f2d>
   b57a0:	a371      	add	r3, pc, #452	; (adr r3, b5968 <loop+0x458>)
   b57a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b57a6:	f004 fec9 	bl	ba53c <__aeabi_dcmpgt>
   b57aa:	2800      	cmp	r0, #0
   b57ac:	f040 80a8 	bne.w	b5900 <loop+0x3f0>
   b57b0:	4b75      	ldr	r3, [pc, #468]	; (b5988 <loop+0x478>)
   b57b2:	edd3 7a00 	vldr	s15, [r3]
   b57b6:	ee38 8a67 	vsub.f32	s16, s16, s15
   b57ba:	eef0 7ac8 	vabs.f32	s15, s16
   b57be:	ee17 0a90 	vmov	r0, s15
   b57c2:	f004 fbd3 	bl	b9f6c <__aeabi_f2d>
   b57c6:	a368      	add	r3, pc, #416	; (adr r3, b5968 <loop+0x458>)
   b57c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b57cc:	f004 feb6 	bl	ba53c <__aeabi_dcmpgt>
   b57d0:	2800      	cmp	r0, #0
   b57d2:	f040 8095 	bne.w	b5900 <loop+0x3f0>
          storedValues[storedValuesIndex] = 0;
   b57d6:	55a8      	strb	r0, [r5, r6]
          if(storedValues[storedValuesIndex - 1] == 0) {
   b57d8:	4435      	add	r5, r6
   b57da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   b57de:	2b00      	cmp	r3, #0
   b57e0:	f000 8094 	beq.w	b590c <loop+0x3fc>
        storedTimes[storedValuesIndex] = Time.now(); 
   b57e4:	6825      	ldr	r5, [r4, #0]
   b57e6:	f003 fdc2 	bl	b936e <_ZN9TimeClass3nowEv>
   b57ea:	4b68      	ldr	r3, [pc, #416]	; (b598c <loop+0x47c>)
   b57ec:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
        WITH_LOCK(Serial) {
   b57f0:	f003 fe8c 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b57f4:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b57f6:	f7fe fc6b 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.printlnf("Recording index: %i", storedValuesIndex);
   b57fa:	f003 fe87 	bl	b950c <_Z16_fetch_usbserialv>
   b57fe:	6822      	ldr	r2, [r4, #0]
   b5800:	4963      	ldr	r1, [pc, #396]	; (b5990 <loop+0x480>)
   b5802:	f7fe fc7a 	bl	b40fa <_ZN5Print8printlnfEPKcz>
        WITH_LOCK(Serial) {
   b5806:	a80d      	add	r0, sp, #52	; 0x34
   b5808:	f7fe fdd2 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
        storedValuesIndex++; 
   b580c:	6823      	ldr	r3, [r4, #0]
   b580e:	3301      	adds	r3, #1
   b5810:	6023      	str	r3, [r4, #0]
      prevX = x;
   b5812:	f8db 3000 	ldr.w	r3, [fp]
      prevZ = z;
   b5816:	4a5c      	ldr	r2, [pc, #368]	; (b5988 <loop+0x478>)
      prevX = x;
   b5818:	f8ca 3000 	str.w	r3, [sl]
      prevY = y;
   b581c:	f8d9 3000 	ldr.w	r3, [r9]
   b5820:	f8c8 3000 	str.w	r3, [r8]
      prevZ = z;
   b5824:	683b      	ldr	r3, [r7, #0]
   b5826:	6013      	str	r3, [r2, #0]
      if(reportingMode == 0) {
   b5828:	4b5a      	ldr	r3, [pc, #360]	; (b5994 <loop+0x484>)
        if(storedValuesIndex >= ((reportingInterval * kSecondsToMilliseconds) / recordingInterval)) {
   b582a:	6822      	ldr	r2, [r4, #0]
      if(reportingMode == 0) {
   b582c:	681d      	ldr	r5, [r3, #0]
   b582e:	2d00      	cmp	r5, #0
   b5830:	f040 80d4 	bne.w	b59dc <loop+0x4cc>
        if(storedValuesIndex >= ((reportingInterval * kSecondsToMilliseconds) / recordingInterval)) {
   b5834:	4b58      	ldr	r3, [pc, #352]	; (b5998 <loop+0x488>)
   b5836:	681b      	ldr	r3, [r3, #0]
   b5838:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b583c:	434b      	muls	r3, r1
   b583e:	4957      	ldr	r1, [pc, #348]	; (b599c <loop+0x48c>)
   b5840:	6809      	ldr	r1, [r1, #0]
   b5842:	fb93 f3f1 	sdiv	r3, r3, r1
   b5846:	4293      	cmp	r3, r2
   b5848:	f300 8083 	bgt.w	b5952 <loop+0x442>
          if(WiFi.ready()) {
   b584c:	4854      	ldr	r0, [pc, #336]	; (b59a0 <loop+0x490>)
   b584e:	f7fe fc73 	bl	b4138 <_ZN5spark9WiFiClass5readyEv>
   b5852:	2800      	cmp	r0, #0
   b5854:	d076      	beq.n	b5944 <loop+0x434>
            WITH_LOCK(Serial) {
   b5856:	f003 fe59 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b585a:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b585c:	f7fe fc38 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
              Serial.println(">>> REPORTING DATA");
   b5860:	f003 fe54 	bl	b950c <_Z16_fetch_usbserialv>
   b5864:	494f      	ldr	r1, [pc, #316]	; (b59a4 <loop+0x494>)
   b5866:	f8df 811c 	ldr.w	r8, [pc, #284]	; b5984 <loop+0x474>
   b586a:	4f48      	ldr	r7, [pc, #288]	; (b598c <loop+0x47c>)
	StringSumHelper(const char *p) : String(p) {}
   b586c:	f8df b160 	ldr.w	fp, [pc, #352]	; b59d0 <loop+0x4c0>
              payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b5870:	f8df a160 	ldr.w	sl, [pc, #352]	; b59d4 <loop+0x4c4>
   b5874:	f8df 9160 	ldr.w	r9, [pc, #352]	; b59d8 <loop+0x4c8>
              Serial.println(">>> REPORTING DATA");
   b5878:	f002 ff1b 	bl	b86b2 <_ZN5Print7printlnEPKc>
              Serial.printlnf("storedValuesIndex: %i", storedValuesIndex);
   b587c:	f003 fe46 	bl	b950c <_Z16_fetch_usbserialv>
   b5880:	6822      	ldr	r2, [r4, #0]
   b5882:	4949      	ldr	r1, [pc, #292]	; (b59a8 <loop+0x498>)
   b5884:	f7fe fc39 	bl	b40fa <_ZN5Print8printlnfEPKcz>
            WITH_LOCK(Serial) {
   b5888:	a80d      	add	r0, sp, #52	; 0x34
   b588a:	f7fe fd91 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
            for (int i = 0; i < storedValuesIndex; i++) {
   b588e:	6823      	ldr	r3, [r4, #0]
   b5890:	42ab      	cmp	r3, r5
   b5892:	f340 810c 	ble.w	b5aae <loop+0x59e>
   b5896:	4659      	mov	r1, fp
   b5898:	a808      	add	r0, sp, #32
   b589a:	f003 f84e 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
              payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b589e:	220a      	movs	r2, #10
   b58a0:	f8da 1000 	ldr.w	r1, [sl]
   b58a4:	a804      	add	r0, sp, #16
   b58a6:	f003 f888 	bl	b89ba <_ZN6StringC1Eih>
   b58aa:	a904      	add	r1, sp, #16
   b58ac:	a808      	add	r0, sp, #32
   b58ae:	f003 f8e3 	bl	b8a78 <_ZplRK15StringSumHelperRK6String>
   b58b2:	4649      	mov	r1, r9
   b58b4:	f003 f8ec 	bl	b8a90 <_ZplRK15StringSumHelperPKc>
   b58b8:	f818 1b01 	ldrb.w	r1, [r8], #1
   b58bc:	f003 f8fd 	bl	b8aba <_ZplRK15StringSumHelperh>
   b58c0:	493a      	ldr	r1, [pc, #232]	; (b59ac <loop+0x49c>)
   b58c2:	f003 f8e5 	bl	b8a90 <_ZplRK15StringSumHelperPKc>
   b58c6:	220a      	movs	r2, #10
   b58c8:	f857 1b04 	ldr.w	r1, [r7], #4
   b58cc:	4606      	mov	r6, r0
   b58ce:	a80d      	add	r0, sp, #52	; 0x34
   b58d0:	f003 f886 	bl	b89e0 <_ZN6StringC1Elh>
   b58d4:	a90d      	add	r1, sp, #52	; 0x34
   b58d6:	4630      	mov	r0, r6
   b58d8:	f003 f8ce 	bl	b8a78 <_ZplRK15StringSumHelperRK6String>
   b58dc:	4934      	ldr	r1, [pc, #208]	; (b59b0 <loop+0x4a0>)
   b58de:	f003 f8d7 	bl	b8a90 <_ZplRK15StringSumHelperPKc>
   b58e2:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b58e4:	4833      	ldr	r0, [pc, #204]	; (b59b4 <loop+0x4a4>)
   b58e6:	f003 f8a5 	bl	b8a34 <_ZN6String6concatERKS_>
   b58ea:	a80d      	add	r0, sp, #52	; 0x34
   b58ec:	f002 ffda 	bl	b88a4 <_ZN6StringD1Ev>
   b58f0:	a804      	add	r0, sp, #16
   b58f2:	f002 ffd7 	bl	b88a4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b58f6:	a808      	add	r0, sp, #32
   b58f8:	f002 ffd4 	bl	b88a4 <_ZN6StringD1Ev>
            for (int i = 0; i < storedValuesIndex; i++) {
   b58fc:	3501      	adds	r5, #1
   b58fe:	e7c6      	b.n	b588e <loop+0x37e>
          storedValues[storedValuesIndex] = 1;
   b5900:	2301      	movs	r3, #1
   b5902:	55ab      	strb	r3, [r5, r6]
          sleepTimeoutCounter = 0; // reset sleep timeout because movement detected
   b5904:	4b2c      	ldr	r3, [pc, #176]	; (b59b8 <loop+0x4a8>)
   b5906:	2200      	movs	r2, #0
   b5908:	601a      	str	r2, [r3, #0]
   b590a:	e76b      	b.n	b57e4 <loop+0x2d4>
            sleepTimeoutCounter++;
   b590c:	4a2a      	ldr	r2, [pc, #168]	; (b59b8 <loop+0x4a8>)
   b590e:	6813      	ldr	r3, [r2, #0]
   b5910:	3301      	adds	r3, #1
   b5912:	6013      	str	r3, [r2, #0]
            if(sleepReadyTest()){
   b5914:	f7fe fd36 	bl	b4384 <_Z14sleepReadyTestv>
   b5918:	2800      	cmp	r0, #0
   b591a:	f43f af63 	beq.w	b57e4 <loop+0x2d4>
              engageSleep();
   b591e:	f7ff fd41 	bl	b53a4 <_Z11engageSleepv>
   b5922:	e75f      	b.n	b57e4 <loop+0x2d4>
        firstLIS3DHReading = false;
   b5924:	2200      	movs	r2, #0
   b5926:	701a      	strb	r2, [r3, #0]
        WITH_LOCK(Serial) {
   b5928:	f003 fdf0 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b592c:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b592e:	f7fe fbcf 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("First reading");
   b5932:	f003 fdeb 	bl	b950c <_Z16_fetch_usbserialv>
   b5936:	4921      	ldr	r1, [pc, #132]	; (b59bc <loop+0x4ac>)
   b5938:	f002 febb 	bl	b86b2 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b593c:	a80d      	add	r0, sp, #52	; 0x34
   b593e:	f7fe fd37 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b5942:	e766      	b.n	b5812 <loop+0x302>
            WiFi.on();
   b5944:	4816      	ldr	r0, [pc, #88]	; (b59a0 <loop+0x490>)
   b5946:	f7fe fbe6 	bl	b4116 <_ZN5spark9WiFiClass2onEv>
            WiFi.connect();
   b594a:	4815      	ldr	r0, [pc, #84]	; (b59a0 <loop+0x490>)
   b594c:	2100      	movs	r1, #0
   b594e:	f7fe fbee 	bl	b412e <_ZN5spark9WiFiClass7connectEj>
      delay(recordingInterval);
   b5952:	4b12      	ldr	r3, [pc, #72]	; (b599c <loop+0x48c>)
   b5954:	6818      	ldr	r0, [r3, #0]
}
   b5956:	b013      	add	sp, #76	; 0x4c
   b5958:	ecbd 8b02 	vpop	{d8}
   b595c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      delay(recordingInterval);
   b5960:	f001 b9c6 	b.w	b6cf0 <delay>
   b5964:	f3af 8000 	nop.w
   b5968:	9999999a 	.word	0x9999999a
   b596c:	3fa99999 	.word	0x3fa99999
   b5970:	20032088 	.word	0x20032088
   b5974:	000bb0a9 	.word	0x000bb0a9
   b5978:	2003e6a0 	.word	0x2003e6a0
   b597c:	20031b7c 	.word	0x20031b7c
   b5980:	2003e610 	.word	0x2003e610
   b5984:	2003bf00 	.word	0x2003bf00
   b5988:	20032208 	.word	0x20032208
   b598c:	200322c0 	.word	0x200322c0
   b5990:	000bb0b3 	.word	0x000bb0b3
   b5994:	20032214 	.word	0x20032214
   b5998:	20032210 	.word	0x20032210
   b599c:	2003220c 	.word	0x2003220c
   b59a0:	2003e710 	.word	0x2003e710
   b59a4:	000bb0d5 	.word	0x000bb0d5
   b59a8:	000bb023 	.word	0x000bb023
   b59ac:	000bb04d 	.word	0x000bb04d
   b59b0:	000bb05c 	.word	0x000bb05c
   b59b4:	200321f0 	.word	0x200321f0
   b59b8:	200322ac 	.word	0x200322ac
   b59bc:	000bb0c7 	.word	0x000bb0c7
   b59c0:	2003e698 	.word	0x2003e698
   b59c4:	2003e69c 	.word	0x2003e69c
   b59c8:	20032200 	.word	0x20032200
   b59cc:	20032204 	.word	0x20032204
   b59d0:	000bb039 	.word	0x000bb039
   b59d4:	20031c64 	.word	0x20031c64
   b59d8:	000bb042 	.word	0x000bb042
        if (storedValuesIndex >= 50) { // if buffer is getting full begin reporting process
   b59dc:	2a31      	cmp	r2, #49	; 0x31
   b59de:	ddb8      	ble.n	b5952 <loop+0x442>
          WITH_LOCK(Serial) {
   b59e0:	f003 fd94 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b59e4:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b59e6:	f7fe fb73 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
            Serial.println(">>> REPORTING DUE TO BUFFER CAPACITY");
   b59ea:	f003 fd8f 	bl	b950c <_Z16_fetch_usbserialv>
   b59ee:	493c      	ldr	r1, [pc, #240]	; (b5ae0 <loop+0x5d0>)
   b59f0:	f002 fe5f 	bl	b86b2 <_ZN5Print7printlnEPKc>
          WITH_LOCK(Serial) {
   b59f4:	a80d      	add	r0, sp, #52	; 0x34
   b59f6:	f7fe fcdb 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
          if(WiFi.ready()) {
   b59fa:	483a      	ldr	r0, [pc, #232]	; (b5ae4 <loop+0x5d4>)
   b59fc:	f7fe fb9c 	bl	b4138 <_ZN5spark9WiFiClass5readyEv>
   b5a00:	2800      	cmp	r0, #0
   b5a02:	d09f      	beq.n	b5944 <loop+0x434>
            WITH_LOCK(Serial) {
   b5a04:	f003 fd82 	bl	b950c <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5a08:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b5a0a:	f7fe fb61 	bl	b40d0 <_ZN9USBSerial4lockEv.isra.0>
              Serial.println(">>> REPORTING DATA");
   b5a0e:	f003 fd7d 	bl	b950c <_Z16_fetch_usbserialv>
   b5a12:	4935      	ldr	r1, [pc, #212]	; (b5ae8 <loop+0x5d8>)
   b5a14:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b5b04 <loop+0x5f4>
   b5a18:	4f34      	ldr	r7, [pc, #208]	; (b5aec <loop+0x5dc>)
	StringSumHelper(const char *p) : String(p) {}
   b5a1a:	f8df b0ec 	ldr.w	fp, [pc, #236]	; b5b08 <loop+0x5f8>
              payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b5a1e:	f8df a0ec 	ldr.w	sl, [pc, #236]	; b5b0c <loop+0x5fc>
   b5a22:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b5b10 <loop+0x600>
              Serial.println(">>> REPORTING DATA");
   b5a26:	f002 fe44 	bl	b86b2 <_ZN5Print7printlnEPKc>
              Serial.printlnf("storedValuesIndex: %i", storedValuesIndex);
   b5a2a:	f003 fd6f 	bl	b950c <_Z16_fetch_usbserialv>
   b5a2e:	6822      	ldr	r2, [r4, #0]
   b5a30:	492f      	ldr	r1, [pc, #188]	; (b5af0 <loop+0x5e0>)
   b5a32:	f7fe fb62 	bl	b40fa <_ZN5Print8printlnfEPKcz>
            WITH_LOCK(Serial) {
   b5a36:	a80d      	add	r0, sp, #52	; 0x34
   b5a38:	f7fe fcba 	bl	b43b0 <_ZNSt10lock_guardIR9USBSerialED1Ev>
            for (int i = 0; i < storedValuesIndex; i++) {
   b5a3c:	2500      	movs	r5, #0
   b5a3e:	6823      	ldr	r3, [r4, #0]
   b5a40:	42ab      	cmp	r3, r5
   b5a42:	dd34      	ble.n	b5aae <loop+0x59e>
   b5a44:	4659      	mov	r1, fp
   b5a46:	a808      	add	r0, sp, #32
   b5a48:	f002 ff77 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
              payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b5a4c:	220a      	movs	r2, #10
   b5a4e:	f8da 1000 	ldr.w	r1, [sl]
   b5a52:	a804      	add	r0, sp, #16
   b5a54:	f002 ffb1 	bl	b89ba <_ZN6StringC1Eih>
   b5a58:	a904      	add	r1, sp, #16
   b5a5a:	a808      	add	r0, sp, #32
   b5a5c:	f003 f80c 	bl	b8a78 <_ZplRK15StringSumHelperRK6String>
   b5a60:	4649      	mov	r1, r9
   b5a62:	f003 f815 	bl	b8a90 <_ZplRK15StringSumHelperPKc>
   b5a66:	f818 1b01 	ldrb.w	r1, [r8], #1
   b5a6a:	f003 f826 	bl	b8aba <_ZplRK15StringSumHelperh>
   b5a6e:	4921      	ldr	r1, [pc, #132]	; (b5af4 <loop+0x5e4>)
   b5a70:	f003 f80e 	bl	b8a90 <_ZplRK15StringSumHelperPKc>
   b5a74:	220a      	movs	r2, #10
   b5a76:	f857 1b04 	ldr.w	r1, [r7], #4
   b5a7a:	4606      	mov	r6, r0
   b5a7c:	a80d      	add	r0, sp, #52	; 0x34
   b5a7e:	f002 ffaf 	bl	b89e0 <_ZN6StringC1Elh>
   b5a82:	a90d      	add	r1, sp, #52	; 0x34
   b5a84:	4630      	mov	r0, r6
   b5a86:	f002 fff7 	bl	b8a78 <_ZplRK15StringSumHelperRK6String>
   b5a8a:	491b      	ldr	r1, [pc, #108]	; (b5af8 <loop+0x5e8>)
   b5a8c:	f003 f800 	bl	b8a90 <_ZplRK15StringSumHelperPKc>
   b5a90:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5a92:	481a      	ldr	r0, [pc, #104]	; (b5afc <loop+0x5ec>)
   b5a94:	f002 ffce 	bl	b8a34 <_ZN6String6concatERKS_>
   b5a98:	a80d      	add	r0, sp, #52	; 0x34
   b5a9a:	f002 ff03 	bl	b88a4 <_ZN6StringD1Ev>
   b5a9e:	a804      	add	r0, sp, #16
   b5aa0:	f002 ff00 	bl	b88a4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b5aa4:	a808      	add	r0, sp, #32
   b5aa6:	f002 fefd 	bl	b88a4 <_ZN6StringD1Ev>
            for (int i = 0; i < storedValuesIndex; i++) {
   b5aaa:	3501      	adds	r5, #1
   b5aac:	e7c7      	b.n	b5a3e <loop+0x52e>
            storedValuesIndex = 0;
   b5aae:	2300      	movs	r3, #0
            String localPayload = payload;
   b5ab0:	4912      	ldr	r1, [pc, #72]	; (b5afc <loop+0x5ec>)
            storedValuesIndex = 0;
   b5ab2:	6023      	str	r3, [r4, #0]
            String localPayload = payload;
   b5ab4:	a808      	add	r0, sp, #32
   b5ab6:	f002 ff63 	bl	b8980 <_ZN6StringC1ERKS_>
            payload = "";
   b5aba:	4911      	ldr	r1, [pc, #68]	; (b5b00 <loop+0x5f0>)
   b5abc:	480f      	ldr	r0, [pc, #60]	; (b5afc <loop+0x5ec>)
   b5abe:	f002 ff6a 	bl	b8996 <_ZN6StringaSEPKc>
            reportData(localPayload);
   b5ac2:	a908      	add	r1, sp, #32
   b5ac4:	a80d      	add	r0, sp, #52	; 0x34
   b5ac6:	f002 ff5b 	bl	b8980 <_ZN6StringC1ERKS_>
   b5aca:	a80d      	add	r0, sp, #52	; 0x34
   b5acc:	f7ff fb8e 	bl	b51ec <_Z10reportData6String>
   b5ad0:	a80d      	add	r0, sp, #52	; 0x34
   b5ad2:	f002 fee7 	bl	b88a4 <_ZN6StringD1Ev>
            String localPayload = payload;
   b5ad6:	a808      	add	r0, sp, #32
   b5ad8:	f002 fee4 	bl	b88a4 <_ZN6StringD1Ev>
   b5adc:	e739      	b.n	b5952 <loop+0x442>
   b5ade:	bf00      	nop
   b5ae0:	000bb0e8 	.word	0x000bb0e8
   b5ae4:	2003e710 	.word	0x2003e710
   b5ae8:	000bb0d5 	.word	0x000bb0d5
   b5aec:	200322c0 	.word	0x200322c0
   b5af0:	000bb023 	.word	0x000bb023
   b5af4:	000bb04d 	.word	0x000bb04d
   b5af8:	000bb05c 	.word	0x000bb05c
   b5afc:	200321f0 	.word	0x200321f0
   b5b00:	000bab99 	.word	0x000bab99
   b5b04:	2003bf00 	.word	0x2003bf00
   b5b08:	000bb039 	.word	0x000bb039
   b5b0c:	20031c64 	.word	0x20031c64
   b5b10:	000bb042 	.word	0x000bb042

000b5b14 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b5b14:	4770      	bx	lr

000b5b16 <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   b5b16:	4770      	bx	lr

000b5b18 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   b5b18:	b538      	push	{r3, r4, r5, lr}
   b5b1a:	460c      	mov	r4, r1
   b5b1c:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b5b1e:	2220      	movs	r2, #32
   b5b20:	2100      	movs	r1, #0
   b5b22:	f104 0008 	add.w	r0, r4, #8
   b5b26:	f004 fd8d 	bl	ba644 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   b5b2a:	220b      	movs	r2, #11
   b5b2c:	4904      	ldr	r1, [pc, #16]	; (b5b40 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x28>)
   b5b2e:	4620      	mov	r0, r4
   b5b30:	f004 fdd8 	bl	ba6e4 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
   b5b34:	2301      	movs	r3, #1
   b5b36:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id   = _sensorID;
   b5b38:	69aa      	ldr	r2, [r5, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   b5b3a:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sensor->min_delay   = 0;
  sensor->max_value   = 0;
  sensor->min_value   = 0;
  sensor->resolution  = 0;
}
   b5b3e:	bd38      	pop	{r3, r4, r5, pc}
   b5b40:	000baa56 	.word	0x000baa56

000b5b44 <_ZN15Adafruit_LIS3DHD0Ev>:
   b5b44:	b510      	push	{r4, lr}
   b5b46:	212c      	movs	r1, #44	; 0x2c
   b5b48:	4604      	mov	r4, r0
   b5b4a:	f7fe faa8 	bl	b409e <_ZdlPvj>
   b5b4e:	4620      	mov	r0, r4
   b5b50:	bd10      	pop	{r4, pc}
	...

000b5b54 <_ZN15Adafruit_LIS3DHC1Ev>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   b5b54:	4a06      	ldr	r2, [pc, #24]	; (b5b70 <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   b5b56:	6002      	str	r2, [r0, #0]
   b5b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5b5c:	6182      	str	r2, [r0, #24]
   b5b5e:	7742      	strb	r2, [r0, #29]
   b5b60:	83c2      	strh	r2, [r0, #30]
   b5b62:	22ff      	movs	r2, #255	; 0xff
   b5b64:	f880 2020 	strb.w	r2, [r0, #32]
   b5b68:	2208      	movs	r2, #8
   b5b6a:	6242      	str	r2, [r0, #36]	; 0x24
}
   b5b6c:	4770      	bx	lr
   b5b6e:	bf00      	nop
   b5b70:	000bb14c 	.word	0x000bb14c

000b5b74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5b74:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5b76:	4c0b      	ldr	r4, [pc, #44]	; (b5ba4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5b78:	7821      	ldrb	r1, [r4, #0]
   b5b7a:	f3bf 8f5b 	dmb	ish
   b5b7e:	f011 0101 	ands.w	r1, r1, #1
   b5b82:	d10b      	bne.n	b5b9c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5b84:	4620      	mov	r0, r4
   b5b86:	9101      	str	r1, [sp, #4]
   b5b88:	f7fe fa8b 	bl	b40a2 <__cxa_guard_acquire>
   b5b8c:	9901      	ldr	r1, [sp, #4]
   b5b8e:	b128      	cbz	r0, b5b9c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5b90:	4805      	ldr	r0, [pc, #20]	; (b5ba8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5b92:	f002 fdf3 	bl	b877c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5b96:	4620      	mov	r0, r4
   b5b98:	f7fe fa88 	bl	b40ac <__cxa_guard_release>
        return instance;
    }
   b5b9c:	4802      	ldr	r0, [pc, #8]	; (b5ba8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5b9e:	b002      	add	sp, #8
   b5ba0:	bd10      	pop	{r4, pc}
   b5ba2:	bf00      	nop
   b5ba4:	2003e6a4 	.word	0x2003e6a4
   b5ba8:	2003e6a8 	.word	0x2003e6a8

000b5bac <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   b5bac:	b508      	push	{r3, lr}
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   b5bae:	f7ff ffe1 	bl	b5b74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5bb2:	2101      	movs	r1, #1
   b5bb4:	f002 fe00 	bl	b87b8 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b5bb8:	f7ff ffdc 	bl	b5b74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5bbc:	4905      	ldr	r1, [pc, #20]	; (b5bd4 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   b5bbe:	2201      	movs	r2, #1
   b5bc0:	f002 fe38 	bl	b8834 <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
   b5bc4:	f7ff ffd6 	bl	b5b74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   b5bc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b5bcc:	2100      	movs	r1, #0
   b5bce:	f002 be07 	b.w	b87e0 <_ZN8SPIClass11setDataModeEh>
   b5bd2:	bf00      	nop
   b5bd4:	0007a120 	.word	0x0007a120

000b5bd8 <_ZN15Adafruit_LIS3DH7spixferEh>:
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   b5bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_sck == -1)
   b5bdc:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b5be0:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   b5be2:	4605      	mov	r5, r0
   b5be4:	460f      	mov	r7, r1
  if (_sck == -1)
   b5be6:	d106      	bne.n	b5bf6 <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b5be8:	f7ff ffc4 	bl	b5b74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5bec:	4639      	mov	r1, r7
}
   b5bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b5bf2:	f002 be51 	b.w	b8898 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   b5bf6:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   b5bf8:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   b5bfa:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   b5bfe:	f995 0020 	ldrsb.w	r0, [r5, #32]
   b5c02:	2100      	movs	r1, #0
   b5c04:	b280      	uxth	r0, r0
   b5c06:	f003 fe74 	bl	b98f2 <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   b5c0a:	f995 001e 	ldrsb.w	r0, [r5, #30]
   b5c0e:	fa08 f106 	lsl.w	r1, r8, r6
   b5c12:	4039      	ands	r1, r7
   b5c14:	b280      	uxth	r0, r0
   b5c16:	f003 fe6c 	bl	b98f2 <digitalWrite>
    digitalWrite(_sck, HIGH);
   b5c1a:	f995 0020 	ldrsb.w	r0, [r5, #32]
   b5c1e:	2101      	movs	r1, #1
   b5c20:	b280      	uxth	r0, r0
   b5c22:	f003 fe66 	bl	b98f2 <digitalWrite>
    if (digitalRead(_miso))
   b5c26:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
   b5c2a:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   b5c2c:	b280      	uxth	r0, r0
    reply <<= 1;
   b5c2e:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   b5c30:	f003 fe78 	bl	b9924 <digitalRead>
   b5c34:	b108      	cbz	r0, b5c3a <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   b5c36:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   b5c3a:	3e01      	subs	r6, #1
   b5c3c:	d2df      	bcs.n	b5bfe <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
   b5c3e:	4620      	mov	r0, r4
   b5c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5c44 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   b5c44:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   b5c46:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5c4a:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   b5c4c:	4604      	mov	r4, r0
   b5c4e:	460e      	mov	r6, r1
   b5c50:	4615      	mov	r5, r2
  if (_cs == -1) {
   b5c52:	d116      	bne.n	b5c82 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   b5c54:	f003 fea8 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b5c58:	7f21      	ldrb	r1, [r4, #28]
   b5c5a:	f002 fb93 	bl	b8384 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   b5c5e:	f003 fea3 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b5c62:	6803      	ldr	r3, [r0, #0]
   b5c64:	4631      	mov	r1, r6
   b5c66:	689b      	ldr	r3, [r3, #8]
   b5c68:	4798      	blx	r3
    Wire.write((uint8_t)value);
   b5c6a:	f003 fe9d 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b5c6e:	6803      	ldr	r3, [r0, #0]
   b5c70:	4629      	mov	r1, r5
   b5c72:	689b      	ldr	r3, [r3, #8]
   b5c74:	4798      	blx	r3
    Wire.endTransmission();
   b5c76:	f003 fe97 	bl	b99a8 <_Z19__fetch_global_Wirev>
}
   b5c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   b5c7e:	f002 bb8c 	b.w	b839a <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
   b5c82:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b5c86:	3301      	adds	r3, #1
   b5c88:	d101      	bne.n	b5c8e <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   b5c8a:	f7ff ff8f 	bl	b5bac <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   b5c8e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5c92:	2100      	movs	r1, #0
   b5c94:	b280      	uxth	r0, r0
   b5c96:	f003 fe2c 	bl	b98f2 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   b5c9a:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b5c9e:	4620      	mov	r0, r4
   b5ca0:	f7ff ff9a 	bl	b5bd8 <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   b5ca4:	4629      	mov	r1, r5
   b5ca6:	4620      	mov	r0, r4
   b5ca8:	f7ff ff96 	bl	b5bd8 <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   b5cac:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5cb0:	2101      	movs	r1, #1
}
   b5cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   b5cb6:	b280      	uxth	r0, r0
   b5cb8:	f003 be1b 	b.w	b98f2 <digitalWrite>

000b5cbc <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   b5cbc:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   b5cbe:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5cc2:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   b5cc4:	4604      	mov	r4, r0
   b5cc6:	460d      	mov	r5, r1
  if (_cs == -1) {
   b5cc8:	d11d      	bne.n	b5d06 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   b5cca:	f003 fe6d 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b5cce:	f994 101c 	ldrsb.w	r1, [r4, #28]
   b5cd2:	f002 fb5b 	bl	b838c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   b5cd6:	f003 fe67 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b5cda:	6803      	ldr	r3, [r0, #0]
   b5cdc:	4629      	mov	r1, r5
   b5cde:	689b      	ldr	r3, [r3, #8]
   b5ce0:	4798      	blx	r3
    Wire.endTransmission();
   b5ce2:	f003 fe61 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b5ce6:	f002 fb58 	bl	b839a <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
   b5cea:	f003 fe5d 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b5cee:	7f21      	ldrb	r1, [r4, #28]
   b5cf0:	2201      	movs	r2, #1
   b5cf2:	f002 fb44 	bl	b837e <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   b5cf6:	f003 fe57 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b5cfa:	6803      	ldr	r3, [r0, #0]
   b5cfc:	695b      	ldr	r3, [r3, #20]
   b5cfe:	4798      	blx	r3
   b5d00:	b2c5      	uxtb	r5, r0
}
   b5d02:	4628      	mov	r0, r5
   b5d04:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
   b5d06:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b5d0a:	3301      	adds	r3, #1
   b5d0c:	d101      	bne.n	b5d12 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   b5d0e:	f7ff ff4d 	bl	b5bac <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
   b5d12:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5d16:	2100      	movs	r1, #0
   b5d18:	b280      	uxth	r0, r0
   b5d1a:	f003 fdea 	bl	b98f2 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   b5d1e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b5d22:	4620      	mov	r0, r4
   b5d24:	f7ff ff58 	bl	b5bd8 <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   b5d28:	2100      	movs	r1, #0
   b5d2a:	4620      	mov	r0, r4
   b5d2c:	f7ff ff54 	bl	b5bd8 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5d30:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   b5d32:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5d36:	2101      	movs	r1, #1
   b5d38:	b280      	uxth	r0, r0
   b5d3a:	f003 fdda 	bl	b98f2 <digitalWrite>
    if (_sck == -1)
   b5d3e:	e7e0      	b.n	b5d02 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

000b5d40 <_ZN15Adafruit_LIS3DH8getRangeEv>:
{
   b5d40:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   b5d42:	2123      	movs	r1, #35	; 0x23
   b5d44:	f7ff ffba 	bl	b5cbc <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   b5d48:	f3c0 1001 	ubfx	r0, r0, #4, #2
   b5d4c:	bd08      	pop	{r3, pc}

000b5d4e <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
   b5d4e:	b538      	push	{r3, r4, r5, lr}
   b5d50:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   b5d52:	2120      	movs	r1, #32
{
   b5d54:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   b5d56:	f7ff ffb1 	bl	b5cbc <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
   b5d5a:	f000 030f 	and.w	r3, r0, #15
  ctl1 |= (dataRate << 4);
   b5d5e:	ea43 1205 	orr.w	r2, r3, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   b5d62:	4620      	mov	r0, r4
   b5d64:	b2d2      	uxtb	r2, r2
}
   b5d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   b5d6a:	2120      	movs	r1, #32
   b5d6c:	f7ff bf6a 	b.w	b5c44 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000b5d70 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
   b5d70:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   b5d72:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5d76:	3301      	adds	r3, #1
void Adafruit_LIS3DH::read(void) {
   b5d78:	4604      	mov	r4, r0
  if (_cs == -1) {
   b5d7a:	d177      	bne.n	b5e6c <_ZN15Adafruit_LIS3DH4readEv+0xfc>
    Wire.beginTransmission(_i2caddr);
   b5d7c:	f003 fe14 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b5d80:	f994 101c 	ldrsb.w	r1, [r4, #28]
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   b5d84:	4d5d      	ldr	r5, [pc, #372]	; (b5efc <_ZN15Adafruit_LIS3DH4readEv+0x18c>)
    Wire.beginTransmission(_i2caddr);
   b5d86:	f002 fb01 	bl	b838c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   b5d8a:	f003 fe0d 	bl	b99a8 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5d8e:	6803      	ldr	r3, [r0, #0]
   b5d90:	21a8      	movs	r1, #168	; 0xa8
   b5d92:	689b      	ldr	r3, [r3, #8]
   b5d94:	4798      	blx	r3
    Wire.endTransmission();
   b5d96:	f003 fe07 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b5d9a:	f002 fafe 	bl	b839a <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
   b5d9e:	f003 fe03 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b5da2:	7f21      	ldrb	r1, [r4, #28]
   b5da4:	2206      	movs	r2, #6
   b5da6:	f002 faea 	bl	b837e <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   b5daa:	f003 fdfd 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b5dae:	6803      	ldr	r3, [r0, #0]
   b5db0:	695b      	ldr	r3, [r3, #20]
   b5db2:	4798      	blx	r3
   b5db4:	80e0      	strh	r0, [r4, #6]
   b5db6:	f003 fdf7 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b5dba:	6803      	ldr	r3, [r0, #0]
   b5dbc:	695b      	ldr	r3, [r3, #20]
   b5dbe:	4798      	blx	r3
   b5dc0:	88e3      	ldrh	r3, [r4, #6]
   b5dc2:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b5dc6:	4318      	orrs	r0, r3
   b5dc8:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   b5dca:	f003 fded 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b5dce:	6803      	ldr	r3, [r0, #0]
   b5dd0:	695b      	ldr	r3, [r3, #20]
   b5dd2:	4798      	blx	r3
   b5dd4:	8120      	strh	r0, [r4, #8]
   b5dd6:	f003 fde7 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b5dda:	6803      	ldr	r3, [r0, #0]
   b5ddc:	695b      	ldr	r3, [r3, #20]
   b5dde:	4798      	blx	r3
   b5de0:	8923      	ldrh	r3, [r4, #8]
   b5de2:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b5de6:	4318      	orrs	r0, r3
   b5de8:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   b5dea:	f003 fddd 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b5dee:	6803      	ldr	r3, [r0, #0]
   b5df0:	695b      	ldr	r3, [r3, #20]
   b5df2:	4798      	blx	r3
   b5df4:	8160      	strh	r0, [r4, #10]
   b5df6:	f003 fdd7 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b5dfa:	6803      	ldr	r3, [r0, #0]
   b5dfc:	695b      	ldr	r3, [r3, #20]
   b5dfe:	4798      	blx	r3
   b5e00:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b5e04:	8965      	ldrh	r5, [r4, #10]
   b5e06:	4328      	orrs	r0, r5
   b5e08:	8160      	strh	r0, [r4, #10]
  uint8_t range = getRange();
   b5e0a:	4620      	mov	r0, r4
   b5e0c:	f7ff ff98 	bl	b5d40 <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   b5e10:	2803      	cmp	r0, #3
   b5e12:	d069      	beq.n	b5ee8 <_ZN15Adafruit_LIS3DH4readEv+0x178>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   b5e14:	2802      	cmp	r0, #2
   b5e16:	d06a      	beq.n	b5eee <_ZN15Adafruit_LIS3DH4readEv+0x17e>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   b5e18:	2801      	cmp	r0, #1
   b5e1a:	d06b      	beq.n	b5ef4 <_ZN15Adafruit_LIS3DH4readEv+0x184>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   b5e1c:	2800      	cmp	r0, #0
   b5e1e:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   b5e22:	bf18      	it	ne
   b5e24:	2301      	movne	r3, #1
  x_g = (float)x / divider;
   b5e26:	ee07 3a90 	vmov	s15, r3
   b5e2a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   b5e2e:	ee07 3a10 	vmov	s14, r3
   b5e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5e36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   b5e3a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  x_g = (float)x / divider;
   b5e3e:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   b5e42:	ee07 3a10 	vmov	s14, r3
   b5e46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_g = (float)x / divider;
   b5e4a:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   b5e4e:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   b5e52:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5e56:	ee07 3a10 	vmov	s14, r3
   b5e5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   b5e5e:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   b5e62:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b5e66:	edc4 6a05 	vstr	s13, [r4, #20]
}
   b5e6a:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
   b5e6c:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b5e70:	3301      	adds	r3, #1
   b5e72:	d101      	bne.n	b5e78 <_ZN15Adafruit_LIS3DH4readEv+0x108>
      beginTransaction();
   b5e74:	f7ff fe9a 	bl	b5bac <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   b5e78:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5e7c:	2100      	movs	r1, #0
   b5e7e:	b280      	uxth	r0, r0
   b5e80:	f003 fd37 	bl	b98f2 <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   b5e84:	21e8      	movs	r1, #232	; 0xe8
   b5e86:	4620      	mov	r0, r4
   b5e88:	f7ff fea6 	bl	b5bd8 <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   b5e8c:	21ff      	movs	r1, #255	; 0xff
   b5e8e:	4620      	mov	r0, r4
   b5e90:	f7ff fea2 	bl	b5bd8 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5e94:	21ff      	movs	r1, #255	; 0xff
   b5e96:	80e0      	strh	r0, [r4, #6]
   b5e98:	4620      	mov	r0, r4
   b5e9a:	f7ff fe9d 	bl	b5bd8 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5e9e:	88e3      	ldrh	r3, [r4, #6]
   b5ea0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b5ea4:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   b5ea6:	21ff      	movs	r1, #255	; 0xff
   b5ea8:	4620      	mov	r0, r4
   b5eaa:	f7ff fe95 	bl	b5bd8 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5eae:	21ff      	movs	r1, #255	; 0xff
   b5eb0:	8120      	strh	r0, [r4, #8]
   b5eb2:	4620      	mov	r0, r4
   b5eb4:	f7ff fe90 	bl	b5bd8 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5eb8:	8923      	ldrh	r3, [r4, #8]
   b5eba:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b5ebe:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   b5ec0:	21ff      	movs	r1, #255	; 0xff
   b5ec2:	4620      	mov	r0, r4
   b5ec4:	f7ff fe88 	bl	b5bd8 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5ec8:	21ff      	movs	r1, #255	; 0xff
   b5eca:	8160      	strh	r0, [r4, #10]
   b5ecc:	4620      	mov	r0, r4
   b5ece:	f7ff fe83 	bl	b5bd8 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5ed2:	8963      	ldrh	r3, [r4, #10]
   b5ed4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b5ed8:	8160      	strh	r0, [r4, #10]
    digitalWrite(_cs, HIGH);
   b5eda:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5ede:	2101      	movs	r1, #1
   b5ee0:	b280      	uxth	r0, r0
   b5ee2:	f003 fd06 	bl	b98f2 <digitalWrite>
    if (_sck == -1)
   b5ee6:	e790      	b.n	b5e0a <_ZN15Adafruit_LIS3DH4readEv+0x9a>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   b5ee8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   b5eec:	e79b      	b.n	b5e26 <_ZN15Adafruit_LIS3DH4readEv+0xb6>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   b5eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   b5ef2:	e798      	b.n	b5e26 <_ZN15Adafruit_LIS3DH4readEv+0xb6>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   b5ef4:	f641 73fe 	movw	r3, #8190	; 0x1ffe
   b5ef8:	e795      	b.n	b5e26 <_ZN15Adafruit_LIS3DH4readEv+0xb6>
   b5efa:	bf00      	nop
   b5efc:	00ffff00 	.word	0x00ffff00

000b5f00 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   b5f00:	b570      	push	{r4, r5, r6, lr}
   b5f02:	460c      	mov	r4, r1
   b5f04:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b5f06:	2220      	movs	r2, #32
   b5f08:	2100      	movs	r1, #0
   b5f0a:	1d20      	adds	r0, r4, #4
   b5f0c:	f004 fb9a 	bl	ba644 <memset>
  event->version   = sizeof(sensors_event_t);
   b5f10:	2324      	movs	r3, #36	; 0x24
   b5f12:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b5f14:	69ab      	ldr	r3, [r5, #24]
   b5f16:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   b5f18:	2601      	movs	r6, #1
  read();
   b5f1a:	4628      	mov	r0, r5
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   b5f1c:	60a6      	str	r6, [r4, #8]
  read();
   b5f1e:	f7ff ff27 	bl	b5d70 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
   b5f22:	68eb      	ldr	r3, [r5, #12]
   b5f24:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   b5f26:	692b      	ldr	r3, [r5, #16]
   b5f28:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   b5f2a:	696b      	ldr	r3, [r5, #20]
   b5f2c:	61e3      	str	r3, [r4, #28]
}
   b5f2e:	4630      	mov	r0, r6
   b5f30:	bd70      	pop	{r4, r5, r6, pc}

000b5f32 <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   b5f32:	b510      	push	{r4, lr}
   b5f34:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   b5f36:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
   b5f38:	f990 001d 	ldrsb.w	r0, [r0, #29]
   b5f3c:	1c42      	adds	r2, r0, #1
   b5f3e:	d123      	bne.n	b5f88 <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
   b5f40:	f003 fd32 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b5f44:	f002 f9ec 	bl	b8320 <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   b5f48:	210f      	movs	r1, #15
   b5f4a:	4620      	mov	r0, r4
   b5f4c:	f7ff feb6 	bl	b5cbc <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   b5f50:	2833      	cmp	r0, #51	; 0x33
   b5f52:	d13d      	bne.n	b5fd0 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   b5f54:	2207      	movs	r2, #7
   b5f56:	2120      	movs	r1, #32
   b5f58:	4620      	mov	r0, r4
   b5f5a:	f7ff fe73 	bl	b5c44 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
   b5f5e:	2107      	movs	r1, #7
   b5f60:	4620      	mov	r0, r4
   b5f62:	f7ff fef4 	bl	b5d4e <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   b5f66:	2288      	movs	r2, #136	; 0x88
   b5f68:	2123      	movs	r1, #35	; 0x23
   b5f6a:	4620      	mov	r0, r4
   b5f6c:	f7ff fe6a 	bl	b5c44 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   b5f70:	2210      	movs	r2, #16
   b5f72:	2122      	movs	r1, #34	; 0x22
   b5f74:	4620      	mov	r0, r4
   b5f76:	f7ff fe65 	bl	b5c44 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   b5f7a:	4620      	mov	r0, r4
   b5f7c:	2280      	movs	r2, #128	; 0x80
   b5f7e:	211f      	movs	r1, #31
   b5f80:	f7ff fe60 	bl	b5c44 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
   b5f84:	2001      	movs	r0, #1
}
   b5f86:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   b5f88:	2101      	movs	r1, #1
   b5f8a:	b280      	uxth	r0, r0
   b5f8c:	f003 fcb1 	bl	b98f2 <digitalWrite>
    pinMode(_cs, OUTPUT);
   b5f90:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5f94:	2101      	movs	r1, #1
   b5f96:	b280      	uxth	r0, r0
   b5f98:	f003 fc9a 	bl	b98d0 <pinMode>
    if (_sck == -1) {
   b5f9c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5fa0:	1c43      	adds	r3, r0, #1
   b5fa2:	d104      	bne.n	b5fae <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
   b5fa4:	f7ff fde6 	bl	b5b74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5fa8:	f002 fbf2 	bl	b8790 <_ZN8SPIClass5beginEv>
    }
   b5fac:	e7cc      	b.n	b5f48 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
   b5fae:	2101      	movs	r1, #1
   b5fb0:	b280      	uxth	r0, r0
   b5fb2:	f003 fc8d 	bl	b98d0 <pinMode>
      pinMode(_mosi, OUTPUT);
   b5fb6:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b5fba:	2101      	movs	r1, #1
   b5fbc:	b280      	uxth	r0, r0
   b5fbe:	f003 fc87 	bl	b98d0 <pinMode>
      pinMode(_miso, INPUT);
   b5fc2:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5fc6:	2100      	movs	r1, #0
   b5fc8:	b280      	uxth	r0, r0
   b5fca:	f003 fc81 	bl	b98d0 <pinMode>
   b5fce:	e7bb      	b.n	b5f48 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
   b5fd0:	2000      	movs	r0, #0
   b5fd2:	e7d8      	b.n	b5f86 <_ZN15Adafruit_LIS3DH5beginEh+0x54>

000b5fd4 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
size_t Print::print(T n, int base)
   b5fd4:	b570      	push	{r4, r5, r6, lr}
        if (n < 0 && base == 10) {
   b5fd6:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b5fd8:	4606      	mov	r6, r0
   b5fda:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b5fdc:	da0b      	bge.n	b5ff6 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b5fde:	2a0a      	cmp	r2, #10
   b5fe0:	d109      	bne.n	b5ff6 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b5fe2:	212d      	movs	r1, #45	; 0x2d
   b5fe4:	f002 fb50 	bl	b8688 <_ZN5Print5printEc>
            val = -n;
   b5fe8:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b5fea:	b2ea      	uxtb	r2, r5
   b5fec:	4630      	mov	r0, r6
    }
}
   b5fee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b5ff2:	f002 bb68 	b.w	b86c6 <_ZN5Print11printNumberEmh>
            val = n;
   b5ff6:	4621      	mov	r1, r4
   b5ff8:	e7f7      	b.n	b5fea <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b5ffa <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b5ffa:	b510      	push	{r4, lr}
   b5ffc:	4604      	mov	r4, r0
   b5ffe:	f003 f965 	bl	b92cc <_ZN9TCPClientC1Ev>
{

}
   b6002:	4620      	mov	r0, r4
   b6004:	bd10      	pop	{r4, pc}
	...

000b6008 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b6008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   b600a:	4f0f      	ldr	r7, [pc, #60]	; (b6048 <_ZN10HttpClient10sendHeaderEPKcS1_+0x40>)
{
   b600c:	4605      	mov	r5, r0
   b600e:	4614      	mov	r4, r2
   b6010:	460e      	mov	r6, r1
    client.print(aHeaderName);
   b6012:	f002 fb35 	bl	b8680 <_ZN5Print5printEPKc>
    client.print(": ");
   b6016:	4639      	mov	r1, r7
   b6018:	4628      	mov	r0, r5
   b601a:	f002 fb31 	bl	b8680 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b601e:	4621      	mov	r1, r4
   b6020:	4628      	mov	r0, r5
   b6022:	f002 fb46 	bl	b86b2 <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.print(aHeaderName);
   b6026:	f003 fa71 	bl	b950c <_Z16_fetch_usbserialv>
   b602a:	4631      	mov	r1, r6
   b602c:	f002 fb28 	bl	b8680 <_ZN5Print5printEPKc>
    Serial.print(": ");
   b6030:	f003 fa6c 	bl	b950c <_Z16_fetch_usbserialv>
   b6034:	4639      	mov	r1, r7
   b6036:	f002 fb23 	bl	b8680 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   b603a:	f003 fa67 	bl	b950c <_Z16_fetch_usbserialv>
   b603e:	4621      	mov	r1, r4
    #endif
}
   b6040:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(aHeaderValue);
   b6044:	f002 bb35 	b.w	b86b2 <_ZN5Print7printlnEPKc>
   b6048:	000bab4a 	.word	0x000bab4a

000b604c <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b604c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   b604e:	4f14      	ldr	r7, [pc, #80]	; (b60a0 <_ZN10HttpClient10sendHeaderEPKci+0x54>)
{
   b6050:	4604      	mov	r4, r0
   b6052:	4615      	mov	r5, r2
   b6054:	460e      	mov	r6, r1
    client.print(aHeaderName);
   b6056:	f002 fb13 	bl	b8680 <_ZN5Print5printEPKc>
    client.print(": ");
   b605a:	4639      	mov	r1, r7
   b605c:	4620      	mov	r0, r4
   b605e:	f002 fb0f 	bl	b8680 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b6062:	220a      	movs	r2, #10
   b6064:	4629      	mov	r1, r5
   b6066:	4620      	mov	r0, r4
   b6068:	f7ff ffb4 	bl	b5fd4 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b606c:	4620      	mov	r0, r4
   b606e:	f002 fb14 	bl	b869a <_ZN5Print7printlnEv>
    client.println(aHeaderValue);

    #ifdef LOGGING
    Serial.print(aHeaderName);
   b6072:	f003 fa4b 	bl	b950c <_Z16_fetch_usbserialv>
   b6076:	4631      	mov	r1, r6
   b6078:	f002 fb02 	bl	b8680 <_ZN5Print5printEPKc>
    Serial.print(": ");
   b607c:	f003 fa46 	bl	b950c <_Z16_fetch_usbserialv>
   b6080:	4639      	mov	r1, r7
   b6082:	f002 fafd 	bl	b8680 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   b6086:	f003 fa41 	bl	b950c <_Z16_fetch_usbserialv>
   b608a:	4629      	mov	r1, r5
   b608c:	4604      	mov	r4, r0
size_t Print::print(T n, int base)
   b608e:	220a      	movs	r2, #10
   b6090:	f7ff ffa0 	bl	b5fd4 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b6094:	4620      	mov	r0, r4
    #endif
}
   b6096:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b609a:	f002 bafe 	b.w	b869a <_ZN5Print7printlnEv>
   b609e:	bf00      	nop
   b60a0:	000bab4a 	.word	0x000bab4a

000b60a4 <_ZN10HttpClient10sendHeaderEPKc>:

void HttpClient::sendHeader(const char* aHeaderName)
{
   b60a4:	b510      	push	{r4, lr}
   b60a6:	460c      	mov	r4, r1
    client.println(aHeaderName);
   b60a8:	f002 fb03 	bl	b86b2 <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.println(aHeaderName);
   b60ac:	f003 fa2e 	bl	b950c <_Z16_fetch_usbserialv>
   b60b0:	4621      	mov	r1, r4
    #endif
}
   b60b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(aHeaderName);
   b60b6:	f002 bafc 	b.w	b86b2 <_ZN5Print7printlnEPKc>
	...

000b60bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b60bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b60c0:	460e      	mov	r6, r1
   b60c2:	b091      	sub	sp, #68	; 0x44
   b60c4:	461f      	mov	r7, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b60c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b60ca:	6013      	str	r3, [r2, #0]
{
   b60cc:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b60ce:	2100      	movs	r1, #0
   b60d0:	4630      	mov	r0, r6
   b60d2:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b60d6:	4690      	mov	r8, r2
   b60d8:	f002 fcf9 	bl	b8ace <_ZNK6String6equalsEPKc>
   b60dc:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b60e0:	4603      	mov	r3, r0
   b60e2:	b9c0      	cbnz	r0, b6116 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x5a>
	const char * c_str() const { return buffer; }
   b60e4:	f1be 0f00 	cmp.w	lr, #0
   b60e8:	bf14      	ite	ne
   b60ea:	4672      	movne	r2, lr
   b60ec:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b60ee:	6831      	ldr	r1, [r6, #0]
   b60f0:	b292      	uxth	r2, r2
   b60f2:	4620      	mov	r0, r4
   b60f4:	f002 feea 	bl	b8ecc <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b60f8:	1e05      	subs	r5, r0, #0
   b60fa:	bf18      	it	ne
   b60fc:	2501      	movne	r5, #1
    }

    #ifdef LOGGING
    if (connected) {
   b60fe:	b9ed      	cbnz	r5, b613c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x80>
            Serial.print(aRequest.ip);
        }
        Serial.print(":");
        Serial.println(aRequest.port);
    } else {
        Serial.println("HttpClient>\tConnection failed.");
   b6100:	f003 fa04 	bl	b950c <_Z16_fetch_usbserialv>
   b6104:	49be      	ldr	r1, [pc, #760]	; (b6400 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x344>)
   b6106:	f002 fad4 	bl	b86b2 <_ZN5Print7printlnEPKc>
    }
    #endif

    if (!connected) {
        client.stop();
   b610a:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b610c:	b011      	add	sp, #68	; 0x44
   b610e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b6112:	f003 b891 	b.w	b9238 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b6116:	4bbb      	ldr	r3, [pc, #748]	; (b6404 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x348>)
   b6118:	930a      	str	r3, [sp, #40]	; 0x28
   b611a:	f106 0c14 	add.w	ip, r6, #20
   b611e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6122:	ad0b      	add	r5, sp, #44	; 0x2c
   b6124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6126:	f8dc 3000 	ldr.w	r3, [ip]
   b612a:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b612c:	fa1f f28e 	uxth.w	r2, lr
   b6130:	2300      	movs	r3, #0
   b6132:	a90a      	add	r1, sp, #40	; 0x28
   b6134:	4620      	mov	r0, r4
   b6136:	f002 ffa9 	bl	b908c <_ZN9TCPClient7connectE9IPAddresstm>
   b613a:	e7dd      	b.n	b60f8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b613c:	2100      	movs	r1, #0
   b613e:	4630      	mov	r0, r6
   b6140:	f002 fcc5 	bl	b8ace <_ZNK6String6equalsEPKc>
        if(aRequest.hostname!=NULL) {
   b6144:	2800      	cmp	r0, #0
   b6146:	d15d      	bne.n	b6204 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x148>
            Serial.print("HttpClient>\tConnecting to: ");
   b6148:	f003 f9e0 	bl	b950c <_Z16_fetch_usbserialv>
   b614c:	49ae      	ldr	r1, [pc, #696]	; (b6408 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x34c>)
   b614e:	f002 fa97 	bl	b8680 <_ZN5Print5printEPKc>
            Serial.print(aRequest.hostname);
   b6152:	f003 f9db 	bl	b950c <_Z16_fetch_usbserialv>
   b6156:	6831      	ldr	r1, [r6, #0]
   b6158:	f002 fa92 	bl	b8680 <_ZN5Print5printEPKc>
        Serial.print(":");
   b615c:	f003 f9d6 	bl	b950c <_Z16_fetch_usbserialv>
   b6160:	49aa      	ldr	r1, [pc, #680]	; (b640c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   b6162:	f002 fa8d 	bl	b8680 <_ZN5Print5printEPKc>
        Serial.println(aRequest.port);
   b6166:	f003 f9d1 	bl	b950c <_Z16_fetch_usbserialv>
   b616a:	220a      	movs	r2, #10
   b616c:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   b616e:	4682      	mov	sl, r0
size_t Print::print(T n, int base)
   b6170:	f7ff ff30 	bl	b5fd4 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b6174:	4650      	mov	r0, sl
   b6176:	f002 fa90 	bl	b869a <_ZN5Print7printlnEv>
    client.print(aHttpMethod);
   b617a:	4649      	mov	r1, r9
   b617c:	4620      	mov	r0, r4
   b617e:	f002 fa7f 	bl	b8680 <_ZN5Print5printEPKc>
    client.print(" ");
   b6182:	49a3      	ldr	r1, [pc, #652]	; (b6410 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   b6184:	4620      	mov	r0, r4
   b6186:	f002 fa7b 	bl	b8680 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b618a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b618c:	4620      	mov	r0, r4
   b618e:	f002 fa77 	bl	b8680 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b6192:	49a0      	ldr	r1, [pc, #640]	; (b6414 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   b6194:	4620      	mov	r0, r4
   b6196:	f002 fa73 	bl	b8680 <_ZN5Print5printEPKc>
    Serial.println("HttpClient>\tStart of HTTP Request.");
   b619a:	f003 f9b7 	bl	b950c <_Z16_fetch_usbserialv>
   b619e:	499e      	ldr	r1, [pc, #632]	; (b6418 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x35c>)
   b61a0:	f002 fa87 	bl	b86b2 <_ZN5Print7printlnEPKc>
    Serial.print(aHttpMethod);
   b61a4:	f003 f9b2 	bl	b950c <_Z16_fetch_usbserialv>
   b61a8:	4649      	mov	r1, r9
   b61aa:	f002 fa69 	bl	b8680 <_ZN5Print5printEPKc>
    Serial.print(" ");
   b61ae:	f003 f9ad 	bl	b950c <_Z16_fetch_usbserialv>
   b61b2:	4997      	ldr	r1, [pc, #604]	; (b6410 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   b61b4:	f002 fa64 	bl	b8680 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
   b61b8:	f003 f9a8 	bl	b950c <_Z16_fetch_usbserialv>
   b61bc:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b61be:	f002 fa5f 	bl	b8680 <_ZN5Print5printEPKc>
    Serial.print(" HTTP/1.0\r\n");
   b61c2:	f003 f9a3 	bl	b950c <_Z16_fetch_usbserialv>
   b61c6:	4993      	ldr	r1, [pc, #588]	; (b6414 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   b61c8:	f002 fa5a 	bl	b8680 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b61cc:	4993      	ldr	r1, [pc, #588]	; (b641c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x360>)
   b61ce:	4a94      	ldr	r2, [pc, #592]	; (b6420 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x364>)
   b61d0:	4620      	mov	r0, r4
   b61d2:	f7ff ff19 	bl	b6008 <_ZN10HttpClient10sendHeaderEPKcS1_>
   b61d6:	2100      	movs	r1, #0
   b61d8:	4630      	mov	r0, r6
   b61da:	f002 fc78 	bl	b8ace <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b61de:	b920      	cbnz	r0, b61ea <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x12e>
        sendHeader("HOST", aRequest.hostname.c_str());
   b61e0:	6832      	ldr	r2, [r6, #0]
   b61e2:	4990      	ldr	r1, [pc, #576]	; (b6424 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x368>)
   b61e4:	4620      	mov	r0, r4
   b61e6:	f7ff ff0f 	bl	b6008 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b61ea:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b61ee:	2100      	movs	r1, #0
   b61f0:	4650      	mov	r0, sl
   b61f2:	f002 fc6c 	bl	b8ace <_ZNK6String6equalsEPKc>
   b61f6:	b988      	cbnz	r0, b621c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x160>
        sendHeader("Content-Length", (aRequest.body).length());
   b61f8:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b61fa:	498b      	ldr	r1, [pc, #556]	; (b6428 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x36c>)
   b61fc:	4620      	mov	r0, r4
   b61fe:	f7ff ff25 	bl	b604c <_ZN10HttpClient10sendHeaderEPKci>
   b6202:	e012      	b.n	b622a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16e>
            Serial.print("HttpClient>\tConnecting to IP: ");
   b6204:	f003 f982 	bl	b950c <_Z16_fetch_usbserialv>
   b6208:	4988      	ldr	r1, [pc, #544]	; (b642c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x370>)
   b620a:	f002 fa39 	bl	b8680 <_ZN5Print5printEPKc>
            Serial.print(aRequest.ip);
   b620e:	f003 f97d 	bl	b950c <_Z16_fetch_usbserialv>
   b6212:	f106 0110 	add.w	r1, r6, #16
   b6216:	f002 fa3a 	bl	b868e <_ZN5Print5printERK9Printable>
   b621a:	e79f      	b.n	b615c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xa0>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b621c:	4984      	ldr	r1, [pc, #528]	; (b6430 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x374>)
   b621e:	4648      	mov	r0, r9
   b6220:	f004 fa46 	bl	ba6b0 <strcmp>
   b6224:	4602      	mov	r2, r0
   b6226:	2800      	cmp	r0, #0
   b6228:	d0e7      	beq.n	b61fa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x13e>
    if (headers != NULL)
   b622a:	b15f      	cbz	r7, b6244 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x188>
        while (headers[i].header != NULL)
   b622c:	6839      	ldr	r1, [r7, #0]
   b622e:	b149      	cbz	r1, b6244 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x188>
            if (headers[i].value != NULL) {
   b6230:	687a      	ldr	r2, [r7, #4]
                sendHeader(headers[i].header, headers[i].value);
   b6232:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b6234:	b11a      	cbz	r2, b623e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
                sendHeader(headers[i].header, headers[i].value);
   b6236:	f7ff fee7 	bl	b6008 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b623a:	3708      	adds	r7, #8
        while (headers[i].header != NULL)
   b623c:	e7f6      	b.n	b622c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
                sendHeader(headers[i].header);
   b623e:	f7ff ff31 	bl	b60a4 <_ZN10HttpClient10sendHeaderEPKc>
   b6242:	e7fa      	b.n	b623a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17e>
    client.println();
   b6244:	4620      	mov	r0, r4
   b6246:	f002 fa28 	bl	b869a <_ZN5Print7printlnEv>
    client.flush();
   b624a:	4620      	mov	r0, r4
   b624c:	f002 fd9e 	bl	b8d8c <_ZN9TCPClient5flushEv>
   b6250:	2100      	movs	r1, #0
   b6252:	4650      	mov	r0, sl
   b6254:	f002 fc3b 	bl	b8ace <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b6258:	b940      	cbnz	r0, b626c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b0>
        client.println(aRequest.body);
   b625a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b625c:	4620      	mov	r0, r4
   b625e:	f002 fa28 	bl	b86b2 <_ZN5Print7printlnEPKc>
        Serial.println(aRequest.body);
   b6262:	f003 f953 	bl	b950c <_Z16_fetch_usbserialv>
   b6266:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b6268:	f002 fa23 	bl	b86b2 <_ZN5Print7printlnEPKc>
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   b626c:	f003 f94e 	bl	b950c <_Z16_fetch_usbserialv>
    memset(&buffer[0], 0, sizeof(buffer));
   b6270:	f104 0a1c 	add.w	sl, r4, #28
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   b6274:	496f      	ldr	r1, [pc, #444]	; (b6434 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x378>)
   b6276:	f002 fa1c 	bl	b86b2 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b627a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b627e:	2100      	movs	r1, #0
   b6280:	4650      	mov	r0, sl
   b6282:	f004 f9df 	bl	ba644 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6286:	f000 f9eb 	bl	b6660 <HAL_Timer_Get_Milli_Seconds>
   b628a:	9000      	str	r0, [sp, #0]
   b628c:	f000 f9e8 	bl	b6660 <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
   b6290:	2600      	movs	r6, #0
   b6292:	9001      	str	r0, [sp, #4]
        int bytes = client.available();
   b6294:	4620      	mov	r0, r4
   b6296:	f002 ff75 	bl	b9184 <_ZN9TCPClient9availableEv>
        if(bytes) {
   b629a:	4681      	mov	r9, r0
   b629c:	b178      	cbz	r0, b62be <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x202>
            Serial.print("\r\nHttpClient>\tReceiving TCP transaction of ");
   b629e:	f003 f935 	bl	b950c <_Z16_fetch_usbserialv>
   b62a2:	4965      	ldr	r1, [pc, #404]	; (b6438 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x37c>)
   b62a4:	f002 f9ec 	bl	b8680 <_ZN5Print5printEPKc>
            Serial.print(bytes);
   b62a8:	f003 f930 	bl	b950c <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   b62ac:	4649      	mov	r1, r9
   b62ae:	220a      	movs	r2, #10
   b62b0:	f7ff fe90 	bl	b5fd4 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
            Serial.println(" bytes.");
   b62b4:	f003 f92a 	bl	b950c <_Z16_fetch_usbserialv>
   b62b8:	4960      	ldr	r1, [pc, #384]	; (b643c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x380>)
   b62ba:	f002 f9fa 	bl	b86b2 <_ZN5Print7printlnEPKc>
    unsigned int bufferPosition = 0;
   b62be:	f04f 0b00 	mov.w	fp, #0
        while (client.available()) {
   b62c2:	4620      	mov	r0, r4
   b62c4:	f002 ff5e 	bl	b9184 <_ZN9TCPClient9availableEv>
   b62c8:	b320      	cbz	r0, b6314 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x258>
            char c = client.read();
   b62ca:	4620      	mov	r0, r4
   b62cc:	f002 fd44 	bl	b8d58 <_ZN9TCPClient4readEv>
   b62d0:	b2c7      	uxtb	r7, r0
            Serial.print(c);
   b62d2:	f003 f91b 	bl	b950c <_Z16_fetch_usbserialv>
   b62d6:	4639      	mov	r1, r7
   b62d8:	f002 f9d6 	bl	b8688 <_ZN5Print5printEc>
   b62dc:	f000 f9c0 	bl	b6660 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b62e0:	f240 33fe 	movw	r3, #1022	; 0x3fe
   b62e4:	429e      	cmp	r6, r3
   b62e6:	9000      	str	r0, [sp, #0]
   b62e8:	d803      	bhi.n	b62f2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x236>
                buffer[bufferPosition] = c;
   b62ea:	f80a 7006 	strb.w	r7, [sl, r6]
            bufferPosition++;
   b62ee:	3601      	adds	r6, #1
        while (client.available()) {
   b62f0:	e7e7      	b.n	b62c2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x206>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b62f2:	f240 33ff 	movw	r3, #1023	; 0x3ff
   b62f6:	429e      	cmp	r6, r3
   b62f8:	d1f9      	bne.n	b62ee <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x232>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b62fa:	2300      	movs	r3, #0
   b62fc:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   b6300:	4620      	mov	r0, r4
   b6302:	f002 ff99 	bl	b9238 <_ZN9TCPClient4stopEv>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
   b6306:	f003 f901 	bl	b950c <_Z16_fetch_usbserialv>
   b630a:	494d      	ldr	r1, [pc, #308]	; (b6440 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x384>)
   b630c:	f002 f9d1 	bl	b86b2 <_ZN5Print7printlnEPKc>
                error = true;
   b6310:	46ab      	mov	fp, r5
   b6312:	e7ec      	b.n	b62ee <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x232>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b6314:	19a3      	adds	r3, r4, r6
   b6316:	7718      	strb	r0, [r3, #28]
        if (bytes) {
   b6318:	f1b9 0f00 	cmp.w	r9, #0
   b631c:	d004      	beq.n	b6328 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x26c>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
   b631e:	f003 f8f5 	bl	b950c <_Z16_fetch_usbserialv>
   b6322:	4948      	ldr	r1, [pc, #288]	; (b6444 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x388>)
   b6324:	f002 f9ac 	bl	b8680 <_ZN5Print5printEPKc>
   b6328:	f000 f99a 	bl	b6660 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b632c:	9b00      	ldr	r3, [sp, #0]
   b632e:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b6332:	f1bb 0f00 	cmp.w	fp, #0
   b6336:	d106      	bne.n	b6346 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x28a>
   b6338:	f241 3388 	movw	r3, #5000	; 0x1388
   b633c:	4599      	cmp	r9, r3
   b633e:	d802      	bhi.n	b6346 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x28a>
            delay(200);
   b6340:	20c8      	movs	r0, #200	; 0xc8
   b6342:	f000 fcd5 	bl	b6cf0 <delay>
    } while (client.connected() && !timeout && !error);
   b6346:	4620      	mov	r0, r4
   b6348:	f002 fe3e 	bl	b8fc8 <_ZN9TCPClient9connectedEv>
   b634c:	f241 3388 	movw	r3, #5000	; 0x1388
   b6350:	2800      	cmp	r0, #0
   b6352:	d04c      	beq.n	b63ee <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x332>
   b6354:	4599      	cmp	r9, r3
   b6356:	d84c      	bhi.n	b63f2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x336>
   b6358:	f1bb 0f00 	cmp.w	fp, #0
   b635c:	d09a      	beq.n	b6294 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d8>
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
   b635e:	f003 f8d5 	bl	b950c <_Z16_fetch_usbserialv>
   b6362:	4939      	ldr	r1, [pc, #228]	; (b6448 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x38c>)
   b6364:	f002 f98c 	bl	b8680 <_ZN5Print5printEPKc>
    Serial.print(millis() - firstRead);
   b6368:	f003 f8d0 	bl	b950c <_Z16_fetch_usbserialv>
   b636c:	4605      	mov	r5, r0
   b636e:	f000 f977 	bl	b6660 <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   b6372:	9b01      	ldr	r3, [sp, #4]
   b6374:	220a      	movs	r2, #10
   b6376:	1ac1      	subs	r1, r0, r3
   b6378:	4628      	mov	r0, r5
   b637a:	f002 f9a4 	bl	b86c6 <_ZN5Print11printNumberEmh>
    Serial.println("ms).");
   b637e:	f003 f8c5 	bl	b950c <_Z16_fetch_usbserialv>
   b6382:	4932      	ldr	r1, [pc, #200]	; (b644c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x390>)
   b6384:	f002 f995 	bl	b86b2 <_ZN5Print7printlnEPKc>
    client.stop();
   b6388:	4620      	mov	r0, r4
   b638a:	f002 ff55 	bl	b9238 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b638e:	4651      	mov	r1, sl
   b6390:	a802      	add	r0, sp, #8
   b6392:	f002 fad2 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b6396:	230c      	movs	r3, #12
   b6398:	2209      	movs	r2, #9
   b639a:	a902      	add	r1, sp, #8
   b639c:	a806      	add	r0, sp, #24
   b639e:	f002 fbbb 	bl	b8b18 <_ZNK6String9substringEjj>
    Serial.print("HttpClient>\tStatus Code: ");
   b63a2:	f003 f8b3 	bl	b950c <_Z16_fetch_usbserialv>
   b63a6:	492a      	ldr	r1, [pc, #168]	; (b6450 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x394>)
   b63a8:	f002 f96a 	bl	b8680 <_ZN5Print5printEPKc>
    Serial.println(statusCode);
   b63ac:	f003 f8ae 	bl	b950c <_Z16_fetch_usbserialv>
   b63b0:	9906      	ldr	r1, [sp, #24]
   b63b2:	f002 f97e 	bl	b86b2 <_ZN5Print7printlnEPKc>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b63b6:	4927      	ldr	r1, [pc, #156]	; (b6454 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x398>)
   b63b8:	a80a      	add	r0, sp, #40	; 0x28
   b63ba:	f002 fabe 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
   b63be:	a90a      	add	r1, sp, #40	; 0x28
   b63c0:	a802      	add	r0, sp, #8
   b63c2:	f002 fba5 	bl	b8b10 <_ZNK6String7indexOfERKS_>
   b63c6:	4604      	mov	r4, r0
   b63c8:	a80a      	add	r0, sp, #40	; 0x28
   b63ca:	f002 fa6b 	bl	b88a4 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b63ce:	1c63      	adds	r3, r4, #1
   b63d0:	d146      	bne.n	b6460 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a4>
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
   b63d2:	f003 f89b 	bl	b950c <_Z16_fetch_usbserialv>
   b63d6:	4920      	ldr	r1, [pc, #128]	; (b6458 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x39c>)
   b63d8:	f002 f96b 	bl	b86b2 <_ZN5Print7printlnEPKc>
    String statusCode = raw_response.substring(9,12);
   b63dc:	a806      	add	r0, sp, #24
   b63de:	f002 fa61 	bl	b88a4 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b63e2:	a802      	add	r0, sp, #8
   b63e4:	f002 fa5e 	bl	b88a4 <_ZN6StringD1Ev>
}
   b63e8:	b011      	add	sp, #68	; 0x44
   b63ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (timeout) {
   b63ee:	4599      	cmp	r9, r3
   b63f0:	d9b5      	bls.n	b635e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2a2>
        Serial.println("\r\nHttpClient>\tError: Timeout while reading response.");
   b63f2:	f003 f88b 	bl	b950c <_Z16_fetch_usbserialv>
   b63f6:	4919      	ldr	r1, [pc, #100]	; (b645c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a0>)
   b63f8:	f002 f95b 	bl	b86b2 <_ZN5Print7printlnEPKc>
   b63fc:	e7af      	b.n	b635e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2a2>
   b63fe:	bf00      	nop
   b6400:	000bb1db 	.word	0x000bb1db
   b6404:	000bb564 	.word	0x000bb564
   b6408:	000bb160 	.word	0x000bb160
   b640c:	000bb040 	.word	0x000bb040
   b6410:	000bab4b 	.word	0x000bab4b
   b6414:	000bb19b 	.word	0x000bb19b
   b6418:	000bb1a7 	.word	0x000bb1a7
   b641c:	000bb1d0 	.word	0x000bb1d0
   b6420:	000bb1ca 	.word	0x000bb1ca
   b6424:	000bb1fa 	.word	0x000bb1fa
   b6428:	000bb1ff 	.word	0x000bb1ff
   b642c:	000bb17c 	.word	0x000bb17c
   b6430:	000bafbe 	.word	0x000bafbe
   b6434:	000bb20e 	.word	0x000bb20e
   b6438:	000bb22f 	.word	0x000bb22f
   b643c:	000bb25b 	.word	0x000bb25b
   b6440:	000bb263 	.word	0x000bb263
   b6444:	000bb298 	.word	0x000bb298
   b6448:	000bb2f3 	.word	0x000bb2f3
   b644c:	000bb318 	.word	0x000bb318
   b6450:	000bb31d 	.word	0x000bb31d
   b6454:	000bb337 	.word	0x000bb337
   b6458:	000bb33c 	.word	0x000bb33c
   b645c:	000bb2be 	.word	0x000bb2be
    aResponse.body = "";
   b6460:	f108 0504 	add.w	r5, r8, #4
   b6464:	490a      	ldr	r1, [pc, #40]	; (b6490 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3d4>)
   b6466:	4628      	mov	r0, r5
   b6468:	f002 fa95 	bl	b8996 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b646c:	1d22      	adds	r2, r4, #4
   b646e:	a902      	add	r1, sp, #8
   b6470:	a80a      	add	r0, sp, #40	; 0x28
   b6472:	f002 fb71 	bl	b8b58 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b6476:	a90a      	add	r1, sp, #40	; 0x28
   b6478:	4628      	mov	r0, r5
   b647a:	f002 fadb 	bl	b8a34 <_ZN6String6concatERKS_>
   b647e:	a80a      	add	r0, sp, #40	; 0x28
   b6480:	f002 fa10 	bl	b88a4 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b6484:	9806      	ldr	r0, [sp, #24]
   b6486:	f004 f889 	bl	ba59c <atoi>
   b648a:	f8c8 0000 	str.w	r0, [r8]
   b648e:	e7a5      	b.n	b63dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x320>
   b6490:	000bab99 	.word	0x000bab99
   b6494:	00000000 	.word	0x00000000

000b6498 <_ZN8WatchDog10initializeEm>:
#include "WatchDog_WCL.h"

void WatchDog::initialize(uint32_t timeInMilliseconds) {
   b6498:	b538      	push	{r3, r4, r5, lr}
    *(uint32_t *) WDT_RREN_REG = 0x00000001;
   b649a:	4c0b      	ldr	r4, [pc, #44]	; (b64c8 <_ZN8WatchDog10initializeEm+0x30>)
   b649c:	2501      	movs	r5, #1
   b649e:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    *(uint32_t *) WDT_CRV_REG = (uint32_t) (timeInMilliseconds * 32.768);
   b64a2:	4608      	mov	r0, r1
   b64a4:	f003 fd40 	bl	b9f28 <__aeabi_ui2d>
   b64a8:	a305      	add	r3, pc, #20	; (adr r3, b64c0 <_ZN8WatchDog10initializeEm+0x28>)
   b64aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   b64ae:	f003 fdb5 	bl	ba01c <__aeabi_dmul>
   b64b2:	f004 f84d 	bl	ba550 <__aeabi_d2uiz>
    *(uint32_t *) WDT_REG = 0x00000001;
   b64b6:	6025      	str	r5, [r4, #0]
    *(uint32_t *) WDT_CRV_REG = (uint32_t) (timeInMilliseconds * 32.768);
   b64b8:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
   b64bc:	bd38      	pop	{r3, r4, r5, pc}
   b64be:	bf00      	nop
   b64c0:	d2f1a9fc 	.word	0xd2f1a9fc
   b64c4:	4040624d 	.word	0x4040624d
   b64c8:	40010000 	.word	0x40010000

000b64cc <_ZN8WatchDog3petEv>:

void WatchDog::pet() {
    *(uint32_t *) WDT_RR0_REG = WDT_RELOAD;
   b64cc:	4b02      	ldr	r3, [pc, #8]	; (b64d8 <_ZN8WatchDog3petEv+0xc>)
   b64ce:	4a03      	ldr	r2, [pc, #12]	; (b64dc <_ZN8WatchDog3petEv+0x10>)
   b64d0:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   b64d4:	4770      	bx	lr
   b64d6:	bf00      	nop
   b64d8:	40010000 	.word	0x40010000
   b64dc:	6e524635 	.word	0x6e524635

000b64e0 <_ZN8WatchDog16runWhileSleepingEb>:
    return (*(uint32_t *) WDT_RUNSTATUS_REG == 1);
}

void WatchDog::runWhileSleeping(bool yes) {
    if (yes) {
        *(uint32_t *) WDT_CONFIG_REG |= 0x01;
   b64e0:	4a05      	ldr	r2, [pc, #20]	; (b64f8 <_ZN8WatchDog16runWhileSleepingEb+0x18>)
   b64e2:	f8d2 350c 	ldr.w	r3, [r2, #1292]	; 0x50c
    if (yes) {
   b64e6:	b121      	cbz	r1, b64f2 <_ZN8WatchDog16runWhileSleepingEb+0x12>
        *(uint32_t *) WDT_CONFIG_REG |= 0x01;
   b64e8:	f043 0301 	orr.w	r3, r3, #1
   b64ec:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    } else {
        *(uint32_t *) WDT_CONFIG_REG &= ~(0x01);
    }
}
   b64f0:	4770      	bx	lr
        *(uint32_t *) WDT_CONFIG_REG &= ~(0x01);
   b64f2:	f023 0301 	bic.w	r3, r3, #1
   b64f6:	e7f9      	b.n	b64ec <_ZN8WatchDog16runWhileSleepingEb+0xc>
   b64f8:	40010000 	.word	0x40010000

000b64fc <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b64fc:	b508      	push	{r3, lr}
   b64fe:	4b02      	ldr	r3, [pc, #8]	; (b6508 <hal_ble_stack_init+0xc>)
   b6500:	681b      	ldr	r3, [r3, #0]
   b6502:	689b      	ldr	r3, [r3, #8]
   b6504:	9301      	str	r3, [sp, #4]
   b6506:	bd08      	pop	{r3, pc}
   b6508:	00030278 	.word	0x00030278

000b650c <hal_ble_stack_deinit>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
   b650c:	b508      	push	{r3, lr}
   b650e:	4b02      	ldr	r3, [pc, #8]	; (b6518 <hal_ble_stack_deinit+0xc>)
   b6510:	681b      	ldr	r3, [r3, #0]
   b6512:	68db      	ldr	r3, [r3, #12]
   b6514:	9301      	str	r3, [sp, #4]
   b6516:	bd08      	pop	{r3, pc}
   b6518:	00030278 	.word	0x00030278

000b651c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b651c:	b508      	push	{r3, lr}
   b651e:	4b02      	ldr	r3, [pc, #8]	; (b6528 <hal_ble_gap_set_advertising_data+0xc>)
   b6520:	681b      	ldr	r3, [r3, #0]
   b6522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6524:	9301      	str	r3, [sp, #4]
   b6526:	bd08      	pop	{r3, pc}
   b6528:	00030278 	.word	0x00030278

000b652c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b652c:	b508      	push	{r3, lr}
   b652e:	4b02      	ldr	r3, [pc, #8]	; (b6538 <hal_ble_gap_set_scan_response_data+0xc>)
   b6530:	681b      	ldr	r3, [r3, #0]
   b6532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6534:	9301      	str	r3, [sp, #4]
   b6536:	bd08      	pop	{r3, pc}
   b6538:	00030278 	.word	0x00030278

000b653c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b653c:	b508      	push	{r3, lr}
   b653e:	4b02      	ldr	r3, [pc, #8]	; (b6548 <hal_ble_gap_start_advertising+0xc>)
   b6540:	681b      	ldr	r3, [r3, #0]
   b6542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b6544:	9301      	str	r3, [sp, #4]
   b6546:	bd08      	pop	{r3, pc}
   b6548:	00030278 	.word	0x00030278

000b654c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b654c:	b508      	push	{r3, lr}
   b654e:	4b03      	ldr	r3, [pc, #12]	; (b655c <hal_ble_gap_disconnect+0x10>)
   b6550:	681b      	ldr	r3, [r3, #0]
   b6552:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b6556:	9301      	str	r3, [sp, #4]
   b6558:	bd08      	pop	{r3, pc}
   b655a:	0000      	.short	0x0000
   b655c:	00030278 	.word	0x00030278

000b6560 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b6560:	b508      	push	{r3, lr}
   b6562:	4b03      	ldr	r3, [pc, #12]	; (b6570 <hal_ble_gatt_server_add_service+0x10>)
   b6564:	681b      	ldr	r3, [r3, #0]
   b6566:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b656a:	9301      	str	r3, [sp, #4]
   b656c:	bd08      	pop	{r3, pc}
   b656e:	0000      	.short	0x0000
   b6570:	00030278 	.word	0x00030278

000b6574 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6574:	b508      	push	{r3, lr}
   b6576:	4b03      	ldr	r3, [pc, #12]	; (b6584 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b6578:	681b      	ldr	r3, [r3, #0]
   b657a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b657e:	9301      	str	r3, [sp, #4]
   b6580:	bd08      	pop	{r3, pc}
   b6582:	0000      	.short	0x0000
   b6584:	00030278 	.word	0x00030278

000b6588 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6588:	b508      	push	{r3, lr}
   b658a:	4b03      	ldr	r3, [pc, #12]	; (b6598 <hal_ble_gatt_client_write_with_response+0x10>)
   b658c:	681b      	ldr	r3, [r3, #0]
   b658e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b6592:	9301      	str	r3, [sp, #4]
   b6594:	bd08      	pop	{r3, pc}
   b6596:	0000      	.short	0x0000
   b6598:	00030278 	.word	0x00030278

000b659c <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b659c:	b508      	push	{r3, lr}
   b659e:	4b03      	ldr	r3, [pc, #12]	; (b65ac <hal_ble_gatt_client_write_without_response+0x10>)
   b65a0:	681b      	ldr	r3, [r3, #0]
   b65a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b65a6:	9301      	str	r3, [sp, #4]
   b65a8:	bd08      	pop	{r3, pc}
   b65aa:	0000      	.short	0x0000
   b65ac:	00030278 	.word	0x00030278

000b65b0 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b65b0:	b508      	push	{r3, lr}
   b65b2:	4b03      	ldr	r3, [pc, #12]	; (b65c0 <hal_ble_gatt_server_add_characteristic+0x10>)
   b65b4:	681b      	ldr	r3, [r3, #0]
   b65b6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b65ba:	9301      	str	r3, [sp, #4]
   b65bc:	bd08      	pop	{r3, pc}
   b65be:	0000      	.short	0x0000
   b65c0:	00030278 	.word	0x00030278

000b65c4 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b65c4:	b508      	push	{r3, lr}
   b65c6:	4b03      	ldr	r3, [pc, #12]	; (b65d4 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b65c8:	681b      	ldr	r3, [r3, #0]
   b65ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b65ce:	9301      	str	r3, [sp, #4]
   b65d0:	bd08      	pop	{r3, pc}
   b65d2:	0000      	.short	0x0000
   b65d4:	00030278 	.word	0x00030278

000b65d8 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b65d8:	b508      	push	{r3, lr}
   b65da:	4b03      	ldr	r3, [pc, #12]	; (b65e8 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b65dc:	681b      	ldr	r3, [r3, #0]
   b65de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b65e2:	9301      	str	r3, [sp, #4]
   b65e4:	bd08      	pop	{r3, pc}
   b65e6:	0000      	.short	0x0000
   b65e8:	00030278 	.word	0x00030278

000b65ec <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b65ec:	b508      	push	{r3, lr}
   b65ee:	4b03      	ldr	r3, [pc, #12]	; (b65fc <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b65f0:	681b      	ldr	r3, [r3, #0]
   b65f2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b65f6:	9301      	str	r3, [sp, #4]
   b65f8:	bd08      	pop	{r3, pc}
   b65fa:	0000      	.short	0x0000
   b65fc:	00030278 	.word	0x00030278

000b6600 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6600:	b508      	push	{r3, lr}
   b6602:	4b02      	ldr	r3, [pc, #8]	; (b660c <os_mutex_recursive_create+0xc>)
   b6604:	681b      	ldr	r3, [r3, #0]
   b6606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6608:	9301      	str	r3, [sp, #4]
   b660a:	bd08      	pop	{r3, pc}
   b660c:	00030248 	.word	0x00030248

000b6610 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b6610:	b508      	push	{r3, lr}
   b6612:	4b02      	ldr	r3, [pc, #8]	; (b661c <os_mutex_recursive_lock+0xc>)
   b6614:	681b      	ldr	r3, [r3, #0]
   b6616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6618:	9301      	str	r3, [sp, #4]
   b661a:	bd08      	pop	{r3, pc}
   b661c:	00030248 	.word	0x00030248

000b6620 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b6620:	b508      	push	{r3, lr}
   b6622:	4b02      	ldr	r3, [pc, #8]	; (b662c <os_mutex_recursive_unlock+0xc>)
   b6624:	681b      	ldr	r3, [r3, #0]
   b6626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6628:	9301      	str	r3, [sp, #4]
   b662a:	bd08      	pop	{r3, pc}
   b662c:	00030248 	.word	0x00030248

000b6630 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   b6630:	b508      	push	{r3, lr}
   b6632:	4b02      	ldr	r3, [pc, #8]	; (b663c <HAL_Core_Get_Last_Reset_Info+0xc>)
   b6634:	681b      	ldr	r3, [r3, #0]
   b6636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b6638:	9301      	str	r3, [sp, #4]
   b663a:	bd08      	pop	{r3, pc}
   b663c:	00030234 	.word	0x00030234

000b6640 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6640:	b508      	push	{r3, lr}
   b6642:	4b02      	ldr	r3, [pc, #8]	; (b664c <HAL_RNG_GetRandomNumber+0xc>)
   b6644:	681b      	ldr	r3, [r3, #0]
   b6646:	685b      	ldr	r3, [r3, #4]
   b6648:	9301      	str	r3, [sp, #4]
   b664a:	bd08      	pop	{r3, pc}
   b664c:	00030218 	.word	0x00030218

000b6650 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6650:	b508      	push	{r3, lr}
   b6652:	4b02      	ldr	r3, [pc, #8]	; (b665c <HAL_Delay_Microseconds+0xc>)
   b6654:	681b      	ldr	r3, [r3, #0]
   b6656:	68db      	ldr	r3, [r3, #12]
   b6658:	9301      	str	r3, [sp, #4]
   b665a:	bd08      	pop	{r3, pc}
   b665c:	00030218 	.word	0x00030218

000b6660 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6660:	b508      	push	{r3, lr}
   b6662:	4b02      	ldr	r3, [pc, #8]	; (b666c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6664:	681b      	ldr	r3, [r3, #0]
   b6666:	695b      	ldr	r3, [r3, #20]
   b6668:	9301      	str	r3, [sp, #4]
   b666a:	bd08      	pop	{r3, pc}
   b666c:	00030218 	.word	0x00030218

000b6670 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b6670:	b508      	push	{r3, lr}
   b6672:	4b02      	ldr	r3, [pc, #8]	; (b667c <HAL_EEPROM_Init+0xc>)
   b6674:	681b      	ldr	r3, [r3, #0]
   b6676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6678:	9301      	str	r3, [sp, #4]
   b667a:	bd08      	pop	{r3, pc}
   b667c:	00030218 	.word	0x00030218

000b6680 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   b6680:	b508      	push	{r3, lr}
   b6682:	4b02      	ldr	r3, [pc, #8]	; (b668c <HAL_EEPROM_Get+0xc>)
   b6684:	681b      	ldr	r3, [r3, #0]
   b6686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6688:	9301      	str	r3, [sp, #4]
   b668a:	bd08      	pop	{r3, pc}
   b668c:	00030218 	.word	0x00030218

000b6690 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   b6690:	b508      	push	{r3, lr}
   b6692:	4b02      	ldr	r3, [pc, #8]	; (b669c <HAL_EEPROM_Put+0xc>)
   b6694:	681b      	ldr	r3, [r3, #0]
   b6696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6698:	9301      	str	r3, [sp, #4]
   b669a:	bd08      	pop	{r3, pc}
   b669c:	00030218 	.word	0x00030218

000b66a0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b66a0:	b508      	push	{r3, lr}
   b66a2:	4b02      	ldr	r3, [pc, #8]	; (b66ac <hal_rtc_time_is_valid+0xc>)
   b66a4:	681b      	ldr	r3, [r3, #0]
   b66a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b66a8:	9301      	str	r3, [sp, #4]
   b66aa:	bd08      	pop	{r3, pc}
   b66ac:	00030218 	.word	0x00030218

000b66b0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b66b0:	b508      	push	{r3, lr}
   b66b2:	4b02      	ldr	r3, [pc, #8]	; (b66bc <hal_rtc_get_time+0xc>)
   b66b4:	681b      	ldr	r3, [r3, #0]
   b66b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b66b8:	9301      	str	r3, [sp, #4]
   b66ba:	bd08      	pop	{r3, pc}
   b66bc:	00030218 	.word	0x00030218

000b66c0 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b66c0:	b508      	push	{r3, lr}
   b66c2:	4b02      	ldr	r3, [pc, #8]	; (b66cc <hal_rtc_set_time+0xc>)
   b66c4:	681b      	ldr	r3, [r3, #0]
   b66c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b66c8:	9301      	str	r3, [sp, #4]
   b66ca:	bd08      	pop	{r3, pc}
   b66cc:	00030218 	.word	0x00030218

000b66d0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b66d0:	b508      	push	{r3, lr}
   b66d2:	4b02      	ldr	r3, [pc, #8]	; (b66dc <HAL_Pin_Mode+0xc>)
   b66d4:	681b      	ldr	r3, [r3, #0]
   b66d6:	689b      	ldr	r3, [r3, #8]
   b66d8:	9301      	str	r3, [sp, #4]
   b66da:	bd08      	pop	{r3, pc}
   b66dc:	0003022c 	.word	0x0003022c

000b66e0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b66e0:	b508      	push	{r3, lr}
   b66e2:	4b02      	ldr	r3, [pc, #8]	; (b66ec <HAL_Get_Pin_Mode+0xc>)
   b66e4:	681b      	ldr	r3, [r3, #0]
   b66e6:	68db      	ldr	r3, [r3, #12]
   b66e8:	9301      	str	r3, [sp, #4]
   b66ea:	bd08      	pop	{r3, pc}
   b66ec:	0003022c 	.word	0x0003022c

000b66f0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b66f0:	b508      	push	{r3, lr}
   b66f2:	4b02      	ldr	r3, [pc, #8]	; (b66fc <HAL_GPIO_Write+0xc>)
   b66f4:	681b      	ldr	r3, [r3, #0]
   b66f6:	691b      	ldr	r3, [r3, #16]
   b66f8:	9301      	str	r3, [sp, #4]
   b66fa:	bd08      	pop	{r3, pc}
   b66fc:	0003022c 	.word	0x0003022c

000b6700 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6700:	b508      	push	{r3, lr}
   b6702:	4b02      	ldr	r3, [pc, #8]	; (b670c <HAL_GPIO_Read+0xc>)
   b6704:	681b      	ldr	r3, [r3, #0]
   b6706:	695b      	ldr	r3, [r3, #20]
   b6708:	9301      	str	r3, [sp, #4]
   b670a:	bd08      	pop	{r3, pc}
   b670c:	0003022c 	.word	0x0003022c

000b6710 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6710:	b508      	push	{r3, lr}
   b6712:	4b02      	ldr	r3, [pc, #8]	; (b671c <hal_i2c_begin+0xc>)
   b6714:	681b      	ldr	r3, [r3, #0]
   b6716:	68db      	ldr	r3, [r3, #12]
   b6718:	9301      	str	r3, [sp, #4]
   b671a:	bd08      	pop	{r3, pc}
   b671c:	00030228 	.word	0x00030228

000b6720 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6720:	b508      	push	{r3, lr}
   b6722:	4b02      	ldr	r3, [pc, #8]	; (b672c <hal_i2c_begin_transmission+0xc>)
   b6724:	681b      	ldr	r3, [r3, #0]
   b6726:	699b      	ldr	r3, [r3, #24]
   b6728:	9301      	str	r3, [sp, #4]
   b672a:	bd08      	pop	{r3, pc}
   b672c:	00030228 	.word	0x00030228

000b6730 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6730:	b508      	push	{r3, lr}
   b6732:	4b02      	ldr	r3, [pc, #8]	; (b673c <hal_i2c_end_transmission+0xc>)
   b6734:	681b      	ldr	r3, [r3, #0]
   b6736:	69db      	ldr	r3, [r3, #28]
   b6738:	9301      	str	r3, [sp, #4]
   b673a:	bd08      	pop	{r3, pc}
   b673c:	00030228 	.word	0x00030228

000b6740 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6740:	b508      	push	{r3, lr}
   b6742:	4b02      	ldr	r3, [pc, #8]	; (b674c <hal_i2c_write+0xc>)
   b6744:	681b      	ldr	r3, [r3, #0]
   b6746:	6a1b      	ldr	r3, [r3, #32]
   b6748:	9301      	str	r3, [sp, #4]
   b674a:	bd08      	pop	{r3, pc}
   b674c:	00030228 	.word	0x00030228

000b6750 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6750:	b508      	push	{r3, lr}
   b6752:	4b02      	ldr	r3, [pc, #8]	; (b675c <hal_i2c_available+0xc>)
   b6754:	681b      	ldr	r3, [r3, #0]
   b6756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6758:	9301      	str	r3, [sp, #4]
   b675a:	bd08      	pop	{r3, pc}
   b675c:	00030228 	.word	0x00030228

000b6760 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6760:	b508      	push	{r3, lr}
   b6762:	4b02      	ldr	r3, [pc, #8]	; (b676c <hal_i2c_read+0xc>)
   b6764:	681b      	ldr	r3, [r3, #0]
   b6766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6768:	9301      	str	r3, [sp, #4]
   b676a:	bd08      	pop	{r3, pc}
   b676c:	00030228 	.word	0x00030228

000b6770 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6770:	b508      	push	{r3, lr}
   b6772:	4b02      	ldr	r3, [pc, #8]	; (b677c <hal_i2c_peek+0xc>)
   b6774:	681b      	ldr	r3, [r3, #0]
   b6776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6778:	9301      	str	r3, [sp, #4]
   b677a:	bd08      	pop	{r3, pc}
   b677c:	00030228 	.word	0x00030228

000b6780 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6780:	b508      	push	{r3, lr}
   b6782:	4b02      	ldr	r3, [pc, #8]	; (b678c <hal_i2c_flush+0xc>)
   b6784:	681b      	ldr	r3, [r3, #0]
   b6786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6788:	9301      	str	r3, [sp, #4]
   b678a:	bd08      	pop	{r3, pc}
   b678c:	00030228 	.word	0x00030228

000b6790 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6790:	b508      	push	{r3, lr}
   b6792:	4b02      	ldr	r3, [pc, #8]	; (b679c <hal_i2c_is_enabled+0xc>)
   b6794:	681b      	ldr	r3, [r3, #0]
   b6796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6798:	9301      	str	r3, [sp, #4]
   b679a:	bd08      	pop	{r3, pc}
   b679c:	00030228 	.word	0x00030228

000b67a0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b67a0:	b508      	push	{r3, lr}
   b67a2:	4b02      	ldr	r3, [pc, #8]	; (b67ac <hal_i2c_init+0xc>)
   b67a4:	681b      	ldr	r3, [r3, #0]
   b67a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b67a8:	9301      	str	r3, [sp, #4]
   b67aa:	bd08      	pop	{r3, pc}
   b67ac:	00030228 	.word	0x00030228

000b67b0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b67b0:	b508      	push	{r3, lr}
   b67b2:	4b02      	ldr	r3, [pc, #8]	; (b67bc <hal_i2c_request_ex+0xc>)
   b67b4:	681b      	ldr	r3, [r3, #0]
   b67b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b67b8:	9301      	str	r3, [sp, #4]
   b67ba:	bd08      	pop	{r3, pc}
   b67bc:	00030228 	.word	0x00030228

000b67c0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b67c0:	b508      	push	{r3, lr}
   b67c2:	4b02      	ldr	r3, [pc, #8]	; (b67cc <if_index_to_name+0xc>)
   b67c4:	681b      	ldr	r3, [r3, #0]
   b67c6:	695b      	ldr	r3, [r3, #20]
   b67c8:	9301      	str	r3, [sp, #4]
   b67ca:	bd08      	pop	{r3, pc}
   b67cc:	0003026c 	.word	0x0003026c

000b67d0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b67d0:	b508      	push	{r3, lr}
   b67d2:	4b02      	ldr	r3, [pc, #8]	; (b67dc <inet_inet_ntop+0xc>)
   b67d4:	681b      	ldr	r3, [r3, #0]
   b67d6:	695b      	ldr	r3, [r3, #20]
   b67d8:	9301      	str	r3, [sp, #4]
   b67da:	bd08      	pop	{r3, pc}
   b67dc:	00030264 	.word	0x00030264

000b67e0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b67e0:	b508      	push	{r3, lr}
   b67e2:	4b02      	ldr	r3, [pc, #8]	; (b67ec <inet_htonl+0xc>)
   b67e4:	681b      	ldr	r3, [r3, #0]
   b67e6:	6a1b      	ldr	r3, [r3, #32]
   b67e8:	9301      	str	r3, [sp, #4]
   b67ea:	bd08      	pop	{r3, pc}
   b67ec:	00030264 	.word	0x00030264

000b67f0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b67f0:	b508      	push	{r3, lr}
   b67f2:	4b02      	ldr	r3, [pc, #8]	; (b67fc <inet_htons+0xc>)
   b67f4:	681b      	ldr	r3, [r3, #0]
   b67f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b67f8:	9301      	str	r3, [sp, #4]
   b67fa:	bd08      	pop	{r3, pc}
   b67fc:	00030264 	.word	0x00030264

000b6800 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6800:	b508      	push	{r3, lr}
   b6802:	4b02      	ldr	r3, [pc, #8]	; (b680c <netdb_freeaddrinfo+0xc>)
   b6804:	681b      	ldr	r3, [r3, #0]
   b6806:	689b      	ldr	r3, [r3, #8]
   b6808:	9301      	str	r3, [sp, #4]
   b680a:	bd08      	pop	{r3, pc}
   b680c:	00030268 	.word	0x00030268

000b6810 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6810:	b508      	push	{r3, lr}
   b6812:	4b02      	ldr	r3, [pc, #8]	; (b681c <netdb_getaddrinfo+0xc>)
   b6814:	681b      	ldr	r3, [r3, #0]
   b6816:	68db      	ldr	r3, [r3, #12]
   b6818:	9301      	str	r3, [sp, #4]
   b681a:	bd08      	pop	{r3, pc}
   b681c:	00030268 	.word	0x00030268

000b6820 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6820:	b508      	push	{r3, lr}
   b6822:	4b02      	ldr	r3, [pc, #8]	; (b682c <sock_setsockopt+0xc>)
   b6824:	681b      	ldr	r3, [r3, #0]
   b6826:	699b      	ldr	r3, [r3, #24]
   b6828:	9301      	str	r3, [sp, #4]
   b682a:	bd08      	pop	{r3, pc}
   b682c:	00030238 	.word	0x00030238

000b6830 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6830:	b508      	push	{r3, lr}
   b6832:	4b02      	ldr	r3, [pc, #8]	; (b683c <sock_close+0xc>)
   b6834:	681b      	ldr	r3, [r3, #0]
   b6836:	69db      	ldr	r3, [r3, #28]
   b6838:	9301      	str	r3, [sp, #4]
   b683a:	bd08      	pop	{r3, pc}
   b683c:	00030238 	.word	0x00030238

000b6840 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6840:	b508      	push	{r3, lr}
   b6842:	4b02      	ldr	r3, [pc, #8]	; (b684c <sock_connect+0xc>)
   b6844:	681b      	ldr	r3, [r3, #0]
   b6846:	6a1b      	ldr	r3, [r3, #32]
   b6848:	9301      	str	r3, [sp, #4]
   b684a:	bd08      	pop	{r3, pc}
   b684c:	00030238 	.word	0x00030238

000b6850 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6850:	b508      	push	{r3, lr}
   b6852:	4b02      	ldr	r3, [pc, #8]	; (b685c <sock_recv+0xc>)
   b6854:	681b      	ldr	r3, [r3, #0]
   b6856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6858:	9301      	str	r3, [sp, #4]
   b685a:	bd08      	pop	{r3, pc}
   b685c:	00030238 	.word	0x00030238

000b6860 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6860:	b508      	push	{r3, lr}
   b6862:	4b02      	ldr	r3, [pc, #8]	; (b686c <sock_send+0xc>)
   b6864:	681b      	ldr	r3, [r3, #0]
   b6866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6868:	9301      	str	r3, [sp, #4]
   b686a:	bd08      	pop	{r3, pc}
   b686c:	00030238 	.word	0x00030238

000b6870 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6870:	b508      	push	{r3, lr}
   b6872:	4b02      	ldr	r3, [pc, #8]	; (b687c <sock_socket+0xc>)
   b6874:	681b      	ldr	r3, [r3, #0]
   b6876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6878:	9301      	str	r3, [sp, #4]
   b687a:	bd08      	pop	{r3, pc}
   b687c:	00030238 	.word	0x00030238

000b6880 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6880:	b508      	push	{r3, lr}
   b6882:	4b02      	ldr	r3, [pc, #8]	; (b688c <hal_spi_begin+0xc>)
   b6884:	681b      	ldr	r3, [r3, #0]
   b6886:	681b      	ldr	r3, [r3, #0]
   b6888:	9301      	str	r3, [sp, #4]
   b688a:	bd08      	pop	{r3, pc}
   b688c:	00030230 	.word	0x00030230

000b6890 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b6890:	b508      	push	{r3, lr}
   b6892:	4b02      	ldr	r3, [pc, #8]	; (b689c <hal_spi_set_bit_order+0xc>)
   b6894:	681b      	ldr	r3, [r3, #0]
   b6896:	689b      	ldr	r3, [r3, #8]
   b6898:	9301      	str	r3, [sp, #4]
   b689a:	bd08      	pop	{r3, pc}
   b689c:	00030230 	.word	0x00030230

000b68a0 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b68a0:	b508      	push	{r3, lr}
   b68a2:	4b02      	ldr	r3, [pc, #8]	; (b68ac <hal_spi_set_data_mode+0xc>)
   b68a4:	681b      	ldr	r3, [r3, #0]
   b68a6:	68db      	ldr	r3, [r3, #12]
   b68a8:	9301      	str	r3, [sp, #4]
   b68aa:	bd08      	pop	{r3, pc}
   b68ac:	00030230 	.word	0x00030230

000b68b0 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b68b0:	b508      	push	{r3, lr}
   b68b2:	4b02      	ldr	r3, [pc, #8]	; (b68bc <hal_spi_set_clock_divider+0xc>)
   b68b4:	681b      	ldr	r3, [r3, #0]
   b68b6:	691b      	ldr	r3, [r3, #16]
   b68b8:	9301      	str	r3, [sp, #4]
   b68ba:	bd08      	pop	{r3, pc}
   b68bc:	00030230 	.word	0x00030230

000b68c0 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b68c0:	b508      	push	{r3, lr}
   b68c2:	4b02      	ldr	r3, [pc, #8]	; (b68cc <hal_spi_transfer+0xc>)
   b68c4:	681b      	ldr	r3, [r3, #0]
   b68c6:	695b      	ldr	r3, [r3, #20]
   b68c8:	9301      	str	r3, [sp, #4]
   b68ca:	bd08      	pop	{r3, pc}
   b68cc:	00030230 	.word	0x00030230

000b68d0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b68d0:	b508      	push	{r3, lr}
   b68d2:	4b02      	ldr	r3, [pc, #8]	; (b68dc <hal_spi_init+0xc>)
   b68d4:	681b      	ldr	r3, [r3, #0]
   b68d6:	69db      	ldr	r3, [r3, #28]
   b68d8:	9301      	str	r3, [sp, #4]
   b68da:	bd08      	pop	{r3, pc}
   b68dc:	00030230 	.word	0x00030230

000b68e0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b68e0:	b508      	push	{r3, lr}
   b68e2:	4b02      	ldr	r3, [pc, #8]	; (b68ec <hal_spi_is_enabled+0xc>)
   b68e4:	681b      	ldr	r3, [r3, #0]
   b68e6:	6a1b      	ldr	r3, [r3, #32]
   b68e8:	9301      	str	r3, [sp, #4]
   b68ea:	bd08      	pop	{r3, pc}
   b68ec:	00030230 	.word	0x00030230

000b68f0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b68f0:	b508      	push	{r3, lr}
   b68f2:	4b02      	ldr	r3, [pc, #8]	; (b68fc <hal_spi_info+0xc>)
   b68f4:	681b      	ldr	r3, [r3, #0]
   b68f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b68f8:	9301      	str	r3, [sp, #4]
   b68fa:	bd08      	pop	{r3, pc}
   b68fc:	00030230 	.word	0x00030230

000b6900 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6900:	b508      	push	{r3, lr}
   b6902:	4b02      	ldr	r3, [pc, #8]	; (b690c <hal_spi_acquire+0xc>)
   b6904:	681b      	ldr	r3, [r3, #0]
   b6906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6908:	9301      	str	r3, [sp, #4]
   b690a:	bd08      	pop	{r3, pc}
   b690c:	00030230 	.word	0x00030230

000b6910 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6910:	b508      	push	{r3, lr}
   b6912:	4b02      	ldr	r3, [pc, #8]	; (b691c <hal_spi_release+0xc>)
   b6914:	681b      	ldr	r3, [r3, #0]
   b6916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6918:	9301      	str	r3, [sp, #4]
   b691a:	bd08      	pop	{r3, pc}
   b691c:	00030230 	.word	0x00030230

000b6920 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6920:	b508      	push	{r3, lr}
   b6922:	4b02      	ldr	r3, [pc, #8]	; (b692c <hal_usart_write+0xc>)
   b6924:	681b      	ldr	r3, [r3, #0]
   b6926:	68db      	ldr	r3, [r3, #12]
   b6928:	9301      	str	r3, [sp, #4]
   b692a:	bd08      	pop	{r3, pc}
   b692c:	0003023c 	.word	0x0003023c

000b6930 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6930:	b508      	push	{r3, lr}
   b6932:	4b02      	ldr	r3, [pc, #8]	; (b693c <hal_usart_available+0xc>)
   b6934:	681b      	ldr	r3, [r3, #0]
   b6936:	691b      	ldr	r3, [r3, #16]
   b6938:	9301      	str	r3, [sp, #4]
   b693a:	bd08      	pop	{r3, pc}
   b693c:	0003023c 	.word	0x0003023c

000b6940 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6940:	b508      	push	{r3, lr}
   b6942:	4b02      	ldr	r3, [pc, #8]	; (b694c <hal_usart_read+0xc>)
   b6944:	681b      	ldr	r3, [r3, #0]
   b6946:	695b      	ldr	r3, [r3, #20]
   b6948:	9301      	str	r3, [sp, #4]
   b694a:	bd08      	pop	{r3, pc}
   b694c:	0003023c 	.word	0x0003023c

000b6950 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6950:	b508      	push	{r3, lr}
   b6952:	4b02      	ldr	r3, [pc, #8]	; (b695c <hal_usart_peek+0xc>)
   b6954:	681b      	ldr	r3, [r3, #0]
   b6956:	699b      	ldr	r3, [r3, #24]
   b6958:	9301      	str	r3, [sp, #4]
   b695a:	bd08      	pop	{r3, pc}
   b695c:	0003023c 	.word	0x0003023c

000b6960 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6960:	b508      	push	{r3, lr}
   b6962:	4b02      	ldr	r3, [pc, #8]	; (b696c <hal_usart_flush+0xc>)
   b6964:	681b      	ldr	r3, [r3, #0]
   b6966:	69db      	ldr	r3, [r3, #28]
   b6968:	9301      	str	r3, [sp, #4]
   b696a:	bd08      	pop	{r3, pc}
   b696c:	0003023c 	.word	0x0003023c

000b6970 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6970:	b508      	push	{r3, lr}
   b6972:	4b02      	ldr	r3, [pc, #8]	; (b697c <hal_usart_is_enabled+0xc>)
   b6974:	681b      	ldr	r3, [r3, #0]
   b6976:	6a1b      	ldr	r3, [r3, #32]
   b6978:	9301      	str	r3, [sp, #4]
   b697a:	bd08      	pop	{r3, pc}
   b697c:	0003023c 	.word	0x0003023c

000b6980 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6980:	b508      	push	{r3, lr}
   b6982:	4b02      	ldr	r3, [pc, #8]	; (b698c <hal_usart_available_data_for_write+0xc>)
   b6984:	681b      	ldr	r3, [r3, #0]
   b6986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6988:	9301      	str	r3, [sp, #4]
   b698a:	bd08      	pop	{r3, pc}
   b698c:	0003023c 	.word	0x0003023c

000b6990 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6990:	b508      	push	{r3, lr}
   b6992:	4b02      	ldr	r3, [pc, #8]	; (b699c <hal_usart_init_ex+0xc>)
   b6994:	681b      	ldr	r3, [r3, #0]
   b6996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6998:	9301      	str	r3, [sp, #4]
   b699a:	bd08      	pop	{r3, pc}
   b699c:	0003023c 	.word	0x0003023c

000b69a0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b69a0:	b508      	push	{r3, lr}
   b69a2:	4b02      	ldr	r3, [pc, #8]	; (b69ac <HAL_USB_USART_Init+0xc>)
   b69a4:	681b      	ldr	r3, [r3, #0]
   b69a6:	681b      	ldr	r3, [r3, #0]
   b69a8:	9301      	str	r3, [sp, #4]
   b69aa:	bd08      	pop	{r3, pc}
   b69ac:	0003024c 	.word	0x0003024c

000b69b0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b69b0:	b508      	push	{r3, lr}
   b69b2:	4b02      	ldr	r3, [pc, #8]	; (b69bc <HAL_USB_USART_Begin+0xc>)
   b69b4:	681b      	ldr	r3, [r3, #0]
   b69b6:	685b      	ldr	r3, [r3, #4]
   b69b8:	9301      	str	r3, [sp, #4]
   b69ba:	bd08      	pop	{r3, pc}
   b69bc:	0003024c 	.word	0x0003024c

000b69c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b69c0:	b508      	push	{r3, lr}
   b69c2:	4b02      	ldr	r3, [pc, #8]	; (b69cc <HAL_USB_USART_Available_Data+0xc>)
   b69c4:	681b      	ldr	r3, [r3, #0]
   b69c6:	691b      	ldr	r3, [r3, #16]
   b69c8:	9301      	str	r3, [sp, #4]
   b69ca:	bd08      	pop	{r3, pc}
   b69cc:	0003024c 	.word	0x0003024c

000b69d0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b69d0:	b508      	push	{r3, lr}
   b69d2:	4b02      	ldr	r3, [pc, #8]	; (b69dc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b69d4:	681b      	ldr	r3, [r3, #0]
   b69d6:	695b      	ldr	r3, [r3, #20]
   b69d8:	9301      	str	r3, [sp, #4]
   b69da:	bd08      	pop	{r3, pc}
   b69dc:	0003024c 	.word	0x0003024c

000b69e0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b69e0:	b508      	push	{r3, lr}
   b69e2:	4b02      	ldr	r3, [pc, #8]	; (b69ec <HAL_USB_USART_Receive_Data+0xc>)
   b69e4:	681b      	ldr	r3, [r3, #0]
   b69e6:	699b      	ldr	r3, [r3, #24]
   b69e8:	9301      	str	r3, [sp, #4]
   b69ea:	bd08      	pop	{r3, pc}
   b69ec:	0003024c 	.word	0x0003024c

000b69f0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b69f0:	b508      	push	{r3, lr}
   b69f2:	4b02      	ldr	r3, [pc, #8]	; (b69fc <HAL_USB_USART_Send_Data+0xc>)
   b69f4:	681b      	ldr	r3, [r3, #0]
   b69f6:	69db      	ldr	r3, [r3, #28]
   b69f8:	9301      	str	r3, [sp, #4]
   b69fa:	bd08      	pop	{r3, pc}
   b69fc:	0003024c 	.word	0x0003024c

000b6a00 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6a00:	b508      	push	{r3, lr}
   b6a02:	4b02      	ldr	r3, [pc, #8]	; (b6a0c <HAL_USB_USART_Flush_Data+0xc>)
   b6a04:	681b      	ldr	r3, [r3, #0]
   b6a06:	6a1b      	ldr	r3, [r3, #32]
   b6a08:	9301      	str	r3, [sp, #4]
   b6a0a:	bd08      	pop	{r3, pc}
   b6a0c:	0003024c 	.word	0x0003024c

000b6a10 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b6a10:	b508      	push	{r3, lr}
   b6a12:	4b02      	ldr	r3, [pc, #8]	; (b6a1c <HAL_USB_USART_Is_Connected+0xc>)
   b6a14:	681b      	ldr	r3, [r3, #0]
   b6a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6a18:	9301      	str	r3, [sp, #4]
   b6a1a:	bd08      	pop	{r3, pc}
   b6a1c:	0003024c 	.word	0x0003024c

000b6a20 <wlan_get_credentials>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
   b6a20:	b508      	push	{r3, lr}
   b6a22:	4b02      	ldr	r3, [pc, #8]	; (b6a2c <wlan_get_credentials+0xc>)
   b6a24:	681b      	ldr	r3, [r3, #0]
   b6a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b6a28:	9301      	str	r3, [sp, #4]
   b6a2a:	bd08      	pop	{r3, pc}
   b6a2c:	00030274 	.word	0x00030274

000b6a30 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6a30:	b508      	push	{r3, lr}
   b6a32:	4b02      	ldr	r3, [pc, #8]	; (b6a3c <panic_+0xc>)
   b6a34:	681b      	ldr	r3, [r3, #0]
   b6a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6a38:	9301      	str	r3, [sp, #4]
   b6a3a:	bd08      	pop	{r3, pc}
   b6a3c:	00030260 	.word	0x00030260

000b6a40 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6a40:	b508      	push	{r3, lr}
   b6a42:	4b02      	ldr	r3, [pc, #8]	; (b6a4c <log_message+0xc>)
   b6a44:	681b      	ldr	r3, [r3, #0]
   b6a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6a48:	9301      	str	r3, [sp, #4]
   b6a4a:	bd08      	pop	{r3, pc}
   b6a4c:	00030260 	.word	0x00030260

000b6a50 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6a50:	b508      	push	{r3, lr}
   b6a52:	4b02      	ldr	r3, [pc, #8]	; (b6a5c <system_mode+0xc>)
   b6a54:	681b      	ldr	r3, [r3, #0]
   b6a56:	681b      	ldr	r3, [r3, #0]
   b6a58:	9301      	str	r3, [sp, #4]
   b6a5a:	bd08      	pop	{r3, pc}
   b6a5c:	00030220 	.word	0x00030220

000b6a60 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6a60:	b508      	push	{r3, lr}
   b6a62:	4b02      	ldr	r3, [pc, #8]	; (b6a6c <set_system_mode+0xc>)
   b6a64:	681b      	ldr	r3, [r3, #0]
   b6a66:	685b      	ldr	r3, [r3, #4]
   b6a68:	9301      	str	r3, [sp, #4]
   b6a6a:	bd08      	pop	{r3, pc}
   b6a6c:	00030220 	.word	0x00030220

000b6a70 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6a70:	b508      	push	{r3, lr}
   b6a72:	4b02      	ldr	r3, [pc, #8]	; (b6a7c <system_delay_ms+0xc>)
   b6a74:	681b      	ldr	r3, [r3, #0]
   b6a76:	695b      	ldr	r3, [r3, #20]
   b6a78:	9301      	str	r3, [sp, #4]
   b6a7a:	bd08      	pop	{r3, pc}
   b6a7c:	00030220 	.word	0x00030220

000b6a80 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6a80:	b508      	push	{r3, lr}
   b6a82:	4b02      	ldr	r3, [pc, #8]	; (b6a8c <system_thread_set_state+0xc>)
   b6a84:	681b      	ldr	r3, [r3, #0]
   b6a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6a88:	9301      	str	r3, [sp, #4]
   b6a8a:	bd08      	pop	{r3, pc}
   b6a8c:	00030220 	.word	0x00030220

000b6a90 <system_internal>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
   b6a90:	b508      	push	{r3, lr}
   b6a92:	4b02      	ldr	r3, [pc, #8]	; (b6a9c <system_internal+0xc>)
   b6a94:	681b      	ldr	r3, [r3, #0]
   b6a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6a98:	9301      	str	r3, [sp, #4]
   b6a9a:	bd08      	pop	{r3, pc}
   b6a9c:	00030220 	.word	0x00030220

000b6aa0 <system_set_flag>:
DYNALIB_FN(14, system, system_set_flag, int(system_flag_t, uint8_t, void*))
   b6aa0:	b508      	push	{r3, lr}
   b6aa2:	4b02      	ldr	r3, [pc, #8]	; (b6aac <system_set_flag+0xc>)
   b6aa4:	681b      	ldr	r3, [r3, #0]
   b6aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6aa8:	9301      	str	r3, [sp, #4]
   b6aaa:	bd08      	pop	{r3, pc}
   b6aac:	00030220 	.word	0x00030220

000b6ab0 <system_get_flag>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
   b6ab0:	b508      	push	{r3, lr}
   b6ab2:	4b02      	ldr	r3, [pc, #8]	; (b6abc <system_get_flag+0xc>)
   b6ab4:	681b      	ldr	r3, [r3, #0]
   b6ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6ab8:	9301      	str	r3, [sp, #4]
   b6aba:	bd08      	pop	{r3, pc}
   b6abc:	00030220 	.word	0x00030220

000b6ac0 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b6ac0:	b508      	push	{r3, lr}
   b6ac2:	4b02      	ldr	r3, [pc, #8]	; (b6acc <system_thread_get_state+0xc>)
   b6ac4:	681b      	ldr	r3, [r3, #0]
   b6ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6ac8:	9301      	str	r3, [sp, #4]
   b6aca:	bd08      	pop	{r3, pc}
   b6acc:	00030220 	.word	0x00030220

000b6ad0 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b6ad0:	b508      	push	{r3, lr}
   b6ad2:	4b02      	ldr	r3, [pc, #8]	; (b6adc <system_notify_time_changed+0xc>)
   b6ad4:	681b      	ldr	r3, [r3, #0]
   b6ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b6ad8:	9301      	str	r3, [sp, #4]
   b6ada:	bd08      	pop	{r3, pc}
   b6adc:	00030220 	.word	0x00030220

000b6ae0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6ae0:	b508      	push	{r3, lr}
   b6ae2:	4b03      	ldr	r3, [pc, #12]	; (b6af0 <system_ctrl_set_app_request_handler+0x10>)
   b6ae4:	681b      	ldr	r3, [r3, #0]
   b6ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6aea:	9301      	str	r3, [sp, #4]
   b6aec:	bd08      	pop	{r3, pc}
   b6aee:	0000      	.short	0x0000
   b6af0:	00030220 	.word	0x00030220

000b6af4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6af4:	b508      	push	{r3, lr}
   b6af6:	4b03      	ldr	r3, [pc, #12]	; (b6b04 <system_ctrl_set_result+0x10>)
   b6af8:	681b      	ldr	r3, [r3, #0]
   b6afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6afe:	9301      	str	r3, [sp, #4]
   b6b00:	bd08      	pop	{r3, pc}
   b6b02:	0000      	.short	0x0000
   b6b04:	00030220 	.word	0x00030220

000b6b08 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b6b08:	b508      	push	{r3, lr}
   b6b0a:	4b03      	ldr	r3, [pc, #12]	; (b6b18 <system_sleep_ext+0x10>)
   b6b0c:	681b      	ldr	r3, [r3, #0]
   b6b0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b6b12:	9301      	str	r3, [sp, #4]
   b6b14:	bd08      	pop	{r3, pc}
   b6b16:	0000      	.short	0x0000
   b6b18:	00030220 	.word	0x00030220

000b6b1c <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b6b1c:	b508      	push	{r3, lr}
   b6b1e:	4b03      	ldr	r3, [pc, #12]	; (b6b2c <system_reset+0x10>)
   b6b20:	681b      	ldr	r3, [r3, #0]
   b6b22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b6b26:	9301      	str	r3, [sp, #4]
   b6b28:	bd08      	pop	{r3, pc}
   b6b2a:	0000      	.short	0x0000
   b6b2c:	00030220 	.word	0x00030220

000b6b30 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6b30:	b508      	push	{r3, lr}
   b6b32:	4b02      	ldr	r3, [pc, #8]	; (b6b3c <spark_process+0xc>)
   b6b34:	681b      	ldr	r3, [r3, #0]
   b6b36:	689b      	ldr	r3, [r3, #8]
   b6b38:	9301      	str	r3, [sp, #4]
   b6b3a:	bd08      	pop	{r3, pc}
   b6b3c:	00030244 	.word	0x00030244

000b6b40 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b6b40:	b508      	push	{r3, lr}
   b6b42:	4b02      	ldr	r3, [pc, #8]	; (b6b4c <spark_cloud_flag_connect+0xc>)
   b6b44:	681b      	ldr	r3, [r3, #0]
   b6b46:	68db      	ldr	r3, [r3, #12]
   b6b48:	9301      	str	r3, [sp, #4]
   b6b4a:	bd08      	pop	{r3, pc}
   b6b4c:	00030244 	.word	0x00030244

000b6b50 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6b50:	b508      	push	{r3, lr}
   b6b52:	4b02      	ldr	r3, [pc, #8]	; (b6b5c <spark_cloud_flag_connected+0xc>)
   b6b54:	681b      	ldr	r3, [r3, #0]
   b6b56:	695b      	ldr	r3, [r3, #20]
   b6b58:	9301      	str	r3, [sp, #4]
   b6b5a:	bd08      	pop	{r3, pc}
   b6b5c:	00030244 	.word	0x00030244

000b6b60 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6b60:	b508      	push	{r3, lr}
   b6b62:	4b02      	ldr	r3, [pc, #8]	; (b6b6c <spark_sync_time_pending+0xc>)
   b6b64:	681b      	ldr	r3, [r3, #0]
   b6b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6b68:	9301      	str	r3, [sp, #4]
   b6b6a:	bd08      	pop	{r3, pc}
   b6b6c:	00030244 	.word	0x00030244

000b6b70 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6b70:	b508      	push	{r3, lr}
   b6b72:	4b02      	ldr	r3, [pc, #8]	; (b6b7c <spark_set_random_seed_from_cloud_handler+0xc>)
   b6b74:	681b      	ldr	r3, [r3, #0]
   b6b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6b78:	9301      	str	r3, [sp, #4]
   b6b7a:	bd08      	pop	{r3, pc}
   b6b7c:	00030244 	.word	0x00030244

000b6b80 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6b80:	b508      	push	{r3, lr}
   b6b82:	4b02      	ldr	r3, [pc, #8]	; (b6b8c <network_connect+0xc>)
   b6b84:	681b      	ldr	r3, [r3, #0]
   b6b86:	685b      	ldr	r3, [r3, #4]
   b6b88:	9301      	str	r3, [sp, #4]
   b6b8a:	bd08      	pop	{r3, pc}
   b6b8c:	00030240 	.word	0x00030240

000b6b90 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6b90:	b508      	push	{r3, lr}
   b6b92:	4b02      	ldr	r3, [pc, #8]	; (b6b9c <network_connecting+0xc>)
   b6b94:	681b      	ldr	r3, [r3, #0]
   b6b96:	689b      	ldr	r3, [r3, #8]
   b6b98:	9301      	str	r3, [sp, #4]
   b6b9a:	bd08      	pop	{r3, pc}
   b6b9c:	00030240 	.word	0x00030240

000b6ba0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6ba0:	b508      	push	{r3, lr}
   b6ba2:	4b02      	ldr	r3, [pc, #8]	; (b6bac <network_disconnect+0xc>)
   b6ba4:	681b      	ldr	r3, [r3, #0]
   b6ba6:	68db      	ldr	r3, [r3, #12]
   b6ba8:	9301      	str	r3, [sp, #4]
   b6baa:	bd08      	pop	{r3, pc}
   b6bac:	00030240 	.word	0x00030240

000b6bb0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6bb0:	b508      	push	{r3, lr}
   b6bb2:	4b02      	ldr	r3, [pc, #8]	; (b6bbc <network_ready+0xc>)
   b6bb4:	681b      	ldr	r3, [r3, #0]
   b6bb6:	691b      	ldr	r3, [r3, #16]
   b6bb8:	9301      	str	r3, [sp, #4]
   b6bba:	bd08      	pop	{r3, pc}
   b6bbc:	00030240 	.word	0x00030240

000b6bc0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6bc0:	b508      	push	{r3, lr}
   b6bc2:	4b02      	ldr	r3, [pc, #8]	; (b6bcc <network_on+0xc>)
   b6bc4:	681b      	ldr	r3, [r3, #0]
   b6bc6:	695b      	ldr	r3, [r3, #20]
   b6bc8:	9301      	str	r3, [sp, #4]
   b6bca:	bd08      	pop	{r3, pc}
   b6bcc:	00030240 	.word	0x00030240

000b6bd0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6bd0:	b508      	push	{r3, lr}
   b6bd2:	4b02      	ldr	r3, [pc, #8]	; (b6bdc <network_off+0xc>)
   b6bd4:	681b      	ldr	r3, [r3, #0]
   b6bd6:	699b      	ldr	r3, [r3, #24]
   b6bd8:	9301      	str	r3, [sp, #4]
   b6bda:	bd08      	pop	{r3, pc}
   b6bdc:	00030240 	.word	0x00030240

000b6be0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6be0:	b508      	push	{r3, lr}
   b6be2:	4b02      	ldr	r3, [pc, #8]	; (b6bec <network_listen+0xc>)
   b6be4:	681b      	ldr	r3, [r3, #0]
   b6be6:	69db      	ldr	r3, [r3, #28]
   b6be8:	9301      	str	r3, [sp, #4]
   b6bea:	bd08      	pop	{r3, pc}
   b6bec:	00030240 	.word	0x00030240

000b6bf0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6bf0:	b508      	push	{r3, lr}
   b6bf2:	4b02      	ldr	r3, [pc, #8]	; (b6bfc <network_listening+0xc>)
   b6bf4:	681b      	ldr	r3, [r3, #0]
   b6bf6:	6a1b      	ldr	r3, [r3, #32]
   b6bf8:	9301      	str	r3, [sp, #4]
   b6bfa:	bd08      	pop	{r3, pc}
   b6bfc:	00030240 	.word	0x00030240

000b6c00 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   b6c00:	b508      	push	{r3, lr}
   b6c02:	4b02      	ldr	r3, [pc, #8]	; (b6c0c <network_has_credentials+0xc>)
   b6c04:	681b      	ldr	r3, [r3, #0]
   b6c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6c08:	9301      	str	r3, [sp, #4]
   b6c0a:	bd08      	pop	{r3, pc}
   b6c0c:	00030240 	.word	0x00030240

000b6c10 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b6c10:	b508      	push	{r3, lr}
   b6c12:	4b02      	ldr	r3, [pc, #8]	; (b6c1c <network_set_credentials+0xc>)
   b6c14:	681b      	ldr	r3, [r3, #0]
   b6c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6c18:	9301      	str	r3, [sp, #4]
   b6c1a:	bd08      	pop	{r3, pc}
   b6c1c:	00030240 	.word	0x00030240

000b6c20 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b6c20:	b508      	push	{r3, lr}
   b6c22:	4b02      	ldr	r3, [pc, #8]	; (b6c2c <network_clear_credentials+0xc>)
   b6c24:	681b      	ldr	r3, [r3, #0]
   b6c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6c28:	9301      	str	r3, [sp, #4]
   b6c2a:	bd08      	pop	{r3, pc}
   b6c2c:	00030240 	.word	0x00030240

000b6c30 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6c30:	b508      	push	{r3, lr}
   b6c32:	4b02      	ldr	r3, [pc, #8]	; (b6c3c <network_set_listen_timeout+0xc>)
   b6c34:	681b      	ldr	r3, [r3, #0]
   b6c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6c38:	9301      	str	r3, [sp, #4]
   b6c3a:	bd08      	pop	{r3, pc}
   b6c3c:	00030240 	.word	0x00030240

000b6c40 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6c40:	b508      	push	{r3, lr}
   b6c42:	4b02      	ldr	r3, [pc, #8]	; (b6c4c <network_get_listen_timeout+0xc>)
   b6c44:	681b      	ldr	r3, [r3, #0]
   b6c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6c48:	9301      	str	r3, [sp, #4]
   b6c4a:	bd08      	pop	{r3, pc}
   b6c4c:	00030240 	.word	0x00030240

000b6c50 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6c50:	b508      	push	{r3, lr}
   b6c52:	4b02      	ldr	r3, [pc, #8]	; (b6c5c <network_is_on+0xc>)
   b6c54:	681b      	ldr	r3, [r3, #0]
   b6c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c58:	9301      	str	r3, [sp, #4]
   b6c5a:	bd08      	pop	{r3, pc}
   b6c5c:	00030240 	.word	0x00030240

000b6c60 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6c60:	b508      	push	{r3, lr}
   b6c62:	4b02      	ldr	r3, [pc, #8]	; (b6c6c <network_is_off+0xc>)
   b6c64:	681b      	ldr	r3, [r3, #0]
   b6c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6c68:	9301      	str	r3, [sp, #4]
   b6c6a:	bd08      	pop	{r3, pc}
   b6c6c:	00030240 	.word	0x00030240

000b6c70 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6c70:	b508      	push	{r3, lr}
   b6c72:	4b02      	ldr	r3, [pc, #8]	; (b6c7c <malloc+0xc>)
   b6c74:	681b      	ldr	r3, [r3, #0]
   b6c76:	681b      	ldr	r3, [r3, #0]
   b6c78:	9301      	str	r3, [sp, #4]
   b6c7a:	bd08      	pop	{r3, pc}
   b6c7c:	0003021c 	.word	0x0003021c

000b6c80 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6c80:	b508      	push	{r3, lr}
   b6c82:	4b02      	ldr	r3, [pc, #8]	; (b6c8c <free+0xc>)
   b6c84:	681b      	ldr	r3, [r3, #0]
   b6c86:	685b      	ldr	r3, [r3, #4]
   b6c88:	9301      	str	r3, [sp, #4]
   b6c8a:	bd08      	pop	{r3, pc}
   b6c8c:	0003021c 	.word	0x0003021c

000b6c90 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6c90:	b508      	push	{r3, lr}
   b6c92:	4b02      	ldr	r3, [pc, #8]	; (b6c9c <realloc+0xc>)
   b6c94:	681b      	ldr	r3, [r3, #0]
   b6c96:	689b      	ldr	r3, [r3, #8]
   b6c98:	9301      	str	r3, [sp, #4]
   b6c9a:	bd08      	pop	{r3, pc}
   b6c9c:	0003021c 	.word	0x0003021c

000b6ca0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6ca0:	b508      	push	{r3, lr}
   b6ca2:	4b02      	ldr	r3, [pc, #8]	; (b6cac <vsnprintf+0xc>)
   b6ca4:	681b      	ldr	r3, [r3, #0]
   b6ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6ca8:	9301      	str	r3, [sp, #4]
   b6caa:	bd08      	pop	{r3, pc}
   b6cac:	0003021c 	.word	0x0003021c

000b6cb0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6cb0:	b508      	push	{r3, lr}
   b6cb2:	4b02      	ldr	r3, [pc, #8]	; (b6cbc <abort+0xc>)
   b6cb4:	681b      	ldr	r3, [r3, #0]
   b6cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6cb8:	9301      	str	r3, [sp, #4]
   b6cba:	bd08      	pop	{r3, pc}
   b6cbc:	0003021c 	.word	0x0003021c

000b6cc0 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6cc0:	b508      	push	{r3, lr}
   b6cc2:	4b02      	ldr	r3, [pc, #8]	; (b6ccc <__errno+0xc>)
   b6cc4:	681b      	ldr	r3, [r3, #0]
   b6cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6cc8:	9301      	str	r3, [sp, #4]
   b6cca:	bd08      	pop	{r3, pc}
   b6ccc:	0003021c 	.word	0x0003021c

000b6cd0 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6cd0:	b508      	push	{r3, lr}
   b6cd2:	4b02      	ldr	r3, [pc, #8]	; (b6cdc <__assert_func+0xc>)
   b6cd4:	681b      	ldr	r3, [r3, #0]
   b6cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6cd8:	9301      	str	r3, [sp, #4]
   b6cda:	bd08      	pop	{r3, pc}
   b6cdc:	0003021c 	.word	0x0003021c

000b6ce0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6ce0:	b508      	push	{r3, lr}
   b6ce2:	4b02      	ldr	r3, [pc, #8]	; (b6cec <newlib_impure_ptr_callback+0xc>)
   b6ce4:	681b      	ldr	r3, [r3, #0]
   b6ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6ce8:	9301      	str	r3, [sp, #4]
   b6cea:	bd08      	pop	{r3, pc}
   b6cec:	0003021c 	.word	0x0003021c

000b6cf0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6cf0:	2100      	movs	r1, #0
   b6cf2:	f7ff bebd 	b.w	b6a70 <system_delay_ms>

000b6cf6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6cf6:	4770      	bx	lr

000b6cf8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b6cf8:	4770      	bx	lr

000b6cfa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b6cfa:	4770      	bx	lr

000b6cfc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6cfc:	4770      	bx	lr
	...

000b6d00 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6d00:	4b06      	ldr	r3, [pc, #24]	; (b6d1c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6d02:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6d04:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6d06:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6d0a:	d005      	beq.n	b6d18 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6d0c:	4608      	mov	r0, r1
   b6d0e:	f002 feb7 	bl	b9a80 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6d12:	2800      	cmp	r0, #0
   b6d14:	bf08      	it	eq
   b6d16:	2400      	moveq	r4, #0
      }
   b6d18:	4620      	mov	r0, r4
   b6d1a:	bd10      	pop	{r4, pc}
   b6d1c:	000bb4b8 	.word	0x000bb4b8

000b6d20 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6d20:	4b06      	ldr	r3, [pc, #24]	; (b6d3c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6d22:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6d24:	b510      	push	{r4, lr}
   b6d26:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6d2a:	d005      	beq.n	b6d38 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6d2c:	4608      	mov	r0, r1
   b6d2e:	f002 fea7 	bl	b9a80 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6d32:	2800      	cmp	r0, #0
   b6d34:	bf08      	it	eq
   b6d36:	2400      	moveq	r4, #0
      }
   b6d38:	4620      	mov	r0, r4
   b6d3a:	bd10      	pop	{r4, pc}
   b6d3c:	000bb4b8 	.word	0x000bb4b8

000b6d40 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6d40:	4b06      	ldr	r3, [pc, #24]	; (b6d5c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6d42:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6d44:	b510      	push	{r4, lr}
   b6d46:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6d4a:	d005      	beq.n	b6d58 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6d4c:	4608      	mov	r0, r1
   b6d4e:	f002 fe97 	bl	b9a80 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6d52:	2800      	cmp	r0, #0
   b6d54:	bf08      	it	eq
   b6d56:	2400      	moveq	r4, #0
      }
   b6d58:	4620      	mov	r0, r4
   b6d5a:	bd10      	pop	{r4, pc}
   b6d5c:	000bb4b8 	.word	0x000bb4b8

000b6d60 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6d60:	b510      	push	{r4, lr}
   b6d62:	2168      	movs	r1, #104	; 0x68
   b6d64:	4604      	mov	r4, r0
   b6d66:	f7fd f99a 	bl	b409e <_ZdlPvj>
   b6d6a:	4620      	mov	r0, r4
   b6d6c:	bd10      	pop	{r4, pc}

000b6d6e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6d6e:	b510      	push	{r4, lr}
   b6d70:	2128      	movs	r1, #40	; 0x28
   b6d72:	4604      	mov	r4, r0
   b6d74:	f7fd f993 	bl	b409e <_ZdlPvj>
   b6d78:	4620      	mov	r0, r4
   b6d7a:	bd10      	pop	{r4, pc}

000b6d7c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6d7c:	b510      	push	{r4, lr}
   b6d7e:	2130      	movs	r1, #48	; 0x30
   b6d80:	4604      	mov	r4, r0
   b6d82:	f7fd f98c 	bl	b409e <_ZdlPvj>
   b6d86:	4620      	mov	r0, r4
   b6d88:	bd10      	pop	{r4, pc}

000b6d8a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6d8a:	2168      	movs	r1, #104	; 0x68
   b6d8c:	f7fd b987 	b.w	b409e <_ZdlPvj>

000b6d90 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6d90:	2128      	movs	r1, #40	; 0x28
   b6d92:	f7fd b984 	b.w	b409e <_ZdlPvj>

000b6d96 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6d96:	2130      	movs	r1, #48	; 0x30
   b6d98:	f7fd b981 	b.w	b409e <_ZdlPvj>

000b6d9c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6d9e:	2500      	movs	r5, #0
   b6da0:	1cec      	adds	r4, r5, #3
   b6da2:	428c      	cmp	r4, r1
   b6da4:	d80d      	bhi.n	b6dc2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b6da6:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b6da8:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b6daa:	5d87      	ldrb	r7, [r0, r6]
   b6dac:	4297      	cmp	r7, r2
   b6dae:	d105      	bne.n	b6dbc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6db0:	4426      	add	r6, r4
   b6db2:	42b1      	cmp	r1, r6
   b6db4:	d305      	bcc.n	b6dc2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b6db6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b6db8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b6dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b6dbc:	3401      	adds	r4, #1
   b6dbe:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6dc0:	e7ee      	b.n	b6da0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b6dc2:	2000      	movs	r0, #0
   b6dc4:	e7f9      	b.n	b6dba <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b6dc8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b6dc8:	4a02      	ldr	r2, [pc, #8]	; (b6dd4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b6dca:	2100      	movs	r1, #0
   b6dcc:	200a      	movs	r0, #10
   b6dce:	f7ff be2f 	b.w	b6a30 <panic_>
   b6dd2:	bf00      	nop
   b6dd4:	000b6651 	.word	0x000b6651

000b6dd8 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6dd8:	4603      	mov	r3, r0
   b6dda:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b6ddc:	681b      	ldr	r3, [r3, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6dde:	e9d3 2100 	ldrd	r2, r1, [r3]
   b6de2:	4710      	bx	r2

000b6de4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6de4:	b430      	push	{r4, r5}
   b6de6:	460d      	mov	r5, r1
   b6de8:	4611      	mov	r1, r2
   b6dea:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b6dec:	6803      	ldr	r3, [r0, #0]
   b6dee:	6809      	ldr	r1, [r1, #0]
   b6df0:	6828      	ldr	r0, [r5, #0]
   b6df2:	e9d3 4300 	ldrd	r4, r3, [r3]
   b6df6:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b6df8:	bc30      	pop	{r4, r5}
   b6dfa:	4760      	bx	ip

000b6dfc <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b6dfc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6dfe:	b538      	push	{r3, r4, r5, lr}
   b6e00:	4604      	mov	r4, r0
	switch (__op)
   b6e02:	d102      	bne.n	b6e0a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6e04:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6e06:	6023      	str	r3, [r4, #0]
	}
   b6e08:	e003      	b.n	b6e12 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b6e0a:	2a02      	cmp	r2, #2
   b6e0c:	d003      	beq.n	b6e16 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b6e0e:	2a03      	cmp	r2, #3
   b6e10:	d00d      	beq.n	b6e2e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b6e12:	2000      	movs	r0, #0
   b6e14:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6e16:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6e18:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6e1a:	f7fd f93c 	bl	b4096 <_Znwj>
   b6e1e:	4603      	mov	r3, r0
   b6e20:	2800      	cmp	r0, #0
   b6e22:	d0f0      	beq.n	b6e06 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b6e24:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6e28:	e883 0003 	stmia.w	r3, {r0, r1}
   b6e2c:	e7eb      	b.n	b6e06 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6e2e:	6800      	ldr	r0, [r0, #0]
   b6e30:	2800      	cmp	r0, #0
   b6e32:	d0ee      	beq.n	b6e12 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b6e34:	2108      	movs	r1, #8
   b6e36:	f7fd f932 	bl	b409e <_ZdlPvj>
   b6e3a:	e7ea      	b.n	b6e12 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b6e3c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b6e3c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6e3e:	b538      	push	{r3, r4, r5, lr}
   b6e40:	4604      	mov	r4, r0
	switch (__op)
   b6e42:	d102      	bne.n	b6e4a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6e44:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6e46:	6023      	str	r3, [r4, #0]
	}
   b6e48:	e003      	b.n	b6e52 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b6e4a:	2a02      	cmp	r2, #2
   b6e4c:	d003      	beq.n	b6e56 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b6e4e:	2a03      	cmp	r2, #3
   b6e50:	d00d      	beq.n	b6e6e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b6e52:	2000      	movs	r0, #0
   b6e54:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6e56:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6e58:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6e5a:	f7fd f91c 	bl	b4096 <_Znwj>
   b6e5e:	4603      	mov	r3, r0
   b6e60:	2800      	cmp	r0, #0
   b6e62:	d0f0      	beq.n	b6e46 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b6e64:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6e68:	e883 0003 	stmia.w	r3, {r0, r1}
   b6e6c:	e7eb      	b.n	b6e46 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6e6e:	6800      	ldr	r0, [r0, #0]
   b6e70:	2800      	cmp	r0, #0
   b6e72:	d0ee      	beq.n	b6e52 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b6e74:	2108      	movs	r1, #8
   b6e76:	f7fd f912 	bl	b409e <_ZdlPvj>
   b6e7a:	e7ea      	b.n	b6e52 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b6e7c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b6e7c:	b510      	push	{r4, lr}
      if (_M_manager)
   b6e7e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b6e80:	4604      	mov	r4, r0
      if (_M_manager)
   b6e82:	b113      	cbz	r3, b6e8a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6e84:	2203      	movs	r2, #3
   b6e86:	4601      	mov	r1, r0
   b6e88:	4798      	blx	r3
    }
   b6e8a:	4620      	mov	r0, r4
   b6e8c:	bd10      	pop	{r4, pc}

000b6e8e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6e8e:	b510      	push	{r4, lr}
   b6e90:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b6e92:	3058      	adds	r0, #88	; 0x58
   b6e94:	f7ff fff2 	bl	b6e7c <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b6e98:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b6e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6ea0:	f001 bd00 	b.w	b88a4 <_ZN6StringD1Ev>

000b6ea4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6ea4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6ea6:	6843      	ldr	r3, [r0, #4]
   b6ea8:	3b01      	subs	r3, #1
    {
   b6eaa:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6eac:	6043      	str	r3, [r0, #4]
   b6eae:	b963      	cbnz	r3, b6eca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6eb0:	6803      	ldr	r3, [r0, #0]
   b6eb2:	689b      	ldr	r3, [r3, #8]
   b6eb4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6eb6:	68a3      	ldr	r3, [r4, #8]
   b6eb8:	3b01      	subs	r3, #1
   b6eba:	60a3      	str	r3, [r4, #8]
   b6ebc:	b92b      	cbnz	r3, b6eca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6ebe:	6823      	ldr	r3, [r4, #0]
   b6ec0:	4620      	mov	r0, r4
   b6ec2:	68db      	ldr	r3, [r3, #12]
    }
   b6ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6ec8:	4718      	bx	r3
    }
   b6eca:	bd10      	pop	{r4, pc}

000b6ecc <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b6ecc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6ed0:	b2da      	uxtb	r2, r3
   b6ed2:	2a09      	cmp	r2, #9
   b6ed4:	d801      	bhi.n	b6eda <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b6ed6:	4618      	mov	r0, r3
   b6ed8:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b6eda:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b6ede:	2b05      	cmp	r3, #5
   b6ee0:	d801      	bhi.n	b6ee6 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b6ee2:	3857      	subs	r0, #87	; 0x57
   b6ee4:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b6ee6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b6eea:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b6eec:	bf94      	ite	ls
   b6eee:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b6ef0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b6ef4:	4770      	bx	lr
	...

000b6ef8 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b6ef8:	b510      	push	{r4, lr}
            locked_(false) {
   b6efa:	2300      	movs	r3, #0
   b6efc:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b6efe:	4b04      	ldr	r3, [pc, #16]	; (b6f10 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b6f00:	4604      	mov	r4, r0
   b6f02:	6818      	ldr	r0, [r3, #0]
   b6f04:	f7ff fb84 	bl	b6610 <os_mutex_recursive_lock>
        locked_ = true;
   b6f08:	2301      	movs	r3, #1
   b6f0a:	7023      	strb	r3, [r4, #0]
    }
   b6f0c:	4620      	mov	r0, r4
   b6f0e:	bd10      	pop	{r4, pc}
   b6f10:	2003e6b8 	.word	0x2003e6b8

000b6f14 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b6f14:	b510      	push	{r4, lr}
        if (locked_) {
   b6f16:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b6f18:	4604      	mov	r4, r0
        if (locked_) {
   b6f1a:	b11b      	cbz	r3, b6f24 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6f1c:	4b02      	ldr	r3, [pc, #8]	; (b6f28 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6f1e:	6818      	ldr	r0, [r3, #0]
   b6f20:	f7ff fb7e 	bl	b6620 <os_mutex_recursive_unlock>
    }
   b6f24:	4620      	mov	r0, r4
   b6f26:	bd10      	pop	{r4, pc}
   b6f28:	2003e6b8 	.word	0x2003e6b8

000b6f2c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b6f2c:	b082      	sub	sp, #8
   b6f2e:	4603      	mov	r3, r0
    address_ = addr;
   b6f30:	6808      	ldr	r0, [r1, #0]
   b6f32:	6849      	ldr	r1, [r1, #4]
   b6f34:	466a      	mov	r2, sp
   b6f36:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b6f38:	466a      	mov	r2, sp
   b6f3a:	ca03      	ldmia	r2!, {r0, r1}
   b6f3c:	6018      	str	r0, [r3, #0]
}
   b6f3e:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6f40:	6059      	str	r1, [r3, #4]
}
   b6f42:	b002      	add	sp, #8
   b6f44:	4770      	bx	lr

000b6f46 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b6f46:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b6f48:	7982      	ldrb	r2, [r0, #6]
   b6f4a:	798b      	ldrb	r3, [r1, #6]
   b6f4c:	429a      	cmp	r2, r3
   b6f4e:	d106      	bne.n	b6f5e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6f50:	2206      	movs	r2, #6
   b6f52:	f003 fb3f 	bl	ba5d4 <memcmp>
   b6f56:	fab0 f080 	clz	r0, r0
   b6f5a:	0940      	lsrs	r0, r0, #5
}
   b6f5c:	bd08      	pop	{r3, pc}
    return false;
   b6f5e:	2000      	movs	r0, #0
   b6f60:	e7fc      	b.n	b6f5c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b6f62 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b6f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6f66:	6003      	str	r3, [r0, #0]
   b6f68:	8083      	strh	r3, [r0, #4]
}
   b6f6a:	2000      	movs	r0, #0
   b6f6c:	4770      	bx	lr

000b6f6e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b6f6e:	b508      	push	{r3, lr}
   b6f70:	4602      	mov	r2, r0
        : address_{} {
   b6f72:	2100      	movs	r1, #0
   b6f74:	6001      	str	r1, [r0, #0]
   b6f76:	6041      	str	r1, [r0, #4]
    clear();
   b6f78:	f7ff fff3 	bl	b6f62 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b6f7c:	7191      	strb	r1, [r2, #6]
}
   b6f7e:	4610      	mov	r0, r2
   b6f80:	bd08      	pop	{r3, pc}
	...

000b6f84 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b6f84:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b6f86:	2301      	movs	r3, #1
   b6f88:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6f8a:	4b05      	ldr	r3, [pc, #20]	; (b6fa0 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b6f8c:	4602      	mov	r2, r0
   b6f8e:	f103 0110 	add.w	r1, r3, #16
   b6f92:	f853 4b04 	ldr.w	r4, [r3], #4
   b6f96:	f842 4b04 	str.w	r4, [r2], #4
   b6f9a:	428b      	cmp	r3, r1
   b6f9c:	d1f9      	bne.n	b6f92 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b6f9e:	bd10      	pop	{r4, pc}
   b6fa0:	000bb4c6 	.word	0x000bb4c6

000b6fa4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6fa4:	b510      	push	{r4, lr}
    if (uuid128) {
   b6fa6:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6fa8:	4604      	mov	r4, r0
    if (uuid128) {
   b6faa:	b1b1      	cbz	r1, b6fda <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b6fac:	2a01      	cmp	r2, #1
   b6fae:	f101 0210 	add.w	r2, r1, #16
   b6fb2:	d10a      	bne.n	b6fca <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b6fb4:	4601      	mov	r1, r0
   b6fb6:	f853 0b04 	ldr.w	r0, [r3], #4
   b6fba:	f841 0b04 	str.w	r0, [r1], #4
   b6fbe:	4293      	cmp	r3, r2
   b6fc0:	d1f9      	bne.n	b6fb6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b6fc2:	2301      	movs	r3, #1
   b6fc4:	6123      	str	r3, [r4, #16]
}
   b6fc6:	4620      	mov	r0, r4
   b6fc8:	bd10      	pop	{r4, pc}
   b6fca:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b6fcc:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b6fd0:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b6fd4:	429a      	cmp	r2, r3
   b6fd6:	d1f9      	bne.n	b6fcc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b6fd8:	e7f3      	b.n	b6fc2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b6fda:	2210      	movs	r2, #16
   b6fdc:	f003 fb32 	bl	ba644 <memset>
   b6fe0:	e7f1      	b.n	b6fc6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b6fe2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b6fe2:	b538      	push	{r3, r4, r5, lr}
   b6fe4:	4604      	mov	r4, r0
   b6fe6:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b6fe8:	461a      	mov	r2, r3
   b6fea:	f7ff ffdb 	bl	b6fa4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b6fee:	81a5      	strh	r5, [r4, #12]
}
   b6ff0:	4620      	mov	r0, r4
   b6ff2:	bd38      	pop	{r3, r4, r5, pc}

000b6ff4 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b6ff4:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b6ff6:	6902      	ldr	r2, [r0, #16]
   b6ff8:	b922      	cbnz	r2, b7004 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b6ffa:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6ffc:	3800      	subs	r0, #0
   b6ffe:	bf18      	it	ne
   b7000:	2001      	movne	r0, #1
}
   b7002:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7004:	4902      	ldr	r1, [pc, #8]	; (b7010 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b7006:	2210      	movs	r2, #16
   b7008:	f003 fae4 	bl	ba5d4 <memcmp>
   b700c:	e7f6      	b.n	b6ffc <_ZNK8particle7BleUuid7isValidEv+0x8>
   b700e:	bf00      	nop
   b7010:	000bb4e6 	.word	0x000bb4e6

000b7014 <_ZNK8particle7BleUuid4typeEv>:
}
   b7014:	6900      	ldr	r0, [r0, #16]
   b7016:	4770      	bx	lr

000b7018 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b7018:	b538      	push	{r3, r4, r5, lr}
   b701a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b701c:	2214      	movs	r2, #20
   b701e:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b7020:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b7022:	f003 fb0f 	bl	ba644 <memset>
    if (type_ == BleUuidType::SHORT) {
   b7026:	6923      	ldr	r3, [r4, #16]
   b7028:	b91b      	cbnz	r3, b7032 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b702a:	89a3      	ldrh	r3, [r4, #12]
   b702c:	802b      	strh	r3, [r5, #0]
}
   b702e:	4628      	mov	r0, r5
   b7030:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b7032:	2301      	movs	r3, #1
   b7034:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b7036:	4621      	mov	r1, r4
   b7038:	462b      	mov	r3, r5
   b703a:	f104 0210 	add.w	r2, r4, #16
   b703e:	f851 0b04 	ldr.w	r0, [r1], #4
   b7042:	f843 0b04 	str.w	r0, [r3], #4
   b7046:	4291      	cmp	r1, r2
   b7048:	d1f9      	bne.n	b703e <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b704a:	e7f0      	b.n	b702e <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b704c <_ZNK8particle7BleUuid7shortedEv>:
}
   b704c:	8980      	ldrh	r0, [r0, #12]
   b704e:	4770      	bx	lr

000b7050 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b7050:	4770      	bx	lr

000b7052 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b7052:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7054:	6902      	ldr	r2, [r0, #16]
   b7056:	690b      	ldr	r3, [r1, #16]
   b7058:	429a      	cmp	r2, r3
   b705a:	d106      	bne.n	b706a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b705c:	2210      	movs	r2, #16
   b705e:	f003 fab9 	bl	ba5d4 <memcmp>
   b7062:	fab0 f080 	clz	r0, r0
   b7066:	0940      	lsrs	r0, r0, #5
}
   b7068:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b706a:	2000      	movs	r0, #0
   b706c:	e7fc      	b.n	b7068 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b7070 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b7070:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b7072:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b7076:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7078:	4b34      	ldr	r3, [pc, #208]	; (b714c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b707a:	460c      	mov	r4, r1
   b707c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b707e:	4602      	mov	r2, r0
   b7080:	f103 0110 	add.w	r1, r3, #16
   b7084:	f853 0b04 	ldr.w	r0, [r3], #4
   b7088:	f842 0b04 	str.w	r0, [r2], #4
   b708c:	428b      	cmp	r3, r1
   b708e:	d1f9      	bne.n	b7084 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b7090:	b344      	cbz	r4, b70e4 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b7092:	2124      	movs	r1, #36	; 0x24
   b7094:	4620      	mov	r0, r4
   b7096:	f003 fb38 	bl	ba70a <strnlen>
   b709a:	2804      	cmp	r0, #4
   b709c:	f04f 0500 	mov.w	r5, #0
   b70a0:	d123      	bne.n	b70ea <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b70a2:	f8ad 5004 	strh.w	r5, [sp, #4]
   b70a6:	af01      	add	r7, sp, #4
   b70a8:	1ca5      	adds	r5, r4, #2
   b70aa:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b70ac:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b70b0:	f7ff ff0c 	bl	b6ecc <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b70b4:	f1b0 0800 	subs.w	r8, r0, #0
   b70b8:	db12      	blt.n	b70e0 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b70ba:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b70be:	f7ff ff05 	bl	b6ecc <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b70c2:	2800      	cmp	r0, #0
   b70c4:	db0c      	blt.n	b70e0 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b70c6:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b70c8:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b70cc:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b70ce:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b70d2:	d1eb      	bne.n	b70ac <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b70d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b70d8:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b70da:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b70de:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b70e0:	2300      	movs	r3, #0
   b70e2:	6133      	str	r3, [r6, #16]
}
   b70e4:	b002      	add	sp, #8
   b70e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b70ea:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b70ee:	2124      	movs	r1, #36	; 0x24
   b70f0:	4620      	mov	r0, r4
   b70f2:	f003 fb0a 	bl	ba70a <strnlen>
   b70f6:	42a8      	cmp	r0, r5
   b70f8:	d807      	bhi.n	b710a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b70fa:	4642      	mov	r2, r8
   b70fc:	2100      	movs	r1, #0
   b70fe:	4630      	mov	r0, r6
}
   b7100:	b002      	add	sp, #8
   b7102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b7106:	f003 ba9d 	b.w	ba644 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b710a:	f1b8 0f00 	cmp.w	r8, #0
   b710e:	d0e9      	beq.n	b70e4 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b7110:	5d60      	ldrb	r0, [r4, r5]
   b7112:	f7ff fedb 	bl	b6ecc <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b7116:	0603      	lsls	r3, r0, #24
   b7118:	d415      	bmi.n	b7146 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b711a:	0100      	lsls	r0, r0, #4
   b711c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7120:	b2c7      	uxtb	r7, r0
   b7122:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b7126:	2124      	movs	r1, #36	; 0x24
   b7128:	4620      	mov	r0, r4
   b712a:	f003 faee 	bl	ba70a <strnlen>
   b712e:	3501      	adds	r5, #1
   b7130:	42a8      	cmp	r0, r5
   b7132:	d908      	bls.n	b7146 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b7134:	5d60      	ldrb	r0, [r4, r5]
   b7136:	f7ff fec9 	bl	b6ecc <_ZN8particle11hexToNibbleEc>
   b713a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b713c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b713e:	bfa4      	itt	ge
   b7140:	4338      	orrge	r0, r7
   b7142:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7146:	3501      	adds	r5, #1
   b7148:	e7d1      	b.n	b70ee <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b714a:	bf00      	nop
   b714c:	000bb4c6 	.word	0x000bb4c6

000b7150 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b7150:	b513      	push	{r0, r1, r4, lr}
   b7152:	4604      	mov	r4, r0
   b7154:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b7156:	f7ff ff15 	bl	b6f84 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b715a:	4620      	mov	r0, r4
   b715c:	9901      	ldr	r1, [sp, #4]
   b715e:	f7ff ff87 	bl	b7070 <_ZN8particle7BleUuid9constructEPKc>
}
   b7162:	4620      	mov	r0, r4
   b7164:	b002      	add	sp, #8
   b7166:	bd10      	pop	{r4, pc}

000b7168 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b7168:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b716a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b716e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b7170:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b7172:	8043      	strh	r3, [r0, #2]
   b7174:	220e      	movs	r2, #14
   b7176:	4629      	mov	r1, r5
   b7178:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b717a:	7105      	strb	r5, [r0, #4]
   b717c:	3006      	adds	r0, #6
   b717e:	f003 fa61 	bl	ba644 <memset>
   b7182:	f104 0014 	add.w	r0, r4, #20
   b7186:	f7ff fefd 	bl	b6f84 <_ZN8particle7BleUuidC1Ev>
   b718a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b718e:	f7ff fef9 	bl	b6f84 <_ZN8particle7BleUuidC1Ev>
   b7192:	4904      	ldr	r1, [pc, #16]	; (b71a4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b7194:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7198:	f001 fbcf 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b719c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b719e:	4620      	mov	r0, r4
   b71a0:	bd38      	pop	{r3, r4, r5, pc}
   b71a2:	bf00      	nop
   b71a4:	000bab99 	.word	0x000bab99

000b71a8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b71a8:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b71aa:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b71ae:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b71b2:	4293      	cmp	r3, r2
   b71b4:	4618      	mov	r0, r3
   b71b6:	d006      	beq.n	b71c6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b71b8:	6804      	ldr	r4, [r0, #0]
   b71ba:	8824      	ldrh	r4, [r4, #0]
   b71bc:	428c      	cmp	r4, r1
   b71be:	f103 0308 	add.w	r3, r3, #8
   b71c2:	d1f6      	bne.n	b71b2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b71c4:	bd10      	pop	{r4, pc}
        return nullptr;
   b71c6:	2000      	movs	r0, #0
   b71c8:	e7fc      	b.n	b71c4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b71cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b71cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b71ce:	4606      	mov	r6, r0
   b71d0:	b085      	sub	sp, #20
   b71d2:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b71d4:	460d      	mov	r5, r1
   b71d6:	2900      	cmp	r1, #0
   b71d8:	d050      	beq.n	b727c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b71da:	2a00      	cmp	r2, #0
   b71dc:	d04e      	beq.n	b727c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b71de:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b71e0:	7823      	ldrb	r3, [r4, #0]
   b71e2:	2af4      	cmp	r2, #244	; 0xf4
   b71e4:	bf28      	it	cs
   b71e6:	22f4      	movcs	r2, #244	; 0xf4
   b71e8:	b343      	cbz	r3, b723c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b71ea:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b71ec:	0798      	lsls	r0, r3, #30
   b71ee:	d509      	bpl.n	b7204 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b71f0:	89a0      	ldrh	r0, [r4, #12]
   b71f2:	9203      	str	r2, [sp, #12]
   b71f4:	2300      	movs	r3, #0
   b71f6:	f7ff f9bd 	bl	b6574 <hal_ble_gatt_server_set_characteristic_value>
   b71fa:	2800      	cmp	r0, #0
   b71fc:	9a03      	ldr	r2, [sp, #12]
   b71fe:	da03      	bge.n	b7208 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b7200:	b005      	add	sp, #20
   b7202:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b7204:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7208:	6834      	ldr	r4, [r6, #0]
   b720a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b720c:	06d9      	lsls	r1, r3, #27
   b720e:	d509      	bpl.n	b7224 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b7210:	2f01      	cmp	r7, #1
   b7212:	d007      	beq.n	b7224 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7214:	89a0      	ldrh	r0, [r4, #12]
   b7216:	2300      	movs	r3, #0
   b7218:	4629      	mov	r1, r5
}
   b721a:	b005      	add	sp, #20
   b721c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7220:	f7ff b9da 	b.w	b65d8 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b7224:	069b      	lsls	r3, r3, #26
   b7226:	d5eb      	bpl.n	b7200 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7228:	2f02      	cmp	r7, #2
   b722a:	d0e9      	beq.n	b7200 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b722c:	89a0      	ldrh	r0, [r4, #12]
   b722e:	2300      	movs	r3, #0
   b7230:	4629      	mov	r1, r5
}
   b7232:	b005      	add	sp, #20
   b7234:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7238:	f7ff b9d8 	b.w	b65ec <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b723c:	8860      	ldrh	r0, [r4, #2]
   b723e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7242:	4288      	cmp	r0, r1
   b7244:	d01c      	beq.n	b7280 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b7246:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b7248:	074e      	lsls	r6, r1, #29
   b724a:	d501      	bpl.n	b7250 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b724c:	2f01      	cmp	r7, #1
   b724e:	d104      	bne.n	b725a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7250:	070b      	lsls	r3, r1, #28
   b7252:	d409      	bmi.n	b7268 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b7254:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7258:	e7d2      	b.n	b7200 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b725a:	89a1      	ldrh	r1, [r4, #12]
   b725c:	9300      	str	r3, [sp, #0]
   b725e:	4613      	mov	r3, r2
   b7260:	462a      	mov	r2, r5
   b7262:	f7ff f99b 	bl	b659c <hal_ble_gatt_client_write_without_response>
   b7266:	e7cb      	b.n	b7200 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7268:	2f02      	cmp	r7, #2
   b726a:	d0f3      	beq.n	b7254 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b726c:	2300      	movs	r3, #0
   b726e:	89a1      	ldrh	r1, [r4, #12]
   b7270:	9300      	str	r3, [sp, #0]
   b7272:	4613      	mov	r3, r2
   b7274:	462a      	mov	r2, r5
   b7276:	f7ff f987 	bl	b6588 <hal_ble_gatt_client_write_with_response>
   b727a:	e7c1      	b.n	b7200 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b727c:	4802      	ldr	r0, [pc, #8]	; (b7288 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b727e:	e7bf      	b.n	b7200 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b7280:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7284:	e7bc      	b.n	b7200 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7286:	bf00      	nop
   b7288:	fffffef2 	.word	0xfffffef2

000b728c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   b728c:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   b728e:	688a      	ldr	r2, [r1, #8]
   b7290:	6809      	ldr	r1, [r1, #0]
   b7292:	f7ff bf9b 	b.w	b71cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b7296 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b7296:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7298:	460c      	mov	r4, r1
   b729a:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b729c:	21f4      	movs	r1, #244	; 0xf4
   b729e:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b72a0:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b72a2:	f003 fa32 	bl	ba70a <strnlen>
   b72a6:	9b01      	ldr	r3, [sp, #4]
   b72a8:	4602      	mov	r2, r0
   b72aa:	4621      	mov	r1, r4
   b72ac:	4628      	mov	r0, r5
}
   b72ae:	b003      	add	sp, #12
   b72b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b72b4:	f7ff bf8a 	b.w	b71cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b72b8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b72b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b72bc:	2600      	movs	r6, #0
   b72be:	6006      	str	r6, [r0, #0]
   b72c0:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b72c2:	2028      	movs	r0, #40	; 0x28
   b72c4:	460c      	mov	r4, r1
   b72c6:	f7fc fee6 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b72ca:	1e05      	subs	r5, r0, #0
   b72cc:	f105 080c 	add.w	r8, r5, #12
   b72d0:	d00f      	beq.n	b72f2 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b72d2:	2301      	movs	r3, #1
   b72d4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b72d8:	4b08      	ldr	r3, [pc, #32]	; (b72fc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b72da:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b72dc:	4640      	mov	r0, r8
   b72de:	f7ff fe51 	bl	b6f84 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b72e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b72e4:	622e      	str	r6, [r5, #32]
   b72e6:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b72ea:	4646      	mov	r6, r8
   b72ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b72ee:	6823      	ldr	r3, [r4, #0]
   b72f0:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b72f2:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b72f6:	4638      	mov	r0, r7
   b72f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b72fc:	000bb488 	.word	0x000bb488

000b7300 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b7300:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7302:	2500      	movs	r5, #0
   b7304:	6005      	str	r5, [r0, #0]
   b7306:	4606      	mov	r6, r0
   b7308:	2030      	movs	r0, #48	; 0x30
   b730a:	f7fc fec4 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b730e:	4604      	mov	r4, r0
   b7310:	b188      	cbz	r0, b7336 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b7312:	2301      	movs	r3, #1
   b7314:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b7318:	4b09      	ldr	r3, [pc, #36]	; (b7340 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b731a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b731c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7320:	8183      	strh	r3, [r0, #12]
   b7322:	300e      	adds	r0, #14
   b7324:	f7ff fe23 	bl	b6f6e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b7328:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b732c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b7330:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b7334:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b7336:	6074      	str	r4, [r6, #4]
   b7338:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b733a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b733c:	4630      	mov	r0, r6
   b733e:	bd70      	pop	{r4, r5, r6, pc}
   b7340:	000bb4a4 	.word	0x000bb4a4

000b7344 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b7344:	b513      	push	{r0, r1, r4, lr}
   b7346:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7348:	a801      	add	r0, sp, #4
   b734a:	f7ff fdd5 	bl	b6ef8 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b734e:	6823      	ldr	r3, [r4, #0]
   b7350:	881c      	ldrh	r4, [r3, #0]
   b7352:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7356:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b7358:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b735a:	bf18      	it	ne
   b735c:	2401      	movne	r4, #1
    WiringBleLock lk;
   b735e:	f7ff fdd9 	bl	b6f14 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7362:	4620      	mov	r0, r4
   b7364:	b002      	add	sp, #8
   b7366:	bd10      	pop	{r4, pc}

000b7368 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b7368:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b736a:	460d      	mov	r5, r1
   b736c:	4604      	mov	r4, r0
    WiringBleLock lk;
   b736e:	a801      	add	r0, sp, #4
   b7370:	f7ff fdc2 	bl	b6ef8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7374:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b7376:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b737a:	6023      	str	r3, [r4, #0]
   b737c:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b7380:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b7382:	a801      	add	r0, sp, #4
   b7384:	f7ff fdc6 	bl	b6f14 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b7388:	4620      	mov	r0, r4
   b738a:	b003      	add	sp, #12
   b738c:	bd30      	pop	{r4, r5, pc}

000b738e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b738e:	b530      	push	{r4, r5, lr}
   b7390:	4605      	mov	r5, r0
   b7392:	b087      	sub	sp, #28
   b7394:	460c      	mov	r4, r1
    WiringBleLock lk;
   b7396:	a801      	add	r0, sp, #4
   b7398:	f7ff fdae 	bl	b6ef8 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b739c:	682a      	ldr	r2, [r5, #0]
   b739e:	6823      	ldr	r3, [r4, #0]
   b73a0:	8812      	ldrh	r2, [r2, #0]
   b73a2:	881b      	ldrh	r3, [r3, #0]
   b73a4:	429a      	cmp	r2, r3
   b73a6:	d10d      	bne.n	b73c4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b73a8:	4629      	mov	r1, r5
   b73aa:	a802      	add	r0, sp, #8
   b73ac:	f7ff ffdc 	bl	b7368 <_ZNK8particle13BlePeerDevice7addressEv>
   b73b0:	4621      	mov	r1, r4
   b73b2:	a804      	add	r0, sp, #16
   b73b4:	f7ff ffd8 	bl	b7368 <_ZNK8particle13BlePeerDevice7addressEv>
   b73b8:	a904      	add	r1, sp, #16
   b73ba:	a802      	add	r0, sp, #8
   b73bc:	f7ff fdc3 	bl	b6f46 <_ZNK8particle10BleAddresseqERKS0_>
   b73c0:	4604      	mov	r4, r0
   b73c2:	b900      	cbnz	r0, b73c6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b73c4:	2400      	movs	r4, #0
    WiringBleLock lk;
   b73c6:	a801      	add	r0, sp, #4
   b73c8:	f7ff fda4 	bl	b6f14 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b73cc:	4620      	mov	r0, r4
   b73ce:	b007      	add	sp, #28
   b73d0:	bd30      	pop	{r4, r5, pc}
	...

000b73d4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b73d4:	b510      	push	{r4, lr}
   b73d6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b73d8:	2054      	movs	r0, #84	; 0x54
   b73da:	f7fc fe5c 	bl	b4096 <_Znwj>
   b73de:	4601      	mov	r1, r0
   b73e0:	b160      	cbz	r0, b73fc <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b73e2:	2300      	movs	r3, #0
   b73e4:	e9c0 3300 	strd	r3, r3, [r0]
   b73e8:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b73ec:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b73f0:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b73f4:	6203      	str	r3, [r0, #32]
   b73f6:	62c3      	str	r3, [r0, #44]	; 0x2c
   b73f8:	63c3      	str	r3, [r0, #60]	; 0x3c
   b73fa:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b73fc:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b73fe:	b919      	cbnz	r1, b7408 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   b7400:	4a09      	ldr	r2, [pc, #36]	; (b7428 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b7402:	200a      	movs	r0, #10
   b7404:	f7ff fb14 	bl	b6a30 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b7408:	2000      	movs	r0, #0
   b740a:	f7ff f877 	bl	b64fc <hal_ble_stack_init>
   b740e:	b120      	cbz	r0, b741a <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   b7410:	4a05      	ldr	r2, [pc, #20]	; (b7428 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b7412:	2100      	movs	r1, #0
   b7414:	200a      	movs	r0, #10
   b7416:	f7ff fb0b 	bl	b6a30 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b741a:	6821      	ldr	r1, [r4, #0]
   b741c:	4803      	ldr	r0, [pc, #12]	; (b742c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b741e:	2200      	movs	r2, #0
   b7420:	f7ff f8d0 	bl	b65c4 <hal_ble_set_callback_on_periph_link_events>
}
   b7424:	4620      	mov	r0, r4
   b7426:	bd10      	pop	{r4, pc}
   b7428:	000b6651 	.word	0x000b6651
   b742c:	000b7a2d 	.word	0x000b7a2d

000b7430 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b7430:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b7432:	4c0a      	ldr	r4, [pc, #40]	; (b745c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b7434:	7823      	ldrb	r3, [r4, #0]
   b7436:	f3bf 8f5b 	dmb	ish
   b743a:	07db      	lsls	r3, r3, #31
   b743c:	d40c      	bmi.n	b7458 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b743e:	4620      	mov	r0, r4
   b7440:	f7fc fe2f 	bl	b40a2 <__cxa_guard_acquire>
   b7444:	b140      	cbz	r0, b7458 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7446:	4806      	ldr	r0, [pc, #24]	; (b7460 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7448:	f7ff ffc4 	bl	b73d4 <_ZN8particle14BleLocalDeviceC1Ev>
   b744c:	4620      	mov	r0, r4
   b744e:	f7fc fe2d 	bl	b40ac <__cxa_guard_release>
   b7452:	4804      	ldr	r0, [pc, #16]	; (b7464 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7454:	f003 f89c 	bl	ba590 <atexit>
    return instance;
}
   b7458:	4801      	ldr	r0, [pc, #4]	; (b7460 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b745a:	bd10      	pop	{r4, pc}
   b745c:	2003e6b0 	.word	0x2003e6b0
   b7460:	2003e6bc 	.word	0x2003e6bc
   b7464:	000b76b9 	.word	0x000b76b9

000b7468 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7468:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b746a:	6803      	ldr	r3, [r0, #0]
   b746c:	3b09      	subs	r3, #9
   b746e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7470:	b08d      	sub	sp, #52	; 0x34
   b7472:	4604      	mov	r4, r0
   b7474:	460d      	mov	r5, r1
    switch (event->type) {
   b7476:	d811      	bhi.n	b749c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b7478:	f7ff ffda 	bl	b7430 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b747c:	88a1      	ldrh	r1, [r4, #4]
   b747e:	6800      	ldr	r0, [r0, #0]
   b7480:	f7ff fe92 	bl	b71a8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b7484:	4603      	mov	r3, r0
   b7486:	b958      	cbnz	r0, b74a0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b7488:	2220      	movs	r2, #32
   b748a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b748e:	4a0b      	ldr	r2, [pc, #44]	; (b74bc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b7490:	9200      	str	r2, [sp, #0]
   b7492:	490b      	ldr	r1, [pc, #44]	; (b74c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b7494:	aa04      	add	r2, sp, #16
   b7496:	2032      	movs	r0, #50	; 0x32
   b7498:	f7ff fad2 	bl	b6a40 <log_message>
}
   b749c:	b00d      	add	sp, #52	; 0x34
   b749e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b74a0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b74a2:	2a00      	cmp	r2, #0
   b74a4:	d0fa      	beq.n	b749c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b74a6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b74aa:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b74ae:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b74b2:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b74b4:	aa04      	add	r2, sp, #16
   b74b6:	a903      	add	r1, sp, #12
   b74b8:	47a0      	blx	r4
}
   b74ba:	e7ef      	b.n	b749c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b74bc:	000bb395 	.word	0x000bb395
   b74c0:	000bb36e 	.word	0x000bb36e

000b74c4 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b74c4:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b74c6:	2000      	movs	r0, #0
   b74c8:	f7ff f818 	bl	b64fc <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b74cc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b74d0:	bd08      	pop	{r3, pc}

000b74d2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b74d2:	b919      	cbnz	r1, b74dc <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b74d4:	460a      	mov	r2, r1
   b74d6:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b74d8:	f7ff b820 	b.w	b651c <hal_ble_gap_set_advertising_data>
   b74dc:	e9d1 0100 	ldrd	r0, r1, [r1]
   b74e0:	2200      	movs	r2, #0
   b74e2:	e7f9      	b.n	b74d8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b74e4 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b74e4:	6803      	ldr	r3, [r0, #0]
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b74e6:	69d8      	ldr	r0, [r3, #28]
}
   b74e8:	2800      	cmp	r0, #0
   b74ea:	bfd4      	ite	le
   b74ec:	2000      	movle	r0, #0
   b74ee:	2001      	movgt	r0, #1
   b74f0:	4770      	bx	lr

000b74f2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b74f2:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b74f4:	1e14      	subs	r4, r2, #0
   b74f6:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b74f8:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b74fa:	db02      	blt.n	b7502 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b74fc:	1862      	adds	r2, r4, r1
   b74fe:	429a      	cmp	r2, r3
   b7500:	dd00      	ble.n	b7504 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b7502:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b7504:	682a      	ldr	r2, [r5, #0]
   b7506:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b7508:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b750a:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b750c:	1a52      	subs	r2, r2, r1
   b750e:	f003 f87f 	bl	ba610 <memmove>
    size_ -= n;
   b7512:	686a      	ldr	r2, [r5, #4]
   b7514:	1b12      	subs	r2, r2, r4
   b7516:	606a      	str	r2, [r5, #4]
}
   b7518:	bd38      	pop	{r3, r4, r5, pc}

000b751a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b751a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b751c:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b751e:	4604      	mov	r4, r0
   b7520:	460d      	mov	r5, r1
   b7522:	ab01      	add	r3, sp, #4
   b7524:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7528:	f7ff fc38 	bl	b6d9c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b752c:	4602      	mov	r2, r0
   b752e:	b138      	cbz	r0, b7540 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b7530:	9901      	ldr	r1, [sp, #4]
   b7532:	4620      	mov	r0, r4
   b7534:	f7ff ffdd 	bl	b74f2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b7538:	4629      	mov	r1, r5
   b753a:	4620      	mov	r0, r4
   b753c:	f7ff ffed 	bl	b751a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b7540:	b003      	add	sp, #12
   b7542:	bd30      	pop	{r4, r5, pc}

000b7544 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b7544:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b7546:	460c      	mov	r4, r1
   b7548:	b929      	cbnz	r1, b7556 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b754a:	460a      	mov	r2, r1
   b754c:	4608      	mov	r0, r1
}
   b754e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7552:	f7fe bfeb 	b.w	b652c <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b7556:	2101      	movs	r1, #1
   b7558:	4620      	mov	r0, r4
   b755a:	f7ff ffde 	bl	b751a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b755e:	e9d4 0100 	ldrd	r0, r1, [r4]
   b7562:	2200      	movs	r2, #0
   b7564:	e7f3      	b.n	b754e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b7566 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b7566:	b538      	push	{r3, r4, r5, lr}
   b7568:	4604      	mov	r4, r0
   b756a:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b756c:	f7ff ffb1 	bl	b74d2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b7570:	2800      	cmp	r0, #0
   b7572:	db0a      	blt.n	b758a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b7574:	4629      	mov	r1, r5
   b7576:	4620      	mov	r0, r4
   b7578:	f7ff ffe4 	bl	b7544 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b757c:	2800      	cmp	r0, #0
   b757e:	db04      	blt.n	b758a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b7580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b7584:	2000      	movs	r0, #0
   b7586:	f7fe bfd9 	b.w	b653c <hal_ble_gap_start_advertising>
}
   b758a:	bd38      	pop	{r3, r4, r5, pc}

000b758c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b758c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b758e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7590:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7592:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7594:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b7596:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7598:	f7fc fd7d 	bl	b4096 <_Znwj>
   b759c:	b118      	cbz	r0, b75a6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b759e:	682b      	ldr	r3, [r5, #0]
   b75a0:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b75a2:	686b      	ldr	r3, [r5, #4]
   b75a4:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b75a6:	4b03      	ldr	r3, [pc, #12]	; (b75b4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b75a8:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b75aa:	4b03      	ldr	r3, [pc, #12]	; (b75b8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b75ac:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b75ae:	60a3      	str	r3, [r4, #8]
      }
   b75b0:	4620      	mov	r0, r4
   b75b2:	bd38      	pop	{r3, r4, r5, pc}
   b75b4:	000b6de5 	.word	0x000b6de5
   b75b8:	000b6e3d 	.word	0x000b6e3d

000b75bc <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b75bc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b75be:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b75c0:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b75c2:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b75c4:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b75c6:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b75c8:	f7fc fd65 	bl	b4096 <_Znwj>
   b75cc:	b118      	cbz	r0, b75d6 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   b75ce:	682b      	ldr	r3, [r5, #0]
   b75d0:	6003      	str	r3, [r0, #0]
   b75d2:	686b      	ldr	r3, [r5, #4]
   b75d4:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b75d6:	4b03      	ldr	r3, [pc, #12]	; (b75e4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b75d8:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b75da:	4b03      	ldr	r3, [pc, #12]	; (b75e8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b75dc:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b75de:	60a3      	str	r3, [r4, #8]
      }
   b75e0:	4620      	mov	r0, r4
   b75e2:	bd38      	pop	{r3, r4, r5, pc}
   b75e4:	000b6dd9 	.word	0x000b6dd9
   b75e8:	000b6dfd 	.word	0x000b6dfd

000b75ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b75ec:	680b      	ldr	r3, [r1, #0]
   b75ee:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b75f0:	b113      	cbz	r3, b75f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b75f2:	685a      	ldr	r2, [r3, #4]
   b75f4:	3201      	adds	r2, #1
   b75f6:	605a      	str	r2, [r3, #4]
      }
   b75f8:	4770      	bx	lr

000b75fa <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b75fa:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b75fc:	f851 3b04 	ldr.w	r3, [r1], #4
   b7600:	4604      	mov	r4, r0
   b7602:	f840 3b04 	str.w	r3, [r0], #4
   b7606:	f7ff fff1 	bl	b75ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b760a:	6823      	ldr	r3, [r4, #0]
   b760c:	b90b      	cbnz	r3, b7612 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b760e:	f7ff fbdb 	bl	b6dc8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b7612:	4620      	mov	r0, r4
   b7614:	bd10      	pop	{r4, pc}

000b7616 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b7616:	b510      	push	{r4, lr}
   b7618:	f851 3b04 	ldr.w	r3, [r1], #4
   b761c:	4604      	mov	r4, r0
   b761e:	f840 3b04 	str.w	r3, [r0], #4
   b7622:	f7ff ffe3 	bl	b75ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b7626:	4620      	mov	r0, r4
   b7628:	bd10      	pop	{r4, pc}

000b762a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b762a:	b510      	push	{r4, lr}
   b762c:	f851 3b04 	ldr.w	r3, [r1], #4
   b7630:	4604      	mov	r4, r0
   b7632:	f840 3b04 	str.w	r3, [r0], #4
   b7636:	f7ff ffd9 	bl	b75ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b763a:	4620      	mov	r0, r4
   b763c:	bd10      	pop	{r4, pc}

000b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b763e:	b510      	push	{r4, lr}
   b7640:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b7642:	6800      	ldr	r0, [r0, #0]
   b7644:	b108      	cbz	r0, b764a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b7646:	f7ff fc2d 	bl	b6ea4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b764a:	4620      	mov	r0, r4
   b764c:	bd10      	pop	{r4, pc}

000b764e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b764e:	b510      	push	{r4, lr}
   b7650:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7652:	3004      	adds	r0, #4
   b7654:	f7ff fff3 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7658:	4620      	mov	r0, r4
   b765a:	bd10      	pop	{r4, pc}

000b765c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b765c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b765e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7662:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7664:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7668:	42ae      	cmp	r6, r5
   b766a:	d004      	beq.n	b7676 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b766c:	1d28      	adds	r0, r5, #4
   b766e:	f7ff ffe6 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7672:	3508      	adds	r5, #8
   b7674:	e7f8      	b.n	b7668 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7676:	6820      	ldr	r0, [r4, #0]
   b7678:	f7ff fb02 	bl	b6c80 <free>
}
   b767c:	4620      	mov	r0, r4
   b767e:	bd70      	pop	{r4, r5, r6, pc}

000b7680 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7680:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7682:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7686:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7688:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b768c:	42ae      	cmp	r6, r5
   b768e:	d004      	beq.n	b769a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b7690:	1d28      	adds	r0, r5, #4
   b7692:	f7ff ffd4 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7696:	3508      	adds	r5, #8
   b7698:	e7f8      	b.n	b768c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b769a:	6820      	ldr	r0, [r4, #0]
   b769c:	f7ff faf0 	bl	b6c80 <free>
}
   b76a0:	4620      	mov	r0, r4
   b76a2:	bd70      	pop	{r4, r5, r6, pc}

000b76a4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b76a4:	b510      	push	{r4, lr}
   b76a6:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b76a8:	3024      	adds	r0, #36	; 0x24
   b76aa:	f7ff ffe9 	bl	b7680 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b76ae:	f104 0018 	add.w	r0, r4, #24
   b76b2:	f7ff ffd3 	bl	b765c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b76b6:	bd10      	pop	{r4, pc}

000b76b8 <__tcf_0>:
    static BleLocalDevice instance;
   b76b8:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b76ba:	4b15      	ldr	r3, [pc, #84]	; (b7710 <__tcf_0+0x58>)
   b76bc:	681c      	ldr	r4, [r3, #0]
   b76be:	b334      	cbz	r4, b770e <__tcf_0+0x56>
    class function<_Res(_ArgTypes...)>
   b76c0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b76c4:	f7ff fbda 	bl	b6e7c <_ZNSt14_Function_baseD1Ev>
   b76c8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b76cc:	f7ff fbd6 	bl	b6e7c <_ZNSt14_Function_baseD1Ev>
   b76d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b76d4:	f7ff fbd2 	bl	b6e7c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b76d8:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b76dc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b76e0:	42ae      	cmp	r6, r5
   b76e2:	d004      	beq.n	b76ee <__tcf_0+0x36>
      ~__shared_ptr() = default;
   b76e4:	1d28      	adds	r0, r5, #4
   b76e6:	f7ff ffaa 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b76ea:	3508      	adds	r5, #8
   b76ec:	e7f8      	b.n	b76e0 <__tcf_0+0x28>
    ::free(ptr);
   b76ee:	69a0      	ldr	r0, [r4, #24]
   b76f0:	f7ff fac6 	bl	b6c80 <free>
    ~BleLocalDeviceImpl() = default;
   b76f4:	f104 000c 	add.w	r0, r4, #12
   b76f8:	f7ff ffc2 	bl	b7680 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b76fc:	4620      	mov	r0, r4
   b76fe:	f7ff ffad 	bl	b765c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b7702:	4620      	mov	r0, r4
   b7704:	2154      	movs	r1, #84	; 0x54
    static BleLocalDevice instance;
   b7706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b770a:	f7fc bcc8 	b.w	b409e <_ZdlPvj>
   b770e:	bd70      	pop	{r4, r5, r6, pc}
   b7710:	2003e6bc 	.word	0x2003e6bc

000b7714 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b7714:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b7716:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7718:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b771c:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b7720:	6803      	ldr	r3, [r0, #0]
   b7722:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7724:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7726:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b7728:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b772a:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b772c:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b772e:	f7ff ff86 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b7732:	b002      	add	sp, #8
   b7734:	bd10      	pop	{r4, pc}

000b7736 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b7736:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7738:	b510      	push	{r4, lr}
      if (_M_empty())
   b773a:	b90a      	cbnz	r2, b7740 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b773c:	f002 f99c 	bl	b9a78 <_ZSt25__throw_bad_function_callv>
    }
   b7740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7744:	68c3      	ldr	r3, [r0, #12]
   b7746:	4718      	bx	r3

000b7748 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
inline void spark::Vector<T, AllocatorT>::clear() {
   b7748:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b774a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline void spark::Vector<T, AllocatorT>::clear() {
   b774e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7750:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7754:	42ae      	cmp	r6, r5
   b7756:	d004      	beq.n	b7762 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
      ~__shared_ptr() = default;
   b7758:	1d28      	adds	r0, r5, #4
   b775a:	f7ff ff70 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b775e:	3508      	adds	r5, #8
   b7760:	e7f8      	b.n	b7754 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
    size_ = 0;
   b7762:	2300      	movs	r3, #0
   b7764:	6063      	str	r3, [r4, #4]
}
   b7766:	bd70      	pop	{r4, r5, r6, pc}

000b7768 <_ZNK8particle14BleLocalDevice3offEv>:
int BleLocalDevice::off() const {
   b7768:	b513      	push	{r0, r1, r4, lr}
   b776a:	4604      	mov	r4, r0
    CHECK(hal_ble_stack_deinit(nullptr));
   b776c:	2000      	movs	r0, #0
   b776e:	f7fe fecd 	bl	b650c <hal_ble_stack_deinit>
   b7772:	2800      	cmp	r0, #0
   b7774:	db0a      	blt.n	b778c <_ZNK8particle14BleLocalDevice3offEv+0x24>
        WiringBleLock lk;
   b7776:	a801      	add	r0, sp, #4
   b7778:	f7ff fbbe 	bl	b6ef8 <_ZN8particle3ble13WiringBleLockC1Ev>
        return peers_;
   b777c:	6820      	ldr	r0, [r4, #0]
        impl()->peers().clear();
   b777e:	3018      	adds	r0, #24
   b7780:	f7ff ffe2 	bl	b7748 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
        WiringBleLock lk;
   b7784:	a801      	add	r0, sp, #4
   b7786:	f7ff fbc5 	bl	b6f14 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b778a:	2000      	movs	r0, #0
}
   b778c:	b002      	add	sp, #8
   b778e:	bd10      	pop	{r4, pc}

000b7790 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b7790:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b7792:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b7794:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7796:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7798:	dd03      	ble.n	b77a2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b779a:	f7ff fa79 	bl	b6c90 <realloc>
            if (!d) {
   b779e:	b918      	cbnz	r0, b77a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b77a0:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b77a2:	f7ff fa6d 	bl	b6c80 <free>
        T* d = nullptr;
   b77a6:	2000      	movs	r0, #0
        data_ = d;
   b77a8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b77aa:	60a5      	str	r5, [r4, #8]
        return true;
   b77ac:	2001      	movs	r0, #1
   b77ae:	e7f7      	b.n	b77a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b77b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b77b0:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b77b2:	6883      	ldr	r3, [r0, #8]
   b77b4:	428b      	cmp	r3, r1
   b77b6:	da02      	bge.n	b77be <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b77b8:	f7ff ffea 	bl	b7790 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b77bc:	bd08      	pop	{r3, pc}
    return true;
   b77be:	2001      	movs	r0, #1
   b77c0:	e7fc      	b.n	b77bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b77c2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b77c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b77c6:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b77c8:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b77ca:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b77cc:	4419      	add	r1, r3
   b77ce:	6883      	ldr	r3, [r0, #8]
   b77d0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b77d2:	4604      	mov	r4, r0
   b77d4:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b77d6:	dc12      	bgt.n	b77fe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b77d8:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b77da:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b77dc:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b77de:	1bd2      	subs	r2, r2, r7
   b77e0:	4631      	mov	r1, r6
   b77e2:	1970      	adds	r0, r6, r5
   b77e4:	f002 ff14 	bl	ba610 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b77e8:	462a      	mov	r2, r5
   b77ea:	4641      	mov	r1, r8
   b77ec:	4630      	mov	r0, r6
   b77ee:	f002 ff01 	bl	ba5f4 <memcpy>
    size_ += n;
   b77f2:	6863      	ldr	r3, [r4, #4]
   b77f4:	442b      	add	r3, r5
   b77f6:	6063      	str	r3, [r4, #4]
    return true;
   b77f8:	2001      	movs	r0, #1
}
   b77fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b77fe:	f7ff ffc7 	bl	b7790 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7802:	2800      	cmp	r0, #0
   b7804:	d1e8      	bne.n	b77d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b7806:	e7f8      	b.n	b77fa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b7808 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b780a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b780c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7810:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7812:	4604      	mov	r4, r0
   b7814:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7816:	da0b      	bge.n	b7830 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b7818:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b781a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b781c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b781e:	1b52      	subs	r2, r2, r5
   b7820:	1c48      	adds	r0, r1, #1
   b7822:	f002 fef5 	bl	ba610 <memmove>
    new(p) T(std::move(value));
   b7826:	557e      	strb	r6, [r7, r5]
    ++size_;
   b7828:	6863      	ldr	r3, [r4, #4]
   b782a:	3301      	adds	r3, #1
   b782c:	6063      	str	r3, [r4, #4]
}
   b782e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7830:	3101      	adds	r1, #1
   b7832:	f7ff ffad 	bl	b7790 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7836:	2800      	cmp	r0, #0
   b7838:	d1ee      	bne.n	b7818 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b783a:	e7f8      	b.n	b782e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b783c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b783c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b783e:	6841      	ldr	r1, [r0, #4]
   b7840:	f7ff bfe2 	b.w	b7808 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b7844 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7844:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7848:	4604      	mov	r4, r0
   b784a:	461d      	mov	r5, r3
   b784c:	460f      	mov	r7, r1
   b784e:	ab01      	add	r3, sp, #4
   b7850:	4690      	mov	r8, r2
   b7852:	460a      	mov	r2, r1
   b7854:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7858:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b785c:	f7ff fa9e 	bl	b6d9c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b7860:	1cae      	adds	r6, r5, #2
   b7862:	6863      	ldr	r3, [r4, #4]
   b7864:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b7866:	f1b9 0f00 	cmp.w	r9, #0
   b786a:	d126      	bne.n	b78ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b786c:	b328      	cbz	r0, b78ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b786e:	4433      	add	r3, r6
   b7870:	1a1b      	subs	r3, r3, r0
   b7872:	2bff      	cmp	r3, #255	; 0xff
   b7874:	d809      	bhi.n	b788a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b7876:	9901      	ldr	r1, [sp, #4]
   b7878:	4620      	mov	r0, r4
   b787a:	f7ff fe3a 	bl	b74f2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b787e:	6861      	ldr	r1, [r4, #4]
   b7880:	4620      	mov	r0, r4
   b7882:	4431      	add	r1, r6
   b7884:	f7ff ff94 	bl	b77b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7888:	b918      	cbnz	r0, b7892 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b788a:	6860      	ldr	r0, [r4, #4]
}
   b788c:	b003      	add	sp, #12
   b788e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b7892:	1c6a      	adds	r2, r5, #1
   b7894:	9901      	ldr	r1, [sp, #4]
   b7896:	b2d2      	uxtb	r2, r2
   b7898:	4620      	mov	r0, r4
   b789a:	f7ff ffb5 	bl	b7808 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b789e:	9901      	ldr	r1, [sp, #4]
   b78a0:	463a      	mov	r2, r7
   b78a2:	3101      	adds	r1, #1
   b78a4:	4620      	mov	r0, r4
   b78a6:	f7ff ffaf 	bl	b7808 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b78aa:	9901      	ldr	r1, [sp, #4]
   b78ac:	462b      	mov	r3, r5
   b78ae:	4642      	mov	r2, r8
   b78b0:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b78b2:	4620      	mov	r0, r4
   b78b4:	f7ff ff85 	bl	b77c2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b78b8:	e7e7      	b.n	b788a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b78ba:	18f1      	adds	r1, r6, r3
   b78bc:	29ff      	cmp	r1, #255	; 0xff
   b78be:	d8e4      	bhi.n	b788a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b78c0:	4620      	mov	r0, r4
   b78c2:	f7ff ff75 	bl	b77b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b78c6:	2800      	cmp	r0, #0
   b78c8:	d0df      	beq.n	b788a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b78ca:	1c69      	adds	r1, r5, #1
   b78cc:	b2c9      	uxtb	r1, r1
   b78ce:	4620      	mov	r0, r4
   b78d0:	f7ff ffb4 	bl	b783c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b78d4:	4639      	mov	r1, r7
   b78d6:	4620      	mov	r0, r4
   b78d8:	f7ff ffb0 	bl	b783c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b78dc:	6861      	ldr	r1, [r4, #4]
   b78de:	462b      	mov	r3, r5
   b78e0:	4642      	mov	r2, r8
   b78e2:	e7e6      	b.n	b78b2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b78e4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b78e4:	b430      	push	{r4, r5}
   b78e6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b78ea:	b11a      	cbz	r2, b78f4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b78ec:	9502      	str	r5, [sp, #8]
}
   b78ee:	bc30      	pop	{r4, r5}
   b78f0:	f7ff bfa8 	b.w	b7844 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b78f4:	6840      	ldr	r0, [r0, #4]
}
   b78f6:	bc30      	pop	{r4, r5}
   b78f8:	4770      	bx	lr

000b78fa <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b78fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b78fc:	2300      	movs	r3, #0
   b78fe:	e9c0 3300 	strd	r3, r3, [r0]
   b7902:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7904:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7906:	9300      	str	r3, [sp, #0]
   b7908:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b790a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b790e:	4619      	mov	r1, r3
   b7910:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b7914:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7916:	f7ff ffe5 	bl	b78e4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b791a:	4620      	mov	r0, r4
   b791c:	b004      	add	sp, #16
   b791e:	bd10      	pop	{r4, pc}

000b7920 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7920:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7924:	4604      	mov	r4, r0
   b7926:	460d      	mov	r5, r1
   b7928:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b792a:	d914      	bls.n	b7956 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b792c:	4290      	cmp	r0, r2
   b792e:	d213      	bcs.n	b7958 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7930:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7934:	1a75      	subs	r5, r6, r1
   b7936:	f1a1 0708 	sub.w	r7, r1, #8
   b793a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b793c:	42b7      	cmp	r7, r6
   b793e:	d018      	beq.n	b7972 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7940:	b11c      	cbz	r4, b794a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7942:	4631      	mov	r1, r6
   b7944:	4620      	mov	r0, r4
   b7946:	f7ff fe70 	bl	b762a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b794a:	1d30      	adds	r0, r6, #4
   b794c:	f7ff fe77 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7950:	3e08      	subs	r6, #8
   b7952:	3c08      	subs	r4, #8
   b7954:	e7f2      	b.n	b793c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7956:	d00c      	beq.n	b7972 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7958:	42b5      	cmp	r5, r6
   b795a:	d00a      	beq.n	b7972 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b795c:	b11c      	cbz	r4, b7966 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b795e:	4629      	mov	r1, r5
   b7960:	4620      	mov	r0, r4
   b7962:	f7ff fe62 	bl	b762a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7966:	1d28      	adds	r0, r5, #4
   b7968:	f7ff fe69 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b796c:	3508      	adds	r5, #8
   b796e:	3408      	adds	r4, #8
   b7970:	e7f2      	b.n	b7958 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7974 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7976:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7978:	6846      	ldr	r6, [r0, #4]
   b797a:	4668      	mov	r0, sp
   b797c:	f7ff fe55 	bl	b762a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7980:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7984:	429f      	cmp	r7, r3
   b7986:	db12      	blt.n	b79ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7988:	3701      	adds	r7, #1
        if (n > 0) {
   b798a:	2f00      	cmp	r7, #0
   b798c:	dd29      	ble.n	b79e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b798e:	00f8      	lsls	r0, r7, #3
   b7990:	f7ff f96e 	bl	b6c70 <malloc>
            if (!d) {
   b7994:	4605      	mov	r5, r0
   b7996:	b1f0      	cbz	r0, b79d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7998:	e9d4 1200 	ldrd	r1, r2, [r4]
   b799c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b79a0:	f7ff ffbe 	bl	b7920 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b79a4:	6820      	ldr	r0, [r4, #0]
   b79a6:	f7ff f96b 	bl	b6c80 <free>
        data_ = d;
   b79aa:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b79ac:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b79ae:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b79b0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b79b2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b79b6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b79ba:	4631      	mov	r1, r6
   b79bc:	f106 0008 	add.w	r0, r6, #8
   b79c0:	f7ff ffae 	bl	b7920 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b79c4:	b11e      	cbz	r6, b79ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b79c6:	4669      	mov	r1, sp
   b79c8:	4630      	mov	r0, r6
   b79ca:	f7ff fe2e 	bl	b762a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b79ce:	6863      	ldr	r3, [r4, #4]
   b79d0:	3301      	adds	r3, #1
   b79d2:	6063      	str	r3, [r4, #4]
    return true;
   b79d4:	2501      	movs	r5, #1
   b79d6:	a801      	add	r0, sp, #4
   b79d8:	f7ff fe31 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b79dc:	4628      	mov	r0, r5
   b79de:	b003      	add	sp, #12
   b79e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b79e2:	2500      	movs	r5, #0
   b79e4:	e7de      	b.n	b79a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b79e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b79e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b79e8:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b79ec:	4605      	mov	r5, r0
   b79ee:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b79f0:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b79f4:	42a6      	cmp	r6, r4
   b79f6:	d005      	beq.n	b7a04 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b79f8:	4639      	mov	r1, r7
   b79fa:	4620      	mov	r0, r4
   b79fc:	f7ff fcc7 	bl	b738e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b7a00:	b108      	cbz	r0, b7a06 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b7a02:	b914      	cbnz	r4, b7a0a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b7a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b7a06:	3408      	adds	r4, #8
   b7a08:	e7f4      	b.n	b79f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b7a0a:	1d20      	adds	r0, r4, #4
   b7a0c:	f7ff fe17 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b7a10:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7a14:	f104 0108 	add.w	r1, r4, #8
   b7a18:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7a1c:	4620      	mov	r0, r4
   b7a1e:	f7ff ff7f 	bl	b7920 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b7a22:	686b      	ldr	r3, [r5, #4]
   b7a24:	3b01      	subs	r3, #1
   b7a26:	606b      	str	r3, [r5, #4]
    return true;
   b7a28:	e7ec      	b.n	b7a04 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b7a2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a30:	4605      	mov	r5, r0
   b7a32:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7a34:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7a36:	460c      	mov	r4, r1
        WiringBleLock lk;
   b7a38:	f7ff fa5e 	bl	b6ef8 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7a3c:	682e      	ldr	r6, [r5, #0]
   b7a3e:	2e04      	cmp	r6, #4
   b7a40:	d075      	beq.n	b7b2e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
   b7a42:	d807      	bhi.n	b7a54 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   b7a44:	2e03      	cmp	r6, #3
   b7a46:	d032      	beq.n	b7aae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x82>
        WiringBleLock lk;
   b7a48:	a803      	add	r0, sp, #12
   b7a4a:	f7ff fa63 	bl	b6f14 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7a4e:	b00e      	add	sp, #56	; 0x38
   b7a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   b7a54:	f1a6 030c 	sub.w	r3, r6, #12
   b7a58:	2b04      	cmp	r3, #4
   b7a5a:	d8f5      	bhi.n	b7a48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7a5c:	89a9      	ldrh	r1, [r5, #12]
   b7a5e:	4620      	mov	r0, r4
   b7a60:	f7ff fba2 	bl	b71a8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7a64:	2800      	cmp	r0, #0
   b7a66:	d0ef      	beq.n	b7a48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   b7a68:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7a6a:	2b00      	cmp	r3, #0
   b7a6c:	d0ec      	beq.n	b7a48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEventPayload payload = {};
   b7a6e:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7a70:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7a72:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7a76:	d002      	beq.n	b7a7e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x52>
   b7a78:	2e10      	cmp	r6, #16
   b7a7a:	f040 80a0 	bne.w	b7bbe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x192>
                        BlePairingEventPayload payload = {};
   b7a7e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b7a80:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b7a82:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7a84:	2506      	movs	r5, #6
                        };
   b7a86:	f88d 3015 	strb.w	r3, [sp, #21]
   b7a8a:	9104      	str	r1, [sp, #16]
   b7a8c:	f88d 2014 	strb.w	r2, [sp, #20]
   b7a90:	9006      	str	r0, [sp, #24]
   b7a92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b7a96:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7a98:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7a9c:	9508      	str	r5, [sp, #32]
   b7a9e:	e883 0003 	stmia.w	r3, {r0, r1}
   b7aa2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7aa4:	a906      	add	r1, sp, #24
   b7aa6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7aaa:	4798      	blx	r3
   b7aac:	e7cc      	b.n	b7a48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   b7aae:	a804      	add	r0, sp, #16
   b7ab0:	f7ff fc26 	bl	b7300 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b7ab4:	9b04      	ldr	r3, [sp, #16]
   b7ab6:	89aa      	ldrh	r2, [r5, #12]
   b7ab8:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b7aba:	6869      	ldr	r1, [r5, #4]
   b7abc:	9804      	ldr	r0, [sp, #16]
   b7abe:	3108      	adds	r1, #8
   b7ac0:	3002      	adds	r0, #2
   b7ac2:	f7ff fa33 	bl	b6f2c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7ac6:	a904      	add	r1, sp, #16
   b7ac8:	a806      	add	r0, sp, #24
   b7aca:	f7ff fdae 	bl	b762a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b7ace:	a906      	add	r1, sp, #24
   b7ad0:	f104 0018 	add.w	r0, r4, #24
   b7ad4:	f7ff ff4e 	bl	b7974 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b7ad8:	4605      	mov	r5, r0
   b7ada:	a807      	add	r0, sp, #28
   b7adc:	f7ff fdaf 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7ae0:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b7ae2:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b7ae4:	b98d      	cbnz	r5, b7b0a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xde>
                    LOG(ERROR, "Failed to append peer Central device.");
   b7ae6:	4b3d      	ldr	r3, [pc, #244]	; (b7bdc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b0>)
   b7ae8:	493d      	ldr	r1, [pc, #244]	; (b7be0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b4>)
   b7aea:	9300      	str	r3, [sp, #0]
   b7aec:	2032      	movs	r0, #50	; 0x32
   b7aee:	462b      	mov	r3, r5
   b7af0:	aa06      	add	r2, sp, #24
   b7af2:	9507      	str	r5, [sp, #28]
   b7af4:	f7fe ffa4 	bl	b6a40 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b7af8:	9b04      	ldr	r3, [sp, #16]
   b7afa:	4629      	mov	r1, r5
   b7afc:	8818      	ldrh	r0, [r3, #0]
   b7afe:	f7fe fd25 	bl	b654c <hal_ble_gap_disconnect>
   b7b02:	a805      	add	r0, sp, #20
   b7b04:	f7ff fd9b 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7b08:	e79e      	b.n	b7a48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   b7b0a:	4a36      	ldr	r2, [pc, #216]	; (b7be4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b8>)
   b7b0c:	9200      	str	r2, [sp, #0]
   b7b0e:	2300      	movs	r3, #0
   b7b10:	4933      	ldr	r1, [pc, #204]	; (b7be0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b4>)
   b7b12:	9307      	str	r3, [sp, #28]
   b7b14:	aa06      	add	r2, sp, #24
   b7b16:	2001      	movs	r0, #1
   b7b18:	f7fe ff92 	bl	b6a40 <log_message>
                if (impl->connectedCallback_) {
   b7b1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7b1e:	2b00      	cmp	r3, #0
   b7b20:	d0ef      	beq.n	b7b02 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd6>
                    impl->connectedCallback_(peer);
   b7b22:	a904      	add	r1, sp, #16
   b7b24:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7b28:	f7ff fe05 	bl	b7736 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7b2c:	e7e9      	b.n	b7b02 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd6>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7b2e:	89a9      	ldrh	r1, [r5, #12]
   b7b30:	4620      	mov	r0, r4
   b7b32:	f7ff fb39 	bl	b71a8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7b36:	4606      	mov	r6, r0
   b7b38:	2800      	cmp	r0, #0
   b7b3a:	d085      	beq.n	b7a48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
      { return _M_ptr; }
   b7b3c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b7b3e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b7b42:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7b46:	8029      	strh	r1, [r5, #0]
   b7b48:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7b4c:	429a      	cmp	r2, r3
   b7b4e:	d003      	beq.n	b7b58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   b7b50:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7b54:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b7b56:	e7f9      	b.n	b7b4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    destruct(data_, data_ + size_);
   b7b58:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b7b5c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7b60:	45b8      	cmp	r8, r7
   b7b62:	d004      	beq.n	b7b6e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x142>
      ~__shared_ptr() = default;
   b7b64:	1d38      	adds	r0, r7, #4
   b7b66:	f7ff fd6a 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7b6a:	3708      	adds	r7, #8
   b7b6c:	e7f8      	b.n	b7b60 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x134>
    size_ = 0;
   b7b6e:	2300      	movs	r3, #0
   b7b70:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b7b72:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b7b76:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7b7a:	45b8      	cmp	r8, r7
   b7b7c:	d004      	beq.n	b7b88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
   b7b7e:	1d38      	adds	r0, r7, #4
   b7b80:	f7ff fd5d 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7b84:	3708      	adds	r7, #8
   b7b86:	e7f8      	b.n	b7b7a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14e>
    size_ = 0;
   b7b88:	2300      	movs	r3, #0
   b7b8a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7b8c:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b7b8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7b90:	b123      	cbz	r3, b7b9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x170>
                        impl->disconnectedCallback_(*peer);
   b7b92:	4631      	mov	r1, r6
   b7b94:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7b98:	f7ff fdcd 	bl	b7736 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b7b9c:	2300      	movs	r3, #0
   b7b9e:	2220      	movs	r2, #32
   b7ba0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7ba4:	4a10      	ldr	r2, [pc, #64]	; (b7be8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1bc>)
   b7ba6:	9200      	str	r2, [sp, #0]
   b7ba8:	490d      	ldr	r1, [pc, #52]	; (b7be0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b4>)
   b7baa:	aa06      	add	r2, sp, #24
   b7bac:	2001      	movs	r0, #1
   b7bae:	f7fe ff47 	bl	b6a40 <log_message>
                    impl->peers_.removeOne(*peer);
   b7bb2:	4631      	mov	r1, r6
   b7bb4:	f104 0018 	add.w	r0, r4, #24
   b7bb8:	f7ff ff15 	bl	b79e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b7bbc:	e744      	b.n	b7a48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7bbe:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7bc0:	bf01      	itttt	eq
   b7bc2:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b7bc4:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7bc6:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b7bca:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7bcc:	bf0f      	iteee	eq
   b7bce:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b7bd2:	461a      	movne	r2, r3
   b7bd4:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b7bd6:	461d      	movne	r5, r3
   b7bd8:	e755      	b.n	b7a86 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x5a>
   b7bda:	bf00      	nop
   b7bdc:	000bb3ad 	.word	0x000bb3ad
   b7be0:	000bb36e 	.word	0x000bb36e
   b7be4:	000bb3d3 	.word	0x000bb3d3
   b7be8:	000bb3f0 	.word	0x000bb3f0

000b7bec <_ZNK8particle13BlePeerDevice10disconnectEv>:
int BlePeerDevice::disconnect() const {
   b7bec:	b513      	push	{r0, r1, r4, lr}
   b7bee:	4604      	mov	r4, r0
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b7bf0:	f7ff fba8 	bl	b7344 <_ZNK8particle13BlePeerDevice9connectedEv>
   b7bf4:	b1d0      	cbz	r0, b7c2c <_ZNK8particle13BlePeerDevice10disconnectEv+0x40>
    CHECK(hal_ble_gap_disconnect(impl()->connHandle(), nullptr));
   b7bf6:	6823      	ldr	r3, [r4, #0]
   b7bf8:	2100      	movs	r1, #0
   b7bfa:	8818      	ldrh	r0, [r3, #0]
   b7bfc:	f7fe fca6 	bl	b654c <hal_ble_gap_disconnect>
   b7c00:	2800      	cmp	r0, #0
   b7c02:	db11      	blt.n	b7c28 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
        WiringBleLock lk;
   b7c04:	a801      	add	r0, sp, #4
   b7c06:	f7ff f977 	bl	b6ef8 <_ZN8particle3ble13WiringBleLockC1Ev>
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b7c0a:	f7ff fc11 	bl	b7430 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b7c0e:	6800      	ldr	r0, [r0, #0]
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b7c10:	4621      	mov	r1, r4
   b7c12:	3018      	adds	r0, #24
   b7c14:	f7ff fee7 	bl	b79e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
      { return _M_ptr; }
   b7c18:	6823      	ldr	r3, [r4, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b7c1e:	801a      	strh	r2, [r3, #0]
        WiringBleLock lk;
   b7c20:	a801      	add	r0, sp, #4
   b7c22:	f7ff f977 	bl	b6f14 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b7c26:	2000      	movs	r0, #0
}
   b7c28:	b002      	add	sp, #8
   b7c2a:	bd10      	pop	{r4, pc}
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b7c2c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7c30:	e7fa      	b.n	b7c28 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
	...

000b7c34 <_ZNK8particle14BleLocalDevice13disconnectAllEv>:

int BleLocalDevice::disconnect(const BlePeerDevice& peer) const {
    return peer.disconnect();
}

int BleLocalDevice::disconnectAll() const {
   b7c34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7c38:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7c3a:	a801      	add	r0, sp, #4
   b7c3c:	f7ff f95c 	bl	b6ef8 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7c40:	6823      	ldr	r3, [r4, #0]
   b7c42:	4e10      	ldr	r6, [pc, #64]	; (b7c84 <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x50>)
    return data_ + size_;
   b7c44:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
        locked_ = false;
   b7c48:	f04f 0800 	mov.w	r8, #0
   b7c4c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
        locked_ = true;
   b7c50:	2701      	movs	r7, #1
    for (auto& p : impl()->peers()) {
   b7c52:	42ac      	cmp	r4, r5
   b7c54:	d00e      	beq.n	b7c74 <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x40>
   b7c56:	6830      	ldr	r0, [r6, #0]
   b7c58:	f7fe fce2 	bl	b6620 <os_mutex_recursive_unlock>
        lk.unlock();
        p.disconnect();
   b7c5c:	4620      	mov	r0, r4
        locked_ = false;
   b7c5e:	f88d 8004 	strb.w	r8, [sp, #4]
        p.disconnect();
   b7c62:	f7ff ffc3 	bl	b7bec <_ZNK8particle13BlePeerDevice10disconnectEv>
    void lock() { os_mutex_recursive_lock(handle_); }
   b7c66:	6830      	ldr	r0, [r6, #0]
   b7c68:	f7fe fcd2 	bl	b6610 <os_mutex_recursive_lock>
        locked_ = true;
   b7c6c:	3408      	adds	r4, #8
   b7c6e:	f88d 7004 	strb.w	r7, [sp, #4]
    for (auto& p : impl()->peers()) {
   b7c72:	e7ee      	b.n	b7c52 <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x1e>
    WiringBleLock lk;
   b7c74:	a801      	add	r0, sp, #4
   b7c76:	f7ff f94d 	bl	b6f14 <_ZN8particle3ble13WiringBleLockD1Ev>
        lk.lock();
    }
    return SYSTEM_ERROR_NONE;
}
   b7c7a:	2000      	movs	r0, #0
   b7c7c:	b002      	add	sp, #8
   b7c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7c82:	bf00      	nop
   b7c84:	2003e6b8 	.word	0x2003e6b8

000b7c88 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b7c88:	b513      	push	{r0, r1, r4, lr}
   b7c8a:	460b      	mov	r3, r1
   b7c8c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7c8e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7c92:	466c      	mov	r4, sp
   b7c94:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7c98:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7c9c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7ca0:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7ca4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7ca8:	b002      	add	sp, #8
   b7caa:	bd10      	pop	{r4, pc}

000b7cac <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b7cac:	b538      	push	{r3, r4, r5, lr}
   b7cae:	4605      	mov	r5, r0
   b7cb0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7cb2:	f7ff ffe9 	bl	b7c88 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7cb6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7cb8:	68a2      	ldr	r2, [r4, #8]
   b7cba:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7cbc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7cbe:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7cc0:	68e2      	ldr	r2, [r4, #12]
   b7cc2:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7cc4:	60e3      	str	r3, [r4, #12]
      }
   b7cc6:	bd38      	pop	{r3, r4, r5, pc}

000b7cc8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7cc8:	b570      	push	{r4, r5, r6, lr}
   b7cca:	4604      	mov	r4, r0
   b7ccc:	b08c      	sub	sp, #48	; 0x30
   b7cce:	460e      	mov	r6, r1
   b7cd0:	9201      	str	r2, [sp, #4]
   b7cd2:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b7cd4:	f7ff fa48 	bl	b7168 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b7cd8:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b7cda:	9901      	ldr	r1, [sp, #4]
   b7cdc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7ce0:	f000 fe59 	bl	b8996 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7ce4:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b7ce8:	b1cd      	cbz	r5, b7d1e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b7cea:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7cec:	9502      	str	r5, [sp, #8]
   b7cee:	a902      	add	r1, sp, #8
   b7cf0:	a804      	add	r0, sp, #16
   b7cf2:	9303      	str	r3, [sp, #12]
   b7cf4:	f7ff fc4a 	bl	b758c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7cf8:	2300      	movs	r3, #0
	__x.swap(*this);
   b7cfa:	a908      	add	r1, sp, #32
   b7cfc:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b7cfe:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b7d00:	f7ff ffd4 	bl	b7cac <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7d04:	4631      	mov	r1, r6
   b7d06:	a808      	add	r0, sp, #32
   b7d08:	f7ff ffd0 	bl	b7cac <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7d0c:	a808      	add	r0, sp, #32
   b7d0e:	f7ff f8b5 	bl	b6e7c <_ZNSt14_Function_baseD1Ev>
   b7d12:	a804      	add	r0, sp, #16
   b7d14:	f7ff f8b2 	bl	b6e7c <_ZNSt14_Function_baseD1Ev>
    }
   b7d18:	4620      	mov	r0, r4
   b7d1a:	b00c      	add	sp, #48	; 0x30
   b7d1c:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7d1e:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7d20:	e7ea      	b.n	b7cf8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b7d24 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b7d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7d28:	b087      	sub	sp, #28
   b7d2a:	461d      	mov	r5, r3
   b7d2c:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b7d30:	4680      	mov	r8, r0
   b7d32:	468b      	mov	fp, r1
   b7d34:	4692      	mov	sl, r2
   b7d36:	9912      	ldr	r1, [sp, #72]	; 0x48
   b7d38:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7d3a:	2200      	movs	r2, #0
   b7d3c:	2068      	movs	r0, #104	; 0x68
   b7d3e:	9102      	str	r1, [sp, #8]
   b7d40:	9204      	str	r2, [sp, #16]
   b7d42:	f7fc f9a8 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7d46:	1e06      	subs	r6, r0, #0
   b7d48:	f106 090c 	add.w	r9, r6, #12
   b7d4c:	d018      	beq.n	b7d80 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b7d4e:	2201      	movs	r2, #1
	: _M_impl(__a)
   b7d50:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b7d52:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b7d56:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b7d58:	4a14      	ldr	r2, [pc, #80]	; (b7dac <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x88>)
   b7d5a:	f847 2b20 	str.w	r2, [r7], #32
   b7d5e:	9b03      	ldr	r3, [sp, #12]
   b7d60:	9100      	str	r1, [sp, #0]
   b7d62:	465a      	mov	r2, fp
   b7d64:	4651      	mov	r1, sl
   b7d66:	4648      	mov	r0, r9
   b7d68:	f7ff ffae 	bl	b7cc8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b7d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7d6e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b7d70:	682b      	ldr	r3, [r5, #0]
   b7d72:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b7d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7d76:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b7d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7d7c:	6823      	ldr	r3, [r4, #0]
   b7d7e:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b7d80:	a904      	add	r1, sp, #16
   b7d82:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b7d84:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b7d88:	f7ff fcc4 	bl	b7714 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b7d8c:	a805      	add	r0, sp, #20
   b7d8e:	f7ff fc56 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b7d92:	f8d8 1000 	ldr.w	r1, [r8]
   b7d96:	b931      	cbnz	r1, b7da6 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x82>
        SPARK_ASSERT(false);
   b7d98:	4a05      	ldr	r2, [pc, #20]	; (b7db0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b7d9a:	200a      	movs	r0, #10
}
   b7d9c:	b007      	add	sp, #28
   b7d9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b7da2:	f7fe be45 	b.w	b6a30 <panic_>
}
   b7da6:	b007      	add	sp, #28
   b7da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7dac:	000bb46c 	.word	0x000bb46c
   b7db0:	000b6651 	.word	0x000b6651

000b7db4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b7db4:	b538      	push	{r3, r4, r5, lr}
   b7db6:	4605      	mov	r5, r0
   b7db8:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7dba:	f7ff ff65 	bl	b7c88 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7dbe:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7dc0:	68a2      	ldr	r2, [r4, #8]
   b7dc2:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7dc4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7dc6:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7dc8:	68e2      	ldr	r2, [r4, #12]
   b7dca:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7dcc:	60e3      	str	r3, [r4, #12]
      }
   b7dce:	bd38      	pop	{r3, r4, r5, pc}

000b7dd0 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b7dd0:	b510      	push	{r4, lr}
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b7dd2:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b7dd4:	b08a      	sub	sp, #40	; 0x28
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b7dd6:	3434      	adds	r4, #52	; 0x34
   b7dd8:	b1b9      	cbz	r1, b7e0a <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b7dda:	e9cd 1200 	strd	r1, r2, [sp]
   b7dde:	a802      	add	r0, sp, #8
   b7de0:	4669      	mov	r1, sp
   b7de2:	f7ff fbeb 	bl	b75bc <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7de6:	2300      	movs	r3, #0
	__x.swap(*this);
   b7de8:	a906      	add	r1, sp, #24
   b7dea:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7dec:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7dee:	f7ff ffe1 	bl	b7db4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b7df2:	4621      	mov	r1, r4
   b7df4:	a806      	add	r0, sp, #24
   b7df6:	f7ff ffdd 	bl	b7db4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b7dfa:	a806      	add	r0, sp, #24
   b7dfc:	f7ff f83e 	bl	b6e7c <_ZNSt14_Function_baseD1Ev>
   b7e00:	a802      	add	r0, sp, #8
   b7e02:	f7ff f83b 	bl	b6e7c <_ZNSt14_Function_baseD1Ev>
}
   b7e06:	b00a      	add	sp, #40	; 0x28
   b7e08:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7e0a:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7e0c:	e7eb      	b.n	b7de6 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b7e0e <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7e0e:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7e10:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7e12:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7e14:	3424      	adds	r4, #36	; 0x24
   b7e16:	b1b9      	cbz	r1, b7e48 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b7e18:	e9cd 1200 	strd	r1, r2, [sp]
   b7e1c:	a802      	add	r0, sp, #8
   b7e1e:	4669      	mov	r1, sp
   b7e20:	f7ff fbcc 	bl	b75bc <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7e24:	2300      	movs	r3, #0
	__x.swap(*this);
   b7e26:	a906      	add	r1, sp, #24
   b7e28:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7e2a:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7e2c:	f7ff ffc2 	bl	b7db4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b7e30:	4621      	mov	r1, r4
   b7e32:	a806      	add	r0, sp, #24
   b7e34:	f7ff ffbe 	bl	b7db4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b7e38:	a806      	add	r0, sp, #24
   b7e3a:	f7ff f81f 	bl	b6e7c <_ZNSt14_Function_baseD1Ev>
   b7e3e:	a802      	add	r0, sp, #8
   b7e40:	f7ff f81c 	bl	b6e7c <_ZNSt14_Function_baseD1Ev>
}
   b7e44:	b00a      	add	sp, #40	; 0x28
   b7e46:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7e48:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7e4a:	e7eb      	b.n	b7e24 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b7e4c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7e4c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7e50:	4604      	mov	r4, r0
   b7e52:	460d      	mov	r5, r1
   b7e54:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7e56:	d914      	bls.n	b7e82 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7e58:	4290      	cmp	r0, r2
   b7e5a:	d213      	bcs.n	b7e84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7e5c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7e60:	1a75      	subs	r5, r6, r1
   b7e62:	f1a1 0708 	sub.w	r7, r1, #8
   b7e66:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7e68:	42b7      	cmp	r7, r6
   b7e6a:	d018      	beq.n	b7e9e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7e6c:	b11c      	cbz	r4, b7e76 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7e6e:	4631      	mov	r1, r6
   b7e70:	4620      	mov	r0, r4
   b7e72:	f7ff fbd0 	bl	b7616 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7e76:	1d30      	adds	r0, r6, #4
   b7e78:	f7ff fbe1 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7e7c:	3e08      	subs	r6, #8
   b7e7e:	3c08      	subs	r4, #8
   b7e80:	e7f2      	b.n	b7e68 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7e82:	d00c      	beq.n	b7e9e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7e84:	42b5      	cmp	r5, r6
   b7e86:	d00a      	beq.n	b7e9e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7e88:	b11c      	cbz	r4, b7e92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7e8a:	4629      	mov	r1, r5
   b7e8c:	4620      	mov	r0, r4
   b7e8e:	f7ff fbc2 	bl	b7616 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7e92:	1d28      	adds	r0, r5, #4
   b7e94:	f7ff fbd3 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7e98:	3508      	adds	r5, #8
   b7e9a:	3408      	adds	r4, #8
   b7e9c:	e7f2      	b.n	b7e84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7ea0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7ea0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7ea2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7ea4:	4605      	mov	r5, r0
        if (n > 0) {
   b7ea6:	dd11      	ble.n	b7ecc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7ea8:	00f0      	lsls	r0, r6, #3
   b7eaa:	f7fe fee1 	bl	b6c70 <malloc>
            if (!d) {
   b7eae:	4604      	mov	r4, r0
   b7eb0:	b158      	cbz	r0, b7eca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7eb2:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7eb6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7eba:	f7ff ffc7 	bl	b7e4c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7ebe:	6828      	ldr	r0, [r5, #0]
   b7ec0:	f7fe fede 	bl	b6c80 <free>
        data_ = d;
   b7ec4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7ec6:	60ae      	str	r6, [r5, #8]
        return true;
   b7ec8:	2001      	movs	r0, #1
    }
   b7eca:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7ecc:	2400      	movs	r4, #0
   b7ece:	e7f6      	b.n	b7ebe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7ed0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7ed0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7ed2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7ed4:	6845      	ldr	r5, [r0, #4]
   b7ed6:	4668      	mov	r0, sp
   b7ed8:	f7ff fb9d 	bl	b7616 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7edc:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7ee0:	4299      	cmp	r1, r3
   b7ee2:	da10      	bge.n	b7f06 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7ee4:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7ee6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7ee8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7eec:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7ef0:	4629      	mov	r1, r5
   b7ef2:	f105 0008 	add.w	r0, r5, #8
   b7ef6:	f7ff ffa9 	bl	b7e4c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7efa:	b98d      	cbnz	r5, b7f20 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7efc:	6863      	ldr	r3, [r4, #4]
   b7efe:	3301      	adds	r3, #1
   b7f00:	6063      	str	r3, [r4, #4]
    return true;
   b7f02:	2601      	movs	r6, #1
   b7f04:	e006      	b.n	b7f14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7f06:	3101      	adds	r1, #1
   b7f08:	4620      	mov	r0, r4
   b7f0a:	f7ff ffc9 	bl	b7ea0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7f0e:	4606      	mov	r6, r0
   b7f10:	2800      	cmp	r0, #0
   b7f12:	d1e7      	bne.n	b7ee4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7f14:	a801      	add	r0, sp, #4
   b7f16:	f7ff fb92 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7f1a:	4630      	mov	r0, r6
   b7f1c:	b002      	add	sp, #8
   b7f1e:	bd70      	pop	{r4, r5, r6, pc}
   b7f20:	4669      	mov	r1, sp
   b7f22:	4628      	mov	r0, r5
   b7f24:	f7ff fb77 	bl	b7616 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7f28:	e7e8      	b.n	b7efc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7f2a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7f2a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f2e:	4604      	mov	r4, r0
   b7f30:	460d      	mov	r5, r1
   b7f32:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7f34:	d914      	bls.n	b7f60 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7f36:	4290      	cmp	r0, r2
   b7f38:	d213      	bcs.n	b7f62 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7f3a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7f3e:	1a75      	subs	r5, r6, r1
   b7f40:	f1a1 0708 	sub.w	r7, r1, #8
   b7f44:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7f46:	42b7      	cmp	r7, r6
   b7f48:	d018      	beq.n	b7f7c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7f4a:	b11c      	cbz	r4, b7f54 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7f4c:	4631      	mov	r1, r6
   b7f4e:	4620      	mov	r0, r4
   b7f50:	f7ff fb53 	bl	b75fa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7f54:	1d30      	adds	r0, r6, #4
   b7f56:	f7ff fb72 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7f5a:	3e08      	subs	r6, #8
   b7f5c:	3c08      	subs	r4, #8
   b7f5e:	e7f2      	b.n	b7f46 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7f60:	d00c      	beq.n	b7f7c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7f62:	42b5      	cmp	r5, r6
   b7f64:	d00a      	beq.n	b7f7c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7f66:	b11c      	cbz	r4, b7f70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7f68:	4629      	mov	r1, r5
   b7f6a:	4620      	mov	r0, r4
   b7f6c:	f7ff fb45 	bl	b75fa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7f70:	1d28      	adds	r0, r5, #4
   b7f72:	f7ff fb64 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7f76:	3508      	adds	r5, #8
   b7f78:	3408      	adds	r4, #8
   b7f7a:	e7f2      	b.n	b7f62 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7f7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7f7e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7f80:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7f82:	4605      	mov	r5, r0
        if (n > 0) {
   b7f84:	dd11      	ble.n	b7faa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7f86:	00f0      	lsls	r0, r6, #3
   b7f88:	f7fe fe72 	bl	b6c70 <malloc>
            if (!d) {
   b7f8c:	4604      	mov	r4, r0
   b7f8e:	b158      	cbz	r0, b7fa8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7f90:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7f94:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7f98:	f7ff ffc7 	bl	b7f2a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7f9c:	6828      	ldr	r0, [r5, #0]
   b7f9e:	f7fe fe6f 	bl	b6c80 <free>
        data_ = d;
   b7fa2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7fa4:	60ae      	str	r6, [r5, #8]
        return true;
   b7fa6:	2001      	movs	r0, #1
    }
   b7fa8:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7faa:	2400      	movs	r4, #0
   b7fac:	e7f6      	b.n	b7f9c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7fae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7fae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7fb0:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7fb2:	6845      	ldr	r5, [r0, #4]
   b7fb4:	4668      	mov	r0, sp
   b7fb6:	f7ff fb20 	bl	b75fa <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7fba:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7fbe:	4299      	cmp	r1, r3
   b7fc0:	da10      	bge.n	b7fe4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7fc2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7fc4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7fc6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7fca:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7fce:	4629      	mov	r1, r5
   b7fd0:	f105 0008 	add.w	r0, r5, #8
   b7fd4:	f7ff ffa9 	bl	b7f2a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7fd8:	b98d      	cbnz	r5, b7ffe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7fda:	6863      	ldr	r3, [r4, #4]
   b7fdc:	3301      	adds	r3, #1
   b7fde:	6063      	str	r3, [r4, #4]
    return true;
   b7fe0:	2601      	movs	r6, #1
   b7fe2:	e006      	b.n	b7ff2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7fe4:	3101      	adds	r1, #1
   b7fe6:	4620      	mov	r0, r4
   b7fe8:	f7ff ffc9 	bl	b7f7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7fec:	4606      	mov	r6, r0
   b7fee:	2800      	cmp	r0, #0
   b7ff0:	d1e7      	bne.n	b7fc2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7ff2:	a801      	add	r0, sp, #4
   b7ff4:	f7ff fb23 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7ff8:	4630      	mov	r0, r6
   b7ffa:	b002      	add	sp, #8
   b7ffc:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b7ffe:	4669      	mov	r1, sp
   b8000:	4628      	mov	r0, r5
   b8002:	f7ff fafa 	bl	b75fa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8006:	e7e8      	b.n	b7fda <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8008 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b800c:	4617      	mov	r7, r2
   b800e:	b0a1      	sub	sp, #132	; 0x84
   b8010:	4680      	mov	r8, r0
    WiringBleLock lk;
   b8012:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8014:	460e      	mov	r6, r1
    WiringBleLock lk;
   b8016:	f7fe ff6f 	bl	b6ef8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b801a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b801c:	7923      	ldrb	r3, [r4, #4]
   b801e:	b953      	cbnz	r3, b8036 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b8020:	4639      	mov	r1, r7
   b8022:	4640      	mov	r0, r8
   b8024:	f7ff fae9 	bl	b75fa <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b8028:	a80a      	add	r0, sp, #40	; 0x28
   b802a:	f7fe ff73 	bl	b6f14 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b802e:	4640      	mov	r0, r8
   b8030:	b021      	add	sp, #132	; 0x84
   b8032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8036:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b8038:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b803c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b8040:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b8042:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b8046:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b804a:	9b03      	ldr	r3, [sp, #12]
   b804c:	429d      	cmp	r5, r3
   b804e:	d021      	beq.n	b8094 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b8050:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b8054:	4658      	mov	r0, fp
   b8056:	f109 0114 	add.w	r1, r9, #20
   b805a:	f7fe fffa 	bl	b7052 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b805e:	b1b8      	cbz	r0, b8090 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b8060:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b8064:	4650      	mov	r0, sl
   b8066:	f7fe fff4 	bl	b7052 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b806a:	b188      	cbz	r0, b8090 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b806c:	6823      	ldr	r3, [r4, #0]
   b806e:	f8d9 2000 	ldr.w	r2, [r9]
   b8072:	4053      	eors	r3, r2
   b8074:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b8078:	d10a      	bne.n	b8090 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b807a:	2220      	movs	r2, #32
   b807c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b8080:	4a5e      	ldr	r2, [pc, #376]	; (b81fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b8082:	9200      	str	r2, [sp, #0]
   b8084:	aa15      	add	r2, sp, #84	; 0x54
   b8086:	495e      	ldr	r1, [pc, #376]	; (b8200 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b8088:	2032      	movs	r0, #50	; 0x32
   b808a:	f7fe fcd9 	bl	b6a40 <log_message>
   b808e:	e7c7      	b.n	b8020 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b8090:	3508      	adds	r5, #8
   b8092:	e7da      	b.n	b804a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b8094:	4650      	mov	r0, sl
   b8096:	f7fe ffad 	bl	b6ff4 <_ZNK8particle7BleUuid7isValidEv>
   b809a:	b960      	cbnz	r0, b80b6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b809c:	4959      	ldr	r1, [pc, #356]	; (b8204 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b809e:	2201      	movs	r2, #1
   b80a0:	a815      	add	r0, sp, #84	; 0x54
   b80a2:	ad15      	add	r5, sp, #84	; 0x54
   b80a4:	f7fe ff7e 	bl	b6fa4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b80a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b80aa:	46d4      	mov	ip, sl
   b80ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b80b0:	682b      	ldr	r3, [r5, #0]
   b80b2:	f8cc 3000 	str.w	r3, [ip]
   b80b6:	6833      	ldr	r3, [r6, #0]
   b80b8:	e9d3 5300 	ldrd	r5, r3, [r3]
   b80bc:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b80c0:	455d      	cmp	r5, fp
   b80c2:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b80c4:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b80c6:	d06e      	beq.n	b81a6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b80c8:	f855 0b08 	ldr.w	r0, [r5], #8
   b80cc:	f7fe ffc1 	bl	b7052 <_ZNK8particle7BleUuideqERKS0_>
   b80d0:	2800      	cmp	r0, #0
   b80d2:	d0f5      	beq.n	b80c0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b80d4:	f104 0a14 	add.w	sl, r4, #20
   b80d8:	4650      	mov	r0, sl
   b80da:	f7fe ff8b 	bl	b6ff4 <_ZNK8particle7BleUuid7isValidEv>
   b80de:	b988      	cbnz	r0, b8104 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b80e0:	4b49      	ldr	r3, [pc, #292]	; (b8208 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b80e2:	4948      	ldr	r1, [pc, #288]	; (b8204 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b80e4:	881a      	ldrh	r2, [r3, #0]
   b80e6:	3201      	adds	r2, #1
   b80e8:	b292      	uxth	r2, r2
   b80ea:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b80ec:	a815      	add	r0, sp, #84	; 0x54
   b80ee:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b80f0:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b80f2:	f7fe ff76 	bl	b6fe2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b80f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b80f8:	46d4      	mov	ip, sl
   b80fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b80fe:	682b      	ldr	r3, [r5, #0]
   b8100:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b8104:	4b41      	ldr	r3, [pc, #260]	; (b820c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b8106:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b8108:	2228      	movs	r2, #40	; 0x28
   b810a:	2100      	movs	r1, #0
   b810c:	a816      	add	r0, sp, #88	; 0x58
   b810e:	f002 fa99 	bl	ba644 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b8112:	4651      	mov	r1, sl
   b8114:	a804      	add	r0, sp, #16
   b8116:	f7fe ff7f 	bl	b7018 <_ZN8particle7BleUuid7halUUIDEv>
   b811a:	ab04      	add	r3, sp, #16
   b811c:	aa18      	add	r2, sp, #96	; 0x60
   b811e:	f10d 0c20 	add.w	ip, sp, #32
   b8122:	6818      	ldr	r0, [r3, #0]
   b8124:	6859      	ldr	r1, [r3, #4]
   b8126:	4615      	mov	r5, r2
   b8128:	c503      	stmia	r5!, {r0, r1}
   b812a:	3308      	adds	r3, #8
   b812c:	4563      	cmp	r3, ip
   b812e:	462a      	mov	r2, r5
   b8130:	d1f7      	bne.n	b8122 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b8132:	6818      	ldr	r0, [r3, #0]
   b8134:	6028      	str	r0, [r5, #0]
    return value_;
   b8136:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b8138:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b813c:	f8d9 3000 	ldr.w	r3, [r9]
   b8140:	8a9b      	ldrh	r3, [r3, #20]
   b8142:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b8146:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8148:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b814a:	4b31      	ldr	r3, [pc, #196]	; (b8210 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b814c:	2200      	movs	r2, #0
   b814e:	1da1      	adds	r1, r4, #6
   b8150:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b8152:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8156:	f7fe fa2b 	bl	b65b0 <hal_ble_gatt_server_add_characteristic>
   b815a:	2800      	cmp	r0, #0
   b815c:	f47f af60 	bne.w	b8020 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b8160:	2301      	movs	r3, #1
   b8162:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b8164:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b8166:	4639      	mov	r1, r7
        return characteristics_;
   b8168:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b816a:	a80d      	add	r0, sp, #52	; 0x34
   b816c:	f7ff fa45 	bl	b75fa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8170:	4620      	mov	r0, r4
   b8172:	a90d      	add	r1, sp, #52	; 0x34
   b8174:	f7ff ff1b 	bl	b7fae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b8178:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b817a:	a80e      	add	r0, sp, #56	; 0x38
   b817c:	f7ff fa5f 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8180:	2c00      	cmp	r4, #0
   b8182:	f47f af4d 	bne.w	b8020 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b8186:	2320      	movs	r3, #32
   b8188:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b818c:	4b21      	ldr	r3, [pc, #132]	; (b8214 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b818e:	9300      	str	r3, [sp, #0]
   b8190:	aa0d      	add	r2, sp, #52	; 0x34
   b8192:	4623      	mov	r3, r4
   b8194:	e777      	b.n	b8086 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b8196:	4639      	mov	r1, r7
   b8198:	4640      	mov	r0, r8
   b819a:	f7ff fa2e 	bl	b75fa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b819e:	a80c      	add	r0, sp, #48	; 0x30
   b81a0:	f7ff fa4d 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b81a4:	e740      	b.n	b8028 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b81a6:	a80b      	add	r0, sp, #44	; 0x2c
   b81a8:	f7ff f886 	bl	b72b8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b81ac:	4651      	mov	r1, sl
   b81ae:	a815      	add	r0, sp, #84	; 0x54
   b81b0:	f7fe ff32 	bl	b7018 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b81b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b81b6:	2300      	movs	r3, #0
   b81b8:	3214      	adds	r2, #20
   b81ba:	a915      	add	r1, sp, #84	; 0x54
   b81bc:	2001      	movs	r0, #1
   b81be:	f7fe f9cf 	bl	b6560 <hal_ble_gatt_server_add_service>
   b81c2:	2800      	cmp	r0, #0
   b81c4:	d1e7      	bne.n	b8196 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b81c6:	6835      	ldr	r5, [r6, #0]
   b81c8:	a90b      	add	r1, sp, #44	; 0x2c
   b81ca:	a80d      	add	r0, sp, #52	; 0x34
   b81cc:	f7ff fa23 	bl	b7616 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b81d0:	4628      	mov	r0, r5
   b81d2:	a90d      	add	r1, sp, #52	; 0x34
   b81d4:	f7ff fe7c 	bl	b7ed0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b81d8:	4605      	mov	r5, r0
   b81da:	a80e      	add	r0, sp, #56	; 0x38
   b81dc:	f7ff fa2f 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b81e0:	2d00      	cmp	r5, #0
   b81e2:	d0d8      	beq.n	b8196 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b81e4:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b81e6:	6853      	ldr	r3, [r2, #4]
   b81e8:	6812      	ldr	r2, [r2, #0]
   b81ea:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b81ee:	3b01      	subs	r3, #1
   b81f0:	a80c      	add	r0, sp, #48	; 0x30
   b81f2:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b81f6:	f7ff fa22 	bl	b763e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b81fa:	e76b      	b.n	b80d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b81fc:	000bb40f 	.word	0x000bb40f
   b8200:	000bb36e 	.word	0x000bb36e
   b8204:	000bb4d6 	.word	0x000bb4d6
   b8208:	2003e6b4 	.word	0x2003e6b4
   b820c:	002c0003 	.word	0x002c0003
   b8210:	000b7469 	.word	0x000b7469
   b8214:	000bb43a 	.word	0x000bb43a

000b8218 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b8218:	4802      	ldr	r0, [pc, #8]	; (b8224 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b821a:	2300      	movs	r3, #0
   b821c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b821e:	f7fe b9ef 	b.w	b6600 <os_mutex_recursive_create>
   b8222:	bf00      	nop
   b8224:	2003e6b8 	.word	0x2003e6b8

000b8228 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8228:	2200      	movs	r2, #0
   b822a:	6840      	ldr	r0, [r0, #4]
   b822c:	4611      	mov	r1, r2
   b822e:	f7fe bcdf 	b.w	b6bf0 <network_listening>

000b8232 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8232:	2200      	movs	r2, #0
   b8234:	6840      	ldr	r0, [r0, #4]
   b8236:	4611      	mov	r1, r2
   b8238:	f7fe bd02 	b.w	b6c40 <network_get_listen_timeout>

000b823c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b823c:	6840      	ldr	r0, [r0, #4]
   b823e:	2200      	movs	r2, #0
   b8240:	f7fe bcf6 	b.w	b6c30 <network_set_listen_timeout>

000b8244 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8244:	6840      	ldr	r0, [r0, #4]
   b8246:	2200      	movs	r2, #0
   b8248:	f081 0101 	eor.w	r1, r1, #1
   b824c:	f7fe bcc8 	b.w	b6be0 <network_listen>

000b8250 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8250:	2300      	movs	r3, #0
   b8252:	6840      	ldr	r0, [r0, #4]
   b8254:	461a      	mov	r2, r3
   b8256:	4619      	mov	r1, r3
   b8258:	f7fe bcba 	b.w	b6bd0 <network_off>

000b825c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b825c:	2300      	movs	r3, #0
   b825e:	6840      	ldr	r0, [r0, #4]
   b8260:	461a      	mov	r2, r3
   b8262:	4619      	mov	r1, r3
   b8264:	f7fe bcac 	b.w	b6bc0 <network_on>

000b8268 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8268:	2200      	movs	r2, #0
   b826a:	6840      	ldr	r0, [r0, #4]
   b826c:	4611      	mov	r1, r2
   b826e:	f7fe bc9f 	b.w	b6bb0 <network_ready>

000b8272 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8272:	2200      	movs	r2, #0
   b8274:	6840      	ldr	r0, [r0, #4]
   b8276:	4611      	mov	r1, r2
   b8278:	f7fe bc8a 	b.w	b6b90 <network_connecting>

000b827c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b827c:	6840      	ldr	r0, [r0, #4]
   b827e:	2200      	movs	r2, #0
   b8280:	2102      	movs	r1, #2
   b8282:	f7fe bc8d 	b.w	b6ba0 <network_disconnect>

000b8286 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8286:	2300      	movs	r3, #0
   b8288:	6840      	ldr	r0, [r0, #4]
   b828a:	461a      	mov	r2, r3
   b828c:	f7fe bc78 	b.w	b6b80 <network_connect>

000b8290 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8290:	4b02      	ldr	r3, [pc, #8]	; (b829c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8292:	2203      	movs	r2, #3
   b8294:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b8296:	4a02      	ldr	r2, [pc, #8]	; (b82a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8298:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b829a:	4770      	bx	lr
   b829c:	2003e6c0 	.word	0x2003e6c0
   b82a0:	000bb500 	.word	0x000bb500

000b82a4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b82a4:	4770      	bx	lr

000b82a6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b82a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b82a8:	4606      	mov	r6, r0
   b82aa:	4615      	mov	r5, r2
   b82ac:	460c      	mov	r4, r1
   b82ae:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b82b0:	42bc      	cmp	r4, r7
   b82b2:	d006      	beq.n	b82c2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b82b4:	6833      	ldr	r3, [r6, #0]
   b82b6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b82ba:	689b      	ldr	r3, [r3, #8]
   b82bc:	4630      	mov	r0, r6
   b82be:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b82c0:	e7f6      	b.n	b82b0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b82c2:	4628      	mov	r0, r5
   b82c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b82c6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b82c6:	7c00      	ldrb	r0, [r0, #16]
   b82c8:	2200      	movs	r2, #0
   b82ca:	f7fe ba39 	b.w	b6740 <hal_i2c_write>

000b82ce <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b82ce:	7c00      	ldrb	r0, [r0, #16]
   b82d0:	2100      	movs	r1, #0
   b82d2:	f7fe ba3d 	b.w	b6750 <hal_i2c_available>

000b82d6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b82d6:	7c00      	ldrb	r0, [r0, #16]
   b82d8:	2100      	movs	r1, #0
   b82da:	f7fe ba41 	b.w	b6760 <hal_i2c_read>

000b82de <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b82de:	7c00      	ldrb	r0, [r0, #16]
   b82e0:	2100      	movs	r1, #0
   b82e2:	f7fe ba45 	b.w	b6770 <hal_i2c_peek>

000b82e6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b82e6:	7c00      	ldrb	r0, [r0, #16]
   b82e8:	2100      	movs	r1, #0
   b82ea:	f7fe ba49 	b.w	b6780 <hal_i2c_flush>

000b82ee <_ZN7TwoWireD0Ev>:
   b82ee:	b510      	push	{r4, lr}
   b82f0:	2114      	movs	r1, #20
   b82f2:	4604      	mov	r4, r0
   b82f4:	f7fb fed3 	bl	b409e <_ZdlPvj>
   b82f8:	4620      	mov	r0, r4
   b82fa:	bd10      	pop	{r4, pc}

000b82fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b82fc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b82fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8302:	4604      	mov	r4, r0
   b8304:	4608      	mov	r0, r1
   b8306:	2100      	movs	r1, #0
   b8308:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b830c:	4b03      	ldr	r3, [pc, #12]	; (b831c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b830e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8310:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b8312:	4611      	mov	r1, r2
   b8314:	f7fe fa44 	bl	b67a0 <hal_i2c_init>
}
   b8318:	4620      	mov	r0, r4
   b831a:	bd10      	pop	{r4, pc}
   b831c:	000bb53c 	.word	0x000bb53c

000b8320 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8320:	2300      	movs	r3, #0
   b8322:	7c00      	ldrb	r0, [r0, #16]
   b8324:	461a      	mov	r2, r3
   b8326:	4619      	mov	r1, r3
   b8328:	f7fe b9f2 	b.w	b6710 <hal_i2c_begin>

000b832c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b832c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b832e:	2200      	movs	r2, #0
   b8330:	2314      	movs	r3, #20
   b8332:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b8336:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b833a:	780b      	ldrb	r3, [r1, #0]
   b833c:	f88d 3008 	strb.w	r3, [sp, #8]
   b8340:	684b      	ldr	r3, [r1, #4]
   b8342:	9303      	str	r3, [sp, #12]
   b8344:	68cb      	ldr	r3, [r1, #12]
   b8346:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b8348:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b834a:	7a0b      	ldrb	r3, [r1, #8]
   b834c:	9305      	str	r3, [sp, #20]
   b834e:	a901      	add	r1, sp, #4
   b8350:	f7fe fa2e 	bl	b67b0 <hal_i2c_request_ex>
}
   b8354:	b007      	add	sp, #28
   b8356:	f85d fb04 	ldr.w	pc, [sp], #4

000b835a <_ZN7TwoWire11requestFromEhjh>:
{
   b835a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b835c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b835e:	f88d 1000 	strb.w	r1, [sp]
   b8362:	f04f 0164 	mov.w	r1, #100	; 0x64
   b8366:	9103      	str	r1, [sp, #12]
   b8368:	bf18      	it	ne
   b836a:	2301      	movne	r3, #1
   b836c:	4669      	mov	r1, sp
    size_ = size;
   b836e:	9201      	str	r2, [sp, #4]
   b8370:	f88d 3008 	strb.w	r3, [sp, #8]
   b8374:	f7ff ffda 	bl	b832c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b8378:	b005      	add	sp, #20
   b837a:	f85d fb04 	ldr.w	pc, [sp], #4

000b837e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b837e:	2301      	movs	r3, #1
   b8380:	f7ff bfeb 	b.w	b835a <_ZN7TwoWire11requestFromEhjh>

000b8384 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b8384:	7c00      	ldrb	r0, [r0, #16]
   b8386:	2200      	movs	r2, #0
   b8388:	f7fe b9ca 	b.w	b6720 <hal_i2c_begin_transmission>

000b838c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b838c:	b2c9      	uxtb	r1, r1
   b838e:	f7ff bff9 	b.w	b8384 <_ZN7TwoWire17beginTransmissionEh>

000b8392 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8392:	7c00      	ldrb	r0, [r0, #16]
   b8394:	2200      	movs	r2, #0
   b8396:	f7fe b9cb 	b.w	b6730 <hal_i2c_end_transmission>

000b839a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b839a:	2101      	movs	r1, #1
   b839c:	f7ff bff9 	b.w	b8392 <_ZN7TwoWire15endTransmissionEh>

000b83a0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b83a0:	4770      	bx	lr

000b83a2 <_ZN9IPAddressD0Ev>:
   b83a2:	b510      	push	{r4, lr}
   b83a4:	2118      	movs	r1, #24
   b83a6:	4604      	mov	r4, r0
   b83a8:	f7fb fe79 	bl	b409e <_ZdlPvj>
   b83ac:	4620      	mov	r0, r4
   b83ae:	bd10      	pop	{r4, pc}

000b83b0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b83b0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b83b2:	7d03      	ldrb	r3, [r0, #20]
   b83b4:	2b06      	cmp	r3, #6
{
   b83b6:	b08d      	sub	sp, #52	; 0x34
   b83b8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b83ba:	f100 0704 	add.w	r7, r0, #4
   b83be:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b83c2:	d012      	beq.n	b83ea <_ZNK9IPAddress7printToER5Print+0x3a>
   b83c4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b83c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b83cc:	220a      	movs	r2, #10
   b83ce:	4630      	mov	r0, r6
   b83d0:	f000 f979 	bl	b86c6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b83d4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b83d6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b83d8:	d019      	beq.n	b840e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b83da:	2c00      	cmp	r4, #0
   b83dc:	d0f4      	beq.n	b83c8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b83de:	212e      	movs	r1, #46	; 0x2e
   b83e0:	4630      	mov	r0, r6
   b83e2:	f000 f951 	bl	b8688 <_ZN5Print5printEc>
   b83e6:	4404      	add	r4, r0
   b83e8:	e7ee      	b.n	b83c8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b83ea:	232f      	movs	r3, #47	; 0x2f
   b83ec:	466a      	mov	r2, sp
   b83ee:	4639      	mov	r1, r7
   b83f0:	200a      	movs	r0, #10
		buf[0] = 0;
   b83f2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b83f6:	f7fe f9eb 	bl	b67d0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b83fa:	4668      	mov	r0, sp
   b83fc:	f002 f96a 	bl	ba6d4 <strlen>
   b8400:	6833      	ldr	r3, [r6, #0]
   b8402:	4602      	mov	r2, r0
   b8404:	68db      	ldr	r3, [r3, #12]
   b8406:	4669      	mov	r1, sp
   b8408:	4630      	mov	r0, r6
   b840a:	4798      	blx	r3
   b840c:	4604      	mov	r4, r0
    }
    return n;
}
   b840e:	4620      	mov	r0, r4
   b8410:	b00d      	add	sp, #52	; 0x34
   b8412:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8414 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8414:	b510      	push	{r4, lr}
   b8416:	4b05      	ldr	r3, [pc, #20]	; (b842c <_ZN9IPAddressC1Ev+0x18>)
   b8418:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b841a:	2211      	movs	r2, #17
   b841c:	f840 3b04 	str.w	r3, [r0], #4
   b8420:	2100      	movs	r1, #0
   b8422:	f002 f90f 	bl	ba644 <memset>
}
   b8426:	4620      	mov	r0, r4
   b8428:	bd10      	pop	{r4, pc}
   b842a:	bf00      	nop
   b842c:	000bb564 	.word	0x000bb564

000b8430 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8430:	4603      	mov	r3, r0
   b8432:	4a07      	ldr	r2, [pc, #28]	; (b8450 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8434:	b510      	push	{r4, lr}
   b8436:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b843a:	f101 0210 	add.w	r2, r1, #16
   b843e:	f851 4b04 	ldr.w	r4, [r1], #4
   b8442:	f843 4b04 	str.w	r4, [r3], #4
   b8446:	4291      	cmp	r1, r2
   b8448:	d1f9      	bne.n	b843e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b844a:	780a      	ldrb	r2, [r1, #0]
   b844c:	701a      	strb	r2, [r3, #0]
}
   b844e:	bd10      	pop	{r4, pc}
   b8450:	000bb564 	.word	0x000bb564

000b8454 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b8454:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b8456:	2b04      	cmp	r3, #4
   b8458:	d104      	bne.n	b8464 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b845a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b845c:	3800      	subs	r0, #0
   b845e:	bf18      	it	ne
   b8460:	2001      	movne	r0, #1
   b8462:	4770      	bx	lr
    } else if (version() == 6) {
   b8464:	2b06      	cmp	r3, #6
   b8466:	d107      	bne.n	b8478 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8468:	6843      	ldr	r3, [r0, #4]
   b846a:	b93b      	cbnz	r3, b847c <_ZNK9IPAddresscvbEv+0x28>
   b846c:	6883      	ldr	r3, [r0, #8]
   b846e:	b92b      	cbnz	r3, b847c <_ZNK9IPAddresscvbEv+0x28>
   b8470:	68c3      	ldr	r3, [r0, #12]
   b8472:	b91b      	cbnz	r3, b847c <_ZNK9IPAddresscvbEv+0x28>
   b8474:	6900      	ldr	r0, [r0, #16]
   b8476:	e7f1      	b.n	b845c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b8478:	2000      	movs	r0, #0
   b847a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b847c:	2001      	movs	r0, #1
}
   b847e:	4770      	bx	lr

000b8480 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8480:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8482:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b8486:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b848a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b848e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8492:	2304      	movs	r3, #4
   b8494:	6041      	str	r1, [r0, #4]
   b8496:	7503      	strb	r3, [r0, #20]
}
   b8498:	bd10      	pop	{r4, pc}
	...

000b849c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b849c:	b507      	push	{r0, r1, r2, lr}
   b849e:	4b06      	ldr	r3, [pc, #24]	; (b84b8 <_ZN9IPAddressC1EPKh+0x1c>)
   b84a0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b84a2:	78cb      	ldrb	r3, [r1, #3]
   b84a4:	9300      	str	r3, [sp, #0]
   b84a6:	788b      	ldrb	r3, [r1, #2]
   b84a8:	784a      	ldrb	r2, [r1, #1]
   b84aa:	7809      	ldrb	r1, [r1, #0]
   b84ac:	f7ff ffe8 	bl	b8480 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b84b0:	b003      	add	sp, #12
   b84b2:	f85d fb04 	ldr.w	pc, [sp], #4
   b84b6:	bf00      	nop
   b84b8:	000bb564 	.word	0x000bb564

000b84bc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b84bc:	4b01      	ldr	r3, [pc, #4]	; (b84c4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b84be:	4a02      	ldr	r2, [pc, #8]	; (b84c8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b84c0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b84c2:	4770      	bx	lr
   b84c4:	2003e6c8 	.word	0x2003e6c8
   b84c8:	000bb570 	.word	0x000bb570

000b84cc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b84cc:	2300      	movs	r3, #0
   b84ce:	6840      	ldr	r0, [r0, #4]
   b84d0:	461a      	mov	r2, r3
   b84d2:	f7fe bb55 	b.w	b6b80 <network_connect>

000b84d6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b84d6:	6840      	ldr	r0, [r0, #4]
   b84d8:	2200      	movs	r2, #0
   b84da:	2102      	movs	r1, #2
   b84dc:	f7fe bb60 	b.w	b6ba0 <network_disconnect>

000b84e0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b84e0:	2200      	movs	r2, #0
   b84e2:	6840      	ldr	r0, [r0, #4]
   b84e4:	4611      	mov	r1, r2
   b84e6:	f7fe bb53 	b.w	b6b90 <network_connecting>

000b84ea <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b84ea:	2200      	movs	r2, #0
   b84ec:	6840      	ldr	r0, [r0, #4]
   b84ee:	4611      	mov	r1, r2
   b84f0:	f7fe bb5e 	b.w	b6bb0 <network_ready>

000b84f4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b84f4:	2300      	movs	r3, #0
   b84f6:	6840      	ldr	r0, [r0, #4]
   b84f8:	461a      	mov	r2, r3
   b84fa:	4619      	mov	r1, r3
   b84fc:	f7fe bb60 	b.w	b6bc0 <network_on>

000b8500 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8500:	2300      	movs	r3, #0
   b8502:	6840      	ldr	r0, [r0, #4]
   b8504:	461a      	mov	r2, r3
   b8506:	4619      	mov	r1, r3
   b8508:	f7fe bb62 	b.w	b6bd0 <network_off>

000b850c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b850c:	6840      	ldr	r0, [r0, #4]
   b850e:	2100      	movs	r1, #0
   b8510:	f7fe bb9e 	b.w	b6c50 <network_is_on>

000b8514 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8514:	6840      	ldr	r0, [r0, #4]
   b8516:	2100      	movs	r1, #0
   b8518:	f7fe bba2 	b.w	b6c60 <network_is_off>

000b851c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b851c:	6840      	ldr	r0, [r0, #4]
   b851e:	2200      	movs	r2, #0
   b8520:	f081 0101 	eor.w	r1, r1, #1
   b8524:	f7fe bb5c 	b.w	b6be0 <network_listen>

000b8528 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8528:	6840      	ldr	r0, [r0, #4]
   b852a:	2200      	movs	r2, #0
   b852c:	f7fe bb80 	b.w	b6c30 <network_set_listen_timeout>

000b8530 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b8530:	2200      	movs	r2, #0
   b8532:	6840      	ldr	r0, [r0, #4]
   b8534:	4611      	mov	r1, r2
   b8536:	f7fe bb83 	b.w	b6c40 <network_get_listen_timeout>

000b853a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b853a:	2200      	movs	r2, #0
   b853c:	6840      	ldr	r0, [r0, #4]
   b853e:	4611      	mov	r1, r2
   b8540:	f7fe bb56 	b.w	b6bf0 <network_listening>

000b8544 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b8544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8548:	b095      	sub	sp, #84	; 0x54
   b854a:	4614      	mov	r4, r2
   b854c:	460d      	mov	r5, r1
   b854e:	4607      	mov	r7, r0
    IPAddress addr;
   b8550:	f7ff ff60 	bl	b8414 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8554:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b8556:	221c      	movs	r2, #28
   b8558:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b855a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b855c:	f002 f872 	bl	ba644 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8560:	2340      	movs	r3, #64	; 0x40
   b8562:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8564:	4620      	mov	r0, r4
   b8566:	466b      	mov	r3, sp
   b8568:	aa0c      	add	r2, sp, #48	; 0x30
   b856a:	2100      	movs	r1, #0
   b856c:	f7fe f950 	bl	b6810 <netdb_getaddrinfo>
    if (!r) {
   b8570:	4604      	mov	r4, r0
   b8572:	2800      	cmp	r0, #0
   b8574:	d14b      	bne.n	b860e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8576:	4602      	mov	r2, r0
   b8578:	2101      	movs	r1, #1
   b857a:	6868      	ldr	r0, [r5, #4]
   b857c:	f7fe fb18 	bl	b6bb0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8580:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8582:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8584:	4622      	mov	r2, r4
   b8586:	6868      	ldr	r0, [r5, #4]
   b8588:	f7fe fb12 	bl	b6bb0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b858c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b858e:	4681      	mov	r9, r0
        bool ok = false;
   b8590:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8592:	2e00      	cmp	r6, #0
   b8594:	d03b      	beq.n	b860e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b8596:	2900      	cmp	r1, #0
   b8598:	d139      	bne.n	b860e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b859a:	6873      	ldr	r3, [r6, #4]
   b859c:	2b02      	cmp	r3, #2
   b859e:	d003      	beq.n	b85a8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b85a0:	2b0a      	cmp	r3, #10
   b85a2:	d011      	beq.n	b85c8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b85a4:	69f6      	ldr	r6, [r6, #28]
   b85a6:	e7f4      	b.n	b8592 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b85a8:	f1b8 0f00 	cmp.w	r8, #0
   b85ac:	d0fa      	beq.n	b85a4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b85ae:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b85b0:	a806      	add	r0, sp, #24
   b85b2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b85b4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b85b6:	f7ff ff71 	bl	b849c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b85ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b85bc:	1d3c      	adds	r4, r7, #4
   b85be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b85c0:	682b      	ldr	r3, [r5, #0]
   b85c2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b85c4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b85c6:	e7ed      	b.n	b85a4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b85c8:	f1b9 0f00 	cmp.w	r9, #0
   b85cc:	d0ea      	beq.n	b85a4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b85ce:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b85d0:	2210      	movs	r2, #16
   b85d2:	a801      	add	r0, sp, #4
   b85d4:	f002 f836 	bl	ba644 <memset>
                    a.v = 6;
   b85d8:	2306      	movs	r3, #6
   b85da:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b85de:	ad01      	add	r5, sp, #4
   b85e0:	f104 0308 	add.w	r3, r4, #8
   b85e4:	3418      	adds	r4, #24
   b85e6:	6818      	ldr	r0, [r3, #0]
   b85e8:	6859      	ldr	r1, [r3, #4]
   b85ea:	462a      	mov	r2, r5
   b85ec:	c203      	stmia	r2!, {r0, r1}
   b85ee:	3308      	adds	r3, #8
   b85f0:	42a3      	cmp	r3, r4
   b85f2:	4615      	mov	r5, r2
   b85f4:	d1f7      	bne.n	b85e6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b85f6:	a901      	add	r1, sp, #4
   b85f8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b85fa:	ad07      	add	r5, sp, #28
   b85fc:	f7ff ff18 	bl	b8430 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8602:	1d3c      	adds	r4, r7, #4
   b8604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8606:	682b      	ldr	r3, [r5, #0]
   b8608:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b860a:	4649      	mov	r1, r9
   b860c:	e7ca      	b.n	b85a4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b860e:	9800      	ldr	r0, [sp, #0]
   b8610:	f7fe f8f6 	bl	b6800 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8614:	4638      	mov	r0, r7
   b8616:	b015      	add	sp, #84	; 0x54
   b8618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b861c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b861c:	4b02      	ldr	r3, [pc, #8]	; (b8628 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b861e:	4a03      	ldr	r2, [pc, #12]	; (b862c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8620:	601a      	str	r2, [r3, #0]
   b8622:	2200      	movs	r2, #0
   b8624:	605a      	str	r2, [r3, #4]

} // spark
   b8626:	4770      	bx	lr
   b8628:	2003e6cc 	.word	0x2003e6cc
   b862c:	000bb57c 	.word	0x000bb57c

000b8630 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8632:	4606      	mov	r6, r0
   b8634:	460d      	mov	r5, r1
  size_t n = 0;
   b8636:	188f      	adds	r7, r1, r2
   b8638:	2400      	movs	r4, #0
  while (size--) {
   b863a:	42bd      	cmp	r5, r7
   b863c:	d00c      	beq.n	b8658 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b863e:	6833      	ldr	r3, [r6, #0]
   b8640:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8644:	689b      	ldr	r3, [r3, #8]
   b8646:	4630      	mov	r0, r6
   b8648:	4798      	blx	r3
     if (chunk>=0)
   b864a:	1e03      	subs	r3, r0, #0
   b864c:	db01      	blt.n	b8652 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b864e:	441c      	add	r4, r3
  while (size--) {
   b8650:	e7f3      	b.n	b863a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b8652:	2c00      	cmp	r4, #0
   b8654:	bf08      	it	eq
   b8656:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8658:	4620      	mov	r0, r4
   b865a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b865c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b865c:	b513      	push	{r0, r1, r4, lr}
   b865e:	4604      	mov	r4, r0
    }
   b8660:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b8662:	b159      	cbz	r1, b867c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8664:	9101      	str	r1, [sp, #4]
   b8666:	f002 f835 	bl	ba6d4 <strlen>
   b866a:	6823      	ldr	r3, [r4, #0]
   b866c:	9901      	ldr	r1, [sp, #4]
   b866e:	68db      	ldr	r3, [r3, #12]
   b8670:	4602      	mov	r2, r0
   b8672:	4620      	mov	r0, r4
    }
   b8674:	b002      	add	sp, #8
   b8676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b867a:	4718      	bx	r3
    }
   b867c:	b002      	add	sp, #8
   b867e:	bd10      	pop	{r4, pc}

000b8680 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8680:	b508      	push	{r3, lr}
  return write(str);
   b8682:	f7ff ffeb 	bl	b865c <_ZN5Print5writeEPKc>
}
   b8686:	bd08      	pop	{r3, pc}

000b8688 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b8688:	6803      	ldr	r3, [r0, #0]
   b868a:	689b      	ldr	r3, [r3, #8]
   b868c:	4718      	bx	r3

000b868e <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   b868e:	680a      	ldr	r2, [r1, #0]
 {
   b8690:	460b      	mov	r3, r1
   return x.printTo(*this);
   b8692:	6812      	ldr	r2, [r2, #0]
   b8694:	4601      	mov	r1, r0
   b8696:	4618      	mov	r0, r3
   b8698:	4710      	bx	r2

000b869a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b869a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b869c:	210d      	movs	r1, #13
{
   b869e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b86a0:	f7ff fff2 	bl	b8688 <_ZN5Print5printEc>
  n += print('\n');
   b86a4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b86a6:	4604      	mov	r4, r0
  n += print('\n');
   b86a8:	4628      	mov	r0, r5
   b86aa:	f7ff ffed 	bl	b8688 <_ZN5Print5printEc>
  return n;
}
   b86ae:	4420      	add	r0, r4
   b86b0:	bd38      	pop	{r3, r4, r5, pc}

000b86b2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b86b2:	b538      	push	{r3, r4, r5, lr}
   b86b4:	4605      	mov	r5, r0
  return write(str);
   b86b6:	f7ff ffd1 	bl	b865c <_ZN5Print5writeEPKc>
   b86ba:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b86bc:	4628      	mov	r0, r5
   b86be:	f7ff ffec 	bl	b869a <_ZN5Print7printlnEv>
  return n;
}
   b86c2:	4420      	add	r0, r4
   b86c4:	bd38      	pop	{r3, r4, r5, pc}

000b86c6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b86c6:	b530      	push	{r4, r5, lr}
   b86c8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b86ca:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b86cc:	2a01      	cmp	r2, #1
  *str = '\0';
   b86ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b86d2:	bf98      	it	ls
   b86d4:	220a      	movls	r2, #10
   b86d6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b86d8:	460d      	mov	r5, r1
   b86da:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b86de:	fb01 5312 	mls	r3, r1, r2, r5
   b86e2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b86e6:	2b09      	cmp	r3, #9
   b86e8:	bf94      	ite	ls
   b86ea:	3330      	addls	r3, #48	; 0x30
   b86ec:	3337      	addhi	r3, #55	; 0x37
   b86ee:	b2db      	uxtb	r3, r3
  } while(n);
   b86f0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b86f2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b86f6:	d9ef      	bls.n	b86d8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b86f8:	4621      	mov	r1, r4
   b86fa:	f7ff ffaf 	bl	b865c <_ZN5Print5writeEPKc>
}
   b86fe:	b00b      	add	sp, #44	; 0x2c
   b8700:	bd30      	pop	{r4, r5, pc}

000b8702 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b8702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8706:	b086      	sub	sp, #24
   b8708:	af00      	add	r7, sp, #0
   b870a:	4605      	mov	r5, r0
   b870c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b870e:	1d38      	adds	r0, r7, #4
   b8710:	2114      	movs	r1, #20
{
   b8712:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8714:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8716:	f7fe fac3 	bl	b6ca0 <vsnprintf>

    if (n<bufsize)
   b871a:	2813      	cmp	r0, #19
   b871c:	d80e      	bhi.n	b873c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b871e:	1d39      	adds	r1, r7, #4
   b8720:	4628      	mov	r0, r5
   b8722:	f7ff ff9b 	bl	b865c <_ZN5Print5writeEPKc>
   b8726:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8728:	b11e      	cbz	r6, b8732 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b872a:	4628      	mov	r0, r5
   b872c:	f7ff ffb5 	bl	b869a <_ZN5Print7printlnEv>
   b8730:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8732:	4620      	mov	r0, r4
   b8734:	3718      	adds	r7, #24
   b8736:	46bd      	mov	sp, r7
   b8738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b873c:	f100 0308 	add.w	r3, r0, #8
   b8740:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8744:	46e8      	mov	r8, sp
        char bigger[n+1];
   b8746:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b874a:	4622      	mov	r2, r4
   b874c:	1c41      	adds	r1, r0, #1
   b874e:	683b      	ldr	r3, [r7, #0]
   b8750:	4668      	mov	r0, sp
   b8752:	f7fe faa5 	bl	b6ca0 <vsnprintf>
  return write(str);
   b8756:	4669      	mov	r1, sp
   b8758:	4628      	mov	r0, r5
   b875a:	f7ff ff7f 	bl	b865c <_ZN5Print5writeEPKc>
   b875e:	4604      	mov	r4, r0
   b8760:	46c5      	mov	sp, r8
   b8762:	e7e1      	b.n	b8728 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8764 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b8764:	4b01      	ldr	r3, [pc, #4]	; (b876c <_GLOBAL__sub_I_RGB+0x8>)
   b8766:	2200      	movs	r2, #0
   b8768:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b876a:	4770      	bx	lr
   b876c:	2003e6d4 	.word	0x2003e6d4

000b8770 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b8770:	2100      	movs	r1, #0
   b8772:	f7fe b8cd 	b.w	b6910 <hal_spi_release>

000b8776 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b8776:	2100      	movs	r1, #0
   b8778:	f7fe b8c2 	b.w	b6900 <hal_spi_acquire>

000b877c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b877c:	b510      	push	{r4, lr}
   b877e:	4604      	mov	r4, r0
   b8780:	4608      	mov	r0, r1
{
    _spi = spi;
   b8782:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b8784:	f7fe f8a4 	bl	b68d0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b8788:	2300      	movs	r3, #0
   b878a:	6063      	str	r3, [r4, #4]
}
   b878c:	4620      	mov	r0, r4
   b878e:	bd10      	pop	{r4, pc}

000b8790 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b8790:	b513      	push	{r0, r1, r4, lr}
   b8792:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b8794:	7800      	ldrb	r0, [r0, #0]
   b8796:	f7ff ffee 	bl	b8776 <_ZN8SPIClass4lockEv.isra.0>
   b879a:	b958      	cbnz	r0, b87b4 <_ZN8SPIClass5beginEv+0x24>
   b879c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b879e:	9001      	str	r0, [sp, #4]
   b87a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b87a4:	f7fe f86c 	bl	b6880 <hal_spi_begin>
        unlock();
   b87a8:	9801      	ldr	r0, [sp, #4]
    }
}
   b87aa:	b002      	add	sp, #8
   b87ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b87b0:	f7ff bfde 	b.w	b8770 <_ZN8SPIClass6unlockEv.isra.0>
   b87b4:	b002      	add	sp, #8
   b87b6:	bd10      	pop	{r4, pc}

000b87b8 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b87b8:	b513      	push	{r0, r1, r4, lr}
   b87ba:	4604      	mov	r4, r0
    if (!lock())
   b87bc:	7800      	ldrb	r0, [r0, #0]
{
   b87be:	9101      	str	r1, [sp, #4]
    if (!lock())
   b87c0:	f7ff ffd9 	bl	b8776 <_ZN8SPIClass4lockEv.isra.0>
   b87c4:	9901      	ldr	r1, [sp, #4]
   b87c6:	b948      	cbnz	r0, b87dc <_ZN8SPIClass11setBitOrderEh+0x24>
   b87c8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b87ca:	9001      	str	r0, [sp, #4]
   b87cc:	f7fe f860 	bl	b6890 <hal_spi_set_bit_order>
        unlock();
   b87d0:	9801      	ldr	r0, [sp, #4]
    }
}
   b87d2:	b002      	add	sp, #8
   b87d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b87d8:	f7ff bfca 	b.w	b8770 <_ZN8SPIClass6unlockEv.isra.0>
   b87dc:	b002      	add	sp, #8
   b87de:	bd10      	pop	{r4, pc}

000b87e0 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b87e0:	b513      	push	{r0, r1, r4, lr}
   b87e2:	4604      	mov	r4, r0
    if (!lock())
   b87e4:	7800      	ldrb	r0, [r0, #0]
{
   b87e6:	9101      	str	r1, [sp, #4]
    if (!lock())
   b87e8:	f7ff ffc5 	bl	b8776 <_ZN8SPIClass4lockEv.isra.0>
   b87ec:	9901      	ldr	r1, [sp, #4]
   b87ee:	b948      	cbnz	r0, b8804 <_ZN8SPIClass11setDataModeEh+0x24>
   b87f0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b87f2:	9001      	str	r0, [sp, #4]
   b87f4:	f7fe f854 	bl	b68a0 <hal_spi_set_data_mode>
        unlock();
   b87f8:	9801      	ldr	r0, [sp, #4]
    }
}
   b87fa:	b002      	add	sp, #8
   b87fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8800:	f7ff bfb6 	b.w	b8770 <_ZN8SPIClass6unlockEv.isra.0>
   b8804:	b002      	add	sp, #8
   b8806:	bd10      	pop	{r4, pc}

000b8808 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b8808:	0840      	lsrs	r0, r0, #1
{
   b880a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b880c:	6018      	str	r0, [r3, #0]
   b880e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b8810:	6818      	ldr	r0, [r3, #0]
   b8812:	4288      	cmp	r0, r1
   b8814:	b2e5      	uxtb	r5, r4
   b8816:	d906      	bls.n	b8826 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b8818:	3401      	adds	r4, #1
   b881a:	2c08      	cmp	r4, #8
   b881c:	d002      	beq.n	b8824 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b881e:	0840      	lsrs	r0, r0, #1
   b8820:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b8822:	e7f5      	b.n	b8810 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b8824:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b8826:	4b02      	ldr	r3, [pc, #8]	; (b8830 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b8828:	5d5b      	ldrb	r3, [r3, r5]
   b882a:	7013      	strb	r3, [r2, #0]
}
   b882c:	bd30      	pop	{r4, r5, pc}
   b882e:	bf00      	nop
   b8830:	000bb5b0 	.word	0x000bb5b0

000b8834 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b8834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8838:	b088      	sub	sp, #32
    unsigned clock = 0;
   b883a:	2300      	movs	r3, #0
{
   b883c:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b883e:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b8840:	9302      	str	r3, [sp, #8]
{
   b8842:	460e      	mov	r6, r1
   b8844:	4617      	mov	r7, r2
    if (!lock())
   b8846:	f7ff ff96 	bl	b8776 <_ZN8SPIClass4lockEv.isra.0>
   b884a:	4605      	mov	r5, r0
   b884c:	bb00      	cbnz	r0, b8890 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b884e:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b8852:	4601      	mov	r1, r0
   b8854:	2214      	movs	r2, #20
   b8856:	a803      	add	r0, sp, #12
   b8858:	f001 fef4 	bl	ba644 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b885c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b885e:	462a      	mov	r2, r5
   b8860:	a903      	add	r1, sp, #12
   b8862:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b8864:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b8868:	f7fe f842 	bl	b68f0 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b886c:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b886e:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b8872:	ab02      	add	r3, sp, #8
   b8874:	f10d 0207 	add.w	r2, sp, #7
   b8878:	fb07 f106 	mul.w	r1, r7, r6
   b887c:	f7ff ffc4 	bl	b8808 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b8880:	7820      	ldrb	r0, [r4, #0]
   b8882:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b8886:	f7fe f813 	bl	b68b0 <hal_spi_set_clock_divider>
        unlock();
   b888a:	7820      	ldrb	r0, [r4, #0]
   b888c:	f7ff ff70 	bl	b8770 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b8890:	9802      	ldr	r0, [sp, #8]
   b8892:	b008      	add	sp, #32
   b8894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8898 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b8898:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b889a:	7800      	ldrb	r0, [r0, #0]
   b889c:	f7fe f810 	bl	b68c0 <hal_spi_transfer>
}
   b88a0:	b2c0      	uxtb	r0, r0
   b88a2:	bd08      	pop	{r3, pc}

000b88a4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b88a4:	b510      	push	{r4, lr}
   b88a6:	4604      	mov	r4, r0
{
	free(buffer);
   b88a8:	6800      	ldr	r0, [r0, #0]
   b88aa:	f7fe f9e9 	bl	b6c80 <free>
}
   b88ae:	4620      	mov	r0, r4
   b88b0:	bd10      	pop	{r4, pc}

000b88b2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b88b2:	b510      	push	{r4, lr}
   b88b4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b88b6:	6800      	ldr	r0, [r0, #0]
   b88b8:	b108      	cbz	r0, b88be <_ZN6String10invalidateEv+0xc>
   b88ba:	f7fe f9e1 	bl	b6c80 <free>
	buffer = NULL;
   b88be:	2300      	movs	r3, #0
	capacity = len = 0;
   b88c0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b88c4:	6023      	str	r3, [r4, #0]
}
   b88c6:	bd10      	pop	{r4, pc}

000b88c8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b88c8:	b538      	push	{r3, r4, r5, lr}
   b88ca:	4604      	mov	r4, r0
   b88cc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b88ce:	6800      	ldr	r0, [r0, #0]
   b88d0:	3101      	adds	r1, #1
   b88d2:	f7fe f9dd 	bl	b6c90 <realloc>
	if (newbuffer) {
   b88d6:	b110      	cbz	r0, b88de <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b88d8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b88dc:	2001      	movs	r0, #1
	}
	return 0;
}
   b88de:	bd38      	pop	{r3, r4, r5, pc}

000b88e0 <_ZN6String7reserveEj>:
{
   b88e0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b88e2:	6803      	ldr	r3, [r0, #0]
{
   b88e4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b88e6:	b123      	cbz	r3, b88f2 <_ZN6String7reserveEj+0x12>
   b88e8:	6843      	ldr	r3, [r0, #4]
   b88ea:	428b      	cmp	r3, r1
   b88ec:	d301      	bcc.n	b88f2 <_ZN6String7reserveEj+0x12>
   b88ee:	2001      	movs	r0, #1
}
   b88f0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b88f2:	4620      	mov	r0, r4
   b88f4:	f7ff ffe8 	bl	b88c8 <_ZN6String12changeBufferEj>
   b88f8:	2800      	cmp	r0, #0
   b88fa:	d0f9      	beq.n	b88f0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b88fc:	68a3      	ldr	r3, [r4, #8]
   b88fe:	2b00      	cmp	r3, #0
   b8900:	d1f5      	bne.n	b88ee <_ZN6String7reserveEj+0xe>
   b8902:	6822      	ldr	r2, [r4, #0]
   b8904:	7013      	strb	r3, [r2, #0]
   b8906:	e7f2      	b.n	b88ee <_ZN6String7reserveEj+0xe>

000b8908 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8908:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b890a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b890c:	4611      	mov	r1, r2
   b890e:	9201      	str	r2, [sp, #4]
{
   b8910:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8912:	f7ff ffe5 	bl	b88e0 <_ZN6String7reserveEj>
   b8916:	9a01      	ldr	r2, [sp, #4]
   b8918:	b928      	cbnz	r0, b8926 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b891a:	4620      	mov	r0, r4
   b891c:	f7ff ffc9 	bl	b88b2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8920:	4620      	mov	r0, r4
   b8922:	b003      	add	sp, #12
   b8924:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8926:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8928:	4629      	mov	r1, r5
   b892a:	6820      	ldr	r0, [r4, #0]
   b892c:	f001 fe62 	bl	ba5f4 <memcpy>
	buffer[len] = 0;
   b8930:	6822      	ldr	r2, [r4, #0]
   b8932:	68a3      	ldr	r3, [r4, #8]
   b8934:	2100      	movs	r1, #0
   b8936:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8938:	e7f2      	b.n	b8920 <_ZN6String4copyEPKcj+0x18>

000b893a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b893a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b893c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b893e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8942:	4604      	mov	r4, r0
	len = 0;
   b8944:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8946:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8948:	b141      	cbz	r1, b895c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b894a:	4608      	mov	r0, r1
   b894c:	9101      	str	r1, [sp, #4]
   b894e:	f001 fec1 	bl	ba6d4 <strlen>
   b8952:	9901      	ldr	r1, [sp, #4]
   b8954:	4602      	mov	r2, r0
   b8956:	4620      	mov	r0, r4
   b8958:	f7ff ffd6 	bl	b8908 <_ZN6String4copyEPKcj>
}
   b895c:	4620      	mov	r0, r4
   b895e:	b002      	add	sp, #8
   b8960:	bd10      	pop	{r4, pc}

000b8962 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b8962:	4288      	cmp	r0, r1
{
   b8964:	b510      	push	{r4, lr}
   b8966:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8968:	d005      	beq.n	b8976 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b896a:	680b      	ldr	r3, [r1, #0]
   b896c:	b12b      	cbz	r3, b897a <_ZN6StringaSERKS_+0x18>
   b896e:	688a      	ldr	r2, [r1, #8]
   b8970:	4619      	mov	r1, r3
   b8972:	f7ff ffc9 	bl	b8908 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8976:	4620      	mov	r0, r4
   b8978:	bd10      	pop	{r4, pc}
	else invalidate();
   b897a:	f7ff ff9a 	bl	b88b2 <_ZN6String10invalidateEv>
   b897e:	e7fa      	b.n	b8976 <_ZN6StringaSERKS_+0x14>

000b8980 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8980:	b510      	push	{r4, lr}
	buffer = NULL;
   b8982:	2300      	movs	r3, #0
String::String(const String &value)
   b8984:	4604      	mov	r4, r0
	capacity = 0;
   b8986:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b898a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b898c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b898e:	f7ff ffe8 	bl	b8962 <_ZN6StringaSERKS_>
}
   b8992:	4620      	mov	r0, r4
   b8994:	bd10      	pop	{r4, pc}

000b8996 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8996:	b513      	push	{r0, r1, r4, lr}
   b8998:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b899a:	b159      	cbz	r1, b89b4 <_ZN6StringaSEPKc+0x1e>
   b899c:	4608      	mov	r0, r1
   b899e:	9101      	str	r1, [sp, #4]
   b89a0:	f001 fe98 	bl	ba6d4 <strlen>
   b89a4:	9901      	ldr	r1, [sp, #4]
   b89a6:	4602      	mov	r2, r0
   b89a8:	4620      	mov	r0, r4
   b89aa:	f7ff ffad 	bl	b8908 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b89ae:	4620      	mov	r0, r4
   b89b0:	b002      	add	sp, #8
   b89b2:	bd10      	pop	{r4, pc}
	else invalidate();
   b89b4:	f7ff ff7d 	bl	b88b2 <_ZN6String10invalidateEv>
   b89b8:	e7f9      	b.n	b89ae <_ZN6StringaSEPKc+0x18>

000b89ba <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b89ba:	b510      	push	{r4, lr}
   b89bc:	4604      	mov	r4, r0
   b89be:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b89c0:	2300      	movs	r3, #0
	capacity = 0;
   b89c2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b89c6:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b89c8:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b89ca:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b89cc:	a901      	add	r1, sp, #4
   b89ce:	f000 fe8f 	bl	b96f0 <itoa>
	*this = buf;
   b89d2:	a901      	add	r1, sp, #4
   b89d4:	4620      	mov	r0, r4
   b89d6:	f7ff ffde 	bl	b8996 <_ZN6StringaSEPKc>
}
   b89da:	4620      	mov	r0, r4
   b89dc:	b00a      	add	sp, #40	; 0x28
   b89de:	bd10      	pop	{r4, pc}

000b89e0 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b89e0:	b510      	push	{r4, lr}
   b89e2:	4604      	mov	r4, r0
   b89e4:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b89e6:	2300      	movs	r3, #0
	capacity = 0;
   b89e8:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b89ec:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b89ee:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b89f0:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b89f2:	a901      	add	r1, sp, #4
   b89f4:	f000 fe13 	bl	b961e <ltoa>
	*this = buf;
   b89f8:	a901      	add	r1, sp, #4
   b89fa:	4620      	mov	r0, r4
   b89fc:	f7ff ffcb 	bl	b8996 <_ZN6StringaSEPKc>
}
   b8a00:	4620      	mov	r0, r4
   b8a02:	b00a      	add	sp, #40	; 0x28
   b8a04:	bd10      	pop	{r4, pc}

000b8a06 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b8a06:	b570      	push	{r4, r5, r6, lr}
   b8a08:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b8a0a:	460e      	mov	r6, r1
   b8a0c:	b909      	cbnz	r1, b8a12 <_ZN6String6concatEPKcj+0xc>
   b8a0e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b8a10:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b8a12:	b16a      	cbz	r2, b8a30 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8a14:	6884      	ldr	r4, [r0, #8]
   b8a16:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b8a18:	4621      	mov	r1, r4
   b8a1a:	f7ff ff61 	bl	b88e0 <_ZN6String7reserveEj>
   b8a1e:	2800      	cmp	r0, #0
   b8a20:	d0f5      	beq.n	b8a0e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8a22:	6828      	ldr	r0, [r5, #0]
   b8a24:	68ab      	ldr	r3, [r5, #8]
   b8a26:	4631      	mov	r1, r6
   b8a28:	4418      	add	r0, r3
   b8a2a:	f001 fe4b 	bl	ba6c4 <strcpy>
	len = newlen;
   b8a2e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b8a30:	2001      	movs	r0, #1
   b8a32:	e7ed      	b.n	b8a10 <_ZN6String6concatEPKcj+0xa>

000b8a34 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b8a34:	688a      	ldr	r2, [r1, #8]
   b8a36:	6809      	ldr	r1, [r1, #0]
   b8a38:	f7ff bfe5 	b.w	b8a06 <_ZN6String6concatEPKcj>

000b8a3c <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b8a3c:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b8a3e:	2300      	movs	r3, #0
	buf[0] = c;
   b8a40:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b8a44:	2201      	movs	r2, #1
   b8a46:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b8a48:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b8a4c:	f7ff ffdb 	bl	b8a06 <_ZN6String6concatEPKcj>
}
   b8a50:	b003      	add	sp, #12
   b8a52:	f85d fb04 	ldr.w	pc, [sp], #4

000b8a56 <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
   b8a56:	b513      	push	{r0, r1, r4, lr}
	char buf[4];
	itoa(num, buf, 10);
   b8a58:	220a      	movs	r2, #10
{
   b8a5a:	4604      	mov	r4, r0
   b8a5c:	4608      	mov	r0, r1
	itoa(num, buf, 10);
   b8a5e:	a901      	add	r1, sp, #4
   b8a60:	f000 fe46 	bl	b96f0 <itoa>
	return concat(buf, strlen(buf));
   b8a64:	a801      	add	r0, sp, #4
   b8a66:	f001 fe35 	bl	ba6d4 <strlen>
   b8a6a:	a901      	add	r1, sp, #4
   b8a6c:	4602      	mov	r2, r0
   b8a6e:	4620      	mov	r0, r4
   b8a70:	f7ff ffc9 	bl	b8a06 <_ZN6String6concatEPKcj>
}
   b8a74:	b002      	add	sp, #8
   b8a76:	bd10      	pop	{r4, pc}

000b8a78 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b8a78:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b8a7a:	688a      	ldr	r2, [r1, #8]
   b8a7c:	6809      	ldr	r1, [r1, #0]
{
   b8a7e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b8a80:	f7ff ffc1 	bl	b8a06 <_ZN6String6concatEPKcj>
   b8a84:	b910      	cbnz	r0, b8a8c <_ZplRK15StringSumHelperRK6String+0x14>
   b8a86:	4620      	mov	r0, r4
   b8a88:	f7ff ff13 	bl	b88b2 <_ZN6String10invalidateEv>
	return a;
}
   b8a8c:	4620      	mov	r0, r4
   b8a8e:	bd10      	pop	{r4, pc}

000b8a90 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b8a90:	b513      	push	{r0, r1, r4, lr}
   b8a92:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8a94:	b929      	cbnz	r1, b8aa2 <_ZplRK15StringSumHelperPKc+0x12>
   b8a96:	4620      	mov	r0, r4
   b8a98:	f7ff ff0b 	bl	b88b2 <_ZN6String10invalidateEv>
	return a;
}
   b8a9c:	4620      	mov	r0, r4
   b8a9e:	b002      	add	sp, #8
   b8aa0:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8aa2:	4608      	mov	r0, r1
   b8aa4:	9101      	str	r1, [sp, #4]
   b8aa6:	f001 fe15 	bl	ba6d4 <strlen>
   b8aaa:	9901      	ldr	r1, [sp, #4]
   b8aac:	4602      	mov	r2, r0
   b8aae:	4620      	mov	r0, r4
   b8ab0:	f7ff ffa9 	bl	b8a06 <_ZN6String6concatEPKcj>
   b8ab4:	2800      	cmp	r0, #0
   b8ab6:	d0ee      	beq.n	b8a96 <_ZplRK15StringSumHelperPKc+0x6>
   b8ab8:	e7f0      	b.n	b8a9c <_ZplRK15StringSumHelperPKc+0xc>

000b8aba <_ZplRK15StringSumHelperh>:
	if (!a.concat(c)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
   b8aba:	b510      	push	{r4, lr}
   b8abc:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   b8abe:	f7ff ffca 	bl	b8a56 <_ZN6String6concatEh>
   b8ac2:	b910      	cbnz	r0, b8aca <_ZplRK15StringSumHelperh+0x10>
   b8ac4:	4620      	mov	r0, r4
   b8ac6:	f7ff fef4 	bl	b88b2 <_ZN6String10invalidateEv>
	return a;
}
   b8aca:	4620      	mov	r0, r4
   b8acc:	bd10      	pop	{r4, pc}

000b8ace <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b8ace:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8ad0:	6882      	ldr	r2, [r0, #8]
   b8ad2:	b93a      	cbnz	r2, b8ae4 <_ZNK6String6equalsEPKc+0x16>
   b8ad4:	b121      	cbz	r1, b8ae0 <_ZNK6String6equalsEPKc+0x12>
   b8ad6:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b8ad8:	fab0 f080 	clz	r0, r0
   b8adc:	0940      	lsrs	r0, r0, #5
   b8ade:	e000      	b.n	b8ae2 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8ae0:	2001      	movs	r0, #1
}
   b8ae2:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b8ae4:	6800      	ldr	r0, [r0, #0]
   b8ae6:	b909      	cbnz	r1, b8aec <_ZNK6String6equalsEPKc+0x1e>
   b8ae8:	7800      	ldrb	r0, [r0, #0]
   b8aea:	e7f5      	b.n	b8ad8 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b8aec:	f001 fde0 	bl	ba6b0 <strcmp>
   b8af0:	e7f2      	b.n	b8ad8 <_ZNK6String6equalsEPKc+0xa>

000b8af2 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b8af2:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b8af4:	6883      	ldr	r3, [r0, #8]
   b8af6:	4293      	cmp	r3, r2
   b8af8:	d907      	bls.n	b8b0a <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b8afa:	6804      	ldr	r4, [r0, #0]
   b8afc:	6809      	ldr	r1, [r1, #0]
   b8afe:	18a0      	adds	r0, r4, r2
   b8b00:	f001 fe0f 	bl	ba722 <strstr>
	if (found == NULL) return -1;
   b8b04:	b108      	cbz	r0, b8b0a <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b8b06:	1b00      	subs	r0, r0, r4
}
   b8b08:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b8b0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8b0e:	e7fb      	b.n	b8b08 <_ZNK6String7indexOfERKS_j+0x16>

000b8b10 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b8b10:	2200      	movs	r2, #0
   b8b12:	f7ff bfee 	b.w	b8af2 <_ZNK6String7indexOfERKS_j>
	...

000b8b18 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b8b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b8b1a:	429a      	cmp	r2, r3
{
   b8b1c:	460f      	mov	r7, r1
   b8b1e:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b8b20:	490c      	ldr	r1, [pc, #48]	; (b8b54 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b8b22:	bf88      	it	hi
   b8b24:	4613      	movhi	r3, r2
{
   b8b26:	4614      	mov	r4, r2
   b8b28:	4606      	mov	r6, r0
	if (left > right) {
   b8b2a:	bf84      	itt	hi
   b8b2c:	462c      	movhi	r4, r5
   b8b2e:	461d      	movhi	r5, r3
	String out;
   b8b30:	f7ff ff03 	bl	b893a <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b8b34:	68bb      	ldr	r3, [r7, #8]
   b8b36:	42a3      	cmp	r3, r4
   b8b38:	d30a      	bcc.n	b8b50 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b8b3a:	6839      	ldr	r1, [r7, #0]
   b8b3c:	42ab      	cmp	r3, r5
   b8b3e:	bf94      	ite	ls
   b8b40:	ebc4 0203 	rsbls	r2, r4, r3
   b8b44:	ebc4 0205 	rsbhi	r2, r4, r5
   b8b48:	4421      	add	r1, r4
   b8b4a:	4630      	mov	r0, r6
   b8b4c:	f7ff fedc 	bl	b8908 <_ZN6String4copyEPKcj>
	return out;
}
   b8b50:	4630      	mov	r0, r6
   b8b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8b54:	000bab99 	.word	0x000bab99

000b8b58 <_ZNK6String9substringEj>:
{
   b8b58:	b510      	push	{r4, lr}
   b8b5a:	4604      	mov	r4, r0
	return substring(left, len);
   b8b5c:	688b      	ldr	r3, [r1, #8]
   b8b5e:	f7ff ffdb 	bl	b8b18 <_ZNK6String9substringEjj>
}
   b8b62:	4620      	mov	r0, r4
   b8b64:	bd10      	pop	{r4, pc}

000b8b66 <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
   b8b66:	b538      	push	{r3, r4, r5, lr}
   b8b68:	4604      	mov	r4, r0
   b8b6a:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
   b8b6c:	68a3      	ldr	r3, [r4, #8]
   b8b6e:	428b      	cmp	r3, r1
   b8b70:	d911      	bls.n	b8b96 <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
   b8b72:	b182      	cbz	r2, b8b96 <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
   b8b74:	4411      	add	r1, r2
   b8b76:	428b      	cmp	r3, r1
   b8b78:	bf38      	it	cc
   b8b7a:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
   b8b7c:	6825      	ldr	r5, [r4, #0]
	len = len - count;
   b8b7e:	1a99      	subs	r1, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
   b8b80:	1813      	adds	r3, r2, r0
	len = len - count;
   b8b82:	60a1      	str	r1, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
   b8b84:	1a0a      	subs	r2, r1, r0
   b8b86:	18e9      	adds	r1, r5, r3
   b8b88:	4428      	add	r0, r5
   b8b8a:	f001 fd41 	bl	ba610 <memmove>
	buffer[len] = 0;
   b8b8e:	6822      	ldr	r2, [r4, #0]
   b8b90:	68a3      	ldr	r3, [r4, #8]
   b8b92:	2100      	movs	r1, #0
   b8b94:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   b8b96:	4620      	mov	r0, r4
   b8b98:	bd38      	pop	{r3, r4, r5, pc}

000b8b9a <_ZN6String6removeEj>:
        int count = len - index;
   b8b9a:	6882      	ldr	r2, [r0, #8]
        return remove(index, count);
   b8b9c:	1a52      	subs	r2, r2, r1
   b8b9e:	f7ff bfe2 	b.w	b8b66 <_ZN6String6removeEjj>

000b8ba2 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b8ba2:	6800      	ldr	r0, [r0, #0]
   b8ba4:	b108      	cbz	r0, b8baa <_ZNK6String5toIntEv+0x8>
   b8ba6:	f001 bcfd 	b.w	ba5a4 <atol>
	return 0;
}
   b8baa:	4770      	bx	lr

000b8bac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b8bac:	b510      	push	{r4, lr}
   b8bae:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b8bb0:	6800      	ldr	r0, [r0, #0]
   b8bb2:	b118      	cbz	r0, b8bbc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b8bb4:	f7fe f864 	bl	b6c80 <free>
            wakeupSource_ = nullptr;
   b8bb8:	2300      	movs	r3, #0
   b8bba:	6023      	str	r3, [r4, #0]
        }
    }
   b8bbc:	bd10      	pop	{r4, pc}

000b8bbe <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   b8bbe:	b538      	push	{r3, r4, r5, lr}
   b8bc0:	460c      	mov	r4, r1
   b8bc2:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b8bc4:	f7ff fff2 	bl	b8bac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   b8bc8:	b154      	cbz	r4, b8be0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   b8bca:	8820      	ldrh	r0, [r4, #0]
   b8bcc:	f7fe f850 	bl	b6c70 <malloc>
   b8bd0:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   b8bd2:	b128      	cbz	r0, b8be0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   b8bd4:	8822      	ldrh	r2, [r4, #0]
   b8bd6:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   b8bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   b8bdc:	f001 bd0a 	b.w	ba5f4 <memcpy>
    }
   b8be0:	bd38      	pop	{r3, r4, r5, pc}

000b8be2 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b8be2:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   b8be4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   b8be8:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   b8bea:	f8d1 3006 	ldr.w	r3, [r1, #6]
   b8bee:	f8c0 3006 	str.w	r3, [r0, #6]
   b8bf2:	894b      	ldrh	r3, [r1, #10]
   b8bf4:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b8bf6:	460c      	mov	r4, r1
   b8bf8:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b8bfa:	f7ff ffd7 	bl	b8bac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   b8bfe:	6823      	ldr	r3, [r4, #0]
   b8c00:	b113      	cbz	r3, b8c08 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   b8c02:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   b8c04:	2300      	movs	r3, #0
   b8c06:	6023      	str	r3, [r4, #0]
    }
   b8c08:	bd38      	pop	{r3, r4, r5, pc}

000b8c0a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b8c0a:	b507      	push	{r0, r1, r2, lr}
   b8c0c:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8c0e:	2100      	movs	r1, #0
{
   b8c10:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8c12:	9100      	str	r1, [sp, #0]
   b8c14:	2001      	movs	r0, #1
   b8c16:	218c      	movs	r1, #140	; 0x8c
   b8c18:	f7fd ff80 	bl	b6b1c <system_reset>
}
   b8c1c:	b003      	add	sp, #12
   b8c1e:	f85d fb04 	ldr.w	pc, [sp], #4

000b8c22 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b8c22:	4601      	mov	r1, r0
    reset(0, flags);
   b8c24:	2000      	movs	r0, #0
   b8c26:	f7ff bff0 	b.w	b8c0a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b8c2a <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b8c2a:	2000      	movs	r0, #0
   b8c2c:	f7ff bff9 	b.w	b8c22 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000b8c30 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   b8c30:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8c32:	4d2b      	ldr	r5, [pc, #172]	; (b8ce0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   b8c34:	7d0b      	ldrb	r3, [r1, #20]
   b8c36:	4604      	mov	r4, r0
   b8c38:	b08b      	sub	sp, #44	; 0x2c
   b8c3a:	4608      	mov	r0, r1
   b8c3c:	1daf      	adds	r7, r5, #6
   b8c3e:	2b00      	cmp	r3, #0
   b8c40:	d036      	beq.n	b8cb0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   b8c42:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   b8c44:	791b      	ldrb	r3, [r3, #4]
   b8c46:	2b00      	cmp	r3, #0
   b8c48:	d032      	beq.n	b8cb0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   b8c4a:	4b26      	ldr	r3, [pc, #152]	; (b8ce4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   b8c4c:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   b8c4e:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   b8c50:	a902      	add	r1, sp, #8
   b8c52:	3004      	adds	r0, #4
   b8c54:	e9cd 2202 	strd	r2, r2, [sp, #8]
   b8c58:	f7fd ff56 	bl	b6b08 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   b8c5c:	f8dd 300e 	ldr.w	r3, [sp, #14]
   b8c60:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   b8c64:	b200      	sxth	r0, r0
   b8c66:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   b8c6a:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   b8c6e:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   b8c70:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   b8c72:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b8c74:	4628      	mov	r0, r5
   b8c76:	f7ff ffa2 	bl	b8bbe <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   b8c7a:	a802      	add	r0, sp, #8
   b8c7c:	f7ff ff96 	bl	b8bac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   b8c80:	2300      	movs	r3, #0
   b8c82:	6023      	str	r3, [r4, #0]
   b8c84:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   b8c86:	71a3      	strb	r3, [r4, #6]
   b8c88:	8123      	strh	r3, [r4, #8]
   b8c8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8c8e:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   b8c90:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   b8c94:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   b8c96:	f8d5 3006 	ldr.w	r3, [r5, #6]
   b8c9a:	f8c4 3006 	str.w	r3, [r4, #6]
   b8c9e:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b8ca0:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   b8ca2:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   b8ca4:	4620      	mov	r0, r4
   b8ca6:	f7ff ff8a 	bl	b8bbe <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   b8caa:	4620      	mov	r0, r4
   b8cac:	b00b      	add	sp, #44	; 0x2c
   b8cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   b8cb0:	2600      	movs	r6, #0
   b8cb2:	2320      	movs	r3, #32
   b8cb4:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b8cb8:	4b0b      	ldr	r3, [pc, #44]	; (b8ce8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   b8cba:	9300      	str	r3, [sp, #0]
   b8cbc:	aa02      	add	r2, sp, #8
   b8cbe:	4633      	mov	r3, r6
   b8cc0:	490a      	ldr	r1, [pc, #40]	; (b8cec <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   b8cc2:	2032      	movs	r0, #50	; 0x32
   b8cc4:	f7fd febc 	bl	b6a40 <log_message>
            : wakeupSource_(nullptr),
   b8cc8:	4b06      	ldr	r3, [pc, #24]	; (b8ce4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   b8cca:	4805      	ldr	r0, [pc, #20]	; (b8ce0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   b8ccc:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   b8cce:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   b8cd2:	a902      	add	r1, sp, #8
   b8cd4:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b8cd8:	f7ff ff83 	bl	b8be2 <_ZN17SystemSleepResultaSEOS_.isra.0>
   b8cdc:	e7cd      	b.n	b8c7a <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   b8cde:	bf00      	nop
   b8ce0:	2003e6e4 	.word	0x2003e6e4
   b8ce4:	ffff0000 	.word	0xffff0000
   b8ce8:	000bb5bf 	.word	0x000bb5bf
   b8cec:	000bb5b8 	.word	0x000bb5b8

000b8cf0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8cf0:	4b05      	ldr	r3, [pc, #20]	; (b8d08 <_GLOBAL__sub_I_System+0x18>)
   b8cf2:	2202      	movs	r2, #2
   b8cf4:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b8cf6:	4b05      	ldr	r3, [pc, #20]	; (b8d0c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8cf8:	4a05      	ldr	r2, [pc, #20]	; (b8d10 <_GLOBAL__sub_I_System+0x20>)
   b8cfa:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8cfc:	2000      	movs	r0, #0
   b8cfe:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8d02:	f7fd bead 	b.w	b6a60 <set_system_mode>
   b8d06:	bf00      	nop
   b8d08:	2003e6f0 	.word	0x2003e6f0
   b8d0c:	2003e6e4 	.word	0x2003e6e4
   b8d10:	ffff0000 	.word	0xffff0000

000b8d14 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b8d14:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8d16:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b8d18:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8d1c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8d1e:	2201      	movs	r2, #1
   b8d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8d24:	f10d 0107 	add.w	r1, sp, #7
   b8d28:	47a0      	blx	r4
}
   b8d2a:	b002      	add	sp, #8
   b8d2c:	bd10      	pop	{r4, pc}

000b8d2e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b8d2e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8d30:	6803      	ldr	r3, [r0, #0]
   b8d32:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8d38:	46a4      	mov	ip, r4
}
   b8d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8d3e:	4760      	bx	ip

000b8d40 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8d40:	b513      	push	{r0, r1, r4, lr}
   b8d42:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b8d44:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8d46:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b8d4a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8d4c:	f10d 0107 	add.w	r1, sp, #7
   b8d50:	2201      	movs	r2, #1
   b8d52:	47a0      	blx	r4
}
   b8d54:	b002      	add	sp, #8
   b8d56:	bd10      	pop	{r4, pc}

000b8d58 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b8d58:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b8d5a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8d5c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8d60:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8d64:	429a      	cmp	r2, r3
int TCPClient::read() {
   b8d66:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8d68:	d008      	beq.n	b8d7c <_ZN9TCPClient4readEv+0x24>
   b8d6a:	6963      	ldr	r3, [r4, #20]
   b8d6c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8d70:	1c51      	adds	r1, r2, #1
   b8d72:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b8d76:	4413      	add	r3, r2
   b8d78:	7918      	ldrb	r0, [r3, #4]
}
   b8d7a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8d7c:	6803      	ldr	r3, [r0, #0]
   b8d7e:	691b      	ldr	r3, [r3, #16]
   b8d80:	4798      	blx	r3
   b8d82:	2800      	cmp	r0, #0
   b8d84:	d1f1      	bne.n	b8d6a <_ZN9TCPClient4readEv+0x12>
   b8d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8d8a:	e7f6      	b.n	b8d7a <_ZN9TCPClient4readEv+0x22>

000b8d8c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b8d8c:	4770      	bx	lr

000b8d8e <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b8d8e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b8d90:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b8d92:	43c0      	mvns	r0, r0
   b8d94:	0fc0      	lsrs	r0, r0, #31
   b8d96:	4770      	bx	lr

000b8d98 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8d98:	4770      	bx	lr
	...

000b8d9c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8d9c:	4b06      	ldr	r3, [pc, #24]	; (b8db8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8d9e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8da0:	b510      	push	{r4, lr}
   b8da2:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8da6:	d005      	beq.n	b8db4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8da8:	4608      	mov	r0, r1
   b8daa:	f000 fe69 	bl	b9a80 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8dae:	2800      	cmp	r0, #0
   b8db0:	bf08      	it	eq
   b8db2:	2400      	moveq	r4, #0
      }
   b8db4:	4620      	mov	r0, r4
   b8db6:	bd10      	pop	{r4, pc}
   b8db8:	000bb4b8 	.word	0x000bb4b8

000b8dbc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8dbc:	b510      	push	{r4, lr}
   b8dbe:	21ac      	movs	r1, #172	; 0xac
   b8dc0:	4604      	mov	r4, r0
   b8dc2:	f7fb f96c 	bl	b409e <_ZdlPvj>
   b8dc6:	4620      	mov	r0, r4
   b8dc8:	bd10      	pop	{r4, pc}

000b8dca <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b8dca:	21ac      	movs	r1, #172	; 0xac
   b8dcc:	f7fb b967 	b.w	b409e <_ZdlPvj>

000b8dd0 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b8dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8dd4:	f04f 0800 	mov.w	r8, #0
   b8dd8:	b086      	sub	sp, #24
   b8dda:	461c      	mov	r4, r3
   b8ddc:	f8c0 8004 	str.w	r8, [r0, #4]
   b8de0:	4605      	mov	r5, r0
   b8de2:	460e      	mov	r6, r1
   b8de4:	4617      	mov	r7, r2
    struct timeval tv = {};
   b8de6:	4641      	mov	r1, r8
   b8de8:	2210      	movs	r2, #16
   b8dea:	a802      	add	r0, sp, #8
   b8dec:	f001 fc2a 	bl	ba644 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b8df0:	1c63      	adds	r3, r4, #1
   b8df2:	d009      	beq.n	b8e08 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b8df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8df8:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b8dfc:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b8e00:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b8e04:	435c      	muls	r4, r3
   b8e06:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b8e08:	6968      	ldr	r0, [r5, #20]
   b8e0a:	2310      	movs	r3, #16
   b8e0c:	9300      	str	r3, [sp, #0]
   b8e0e:	6800      	ldr	r0, [r0, #0]
   b8e10:	ab02      	add	r3, sp, #8
   b8e12:	f241 0205 	movw	r2, #4101	; 0x1005
   b8e16:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8e1a:	f7fd fd01 	bl	b6820 <sock_setsockopt>
    if (ret < 0) {
   b8e1e:	2800      	cmp	r0, #0
   b8e20:	da07      	bge.n	b8e32 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b8e22:	f7fd ff4d 	bl	b6cc0 <__errno>
   b8e26:	6803      	ldr	r3, [r0, #0]
   b8e28:	606b      	str	r3, [r5, #4]
        return 0;
   b8e2a:	2000      	movs	r0, #0
}
   b8e2c:	b006      	add	sp, #24
   b8e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b8e32:	6968      	ldr	r0, [r5, #20]
   b8e34:	2300      	movs	r3, #0
   b8e36:	6800      	ldr	r0, [r0, #0]
   b8e38:	463a      	mov	r2, r7
   b8e3a:	4631      	mov	r1, r6
   b8e3c:	f7fd fd10 	bl	b6860 <sock_send>
    if (ret < 0) {
   b8e40:	1e03      	subs	r3, r0, #0
   b8e42:	dbee      	blt.n	b8e22 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b8e44:	4618      	mov	r0, r3
   b8e46:	e7f1      	b.n	b8e2c <_ZN9TCPClient5writeEPKhjm+0x5c>

000b8e48 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b8e48:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b8e4a:	6984      	ldr	r4, [r0, #24]
   b8e4c:	4b0a      	ldr	r3, [pc, #40]	; (b8e78 <_ZN9TCPClientD1Ev+0x30>)
   b8e4e:	6003      	str	r3, [r0, #0]
   b8e50:	4605      	mov	r5, r0
   b8e52:	b17c      	cbz	r4, b8e74 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b8e54:	6863      	ldr	r3, [r4, #4]
   b8e56:	3b01      	subs	r3, #1
   b8e58:	6063      	str	r3, [r4, #4]
   b8e5a:	b95b      	cbnz	r3, b8e74 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b8e5c:	6823      	ldr	r3, [r4, #0]
   b8e5e:	4620      	mov	r0, r4
   b8e60:	689b      	ldr	r3, [r3, #8]
   b8e62:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8e64:	68a3      	ldr	r3, [r4, #8]
   b8e66:	3b01      	subs	r3, #1
   b8e68:	60a3      	str	r3, [r4, #8]
   b8e6a:	b91b      	cbnz	r3, b8e74 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b8e6c:	6823      	ldr	r3, [r4, #0]
   b8e6e:	4620      	mov	r0, r4
   b8e70:	68db      	ldr	r3, [r3, #12]
   b8e72:	4798      	blx	r3
   b8e74:	4628      	mov	r0, r5
   b8e76:	bd38      	pop	{r3, r4, r5, pc}
   b8e78:	000bb61c 	.word	0x000bb61c

000b8e7c <_ZN9TCPClientD0Ev>:
   b8e7c:	b510      	push	{r4, lr}
   b8e7e:	4604      	mov	r4, r0
   b8e80:	f7ff ffe2 	bl	b8e48 <_ZN9TCPClientD1Ev>
   b8e84:	4620      	mov	r0, r4
   b8e86:	211c      	movs	r1, #28
   b8e88:	f7fb f909 	bl	b409e <_ZdlPvj>
   b8e8c:	4620      	mov	r0, r4
   b8e8e:	bd10      	pop	{r4, pc}

000b8e90 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b8e90:	b530      	push	{r4, r5, lr}
   b8e92:	b087      	sub	sp, #28
   b8e94:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b8e96:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b8e98:	4668      	mov	r0, sp
   b8e9a:	f7ff faff 	bl	b849c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8ea0:	3404      	adds	r4, #4
   b8ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8ea4:	682b      	ldr	r3, [r5, #0]
   b8ea6:	7023      	strb	r3, [r4, #0]
    }
   b8ea8:	b007      	add	sp, #28
   b8eaa:	bd30      	pop	{r4, r5, pc}

000b8eac <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b8eac:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b8eae:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b8eb0:	4b05      	ldr	r3, [pc, #20]	; (b8ec8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b8eb2:	4604      	mov	r4, r0
   b8eb4:	358c      	adds	r5, #140	; 0x8c
   b8eb6:	f844 3b04 	str.w	r3, [r4], #4
   b8eba:	4606      	mov	r6, r0
   b8ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8ec0:	682b      	ldr	r3, [r5, #0]
   b8ec2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b8ec4:	4630      	mov	r0, r6
   b8ec6:	bd70      	pop	{r4, r5, r6, pc}
   b8ec8:	000bb564 	.word	0x000bb564

000b8ecc <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8ed0:	4698      	mov	r8, r3
    stop();
   b8ed2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8ed4:	b093      	sub	sp, #76	; 0x4c
   b8ed6:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b8ed8:	2400      	movs	r4, #0
    stop();
   b8eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8edc:	4606      	mov	r6, r0
   b8ede:	4617      	mov	r7, r2
    stop();
   b8ee0:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8ee2:	4628      	mov	r0, r5
   b8ee4:	466b      	mov	r3, sp
   b8ee6:	4622      	mov	r2, r4
   b8ee8:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b8eea:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8eec:	f7fd fc90 	bl	b6810 <netdb_getaddrinfo>
   b8ef0:	4605      	mov	r5, r0
   b8ef2:	2800      	cmp	r0, #0
   b8ef4:	d163      	bne.n	b8fbe <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b8ef6:	9b00      	ldr	r3, [sp, #0]
   b8ef8:	2b00      	cmp	r3, #0
   b8efa:	d04b      	beq.n	b8f94 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8efc:	695b      	ldr	r3, [r3, #20]
   b8efe:	2b00      	cmp	r3, #0
   b8f00:	d048      	beq.n	b8f94 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b8f02:	a806      	add	r0, sp, #24
   b8f04:	f7ff fa86 	bl	b8414 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8f08:	9b00      	ldr	r3, [sp, #0]
   b8f0a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b8f0c:	7863      	ldrb	r3, [r4, #1]
   b8f0e:	2b02      	cmp	r3, #2
   b8f10:	d104      	bne.n	b8f1c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b8f12:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b8f14:	a806      	add	r0, sp, #24
   b8f16:	f7ff ffbb 	bl	b8e90 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b8f1a:	e026      	b.n	b8f6a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b8f1c:	2b0a      	cmp	r3, #10
   b8f1e:	d124      	bne.n	b8f6a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b8f20:	2211      	movs	r2, #17
   b8f22:	4629      	mov	r1, r5
   b8f24:	a801      	add	r0, sp, #4
   b8f26:	f001 fb8d 	bl	ba644 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8f2a:	68a3      	ldr	r3, [r4, #8]
   b8f2c:	2b00      	cmp	r3, #0
   b8f2e:	d038      	beq.n	b8fa2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8f30:	f104 0308 	add.w	r3, r4, #8
   b8f34:	f10d 0c04 	add.w	ip, sp, #4
   b8f38:	3418      	adds	r4, #24
   b8f3a:	6818      	ldr	r0, [r3, #0]
   b8f3c:	6859      	ldr	r1, [r3, #4]
   b8f3e:	4662      	mov	r2, ip
   b8f40:	c203      	stmia	r2!, {r0, r1}
   b8f42:	3308      	adds	r3, #8
   b8f44:	42a3      	cmp	r3, r4
   b8f46:	4694      	mov	ip, r2
   b8f48:	d1f7      	bne.n	b8f3a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b8f4a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b8f4c:	a901      	add	r1, sp, #4
   b8f4e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b8f50:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b8f54:	f7ff fa6c 	bl	b8430 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8f58:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8f5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b8f60:	ac07      	add	r4, sp, #28
   b8f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f64:	f8dc 3000 	ldr.w	r3, [ip]
   b8f68:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b8f6a:	a806      	add	r0, sp, #24
   b8f6c:	f7ff fa72 	bl	b8454 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b8f70:	b180      	cbz	r0, b8f94 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b8f72:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b8f74:	ad07      	add	r5, sp, #28
   b8f76:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b8f7a:	4b12      	ldr	r3, [pc, #72]	; (b8fc4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b8f7c:	930c      	str	r3, [sp, #48]	; 0x30
   b8f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f80:	ac0d      	add	r4, sp, #52	; 0x34
   b8f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f84:	682b      	ldr	r3, [r5, #0]
   b8f86:	7023      	strb	r3, [r4, #0]
   b8f88:	463a      	mov	r2, r7
   b8f8a:	4643      	mov	r3, r8
   b8f8c:	a90c      	add	r1, sp, #48	; 0x30
   b8f8e:	4630      	mov	r0, r6
   b8f90:	47c8      	blx	r9
   b8f92:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b8f94:	9800      	ldr	r0, [sp, #0]
   b8f96:	f7fd fc33 	bl	b6800 <netdb_freeaddrinfo>
}
   b8f9a:	4628      	mov	r0, r5
   b8f9c:	b013      	add	sp, #76	; 0x4c
   b8f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8fa2:	68e3      	ldr	r3, [r4, #12]
   b8fa4:	2b00      	cmp	r3, #0
   b8fa6:	d1c3      	bne.n	b8f30 <_ZN9TCPClient7connectEPKctm+0x64>
   b8fa8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b8fac:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b8fb0:	f7fd fc16 	bl	b67e0 <inet_htonl>
   b8fb4:	4581      	cmp	r9, r0
   b8fb6:	d1bb      	bne.n	b8f30 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b8fb8:	f104 0114 	add.w	r1, r4, #20
   b8fbc:	e7aa      	b.n	b8f14 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8fbe:	4625      	mov	r5, r4
   b8fc0:	e7e8      	b.n	b8f94 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8fc2:	bf00      	nop
   b8fc4:	000bb564 	.word	0x000bb564

000b8fc8 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b8fc8:	b538      	push	{r3, r4, r5, lr}
   b8fca:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b8fcc:	681a      	ldr	r2, [r3, #0]
   b8fce:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b8fd0:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b8fd2:	da10      	bge.n	b8ff6 <_ZN9TCPClient9connectedEv+0x2e>
   b8fd4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8fd8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8fdc:	429a      	cmp	r2, r3
   b8fde:	d10a      	bne.n	b8ff6 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b8fe0:	6803      	ldr	r3, [r0, #0]
   b8fe2:	691b      	ldr	r3, [r3, #16]
   b8fe4:	4798      	blx	r3
        if (!rv) {
   b8fe6:	4604      	mov	r4, r0
   b8fe8:	b928      	cbnz	r0, b8ff6 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b8fea:	682b      	ldr	r3, [r5, #0]
   b8fec:	4628      	mov	r0, r5
   b8fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8ff0:	4798      	blx	r3
        rv = available();
   b8ff2:	4620      	mov	r0, r4
}
   b8ff4:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b8ff6:	2001      	movs	r0, #1
   b8ff8:	e7fc      	b.n	b8ff4 <_ZN9TCPClient9connectedEv+0x2c>

000b8ffa <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b8ffa:	b510      	push	{r4, lr}
   b8ffc:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8ffe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9002:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9006:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b9008:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b900a:	d005      	beq.n	b9018 <_ZN9TCPClient4peekEv+0x1e>
   b900c:	6963      	ldr	r3, [r4, #20]
   b900e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9012:	4413      	add	r3, r2
   b9014:	7918      	ldrb	r0, [r3, #4]
}
   b9016:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9018:	6803      	ldr	r3, [r0, #0]
   b901a:	691b      	ldr	r3, [r3, #16]
   b901c:	4798      	blx	r3
   b901e:	2800      	cmp	r0, #0
   b9020:	d1f4      	bne.n	b900c <_ZN9TCPClient4peekEv+0x12>
   b9022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9026:	e7f6      	b.n	b9016 <_ZN9TCPClient4peekEv+0x1c>

000b9028 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b902a:	6943      	ldr	r3, [r0, #20]
   b902c:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b902e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9032:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9036:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9038:	4605      	mov	r5, r0
   b903a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b903c:	d016      	beq.n	b906c <_ZN9TCPClient4readEPhj+0x44>
   b903e:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b9040:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b9044:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b9048:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b904a:	42bc      	cmp	r4, r7
   b904c:	bf28      	it	cs
   b904e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b9050:	3304      	adds	r3, #4
   b9052:	4622      	mov	r2, r4
   b9054:	4419      	add	r1, r3
   b9056:	4630      	mov	r0, r6
   b9058:	f001 facc 	bl	ba5f4 <memcpy>
   b905c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b905e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b9062:	4423      	add	r3, r4
   b9064:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b9068:	4620      	mov	r0, r4
   b906a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b906c:	6803      	ldr	r3, [r0, #0]
   b906e:	691b      	ldr	r3, [r3, #16]
   b9070:	4798      	blx	r3
   b9072:	2800      	cmp	r0, #0
   b9074:	d1e3      	bne.n	b903e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b9076:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b907a:	e7f5      	b.n	b9068 <_ZN9TCPClient4readEPhj+0x40>

000b907c <_ZN9TCPClient12flush_bufferEv>:
   b907c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b907e:	2300      	movs	r3, #0
   b9080:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9084:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b9086:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b908a:	4770      	bx	lr

000b908c <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b908c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9090:	461f      	mov	r7, r3
    stop();
   b9092:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9094:	460c      	mov	r4, r1
    stop();
   b9096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9098:	b08a      	sub	sp, #40	; 0x28
   b909a:	4605      	mov	r5, r0
   b909c:	4616      	mov	r6, r2
    stop();
   b909e:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b90a0:	7d23      	ldrb	r3, [r4, #20]
   b90a2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b90a6:	2b04      	cmp	r3, #4
   b90a8:	bf0c      	ite	eq
   b90aa:	2002      	moveq	r0, #2
   b90ac:	200a      	movne	r0, #10
   b90ae:	2206      	movs	r2, #6
   b90b0:	2101      	movs	r1, #1
   b90b2:	f7fd fbdd 	bl	b6870 <sock_socket>
   b90b6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b90ba:	696b      	ldr	r3, [r5, #20]
   b90bc:	681b      	ldr	r3, [r3, #0]
   b90be:	2b00      	cmp	r3, #0
   b90c0:	da08      	bge.n	b90d4 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b90c2:	682b      	ldr	r3, [r5, #0]
   b90c4:	4628      	mov	r0, r5
   b90c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b90c8:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b90ca:	4798      	blx	r3
}
   b90cc:	4620      	mov	r0, r4
   b90ce:	b00a      	add	sp, #40	; 0x28
   b90d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b90d4:	4628      	mov	r0, r5
   b90d6:	f7ff ffd1 	bl	b907c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b90da:	b1b7      	cbz	r7, b910a <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b90dc:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b90de:	a903      	add	r1, sp, #12
   b90e0:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b90e2:	9303      	str	r3, [sp, #12]
   b90e4:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b90e8:	f7fd fb6a 	bl	b67c0 <if_index_to_name>
   b90ec:	2800      	cmp	r0, #0
   b90ee:	d1e8      	bne.n	b90c2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b90f0:	6968      	ldr	r0, [r5, #20]
   b90f2:	2306      	movs	r3, #6
   b90f4:	9300      	str	r3, [sp, #0]
   b90f6:	6800      	ldr	r0, [r0, #0]
   b90f8:	ab03      	add	r3, sp, #12
   b90fa:	f241 020b 	movw	r2, #4107	; 0x100b
   b90fe:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9102:	f7fd fb8d 	bl	b6820 <sock_setsockopt>
   b9106:	2800      	cmp	r0, #0
   b9108:	d1db      	bne.n	b90c2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b910a:	221c      	movs	r2, #28
   b910c:	2100      	movs	r1, #0
   b910e:	a803      	add	r0, sp, #12
   b9110:	f001 fa98 	bl	ba644 <memset>
    if (ip.version() == 4) {
   b9114:	7d23      	ldrb	r3, [r4, #20]
   b9116:	2b04      	cmp	r3, #4
   b9118:	d11d      	bne.n	b9156 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b911a:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b911e:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b9120:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b9124:	f7fd fb64 	bl	b67f0 <inet_htons>
   b9128:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b912c:	6860      	ldr	r0, [r4, #4]
   b912e:	f7fd fb57 	bl	b67e0 <inet_htonl>
   b9132:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b9134:	696b      	ldr	r3, [r5, #20]
   b9136:	221c      	movs	r2, #28
   b9138:	6818      	ldr	r0, [r3, #0]
   b913a:	a903      	add	r1, sp, #12
   b913c:	f7fd fb80 	bl	b6840 <sock_connect>
   b9140:	2800      	cmp	r0, #0
   b9142:	d1be      	bne.n	b90c2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b9144:	3404      	adds	r4, #4
   b9146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9148:	696d      	ldr	r5, [r5, #20]
   b914a:	358c      	adds	r5, #140	; 0x8c
   b914c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b914e:	6823      	ldr	r3, [r4, #0]
   b9150:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b9152:	2401      	movs	r4, #1
   b9154:	e7ba      	b.n	b90cc <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b9156:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b915a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b915c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b9160:	f7fd fb46 	bl	b67f0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9164:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b9166:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b916a:	1d23      	adds	r3, r4, #4
   b916c:	f104 0714 	add.w	r7, r4, #20
   b9170:	6818      	ldr	r0, [r3, #0]
   b9172:	6859      	ldr	r1, [r3, #4]
   b9174:	4632      	mov	r2, r6
   b9176:	c203      	stmia	r2!, {r0, r1}
   b9178:	3308      	adds	r3, #8
   b917a:	42bb      	cmp	r3, r7
   b917c:	4616      	mov	r6, r2
   b917e:	d1f7      	bne.n	b9170 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b9180:	e7d8      	b.n	b9134 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b9184 <_ZN9TCPClient9availableEv>:
{
   b9184:	b530      	push	{r4, r5, lr}
   b9186:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b9188:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b918c:	b08b      	sub	sp, #44	; 0x2c
   b918e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b9190:	b12b      	cbz	r3, b919e <_ZN9TCPClient9availableEv+0x1a>
   b9192:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b9196:	429a      	cmp	r2, r3
   b9198:	d101      	bne.n	b919e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b919a:	f7ff ff6f 	bl	b907c <_ZN9TCPClient12flush_bufferEv>
   b919e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b91a0:	6808      	ldr	r0, [r1, #0]
   b91a2:	2800      	cmp	r0, #0
   b91a4:	db18      	blt.n	b91d8 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b91a6:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b91aa:	2d7f      	cmp	r5, #127	; 0x7f
   b91ac:	d814      	bhi.n	b91d8 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b91ae:	3104      	adds	r1, #4
   b91b0:	2308      	movs	r3, #8
   b91b2:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b91b6:	4429      	add	r1, r5
   b91b8:	f7fd fb4a 	bl	b6850 <sock_recv>
            if (ret > 0) {
   b91bc:	2800      	cmp	r0, #0
   b91be:	dd13      	ble.n	b91e8 <_ZN9TCPClient9availableEv+0x64>
   b91c0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b91c2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b91c6:	b90a      	cbnz	r2, b91cc <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b91c8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b91cc:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b91ce:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b91d2:	4410      	add	r0, r2
   b91d4:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b91d8:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b91da:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b91de:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b91e2:	1ac0      	subs	r0, r0, r3
   b91e4:	b00b      	add	sp, #44	; 0x2c
   b91e6:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b91e8:	f7fd fd6a 	bl	b6cc0 <__errno>
   b91ec:	6803      	ldr	r3, [r0, #0]
   b91ee:	2b0b      	cmp	r3, #11
   b91f0:	d0f2      	beq.n	b91d8 <_ZN9TCPClient9availableEv+0x54>
   b91f2:	f7fd fd65 	bl	b6cc0 <__errno>
   b91f6:	6803      	ldr	r3, [r0, #0]
   b91f8:	2b0b      	cmp	r3, #11
   b91fa:	d0ed      	beq.n	b91d8 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b91fc:	2320      	movs	r3, #32
   b91fe:	2500      	movs	r5, #0
   b9200:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b9204:	f7fd fd5c 	bl	b6cc0 <__errno>
   b9208:	6803      	ldr	r3, [r0, #0]
   b920a:	9301      	str	r3, [sp, #4]
   b920c:	4b08      	ldr	r3, [pc, #32]	; (b9230 <_ZN9TCPClient9availableEv+0xac>)
   b920e:	4909      	ldr	r1, [pc, #36]	; (b9234 <_ZN9TCPClient9availableEv+0xb0>)
   b9210:	9300      	str	r3, [sp, #0]
   b9212:	aa02      	add	r2, sp, #8
   b9214:	462b      	mov	r3, r5
   b9216:	2032      	movs	r0, #50	; 0x32
   b9218:	f7fd fc12 	bl	b6a40 <log_message>
                    sock_close(d_->sock);
   b921c:	6963      	ldr	r3, [r4, #20]
   b921e:	6818      	ldr	r0, [r3, #0]
   b9220:	f7fd fb06 	bl	b6830 <sock_close>
   b9224:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b9226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b922a:	601a      	str	r2, [r3, #0]
   b922c:	e7d4      	b.n	b91d8 <_ZN9TCPClient9availableEv+0x54>
   b922e:	bf00      	nop
   b9230:	000bb5e6 	.word	0x000bb5e6
   b9234:	000bb5b8 	.word	0x000bb5b8

000b9238 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b9238:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b923a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b923c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b923e:	6818      	ldr	r0, [r3, #0]
   b9240:	2800      	cmp	r0, #0
   b9242:	db01      	blt.n	b9248 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b9244:	f7fd faf4 	bl	b6830 <sock_close>
   b9248:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b924a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b924e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b9250:	6960      	ldr	r0, [r4, #20]
   b9252:	2211      	movs	r2, #17
   b9254:	2100      	movs	r1, #0
   b9256:	308c      	adds	r0, #140	; 0x8c
   b9258:	f001 f9f4 	bl	ba644 <memset>
    flush_buffer();
   b925c:	4620      	mov	r0, r4
}
   b925e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b9262:	f7ff bf0b 	b.w	b907c <_ZN9TCPClient12flush_bufferEv>

000b9266 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b9266:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b9268:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b926a:	4604      	mov	r4, r0
          total(0) {
   b926c:	6001      	str	r1, [r0, #0]
   b926e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b9272:	3088      	adds	r0, #136	; 0x88
   b9274:	f7ff f8ce 	bl	b8414 <_ZN9IPAddressC1Ev>
}
   b9278:	4620      	mov	r0, r4
   b927a:	bd10      	pop	{r4, pc}

000b927c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b927c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b927e:	2300      	movs	r3, #0
   b9280:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9284:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b9288:	4a0e      	ldr	r2, [pc, #56]	; (b92c4 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b928a:	6103      	str	r3, [r0, #16]
   b928c:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b928e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b9290:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9292:	20ac      	movs	r0, #172	; 0xac
   b9294:	9101      	str	r1, [sp, #4]
   b9296:	f7fa fefe 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b929a:	1e05      	subs	r5, r0, #0
   b929c:	f105 060c 	add.w	r6, r5, #12
   b92a0:	d008      	beq.n	b92b4 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b92a2:	2301      	movs	r3, #1
   b92a4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b92a8:	4b07      	ldr	r3, [pc, #28]	; (b92c8 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b92aa:	9901      	ldr	r1, [sp, #4]
   b92ac:	602b      	str	r3, [r5, #0]
   b92ae:	4630      	mov	r0, r6
   b92b0:	f7ff ffd9 	bl	b9266 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b92b4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b92b6:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b92ba:	f7ff fedf 	bl	b907c <_ZN9TCPClient12flush_bufferEv>
}
   b92be:	b002      	add	sp, #8
   b92c0:	bd70      	pop	{r4, r5, r6, pc}
   b92c2:	bf00      	nop
   b92c4:	000bb61c 	.word	0x000bb61c
   b92c8:	000bb600 	.word	0x000bb600

000b92cc <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b92cc:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b92ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b92d2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b92d4:	f7ff ffd2 	bl	b927c <_ZN9TCPClientC1Ei>
}
   b92d8:	4620      	mov	r0, r4
   b92da:	bd10      	pop	{r4, pc}

000b92dc <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b92dc:	b510      	push	{r4, lr}
   b92de:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b92e0:	6800      	ldr	r0, [r0, #0]
   b92e2:	2800      	cmp	r0, #0
   b92e4:	db01      	blt.n	b92ea <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b92e6:	f7fd faa3 	bl	b6830 <sock_close>
    }
}
   b92ea:	4620      	mov	r0, r4
   b92ec:	bd10      	pop	{r4, pc}

000b92ee <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b92ee:	300c      	adds	r0, #12
   b92f0:	f7ff bff4 	b.w	b92dc <_ZN9TCPClient4DataD1Ev>

000b92f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b92f4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b92f6:	2000      	movs	r0, #0
   b92f8:	f7fd fc32 	bl	b6b60 <spark_sync_time_pending>
   b92fc:	b128      	cbz	r0, b930a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b92fe:	f7fd fc27 	bl	b6b50 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b9302:	f080 0001 	eor.w	r0, r0, #1
   b9306:	b2c0      	uxtb	r0, r0
    }
   b9308:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b930a:	2001      	movs	r0, #1
   b930c:	e7fc      	b.n	b9308 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b930e <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   b930e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b9310:	4602      	mov	r2, r0
   b9312:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   b9314:	4668      	mov	r0, sp
    struct timeval tv = {
   b9316:	2100      	movs	r1, #0
    };
   b9318:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   b931c:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   b9320:	f7fd f9ce 	bl	b66c0 <hal_rtc_set_time>
   b9324:	4602      	mov	r2, r0
   b9326:	b910      	cbnz	r0, b932e <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   b9328:	4601      	mov	r1, r0
   b932a:	f7fd fbd1 	bl	b6ad0 <system_notify_time_changed>
    }
}
   b932e:	b005      	add	sp, #20
   b9330:	f85d fb04 	ldr.w	pc, [sp], #4

000b9334 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b9334:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b9336:	2000      	movs	r0, #0
   b9338:	f7fd f9b2 	bl	b66a0 <hal_rtc_time_is_valid>
    if (rtcstate)
   b933c:	4604      	mov	r4, r0
   b933e:	b9a0      	cbnz	r0, b936a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b9340:	f7fd fb86 	bl	b6a50 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b9344:	2801      	cmp	r0, #1
   b9346:	d110      	bne.n	b936a <_ZN9TimeClass7isValidEv+0x36>
   b9348:	4620      	mov	r0, r4
   b934a:	f7fd fbb9 	bl	b6ac0 <system_thread_get_state>
   b934e:	b960      	cbnz	r0, b936a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b9350:	f7ff ffd0 	bl	b92f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b9354:	b910      	cbnz	r0, b935c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b9356:	f7fd fbeb 	bl	b6b30 <spark_process>
        while (_while() && !_condition()) {
   b935a:	e7f9      	b.n	b9350 <_ZN9TimeClass7isValidEv+0x1c>
   b935c:	f7ff ffca 	bl	b92f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b9360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b9364:	2000      	movs	r0, #0
   b9366:	f7fd b99b 	b.w	b66a0 <hal_rtc_time_is_valid>
}
   b936a:	4620      	mov	r0, r4
   b936c:	bd10      	pop	{r4, pc}

000b936e <_ZN9TimeClass3nowEv>:
{
   b936e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b9370:	f7ff ffe0 	bl	b9334 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b9374:	2210      	movs	r2, #16
   b9376:	2100      	movs	r1, #0
   b9378:	4668      	mov	r0, sp
   b937a:	f001 f963 	bl	ba644 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b937e:	2100      	movs	r1, #0
   b9380:	4668      	mov	r0, sp
   b9382:	f7fd f995 	bl	b66b0 <hal_rtc_get_time>
}
   b9386:	9800      	ldr	r0, [sp, #0]
   b9388:	b005      	add	sp, #20
   b938a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9390 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9390:	4b02      	ldr	r3, [pc, #8]	; (b939c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b9392:	681a      	ldr	r2, [r3, #0]
   b9394:	4b02      	ldr	r3, [pc, #8]	; (b93a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b9396:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9398:	4770      	bx	lr
   b939a:	bf00      	nop
   b939c:	20031b98 	.word	0x20031b98
   b93a0:	2003e6f4 	.word	0x2003e6f4

000b93a4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b93a4:	4770      	bx	lr

000b93a6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b93a6:	7441      	strb	r1, [r0, #17]
}
   b93a8:	4770      	bx	lr

000b93aa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b93aa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b93ac:	7c00      	ldrb	r0, [r0, #16]
   b93ae:	f7fd fae7 	bl	b6980 <hal_usart_available_data_for_write>
}
   b93b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b93b6:	bd08      	pop	{r3, pc}

000b93b8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b93b8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b93ba:	7c00      	ldrb	r0, [r0, #16]
   b93bc:	f7fd fab8 	bl	b6930 <hal_usart_available>
}
   b93c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b93c4:	bd08      	pop	{r3, pc}

000b93c6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b93c6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b93c8:	7c00      	ldrb	r0, [r0, #16]
   b93ca:	f7fd fac1 	bl	b6950 <hal_usart_peek>
}
   b93ce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b93d2:	bd08      	pop	{r3, pc}

000b93d4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b93d4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b93d6:	7c00      	ldrb	r0, [r0, #16]
   b93d8:	f7fd fab2 	bl	b6940 <hal_usart_read>
}
   b93dc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b93e0:	bd08      	pop	{r3, pc}

000b93e2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b93e2:	7c00      	ldrb	r0, [r0, #16]
   b93e4:	f7fd babc 	b.w	b6960 <hal_usart_flush>

000b93e8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b93e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b93ea:	7c45      	ldrb	r5, [r0, #17]
{
   b93ec:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b93ee:	b12d      	cbz	r5, b93fc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b93f0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b93f2:	b003      	add	sp, #12
   b93f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b93f8:	f7fd ba92 	b.w	b6920 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b93fc:	7c00      	ldrb	r0, [r0, #16]
   b93fe:	9101      	str	r1, [sp, #4]
   b9400:	f7fd fabe 	bl	b6980 <hal_usart_available_data_for_write>
   b9404:	2800      	cmp	r0, #0
   b9406:	9901      	ldr	r1, [sp, #4]
   b9408:	dcf2      	bgt.n	b93f0 <_ZN11USARTSerial5writeEh+0x8>
}
   b940a:	4628      	mov	r0, r5
   b940c:	b003      	add	sp, #12
   b940e:	bd30      	pop	{r4, r5, pc}

000b9410 <_ZN11USARTSerialD0Ev>:
   b9410:	b510      	push	{r4, lr}
   b9412:	2114      	movs	r1, #20
   b9414:	4604      	mov	r4, r0
   b9416:	f7fa fe42 	bl	b409e <_ZdlPvj>
   b941a:	4620      	mov	r0, r4
   b941c:	bd10      	pop	{r4, pc}
	...

000b9420 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b9420:	b510      	push	{r4, lr}
   b9422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9426:	4604      	mov	r4, r0
   b9428:	4608      	mov	r0, r1
   b942a:	4611      	mov	r1, r2
   b942c:	2200      	movs	r2, #0
   b942e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9432:	4b04      	ldr	r3, [pc, #16]	; (b9444 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b9434:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9436:	2301      	movs	r3, #1
  _serial = serial;
   b9438:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b943a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b943c:	f7fd faa8 	bl	b6990 <hal_usart_init_ex>
}
   b9440:	4620      	mov	r0, r4
   b9442:	bd10      	pop	{r4, pc}
   b9444:	000bb684 	.word	0x000bb684

000b9448 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9448:	7441      	strb	r1, [r0, #17]
}
   b944a:	4770      	bx	lr

000b944c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b944c:	4770      	bx	lr

000b944e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b944e:	4770      	bx	lr

000b9450 <_ZN9USBSerial4readEv>:
{
   b9450:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b9452:	2100      	movs	r1, #0
   b9454:	7c00      	ldrb	r0, [r0, #16]
   b9456:	f7fd fac3 	bl	b69e0 <HAL_USB_USART_Receive_Data>
}
   b945a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b945e:	bd08      	pop	{r3, pc}

000b9460 <_ZN9USBSerial4peekEv>:
{
   b9460:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b9462:	2101      	movs	r1, #1
   b9464:	7c00      	ldrb	r0, [r0, #16]
   b9466:	f7fd fabb 	bl	b69e0 <HAL_USB_USART_Receive_Data>
}
   b946a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b946e:	bd08      	pop	{r3, pc}

000b9470 <_ZN9USBSerial17availableForWriteEv>:
{
   b9470:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b9472:	7c00      	ldrb	r0, [r0, #16]
   b9474:	f7fd faac 	bl	b69d0 <HAL_USB_USART_Available_Data_For_Write>
}
   b9478:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b947c:	bd08      	pop	{r3, pc}

000b947e <_ZN9USBSerial9availableEv>:
{
   b947e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b9480:	7c00      	ldrb	r0, [r0, #16]
   b9482:	f7fd fa9d 	bl	b69c0 <HAL_USB_USART_Available_Data>
}
   b9486:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b948a:	bd08      	pop	{r3, pc}

000b948c <_ZN9USBSerial5writeEh>:
{
   b948c:	b513      	push	{r0, r1, r4, lr}
   b948e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9490:	7c00      	ldrb	r0, [r0, #16]
{
   b9492:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9494:	f7fd fa9c 	bl	b69d0 <HAL_USB_USART_Available_Data_For_Write>
   b9498:	2800      	cmp	r0, #0
   b949a:	9901      	ldr	r1, [sp, #4]
   b949c:	dc01      	bgt.n	b94a2 <_ZN9USBSerial5writeEh+0x16>
   b949e:	7c60      	ldrb	r0, [r4, #17]
   b94a0:	b120      	cbz	r0, b94ac <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b94a2:	7c20      	ldrb	r0, [r4, #16]
   b94a4:	f7fd faa4 	bl	b69f0 <HAL_USB_USART_Send_Data>
   b94a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b94ac:	b002      	add	sp, #8
   b94ae:	bd10      	pop	{r4, pc}

000b94b0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b94b0:	7c00      	ldrb	r0, [r0, #16]
   b94b2:	f7fd baa5 	b.w	b6a00 <HAL_USB_USART_Flush_Data>

000b94b6 <_ZN9USBSerialD0Ev>:
   b94b6:	b510      	push	{r4, lr}
   b94b8:	2114      	movs	r1, #20
   b94ba:	4604      	mov	r4, r0
   b94bc:	f7fa fdef 	bl	b409e <_ZdlPvj>
   b94c0:	4620      	mov	r0, r4
   b94c2:	bd10      	pop	{r4, pc}

000b94c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b94c4:	b510      	push	{r4, lr}
   b94c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b94ca:	4604      	mov	r4, r0
   b94cc:	4608      	mov	r0, r1
   b94ce:	2100      	movs	r1, #0
   b94d0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b94d4:	4b04      	ldr	r3, [pc, #16]	; (b94e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b94d6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b94d8:	2301      	movs	r3, #1
  _serial = serial;
   b94da:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b94dc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b94de:	4611      	mov	r1, r2
   b94e0:	f7fd fa5e 	bl	b69a0 <HAL_USB_USART_Init>
}
   b94e4:	4620      	mov	r0, r4
   b94e6:	bd10      	pop	{r4, pc}
   b94e8:	000bb6b4 	.word	0x000bb6b4

000b94ec <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b94ec:	7c00      	ldrb	r0, [r0, #16]
   b94ee:	2200      	movs	r2, #0
   b94f0:	f7fd ba5e 	b.w	b69b0 <HAL_USB_USART_Begin>

000b94f4 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b94f4:	7c00      	ldrb	r0, [r0, #16]
   b94f6:	f7fd ba8b 	b.w	b6a10 <HAL_USB_USART_Is_Connected>

000b94fa <_Z19acquireSerialBufferv>:
{
   b94fa:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b94fc:	2214      	movs	r2, #20
{
   b94fe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b9500:	2100      	movs	r1, #0
   b9502:	f001 f89f 	bl	ba644 <memset>
}
   b9506:	4620      	mov	r0, r4
   b9508:	bd10      	pop	{r4, pc}
	...

000b950c <_Z16_fetch_usbserialv>:
{
   b950c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b950e:	4c0f      	ldr	r4, [pc, #60]	; (b954c <_Z16_fetch_usbserialv+0x40>)
{
   b9510:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b9512:	a803      	add	r0, sp, #12
   b9514:	f7ff fff1 	bl	b94fa <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9518:	7821      	ldrb	r1, [r4, #0]
   b951a:	f3bf 8f5b 	dmb	ish
   b951e:	f011 0101 	ands.w	r1, r1, #1
   b9522:	d10f      	bne.n	b9544 <_Z16_fetch_usbserialv+0x38>
   b9524:	4620      	mov	r0, r4
   b9526:	9101      	str	r1, [sp, #4]
   b9528:	f7fa fdbb 	bl	b40a2 <__cxa_guard_acquire>
   b952c:	9901      	ldr	r1, [sp, #4]
   b952e:	b148      	cbz	r0, b9544 <_Z16_fetch_usbserialv+0x38>
   b9530:	aa03      	add	r2, sp, #12
   b9532:	4807      	ldr	r0, [pc, #28]	; (b9550 <_Z16_fetch_usbserialv+0x44>)
   b9534:	f7ff ffc6 	bl	b94c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9538:	4620      	mov	r0, r4
   b953a:	f7fa fdb7 	bl	b40ac <__cxa_guard_release>
   b953e:	4805      	ldr	r0, [pc, #20]	; (b9554 <_Z16_fetch_usbserialv+0x48>)
   b9540:	f001 f826 	bl	ba590 <atexit>
	return _usbserial;
}
   b9544:	4802      	ldr	r0, [pc, #8]	; (b9550 <_Z16_fetch_usbserialv+0x44>)
   b9546:	b008      	add	sp, #32
   b9548:	bd10      	pop	{r4, pc}
   b954a:	bf00      	nop
   b954c:	2003e6f8 	.word	0x2003e6f8
   b9550:	2003e6fc 	.word	0x2003e6fc
   b9554:	000b944d 	.word	0x000b944d

000b9558 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv>:
                results[index++] = *result;
            }
        }

    protected:
        static void callback(WiFiAccessPoint* result, void* cookie)
   b9558:	b530      	push	{r4, r5, lr}
            if (index<count) {
   b955a:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   b955e:	4293      	cmp	r3, r2
   b9560:	da10      	bge.n	b9584 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv+0x2c>
                results[index++] = *result;
   b9562:	680d      	ldr	r5, [r1, #0]
   b9564:	1c5a      	adds	r2, r3, #1
   b9566:	604a      	str	r2, [r1, #4]
   b9568:	4604      	mov	r4, r0
   b956a:	2238      	movs	r2, #56	; 0x38
   b956c:	fb02 5503 	mla	r5, r2, r3, r5
   b9570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9572:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9574:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9576:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b957a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b957c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b9580:	e885 0003 	stmia.w	r5, {r0, r1}
        {
            ((APArrayPopulator*)cookie)->addResult(result);
        }
   b9584:	bd30      	pop	{r4, r5, pc}

000b9586 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9586:	2200      	movs	r2, #0
   b9588:	6840      	ldr	r0, [r0, #4]
   b958a:	4611      	mov	r1, r2
   b958c:	f7fd bb30 	b.w	b6bf0 <network_listening>

000b9590 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9590:	2200      	movs	r2, #0
   b9592:	6840      	ldr	r0, [r0, #4]
   b9594:	4611      	mov	r1, r2
   b9596:	f7fd bb53 	b.w	b6c40 <network_get_listen_timeout>

000b959a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b959a:	6840      	ldr	r0, [r0, #4]
   b959c:	2200      	movs	r2, #0
   b959e:	f7fd bb47 	b.w	b6c30 <network_set_listen_timeout>

000b95a2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b95a2:	6840      	ldr	r0, [r0, #4]
   b95a4:	2200      	movs	r2, #0
   b95a6:	f081 0101 	eor.w	r1, r1, #1
   b95aa:	f7fd bb19 	b.w	b6be0 <network_listen>

000b95ae <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b95ae:	2200      	movs	r2, #0
   b95b0:	6840      	ldr	r0, [r0, #4]
   b95b2:	4611      	mov	r1, r2
   b95b4:	f7fd baec 	b.w	b6b90 <network_connecting>

000b95b8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b95b8:	6840      	ldr	r0, [r0, #4]
   b95ba:	2200      	movs	r2, #0
   b95bc:	2102      	movs	r1, #2
   b95be:	f7fd baef 	b.w	b6ba0 <network_disconnect>
	...

000b95c4 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>:
        APScan apScan(results, result_count);
        return apScan.start();
    }

#if !HAL_PLATFORM_WIFI_SCAN_ONLY
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
   b95c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
            this->index = 0;
   b95c6:	2300      	movs	r3, #0
            this->results = results;
   b95c8:	9101      	str	r1, [sp, #4]
            return std::min(count, wlan_get_credentials(callback, this));
   b95ca:	4806      	ldr	r0, [pc, #24]	; (b95e4 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj+0x20>)
            this->index = 0;
   b95cc:	9302      	str	r3, [sp, #8]
            return std::min(count, wlan_get_credentials(callback, this));
   b95ce:	a901      	add	r1, sp, #4
            this->count = size;
   b95d0:	9203      	str	r2, [sp, #12]
            return std::min(count, wlan_get_credentials(callback, this));
   b95d2:	f7fd fa25 	bl	b6a20 <wlan_get_credentials>
        APList apList(results, result_count);
        return apList.start();
    }
   b95d6:	9b03      	ldr	r3, [sp, #12]
   b95d8:	4298      	cmp	r0, r3
   b95da:	bfa8      	it	ge
   b95dc:	4618      	movge	r0, r3
   b95de:	b005      	add	sp, #20
   b95e0:	f85d fb04 	ldr.w	pc, [sp], #4
   b95e4:	000b9559 	.word	0x000b9559

000b95e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b95e8:	4b02      	ldr	r3, [pc, #8]	; (b95f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b95ea:	2204      	movs	r2, #4
   b95ec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b95ee:	4a02      	ldr	r2, [pc, #8]	; (b95f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b95f0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b95f2:	4770      	bx	lr
   b95f4:	2003e710 	.word	0x2003e710
   b95f8:	000bb6e4 	.word	0x000bb6e4

000b95fc <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b95fc:	b510      	push	{r4, lr}
   b95fe:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b9600:	f001 f868 	bl	ba6d4 <strlen>
   b9604:	3801      	subs	r0, #1
   b9606:	1823      	adds	r3, r4, r0
   b9608:	4620      	mov	r0, r4
	while(i<j){
   b960a:	4283      	cmp	r3, r0
   b960c:	d906      	bls.n	b961c <_Z11str_reversePc+0x20>
		c = *i;
   b960e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b9610:	7819      	ldrb	r1, [r3, #0]
   b9612:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b9616:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b961a:	e7f6      	b.n	b960a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b961c:	bd10      	pop	{r4, pc}

000b961e <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b961e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b9622:	1e93      	subs	r3, r2, #2
{
   b9624:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b9626:	2b22      	cmp	r3, #34	; 0x22
   b9628:	f04f 0300 	mov.w	r3, #0
{
   b962c:	460d      	mov	r5, r1
   b962e:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b9630:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b9634:	d927      	bls.n	b9686 <ltoa+0x68>

      if (10 == base && N < 0L)
   b9636:	2800      	cmp	r0, #0
   b9638:	da2a      	bge.n	b9690 <ltoa+0x72>
      {
            *head++ = '-';
   b963a:	462e      	mov	r6, r5
   b963c:	232d      	movs	r3, #45	; 0x2d
   b963e:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b9642:	4240      	negs	r0, r0
   b9644:	240a      	movs	r4, #10
      *tail-- = '\0';
   b9646:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b964a:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b964e:	4622      	mov	r2, r4
   b9650:	4601      	mov	r1, r0
   b9652:	a801      	add	r0, sp, #4
   b9654:	f000 ffaa 	bl	ba5ac <ldiv>
   b9658:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b965a:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b965c:	2b09      	cmp	r3, #9
   b965e:	bfcc      	ite	gt
   b9660:	2237      	movgt	r2, #55	; 0x37
   b9662:	2230      	movle	r2, #48	; 0x30
   b9664:	fa52 f383 	uxtab	r3, r2, r3
   b9668:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b966c:	f108 0801 	add.w	r8, r8, #1
   b9670:	2800      	cmp	r0, #0
   b9672:	d1ec      	bne.n	b964e <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b9674:	4642      	mov	r2, r8
   b9676:	1c79      	adds	r1, r7, #1
   b9678:	4630      	mov	r0, r6
   b967a:	f000 ffbb 	bl	ba5f4 <memcpy>
      return str;
}
   b967e:	4628      	mov	r0, r5
   b9680:	b00c      	add	sp, #48	; 0x30
   b9682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b9686:	2a0a      	cmp	r2, #10
   b9688:	d0d5      	beq.n	b9636 <ltoa+0x18>
      if (uarg)
   b968a:	b118      	cbz	r0, b9694 <ltoa+0x76>
   b968c:	462e      	mov	r6, r5
   b968e:	e7da      	b.n	b9646 <ltoa+0x28>
   b9690:	240a      	movs	r4, #10
   b9692:	e7fa      	b.n	b968a <ltoa+0x6c>
      else  *tail-- = '0';
   b9694:	2330      	movs	r3, #48	; 0x30
   b9696:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b969a:	462e      	mov	r6, r5
   b969c:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b96a0:	f04f 0802 	mov.w	r8, #2
   b96a4:	e7e6      	b.n	b9674 <ltoa+0x56>

000b96a6 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b96a6:	b570      	push	{r4, r5, r6, lr}
   b96a8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b96aa:	1e91      	subs	r1, r2, #2
   b96ac:	2922      	cmp	r1, #34	; 0x22
   b96ae:	d81d      	bhi.n	b96ec <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b96b0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b96b2:	b930      	cbnz	r0, b96c2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b96b4:	4423      	add	r3, r4
            *ptr++ = '0';
   b96b6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b96b8:	429d      	cmp	r5, r3
   b96ba:	d210      	bcs.n	b96de <ultoa+0x38>
            *ptr++ = '0';
   b96bc:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b96c0:	e7fa      	b.n	b96b8 <ultoa+0x12>
            result.quot = a/radix;
   b96c2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b96c6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b96ca:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b96cc:	2809      	cmp	r0, #9
                *ptr += '0';
   b96ce:	bf94      	ite	ls
   b96d0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b96d2:	3157      	addhi	r1, #87	; 0x57
   b96d4:	b2c9      	uxtb	r1, r1
   b96d6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b96da:	4630      	mov	r0, r6
	while(a){
   b96dc:	e7e9      	b.n	b96b2 <ultoa+0xc>

	*ptr = '\0';
   b96de:	2300      	movs	r3, #0
	str_reverse(buffer);
   b96e0:	4620      	mov	r0, r4
	*ptr = '\0';
   b96e2:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b96e4:	f7ff ff8a 	bl	b95fc <_Z11str_reversePc>
	return buffer;
   b96e8:	4620      	mov	r0, r4
}
   b96ea:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b96ec:	2000      	movs	r0, #0
   b96ee:	e7fc      	b.n	b96ea <ultoa+0x44>

000b96f0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b96f0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b96f2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b96f4:	460c      	mov	r4, r1
   b96f6:	4615      	mov	r5, r2
	if(a<0){
   b96f8:	da0e      	bge.n	b9718 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b96fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b96fe:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b9702:	bf14      	ite	ne
   b9704:	4258      	negne	r0, r3
   b9706:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b9708:	2301      	movs	r3, #1
		*buffer = '-';
   b970a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b970c:	462a      	mov	r2, r5
   b970e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b9710:	f7ff ffc9 	bl	b96a6 <ultoa>
	}
	return buffer;
}
   b9714:	4620      	mov	r0, r4
   b9716:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b9718:	2301      	movs	r3, #1
   b971a:	e7f9      	b.n	b9710 <itoa+0x20>

000b971c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b971c:	4b01      	ldr	r3, [pc, #4]	; (b9724 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b971e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b9720:	4770      	bx	lr
   b9722:	bf00      	nop
   b9724:	20031b9c 	.word	0x20031b9c

000b9728 <serialEventRun>:
{
   b9728:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b972a:	4b0b      	ldr	r3, [pc, #44]	; (b9758 <serialEventRun+0x30>)
   b972c:	b143      	cbz	r3, b9740 <serialEventRun+0x18>
   b972e:	f7ff feed 	bl	b950c <_Z16_fetch_usbserialv>
   b9732:	6803      	ldr	r3, [r0, #0]
   b9734:	691b      	ldr	r3, [r3, #16]
   b9736:	4798      	blx	r3
   b9738:	2800      	cmp	r0, #0
   b973a:	dd01      	ble.n	b9740 <serialEventRun+0x18>
        serialEvent();
   b973c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b9740:	4b06      	ldr	r3, [pc, #24]	; (b975c <serialEventRun+0x34>)
   b9742:	b143      	cbz	r3, b9756 <serialEventRun+0x2e>
   b9744:	f000 f970 	bl	b9a28 <_Z22__fetch_global_Serial1v>
   b9748:	6803      	ldr	r3, [r0, #0]
   b974a:	691b      	ldr	r3, [r3, #16]
   b974c:	4798      	blx	r3
   b974e:	2800      	cmp	r0, #0
   b9750:	dd01      	ble.n	b9756 <serialEventRun+0x2e>
        serialEvent1();
   b9752:	f3af 8000 	nop.w
}
   b9756:	bd08      	pop	{r3, pc}
	...

000b9760 <_post_loop>:
{
   b9760:	b508      	push	{r3, lr}
	serialEventRun();
   b9762:	f7ff ffe1 	bl	b9728 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b9766:	f7fc ff7b 	bl	b6660 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b976a:	4b01      	ldr	r3, [pc, #4]	; (b9770 <_post_loop+0x10>)
   b976c:	6018      	str	r0, [r3, #0]
}
   b976e:	bd08      	pop	{r3, pc}
   b9770:	2003e720 	.word	0x2003e720

000b9774 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9774:	4805      	ldr	r0, [pc, #20]	; (b978c <_Z33system_initialize_user_backup_ramv+0x18>)
   b9776:	4a06      	ldr	r2, [pc, #24]	; (b9790 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9778:	4906      	ldr	r1, [pc, #24]	; (b9794 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b977a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b977c:	1a12      	subs	r2, r2, r0
   b977e:	f000 ff39 	bl	ba5f4 <memcpy>
    __backup_sram_signature = signature;
   b9782:	4b05      	ldr	r3, [pc, #20]	; (b9798 <_Z33system_initialize_user_backup_ramv+0x24>)
   b9784:	4a05      	ldr	r2, [pc, #20]	; (b979c <_Z33system_initialize_user_backup_ramv+0x28>)
   b9786:	601a      	str	r2, [r3, #0]
}
   b9788:	bd08      	pop	{r3, pc}
   b978a:	bf00      	nop
   b978c:	2003f400 	.word	0x2003f400
   b9790:	2003f404 	.word	0x2003f404
   b9794:	000bb9b0 	.word	0x000bb9b0
   b9798:	2003f400 	.word	0x2003f400
   b979c:	9a271c1e 	.word	0x9a271c1e

000b97a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b97a0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b97a2:	2300      	movs	r3, #0
   b97a4:	9300      	str	r3, [sp, #0]
   b97a6:	461a      	mov	r2, r3
   b97a8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b97ac:	f7fd f9a2 	bl	b6af4 <system_ctrl_set_result>
}
   b97b0:	b003      	add	sp, #12
   b97b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b97b8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b97b8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b97ba:	8843      	ldrh	r3, [r0, #2]
   b97bc:	2b0a      	cmp	r3, #10
   b97be:	d008      	beq.n	b97d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b97c0:	2b50      	cmp	r3, #80	; 0x50
   b97c2:	d10b      	bne.n	b97dc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b97c4:	4b09      	ldr	r3, [pc, #36]	; (b97ec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b97c6:	681b      	ldr	r3, [r3, #0]
   b97c8:	b14b      	cbz	r3, b97de <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b97ca:	b003      	add	sp, #12
   b97cc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b97d0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b97d2:	f7ff ffe5 	bl	b97a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b97d6:	b003      	add	sp, #12
   b97d8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b97dc:	2300      	movs	r3, #0
   b97de:	9300      	str	r3, [sp, #0]
   b97e0:	461a      	mov	r2, r3
   b97e2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b97e6:	f7fd f985 	bl	b6af4 <system_ctrl_set_result>
}
   b97ea:	e7f4      	b.n	b97d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b97ec:	2003e71c 	.word	0x2003e71c

000b97f0 <module_user_init_hook>:
{
   b97f0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b97f2:	4812      	ldr	r0, [pc, #72]	; (b983c <module_user_init_hook+0x4c>)
   b97f4:	2100      	movs	r1, #0
   b97f6:	f7fd fa73 	bl	b6ce0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b97fa:	4b11      	ldr	r3, [pc, #68]	; (b9840 <module_user_init_hook+0x50>)
   b97fc:	681a      	ldr	r2, [r3, #0]
   b97fe:	4b11      	ldr	r3, [pc, #68]	; (b9844 <module_user_init_hook+0x54>)
   b9800:	429a      	cmp	r2, r3
   b9802:	4b11      	ldr	r3, [pc, #68]	; (b9848 <module_user_init_hook+0x58>)
   b9804:	bf0c      	ite	eq
   b9806:	2201      	moveq	r2, #1
   b9808:	2200      	movne	r2, #0
   b980a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b980c:	d001      	beq.n	b9812 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b980e:	f7ff ffb1 	bl	b9774 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b9812:	f7fc ff15 	bl	b6640 <HAL_RNG_GetRandomNumber>
   b9816:	4604      	mov	r4, r0
    srand(seed);
   b9818:	f000 ff1c 	bl	ba654 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b981c:	4b0b      	ldr	r3, [pc, #44]	; (b984c <module_user_init_hook+0x5c>)
   b981e:	b113      	cbz	r3, b9826 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9820:	4620      	mov	r0, r4
   b9822:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b9826:	2100      	movs	r1, #0
   b9828:	4808      	ldr	r0, [pc, #32]	; (b984c <module_user_init_hook+0x5c>)
   b982a:	f7fd f9a1 	bl	b6b70 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b982e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b9832:	4807      	ldr	r0, [pc, #28]	; (b9850 <module_user_init_hook+0x60>)
   b9834:	2100      	movs	r1, #0
   b9836:	f7fd b953 	b.w	b6ae0 <system_ctrl_set_app_request_handler>
   b983a:	bf00      	nop
   b983c:	000b971d 	.word	0x000b971d
   b9840:	2003f400 	.word	0x2003f400
   b9844:	9a271c1e 	.word	0x9a271c1e
   b9848:	2003e718 	.word	0x2003e718
   b984c:	00000000 	.word	0x00000000
   b9850:	000b97b9 	.word	0x000b97b9

000b9854 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b9854:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b9856:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b9858:	d902      	bls.n	b9860 <pinAvailable+0xc>
    return false;
   b985a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b985c:	b002      	add	sp, #8
   b985e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b9860:	f1a0 030b 	sub.w	r3, r0, #11
   b9864:	2b02      	cmp	r3, #2
   b9866:	d81a      	bhi.n	b989e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b9868:	4c17      	ldr	r4, [pc, #92]	; (b98c8 <pinAvailable+0x74>)
   b986a:	7821      	ldrb	r1, [r4, #0]
   b986c:	f3bf 8f5b 	dmb	ish
   b9870:	f011 0101 	ands.w	r1, r1, #1
   b9874:	d10b      	bne.n	b988e <pinAvailable+0x3a>
   b9876:	4620      	mov	r0, r4
   b9878:	9101      	str	r1, [sp, #4]
   b987a:	f7fa fc12 	bl	b40a2 <__cxa_guard_acquire>
   b987e:	9901      	ldr	r1, [sp, #4]
   b9880:	b128      	cbz	r0, b988e <pinAvailable+0x3a>
   b9882:	4812      	ldr	r0, [pc, #72]	; (b98cc <pinAvailable+0x78>)
   b9884:	f7fe ff7a 	bl	b877c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b9888:	4620      	mov	r0, r4
   b988a:	f7fa fc0f 	bl	b40ac <__cxa_guard_release>
   b988e:	4b0f      	ldr	r3, [pc, #60]	; (b98cc <pinAvailable+0x78>)
   b9890:	7818      	ldrb	r0, [r3, #0]
   b9892:	f7fd f825 	bl	b68e0 <hal_spi_is_enabled>
   b9896:	2800      	cmp	r0, #0
   b9898:	d1df      	bne.n	b985a <pinAvailable+0x6>
  return true; // 'pin' is available
   b989a:	2001      	movs	r0, #1
   b989c:	e7de      	b.n	b985c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b989e:	2801      	cmp	r0, #1
   b98a0:	d809      	bhi.n	b98b6 <pinAvailable+0x62>
   b98a2:	f000 f881 	bl	b99a8 <_Z19__fetch_global_Wirev>
   b98a6:	2100      	movs	r1, #0
   b98a8:	7c00      	ldrb	r0, [r0, #16]
   b98aa:	f7fc ff71 	bl	b6790 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b98ae:	f080 0001 	eor.w	r0, r0, #1
   b98b2:	b2c0      	uxtb	r0, r0
   b98b4:	e7d2      	b.n	b985c <pinAvailable+0x8>
   b98b6:	3809      	subs	r0, #9
   b98b8:	2801      	cmp	r0, #1
   b98ba:	d8ee      	bhi.n	b989a <pinAvailable+0x46>
   b98bc:	f000 f8b4 	bl	b9a28 <_Z22__fetch_global_Serial1v>
   b98c0:	7c00      	ldrb	r0, [r0, #16]
   b98c2:	f7fd f855 	bl	b6970 <hal_usart_is_enabled>
   b98c6:	e7f2      	b.n	b98ae <pinAvailable+0x5a>
   b98c8:	2003e6a4 	.word	0x2003e6a4
   b98cc:	2003e6a8 	.word	0x2003e6a8

000b98d0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b98d0:	2823      	cmp	r0, #35	; 0x23
{
   b98d2:	b538      	push	{r3, r4, r5, lr}
   b98d4:	4604      	mov	r4, r0
   b98d6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b98d8:	d80a      	bhi.n	b98f0 <pinMode+0x20>
   b98da:	29ff      	cmp	r1, #255	; 0xff
   b98dc:	d008      	beq.n	b98f0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b98de:	f7ff ffb9 	bl	b9854 <pinAvailable>
   b98e2:	b128      	cbz	r0, b98f0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b98e4:	4629      	mov	r1, r5
   b98e6:	4620      	mov	r0, r4
}
   b98e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b98ec:	f7fc bef0 	b.w	b66d0 <HAL_Pin_Mode>
}
   b98f0:	bd38      	pop	{r3, r4, r5, pc}

000b98f2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b98f2:	b538      	push	{r3, r4, r5, lr}
   b98f4:	4604      	mov	r4, r0
   b98f6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b98f8:	f7fc fef2 	bl	b66e0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b98fc:	28ff      	cmp	r0, #255	; 0xff
   b98fe:	d010      	beq.n	b9922 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b9900:	2806      	cmp	r0, #6
   b9902:	d804      	bhi.n	b990e <digitalWrite+0x1c>
   b9904:	234d      	movs	r3, #77	; 0x4d
   b9906:	fa23 f000 	lsr.w	r0, r3, r0
   b990a:	07c3      	lsls	r3, r0, #31
   b990c:	d409      	bmi.n	b9922 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b990e:	4620      	mov	r0, r4
   b9910:	f7ff ffa0 	bl	b9854 <pinAvailable>
   b9914:	b128      	cbz	r0, b9922 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b9916:	4629      	mov	r1, r5
   b9918:	4620      	mov	r0, r4
}
   b991a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b991e:	f7fc bee7 	b.w	b66f0 <HAL_GPIO_Write>
}
   b9922:	bd38      	pop	{r3, r4, r5, pc}

000b9924 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b9924:	b510      	push	{r4, lr}
   b9926:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9928:	f7fc feda 	bl	b66e0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b992c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b992e:	b2db      	uxtb	r3, r3
   b9930:	2b01      	cmp	r3, #1
   b9932:	d908      	bls.n	b9946 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b9934:	4620      	mov	r0, r4
   b9936:	f7ff ff8d 	bl	b9854 <pinAvailable>
   b993a:	b120      	cbz	r0, b9946 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b993c:	4620      	mov	r0, r4
}
   b993e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b9942:	f7fc bedd 	b.w	b6700 <HAL_GPIO_Read>
}
   b9946:	2000      	movs	r0, #0
   b9948:	bd10      	pop	{r4, pc}
	...

000b994c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   b994c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   b994e:	4c08      	ldr	r4, [pc, #32]	; (b9970 <_Z21__fetch_global_EEPROMv+0x24>)
   b9950:	7823      	ldrb	r3, [r4, #0]
   b9952:	f3bf 8f5b 	dmb	ish
   b9956:	07db      	lsls	r3, r3, #31
   b9958:	d408      	bmi.n	b996c <_Z21__fetch_global_EEPROMv+0x20>
   b995a:	4620      	mov	r0, r4
   b995c:	f7fa fba1 	bl	b40a2 <__cxa_guard_acquire>
   b9960:	b120      	cbz	r0, b996c <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   b9962:	f7fc fe85 	bl	b6670 <HAL_EEPROM_Init>
   b9966:	4620      	mov	r0, r4
   b9968:	f7fa fba0 	bl	b40ac <__cxa_guard_release>
	return eeprom;
}
   b996c:	4801      	ldr	r0, [pc, #4]	; (b9974 <_Z21__fetch_global_EEPROMv+0x28>)
   b996e:	bd10      	pop	{r4, pc}
   b9970:	2003e724 	.word	0x2003e724
   b9974:	2003e728 	.word	0x2003e728

000b9978 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9978:	4770      	bx	lr
	...

000b997c <_Z17acquireWireBufferv>:
{
   b997c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b997e:	2520      	movs	r5, #32
   b9980:	2314      	movs	r3, #20
{
   b9982:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9984:	6003      	str	r3, [r0, #0]
   b9986:	6085      	str	r5, [r0, #8]
   b9988:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b998a:	4906      	ldr	r1, [pc, #24]	; (b99a4 <_Z17acquireWireBufferv+0x28>)
   b998c:	4628      	mov	r0, r5
   b998e:	f000 f871 	bl	b9a74 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9992:	4904      	ldr	r1, [pc, #16]	; (b99a4 <_Z17acquireWireBufferv+0x28>)
	};
   b9994:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9996:	4628      	mov	r0, r5
   b9998:	f000 f86c 	bl	b9a74 <_ZnajRKSt9nothrow_t>
	};
   b999c:	60e0      	str	r0, [r4, #12]
}
   b999e:	4620      	mov	r0, r4
   b99a0:	bd38      	pop	{r3, r4, r5, pc}
   b99a2:	bf00      	nop
   b99a4:	000bb718 	.word	0x000bb718

000b99a8 <_Z19__fetch_global_Wirev>:
{
   b99a8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b99aa:	4d0e      	ldr	r5, [pc, #56]	; (b99e4 <_Z19__fetch_global_Wirev+0x3c>)
   b99ac:	7829      	ldrb	r1, [r5, #0]
   b99ae:	f3bf 8f5b 	dmb	ish
   b99b2:	f011 0401 	ands.w	r4, r1, #1
{
   b99b6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b99b8:	d111      	bne.n	b99de <_Z19__fetch_global_Wirev+0x36>
   b99ba:	4628      	mov	r0, r5
   b99bc:	f7fa fb71 	bl	b40a2 <__cxa_guard_acquire>
   b99c0:	b168      	cbz	r0, b99de <_Z19__fetch_global_Wirev+0x36>
   b99c2:	a801      	add	r0, sp, #4
   b99c4:	f7ff ffda 	bl	b997c <_Z17acquireWireBufferv>
   b99c8:	aa01      	add	r2, sp, #4
   b99ca:	4621      	mov	r1, r4
   b99cc:	4806      	ldr	r0, [pc, #24]	; (b99e8 <_Z19__fetch_global_Wirev+0x40>)
   b99ce:	f7fe fc95 	bl	b82fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b99d2:	4628      	mov	r0, r5
   b99d4:	f7fa fb6a 	bl	b40ac <__cxa_guard_release>
   b99d8:	4804      	ldr	r0, [pc, #16]	; (b99ec <_Z19__fetch_global_Wirev+0x44>)
   b99da:	f000 fdd9 	bl	ba590 <atexit>
	return wire;
}
   b99de:	4802      	ldr	r0, [pc, #8]	; (b99e8 <_Z19__fetch_global_Wirev+0x40>)
   b99e0:	b007      	add	sp, #28
   b99e2:	bd30      	pop	{r4, r5, pc}
   b99e4:	2003e72c 	.word	0x2003e72c
   b99e8:	2003e730 	.word	0x2003e730
   b99ec:	000b9979 	.word	0x000b9979

000b99f0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b99f0:	4770      	bx	lr
	...

000b99f4 <_Z20acquireSerial1Bufferv>:
{
   b99f4:	b538      	push	{r3, r4, r5, lr}
   b99f6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b99f8:	2514      	movs	r5, #20
   b99fa:	462a      	mov	r2, r5
   b99fc:	2100      	movs	r1, #0
   b99fe:	f000 fe21 	bl	ba644 <memset>
   b9a02:	8025      	strh	r5, [r4, #0]
   b9a04:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9a06:	4907      	ldr	r1, [pc, #28]	; (b9a24 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b9a08:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9a0a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b9a0c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9a0e:	f000 f831 	bl	b9a74 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9a12:	4904      	ldr	r1, [pc, #16]	; (b9a24 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b9a14:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9a16:	4628      	mov	r0, r5
   b9a18:	f000 f82c 	bl	b9a74 <_ZnajRKSt9nothrow_t>
    };
   b9a1c:	60e0      	str	r0, [r4, #12]
}
   b9a1e:	4620      	mov	r0, r4
   b9a20:	bd38      	pop	{r3, r4, r5, pc}
   b9a22:	bf00      	nop
   b9a24:	000bb718 	.word	0x000bb718

000b9a28 <_Z22__fetch_global_Serial1v>:
{
   b9a28:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9a2a:	4d0e      	ldr	r5, [pc, #56]	; (b9a64 <_Z22__fetch_global_Serial1v+0x3c>)
   b9a2c:	7829      	ldrb	r1, [r5, #0]
   b9a2e:	f3bf 8f5b 	dmb	ish
   b9a32:	f011 0401 	ands.w	r4, r1, #1
{
   b9a36:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9a38:	d111      	bne.n	b9a5e <_Z22__fetch_global_Serial1v+0x36>
   b9a3a:	4628      	mov	r0, r5
   b9a3c:	f7fa fb31 	bl	b40a2 <__cxa_guard_acquire>
   b9a40:	b168      	cbz	r0, b9a5e <_Z22__fetch_global_Serial1v+0x36>
   b9a42:	a801      	add	r0, sp, #4
   b9a44:	f7ff ffd6 	bl	b99f4 <_Z20acquireSerial1Bufferv>
   b9a48:	aa01      	add	r2, sp, #4
   b9a4a:	4621      	mov	r1, r4
   b9a4c:	4806      	ldr	r0, [pc, #24]	; (b9a68 <_Z22__fetch_global_Serial1v+0x40>)
   b9a4e:	f7ff fce7 	bl	b9420 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b9a52:	4628      	mov	r0, r5
   b9a54:	f7fa fb2a 	bl	b40ac <__cxa_guard_release>
   b9a58:	4804      	ldr	r0, [pc, #16]	; (b9a6c <_Z22__fetch_global_Serial1v+0x44>)
   b9a5a:	f000 fd99 	bl	ba590 <atexit>
    return serial1;
}
   b9a5e:	4802      	ldr	r0, [pc, #8]	; (b9a68 <_Z22__fetch_global_Serial1v+0x40>)
   b9a60:	b007      	add	sp, #28
   b9a62:	bd30      	pop	{r4, r5, pc}
   b9a64:	2003e744 	.word	0x2003e744
   b9a68:	2003e748 	.word	0x2003e748
   b9a6c:	000b99f1 	.word	0x000b99f1

000b9a70 <_ZnwjRKSt9nothrow_t>:
   b9a70:	f7fa bb11 	b.w	b4096 <_Znwj>

000b9a74 <_ZnajRKSt9nothrow_t>:
   b9a74:	f7fa bb11 	b.w	b409a <_Znaj>

000b9a78 <_ZSt25__throw_bad_function_callv>:
   b9a78:	b508      	push	{r3, lr}
   b9a7a:	f7fd f919 	bl	b6cb0 <abort>
	...

000b9a80 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b9a80:	4901      	ldr	r1, [pc, #4]	; (b9a88 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b9a82:	f000 b8f9 	b.w	b9c78 <_ZNKSt9type_infoeqERKS_>
   b9a86:	bf00      	nop
   b9a88:	000bb734 	.word	0x000bb734

000b9a8c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b9a8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9a8e:	2400      	movs	r4, #0
   b9a90:	2310      	movs	r3, #16
   b9a92:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b9a96:	6803      	ldr	r3, [r0, #0]
   b9a98:	4615      	mov	r5, r2
   b9a9a:	699e      	ldr	r6, [r3, #24]
   b9a9c:	6812      	ldr	r2, [r2, #0]
   b9a9e:	466b      	mov	r3, sp
   b9aa0:	e9cd 4400 	strd	r4, r4, [sp]
   b9aa4:	47b0      	blx	r6
   b9aa6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b9aaa:	f003 0306 	and.w	r3, r3, #6
   b9aae:	2b06      	cmp	r3, #6
   b9ab0:	bf03      	ittte	eq
   b9ab2:	9b00      	ldreq	r3, [sp, #0]
   b9ab4:	602b      	streq	r3, [r5, #0]
   b9ab6:	2001      	moveq	r0, #1
   b9ab8:	4620      	movne	r0, r4
   b9aba:	b004      	add	sp, #16
   b9abc:	bd70      	pop	{r4, r5, r6, pc}

000b9abe <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b9abe:	9800      	ldr	r0, [sp, #0]
   b9ac0:	4290      	cmp	r0, r2
   b9ac2:	bf14      	ite	ne
   b9ac4:	2001      	movne	r0, #1
   b9ac6:	2006      	moveq	r0, #6
   b9ac8:	4770      	bx	lr
	...

000b9acc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b9acc:	b510      	push	{r4, lr}
   b9ace:	4b03      	ldr	r3, [pc, #12]	; (b9adc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9ad0:	6003      	str	r3, [r0, #0]
   b9ad2:	4604      	mov	r4, r0
   b9ad4:	f000 f8cd 	bl	b9c72 <_ZNSt9type_infoD1Ev>
   b9ad8:	4620      	mov	r0, r4
   b9ada:	bd10      	pop	{r4, pc}
   b9adc:	000bb774 	.word	0x000bb774

000b9ae0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9ae0:	b510      	push	{r4, lr}
   b9ae2:	4604      	mov	r4, r0
   b9ae4:	f7ff fff2 	bl	b9acc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9ae8:	4620      	mov	r0, r4
   b9aea:	2108      	movs	r1, #8
   b9aec:	f7fa fad7 	bl	b409e <_ZdlPvj>
   b9af0:	4620      	mov	r0, r4
   b9af2:	bd10      	pop	{r4, pc}

000b9af4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9af8:	461f      	mov	r7, r3
   b9afa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9afe:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9b02:	4598      	cmp	r8, r3
   b9b04:	4606      	mov	r6, r0
   b9b06:	4615      	mov	r5, r2
   b9b08:	d107      	bne.n	b9b1a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9b0a:	9907      	ldr	r1, [sp, #28]
   b9b0c:	f000 f8b4 	bl	b9c78 <_ZNKSt9type_infoeqERKS_>
   b9b10:	b118      	cbz	r0, b9b1a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9b12:	7165      	strb	r5, [r4, #5]
   b9b14:	2000      	movs	r0, #0
   b9b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9b1a:	4639      	mov	r1, r7
   b9b1c:	4630      	mov	r0, r6
   b9b1e:	f000 f8ab 	bl	b9c78 <_ZNKSt9type_infoeqERKS_>
   b9b22:	2800      	cmp	r0, #0
   b9b24:	d0f6      	beq.n	b9b14 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b9b26:	2301      	movs	r3, #1
   b9b28:	f8c4 8000 	str.w	r8, [r4]
   b9b2c:	7125      	strb	r5, [r4, #4]
   b9b2e:	71a3      	strb	r3, [r4, #6]
   b9b30:	e7f0      	b.n	b9b14 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9b32 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9b32:	b538      	push	{r3, r4, r5, lr}
   b9b34:	4615      	mov	r5, r2
   b9b36:	461c      	mov	r4, r3
   b9b38:	f000 f89e 	bl	b9c78 <_ZNKSt9type_infoeqERKS_>
   b9b3c:	b120      	cbz	r0, b9b48 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9b3e:	2308      	movs	r3, #8
   b9b40:	60e3      	str	r3, [r4, #12]
   b9b42:	2306      	movs	r3, #6
   b9b44:	6025      	str	r5, [r4, #0]
   b9b46:	7123      	strb	r3, [r4, #4]
   b9b48:	bd38      	pop	{r3, r4, r5, pc}

000b9b4a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b9b4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9b4c:	4605      	mov	r5, r0
   b9b4e:	460c      	mov	r4, r1
   b9b50:	9201      	str	r2, [sp, #4]
   b9b52:	461e      	mov	r6, r3
   b9b54:	f000 f890 	bl	b9c78 <_ZNKSt9type_infoeqERKS_>
   b9b58:	b950      	cbnz	r0, b9b70 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9b5a:	2e03      	cmp	r6, #3
   b9b5c:	d808      	bhi.n	b9b70 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9b5e:	6823      	ldr	r3, [r4, #0]
   b9b60:	9a01      	ldr	r2, [sp, #4]
   b9b62:	695b      	ldr	r3, [r3, #20]
   b9b64:	4629      	mov	r1, r5
   b9b66:	4620      	mov	r0, r4
   b9b68:	b002      	add	sp, #8
   b9b6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9b6e:	4718      	bx	r3
   b9b70:	b002      	add	sp, #8
   b9b72:	bd70      	pop	{r4, r5, r6, pc}

000b9b74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9b74:	b510      	push	{r4, lr}
   b9b76:	4b03      	ldr	r3, [pc, #12]	; (b9b84 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b9b78:	6003      	str	r3, [r0, #0]
   b9b7a:	4604      	mov	r4, r0
   b9b7c:	f7ff ffa6 	bl	b9acc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9b80:	4620      	mov	r0, r4
   b9b82:	bd10      	pop	{r4, pc}
   b9b84:	000bb7d4 	.word	0x000bb7d4

000b9b88 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9b88:	b510      	push	{r4, lr}
   b9b8a:	4604      	mov	r4, r0
   b9b8c:	f7ff fff2 	bl	b9b74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9b90:	4620      	mov	r0, r4
   b9b92:	210c      	movs	r1, #12
   b9b94:	f7fa fa83 	bl	b409e <_ZdlPvj>
   b9b98:	4620      	mov	r0, r4
   b9b9a:	bd10      	pop	{r4, pc}

000b9b9c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b9b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9b9e:	9f08      	ldr	r7, [sp, #32]
   b9ba0:	4297      	cmp	r7, r2
   b9ba2:	4605      	mov	r5, r0
   b9ba4:	460e      	mov	r6, r1
   b9ba6:	4614      	mov	r4, r2
   b9ba8:	d00a      	beq.n	b9bc0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b9baa:	68a8      	ldr	r0, [r5, #8]
   b9bac:	6802      	ldr	r2, [r0, #0]
   b9bae:	9708      	str	r7, [sp, #32]
   b9bb0:	6a15      	ldr	r5, [r2, #32]
   b9bb2:	4631      	mov	r1, r6
   b9bb4:	4622      	mov	r2, r4
   b9bb6:	46ac      	mov	ip, r5
   b9bb8:	b003      	add	sp, #12
   b9bba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9bbe:	4760      	bx	ip
   b9bc0:	4619      	mov	r1, r3
   b9bc2:	9301      	str	r3, [sp, #4]
   b9bc4:	f000 f858 	bl	b9c78 <_ZNKSt9type_infoeqERKS_>
   b9bc8:	9b01      	ldr	r3, [sp, #4]
   b9bca:	2800      	cmp	r0, #0
   b9bcc:	d0ed      	beq.n	b9baa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b9bce:	2006      	movs	r0, #6
   b9bd0:	b003      	add	sp, #12
   b9bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9bd4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b9bd4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9bd8:	460d      	mov	r5, r1
   b9bda:	4619      	mov	r1, r3
   b9bdc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9be0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b9be4:	4681      	mov	r9, r0
   b9be6:	4617      	mov	r7, r2
   b9be8:	4698      	mov	r8, r3
   b9bea:	f000 f845 	bl	b9c78 <_ZNKSt9type_infoeqERKS_>
   b9bee:	b190      	cbz	r0, b9c16 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9bf0:	2d00      	cmp	r5, #0
   b9bf2:	6034      	str	r4, [r6, #0]
   b9bf4:	7137      	strb	r7, [r6, #4]
   b9bf6:	db09      	blt.n	b9c0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9bf8:	1961      	adds	r1, r4, r5
   b9bfa:	458a      	cmp	sl, r1
   b9bfc:	bf0c      	ite	eq
   b9bfe:	2106      	moveq	r1, #6
   b9c00:	2101      	movne	r1, #1
   b9c02:	71b1      	strb	r1, [r6, #6]
   b9c04:	2000      	movs	r0, #0
   b9c06:	b001      	add	sp, #4
   b9c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9c0c:	3502      	adds	r5, #2
   b9c0e:	d1f9      	bne.n	b9c04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9c10:	2301      	movs	r3, #1
   b9c12:	71b3      	strb	r3, [r6, #6]
   b9c14:	e7f6      	b.n	b9c04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9c16:	4554      	cmp	r4, sl
   b9c18:	d106      	bne.n	b9c28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9c1a:	4659      	mov	r1, fp
   b9c1c:	4648      	mov	r0, r9
   b9c1e:	f000 f82b 	bl	b9c78 <_ZNKSt9type_infoeqERKS_>
   b9c22:	b108      	cbz	r0, b9c28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9c24:	7177      	strb	r7, [r6, #5]
   b9c26:	e7ed      	b.n	b9c04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9c28:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9c2c:	6803      	ldr	r3, [r0, #0]
   b9c2e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b9c32:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b9c36:	69dc      	ldr	r4, [r3, #28]
   b9c38:	463a      	mov	r2, r7
   b9c3a:	4643      	mov	r3, r8
   b9c3c:	4629      	mov	r1, r5
   b9c3e:	46a4      	mov	ip, r4
   b9c40:	b001      	add	sp, #4
   b9c42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9c46:	4760      	bx	ip

000b9c48 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9c4c:	4607      	mov	r7, r0
   b9c4e:	460c      	mov	r4, r1
   b9c50:	4615      	mov	r5, r2
   b9c52:	461e      	mov	r6, r3
   b9c54:	f7ff ff6d 	bl	b9b32 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b9c58:	b948      	cbnz	r0, b9c6e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b9c5a:	68b8      	ldr	r0, [r7, #8]
   b9c5c:	6803      	ldr	r3, [r0, #0]
   b9c5e:	699f      	ldr	r7, [r3, #24]
   b9c60:	462a      	mov	r2, r5
   b9c62:	4633      	mov	r3, r6
   b9c64:	4621      	mov	r1, r4
   b9c66:	46bc      	mov	ip, r7
   b9c68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9c6c:	4760      	bx	ip
   b9c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9c72 <_ZNSt9type_infoD1Ev>:
   b9c72:	4770      	bx	lr

000b9c74 <_ZNKSt9type_info14__is_pointer_pEv>:
   b9c74:	2000      	movs	r0, #0
   b9c76:	4770      	bx	lr

000b9c78 <_ZNKSt9type_infoeqERKS_>:
   b9c78:	4281      	cmp	r1, r0
   b9c7a:	b508      	push	{r3, lr}
   b9c7c:	d00e      	beq.n	b9c9c <_ZNKSt9type_infoeqERKS_+0x24>
   b9c7e:	6840      	ldr	r0, [r0, #4]
   b9c80:	7803      	ldrb	r3, [r0, #0]
   b9c82:	2b2a      	cmp	r3, #42	; 0x2a
   b9c84:	d00c      	beq.n	b9ca0 <_ZNKSt9type_infoeqERKS_+0x28>
   b9c86:	6849      	ldr	r1, [r1, #4]
   b9c88:	780b      	ldrb	r3, [r1, #0]
   b9c8a:	2b2a      	cmp	r3, #42	; 0x2a
   b9c8c:	bf08      	it	eq
   b9c8e:	3101      	addeq	r1, #1
   b9c90:	f000 fd0e 	bl	ba6b0 <strcmp>
   b9c94:	fab0 f080 	clz	r0, r0
   b9c98:	0940      	lsrs	r0, r0, #5
   b9c9a:	bd08      	pop	{r3, pc}
   b9c9c:	2001      	movs	r0, #1
   b9c9e:	e7fc      	b.n	b9c9a <_ZNKSt9type_infoeqERKS_+0x22>
   b9ca0:	2000      	movs	r0, #0
   b9ca2:	e7fa      	b.n	b9c9a <_ZNKSt9type_infoeqERKS_+0x22>

000b9ca4 <__aeabi_drsub>:
   b9ca4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b9ca8:	e002      	b.n	b9cb0 <__adddf3>
   b9caa:	bf00      	nop

000b9cac <__aeabi_dsub>:
   b9cac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b9cb0 <__adddf3>:
   b9cb0:	b530      	push	{r4, r5, lr}
   b9cb2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b9cb6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b9cba:	ea94 0f05 	teq	r4, r5
   b9cbe:	bf08      	it	eq
   b9cc0:	ea90 0f02 	teqeq	r0, r2
   b9cc4:	bf1f      	itttt	ne
   b9cc6:	ea54 0c00 	orrsne.w	ip, r4, r0
   b9cca:	ea55 0c02 	orrsne.w	ip, r5, r2
   b9cce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b9cd2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9cd6:	f000 80e2 	beq.w	b9e9e <__adddf3+0x1ee>
   b9cda:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b9cde:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b9ce2:	bfb8      	it	lt
   b9ce4:	426d      	neglt	r5, r5
   b9ce6:	dd0c      	ble.n	b9d02 <__adddf3+0x52>
   b9ce8:	442c      	add	r4, r5
   b9cea:	ea80 0202 	eor.w	r2, r0, r2
   b9cee:	ea81 0303 	eor.w	r3, r1, r3
   b9cf2:	ea82 0000 	eor.w	r0, r2, r0
   b9cf6:	ea83 0101 	eor.w	r1, r3, r1
   b9cfa:	ea80 0202 	eor.w	r2, r0, r2
   b9cfe:	ea81 0303 	eor.w	r3, r1, r3
   b9d02:	2d36      	cmp	r5, #54	; 0x36
   b9d04:	bf88      	it	hi
   b9d06:	bd30      	pophi	{r4, r5, pc}
   b9d08:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9d0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9d10:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b9d14:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b9d18:	d002      	beq.n	b9d20 <__adddf3+0x70>
   b9d1a:	4240      	negs	r0, r0
   b9d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9d20:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b9d24:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9d28:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b9d2c:	d002      	beq.n	b9d34 <__adddf3+0x84>
   b9d2e:	4252      	negs	r2, r2
   b9d30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9d34:	ea94 0f05 	teq	r4, r5
   b9d38:	f000 80a7 	beq.w	b9e8a <__adddf3+0x1da>
   b9d3c:	f1a4 0401 	sub.w	r4, r4, #1
   b9d40:	f1d5 0e20 	rsbs	lr, r5, #32
   b9d44:	db0d      	blt.n	b9d62 <__adddf3+0xb2>
   b9d46:	fa02 fc0e 	lsl.w	ip, r2, lr
   b9d4a:	fa22 f205 	lsr.w	r2, r2, r5
   b9d4e:	1880      	adds	r0, r0, r2
   b9d50:	f141 0100 	adc.w	r1, r1, #0
   b9d54:	fa03 f20e 	lsl.w	r2, r3, lr
   b9d58:	1880      	adds	r0, r0, r2
   b9d5a:	fa43 f305 	asr.w	r3, r3, r5
   b9d5e:	4159      	adcs	r1, r3
   b9d60:	e00e      	b.n	b9d80 <__adddf3+0xd0>
   b9d62:	f1a5 0520 	sub.w	r5, r5, #32
   b9d66:	f10e 0e20 	add.w	lr, lr, #32
   b9d6a:	2a01      	cmp	r2, #1
   b9d6c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b9d70:	bf28      	it	cs
   b9d72:	f04c 0c02 	orrcs.w	ip, ip, #2
   b9d76:	fa43 f305 	asr.w	r3, r3, r5
   b9d7a:	18c0      	adds	r0, r0, r3
   b9d7c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b9d80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9d84:	d507      	bpl.n	b9d96 <__adddf3+0xe6>
   b9d86:	f04f 0e00 	mov.w	lr, #0
   b9d8a:	f1dc 0c00 	rsbs	ip, ip, #0
   b9d8e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b9d92:	eb6e 0101 	sbc.w	r1, lr, r1
   b9d96:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b9d9a:	d31b      	bcc.n	b9dd4 <__adddf3+0x124>
   b9d9c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b9da0:	d30c      	bcc.n	b9dbc <__adddf3+0x10c>
   b9da2:	0849      	lsrs	r1, r1, #1
   b9da4:	ea5f 0030 	movs.w	r0, r0, rrx
   b9da8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b9dac:	f104 0401 	add.w	r4, r4, #1
   b9db0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b9db4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b9db8:	f080 809a 	bcs.w	b9ef0 <__adddf3+0x240>
   b9dbc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b9dc0:	bf08      	it	eq
   b9dc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9dc6:	f150 0000 	adcs.w	r0, r0, #0
   b9dca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9dce:	ea41 0105 	orr.w	r1, r1, r5
   b9dd2:	bd30      	pop	{r4, r5, pc}
   b9dd4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b9dd8:	4140      	adcs	r0, r0
   b9dda:	eb41 0101 	adc.w	r1, r1, r1
   b9dde:	3c01      	subs	r4, #1
   b9de0:	bf28      	it	cs
   b9de2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b9de6:	d2e9      	bcs.n	b9dbc <__adddf3+0x10c>
   b9de8:	f091 0f00 	teq	r1, #0
   b9dec:	bf04      	itt	eq
   b9dee:	4601      	moveq	r1, r0
   b9df0:	2000      	moveq	r0, #0
   b9df2:	fab1 f381 	clz	r3, r1
   b9df6:	bf08      	it	eq
   b9df8:	3320      	addeq	r3, #32
   b9dfa:	f1a3 030b 	sub.w	r3, r3, #11
   b9dfe:	f1b3 0220 	subs.w	r2, r3, #32
   b9e02:	da0c      	bge.n	b9e1e <__adddf3+0x16e>
   b9e04:	320c      	adds	r2, #12
   b9e06:	dd08      	ble.n	b9e1a <__adddf3+0x16a>
   b9e08:	f102 0c14 	add.w	ip, r2, #20
   b9e0c:	f1c2 020c 	rsb	r2, r2, #12
   b9e10:	fa01 f00c 	lsl.w	r0, r1, ip
   b9e14:	fa21 f102 	lsr.w	r1, r1, r2
   b9e18:	e00c      	b.n	b9e34 <__adddf3+0x184>
   b9e1a:	f102 0214 	add.w	r2, r2, #20
   b9e1e:	bfd8      	it	le
   b9e20:	f1c2 0c20 	rsble	ip, r2, #32
   b9e24:	fa01 f102 	lsl.w	r1, r1, r2
   b9e28:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9e2c:	bfdc      	itt	le
   b9e2e:	ea41 010c 	orrle.w	r1, r1, ip
   b9e32:	4090      	lslle	r0, r2
   b9e34:	1ae4      	subs	r4, r4, r3
   b9e36:	bfa2      	ittt	ge
   b9e38:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9e3c:	4329      	orrge	r1, r5
   b9e3e:	bd30      	popge	{r4, r5, pc}
   b9e40:	ea6f 0404 	mvn.w	r4, r4
   b9e44:	3c1f      	subs	r4, #31
   b9e46:	da1c      	bge.n	b9e82 <__adddf3+0x1d2>
   b9e48:	340c      	adds	r4, #12
   b9e4a:	dc0e      	bgt.n	b9e6a <__adddf3+0x1ba>
   b9e4c:	f104 0414 	add.w	r4, r4, #20
   b9e50:	f1c4 0220 	rsb	r2, r4, #32
   b9e54:	fa20 f004 	lsr.w	r0, r0, r4
   b9e58:	fa01 f302 	lsl.w	r3, r1, r2
   b9e5c:	ea40 0003 	orr.w	r0, r0, r3
   b9e60:	fa21 f304 	lsr.w	r3, r1, r4
   b9e64:	ea45 0103 	orr.w	r1, r5, r3
   b9e68:	bd30      	pop	{r4, r5, pc}
   b9e6a:	f1c4 040c 	rsb	r4, r4, #12
   b9e6e:	f1c4 0220 	rsb	r2, r4, #32
   b9e72:	fa20 f002 	lsr.w	r0, r0, r2
   b9e76:	fa01 f304 	lsl.w	r3, r1, r4
   b9e7a:	ea40 0003 	orr.w	r0, r0, r3
   b9e7e:	4629      	mov	r1, r5
   b9e80:	bd30      	pop	{r4, r5, pc}
   b9e82:	fa21 f004 	lsr.w	r0, r1, r4
   b9e86:	4629      	mov	r1, r5
   b9e88:	bd30      	pop	{r4, r5, pc}
   b9e8a:	f094 0f00 	teq	r4, #0
   b9e8e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b9e92:	bf06      	itte	eq
   b9e94:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b9e98:	3401      	addeq	r4, #1
   b9e9a:	3d01      	subne	r5, #1
   b9e9c:	e74e      	b.n	b9d3c <__adddf3+0x8c>
   b9e9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9ea2:	bf18      	it	ne
   b9ea4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9ea8:	d029      	beq.n	b9efe <__adddf3+0x24e>
   b9eaa:	ea94 0f05 	teq	r4, r5
   b9eae:	bf08      	it	eq
   b9eb0:	ea90 0f02 	teqeq	r0, r2
   b9eb4:	d005      	beq.n	b9ec2 <__adddf3+0x212>
   b9eb6:	ea54 0c00 	orrs.w	ip, r4, r0
   b9eba:	bf04      	itt	eq
   b9ebc:	4619      	moveq	r1, r3
   b9ebe:	4610      	moveq	r0, r2
   b9ec0:	bd30      	pop	{r4, r5, pc}
   b9ec2:	ea91 0f03 	teq	r1, r3
   b9ec6:	bf1e      	ittt	ne
   b9ec8:	2100      	movne	r1, #0
   b9eca:	2000      	movne	r0, #0
   b9ecc:	bd30      	popne	{r4, r5, pc}
   b9ece:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b9ed2:	d105      	bne.n	b9ee0 <__adddf3+0x230>
   b9ed4:	0040      	lsls	r0, r0, #1
   b9ed6:	4149      	adcs	r1, r1
   b9ed8:	bf28      	it	cs
   b9eda:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b9ede:	bd30      	pop	{r4, r5, pc}
   b9ee0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9ee4:	bf3c      	itt	cc
   b9ee6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9eea:	bd30      	popcc	{r4, r5, pc}
   b9eec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9ef0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9ef4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9ef8:	f04f 0000 	mov.w	r0, #0
   b9efc:	bd30      	pop	{r4, r5, pc}
   b9efe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9f02:	bf1a      	itte	ne
   b9f04:	4619      	movne	r1, r3
   b9f06:	4610      	movne	r0, r2
   b9f08:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9f0c:	bf1c      	itt	ne
   b9f0e:	460b      	movne	r3, r1
   b9f10:	4602      	movne	r2, r0
   b9f12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9f16:	bf06      	itte	eq
   b9f18:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9f1c:	ea91 0f03 	teqeq	r1, r3
   b9f20:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9f24:	bd30      	pop	{r4, r5, pc}
   b9f26:	bf00      	nop

000b9f28 <__aeabi_ui2d>:
   b9f28:	f090 0f00 	teq	r0, #0
   b9f2c:	bf04      	itt	eq
   b9f2e:	2100      	moveq	r1, #0
   b9f30:	4770      	bxeq	lr
   b9f32:	b530      	push	{r4, r5, lr}
   b9f34:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9f38:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9f3c:	f04f 0500 	mov.w	r5, #0
   b9f40:	f04f 0100 	mov.w	r1, #0
   b9f44:	e750      	b.n	b9de8 <__adddf3+0x138>
   b9f46:	bf00      	nop

000b9f48 <__aeabi_i2d>:
   b9f48:	f090 0f00 	teq	r0, #0
   b9f4c:	bf04      	itt	eq
   b9f4e:	2100      	moveq	r1, #0
   b9f50:	4770      	bxeq	lr
   b9f52:	b530      	push	{r4, r5, lr}
   b9f54:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9f58:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9f5c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b9f60:	bf48      	it	mi
   b9f62:	4240      	negmi	r0, r0
   b9f64:	f04f 0100 	mov.w	r1, #0
   b9f68:	e73e      	b.n	b9de8 <__adddf3+0x138>
   b9f6a:	bf00      	nop

000b9f6c <__aeabi_f2d>:
   b9f6c:	0042      	lsls	r2, r0, #1
   b9f6e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b9f72:	ea4f 0131 	mov.w	r1, r1, rrx
   b9f76:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b9f7a:	bf1f      	itttt	ne
   b9f7c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b9f80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9f84:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9f88:	4770      	bxne	lr
   b9f8a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b9f8e:	bf08      	it	eq
   b9f90:	4770      	bxeq	lr
   b9f92:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b9f96:	bf04      	itt	eq
   b9f98:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9f9c:	4770      	bxeq	lr
   b9f9e:	b530      	push	{r4, r5, lr}
   b9fa0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b9fa4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9fa8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9fac:	e71c      	b.n	b9de8 <__adddf3+0x138>
   b9fae:	bf00      	nop

000b9fb0 <__aeabi_ul2d>:
   b9fb0:	ea50 0201 	orrs.w	r2, r0, r1
   b9fb4:	bf08      	it	eq
   b9fb6:	4770      	bxeq	lr
   b9fb8:	b530      	push	{r4, r5, lr}
   b9fba:	f04f 0500 	mov.w	r5, #0
   b9fbe:	e00a      	b.n	b9fd6 <__aeabi_l2d+0x16>

000b9fc0 <__aeabi_l2d>:
   b9fc0:	ea50 0201 	orrs.w	r2, r0, r1
   b9fc4:	bf08      	it	eq
   b9fc6:	4770      	bxeq	lr
   b9fc8:	b530      	push	{r4, r5, lr}
   b9fca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b9fce:	d502      	bpl.n	b9fd6 <__aeabi_l2d+0x16>
   b9fd0:	4240      	negs	r0, r0
   b9fd2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9fd6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9fda:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9fde:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b9fe2:	f43f aed8 	beq.w	b9d96 <__adddf3+0xe6>
   b9fe6:	f04f 0203 	mov.w	r2, #3
   b9fea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9fee:	bf18      	it	ne
   b9ff0:	3203      	addne	r2, #3
   b9ff2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9ff6:	bf18      	it	ne
   b9ff8:	3203      	addne	r2, #3
   b9ffa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b9ffe:	f1c2 0320 	rsb	r3, r2, #32
   ba002:	fa00 fc03 	lsl.w	ip, r0, r3
   ba006:	fa20 f002 	lsr.w	r0, r0, r2
   ba00a:	fa01 fe03 	lsl.w	lr, r1, r3
   ba00e:	ea40 000e 	orr.w	r0, r0, lr
   ba012:	fa21 f102 	lsr.w	r1, r1, r2
   ba016:	4414      	add	r4, r2
   ba018:	e6bd      	b.n	b9d96 <__adddf3+0xe6>
   ba01a:	bf00      	nop

000ba01c <__aeabi_dmul>:
   ba01c:	b570      	push	{r4, r5, r6, lr}
   ba01e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ba022:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ba026:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ba02a:	bf1d      	ittte	ne
   ba02c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ba030:	ea94 0f0c 	teqne	r4, ip
   ba034:	ea95 0f0c 	teqne	r5, ip
   ba038:	f000 f8de 	bleq	ba1f8 <__aeabi_dmul+0x1dc>
   ba03c:	442c      	add	r4, r5
   ba03e:	ea81 0603 	eor.w	r6, r1, r3
   ba042:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   ba046:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   ba04a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   ba04e:	bf18      	it	ne
   ba050:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   ba054:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba058:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba05c:	d038      	beq.n	ba0d0 <__aeabi_dmul+0xb4>
   ba05e:	fba0 ce02 	umull	ip, lr, r0, r2
   ba062:	f04f 0500 	mov.w	r5, #0
   ba066:	fbe1 e502 	umlal	lr, r5, r1, r2
   ba06a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   ba06e:	fbe0 e503 	umlal	lr, r5, r0, r3
   ba072:	f04f 0600 	mov.w	r6, #0
   ba076:	fbe1 5603 	umlal	r5, r6, r1, r3
   ba07a:	f09c 0f00 	teq	ip, #0
   ba07e:	bf18      	it	ne
   ba080:	f04e 0e01 	orrne.w	lr, lr, #1
   ba084:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   ba088:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   ba08c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   ba090:	d204      	bcs.n	ba09c <__aeabi_dmul+0x80>
   ba092:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   ba096:	416d      	adcs	r5, r5
   ba098:	eb46 0606 	adc.w	r6, r6, r6
   ba09c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   ba0a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   ba0a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   ba0a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   ba0ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   ba0b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ba0b4:	bf88      	it	hi
   ba0b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ba0ba:	d81e      	bhi.n	ba0fa <__aeabi_dmul+0xde>
   ba0bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   ba0c0:	bf08      	it	eq
   ba0c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   ba0c6:	f150 0000 	adcs.w	r0, r0, #0
   ba0ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba0ce:	bd70      	pop	{r4, r5, r6, pc}
   ba0d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   ba0d4:	ea46 0101 	orr.w	r1, r6, r1
   ba0d8:	ea40 0002 	orr.w	r0, r0, r2
   ba0dc:	ea81 0103 	eor.w	r1, r1, r3
   ba0e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   ba0e4:	bfc2      	ittt	gt
   ba0e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   ba0ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ba0ee:	bd70      	popgt	{r4, r5, r6, pc}
   ba0f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba0f4:	f04f 0e00 	mov.w	lr, #0
   ba0f8:	3c01      	subs	r4, #1
   ba0fa:	f300 80ab 	bgt.w	ba254 <__aeabi_dmul+0x238>
   ba0fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
   ba102:	bfde      	ittt	le
   ba104:	2000      	movle	r0, #0
   ba106:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   ba10a:	bd70      	pople	{r4, r5, r6, pc}
   ba10c:	f1c4 0400 	rsb	r4, r4, #0
   ba110:	3c20      	subs	r4, #32
   ba112:	da35      	bge.n	ba180 <__aeabi_dmul+0x164>
   ba114:	340c      	adds	r4, #12
   ba116:	dc1b      	bgt.n	ba150 <__aeabi_dmul+0x134>
   ba118:	f104 0414 	add.w	r4, r4, #20
   ba11c:	f1c4 0520 	rsb	r5, r4, #32
   ba120:	fa00 f305 	lsl.w	r3, r0, r5
   ba124:	fa20 f004 	lsr.w	r0, r0, r4
   ba128:	fa01 f205 	lsl.w	r2, r1, r5
   ba12c:	ea40 0002 	orr.w	r0, r0, r2
   ba130:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   ba134:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba138:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ba13c:	fa21 f604 	lsr.w	r6, r1, r4
   ba140:	eb42 0106 	adc.w	r1, r2, r6
   ba144:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba148:	bf08      	it	eq
   ba14a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba14e:	bd70      	pop	{r4, r5, r6, pc}
   ba150:	f1c4 040c 	rsb	r4, r4, #12
   ba154:	f1c4 0520 	rsb	r5, r4, #32
   ba158:	fa00 f304 	lsl.w	r3, r0, r4
   ba15c:	fa20 f005 	lsr.w	r0, r0, r5
   ba160:	fa01 f204 	lsl.w	r2, r1, r4
   ba164:	ea40 0002 	orr.w	r0, r0, r2
   ba168:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba16c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ba170:	f141 0100 	adc.w	r1, r1, #0
   ba174:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba178:	bf08      	it	eq
   ba17a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba17e:	bd70      	pop	{r4, r5, r6, pc}
   ba180:	f1c4 0520 	rsb	r5, r4, #32
   ba184:	fa00 f205 	lsl.w	r2, r0, r5
   ba188:	ea4e 0e02 	orr.w	lr, lr, r2
   ba18c:	fa20 f304 	lsr.w	r3, r0, r4
   ba190:	fa01 f205 	lsl.w	r2, r1, r5
   ba194:	ea43 0302 	orr.w	r3, r3, r2
   ba198:	fa21 f004 	lsr.w	r0, r1, r4
   ba19c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba1a0:	fa21 f204 	lsr.w	r2, r1, r4
   ba1a4:	ea20 0002 	bic.w	r0, r0, r2
   ba1a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   ba1ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba1b0:	bf08      	it	eq
   ba1b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba1b6:	bd70      	pop	{r4, r5, r6, pc}
   ba1b8:	f094 0f00 	teq	r4, #0
   ba1bc:	d10f      	bne.n	ba1de <__aeabi_dmul+0x1c2>
   ba1be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   ba1c2:	0040      	lsls	r0, r0, #1
   ba1c4:	eb41 0101 	adc.w	r1, r1, r1
   ba1c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba1cc:	bf08      	it	eq
   ba1ce:	3c01      	subeq	r4, #1
   ba1d0:	d0f7      	beq.n	ba1c2 <__aeabi_dmul+0x1a6>
   ba1d2:	ea41 0106 	orr.w	r1, r1, r6
   ba1d6:	f095 0f00 	teq	r5, #0
   ba1da:	bf18      	it	ne
   ba1dc:	4770      	bxne	lr
   ba1de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   ba1e2:	0052      	lsls	r2, r2, #1
   ba1e4:	eb43 0303 	adc.w	r3, r3, r3
   ba1e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   ba1ec:	bf08      	it	eq
   ba1ee:	3d01      	subeq	r5, #1
   ba1f0:	d0f7      	beq.n	ba1e2 <__aeabi_dmul+0x1c6>
   ba1f2:	ea43 0306 	orr.w	r3, r3, r6
   ba1f6:	4770      	bx	lr
   ba1f8:	ea94 0f0c 	teq	r4, ip
   ba1fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ba200:	bf18      	it	ne
   ba202:	ea95 0f0c 	teqne	r5, ip
   ba206:	d00c      	beq.n	ba222 <__aeabi_dmul+0x206>
   ba208:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba20c:	bf18      	it	ne
   ba20e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba212:	d1d1      	bne.n	ba1b8 <__aeabi_dmul+0x19c>
   ba214:	ea81 0103 	eor.w	r1, r1, r3
   ba218:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba21c:	f04f 0000 	mov.w	r0, #0
   ba220:	bd70      	pop	{r4, r5, r6, pc}
   ba222:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba226:	bf06      	itte	eq
   ba228:	4610      	moveq	r0, r2
   ba22a:	4619      	moveq	r1, r3
   ba22c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba230:	d019      	beq.n	ba266 <__aeabi_dmul+0x24a>
   ba232:	ea94 0f0c 	teq	r4, ip
   ba236:	d102      	bne.n	ba23e <__aeabi_dmul+0x222>
   ba238:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   ba23c:	d113      	bne.n	ba266 <__aeabi_dmul+0x24a>
   ba23e:	ea95 0f0c 	teq	r5, ip
   ba242:	d105      	bne.n	ba250 <__aeabi_dmul+0x234>
   ba244:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   ba248:	bf1c      	itt	ne
   ba24a:	4610      	movne	r0, r2
   ba24c:	4619      	movne	r1, r3
   ba24e:	d10a      	bne.n	ba266 <__aeabi_dmul+0x24a>
   ba250:	ea81 0103 	eor.w	r1, r1, r3
   ba254:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba258:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ba25c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba260:	f04f 0000 	mov.w	r0, #0
   ba264:	bd70      	pop	{r4, r5, r6, pc}
   ba266:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ba26a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   ba26e:	bd70      	pop	{r4, r5, r6, pc}

000ba270 <__aeabi_ddiv>:
   ba270:	b570      	push	{r4, r5, r6, lr}
   ba272:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ba276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ba27a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ba27e:	bf1d      	ittte	ne
   ba280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ba284:	ea94 0f0c 	teqne	r4, ip
   ba288:	ea95 0f0c 	teqne	r5, ip
   ba28c:	f000 f8a7 	bleq	ba3de <__aeabi_ddiv+0x16e>
   ba290:	eba4 0405 	sub.w	r4, r4, r5
   ba294:	ea81 0e03 	eor.w	lr, r1, r3
   ba298:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ba29c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba2a0:	f000 8088 	beq.w	ba3b4 <__aeabi_ddiv+0x144>
   ba2a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba2a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   ba2ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   ba2b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   ba2b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   ba2b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   ba2bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   ba2c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   ba2c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   ba2c8:	429d      	cmp	r5, r3
   ba2ca:	bf08      	it	eq
   ba2cc:	4296      	cmpeq	r6, r2
   ba2ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   ba2d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   ba2d6:	d202      	bcs.n	ba2de <__aeabi_ddiv+0x6e>
   ba2d8:	085b      	lsrs	r3, r3, #1
   ba2da:	ea4f 0232 	mov.w	r2, r2, rrx
   ba2de:	1ab6      	subs	r6, r6, r2
   ba2e0:	eb65 0503 	sbc.w	r5, r5, r3
   ba2e4:	085b      	lsrs	r3, r3, #1
   ba2e6:	ea4f 0232 	mov.w	r2, r2, rrx
   ba2ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   ba2ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   ba2f2:	ebb6 0e02 	subs.w	lr, r6, r2
   ba2f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba2fa:	bf22      	ittt	cs
   ba2fc:	1ab6      	subcs	r6, r6, r2
   ba2fe:	4675      	movcs	r5, lr
   ba300:	ea40 000c 	orrcs.w	r0, r0, ip
   ba304:	085b      	lsrs	r3, r3, #1
   ba306:	ea4f 0232 	mov.w	r2, r2, rrx
   ba30a:	ebb6 0e02 	subs.w	lr, r6, r2
   ba30e:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba312:	bf22      	ittt	cs
   ba314:	1ab6      	subcs	r6, r6, r2
   ba316:	4675      	movcs	r5, lr
   ba318:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   ba31c:	085b      	lsrs	r3, r3, #1
   ba31e:	ea4f 0232 	mov.w	r2, r2, rrx
   ba322:	ebb6 0e02 	subs.w	lr, r6, r2
   ba326:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba32a:	bf22      	ittt	cs
   ba32c:	1ab6      	subcs	r6, r6, r2
   ba32e:	4675      	movcs	r5, lr
   ba330:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   ba334:	085b      	lsrs	r3, r3, #1
   ba336:	ea4f 0232 	mov.w	r2, r2, rrx
   ba33a:	ebb6 0e02 	subs.w	lr, r6, r2
   ba33e:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba342:	bf22      	ittt	cs
   ba344:	1ab6      	subcs	r6, r6, r2
   ba346:	4675      	movcs	r5, lr
   ba348:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   ba34c:	ea55 0e06 	orrs.w	lr, r5, r6
   ba350:	d018      	beq.n	ba384 <__aeabi_ddiv+0x114>
   ba352:	ea4f 1505 	mov.w	r5, r5, lsl #4
   ba356:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   ba35a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   ba35e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   ba362:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   ba366:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   ba36a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   ba36e:	d1c0      	bne.n	ba2f2 <__aeabi_ddiv+0x82>
   ba370:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba374:	d10b      	bne.n	ba38e <__aeabi_ddiv+0x11e>
   ba376:	ea41 0100 	orr.w	r1, r1, r0
   ba37a:	f04f 0000 	mov.w	r0, #0
   ba37e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   ba382:	e7b6      	b.n	ba2f2 <__aeabi_ddiv+0x82>
   ba384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba388:	bf04      	itt	eq
   ba38a:	4301      	orreq	r1, r0
   ba38c:	2000      	moveq	r0, #0
   ba38e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ba392:	bf88      	it	hi
   ba394:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ba398:	f63f aeaf 	bhi.w	ba0fa <__aeabi_dmul+0xde>
   ba39c:	ebb5 0c03 	subs.w	ip, r5, r3
   ba3a0:	bf04      	itt	eq
   ba3a2:	ebb6 0c02 	subseq.w	ip, r6, r2
   ba3a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba3aa:	f150 0000 	adcs.w	r0, r0, #0
   ba3ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba3b2:	bd70      	pop	{r4, r5, r6, pc}
   ba3b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   ba3b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   ba3bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   ba3c0:	bfc2      	ittt	gt
   ba3c2:	ebd4 050c 	rsbsgt	r5, r4, ip
   ba3c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ba3ca:	bd70      	popgt	{r4, r5, r6, pc}
   ba3cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba3d0:	f04f 0e00 	mov.w	lr, #0
   ba3d4:	3c01      	subs	r4, #1
   ba3d6:	e690      	b.n	ba0fa <__aeabi_dmul+0xde>
   ba3d8:	ea45 0e06 	orr.w	lr, r5, r6
   ba3dc:	e68d      	b.n	ba0fa <__aeabi_dmul+0xde>
   ba3de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ba3e2:	ea94 0f0c 	teq	r4, ip
   ba3e6:	bf08      	it	eq
   ba3e8:	ea95 0f0c 	teqeq	r5, ip
   ba3ec:	f43f af3b 	beq.w	ba266 <__aeabi_dmul+0x24a>
   ba3f0:	ea94 0f0c 	teq	r4, ip
   ba3f4:	d10a      	bne.n	ba40c <__aeabi_ddiv+0x19c>
   ba3f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba3fa:	f47f af34 	bne.w	ba266 <__aeabi_dmul+0x24a>
   ba3fe:	ea95 0f0c 	teq	r5, ip
   ba402:	f47f af25 	bne.w	ba250 <__aeabi_dmul+0x234>
   ba406:	4610      	mov	r0, r2
   ba408:	4619      	mov	r1, r3
   ba40a:	e72c      	b.n	ba266 <__aeabi_dmul+0x24a>
   ba40c:	ea95 0f0c 	teq	r5, ip
   ba410:	d106      	bne.n	ba420 <__aeabi_ddiv+0x1b0>
   ba412:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ba416:	f43f aefd 	beq.w	ba214 <__aeabi_dmul+0x1f8>
   ba41a:	4610      	mov	r0, r2
   ba41c:	4619      	mov	r1, r3
   ba41e:	e722      	b.n	ba266 <__aeabi_dmul+0x24a>
   ba420:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba424:	bf18      	it	ne
   ba426:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba42a:	f47f aec5 	bne.w	ba1b8 <__aeabi_dmul+0x19c>
   ba42e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   ba432:	f47f af0d 	bne.w	ba250 <__aeabi_dmul+0x234>
   ba436:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   ba43a:	f47f aeeb 	bne.w	ba214 <__aeabi_dmul+0x1f8>
   ba43e:	e712      	b.n	ba266 <__aeabi_dmul+0x24a>

000ba440 <__gedf2>:
   ba440:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   ba444:	e006      	b.n	ba454 <__cmpdf2+0x4>
   ba446:	bf00      	nop

000ba448 <__ledf2>:
   ba448:	f04f 0c01 	mov.w	ip, #1
   ba44c:	e002      	b.n	ba454 <__cmpdf2+0x4>
   ba44e:	bf00      	nop

000ba450 <__cmpdf2>:
   ba450:	f04f 0c01 	mov.w	ip, #1
   ba454:	f84d cd04 	str.w	ip, [sp, #-4]!
   ba458:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba45c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba460:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba464:	bf18      	it	ne
   ba466:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   ba46a:	d01b      	beq.n	ba4a4 <__cmpdf2+0x54>
   ba46c:	b001      	add	sp, #4
   ba46e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   ba472:	bf0c      	ite	eq
   ba474:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   ba478:	ea91 0f03 	teqne	r1, r3
   ba47c:	bf02      	ittt	eq
   ba47e:	ea90 0f02 	teqeq	r0, r2
   ba482:	2000      	moveq	r0, #0
   ba484:	4770      	bxeq	lr
   ba486:	f110 0f00 	cmn.w	r0, #0
   ba48a:	ea91 0f03 	teq	r1, r3
   ba48e:	bf58      	it	pl
   ba490:	4299      	cmppl	r1, r3
   ba492:	bf08      	it	eq
   ba494:	4290      	cmpeq	r0, r2
   ba496:	bf2c      	ite	cs
   ba498:	17d8      	asrcs	r0, r3, #31
   ba49a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   ba49e:	f040 0001 	orr.w	r0, r0, #1
   ba4a2:	4770      	bx	lr
   ba4a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba4a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba4ac:	d102      	bne.n	ba4b4 <__cmpdf2+0x64>
   ba4ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   ba4b2:	d107      	bne.n	ba4c4 <__cmpdf2+0x74>
   ba4b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba4b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba4bc:	d1d6      	bne.n	ba46c <__cmpdf2+0x1c>
   ba4be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   ba4c2:	d0d3      	beq.n	ba46c <__cmpdf2+0x1c>
   ba4c4:	f85d 0b04 	ldr.w	r0, [sp], #4
   ba4c8:	4770      	bx	lr
   ba4ca:	bf00      	nop

000ba4cc <__aeabi_cdrcmple>:
   ba4cc:	4684      	mov	ip, r0
   ba4ce:	4610      	mov	r0, r2
   ba4d0:	4662      	mov	r2, ip
   ba4d2:	468c      	mov	ip, r1
   ba4d4:	4619      	mov	r1, r3
   ba4d6:	4663      	mov	r3, ip
   ba4d8:	e000      	b.n	ba4dc <__aeabi_cdcmpeq>
   ba4da:	bf00      	nop

000ba4dc <__aeabi_cdcmpeq>:
   ba4dc:	b501      	push	{r0, lr}
   ba4de:	f7ff ffb7 	bl	ba450 <__cmpdf2>
   ba4e2:	2800      	cmp	r0, #0
   ba4e4:	bf48      	it	mi
   ba4e6:	f110 0f00 	cmnmi.w	r0, #0
   ba4ea:	bd01      	pop	{r0, pc}

000ba4ec <__aeabi_dcmpeq>:
   ba4ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba4f0:	f7ff fff4 	bl	ba4dc <__aeabi_cdcmpeq>
   ba4f4:	bf0c      	ite	eq
   ba4f6:	2001      	moveq	r0, #1
   ba4f8:	2000      	movne	r0, #0
   ba4fa:	f85d fb08 	ldr.w	pc, [sp], #8
   ba4fe:	bf00      	nop

000ba500 <__aeabi_dcmplt>:
   ba500:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba504:	f7ff ffea 	bl	ba4dc <__aeabi_cdcmpeq>
   ba508:	bf34      	ite	cc
   ba50a:	2001      	movcc	r0, #1
   ba50c:	2000      	movcs	r0, #0
   ba50e:	f85d fb08 	ldr.w	pc, [sp], #8
   ba512:	bf00      	nop

000ba514 <__aeabi_dcmple>:
   ba514:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba518:	f7ff ffe0 	bl	ba4dc <__aeabi_cdcmpeq>
   ba51c:	bf94      	ite	ls
   ba51e:	2001      	movls	r0, #1
   ba520:	2000      	movhi	r0, #0
   ba522:	f85d fb08 	ldr.w	pc, [sp], #8
   ba526:	bf00      	nop

000ba528 <__aeabi_dcmpge>:
   ba528:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba52c:	f7ff ffce 	bl	ba4cc <__aeabi_cdrcmple>
   ba530:	bf94      	ite	ls
   ba532:	2001      	movls	r0, #1
   ba534:	2000      	movhi	r0, #0
   ba536:	f85d fb08 	ldr.w	pc, [sp], #8
   ba53a:	bf00      	nop

000ba53c <__aeabi_dcmpgt>:
   ba53c:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba540:	f7ff ffc4 	bl	ba4cc <__aeabi_cdrcmple>
   ba544:	bf34      	ite	cc
   ba546:	2001      	movcc	r0, #1
   ba548:	2000      	movcs	r0, #0
   ba54a:	f85d fb08 	ldr.w	pc, [sp], #8
   ba54e:	bf00      	nop

000ba550 <__aeabi_d2uiz>:
   ba550:	004a      	lsls	r2, r1, #1
   ba552:	d211      	bcs.n	ba578 <__aeabi_d2uiz+0x28>
   ba554:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   ba558:	d211      	bcs.n	ba57e <__aeabi_d2uiz+0x2e>
   ba55a:	d50d      	bpl.n	ba578 <__aeabi_d2uiz+0x28>
   ba55c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   ba560:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   ba564:	d40e      	bmi.n	ba584 <__aeabi_d2uiz+0x34>
   ba566:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ba56a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   ba56e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   ba572:	fa23 f002 	lsr.w	r0, r3, r2
   ba576:	4770      	bx	lr
   ba578:	f04f 0000 	mov.w	r0, #0
   ba57c:	4770      	bx	lr
   ba57e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   ba582:	d102      	bne.n	ba58a <__aeabi_d2uiz+0x3a>
   ba584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba588:	4770      	bx	lr
   ba58a:	f04f 0000 	mov.w	r0, #0
   ba58e:	4770      	bx	lr

000ba590 <atexit>:
   ba590:	2300      	movs	r3, #0
   ba592:	4601      	mov	r1, r0
   ba594:	461a      	mov	r2, r3
   ba596:	4618      	mov	r0, r3
   ba598:	f000 b966 	b.w	ba868 <__register_exitproc>

000ba59c <atoi>:
   ba59c:	220a      	movs	r2, #10
   ba59e:	2100      	movs	r1, #0
   ba5a0:	f000 b958 	b.w	ba854 <strtol>

000ba5a4 <atol>:
   ba5a4:	220a      	movs	r2, #10
   ba5a6:	2100      	movs	r1, #0
   ba5a8:	f000 b954 	b.w	ba854 <strtol>

000ba5ac <ldiv>:
   ba5ac:	2900      	cmp	r1, #0
   ba5ae:	b510      	push	{r4, lr}
   ba5b0:	fb91 f4f2 	sdiv	r4, r1, r2
   ba5b4:	fb02 1314 	mls	r3, r2, r4, r1
   ba5b8:	db06      	blt.n	ba5c8 <ldiv+0x1c>
   ba5ba:	2b00      	cmp	r3, #0
   ba5bc:	da01      	bge.n	ba5c2 <ldiv+0x16>
   ba5be:	3401      	adds	r4, #1
   ba5c0:	1a9b      	subs	r3, r3, r2
   ba5c2:	e9c0 4300 	strd	r4, r3, [r0]
   ba5c6:	bd10      	pop	{r4, pc}
   ba5c8:	2b00      	cmp	r3, #0
   ba5ca:	bfc4      	itt	gt
   ba5cc:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   ba5d0:	189b      	addgt	r3, r3, r2
   ba5d2:	e7f6      	b.n	ba5c2 <ldiv+0x16>

000ba5d4 <memcmp>:
   ba5d4:	b510      	push	{r4, lr}
   ba5d6:	3901      	subs	r1, #1
   ba5d8:	4402      	add	r2, r0
   ba5da:	4290      	cmp	r0, r2
   ba5dc:	d101      	bne.n	ba5e2 <memcmp+0xe>
   ba5de:	2000      	movs	r0, #0
   ba5e0:	e005      	b.n	ba5ee <memcmp+0x1a>
   ba5e2:	7803      	ldrb	r3, [r0, #0]
   ba5e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba5e8:	42a3      	cmp	r3, r4
   ba5ea:	d001      	beq.n	ba5f0 <memcmp+0x1c>
   ba5ec:	1b18      	subs	r0, r3, r4
   ba5ee:	bd10      	pop	{r4, pc}
   ba5f0:	3001      	adds	r0, #1
   ba5f2:	e7f2      	b.n	ba5da <memcmp+0x6>

000ba5f4 <memcpy>:
   ba5f4:	440a      	add	r2, r1
   ba5f6:	4291      	cmp	r1, r2
   ba5f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   ba5fc:	d100      	bne.n	ba600 <memcpy+0xc>
   ba5fe:	4770      	bx	lr
   ba600:	b510      	push	{r4, lr}
   ba602:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba606:	f803 4f01 	strb.w	r4, [r3, #1]!
   ba60a:	4291      	cmp	r1, r2
   ba60c:	d1f9      	bne.n	ba602 <memcpy+0xe>
   ba60e:	bd10      	pop	{r4, pc}

000ba610 <memmove>:
   ba610:	4288      	cmp	r0, r1
   ba612:	b510      	push	{r4, lr}
   ba614:	eb01 0402 	add.w	r4, r1, r2
   ba618:	d902      	bls.n	ba620 <memmove+0x10>
   ba61a:	4284      	cmp	r4, r0
   ba61c:	4623      	mov	r3, r4
   ba61e:	d807      	bhi.n	ba630 <memmove+0x20>
   ba620:	1e43      	subs	r3, r0, #1
   ba622:	42a1      	cmp	r1, r4
   ba624:	d008      	beq.n	ba638 <memmove+0x28>
   ba626:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba62a:	f803 2f01 	strb.w	r2, [r3, #1]!
   ba62e:	e7f8      	b.n	ba622 <memmove+0x12>
   ba630:	4402      	add	r2, r0
   ba632:	4601      	mov	r1, r0
   ba634:	428a      	cmp	r2, r1
   ba636:	d100      	bne.n	ba63a <memmove+0x2a>
   ba638:	bd10      	pop	{r4, pc}
   ba63a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   ba63e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   ba642:	e7f7      	b.n	ba634 <memmove+0x24>

000ba644 <memset>:
   ba644:	4402      	add	r2, r0
   ba646:	4603      	mov	r3, r0
   ba648:	4293      	cmp	r3, r2
   ba64a:	d100      	bne.n	ba64e <memset+0xa>
   ba64c:	4770      	bx	lr
   ba64e:	f803 1b01 	strb.w	r1, [r3], #1
   ba652:	e7f9      	b.n	ba648 <memset+0x4>

000ba654 <srand>:
   ba654:	b538      	push	{r3, r4, r5, lr}
   ba656:	4b10      	ldr	r3, [pc, #64]	; (ba698 <srand+0x44>)
   ba658:	681d      	ldr	r5, [r3, #0]
   ba65a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba65c:	4604      	mov	r4, r0
   ba65e:	b9b3      	cbnz	r3, ba68e <srand+0x3a>
   ba660:	2018      	movs	r0, #24
   ba662:	f7fc fb05 	bl	b6c70 <malloc>
   ba666:	4602      	mov	r2, r0
   ba668:	63a8      	str	r0, [r5, #56]	; 0x38
   ba66a:	b920      	cbnz	r0, ba676 <srand+0x22>
   ba66c:	4b0b      	ldr	r3, [pc, #44]	; (ba69c <srand+0x48>)
   ba66e:	480c      	ldr	r0, [pc, #48]	; (ba6a0 <srand+0x4c>)
   ba670:	2142      	movs	r1, #66	; 0x42
   ba672:	f7fc fb2d 	bl	b6cd0 <__assert_func>
   ba676:	490b      	ldr	r1, [pc, #44]	; (ba6a4 <srand+0x50>)
   ba678:	4b0b      	ldr	r3, [pc, #44]	; (ba6a8 <srand+0x54>)
   ba67a:	e9c0 1300 	strd	r1, r3, [r0]
   ba67e:	4b0b      	ldr	r3, [pc, #44]	; (ba6ac <srand+0x58>)
   ba680:	6083      	str	r3, [r0, #8]
   ba682:	230b      	movs	r3, #11
   ba684:	8183      	strh	r3, [r0, #12]
   ba686:	2100      	movs	r1, #0
   ba688:	2001      	movs	r0, #1
   ba68a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ba68e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba690:	2200      	movs	r2, #0
   ba692:	611c      	str	r4, [r3, #16]
   ba694:	615a      	str	r2, [r3, #20]
   ba696:	bd38      	pop	{r3, r4, r5, pc}
   ba698:	20031b9c 	.word	0x20031b9c
   ba69c:	000bb80d 	.word	0x000bb80d
   ba6a0:	000bb824 	.word	0x000bb824
   ba6a4:	abcd330e 	.word	0xabcd330e
   ba6a8:	e66d1234 	.word	0xe66d1234
   ba6ac:	0005deec 	.word	0x0005deec

000ba6b0 <strcmp>:
   ba6b0:	f810 2b01 	ldrb.w	r2, [r0], #1
   ba6b4:	f811 3b01 	ldrb.w	r3, [r1], #1
   ba6b8:	2a01      	cmp	r2, #1
   ba6ba:	bf28      	it	cs
   ba6bc:	429a      	cmpcs	r2, r3
   ba6be:	d0f7      	beq.n	ba6b0 <strcmp>
   ba6c0:	1ad0      	subs	r0, r2, r3
   ba6c2:	4770      	bx	lr

000ba6c4 <strcpy>:
   ba6c4:	4603      	mov	r3, r0
   ba6c6:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba6ca:	f803 2b01 	strb.w	r2, [r3], #1
   ba6ce:	2a00      	cmp	r2, #0
   ba6d0:	d1f9      	bne.n	ba6c6 <strcpy+0x2>
   ba6d2:	4770      	bx	lr

000ba6d4 <strlen>:
   ba6d4:	4603      	mov	r3, r0
   ba6d6:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba6da:	2a00      	cmp	r2, #0
   ba6dc:	d1fb      	bne.n	ba6d6 <strlen+0x2>
   ba6de:	1a18      	subs	r0, r3, r0
   ba6e0:	3801      	subs	r0, #1
   ba6e2:	4770      	bx	lr

000ba6e4 <strncpy>:
   ba6e4:	b510      	push	{r4, lr}
   ba6e6:	3901      	subs	r1, #1
   ba6e8:	4603      	mov	r3, r0
   ba6ea:	b132      	cbz	r2, ba6fa <strncpy+0x16>
   ba6ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba6f0:	f803 4b01 	strb.w	r4, [r3], #1
   ba6f4:	3a01      	subs	r2, #1
   ba6f6:	2c00      	cmp	r4, #0
   ba6f8:	d1f7      	bne.n	ba6ea <strncpy+0x6>
   ba6fa:	441a      	add	r2, r3
   ba6fc:	2100      	movs	r1, #0
   ba6fe:	4293      	cmp	r3, r2
   ba700:	d100      	bne.n	ba704 <strncpy+0x20>
   ba702:	bd10      	pop	{r4, pc}
   ba704:	f803 1b01 	strb.w	r1, [r3], #1
   ba708:	e7f9      	b.n	ba6fe <strncpy+0x1a>

000ba70a <strnlen>:
   ba70a:	b510      	push	{r4, lr}
   ba70c:	4602      	mov	r2, r0
   ba70e:	4401      	add	r1, r0
   ba710:	428a      	cmp	r2, r1
   ba712:	4613      	mov	r3, r2
   ba714:	d003      	beq.n	ba71e <strnlen+0x14>
   ba716:	781c      	ldrb	r4, [r3, #0]
   ba718:	3201      	adds	r2, #1
   ba71a:	2c00      	cmp	r4, #0
   ba71c:	d1f8      	bne.n	ba710 <strnlen+0x6>
   ba71e:	1a18      	subs	r0, r3, r0
   ba720:	bd10      	pop	{r4, pc}

000ba722 <strstr>:
   ba722:	780a      	ldrb	r2, [r1, #0]
   ba724:	b570      	push	{r4, r5, r6, lr}
   ba726:	b96a      	cbnz	r2, ba744 <strstr+0x22>
   ba728:	bd70      	pop	{r4, r5, r6, pc}
   ba72a:	429a      	cmp	r2, r3
   ba72c:	d109      	bne.n	ba742 <strstr+0x20>
   ba72e:	460c      	mov	r4, r1
   ba730:	4605      	mov	r5, r0
   ba732:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   ba736:	2b00      	cmp	r3, #0
   ba738:	d0f6      	beq.n	ba728 <strstr+0x6>
   ba73a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   ba73e:	429e      	cmp	r6, r3
   ba740:	d0f7      	beq.n	ba732 <strstr+0x10>
   ba742:	3001      	adds	r0, #1
   ba744:	7803      	ldrb	r3, [r0, #0]
   ba746:	2b00      	cmp	r3, #0
   ba748:	d1ef      	bne.n	ba72a <strstr+0x8>
   ba74a:	4618      	mov	r0, r3
   ba74c:	e7ec      	b.n	ba728 <strstr+0x6>
	...

000ba750 <_strtol_l.constprop.0>:
   ba750:	2b01      	cmp	r3, #1
   ba752:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba756:	d001      	beq.n	ba75c <_strtol_l.constprop.0+0xc>
   ba758:	2b24      	cmp	r3, #36	; 0x24
   ba75a:	d906      	bls.n	ba76a <_strtol_l.constprop.0+0x1a>
   ba75c:	f7fc fab0 	bl	b6cc0 <__errno>
   ba760:	2316      	movs	r3, #22
   ba762:	6003      	str	r3, [r0, #0]
   ba764:	2000      	movs	r0, #0
   ba766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba76a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; ba850 <_strtol_l.constprop.0+0x100>
   ba76e:	460d      	mov	r5, r1
   ba770:	462e      	mov	r6, r5
   ba772:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba776:	f814 700c 	ldrb.w	r7, [r4, ip]
   ba77a:	f017 0708 	ands.w	r7, r7, #8
   ba77e:	d1f7      	bne.n	ba770 <_strtol_l.constprop.0+0x20>
   ba780:	2c2d      	cmp	r4, #45	; 0x2d
   ba782:	d132      	bne.n	ba7ea <_strtol_l.constprop.0+0x9a>
   ba784:	782c      	ldrb	r4, [r5, #0]
   ba786:	2701      	movs	r7, #1
   ba788:	1cb5      	adds	r5, r6, #2
   ba78a:	2b00      	cmp	r3, #0
   ba78c:	d05b      	beq.n	ba846 <_strtol_l.constprop.0+0xf6>
   ba78e:	2b10      	cmp	r3, #16
   ba790:	d109      	bne.n	ba7a6 <_strtol_l.constprop.0+0x56>
   ba792:	2c30      	cmp	r4, #48	; 0x30
   ba794:	d107      	bne.n	ba7a6 <_strtol_l.constprop.0+0x56>
   ba796:	782c      	ldrb	r4, [r5, #0]
   ba798:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   ba79c:	2c58      	cmp	r4, #88	; 0x58
   ba79e:	d14d      	bne.n	ba83c <_strtol_l.constprop.0+0xec>
   ba7a0:	786c      	ldrb	r4, [r5, #1]
   ba7a2:	2310      	movs	r3, #16
   ba7a4:	3502      	adds	r5, #2
   ba7a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   ba7aa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   ba7ae:	f04f 0c00 	mov.w	ip, #0
   ba7b2:	fbb8 f9f3 	udiv	r9, r8, r3
   ba7b6:	4666      	mov	r6, ip
   ba7b8:	fb03 8a19 	mls	sl, r3, r9, r8
   ba7bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   ba7c0:	f1be 0f09 	cmp.w	lr, #9
   ba7c4:	d816      	bhi.n	ba7f4 <_strtol_l.constprop.0+0xa4>
   ba7c6:	4674      	mov	r4, lr
   ba7c8:	42a3      	cmp	r3, r4
   ba7ca:	dd24      	ble.n	ba816 <_strtol_l.constprop.0+0xc6>
   ba7cc:	f1bc 0f00 	cmp.w	ip, #0
   ba7d0:	db1e      	blt.n	ba810 <_strtol_l.constprop.0+0xc0>
   ba7d2:	45b1      	cmp	r9, r6
   ba7d4:	d31c      	bcc.n	ba810 <_strtol_l.constprop.0+0xc0>
   ba7d6:	d101      	bne.n	ba7dc <_strtol_l.constprop.0+0x8c>
   ba7d8:	45a2      	cmp	sl, r4
   ba7da:	db19      	blt.n	ba810 <_strtol_l.constprop.0+0xc0>
   ba7dc:	fb06 4603 	mla	r6, r6, r3, r4
   ba7e0:	f04f 0c01 	mov.w	ip, #1
   ba7e4:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba7e8:	e7e8      	b.n	ba7bc <_strtol_l.constprop.0+0x6c>
   ba7ea:	2c2b      	cmp	r4, #43	; 0x2b
   ba7ec:	bf04      	itt	eq
   ba7ee:	782c      	ldrbeq	r4, [r5, #0]
   ba7f0:	1cb5      	addeq	r5, r6, #2
   ba7f2:	e7ca      	b.n	ba78a <_strtol_l.constprop.0+0x3a>
   ba7f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   ba7f8:	f1be 0f19 	cmp.w	lr, #25
   ba7fc:	d801      	bhi.n	ba802 <_strtol_l.constprop.0+0xb2>
   ba7fe:	3c37      	subs	r4, #55	; 0x37
   ba800:	e7e2      	b.n	ba7c8 <_strtol_l.constprop.0+0x78>
   ba802:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   ba806:	f1be 0f19 	cmp.w	lr, #25
   ba80a:	d804      	bhi.n	ba816 <_strtol_l.constprop.0+0xc6>
   ba80c:	3c57      	subs	r4, #87	; 0x57
   ba80e:	e7db      	b.n	ba7c8 <_strtol_l.constprop.0+0x78>
   ba810:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   ba814:	e7e6      	b.n	ba7e4 <_strtol_l.constprop.0+0x94>
   ba816:	f1bc 0f00 	cmp.w	ip, #0
   ba81a:	da05      	bge.n	ba828 <_strtol_l.constprop.0+0xd8>
   ba81c:	2322      	movs	r3, #34	; 0x22
   ba81e:	6003      	str	r3, [r0, #0]
   ba820:	4646      	mov	r6, r8
   ba822:	b942      	cbnz	r2, ba836 <_strtol_l.constprop.0+0xe6>
   ba824:	4630      	mov	r0, r6
   ba826:	e79e      	b.n	ba766 <_strtol_l.constprop.0+0x16>
   ba828:	b107      	cbz	r7, ba82c <_strtol_l.constprop.0+0xdc>
   ba82a:	4276      	negs	r6, r6
   ba82c:	2a00      	cmp	r2, #0
   ba82e:	d0f9      	beq.n	ba824 <_strtol_l.constprop.0+0xd4>
   ba830:	f1bc 0f00 	cmp.w	ip, #0
   ba834:	d000      	beq.n	ba838 <_strtol_l.constprop.0+0xe8>
   ba836:	1e69      	subs	r1, r5, #1
   ba838:	6011      	str	r1, [r2, #0]
   ba83a:	e7f3      	b.n	ba824 <_strtol_l.constprop.0+0xd4>
   ba83c:	2430      	movs	r4, #48	; 0x30
   ba83e:	2b00      	cmp	r3, #0
   ba840:	d1b1      	bne.n	ba7a6 <_strtol_l.constprop.0+0x56>
   ba842:	2308      	movs	r3, #8
   ba844:	e7af      	b.n	ba7a6 <_strtol_l.constprop.0+0x56>
   ba846:	2c30      	cmp	r4, #48	; 0x30
   ba848:	d0a5      	beq.n	ba796 <_strtol_l.constprop.0+0x46>
   ba84a:	230a      	movs	r3, #10
   ba84c:	e7ab      	b.n	ba7a6 <_strtol_l.constprop.0+0x56>
   ba84e:	bf00      	nop
   ba850:	000bb87e 	.word	0x000bb87e

000ba854 <strtol>:
   ba854:	4613      	mov	r3, r2
   ba856:	460a      	mov	r2, r1
   ba858:	4601      	mov	r1, r0
   ba85a:	4802      	ldr	r0, [pc, #8]	; (ba864 <strtol+0x10>)
   ba85c:	6800      	ldr	r0, [r0, #0]
   ba85e:	f7ff bf77 	b.w	ba750 <_strtol_l.constprop.0>
   ba862:	bf00      	nop
   ba864:	20031b9c 	.word	0x20031b9c

000ba868 <__register_exitproc>:
   ba868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba86c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba928 <__register_exitproc+0xc0>
   ba870:	4606      	mov	r6, r0
   ba872:	f8d8 0000 	ldr.w	r0, [r8]
   ba876:	461f      	mov	r7, r3
   ba878:	460d      	mov	r5, r1
   ba87a:	4691      	mov	r9, r2
   ba87c:	f000 f856 	bl	ba92c <__retarget_lock_acquire_recursive>
   ba880:	4b25      	ldr	r3, [pc, #148]	; (ba918 <__register_exitproc+0xb0>)
   ba882:	681c      	ldr	r4, [r3, #0]
   ba884:	b934      	cbnz	r4, ba894 <__register_exitproc+0x2c>
   ba886:	4c25      	ldr	r4, [pc, #148]	; (ba91c <__register_exitproc+0xb4>)
   ba888:	601c      	str	r4, [r3, #0]
   ba88a:	4b25      	ldr	r3, [pc, #148]	; (ba920 <__register_exitproc+0xb8>)
   ba88c:	b113      	cbz	r3, ba894 <__register_exitproc+0x2c>
   ba88e:	681b      	ldr	r3, [r3, #0]
   ba890:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba894:	6863      	ldr	r3, [r4, #4]
   ba896:	2b1f      	cmp	r3, #31
   ba898:	dd07      	ble.n	ba8aa <__register_exitproc+0x42>
   ba89a:	f8d8 0000 	ldr.w	r0, [r8]
   ba89e:	f000 f847 	bl	ba930 <__retarget_lock_release_recursive>
   ba8a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba8aa:	b34e      	cbz	r6, ba900 <__register_exitproc+0x98>
   ba8ac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   ba8b0:	b988      	cbnz	r0, ba8d6 <__register_exitproc+0x6e>
   ba8b2:	4b1c      	ldr	r3, [pc, #112]	; (ba924 <__register_exitproc+0xbc>)
   ba8b4:	b923      	cbnz	r3, ba8c0 <__register_exitproc+0x58>
   ba8b6:	f8d8 0000 	ldr.w	r0, [r8]
   ba8ba:	f000 f838 	bl	ba92e <__retarget_lock_release>
   ba8be:	e7f0      	b.n	ba8a2 <__register_exitproc+0x3a>
   ba8c0:	f44f 7084 	mov.w	r0, #264	; 0x108
   ba8c4:	f7fc f9d4 	bl	b6c70 <malloc>
   ba8c8:	2800      	cmp	r0, #0
   ba8ca:	d0f4      	beq.n	ba8b6 <__register_exitproc+0x4e>
   ba8cc:	2300      	movs	r3, #0
   ba8ce:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   ba8d2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   ba8d6:	6863      	ldr	r3, [r4, #4]
   ba8d8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   ba8dc:	2201      	movs	r2, #1
   ba8de:	409a      	lsls	r2, r3
   ba8e0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   ba8e4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   ba8e8:	4313      	orrs	r3, r2
   ba8ea:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   ba8ee:	2e02      	cmp	r6, #2
   ba8f0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   ba8f4:	bf02      	ittt	eq
   ba8f6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   ba8fa:	4313      	orreq	r3, r2
   ba8fc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   ba900:	6863      	ldr	r3, [r4, #4]
   ba902:	f8d8 0000 	ldr.w	r0, [r8]
   ba906:	1c5a      	adds	r2, r3, #1
   ba908:	3302      	adds	r3, #2
   ba90a:	6062      	str	r2, [r4, #4]
   ba90c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   ba910:	f000 f80e 	bl	ba930 <__retarget_lock_release_recursive>
   ba914:	2000      	movs	r0, #0
   ba916:	e7c6      	b.n	ba8a6 <__register_exitproc+0x3e>
   ba918:	2003e7e8 	.word	0x2003e7e8
   ba91c:	2003e75c 	.word	0x2003e75c
   ba920:	00000000 	.word	0x00000000
   ba924:	000b6c71 	.word	0x000b6c71
   ba928:	20031c00 	.word	0x20031c00

000ba92c <__retarget_lock_acquire_recursive>:
   ba92c:	4770      	bx	lr

000ba92e <__retarget_lock_release>:
   ba92e:	4770      	bx	lr

000ba930 <__retarget_lock_release_recursive>:
   ba930:	4770      	bx	lr

000ba932 <link_code_end>:
	...

000ba934 <dynalib_user>:
   ba934:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   ba944:	0000 0000 6964 6967 6c67 6575 692e 006f     ....digiglue.io.
   ba954:	002f 742f 6d69 0065 6572 6f63 6472 6e69     /./time.recordin
   ba964:	4967 746e 7265 6176 3a6c 2520 0069 6572     gInterval: %i.re
   ba974:	6f70 7472 6e69 4967 746e 7265 6176 3a6c     portingInterval:
   ba984:	2520 0069 6c73 6565 5070 7561 6573 7544      %i.sleepPauseDu
   ba994:	6172 6974 6e6f 203a 6925 7200 7065 726f     ration: %i.repor
   ba9a4:	6974 676e 6f4d 6564 203a 6925 4400 4953     tingMode: %i.DSI
   ba9b4:	2044 6f6e 2074 7473 726f 6465 6920 206e     D not stored in 
   ba9c4:	4545 5250 4d4f 202e 4c42 2045 6f63 666e     EEPROM. BLE conf
   ba9d4:	6769 7220 7165 6975 6572 0064 6957 6946     ig required.WiFi
   ba9e4:	6620 6961 656c 2064 6f74 6320 6e6f 656e      failed to conne
   ba9f4:	7463 202c 6974 656d 6e20 746f 7320 6e79     ct, time not syn
   baa04:	6563 0064 6957 6946 6320 6e6f 656e 7463     ced.WiFi connect
   baa14:	6465 202c 7973 636e 6e69 2067 6974 656d     ed, syncing time
   baa24:	4700 5445 5400 6d69 2065 6572 7571 7365     .GET.Time reques
   baa34:	2074 6572 7574 6e72 6465 203a 4600 6961     t returned: .Fai
   baa44:	656c 2064 6f74 6920 696e 6974 6c61 7a69     led to initializ
   baa54:	2065 494c 3353 4844 5700 7461 6863 6f64     e LIS3DH.Watchdo
   baa64:	2067 6572 6573 0074 7845 6574 6e72 6c61     g reset.External
   baa74:	7220 7365 7465 6400 7369 6f63 6e6e 6365      reset.disconnec
   baa84:	6574 0064 760a 2e35 2032 6f4d 6974 6e6f     ted..v5.2 Motion
   baa94:	6c61 7379 7369 4620 7269 776d 7261 0a65     alysis Firmware.
   baaa4:	7243 6465 6e65 6974 6c61 2073 7261 2065     Credentials are 
   baab4:	7563 7272 6e65 6c74 2079 7473 726f 6465     currently stored
   baac4:	6620 726f 0a3a 005b 0a2c 5d00 450a 746e      for:.[.,..].Ent
   baad4:	7265 6e20 7465 6f77 6b72 5320 4953 2044     er network SSID 
   baae4:	6228 616c 6b6e 7420 206f 6b73 7069 202c     (blank to skip, 
   baaf4:	6327 656c 7261 2027 6f74 7220 7365 7465     'clear' to reset
   bab04:	6320 6572 6564 746e 6169 736c 3a29 0020      credentials): .
   bab14:	430a 7275 6572 746e 4420 4953 2044 7369     .Current DSID is
   bab24:	5b20 5d00 450a 746e 7265 6420 7665 6369      [.].Enter devic
   bab34:	2065 5344 4449 2820 6c62 6e61 206b 6f74     e DSID (blank to
   bab44:	7320 696b 2970 203a 6300 656c 7261 0a00      skip): .clear..
   bab54:	6e45 6574 2072 656e 7774 726f 206b 6170     Enter network pa
   bab64:	7373 6f77 6472 203a 0a00 430a 6572 6564     ssword: ...Crede
   bab74:	746e 6169 736c 7320 7465 7720 7469 2068     ntials set with 
   bab84:	7373 6469 203a 0a00 6170 7373 6f77 6472     ssid: ..password
   bab94:	203a 0a00 000a 450a 746e 7265 2720 6574     : .....Enter 'te
   baba4:	7473 2027 6f74 7420 7365 2074 7263 6465     st' to test cred
   babb4:	6e65 6974 6c61 2073 6228 616c 6b6e 7420     entials (blank t
   babc4:	206f 6b73 7069 3a29 0020 6574 7473 7400     o skip): .test.t
   babd4:	6d69 6f65 7475 5300 6375 6563 7373 0a21     imeout.Success!.
   babe4:	4500 5252 524f 203a 6957 6946 6320 6e6f     .ERROR: WiFi con
   babf4:	656e 7463 6f69 206e 6974 656d 756f 0a74     nection timeout.
   bac04:	6400 6973 2064 6e65 6574 6572 0064 7364     .dsid entered.ds
   bac14:	6469 203a 0a00 7543 7272 6e65 2074 6176     id: ..Current va
   bac24:	756c 2065 6f66 2072 6c73 6565 2070 6170     lue for sleep pa
   bac34:	7375 2065 7564 6172 6974 6e6f 6920 2073     use duration is 
   bac44:	005b 0a5d 6e45 6574 2072 6c73 6565 2070     [.].Enter sleep 
   bac54:	6170 7375 2065 7564 6172 6974 6e6f 6120     pause duration a
   bac64:	2073 6e61 6920 746e 6765 7265 6920 206e     s an integer in 
   bac74:	6573 6f63 646e 2073 6228 616c 6b6e 7420     seconds (blank t
   bac84:	206f 6b73 7069 3a29 0020 6c73 6565 2070     o skip): .sleep 
   bac94:	6170 7375 2065 7564 6172 6974 6e6f 6520     pause duration e
   baca4:	746e 7265 6465 7300 656c 7065 7020 7561     ntered.sleep pau
   bacb4:	6573 6420 7275 7461 6f69 3a6e 0020 430a     se duration: ..C
   bacc4:	7275 6572 746e 7620 6c61 6575 6620 726f     urrent value for
   bacd4:	6420 7461 2061 6f63 6c6c 6365 6974 6e6f      data collection
   bace4:	6920 746e 7265 6176 206c 7369 5b20 5d00      interval is [.]
   bacf4:	450a 746e 7265 7420 6d69 2065 6562 7774     .Enter time betw
   bad04:	6565 206e 6164 6174 6320 6c6f 656c 7463     een data collect
   bad14:	6f69 206e 7361 6120 206e 6e69 6574 6567     ion as an intege
   bad24:	2072 6e69 6d20 6c69 696c 6573 6f63 646e     r in millisecond
   bad34:	2073 6228 616c 6b6e 7420 206f 6b73 7069     s (blank to skip
   bad44:	3a29 0020 430a 7275 6572 746e 7620 6c61     ): ..Current val
   bad54:	6575 6620 726f 5720 4669 2069 6f63 6e6e     ue for WiFi conn
   bad64:	6365 6974 6e6f 6920 746e 7265 6176 206c     ection interval 
   bad74:	7369 5b20 5d00 450a 746e 7265 7420 6d69     is [.].Enter tim
   bad84:	2065 6562 7774 6565 206e 6957 6946 6320     e between WiFi c
   bad94:	6e6f 656e 7463 6f69 736e 6120 2073 6e61     onnections as an
   bada4:	6920 746e 6765 7265 6920 206e 6573 6f63      integer in seco
   badb4:	646e 2073 6228 616c 6b6e 7420 206f 6b73     nds (blank to sk
   badc4:	7069 3a29 0020 430a 7275 6572 746e 7220     ip): ..Current r
   badd4:	7065 726f 6974 676e 6d20 646f 2065 7369     eporting mode is
   bade4:	203a 7962 6520 6378 7065 6974 6e6f 000a     : by exception..
   badf4:	430a 7275 6572 746e 7220 7065 726f 6974     .Current reporti
   bae04:	676e 6d20 646f 2065 7369 203a 6f6e 6d72     ng mode is: norm
   bae14:	6c61 0a00 6e45 6574 2072 7927 2027 6f74     al..Enter 'y' to
   bae24:	6520 616e 6c62 2065 7865 6563 7470 6f69      enable exceptio
   bae34:	206e 6572 6f70 7472 6e69 2c67 2720 276e     n reporting, 'n'
   bae44:	7420 206f 7375 2065 6f6e 6d72 6c61 7220      to use normal r
   bae54:	7065 726f 6974 676e 2820 6c62 6e61 206b     eporting (blank 
   bae64:	6f74 7320 696b 2970 203a 7900 7200 7065     to skip): .y.rep
   bae74:	726f 6974 676e 6d20 646f 3a65 2520 0069     orting mode: %i.
   bae84:	450a 746e 7265 2720 746f 2761 7420 206f     .Enter 'ota' to 
   bae94:	6177 7469 6620 726f 4f20 4154 7520 6470     wait for OTA upd
   baea4:	7461 2065 6228 616c 6b6e 7420 206f 6b73     ate (blank to sk
   baeb4:	7069 3a29 0020 746f 0061 6957 6946 6620     ip): .ota.WiFi f
   baec4:	6961 656c 2064 6f74 6320 6e6f 656e 7463     ailed to connect
   baed4:	202c 6b73 7069 6970 676e 7420 6d69 2065     , skipping time 
   baee4:	7973 636e 7268 6e6f 7a69 7461 6f69 006e     synchronization.
   baef4:	6957 6946 6320 6e6f 656e 7463 6465 202c     WiFi connected, 
   baf04:	7761 6961 6974 676e 7520 6470 7461 0065     awaiting update.
   baf14:	410a 6177 7469 6e69 2067 544f 2041 7075     .Awaiting OTA up
   baf24:	6164 6574 3600 3445 3030 3030 2d31 3542     date.6E400001-B5
   baf34:	3341 462d 3933 2d33 3045 3941 452d 3035     A3-F393-E0A9-E50
   baf44:	3245 4434 4343 3941 0045 4536 3034 3030     E24DCCA9E.6E4000
   baf54:	3230 422d 4135 2d33 3346 3339 452d 4130     02-B5A3-F393-E0A
   baf64:	2d39 3545 4530 3432 4344 4143 4539 3600     9-E50E24DCCA9E.6
   baf74:	3445 3030 3030 2d33 3542 3341 462d 3933     E400003-B5A3-F39
   baf84:	2d33 3045 3941 452d 3035 3245 4434 4343     3-E0A9-E50E24DCC
   baf94:	3941 0045 7874 7200 0078 6f52 6c6c 766f     A9E.tx.rx.Rollov
   bafa4:	7265 7020 7961 6f6c 6461 203a 7b00 6422     er payload: .{"d
   bafb4:	7461 2261 5b3a 5d00 007d 4f50 5453 5300     ata":[.]}.POST.S
   bafc4:	6174 7574 3a73 0020 6552 4271 646f 3a79     tatus: .ReqBody:
   bafd4:	0020 6957 6946 6320 6e6f 656e 7463 6465      .WiFi connected
   bafe4:	202c 6572 6f70 7472 6e69 2067 6164 6174     , reporting data
   baff4:	4500 676e 6761 6e69 2067 6c73 6565 2e70     .Engaging sleep.
   bb004:	3e00 3e3e 4320 4e4f 4954 554e 4e49 2047     .>>> CONTINUING 
   bb014:	4552 4f50 5452 4e49 2047 4144 4154 7300     REPORTING DATA.s
   bb024:	6f74 6572 5664 6c61 6575 4973 646e 7865     toredValuesIndex
   bb034:	203a 6925 7b00 6422 6973 2264 003a 202c     : %i.{"dsid":., 
   bb044:	7622 6c61 6575 3a22 2c00 2220 6974 656d     "value":., "time
   bb054:	7473 6d61 2270 003a 2c7d 4200 454c 4157     stamp":.},.BLEWA
   bb064:	5449 4200 454c 6320 6e6f 656e 7463 6465     IT.BLE connected
   bb074:	4200 454c 6e20 746f 6320 6e6f 656e 7463     .BLE not connect
   bb084:	6465 202c 6f63 746e 6e69 6975 676e 7720     ed, continuing w
   bb094:	7469 2068 7473 726f 6465 7320 7465 6974     ith stored setti
   bb0a4:	676e 2e73 5200 4345 524f 4944 474e 5200     ngs..RECORDING.R
   bb0b4:	6365 726f 6964 676e 6920 646e 7865 203a     ecording index: 
   bb0c4:	6925 4600 7269 7473 7220 6165 6964 676e     %i.First reading
   bb0d4:	3e00 3e3e 5220 5045 524f 4954 474e 4420     .>>> REPORTING D
   bb0e4:	5441 0041 3e3e 203e 4552 4f50 5452 4e49     ATA.>>> REPORTIN
   bb0f4:	2047 5544 2045 4f54 4220 4655 4546 2052     G DUE TO BUFFER 
   bb104:	4143 4150 4943 5954 4200 454c 6f43 6e75     CAPACITY.BLECoun
   bb114:	6474 776f 3a6e 0020 6341 6563 7470 6100     tdown: .Accept.a
   bb124:	7070 696c 6163 6974 6e6f 6a2f 6f73 006e     pplication/json.
   bb134:	6f43 746e 6e65 2d74 7954 6570 0000 0000     Content-Type....

000bb144 <_ZTV15Adafruit_LIS3DH>:
	...
   bb14c:	5b17 000b 5b45 000b 5b15 000b 5f01 000b     .[..E[...[..._..
   bb15c:	5b19 000b 7448 7074 6c43 6569 746e 093e     .[..HttpClient>.
   bb16c:	6f43 6e6e 6365 6974 676e 7420 3a6f 0020     Connecting to: .
   bb17c:	7448 7074 6c43 6569 746e 093e 6f43 6e6e     HttpClient>.Conn
   bb18c:	6365 6974 676e 7420 206f 5049 203a 2000     ecting to IP: . 
   bb19c:	5448 5054 312f 302e 0a0d 4800 7474 4370     HTTP/1.0...HttpC
   bb1ac:	696c 6e65 3e74 5309 6174 7472 6f20 2066     lient>.Start of 
   bb1bc:	5448 5054 5220 7165 6575 7473 002e 6c63     HTTP Request..cl
   bb1cc:	736f 0065 6f43 6e6e 6365 6974 6e6f 4800     ose.Connection.H
   bb1dc:	7474 4370 696c 6e65 3e74 4309 6e6f 656e     ttpClient>.Conne
   bb1ec:	7463 6f69 206e 6166 6c69 6465 002e 4f48     ction failed..HO
   bb1fc:	5453 4300 6e6f 6574 746e 4c2d 6e65 7467     ST.Content-Lengt
   bb20c:	0068 7448 7074 6c43 6569 746e 093e 6e45     h.HttpClient>.En
   bb21c:	2064 666f 4820 5454 2050 6552 7571 7365     d of HTTP Reques
   bb22c:	2e74 0d00 480a 7474 4370 696c 6e65 3e74     t....HttpClient>
   bb23c:	5209 6365 6965 6976 676e 5420 5043 7420     .Receiving TCP t
   bb24c:	6172 736e 6361 6974 6e6f 6f20 2066 2000     ransaction of . 
   bb25c:	7962 6574 2e73 4800 7474 4370 696c 6e65     bytes..HttpClien
   bb26c:	3e74 4509 7272 726f 203a 6552 7073 6e6f     t>.Error: Respon
   bb27c:	6573 6220 646f 2079 616c 6772 7265 7420     se body larger t
   bb28c:	6168 206e 7562 6666 7265 002e 0a0d 7448     han buffer....Ht
   bb29c:	7074 6c43 6569 746e 093e 6e45 2064 666f     tpClient>.End of
   bb2ac:	5420 5043 7420 6172 736e 6361 6974 6e6f      TCP transaction
   bb2bc:	002e 0a0d 7448 7074 6c43 6569 746e 093e     ....HttpClient>.
   bb2cc:	7245 6f72 3a72 5420 6d69 6f65 7475 7720     Error: Timeout w
   bb2dc:	6968 656c 7220 6165 6964 676e 7220 7365     hile reading res
   bb2ec:	6f70 736e 2e65 0d00 480a 7474 4370 696c     ponse....HttpCli
   bb2fc:	6e65 3e74 4509 646e 6f20 2066 5448 5054     ent>.End of HTTP
   bb30c:	5220 7365 6f70 736e 2065 0028 736d 2e29      Response (.ms).
   bb31c:	4800 7474 4370 696c 6e65 3e74 5309 6174     .HttpClient>.Sta
   bb32c:	7574 2073 6f43 6564 203a 0d00 0d0a 000a     tus Code: ......
   bb33c:	7448 7074 6c43 6569 746e 093e 7245 6f72     HttpClient>.Erro
   bb34c:	3a72 4320 6e61 7427 6620 6e69 2064 5448     r: Can't find HT
   bb35c:	5054 7220 7365 6f70 736e 2065 6f62 7964     TP response body
   bb36c:	002e 6977 6972 676e 622e 656c 5300 6174     ..wiring.ble.Sta
   bb37c:	7472 6420 7369 6f63 6576 6972 676e 7320     rt discovering s
   bb38c:	7265 6976 6563 2e73 5000 6565 2072 6564     ervices..Peer de
   bb39c:	6976 6563 6920 2073 696d 7373 6e69 2167     vice is missing!
   bb3ac:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   bb3bc:	2064 6570 7265 4320 6e65 7274 6c61 6420     d peer Central d
   bb3cc:	7665 6369 2e65 4300 6e6f 656e 7463 6465     evice..Connected
   bb3dc:	6220 2079 6543 746e 6172 206c 6564 6976      by Central devi
   bb3ec:	6563 002e 6944 6373 6e6f 656e 7463 6465     ce..Disconnected
   bb3fc:	6220 2079 6572 6f6d 6574 6420 7665 6369      by remote devic
   bb40c:	2e65 4400 7075 696c 6163 6574 2064 6863     e..Duplicated ch
   bb41c:	7261 6361 6574 6972 7473 6369 6320 6e61     aracteristic can
   bb42c:	6f6e 2074 6562 6120 6464 6465 002e 6146     not be added..Fa
   bb43c:	6c69 6465 7420 206f 7061 6570 646e 6c20     iled to append l
   bb44c:	636f 6c61 6320 6168 6172 7463 7265 7369     ocal characteris
   bb45c:	6974 2e63 0000 0000                         tic.....

000bb464 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb46c:	6cfd 000b 6d61 000b 6e8f 000b 6d8b 000b     .l..am...n...m..
   bb47c:	6d01 000b                                   .m..

000bb480 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb488:	6cf9 000b 6d6f 000b 6cfb 000b 6d91 000b     .l..om...l...m..
   bb498:	6d21 000b                                   !m..

000bb49c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb4a4:	6cf7 000b 6d7d 000b 76a5 000b 6d97 000b     .l..}m...v...m..
   bb4b4:	6d41 000b                                   Am..

000bb4b8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bb4c4:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bb4d6 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bb4d6:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bb4e6 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bb4e6:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000bb4f8 <_ZTVN5spark13EthernetClassE>:
	...
   bb500:	8287 000b 827d 000b 8273 000b 8269 000b     ....}...s...i...
   bb510:	825d 000b 8251 000b 850d 000b 8515 000b     ]...Q...........
   bb520:	8245 000b 823d 000b 8233 000b 8229 000b     E...=...3...)...
   bb530:	8545 000b                                   E...

000bb534 <_ZTV7TwoWire>:
	...
   bb53c:	82a5 000b 82ef 000b 82c7 000b 82a7 000b     ................
   bb54c:	82cf 000b 82d7 000b 82df 000b 82e7 000b     ................

000bb55c <_ZTV9IPAddress>:
	...
   bb564:	83b1 000b 83a1 000b 83a3 000b 7061 0070     ............app.

000bb574 <_ZTVN5spark12NetworkClassE>:
	...
   bb57c:	84cd 000b 84d7 000b 84e1 000b 84eb 000b     ................
   bb58c:	84f5 000b 8501 000b 850d 000b 8515 000b     ................
   bb59c:	851d 000b 8529 000b 8531 000b 853b 000b     ....)...1...;...
   bb5ac:	8545 000b                                   E...

000bb5b0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bb5b0:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   bb5c0:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   bb5d0:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   bb5e0:	6c61 6469 002e 6572 7663 6520 7272 726f     alid..recv error
   bb5f0:	3d20 2520 0064 0000                          = %d...

000bb5f8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb600:	8d99 000b 8dbd 000b 92ef 000b 8dcb 000b     ................
   bb610:	8d9d 000b                                   ....

000bb614 <_ZTV9TCPClient>:
	...
   bb61c:	8e49 000b 8e7d 000b 8d15 000b 8d2f 000b     I...}......./...
   bb62c:	9185 000b 8d59 000b 8ffb 000b 8d8d 000b     ....Y...........
   bb63c:	908d 000b 8ecd 000b 9029 000b 9239 000b     ........)...9...
   bb64c:	8fc9 000b 8d8f 000b 8d41 000b 8dd1 000b     ........A.......
   bb65c:	8ead 000b 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   bb66c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bb67c <_ZTV11USARTSerial>:
	...
   bb684:	93a5 000b 9411 000b 93e9 000b 8631 000b     ............1...
   bb694:	93b9 000b 93d5 000b 93c7 000b 93e3 000b     ................
   bb6a4:	93a7 000b 93ab 000b                         ........

000bb6ac <_ZTV9USBSerial>:
	...
   bb6b4:	944f 000b 94b7 000b 948d 000b 8631 000b     O...........1...
   bb6c4:	947f 000b 9451 000b 9461 000b 94b1 000b     ....Q...a.......
   bb6d4:	9471 000b 9449 000b                         q...I...

000bb6dc <_ZTVN5spark9WiFiClassE>:
	...
   bb6e4:	412f 000b 95b9 000b 95af 000b 4139 000b     /A..........9A..
   bb6f4:	4117 000b 4123 000b 850d 000b 8515 000b     .A..#A..........
   bb704:	95a3 000b 959b 000b 9591 000b 9587 000b     ................
   bb714:	8545 000b                                   E...

000bb718 <_ZSt7nothrow>:
	...

000bb719 <_ZTSSt19_Sp_make_shared_tag>:
   bb719:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bb729:	6572 5f64 6174 0067 0000                     red_tag....

000bb734 <_ZTISt19_Sp_make_shared_tag>:
   bb734:	b774 000b b719 000b                         t.......

000bb73c <_ZTIN10__cxxabiv117__class_type_infoE>:
   bb73c:	b7d4 000b b748 000b b7f8 000b               ....H.......

000bb748 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bb748:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bb758:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bb768:	0045 0000                                   E...

000bb76c <_ZTVN10__cxxabiv117__class_type_infoE>:
   bb76c:	0000 0000 b73c 000b 9acd 000b 9ae1 000b     ....<...........
   bb77c:	9c75 000b 9c75 000b 9b4b 000b 9a8d 000b     u...u...K.......
   bb78c:	9b33 000b 9af5 000b 9abf 000b               3...........

000bb798 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bb798:	b7d4 000b b7a4 000b b73c 000b               ........<...

000bb7a4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bb7a4:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bb7b4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bb7c4:	666e 456f 0000 0000                         nfoE....

000bb7cc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bb7cc:	0000 0000 b798 000b 9b75 000b 9b89 000b     ........u.......
   bb7dc:	9c75 000b 9c75 000b 9b4b 000b 9a8d 000b     u...u...K.......
   bb7ec:	9c49 000b 9bd5 000b 9b9d 000b               I...........

000bb7f8 <_ZTISt9type_info>:
   bb7f8:	b774 000b b800 000b                         t.......

000bb800 <_ZTSSt9type_info>:
   bb800:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bb810:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bb820:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   bb830:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bb840:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bb850:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bb860:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bb870:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000bb87d <_ctype_>:
   bb87d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bb88d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bb89d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bb8ad:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bb8bd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bb8cd:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bb8dd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bb8ed:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bb8fd:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bb97e <link_const_variable_data_end>:
	...

000bb980 <link_constructors_location>:
   bb980:	000b4fdd 	.word	0x000b4fdd
   bb984:	000b8219 	.word	0x000b8219
   bb988:	000b8291 	.word	0x000b8291
   bb98c:	000b84bd 	.word	0x000b84bd
   bb990:	000b861d 	.word	0x000b861d
   bb994:	000b8765 	.word	0x000b8765
   bb998:	000b8cf1 	.word	0x000b8cf1
   bb99c:	000b9391 	.word	0x000b9391
   bb9a0:	000b95e9 	.word	0x000b95e9

000bb9a4 <link_constructors_end>:
	...
