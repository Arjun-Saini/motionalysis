
c:/Users/Arjun/Documents/GitHub/motionalysis/target/3.0.0/argon/motionalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006bb0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000dabd0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000094  2003decc  000dabd4  0001decc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000890  2003df60  2003df60  0002df60  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000dac68  000dac68  0002ac68  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dac90  000dac90  0002ac90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001ac41e  00000000  00000000  0002ac94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00019168  00000000  00000000  001d70b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003bcdb  00000000  00000000  001f021a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003390  00000000  00000000  0022bef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a840  00000000  00000000  0022f285  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003b65a  00000000  00000000  00239ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004285d  00000000  00000000  0027511f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00132456  00000000  00000000  002b797c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00009108  00000000  00000000  003e9dd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
   d4026:	b508      	push	{r3, lr}
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fec5 	bl	d9dc0 <memcpy>
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fee7 	bl	d9e10 <memset>
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003decc 	.word	0x2003decc
   d404c:	000dabd4 	.word	0x000dabd4
   d4050:	2003df60 	.word	0x2003df60
   d4054:	2003df60 	.word	0x2003df60
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
   d405c:	b570      	push	{r4, r5, r6, lr}
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4062:	f004 f937 	bl	d82d4 <module_user_init_hook>
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
   d4070:	bd70      	pop	{r4, r5, r6, pc}
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000daba4 	.word	0x000daba4
   d4080:	000dabc8 	.word	0x000dabc8

000d4084 <module_user_setup>:
   d4084:	f000 b8ba 	b.w	d41fc <setup>

000d4088 <module_user_loop>:
   d4088:	b508      	push	{r3, lr}
   d408a:	f000 f9b5 	bl	d43f8 <loop>
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4092:	f004 b8e1 	b.w	d8258 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 b8f3 	b.w	d6280 <malloc>

000d409a <_Znaj>:
   d409a:	f002 b8f1 	b.w	d6280 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 b8f7 	b.w	d6290 <free>

000d40a2 <__cxa_guard_acquire>:
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   d40b2:	4770      	bx	lr

000d40b4 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   d40b4:	b510      	push	{r4, lr}
   d40b6:	4604      	mov	r4, r0
   d40b8:	3004      	adds	r0, #4
   d40ba:	f002 fb42 	bl	d6742 <_ZN6StringD1Ev>
   d40be:	4620      	mov	r0, r4
   d40c0:	bd10      	pop	{r4, pc}

000d40c2 <_ZN14http_request_tD1Ev>:
} http_request_t;
   d40c2:	b510      	push	{r4, lr}
   d40c4:	4604      	mov	r4, r0
   d40c6:	303c      	adds	r0, #60	; 0x3c
   d40c8:	f002 fb3b 	bl	d6742 <_ZN6StringD1Ev>
   d40cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d40d0:	f002 fb37 	bl	d6742 <_ZN6StringD1Ev>
   d40d4:	4620      	mov	r0, r4
   d40d6:	f002 fb34 	bl	d6742 <_ZN6StringD1Ev>
   d40da:	4620      	mov	r0, r4
   d40dc:	bd10      	pop	{r4, pc}
	...

000d40e0 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv>:
  }

  count++;
}

void connectCallback(const BlePeerDevice& peer, void* context){
   d40e0:	b508      	push	{r3, lr}
  count = 0;
   d40e2:	4b07      	ldr	r3, [pc, #28]	; (d4100 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x20>)
   d40e4:	2200      	movs	r2, #0
   d40e6:	601a      	str	r2, [r3, #0]
  Serial.println("connected");
   d40e8:	f004 fa24 	bl	d8534 <_Z16_fetch_usbserialv>
   d40ec:	4905      	ldr	r1, [pc, #20]	; (d4104 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x24>)
   d40ee:	f003 ff22 	bl	d7f36 <_ZN5Print7printlnEPKc>
  digitalWrite(D7, HIGH);
}
   d40f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(D7, HIGH);
   d40f6:	2101      	movs	r1, #1
   d40f8:	2007      	movs	r0, #7
   d40fa:	f004 bf86 	b.w	d900a <digitalWrite>
   d40fe:	bf00      	nop
   d4100:	2003dfc8 	.word	0x2003dfc8
   d4104:	000da02b 	.word	0x000da02b

000d4108 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv>:

void disconnectCallback(const BlePeerDevice& peer, void* context){
   d4108:	b508      	push	{r3, lr}
  Serial.println("disconnected");
   d410a:	f004 fa13 	bl	d8534 <_Z16_fetch_usbserialv>
   d410e:	4904      	ldr	r1, [pc, #16]	; (d4120 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   d4110:	f003 ff11 	bl	d7f36 <_ZN5Print7printlnEPKc>
  digitalWrite(D7, LOW);
   d4114:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(D7, LOW);
   d4118:	2100      	movs	r1, #0
   d411a:	2007      	movs	r0, #7
   d411c:	f004 bf75 	b.w	d900a <digitalWrite>
   d4120:	000da028 	.word	0x000da028

000d4124 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d4124:	b538      	push	{r3, r4, r5, lr}
   d4126:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d4128:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d412a:	b128      	cbz	r0, d4138 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d412c:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d412e:	210c      	movs	r1, #12
   d4130:	f004 fff3 	bl	d911a <_ZdlPvj>
            wakeupSource = next;
   d4134:	4628      	mov	r0, r5
        while (wakeupSource) {
   d4136:	e7f8      	b.n	d412a <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d4138:	4620      	mov	r0, r4
   d413a:	bd38      	pop	{r3, r4, r5, pc}

000d413c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>:
    EEPtr begin()                        { return 0x00; }
    EEPtr end()                          { return length(); } //Standards requires this to be the item after the last valid entry. The returned pointer is invalid.
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
   d413c:	b510      	push	{r4, lr}
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d413e:	2204      	movs	r2, #4
    template <typename T> T &get( int idx, T &t )
   d4140:	460c      	mov	r4, r1
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4142:	f001 fd63 	bl	d5c0c <HAL_EEPROM_Get>
        return t;
    }
   d4146:	4620      	mov	r0, r4
   d4148:	bd10      	pop	{r4, pc}
	...

000d414c <_ZN10HttpClientD1Ev>:

class HttpClient {
   d414c:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d414e:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4150:	4b0a      	ldr	r3, [pc, #40]	; (d417c <_ZN10HttpClientD1Ev+0x30>)
   d4152:	6003      	str	r3, [r0, #0]
   d4154:	4605      	mov	r5, r0
   d4156:	b17c      	cbz	r4, d4178 <_ZN10HttpClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4158:	6863      	ldr	r3, [r4, #4]
   d415a:	3b01      	subs	r3, #1
   d415c:	6063      	str	r3, [r4, #4]
   d415e:	b95b      	cbnz	r3, d4178 <_ZN10HttpClientD1Ev+0x2c>
          _M_dispose();
   d4160:	6823      	ldr	r3, [r4, #0]
   d4162:	4620      	mov	r0, r4
   d4164:	689b      	ldr	r3, [r3, #8]
   d4166:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4168:	68a3      	ldr	r3, [r4, #8]
   d416a:	3b01      	subs	r3, #1
   d416c:	60a3      	str	r3, [r4, #8]
   d416e:	b91b      	cbnz	r3, d4178 <_ZN10HttpClientD1Ev+0x2c>
            _M_destroy();
   d4170:	6823      	ldr	r3, [r4, #0]
   d4172:	4620      	mov	r0, r4
   d4174:	68db      	ldr	r3, [r3, #12]
   d4176:	4798      	blx	r3
   d4178:	4628      	mov	r0, r5
   d417a:	bd38      	pop	{r3, r4, r5, pc}
   d417c:	000da8f0 	.word	0x000da8f0

000d4180 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4180:	b510      	push	{r4, lr}
   d4182:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4184:	6800      	ldr	r0, [r0, #0]
   d4186:	b108      	cbz	r0, d418c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4188:	f002 f882 	bl	d6290 <free>
class SystemClass {
   d418c:	4620      	mov	r0, r4
   d418e:	bd10      	pop	{r4, pc}

000d4190 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4190:	2300      	movs	r3, #0
   d4192:	6840      	ldr	r0, [r0, #4]
   d4194:	461a      	mov	r2, r3
   d4196:	4619      	mov	r1, r3
   d4198:	f001 bfea 	b.w	d6170 <network_on>

000d419c <_ZN5spark9WiFiClass3offEv>:
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d419c:	2300      	movs	r3, #0
   d419e:	6840      	ldr	r0, [r0, #4]
   d41a0:	461a      	mov	r2, r3
   d41a2:	4619      	mov	r1, r3
   d41a4:	f001 bfec 	b.w	d6180 <network_off>

000d41a8 <_ZN8particle24SystemSleepConfiguration8durationEm>:
            gpio(pins[i], mode);
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d41a8:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d41aa:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d41ac:	4605      	mov	r5, r0
   d41ae:	460e      	mov	r6, r1
        if (valid_) {
   d41b0:	b1cb      	cbz	r3, d41e6 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d41b2:	6803      	ldr	r3, [r0, #0]
   d41b4:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d41b6:	b123      	cbz	r3, d41c2 <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d41b8:	889a      	ldrh	r2, [r3, #4]
   d41ba:	2a04      	cmp	r2, #4
   d41bc:	d017      	beq.n	d41ee <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d41be:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d41c0:	e7f9      	b.n	d41b6 <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d41c2:	490c      	ldr	r1, [pc, #48]	; (d41f4 <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d41c4:	2010      	movs	r0, #16
   d41c6:	f004 ffaa 	bl	d911e <_ZnwjRKSt9nothrow_t>
   d41ca:	4604      	mov	r4, r0
   d41cc:	b168      	cbz	r0, d41ea <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d41ce:	2210      	movs	r2, #16
   d41d0:	2100      	movs	r1, #0
   d41d2:	f005 fe1d 	bl	d9e10 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d41d6:	4b08      	ldr	r3, [pc, #32]	; (d41f8 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d41d8:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d41da:	2304      	movs	r3, #4
   d41dc:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d41de:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d41e0:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d41e2:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d41e6:	4628      	mov	r0, r5
   d41e8:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d41ea:	7528      	strb	r0, [r5, #20]
                return *this;
   d41ec:	e7fb      	b.n	d41e6 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d41ee:	60de      	str	r6, [r3, #12]
                return *this;
   d41f0:	e7f9      	b.n	d41e6 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d41f2:	bf00      	nop
   d41f4:	000da9ac 	.word	0x000da9ac
   d41f8:	00030010 	.word	0x00030010

000d41fc <setup>:
void setup() {
   d41fc:	b510      	push	{r4, lr}
   d41fe:	b096      	sub	sp, #88	; 0x58
  EEPROM.get(200, wifiTimeLeft);
   d4200:	f004 ff30 	bl	d9064 <_Z21__fetch_global_EEPROMv>
   d4204:	494c      	ldr	r1, [pc, #304]	; (d4338 <setup+0x13c>)
   d4206:	20c8      	movs	r0, #200	; 0xc8
   d4208:	f7ff ff98 	bl	d413c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
        if (valid_) {
   d420c:	4b4b      	ldr	r3, [pc, #300]	; (d433c <setup+0x140>)
   d420e:	7d1a      	ldrb	r2, [r3, #20]
   d4210:	b10a      	cbz	r2, d4216 <setup+0x1a>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4212:	2202      	movs	r2, #2
   d4214:	721a      	strb	r2, [r3, #8]
  config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(1000 - SLEEP_DELAY);
   d4216:	f240 31a2 	movw	r1, #930	; 0x3a2
   d421a:	4848      	ldr	r0, [pc, #288]	; (d433c <setup+0x140>)
  request.hostname = "trek.thewcl.com";
   d421c:	4c48      	ldr	r4, [pc, #288]	; (d4340 <setup+0x144>)
  config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(1000 - SLEEP_DELAY);
   d421e:	f7ff ffc3 	bl	d41a8 <_ZN8particle24SystemSleepConfiguration8durationEm>
  Serial.begin(9600);
   d4222:	f004 f987 	bl	d8534 <_Z16_fetch_usbserialv>
   d4226:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d422a:	f004 f977 	bl	d851c <_ZN9USBSerial5beginEl>
  lis.begin(0x18);
   d422e:	2118      	movs	r1, #24
   d4230:	4844      	ldr	r0, [pc, #272]	; (d4344 <setup+0x148>)
   d4232:	f001 f91c 	bl	d546e <_ZN15Adafruit_LIS3DH5beginEh>
  Wire.end();
   d4236:	f004 ff43 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d423a:	f004 fa67 	bl	d870c <_ZN7TwoWire3endEv>
  lis.begin(I2C_ADDRESS);
   d423e:	2119      	movs	r1, #25
   d4240:	4840      	ldr	r0, [pc, #256]	; (d4344 <setup+0x148>)
   d4242:	f001 f914 	bl	d546e <_ZN15Adafruit_LIS3DH5beginEh>
  lis.setRange(LIS3DH_RANGE_2_G);
   d4246:	483f      	ldr	r0, [pc, #252]	; (d4344 <setup+0x148>)
   d4248:	2100      	movs	r1, #0
   d424a:	f001 f8e7 	bl	d541c <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>
  lis.setDataRate(LIS3DH_DATARATE_400_HZ);
   d424e:	483d      	ldr	r0, [pc, #244]	; (d4344 <setup+0x148>)
   d4250:	2107      	movs	r1, #7
   d4252:	f001 f8fb 	bl	d544c <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  pinMode(SDO_OUTPUT_PIN, OUTPUT);
   d4256:	2101      	movs	r1, #1
   d4258:	2008      	movs	r0, #8
   d425a:	f004 fec5 	bl	d8fe8 <pinMode>
  digitalWrite(SDO_OUTPUT_PIN, HIGH);
   d425e:	2101      	movs	r1, #1
   d4260:	2008      	movs	r0, #8
   d4262:	f004 fed2 	bl	d900a <digitalWrite>
  request.hostname = "trek.thewcl.com";
   d4266:	4938      	ldr	r1, [pc, #224]	; (d4348 <setup+0x14c>)
   d4268:	4620      	mov	r0, r4
   d426a:	f002 fafd 	bl	d6868 <_ZN6StringaSEPKc>
  request.port = 3000;
   d426e:	f640 33b8 	movw	r3, #3000	; 0xbb8
  request.path = "/";
   d4272:	4936      	ldr	r1, [pc, #216]	; (d434c <setup+0x150>)
  request.port = 3000;
   d4274:	63a3      	str	r3, [r4, #56]	; 0x38
  request.path = "/";
   d4276:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d427a:	f002 faf5 	bl	d6868 <_ZN6StringaSEPKc>
  BLE.on();
   d427e:	f003 f80b 	bl	d7298 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4282:	f003 f857 	bl	d7334 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   d4286:	f003 f807 	bl	d7298 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d428a:	4a31      	ldr	r2, [pc, #196]	; (d4350 <setup+0x154>)
   d428c:	4601      	mov	r1, r0
   d428e:	a80d      	add	r0, sp, #52	; 0x34
   d4290:	f003 fcf4 	bl	d7c7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4294:	a80d      	add	r0, sp, #52	; 0x34
   d4296:	f003 f8ec 	bl	d7472 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   d429a:	f002 fffd 	bl	d7298 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d429e:	4a2d      	ldr	r2, [pc, #180]	; (d4354 <setup+0x158>)
   d42a0:	4601      	mov	r1, r0
   d42a2:	a80d      	add	r0, sp, #52	; 0x34
   d42a4:	f003 fcea 	bl	d7c7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d42a8:	a80d      	add	r0, sp, #52	; 0x34
   d42aa:	f003 f8e2 	bl	d7472 <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   d42ae:	a80d      	add	r0, sp, #52	; 0x34
   d42b0:	f002 fe6d 	bl	d6f8e <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   d42b4:	4928      	ldr	r1, [pc, #160]	; (d4358 <setup+0x15c>)
   d42b6:	a803      	add	r0, sp, #12
   d42b8:	f002 fd6c 	bl	d6d94 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d42bc:	a903      	add	r1, sp, #12
   d42be:	a808      	add	r0, sp, #32
   d42c0:	f002 fd68 	bl	d6d94 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d42c4:	a808      	add	r0, sp, #32
   d42c6:	f002 fdab 	bl	d6e20 <_ZNK8particle7BleUuid4typeEv>
   d42ca:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d42cc:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   d42ce:	bb54      	cbnz	r4, d4326 <setup+0x12a>
            uint16_t uuid16 = tempUUID.shorted();
   d42d0:	f002 fdc5 	bl	d6e5e <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d42d4:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d42d6:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d42da:	2302      	movs	r3, #2
   d42dc:	f10d 020a 	add.w	r2, sp, #10
   d42e0:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d42e2:	a80d      	add	r0, sp, #52	; 0x34
   d42e4:	f002 fe48 	bl	d6f78 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   d42e8:	f002 ffd6 	bl	d7298 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42ec:	a90d      	add	r1, sp, #52	; 0x34
   d42ee:	2200      	movs	r2, #0
   d42f0:	f003 f840 	bl	d7374 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  BLE.onConnected(connectCallback);
   d42f4:	f002 ffd0 	bl	d7298 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42f8:	4918      	ldr	r1, [pc, #96]	; (d435c <setup+0x160>)
   d42fa:	2200      	movs	r2, #0
   d42fc:	f003 fbb4 	bl	d7a68 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
  BLE.onDisconnected(disconnectCallback);
   d4300:	f002 ffca 	bl	d7298 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4304:	2200      	movs	r2, #0
   d4306:	4916      	ldr	r1, [pc, #88]	; (d4360 <setup+0x164>)
   d4308:	f003 fbc4 	bl	d7a94 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
  pinMode(D7, OUTPUT);
   d430c:	2101      	movs	r1, #1
   d430e:	2007      	movs	r0, #7
   d4310:	f004 fe6a 	bl	d8fe8 <pinMode>
  count = 0;
   d4314:	4b13      	ldr	r3, [pc, #76]	; (d4364 <setup+0x168>)
   d4316:	2200      	movs	r2, #0
   d4318:	601a      	str	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d431a:	f001 fc67 	bl	d5bec <HAL_Timer_Get_Milli_Seconds>
  time1 = millis();
   d431e:	4b12      	ldr	r3, [pc, #72]	; (d4368 <setup+0x16c>)
   d4320:	6018      	str	r0, [r3, #0]
}
   d4322:	b016      	add	sp, #88	; 0x58
   d4324:	bd10      	pop	{r4, pc}
   d4326:	f002 fd9f 	bl	d6e68 <_ZNK8particle7BleUuid8rawBytesEv>
   d432a:	2300      	movs	r3, #0
   d432c:	9300      	str	r3, [sp, #0]
   d432e:	4602      	mov	r2, r0
   d4330:	2310      	movs	r3, #16
   d4332:	2107      	movs	r1, #7
   d4334:	e7d5      	b.n	d42e2 <setup+0xe6>
   d4336:	bf00      	nop
   d4338:	2003e620 	.word	0x2003e620
   d433c:	2003dfb0 	.word	0x2003dfb0
   d4340:	2003e578 	.word	0x2003e578
   d4344:	2003e400 	.word	0x2003e400
   d4348:	000da035 	.word	0x000da035
   d434c:	000da045 	.word	0x000da045
   d4350:	2003e608 	.word	0x2003e608
   d4354:	2003e5d8 	.word	0x2003e5d8
   d4358:	2003df70 	.word	0x2003df70
   d435c:	000d40e1 	.word	0x000d40e1
   d4360:	000d4109 	.word	0x000d4109
   d4364:	2003dfc8 	.word	0x2003dfc8
   d4368:	2003e600 	.word	0x2003e600

000d436c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d436c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d436e:	4616      	mov	r6, r2
   d4370:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4372:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d4374:	e9c0 2200 	strd	r2, r2, [r0]
   d4378:	4604      	mov	r4, r0
   d437a:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d437c:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d437e:	4619      	mov	r1, r3
   d4380:	a806      	add	r0, sp, #24
   d4382:	f002 fd07 	bl	d6d94 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d4386:	9916      	ldr	r1, [sp, #88]	; 0x58
   d4388:	4638      	mov	r0, r7
   d438a:	f002 fd03 	bl	d6d94 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d438e:	7833      	ldrb	r3, [r6, #0]
   d4390:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4394:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d4396:	9302      	str	r3, [sp, #8]
   d4398:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d439a:	4620      	mov	r0, r4
   d439c:	e9cd 7300 	strd	r7, r3, [sp]
   d43a0:	aa05      	add	r2, sp, #20
   d43a2:	ab06      	add	r3, sp, #24
   d43a4:	4629      	mov	r1, r5
   d43a6:	f003 fafb 	bl	d79a0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d43aa:	4620      	mov	r0, r4
   d43ac:	b011      	add	sp, #68	; 0x44
   d43ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d43b0 <_ZN5Print7printlnIiLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   d43b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d43b2:	4605      	mov	r5, r0
   d43b4:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d43b6:	4616      	mov	r6, r2
   d43b8:	b94a      	cbnz	r2, d43ce <_ZN5Print7printlnIiLi0EEEjT_i+0x1e>
        return write(n);
   d43ba:	6803      	ldr	r3, [r0, #0]
   d43bc:	b2c9      	uxtb	r1, r1
   d43be:	689b      	ldr	r3, [r3, #8]
   d43c0:	4798      	blx	r3
   d43c2:	4607      	mov	r7, r0
        n += println();
   d43c4:	4628      	mov	r0, r5
   d43c6:	f003 fdaa 	bl	d7f1e <_ZN5Print7printlnEv>
    }
   d43ca:	4438      	add	r0, r7
   d43cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d43ce:	2900      	cmp	r1, #0
   d43d0:	da0c      	bge.n	d43ec <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
   d43d2:	2a0a      	cmp	r2, #10
   d43d4:	d10a      	bne.n	d43ec <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
            t = print('-');
   d43d6:	212d      	movs	r1, #45	; 0x2d
   d43d8:	f003 fd98 	bl	d7f0c <_ZN5Print5printEc>
            val = -n;
   d43dc:	4261      	negs	r1, r4
            t = print('-');
   d43de:	4607      	mov	r7, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d43e0:	b2f2      	uxtb	r2, r6
   d43e2:	4628      	mov	r0, r5
   d43e4:	f003 fdb1 	bl	d7f4a <_ZN5Print11printNumberEmh>
   d43e8:	4407      	add	r7, r0
   d43ea:	e7eb      	b.n	d43c4 <_ZN5Print7printlnIiLi0EEEjT_i+0x14>
            val = n;
   d43ec:	4621      	mov	r1, r4
        size_t t = 0;
   d43ee:	2700      	movs	r7, #0
   d43f0:	e7f6      	b.n	d43e0 <_ZN5Print7printlnIiLi0EEEjT_i+0x30>
   d43f2:	0000      	movs	r0, r0
   d43f4:	0000      	movs	r0, r0
	...

000d43f8 <loop>:
void loop() { 
   d43f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d43fc:	ed2d 8b04 	vpush	{d8-d9}
   d4400:	b093      	sub	sp, #76	; 0x4c
   d4402:	f001 fbf3 	bl	d5bec <HAL_Timer_Get_Milli_Seconds>
  t1 = millis();
   d4406:	4c52      	ldr	r4, [pc, #328]	; (d4550 <loop+0x158>)
   d4408:	6020      	str	r0, [r4, #0]
   d440a:	f001 fbef 	bl	d5bec <HAL_Timer_Get_Milli_Seconds>
  time2 = millis(); 
   d440e:	4b51      	ldr	r3, [pc, #324]	; (d4554 <loop+0x15c>)
   d4410:	9404      	str	r4, [sp, #16]
   d4412:	6018      	str	r0, [r3, #0]
  if(bleInput | ((time2 - CONFIG_WAIT_TIME >= time1) && WiFi.hasCredentials() && !(BLE.connected()))){
   d4414:	4b50      	ldr	r3, [pc, #320]	; (d4558 <loop+0x160>)
   d4416:	f5a0 40ea 	sub.w	r0, r0, #29952	; 0x7500
   d441a:	681b      	ldr	r3, [r3, #0]
   d441c:	382f      	subs	r0, #47	; 0x2f
   d441e:	4298      	cmp	r0, r3
   d4420:	dc7c      	bgt.n	d451c <loop+0x124>
   d4422:	4b4e      	ldr	r3, [pc, #312]	; (d455c <loop+0x164>)
   d4424:	781b      	ldrb	r3, [r3, #0]
   d4426:	2b00      	cmp	r3, #0
   d4428:	f000 820f 	beq.w	d484a <loop+0x452>
    EEPROM.get(0, dsid);
   d442c:	f004 fe1a 	bl	d9064 <_Z21__fetch_global_EEPROMv>
   d4430:	494b      	ldr	r1, [pc, #300]	; (d4560 <loop+0x168>)
   d4432:	2000      	movs	r0, #0
   d4434:	f7ff fe82 	bl	d413c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(100, sleepDuration);
   d4438:	f004 fe14 	bl	d9064 <_Z21__fetch_global_EEPROMv>
   d443c:	4949      	ldr	r1, [pc, #292]	; (d4564 <loop+0x16c>)
   d443e:	2064      	movs	r0, #100	; 0x64
   d4440:	f7ff fe7c 	bl	d413c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(200, wifiInterval);
   d4444:	f004 fe0e 	bl	d9064 <_Z21__fetch_global_EEPROMv>
   d4448:	4947      	ldr	r1, [pc, #284]	; (d4568 <loop+0x170>)
   d444a:	20c8      	movs	r0, #200	; 0xc8
   d444c:	f7ff fe76 	bl	d413c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
        if (valid_) {
   d4450:	4b46      	ldr	r3, [pc, #280]	; (d456c <loop+0x174>)
   d4452:	7d1a      	ldrb	r2, [r3, #20]
   d4454:	b10a      	cbz	r2, d445a <loop+0x62>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4456:	2202      	movs	r2, #2
   d4458:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration - SLEEP_DELAY);
   d445a:	f8df 8108 	ldr.w	r8, [pc, #264]	; d4564 <loop+0x16c>
    lis.read();
   d445e:	4c44      	ldr	r4, [pc, #272]	; (d4570 <loop+0x178>)
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration - SLEEP_DELAY);
   d4460:	f8d8 1000 	ldr.w	r1, [r8]
   d4464:	4841      	ldr	r0, [pc, #260]	; (d456c <loop+0x174>)
    isMoving = 0;
   d4466:	4d43      	ldr	r5, [pc, #268]	; (d4574 <loop+0x17c>)
   d4468:	f8df b11c 	ldr.w	fp, [pc, #284]	; d4588 <loop+0x190>
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration - SLEEP_DELAY);
   d446c:	3946      	subs	r1, #70	; 0x46
   d446e:	f7ff fe9b 	bl	d41a8 <_ZN8particle24SystemSleepConfiguration8durationEm>
    lis.read();
   d4472:	4620      	mov	r0, r4
   d4474:	f001 f84c 	bl	d5510 <_ZN15Adafruit_LIS3DH4readEv>
    unixTime = Time.now();
   d4478:	f003 fe9a 	bl	d81b0 <_ZN9TimeClass3nowEv>
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(char c) : String(c) {}
	StringSumHelper(unsigned char num) : String(num) {}
	StringSumHelper(int num) : String(num) {}
	StringSumHelper(unsigned int num) : String(num) {}
	StringSumHelper(long num) : String(num) {}
   d447c:	220a      	movs	r2, #10
   d447e:	4601      	mov	r1, r0
   d4480:	a80e      	add	r0, sp, #56	; 0x38
   d4482:	f002 fa16 	bl	d68b2 <_ZN6StringC1Elh>
   d4486:	a90e      	add	r1, sp, #56	; 0x38
   d4488:	483b      	ldr	r0, [pc, #236]	; (d4578 <loop+0x180>)
   d448a:	f002 f9e5 	bl	d6858 <_ZN6StringaSEO15StringSumHelper>
class StringSumHelper : public String
   d448e:	a80e      	add	r0, sp, #56	; 0x38
   d4490:	f002 f957 	bl	d6742 <_ZN6StringD1Ev>
    if(lis.x_g >= 0.8 && lis.x_g <= 1.2){
   d4494:	edd4 8a03 	vldr	s17, [r4, #12]
    isMoving = 0;
   d4498:	2300      	movs	r3, #0
   d449a:	602b      	str	r3, [r5, #0]
    if(lis.x_g >= 0.8 && lis.x_g <= 1.2){
   d449c:	ee18 0a90 	vmov	r0, s17
   d44a0:	f005 f8ba 	bl	d9618 <__aeabi_f2d>
   d44a4:	a326      	add	r3, pc, #152	; (adr r3, d4540 <loop+0x148>)
   d44a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44aa:	4606      	mov	r6, r0
   d44ac:	460f      	mov	r7, r1
   d44ae:	f005 fb91 	bl	d9bd4 <__aeabi_dcmpge>
   d44b2:	46a2      	mov	sl, r4
   d44b4:	f8cd 800c 	str.w	r8, [sp, #12]
   d44b8:	9505      	str	r5, [sp, #20]
   d44ba:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   d44be:	2800      	cmp	r0, #0
   d44c0:	d064      	beq.n	d458c <loop+0x194>
   d44c2:	4b2e      	ldr	r3, [pc, #184]	; (d457c <loop+0x184>)
   d44c4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d44c8:	4630      	mov	r0, r6
   d44ca:	4639      	mov	r1, r7
   d44cc:	f005 fb78 	bl	d9bc0 <__aeabi_dcmple>
   d44d0:	2800      	cmp	r0, #0
   d44d2:	d05b      	beq.n	d458c <loop+0x194>
      x = GRAVITY * (lis.x_g - 1);
   d44d4:	ee78 7ac8 	vsub.f32	s15, s17, s16
   d44d8:	6925      	ldr	r5, [r4, #16]
   d44da:	6964      	ldr	r4, [r4, #20]
   d44dc:	ee17 0a90 	vmov	r0, s15
   d44e0:	f005 f89a 	bl	d9618 <__aeabi_f2d>
   d44e4:	a318      	add	r3, pc, #96	; (adr r3, d4548 <loop+0x150>)
   d44e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44ea:	f005 f8ed 	bl	d96c8 <__aeabi_dmul>
   d44ee:	f005 fbe3 	bl	d9cb8 <__aeabi_d2f>
   d44f2:	f8cb 0000 	str.w	r0, [fp]
      y = GRAVITY * lis.y_g;
   d44f6:	4628      	mov	r0, r5
   d44f8:	f005 f88e 	bl	d9618 <__aeabi_f2d>
   d44fc:	a312      	add	r3, pc, #72	; (adr r3, d4548 <loop+0x150>)
   d44fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4502:	f005 f8e1 	bl	d96c8 <__aeabi_dmul>
   d4506:	f005 fbd7 	bl	d9cb8 <__aeabi_d2f>
   d450a:	4b1d      	ldr	r3, [pc, #116]	; (d4580 <loop+0x188>)
   d450c:	6018      	str	r0, [r3, #0]
      z = GRAVITY * lis.z_g;
   d450e:	4620      	mov	r0, r4
      z = GRAVITY * (lis.z_g - 1);
   d4510:	f005 f882 	bl	d9618 <__aeabi_f2d>
   d4514:	a30c      	add	r3, pc, #48	; (adr r3, d4548 <loop+0x150>)
   d4516:	e9d3 2300 	ldrd	r2, r3, [r3]
   d451a:	e07a      	b.n	d4612 <loop+0x21a>
        WLanCredentials creds = credentials.getHalCredentials();
        network_set_credentials(*this, 0, &creds, NULL);
    }

    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
   d451c:	4b19      	ldr	r3, [pc, #100]	; (d4584 <loop+0x18c>)
   d451e:	2200      	movs	r2, #0
   d4520:	6858      	ldr	r0, [r3, #4]
   d4522:	4611      	mov	r1, r2
   d4524:	f001 fe44 	bl	d61b0 <network_has_credentials>
  if(bleInput | ((time2 - CONFIG_WAIT_TIME >= time1) && WiFi.hasCredentials() && !(BLE.connected()))){
   d4528:	2800      	cmp	r0, #0
   d452a:	f43f af7a 	beq.w	d4422 <loop+0x2a>
   d452e:	f002 feb3 	bl	d7298 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4532:	f002 ff32 	bl	d739a <_ZNK8particle14BleLocalDevice9connectedEv>
   d4536:	2800      	cmp	r0, #0
   d4538:	f47f af73 	bne.w	d4422 <loop+0x2a>
   d453c:	e776      	b.n	d442c <loop+0x34>
   d453e:	bf00      	nop
   d4540:	9999999a 	.word	0x9999999a
   d4544:	3fe99999 	.word	0x3fe99999
   d4548:	acd9e83e 	.word	0xacd9e83e
   d454c:	40239cfa 	.word	0x40239cfa
   d4550:	2003e5f0 	.word	0x2003e5f0
   d4554:	2003e604 	.word	0x2003e604
   d4558:	2003e600 	.word	0x2003e600
   d455c:	2003dfac 	.word	0x2003dfac
   d4560:	2003dfcc 	.word	0x2003dfcc
   d4564:	2003deec 	.word	0x2003deec
   d4568:	2003def0 	.word	0x2003def0
   d456c:	2003dfb0 	.word	0x2003dfb0
   d4570:	2003e400 	.word	0x2003e400
   d4574:	2003e3fc 	.word	0x2003e3fc
   d4578:	2003e610 	.word	0x2003e610
   d457c:	3ff33333 	.word	0x3ff33333
   d4580:	2003e628 	.word	0x2003e628
   d4584:	2003e7bc 	.word	0x2003e7bc
   d4588:	2003e624 	.word	0x2003e624
    } else if(lis.y_g >= 0.8 && lis.y_g <= 1.2){
   d458c:	ed9a 9a04 	vldr	s18, [sl, #16]
   d4590:	ee19 0a10 	vmov	r0, s18
   d4594:	f005 f840 	bl	d9618 <__aeabi_f2d>
   d4598:	edda 8a05 	vldr	s17, [sl, #20]
   d459c:	4604      	mov	r4, r0
   d459e:	ee18 0a90 	vmov	r0, s17
   d45a2:	460d      	mov	r5, r1
   d45a4:	f005 f838 	bl	d9618 <__aeabi_f2d>
   d45a8:	a3c5      	add	r3, pc, #788	; (adr r3, d48c0 <loop+0x4c8>)
   d45aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45ae:	4680      	mov	r8, r0
   d45b0:	4689      	mov	r9, r1
   d45b2:	4620      	mov	r0, r4
   d45b4:	4629      	mov	r1, r5
   d45b6:	f005 fb0d 	bl	d9bd4 <__aeabi_dcmpge>
   d45ba:	2800      	cmp	r0, #0
   d45bc:	f000 814a 	beq.w	d4854 <loop+0x45c>
   d45c0:	4bc1      	ldr	r3, [pc, #772]	; (d48c8 <loop+0x4d0>)
   d45c2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d45c6:	4620      	mov	r0, r4
   d45c8:	4629      	mov	r1, r5
   d45ca:	f005 faf9 	bl	d9bc0 <__aeabi_dcmple>
   d45ce:	2800      	cmp	r0, #0
   d45d0:	f000 8140 	beq.w	d4854 <loop+0x45c>
      x = GRAVITY * lis.x_g;
   d45d4:	a3b8      	add	r3, pc, #736	; (adr r3, d48b8 <loop+0x4c0>)
   d45d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45da:	4630      	mov	r0, r6
   d45dc:	4639      	mov	r1, r7
   d45de:	f005 f873 	bl	d96c8 <__aeabi_dmul>
   d45e2:	f005 fb69 	bl	d9cb8 <__aeabi_d2f>
      y = GRAVITY * (lis.y_g - 1);
   d45e6:	ee79 7a48 	vsub.f32	s15, s18, s16
      x = GRAVITY * lis.x_g;
   d45ea:	f8cb 0000 	str.w	r0, [fp]
      y = GRAVITY * (lis.y_g - 1);
   d45ee:	ee17 0a90 	vmov	r0, s15
   d45f2:	f005 f811 	bl	d9618 <__aeabi_f2d>
   d45f6:	a3b0      	add	r3, pc, #704	; (adr r3, d48b8 <loop+0x4c0>)
   d45f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45fc:	f005 f864 	bl	d96c8 <__aeabi_dmul>
   d4600:	f005 fb5a 	bl	d9cb8 <__aeabi_d2f>
   d4604:	4bb1      	ldr	r3, [pc, #708]	; (d48cc <loop+0x4d4>)
   d4606:	6018      	str	r0, [r3, #0]
      z = GRAVITY * lis.z_g;
   d4608:	a3ab      	add	r3, pc, #684	; (adr r3, d48b8 <loop+0x4c0>)
   d460a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d460e:	4640      	mov	r0, r8
   d4610:	4649      	mov	r1, r9
      z = GRAVITY * (lis.z_g - 1);
   d4612:	f005 f859 	bl	d96c8 <__aeabi_dmul>
   d4616:	f005 fb4f 	bl	d9cb8 <__aeabi_d2f>
   d461a:	4bad      	ldr	r3, [pc, #692]	; (d48d0 <loop+0x4d8>)
   d461c:	6018      	str	r0, [r3, #0]
    Serial.println(lis.x_g);
   d461e:	f003 ff89 	bl	d8534 <_Z16_fetch_usbserialv>
   d4622:	ed9a 0a03 	vldr	s0, [sl, #12]
   d4626:	2102      	movs	r1, #2
   d4628:	f003 fd81 	bl	d812e <_ZN5Print7printlnEfi>
    Serial.println(lis.y_g);
   d462c:	f003 ff82 	bl	d8534 <_Z16_fetch_usbserialv>
   d4630:	ed9a 0a04 	vldr	s0, [sl, #16]
   d4634:	2102      	movs	r1, #2
   d4636:	f003 fd7a 	bl	d812e <_ZN5Print7printlnEfi>
    Serial.println(lis.z_g);
   d463a:	f003 ff7b 	bl	d8534 <_Z16_fetch_usbserialv>
   d463e:	ed9a 0a05 	vldr	s0, [sl, #20]
   d4642:	2102      	movs	r1, #2
   d4644:	f003 fd73 	bl	d812e <_ZN5Print7printlnEfi>
    if(abs(x) > 1 || abs(y) > 1 || abs(z) > 1){
   d4648:	4ba2      	ldr	r3, [pc, #648]	; (d48d4 <loop+0x4dc>)
   d464a:	edd3 7a00 	vldr	s15, [r3]
   d464e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4656:	bfd8      	it	le
   d4658:	eef1 7a67 	vnegle.f32	s15, s15
   d465c:	eef4 7ac8 	vcmpe.f32	s15, s16
   d4660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4664:	dc1d      	bgt.n	d46a2 <loop+0x2aa>
   d4666:	4b99      	ldr	r3, [pc, #612]	; (d48cc <loop+0x4d4>)
   d4668:	edd3 7a00 	vldr	s15, [r3]
   d466c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4674:	bfd8      	it	le
   d4676:	eef1 7a67 	vnegle.f32	s15, s15
   d467a:	eef4 7ac8 	vcmpe.f32	s15, s16
   d467e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4682:	dc0e      	bgt.n	d46a2 <loop+0x2aa>
   d4684:	4b92      	ldr	r3, [pc, #584]	; (d48d0 <loop+0x4d8>)
   d4686:	edd3 7a00 	vldr	s15, [r3]
   d468a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d468e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4692:	bfd8      	it	le
   d4694:	eef1 7a67 	vnegle.f32	s15, s15
   d4698:	eef4 7ac8 	vcmpe.f32	s15, s16
   d469c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d46a0:	dd02      	ble.n	d46a8 <loop+0x2b0>
      isMoving = 1;
   d46a2:	4b8d      	ldr	r3, [pc, #564]	; (d48d8 <loop+0x4e0>)
   d46a4:	2201      	movs	r2, #1
   d46a6:	601a      	str	r2, [r3, #0]
    payload +=  "{\"dsid\":" + String(dsid) + ", \"value\":" + String(isMoving) + ", \"timestamp\":" + unixTime + "},";
   d46a8:	4e8c      	ldr	r6, [pc, #560]	; (d48dc <loop+0x4e4>)
	StringSumHelper(const char *p) : String(p) {}
   d46aa:	498d      	ldr	r1, [pc, #564]	; (d48e0 <loop+0x4e8>)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d46ac:	4d8d      	ldr	r5, [pc, #564]	; (d48e4 <loop+0x4ec>)
	StringSumHelper(const char *p) : String(p) {}
   d46ae:	a806      	add	r0, sp, #24
   d46b0:	f002 f892 	bl	d67d8 <_ZN6StringC1EPKc>
   d46b4:	220a      	movs	r2, #10
   d46b6:	6831      	ldr	r1, [r6, #0]
   d46b8:	a80a      	add	r0, sp, #40	; 0x28
   d46ba:	f002 f8e7 	bl	d688c <_ZN6StringC1Eih>
   d46be:	a90a      	add	r1, sp, #40	; 0x28
   d46c0:	a806      	add	r0, sp, #24
   d46c2:	f002 f931 	bl	d6928 <_ZplRK15StringSumHelperRK6String>
   d46c6:	4988      	ldr	r1, [pc, #544]	; (d48e8 <loop+0x4f0>)
   d46c8:	f002 f93a 	bl	d6940 <_ZplRK15StringSumHelperPKc>
   d46cc:	9b05      	ldr	r3, [sp, #20]
   d46ce:	220a      	movs	r2, #10
   d46d0:	6819      	ldr	r1, [r3, #0]
   d46d2:	4604      	mov	r4, r0
   d46d4:	a80e      	add	r0, sp, #56	; 0x38
   d46d6:	f002 f8d9 	bl	d688c <_ZN6StringC1Eih>
   d46da:	a90e      	add	r1, sp, #56	; 0x38
   d46dc:	4620      	mov	r0, r4
   d46de:	f002 f923 	bl	d6928 <_ZplRK15StringSumHelperRK6String>
   d46e2:	4982      	ldr	r1, [pc, #520]	; (d48ec <loop+0x4f4>)
    Serial.println(t3);
   d46e4:	4c82      	ldr	r4, [pc, #520]	; (d48f0 <loop+0x4f8>)
    payload +=  "{\"dsid\":" + String(dsid) + ", \"value\":" + String(isMoving) + ", \"timestamp\":" + unixTime + "},";
   d46e6:	f002 f92b 	bl	d6940 <_ZplRK15StringSumHelperPKc>
   d46ea:	4982      	ldr	r1, [pc, #520]	; (d48f4 <loop+0x4fc>)
   d46ec:	f002 f91c 	bl	d6928 <_ZplRK15StringSumHelperRK6String>
   d46f0:	4981      	ldr	r1, [pc, #516]	; (d48f8 <loop+0x500>)
   d46f2:	f002 f925 	bl	d6940 <_ZplRK15StringSumHelperPKc>
   d46f6:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d46f8:	4628      	mov	r0, r5
   d46fa:	f002 f904 	bl	d6906 <_ZN6String6concatERKS_>
   d46fe:	a80e      	add	r0, sp, #56	; 0x38
   d4700:	f002 f81f 	bl	d6742 <_ZN6StringD1Ev>
   d4704:	a80a      	add	r0, sp, #40	; 0x28
   d4706:	f002 f81c 	bl	d6742 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d470a:	a806      	add	r0, sp, #24
   d470c:	f002 f819 	bl	d6742 <_ZN6StringD1Ev>
    Serial.println(payload);
   d4710:	f003 ff10 	bl	d8534 <_Z16_fetch_usbserialv>
   d4714:	6829      	ldr	r1, [r5, #0]
   d4716:	f003 fc0e 	bl	d7f36 <_ZN5Print7printlnEPKc>
    Serial.println(dsid);
   d471a:	f003 ff0b 	bl	d8534 <_Z16_fetch_usbserialv>
   d471e:	6831      	ldr	r1, [r6, #0]
    Serial.println(wifiInterval);
   d4720:	4e76      	ldr	r6, [pc, #472]	; (d48fc <loop+0x504>)
    Serial.println(dsid);
   d4722:	220a      	movs	r2, #10
   d4724:	f7ff fe44 	bl	d43b0 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println(sleepDuration);
   d4728:	f003 ff04 	bl	d8534 <_Z16_fetch_usbserialv>
   d472c:	9b03      	ldr	r3, [sp, #12]
   d472e:	220a      	movs	r2, #10
   d4730:	6819      	ldr	r1, [r3, #0]
   d4732:	f7ff fe3d 	bl	d43b0 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println(wifiInterval);
   d4736:	f003 fefd 	bl	d8534 <_Z16_fetch_usbserialv>
   d473a:	6831      	ldr	r1, [r6, #0]
   d473c:	220a      	movs	r2, #10
   d473e:	f7ff fe37 	bl	d43b0 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println(t3);
   d4742:	f003 fef7 	bl	d8534 <_Z16_fetch_usbserialv>
   d4746:	6821      	ldr	r1, [r4, #0]
   d4748:	220a      	movs	r2, #10
   d474a:	f7ff fe31 	bl	d43b0 <_ZN5Print7printlnIiLi0EEEjT_i>
    BLE.disconnect();
   d474e:	f002 fda3 	bl	d7298 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4752:	f002 ff6d 	bl	d7630 <_ZNK8particle14BleLocalDevice10disconnectEv>
    BLE.off();
   d4756:	f002 fd9f 	bl	d7298 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d475a:	f002 ff03 	bl	d7564 <_ZNK8particle14BleLocalDevice3offEv>
    System.sleep(config);
   d475e:	a80e      	add	r0, sp, #56	; 0x38
   d4760:	4967      	ldr	r1, [pc, #412]	; (d4900 <loop+0x508>)
   d4762:	f001 fec7 	bl	d64f4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d4766:	980e      	ldr	r0, [sp, #56]	; 0x38
   d4768:	b108      	cbz	r0, d476e <loop+0x376>
            free(wakeupSource_);
   d476a:	f001 fd91 	bl	d6290 <free>
   d476e:	f001 fa3d 	bl	d5bec <HAL_Timer_Get_Milli_Seconds>
    t2 = millis();
   d4772:	4b64      	ldr	r3, [pc, #400]	; (d4904 <loop+0x50c>)
   d4774:	6018      	str	r0, [r3, #0]
    t3 = t2 - t1;
   d4776:	9b04      	ldr	r3, [sp, #16]
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	1ac0      	subs	r0, r0, r3
   d477c:	6020      	str	r0, [r4, #0]
    if(wifiTimeLeft <= 0){
   d477e:	4c62      	ldr	r4, [pc, #392]	; (d4908 <loop+0x510>)
   d4780:	6823      	ldr	r3, [r4, #0]
   d4782:	2b00      	cmp	r3, #0
   d4784:	dc5c      	bgt.n	d4840 <loop+0x448>
      WiFi.on();
   d4786:	4f61      	ldr	r7, [pc, #388]	; (d490c <loop+0x514>)
   d4788:	4638      	mov	r0, r7
   d478a:	f7ff fd01 	bl	d4190 <_ZN5spark9WiFiClass2onEv>
        network_connect(*this, flags, 0, NULL);
   d478e:	2300      	movs	r3, #0
   d4790:	6878      	ldr	r0, [r7, #4]
   d4792:	461a      	mov	r2, r3
   d4794:	4619      	mov	r1, r3
   d4796:	f001 fccb 	bl	d6130 <network_connect>
        return network_ready(*this, 0, NULL);
   d479a:	2200      	movs	r2, #0
   d479c:	6878      	ldr	r0, [r7, #4]
   d479e:	4611      	mov	r1, r2
   d47a0:	f001 fcde 	bl	d6160 <network_ready>
      while(!WiFi.ready()){}
   d47a4:	2800      	cmp	r0, #0
   d47a6:	d0f8      	beq.n	d479a <loop+0x3a2>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d47a8:	f001 fd42 	bl	d6230 <spark_cloud_flag_connect>
      payload.remove(payload.length() - 1);
   d47ac:	68a9      	ldr	r1, [r5, #8]
   d47ae:	484d      	ldr	r0, [pc, #308]	; (d48e4 <loop+0x4ec>)
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
    }

    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
   d47b0:	4f57      	ldr	r7, [pc, #348]	; (d4910 <loop+0x518>)
   d47b2:	3901      	subs	r1, #1
   d47b4:	f002 f93f 	bl	d6a36 <_ZN6String6removeEj>
	StringSumHelper(const char *p) : String(p) {}
   d47b8:	4956      	ldr	r1, [pc, #344]	; (d4914 <loop+0x51c>)
   d47ba:	a80e      	add	r0, sp, #56	; 0x38
   d47bc:	f002 f80c 	bl	d67d8 <_ZN6StringC1EPKc>
      request.body = "{\"data\":[" + payload + "]}";
   d47c0:	4948      	ldr	r1, [pc, #288]	; (d48e4 <loop+0x4ec>)
   d47c2:	a80e      	add	r0, sp, #56	; 0x38
   d47c4:	f002 f8b0 	bl	d6928 <_ZplRK15StringSumHelperRK6String>
   d47c8:	4953      	ldr	r1, [pc, #332]	; (d4918 <loop+0x520>)
   d47ca:	f002 f8b9 	bl	d6940 <_ZplRK15StringSumHelperPKc>
   d47ce:	4601      	mov	r1, r0
   d47d0:	4852      	ldr	r0, [pc, #328]	; (d491c <loop+0x524>)
   d47d2:	f002 f832 	bl	d683a <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d47d6:	a80e      	add	r0, sp, #56	; 0x38
   d47d8:	f001 ffb3 	bl	d6742 <_ZN6StringD1Ev>
   d47dc:	4b50      	ldr	r3, [pc, #320]	; (d4920 <loop+0x528>)
   d47de:	4951      	ldr	r1, [pc, #324]	; (d4924 <loop+0x52c>)
   d47e0:	4851      	ldr	r0, [pc, #324]	; (d4928 <loop+0x530>)
   d47e2:	9300      	str	r3, [sp, #0]
   d47e4:	463a      	mov	r2, r7
   d47e6:	4b51      	ldr	r3, [pc, #324]	; (d492c <loop+0x534>)
   d47e8:	f000 ffca 	bl	d5780 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("Status: " + response.status);
   d47ec:	f003 fea2 	bl	d8534 <_Z16_fetch_usbserialv>
   d47f0:	683b      	ldr	r3, [r7, #0]
   d47f2:	494f      	ldr	r1, [pc, #316]	; (d4930 <loop+0x538>)
   d47f4:	4419      	add	r1, r3
   d47f6:	f003 fb9e 	bl	d7f36 <_ZN5Print7printlnEPKc>
      Serial.println("Body: " + response.body);
   d47fa:	f003 fe9b 	bl	d8534 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d47fe:	494d      	ldr	r1, [pc, #308]	; (d4934 <loop+0x53c>)
   d4800:	4605      	mov	r5, r0
   d4802:	a80e      	add	r0, sp, #56	; 0x38
   d4804:	f001 ffe8 	bl	d67d8 <_ZN6StringC1EPKc>
   d4808:	1d39      	adds	r1, r7, #4
   d480a:	a80e      	add	r0, sp, #56	; 0x38
   d480c:	f002 f88c 	bl	d6928 <_ZplRK15StringSumHelperRK6String>
   d4810:	6801      	ldr	r1, [r0, #0]
   d4812:	4628      	mov	r0, r5
   d4814:	f003 fb8f 	bl	d7f36 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   d4818:	a80e      	add	r0, sp, #56	; 0x38
   d481a:	f001 ff92 	bl	d6742 <_ZN6StringD1Ev>
      payload = "";
   d481e:	4946      	ldr	r1, [pc, #280]	; (d4938 <loop+0x540>)
   d4820:	4830      	ldr	r0, [pc, #192]	; (d48e4 <loop+0x4ec>)
   d4822:	f002 f821 	bl	d6868 <_ZN6StringaSEPKc>
      wifiTimeLeft = wifiInterval;
   d4826:	6833      	ldr	r3, [r6, #0]
   d4828:	6023      	str	r3, [r4, #0]
      Particle.disconnect();
   d482a:	a80e      	add	r0, sp, #56	; 0x38
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
   d482c:	2300      	movs	r3, #0
   d482e:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
   d4832:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   d4836:	f003 fd7f 	bl	d8338 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
      WiFi.off();
   d483a:	4834      	ldr	r0, [pc, #208]	; (d490c <loop+0x514>)
   d483c:	f7ff fcae 	bl	d419c <_ZN5spark9WiFiClass3offEv>
    wifiTimeLeft -= sleepDuration;
   d4840:	9a03      	ldr	r2, [sp, #12]
   d4842:	6823      	ldr	r3, [r4, #0]
   d4844:	6812      	ldr	r2, [r2, #0]
   d4846:	1a9b      	subs	r3, r3, r2
   d4848:	6023      	str	r3, [r4, #0]
}
   d484a:	b013      	add	sp, #76	; 0x4c
   d484c:	ecbd 8b04 	vpop	{d8-d9}
   d4850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }else if(lis.z_g >= 0.8 && lis.z_g <= 1.2){
   d4854:	a31a      	add	r3, pc, #104	; (adr r3, d48c0 <loop+0x4c8>)
   d4856:	e9d3 2300 	ldrd	r2, r3, [r3]
   d485a:	4640      	mov	r0, r8
   d485c:	4649      	mov	r1, r9
   d485e:	f005 f9b9 	bl	d9bd4 <__aeabi_dcmpge>
   d4862:	2800      	cmp	r0, #0
   d4864:	f43f aedb 	beq.w	d461e <loop+0x226>
   d4868:	4b17      	ldr	r3, [pc, #92]	; (d48c8 <loop+0x4d0>)
   d486a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d486e:	4640      	mov	r0, r8
   d4870:	4649      	mov	r1, r9
   d4872:	f005 f9a5 	bl	d9bc0 <__aeabi_dcmple>
   d4876:	2800      	cmp	r0, #0
   d4878:	f43f aed1 	beq.w	d461e <loop+0x226>
      x = GRAVITY * lis.x_g;
   d487c:	a30e      	add	r3, pc, #56	; (adr r3, d48b8 <loop+0x4c0>)
   d487e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4882:	4630      	mov	r0, r6
   d4884:	4639      	mov	r1, r7
   d4886:	f004 ff1f 	bl	d96c8 <__aeabi_dmul>
   d488a:	f005 fa15 	bl	d9cb8 <__aeabi_d2f>
      y = GRAVITY * lis.y_g;
   d488e:	a30a      	add	r3, pc, #40	; (adr r3, d48b8 <loop+0x4c0>)
   d4890:	e9d3 2300 	ldrd	r2, r3, [r3]
      x = GRAVITY * lis.x_g;
   d4894:	f8cb 0000 	str.w	r0, [fp]
      y = GRAVITY * lis.y_g;
   d4898:	4629      	mov	r1, r5
   d489a:	4620      	mov	r0, r4
   d489c:	f004 ff14 	bl	d96c8 <__aeabi_dmul>
   d48a0:	f005 fa0a 	bl	d9cb8 <__aeabi_d2f>
   d48a4:	4b09      	ldr	r3, [pc, #36]	; (d48cc <loop+0x4d4>)
      z = GRAVITY * (lis.z_g - 1);
   d48a6:	ee78 7ac8 	vsub.f32	s15, s17, s16
      y = GRAVITY * lis.y_g;
   d48aa:	6018      	str	r0, [r3, #0]
      z = GRAVITY * (lis.z_g - 1);
   d48ac:	ee17 0a90 	vmov	r0, s15
   d48b0:	e62e      	b.n	d4510 <loop+0x118>
   d48b2:	bf00      	nop
   d48b4:	f3af 8000 	nop.w
   d48b8:	acd9e83e 	.word	0xacd9e83e
   d48bc:	40239cfa 	.word	0x40239cfa
   d48c0:	9999999a 	.word	0x9999999a
   d48c4:	3fe99999 	.word	0x3fe99999
   d48c8:	3ff33333 	.word	0x3ff33333
   d48cc:	2003e628 	.word	0x2003e628
   d48d0:	2003e62c 	.word	0x2003e62c
   d48d4:	2003e624 	.word	0x2003e624
   d48d8:	2003e3fc 	.word	0x2003e3fc
   d48dc:	2003dfcc 	.word	0x2003dfcc
   d48e0:	000da047 	.word	0x000da047
   d48e4:	2003e568 	.word	0x2003e568
   d48e8:	000da050 	.word	0x000da050
   d48ec:	000da05b 	.word	0x000da05b
   d48f0:	2003e5f8 	.word	0x2003e5f8
   d48f4:	2003e610 	.word	0x2003e610
   d48f8:	000da06a 	.word	0x000da06a
   d48fc:	2003def0 	.word	0x2003def0
   d4900:	2003dfb0 	.word	0x2003dfb0
   d4904:	2003e5f4 	.word	0x2003e5f4
   d4908:	2003e620 	.word	0x2003e620
   d490c:	2003e7bc 	.word	0x2003e7bc
   d4910:	2003e5c4 	.word	0x2003e5c4
   d4914:	000da06d 	.word	0x000da06d
   d4918:	000da077 	.word	0x000da077
   d491c:	2003e5b4 	.word	0x2003e5b4
   d4920:	000da07a 	.word	0x000da07a
   d4924:	2003e578 	.word	0x2003e578
   d4928:	2003dfd0 	.word	0x2003dfd0
   d492c:	2003decc 	.word	0x2003decc
   d4930:	000da07f 	.word	0x000da07f
   d4934:	000da088 	.word	0x000da088
   d4938:	000da185 	.word	0x000da185

000d493c <_ZN5Print7printlnIjLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
   d493c:	b538      	push	{r3, r4, r5, lr}
   d493e:	4605      	mov	r5, r0
    if (base == 0) {
   d4940:	b94a      	cbnz	r2, d4956 <_ZN5Print7printlnIjLi0EEEjT_i+0x1a>
        return write(n);
   d4942:	6802      	ldr	r2, [r0, #0]
   d4944:	b2c9      	uxtb	r1, r1
   d4946:	6892      	ldr	r2, [r2, #8]
   d4948:	4790      	blx	r2
        return printNumber(val, base) + t;
   d494a:	4604      	mov	r4, r0
        n += println();
   d494c:	4628      	mov	r0, r5
   d494e:	f003 fae6 	bl	d7f1e <_ZN5Print7printlnEv>
    }
   d4952:	4420      	add	r0, r4
   d4954:	bd38      	pop	{r3, r4, r5, pc}
        return printNumber(val, base) + t;
   d4956:	b2d2      	uxtb	r2, r2
   d4958:	f003 faf7 	bl	d7f4a <_ZN5Print11printNumberEmh>
   d495c:	e7f5      	b.n	d494a <_ZN5Print7printlnIjLi0EEEjT_i+0xe>

000d495e <_ZN5Print7printlnIhLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
   d495e:	b538      	push	{r3, r4, r5, lr}
   d4960:	4605      	mov	r5, r0
    if (base == 0) {
   d4962:	b942      	cbnz	r2, d4976 <_ZN5Print7printlnIhLi0EEEjT_i+0x18>
        return write(n);
   d4964:	6803      	ldr	r3, [r0, #0]
   d4966:	689b      	ldr	r3, [r3, #8]
   d4968:	4798      	blx	r3
        return printNumber(val, base) + t;
   d496a:	4604      	mov	r4, r0
        n += println();
   d496c:	4628      	mov	r0, r5
   d496e:	f003 fad6 	bl	d7f1e <_ZN5Print7printlnEv>
    }
   d4972:	4420      	add	r0, r4
   d4974:	bd38      	pop	{r3, r4, r5, pc}
        return printNumber(val, base) + t;
   d4976:	b2d2      	uxtb	r2, r2
   d4978:	f003 fae7 	bl	d7f4a <_ZN5Print11printNumberEmh>
   d497c:	e7f5      	b.n	d496a <_ZN5Print7printlnIhLi0EEEjT_i+0xc>
	...

000d4980 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4984:	460e      	mov	r6, r1
   d4986:	b095      	sub	sp, #84	; 0x54
  switch(count){
   d4988:	4dc7      	ldr	r5, [pc, #796]	; (d4ca8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x328>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d498a:	4604      	mov	r4, r0
  Serial.println(len);
   d498c:	f003 fdd2 	bl	d8534 <_Z16_fetch_usbserialv>
   d4990:	220a      	movs	r2, #10
   d4992:	4631      	mov	r1, r6
   d4994:	f7ff ffd2 	bl	d493c <_ZN5Print7printlnIjLi0EEEjT_i>
  inputBuffer = "";
   d4998:	49c4      	ldr	r1, [pc, #784]	; (d4cac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x32c>)
   d499a:	48c5      	ldr	r0, [pc, #788]	; (d4cb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x330>)
   d499c:	f001 ff64 	bl	d6868 <_ZN6StringaSEPKc>
  switch(count){
   d49a0:	682b      	ldr	r3, [r5, #0]
   d49a2:	2b06      	cmp	r3, #6
   d49a4:	f200 80b5 	bhi.w	d4b12 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x192>
   d49a8:	e8df f013 	tbh	[pc, r3, lsl #1]
   d49ac:	008400fa 	.word	0x008400fa
   d49b0:	0058006b 	.word	0x0058006b
   d49b4:	0024003e 	.word	0x0024003e
   d49b8:	0007      	.short	0x0007
   d49ba:	4fbe      	ldr	r7, [pc, #760]	; (d4cb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x334>)
	String & operator += (char c)			{concat(c); return (*this);}
   d49bc:	f8df 82f0 	ldr.w	r8, [pc, #752]	; d4cb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x330>
   d49c0:	4426      	add	r6, r4
      for(int i = 0; i < len - 1; i++){
   d49c2:	3401      	adds	r4, #1
   d49c4:	42a6      	cmp	r6, r4
   d49c6:	f000 828d 	beq.w	d4ee4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x564>
        Serial.println(data[i]);
   d49ca:	f003 fdb3 	bl	d8534 <_Z16_fetch_usbserialv>
   d49ce:	220a      	movs	r2, #10
   d49d0:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d49d4:	f7ff ffc3 	bl	d495e <_ZN5Print7printlnIhLi0EEEjT_i>
   d49d8:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d49dc:	48b4      	ldr	r0, [pc, #720]	; (d4cb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x330>)
   d49de:	f001 ff96 	bl	d690e <_ZN6String6concatEc>
        wifiInterval = atoi(inputBuffer) * 1000;
   d49e2:	f8d8 0000 	ldr.w	r0, [r8]
   d49e6:	f005 f9b7 	bl	d9d58 <atoi>
   d49ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d49ee:	4358      	muls	r0, r3
   d49f0:	6038      	str	r0, [r7, #0]
      for(int i = 0; i < len - 1; i++){
   d49f2:	e7e6      	b.n	d49c2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x42>
   d49f4:	4fb0      	ldr	r7, [pc, #704]	; (d4cb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x338>)
   d49f6:	f8df 82b8 	ldr.w	r8, [pc, #696]	; d4cb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x330>
   d49fa:	4426      	add	r6, r4
      for(int i = 0; i < len - 1; i++){
   d49fc:	3401      	adds	r4, #1
   d49fe:	42a6      	cmp	r6, r4
   d4a00:	f000 8226 	beq.w	d4e50 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4d0>
        Serial.println(data[i]);
   d4a04:	f003 fd96 	bl	d8534 <_Z16_fetch_usbserialv>
   d4a08:	220a      	movs	r2, #10
   d4a0a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4a0e:	f7ff ffa6 	bl	d495e <_ZN5Print7printlnIhLi0EEEjT_i>
   d4a12:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4a16:	48a6      	ldr	r0, [pc, #664]	; (d4cb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x330>)
   d4a18:	f001 ff79 	bl	d690e <_ZN6String6concatEc>
        sleepDuration = atoi(inputBuffer);
   d4a1c:	f8d8 0000 	ldr.w	r0, [r8]
   d4a20:	f005 f99a 	bl	d9d58 <atoi>
   d4a24:	6038      	str	r0, [r7, #0]
      for(int i = 0; i < len - 1; i++){
   d4a26:	e7e9      	b.n	d49fc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>
   d4a28:	4fa4      	ldr	r7, [pc, #656]	; (d4cbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x33c>)
   d4a2a:	f8df 8284 	ldr.w	r8, [pc, #644]	; d4cb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x330>
   d4a2e:	4426      	add	r6, r4
      for(int i = 0; i < len - 1; i++){
   d4a30:	3401      	adds	r4, #1
   d4a32:	42b4      	cmp	r4, r6
   d4a34:	f000 81cf 	beq.w	d4dd6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x456>
        Serial.println(data[i]);
   d4a38:	f003 fd7c 	bl	d8534 <_Z16_fetch_usbserialv>
   d4a3c:	220a      	movs	r2, #10
   d4a3e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4a42:	f7ff ff8c 	bl	d495e <_ZN5Print7printlnIhLi0EEEjT_i>
   d4a46:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4a4a:	4899      	ldr	r0, [pc, #612]	; (d4cb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x330>)
   d4a4c:	f001 ff5f 	bl	d690e <_ZN6String6concatEc>
        dsid = atoi(inputBuffer);
   d4a50:	f8d8 0000 	ldr.w	r0, [r8]
   d4a54:	f005 f980 	bl	d9d58 <atoi>
   d4a58:	6038      	str	r0, [r7, #0]
      for(int i = 0; i < len - 1; i++){
   d4a5a:	e7e9      	b.n	d4a30 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb0>
   d4a5c:	4f94      	ldr	r7, [pc, #592]	; (d4cb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x330>)
   d4a5e:	4426      	add	r6, r4
      for(int i = 0; i < len - 1; i++){
   d4a60:	3401      	adds	r4, #1
   d4a62:	42a6      	cmp	r6, r4
   d4a64:	f000 8154 	beq.w	d4d10 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x390>
        Serial.println(data[i]);
   d4a68:	f003 fd64 	bl	d8534 <_Z16_fetch_usbserialv>
   d4a6c:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4a70:	220a      	movs	r2, #10
   d4a72:	f7ff ff74 	bl	d495e <_ZN5Print7printlnIhLi0EEEjT_i>
   d4a76:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4a7a:	4638      	mov	r0, r7
   d4a7c:	f001 ff47 	bl	d690e <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   d4a80:	e7ee      	b.n	d4a60 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe0>
   d4a82:	4f8b      	ldr	r7, [pc, #556]	; (d4cb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x330>)
        password = inputBuffer;
   d4a84:	f8df 8268 	ldr.w	r8, [pc, #616]	; d4cf0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x370>
   d4a88:	4426      	add	r6, r4
      for(int i = 0; i < len - 1; i++){
   d4a8a:	3401      	adds	r4, #1
   d4a8c:	42a6      	cmp	r6, r4
   d4a8e:	f000 80ba 	beq.w	d4c06 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x286>
        Serial.println(data[i]);
   d4a92:	f003 fd4f 	bl	d8534 <_Z16_fetch_usbserialv>
   d4a96:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4a9a:	220a      	movs	r2, #10
   d4a9c:	f7ff ff5f 	bl	d495e <_ZN5Print7printlnIhLi0EEEjT_i>
   d4aa0:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4aa4:	4638      	mov	r0, r7
   d4aa6:	f001 ff32 	bl	d690e <_ZN6String6concatEc>
        password = inputBuffer;
   d4aaa:	4639      	mov	r1, r7
   d4aac:	4640      	mov	r0, r8
   d4aae:	f001 fec4 	bl	d683a <_ZN6StringaSERKS_>
      for(int i = 0; i < len - 1; i++){
   d4ab2:	e7ea      	b.n	d4a8a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10a>
   d4ab4:	4f7e      	ldr	r7, [pc, #504]	; (d4cb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x330>)
        ssid = inputBuffer;
   d4ab6:	f8df 8214 	ldr.w	r8, [pc, #532]	; d4ccc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34c>
   d4aba:	4426      	add	r6, r4
      for(int i = 0; i < len - 1; i++){
   d4abc:	3401      	adds	r4, #1
   d4abe:	42a6      	cmp	r6, r4
   d4ac0:	d02d      	beq.n	d4b1e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x19e>
   d4ac2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4ac6:	4638      	mov	r0, r7
   d4ac8:	f001 ff21 	bl	d690e <_ZN6String6concatEc>
        ssid = inputBuffer;
   d4acc:	4639      	mov	r1, r7
   d4ace:	4640      	mov	r0, r8
   d4ad0:	f001 feb3 	bl	d683a <_ZN6StringaSERKS_>
        Serial.println(data[i]);
   d4ad4:	f003 fd2e 	bl	d8534 <_Z16_fetch_usbserialv>
   d4ad8:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4adc:	220a      	movs	r2, #10
   d4ade:	f7ff ff3e 	bl	d495e <_ZN5Print7printlnIhLi0EEEjT_i>
      for(int i = 0; i < len - 1; i++){
   d4ae2:	e7eb      	b.n	d4abc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>
      networkBuffer = networks[networkCount - 1].ssid;
   d4ae4:	2138      	movs	r1, #56	; 0x38
   d4ae6:	fb01 a103 	mla	r1, r1, r3, sl
   d4aea:	3104      	adds	r1, #4
   d4aec:	4874      	ldr	r0, [pc, #464]	; (d4cc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x340>)
   d4aee:	f001 febb 	bl	d6868 <_ZN6StringaSEPKc>
      Serial.println(networkBuffer.length());
   d4af2:	f003 fd1f 	bl	d8534 <_Z16_fetch_usbserialv>
   d4af6:	68a1      	ldr	r1, [r4, #8]
   d4af8:	220a      	movs	r2, #10
   d4afa:	f7ff ff1f 	bl	d493c <_ZN5Print7printlnIjLi0EEEjT_i>
      txCharacteristic.setValue(networkBuffer);
   d4afe:	4970      	ldr	r1, [pc, #448]	; (d4cc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x340>)
   d4b00:	4870      	ldr	r0, [pc, #448]	; (d4cc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x344>)
   d4b02:	2200      	movs	r2, #0
   d4b04:	f002 fb0a 	bl	d711c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
      txCharacteristic.setValue("]\nEnter network SSID (blank to skip, 'clear' to reset credentials): ");
   d4b08:	496f      	ldr	r1, [pc, #444]	; (d4cc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x348>)
   d4b0a:	2200      	movs	r2, #0
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   d4b0c:	486d      	ldr	r0, [pc, #436]	; (d4cc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x344>)
   d4b0e:	f002 fb0a 	bl	d7126 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
  count++;
   d4b12:	682b      	ldr	r3, [r5, #0]
   d4b14:	3301      	adds	r3, #1
   d4b16:	602b      	str	r3, [r5, #0]
}
   d4b18:	b015      	add	sp, #84	; 0x54
   d4b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        operator const char*() const { return c_str(); }
   d4b1e:	4e6b      	ldr	r6, [pc, #428]	; (d4ccc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34c>)
      Serial.println(ssid);
   d4b20:	f003 fd08 	bl	d8534 <_Z16_fetch_usbserialv>
   d4b24:	6831      	ldr	r1, [r6, #0]
   d4b26:	f003 fa06 	bl	d7f36 <_ZN5Print7printlnEPKc>
      Serial.println(ssid.length());
   d4b2a:	f003 fd03 	bl	d8534 <_Z16_fetch_usbserialv>
   d4b2e:	68b1      	ldr	r1, [r6, #8]
   d4b30:	220a      	movs	r2, #10
   d4b32:	f7ff ff03 	bl	d493c <_ZN5Print7printlnIjLi0EEEjT_i>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4b36:	495d      	ldr	r1, [pc, #372]	; (d4cac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x32c>)
   d4b38:	4630      	mov	r0, r6
   d4b3a:	f001 ff16 	bl	d696a <_ZNK6String6equalsEPKc>
      if(ssid == ""){
   d4b3e:	4604      	mov	r4, r0
   d4b40:	b1f8      	cbz	r0, d4b82 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x202>
        count = 3;
   d4b42:	2303      	movs	r3, #3
   d4b44:	602b      	str	r3, [r5, #0]
        EEPROM.get(0, dsid);
   d4b46:	4c5d      	ldr	r4, [pc, #372]	; (d4cbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x33c>)
   d4b48:	f004 fa8c 	bl	d9064 <_Z21__fetch_global_EEPROMv>
   d4b4c:	4621      	mov	r1, r4
   d4b4e:	2000      	movs	r0, #0
   d4b50:	f7ff faf4 	bl	d413c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
        txCharacteristic.setValue("\nCurrent DSID is [");
   d4b54:	495e      	ldr	r1, [pc, #376]	; (d4cd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x350>)
   d4b56:	485b      	ldr	r0, [pc, #364]	; (d4cc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x344>)
   d4b58:	2200      	movs	r2, #0
   d4b5a:	f002 fae4 	bl	d7126 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        if(dsid != -1){
   d4b5e:	6821      	ldr	r1, [r4, #0]
   d4b60:	1c4c      	adds	r4, r1, #1
   d4b62:	d00b      	beq.n	d4b7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1fc>
          txCharacteristic.setValue(String(dsid));
   d4b64:	220a      	movs	r2, #10
   d4b66:	a801      	add	r0, sp, #4
   d4b68:	f001 fe90 	bl	d688c <_ZN6StringC1Eih>
   d4b6c:	4855      	ldr	r0, [pc, #340]	; (d4cc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x344>)
   d4b6e:	2200      	movs	r2, #0
   d4b70:	a901      	add	r1, sp, #4
   d4b72:	f002 fad3 	bl	d711c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   d4b76:	a801      	add	r0, sp, #4
   d4b78:	f001 fde3 	bl	d6742 <_ZN6StringD1Ev>
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   d4b7c:	4955      	ldr	r1, [pc, #340]	; (d4cd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x354>)
   d4b7e:	2200      	movs	r2, #0
   d4b80:	e7c4      	b.n	d4b0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18c>
   d4b82:	4955      	ldr	r1, [pc, #340]	; (d4cd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x358>)
   d4b84:	4630      	mov	r0, r6
   d4b86:	f001 fef0 	bl	d696a <_ZNK6String6equalsEPKc>
      }else if(ssid == "clear"){
   d4b8a:	4602      	mov	r2, r0
   d4b8c:	2800      	cmp	r0, #0
   d4b8e:	d038      	beq.n	d4c02 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x282>
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   d4b90:	4852      	ldr	r0, [pc, #328]	; (d4cdc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x35c>)
   d4b92:	4623      	mov	r3, r4
   d4b94:	6840      	ldr	r0, [r0, #4]
   d4b96:	4622      	mov	r2, r4
   d4b98:	4621      	mov	r1, r4
   d4b9a:	f001 fb19 	bl	d61d0 <network_clear_credentials>
        count = 0;
   d4b9e:	602c      	str	r4, [r5, #0]
      txCharacteristic.setValue("\nCredentials are currently stored for:\n[");
   d4ba0:	494f      	ldr	r1, [pc, #316]	; (d4ce0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x360>)
   d4ba2:	4848      	ldr	r0, [pc, #288]	; (d4cc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x344>)
      networkCount = WiFi.getCredentials(networks, 5);
   d4ba4:	4e4f      	ldr	r6, [pc, #316]	; (d4ce4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x364>)
   d4ba6:	4c46      	ldr	r4, [pc, #280]	; (d4cc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x340>)
        txCharacteristic.setValue(networkBuffer);
   d4ba8:	f8df 8118 	ldr.w	r8, [pc, #280]	; d4cc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x344>
        txCharacteristic.setValue(",\n");
   d4bac:	f8df 9154 	ldr.w	r9, [pc, #340]	; d4d04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x384>
      txCharacteristic.setValue("\nCredentials are currently stored for:\n[");
   d4bb0:	2200      	movs	r2, #0
   d4bb2:	f002 fab8 	bl	d7126 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      networkCount = WiFi.getCredentials(networks, 5);
   d4bb6:	494c      	ldr	r1, [pc, #304]	; (d4ce8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x368>)
   d4bb8:	4848      	ldr	r0, [pc, #288]	; (d4cdc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x35c>)
   d4bba:	2205      	movs	r2, #5
   d4bbc:	f004 f904 	bl	d8dc8 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>
   d4bc0:	4949      	ldr	r1, [pc, #292]	; (d4ce8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x368>)
   d4bc2:	6030      	str	r0, [r6, #0]
      for(int i = 0; i < networkCount - 1; i++){
   d4bc4:	2700      	movs	r7, #0
   d4bc6:	468a      	mov	sl, r1
   d4bc8:	6833      	ldr	r3, [r6, #0]
   d4bca:	3b01      	subs	r3, #1
   d4bcc:	42bb      	cmp	r3, r7
   d4bce:	f101 0b38 	add.w	fp, r1, #56	; 0x38
   d4bd2:	dd87      	ble.n	d4ae4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x164>
        networkBuffer = networks[i].ssid;
   d4bd4:	3104      	adds	r1, #4
   d4bd6:	4620      	mov	r0, r4
   d4bd8:	f001 fe46 	bl	d6868 <_ZN6StringaSEPKc>
        Serial.println(networkBuffer.length());
   d4bdc:	f003 fcaa 	bl	d8534 <_Z16_fetch_usbserialv>
   d4be0:	68a1      	ldr	r1, [r4, #8]
   d4be2:	220a      	movs	r2, #10
   d4be4:	f7ff feaa 	bl	d493c <_ZN5Print7printlnIjLi0EEEjT_i>
        txCharacteristic.setValue(networkBuffer);
   d4be8:	2200      	movs	r2, #0
   d4bea:	4621      	mov	r1, r4
   d4bec:	4640      	mov	r0, r8
   d4bee:	f002 fa95 	bl	d711c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        txCharacteristic.setValue(",\n");
   d4bf2:	4649      	mov	r1, r9
   d4bf4:	2200      	movs	r2, #0
   d4bf6:	4640      	mov	r0, r8
   d4bf8:	f002 fa95 	bl	d7126 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      for(int i = 0; i < networkCount - 1; i++){
   d4bfc:	3701      	adds	r7, #1
   d4bfe:	4659      	mov	r1, fp
   d4c00:	e7e2      	b.n	d4bc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x248>
        txCharacteristic.setValue("\nEnter network password: ");
   d4c02:	493a      	ldr	r1, [pc, #232]	; (d4cec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x36c>)
   d4c04:	e782      	b.n	d4b0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18c>
        operator const char*() const { return c_str(); }
   d4c06:	4c3a      	ldr	r4, [pc, #232]	; (d4cf0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x370>)
      Serial.println(password);
   d4c08:	f003 fc94 	bl	d8534 <_Z16_fetch_usbserialv>
   d4c0c:	6821      	ldr	r1, [r4, #0]
   d4c0e:	f003 f992 	bl	d7f36 <_ZN5Print7printlnEPKc>
      Serial.println(password.length());
   d4c12:	f003 fc8f 	bl	d8534 <_Z16_fetch_usbserialv>
   d4c16:	68a1      	ldr	r1, [r4, #8]
   d4c18:	220a      	movs	r2, #10
   d4c1a:	f7ff fe8f 	bl	d493c <_ZN5Print7printlnIjLi0EEEjT_i>
   d4c1e:	4b2b      	ldr	r3, [pc, #172]	; (d4ccc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34c>)
   d4c20:	6826      	ldr	r6, [r4, #0]
   d4c22:	f8d3 8000 	ldr.w	r8, [r3]
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d4c26:	f1b8 0f00 	cmp.w	r8, #0
   d4c2a:	d06d      	beq.n	d4d08 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x388>
   d4c2c:	4640      	mov	r0, r8
   d4c2e:	f005 f92d 	bl	d9e8c <strlen>
   d4c32:	4607      	mov	r7, r0
   d4c34:	2e00      	cmp	r6, #0
   d4c36:	d069      	beq.n	d4d0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x38c>
   d4c38:	4630      	mov	r0, r6
   d4c3a:	f005 f927 	bl	d9e8c <strlen>
   d4c3e:	4604      	mov	r4, r0
        memset(&creds, 0, sizeof(creds));
   d4c40:	2238      	movs	r2, #56	; 0x38
   d4c42:	2100      	movs	r1, #0
   d4c44:	a806      	add	r0, sp, #24
   d4c46:	f005 f8e3 	bl	d9e10 <memset>
        creds.size = sizeof(creds);
   d4c4a:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   d4c4c:	e9cd 3801 	strd	r3, r8, [sp, #4]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d4c50:	4822      	ldr	r0, [pc, #136]	; (d4cdc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x35c>)
        creds.password_len = passwordLen;
   d4c52:	9405      	str	r4, [sp, #20]
        creds.security = WLanSecurityType(security);
   d4c54:	2303      	movs	r3, #3
   d4c56:	f8ad 3018 	strh.w	r3, [sp, #24]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d4c5a:	2300      	movs	r3, #0
   d4c5c:	aa01      	add	r2, sp, #4
   d4c5e:	4619      	mov	r1, r3
   d4c60:	6840      	ldr	r0, [r0, #4]
        creds.password = password;
   d4c62:	e9cd 7603 	strd	r7, r6, [sp, #12]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d4c66:	f001 faab 	bl	d61c0 <network_set_credentials>
      Serial.println("\n\nCredentials set with ssid: " + ssid + "\npassword: " + password + "\n\n");
   d4c6a:	f003 fc63 	bl	d8534 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d4c6e:	4921      	ldr	r1, [pc, #132]	; (d4cf4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x374>)
   d4c70:	4604      	mov	r4, r0
   d4c72:	a801      	add	r0, sp, #4
   d4c74:	f001 fdb0 	bl	d67d8 <_ZN6StringC1EPKc>
   d4c78:	4914      	ldr	r1, [pc, #80]	; (d4ccc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34c>)
   d4c7a:	a801      	add	r0, sp, #4
   d4c7c:	f001 fe54 	bl	d6928 <_ZplRK15StringSumHelperRK6String>
   d4c80:	491d      	ldr	r1, [pc, #116]	; (d4cf8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x378>)
   d4c82:	f001 fe5d 	bl	d6940 <_ZplRK15StringSumHelperPKc>
   d4c86:	491a      	ldr	r1, [pc, #104]	; (d4cf0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x370>)
   d4c88:	f001 fe4e 	bl	d6928 <_ZplRK15StringSumHelperRK6String>
   d4c8c:	491b      	ldr	r1, [pc, #108]	; (d4cfc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x37c>)
   d4c8e:	f001 fe57 	bl	d6940 <_ZplRK15StringSumHelperPKc>
   d4c92:	6801      	ldr	r1, [r0, #0]
   d4c94:	4620      	mov	r0, r4
   d4c96:	f003 f94e 	bl	d7f36 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   d4c9a:	a801      	add	r0, sp, #4
   d4c9c:	f001 fd51 	bl	d6742 <_ZN6StringD1Ev>
      txCharacteristic.setValue("\nEnter 'test' to test credentials (blank to skip): ");
   d4ca0:	4917      	ldr	r1, [pc, #92]	; (d4d00 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x380>)
   d4ca2:	2200      	movs	r2, #0
   d4ca4:	e732      	b.n	d4b0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18c>
   d4ca6:	bf00      	nop
   d4ca8:	2003dfc8 	.word	0x2003dfc8
   d4cac:	000da185 	.word	0x000da185
   d4cb0:	2003e3ec 	.word	0x2003e3ec
   d4cb4:	2003def0 	.word	0x2003def0
   d4cb8:	2003deec 	.word	0x2003deec
   d4cbc:	2003dfcc 	.word	0x2003dfcc
   d4cc0:	2003e42c 	.word	0x2003e42c
   d4cc4:	2003e608 	.word	0x2003e608
   d4cc8:	000da0bb 	.word	0x000da0bb
   d4ccc:	2003e5e0 	.word	0x2003e5e0
   d4cd0:	000da100 	.word	0x000da100
   d4cd4:	000da113 	.word	0x000da113
   d4cd8:	000da139 	.word	0x000da139
   d4cdc:	2003e7bc 	.word	0x2003e7bc
   d4ce0:	000da08f 	.word	0x000da08f
   d4ce4:	2003e43c 	.word	0x2003e43c
   d4ce8:	2003e440 	.word	0x2003e440
   d4cec:	000da13f 	.word	0x000da13f
   d4cf0:	2003e558 	.word	0x2003e558
   d4cf4:	000da159 	.word	0x000da159
   d4cf8:	000da177 	.word	0x000da177
   d4cfc:	000da183 	.word	0x000da183
   d4d00:	000da186 	.word	0x000da186
   d4d04:	000da0b8 	.word	0x000da0b8
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d4d08:	4647      	mov	r7, r8
   d4d0a:	e793      	b.n	d4c34 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b4>
   d4d0c:	4634      	mov	r4, r6
   d4d0e:	e797      	b.n	d4c40 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4d10:	4989      	ldr	r1, [pc, #548]	; (d4f38 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b8>)
   d4d12:	488a      	ldr	r0, [pc, #552]	; (d4f3c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5bc>)
   d4d14:	f001 fe29 	bl	d696a <_ZNK6String6equalsEPKc>
      if(inputBuffer == "test" && WiFi.hasCredentials()){
   d4d18:	2800      	cmp	r0, #0
   d4d1a:	f43f af14 	beq.w	d4b46 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c6>
        return network_has_credentials(*this, 0, NULL);
   d4d1e:	4c88      	ldr	r4, [pc, #544]	; (d4f40 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c0>)
   d4d20:	2200      	movs	r2, #0
   d4d22:	6860      	ldr	r0, [r4, #4]
   d4d24:	4611      	mov	r1, r2
   d4d26:	f001 fa43 	bl	d61b0 <network_has_credentials>
   d4d2a:	2800      	cmp	r0, #0
   d4d2c:	f43f af0b 	beq.w	d4b46 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c6>
   d4d30:	f000 ff5c 	bl	d5bec <HAL_Timer_Get_Milli_Seconds>
        t4 = millis();
   d4d34:	4e83      	ldr	r6, [pc, #524]	; (d4f44 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c4>)
   d4d36:	6030      	str	r0, [r6, #0]
        WiFi.on();
   d4d38:	4620      	mov	r0, r4
   d4d3a:	f7ff fa29 	bl	d4190 <_ZN5spark9WiFiClass2onEv>
        network_connect(*this, flags, 0, NULL);
   d4d3e:	2300      	movs	r3, #0
   d4d40:	6860      	ldr	r0, [r4, #4]
   d4d42:	461a      	mov	r2, r3
   d4d44:	4619      	mov	r1, r3
   d4d46:	f001 f9f3 	bl	d6130 <network_connect>
          if(millis() >= t4 + WIFI_TEST_TIMEOUT){
   d4d4a:	f247 5730 	movw	r7, #30000	; 0x7530
        return network_connecting(*this, 0, NULL);
   d4d4e:	2200      	movs	r2, #0
   d4d50:	4611      	mov	r1, r2
   d4d52:	6860      	ldr	r0, [r4, #4]
   d4d54:	f001 f9f4 	bl	d6140 <network_connecting>
        while(WiFi.connecting() || !WiFi.ready()){
   d4d58:	4602      	mov	r2, r0
   d4d5a:	b308      	cbz	r0, d4da0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x420>
   d4d5c:	f000 ff46 	bl	d5bec <HAL_Timer_Get_Milli_Seconds>
          if(millis() >= t4 + WIFI_TEST_TIMEOUT){
   d4d60:	6833      	ldr	r3, [r6, #0]
   d4d62:	443b      	add	r3, r7
   d4d64:	4283      	cmp	r3, r0
   d4d66:	d8f2      	bhi.n	d4d4e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3ce>
            wifiTest = false;
   d4d68:	4b77      	ldr	r3, [pc, #476]	; (d4f48 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c8>)
   d4d6a:	2200      	movs	r2, #0
   d4d6c:	701a      	strb	r2, [r3, #0]
            Serial.println("timeout");
   d4d6e:	f003 fbe1 	bl	d8534 <_Z16_fetch_usbserialv>
   d4d72:	4976      	ldr	r1, [pc, #472]	; (d4f4c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5cc>)
   d4d74:	f003 f8df 	bl	d7f36 <_ZN5Print7printlnEPKc>
            Serial.println(millis());
   d4d78:	f003 fbdc 	bl	d8534 <_Z16_fetch_usbserialv>
   d4d7c:	4604      	mov	r4, r0
   d4d7e:	f000 ff35 	bl	d5bec <HAL_Timer_Get_Milli_Seconds>
   d4d82:	220a      	movs	r2, #10
   d4d84:	4601      	mov	r1, r0
   d4d86:	4620      	mov	r0, r4
   d4d88:	f003 f8df 	bl	d7f4a <_ZN5Print11printNumberEmh>
        n += println();
   d4d8c:	4620      	mov	r0, r4
   d4d8e:	f003 f8c6 	bl	d7f1e <_ZN5Print7printlnEv>
            Serial.println(t4);
   d4d92:	f003 fbcf 	bl	d8534 <_Z16_fetch_usbserialv>
   d4d96:	6831      	ldr	r1, [r6, #0]
   d4d98:	220a      	movs	r2, #10
   d4d9a:	f7ff fb09 	bl	d43b0 <_ZN5Print7printlnIiLi0EEEjT_i>
            break;
   d4d9e:	e005      	b.n	d4dac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x42c>
        return network_ready(*this, 0, NULL);
   d4da0:	4601      	mov	r1, r0
   d4da2:	6860      	ldr	r0, [r4, #4]
   d4da4:	f001 f9dc 	bl	d6160 <network_ready>
        while(WiFi.connecting() || !WiFi.ready()){
   d4da8:	2800      	cmp	r0, #0
   d4daa:	d0d7      	beq.n	d4d5c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3dc>
        if(wifiTest){
   d4dac:	4e66      	ldr	r6, [pc, #408]	; (d4f48 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c8>)
        WiFi.off();
   d4dae:	4864      	ldr	r0, [pc, #400]	; (d4f40 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c0>)
   d4db0:	f7ff f9f4 	bl	d419c <_ZN5spark9WiFiClass3offEv>
        if(wifiTest){
   d4db4:	7834      	ldrb	r4, [r6, #0]
   d4db6:	b12c      	cbz	r4, d4dc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x444>
          txCharacteristic.setValue("Success!\n");
   d4db8:	4965      	ldr	r1, [pc, #404]	; (d4f50 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d0>)
   d4dba:	4866      	ldr	r0, [pc, #408]	; (d4f54 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d4>)
   d4dbc:	2200      	movs	r2, #0
   d4dbe:	f002 f9b2 	bl	d7126 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
   d4dc2:	e6c0      	b.n	d4b46 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c6>
          txCharacteristic.setValue("ERROR: WiFi connection timeout\n");
   d4dc4:	4964      	ldr	r1, [pc, #400]	; (d4f58 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d8>)
   d4dc6:	4863      	ldr	r0, [pc, #396]	; (d4f54 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d4>)
   d4dc8:	4622      	mov	r2, r4
   d4dca:	f002 f9ac 	bl	d7126 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
          wifiTest = true;
   d4dce:	2301      	movs	r3, #1
          count = 0;
   d4dd0:	602c      	str	r4, [r5, #0]
          wifiTest = true;
   d4dd2:	7033      	strb	r3, [r6, #0]
          goto SSID;
   d4dd4:	e6e4      	b.n	d4ba0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x220>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4dd6:	4961      	ldr	r1, [pc, #388]	; (d4f5c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5dc>)
   d4dd8:	4858      	ldr	r0, [pc, #352]	; (d4f3c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5bc>)
   d4dda:	f001 fdc6 	bl	d696a <_ZNK6String6equalsEPKc>
      if(inputBuffer != ""){
   d4dde:	4604      	mov	r4, r0
   d4de0:	b958      	cbnz	r0, d4dfa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x47a>
        EEPROM.put(0, dsid);
   d4de2:	f004 f93f 	bl	d9064 <_Z21__fetch_global_EEPROMv>

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4de6:	495e      	ldr	r1, [pc, #376]	; (d4f60 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e0>)
   d4de8:	2204      	movs	r2, #4
   d4dea:	4620      	mov	r0, r4
   d4dec:	f000 ff16 	bl	d5c1c <HAL_EEPROM_Put>
        Serial.println("dsid entered");
   d4df0:	f003 fba0 	bl	d8534 <_Z16_fetch_usbserialv>
   d4df4:	495b      	ldr	r1, [pc, #364]	; (d4f64 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e4>)
   d4df6:	f003 f89e 	bl	d7f36 <_ZN5Print7printlnEPKc>
      EEPROM.get(0, dsid);
   d4dfa:	f004 f933 	bl	d9064 <_Z21__fetch_global_EEPROMv>
   d4dfe:	4958      	ldr	r1, [pc, #352]	; (d4f60 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e0>)
      EEPROM.get(100, sleepDuration);
   d4e00:	4c59      	ldr	r4, [pc, #356]	; (d4f68 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e8>)
      EEPROM.get(0, dsid);
   d4e02:	2000      	movs	r0, #0
   d4e04:	f7ff f99a 	bl	d413c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
      Serial.println("dsid: " + dsid);
   d4e08:	f003 fb94 	bl	d8534 <_Z16_fetch_usbserialv>
   d4e0c:	683b      	ldr	r3, [r7, #0]
   d4e0e:	4957      	ldr	r1, [pc, #348]	; (d4f6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   d4e10:	4419      	add	r1, r3
   d4e12:	f003 f890 	bl	d7f36 <_ZN5Print7printlnEPKc>
      EEPROM.get(100, sleepDuration);
   d4e16:	f004 f925 	bl	d9064 <_Z21__fetch_global_EEPROMv>
   d4e1a:	4621      	mov	r1, r4
   d4e1c:	2064      	movs	r0, #100	; 0x64
   d4e1e:	f7ff f98d 	bl	d413c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
      txCharacteristic.setValue("\nCurrent value for data collection interval is [");
   d4e22:	4953      	ldr	r1, [pc, #332]	; (d4f70 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f0>)
   d4e24:	484b      	ldr	r0, [pc, #300]	; (d4f54 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d4>)
   d4e26:	2200      	movs	r2, #0
   d4e28:	f002 f97d 	bl	d7126 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(sleepDuration != -1){
   d4e2c:	6821      	ldr	r1, [r4, #0]
   d4e2e:	1c48      	adds	r0, r1, #1
   d4e30:	d00b      	beq.n	d4e4a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4ca>
        txCharacteristic.setValue(String(sleepDuration));
   d4e32:	220a      	movs	r2, #10
   d4e34:	a801      	add	r0, sp, #4
   d4e36:	f001 fd29 	bl	d688c <_ZN6StringC1Eih>
   d4e3a:	4846      	ldr	r0, [pc, #280]	; (d4f54 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d4>)
   d4e3c:	2200      	movs	r2, #0
   d4e3e:	a901      	add	r1, sp, #4
   d4e40:	f002 f96c 	bl	d711c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   d4e44:	a801      	add	r0, sp, #4
   d4e46:	f001 fc7c 	bl	d6742 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between data collection as an integer in milliseconds (blank to skip): ");
   d4e4a:	494a      	ldr	r1, [pc, #296]	; (d4f74 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   d4e4c:	2200      	movs	r2, #0
   d4e4e:	e65d      	b.n	d4b0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18c>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4e50:	4942      	ldr	r1, [pc, #264]	; (d4f5c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5dc>)
   d4e52:	483a      	ldr	r0, [pc, #232]	; (d4f3c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5bc>)
   d4e54:	f001 fd89 	bl	d696a <_ZNK6String6equalsEPKc>
      if(inputBuffer == ""){
   d4e58:	b128      	cbz	r0, d4e66 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e6>
        EEPROM.get(100, sleepDuration);
   d4e5a:	f004 f903 	bl	d9064 <_Z21__fetch_global_EEPROMv>
   d4e5e:	4942      	ldr	r1, [pc, #264]	; (d4f68 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e8>)
   d4e60:	2064      	movs	r0, #100	; 0x64
   d4e62:	f7ff f96b 	bl	d413c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
      EEPROM.put(100, sleepDuration);
   d4e66:	f004 f8fd 	bl	d9064 <_Z21__fetch_global_EEPROMv>
   d4e6a:	2204      	movs	r2, #4
   d4e6c:	493e      	ldr	r1, [pc, #248]	; (d4f68 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e8>)
   d4e6e:	2064      	movs	r0, #100	; 0x64
   d4e70:	f000 fed4 	bl	d5c1c <HAL_EEPROM_Put>
      EEPROM.get(100, sleepDuration);
   d4e74:	f004 f8f6 	bl	d9064 <_Z21__fetch_global_EEPROMv>
   d4e78:	493b      	ldr	r1, [pc, #236]	; (d4f68 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e8>)
   d4e7a:	2064      	movs	r0, #100	; 0x64
   d4e7c:	f7ff f95e 	bl	d413c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
        if (valid_) {
   d4e80:	4b3d      	ldr	r3, [pc, #244]	; (d4f78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f8>)
   d4e82:	7d1a      	ldrb	r2, [r3, #20]
   d4e84:	b10a      	cbz	r2, d4e8a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x50a>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4e86:	2202      	movs	r2, #2
   d4e88:	721a      	strb	r2, [r3, #8]
      config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration - SLEEP_DELAY);
   d4e8a:	6839      	ldr	r1, [r7, #0]
      EEPROM.get(200, wifiInterval);
   d4e8c:	4c3b      	ldr	r4, [pc, #236]	; (d4f7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5fc>)
      config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration - SLEEP_DELAY);
   d4e8e:	483a      	ldr	r0, [pc, #232]	; (d4f78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f8>)
   d4e90:	3946      	subs	r1, #70	; 0x46
   d4e92:	f7ff f989 	bl	d41a8 <_ZN8particle24SystemSleepConfiguration8durationEm>
      Serial.println(sleepDuration);
   d4e96:	f003 fb4d 	bl	d8534 <_Z16_fetch_usbserialv>
   d4e9a:	220a      	movs	r2, #10
   d4e9c:	6839      	ldr	r1, [r7, #0]
   d4e9e:	f7ff fa87 	bl	d43b0 <_ZN5Print7printlnIiLi0EEEjT_i>
      EEPROM.get(200, wifiInterval);
   d4ea2:	f004 f8df 	bl	d9064 <_Z21__fetch_global_EEPROMv>
   d4ea6:	4621      	mov	r1, r4
   d4ea8:	20c8      	movs	r0, #200	; 0xc8
   d4eaa:	f7ff f947 	bl	d413c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
      txCharacteristic.setValue("\nCurrent value for WiFi connection interval is [");
   d4eae:	2200      	movs	r2, #0
   d4eb0:	4933      	ldr	r1, [pc, #204]	; (d4f80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x600>)
   d4eb2:	4828      	ldr	r0, [pc, #160]	; (d4f54 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d4>)
   d4eb4:	f002 f937 	bl	d7126 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(wifiInterval != -1){
   d4eb8:	6823      	ldr	r3, [r4, #0]
   d4eba:	1c5a      	adds	r2, r3, #1
   d4ebc:	d00f      	beq.n	d4ede <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x55e>
        txCharacteristic.setValue(String(wifiInterval / 1000));
   d4ebe:	220a      	movs	r2, #10
   d4ec0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4ec4:	a801      	add	r0, sp, #4
   d4ec6:	fb93 f1f1 	sdiv	r1, r3, r1
   d4eca:	f001 fcdf 	bl	d688c <_ZN6StringC1Eih>
   d4ece:	4821      	ldr	r0, [pc, #132]	; (d4f54 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d4>)
   d4ed0:	2200      	movs	r2, #0
   d4ed2:	a901      	add	r1, sp, #4
   d4ed4:	f002 f922 	bl	d711c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   d4ed8:	a801      	add	r0, sp, #4
   d4eda:	f001 fc32 	bl	d6742 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between WiFi connections as an integer in seconds (blank to skip): ");
   d4ede:	4929      	ldr	r1, [pc, #164]	; (d4f84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x604>)
   d4ee0:	2200      	movs	r2, #0
   d4ee2:	e613      	b.n	d4b0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18c>
   d4ee4:	491d      	ldr	r1, [pc, #116]	; (d4f5c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5dc>)
   d4ee6:	4815      	ldr	r0, [pc, #84]	; (d4f3c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5bc>)
   d4ee8:	f001 fd3f 	bl	d696a <_ZNK6String6equalsEPKc>
      if(inputBuffer == ""){
   d4eec:	b128      	cbz	r0, d4efa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x57a>
        EEPROM.get(200, wifiInterval);
   d4eee:	f004 f8b9 	bl	d9064 <_Z21__fetch_global_EEPROMv>
   d4ef2:	4922      	ldr	r1, [pc, #136]	; (d4f7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5fc>)
   d4ef4:	20c8      	movs	r0, #200	; 0xc8
   d4ef6:	f7ff f921 	bl	d413c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
      EEPROM.put(200, wifiInterval);
   d4efa:	f004 f8b3 	bl	d9064 <_Z21__fetch_global_EEPROMv>
   d4efe:	2204      	movs	r2, #4
   d4f00:	491e      	ldr	r1, [pc, #120]	; (d4f7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5fc>)
   d4f02:	20c8      	movs	r0, #200	; 0xc8
   d4f04:	f000 fe8a 	bl	d5c1c <HAL_EEPROM_Put>
      EEPROM.get(200, wifiInterval);
   d4f08:	f004 f8ac 	bl	d9064 <_Z21__fetch_global_EEPROMv>
   d4f0c:	491b      	ldr	r1, [pc, #108]	; (d4f7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5fc>)
   d4f0e:	20c8      	movs	r0, #200	; 0xc8
   d4f10:	f7ff f914 	bl	d413c <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
      wifiTimeLeft = wifiInterval;
   d4f14:	4b1c      	ldr	r3, [pc, #112]	; (d4f88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x608>)
   d4f16:	683a      	ldr	r2, [r7, #0]
   d4f18:	601a      	str	r2, [r3, #0]
      Serial.println(wifiInterval);
   d4f1a:	f003 fb0b 	bl	d8534 <_Z16_fetch_usbserialv>
   d4f1e:	6839      	ldr	r1, [r7, #0]
   d4f20:	220a      	movs	r2, #10
   d4f22:	f7ff fa45 	bl	d43b0 <_ZN5Print7printlnIiLi0EEEjT_i>
      bleInput = true;
   d4f26:	4b19      	ldr	r3, [pc, #100]	; (d4f8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60c>)
   d4f28:	2201      	movs	r2, #1
      digitalWrite(D7, LOW);
   d4f2a:	2100      	movs	r1, #0
   d4f2c:	2007      	movs	r0, #7
      bleInput = true;
   d4f2e:	701a      	strb	r2, [r3, #0]
      digitalWrite(D7, LOW);
   d4f30:	f004 f86b 	bl	d900a <digitalWrite>
      break;
   d4f34:	e5ed      	b.n	d4b12 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x192>
   d4f36:	bf00      	nop
   d4f38:	000da1ba 	.word	0x000da1ba
   d4f3c:	2003e3ec 	.word	0x2003e3ec
   d4f40:	2003e7bc 	.word	0x2003e7bc
   d4f44:	2003e5fc 	.word	0x2003e5fc
   d4f48:	2003def4 	.word	0x2003def4
   d4f4c:	000da1bf 	.word	0x000da1bf
   d4f50:	000da1c7 	.word	0x000da1c7
   d4f54:	2003e608 	.word	0x2003e608
   d4f58:	000da1d1 	.word	0x000da1d1
   d4f5c:	000da185 	.word	0x000da185
   d4f60:	2003dfcc 	.word	0x2003dfcc
   d4f64:	000da1f1 	.word	0x000da1f1
   d4f68:	2003deec 	.word	0x2003deec
   d4f6c:	000da1fe 	.word	0x000da1fe
   d4f70:	000da205 	.word	0x000da205
   d4f74:	000da236 	.word	0x000da236
   d4f78:	2003dfb0 	.word	0x2003dfb0
   d4f7c:	2003def0 	.word	0x2003def0
   d4f80:	000da28b 	.word	0x000da28b
   d4f84:	000da2bc 	.word	0x000da2bc
   d4f88:	2003e620 	.word	0x2003e620
   d4f8c:	2003dfac 	.word	0x2003dfac

000d4f90 <_ZN15Adafruit_LIS3DHD0Ev>:
   d4f90:	b510      	push	{r4, lr}
   d4f92:	212c      	movs	r1, #44	; 0x2c
   d4f94:	4604      	mov	r4, r0
   d4f96:	f004 f8c0 	bl	d911a <_ZdlPvj>
   d4f9a:	4620      	mov	r0, r4
   d4f9c:	bd10      	pop	{r4, pc}
	...

000d4fa0 <_GLOBAL__sub_I_SystemMode>:
   d4fa0:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
   d4fa2:	4d6a      	ldr	r5, [pc, #424]	; (d514c <_GLOBAL__sub_I_SystemMode+0x1ac>)
    SleepResult() {}
   d4fa4:	4b6a      	ldr	r3, [pc, #424]	; (d5150 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4fa6:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4fa8:	2400      	movs	r4, #0
   d4faa:	b090      	sub	sp, #64	; 0x40
   d4fac:	602c      	str	r4, [r5, #0]
   d4fae:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d4fb0:	71ac      	strb	r4, [r5, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4fb2:	2003      	movs	r0, #3
   d4fb4:	f001 f886 	bl	d60c4 <set_system_mode>
SYSTEM_MODE(MANUAL)
   d4fb8:	4a66      	ldr	r2, [pc, #408]	; (d5154 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4fba:	4967      	ldr	r1, [pc, #412]	; (d5158 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   d4fbc:	4628      	mov	r0, r5
   d4fbe:	f004 f8a7 	bl	d9110 <__aeabi_atexit>
String payload = "";
   d4fc2:	4966      	ldr	r1, [pc, #408]	; (d515c <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d4fc4:	4866      	ldr	r0, [pc, #408]	; (d5160 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   d4fc6:	4d67      	ldr	r5, [pc, #412]	; (d5164 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   d4fc8:	f001 fc06 	bl	d67d8 <_ZN6StringC1EPKc>
   d4fcc:	4a61      	ldr	r2, [pc, #388]	; (d5154 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4fce:	4966      	ldr	r1, [pc, #408]	; (d5168 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d4fd0:	4863      	ldr	r0, [pc, #396]	; (d5160 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   d4fd2:	f004 f89d 	bl	d9110 <__aeabi_atexit>
String unixTime;
   d4fd6:	4961      	ldr	r1, [pc, #388]	; (d515c <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d4fd8:	4864      	ldr	r0, [pc, #400]	; (d516c <_GLOBAL__sub_I_SystemMode+0x1cc>)
   d4fda:	f001 fbfd 	bl	d67d8 <_ZN6StringC1EPKc>
   d4fde:	4a5d      	ldr	r2, [pc, #372]	; (d5154 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4fe0:	4961      	ldr	r1, [pc, #388]	; (d5168 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d4fe2:	4862      	ldr	r0, [pc, #392]	; (d516c <_GLOBAL__sub_I_SystemMode+0x1cc>)
   d4fe4:	f004 f894 	bl	d9110 <__aeabi_atexit>
String ssid, password = "";
   d4fe8:	495c      	ldr	r1, [pc, #368]	; (d515c <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d4fea:	4861      	ldr	r0, [pc, #388]	; (d5170 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4fec:	f001 fbf4 	bl	d67d8 <_ZN6StringC1EPKc>
   d4ff0:	4a58      	ldr	r2, [pc, #352]	; (d5154 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4ff2:	495d      	ldr	r1, [pc, #372]	; (d5168 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d4ff4:	485e      	ldr	r0, [pc, #376]	; (d5170 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4ff6:	f004 f88b 	bl	d9110 <__aeabi_atexit>
   d4ffa:	4958      	ldr	r1, [pc, #352]	; (d515c <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d4ffc:	485d      	ldr	r0, [pc, #372]	; (d5174 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d4ffe:	f001 fbeb 	bl	d67d8 <_ZN6StringC1EPKc>
   d5002:	4a54      	ldr	r2, [pc, #336]	; (d5154 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d5004:	4958      	ldr	r1, [pc, #352]	; (d5168 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d5006:	485b      	ldr	r0, [pc, #364]	; (d5174 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d5008:	f004 f882 	bl	d9110 <__aeabi_atexit>
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d500c:	485a      	ldr	r0, [pc, #360]	; (d5178 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d500e:	f000 f90f 	bl	d5230 <_ZN15Adafruit_LIS3DHC1Ev>
   d5012:	4a50      	ldr	r2, [pc, #320]	; (d5154 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d5014:	4959      	ldr	r1, [pc, #356]	; (d517c <_GLOBAL__sub_I_SystemMode+0x1dc>)
   d5016:	4858      	ldr	r0, [pc, #352]	; (d5178 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d5018:	f004 f87a 	bl	d9110 <__aeabi_atexit>
        : config_(config) {
   d501c:	4858      	ldr	r0, [pc, #352]	; (d5180 <_GLOBAL__sub_I_SystemMode+0x1e0>)
SystemSleepConfiguration config;
   d501e:	4959      	ldr	r1, [pc, #356]	; (d5184 <_GLOBAL__sub_I_SystemMode+0x1e4>)
              valid_(true) {
   d5020:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d5024:	4603      	mov	r3, r0
   d5026:	1d02      	adds	r2, r0, #4
   d5028:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d502c:	709c      	strb	r4, [r3, #2]
   d502e:	2301      	movs	r3, #1
   d5030:	7503      	strb	r3, [r0, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d5032:	4b55      	ldr	r3, [pc, #340]	; (d5188 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   d5034:	6043      	str	r3, [r0, #4]
   d5036:	4a47      	ldr	r2, [pc, #284]	; (d5154 <_GLOBAL__sub_I_SystemMode+0x1b4>)
        config_.mode = HAL_SLEEP_MODE_NONE;
   d5038:	7204      	strb	r4, [r0, #8]
        config_.wakeup_sources = nullptr;
   d503a:	e9c0 4403 	strd	r4, r4, [r0, #12]
   d503e:	f004 f867 	bl	d9110 <__aeabi_atexit>
HttpClient http;
   d5042:	4852      	ldr	r0, [pc, #328]	; (d518c <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d5044:	f000 fb43 	bl	d56ce <_ZN10HttpClientC1Ev>
   d5048:	4a42      	ldr	r2, [pc, #264]	; (d5154 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d504a:	4951      	ldr	r1, [pc, #324]	; (d5190 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d504c:	484f      	ldr	r0, [pc, #316]	; (d518c <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d504e:	f004 f85f 	bl	d9110 <__aeabi_atexit>
} http_request_t;
   d5052:	4942      	ldr	r1, [pc, #264]	; (d515c <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d5054:	484f      	ldr	r0, [pc, #316]	; (d5194 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d5056:	f001 fbbf 	bl	d67d8 <_ZN6StringC1EPKc>
   d505a:	484f      	ldr	r0, [pc, #316]	; (d5198 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d505c:	f003 f9ba 	bl	d83d4 <_ZN9IPAddressC1Ev>
   d5060:	493e      	ldr	r1, [pc, #248]	; (d515c <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d5062:	484e      	ldr	r0, [pc, #312]	; (d519c <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d5064:	f001 fbb8 	bl	d67d8 <_ZN6StringC1EPKc>
   d5068:	493c      	ldr	r1, [pc, #240]	; (d515c <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d506a:	484d      	ldr	r0, [pc, #308]	; (d51a0 <_GLOBAL__sub_I_SystemMode+0x200>)
   d506c:	f001 fbb4 	bl	d67d8 <_ZN6StringC1EPKc>
http_request_t request;
   d5070:	4a38      	ldr	r2, [pc, #224]	; (d5154 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d5072:	494c      	ldr	r1, [pc, #304]	; (d51a4 <_GLOBAL__sub_I_SystemMode+0x204>)
   d5074:	4847      	ldr	r0, [pc, #284]	; (d5194 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d5076:	f004 f84b 	bl	d9110 <__aeabi_atexit>
} http_response_t;
   d507a:	4938      	ldr	r1, [pc, #224]	; (d515c <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d507c:	484a      	ldr	r0, [pc, #296]	; (d51a8 <_GLOBAL__sub_I_SystemMode+0x208>)
   d507e:	f001 fbab 	bl	d67d8 <_ZN6StringC1EPKc>
http_response_t response;
   d5082:	4a34      	ldr	r2, [pc, #208]	; (d5154 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d5084:	4949      	ldr	r1, [pc, #292]	; (d51ac <_GLOBAL__sub_I_SystemMode+0x20c>)
   d5086:	484a      	ldr	r0, [pc, #296]	; (d51b0 <_GLOBAL__sub_I_SystemMode+0x210>)
   d5088:	f004 f842 	bl	d9110 <__aeabi_atexit>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d508c:	4949      	ldr	r1, [pc, #292]	; (d51b4 <_GLOBAL__sub_I_SystemMode+0x214>)
   d508e:	484a      	ldr	r0, [pc, #296]	; (d51b8 <_GLOBAL__sub_I_SystemMode+0x218>)
   d5090:	f001 ff66 	bl	d6f60 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d5094:	4949      	ldr	r1, [pc, #292]	; (d51bc <_GLOBAL__sub_I_SystemMode+0x21c>)
   d5096:	484a      	ldr	r0, [pc, #296]	; (d51c0 <_GLOBAL__sub_I_SystemMode+0x220>)
   d5098:	f001 ff62 	bl	d6f60 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d509c:	4949      	ldr	r1, [pc, #292]	; (d51c4 <_GLOBAL__sub_I_SystemMode+0x224>)
   d509e:	484a      	ldr	r0, [pc, #296]	; (d51c8 <_GLOBAL__sub_I_SystemMode+0x228>)
   d50a0:	f001 ff5e 	bl	d6f60 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   d50a4:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d50a6:	4948      	ldr	r1, [pc, #288]	; (d51c8 <_GLOBAL__sub_I_SystemMode+0x228>)
   d50a8:	f88d 3014 	strb.w	r3, [sp, #20]
   d50ac:	a806      	add	r0, sp, #24
   d50ae:	f001 fe71 	bl	d6d94 <_ZN8particle7BleUuidC1ERKS0_>
   d50b2:	4941      	ldr	r1, [pc, #260]	; (d51b8 <_GLOBAL__sub_I_SystemMode+0x218>)
   d50b4:	a80b      	add	r0, sp, #44	; 0x2c
   d50b6:	f001 fe6d 	bl	d6d94 <_ZN8particle7BleUuidC1ERKS0_>
   d50ba:	ab0b      	add	r3, sp, #44	; 0x2c
   d50bc:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d50c0:	4942      	ldr	r1, [pc, #264]	; (d51cc <_GLOBAL__sub_I_SystemMode+0x22c>)
   d50c2:	9300      	str	r3, [sp, #0]
   d50c4:	aa05      	add	r2, sp, #20
   d50c6:	ab06      	add	r3, sp, #24
   d50c8:	4841      	ldr	r0, [pc, #260]	; (d51d0 <_GLOBAL__sub_I_SystemMode+0x230>)
   d50ca:	f7ff f94f 	bl	d436c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d50ce:	4a21      	ldr	r2, [pc, #132]	; (d5154 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d50d0:	4940      	ldr	r1, [pc, #256]	; (d51d4 <_GLOBAL__sub_I_SystemMode+0x234>)
   d50d2:	483f      	ldr	r0, [pc, #252]	; (d51d0 <_GLOBAL__sub_I_SystemMode+0x230>)
   d50d4:	f004 f81c 	bl	d9110 <__aeabi_atexit>
   d50d8:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d50da:	4939      	ldr	r1, [pc, #228]	; (d51c0 <_GLOBAL__sub_I_SystemMode+0x220>)
   d50dc:	f88d 3014 	strb.w	r3, [sp, #20]
   d50e0:	a806      	add	r0, sp, #24
   d50e2:	f001 fe57 	bl	d6d94 <_ZN8particle7BleUuidC1ERKS0_>
   d50e6:	4934      	ldr	r1, [pc, #208]	; (d51b8 <_GLOBAL__sub_I_SystemMode+0x218>)
   d50e8:	a80b      	add	r0, sp, #44	; 0x2c
   d50ea:	f001 fe53 	bl	d6d94 <_ZN8particle7BleUuidC1ERKS0_>
   d50ee:	4b3a      	ldr	r3, [pc, #232]	; (d51d8 <_GLOBAL__sub_I_SystemMode+0x238>)
   d50f0:	9301      	str	r3, [sp, #4]
   d50f2:	ab0b      	add	r3, sp, #44	; 0x2c
   d50f4:	4939      	ldr	r1, [pc, #228]	; (d51dc <_GLOBAL__sub_I_SystemMode+0x23c>)
   d50f6:	9402      	str	r4, [sp, #8]
   d50f8:	9300      	str	r3, [sp, #0]
   d50fa:	aa05      	add	r2, sp, #20
   d50fc:	ab06      	add	r3, sp, #24
   d50fe:	4838      	ldr	r0, [pc, #224]	; (d51e0 <_GLOBAL__sub_I_SystemMode+0x240>)
   d5100:	f7ff f934 	bl	d436c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d5104:	4a13      	ldr	r2, [pc, #76]	; (d5154 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d5106:	4933      	ldr	r1, [pc, #204]	; (d51d4 <_GLOBAL__sub_I_SystemMode+0x234>)
   d5108:	4835      	ldr	r0, [pc, #212]	; (d51e0 <_GLOBAL__sub_I_SystemMode+0x240>)
   d510a:	f004 f801 	bl	d9110 <__aeabi_atexit>
String inputBuffer;
   d510e:	4913      	ldr	r1, [pc, #76]	; (d515c <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d5110:	4834      	ldr	r0, [pc, #208]	; (d51e4 <_GLOBAL__sub_I_SystemMode+0x244>)
   d5112:	f001 fb61 	bl	d67d8 <_ZN6StringC1EPKc>
   d5116:	4a0f      	ldr	r2, [pc, #60]	; (d5154 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d5118:	4913      	ldr	r1, [pc, #76]	; (d5168 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d511a:	4832      	ldr	r0, [pc, #200]	; (d51e4 <_GLOBAL__sub_I_SystemMode+0x244>)
   d511c:	f003 fff8 	bl	d9110 <__aeabi_atexit>
   d5120:	2405      	movs	r4, #5
#ifdef __cplusplus

   WiFiAccessPoint()
   {
       memset(this, 0, sizeof(*this));
       size = sizeof(*this);
   d5122:	2638      	movs	r6, #56	; 0x38
       memset(this, 0, sizeof(*this));
   d5124:	1d28      	adds	r0, r5, #4
   d5126:	2234      	movs	r2, #52	; 0x34
   d5128:	2100      	movs	r1, #0
   d512a:	f004 fe71 	bl	d9e10 <memset>
WiFiAccessPoint networks[5];
   d512e:	3c01      	subs	r4, #1
       size = sizeof(*this);
   d5130:	f845 6b38 	str.w	r6, [r5], #56
   d5134:	d1f6      	bne.n	d5124 <_GLOBAL__sub_I_SystemMode+0x184>
String networkBuffer;
   d5136:	4909      	ldr	r1, [pc, #36]	; (d515c <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d5138:	482b      	ldr	r0, [pc, #172]	; (d51e8 <_GLOBAL__sub_I_SystemMode+0x248>)
   d513a:	f001 fb4d 	bl	d67d8 <_ZN6StringC1EPKc>
   d513e:	4a05      	ldr	r2, [pc, #20]	; (d5154 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d5140:	4909      	ldr	r1, [pc, #36]	; (d5168 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d5142:	4829      	ldr	r0, [pc, #164]	; (d51e8 <_GLOBAL__sub_I_SystemMode+0x248>)
   d5144:	f003 ffe4 	bl	d9110 <__aeabi_atexit>
   d5148:	b010      	add	sp, #64	; 0x40
   d514a:	bd70      	pop	{r4, r5, r6, pc}
   d514c:	2003df64 	.word	0x2003df64
   d5150:	ffff0000 	.word	0xffff0000
   d5154:	2003df60 	.word	0x2003df60
   d5158:	000d4181 	.word	0x000d4181
   d515c:	000da185 	.word	0x000da185
   d5160:	2003e568 	.word	0x2003e568
   d5164:	2003e440 	.word	0x2003e440
   d5168:	000d6743 	.word	0x000d6743
   d516c:	2003e610 	.word	0x2003e610
   d5170:	2003e5e0 	.word	0x2003e5e0
   d5174:	2003e558 	.word	0x2003e558
   d5178:	2003e400 	.word	0x2003e400
   d517c:	000d40b3 	.word	0x000d40b3
   d5180:	2003dfb0 	.word	0x2003dfb0
   d5184:	000d4125 	.word	0x000d4125
   d5188:	00030010 	.word	0x00030010
   d518c:	2003dfd0 	.word	0x2003dfd0
   d5190:	000d414d 	.word	0x000d414d
   d5194:	2003e578 	.word	0x2003e578
   d5198:	2003e588 	.word	0x2003e588
   d519c:	2003e5a0 	.word	0x2003e5a0
   d51a0:	2003e5b4 	.word	0x2003e5b4
   d51a4:	000d40c3 	.word	0x000d40c3
   d51a8:	2003e5c8 	.word	0x2003e5c8
   d51ac:	000d40b5 	.word	0x000d40b5
   d51b0:	2003e5c4 	.word	0x2003e5c4
   d51b4:	000da30d 	.word	0x000da30d
   d51b8:	2003df70 	.word	0x2003df70
   d51bc:	000da332 	.word	0x000da332
   d51c0:	2003df84 	.word	0x2003df84
   d51c4:	000da357 	.word	0x000da357
   d51c8:	2003df98 	.word	0x2003df98
   d51cc:	000da37c 	.word	0x000da37c
   d51d0:	2003e608 	.word	0x2003e608
   d51d4:	000d7473 	.word	0x000d7473
   d51d8:	000d4981 	.word	0x000d4981
   d51dc:	000da37f 	.word	0x000da37f
   d51e0:	2003e5d8 	.word	0x2003e5d8
   d51e4:	2003e3ec 	.word	0x2003e3ec
   d51e8:	2003e42c 	.word	0x2003e42c

000d51ec <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d51ec:	4770      	bx	lr
	...

000d51f0 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d51f0:	460b      	mov	r3, r1
   d51f2:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d51f4:	2228      	movs	r2, #40	; 0x28
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d51f6:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d51f8:	2100      	movs	r1, #0
   d51fa:	4618      	mov	r0, r3
   d51fc:	f004 fe08 	bl	d9e10 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d5200:	4908      	ldr	r1, [pc, #32]	; (d5224 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
   d5202:	220b      	movs	r2, #11
   d5204:	f004 fe4a 	bl	d9e9c <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d5208:	2200      	movs	r2, #0
  sensor->version     = 1;
   d520a:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d520c:	72c2      	strb	r2, [r0, #11]
  sensor->version     = 1;
   d520e:	60c1      	str	r1, [r0, #12]
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d5210:	4603      	mov	r3, r0
  sensor->sensor_id   = _sensorID;
   d5212:	69a0      	ldr	r0, [r4, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
   d5214:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   d5216:	e9c3 0104 	strd	r0, r1, [r3, #16]
  sensor->max_value   = 0;
   d521a:	2200      	movs	r2, #0
   d521c:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0;
   d521e:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0;
   d5220:	621a      	str	r2, [r3, #32]
}
   d5222:	bd10      	pop	{r4, pc}
   d5224:	000da3cd 	.word	0x000da3cd

000d5228 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5228:	6803      	ldr	r3, [r0, #0]
   d522a:	b2c9      	uxtb	r1, r1
   d522c:	689b      	ldr	r3, [r3, #8]
   d522e:	4718      	bx	r3

000d5230 <_ZN15Adafruit_LIS3DHC1Ev>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   d5230:	4a06      	ldr	r2, [pc, #24]	; (d524c <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   d5232:	6002      	str	r2, [r0, #0]
   d5234:	f04f 32ff 	mov.w	r2, #4294967295
   d5238:	6182      	str	r2, [r0, #24]
   d523a:	7742      	strb	r2, [r0, #29]
   d523c:	83c2      	strh	r2, [r0, #30]
   d523e:	22ff      	movs	r2, #255	; 0xff
   d5240:	f880 2020 	strb.w	r2, [r0, #32]
   d5244:	2208      	movs	r2, #8
   d5246:	6242      	str	r2, [r0, #36]	; 0x24
}
   d5248:	4770      	bx	lr
   d524a:	bf00      	nop
   d524c:	000da3dc 	.word	0x000da3dc

000d5250 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d5250:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d5252:	4c0b      	ldr	r4, [pc, #44]	; (d5280 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d5254:	7821      	ldrb	r1, [r4, #0]
   d5256:	f3bf 8f5b 	dmb	ish
   d525a:	f011 0101 	ands.w	r1, r1, #1
   d525e:	d10b      	bne.n	d5278 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d5260:	4620      	mov	r0, r4
   d5262:	9101      	str	r1, [sp, #4]
   d5264:	f7fe ff1d 	bl	d40a2 <__cxa_guard_acquire>
   d5268:	9901      	ldr	r1, [sp, #4]
   d526a:	b128      	cbz	r0, d5278 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d526c:	4805      	ldr	r0, [pc, #20]	; (d5284 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d526e:	f001 f87b 	bl	d6368 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5272:	4620      	mov	r0, r4
   d5274:	f7fe ff1a 	bl	d40ac <__cxa_guard_release>
        return instance;
    }
   d5278:	4802      	ldr	r0, [pc, #8]	; (d5284 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d527a:	b002      	add	sp, #8
   d527c:	bd10      	pop	{r4, pc}
   d527e:	bf00      	nop
   d5280:	2003e630 	.word	0x2003e630
   d5284:	2003e634 	.word	0x2003e634

000d5288 <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d5288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
   d528c:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d5290:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d5292:	4605      	mov	r5, r0
   d5294:	460f      	mov	r7, r1
  if (_sck == -1)
   d5296:	d106      	bne.n	d52a6 <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5298:	f7ff ffda 	bl	d5250 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d529c:	4639      	mov	r1, r7
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
   d529e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d52a2:	f001 b8eb 	b.w	d647c <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   d52a6:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   d52a8:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   d52aa:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   d52ae:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d52b2:	2100      	movs	r1, #0
   d52b4:	b280      	uxth	r0, r0
   d52b6:	f003 fea8 	bl	d900a <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   d52ba:	f995 001e 	ldrsb.w	r0, [r5, #30]
   d52be:	fa08 f106 	lsl.w	r1, r8, r6
   d52c2:	4039      	ands	r1, r7
   d52c4:	b280      	uxth	r0, r0
   d52c6:	f003 fea0 	bl	d900a <digitalWrite>
    digitalWrite(_sck, HIGH);
   d52ca:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d52ce:	2101      	movs	r1, #1
   d52d0:	b280      	uxth	r0, r0
   d52d2:	f003 fe9a 	bl	d900a <digitalWrite>
    if (digitalRead(_miso))
   d52d6:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
   d52da:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   d52dc:	b280      	uxth	r0, r0
    reply <<= 1;
   d52de:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   d52e0:	f003 feac 	bl	d903c <digitalRead>
   d52e4:	b108      	cbz	r0, d52ea <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   d52e6:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   d52ea:	3e01      	subs	r6, #1
   d52ec:	d2df      	bcs.n	d52ae <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
   d52ee:	4620      	mov	r0, r4
   d52f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d52f4 <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   d52f4:	b508      	push	{r3, lr}
        instance().setBitOrder(order);
   d52f6:	f7ff ffab 	bl	d5250 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d52fa:	2101      	movs	r1, #1
   d52fc:	f001 f84f 	bl	d639e <_ZN8SPIClass11setBitOrderEh>
        return instance().setClockSpeed(value, scale);
   d5300:	f7ff ffa6 	bl	d5250 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5304:	4905      	ldr	r1, [pc, #20]	; (d531c <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   d5306:	2201      	movs	r2, #1
   d5308:	f001 f886 	bl	d6418 <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
   d530c:	f7ff ffa0 	bl	d5250 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   d5310:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d5314:	2100      	movs	r1, #0
   d5316:	f001 b855 	b.w	d63c4 <_ZN8SPIClass11setDataModeEh>
   d531a:	bf00      	nop
   d531c:	0007a120 	.word	0x0007a120

000d5320 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d5320:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   d5322:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d5326:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d5328:	4604      	mov	r4, r0
   d532a:	460e      	mov	r6, r1
   d532c:	4615      	mov	r5, r2
  if (_cs == -1) {
   d532e:	d116      	bne.n	d535e <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   d5330:	f003 fec6 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d5334:	7f21      	ldrb	r1, [r4, #28]
   d5336:	f003 fa19 	bl	d876c <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d533a:	f003 fec1 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d533e:	6803      	ldr	r3, [r0, #0]
   d5340:	4631      	mov	r1, r6
   d5342:	689b      	ldr	r3, [r3, #8]
   d5344:	4798      	blx	r3
    Wire.write((uint8_t)value);
   d5346:	f003 febb 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d534a:	6803      	ldr	r3, [r0, #0]
   d534c:	4629      	mov	r1, r5
   d534e:	689b      	ldr	r3, [r3, #8]
   d5350:	4798      	blx	r3
    Wire.endTransmission();
   d5352:	f003 feb5 	bl	d90c0 <_Z19__fetch_global_Wirev>
}
   d5356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   d535a:	f003 ba12 	b.w	d8782 <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
   d535e:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d5362:	3301      	adds	r3, #1
   d5364:	d101      	bne.n	d536a <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   d5366:	f7ff ffc5 	bl	d52f4 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d536a:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d536e:	2100      	movs	r1, #0
   d5370:	b280      	uxth	r0, r0
   d5372:	f003 fe4a 	bl	d900a <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   d5376:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d537a:	4620      	mov	r0, r4
   d537c:	f7ff ff84 	bl	d5288 <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   d5380:	4629      	mov	r1, r5
   d5382:	4620      	mov	r0, r4
   d5384:	f7ff ff80 	bl	d5288 <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   d5388:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d538c:	2101      	movs	r1, #1
}
   d538e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   d5392:	b280      	uxth	r0, r0
   d5394:	f003 be39 	b.w	d900a <digitalWrite>

000d5398 <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d5398:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d539a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d539e:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d53a0:	4604      	mov	r4, r0
   d53a2:	460d      	mov	r5, r1
  if (_cs == -1) {
   d53a4:	d11d      	bne.n	d53e2 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   d53a6:	f003 fe8b 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d53aa:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d53ae:	f003 f9e1 	bl	d8774 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   d53b2:	f003 fe85 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d53b6:	6803      	ldr	r3, [r0, #0]
   d53b8:	4629      	mov	r1, r5
   d53ba:	689b      	ldr	r3, [r3, #8]
   d53bc:	4798      	blx	r3
    Wire.endTransmission();
   d53be:	f003 fe7f 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d53c2:	f003 f9de 	bl	d8782 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
   d53c6:	f003 fe7b 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d53ca:	7f21      	ldrb	r1, [r4, #28]
   d53cc:	2201      	movs	r2, #1
   d53ce:	f003 f9ca 	bl	d8766 <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   d53d2:	f003 fe75 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d53d6:	6803      	ldr	r3, [r0, #0]
   d53d8:	695b      	ldr	r3, [r3, #20]
   d53da:	4798      	blx	r3
   d53dc:	b2c5      	uxtb	r5, r0
}
   d53de:	4628      	mov	r0, r5
   d53e0:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
   d53e2:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d53e6:	3301      	adds	r3, #1
   d53e8:	d101      	bne.n	d53ee <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   d53ea:	f7ff ff83 	bl	d52f4 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
   d53ee:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d53f2:	2100      	movs	r1, #0
   d53f4:	b280      	uxth	r0, r0
   d53f6:	f003 fe08 	bl	d900a <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   d53fa:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d53fe:	4620      	mov	r0, r4
   d5400:	f7ff ff42 	bl	d5288 <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   d5404:	2100      	movs	r1, #0
   d5406:	4620      	mov	r0, r4
   d5408:	f7ff ff3e 	bl	d5288 <_ZN15Adafruit_LIS3DH7spixferEh>
   d540c:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   d540e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5412:	2101      	movs	r1, #1
   d5414:	b280      	uxth	r0, r0
   d5416:	f003 fdf8 	bl	d900a <digitalWrite>
    if (_sck == -1)
   d541a:	e7e0      	b.n	d53de <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

000d541c <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>:
{
   d541c:	b538      	push	{r3, r4, r5, lr}
   d541e:	460d      	mov	r5, r1
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d5420:	2123      	movs	r1, #35	; 0x23
{
   d5422:	4604      	mov	r4, r0
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d5424:	f7ff ffb8 	bl	d5398 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  r &= ~(0x30);
   d5428:	f020 0230 	bic.w	r2, r0, #48	; 0x30
  r |= range << 4;
   d542c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d5430:	4620      	mov	r0, r4
   d5432:	b2d2      	uxtb	r2, r2
}
   d5434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d5438:	2123      	movs	r1, #35	; 0x23
   d543a:	f7ff bf71 	b.w	d5320 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d543e <_ZN15Adafruit_LIS3DH8getRangeEv>:
{
   d543e:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   d5440:	2123      	movs	r1, #35	; 0x23
   d5442:	f7ff ffa9 	bl	d5398 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   d5446:	f3c0 1001 	ubfx	r0, r0, #4, #2
   d544a:	bd08      	pop	{r3, pc}

000d544c <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
   d544c:	b538      	push	{r3, r4, r5, lr}
   d544e:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d5450:	2120      	movs	r1, #32
{
   d5452:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d5454:	f7ff ffa0 	bl	d5398 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
   d5458:	f000 020f 	and.w	r2, r0, #15
  ctl1 |= (dataRate << 4);
   d545c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d5460:	4620      	mov	r0, r4
   d5462:	b2d2      	uxtb	r2, r2
}
   d5464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d5468:	2120      	movs	r1, #32
   d546a:	f7ff bf59 	b.w	d5320 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d546e <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   d546e:	b510      	push	{r4, lr}
   d5470:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   d5472:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
   d5474:	f990 001d 	ldrsb.w	r0, [r0, #29]
   d5478:	1c42      	adds	r2, r0, #1
   d547a:	d123      	bne.n	d54c4 <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
   d547c:	f003 fe20 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d5480:	f003 f93e 	bl	d8700 <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   d5484:	210f      	movs	r1, #15
   d5486:	4620      	mov	r0, r4
   d5488:	f7ff ff86 	bl	d5398 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   d548c:	2833      	cmp	r0, #51	; 0x33
   d548e:	d13d      	bne.n	d550c <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   d5490:	2207      	movs	r2, #7
   d5492:	2120      	movs	r1, #32
   d5494:	4620      	mov	r0, r4
   d5496:	f7ff ff43 	bl	d5320 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
   d549a:	2107      	movs	r1, #7
   d549c:	4620      	mov	r0, r4
   d549e:	f7ff ffd5 	bl	d544c <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   d54a2:	2288      	movs	r2, #136	; 0x88
   d54a4:	2123      	movs	r1, #35	; 0x23
   d54a6:	4620      	mov	r0, r4
   d54a8:	f7ff ff3a 	bl	d5320 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   d54ac:	2210      	movs	r2, #16
   d54ae:	2122      	movs	r1, #34	; 0x22
   d54b0:	4620      	mov	r0, r4
   d54b2:	f7ff ff35 	bl	d5320 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   d54b6:	4620      	mov	r0, r4
   d54b8:	2280      	movs	r2, #128	; 0x80
   d54ba:	211f      	movs	r1, #31
   d54bc:	f7ff ff30 	bl	d5320 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
   d54c0:	2001      	movs	r0, #1
}
   d54c2:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   d54c4:	2101      	movs	r1, #1
   d54c6:	b280      	uxth	r0, r0
   d54c8:	f003 fd9f 	bl	d900a <digitalWrite>
    pinMode(_cs, OUTPUT);
   d54cc:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d54d0:	2101      	movs	r1, #1
   d54d2:	b280      	uxth	r0, r0
   d54d4:	f003 fd88 	bl	d8fe8 <pinMode>
    if (_sck == -1) {
   d54d8:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d54dc:	1c43      	adds	r3, r0, #1
   d54de:	d104      	bne.n	d54ea <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
   d54e0:	f7ff feb6 	bl	d5250 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d54e4:	f000 ff4a 	bl	d637c <_ZN8SPIClass5beginEv>
    }
   d54e8:	e7cc      	b.n	d5484 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
   d54ea:	2101      	movs	r1, #1
   d54ec:	b280      	uxth	r0, r0
   d54ee:	f003 fd7b 	bl	d8fe8 <pinMode>
      pinMode(_mosi, OUTPUT);
   d54f2:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d54f6:	2101      	movs	r1, #1
   d54f8:	b280      	uxth	r0, r0
   d54fa:	f003 fd75 	bl	d8fe8 <pinMode>
      pinMode(_miso, INPUT);
   d54fe:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d5502:	2100      	movs	r1, #0
   d5504:	b280      	uxth	r0, r0
   d5506:	f003 fd6f 	bl	d8fe8 <pinMode>
   d550a:	e7bb      	b.n	d5484 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
   d550c:	2000      	movs	r0, #0
   d550e:	e7d8      	b.n	d54c2 <_ZN15Adafruit_LIS3DH5beginEh+0x54>

000d5510 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
   d5510:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d5512:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d5516:	3301      	adds	r3, #1
void Adafruit_LIS3DH::read(void) {
   d5518:	4604      	mov	r4, r0
  if (_cs == -1) {
   d551a:	d176      	bne.n	d560a <_ZN15Adafruit_LIS3DH4readEv+0xfa>
    Wire.beginTransmission(_i2caddr);
   d551c:	f003 fdd0 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d5520:	f994 101c 	ldrsb.w	r1, [r4, #28]
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d5524:	4d5c      	ldr	r5, [pc, #368]	; (d5698 <_ZN15Adafruit_LIS3DH4readEv+0x188>)
    Wire.beginTransmission(_i2caddr);
   d5526:	f003 f925 	bl	d8774 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   d552a:	f003 fdc9 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d552e:	21a8      	movs	r1, #168	; 0xa8
   d5530:	f7ff fe7a 	bl	d5228 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d5534:	f003 fdc4 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d5538:	f003 f923 	bl	d8782 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
   d553c:	f003 fdc0 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d5540:	7f21      	ldrb	r1, [r4, #28]
   d5542:	2206      	movs	r2, #6
   d5544:	f003 f90f 	bl	d8766 <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d5548:	f003 fdba 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d554c:	6803      	ldr	r3, [r0, #0]
   d554e:	695b      	ldr	r3, [r3, #20]
   d5550:	4798      	blx	r3
   d5552:	80e0      	strh	r0, [r4, #6]
   d5554:	f003 fdb4 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d5558:	6803      	ldr	r3, [r0, #0]
   d555a:	695b      	ldr	r3, [r3, #20]
   d555c:	4798      	blx	r3
   d555e:	88e3      	ldrh	r3, [r4, #6]
   d5560:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d5564:	4318      	orrs	r0, r3
   d5566:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   d5568:	f003 fdaa 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d556c:	6803      	ldr	r3, [r0, #0]
   d556e:	695b      	ldr	r3, [r3, #20]
   d5570:	4798      	blx	r3
   d5572:	8120      	strh	r0, [r4, #8]
   d5574:	f003 fda4 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d5578:	6803      	ldr	r3, [r0, #0]
   d557a:	695b      	ldr	r3, [r3, #20]
   d557c:	4798      	blx	r3
   d557e:	8923      	ldrh	r3, [r4, #8]
   d5580:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d5584:	4318      	orrs	r0, r3
   d5586:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   d5588:	f003 fd9a 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d558c:	6803      	ldr	r3, [r0, #0]
   d558e:	695b      	ldr	r3, [r3, #20]
   d5590:	4798      	blx	r3
   d5592:	8160      	strh	r0, [r4, #10]
   d5594:	f003 fd94 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d5598:	6803      	ldr	r3, [r0, #0]
   d559a:	695b      	ldr	r3, [r3, #20]
   d559c:	4798      	blx	r3
   d559e:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d55a2:	8965      	ldrh	r5, [r4, #10]
   d55a4:	4328      	orrs	r0, r5
   d55a6:	8160      	strh	r0, [r4, #10]
  uint8_t range = getRange();
   d55a8:	4620      	mov	r0, r4
   d55aa:	f7ff ff48 	bl	d543e <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d55ae:	2803      	cmp	r0, #3
   d55b0:	d069      	beq.n	d5686 <_ZN15Adafruit_LIS3DH4readEv+0x176>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d55b2:	2802      	cmp	r0, #2
   d55b4:	d06a      	beq.n	d568c <_ZN15Adafruit_LIS3DH4readEv+0x17c>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d55b6:	2801      	cmp	r0, #1
   d55b8:	d06b      	beq.n	d5692 <_ZN15Adafruit_LIS3DH4readEv+0x182>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   d55ba:	2800      	cmp	r0, #0
   d55bc:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   d55c0:	bf18      	it	ne
   d55c2:	2301      	movne	r3, #1
  x_g = (float)x / divider;
   d55c4:	ee07 3a90 	vmov	s15, r3
   d55c8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d55cc:	ee07 3a10 	vmov	s14, r3
   d55d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d55d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d55d8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  x_g = (float)x / divider;
   d55dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   d55e0:	ee07 3a10 	vmov	s14, r3
   d55e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_g = (float)x / divider;
   d55e8:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   d55ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   d55f0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d55f4:	ee07 3a10 	vmov	s14, r3
   d55f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d55fc:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   d5600:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d5604:	edc4 6a05 	vstr	s13, [r4, #20]
}
   d5608:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
   d560a:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d560e:	3301      	adds	r3, #1
   d5610:	d101      	bne.n	d5616 <_ZN15Adafruit_LIS3DH4readEv+0x106>
      beginTransaction();
   d5612:	f7ff fe6f 	bl	d52f4 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d5616:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d561a:	2100      	movs	r1, #0
   d561c:	b280      	uxth	r0, r0
   d561e:	f003 fcf4 	bl	d900a <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   d5622:	21e8      	movs	r1, #232	; 0xe8
   d5624:	4620      	mov	r0, r4
   d5626:	f7ff fe2f 	bl	d5288 <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   d562a:	21ff      	movs	r1, #255	; 0xff
   d562c:	4620      	mov	r0, r4
   d562e:	f7ff fe2b 	bl	d5288 <_ZN15Adafruit_LIS3DH7spixferEh>
   d5632:	21ff      	movs	r1, #255	; 0xff
   d5634:	80e0      	strh	r0, [r4, #6]
   d5636:	4620      	mov	r0, r4
   d5638:	f7ff fe26 	bl	d5288 <_ZN15Adafruit_LIS3DH7spixferEh>
   d563c:	88e3      	ldrh	r3, [r4, #6]
   d563e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d5642:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   d5644:	21ff      	movs	r1, #255	; 0xff
   d5646:	4620      	mov	r0, r4
   d5648:	f7ff fe1e 	bl	d5288 <_ZN15Adafruit_LIS3DH7spixferEh>
   d564c:	21ff      	movs	r1, #255	; 0xff
   d564e:	8120      	strh	r0, [r4, #8]
   d5650:	4620      	mov	r0, r4
   d5652:	f7ff fe19 	bl	d5288 <_ZN15Adafruit_LIS3DH7spixferEh>
   d5656:	8923      	ldrh	r3, [r4, #8]
   d5658:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d565c:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   d565e:	21ff      	movs	r1, #255	; 0xff
   d5660:	4620      	mov	r0, r4
   d5662:	f7ff fe11 	bl	d5288 <_ZN15Adafruit_LIS3DH7spixferEh>
   d5666:	21ff      	movs	r1, #255	; 0xff
   d5668:	8160      	strh	r0, [r4, #10]
   d566a:	4620      	mov	r0, r4
   d566c:	f7ff fe0c 	bl	d5288 <_ZN15Adafruit_LIS3DH7spixferEh>
   d5670:	8963      	ldrh	r3, [r4, #10]
   d5672:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d5676:	8160      	strh	r0, [r4, #10]
    digitalWrite(_cs, HIGH);
   d5678:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d567c:	2101      	movs	r1, #1
   d567e:	b280      	uxth	r0, r0
   d5680:	f003 fcc3 	bl	d900a <digitalWrite>
    if (_sck == -1)
   d5684:	e790      	b.n	d55a8 <_ZN15Adafruit_LIS3DH4readEv+0x98>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d5686:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d568a:	e79b      	b.n	d55c4 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d568c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   d5690:	e798      	b.n	d55c4 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d5692:	f641 73fe 	movw	r3, #8190	; 0x1ffe
   d5696:	e795      	b.n	d55c4 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
   d5698:	00ffff00 	.word	0x00ffff00

000d569c <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   d569c:	460c      	mov	r4, r1
   d569e:	4605      	mov	r5, r0
   d56a0:	b508      	push	{r3, lr}
  memset(event, 0, sizeof(sensors_event_t));
   d56a2:	2220      	movs	r2, #32
   d56a4:	2100      	movs	r1, #0
   d56a6:	1d20      	adds	r0, r4, #4
   d56a8:	f004 fbb2 	bl	d9e10 <memset>
  event->version   = sizeof(sensors_event_t);
   d56ac:	2324      	movs	r3, #36	; 0x24
   d56ae:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d56b0:	69ab      	ldr	r3, [r5, #24]
   d56b2:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   d56b4:	2301      	movs	r3, #1
   d56b6:	60a3      	str	r3, [r4, #8]
  event->timestamp = 0;
   d56b8:	2300      	movs	r3, #0
   d56ba:	6123      	str	r3, [r4, #16]
  read();
   d56bc:	4628      	mov	r0, r5
   d56be:	f7ff ff27 	bl	d5510 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
   d56c2:	68eb      	ldr	r3, [r5, #12]
   d56c4:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   d56c6:	692b      	ldr	r3, [r5, #16]
   d56c8:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   d56ca:	696b      	ldr	r3, [r5, #20]
   d56cc:	61e3      	str	r3, [r4, #28]

000d56ce <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   d56ce:	b510      	push	{r4, lr}
   d56d0:	4604      	mov	r4, r0
   d56d2:	f003 faa7 	bl	d8c24 <_ZN9TCPClientC1Ev>
{

}
   d56d6:	4620      	mov	r0, r4
   d56d8:	bd10      	pop	{r4, pc}
	...

000d56dc <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   d56dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   d56de:	4f0f      	ldr	r7, [pc, #60]	; (d571c <_ZN10HttpClient10sendHeaderEPKcS1_+0x40>)
{
   d56e0:	4605      	mov	r5, r0
   d56e2:	4614      	mov	r4, r2
   d56e4:	460e      	mov	r6, r1
    client.print(aHeaderName);
   d56e6:	f002 fc0d 	bl	d7f04 <_ZN5Print5printEPKc>
    client.print(": ");
   d56ea:	4639      	mov	r1, r7
   d56ec:	4628      	mov	r0, r5
   d56ee:	f002 fc09 	bl	d7f04 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d56f2:	4621      	mov	r1, r4
   d56f4:	4628      	mov	r0, r5
   d56f6:	f002 fc1e 	bl	d7f36 <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.print(aHeaderName);
   d56fa:	f002 ff1b 	bl	d8534 <_Z16_fetch_usbserialv>
   d56fe:	4631      	mov	r1, r6
   d5700:	f002 fc00 	bl	d7f04 <_ZN5Print5printEPKc>
    Serial.print(": ");
   d5704:	f002 ff16 	bl	d8534 <_Z16_fetch_usbserialv>
   d5708:	4639      	mov	r1, r7
   d570a:	f002 fbfb 	bl	d7f04 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   d570e:	f002 ff11 	bl	d8534 <_Z16_fetch_usbserialv>
   d5712:	4621      	mov	r1, r4
    #endif
}
   d5714:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(aHeaderValue);
   d5718:	f002 bc0d 	b.w	d7f36 <_ZN5Print7printlnEPKc>
   d571c:	000da136 	.word	0x000da136

000d5720 <_ZN10HttpClient10sendHeaderEPKc>:
    Serial.println(aHeaderValue);
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName)
{
   d5720:	b510      	push	{r4, lr}
   d5722:	460c      	mov	r4, r1
    client.println(aHeaderName);
   d5724:	f002 fc07 	bl	d7f36 <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.println(aHeaderName);
   d5728:	f002 ff04 	bl	d8534 <_Z16_fetch_usbserialv>
   d572c:	4621      	mov	r1, r4
    #endif
}
   d572e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(aHeaderName);
   d5732:	f002 bc00 	b.w	d7f36 <_ZN5Print7printlnEPKc>
	...

000d5738 <_ZN10HttpClient10sendHeaderEPKci>:
{
   d5738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(": ");
   d573a:	4f10      	ldr	r7, [pc, #64]	; (d577c <_ZN10HttpClient10sendHeaderEPKci+0x44>)
{
   d573c:	4605      	mov	r5, r0
   d573e:	4614      	mov	r4, r2
   d5740:	460e      	mov	r6, r1
    client.print(aHeaderName);
   d5742:	f002 fbdf 	bl	d7f04 <_ZN5Print5printEPKc>
    client.print(": ");
   d5746:	4639      	mov	r1, r7
   d5748:	4628      	mov	r0, r5
   d574a:	f002 fbdb 	bl	d7f04 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d574e:	220a      	movs	r2, #10
   d5750:	4621      	mov	r1, r4
   d5752:	4628      	mov	r0, r5
   d5754:	f7fe fe2c 	bl	d43b0 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.print(aHeaderName);
   d5758:	f002 feec 	bl	d8534 <_Z16_fetch_usbserialv>
   d575c:	4631      	mov	r1, r6
   d575e:	f002 fbd1 	bl	d7f04 <_ZN5Print5printEPKc>
    Serial.print(": ");
   d5762:	f002 fee7 	bl	d8534 <_Z16_fetch_usbserialv>
   d5766:	4639      	mov	r1, r7
   d5768:	f002 fbcc 	bl	d7f04 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   d576c:	f002 fee2 	bl	d8534 <_Z16_fetch_usbserialv>
   d5770:	220a      	movs	r2, #10
   d5772:	4621      	mov	r1, r4
   d5774:	f7fe fe1c 	bl	d43b0 <_ZN5Print7printlnIiLi0EEEjT_i>
}
   d5778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d577a:	bf00      	nop
   d577c:	000da136 	.word	0x000da136

000d5780 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d5780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5784:	460e      	mov	r6, r1
   d5786:	b091      	sub	sp, #68	; 0x44
   d5788:	461f      	mov	r7, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d578a:	f04f 33ff 	mov.w	r3, #4294967295
   d578e:	6013      	str	r3, [r2, #0]
{
   d5790:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d5792:	2100      	movs	r1, #0
   d5794:	4630      	mov	r0, r6
   d5796:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   d579a:	4691      	mov	r9, r2
   d579c:	f001 f8e5 	bl	d696a <_ZNK6String6equalsEPKc>
   d57a0:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   d57a4:	4603      	mov	r3, r0
   d57a6:	2800      	cmp	r0, #0
   d57a8:	d16e      	bne.n	d5888 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x108>
	const char * c_str() const { return buffer; }
   d57aa:	f1be 0f00 	cmp.w	lr, #0
   d57ae:	bf14      	ite	ne
   d57b0:	4672      	movne	r2, lr
   d57b2:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   d57b4:	6831      	ldr	r1, [r6, #0]
   d57b6:	b292      	uxth	r2, r2
   d57b8:	4620      	mov	r0, r4
   d57ba:	f003 fa47 	bl	d8c4c <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   d57be:	1e05      	subs	r5, r0, #0
   d57c0:	bf18      	it	ne
   d57c2:	2501      	movne	r5, #1
    }

    #ifdef LOGGING
    if (connected) {
   d57c4:	2d00      	cmp	r5, #0
   d57c6:	d07e      	beq.n	d58c6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x146>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d57c8:	2100      	movs	r1, #0
   d57ca:	4630      	mov	r0, r6
   d57cc:	f001 f8cd 	bl	d696a <_ZNK6String6equalsEPKc>
        if(aRequest.hostname!=NULL) {
   d57d0:	2800      	cmp	r0, #0
   d57d2:	d16c      	bne.n	d58ae <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x12e>
            Serial.print("HttpClient>\tConnecting to: ");
   d57d4:	f002 feae 	bl	d8534 <_Z16_fetch_usbserialv>
   d57d8:	49bb      	ldr	r1, [pc, #748]	; (d5ac8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x348>)
   d57da:	f002 fb93 	bl	d7f04 <_ZN5Print5printEPKc>
            Serial.print(aRequest.hostname);
   d57de:	f002 fea9 	bl	d8534 <_Z16_fetch_usbserialv>
   d57e2:	6831      	ldr	r1, [r6, #0]
   d57e4:	f002 fb8e 	bl	d7f04 <_ZN5Print5printEPKc>
        } else {
            Serial.print("HttpClient>\tConnecting to IP: ");
            Serial.print(aRequest.ip);
        }
        Serial.print(":");
   d57e8:	f002 fea4 	bl	d8534 <_Z16_fetch_usbserialv>
   d57ec:	49b7      	ldr	r1, [pc, #732]	; (d5acc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x34c>)
   d57ee:	f002 fb89 	bl	d7f04 <_ZN5Print5printEPKc>
        Serial.println(aRequest.port);
   d57f2:	f002 fe9f 	bl	d8534 <_Z16_fetch_usbserialv>
   d57f6:	220a      	movs	r2, #10
   d57f8:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   d57fa:	f7fe fdd9 	bl	d43b0 <_ZN5Print7printlnIiLi0EEEjT_i>
    //
    // Send HTTP Headers
    //

    // Send initial headers (only HTTP 1.0 is supported for now).
    client.print(aHttpMethod);
   d57fe:	4641      	mov	r1, r8
   d5800:	4620      	mov	r0, r4
   d5802:	f002 fb7f 	bl	d7f04 <_ZN5Print5printEPKc>
    client.print(" ");
   d5806:	49b2      	ldr	r1, [pc, #712]	; (d5ad0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   d5808:	4620      	mov	r0, r4
   d580a:	f002 fb7b 	bl	d7f04 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   d580e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   d5810:	4620      	mov	r0, r4
   d5812:	f002 fb77 	bl	d7f04 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   d5816:	49af      	ldr	r1, [pc, #700]	; (d5ad4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   d5818:	4620      	mov	r0, r4
   d581a:	f002 fb73 	bl	d7f04 <_ZN5Print5printEPKc>

    #ifdef LOGGING
    Serial.println("HttpClient>\tStart of HTTP Request.");
   d581e:	f002 fe89 	bl	d8534 <_Z16_fetch_usbserialv>
   d5822:	49ad      	ldr	r1, [pc, #692]	; (d5ad8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   d5824:	f002 fb87 	bl	d7f36 <_ZN5Print7printlnEPKc>
    Serial.print(aHttpMethod);
   d5828:	f002 fe84 	bl	d8534 <_Z16_fetch_usbserialv>
   d582c:	4641      	mov	r1, r8
   d582e:	f002 fb69 	bl	d7f04 <_ZN5Print5printEPKc>
    Serial.print(" ");
   d5832:	f002 fe7f 	bl	d8534 <_Z16_fetch_usbserialv>
   d5836:	49a6      	ldr	r1, [pc, #664]	; (d5ad0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   d5838:	f002 fb64 	bl	d7f04 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
   d583c:	f002 fe7a 	bl	d8534 <_Z16_fetch_usbserialv>
   d5840:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   d5842:	f002 fb5f 	bl	d7f04 <_ZN5Print5printEPKc>
    Serial.print(" HTTP/1.0\r\n");
   d5846:	f002 fe75 	bl	d8534 <_Z16_fetch_usbserialv>
   d584a:	49a2      	ldr	r1, [pc, #648]	; (d5ad4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   d584c:	f002 fb5a 	bl	d7f04 <_ZN5Print5printEPKc>
    #endif

    // Send General and Request Headers.
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   d5850:	49a2      	ldr	r1, [pc, #648]	; (d5adc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x35c>)
   d5852:	4aa3      	ldr	r2, [pc, #652]	; (d5ae0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x360>)
   d5854:	4620      	mov	r0, r4
   d5856:	f7ff ff41 	bl	d56dc <_ZN10HttpClient10sendHeaderEPKcS1_>
   d585a:	2100      	movs	r1, #0
   d585c:	4630      	mov	r0, r6
   d585e:	f001 f884 	bl	d696a <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   d5862:	b920      	cbnz	r0, d586e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xee>
        sendHeader("HOST", aRequest.hostname.c_str());
   d5864:	6832      	ldr	r2, [r6, #0]
   d5866:	499f      	ldr	r1, [pc, #636]	; (d5ae4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x364>)
   d5868:	4620      	mov	r0, r4
   d586a:	f7ff ff37 	bl	d56dc <_ZN10HttpClient10sendHeaderEPKcS1_>
    }

    //Send Entity Headers
    // TODO: Check the standard, currently sending Content-Length : 0 for empty
    // POST requests, and no content-length for other types.
    if (aRequest.body != NULL) {
   d586e:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   d5872:	2100      	movs	r1, #0
   d5874:	4650      	mov	r0, sl
   d5876:	f001 f878 	bl	d696a <_ZNK6String6equalsEPKc>
   d587a:	bb78      	cbnz	r0, d58dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x15c>
        sendHeader("Content-Length", (aRequest.body).length());
   d587c:	6c72      	ldr	r2, [r6, #68]	; 0x44
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
        sendHeader("Content-Length", 0);
   d587e:	499a      	ldr	r1, [pc, #616]	; (d5ae8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x368>)
   d5880:	4620      	mov	r0, r4
   d5882:	f7ff ff59 	bl	d5738 <_ZN10HttpClient10sendHeaderEPKci>
   d5886:	e030      	b.n	d58ea <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5888:	4b98      	ldr	r3, [pc, #608]	; (d5aec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x36c>)
   d588a:	930a      	str	r3, [sp, #40]	; 0x28
   d588c:	f106 0c14 	add.w	ip, r6, #20
   d5890:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d5894:	ad0b      	add	r5, sp, #44	; 0x2c
   d5896:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5898:	f8dc 3000 	ldr.w	r3, [ip]
   d589c:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   d589e:	fa1f f28e 	uxth.w	r2, lr
   d58a2:	2300      	movs	r3, #0
   d58a4:	a90a      	add	r1, sp, #40	; 0x28
   d58a6:	4620      	mov	r0, r4
   d58a8:	f003 f89d 	bl	d89e6 <_ZN9TCPClient7connectE9IPAddresstm>
   d58ac:	e787      	b.n	d57be <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3e>
            Serial.print("HttpClient>\tConnecting to IP: ");
   d58ae:	f002 fe41 	bl	d8534 <_Z16_fetch_usbserialv>
   d58b2:	498f      	ldr	r1, [pc, #572]	; (d5af0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x370>)
   d58b4:	f002 fb26 	bl	d7f04 <_ZN5Print5printEPKc>
            Serial.print(aRequest.ip);
   d58b8:	f002 fe3c 	bl	d8534 <_Z16_fetch_usbserialv>
   d58bc:	f106 0110 	add.w	r1, r6, #16
   d58c0:	f002 fb27 	bl	d7f12 <_ZN5Print5printERK9Printable>
   d58c4:	e790      	b.n	d57e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x68>
        Serial.println("HttpClient>\tConnection failed.");
   d58c6:	f002 fe35 	bl	d8534 <_Z16_fetch_usbserialv>
   d58ca:	498a      	ldr	r1, [pc, #552]	; (d5af4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x374>)
   d58cc:	f002 fb33 	bl	d7f36 <_ZN5Print7printlnEPKc>
        client.stop();
   d58d0:	4620      	mov	r0, r4
   d58d2:	f003 f95d 	bl	d8b90 <_ZN9TCPClient4stopEv>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   d58d6:	b011      	add	sp, #68	; 0x44
   d58d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   d58dc:	4986      	ldr	r1, [pc, #536]	; (d5af8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x378>)
   d58de:	4640      	mov	r0, r8
   d58e0:	f004 fac2 	bl	d9e68 <strcmp>
   d58e4:	4602      	mov	r2, r0
   d58e6:	2800      	cmp	r0, #0
   d58e8:	d0c9      	beq.n	d587e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfe>
    if (headers != NULL)
   d58ea:	b15f      	cbz	r7, d5904 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x184>
        while (headers[i].header != NULL)
   d58ec:	6839      	ldr	r1, [r7, #0]
   d58ee:	b149      	cbz	r1, d5904 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x184>
            if (headers[i].value != NULL) {
   d58f0:	687a      	ldr	r2, [r7, #4]
                sendHeader(headers[i].header, headers[i].value);
   d58f2:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   d58f4:	b11a      	cbz	r2, d58fe <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17e>
                sendHeader(headers[i].header, headers[i].value);
   d58f6:	f7ff fef1 	bl	d56dc <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   d58fa:	3708      	adds	r7, #8
        while (headers[i].header != NULL)
   d58fc:	e7f6      	b.n	d58ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16c>
                sendHeader(headers[i].header);
   d58fe:	f7ff ff0f 	bl	d5720 <_ZN10HttpClient10sendHeaderEPKc>
   d5902:	e7fa      	b.n	d58fa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17a>
    client.println();
   d5904:	4620      	mov	r0, r4
   d5906:	f002 fb0a 	bl	d7f1e <_ZN5Print7printlnEv>
    client.flush();
   d590a:	4620      	mov	r0, r4
   d590c:	f002 ff5e 	bl	d87cc <_ZN9TCPClient5flushEv>
   d5910:	2100      	movs	r1, #0
   d5912:	4650      	mov	r0, sl
   d5914:	f001 f829 	bl	d696a <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   d5918:	b940      	cbnz	r0, d592c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ac>
        client.println(aRequest.body);
   d591a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   d591c:	4620      	mov	r0, r4
   d591e:	f002 fb0a 	bl	d7f36 <_ZN5Print7printlnEPKc>
        Serial.println(aRequest.body);
   d5922:	f002 fe07 	bl	d8534 <_Z16_fetch_usbserialv>
   d5926:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   d5928:	f002 fb05 	bl	d7f36 <_ZN5Print7printlnEPKc>
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   d592c:	f002 fe02 	bl	d8534 <_Z16_fetch_usbserialv>
    memset(&buffer[0], 0, sizeof(buffer));
   d5930:	f104 0a1c 	add.w	sl, r4, #28
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   d5934:	4971      	ldr	r1, [pc, #452]	; (d5afc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x37c>)
   d5936:	f002 fafe 	bl	d7f36 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   d593a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d593e:	2100      	movs	r1, #0
   d5940:	4650      	mov	r0, sl
   d5942:	f004 fa65 	bl	d9e10 <memset>
   d5946:	f000 f951 	bl	d5bec <HAL_Timer_Get_Milli_Seconds>
   d594a:	9000      	str	r0, [sp, #0]
   d594c:	f000 f94e 	bl	d5bec <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
   d5950:	2700      	movs	r7, #0
   d5952:	9001      	str	r0, [sp, #4]
        int bytes = client.available();
   d5954:	4620      	mov	r0, r4
   d5956:	f003 f8c1 	bl	d8adc <_ZN9TCPClient9availableEv>
        if(bytes) {
   d595a:	4606      	mov	r6, r0
   d595c:	b1b0      	cbz	r0, d598c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x20c>
            Serial.print("\r\nHttpClient>\tReceiving TCP transaction of ");
   d595e:	f002 fde9 	bl	d8534 <_Z16_fetch_usbserialv>
   d5962:	4967      	ldr	r1, [pc, #412]	; (d5b00 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x380>)
   d5964:	f002 face 	bl	d7f04 <_ZN5Print5printEPKc>
            Serial.print(bytes);
   d5968:	f002 fde4 	bl	d8534 <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
   d596c:	2e00      	cmp	r6, #0
   d596e:	4683      	mov	fp, r0
   d5970:	da27      	bge.n	d59c2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x242>
            t = print('-');
   d5972:	212d      	movs	r1, #45	; 0x2d
   d5974:	f002 faca 	bl	d7f0c <_ZN5Print5printEc>
            val = -n;
   d5978:	4271      	negs	r1, r6
        return printNumber(val, base) + t;
   d597a:	220a      	movs	r2, #10
   d597c:	4658      	mov	r0, fp
   d597e:	f002 fae4 	bl	d7f4a <_ZN5Print11printNumberEmh>
            Serial.println(" bytes.");
   d5982:	f002 fdd7 	bl	d8534 <_Z16_fetch_usbserialv>
   d5986:	495f      	ldr	r1, [pc, #380]	; (d5b04 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x384>)
   d5988:	f002 fad5 	bl	d7f36 <_ZN5Print7printlnEPKc>
    unsigned int bufferPosition = 0;
   d598c:	f04f 0b00 	mov.w	fp, #0
        while (client.available()) {
   d5990:	4620      	mov	r0, r4
   d5992:	f003 f8a3 	bl	d8adc <_ZN9TCPClient9availableEv>
   d5996:	b338      	cbz	r0, d59e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x268>
            char c = client.read();
   d5998:	4620      	mov	r0, r4
   d599a:	f002 ffd8 	bl	d894e <_ZN9TCPClient4readEv>
   d599e:	fa5f f880 	uxtb.w	r8, r0
            Serial.print(c);
   d59a2:	f002 fdc7 	bl	d8534 <_Z16_fetch_usbserialv>
   d59a6:	4641      	mov	r1, r8
   d59a8:	f002 fab0 	bl	d7f0c <_ZN5Print5printEc>
   d59ac:	f000 f91e 	bl	d5bec <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   d59b0:	f240 33fe 	movw	r3, #1022	; 0x3fe
   d59b4:	429f      	cmp	r7, r3
   d59b6:	9000      	str	r0, [sp, #0]
   d59b8:	d805      	bhi.n	d59c6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x246>
                buffer[bufferPosition] = c;
   d59ba:	f80a 8007 	strb.w	r8, [sl, r7]
            bufferPosition++;
   d59be:	3701      	adds	r7, #1
        while (client.available()) {
   d59c0:	e7e6      	b.n	d5990 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x210>
            val = n;
   d59c2:	4631      	mov	r1, r6
   d59c4:	e7d9      	b.n	d597a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fa>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   d59c6:	f240 33ff 	movw	r3, #1023	; 0x3ff
   d59ca:	429f      	cmp	r7, r3
   d59cc:	d1f7      	bne.n	d59be <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23e>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d59ce:	2300      	movs	r3, #0
   d59d0:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   d59d4:	4620      	mov	r0, r4
   d59d6:	f003 f8db 	bl	d8b90 <_ZN9TCPClient4stopEv>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
   d59da:	f002 fdab 	bl	d8534 <_Z16_fetch_usbserialv>
   d59de:	494a      	ldr	r1, [pc, #296]	; (d5b08 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x388>)
   d59e0:	f002 faa9 	bl	d7f36 <_ZN5Print7printlnEPKc>
                error = true;
   d59e4:	46ab      	mov	fp, r5
   d59e6:	e7ea      	b.n	d59be <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23e>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d59e8:	19e3      	adds	r3, r4, r7
   d59ea:	7718      	strb	r0, [r3, #28]
        if (bytes) {
   d59ec:	b126      	cbz	r6, d59f8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x278>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
   d59ee:	f002 fda1 	bl	d8534 <_Z16_fetch_usbserialv>
   d59f2:	4946      	ldr	r1, [pc, #280]	; (d5b0c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x38c>)
   d59f4:	f002 fa86 	bl	d7f04 <_ZN5Print5printEPKc>
   d59f8:	f000 f8f8 	bl	d5bec <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   d59fc:	9b00      	ldr	r3, [sp, #0]
   d59fe:	1ac6      	subs	r6, r0, r3
        if (!error && !timeout) {
   d5a00:	f1bb 0f00 	cmp.w	fp, #0
   d5a04:	d106      	bne.n	d5a14 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x294>
   d5a06:	f241 3388 	movw	r3, #5000	; 0x1388
   d5a0a:	429e      	cmp	r6, r3
   d5a0c:	d802      	bhi.n	d5a14 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x294>
            delay(200);
   d5a0e:	20c8      	movs	r0, #200	; 0xc8
   d5a10:	f002 fbe8 	bl	d81e4 <delay>
    } while (client.connected() && !timeout && !error);
   d5a14:	4620      	mov	r0, r4
   d5a16:	f002 feda 	bl	d87ce <_ZN9TCPClient9connectedEv>
   d5a1a:	f241 3388 	movw	r3, #5000	; 0x1388
   d5a1e:	2800      	cmp	r0, #0
   d5a20:	d04a      	beq.n	d5ab8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x338>
   d5a22:	429e      	cmp	r6, r3
   d5a24:	d84a      	bhi.n	d5abc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x33c>
   d5a26:	f1bb 0f00 	cmp.w	fp, #0
   d5a2a:	d093      	beq.n	d5954 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d4>
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
   d5a2c:	f002 fd82 	bl	d8534 <_Z16_fetch_usbserialv>
   d5a30:	4937      	ldr	r1, [pc, #220]	; (d5b10 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x390>)
   d5a32:	f002 fa67 	bl	d7f04 <_ZN5Print5printEPKc>
    Serial.print(millis() - firstRead);
   d5a36:	f002 fd7d 	bl	d8534 <_Z16_fetch_usbserialv>
   d5a3a:	4605      	mov	r5, r0
   d5a3c:	f000 f8d6 	bl	d5bec <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   d5a40:	9b01      	ldr	r3, [sp, #4]
   d5a42:	220a      	movs	r2, #10
   d5a44:	1ac1      	subs	r1, r0, r3
   d5a46:	4628      	mov	r0, r5
   d5a48:	f002 fa7f 	bl	d7f4a <_ZN5Print11printNumberEmh>
    Serial.println("ms).");
   d5a4c:	f002 fd72 	bl	d8534 <_Z16_fetch_usbserialv>
   d5a50:	4930      	ldr	r1, [pc, #192]	; (d5b14 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x394>)
   d5a52:	f002 fa70 	bl	d7f36 <_ZN5Print7printlnEPKc>
    client.stop();
   d5a56:	4620      	mov	r0, r4
   d5a58:	f003 f89a 	bl	d8b90 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   d5a5c:	4651      	mov	r1, sl
   d5a5e:	a802      	add	r0, sp, #8
   d5a60:	f000 feba 	bl	d67d8 <_ZN6StringC1EPKc>
    String statusCode = raw_response.substring(9,12);
   d5a64:	230c      	movs	r3, #12
   d5a66:	2209      	movs	r2, #9
   d5a68:	a902      	add	r1, sp, #8
   d5a6a:	a806      	add	r0, sp, #24
   d5a6c:	f000 ffa2 	bl	d69b4 <_ZNK6String9substringEjj>
    Serial.print("HttpClient>\tStatus Code: ");
   d5a70:	f002 fd60 	bl	d8534 <_Z16_fetch_usbserialv>
   d5a74:	4928      	ldr	r1, [pc, #160]	; (d5b18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x398>)
   d5a76:	f002 fa45 	bl	d7f04 <_ZN5Print5printEPKc>
    Serial.println(statusCode);
   d5a7a:	f002 fd5b 	bl	d8534 <_Z16_fetch_usbserialv>
   d5a7e:	9906      	ldr	r1, [sp, #24]
   d5a80:	f002 fa59 	bl	d7f36 <_ZN5Print7printlnEPKc>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   d5a84:	4925      	ldr	r1, [pc, #148]	; (d5b1c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x39c>)
   d5a86:	a80a      	add	r0, sp, #40	; 0x28
   d5a88:	f000 fea6 	bl	d67d8 <_ZN6StringC1EPKc>
   d5a8c:	a90a      	add	r1, sp, #40	; 0x28
   d5a8e:	a802      	add	r0, sp, #8
   d5a90:	f000 ff8c 	bl	d69ac <_ZNK6String7indexOfERKS_>
   d5a94:	4604      	mov	r4, r0
   d5a96:	a80a      	add	r0, sp, #40	; 0x28
   d5a98:	f000 fe53 	bl	d6742 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   d5a9c:	1c63      	adds	r3, r4, #1
   d5a9e:	d143      	bne.n	d5b28 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a8>
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
   d5aa0:	f002 fd48 	bl	d8534 <_Z16_fetch_usbserialv>
   d5aa4:	491e      	ldr	r1, [pc, #120]	; (d5b20 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a0>)
   d5aa6:	f002 fa46 	bl	d7f36 <_ZN5Print7printlnEPKc>
    String statusCode = raw_response.substring(9,12);
   d5aaa:	a806      	add	r0, sp, #24
   d5aac:	f000 fe49 	bl	d6742 <_ZN6StringD1Ev>
    String raw_response(buffer);
   d5ab0:	a802      	add	r0, sp, #8
   d5ab2:	f000 fe46 	bl	d6742 <_ZN6StringD1Ev>
   d5ab6:	e70e      	b.n	d58d6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x156>
    if (timeout) {
   d5ab8:	429e      	cmp	r6, r3
   d5aba:	d9b7      	bls.n	d5a2c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2ac>
        Serial.println("\r\nHttpClient>\tError: Timeout while reading response.");
   d5abc:	f002 fd3a 	bl	d8534 <_Z16_fetch_usbserialv>
   d5ac0:	4918      	ldr	r1, [pc, #96]	; (d5b24 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a4>)
   d5ac2:	f002 fa38 	bl	d7f36 <_ZN5Print7printlnEPKc>
   d5ac6:	e7b1      	b.n	d5a2c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2ac>
   d5ac8:	000da3f0 	.word	0x000da3f0
   d5acc:	000da04e 	.word	0x000da04e
   d5ad0:	000da137 	.word	0x000da137
   d5ad4:	000da42b 	.word	0x000da42b
   d5ad8:	000da437 	.word	0x000da437
   d5adc:	000da460 	.word	0x000da460
   d5ae0:	000da45a 	.word	0x000da45a
   d5ae4:	000da48a 	.word	0x000da48a
   d5ae8:	000da48f 	.word	0x000da48f
   d5aec:	000da828 	.word	0x000da828
   d5af0:	000da40c 	.word	0x000da40c
   d5af4:	000da46b 	.word	0x000da46b
   d5af8:	000da07a 	.word	0x000da07a
   d5afc:	000da49e 	.word	0x000da49e
   d5b00:	000da4bf 	.word	0x000da4bf
   d5b04:	000da4eb 	.word	0x000da4eb
   d5b08:	000da4f3 	.word	0x000da4f3
   d5b0c:	000da528 	.word	0x000da528
   d5b10:	000da583 	.word	0x000da583
   d5b14:	000da5a8 	.word	0x000da5a8
   d5b18:	000da5ad 	.word	0x000da5ad
   d5b1c:	000da5c7 	.word	0x000da5c7
   d5b20:	000da5cc 	.word	0x000da5cc
   d5b24:	000da54e 	.word	0x000da54e
    aResponse.body = "";
   d5b28:	f109 0504 	add.w	r5, r9, #4
   d5b2c:	490a      	ldr	r1, [pc, #40]	; (d5b58 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3d8>)
   d5b2e:	4628      	mov	r0, r5
   d5b30:	f000 fe9a 	bl	d6868 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   d5b34:	1d22      	adds	r2, r4, #4
   d5b36:	a902      	add	r1, sp, #8
   d5b38:	a80a      	add	r0, sp, #40	; 0x28
   d5b3a:	f000 ff5b 	bl	d69f4 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d5b3e:	a90a      	add	r1, sp, #40	; 0x28
   d5b40:	4628      	mov	r0, r5
   d5b42:	f000 fee0 	bl	d6906 <_ZN6String6concatERKS_>
   d5b46:	a80a      	add	r0, sp, #40	; 0x28
   d5b48:	f000 fdfb 	bl	d6742 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   d5b4c:	9806      	ldr	r0, [sp, #24]
   d5b4e:	f004 f903 	bl	d9d58 <atoi>
   d5b52:	f8c9 0000 	str.w	r0, [r9]
   d5b56:	e7a8      	b.n	d5aaa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x32a>
   d5b58:	000da185 	.word	0x000da185

000d5b5c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5b5c:	b508      	push	{r3, lr}
   d5b5e:	4b02      	ldr	r3, [pc, #8]	; (d5b68 <netdb_freeaddrinfo+0xc>)
   d5b60:	681b      	ldr	r3, [r3, #0]
   d5b62:	689b      	ldr	r3, [r3, #8]
   d5b64:	9301      	str	r3, [sp, #4]
   d5b66:	bd08      	pop	{r3, pc}
   d5b68:	00030268 	.word	0x00030268

000d5b6c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5b6c:	b508      	push	{r3, lr}
   d5b6e:	4b02      	ldr	r3, [pc, #8]	; (d5b78 <netdb_getaddrinfo+0xc>)
   d5b70:	681b      	ldr	r3, [r3, #0]
   d5b72:	68db      	ldr	r3, [r3, #12]
   d5b74:	9301      	str	r3, [sp, #4]
   d5b76:	bd08      	pop	{r3, pc}
   d5b78:	00030268 	.word	0x00030268

000d5b7c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5b7c:	b508      	push	{r3, lr}
   d5b7e:	4b02      	ldr	r3, [pc, #8]	; (d5b88 <HAL_Pin_Mode+0xc>)
   d5b80:	681b      	ldr	r3, [r3, #0]
   d5b82:	689b      	ldr	r3, [r3, #8]
   d5b84:	9301      	str	r3, [sp, #4]
   d5b86:	bd08      	pop	{r3, pc}
   d5b88:	0003022c 	.word	0x0003022c

000d5b8c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5b8c:	b508      	push	{r3, lr}
   d5b8e:	4b02      	ldr	r3, [pc, #8]	; (d5b98 <HAL_Get_Pin_Mode+0xc>)
   d5b90:	681b      	ldr	r3, [r3, #0]
   d5b92:	68db      	ldr	r3, [r3, #12]
   d5b94:	9301      	str	r3, [sp, #4]
   d5b96:	bd08      	pop	{r3, pc}
   d5b98:	0003022c 	.word	0x0003022c

000d5b9c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5b9c:	b508      	push	{r3, lr}
   d5b9e:	4b02      	ldr	r3, [pc, #8]	; (d5ba8 <HAL_GPIO_Write+0xc>)
   d5ba0:	681b      	ldr	r3, [r3, #0]
   d5ba2:	691b      	ldr	r3, [r3, #16]
   d5ba4:	9301      	str	r3, [sp, #4]
   d5ba6:	bd08      	pop	{r3, pc}
   d5ba8:	0003022c 	.word	0x0003022c

000d5bac <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5bac:	b508      	push	{r3, lr}
   d5bae:	4b02      	ldr	r3, [pc, #8]	; (d5bb8 <HAL_GPIO_Read+0xc>)
   d5bb0:	681b      	ldr	r3, [r3, #0]
   d5bb2:	695b      	ldr	r3, [r3, #20]
   d5bb4:	9301      	str	r3, [sp, #4]
   d5bb6:	bd08      	pop	{r3, pc}
   d5bb8:	0003022c 	.word	0x0003022c

000d5bbc <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5bbc:	b508      	push	{r3, lr}
   d5bbe:	4b02      	ldr	r3, [pc, #8]	; (d5bc8 <if_index_to_name+0xc>)
   d5bc0:	681b      	ldr	r3, [r3, #0]
   d5bc2:	695b      	ldr	r3, [r3, #20]
   d5bc4:	9301      	str	r3, [sp, #4]
   d5bc6:	bd08      	pop	{r3, pc}
   d5bc8:	0003026c 	.word	0x0003026c

000d5bcc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5bcc:	b508      	push	{r3, lr}
   d5bce:	4b02      	ldr	r3, [pc, #8]	; (d5bd8 <HAL_RNG_GetRandomNumber+0xc>)
   d5bd0:	681b      	ldr	r3, [r3, #0]
   d5bd2:	685b      	ldr	r3, [r3, #4]
   d5bd4:	9301      	str	r3, [sp, #4]
   d5bd6:	bd08      	pop	{r3, pc}
   d5bd8:	00030218 	.word	0x00030218

000d5bdc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5bdc:	b508      	push	{r3, lr}
   d5bde:	4b02      	ldr	r3, [pc, #8]	; (d5be8 <HAL_Delay_Microseconds+0xc>)
   d5be0:	681b      	ldr	r3, [r3, #0]
   d5be2:	68db      	ldr	r3, [r3, #12]
   d5be4:	9301      	str	r3, [sp, #4]
   d5be6:	bd08      	pop	{r3, pc}
   d5be8:	00030218 	.word	0x00030218

000d5bec <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5bec:	b508      	push	{r3, lr}
   d5bee:	4b02      	ldr	r3, [pc, #8]	; (d5bf8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5bf0:	681b      	ldr	r3, [r3, #0]
   d5bf2:	695b      	ldr	r3, [r3, #20]
   d5bf4:	9301      	str	r3, [sp, #4]
   d5bf6:	bd08      	pop	{r3, pc}
   d5bf8:	00030218 	.word	0x00030218

000d5bfc <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d5bfc:	b508      	push	{r3, lr}
   d5bfe:	4b02      	ldr	r3, [pc, #8]	; (d5c08 <HAL_EEPROM_Init+0xc>)
   d5c00:	681b      	ldr	r3, [r3, #0]
   d5c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c04:	9301      	str	r3, [sp, #4]
   d5c06:	bd08      	pop	{r3, pc}
   d5c08:	00030218 	.word	0x00030218

000d5c0c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d5c0c:	b508      	push	{r3, lr}
   d5c0e:	4b02      	ldr	r3, [pc, #8]	; (d5c18 <HAL_EEPROM_Get+0xc>)
   d5c10:	681b      	ldr	r3, [r3, #0]
   d5c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5c14:	9301      	str	r3, [sp, #4]
   d5c16:	bd08      	pop	{r3, pc}
   d5c18:	00030218 	.word	0x00030218

000d5c1c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d5c1c:	b508      	push	{r3, lr}
   d5c1e:	4b02      	ldr	r3, [pc, #8]	; (d5c28 <HAL_EEPROM_Put+0xc>)
   d5c20:	681b      	ldr	r3, [r3, #0]
   d5c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5c24:	9301      	str	r3, [sp, #4]
   d5c26:	bd08      	pop	{r3, pc}
   d5c28:	00030218 	.word	0x00030218

000d5c2c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d5c2c:	b508      	push	{r3, lr}
   d5c2e:	4b02      	ldr	r3, [pc, #8]	; (d5c38 <hal_rtc_time_is_valid+0xc>)
   d5c30:	681b      	ldr	r3, [r3, #0]
   d5c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5c34:	9301      	str	r3, [sp, #4]
   d5c36:	bd08      	pop	{r3, pc}
   d5c38:	00030218 	.word	0x00030218

000d5c3c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d5c3c:	b508      	push	{r3, lr}
   d5c3e:	4b02      	ldr	r3, [pc, #8]	; (d5c48 <hal_rtc_get_time+0xc>)
   d5c40:	681b      	ldr	r3, [r3, #0]
   d5c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5c44:	9301      	str	r3, [sp, #4]
   d5c46:	bd08      	pop	{r3, pc}
   d5c48:	00030218 	.word	0x00030218

000d5c4c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d5c4c:	b508      	push	{r3, lr}
   d5c4e:	4b02      	ldr	r3, [pc, #8]	; (d5c58 <hal_ble_stack_init+0xc>)
   d5c50:	681b      	ldr	r3, [r3, #0]
   d5c52:	689b      	ldr	r3, [r3, #8]
   d5c54:	9301      	str	r3, [sp, #4]
   d5c56:	bd08      	pop	{r3, pc}
   d5c58:	00030278 	.word	0x00030278

000d5c5c <hal_ble_stack_deinit>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
   d5c5c:	b508      	push	{r3, lr}
   d5c5e:	4b02      	ldr	r3, [pc, #8]	; (d5c68 <hal_ble_stack_deinit+0xc>)
   d5c60:	681b      	ldr	r3, [r3, #0]
   d5c62:	68db      	ldr	r3, [r3, #12]
   d5c64:	9301      	str	r3, [sp, #4]
   d5c66:	bd08      	pop	{r3, pc}
   d5c68:	00030278 	.word	0x00030278

000d5c6c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d5c6c:	b508      	push	{r3, lr}
   d5c6e:	4b02      	ldr	r3, [pc, #8]	; (d5c78 <hal_ble_gap_set_advertising_data+0xc>)
   d5c70:	681b      	ldr	r3, [r3, #0]
   d5c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5c74:	9301      	str	r3, [sp, #4]
   d5c76:	bd08      	pop	{r3, pc}
   d5c78:	00030278 	.word	0x00030278

000d5c7c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d5c7c:	b508      	push	{r3, lr}
   d5c7e:	4b02      	ldr	r3, [pc, #8]	; (d5c88 <hal_ble_gap_set_scan_response_data+0xc>)
   d5c80:	681b      	ldr	r3, [r3, #0]
   d5c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5c84:	9301      	str	r3, [sp, #4]
   d5c86:	bd08      	pop	{r3, pc}
   d5c88:	00030278 	.word	0x00030278

000d5c8c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d5c8c:	b508      	push	{r3, lr}
   d5c8e:	4b02      	ldr	r3, [pc, #8]	; (d5c98 <hal_ble_gap_start_advertising+0xc>)
   d5c90:	681b      	ldr	r3, [r3, #0]
   d5c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d5c94:	9301      	str	r3, [sp, #4]
   d5c96:	bd08      	pop	{r3, pc}
   d5c98:	00030278 	.word	0x00030278

000d5c9c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d5c9c:	b508      	push	{r3, lr}
   d5c9e:	4b03      	ldr	r3, [pc, #12]	; (d5cac <hal_ble_gap_disconnect+0x10>)
   d5ca0:	681b      	ldr	r3, [r3, #0]
   d5ca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d5ca6:	9301      	str	r3, [sp, #4]
   d5ca8:	bd08      	pop	{r3, pc}
   d5caa:	0000      	.short	0x0000
   d5cac:	00030278 	.word	0x00030278

000d5cb0 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d5cb0:	b508      	push	{r3, lr}
   d5cb2:	4b03      	ldr	r3, [pc, #12]	; (d5cc0 <hal_ble_gatt_server_add_service+0x10>)
   d5cb4:	681b      	ldr	r3, [r3, #0]
   d5cb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d5cba:	9301      	str	r3, [sp, #4]
   d5cbc:	bd08      	pop	{r3, pc}
   d5cbe:	0000      	.short	0x0000
   d5cc0:	00030278 	.word	0x00030278

000d5cc4 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5cc4:	b508      	push	{r3, lr}
   d5cc6:	4b03      	ldr	r3, [pc, #12]	; (d5cd4 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d5cc8:	681b      	ldr	r3, [r3, #0]
   d5cca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d5cce:	9301      	str	r3, [sp, #4]
   d5cd0:	bd08      	pop	{r3, pc}
   d5cd2:	0000      	.short	0x0000
   d5cd4:	00030278 	.word	0x00030278

000d5cd8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5cd8:	b508      	push	{r3, lr}
   d5cda:	4b03      	ldr	r3, [pc, #12]	; (d5ce8 <hal_ble_gatt_client_write_with_response+0x10>)
   d5cdc:	681b      	ldr	r3, [r3, #0]
   d5cde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d5ce2:	9301      	str	r3, [sp, #4]
   d5ce4:	bd08      	pop	{r3, pc}
   d5ce6:	0000      	.short	0x0000
   d5ce8:	00030278 	.word	0x00030278

000d5cec <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5cec:	b508      	push	{r3, lr}
   d5cee:	4b03      	ldr	r3, [pc, #12]	; (d5cfc <hal_ble_gatt_client_write_without_response+0x10>)
   d5cf0:	681b      	ldr	r3, [r3, #0]
   d5cf2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d5cf6:	9301      	str	r3, [sp, #4]
   d5cf8:	bd08      	pop	{r3, pc}
   d5cfa:	0000      	.short	0x0000
   d5cfc:	00030278 	.word	0x00030278

000d5d00 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   d5d00:	b508      	push	{r3, lr}
   d5d02:	4b03      	ldr	r3, [pc, #12]	; (d5d10 <hal_ble_gap_get_connection_info+0x10>)
   d5d04:	681b      	ldr	r3, [r3, #0]
   d5d06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   d5d0a:	9301      	str	r3, [sp, #4]
   d5d0c:	bd08      	pop	{r3, pc}
   d5d0e:	0000      	.short	0x0000
   d5d10:	00030278 	.word	0x00030278

000d5d14 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d5d14:	b508      	push	{r3, lr}
   d5d16:	4b03      	ldr	r3, [pc, #12]	; (d5d24 <hal_ble_gatt_server_add_characteristic+0x10>)
   d5d18:	681b      	ldr	r3, [r3, #0]
   d5d1a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d5d1e:	9301      	str	r3, [sp, #4]
   d5d20:	bd08      	pop	{r3, pc}
   d5d22:	0000      	.short	0x0000
   d5d24:	00030278 	.word	0x00030278

000d5d28 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d5d28:	b508      	push	{r3, lr}
   d5d2a:	4b03      	ldr	r3, [pc, #12]	; (d5d38 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d5d2c:	681b      	ldr	r3, [r3, #0]
   d5d2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d5d32:	9301      	str	r3, [sp, #4]
   d5d34:	bd08      	pop	{r3, pc}
   d5d36:	0000      	.short	0x0000
   d5d38:	00030278 	.word	0x00030278

000d5d3c <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5d3c:	b508      	push	{r3, lr}
   d5d3e:	4b03      	ldr	r3, [pc, #12]	; (d5d4c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d5d40:	681b      	ldr	r3, [r3, #0]
   d5d42:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d5d46:	9301      	str	r3, [sp, #4]
   d5d48:	bd08      	pop	{r3, pc}
   d5d4a:	0000      	.short	0x0000
   d5d4c:	00030278 	.word	0x00030278

000d5d50 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5d50:	b508      	push	{r3, lr}
   d5d52:	4b03      	ldr	r3, [pc, #12]	; (d5d60 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d5d54:	681b      	ldr	r3, [r3, #0]
   d5d56:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d5d5a:	9301      	str	r3, [sp, #4]
   d5d5c:	bd08      	pop	{r3, pc}
   d5d5e:	0000      	.short	0x0000
   d5d60:	00030278 	.word	0x00030278

000d5d64 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5d64:	b508      	push	{r3, lr}
   d5d66:	4b02      	ldr	r3, [pc, #8]	; (d5d70 <os_mutex_recursive_create+0xc>)
   d5d68:	681b      	ldr	r3, [r3, #0]
   d5d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d6c:	9301      	str	r3, [sp, #4]
   d5d6e:	bd08      	pop	{r3, pc}
   d5d70:	00030248 	.word	0x00030248

000d5d74 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5d74:	b508      	push	{r3, lr}
   d5d76:	4b02      	ldr	r3, [pc, #8]	; (d5d80 <os_mutex_recursive_destroy+0xc>)
   d5d78:	681b      	ldr	r3, [r3, #0]
   d5d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5d7c:	9301      	str	r3, [sp, #4]
   d5d7e:	bd08      	pop	{r3, pc}
   d5d80:	00030248 	.word	0x00030248

000d5d84 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5d84:	b508      	push	{r3, lr}
   d5d86:	4b02      	ldr	r3, [pc, #8]	; (d5d90 <os_mutex_recursive_lock+0xc>)
   d5d88:	681b      	ldr	r3, [r3, #0]
   d5d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5d8c:	9301      	str	r3, [sp, #4]
   d5d8e:	bd08      	pop	{r3, pc}
   d5d90:	00030248 	.word	0x00030248

000d5d94 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5d94:	b508      	push	{r3, lr}
   d5d96:	4b02      	ldr	r3, [pc, #8]	; (d5da0 <os_mutex_recursive_unlock+0xc>)
   d5d98:	681b      	ldr	r3, [r3, #0]
   d5d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5d9c:	9301      	str	r3, [sp, #4]
   d5d9e:	bd08      	pop	{r3, pc}
   d5da0:	00030248 	.word	0x00030248

000d5da4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5da4:	b508      	push	{r3, lr}
   d5da6:	4b02      	ldr	r3, [pc, #8]	; (d5db0 <inet_inet_ntop+0xc>)
   d5da8:	681b      	ldr	r3, [r3, #0]
   d5daa:	695b      	ldr	r3, [r3, #20]
   d5dac:	9301      	str	r3, [sp, #4]
   d5dae:	bd08      	pop	{r3, pc}
   d5db0:	00030264 	.word	0x00030264

000d5db4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5db4:	b508      	push	{r3, lr}
   d5db6:	4b02      	ldr	r3, [pc, #8]	; (d5dc0 <inet_htonl+0xc>)
   d5db8:	681b      	ldr	r3, [r3, #0]
   d5dba:	6a1b      	ldr	r3, [r3, #32]
   d5dbc:	9301      	str	r3, [sp, #4]
   d5dbe:	bd08      	pop	{r3, pc}
   d5dc0:	00030264 	.word	0x00030264

000d5dc4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5dc4:	b508      	push	{r3, lr}
   d5dc6:	4b02      	ldr	r3, [pc, #8]	; (d5dd0 <inet_htons+0xc>)
   d5dc8:	681b      	ldr	r3, [r3, #0]
   d5dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5dcc:	9301      	str	r3, [sp, #4]
   d5dce:	bd08      	pop	{r3, pc}
   d5dd0:	00030264 	.word	0x00030264

000d5dd4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5dd4:	b508      	push	{r3, lr}
   d5dd6:	4b02      	ldr	r3, [pc, #8]	; (d5de0 <hal_usart_init+0xc>)
   d5dd8:	681b      	ldr	r3, [r3, #0]
   d5dda:	681b      	ldr	r3, [r3, #0]
   d5ddc:	9301      	str	r3, [sp, #4]
   d5dde:	bd08      	pop	{r3, pc}
   d5de0:	0003023c 	.word	0x0003023c

000d5de4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5de4:	b508      	push	{r3, lr}
   d5de6:	4b02      	ldr	r3, [pc, #8]	; (d5df0 <hal_usart_write+0xc>)
   d5de8:	681b      	ldr	r3, [r3, #0]
   d5dea:	68db      	ldr	r3, [r3, #12]
   d5dec:	9301      	str	r3, [sp, #4]
   d5dee:	bd08      	pop	{r3, pc}
   d5df0:	0003023c 	.word	0x0003023c

000d5df4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5df4:	b508      	push	{r3, lr}
   d5df6:	4b02      	ldr	r3, [pc, #8]	; (d5e00 <hal_usart_available+0xc>)
   d5df8:	681b      	ldr	r3, [r3, #0]
   d5dfa:	691b      	ldr	r3, [r3, #16]
   d5dfc:	9301      	str	r3, [sp, #4]
   d5dfe:	bd08      	pop	{r3, pc}
   d5e00:	0003023c 	.word	0x0003023c

000d5e04 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5e04:	b508      	push	{r3, lr}
   d5e06:	4b02      	ldr	r3, [pc, #8]	; (d5e10 <hal_usart_read+0xc>)
   d5e08:	681b      	ldr	r3, [r3, #0]
   d5e0a:	695b      	ldr	r3, [r3, #20]
   d5e0c:	9301      	str	r3, [sp, #4]
   d5e0e:	bd08      	pop	{r3, pc}
   d5e10:	0003023c 	.word	0x0003023c

000d5e14 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5e14:	b508      	push	{r3, lr}
   d5e16:	4b02      	ldr	r3, [pc, #8]	; (d5e20 <hal_usart_peek+0xc>)
   d5e18:	681b      	ldr	r3, [r3, #0]
   d5e1a:	699b      	ldr	r3, [r3, #24]
   d5e1c:	9301      	str	r3, [sp, #4]
   d5e1e:	bd08      	pop	{r3, pc}
   d5e20:	0003023c 	.word	0x0003023c

000d5e24 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5e24:	b508      	push	{r3, lr}
   d5e26:	4b02      	ldr	r3, [pc, #8]	; (d5e30 <hal_usart_flush+0xc>)
   d5e28:	681b      	ldr	r3, [r3, #0]
   d5e2a:	69db      	ldr	r3, [r3, #28]
   d5e2c:	9301      	str	r3, [sp, #4]
   d5e2e:	bd08      	pop	{r3, pc}
   d5e30:	0003023c 	.word	0x0003023c

000d5e34 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5e34:	b508      	push	{r3, lr}
   d5e36:	4b02      	ldr	r3, [pc, #8]	; (d5e40 <hal_usart_is_enabled+0xc>)
   d5e38:	681b      	ldr	r3, [r3, #0]
   d5e3a:	6a1b      	ldr	r3, [r3, #32]
   d5e3c:	9301      	str	r3, [sp, #4]
   d5e3e:	bd08      	pop	{r3, pc}
   d5e40:	0003023c 	.word	0x0003023c

000d5e44 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5e44:	b508      	push	{r3, lr}
   d5e46:	4b02      	ldr	r3, [pc, #8]	; (d5e50 <hal_usart_available_data_for_write+0xc>)
   d5e48:	681b      	ldr	r3, [r3, #0]
   d5e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e4c:	9301      	str	r3, [sp, #4]
   d5e4e:	bd08      	pop	{r3, pc}
   d5e50:	0003023c 	.word	0x0003023c

000d5e54 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5e54:	b508      	push	{r3, lr}
   d5e56:	4b02      	ldr	r3, [pc, #8]	; (d5e60 <hal_i2c_begin+0xc>)
   d5e58:	681b      	ldr	r3, [r3, #0]
   d5e5a:	68db      	ldr	r3, [r3, #12]
   d5e5c:	9301      	str	r3, [sp, #4]
   d5e5e:	bd08      	pop	{r3, pc}
   d5e60:	00030228 	.word	0x00030228

000d5e64 <hal_i2c_end>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
   d5e64:	b508      	push	{r3, lr}
   d5e66:	4b02      	ldr	r3, [pc, #8]	; (d5e70 <hal_i2c_end+0xc>)
   d5e68:	681b      	ldr	r3, [r3, #0]
   d5e6a:	691b      	ldr	r3, [r3, #16]
   d5e6c:	9301      	str	r3, [sp, #4]
   d5e6e:	bd08      	pop	{r3, pc}
   d5e70:	00030228 	.word	0x00030228

000d5e74 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5e74:	b508      	push	{r3, lr}
   d5e76:	4b02      	ldr	r3, [pc, #8]	; (d5e80 <hal_i2c_begin_transmission+0xc>)
   d5e78:	681b      	ldr	r3, [r3, #0]
   d5e7a:	699b      	ldr	r3, [r3, #24]
   d5e7c:	9301      	str	r3, [sp, #4]
   d5e7e:	bd08      	pop	{r3, pc}
   d5e80:	00030228 	.word	0x00030228

000d5e84 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5e84:	b508      	push	{r3, lr}
   d5e86:	4b02      	ldr	r3, [pc, #8]	; (d5e90 <hal_i2c_end_transmission+0xc>)
   d5e88:	681b      	ldr	r3, [r3, #0]
   d5e8a:	69db      	ldr	r3, [r3, #28]
   d5e8c:	9301      	str	r3, [sp, #4]
   d5e8e:	bd08      	pop	{r3, pc}
   d5e90:	00030228 	.word	0x00030228

000d5e94 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5e94:	b508      	push	{r3, lr}
   d5e96:	4b02      	ldr	r3, [pc, #8]	; (d5ea0 <hal_i2c_write+0xc>)
   d5e98:	681b      	ldr	r3, [r3, #0]
   d5e9a:	6a1b      	ldr	r3, [r3, #32]
   d5e9c:	9301      	str	r3, [sp, #4]
   d5e9e:	bd08      	pop	{r3, pc}
   d5ea0:	00030228 	.word	0x00030228

000d5ea4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5ea4:	b508      	push	{r3, lr}
   d5ea6:	4b02      	ldr	r3, [pc, #8]	; (d5eb0 <hal_i2c_available+0xc>)
   d5ea8:	681b      	ldr	r3, [r3, #0]
   d5eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5eac:	9301      	str	r3, [sp, #4]
   d5eae:	bd08      	pop	{r3, pc}
   d5eb0:	00030228 	.word	0x00030228

000d5eb4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5eb4:	b508      	push	{r3, lr}
   d5eb6:	4b02      	ldr	r3, [pc, #8]	; (d5ec0 <hal_i2c_read+0xc>)
   d5eb8:	681b      	ldr	r3, [r3, #0]
   d5eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5ebc:	9301      	str	r3, [sp, #4]
   d5ebe:	bd08      	pop	{r3, pc}
   d5ec0:	00030228 	.word	0x00030228

000d5ec4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5ec4:	b508      	push	{r3, lr}
   d5ec6:	4b02      	ldr	r3, [pc, #8]	; (d5ed0 <hal_i2c_peek+0xc>)
   d5ec8:	681b      	ldr	r3, [r3, #0]
   d5eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ecc:	9301      	str	r3, [sp, #4]
   d5ece:	bd08      	pop	{r3, pc}
   d5ed0:	00030228 	.word	0x00030228

000d5ed4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5ed4:	b508      	push	{r3, lr}
   d5ed6:	4b02      	ldr	r3, [pc, #8]	; (d5ee0 <hal_i2c_flush+0xc>)
   d5ed8:	681b      	ldr	r3, [r3, #0]
   d5eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5edc:	9301      	str	r3, [sp, #4]
   d5ede:	bd08      	pop	{r3, pc}
   d5ee0:	00030228 	.word	0x00030228

000d5ee4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5ee4:	b508      	push	{r3, lr}
   d5ee6:	4b02      	ldr	r3, [pc, #8]	; (d5ef0 <hal_i2c_is_enabled+0xc>)
   d5ee8:	681b      	ldr	r3, [r3, #0]
   d5eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5eec:	9301      	str	r3, [sp, #4]
   d5eee:	bd08      	pop	{r3, pc}
   d5ef0:	00030228 	.word	0x00030228

000d5ef4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5ef4:	b508      	push	{r3, lr}
   d5ef6:	4b02      	ldr	r3, [pc, #8]	; (d5f00 <hal_i2c_init+0xc>)
   d5ef8:	681b      	ldr	r3, [r3, #0]
   d5efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5efc:	9301      	str	r3, [sp, #4]
   d5efe:	bd08      	pop	{r3, pc}
   d5f00:	00030228 	.word	0x00030228

000d5f04 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5f04:	b508      	push	{r3, lr}
   d5f06:	4b02      	ldr	r3, [pc, #8]	; (d5f10 <hal_i2c_request_ex+0xc>)
   d5f08:	681b      	ldr	r3, [r3, #0]
   d5f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5f0c:	9301      	str	r3, [sp, #4]
   d5f0e:	bd08      	pop	{r3, pc}
   d5f10:	00030228 	.word	0x00030228

000d5f14 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5f14:	b508      	push	{r3, lr}
   d5f16:	4b02      	ldr	r3, [pc, #8]	; (d5f20 <sock_setsockopt+0xc>)
   d5f18:	681b      	ldr	r3, [r3, #0]
   d5f1a:	699b      	ldr	r3, [r3, #24]
   d5f1c:	9301      	str	r3, [sp, #4]
   d5f1e:	bd08      	pop	{r3, pc}
   d5f20:	00030238 	.word	0x00030238

000d5f24 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5f24:	b508      	push	{r3, lr}
   d5f26:	4b02      	ldr	r3, [pc, #8]	; (d5f30 <sock_close+0xc>)
   d5f28:	681b      	ldr	r3, [r3, #0]
   d5f2a:	69db      	ldr	r3, [r3, #28]
   d5f2c:	9301      	str	r3, [sp, #4]
   d5f2e:	bd08      	pop	{r3, pc}
   d5f30:	00030238 	.word	0x00030238

000d5f34 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5f34:	b508      	push	{r3, lr}
   d5f36:	4b02      	ldr	r3, [pc, #8]	; (d5f40 <sock_connect+0xc>)
   d5f38:	681b      	ldr	r3, [r3, #0]
   d5f3a:	6a1b      	ldr	r3, [r3, #32]
   d5f3c:	9301      	str	r3, [sp, #4]
   d5f3e:	bd08      	pop	{r3, pc}
   d5f40:	00030238 	.word	0x00030238

000d5f44 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5f44:	b508      	push	{r3, lr}
   d5f46:	4b02      	ldr	r3, [pc, #8]	; (d5f50 <sock_recv+0xc>)
   d5f48:	681b      	ldr	r3, [r3, #0]
   d5f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5f4c:	9301      	str	r3, [sp, #4]
   d5f4e:	bd08      	pop	{r3, pc}
   d5f50:	00030238 	.word	0x00030238

000d5f54 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5f54:	b508      	push	{r3, lr}
   d5f56:	4b02      	ldr	r3, [pc, #8]	; (d5f60 <sock_send+0xc>)
   d5f58:	681b      	ldr	r3, [r3, #0]
   d5f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5f5c:	9301      	str	r3, [sp, #4]
   d5f5e:	bd08      	pop	{r3, pc}
   d5f60:	00030238 	.word	0x00030238

000d5f64 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5f64:	b508      	push	{r3, lr}
   d5f66:	4b02      	ldr	r3, [pc, #8]	; (d5f70 <sock_socket+0xc>)
   d5f68:	681b      	ldr	r3, [r3, #0]
   d5f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5f6c:	9301      	str	r3, [sp, #4]
   d5f6e:	bd08      	pop	{r3, pc}
   d5f70:	00030238 	.word	0x00030238

000d5f74 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5f74:	b508      	push	{r3, lr}
   d5f76:	4b02      	ldr	r3, [pc, #8]	; (d5f80 <hal_spi_begin+0xc>)
   d5f78:	681b      	ldr	r3, [r3, #0]
   d5f7a:	681b      	ldr	r3, [r3, #0]
   d5f7c:	9301      	str	r3, [sp, #4]
   d5f7e:	bd08      	pop	{r3, pc}
   d5f80:	00030230 	.word	0x00030230

000d5f84 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d5f84:	b508      	push	{r3, lr}
   d5f86:	4b02      	ldr	r3, [pc, #8]	; (d5f90 <hal_spi_set_bit_order+0xc>)
   d5f88:	681b      	ldr	r3, [r3, #0]
   d5f8a:	689b      	ldr	r3, [r3, #8]
   d5f8c:	9301      	str	r3, [sp, #4]
   d5f8e:	bd08      	pop	{r3, pc}
   d5f90:	00030230 	.word	0x00030230

000d5f94 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d5f94:	b508      	push	{r3, lr}
   d5f96:	4b02      	ldr	r3, [pc, #8]	; (d5fa0 <hal_spi_set_data_mode+0xc>)
   d5f98:	681b      	ldr	r3, [r3, #0]
   d5f9a:	68db      	ldr	r3, [r3, #12]
   d5f9c:	9301      	str	r3, [sp, #4]
   d5f9e:	bd08      	pop	{r3, pc}
   d5fa0:	00030230 	.word	0x00030230

000d5fa4 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d5fa4:	b508      	push	{r3, lr}
   d5fa6:	4b02      	ldr	r3, [pc, #8]	; (d5fb0 <hal_spi_set_clock_divider+0xc>)
   d5fa8:	681b      	ldr	r3, [r3, #0]
   d5faa:	691b      	ldr	r3, [r3, #16]
   d5fac:	9301      	str	r3, [sp, #4]
   d5fae:	bd08      	pop	{r3, pc}
   d5fb0:	00030230 	.word	0x00030230

000d5fb4 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5fb4:	b508      	push	{r3, lr}
   d5fb6:	4b02      	ldr	r3, [pc, #8]	; (d5fc0 <hal_spi_transfer+0xc>)
   d5fb8:	681b      	ldr	r3, [r3, #0]
   d5fba:	695b      	ldr	r3, [r3, #20]
   d5fbc:	9301      	str	r3, [sp, #4]
   d5fbe:	bd08      	pop	{r3, pc}
   d5fc0:	00030230 	.word	0x00030230

000d5fc4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5fc4:	b508      	push	{r3, lr}
   d5fc6:	4b02      	ldr	r3, [pc, #8]	; (d5fd0 <hal_spi_init+0xc>)
   d5fc8:	681b      	ldr	r3, [r3, #0]
   d5fca:	69db      	ldr	r3, [r3, #28]
   d5fcc:	9301      	str	r3, [sp, #4]
   d5fce:	bd08      	pop	{r3, pc}
   d5fd0:	00030230 	.word	0x00030230

000d5fd4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5fd4:	b508      	push	{r3, lr}
   d5fd6:	4b02      	ldr	r3, [pc, #8]	; (d5fe0 <hal_spi_is_enabled+0xc>)
   d5fd8:	681b      	ldr	r3, [r3, #0]
   d5fda:	6a1b      	ldr	r3, [r3, #32]
   d5fdc:	9301      	str	r3, [sp, #4]
   d5fde:	bd08      	pop	{r3, pc}
   d5fe0:	00030230 	.word	0x00030230

000d5fe4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5fe4:	b508      	push	{r3, lr}
   d5fe6:	4b02      	ldr	r3, [pc, #8]	; (d5ff0 <hal_spi_info+0xc>)
   d5fe8:	681b      	ldr	r3, [r3, #0]
   d5fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5fec:	9301      	str	r3, [sp, #4]
   d5fee:	bd08      	pop	{r3, pc}
   d5ff0:	00030230 	.word	0x00030230

000d5ff4 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5ff4:	b508      	push	{r3, lr}
   d5ff6:	4b02      	ldr	r3, [pc, #8]	; (d6000 <hal_spi_acquire+0xc>)
   d5ff8:	681b      	ldr	r3, [r3, #0]
   d5ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5ffc:	9301      	str	r3, [sp, #4]
   d5ffe:	bd08      	pop	{r3, pc}
   d6000:	00030230 	.word	0x00030230

000d6004 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d6004:	b508      	push	{r3, lr}
   d6006:	4b02      	ldr	r3, [pc, #8]	; (d6010 <hal_spi_release+0xc>)
   d6008:	681b      	ldr	r3, [r3, #0]
   d600a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d600c:	9301      	str	r3, [sp, #4]
   d600e:	bd08      	pop	{r3, pc}
   d6010:	00030230 	.word	0x00030230

000d6014 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6014:	b508      	push	{r3, lr}
   d6016:	4b02      	ldr	r3, [pc, #8]	; (d6020 <HAL_USB_USART_Init+0xc>)
   d6018:	681b      	ldr	r3, [r3, #0]
   d601a:	681b      	ldr	r3, [r3, #0]
   d601c:	9301      	str	r3, [sp, #4]
   d601e:	bd08      	pop	{r3, pc}
   d6020:	0003024c 	.word	0x0003024c

000d6024 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6024:	b508      	push	{r3, lr}
   d6026:	4b02      	ldr	r3, [pc, #8]	; (d6030 <HAL_USB_USART_Begin+0xc>)
   d6028:	681b      	ldr	r3, [r3, #0]
   d602a:	685b      	ldr	r3, [r3, #4]
   d602c:	9301      	str	r3, [sp, #4]
   d602e:	bd08      	pop	{r3, pc}
   d6030:	0003024c 	.word	0x0003024c

000d6034 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6034:	b508      	push	{r3, lr}
   d6036:	4b02      	ldr	r3, [pc, #8]	; (d6040 <HAL_USB_USART_Available_Data+0xc>)
   d6038:	681b      	ldr	r3, [r3, #0]
   d603a:	691b      	ldr	r3, [r3, #16]
   d603c:	9301      	str	r3, [sp, #4]
   d603e:	bd08      	pop	{r3, pc}
   d6040:	0003024c 	.word	0x0003024c

000d6044 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6044:	b508      	push	{r3, lr}
   d6046:	4b02      	ldr	r3, [pc, #8]	; (d6050 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6048:	681b      	ldr	r3, [r3, #0]
   d604a:	695b      	ldr	r3, [r3, #20]
   d604c:	9301      	str	r3, [sp, #4]
   d604e:	bd08      	pop	{r3, pc}
   d6050:	0003024c 	.word	0x0003024c

000d6054 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6054:	b508      	push	{r3, lr}
   d6056:	4b02      	ldr	r3, [pc, #8]	; (d6060 <HAL_USB_USART_Receive_Data+0xc>)
   d6058:	681b      	ldr	r3, [r3, #0]
   d605a:	699b      	ldr	r3, [r3, #24]
   d605c:	9301      	str	r3, [sp, #4]
   d605e:	bd08      	pop	{r3, pc}
   d6060:	0003024c 	.word	0x0003024c

000d6064 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6064:	b508      	push	{r3, lr}
   d6066:	4b02      	ldr	r3, [pc, #8]	; (d6070 <HAL_USB_USART_Send_Data+0xc>)
   d6068:	681b      	ldr	r3, [r3, #0]
   d606a:	69db      	ldr	r3, [r3, #28]
   d606c:	9301      	str	r3, [sp, #4]
   d606e:	bd08      	pop	{r3, pc}
   d6070:	0003024c 	.word	0x0003024c

000d6074 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6074:	b508      	push	{r3, lr}
   d6076:	4b02      	ldr	r3, [pc, #8]	; (d6080 <HAL_USB_USART_Flush_Data+0xc>)
   d6078:	681b      	ldr	r3, [r3, #0]
   d607a:	6a1b      	ldr	r3, [r3, #32]
   d607c:	9301      	str	r3, [sp, #4]
   d607e:	bd08      	pop	{r3, pc}
   d6080:	0003024c 	.word	0x0003024c

000d6084 <wlan_get_credentials>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
   d6084:	b508      	push	{r3, lr}
   d6086:	4b02      	ldr	r3, [pc, #8]	; (d6090 <wlan_get_credentials+0xc>)
   d6088:	681b      	ldr	r3, [r3, #0]
   d608a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d608c:	9301      	str	r3, [sp, #4]
   d608e:	bd08      	pop	{r3, pc}
   d6090:	00030274 	.word	0x00030274

000d6094 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6094:	b508      	push	{r3, lr}
   d6096:	4b02      	ldr	r3, [pc, #8]	; (d60a0 <panic_+0xc>)
   d6098:	681b      	ldr	r3, [r3, #0]
   d609a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d609c:	9301      	str	r3, [sp, #4]
   d609e:	bd08      	pop	{r3, pc}
   d60a0:	00030260 	.word	0x00030260

000d60a4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d60a4:	b508      	push	{r3, lr}
   d60a6:	4b02      	ldr	r3, [pc, #8]	; (d60b0 <log_message+0xc>)
   d60a8:	681b      	ldr	r3, [r3, #0]
   d60aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d60ac:	9301      	str	r3, [sp, #4]
   d60ae:	bd08      	pop	{r3, pc}
   d60b0:	00030260 	.word	0x00030260

000d60b4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d60b4:	b508      	push	{r3, lr}
   d60b6:	4b02      	ldr	r3, [pc, #8]	; (d60c0 <system_mode+0xc>)
   d60b8:	681b      	ldr	r3, [r3, #0]
   d60ba:	681b      	ldr	r3, [r3, #0]
   d60bc:	9301      	str	r3, [sp, #4]
   d60be:	bd08      	pop	{r3, pc}
   d60c0:	00030220 	.word	0x00030220

000d60c4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d60c4:	b508      	push	{r3, lr}
   d60c6:	4b02      	ldr	r3, [pc, #8]	; (d60d0 <set_system_mode+0xc>)
   d60c8:	681b      	ldr	r3, [r3, #0]
   d60ca:	685b      	ldr	r3, [r3, #4]
   d60cc:	9301      	str	r3, [sp, #4]
   d60ce:	bd08      	pop	{r3, pc}
   d60d0:	00030220 	.word	0x00030220

000d60d4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d60d4:	b508      	push	{r3, lr}
   d60d6:	4b02      	ldr	r3, [pc, #8]	; (d60e0 <system_delay_ms+0xc>)
   d60d8:	681b      	ldr	r3, [r3, #0]
   d60da:	695b      	ldr	r3, [r3, #20]
   d60dc:	9301      	str	r3, [sp, #4]
   d60de:	bd08      	pop	{r3, pc}
   d60e0:	00030220 	.word	0x00030220

000d60e4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d60e4:	b508      	push	{r3, lr}
   d60e6:	4b02      	ldr	r3, [pc, #8]	; (d60f0 <system_thread_get_state+0xc>)
   d60e8:	681b      	ldr	r3, [r3, #0]
   d60ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d60ec:	9301      	str	r3, [sp, #4]
   d60ee:	bd08      	pop	{r3, pc}
   d60f0:	00030220 	.word	0x00030220

000d60f4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d60f4:	b508      	push	{r3, lr}
   d60f6:	4b03      	ldr	r3, [pc, #12]	; (d6104 <system_ctrl_set_app_request_handler+0x10>)
   d60f8:	681b      	ldr	r3, [r3, #0]
   d60fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d60fe:	9301      	str	r3, [sp, #4]
   d6100:	bd08      	pop	{r3, pc}
   d6102:	0000      	.short	0x0000
   d6104:	00030220 	.word	0x00030220

000d6108 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6108:	b508      	push	{r3, lr}
   d610a:	4b03      	ldr	r3, [pc, #12]	; (d6118 <system_ctrl_set_result+0x10>)
   d610c:	681b      	ldr	r3, [r3, #0]
   d610e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6112:	9301      	str	r3, [sp, #4]
   d6114:	bd08      	pop	{r3, pc}
   d6116:	0000      	.short	0x0000
   d6118:	00030220 	.word	0x00030220

000d611c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d611c:	b508      	push	{r3, lr}
   d611e:	4b03      	ldr	r3, [pc, #12]	; (d612c <system_sleep_ext+0x10>)
   d6120:	681b      	ldr	r3, [r3, #0]
   d6122:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d6126:	9301      	str	r3, [sp, #4]
   d6128:	bd08      	pop	{r3, pc}
   d612a:	0000      	.short	0x0000
   d612c:	00030220 	.word	0x00030220

000d6130 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6130:	b508      	push	{r3, lr}
   d6132:	4b02      	ldr	r3, [pc, #8]	; (d613c <network_connect+0xc>)
   d6134:	681b      	ldr	r3, [r3, #0]
   d6136:	685b      	ldr	r3, [r3, #4]
   d6138:	9301      	str	r3, [sp, #4]
   d613a:	bd08      	pop	{r3, pc}
   d613c:	00030240 	.word	0x00030240

000d6140 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6140:	b508      	push	{r3, lr}
   d6142:	4b02      	ldr	r3, [pc, #8]	; (d614c <network_connecting+0xc>)
   d6144:	681b      	ldr	r3, [r3, #0]
   d6146:	689b      	ldr	r3, [r3, #8]
   d6148:	9301      	str	r3, [sp, #4]
   d614a:	bd08      	pop	{r3, pc}
   d614c:	00030240 	.word	0x00030240

000d6150 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6150:	b508      	push	{r3, lr}
   d6152:	4b02      	ldr	r3, [pc, #8]	; (d615c <network_disconnect+0xc>)
   d6154:	681b      	ldr	r3, [r3, #0]
   d6156:	68db      	ldr	r3, [r3, #12]
   d6158:	9301      	str	r3, [sp, #4]
   d615a:	bd08      	pop	{r3, pc}
   d615c:	00030240 	.word	0x00030240

000d6160 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6160:	b508      	push	{r3, lr}
   d6162:	4b02      	ldr	r3, [pc, #8]	; (d616c <network_ready+0xc>)
   d6164:	681b      	ldr	r3, [r3, #0]
   d6166:	691b      	ldr	r3, [r3, #16]
   d6168:	9301      	str	r3, [sp, #4]
   d616a:	bd08      	pop	{r3, pc}
   d616c:	00030240 	.word	0x00030240

000d6170 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6170:	b508      	push	{r3, lr}
   d6172:	4b02      	ldr	r3, [pc, #8]	; (d617c <network_on+0xc>)
   d6174:	681b      	ldr	r3, [r3, #0]
   d6176:	695b      	ldr	r3, [r3, #20]
   d6178:	9301      	str	r3, [sp, #4]
   d617a:	bd08      	pop	{r3, pc}
   d617c:	00030240 	.word	0x00030240

000d6180 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6180:	b508      	push	{r3, lr}
   d6182:	4b02      	ldr	r3, [pc, #8]	; (d618c <network_off+0xc>)
   d6184:	681b      	ldr	r3, [r3, #0]
   d6186:	699b      	ldr	r3, [r3, #24]
   d6188:	9301      	str	r3, [sp, #4]
   d618a:	bd08      	pop	{r3, pc}
   d618c:	00030240 	.word	0x00030240

000d6190 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6190:	b508      	push	{r3, lr}
   d6192:	4b02      	ldr	r3, [pc, #8]	; (d619c <network_listen+0xc>)
   d6194:	681b      	ldr	r3, [r3, #0]
   d6196:	69db      	ldr	r3, [r3, #28]
   d6198:	9301      	str	r3, [sp, #4]
   d619a:	bd08      	pop	{r3, pc}
   d619c:	00030240 	.word	0x00030240

000d61a0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d61a0:	b508      	push	{r3, lr}
   d61a2:	4b02      	ldr	r3, [pc, #8]	; (d61ac <network_listening+0xc>)
   d61a4:	681b      	ldr	r3, [r3, #0]
   d61a6:	6a1b      	ldr	r3, [r3, #32]
   d61a8:	9301      	str	r3, [sp, #4]
   d61aa:	bd08      	pop	{r3, pc}
   d61ac:	00030240 	.word	0x00030240

000d61b0 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   d61b0:	b508      	push	{r3, lr}
   d61b2:	4b02      	ldr	r3, [pc, #8]	; (d61bc <network_has_credentials+0xc>)
   d61b4:	681b      	ldr	r3, [r3, #0]
   d61b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d61b8:	9301      	str	r3, [sp, #4]
   d61ba:	bd08      	pop	{r3, pc}
   d61bc:	00030240 	.word	0x00030240

000d61c0 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d61c0:	b508      	push	{r3, lr}
   d61c2:	4b02      	ldr	r3, [pc, #8]	; (d61cc <network_set_credentials+0xc>)
   d61c4:	681b      	ldr	r3, [r3, #0]
   d61c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d61c8:	9301      	str	r3, [sp, #4]
   d61ca:	bd08      	pop	{r3, pc}
   d61cc:	00030240 	.word	0x00030240

000d61d0 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d61d0:	b508      	push	{r3, lr}
   d61d2:	4b02      	ldr	r3, [pc, #8]	; (d61dc <network_clear_credentials+0xc>)
   d61d4:	681b      	ldr	r3, [r3, #0]
   d61d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d61d8:	9301      	str	r3, [sp, #4]
   d61da:	bd08      	pop	{r3, pc}
   d61dc:	00030240 	.word	0x00030240

000d61e0 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d61e0:	b508      	push	{r3, lr}
   d61e2:	4b02      	ldr	r3, [pc, #8]	; (d61ec <network_set_listen_timeout+0xc>)
   d61e4:	681b      	ldr	r3, [r3, #0]
   d61e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d61e8:	9301      	str	r3, [sp, #4]
   d61ea:	bd08      	pop	{r3, pc}
   d61ec:	00030240 	.word	0x00030240

000d61f0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d61f0:	b508      	push	{r3, lr}
   d61f2:	4b02      	ldr	r3, [pc, #8]	; (d61fc <network_get_listen_timeout+0xc>)
   d61f4:	681b      	ldr	r3, [r3, #0]
   d61f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d61f8:	9301      	str	r3, [sp, #4]
   d61fa:	bd08      	pop	{r3, pc}
   d61fc:	00030240 	.word	0x00030240

000d6200 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d6200:	b508      	push	{r3, lr}
   d6202:	4b02      	ldr	r3, [pc, #8]	; (d620c <network_is_on+0xc>)
   d6204:	681b      	ldr	r3, [r3, #0]
   d6206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6208:	9301      	str	r3, [sp, #4]
   d620a:	bd08      	pop	{r3, pc}
   d620c:	00030240 	.word	0x00030240

000d6210 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d6210:	b508      	push	{r3, lr}
   d6212:	4b02      	ldr	r3, [pc, #8]	; (d621c <network_is_off+0xc>)
   d6214:	681b      	ldr	r3, [r3, #0]
   d6216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6218:	9301      	str	r3, [sp, #4]
   d621a:	bd08      	pop	{r3, pc}
   d621c:	00030240 	.word	0x00030240

000d6220 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6220:	b508      	push	{r3, lr}
   d6222:	4b02      	ldr	r3, [pc, #8]	; (d622c <spark_process+0xc>)
   d6224:	681b      	ldr	r3, [r3, #0]
   d6226:	689b      	ldr	r3, [r3, #8]
   d6228:	9301      	str	r3, [sp, #4]
   d622a:	bd08      	pop	{r3, pc}
   d622c:	00030244 	.word	0x00030244

000d6230 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d6230:	b508      	push	{r3, lr}
   d6232:	4b02      	ldr	r3, [pc, #8]	; (d623c <spark_cloud_flag_connect+0xc>)
   d6234:	681b      	ldr	r3, [r3, #0]
   d6236:	68db      	ldr	r3, [r3, #12]
   d6238:	9301      	str	r3, [sp, #4]
   d623a:	bd08      	pop	{r3, pc}
   d623c:	00030244 	.word	0x00030244

000d6240 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6240:	b508      	push	{r3, lr}
   d6242:	4b02      	ldr	r3, [pc, #8]	; (d624c <spark_cloud_flag_connected+0xc>)
   d6244:	681b      	ldr	r3, [r3, #0]
   d6246:	695b      	ldr	r3, [r3, #20]
   d6248:	9301      	str	r3, [sp, #4]
   d624a:	bd08      	pop	{r3, pc}
   d624c:	00030244 	.word	0x00030244

000d6250 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6250:	b508      	push	{r3, lr}
   d6252:	4b02      	ldr	r3, [pc, #8]	; (d625c <spark_sync_time_pending+0xc>)
   d6254:	681b      	ldr	r3, [r3, #0]
   d6256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6258:	9301      	str	r3, [sp, #4]
   d625a:	bd08      	pop	{r3, pc}
   d625c:	00030244 	.word	0x00030244

000d6260 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6260:	b508      	push	{r3, lr}
   d6262:	4b02      	ldr	r3, [pc, #8]	; (d626c <spark_set_random_seed_from_cloud_handler+0xc>)
   d6264:	681b      	ldr	r3, [r3, #0]
   d6266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6268:	9301      	str	r3, [sp, #4]
   d626a:	bd08      	pop	{r3, pc}
   d626c:	00030244 	.word	0x00030244

000d6270 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d6270:	b508      	push	{r3, lr}
   d6272:	4b02      	ldr	r3, [pc, #8]	; (d627c <spark_cloud_disconnect+0xc>)
   d6274:	681b      	ldr	r3, [r3, #0]
   d6276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6278:	9301      	str	r3, [sp, #4]
   d627a:	bd08      	pop	{r3, pc}
   d627c:	00030244 	.word	0x00030244

000d6280 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6280:	b508      	push	{r3, lr}
   d6282:	4b02      	ldr	r3, [pc, #8]	; (d628c <malloc+0xc>)
   d6284:	681b      	ldr	r3, [r3, #0]
   d6286:	681b      	ldr	r3, [r3, #0]
   d6288:	9301      	str	r3, [sp, #4]
   d628a:	bd08      	pop	{r3, pc}
   d628c:	0003021c 	.word	0x0003021c

000d6290 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6290:	b508      	push	{r3, lr}
   d6292:	4b02      	ldr	r3, [pc, #8]	; (d629c <free+0xc>)
   d6294:	681b      	ldr	r3, [r3, #0]
   d6296:	685b      	ldr	r3, [r3, #4]
   d6298:	9301      	str	r3, [sp, #4]
   d629a:	bd08      	pop	{r3, pc}
   d629c:	0003021c 	.word	0x0003021c

000d62a0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d62a0:	b508      	push	{r3, lr}
   d62a2:	4b02      	ldr	r3, [pc, #8]	; (d62ac <realloc+0xc>)
   d62a4:	681b      	ldr	r3, [r3, #0]
   d62a6:	689b      	ldr	r3, [r3, #8]
   d62a8:	9301      	str	r3, [sp, #4]
   d62aa:	bd08      	pop	{r3, pc}
   d62ac:	0003021c 	.word	0x0003021c

000d62b0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d62b0:	b508      	push	{r3, lr}
   d62b2:	4b02      	ldr	r3, [pc, #8]	; (d62bc <abort+0xc>)
   d62b4:	681b      	ldr	r3, [r3, #0]
   d62b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d62b8:	9301      	str	r3, [sp, #4]
   d62ba:	bd08      	pop	{r3, pc}
   d62bc:	0003021c 	.word	0x0003021c

000d62c0 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d62c0:	b508      	push	{r3, lr}
   d62c2:	4b02      	ldr	r3, [pc, #8]	; (d62cc <__errno+0xc>)
   d62c4:	681b      	ldr	r3, [r3, #0]
   d62c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d62c8:	9301      	str	r3, [sp, #4]
   d62ca:	bd08      	pop	{r3, pc}
   d62cc:	0003021c 	.word	0x0003021c

000d62d0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d62d0:	b508      	push	{r3, lr}
   d62d2:	4b02      	ldr	r3, [pc, #8]	; (d62dc <newlib_impure_ptr_callback+0xc>)
   d62d4:	681b      	ldr	r3, [r3, #0]
   d62d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d62d8:	9301      	str	r3, [sp, #4]
   d62da:	bd08      	pop	{r3, pc}
   d62dc:	0003021c 	.word	0x0003021c

000d62e0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d62e0:	2200      	movs	r2, #0
   d62e2:	6840      	ldr	r0, [r0, #4]
   d62e4:	4611      	mov	r1, r2
   d62e6:	f7ff bf5b 	b.w	d61a0 <network_listening>

000d62ea <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d62ea:	2200      	movs	r2, #0
   d62ec:	6840      	ldr	r0, [r0, #4]
   d62ee:	4611      	mov	r1, r2
   d62f0:	f7ff bf7e 	b.w	d61f0 <network_get_listen_timeout>

000d62f4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d62f4:	6840      	ldr	r0, [r0, #4]
   d62f6:	2200      	movs	r2, #0
   d62f8:	f7ff bf72 	b.w	d61e0 <network_set_listen_timeout>

000d62fc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d62fc:	6840      	ldr	r0, [r0, #4]
   d62fe:	2200      	movs	r2, #0
   d6300:	f081 0101 	eor.w	r1, r1, #1
   d6304:	f7ff bf44 	b.w	d6190 <network_listen>

000d6308 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6308:	2300      	movs	r3, #0
   d630a:	6840      	ldr	r0, [r0, #4]
   d630c:	461a      	mov	r2, r3
   d630e:	4619      	mov	r1, r3
   d6310:	f7ff bf36 	b.w	d6180 <network_off>

000d6314 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6314:	2300      	movs	r3, #0
   d6316:	6840      	ldr	r0, [r0, #4]
   d6318:	461a      	mov	r2, r3
   d631a:	4619      	mov	r1, r3
   d631c:	f7ff bf28 	b.w	d6170 <network_on>

000d6320 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6320:	2200      	movs	r2, #0
   d6322:	6840      	ldr	r0, [r0, #4]
   d6324:	4611      	mov	r1, r2
   d6326:	f7ff bf1b 	b.w	d6160 <network_ready>

000d632a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d632a:	2200      	movs	r2, #0
   d632c:	6840      	ldr	r0, [r0, #4]
   d632e:	4611      	mov	r1, r2
   d6330:	f7ff bf06 	b.w	d6140 <network_connecting>

000d6334 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6334:	6840      	ldr	r0, [r0, #4]
   d6336:	2200      	movs	r2, #0
   d6338:	2102      	movs	r1, #2
   d633a:	f7ff bf09 	b.w	d6150 <network_disconnect>

000d633e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d633e:	2300      	movs	r3, #0
   d6340:	6840      	ldr	r0, [r0, #4]
   d6342:	461a      	mov	r2, r3
   d6344:	f7ff bef4 	b.w	d6130 <network_connect>

000d6348 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6348:	4b02      	ldr	r3, [pc, #8]	; (d6354 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d634a:	2203      	movs	r2, #3
   d634c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d634e:	4a02      	ldr	r2, [pc, #8]	; (d6358 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6350:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6352:	4770      	bx	lr
   d6354:	2003e63c 	.word	0x2003e63c
   d6358:	000da608 	.word	0x000da608

000d635c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d635c:	2100      	movs	r1, #0
   d635e:	f7ff be49 	b.w	d5ff4 <hal_spi_acquire>

000d6362 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d6362:	2100      	movs	r1, #0
   d6364:	f7ff be4e 	b.w	d6004 <hal_spi_release>

000d6368 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6368:	b510      	push	{r4, lr}
   d636a:	4604      	mov	r4, r0
   d636c:	4608      	mov	r0, r1
{
    _spi = spi;
   d636e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6370:	f7ff fe28 	bl	d5fc4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6374:	2300      	movs	r3, #0
   d6376:	6063      	str	r3, [r4, #4]
}
   d6378:	4620      	mov	r0, r4
   d637a:	bd10      	pop	{r4, pc}

000d637c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d637c:	b510      	push	{r4, lr}
   d637e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6380:	7800      	ldrb	r0, [r0, #0]
   d6382:	f7ff ffeb 	bl	d635c <_ZN8SPIClass4lockEv.isra.0>
   d6386:	b948      	cbnz	r0, d639c <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d6388:	7820      	ldrb	r0, [r4, #0]
   d638a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d638e:	f7ff fdf1 	bl	d5f74 <hal_spi_begin>
        unlock();
   d6392:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6398:	f7ff bfe3 	b.w	d6362 <_ZN8SPIClass6unlockEv.isra.0>
}
   d639c:	bd10      	pop	{r4, pc}

000d639e <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d639e:	b513      	push	{r0, r1, r4, lr}
   d63a0:	4604      	mov	r4, r0
    if (!lock())
   d63a2:	7800      	ldrb	r0, [r0, #0]
{
   d63a4:	9101      	str	r1, [sp, #4]
    if (!lock())
   d63a6:	f7ff ffd9 	bl	d635c <_ZN8SPIClass4lockEv.isra.0>
   d63aa:	9901      	ldr	r1, [sp, #4]
   d63ac:	b940      	cbnz	r0, d63c0 <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d63ae:	7820      	ldrb	r0, [r4, #0]
   d63b0:	f7ff fde8 	bl	d5f84 <hal_spi_set_bit_order>
        unlock();
   d63b4:	7820      	ldrb	r0, [r4, #0]
    }
}
   d63b6:	b002      	add	sp, #8
   d63b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d63bc:	f7ff bfd1 	b.w	d6362 <_ZN8SPIClass6unlockEv.isra.0>
}
   d63c0:	b002      	add	sp, #8
   d63c2:	bd10      	pop	{r4, pc}

000d63c4 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d63c4:	b513      	push	{r0, r1, r4, lr}
   d63c6:	4604      	mov	r4, r0
    if (!lock())
   d63c8:	7800      	ldrb	r0, [r0, #0]
{
   d63ca:	9101      	str	r1, [sp, #4]
    if (!lock())
   d63cc:	f7ff ffc6 	bl	d635c <_ZN8SPIClass4lockEv.isra.0>
   d63d0:	9901      	ldr	r1, [sp, #4]
   d63d2:	b940      	cbnz	r0, d63e6 <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d63d4:	7820      	ldrb	r0, [r4, #0]
   d63d6:	f7ff fddd 	bl	d5f94 <hal_spi_set_data_mode>
        unlock();
   d63da:	7820      	ldrb	r0, [r4, #0]
    }
}
   d63dc:	b002      	add	sp, #8
   d63de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d63e2:	f7ff bfbe 	b.w	d6362 <_ZN8SPIClass6unlockEv.isra.0>
}
   d63e6:	b002      	add	sp, #8
   d63e8:	bd10      	pop	{r4, pc}
	...

000d63ec <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d63ec:	0840      	lsrs	r0, r0, #1
{
   d63ee:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d63f0:	6018      	str	r0, [r3, #0]
   d63f2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d63f4:	6818      	ldr	r0, [r3, #0]
   d63f6:	4288      	cmp	r0, r1
   d63f8:	b2e5      	uxtb	r5, r4
   d63fa:	d906      	bls.n	d640a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d63fc:	3401      	adds	r4, #1
   d63fe:	2c08      	cmp	r4, #8
   d6400:	d002      	beq.n	d6408 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6402:	0840      	lsrs	r0, r0, #1
   d6404:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d6406:	e7f5      	b.n	d63f4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6408:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d640a:	4b02      	ldr	r3, [pc, #8]	; (d6414 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d640c:	5d5b      	ldrb	r3, [r3, r5]
   d640e:	7013      	strb	r3, [r2, #0]
}
   d6410:	bd30      	pop	{r4, r5, pc}
   d6412:	bf00      	nop
   d6414:	000da63c 	.word	0x000da63c

000d6418 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d641c:	b088      	sub	sp, #32
    unsigned clock = 0;
   d641e:	2300      	movs	r3, #0
{
   d6420:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d6422:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d6424:	9302      	str	r3, [sp, #8]
{
   d6426:	460e      	mov	r6, r1
   d6428:	4617      	mov	r7, r2
    if (!lock())
   d642a:	f7ff ff97 	bl	d635c <_ZN8SPIClass4lockEv.isra.0>
   d642e:	4605      	mov	r5, r0
   d6430:	bb00      	cbnz	r0, d6474 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d6432:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d6436:	4601      	mov	r1, r0
   d6438:	2214      	movs	r2, #20
   d643a:	a803      	add	r0, sp, #12
   d643c:	f003 fce8 	bl	d9e10 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6440:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d6442:	462a      	mov	r2, r5
   d6444:	a903      	add	r1, sp, #12
   d6446:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d6448:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d644c:	f7ff fdca 	bl	d5fe4 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d6450:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d6452:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d6456:	ab02      	add	r3, sp, #8
   d6458:	f10d 0207 	add.w	r2, sp, #7
   d645c:	fb07 f106 	mul.w	r1, r7, r6
   d6460:	f7ff ffc4 	bl	d63ec <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d6464:	7820      	ldrb	r0, [r4, #0]
   d6466:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d646a:	f7ff fd9b 	bl	d5fa4 <hal_spi_set_clock_divider>
        unlock();
   d646e:	7820      	ldrb	r0, [r4, #0]
   d6470:	f7ff ff77 	bl	d6362 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d6474:	9802      	ldr	r0, [sp, #8]
   d6476:	b008      	add	sp, #32
   d6478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d647c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d647c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d647e:	7800      	ldrb	r0, [r0, #0]
   d6480:	f7ff fd98 	bl	d5fb4 <hal_spi_transfer>
}
   d6484:	b2c0      	uxtb	r0, r0
   d6486:	bd08      	pop	{r3, pc}

000d6488 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6488:	b510      	push	{r4, lr}
   d648a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d648c:	6800      	ldr	r0, [r0, #0]
   d648e:	b118      	cbz	r0, d6498 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d6490:	f7ff fefe 	bl	d6290 <free>
            wakeupSource_ = nullptr;
   d6494:	2300      	movs	r3, #0
   d6496:	6023      	str	r3, [r4, #0]
        }
    }
   d6498:	bd10      	pop	{r4, pc}

000d649a <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d649a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d649c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d64a0:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d64a2:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d64a4:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d64a6:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d64aa:	f8c0 2006 	str.w	r2, [r0, #6]
   d64ae:	889b      	ldrh	r3, [r3, #4]
   d64b0:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d64b2:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d64b4:	f7ff ffe8 	bl	d6488 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d64b8:	682b      	ldr	r3, [r5, #0]
   d64ba:	b113      	cbz	r3, d64c2 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d64bc:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d64be:	2300      	movs	r3, #0
   d64c0:	602b      	str	r3, [r5, #0]
    }
   d64c2:	4620      	mov	r0, r4
   d64c4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d64c8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d64c8:	b538      	push	{r3, r4, r5, lr}
   d64ca:	460c      	mov	r4, r1
   d64cc:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d64ce:	f7ff ffdb 	bl	d6488 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d64d2:	b144      	cbz	r4, d64e6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d64d4:	8820      	ldrh	r0, [r4, #0]
   d64d6:	f7ff fed3 	bl	d6280 <malloc>
   d64da:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d64dc:	b128      	cbz	r0, d64ea <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d64de:	8822      	ldrh	r2, [r4, #0]
   d64e0:	4621      	mov	r1, r4
   d64e2:	f003 fc6d 	bl	d9dc0 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d64e6:	2000      	movs	r0, #0
    }
   d64e8:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d64ea:	4801      	ldr	r0, [pc, #4]	; (d64f0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d64ec:	e7fc      	b.n	d64e8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d64ee:	bf00      	nop
   d64f0:	fffffefc 	.word	0xfffffefc

000d64f4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d64f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d64f6:	4d2d      	ldr	r5, [pc, #180]	; (d65ac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d64f8:	7d0b      	ldrb	r3, [r1, #20]
   d64fa:	4604      	mov	r4, r0
   d64fc:	b08b      	sub	sp, #44	; 0x2c
   d64fe:	4608      	mov	r0, r1
   d6500:	1daf      	adds	r7, r5, #6
   d6502:	2b00      	cmp	r3, #0
   d6504:	d038      	beq.n	d6578 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d6506:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d6508:	791b      	ldrb	r3, [r3, #4]
   d650a:	2b00      	cmp	r3, #0
   d650c:	d034      	beq.n	d6578 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d650e:	2200      	movs	r2, #0
    SleepResult() {}
   d6510:	4b27      	ldr	r3, [pc, #156]	; (d65b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d6512:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d6514:	a902      	add	r1, sp, #8
   d6516:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d6518:	9202      	str	r2, [sp, #8]
   d651a:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d651e:	f88d 200e 	strb.w	r2, [sp, #14]
   d6522:	f7ff fdfb 	bl	d611c <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d6526:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d652a:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d652e:	b200      	sxth	r0, r0
   d6530:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d6534:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d6538:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d653a:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d653c:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d653e:	4628      	mov	r0, r5
   d6540:	f7ff ffc2 	bl	d64c8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d6544:	a802      	add	r0, sp, #8
   d6546:	f7ff ff9f 	bl	d6488 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d654a:	2300      	movs	r3, #0
   d654c:	6023      	str	r3, [r4, #0]
   d654e:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d6550:	71a3      	strb	r3, [r4, #6]
   d6552:	8123      	strh	r3, [r4, #8]
   d6554:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6558:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d655a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d655e:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d6560:	683b      	ldr	r3, [r7, #0]
   d6562:	f8c4 3006 	str.w	r3, [r4, #6]
   d6566:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d6568:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d656a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d656c:	4620      	mov	r0, r4
   d656e:	f7ff ffab 	bl	d64c8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d6572:	4620      	mov	r0, r4
   d6574:	b00b      	add	sp, #44	; 0x2c
   d6576:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d6578:	2600      	movs	r6, #0
   d657a:	2320      	movs	r3, #32
   d657c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d6580:	4b0c      	ldr	r3, [pc, #48]	; (d65b4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d6582:	9300      	str	r3, [sp, #0]
   d6584:	490c      	ldr	r1, [pc, #48]	; (d65b8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d6586:	4633      	mov	r3, r6
   d6588:	aa02      	add	r2, sp, #8
   d658a:	2032      	movs	r0, #50	; 0x32
   d658c:	f7ff fd8a 	bl	d60a4 <log_message>
    SleepResult() {}
   d6590:	4b07      	ldr	r3, [pc, #28]	; (d65b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d6592:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d6594:	a902      	add	r1, sp, #8
        error_ = error;
   d6596:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d659a:	4804      	ldr	r0, [pc, #16]	; (d65ac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d659c:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d659e:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d65a2:	f8ad 300c 	strh.w	r3, [sp, #12]
   d65a6:	f7ff ff78 	bl	d649a <_ZN17SystemSleepResultaSEOS_>
   d65aa:	e7cb      	b.n	d6544 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d65ac:	2003e644 	.word	0x2003e644
   d65b0:	ffff0000 	.word	0xffff0000
   d65b4:	000da64b 	.word	0x000da64b
   d65b8:	000da644 	.word	0x000da644

000d65bc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d65bc:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d65be:	4b09      	ldr	r3, [pc, #36]	; (d65e4 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d65c0:	4c09      	ldr	r4, [pc, #36]	; (d65e8 <_GLOBAL__sub_I_System+0x2c>)
   d65c2:	2202      	movs	r2, #2
   d65c4:	2000      	movs	r0, #0
   d65c6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d65c8:	4b08      	ldr	r3, [pc, #32]	; (d65ec <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d65ca:	6020      	str	r0, [r4, #0]
   d65cc:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d65ce:	71a0      	strb	r0, [r4, #6]
   d65d0:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d65d2:	f7ff fd77 	bl	d60c4 <set_system_mode>
SystemClass System;
   d65d6:	4620      	mov	r0, r4
   d65d8:	4a05      	ldr	r2, [pc, #20]	; (d65f0 <_GLOBAL__sub_I_System+0x34>)
   d65da:	4906      	ldr	r1, [pc, #24]	; (d65f4 <_GLOBAL__sub_I_System+0x38>)
   d65dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d65e0:	f002 bd96 	b.w	d9110 <__aeabi_atexit>
   d65e4:	2003e650 	.word	0x2003e650
   d65e8:	2003e644 	.word	0x2003e644
   d65ec:	ffff0000 	.word	0xffff0000
   d65f0:	2003df60 	.word	0x2003df60
   d65f4:	000d4181 	.word	0x000d4181

000d65f8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d65f8:	b510      	push	{r4, lr}
   d65fa:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d65fc:	f003 fc46 	bl	d9e8c <strlen>
   d6600:	3801      	subs	r0, #1
   d6602:	1823      	adds	r3, r4, r0
   d6604:	4620      	mov	r0, r4
	while(i<j){
   d6606:	4283      	cmp	r3, r0
   d6608:	d906      	bls.n	d6618 <_Z11str_reversePc+0x20>
		c = *i;
   d660a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d660c:	7819      	ldrb	r1, [r3, #0]
   d660e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d6612:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d6616:	e7f6      	b.n	d6606 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d6618:	bd10      	pop	{r4, pc}

000d661a <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d661a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d661e:	1e93      	subs	r3, r2, #2
{
   d6620:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   d6622:	2b22      	cmp	r3, #34	; 0x22
   d6624:	f04f 0300 	mov.w	r3, #0
{
   d6628:	460d      	mov	r5, r1
   d662a:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d662c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   d6630:	d927      	bls.n	d6682 <ltoa+0x68>

      if (10 == base && N < 0L)
   d6632:	2800      	cmp	r0, #0
   d6634:	da2a      	bge.n	d668c <ltoa+0x72>
      {
            *head++ = '-';
   d6636:	462e      	mov	r6, r5
   d6638:	232d      	movs	r3, #45	; 0x2d
   d663a:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   d663e:	4240      	negs	r0, r0
   d6640:	240a      	movs	r4, #10
      *tail-- = '\0';
   d6642:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d6646:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d664a:	4622      	mov	r2, r4
   d664c:	4601      	mov	r1, r0
   d664e:	a801      	add	r0, sp, #4
   d6650:	f003 fb94 	bl	d9d7c <ldiv>
   d6654:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d6656:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   d6658:	2b09      	cmp	r3, #9
   d665a:	bfcc      	ite	gt
   d665c:	2237      	movgt	r2, #55	; 0x37
   d665e:	2230      	movle	r2, #48	; 0x30
   d6660:	fa52 f383 	uxtab	r3, r2, r3
   d6664:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   d6668:	f108 0801 	add.w	r8, r8, #1
   d666c:	2800      	cmp	r0, #0
   d666e:	d1ec      	bne.n	d664a <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d6670:	4642      	mov	r2, r8
   d6672:	1c79      	adds	r1, r7, #1
   d6674:	4630      	mov	r0, r6
   d6676:	f003 fba3 	bl	d9dc0 <memcpy>
      return str;
}
   d667a:	4628      	mov	r0, r5
   d667c:	b00c      	add	sp, #48	; 0x30
   d667e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   d6682:	2a0a      	cmp	r2, #10
   d6684:	d0d5      	beq.n	d6632 <ltoa+0x18>
      if (uarg)
   d6686:	b118      	cbz	r0, d6690 <ltoa+0x76>
   d6688:	462e      	mov	r6, r5
   d668a:	e7da      	b.n	d6642 <ltoa+0x28>
   d668c:	240a      	movs	r4, #10
   d668e:	e7fa      	b.n	d6686 <ltoa+0x6c>
      else  *tail-- = '0';
   d6690:	2330      	movs	r3, #48	; 0x30
   d6692:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d6696:	462e      	mov	r6, r5
   d6698:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   d669c:	f04f 0802 	mov.w	r8, #2
   d66a0:	e7e6      	b.n	d6670 <ltoa+0x56>

000d66a2 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d66a2:	b570      	push	{r4, r5, r6, lr}
   d66a4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d66a6:	1e91      	subs	r1, r2, #2
   d66a8:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d66aa:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d66ac:	d822      	bhi.n	d66f4 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d66ae:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d66b0:	b16d      	cbz	r5, d66ce <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d66b2:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d66b6:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d66ba:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d66bc:	2d09      	cmp	r5, #9
                *ptr += '0';
   d66be:	bf94      	ite	ls
   d66c0:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d66c2:	3157      	addhi	r1, #87	; 0x57
   d66c4:	b2c9      	uxtb	r1, r1
   d66c6:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d66ca:	4635      	mov	r5, r6
	while(a){
   d66cc:	e7f0      	b.n	d66b0 <ultoa+0xe>
   d66ce:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d66d0:	4423      	add	r3, r4
            *ptr++ = '0';
   d66d2:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d66d4:	4293      	cmp	r3, r2
   d66d6:	d902      	bls.n	d66de <ultoa+0x3c>
            *ptr++ = '0';
   d66d8:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d66dc:	e7fa      	b.n	d66d4 <ultoa+0x32>
   d66de:	1a1a      	subs	r2, r3, r0
   d66e0:	4283      	cmp	r3, r0
   d66e2:	bf38      	it	cc
   d66e4:	2200      	movcc	r2, #0

	*ptr = '\0';
   d66e6:	2300      	movs	r3, #0
   d66e8:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d66ea:	4620      	mov	r0, r4
   d66ec:	f7ff ff84 	bl	d65f8 <_Z11str_reversePc>
	return buffer;
   d66f0:	4620      	mov	r0, r4
}
   d66f2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d66f4:	2000      	movs	r0, #0
   d66f6:	e7fc      	b.n	d66f2 <ultoa+0x50>

000d66f8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d66f8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d66fa:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d66fc:	460c      	mov	r4, r1
   d66fe:	4615      	mov	r5, r2
	if(a<0){
   d6700:	da0e      	bge.n	d6720 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d6706:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d670a:	bf14      	ite	ne
   d670c:	4258      	negne	r0, r3
   d670e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d6710:	2301      	movs	r3, #1
		*buffer = '-';
   d6712:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d6714:	462a      	mov	r2, r5
   d6716:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d6718:	f7ff ffc3 	bl	d66a2 <ultoa>
	}
	return buffer;
}
   d671c:	4620      	mov	r0, r4
   d671e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d6720:	2301      	movs	r3, #1
   d6722:	e7f9      	b.n	d6718 <itoa+0x20>

000d6724 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d6724:	b570      	push	{r4, r5, r6, lr}
   d6726:	b086      	sub	sp, #24
   d6728:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d672a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d672c:	4668      	mov	r0, sp
   d672e:	f001 fe95 	bl	d845c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6734:	1d34      	adds	r4, r6, #4
   d6736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6738:	682b      	ldr	r3, [r5, #0]
   d673a:	7023      	strb	r3, [r4, #0]
    }
   d673c:	4630      	mov	r0, r6
   d673e:	b006      	add	sp, #24
   d6740:	bd70      	pop	{r4, r5, r6, pc}

000d6742 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6742:	b510      	push	{r4, lr}
   d6744:	4604      	mov	r4, r0
{
	free(buffer);
   d6746:	6800      	ldr	r0, [r0, #0]
   d6748:	f7ff fda2 	bl	d6290 <free>
}
   d674c:	4620      	mov	r0, r4
   d674e:	bd10      	pop	{r4, pc}

000d6750 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6750:	b510      	push	{r4, lr}
   d6752:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6754:	6800      	ldr	r0, [r0, #0]
   d6756:	b108      	cbz	r0, d675c <_ZN6String10invalidateEv+0xc>
   d6758:	f7ff fd9a 	bl	d6290 <free>
	buffer = NULL;
   d675c:	2300      	movs	r3, #0
	capacity = len = 0;
   d675e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6762:	6023      	str	r3, [r4, #0]
}
   d6764:	bd10      	pop	{r4, pc}

000d6766 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6766:	b538      	push	{r3, r4, r5, lr}
   d6768:	4604      	mov	r4, r0
   d676a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d676c:	6800      	ldr	r0, [r0, #0]
   d676e:	3101      	adds	r1, #1
   d6770:	f7ff fd96 	bl	d62a0 <realloc>
	if (newbuffer) {
   d6774:	b110      	cbz	r0, d677c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6776:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d677a:	2001      	movs	r0, #1
	}
	return 0;
}
   d677c:	bd38      	pop	{r3, r4, r5, pc}

000d677e <_ZN6String7reserveEj>:
{
   d677e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6780:	6803      	ldr	r3, [r0, #0]
{
   d6782:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6784:	b123      	cbz	r3, d6790 <_ZN6String7reserveEj+0x12>
   d6786:	6843      	ldr	r3, [r0, #4]
   d6788:	428b      	cmp	r3, r1
   d678a:	d301      	bcc.n	d6790 <_ZN6String7reserveEj+0x12>
   d678c:	2001      	movs	r0, #1
}
   d678e:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d6790:	4620      	mov	r0, r4
   d6792:	f7ff ffe8 	bl	d6766 <_ZN6String12changeBufferEj>
   d6796:	2800      	cmp	r0, #0
   d6798:	d0f9      	beq.n	d678e <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d679a:	68a3      	ldr	r3, [r4, #8]
   d679c:	2b00      	cmp	r3, #0
   d679e:	d1f5      	bne.n	d678c <_ZN6String7reserveEj+0xe>
   d67a0:	6822      	ldr	r2, [r4, #0]
   d67a2:	7013      	strb	r3, [r2, #0]
   d67a4:	e7f2      	b.n	d678c <_ZN6String7reserveEj+0xe>

000d67a6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d67a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d67a8:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d67aa:	4611      	mov	r1, r2
   d67ac:	9201      	str	r2, [sp, #4]
{
   d67ae:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d67b0:	f7ff ffe5 	bl	d677e <_ZN6String7reserveEj>
   d67b4:	9a01      	ldr	r2, [sp, #4]
   d67b6:	b928      	cbnz	r0, d67c4 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d67b8:	4620      	mov	r0, r4
   d67ba:	f7ff ffc9 	bl	d6750 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d67be:	4620      	mov	r0, r4
   d67c0:	b003      	add	sp, #12
   d67c2:	bd30      	pop	{r4, r5, pc}
	len = length;
   d67c4:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d67c6:	4629      	mov	r1, r5
   d67c8:	6820      	ldr	r0, [r4, #0]
   d67ca:	f003 faf9 	bl	d9dc0 <memcpy>
	buffer[len] = 0;
   d67ce:	6822      	ldr	r2, [r4, #0]
   d67d0:	68a3      	ldr	r3, [r4, #8]
   d67d2:	2100      	movs	r1, #0
   d67d4:	54d1      	strb	r1, [r2, r3]
	return *this;
   d67d6:	e7f2      	b.n	d67be <_ZN6String4copyEPKcj+0x18>

000d67d8 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d67d8:	2300      	movs	r3, #0
String::String(const char *cstr)
   d67da:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d67dc:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d67e0:	4604      	mov	r4, r0
	len = 0;
   d67e2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d67e4:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d67e6:	b141      	cbz	r1, d67fa <_ZN6StringC1EPKc+0x22>
   d67e8:	4608      	mov	r0, r1
   d67ea:	9101      	str	r1, [sp, #4]
   d67ec:	f003 fb4e 	bl	d9e8c <strlen>
   d67f0:	9901      	ldr	r1, [sp, #4]
   d67f2:	4602      	mov	r2, r0
   d67f4:	4620      	mov	r0, r4
   d67f6:	f7ff ffd6 	bl	d67a6 <_ZN6String4copyEPKcj>
}
   d67fa:	4620      	mov	r0, r4
   d67fc:	b002      	add	sp, #8
   d67fe:	bd10      	pop	{r4, pc}

000d6800 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d6800:	b538      	push	{r3, r4, r5, lr}
   d6802:	4605      	mov	r5, r0
	if (buffer) {
   d6804:	6800      	ldr	r0, [r0, #0]
{
   d6806:	460c      	mov	r4, r1
	if (buffer) {
   d6808:	b168      	cbz	r0, d6826 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d680a:	686a      	ldr	r2, [r5, #4]
   d680c:	688b      	ldr	r3, [r1, #8]
   d680e:	429a      	cmp	r2, r3
   d6810:	d307      	bcc.n	d6822 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d6812:	6809      	ldr	r1, [r1, #0]
   d6814:	f003 fb32 	bl	d9e7c <strcpy>
			len = rhs.len;
   d6818:	68a3      	ldr	r3, [r4, #8]
   d681a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d681c:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d681e:	60a3      	str	r3, [r4, #8]
}
   d6820:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d6822:	f7ff fd35 	bl	d6290 <free>
	buffer = rhs.buffer;
   d6826:	6823      	ldr	r3, [r4, #0]
   d6828:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d682a:	6863      	ldr	r3, [r4, #4]
   d682c:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d682e:	68a3      	ldr	r3, [r4, #8]
   d6830:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d6832:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d6834:	e9c4 3300 	strd	r3, r3, [r4]
   d6838:	e7f1      	b.n	d681e <_ZN6String4moveERS_+0x1e>

000d683a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d683a:	4288      	cmp	r0, r1
{
   d683c:	b510      	push	{r4, lr}
   d683e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6840:	d005      	beq.n	d684e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6842:	680b      	ldr	r3, [r1, #0]
   d6844:	b12b      	cbz	r3, d6852 <_ZN6StringaSERKS_+0x18>
   d6846:	688a      	ldr	r2, [r1, #8]
   d6848:	4619      	mov	r1, r3
   d684a:	f7ff ffac 	bl	d67a6 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d684e:	4620      	mov	r0, r4
   d6850:	bd10      	pop	{r4, pc}
	else invalidate();
   d6852:	f7ff ff7d 	bl	d6750 <_ZN6String10invalidateEv>
   d6856:	e7fa      	b.n	d684e <_ZN6StringaSERKS_+0x14>

000d6858 <_ZN6StringaSEO15StringSumHelper>:
	return *this;
}

String & String::operator = (StringSumHelper &&rval)
{
	if (this != &rval) move(rval);
   d6858:	4288      	cmp	r0, r1
{
   d685a:	b510      	push	{r4, lr}
   d685c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d685e:	d001      	beq.n	d6864 <_ZN6StringaSEO15StringSumHelper+0xc>
   d6860:	f7ff ffce 	bl	d6800 <_ZN6String4moveERS_>
	return *this;
}
   d6864:	4620      	mov	r0, r4
   d6866:	bd10      	pop	{r4, pc}

000d6868 <_ZN6StringaSEPKc>:
#endif

String & String::operator = (const char *cstr)
{
   d6868:	b513      	push	{r0, r1, r4, lr}
   d686a:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d686c:	b159      	cbz	r1, d6886 <_ZN6StringaSEPKc+0x1e>
   d686e:	4608      	mov	r0, r1
   d6870:	9101      	str	r1, [sp, #4]
   d6872:	f003 fb0b 	bl	d9e8c <strlen>
   d6876:	9901      	ldr	r1, [sp, #4]
   d6878:	4602      	mov	r2, r0
   d687a:	4620      	mov	r0, r4
   d687c:	f7ff ff93 	bl	d67a6 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6880:	4620      	mov	r0, r4
   d6882:	b002      	add	sp, #8
   d6884:	bd10      	pop	{r4, pc}
	else invalidate();
   d6886:	f7ff ff63 	bl	d6750 <_ZN6String10invalidateEv>
   d688a:	e7f9      	b.n	d6880 <_ZN6StringaSEPKc+0x18>

000d688c <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d688c:	b510      	push	{r4, lr}
   d688e:	4604      	mov	r4, r0
   d6890:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d6892:	2300      	movs	r3, #0
	capacity = 0;
   d6894:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d6898:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d689a:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d689c:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d689e:	a901      	add	r1, sp, #4
   d68a0:	f7ff ff2a 	bl	d66f8 <itoa>
	*this = buf;
   d68a4:	a901      	add	r1, sp, #4
   d68a6:	4620      	mov	r0, r4
   d68a8:	f7ff ffde 	bl	d6868 <_ZN6StringaSEPKc>
}
   d68ac:	4620      	mov	r0, r4
   d68ae:	b00a      	add	sp, #40	; 0x28
   d68b0:	bd10      	pop	{r4, pc}

000d68b2 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   d68b2:	b510      	push	{r4, lr}
   d68b4:	4604      	mov	r4, r0
   d68b6:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d68b8:	2300      	movs	r3, #0
	capacity = 0;
   d68ba:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d68be:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d68c0:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   d68c2:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   d68c4:	a901      	add	r1, sp, #4
   d68c6:	f7ff fea8 	bl	d661a <ltoa>
	*this = buf;
   d68ca:	a901      	add	r1, sp, #4
   d68cc:	4620      	mov	r0, r4
   d68ce:	f7ff ffcb 	bl	d6868 <_ZN6StringaSEPKc>
}
   d68d2:	4620      	mov	r0, r4
   d68d4:	b00a      	add	sp, #40	; 0x28
   d68d6:	bd10      	pop	{r4, pc}

000d68d8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d68d8:	b570      	push	{r4, r5, r6, lr}
   d68da:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d68dc:	460e      	mov	r6, r1
   d68de:	b909      	cbnz	r1, d68e4 <_ZN6String6concatEPKcj+0xc>
   d68e0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d68e2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d68e4:	b16a      	cbz	r2, d6902 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d68e6:	6884      	ldr	r4, [r0, #8]
   d68e8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d68ea:	4621      	mov	r1, r4
   d68ec:	f7ff ff47 	bl	d677e <_ZN6String7reserveEj>
   d68f0:	2800      	cmp	r0, #0
   d68f2:	d0f5      	beq.n	d68e0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d68f4:	6828      	ldr	r0, [r5, #0]
   d68f6:	68ab      	ldr	r3, [r5, #8]
   d68f8:	4631      	mov	r1, r6
   d68fa:	4418      	add	r0, r3
   d68fc:	f003 fabe 	bl	d9e7c <strcpy>
	len = newlen;
   d6900:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d6902:	2001      	movs	r0, #1
   d6904:	e7ed      	b.n	d68e2 <_ZN6String6concatEPKcj+0xa>

000d6906 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d6906:	688a      	ldr	r2, [r1, #8]
   d6908:	6809      	ldr	r1, [r1, #0]
   d690a:	f7ff bfe5 	b.w	d68d8 <_ZN6String6concatEPKcj>

000d690e <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d690e:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d6910:	2300      	movs	r3, #0
	buf[0] = c;
   d6912:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d6916:	2201      	movs	r2, #1
   d6918:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d691a:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d691e:	f7ff ffdb 	bl	d68d8 <_ZN6String6concatEPKcj>
}
   d6922:	b003      	add	sp, #12
   d6924:	f85d fb04 	ldr.w	pc, [sp], #4

000d6928 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6928:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d692a:	688a      	ldr	r2, [r1, #8]
   d692c:	6809      	ldr	r1, [r1, #0]
{
   d692e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6930:	f7ff ffd2 	bl	d68d8 <_ZN6String6concatEPKcj>
   d6934:	b910      	cbnz	r0, d693c <_ZplRK15StringSumHelperRK6String+0x14>
   d6936:	4620      	mov	r0, r4
   d6938:	f7ff ff0a 	bl	d6750 <_ZN6String10invalidateEv>
	return a;
}
   d693c:	4620      	mov	r0, r4
   d693e:	bd10      	pop	{r4, pc}

000d6940 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d6940:	b513      	push	{r0, r1, r4, lr}
   d6942:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d6944:	b929      	cbnz	r1, d6952 <_ZplRK15StringSumHelperPKc+0x12>
   d6946:	4620      	mov	r0, r4
   d6948:	f7ff ff02 	bl	d6750 <_ZN6String10invalidateEv>
	return a;
}
   d694c:	4620      	mov	r0, r4
   d694e:	b002      	add	sp, #8
   d6950:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d6952:	4608      	mov	r0, r1
   d6954:	9101      	str	r1, [sp, #4]
   d6956:	f003 fa99 	bl	d9e8c <strlen>
   d695a:	9901      	ldr	r1, [sp, #4]
   d695c:	4602      	mov	r2, r0
   d695e:	4620      	mov	r0, r4
   d6960:	f7ff ffba 	bl	d68d8 <_ZN6String6concatEPKcj>
   d6964:	2800      	cmp	r0, #0
   d6966:	d0ee      	beq.n	d6946 <_ZplRK15StringSumHelperPKc+0x6>
   d6968:	e7f0      	b.n	d694c <_ZplRK15StringSumHelperPKc+0xc>

000d696a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d696a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d696c:	6882      	ldr	r2, [r0, #8]
   d696e:	b93a      	cbnz	r2, d6980 <_ZNK6String6equalsEPKc+0x16>
   d6970:	b121      	cbz	r1, d697c <_ZNK6String6equalsEPKc+0x12>
   d6972:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d6974:	fab0 f080 	clz	r0, r0
   d6978:	0940      	lsrs	r0, r0, #5
   d697a:	e000      	b.n	d697e <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d697c:	2001      	movs	r0, #1
}
   d697e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6980:	6800      	ldr	r0, [r0, #0]
   d6982:	b909      	cbnz	r1, d6988 <_ZNK6String6equalsEPKc+0x1e>
   d6984:	7800      	ldrb	r0, [r0, #0]
   d6986:	e7f5      	b.n	d6974 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d6988:	f003 fa6e 	bl	d9e68 <strcmp>
   d698c:	e7f2      	b.n	d6974 <_ZNK6String6equalsEPKc+0xa>

000d698e <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d698e:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d6990:	6883      	ldr	r3, [r0, #8]
   d6992:	4293      	cmp	r3, r2
   d6994:	d907      	bls.n	d69a6 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d6996:	6804      	ldr	r4, [r0, #0]
   d6998:	6809      	ldr	r1, [r1, #0]
   d699a:	18a0      	adds	r0, r4, r2
   d699c:	f003 fa9e 	bl	d9edc <strstr>
	if (found == NULL) return -1;
   d69a0:	b108      	cbz	r0, d69a6 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d69a2:	1b00      	subs	r0, r0, r4
}
   d69a4:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   d69a6:	f04f 30ff 	mov.w	r0, #4294967295
   d69aa:	e7fb      	b.n	d69a4 <_ZNK6String7indexOfERKS_j+0x16>

000d69ac <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   d69ac:	2200      	movs	r2, #0
   d69ae:	f7ff bfee 	b.w	d698e <_ZNK6String7indexOfERKS_j>
	...

000d69b4 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d69b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d69b6:	429a      	cmp	r2, r3
{
   d69b8:	460f      	mov	r7, r1
   d69ba:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d69bc:	490c      	ldr	r1, [pc, #48]	; (d69f0 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   d69be:	bf88      	it	hi
   d69c0:	4613      	movhi	r3, r2
{
   d69c2:	4614      	mov	r4, r2
   d69c4:	4606      	mov	r6, r0
	if (left > right) {
   d69c6:	bf84      	itt	hi
   d69c8:	462c      	movhi	r4, r5
   d69ca:	461d      	movhi	r5, r3
	String out;
   d69cc:	f7ff ff04 	bl	d67d8 <_ZN6StringC1EPKc>
	if (left > len) return out;
   d69d0:	68ba      	ldr	r2, [r7, #8]
   d69d2:	42a2      	cmp	r2, r4
   d69d4:	d30a      	bcc.n	d69ec <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d69d6:	6839      	ldr	r1, [r7, #0]
   d69d8:	42aa      	cmp	r2, r5
   d69da:	bf94      	ite	ls
   d69dc:	ebc4 0202 	rsbls	r2, r4, r2
   d69e0:	ebc4 0205 	rsbhi	r2, r4, r5
   d69e4:	4421      	add	r1, r4
   d69e6:	4630      	mov	r0, r6
   d69e8:	f7ff fedd 	bl	d67a6 <_ZN6String4copyEPKcj>
	return out;
}
   d69ec:	4630      	mov	r0, r6
   d69ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d69f0:	000da185 	.word	0x000da185

000d69f4 <_ZNK6String9substringEj>:
{
   d69f4:	b510      	push	{r4, lr}
   d69f6:	4604      	mov	r4, r0
	return substring(left, len);
   d69f8:	688b      	ldr	r3, [r1, #8]
   d69fa:	f7ff ffdb 	bl	d69b4 <_ZNK6String9substringEjj>
}
   d69fe:	4620      	mov	r0, r4
   d6a00:	bd10      	pop	{r4, pc}

000d6a02 <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
   d6a02:	b538      	push	{r3, r4, r5, lr}
   d6a04:	4604      	mov	r4, r0
   d6a06:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
   d6a08:	68a3      	ldr	r3, [r4, #8]
   d6a0a:	428b      	cmp	r3, r1
   d6a0c:	d911      	bls.n	d6a32 <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
   d6a0e:	b182      	cbz	r2, d6a32 <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
   d6a10:	4411      	add	r1, r2
   d6a12:	428b      	cmp	r3, r1
   d6a14:	bf38      	it	cc
   d6a16:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
   d6a18:	6825      	ldr	r5, [r4, #0]
	len = len - count;
   d6a1a:	1a99      	subs	r1, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
   d6a1c:	1813      	adds	r3, r2, r0
	len = len - count;
   d6a1e:	60a1      	str	r1, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
   d6a20:	1a0a      	subs	r2, r1, r0
   d6a22:	18e9      	adds	r1, r5, r3
   d6a24:	4428      	add	r0, r5
   d6a26:	f003 f9d9 	bl	d9ddc <memmove>
	buffer[len] = 0;
   d6a2a:	6822      	ldr	r2, [r4, #0]
   d6a2c:	68a3      	ldr	r3, [r4, #8]
   d6a2e:	2100      	movs	r1, #0
   d6a30:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6a32:	4620      	mov	r0, r4
   d6a34:	bd38      	pop	{r3, r4, r5, pc}

000d6a36 <_ZN6String6removeEj>:
        int count = len - index;
   d6a36:	6882      	ldr	r2, [r0, #8]
        return remove(index, count);
   d6a38:	1a52      	subs	r2, r2, r1
   d6a3a:	f7ff bfe2 	b.w	d6a02 <_ZN6String6removeEjj>

000d6a3e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6a3e:	4770      	bx	lr

000d6a40 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d6a40:	4770      	bx	lr

000d6a42 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d6a42:	4770      	bx	lr

000d6a44 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6a44:	4770      	bx	lr
	...

000d6a48 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6a48:	4b06      	ldr	r3, [pc, #24]	; (d6a64 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d6a4a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6a4c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d6a4e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6a52:	d005      	beq.n	d6a60 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6a54:	4608      	mov	r0, r1
   d6a56:	f002 fb69 	bl	d912c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6a5a:	2800      	cmp	r0, #0
	return nullptr;
   d6a5c:	bf08      	it	eq
   d6a5e:	2400      	moveq	r4, #0
      }
   d6a60:	4620      	mov	r0, r4
   d6a62:	bd10      	pop	{r4, pc}
   d6a64:	000da7bc 	.word	0x000da7bc

000d6a68 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6a68:	4b06      	ldr	r3, [pc, #24]	; (d6a84 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d6a6a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6a6c:	b510      	push	{r4, lr}
   d6a6e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6a72:	d005      	beq.n	d6a80 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6a74:	4608      	mov	r0, r1
   d6a76:	f002 fb59 	bl	d912c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6a7a:	2800      	cmp	r0, #0
	return nullptr;
   d6a7c:	bf08      	it	eq
   d6a7e:	2400      	moveq	r4, #0
      }
   d6a80:	4620      	mov	r0, r4
   d6a82:	bd10      	pop	{r4, pc}
   d6a84:	000da7bc 	.word	0x000da7bc

000d6a88 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6a88:	4b06      	ldr	r3, [pc, #24]	; (d6aa4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d6a8a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6a8c:	b510      	push	{r4, lr}
   d6a8e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6a92:	d005      	beq.n	d6aa0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6a94:	4608      	mov	r0, r1
   d6a96:	f002 fb49 	bl	d912c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6a9a:	2800      	cmp	r0, #0
	return nullptr;
   d6a9c:	bf08      	it	eq
   d6a9e:	2400      	moveq	r4, #0
      }
   d6aa0:	4620      	mov	r0, r4
   d6aa2:	bd10      	pop	{r4, pc}
   d6aa4:	000da7bc 	.word	0x000da7bc

000d6aa8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6aa8:	b510      	push	{r4, lr}
   d6aaa:	2168      	movs	r1, #104	; 0x68
   d6aac:	4604      	mov	r4, r0
   d6aae:	f002 fb34 	bl	d911a <_ZdlPvj>
   d6ab2:	4620      	mov	r0, r4
   d6ab4:	bd10      	pop	{r4, pc}

000d6ab6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d6ab6:	b510      	push	{r4, lr}
   d6ab8:	2128      	movs	r1, #40	; 0x28
   d6aba:	4604      	mov	r4, r0
   d6abc:	f002 fb2d 	bl	d911a <_ZdlPvj>
   d6ac0:	4620      	mov	r0, r4
   d6ac2:	bd10      	pop	{r4, pc}

000d6ac4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d6ac4:	b510      	push	{r4, lr}
   d6ac6:	2130      	movs	r1, #48	; 0x30
   d6ac8:	4604      	mov	r4, r0
   d6aca:	f002 fb26 	bl	d911a <_ZdlPvj>
   d6ace:	4620      	mov	r0, r4
   d6ad0:	bd10      	pop	{r4, pc}

000d6ad2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d6ad2:	f7fd bae4 	b.w	d409e <_ZdlPv>

000d6ad6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d6ad6:	f7fd bae2 	b.w	d409e <_ZdlPv>

000d6ada <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d6ada:	f7fd bae0 	b.w	d409e <_ZdlPv>

000d6ade <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6ade:	b510      	push	{r4, lr}
          _M_dispose();
   d6ae0:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6ae2:	4604      	mov	r4, r0
          _M_dispose();
   d6ae4:	689b      	ldr	r3, [r3, #8]
   d6ae6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6ae8:	68a3      	ldr	r3, [r4, #8]
   d6aea:	3b01      	subs	r3, #1
   d6aec:	60a3      	str	r3, [r4, #8]
   d6aee:	b92b      	cbnz	r3, d6afc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6af0:	6823      	ldr	r3, [r4, #0]
   d6af2:	4620      	mov	r0, r4
   d6af4:	68db      	ldr	r3, [r3, #12]
    }
   d6af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6afa:	4718      	bx	r3
    }
   d6afc:	bd10      	pop	{r4, pc}

000d6afe <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6afe:	b510      	push	{r4, lr}
   d6b00:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6b02:	6800      	ldr	r0, [r0, #0]
   d6b04:	b108      	cbz	r0, d6b0a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6b06:	f7ff f935 	bl	d5d74 <os_mutex_recursive_destroy>
    }
   d6b0a:	4620      	mov	r0, r4
   d6b0c:	bd10      	pop	{r4, pc}
	...

000d6b10 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d6b10:	b510      	push	{r4, lr}
        mutex_.lock();
   d6b12:	4b04      	ldr	r3, [pc, #16]	; (d6b24 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d6b14:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6b16:	6818      	ldr	r0, [r3, #0]
   d6b18:	f7ff f934 	bl	d5d84 <os_mutex_recursive_lock>
        locked_ = true;
   d6b1c:	2301      	movs	r3, #1
   d6b1e:	7023      	strb	r3, [r4, #0]
    }
   d6b20:	bd10      	pop	{r4, pc}
   d6b22:	bf00      	nop
   d6b24:	2003e65c 	.word	0x2003e65c

000d6b28 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d6b28:	b510      	push	{r4, lr}
        mutex_.unlock();
   d6b2a:	4b04      	ldr	r3, [pc, #16]	; (d6b3c <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d6b2c:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6b2e:	6818      	ldr	r0, [r3, #0]
   d6b30:	f7ff f930 	bl	d5d94 <os_mutex_recursive_unlock>
        locked_ = false;
   d6b34:	2300      	movs	r3, #0
   d6b36:	7023      	strb	r3, [r4, #0]
    }
   d6b38:	bd10      	pop	{r4, pc}
   d6b3a:	bf00      	nop
   d6b3c:	2003e65c 	.word	0x2003e65c

000d6b40 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d6b40:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6b42:	2500      	movs	r5, #0
   d6b44:	1cec      	adds	r4, r5, #3
   d6b46:	428c      	cmp	r4, r1
   d6b48:	d80d      	bhi.n	d6b66 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d6b4a:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d6b4c:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d6b4e:	5d87      	ldrb	r7, [r0, r6]
   d6b50:	4297      	cmp	r7, r2
   d6b52:	d105      	bne.n	d6b60 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d6b54:	4426      	add	r6, r4
   d6b56:	42b1      	cmp	r1, r6
   d6b58:	d305      	bcc.n	d6b66 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d6b5a:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d6b5c:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d6b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d6b60:	3401      	adds	r4, #1
   d6b62:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6b64:	e7ee      	b.n	d6b44 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d6b66:	2000      	movs	r0, #0
   d6b68:	e7f9      	b.n	d6b5e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d6b6a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d6b6a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6b6e:	4604      	mov	r4, r0
   d6b70:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d6b74:	461e      	mov	r6, r3
   d6b76:	4689      	mov	r9, r1
   d6b78:	ab01      	add	r3, sp, #4
   d6b7a:	4690      	mov	r8, r2
   d6b7c:	460a      	mov	r2, r1
   d6b7e:	6a01      	ldr	r1, [r0, #32]
   d6b80:	f7ff ffde 	bl	d6b40 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d6b84:	6a25      	ldr	r5, [r4, #32]
   d6b86:	1cb3      	adds	r3, r6, #2
   d6b88:	bb17      	cbnz	r7, d6bd0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d6b8a:	b308      	cbz	r0, d6bd0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d6b8c:	195f      	adds	r7, r3, r5
   d6b8e:	1a3f      	subs	r7, r7, r0
   d6b90:	2f1f      	cmp	r7, #31
   d6b92:	d819      	bhi.n	d6bc8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6b94:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d6b98:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6b9c:	eba5 0209 	sub.w	r2, r5, r9
   d6ba0:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d6ba2:	eb00 0109 	add.w	r1, r0, r9
   d6ba6:	eb06 000a 	add.w	r0, r6, sl
   d6baa:	b292      	uxth	r2, r2
   d6bac:	4421      	add	r1, r4
   d6bae:	4420      	add	r0, r4
   d6bb0:	f003 f914 	bl	d9ddc <memmove>
            selfData_[offset] = len + 1;
   d6bb4:	1c73      	adds	r3, r6, #1
   d6bb6:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d6bba:	4632      	mov	r2, r6
   d6bbc:	4641      	mov	r1, r8
   d6bbe:	eb04 000a 	add.w	r0, r4, sl
   d6bc2:	f003 f8fd 	bl	d9dc0 <memcpy>
            selfLen_ = staLen + len + 2;
   d6bc6:	6227      	str	r7, [r4, #32]
}
   d6bc8:	6a20      	ldr	r0, [r4, #32]
   d6bca:	b002      	add	sp, #8
   d6bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d6bd0:	442b      	add	r3, r5
   d6bd2:	2b1f      	cmp	r3, #31
   d6bd4:	d8f8      	bhi.n	d6bc8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d6bd6:	1c73      	adds	r3, r6, #1
   d6bd8:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d6bda:	1ca8      	adds	r0, r5, #2
   d6bdc:	4425      	add	r5, r4
   d6bde:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d6be0:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d6be2:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d6be6:	4641      	mov	r1, r8
   d6be8:	4420      	add	r0, r4
   d6bea:	f003 f8e9 	bl	d9dc0 <memcpy>
        selfLen_ += len;
   d6bee:	6a23      	ldr	r3, [r4, #32]
   d6bf0:	4433      	add	r3, r6
   d6bf2:	6223      	str	r3, [r4, #32]
   d6bf4:	e7e8      	b.n	d6bc8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
	...

000d6bf8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d6bf8:	4a02      	ldr	r2, [pc, #8]	; (d6c04 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d6bfa:	2100      	movs	r1, #0
   d6bfc:	200a      	movs	r0, #10
   d6bfe:	f7ff ba49 	b.w	d6094 <panic_>
   d6c02:	bf00      	nop
   d6c04:	000d5bdd 	.word	0x000d5bdd

000d6c08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6c08:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6c0a:	b538      	push	{r3, r4, r5, lr}
   d6c0c:	4604      	mov	r4, r0
	  switch (__op)
   d6c0e:	d007      	beq.n	d6c20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x18>
   d6c10:	2a03      	cmp	r2, #3
   d6c12:	d011      	beq.n	d6c38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x30>
   d6c14:	2a01      	cmp	r2, #1
   d6c16:	d101      	bne.n	d6c1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6c18:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d6c1a:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6c1c:	2000      	movs	r0, #0
   d6c1e:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6c20:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d6c22:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6c24:	f7fd fa37 	bl	d4096 <_Znwj>
   d6c28:	4603      	mov	r3, r0
   d6c2a:	2800      	cmp	r0, #0
   d6c2c:	d0f5      	beq.n	d6c1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
   d6c2e:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6c32:	e883 0003 	stmia.w	r3, {r0, r1}
   d6c36:	e7f0      	b.n	d6c1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d6c38:	6800      	ldr	r0, [r0, #0]
   d6c3a:	2800      	cmp	r0, #0
   d6c3c:	d0ee      	beq.n	d6c1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
   d6c3e:	2108      	movs	r1, #8
   d6c40:	f002 fa6b 	bl	d911a <_ZdlPvj>
   d6c44:	e7ea      	b.n	d6c1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>

000d6c46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	  switch (__op)
   d6c46:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6c48:	b538      	push	{r3, r4, r5, lr}
   d6c4a:	4604      	mov	r4, r0
	  switch (__op)
   d6c4c:	d007      	beq.n	d6c5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
   d6c4e:	2a03      	cmp	r2, #3
   d6c50:	d011      	beq.n	d6c76 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
   d6c52:	2a01      	cmp	r2, #1
   d6c54:	d101      	bne.n	d6c5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6c56:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d6c58:	6023      	str	r3, [r4, #0]
	}
   d6c5a:	2000      	movs	r0, #0
   d6c5c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6c5e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d6c60:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6c62:	f7fd fa18 	bl	d4096 <_Znwj>
   d6c66:	4603      	mov	r3, r0
   d6c68:	2800      	cmp	r0, #0
   d6c6a:	d0f5      	beq.n	d6c58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
   d6c6c:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6c70:	e883 0003 	stmia.w	r3, {r0, r1}
   d6c74:	e7f0      	b.n	d6c58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d6c76:	6800      	ldr	r0, [r0, #0]
   d6c78:	2800      	cmp	r0, #0
   d6c7a:	d0ee      	beq.n	d6c5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
   d6c7c:	2108      	movs	r1, #8
   d6c7e:	f002 fa4c 	bl	d911a <_ZdlPvj>
   d6c82:	e7ea      	b.n	d6c5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

000d6c84 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6c84:	b430      	push	{r4, r5}
   d6c86:	460d      	mov	r5, r1
   d6c88:	4611      	mov	r1, r2
   d6c8a:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   d6c8c:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6c8e:	6809      	ldr	r1, [r1, #0]
   d6c90:	6828      	ldr	r0, [r5, #0]
   d6c92:	e9d3 4300 	ldrd	r4, r3, [r3]
   d6c96:	46a4      	mov	ip, r4
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d6c98:	bc30      	pop	{r4, r5}
   d6c9a:	4760      	bx	ip

000d6c9c <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6c9c:	4603      	mov	r3, r0
   d6c9e:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   d6ca0:	681b      	ldr	r3, [r3, #0]
   d6ca2:	e9d3 2100 	ldrd	r2, r1, [r3]
   d6ca6:	4710      	bx	r2

000d6ca8 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d6ca8:	b510      	push	{r4, lr}
      if (_M_manager)
   d6caa:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6cac:	4604      	mov	r4, r0
      if (_M_manager)
   d6cae:	b113      	cbz	r3, d6cb6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6cb0:	2203      	movs	r2, #3
   d6cb2:	4601      	mov	r1, r0
   d6cb4:	4798      	blx	r3
    }
   d6cb6:	4620      	mov	r0, r4
   d6cb8:	bd10      	pop	{r4, pc}

000d6cba <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6cba:	b510      	push	{r4, lr}
   d6cbc:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6cbe:	3058      	adds	r0, #88	; 0x58
   d6cc0:	f7ff fff2 	bl	d6ca8 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   d6cc4:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   d6cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6ccc:	f7ff bd39 	b.w	d6742 <_ZN6StringD1Ev>

000d6cd0 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d6cd0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6cd4:	b2da      	uxtb	r2, r3
   d6cd6:	2a09      	cmp	r2, #9
   d6cd8:	d801      	bhi.n	d6cde <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d6cda:	4618      	mov	r0, r3
   d6cdc:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d6cde:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d6ce2:	2b05      	cmp	r3, #5
   d6ce4:	d801      	bhi.n	d6cea <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d6ce6:	3857      	subs	r0, #87	; 0x57
   d6ce8:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d6cea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d6cee:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d6cf0:	bf94      	ite	ls
   d6cf2:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d6cf4:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d6cf8:	4770      	bx	lr

000d6cfa <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d6cfa:	b510      	push	{r4, lr}
            locked_(false) {
   d6cfc:	2300      	movs	r3, #0
    WiringBleLock() :
   d6cfe:	4604      	mov	r4, r0
            locked_(false) {
   d6d00:	7003      	strb	r3, [r0, #0]
        lock();
   d6d02:	f7ff ff05 	bl	d6b10 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d6d06:	4620      	mov	r0, r4
   d6d08:	bd10      	pop	{r4, pc}

000d6d0a <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d6d0a:	b510      	push	{r4, lr}
        if (locked_) {
   d6d0c:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d6d0e:	4604      	mov	r4, r0
        if (locked_) {
   d6d10:	b10b      	cbz	r3, d6d16 <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d6d12:	f7ff ff09 	bl	d6b28 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d6d16:	4620      	mov	r0, r4
   d6d18:	bd10      	pop	{r4, pc}

000d6d1a <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d6d1a:	b082      	sub	sp, #8
   d6d1c:	4603      	mov	r3, r0
    address_ = addr;
   d6d1e:	6808      	ldr	r0, [r1, #0]
   d6d20:	6849      	ldr	r1, [r1, #4]
   d6d22:	466a      	mov	r2, sp
   d6d24:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d6d26:	466a      	mov	r2, sp
   d6d28:	ca03      	ldmia	r2!, {r0, r1}
   d6d2a:	6018      	str	r0, [r3, #0]
}
   d6d2c:	4618      	mov	r0, r3
    address_ = addr.address_;
   d6d2e:	6059      	str	r1, [r3, #4]
}
   d6d30:	b002      	add	sp, #8
   d6d32:	4770      	bx	lr

000d6d34 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d6d34:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d6d36:	7982      	ldrb	r2, [r0, #6]
   d6d38:	798b      	ldrb	r3, [r1, #6]
   d6d3a:	429a      	cmp	r2, r3
   d6d3c:	d106      	bne.n	d6d4c <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d6d3e:	2206      	movs	r2, #6
   d6d40:	f003 f830 	bl	d9da4 <memcmp>
   d6d44:	fab0 f080 	clz	r0, r0
   d6d48:	0940      	lsrs	r0, r0, #5
}
   d6d4a:	bd08      	pop	{r3, pc}
    return false;
   d6d4c:	2000      	movs	r0, #0
   d6d4e:	e7fc      	b.n	d6d4a <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d6d50 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d6d50:	f04f 33ff 	mov.w	r3, #4294967295
   d6d54:	6003      	str	r3, [r0, #0]
   d6d56:	8083      	strh	r3, [r0, #4]
}
   d6d58:	2000      	movs	r0, #0
   d6d5a:	4770      	bx	lr

000d6d5c <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d6d5c:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d6d5e:	b508      	push	{r3, lr}
        : address_{} {
   d6d60:	6001      	str	r1, [r0, #0]
   d6d62:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d6d64:	4602      	mov	r2, r0
    clear();
   d6d66:	f7ff fff3 	bl	d6d50 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d6d6a:	7191      	strb	r1, [r2, #6]
}
   d6d6c:	4610      	mov	r0, r2
   d6d6e:	bd08      	pop	{r3, pc}

000d6d70 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d6d70:	2201      	movs	r2, #1
   d6d72:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6d74:	4a06      	ldr	r2, [pc, #24]	; (d6d90 <_ZN8particle7BleUuidC1Ev+0x20>)
   d6d76:	6811      	ldr	r1, [r2, #0]
   d6d78:	6001      	str	r1, [r0, #0]
   d6d7a:	6851      	ldr	r1, [r2, #4]
   d6d7c:	6041      	str	r1, [r0, #4]
   d6d7e:	8911      	ldrh	r1, [r2, #8]
   d6d80:	7a92      	ldrb	r2, [r2, #10]
   d6d82:	7282      	strb	r2, [r0, #10]
   d6d84:	2200      	movs	r2, #0
   d6d86:	8101      	strh	r1, [r0, #8]
   d6d88:	f8c0 200b 	str.w	r2, [r0, #11]
   d6d8c:	73c2      	strb	r2, [r0, #15]
}
   d6d8e:	4770      	bx	lr
   d6d90:	000da7c4 	.word	0x000da7c4

000d6d94 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d6d94:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d6d96:	690b      	ldr	r3, [r1, #16]
   d6d98:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6d9a:	f101 0210 	add.w	r2, r1, #16
   d6d9e:	4603      	mov	r3, r0
   d6da0:	f851 4b04 	ldr.w	r4, [r1], #4
   d6da4:	f843 4b04 	str.w	r4, [r3], #4
   d6da8:	4291      	cmp	r1, r2
   d6daa:	d1f9      	bne.n	d6da0 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d6dac:	bd10      	pop	{r4, pc}

000d6dae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d6dae:	b510      	push	{r4, lr}
    if (uuid128) {
   d6db0:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d6db2:	4604      	mov	r4, r0
    if (uuid128) {
   d6db4:	b1b1      	cbz	r1, d6de4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d6db6:	2a01      	cmp	r2, #1
   d6db8:	f101 0210 	add.w	r2, r1, #16
   d6dbc:	d10a      	bne.n	d6dd4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d6dbe:	4601      	mov	r1, r0
   d6dc0:	f853 0b04 	ldr.w	r0, [r3], #4
   d6dc4:	f841 0b04 	str.w	r0, [r1], #4
   d6dc8:	4293      	cmp	r3, r2
   d6dca:	d1f9      	bne.n	d6dc0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d6dcc:	2301      	movs	r3, #1
   d6dce:	6123      	str	r3, [r4, #16]
}
   d6dd0:	4620      	mov	r0, r4
   d6dd2:	bd10      	pop	{r4, pc}
   d6dd4:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d6dd6:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d6dda:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d6dde:	429a      	cmp	r2, r3
   d6de0:	d1f9      	bne.n	d6dd6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d6de2:	e7f3      	b.n	d6dcc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d6de4:	2210      	movs	r2, #16
   d6de6:	f003 f813 	bl	d9e10 <memset>
   d6dea:	e7f1      	b.n	d6dd0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d6dec <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d6dec:	b538      	push	{r3, r4, r5, lr}
   d6dee:	4604      	mov	r4, r0
   d6df0:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d6df2:	461a      	mov	r2, r3
   d6df4:	f7ff ffdb 	bl	d6dae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d6df8:	81a5      	strh	r5, [r4, #12]
}
   d6dfa:	4620      	mov	r0, r4
   d6dfc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6e00 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d6e00:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d6e02:	6902      	ldr	r2, [r0, #16]
   d6e04:	b922      	cbnz	r2, d6e10 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d6e06:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6e08:	3800      	subs	r0, #0
   d6e0a:	bf18      	it	ne
   d6e0c:	2001      	movne	r0, #1
}
   d6e0e:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6e10:	4902      	ldr	r1, [pc, #8]	; (d6e1c <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d6e12:	2210      	movs	r2, #16
   d6e14:	f002 ffc6 	bl	d9da4 <memcmp>
   d6e18:	e7f6      	b.n	d6e08 <_ZNK8particle7BleUuid7isValidEv+0x8>
   d6e1a:	bf00      	nop
   d6e1c:	000da7e4 	.word	0x000da7e4

000d6e20 <_ZNK8particle7BleUuid4typeEv>:
}
   d6e20:	6900      	ldr	r0, [r0, #16]
   d6e22:	4770      	bx	lr

000d6e24 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d6e24:	b538      	push	{r3, r4, r5, lr}
   d6e26:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d6e28:	2214      	movs	r2, #20
   d6e2a:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d6e2c:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d6e2e:	f002 ffef 	bl	d9e10 <memset>
    if (type_ == BleUuidType::SHORT) {
   d6e32:	6923      	ldr	r3, [r4, #16]
   d6e34:	b93b      	cbnz	r3, d6e46 <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d6e36:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d6e38:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d6e3a:	7b23      	ldrb	r3, [r4, #12]
   d6e3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d6e40:	802b      	strh	r3, [r5, #0]
}
   d6e42:	4628      	mov	r0, r5
   d6e44:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d6e46:	2301      	movs	r3, #1
   d6e48:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6e4a:	f104 0210 	add.w	r2, r4, #16
   d6e4e:	462b      	mov	r3, r5
   d6e50:	f854 1b04 	ldr.w	r1, [r4], #4
   d6e54:	f843 1b04 	str.w	r1, [r3], #4
   d6e58:	4294      	cmp	r4, r2
   d6e5a:	d1f9      	bne.n	d6e50 <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d6e5c:	e7f1      	b.n	d6e42 <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d6e5e <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d6e5e:	7b42      	ldrb	r2, [r0, #13]
   d6e60:	7b00      	ldrb	r0, [r0, #12]
}
   d6e62:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d6e66:	4770      	bx	lr

000d6e68 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d6e68:	4770      	bx	lr

000d6e6a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d6e6a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d6e6c:	6902      	ldr	r2, [r0, #16]
   d6e6e:	690b      	ldr	r3, [r1, #16]
   d6e70:	429a      	cmp	r2, r3
   d6e72:	d106      	bne.n	d6e82 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d6e74:	2210      	movs	r2, #16
   d6e76:	f002 ff95 	bl	d9da4 <memcmp>
   d6e7a:	fab0 f080 	clz	r0, r0
   d6e7e:	0940      	lsrs	r0, r0, #5
}
   d6e80:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d6e82:	2000      	movs	r0, #0
   d6e84:	e7fc      	b.n	d6e80 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d6e88 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d6e88:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d6e8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d6e8e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6e90:	4b32      	ldr	r3, [pc, #200]	; (d6f5c <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d6e92:	681a      	ldr	r2, [r3, #0]
   d6e94:	6002      	str	r2, [r0, #0]
   d6e96:	685a      	ldr	r2, [r3, #4]
   d6e98:	6042      	str	r2, [r0, #4]
   d6e9a:	2500      	movs	r5, #0
   d6e9c:	891a      	ldrh	r2, [r3, #8]
   d6e9e:	7a9b      	ldrb	r3, [r3, #10]
   d6ea0:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d6ea2:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6ea4:	7283      	strb	r3, [r0, #10]
   d6ea6:	f8c0 500b 	str.w	r5, [r0, #11]
   d6eaa:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d6eac:	460e      	mov	r6, r1
   d6eae:	b321      	cbz	r1, d6efa <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d6eb0:	2124      	movs	r1, #36	; 0x24
   d6eb2:	4630      	mov	r0, r6
   d6eb4:	f003 f805 	bl	d9ec2 <strnlen>
   d6eb8:	2804      	cmp	r0, #4
   d6eba:	d121      	bne.n	d6f00 <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d6ebc:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6ec0:	af01      	add	r7, sp, #4
   d6ec2:	1cb5      	adds	r5, r6, #2
   d6ec4:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d6ec6:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d6eca:	f7ff ff01 	bl	d6cd0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d6ece:	f1b0 0800 	subs.w	r8, r0, #0
   d6ed2:	db10      	blt.n	d6ef6 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d6ed4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d6ed8:	f7ff fefa 	bl	d6cd0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d6edc:	2800      	cmp	r0, #0
   d6ede:	db0a      	blt.n	d6ef6 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d6ee0:	3502      	adds	r5, #2
   d6ee2:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d6ee6:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d6ee8:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d6eec:	d1eb      	bne.n	d6ec6 <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d6eee:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d6ef2:	ba5b      	rev16	r3, r3
   d6ef4:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d6ef6:	2300      	movs	r3, #0
   d6ef8:	6123      	str	r3, [r4, #16]
}
   d6efa:	b002      	add	sp, #8
   d6efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d6f00:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6f02:	2124      	movs	r1, #36	; 0x24
   d6f04:	4630      	mov	r0, r6
   d6f06:	f002 ffdc 	bl	d9ec2 <strnlen>
   d6f0a:	42a8      	cmp	r0, r5
   d6f0c:	d806      	bhi.n	d6f1c <_ZN8particle7BleUuid9constructEPKc+0x94>
   d6f0e:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d6f10:	2300      	movs	r3, #0
    while (len > 0) {
   d6f12:	42bc      	cmp	r4, r7
   d6f14:	d0f1      	beq.n	d6efa <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d6f16:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d6f1a:	e7fa      	b.n	d6f12 <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6f1c:	2f00      	cmp	r7, #0
   d6f1e:	d0ec      	beq.n	d6efa <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d6f20:	5d70      	ldrb	r0, [r6, r5]
   d6f22:	f7ff fed5 	bl	d6cd0 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d6f26:	0603      	lsls	r3, r0, #24
   d6f28:	d415      	bmi.n	d6f56 <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d6f2a:	0100      	lsls	r0, r0, #4
   d6f2c:	3f01      	subs	r7, #1
   d6f2e:	fa5f f880 	uxtb.w	r8, r0
   d6f32:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d6f36:	2124      	movs	r1, #36	; 0x24
   d6f38:	4630      	mov	r0, r6
   d6f3a:	f002 ffc2 	bl	d9ec2 <strnlen>
   d6f3e:	3501      	adds	r5, #1
   d6f40:	42a8      	cmp	r0, r5
   d6f42:	d908      	bls.n	d6f56 <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d6f44:	5d70      	ldrb	r0, [r6, r5]
   d6f46:	f7ff fec3 	bl	d6cd0 <_ZN8particle11hexToNibbleEc>
   d6f4a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d6f4c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d6f4e:	bfa4      	itt	ge
   d6f50:	ea40 0008 	orrge.w	r0, r0, r8
   d6f54:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6f56:	3501      	adds	r5, #1
   d6f58:	e7d3      	b.n	d6f02 <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d6f5a:	bf00      	nop
   d6f5c:	000da7c4 	.word	0x000da7c4

000d6f60 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d6f60:	b513      	push	{r0, r1, r4, lr}
   d6f62:	4604      	mov	r4, r0
   d6f64:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d6f66:	f7ff ff03 	bl	d6d70 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d6f6a:	4620      	mov	r0, r4
   d6f6c:	9901      	ldr	r1, [sp, #4]
   d6f6e:	f7ff ff8b 	bl	d6e88 <_ZN8particle7BleUuid9constructEPKc>
}
   d6f72:	4620      	mov	r0, r4
   d6f74:	b002      	add	sp, #8
   d6f76:	bd10      	pop	{r4, pc}

000d6f78 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d6f78:	b430      	push	{r4, r5}
   d6f7a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d6f7e:	b912      	cbnz	r2, d6f86 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d6f80:	6a00      	ldr	r0, [r0, #32]
}
   d6f82:	bc30      	pop	{r4, r5}
   d6f84:	4770      	bx	lr
   d6f86:	9502      	str	r5, [sp, #8]
   d6f88:	bc30      	pop	{r4, r5}
   d6f8a:	f7ff bdee 	b.w	d6b6a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d6f8e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d6f8e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6f90:	4604      	mov	r4, r0
          selfLen_(0) {
   d6f92:	4602      	mov	r2, r0
   d6f94:	f100 011f 	add.w	r1, r0, #31
   d6f98:	2300      	movs	r3, #0
   d6f9a:	f802 3b01 	strb.w	r3, [r2], #1
   d6f9e:	4291      	cmp	r1, r2
   d6fa0:	d1fb      	bne.n	d6f9a <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d6fa2:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6fa4:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d6fa6:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6fa8:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d6faa:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6fae:	4619      	mov	r1, r3
   d6fb0:	f10d 020f 	add.w	r2, sp, #15
   d6fb4:	4620      	mov	r0, r4
   d6fb6:	f7ff ffdf 	bl	d6f78 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d6fba:	4620      	mov	r0, r4
   d6fbc:	b004      	add	sp, #16
   d6fbe:	bd10      	pop	{r4, pc}

000d6fc0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d6fc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d6fc2:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d6fc4:	460e      	mov	r6, r1
   d6fc6:	ab01      	add	r3, sp, #4
   d6fc8:	6a01      	ldr	r1, [r0, #32]
   d6fca:	4604      	mov	r4, r0
   d6fcc:	f7ff fdb8 	bl	d6b40 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d6fd0:	4605      	mov	r5, r0
   d6fd2:	b178      	cbz	r0, d6ff4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d6fd4:	9801      	ldr	r0, [sp, #4]
   d6fd6:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d6fd8:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d6fda:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d6fdc:	4421      	add	r1, r4
   d6fde:	1b52      	subs	r2, r2, r5
   d6fe0:	4420      	add	r0, r4
   d6fe2:	f002 feed 	bl	d9dc0 <memcpy>
        selfLen_ -= len;
   d6fe6:	6a20      	ldr	r0, [r4, #32]
   d6fe8:	1b40      	subs	r0, r0, r5
   d6fea:	6220      	str	r0, [r4, #32]
        remove(type);
   d6fec:	4631      	mov	r1, r6
   d6fee:	4620      	mov	r0, r4
   d6ff0:	f7ff ffe6 	bl	d6fc0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d6ff4:	b002      	add	sp, #8
   d6ff6:	bd70      	pop	{r4, r5, r6, pc}

000d6ff8 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d6ff8:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   d6ffa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6ffe:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d7000:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   d7002:	8043      	strh	r3, [r0, #2]
   d7004:	220e      	movs	r2, #14
   d7006:	4629      	mov	r1, r5
   d7008:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d700a:	7105      	strb	r5, [r0, #4]
   d700c:	3006      	adds	r0, #6
   d700e:	f002 feff 	bl	d9e10 <memset>
   d7012:	f104 0014 	add.w	r0, r4, #20
   d7016:	f7ff feab 	bl	d6d70 <_ZN8particle7BleUuidC1Ev>
   d701a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d701e:	f7ff fea7 	bl	d6d70 <_ZN8particle7BleUuidC1Ev>
   d7022:	4904      	ldr	r1, [pc, #16]	; (d7034 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d7024:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d7028:	f7ff fbd6 	bl	d67d8 <_ZN6StringC1EPKc>
    _Function_base() : _M_manager(nullptr) { }
   d702c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   d702e:	4620      	mov	r0, r4
   d7030:	bd38      	pop	{r3, r4, r5, pc}
   d7032:	bf00      	nop
   d7034:	000da185 	.word	0x000da185

000d7038 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d7038:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d703a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d703e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d7042:	4293      	cmp	r3, r2
   d7044:	4618      	mov	r0, r3
   d7046:	d006      	beq.n	d7056 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d7048:	6804      	ldr	r4, [r0, #0]
   d704a:	8824      	ldrh	r4, [r4, #0]
   d704c:	428c      	cmp	r4, r1
   d704e:	f103 0308 	add.w	r3, r3, #8
   d7052:	d1f6      	bne.n	d7042 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d7054:	bd10      	pop	{r4, pc}
        return nullptr;
   d7056:	2000      	movs	r0, #0
   d7058:	e7fc      	b.n	d7054 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d705c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d705c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d705e:	4606      	mov	r6, r0
   d7060:	b085      	sub	sp, #20
   d7062:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d7064:	460d      	mov	r5, r1
   d7066:	2900      	cmp	r1, #0
   d7068:	d050      	beq.n	d710c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d706a:	2a00      	cmp	r2, #0
   d706c:	d04e      	beq.n	d710c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
    void onDataReceived(void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance) {
        onDataReceived((callback && instance) ? std::bind(callback, instance, _1, _2, _3) :(BleOnDataReceivedStdFunction) nullptr);
    }

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d706e:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   d7070:	7823      	ldrb	r3, [r4, #0]
   d7072:	2af4      	cmp	r2, #244	; 0xf4
   d7074:	bf28      	it	cs
   d7076:	22f4      	movcs	r2, #244	; 0xf4
   d7078:	b343      	cbz	r3, d70cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d707a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d707c:	0798      	lsls	r0, r3, #30
   d707e:	d509      	bpl.n	d7094 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d7080:	89a0      	ldrh	r0, [r4, #12]
   d7082:	9203      	str	r2, [sp, #12]
   d7084:	2300      	movs	r3, #0
   d7086:	f7fe fe1d 	bl	d5cc4 <hal_ble_gatt_server_set_characteristic_value>
   d708a:	2800      	cmp	r0, #0
   d708c:	9a03      	ldr	r2, [sp, #12]
   d708e:	da03      	bge.n	d7098 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d7090:	b005      	add	sp, #20
   d7092:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d7094:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d7098:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d709a:	7923      	ldrb	r3, [r4, #4]
   d709c:	06d9      	lsls	r1, r3, #27
   d709e:	d509      	bpl.n	d70b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d70a0:	2f01      	cmp	r7, #1
   d70a2:	d007      	beq.n	d70b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d70a4:	89a0      	ldrh	r0, [r4, #12]
   d70a6:	2300      	movs	r3, #0
   d70a8:	4629      	mov	r1, r5
}
   d70aa:	b005      	add	sp, #20
   d70ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d70b0:	f7fe be44 	b.w	d5d3c <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d70b4:	069b      	lsls	r3, r3, #26
   d70b6:	d5eb      	bpl.n	d7090 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d70b8:	2f02      	cmp	r7, #2
   d70ba:	d0e9      	beq.n	d7090 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d70bc:	89a0      	ldrh	r0, [r4, #12]
   d70be:	2300      	movs	r3, #0
   d70c0:	4629      	mov	r1, r5
}
   d70c2:	b005      	add	sp, #20
   d70c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d70c8:	f7fe be42 	b.w	d5d50 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d70cc:	8860      	ldrh	r0, [r4, #2]
   d70ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d70d2:	4288      	cmp	r0, r1
   d70d4:	d01c      	beq.n	d7110 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d70d6:	7921      	ldrb	r1, [r4, #4]
   d70d8:	074e      	lsls	r6, r1, #29
   d70da:	d501      	bpl.n	d70e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d70dc:	2f01      	cmp	r7, #1
   d70de:	d104      	bne.n	d70ea <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d70e0:	070b      	lsls	r3, r1, #28
   d70e2:	d409      	bmi.n	d70f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d70e4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d70e8:	e7d2      	b.n	d7090 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d70ea:	89a1      	ldrh	r1, [r4, #12]
   d70ec:	9300      	str	r3, [sp, #0]
   d70ee:	4613      	mov	r3, r2
   d70f0:	462a      	mov	r2, r5
   d70f2:	f7fe fdfb 	bl	d5cec <hal_ble_gatt_client_write_without_response>
   d70f6:	e7cb      	b.n	d7090 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d70f8:	2f02      	cmp	r7, #2
   d70fa:	d0f3      	beq.n	d70e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d70fc:	2300      	movs	r3, #0
   d70fe:	89a1      	ldrh	r1, [r4, #12]
   d7100:	9300      	str	r3, [sp, #0]
   d7102:	4613      	mov	r3, r2
   d7104:	462a      	mov	r2, r5
   d7106:	f7fe fde7 	bl	d5cd8 <hal_ble_gatt_client_write_with_response>
   d710a:	e7c1      	b.n	d7090 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d710c:	4802      	ldr	r0, [pc, #8]	; (d7118 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d710e:	e7bf      	b.n	d7090 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d7110:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d7114:	e7bc      	b.n	d7090 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d7116:	bf00      	nop
   d7118:	fffffef2 	.word	0xfffffef2

000d711c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   d711c:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   d711e:	688a      	ldr	r2, [r1, #8]
   d7120:	6809      	ldr	r1, [r1, #0]
   d7122:	f7ff bf9b 	b.w	d705c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000d7126 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d7126:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7128:	460c      	mov	r4, r1
   d712a:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d712c:	21f4      	movs	r1, #244	; 0xf4
   d712e:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d7130:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d7132:	f002 fec6 	bl	d9ec2 <strnlen>
   d7136:	9b01      	ldr	r3, [sp, #4]
   d7138:	4602      	mov	r2, r0
   d713a:	4621      	mov	r1, r4
   d713c:	4628      	mov	r0, r5
}
   d713e:	b003      	add	sp, #12
   d7140:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d7144:	f7ff bf8a 	b.w	d705c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000d7148 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d7148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d714c:	2600      	movs	r6, #0
   d714e:	6006      	str	r6, [r0, #0]
   d7150:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7152:	2028      	movs	r0, #40	; 0x28
   d7154:	460c      	mov	r4, r1
   d7156:	f7fc ff9e 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d715a:	1e05      	subs	r5, r0, #0
   d715c:	f105 080c 	add.w	r8, r5, #12
   d7160:	d00f      	beq.n	d7182 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d7162:	2301      	movs	r3, #1
   d7164:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d7168:	4b08      	ldr	r3, [pc, #32]	; (d718c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d716a:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   d716c:	4640      	mov	r0, r8
   d716e:	f7ff fdff 	bl	d6d70 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   d7172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   d7174:	622e      	str	r6, [r5, #32]
   d7176:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   d717a:	4646      	mov	r6, r8
   d717c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d717e:	6823      	ldr	r3, [r4, #0]
   d7180:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   d7182:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d7186:	4638      	mov	r0, r7
   d7188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d718c:	000da78c 	.word	0x000da78c

000d7190 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d7190:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d7192:	2500      	movs	r5, #0
   d7194:	6005      	str	r5, [r0, #0]
   d7196:	4606      	mov	r6, r0
   d7198:	2030      	movs	r0, #48	; 0x30
   d719a:	f7fc ff7c 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d719e:	4604      	mov	r4, r0
   d71a0:	b188      	cbz	r0, d71c6 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d71a2:	2301      	movs	r3, #1
   d71a4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d71a8:	4b09      	ldr	r3, [pc, #36]	; (d71d0 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d71aa:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d71ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d71b0:	8183      	strh	r3, [r0, #12]
   d71b2:	300e      	adds	r0, #14
   d71b4:	f7ff fdd2 	bl	d6d5c <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d71b8:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d71bc:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d71c0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d71c4:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d71c6:	6074      	str	r4, [r6, #4]
   d71c8:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d71ca:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d71cc:	4630      	mov	r0, r6
   d71ce:	bd70      	pop	{r4, r5, r6, pc}
   d71d0:	000da7a8 	.word	0x000da7a8

000d71d4 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d71d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d71d6:	460d      	mov	r5, r1
   d71d8:	4604      	mov	r4, r0
    WiringBleLock lk;
   d71da:	a801      	add	r0, sp, #4
   d71dc:	f7ff fd8d 	bl	d6cfa <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d71e0:	682a      	ldr	r2, [r5, #0]
   d71e2:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d71e6:	6023      	str	r3, [r4, #0]
   d71e8:	6853      	ldr	r3, [r2, #4]
   d71ea:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d71ec:	a801      	add	r0, sp, #4
   d71ee:	f7ff fd8c 	bl	d6d0a <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d71f2:	4620      	mov	r0, r4
   d71f4:	b003      	add	sp, #12
   d71f6:	bd30      	pop	{r4, r5, pc}

000d71f8 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d71f8:	b530      	push	{r4, r5, lr}
   d71fa:	4605      	mov	r5, r0
   d71fc:	b087      	sub	sp, #28
   d71fe:	460c      	mov	r4, r1
    WiringBleLock lk;
   d7200:	a801      	add	r0, sp, #4
   d7202:	f7ff fd7a 	bl	d6cfa <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d7206:	682a      	ldr	r2, [r5, #0]
   d7208:	6823      	ldr	r3, [r4, #0]
   d720a:	8812      	ldrh	r2, [r2, #0]
   d720c:	881b      	ldrh	r3, [r3, #0]
   d720e:	429a      	cmp	r2, r3
   d7210:	d10d      	bne.n	d722e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d7212:	4629      	mov	r1, r5
   d7214:	a802      	add	r0, sp, #8
   d7216:	f7ff ffdd 	bl	d71d4 <_ZNK8particle13BlePeerDevice7addressEv>
   d721a:	4621      	mov	r1, r4
   d721c:	a804      	add	r0, sp, #16
   d721e:	f7ff ffd9 	bl	d71d4 <_ZNK8particle13BlePeerDevice7addressEv>
   d7222:	a904      	add	r1, sp, #16
   d7224:	a802      	add	r0, sp, #8
   d7226:	f7ff fd85 	bl	d6d34 <_ZNK8particle10BleAddresseqERKS0_>
   d722a:	4604      	mov	r4, r0
   d722c:	b900      	cbnz	r0, d7230 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d722e:	2400      	movs	r4, #0
    WiringBleLock lk;
   d7230:	a801      	add	r0, sp, #4
   d7232:	f7ff fd6a 	bl	d6d0a <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d7236:	4620      	mov	r0, r4
   d7238:	b007      	add	sp, #28
   d723a:	bd30      	pop	{r4, r5, pc}

000d723c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d723c:	b510      	push	{r4, lr}
   d723e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d7240:	2054      	movs	r0, #84	; 0x54
   d7242:	f7fc ff28 	bl	d4096 <_Znwj>
   d7246:	4601      	mov	r1, r0
   d7248:	b160      	cbz	r0, d7264 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d724a:	2300      	movs	r3, #0
   d724c:	e9c0 3300 	strd	r3, r3, [r0]
   d7250:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d7254:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d7258:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d725c:	6203      	str	r3, [r0, #32]
   d725e:	62c3      	str	r3, [r0, #44]	; 0x2c
   d7260:	63c3      	str	r3, [r0, #60]	; 0x3c
   d7262:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d7264:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d7266:	b919      	cbnz	r1, d7270 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d7268:	4a09      	ldr	r2, [pc, #36]	; (d7290 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d726a:	200a      	movs	r0, #10
   d726c:	f7fe ff12 	bl	d6094 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d7270:	2000      	movs	r0, #0
   d7272:	f7fe fceb 	bl	d5c4c <hal_ble_stack_init>
   d7276:	b120      	cbz	r0, d7282 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d7278:	4a05      	ldr	r2, [pc, #20]	; (d7290 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d727a:	2100      	movs	r1, #0
   d727c:	200a      	movs	r0, #10
   d727e:	f7fe ff09 	bl	d6094 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d7282:	6821      	ldr	r1, [r4, #0]
   d7284:	4803      	ldr	r0, [pc, #12]	; (d7294 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d7286:	2200      	movs	r2, #0
   d7288:	f7fe fd4e 	bl	d5d28 <hal_ble_set_callback_on_periph_link_events>
}
   d728c:	4620      	mov	r0, r4
   d728e:	bd10      	pop	{r4, pc}
   d7290:	000d5bdd 	.word	0x000d5bdd
   d7294:	000d771d 	.word	0x000d771d

000d7298 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d7298:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d729a:	4c0b      	ldr	r4, [pc, #44]	; (d72c8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d729c:	7823      	ldrb	r3, [r4, #0]
   d729e:	f3bf 8f5b 	dmb	ish
   d72a2:	07db      	lsls	r3, r3, #31
   d72a4:	d40e      	bmi.n	d72c4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d72a6:	4620      	mov	r0, r4
   d72a8:	f7fc fefb 	bl	d40a2 <__cxa_guard_acquire>
   d72ac:	b150      	cbz	r0, d72c4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d72ae:	4807      	ldr	r0, [pc, #28]	; (d72cc <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d72b0:	f7ff ffc4 	bl	d723c <_ZN8particle14BleLocalDeviceC1Ev>
   d72b4:	4620      	mov	r0, r4
   d72b6:	f7fc fef9 	bl	d40ac <__cxa_guard_release>
   d72ba:	4a05      	ldr	r2, [pc, #20]	; (d72d0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d72bc:	4905      	ldr	r1, [pc, #20]	; (d72d4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d72be:	4803      	ldr	r0, [pc, #12]	; (d72cc <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d72c0:	f001 ff26 	bl	d9110 <__aeabi_atexit>
    return instance;
}
   d72c4:	4801      	ldr	r0, [pc, #4]	; (d72cc <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d72c6:	bd10      	pop	{r4, pc}
   d72c8:	2003e654 	.word	0x2003e654
   d72cc:	2003e660 	.word	0x2003e660
   d72d0:	2003df60 	.word	0x2003df60
   d72d4:	000d74dd 	.word	0x000d74dd

000d72d8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d72d8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   d72da:	6803      	ldr	r3, [r0, #0]
   d72dc:	3b09      	subs	r3, #9
   d72de:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d72e0:	b08d      	sub	sp, #52	; 0x34
   d72e2:	4604      	mov	r4, r0
   d72e4:	460d      	mov	r5, r1
    switch (event->type) {
   d72e6:	d811      	bhi.n	d730c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d72e8:	f7ff ffd6 	bl	d7298 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d72ec:	88a1      	ldrh	r1, [r4, #4]
   d72ee:	6800      	ldr	r0, [r0, #0]
   d72f0:	f7ff fea2 	bl	d7038 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d72f4:	4603      	mov	r3, r0
   d72f6:	b958      	cbnz	r0, d7310 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d72f8:	2220      	movs	r2, #32
   d72fa:	e9cd 2004 	strd	r2, r0, [sp, #16]
   d72fe:	4a0b      	ldr	r2, [pc, #44]	; (d732c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d7300:	9200      	str	r2, [sp, #0]
   d7302:	490b      	ldr	r1, [pc, #44]	; (d7330 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d7304:	aa04      	add	r2, sp, #16
   d7306:	2032      	movs	r0, #50	; 0x32
   d7308:	f7fe fecc 	bl	d60a4 <log_message>
}
   d730c:	b00d      	add	sp, #52	; 0x34
   d730e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   d7310:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   d7312:	2a00      	cmp	r2, #0
   d7314:	d0fa      	beq.n	d730c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   d7316:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d731a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   d731e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   d7322:	6dac      	ldr	r4, [r5, #88]	; 0x58
   d7324:	aa04      	add	r2, sp, #16
   d7326:	a903      	add	r1, sp, #12
   d7328:	47a0      	blx	r4
}
   d732a:	e7ef      	b.n	d730c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   d732c:	000da699 	.word	0x000da699
   d7330:	000da672 	.word	0x000da672

000d7334 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d7334:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   d7336:	2000      	movs	r0, #0
   d7338:	f7fe fc88 	bl	d5c4c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   d733c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d7340:	bd08      	pop	{r3, pc}

000d7342 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d7342:	4608      	mov	r0, r1
   d7344:	b911      	cbnz	r1, d734c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d7346:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d7348:	f7fe bc90 	b.w	d5c6c <hal_ble_gap_set_advertising_data>
   d734c:	6a09      	ldr	r1, [r1, #32]
   d734e:	2200      	movs	r2, #0
   d7350:	e7fa      	b.n	d7348 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d7352 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d7352:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d7354:	4608      	mov	r0, r1
   d7356:	b929      	cbnz	r1, d7364 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d7358:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d735a:	b003      	add	sp, #12
   d735c:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d7360:	f7fe bc8c 	b.w	d5c7c <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d7364:	2101      	movs	r1, #1
   d7366:	9001      	str	r0, [sp, #4]
   d7368:	f7ff fe2a 	bl	d6fc0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d736c:	9801      	ldr	r0, [sp, #4]
   d736e:	2200      	movs	r2, #0
   d7370:	6a01      	ldr	r1, [r0, #32]
   d7372:	e7f2      	b.n	d735a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d7374 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d7374:	b538      	push	{r3, r4, r5, lr}
   d7376:	4604      	mov	r4, r0
   d7378:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   d737a:	f7ff ffe2 	bl	d7342 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d737e:	2800      	cmp	r0, #0
   d7380:	db0a      	blt.n	d7398 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   d7382:	4629      	mov	r1, r5
   d7384:	4620      	mov	r0, r4
   d7386:	f7ff ffe4 	bl	d7352 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d738a:	2800      	cmp	r0, #0
   d738c:	db04      	blt.n	d7398 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   d738e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   d7392:	2000      	movs	r0, #0
   d7394:	f7fe bc7a 	b.w	d5c8c <hal_ble_gap_start_advertising>
}
   d7398:	bd38      	pop	{r3, r4, r5, pc}

000d739a <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   d739a:	6803      	ldr	r3, [r0, #0]
   d739c:	69d8      	ldr	r0, [r3, #28]
}
   d739e:	2800      	cmp	r0, #0
   d73a0:	bfd4      	ite	le
   d73a2:	2000      	movle	r0, #0
   d73a4:	2001      	movgt	r0, #1
   d73a6:	4770      	bx	lr

000d73a8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d73a8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d73aa:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d73ac:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d73ae:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d73b0:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d73b2:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d73b4:	f7fc fe6f 	bl	d4096 <_Znwj>
   d73b8:	b118      	cbz	r0, d73c2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d73ba:	682b      	ldr	r3, [r5, #0]
   d73bc:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d73be:	686b      	ldr	r3, [r5, #4]
   d73c0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d73c2:	4b03      	ldr	r3, [pc, #12]	; (d73d0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   d73c4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d73c6:	4b03      	ldr	r3, [pc, #12]	; (d73d4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d73c8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d73ca:	60a3      	str	r3, [r4, #8]
      }
   d73cc:	4620      	mov	r0, r4
   d73ce:	bd38      	pop	{r3, r4, r5, pc}
   d73d0:	000d6c85 	.word	0x000d6c85
   d73d4:	000d6c09 	.word	0x000d6c09

000d73d8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d73d8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d73da:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d73dc:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d73de:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d73e0:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d73e2:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d73e4:	f7fc fe57 	bl	d4096 <_Znwj>
   d73e8:	b118      	cbz	r0, d73f2 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   d73ea:	682b      	ldr	r3, [r5, #0]
   d73ec:	6003      	str	r3, [r0, #0]
   d73ee:	686b      	ldr	r3, [r5, #4]
   d73f0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d73f2:	4b03      	ldr	r3, [pc, #12]	; (d7400 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   d73f4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d73f6:	4b03      	ldr	r3, [pc, #12]	; (d7404 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d73f8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d73fa:	60a3      	str	r3, [r4, #8]
      }
   d73fc:	4620      	mov	r0, r4
   d73fe:	bd38      	pop	{r3, r4, r5, pc}
   d7400:	000d6c9d 	.word	0x000d6c9d
   d7404:	000d6c47 	.word	0x000d6c47

000d7408 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d7408:	680b      	ldr	r3, [r1, #0]
   d740a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d740c:	b113      	cbz	r3, d7414 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d740e:	685a      	ldr	r2, [r3, #4]
   d7410:	3201      	adds	r2, #1
   d7412:	605a      	str	r2, [r3, #4]
      }
   d7414:	4770      	bx	lr

000d7416 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d7416:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7418:	f851 3b04 	ldr.w	r3, [r1], #4
   d741c:	4604      	mov	r4, r0
   d741e:	f840 3b04 	str.w	r3, [r0], #4
   d7422:	f7ff fff1 	bl	d7408 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d7426:	6823      	ldr	r3, [r4, #0]
   d7428:	b90b      	cbnz	r3, d742e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d742a:	f7ff fbe5 	bl	d6bf8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d742e:	4620      	mov	r0, r4
   d7430:	bd10      	pop	{r4, pc}

000d7432 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d7432:	b510      	push	{r4, lr}
   d7434:	f851 3b04 	ldr.w	r3, [r1], #4
   d7438:	4604      	mov	r4, r0
   d743a:	f840 3b04 	str.w	r3, [r0], #4
   d743e:	f7ff ffe3 	bl	d7408 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d7442:	4620      	mov	r0, r4
   d7444:	bd10      	pop	{r4, pc}

000d7446 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d7446:	b510      	push	{r4, lr}
   d7448:	f851 3b04 	ldr.w	r3, [r1], #4
   d744c:	4604      	mov	r4, r0
   d744e:	f840 3b04 	str.w	r3, [r0], #4
   d7452:	f7ff ffd9 	bl	d7408 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d7456:	4620      	mov	r0, r4
   d7458:	bd10      	pop	{r4, pc}

000d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d745a:	b510      	push	{r4, lr}
   d745c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d745e:	6800      	ldr	r0, [r0, #0]
   d7460:	b128      	cbz	r0, d746e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d7462:	6843      	ldr	r3, [r0, #4]
   d7464:	3b01      	subs	r3, #1
   d7466:	6043      	str	r3, [r0, #4]
   d7468:	b90b      	cbnz	r3, d746e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d746a:	f7ff fb38 	bl	d6ade <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d746e:	4620      	mov	r0, r4
   d7470:	bd10      	pop	{r4, pc}

000d7472 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d7472:	b510      	push	{r4, lr}
   d7474:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d7476:	3004      	adds	r0, #4
   d7478:	f7ff ffef 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d747c:	4620      	mov	r0, r4
   d747e:	bd10      	pop	{r4, pc}

000d7480 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7480:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7482:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7486:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d7488:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d748c:	42ae      	cmp	r6, r5
   d748e:	d004      	beq.n	d749a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d7490:	1d28      	adds	r0, r5, #4
   d7492:	f7ff ffe2 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7496:	3508      	adds	r5, #8
   d7498:	e7f8      	b.n	d748c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d749a:	6820      	ldr	r0, [r4, #0]
   d749c:	f7fe fef8 	bl	d6290 <free>
}
   d74a0:	4620      	mov	r0, r4
   d74a2:	bd70      	pop	{r4, r5, r6, pc}

000d74a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d74a4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d74a6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d74aa:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d74ac:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d74b0:	42ae      	cmp	r6, r5
   d74b2:	d004      	beq.n	d74be <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d74b4:	1d28      	adds	r0, r5, #4
   d74b6:	f7ff ffd0 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d74ba:	3508      	adds	r5, #8
   d74bc:	e7f8      	b.n	d74b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d74be:	6820      	ldr	r0, [r4, #0]
   d74c0:	f7fe fee6 	bl	d6290 <free>
}
   d74c4:	4620      	mov	r0, r4
   d74c6:	bd70      	pop	{r4, r5, r6, pc}

000d74c8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d74c8:	b510      	push	{r4, lr}
   d74ca:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d74cc:	3024      	adds	r0, #36	; 0x24
   d74ce:	f7ff ffe9 	bl	d74a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d74d2:	f104 0018 	add.w	r0, r4, #24
   d74d6:	f7ff ffd3 	bl	d7480 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d74da:	bd10      	pop	{r4, pc}

000d74dc <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d74dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d74de:	6804      	ldr	r4, [r0, #0]
   d74e0:	4606      	mov	r6, r0
   d74e2:	b324      	cbz	r4, d752e <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   d74e4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d74e8:	f7ff fbde 	bl	d6ca8 <_ZNSt14_Function_baseD1Ev>
   d74ec:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d74f0:	f7ff fbda 	bl	d6ca8 <_ZNSt14_Function_baseD1Ev>
   d74f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d74f8:	f7ff fbd6 	bl	d6ca8 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d74fc:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d7500:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d7504:	42af      	cmp	r7, r5
   d7506:	d004      	beq.n	d7512 <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d7508:	1d28      	adds	r0, r5, #4
   d750a:	f7ff ffa6 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d750e:	3508      	adds	r5, #8
   d7510:	e7f8      	b.n	d7504 <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d7512:	69a0      	ldr	r0, [r4, #24]
   d7514:	f7fe febc 	bl	d6290 <free>
    ~BleLocalDeviceImpl() = default;
   d7518:	f104 000c 	add.w	r0, r4, #12
   d751c:	f7ff ffc2 	bl	d74a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d7520:	4620      	mov	r0, r4
   d7522:	f7ff ffad 	bl	d7480 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d7526:	2154      	movs	r1, #84	; 0x54
   d7528:	4620      	mov	r0, r4
   d752a:	f001 fdf6 	bl	d911a <_ZdlPvj>
   d752e:	4630      	mov	r0, r6
   d7530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7532 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   d7532:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7534:	b510      	push	{r4, lr}
      if (_M_empty())
   d7536:	b90a      	cbnz	r2, d753c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d7538:	f001 fdf5 	bl	d9126 <_ZSt25__throw_bad_function_callv>
    }
   d753c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7540:	68c3      	ldr	r3, [r0, #12]
   d7542:	4718      	bx	r3

000d7544 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
inline void spark::Vector<T, AllocatorT>::clear() {
   d7544:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7546:	e9d0 5300 	ldrd	r5, r3, [r0]
inline void spark::Vector<T, AllocatorT>::clear() {
   d754a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d754c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d7550:	42ae      	cmp	r6, r5
   d7552:	d004      	beq.n	d755e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
   d7554:	1d28      	adds	r0, r5, #4
   d7556:	f7ff ff80 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d755a:	3508      	adds	r5, #8
   d755c:	e7f8      	b.n	d7550 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
    size_ = 0;
   d755e:	2300      	movs	r3, #0
   d7560:	6063      	str	r3, [r4, #4]
}
   d7562:	bd70      	pop	{r4, r5, r6, pc}

000d7564 <_ZNK8particle14BleLocalDevice3offEv>:
int BleLocalDevice::off() const {
   d7564:	b513      	push	{r0, r1, r4, lr}
   d7566:	4604      	mov	r4, r0
    CHECK(hal_ble_stack_deinit(nullptr));
   d7568:	2000      	movs	r0, #0
   d756a:	f7fe fb77 	bl	d5c5c <hal_ble_stack_deinit>
   d756e:	2800      	cmp	r0, #0
   d7570:	db0a      	blt.n	d7588 <_ZNK8particle14BleLocalDevice3offEv+0x24>
        WiringBleLock lk;
   d7572:	a801      	add	r0, sp, #4
   d7574:	f7ff fbc1 	bl	d6cfa <_ZN8particle3ble13WiringBleLockC1Ev>
        return peers_;
   d7578:	6820      	ldr	r0, [r4, #0]
        impl()->peers().clear();
   d757a:	3018      	adds	r0, #24
   d757c:	f7ff ffe2 	bl	d7544 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
        WiringBleLock lk;
   d7580:	a801      	add	r0, sp, #4
   d7582:	f7ff fbc2 	bl	d6d0a <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   d7586:	2000      	movs	r0, #0
}
   d7588:	b002      	add	sp, #8
   d758a:	bd10      	pop	{r4, pc}

000d758c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d758c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d758e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7590:	4604      	mov	r4, r0
   d7592:	460d      	mov	r5, r1
   d7594:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7596:	d914      	bls.n	d75c2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7598:	4290      	cmp	r0, r2
   d759a:	d213      	bcs.n	d75c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d759c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d75a0:	1a75      	subs	r5, r6, r1
   d75a2:	f1a1 0708 	sub.w	r7, r1, #8
   d75a6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d75a8:	42b7      	cmp	r7, r6
   d75aa:	d018      	beq.n	d75de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d75ac:	b11c      	cbz	r4, d75b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d75ae:	4631      	mov	r1, r6
   d75b0:	4620      	mov	r0, r4
   d75b2:	f7ff ff48 	bl	d7446 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d75b6:	1d30      	adds	r0, r6, #4
   d75b8:	f7ff ff4f 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d75bc:	3e08      	subs	r6, #8
   d75be:	3c08      	subs	r4, #8
   d75c0:	e7f2      	b.n	d75a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d75c2:	d00c      	beq.n	d75de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d75c4:	42b5      	cmp	r5, r6
   d75c6:	d00a      	beq.n	d75de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d75c8:	b11c      	cbz	r4, d75d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d75ca:	4629      	mov	r1, r5
   d75cc:	4620      	mov	r0, r4
   d75ce:	f7ff ff3a 	bl	d7446 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d75d2:	1d28      	adds	r0, r5, #4
   d75d4:	f7ff ff41 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d75d8:	3508      	adds	r5, #8
   d75da:	3408      	adds	r4, #8
   d75dc:	e7f2      	b.n	d75c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d75de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d75e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d75e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d75e4:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d75e8:	4605      	mov	r5, r0
   d75ea:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d75ec:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d75f0:	42a7      	cmp	r7, r4
   d75f2:	d103      	bne.n	d75fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d75f4:	2600      	movs	r6, #0
}
   d75f6:	4630      	mov	r0, r6
   d75f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d75fc:	4641      	mov	r1, r8
   d75fe:	4620      	mov	r0, r4
   d7600:	f7ff fdfa 	bl	d71f8 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d7604:	4606      	mov	r6, r0
   d7606:	b908      	cbnz	r0, d760c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d7608:	3408      	adds	r4, #8
   d760a:	e7f1      	b.n	d75f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d760c:	2c00      	cmp	r4, #0
   d760e:	d0f1      	beq.n	d75f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d7610:	1d20      	adds	r0, r4, #4
   d7612:	f7ff ff22 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d7616:	e9d5 3200 	ldrd	r3, r2, [r5]
   d761a:	f104 0108 	add.w	r1, r4, #8
   d761e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7622:	4620      	mov	r0, r4
   d7624:	f7ff ffb2 	bl	d758c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d7628:	686b      	ldr	r3, [r5, #4]
   d762a:	3b01      	subs	r3, #1
   d762c:	606b      	str	r3, [r5, #4]
    return true;
   d762e:	e7e2      	b.n	d75f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d7630 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   d7630:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7632:	4607      	mov	r7, r0
   d7634:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   d7636:	4668      	mov	r0, sp
   d7638:	f7ff fb5f 	bl	d6cfa <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d763c:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   d763e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   d7642:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   d7646:	42ac      	cmp	r4, r5
   d7648:	d02b      	beq.n	d76a2 <_ZNK8particle14BleLocalDevice10disconnectEv+0x72>
        hal_ble_conn_info_t connInfo = {};
   d764a:	2224      	movs	r2, #36	; 0x24
   d764c:	2100      	movs	r1, #0
   d764e:	a801      	add	r0, sp, #4
   d7650:	f002 fbde 	bl	d9e10 <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   d7654:	6823      	ldr	r3, [r4, #0]
   d7656:	2200      	movs	r2, #0
   d7658:	8818      	ldrh	r0, [r3, #0]
   d765a:	a901      	add	r1, sp, #4
   d765c:	f7fe fb50 	bl	d5d00 <hal_ble_gap_get_connection_info>
   d7660:	4606      	mov	r6, r0
   d7662:	b108      	cbz	r0, d7668 <_ZNK8particle14BleLocalDevice10disconnectEv+0x38>
    for (auto& p : impl()->peers()) {
   d7664:	3408      	adds	r4, #8
   d7666:	e7ee      	b.n	d7646 <_ZNK8particle14BleLocalDevice10disconnectEv+0x16>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   d7668:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d766c:	2b01      	cmp	r3, #1
   d766e:	d1f9      	bne.n	d7664 <_ZNK8particle14BleLocalDevice10disconnectEv+0x34>
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
   d7670:	4668      	mov	r0, sp
   d7672:	f7ff fa59 	bl	d6b28 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   d7676:	6823      	ldr	r3, [r4, #0]
   d7678:	4631      	mov	r1, r6
   d767a:	8818      	ldrh	r0, [r3, #0]
   d767c:	f7fe fb0e 	bl	d5c9c <hal_ble_gap_disconnect>
   d7680:	1e05      	subs	r5, r0, #0
   d7682:	db08      	blt.n	d7696 <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>
            lk.lock();
   d7684:	4668      	mov	r0, sp
   d7686:	f7ff fa43 	bl	d6b10 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
        return peers_;
   d768a:	6838      	ldr	r0, [r7, #0]
            impl()->peers().removeOne(p);
   d768c:	4621      	mov	r1, r4
   d768e:	3018      	adds	r0, #24
   d7690:	f7ff ffa6 	bl	d75e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
            return SYSTEM_ERROR_NONE;
   d7694:	4635      	mov	r5, r6
    WiringBleLock lk;
   d7696:	4668      	mov	r0, sp
   d7698:	f7ff fb37 	bl	d6d0a <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   d769c:	4628      	mov	r0, r5
   d769e:	b00b      	add	sp, #44	; 0x2c
   d76a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   d76a2:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   d76a6:	e7f6      	b.n	d7696 <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>

000d76a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d76a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d76aa:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d76ac:	6846      	ldr	r6, [r0, #4]
   d76ae:	4668      	mov	r0, sp
   d76b0:	f7ff fec9 	bl	d7446 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d76b4:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d76b8:	429f      	cmp	r7, r3
   d76ba:	db12      	blt.n	d76e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d76bc:	3701      	adds	r7, #1
        if (n > 0) {
   d76be:	2f00      	cmp	r7, #0
   d76c0:	dd29      	ble.n	d7716 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d76c2:	00f8      	lsls	r0, r7, #3
   d76c4:	f7fe fddc 	bl	d6280 <malloc>
            if (!d) {
   d76c8:	4605      	mov	r5, r0
   d76ca:	b1f0      	cbz	r0, d770a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d76cc:	e9d4 1200 	ldrd	r1, r2, [r4]
   d76d0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d76d4:	f7ff ff5a 	bl	d758c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d76d8:	6820      	ldr	r0, [r4, #0]
   d76da:	f7fe fdd9 	bl	d6290 <free>
        data_ = d;
   d76de:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d76e0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d76e2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d76e4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d76e6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d76ea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d76ee:	4631      	mov	r1, r6
   d76f0:	f106 0008 	add.w	r0, r6, #8
   d76f4:	f7ff ff4a 	bl	d758c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d76f8:	b11e      	cbz	r6, d7702 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d76fa:	4669      	mov	r1, sp
   d76fc:	4630      	mov	r0, r6
   d76fe:	f7ff fea2 	bl	d7446 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d7702:	6863      	ldr	r3, [r4, #4]
   d7704:	3301      	adds	r3, #1
   d7706:	6063      	str	r3, [r4, #4]
    return true;
   d7708:	2501      	movs	r5, #1
   d770a:	a801      	add	r0, sp, #4
   d770c:	f7ff fea5 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7710:	4628      	mov	r0, r5
   d7712:	b003      	add	sp, #12
   d7714:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d7716:	2500      	movs	r5, #0
   d7718:	e7de      	b.n	d76d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>
	...

000d771c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d771c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7720:	4605      	mov	r5, r0
   d7722:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d7724:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d7726:	460c      	mov	r4, r1
        WiringBleLock lk;
   d7728:	f7ff fae7 	bl	d6cfa <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d772c:	682e      	ldr	r6, [r5, #0]
   d772e:	2e04      	cmp	r6, #4
   d7730:	d06b      	beq.n	d780a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d7732:	d807      	bhi.n	d7744 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d7734:	2e03      	cmp	r6, #3
   d7736:	d028      	beq.n	d778a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d7738:	a803      	add	r0, sp, #12
   d773a:	f7ff fae6 	bl	d6d0a <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d773e:	b00e      	add	sp, #56	; 0x38
   d7740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d7744:	f1a6 030c 	sub.w	r3, r6, #12
   d7748:	2b03      	cmp	r3, #3
   d774a:	d8f5      	bhi.n	d7738 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d774c:	89a9      	ldrh	r1, [r5, #12]
   d774e:	4620      	mov	r0, r4
   d7750:	f7ff fc72 	bl	d7038 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d7754:	4607      	mov	r7, r0
   d7756:	2800      	cmp	r0, #0
   d7758:	d0ee      	beq.n	d7738 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d775a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d775c:	2b00      	cmp	r3, #0
   d775e:	d0eb      	beq.n	d7738 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d7760:	2210      	movs	r2, #16
   d7762:	2100      	movs	r1, #0
   d7764:	a807      	add	r0, sp, #28
   d7766:	f002 fb53 	bl	d9e10 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d776a:	2e0d      	cmp	r6, #13
                        };
   d776c:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d776e:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d7772:	f040 8092 	bne.w	d789a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d7776:	686b      	ldr	r3, [r5, #4]
   d7778:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d777a:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d777c:	9308      	str	r3, [sp, #32]
   d777e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d7780:	a906      	add	r1, sp, #24
   d7782:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d7786:	4798      	blx	r3
   d7788:	e7d6      	b.n	d7738 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d778a:	a804      	add	r0, sp, #16
   d778c:	f7ff fd00 	bl	d7190 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d7790:	9b04      	ldr	r3, [sp, #16]
   d7792:	89aa      	ldrh	r2, [r5, #12]
   d7794:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d7796:	6869      	ldr	r1, [r5, #4]
   d7798:	9804      	ldr	r0, [sp, #16]
   d779a:	3108      	adds	r1, #8
   d779c:	3002      	adds	r0, #2
   d779e:	f7ff fabc 	bl	d6d1a <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d77a2:	a904      	add	r1, sp, #16
   d77a4:	a806      	add	r0, sp, #24
   d77a6:	f7ff fe4e 	bl	d7446 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d77aa:	a906      	add	r1, sp, #24
   d77ac:	f104 0018 	add.w	r0, r4, #24
   d77b0:	f7ff ff7a 	bl	d76a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d77b4:	4605      	mov	r5, r0
   d77b6:	a807      	add	r0, sp, #28
   d77b8:	f7ff fe4f 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d77bc:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d77be:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d77c0:	b98d      	cbnz	r5, d77e6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d77c2:	4b3e      	ldr	r3, [pc, #248]	; (d78bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d77c4:	493e      	ldr	r1, [pc, #248]	; (d78c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d77c6:	9300      	str	r3, [sp, #0]
   d77c8:	2032      	movs	r0, #50	; 0x32
   d77ca:	462b      	mov	r3, r5
   d77cc:	aa06      	add	r2, sp, #24
   d77ce:	9507      	str	r5, [sp, #28]
   d77d0:	f7fe fc68 	bl	d60a4 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d77d4:	9b04      	ldr	r3, [sp, #16]
   d77d6:	4629      	mov	r1, r5
   d77d8:	8818      	ldrh	r0, [r3, #0]
   d77da:	f7fe fa5f 	bl	d5c9c <hal_ble_gap_disconnect>
   d77de:	a805      	add	r0, sp, #20
   d77e0:	f7ff fe3b 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d77e4:	e7a8      	b.n	d7738 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d77e6:	4a37      	ldr	r2, [pc, #220]	; (d78c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d77e8:	9200      	str	r2, [sp, #0]
   d77ea:	2300      	movs	r3, #0
   d77ec:	4934      	ldr	r1, [pc, #208]	; (d78c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d77ee:	9307      	str	r3, [sp, #28]
   d77f0:	aa06      	add	r2, sp, #24
   d77f2:	2001      	movs	r0, #1
   d77f4:	f7fe fc56 	bl	d60a4 <log_message>
                if (impl->connectedCallback_) {
   d77f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d77fa:	2b00      	cmp	r3, #0
   d77fc:	d0ef      	beq.n	d77de <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d77fe:	a904      	add	r1, sp, #16
   d7800:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7804:	f7ff fe95 	bl	d7532 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d7808:	e7e9      	b.n	d77de <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d780a:	89a9      	ldrh	r1, [r5, #12]
   d780c:	4620      	mov	r0, r4
   d780e:	f7ff fc13 	bl	d7038 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d7812:	4606      	mov	r6, r0
   d7814:	2800      	cmp	r0, #0
   d7816:	d08f      	beq.n	d7738 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d7818:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d781a:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d781e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7822:	802a      	strh	r2, [r5, #0]
   d7824:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d7828:	4299      	cmp	r1, r3
   d782a:	d003      	beq.n	d7834 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d782c:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d7830:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d7832:	e7f9      	b.n	d7828 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d7834:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d7838:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d783c:	45b8      	cmp	r8, r7
   d783e:	d004      	beq.n	d784a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d7840:	1d38      	adds	r0, r7, #4
   d7842:	f7ff fe0a 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7846:	3708      	adds	r7, #8
   d7848:	e7f8      	b.n	d783c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d784a:	2300      	movs	r3, #0
   d784c:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d784e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d7852:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d7856:	45b8      	cmp	r8, r7
   d7858:	d004      	beq.n	d7864 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d785a:	1d38      	adds	r0, r7, #4
   d785c:	f7ff fdfd 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7860:	3708      	adds	r7, #8
   d7862:	e7f8      	b.n	d7856 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d7864:	2300      	movs	r3, #0
   d7866:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d7868:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d786a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d786c:	b123      	cbz	r3, d7878 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d786e:	4631      	mov	r1, r6
   d7870:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d7874:	f7ff fe5d 	bl	d7532 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d7878:	2300      	movs	r3, #0
   d787a:	2220      	movs	r2, #32
   d787c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d7880:	4a11      	ldr	r2, [pc, #68]	; (d78c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d7882:	9200      	str	r2, [sp, #0]
   d7884:	490e      	ldr	r1, [pc, #56]	; (d78c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d7886:	aa06      	add	r2, sp, #24
   d7888:	2001      	movs	r0, #1
   d788a:	f7fe fc0b 	bl	d60a4 <log_message>
                    impl->peers_.removeOne(*peer);
   d788e:	4631      	mov	r1, r6
   d7890:	f104 0018 	add.w	r0, r4, #24
   d7894:	f7ff fea4 	bl	d75e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d7898:	e74e      	b.n	d7738 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d789a:	2e0f      	cmp	r6, #15
   d789c:	f47f af6f 	bne.w	d777e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d78a0:	686b      	ldr	r3, [r5, #4]
   d78a2:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d78a4:	7a2b      	ldrb	r3, [r5, #8]
   d78a6:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d78aa:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d78ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d78b2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d78b6:	2308      	movs	r3, #8
   d78b8:	e760      	b.n	d777c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d78ba:	bf00      	nop
   d78bc:	000da6b1 	.word	0x000da6b1
   d78c0:	000da672 	.word	0x000da672
   d78c4:	000da6d7 	.word	0x000da6d7
   d78c8:	000da6f4 	.word	0x000da6f4

000d78cc <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
   d78cc:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   d78ce:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   d78d0:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d78d2:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   d78d6:	e9c1 3300 	strd	r3, r3, [r1]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d78da:	6823      	ldr	r3, [r4, #0]
   d78dc:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d78de:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d78e0:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   d78e2:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   d78e4:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   d78e6:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   d78e8:	f7ff fdb7 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   d78ec:	4620      	mov	r0, r4
   d78ee:	b002      	add	sp, #8
   d78f0:	bd10      	pop	{r4, pc}

000d78f2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d78f2:	b513      	push	{r0, r1, r4, lr}
   d78f4:	460b      	mov	r3, r1
   d78f6:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78f8:	e9d0 0100 	ldrd	r0, r1, [r0]
   d78fc:	466c      	mov	r4, sp
   d78fe:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7902:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7906:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d790a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d790e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7912:	b002      	add	sp, #8
   d7914:	bd10      	pop	{r4, pc}

000d7916 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   d7916:	b538      	push	{r3, r4, r5, lr}
   d7918:	4605      	mov	r5, r0
   d791a:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d791c:	f7ff ffe9 	bl	d78f2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7920:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7922:	68a2      	ldr	r2, [r4, #8]
   d7924:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7926:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7928:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d792a:	68e2      	ldr	r2, [r4, #12]
   d792c:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d792e:	60e3      	str	r3, [r4, #12]
      }
   d7930:	bd38      	pop	{r3, r4, r5, pc}

000d7932 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>:
      operator=(function&& __x) noexcept
   d7932:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7934:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d7936:	4604      	mov	r4, r0
   d7938:	4608      	mov	r0, r1
	__x.swap(*this);
   d793a:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d793c:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d793e:	f7ff ffea 	bl	d7916 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   d7942:	4621      	mov	r1, r4
   d7944:	4668      	mov	r0, sp
   d7946:	f7ff ffe6 	bl	d7916 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   d794a:	4668      	mov	r0, sp
   d794c:	f7ff f9ac 	bl	d6ca8 <_ZNSt14_Function_baseD1Ev>
      }
   d7950:	4620      	mov	r0, r4
   d7952:	b004      	add	sp, #16
   d7954:	bd10      	pop	{r4, pc}

000d7956 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   d7956:	b570      	push	{r4, r5, r6, lr}
   d7958:	460e      	mov	r6, r1
   d795a:	b088      	sub	sp, #32
   d795c:	4604      	mov	r4, r0
   d795e:	9201      	str	r2, [sp, #4]
   d7960:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   d7962:	f7ff fb49 	bl	d6ff8 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   d7966:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   d7968:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   d796a:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   d796c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d7970:	f7fe ff7a 	bl	d6868 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d7974:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   d7978:	b185      	cbz	r5, d799c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x46>
   d797a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d797c:	9502      	str	r5, [sp, #8]
   d797e:	a902      	add	r1, sp, #8
   d7980:	a804      	add	r0, sp, #16
   d7982:	9303      	str	r3, [sp, #12]
   d7984:	f7ff fd10 	bl	d73a8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   d7988:	a904      	add	r1, sp, #16
   d798a:	4630      	mov	r0, r6
   d798c:	f7ff ffd1 	bl	d7932 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   d7990:	a804      	add	r0, sp, #16
   d7992:	f7ff f989 	bl	d6ca8 <_ZNSt14_Function_baseD1Ev>
    }
   d7996:	4620      	mov	r0, r4
   d7998:	b008      	add	sp, #32
   d799a:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   d799c:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   d799e:	e7f3      	b.n	d7988 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000d79a0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d79a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d79a4:	b086      	sub	sp, #24
   d79a6:	4607      	mov	r7, r0
   d79a8:	461d      	mov	r5, r3
   d79aa:	2068      	movs	r0, #104	; 0x68
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d79ac:	2300      	movs	r3, #0
   d79ae:	4689      	mov	r9, r1
   d79b0:	4692      	mov	sl, r2
   d79b2:	9304      	str	r3, [sp, #16]
   d79b4:	f7fc fb6f 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d79b8:	1e06      	subs	r6, r0, #0
   d79ba:	f106 080c 	add.w	r8, r6, #12
   d79be:	d01d      	beq.n	d79fc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   d79c0:	2301      	movs	r3, #1
	: _M_impl(__a)
   d79c2:	4634      	mov	r4, r6
      : _M_use_count(1), _M_weak_count(1) { }
   d79c4:	e9c6 3301 	strd	r3, r3, [r6, #4]
	: _M_impl(__a)
   d79c8:	4b15      	ldr	r3, [pc, #84]	; (d7a20 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x80>)
   d79ca:	f844 3b20 	str.w	r3, [r4], #32
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d79ce:	f89a 3000 	ldrb.w	r3, [sl]
    value_ = flags.value_;
   d79d2:	f88d 300c 	strb.w	r3, [sp, #12]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   d79d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d79d8:	9300      	str	r3, [sp, #0]
   d79da:	464a      	mov	r2, r9
   d79dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d79de:	a903      	add	r1, sp, #12
   d79e0:	4640      	mov	r0, r8
   d79e2:	f7ff ffb8 	bl	d7956 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   d79e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d79e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d79ea:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
   d79ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        charUuid_ = charUuid;
   d79ee:	6023      	str	r3, [r4, #0]
        svcUuid_ = svcUuid;
   d79f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d79f2:	f106 0434 	add.w	r4, r6, #52	; 0x34
   d79f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d79f8:	682b      	ldr	r3, [r5, #0]
   d79fa:	6023      	str	r3, [r4, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d79fc:	a904      	add	r1, sp, #16
   d79fe:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
   d7a00:	e9cd 8604 	strd	r8, r6, [sp, #16]
   d7a04:	f7ff ff62 	bl	d78cc <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
      ~__shared_ptr() = default;
   d7a08:	a805      	add	r0, sp, #20
   d7a0a:	f7ff fd26 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d7a0e:	6839      	ldr	r1, [r7, #0]
   d7a10:	b919      	cbnz	r1, d7a1a <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x7a>
        SPARK_ASSERT(false);
   d7a12:	4a04      	ldr	r2, [pc, #16]	; (d7a24 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>)
   d7a14:	200a      	movs	r0, #10
   d7a16:	f7fe fb3d 	bl	d6094 <panic_>
}
   d7a1a:	b006      	add	sp, #24
   d7a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a20:	000da770 	.word	0x000da770
   d7a24:	000d5bdd 	.word	0x000d5bdd

000d7a28 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   d7a28:	b538      	push	{r3, r4, r5, lr}
   d7a2a:	4605      	mov	r5, r0
   d7a2c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d7a2e:	f7ff ff60 	bl	d78f2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7a32:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7a34:	68a2      	ldr	r2, [r4, #8]
   d7a36:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a38:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7a3a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7a3c:	68e2      	ldr	r2, [r4, #12]
   d7a3e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a40:	60e3      	str	r3, [r4, #12]
      }
   d7a42:	bd38      	pop	{r3, r4, r5, pc}

000d7a44 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEaSEOS5_>:
      operator=(function&& __x) noexcept
   d7a44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7a46:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d7a48:	4604      	mov	r4, r0
   d7a4a:	4608      	mov	r0, r1
	__x.swap(*this);
   d7a4c:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d7a4e:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d7a50:	f7ff ffea 	bl	d7a28 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   d7a54:	4621      	mov	r1, r4
   d7a56:	4668      	mov	r0, sp
   d7a58:	f7ff ffe6 	bl	d7a28 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   d7a5c:	4668      	mov	r0, sp
   d7a5e:	f7ff f923 	bl	d6ca8 <_ZNSt14_Function_baseD1Ev>
      }
   d7a62:	4620      	mov	r0, r4
   d7a64:	b004      	add	sp, #16
   d7a66:	bd10      	pop	{r4, pc}

000d7a68 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   d7a68:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   d7a6a:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   d7a6c:	b086      	sub	sp, #24
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   d7a6e:	3424      	adds	r4, #36	; 0x24
   d7a70:	b171      	cbz	r1, d7a90 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x28>
   d7a72:	e9cd 1200 	strd	r1, r2, [sp]
   d7a76:	a802      	add	r0, sp, #8
   d7a78:	4669      	mov	r1, sp
   d7a7a:	f7ff fcad 	bl	d73d8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
   d7a7e:	a902      	add	r1, sp, #8
   d7a80:	4620      	mov	r0, r4
   d7a82:	f7ff ffdf 	bl	d7a44 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEaSEOS5_>
    class function<_Res(_ArgTypes...)>
   d7a86:	a802      	add	r0, sp, #8
   d7a88:	f7ff f90e 	bl	d6ca8 <_ZNSt14_Function_baseD1Ev>
}
   d7a8c:	b006      	add	sp, #24
   d7a8e:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   d7a90:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   d7a92:	e7f4      	b.n	d7a7e <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000d7a94 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   d7a94:	b510      	push	{r4, lr}
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   d7a96:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   d7a98:	b086      	sub	sp, #24
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   d7a9a:	3434      	adds	r4, #52	; 0x34
   d7a9c:	b171      	cbz	r1, d7abc <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x28>
   d7a9e:	e9cd 1200 	strd	r1, r2, [sp]
   d7aa2:	a802      	add	r0, sp, #8
   d7aa4:	4669      	mov	r1, sp
   d7aa6:	f7ff fc97 	bl	d73d8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
   d7aaa:	a902      	add	r1, sp, #8
   d7aac:	4620      	mov	r0, r4
   d7aae:	f7ff ffc9 	bl	d7a44 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEaSEOS5_>
    class function<_Res(_ArgTypes...)>
   d7ab2:	a802      	add	r0, sp, #8
   d7ab4:	f7ff f8f8 	bl	d6ca8 <_ZNSt14_Function_baseD1Ev>
}
   d7ab8:	b006      	add	sp, #24
   d7aba:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   d7abc:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   d7abe:	e7f4      	b.n	d7aaa <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000d7ac0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d7ac0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7ac4:	4604      	mov	r4, r0
   d7ac6:	460d      	mov	r5, r1
   d7ac8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7aca:	d914      	bls.n	d7af6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7acc:	4290      	cmp	r0, r2
   d7ace:	d213      	bcs.n	d7af8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d7ad0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d7ad4:	1a75      	subs	r5, r6, r1
   d7ad6:	f1a1 0708 	sub.w	r7, r1, #8
   d7ada:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d7adc:	42b7      	cmp	r7, r6
   d7ade:	d018      	beq.n	d7b12 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7ae0:	b11c      	cbz	r4, d7aea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default;
   d7ae2:	4631      	mov	r1, r6
   d7ae4:	4620      	mov	r0, r4
   d7ae6:	f7ff fca4 	bl	d7432 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7aea:	1d30      	adds	r0, r6, #4
   d7aec:	f7ff fcb5 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d7af0:	3e08      	subs	r6, #8
   d7af2:	3c08      	subs	r4, #8
   d7af4:	e7f2      	b.n	d7adc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d7af6:	d00c      	beq.n	d7b12 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7af8:	42b5      	cmp	r5, r6
   d7afa:	d00a      	beq.n	d7b12 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7afc:	b11c      	cbz	r4, d7b06 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7afe:	4629      	mov	r1, r5
   d7b00:	4620      	mov	r0, r4
   d7b02:	f7ff fc96 	bl	d7432 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7b06:	1d28      	adds	r0, r5, #4
   d7b08:	f7ff fca7 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d7b0c:	3508      	adds	r5, #8
   d7b0e:	3408      	adds	r4, #8
   d7b10:	e7f2      	b.n	d7af8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d7b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7b14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d7b14:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d7b16:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d7b18:	4605      	mov	r5, r0
        if (n > 0) {
   d7b1a:	dd11      	ble.n	d7b40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d7b1c:	00f0      	lsls	r0, r6, #3
   d7b1e:	f7fe fbaf 	bl	d6280 <malloc>
            if (!d) {
   d7b22:	4604      	mov	r4, r0
   d7b24:	b158      	cbz	r0, d7b3e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d7b26:	e9d5 1200 	ldrd	r1, r2, [r5]
   d7b2a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7b2e:	f7ff ffc7 	bl	d7ac0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d7b32:	6828      	ldr	r0, [r5, #0]
   d7b34:	f7fe fbac 	bl	d6290 <free>
        data_ = d;
   d7b38:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7b3a:	60ae      	str	r6, [r5, #8]
        return true;
   d7b3c:	2001      	movs	r0, #1
    }
   d7b3e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d7b40:	2400      	movs	r4, #0
   d7b42:	e7f6      	b.n	d7b32 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d7b44 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7b44:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7b46:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7b48:	6845      	ldr	r5, [r0, #4]
   d7b4a:	4668      	mov	r0, sp
   d7b4c:	f7ff fc71 	bl	d7432 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7b50:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d7b54:	4299      	cmp	r1, r3
   d7b56:	da10      	bge.n	d7b7a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d7b58:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7b5a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d7b5c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d7b60:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7b64:	4629      	mov	r1, r5
   d7b66:	f105 0008 	add.w	r0, r5, #8
   d7b6a:	f7ff ffa9 	bl	d7ac0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d7b6e:	b98d      	cbnz	r5, d7b94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d7b70:	6863      	ldr	r3, [r4, #4]
   d7b72:	3301      	adds	r3, #1
   d7b74:	6063      	str	r3, [r4, #4]
    return true;
   d7b76:	2601      	movs	r6, #1
   d7b78:	e006      	b.n	d7b88 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7b7a:	3101      	adds	r1, #1
   d7b7c:	4620      	mov	r0, r4
   d7b7e:	f7ff ffc9 	bl	d7b14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7b82:	4606      	mov	r6, r0
   d7b84:	2800      	cmp	r0, #0
   d7b86:	d1e7      	bne.n	d7b58 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d7b88:	a801      	add	r0, sp, #4
   d7b8a:	f7ff fc66 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7b8e:	4630      	mov	r0, r6
   d7b90:	b002      	add	sp, #8
   d7b92:	bd70      	pop	{r4, r5, r6, pc}
   d7b94:	4669      	mov	r1, sp
   d7b96:	4628      	mov	r0, r5
   d7b98:	f7ff fc4b 	bl	d7432 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7b9c:	e7e8      	b.n	d7b70 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d7b9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d7b9e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7ba2:	4604      	mov	r4, r0
   d7ba4:	460d      	mov	r5, r1
   d7ba6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7ba8:	d914      	bls.n	d7bd4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7baa:	4290      	cmp	r0, r2
   d7bac:	d213      	bcs.n	d7bd6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d7bae:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d7bb2:	1a75      	subs	r5, r6, r1
   d7bb4:	f1a1 0708 	sub.w	r7, r1, #8
   d7bb8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d7bba:	42b7      	cmp	r7, r6
   d7bbc:	d018      	beq.n	d7bf0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7bbe:	b11c      	cbz	r4, d7bc8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d7bc0:	4631      	mov	r1, r6
   d7bc2:	4620      	mov	r0, r4
   d7bc4:	f7ff fc27 	bl	d7416 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7bc8:	1d30      	adds	r0, r6, #4
   d7bca:	f7ff fc46 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d7bce:	3e08      	subs	r6, #8
   d7bd0:	3c08      	subs	r4, #8
   d7bd2:	e7f2      	b.n	d7bba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d7bd4:	d00c      	beq.n	d7bf0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7bd6:	42b5      	cmp	r5, r6
   d7bd8:	d00a      	beq.n	d7bf0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7bda:	b11c      	cbz	r4, d7be4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7bdc:	4629      	mov	r1, r5
   d7bde:	4620      	mov	r0, r4
   d7be0:	f7ff fc19 	bl	d7416 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7be4:	1d28      	adds	r0, r5, #4
   d7be6:	f7ff fc38 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d7bea:	3508      	adds	r5, #8
   d7bec:	3408      	adds	r4, #8
   d7bee:	e7f2      	b.n	d7bd6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d7bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7bf2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d7bf2:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d7bf4:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d7bf6:	4605      	mov	r5, r0
        if (n > 0) {
   d7bf8:	dd11      	ble.n	d7c1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d7bfa:	00f0      	lsls	r0, r6, #3
   d7bfc:	f7fe fb40 	bl	d6280 <malloc>
            if (!d) {
   d7c00:	4604      	mov	r4, r0
   d7c02:	b158      	cbz	r0, d7c1c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d7c04:	e9d5 1200 	ldrd	r1, r2, [r5]
   d7c08:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7c0c:	f7ff ffc7 	bl	d7b9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d7c10:	6828      	ldr	r0, [r5, #0]
   d7c12:	f7fe fb3d 	bl	d6290 <free>
        data_ = d;
   d7c16:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7c18:	60ae      	str	r6, [r5, #8]
        return true;
   d7c1a:	2001      	movs	r0, #1
    }
   d7c1c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d7c1e:	2400      	movs	r4, #0
   d7c20:	e7f6      	b.n	d7c10 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d7c22 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7c24:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7c26:	6845      	ldr	r5, [r0, #4]
   d7c28:	4668      	mov	r0, sp
   d7c2a:	f7ff fbf4 	bl	d7416 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7c2e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d7c32:	4299      	cmp	r1, r3
   d7c34:	da10      	bge.n	d7c58 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d7c36:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7c38:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d7c3a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d7c3e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7c42:	4629      	mov	r1, r5
   d7c44:	f105 0008 	add.w	r0, r5, #8
   d7c48:	f7ff ffa9 	bl	d7b9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d7c4c:	b98d      	cbnz	r5, d7c72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d7c4e:	6863      	ldr	r3, [r4, #4]
   d7c50:	3301      	adds	r3, #1
   d7c52:	6063      	str	r3, [r4, #4]
    return true;
   d7c54:	2601      	movs	r6, #1
   d7c56:	e006      	b.n	d7c66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7c58:	3101      	adds	r1, #1
   d7c5a:	4620      	mov	r0, r4
   d7c5c:	f7ff ffc9 	bl	d7bf2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7c60:	4606      	mov	r6, r0
   d7c62:	2800      	cmp	r0, #0
   d7c64:	d1e7      	bne.n	d7c36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d7c66:	a801      	add	r0, sp, #4
   d7c68:	f7ff fbf7 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7c6c:	4630      	mov	r0, r6
   d7c6e:	b002      	add	sp, #8
   d7c70:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d7c72:	4669      	mov	r1, sp
   d7c74:	4628      	mov	r0, r5
   d7c76:	f7ff fbce 	bl	d7416 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7c7a:	e7e8      	b.n	d7c4e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d7c7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d7c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7c80:	4617      	mov	r7, r2
   d7c82:	b0a1      	sub	sp, #132	; 0x84
   d7c84:	4680      	mov	r8, r0
    WiringBleLock lk;
   d7c86:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d7c88:	460e      	mov	r6, r1
    WiringBleLock lk;
   d7c8a:	f7ff f836 	bl	d6cfa <_ZN8particle3ble13WiringBleLockC1Ev>
   d7c8e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d7c90:	7923      	ldrb	r3, [r4, #4]
   d7c92:	b953      	cbnz	r3, d7caa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d7c94:	4639      	mov	r1, r7
   d7c96:	4640      	mov	r0, r8
   d7c98:	f7ff fbbd 	bl	d7416 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d7c9c:	a80a      	add	r0, sp, #40	; 0x28
   d7c9e:	f7ff f834 	bl	d6d0a <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d7ca2:	4640      	mov	r0, r8
   d7ca4:	b021      	add	sp, #132	; 0x84
   d7ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7caa:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   d7cac:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   d7cb0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d7cb4:	9303      	str	r3, [sp, #12]
   d7cb6:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d7cba:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d7cbe:	9b03      	ldr	r3, [sp, #12]
   d7cc0:	429d      	cmp	r5, r3
   d7cc2:	d021      	beq.n	d7d08 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d7cc4:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   d7cc8:	4658      	mov	r0, fp
   d7cca:	f109 0114 	add.w	r1, r9, #20
   d7cce:	f7ff f8cc 	bl	d6e6a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d7cd2:	b1b8      	cbz	r0, d7d04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d7cd4:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d7cd8:	4650      	mov	r0, sl
   d7cda:	f7ff f8c6 	bl	d6e6a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d7cde:	b188      	cbz	r0, d7d04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d7ce0:	6823      	ldr	r3, [r4, #0]
   d7ce2:	f8d9 2000 	ldr.w	r2, [r9]
   d7ce6:	4053      	eors	r3, r2
   d7ce8:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d7cec:	d10a      	bne.n	d7d04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d7cee:	2220      	movs	r2, #32
   d7cf0:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d7cf4:	4a5e      	ldr	r2, [pc, #376]	; (d7e70 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d7cf6:	9200      	str	r2, [sp, #0]
   d7cf8:	aa15      	add	r2, sp, #84	; 0x54
   d7cfa:	495e      	ldr	r1, [pc, #376]	; (d7e74 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d7cfc:	2032      	movs	r0, #50	; 0x32
   d7cfe:	f7fe f9d1 	bl	d60a4 <log_message>
   d7d02:	e7c7      	b.n	d7c94 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d7d04:	3508      	adds	r5, #8
   d7d06:	e7da      	b.n	d7cbe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d7d08:	4650      	mov	r0, sl
   d7d0a:	f7ff f879 	bl	d6e00 <_ZNK8particle7BleUuid7isValidEv>
   d7d0e:	b960      	cbnz	r0, d7d2a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   d7d10:	4959      	ldr	r1, [pc, #356]	; (d7e78 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   d7d12:	2201      	movs	r2, #1
   d7d14:	a815      	add	r0, sp, #84	; 0x54
   d7d16:	ad15      	add	r5, sp, #84	; 0x54
   d7d18:	f7ff f849 	bl	d6dae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d7d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7d1e:	46d4      	mov	ip, sl
   d7d20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d7d24:	682b      	ldr	r3, [r5, #0]
   d7d26:	f8cc 3000 	str.w	r3, [ip]
   d7d2a:	6833      	ldr	r3, [r6, #0]
   d7d2c:	e9d3 5300 	ldrd	r5, r3, [r3]
   d7d30:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d7d34:	455d      	cmp	r5, fp
   d7d36:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   d7d38:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   d7d3a:	d06e      	beq.n	d7e1a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d7d3c:	f855 0b08 	ldr.w	r0, [r5], #8
   d7d40:	f7ff f893 	bl	d6e6a <_ZNK8particle7BleUuideqERKS0_>
   d7d44:	2800      	cmp	r0, #0
   d7d46:	d0f5      	beq.n	d7d34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   d7d48:	f104 0a14 	add.w	sl, r4, #20
   d7d4c:	4650      	mov	r0, sl
   d7d4e:	f7ff f857 	bl	d6e00 <_ZNK8particle7BleUuid7isValidEv>
   d7d52:	b988      	cbnz	r0, d7d78 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   d7d54:	4b49      	ldr	r3, [pc, #292]	; (d7e7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d7d56:	4948      	ldr	r1, [pc, #288]	; (d7e78 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   d7d58:	881a      	ldrh	r2, [r3, #0]
   d7d5a:	3201      	adds	r2, #1
   d7d5c:	b292      	uxth	r2, r2
   d7d5e:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d7d60:	a815      	add	r0, sp, #84	; 0x54
   d7d62:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   d7d64:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d7d66:	f7ff f841 	bl	d6dec <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d7d6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7d6c:	46d4      	mov	ip, sl
   d7d6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d7d72:	682b      	ldr	r3, [r5, #0]
   d7d74:	f8cc 3000 	str.w	r3, [ip]
    hal_ble_char_init_t charInit = {};
   d7d78:	2228      	movs	r2, #40	; 0x28
   d7d7a:	2100      	movs	r1, #0
   d7d7c:	a816      	add	r0, sp, #88	; 0x58
   d7d7e:	f002 f847 	bl	d9e10 <memset>
    charInit.version = BLE_API_VERSION;
   d7d82:	4b3f      	ldr	r3, [pc, #252]	; (d7e80 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d7d84:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d7d86:	4651      	mov	r1, sl
   d7d88:	a804      	add	r0, sp, #16
   d7d8a:	f7ff f84b 	bl	d6e24 <_ZN8particle7BleUuid7halUUIDEv>
   d7d8e:	ab04      	add	r3, sp, #16
   d7d90:	aa18      	add	r2, sp, #96	; 0x60
   d7d92:	f10d 0c20 	add.w	ip, sp, #32
   d7d96:	6818      	ldr	r0, [r3, #0]
   d7d98:	6859      	ldr	r1, [r3, #4]
   d7d9a:	4615      	mov	r5, r2
   d7d9c:	c503      	stmia	r5!, {r0, r1}
   d7d9e:	3308      	adds	r3, #8
   d7da0:	4563      	cmp	r3, ip
   d7da2:	462a      	mov	r2, r5
   d7da4:	d1f7      	bne.n	d7d96 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   d7da6:	6818      	ldr	r0, [r3, #0]
   d7da8:	6028      	str	r0, [r5, #0]
    charInit.properties = charImpl->properties().value();
   d7daa:	7923      	ldrb	r3, [r4, #4]
   d7dac:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d7db0:	f8d9 3000 	ldr.w	r3, [r9]
   d7db4:	8a9b      	ldrh	r3, [r3, #20]
   d7db6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d7dba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7dbc:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d7dbe:	4b31      	ldr	r3, [pc, #196]	; (d7e84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d7dc0:	2200      	movs	r2, #0
   d7dc2:	1da1      	adds	r1, r4, #6
   d7dc4:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d7dc6:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d7dca:	f7fd ffa3 	bl	d5d14 <hal_ble_gatt_server_add_characteristic>
   d7dce:	2800      	cmp	r0, #0
   d7dd0:	f47f af60 	bne.w	d7c94 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   d7dd4:	2301      	movs	r3, #1
   d7dd6:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d7dd8:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d7dda:	4639      	mov	r1, r7
        return characteristics_;
   d7ddc:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d7dde:	a80d      	add	r0, sp, #52	; 0x34
   d7de0:	f7ff fb19 	bl	d7416 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7de4:	4620      	mov	r0, r4
   d7de6:	a90d      	add	r1, sp, #52	; 0x34
   d7de8:	f7ff ff1b 	bl	d7c22 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d7dec:	4604      	mov	r4, r0
   d7dee:	a80e      	add	r0, sp, #56	; 0x38
   d7df0:	f7ff fb33 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7df4:	2c00      	cmp	r4, #0
   d7df6:	f47f af4d 	bne.w	d7c94 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d7dfa:	2320      	movs	r3, #32
   d7dfc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d7e00:	4b21      	ldr	r3, [pc, #132]	; (d7e88 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   d7e02:	9300      	str	r3, [sp, #0]
   d7e04:	aa0d      	add	r2, sp, #52	; 0x34
   d7e06:	4623      	mov	r3, r4
   d7e08:	e777      	b.n	d7cfa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d7e0a:	4639      	mov	r1, r7
   d7e0c:	4640      	mov	r0, r8
   d7e0e:	f7ff fb02 	bl	d7416 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7e12:	a80c      	add	r0, sp, #48	; 0x30
   d7e14:	f7ff fb21 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7e18:	e740      	b.n	d7c9c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d7e1a:	a80b      	add	r0, sp, #44	; 0x2c
   d7e1c:	f7ff f994 	bl	d7148 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d7e20:	4651      	mov	r1, sl
   d7e22:	a815      	add	r0, sp, #84	; 0x54
   d7e24:	f7fe fffe 	bl	d6e24 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d7e28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d7e2a:	2300      	movs	r3, #0
   d7e2c:	3214      	adds	r2, #20
   d7e2e:	a915      	add	r1, sp, #84	; 0x54
   d7e30:	2001      	movs	r0, #1
   d7e32:	f7fd ff3d 	bl	d5cb0 <hal_ble_gatt_server_add_service>
   d7e36:	2800      	cmp	r0, #0
   d7e38:	d1e7      	bne.n	d7e0a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   d7e3a:	6835      	ldr	r5, [r6, #0]
   d7e3c:	a90b      	add	r1, sp, #44	; 0x2c
   d7e3e:	a80d      	add	r0, sp, #52	; 0x34
   d7e40:	f7ff faf7 	bl	d7432 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d7e44:	4628      	mov	r0, r5
   d7e46:	a90d      	add	r1, sp, #52	; 0x34
   d7e48:	f7ff fe7c 	bl	d7b44 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d7e4c:	4605      	mov	r5, r0
   d7e4e:	a80e      	add	r0, sp, #56	; 0x38
   d7e50:	f7ff fb03 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7e54:	2d00      	cmp	r5, #0
   d7e56:	d0d8      	beq.n	d7e0a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   d7e58:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   d7e5a:	6853      	ldr	r3, [r2, #4]
   d7e5c:	6812      	ldr	r2, [r2, #0]
   d7e5e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d7e62:	3b01      	subs	r3, #1
   d7e64:	a80c      	add	r0, sp, #48	; 0x30
   d7e66:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d7e6a:	f7ff faf6 	bl	d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7e6e:	e76b      	b.n	d7d48 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   d7e70:	000da713 	.word	0x000da713
   d7e74:	000da672 	.word	0x000da672
   d7e78:	000da7d4 	.word	0x000da7d4
   d7e7c:	2003e658 	.word	0x2003e658
   d7e80:	002c0001 	.word	0x002c0001
   d7e84:	000d72d9 	.word	0x000d72d9
   d7e88:	000da73e 	.word	0x000da73e

000d7e8c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d7e8c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d7e8e:	4c06      	ldr	r4, [pc, #24]	; (d7ea8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7e90:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7e92:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7e94:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d7e96:	f7fd ff65 	bl	d5d64 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d7e9a:	4620      	mov	r0, r4
   d7e9c:	4a03      	ldr	r2, [pc, #12]	; (d7eac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7e9e:	4904      	ldr	r1, [pc, #16]	; (d7eb0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7ea4:	f001 b934 	b.w	d9110 <__aeabi_atexit>
   d7ea8:	2003e65c 	.word	0x2003e65c
   d7eac:	2003df60 	.word	0x2003df60
   d7eb0:	000d6aff 	.word	0x000d6aff

000d7eb4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7eb6:	4606      	mov	r6, r0
   d7eb8:	460d      	mov	r5, r1
  size_t n = 0;
   d7eba:	188f      	adds	r7, r1, r2
   d7ebc:	2400      	movs	r4, #0
  while (size--) {
   d7ebe:	42bd      	cmp	r5, r7
   d7ec0:	d00c      	beq.n	d7edc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7ec2:	6833      	ldr	r3, [r6, #0]
   d7ec4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7ec8:	689b      	ldr	r3, [r3, #8]
   d7eca:	4630      	mov	r0, r6
   d7ecc:	4798      	blx	r3
     if (chunk>=0)
   d7ece:	1e03      	subs	r3, r0, #0
   d7ed0:	db01      	blt.n	d7ed6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7ed2:	441c      	add	r4, r3
  while (size--) {
   d7ed4:	e7f3      	b.n	d7ebe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7ed6:	2c00      	cmp	r4, #0
   d7ed8:	bf08      	it	eq
   d7eda:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7edc:	4620      	mov	r0, r4
   d7ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7ee0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7ee0:	b513      	push	{r0, r1, r4, lr}
   d7ee2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d7ee4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7ee6:	b159      	cbz	r1, d7f00 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7ee8:	9101      	str	r1, [sp, #4]
   d7eea:	f001 ffcf 	bl	d9e8c <strlen>
   d7eee:	6823      	ldr	r3, [r4, #0]
   d7ef0:	9901      	ldr	r1, [sp, #4]
   d7ef2:	68db      	ldr	r3, [r3, #12]
   d7ef4:	4602      	mov	r2, r0
   d7ef6:	4620      	mov	r0, r4
    }
   d7ef8:	b002      	add	sp, #8
   d7efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7efe:	4718      	bx	r3
    }
   d7f00:	b002      	add	sp, #8
   d7f02:	bd10      	pop	{r4, pc}

000d7f04 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d7f04:	b508      	push	{r3, lr}
  return write(str);
   d7f06:	f7ff ffeb 	bl	d7ee0 <_ZN5Print5writeEPKc>
}
   d7f0a:	bd08      	pop	{r3, pc}

000d7f0c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7f0c:	6803      	ldr	r3, [r0, #0]
   d7f0e:	689b      	ldr	r3, [r3, #8]
   d7f10:	4718      	bx	r3

000d7f12 <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   d7f12:	680a      	ldr	r2, [r1, #0]
 {
   d7f14:	460b      	mov	r3, r1
   return x.printTo(*this);
   d7f16:	6812      	ldr	r2, [r2, #0]
   d7f18:	4601      	mov	r1, r0
   d7f1a:	4618      	mov	r0, r3
   d7f1c:	4710      	bx	r2

000d7f1e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7f1e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7f20:	210d      	movs	r1, #13
{
   d7f22:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7f24:	f7ff fff2 	bl	d7f0c <_ZN5Print5printEc>
  n += print('\n');
   d7f28:	210a      	movs	r1, #10
  size_t n = print('\r');
   d7f2a:	4604      	mov	r4, r0
  n += print('\n');
   d7f2c:	4628      	mov	r0, r5
   d7f2e:	f7ff ffed 	bl	d7f0c <_ZN5Print5printEc>
  return n;
}
   d7f32:	4420      	add	r0, r4
   d7f34:	bd38      	pop	{r3, r4, r5, pc}

000d7f36 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7f36:	b538      	push	{r3, r4, r5, lr}
   d7f38:	4605      	mov	r5, r0
  return write(str);
   d7f3a:	f7ff ffd1 	bl	d7ee0 <_ZN5Print5writeEPKc>
   d7f3e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d7f40:	4628      	mov	r0, r5
   d7f42:	f7ff ffec 	bl	d7f1e <_ZN5Print7printlnEv>
  return n;
}
   d7f46:	4420      	add	r0, r4
   d7f48:	bd38      	pop	{r3, r4, r5, pc}

000d7f4a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7f4a:	b530      	push	{r4, r5, lr}
   d7f4c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7f4e:	2300      	movs	r3, #0
   d7f50:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7f54:	2a01      	cmp	r2, #1
   d7f56:	bf98      	it	ls
   d7f58:	220a      	movls	r2, #10
   d7f5a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7f5c:	460d      	mov	r5, r1
   d7f5e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7f62:	fb01 5312 	mls	r3, r1, r2, r5
   d7f66:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7f6a:	2b09      	cmp	r3, #9
   d7f6c:	bf94      	ite	ls
   d7f6e:	3330      	addls	r3, #48	; 0x30
   d7f70:	3337      	addhi	r3, #55	; 0x37
   d7f72:	b2db      	uxtb	r3, r3
  } while(n);
   d7f74:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7f76:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7f7a:	d9ef      	bls.n	d7f5c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7f7c:	4621      	mov	r1, r4
   d7f7e:	f7ff ffaf 	bl	d7ee0 <_ZN5Print5writeEPKc>
}
   d7f82:	b00b      	add	sp, #44	; 0x2c
   d7f84:	bd30      	pop	{r4, r5, pc}
	...

000d7f88 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d7f88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7f8c:	ec55 4b10 	vmov	r4, r5, d0
   d7f90:	4606      	mov	r6, r0
   d7f92:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d7f94:	ee10 2a10 	vmov	r2, s0
   d7f98:	ee10 0a10 	vmov	r0, s0
   d7f9c:	462b      	mov	r3, r5
   d7f9e:	4629      	mov	r1, r5
   d7fa0:	f001 fe2c 	bl	d9bfc <__aeabi_dcmpun>
   d7fa4:	b140      	cbz	r0, d7fb8 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d7fa6:	4953      	ldr	r1, [pc, #332]	; (d80f4 <_ZN5Print10printFloatEdh+0x16c>)
   d7fa8:	4630      	mov	r0, r6
   d7faa:	f7ff ff99 	bl	d7ee0 <_ZN5Print5writeEPKc>
   d7fae:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d7fb0:	4650      	mov	r0, sl
   d7fb2:	b003      	add	sp, #12
   d7fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d7fb8:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d7fbc:	4b4e      	ldr	r3, [pc, #312]	; (d80f8 <_ZN5Print10printFloatEdh+0x170>)
   d7fbe:	f04f 32ff 	mov.w	r2, #4294967295
   d7fc2:	4620      	mov	r0, r4
   d7fc4:	4649      	mov	r1, r9
   d7fc6:	f001 fe19 	bl	d9bfc <__aeabi_dcmpun>
   d7fca:	b948      	cbnz	r0, d7fe0 <_ZN5Print10printFloatEdh+0x58>
   d7fcc:	4b4a      	ldr	r3, [pc, #296]	; (d80f8 <_ZN5Print10printFloatEdh+0x170>)
   d7fce:	f04f 32ff 	mov.w	r2, #4294967295
   d7fd2:	4620      	mov	r0, r4
   d7fd4:	4649      	mov	r1, r9
   d7fd6:	f001 fdf3 	bl	d9bc0 <__aeabi_dcmple>
   d7fda:	b908      	cbnz	r0, d7fe0 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d7fdc:	4947      	ldr	r1, [pc, #284]	; (d80fc <_ZN5Print10printFloatEdh+0x174>)
   d7fde:	e7e3      	b.n	d7fa8 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d7fe0:	4b47      	ldr	r3, [pc, #284]	; (d8100 <_ZN5Print10printFloatEdh+0x178>)
   d7fe2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7fe6:	4620      	mov	r0, r4
   d7fe8:	4629      	mov	r1, r5
   d7fea:	f001 fdfd 	bl	d9be8 <__aeabi_dcmpgt>
   d7fee:	b108      	cbz	r0, d7ff4 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d7ff0:	4944      	ldr	r1, [pc, #272]	; (d8104 <_ZN5Print10printFloatEdh+0x17c>)
   d7ff2:	e7d9      	b.n	d7fa8 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d7ff4:	4b44      	ldr	r3, [pc, #272]	; (d8108 <_ZN5Print10printFloatEdh+0x180>)
   d7ff6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7ffa:	4620      	mov	r0, r4
   d7ffc:	4629      	mov	r1, r5
   d7ffe:	f001 fdd5 	bl	d9bac <__aeabi_dcmplt>
   d8002:	2800      	cmp	r0, #0
   d8004:	d1f4      	bne.n	d7ff0 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d8006:	2200      	movs	r2, #0
   d8008:	2300      	movs	r3, #0
   d800a:	4620      	mov	r0, r4
   d800c:	4629      	mov	r1, r5
   d800e:	f001 fdcd 	bl	d9bac <__aeabi_dcmplt>
   d8012:	b1d0      	cbz	r0, d804a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d8014:	212d      	movs	r1, #45	; 0x2d
   d8016:	4630      	mov	r0, r6
   d8018:	f7ff ff78 	bl	d7f0c <_ZN5Print5printEc>
     number = -number;
   d801c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d8020:	4682      	mov	sl, r0
     number = -number;
   d8022:	461d      	mov	r5, r3
  double rounding = 0.5;
   d8024:	4939      	ldr	r1, [pc, #228]	; (d810c <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d8026:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d8114 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d802a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d802e:	2000      	movs	r0, #0
    rounding /= 10.0;
   d8030:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d8034:	fa5f f38b 	uxtb.w	r3, fp
   d8038:	429f      	cmp	r7, r3
   d803a:	d908      	bls.n	d804e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d803c:	4642      	mov	r2, r8
   d803e:	464b      	mov	r3, r9
   d8040:	f001 fc6c 	bl	d991c <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d8044:	f10b 0b01 	add.w	fp, fp, #1
   d8048:	e7f4      	b.n	d8034 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d804a:	4682      	mov	sl, r0
   d804c:	e7ea      	b.n	d8024 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d804e:	4622      	mov	r2, r4
   d8050:	462b      	mov	r3, r5
   d8052:	f001 f983 	bl	d935c <__adddf3>
   d8056:	460d      	mov	r5, r1
   d8058:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d805a:	f001 fe0d 	bl	d9c78 <__aeabi_d2uiz>
   d805e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d8060:	f001 fab8 	bl	d95d4 <__aeabi_ui2d>
   d8064:	4602      	mov	r2, r0
   d8066:	460b      	mov	r3, r1
   d8068:	4620      	mov	r0, r4
   d806a:	4629      	mov	r1, r5
   d806c:	f001 f974 	bl	d9358 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d8070:	220a      	movs	r2, #10
   d8072:	4604      	mov	r4, r0
   d8074:	460d      	mov	r5, r1
   d8076:	4630      	mov	r0, r6
   d8078:	4641      	mov	r1, r8
   d807a:	f7ff ff66 	bl	d7f4a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d807e:	4482      	add	sl, r0
  if (digits > 0) {
   d8080:	b127      	cbz	r7, d808c <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d8082:	4923      	ldr	r1, [pc, #140]	; (d8110 <_ZN5Print10printFloatEdh+0x188>)
   d8084:	4630      	mov	r0, r6
   d8086:	f7ff ff2b 	bl	d7ee0 <_ZN5Print5writeEPKc>
    n += print(".");
   d808a:	4482      	add	sl, r0
    remainder *= 10.0;
   d808c:	f8df 9084 	ldr.w	r9, [pc, #132]	; d8114 <_ZN5Print10printFloatEdh+0x18c>
   d8090:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d8094:	3f01      	subs	r7, #1
   d8096:	b2ff      	uxtb	r7, r7
   d8098:	2fff      	cmp	r7, #255	; 0xff
   d809a:	d089      	beq.n	d7fb0 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d809c:	4642      	mov	r2, r8
   d809e:	464b      	mov	r3, r9
   d80a0:	4620      	mov	r0, r4
   d80a2:	4629      	mov	r1, r5
   d80a4:	f001 fb10 	bl	d96c8 <__aeabi_dmul>
   d80a8:	4604      	mov	r4, r0
   d80aa:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d80ac:	f001 fdbc 	bl	d9c28 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d80b0:	f1b0 0b00 	subs.w	fp, r0, #0
   d80b4:	da1a      	bge.n	d80ec <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d80b6:	212d      	movs	r1, #45	; 0x2d
   d80b8:	4630      	mov	r0, r6
   d80ba:	f7ff ff27 	bl	d7f0c <_ZN5Print5printEc>
            val = -n;
   d80be:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d80c2:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d80c4:	220a      	movs	r2, #10
   d80c6:	4630      	mov	r0, r6
   d80c8:	9301      	str	r3, [sp, #4]
   d80ca:	f7ff ff3e 	bl	d7f4a <_ZN5Print11printNumberEmh>
   d80ce:	9b01      	ldr	r3, [sp, #4]
   d80d0:	4418      	add	r0, r3
    n += print(toPrint);
   d80d2:	4482      	add	sl, r0
    remainder -= toPrint;
   d80d4:	4658      	mov	r0, fp
   d80d6:	f001 fa8d 	bl	d95f4 <__aeabi_i2d>
   d80da:	4602      	mov	r2, r0
   d80dc:	460b      	mov	r3, r1
   d80de:	4620      	mov	r0, r4
   d80e0:	4629      	mov	r1, r5
   d80e2:	f001 f939 	bl	d9358 <__aeabi_dsub>
   d80e6:	4604      	mov	r4, r0
   d80e8:	460d      	mov	r5, r1
  while (digits-- > 0)
   d80ea:	e7d3      	b.n	d8094 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d80ec:	4659      	mov	r1, fp
        size_t t = 0;
   d80ee:	2300      	movs	r3, #0
   d80f0:	e7e8      	b.n	d80c4 <_ZN5Print10printFloatEdh+0x13c>
   d80f2:	bf00      	nop
   d80f4:	000da7f4 	.word	0x000da7f4
   d80f8:	7fefffff 	.word	0x7fefffff
   d80fc:	000da7f8 	.word	0x000da7f8
   d8100:	41efffff 	.word	0x41efffff
   d8104:	000da7fc 	.word	0x000da7fc
   d8108:	c1efffff 	.word	0xc1efffff
   d810c:	3fe00000 	.word	0x3fe00000
   d8110:	000da5ab 	.word	0x000da5ab
   d8114:	40240000 	.word	0x40240000

000d8118 <_ZN5Print7printlnEdi>:
{
   d8118:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d811a:	b2c9      	uxtb	r1, r1
{
   d811c:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d811e:	f7ff ff33 	bl	d7f88 <_ZN5Print10printFloatEdh>
   d8122:	4604      	mov	r4, r0
  n += println();
   d8124:	4628      	mov	r0, r5
   d8126:	f7ff fefa 	bl	d7f1e <_ZN5Print7printlnEv>
}
   d812a:	4420      	add	r0, r4
   d812c:	bd38      	pop	{r3, r4, r5, pc}

000d812e <_ZN5Print7printlnEfi>:
{
   d812e:	b538      	push	{r3, r4, r5, lr}
   d8130:	4604      	mov	r4, r0
   d8132:	ee10 0a10 	vmov	r0, s0
   d8136:	460d      	mov	r5, r1
    return println((double)num, digits);
   d8138:	f001 fa6e 	bl	d9618 <__aeabi_f2d>
   d813c:	ec41 0b10 	vmov	d0, r0, r1
   d8140:	4629      	mov	r1, r5
   d8142:	4620      	mov	r0, r4
}
   d8144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d8148:	f7ff bfe6 	b.w	d8118 <_ZN5Print7printlnEdi>

000d814c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d814c:	4b01      	ldr	r3, [pc, #4]	; (d8154 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d814e:	4a02      	ldr	r2, [pc, #8]	; (d8158 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8150:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d8152:	4770      	bx	lr
   d8154:	2003e664 	.word	0x2003e664
   d8158:	000da800 	.word	0x000da800

000d815c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d815c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d815e:	2000      	movs	r0, #0
   d8160:	f7fe f876 	bl	d6250 <spark_sync_time_pending>
   d8164:	b128      	cbz	r0, d8172 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8166:	f7fe f86b 	bl	d6240 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d816a:	f080 0001 	eor.w	r0, r0, #1
   d816e:	b2c0      	uxtb	r0, r0
    }
   d8170:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8172:	2001      	movs	r0, #1
   d8174:	e7fc      	b.n	d8170 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d8176 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d8176:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d8178:	2000      	movs	r0, #0
   d817a:	f7fd fd57 	bl	d5c2c <hal_rtc_time_is_valid>
    if (rtcstate)
   d817e:	4604      	mov	r4, r0
   d8180:	b9a0      	cbnz	r0, d81ac <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8182:	f7fd ff97 	bl	d60b4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8186:	2801      	cmp	r0, #1
   d8188:	d110      	bne.n	d81ac <_ZN9TimeClass7isValidEv+0x36>
   d818a:	4620      	mov	r0, r4
   d818c:	f7fd ffaa 	bl	d60e4 <system_thread_get_state>
   d8190:	b960      	cbnz	r0, d81ac <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d8192:	f7ff ffe3 	bl	d815c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8196:	b910      	cbnz	r0, d819e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d8198:	f7fe f842 	bl	d6220 <spark_process>
        while (_while() && !_condition()) {
   d819c:	e7f9      	b.n	d8192 <_ZN9TimeClass7isValidEv+0x1c>
   d819e:	f7ff ffdd 	bl	d815c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d81a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d81a6:	2000      	movs	r0, #0
   d81a8:	f7fd bd40 	b.w	d5c2c <hal_rtc_time_is_valid>
}
   d81ac:	4620      	mov	r0, r4
   d81ae:	bd10      	pop	{r4, pc}

000d81b0 <_ZN9TimeClass3nowEv>:
{
   d81b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d81b2:	f7ff ffe0 	bl	d8176 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d81b6:	2210      	movs	r2, #16
   d81b8:	2100      	movs	r1, #0
   d81ba:	4668      	mov	r0, sp
   d81bc:	f001 fe28 	bl	d9e10 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d81c0:	2100      	movs	r1, #0
   d81c2:	4668      	mov	r0, sp
   d81c4:	f7fd fd3a 	bl	d5c3c <hal_rtc_get_time>
}
   d81c8:	9800      	ldr	r0, [sp, #0]
   d81ca:	b005      	add	sp, #20
   d81cc:	f85d fb04 	ldr.w	pc, [sp], #4

000d81d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d81d0:	4b02      	ldr	r3, [pc, #8]	; (d81dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d81d2:	681a      	ldr	r2, [r3, #0]
   d81d4:	4b02      	ldr	r3, [pc, #8]	; (d81e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d81d6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d81d8:	4770      	bx	lr
   d81da:	bf00      	nop
   d81dc:	2003def8 	.word	0x2003def8
   d81e0:	2003e668 	.word	0x2003e668

000d81e4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d81e4:	2100      	movs	r1, #0
   d81e6:	f7fd bf75 	b.w	d60d4 <system_delay_ms>

000d81ea <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d81ea:	b510      	push	{r4, lr}
   d81ec:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d81ee:	f7fe fd5b 	bl	d6ca8 <_ZNSt14_Function_baseD1Ev>
   d81f2:	4620      	mov	r0, r4
   d81f4:	bd10      	pop	{r4, pc}
	...

000d81f8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d81f8:	4803      	ldr	r0, [pc, #12]	; (d8208 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d81fa:	4a04      	ldr	r2, [pc, #16]	; (d820c <_GLOBAL__sub_I_RGB+0x14>)
   d81fc:	4904      	ldr	r1, [pc, #16]	; (d8210 <_GLOBAL__sub_I_RGB+0x18>)
   d81fe:	2300      	movs	r3, #0
   d8200:	6083      	str	r3, [r0, #8]
   d8202:	f000 bf85 	b.w	d9110 <__aeabi_atexit>
   d8206:	bf00      	nop
   d8208:	2003e66c 	.word	0x2003e66c
   d820c:	2003df60 	.word	0x2003df60
   d8210:	000d81eb 	.word	0x000d81eb

000d8214 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d8214:	4b01      	ldr	r3, [pc, #4]	; (d821c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d8216:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d8218:	4770      	bx	lr
   d821a:	bf00      	nop
   d821c:	2003defc 	.word	0x2003defc

000d8220 <serialEventRun>:
{
   d8220:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8222:	4b0b      	ldr	r3, [pc, #44]	; (d8250 <serialEventRun+0x30>)
   d8224:	b143      	cbz	r3, d8238 <serialEventRun+0x18>
   d8226:	f000 f985 	bl	d8534 <_Z16_fetch_usbserialv>
   d822a:	6803      	ldr	r3, [r0, #0]
   d822c:	691b      	ldr	r3, [r3, #16]
   d822e:	4798      	blx	r3
   d8230:	2800      	cmp	r0, #0
   d8232:	dd01      	ble.n	d8238 <serialEventRun+0x18>
        serialEvent();
   d8234:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d8238:	4b06      	ldr	r3, [pc, #24]	; (d8254 <serialEventRun+0x34>)
   d823a:	b143      	cbz	r3, d824e <serialEventRun+0x2e>
   d823c:	f000 f9f8 	bl	d8630 <_Z22__fetch_global_Serial1v>
   d8240:	6803      	ldr	r3, [r0, #0]
   d8242:	691b      	ldr	r3, [r3, #16]
   d8244:	4798      	blx	r3
   d8246:	2800      	cmp	r0, #0
   d8248:	dd01      	ble.n	d824e <serialEventRun+0x2e>
        serialEvent1();
   d824a:	f3af 8000 	nop.w
}
   d824e:	bd08      	pop	{r3, pc}
	...

000d8258 <_post_loop>:
{
   d8258:	b508      	push	{r3, lr}
	serialEventRun();
   d825a:	f7ff ffe1 	bl	d8220 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d825e:	f7fd fcc5 	bl	d5bec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8262:	4b01      	ldr	r3, [pc, #4]	; (d8268 <_post_loop+0x10>)
   d8264:	6018      	str	r0, [r3, #0]
}
   d8266:	bd08      	pop	{r3, pc}
   d8268:	2003e7cc 	.word	0x2003e7cc

000d826c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d826c:	4802      	ldr	r0, [pc, #8]	; (d8278 <_Z33system_initialize_user_backup_ramv+0xc>)
   d826e:	4a03      	ldr	r2, [pc, #12]	; (d827c <_Z33system_initialize_user_backup_ramv+0x10>)
   d8270:	4903      	ldr	r1, [pc, #12]	; (d8280 <_Z33system_initialize_user_backup_ramv+0x14>)
   d8272:	1a12      	subs	r2, r2, r0
   d8274:	f001 bda4 	b.w	d9dc0 <memcpy>
   d8278:	2003f400 	.word	0x2003f400
   d827c:	2003f404 	.word	0x2003f404
   d8280:	000dabd0 	.word	0x000dabd0

000d8284 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8284:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8286:	2300      	movs	r3, #0
   d8288:	9300      	str	r3, [sp, #0]
   d828a:	461a      	mov	r2, r3
   d828c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8290:	f7fd ff3a 	bl	d6108 <system_ctrl_set_result>
}
   d8294:	b003      	add	sp, #12
   d8296:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d829c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d829c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d829e:	8843      	ldrh	r3, [r0, #2]
   d82a0:	2b0a      	cmp	r3, #10
   d82a2:	d008      	beq.n	d82b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d82a4:	2b50      	cmp	r3, #80	; 0x50
   d82a6:	d10b      	bne.n	d82c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d82a8:	4b09      	ldr	r3, [pc, #36]	; (d82d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d82aa:	681b      	ldr	r3, [r3, #0]
   d82ac:	b14b      	cbz	r3, d82c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d82ae:	b003      	add	sp, #12
   d82b0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d82b4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d82b6:	f7ff ffe5 	bl	d8284 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d82ba:	b003      	add	sp, #12
   d82bc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d82c0:	2300      	movs	r3, #0
   d82c2:	9300      	str	r3, [sp, #0]
   d82c4:	461a      	mov	r2, r3
   d82c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d82ca:	f7fd ff1d 	bl	d6108 <system_ctrl_set_result>
}
   d82ce:	e7f4      	b.n	d82ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d82d0:	2003e680 	.word	0x2003e680

000d82d4 <module_user_init_hook>:
{
   d82d4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d82d6:	4c12      	ldr	r4, [pc, #72]	; (d8320 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d82d8:	4812      	ldr	r0, [pc, #72]	; (d8324 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d82da:	4d13      	ldr	r5, [pc, #76]	; (d8328 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d82dc:	2100      	movs	r1, #0
   d82de:	f7fd fff7 	bl	d62d0 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d82e2:	6823      	ldr	r3, [r4, #0]
   d82e4:	42ab      	cmp	r3, r5
   d82e6:	4b11      	ldr	r3, [pc, #68]	; (d832c <module_user_init_hook+0x58>)
   d82e8:	bf0c      	ite	eq
   d82ea:	2201      	moveq	r2, #1
   d82ec:	2200      	movne	r2, #0
   d82ee:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d82f0:	d002      	beq.n	d82f8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d82f2:	f7ff ffbb 	bl	d826c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d82f6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d82f8:	f7fd fc68 	bl	d5bcc <HAL_RNG_GetRandomNumber>
   d82fc:	4604      	mov	r4, r0
    srand(seed);
   d82fe:	f001 fd8f 	bl	d9e20 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8302:	4b0b      	ldr	r3, [pc, #44]	; (d8330 <module_user_init_hook+0x5c>)
   d8304:	b113      	cbz	r3, d830c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d8306:	4620      	mov	r0, r4
   d8308:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d830c:	2100      	movs	r1, #0
   d830e:	4808      	ldr	r0, [pc, #32]	; (d8330 <module_user_init_hook+0x5c>)
   d8310:	f7fd ffa6 	bl	d6260 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d8314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8318:	4806      	ldr	r0, [pc, #24]	; (d8334 <module_user_init_hook+0x60>)
   d831a:	2100      	movs	r1, #0
   d831c:	f7fd beea 	b.w	d60f4 <system_ctrl_set_app_request_handler>
   d8320:	2003f400 	.word	0x2003f400
   d8324:	000d8215 	.word	0x000d8215
   d8328:	9a271c1e 	.word	0x9a271c1e
   d832c:	2003e67c 	.word	0x2003e67c
   d8330:	00000000 	.word	0x00000000
   d8334:	000d829d 	.word	0x000d829d

000d8338 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d8338:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d833a:	2308      	movs	r3, #8
   d833c:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d8340:	6803      	ldr	r3, [r0, #0]
   d8342:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d8346:	7a03      	ldrb	r3, [r0, #8]
   d8348:	f88d 3003 	strb.w	r3, [sp, #3]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d834c:	2100      	movs	r1, #0
    opts.timeout = timeout_;
   d834e:	6843      	ldr	r3, [r0, #4]
   d8350:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d8352:	4668      	mov	r0, sp
   d8354:	f7fd ff8c 	bl	d6270 <spark_cloud_disconnect>
}
   d8358:	b003      	add	sp, #12
   d835a:	f85d fb04 	ldr.w	pc, [sp], #4

000d835e <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d835e:	4770      	bx	lr

000d8360 <_ZN9IPAddressD0Ev>:
   d8360:	b510      	push	{r4, lr}
   d8362:	2118      	movs	r1, #24
   d8364:	4604      	mov	r4, r0
   d8366:	f000 fed8 	bl	d911a <_ZdlPvj>
   d836a:	4620      	mov	r0, r4
   d836c:	bd10      	pop	{r4, pc}

000d836e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d836e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8370:	7d03      	ldrb	r3, [r0, #20]
   d8372:	2b06      	cmp	r3, #6
{
   d8374:	b08d      	sub	sp, #52	; 0x34
   d8376:	460e      	mov	r6, r1
   d8378:	f100 0704 	add.w	r7, r0, #4
   d837c:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d8380:	d012      	beq.n	d83a8 <_ZNK9IPAddress7printToER5Print+0x3a>
   d8382:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d8386:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d838a:	220a      	movs	r2, #10
   d838c:	4630      	mov	r0, r6
   d838e:	f7ff fddc 	bl	d7f4a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8392:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8394:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d8396:	d019      	beq.n	d83cc <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d8398:	2c00      	cmp	r4, #0
   d839a:	d0f4      	beq.n	d8386 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d839c:	212e      	movs	r1, #46	; 0x2e
   d839e:	4630      	mov	r0, r6
   d83a0:	f7ff fdb4 	bl	d7f0c <_ZN5Print5printEc>
   d83a4:	4404      	add	r4, r0
   d83a6:	e7ee      	b.n	d8386 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d83a8:	232f      	movs	r3, #47	; 0x2f
   d83aa:	466a      	mov	r2, sp
   d83ac:	4639      	mov	r1, r7
   d83ae:	200a      	movs	r0, #10
		buf[0] = 0;
   d83b0:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d83b4:	f7fd fcf6 	bl	d5da4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d83b8:	4668      	mov	r0, sp
   d83ba:	f001 fd67 	bl	d9e8c <strlen>
   d83be:	6833      	ldr	r3, [r6, #0]
   d83c0:	4602      	mov	r2, r0
   d83c2:	68db      	ldr	r3, [r3, #12]
   d83c4:	4669      	mov	r1, sp
   d83c6:	4630      	mov	r0, r6
   d83c8:	4798      	blx	r3
   d83ca:	4604      	mov	r4, r0
    }
    return n;
}
   d83cc:	4620      	mov	r0, r4
   d83ce:	b00d      	add	sp, #52	; 0x34
   d83d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d83d4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d83d4:	b510      	push	{r4, lr}
   d83d6:	4b05      	ldr	r3, [pc, #20]	; (d83ec <_ZN9IPAddressC1Ev+0x18>)
   d83d8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d83da:	2211      	movs	r2, #17
   d83dc:	f840 3b04 	str.w	r3, [r0], #4
   d83e0:	2100      	movs	r1, #0
   d83e2:	f001 fd15 	bl	d9e10 <memset>
}
   d83e6:	4620      	mov	r0, r4
   d83e8:	bd10      	pop	{r4, pc}
   d83ea:	bf00      	nop
   d83ec:	000da828 	.word	0x000da828

000d83f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d83f0:	4603      	mov	r3, r0
   d83f2:	4a07      	ldr	r2, [pc, #28]	; (d8410 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d83f4:	b510      	push	{r4, lr}
   d83f6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d83fa:	f101 0210 	add.w	r2, r1, #16
   d83fe:	f851 4b04 	ldr.w	r4, [r1], #4
   d8402:	f843 4b04 	str.w	r4, [r3], #4
   d8406:	4291      	cmp	r1, r2
   d8408:	d1f9      	bne.n	d83fe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d840a:	780a      	ldrb	r2, [r1, #0]
   d840c:	701a      	strb	r2, [r3, #0]
}
   d840e:	bd10      	pop	{r4, pc}
   d8410:	000da828 	.word	0x000da828

000d8414 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d8414:	7d03      	ldrb	r3, [r0, #20]
   d8416:	2b04      	cmp	r3, #4
   d8418:	d104      	bne.n	d8424 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d841a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d841c:	3800      	subs	r0, #0
   d841e:	bf18      	it	ne
   d8420:	2001      	movne	r0, #1
   d8422:	4770      	bx	lr
    } else if (version() == 6) {
   d8424:	2b06      	cmp	r3, #6
   d8426:	d107      	bne.n	d8438 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d8428:	6843      	ldr	r3, [r0, #4]
   d842a:	b93b      	cbnz	r3, d843c <_ZNK9IPAddresscvbEv+0x28>
   d842c:	6883      	ldr	r3, [r0, #8]
   d842e:	b92b      	cbnz	r3, d843c <_ZNK9IPAddresscvbEv+0x28>
   d8430:	68c3      	ldr	r3, [r0, #12]
   d8432:	b91b      	cbnz	r3, d843c <_ZNK9IPAddresscvbEv+0x28>
   d8434:	6900      	ldr	r0, [r0, #16]
   d8436:	e7f1      	b.n	d841c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d8438:	2000      	movs	r0, #0
   d843a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d843c:	2001      	movs	r0, #1
}
   d843e:	4770      	bx	lr

000d8440 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d8440:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8442:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8446:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d844a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d844e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d8452:	2304      	movs	r3, #4
   d8454:	6041      	str	r1, [r0, #4]
   d8456:	7503      	strb	r3, [r0, #20]
}
   d8458:	bd10      	pop	{r4, pc}
	...

000d845c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d845c:	b513      	push	{r0, r1, r4, lr}
   d845e:	4b05      	ldr	r3, [pc, #20]	; (d8474 <_ZN9IPAddressC1EPKh+0x18>)
   d8460:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d8462:	78cb      	ldrb	r3, [r1, #3]
   d8464:	9300      	str	r3, [sp, #0]
   d8466:	788b      	ldrb	r3, [r1, #2]
   d8468:	784a      	ldrb	r2, [r1, #1]
   d846a:	7809      	ldrb	r1, [r1, #0]
   d846c:	f7ff ffe8 	bl	d8440 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8470:	b002      	add	sp, #8
   d8472:	bd10      	pop	{r4, pc}
   d8474:	000da828 	.word	0x000da828

000d8478 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8478:	7441      	strb	r1, [r0, #17]
}
   d847a:	4770      	bx	lr

000d847c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d847c:	4770      	bx	lr

000d847e <_ZN9USBSerial4readEv>:
{
   d847e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8480:	2100      	movs	r1, #0
   d8482:	7c00      	ldrb	r0, [r0, #16]
   d8484:	f7fd fde6 	bl	d6054 <HAL_USB_USART_Receive_Data>
}
   d8488:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d848c:	bd08      	pop	{r3, pc}

000d848e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d848e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8490:	2101      	movs	r1, #1
   d8492:	7c00      	ldrb	r0, [r0, #16]
   d8494:	f7fd fdde 	bl	d6054 <HAL_USB_USART_Receive_Data>
}
   d8498:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d849c:	bd08      	pop	{r3, pc}

000d849e <_ZN9USBSerial17availableForWriteEv>:
{
   d849e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d84a0:	7c00      	ldrb	r0, [r0, #16]
   d84a2:	f7fd fdcf 	bl	d6044 <HAL_USB_USART_Available_Data_For_Write>
}
   d84a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d84aa:	bd08      	pop	{r3, pc}

000d84ac <_ZN9USBSerial9availableEv>:
{
   d84ac:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d84ae:	7c00      	ldrb	r0, [r0, #16]
   d84b0:	f7fd fdc0 	bl	d6034 <HAL_USB_USART_Available_Data>
}
   d84b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d84b8:	bd08      	pop	{r3, pc}

000d84ba <_ZN9USBSerial5writeEh>:
{
   d84ba:	b513      	push	{r0, r1, r4, lr}
   d84bc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d84be:	7c00      	ldrb	r0, [r0, #16]
{
   d84c0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d84c2:	f7fd fdbf 	bl	d6044 <HAL_USB_USART_Available_Data_For_Write>
   d84c6:	2800      	cmp	r0, #0
   d84c8:	9901      	ldr	r1, [sp, #4]
   d84ca:	dc01      	bgt.n	d84d0 <_ZN9USBSerial5writeEh+0x16>
   d84cc:	7c60      	ldrb	r0, [r4, #17]
   d84ce:	b120      	cbz	r0, d84da <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d84d0:	7c20      	ldrb	r0, [r4, #16]
   d84d2:	f7fd fdc7 	bl	d6064 <HAL_USB_USART_Send_Data>
   d84d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d84da:	b002      	add	sp, #8
   d84dc:	bd10      	pop	{r4, pc}

000d84de <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d84de:	7c00      	ldrb	r0, [r0, #16]
   d84e0:	f7fd bdc8 	b.w	d6074 <HAL_USB_USART_Flush_Data>

000d84e4 <_ZN9USBSerialD0Ev>:
   d84e4:	b510      	push	{r4, lr}
   d84e6:	2114      	movs	r1, #20
   d84e8:	4604      	mov	r4, r0
   d84ea:	f000 fe16 	bl	d911a <_ZdlPvj>
   d84ee:	4620      	mov	r0, r4
   d84f0:	bd10      	pop	{r4, pc}
	...

000d84f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d84f4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d84f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d84fa:	4604      	mov	r4, r0
   d84fc:	4608      	mov	r0, r1
   d84fe:	2100      	movs	r1, #0
   d8500:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8504:	4b04      	ldr	r3, [pc, #16]	; (d8518 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8506:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d8508:	2301      	movs	r3, #1
  _serial = serial;
   d850a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d850c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d850e:	4611      	mov	r1, r2
   d8510:	f7fd fd80 	bl	d6014 <HAL_USB_USART_Init>
}
   d8514:	4620      	mov	r0, r4
   d8516:	bd10      	pop	{r4, pc}
   d8518:	000da83c 	.word	0x000da83c

000d851c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d851c:	7c00      	ldrb	r0, [r0, #16]
   d851e:	2200      	movs	r2, #0
   d8520:	f7fd bd80 	b.w	d6024 <HAL_USB_USART_Begin>

000d8524 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8524:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8526:	2214      	movs	r2, #20
{
   d8528:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d852a:	2100      	movs	r1, #0
   d852c:	f001 fc70 	bl	d9e10 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8530:	4620      	mov	r0, r4
   d8532:	bd10      	pop	{r4, pc}

000d8534 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8534:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8536:	4c10      	ldr	r4, [pc, #64]	; (d8578 <_Z16_fetch_usbserialv+0x44>)
{
   d8538:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d853a:	a803      	add	r0, sp, #12
   d853c:	f7ff fff2 	bl	d8524 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8540:	7821      	ldrb	r1, [r4, #0]
   d8542:	f3bf 8f5b 	dmb	ish
   d8546:	f011 0101 	ands.w	r1, r1, #1
   d854a:	d111      	bne.n	d8570 <_Z16_fetch_usbserialv+0x3c>
   d854c:	4620      	mov	r0, r4
   d854e:	9101      	str	r1, [sp, #4]
   d8550:	f7fb fda7 	bl	d40a2 <__cxa_guard_acquire>
   d8554:	9901      	ldr	r1, [sp, #4]
   d8556:	b158      	cbz	r0, d8570 <_Z16_fetch_usbserialv+0x3c>
   d8558:	aa03      	add	r2, sp, #12
   d855a:	4808      	ldr	r0, [pc, #32]	; (d857c <_Z16_fetch_usbserialv+0x48>)
   d855c:	f7ff ffca 	bl	d84f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8560:	4620      	mov	r0, r4
   d8562:	f7fb fda3 	bl	d40ac <__cxa_guard_release>
   d8566:	4a06      	ldr	r2, [pc, #24]	; (d8580 <_Z16_fetch_usbserialv+0x4c>)
   d8568:	4906      	ldr	r1, [pc, #24]	; (d8584 <_Z16_fetch_usbserialv+0x50>)
   d856a:	4804      	ldr	r0, [pc, #16]	; (d857c <_Z16_fetch_usbserialv+0x48>)
   d856c:	f000 fdd0 	bl	d9110 <__aeabi_atexit>
	return _usbserial;
}
   d8570:	4802      	ldr	r0, [pc, #8]	; (d857c <_Z16_fetch_usbserialv+0x48>)
   d8572:	b008      	add	sp, #32
   d8574:	bd10      	pop	{r4, pc}
   d8576:	bf00      	nop
   d8578:	2003e684 	.word	0x2003e684
   d857c:	2003e688 	.word	0x2003e688
   d8580:	2003df60 	.word	0x2003df60
   d8584:	000d847d 	.word	0x000d847d

000d8588 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d8588:	4770      	bx	lr

000d858a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d858a:	7441      	strb	r1, [r0, #17]
}
   d858c:	4770      	bx	lr

000d858e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d858e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d8590:	7c00      	ldrb	r0, [r0, #16]
   d8592:	f7fd fc57 	bl	d5e44 <hal_usart_available_data_for_write>
}
   d8596:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d859a:	bd08      	pop	{r3, pc}

000d859c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d859c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d859e:	7c00      	ldrb	r0, [r0, #16]
   d85a0:	f7fd fc28 	bl	d5df4 <hal_usart_available>
}
   d85a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d85a8:	bd08      	pop	{r3, pc}

000d85aa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d85aa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d85ac:	7c00      	ldrb	r0, [r0, #16]
   d85ae:	f7fd fc31 	bl	d5e14 <hal_usart_peek>
}
   d85b2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d85b6:	bd08      	pop	{r3, pc}

000d85b8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d85b8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d85ba:	7c00      	ldrb	r0, [r0, #16]
   d85bc:	f7fd fc22 	bl	d5e04 <hal_usart_read>
}
   d85c0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d85c4:	bd08      	pop	{r3, pc}

000d85c6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d85c6:	7c00      	ldrb	r0, [r0, #16]
   d85c8:	f7fd bc2c 	b.w	d5e24 <hal_usart_flush>

000d85cc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d85cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d85ce:	7c45      	ldrb	r5, [r0, #17]
{
   d85d0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d85d2:	b12d      	cbz	r5, d85e0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d85d4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d85d6:	b003      	add	sp, #12
   d85d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d85dc:	f7fd bc02 	b.w	d5de4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d85e0:	7c00      	ldrb	r0, [r0, #16]
   d85e2:	9101      	str	r1, [sp, #4]
   d85e4:	f7fd fc2e 	bl	d5e44 <hal_usart_available_data_for_write>
   d85e8:	2800      	cmp	r0, #0
   d85ea:	9901      	ldr	r1, [sp, #4]
   d85ec:	dcf2      	bgt.n	d85d4 <_ZN11USARTSerial5writeEh+0x8>
}
   d85ee:	4628      	mov	r0, r5
   d85f0:	b003      	add	sp, #12
   d85f2:	bd30      	pop	{r4, r5, pc}

000d85f4 <_ZN11USARTSerialD0Ev>:
   d85f4:	b510      	push	{r4, lr}
   d85f6:	2114      	movs	r1, #20
   d85f8:	4604      	mov	r4, r0
   d85fa:	f000 fd8e 	bl	d911a <_ZdlPvj>
   d85fe:	4620      	mov	r0, r4
   d8600:	bd10      	pop	{r4, pc}
	...

000d8604 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d8604:	b510      	push	{r4, lr}
   d8606:	f04f 0c00 	mov.w	ip, #0
   d860a:	4604      	mov	r4, r0
   d860c:	4608      	mov	r0, r1
   d860e:	4611      	mov	r1, r2
   d8610:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8614:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d8618:	4a04      	ldr	r2, [pc, #16]	; (d862c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d861a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d861c:	2201      	movs	r2, #1
  _serial = serial;
   d861e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8620:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d8622:	461a      	mov	r2, r3
   d8624:	f7fd fbd6 	bl	d5dd4 <hal_usart_init>
}
   d8628:	4620      	mov	r0, r4
   d862a:	bd10      	pop	{r4, pc}
   d862c:	000da86c 	.word	0x000da86c

000d8630 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8630:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8632:	4c0e      	ldr	r4, [pc, #56]	; (d866c <_Z22__fetch_global_Serial1v+0x3c>)
   d8634:	7821      	ldrb	r1, [r4, #0]
   d8636:	f3bf 8f5b 	dmb	ish
   d863a:	f011 0101 	ands.w	r1, r1, #1
   d863e:	d112      	bne.n	d8666 <_Z22__fetch_global_Serial1v+0x36>
   d8640:	4620      	mov	r0, r4
   d8642:	9101      	str	r1, [sp, #4]
   d8644:	f7fb fd2d 	bl	d40a2 <__cxa_guard_acquire>
   d8648:	9901      	ldr	r1, [sp, #4]
   d864a:	b160      	cbz	r0, d8666 <_Z22__fetch_global_Serial1v+0x36>
   d864c:	4a08      	ldr	r2, [pc, #32]	; (d8670 <_Z22__fetch_global_Serial1v+0x40>)
   d864e:	4b09      	ldr	r3, [pc, #36]	; (d8674 <_Z22__fetch_global_Serial1v+0x44>)
   d8650:	4809      	ldr	r0, [pc, #36]	; (d8678 <_Z22__fetch_global_Serial1v+0x48>)
   d8652:	f7ff ffd7 	bl	d8604 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d8656:	4620      	mov	r0, r4
   d8658:	f7fb fd28 	bl	d40ac <__cxa_guard_release>
   d865c:	4a07      	ldr	r2, [pc, #28]	; (d867c <_Z22__fetch_global_Serial1v+0x4c>)
   d865e:	4908      	ldr	r1, [pc, #32]	; (d8680 <_Z22__fetch_global_Serial1v+0x50>)
   d8660:	4805      	ldr	r0, [pc, #20]	; (d8678 <_Z22__fetch_global_Serial1v+0x48>)
   d8662:	f000 fd55 	bl	d9110 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8666:	4804      	ldr	r0, [pc, #16]	; (d8678 <_Z22__fetch_global_Serial1v+0x48>)
   d8668:	b002      	add	sp, #8
   d866a:	bd10      	pop	{r4, pc}
   d866c:	2003e69c 	.word	0x2003e69c
   d8670:	2003e6a0 	.word	0x2003e6a0
   d8674:	2003e724 	.word	0x2003e724
   d8678:	2003e7a8 	.word	0x2003e7a8
   d867c:	2003df60 	.word	0x2003df60
   d8680:	000d8589 	.word	0x000d8589

000d8684 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8684:	4770      	bx	lr

000d8686 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8688:	4606      	mov	r6, r0
   d868a:	4615      	mov	r5, r2
   d868c:	460c      	mov	r4, r1
   d868e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8690:	42bc      	cmp	r4, r7
   d8692:	d006      	beq.n	d86a2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8694:	6833      	ldr	r3, [r6, #0]
   d8696:	f814 1b01 	ldrb.w	r1, [r4], #1
   d869a:	689b      	ldr	r3, [r3, #8]
   d869c:	4630      	mov	r0, r6
   d869e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d86a0:	e7f6      	b.n	d8690 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d86a2:	4628      	mov	r0, r5
   d86a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d86a6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d86a6:	7c00      	ldrb	r0, [r0, #16]
   d86a8:	2200      	movs	r2, #0
   d86aa:	f7fd bbf3 	b.w	d5e94 <hal_i2c_write>

000d86ae <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d86ae:	7c00      	ldrb	r0, [r0, #16]
   d86b0:	2100      	movs	r1, #0
   d86b2:	f7fd bbf7 	b.w	d5ea4 <hal_i2c_available>

000d86b6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d86b6:	7c00      	ldrb	r0, [r0, #16]
   d86b8:	2100      	movs	r1, #0
   d86ba:	f7fd bbfb 	b.w	d5eb4 <hal_i2c_read>

000d86be <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d86be:	7c00      	ldrb	r0, [r0, #16]
   d86c0:	2100      	movs	r1, #0
   d86c2:	f7fd bbff 	b.w	d5ec4 <hal_i2c_peek>

000d86c6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d86c6:	7c00      	ldrb	r0, [r0, #16]
   d86c8:	2100      	movs	r1, #0
   d86ca:	f7fd bc03 	b.w	d5ed4 <hal_i2c_flush>

000d86ce <_ZN7TwoWireD0Ev>:
   d86ce:	b510      	push	{r4, lr}
   d86d0:	2114      	movs	r1, #20
   d86d2:	4604      	mov	r4, r0
   d86d4:	f000 fd21 	bl	d911a <_ZdlPvj>
   d86d8:	4620      	mov	r0, r4
   d86da:	bd10      	pop	{r4, pc}

000d86dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d86dc:	b510      	push	{r4, lr}
   d86de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d86e2:	4604      	mov	r4, r0
   d86e4:	4608      	mov	r0, r1
   d86e6:	2100      	movs	r1, #0
   d86e8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d86ec:	4b03      	ldr	r3, [pc, #12]	; (d86fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d86ee:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d86f0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d86f2:	4611      	mov	r1, r2
   d86f4:	f7fd fbfe 	bl	d5ef4 <hal_i2c_init>
}
   d86f8:	4620      	mov	r0, r4
   d86fa:	bd10      	pop	{r4, pc}
   d86fc:	000da89c 	.word	0x000da89c

000d8700 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8700:	2300      	movs	r3, #0
   d8702:	7c00      	ldrb	r0, [r0, #16]
   d8704:	461a      	mov	r2, r3
   d8706:	4619      	mov	r1, r3
   d8708:	f7fd bba4 	b.w	d5e54 <hal_i2c_begin>

000d870c <_ZN7TwoWire3endEv>:
	hal_i2c_end(_i2c, NULL);
   d870c:	7c00      	ldrb	r0, [r0, #16]
   d870e:	2100      	movs	r1, #0
   d8710:	f7fd bba8 	b.w	d5e64 <hal_i2c_end>

000d8714 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8714:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8716:	2200      	movs	r2, #0
   d8718:	2314      	movs	r3, #20
   d871a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d871e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d8722:	780b      	ldrb	r3, [r1, #0]
   d8724:	f88d 3008 	strb.w	r3, [sp, #8]
   d8728:	684b      	ldr	r3, [r1, #4]
   d872a:	9303      	str	r3, [sp, #12]
   d872c:	68cb      	ldr	r3, [r1, #12]
   d872e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d8730:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8732:	7a0b      	ldrb	r3, [r1, #8]
   d8734:	9305      	str	r3, [sp, #20]
   d8736:	a901      	add	r1, sp, #4
   d8738:	f7fd fbe4 	bl	d5f04 <hal_i2c_request_ex>
}
   d873c:	b007      	add	sp, #28
   d873e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8742 <_ZN7TwoWire11requestFromEhjh>:
{
   d8742:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8744:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8746:	f88d 1000 	strb.w	r1, [sp]
   d874a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d874e:	9103      	str	r1, [sp, #12]
   d8750:	bf18      	it	ne
   d8752:	2301      	movne	r3, #1
   d8754:	4669      	mov	r1, sp
    size_ = size;
   d8756:	9201      	str	r2, [sp, #4]
   d8758:	f88d 3008 	strb.w	r3, [sp, #8]
   d875c:	f7ff ffda 	bl	d8714 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8760:	b005      	add	sp, #20
   d8762:	f85d fb04 	ldr.w	pc, [sp], #4

000d8766 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d8766:	2301      	movs	r3, #1
   d8768:	f7ff bfeb 	b.w	d8742 <_ZN7TwoWire11requestFromEhjh>

000d876c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d876c:	7c00      	ldrb	r0, [r0, #16]
   d876e:	2200      	movs	r2, #0
   d8770:	f7fd bb80 	b.w	d5e74 <hal_i2c_begin_transmission>

000d8774 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d8774:	b2c9      	uxtb	r1, r1
   d8776:	f7ff bff9 	b.w	d876c <_ZN7TwoWire17beginTransmissionEh>

000d877a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d877a:	7c00      	ldrb	r0, [r0, #16]
   d877c:	2200      	movs	r2, #0
   d877e:	f7fd bb81 	b.w	d5e84 <hal_i2c_end_transmission>

000d8782 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d8782:	2101      	movs	r1, #1
   d8784:	f7ff bff9 	b.w	d877a <_ZN7TwoWire15endTransmissionEh>

000d8788 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d8788:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d878a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d878c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d8790:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d8792:	2201      	movs	r2, #1
   d8794:	f04f 33ff 	mov.w	r3, #4294967295
   d8798:	f10d 0107 	add.w	r1, sp, #7
   d879c:	47a0      	blx	r4
}
   d879e:	b002      	add	sp, #8
   d87a0:	bd10      	pop	{r4, pc}

000d87a2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d87a2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d87a4:	6803      	ldr	r3, [r0, #0]
   d87a6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d87a8:	f04f 33ff 	mov.w	r3, #4294967295
   d87ac:	46a4      	mov	ip, r4
}
   d87ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d87b2:	4760      	bx	ip

000d87b4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d87b4:	b513      	push	{r0, r1, r4, lr}
   d87b6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d87b8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d87ba:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d87be:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d87c0:	f10d 0107 	add.w	r1, sp, #7
   d87c4:	2201      	movs	r2, #1
   d87c6:	47a0      	blx	r4
}
   d87c8:	b002      	add	sp, #8
   d87ca:	bd10      	pop	{r4, pc}

000d87cc <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d87cc:	4770      	bx	lr

000d87ce <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d87ce:	b538      	push	{r3, r4, r5, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d87d0:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d87d2:	681a      	ldr	r2, [r3, #0]
   d87d4:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d87d6:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d87d8:	da10      	bge.n	d87fc <_ZN9TCPClient9connectedEv+0x2e>
   d87da:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d87de:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d87e2:	429a      	cmp	r2, r3
   d87e4:	d10a      	bne.n	d87fc <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d87e6:	6803      	ldr	r3, [r0, #0]
   d87e8:	691b      	ldr	r3, [r3, #16]
   d87ea:	4798      	blx	r3
        if (!rv) {
   d87ec:	4604      	mov	r4, r0
   d87ee:	b928      	cbnz	r0, d87fc <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d87f0:	682b      	ldr	r3, [r5, #0]
   d87f2:	4628      	mov	r0, r5
   d87f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d87f6:	4798      	blx	r3
        rv = available();
   d87f8:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d87fa:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d87fc:	2001      	movs	r0, #1
   d87fe:	e7fc      	b.n	d87fa <_ZN9TCPClient9connectedEv+0x2c>

000d8800 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d8800:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d8802:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d8804:	43c0      	mvns	r0, r0
   d8806:	0fc0      	lsrs	r0, r0, #31
   d8808:	4770      	bx	lr

000d880a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d880a:	4770      	bx	lr

000d880c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d880c:	4b06      	ldr	r3, [pc, #24]	; (d8828 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d880e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d8810:	b510      	push	{r4, lr}
   d8812:	f100 040c 	add.w	r4, r0, #12
	    ||
   d8816:	d005      	beq.n	d8824 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d8818:	4608      	mov	r0, r1
   d881a:	f000 fc87 	bl	d912c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d881e:	2800      	cmp	r0, #0
	return nullptr;
   d8820:	bf08      	it	eq
   d8822:	2400      	moveq	r4, #0
      }
   d8824:	4620      	mov	r0, r4
   d8826:	bd10      	pop	{r4, pc}
   d8828:	000da7bc 	.word	0x000da7bc

000d882c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d882c:	b510      	push	{r4, lr}
   d882e:	21ac      	movs	r1, #172	; 0xac
   d8830:	4604      	mov	r4, r0
   d8832:	f000 fc72 	bl	d911a <_ZdlPvj>
   d8836:	4620      	mov	r0, r4
   d8838:	bd10      	pop	{r4, pc}

000d883a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p);
   d883a:	f7fb bc30 	b.w	d409e <_ZdlPv>

000d883e <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d883e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d8842:	f04f 0800 	mov.w	r8, #0
   d8846:	b086      	sub	sp, #24
   d8848:	461d      	mov	r5, r3
   d884a:	f8c0 8004 	str.w	r8, [r0, #4]
   d884e:	4604      	mov	r4, r0
   d8850:	460e      	mov	r6, r1
   d8852:	4617      	mov	r7, r2
    struct timeval tv = {};
   d8854:	4641      	mov	r1, r8
   d8856:	2210      	movs	r2, #16
   d8858:	a802      	add	r0, sp, #8
   d885a:	f001 fad9 	bl	d9e10 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d885e:	1c6b      	adds	r3, r5, #1
   d8860:	d009      	beq.n	d8876 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d8862:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d8866:	fbb5 f3f0 	udiv	r3, r5, r0
   d886a:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d886e:	fb00 5313 	mls	r3, r0, r3, r5
   d8872:	4358      	muls	r0, r3
   d8874:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d8876:	6960      	ldr	r0, [r4, #20]
   d8878:	2310      	movs	r3, #16
   d887a:	9300      	str	r3, [sp, #0]
   d887c:	6800      	ldr	r0, [r0, #0]
   d887e:	ab02      	add	r3, sp, #8
   d8880:	f241 0205 	movw	r2, #4101	; 0x1005
   d8884:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8888:	f7fd fb44 	bl	d5f14 <sock_setsockopt>
    if (ret < 0) {
   d888c:	2800      	cmp	r0, #0
   d888e:	da07      	bge.n	d88a0 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d8890:	f7fd fd16 	bl	d62c0 <__errno>
   d8894:	6803      	ldr	r3, [r0, #0]
   d8896:	6063      	str	r3, [r4, #4]
        return 0;
   d8898:	2000      	movs	r0, #0
}
   d889a:	b006      	add	sp, #24
   d889c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d88a0:	6960      	ldr	r0, [r4, #20]
   d88a2:	2300      	movs	r3, #0
   d88a4:	6800      	ldr	r0, [r0, #0]
   d88a6:	463a      	mov	r2, r7
   d88a8:	4631      	mov	r1, r6
   d88aa:	f7fd fb53 	bl	d5f54 <sock_send>
    if (ret < 0) {
   d88ae:	1e03      	subs	r3, r0, #0
   d88b0:	dbee      	blt.n	d8890 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d88b2:	4618      	mov	r0, r3
   d88b4:	e7f1      	b.n	d889a <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d88b8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d88b8:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d88ba:	6984      	ldr	r4, [r0, #24]
   d88bc:	4b0a      	ldr	r3, [pc, #40]	; (d88e8 <_ZN9TCPClientD1Ev+0x30>)
   d88be:	6003      	str	r3, [r0, #0]
   d88c0:	4605      	mov	r5, r0
   d88c2:	b17c      	cbz	r4, d88e4 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d88c4:	6863      	ldr	r3, [r4, #4]
   d88c6:	3b01      	subs	r3, #1
   d88c8:	6063      	str	r3, [r4, #4]
   d88ca:	b95b      	cbnz	r3, d88e4 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d88cc:	6823      	ldr	r3, [r4, #0]
   d88ce:	4620      	mov	r0, r4
   d88d0:	689b      	ldr	r3, [r3, #8]
   d88d2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d88d4:	68a3      	ldr	r3, [r4, #8]
   d88d6:	3b01      	subs	r3, #1
   d88d8:	60a3      	str	r3, [r4, #8]
   d88da:	b91b      	cbnz	r3, d88e4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d88dc:	6823      	ldr	r3, [r4, #0]
   d88de:	4620      	mov	r0, r4
   d88e0:	68db      	ldr	r3, [r3, #12]
   d88e2:	4798      	blx	r3
   d88e4:	4628      	mov	r0, r5
   d88e6:	bd38      	pop	{r3, r4, r5, pc}
   d88e8:	000da8f0 	.word	0x000da8f0

000d88ec <_ZN9TCPClientD0Ev>:
   d88ec:	b510      	push	{r4, lr}
   d88ee:	4604      	mov	r4, r0
   d88f0:	f7ff ffe2 	bl	d88b8 <_ZN9TCPClientD1Ev>
   d88f4:	4620      	mov	r0, r4
   d88f6:	211c      	movs	r1, #28
   d88f8:	f000 fc0f 	bl	d911a <_ZdlPvj>
   d88fc:	4620      	mov	r0, r4
   d88fe:	bd10      	pop	{r4, pc}

000d8900 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d8900:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8902:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d8904:	4b05      	ldr	r3, [pc, #20]	; (d891c <_ZN9TCPClient8remoteIPEv+0x1c>)
   d8906:	4604      	mov	r4, r0
   d8908:	358c      	adds	r5, #140	; 0x8c
   d890a:	f844 3b04 	str.w	r3, [r4], #4
   d890e:	4606      	mov	r6, r0
   d8910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8914:	682b      	ldr	r3, [r5, #0]
   d8916:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d8918:	4630      	mov	r0, r6
   d891a:	bd70      	pop	{r4, r5, r6, pc}
   d891c:	000da828 	.word	0x000da828

000d8920 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d8920:	b510      	push	{r4, lr}
   d8922:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8924:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8928:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d892c:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d892e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8930:	d005      	beq.n	d893e <_ZN9TCPClient4peekEv+0x1e>
   d8932:	6963      	ldr	r3, [r4, #20]
   d8934:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d8938:	4413      	add	r3, r2
   d893a:	7918      	ldrb	r0, [r3, #4]
}
   d893c:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d893e:	6803      	ldr	r3, [r0, #0]
   d8940:	691b      	ldr	r3, [r3, #16]
   d8942:	4798      	blx	r3
   d8944:	2800      	cmp	r0, #0
   d8946:	d1f4      	bne.n	d8932 <_ZN9TCPClient4peekEv+0x12>
   d8948:	f04f 30ff 	mov.w	r0, #4294967295
   d894c:	e7f6      	b.n	d893c <_ZN9TCPClient4peekEv+0x1c>

000d894e <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d894e:	b510      	push	{r4, lr}
   d8950:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8952:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8956:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d895a:	429a      	cmp	r2, r3
int TCPClient::read() {
   d895c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d895e:	d008      	beq.n	d8972 <_ZN9TCPClient4readEv+0x24>
   d8960:	6963      	ldr	r3, [r4, #20]
   d8962:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d8966:	1c51      	adds	r1, r2, #1
   d8968:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d896c:	4413      	add	r3, r2
   d896e:	7918      	ldrb	r0, [r3, #4]
}
   d8970:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8972:	6803      	ldr	r3, [r0, #0]
   d8974:	691b      	ldr	r3, [r3, #16]
   d8976:	4798      	blx	r3
   d8978:	2800      	cmp	r0, #0
   d897a:	d1f1      	bne.n	d8960 <_ZN9TCPClient4readEv+0x12>
   d897c:	f04f 30ff 	mov.w	r0, #4294967295
   d8980:	e7f6      	b.n	d8970 <_ZN9TCPClient4readEv+0x22>

000d8982 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d8982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8984:	6943      	ldr	r3, [r0, #20]
   d8986:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d8988:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d898c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8990:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d8992:	4605      	mov	r5, r0
   d8994:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d8996:	d016      	beq.n	d89c6 <_ZN9TCPClient4readEPhj+0x44>
   d8998:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d899a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d899e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d89a2:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d89a4:	42bc      	cmp	r4, r7
   d89a6:	bf28      	it	cs
   d89a8:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d89aa:	3304      	adds	r3, #4
   d89ac:	4622      	mov	r2, r4
   d89ae:	4419      	add	r1, r3
   d89b0:	4630      	mov	r0, r6
   d89b2:	f001 fa05 	bl	d9dc0 <memcpy>
   d89b6:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d89b8:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d89bc:	4423      	add	r3, r4
   d89be:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d89c2:	4620      	mov	r0, r4
   d89c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d89c6:	6803      	ldr	r3, [r0, #0]
   d89c8:	691b      	ldr	r3, [r3, #16]
   d89ca:	4798      	blx	r3
   d89cc:	2800      	cmp	r0, #0
   d89ce:	d1e3      	bne.n	d8998 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d89d0:	f04f 34ff 	mov.w	r4, #4294967295
   d89d4:	e7f5      	b.n	d89c2 <_ZN9TCPClient4readEPhj+0x40>

000d89d6 <_ZN9TCPClient12flush_bufferEv>:
   d89d6:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d89d8:	2300      	movs	r3, #0
   d89da:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d89de:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d89e0:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d89e4:	4770      	bx	lr

000d89e6 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d89e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d89ea:	461f      	mov	r7, r3
    stop();
   d89ec:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d89ee:	460c      	mov	r4, r1
    stop();
   d89f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d89f2:	b08a      	sub	sp, #40	; 0x28
   d89f4:	4605      	mov	r5, r0
   d89f6:	4616      	mov	r6, r2
    stop();
   d89f8:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d89fa:	7d23      	ldrb	r3, [r4, #20]
   d89fc:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d8a00:	2b04      	cmp	r3, #4
   d8a02:	bf0c      	ite	eq
   d8a04:	2002      	moveq	r0, #2
   d8a06:	200a      	movne	r0, #10
   d8a08:	2206      	movs	r2, #6
   d8a0a:	2101      	movs	r1, #1
   d8a0c:	f7fd faaa 	bl	d5f64 <sock_socket>
   d8a10:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d8a14:	696b      	ldr	r3, [r5, #20]
   d8a16:	681b      	ldr	r3, [r3, #0]
   d8a18:	2b00      	cmp	r3, #0
   d8a1a:	da08      	bge.n	d8a2e <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d8a1c:	682b      	ldr	r3, [r5, #0]
   d8a1e:	4628      	mov	r0, r5
   d8a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8a22:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d8a24:	4798      	blx	r3
}
   d8a26:	4620      	mov	r0, r4
   d8a28:	b00a      	add	sp, #40	; 0x28
   d8a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d8a2e:	4628      	mov	r0, r5
   d8a30:	f7ff ffd1 	bl	d89d6 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d8a34:	b1b7      	cbz	r7, d8a64 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d8a36:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8a38:	a903      	add	r1, sp, #12
   d8a3a:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d8a3c:	9303      	str	r3, [sp, #12]
   d8a3e:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8a42:	f7fd f8bb 	bl	d5bbc <if_index_to_name>
   d8a46:	2800      	cmp	r0, #0
   d8a48:	d1e8      	bne.n	d8a1c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d8a4a:	6968      	ldr	r0, [r5, #20]
   d8a4c:	2306      	movs	r3, #6
   d8a4e:	9300      	str	r3, [sp, #0]
   d8a50:	6800      	ldr	r0, [r0, #0]
   d8a52:	ab03      	add	r3, sp, #12
   d8a54:	f241 020b 	movw	r2, #4107	; 0x100b
   d8a58:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8a5c:	f7fd fa5a 	bl	d5f14 <sock_setsockopt>
   d8a60:	2800      	cmp	r0, #0
   d8a62:	d1db      	bne.n	d8a1c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d8a64:	221c      	movs	r2, #28
   d8a66:	2100      	movs	r1, #0
   d8a68:	a803      	add	r0, sp, #12
   d8a6a:	f001 f9d1 	bl	d9e10 <memset>
    if (ip.version() == 4) {
   d8a6e:	7d23      	ldrb	r3, [r4, #20]
   d8a70:	2b04      	cmp	r3, #4
   d8a72:	d11d      	bne.n	d8ab0 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d8a74:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d8a78:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d8a7a:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d8a7e:	f7fd f9a1 	bl	d5dc4 <inet_htons>
   d8a82:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d8a86:	6860      	ldr	r0, [r4, #4]
   d8a88:	f7fd f994 	bl	d5db4 <inet_htonl>
   d8a8c:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d8a8e:	696b      	ldr	r3, [r5, #20]
   d8a90:	221c      	movs	r2, #28
   d8a92:	6818      	ldr	r0, [r3, #0]
   d8a94:	a903      	add	r1, sp, #12
   d8a96:	f7fd fa4d 	bl	d5f34 <sock_connect>
   d8a9a:	2800      	cmp	r0, #0
   d8a9c:	d1be      	bne.n	d8a1c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d8a9e:	3404      	adds	r4, #4
   d8aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8aa2:	696d      	ldr	r5, [r5, #20]
   d8aa4:	358c      	adds	r5, #140	; 0x8c
   d8aa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8aa8:	6823      	ldr	r3, [r4, #0]
   d8aaa:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d8aac:	2401      	movs	r4, #1
   d8aae:	e7ba      	b.n	d8a26 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d8ab0:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d8ab4:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d8ab6:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d8aba:	f7fd f983 	bl	d5dc4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8abe:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d8ac0:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8ac4:	1d23      	adds	r3, r4, #4
   d8ac6:	f104 0714 	add.w	r7, r4, #20
   d8aca:	6818      	ldr	r0, [r3, #0]
   d8acc:	6859      	ldr	r1, [r3, #4]
   d8ace:	4632      	mov	r2, r6
   d8ad0:	c203      	stmia	r2!, {r0, r1}
   d8ad2:	3308      	adds	r3, #8
   d8ad4:	42bb      	cmp	r3, r7
   d8ad6:	4616      	mov	r6, r2
   d8ad8:	d1f7      	bne.n	d8aca <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d8ada:	e7d8      	b.n	d8a8e <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d8adc <_ZN9TCPClient9availableEv>:
{
   d8adc:	b530      	push	{r4, r5, lr}
   d8ade:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d8ae0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d8ae4:	b08b      	sub	sp, #44	; 0x2c
   d8ae6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d8ae8:	b12b      	cbz	r3, d8af6 <_ZN9TCPClient9availableEv+0x1a>
   d8aea:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d8aee:	429a      	cmp	r2, r3
   d8af0:	d101      	bne.n	d8af6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d8af2:	f7ff ff70 	bl	d89d6 <_ZN9TCPClient12flush_bufferEv>
   d8af6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d8af8:	6808      	ldr	r0, [r1, #0]
   d8afa:	2800      	cmp	r0, #0
   d8afc:	db18      	blt.n	d8b30 <_ZN9TCPClient9availableEv+0x54>
   d8afe:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d8b02:	2d7f      	cmp	r5, #127	; 0x7f
   d8b04:	d814      	bhi.n	d8b30 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d8b06:	3104      	adds	r1, #4
   d8b08:	2308      	movs	r3, #8
   d8b0a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d8b0e:	4429      	add	r1, r5
   d8b10:	f7fd fa18 	bl	d5f44 <sock_recv>
            if (ret > 0) {
   d8b14:	2800      	cmp	r0, #0
   d8b16:	dd13      	ble.n	d8b40 <_ZN9TCPClient9availableEv+0x64>
   d8b18:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d8b1a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8b1e:	b90a      	cbnz	r2, d8b24 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d8b20:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d8b24:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d8b26:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8b2a:	4410      	add	r0, r2
   d8b2c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d8b30:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d8b32:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d8b36:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d8b3a:	1ac0      	subs	r0, r0, r3
   d8b3c:	b00b      	add	sp, #44	; 0x2c
   d8b3e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d8b40:	f7fd fbbe 	bl	d62c0 <__errno>
   d8b44:	6803      	ldr	r3, [r0, #0]
   d8b46:	2b0b      	cmp	r3, #11
   d8b48:	d0f2      	beq.n	d8b30 <_ZN9TCPClient9availableEv+0x54>
   d8b4a:	f7fd fbb9 	bl	d62c0 <__errno>
   d8b4e:	6803      	ldr	r3, [r0, #0]
   d8b50:	2b0b      	cmp	r3, #11
   d8b52:	d0ed      	beq.n	d8b30 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d8b54:	2320      	movs	r3, #32
   d8b56:	2500      	movs	r5, #0
   d8b58:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d8b5c:	f7fd fbb0 	bl	d62c0 <__errno>
   d8b60:	6803      	ldr	r3, [r0, #0]
   d8b62:	9301      	str	r3, [sp, #4]
   d8b64:	4b08      	ldr	r3, [pc, #32]	; (d8b88 <_ZN9TCPClient9availableEv+0xac>)
   d8b66:	4909      	ldr	r1, [pc, #36]	; (d8b8c <_ZN9TCPClient9availableEv+0xb0>)
   d8b68:	9300      	str	r3, [sp, #0]
   d8b6a:	aa02      	add	r2, sp, #8
   d8b6c:	462b      	mov	r3, r5
   d8b6e:	2032      	movs	r0, #50	; 0x32
   d8b70:	f7fd fa98 	bl	d60a4 <log_message>
                    sock_close(d_->sock);
   d8b74:	6963      	ldr	r3, [r4, #20]
   d8b76:	6818      	ldr	r0, [r3, #0]
   d8b78:	f7fd f9d4 	bl	d5f24 <sock_close>
   d8b7c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d8b7e:	f04f 32ff 	mov.w	r2, #4294967295
   d8b82:	601a      	str	r2, [r3, #0]
   d8b84:	e7d4      	b.n	d8b30 <_ZN9TCPClient9availableEv+0x54>
   d8b86:	bf00      	nop
   d8b88:	000da8bc 	.word	0x000da8bc
   d8b8c:	000da644 	.word	0x000da644

000d8b90 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d8b90:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d8b92:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d8b94:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d8b96:	6818      	ldr	r0, [r3, #0]
   d8b98:	2800      	cmp	r0, #0
   d8b9a:	db01      	blt.n	d8ba0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d8b9c:	f7fd f9c2 	bl	d5f24 <sock_close>
   d8ba0:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d8ba2:	f04f 32ff 	mov.w	r2, #4294967295
   d8ba6:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d8ba8:	6960      	ldr	r0, [r4, #20]
   d8baa:	2211      	movs	r2, #17
   d8bac:	2100      	movs	r1, #0
   d8bae:	308c      	adds	r0, #140	; 0x8c
   d8bb0:	f001 f92e 	bl	d9e10 <memset>
    flush_buffer();
   d8bb4:	4620      	mov	r0, r4
}
   d8bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d8bba:	f7ff bf0c 	b.w	d89d6 <_ZN9TCPClient12flush_bufferEv>

000d8bbe <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d8bbe:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d8bc0:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d8bc2:	4604      	mov	r4, r0
          total(0) {
   d8bc4:	6001      	str	r1, [r0, #0]
   d8bc6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d8bca:	3088      	adds	r0, #136	; 0x88
   d8bcc:	f7ff fc02 	bl	d83d4 <_ZN9IPAddressC1Ev>
}
   d8bd0:	4620      	mov	r0, r4
   d8bd2:	bd10      	pop	{r4, pc}

000d8bd4 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d8bd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8bd6:	2300      	movs	r3, #0
   d8bd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8bdc:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d8be0:	4a0e      	ldr	r2, [pc, #56]	; (d8c1c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d8be2:	6103      	str	r3, [r0, #16]
   d8be4:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d8be6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d8be8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8bea:	20ac      	movs	r0, #172	; 0xac
   d8bec:	9101      	str	r1, [sp, #4]
   d8bee:	f7fb fa52 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d8bf2:	1e05      	subs	r5, r0, #0
   d8bf4:	f105 060c 	add.w	r6, r5, #12
   d8bf8:	d008      	beq.n	d8c0c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d8bfa:	2301      	movs	r3, #1
   d8bfc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d8c00:	4b07      	ldr	r3, [pc, #28]	; (d8c20 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8c02:	9901      	ldr	r1, [sp, #4]
   d8c04:	602b      	str	r3, [r5, #0]
   d8c06:	4630      	mov	r0, r6
   d8c08:	f7ff ffd9 	bl	d8bbe <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d8c0c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d8c0e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d8c12:	f7ff fee0 	bl	d89d6 <_ZN9TCPClient12flush_bufferEv>
}
   d8c16:	b002      	add	sp, #8
   d8c18:	bd70      	pop	{r4, r5, r6, pc}
   d8c1a:	bf00      	nop
   d8c1c:	000da8f0 	.word	0x000da8f0
   d8c20:	000da8d4 	.word	0x000da8d4

000d8c24 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d8c24:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d8c26:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d8c2a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8c2c:	f7ff ffd2 	bl	d8bd4 <_ZN9TCPClientC1Ei>
}
   d8c30:	4620      	mov	r0, r4
   d8c32:	bd10      	pop	{r4, pc}

000d8c34 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d8c34:	b510      	push	{r4, lr}
   d8c36:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8c38:	6800      	ldr	r0, [r0, #0]
   d8c3a:	2800      	cmp	r0, #0
   d8c3c:	db01      	blt.n	d8c42 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d8c3e:	f7fd f971 	bl	d5f24 <sock_close>
    }
}
   d8c42:	4620      	mov	r0, r4
   d8c44:	bd10      	pop	{r4, pc}

000d8c46 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d8c46:	300c      	adds	r0, #12
   d8c48:	f7ff bff4 	b.w	d8c34 <_ZN9TCPClient4DataD1Ev>

000d8c4c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8c50:	4698      	mov	r8, r3
    stop();
   d8c52:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8c54:	b093      	sub	sp, #76	; 0x4c
   d8c56:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d8c58:	2400      	movs	r4, #0
    stop();
   d8c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8c5c:	4606      	mov	r6, r0
   d8c5e:	4617      	mov	r7, r2
    stop();
   d8c60:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8c62:	4628      	mov	r0, r5
   d8c64:	466b      	mov	r3, sp
   d8c66:	4622      	mov	r2, r4
   d8c68:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d8c6a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8c6c:	f7fc ff7e 	bl	d5b6c <netdb_getaddrinfo>
   d8c70:	4605      	mov	r5, r0
   d8c72:	2800      	cmp	r0, #0
   d8c74:	d163      	bne.n	d8d3e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d8c76:	9b00      	ldr	r3, [sp, #0]
   d8c78:	2b00      	cmp	r3, #0
   d8c7a:	d04b      	beq.n	d8d14 <_ZN9TCPClient7connectEPKctm+0xc8>
   d8c7c:	695b      	ldr	r3, [r3, #20]
   d8c7e:	2b00      	cmp	r3, #0
   d8c80:	d048      	beq.n	d8d14 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d8c82:	a806      	add	r0, sp, #24
   d8c84:	f7ff fba6 	bl	d83d4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d8c88:	9b00      	ldr	r3, [sp, #0]
   d8c8a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d8c8c:	7863      	ldrb	r3, [r4, #1]
   d8c8e:	2b02      	cmp	r3, #2
   d8c90:	d104      	bne.n	d8c9c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8c92:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8c94:	a806      	add	r0, sp, #24
   d8c96:	f7fd fd45 	bl	d6724 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d8c9a:	e026      	b.n	d8cea <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d8c9c:	2b0a      	cmp	r3, #10
   d8c9e:	d124      	bne.n	d8cea <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d8ca0:	2211      	movs	r2, #17
   d8ca2:	4629      	mov	r1, r5
   d8ca4:	a801      	add	r0, sp, #4
   d8ca6:	f001 f8b3 	bl	d9e10 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8caa:	68a3      	ldr	r3, [r4, #8]
   d8cac:	2b00      	cmp	r3, #0
   d8cae:	d038      	beq.n	d8d22 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8cb0:	f104 0308 	add.w	r3, r4, #8
   d8cb4:	f10d 0c04 	add.w	ip, sp, #4
   d8cb8:	3418      	adds	r4, #24
   d8cba:	6818      	ldr	r0, [r3, #0]
   d8cbc:	6859      	ldr	r1, [r3, #4]
   d8cbe:	4662      	mov	r2, ip
   d8cc0:	c203      	stmia	r2!, {r0, r1}
   d8cc2:	3308      	adds	r3, #8
   d8cc4:	42a3      	cmp	r3, r4
   d8cc6:	4694      	mov	ip, r2
   d8cc8:	d1f7      	bne.n	d8cba <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d8cca:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d8ccc:	a901      	add	r1, sp, #4
   d8cce:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d8cd0:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d8cd4:	f7ff fb8c 	bl	d83f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d8cd8:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d8cdc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d8ce0:	ac07      	add	r4, sp, #28
   d8ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8ce4:	f8dc 3000 	ldr.w	r3, [ip]
   d8ce8:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d8cea:	a806      	add	r0, sp, #24
   d8cec:	f7ff fb92 	bl	d8414 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d8cf0:	b180      	cbz	r0, d8d14 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d8cf2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d8cf4:	ad07      	add	r5, sp, #28
   d8cf6:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d8cfa:	4b12      	ldr	r3, [pc, #72]	; (d8d44 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d8cfc:	930c      	str	r3, [sp, #48]	; 0x30
   d8cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8d00:	ac0d      	add	r4, sp, #52	; 0x34
   d8d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8d04:	682b      	ldr	r3, [r5, #0]
   d8d06:	7023      	strb	r3, [r4, #0]
   d8d08:	463a      	mov	r2, r7
   d8d0a:	4643      	mov	r3, r8
   d8d0c:	a90c      	add	r1, sp, #48	; 0x30
   d8d0e:	4630      	mov	r0, r6
   d8d10:	47c8      	blx	r9
   d8d12:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d8d14:	9800      	ldr	r0, [sp, #0]
   d8d16:	f7fc ff21 	bl	d5b5c <netdb_freeaddrinfo>
}
   d8d1a:	4628      	mov	r0, r5
   d8d1c:	b013      	add	sp, #76	; 0x4c
   d8d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8d22:	68e3      	ldr	r3, [r4, #12]
   d8d24:	2b00      	cmp	r3, #0
   d8d26:	d1c3      	bne.n	d8cb0 <_ZN9TCPClient7connectEPKctm+0x64>
   d8d28:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d8d2c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d8d30:	f7fd f840 	bl	d5db4 <inet_htonl>
   d8d34:	4581      	cmp	r9, r0
   d8d36:	d1bb      	bne.n	d8cb0 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d8d38:	f104 0114 	add.w	r1, r4, #20
   d8d3c:	e7aa      	b.n	d8c94 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8d3e:	4625      	mov	r5, r4
   d8d40:	e7e8      	b.n	d8d14 <_ZN9TCPClient7connectEPKctm+0xc8>
   d8d42:	bf00      	nop
   d8d44:	000da828 	.word	0x000da828

000d8d48 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv>:
                results[index++] = *result;
            }
        }

    protected:
        static void callback(WiFiAccessPoint* result, void* cookie)
   d8d48:	b530      	push	{r4, r5, lr}
            if (index<count) {
   d8d4a:	e9d1 4301 	ldrd	r4, r3, [r1, #4]
   d8d4e:	429c      	cmp	r4, r3
   d8d50:	da10      	bge.n	d8d74 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv+0x2c>
                results[index++] = *result;
   d8d52:	680b      	ldr	r3, [r1, #0]
   d8d54:	1c62      	adds	r2, r4, #1
   d8d56:	604a      	str	r2, [r1, #4]
   d8d58:	4605      	mov	r5, r0
   d8d5a:	2238      	movs	r2, #56	; 0x38
   d8d5c:	fb02 3404 	mla	r4, r2, r4, r3
   d8d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8d6c:	e895 0003 	ldmia.w	r5, {r0, r1}
   d8d70:	e884 0003 	stmia.w	r4, {r0, r1}
        {
            ((APArrayPopulator*)cookie)->addResult(result);
        }
   d8d74:	bd30      	pop	{r4, r5, pc}

000d8d76 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8d76:	2200      	movs	r2, #0
   d8d78:	6840      	ldr	r0, [r0, #4]
   d8d7a:	4611      	mov	r1, r2
   d8d7c:	f7fd b9f0 	b.w	d6160 <network_ready>

000d8d80 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8d80:	2200      	movs	r2, #0
   d8d82:	6840      	ldr	r0, [r0, #4]
   d8d84:	4611      	mov	r1, r2
   d8d86:	f7fd ba0b 	b.w	d61a0 <network_listening>

000d8d8a <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8d8a:	2200      	movs	r2, #0
   d8d8c:	6840      	ldr	r0, [r0, #4]
   d8d8e:	4611      	mov	r1, r2
   d8d90:	f7fd ba2e 	b.w	d61f0 <network_get_listen_timeout>

000d8d94 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8d94:	6840      	ldr	r0, [r0, #4]
   d8d96:	2200      	movs	r2, #0
   d8d98:	f7fd ba22 	b.w	d61e0 <network_set_listen_timeout>

000d8d9c <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8d9c:	6840      	ldr	r0, [r0, #4]
   d8d9e:	2200      	movs	r2, #0
   d8da0:	f081 0101 	eor.w	r1, r1, #1
   d8da4:	f7fd b9f4 	b.w	d6190 <network_listen>

000d8da8 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8da8:	2200      	movs	r2, #0
   d8daa:	6840      	ldr	r0, [r0, #4]
   d8dac:	4611      	mov	r1, r2
   d8dae:	f7fd b9c7 	b.w	d6140 <network_connecting>

000d8db2 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8db2:	6840      	ldr	r0, [r0, #4]
   d8db4:	2200      	movs	r2, #0
   d8db6:	2102      	movs	r1, #2
   d8db8:	f7fd b9ca 	b.w	d6150 <network_disconnect>

000d8dbc <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8dbc:	2300      	movs	r3, #0
   d8dbe:	6840      	ldr	r0, [r0, #4]
   d8dc0:	461a      	mov	r2, r3
   d8dc2:	f7fd b9b5 	b.w	d6130 <network_connect>
	...

000d8dc8 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>:
        APScan apScan(results, result_count);
        return apScan.start();
    }

#if !HAL_PLATFORM_WIFI_SCAN_ONLY
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
   d8dc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
            this->index = 0;
   d8dca:	2300      	movs	r3, #0
            this->results = results;
   d8dcc:	9101      	str	r1, [sp, #4]
            return std::min(count, wlan_get_credentials(callback, this));
   d8dce:	4806      	ldr	r0, [pc, #24]	; (d8de8 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj+0x20>)
            this->index = 0;
   d8dd0:	9302      	str	r3, [sp, #8]
            return std::min(count, wlan_get_credentials(callback, this));
   d8dd2:	a901      	add	r1, sp, #4
            this->count = size;
   d8dd4:	9203      	str	r2, [sp, #12]
            return std::min(count, wlan_get_credentials(callback, this));
   d8dd6:	f7fd f955 	bl	d6084 <wlan_get_credentials>
        APList apList(results, result_count);
        return apList.start();
    }
   d8dda:	9b03      	ldr	r3, [sp, #12]
   d8ddc:	4298      	cmp	r0, r3
   d8dde:	bfa8      	it	ge
   d8de0:	4618      	movge	r0, r3
   d8de2:	b005      	add	sp, #20
   d8de4:	f85d fb04 	ldr.w	pc, [sp], #4
   d8de8:	000d8d49 	.word	0x000d8d49

000d8dec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8dec:	4b02      	ldr	r3, [pc, #8]	; (d8df8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8dee:	2204      	movs	r2, #4
   d8df0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8df2:	4a02      	ldr	r2, [pc, #8]	; (d8dfc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8df4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d8df6:	4770      	bx	lr
   d8df8:	2003e7bc 	.word	0x2003e7bc
   d8dfc:	000da93c 	.word	0x000da93c

000d8e00 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8e00:	2300      	movs	r3, #0
   d8e02:	6840      	ldr	r0, [r0, #4]
   d8e04:	461a      	mov	r2, r3
   d8e06:	f7fd b993 	b.w	d6130 <network_connect>

000d8e0a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8e0a:	6840      	ldr	r0, [r0, #4]
   d8e0c:	2200      	movs	r2, #0
   d8e0e:	2102      	movs	r1, #2
   d8e10:	f7fd b99e 	b.w	d6150 <network_disconnect>

000d8e14 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8e14:	2200      	movs	r2, #0
   d8e16:	6840      	ldr	r0, [r0, #4]
   d8e18:	4611      	mov	r1, r2
   d8e1a:	f7fd b991 	b.w	d6140 <network_connecting>

000d8e1e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8e1e:	2200      	movs	r2, #0
   d8e20:	6840      	ldr	r0, [r0, #4]
   d8e22:	4611      	mov	r1, r2
   d8e24:	f7fd b99c 	b.w	d6160 <network_ready>

000d8e28 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8e28:	2300      	movs	r3, #0
   d8e2a:	6840      	ldr	r0, [r0, #4]
   d8e2c:	461a      	mov	r2, r3
   d8e2e:	4619      	mov	r1, r3
   d8e30:	f7fd b99e 	b.w	d6170 <network_on>

000d8e34 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8e34:	2300      	movs	r3, #0
   d8e36:	6840      	ldr	r0, [r0, #4]
   d8e38:	461a      	mov	r2, r3
   d8e3a:	4619      	mov	r1, r3
   d8e3c:	f7fd b9a0 	b.w	d6180 <network_off>

000d8e40 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d8e40:	6840      	ldr	r0, [r0, #4]
   d8e42:	2100      	movs	r1, #0
   d8e44:	f7fd b9dc 	b.w	d6200 <network_is_on>

000d8e48 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d8e48:	6840      	ldr	r0, [r0, #4]
   d8e4a:	2100      	movs	r1, #0
   d8e4c:	f7fd b9e0 	b.w	d6210 <network_is_off>

000d8e50 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8e50:	6840      	ldr	r0, [r0, #4]
   d8e52:	2200      	movs	r2, #0
   d8e54:	f081 0101 	eor.w	r1, r1, #1
   d8e58:	f7fd b99a 	b.w	d6190 <network_listen>

000d8e5c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8e5c:	6840      	ldr	r0, [r0, #4]
   d8e5e:	2200      	movs	r2, #0
   d8e60:	f7fd b9be 	b.w	d61e0 <network_set_listen_timeout>

000d8e64 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8e64:	2200      	movs	r2, #0
   d8e66:	6840      	ldr	r0, [r0, #4]
   d8e68:	4611      	mov	r1, r2
   d8e6a:	f7fd b9c1 	b.w	d61f0 <network_get_listen_timeout>

000d8e6e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8e6e:	2200      	movs	r2, #0
   d8e70:	6840      	ldr	r0, [r0, #4]
   d8e72:	4611      	mov	r1, r2
   d8e74:	f7fd b994 	b.w	d61a0 <network_listening>

000d8e78 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8e7c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d8e7e:	b095      	sub	sp, #84	; 0x54
   d8e80:	4616      	mov	r6, r2
   d8e82:	460d      	mov	r5, r1
   d8e84:	4607      	mov	r7, r0
    IPAddress addr;
   d8e86:	f7ff faa5 	bl	d83d4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d8e8a:	4621      	mov	r1, r4
   d8e8c:	2218      	movs	r2, #24
   d8e8e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d8e90:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8e92:	f000 ffbd 	bl	d9e10 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8e96:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d8e98:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8e9c:	4621      	mov	r1, r4
   d8e9e:	466b      	mov	r3, sp
   d8ea0:	aa0c      	add	r2, sp, #48	; 0x30
   d8ea2:	4630      	mov	r0, r6
   d8ea4:	f7fc fe62 	bl	d5b6c <netdb_getaddrinfo>
    if (!r) {
   d8ea8:	4604      	mov	r4, r0
   d8eaa:	2800      	cmp	r0, #0
   d8eac:	d14c      	bne.n	d8f48 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8eae:	4602      	mov	r2, r0
   d8eb0:	2101      	movs	r1, #1
   d8eb2:	6868      	ldr	r0, [r5, #4]
   d8eb4:	f7fd f954 	bl	d6160 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8eb8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8eba:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8ebc:	4622      	mov	r2, r4
   d8ebe:	6868      	ldr	r0, [r5, #4]
   d8ec0:	f7fd f94e 	bl	d6160 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8ec4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8ec6:	4681      	mov	r9, r0
        bool ok = false;
   d8ec8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8eca:	2e00      	cmp	r6, #0
   d8ecc:	d03c      	beq.n	d8f48 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d8ece:	2900      	cmp	r1, #0
   d8ed0:	d13a      	bne.n	d8f48 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8ed2:	6873      	ldr	r3, [r6, #4]
   d8ed4:	2b02      	cmp	r3, #2
   d8ed6:	d003      	beq.n	d8ee0 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d8ed8:	2b0a      	cmp	r3, #10
   d8eda:	d011      	beq.n	d8f00 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8edc:	69f6      	ldr	r6, [r6, #28]
   d8ede:	e7f4      	b.n	d8eca <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8ee0:	f1b8 0f00 	cmp.w	r8, #0
   d8ee4:	d00a      	beq.n	d8efc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8ee6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d8ee8:	a806      	add	r0, sp, #24
   d8eea:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d8eec:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d8eee:	f7ff fab5 	bl	d845c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d8ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8ef4:	1d3c      	adds	r4, r7, #4
   d8ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8ef8:	682b      	ldr	r3, [r5, #0]
   d8efa:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d8efc:	4641      	mov	r1, r8
   d8efe:	e7ed      	b.n	d8edc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8f00:	f1b9 0f00 	cmp.w	r9, #0
   d8f04:	d101      	bne.n	d8f0a <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d8f06:	4649      	mov	r1, r9
   d8f08:	e7e8      	b.n	d8edc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8f0a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8f0c:	2210      	movs	r2, #16
   d8f0e:	a801      	add	r0, sp, #4
   d8f10:	f000 ff7e 	bl	d9e10 <memset>
                    a.v = 6;
   d8f14:	2306      	movs	r3, #6
   d8f16:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8f1a:	ad01      	add	r5, sp, #4
   d8f1c:	f104 0308 	add.w	r3, r4, #8
   d8f20:	3418      	adds	r4, #24
   d8f22:	6818      	ldr	r0, [r3, #0]
   d8f24:	6859      	ldr	r1, [r3, #4]
   d8f26:	462a      	mov	r2, r5
   d8f28:	c203      	stmia	r2!, {r0, r1}
   d8f2a:	3308      	adds	r3, #8
   d8f2c:	42a3      	cmp	r3, r4
   d8f2e:	4615      	mov	r5, r2
   d8f30:	d1f7      	bne.n	d8f22 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d8f32:	a901      	add	r1, sp, #4
   d8f34:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d8f36:	ad07      	add	r5, sp, #28
   d8f38:	f7ff fa5a 	bl	d83f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8f3e:	1d3c      	adds	r4, r7, #4
   d8f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8f42:	682b      	ldr	r3, [r5, #0]
   d8f44:	7023      	strb	r3, [r4, #0]
   d8f46:	e7de      	b.n	d8f06 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8f48:	9800      	ldr	r0, [sp, #0]
   d8f4a:	f7fc fe07 	bl	d5b5c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8f4e:	4638      	mov	r0, r7
   d8f50:	b015      	add	sp, #84	; 0x54
   d8f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d8f58 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8f58:	4b02      	ldr	r3, [pc, #8]	; (d8f64 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8f5a:	4a03      	ldr	r2, [pc, #12]	; (d8f68 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8f5c:	601a      	str	r2, [r3, #0]
   d8f5e:	2200      	movs	r2, #0
   d8f60:	605a      	str	r2, [r3, #4]

} // spark
   d8f62:	4770      	bx	lr
   d8f64:	2003e7c4 	.word	0x2003e7c4
   d8f68:	000da978 	.word	0x000da978

000d8f6c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d8f6c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d8f6e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d8f70:	d902      	bls.n	d8f78 <pinAvailable+0xc>
    return false;
   d8f72:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d8f74:	b002      	add	sp, #8
   d8f76:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d8f78:	f1a0 030b 	sub.w	r3, r0, #11
   d8f7c:	2b02      	cmp	r3, #2
   d8f7e:	d81a      	bhi.n	d8fb6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8f80:	4c17      	ldr	r4, [pc, #92]	; (d8fe0 <pinAvailable+0x74>)
   d8f82:	7821      	ldrb	r1, [r4, #0]
   d8f84:	f3bf 8f5b 	dmb	ish
   d8f88:	f011 0101 	ands.w	r1, r1, #1
   d8f8c:	d10b      	bne.n	d8fa6 <pinAvailable+0x3a>
   d8f8e:	4620      	mov	r0, r4
   d8f90:	9101      	str	r1, [sp, #4]
   d8f92:	f7fb f886 	bl	d40a2 <__cxa_guard_acquire>
   d8f96:	9901      	ldr	r1, [sp, #4]
   d8f98:	b128      	cbz	r0, d8fa6 <pinAvailable+0x3a>
   d8f9a:	4812      	ldr	r0, [pc, #72]	; (d8fe4 <pinAvailable+0x78>)
   d8f9c:	f7fd f9e4 	bl	d6368 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8fa0:	4620      	mov	r0, r4
   d8fa2:	f7fb f883 	bl	d40ac <__cxa_guard_release>
   d8fa6:	4b0f      	ldr	r3, [pc, #60]	; (d8fe4 <pinAvailable+0x78>)
   d8fa8:	7818      	ldrb	r0, [r3, #0]
   d8faa:	f7fd f813 	bl	d5fd4 <hal_spi_is_enabled>
   d8fae:	2800      	cmp	r0, #0
   d8fb0:	d1df      	bne.n	d8f72 <pinAvailable+0x6>
  return true; // 'pin' is available
   d8fb2:	2001      	movs	r0, #1
   d8fb4:	e7de      	b.n	d8f74 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d8fb6:	2801      	cmp	r0, #1
   d8fb8:	d809      	bhi.n	d8fce <pinAvailable+0x62>
   d8fba:	f000 f881 	bl	d90c0 <_Z19__fetch_global_Wirev>
   d8fbe:	2100      	movs	r1, #0
   d8fc0:	7c00      	ldrb	r0, [r0, #16]
   d8fc2:	f7fc ff8f 	bl	d5ee4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d8fc6:	f080 0001 	eor.w	r0, r0, #1
   d8fca:	b2c0      	uxtb	r0, r0
   d8fcc:	e7d2      	b.n	d8f74 <pinAvailable+0x8>
   d8fce:	3809      	subs	r0, #9
   d8fd0:	2801      	cmp	r0, #1
   d8fd2:	d8ee      	bhi.n	d8fb2 <pinAvailable+0x46>
   d8fd4:	f7ff fb2c 	bl	d8630 <_Z22__fetch_global_Serial1v>
   d8fd8:	7c00      	ldrb	r0, [r0, #16]
   d8fda:	f7fc ff2b 	bl	d5e34 <hal_usart_is_enabled>
   d8fde:	e7f2      	b.n	d8fc6 <pinAvailable+0x5a>
   d8fe0:	2003e630 	.word	0x2003e630
   d8fe4:	2003e634 	.word	0x2003e634

000d8fe8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8fe8:	2823      	cmp	r0, #35	; 0x23
{
   d8fea:	b538      	push	{r3, r4, r5, lr}
   d8fec:	4604      	mov	r4, r0
   d8fee:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8ff0:	d80a      	bhi.n	d9008 <pinMode+0x20>
   d8ff2:	29ff      	cmp	r1, #255	; 0xff
   d8ff4:	d008      	beq.n	d9008 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d8ff6:	f7ff ffb9 	bl	d8f6c <pinAvailable>
   d8ffa:	b128      	cbz	r0, d9008 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d8ffc:	4629      	mov	r1, r5
   d8ffe:	4620      	mov	r0, r4
}
   d9000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d9004:	f7fc bdba 	b.w	d5b7c <HAL_Pin_Mode>
}
   d9008:	bd38      	pop	{r3, r4, r5, pc}

000d900a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d900a:	b538      	push	{r3, r4, r5, lr}
   d900c:	4604      	mov	r4, r0
   d900e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9010:	f7fc fdbc 	bl	d5b8c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9014:	28ff      	cmp	r0, #255	; 0xff
   d9016:	d010      	beq.n	d903a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d9018:	2806      	cmp	r0, #6
   d901a:	d804      	bhi.n	d9026 <digitalWrite+0x1c>
   d901c:	234d      	movs	r3, #77	; 0x4d
   d901e:	fa23 f000 	lsr.w	r0, r3, r0
   d9022:	07c3      	lsls	r3, r0, #31
   d9024:	d409      	bmi.n	d903a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d9026:	4620      	mov	r0, r4
   d9028:	f7ff ffa0 	bl	d8f6c <pinAvailable>
   d902c:	b128      	cbz	r0, d903a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d902e:	4629      	mov	r1, r5
   d9030:	4620      	mov	r0, r4
}
   d9032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d9036:	f7fc bdb1 	b.w	d5b9c <HAL_GPIO_Write>
}
   d903a:	bd38      	pop	{r3, r4, r5, pc}

000d903c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d903c:	b510      	push	{r4, lr}
   d903e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9040:	f7fc fda4 	bl	d5b8c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d9044:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d9046:	b2db      	uxtb	r3, r3
   d9048:	2b01      	cmp	r3, #1
   d904a:	d908      	bls.n	d905e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d904c:	4620      	mov	r0, r4
   d904e:	f7ff ff8d 	bl	d8f6c <pinAvailable>
   d9052:	b120      	cbz	r0, d905e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d9054:	4620      	mov	r0, r4
}
   d9056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d905a:	f7fc bda7 	b.w	d5bac <HAL_GPIO_Read>
}
   d905e:	2000      	movs	r0, #0
   d9060:	bd10      	pop	{r4, pc}
	...

000d9064 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d9064:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d9066:	4c08      	ldr	r4, [pc, #32]	; (d9088 <_Z21__fetch_global_EEPROMv+0x24>)
   d9068:	7823      	ldrb	r3, [r4, #0]
   d906a:	f3bf 8f5b 	dmb	ish
   d906e:	07db      	lsls	r3, r3, #31
   d9070:	d408      	bmi.n	d9084 <_Z21__fetch_global_EEPROMv+0x20>
   d9072:	4620      	mov	r0, r4
   d9074:	f7fb f815 	bl	d40a2 <__cxa_guard_acquire>
   d9078:	b120      	cbz	r0, d9084 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d907a:	f7fc fdbf 	bl	d5bfc <HAL_EEPROM_Init>
   d907e:	4620      	mov	r0, r4
   d9080:	f7fb f814 	bl	d40ac <__cxa_guard_release>
	return eeprom;
}
   d9084:	4801      	ldr	r0, [pc, #4]	; (d908c <_Z21__fetch_global_EEPROMv+0x28>)
   d9086:	bd10      	pop	{r4, pc}
   d9088:	2003e7d0 	.word	0x2003e7d0
   d908c:	2003e7d4 	.word	0x2003e7d4

000d9090 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d9090:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d9092:	2300      	movs	r3, #0
   d9094:	2520      	movs	r5, #32
   d9096:	8043      	strh	r3, [r0, #2]
   d9098:	2314      	movs	r3, #20
{
   d909a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d909c:	8003      	strh	r3, [r0, #0]
   d909e:	6085      	str	r5, [r0, #8]
   d90a0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d90a2:	4906      	ldr	r1, [pc, #24]	; (d90bc <_Z17acquireWireBufferv+0x2c>)
   d90a4:	4628      	mov	r0, r5
   d90a6:	f000 f83c 	bl	d9122 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d90aa:	4904      	ldr	r1, [pc, #16]	; (d90bc <_Z17acquireWireBufferv+0x2c>)
	};
   d90ac:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d90ae:	4628      	mov	r0, r5
   d90b0:	f000 f837 	bl	d9122 <_ZnajRKSt9nothrow_t>
	};
   d90b4:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d90b6:	4620      	mov	r0, r4
   d90b8:	bd38      	pop	{r3, r4, r5, pc}
   d90ba:	bf00      	nop
   d90bc:	000da9ac 	.word	0x000da9ac

000d90c0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d90c0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d90c2:	4d0f      	ldr	r5, [pc, #60]	; (d9100 <_Z19__fetch_global_Wirev+0x40>)
   d90c4:	7829      	ldrb	r1, [r5, #0]
   d90c6:	f3bf 8f5b 	dmb	ish
   d90ca:	f011 0401 	ands.w	r4, r1, #1
{
   d90ce:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d90d0:	d113      	bne.n	d90fa <_Z19__fetch_global_Wirev+0x3a>
   d90d2:	4628      	mov	r0, r5
   d90d4:	f7fa ffe5 	bl	d40a2 <__cxa_guard_acquire>
   d90d8:	b178      	cbz	r0, d90fa <_Z19__fetch_global_Wirev+0x3a>
   d90da:	a801      	add	r0, sp, #4
   d90dc:	f7ff ffd8 	bl	d9090 <_Z17acquireWireBufferv>
   d90e0:	aa01      	add	r2, sp, #4
   d90e2:	4621      	mov	r1, r4
   d90e4:	4807      	ldr	r0, [pc, #28]	; (d9104 <_Z19__fetch_global_Wirev+0x44>)
   d90e6:	f7ff faf9 	bl	d86dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d90ea:	4628      	mov	r0, r5
   d90ec:	f7fa ffde 	bl	d40ac <__cxa_guard_release>
   d90f0:	4a05      	ldr	r2, [pc, #20]	; (d9108 <_Z19__fetch_global_Wirev+0x48>)
   d90f2:	4906      	ldr	r1, [pc, #24]	; (d910c <_Z19__fetch_global_Wirev+0x4c>)
   d90f4:	4803      	ldr	r0, [pc, #12]	; (d9104 <_Z19__fetch_global_Wirev+0x44>)
   d90f6:	f000 f80b 	bl	d9110 <__aeabi_atexit>
	return wire;
}
   d90fa:	4802      	ldr	r0, [pc, #8]	; (d9104 <_Z19__fetch_global_Wirev+0x44>)
   d90fc:	b007      	add	sp, #28
   d90fe:	bd30      	pop	{r4, r5, pc}
   d9100:	2003e7d8 	.word	0x2003e7d8
   d9104:	2003e7dc 	.word	0x2003e7dc
   d9108:	2003df60 	.word	0x2003df60
   d910c:	000d8685 	.word	0x000d8685

000d9110 <__aeabi_atexit>:
   d9110:	460b      	mov	r3, r1
   d9112:	4601      	mov	r1, r0
   d9114:	4618      	mov	r0, r3
   d9116:	f000 be23 	b.w	d9d60 <__cxa_atexit>

000d911a <_ZdlPvj>:
   d911a:	f7fa bfc0 	b.w	d409e <_ZdlPv>

000d911e <_ZnwjRKSt9nothrow_t>:
   d911e:	f7fa bfba 	b.w	d4096 <_Znwj>

000d9122 <_ZnajRKSt9nothrow_t>:
   d9122:	f7fa bfba 	b.w	d409a <_Znaj>

000d9126 <_ZSt25__throw_bad_function_callv>:
   d9126:	b508      	push	{r3, lr}
   d9128:	f7fd f8c2 	bl	d62b0 <abort>

000d912c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d912c:	4901      	ldr	r1, [pc, #4]	; (d9134 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d912e:	f000 b8f9 	b.w	d9324 <_ZNKSt9type_infoeqERKS_>
   d9132:	bf00      	nop
   d9134:	000da9c8 	.word	0x000da9c8

000d9138 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d9138:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d913a:	2400      	movs	r4, #0
   d913c:	2310      	movs	r3, #16
   d913e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d9142:	6803      	ldr	r3, [r0, #0]
   d9144:	9400      	str	r4, [sp, #0]
   d9146:	699e      	ldr	r6, [r3, #24]
   d9148:	f88d 4004 	strb.w	r4, [sp, #4]
   d914c:	4615      	mov	r5, r2
   d914e:	466b      	mov	r3, sp
   d9150:	6812      	ldr	r2, [r2, #0]
   d9152:	47b0      	blx	r6
   d9154:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d9158:	f003 0306 	and.w	r3, r3, #6
   d915c:	2b06      	cmp	r3, #6
   d915e:	bf03      	ittte	eq
   d9160:	9b00      	ldreq	r3, [sp, #0]
   d9162:	602b      	streq	r3, [r5, #0]
   d9164:	2001      	moveq	r0, #1
   d9166:	4620      	movne	r0, r4
   d9168:	b004      	add	sp, #16
   d916a:	bd70      	pop	{r4, r5, r6, pc}

000d916c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d916c:	9800      	ldr	r0, [sp, #0]
   d916e:	4290      	cmp	r0, r2
   d9170:	bf14      	ite	ne
   d9172:	2001      	movne	r0, #1
   d9174:	2006      	moveq	r0, #6
   d9176:	4770      	bx	lr

000d9178 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d9178:	b510      	push	{r4, lr}
   d917a:	4b03      	ldr	r3, [pc, #12]	; (d9188 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d917c:	6003      	str	r3, [r0, #0]
   d917e:	4604      	mov	r4, r0
   d9180:	f000 f8cd 	bl	d931e <_ZNSt9type_infoD1Ev>
   d9184:	4620      	mov	r0, r4
   d9186:	bd10      	pop	{r4, pc}
   d9188:	000daa08 	.word	0x000daa08

000d918c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d918c:	b510      	push	{r4, lr}
   d918e:	4604      	mov	r4, r0
   d9190:	f7ff fff2 	bl	d9178 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d9194:	4620      	mov	r0, r4
   d9196:	2108      	movs	r1, #8
   d9198:	f7ff ffbf 	bl	d911a <_ZdlPvj>
   d919c:	4620      	mov	r0, r4
   d919e:	bd10      	pop	{r4, pc}

000d91a0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d91a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d91a4:	461f      	mov	r7, r3
   d91a6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d91aa:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d91ae:	4598      	cmp	r8, r3
   d91b0:	4606      	mov	r6, r0
   d91b2:	4615      	mov	r5, r2
   d91b4:	d107      	bne.n	d91c6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d91b6:	9907      	ldr	r1, [sp, #28]
   d91b8:	f000 f8b4 	bl	d9324 <_ZNKSt9type_infoeqERKS_>
   d91bc:	b118      	cbz	r0, d91c6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d91be:	7165      	strb	r5, [r4, #5]
   d91c0:	2000      	movs	r0, #0
   d91c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d91c6:	4639      	mov	r1, r7
   d91c8:	4630      	mov	r0, r6
   d91ca:	f000 f8ab 	bl	d9324 <_ZNKSt9type_infoeqERKS_>
   d91ce:	2800      	cmp	r0, #0
   d91d0:	d0f6      	beq.n	d91c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d91d2:	2301      	movs	r3, #1
   d91d4:	f8c4 8000 	str.w	r8, [r4]
   d91d8:	7125      	strb	r5, [r4, #4]
   d91da:	71a3      	strb	r3, [r4, #6]
   d91dc:	e7f0      	b.n	d91c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d91de <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d91de:	b538      	push	{r3, r4, r5, lr}
   d91e0:	4615      	mov	r5, r2
   d91e2:	461c      	mov	r4, r3
   d91e4:	f000 f89e 	bl	d9324 <_ZNKSt9type_infoeqERKS_>
   d91e8:	b120      	cbz	r0, d91f4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d91ea:	2308      	movs	r3, #8
   d91ec:	60e3      	str	r3, [r4, #12]
   d91ee:	2306      	movs	r3, #6
   d91f0:	6025      	str	r5, [r4, #0]
   d91f2:	7123      	strb	r3, [r4, #4]
   d91f4:	bd38      	pop	{r3, r4, r5, pc}

000d91f6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d91f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d91f8:	4605      	mov	r5, r0
   d91fa:	460c      	mov	r4, r1
   d91fc:	9201      	str	r2, [sp, #4]
   d91fe:	461e      	mov	r6, r3
   d9200:	f000 f890 	bl	d9324 <_ZNKSt9type_infoeqERKS_>
   d9204:	b950      	cbnz	r0, d921c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d9206:	2e03      	cmp	r6, #3
   d9208:	d808      	bhi.n	d921c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d920a:	6823      	ldr	r3, [r4, #0]
   d920c:	9a01      	ldr	r2, [sp, #4]
   d920e:	695b      	ldr	r3, [r3, #20]
   d9210:	4629      	mov	r1, r5
   d9212:	4620      	mov	r0, r4
   d9214:	b002      	add	sp, #8
   d9216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d921a:	4718      	bx	r3
   d921c:	b002      	add	sp, #8
   d921e:	bd70      	pop	{r4, r5, r6, pc}

000d9220 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d9220:	b510      	push	{r4, lr}
   d9222:	4b03      	ldr	r3, [pc, #12]	; (d9230 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d9224:	6003      	str	r3, [r0, #0]
   d9226:	4604      	mov	r4, r0
   d9228:	f7ff ffa6 	bl	d9178 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d922c:	4620      	mov	r0, r4
   d922e:	bd10      	pop	{r4, pc}
   d9230:	000daa68 	.word	0x000daa68

000d9234 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d9234:	b510      	push	{r4, lr}
   d9236:	4604      	mov	r4, r0
   d9238:	f7ff fff2 	bl	d9220 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d923c:	4620      	mov	r0, r4
   d923e:	210c      	movs	r1, #12
   d9240:	f7ff ff6b 	bl	d911a <_ZdlPvj>
   d9244:	4620      	mov	r0, r4
   d9246:	bd10      	pop	{r4, pc}

000d9248 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d9248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d924a:	9f08      	ldr	r7, [sp, #32]
   d924c:	4297      	cmp	r7, r2
   d924e:	4605      	mov	r5, r0
   d9250:	460e      	mov	r6, r1
   d9252:	4614      	mov	r4, r2
   d9254:	d00a      	beq.n	d926c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d9256:	68a8      	ldr	r0, [r5, #8]
   d9258:	6802      	ldr	r2, [r0, #0]
   d925a:	9708      	str	r7, [sp, #32]
   d925c:	6a15      	ldr	r5, [r2, #32]
   d925e:	4631      	mov	r1, r6
   d9260:	4622      	mov	r2, r4
   d9262:	46ac      	mov	ip, r5
   d9264:	b003      	add	sp, #12
   d9266:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d926a:	4760      	bx	ip
   d926c:	4619      	mov	r1, r3
   d926e:	9301      	str	r3, [sp, #4]
   d9270:	f000 f858 	bl	d9324 <_ZNKSt9type_infoeqERKS_>
   d9274:	9b01      	ldr	r3, [sp, #4]
   d9276:	2800      	cmp	r0, #0
   d9278:	d0ed      	beq.n	d9256 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d927a:	2006      	movs	r0, #6
   d927c:	b003      	add	sp, #12
   d927e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9280 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d9280:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9284:	460d      	mov	r5, r1
   d9286:	4619      	mov	r1, r3
   d9288:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d928c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d9290:	4681      	mov	r9, r0
   d9292:	4617      	mov	r7, r2
   d9294:	4698      	mov	r8, r3
   d9296:	f000 f845 	bl	d9324 <_ZNKSt9type_infoeqERKS_>
   d929a:	b190      	cbz	r0, d92c2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d929c:	2d00      	cmp	r5, #0
   d929e:	6034      	str	r4, [r6, #0]
   d92a0:	7137      	strb	r7, [r6, #4]
   d92a2:	db09      	blt.n	d92b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d92a4:	1961      	adds	r1, r4, r5
   d92a6:	458a      	cmp	sl, r1
   d92a8:	bf0c      	ite	eq
   d92aa:	2106      	moveq	r1, #6
   d92ac:	2101      	movne	r1, #1
   d92ae:	71b1      	strb	r1, [r6, #6]
   d92b0:	2000      	movs	r0, #0
   d92b2:	b001      	add	sp, #4
   d92b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d92b8:	3502      	adds	r5, #2
   d92ba:	d1f9      	bne.n	d92b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d92bc:	2301      	movs	r3, #1
   d92be:	71b3      	strb	r3, [r6, #6]
   d92c0:	e7f6      	b.n	d92b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d92c2:	4554      	cmp	r4, sl
   d92c4:	d106      	bne.n	d92d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d92c6:	4659      	mov	r1, fp
   d92c8:	4648      	mov	r0, r9
   d92ca:	f000 f82b 	bl	d9324 <_ZNKSt9type_infoeqERKS_>
   d92ce:	b108      	cbz	r0, d92d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d92d0:	7177      	strb	r7, [r6, #5]
   d92d2:	e7ed      	b.n	d92b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d92d4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d92d8:	6803      	ldr	r3, [r0, #0]
   d92da:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d92de:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d92e2:	69dc      	ldr	r4, [r3, #28]
   d92e4:	463a      	mov	r2, r7
   d92e6:	4643      	mov	r3, r8
   d92e8:	4629      	mov	r1, r5
   d92ea:	46a4      	mov	ip, r4
   d92ec:	b001      	add	sp, #4
   d92ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d92f2:	4760      	bx	ip

000d92f4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d92f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d92f8:	4607      	mov	r7, r0
   d92fa:	460c      	mov	r4, r1
   d92fc:	4615      	mov	r5, r2
   d92fe:	461e      	mov	r6, r3
   d9300:	f7ff ff6d 	bl	d91de <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d9304:	b948      	cbnz	r0, d931a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d9306:	68b8      	ldr	r0, [r7, #8]
   d9308:	6803      	ldr	r3, [r0, #0]
   d930a:	699f      	ldr	r7, [r3, #24]
   d930c:	462a      	mov	r2, r5
   d930e:	4633      	mov	r3, r6
   d9310:	4621      	mov	r1, r4
   d9312:	46bc      	mov	ip, r7
   d9314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d9318:	4760      	bx	ip
   d931a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d931e <_ZNSt9type_infoD1Ev>:
   d931e:	4770      	bx	lr

000d9320 <_ZNKSt9type_info14__is_pointer_pEv>:
   d9320:	2000      	movs	r0, #0
   d9322:	4770      	bx	lr

000d9324 <_ZNKSt9type_infoeqERKS_>:
   d9324:	4281      	cmp	r1, r0
   d9326:	b508      	push	{r3, lr}
   d9328:	d00e      	beq.n	d9348 <_ZNKSt9type_infoeqERKS_+0x24>
   d932a:	6840      	ldr	r0, [r0, #4]
   d932c:	7803      	ldrb	r3, [r0, #0]
   d932e:	2b2a      	cmp	r3, #42	; 0x2a
   d9330:	d00c      	beq.n	d934c <_ZNKSt9type_infoeqERKS_+0x28>
   d9332:	6849      	ldr	r1, [r1, #4]
   d9334:	780b      	ldrb	r3, [r1, #0]
   d9336:	2b2a      	cmp	r3, #42	; 0x2a
   d9338:	bf08      	it	eq
   d933a:	3101      	addeq	r1, #1
   d933c:	f000 fd94 	bl	d9e68 <strcmp>
   d9340:	fab0 f080 	clz	r0, r0
   d9344:	0940      	lsrs	r0, r0, #5
   d9346:	bd08      	pop	{r3, pc}
   d9348:	2001      	movs	r0, #1
   d934a:	e7fc      	b.n	d9346 <_ZNKSt9type_infoeqERKS_+0x22>
   d934c:	2000      	movs	r0, #0
   d934e:	e7fa      	b.n	d9346 <_ZNKSt9type_infoeqERKS_+0x22>

000d9350 <__aeabi_drsub>:
   d9350:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9354:	e002      	b.n	d935c <__adddf3>
   d9356:	bf00      	nop

000d9358 <__aeabi_dsub>:
   d9358:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d935c <__adddf3>:
   d935c:	b530      	push	{r4, r5, lr}
   d935e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d9362:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d9366:	ea94 0f05 	teq	r4, r5
   d936a:	bf08      	it	eq
   d936c:	ea90 0f02 	teqeq	r0, r2
   d9370:	bf1f      	itttt	ne
   d9372:	ea54 0c00 	orrsne.w	ip, r4, r0
   d9376:	ea55 0c02 	orrsne.w	ip, r5, r2
   d937a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d937e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9382:	f000 80e2 	beq.w	d954a <__adddf3+0x1ee>
   d9386:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d938a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d938e:	bfb8      	it	lt
   d9390:	426d      	neglt	r5, r5
   d9392:	dd0c      	ble.n	d93ae <__adddf3+0x52>
   d9394:	442c      	add	r4, r5
   d9396:	ea80 0202 	eor.w	r2, r0, r2
   d939a:	ea81 0303 	eor.w	r3, r1, r3
   d939e:	ea82 0000 	eor.w	r0, r2, r0
   d93a2:	ea83 0101 	eor.w	r1, r3, r1
   d93a6:	ea80 0202 	eor.w	r2, r0, r2
   d93aa:	ea81 0303 	eor.w	r3, r1, r3
   d93ae:	2d36      	cmp	r5, #54	; 0x36
   d93b0:	bf88      	it	hi
   d93b2:	bd30      	pophi	{r4, r5, pc}
   d93b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d93b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d93bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d93c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d93c4:	d002      	beq.n	d93cc <__adddf3+0x70>
   d93c6:	4240      	negs	r0, r0
   d93c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d93cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d93d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d93d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d93d8:	d002      	beq.n	d93e0 <__adddf3+0x84>
   d93da:	4252      	negs	r2, r2
   d93dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d93e0:	ea94 0f05 	teq	r4, r5
   d93e4:	f000 80a7 	beq.w	d9536 <__adddf3+0x1da>
   d93e8:	f1a4 0401 	sub.w	r4, r4, #1
   d93ec:	f1d5 0e20 	rsbs	lr, r5, #32
   d93f0:	db0d      	blt.n	d940e <__adddf3+0xb2>
   d93f2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d93f6:	fa22 f205 	lsr.w	r2, r2, r5
   d93fa:	1880      	adds	r0, r0, r2
   d93fc:	f141 0100 	adc.w	r1, r1, #0
   d9400:	fa03 f20e 	lsl.w	r2, r3, lr
   d9404:	1880      	adds	r0, r0, r2
   d9406:	fa43 f305 	asr.w	r3, r3, r5
   d940a:	4159      	adcs	r1, r3
   d940c:	e00e      	b.n	d942c <__adddf3+0xd0>
   d940e:	f1a5 0520 	sub.w	r5, r5, #32
   d9412:	f10e 0e20 	add.w	lr, lr, #32
   d9416:	2a01      	cmp	r2, #1
   d9418:	fa03 fc0e 	lsl.w	ip, r3, lr
   d941c:	bf28      	it	cs
   d941e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9422:	fa43 f305 	asr.w	r3, r3, r5
   d9426:	18c0      	adds	r0, r0, r3
   d9428:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d942c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9430:	d507      	bpl.n	d9442 <__adddf3+0xe6>
   d9432:	f04f 0e00 	mov.w	lr, #0
   d9436:	f1dc 0c00 	rsbs	ip, ip, #0
   d943a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d943e:	eb6e 0101 	sbc.w	r1, lr, r1
   d9442:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9446:	d31b      	bcc.n	d9480 <__adddf3+0x124>
   d9448:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d944c:	d30c      	bcc.n	d9468 <__adddf3+0x10c>
   d944e:	0849      	lsrs	r1, r1, #1
   d9450:	ea5f 0030 	movs.w	r0, r0, rrx
   d9454:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9458:	f104 0401 	add.w	r4, r4, #1
   d945c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9460:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9464:	f080 809a 	bcs.w	d959c <__adddf3+0x240>
   d9468:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d946c:	bf08      	it	eq
   d946e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9472:	f150 0000 	adcs.w	r0, r0, #0
   d9476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d947a:	ea41 0105 	orr.w	r1, r1, r5
   d947e:	bd30      	pop	{r4, r5, pc}
   d9480:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d9484:	4140      	adcs	r0, r0
   d9486:	eb41 0101 	adc.w	r1, r1, r1
   d948a:	3c01      	subs	r4, #1
   d948c:	bf28      	it	cs
   d948e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d9492:	d2e9      	bcs.n	d9468 <__adddf3+0x10c>
   d9494:	f091 0f00 	teq	r1, #0
   d9498:	bf04      	itt	eq
   d949a:	4601      	moveq	r1, r0
   d949c:	2000      	moveq	r0, #0
   d949e:	fab1 f381 	clz	r3, r1
   d94a2:	bf08      	it	eq
   d94a4:	3320      	addeq	r3, #32
   d94a6:	f1a3 030b 	sub.w	r3, r3, #11
   d94aa:	f1b3 0220 	subs.w	r2, r3, #32
   d94ae:	da0c      	bge.n	d94ca <__adddf3+0x16e>
   d94b0:	320c      	adds	r2, #12
   d94b2:	dd08      	ble.n	d94c6 <__adddf3+0x16a>
   d94b4:	f102 0c14 	add.w	ip, r2, #20
   d94b8:	f1c2 020c 	rsb	r2, r2, #12
   d94bc:	fa01 f00c 	lsl.w	r0, r1, ip
   d94c0:	fa21 f102 	lsr.w	r1, r1, r2
   d94c4:	e00c      	b.n	d94e0 <__adddf3+0x184>
   d94c6:	f102 0214 	add.w	r2, r2, #20
   d94ca:	bfd8      	it	le
   d94cc:	f1c2 0c20 	rsble	ip, r2, #32
   d94d0:	fa01 f102 	lsl.w	r1, r1, r2
   d94d4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d94d8:	bfdc      	itt	le
   d94da:	ea41 010c 	orrle.w	r1, r1, ip
   d94de:	4090      	lslle	r0, r2
   d94e0:	1ae4      	subs	r4, r4, r3
   d94e2:	bfa2      	ittt	ge
   d94e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d94e8:	4329      	orrge	r1, r5
   d94ea:	bd30      	popge	{r4, r5, pc}
   d94ec:	ea6f 0404 	mvn.w	r4, r4
   d94f0:	3c1f      	subs	r4, #31
   d94f2:	da1c      	bge.n	d952e <__adddf3+0x1d2>
   d94f4:	340c      	adds	r4, #12
   d94f6:	dc0e      	bgt.n	d9516 <__adddf3+0x1ba>
   d94f8:	f104 0414 	add.w	r4, r4, #20
   d94fc:	f1c4 0220 	rsb	r2, r4, #32
   d9500:	fa20 f004 	lsr.w	r0, r0, r4
   d9504:	fa01 f302 	lsl.w	r3, r1, r2
   d9508:	ea40 0003 	orr.w	r0, r0, r3
   d950c:	fa21 f304 	lsr.w	r3, r1, r4
   d9510:	ea45 0103 	orr.w	r1, r5, r3
   d9514:	bd30      	pop	{r4, r5, pc}
   d9516:	f1c4 040c 	rsb	r4, r4, #12
   d951a:	f1c4 0220 	rsb	r2, r4, #32
   d951e:	fa20 f002 	lsr.w	r0, r0, r2
   d9522:	fa01 f304 	lsl.w	r3, r1, r4
   d9526:	ea40 0003 	orr.w	r0, r0, r3
   d952a:	4629      	mov	r1, r5
   d952c:	bd30      	pop	{r4, r5, pc}
   d952e:	fa21 f004 	lsr.w	r0, r1, r4
   d9532:	4629      	mov	r1, r5
   d9534:	bd30      	pop	{r4, r5, pc}
   d9536:	f094 0f00 	teq	r4, #0
   d953a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d953e:	bf06      	itte	eq
   d9540:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9544:	3401      	addeq	r4, #1
   d9546:	3d01      	subne	r5, #1
   d9548:	e74e      	b.n	d93e8 <__adddf3+0x8c>
   d954a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d954e:	bf18      	it	ne
   d9550:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9554:	d029      	beq.n	d95aa <__adddf3+0x24e>
   d9556:	ea94 0f05 	teq	r4, r5
   d955a:	bf08      	it	eq
   d955c:	ea90 0f02 	teqeq	r0, r2
   d9560:	d005      	beq.n	d956e <__adddf3+0x212>
   d9562:	ea54 0c00 	orrs.w	ip, r4, r0
   d9566:	bf04      	itt	eq
   d9568:	4619      	moveq	r1, r3
   d956a:	4610      	moveq	r0, r2
   d956c:	bd30      	pop	{r4, r5, pc}
   d956e:	ea91 0f03 	teq	r1, r3
   d9572:	bf1e      	ittt	ne
   d9574:	2100      	movne	r1, #0
   d9576:	2000      	movne	r0, #0
   d9578:	bd30      	popne	{r4, r5, pc}
   d957a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d957e:	d105      	bne.n	d958c <__adddf3+0x230>
   d9580:	0040      	lsls	r0, r0, #1
   d9582:	4149      	adcs	r1, r1
   d9584:	bf28      	it	cs
   d9586:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d958a:	bd30      	pop	{r4, r5, pc}
   d958c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9590:	bf3c      	itt	cc
   d9592:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d9596:	bd30      	popcc	{r4, r5, pc}
   d9598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d959c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d95a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d95a4:	f04f 0000 	mov.w	r0, #0
   d95a8:	bd30      	pop	{r4, r5, pc}
   d95aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d95ae:	bf1a      	itte	ne
   d95b0:	4619      	movne	r1, r3
   d95b2:	4610      	movne	r0, r2
   d95b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d95b8:	bf1c      	itt	ne
   d95ba:	460b      	movne	r3, r1
   d95bc:	4602      	movne	r2, r0
   d95be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d95c2:	bf06      	itte	eq
   d95c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d95c8:	ea91 0f03 	teqeq	r1, r3
   d95cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d95d0:	bd30      	pop	{r4, r5, pc}
   d95d2:	bf00      	nop

000d95d4 <__aeabi_ui2d>:
   d95d4:	f090 0f00 	teq	r0, #0
   d95d8:	bf04      	itt	eq
   d95da:	2100      	moveq	r1, #0
   d95dc:	4770      	bxeq	lr
   d95de:	b530      	push	{r4, r5, lr}
   d95e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d95e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d95e8:	f04f 0500 	mov.w	r5, #0
   d95ec:	f04f 0100 	mov.w	r1, #0
   d95f0:	e750      	b.n	d9494 <__adddf3+0x138>
   d95f2:	bf00      	nop

000d95f4 <__aeabi_i2d>:
   d95f4:	f090 0f00 	teq	r0, #0
   d95f8:	bf04      	itt	eq
   d95fa:	2100      	moveq	r1, #0
   d95fc:	4770      	bxeq	lr
   d95fe:	b530      	push	{r4, r5, lr}
   d9600:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9604:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9608:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d960c:	bf48      	it	mi
   d960e:	4240      	negmi	r0, r0
   d9610:	f04f 0100 	mov.w	r1, #0
   d9614:	e73e      	b.n	d9494 <__adddf3+0x138>
   d9616:	bf00      	nop

000d9618 <__aeabi_f2d>:
   d9618:	0042      	lsls	r2, r0, #1
   d961a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d961e:	ea4f 0131 	mov.w	r1, r1, rrx
   d9622:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9626:	bf1f      	itttt	ne
   d9628:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d962c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9630:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9634:	4770      	bxne	lr
   d9636:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d963a:	bf08      	it	eq
   d963c:	4770      	bxeq	lr
   d963e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d9642:	bf04      	itt	eq
   d9644:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d9648:	4770      	bxeq	lr
   d964a:	b530      	push	{r4, r5, lr}
   d964c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9650:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9654:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9658:	e71c      	b.n	d9494 <__adddf3+0x138>
   d965a:	bf00      	nop

000d965c <__aeabi_ul2d>:
   d965c:	ea50 0201 	orrs.w	r2, r0, r1
   d9660:	bf08      	it	eq
   d9662:	4770      	bxeq	lr
   d9664:	b530      	push	{r4, r5, lr}
   d9666:	f04f 0500 	mov.w	r5, #0
   d966a:	e00a      	b.n	d9682 <__aeabi_l2d+0x16>

000d966c <__aeabi_l2d>:
   d966c:	ea50 0201 	orrs.w	r2, r0, r1
   d9670:	bf08      	it	eq
   d9672:	4770      	bxeq	lr
   d9674:	b530      	push	{r4, r5, lr}
   d9676:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d967a:	d502      	bpl.n	d9682 <__aeabi_l2d+0x16>
   d967c:	4240      	negs	r0, r0
   d967e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9682:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9686:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d968a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d968e:	f43f aed8 	beq.w	d9442 <__adddf3+0xe6>
   d9692:	f04f 0203 	mov.w	r2, #3
   d9696:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d969a:	bf18      	it	ne
   d969c:	3203      	addne	r2, #3
   d969e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d96a2:	bf18      	it	ne
   d96a4:	3203      	addne	r2, #3
   d96a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d96aa:	f1c2 0320 	rsb	r3, r2, #32
   d96ae:	fa00 fc03 	lsl.w	ip, r0, r3
   d96b2:	fa20 f002 	lsr.w	r0, r0, r2
   d96b6:	fa01 fe03 	lsl.w	lr, r1, r3
   d96ba:	ea40 000e 	orr.w	r0, r0, lr
   d96be:	fa21 f102 	lsr.w	r1, r1, r2
   d96c2:	4414      	add	r4, r2
   d96c4:	e6bd      	b.n	d9442 <__adddf3+0xe6>
   d96c6:	bf00      	nop

000d96c8 <__aeabi_dmul>:
   d96c8:	b570      	push	{r4, r5, r6, lr}
   d96ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d96ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d96d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d96d6:	bf1d      	ittte	ne
   d96d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d96dc:	ea94 0f0c 	teqne	r4, ip
   d96e0:	ea95 0f0c 	teqne	r5, ip
   d96e4:	f000 f8de 	bleq	d98a4 <__aeabi_dmul+0x1dc>
   d96e8:	442c      	add	r4, r5
   d96ea:	ea81 0603 	eor.w	r6, r1, r3
   d96ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d96f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d96f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d96fa:	bf18      	it	ne
   d96fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9708:	d038      	beq.n	d977c <__aeabi_dmul+0xb4>
   d970a:	fba0 ce02 	umull	ip, lr, r0, r2
   d970e:	f04f 0500 	mov.w	r5, #0
   d9712:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9716:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d971a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d971e:	f04f 0600 	mov.w	r6, #0
   d9722:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9726:	f09c 0f00 	teq	ip, #0
   d972a:	bf18      	it	ne
   d972c:	f04e 0e01 	orrne.w	lr, lr, #1
   d9730:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9734:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9738:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d973c:	d204      	bcs.n	d9748 <__aeabi_dmul+0x80>
   d973e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9742:	416d      	adcs	r5, r5
   d9744:	eb46 0606 	adc.w	r6, r6, r6
   d9748:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d974c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9750:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9754:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9758:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d975c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9760:	bf88      	it	hi
   d9762:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9766:	d81e      	bhi.n	d97a6 <__aeabi_dmul+0xde>
   d9768:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d976c:	bf08      	it	eq
   d976e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9772:	f150 0000 	adcs.w	r0, r0, #0
   d9776:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d977a:	bd70      	pop	{r4, r5, r6, pc}
   d977c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9780:	ea46 0101 	orr.w	r1, r6, r1
   d9784:	ea40 0002 	orr.w	r0, r0, r2
   d9788:	ea81 0103 	eor.w	r1, r1, r3
   d978c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9790:	bfc2      	ittt	gt
   d9792:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9796:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d979a:	bd70      	popgt	{r4, r5, r6, pc}
   d979c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d97a0:	f04f 0e00 	mov.w	lr, #0
   d97a4:	3c01      	subs	r4, #1
   d97a6:	f300 80ab 	bgt.w	d9900 <__aeabi_dmul+0x238>
   d97aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d97ae:	bfde      	ittt	le
   d97b0:	2000      	movle	r0, #0
   d97b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d97b6:	bd70      	pople	{r4, r5, r6, pc}
   d97b8:	f1c4 0400 	rsb	r4, r4, #0
   d97bc:	3c20      	subs	r4, #32
   d97be:	da35      	bge.n	d982c <__aeabi_dmul+0x164>
   d97c0:	340c      	adds	r4, #12
   d97c2:	dc1b      	bgt.n	d97fc <__aeabi_dmul+0x134>
   d97c4:	f104 0414 	add.w	r4, r4, #20
   d97c8:	f1c4 0520 	rsb	r5, r4, #32
   d97cc:	fa00 f305 	lsl.w	r3, r0, r5
   d97d0:	fa20 f004 	lsr.w	r0, r0, r4
   d97d4:	fa01 f205 	lsl.w	r2, r1, r5
   d97d8:	ea40 0002 	orr.w	r0, r0, r2
   d97dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d97e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d97e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d97e8:	fa21 f604 	lsr.w	r6, r1, r4
   d97ec:	eb42 0106 	adc.w	r1, r2, r6
   d97f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d97f4:	bf08      	it	eq
   d97f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d97fa:	bd70      	pop	{r4, r5, r6, pc}
   d97fc:	f1c4 040c 	rsb	r4, r4, #12
   d9800:	f1c4 0520 	rsb	r5, r4, #32
   d9804:	fa00 f304 	lsl.w	r3, r0, r4
   d9808:	fa20 f005 	lsr.w	r0, r0, r5
   d980c:	fa01 f204 	lsl.w	r2, r1, r4
   d9810:	ea40 0002 	orr.w	r0, r0, r2
   d9814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9818:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d981c:	f141 0100 	adc.w	r1, r1, #0
   d9820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9824:	bf08      	it	eq
   d9826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d982a:	bd70      	pop	{r4, r5, r6, pc}
   d982c:	f1c4 0520 	rsb	r5, r4, #32
   d9830:	fa00 f205 	lsl.w	r2, r0, r5
   d9834:	ea4e 0e02 	orr.w	lr, lr, r2
   d9838:	fa20 f304 	lsr.w	r3, r0, r4
   d983c:	fa01 f205 	lsl.w	r2, r1, r5
   d9840:	ea43 0302 	orr.w	r3, r3, r2
   d9844:	fa21 f004 	lsr.w	r0, r1, r4
   d9848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d984c:	fa21 f204 	lsr.w	r2, r1, r4
   d9850:	ea20 0002 	bic.w	r0, r0, r2
   d9854:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9858:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d985c:	bf08      	it	eq
   d985e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9862:	bd70      	pop	{r4, r5, r6, pc}
   d9864:	f094 0f00 	teq	r4, #0
   d9868:	d10f      	bne.n	d988a <__aeabi_dmul+0x1c2>
   d986a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d986e:	0040      	lsls	r0, r0, #1
   d9870:	eb41 0101 	adc.w	r1, r1, r1
   d9874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9878:	bf08      	it	eq
   d987a:	3c01      	subeq	r4, #1
   d987c:	d0f7      	beq.n	d986e <__aeabi_dmul+0x1a6>
   d987e:	ea41 0106 	orr.w	r1, r1, r6
   d9882:	f095 0f00 	teq	r5, #0
   d9886:	bf18      	it	ne
   d9888:	4770      	bxne	lr
   d988a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d988e:	0052      	lsls	r2, r2, #1
   d9890:	eb43 0303 	adc.w	r3, r3, r3
   d9894:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9898:	bf08      	it	eq
   d989a:	3d01      	subeq	r5, #1
   d989c:	d0f7      	beq.n	d988e <__aeabi_dmul+0x1c6>
   d989e:	ea43 0306 	orr.w	r3, r3, r6
   d98a2:	4770      	bx	lr
   d98a4:	ea94 0f0c 	teq	r4, ip
   d98a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d98ac:	bf18      	it	ne
   d98ae:	ea95 0f0c 	teqne	r5, ip
   d98b2:	d00c      	beq.n	d98ce <__aeabi_dmul+0x206>
   d98b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d98b8:	bf18      	it	ne
   d98ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d98be:	d1d1      	bne.n	d9864 <__aeabi_dmul+0x19c>
   d98c0:	ea81 0103 	eor.w	r1, r1, r3
   d98c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d98c8:	f04f 0000 	mov.w	r0, #0
   d98cc:	bd70      	pop	{r4, r5, r6, pc}
   d98ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d98d2:	bf06      	itte	eq
   d98d4:	4610      	moveq	r0, r2
   d98d6:	4619      	moveq	r1, r3
   d98d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d98dc:	d019      	beq.n	d9912 <__aeabi_dmul+0x24a>
   d98de:	ea94 0f0c 	teq	r4, ip
   d98e2:	d102      	bne.n	d98ea <__aeabi_dmul+0x222>
   d98e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d98e8:	d113      	bne.n	d9912 <__aeabi_dmul+0x24a>
   d98ea:	ea95 0f0c 	teq	r5, ip
   d98ee:	d105      	bne.n	d98fc <__aeabi_dmul+0x234>
   d98f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d98f4:	bf1c      	itt	ne
   d98f6:	4610      	movne	r0, r2
   d98f8:	4619      	movne	r1, r3
   d98fa:	d10a      	bne.n	d9912 <__aeabi_dmul+0x24a>
   d98fc:	ea81 0103 	eor.w	r1, r1, r3
   d9900:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9904:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9908:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d990c:	f04f 0000 	mov.w	r0, #0
   d9910:	bd70      	pop	{r4, r5, r6, pc}
   d9912:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9916:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d991a:	bd70      	pop	{r4, r5, r6, pc}

000d991c <__aeabi_ddiv>:
   d991c:	b570      	push	{r4, r5, r6, lr}
   d991e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9922:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9926:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d992a:	bf1d      	ittte	ne
   d992c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9930:	ea94 0f0c 	teqne	r4, ip
   d9934:	ea95 0f0c 	teqne	r5, ip
   d9938:	f000 f8a7 	bleq	d9a8a <__aeabi_ddiv+0x16e>
   d993c:	eba4 0405 	sub.w	r4, r4, r5
   d9940:	ea81 0e03 	eor.w	lr, r1, r3
   d9944:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9948:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d994c:	f000 8088 	beq.w	d9a60 <__aeabi_ddiv+0x144>
   d9950:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9954:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9958:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d995c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9960:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9964:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9968:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d996c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9970:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9974:	429d      	cmp	r5, r3
   d9976:	bf08      	it	eq
   d9978:	4296      	cmpeq	r6, r2
   d997a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d997e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9982:	d202      	bcs.n	d998a <__aeabi_ddiv+0x6e>
   d9984:	085b      	lsrs	r3, r3, #1
   d9986:	ea4f 0232 	mov.w	r2, r2, rrx
   d998a:	1ab6      	subs	r6, r6, r2
   d998c:	eb65 0503 	sbc.w	r5, r5, r3
   d9990:	085b      	lsrs	r3, r3, #1
   d9992:	ea4f 0232 	mov.w	r2, r2, rrx
   d9996:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d999a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d999e:	ebb6 0e02 	subs.w	lr, r6, r2
   d99a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d99a6:	bf22      	ittt	cs
   d99a8:	1ab6      	subcs	r6, r6, r2
   d99aa:	4675      	movcs	r5, lr
   d99ac:	ea40 000c 	orrcs.w	r0, r0, ip
   d99b0:	085b      	lsrs	r3, r3, #1
   d99b2:	ea4f 0232 	mov.w	r2, r2, rrx
   d99b6:	ebb6 0e02 	subs.w	lr, r6, r2
   d99ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d99be:	bf22      	ittt	cs
   d99c0:	1ab6      	subcs	r6, r6, r2
   d99c2:	4675      	movcs	r5, lr
   d99c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d99c8:	085b      	lsrs	r3, r3, #1
   d99ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d99ce:	ebb6 0e02 	subs.w	lr, r6, r2
   d99d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d99d6:	bf22      	ittt	cs
   d99d8:	1ab6      	subcs	r6, r6, r2
   d99da:	4675      	movcs	r5, lr
   d99dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d99e0:	085b      	lsrs	r3, r3, #1
   d99e2:	ea4f 0232 	mov.w	r2, r2, rrx
   d99e6:	ebb6 0e02 	subs.w	lr, r6, r2
   d99ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   d99ee:	bf22      	ittt	cs
   d99f0:	1ab6      	subcs	r6, r6, r2
   d99f2:	4675      	movcs	r5, lr
   d99f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d99f8:	ea55 0e06 	orrs.w	lr, r5, r6
   d99fc:	d018      	beq.n	d9a30 <__aeabi_ddiv+0x114>
   d99fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9a02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9a06:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9a0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9a0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9a12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9a16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9a1a:	d1c0      	bne.n	d999e <__aeabi_ddiv+0x82>
   d9a1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9a20:	d10b      	bne.n	d9a3a <__aeabi_ddiv+0x11e>
   d9a22:	ea41 0100 	orr.w	r1, r1, r0
   d9a26:	f04f 0000 	mov.w	r0, #0
   d9a2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9a2e:	e7b6      	b.n	d999e <__aeabi_ddiv+0x82>
   d9a30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9a34:	bf04      	itt	eq
   d9a36:	4301      	orreq	r1, r0
   d9a38:	2000      	moveq	r0, #0
   d9a3a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9a3e:	bf88      	it	hi
   d9a40:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9a44:	f63f aeaf 	bhi.w	d97a6 <__aeabi_dmul+0xde>
   d9a48:	ebb5 0c03 	subs.w	ip, r5, r3
   d9a4c:	bf04      	itt	eq
   d9a4e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9a52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9a56:	f150 0000 	adcs.w	r0, r0, #0
   d9a5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9a5e:	bd70      	pop	{r4, r5, r6, pc}
   d9a60:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9a64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9a68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9a6c:	bfc2      	ittt	gt
   d9a6e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9a72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9a76:	bd70      	popgt	{r4, r5, r6, pc}
   d9a78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9a7c:	f04f 0e00 	mov.w	lr, #0
   d9a80:	3c01      	subs	r4, #1
   d9a82:	e690      	b.n	d97a6 <__aeabi_dmul+0xde>
   d9a84:	ea45 0e06 	orr.w	lr, r5, r6
   d9a88:	e68d      	b.n	d97a6 <__aeabi_dmul+0xde>
   d9a8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9a8e:	ea94 0f0c 	teq	r4, ip
   d9a92:	bf08      	it	eq
   d9a94:	ea95 0f0c 	teqeq	r5, ip
   d9a98:	f43f af3b 	beq.w	d9912 <__aeabi_dmul+0x24a>
   d9a9c:	ea94 0f0c 	teq	r4, ip
   d9aa0:	d10a      	bne.n	d9ab8 <__aeabi_ddiv+0x19c>
   d9aa2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9aa6:	f47f af34 	bne.w	d9912 <__aeabi_dmul+0x24a>
   d9aaa:	ea95 0f0c 	teq	r5, ip
   d9aae:	f47f af25 	bne.w	d98fc <__aeabi_dmul+0x234>
   d9ab2:	4610      	mov	r0, r2
   d9ab4:	4619      	mov	r1, r3
   d9ab6:	e72c      	b.n	d9912 <__aeabi_dmul+0x24a>
   d9ab8:	ea95 0f0c 	teq	r5, ip
   d9abc:	d106      	bne.n	d9acc <__aeabi_ddiv+0x1b0>
   d9abe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9ac2:	f43f aefd 	beq.w	d98c0 <__aeabi_dmul+0x1f8>
   d9ac6:	4610      	mov	r0, r2
   d9ac8:	4619      	mov	r1, r3
   d9aca:	e722      	b.n	d9912 <__aeabi_dmul+0x24a>
   d9acc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9ad0:	bf18      	it	ne
   d9ad2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9ad6:	f47f aec5 	bne.w	d9864 <__aeabi_dmul+0x19c>
   d9ada:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9ade:	f47f af0d 	bne.w	d98fc <__aeabi_dmul+0x234>
   d9ae2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9ae6:	f47f aeeb 	bne.w	d98c0 <__aeabi_dmul+0x1f8>
   d9aea:	e712      	b.n	d9912 <__aeabi_dmul+0x24a>

000d9aec <__gedf2>:
   d9aec:	f04f 3cff 	mov.w	ip, #4294967295
   d9af0:	e006      	b.n	d9b00 <__cmpdf2+0x4>
   d9af2:	bf00      	nop

000d9af4 <__ledf2>:
   d9af4:	f04f 0c01 	mov.w	ip, #1
   d9af8:	e002      	b.n	d9b00 <__cmpdf2+0x4>
   d9afa:	bf00      	nop

000d9afc <__cmpdf2>:
   d9afc:	f04f 0c01 	mov.w	ip, #1
   d9b00:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9b04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9b10:	bf18      	it	ne
   d9b12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d9b16:	d01b      	beq.n	d9b50 <__cmpdf2+0x54>
   d9b18:	b001      	add	sp, #4
   d9b1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9b1e:	bf0c      	ite	eq
   d9b20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9b24:	ea91 0f03 	teqne	r1, r3
   d9b28:	bf02      	ittt	eq
   d9b2a:	ea90 0f02 	teqeq	r0, r2
   d9b2e:	2000      	moveq	r0, #0
   d9b30:	4770      	bxeq	lr
   d9b32:	f110 0f00 	cmn.w	r0, #0
   d9b36:	ea91 0f03 	teq	r1, r3
   d9b3a:	bf58      	it	pl
   d9b3c:	4299      	cmppl	r1, r3
   d9b3e:	bf08      	it	eq
   d9b40:	4290      	cmpeq	r0, r2
   d9b42:	bf2c      	ite	cs
   d9b44:	17d8      	asrcs	r0, r3, #31
   d9b46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9b4a:	f040 0001 	orr.w	r0, r0, #1
   d9b4e:	4770      	bx	lr
   d9b50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9b58:	d102      	bne.n	d9b60 <__cmpdf2+0x64>
   d9b5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9b5e:	d107      	bne.n	d9b70 <__cmpdf2+0x74>
   d9b60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9b68:	d1d6      	bne.n	d9b18 <__cmpdf2+0x1c>
   d9b6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9b6e:	d0d3      	beq.n	d9b18 <__cmpdf2+0x1c>
   d9b70:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9b74:	4770      	bx	lr
   d9b76:	bf00      	nop

000d9b78 <__aeabi_cdrcmple>:
   d9b78:	4684      	mov	ip, r0
   d9b7a:	4610      	mov	r0, r2
   d9b7c:	4662      	mov	r2, ip
   d9b7e:	468c      	mov	ip, r1
   d9b80:	4619      	mov	r1, r3
   d9b82:	4663      	mov	r3, ip
   d9b84:	e000      	b.n	d9b88 <__aeabi_cdcmpeq>
   d9b86:	bf00      	nop

000d9b88 <__aeabi_cdcmpeq>:
   d9b88:	b501      	push	{r0, lr}
   d9b8a:	f7ff ffb7 	bl	d9afc <__cmpdf2>
   d9b8e:	2800      	cmp	r0, #0
   d9b90:	bf48      	it	mi
   d9b92:	f110 0f00 	cmnmi.w	r0, #0
   d9b96:	bd01      	pop	{r0, pc}

000d9b98 <__aeabi_dcmpeq>:
   d9b98:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9b9c:	f7ff fff4 	bl	d9b88 <__aeabi_cdcmpeq>
   d9ba0:	bf0c      	ite	eq
   d9ba2:	2001      	moveq	r0, #1
   d9ba4:	2000      	movne	r0, #0
   d9ba6:	f85d fb08 	ldr.w	pc, [sp], #8
   d9baa:	bf00      	nop

000d9bac <__aeabi_dcmplt>:
   d9bac:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9bb0:	f7ff ffea 	bl	d9b88 <__aeabi_cdcmpeq>
   d9bb4:	bf34      	ite	cc
   d9bb6:	2001      	movcc	r0, #1
   d9bb8:	2000      	movcs	r0, #0
   d9bba:	f85d fb08 	ldr.w	pc, [sp], #8
   d9bbe:	bf00      	nop

000d9bc0 <__aeabi_dcmple>:
   d9bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9bc4:	f7ff ffe0 	bl	d9b88 <__aeabi_cdcmpeq>
   d9bc8:	bf94      	ite	ls
   d9bca:	2001      	movls	r0, #1
   d9bcc:	2000      	movhi	r0, #0
   d9bce:	f85d fb08 	ldr.w	pc, [sp], #8
   d9bd2:	bf00      	nop

000d9bd4 <__aeabi_dcmpge>:
   d9bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9bd8:	f7ff ffce 	bl	d9b78 <__aeabi_cdrcmple>
   d9bdc:	bf94      	ite	ls
   d9bde:	2001      	movls	r0, #1
   d9be0:	2000      	movhi	r0, #0
   d9be2:	f85d fb08 	ldr.w	pc, [sp], #8
   d9be6:	bf00      	nop

000d9be8 <__aeabi_dcmpgt>:
   d9be8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9bec:	f7ff ffc4 	bl	d9b78 <__aeabi_cdrcmple>
   d9bf0:	bf34      	ite	cc
   d9bf2:	2001      	movcc	r0, #1
   d9bf4:	2000      	movcs	r0, #0
   d9bf6:	f85d fb08 	ldr.w	pc, [sp], #8
   d9bfa:	bf00      	nop

000d9bfc <__aeabi_dcmpun>:
   d9bfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9c04:	d102      	bne.n	d9c0c <__aeabi_dcmpun+0x10>
   d9c06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9c0a:	d10a      	bne.n	d9c22 <__aeabi_dcmpun+0x26>
   d9c0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9c14:	d102      	bne.n	d9c1c <__aeabi_dcmpun+0x20>
   d9c16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9c1a:	d102      	bne.n	d9c22 <__aeabi_dcmpun+0x26>
   d9c1c:	f04f 0000 	mov.w	r0, #0
   d9c20:	4770      	bx	lr
   d9c22:	f04f 0001 	mov.w	r0, #1
   d9c26:	4770      	bx	lr

000d9c28 <__aeabi_d2iz>:
   d9c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9c2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9c30:	d215      	bcs.n	d9c5e <__aeabi_d2iz+0x36>
   d9c32:	d511      	bpl.n	d9c58 <__aeabi_d2iz+0x30>
   d9c34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9c38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9c3c:	d912      	bls.n	d9c64 <__aeabi_d2iz+0x3c>
   d9c3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9c46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9c4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9c4e:	fa23 f002 	lsr.w	r0, r3, r2
   d9c52:	bf18      	it	ne
   d9c54:	4240      	negne	r0, r0
   d9c56:	4770      	bx	lr
   d9c58:	f04f 0000 	mov.w	r0, #0
   d9c5c:	4770      	bx	lr
   d9c5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9c62:	d105      	bne.n	d9c70 <__aeabi_d2iz+0x48>
   d9c64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9c68:	bf08      	it	eq
   d9c6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9c6e:	4770      	bx	lr
   d9c70:	f04f 0000 	mov.w	r0, #0
   d9c74:	4770      	bx	lr
   d9c76:	bf00      	nop

000d9c78 <__aeabi_d2uiz>:
   d9c78:	004a      	lsls	r2, r1, #1
   d9c7a:	d211      	bcs.n	d9ca0 <__aeabi_d2uiz+0x28>
   d9c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9c80:	d211      	bcs.n	d9ca6 <__aeabi_d2uiz+0x2e>
   d9c82:	d50d      	bpl.n	d9ca0 <__aeabi_d2uiz+0x28>
   d9c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9c8c:	d40e      	bmi.n	d9cac <__aeabi_d2uiz+0x34>
   d9c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9c9a:	fa23 f002 	lsr.w	r0, r3, r2
   d9c9e:	4770      	bx	lr
   d9ca0:	f04f 0000 	mov.w	r0, #0
   d9ca4:	4770      	bx	lr
   d9ca6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9caa:	d102      	bne.n	d9cb2 <__aeabi_d2uiz+0x3a>
   d9cac:	f04f 30ff 	mov.w	r0, #4294967295
   d9cb0:	4770      	bx	lr
   d9cb2:	f04f 0000 	mov.w	r0, #0
   d9cb6:	4770      	bx	lr

000d9cb8 <__aeabi_d2f>:
   d9cb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9cbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9cc0:	bf24      	itt	cs
   d9cc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9cc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9cca:	d90d      	bls.n	d9ce8 <__aeabi_d2f+0x30>
   d9ccc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9cd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9cd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9cd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9cdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9ce0:	bf08      	it	eq
   d9ce2:	f020 0001 	biceq.w	r0, r0, #1
   d9ce6:	4770      	bx	lr
   d9ce8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9cec:	d121      	bne.n	d9d32 <__aeabi_d2f+0x7a>
   d9cee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9cf2:	bfbc      	itt	lt
   d9cf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9cf8:	4770      	bxlt	lr
   d9cfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9cfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9d02:	f1c2 0218 	rsb	r2, r2, #24
   d9d06:	f1c2 0c20 	rsb	ip, r2, #32
   d9d0a:	fa10 f30c 	lsls.w	r3, r0, ip
   d9d0e:	fa20 f002 	lsr.w	r0, r0, r2
   d9d12:	bf18      	it	ne
   d9d14:	f040 0001 	orrne.w	r0, r0, #1
   d9d18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9d1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9d20:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9d24:	ea40 000c 	orr.w	r0, r0, ip
   d9d28:	fa23 f302 	lsr.w	r3, r3, r2
   d9d2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9d30:	e7cc      	b.n	d9ccc <__aeabi_d2f+0x14>
   d9d32:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9d36:	d107      	bne.n	d9d48 <__aeabi_d2f+0x90>
   d9d38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9d3c:	bf1e      	ittt	ne
   d9d3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9d42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9d46:	4770      	bxne	lr
   d9d48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9d54:	4770      	bx	lr
   d9d56:	bf00      	nop

000d9d58 <atoi>:
   d9d58:	220a      	movs	r2, #10
   d9d5a:	2100      	movs	r1, #0
   d9d5c:	f000 b950 	b.w	da000 <strtol>

000d9d60 <__cxa_atexit>:
   d9d60:	b510      	push	{r4, lr}
   d9d62:	4c05      	ldr	r4, [pc, #20]	; (d9d78 <__cxa_atexit+0x18>)
   d9d64:	4613      	mov	r3, r2
   d9d66:	b12c      	cbz	r4, d9d74 <__cxa_atexit+0x14>
   d9d68:	460a      	mov	r2, r1
   d9d6a:	4601      	mov	r1, r0
   d9d6c:	2002      	movs	r0, #2
   d9d6e:	f3af 8000 	nop.w
   d9d72:	bd10      	pop	{r4, pc}
   d9d74:	4620      	mov	r0, r4
   d9d76:	e7fc      	b.n	d9d72 <__cxa_atexit+0x12>
   d9d78:	00000000 	.word	0x00000000

000d9d7c <ldiv>:
   d9d7c:	2900      	cmp	r1, #0
   d9d7e:	b510      	push	{r4, lr}
   d9d80:	fb91 f4f2 	sdiv	r4, r1, r2
   d9d84:	fb02 1314 	mls	r3, r2, r4, r1
   d9d88:	db06      	blt.n	d9d98 <ldiv+0x1c>
   d9d8a:	2b00      	cmp	r3, #0
   d9d8c:	da01      	bge.n	d9d92 <ldiv+0x16>
   d9d8e:	3401      	adds	r4, #1
   d9d90:	1a9b      	subs	r3, r3, r2
   d9d92:	e9c0 4300 	strd	r4, r3, [r0]
   d9d96:	bd10      	pop	{r4, pc}
   d9d98:	2b00      	cmp	r3, #0
   d9d9a:	bfc4      	itt	gt
   d9d9c:	f104 34ff 	addgt.w	r4, r4, #4294967295
   d9da0:	189b      	addgt	r3, r3, r2
   d9da2:	e7f6      	b.n	d9d92 <ldiv+0x16>

000d9da4 <memcmp>:
   d9da4:	b530      	push	{r4, r5, lr}
   d9da6:	3901      	subs	r1, #1
   d9da8:	2400      	movs	r4, #0
   d9daa:	42a2      	cmp	r2, r4
   d9dac:	d101      	bne.n	d9db2 <memcmp+0xe>
   d9dae:	2000      	movs	r0, #0
   d9db0:	e005      	b.n	d9dbe <memcmp+0x1a>
   d9db2:	5d03      	ldrb	r3, [r0, r4]
   d9db4:	3401      	adds	r4, #1
   d9db6:	5d0d      	ldrb	r5, [r1, r4]
   d9db8:	42ab      	cmp	r3, r5
   d9dba:	d0f6      	beq.n	d9daa <memcmp+0x6>
   d9dbc:	1b58      	subs	r0, r3, r5
   d9dbe:	bd30      	pop	{r4, r5, pc}

000d9dc0 <memcpy>:
   d9dc0:	440a      	add	r2, r1
   d9dc2:	4291      	cmp	r1, r2
   d9dc4:	f100 33ff 	add.w	r3, r0, #4294967295
   d9dc8:	d100      	bne.n	d9dcc <memcpy+0xc>
   d9dca:	4770      	bx	lr
   d9dcc:	b510      	push	{r4, lr}
   d9dce:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9dd6:	4291      	cmp	r1, r2
   d9dd8:	d1f9      	bne.n	d9dce <memcpy+0xe>
   d9dda:	bd10      	pop	{r4, pc}

000d9ddc <memmove>:
   d9ddc:	4288      	cmp	r0, r1
   d9dde:	b510      	push	{r4, lr}
   d9de0:	eb01 0402 	add.w	r4, r1, r2
   d9de4:	d902      	bls.n	d9dec <memmove+0x10>
   d9de6:	4284      	cmp	r4, r0
   d9de8:	4623      	mov	r3, r4
   d9dea:	d807      	bhi.n	d9dfc <memmove+0x20>
   d9dec:	1e43      	subs	r3, r0, #1
   d9dee:	42a1      	cmp	r1, r4
   d9df0:	d008      	beq.n	d9e04 <memmove+0x28>
   d9df2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9df6:	f803 2f01 	strb.w	r2, [r3, #1]!
   d9dfa:	e7f8      	b.n	d9dee <memmove+0x12>
   d9dfc:	4402      	add	r2, r0
   d9dfe:	4601      	mov	r1, r0
   d9e00:	428a      	cmp	r2, r1
   d9e02:	d100      	bne.n	d9e06 <memmove+0x2a>
   d9e04:	bd10      	pop	{r4, pc}
   d9e06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d9e0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d9e0e:	e7f7      	b.n	d9e00 <memmove+0x24>

000d9e10 <memset>:
   d9e10:	4402      	add	r2, r0
   d9e12:	4603      	mov	r3, r0
   d9e14:	4293      	cmp	r3, r2
   d9e16:	d100      	bne.n	d9e1a <memset+0xa>
   d9e18:	4770      	bx	lr
   d9e1a:	f803 1b01 	strb.w	r1, [r3], #1
   d9e1e:	e7f9      	b.n	d9e14 <memset+0x4>

000d9e20 <srand>:
   d9e20:	b538      	push	{r3, r4, r5, lr}
   d9e22:	4b0d      	ldr	r3, [pc, #52]	; (d9e58 <srand+0x38>)
   d9e24:	681d      	ldr	r5, [r3, #0]
   d9e26:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9e28:	4604      	mov	r4, r0
   d9e2a:	b97b      	cbnz	r3, d9e4c <srand+0x2c>
   d9e2c:	2018      	movs	r0, #24
   d9e2e:	f7fc fa27 	bl	d6280 <malloc>
   d9e32:	4a0a      	ldr	r2, [pc, #40]	; (d9e5c <srand+0x3c>)
   d9e34:	4b0a      	ldr	r3, [pc, #40]	; (d9e60 <srand+0x40>)
   d9e36:	63a8      	str	r0, [r5, #56]	; 0x38
   d9e38:	e9c0 2300 	strd	r2, r3, [r0]
   d9e3c:	4b09      	ldr	r3, [pc, #36]	; (d9e64 <srand+0x44>)
   d9e3e:	6083      	str	r3, [r0, #8]
   d9e40:	230b      	movs	r3, #11
   d9e42:	8183      	strh	r3, [r0, #12]
   d9e44:	2201      	movs	r2, #1
   d9e46:	2300      	movs	r3, #0
   d9e48:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9e4c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9e4e:	2200      	movs	r2, #0
   d9e50:	611c      	str	r4, [r3, #16]
   d9e52:	615a      	str	r2, [r3, #20]
   d9e54:	bd38      	pop	{r3, r4, r5, pc}
   d9e56:	bf00      	nop
   d9e58:	2003defc 	.word	0x2003defc
   d9e5c:	abcd330e 	.word	0xabcd330e
   d9e60:	e66d1234 	.word	0xe66d1234
   d9e64:	0005deec 	.word	0x0005deec

000d9e68 <strcmp>:
   d9e68:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9e70:	2a01      	cmp	r2, #1
   d9e72:	bf28      	it	cs
   d9e74:	429a      	cmpcs	r2, r3
   d9e76:	d0f7      	beq.n	d9e68 <strcmp>
   d9e78:	1ad0      	subs	r0, r2, r3
   d9e7a:	4770      	bx	lr

000d9e7c <strcpy>:
   d9e7c:	4603      	mov	r3, r0
   d9e7e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9e82:	f803 2b01 	strb.w	r2, [r3], #1
   d9e86:	2a00      	cmp	r2, #0
   d9e88:	d1f9      	bne.n	d9e7e <strcpy+0x2>
   d9e8a:	4770      	bx	lr

000d9e8c <strlen>:
   d9e8c:	4603      	mov	r3, r0
   d9e8e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9e92:	2a00      	cmp	r2, #0
   d9e94:	d1fb      	bne.n	d9e8e <strlen+0x2>
   d9e96:	1a18      	subs	r0, r3, r0
   d9e98:	3801      	subs	r0, #1
   d9e9a:	4770      	bx	lr

000d9e9c <strncpy>:
   d9e9c:	b510      	push	{r4, lr}
   d9e9e:	3901      	subs	r1, #1
   d9ea0:	4603      	mov	r3, r0
   d9ea2:	b132      	cbz	r2, d9eb2 <strncpy+0x16>
   d9ea4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9ea8:	f803 4b01 	strb.w	r4, [r3], #1
   d9eac:	3a01      	subs	r2, #1
   d9eae:	2c00      	cmp	r4, #0
   d9eb0:	d1f7      	bne.n	d9ea2 <strncpy+0x6>
   d9eb2:	441a      	add	r2, r3
   d9eb4:	2100      	movs	r1, #0
   d9eb6:	4293      	cmp	r3, r2
   d9eb8:	d100      	bne.n	d9ebc <strncpy+0x20>
   d9eba:	bd10      	pop	{r4, pc}
   d9ebc:	f803 1b01 	strb.w	r1, [r3], #1
   d9ec0:	e7f9      	b.n	d9eb6 <strncpy+0x1a>

000d9ec2 <strnlen>:
   d9ec2:	b510      	push	{r4, lr}
   d9ec4:	4602      	mov	r2, r0
   d9ec6:	4401      	add	r1, r0
   d9ec8:	428a      	cmp	r2, r1
   d9eca:	4613      	mov	r3, r2
   d9ecc:	d101      	bne.n	d9ed2 <strnlen+0x10>
   d9ece:	1a18      	subs	r0, r3, r0
   d9ed0:	bd10      	pop	{r4, pc}
   d9ed2:	781c      	ldrb	r4, [r3, #0]
   d9ed4:	3201      	adds	r2, #1
   d9ed6:	2c00      	cmp	r4, #0
   d9ed8:	d1f6      	bne.n	d9ec8 <strnlen+0x6>
   d9eda:	e7f8      	b.n	d9ece <strnlen+0xc>

000d9edc <strstr>:
   d9edc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9ede:	780c      	ldrb	r4, [r1, #0]
   d9ee0:	b164      	cbz	r4, d9efc <strstr+0x20>
   d9ee2:	4603      	mov	r3, r0
   d9ee4:	781a      	ldrb	r2, [r3, #0]
   d9ee6:	4618      	mov	r0, r3
   d9ee8:	1c5e      	adds	r6, r3, #1
   d9eea:	b90a      	cbnz	r2, d9ef0 <strstr+0x14>
   d9eec:	4610      	mov	r0, r2
   d9eee:	e005      	b.n	d9efc <strstr+0x20>
   d9ef0:	4294      	cmp	r4, r2
   d9ef2:	d108      	bne.n	d9f06 <strstr+0x2a>
   d9ef4:	460d      	mov	r5, r1
   d9ef6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d9efa:	b902      	cbnz	r2, d9efe <strstr+0x22>
   d9efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9efe:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   d9f02:	4297      	cmp	r7, r2
   d9f04:	d0f7      	beq.n	d9ef6 <strstr+0x1a>
   d9f06:	4633      	mov	r3, r6
   d9f08:	e7ec      	b.n	d9ee4 <strstr+0x8>
	...

000d9f0c <_strtol_l.isra.0>:
   d9f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9f10:	4e3a      	ldr	r6, [pc, #232]	; (d9ffc <_strtol_l.isra.0+0xf0>)
   d9f12:	4686      	mov	lr, r0
   d9f14:	468c      	mov	ip, r1
   d9f16:	4660      	mov	r0, ip
   d9f18:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9f1c:	5da5      	ldrb	r5, [r4, r6]
   d9f1e:	f015 0508 	ands.w	r5, r5, #8
   d9f22:	d1f8      	bne.n	d9f16 <_strtol_l.isra.0+0xa>
   d9f24:	2c2d      	cmp	r4, #45	; 0x2d
   d9f26:	d133      	bne.n	d9f90 <_strtol_l.isra.0+0x84>
   d9f28:	f89c 4000 	ldrb.w	r4, [ip]
   d9f2c:	f04f 0801 	mov.w	r8, #1
   d9f30:	f100 0c02 	add.w	ip, r0, #2
   d9f34:	2b00      	cmp	r3, #0
   d9f36:	d05c      	beq.n	d9ff2 <_strtol_l.isra.0+0xe6>
   d9f38:	2b10      	cmp	r3, #16
   d9f3a:	d10c      	bne.n	d9f56 <_strtol_l.isra.0+0x4a>
   d9f3c:	2c30      	cmp	r4, #48	; 0x30
   d9f3e:	d10a      	bne.n	d9f56 <_strtol_l.isra.0+0x4a>
   d9f40:	f89c 0000 	ldrb.w	r0, [ip]
   d9f44:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9f48:	2858      	cmp	r0, #88	; 0x58
   d9f4a:	d14d      	bne.n	d9fe8 <_strtol_l.isra.0+0xdc>
   d9f4c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d9f50:	2310      	movs	r3, #16
   d9f52:	f10c 0c02 	add.w	ip, ip, #2
   d9f56:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d9f5a:	3f01      	subs	r7, #1
   d9f5c:	2600      	movs	r6, #0
   d9f5e:	fbb7 f9f3 	udiv	r9, r7, r3
   d9f62:	4630      	mov	r0, r6
   d9f64:	fb03 7a19 	mls	sl, r3, r9, r7
   d9f68:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d9f6c:	2d09      	cmp	r5, #9
   d9f6e:	d818      	bhi.n	d9fa2 <_strtol_l.isra.0+0x96>
   d9f70:	462c      	mov	r4, r5
   d9f72:	42a3      	cmp	r3, r4
   d9f74:	dd24      	ble.n	d9fc0 <_strtol_l.isra.0+0xb4>
   d9f76:	1c75      	adds	r5, r6, #1
   d9f78:	d007      	beq.n	d9f8a <_strtol_l.isra.0+0x7e>
   d9f7a:	4581      	cmp	r9, r0
   d9f7c:	d31d      	bcc.n	d9fba <_strtol_l.isra.0+0xae>
   d9f7e:	d101      	bne.n	d9f84 <_strtol_l.isra.0+0x78>
   d9f80:	45a2      	cmp	sl, r4
   d9f82:	db1a      	blt.n	d9fba <_strtol_l.isra.0+0xae>
   d9f84:	fb00 4003 	mla	r0, r0, r3, r4
   d9f88:	2601      	movs	r6, #1
   d9f8a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9f8e:	e7eb      	b.n	d9f68 <_strtol_l.isra.0+0x5c>
   d9f90:	2c2b      	cmp	r4, #43	; 0x2b
   d9f92:	bf08      	it	eq
   d9f94:	f89c 4000 	ldrbeq.w	r4, [ip]
   d9f98:	46a8      	mov	r8, r5
   d9f9a:	bf08      	it	eq
   d9f9c:	f100 0c02 	addeq.w	ip, r0, #2
   d9fa0:	e7c8      	b.n	d9f34 <_strtol_l.isra.0+0x28>
   d9fa2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d9fa6:	2d19      	cmp	r5, #25
   d9fa8:	d801      	bhi.n	d9fae <_strtol_l.isra.0+0xa2>
   d9faa:	3c37      	subs	r4, #55	; 0x37
   d9fac:	e7e1      	b.n	d9f72 <_strtol_l.isra.0+0x66>
   d9fae:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d9fb2:	2d19      	cmp	r5, #25
   d9fb4:	d804      	bhi.n	d9fc0 <_strtol_l.isra.0+0xb4>
   d9fb6:	3c57      	subs	r4, #87	; 0x57
   d9fb8:	e7db      	b.n	d9f72 <_strtol_l.isra.0+0x66>
   d9fba:	f04f 36ff 	mov.w	r6, #4294967295
   d9fbe:	e7e4      	b.n	d9f8a <_strtol_l.isra.0+0x7e>
   d9fc0:	1c73      	adds	r3, r6, #1
   d9fc2:	d106      	bne.n	d9fd2 <_strtol_l.isra.0+0xc6>
   d9fc4:	2322      	movs	r3, #34	; 0x22
   d9fc6:	f8ce 3000 	str.w	r3, [lr]
   d9fca:	4638      	mov	r0, r7
   d9fcc:	b942      	cbnz	r2, d9fe0 <_strtol_l.isra.0+0xd4>
   d9fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9fd2:	f1b8 0f00 	cmp.w	r8, #0
   d9fd6:	d000      	beq.n	d9fda <_strtol_l.isra.0+0xce>
   d9fd8:	4240      	negs	r0, r0
   d9fda:	2a00      	cmp	r2, #0
   d9fdc:	d0f7      	beq.n	d9fce <_strtol_l.isra.0+0xc2>
   d9fde:	b10e      	cbz	r6, d9fe4 <_strtol_l.isra.0+0xd8>
   d9fe0:	f10c 31ff 	add.w	r1, ip, #4294967295
   d9fe4:	6011      	str	r1, [r2, #0]
   d9fe6:	e7f2      	b.n	d9fce <_strtol_l.isra.0+0xc2>
   d9fe8:	2430      	movs	r4, #48	; 0x30
   d9fea:	2b00      	cmp	r3, #0
   d9fec:	d1b3      	bne.n	d9f56 <_strtol_l.isra.0+0x4a>
   d9fee:	2308      	movs	r3, #8
   d9ff0:	e7b1      	b.n	d9f56 <_strtol_l.isra.0+0x4a>
   d9ff2:	2c30      	cmp	r4, #48	; 0x30
   d9ff4:	d0a4      	beq.n	d9f40 <_strtol_l.isra.0+0x34>
   d9ff6:	230a      	movs	r3, #10
   d9ff8:	e7ad      	b.n	d9f56 <_strtol_l.isra.0+0x4a>
   d9ffa:	bf00      	nop
   d9ffc:	000daaa2 	.word	0x000daaa2

000da000 <strtol>:
   da000:	4613      	mov	r3, r2
   da002:	460a      	mov	r2, r1
   da004:	4601      	mov	r1, r0
   da006:	4802      	ldr	r0, [pc, #8]	; (da010 <strtol+0x10>)
   da008:	6800      	ldr	r0, [r0, #0]
   da00a:	f7ff bf7f 	b.w	d9f0c <_strtol_l.isra.0>
   da00e:	bf00      	nop
   da010:	2003defc 	.word	0x2003defc

000da014 <dynalib_user>:
   da014:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   da024:	00000000 63736964 656e6e6f 64657463     ....disconnected
   da034:	65727400 68742e6b 6c637765 6d6f632e     .trek.thewcl.com
   da044:	7b002f00 69736422 003a2264 7622202c     ./.{"dsid":., "v
   da054:	65756c61 2c003a22 69742220 7473656d     alue":., "timest
   da064:	22706d61 2c7d003a 64227b00 22617461     amp":.},.{"data"
   da074:	5d005b3a 4f50007d 53005453 75746174     :[.]}.POST.Statu
   da084:	00203a73 79646f42 0a00203a 64657243     s: .Body: ..Cred
   da094:	69746e65 20736c61 20657261 72727563     entials are curr
   da0a4:	6c746e65 74732079 6465726f 726f6620     ently stored for
   da0b4:	005b0a3a 5d000a2c 746e450a 6e207265     :.[.,..].Enter n
   da0c4:	6f777465 53206b72 20444953 616c6228     etwork SSID (bla
   da0d4:	74206b6e 6b73206f 202c7069 656c6327     nk to skip, 'cle
   da0e4:	20277261 72206f74 74657365 65726320     ar' to reset cre
   da0f4:	746e6564 736c6169 00203a29 7275430a     dentials): ..Cur
   da104:	746e6572 49534420 73692044 5d005b20     rent DSID is [.]
   da114:	746e450a 64207265 63697665 53442065     .Enter device DS
   da124:	28204449 6e616c62 6f74206b 696b7320     ID (blank to ski
   da134:	203a2970 656c6300 0a007261 65746e45     p): .clear..Ente
   da144:	656e2072 726f7774 6170206b 6f777373     r network passwo
   da154:	203a6472 430a0a00 65646572 6169746e     rd: ...Credentia
   da164:	7320736c 77207465 20687469 64697373     ls set with ssid
   da174:	0a00203a 73736170 64726f77 0a00203a     : ..password: ..
   da184:	450a000a 7265746e 65742720 20277473     ...Enter 'test' 
   da194:	74206f74 20747365 64657263 69746e65     to test credenti
   da1a4:	20736c61 616c6228 74206b6e 6b73206f     als (blank to sk
   da1b4:	3a297069 65740020 74007473 6f656d69     ip): .test.timeo
   da1c4:	53007475 65636375 0a217373 52524500     ut.Success!..ERR
   da1d4:	203a524f 69466957 6e6f6320 7463656e     OR: WiFi connect
   da1e4:	206e6f69 656d6974 0a74756f 69736400     ion timeout..dsi
   da1f4:	6e652064 65726574 73640064 203a6469     d entered.dsid: 
   da204:	75430a00 6e657272 61762074 2065756c     ..Current value 
   da214:	20726f66 61746164 6c6f6320 7463656c     for data collect
   da224:	206e6f69 65746e69 6c617672 20736920     ion interval is 
   da234:	0a5d005b 65746e45 69742072 6220656d     [.].Enter time b
   da244:	65777465 64206e65 20617461 6c6c6f63     etween data coll
   da254:	69746365 61206e6f 6e612073 746e6920     ection as an int
   da264:	72656765 206e6920 6c6c696d 63657369     eger in millisec
   da274:	73646e6f 6c622820 206b6e61 73206f74     onds (blank to s
   da284:	2970696b 0a00203a 72727543 20746e65     kip): ..Current 
   da294:	756c6176 6f662065 69572072 63206946     value for WiFi c
   da2a4:	656e6e6f 6f697463 6e69206e 76726574     onnection interv
   da2b4:	69206c61 005b2073 6e450a5d 20726574     al is [.].Enter 
   da2c4:	656d6974 74656220 6e656577 46695720     time between WiF
   da2d4:	6f632069 63656e6e 6e6f6974 73612073     i connections as
   da2e4:	206e6120 65746e69 20726567 73206e69      an integer in s
   da2f4:	6e6f6365 28207364 6e616c62 6f74206b     econds (blank to
   da304:	696b7320 203a2970 34453600 30303030      skip): .6E40000
   da314:	35422d31 462d3341 2d333933 39413045     1-B5A3-F393-E0A9
   da324:	3035452d 44343245 39414343 45360045     -E50E24DCCA9E.6E
   da334:	30303034 422d3230 2d334135 33393346     400002-B5A3-F393
   da344:	4130452d 35452d39 34324530 41434344     -E0A9-E50E24DCCA
   da354:	36004539 30303445 2d333030 33413542     9E.6E400003-B5A3
   da364:	3933462d 30452d33 452d3941 32453035     -F393-E0A9-E50E2
   da374:	43434434 00453941 72007874 63410078     4DCCA9E.tx.rx.Ac
   da384:	74706563 70706100 6163696c 6e6f6974     cept.application
   da394:	6f736a2f 6f43006e 6e65746e 79542d74     /json.Content-Ty
   da3a4:	61006570 742d6970 6e656b6f 49504100     pe.api-token.API
   da3b4:	6661652d 632d6565 36356264 3435332d     -eafee-cdb56-354
   da3c4:	332d6435 64376638 53494c00 00484433     5d-38f7d.LIS3DH.

000da3d4 <_ZTV15Adafruit_LIS3DH>:
	...
   da3dc:	000d40b3 000d4f91 000d51ed 000d569d     .@...O...Q...V..
   da3ec:	000d51f1 70747448 65696c43 093e746e     .Q..HttpClient>.
   da3fc:	6e6e6f43 69746365 7420676e 00203a6f     Connecting to: .
   da40c:	70747448 65696c43 093e746e 6e6e6f43     HttpClient>.Conn
   da41c:	69746365 7420676e 5049206f 2000203a     ecting to IP: . 
   da42c:	50545448 302e312f 48000a0d 43707474     HTTP/1.0...HttpC
   da43c:	6e65696c 53093e74 74726174 20666f20     lient>.Start of 
   da44c:	50545448 71655220 74736575 6c63002e     HTTP Request..cl
   da45c:	0065736f 6e6e6f43 69746365 48006e6f     ose.Connection.H
   da46c:	43707474 6e65696c 43093e74 656e6e6f     ttpClient>.Conne
   da47c:	6f697463 6166206e 64656c69 4f48002e     ction failed..HO
   da48c:	43005453 65746e6f 4c2d746e 74676e65     ST.Content-Lengt
   da49c:	74480068 6c437074 746e6569 6e45093e     h.HttpClient>.En
   da4ac:	666f2064 54544820 65522050 73657571     d of HTTP Reques
   da4bc:	0d002e74 7474480a 696c4370 3e746e65     t....HttpClient>
   da4cc:	63655209 69766965 5420676e 74205043     .Receiving TCP t
   da4dc:	736e6172 69746361 6f206e6f 20002066     ransaction of . 
   da4ec:	65747962 48002e73 43707474 6e65696c     bytes..HttpClien
   da4fc:	45093e74 726f7272 6552203a 6e6f7073     t>.Error: Respon
   da50c:	62206573 2079646f 6772616c 74207265     se body larger t
   da51c:	206e6168 66667562 002e7265 74480a0d     han buffer....Ht
   da52c:	6c437074 746e6569 6e45093e 666f2064     tpClient>.End of
   da53c:	50435420 61727420 6361736e 6e6f6974      TCP transaction
   da54c:	0a0d002e 70747448 65696c43 093e746e     ....HttpClient>.
   da55c:	6f727245 54203a72 6f656d69 77207475     Error: Timeout w
   da56c:	656c6968 61657220 676e6964 73657220     hile reading res
   da57c:	736e6f70 0d002e65 7474480a 696c4370     ponse....HttpCli
   da58c:	3e746e65 646e4509 20666f20 50545448     ent>.End of HTTP
   da59c:	73655220 736e6f70 00282065 2e29736d      Response (.ms).
   da5ac:	74744800 696c4370 3e746e65 61745309     .HttpClient>.Sta
   da5bc:	20737574 65646f43 0d00203a 000a0d0a     tus Code: ......
   da5cc:	70747448 65696c43 093e746e 6f727245     HttpClient>.Erro
   da5dc:	43203a72 74276e61 6e696620 54482064     r: Can't find HT
   da5ec:	72205054 6f707365 2065736e 79646f62     TP response body
   da5fc:	0000002e                                ....

000da600 <_ZTVN5spark13EthernetClassE>:
	...
   da608:	000d633f 000d6335 000d632b 000d6321     ?c..5c..+c..!c..
   da618:	000d6315 000d6309 000d8e41 000d8e49     .c...c..A...I...
   da628:	000d62fd 000d62f5 000d62eb 000d62e1     .b...b...b...b..
   da638:	000d8e79                                y...

000da63c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   da63c:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   da64c:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   da65c:	72756769 6f697461 7369206e 766e6920     iguration is inv
   da66c:	64696c61 6977002e 676e6972 656c622e     alid..wiring.ble
   da67c:	61745300 64207472 6f637369 69726576     .Start discoveri
   da68c:	7320676e 69767265 2e736563 65655000     ng services..Pee
   da69c:	65642072 65636976 20736920 7373696d     r device is miss
   da6ac:	21676e69 69614600 2064656c 61206f74     ing!.Failed to a
   da6bc:	6e657070 65702064 43207265 72746e65     ppend peer Centr
   da6cc:	64206c61 63697665 43002e65 656e6e6f     al device..Conne
   da6dc:	64657463 20796220 746e6543 206c6172     cted by Central 
   da6ec:	69766564 002e6563 63736944 656e6e6f     device..Disconne
   da6fc:	64657463 20796220 6f6d6572 64206574     cted by remote d
   da70c:	63697665 44002e65 696c7075 65746163     evice..Duplicate
   da71c:	68632064 63617261 69726574 63697473     d characteristic
   da72c:	6e616320 20746f6e 61206562 64656464      cannot be added
   da73c:	6146002e 64656c69 206f7420 65707061     ..Failed to appe
   da74c:	6c20646e 6c61636f 61686320 74636172     nd local charact
   da75c:	73697265 2e636974 00000000              eristic.....

000da768 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da770:	000d6a45 000d6aa9 000d6cbb 000d6ad3     Ej...j...l...j..
   da780:	000d6a49                                Ij..

000da784 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da78c:	000d6a41 000d6ab7 000d6a43 000d6ad7     Aj...j..Cj...j..
   da79c:	000d6a69                                ij..

000da7a0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da7a8:	000d6a3f 000d6ac5 000d74c9 000d6adb     ?j...j...t...j..
   da7b8:	000d6a89                                .j..

000da7bc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   da7c4:	5f9b34fb 80000080 00001000 00000000     .4._............

000da7d4 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   da7d4:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000da7e4 <_ZN8particle7BleUuid9BASE_UUIDE>:
   da7e4:	5f9b34fb 80000080 00001000 00000000     .4._............
   da7f4:	006e616e 00666e69 0066766f 00707061     nan.inf.ovf.app.
   da804:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   da814:	007a2553 74637361 00656d69              S%z.asctime.

000da820 <_ZTV9IPAddress>:
	...
   da828:	000d836f 000d835f 000d8361              o..._...a...

000da834 <_ZTV9USBSerial>:
	...
   da83c:	000d847d 000d84e5 000d84bb 000d7eb5     }............~..
   da84c:	000d84ad 000d847f 000d848f 000d84df     ................
   da85c:	000d849f 000d8479                       ....y...

000da864 <_ZTV11USARTSerial>:
	...
   da86c:	000d8589 000d85f5 000d85cd 000d7eb5     .............~..
   da87c:	000d859d 000d85b9 000d85ab 000d85c7     ................
   da88c:	000d858b 000d858f                       ........

000da894 <_ZTV7TwoWire>:
	...
   da89c:	000d8685 000d86cf 000d86a7 000d8687     ................
   da8ac:	000d86af 000d86b7 000d86bf 000d86c7     ................
   da8bc:	76636572 72726520 3d20726f 00642520     recv error = %d.

000da8cc <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da8d4:	000d880b 000d882d 000d8c47 000d883b     ....-...G...;...
   da8e4:	000d880d                                ....

000da8e8 <_ZTV9TCPClient>:
	...
   da8f0:	000d88b9 000d88ed 000d8789 000d87a3     ................
   da900:	000d8add 000d894f 000d8921 000d87cd     ....O...!.......
   da910:	000d89e7 000d8c4d 000d8983 000d8b91     ....M...........
   da920:	000d87cf 000d8801 000d87b5 000d883f     ............?...
   da930:	000d8901                                ....

000da934 <_ZTVN5spark9WiFiClassE>:
	...
   da93c:	000d8dbd 000d8db3 000d8da9 000d8d77     ............w...
   da94c:	000d4191 000d419d 000d8e41 000d8e49     .A...A..A...I...
   da95c:	000d8d9d 000d8d95 000d8d8b 000d8d81     ................
   da96c:	000d8e79                                y...

000da970 <_ZTVN5spark12NetworkClassE>:
	...
   da978:	000d8e01 000d8e0b 000d8e15 000d8e1f     ................
   da988:	000d8e29 000d8e35 000d8e41 000d8e49     )...5...A...I...
   da998:	000d8e51 000d8e5d 000d8e65 000d8e6f     Q...]...e...o...
   da9a8:	000d8e79                                y...

000da9ac <_ZSt7nothrow>:
	...

000da9ad <_ZTSSt19_Sp_make_shared_tag>:
   da9ad:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   da9bd:	5f646572 00676174                        red_tag....

000da9c8 <_ZTISt19_Sp_make_shared_tag>:
   da9c8:	000daa08 000da9ad                       ........

000da9d0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   da9d0:	000daa68 000da9dc 000daa8c              h...........

000da9dc <_ZTSN10__cxxabiv117__class_type_infoE>:
   da9dc:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   da9ec:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   da9fc:	00000045                                E...

000daa00 <_ZTVN10__cxxabiv117__class_type_infoE>:
   daa00:	00000000 000da9d0 000d9179 000d918d     ........y.......
   daa10:	000d9321 000d9321 000d91f7 000d9139     !...!.......9...
   daa20:	000d91df 000d91a1 000d916d              ........m...

000daa2c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   daa2c:	000daa68 000daa38 000da9d0              h...8.......

000daa38 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   daa38:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   daa48:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   daa58:	456f666e 00000000                       nfoE....

000daa60 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   daa60:	00000000 000daa2c 000d9221 000d9235     ....,...!...5...
   daa70:	000d9321 000d9321 000d91f7 000d9139     !...!.......9...
   daa80:	000d92f5 000d9281 000d9249              ........I...

000daa8c <_ZTISt9type_info>:
   daa8c:	000daa08 000daa94                       ........

000daa94 <_ZTSSt9type_info>:
   daa94:	74397453 5f657079 6f666e69               St9type_info.

000daaa1 <_ctype_>:
   daaa1:	20202000 20202020 28282020 20282828     .         ((((( 
   daab1:	20202020 20202020 20202020 20202020                     
   daac1:	10108820 10101010 10101010 10101010      ...............
   daad1:	04040410 04040404 10040404 10101010     ................
   daae1:	41411010 41414141 01010101 01010101     ..AAAAAA........
   daaf1:	01010101 01010101 01010101 10101010     ................
   dab01:	42421010 42424242 02020202 02020202     ..BBBBBB........
   dab11:	02020202 02020202 02020202 10101010     ................
   dab21:	00000020 00000000 00000000 00000000      ...............
	...

000daba2 <link_const_variable_data_end>:
	...

000daba4 <link_constructors_location>:
   daba4:	000d4fa1 	.word	0x000d4fa1
   daba8:	000d6349 	.word	0x000d6349
   dabac:	000d65bd 	.word	0x000d65bd
   dabb0:	000d7e8d 	.word	0x000d7e8d
   dabb4:	000d814d 	.word	0x000d814d
   dabb8:	000d81d1 	.word	0x000d81d1
   dabbc:	000d81f9 	.word	0x000d81f9
   dabc0:	000d8ded 	.word	0x000d8ded
   dabc4:	000d8f59 	.word	0x000d8f59

000dabc8 <link_constructors_end>:
	...
