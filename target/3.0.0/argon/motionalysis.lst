
c:/Users/Arjun/Documents/GitHub/motionalysis/target/3.0.0/argon/motionalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000070f4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000db110  000db110  0000b110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000db118  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  2003deb4  000db11c  0001deb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008a8  2003df48  2003df48  0002df48  2**2
                  ALLOC
  7 .module_info_suffix 0000002c  000db1b0  000db1b0  0002b1b0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000db1dc  000db1dc  0002b1dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001aff24  00000000  00000000  0002b1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00019369  00000000  00000000  001db104  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003c2b9  00000000  00000000  001f446d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000034a8  00000000  00000000  00230726  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000aa08  00000000  00000000  00233bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003c368  00000000  00000000  0023e5d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00043293  00000000  00000000  0027a93e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00132a98  00000000  00000000  002bdbd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00009384  00000000  00000000  003f066c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
   d4022:	b508      	push	{r3, lr}
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f006 f941 	bl	da2b4 <memcpy>
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f006 f963 	bl	da304 <memset>
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003deb4 	.word	0x2003deb4
   d4048:	000db11c 	.word	0x000db11c
   d404c:	2003df48 	.word	0x2003df48
   d4050:	2003df48 	.word	0x2003df48
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
   d4058:	b570      	push	{r4, r5, r6, lr}
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d405e:	f004 fa5b 	bl	d8518 <module_user_init_hook>
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
   d406c:	bd70      	pop	{r4, r5, r6, pc}
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000db0e8 	.word	0x000db0e8
   d407c:	000db10c 	.word	0x000db10c

000d4080 <module_user_setup>:
   d4080:	f000 b8ea 	b.w	d4258 <setup>

000d4084 <module_user_loop>:
   d4084:	b508      	push	{r3, lr}
   d4086:	f000 f9e5 	bl	d4454 <loop>
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d408e:	f004 ba05 	b.w	d849c <_post_loop>

000d4092 <_Znwj>:
   d4092:	f002 b99f 	b.w	d63d4 <malloc>

000d4096 <_Znaj>:
   d4096:	f002 b99d 	b.w	d63d4 <malloc>

000d409a <_ZdlPv>:
   d409a:	f002 b9a3 	b.w	d63e4 <free>

000d409e <__cxa_guard_acquire>:
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   d40ae:	4770      	bx	lr

000d40b0 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   d40b0:	b510      	push	{r4, lr}
   d40b2:	4604      	mov	r4, r0
   d40b4:	3004      	adds	r0, #4
   d40b6:	f002 fc4d 	bl	d6954 <_ZN6StringD1Ev>
   d40ba:	4620      	mov	r0, r4
   d40bc:	bd10      	pop	{r4, pc}

000d40be <_ZN14http_request_tD1Ev>:
} http_request_t;
   d40be:	b510      	push	{r4, lr}
   d40c0:	4604      	mov	r4, r0
   d40c2:	303c      	adds	r0, #60	; 0x3c
   d40c4:	f002 fc46 	bl	d6954 <_ZN6StringD1Ev>
   d40c8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d40cc:	f002 fc42 	bl	d6954 <_ZN6StringD1Ev>
   d40d0:	4620      	mov	r0, r4
   d40d2:	f002 fc3f 	bl	d6954 <_ZN6StringD1Ev>
   d40d6:	4620      	mov	r0, r4
   d40d8:	bd10      	pop	{r4, pc}
	...

000d40dc <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv>:

  count++;
}

//d7 led turns on when ble connected
void connectCallback(const BlePeerDevice& peer, void* context){
   d40dc:	b508      	push	{r3, lr}
  count = 0;
   d40de:	4b07      	ldr	r3, [pc, #28]	; (d40fc <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x20>)
   d40e0:	2200      	movs	r2, #0
   d40e2:	601a      	str	r2, [r3, #0]
  Serial.println("connected");
   d40e4:	f004 fb48 	bl	d8778 <_Z16_fetch_usbserialv>
   d40e8:	4905      	ldr	r1, [pc, #20]	; (d4100 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x24>)
   d40ea:	f004 f846 	bl	d817a <_ZN5Print7printlnEPKc>
  digitalWrite(D7, HIGH);
}
   d40ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(D7, HIGH);
   d40f2:	2101      	movs	r1, #1
   d40f4:	2007      	movs	r0, #7
   d40f6:	f005 b8b8 	b.w	d926a <digitalWrite>
   d40fa:	bf00      	nop
   d40fc:	2003dfb0 	.word	0x2003dfb0
   d4100:	000da51f 	.word	0x000da51f

000d4104 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv>:

//d7 led turns off when ble disconnected
void disconnectCallback(const BlePeerDevice& peer, void* context){
   d4104:	b508      	push	{r3, lr}
  Serial.println("disconnected");
   d4106:	f004 fb37 	bl	d8778 <_Z16_fetch_usbserialv>
   d410a:	4904      	ldr	r1, [pc, #16]	; (d411c <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   d410c:	f004 f835 	bl	d817a <_ZN5Print7printlnEPKc>
  digitalWrite(D7, LOW);
   d4110:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(D7, LOW);
   d4114:	2100      	movs	r1, #0
   d4116:	2007      	movs	r0, #7
   d4118:	f005 b8a7 	b.w	d926a <digitalWrite>
   d411c:	000da51c 	.word	0x000da51c

000d4120 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d4120:	b538      	push	{r3, r4, r5, lr}
   d4122:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d4124:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d4126:	b128      	cbz	r0, d4134 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d4128:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d412a:	210c      	movs	r1, #12
   d412c:	f005 f925 	bl	d937a <_ZdlPvj>
            wakeupSource = next;
   d4130:	4628      	mov	r0, r5
        while (wakeupSource) {
   d4132:	e7f8      	b.n	d4126 <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d4134:	4620      	mov	r0, r4
   d4136:	bd38      	pop	{r3, r4, r5, pc}

000d4138 <_ZN11SystemClass14updatesEnabledEv.isra.0>:

    inline uint8_t updatesPending() {
        return get_flag(SYSTEM_FLAG_OTA_UPDATE_PENDING) != 0;
    }

    inline uint8_t updatesEnabled() {
   d4138:	b507      	push	{r0, r1, r2, lr}

private:
    SystemSleepResult systemSleepResult_;

    static inline uint8_t get_flag(system_flag_t flag) {
        uint8_t value = 0;
   d413a:	2200      	movs	r2, #0
        system_get_flag(flag, &value, nullptr);
   d413c:	f10d 0107 	add.w	r1, sp, #7
   d4140:	2001      	movs	r0, #1
        uint8_t value = 0;
   d4142:	f88d 2007 	strb.w	r2, [sp, #7]
        system_get_flag(flag, &value, nullptr);
   d4146:	f002 f85f 	bl	d6208 <system_get_flag>
        return value;
   d414a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    }
   d414e:	3800      	subs	r0, #0
   d4150:	bf18      	it	ne
   d4152:	2001      	movne	r0, #1
   d4154:	b003      	add	sp, #12
   d4156:	f85d fb04 	ldr.w	pc, [sp], #4

000d415a <_ZN10CloudClass8syncTimeEv.isra.0>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   d415a:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d415c:	f002 f90a 	bl	d6374 <spark_cloud_flag_connected>
        if (!connected()) {
   d4160:	b120      	cbz	r0, d416c <_ZN10CloudClass8syncTimeEv.isra.0+0x12>
    }
   d4162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return spark_sync_time(NULL);
   d4166:	2000      	movs	r0, #0
   d4168:	f002 b90c 	b.w	d6384 <spark_sync_time>
    }
   d416c:	bd08      	pop	{r3, pc}

000d416e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>:
    EEPtr begin()                        { return 0x00; }
    EEPtr end()                          { return length(); } //Standards requires this to be the item after the last valid entry. The returned pointer is invalid.
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
   d416e:	b510      	push	{r4, lr}
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4170:	2204      	movs	r2, #4
    template <typename T> T &get( int idx, T &t )
   d4172:	460c      	mov	r4, r1
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4174:	f001 fddc 	bl	d5d30 <HAL_EEPROM_Get>
        return t;
    }
   d4178:	4620      	mov	r0, r4
   d417a:	bd10      	pop	{r4, pc}

000d417c <_ZN10HttpClientD1Ev>:

class HttpClient {
   d417c:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d417e:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4180:	4b0a      	ldr	r3, [pc, #40]	; (d41ac <_ZN10HttpClientD1Ev+0x30>)
   d4182:	6003      	str	r3, [r0, #0]
   d4184:	4605      	mov	r5, r0
   d4186:	b17c      	cbz	r4, d41a8 <_ZN10HttpClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4188:	6863      	ldr	r3, [r4, #4]
   d418a:	3b01      	subs	r3, #1
   d418c:	6063      	str	r3, [r4, #4]
   d418e:	b95b      	cbnz	r3, d41a8 <_ZN10HttpClientD1Ev+0x2c>
          _M_dispose();
   d4190:	6823      	ldr	r3, [r4, #0]
   d4192:	4620      	mov	r0, r4
   d4194:	689b      	ldr	r3, [r3, #8]
   d4196:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4198:	68a3      	ldr	r3, [r4, #8]
   d419a:	3b01      	subs	r3, #1
   d419c:	60a3      	str	r3, [r4, #8]
   d419e:	b91b      	cbnz	r3, d41a8 <_ZN10HttpClientD1Ev+0x2c>
            _M_destroy();
   d41a0:	6823      	ldr	r3, [r4, #0]
   d41a2:	4620      	mov	r0, r4
   d41a4:	68db      	ldr	r3, [r3, #12]
   d41a6:	4798      	blx	r3
   d41a8:	4628      	mov	r0, r5
   d41aa:	bd38      	pop	{r3, r4, r5, pc}
   d41ac:	000dae34 	.word	0x000dae34

000d41b0 <_ZN11SystemClassD1Ev>:
class SystemClass {
   d41b0:	b510      	push	{r4, lr}
   d41b2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d41b4:	6800      	ldr	r0, [r0, #0]
   d41b6:	b108      	cbz	r0, d41bc <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41b8:	f002 f914 	bl	d63e4 <free>
class SystemClass {
   d41bc:	4620      	mov	r0, r4
   d41be:	bd10      	pop	{r4, pc}

000d41c0 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d41c0:	2300      	movs	r3, #0
   d41c2:	6840      	ldr	r0, [r0, #4]
   d41c4:	461a      	mov	r2, r3
   d41c6:	4619      	mov	r1, r3
   d41c8:	f002 b86c 	b.w	d62a4 <network_on>

000d41cc <_ZN5spark9WiFiClass3offEv>:
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d41cc:	2300      	movs	r3, #0
   d41ce:	6840      	ldr	r0, [r0, #4]
   d41d0:	461a      	mov	r2, r3
   d41d2:	4619      	mov	r1, r3
   d41d4:	f002 b86e 	b.w	d62b4 <network_off>

000d41d8 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d41d8:	2300      	movs	r3, #0
   d41da:	6840      	ldr	r0, [r0, #4]
   d41dc:	461a      	mov	r2, r3
   d41de:	f002 b841 	b.w	d6264 <network_connect>

000d41e2 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d41e2:	2200      	movs	r2, #0
   d41e4:	6840      	ldr	r0, [r0, #4]
   d41e6:	4611      	mov	r1, r2
   d41e8:	f002 b854 	b.w	d6294 <network_ready>

000d41ec <_ZN8particle24SystemSleepConfiguration8durationEm>:
            gpio(pins[i], mode);
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d41ec:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d41ee:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d41f0:	4605      	mov	r5, r0
   d41f2:	460e      	mov	r6, r1
        if (valid_) {
   d41f4:	b1cb      	cbz	r3, d422a <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d41f6:	6803      	ldr	r3, [r0, #0]
   d41f8:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d41fa:	b123      	cbz	r3, d4206 <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d41fc:	889a      	ldrh	r2, [r3, #4]
   d41fe:	2a04      	cmp	r2, #4
   d4200:	d017      	beq.n	d4232 <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d4202:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4204:	e7f9      	b.n	d41fa <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4206:	490c      	ldr	r1, [pc, #48]	; (d4238 <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d4208:	2010      	movs	r0, #16
   d420a:	f005 f8b8 	bl	d937e <_ZnwjRKSt9nothrow_t>
   d420e:	4604      	mov	r4, r0
   d4210:	b168      	cbz	r0, d422e <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d4212:	2210      	movs	r2, #16
   d4214:	2100      	movs	r1, #0
   d4216:	f006 f875 	bl	da304 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d421a:	4b08      	ldr	r3, [pc, #32]	; (d423c <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d421c:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d421e:	2304      	movs	r3, #4
   d4220:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4222:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4224:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d4226:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d422a:	4628      	mov	r0, r5
   d422c:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d422e:	7528      	strb	r0, [r5, #20]
                return *this;
   d4230:	e7fb      	b.n	d422a <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4232:	60de      	str	r6, [r3, #12]
                return *this;
   d4234:	e7f9      	b.n	d422a <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d4236:	bf00      	nop
   d4238:	000daef0 	.word	0x000daef0
   d423c:	00030010 	.word	0x00030010

000d4240 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   d4240:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4242:	f001 fd65 	bl	d5d10 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4246:	4b03      	ldr	r3, [pc, #12]	; (d4254 <_ZN10CloudClass7processEv+0x14>)
   d4248:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d424a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   d424e:	f002 b881 	b.w	d6354 <spark_process>
   d4252:	bf00      	nop
   d4254:	2003e7cc 	.word	0x2003e7cc

000d4258 <setup>:
void setup() {
   d4258:	b510      	push	{r4, lr}
   d425a:	b096      	sub	sp, #88	; 0x58
  System.updatesEnabled();
   d425c:	f7ff ff6c 	bl	d4138 <_ZN11SystemClass14updatesEnabledEv.isra.0>
  EEPROM.get(200, wifiTimeLeft);
   d4260:	f005 f830 	bl	d92c4 <_Z21__fetch_global_EEPROMv>
   d4264:	494c      	ldr	r1, [pc, #304]	; (d4398 <setup+0x140>)
   d4266:	20c8      	movs	r0, #200	; 0xc8
   d4268:	f7ff ff81 	bl	d416e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
        if (valid_) {
   d426c:	4b4b      	ldr	r3, [pc, #300]	; (d439c <setup+0x144>)
   d426e:	7d1a      	ldrb	r2, [r3, #20]
   d4270:	b10a      	cbz	r2, d4276 <setup+0x1e>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4272:	2202      	movs	r2, #2
   d4274:	721a      	strb	r2, [r3, #8]
  config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(1000 - SLEEP_DELAY);
   d4276:	f240 31a2 	movw	r1, #930	; 0x3a2
   d427a:	4848      	ldr	r0, [pc, #288]	; (d439c <setup+0x144>)
  request.hostname = "trek.thewcl.com";
   d427c:	4c48      	ldr	r4, [pc, #288]	; (d43a0 <setup+0x148>)
  config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(1000 - SLEEP_DELAY);
   d427e:	f7ff ffb5 	bl	d41ec <_ZN8particle24SystemSleepConfiguration8durationEm>
  Serial.begin(9600);
   d4282:	f004 fa79 	bl	d8778 <_Z16_fetch_usbserialv>
   d4286:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d428a:	f004 fa69 	bl	d8760 <_ZN9USBSerial5beginEl>
  lis.begin(0x18);
   d428e:	2118      	movs	r1, #24
   d4290:	4844      	ldr	r0, [pc, #272]	; (d43a4 <setup+0x14c>)
   d4292:	f001 f97e 	bl	d5592 <_ZN15Adafruit_LIS3DH5beginEh>
  Wire.end();
   d4296:	f005 f843 	bl	d9320 <_Z19__fetch_global_Wirev>
   d429a:	f004 fb59 	bl	d8950 <_ZN7TwoWire3endEv>
  lis.begin(I2C_ADDRESS);
   d429e:	2119      	movs	r1, #25
   d42a0:	4840      	ldr	r0, [pc, #256]	; (d43a4 <setup+0x14c>)
   d42a2:	f001 f976 	bl	d5592 <_ZN15Adafruit_LIS3DH5beginEh>
  lis.setRange(LIS3DH_RANGE_16_G);
   d42a6:	483f      	ldr	r0, [pc, #252]	; (d43a4 <setup+0x14c>)
   d42a8:	2103      	movs	r1, #3
   d42aa:	f001 f949 	bl	d5540 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>
  lis.setDataRate(LIS3DH_DATARATE_100_HZ);
   d42ae:	483d      	ldr	r0, [pc, #244]	; (d43a4 <setup+0x14c>)
   d42b0:	2105      	movs	r1, #5
   d42b2:	f001 f95d 	bl	d5570 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  pinMode(SDO_OUTPUT_PIN, OUTPUT);
   d42b6:	2101      	movs	r1, #1
   d42b8:	2008      	movs	r0, #8
   d42ba:	f004 ffc5 	bl	d9248 <pinMode>
  digitalWrite(SDO_OUTPUT_PIN, HIGH);
   d42be:	2101      	movs	r1, #1
   d42c0:	2008      	movs	r0, #8
   d42c2:	f004 ffd2 	bl	d926a <digitalWrite>
  request.hostname = "trek.thewcl.com";
   d42c6:	4938      	ldr	r1, [pc, #224]	; (d43a8 <setup+0x150>)
   d42c8:	4620      	mov	r0, r4
   d42ca:	f002 fbd6 	bl	d6a7a <_ZN6StringaSEPKc>
  request.port = 3000;
   d42ce:	f640 33b8 	movw	r3, #3000	; 0xbb8
  request.path = "/";
   d42d2:	4936      	ldr	r1, [pc, #216]	; (d43ac <setup+0x154>)
  request.port = 3000;
   d42d4:	63a3      	str	r3, [r4, #56]	; 0x38
  request.path = "/";
   d42d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d42da:	f002 fbce 	bl	d6a7a <_ZN6StringaSEPKc>
  BLE.on();
   d42de:	f003 f8fd 	bl	d74dc <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42e2:	f003 f949 	bl	d7578 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   d42e6:	f003 f8f9 	bl	d74dc <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42ea:	4a31      	ldr	r2, [pc, #196]	; (d43b0 <setup+0x158>)
   d42ec:	4601      	mov	r1, r0
   d42ee:	a80d      	add	r0, sp, #52	; 0x34
   d42f0:	f003 fde6 	bl	d7ec0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d42f4:	a80d      	add	r0, sp, #52	; 0x34
   d42f6:	f003 f9de 	bl	d76b6 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   d42fa:	f003 f8ef 	bl	d74dc <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42fe:	4a2d      	ldr	r2, [pc, #180]	; (d43b4 <setup+0x15c>)
   d4300:	4601      	mov	r1, r0
   d4302:	a80d      	add	r0, sp, #52	; 0x34
   d4304:	f003 fddc 	bl	d7ec0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4308:	a80d      	add	r0, sp, #52	; 0x34
   d430a:	f003 f9d4 	bl	d76b6 <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   d430e:	a80d      	add	r0, sp, #52	; 0x34
   d4310:	f002 ff5f 	bl	d71d2 <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   d4314:	4928      	ldr	r1, [pc, #160]	; (d43b8 <setup+0x160>)
   d4316:	a803      	add	r0, sp, #12
   d4318:	f002 fe5e 	bl	d6fd8 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d431c:	a903      	add	r1, sp, #12
   d431e:	a808      	add	r0, sp, #32
   d4320:	f002 fe5a 	bl	d6fd8 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4324:	a808      	add	r0, sp, #32
   d4326:	f002 fe9d 	bl	d7064 <_ZNK8particle7BleUuid4typeEv>
   d432a:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d432c:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   d432e:	bb54      	cbnz	r4, d4386 <setup+0x12e>
            uint16_t uuid16 = tempUUID.shorted();
   d4330:	f002 feb7 	bl	d70a2 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4334:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d4336:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d433a:	2302      	movs	r3, #2
   d433c:	f10d 020a 	add.w	r2, sp, #10
   d4340:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d4342:	a80d      	add	r0, sp, #52	; 0x34
   d4344:	f002 ff3a 	bl	d71bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   d4348:	f003 f8c8 	bl	d74dc <_ZN8particle14BleLocalDevice11getInstanceEv>
   d434c:	a90d      	add	r1, sp, #52	; 0x34
   d434e:	2200      	movs	r2, #0
   d4350:	f003 f932 	bl	d75b8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  BLE.onConnected(connectCallback);
   d4354:	f003 f8c2 	bl	d74dc <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4358:	4918      	ldr	r1, [pc, #96]	; (d43bc <setup+0x164>)
   d435a:	2200      	movs	r2, #0
   d435c:	f003 fca6 	bl	d7cac <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
  BLE.onDisconnected(disconnectCallback);
   d4360:	f003 f8bc 	bl	d74dc <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4364:	2200      	movs	r2, #0
   d4366:	4916      	ldr	r1, [pc, #88]	; (d43c0 <setup+0x168>)
   d4368:	f003 fcb6 	bl	d7cd8 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
  pinMode(D7, OUTPUT);
   d436c:	2101      	movs	r1, #1
   d436e:	2007      	movs	r0, #7
   d4370:	f004 ff6a 	bl	d9248 <pinMode>
  count = 0;
   d4374:	4b13      	ldr	r3, [pc, #76]	; (d43c4 <setup+0x16c>)
   d4376:	2200      	movs	r2, #0
   d4378:	601a      	str	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d437a:	f001 fcc9 	bl	d5d10 <HAL_Timer_Get_Milli_Seconds>
  time1 = millis();
   d437e:	4b12      	ldr	r3, [pc, #72]	; (d43c8 <setup+0x170>)
   d4380:	6018      	str	r0, [r3, #0]
}
   d4382:	b016      	add	sp, #88	; 0x58
   d4384:	bd10      	pop	{r4, pc}
   d4386:	f002 fe91 	bl	d70ac <_ZNK8particle7BleUuid8rawBytesEv>
   d438a:	2300      	movs	r3, #0
   d438c:	9300      	str	r3, [sp, #0]
   d438e:	4602      	mov	r2, r0
   d4390:	2310      	movs	r3, #16
   d4392:	2107      	movs	r1, #7
   d4394:	e7d5      	b.n	d4342 <setup+0xea>
   d4396:	bf00      	nop
   d4398:	2003e62c 	.word	0x2003e62c
   d439c:	2003df98 	.word	0x2003df98
   d43a0:	2003e57c 	.word	0x2003e57c
   d43a4:	2003e3e4 	.word	0x2003e3e4
   d43a8:	000da529 	.word	0x000da529
   d43ac:	000da539 	.word	0x000da539
   d43b0:	2003e610 	.word	0x2003e610
   d43b4:	2003e5dc 	.word	0x2003e5dc
   d43b8:	2003df58 	.word	0x2003df58
   d43bc:	000d40dd 	.word	0x000d40dd
   d43c0:	000d4105 	.word	0x000d4105
   d43c4:	2003dfb0 	.word	0x2003dfb0
   d43c8:	2003e604 	.word	0x2003e604

000d43cc <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d43cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d43ce:	4616      	mov	r6, r2
   d43d0:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d43d2:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d43d4:	e9c0 2200 	strd	r2, r2, [r0]
   d43d8:	4604      	mov	r4, r0
   d43da:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d43dc:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d43de:	4619      	mov	r1, r3
   d43e0:	a806      	add	r0, sp, #24
   d43e2:	f002 fdf9 	bl	d6fd8 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d43e6:	9916      	ldr	r1, [sp, #88]	; 0x58
   d43e8:	4638      	mov	r0, r7
   d43ea:	f002 fdf5 	bl	d6fd8 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d43ee:	7833      	ldrb	r3, [r6, #0]
   d43f0:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d43f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d43f6:	9302      	str	r3, [sp, #8]
   d43f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d43fa:	4620      	mov	r0, r4
   d43fc:	e9cd 7300 	strd	r7, r3, [sp]
   d4400:	aa05      	add	r2, sp, #20
   d4402:	ab06      	add	r3, sp, #24
   d4404:	4629      	mov	r1, r5
   d4406:	f003 fbed 	bl	d7be4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d440a:	4620      	mov	r0, r4
   d440c:	b011      	add	sp, #68	; 0x44
   d440e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4410 <_ZN5Print7printlnIiLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   d4410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4412:	4605      	mov	r5, r0
   d4414:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d4416:	4616      	mov	r6, r2
   d4418:	b94a      	cbnz	r2, d442e <_ZN5Print7printlnIiLi0EEEjT_i+0x1e>
        return write(n);
   d441a:	6803      	ldr	r3, [r0, #0]
   d441c:	b2c9      	uxtb	r1, r1
   d441e:	689b      	ldr	r3, [r3, #8]
   d4420:	4798      	blx	r3
   d4422:	4607      	mov	r7, r0
        n += println();
   d4424:	4628      	mov	r0, r5
   d4426:	f003 fe9c 	bl	d8162 <_ZN5Print7printlnEv>
    }
   d442a:	4438      	add	r0, r7
   d442c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d442e:	2900      	cmp	r1, #0
   d4430:	da0c      	bge.n	d444c <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
   d4432:	2a0a      	cmp	r2, #10
   d4434:	d10a      	bne.n	d444c <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
            t = print('-');
   d4436:	212d      	movs	r1, #45	; 0x2d
   d4438:	f003 fe8a 	bl	d8150 <_ZN5Print5printEc>
            val = -n;
   d443c:	4261      	negs	r1, r4
            t = print('-');
   d443e:	4607      	mov	r7, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4440:	b2f2      	uxtb	r2, r6
   d4442:	4628      	mov	r0, r5
   d4444:	f003 fea3 	bl	d818e <_ZN5Print11printNumberEmh>
   d4448:	4407      	add	r7, r0
   d444a:	e7eb      	b.n	d4424 <_ZN5Print7printlnIiLi0EEEjT_i+0x14>
            val = n;
   d444c:	4621      	mov	r1, r4
        size_t t = 0;
   d444e:	2700      	movs	r7, #0
   d4450:	e7f6      	b.n	d4440 <_ZN5Print7printlnIiLi0EEEjT_i+0x30>
	...

000d4454 <loop>:
void loop() {
   d4454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(ota){
   d4458:	4c09      	ldr	r4, [pc, #36]	; (d4480 <loop+0x2c>)
void loop() {
   d445a:	b097      	sub	sp, #92	; 0x5c
  Particle.process();
   d445c:	f7ff fef0 	bl	d4240 <_ZN10CloudClass7processEv>
  if(ota){
   d4460:	7825      	ldrb	r5, [r4, #0]
   d4462:	b17d      	cbz	r5, d4484 <loop+0x30>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4464:	f001 ff86 	bl	d6374 <spark_cloud_flag_connected>
    while(!Particle.connected()){
   d4468:	b920      	cbnz	r0, d4474 <loop+0x20>
      Particle.process();
   d446a:	f7ff fee9 	bl	d4240 <_ZN10CloudClass7processEv>
        spark_cloud_flag_connect();
   d446e:	f001 ff79 	bl	d6364 <spark_cloud_flag_connect>
    }
   d4472:	e7f7      	b.n	d4464 <loop+0x10>
    ota = false;
   d4474:	2300      	movs	r3, #0
   d4476:	7023      	strb	r3, [r4, #0]
    while(true){Particle.process();}
   d4478:	f7ff fee2 	bl	d4240 <_ZN10CloudClass7processEv>
   d447c:	e7fc      	b.n	d4478 <loop+0x24>
   d447e:	bf00      	nop
   d4480:	2003e53c 	.word	0x2003e53c
   d4484:	f001 fc44 	bl	d5d10 <HAL_Timer_Get_Milli_Seconds>
  time2 = millis();
   d4488:	4bbe      	ldr	r3, [pc, #760]	; (d4784 <loop+0x330>)
   d448a:	6018      	str	r0, [r3, #0]
  if(bleInput | ((time2 - CONFIG_WAIT_TIME >= time1) && WiFi.hasCredentials() && !(BLE.connected()))){
   d448c:	4bbe      	ldr	r3, [pc, #760]	; (d4788 <loop+0x334>)
   d448e:	f5a0 40ea 	sub.w	r0, r0, #29952	; 0x7500
   d4492:	681b      	ldr	r3, [r3, #0]
   d4494:	382f      	subs	r0, #47	; 0x2f
   d4496:	4298      	cmp	r0, r3
   d4498:	f300 8234 	bgt.w	d4904 <loop+0x4b0>
   d449c:	4bbb      	ldr	r3, [pc, #748]	; (d478c <loop+0x338>)
   d449e:	781b      	ldrb	r3, [r3, #0]
   d44a0:	2b00      	cmp	r3, #0
   d44a2:	f000 822c 	beq.w	d48fe <loop+0x4aa>
    if(!timeFix){
   d44a6:	4cba      	ldr	r4, [pc, #744]	; (d4790 <loop+0x33c>)
   d44a8:	7825      	ldrb	r5, [r4, #0]
   d44aa:	bb2d      	cbnz	r5, d44f8 <loop+0xa4>
      Particle.process();
   d44ac:	f7ff fec8 	bl	d4240 <_ZN10CloudClass7processEv>
      WiFi.on();
   d44b0:	48b8      	ldr	r0, [pc, #736]	; (d4794 <loop+0x340>)
   d44b2:	f7ff fe85 	bl	d41c0 <_ZN5spark9WiFiClass2onEv>
      WiFi.connect();
   d44b6:	4629      	mov	r1, r5
   d44b8:	48b6      	ldr	r0, [pc, #728]	; (d4794 <loop+0x340>)
      while(!WiFi.ready()){}
   d44ba:	4db6      	ldr	r5, [pc, #728]	; (d4794 <loop+0x340>)
      WiFi.connect();
   d44bc:	f7ff fe8c 	bl	d41d8 <_ZN5spark9WiFiClass7connectEj>
      while(!WiFi.ready()){}
   d44c0:	4628      	mov	r0, r5
   d44c2:	f7ff fe8e 	bl	d41e2 <_ZN5spark9WiFiClass5readyEv>
   d44c6:	2800      	cmp	r0, #0
   d44c8:	d0fa      	beq.n	d44c0 <loop+0x6c>
        spark_cloud_flag_connect();
   d44ca:	f001 ff4b 	bl	d6364 <spark_cloud_flag_connect>
      Particle.syncTime();
   d44ce:	f7ff fe44 	bl	d415a <_ZN10CloudClass8syncTimeEv.isra.0>
      delay(5000);
   d44d2:	f241 3088 	movw	r0, #5000	; 0x1388
   d44d6:	f003 ffa7 	bl	d8428 <delay>
      Particle.process();
   d44da:	f7ff feb1 	bl	d4240 <_ZN10CloudClass7processEv>
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
   d44de:	2300      	movs	r3, #0
      Particle.disconnect();
   d44e0:	a812      	add	r0, sp, #72	; 0x48
   d44e2:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
   d44e6:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
   d44ea:	f004 f847 	bl	d857c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
      WiFi.off();
   d44ee:	48a9      	ldr	r0, [pc, #676]	; (d4794 <loop+0x340>)
   d44f0:	f7ff fe6c 	bl	d41cc <_ZN5spark9WiFiClass3offEv>
      timeFix = true;
   d44f4:	2301      	movs	r3, #1
   d44f6:	7023      	strb	r3, [r4, #0]
    EEPROM.get(0, dsid);
   d44f8:	f004 fee4 	bl	d92c4 <_Z21__fetch_global_EEPROMv>
   d44fc:	49a6      	ldr	r1, [pc, #664]	; (d4798 <loop+0x344>)
   d44fe:	2000      	movs	r0, #0
   d4500:	f7ff fe35 	bl	d416e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(100, sleepDuration);
   d4504:	f004 fede 	bl	d92c4 <_Z21__fetch_global_EEPROMv>
   d4508:	49a4      	ldr	r1, [pc, #656]	; (d479c <loop+0x348>)
   d450a:	2064      	movs	r0, #100	; 0x64
   d450c:	f7ff fe2f 	bl	d416e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(200, wifiInterval);
   d4510:	f004 fed8 	bl	d92c4 <_Z21__fetch_global_EEPROMv>
   d4514:	49a2      	ldr	r1, [pc, #648]	; (d47a0 <loop+0x34c>)
   d4516:	20c8      	movs	r0, #200	; 0xc8
   d4518:	f7ff fe29 	bl	d416e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
        if (valid_) {
   d451c:	4ba1      	ldr	r3, [pc, #644]	; (d47a4 <loop+0x350>)
   d451e:	7d1a      	ldrb	r2, [r3, #20]
   d4520:	b10a      	cbz	r2, d4526 <loop+0xd2>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4522:	2202      	movs	r2, #2
   d4524:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration - SLEEP_DELAY);
   d4526:	4d9d      	ldr	r5, [pc, #628]	; (d479c <loop+0x348>)
    lis.read();
   d4528:	4c9f      	ldr	r4, [pc, #636]	; (d47a8 <loop+0x354>)
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration - SLEEP_DELAY);
   d452a:	6829      	ldr	r1, [r5, #0]
   d452c:	489d      	ldr	r0, [pc, #628]	; (d47a4 <loop+0x350>)
    if(abs(lis.x_g - prevX) > SENSITIVITY_TOLERANCE || abs(lis.y_g - prevY) > SENSITIVITY_TOLERANCE || abs(lis.z_g - prevZ) > SENSITIVITY_TOLERANCE){
   d452e:	4e9f      	ldr	r6, [pc, #636]	; (d47ac <loop+0x358>)
   d4530:	f8df 82b8 	ldr.w	r8, [pc, #696]	; d47ec <loop+0x398>
   d4534:	4f9e      	ldr	r7, [pc, #632]	; (d47b0 <loop+0x35c>)
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration - SLEEP_DELAY);
   d4536:	3946      	subs	r1, #70	; 0x46
   d4538:	f7ff fe58 	bl	d41ec <_ZN8particle24SystemSleepConfiguration8durationEm>
    lis.read();
   d453c:	4620      	mov	r0, r4
   d453e:	f001 f879 	bl	d5634 <_ZN15Adafruit_LIS3DH4readEv>
    unixTime = Time.now();
   d4542:	f003 ff57 	bl	d83f4 <_ZN9TimeClass3nowEv>
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(char c) : String(c) {}
	StringSumHelper(unsigned char num) : String(num) {}
	StringSumHelper(int num) : String(num) {}
	StringSumHelper(unsigned int num) : String(num) {}
	StringSumHelper(long num) : String(num) {}
   d4546:	220a      	movs	r2, #10
   d4548:	4601      	mov	r1, r0
   d454a:	a812      	add	r0, sp, #72	; 0x48
   d454c:	f002 faba 	bl	d6ac4 <_ZN6StringC1Elh>
   d4550:	a912      	add	r1, sp, #72	; 0x48
   d4552:	4898      	ldr	r0, [pc, #608]	; (d47b4 <loop+0x360>)
   d4554:	f002 fa89 	bl	d6a6a <_ZN6StringaSEO15StringSumHelper>
class StringSumHelper : public String
   d4558:	a812      	add	r0, sp, #72	; 0x48
   d455a:	f002 f9fb 	bl	d6954 <_ZN6StringD1Ev>
    Serial.println(lis.x_g);
   d455e:	f004 f90b 	bl	d8778 <_Z16_fetch_usbserialv>
   d4562:	ed94 0a03 	vldr	s0, [r4, #12]
   d4566:	2102      	movs	r1, #2
   d4568:	f003 ff03 	bl	d8372 <_ZN5Print7printlnEfi>
    Serial.println(lis.y_g);
   d456c:	f004 f904 	bl	d8778 <_Z16_fetch_usbserialv>
   d4570:	ed94 0a04 	vldr	s0, [r4, #16]
   d4574:	2102      	movs	r1, #2
   d4576:	f003 fefc 	bl	d8372 <_ZN5Print7printlnEfi>
    Serial.println(lis.z_g);
   d457a:	f004 f8fd 	bl	d8778 <_Z16_fetch_usbserialv>
   d457e:	ed94 0a05 	vldr	s0, [r4, #20]
   d4582:	2102      	movs	r1, #2
   d4584:	f003 fef5 	bl	d8372 <_ZN5Print7printlnEfi>
    if(abs(lis.x_g - prevX) > SENSITIVITY_TOLERANCE || abs(lis.y_g - prevY) > SENSITIVITY_TOLERANCE || abs(lis.z_g - prevZ) > SENSITIVITY_TOLERANCE){
   d4588:	ed94 6a03 	vldr	s12, [r4, #12]
   d458c:	edd6 7a00 	vldr	s15, [r6]
   d4590:	edd4 6a04 	vldr	s13, [r4, #16]
   d4594:	ee76 7a67 	vsub.f32	s15, s12, s15
   d4598:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   d459c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d45a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d45a4:	bfd8      	it	le
   d45a6:	eef1 7a67 	vnegle.f32	s15, s15
   d45aa:	eef4 7ac7 	vcmpe.f32	s15, s14
   d45ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d45b2:	dc22      	bgt.n	d45fa <loop+0x1a6>
   d45b4:	edd8 7a00 	vldr	s15, [r8]
   d45b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
   d45bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d45c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d45c4:	bfd8      	it	le
   d45c6:	eef1 7a67 	vnegle.f32	s15, s15
   d45ca:	eef4 7ac7 	vcmpe.f32	s15, s14
   d45ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d45d2:	dc12      	bgt.n	d45fa <loop+0x1a6>
   d45d4:	edd4 7a05 	vldr	s15, [r4, #20]
   d45d8:	edd7 5a00 	vldr	s11, [r7]
   d45dc:	ee77 7ae5 	vsub.f32	s15, s15, s11
   d45e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d45e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d45e8:	bfd8      	it	le
   d45ea:	eef1 7a67 	vnegle.f32	s15, s15
   d45ee:	eef4 7ac7 	vcmpe.f32	s15, s14
   d45f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d45f6:	f340 8196 	ble.w	d4926 <loop+0x4d2>
      valuesChanged = true;
   d45fa:	4b6f      	ldr	r3, [pc, #444]	; (d47b8 <loop+0x364>)
	StringSumHelper(const char *p) : String(p) {}
   d45fc:	496f      	ldr	r1, [pc, #444]	; (d47bc <loop+0x368>)
      prevX = lis.x_g;
   d45fe:	ed86 6a00 	vstr	s12, [r6]
      valuesChanged = true;
   d4602:	2201      	movs	r2, #1
   d4604:	701a      	strb	r2, [r3, #0]
   d4606:	a802      	add	r0, sp, #8
      prevZ = lis.z_g;
   d4608:	6963      	ldr	r3, [r4, #20]
      prevY = lis.y_g;
   d460a:	edc8 6a00 	vstr	s13, [r8]
      prevZ = lis.z_g;
   d460e:	603b      	str	r3, [r7, #0]
   d4610:	f002 f9eb 	bl	d69ea <_ZN6StringC1EPKc>
      payload += "{\"dsid\":" + String(dsid) + ", \"value\":\"" + String(lis.x_g) + "," + String(lis.y_g) + "," + String(lis.z_g) + "\", \"timestamp\":" + unixTime + "},";
   d4614:	4b60      	ldr	r3, [pc, #384]	; (d4798 <loop+0x344>)
   d4616:	220a      	movs	r2, #10
   d4618:	6819      	ldr	r1, [r3, #0]
   d461a:	a806      	add	r0, sp, #24
   d461c:	f002 fa3f 	bl	d6a9e <_ZN6StringC1Eih>
   d4620:	a906      	add	r1, sp, #24
   d4622:	a802      	add	r0, sp, #8
   d4624:	f002 faa3 	bl	d6b6e <_ZplRK15StringSumHelperRK6String>
   d4628:	4965      	ldr	r1, [pc, #404]	; (d47c0 <loop+0x36c>)
   d462a:	f002 faac 	bl	d6b86 <_ZplRK15StringSumHelperPKc>
   d462e:	ed94 0a03 	vldr	s0, [r4, #12]
   d4632:	4681      	mov	r9, r0
   d4634:	2106      	movs	r1, #6
   d4636:	a80a      	add	r0, sp, #40	; 0x28
   d4638:	f002 fa57 	bl	d6aea <_ZN6StringC1Efi>
   d463c:	a90a      	add	r1, sp, #40	; 0x28
   d463e:	4648      	mov	r0, r9
   d4640:	f002 fa95 	bl	d6b6e <_ZplRK15StringSumHelperRK6String>
   d4644:	495f      	ldr	r1, [pc, #380]	; (d47c4 <loop+0x370>)
   d4646:	f002 fa9e 	bl	d6b86 <_ZplRK15StringSumHelperPKc>
   d464a:	ed94 0a04 	vldr	s0, [r4, #16]
   d464e:	4681      	mov	r9, r0
   d4650:	2106      	movs	r1, #6
   d4652:	a80e      	add	r0, sp, #56	; 0x38
   d4654:	f002 fa49 	bl	d6aea <_ZN6StringC1Efi>
   d4658:	a90e      	add	r1, sp, #56	; 0x38
   d465a:	4648      	mov	r0, r9
   d465c:	f002 fa87 	bl	d6b6e <_ZplRK15StringSumHelperRK6String>
   d4660:	4958      	ldr	r1, [pc, #352]	; (d47c4 <loop+0x370>)
   d4662:	f002 fa90 	bl	d6b86 <_ZplRK15StringSumHelperPKc>
   d4666:	2106      	movs	r1, #6
   d4668:	4681      	mov	r9, r0
   d466a:	ed94 0a05 	vldr	s0, [r4, #20]
   d466e:	a812      	add	r0, sp, #72	; 0x48
   d4670:	f002 fa3b 	bl	d6aea <_ZN6StringC1Efi>
   d4674:	a912      	add	r1, sp, #72	; 0x48
   d4676:	4648      	mov	r0, r9
      payload += "{\"dsid\":" + String(dsid) + ", \"value\":\"" + String(prevX) + "," + String(prevY) + "," + String(prevZ) + "\", \"timestamp\":" + unixTime + "},";
   d4678:	f002 fa79 	bl	d6b6e <_ZplRK15StringSumHelperRK6String>
   d467c:	4952      	ldr	r1, [pc, #328]	; (d47c8 <loop+0x374>)
    Serial.println(t3);
   d467e:	4c53      	ldr	r4, [pc, #332]	; (d47cc <loop+0x378>)
      payload += "{\"dsid\":" + String(dsid) + ", \"value\":\"" + String(prevX) + "," + String(prevY) + "," + String(prevZ) + "\", \"timestamp\":" + unixTime + "},";
   d4680:	f002 fa81 	bl	d6b86 <_ZplRK15StringSumHelperPKc>
   d4684:	494b      	ldr	r1, [pc, #300]	; (d47b4 <loop+0x360>)
   d4686:	f002 fa72 	bl	d6b6e <_ZplRK15StringSumHelperRK6String>
   d468a:	4951      	ldr	r1, [pc, #324]	; (d47d0 <loop+0x37c>)
   d468c:	f002 fa7b 	bl	d6b86 <_ZplRK15StringSumHelperPKc>
   d4690:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4692:	4850      	ldr	r0, [pc, #320]	; (d47d4 <loop+0x380>)
   d4694:	f002 fa5a 	bl	d6b4c <_ZN6String6concatERKS_>
   d4698:	a812      	add	r0, sp, #72	; 0x48
   d469a:	f002 f95b 	bl	d6954 <_ZN6StringD1Ev>
   d469e:	a80e      	add	r0, sp, #56	; 0x38
   d46a0:	f002 f958 	bl	d6954 <_ZN6StringD1Ev>
   d46a4:	a80a      	add	r0, sp, #40	; 0x28
   d46a6:	f002 f955 	bl	d6954 <_ZN6StringD1Ev>
   d46aa:	a806      	add	r0, sp, #24
   d46ac:	f002 f952 	bl	d6954 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d46b0:	a802      	add	r0, sp, #8
   d46b2:	f002 f94f 	bl	d6954 <_ZN6StringD1Ev>
    Serial.println("previous values: ");
   d46b6:	f004 f85f 	bl	d8778 <_Z16_fetch_usbserialv>
   d46ba:	4947      	ldr	r1, [pc, #284]	; (d47d8 <loop+0x384>)
   d46bc:	f003 fd5d 	bl	d817a <_ZN5Print7printlnEPKc>
    Serial.println(prevX);
   d46c0:	f004 f85a 	bl	d8778 <_Z16_fetch_usbserialv>
   d46c4:	ed96 0a00 	vldr	s0, [r6]
    Serial.println(wifiInterval);
   d46c8:	4e35      	ldr	r6, [pc, #212]	; (d47a0 <loop+0x34c>)
    Serial.println(prevX);
   d46ca:	2102      	movs	r1, #2
   d46cc:	f003 fe51 	bl	d8372 <_ZN5Print7printlnEfi>
    Serial.println(prevY);
   d46d0:	f004 f852 	bl	d8778 <_Z16_fetch_usbserialv>
   d46d4:	ed98 0a00 	vldr	s0, [r8]
   d46d8:	2102      	movs	r1, #2
   d46da:	f003 fe4a 	bl	d8372 <_ZN5Print7printlnEfi>
    Serial.println(prevZ);
   d46de:	f004 f84b 	bl	d8778 <_Z16_fetch_usbserialv>
   d46e2:	ed97 0a00 	vldr	s0, [r7]
        operator const char*() const { return c_str(); }
   d46e6:	4f3b      	ldr	r7, [pc, #236]	; (d47d4 <loop+0x380>)
   d46e8:	2102      	movs	r1, #2
   d46ea:	f003 fe42 	bl	d8372 <_ZN5Print7printlnEfi>
    Serial.println(payload);
   d46ee:	f004 f843 	bl	d8778 <_Z16_fetch_usbserialv>
   d46f2:	6839      	ldr	r1, [r7, #0]
   d46f4:	f003 fd41 	bl	d817a <_ZN5Print7printlnEPKc>
    Serial.println(prevPayload);
   d46f8:	f004 f83e 	bl	d8778 <_Z16_fetch_usbserialv>
   d46fc:	4b37      	ldr	r3, [pc, #220]	; (d47dc <loop+0x388>)
   d46fe:	6819      	ldr	r1, [r3, #0]
   d4700:	f003 fd3b 	bl	d817a <_ZN5Print7printlnEPKc>
    Serial.println(dsid);
   d4704:	f004 f838 	bl	d8778 <_Z16_fetch_usbserialv>
   d4708:	4b23      	ldr	r3, [pc, #140]	; (d4798 <loop+0x344>)
   d470a:	220a      	movs	r2, #10
   d470c:	6819      	ldr	r1, [r3, #0]
   d470e:	f7ff fe7f 	bl	d4410 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println(sleepDuration);
   d4712:	f004 f831 	bl	d8778 <_Z16_fetch_usbserialv>
   d4716:	6829      	ldr	r1, [r5, #0]
   d4718:	220a      	movs	r2, #10
   d471a:	f7ff fe79 	bl	d4410 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println(wifiInterval);
   d471e:	f004 f82b 	bl	d8778 <_Z16_fetch_usbserialv>
   d4722:	6831      	ldr	r1, [r6, #0]
   d4724:	220a      	movs	r2, #10
   d4726:	f7ff fe73 	bl	d4410 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println(t3);
   d472a:	f004 f825 	bl	d8778 <_Z16_fetch_usbserialv>
   d472e:	6821      	ldr	r1, [r4, #0]
   d4730:	220a      	movs	r2, #10
   d4732:	f7ff fe6d 	bl	d4410 <_ZN5Print7printlnIiLi0EEEjT_i>
    BLE.disconnect();
   d4736:	f002 fed1 	bl	d74dc <_ZN8particle14BleLocalDevice11getInstanceEv>
   d473a:	f003 f89b 	bl	d7874 <_ZNK8particle14BleLocalDevice10disconnectEv>
    BLE.off();
   d473e:	f002 fecd 	bl	d74dc <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4742:	f003 f831 	bl	d77a8 <_ZNK8particle14BleLocalDevice3offEv>
    System.sleep(config);
   d4746:	a812      	add	r0, sp, #72	; 0x48
   d4748:	4916      	ldr	r1, [pc, #88]	; (d47a4 <loop+0x350>)
   d474a:	f001 ff7d 	bl	d6648 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d474e:	9812      	ldr	r0, [sp, #72]	; 0x48
   d4750:	b108      	cbz	r0, d4756 <loop+0x302>
            free(wakeupSource_);
   d4752:	f001 fe47 	bl	d63e4 <free>
   d4756:	f001 fadb 	bl	d5d10 <HAL_Timer_Get_Milli_Seconds>
    t2 = millis();
   d475a:	4b21      	ldr	r3, [pc, #132]	; (d47e0 <loop+0x38c>)
   d475c:	6018      	str	r0, [r3, #0]
    t3 = t2 - t1;
   d475e:	4b21      	ldr	r3, [pc, #132]	; (d47e4 <loop+0x390>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	1ac0      	subs	r0, r0, r3
    if(wifiTimeLeft <= 0){
   d4764:	4b20      	ldr	r3, [pc, #128]	; (d47e8 <loop+0x394>)
    t3 = t2 - t1;
   d4766:	6020      	str	r0, [r4, #0]
    if(wifiTimeLeft <= 0){
   d4768:	681a      	ldr	r2, [r3, #0]
   d476a:	2a00      	cmp	r2, #0
   d476c:	4698      	mov	r8, r3
   d476e:	f300 80c0 	bgt.w	d48f2 <loop+0x49e>
      WiFi.on();
   d4772:	4808      	ldr	r0, [pc, #32]	; (d4794 <loop+0x340>)
      while(!WiFi.ready()){}
   d4774:	4c07      	ldr	r4, [pc, #28]	; (d4794 <loop+0x340>)
      WiFi.on();
   d4776:	f7ff fd23 	bl	d41c0 <_ZN5spark9WiFiClass2onEv>
      WiFi.connect();
   d477a:	4806      	ldr	r0, [pc, #24]	; (d4794 <loop+0x340>)
   d477c:	2100      	movs	r1, #0
   d477e:	f7ff fd2b 	bl	d41d8 <_ZN5spark9WiFiClass7connectEj>
   d4782:	e035      	b.n	d47f0 <loop+0x39c>
   d4784:	2003e608 	.word	0x2003e608
   d4788:	2003e604 	.word	0x2003e604
   d478c:	2003df94 	.word	0x2003df94
   d4790:	2003e60c 	.word	0x2003e60c
   d4794:	2003e7bc 	.word	0x2003e7bc
   d4798:	2003dfb4 	.word	0x2003dfb4
   d479c:	2003ded4 	.word	0x2003ded4
   d47a0:	2003ded8 	.word	0x2003ded8
   d47a4:	2003df98 	.word	0x2003df98
   d47a8:	2003e3e4 	.word	0x2003e3e4
   d47ac:	2003e570 	.word	0x2003e570
   d47b0:	2003e578 	.word	0x2003e578
   d47b4:	2003e618 	.word	0x2003e618
   d47b8:	2003e628 	.word	0x2003e628
   d47bc:	000da53b 	.word	0x000da53b
   d47c0:	000da544 	.word	0x000da544
   d47c4:	000da561 	.word	0x000da561
   d47c8:	000da550 	.word	0x000da550
   d47cc:	2003e5fc 	.word	0x2003e5fc
   d47d0:	000da560 	.word	0x000da560
   d47d4:	2003e550 	.word	0x2003e550
   d47d8:	000da563 	.word	0x000da563
   d47dc:	2003e560 	.word	0x2003e560
   d47e0:	2003e5f8 	.word	0x2003e5f8
   d47e4:	2003e5f4 	.word	0x2003e5f4
   d47e8:	2003e62c 	.word	0x2003e62c
   d47ec:	2003e574 	.word	0x2003e574
      while(!WiFi.ready()){}
   d47f0:	4620      	mov	r0, r4
   d47f2:	f7ff fcf6 	bl	d41e2 <_ZN5spark9WiFiClass5readyEv>
   d47f6:	2800      	cmp	r0, #0
   d47f8:	d0fa      	beq.n	d47f0 <loop+0x39c>
        spark_cloud_flag_connect();
   d47fa:	f001 fdb3 	bl	d6364 <spark_cloud_flag_connect>
      Particle.syncTime();
   d47fe:	f7ff fcac 	bl	d415a <_ZN10CloudClass8syncTimeEv.isra.0>
      delay(1000);
   d4802:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4806:	f003 fe0f 	bl	d8428 <delay>
      Particle.process();
   d480a:	f7ff fd19 	bl	d4240 <_ZN10CloudClass7processEv>
      Serial.println(Particle.timeSyncedLast());
   d480e:	f003 ffb3 	bl	d8778 <_Z16_fetch_usbserialv>
        tm = 0;
   d4812:	2300      	movs	r3, #0
   d4814:	4604      	mov	r4, r0
   d4816:	2200      	movs	r2, #0
        return spark_sync_time_last(nullptr, &tm);
   d4818:	a912      	add	r1, sp, #72	; 0x48
   d481a:	2000      	movs	r0, #0
        tm = 0;
   d481c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        return spark_sync_time_last(nullptr, &tm);
   d4820:	f001 fdc0 	bl	d63a4 <spark_sync_time_last>
        return printNumber(val, base) + t;
   d4824:	220a      	movs	r2, #10
   d4826:	4601      	mov	r1, r0
   d4828:	4620      	mov	r0, r4
   d482a:	f003 fcb0 	bl	d818e <_ZN5Print11printNumberEmh>
        n += println();
   d482e:	4620      	mov	r0, r4
   d4830:	f003 fc97 	bl	d8162 <_ZN5Print7printlnEv>
      Serial.println(Time.now());
   d4834:	f003 ffa0 	bl	d8778 <_Z16_fetch_usbserialv>
   d4838:	4681      	mov	r9, r0
   d483a:	f003 fddb 	bl	d83f4 <_ZN9TimeClass3nowEv>
        if (n < 0 && base == 10) {
   d483e:	1e04      	subs	r4, r0, #0
   d4840:	f280 80a8 	bge.w	d4994 <loop+0x540>
            t = print('-');
   d4844:	212d      	movs	r1, #45	; 0x2d
   d4846:	4648      	mov	r0, r9
   d4848:	f003 fc82 	bl	d8150 <_ZN5Print5printEc>
            val = -n;
   d484c:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d484e:	220a      	movs	r2, #10
   d4850:	4648      	mov	r0, r9
   d4852:	f003 fc9c 	bl	d818e <_ZN5Print11printNumberEmh>
        n += println();
   d4856:	4648      	mov	r0, r9
   d4858:	f003 fc83 	bl	d8162 <_ZN5Print7printlnEv>
      payload.remove(payload.length() - 1);
   d485c:	68b9      	ldr	r1, [r7, #8]
   d485e:	484e      	ldr	r0, [pc, #312]	; (d4998 <loop+0x544>)
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
    }

    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
   d4860:	4f4e      	ldr	r7, [pc, #312]	; (d499c <loop+0x548>)
   d4862:	3901      	subs	r1, #1
   d4864:	f002 fa09 	bl	d6c7a <_ZN6String6removeEj>
	StringSumHelper(const char *p) : String(p) {}
   d4868:	494d      	ldr	r1, [pc, #308]	; (d49a0 <loop+0x54c>)
   d486a:	a812      	add	r0, sp, #72	; 0x48
   d486c:	f002 f8bd 	bl	d69ea <_ZN6StringC1EPKc>
      request.body = "{\"data\":[" + payload + "]}";
   d4870:	4949      	ldr	r1, [pc, #292]	; (d4998 <loop+0x544>)
   d4872:	a812      	add	r0, sp, #72	; 0x48
   d4874:	f002 f97b 	bl	d6b6e <_ZplRK15StringSumHelperRK6String>
   d4878:	494a      	ldr	r1, [pc, #296]	; (d49a4 <loop+0x550>)
   d487a:	f002 f984 	bl	d6b86 <_ZplRK15StringSumHelperPKc>
   d487e:	4601      	mov	r1, r0
   d4880:	4849      	ldr	r0, [pc, #292]	; (d49a8 <loop+0x554>)
   d4882:	f002 f8e3 	bl	d6a4c <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d4886:	a812      	add	r0, sp, #72	; 0x48
   d4888:	f002 f864 	bl	d6954 <_ZN6StringD1Ev>
   d488c:	4b47      	ldr	r3, [pc, #284]	; (d49ac <loop+0x558>)
   d488e:	4948      	ldr	r1, [pc, #288]	; (d49b0 <loop+0x55c>)
   d4890:	4848      	ldr	r0, [pc, #288]	; (d49b4 <loop+0x560>)
   d4892:	9300      	str	r3, [sp, #0]
   d4894:	463a      	mov	r2, r7
   d4896:	4b48      	ldr	r3, [pc, #288]	; (d49b8 <loop+0x564>)
   d4898:	f001 f804 	bl	d58a4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("Status: " + response.status);
   d489c:	f003 ff6c 	bl	d8778 <_Z16_fetch_usbserialv>
   d48a0:	683b      	ldr	r3, [r7, #0]
   d48a2:	4946      	ldr	r1, [pc, #280]	; (d49bc <loop+0x568>)
   d48a4:	4419      	add	r1, r3
   d48a6:	f003 fc68 	bl	d817a <_ZN5Print7printlnEPKc>
      Serial.println("Body: " + response.body);
   d48aa:	f003 ff65 	bl	d8778 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d48ae:	4944      	ldr	r1, [pc, #272]	; (d49c0 <loop+0x56c>)
   d48b0:	4604      	mov	r4, r0
   d48b2:	a812      	add	r0, sp, #72	; 0x48
   d48b4:	f002 f899 	bl	d69ea <_ZN6StringC1EPKc>
   d48b8:	1d39      	adds	r1, r7, #4
   d48ba:	a812      	add	r0, sp, #72	; 0x48
   d48bc:	f002 f957 	bl	d6b6e <_ZplRK15StringSumHelperRK6String>
   d48c0:	6801      	ldr	r1, [r0, #0]
   d48c2:	4620      	mov	r0, r4
   d48c4:	f003 fc59 	bl	d817a <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   d48c8:	a812      	add	r0, sp, #72	; 0x48
   d48ca:	f002 f843 	bl	d6954 <_ZN6StringD1Ev>
      payload = "";
   d48ce:	493d      	ldr	r1, [pc, #244]	; (d49c4 <loop+0x570>)
   d48d0:	4831      	ldr	r0, [pc, #196]	; (d4998 <loop+0x544>)
   d48d2:	f002 f8d2 	bl	d6a7a <_ZN6StringaSEPKc>
      wifiTimeLeft = wifiInterval;
   d48d6:	6833      	ldr	r3, [r6, #0]
   d48d8:	f8c8 3000 	str.w	r3, [r8]
      Particle.disconnect();
   d48dc:	a812      	add	r0, sp, #72	; 0x48
        graceful_(graceful) {
   d48de:	2300      	movs	r3, #0
   d48e0:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
   d48e4:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
   d48e8:	f003 fe48 	bl	d857c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
      WiFi.off();
   d48ec:	4836      	ldr	r0, [pc, #216]	; (d49c8 <loop+0x574>)
   d48ee:	f7ff fc6d 	bl	d41cc <_ZN5spark9WiFiClass3offEv>
    wifiTimeLeft -= sleepDuration;
   d48f2:	f8d8 3000 	ldr.w	r3, [r8]
   d48f6:	682a      	ldr	r2, [r5, #0]
   d48f8:	1a9b      	subs	r3, r3, r2
   d48fa:	f8c8 3000 	str.w	r3, [r8]
}
   d48fe:	b017      	add	sp, #92	; 0x5c
   d4900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WLanCredentials creds = credentials.getHalCredentials();
        network_set_credentials(*this, 0, &creds, NULL);
    }

    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
   d4904:	4b30      	ldr	r3, [pc, #192]	; (d49c8 <loop+0x574>)
   d4906:	462a      	mov	r2, r5
   d4908:	6858      	ldr	r0, [r3, #4]
   d490a:	4629      	mov	r1, r5
   d490c:	f001 fcea 	bl	d62e4 <network_has_credentials>
  if(bleInput | ((time2 - CONFIG_WAIT_TIME >= time1) && WiFi.hasCredentials() && !(BLE.connected()))){
   d4910:	2800      	cmp	r0, #0
   d4912:	f43f adc3 	beq.w	d449c <loop+0x48>
   d4916:	f002 fde1 	bl	d74dc <_ZN8particle14BleLocalDevice11getInstanceEv>
   d491a:	f002 fe60 	bl	d75de <_ZNK8particle14BleLocalDevice9connectedEv>
   d491e:	2800      	cmp	r0, #0
   d4920:	f47f adbc 	bne.w	d449c <loop+0x48>
   d4924:	e5bf      	b.n	d44a6 <loop+0x52>
	StringSumHelper(const char *p) : String(p) {}
   d4926:	4929      	ldr	r1, [pc, #164]	; (d49cc <loop+0x578>)
   d4928:	a802      	add	r0, sp, #8
   d492a:	f002 f85e 	bl	d69ea <_ZN6StringC1EPKc>
      payload += "{\"dsid\":" + String(dsid) + ", \"value\":\"" + String(prevX) + "," + String(prevY) + "," + String(prevZ) + "\", \"timestamp\":" + unixTime + "},";
   d492e:	4b28      	ldr	r3, [pc, #160]	; (d49d0 <loop+0x57c>)
   d4930:	220a      	movs	r2, #10
   d4932:	6819      	ldr	r1, [r3, #0]
   d4934:	a806      	add	r0, sp, #24
   d4936:	f002 f8b2 	bl	d6a9e <_ZN6StringC1Eih>
   d493a:	a906      	add	r1, sp, #24
   d493c:	a802      	add	r0, sp, #8
   d493e:	f002 f916 	bl	d6b6e <_ZplRK15StringSumHelperRK6String>
   d4942:	4924      	ldr	r1, [pc, #144]	; (d49d4 <loop+0x580>)
   d4944:	f002 f91f 	bl	d6b86 <_ZplRK15StringSumHelperPKc>
   d4948:	ed96 0a00 	vldr	s0, [r6]
   d494c:	4604      	mov	r4, r0
   d494e:	2106      	movs	r1, #6
   d4950:	a80a      	add	r0, sp, #40	; 0x28
   d4952:	f002 f8ca 	bl	d6aea <_ZN6StringC1Efi>
   d4956:	a90a      	add	r1, sp, #40	; 0x28
   d4958:	4620      	mov	r0, r4
   d495a:	f002 f908 	bl	d6b6e <_ZplRK15StringSumHelperRK6String>
   d495e:	491e      	ldr	r1, [pc, #120]	; (d49d8 <loop+0x584>)
   d4960:	f002 f911 	bl	d6b86 <_ZplRK15StringSumHelperPKc>
   d4964:	ed98 0a00 	vldr	s0, [r8]
   d4968:	4604      	mov	r4, r0
   d496a:	2106      	movs	r1, #6
   d496c:	a80e      	add	r0, sp, #56	; 0x38
   d496e:	f002 f8bc 	bl	d6aea <_ZN6StringC1Efi>
   d4972:	a90e      	add	r1, sp, #56	; 0x38
   d4974:	4620      	mov	r0, r4
   d4976:	f002 f8fa 	bl	d6b6e <_ZplRK15StringSumHelperRK6String>
   d497a:	4917      	ldr	r1, [pc, #92]	; (d49d8 <loop+0x584>)
   d497c:	f002 f903 	bl	d6b86 <_ZplRK15StringSumHelperPKc>
   d4980:	2106      	movs	r1, #6
   d4982:	4604      	mov	r4, r0
   d4984:	ed97 0a00 	vldr	s0, [r7]
   d4988:	a812      	add	r0, sp, #72	; 0x48
   d498a:	f002 f8ae 	bl	d6aea <_ZN6StringC1Efi>
   d498e:	a912      	add	r1, sp, #72	; 0x48
   d4990:	4620      	mov	r0, r4
   d4992:	e671      	b.n	d4678 <loop+0x224>
            val = n;
   d4994:	4621      	mov	r1, r4
   d4996:	e75a      	b.n	d484e <loop+0x3fa>
   d4998:	2003e550 	.word	0x2003e550
   d499c:	2003e5c8 	.word	0x2003e5c8
   d49a0:	000da575 	.word	0x000da575
   d49a4:	000da57f 	.word	0x000da57f
   d49a8:	2003e5b8 	.word	0x2003e5b8
   d49ac:	000da582 	.word	0x000da582
   d49b0:	2003e57c 	.word	0x2003e57c
   d49b4:	2003dfb8 	.word	0x2003dfb8
   d49b8:	2003deb4 	.word	0x2003deb4
   d49bc:	000da587 	.word	0x000da587
   d49c0:	000da590 	.word	0x000da590
   d49c4:	000da68d 	.word	0x000da68d
   d49c8:	2003e7bc 	.word	0x2003e7bc
   d49cc:	000da53b 	.word	0x000da53b
   d49d0:	2003dfb4 	.word	0x2003dfb4
   d49d4:	000da544 	.word	0x000da544
   d49d8:	000da561 	.word	0x000da561

000d49dc <_ZN5Print7printlnIjLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
   d49dc:	b538      	push	{r3, r4, r5, lr}
   d49de:	4605      	mov	r5, r0
    if (base == 0) {
   d49e0:	b94a      	cbnz	r2, d49f6 <_ZN5Print7printlnIjLi0EEEjT_i+0x1a>
        return write(n);
   d49e2:	6802      	ldr	r2, [r0, #0]
   d49e4:	b2c9      	uxtb	r1, r1
   d49e6:	6892      	ldr	r2, [r2, #8]
   d49e8:	4790      	blx	r2
        return printNumber(val, base) + t;
   d49ea:	4604      	mov	r4, r0
        n += println();
   d49ec:	4628      	mov	r0, r5
   d49ee:	f003 fbb8 	bl	d8162 <_ZN5Print7printlnEv>
    }
   d49f2:	4420      	add	r0, r4
   d49f4:	bd38      	pop	{r3, r4, r5, pc}
        return printNumber(val, base) + t;
   d49f6:	b2d2      	uxtb	r2, r2
   d49f8:	f003 fbc9 	bl	d818e <_ZN5Print11printNumberEmh>
   d49fc:	e7f5      	b.n	d49ea <_ZN5Print7printlnIjLi0EEEjT_i+0xe>

000d49fe <_ZN5Print7printlnIhLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
   d49fe:	b538      	push	{r3, r4, r5, lr}
   d4a00:	4605      	mov	r5, r0
    if (base == 0) {
   d4a02:	b942      	cbnz	r2, d4a16 <_ZN5Print7printlnIhLi0EEEjT_i+0x18>
        return write(n);
   d4a04:	6803      	ldr	r3, [r0, #0]
   d4a06:	689b      	ldr	r3, [r3, #8]
   d4a08:	4798      	blx	r3
        return printNumber(val, base) + t;
   d4a0a:	4604      	mov	r4, r0
        n += println();
   d4a0c:	4628      	mov	r0, r5
   d4a0e:	f003 fba8 	bl	d8162 <_ZN5Print7printlnEv>
    }
   d4a12:	4420      	add	r0, r4
   d4a14:	bd38      	pop	{r3, r4, r5, pc}
        return printNumber(val, base) + t;
   d4a16:	b2d2      	uxtb	r2, r2
   d4a18:	f003 fbb9 	bl	d818e <_ZN5Print11printNumberEmh>
   d4a1c:	e7f5      	b.n	d4a0a <_ZN5Print7printlnIhLi0EEEjT_i+0xc>
	...

000d4a20 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a24:	460e      	mov	r6, r1
   d4a26:	b095      	sub	sp, #84	; 0x54
  switch(count){
   d4a28:	4da9      	ldr	r5, [pc, #676]	; (d4cd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4a2a:	4604      	mov	r4, r0
  Serial.println(len);
   d4a2c:	f003 fea4 	bl	d8778 <_Z16_fetch_usbserialv>
   d4a30:	220a      	movs	r2, #10
   d4a32:	4631      	mov	r1, r6
   d4a34:	f7ff ffd2 	bl	d49dc <_ZN5Print7printlnIjLi0EEEjT_i>
  inputBuffer = "";
   d4a38:	49a6      	ldr	r1, [pc, #664]	; (d4cd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b4>)
   d4a3a:	48a7      	ldr	r0, [pc, #668]	; (d4cd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   d4a3c:	f002 f81d 	bl	d6a7a <_ZN6StringaSEPKc>
  switch(count){
   d4a40:	682b      	ldr	r3, [r5, #0]
   d4a42:	2b07      	cmp	r3, #7
   d4a44:	f200 80c9 	bhi.w	d4bda <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ba>
   d4a48:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4a4c:	0098010e 	.word	0x0098010e
   d4a50:	006c007f 	.word	0x006c007f
   d4a54:	00380052 	.word	0x00380052
   d4a58:	0008001b 	.word	0x0008001b
	String & operator += (char c)			{concat(c); return (*this);}
   d4a5c:	4f9e      	ldr	r7, [pc, #632]	; (d4cd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   d4a5e:	4426      	add	r6, r4
      for(int i = 0; i < len - 1; i++){
   d4a60:	3401      	adds	r4, #1
   d4a62:	42b4      	cmp	r4, r6
   d4a64:	f000 82bb 	beq.w	d4fde <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5be>
        Serial.println(data[i]);
   d4a68:	f003 fe86 	bl	d8778 <_Z16_fetch_usbserialv>
   d4a6c:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4a70:	220a      	movs	r2, #10
   d4a72:	f7ff ffc4 	bl	d49fe <_ZN5Print7printlnIhLi0EEEjT_i>
   d4a76:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4a7a:	4638      	mov	r0, r7
   d4a7c:	f002 f86a 	bl	d6b54 <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   d4a80:	e7ee      	b.n	d4a60 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x40>
   d4a82:	4f96      	ldr	r7, [pc, #600]	; (d4cdc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2bc>)
   d4a84:	f8df 8250 	ldr.w	r8, [pc, #592]	; d4cd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>
   d4a88:	4426      	add	r6, r4
      for(int i = 0; i < len - 1; i++){
   d4a8a:	3401      	adds	r4, #1
   d4a8c:	42b4      	cmp	r4, r6
   d4a8e:	f000 8282 	beq.w	d4f96 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x576>
        Serial.println(data[i]);
   d4a92:	f003 fe71 	bl	d8778 <_Z16_fetch_usbserialv>
   d4a96:	220a      	movs	r2, #10
   d4a98:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4a9c:	f7ff ffaf 	bl	d49fe <_ZN5Print7printlnIhLi0EEEjT_i>
   d4aa0:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4aa4:	488c      	ldr	r0, [pc, #560]	; (d4cd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   d4aa6:	f002 f855 	bl	d6b54 <_ZN6String6concatEc>
        wifiInterval = atoi(inputBuffer) * 1000;
   d4aaa:	f8d8 0000 	ldr.w	r0, [r8]
   d4aae:	f005 fbcd 	bl	da24c <atoi>
   d4ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4ab6:	4358      	muls	r0, r3
   d4ab8:	6038      	str	r0, [r7, #0]
      for(int i = 0; i < len - 1; i++){
   d4aba:	e7e6      	b.n	d4a8a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6a>
   d4abc:	4f88      	ldr	r7, [pc, #544]	; (d4ce0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c0>)
   d4abe:	f8df 8218 	ldr.w	r8, [pc, #536]	; d4cd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>
   d4ac2:	4426      	add	r6, r4
      for(int i = 0; i < len - 1; i++){
   d4ac4:	3401      	adds	r4, #1
   d4ac6:	42b4      	cmp	r4, r6
   d4ac8:	f000 821b 	beq.w	d4f02 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e2>
        Serial.println(data[i]);
   d4acc:	f003 fe54 	bl	d8778 <_Z16_fetch_usbserialv>
   d4ad0:	220a      	movs	r2, #10
   d4ad2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4ad6:	f7ff ff92 	bl	d49fe <_ZN5Print7printlnIhLi0EEEjT_i>
   d4ada:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4ade:	487e      	ldr	r0, [pc, #504]	; (d4cd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   d4ae0:	f002 f838 	bl	d6b54 <_ZN6String6concatEc>
        sleepDuration = atoi(inputBuffer);
   d4ae4:	f8d8 0000 	ldr.w	r0, [r8]
   d4ae8:	f005 fbb0 	bl	da24c <atoi>
   d4aec:	6038      	str	r0, [r7, #0]
      for(int i = 0; i < len - 1; i++){
   d4aee:	e7e9      	b.n	d4ac4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>
   d4af0:	4f7c      	ldr	r7, [pc, #496]	; (d4ce4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c4>)
   d4af2:	f8df 81e4 	ldr.w	r8, [pc, #484]	; d4cd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>
   d4af6:	4426      	add	r6, r4
      for(int i = 0; i < len - 1; i++){
   d4af8:	3401      	adds	r4, #1
   d4afa:	42b4      	cmp	r4, r6
   d4afc:	f000 81c4 	beq.w	d4e88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x468>
        Serial.println(data[i]);
   d4b00:	f003 fe3a 	bl	d8778 <_Z16_fetch_usbserialv>
   d4b04:	220a      	movs	r2, #10
   d4b06:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4b0a:	f7ff ff78 	bl	d49fe <_ZN5Print7printlnIhLi0EEEjT_i>
   d4b0e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4b12:	4871      	ldr	r0, [pc, #452]	; (d4cd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   d4b14:	f002 f81e 	bl	d6b54 <_ZN6String6concatEc>
        dsid = atoi(inputBuffer);
   d4b18:	f8d8 0000 	ldr.w	r0, [r8]
   d4b1c:	f005 fb96 	bl	da24c <atoi>
   d4b20:	6038      	str	r0, [r7, #0]
      for(int i = 0; i < len - 1; i++){
   d4b22:	e7e9      	b.n	d4af8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd8>
   d4b24:	4f6c      	ldr	r7, [pc, #432]	; (d4cd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   d4b26:	4426      	add	r6, r4
      for(int i = 0; i < len - 1; i++){
   d4b28:	3401      	adds	r4, #1
   d4b2a:	42a6      	cmp	r6, r4
   d4b2c:	f000 814c 	beq.w	d4dc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a8>
        Serial.println(data[i]);
   d4b30:	f003 fe22 	bl	d8778 <_Z16_fetch_usbserialv>
   d4b34:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4b38:	220a      	movs	r2, #10
   d4b3a:	f7ff ff60 	bl	d49fe <_ZN5Print7printlnIhLi0EEEjT_i>
   d4b3e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4b42:	4638      	mov	r0, r7
   d4b44:	f002 f806 	bl	d6b54 <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   d4b48:	e7ee      	b.n	d4b28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x108>
   d4b4a:	4f63      	ldr	r7, [pc, #396]	; (d4cd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
        password = inputBuffer;
   d4b4c:	f8df 81c8 	ldr.w	r8, [pc, #456]	; d4d18 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f8>
   d4b50:	4426      	add	r6, r4
      for(int i = 0; i < len - 1; i++){
   d4b52:	3401      	adds	r4, #1
   d4b54:	42a6      	cmp	r6, r4
   d4b56:	f000 80e3 	beq.w	d4d20 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x300>
        Serial.println(data[i]);
   d4b5a:	f003 fe0d 	bl	d8778 <_Z16_fetch_usbserialv>
   d4b5e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4b62:	220a      	movs	r2, #10
   d4b64:	f7ff ff4b 	bl	d49fe <_ZN5Print7printlnIhLi0EEEjT_i>
   d4b68:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4b6c:	4638      	mov	r0, r7
   d4b6e:	f001 fff1 	bl	d6b54 <_ZN6String6concatEc>
        password = inputBuffer;
   d4b72:	4639      	mov	r1, r7
   d4b74:	4640      	mov	r0, r8
   d4b76:	f001 ff69 	bl	d6a4c <_ZN6StringaSERKS_>
      for(int i = 0; i < len - 1; i++){
   d4b7a:	e7ea      	b.n	d4b52 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x132>
   d4b7c:	4f56      	ldr	r7, [pc, #344]	; (d4cd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
        ssid = inputBuffer;
   d4b7e:	f8df 8174 	ldr.w	r8, [pc, #372]	; d4cf4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d4>
   d4b82:	4426      	add	r6, r4
      for(int i = 0; i < len - 1; i++){
   d4b84:	3401      	adds	r4, #1
   d4b86:	42a6      	cmp	r6, r4
   d4b88:	d02d      	beq.n	d4be6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c6>
   d4b8a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4b8e:	4638      	mov	r0, r7
   d4b90:	f001 ffe0 	bl	d6b54 <_ZN6String6concatEc>
        ssid = inputBuffer;
   d4b94:	4639      	mov	r1, r7
   d4b96:	4640      	mov	r0, r8
   d4b98:	f001 ff58 	bl	d6a4c <_ZN6StringaSERKS_>
        Serial.println(data[i]);
   d4b9c:	f003 fdec 	bl	d8778 <_Z16_fetch_usbserialv>
   d4ba0:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   d4ba4:	220a      	movs	r2, #10
   d4ba6:	f7ff ff2a 	bl	d49fe <_ZN5Print7printlnIhLi0EEEjT_i>
      for(int i = 0; i < len - 1; i++){
   d4baa:	e7eb      	b.n	d4b84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x164>
      networkBuffer = networks[networkCount - 1].ssid;
   d4bac:	2138      	movs	r1, #56	; 0x38
   d4bae:	fb01 a103 	mla	r1, r1, r3, sl
   d4bb2:	3104      	adds	r1, #4
   d4bb4:	484c      	ldr	r0, [pc, #304]	; (d4ce8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   d4bb6:	f001 ff60 	bl	d6a7a <_ZN6StringaSEPKc>
      Serial.println(networkBuffer.length());
   d4bba:	f003 fddd 	bl	d8778 <_Z16_fetch_usbserialv>
   d4bbe:	68a1      	ldr	r1, [r4, #8]
   d4bc0:	220a      	movs	r2, #10
   d4bc2:	f7ff ff0b 	bl	d49dc <_ZN5Print7printlnIjLi0EEEjT_i>
      txCharacteristic.setValue(networkBuffer);
   d4bc6:	4948      	ldr	r1, [pc, #288]	; (d4ce8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   d4bc8:	4848      	ldr	r0, [pc, #288]	; (d4cec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
   d4bca:	2200      	movs	r2, #0
   d4bcc:	f002 fbc8 	bl	d7360 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
      txCharacteristic.setValue("]\nEnter network SSID (blank to skip, 'clear' to reset credentials): ");
   d4bd0:	4947      	ldr	r1, [pc, #284]	; (d4cf0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d0>)
   d4bd2:	2200      	movs	r2, #0
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   d4bd4:	4845      	ldr	r0, [pc, #276]	; (d4cec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
   d4bd6:	f002 fbc8 	bl	d736a <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
  count++;
   d4bda:	682b      	ldr	r3, [r5, #0]
   d4bdc:	3301      	adds	r3, #1
   d4bde:	602b      	str	r3, [r5, #0]
}
   d4be0:	b015      	add	sp, #84	; 0x54
   d4be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        operator const char*() const { return c_str(); }
   d4be6:	4e43      	ldr	r6, [pc, #268]	; (d4cf4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d4>)
      Serial.println(ssid);
   d4be8:	f003 fdc6 	bl	d8778 <_Z16_fetch_usbserialv>
   d4bec:	6831      	ldr	r1, [r6, #0]
   d4bee:	f003 fac4 	bl	d817a <_ZN5Print7printlnEPKc>
      Serial.println(ssid.length());
   d4bf2:	f003 fdc1 	bl	d8778 <_Z16_fetch_usbserialv>
   d4bf6:	68b1      	ldr	r1, [r6, #8]
   d4bf8:	220a      	movs	r2, #10
   d4bfa:	f7ff feef 	bl	d49dc <_ZN5Print7printlnIjLi0EEEjT_i>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4bfe:	4935      	ldr	r1, [pc, #212]	; (d4cd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b4>)
   d4c00:	4630      	mov	r0, r6
   d4c02:	f001 ffd5 	bl	d6bb0 <_ZNK6String6equalsEPKc>
      if(ssid == ""){
   d4c06:	4604      	mov	r4, r0
   d4c08:	b1f8      	cbz	r0, d4c4a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x22a>
        count = 3;
   d4c0a:	2303      	movs	r3, #3
   d4c0c:	602b      	str	r3, [r5, #0]
        EEPROM.get(0, dsid);
   d4c0e:	4c35      	ldr	r4, [pc, #212]	; (d4ce4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c4>)
   d4c10:	f004 fb58 	bl	d92c4 <_Z21__fetch_global_EEPROMv>
   d4c14:	4621      	mov	r1, r4
   d4c16:	2000      	movs	r0, #0
   d4c18:	f7ff faa9 	bl	d416e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
        txCharacteristic.setValue("\nCurrent DSID is [");
   d4c1c:	4936      	ldr	r1, [pc, #216]	; (d4cf8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d8>)
   d4c1e:	4833      	ldr	r0, [pc, #204]	; (d4cec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
   d4c20:	2200      	movs	r2, #0
   d4c22:	f002 fba2 	bl	d736a <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        if(dsid != -1){
   d4c26:	6821      	ldr	r1, [r4, #0]
   d4c28:	1c4c      	adds	r4, r1, #1
   d4c2a:	d00b      	beq.n	d4c44 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x224>
          txCharacteristic.setValue(String(dsid));
   d4c2c:	220a      	movs	r2, #10
   d4c2e:	a801      	add	r0, sp, #4
   d4c30:	f001 ff35 	bl	d6a9e <_ZN6StringC1Eih>
   d4c34:	482d      	ldr	r0, [pc, #180]	; (d4cec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
   d4c36:	2200      	movs	r2, #0
   d4c38:	a901      	add	r1, sp, #4
   d4c3a:	f002 fb91 	bl	d7360 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   d4c3e:	a801      	add	r0, sp, #4
   d4c40:	f001 fe88 	bl	d6954 <_ZN6StringD1Ev>
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   d4c44:	492d      	ldr	r1, [pc, #180]	; (d4cfc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2dc>)
   d4c46:	2200      	movs	r2, #0
   d4c48:	e7c4      	b.n	d4bd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
   d4c4a:	492d      	ldr	r1, [pc, #180]	; (d4d00 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e0>)
   d4c4c:	4630      	mov	r0, r6
   d4c4e:	f001 ffaf 	bl	d6bb0 <_ZNK6String6equalsEPKc>
      }else if(ssid == "clear"){
   d4c52:	4602      	mov	r2, r0
   d4c54:	2800      	cmp	r0, #0
   d4c56:	d038      	beq.n	d4cca <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2aa>
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   d4c58:	482a      	ldr	r0, [pc, #168]	; (d4d04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   d4c5a:	4623      	mov	r3, r4
   d4c5c:	6840      	ldr	r0, [r0, #4]
   d4c5e:	4622      	mov	r2, r4
   d4c60:	4621      	mov	r1, r4
   d4c62:	f001 fb4f 	bl	d6304 <network_clear_credentials>
        count = 0;
   d4c66:	602c      	str	r4, [r5, #0]
      txCharacteristic.setValue("\nCredentials are currently stored for:\n[");
   d4c68:	4927      	ldr	r1, [pc, #156]	; (d4d08 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e8>)
   d4c6a:	4820      	ldr	r0, [pc, #128]	; (d4cec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
      networkCount = WiFi.getCredentials(networks, 5);
   d4c6c:	4e27      	ldr	r6, [pc, #156]	; (d4d0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ec>)
   d4c6e:	4c1e      	ldr	r4, [pc, #120]	; (d4ce8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
        txCharacteristic.setValue(networkBuffer);
   d4c70:	f8df 8078 	ldr.w	r8, [pc, #120]	; d4cec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>
        txCharacteristic.setValue(",\n");
   d4c74:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d4d1c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2fc>
      txCharacteristic.setValue("\nCredentials are currently stored for:\n[");
   d4c78:	2200      	movs	r2, #0
   d4c7a:	f002 fb76 	bl	d736a <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      networkCount = WiFi.getCredentials(networks, 5);
   d4c7e:	4924      	ldr	r1, [pc, #144]	; (d4d10 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f0>)
   d4c80:	4820      	ldr	r0, [pc, #128]	; (d4d04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   d4c82:	2205      	movs	r2, #5
   d4c84:	f004 f9b8 	bl	d8ff8 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>
   d4c88:	4921      	ldr	r1, [pc, #132]	; (d4d10 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f0>)
   d4c8a:	6030      	str	r0, [r6, #0]
      for(int i = 0; i < networkCount - 1; i++){
   d4c8c:	2700      	movs	r7, #0
   d4c8e:	468a      	mov	sl, r1
   d4c90:	6833      	ldr	r3, [r6, #0]
   d4c92:	3b01      	subs	r3, #1
   d4c94:	42bb      	cmp	r3, r7
   d4c96:	f101 0b38 	add.w	fp, r1, #56	; 0x38
   d4c9a:	dd87      	ble.n	d4bac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18c>
        networkBuffer = networks[i].ssid;
   d4c9c:	3104      	adds	r1, #4
   d4c9e:	4620      	mov	r0, r4
   d4ca0:	f001 feeb 	bl	d6a7a <_ZN6StringaSEPKc>
        Serial.println(networkBuffer.length());
   d4ca4:	f003 fd68 	bl	d8778 <_Z16_fetch_usbserialv>
   d4ca8:	68a1      	ldr	r1, [r4, #8]
   d4caa:	220a      	movs	r2, #10
   d4cac:	f7ff fe96 	bl	d49dc <_ZN5Print7printlnIjLi0EEEjT_i>
        txCharacteristic.setValue(networkBuffer);
   d4cb0:	2200      	movs	r2, #0
   d4cb2:	4621      	mov	r1, r4
   d4cb4:	4640      	mov	r0, r8
   d4cb6:	f002 fb53 	bl	d7360 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        txCharacteristic.setValue(",\n");
   d4cba:	4649      	mov	r1, r9
   d4cbc:	2200      	movs	r2, #0
   d4cbe:	4640      	mov	r0, r8
   d4cc0:	f002 fb53 	bl	d736a <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      for(int i = 0; i < networkCount - 1; i++){
   d4cc4:	3701      	adds	r7, #1
   d4cc6:	4659      	mov	r1, fp
   d4cc8:	e7e2      	b.n	d4c90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x270>
        txCharacteristic.setValue("\nEnter network password: ");
   d4cca:	4912      	ldr	r1, [pc, #72]	; (d4d14 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f4>)
   d4ccc:	e782      	b.n	d4bd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
   d4cce:	bf00      	nop
   d4cd0:	2003dfb0 	.word	0x2003dfb0
   d4cd4:	000da68d 	.word	0x000da68d
   d4cd8:	2003e3d4 	.word	0x2003e3d4
   d4cdc:	2003ded8 	.word	0x2003ded8
   d4ce0:	2003ded4 	.word	0x2003ded4
   d4ce4:	2003dfb4 	.word	0x2003dfb4
   d4ce8:	2003e410 	.word	0x2003e410
   d4cec:	2003e610 	.word	0x2003e610
   d4cf0:	000da5c3 	.word	0x000da5c3
   d4cf4:	2003e5e4 	.word	0x2003e5e4
   d4cf8:	000da608 	.word	0x000da608
   d4cfc:	000da61b 	.word	0x000da61b
   d4d00:	000da641 	.word	0x000da641
   d4d04:	2003e7bc 	.word	0x2003e7bc
   d4d08:	000da597 	.word	0x000da597
   d4d0c:	2003e420 	.word	0x2003e420
   d4d10:	2003e424 	.word	0x2003e424
   d4d14:	000da647 	.word	0x000da647
   d4d18:	2003e540 	.word	0x2003e540
   d4d1c:	000da5c0 	.word	0x000da5c0
        operator const char*() const { return c_str(); }
   d4d20:	4cb8      	ldr	r4, [pc, #736]	; (d5004 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e4>)
      Serial.println(password);
   d4d22:	f003 fd29 	bl	d8778 <_Z16_fetch_usbserialv>
   d4d26:	6821      	ldr	r1, [r4, #0]
   d4d28:	f003 fa27 	bl	d817a <_ZN5Print7printlnEPKc>
      Serial.println(password.length());
   d4d2c:	f003 fd24 	bl	d8778 <_Z16_fetch_usbserialv>
   d4d30:	68a1      	ldr	r1, [r4, #8]
   d4d32:	220a      	movs	r2, #10
   d4d34:	f7ff fe52 	bl	d49dc <_ZN5Print7printlnIjLi0EEEjT_i>
   d4d38:	4bb3      	ldr	r3, [pc, #716]	; (d5008 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e8>)
   d4d3a:	6826      	ldr	r6, [r4, #0]
   d4d3c:	f8d3 8000 	ldr.w	r8, [r3]
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d4d40:	f1b8 0f00 	cmp.w	r8, #0
   d4d44:	d03c      	beq.n	d4dc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a0>
   d4d46:	4640      	mov	r0, r8
   d4d48:	f005 fb1a 	bl	da380 <strlen>
   d4d4c:	4607      	mov	r7, r0
   d4d4e:	2e00      	cmp	r6, #0
   d4d50:	d038      	beq.n	d4dc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a4>
   d4d52:	4630      	mov	r0, r6
   d4d54:	f005 fb14 	bl	da380 <strlen>
   d4d58:	4604      	mov	r4, r0
        memset(&creds, 0, sizeof(creds));
   d4d5a:	2238      	movs	r2, #56	; 0x38
   d4d5c:	2100      	movs	r1, #0
   d4d5e:	a806      	add	r0, sp, #24
   d4d60:	f005 fad0 	bl	da304 <memset>
        creds.size = sizeof(creds);
   d4d64:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   d4d66:	e9cd 3801 	strd	r3, r8, [sp, #4]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d4d6a:	48a8      	ldr	r0, [pc, #672]	; (d500c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
        creds.password_len = passwordLen;
   d4d6c:	9405      	str	r4, [sp, #20]
        creds.security = WLanSecurityType(security);
   d4d6e:	2303      	movs	r3, #3
   d4d70:	f8ad 3018 	strh.w	r3, [sp, #24]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d4d74:	2300      	movs	r3, #0
   d4d76:	aa01      	add	r2, sp, #4
   d4d78:	4619      	mov	r1, r3
   d4d7a:	6840      	ldr	r0, [r0, #4]
        creds.password = password;
   d4d7c:	e9cd 7603 	strd	r7, r6, [sp, #12]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d4d80:	f001 fab8 	bl	d62f4 <network_set_credentials>
      Serial.println("\n\nCredentials set with ssid: " + ssid + "\npassword: " + password + "\n\n");
   d4d84:	f003 fcf8 	bl	d8778 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d4d88:	49a1      	ldr	r1, [pc, #644]	; (d5010 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f0>)
   d4d8a:	4604      	mov	r4, r0
   d4d8c:	a801      	add	r0, sp, #4
   d4d8e:	f001 fe2c 	bl	d69ea <_ZN6StringC1EPKc>
   d4d92:	499d      	ldr	r1, [pc, #628]	; (d5008 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e8>)
   d4d94:	a801      	add	r0, sp, #4
   d4d96:	f001 feea 	bl	d6b6e <_ZplRK15StringSumHelperRK6String>
   d4d9a:	499e      	ldr	r1, [pc, #632]	; (d5014 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   d4d9c:	f001 fef3 	bl	d6b86 <_ZplRK15StringSumHelperPKc>
   d4da0:	4998      	ldr	r1, [pc, #608]	; (d5004 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e4>)
   d4da2:	f001 fee4 	bl	d6b6e <_ZplRK15StringSumHelperRK6String>
   d4da6:	499c      	ldr	r1, [pc, #624]	; (d5018 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f8>)
   d4da8:	f001 feed 	bl	d6b86 <_ZplRK15StringSumHelperPKc>
   d4dac:	6801      	ldr	r1, [r0, #0]
   d4dae:	4620      	mov	r0, r4
   d4db0:	f003 f9e3 	bl	d817a <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   d4db4:	a801      	add	r0, sp, #4
   d4db6:	f001 fdcd 	bl	d6954 <_ZN6StringD1Ev>
      txCharacteristic.setValue("\nEnter 'test' to test credentials (blank to skip): ");
   d4dba:	4998      	ldr	r1, [pc, #608]	; (d501c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5fc>)
   d4dbc:	2200      	movs	r2, #0
   d4dbe:	e709      	b.n	d4bd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d4dc0:	4647      	mov	r7, r8
   d4dc2:	e7c4      	b.n	d4d4e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x32e>
   d4dc4:	4634      	mov	r4, r6
   d4dc6:	e7c8      	b.n	d4d5a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x33a>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4dc8:	4995      	ldr	r1, [pc, #596]	; (d5020 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x600>)
   d4dca:	4896      	ldr	r0, [pc, #600]	; (d5024 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x604>)
   d4dcc:	f001 fef0 	bl	d6bb0 <_ZNK6String6equalsEPKc>
      if(inputBuffer == "test" && WiFi.hasCredentials()){
   d4dd0:	2800      	cmp	r0, #0
   d4dd2:	f43f af1c 	beq.w	d4c0e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ee>
        return network_has_credentials(*this, 0, NULL);
   d4dd6:	4c8d      	ldr	r4, [pc, #564]	; (d500c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   d4dd8:	2200      	movs	r2, #0
   d4dda:	6860      	ldr	r0, [r4, #4]
   d4ddc:	4611      	mov	r1, r2
   d4dde:	f001 fa81 	bl	d62e4 <network_has_credentials>
   d4de2:	2800      	cmp	r0, #0
   d4de4:	f43f af13 	beq.w	d4c0e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ee>
   d4de8:	f000 ff92 	bl	d5d10 <HAL_Timer_Get_Milli_Seconds>
        t4 = millis();
   d4dec:	4e8e      	ldr	r6, [pc, #568]	; (d5028 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x608>)
   d4dee:	6030      	str	r0, [r6, #0]
        WiFi.on();
   d4df0:	4620      	mov	r0, r4
   d4df2:	f7ff f9e5 	bl	d41c0 <_ZN5spark9WiFiClass2onEv>
        WiFi.connect();
   d4df6:	2100      	movs	r1, #0
   d4df8:	4620      	mov	r0, r4
   d4dfa:	f7ff f9ed 	bl	d41d8 <_ZN5spark9WiFiClass7connectEj>
        while(WiFi.connecting() || !WiFi.ready()){
   d4dfe:	4627      	mov	r7, r4
          if(millis() >= t4 + WIFI_TEST_TIMEOUT){
   d4e00:	f247 5830 	movw	r8, #30000	; 0x7530
        return network_connecting(*this, 0, NULL);
   d4e04:	2200      	movs	r2, #0
   d4e06:	6860      	ldr	r0, [r4, #4]
   d4e08:	4611      	mov	r1, r2
   d4e0a:	f001 fa33 	bl	d6274 <network_connecting>
        while(WiFi.connecting() || !WiFi.ready()){
   d4e0e:	b308      	cbz	r0, d4e54 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x434>
   d4e10:	f000 ff7e 	bl	d5d10 <HAL_Timer_Get_Milli_Seconds>
          if(millis() >= t4 + WIFI_TEST_TIMEOUT){
   d4e14:	6833      	ldr	r3, [r6, #0]
   d4e16:	4443      	add	r3, r8
   d4e18:	4283      	cmp	r3, r0
   d4e1a:	d8f3      	bhi.n	d4e04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3e4>
            wifiTest = false;
   d4e1c:	4b83      	ldr	r3, [pc, #524]	; (d502c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60c>)
   d4e1e:	2200      	movs	r2, #0
   d4e20:	701a      	strb	r2, [r3, #0]
            Serial.println("timeout");
   d4e22:	f003 fca9 	bl	d8778 <_Z16_fetch_usbserialv>
   d4e26:	4982      	ldr	r1, [pc, #520]	; (d5030 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x610>)
   d4e28:	f003 f9a7 	bl	d817a <_ZN5Print7printlnEPKc>
            Serial.println(millis());
   d4e2c:	f003 fca4 	bl	d8778 <_Z16_fetch_usbserialv>
   d4e30:	4604      	mov	r4, r0
   d4e32:	f000 ff6d 	bl	d5d10 <HAL_Timer_Get_Milli_Seconds>
   d4e36:	220a      	movs	r2, #10
   d4e38:	4601      	mov	r1, r0
   d4e3a:	4620      	mov	r0, r4
   d4e3c:	f003 f9a7 	bl	d818e <_ZN5Print11printNumberEmh>
        n += println();
   d4e40:	4620      	mov	r0, r4
   d4e42:	f003 f98e 	bl	d8162 <_ZN5Print7printlnEv>
            Serial.println(t4);
   d4e46:	f003 fc97 	bl	d8778 <_Z16_fetch_usbserialv>
   d4e4a:	6831      	ldr	r1, [r6, #0]
   d4e4c:	220a      	movs	r2, #10
   d4e4e:	f7ff fadf 	bl	d4410 <_ZN5Print7printlnIiLi0EEEjT_i>
            break;
   d4e52:	e004      	b.n	d4e5e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x43e>
        while(WiFi.connecting() || !WiFi.ready()){
   d4e54:	4638      	mov	r0, r7
   d4e56:	f7ff f9c4 	bl	d41e2 <_ZN5spark9WiFiClass5readyEv>
   d4e5a:	2800      	cmp	r0, #0
   d4e5c:	d0d8      	beq.n	d4e10 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3f0>
        if(wifiTest){
   d4e5e:	4e73      	ldr	r6, [pc, #460]	; (d502c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60c>)
        WiFi.off();
   d4e60:	486a      	ldr	r0, [pc, #424]	; (d500c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   d4e62:	f7ff f9b3 	bl	d41cc <_ZN5spark9WiFiClass3offEv>
        if(wifiTest){
   d4e66:	7834      	ldrb	r4, [r6, #0]
   d4e68:	b12c      	cbz	r4, d4e76 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x456>
          txCharacteristic.setValue("Success!\n");
   d4e6a:	4972      	ldr	r1, [pc, #456]	; (d5034 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x614>)
   d4e6c:	4872      	ldr	r0, [pc, #456]	; (d5038 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x618>)
   d4e6e:	2200      	movs	r2, #0
   d4e70:	f002 fa7b 	bl	d736a <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
   d4e74:	e6cb      	b.n	d4c0e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ee>
          txCharacteristic.setValue("ERROR: WiFi connection timeout\n");
   d4e76:	4971      	ldr	r1, [pc, #452]	; (d503c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x61c>)
   d4e78:	486f      	ldr	r0, [pc, #444]	; (d5038 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x618>)
   d4e7a:	4622      	mov	r2, r4
   d4e7c:	f002 fa75 	bl	d736a <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
          wifiTest = true;
   d4e80:	2301      	movs	r3, #1
          count = 0;
   d4e82:	602c      	str	r4, [r5, #0]
          wifiTest = true;
   d4e84:	7033      	strb	r3, [r6, #0]
          goto SSID;
   d4e86:	e6ef      	b.n	d4c68 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x248>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4e88:	496d      	ldr	r1, [pc, #436]	; (d5040 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x620>)
   d4e8a:	4866      	ldr	r0, [pc, #408]	; (d5024 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x604>)
   d4e8c:	f001 fe90 	bl	d6bb0 <_ZNK6String6equalsEPKc>
      if(inputBuffer != ""){
   d4e90:	4604      	mov	r4, r0
   d4e92:	b958      	cbnz	r0, d4eac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48c>
        EEPROM.put(0, dsid);
   d4e94:	f004 fa16 	bl	d92c4 <_Z21__fetch_global_EEPROMv>

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4e98:	496a      	ldr	r1, [pc, #424]	; (d5044 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x624>)
   d4e9a:	2204      	movs	r2, #4
   d4e9c:	4620      	mov	r0, r4
   d4e9e:	f000 ff4f 	bl	d5d40 <HAL_EEPROM_Put>
        Serial.println("dsid entered");
   d4ea2:	f003 fc69 	bl	d8778 <_Z16_fetch_usbserialv>
   d4ea6:	4968      	ldr	r1, [pc, #416]	; (d5048 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x628>)
   d4ea8:	f003 f967 	bl	d817a <_ZN5Print7printlnEPKc>
      EEPROM.get(0, dsid);
   d4eac:	f004 fa0a 	bl	d92c4 <_Z21__fetch_global_EEPROMv>
   d4eb0:	4964      	ldr	r1, [pc, #400]	; (d5044 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x624>)
      EEPROM.get(100, sleepDuration);
   d4eb2:	4c66      	ldr	r4, [pc, #408]	; (d504c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x62c>)
      EEPROM.get(0, dsid);
   d4eb4:	2000      	movs	r0, #0
   d4eb6:	f7ff f95a 	bl	d416e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
      Serial.println("dsid: " + dsid);
   d4eba:	f003 fc5d 	bl	d8778 <_Z16_fetch_usbserialv>
   d4ebe:	683b      	ldr	r3, [r7, #0]
   d4ec0:	4963      	ldr	r1, [pc, #396]	; (d5050 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x630>)
   d4ec2:	4419      	add	r1, r3
   d4ec4:	f003 f959 	bl	d817a <_ZN5Print7printlnEPKc>
      EEPROM.get(100, sleepDuration);
   d4ec8:	f004 f9fc 	bl	d92c4 <_Z21__fetch_global_EEPROMv>
   d4ecc:	4621      	mov	r1, r4
   d4ece:	2064      	movs	r0, #100	; 0x64
   d4ed0:	f7ff f94d 	bl	d416e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
      txCharacteristic.setValue("\nCurrent value for data collection interval is [");
   d4ed4:	495f      	ldr	r1, [pc, #380]	; (d5054 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x634>)
   d4ed6:	4858      	ldr	r0, [pc, #352]	; (d5038 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x618>)
   d4ed8:	2200      	movs	r2, #0
   d4eda:	f002 fa46 	bl	d736a <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(sleepDuration != -1){
   d4ede:	6821      	ldr	r1, [r4, #0]
   d4ee0:	1c48      	adds	r0, r1, #1
   d4ee2:	d00b      	beq.n	d4efc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4dc>
        txCharacteristic.setValue(String(sleepDuration));
   d4ee4:	220a      	movs	r2, #10
   d4ee6:	a801      	add	r0, sp, #4
   d4ee8:	f001 fdd9 	bl	d6a9e <_ZN6StringC1Eih>
   d4eec:	4852      	ldr	r0, [pc, #328]	; (d5038 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x618>)
   d4eee:	2200      	movs	r2, #0
   d4ef0:	a901      	add	r1, sp, #4
   d4ef2:	f002 fa35 	bl	d7360 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   d4ef6:	a801      	add	r0, sp, #4
   d4ef8:	f001 fd2c 	bl	d6954 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between data collection as an integer in milliseconds (blank to skip): ");
   d4efc:	4956      	ldr	r1, [pc, #344]	; (d5058 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x638>)
   d4efe:	2200      	movs	r2, #0
   d4f00:	e668      	b.n	d4bd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4f02:	494f      	ldr	r1, [pc, #316]	; (d5040 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x620>)
   d4f04:	4847      	ldr	r0, [pc, #284]	; (d5024 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x604>)
   d4f06:	f001 fe53 	bl	d6bb0 <_ZNK6String6equalsEPKc>
      if(inputBuffer == ""){
   d4f0a:	b128      	cbz	r0, d4f18 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4f8>
        EEPROM.get(100, sleepDuration);
   d4f0c:	f004 f9da 	bl	d92c4 <_Z21__fetch_global_EEPROMv>
   d4f10:	494e      	ldr	r1, [pc, #312]	; (d504c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x62c>)
   d4f12:	2064      	movs	r0, #100	; 0x64
   d4f14:	f7ff f92b 	bl	d416e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
      EEPROM.put(100, sleepDuration);
   d4f18:	f004 f9d4 	bl	d92c4 <_Z21__fetch_global_EEPROMv>
   d4f1c:	2204      	movs	r2, #4
   d4f1e:	494b      	ldr	r1, [pc, #300]	; (d504c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x62c>)
   d4f20:	2064      	movs	r0, #100	; 0x64
   d4f22:	f000 ff0d 	bl	d5d40 <HAL_EEPROM_Put>
      EEPROM.get(100, sleepDuration);
   d4f26:	f004 f9cd 	bl	d92c4 <_Z21__fetch_global_EEPROMv>
   d4f2a:	4948      	ldr	r1, [pc, #288]	; (d504c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x62c>)
   d4f2c:	2064      	movs	r0, #100	; 0x64
   d4f2e:	f7ff f91e 	bl	d416e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
        if (valid_) {
   d4f32:	4b4a      	ldr	r3, [pc, #296]	; (d505c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x63c>)
   d4f34:	7d1a      	ldrb	r2, [r3, #20]
   d4f36:	b10a      	cbz	r2, d4f3c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x51c>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4f38:	2202      	movs	r2, #2
   d4f3a:	721a      	strb	r2, [r3, #8]
      config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration - SLEEP_DELAY);
   d4f3c:	6839      	ldr	r1, [r7, #0]
      EEPROM.get(200, wifiInterval);
   d4f3e:	4c48      	ldr	r4, [pc, #288]	; (d5060 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x640>)
      config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration - SLEEP_DELAY);
   d4f40:	4846      	ldr	r0, [pc, #280]	; (d505c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x63c>)
   d4f42:	3946      	subs	r1, #70	; 0x46
   d4f44:	f7ff f952 	bl	d41ec <_ZN8particle24SystemSleepConfiguration8durationEm>
      Serial.println(sleepDuration);
   d4f48:	f003 fc16 	bl	d8778 <_Z16_fetch_usbserialv>
   d4f4c:	220a      	movs	r2, #10
   d4f4e:	6839      	ldr	r1, [r7, #0]
   d4f50:	f7ff fa5e 	bl	d4410 <_ZN5Print7printlnIiLi0EEEjT_i>
      EEPROM.get(200, wifiInterval);
   d4f54:	f004 f9b6 	bl	d92c4 <_Z21__fetch_global_EEPROMv>
   d4f58:	4621      	mov	r1, r4
   d4f5a:	20c8      	movs	r0, #200	; 0xc8
   d4f5c:	f7ff f907 	bl	d416e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
      txCharacteristic.setValue("\nCurrent value for WiFi connection interval is [");
   d4f60:	2200      	movs	r2, #0
   d4f62:	4940      	ldr	r1, [pc, #256]	; (d5064 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x644>)
   d4f64:	4834      	ldr	r0, [pc, #208]	; (d5038 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x618>)
   d4f66:	f002 fa00 	bl	d736a <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(wifiInterval != -1){
   d4f6a:	6823      	ldr	r3, [r4, #0]
   d4f6c:	1c5a      	adds	r2, r3, #1
   d4f6e:	d00f      	beq.n	d4f90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x570>
        txCharacteristic.setValue(String(wifiInterval / 1000));
   d4f70:	220a      	movs	r2, #10
   d4f72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4f76:	a801      	add	r0, sp, #4
   d4f78:	fb93 f1f1 	sdiv	r1, r3, r1
   d4f7c:	f001 fd8f 	bl	d6a9e <_ZN6StringC1Eih>
   d4f80:	482d      	ldr	r0, [pc, #180]	; (d5038 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x618>)
   d4f82:	2200      	movs	r2, #0
   d4f84:	a901      	add	r1, sp, #4
   d4f86:	f002 f9eb 	bl	d7360 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   d4f8a:	a801      	add	r0, sp, #4
   d4f8c:	f001 fce2 	bl	d6954 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between WiFi connections as an integer in seconds (blank to skip): ");
   d4f90:	4935      	ldr	r1, [pc, #212]	; (d5068 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x648>)
   d4f92:	2200      	movs	r2, #0
   d4f94:	e61e      	b.n	d4bd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
   d4f96:	492a      	ldr	r1, [pc, #168]	; (d5040 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x620>)
   d4f98:	4822      	ldr	r0, [pc, #136]	; (d5024 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x604>)
   d4f9a:	f001 fe09 	bl	d6bb0 <_ZNK6String6equalsEPKc>
      if(inputBuffer == ""){
   d4f9e:	b128      	cbz	r0, d4fac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58c>
        EEPROM.get(200, wifiInterval);
   d4fa0:	f004 f990 	bl	d92c4 <_Z21__fetch_global_EEPROMv>
   d4fa4:	492e      	ldr	r1, [pc, #184]	; (d5060 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x640>)
   d4fa6:	20c8      	movs	r0, #200	; 0xc8
   d4fa8:	f7ff f8e1 	bl	d416e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
      EEPROM.put(200, wifiInterval);
   d4fac:	f004 f98a 	bl	d92c4 <_Z21__fetch_global_EEPROMv>
   d4fb0:	2204      	movs	r2, #4
   d4fb2:	492b      	ldr	r1, [pc, #172]	; (d5060 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x640>)
   d4fb4:	20c8      	movs	r0, #200	; 0xc8
   d4fb6:	f000 fec3 	bl	d5d40 <HAL_EEPROM_Put>
      EEPROM.get(200, wifiInterval);
   d4fba:	f004 f983 	bl	d92c4 <_Z21__fetch_global_EEPROMv>
   d4fbe:	4928      	ldr	r1, [pc, #160]	; (d5060 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x640>)
   d4fc0:	20c8      	movs	r0, #200	; 0xc8
   d4fc2:	f7ff f8d4 	bl	d416e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
      wifiTimeLeft = wifiInterval;
   d4fc6:	4b29      	ldr	r3, [pc, #164]	; (d506c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64c>)
   d4fc8:	683a      	ldr	r2, [r7, #0]
   d4fca:	601a      	str	r2, [r3, #0]
      Serial.println(wifiInterval);
   d4fcc:	f003 fbd4 	bl	d8778 <_Z16_fetch_usbserialv>
   d4fd0:	6839      	ldr	r1, [r7, #0]
   d4fd2:	220a      	movs	r2, #10
   d4fd4:	f7ff fa1c 	bl	d4410 <_ZN5Print7printlnIiLi0EEEjT_i>
      txCharacteristic.setValue("\nEnter 'ota' to wait for OTA update (blank to skip): ");
   d4fd8:	4925      	ldr	r1, [pc, #148]	; (d5070 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x650>)
   d4fda:	2200      	movs	r2, #0
   d4fdc:	e5fa      	b.n	d4bd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>
   d4fde:	4925      	ldr	r1, [pc, #148]	; (d5074 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x654>)
   d4fe0:	4810      	ldr	r0, [pc, #64]	; (d5024 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x604>)
   d4fe2:	f001 fde5 	bl	d6bb0 <_ZNK6String6equalsEPKc>
      if(inputBuffer == "ota"){
   d4fe6:	b120      	cbz	r0, d4ff2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d2>
        System.updatesEnabled();
   d4fe8:	f7ff f8a6 	bl	d4138 <_ZN11SystemClass14updatesEnabledEv.isra.0>
        ota = true;
   d4fec:	4b22      	ldr	r3, [pc, #136]	; (d5078 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x658>)
   d4fee:	2201      	movs	r2, #1
   d4ff0:	701a      	strb	r2, [r3, #0]
      bleInput = true;
   d4ff2:	4b22      	ldr	r3, [pc, #136]	; (d507c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x65c>)
   d4ff4:	2201      	movs	r2, #1
      digitalWrite(D7, LOW);
   d4ff6:	2100      	movs	r1, #0
   d4ff8:	2007      	movs	r0, #7
      bleInput = true;
   d4ffa:	701a      	strb	r2, [r3, #0]
      digitalWrite(D7, LOW);
   d4ffc:	f004 f935 	bl	d926a <digitalWrite>
   d5000:	e5eb      	b.n	d4bda <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ba>
   d5002:	bf00      	nop
   d5004:	2003e540 	.word	0x2003e540
   d5008:	2003e5e4 	.word	0x2003e5e4
   d500c:	2003e7bc 	.word	0x2003e7bc
   d5010:	000da661 	.word	0x000da661
   d5014:	000da67f 	.word	0x000da67f
   d5018:	000da68b 	.word	0x000da68b
   d501c:	000da68e 	.word	0x000da68e
   d5020:	000da6c2 	.word	0x000da6c2
   d5024:	2003e3d4 	.word	0x2003e3d4
   d5028:	2003e600 	.word	0x2003e600
   d502c:	2003dedc 	.word	0x2003dedc
   d5030:	000da6c7 	.word	0x000da6c7
   d5034:	000da6cf 	.word	0x000da6cf
   d5038:	2003e610 	.word	0x2003e610
   d503c:	000da6d9 	.word	0x000da6d9
   d5040:	000da68d 	.word	0x000da68d
   d5044:	2003dfb4 	.word	0x2003dfb4
   d5048:	000da6f9 	.word	0x000da6f9
   d504c:	2003ded4 	.word	0x2003ded4
   d5050:	000da706 	.word	0x000da706
   d5054:	000da70d 	.word	0x000da70d
   d5058:	000da73e 	.word	0x000da73e
   d505c:	2003df98 	.word	0x2003df98
   d5060:	2003ded8 	.word	0x2003ded8
   d5064:	000da793 	.word	0x000da793
   d5068:	000da7c4 	.word	0x000da7c4
   d506c:	2003e62c 	.word	0x2003e62c
   d5070:	000da815 	.word	0x000da815
   d5074:	000da84b 	.word	0x000da84b
   d5078:	2003e53c 	.word	0x2003e53c
   d507c:	2003df94 	.word	0x2003df94

000d5080 <_ZN15Adafruit_LIS3DHD0Ev>:
   d5080:	b510      	push	{r4, lr}
   d5082:	212c      	movs	r1, #44	; 0x2c
   d5084:	4604      	mov	r4, r0
   d5086:	f004 f978 	bl	d937a <_ZdlPvj>
   d508a:	4620      	mov	r0, r4
   d508c:	bd10      	pop	{r4, pc}
	...

000d5090 <_GLOBAL__sub_I_SystemMode>:
   d5090:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
   d5092:	4d76      	ldr	r5, [pc, #472]	; (d526c <_GLOBAL__sub_I_SystemMode+0x1dc>)
    SleepResult() {}
   d5094:	4b76      	ldr	r3, [pc, #472]	; (d5270 <_GLOBAL__sub_I_SystemMode+0x1e0>)
   d5096:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5098:	2400      	movs	r4, #0
   d509a:	b090      	sub	sp, #64	; 0x40
   d509c:	602c      	str	r4, [r5, #0]
   d509e:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d50a0:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d50a2:	2003      	movs	r0, #3
   d50a4:	f001 f8a0 	bl	d61e8 <set_system_mode>
SYSTEM_MODE(MANUAL)
   d50a8:	4a72      	ldr	r2, [pc, #456]	; (d5274 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d50aa:	4973      	ldr	r1, [pc, #460]	; (d5278 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   d50ac:	4628      	mov	r0, r5
   d50ae:	f004 f95f 	bl	d9370 <__aeabi_atexit>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d50b2:	f004 f873 	bl	d919c <spark_protocol_instance>
   d50b6:	4623      	mov	r3, r4
   d50b8:	4622      	mov	r2, r4
   d50ba:	f643 3139 	movw	r1, #15161	; 0x3b39
   d50be:	f004 f875 	bl	d91ac <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d50c2:	f004 f86b 	bl	d919c <spark_protocol_instance>
   d50c6:	4623      	mov	r3, r4
   d50c8:	4622      	mov	r2, r4
   d50ca:	2102      	movs	r1, #2
   d50cc:	f004 f876 	bl	d91bc <spark_protocol_set_product_firmware_version>
String payload, prevPayload = "";
   d50d0:	496a      	ldr	r1, [pc, #424]	; (d527c <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d50d2:	486b      	ldr	r0, [pc, #428]	; (d5280 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d50d4:	4d6b      	ldr	r5, [pc, #428]	; (d5284 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d50d6:	f001 fc88 	bl	d69ea <_ZN6StringC1EPKc>
   d50da:	4a66      	ldr	r2, [pc, #408]	; (d5274 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d50dc:	496a      	ldr	r1, [pc, #424]	; (d5288 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d50de:	4868      	ldr	r0, [pc, #416]	; (d5280 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d50e0:	f004 f946 	bl	d9370 <__aeabi_atexit>
   d50e4:	4965      	ldr	r1, [pc, #404]	; (d527c <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d50e6:	4869      	ldr	r0, [pc, #420]	; (d528c <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d50e8:	f001 fc7f 	bl	d69ea <_ZN6StringC1EPKc>
   d50ec:	4a61      	ldr	r2, [pc, #388]	; (d5274 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d50ee:	4966      	ldr	r1, [pc, #408]	; (d5288 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d50f0:	4866      	ldr	r0, [pc, #408]	; (d528c <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d50f2:	f004 f93d 	bl	d9370 <__aeabi_atexit>
String unixTime;
   d50f6:	4961      	ldr	r1, [pc, #388]	; (d527c <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d50f8:	4865      	ldr	r0, [pc, #404]	; (d5290 <_GLOBAL__sub_I_SystemMode+0x200>)
   d50fa:	f001 fc76 	bl	d69ea <_ZN6StringC1EPKc>
   d50fe:	4a5d      	ldr	r2, [pc, #372]	; (d5274 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d5100:	4961      	ldr	r1, [pc, #388]	; (d5288 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d5102:	4863      	ldr	r0, [pc, #396]	; (d5290 <_GLOBAL__sub_I_SystemMode+0x200>)
   d5104:	f004 f934 	bl	d9370 <__aeabi_atexit>
String ssid, password = "";
   d5108:	495c      	ldr	r1, [pc, #368]	; (d527c <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d510a:	4862      	ldr	r0, [pc, #392]	; (d5294 <_GLOBAL__sub_I_SystemMode+0x204>)
   d510c:	f001 fc6d 	bl	d69ea <_ZN6StringC1EPKc>
   d5110:	4a58      	ldr	r2, [pc, #352]	; (d5274 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d5112:	495d      	ldr	r1, [pc, #372]	; (d5288 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d5114:	485f      	ldr	r0, [pc, #380]	; (d5294 <_GLOBAL__sub_I_SystemMode+0x204>)
   d5116:	f004 f92b 	bl	d9370 <__aeabi_atexit>
   d511a:	4958      	ldr	r1, [pc, #352]	; (d527c <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d511c:	485e      	ldr	r0, [pc, #376]	; (d5298 <_GLOBAL__sub_I_SystemMode+0x208>)
   d511e:	f001 fc64 	bl	d69ea <_ZN6StringC1EPKc>
   d5122:	4a54      	ldr	r2, [pc, #336]	; (d5274 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d5124:	4958      	ldr	r1, [pc, #352]	; (d5288 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d5126:	485c      	ldr	r0, [pc, #368]	; (d5298 <_GLOBAL__sub_I_SystemMode+0x208>)
   d5128:	f004 f922 	bl	d9370 <__aeabi_atexit>
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d512c:	485b      	ldr	r0, [pc, #364]	; (d529c <_GLOBAL__sub_I_SystemMode+0x20c>)
   d512e:	f000 f911 	bl	d5354 <_ZN15Adafruit_LIS3DHC1Ev>
   d5132:	4a50      	ldr	r2, [pc, #320]	; (d5274 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d5134:	495a      	ldr	r1, [pc, #360]	; (d52a0 <_GLOBAL__sub_I_SystemMode+0x210>)
   d5136:	4859      	ldr	r0, [pc, #356]	; (d529c <_GLOBAL__sub_I_SystemMode+0x20c>)
   d5138:	f004 f91a 	bl	d9370 <__aeabi_atexit>
        : config_(config) {
   d513c:	4859      	ldr	r0, [pc, #356]	; (d52a4 <_GLOBAL__sub_I_SystemMode+0x214>)
SystemSleepConfiguration config;
   d513e:	495a      	ldr	r1, [pc, #360]	; (d52a8 <_GLOBAL__sub_I_SystemMode+0x218>)
              valid_(true) {
   d5140:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d5144:	4603      	mov	r3, r0
   d5146:	1d02      	adds	r2, r0, #4
   d5148:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d514c:	709c      	strb	r4, [r3, #2]
   d514e:	2301      	movs	r3, #1
   d5150:	7503      	strb	r3, [r0, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d5152:	4b56      	ldr	r3, [pc, #344]	; (d52ac <_GLOBAL__sub_I_SystemMode+0x21c>)
   d5154:	6043      	str	r3, [r0, #4]
   d5156:	4a47      	ldr	r2, [pc, #284]	; (d5274 <_GLOBAL__sub_I_SystemMode+0x1e4>)
        config_.mode = HAL_SLEEP_MODE_NONE;
   d5158:	7204      	strb	r4, [r0, #8]
        config_.wakeup_sources = nullptr;
   d515a:	e9c0 4403 	strd	r4, r4, [r0, #12]
   d515e:	f004 f907 	bl	d9370 <__aeabi_atexit>
HttpClient http;
   d5162:	4853      	ldr	r0, [pc, #332]	; (d52b0 <_GLOBAL__sub_I_SystemMode+0x220>)
   d5164:	f000 fb45 	bl	d57f2 <_ZN10HttpClientC1Ev>
   d5168:	4a42      	ldr	r2, [pc, #264]	; (d5274 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d516a:	4952      	ldr	r1, [pc, #328]	; (d52b4 <_GLOBAL__sub_I_SystemMode+0x224>)
   d516c:	4850      	ldr	r0, [pc, #320]	; (d52b0 <_GLOBAL__sub_I_SystemMode+0x220>)
   d516e:	f004 f8ff 	bl	d9370 <__aeabi_atexit>
} http_request_t;
   d5172:	4942      	ldr	r1, [pc, #264]	; (d527c <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d5174:	4850      	ldr	r0, [pc, #320]	; (d52b8 <_GLOBAL__sub_I_SystemMode+0x228>)
   d5176:	f001 fc38 	bl	d69ea <_ZN6StringC1EPKc>
   d517a:	4850      	ldr	r0, [pc, #320]	; (d52bc <_GLOBAL__sub_I_SystemMode+0x22c>)
   d517c:	f003 fa4c 	bl	d8618 <_ZN9IPAddressC1Ev>
   d5180:	493e      	ldr	r1, [pc, #248]	; (d527c <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d5182:	484f      	ldr	r0, [pc, #316]	; (d52c0 <_GLOBAL__sub_I_SystemMode+0x230>)
   d5184:	f001 fc31 	bl	d69ea <_ZN6StringC1EPKc>
   d5188:	493c      	ldr	r1, [pc, #240]	; (d527c <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d518a:	484e      	ldr	r0, [pc, #312]	; (d52c4 <_GLOBAL__sub_I_SystemMode+0x234>)
   d518c:	f001 fc2d 	bl	d69ea <_ZN6StringC1EPKc>
http_request_t request;
   d5190:	4a38      	ldr	r2, [pc, #224]	; (d5274 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d5192:	494d      	ldr	r1, [pc, #308]	; (d52c8 <_GLOBAL__sub_I_SystemMode+0x238>)
   d5194:	4848      	ldr	r0, [pc, #288]	; (d52b8 <_GLOBAL__sub_I_SystemMode+0x228>)
   d5196:	f004 f8eb 	bl	d9370 <__aeabi_atexit>
} http_response_t;
   d519a:	4938      	ldr	r1, [pc, #224]	; (d527c <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d519c:	484b      	ldr	r0, [pc, #300]	; (d52cc <_GLOBAL__sub_I_SystemMode+0x23c>)
   d519e:	f001 fc24 	bl	d69ea <_ZN6StringC1EPKc>
http_response_t response;
   d51a2:	4a34      	ldr	r2, [pc, #208]	; (d5274 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d51a4:	494a      	ldr	r1, [pc, #296]	; (d52d0 <_GLOBAL__sub_I_SystemMode+0x240>)
   d51a6:	484b      	ldr	r0, [pc, #300]	; (d52d4 <_GLOBAL__sub_I_SystemMode+0x244>)
   d51a8:	f004 f8e2 	bl	d9370 <__aeabi_atexit>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d51ac:	494a      	ldr	r1, [pc, #296]	; (d52d8 <_GLOBAL__sub_I_SystemMode+0x248>)
   d51ae:	484b      	ldr	r0, [pc, #300]	; (d52dc <_GLOBAL__sub_I_SystemMode+0x24c>)
   d51b0:	f001 fff8 	bl	d71a4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d51b4:	494a      	ldr	r1, [pc, #296]	; (d52e0 <_GLOBAL__sub_I_SystemMode+0x250>)
   d51b6:	484b      	ldr	r0, [pc, #300]	; (d52e4 <_GLOBAL__sub_I_SystemMode+0x254>)
   d51b8:	f001 fff4 	bl	d71a4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d51bc:	494a      	ldr	r1, [pc, #296]	; (d52e8 <_GLOBAL__sub_I_SystemMode+0x258>)
   d51be:	484b      	ldr	r0, [pc, #300]	; (d52ec <_GLOBAL__sub_I_SystemMode+0x25c>)
   d51c0:	f001 fff0 	bl	d71a4 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   d51c4:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d51c6:	4949      	ldr	r1, [pc, #292]	; (d52ec <_GLOBAL__sub_I_SystemMode+0x25c>)
   d51c8:	f88d 3014 	strb.w	r3, [sp, #20]
   d51cc:	a806      	add	r0, sp, #24
   d51ce:	f001 ff03 	bl	d6fd8 <_ZN8particle7BleUuidC1ERKS0_>
   d51d2:	4942      	ldr	r1, [pc, #264]	; (d52dc <_GLOBAL__sub_I_SystemMode+0x24c>)
   d51d4:	a80b      	add	r0, sp, #44	; 0x2c
   d51d6:	f001 feff 	bl	d6fd8 <_ZN8particle7BleUuidC1ERKS0_>
   d51da:	ab0b      	add	r3, sp, #44	; 0x2c
   d51dc:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d51e0:	4943      	ldr	r1, [pc, #268]	; (d52f0 <_GLOBAL__sub_I_SystemMode+0x260>)
   d51e2:	9300      	str	r3, [sp, #0]
   d51e4:	aa05      	add	r2, sp, #20
   d51e6:	ab06      	add	r3, sp, #24
   d51e8:	4842      	ldr	r0, [pc, #264]	; (d52f4 <_GLOBAL__sub_I_SystemMode+0x264>)
   d51ea:	f7ff f8ef 	bl	d43cc <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d51ee:	4a21      	ldr	r2, [pc, #132]	; (d5274 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d51f0:	4941      	ldr	r1, [pc, #260]	; (d52f8 <_GLOBAL__sub_I_SystemMode+0x268>)
   d51f2:	4840      	ldr	r0, [pc, #256]	; (d52f4 <_GLOBAL__sub_I_SystemMode+0x264>)
   d51f4:	f004 f8bc 	bl	d9370 <__aeabi_atexit>
   d51f8:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d51fa:	493a      	ldr	r1, [pc, #232]	; (d52e4 <_GLOBAL__sub_I_SystemMode+0x254>)
   d51fc:	f88d 3014 	strb.w	r3, [sp, #20]
   d5200:	a806      	add	r0, sp, #24
   d5202:	f001 fee9 	bl	d6fd8 <_ZN8particle7BleUuidC1ERKS0_>
   d5206:	4935      	ldr	r1, [pc, #212]	; (d52dc <_GLOBAL__sub_I_SystemMode+0x24c>)
   d5208:	a80b      	add	r0, sp, #44	; 0x2c
   d520a:	f001 fee5 	bl	d6fd8 <_ZN8particle7BleUuidC1ERKS0_>
   d520e:	4b3b      	ldr	r3, [pc, #236]	; (d52fc <_GLOBAL__sub_I_SystemMode+0x26c>)
   d5210:	9301      	str	r3, [sp, #4]
   d5212:	ab0b      	add	r3, sp, #44	; 0x2c
   d5214:	493a      	ldr	r1, [pc, #232]	; (d5300 <_GLOBAL__sub_I_SystemMode+0x270>)
   d5216:	9402      	str	r4, [sp, #8]
   d5218:	9300      	str	r3, [sp, #0]
   d521a:	aa05      	add	r2, sp, #20
   d521c:	ab06      	add	r3, sp, #24
   d521e:	4839      	ldr	r0, [pc, #228]	; (d5304 <_GLOBAL__sub_I_SystemMode+0x274>)
   d5220:	f7ff f8d4 	bl	d43cc <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d5224:	4a13      	ldr	r2, [pc, #76]	; (d5274 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d5226:	4934      	ldr	r1, [pc, #208]	; (d52f8 <_GLOBAL__sub_I_SystemMode+0x268>)
   d5228:	4836      	ldr	r0, [pc, #216]	; (d5304 <_GLOBAL__sub_I_SystemMode+0x274>)
   d522a:	f004 f8a1 	bl	d9370 <__aeabi_atexit>
String inputBuffer;
   d522e:	4913      	ldr	r1, [pc, #76]	; (d527c <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d5230:	4835      	ldr	r0, [pc, #212]	; (d5308 <_GLOBAL__sub_I_SystemMode+0x278>)
   d5232:	f001 fbda 	bl	d69ea <_ZN6StringC1EPKc>
   d5236:	4a0f      	ldr	r2, [pc, #60]	; (d5274 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d5238:	4913      	ldr	r1, [pc, #76]	; (d5288 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d523a:	4833      	ldr	r0, [pc, #204]	; (d5308 <_GLOBAL__sub_I_SystemMode+0x278>)
   d523c:	f004 f898 	bl	d9370 <__aeabi_atexit>
   d5240:	2405      	movs	r4, #5
#ifdef __cplusplus

   WiFiAccessPoint()
   {
       memset(this, 0, sizeof(*this));
       size = sizeof(*this);
   d5242:	2638      	movs	r6, #56	; 0x38
       memset(this, 0, sizeof(*this));
   d5244:	1d28      	adds	r0, r5, #4
   d5246:	2234      	movs	r2, #52	; 0x34
   d5248:	2100      	movs	r1, #0
   d524a:	f005 f85b 	bl	da304 <memset>
WiFiAccessPoint networks[5];
   d524e:	3c01      	subs	r4, #1
       size = sizeof(*this);
   d5250:	f845 6b38 	str.w	r6, [r5], #56
   d5254:	d1f6      	bne.n	d5244 <_GLOBAL__sub_I_SystemMode+0x1b4>
String networkBuffer;
   d5256:	4909      	ldr	r1, [pc, #36]	; (d527c <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d5258:	482c      	ldr	r0, [pc, #176]	; (d530c <_GLOBAL__sub_I_SystemMode+0x27c>)
   d525a:	f001 fbc6 	bl	d69ea <_ZN6StringC1EPKc>
   d525e:	4a05      	ldr	r2, [pc, #20]	; (d5274 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d5260:	4909      	ldr	r1, [pc, #36]	; (d5288 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d5262:	482a      	ldr	r0, [pc, #168]	; (d530c <_GLOBAL__sub_I_SystemMode+0x27c>)
   d5264:	f004 f884 	bl	d9370 <__aeabi_atexit>
   d5268:	b010      	add	sp, #64	; 0x40
   d526a:	bd70      	pop	{r4, r5, r6, pc}
   d526c:	2003df4c 	.word	0x2003df4c
   d5270:	ffff0000 	.word	0xffff0000
   d5274:	2003df48 	.word	0x2003df48
   d5278:	000d41b1 	.word	0x000d41b1
   d527c:	000da68d 	.word	0x000da68d
   d5280:	2003e550 	.word	0x2003e550
   d5284:	2003e424 	.word	0x2003e424
   d5288:	000d6955 	.word	0x000d6955
   d528c:	2003e560 	.word	0x2003e560
   d5290:	2003e618 	.word	0x2003e618
   d5294:	2003e5e4 	.word	0x2003e5e4
   d5298:	2003e540 	.word	0x2003e540
   d529c:	2003e3e4 	.word	0x2003e3e4
   d52a0:	000d40af 	.word	0x000d40af
   d52a4:	2003df98 	.word	0x2003df98
   d52a8:	000d4121 	.word	0x000d4121
   d52ac:	00030010 	.word	0x00030010
   d52b0:	2003dfb8 	.word	0x2003dfb8
   d52b4:	000d417d 	.word	0x000d417d
   d52b8:	2003e57c 	.word	0x2003e57c
   d52bc:	2003e58c 	.word	0x2003e58c
   d52c0:	2003e5a4 	.word	0x2003e5a4
   d52c4:	2003e5b8 	.word	0x2003e5b8
   d52c8:	000d40bf 	.word	0x000d40bf
   d52cc:	2003e5cc 	.word	0x2003e5cc
   d52d0:	000d40b1 	.word	0x000d40b1
   d52d4:	2003e5c8 	.word	0x2003e5c8
   d52d8:	000da84f 	.word	0x000da84f
   d52dc:	2003df58 	.word	0x2003df58
   d52e0:	000da874 	.word	0x000da874
   d52e4:	2003df6c 	.word	0x2003df6c
   d52e8:	000da899 	.word	0x000da899
   d52ec:	2003df80 	.word	0x2003df80
   d52f0:	000da8be 	.word	0x000da8be
   d52f4:	2003e610 	.word	0x2003e610
   d52f8:	000d76b7 	.word	0x000d76b7
   d52fc:	000d4a21 	.word	0x000d4a21
   d5300:	000da8c1 	.word	0x000da8c1
   d5304:	2003e5dc 	.word	0x2003e5dc
   d5308:	2003e3d4 	.word	0x2003e3d4
   d530c:	2003e410 	.word	0x2003e410

000d5310 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d5310:	4770      	bx	lr
	...

000d5314 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d5314:	460b      	mov	r3, r1
   d5316:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d5318:	2228      	movs	r2, #40	; 0x28
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d531a:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d531c:	2100      	movs	r1, #0
   d531e:	4618      	mov	r0, r3
   d5320:	f004 fff0 	bl	da304 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d5324:	4908      	ldr	r1, [pc, #32]	; (d5348 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
   d5326:	220b      	movs	r2, #11
   d5328:	f005 f832 	bl	da390 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d532c:	2200      	movs	r2, #0
  sensor->version     = 1;
   d532e:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d5330:	72c2      	strb	r2, [r0, #11]
  sensor->version     = 1;
   d5332:	60c1      	str	r1, [r0, #12]
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d5334:	4603      	mov	r3, r0
  sensor->sensor_id   = _sensorID;
   d5336:	69a0      	ldr	r0, [r4, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
   d5338:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   d533a:	e9c3 0104 	strd	r0, r1, [r3, #16]
  sensor->max_value   = 0;
   d533e:	2200      	movs	r2, #0
   d5340:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0;
   d5342:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0;
   d5344:	621a      	str	r2, [r3, #32]
}
   d5346:	bd10      	pop	{r4, pc}
   d5348:	000da90f 	.word	0x000da90f

000d534c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d534c:	6803      	ldr	r3, [r0, #0]
   d534e:	b2c9      	uxtb	r1, r1
   d5350:	689b      	ldr	r3, [r3, #8]
   d5352:	4718      	bx	r3

000d5354 <_ZN15Adafruit_LIS3DHC1Ev>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   d5354:	4a06      	ldr	r2, [pc, #24]	; (d5370 <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   d5356:	6002      	str	r2, [r0, #0]
   d5358:	f04f 32ff 	mov.w	r2, #4294967295
   d535c:	6182      	str	r2, [r0, #24]
   d535e:	7742      	strb	r2, [r0, #29]
   d5360:	83c2      	strh	r2, [r0, #30]
   d5362:	22ff      	movs	r2, #255	; 0xff
   d5364:	f880 2020 	strb.w	r2, [r0, #32]
   d5368:	2208      	movs	r2, #8
   d536a:	6242      	str	r2, [r0, #36]	; 0x24
}
   d536c:	4770      	bx	lr
   d536e:	bf00      	nop
   d5370:	000da920 	.word	0x000da920

000d5374 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d5374:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d5376:	4c0b      	ldr	r4, [pc, #44]	; (d53a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d5378:	7821      	ldrb	r1, [r4, #0]
   d537a:	f3bf 8f5b 	dmb	ish
   d537e:	f011 0101 	ands.w	r1, r1, #1
   d5382:	d10b      	bne.n	d539c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d5384:	4620      	mov	r0, r4
   d5386:	9101      	str	r1, [sp, #4]
   d5388:	f7fe fe89 	bl	d409e <__cxa_guard_acquire>
   d538c:	9901      	ldr	r1, [sp, #4]
   d538e:	b128      	cbz	r0, d539c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d5390:	4805      	ldr	r0, [pc, #20]	; (d53a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d5392:	f001 f893 	bl	d64bc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5396:	4620      	mov	r0, r4
   d5398:	f7fe fe86 	bl	d40a8 <__cxa_guard_release>
        return instance;
    }
   d539c:	4802      	ldr	r0, [pc, #8]	; (d53a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d539e:	b002      	add	sp, #8
   d53a0:	bd10      	pop	{r4, pc}
   d53a2:	bf00      	nop
   d53a4:	2003e630 	.word	0x2003e630
   d53a8:	2003e634 	.word	0x2003e634

000d53ac <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d53ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
   d53b0:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d53b4:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d53b6:	4605      	mov	r5, r0
   d53b8:	460f      	mov	r7, r1
  if (_sck == -1)
   d53ba:	d106      	bne.n	d53ca <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d53bc:	f7ff ffda 	bl	d5374 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d53c0:	4639      	mov	r1, r7
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
   d53c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d53c6:	f001 b903 	b.w	d65d0 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   d53ca:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   d53cc:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   d53ce:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   d53d2:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d53d6:	2100      	movs	r1, #0
   d53d8:	b280      	uxth	r0, r0
   d53da:	f003 ff46 	bl	d926a <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   d53de:	f995 001e 	ldrsb.w	r0, [r5, #30]
   d53e2:	fa08 f106 	lsl.w	r1, r8, r6
   d53e6:	4039      	ands	r1, r7
   d53e8:	b280      	uxth	r0, r0
   d53ea:	f003 ff3e 	bl	d926a <digitalWrite>
    digitalWrite(_sck, HIGH);
   d53ee:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d53f2:	2101      	movs	r1, #1
   d53f4:	b280      	uxth	r0, r0
   d53f6:	f003 ff38 	bl	d926a <digitalWrite>
    if (digitalRead(_miso))
   d53fa:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
   d53fe:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   d5400:	b280      	uxth	r0, r0
    reply <<= 1;
   d5402:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   d5404:	f003 ff4a 	bl	d929c <digitalRead>
   d5408:	b108      	cbz	r0, d540e <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   d540a:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   d540e:	3e01      	subs	r6, #1
   d5410:	d2df      	bcs.n	d53d2 <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
   d5412:	4620      	mov	r0, r4
   d5414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5418 <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   d5418:	b508      	push	{r3, lr}
        instance().setBitOrder(order);
   d541a:	f7ff ffab 	bl	d5374 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d541e:	2101      	movs	r1, #1
   d5420:	f001 f867 	bl	d64f2 <_ZN8SPIClass11setBitOrderEh>
        return instance().setClockSpeed(value, scale);
   d5424:	f7ff ffa6 	bl	d5374 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5428:	4905      	ldr	r1, [pc, #20]	; (d5440 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   d542a:	2201      	movs	r2, #1
   d542c:	f001 f89e 	bl	d656c <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
   d5430:	f7ff ffa0 	bl	d5374 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   d5434:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d5438:	2100      	movs	r1, #0
   d543a:	f001 b86d 	b.w	d6518 <_ZN8SPIClass11setDataModeEh>
   d543e:	bf00      	nop
   d5440:	0007a120 	.word	0x0007a120

000d5444 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d5444:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   d5446:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d544a:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d544c:	4604      	mov	r4, r0
   d544e:	460e      	mov	r6, r1
   d5450:	4615      	mov	r5, r2
  if (_cs == -1) {
   d5452:	d116      	bne.n	d5482 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   d5454:	f003 ff64 	bl	d9320 <_Z19__fetch_global_Wirev>
   d5458:	7f21      	ldrb	r1, [r4, #28]
   d545a:	f003 faa9 	bl	d89b0 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d545e:	f003 ff5f 	bl	d9320 <_Z19__fetch_global_Wirev>
   d5462:	6803      	ldr	r3, [r0, #0]
   d5464:	4631      	mov	r1, r6
   d5466:	689b      	ldr	r3, [r3, #8]
   d5468:	4798      	blx	r3
    Wire.write((uint8_t)value);
   d546a:	f003 ff59 	bl	d9320 <_Z19__fetch_global_Wirev>
   d546e:	6803      	ldr	r3, [r0, #0]
   d5470:	4629      	mov	r1, r5
   d5472:	689b      	ldr	r3, [r3, #8]
   d5474:	4798      	blx	r3
    Wire.endTransmission();
   d5476:	f003 ff53 	bl	d9320 <_Z19__fetch_global_Wirev>
}
   d547a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   d547e:	f003 baa2 	b.w	d89c6 <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
   d5482:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d5486:	3301      	adds	r3, #1
   d5488:	d101      	bne.n	d548e <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   d548a:	f7ff ffc5 	bl	d5418 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d548e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5492:	2100      	movs	r1, #0
   d5494:	b280      	uxth	r0, r0
   d5496:	f003 fee8 	bl	d926a <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   d549a:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d549e:	4620      	mov	r0, r4
   d54a0:	f7ff ff84 	bl	d53ac <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   d54a4:	4629      	mov	r1, r5
   d54a6:	4620      	mov	r0, r4
   d54a8:	f7ff ff80 	bl	d53ac <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   d54ac:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d54b0:	2101      	movs	r1, #1
}
   d54b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   d54b6:	b280      	uxth	r0, r0
   d54b8:	f003 bed7 	b.w	d926a <digitalWrite>

000d54bc <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d54bc:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d54be:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d54c2:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d54c4:	4604      	mov	r4, r0
   d54c6:	460d      	mov	r5, r1
  if (_cs == -1) {
   d54c8:	d11d      	bne.n	d5506 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   d54ca:	f003 ff29 	bl	d9320 <_Z19__fetch_global_Wirev>
   d54ce:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d54d2:	f003 fa71 	bl	d89b8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   d54d6:	f003 ff23 	bl	d9320 <_Z19__fetch_global_Wirev>
   d54da:	6803      	ldr	r3, [r0, #0]
   d54dc:	4629      	mov	r1, r5
   d54de:	689b      	ldr	r3, [r3, #8]
   d54e0:	4798      	blx	r3
    Wire.endTransmission();
   d54e2:	f003 ff1d 	bl	d9320 <_Z19__fetch_global_Wirev>
   d54e6:	f003 fa6e 	bl	d89c6 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
   d54ea:	f003 ff19 	bl	d9320 <_Z19__fetch_global_Wirev>
   d54ee:	7f21      	ldrb	r1, [r4, #28]
   d54f0:	2201      	movs	r2, #1
   d54f2:	f003 fa5a 	bl	d89aa <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   d54f6:	f003 ff13 	bl	d9320 <_Z19__fetch_global_Wirev>
   d54fa:	6803      	ldr	r3, [r0, #0]
   d54fc:	695b      	ldr	r3, [r3, #20]
   d54fe:	4798      	blx	r3
   d5500:	b2c5      	uxtb	r5, r0
}
   d5502:	4628      	mov	r0, r5
   d5504:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
   d5506:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d550a:	3301      	adds	r3, #1
   d550c:	d101      	bne.n	d5512 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   d550e:	f7ff ff83 	bl	d5418 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
   d5512:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5516:	2100      	movs	r1, #0
   d5518:	b280      	uxth	r0, r0
   d551a:	f003 fea6 	bl	d926a <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   d551e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5522:	4620      	mov	r0, r4
   d5524:	f7ff ff42 	bl	d53ac <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   d5528:	2100      	movs	r1, #0
   d552a:	4620      	mov	r0, r4
   d552c:	f7ff ff3e 	bl	d53ac <_ZN15Adafruit_LIS3DH7spixferEh>
   d5530:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   d5532:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5536:	2101      	movs	r1, #1
   d5538:	b280      	uxth	r0, r0
   d553a:	f003 fe96 	bl	d926a <digitalWrite>
    if (_sck == -1)
   d553e:	e7e0      	b.n	d5502 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

000d5540 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>:
{
   d5540:	b538      	push	{r3, r4, r5, lr}
   d5542:	460d      	mov	r5, r1
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d5544:	2123      	movs	r1, #35	; 0x23
{
   d5546:	4604      	mov	r4, r0
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d5548:	f7ff ffb8 	bl	d54bc <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  r &= ~(0x30);
   d554c:	f020 0230 	bic.w	r2, r0, #48	; 0x30
  r |= range << 4;
   d5550:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d5554:	4620      	mov	r0, r4
   d5556:	b2d2      	uxtb	r2, r2
}
   d5558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d555c:	2123      	movs	r1, #35	; 0x23
   d555e:	f7ff bf71 	b.w	d5444 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d5562 <_ZN15Adafruit_LIS3DH8getRangeEv>:
{
   d5562:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   d5564:	2123      	movs	r1, #35	; 0x23
   d5566:	f7ff ffa9 	bl	d54bc <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   d556a:	f3c0 1001 	ubfx	r0, r0, #4, #2
   d556e:	bd08      	pop	{r3, pc}

000d5570 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
   d5570:	b538      	push	{r3, r4, r5, lr}
   d5572:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d5574:	2120      	movs	r1, #32
{
   d5576:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d5578:	f7ff ffa0 	bl	d54bc <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
   d557c:	f000 020f 	and.w	r2, r0, #15
  ctl1 |= (dataRate << 4);
   d5580:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d5584:	4620      	mov	r0, r4
   d5586:	b2d2      	uxtb	r2, r2
}
   d5588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d558c:	2120      	movs	r1, #32
   d558e:	f7ff bf59 	b.w	d5444 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d5592 <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   d5592:	b510      	push	{r4, lr}
   d5594:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   d5596:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
   d5598:	f990 001d 	ldrsb.w	r0, [r0, #29]
   d559c:	1c42      	adds	r2, r0, #1
   d559e:	d123      	bne.n	d55e8 <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
   d55a0:	f003 febe 	bl	d9320 <_Z19__fetch_global_Wirev>
   d55a4:	f003 f9ce 	bl	d8944 <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   d55a8:	210f      	movs	r1, #15
   d55aa:	4620      	mov	r0, r4
   d55ac:	f7ff ff86 	bl	d54bc <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   d55b0:	2833      	cmp	r0, #51	; 0x33
   d55b2:	d13d      	bne.n	d5630 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   d55b4:	2207      	movs	r2, #7
   d55b6:	2120      	movs	r1, #32
   d55b8:	4620      	mov	r0, r4
   d55ba:	f7ff ff43 	bl	d5444 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
   d55be:	2107      	movs	r1, #7
   d55c0:	4620      	mov	r0, r4
   d55c2:	f7ff ffd5 	bl	d5570 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   d55c6:	2288      	movs	r2, #136	; 0x88
   d55c8:	2123      	movs	r1, #35	; 0x23
   d55ca:	4620      	mov	r0, r4
   d55cc:	f7ff ff3a 	bl	d5444 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   d55d0:	2210      	movs	r2, #16
   d55d2:	2122      	movs	r1, #34	; 0x22
   d55d4:	4620      	mov	r0, r4
   d55d6:	f7ff ff35 	bl	d5444 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   d55da:	4620      	mov	r0, r4
   d55dc:	2280      	movs	r2, #128	; 0x80
   d55de:	211f      	movs	r1, #31
   d55e0:	f7ff ff30 	bl	d5444 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
   d55e4:	2001      	movs	r0, #1
}
   d55e6:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   d55e8:	2101      	movs	r1, #1
   d55ea:	b280      	uxth	r0, r0
   d55ec:	f003 fe3d 	bl	d926a <digitalWrite>
    pinMode(_cs, OUTPUT);
   d55f0:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d55f4:	2101      	movs	r1, #1
   d55f6:	b280      	uxth	r0, r0
   d55f8:	f003 fe26 	bl	d9248 <pinMode>
    if (_sck == -1) {
   d55fc:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5600:	1c43      	adds	r3, r0, #1
   d5602:	d104      	bne.n	d560e <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
   d5604:	f7ff feb6 	bl	d5374 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5608:	f000 ff62 	bl	d64d0 <_ZN8SPIClass5beginEv>
    }
   d560c:	e7cc      	b.n	d55a8 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
   d560e:	2101      	movs	r1, #1
   d5610:	b280      	uxth	r0, r0
   d5612:	f003 fe19 	bl	d9248 <pinMode>
      pinMode(_mosi, OUTPUT);
   d5616:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d561a:	2101      	movs	r1, #1
   d561c:	b280      	uxth	r0, r0
   d561e:	f003 fe13 	bl	d9248 <pinMode>
      pinMode(_miso, INPUT);
   d5622:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d5626:	2100      	movs	r1, #0
   d5628:	b280      	uxth	r0, r0
   d562a:	f003 fe0d 	bl	d9248 <pinMode>
   d562e:	e7bb      	b.n	d55a8 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
   d5630:	2000      	movs	r0, #0
   d5632:	e7d8      	b.n	d55e6 <_ZN15Adafruit_LIS3DH5beginEh+0x54>

000d5634 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
   d5634:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d5636:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d563a:	3301      	adds	r3, #1
void Adafruit_LIS3DH::read(void) {
   d563c:	4604      	mov	r4, r0
  if (_cs == -1) {
   d563e:	d176      	bne.n	d572e <_ZN15Adafruit_LIS3DH4readEv+0xfa>
    Wire.beginTransmission(_i2caddr);
   d5640:	f003 fe6e 	bl	d9320 <_Z19__fetch_global_Wirev>
   d5644:	f994 101c 	ldrsb.w	r1, [r4, #28]
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d5648:	4d5c      	ldr	r5, [pc, #368]	; (d57bc <_ZN15Adafruit_LIS3DH4readEv+0x188>)
    Wire.beginTransmission(_i2caddr);
   d564a:	f003 f9b5 	bl	d89b8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   d564e:	f003 fe67 	bl	d9320 <_Z19__fetch_global_Wirev>
   d5652:	21a8      	movs	r1, #168	; 0xa8
   d5654:	f7ff fe7a 	bl	d534c <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d5658:	f003 fe62 	bl	d9320 <_Z19__fetch_global_Wirev>
   d565c:	f003 f9b3 	bl	d89c6 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
   d5660:	f003 fe5e 	bl	d9320 <_Z19__fetch_global_Wirev>
   d5664:	7f21      	ldrb	r1, [r4, #28]
   d5666:	2206      	movs	r2, #6
   d5668:	f003 f99f 	bl	d89aa <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d566c:	f003 fe58 	bl	d9320 <_Z19__fetch_global_Wirev>
   d5670:	6803      	ldr	r3, [r0, #0]
   d5672:	695b      	ldr	r3, [r3, #20]
   d5674:	4798      	blx	r3
   d5676:	80e0      	strh	r0, [r4, #6]
   d5678:	f003 fe52 	bl	d9320 <_Z19__fetch_global_Wirev>
   d567c:	6803      	ldr	r3, [r0, #0]
   d567e:	695b      	ldr	r3, [r3, #20]
   d5680:	4798      	blx	r3
   d5682:	88e3      	ldrh	r3, [r4, #6]
   d5684:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d5688:	4318      	orrs	r0, r3
   d568a:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   d568c:	f003 fe48 	bl	d9320 <_Z19__fetch_global_Wirev>
   d5690:	6803      	ldr	r3, [r0, #0]
   d5692:	695b      	ldr	r3, [r3, #20]
   d5694:	4798      	blx	r3
   d5696:	8120      	strh	r0, [r4, #8]
   d5698:	f003 fe42 	bl	d9320 <_Z19__fetch_global_Wirev>
   d569c:	6803      	ldr	r3, [r0, #0]
   d569e:	695b      	ldr	r3, [r3, #20]
   d56a0:	4798      	blx	r3
   d56a2:	8923      	ldrh	r3, [r4, #8]
   d56a4:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d56a8:	4318      	orrs	r0, r3
   d56aa:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   d56ac:	f003 fe38 	bl	d9320 <_Z19__fetch_global_Wirev>
   d56b0:	6803      	ldr	r3, [r0, #0]
   d56b2:	695b      	ldr	r3, [r3, #20]
   d56b4:	4798      	blx	r3
   d56b6:	8160      	strh	r0, [r4, #10]
   d56b8:	f003 fe32 	bl	d9320 <_Z19__fetch_global_Wirev>
   d56bc:	6803      	ldr	r3, [r0, #0]
   d56be:	695b      	ldr	r3, [r3, #20]
   d56c0:	4798      	blx	r3
   d56c2:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d56c6:	8965      	ldrh	r5, [r4, #10]
   d56c8:	4328      	orrs	r0, r5
   d56ca:	8160      	strh	r0, [r4, #10]
  uint8_t range = getRange();
   d56cc:	4620      	mov	r0, r4
   d56ce:	f7ff ff48 	bl	d5562 <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d56d2:	2803      	cmp	r0, #3
   d56d4:	d069      	beq.n	d57aa <_ZN15Adafruit_LIS3DH4readEv+0x176>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d56d6:	2802      	cmp	r0, #2
   d56d8:	d06a      	beq.n	d57b0 <_ZN15Adafruit_LIS3DH4readEv+0x17c>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d56da:	2801      	cmp	r0, #1
   d56dc:	d06b      	beq.n	d57b6 <_ZN15Adafruit_LIS3DH4readEv+0x182>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   d56de:	2800      	cmp	r0, #0
   d56e0:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   d56e4:	bf18      	it	ne
   d56e6:	2301      	movne	r3, #1
  x_g = (float)x / divider;
   d56e8:	ee07 3a90 	vmov	s15, r3
   d56ec:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d56f0:	ee07 3a10 	vmov	s14, r3
   d56f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d56f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d56fc:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  x_g = (float)x / divider;
   d5700:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   d5704:	ee07 3a10 	vmov	s14, r3
   d5708:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_g = (float)x / divider;
   d570c:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   d5710:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   d5714:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5718:	ee07 3a10 	vmov	s14, r3
   d571c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d5720:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   d5724:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d5728:	edc4 6a05 	vstr	s13, [r4, #20]
}
   d572c:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
   d572e:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d5732:	3301      	adds	r3, #1
   d5734:	d101      	bne.n	d573a <_ZN15Adafruit_LIS3DH4readEv+0x106>
      beginTransaction();
   d5736:	f7ff fe6f 	bl	d5418 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d573a:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d573e:	2100      	movs	r1, #0
   d5740:	b280      	uxth	r0, r0
   d5742:	f003 fd92 	bl	d926a <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   d5746:	21e8      	movs	r1, #232	; 0xe8
   d5748:	4620      	mov	r0, r4
   d574a:	f7ff fe2f 	bl	d53ac <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   d574e:	21ff      	movs	r1, #255	; 0xff
   d5750:	4620      	mov	r0, r4
   d5752:	f7ff fe2b 	bl	d53ac <_ZN15Adafruit_LIS3DH7spixferEh>
   d5756:	21ff      	movs	r1, #255	; 0xff
   d5758:	80e0      	strh	r0, [r4, #6]
   d575a:	4620      	mov	r0, r4
   d575c:	f7ff fe26 	bl	d53ac <_ZN15Adafruit_LIS3DH7spixferEh>
   d5760:	88e3      	ldrh	r3, [r4, #6]
   d5762:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d5766:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   d5768:	21ff      	movs	r1, #255	; 0xff
   d576a:	4620      	mov	r0, r4
   d576c:	f7ff fe1e 	bl	d53ac <_ZN15Adafruit_LIS3DH7spixferEh>
   d5770:	21ff      	movs	r1, #255	; 0xff
   d5772:	8120      	strh	r0, [r4, #8]
   d5774:	4620      	mov	r0, r4
   d5776:	f7ff fe19 	bl	d53ac <_ZN15Adafruit_LIS3DH7spixferEh>
   d577a:	8923      	ldrh	r3, [r4, #8]
   d577c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d5780:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   d5782:	21ff      	movs	r1, #255	; 0xff
   d5784:	4620      	mov	r0, r4
   d5786:	f7ff fe11 	bl	d53ac <_ZN15Adafruit_LIS3DH7spixferEh>
   d578a:	21ff      	movs	r1, #255	; 0xff
   d578c:	8160      	strh	r0, [r4, #10]
   d578e:	4620      	mov	r0, r4
   d5790:	f7ff fe0c 	bl	d53ac <_ZN15Adafruit_LIS3DH7spixferEh>
   d5794:	8963      	ldrh	r3, [r4, #10]
   d5796:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d579a:	8160      	strh	r0, [r4, #10]
    digitalWrite(_cs, HIGH);
   d579c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d57a0:	2101      	movs	r1, #1
   d57a2:	b280      	uxth	r0, r0
   d57a4:	f003 fd61 	bl	d926a <digitalWrite>
    if (_sck == -1)
   d57a8:	e790      	b.n	d56cc <_ZN15Adafruit_LIS3DH4readEv+0x98>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d57aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d57ae:	e79b      	b.n	d56e8 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d57b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   d57b4:	e798      	b.n	d56e8 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d57b6:	f641 73fe 	movw	r3, #8190	; 0x1ffe
   d57ba:	e795      	b.n	d56e8 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
   d57bc:	00ffff00 	.word	0x00ffff00

000d57c0 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   d57c0:	460c      	mov	r4, r1
   d57c2:	4605      	mov	r5, r0
   d57c4:	b508      	push	{r3, lr}
  memset(event, 0, sizeof(sensors_event_t));
   d57c6:	2220      	movs	r2, #32
   d57c8:	2100      	movs	r1, #0
   d57ca:	1d20      	adds	r0, r4, #4
   d57cc:	f004 fd9a 	bl	da304 <memset>
  event->version   = sizeof(sensors_event_t);
   d57d0:	2324      	movs	r3, #36	; 0x24
   d57d2:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d57d4:	69ab      	ldr	r3, [r5, #24]
   d57d6:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   d57d8:	2301      	movs	r3, #1
   d57da:	60a3      	str	r3, [r4, #8]
  event->timestamp = 0;
   d57dc:	2300      	movs	r3, #0
   d57de:	6123      	str	r3, [r4, #16]
  read();
   d57e0:	4628      	mov	r0, r5
   d57e2:	f7ff ff27 	bl	d5634 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
   d57e6:	68eb      	ldr	r3, [r5, #12]
   d57e8:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   d57ea:	692b      	ldr	r3, [r5, #16]
   d57ec:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   d57ee:	696b      	ldr	r3, [r5, #20]
   d57f0:	61e3      	str	r3, [r4, #28]

000d57f2 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   d57f2:	b510      	push	{r4, lr}
   d57f4:	4604      	mov	r4, r0
   d57f6:	f003 fb37 	bl	d8e68 <_ZN9TCPClientC1Ev>
{

}
   d57fa:	4620      	mov	r0, r4
   d57fc:	bd10      	pop	{r4, pc}
	...

000d5800 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   d5800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   d5802:	4f0f      	ldr	r7, [pc, #60]	; (d5840 <_ZN10HttpClient10sendHeaderEPKcS1_+0x40>)
{
   d5804:	4605      	mov	r5, r0
   d5806:	4614      	mov	r4, r2
   d5808:	460e      	mov	r6, r1
    client.print(aHeaderName);
   d580a:	f002 fc9d 	bl	d8148 <_ZN5Print5printEPKc>
    client.print(": ");
   d580e:	4639      	mov	r1, r7
   d5810:	4628      	mov	r0, r5
   d5812:	f002 fc99 	bl	d8148 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d5816:	4621      	mov	r1, r4
   d5818:	4628      	mov	r0, r5
   d581a:	f002 fcae 	bl	d817a <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.print(aHeaderName);
   d581e:	f002 ffab 	bl	d8778 <_Z16_fetch_usbserialv>
   d5822:	4631      	mov	r1, r6
   d5824:	f002 fc90 	bl	d8148 <_ZN5Print5printEPKc>
    Serial.print(": ");
   d5828:	f002 ffa6 	bl	d8778 <_Z16_fetch_usbserialv>
   d582c:	4639      	mov	r1, r7
   d582e:	f002 fc8b 	bl	d8148 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   d5832:	f002 ffa1 	bl	d8778 <_Z16_fetch_usbserialv>
   d5836:	4621      	mov	r1, r4
    #endif
}
   d5838:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(aHeaderValue);
   d583c:	f002 bc9d 	b.w	d817a <_ZN5Print7printlnEPKc>
   d5840:	000da63e 	.word	0x000da63e

000d5844 <_ZN10HttpClient10sendHeaderEPKc>:
    Serial.println(aHeaderValue);
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName)
{
   d5844:	b510      	push	{r4, lr}
   d5846:	460c      	mov	r4, r1
    client.println(aHeaderName);
   d5848:	f002 fc97 	bl	d817a <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.println(aHeaderName);
   d584c:	f002 ff94 	bl	d8778 <_Z16_fetch_usbserialv>
   d5850:	4621      	mov	r1, r4
    #endif
}
   d5852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(aHeaderName);
   d5856:	f002 bc90 	b.w	d817a <_ZN5Print7printlnEPKc>
	...

000d585c <_ZN10HttpClient10sendHeaderEPKci>:
{
   d585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(": ");
   d585e:	4f10      	ldr	r7, [pc, #64]	; (d58a0 <_ZN10HttpClient10sendHeaderEPKci+0x44>)
{
   d5860:	4605      	mov	r5, r0
   d5862:	4614      	mov	r4, r2
   d5864:	460e      	mov	r6, r1
    client.print(aHeaderName);
   d5866:	f002 fc6f 	bl	d8148 <_ZN5Print5printEPKc>
    client.print(": ");
   d586a:	4639      	mov	r1, r7
   d586c:	4628      	mov	r0, r5
   d586e:	f002 fc6b 	bl	d8148 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d5872:	220a      	movs	r2, #10
   d5874:	4621      	mov	r1, r4
   d5876:	4628      	mov	r0, r5
   d5878:	f7fe fdca 	bl	d4410 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.print(aHeaderName);
   d587c:	f002 ff7c 	bl	d8778 <_Z16_fetch_usbserialv>
   d5880:	4631      	mov	r1, r6
   d5882:	f002 fc61 	bl	d8148 <_ZN5Print5printEPKc>
    Serial.print(": ");
   d5886:	f002 ff77 	bl	d8778 <_Z16_fetch_usbserialv>
   d588a:	4639      	mov	r1, r7
   d588c:	f002 fc5c 	bl	d8148 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   d5890:	f002 ff72 	bl	d8778 <_Z16_fetch_usbserialv>
   d5894:	220a      	movs	r2, #10
   d5896:	4621      	mov	r1, r4
   d5898:	f7fe fdba 	bl	d4410 <_ZN5Print7printlnIiLi0EEEjT_i>
}
   d589c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d589e:	bf00      	nop
   d58a0:	000da63e 	.word	0x000da63e

000d58a4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d58a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d58a8:	460e      	mov	r6, r1
   d58aa:	b091      	sub	sp, #68	; 0x44
   d58ac:	461f      	mov	r7, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d58ae:	f04f 33ff 	mov.w	r3, #4294967295
   d58b2:	6013      	str	r3, [r2, #0]
{
   d58b4:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d58b6:	2100      	movs	r1, #0
   d58b8:	4630      	mov	r0, r6
   d58ba:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   d58be:	4691      	mov	r9, r2
   d58c0:	f001 f976 	bl	d6bb0 <_ZNK6String6equalsEPKc>
   d58c4:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   d58c8:	4603      	mov	r3, r0
   d58ca:	2800      	cmp	r0, #0
   d58cc:	d16e      	bne.n	d59ac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x108>
	const char * c_str() const { return buffer; }
   d58ce:	f1be 0f00 	cmp.w	lr, #0
   d58d2:	bf14      	ite	ne
   d58d4:	4672      	movne	r2, lr
   d58d6:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   d58d8:	6831      	ldr	r1, [r6, #0]
   d58da:	b292      	uxth	r2, r2
   d58dc:	4620      	mov	r0, r4
   d58de:	f003 fad7 	bl	d8e90 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   d58e2:	1e05      	subs	r5, r0, #0
   d58e4:	bf18      	it	ne
   d58e6:	2501      	movne	r5, #1
    }

    #ifdef LOGGING
    if (connected) {
   d58e8:	2d00      	cmp	r5, #0
   d58ea:	d07e      	beq.n	d59ea <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x146>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d58ec:	2100      	movs	r1, #0
   d58ee:	4630      	mov	r0, r6
   d58f0:	f001 f95e 	bl	d6bb0 <_ZNK6String6equalsEPKc>
        if(aRequest.hostname!=NULL) {
   d58f4:	2800      	cmp	r0, #0
   d58f6:	d16c      	bne.n	d59d2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x12e>
            Serial.print("HttpClient>\tConnecting to: ");
   d58f8:	f002 ff3e 	bl	d8778 <_Z16_fetch_usbserialv>
   d58fc:	49bb      	ldr	r1, [pc, #748]	; (d5bec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x348>)
   d58fe:	f002 fc23 	bl	d8148 <_ZN5Print5printEPKc>
            Serial.print(aRequest.hostname);
   d5902:	f002 ff39 	bl	d8778 <_Z16_fetch_usbserialv>
   d5906:	6831      	ldr	r1, [r6, #0]
   d5908:	f002 fc1e 	bl	d8148 <_ZN5Print5printEPKc>
        } else {
            Serial.print("HttpClient>\tConnecting to IP: ");
            Serial.print(aRequest.ip);
        }
        Serial.print(":");
   d590c:	f002 ff34 	bl	d8778 <_Z16_fetch_usbserialv>
   d5910:	49b7      	ldr	r1, [pc, #732]	; (d5bf0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x34c>)
   d5912:	f002 fc19 	bl	d8148 <_ZN5Print5printEPKc>
        Serial.println(aRequest.port);
   d5916:	f002 ff2f 	bl	d8778 <_Z16_fetch_usbserialv>
   d591a:	220a      	movs	r2, #10
   d591c:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   d591e:	f7fe fd77 	bl	d4410 <_ZN5Print7printlnIiLi0EEEjT_i>
    //
    // Send HTTP Headers
    //

    // Send initial headers (only HTTP 1.0 is supported for now).
    client.print(aHttpMethod);
   d5922:	4641      	mov	r1, r8
   d5924:	4620      	mov	r0, r4
   d5926:	f002 fc0f 	bl	d8148 <_ZN5Print5printEPKc>
    client.print(" ");
   d592a:	49b2      	ldr	r1, [pc, #712]	; (d5bf4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   d592c:	4620      	mov	r0, r4
   d592e:	f002 fc0b 	bl	d8148 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   d5932:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   d5934:	4620      	mov	r0, r4
   d5936:	f002 fc07 	bl	d8148 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   d593a:	49af      	ldr	r1, [pc, #700]	; (d5bf8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   d593c:	4620      	mov	r0, r4
   d593e:	f002 fc03 	bl	d8148 <_ZN5Print5printEPKc>

    #ifdef LOGGING
    Serial.println("HttpClient>\tStart of HTTP Request.");
   d5942:	f002 ff19 	bl	d8778 <_Z16_fetch_usbserialv>
   d5946:	49ad      	ldr	r1, [pc, #692]	; (d5bfc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   d5948:	f002 fc17 	bl	d817a <_ZN5Print7printlnEPKc>
    Serial.print(aHttpMethod);
   d594c:	f002 ff14 	bl	d8778 <_Z16_fetch_usbserialv>
   d5950:	4641      	mov	r1, r8
   d5952:	f002 fbf9 	bl	d8148 <_ZN5Print5printEPKc>
    Serial.print(" ");
   d5956:	f002 ff0f 	bl	d8778 <_Z16_fetch_usbserialv>
   d595a:	49a6      	ldr	r1, [pc, #664]	; (d5bf4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   d595c:	f002 fbf4 	bl	d8148 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
   d5960:	f002 ff0a 	bl	d8778 <_Z16_fetch_usbserialv>
   d5964:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   d5966:	f002 fbef 	bl	d8148 <_ZN5Print5printEPKc>
    Serial.print(" HTTP/1.0\r\n");
   d596a:	f002 ff05 	bl	d8778 <_Z16_fetch_usbserialv>
   d596e:	49a2      	ldr	r1, [pc, #648]	; (d5bf8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   d5970:	f002 fbea 	bl	d8148 <_ZN5Print5printEPKc>
    #endif

    // Send General and Request Headers.
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   d5974:	49a2      	ldr	r1, [pc, #648]	; (d5c00 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x35c>)
   d5976:	4aa3      	ldr	r2, [pc, #652]	; (d5c04 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x360>)
   d5978:	4620      	mov	r0, r4
   d597a:	f7ff ff41 	bl	d5800 <_ZN10HttpClient10sendHeaderEPKcS1_>
   d597e:	2100      	movs	r1, #0
   d5980:	4630      	mov	r0, r6
   d5982:	f001 f915 	bl	d6bb0 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   d5986:	b920      	cbnz	r0, d5992 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xee>
        sendHeader("HOST", aRequest.hostname.c_str());
   d5988:	6832      	ldr	r2, [r6, #0]
   d598a:	499f      	ldr	r1, [pc, #636]	; (d5c08 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x364>)
   d598c:	4620      	mov	r0, r4
   d598e:	f7ff ff37 	bl	d5800 <_ZN10HttpClient10sendHeaderEPKcS1_>
    }

    //Send Entity Headers
    // TODO: Check the standard, currently sending Content-Length : 0 for empty
    // POST requests, and no content-length for other types.
    if (aRequest.body != NULL) {
   d5992:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   d5996:	2100      	movs	r1, #0
   d5998:	4650      	mov	r0, sl
   d599a:	f001 f909 	bl	d6bb0 <_ZNK6String6equalsEPKc>
   d599e:	bb78      	cbnz	r0, d5a00 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x15c>
        sendHeader("Content-Length", (aRequest.body).length());
   d59a0:	6c72      	ldr	r2, [r6, #68]	; 0x44
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
        sendHeader("Content-Length", 0);
   d59a2:	499a      	ldr	r1, [pc, #616]	; (d5c0c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x368>)
   d59a4:	4620      	mov	r0, r4
   d59a6:	f7ff ff59 	bl	d585c <_ZN10HttpClient10sendHeaderEPKci>
   d59aa:	e030      	b.n	d5a0e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d59ac:	4b98      	ldr	r3, [pc, #608]	; (d5c10 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x36c>)
   d59ae:	930a      	str	r3, [sp, #40]	; 0x28
   d59b0:	f106 0c14 	add.w	ip, r6, #20
   d59b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d59b8:	ad0b      	add	r5, sp, #44	; 0x2c
   d59ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d59bc:	f8dc 3000 	ldr.w	r3, [ip]
   d59c0:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   d59c2:	fa1f f28e 	uxth.w	r2, lr
   d59c6:	2300      	movs	r3, #0
   d59c8:	a90a      	add	r1, sp, #40	; 0x28
   d59ca:	4620      	mov	r0, r4
   d59cc:	f003 f92d 	bl	d8c2a <_ZN9TCPClient7connectE9IPAddresstm>
   d59d0:	e787      	b.n	d58e2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3e>
            Serial.print("HttpClient>\tConnecting to IP: ");
   d59d2:	f002 fed1 	bl	d8778 <_Z16_fetch_usbserialv>
   d59d6:	498f      	ldr	r1, [pc, #572]	; (d5c14 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x370>)
   d59d8:	f002 fbb6 	bl	d8148 <_ZN5Print5printEPKc>
            Serial.print(aRequest.ip);
   d59dc:	f002 fecc 	bl	d8778 <_Z16_fetch_usbserialv>
   d59e0:	f106 0110 	add.w	r1, r6, #16
   d59e4:	f002 fbb7 	bl	d8156 <_ZN5Print5printERK9Printable>
   d59e8:	e790      	b.n	d590c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x68>
        Serial.println("HttpClient>\tConnection failed.");
   d59ea:	f002 fec5 	bl	d8778 <_Z16_fetch_usbserialv>
   d59ee:	498a      	ldr	r1, [pc, #552]	; (d5c18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x374>)
   d59f0:	f002 fbc3 	bl	d817a <_ZN5Print7printlnEPKc>
        client.stop();
   d59f4:	4620      	mov	r0, r4
   d59f6:	f003 f9ed 	bl	d8dd4 <_ZN9TCPClient4stopEv>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   d59fa:	b011      	add	sp, #68	; 0x44
   d59fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   d5a00:	4986      	ldr	r1, [pc, #536]	; (d5c1c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x378>)
   d5a02:	4640      	mov	r0, r8
   d5a04:	f004 fcaa 	bl	da35c <strcmp>
   d5a08:	4602      	mov	r2, r0
   d5a0a:	2800      	cmp	r0, #0
   d5a0c:	d0c9      	beq.n	d59a2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfe>
    if (headers != NULL)
   d5a0e:	b15f      	cbz	r7, d5a28 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x184>
        while (headers[i].header != NULL)
   d5a10:	6839      	ldr	r1, [r7, #0]
   d5a12:	b149      	cbz	r1, d5a28 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x184>
            if (headers[i].value != NULL) {
   d5a14:	687a      	ldr	r2, [r7, #4]
                sendHeader(headers[i].header, headers[i].value);
   d5a16:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   d5a18:	b11a      	cbz	r2, d5a22 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17e>
                sendHeader(headers[i].header, headers[i].value);
   d5a1a:	f7ff fef1 	bl	d5800 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   d5a1e:	3708      	adds	r7, #8
        while (headers[i].header != NULL)
   d5a20:	e7f6      	b.n	d5a10 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16c>
                sendHeader(headers[i].header);
   d5a22:	f7ff ff0f 	bl	d5844 <_ZN10HttpClient10sendHeaderEPKc>
   d5a26:	e7fa      	b.n	d5a1e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17a>
    client.println();
   d5a28:	4620      	mov	r0, r4
   d5a2a:	f002 fb9a 	bl	d8162 <_ZN5Print7printlnEv>
    client.flush();
   d5a2e:	4620      	mov	r0, r4
   d5a30:	f002 ffee 	bl	d8a10 <_ZN9TCPClient5flushEv>
   d5a34:	2100      	movs	r1, #0
   d5a36:	4650      	mov	r0, sl
   d5a38:	f001 f8ba 	bl	d6bb0 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   d5a3c:	b940      	cbnz	r0, d5a50 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ac>
        client.println(aRequest.body);
   d5a3e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   d5a40:	4620      	mov	r0, r4
   d5a42:	f002 fb9a 	bl	d817a <_ZN5Print7printlnEPKc>
        Serial.println(aRequest.body);
   d5a46:	f002 fe97 	bl	d8778 <_Z16_fetch_usbserialv>
   d5a4a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   d5a4c:	f002 fb95 	bl	d817a <_ZN5Print7printlnEPKc>
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   d5a50:	f002 fe92 	bl	d8778 <_Z16_fetch_usbserialv>
    memset(&buffer[0], 0, sizeof(buffer));
   d5a54:	f104 0a1c 	add.w	sl, r4, #28
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   d5a58:	4971      	ldr	r1, [pc, #452]	; (d5c20 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x37c>)
   d5a5a:	f002 fb8e 	bl	d817a <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   d5a5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d5a62:	2100      	movs	r1, #0
   d5a64:	4650      	mov	r0, sl
   d5a66:	f004 fc4d 	bl	da304 <memset>
   d5a6a:	f000 f951 	bl	d5d10 <HAL_Timer_Get_Milli_Seconds>
   d5a6e:	9000      	str	r0, [sp, #0]
   d5a70:	f000 f94e 	bl	d5d10 <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
   d5a74:	2700      	movs	r7, #0
   d5a76:	9001      	str	r0, [sp, #4]
        int bytes = client.available();
   d5a78:	4620      	mov	r0, r4
   d5a7a:	f003 f951 	bl	d8d20 <_ZN9TCPClient9availableEv>
        if(bytes) {
   d5a7e:	4606      	mov	r6, r0
   d5a80:	b1b0      	cbz	r0, d5ab0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x20c>
            Serial.print("\r\nHttpClient>\tReceiving TCP transaction of ");
   d5a82:	f002 fe79 	bl	d8778 <_Z16_fetch_usbserialv>
   d5a86:	4967      	ldr	r1, [pc, #412]	; (d5c24 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x380>)
   d5a88:	f002 fb5e 	bl	d8148 <_ZN5Print5printEPKc>
            Serial.print(bytes);
   d5a8c:	f002 fe74 	bl	d8778 <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
   d5a90:	2e00      	cmp	r6, #0
   d5a92:	4683      	mov	fp, r0
   d5a94:	da27      	bge.n	d5ae6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x242>
            t = print('-');
   d5a96:	212d      	movs	r1, #45	; 0x2d
   d5a98:	f002 fb5a 	bl	d8150 <_ZN5Print5printEc>
            val = -n;
   d5a9c:	4271      	negs	r1, r6
        return printNumber(val, base) + t;
   d5a9e:	220a      	movs	r2, #10
   d5aa0:	4658      	mov	r0, fp
   d5aa2:	f002 fb74 	bl	d818e <_ZN5Print11printNumberEmh>
            Serial.println(" bytes.");
   d5aa6:	f002 fe67 	bl	d8778 <_Z16_fetch_usbserialv>
   d5aaa:	495f      	ldr	r1, [pc, #380]	; (d5c28 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x384>)
   d5aac:	f002 fb65 	bl	d817a <_ZN5Print7printlnEPKc>
    unsigned int bufferPosition = 0;
   d5ab0:	f04f 0b00 	mov.w	fp, #0
        while (client.available()) {
   d5ab4:	4620      	mov	r0, r4
   d5ab6:	f003 f933 	bl	d8d20 <_ZN9TCPClient9availableEv>
   d5aba:	b338      	cbz	r0, d5b0c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x268>
            char c = client.read();
   d5abc:	4620      	mov	r0, r4
   d5abe:	f003 f868 	bl	d8b92 <_ZN9TCPClient4readEv>
   d5ac2:	fa5f f880 	uxtb.w	r8, r0
            Serial.print(c);
   d5ac6:	f002 fe57 	bl	d8778 <_Z16_fetch_usbserialv>
   d5aca:	4641      	mov	r1, r8
   d5acc:	f002 fb40 	bl	d8150 <_ZN5Print5printEc>
   d5ad0:	f000 f91e 	bl	d5d10 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   d5ad4:	f240 33fe 	movw	r3, #1022	; 0x3fe
   d5ad8:	429f      	cmp	r7, r3
   d5ada:	9000      	str	r0, [sp, #0]
   d5adc:	d805      	bhi.n	d5aea <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x246>
                buffer[bufferPosition] = c;
   d5ade:	f80a 8007 	strb.w	r8, [sl, r7]
            bufferPosition++;
   d5ae2:	3701      	adds	r7, #1
        while (client.available()) {
   d5ae4:	e7e6      	b.n	d5ab4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x210>
            val = n;
   d5ae6:	4631      	mov	r1, r6
   d5ae8:	e7d9      	b.n	d5a9e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fa>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   d5aea:	f240 33ff 	movw	r3, #1023	; 0x3ff
   d5aee:	429f      	cmp	r7, r3
   d5af0:	d1f7      	bne.n	d5ae2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23e>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d5af2:	2300      	movs	r3, #0
   d5af4:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   d5af8:	4620      	mov	r0, r4
   d5afa:	f003 f96b 	bl	d8dd4 <_ZN9TCPClient4stopEv>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
   d5afe:	f002 fe3b 	bl	d8778 <_Z16_fetch_usbserialv>
   d5b02:	494a      	ldr	r1, [pc, #296]	; (d5c2c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x388>)
   d5b04:	f002 fb39 	bl	d817a <_ZN5Print7printlnEPKc>
                error = true;
   d5b08:	46ab      	mov	fp, r5
   d5b0a:	e7ea      	b.n	d5ae2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23e>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d5b0c:	19e3      	adds	r3, r4, r7
   d5b0e:	7718      	strb	r0, [r3, #28]
        if (bytes) {
   d5b10:	b126      	cbz	r6, d5b1c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x278>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
   d5b12:	f002 fe31 	bl	d8778 <_Z16_fetch_usbserialv>
   d5b16:	4946      	ldr	r1, [pc, #280]	; (d5c30 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x38c>)
   d5b18:	f002 fb16 	bl	d8148 <_ZN5Print5printEPKc>
   d5b1c:	f000 f8f8 	bl	d5d10 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   d5b20:	9b00      	ldr	r3, [sp, #0]
   d5b22:	1ac6      	subs	r6, r0, r3
        if (!error && !timeout) {
   d5b24:	f1bb 0f00 	cmp.w	fp, #0
   d5b28:	d106      	bne.n	d5b38 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x294>
   d5b2a:	f241 3388 	movw	r3, #5000	; 0x1388
   d5b2e:	429e      	cmp	r6, r3
   d5b30:	d802      	bhi.n	d5b38 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x294>
            delay(200);
   d5b32:	20c8      	movs	r0, #200	; 0xc8
   d5b34:	f002 fc78 	bl	d8428 <delay>
    } while (client.connected() && !timeout && !error);
   d5b38:	4620      	mov	r0, r4
   d5b3a:	f002 ff6a 	bl	d8a12 <_ZN9TCPClient9connectedEv>
   d5b3e:	f241 3388 	movw	r3, #5000	; 0x1388
   d5b42:	2800      	cmp	r0, #0
   d5b44:	d04a      	beq.n	d5bdc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x338>
   d5b46:	429e      	cmp	r6, r3
   d5b48:	d84a      	bhi.n	d5be0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x33c>
   d5b4a:	f1bb 0f00 	cmp.w	fp, #0
   d5b4e:	d093      	beq.n	d5a78 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d4>
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
   d5b50:	f002 fe12 	bl	d8778 <_Z16_fetch_usbserialv>
   d5b54:	4937      	ldr	r1, [pc, #220]	; (d5c34 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x390>)
   d5b56:	f002 faf7 	bl	d8148 <_ZN5Print5printEPKc>
    Serial.print(millis() - firstRead);
   d5b5a:	f002 fe0d 	bl	d8778 <_Z16_fetch_usbserialv>
   d5b5e:	4605      	mov	r5, r0
   d5b60:	f000 f8d6 	bl	d5d10 <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   d5b64:	9b01      	ldr	r3, [sp, #4]
   d5b66:	220a      	movs	r2, #10
   d5b68:	1ac1      	subs	r1, r0, r3
   d5b6a:	4628      	mov	r0, r5
   d5b6c:	f002 fb0f 	bl	d818e <_ZN5Print11printNumberEmh>
    Serial.println("ms).");
   d5b70:	f002 fe02 	bl	d8778 <_Z16_fetch_usbserialv>
   d5b74:	4930      	ldr	r1, [pc, #192]	; (d5c38 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x394>)
   d5b76:	f002 fb00 	bl	d817a <_ZN5Print7printlnEPKc>
    client.stop();
   d5b7a:	4620      	mov	r0, r4
   d5b7c:	f003 f92a 	bl	d8dd4 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   d5b80:	4651      	mov	r1, sl
   d5b82:	a802      	add	r0, sp, #8
   d5b84:	f000 ff31 	bl	d69ea <_ZN6StringC1EPKc>
    String statusCode = raw_response.substring(9,12);
   d5b88:	230c      	movs	r3, #12
   d5b8a:	2209      	movs	r2, #9
   d5b8c:	a902      	add	r1, sp, #8
   d5b8e:	a806      	add	r0, sp, #24
   d5b90:	f001 f832 	bl	d6bf8 <_ZNK6String9substringEjj>
    Serial.print("HttpClient>\tStatus Code: ");
   d5b94:	f002 fdf0 	bl	d8778 <_Z16_fetch_usbserialv>
   d5b98:	4928      	ldr	r1, [pc, #160]	; (d5c3c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x398>)
   d5b9a:	f002 fad5 	bl	d8148 <_ZN5Print5printEPKc>
    Serial.println(statusCode);
   d5b9e:	f002 fdeb 	bl	d8778 <_Z16_fetch_usbserialv>
   d5ba2:	9906      	ldr	r1, [sp, #24]
   d5ba4:	f002 fae9 	bl	d817a <_ZN5Print7printlnEPKc>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   d5ba8:	4925      	ldr	r1, [pc, #148]	; (d5c40 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x39c>)
   d5baa:	a80a      	add	r0, sp, #40	; 0x28
   d5bac:	f000 ff1d 	bl	d69ea <_ZN6StringC1EPKc>
   d5bb0:	a90a      	add	r1, sp, #40	; 0x28
   d5bb2:	a802      	add	r0, sp, #8
   d5bb4:	f001 f81d 	bl	d6bf2 <_ZNK6String7indexOfERKS_>
   d5bb8:	4604      	mov	r4, r0
   d5bba:	a80a      	add	r0, sp, #40	; 0x28
   d5bbc:	f000 feca 	bl	d6954 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   d5bc0:	1c63      	adds	r3, r4, #1
   d5bc2:	d143      	bne.n	d5c4c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a8>
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
   d5bc4:	f002 fdd8 	bl	d8778 <_Z16_fetch_usbserialv>
   d5bc8:	491e      	ldr	r1, [pc, #120]	; (d5c44 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a0>)
   d5bca:	f002 fad6 	bl	d817a <_ZN5Print7printlnEPKc>
    String statusCode = raw_response.substring(9,12);
   d5bce:	a806      	add	r0, sp, #24
   d5bd0:	f000 fec0 	bl	d6954 <_ZN6StringD1Ev>
    String raw_response(buffer);
   d5bd4:	a802      	add	r0, sp, #8
   d5bd6:	f000 febd 	bl	d6954 <_ZN6StringD1Ev>
   d5bda:	e70e      	b.n	d59fa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x156>
    if (timeout) {
   d5bdc:	429e      	cmp	r6, r3
   d5bde:	d9b7      	bls.n	d5b50 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2ac>
        Serial.println("\r\nHttpClient>\tError: Timeout while reading response.");
   d5be0:	f002 fdca 	bl	d8778 <_Z16_fetch_usbserialv>
   d5be4:	4918      	ldr	r1, [pc, #96]	; (d5c48 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a4>)
   d5be6:	f002 fac8 	bl	d817a <_ZN5Print7printlnEPKc>
   d5bea:	e7b1      	b.n	d5b50 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2ac>
   d5bec:	000da934 	.word	0x000da934
   d5bf0:	000da542 	.word	0x000da542
   d5bf4:	000da63f 	.word	0x000da63f
   d5bf8:	000da96f 	.word	0x000da96f
   d5bfc:	000da97b 	.word	0x000da97b
   d5c00:	000da9a4 	.word	0x000da9a4
   d5c04:	000da99e 	.word	0x000da99e
   d5c08:	000da9ce 	.word	0x000da9ce
   d5c0c:	000da9d3 	.word	0x000da9d3
   d5c10:	000dad6c 	.word	0x000dad6c
   d5c14:	000da950 	.word	0x000da950
   d5c18:	000da9af 	.word	0x000da9af
   d5c1c:	000da582 	.word	0x000da582
   d5c20:	000da9e2 	.word	0x000da9e2
   d5c24:	000daa03 	.word	0x000daa03
   d5c28:	000daa2f 	.word	0x000daa2f
   d5c2c:	000daa37 	.word	0x000daa37
   d5c30:	000daa6c 	.word	0x000daa6c
   d5c34:	000daac7 	.word	0x000daac7
   d5c38:	000daaec 	.word	0x000daaec
   d5c3c:	000daaf1 	.word	0x000daaf1
   d5c40:	000dab0b 	.word	0x000dab0b
   d5c44:	000dab10 	.word	0x000dab10
   d5c48:	000daa92 	.word	0x000daa92
    aResponse.body = "";
   d5c4c:	f109 0504 	add.w	r5, r9, #4
   d5c50:	490a      	ldr	r1, [pc, #40]	; (d5c7c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3d8>)
   d5c52:	4628      	mov	r0, r5
   d5c54:	f000 ff11 	bl	d6a7a <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   d5c58:	1d22      	adds	r2, r4, #4
   d5c5a:	a902      	add	r1, sp, #8
   d5c5c:	a80a      	add	r0, sp, #40	; 0x28
   d5c5e:	f000 ffeb 	bl	d6c38 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d5c62:	a90a      	add	r1, sp, #40	; 0x28
   d5c64:	4628      	mov	r0, r5
   d5c66:	f000 ff71 	bl	d6b4c <_ZN6String6concatERKS_>
   d5c6a:	a80a      	add	r0, sp, #40	; 0x28
   d5c6c:	f000 fe72 	bl	d6954 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   d5c70:	9806      	ldr	r0, [sp, #24]
   d5c72:	f004 faeb 	bl	da24c <atoi>
   d5c76:	f8c9 0000 	str.w	r0, [r9]
   d5c7a:	e7a8      	b.n	d5bce <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x32a>
   d5c7c:	000da68d 	.word	0x000da68d

000d5c80 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5c80:	b508      	push	{r3, lr}
   d5c82:	4b02      	ldr	r3, [pc, #8]	; (d5c8c <netdb_freeaddrinfo+0xc>)
   d5c84:	681b      	ldr	r3, [r3, #0]
   d5c86:	689b      	ldr	r3, [r3, #8]
   d5c88:	9301      	str	r3, [sp, #4]
   d5c8a:	bd08      	pop	{r3, pc}
   d5c8c:	00030268 	.word	0x00030268

000d5c90 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5c90:	b508      	push	{r3, lr}
   d5c92:	4b02      	ldr	r3, [pc, #8]	; (d5c9c <netdb_getaddrinfo+0xc>)
   d5c94:	681b      	ldr	r3, [r3, #0]
   d5c96:	68db      	ldr	r3, [r3, #12]
   d5c98:	9301      	str	r3, [sp, #4]
   d5c9a:	bd08      	pop	{r3, pc}
   d5c9c:	00030268 	.word	0x00030268

000d5ca0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5ca0:	b508      	push	{r3, lr}
   d5ca2:	4b02      	ldr	r3, [pc, #8]	; (d5cac <HAL_Pin_Mode+0xc>)
   d5ca4:	681b      	ldr	r3, [r3, #0]
   d5ca6:	689b      	ldr	r3, [r3, #8]
   d5ca8:	9301      	str	r3, [sp, #4]
   d5caa:	bd08      	pop	{r3, pc}
   d5cac:	0003022c 	.word	0x0003022c

000d5cb0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5cb0:	b508      	push	{r3, lr}
   d5cb2:	4b02      	ldr	r3, [pc, #8]	; (d5cbc <HAL_Get_Pin_Mode+0xc>)
   d5cb4:	681b      	ldr	r3, [r3, #0]
   d5cb6:	68db      	ldr	r3, [r3, #12]
   d5cb8:	9301      	str	r3, [sp, #4]
   d5cba:	bd08      	pop	{r3, pc}
   d5cbc:	0003022c 	.word	0x0003022c

000d5cc0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5cc0:	b508      	push	{r3, lr}
   d5cc2:	4b02      	ldr	r3, [pc, #8]	; (d5ccc <HAL_GPIO_Write+0xc>)
   d5cc4:	681b      	ldr	r3, [r3, #0]
   d5cc6:	691b      	ldr	r3, [r3, #16]
   d5cc8:	9301      	str	r3, [sp, #4]
   d5cca:	bd08      	pop	{r3, pc}
   d5ccc:	0003022c 	.word	0x0003022c

000d5cd0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5cd0:	b508      	push	{r3, lr}
   d5cd2:	4b02      	ldr	r3, [pc, #8]	; (d5cdc <HAL_GPIO_Read+0xc>)
   d5cd4:	681b      	ldr	r3, [r3, #0]
   d5cd6:	695b      	ldr	r3, [r3, #20]
   d5cd8:	9301      	str	r3, [sp, #4]
   d5cda:	bd08      	pop	{r3, pc}
   d5cdc:	0003022c 	.word	0x0003022c

000d5ce0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5ce0:	b508      	push	{r3, lr}
   d5ce2:	4b02      	ldr	r3, [pc, #8]	; (d5cec <if_index_to_name+0xc>)
   d5ce4:	681b      	ldr	r3, [r3, #0]
   d5ce6:	695b      	ldr	r3, [r3, #20]
   d5ce8:	9301      	str	r3, [sp, #4]
   d5cea:	bd08      	pop	{r3, pc}
   d5cec:	0003026c 	.word	0x0003026c

000d5cf0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5cf0:	b508      	push	{r3, lr}
   d5cf2:	4b02      	ldr	r3, [pc, #8]	; (d5cfc <HAL_RNG_GetRandomNumber+0xc>)
   d5cf4:	681b      	ldr	r3, [r3, #0]
   d5cf6:	685b      	ldr	r3, [r3, #4]
   d5cf8:	9301      	str	r3, [sp, #4]
   d5cfa:	bd08      	pop	{r3, pc}
   d5cfc:	00030218 	.word	0x00030218

000d5d00 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5d00:	b508      	push	{r3, lr}
   d5d02:	4b02      	ldr	r3, [pc, #8]	; (d5d0c <HAL_Delay_Microseconds+0xc>)
   d5d04:	681b      	ldr	r3, [r3, #0]
   d5d06:	68db      	ldr	r3, [r3, #12]
   d5d08:	9301      	str	r3, [sp, #4]
   d5d0a:	bd08      	pop	{r3, pc}
   d5d0c:	00030218 	.word	0x00030218

000d5d10 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5d10:	b508      	push	{r3, lr}
   d5d12:	4b02      	ldr	r3, [pc, #8]	; (d5d1c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5d14:	681b      	ldr	r3, [r3, #0]
   d5d16:	695b      	ldr	r3, [r3, #20]
   d5d18:	9301      	str	r3, [sp, #4]
   d5d1a:	bd08      	pop	{r3, pc}
   d5d1c:	00030218 	.word	0x00030218

000d5d20 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d5d20:	b508      	push	{r3, lr}
   d5d22:	4b02      	ldr	r3, [pc, #8]	; (d5d2c <HAL_EEPROM_Init+0xc>)
   d5d24:	681b      	ldr	r3, [r3, #0]
   d5d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5d28:	9301      	str	r3, [sp, #4]
   d5d2a:	bd08      	pop	{r3, pc}
   d5d2c:	00030218 	.word	0x00030218

000d5d30 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d5d30:	b508      	push	{r3, lr}
   d5d32:	4b02      	ldr	r3, [pc, #8]	; (d5d3c <HAL_EEPROM_Get+0xc>)
   d5d34:	681b      	ldr	r3, [r3, #0]
   d5d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d38:	9301      	str	r3, [sp, #4]
   d5d3a:	bd08      	pop	{r3, pc}
   d5d3c:	00030218 	.word	0x00030218

000d5d40 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d5d40:	b508      	push	{r3, lr}
   d5d42:	4b02      	ldr	r3, [pc, #8]	; (d5d4c <HAL_EEPROM_Put+0xc>)
   d5d44:	681b      	ldr	r3, [r3, #0]
   d5d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5d48:	9301      	str	r3, [sp, #4]
   d5d4a:	bd08      	pop	{r3, pc}
   d5d4c:	00030218 	.word	0x00030218

000d5d50 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d5d50:	b508      	push	{r3, lr}
   d5d52:	4b02      	ldr	r3, [pc, #8]	; (d5d5c <hal_rtc_time_is_valid+0xc>)
   d5d54:	681b      	ldr	r3, [r3, #0]
   d5d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5d58:	9301      	str	r3, [sp, #4]
   d5d5a:	bd08      	pop	{r3, pc}
   d5d5c:	00030218 	.word	0x00030218

000d5d60 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d5d60:	b508      	push	{r3, lr}
   d5d62:	4b02      	ldr	r3, [pc, #8]	; (d5d6c <hal_rtc_get_time+0xc>)
   d5d64:	681b      	ldr	r3, [r3, #0]
   d5d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5d68:	9301      	str	r3, [sp, #4]
   d5d6a:	bd08      	pop	{r3, pc}
   d5d6c:	00030218 	.word	0x00030218

000d5d70 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d5d70:	b508      	push	{r3, lr}
   d5d72:	4b02      	ldr	r3, [pc, #8]	; (d5d7c <hal_ble_stack_init+0xc>)
   d5d74:	681b      	ldr	r3, [r3, #0]
   d5d76:	689b      	ldr	r3, [r3, #8]
   d5d78:	9301      	str	r3, [sp, #4]
   d5d7a:	bd08      	pop	{r3, pc}
   d5d7c:	00030278 	.word	0x00030278

000d5d80 <hal_ble_stack_deinit>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
   d5d80:	b508      	push	{r3, lr}
   d5d82:	4b02      	ldr	r3, [pc, #8]	; (d5d8c <hal_ble_stack_deinit+0xc>)
   d5d84:	681b      	ldr	r3, [r3, #0]
   d5d86:	68db      	ldr	r3, [r3, #12]
   d5d88:	9301      	str	r3, [sp, #4]
   d5d8a:	bd08      	pop	{r3, pc}
   d5d8c:	00030278 	.word	0x00030278

000d5d90 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d5d90:	b508      	push	{r3, lr}
   d5d92:	4b02      	ldr	r3, [pc, #8]	; (d5d9c <hal_ble_gap_set_advertising_data+0xc>)
   d5d94:	681b      	ldr	r3, [r3, #0]
   d5d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5d98:	9301      	str	r3, [sp, #4]
   d5d9a:	bd08      	pop	{r3, pc}
   d5d9c:	00030278 	.word	0x00030278

000d5da0 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d5da0:	b508      	push	{r3, lr}
   d5da2:	4b02      	ldr	r3, [pc, #8]	; (d5dac <hal_ble_gap_set_scan_response_data+0xc>)
   d5da4:	681b      	ldr	r3, [r3, #0]
   d5da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5da8:	9301      	str	r3, [sp, #4]
   d5daa:	bd08      	pop	{r3, pc}
   d5dac:	00030278 	.word	0x00030278

000d5db0 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d5db0:	b508      	push	{r3, lr}
   d5db2:	4b02      	ldr	r3, [pc, #8]	; (d5dbc <hal_ble_gap_start_advertising+0xc>)
   d5db4:	681b      	ldr	r3, [r3, #0]
   d5db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d5db8:	9301      	str	r3, [sp, #4]
   d5dba:	bd08      	pop	{r3, pc}
   d5dbc:	00030278 	.word	0x00030278

000d5dc0 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d5dc0:	b508      	push	{r3, lr}
   d5dc2:	4b03      	ldr	r3, [pc, #12]	; (d5dd0 <hal_ble_gap_disconnect+0x10>)
   d5dc4:	681b      	ldr	r3, [r3, #0]
   d5dc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d5dca:	9301      	str	r3, [sp, #4]
   d5dcc:	bd08      	pop	{r3, pc}
   d5dce:	0000      	.short	0x0000
   d5dd0:	00030278 	.word	0x00030278

000d5dd4 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d5dd4:	b508      	push	{r3, lr}
   d5dd6:	4b03      	ldr	r3, [pc, #12]	; (d5de4 <hal_ble_gatt_server_add_service+0x10>)
   d5dd8:	681b      	ldr	r3, [r3, #0]
   d5dda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d5dde:	9301      	str	r3, [sp, #4]
   d5de0:	bd08      	pop	{r3, pc}
   d5de2:	0000      	.short	0x0000
   d5de4:	00030278 	.word	0x00030278

000d5de8 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5de8:	b508      	push	{r3, lr}
   d5dea:	4b03      	ldr	r3, [pc, #12]	; (d5df8 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d5dec:	681b      	ldr	r3, [r3, #0]
   d5dee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d5df2:	9301      	str	r3, [sp, #4]
   d5df4:	bd08      	pop	{r3, pc}
   d5df6:	0000      	.short	0x0000
   d5df8:	00030278 	.word	0x00030278

000d5dfc <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5dfc:	b508      	push	{r3, lr}
   d5dfe:	4b03      	ldr	r3, [pc, #12]	; (d5e0c <hal_ble_gatt_client_write_with_response+0x10>)
   d5e00:	681b      	ldr	r3, [r3, #0]
   d5e02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d5e06:	9301      	str	r3, [sp, #4]
   d5e08:	bd08      	pop	{r3, pc}
   d5e0a:	0000      	.short	0x0000
   d5e0c:	00030278 	.word	0x00030278

000d5e10 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5e10:	b508      	push	{r3, lr}
   d5e12:	4b03      	ldr	r3, [pc, #12]	; (d5e20 <hal_ble_gatt_client_write_without_response+0x10>)
   d5e14:	681b      	ldr	r3, [r3, #0]
   d5e16:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d5e1a:	9301      	str	r3, [sp, #4]
   d5e1c:	bd08      	pop	{r3, pc}
   d5e1e:	0000      	.short	0x0000
   d5e20:	00030278 	.word	0x00030278

000d5e24 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   d5e24:	b508      	push	{r3, lr}
   d5e26:	4b03      	ldr	r3, [pc, #12]	; (d5e34 <hal_ble_gap_get_connection_info+0x10>)
   d5e28:	681b      	ldr	r3, [r3, #0]
   d5e2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   d5e2e:	9301      	str	r3, [sp, #4]
   d5e30:	bd08      	pop	{r3, pc}
   d5e32:	0000      	.short	0x0000
   d5e34:	00030278 	.word	0x00030278

000d5e38 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d5e38:	b508      	push	{r3, lr}
   d5e3a:	4b03      	ldr	r3, [pc, #12]	; (d5e48 <hal_ble_gatt_server_add_characteristic+0x10>)
   d5e3c:	681b      	ldr	r3, [r3, #0]
   d5e3e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d5e42:	9301      	str	r3, [sp, #4]
   d5e44:	bd08      	pop	{r3, pc}
   d5e46:	0000      	.short	0x0000
   d5e48:	00030278 	.word	0x00030278

000d5e4c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d5e4c:	b508      	push	{r3, lr}
   d5e4e:	4b03      	ldr	r3, [pc, #12]	; (d5e5c <hal_ble_set_callback_on_periph_link_events+0x10>)
   d5e50:	681b      	ldr	r3, [r3, #0]
   d5e52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d5e56:	9301      	str	r3, [sp, #4]
   d5e58:	bd08      	pop	{r3, pc}
   d5e5a:	0000      	.short	0x0000
   d5e5c:	00030278 	.word	0x00030278

000d5e60 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5e60:	b508      	push	{r3, lr}
   d5e62:	4b03      	ldr	r3, [pc, #12]	; (d5e70 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d5e64:	681b      	ldr	r3, [r3, #0]
   d5e66:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d5e6a:	9301      	str	r3, [sp, #4]
   d5e6c:	bd08      	pop	{r3, pc}
   d5e6e:	0000      	.short	0x0000
   d5e70:	00030278 	.word	0x00030278

000d5e74 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5e74:	b508      	push	{r3, lr}
   d5e76:	4b03      	ldr	r3, [pc, #12]	; (d5e84 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d5e78:	681b      	ldr	r3, [r3, #0]
   d5e7a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d5e7e:	9301      	str	r3, [sp, #4]
   d5e80:	bd08      	pop	{r3, pc}
   d5e82:	0000      	.short	0x0000
   d5e84:	00030278 	.word	0x00030278

000d5e88 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5e88:	b508      	push	{r3, lr}
   d5e8a:	4b02      	ldr	r3, [pc, #8]	; (d5e94 <os_mutex_recursive_create+0xc>)
   d5e8c:	681b      	ldr	r3, [r3, #0]
   d5e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5e90:	9301      	str	r3, [sp, #4]
   d5e92:	bd08      	pop	{r3, pc}
   d5e94:	00030248 	.word	0x00030248

000d5e98 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5e98:	b508      	push	{r3, lr}
   d5e9a:	4b02      	ldr	r3, [pc, #8]	; (d5ea4 <os_mutex_recursive_destroy+0xc>)
   d5e9c:	681b      	ldr	r3, [r3, #0]
   d5e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5ea0:	9301      	str	r3, [sp, #4]
   d5ea2:	bd08      	pop	{r3, pc}
   d5ea4:	00030248 	.word	0x00030248

000d5ea8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5ea8:	b508      	push	{r3, lr}
   d5eaa:	4b02      	ldr	r3, [pc, #8]	; (d5eb4 <os_mutex_recursive_lock+0xc>)
   d5eac:	681b      	ldr	r3, [r3, #0]
   d5eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5eb0:	9301      	str	r3, [sp, #4]
   d5eb2:	bd08      	pop	{r3, pc}
   d5eb4:	00030248 	.word	0x00030248

000d5eb8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5eb8:	b508      	push	{r3, lr}
   d5eba:	4b02      	ldr	r3, [pc, #8]	; (d5ec4 <os_mutex_recursive_unlock+0xc>)
   d5ebc:	681b      	ldr	r3, [r3, #0]
   d5ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5ec0:	9301      	str	r3, [sp, #4]
   d5ec2:	bd08      	pop	{r3, pc}
   d5ec4:	00030248 	.word	0x00030248

000d5ec8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5ec8:	b508      	push	{r3, lr}
   d5eca:	4b02      	ldr	r3, [pc, #8]	; (d5ed4 <inet_inet_ntop+0xc>)
   d5ecc:	681b      	ldr	r3, [r3, #0]
   d5ece:	695b      	ldr	r3, [r3, #20]
   d5ed0:	9301      	str	r3, [sp, #4]
   d5ed2:	bd08      	pop	{r3, pc}
   d5ed4:	00030264 	.word	0x00030264

000d5ed8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5ed8:	b508      	push	{r3, lr}
   d5eda:	4b02      	ldr	r3, [pc, #8]	; (d5ee4 <inet_htonl+0xc>)
   d5edc:	681b      	ldr	r3, [r3, #0]
   d5ede:	6a1b      	ldr	r3, [r3, #32]
   d5ee0:	9301      	str	r3, [sp, #4]
   d5ee2:	bd08      	pop	{r3, pc}
   d5ee4:	00030264 	.word	0x00030264

000d5ee8 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5ee8:	b508      	push	{r3, lr}
   d5eea:	4b02      	ldr	r3, [pc, #8]	; (d5ef4 <inet_htons+0xc>)
   d5eec:	681b      	ldr	r3, [r3, #0]
   d5eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5ef0:	9301      	str	r3, [sp, #4]
   d5ef2:	bd08      	pop	{r3, pc}
   d5ef4:	00030264 	.word	0x00030264

000d5ef8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5ef8:	b508      	push	{r3, lr}
   d5efa:	4b02      	ldr	r3, [pc, #8]	; (d5f04 <hal_usart_init+0xc>)
   d5efc:	681b      	ldr	r3, [r3, #0]
   d5efe:	681b      	ldr	r3, [r3, #0]
   d5f00:	9301      	str	r3, [sp, #4]
   d5f02:	bd08      	pop	{r3, pc}
   d5f04:	0003023c 	.word	0x0003023c

000d5f08 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5f08:	b508      	push	{r3, lr}
   d5f0a:	4b02      	ldr	r3, [pc, #8]	; (d5f14 <hal_usart_write+0xc>)
   d5f0c:	681b      	ldr	r3, [r3, #0]
   d5f0e:	68db      	ldr	r3, [r3, #12]
   d5f10:	9301      	str	r3, [sp, #4]
   d5f12:	bd08      	pop	{r3, pc}
   d5f14:	0003023c 	.word	0x0003023c

000d5f18 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5f18:	b508      	push	{r3, lr}
   d5f1a:	4b02      	ldr	r3, [pc, #8]	; (d5f24 <hal_usart_available+0xc>)
   d5f1c:	681b      	ldr	r3, [r3, #0]
   d5f1e:	691b      	ldr	r3, [r3, #16]
   d5f20:	9301      	str	r3, [sp, #4]
   d5f22:	bd08      	pop	{r3, pc}
   d5f24:	0003023c 	.word	0x0003023c

000d5f28 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5f28:	b508      	push	{r3, lr}
   d5f2a:	4b02      	ldr	r3, [pc, #8]	; (d5f34 <hal_usart_read+0xc>)
   d5f2c:	681b      	ldr	r3, [r3, #0]
   d5f2e:	695b      	ldr	r3, [r3, #20]
   d5f30:	9301      	str	r3, [sp, #4]
   d5f32:	bd08      	pop	{r3, pc}
   d5f34:	0003023c 	.word	0x0003023c

000d5f38 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5f38:	b508      	push	{r3, lr}
   d5f3a:	4b02      	ldr	r3, [pc, #8]	; (d5f44 <hal_usart_peek+0xc>)
   d5f3c:	681b      	ldr	r3, [r3, #0]
   d5f3e:	699b      	ldr	r3, [r3, #24]
   d5f40:	9301      	str	r3, [sp, #4]
   d5f42:	bd08      	pop	{r3, pc}
   d5f44:	0003023c 	.word	0x0003023c

000d5f48 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5f48:	b508      	push	{r3, lr}
   d5f4a:	4b02      	ldr	r3, [pc, #8]	; (d5f54 <hal_usart_flush+0xc>)
   d5f4c:	681b      	ldr	r3, [r3, #0]
   d5f4e:	69db      	ldr	r3, [r3, #28]
   d5f50:	9301      	str	r3, [sp, #4]
   d5f52:	bd08      	pop	{r3, pc}
   d5f54:	0003023c 	.word	0x0003023c

000d5f58 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5f58:	b508      	push	{r3, lr}
   d5f5a:	4b02      	ldr	r3, [pc, #8]	; (d5f64 <hal_usart_is_enabled+0xc>)
   d5f5c:	681b      	ldr	r3, [r3, #0]
   d5f5e:	6a1b      	ldr	r3, [r3, #32]
   d5f60:	9301      	str	r3, [sp, #4]
   d5f62:	bd08      	pop	{r3, pc}
   d5f64:	0003023c 	.word	0x0003023c

000d5f68 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5f68:	b508      	push	{r3, lr}
   d5f6a:	4b02      	ldr	r3, [pc, #8]	; (d5f74 <hal_usart_available_data_for_write+0xc>)
   d5f6c:	681b      	ldr	r3, [r3, #0]
   d5f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5f70:	9301      	str	r3, [sp, #4]
   d5f72:	bd08      	pop	{r3, pc}
   d5f74:	0003023c 	.word	0x0003023c

000d5f78 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5f78:	b508      	push	{r3, lr}
   d5f7a:	4b02      	ldr	r3, [pc, #8]	; (d5f84 <hal_i2c_begin+0xc>)
   d5f7c:	681b      	ldr	r3, [r3, #0]
   d5f7e:	68db      	ldr	r3, [r3, #12]
   d5f80:	9301      	str	r3, [sp, #4]
   d5f82:	bd08      	pop	{r3, pc}
   d5f84:	00030228 	.word	0x00030228

000d5f88 <hal_i2c_end>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
   d5f88:	b508      	push	{r3, lr}
   d5f8a:	4b02      	ldr	r3, [pc, #8]	; (d5f94 <hal_i2c_end+0xc>)
   d5f8c:	681b      	ldr	r3, [r3, #0]
   d5f8e:	691b      	ldr	r3, [r3, #16]
   d5f90:	9301      	str	r3, [sp, #4]
   d5f92:	bd08      	pop	{r3, pc}
   d5f94:	00030228 	.word	0x00030228

000d5f98 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5f98:	b508      	push	{r3, lr}
   d5f9a:	4b02      	ldr	r3, [pc, #8]	; (d5fa4 <hal_i2c_begin_transmission+0xc>)
   d5f9c:	681b      	ldr	r3, [r3, #0]
   d5f9e:	699b      	ldr	r3, [r3, #24]
   d5fa0:	9301      	str	r3, [sp, #4]
   d5fa2:	bd08      	pop	{r3, pc}
   d5fa4:	00030228 	.word	0x00030228

000d5fa8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5fa8:	b508      	push	{r3, lr}
   d5faa:	4b02      	ldr	r3, [pc, #8]	; (d5fb4 <hal_i2c_end_transmission+0xc>)
   d5fac:	681b      	ldr	r3, [r3, #0]
   d5fae:	69db      	ldr	r3, [r3, #28]
   d5fb0:	9301      	str	r3, [sp, #4]
   d5fb2:	bd08      	pop	{r3, pc}
   d5fb4:	00030228 	.word	0x00030228

000d5fb8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5fb8:	b508      	push	{r3, lr}
   d5fba:	4b02      	ldr	r3, [pc, #8]	; (d5fc4 <hal_i2c_write+0xc>)
   d5fbc:	681b      	ldr	r3, [r3, #0]
   d5fbe:	6a1b      	ldr	r3, [r3, #32]
   d5fc0:	9301      	str	r3, [sp, #4]
   d5fc2:	bd08      	pop	{r3, pc}
   d5fc4:	00030228 	.word	0x00030228

000d5fc8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5fc8:	b508      	push	{r3, lr}
   d5fca:	4b02      	ldr	r3, [pc, #8]	; (d5fd4 <hal_i2c_available+0xc>)
   d5fcc:	681b      	ldr	r3, [r3, #0]
   d5fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5fd0:	9301      	str	r3, [sp, #4]
   d5fd2:	bd08      	pop	{r3, pc}
   d5fd4:	00030228 	.word	0x00030228

000d5fd8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5fd8:	b508      	push	{r3, lr}
   d5fda:	4b02      	ldr	r3, [pc, #8]	; (d5fe4 <hal_i2c_read+0xc>)
   d5fdc:	681b      	ldr	r3, [r3, #0]
   d5fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5fe0:	9301      	str	r3, [sp, #4]
   d5fe2:	bd08      	pop	{r3, pc}
   d5fe4:	00030228 	.word	0x00030228

000d5fe8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5fe8:	b508      	push	{r3, lr}
   d5fea:	4b02      	ldr	r3, [pc, #8]	; (d5ff4 <hal_i2c_peek+0xc>)
   d5fec:	681b      	ldr	r3, [r3, #0]
   d5fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ff0:	9301      	str	r3, [sp, #4]
   d5ff2:	bd08      	pop	{r3, pc}
   d5ff4:	00030228 	.word	0x00030228

000d5ff8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5ff8:	b508      	push	{r3, lr}
   d5ffa:	4b02      	ldr	r3, [pc, #8]	; (d6004 <hal_i2c_flush+0xc>)
   d5ffc:	681b      	ldr	r3, [r3, #0]
   d5ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6000:	9301      	str	r3, [sp, #4]
   d6002:	bd08      	pop	{r3, pc}
   d6004:	00030228 	.word	0x00030228

000d6008 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6008:	b508      	push	{r3, lr}
   d600a:	4b02      	ldr	r3, [pc, #8]	; (d6014 <hal_i2c_is_enabled+0xc>)
   d600c:	681b      	ldr	r3, [r3, #0]
   d600e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6010:	9301      	str	r3, [sp, #4]
   d6012:	bd08      	pop	{r3, pc}
   d6014:	00030228 	.word	0x00030228

000d6018 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6018:	b508      	push	{r3, lr}
   d601a:	4b02      	ldr	r3, [pc, #8]	; (d6024 <hal_i2c_init+0xc>)
   d601c:	681b      	ldr	r3, [r3, #0]
   d601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6020:	9301      	str	r3, [sp, #4]
   d6022:	bd08      	pop	{r3, pc}
   d6024:	00030228 	.word	0x00030228

000d6028 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d6028:	b508      	push	{r3, lr}
   d602a:	4b02      	ldr	r3, [pc, #8]	; (d6034 <hal_i2c_request_ex+0xc>)
   d602c:	681b      	ldr	r3, [r3, #0]
   d602e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6030:	9301      	str	r3, [sp, #4]
   d6032:	bd08      	pop	{r3, pc}
   d6034:	00030228 	.word	0x00030228

000d6038 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6038:	b508      	push	{r3, lr}
   d603a:	4b02      	ldr	r3, [pc, #8]	; (d6044 <sock_setsockopt+0xc>)
   d603c:	681b      	ldr	r3, [r3, #0]
   d603e:	699b      	ldr	r3, [r3, #24]
   d6040:	9301      	str	r3, [sp, #4]
   d6042:	bd08      	pop	{r3, pc}
   d6044:	00030238 	.word	0x00030238

000d6048 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6048:	b508      	push	{r3, lr}
   d604a:	4b02      	ldr	r3, [pc, #8]	; (d6054 <sock_close+0xc>)
   d604c:	681b      	ldr	r3, [r3, #0]
   d604e:	69db      	ldr	r3, [r3, #28]
   d6050:	9301      	str	r3, [sp, #4]
   d6052:	bd08      	pop	{r3, pc}
   d6054:	00030238 	.word	0x00030238

000d6058 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6058:	b508      	push	{r3, lr}
   d605a:	4b02      	ldr	r3, [pc, #8]	; (d6064 <sock_connect+0xc>)
   d605c:	681b      	ldr	r3, [r3, #0]
   d605e:	6a1b      	ldr	r3, [r3, #32]
   d6060:	9301      	str	r3, [sp, #4]
   d6062:	bd08      	pop	{r3, pc}
   d6064:	00030238 	.word	0x00030238

000d6068 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6068:	b508      	push	{r3, lr}
   d606a:	4b02      	ldr	r3, [pc, #8]	; (d6074 <sock_recv+0xc>)
   d606c:	681b      	ldr	r3, [r3, #0]
   d606e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6070:	9301      	str	r3, [sp, #4]
   d6072:	bd08      	pop	{r3, pc}
   d6074:	00030238 	.word	0x00030238

000d6078 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6078:	b508      	push	{r3, lr}
   d607a:	4b02      	ldr	r3, [pc, #8]	; (d6084 <sock_send+0xc>)
   d607c:	681b      	ldr	r3, [r3, #0]
   d607e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6080:	9301      	str	r3, [sp, #4]
   d6082:	bd08      	pop	{r3, pc}
   d6084:	00030238 	.word	0x00030238

000d6088 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6088:	b508      	push	{r3, lr}
   d608a:	4b02      	ldr	r3, [pc, #8]	; (d6094 <sock_socket+0xc>)
   d608c:	681b      	ldr	r3, [r3, #0]
   d608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6090:	9301      	str	r3, [sp, #4]
   d6092:	bd08      	pop	{r3, pc}
   d6094:	00030238 	.word	0x00030238

000d6098 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d6098:	b508      	push	{r3, lr}
   d609a:	4b02      	ldr	r3, [pc, #8]	; (d60a4 <hal_spi_begin+0xc>)
   d609c:	681b      	ldr	r3, [r3, #0]
   d609e:	681b      	ldr	r3, [r3, #0]
   d60a0:	9301      	str	r3, [sp, #4]
   d60a2:	bd08      	pop	{r3, pc}
   d60a4:	00030230 	.word	0x00030230

000d60a8 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d60a8:	b508      	push	{r3, lr}
   d60aa:	4b02      	ldr	r3, [pc, #8]	; (d60b4 <hal_spi_set_bit_order+0xc>)
   d60ac:	681b      	ldr	r3, [r3, #0]
   d60ae:	689b      	ldr	r3, [r3, #8]
   d60b0:	9301      	str	r3, [sp, #4]
   d60b2:	bd08      	pop	{r3, pc}
   d60b4:	00030230 	.word	0x00030230

000d60b8 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d60b8:	b508      	push	{r3, lr}
   d60ba:	4b02      	ldr	r3, [pc, #8]	; (d60c4 <hal_spi_set_data_mode+0xc>)
   d60bc:	681b      	ldr	r3, [r3, #0]
   d60be:	68db      	ldr	r3, [r3, #12]
   d60c0:	9301      	str	r3, [sp, #4]
   d60c2:	bd08      	pop	{r3, pc}
   d60c4:	00030230 	.word	0x00030230

000d60c8 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d60c8:	b508      	push	{r3, lr}
   d60ca:	4b02      	ldr	r3, [pc, #8]	; (d60d4 <hal_spi_set_clock_divider+0xc>)
   d60cc:	681b      	ldr	r3, [r3, #0]
   d60ce:	691b      	ldr	r3, [r3, #16]
   d60d0:	9301      	str	r3, [sp, #4]
   d60d2:	bd08      	pop	{r3, pc}
   d60d4:	00030230 	.word	0x00030230

000d60d8 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d60d8:	b508      	push	{r3, lr}
   d60da:	4b02      	ldr	r3, [pc, #8]	; (d60e4 <hal_spi_transfer+0xc>)
   d60dc:	681b      	ldr	r3, [r3, #0]
   d60de:	695b      	ldr	r3, [r3, #20]
   d60e0:	9301      	str	r3, [sp, #4]
   d60e2:	bd08      	pop	{r3, pc}
   d60e4:	00030230 	.word	0x00030230

000d60e8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d60e8:	b508      	push	{r3, lr}
   d60ea:	4b02      	ldr	r3, [pc, #8]	; (d60f4 <hal_spi_init+0xc>)
   d60ec:	681b      	ldr	r3, [r3, #0]
   d60ee:	69db      	ldr	r3, [r3, #28]
   d60f0:	9301      	str	r3, [sp, #4]
   d60f2:	bd08      	pop	{r3, pc}
   d60f4:	00030230 	.word	0x00030230

000d60f8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d60f8:	b508      	push	{r3, lr}
   d60fa:	4b02      	ldr	r3, [pc, #8]	; (d6104 <hal_spi_is_enabled+0xc>)
   d60fc:	681b      	ldr	r3, [r3, #0]
   d60fe:	6a1b      	ldr	r3, [r3, #32]
   d6100:	9301      	str	r3, [sp, #4]
   d6102:	bd08      	pop	{r3, pc}
   d6104:	00030230 	.word	0x00030230

000d6108 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d6108:	b508      	push	{r3, lr}
   d610a:	4b02      	ldr	r3, [pc, #8]	; (d6114 <hal_spi_info+0xc>)
   d610c:	681b      	ldr	r3, [r3, #0]
   d610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6110:	9301      	str	r3, [sp, #4]
   d6112:	bd08      	pop	{r3, pc}
   d6114:	00030230 	.word	0x00030230

000d6118 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d6118:	b508      	push	{r3, lr}
   d611a:	4b02      	ldr	r3, [pc, #8]	; (d6124 <hal_spi_acquire+0xc>)
   d611c:	681b      	ldr	r3, [r3, #0]
   d611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6120:	9301      	str	r3, [sp, #4]
   d6122:	bd08      	pop	{r3, pc}
   d6124:	00030230 	.word	0x00030230

000d6128 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d6128:	b508      	push	{r3, lr}
   d612a:	4b02      	ldr	r3, [pc, #8]	; (d6134 <hal_spi_release+0xc>)
   d612c:	681b      	ldr	r3, [r3, #0]
   d612e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6130:	9301      	str	r3, [sp, #4]
   d6132:	bd08      	pop	{r3, pc}
   d6134:	00030230 	.word	0x00030230

000d6138 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6138:	b508      	push	{r3, lr}
   d613a:	4b02      	ldr	r3, [pc, #8]	; (d6144 <HAL_USB_USART_Init+0xc>)
   d613c:	681b      	ldr	r3, [r3, #0]
   d613e:	681b      	ldr	r3, [r3, #0]
   d6140:	9301      	str	r3, [sp, #4]
   d6142:	bd08      	pop	{r3, pc}
   d6144:	0003024c 	.word	0x0003024c

000d6148 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6148:	b508      	push	{r3, lr}
   d614a:	4b02      	ldr	r3, [pc, #8]	; (d6154 <HAL_USB_USART_Begin+0xc>)
   d614c:	681b      	ldr	r3, [r3, #0]
   d614e:	685b      	ldr	r3, [r3, #4]
   d6150:	9301      	str	r3, [sp, #4]
   d6152:	bd08      	pop	{r3, pc}
   d6154:	0003024c 	.word	0x0003024c

000d6158 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6158:	b508      	push	{r3, lr}
   d615a:	4b02      	ldr	r3, [pc, #8]	; (d6164 <HAL_USB_USART_Available_Data+0xc>)
   d615c:	681b      	ldr	r3, [r3, #0]
   d615e:	691b      	ldr	r3, [r3, #16]
   d6160:	9301      	str	r3, [sp, #4]
   d6162:	bd08      	pop	{r3, pc}
   d6164:	0003024c 	.word	0x0003024c

000d6168 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6168:	b508      	push	{r3, lr}
   d616a:	4b02      	ldr	r3, [pc, #8]	; (d6174 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d616c:	681b      	ldr	r3, [r3, #0]
   d616e:	695b      	ldr	r3, [r3, #20]
   d6170:	9301      	str	r3, [sp, #4]
   d6172:	bd08      	pop	{r3, pc}
   d6174:	0003024c 	.word	0x0003024c

000d6178 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6178:	b508      	push	{r3, lr}
   d617a:	4b02      	ldr	r3, [pc, #8]	; (d6184 <HAL_USB_USART_Receive_Data+0xc>)
   d617c:	681b      	ldr	r3, [r3, #0]
   d617e:	699b      	ldr	r3, [r3, #24]
   d6180:	9301      	str	r3, [sp, #4]
   d6182:	bd08      	pop	{r3, pc}
   d6184:	0003024c 	.word	0x0003024c

000d6188 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6188:	b508      	push	{r3, lr}
   d618a:	4b02      	ldr	r3, [pc, #8]	; (d6194 <HAL_USB_USART_Send_Data+0xc>)
   d618c:	681b      	ldr	r3, [r3, #0]
   d618e:	69db      	ldr	r3, [r3, #28]
   d6190:	9301      	str	r3, [sp, #4]
   d6192:	bd08      	pop	{r3, pc}
   d6194:	0003024c 	.word	0x0003024c

000d6198 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6198:	b508      	push	{r3, lr}
   d619a:	4b02      	ldr	r3, [pc, #8]	; (d61a4 <HAL_USB_USART_Flush_Data+0xc>)
   d619c:	681b      	ldr	r3, [r3, #0]
   d619e:	6a1b      	ldr	r3, [r3, #32]
   d61a0:	9301      	str	r3, [sp, #4]
   d61a2:	bd08      	pop	{r3, pc}
   d61a4:	0003024c 	.word	0x0003024c

000d61a8 <wlan_get_credentials>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
   d61a8:	b508      	push	{r3, lr}
   d61aa:	4b02      	ldr	r3, [pc, #8]	; (d61b4 <wlan_get_credentials+0xc>)
   d61ac:	681b      	ldr	r3, [r3, #0]
   d61ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d61b0:	9301      	str	r3, [sp, #4]
   d61b2:	bd08      	pop	{r3, pc}
   d61b4:	00030274 	.word	0x00030274

000d61b8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d61b8:	b508      	push	{r3, lr}
   d61ba:	4b02      	ldr	r3, [pc, #8]	; (d61c4 <panic_+0xc>)
   d61bc:	681b      	ldr	r3, [r3, #0]
   d61be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d61c0:	9301      	str	r3, [sp, #4]
   d61c2:	bd08      	pop	{r3, pc}
   d61c4:	00030260 	.word	0x00030260

000d61c8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d61c8:	b508      	push	{r3, lr}
   d61ca:	4b02      	ldr	r3, [pc, #8]	; (d61d4 <log_message+0xc>)
   d61cc:	681b      	ldr	r3, [r3, #0]
   d61ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d61d0:	9301      	str	r3, [sp, #4]
   d61d2:	bd08      	pop	{r3, pc}
   d61d4:	00030260 	.word	0x00030260

000d61d8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d61d8:	b508      	push	{r3, lr}
   d61da:	4b02      	ldr	r3, [pc, #8]	; (d61e4 <system_mode+0xc>)
   d61dc:	681b      	ldr	r3, [r3, #0]
   d61de:	681b      	ldr	r3, [r3, #0]
   d61e0:	9301      	str	r3, [sp, #4]
   d61e2:	bd08      	pop	{r3, pc}
   d61e4:	00030220 	.word	0x00030220

000d61e8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d61e8:	b508      	push	{r3, lr}
   d61ea:	4b02      	ldr	r3, [pc, #8]	; (d61f4 <set_system_mode+0xc>)
   d61ec:	681b      	ldr	r3, [r3, #0]
   d61ee:	685b      	ldr	r3, [r3, #4]
   d61f0:	9301      	str	r3, [sp, #4]
   d61f2:	bd08      	pop	{r3, pc}
   d61f4:	00030220 	.word	0x00030220

000d61f8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d61f8:	b508      	push	{r3, lr}
   d61fa:	4b02      	ldr	r3, [pc, #8]	; (d6204 <system_delay_ms+0xc>)
   d61fc:	681b      	ldr	r3, [r3, #0]
   d61fe:	695b      	ldr	r3, [r3, #20]
   d6200:	9301      	str	r3, [sp, #4]
   d6202:	bd08      	pop	{r3, pc}
   d6204:	00030220 	.word	0x00030220

000d6208 <system_get_flag>:
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
DYNALIB_FN(14, system, system_set_flag, int(system_flag_t, uint8_t, void*))
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
   d6208:	b508      	push	{r3, lr}
   d620a:	4b02      	ldr	r3, [pc, #8]	; (d6214 <system_get_flag+0xc>)
   d620c:	681b      	ldr	r3, [r3, #0]
   d620e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6210:	9301      	str	r3, [sp, #4]
   d6212:	bd08      	pop	{r3, pc}
   d6214:	00030220 	.word	0x00030220

000d6218 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6218:	b508      	push	{r3, lr}
   d621a:	4b02      	ldr	r3, [pc, #8]	; (d6224 <system_thread_get_state+0xc>)
   d621c:	681b      	ldr	r3, [r3, #0]
   d621e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6220:	9301      	str	r3, [sp, #4]
   d6222:	bd08      	pop	{r3, pc}
   d6224:	00030220 	.word	0x00030220

000d6228 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6228:	b508      	push	{r3, lr}
   d622a:	4b03      	ldr	r3, [pc, #12]	; (d6238 <system_ctrl_set_app_request_handler+0x10>)
   d622c:	681b      	ldr	r3, [r3, #0]
   d622e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6232:	9301      	str	r3, [sp, #4]
   d6234:	bd08      	pop	{r3, pc}
   d6236:	0000      	.short	0x0000
   d6238:	00030220 	.word	0x00030220

000d623c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d623c:	b508      	push	{r3, lr}
   d623e:	4b03      	ldr	r3, [pc, #12]	; (d624c <system_ctrl_set_result+0x10>)
   d6240:	681b      	ldr	r3, [r3, #0]
   d6242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6246:	9301      	str	r3, [sp, #4]
   d6248:	bd08      	pop	{r3, pc}
   d624a:	0000      	.short	0x0000
   d624c:	00030220 	.word	0x00030220

000d6250 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d6250:	b508      	push	{r3, lr}
   d6252:	4b03      	ldr	r3, [pc, #12]	; (d6260 <system_sleep_ext+0x10>)
   d6254:	681b      	ldr	r3, [r3, #0]
   d6256:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d625a:	9301      	str	r3, [sp, #4]
   d625c:	bd08      	pop	{r3, pc}
   d625e:	0000      	.short	0x0000
   d6260:	00030220 	.word	0x00030220

000d6264 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6264:	b508      	push	{r3, lr}
   d6266:	4b02      	ldr	r3, [pc, #8]	; (d6270 <network_connect+0xc>)
   d6268:	681b      	ldr	r3, [r3, #0]
   d626a:	685b      	ldr	r3, [r3, #4]
   d626c:	9301      	str	r3, [sp, #4]
   d626e:	bd08      	pop	{r3, pc}
   d6270:	00030240 	.word	0x00030240

000d6274 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6274:	b508      	push	{r3, lr}
   d6276:	4b02      	ldr	r3, [pc, #8]	; (d6280 <network_connecting+0xc>)
   d6278:	681b      	ldr	r3, [r3, #0]
   d627a:	689b      	ldr	r3, [r3, #8]
   d627c:	9301      	str	r3, [sp, #4]
   d627e:	bd08      	pop	{r3, pc}
   d6280:	00030240 	.word	0x00030240

000d6284 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6284:	b508      	push	{r3, lr}
   d6286:	4b02      	ldr	r3, [pc, #8]	; (d6290 <network_disconnect+0xc>)
   d6288:	681b      	ldr	r3, [r3, #0]
   d628a:	68db      	ldr	r3, [r3, #12]
   d628c:	9301      	str	r3, [sp, #4]
   d628e:	bd08      	pop	{r3, pc}
   d6290:	00030240 	.word	0x00030240

000d6294 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6294:	b508      	push	{r3, lr}
   d6296:	4b02      	ldr	r3, [pc, #8]	; (d62a0 <network_ready+0xc>)
   d6298:	681b      	ldr	r3, [r3, #0]
   d629a:	691b      	ldr	r3, [r3, #16]
   d629c:	9301      	str	r3, [sp, #4]
   d629e:	bd08      	pop	{r3, pc}
   d62a0:	00030240 	.word	0x00030240

000d62a4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d62a4:	b508      	push	{r3, lr}
   d62a6:	4b02      	ldr	r3, [pc, #8]	; (d62b0 <network_on+0xc>)
   d62a8:	681b      	ldr	r3, [r3, #0]
   d62aa:	695b      	ldr	r3, [r3, #20]
   d62ac:	9301      	str	r3, [sp, #4]
   d62ae:	bd08      	pop	{r3, pc}
   d62b0:	00030240 	.word	0x00030240

000d62b4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d62b4:	b508      	push	{r3, lr}
   d62b6:	4b02      	ldr	r3, [pc, #8]	; (d62c0 <network_off+0xc>)
   d62b8:	681b      	ldr	r3, [r3, #0]
   d62ba:	699b      	ldr	r3, [r3, #24]
   d62bc:	9301      	str	r3, [sp, #4]
   d62be:	bd08      	pop	{r3, pc}
   d62c0:	00030240 	.word	0x00030240

000d62c4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d62c4:	b508      	push	{r3, lr}
   d62c6:	4b02      	ldr	r3, [pc, #8]	; (d62d0 <network_listen+0xc>)
   d62c8:	681b      	ldr	r3, [r3, #0]
   d62ca:	69db      	ldr	r3, [r3, #28]
   d62cc:	9301      	str	r3, [sp, #4]
   d62ce:	bd08      	pop	{r3, pc}
   d62d0:	00030240 	.word	0x00030240

000d62d4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d62d4:	b508      	push	{r3, lr}
   d62d6:	4b02      	ldr	r3, [pc, #8]	; (d62e0 <network_listening+0xc>)
   d62d8:	681b      	ldr	r3, [r3, #0]
   d62da:	6a1b      	ldr	r3, [r3, #32]
   d62dc:	9301      	str	r3, [sp, #4]
   d62de:	bd08      	pop	{r3, pc}
   d62e0:	00030240 	.word	0x00030240

000d62e4 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   d62e4:	b508      	push	{r3, lr}
   d62e6:	4b02      	ldr	r3, [pc, #8]	; (d62f0 <network_has_credentials+0xc>)
   d62e8:	681b      	ldr	r3, [r3, #0]
   d62ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d62ec:	9301      	str	r3, [sp, #4]
   d62ee:	bd08      	pop	{r3, pc}
   d62f0:	00030240 	.word	0x00030240

000d62f4 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d62f4:	b508      	push	{r3, lr}
   d62f6:	4b02      	ldr	r3, [pc, #8]	; (d6300 <network_set_credentials+0xc>)
   d62f8:	681b      	ldr	r3, [r3, #0]
   d62fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d62fc:	9301      	str	r3, [sp, #4]
   d62fe:	bd08      	pop	{r3, pc}
   d6300:	00030240 	.word	0x00030240

000d6304 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d6304:	b508      	push	{r3, lr}
   d6306:	4b02      	ldr	r3, [pc, #8]	; (d6310 <network_clear_credentials+0xc>)
   d6308:	681b      	ldr	r3, [r3, #0]
   d630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d630c:	9301      	str	r3, [sp, #4]
   d630e:	bd08      	pop	{r3, pc}
   d6310:	00030240 	.word	0x00030240

000d6314 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6314:	b508      	push	{r3, lr}
   d6316:	4b02      	ldr	r3, [pc, #8]	; (d6320 <network_set_listen_timeout+0xc>)
   d6318:	681b      	ldr	r3, [r3, #0]
   d631a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d631c:	9301      	str	r3, [sp, #4]
   d631e:	bd08      	pop	{r3, pc}
   d6320:	00030240 	.word	0x00030240

000d6324 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6324:	b508      	push	{r3, lr}
   d6326:	4b02      	ldr	r3, [pc, #8]	; (d6330 <network_get_listen_timeout+0xc>)
   d6328:	681b      	ldr	r3, [r3, #0]
   d632a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d632c:	9301      	str	r3, [sp, #4]
   d632e:	bd08      	pop	{r3, pc}
   d6330:	00030240 	.word	0x00030240

000d6334 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d6334:	b508      	push	{r3, lr}
   d6336:	4b02      	ldr	r3, [pc, #8]	; (d6340 <network_is_on+0xc>)
   d6338:	681b      	ldr	r3, [r3, #0]
   d633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d633c:	9301      	str	r3, [sp, #4]
   d633e:	bd08      	pop	{r3, pc}
   d6340:	00030240 	.word	0x00030240

000d6344 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d6344:	b508      	push	{r3, lr}
   d6346:	4b02      	ldr	r3, [pc, #8]	; (d6350 <network_is_off+0xc>)
   d6348:	681b      	ldr	r3, [r3, #0]
   d634a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d634c:	9301      	str	r3, [sp, #4]
   d634e:	bd08      	pop	{r3, pc}
   d6350:	00030240 	.word	0x00030240

000d6354 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6354:	b508      	push	{r3, lr}
   d6356:	4b02      	ldr	r3, [pc, #8]	; (d6360 <spark_process+0xc>)
   d6358:	681b      	ldr	r3, [r3, #0]
   d635a:	689b      	ldr	r3, [r3, #8]
   d635c:	9301      	str	r3, [sp, #4]
   d635e:	bd08      	pop	{r3, pc}
   d6360:	00030244 	.word	0x00030244

000d6364 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d6364:	b508      	push	{r3, lr}
   d6366:	4b02      	ldr	r3, [pc, #8]	; (d6370 <spark_cloud_flag_connect+0xc>)
   d6368:	681b      	ldr	r3, [r3, #0]
   d636a:	68db      	ldr	r3, [r3, #12]
   d636c:	9301      	str	r3, [sp, #4]
   d636e:	bd08      	pop	{r3, pc}
   d6370:	00030244 	.word	0x00030244

000d6374 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6374:	b508      	push	{r3, lr}
   d6376:	4b02      	ldr	r3, [pc, #8]	; (d6380 <spark_cloud_flag_connected+0xc>)
   d6378:	681b      	ldr	r3, [r3, #0]
   d637a:	695b      	ldr	r3, [r3, #20]
   d637c:	9301      	str	r3, [sp, #4]
   d637e:	bd08      	pop	{r3, pc}
   d6380:	00030244 	.word	0x00030244

000d6384 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6384:	b508      	push	{r3, lr}
   d6386:	4b02      	ldr	r3, [pc, #8]	; (d6390 <spark_sync_time+0xc>)
   d6388:	681b      	ldr	r3, [r3, #0]
   d638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d638c:	9301      	str	r3, [sp, #4]
   d638e:	bd08      	pop	{r3, pc}
   d6390:	00030244 	.word	0x00030244

000d6394 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6394:	b508      	push	{r3, lr}
   d6396:	4b02      	ldr	r3, [pc, #8]	; (d63a0 <spark_sync_time_pending+0xc>)
   d6398:	681b      	ldr	r3, [r3, #0]
   d639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d639c:	9301      	str	r3, [sp, #4]
   d639e:	bd08      	pop	{r3, pc}
   d63a0:	00030244 	.word	0x00030244

000d63a4 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d63a4:	b508      	push	{r3, lr}
   d63a6:	4b02      	ldr	r3, [pc, #8]	; (d63b0 <spark_sync_time_last+0xc>)
   d63a8:	681b      	ldr	r3, [r3, #0]
   d63aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d63ac:	9301      	str	r3, [sp, #4]
   d63ae:	bd08      	pop	{r3, pc}
   d63b0:	00030244 	.word	0x00030244

000d63b4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d63b4:	b508      	push	{r3, lr}
   d63b6:	4b02      	ldr	r3, [pc, #8]	; (d63c0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d63b8:	681b      	ldr	r3, [r3, #0]
   d63ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d63bc:	9301      	str	r3, [sp, #4]
   d63be:	bd08      	pop	{r3, pc}
   d63c0:	00030244 	.word	0x00030244

000d63c4 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d63c4:	b508      	push	{r3, lr}
   d63c6:	4b02      	ldr	r3, [pc, #8]	; (d63d0 <spark_cloud_disconnect+0xc>)
   d63c8:	681b      	ldr	r3, [r3, #0]
   d63ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d63cc:	9301      	str	r3, [sp, #4]
   d63ce:	bd08      	pop	{r3, pc}
   d63d0:	00030244 	.word	0x00030244

000d63d4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d63d4:	b508      	push	{r3, lr}
   d63d6:	4b02      	ldr	r3, [pc, #8]	; (d63e0 <malloc+0xc>)
   d63d8:	681b      	ldr	r3, [r3, #0]
   d63da:	681b      	ldr	r3, [r3, #0]
   d63dc:	9301      	str	r3, [sp, #4]
   d63de:	bd08      	pop	{r3, pc}
   d63e0:	0003021c 	.word	0x0003021c

000d63e4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d63e4:	b508      	push	{r3, lr}
   d63e6:	4b02      	ldr	r3, [pc, #8]	; (d63f0 <free+0xc>)
   d63e8:	681b      	ldr	r3, [r3, #0]
   d63ea:	685b      	ldr	r3, [r3, #4]
   d63ec:	9301      	str	r3, [sp, #4]
   d63ee:	bd08      	pop	{r3, pc}
   d63f0:	0003021c 	.word	0x0003021c

000d63f4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d63f4:	b508      	push	{r3, lr}
   d63f6:	4b02      	ldr	r3, [pc, #8]	; (d6400 <realloc+0xc>)
   d63f8:	681b      	ldr	r3, [r3, #0]
   d63fa:	689b      	ldr	r3, [r3, #8]
   d63fc:	9301      	str	r3, [sp, #4]
   d63fe:	bd08      	pop	{r3, pc}
   d6400:	0003021c 	.word	0x0003021c

000d6404 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6404:	b508      	push	{r3, lr}
   d6406:	4b02      	ldr	r3, [pc, #8]	; (d6410 <abort+0xc>)
   d6408:	681b      	ldr	r3, [r3, #0]
   d640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d640c:	9301      	str	r3, [sp, #4]
   d640e:	bd08      	pop	{r3, pc}
   d6410:	0003021c 	.word	0x0003021c

000d6414 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6414:	b508      	push	{r3, lr}
   d6416:	4b02      	ldr	r3, [pc, #8]	; (d6420 <__errno+0xc>)
   d6418:	681b      	ldr	r3, [r3, #0]
   d641a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d641c:	9301      	str	r3, [sp, #4]
   d641e:	bd08      	pop	{r3, pc}
   d6420:	0003021c 	.word	0x0003021c

000d6424 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6424:	b508      	push	{r3, lr}
   d6426:	4b02      	ldr	r3, [pc, #8]	; (d6430 <newlib_impure_ptr_callback+0xc>)
   d6428:	681b      	ldr	r3, [r3, #0]
   d642a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d642c:	9301      	str	r3, [sp, #4]
   d642e:	bd08      	pop	{r3, pc}
   d6430:	0003021c 	.word	0x0003021c

000d6434 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6434:	2200      	movs	r2, #0
   d6436:	6840      	ldr	r0, [r0, #4]
   d6438:	4611      	mov	r1, r2
   d643a:	f7ff bf4b 	b.w	d62d4 <network_listening>

000d643e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d643e:	2200      	movs	r2, #0
   d6440:	6840      	ldr	r0, [r0, #4]
   d6442:	4611      	mov	r1, r2
   d6444:	f7ff bf6e 	b.w	d6324 <network_get_listen_timeout>

000d6448 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6448:	6840      	ldr	r0, [r0, #4]
   d644a:	2200      	movs	r2, #0
   d644c:	f7ff bf62 	b.w	d6314 <network_set_listen_timeout>

000d6450 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6450:	6840      	ldr	r0, [r0, #4]
   d6452:	2200      	movs	r2, #0
   d6454:	f081 0101 	eor.w	r1, r1, #1
   d6458:	f7ff bf34 	b.w	d62c4 <network_listen>

000d645c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d645c:	2300      	movs	r3, #0
   d645e:	6840      	ldr	r0, [r0, #4]
   d6460:	461a      	mov	r2, r3
   d6462:	4619      	mov	r1, r3
   d6464:	f7ff bf26 	b.w	d62b4 <network_off>

000d6468 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6468:	2300      	movs	r3, #0
   d646a:	6840      	ldr	r0, [r0, #4]
   d646c:	461a      	mov	r2, r3
   d646e:	4619      	mov	r1, r3
   d6470:	f7ff bf18 	b.w	d62a4 <network_on>

000d6474 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6474:	2200      	movs	r2, #0
   d6476:	6840      	ldr	r0, [r0, #4]
   d6478:	4611      	mov	r1, r2
   d647a:	f7ff bf0b 	b.w	d6294 <network_ready>

000d647e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d647e:	2200      	movs	r2, #0
   d6480:	6840      	ldr	r0, [r0, #4]
   d6482:	4611      	mov	r1, r2
   d6484:	f7ff bef6 	b.w	d6274 <network_connecting>

000d6488 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6488:	6840      	ldr	r0, [r0, #4]
   d648a:	2200      	movs	r2, #0
   d648c:	2102      	movs	r1, #2
   d648e:	f7ff bef9 	b.w	d6284 <network_disconnect>

000d6492 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6492:	2300      	movs	r3, #0
   d6494:	6840      	ldr	r0, [r0, #4]
   d6496:	461a      	mov	r2, r3
   d6498:	f7ff bee4 	b.w	d6264 <network_connect>

000d649c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d649c:	4b02      	ldr	r3, [pc, #8]	; (d64a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d649e:	2203      	movs	r2, #3
   d64a0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d64a2:	4a02      	ldr	r2, [pc, #8]	; (d64ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d64a4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d64a6:	4770      	bx	lr
   d64a8:	2003e63c 	.word	0x2003e63c
   d64ac:	000dab4c 	.word	0x000dab4c

000d64b0 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d64b0:	2100      	movs	r1, #0
   d64b2:	f7ff be31 	b.w	d6118 <hal_spi_acquire>

000d64b6 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d64b6:	2100      	movs	r1, #0
   d64b8:	f7ff be36 	b.w	d6128 <hal_spi_release>

000d64bc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d64bc:	b510      	push	{r4, lr}
   d64be:	4604      	mov	r4, r0
   d64c0:	4608      	mov	r0, r1
{
    _spi = spi;
   d64c2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d64c4:	f7ff fe10 	bl	d60e8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d64c8:	2300      	movs	r3, #0
   d64ca:	6063      	str	r3, [r4, #4]
}
   d64cc:	4620      	mov	r0, r4
   d64ce:	bd10      	pop	{r4, pc}

000d64d0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d64d0:	b510      	push	{r4, lr}
   d64d2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d64d4:	7800      	ldrb	r0, [r0, #0]
   d64d6:	f7ff ffeb 	bl	d64b0 <_ZN8SPIClass4lockEv.isra.0>
   d64da:	b948      	cbnz	r0, d64f0 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d64dc:	7820      	ldrb	r0, [r4, #0]
   d64de:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d64e2:	f7ff fdd9 	bl	d6098 <hal_spi_begin>
        unlock();
   d64e6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d64e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d64ec:	f7ff bfe3 	b.w	d64b6 <_ZN8SPIClass6unlockEv.isra.0>
}
   d64f0:	bd10      	pop	{r4, pc}

000d64f2 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d64f2:	b513      	push	{r0, r1, r4, lr}
   d64f4:	4604      	mov	r4, r0
    if (!lock())
   d64f6:	7800      	ldrb	r0, [r0, #0]
{
   d64f8:	9101      	str	r1, [sp, #4]
    if (!lock())
   d64fa:	f7ff ffd9 	bl	d64b0 <_ZN8SPIClass4lockEv.isra.0>
   d64fe:	9901      	ldr	r1, [sp, #4]
   d6500:	b940      	cbnz	r0, d6514 <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d6502:	7820      	ldrb	r0, [r4, #0]
   d6504:	f7ff fdd0 	bl	d60a8 <hal_spi_set_bit_order>
        unlock();
   d6508:	7820      	ldrb	r0, [r4, #0]
    }
}
   d650a:	b002      	add	sp, #8
   d650c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6510:	f7ff bfd1 	b.w	d64b6 <_ZN8SPIClass6unlockEv.isra.0>
}
   d6514:	b002      	add	sp, #8
   d6516:	bd10      	pop	{r4, pc}

000d6518 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d6518:	b513      	push	{r0, r1, r4, lr}
   d651a:	4604      	mov	r4, r0
    if (!lock())
   d651c:	7800      	ldrb	r0, [r0, #0]
{
   d651e:	9101      	str	r1, [sp, #4]
    if (!lock())
   d6520:	f7ff ffc6 	bl	d64b0 <_ZN8SPIClass4lockEv.isra.0>
   d6524:	9901      	ldr	r1, [sp, #4]
   d6526:	b940      	cbnz	r0, d653a <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d6528:	7820      	ldrb	r0, [r4, #0]
   d652a:	f7ff fdc5 	bl	d60b8 <hal_spi_set_data_mode>
        unlock();
   d652e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6530:	b002      	add	sp, #8
   d6532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6536:	f7ff bfbe 	b.w	d64b6 <_ZN8SPIClass6unlockEv.isra.0>
}
   d653a:	b002      	add	sp, #8
   d653c:	bd10      	pop	{r4, pc}
	...

000d6540 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6540:	0840      	lsrs	r0, r0, #1
{
   d6542:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d6544:	6018      	str	r0, [r3, #0]
   d6546:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6548:	6818      	ldr	r0, [r3, #0]
   d654a:	4288      	cmp	r0, r1
   d654c:	b2e5      	uxtb	r5, r4
   d654e:	d906      	bls.n	d655e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6550:	3401      	adds	r4, #1
   d6552:	2c08      	cmp	r4, #8
   d6554:	d002      	beq.n	d655c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6556:	0840      	lsrs	r0, r0, #1
   d6558:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d655a:	e7f5      	b.n	d6548 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d655c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d655e:	4b02      	ldr	r3, [pc, #8]	; (d6568 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6560:	5d5b      	ldrb	r3, [r3, r5]
   d6562:	7013      	strb	r3, [r2, #0]
}
   d6564:	bd30      	pop	{r4, r5, pc}
   d6566:	bf00      	nop
   d6568:	000dab80 	.word	0x000dab80

000d656c <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d656c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6570:	b088      	sub	sp, #32
    unsigned clock = 0;
   d6572:	2300      	movs	r3, #0
{
   d6574:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d6576:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d6578:	9302      	str	r3, [sp, #8]
{
   d657a:	460e      	mov	r6, r1
   d657c:	4617      	mov	r7, r2
    if (!lock())
   d657e:	f7ff ff97 	bl	d64b0 <_ZN8SPIClass4lockEv.isra.0>
   d6582:	4605      	mov	r5, r0
   d6584:	bb00      	cbnz	r0, d65c8 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d6586:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d658a:	4601      	mov	r1, r0
   d658c:	2214      	movs	r2, #20
   d658e:	a803      	add	r0, sp, #12
   d6590:	f003 feb8 	bl	da304 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6594:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d6596:	462a      	mov	r2, r5
   d6598:	a903      	add	r1, sp, #12
   d659a:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d659c:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d65a0:	f7ff fdb2 	bl	d6108 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d65a4:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d65a6:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d65aa:	ab02      	add	r3, sp, #8
   d65ac:	f10d 0207 	add.w	r2, sp, #7
   d65b0:	fb07 f106 	mul.w	r1, r7, r6
   d65b4:	f7ff ffc4 	bl	d6540 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d65b8:	7820      	ldrb	r0, [r4, #0]
   d65ba:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d65be:	f7ff fd83 	bl	d60c8 <hal_spi_set_clock_divider>
        unlock();
   d65c2:	7820      	ldrb	r0, [r4, #0]
   d65c4:	f7ff ff77 	bl	d64b6 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d65c8:	9802      	ldr	r0, [sp, #8]
   d65ca:	b008      	add	sp, #32
   d65cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d65d0 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d65d0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d65d2:	7800      	ldrb	r0, [r0, #0]
   d65d4:	f7ff fd80 	bl	d60d8 <hal_spi_transfer>
}
   d65d8:	b2c0      	uxtb	r0, r0
   d65da:	bd08      	pop	{r3, pc}

000d65dc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d65dc:	b510      	push	{r4, lr}
   d65de:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d65e0:	6800      	ldr	r0, [r0, #0]
   d65e2:	b118      	cbz	r0, d65ec <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d65e4:	f7ff fefe 	bl	d63e4 <free>
            wakeupSource_ = nullptr;
   d65e8:	2300      	movs	r3, #0
   d65ea:	6023      	str	r3, [r4, #0]
        }
    }
   d65ec:	bd10      	pop	{r4, pc}

000d65ee <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d65ee:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d65f0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d65f4:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d65f6:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d65f8:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d65fa:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d65fe:	f8c0 2006 	str.w	r2, [r0, #6]
   d6602:	889b      	ldrh	r3, [r3, #4]
   d6604:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d6606:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d6608:	f7ff ffe8 	bl	d65dc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d660c:	682b      	ldr	r3, [r5, #0]
   d660e:	b113      	cbz	r3, d6616 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d6610:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d6612:	2300      	movs	r3, #0
   d6614:	602b      	str	r3, [r5, #0]
    }
   d6616:	4620      	mov	r0, r4
   d6618:	bd38      	pop	{r3, r4, r5, pc}
	...

000d661c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d661c:	b538      	push	{r3, r4, r5, lr}
   d661e:	460c      	mov	r4, r1
   d6620:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d6622:	f7ff ffdb 	bl	d65dc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d6626:	b144      	cbz	r4, d663a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d6628:	8820      	ldrh	r0, [r4, #0]
   d662a:	f7ff fed3 	bl	d63d4 <malloc>
   d662e:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d6630:	b128      	cbz	r0, d663e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d6632:	8822      	ldrh	r2, [r4, #0]
   d6634:	4621      	mov	r1, r4
   d6636:	f003 fe3d 	bl	da2b4 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d663a:	2000      	movs	r0, #0
    }
   d663c:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d663e:	4801      	ldr	r0, [pc, #4]	; (d6644 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d6640:	e7fc      	b.n	d663c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d6642:	bf00      	nop
   d6644:	fffffefc 	.word	0xfffffefc

000d6648 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d6648:	b5f0      	push	{r4, r5, r6, r7, lr}
   d664a:	4d2d      	ldr	r5, [pc, #180]	; (d6700 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d664c:	7d0b      	ldrb	r3, [r1, #20]
   d664e:	4604      	mov	r4, r0
   d6650:	b08b      	sub	sp, #44	; 0x2c
   d6652:	4608      	mov	r0, r1
   d6654:	1daf      	adds	r7, r5, #6
   d6656:	2b00      	cmp	r3, #0
   d6658:	d038      	beq.n	d66cc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d665a:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d665c:	791b      	ldrb	r3, [r3, #4]
   d665e:	2b00      	cmp	r3, #0
   d6660:	d034      	beq.n	d66cc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d6662:	2200      	movs	r2, #0
    SleepResult() {}
   d6664:	4b27      	ldr	r3, [pc, #156]	; (d6704 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d6666:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d6668:	a902      	add	r1, sp, #8
   d666a:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d666c:	9202      	str	r2, [sp, #8]
   d666e:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d6672:	f88d 200e 	strb.w	r2, [sp, #14]
   d6676:	f7ff fdeb 	bl	d6250 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d667a:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d667e:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d6682:	b200      	sxth	r0, r0
   d6684:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d6688:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d668c:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d668e:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d6690:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d6692:	4628      	mov	r0, r5
   d6694:	f7ff ffc2 	bl	d661c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d6698:	a802      	add	r0, sp, #8
   d669a:	f7ff ff9f 	bl	d65dc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d669e:	2300      	movs	r3, #0
   d66a0:	6023      	str	r3, [r4, #0]
   d66a2:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d66a4:	71a3      	strb	r3, [r4, #6]
   d66a6:	8123      	strh	r3, [r4, #8]
   d66a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d66ac:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d66ae:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d66b2:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d66b4:	683b      	ldr	r3, [r7, #0]
   d66b6:	f8c4 3006 	str.w	r3, [r4, #6]
   d66ba:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d66bc:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d66be:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d66c0:	4620      	mov	r0, r4
   d66c2:	f7ff ffab 	bl	d661c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d66c6:	4620      	mov	r0, r4
   d66c8:	b00b      	add	sp, #44	; 0x2c
   d66ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d66cc:	2600      	movs	r6, #0
   d66ce:	2320      	movs	r3, #32
   d66d0:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d66d4:	4b0c      	ldr	r3, [pc, #48]	; (d6708 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d66d6:	9300      	str	r3, [sp, #0]
   d66d8:	490c      	ldr	r1, [pc, #48]	; (d670c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d66da:	4633      	mov	r3, r6
   d66dc:	aa02      	add	r2, sp, #8
   d66de:	2032      	movs	r0, #50	; 0x32
   d66e0:	f7ff fd72 	bl	d61c8 <log_message>
    SleepResult() {}
   d66e4:	4b07      	ldr	r3, [pc, #28]	; (d6704 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d66e6:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d66e8:	a902      	add	r1, sp, #8
        error_ = error;
   d66ea:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d66ee:	4804      	ldr	r0, [pc, #16]	; (d6700 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d66f0:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d66f2:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d66f6:	f8ad 300c 	strh.w	r3, [sp, #12]
   d66fa:	f7ff ff78 	bl	d65ee <_ZN17SystemSleepResultaSEOS_>
   d66fe:	e7cb      	b.n	d6698 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d6700:	2003e644 	.word	0x2003e644
   d6704:	ffff0000 	.word	0xffff0000
   d6708:	000dab8f 	.word	0x000dab8f
   d670c:	000dab88 	.word	0x000dab88

000d6710 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6710:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6712:	4b09      	ldr	r3, [pc, #36]	; (d6738 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d6714:	4c09      	ldr	r4, [pc, #36]	; (d673c <_GLOBAL__sub_I_System+0x2c>)
   d6716:	2202      	movs	r2, #2
   d6718:	2000      	movs	r0, #0
   d671a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d671c:	4b08      	ldr	r3, [pc, #32]	; (d6740 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d671e:	6020      	str	r0, [r4, #0]
   d6720:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d6722:	71a0      	strb	r0, [r4, #6]
   d6724:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6726:	f7ff fd5f 	bl	d61e8 <set_system_mode>
SystemClass System;
   d672a:	4620      	mov	r0, r4
   d672c:	4a05      	ldr	r2, [pc, #20]	; (d6744 <_GLOBAL__sub_I_System+0x34>)
   d672e:	4906      	ldr	r1, [pc, #24]	; (d6748 <_GLOBAL__sub_I_System+0x38>)
   d6730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d6734:	f002 be1c 	b.w	d9370 <__aeabi_atexit>
   d6738:	2003e650 	.word	0x2003e650
   d673c:	2003e644 	.word	0x2003e644
   d6740:	ffff0000 	.word	0xffff0000
   d6744:	2003df48 	.word	0x2003df48
   d6748:	000d41b1 	.word	0x000d41b1

000d674c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d674c:	b510      	push	{r4, lr}
   d674e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d6750:	f003 fe16 	bl	da380 <strlen>
   d6754:	3801      	subs	r0, #1
   d6756:	1823      	adds	r3, r4, r0
   d6758:	4620      	mov	r0, r4
	while(i<j){
   d675a:	4283      	cmp	r3, r0
   d675c:	d906      	bls.n	d676c <_Z11str_reversePc+0x20>
		c = *i;
   d675e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d6760:	7819      	ldrb	r1, [r3, #0]
   d6762:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d6766:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d676a:	e7f6      	b.n	d675a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d676c:	bd10      	pop	{r4, pc}

000d676e <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d676e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d6772:	1e93      	subs	r3, r2, #2
{
   d6774:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   d6776:	2b22      	cmp	r3, #34	; 0x22
   d6778:	f04f 0300 	mov.w	r3, #0
{
   d677c:	460d      	mov	r5, r1
   d677e:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d6780:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   d6784:	d927      	bls.n	d67d6 <ltoa+0x68>

      if (10 == base && N < 0L)
   d6786:	2800      	cmp	r0, #0
   d6788:	da2a      	bge.n	d67e0 <ltoa+0x72>
      {
            *head++ = '-';
   d678a:	462e      	mov	r6, r5
   d678c:	232d      	movs	r3, #45	; 0x2d
   d678e:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   d6792:	4240      	negs	r0, r0
   d6794:	240a      	movs	r4, #10
      *tail-- = '\0';
   d6796:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d679a:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d679e:	4622      	mov	r2, r4
   d67a0:	4601      	mov	r1, r0
   d67a2:	a801      	add	r0, sp, #4
   d67a4:	f003 fd64 	bl	da270 <ldiv>
   d67a8:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d67aa:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   d67ac:	2b09      	cmp	r3, #9
   d67ae:	bfcc      	ite	gt
   d67b0:	2237      	movgt	r2, #55	; 0x37
   d67b2:	2230      	movle	r2, #48	; 0x30
   d67b4:	fa52 f383 	uxtab	r3, r2, r3
   d67b8:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   d67bc:	f108 0801 	add.w	r8, r8, #1
   d67c0:	2800      	cmp	r0, #0
   d67c2:	d1ec      	bne.n	d679e <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d67c4:	4642      	mov	r2, r8
   d67c6:	1c79      	adds	r1, r7, #1
   d67c8:	4630      	mov	r0, r6
   d67ca:	f003 fd73 	bl	da2b4 <memcpy>
      return str;
}
   d67ce:	4628      	mov	r0, r5
   d67d0:	b00c      	add	sp, #48	; 0x30
   d67d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   d67d6:	2a0a      	cmp	r2, #10
   d67d8:	d0d5      	beq.n	d6786 <ltoa+0x18>
      if (uarg)
   d67da:	b118      	cbz	r0, d67e4 <ltoa+0x76>
   d67dc:	462e      	mov	r6, r5
   d67de:	e7da      	b.n	d6796 <ltoa+0x28>
   d67e0:	240a      	movs	r4, #10
   d67e2:	e7fa      	b.n	d67da <ltoa+0x6c>
      else  *tail-- = '0';
   d67e4:	2330      	movs	r3, #48	; 0x30
   d67e6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d67ea:	462e      	mov	r6, r5
   d67ec:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   d67f0:	f04f 0802 	mov.w	r8, #2
   d67f4:	e7e6      	b.n	d67c4 <ltoa+0x56>

000d67f6 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d67f6:	b570      	push	{r4, r5, r6, lr}
   d67f8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d67fa:	1e91      	subs	r1, r2, #2
   d67fc:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d67fe:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d6800:	d822      	bhi.n	d6848 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d6802:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d6804:	b16d      	cbz	r5, d6822 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6806:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d680a:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d680e:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d6810:	2d09      	cmp	r5, #9
                *ptr += '0';
   d6812:	bf94      	ite	ls
   d6814:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6816:	3157      	addhi	r1, #87	; 0x57
   d6818:	b2c9      	uxtb	r1, r1
   d681a:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d681e:	4635      	mov	r5, r6
	while(a){
   d6820:	e7f0      	b.n	d6804 <ultoa+0xe>
   d6822:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d6824:	4423      	add	r3, r4
            *ptr++ = '0';
   d6826:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d6828:	4293      	cmp	r3, r2
   d682a:	d902      	bls.n	d6832 <ultoa+0x3c>
            *ptr++ = '0';
   d682c:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d6830:	e7fa      	b.n	d6828 <ultoa+0x32>
   d6832:	1a1a      	subs	r2, r3, r0
   d6834:	4283      	cmp	r3, r0
   d6836:	bf38      	it	cc
   d6838:	2200      	movcc	r2, #0

	*ptr = '\0';
   d683a:	2300      	movs	r3, #0
   d683c:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d683e:	4620      	mov	r0, r4
   d6840:	f7ff ff84 	bl	d674c <_Z11str_reversePc>
	return buffer;
   d6844:	4620      	mov	r0, r4
}
   d6846:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d6848:	2000      	movs	r0, #0
   d684a:	e7fc      	b.n	d6846 <ultoa+0x50>

000d684c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d684c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d684e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6850:	460c      	mov	r4, r1
   d6852:	4615      	mov	r5, r2
	if(a<0){
   d6854:	da0e      	bge.n	d6874 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6856:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d685a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d685e:	bf14      	ite	ne
   d6860:	4258      	negne	r0, r3
   d6862:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d6864:	2301      	movs	r3, #1
		*buffer = '-';
   d6866:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d6868:	462a      	mov	r2, r5
   d686a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d686c:	f7ff ffc3 	bl	d67f6 <ultoa>
	}
	return buffer;
}
   d6870:	4620      	mov	r0, r4
   d6872:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d6874:	2301      	movs	r3, #1
   d6876:	e7f9      	b.n	d686c <itoa+0x20>

000d6878 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d6878:	b570      	push	{r4, r5, r6, lr}
   d687a:	b086      	sub	sp, #24
   d687c:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d687e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d6880:	4668      	mov	r0, sp
   d6882:	f001 ff0d 	bl	d86a0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6888:	1d34      	adds	r4, r6, #4
   d688a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d688c:	682b      	ldr	r3, [r5, #0]
   d688e:	7023      	strb	r3, [r4, #0]
    }
   d6890:	4630      	mov	r0, r6
   d6892:	b006      	add	sp, #24
   d6894:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6898 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d6898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d689c:	ec57 6b10 	vmov	r6, r7, d0
   d68a0:	4680      	mov	r8, r0
   d68a2:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d68a4:	ee10 0a10 	vmov	r0, s0
   d68a8:	2200      	movs	r2, #0
   d68aa:	2300      	movs	r3, #0
   d68ac:	4639      	mov	r1, r7
   d68ae:	f003 faad 	bl	d9e0c <__aeabi_dcmplt>
   d68b2:	b128      	cbz	r0, d68c0 <_Z4dtoadhPc+0x28>
        val = -val;
   d68b4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d68b8:	461f      	mov	r7, r3
        *sout++ = '-';
   d68ba:	232d      	movs	r3, #45	; 0x2d
   d68bc:	f804 3b01 	strb.w	r3, [r4], #1
   d68c0:	2300      	movs	r3, #0
    }
    long scale = 1;
   d68c2:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d68c6:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d68c8:	b2d9      	uxtb	r1, r3
   d68ca:	4588      	cmp	r8, r1
   d68cc:	d903      	bls.n	d68d6 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d68ce:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d68d2:	3301      	adds	r3, #1
   d68d4:	e7f8      	b.n	d68c8 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d68d6:	4648      	mov	r0, r9
   d68d8:	f002 ffbc 	bl	d9854 <__aeabi_i2d>
   d68dc:	4632      	mov	r2, r6
   d68de:	463b      	mov	r3, r7
   d68e0:	f003 f822 	bl	d9928 <__aeabi_dmul>
   d68e4:	4606      	mov	r6, r0
   d68e6:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d68e8:	f003 fb2e 	bl	d9f48 <__aeabi_d2ulz>
   d68ec:	4605      	mov	r5, r0
   d68ee:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d68f0:	f002 ffe4 	bl	d98bc <__aeabi_ul2d>
   d68f4:	4602      	mov	r2, r0
   d68f6:	460b      	mov	r3, r1
   d68f8:	4630      	mov	r0, r6
   d68fa:	4639      	mov	r1, r7
   d68fc:	f002 fe5c 	bl	d95b8 <__aeabi_dsub>
   d6900:	4b13      	ldr	r3, [pc, #76]	; (d6950 <_Z4dtoadhPc+0xb8>)
   d6902:	2200      	movs	r2, #0
   d6904:	f003 fa96 	bl	d9e34 <__aeabi_dcmpge>
   d6908:	b110      	cbz	r0, d6910 <_Z4dtoadhPc+0x78>
        fixed++;
   d690a:	3501      	adds	r5, #1
   d690c:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d6910:	464a      	mov	r2, r9
   d6912:	4628      	mov	r0, r5
   d6914:	17d3      	asrs	r3, r2, #31
   d6916:	4651      	mov	r1, sl
   d6918:	f003 fafe 	bl	d9f18 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d691c:	2301      	movs	r3, #1
   d691e:	4615      	mov	r5, r2
   d6920:	4621      	mov	r1, r4
   d6922:	220a      	movs	r2, #10
   d6924:	f7ff ff67 	bl	d67f6 <ultoa>
    if (prec) {
   d6928:	f1b8 0f00 	cmp.w	r8, #0
   d692c:	d00d      	beq.n	d694a <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d692e:	4620      	mov	r0, r4
   d6930:	f003 fd26 	bl	da380 <strlen>
        *sout++ = '.';
   d6934:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d6936:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d6938:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d693a:	220a      	movs	r2, #10
   d693c:	4643      	mov	r3, r8
   d693e:	4628      	mov	r0, r5
   d6940:	3101      	adds	r1, #1
    }
}
   d6942:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d6946:	f7ff bf56 	b.w	d67f6 <ultoa>
}
   d694a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d694e:	bf00      	nop
   d6950:	3fe00000 	.word	0x3fe00000

000d6954 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6954:	b510      	push	{r4, lr}
   d6956:	4604      	mov	r4, r0
{
	free(buffer);
   d6958:	6800      	ldr	r0, [r0, #0]
   d695a:	f7ff fd43 	bl	d63e4 <free>
}
   d695e:	4620      	mov	r0, r4
   d6960:	bd10      	pop	{r4, pc}

000d6962 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6962:	b510      	push	{r4, lr}
   d6964:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6966:	6800      	ldr	r0, [r0, #0]
   d6968:	b108      	cbz	r0, d696e <_ZN6String10invalidateEv+0xc>
   d696a:	f7ff fd3b 	bl	d63e4 <free>
	buffer = NULL;
   d696e:	2300      	movs	r3, #0
	capacity = len = 0;
   d6970:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6974:	6023      	str	r3, [r4, #0]
}
   d6976:	bd10      	pop	{r4, pc}

000d6978 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6978:	b538      	push	{r3, r4, r5, lr}
   d697a:	4604      	mov	r4, r0
   d697c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d697e:	6800      	ldr	r0, [r0, #0]
   d6980:	3101      	adds	r1, #1
   d6982:	f7ff fd37 	bl	d63f4 <realloc>
	if (newbuffer) {
   d6986:	b110      	cbz	r0, d698e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6988:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d698c:	2001      	movs	r0, #1
	}
	return 0;
}
   d698e:	bd38      	pop	{r3, r4, r5, pc}

000d6990 <_ZN6String7reserveEj>:
{
   d6990:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6992:	6803      	ldr	r3, [r0, #0]
{
   d6994:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6996:	b123      	cbz	r3, d69a2 <_ZN6String7reserveEj+0x12>
   d6998:	6843      	ldr	r3, [r0, #4]
   d699a:	428b      	cmp	r3, r1
   d699c:	d301      	bcc.n	d69a2 <_ZN6String7reserveEj+0x12>
   d699e:	2001      	movs	r0, #1
}
   d69a0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d69a2:	4620      	mov	r0, r4
   d69a4:	f7ff ffe8 	bl	d6978 <_ZN6String12changeBufferEj>
   d69a8:	2800      	cmp	r0, #0
   d69aa:	d0f9      	beq.n	d69a0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d69ac:	68a3      	ldr	r3, [r4, #8]
   d69ae:	2b00      	cmp	r3, #0
   d69b0:	d1f5      	bne.n	d699e <_ZN6String7reserveEj+0xe>
   d69b2:	6822      	ldr	r2, [r4, #0]
   d69b4:	7013      	strb	r3, [r2, #0]
   d69b6:	e7f2      	b.n	d699e <_ZN6String7reserveEj+0xe>

000d69b8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d69b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d69ba:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d69bc:	4611      	mov	r1, r2
   d69be:	9201      	str	r2, [sp, #4]
{
   d69c0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d69c2:	f7ff ffe5 	bl	d6990 <_ZN6String7reserveEj>
   d69c6:	9a01      	ldr	r2, [sp, #4]
   d69c8:	b928      	cbnz	r0, d69d6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d69ca:	4620      	mov	r0, r4
   d69cc:	f7ff ffc9 	bl	d6962 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d69d0:	4620      	mov	r0, r4
   d69d2:	b003      	add	sp, #12
   d69d4:	bd30      	pop	{r4, r5, pc}
	len = length;
   d69d6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d69d8:	4629      	mov	r1, r5
   d69da:	6820      	ldr	r0, [r4, #0]
   d69dc:	f003 fc6a 	bl	da2b4 <memcpy>
	buffer[len] = 0;
   d69e0:	6822      	ldr	r2, [r4, #0]
   d69e2:	68a3      	ldr	r3, [r4, #8]
   d69e4:	2100      	movs	r1, #0
   d69e6:	54d1      	strb	r1, [r2, r3]
	return *this;
   d69e8:	e7f2      	b.n	d69d0 <_ZN6String4copyEPKcj+0x18>

000d69ea <_ZN6StringC1EPKc>:
	buffer = NULL;
   d69ea:	2300      	movs	r3, #0
String::String(const char *cstr)
   d69ec:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d69ee:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d69f2:	4604      	mov	r4, r0
	len = 0;
   d69f4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d69f6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d69f8:	b141      	cbz	r1, d6a0c <_ZN6StringC1EPKc+0x22>
   d69fa:	4608      	mov	r0, r1
   d69fc:	9101      	str	r1, [sp, #4]
   d69fe:	f003 fcbf 	bl	da380 <strlen>
   d6a02:	9901      	ldr	r1, [sp, #4]
   d6a04:	4602      	mov	r2, r0
   d6a06:	4620      	mov	r0, r4
   d6a08:	f7ff ffd6 	bl	d69b8 <_ZN6String4copyEPKcj>
}
   d6a0c:	4620      	mov	r0, r4
   d6a0e:	b002      	add	sp, #8
   d6a10:	bd10      	pop	{r4, pc}

000d6a12 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d6a12:	b538      	push	{r3, r4, r5, lr}
   d6a14:	4605      	mov	r5, r0
	if (buffer) {
   d6a16:	6800      	ldr	r0, [r0, #0]
{
   d6a18:	460c      	mov	r4, r1
	if (buffer) {
   d6a1a:	b168      	cbz	r0, d6a38 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d6a1c:	686a      	ldr	r2, [r5, #4]
   d6a1e:	688b      	ldr	r3, [r1, #8]
   d6a20:	429a      	cmp	r2, r3
   d6a22:	d307      	bcc.n	d6a34 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d6a24:	6809      	ldr	r1, [r1, #0]
   d6a26:	f003 fca3 	bl	da370 <strcpy>
			len = rhs.len;
   d6a2a:	68a3      	ldr	r3, [r4, #8]
   d6a2c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d6a2e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d6a30:	60a3      	str	r3, [r4, #8]
}
   d6a32:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d6a34:	f7ff fcd6 	bl	d63e4 <free>
	buffer = rhs.buffer;
   d6a38:	6823      	ldr	r3, [r4, #0]
   d6a3a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d6a3c:	6863      	ldr	r3, [r4, #4]
   d6a3e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d6a40:	68a3      	ldr	r3, [r4, #8]
   d6a42:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d6a44:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d6a46:	e9c4 3300 	strd	r3, r3, [r4]
   d6a4a:	e7f1      	b.n	d6a30 <_ZN6String4moveERS_+0x1e>

000d6a4c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6a4c:	4288      	cmp	r0, r1
{
   d6a4e:	b510      	push	{r4, lr}
   d6a50:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6a52:	d005      	beq.n	d6a60 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6a54:	680b      	ldr	r3, [r1, #0]
   d6a56:	b12b      	cbz	r3, d6a64 <_ZN6StringaSERKS_+0x18>
   d6a58:	688a      	ldr	r2, [r1, #8]
   d6a5a:	4619      	mov	r1, r3
   d6a5c:	f7ff ffac 	bl	d69b8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6a60:	4620      	mov	r0, r4
   d6a62:	bd10      	pop	{r4, pc}
	else invalidate();
   d6a64:	f7ff ff7d 	bl	d6962 <_ZN6String10invalidateEv>
   d6a68:	e7fa      	b.n	d6a60 <_ZN6StringaSERKS_+0x14>

000d6a6a <_ZN6StringaSEO15StringSumHelper>:
	return *this;
}

String & String::operator = (StringSumHelper &&rval)
{
	if (this != &rval) move(rval);
   d6a6a:	4288      	cmp	r0, r1
{
   d6a6c:	b510      	push	{r4, lr}
   d6a6e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d6a70:	d001      	beq.n	d6a76 <_ZN6StringaSEO15StringSumHelper+0xc>
   d6a72:	f7ff ffce 	bl	d6a12 <_ZN6String4moveERS_>
	return *this;
}
   d6a76:	4620      	mov	r0, r4
   d6a78:	bd10      	pop	{r4, pc}

000d6a7a <_ZN6StringaSEPKc>:
#endif

String & String::operator = (const char *cstr)
{
   d6a7a:	b513      	push	{r0, r1, r4, lr}
   d6a7c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6a7e:	b159      	cbz	r1, d6a98 <_ZN6StringaSEPKc+0x1e>
   d6a80:	4608      	mov	r0, r1
   d6a82:	9101      	str	r1, [sp, #4]
   d6a84:	f003 fc7c 	bl	da380 <strlen>
   d6a88:	9901      	ldr	r1, [sp, #4]
   d6a8a:	4602      	mov	r2, r0
   d6a8c:	4620      	mov	r0, r4
   d6a8e:	f7ff ff93 	bl	d69b8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6a92:	4620      	mov	r0, r4
   d6a94:	b002      	add	sp, #8
   d6a96:	bd10      	pop	{r4, pc}
	else invalidate();
   d6a98:	f7ff ff63 	bl	d6962 <_ZN6String10invalidateEv>
   d6a9c:	e7f9      	b.n	d6a92 <_ZN6StringaSEPKc+0x18>

000d6a9e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d6a9e:	b510      	push	{r4, lr}
   d6aa0:	4604      	mov	r4, r0
   d6aa2:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d6aa4:	2300      	movs	r3, #0
	capacity = 0;
   d6aa6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d6aaa:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6aac:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d6aae:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d6ab0:	a901      	add	r1, sp, #4
   d6ab2:	f7ff fecb 	bl	d684c <itoa>
	*this = buf;
   d6ab6:	a901      	add	r1, sp, #4
   d6ab8:	4620      	mov	r0, r4
   d6aba:	f7ff ffde 	bl	d6a7a <_ZN6StringaSEPKc>
}
   d6abe:	4620      	mov	r0, r4
   d6ac0:	b00a      	add	sp, #40	; 0x28
   d6ac2:	bd10      	pop	{r4, pc}

000d6ac4 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   d6ac4:	b510      	push	{r4, lr}
   d6ac6:	4604      	mov	r4, r0
   d6ac8:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d6aca:	2300      	movs	r3, #0
	capacity = 0;
   d6acc:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d6ad0:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6ad2:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   d6ad4:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   d6ad6:	a901      	add	r1, sp, #4
   d6ad8:	f7ff fe49 	bl	d676e <ltoa>
	*this = buf;
   d6adc:	a901      	add	r1, sp, #4
   d6ade:	4620      	mov	r0, r4
   d6ae0:	f7ff ffcb 	bl	d6a7a <_ZN6StringaSEPKc>
}
   d6ae4:	4620      	mov	r0, r4
   d6ae6:	b00a      	add	sp, #40	; 0x28
   d6ae8:	bd10      	pop	{r4, pc}

000d6aea <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d6aea:	b530      	push	{r4, r5, lr}
   d6aec:	4604      	mov	r4, r0
	buffer = NULL;
   d6aee:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d6af0:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d6af2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d6af6:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6af8:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d6afa:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d6afe:	b2cd      	uxtb	r5, r1
   d6b00:	f002 feba 	bl	d9878 <__aeabi_f2d>
   d6b04:	ec41 0b10 	vmov	d0, r0, r1
   d6b08:	a901      	add	r1, sp, #4
   d6b0a:	4628      	mov	r0, r5
   d6b0c:	f7ff fec4 	bl	d6898 <_Z4dtoadhPc>
        *this = buf;
   d6b10:	a901      	add	r1, sp, #4
   d6b12:	4620      	mov	r0, r4
   d6b14:	f7ff ffb1 	bl	d6a7a <_ZN6StringaSEPKc>
}
   d6b18:	4620      	mov	r0, r4
   d6b1a:	b00b      	add	sp, #44	; 0x2c
   d6b1c:	bd30      	pop	{r4, r5, pc}

000d6b1e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6b1e:	b570      	push	{r4, r5, r6, lr}
   d6b20:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6b22:	460e      	mov	r6, r1
   d6b24:	b909      	cbnz	r1, d6b2a <_ZN6String6concatEPKcj+0xc>
   d6b26:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6b28:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6b2a:	b16a      	cbz	r2, d6b48 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d6b2c:	6884      	ldr	r4, [r0, #8]
   d6b2e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d6b30:	4621      	mov	r1, r4
   d6b32:	f7ff ff2d 	bl	d6990 <_ZN6String7reserveEj>
   d6b36:	2800      	cmp	r0, #0
   d6b38:	d0f5      	beq.n	d6b26 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6b3a:	6828      	ldr	r0, [r5, #0]
   d6b3c:	68ab      	ldr	r3, [r5, #8]
   d6b3e:	4631      	mov	r1, r6
   d6b40:	4418      	add	r0, r3
   d6b42:	f003 fc15 	bl	da370 <strcpy>
	len = newlen;
   d6b46:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d6b48:	2001      	movs	r0, #1
   d6b4a:	e7ed      	b.n	d6b28 <_ZN6String6concatEPKcj+0xa>

000d6b4c <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d6b4c:	688a      	ldr	r2, [r1, #8]
   d6b4e:	6809      	ldr	r1, [r1, #0]
   d6b50:	f7ff bfe5 	b.w	d6b1e <_ZN6String6concatEPKcj>

000d6b54 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d6b54:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d6b56:	2300      	movs	r3, #0
	buf[0] = c;
   d6b58:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d6b5c:	2201      	movs	r2, #1
   d6b5e:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d6b60:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d6b64:	f7ff ffdb 	bl	d6b1e <_ZN6String6concatEPKcj>
}
   d6b68:	b003      	add	sp, #12
   d6b6a:	f85d fb04 	ldr.w	pc, [sp], #4

000d6b6e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6b6e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6b70:	688a      	ldr	r2, [r1, #8]
   d6b72:	6809      	ldr	r1, [r1, #0]
{
   d6b74:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6b76:	f7ff ffd2 	bl	d6b1e <_ZN6String6concatEPKcj>
   d6b7a:	b910      	cbnz	r0, d6b82 <_ZplRK15StringSumHelperRK6String+0x14>
   d6b7c:	4620      	mov	r0, r4
   d6b7e:	f7ff fef0 	bl	d6962 <_ZN6String10invalidateEv>
	return a;
}
   d6b82:	4620      	mov	r0, r4
   d6b84:	bd10      	pop	{r4, pc}

000d6b86 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d6b86:	b513      	push	{r0, r1, r4, lr}
   d6b88:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d6b8a:	b929      	cbnz	r1, d6b98 <_ZplRK15StringSumHelperPKc+0x12>
   d6b8c:	4620      	mov	r0, r4
   d6b8e:	f7ff fee8 	bl	d6962 <_ZN6String10invalidateEv>
	return a;
}
   d6b92:	4620      	mov	r0, r4
   d6b94:	b002      	add	sp, #8
   d6b96:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d6b98:	4608      	mov	r0, r1
   d6b9a:	9101      	str	r1, [sp, #4]
   d6b9c:	f003 fbf0 	bl	da380 <strlen>
   d6ba0:	9901      	ldr	r1, [sp, #4]
   d6ba2:	4602      	mov	r2, r0
   d6ba4:	4620      	mov	r0, r4
   d6ba6:	f7ff ffba 	bl	d6b1e <_ZN6String6concatEPKcj>
   d6baa:	2800      	cmp	r0, #0
   d6bac:	d0ee      	beq.n	d6b8c <_ZplRK15StringSumHelperPKc+0x6>
   d6bae:	e7f0      	b.n	d6b92 <_ZplRK15StringSumHelperPKc+0xc>

000d6bb0 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6bb0:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6bb2:	6882      	ldr	r2, [r0, #8]
   d6bb4:	b93a      	cbnz	r2, d6bc6 <_ZNK6String6equalsEPKc+0x16>
   d6bb6:	b121      	cbz	r1, d6bc2 <_ZNK6String6equalsEPKc+0x12>
   d6bb8:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d6bba:	fab0 f080 	clz	r0, r0
   d6bbe:	0940      	lsrs	r0, r0, #5
   d6bc0:	e000      	b.n	d6bc4 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6bc2:	2001      	movs	r0, #1
}
   d6bc4:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6bc6:	6800      	ldr	r0, [r0, #0]
   d6bc8:	b909      	cbnz	r1, d6bce <_ZNK6String6equalsEPKc+0x1e>
   d6bca:	7800      	ldrb	r0, [r0, #0]
   d6bcc:	e7f5      	b.n	d6bba <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d6bce:	f003 fbc5 	bl	da35c <strcmp>
   d6bd2:	e7f2      	b.n	d6bba <_ZNK6String6equalsEPKc+0xa>

000d6bd4 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d6bd4:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d6bd6:	6883      	ldr	r3, [r0, #8]
   d6bd8:	4293      	cmp	r3, r2
   d6bda:	d907      	bls.n	d6bec <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d6bdc:	6804      	ldr	r4, [r0, #0]
   d6bde:	6809      	ldr	r1, [r1, #0]
   d6be0:	18a0      	adds	r0, r4, r2
   d6be2:	f003 fbf5 	bl	da3d0 <strstr>
	if (found == NULL) return -1;
   d6be6:	b108      	cbz	r0, d6bec <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d6be8:	1b00      	subs	r0, r0, r4
}
   d6bea:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   d6bec:	f04f 30ff 	mov.w	r0, #4294967295
   d6bf0:	e7fb      	b.n	d6bea <_ZNK6String7indexOfERKS_j+0x16>

000d6bf2 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   d6bf2:	2200      	movs	r2, #0
   d6bf4:	f7ff bfee 	b.w	d6bd4 <_ZNK6String7indexOfERKS_j>

000d6bf8 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d6bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d6bfa:	429a      	cmp	r2, r3
{
   d6bfc:	460f      	mov	r7, r1
   d6bfe:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d6c00:	490c      	ldr	r1, [pc, #48]	; (d6c34 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   d6c02:	bf88      	it	hi
   d6c04:	4613      	movhi	r3, r2
{
   d6c06:	4614      	mov	r4, r2
   d6c08:	4606      	mov	r6, r0
	if (left > right) {
   d6c0a:	bf84      	itt	hi
   d6c0c:	462c      	movhi	r4, r5
   d6c0e:	461d      	movhi	r5, r3
	String out;
   d6c10:	f7ff feeb 	bl	d69ea <_ZN6StringC1EPKc>
	if (left > len) return out;
   d6c14:	68ba      	ldr	r2, [r7, #8]
   d6c16:	42a2      	cmp	r2, r4
   d6c18:	d30a      	bcc.n	d6c30 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d6c1a:	6839      	ldr	r1, [r7, #0]
   d6c1c:	42aa      	cmp	r2, r5
   d6c1e:	bf94      	ite	ls
   d6c20:	ebc4 0202 	rsbls	r2, r4, r2
   d6c24:	ebc4 0205 	rsbhi	r2, r4, r5
   d6c28:	4421      	add	r1, r4
   d6c2a:	4630      	mov	r0, r6
   d6c2c:	f7ff fec4 	bl	d69b8 <_ZN6String4copyEPKcj>
	return out;
}
   d6c30:	4630      	mov	r0, r6
   d6c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6c34:	000da68d 	.word	0x000da68d

000d6c38 <_ZNK6String9substringEj>:
{
   d6c38:	b510      	push	{r4, lr}
   d6c3a:	4604      	mov	r4, r0
	return substring(left, len);
   d6c3c:	688b      	ldr	r3, [r1, #8]
   d6c3e:	f7ff ffdb 	bl	d6bf8 <_ZNK6String9substringEjj>
}
   d6c42:	4620      	mov	r0, r4
   d6c44:	bd10      	pop	{r4, pc}

000d6c46 <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
   d6c46:	b538      	push	{r3, r4, r5, lr}
   d6c48:	4604      	mov	r4, r0
   d6c4a:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
   d6c4c:	68a3      	ldr	r3, [r4, #8]
   d6c4e:	428b      	cmp	r3, r1
   d6c50:	d911      	bls.n	d6c76 <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
   d6c52:	b182      	cbz	r2, d6c76 <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
   d6c54:	4411      	add	r1, r2
   d6c56:	428b      	cmp	r3, r1
   d6c58:	bf38      	it	cc
   d6c5a:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
   d6c5c:	6825      	ldr	r5, [r4, #0]
	len = len - count;
   d6c5e:	1a99      	subs	r1, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
   d6c60:	1813      	adds	r3, r2, r0
	len = len - count;
   d6c62:	60a1      	str	r1, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
   d6c64:	1a0a      	subs	r2, r1, r0
   d6c66:	18e9      	adds	r1, r5, r3
   d6c68:	4428      	add	r0, r5
   d6c6a:	f003 fb31 	bl	da2d0 <memmove>
	buffer[len] = 0;
   d6c6e:	6822      	ldr	r2, [r4, #0]
   d6c70:	68a3      	ldr	r3, [r4, #8]
   d6c72:	2100      	movs	r1, #0
   d6c74:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6c76:	4620      	mov	r0, r4
   d6c78:	bd38      	pop	{r3, r4, r5, pc}

000d6c7a <_ZN6String6removeEj>:
        int count = len - index;
   d6c7a:	6882      	ldr	r2, [r0, #8]
        return remove(index, count);
   d6c7c:	1a52      	subs	r2, r2, r1
   d6c7e:	f7ff bfe2 	b.w	d6c46 <_ZN6String6removeEjj>

000d6c82 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6c82:	4770      	bx	lr

000d6c84 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d6c84:	4770      	bx	lr

000d6c86 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d6c86:	4770      	bx	lr

000d6c88 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6c88:	4770      	bx	lr
	...

000d6c8c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6c8c:	4b06      	ldr	r3, [pc, #24]	; (d6ca8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d6c8e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6c90:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d6c92:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6c96:	d005      	beq.n	d6ca4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6c98:	4608      	mov	r0, r1
   d6c9a:	f002 fb77 	bl	d938c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6c9e:	2800      	cmp	r0, #0
	return nullptr;
   d6ca0:	bf08      	it	eq
   d6ca2:	2400      	moveq	r4, #0
      }
   d6ca4:	4620      	mov	r0, r4
   d6ca6:	bd10      	pop	{r4, pc}
   d6ca8:	000dad00 	.word	0x000dad00

000d6cac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6cac:	4b06      	ldr	r3, [pc, #24]	; (d6cc8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d6cae:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6cb0:	b510      	push	{r4, lr}
   d6cb2:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6cb6:	d005      	beq.n	d6cc4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6cb8:	4608      	mov	r0, r1
   d6cba:	f002 fb67 	bl	d938c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6cbe:	2800      	cmp	r0, #0
	return nullptr;
   d6cc0:	bf08      	it	eq
   d6cc2:	2400      	moveq	r4, #0
      }
   d6cc4:	4620      	mov	r0, r4
   d6cc6:	bd10      	pop	{r4, pc}
   d6cc8:	000dad00 	.word	0x000dad00

000d6ccc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6ccc:	4b06      	ldr	r3, [pc, #24]	; (d6ce8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d6cce:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6cd0:	b510      	push	{r4, lr}
   d6cd2:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6cd6:	d005      	beq.n	d6ce4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6cd8:	4608      	mov	r0, r1
   d6cda:	f002 fb57 	bl	d938c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6cde:	2800      	cmp	r0, #0
	return nullptr;
   d6ce0:	bf08      	it	eq
   d6ce2:	2400      	moveq	r4, #0
      }
   d6ce4:	4620      	mov	r0, r4
   d6ce6:	bd10      	pop	{r4, pc}
   d6ce8:	000dad00 	.word	0x000dad00

000d6cec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6cec:	b510      	push	{r4, lr}
   d6cee:	2168      	movs	r1, #104	; 0x68
   d6cf0:	4604      	mov	r4, r0
   d6cf2:	f002 fb42 	bl	d937a <_ZdlPvj>
   d6cf6:	4620      	mov	r0, r4
   d6cf8:	bd10      	pop	{r4, pc}

000d6cfa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d6cfa:	b510      	push	{r4, lr}
   d6cfc:	2128      	movs	r1, #40	; 0x28
   d6cfe:	4604      	mov	r4, r0
   d6d00:	f002 fb3b 	bl	d937a <_ZdlPvj>
   d6d04:	4620      	mov	r0, r4
   d6d06:	bd10      	pop	{r4, pc}

000d6d08 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d6d08:	b510      	push	{r4, lr}
   d6d0a:	2130      	movs	r1, #48	; 0x30
   d6d0c:	4604      	mov	r4, r0
   d6d0e:	f002 fb34 	bl	d937a <_ZdlPvj>
   d6d12:	4620      	mov	r0, r4
   d6d14:	bd10      	pop	{r4, pc}

000d6d16 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d6d16:	f7fd b9c0 	b.w	d409a <_ZdlPv>

000d6d1a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d6d1a:	f7fd b9be 	b.w	d409a <_ZdlPv>

000d6d1e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d6d1e:	f7fd b9bc 	b.w	d409a <_ZdlPv>

000d6d22 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6d22:	b510      	push	{r4, lr}
          _M_dispose();
   d6d24:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6d26:	4604      	mov	r4, r0
          _M_dispose();
   d6d28:	689b      	ldr	r3, [r3, #8]
   d6d2a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6d2c:	68a3      	ldr	r3, [r4, #8]
   d6d2e:	3b01      	subs	r3, #1
   d6d30:	60a3      	str	r3, [r4, #8]
   d6d32:	b92b      	cbnz	r3, d6d40 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6d34:	6823      	ldr	r3, [r4, #0]
   d6d36:	4620      	mov	r0, r4
   d6d38:	68db      	ldr	r3, [r3, #12]
    }
   d6d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6d3e:	4718      	bx	r3
    }
   d6d40:	bd10      	pop	{r4, pc}

000d6d42 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6d42:	b510      	push	{r4, lr}
   d6d44:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6d46:	6800      	ldr	r0, [r0, #0]
   d6d48:	b108      	cbz	r0, d6d4e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6d4a:	f7ff f8a5 	bl	d5e98 <os_mutex_recursive_destroy>
    }
   d6d4e:	4620      	mov	r0, r4
   d6d50:	bd10      	pop	{r4, pc}
	...

000d6d54 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d6d54:	b510      	push	{r4, lr}
        mutex_.lock();
   d6d56:	4b04      	ldr	r3, [pc, #16]	; (d6d68 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d6d58:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6d5a:	6818      	ldr	r0, [r3, #0]
   d6d5c:	f7ff f8a4 	bl	d5ea8 <os_mutex_recursive_lock>
        locked_ = true;
   d6d60:	2301      	movs	r3, #1
   d6d62:	7023      	strb	r3, [r4, #0]
    }
   d6d64:	bd10      	pop	{r4, pc}
   d6d66:	bf00      	nop
   d6d68:	2003e65c 	.word	0x2003e65c

000d6d6c <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d6d6c:	b510      	push	{r4, lr}
        mutex_.unlock();
   d6d6e:	4b04      	ldr	r3, [pc, #16]	; (d6d80 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d6d70:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6d72:	6818      	ldr	r0, [r3, #0]
   d6d74:	f7ff f8a0 	bl	d5eb8 <os_mutex_recursive_unlock>
        locked_ = false;
   d6d78:	2300      	movs	r3, #0
   d6d7a:	7023      	strb	r3, [r4, #0]
    }
   d6d7c:	bd10      	pop	{r4, pc}
   d6d7e:	bf00      	nop
   d6d80:	2003e65c 	.word	0x2003e65c

000d6d84 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d6d84:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6d86:	2500      	movs	r5, #0
   d6d88:	1cec      	adds	r4, r5, #3
   d6d8a:	428c      	cmp	r4, r1
   d6d8c:	d80d      	bhi.n	d6daa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d6d8e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d6d90:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d6d92:	5d87      	ldrb	r7, [r0, r6]
   d6d94:	4297      	cmp	r7, r2
   d6d96:	d105      	bne.n	d6da4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d6d98:	4426      	add	r6, r4
   d6d9a:	42b1      	cmp	r1, r6
   d6d9c:	d305      	bcc.n	d6daa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d6d9e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d6da0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d6da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d6da4:	3401      	adds	r4, #1
   d6da6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6da8:	e7ee      	b.n	d6d88 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d6daa:	2000      	movs	r0, #0
   d6dac:	e7f9      	b.n	d6da2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d6dae <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d6dae:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6db2:	4604      	mov	r4, r0
   d6db4:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d6db8:	461e      	mov	r6, r3
   d6dba:	4689      	mov	r9, r1
   d6dbc:	ab01      	add	r3, sp, #4
   d6dbe:	4690      	mov	r8, r2
   d6dc0:	460a      	mov	r2, r1
   d6dc2:	6a01      	ldr	r1, [r0, #32]
   d6dc4:	f7ff ffde 	bl	d6d84 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d6dc8:	6a25      	ldr	r5, [r4, #32]
   d6dca:	1cb3      	adds	r3, r6, #2
   d6dcc:	bb17      	cbnz	r7, d6e14 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d6dce:	b308      	cbz	r0, d6e14 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d6dd0:	195f      	adds	r7, r3, r5
   d6dd2:	1a3f      	subs	r7, r7, r0
   d6dd4:	2f1f      	cmp	r7, #31
   d6dd6:	d819      	bhi.n	d6e0c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6dd8:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d6ddc:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6de0:	eba5 0209 	sub.w	r2, r5, r9
   d6de4:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d6de6:	eb00 0109 	add.w	r1, r0, r9
   d6dea:	eb06 000a 	add.w	r0, r6, sl
   d6dee:	b292      	uxth	r2, r2
   d6df0:	4421      	add	r1, r4
   d6df2:	4420      	add	r0, r4
   d6df4:	f003 fa6c 	bl	da2d0 <memmove>
            selfData_[offset] = len + 1;
   d6df8:	1c73      	adds	r3, r6, #1
   d6dfa:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d6dfe:	4632      	mov	r2, r6
   d6e00:	4641      	mov	r1, r8
   d6e02:	eb04 000a 	add.w	r0, r4, sl
   d6e06:	f003 fa55 	bl	da2b4 <memcpy>
            selfLen_ = staLen + len + 2;
   d6e0a:	6227      	str	r7, [r4, #32]
}
   d6e0c:	6a20      	ldr	r0, [r4, #32]
   d6e0e:	b002      	add	sp, #8
   d6e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d6e14:	442b      	add	r3, r5
   d6e16:	2b1f      	cmp	r3, #31
   d6e18:	d8f8      	bhi.n	d6e0c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d6e1a:	1c73      	adds	r3, r6, #1
   d6e1c:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d6e1e:	1ca8      	adds	r0, r5, #2
   d6e20:	4425      	add	r5, r4
   d6e22:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d6e24:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d6e26:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d6e2a:	4641      	mov	r1, r8
   d6e2c:	4420      	add	r0, r4
   d6e2e:	f003 fa41 	bl	da2b4 <memcpy>
        selfLen_ += len;
   d6e32:	6a23      	ldr	r3, [r4, #32]
   d6e34:	4433      	add	r3, r6
   d6e36:	6223      	str	r3, [r4, #32]
   d6e38:	e7e8      	b.n	d6e0c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
	...

000d6e3c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d6e3c:	4a02      	ldr	r2, [pc, #8]	; (d6e48 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d6e3e:	2100      	movs	r1, #0
   d6e40:	200a      	movs	r0, #10
   d6e42:	f7ff b9b9 	b.w	d61b8 <panic_>
   d6e46:	bf00      	nop
   d6e48:	000d5d01 	.word	0x000d5d01

000d6e4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6e4c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6e4e:	b538      	push	{r3, r4, r5, lr}
   d6e50:	4604      	mov	r4, r0
	  switch (__op)
   d6e52:	d007      	beq.n	d6e64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x18>
   d6e54:	2a03      	cmp	r2, #3
   d6e56:	d011      	beq.n	d6e7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x30>
   d6e58:	2a01      	cmp	r2, #1
   d6e5a:	d101      	bne.n	d6e60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6e5c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d6e5e:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6e60:	2000      	movs	r0, #0
   d6e62:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6e64:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d6e66:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6e68:	f7fd f913 	bl	d4092 <_Znwj>
   d6e6c:	4603      	mov	r3, r0
   d6e6e:	2800      	cmp	r0, #0
   d6e70:	d0f5      	beq.n	d6e5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
   d6e72:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6e76:	e883 0003 	stmia.w	r3, {r0, r1}
   d6e7a:	e7f0      	b.n	d6e5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d6e7c:	6800      	ldr	r0, [r0, #0]
   d6e7e:	2800      	cmp	r0, #0
   d6e80:	d0ee      	beq.n	d6e60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
   d6e82:	2108      	movs	r1, #8
   d6e84:	f002 fa79 	bl	d937a <_ZdlPvj>
   d6e88:	e7ea      	b.n	d6e60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>

000d6e8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	  switch (__op)
   d6e8a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6e8c:	b538      	push	{r3, r4, r5, lr}
   d6e8e:	4604      	mov	r4, r0
	  switch (__op)
   d6e90:	d007      	beq.n	d6ea2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
   d6e92:	2a03      	cmp	r2, #3
   d6e94:	d011      	beq.n	d6eba <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
   d6e96:	2a01      	cmp	r2, #1
   d6e98:	d101      	bne.n	d6e9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6e9a:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d6e9c:	6023      	str	r3, [r4, #0]
	}
   d6e9e:	2000      	movs	r0, #0
   d6ea0:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6ea2:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d6ea4:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6ea6:	f7fd f8f4 	bl	d4092 <_Znwj>
   d6eaa:	4603      	mov	r3, r0
   d6eac:	2800      	cmp	r0, #0
   d6eae:	d0f5      	beq.n	d6e9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
   d6eb0:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6eb4:	e883 0003 	stmia.w	r3, {r0, r1}
   d6eb8:	e7f0      	b.n	d6e9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d6eba:	6800      	ldr	r0, [r0, #0]
   d6ebc:	2800      	cmp	r0, #0
   d6ebe:	d0ee      	beq.n	d6e9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
   d6ec0:	2108      	movs	r1, #8
   d6ec2:	f002 fa5a 	bl	d937a <_ZdlPvj>
   d6ec6:	e7ea      	b.n	d6e9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

000d6ec8 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6ec8:	b430      	push	{r4, r5}
   d6eca:	460d      	mov	r5, r1
   d6ecc:	4611      	mov	r1, r2
   d6ece:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   d6ed0:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6ed2:	6809      	ldr	r1, [r1, #0]
   d6ed4:	6828      	ldr	r0, [r5, #0]
   d6ed6:	e9d3 4300 	ldrd	r4, r3, [r3]
   d6eda:	46a4      	mov	ip, r4
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d6edc:	bc30      	pop	{r4, r5}
   d6ede:	4760      	bx	ip

000d6ee0 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6ee0:	4603      	mov	r3, r0
   d6ee2:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   d6ee4:	681b      	ldr	r3, [r3, #0]
   d6ee6:	e9d3 2100 	ldrd	r2, r1, [r3]
   d6eea:	4710      	bx	r2

000d6eec <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d6eec:	b510      	push	{r4, lr}
      if (_M_manager)
   d6eee:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6ef0:	4604      	mov	r4, r0
      if (_M_manager)
   d6ef2:	b113      	cbz	r3, d6efa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6ef4:	2203      	movs	r2, #3
   d6ef6:	4601      	mov	r1, r0
   d6ef8:	4798      	blx	r3
    }
   d6efa:	4620      	mov	r0, r4
   d6efc:	bd10      	pop	{r4, pc}

000d6efe <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6efe:	b510      	push	{r4, lr}
   d6f00:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6f02:	3058      	adds	r0, #88	; 0x58
   d6f04:	f7ff fff2 	bl	d6eec <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   d6f08:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   d6f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6f10:	f7ff bd20 	b.w	d6954 <_ZN6StringD1Ev>

000d6f14 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d6f14:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6f18:	b2da      	uxtb	r2, r3
   d6f1a:	2a09      	cmp	r2, #9
   d6f1c:	d801      	bhi.n	d6f22 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d6f1e:	4618      	mov	r0, r3
   d6f20:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d6f22:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d6f26:	2b05      	cmp	r3, #5
   d6f28:	d801      	bhi.n	d6f2e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d6f2a:	3857      	subs	r0, #87	; 0x57
   d6f2c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d6f2e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d6f32:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d6f34:	bf94      	ite	ls
   d6f36:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d6f38:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d6f3c:	4770      	bx	lr

000d6f3e <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d6f3e:	b510      	push	{r4, lr}
            locked_(false) {
   d6f40:	2300      	movs	r3, #0
    WiringBleLock() :
   d6f42:	4604      	mov	r4, r0
            locked_(false) {
   d6f44:	7003      	strb	r3, [r0, #0]
        lock();
   d6f46:	f7ff ff05 	bl	d6d54 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d6f4a:	4620      	mov	r0, r4
   d6f4c:	bd10      	pop	{r4, pc}

000d6f4e <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d6f4e:	b510      	push	{r4, lr}
        if (locked_) {
   d6f50:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d6f52:	4604      	mov	r4, r0
        if (locked_) {
   d6f54:	b10b      	cbz	r3, d6f5a <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d6f56:	f7ff ff09 	bl	d6d6c <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d6f5a:	4620      	mov	r0, r4
   d6f5c:	bd10      	pop	{r4, pc}

000d6f5e <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d6f5e:	b082      	sub	sp, #8
   d6f60:	4603      	mov	r3, r0
    address_ = addr;
   d6f62:	6808      	ldr	r0, [r1, #0]
   d6f64:	6849      	ldr	r1, [r1, #4]
   d6f66:	466a      	mov	r2, sp
   d6f68:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d6f6a:	466a      	mov	r2, sp
   d6f6c:	ca03      	ldmia	r2!, {r0, r1}
   d6f6e:	6018      	str	r0, [r3, #0]
}
   d6f70:	4618      	mov	r0, r3
    address_ = addr.address_;
   d6f72:	6059      	str	r1, [r3, #4]
}
   d6f74:	b002      	add	sp, #8
   d6f76:	4770      	bx	lr

000d6f78 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d6f78:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d6f7a:	7982      	ldrb	r2, [r0, #6]
   d6f7c:	798b      	ldrb	r3, [r1, #6]
   d6f7e:	429a      	cmp	r2, r3
   d6f80:	d106      	bne.n	d6f90 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d6f82:	2206      	movs	r2, #6
   d6f84:	f003 f988 	bl	da298 <memcmp>
   d6f88:	fab0 f080 	clz	r0, r0
   d6f8c:	0940      	lsrs	r0, r0, #5
}
   d6f8e:	bd08      	pop	{r3, pc}
    return false;
   d6f90:	2000      	movs	r0, #0
   d6f92:	e7fc      	b.n	d6f8e <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d6f94 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d6f94:	f04f 33ff 	mov.w	r3, #4294967295
   d6f98:	6003      	str	r3, [r0, #0]
   d6f9a:	8083      	strh	r3, [r0, #4]
}
   d6f9c:	2000      	movs	r0, #0
   d6f9e:	4770      	bx	lr

000d6fa0 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d6fa0:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d6fa2:	b508      	push	{r3, lr}
        : address_{} {
   d6fa4:	6001      	str	r1, [r0, #0]
   d6fa6:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d6fa8:	4602      	mov	r2, r0
    clear();
   d6faa:	f7ff fff3 	bl	d6f94 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d6fae:	7191      	strb	r1, [r2, #6]
}
   d6fb0:	4610      	mov	r0, r2
   d6fb2:	bd08      	pop	{r3, pc}

000d6fb4 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d6fb4:	2201      	movs	r2, #1
   d6fb6:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6fb8:	4a06      	ldr	r2, [pc, #24]	; (d6fd4 <_ZN8particle7BleUuidC1Ev+0x20>)
   d6fba:	6811      	ldr	r1, [r2, #0]
   d6fbc:	6001      	str	r1, [r0, #0]
   d6fbe:	6851      	ldr	r1, [r2, #4]
   d6fc0:	6041      	str	r1, [r0, #4]
   d6fc2:	8911      	ldrh	r1, [r2, #8]
   d6fc4:	7a92      	ldrb	r2, [r2, #10]
   d6fc6:	7282      	strb	r2, [r0, #10]
   d6fc8:	2200      	movs	r2, #0
   d6fca:	8101      	strh	r1, [r0, #8]
   d6fcc:	f8c0 200b 	str.w	r2, [r0, #11]
   d6fd0:	73c2      	strb	r2, [r0, #15]
}
   d6fd2:	4770      	bx	lr
   d6fd4:	000dad08 	.word	0x000dad08

000d6fd8 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d6fd8:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d6fda:	690b      	ldr	r3, [r1, #16]
   d6fdc:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6fde:	f101 0210 	add.w	r2, r1, #16
   d6fe2:	4603      	mov	r3, r0
   d6fe4:	f851 4b04 	ldr.w	r4, [r1], #4
   d6fe8:	f843 4b04 	str.w	r4, [r3], #4
   d6fec:	4291      	cmp	r1, r2
   d6fee:	d1f9      	bne.n	d6fe4 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d6ff0:	bd10      	pop	{r4, pc}

000d6ff2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d6ff2:	b510      	push	{r4, lr}
    if (uuid128) {
   d6ff4:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d6ff6:	4604      	mov	r4, r0
    if (uuid128) {
   d6ff8:	b1b1      	cbz	r1, d7028 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d6ffa:	2a01      	cmp	r2, #1
   d6ffc:	f101 0210 	add.w	r2, r1, #16
   d7000:	d10a      	bne.n	d7018 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d7002:	4601      	mov	r1, r0
   d7004:	f853 0b04 	ldr.w	r0, [r3], #4
   d7008:	f841 0b04 	str.w	r0, [r1], #4
   d700c:	4293      	cmp	r3, r2
   d700e:	d1f9      	bne.n	d7004 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d7010:	2301      	movs	r3, #1
   d7012:	6123      	str	r3, [r4, #16]
}
   d7014:	4620      	mov	r0, r4
   d7016:	bd10      	pop	{r4, pc}
   d7018:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d701a:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d701e:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d7022:	429a      	cmp	r2, r3
   d7024:	d1f9      	bne.n	d701a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d7026:	e7f3      	b.n	d7010 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d7028:	2210      	movs	r2, #16
   d702a:	f003 f96b 	bl	da304 <memset>
   d702e:	e7f1      	b.n	d7014 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d7030 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d7030:	b538      	push	{r3, r4, r5, lr}
   d7032:	4604      	mov	r4, r0
   d7034:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d7036:	461a      	mov	r2, r3
   d7038:	f7ff ffdb 	bl	d6ff2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d703c:	81a5      	strh	r5, [r4, #12]
}
   d703e:	4620      	mov	r0, r4
   d7040:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7044 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d7044:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d7046:	6902      	ldr	r2, [r0, #16]
   d7048:	b922      	cbnz	r2, d7054 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d704a:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d704c:	3800      	subs	r0, #0
   d704e:	bf18      	it	ne
   d7050:	2001      	movne	r0, #1
}
   d7052:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d7054:	4902      	ldr	r1, [pc, #8]	; (d7060 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d7056:	2210      	movs	r2, #16
   d7058:	f003 f91e 	bl	da298 <memcmp>
   d705c:	e7f6      	b.n	d704c <_ZNK8particle7BleUuid7isValidEv+0x8>
   d705e:	bf00      	nop
   d7060:	000dad28 	.word	0x000dad28

000d7064 <_ZNK8particle7BleUuid4typeEv>:
}
   d7064:	6900      	ldr	r0, [r0, #16]
   d7066:	4770      	bx	lr

000d7068 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d7068:	b538      	push	{r3, r4, r5, lr}
   d706a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d706c:	2214      	movs	r2, #20
   d706e:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d7070:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d7072:	f003 f947 	bl	da304 <memset>
    if (type_ == BleUuidType::SHORT) {
   d7076:	6923      	ldr	r3, [r4, #16]
   d7078:	b93b      	cbnz	r3, d708a <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d707a:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d707c:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d707e:	7b23      	ldrb	r3, [r4, #12]
   d7080:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d7084:	802b      	strh	r3, [r5, #0]
}
   d7086:	4628      	mov	r0, r5
   d7088:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d708a:	2301      	movs	r3, #1
   d708c:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d708e:	f104 0210 	add.w	r2, r4, #16
   d7092:	462b      	mov	r3, r5
   d7094:	f854 1b04 	ldr.w	r1, [r4], #4
   d7098:	f843 1b04 	str.w	r1, [r3], #4
   d709c:	4294      	cmp	r4, r2
   d709e:	d1f9      	bne.n	d7094 <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d70a0:	e7f1      	b.n	d7086 <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d70a2 <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d70a2:	7b42      	ldrb	r2, [r0, #13]
   d70a4:	7b00      	ldrb	r0, [r0, #12]
}
   d70a6:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d70aa:	4770      	bx	lr

000d70ac <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d70ac:	4770      	bx	lr

000d70ae <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d70ae:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d70b0:	6902      	ldr	r2, [r0, #16]
   d70b2:	690b      	ldr	r3, [r1, #16]
   d70b4:	429a      	cmp	r2, r3
   d70b6:	d106      	bne.n	d70c6 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d70b8:	2210      	movs	r2, #16
   d70ba:	f003 f8ed 	bl	da298 <memcmp>
   d70be:	fab0 f080 	clz	r0, r0
   d70c2:	0940      	lsrs	r0, r0, #5
}
   d70c4:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d70c6:	2000      	movs	r0, #0
   d70c8:	e7fc      	b.n	d70c4 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d70cc <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d70cc:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d70ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d70d2:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d70d4:	4b32      	ldr	r3, [pc, #200]	; (d71a0 <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d70d6:	681a      	ldr	r2, [r3, #0]
   d70d8:	6002      	str	r2, [r0, #0]
   d70da:	685a      	ldr	r2, [r3, #4]
   d70dc:	6042      	str	r2, [r0, #4]
   d70de:	2500      	movs	r5, #0
   d70e0:	891a      	ldrh	r2, [r3, #8]
   d70e2:	7a9b      	ldrb	r3, [r3, #10]
   d70e4:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d70e6:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d70e8:	7283      	strb	r3, [r0, #10]
   d70ea:	f8c0 500b 	str.w	r5, [r0, #11]
   d70ee:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d70f0:	460e      	mov	r6, r1
   d70f2:	b321      	cbz	r1, d713e <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d70f4:	2124      	movs	r1, #36	; 0x24
   d70f6:	4630      	mov	r0, r6
   d70f8:	f003 f95d 	bl	da3b6 <strnlen>
   d70fc:	2804      	cmp	r0, #4
   d70fe:	d121      	bne.n	d7144 <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d7100:	f8ad 5004 	strh.w	r5, [sp, #4]
   d7104:	af01      	add	r7, sp, #4
   d7106:	1cb5      	adds	r5, r6, #2
   d7108:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d710a:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d710e:	f7ff ff01 	bl	d6f14 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d7112:	f1b0 0800 	subs.w	r8, r0, #0
   d7116:	db10      	blt.n	d713a <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d7118:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d711c:	f7ff fefa 	bl	d6f14 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d7120:	2800      	cmp	r0, #0
   d7122:	db0a      	blt.n	d713a <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d7124:	3502      	adds	r5, #2
   d7126:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d712a:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d712c:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d7130:	d1eb      	bne.n	d710a <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d7132:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d7136:	ba5b      	rev16	r3, r3
   d7138:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d713a:	2300      	movs	r3, #0
   d713c:	6123      	str	r3, [r4, #16]
}
   d713e:	b002      	add	sp, #8
   d7140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d7144:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d7146:	2124      	movs	r1, #36	; 0x24
   d7148:	4630      	mov	r0, r6
   d714a:	f003 f934 	bl	da3b6 <strnlen>
   d714e:	42a8      	cmp	r0, r5
   d7150:	d806      	bhi.n	d7160 <_ZN8particle7BleUuid9constructEPKc+0x94>
   d7152:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d7154:	2300      	movs	r3, #0
    while (len > 0) {
   d7156:	42bc      	cmp	r4, r7
   d7158:	d0f1      	beq.n	d713e <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d715a:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d715e:	e7fa      	b.n	d7156 <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d7160:	2f00      	cmp	r7, #0
   d7162:	d0ec      	beq.n	d713e <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d7164:	5d70      	ldrb	r0, [r6, r5]
   d7166:	f7ff fed5 	bl	d6f14 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d716a:	0603      	lsls	r3, r0, #24
   d716c:	d415      	bmi.n	d719a <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d716e:	0100      	lsls	r0, r0, #4
   d7170:	3f01      	subs	r7, #1
   d7172:	fa5f f880 	uxtb.w	r8, r0
   d7176:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d717a:	2124      	movs	r1, #36	; 0x24
   d717c:	4630      	mov	r0, r6
   d717e:	f003 f91a 	bl	da3b6 <strnlen>
   d7182:	3501      	adds	r5, #1
   d7184:	42a8      	cmp	r0, r5
   d7186:	d908      	bls.n	d719a <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d7188:	5d70      	ldrb	r0, [r6, r5]
   d718a:	f7ff fec3 	bl	d6f14 <_ZN8particle11hexToNibbleEc>
   d718e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d7190:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d7192:	bfa4      	itt	ge
   d7194:	ea40 0008 	orrge.w	r0, r0, r8
   d7198:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d719a:	3501      	adds	r5, #1
   d719c:	e7d3      	b.n	d7146 <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d719e:	bf00      	nop
   d71a0:	000dad08 	.word	0x000dad08

000d71a4 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d71a4:	b513      	push	{r0, r1, r4, lr}
   d71a6:	4604      	mov	r4, r0
   d71a8:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d71aa:	f7ff ff03 	bl	d6fb4 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d71ae:	4620      	mov	r0, r4
   d71b0:	9901      	ldr	r1, [sp, #4]
   d71b2:	f7ff ff8b 	bl	d70cc <_ZN8particle7BleUuid9constructEPKc>
}
   d71b6:	4620      	mov	r0, r4
   d71b8:	b002      	add	sp, #8
   d71ba:	bd10      	pop	{r4, pc}

000d71bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d71bc:	b430      	push	{r4, r5}
   d71be:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d71c2:	b912      	cbnz	r2, d71ca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d71c4:	6a00      	ldr	r0, [r0, #32]
}
   d71c6:	bc30      	pop	{r4, r5}
   d71c8:	4770      	bx	lr
   d71ca:	9502      	str	r5, [sp, #8]
   d71cc:	bc30      	pop	{r4, r5}
   d71ce:	f7ff bdee 	b.w	d6dae <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d71d2 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d71d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d71d4:	4604      	mov	r4, r0
          selfLen_(0) {
   d71d6:	4602      	mov	r2, r0
   d71d8:	f100 011f 	add.w	r1, r0, #31
   d71dc:	2300      	movs	r3, #0
   d71de:	f802 3b01 	strb.w	r3, [r2], #1
   d71e2:	4291      	cmp	r1, r2
   d71e4:	d1fb      	bne.n	d71de <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d71e6:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d71e8:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d71ea:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d71ec:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d71ee:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d71f2:	4619      	mov	r1, r3
   d71f4:	f10d 020f 	add.w	r2, sp, #15
   d71f8:	4620      	mov	r0, r4
   d71fa:	f7ff ffdf 	bl	d71bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d71fe:	4620      	mov	r0, r4
   d7200:	b004      	add	sp, #16
   d7202:	bd10      	pop	{r4, pc}

000d7204 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d7204:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d7206:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d7208:	460e      	mov	r6, r1
   d720a:	ab01      	add	r3, sp, #4
   d720c:	6a01      	ldr	r1, [r0, #32]
   d720e:	4604      	mov	r4, r0
   d7210:	f7ff fdb8 	bl	d6d84 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d7214:	4605      	mov	r5, r0
   d7216:	b178      	cbz	r0, d7238 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d7218:	9801      	ldr	r0, [sp, #4]
   d721a:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d721c:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d721e:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d7220:	4421      	add	r1, r4
   d7222:	1b52      	subs	r2, r2, r5
   d7224:	4420      	add	r0, r4
   d7226:	f003 f845 	bl	da2b4 <memcpy>
        selfLen_ -= len;
   d722a:	6a20      	ldr	r0, [r4, #32]
   d722c:	1b40      	subs	r0, r0, r5
   d722e:	6220      	str	r0, [r4, #32]
        remove(type);
   d7230:	4631      	mov	r1, r6
   d7232:	4620      	mov	r0, r4
   d7234:	f7ff ffe6 	bl	d7204 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d7238:	b002      	add	sp, #8
   d723a:	bd70      	pop	{r4, r5, r6, pc}

000d723c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d723c:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   d723e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7242:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d7244:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   d7246:	8043      	strh	r3, [r0, #2]
   d7248:	220e      	movs	r2, #14
   d724a:	4629      	mov	r1, r5
   d724c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d724e:	7105      	strb	r5, [r0, #4]
   d7250:	3006      	adds	r0, #6
   d7252:	f003 f857 	bl	da304 <memset>
   d7256:	f104 0014 	add.w	r0, r4, #20
   d725a:	f7ff feab 	bl	d6fb4 <_ZN8particle7BleUuidC1Ev>
   d725e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d7262:	f7ff fea7 	bl	d6fb4 <_ZN8particle7BleUuidC1Ev>
   d7266:	4904      	ldr	r1, [pc, #16]	; (d7278 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d7268:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d726c:	f7ff fbbd 	bl	d69ea <_ZN6StringC1EPKc>
    _Function_base() : _M_manager(nullptr) { }
   d7270:	6565      	str	r5, [r4, #84]	; 0x54
    }
   d7272:	4620      	mov	r0, r4
   d7274:	bd38      	pop	{r3, r4, r5, pc}
   d7276:	bf00      	nop
   d7278:	000da68d 	.word	0x000da68d

000d727c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d727c:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d727e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d7282:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d7286:	4293      	cmp	r3, r2
   d7288:	4618      	mov	r0, r3
   d728a:	d006      	beq.n	d729a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d728c:	6804      	ldr	r4, [r0, #0]
   d728e:	8824      	ldrh	r4, [r4, #0]
   d7290:	428c      	cmp	r4, r1
   d7292:	f103 0308 	add.w	r3, r3, #8
   d7296:	d1f6      	bne.n	d7286 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d7298:	bd10      	pop	{r4, pc}
        return nullptr;
   d729a:	2000      	movs	r0, #0
   d729c:	e7fc      	b.n	d7298 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d72a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d72a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d72a2:	4606      	mov	r6, r0
   d72a4:	b085      	sub	sp, #20
   d72a6:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d72a8:	460d      	mov	r5, r1
   d72aa:	2900      	cmp	r1, #0
   d72ac:	d050      	beq.n	d7350 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d72ae:	2a00      	cmp	r2, #0
   d72b0:	d04e      	beq.n	d7350 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
    void onDataReceived(void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance) {
        onDataReceived((callback && instance) ? std::bind(callback, instance, _1, _2, _3) :(BleOnDataReceivedStdFunction) nullptr);
    }

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d72b2:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   d72b4:	7823      	ldrb	r3, [r4, #0]
   d72b6:	2af4      	cmp	r2, #244	; 0xf4
   d72b8:	bf28      	it	cs
   d72ba:	22f4      	movcs	r2, #244	; 0xf4
   d72bc:	b343      	cbz	r3, d7310 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d72be:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d72c0:	0798      	lsls	r0, r3, #30
   d72c2:	d509      	bpl.n	d72d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d72c4:	89a0      	ldrh	r0, [r4, #12]
   d72c6:	9203      	str	r2, [sp, #12]
   d72c8:	2300      	movs	r3, #0
   d72ca:	f7fe fd8d 	bl	d5de8 <hal_ble_gatt_server_set_characteristic_value>
   d72ce:	2800      	cmp	r0, #0
   d72d0:	9a03      	ldr	r2, [sp, #12]
   d72d2:	da03      	bge.n	d72dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d72d4:	b005      	add	sp, #20
   d72d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d72d8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d72dc:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d72de:	7923      	ldrb	r3, [r4, #4]
   d72e0:	06d9      	lsls	r1, r3, #27
   d72e2:	d509      	bpl.n	d72f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d72e4:	2f01      	cmp	r7, #1
   d72e6:	d007      	beq.n	d72f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d72e8:	89a0      	ldrh	r0, [r4, #12]
   d72ea:	2300      	movs	r3, #0
   d72ec:	4629      	mov	r1, r5
}
   d72ee:	b005      	add	sp, #20
   d72f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d72f4:	f7fe bdb4 	b.w	d5e60 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d72f8:	069b      	lsls	r3, r3, #26
   d72fa:	d5eb      	bpl.n	d72d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d72fc:	2f02      	cmp	r7, #2
   d72fe:	d0e9      	beq.n	d72d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d7300:	89a0      	ldrh	r0, [r4, #12]
   d7302:	2300      	movs	r3, #0
   d7304:	4629      	mov	r1, r5
}
   d7306:	b005      	add	sp, #20
   d7308:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d730c:	f7fe bdb2 	b.w	d5e74 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d7310:	8860      	ldrh	r0, [r4, #2]
   d7312:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d7316:	4288      	cmp	r0, r1
   d7318:	d01c      	beq.n	d7354 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d731a:	7921      	ldrb	r1, [r4, #4]
   d731c:	074e      	lsls	r6, r1, #29
   d731e:	d501      	bpl.n	d7324 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d7320:	2f01      	cmp	r7, #1
   d7322:	d104      	bne.n	d732e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d7324:	070b      	lsls	r3, r1, #28
   d7326:	d409      	bmi.n	d733c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d7328:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d732c:	e7d2      	b.n	d72d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d732e:	89a1      	ldrh	r1, [r4, #12]
   d7330:	9300      	str	r3, [sp, #0]
   d7332:	4613      	mov	r3, r2
   d7334:	462a      	mov	r2, r5
   d7336:	f7fe fd6b 	bl	d5e10 <hal_ble_gatt_client_write_without_response>
   d733a:	e7cb      	b.n	d72d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d733c:	2f02      	cmp	r7, #2
   d733e:	d0f3      	beq.n	d7328 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d7340:	2300      	movs	r3, #0
   d7342:	89a1      	ldrh	r1, [r4, #12]
   d7344:	9300      	str	r3, [sp, #0]
   d7346:	4613      	mov	r3, r2
   d7348:	462a      	mov	r2, r5
   d734a:	f7fe fd57 	bl	d5dfc <hal_ble_gatt_client_write_with_response>
   d734e:	e7c1      	b.n	d72d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d7350:	4802      	ldr	r0, [pc, #8]	; (d735c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d7352:	e7bf      	b.n	d72d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d7354:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d7358:	e7bc      	b.n	d72d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d735a:	bf00      	nop
   d735c:	fffffef2 	.word	0xfffffef2

000d7360 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   d7360:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   d7362:	688a      	ldr	r2, [r1, #8]
   d7364:	6809      	ldr	r1, [r1, #0]
   d7366:	f7ff bf9b 	b.w	d72a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000d736a <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d736a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d736c:	460c      	mov	r4, r1
   d736e:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d7370:	21f4      	movs	r1, #244	; 0xf4
   d7372:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d7374:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d7376:	f003 f81e 	bl	da3b6 <strnlen>
   d737a:	9b01      	ldr	r3, [sp, #4]
   d737c:	4602      	mov	r2, r0
   d737e:	4621      	mov	r1, r4
   d7380:	4628      	mov	r0, r5
}
   d7382:	b003      	add	sp, #12
   d7384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d7388:	f7ff bf8a 	b.w	d72a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000d738c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d738c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d7390:	2600      	movs	r6, #0
   d7392:	6006      	str	r6, [r0, #0]
   d7394:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7396:	2028      	movs	r0, #40	; 0x28
   d7398:	460c      	mov	r4, r1
   d739a:	f7fc fe7a 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d739e:	1e05      	subs	r5, r0, #0
   d73a0:	f105 080c 	add.w	r8, r5, #12
   d73a4:	d00f      	beq.n	d73c6 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d73a6:	2301      	movs	r3, #1
   d73a8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d73ac:	4b08      	ldr	r3, [pc, #32]	; (d73d0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d73ae:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   d73b0:	4640      	mov	r0, r8
   d73b2:	f7ff fdff 	bl	d6fb4 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   d73b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   d73b8:	622e      	str	r6, [r5, #32]
   d73ba:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   d73be:	4646      	mov	r6, r8
   d73c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d73c2:	6823      	ldr	r3, [r4, #0]
   d73c4:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   d73c6:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d73ca:	4638      	mov	r0, r7
   d73cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d73d0:	000dacd0 	.word	0x000dacd0

000d73d4 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d73d4:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d73d6:	2500      	movs	r5, #0
   d73d8:	6005      	str	r5, [r0, #0]
   d73da:	4606      	mov	r6, r0
   d73dc:	2030      	movs	r0, #48	; 0x30
   d73de:	f7fc fe58 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d73e2:	4604      	mov	r4, r0
   d73e4:	b188      	cbz	r0, d740a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d73e6:	2301      	movs	r3, #1
   d73e8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d73ec:	4b09      	ldr	r3, [pc, #36]	; (d7414 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d73ee:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d73f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d73f4:	8183      	strh	r3, [r0, #12]
   d73f6:	300e      	adds	r0, #14
   d73f8:	f7ff fdd2 	bl	d6fa0 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d73fc:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d7400:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d7404:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d7408:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d740a:	6074      	str	r4, [r6, #4]
   d740c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d740e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d7410:	4630      	mov	r0, r6
   d7412:	bd70      	pop	{r4, r5, r6, pc}
   d7414:	000dacec 	.word	0x000dacec

000d7418 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d7418:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d741a:	460d      	mov	r5, r1
   d741c:	4604      	mov	r4, r0
    WiringBleLock lk;
   d741e:	a801      	add	r0, sp, #4
   d7420:	f7ff fd8d 	bl	d6f3e <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d7424:	682a      	ldr	r2, [r5, #0]
   d7426:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d742a:	6023      	str	r3, [r4, #0]
   d742c:	6853      	ldr	r3, [r2, #4]
   d742e:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d7430:	a801      	add	r0, sp, #4
   d7432:	f7ff fd8c 	bl	d6f4e <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d7436:	4620      	mov	r0, r4
   d7438:	b003      	add	sp, #12
   d743a:	bd30      	pop	{r4, r5, pc}

000d743c <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d743c:	b530      	push	{r4, r5, lr}
   d743e:	4605      	mov	r5, r0
   d7440:	b087      	sub	sp, #28
   d7442:	460c      	mov	r4, r1
    WiringBleLock lk;
   d7444:	a801      	add	r0, sp, #4
   d7446:	f7ff fd7a 	bl	d6f3e <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d744a:	682a      	ldr	r2, [r5, #0]
   d744c:	6823      	ldr	r3, [r4, #0]
   d744e:	8812      	ldrh	r2, [r2, #0]
   d7450:	881b      	ldrh	r3, [r3, #0]
   d7452:	429a      	cmp	r2, r3
   d7454:	d10d      	bne.n	d7472 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d7456:	4629      	mov	r1, r5
   d7458:	a802      	add	r0, sp, #8
   d745a:	f7ff ffdd 	bl	d7418 <_ZNK8particle13BlePeerDevice7addressEv>
   d745e:	4621      	mov	r1, r4
   d7460:	a804      	add	r0, sp, #16
   d7462:	f7ff ffd9 	bl	d7418 <_ZNK8particle13BlePeerDevice7addressEv>
   d7466:	a904      	add	r1, sp, #16
   d7468:	a802      	add	r0, sp, #8
   d746a:	f7ff fd85 	bl	d6f78 <_ZNK8particle10BleAddresseqERKS0_>
   d746e:	4604      	mov	r4, r0
   d7470:	b900      	cbnz	r0, d7474 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d7472:	2400      	movs	r4, #0
    WiringBleLock lk;
   d7474:	a801      	add	r0, sp, #4
   d7476:	f7ff fd6a 	bl	d6f4e <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d747a:	4620      	mov	r0, r4
   d747c:	b007      	add	sp, #28
   d747e:	bd30      	pop	{r4, r5, pc}

000d7480 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d7480:	b510      	push	{r4, lr}
   d7482:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d7484:	2054      	movs	r0, #84	; 0x54
   d7486:	f7fc fe04 	bl	d4092 <_Znwj>
   d748a:	4601      	mov	r1, r0
   d748c:	b160      	cbz	r0, d74a8 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d748e:	2300      	movs	r3, #0
   d7490:	e9c0 3300 	strd	r3, r3, [r0]
   d7494:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d7498:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d749c:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d74a0:	6203      	str	r3, [r0, #32]
   d74a2:	62c3      	str	r3, [r0, #44]	; 0x2c
   d74a4:	63c3      	str	r3, [r0, #60]	; 0x3c
   d74a6:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d74a8:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d74aa:	b919      	cbnz	r1, d74b4 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d74ac:	4a09      	ldr	r2, [pc, #36]	; (d74d4 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d74ae:	200a      	movs	r0, #10
   d74b0:	f7fe fe82 	bl	d61b8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d74b4:	2000      	movs	r0, #0
   d74b6:	f7fe fc5b 	bl	d5d70 <hal_ble_stack_init>
   d74ba:	b120      	cbz	r0, d74c6 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d74bc:	4a05      	ldr	r2, [pc, #20]	; (d74d4 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d74be:	2100      	movs	r1, #0
   d74c0:	200a      	movs	r0, #10
   d74c2:	f7fe fe79 	bl	d61b8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d74c6:	6821      	ldr	r1, [r4, #0]
   d74c8:	4803      	ldr	r0, [pc, #12]	; (d74d8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d74ca:	2200      	movs	r2, #0
   d74cc:	f7fe fcbe 	bl	d5e4c <hal_ble_set_callback_on_periph_link_events>
}
   d74d0:	4620      	mov	r0, r4
   d74d2:	bd10      	pop	{r4, pc}
   d74d4:	000d5d01 	.word	0x000d5d01
   d74d8:	000d7961 	.word	0x000d7961

000d74dc <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d74dc:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d74de:	4c0b      	ldr	r4, [pc, #44]	; (d750c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d74e0:	7823      	ldrb	r3, [r4, #0]
   d74e2:	f3bf 8f5b 	dmb	ish
   d74e6:	07db      	lsls	r3, r3, #31
   d74e8:	d40e      	bmi.n	d7508 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d74ea:	4620      	mov	r0, r4
   d74ec:	f7fc fdd7 	bl	d409e <__cxa_guard_acquire>
   d74f0:	b150      	cbz	r0, d7508 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d74f2:	4807      	ldr	r0, [pc, #28]	; (d7510 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d74f4:	f7ff ffc4 	bl	d7480 <_ZN8particle14BleLocalDeviceC1Ev>
   d74f8:	4620      	mov	r0, r4
   d74fa:	f7fc fdd5 	bl	d40a8 <__cxa_guard_release>
   d74fe:	4a05      	ldr	r2, [pc, #20]	; (d7514 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d7500:	4905      	ldr	r1, [pc, #20]	; (d7518 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d7502:	4803      	ldr	r0, [pc, #12]	; (d7510 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d7504:	f001 ff34 	bl	d9370 <__aeabi_atexit>
    return instance;
}
   d7508:	4801      	ldr	r0, [pc, #4]	; (d7510 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d750a:	bd10      	pop	{r4, pc}
   d750c:	2003e654 	.word	0x2003e654
   d7510:	2003e660 	.word	0x2003e660
   d7514:	2003df48 	.word	0x2003df48
   d7518:	000d7721 	.word	0x000d7721

000d751c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d751c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   d751e:	6803      	ldr	r3, [r0, #0]
   d7520:	3b09      	subs	r3, #9
   d7522:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d7524:	b08d      	sub	sp, #52	; 0x34
   d7526:	4604      	mov	r4, r0
   d7528:	460d      	mov	r5, r1
    switch (event->type) {
   d752a:	d811      	bhi.n	d7550 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d752c:	f7ff ffd6 	bl	d74dc <_ZN8particle14BleLocalDevice11getInstanceEv>
   d7530:	88a1      	ldrh	r1, [r4, #4]
   d7532:	6800      	ldr	r0, [r0, #0]
   d7534:	f7ff fea2 	bl	d727c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d7538:	4603      	mov	r3, r0
   d753a:	b958      	cbnz	r0, d7554 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d753c:	2220      	movs	r2, #32
   d753e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   d7542:	4a0b      	ldr	r2, [pc, #44]	; (d7570 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d7544:	9200      	str	r2, [sp, #0]
   d7546:	490b      	ldr	r1, [pc, #44]	; (d7574 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d7548:	aa04      	add	r2, sp, #16
   d754a:	2032      	movs	r0, #50	; 0x32
   d754c:	f7fe fe3c 	bl	d61c8 <log_message>
}
   d7550:	b00d      	add	sp, #52	; 0x34
   d7552:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   d7554:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   d7556:	2a00      	cmp	r2, #0
   d7558:	d0fa      	beq.n	d7550 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   d755a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d755e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   d7562:	e9cd 1203 	strd	r1, r2, [sp, #12]
   d7566:	6dac      	ldr	r4, [r5, #88]	; 0x58
   d7568:	aa04      	add	r2, sp, #16
   d756a:	a903      	add	r1, sp, #12
   d756c:	47a0      	blx	r4
}
   d756e:	e7ef      	b.n	d7550 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   d7570:	000dabdd 	.word	0x000dabdd
   d7574:	000dabb6 	.word	0x000dabb6

000d7578 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d7578:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   d757a:	2000      	movs	r0, #0
   d757c:	f7fe fbf8 	bl	d5d70 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   d7580:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d7584:	bd08      	pop	{r3, pc}

000d7586 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d7586:	4608      	mov	r0, r1
   d7588:	b911      	cbnz	r1, d7590 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d758a:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d758c:	f7fe bc00 	b.w	d5d90 <hal_ble_gap_set_advertising_data>
   d7590:	6a09      	ldr	r1, [r1, #32]
   d7592:	2200      	movs	r2, #0
   d7594:	e7fa      	b.n	d758c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d7596 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d7596:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d7598:	4608      	mov	r0, r1
   d759a:	b929      	cbnz	r1, d75a8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d759c:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d759e:	b003      	add	sp, #12
   d75a0:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d75a4:	f7fe bbfc 	b.w	d5da0 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d75a8:	2101      	movs	r1, #1
   d75aa:	9001      	str	r0, [sp, #4]
   d75ac:	f7ff fe2a 	bl	d7204 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d75b0:	9801      	ldr	r0, [sp, #4]
   d75b2:	2200      	movs	r2, #0
   d75b4:	6a01      	ldr	r1, [r0, #32]
   d75b6:	e7f2      	b.n	d759e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d75b8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d75b8:	b538      	push	{r3, r4, r5, lr}
   d75ba:	4604      	mov	r4, r0
   d75bc:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   d75be:	f7ff ffe2 	bl	d7586 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d75c2:	2800      	cmp	r0, #0
   d75c4:	db0a      	blt.n	d75dc <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   d75c6:	4629      	mov	r1, r5
   d75c8:	4620      	mov	r0, r4
   d75ca:	f7ff ffe4 	bl	d7596 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d75ce:	2800      	cmp	r0, #0
   d75d0:	db04      	blt.n	d75dc <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   d75d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   d75d6:	2000      	movs	r0, #0
   d75d8:	f7fe bbea 	b.w	d5db0 <hal_ble_gap_start_advertising>
}
   d75dc:	bd38      	pop	{r3, r4, r5, pc}

000d75de <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   d75de:	6803      	ldr	r3, [r0, #0]
   d75e0:	69d8      	ldr	r0, [r3, #28]
}
   d75e2:	2800      	cmp	r0, #0
   d75e4:	bfd4      	ite	le
   d75e6:	2000      	movle	r0, #0
   d75e8:	2001      	movgt	r0, #1
   d75ea:	4770      	bx	lr

000d75ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d75ec:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d75ee:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d75f0:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d75f2:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d75f4:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d75f6:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d75f8:	f7fc fd4b 	bl	d4092 <_Znwj>
   d75fc:	b118      	cbz	r0, d7606 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d75fe:	682b      	ldr	r3, [r5, #0]
   d7600:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7602:	686b      	ldr	r3, [r5, #4]
   d7604:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d7606:	4b03      	ldr	r3, [pc, #12]	; (d7614 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   d7608:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d760a:	4b03      	ldr	r3, [pc, #12]	; (d7618 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d760c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d760e:	60a3      	str	r3, [r4, #8]
      }
   d7610:	4620      	mov	r0, r4
   d7612:	bd38      	pop	{r3, r4, r5, pc}
   d7614:	000d6ec9 	.word	0x000d6ec9
   d7618:	000d6e4d 	.word	0x000d6e4d

000d761c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d761c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d761e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d7620:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d7622:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7624:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d7626:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7628:	f7fc fd33 	bl	d4092 <_Znwj>
   d762c:	b118      	cbz	r0, d7636 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   d762e:	682b      	ldr	r3, [r5, #0]
   d7630:	6003      	str	r3, [r0, #0]
   d7632:	686b      	ldr	r3, [r5, #4]
   d7634:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d7636:	4b03      	ldr	r3, [pc, #12]	; (d7644 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   d7638:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d763a:	4b03      	ldr	r3, [pc, #12]	; (d7648 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d763c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d763e:	60a3      	str	r3, [r4, #8]
      }
   d7640:	4620      	mov	r0, r4
   d7642:	bd38      	pop	{r3, r4, r5, pc}
   d7644:	000d6ee1 	.word	0x000d6ee1
   d7648:	000d6e8b 	.word	0x000d6e8b

000d764c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d764c:	680b      	ldr	r3, [r1, #0]
   d764e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d7650:	b113      	cbz	r3, d7658 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d7652:	685a      	ldr	r2, [r3, #4]
   d7654:	3201      	adds	r2, #1
   d7656:	605a      	str	r2, [r3, #4]
      }
   d7658:	4770      	bx	lr

000d765a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d765a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d765c:	f851 3b04 	ldr.w	r3, [r1], #4
   d7660:	4604      	mov	r4, r0
   d7662:	f840 3b04 	str.w	r3, [r0], #4
   d7666:	f7ff fff1 	bl	d764c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d766a:	6823      	ldr	r3, [r4, #0]
   d766c:	b90b      	cbnz	r3, d7672 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d766e:	f7ff fbe5 	bl	d6e3c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d7672:	4620      	mov	r0, r4
   d7674:	bd10      	pop	{r4, pc}

000d7676 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d7676:	b510      	push	{r4, lr}
   d7678:	f851 3b04 	ldr.w	r3, [r1], #4
   d767c:	4604      	mov	r4, r0
   d767e:	f840 3b04 	str.w	r3, [r0], #4
   d7682:	f7ff ffe3 	bl	d764c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d7686:	4620      	mov	r0, r4
   d7688:	bd10      	pop	{r4, pc}

000d768a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d768a:	b510      	push	{r4, lr}
   d768c:	f851 3b04 	ldr.w	r3, [r1], #4
   d7690:	4604      	mov	r4, r0
   d7692:	f840 3b04 	str.w	r3, [r0], #4
   d7696:	f7ff ffd9 	bl	d764c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d769a:	4620      	mov	r0, r4
   d769c:	bd10      	pop	{r4, pc}

000d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d769e:	b510      	push	{r4, lr}
   d76a0:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d76a2:	6800      	ldr	r0, [r0, #0]
   d76a4:	b128      	cbz	r0, d76b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d76a6:	6843      	ldr	r3, [r0, #4]
   d76a8:	3b01      	subs	r3, #1
   d76aa:	6043      	str	r3, [r0, #4]
   d76ac:	b90b      	cbnz	r3, d76b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d76ae:	f7ff fb38 	bl	d6d22 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d76b2:	4620      	mov	r0, r4
   d76b4:	bd10      	pop	{r4, pc}

000d76b6 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d76b6:	b510      	push	{r4, lr}
   d76b8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d76ba:	3004      	adds	r0, #4
   d76bc:	f7ff ffef 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d76c0:	4620      	mov	r0, r4
   d76c2:	bd10      	pop	{r4, pc}

000d76c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d76c4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d76c6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d76ca:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d76cc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d76d0:	42ae      	cmp	r6, r5
   d76d2:	d004      	beq.n	d76de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d76d4:	1d28      	adds	r0, r5, #4
   d76d6:	f7ff ffe2 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d76da:	3508      	adds	r5, #8
   d76dc:	e7f8      	b.n	d76d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d76de:	6820      	ldr	r0, [r4, #0]
   d76e0:	f7fe fe80 	bl	d63e4 <free>
}
   d76e4:	4620      	mov	r0, r4
   d76e6:	bd70      	pop	{r4, r5, r6, pc}

000d76e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d76e8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d76ea:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d76ee:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d76f0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d76f4:	42ae      	cmp	r6, r5
   d76f6:	d004      	beq.n	d7702 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d76f8:	1d28      	adds	r0, r5, #4
   d76fa:	f7ff ffd0 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d76fe:	3508      	adds	r5, #8
   d7700:	e7f8      	b.n	d76f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d7702:	6820      	ldr	r0, [r4, #0]
   d7704:	f7fe fe6e 	bl	d63e4 <free>
}
   d7708:	4620      	mov	r0, r4
   d770a:	bd70      	pop	{r4, r5, r6, pc}

000d770c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d770c:	b510      	push	{r4, lr}
   d770e:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d7710:	3024      	adds	r0, #36	; 0x24
   d7712:	f7ff ffe9 	bl	d76e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d7716:	f104 0018 	add.w	r0, r4, #24
   d771a:	f7ff ffd3 	bl	d76c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d771e:	bd10      	pop	{r4, pc}

000d7720 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d7720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d7722:	6804      	ldr	r4, [r0, #0]
   d7724:	4606      	mov	r6, r0
   d7726:	b324      	cbz	r4, d7772 <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   d7728:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d772c:	f7ff fbde 	bl	d6eec <_ZNSt14_Function_baseD1Ev>
   d7730:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d7734:	f7ff fbda 	bl	d6eec <_ZNSt14_Function_baseD1Ev>
   d7738:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d773c:	f7ff fbd6 	bl	d6eec <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d7740:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d7744:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d7748:	42af      	cmp	r7, r5
   d774a:	d004      	beq.n	d7756 <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d774c:	1d28      	adds	r0, r5, #4
   d774e:	f7ff ffa6 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7752:	3508      	adds	r5, #8
   d7754:	e7f8      	b.n	d7748 <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d7756:	69a0      	ldr	r0, [r4, #24]
   d7758:	f7fe fe44 	bl	d63e4 <free>
    ~BleLocalDeviceImpl() = default;
   d775c:	f104 000c 	add.w	r0, r4, #12
   d7760:	f7ff ffc2 	bl	d76e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d7764:	4620      	mov	r0, r4
   d7766:	f7ff ffad 	bl	d76c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d776a:	2154      	movs	r1, #84	; 0x54
   d776c:	4620      	mov	r0, r4
   d776e:	f001 fe04 	bl	d937a <_ZdlPvj>
   d7772:	4630      	mov	r0, r6
   d7774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7776 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   d7776:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7778:	b510      	push	{r4, lr}
      if (_M_empty())
   d777a:	b90a      	cbnz	r2, d7780 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d777c:	f001 fe03 	bl	d9386 <_ZSt25__throw_bad_function_callv>
    }
   d7780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7784:	68c3      	ldr	r3, [r0, #12]
   d7786:	4718      	bx	r3

000d7788 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
inline void spark::Vector<T, AllocatorT>::clear() {
   d7788:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d778a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline void spark::Vector<T, AllocatorT>::clear() {
   d778e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d7790:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d7794:	42ae      	cmp	r6, r5
   d7796:	d004      	beq.n	d77a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
   d7798:	1d28      	adds	r0, r5, #4
   d779a:	f7ff ff80 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d779e:	3508      	adds	r5, #8
   d77a0:	e7f8      	b.n	d7794 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
    size_ = 0;
   d77a2:	2300      	movs	r3, #0
   d77a4:	6063      	str	r3, [r4, #4]
}
   d77a6:	bd70      	pop	{r4, r5, r6, pc}

000d77a8 <_ZNK8particle14BleLocalDevice3offEv>:
int BleLocalDevice::off() const {
   d77a8:	b513      	push	{r0, r1, r4, lr}
   d77aa:	4604      	mov	r4, r0
    CHECK(hal_ble_stack_deinit(nullptr));
   d77ac:	2000      	movs	r0, #0
   d77ae:	f7fe fae7 	bl	d5d80 <hal_ble_stack_deinit>
   d77b2:	2800      	cmp	r0, #0
   d77b4:	db0a      	blt.n	d77cc <_ZNK8particle14BleLocalDevice3offEv+0x24>
        WiringBleLock lk;
   d77b6:	a801      	add	r0, sp, #4
   d77b8:	f7ff fbc1 	bl	d6f3e <_ZN8particle3ble13WiringBleLockC1Ev>
        return peers_;
   d77bc:	6820      	ldr	r0, [r4, #0]
        impl()->peers().clear();
   d77be:	3018      	adds	r0, #24
   d77c0:	f7ff ffe2 	bl	d7788 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
        WiringBleLock lk;
   d77c4:	a801      	add	r0, sp, #4
   d77c6:	f7ff fbc2 	bl	d6f4e <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   d77ca:	2000      	movs	r0, #0
}
   d77cc:	b002      	add	sp, #8
   d77ce:	bd10      	pop	{r4, pc}

000d77d0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d77d0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d77d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d77d4:	4604      	mov	r4, r0
   d77d6:	460d      	mov	r5, r1
   d77d8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d77da:	d914      	bls.n	d7806 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d77dc:	4290      	cmp	r0, r2
   d77de:	d213      	bcs.n	d7808 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d77e0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d77e4:	1a75      	subs	r5, r6, r1
   d77e6:	f1a1 0708 	sub.w	r7, r1, #8
   d77ea:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d77ec:	42b7      	cmp	r7, r6
   d77ee:	d018      	beq.n	d7822 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d77f0:	b11c      	cbz	r4, d77fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d77f2:	4631      	mov	r1, r6
   d77f4:	4620      	mov	r0, r4
   d77f6:	f7ff ff48 	bl	d768a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d77fa:	1d30      	adds	r0, r6, #4
   d77fc:	f7ff ff4f 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d7800:	3e08      	subs	r6, #8
   d7802:	3c08      	subs	r4, #8
   d7804:	e7f2      	b.n	d77ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d7806:	d00c      	beq.n	d7822 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7808:	42b5      	cmp	r5, r6
   d780a:	d00a      	beq.n	d7822 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d780c:	b11c      	cbz	r4, d7816 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d780e:	4629      	mov	r1, r5
   d7810:	4620      	mov	r0, r4
   d7812:	f7ff ff3a 	bl	d768a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7816:	1d28      	adds	r0, r5, #4
   d7818:	f7ff ff41 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d781c:	3508      	adds	r5, #8
   d781e:	3408      	adds	r4, #8
   d7820:	e7f2      	b.n	d7808 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d7822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7824 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d7828:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d782c:	4605      	mov	r5, r0
   d782e:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d7830:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d7834:	42a7      	cmp	r7, r4
   d7836:	d103      	bne.n	d7840 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d7838:	2600      	movs	r6, #0
}
   d783a:	4630      	mov	r0, r6
   d783c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d7840:	4641      	mov	r1, r8
   d7842:	4620      	mov	r0, r4
   d7844:	f7ff fdfa 	bl	d743c <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d7848:	4606      	mov	r6, r0
   d784a:	b908      	cbnz	r0, d7850 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d784c:	3408      	adds	r4, #8
   d784e:	e7f1      	b.n	d7834 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d7850:	2c00      	cmp	r4, #0
   d7852:	d0f1      	beq.n	d7838 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d7854:	1d20      	adds	r0, r4, #4
   d7856:	f7ff ff22 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d785a:	e9d5 3200 	ldrd	r3, r2, [r5]
   d785e:	f104 0108 	add.w	r1, r4, #8
   d7862:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7866:	4620      	mov	r0, r4
   d7868:	f7ff ffb2 	bl	d77d0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d786c:	686b      	ldr	r3, [r5, #4]
   d786e:	3b01      	subs	r3, #1
   d7870:	606b      	str	r3, [r5, #4]
    return true;
   d7872:	e7e2      	b.n	d783a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d7874 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   d7874:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7876:	4607      	mov	r7, r0
   d7878:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   d787a:	4668      	mov	r0, sp
   d787c:	f7ff fb5f 	bl	d6f3e <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d7880:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   d7882:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   d7886:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   d788a:	42ac      	cmp	r4, r5
   d788c:	d02b      	beq.n	d78e6 <_ZNK8particle14BleLocalDevice10disconnectEv+0x72>
        hal_ble_conn_info_t connInfo = {};
   d788e:	2224      	movs	r2, #36	; 0x24
   d7890:	2100      	movs	r1, #0
   d7892:	a801      	add	r0, sp, #4
   d7894:	f002 fd36 	bl	da304 <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   d7898:	6823      	ldr	r3, [r4, #0]
   d789a:	2200      	movs	r2, #0
   d789c:	8818      	ldrh	r0, [r3, #0]
   d789e:	a901      	add	r1, sp, #4
   d78a0:	f7fe fac0 	bl	d5e24 <hal_ble_gap_get_connection_info>
   d78a4:	4606      	mov	r6, r0
   d78a6:	b108      	cbz	r0, d78ac <_ZNK8particle14BleLocalDevice10disconnectEv+0x38>
    for (auto& p : impl()->peers()) {
   d78a8:	3408      	adds	r4, #8
   d78aa:	e7ee      	b.n	d788a <_ZNK8particle14BleLocalDevice10disconnectEv+0x16>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   d78ac:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d78b0:	2b01      	cmp	r3, #1
   d78b2:	d1f9      	bne.n	d78a8 <_ZNK8particle14BleLocalDevice10disconnectEv+0x34>
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
   d78b4:	4668      	mov	r0, sp
   d78b6:	f7ff fa59 	bl	d6d6c <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   d78ba:	6823      	ldr	r3, [r4, #0]
   d78bc:	4631      	mov	r1, r6
   d78be:	8818      	ldrh	r0, [r3, #0]
   d78c0:	f7fe fa7e 	bl	d5dc0 <hal_ble_gap_disconnect>
   d78c4:	1e05      	subs	r5, r0, #0
   d78c6:	db08      	blt.n	d78da <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>
            lk.lock();
   d78c8:	4668      	mov	r0, sp
   d78ca:	f7ff fa43 	bl	d6d54 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
        return peers_;
   d78ce:	6838      	ldr	r0, [r7, #0]
            impl()->peers().removeOne(p);
   d78d0:	4621      	mov	r1, r4
   d78d2:	3018      	adds	r0, #24
   d78d4:	f7ff ffa6 	bl	d7824 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
            return SYSTEM_ERROR_NONE;
   d78d8:	4635      	mov	r5, r6
    WiringBleLock lk;
   d78da:	4668      	mov	r0, sp
   d78dc:	f7ff fb37 	bl	d6f4e <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   d78e0:	4628      	mov	r0, r5
   d78e2:	b00b      	add	sp, #44	; 0x2c
   d78e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   d78e6:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   d78ea:	e7f6      	b.n	d78da <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>

000d78ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d78ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d78ee:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d78f0:	6846      	ldr	r6, [r0, #4]
   d78f2:	4668      	mov	r0, sp
   d78f4:	f7ff fec9 	bl	d768a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d78f8:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d78fc:	429f      	cmp	r7, r3
   d78fe:	db12      	blt.n	d7926 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d7900:	3701      	adds	r7, #1
        if (n > 0) {
   d7902:	2f00      	cmp	r7, #0
   d7904:	dd29      	ble.n	d795a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d7906:	00f8      	lsls	r0, r7, #3
   d7908:	f7fe fd64 	bl	d63d4 <malloc>
            if (!d) {
   d790c:	4605      	mov	r5, r0
   d790e:	b1f0      	cbz	r0, d794e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d7910:	e9d4 1200 	ldrd	r1, r2, [r4]
   d7914:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7918:	f7ff ff5a 	bl	d77d0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d791c:	6820      	ldr	r0, [r4, #0]
   d791e:	f7fe fd61 	bl	d63e4 <free>
        data_ = d;
   d7922:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d7924:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d7926:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7928:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d792a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d792e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7932:	4631      	mov	r1, r6
   d7934:	f106 0008 	add.w	r0, r6, #8
   d7938:	f7ff ff4a 	bl	d77d0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d793c:	b11e      	cbz	r6, d7946 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d793e:	4669      	mov	r1, sp
   d7940:	4630      	mov	r0, r6
   d7942:	f7ff fea2 	bl	d768a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d7946:	6863      	ldr	r3, [r4, #4]
   d7948:	3301      	adds	r3, #1
   d794a:	6063      	str	r3, [r4, #4]
    return true;
   d794c:	2501      	movs	r5, #1
   d794e:	a801      	add	r0, sp, #4
   d7950:	f7ff fea5 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7954:	4628      	mov	r0, r5
   d7956:	b003      	add	sp, #12
   d7958:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d795a:	2500      	movs	r5, #0
   d795c:	e7de      	b.n	d791c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>
	...

000d7960 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d7960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7964:	4605      	mov	r5, r0
   d7966:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d7968:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d796a:	460c      	mov	r4, r1
        WiringBleLock lk;
   d796c:	f7ff fae7 	bl	d6f3e <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d7970:	682e      	ldr	r6, [r5, #0]
   d7972:	2e04      	cmp	r6, #4
   d7974:	d06b      	beq.n	d7a4e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d7976:	d807      	bhi.n	d7988 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d7978:	2e03      	cmp	r6, #3
   d797a:	d028      	beq.n	d79ce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d797c:	a803      	add	r0, sp, #12
   d797e:	f7ff fae6 	bl	d6f4e <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d7982:	b00e      	add	sp, #56	; 0x38
   d7984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d7988:	f1a6 030c 	sub.w	r3, r6, #12
   d798c:	2b03      	cmp	r3, #3
   d798e:	d8f5      	bhi.n	d797c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d7990:	89a9      	ldrh	r1, [r5, #12]
   d7992:	4620      	mov	r0, r4
   d7994:	f7ff fc72 	bl	d727c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d7998:	4607      	mov	r7, r0
   d799a:	2800      	cmp	r0, #0
   d799c:	d0ee      	beq.n	d797c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d799e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d79a0:	2b00      	cmp	r3, #0
   d79a2:	d0eb      	beq.n	d797c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d79a4:	2210      	movs	r2, #16
   d79a6:	2100      	movs	r1, #0
   d79a8:	a807      	add	r0, sp, #28
   d79aa:	f002 fcab 	bl	da304 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d79ae:	2e0d      	cmp	r6, #13
                        };
   d79b0:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d79b2:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d79b6:	f040 8092 	bne.w	d7ade <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d79ba:	686b      	ldr	r3, [r5, #4]
   d79bc:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d79be:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d79c0:	9308      	str	r3, [sp, #32]
   d79c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d79c4:	a906      	add	r1, sp, #24
   d79c6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d79ca:	4798      	blx	r3
   d79cc:	e7d6      	b.n	d797c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d79ce:	a804      	add	r0, sp, #16
   d79d0:	f7ff fd00 	bl	d73d4 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d79d4:	9b04      	ldr	r3, [sp, #16]
   d79d6:	89aa      	ldrh	r2, [r5, #12]
   d79d8:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d79da:	6869      	ldr	r1, [r5, #4]
   d79dc:	9804      	ldr	r0, [sp, #16]
   d79de:	3108      	adds	r1, #8
   d79e0:	3002      	adds	r0, #2
   d79e2:	f7ff fabc 	bl	d6f5e <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d79e6:	a904      	add	r1, sp, #16
   d79e8:	a806      	add	r0, sp, #24
   d79ea:	f7ff fe4e 	bl	d768a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d79ee:	a906      	add	r1, sp, #24
   d79f0:	f104 0018 	add.w	r0, r4, #24
   d79f4:	f7ff ff7a 	bl	d78ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d79f8:	4605      	mov	r5, r0
   d79fa:	a807      	add	r0, sp, #28
   d79fc:	f7ff fe4f 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7a00:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d7a02:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d7a04:	b98d      	cbnz	r5, d7a2a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d7a06:	4b3e      	ldr	r3, [pc, #248]	; (d7b00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d7a08:	493e      	ldr	r1, [pc, #248]	; (d7b04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d7a0a:	9300      	str	r3, [sp, #0]
   d7a0c:	2032      	movs	r0, #50	; 0x32
   d7a0e:	462b      	mov	r3, r5
   d7a10:	aa06      	add	r2, sp, #24
   d7a12:	9507      	str	r5, [sp, #28]
   d7a14:	f7fe fbd8 	bl	d61c8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d7a18:	9b04      	ldr	r3, [sp, #16]
   d7a1a:	4629      	mov	r1, r5
   d7a1c:	8818      	ldrh	r0, [r3, #0]
   d7a1e:	f7fe f9cf 	bl	d5dc0 <hal_ble_gap_disconnect>
   d7a22:	a805      	add	r0, sp, #20
   d7a24:	f7ff fe3b 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7a28:	e7a8      	b.n	d797c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d7a2a:	4a37      	ldr	r2, [pc, #220]	; (d7b08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d7a2c:	9200      	str	r2, [sp, #0]
   d7a2e:	2300      	movs	r3, #0
   d7a30:	4934      	ldr	r1, [pc, #208]	; (d7b04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d7a32:	9307      	str	r3, [sp, #28]
   d7a34:	aa06      	add	r2, sp, #24
   d7a36:	2001      	movs	r0, #1
   d7a38:	f7fe fbc6 	bl	d61c8 <log_message>
                if (impl->connectedCallback_) {
   d7a3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d7a3e:	2b00      	cmp	r3, #0
   d7a40:	d0ef      	beq.n	d7a22 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d7a42:	a904      	add	r1, sp, #16
   d7a44:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7a48:	f7ff fe95 	bl	d7776 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d7a4c:	e7e9      	b.n	d7a22 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d7a4e:	89a9      	ldrh	r1, [r5, #12]
   d7a50:	4620      	mov	r0, r4
   d7a52:	f7ff fc13 	bl	d727c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d7a56:	4606      	mov	r6, r0
   d7a58:	2800      	cmp	r0, #0
   d7a5a:	d08f      	beq.n	d797c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d7a5c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d7a5e:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d7a62:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7a66:	802a      	strh	r2, [r5, #0]
   d7a68:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d7a6c:	4299      	cmp	r1, r3
   d7a6e:	d003      	beq.n	d7a78 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d7a70:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d7a74:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d7a76:	e7f9      	b.n	d7a6c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d7a78:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d7a7c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d7a80:	45b8      	cmp	r8, r7
   d7a82:	d004      	beq.n	d7a8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d7a84:	1d38      	adds	r0, r7, #4
   d7a86:	f7ff fe0a 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7a8a:	3708      	adds	r7, #8
   d7a8c:	e7f8      	b.n	d7a80 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d7a8e:	2300      	movs	r3, #0
   d7a90:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d7a92:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d7a96:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d7a9a:	45b8      	cmp	r8, r7
   d7a9c:	d004      	beq.n	d7aa8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d7a9e:	1d38      	adds	r0, r7, #4
   d7aa0:	f7ff fdfd 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7aa4:	3708      	adds	r7, #8
   d7aa6:	e7f8      	b.n	d7a9a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d7aa8:	2300      	movs	r3, #0
   d7aaa:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d7aac:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d7aae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7ab0:	b123      	cbz	r3, d7abc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d7ab2:	4631      	mov	r1, r6
   d7ab4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d7ab8:	f7ff fe5d 	bl	d7776 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d7abc:	2300      	movs	r3, #0
   d7abe:	2220      	movs	r2, #32
   d7ac0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d7ac4:	4a11      	ldr	r2, [pc, #68]	; (d7b0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d7ac6:	9200      	str	r2, [sp, #0]
   d7ac8:	490e      	ldr	r1, [pc, #56]	; (d7b04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d7aca:	aa06      	add	r2, sp, #24
   d7acc:	2001      	movs	r0, #1
   d7ace:	f7fe fb7b 	bl	d61c8 <log_message>
                    impl->peers_.removeOne(*peer);
   d7ad2:	4631      	mov	r1, r6
   d7ad4:	f104 0018 	add.w	r0, r4, #24
   d7ad8:	f7ff fea4 	bl	d7824 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d7adc:	e74e      	b.n	d797c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d7ade:	2e0f      	cmp	r6, #15
   d7ae0:	f47f af6f 	bne.w	d79c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d7ae4:	686b      	ldr	r3, [r5, #4]
   d7ae6:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d7ae8:	7a2b      	ldrb	r3, [r5, #8]
   d7aea:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d7aee:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d7af2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d7af6:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d7afa:	2308      	movs	r3, #8
   d7afc:	e760      	b.n	d79c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d7afe:	bf00      	nop
   d7b00:	000dabf5 	.word	0x000dabf5
   d7b04:	000dabb6 	.word	0x000dabb6
   d7b08:	000dac1b 	.word	0x000dac1b
   d7b0c:	000dac38 	.word	0x000dac38

000d7b10 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
   d7b10:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   d7b12:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   d7b14:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7b16:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   d7b1a:	e9c1 3300 	strd	r3, r3, [r1]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7b1e:	6823      	ldr	r3, [r4, #0]
   d7b20:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b22:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7b24:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   d7b26:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   d7b28:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   d7b2a:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   d7b2c:	f7ff fdb7 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   d7b30:	4620      	mov	r0, r4
   d7b32:	b002      	add	sp, #8
   d7b34:	bd10      	pop	{r4, pc}

000d7b36 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d7b36:	b513      	push	{r0, r1, r4, lr}
   d7b38:	460b      	mov	r3, r1
   d7b3a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b3c:	e9d0 0100 	ldrd	r0, r1, [r0]
   d7b40:	466c      	mov	r4, sp
   d7b42:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7b46:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7b4a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7b4e:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7b52:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7b56:	b002      	add	sp, #8
   d7b58:	bd10      	pop	{r4, pc}

000d7b5a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   d7b5a:	b538      	push	{r3, r4, r5, lr}
   d7b5c:	4605      	mov	r5, r0
   d7b5e:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d7b60:	f7ff ffe9 	bl	d7b36 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b64:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7b66:	68a2      	ldr	r2, [r4, #8]
   d7b68:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b6a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b6c:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7b6e:	68e2      	ldr	r2, [r4, #12]
   d7b70:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b72:	60e3      	str	r3, [r4, #12]
      }
   d7b74:	bd38      	pop	{r3, r4, r5, pc}

000d7b76 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>:
      operator=(function&& __x) noexcept
   d7b76:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7b78:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d7b7a:	4604      	mov	r4, r0
   d7b7c:	4608      	mov	r0, r1
	__x.swap(*this);
   d7b7e:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d7b80:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d7b82:	f7ff ffea 	bl	d7b5a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   d7b86:	4621      	mov	r1, r4
   d7b88:	4668      	mov	r0, sp
   d7b8a:	f7ff ffe6 	bl	d7b5a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   d7b8e:	4668      	mov	r0, sp
   d7b90:	f7ff f9ac 	bl	d6eec <_ZNSt14_Function_baseD1Ev>
      }
   d7b94:	4620      	mov	r0, r4
   d7b96:	b004      	add	sp, #16
   d7b98:	bd10      	pop	{r4, pc}

000d7b9a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   d7b9a:	b570      	push	{r4, r5, r6, lr}
   d7b9c:	460e      	mov	r6, r1
   d7b9e:	b088      	sub	sp, #32
   d7ba0:	4604      	mov	r4, r0
   d7ba2:	9201      	str	r2, [sp, #4]
   d7ba4:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   d7ba6:	f7ff fb49 	bl	d723c <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   d7baa:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   d7bac:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   d7bae:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   d7bb0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d7bb4:	f7fe ff61 	bl	d6a7a <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d7bb8:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   d7bbc:	b185      	cbz	r5, d7be0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x46>
   d7bbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7bc0:	9502      	str	r5, [sp, #8]
   d7bc2:	a902      	add	r1, sp, #8
   d7bc4:	a804      	add	r0, sp, #16
   d7bc6:	9303      	str	r3, [sp, #12]
   d7bc8:	f7ff fd10 	bl	d75ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   d7bcc:	a904      	add	r1, sp, #16
   d7bce:	4630      	mov	r0, r6
   d7bd0:	f7ff ffd1 	bl	d7b76 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   d7bd4:	a804      	add	r0, sp, #16
   d7bd6:	f7ff f989 	bl	d6eec <_ZNSt14_Function_baseD1Ev>
    }
   d7bda:	4620      	mov	r0, r4
   d7bdc:	b008      	add	sp, #32
   d7bde:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   d7be0:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   d7be2:	e7f3      	b.n	d7bcc <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000d7be4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d7be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7be8:	b086      	sub	sp, #24
   d7bea:	4607      	mov	r7, r0
   d7bec:	461d      	mov	r5, r3
   d7bee:	2068      	movs	r0, #104	; 0x68
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d7bf0:	2300      	movs	r3, #0
   d7bf2:	4689      	mov	r9, r1
   d7bf4:	4692      	mov	sl, r2
   d7bf6:	9304      	str	r3, [sp, #16]
   d7bf8:	f7fc fa4b 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d7bfc:	1e06      	subs	r6, r0, #0
   d7bfe:	f106 080c 	add.w	r8, r6, #12
   d7c02:	d01d      	beq.n	d7c40 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   d7c04:	2301      	movs	r3, #1
	: _M_impl(__a)
   d7c06:	4634      	mov	r4, r6
      : _M_use_count(1), _M_weak_count(1) { }
   d7c08:	e9c6 3301 	strd	r3, r3, [r6, #4]
	: _M_impl(__a)
   d7c0c:	4b15      	ldr	r3, [pc, #84]	; (d7c64 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x80>)
   d7c0e:	f844 3b20 	str.w	r3, [r4], #32
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d7c12:	f89a 3000 	ldrb.w	r3, [sl]
    value_ = flags.value_;
   d7c16:	f88d 300c 	strb.w	r3, [sp, #12]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   d7c1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d7c1c:	9300      	str	r3, [sp, #0]
   d7c1e:	464a      	mov	r2, r9
   d7c20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7c22:	a903      	add	r1, sp, #12
   d7c24:	4640      	mov	r0, r8
   d7c26:	f7ff ffb8 	bl	d7b9a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   d7c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7c2e:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
   d7c30:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        charUuid_ = charUuid;
   d7c32:	6023      	str	r3, [r4, #0]
        svcUuid_ = svcUuid;
   d7c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7c36:	f106 0434 	add.w	r4, r6, #52	; 0x34
   d7c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7c3c:	682b      	ldr	r3, [r5, #0]
   d7c3e:	6023      	str	r3, [r4, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d7c40:	a904      	add	r1, sp, #16
   d7c42:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
   d7c44:	e9cd 8604 	strd	r8, r6, [sp, #16]
   d7c48:	f7ff ff62 	bl	d7b10 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
      ~__shared_ptr() = default;
   d7c4c:	a805      	add	r0, sp, #20
   d7c4e:	f7ff fd26 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d7c52:	6839      	ldr	r1, [r7, #0]
   d7c54:	b919      	cbnz	r1, d7c5e <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x7a>
        SPARK_ASSERT(false);
   d7c56:	4a04      	ldr	r2, [pc, #16]	; (d7c68 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>)
   d7c58:	200a      	movs	r0, #10
   d7c5a:	f7fe faad 	bl	d61b8 <panic_>
}
   d7c5e:	b006      	add	sp, #24
   d7c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7c64:	000dacb4 	.word	0x000dacb4
   d7c68:	000d5d01 	.word	0x000d5d01

000d7c6c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   d7c6c:	b538      	push	{r3, r4, r5, lr}
   d7c6e:	4605      	mov	r5, r0
   d7c70:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d7c72:	f7ff ff60 	bl	d7b36 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7c76:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7c78:	68a2      	ldr	r2, [r4, #8]
   d7c7a:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7c7c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7c7e:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7c80:	68e2      	ldr	r2, [r4, #12]
   d7c82:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7c84:	60e3      	str	r3, [r4, #12]
      }
   d7c86:	bd38      	pop	{r3, r4, r5, pc}

000d7c88 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEaSEOS5_>:
      operator=(function&& __x) noexcept
   d7c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7c8a:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d7c8c:	4604      	mov	r4, r0
   d7c8e:	4608      	mov	r0, r1
	__x.swap(*this);
   d7c90:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d7c92:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d7c94:	f7ff ffea 	bl	d7c6c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   d7c98:	4621      	mov	r1, r4
   d7c9a:	4668      	mov	r0, sp
   d7c9c:	f7ff ffe6 	bl	d7c6c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   d7ca0:	4668      	mov	r0, sp
   d7ca2:	f7ff f923 	bl	d6eec <_ZNSt14_Function_baseD1Ev>
      }
   d7ca6:	4620      	mov	r0, r4
   d7ca8:	b004      	add	sp, #16
   d7caa:	bd10      	pop	{r4, pc}

000d7cac <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   d7cac:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   d7cae:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   d7cb0:	b086      	sub	sp, #24
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   d7cb2:	3424      	adds	r4, #36	; 0x24
   d7cb4:	b171      	cbz	r1, d7cd4 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x28>
   d7cb6:	e9cd 1200 	strd	r1, r2, [sp]
   d7cba:	a802      	add	r0, sp, #8
   d7cbc:	4669      	mov	r1, sp
   d7cbe:	f7ff fcad 	bl	d761c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
   d7cc2:	a902      	add	r1, sp, #8
   d7cc4:	4620      	mov	r0, r4
   d7cc6:	f7ff ffdf 	bl	d7c88 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEaSEOS5_>
    class function<_Res(_ArgTypes...)>
   d7cca:	a802      	add	r0, sp, #8
   d7ccc:	f7ff f90e 	bl	d6eec <_ZNSt14_Function_baseD1Ev>
}
   d7cd0:	b006      	add	sp, #24
   d7cd2:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   d7cd4:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   d7cd6:	e7f4      	b.n	d7cc2 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000d7cd8 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   d7cd8:	b510      	push	{r4, lr}
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   d7cda:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   d7cdc:	b086      	sub	sp, #24
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   d7cde:	3434      	adds	r4, #52	; 0x34
   d7ce0:	b171      	cbz	r1, d7d00 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x28>
   d7ce2:	e9cd 1200 	strd	r1, r2, [sp]
   d7ce6:	a802      	add	r0, sp, #8
   d7ce8:	4669      	mov	r1, sp
   d7cea:	f7ff fc97 	bl	d761c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
   d7cee:	a902      	add	r1, sp, #8
   d7cf0:	4620      	mov	r0, r4
   d7cf2:	f7ff ffc9 	bl	d7c88 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEaSEOS5_>
    class function<_Res(_ArgTypes...)>
   d7cf6:	a802      	add	r0, sp, #8
   d7cf8:	f7ff f8f8 	bl	d6eec <_ZNSt14_Function_baseD1Ev>
}
   d7cfc:	b006      	add	sp, #24
   d7cfe:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   d7d00:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   d7d02:	e7f4      	b.n	d7cee <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000d7d04 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d7d04:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7d08:	4604      	mov	r4, r0
   d7d0a:	460d      	mov	r5, r1
   d7d0c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7d0e:	d914      	bls.n	d7d3a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7d10:	4290      	cmp	r0, r2
   d7d12:	d213      	bcs.n	d7d3c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d7d14:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d7d18:	1a75      	subs	r5, r6, r1
   d7d1a:	f1a1 0708 	sub.w	r7, r1, #8
   d7d1e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d7d20:	42b7      	cmp	r7, r6
   d7d22:	d018      	beq.n	d7d56 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7d24:	b11c      	cbz	r4, d7d2e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default;
   d7d26:	4631      	mov	r1, r6
   d7d28:	4620      	mov	r0, r4
   d7d2a:	f7ff fca4 	bl	d7676 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7d2e:	1d30      	adds	r0, r6, #4
   d7d30:	f7ff fcb5 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d7d34:	3e08      	subs	r6, #8
   d7d36:	3c08      	subs	r4, #8
   d7d38:	e7f2      	b.n	d7d20 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d7d3a:	d00c      	beq.n	d7d56 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7d3c:	42b5      	cmp	r5, r6
   d7d3e:	d00a      	beq.n	d7d56 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7d40:	b11c      	cbz	r4, d7d4a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7d42:	4629      	mov	r1, r5
   d7d44:	4620      	mov	r0, r4
   d7d46:	f7ff fc96 	bl	d7676 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7d4a:	1d28      	adds	r0, r5, #4
   d7d4c:	f7ff fca7 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d7d50:	3508      	adds	r5, #8
   d7d52:	3408      	adds	r4, #8
   d7d54:	e7f2      	b.n	d7d3c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d7d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7d58 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d7d58:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d7d5a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d7d5c:	4605      	mov	r5, r0
        if (n > 0) {
   d7d5e:	dd11      	ble.n	d7d84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d7d60:	00f0      	lsls	r0, r6, #3
   d7d62:	f7fe fb37 	bl	d63d4 <malloc>
            if (!d) {
   d7d66:	4604      	mov	r4, r0
   d7d68:	b158      	cbz	r0, d7d82 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d7d6a:	e9d5 1200 	ldrd	r1, r2, [r5]
   d7d6e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7d72:	f7ff ffc7 	bl	d7d04 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d7d76:	6828      	ldr	r0, [r5, #0]
   d7d78:	f7fe fb34 	bl	d63e4 <free>
        data_ = d;
   d7d7c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7d7e:	60ae      	str	r6, [r5, #8]
        return true;
   d7d80:	2001      	movs	r0, #1
    }
   d7d82:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d7d84:	2400      	movs	r4, #0
   d7d86:	e7f6      	b.n	d7d76 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d7d88 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7d88:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7d8a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7d8c:	6845      	ldr	r5, [r0, #4]
   d7d8e:	4668      	mov	r0, sp
   d7d90:	f7ff fc71 	bl	d7676 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7d94:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d7d98:	4299      	cmp	r1, r3
   d7d9a:	da10      	bge.n	d7dbe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d7d9c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7d9e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d7da0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d7da4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7da8:	4629      	mov	r1, r5
   d7daa:	f105 0008 	add.w	r0, r5, #8
   d7dae:	f7ff ffa9 	bl	d7d04 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d7db2:	b98d      	cbnz	r5, d7dd8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d7db4:	6863      	ldr	r3, [r4, #4]
   d7db6:	3301      	adds	r3, #1
   d7db8:	6063      	str	r3, [r4, #4]
    return true;
   d7dba:	2601      	movs	r6, #1
   d7dbc:	e006      	b.n	d7dcc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7dbe:	3101      	adds	r1, #1
   d7dc0:	4620      	mov	r0, r4
   d7dc2:	f7ff ffc9 	bl	d7d58 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7dc6:	4606      	mov	r6, r0
   d7dc8:	2800      	cmp	r0, #0
   d7dca:	d1e7      	bne.n	d7d9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d7dcc:	a801      	add	r0, sp, #4
   d7dce:	f7ff fc66 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7dd2:	4630      	mov	r0, r6
   d7dd4:	b002      	add	sp, #8
   d7dd6:	bd70      	pop	{r4, r5, r6, pc}
   d7dd8:	4669      	mov	r1, sp
   d7dda:	4628      	mov	r0, r5
   d7ddc:	f7ff fc4b 	bl	d7676 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7de0:	e7e8      	b.n	d7db4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d7de2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d7de2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7de6:	4604      	mov	r4, r0
   d7de8:	460d      	mov	r5, r1
   d7dea:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7dec:	d914      	bls.n	d7e18 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7dee:	4290      	cmp	r0, r2
   d7df0:	d213      	bcs.n	d7e1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d7df2:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d7df6:	1a75      	subs	r5, r6, r1
   d7df8:	f1a1 0708 	sub.w	r7, r1, #8
   d7dfc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d7dfe:	42b7      	cmp	r7, r6
   d7e00:	d018      	beq.n	d7e34 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7e02:	b11c      	cbz	r4, d7e0c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d7e04:	4631      	mov	r1, r6
   d7e06:	4620      	mov	r0, r4
   d7e08:	f7ff fc27 	bl	d765a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7e0c:	1d30      	adds	r0, r6, #4
   d7e0e:	f7ff fc46 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d7e12:	3e08      	subs	r6, #8
   d7e14:	3c08      	subs	r4, #8
   d7e16:	e7f2      	b.n	d7dfe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d7e18:	d00c      	beq.n	d7e34 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7e1a:	42b5      	cmp	r5, r6
   d7e1c:	d00a      	beq.n	d7e34 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7e1e:	b11c      	cbz	r4, d7e28 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7e20:	4629      	mov	r1, r5
   d7e22:	4620      	mov	r0, r4
   d7e24:	f7ff fc19 	bl	d765a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7e28:	1d28      	adds	r0, r5, #4
   d7e2a:	f7ff fc38 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d7e2e:	3508      	adds	r5, #8
   d7e30:	3408      	adds	r4, #8
   d7e32:	e7f2      	b.n	d7e1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d7e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7e36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d7e36:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d7e38:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d7e3a:	4605      	mov	r5, r0
        if (n > 0) {
   d7e3c:	dd11      	ble.n	d7e62 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d7e3e:	00f0      	lsls	r0, r6, #3
   d7e40:	f7fe fac8 	bl	d63d4 <malloc>
            if (!d) {
   d7e44:	4604      	mov	r4, r0
   d7e46:	b158      	cbz	r0, d7e60 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d7e48:	e9d5 1200 	ldrd	r1, r2, [r5]
   d7e4c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7e50:	f7ff ffc7 	bl	d7de2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d7e54:	6828      	ldr	r0, [r5, #0]
   d7e56:	f7fe fac5 	bl	d63e4 <free>
        data_ = d;
   d7e5a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7e5c:	60ae      	str	r6, [r5, #8]
        return true;
   d7e5e:	2001      	movs	r0, #1
    }
   d7e60:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d7e62:	2400      	movs	r4, #0
   d7e64:	e7f6      	b.n	d7e54 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d7e66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7e66:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7e68:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7e6a:	6845      	ldr	r5, [r0, #4]
   d7e6c:	4668      	mov	r0, sp
   d7e6e:	f7ff fbf4 	bl	d765a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7e72:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d7e76:	4299      	cmp	r1, r3
   d7e78:	da10      	bge.n	d7e9c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d7e7a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7e7c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d7e7e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d7e82:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7e86:	4629      	mov	r1, r5
   d7e88:	f105 0008 	add.w	r0, r5, #8
   d7e8c:	f7ff ffa9 	bl	d7de2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d7e90:	b98d      	cbnz	r5, d7eb6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d7e92:	6863      	ldr	r3, [r4, #4]
   d7e94:	3301      	adds	r3, #1
   d7e96:	6063      	str	r3, [r4, #4]
    return true;
   d7e98:	2601      	movs	r6, #1
   d7e9a:	e006      	b.n	d7eaa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7e9c:	3101      	adds	r1, #1
   d7e9e:	4620      	mov	r0, r4
   d7ea0:	f7ff ffc9 	bl	d7e36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7ea4:	4606      	mov	r6, r0
   d7ea6:	2800      	cmp	r0, #0
   d7ea8:	d1e7      	bne.n	d7e7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d7eaa:	a801      	add	r0, sp, #4
   d7eac:	f7ff fbf7 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7eb0:	4630      	mov	r0, r6
   d7eb2:	b002      	add	sp, #8
   d7eb4:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d7eb6:	4669      	mov	r1, sp
   d7eb8:	4628      	mov	r0, r5
   d7eba:	f7ff fbce 	bl	d765a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7ebe:	e7e8      	b.n	d7e92 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d7ec0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d7ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7ec4:	4617      	mov	r7, r2
   d7ec6:	b0a1      	sub	sp, #132	; 0x84
   d7ec8:	4680      	mov	r8, r0
    WiringBleLock lk;
   d7eca:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d7ecc:	460e      	mov	r6, r1
    WiringBleLock lk;
   d7ece:	f7ff f836 	bl	d6f3e <_ZN8particle3ble13WiringBleLockC1Ev>
   d7ed2:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d7ed4:	7923      	ldrb	r3, [r4, #4]
   d7ed6:	b953      	cbnz	r3, d7eee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d7ed8:	4639      	mov	r1, r7
   d7eda:	4640      	mov	r0, r8
   d7edc:	f7ff fbbd 	bl	d765a <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d7ee0:	a80a      	add	r0, sp, #40	; 0x28
   d7ee2:	f7ff f834 	bl	d6f4e <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d7ee6:	4640      	mov	r0, r8
   d7ee8:	b021      	add	sp, #132	; 0x84
   d7eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7eee:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   d7ef0:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   d7ef4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d7ef8:	9303      	str	r3, [sp, #12]
   d7efa:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d7efe:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d7f02:	9b03      	ldr	r3, [sp, #12]
   d7f04:	429d      	cmp	r5, r3
   d7f06:	d021      	beq.n	d7f4c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d7f08:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   d7f0c:	4658      	mov	r0, fp
   d7f0e:	f109 0114 	add.w	r1, r9, #20
   d7f12:	f7ff f8cc 	bl	d70ae <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d7f16:	b1b8      	cbz	r0, d7f48 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d7f18:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d7f1c:	4650      	mov	r0, sl
   d7f1e:	f7ff f8c6 	bl	d70ae <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d7f22:	b188      	cbz	r0, d7f48 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d7f24:	6823      	ldr	r3, [r4, #0]
   d7f26:	f8d9 2000 	ldr.w	r2, [r9]
   d7f2a:	4053      	eors	r3, r2
   d7f2c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d7f30:	d10a      	bne.n	d7f48 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d7f32:	2220      	movs	r2, #32
   d7f34:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d7f38:	4a5e      	ldr	r2, [pc, #376]	; (d80b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d7f3a:	9200      	str	r2, [sp, #0]
   d7f3c:	aa15      	add	r2, sp, #84	; 0x54
   d7f3e:	495e      	ldr	r1, [pc, #376]	; (d80b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d7f40:	2032      	movs	r0, #50	; 0x32
   d7f42:	f7fe f941 	bl	d61c8 <log_message>
   d7f46:	e7c7      	b.n	d7ed8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d7f48:	3508      	adds	r5, #8
   d7f4a:	e7da      	b.n	d7f02 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d7f4c:	4650      	mov	r0, sl
   d7f4e:	f7ff f879 	bl	d7044 <_ZNK8particle7BleUuid7isValidEv>
   d7f52:	b960      	cbnz	r0, d7f6e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   d7f54:	4959      	ldr	r1, [pc, #356]	; (d80bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   d7f56:	2201      	movs	r2, #1
   d7f58:	a815      	add	r0, sp, #84	; 0x54
   d7f5a:	ad15      	add	r5, sp, #84	; 0x54
   d7f5c:	f7ff f849 	bl	d6ff2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d7f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7f62:	46d4      	mov	ip, sl
   d7f64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d7f68:	682b      	ldr	r3, [r5, #0]
   d7f6a:	f8cc 3000 	str.w	r3, [ip]
   d7f6e:	6833      	ldr	r3, [r6, #0]
   d7f70:	e9d3 5300 	ldrd	r5, r3, [r3]
   d7f74:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d7f78:	455d      	cmp	r5, fp
   d7f7a:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   d7f7c:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   d7f7e:	d06e      	beq.n	d805e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d7f80:	f855 0b08 	ldr.w	r0, [r5], #8
   d7f84:	f7ff f893 	bl	d70ae <_ZNK8particle7BleUuideqERKS0_>
   d7f88:	2800      	cmp	r0, #0
   d7f8a:	d0f5      	beq.n	d7f78 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   d7f8c:	f104 0a14 	add.w	sl, r4, #20
   d7f90:	4650      	mov	r0, sl
   d7f92:	f7ff f857 	bl	d7044 <_ZNK8particle7BleUuid7isValidEv>
   d7f96:	b988      	cbnz	r0, d7fbc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   d7f98:	4b49      	ldr	r3, [pc, #292]	; (d80c0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d7f9a:	4948      	ldr	r1, [pc, #288]	; (d80bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   d7f9c:	881a      	ldrh	r2, [r3, #0]
   d7f9e:	3201      	adds	r2, #1
   d7fa0:	b292      	uxth	r2, r2
   d7fa2:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d7fa4:	a815      	add	r0, sp, #84	; 0x54
   d7fa6:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   d7fa8:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d7faa:	f7ff f841 	bl	d7030 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d7fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7fb0:	46d4      	mov	ip, sl
   d7fb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d7fb6:	682b      	ldr	r3, [r5, #0]
   d7fb8:	f8cc 3000 	str.w	r3, [ip]
    hal_ble_char_init_t charInit = {};
   d7fbc:	2228      	movs	r2, #40	; 0x28
   d7fbe:	2100      	movs	r1, #0
   d7fc0:	a816      	add	r0, sp, #88	; 0x58
   d7fc2:	f002 f99f 	bl	da304 <memset>
    charInit.version = BLE_API_VERSION;
   d7fc6:	4b3f      	ldr	r3, [pc, #252]	; (d80c4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d7fc8:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d7fca:	4651      	mov	r1, sl
   d7fcc:	a804      	add	r0, sp, #16
   d7fce:	f7ff f84b 	bl	d7068 <_ZN8particle7BleUuid7halUUIDEv>
   d7fd2:	ab04      	add	r3, sp, #16
   d7fd4:	aa18      	add	r2, sp, #96	; 0x60
   d7fd6:	f10d 0c20 	add.w	ip, sp, #32
   d7fda:	6818      	ldr	r0, [r3, #0]
   d7fdc:	6859      	ldr	r1, [r3, #4]
   d7fde:	4615      	mov	r5, r2
   d7fe0:	c503      	stmia	r5!, {r0, r1}
   d7fe2:	3308      	adds	r3, #8
   d7fe4:	4563      	cmp	r3, ip
   d7fe6:	462a      	mov	r2, r5
   d7fe8:	d1f7      	bne.n	d7fda <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   d7fea:	6818      	ldr	r0, [r3, #0]
   d7fec:	6028      	str	r0, [r5, #0]
    charInit.properties = charImpl->properties().value();
   d7fee:	7923      	ldrb	r3, [r4, #4]
   d7ff0:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d7ff4:	f8d9 3000 	ldr.w	r3, [r9]
   d7ff8:	8a9b      	ldrh	r3, [r3, #20]
   d7ffa:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d7ffe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d8000:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d8002:	4b31      	ldr	r3, [pc, #196]	; (d80c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d8004:	2200      	movs	r2, #0
   d8006:	1da1      	adds	r1, r4, #6
   d8008:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d800a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d800e:	f7fd ff13 	bl	d5e38 <hal_ble_gatt_server_add_characteristic>
   d8012:	2800      	cmp	r0, #0
   d8014:	f47f af60 	bne.w	d7ed8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   d8018:	2301      	movs	r3, #1
   d801a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d801c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d801e:	4639      	mov	r1, r7
        return characteristics_;
   d8020:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d8022:	a80d      	add	r0, sp, #52	; 0x34
   d8024:	f7ff fb19 	bl	d765a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d8028:	4620      	mov	r0, r4
   d802a:	a90d      	add	r1, sp, #52	; 0x34
   d802c:	f7ff ff1b 	bl	d7e66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d8030:	4604      	mov	r4, r0
   d8032:	a80e      	add	r0, sp, #56	; 0x38
   d8034:	f7ff fb33 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8038:	2c00      	cmp	r4, #0
   d803a:	f47f af4d 	bne.w	d7ed8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d803e:	2320      	movs	r3, #32
   d8040:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d8044:	4b21      	ldr	r3, [pc, #132]	; (d80cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   d8046:	9300      	str	r3, [sp, #0]
   d8048:	aa0d      	add	r2, sp, #52	; 0x34
   d804a:	4623      	mov	r3, r4
   d804c:	e777      	b.n	d7f3e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d804e:	4639      	mov	r1, r7
   d8050:	4640      	mov	r0, r8
   d8052:	f7ff fb02 	bl	d765a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d8056:	a80c      	add	r0, sp, #48	; 0x30
   d8058:	f7ff fb21 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d805c:	e740      	b.n	d7ee0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d805e:	a80b      	add	r0, sp, #44	; 0x2c
   d8060:	f7ff f994 	bl	d738c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d8064:	4651      	mov	r1, sl
   d8066:	a815      	add	r0, sp, #84	; 0x54
   d8068:	f7fe fffe 	bl	d7068 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d806c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d806e:	2300      	movs	r3, #0
   d8070:	3214      	adds	r2, #20
   d8072:	a915      	add	r1, sp, #84	; 0x54
   d8074:	2001      	movs	r0, #1
   d8076:	f7fd fead 	bl	d5dd4 <hal_ble_gatt_server_add_service>
   d807a:	2800      	cmp	r0, #0
   d807c:	d1e7      	bne.n	d804e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   d807e:	6835      	ldr	r5, [r6, #0]
   d8080:	a90b      	add	r1, sp, #44	; 0x2c
   d8082:	a80d      	add	r0, sp, #52	; 0x34
   d8084:	f7ff faf7 	bl	d7676 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d8088:	4628      	mov	r0, r5
   d808a:	a90d      	add	r1, sp, #52	; 0x34
   d808c:	f7ff fe7c 	bl	d7d88 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d8090:	4605      	mov	r5, r0
   d8092:	a80e      	add	r0, sp, #56	; 0x38
   d8094:	f7ff fb03 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8098:	2d00      	cmp	r5, #0
   d809a:	d0d8      	beq.n	d804e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   d809c:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   d809e:	6853      	ldr	r3, [r2, #4]
   d80a0:	6812      	ldr	r2, [r2, #0]
   d80a2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d80a6:	3b01      	subs	r3, #1
   d80a8:	a80c      	add	r0, sp, #48	; 0x30
   d80aa:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d80ae:	f7ff faf6 	bl	d769e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d80b2:	e76b      	b.n	d7f8c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   d80b4:	000dac57 	.word	0x000dac57
   d80b8:	000dabb6 	.word	0x000dabb6
   d80bc:	000dad18 	.word	0x000dad18
   d80c0:	2003e658 	.word	0x2003e658
   d80c4:	002c0001 	.word	0x002c0001
   d80c8:	000d751d 	.word	0x000d751d
   d80cc:	000dac82 	.word	0x000dac82

000d80d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d80d0:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d80d2:	4c06      	ldr	r4, [pc, #24]	; (d80ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d80d4:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d80d6:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d80d8:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d80da:	f7fd fed5 	bl	d5e88 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d80de:	4620      	mov	r0, r4
   d80e0:	4a03      	ldr	r2, [pc, #12]	; (d80f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d80e2:	4904      	ldr	r1, [pc, #16]	; (d80f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d80e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d80e8:	f001 b942 	b.w	d9370 <__aeabi_atexit>
   d80ec:	2003e65c 	.word	0x2003e65c
   d80f0:	2003df48 	.word	0x2003df48
   d80f4:	000d6d43 	.word	0x000d6d43

000d80f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d80f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d80fa:	4606      	mov	r6, r0
   d80fc:	460d      	mov	r5, r1
  size_t n = 0;
   d80fe:	188f      	adds	r7, r1, r2
   d8100:	2400      	movs	r4, #0
  while (size--) {
   d8102:	42bd      	cmp	r5, r7
   d8104:	d00c      	beq.n	d8120 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d8106:	6833      	ldr	r3, [r6, #0]
   d8108:	f815 1b01 	ldrb.w	r1, [r5], #1
   d810c:	689b      	ldr	r3, [r3, #8]
   d810e:	4630      	mov	r0, r6
   d8110:	4798      	blx	r3
     if (chunk>=0)
   d8112:	1e03      	subs	r3, r0, #0
   d8114:	db01      	blt.n	d811a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d8116:	441c      	add	r4, r3
  while (size--) {
   d8118:	e7f3      	b.n	d8102 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d811a:	2c00      	cmp	r4, #0
   d811c:	bf08      	it	eq
   d811e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d8120:	4620      	mov	r0, r4
   d8122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8124 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d8124:	b513      	push	{r0, r1, r4, lr}
   d8126:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d8128:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d812a:	b159      	cbz	r1, d8144 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d812c:	9101      	str	r1, [sp, #4]
   d812e:	f002 f927 	bl	da380 <strlen>
   d8132:	6823      	ldr	r3, [r4, #0]
   d8134:	9901      	ldr	r1, [sp, #4]
   d8136:	68db      	ldr	r3, [r3, #12]
   d8138:	4602      	mov	r2, r0
   d813a:	4620      	mov	r0, r4
    }
   d813c:	b002      	add	sp, #8
   d813e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d8142:	4718      	bx	r3
    }
   d8144:	b002      	add	sp, #8
   d8146:	bd10      	pop	{r4, pc}

000d8148 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d8148:	b508      	push	{r3, lr}
  return write(str);
   d814a:	f7ff ffeb 	bl	d8124 <_ZN5Print5writeEPKc>
}
   d814e:	bd08      	pop	{r3, pc}

000d8150 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d8150:	6803      	ldr	r3, [r0, #0]
   d8152:	689b      	ldr	r3, [r3, #8]
   d8154:	4718      	bx	r3

000d8156 <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   d8156:	680a      	ldr	r2, [r1, #0]
 {
   d8158:	460b      	mov	r3, r1
   return x.printTo(*this);
   d815a:	6812      	ldr	r2, [r2, #0]
   d815c:	4601      	mov	r1, r0
   d815e:	4618      	mov	r0, r3
   d8160:	4710      	bx	r2

000d8162 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8162:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8164:	210d      	movs	r1, #13
{
   d8166:	4605      	mov	r5, r0
  size_t n = print('\r');
   d8168:	f7ff fff2 	bl	d8150 <_ZN5Print5printEc>
  n += print('\n');
   d816c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d816e:	4604      	mov	r4, r0
  n += print('\n');
   d8170:	4628      	mov	r0, r5
   d8172:	f7ff ffed 	bl	d8150 <_ZN5Print5printEc>
  return n;
}
   d8176:	4420      	add	r0, r4
   d8178:	bd38      	pop	{r3, r4, r5, pc}

000d817a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d817a:	b538      	push	{r3, r4, r5, lr}
   d817c:	4605      	mov	r5, r0
  return write(str);
   d817e:	f7ff ffd1 	bl	d8124 <_ZN5Print5writeEPKc>
   d8182:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d8184:	4628      	mov	r0, r5
   d8186:	f7ff ffec 	bl	d8162 <_ZN5Print7printlnEv>
  return n;
}
   d818a:	4420      	add	r0, r4
   d818c:	bd38      	pop	{r3, r4, r5, pc}

000d818e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d818e:	b530      	push	{r4, r5, lr}
   d8190:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8192:	2300      	movs	r3, #0
   d8194:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8198:	2a01      	cmp	r2, #1
   d819a:	bf98      	it	ls
   d819c:	220a      	movls	r2, #10
   d819e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d81a0:	460d      	mov	r5, r1
   d81a2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d81a6:	fb01 5312 	mls	r3, r1, r2, r5
   d81aa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d81ae:	2b09      	cmp	r3, #9
   d81b0:	bf94      	ite	ls
   d81b2:	3330      	addls	r3, #48	; 0x30
   d81b4:	3337      	addhi	r3, #55	; 0x37
   d81b6:	b2db      	uxtb	r3, r3
  } while(n);
   d81b8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d81ba:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d81be:	d9ef      	bls.n	d81a0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d81c0:	4621      	mov	r1, r4
   d81c2:	f7ff ffaf 	bl	d8124 <_ZN5Print5writeEPKc>
}
   d81c6:	b00b      	add	sp, #44	; 0x2c
   d81c8:	bd30      	pop	{r4, r5, pc}
	...

000d81cc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d81cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d81d0:	ec55 4b10 	vmov	r4, r5, d0
   d81d4:	4606      	mov	r6, r0
   d81d6:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d81d8:	ee10 2a10 	vmov	r2, s0
   d81dc:	ee10 0a10 	vmov	r0, s0
   d81e0:	462b      	mov	r3, r5
   d81e2:	4629      	mov	r1, r5
   d81e4:	f001 fe3a 	bl	d9e5c <__aeabi_dcmpun>
   d81e8:	b140      	cbz	r0, d81fc <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d81ea:	4953      	ldr	r1, [pc, #332]	; (d8338 <_ZN5Print10printFloatEdh+0x16c>)
   d81ec:	4630      	mov	r0, r6
   d81ee:	f7ff ff99 	bl	d8124 <_ZN5Print5writeEPKc>
   d81f2:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d81f4:	4650      	mov	r0, sl
   d81f6:	b003      	add	sp, #12
   d81f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d81fc:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d8200:	4b4e      	ldr	r3, [pc, #312]	; (d833c <_ZN5Print10printFloatEdh+0x170>)
   d8202:	f04f 32ff 	mov.w	r2, #4294967295
   d8206:	4620      	mov	r0, r4
   d8208:	4649      	mov	r1, r9
   d820a:	f001 fe27 	bl	d9e5c <__aeabi_dcmpun>
   d820e:	b948      	cbnz	r0, d8224 <_ZN5Print10printFloatEdh+0x58>
   d8210:	4b4a      	ldr	r3, [pc, #296]	; (d833c <_ZN5Print10printFloatEdh+0x170>)
   d8212:	f04f 32ff 	mov.w	r2, #4294967295
   d8216:	4620      	mov	r0, r4
   d8218:	4649      	mov	r1, r9
   d821a:	f001 fe01 	bl	d9e20 <__aeabi_dcmple>
   d821e:	b908      	cbnz	r0, d8224 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d8220:	4947      	ldr	r1, [pc, #284]	; (d8340 <_ZN5Print10printFloatEdh+0x174>)
   d8222:	e7e3      	b.n	d81ec <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d8224:	4b47      	ldr	r3, [pc, #284]	; (d8344 <_ZN5Print10printFloatEdh+0x178>)
   d8226:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d822a:	4620      	mov	r0, r4
   d822c:	4629      	mov	r1, r5
   d822e:	f001 fe0b 	bl	d9e48 <__aeabi_dcmpgt>
   d8232:	b108      	cbz	r0, d8238 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d8234:	4944      	ldr	r1, [pc, #272]	; (d8348 <_ZN5Print10printFloatEdh+0x17c>)
   d8236:	e7d9      	b.n	d81ec <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d8238:	4b44      	ldr	r3, [pc, #272]	; (d834c <_ZN5Print10printFloatEdh+0x180>)
   d823a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d823e:	4620      	mov	r0, r4
   d8240:	4629      	mov	r1, r5
   d8242:	f001 fde3 	bl	d9e0c <__aeabi_dcmplt>
   d8246:	2800      	cmp	r0, #0
   d8248:	d1f4      	bne.n	d8234 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d824a:	2200      	movs	r2, #0
   d824c:	2300      	movs	r3, #0
   d824e:	4620      	mov	r0, r4
   d8250:	4629      	mov	r1, r5
   d8252:	f001 fddb 	bl	d9e0c <__aeabi_dcmplt>
   d8256:	b1d0      	cbz	r0, d828e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d8258:	212d      	movs	r1, #45	; 0x2d
   d825a:	4630      	mov	r0, r6
   d825c:	f7ff ff78 	bl	d8150 <_ZN5Print5printEc>
     number = -number;
   d8260:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d8264:	4682      	mov	sl, r0
     number = -number;
   d8266:	461d      	mov	r5, r3
  double rounding = 0.5;
   d8268:	4939      	ldr	r1, [pc, #228]	; (d8350 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d826a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d8358 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d826e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d8272:	2000      	movs	r0, #0
    rounding /= 10.0;
   d8274:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d8278:	fa5f f38b 	uxtb.w	r3, fp
   d827c:	429f      	cmp	r7, r3
   d827e:	d908      	bls.n	d8292 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d8280:	4642      	mov	r2, r8
   d8282:	464b      	mov	r3, r9
   d8284:	f001 fc7a 	bl	d9b7c <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d8288:	f10b 0b01 	add.w	fp, fp, #1
   d828c:	e7f4      	b.n	d8278 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d828e:	4682      	mov	sl, r0
   d8290:	e7ea      	b.n	d8268 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d8292:	4622      	mov	r2, r4
   d8294:	462b      	mov	r3, r5
   d8296:	f001 f991 	bl	d95bc <__adddf3>
   d829a:	460d      	mov	r5, r1
   d829c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d829e:	f001 fe1b 	bl	d9ed8 <__aeabi_d2uiz>
   d82a2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d82a4:	f001 fac6 	bl	d9834 <__aeabi_ui2d>
   d82a8:	4602      	mov	r2, r0
   d82aa:	460b      	mov	r3, r1
   d82ac:	4620      	mov	r0, r4
   d82ae:	4629      	mov	r1, r5
   d82b0:	f001 f982 	bl	d95b8 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d82b4:	220a      	movs	r2, #10
   d82b6:	4604      	mov	r4, r0
   d82b8:	460d      	mov	r5, r1
   d82ba:	4630      	mov	r0, r6
   d82bc:	4641      	mov	r1, r8
   d82be:	f7ff ff66 	bl	d818e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d82c2:	4482      	add	sl, r0
  if (digits > 0) {
   d82c4:	b127      	cbz	r7, d82d0 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d82c6:	4923      	ldr	r1, [pc, #140]	; (d8354 <_ZN5Print10printFloatEdh+0x188>)
   d82c8:	4630      	mov	r0, r6
   d82ca:	f7ff ff2b 	bl	d8124 <_ZN5Print5writeEPKc>
    n += print(".");
   d82ce:	4482      	add	sl, r0
    remainder *= 10.0;
   d82d0:	f8df 9084 	ldr.w	r9, [pc, #132]	; d8358 <_ZN5Print10printFloatEdh+0x18c>
   d82d4:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d82d8:	3f01      	subs	r7, #1
   d82da:	b2ff      	uxtb	r7, r7
   d82dc:	2fff      	cmp	r7, #255	; 0xff
   d82de:	d089      	beq.n	d81f4 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d82e0:	4642      	mov	r2, r8
   d82e2:	464b      	mov	r3, r9
   d82e4:	4620      	mov	r0, r4
   d82e6:	4629      	mov	r1, r5
   d82e8:	f001 fb1e 	bl	d9928 <__aeabi_dmul>
   d82ec:	4604      	mov	r4, r0
   d82ee:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d82f0:	f001 fdca 	bl	d9e88 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d82f4:	f1b0 0b00 	subs.w	fp, r0, #0
   d82f8:	da1a      	bge.n	d8330 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d82fa:	212d      	movs	r1, #45	; 0x2d
   d82fc:	4630      	mov	r0, r6
   d82fe:	f7ff ff27 	bl	d8150 <_ZN5Print5printEc>
            val = -n;
   d8302:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d8306:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d8308:	220a      	movs	r2, #10
   d830a:	4630      	mov	r0, r6
   d830c:	9301      	str	r3, [sp, #4]
   d830e:	f7ff ff3e 	bl	d818e <_ZN5Print11printNumberEmh>
   d8312:	9b01      	ldr	r3, [sp, #4]
   d8314:	4418      	add	r0, r3
    n += print(toPrint);
   d8316:	4482      	add	sl, r0
    remainder -= toPrint;
   d8318:	4658      	mov	r0, fp
   d831a:	f001 fa9b 	bl	d9854 <__aeabi_i2d>
   d831e:	4602      	mov	r2, r0
   d8320:	460b      	mov	r3, r1
   d8322:	4620      	mov	r0, r4
   d8324:	4629      	mov	r1, r5
   d8326:	f001 f947 	bl	d95b8 <__aeabi_dsub>
   d832a:	4604      	mov	r4, r0
   d832c:	460d      	mov	r5, r1
  while (digits-- > 0)
   d832e:	e7d3      	b.n	d82d8 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d8330:	4659      	mov	r1, fp
        size_t t = 0;
   d8332:	2300      	movs	r3, #0
   d8334:	e7e8      	b.n	d8308 <_ZN5Print10printFloatEdh+0x13c>
   d8336:	bf00      	nop
   d8338:	000dad38 	.word	0x000dad38
   d833c:	7fefffff 	.word	0x7fefffff
   d8340:	000dad3c 	.word	0x000dad3c
   d8344:	41efffff 	.word	0x41efffff
   d8348:	000dad40 	.word	0x000dad40
   d834c:	c1efffff 	.word	0xc1efffff
   d8350:	3fe00000 	.word	0x3fe00000
   d8354:	000daaef 	.word	0x000daaef
   d8358:	40240000 	.word	0x40240000

000d835c <_ZN5Print7printlnEdi>:
{
   d835c:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d835e:	b2c9      	uxtb	r1, r1
{
   d8360:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d8362:	f7ff ff33 	bl	d81cc <_ZN5Print10printFloatEdh>
   d8366:	4604      	mov	r4, r0
  n += println();
   d8368:	4628      	mov	r0, r5
   d836a:	f7ff fefa 	bl	d8162 <_ZN5Print7printlnEv>
}
   d836e:	4420      	add	r0, r4
   d8370:	bd38      	pop	{r3, r4, r5, pc}

000d8372 <_ZN5Print7printlnEfi>:
{
   d8372:	b538      	push	{r3, r4, r5, lr}
   d8374:	4604      	mov	r4, r0
   d8376:	ee10 0a10 	vmov	r0, s0
   d837a:	460d      	mov	r5, r1
    return println((double)num, digits);
   d837c:	f001 fa7c 	bl	d9878 <__aeabi_f2d>
   d8380:	ec41 0b10 	vmov	d0, r0, r1
   d8384:	4629      	mov	r1, r5
   d8386:	4620      	mov	r0, r4
}
   d8388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d838c:	f7ff bfe6 	b.w	d835c <_ZN5Print7printlnEdi>

000d8390 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8390:	4b01      	ldr	r3, [pc, #4]	; (d8398 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8392:	4a02      	ldr	r2, [pc, #8]	; (d839c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8394:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d8396:	4770      	bx	lr
   d8398:	2003e664 	.word	0x2003e664
   d839c:	000dad44 	.word	0x000dad44

000d83a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d83a0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d83a2:	2000      	movs	r0, #0
   d83a4:	f7fd fff6 	bl	d6394 <spark_sync_time_pending>
   d83a8:	b128      	cbz	r0, d83b6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d83aa:	f7fd ffe3 	bl	d6374 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d83ae:	f080 0001 	eor.w	r0, r0, #1
   d83b2:	b2c0      	uxtb	r0, r0
    }
   d83b4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d83b6:	2001      	movs	r0, #1
   d83b8:	e7fc      	b.n	d83b4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d83ba <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d83ba:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d83bc:	2000      	movs	r0, #0
   d83be:	f7fd fcc7 	bl	d5d50 <hal_rtc_time_is_valid>
    if (rtcstate)
   d83c2:	4604      	mov	r4, r0
   d83c4:	b9a0      	cbnz	r0, d83f0 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d83c6:	f7fd ff07 	bl	d61d8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d83ca:	2801      	cmp	r0, #1
   d83cc:	d110      	bne.n	d83f0 <_ZN9TimeClass7isValidEv+0x36>
   d83ce:	4620      	mov	r0, r4
   d83d0:	f7fd ff22 	bl	d6218 <system_thread_get_state>
   d83d4:	b960      	cbnz	r0, d83f0 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d83d6:	f7ff ffe3 	bl	d83a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d83da:	b910      	cbnz	r0, d83e2 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d83dc:	f7fd ffba 	bl	d6354 <spark_process>
        while (_while() && !_condition()) {
   d83e0:	e7f9      	b.n	d83d6 <_ZN9TimeClass7isValidEv+0x1c>
   d83e2:	f7ff ffdd 	bl	d83a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d83e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d83ea:	2000      	movs	r0, #0
   d83ec:	f7fd bcb0 	b.w	d5d50 <hal_rtc_time_is_valid>
}
   d83f0:	4620      	mov	r0, r4
   d83f2:	bd10      	pop	{r4, pc}

000d83f4 <_ZN9TimeClass3nowEv>:
{
   d83f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d83f6:	f7ff ffe0 	bl	d83ba <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d83fa:	2210      	movs	r2, #16
   d83fc:	2100      	movs	r1, #0
   d83fe:	4668      	mov	r0, sp
   d8400:	f001 ff80 	bl	da304 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d8404:	2100      	movs	r1, #0
   d8406:	4668      	mov	r0, sp
   d8408:	f7fd fcaa 	bl	d5d60 <hal_rtc_get_time>
}
   d840c:	9800      	ldr	r0, [sp, #0]
   d840e:	b005      	add	sp, #20
   d8410:	f85d fb04 	ldr.w	pc, [sp], #4

000d8414 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8414:	4b02      	ldr	r3, [pc, #8]	; (d8420 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8416:	681a      	ldr	r2, [r3, #0]
   d8418:	4b02      	ldr	r3, [pc, #8]	; (d8424 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d841a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d841c:	4770      	bx	lr
   d841e:	bf00      	nop
   d8420:	2003dee0 	.word	0x2003dee0
   d8424:	2003e668 	.word	0x2003e668

000d8428 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8428:	2100      	movs	r1, #0
   d842a:	f7fd bee5 	b.w	d61f8 <system_delay_ms>

000d842e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d842e:	b510      	push	{r4, lr}
   d8430:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d8432:	f7fe fd5b 	bl	d6eec <_ZNSt14_Function_baseD1Ev>
   d8436:	4620      	mov	r0, r4
   d8438:	bd10      	pop	{r4, pc}
	...

000d843c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d843c:	4803      	ldr	r0, [pc, #12]	; (d844c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d843e:	4a04      	ldr	r2, [pc, #16]	; (d8450 <_GLOBAL__sub_I_RGB+0x14>)
   d8440:	4904      	ldr	r1, [pc, #16]	; (d8454 <_GLOBAL__sub_I_RGB+0x18>)
   d8442:	2300      	movs	r3, #0
   d8444:	6083      	str	r3, [r0, #8]
   d8446:	f000 bf93 	b.w	d9370 <__aeabi_atexit>
   d844a:	bf00      	nop
   d844c:	2003e66c 	.word	0x2003e66c
   d8450:	2003df48 	.word	0x2003df48
   d8454:	000d842f 	.word	0x000d842f

000d8458 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d8458:	4b01      	ldr	r3, [pc, #4]	; (d8460 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d845a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d845c:	4770      	bx	lr
   d845e:	bf00      	nop
   d8460:	2003dee4 	.word	0x2003dee4

000d8464 <serialEventRun>:
{
   d8464:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8466:	4b0b      	ldr	r3, [pc, #44]	; (d8494 <serialEventRun+0x30>)
   d8468:	b143      	cbz	r3, d847c <serialEventRun+0x18>
   d846a:	f000 f985 	bl	d8778 <_Z16_fetch_usbserialv>
   d846e:	6803      	ldr	r3, [r0, #0]
   d8470:	691b      	ldr	r3, [r3, #16]
   d8472:	4798      	blx	r3
   d8474:	2800      	cmp	r0, #0
   d8476:	dd01      	ble.n	d847c <serialEventRun+0x18>
        serialEvent();
   d8478:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d847c:	4b06      	ldr	r3, [pc, #24]	; (d8498 <serialEventRun+0x34>)
   d847e:	b143      	cbz	r3, d8492 <serialEventRun+0x2e>
   d8480:	f000 f9f8 	bl	d8874 <_Z22__fetch_global_Serial1v>
   d8484:	6803      	ldr	r3, [r0, #0]
   d8486:	691b      	ldr	r3, [r3, #16]
   d8488:	4798      	blx	r3
   d848a:	2800      	cmp	r0, #0
   d848c:	dd01      	ble.n	d8492 <serialEventRun+0x2e>
        serialEvent1();
   d848e:	f3af 8000 	nop.w
}
   d8492:	bd08      	pop	{r3, pc}
	...

000d849c <_post_loop>:
{
   d849c:	b508      	push	{r3, lr}
	serialEventRun();
   d849e:	f7ff ffe1 	bl	d8464 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d84a2:	f7fd fc35 	bl	d5d10 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d84a6:	4b01      	ldr	r3, [pc, #4]	; (d84ac <_post_loop+0x10>)
   d84a8:	6018      	str	r0, [r3, #0]
}
   d84aa:	bd08      	pop	{r3, pc}
   d84ac:	2003e7cc 	.word	0x2003e7cc

000d84b0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d84b0:	4802      	ldr	r0, [pc, #8]	; (d84bc <_Z33system_initialize_user_backup_ramv+0xc>)
   d84b2:	4a03      	ldr	r2, [pc, #12]	; (d84c0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d84b4:	4903      	ldr	r1, [pc, #12]	; (d84c4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d84b6:	1a12      	subs	r2, r2, r0
   d84b8:	f001 befc 	b.w	da2b4 <memcpy>
   d84bc:	2003f400 	.word	0x2003f400
   d84c0:	2003f404 	.word	0x2003f404
   d84c4:	000db118 	.word	0x000db118

000d84c8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d84c8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d84ca:	2300      	movs	r3, #0
   d84cc:	9300      	str	r3, [sp, #0]
   d84ce:	461a      	mov	r2, r3
   d84d0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d84d4:	f7fd feb2 	bl	d623c <system_ctrl_set_result>
}
   d84d8:	b003      	add	sp, #12
   d84da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d84e0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d84e0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d84e2:	8843      	ldrh	r3, [r0, #2]
   d84e4:	2b0a      	cmp	r3, #10
   d84e6:	d008      	beq.n	d84fa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d84e8:	2b50      	cmp	r3, #80	; 0x50
   d84ea:	d10b      	bne.n	d8504 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d84ec:	4b09      	ldr	r3, [pc, #36]	; (d8514 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d84ee:	681b      	ldr	r3, [r3, #0]
   d84f0:	b14b      	cbz	r3, d8506 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d84f2:	b003      	add	sp, #12
   d84f4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d84f8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d84fa:	f7ff ffe5 	bl	d84c8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d84fe:	b003      	add	sp, #12
   d8500:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8504:	2300      	movs	r3, #0
   d8506:	9300      	str	r3, [sp, #0]
   d8508:	461a      	mov	r2, r3
   d850a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d850e:	f7fd fe95 	bl	d623c <system_ctrl_set_result>
}
   d8512:	e7f4      	b.n	d84fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d8514:	2003e680 	.word	0x2003e680

000d8518 <module_user_init_hook>:
{
   d8518:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d851a:	4c12      	ldr	r4, [pc, #72]	; (d8564 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d851c:	4812      	ldr	r0, [pc, #72]	; (d8568 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d851e:	4d13      	ldr	r5, [pc, #76]	; (d856c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8520:	2100      	movs	r1, #0
   d8522:	f7fd ff7f 	bl	d6424 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d8526:	6823      	ldr	r3, [r4, #0]
   d8528:	42ab      	cmp	r3, r5
   d852a:	4b11      	ldr	r3, [pc, #68]	; (d8570 <module_user_init_hook+0x58>)
   d852c:	bf0c      	ite	eq
   d852e:	2201      	moveq	r2, #1
   d8530:	2200      	movne	r2, #0
   d8532:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8534:	d002      	beq.n	d853c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d8536:	f7ff ffbb 	bl	d84b0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d853a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d853c:	f7fd fbd8 	bl	d5cf0 <HAL_RNG_GetRandomNumber>
   d8540:	4604      	mov	r4, r0
    srand(seed);
   d8542:	f001 fee7 	bl	da314 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8546:	4b0b      	ldr	r3, [pc, #44]	; (d8574 <module_user_init_hook+0x5c>)
   d8548:	b113      	cbz	r3, d8550 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d854a:	4620      	mov	r0, r4
   d854c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8550:	2100      	movs	r1, #0
   d8552:	4808      	ldr	r0, [pc, #32]	; (d8574 <module_user_init_hook+0x5c>)
   d8554:	f7fd ff2e 	bl	d63b4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d8558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d855c:	4806      	ldr	r0, [pc, #24]	; (d8578 <module_user_init_hook+0x60>)
   d855e:	2100      	movs	r1, #0
   d8560:	f7fd be62 	b.w	d6228 <system_ctrl_set_app_request_handler>
   d8564:	2003f400 	.word	0x2003f400
   d8568:	000d8459 	.word	0x000d8459
   d856c:	9a271c1e 	.word	0x9a271c1e
   d8570:	2003e67c 	.word	0x2003e67c
   d8574:	00000000 	.word	0x00000000
   d8578:	000d84e1 	.word	0x000d84e1

000d857c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d857c:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d857e:	2308      	movs	r3, #8
   d8580:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d8584:	6803      	ldr	r3, [r0, #0]
   d8586:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d858a:	7a03      	ldrb	r3, [r0, #8]
   d858c:	f88d 3003 	strb.w	r3, [sp, #3]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d8590:	2100      	movs	r1, #0
    opts.timeout = timeout_;
   d8592:	6843      	ldr	r3, [r0, #4]
   d8594:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d8596:	4668      	mov	r0, sp
   d8598:	f7fd ff14 	bl	d63c4 <spark_cloud_disconnect>
}
   d859c:	b003      	add	sp, #12
   d859e:	f85d fb04 	ldr.w	pc, [sp], #4

000d85a2 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d85a2:	4770      	bx	lr

000d85a4 <_ZN9IPAddressD0Ev>:
   d85a4:	b510      	push	{r4, lr}
   d85a6:	2118      	movs	r1, #24
   d85a8:	4604      	mov	r4, r0
   d85aa:	f000 fee6 	bl	d937a <_ZdlPvj>
   d85ae:	4620      	mov	r0, r4
   d85b0:	bd10      	pop	{r4, pc}

000d85b2 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d85b2:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d85b4:	7d03      	ldrb	r3, [r0, #20]
   d85b6:	2b06      	cmp	r3, #6
{
   d85b8:	b08d      	sub	sp, #52	; 0x34
   d85ba:	460e      	mov	r6, r1
   d85bc:	f100 0704 	add.w	r7, r0, #4
   d85c0:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d85c4:	d012      	beq.n	d85ec <_ZNK9IPAddress7printToER5Print+0x3a>
   d85c6:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d85ca:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d85ce:	220a      	movs	r2, #10
   d85d0:	4630      	mov	r0, r6
   d85d2:	f7ff fddc 	bl	d818e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d85d6:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d85d8:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d85da:	d019      	beq.n	d8610 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d85dc:	2c00      	cmp	r4, #0
   d85de:	d0f4      	beq.n	d85ca <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d85e0:	212e      	movs	r1, #46	; 0x2e
   d85e2:	4630      	mov	r0, r6
   d85e4:	f7ff fdb4 	bl	d8150 <_ZN5Print5printEc>
   d85e8:	4404      	add	r4, r0
   d85ea:	e7ee      	b.n	d85ca <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d85ec:	232f      	movs	r3, #47	; 0x2f
   d85ee:	466a      	mov	r2, sp
   d85f0:	4639      	mov	r1, r7
   d85f2:	200a      	movs	r0, #10
		buf[0] = 0;
   d85f4:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d85f8:	f7fd fc66 	bl	d5ec8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d85fc:	4668      	mov	r0, sp
   d85fe:	f001 febf 	bl	da380 <strlen>
   d8602:	6833      	ldr	r3, [r6, #0]
   d8604:	4602      	mov	r2, r0
   d8606:	68db      	ldr	r3, [r3, #12]
   d8608:	4669      	mov	r1, sp
   d860a:	4630      	mov	r0, r6
   d860c:	4798      	blx	r3
   d860e:	4604      	mov	r4, r0
    }
    return n;
}
   d8610:	4620      	mov	r0, r4
   d8612:	b00d      	add	sp, #52	; 0x34
   d8614:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d8618 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d8618:	b510      	push	{r4, lr}
   d861a:	4b05      	ldr	r3, [pc, #20]	; (d8630 <_ZN9IPAddressC1Ev+0x18>)
   d861c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d861e:	2211      	movs	r2, #17
   d8620:	f840 3b04 	str.w	r3, [r0], #4
   d8624:	2100      	movs	r1, #0
   d8626:	f001 fe6d 	bl	da304 <memset>
}
   d862a:	4620      	mov	r0, r4
   d862c:	bd10      	pop	{r4, pc}
   d862e:	bf00      	nop
   d8630:	000dad6c 	.word	0x000dad6c

000d8634 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d8634:	4603      	mov	r3, r0
   d8636:	4a07      	ldr	r2, [pc, #28]	; (d8654 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8638:	b510      	push	{r4, lr}
   d863a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d863e:	f101 0210 	add.w	r2, r1, #16
   d8642:	f851 4b04 	ldr.w	r4, [r1], #4
   d8646:	f843 4b04 	str.w	r4, [r3], #4
   d864a:	4291      	cmp	r1, r2
   d864c:	d1f9      	bne.n	d8642 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d864e:	780a      	ldrb	r2, [r1, #0]
   d8650:	701a      	strb	r2, [r3, #0]
}
   d8652:	bd10      	pop	{r4, pc}
   d8654:	000dad6c 	.word	0x000dad6c

000d8658 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d8658:	7d03      	ldrb	r3, [r0, #20]
   d865a:	2b04      	cmp	r3, #4
   d865c:	d104      	bne.n	d8668 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d865e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d8660:	3800      	subs	r0, #0
   d8662:	bf18      	it	ne
   d8664:	2001      	movne	r0, #1
   d8666:	4770      	bx	lr
    } else if (version() == 6) {
   d8668:	2b06      	cmp	r3, #6
   d866a:	d107      	bne.n	d867c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d866c:	6843      	ldr	r3, [r0, #4]
   d866e:	b93b      	cbnz	r3, d8680 <_ZNK9IPAddresscvbEv+0x28>
   d8670:	6883      	ldr	r3, [r0, #8]
   d8672:	b92b      	cbnz	r3, d8680 <_ZNK9IPAddresscvbEv+0x28>
   d8674:	68c3      	ldr	r3, [r0, #12]
   d8676:	b91b      	cbnz	r3, d8680 <_ZNK9IPAddresscvbEv+0x28>
   d8678:	6900      	ldr	r0, [r0, #16]
   d867a:	e7f1      	b.n	d8660 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d867c:	2000      	movs	r0, #0
   d867e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d8680:	2001      	movs	r0, #1
}
   d8682:	4770      	bx	lr

000d8684 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d8684:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8686:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d868a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d868e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8692:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d8696:	2304      	movs	r3, #4
   d8698:	6041      	str	r1, [r0, #4]
   d869a:	7503      	strb	r3, [r0, #20]
}
   d869c:	bd10      	pop	{r4, pc}
	...

000d86a0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d86a0:	b513      	push	{r0, r1, r4, lr}
   d86a2:	4b05      	ldr	r3, [pc, #20]	; (d86b8 <_ZN9IPAddressC1EPKh+0x18>)
   d86a4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d86a6:	78cb      	ldrb	r3, [r1, #3]
   d86a8:	9300      	str	r3, [sp, #0]
   d86aa:	788b      	ldrb	r3, [r1, #2]
   d86ac:	784a      	ldrb	r2, [r1, #1]
   d86ae:	7809      	ldrb	r1, [r1, #0]
   d86b0:	f7ff ffe8 	bl	d8684 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d86b4:	b002      	add	sp, #8
   d86b6:	bd10      	pop	{r4, pc}
   d86b8:	000dad6c 	.word	0x000dad6c

000d86bc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d86bc:	7441      	strb	r1, [r0, #17]
}
   d86be:	4770      	bx	lr

000d86c0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d86c0:	4770      	bx	lr

000d86c2 <_ZN9USBSerial4readEv>:
{
   d86c2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d86c4:	2100      	movs	r1, #0
   d86c6:	7c00      	ldrb	r0, [r0, #16]
   d86c8:	f7fd fd56 	bl	d6178 <HAL_USB_USART_Receive_Data>
}
   d86cc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d86d0:	bd08      	pop	{r3, pc}

000d86d2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d86d2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d86d4:	2101      	movs	r1, #1
   d86d6:	7c00      	ldrb	r0, [r0, #16]
   d86d8:	f7fd fd4e 	bl	d6178 <HAL_USB_USART_Receive_Data>
}
   d86dc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d86e0:	bd08      	pop	{r3, pc}

000d86e2 <_ZN9USBSerial17availableForWriteEv>:
{
   d86e2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d86e4:	7c00      	ldrb	r0, [r0, #16]
   d86e6:	f7fd fd3f 	bl	d6168 <HAL_USB_USART_Available_Data_For_Write>
}
   d86ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d86ee:	bd08      	pop	{r3, pc}

000d86f0 <_ZN9USBSerial9availableEv>:
{
   d86f0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d86f2:	7c00      	ldrb	r0, [r0, #16]
   d86f4:	f7fd fd30 	bl	d6158 <HAL_USB_USART_Available_Data>
}
   d86f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d86fc:	bd08      	pop	{r3, pc}

000d86fe <_ZN9USBSerial5writeEh>:
{
   d86fe:	b513      	push	{r0, r1, r4, lr}
   d8700:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8702:	7c00      	ldrb	r0, [r0, #16]
{
   d8704:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8706:	f7fd fd2f 	bl	d6168 <HAL_USB_USART_Available_Data_For_Write>
   d870a:	2800      	cmp	r0, #0
   d870c:	9901      	ldr	r1, [sp, #4]
   d870e:	dc01      	bgt.n	d8714 <_ZN9USBSerial5writeEh+0x16>
   d8710:	7c60      	ldrb	r0, [r4, #17]
   d8712:	b120      	cbz	r0, d871e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8714:	7c20      	ldrb	r0, [r4, #16]
   d8716:	f7fd fd37 	bl	d6188 <HAL_USB_USART_Send_Data>
   d871a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d871e:	b002      	add	sp, #8
   d8720:	bd10      	pop	{r4, pc}

000d8722 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d8722:	7c00      	ldrb	r0, [r0, #16]
   d8724:	f7fd bd38 	b.w	d6198 <HAL_USB_USART_Flush_Data>

000d8728 <_ZN9USBSerialD0Ev>:
   d8728:	b510      	push	{r4, lr}
   d872a:	2114      	movs	r1, #20
   d872c:	4604      	mov	r4, r0
   d872e:	f000 fe24 	bl	d937a <_ZdlPvj>
   d8732:	4620      	mov	r0, r4
   d8734:	bd10      	pop	{r4, pc}
	...

000d8738 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8738:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d873a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d873e:	4604      	mov	r4, r0
   d8740:	4608      	mov	r0, r1
   d8742:	2100      	movs	r1, #0
   d8744:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8748:	4b04      	ldr	r3, [pc, #16]	; (d875c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d874a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d874c:	2301      	movs	r3, #1
  _serial = serial;
   d874e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8750:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d8752:	4611      	mov	r1, r2
   d8754:	f7fd fcf0 	bl	d6138 <HAL_USB_USART_Init>
}
   d8758:	4620      	mov	r0, r4
   d875a:	bd10      	pop	{r4, pc}
   d875c:	000dad80 	.word	0x000dad80

000d8760 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8760:	7c00      	ldrb	r0, [r0, #16]
   d8762:	2200      	movs	r2, #0
   d8764:	f7fd bcf0 	b.w	d6148 <HAL_USB_USART_Begin>

000d8768 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8768:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d876a:	2214      	movs	r2, #20
{
   d876c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d876e:	2100      	movs	r1, #0
   d8770:	f001 fdc8 	bl	da304 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8774:	4620      	mov	r0, r4
   d8776:	bd10      	pop	{r4, pc}

000d8778 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8778:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d877a:	4c10      	ldr	r4, [pc, #64]	; (d87bc <_Z16_fetch_usbserialv+0x44>)
{
   d877c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d877e:	a803      	add	r0, sp, #12
   d8780:	f7ff fff2 	bl	d8768 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8784:	7821      	ldrb	r1, [r4, #0]
   d8786:	f3bf 8f5b 	dmb	ish
   d878a:	f011 0101 	ands.w	r1, r1, #1
   d878e:	d111      	bne.n	d87b4 <_Z16_fetch_usbserialv+0x3c>
   d8790:	4620      	mov	r0, r4
   d8792:	9101      	str	r1, [sp, #4]
   d8794:	f7fb fc83 	bl	d409e <__cxa_guard_acquire>
   d8798:	9901      	ldr	r1, [sp, #4]
   d879a:	b158      	cbz	r0, d87b4 <_Z16_fetch_usbserialv+0x3c>
   d879c:	aa03      	add	r2, sp, #12
   d879e:	4808      	ldr	r0, [pc, #32]	; (d87c0 <_Z16_fetch_usbserialv+0x48>)
   d87a0:	f7ff ffca 	bl	d8738 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d87a4:	4620      	mov	r0, r4
   d87a6:	f7fb fc7f 	bl	d40a8 <__cxa_guard_release>
   d87aa:	4a06      	ldr	r2, [pc, #24]	; (d87c4 <_Z16_fetch_usbserialv+0x4c>)
   d87ac:	4906      	ldr	r1, [pc, #24]	; (d87c8 <_Z16_fetch_usbserialv+0x50>)
   d87ae:	4804      	ldr	r0, [pc, #16]	; (d87c0 <_Z16_fetch_usbserialv+0x48>)
   d87b0:	f000 fdde 	bl	d9370 <__aeabi_atexit>
	return _usbserial;
}
   d87b4:	4802      	ldr	r0, [pc, #8]	; (d87c0 <_Z16_fetch_usbserialv+0x48>)
   d87b6:	b008      	add	sp, #32
   d87b8:	bd10      	pop	{r4, pc}
   d87ba:	bf00      	nop
   d87bc:	2003e684 	.word	0x2003e684
   d87c0:	2003e688 	.word	0x2003e688
   d87c4:	2003df48 	.word	0x2003df48
   d87c8:	000d86c1 	.word	0x000d86c1

000d87cc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d87cc:	4770      	bx	lr

000d87ce <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d87ce:	7441      	strb	r1, [r0, #17]
}
   d87d0:	4770      	bx	lr

000d87d2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d87d2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d87d4:	7c00      	ldrb	r0, [r0, #16]
   d87d6:	f7fd fbc7 	bl	d5f68 <hal_usart_available_data_for_write>
}
   d87da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d87de:	bd08      	pop	{r3, pc}

000d87e0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d87e0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d87e2:	7c00      	ldrb	r0, [r0, #16]
   d87e4:	f7fd fb98 	bl	d5f18 <hal_usart_available>
}
   d87e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d87ec:	bd08      	pop	{r3, pc}

000d87ee <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d87ee:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d87f0:	7c00      	ldrb	r0, [r0, #16]
   d87f2:	f7fd fba1 	bl	d5f38 <hal_usart_peek>
}
   d87f6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d87fa:	bd08      	pop	{r3, pc}

000d87fc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d87fc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d87fe:	7c00      	ldrb	r0, [r0, #16]
   d8800:	f7fd fb92 	bl	d5f28 <hal_usart_read>
}
   d8804:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8808:	bd08      	pop	{r3, pc}

000d880a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d880a:	7c00      	ldrb	r0, [r0, #16]
   d880c:	f7fd bb9c 	b.w	d5f48 <hal_usart_flush>

000d8810 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d8810:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8812:	7c45      	ldrb	r5, [r0, #17]
{
   d8814:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8816:	b12d      	cbz	r5, d8824 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d8818:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d881a:	b003      	add	sp, #12
   d881c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d8820:	f7fd bb72 	b.w	d5f08 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8824:	7c00      	ldrb	r0, [r0, #16]
   d8826:	9101      	str	r1, [sp, #4]
   d8828:	f7fd fb9e 	bl	d5f68 <hal_usart_available_data_for_write>
   d882c:	2800      	cmp	r0, #0
   d882e:	9901      	ldr	r1, [sp, #4]
   d8830:	dcf2      	bgt.n	d8818 <_ZN11USARTSerial5writeEh+0x8>
}
   d8832:	4628      	mov	r0, r5
   d8834:	b003      	add	sp, #12
   d8836:	bd30      	pop	{r4, r5, pc}

000d8838 <_ZN11USARTSerialD0Ev>:
   d8838:	b510      	push	{r4, lr}
   d883a:	2114      	movs	r1, #20
   d883c:	4604      	mov	r4, r0
   d883e:	f000 fd9c 	bl	d937a <_ZdlPvj>
   d8842:	4620      	mov	r0, r4
   d8844:	bd10      	pop	{r4, pc}
	...

000d8848 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d8848:	b510      	push	{r4, lr}
   d884a:	f04f 0c00 	mov.w	ip, #0
   d884e:	4604      	mov	r4, r0
   d8850:	4608      	mov	r0, r1
   d8852:	4611      	mov	r1, r2
   d8854:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8858:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d885c:	4a04      	ldr	r2, [pc, #16]	; (d8870 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d885e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d8860:	2201      	movs	r2, #1
  _serial = serial;
   d8862:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8864:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d8866:	461a      	mov	r2, r3
   d8868:	f7fd fb46 	bl	d5ef8 <hal_usart_init>
}
   d886c:	4620      	mov	r0, r4
   d886e:	bd10      	pop	{r4, pc}
   d8870:	000dadb0 	.word	0x000dadb0

000d8874 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8874:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8876:	4c0e      	ldr	r4, [pc, #56]	; (d88b0 <_Z22__fetch_global_Serial1v+0x3c>)
   d8878:	7821      	ldrb	r1, [r4, #0]
   d887a:	f3bf 8f5b 	dmb	ish
   d887e:	f011 0101 	ands.w	r1, r1, #1
   d8882:	d112      	bne.n	d88aa <_Z22__fetch_global_Serial1v+0x36>
   d8884:	4620      	mov	r0, r4
   d8886:	9101      	str	r1, [sp, #4]
   d8888:	f7fb fc09 	bl	d409e <__cxa_guard_acquire>
   d888c:	9901      	ldr	r1, [sp, #4]
   d888e:	b160      	cbz	r0, d88aa <_Z22__fetch_global_Serial1v+0x36>
   d8890:	4a08      	ldr	r2, [pc, #32]	; (d88b4 <_Z22__fetch_global_Serial1v+0x40>)
   d8892:	4b09      	ldr	r3, [pc, #36]	; (d88b8 <_Z22__fetch_global_Serial1v+0x44>)
   d8894:	4809      	ldr	r0, [pc, #36]	; (d88bc <_Z22__fetch_global_Serial1v+0x48>)
   d8896:	f7ff ffd7 	bl	d8848 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d889a:	4620      	mov	r0, r4
   d889c:	f7fb fc04 	bl	d40a8 <__cxa_guard_release>
   d88a0:	4a07      	ldr	r2, [pc, #28]	; (d88c0 <_Z22__fetch_global_Serial1v+0x4c>)
   d88a2:	4908      	ldr	r1, [pc, #32]	; (d88c4 <_Z22__fetch_global_Serial1v+0x50>)
   d88a4:	4805      	ldr	r0, [pc, #20]	; (d88bc <_Z22__fetch_global_Serial1v+0x48>)
   d88a6:	f000 fd63 	bl	d9370 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d88aa:	4804      	ldr	r0, [pc, #16]	; (d88bc <_Z22__fetch_global_Serial1v+0x48>)
   d88ac:	b002      	add	sp, #8
   d88ae:	bd10      	pop	{r4, pc}
   d88b0:	2003e69c 	.word	0x2003e69c
   d88b4:	2003e6a0 	.word	0x2003e6a0
   d88b8:	2003e724 	.word	0x2003e724
   d88bc:	2003e7a8 	.word	0x2003e7a8
   d88c0:	2003df48 	.word	0x2003df48
   d88c4:	000d87cd 	.word	0x000d87cd

000d88c8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d88c8:	4770      	bx	lr

000d88ca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d88ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d88cc:	4606      	mov	r6, r0
   d88ce:	4615      	mov	r5, r2
   d88d0:	460c      	mov	r4, r1
   d88d2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d88d4:	42bc      	cmp	r4, r7
   d88d6:	d006      	beq.n	d88e6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d88d8:	6833      	ldr	r3, [r6, #0]
   d88da:	f814 1b01 	ldrb.w	r1, [r4], #1
   d88de:	689b      	ldr	r3, [r3, #8]
   d88e0:	4630      	mov	r0, r6
   d88e2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d88e4:	e7f6      	b.n	d88d4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d88e6:	4628      	mov	r0, r5
   d88e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d88ea <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d88ea:	7c00      	ldrb	r0, [r0, #16]
   d88ec:	2200      	movs	r2, #0
   d88ee:	f7fd bb63 	b.w	d5fb8 <hal_i2c_write>

000d88f2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d88f2:	7c00      	ldrb	r0, [r0, #16]
   d88f4:	2100      	movs	r1, #0
   d88f6:	f7fd bb67 	b.w	d5fc8 <hal_i2c_available>

000d88fa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d88fa:	7c00      	ldrb	r0, [r0, #16]
   d88fc:	2100      	movs	r1, #0
   d88fe:	f7fd bb6b 	b.w	d5fd8 <hal_i2c_read>

000d8902 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d8902:	7c00      	ldrb	r0, [r0, #16]
   d8904:	2100      	movs	r1, #0
   d8906:	f7fd bb6f 	b.w	d5fe8 <hal_i2c_peek>

000d890a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d890a:	7c00      	ldrb	r0, [r0, #16]
   d890c:	2100      	movs	r1, #0
   d890e:	f7fd bb73 	b.w	d5ff8 <hal_i2c_flush>

000d8912 <_ZN7TwoWireD0Ev>:
   d8912:	b510      	push	{r4, lr}
   d8914:	2114      	movs	r1, #20
   d8916:	4604      	mov	r4, r0
   d8918:	f000 fd2f 	bl	d937a <_ZdlPvj>
   d891c:	4620      	mov	r0, r4
   d891e:	bd10      	pop	{r4, pc}

000d8920 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d8920:	b510      	push	{r4, lr}
   d8922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8926:	4604      	mov	r4, r0
   d8928:	4608      	mov	r0, r1
   d892a:	2100      	movs	r1, #0
   d892c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8930:	4b03      	ldr	r3, [pc, #12]	; (d8940 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d8932:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8934:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d8936:	4611      	mov	r1, r2
   d8938:	f7fd fb6e 	bl	d6018 <hal_i2c_init>
}
   d893c:	4620      	mov	r0, r4
   d893e:	bd10      	pop	{r4, pc}
   d8940:	000dade0 	.word	0x000dade0

000d8944 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8944:	2300      	movs	r3, #0
   d8946:	7c00      	ldrb	r0, [r0, #16]
   d8948:	461a      	mov	r2, r3
   d894a:	4619      	mov	r1, r3
   d894c:	f7fd bb14 	b.w	d5f78 <hal_i2c_begin>

000d8950 <_ZN7TwoWire3endEv>:
	hal_i2c_end(_i2c, NULL);
   d8950:	7c00      	ldrb	r0, [r0, #16]
   d8952:	2100      	movs	r1, #0
   d8954:	f7fd bb18 	b.w	d5f88 <hal_i2c_end>

000d8958 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8958:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d895a:	2200      	movs	r2, #0
   d895c:	2314      	movs	r3, #20
   d895e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d8962:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d8966:	780b      	ldrb	r3, [r1, #0]
   d8968:	f88d 3008 	strb.w	r3, [sp, #8]
   d896c:	684b      	ldr	r3, [r1, #4]
   d896e:	9303      	str	r3, [sp, #12]
   d8970:	68cb      	ldr	r3, [r1, #12]
   d8972:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d8974:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8976:	7a0b      	ldrb	r3, [r1, #8]
   d8978:	9305      	str	r3, [sp, #20]
   d897a:	a901      	add	r1, sp, #4
   d897c:	f7fd fb54 	bl	d6028 <hal_i2c_request_ex>
}
   d8980:	b007      	add	sp, #28
   d8982:	f85d fb04 	ldr.w	pc, [sp], #4

000d8986 <_ZN7TwoWire11requestFromEhjh>:
{
   d8986:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8988:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d898a:	f88d 1000 	strb.w	r1, [sp]
   d898e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8992:	9103      	str	r1, [sp, #12]
   d8994:	bf18      	it	ne
   d8996:	2301      	movne	r3, #1
   d8998:	4669      	mov	r1, sp
    size_ = size;
   d899a:	9201      	str	r2, [sp, #4]
   d899c:	f88d 3008 	strb.w	r3, [sp, #8]
   d89a0:	f7ff ffda 	bl	d8958 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d89a4:	b005      	add	sp, #20
   d89a6:	f85d fb04 	ldr.w	pc, [sp], #4

000d89aa <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d89aa:	2301      	movs	r3, #1
   d89ac:	f7ff bfeb 	b.w	d8986 <_ZN7TwoWire11requestFromEhjh>

000d89b0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d89b0:	7c00      	ldrb	r0, [r0, #16]
   d89b2:	2200      	movs	r2, #0
   d89b4:	f7fd baf0 	b.w	d5f98 <hal_i2c_begin_transmission>

000d89b8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d89b8:	b2c9      	uxtb	r1, r1
   d89ba:	f7ff bff9 	b.w	d89b0 <_ZN7TwoWire17beginTransmissionEh>

000d89be <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d89be:	7c00      	ldrb	r0, [r0, #16]
   d89c0:	2200      	movs	r2, #0
   d89c2:	f7fd baf1 	b.w	d5fa8 <hal_i2c_end_transmission>

000d89c6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d89c6:	2101      	movs	r1, #1
   d89c8:	f7ff bff9 	b.w	d89be <_ZN7TwoWire15endTransmissionEh>

000d89cc <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d89cc:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d89ce:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d89d0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d89d4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d89d6:	2201      	movs	r2, #1
   d89d8:	f04f 33ff 	mov.w	r3, #4294967295
   d89dc:	f10d 0107 	add.w	r1, sp, #7
   d89e0:	47a0      	blx	r4
}
   d89e2:	b002      	add	sp, #8
   d89e4:	bd10      	pop	{r4, pc}

000d89e6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d89e6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d89e8:	6803      	ldr	r3, [r0, #0]
   d89ea:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d89ec:	f04f 33ff 	mov.w	r3, #4294967295
   d89f0:	46a4      	mov	ip, r4
}
   d89f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d89f6:	4760      	bx	ip

000d89f8 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d89f8:	b513      	push	{r0, r1, r4, lr}
   d89fa:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d89fc:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d89fe:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d8a02:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d8a04:	f10d 0107 	add.w	r1, sp, #7
   d8a08:	2201      	movs	r2, #1
   d8a0a:	47a0      	blx	r4
}
   d8a0c:	b002      	add	sp, #8
   d8a0e:	bd10      	pop	{r4, pc}

000d8a10 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d8a10:	4770      	bx	lr

000d8a12 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d8a12:	b538      	push	{r3, r4, r5, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8a14:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d8a16:	681a      	ldr	r2, [r3, #0]
   d8a18:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d8a1a:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d8a1c:	da10      	bge.n	d8a40 <_ZN9TCPClient9connectedEv+0x2e>
   d8a1e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8a22:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8a26:	429a      	cmp	r2, r3
   d8a28:	d10a      	bne.n	d8a40 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d8a2a:	6803      	ldr	r3, [r0, #0]
   d8a2c:	691b      	ldr	r3, [r3, #16]
   d8a2e:	4798      	blx	r3
        if (!rv) {
   d8a30:	4604      	mov	r4, r0
   d8a32:	b928      	cbnz	r0, d8a40 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d8a34:	682b      	ldr	r3, [r5, #0]
   d8a36:	4628      	mov	r0, r5
   d8a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8a3a:	4798      	blx	r3
        rv = available();
   d8a3c:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d8a3e:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d8a40:	2001      	movs	r0, #1
   d8a42:	e7fc      	b.n	d8a3e <_ZN9TCPClient9connectedEv+0x2c>

000d8a44 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d8a44:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d8a46:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d8a48:	43c0      	mvns	r0, r0
   d8a4a:	0fc0      	lsrs	r0, r0, #31
   d8a4c:	4770      	bx	lr

000d8a4e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d8a4e:	4770      	bx	lr

000d8a50 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d8a50:	4b06      	ldr	r3, [pc, #24]	; (d8a6c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d8a52:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d8a54:	b510      	push	{r4, lr}
   d8a56:	f100 040c 	add.w	r4, r0, #12
	    ||
   d8a5a:	d005      	beq.n	d8a68 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d8a5c:	4608      	mov	r0, r1
   d8a5e:	f000 fc95 	bl	d938c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d8a62:	2800      	cmp	r0, #0
	return nullptr;
   d8a64:	bf08      	it	eq
   d8a66:	2400      	moveq	r4, #0
      }
   d8a68:	4620      	mov	r0, r4
   d8a6a:	bd10      	pop	{r4, pc}
   d8a6c:	000dad00 	.word	0x000dad00

000d8a70 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d8a70:	b510      	push	{r4, lr}
   d8a72:	21ac      	movs	r1, #172	; 0xac
   d8a74:	4604      	mov	r4, r0
   d8a76:	f000 fc80 	bl	d937a <_ZdlPvj>
   d8a7a:	4620      	mov	r0, r4
   d8a7c:	bd10      	pop	{r4, pc}

000d8a7e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p);
   d8a7e:	f7fb bb0c 	b.w	d409a <_ZdlPv>

000d8a82 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d8a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d8a86:	f04f 0800 	mov.w	r8, #0
   d8a8a:	b086      	sub	sp, #24
   d8a8c:	461d      	mov	r5, r3
   d8a8e:	f8c0 8004 	str.w	r8, [r0, #4]
   d8a92:	4604      	mov	r4, r0
   d8a94:	460e      	mov	r6, r1
   d8a96:	4617      	mov	r7, r2
    struct timeval tv = {};
   d8a98:	4641      	mov	r1, r8
   d8a9a:	2210      	movs	r2, #16
   d8a9c:	a802      	add	r0, sp, #8
   d8a9e:	f001 fc31 	bl	da304 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d8aa2:	1c6b      	adds	r3, r5, #1
   d8aa4:	d009      	beq.n	d8aba <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d8aa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d8aaa:	fbb5 f3f0 	udiv	r3, r5, r0
   d8aae:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d8ab2:	fb00 5313 	mls	r3, r0, r3, r5
   d8ab6:	4358      	muls	r0, r3
   d8ab8:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d8aba:	6960      	ldr	r0, [r4, #20]
   d8abc:	2310      	movs	r3, #16
   d8abe:	9300      	str	r3, [sp, #0]
   d8ac0:	6800      	ldr	r0, [r0, #0]
   d8ac2:	ab02      	add	r3, sp, #8
   d8ac4:	f241 0205 	movw	r2, #4101	; 0x1005
   d8ac8:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8acc:	f7fd fab4 	bl	d6038 <sock_setsockopt>
    if (ret < 0) {
   d8ad0:	2800      	cmp	r0, #0
   d8ad2:	da07      	bge.n	d8ae4 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d8ad4:	f7fd fc9e 	bl	d6414 <__errno>
   d8ad8:	6803      	ldr	r3, [r0, #0]
   d8ada:	6063      	str	r3, [r4, #4]
        return 0;
   d8adc:	2000      	movs	r0, #0
}
   d8ade:	b006      	add	sp, #24
   d8ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d8ae4:	6960      	ldr	r0, [r4, #20]
   d8ae6:	2300      	movs	r3, #0
   d8ae8:	6800      	ldr	r0, [r0, #0]
   d8aea:	463a      	mov	r2, r7
   d8aec:	4631      	mov	r1, r6
   d8aee:	f7fd fac3 	bl	d6078 <sock_send>
    if (ret < 0) {
   d8af2:	1e03      	subs	r3, r0, #0
   d8af4:	dbee      	blt.n	d8ad4 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d8af6:	4618      	mov	r0, r3
   d8af8:	e7f1      	b.n	d8ade <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d8afc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d8afc:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d8afe:	6984      	ldr	r4, [r0, #24]
   d8b00:	4b0a      	ldr	r3, [pc, #40]	; (d8b2c <_ZN9TCPClientD1Ev+0x30>)
   d8b02:	6003      	str	r3, [r0, #0]
   d8b04:	4605      	mov	r5, r0
   d8b06:	b17c      	cbz	r4, d8b28 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d8b08:	6863      	ldr	r3, [r4, #4]
   d8b0a:	3b01      	subs	r3, #1
   d8b0c:	6063      	str	r3, [r4, #4]
   d8b0e:	b95b      	cbnz	r3, d8b28 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d8b10:	6823      	ldr	r3, [r4, #0]
   d8b12:	4620      	mov	r0, r4
   d8b14:	689b      	ldr	r3, [r3, #8]
   d8b16:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8b18:	68a3      	ldr	r3, [r4, #8]
   d8b1a:	3b01      	subs	r3, #1
   d8b1c:	60a3      	str	r3, [r4, #8]
   d8b1e:	b91b      	cbnz	r3, d8b28 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d8b20:	6823      	ldr	r3, [r4, #0]
   d8b22:	4620      	mov	r0, r4
   d8b24:	68db      	ldr	r3, [r3, #12]
   d8b26:	4798      	blx	r3
   d8b28:	4628      	mov	r0, r5
   d8b2a:	bd38      	pop	{r3, r4, r5, pc}
   d8b2c:	000dae34 	.word	0x000dae34

000d8b30 <_ZN9TCPClientD0Ev>:
   d8b30:	b510      	push	{r4, lr}
   d8b32:	4604      	mov	r4, r0
   d8b34:	f7ff ffe2 	bl	d8afc <_ZN9TCPClientD1Ev>
   d8b38:	4620      	mov	r0, r4
   d8b3a:	211c      	movs	r1, #28
   d8b3c:	f000 fc1d 	bl	d937a <_ZdlPvj>
   d8b40:	4620      	mov	r0, r4
   d8b42:	bd10      	pop	{r4, pc}

000d8b44 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d8b44:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8b46:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d8b48:	4b05      	ldr	r3, [pc, #20]	; (d8b60 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d8b4a:	4604      	mov	r4, r0
   d8b4c:	358c      	adds	r5, #140	; 0x8c
   d8b4e:	f844 3b04 	str.w	r3, [r4], #4
   d8b52:	4606      	mov	r6, r0
   d8b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8b58:	682b      	ldr	r3, [r5, #0]
   d8b5a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d8b5c:	4630      	mov	r0, r6
   d8b5e:	bd70      	pop	{r4, r5, r6, pc}
   d8b60:	000dad6c 	.word	0x000dad6c

000d8b64 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d8b64:	b510      	push	{r4, lr}
   d8b66:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8b68:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8b6c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8b70:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d8b72:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8b74:	d005      	beq.n	d8b82 <_ZN9TCPClient4peekEv+0x1e>
   d8b76:	6963      	ldr	r3, [r4, #20]
   d8b78:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d8b7c:	4413      	add	r3, r2
   d8b7e:	7918      	ldrb	r0, [r3, #4]
}
   d8b80:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8b82:	6803      	ldr	r3, [r0, #0]
   d8b84:	691b      	ldr	r3, [r3, #16]
   d8b86:	4798      	blx	r3
   d8b88:	2800      	cmp	r0, #0
   d8b8a:	d1f4      	bne.n	d8b76 <_ZN9TCPClient4peekEv+0x12>
   d8b8c:	f04f 30ff 	mov.w	r0, #4294967295
   d8b90:	e7f6      	b.n	d8b80 <_ZN9TCPClient4peekEv+0x1c>

000d8b92 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d8b92:	b510      	push	{r4, lr}
   d8b94:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8b96:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8b9a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8b9e:	429a      	cmp	r2, r3
int TCPClient::read() {
   d8ba0:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8ba2:	d008      	beq.n	d8bb6 <_ZN9TCPClient4readEv+0x24>
   d8ba4:	6963      	ldr	r3, [r4, #20]
   d8ba6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d8baa:	1c51      	adds	r1, r2, #1
   d8bac:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d8bb0:	4413      	add	r3, r2
   d8bb2:	7918      	ldrb	r0, [r3, #4]
}
   d8bb4:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8bb6:	6803      	ldr	r3, [r0, #0]
   d8bb8:	691b      	ldr	r3, [r3, #16]
   d8bba:	4798      	blx	r3
   d8bbc:	2800      	cmp	r0, #0
   d8bbe:	d1f1      	bne.n	d8ba4 <_ZN9TCPClient4readEv+0x12>
   d8bc0:	f04f 30ff 	mov.w	r0, #4294967295
   d8bc4:	e7f6      	b.n	d8bb4 <_ZN9TCPClient4readEv+0x22>

000d8bc6 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d8bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8bc8:	6943      	ldr	r3, [r0, #20]
   d8bca:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d8bcc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8bd0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8bd4:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d8bd6:	4605      	mov	r5, r0
   d8bd8:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d8bda:	d016      	beq.n	d8c0a <_ZN9TCPClient4readEPhj+0x44>
   d8bdc:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d8bde:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d8be2:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d8be6:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d8be8:	42bc      	cmp	r4, r7
   d8bea:	bf28      	it	cs
   d8bec:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d8bee:	3304      	adds	r3, #4
   d8bf0:	4622      	mov	r2, r4
   d8bf2:	4419      	add	r1, r3
   d8bf4:	4630      	mov	r0, r6
   d8bf6:	f001 fb5d 	bl	da2b4 <memcpy>
   d8bfa:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d8bfc:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8c00:	4423      	add	r3, r4
   d8c02:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d8c06:	4620      	mov	r0, r4
   d8c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d8c0a:	6803      	ldr	r3, [r0, #0]
   d8c0c:	691b      	ldr	r3, [r3, #16]
   d8c0e:	4798      	blx	r3
   d8c10:	2800      	cmp	r0, #0
   d8c12:	d1e3      	bne.n	d8bdc <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d8c14:	f04f 34ff 	mov.w	r4, #4294967295
   d8c18:	e7f5      	b.n	d8c06 <_ZN9TCPClient4readEPhj+0x40>

000d8c1a <_ZN9TCPClient12flush_bufferEv>:
   d8c1a:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d8c1c:	2300      	movs	r3, #0
   d8c1e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d8c22:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d8c24:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d8c28:	4770      	bx	lr

000d8c2a <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8c2e:	461f      	mov	r7, r3
    stop();
   d8c30:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8c32:	460c      	mov	r4, r1
    stop();
   d8c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8c36:	b08a      	sub	sp, #40	; 0x28
   d8c38:	4605      	mov	r5, r0
   d8c3a:	4616      	mov	r6, r2
    stop();
   d8c3c:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d8c3e:	7d23      	ldrb	r3, [r4, #20]
   d8c40:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d8c44:	2b04      	cmp	r3, #4
   d8c46:	bf0c      	ite	eq
   d8c48:	2002      	moveq	r0, #2
   d8c4a:	200a      	movne	r0, #10
   d8c4c:	2206      	movs	r2, #6
   d8c4e:	2101      	movs	r1, #1
   d8c50:	f7fd fa1a 	bl	d6088 <sock_socket>
   d8c54:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d8c58:	696b      	ldr	r3, [r5, #20]
   d8c5a:	681b      	ldr	r3, [r3, #0]
   d8c5c:	2b00      	cmp	r3, #0
   d8c5e:	da08      	bge.n	d8c72 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d8c60:	682b      	ldr	r3, [r5, #0]
   d8c62:	4628      	mov	r0, r5
   d8c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8c66:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d8c68:	4798      	blx	r3
}
   d8c6a:	4620      	mov	r0, r4
   d8c6c:	b00a      	add	sp, #40	; 0x28
   d8c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d8c72:	4628      	mov	r0, r5
   d8c74:	f7ff ffd1 	bl	d8c1a <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d8c78:	b1b7      	cbz	r7, d8ca8 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d8c7a:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8c7c:	a903      	add	r1, sp, #12
   d8c7e:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d8c80:	9303      	str	r3, [sp, #12]
   d8c82:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8c86:	f7fd f82b 	bl	d5ce0 <if_index_to_name>
   d8c8a:	2800      	cmp	r0, #0
   d8c8c:	d1e8      	bne.n	d8c60 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d8c8e:	6968      	ldr	r0, [r5, #20]
   d8c90:	2306      	movs	r3, #6
   d8c92:	9300      	str	r3, [sp, #0]
   d8c94:	6800      	ldr	r0, [r0, #0]
   d8c96:	ab03      	add	r3, sp, #12
   d8c98:	f241 020b 	movw	r2, #4107	; 0x100b
   d8c9c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8ca0:	f7fd f9ca 	bl	d6038 <sock_setsockopt>
   d8ca4:	2800      	cmp	r0, #0
   d8ca6:	d1db      	bne.n	d8c60 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d8ca8:	221c      	movs	r2, #28
   d8caa:	2100      	movs	r1, #0
   d8cac:	a803      	add	r0, sp, #12
   d8cae:	f001 fb29 	bl	da304 <memset>
    if (ip.version() == 4) {
   d8cb2:	7d23      	ldrb	r3, [r4, #20]
   d8cb4:	2b04      	cmp	r3, #4
   d8cb6:	d11d      	bne.n	d8cf4 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d8cb8:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d8cbc:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d8cbe:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d8cc2:	f7fd f911 	bl	d5ee8 <inet_htons>
   d8cc6:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d8cca:	6860      	ldr	r0, [r4, #4]
   d8ccc:	f7fd f904 	bl	d5ed8 <inet_htonl>
   d8cd0:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d8cd2:	696b      	ldr	r3, [r5, #20]
   d8cd4:	221c      	movs	r2, #28
   d8cd6:	6818      	ldr	r0, [r3, #0]
   d8cd8:	a903      	add	r1, sp, #12
   d8cda:	f7fd f9bd 	bl	d6058 <sock_connect>
   d8cde:	2800      	cmp	r0, #0
   d8ce0:	d1be      	bne.n	d8c60 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d8ce2:	3404      	adds	r4, #4
   d8ce4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8ce6:	696d      	ldr	r5, [r5, #20]
   d8ce8:	358c      	adds	r5, #140	; 0x8c
   d8cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8cec:	6823      	ldr	r3, [r4, #0]
   d8cee:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d8cf0:	2401      	movs	r4, #1
   d8cf2:	e7ba      	b.n	d8c6a <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d8cf4:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d8cf8:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d8cfa:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d8cfe:	f7fd f8f3 	bl	d5ee8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8d02:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d8d04:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8d08:	1d23      	adds	r3, r4, #4
   d8d0a:	f104 0714 	add.w	r7, r4, #20
   d8d0e:	6818      	ldr	r0, [r3, #0]
   d8d10:	6859      	ldr	r1, [r3, #4]
   d8d12:	4632      	mov	r2, r6
   d8d14:	c203      	stmia	r2!, {r0, r1}
   d8d16:	3308      	adds	r3, #8
   d8d18:	42bb      	cmp	r3, r7
   d8d1a:	4616      	mov	r6, r2
   d8d1c:	d1f7      	bne.n	d8d0e <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d8d1e:	e7d8      	b.n	d8cd2 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d8d20 <_ZN9TCPClient9availableEv>:
{
   d8d20:	b530      	push	{r4, r5, lr}
   d8d22:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d8d24:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d8d28:	b08b      	sub	sp, #44	; 0x2c
   d8d2a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d8d2c:	b12b      	cbz	r3, d8d3a <_ZN9TCPClient9availableEv+0x1a>
   d8d2e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d8d32:	429a      	cmp	r2, r3
   d8d34:	d101      	bne.n	d8d3a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d8d36:	f7ff ff70 	bl	d8c1a <_ZN9TCPClient12flush_bufferEv>
   d8d3a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d8d3c:	6808      	ldr	r0, [r1, #0]
   d8d3e:	2800      	cmp	r0, #0
   d8d40:	db18      	blt.n	d8d74 <_ZN9TCPClient9availableEv+0x54>
   d8d42:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d8d46:	2d7f      	cmp	r5, #127	; 0x7f
   d8d48:	d814      	bhi.n	d8d74 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d8d4a:	3104      	adds	r1, #4
   d8d4c:	2308      	movs	r3, #8
   d8d4e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d8d52:	4429      	add	r1, r5
   d8d54:	f7fd f988 	bl	d6068 <sock_recv>
            if (ret > 0) {
   d8d58:	2800      	cmp	r0, #0
   d8d5a:	dd13      	ble.n	d8d84 <_ZN9TCPClient9availableEv+0x64>
   d8d5c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d8d5e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8d62:	b90a      	cbnz	r2, d8d68 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d8d64:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d8d68:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d8d6a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8d6e:	4410      	add	r0, r2
   d8d70:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d8d74:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d8d76:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d8d7a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d8d7e:	1ac0      	subs	r0, r0, r3
   d8d80:	b00b      	add	sp, #44	; 0x2c
   d8d82:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d8d84:	f7fd fb46 	bl	d6414 <__errno>
   d8d88:	6803      	ldr	r3, [r0, #0]
   d8d8a:	2b0b      	cmp	r3, #11
   d8d8c:	d0f2      	beq.n	d8d74 <_ZN9TCPClient9availableEv+0x54>
   d8d8e:	f7fd fb41 	bl	d6414 <__errno>
   d8d92:	6803      	ldr	r3, [r0, #0]
   d8d94:	2b0b      	cmp	r3, #11
   d8d96:	d0ed      	beq.n	d8d74 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d8d98:	2320      	movs	r3, #32
   d8d9a:	2500      	movs	r5, #0
   d8d9c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d8da0:	f7fd fb38 	bl	d6414 <__errno>
   d8da4:	6803      	ldr	r3, [r0, #0]
   d8da6:	9301      	str	r3, [sp, #4]
   d8da8:	4b08      	ldr	r3, [pc, #32]	; (d8dcc <_ZN9TCPClient9availableEv+0xac>)
   d8daa:	4909      	ldr	r1, [pc, #36]	; (d8dd0 <_ZN9TCPClient9availableEv+0xb0>)
   d8dac:	9300      	str	r3, [sp, #0]
   d8dae:	aa02      	add	r2, sp, #8
   d8db0:	462b      	mov	r3, r5
   d8db2:	2032      	movs	r0, #50	; 0x32
   d8db4:	f7fd fa08 	bl	d61c8 <log_message>
                    sock_close(d_->sock);
   d8db8:	6963      	ldr	r3, [r4, #20]
   d8dba:	6818      	ldr	r0, [r3, #0]
   d8dbc:	f7fd f944 	bl	d6048 <sock_close>
   d8dc0:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d8dc2:	f04f 32ff 	mov.w	r2, #4294967295
   d8dc6:	601a      	str	r2, [r3, #0]
   d8dc8:	e7d4      	b.n	d8d74 <_ZN9TCPClient9availableEv+0x54>
   d8dca:	bf00      	nop
   d8dcc:	000dae00 	.word	0x000dae00
   d8dd0:	000dab88 	.word	0x000dab88

000d8dd4 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d8dd4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d8dd6:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d8dd8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d8dda:	6818      	ldr	r0, [r3, #0]
   d8ddc:	2800      	cmp	r0, #0
   d8dde:	db01      	blt.n	d8de4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d8de0:	f7fd f932 	bl	d6048 <sock_close>
   d8de4:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d8de6:	f04f 32ff 	mov.w	r2, #4294967295
   d8dea:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d8dec:	6960      	ldr	r0, [r4, #20]
   d8dee:	2211      	movs	r2, #17
   d8df0:	2100      	movs	r1, #0
   d8df2:	308c      	adds	r0, #140	; 0x8c
   d8df4:	f001 fa86 	bl	da304 <memset>
    flush_buffer();
   d8df8:	4620      	mov	r0, r4
}
   d8dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d8dfe:	f7ff bf0c 	b.w	d8c1a <_ZN9TCPClient12flush_bufferEv>

000d8e02 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d8e02:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d8e04:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d8e06:	4604      	mov	r4, r0
          total(0) {
   d8e08:	6001      	str	r1, [r0, #0]
   d8e0a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d8e0e:	3088      	adds	r0, #136	; 0x88
   d8e10:	f7ff fc02 	bl	d8618 <_ZN9IPAddressC1Ev>
}
   d8e14:	4620      	mov	r0, r4
   d8e16:	bd10      	pop	{r4, pc}

000d8e18 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d8e18:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8e1a:	2300      	movs	r3, #0
   d8e1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8e20:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d8e24:	4a0e      	ldr	r2, [pc, #56]	; (d8e60 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d8e26:	6103      	str	r3, [r0, #16]
   d8e28:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d8e2a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d8e2c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8e2e:	20ac      	movs	r0, #172	; 0xac
   d8e30:	9101      	str	r1, [sp, #4]
   d8e32:	f7fb f92e 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d8e36:	1e05      	subs	r5, r0, #0
   d8e38:	f105 060c 	add.w	r6, r5, #12
   d8e3c:	d008      	beq.n	d8e50 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d8e3e:	2301      	movs	r3, #1
   d8e40:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d8e44:	4b07      	ldr	r3, [pc, #28]	; (d8e64 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8e46:	9901      	ldr	r1, [sp, #4]
   d8e48:	602b      	str	r3, [r5, #0]
   d8e4a:	4630      	mov	r0, r6
   d8e4c:	f7ff ffd9 	bl	d8e02 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d8e50:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d8e52:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d8e56:	f7ff fee0 	bl	d8c1a <_ZN9TCPClient12flush_bufferEv>
}
   d8e5a:	b002      	add	sp, #8
   d8e5c:	bd70      	pop	{r4, r5, r6, pc}
   d8e5e:	bf00      	nop
   d8e60:	000dae34 	.word	0x000dae34
   d8e64:	000dae18 	.word	0x000dae18

000d8e68 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d8e68:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d8e6a:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d8e6e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8e70:	f7ff ffd2 	bl	d8e18 <_ZN9TCPClientC1Ei>
}
   d8e74:	4620      	mov	r0, r4
   d8e76:	bd10      	pop	{r4, pc}

000d8e78 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d8e78:	b510      	push	{r4, lr}
   d8e7a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8e7c:	6800      	ldr	r0, [r0, #0]
   d8e7e:	2800      	cmp	r0, #0
   d8e80:	db01      	blt.n	d8e86 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d8e82:	f7fd f8e1 	bl	d6048 <sock_close>
    }
}
   d8e86:	4620      	mov	r0, r4
   d8e88:	bd10      	pop	{r4, pc}

000d8e8a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d8e8a:	300c      	adds	r0, #12
   d8e8c:	f7ff bff4 	b.w	d8e78 <_ZN9TCPClient4DataD1Ev>

000d8e90 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8e94:	4698      	mov	r8, r3
    stop();
   d8e96:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8e98:	b093      	sub	sp, #76	; 0x4c
   d8e9a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d8e9c:	2400      	movs	r4, #0
    stop();
   d8e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8ea0:	4606      	mov	r6, r0
   d8ea2:	4617      	mov	r7, r2
    stop();
   d8ea4:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8ea6:	4628      	mov	r0, r5
   d8ea8:	466b      	mov	r3, sp
   d8eaa:	4622      	mov	r2, r4
   d8eac:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d8eae:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8eb0:	f7fc feee 	bl	d5c90 <netdb_getaddrinfo>
   d8eb4:	4605      	mov	r5, r0
   d8eb6:	2800      	cmp	r0, #0
   d8eb8:	d163      	bne.n	d8f82 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d8eba:	9b00      	ldr	r3, [sp, #0]
   d8ebc:	2b00      	cmp	r3, #0
   d8ebe:	d04b      	beq.n	d8f58 <_ZN9TCPClient7connectEPKctm+0xc8>
   d8ec0:	695b      	ldr	r3, [r3, #20]
   d8ec2:	2b00      	cmp	r3, #0
   d8ec4:	d048      	beq.n	d8f58 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d8ec6:	a806      	add	r0, sp, #24
   d8ec8:	f7ff fba6 	bl	d8618 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d8ecc:	9b00      	ldr	r3, [sp, #0]
   d8ece:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d8ed0:	7863      	ldrb	r3, [r4, #1]
   d8ed2:	2b02      	cmp	r3, #2
   d8ed4:	d104      	bne.n	d8ee0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8ed6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8ed8:	a806      	add	r0, sp, #24
   d8eda:	f7fd fccd 	bl	d6878 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d8ede:	e026      	b.n	d8f2e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d8ee0:	2b0a      	cmp	r3, #10
   d8ee2:	d124      	bne.n	d8f2e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d8ee4:	2211      	movs	r2, #17
   d8ee6:	4629      	mov	r1, r5
   d8ee8:	a801      	add	r0, sp, #4
   d8eea:	f001 fa0b 	bl	da304 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8eee:	68a3      	ldr	r3, [r4, #8]
   d8ef0:	2b00      	cmp	r3, #0
   d8ef2:	d038      	beq.n	d8f66 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8ef4:	f104 0308 	add.w	r3, r4, #8
   d8ef8:	f10d 0c04 	add.w	ip, sp, #4
   d8efc:	3418      	adds	r4, #24
   d8efe:	6818      	ldr	r0, [r3, #0]
   d8f00:	6859      	ldr	r1, [r3, #4]
   d8f02:	4662      	mov	r2, ip
   d8f04:	c203      	stmia	r2!, {r0, r1}
   d8f06:	3308      	adds	r3, #8
   d8f08:	42a3      	cmp	r3, r4
   d8f0a:	4694      	mov	ip, r2
   d8f0c:	d1f7      	bne.n	d8efe <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d8f0e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d8f10:	a901      	add	r1, sp, #4
   d8f12:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d8f14:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d8f18:	f7ff fb8c 	bl	d8634 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d8f1c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d8f20:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d8f24:	ac07      	add	r4, sp, #28
   d8f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8f28:	f8dc 3000 	ldr.w	r3, [ip]
   d8f2c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d8f2e:	a806      	add	r0, sp, #24
   d8f30:	f7ff fb92 	bl	d8658 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d8f34:	b180      	cbz	r0, d8f58 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d8f36:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d8f38:	ad07      	add	r5, sp, #28
   d8f3a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d8f3e:	4b12      	ldr	r3, [pc, #72]	; (d8f88 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d8f40:	930c      	str	r3, [sp, #48]	; 0x30
   d8f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8f44:	ac0d      	add	r4, sp, #52	; 0x34
   d8f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8f48:	682b      	ldr	r3, [r5, #0]
   d8f4a:	7023      	strb	r3, [r4, #0]
   d8f4c:	463a      	mov	r2, r7
   d8f4e:	4643      	mov	r3, r8
   d8f50:	a90c      	add	r1, sp, #48	; 0x30
   d8f52:	4630      	mov	r0, r6
   d8f54:	47c8      	blx	r9
   d8f56:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d8f58:	9800      	ldr	r0, [sp, #0]
   d8f5a:	f7fc fe91 	bl	d5c80 <netdb_freeaddrinfo>
}
   d8f5e:	4628      	mov	r0, r5
   d8f60:	b013      	add	sp, #76	; 0x4c
   d8f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8f66:	68e3      	ldr	r3, [r4, #12]
   d8f68:	2b00      	cmp	r3, #0
   d8f6a:	d1c3      	bne.n	d8ef4 <_ZN9TCPClient7connectEPKctm+0x64>
   d8f6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d8f70:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d8f74:	f7fc ffb0 	bl	d5ed8 <inet_htonl>
   d8f78:	4581      	cmp	r9, r0
   d8f7a:	d1bb      	bne.n	d8ef4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d8f7c:	f104 0114 	add.w	r1, r4, #20
   d8f80:	e7aa      	b.n	d8ed8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8f82:	4625      	mov	r5, r4
   d8f84:	e7e8      	b.n	d8f58 <_ZN9TCPClient7connectEPKctm+0xc8>
   d8f86:	bf00      	nop
   d8f88:	000dad6c 	.word	0x000dad6c

000d8f8c <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv>:
                results[index++] = *result;
            }
        }

    protected:
        static void callback(WiFiAccessPoint* result, void* cookie)
   d8f8c:	b530      	push	{r4, r5, lr}
            if (index<count) {
   d8f8e:	e9d1 4301 	ldrd	r4, r3, [r1, #4]
   d8f92:	429c      	cmp	r4, r3
   d8f94:	da10      	bge.n	d8fb8 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv+0x2c>
                results[index++] = *result;
   d8f96:	680b      	ldr	r3, [r1, #0]
   d8f98:	1c62      	adds	r2, r4, #1
   d8f9a:	604a      	str	r2, [r1, #4]
   d8f9c:	4605      	mov	r5, r0
   d8f9e:	2238      	movs	r2, #56	; 0x38
   d8fa0:	fb02 3404 	mla	r4, r2, r4, r3
   d8fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8fb0:	e895 0003 	ldmia.w	r5, {r0, r1}
   d8fb4:	e884 0003 	stmia.w	r4, {r0, r1}
        {
            ((APArrayPopulator*)cookie)->addResult(result);
        }
   d8fb8:	bd30      	pop	{r4, r5, pc}

000d8fba <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8fba:	2200      	movs	r2, #0
   d8fbc:	6840      	ldr	r0, [r0, #4]
   d8fbe:	4611      	mov	r1, r2
   d8fc0:	f7fd b988 	b.w	d62d4 <network_listening>

000d8fc4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8fc4:	2200      	movs	r2, #0
   d8fc6:	6840      	ldr	r0, [r0, #4]
   d8fc8:	4611      	mov	r1, r2
   d8fca:	f7fd b9ab 	b.w	d6324 <network_get_listen_timeout>

000d8fce <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8fce:	6840      	ldr	r0, [r0, #4]
   d8fd0:	2200      	movs	r2, #0
   d8fd2:	f7fd b99f 	b.w	d6314 <network_set_listen_timeout>

000d8fd6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8fd6:	6840      	ldr	r0, [r0, #4]
   d8fd8:	2200      	movs	r2, #0
   d8fda:	f081 0101 	eor.w	r1, r1, #1
   d8fde:	f7fd b971 	b.w	d62c4 <network_listen>

000d8fe2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8fe2:	2200      	movs	r2, #0
   d8fe4:	6840      	ldr	r0, [r0, #4]
   d8fe6:	4611      	mov	r1, r2
   d8fe8:	f7fd b944 	b.w	d6274 <network_connecting>

000d8fec <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8fec:	6840      	ldr	r0, [r0, #4]
   d8fee:	2200      	movs	r2, #0
   d8ff0:	2102      	movs	r1, #2
   d8ff2:	f7fd b947 	b.w	d6284 <network_disconnect>
	...

000d8ff8 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>:
        APScan apScan(results, result_count);
        return apScan.start();
    }

#if !HAL_PLATFORM_WIFI_SCAN_ONLY
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
   d8ff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
            this->index = 0;
   d8ffa:	2300      	movs	r3, #0
            this->results = results;
   d8ffc:	9101      	str	r1, [sp, #4]
            return std::min(count, wlan_get_credentials(callback, this));
   d8ffe:	4806      	ldr	r0, [pc, #24]	; (d9018 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj+0x20>)
            this->index = 0;
   d9000:	9302      	str	r3, [sp, #8]
            return std::min(count, wlan_get_credentials(callback, this));
   d9002:	a901      	add	r1, sp, #4
            this->count = size;
   d9004:	9203      	str	r2, [sp, #12]
            return std::min(count, wlan_get_credentials(callback, this));
   d9006:	f7fd f8cf 	bl	d61a8 <wlan_get_credentials>
        APList apList(results, result_count);
        return apList.start();
    }
   d900a:	9b03      	ldr	r3, [sp, #12]
   d900c:	4298      	cmp	r0, r3
   d900e:	bfa8      	it	ge
   d9010:	4618      	movge	r0, r3
   d9012:	b005      	add	sp, #20
   d9014:	f85d fb04 	ldr.w	pc, [sp], #4
   d9018:	000d8f8d 	.word	0x000d8f8d

000d901c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d901c:	4b02      	ldr	r3, [pc, #8]	; (d9028 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d901e:	2204      	movs	r2, #4
   d9020:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d9022:	4a02      	ldr	r2, [pc, #8]	; (d902c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d9024:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d9026:	4770      	bx	lr
   d9028:	2003e7bc 	.word	0x2003e7bc
   d902c:	000dae80 	.word	0x000dae80

000d9030 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d9030:	2300      	movs	r3, #0
   d9032:	6840      	ldr	r0, [r0, #4]
   d9034:	461a      	mov	r2, r3
   d9036:	f7fd b915 	b.w	d6264 <network_connect>

000d903a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d903a:	6840      	ldr	r0, [r0, #4]
   d903c:	2200      	movs	r2, #0
   d903e:	2102      	movs	r1, #2
   d9040:	f7fd b920 	b.w	d6284 <network_disconnect>

000d9044 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9044:	2200      	movs	r2, #0
   d9046:	6840      	ldr	r0, [r0, #4]
   d9048:	4611      	mov	r1, r2
   d904a:	f7fd b913 	b.w	d6274 <network_connecting>

000d904e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d904e:	2200      	movs	r2, #0
   d9050:	6840      	ldr	r0, [r0, #4]
   d9052:	4611      	mov	r1, r2
   d9054:	f7fd b91e 	b.w	d6294 <network_ready>

000d9058 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d9058:	2300      	movs	r3, #0
   d905a:	6840      	ldr	r0, [r0, #4]
   d905c:	461a      	mov	r2, r3
   d905e:	4619      	mov	r1, r3
   d9060:	f7fd b920 	b.w	d62a4 <network_on>

000d9064 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d9064:	2300      	movs	r3, #0
   d9066:	6840      	ldr	r0, [r0, #4]
   d9068:	461a      	mov	r2, r3
   d906a:	4619      	mov	r1, r3
   d906c:	f7fd b922 	b.w	d62b4 <network_off>

000d9070 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d9070:	6840      	ldr	r0, [r0, #4]
   d9072:	2100      	movs	r1, #0
   d9074:	f7fd b95e 	b.w	d6334 <network_is_on>

000d9078 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d9078:	6840      	ldr	r0, [r0, #4]
   d907a:	2100      	movs	r1, #0
   d907c:	f7fd b962 	b.w	d6344 <network_is_off>

000d9080 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9080:	6840      	ldr	r0, [r0, #4]
   d9082:	2200      	movs	r2, #0
   d9084:	f081 0101 	eor.w	r1, r1, #1
   d9088:	f7fd b91c 	b.w	d62c4 <network_listen>

000d908c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d908c:	6840      	ldr	r0, [r0, #4]
   d908e:	2200      	movs	r2, #0
   d9090:	f7fd b940 	b.w	d6314 <network_set_listen_timeout>

000d9094 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9094:	2200      	movs	r2, #0
   d9096:	6840      	ldr	r0, [r0, #4]
   d9098:	4611      	mov	r1, r2
   d909a:	f7fd b943 	b.w	d6324 <network_get_listen_timeout>

000d909e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d909e:	2200      	movs	r2, #0
   d90a0:	6840      	ldr	r0, [r0, #4]
   d90a2:	4611      	mov	r1, r2
   d90a4:	f7fd b916 	b.w	d62d4 <network_listening>

000d90a8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d90a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d90ac:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d90ae:	b095      	sub	sp, #84	; 0x54
   d90b0:	4616      	mov	r6, r2
   d90b2:	460d      	mov	r5, r1
   d90b4:	4607      	mov	r7, r0
    IPAddress addr;
   d90b6:	f7ff faaf 	bl	d8618 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d90ba:	4621      	mov	r1, r4
   d90bc:	2218      	movs	r2, #24
   d90be:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d90c0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d90c2:	f001 f91f 	bl	da304 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d90c6:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d90c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d90cc:	4621      	mov	r1, r4
   d90ce:	466b      	mov	r3, sp
   d90d0:	aa0c      	add	r2, sp, #48	; 0x30
   d90d2:	4630      	mov	r0, r6
   d90d4:	f7fc fddc 	bl	d5c90 <netdb_getaddrinfo>
    if (!r) {
   d90d8:	4604      	mov	r4, r0
   d90da:	2800      	cmp	r0, #0
   d90dc:	d14c      	bne.n	d9178 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d90de:	4602      	mov	r2, r0
   d90e0:	2101      	movs	r1, #1
   d90e2:	6868      	ldr	r0, [r5, #4]
   d90e4:	f7fd f8d6 	bl	d6294 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d90e8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d90ea:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d90ec:	4622      	mov	r2, r4
   d90ee:	6868      	ldr	r0, [r5, #4]
   d90f0:	f7fd f8d0 	bl	d6294 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d90f4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d90f6:	4681      	mov	r9, r0
        bool ok = false;
   d90f8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d90fa:	2e00      	cmp	r6, #0
   d90fc:	d03c      	beq.n	d9178 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d90fe:	2900      	cmp	r1, #0
   d9100:	d13a      	bne.n	d9178 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9102:	6873      	ldr	r3, [r6, #4]
   d9104:	2b02      	cmp	r3, #2
   d9106:	d003      	beq.n	d9110 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d9108:	2b0a      	cmp	r3, #10
   d910a:	d011      	beq.n	d9130 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d910c:	69f6      	ldr	r6, [r6, #28]
   d910e:	e7f4      	b.n	d90fa <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d9110:	f1b8 0f00 	cmp.w	r8, #0
   d9114:	d00a      	beq.n	d912c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9116:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d9118:	a806      	add	r0, sp, #24
   d911a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d911c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d911e:	f7ff fabf 	bl	d86a0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d9122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9124:	1d3c      	adds	r4, r7, #4
   d9126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9128:	682b      	ldr	r3, [r5, #0]
   d912a:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d912c:	4641      	mov	r1, r8
   d912e:	e7ed      	b.n	d910c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9130:	f1b9 0f00 	cmp.w	r9, #0
   d9134:	d101      	bne.n	d913a <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d9136:	4649      	mov	r1, r9
   d9138:	e7e8      	b.n	d910c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d913a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d913c:	2210      	movs	r2, #16
   d913e:	a801      	add	r0, sp, #4
   d9140:	f001 f8e0 	bl	da304 <memset>
                    a.v = 6;
   d9144:	2306      	movs	r3, #6
   d9146:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d914a:	ad01      	add	r5, sp, #4
   d914c:	f104 0308 	add.w	r3, r4, #8
   d9150:	3418      	adds	r4, #24
   d9152:	6818      	ldr	r0, [r3, #0]
   d9154:	6859      	ldr	r1, [r3, #4]
   d9156:	462a      	mov	r2, r5
   d9158:	c203      	stmia	r2!, {r0, r1}
   d915a:	3308      	adds	r3, #8
   d915c:	42a3      	cmp	r3, r4
   d915e:	4615      	mov	r5, r2
   d9160:	d1f7      	bne.n	d9152 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d9162:	a901      	add	r1, sp, #4
   d9164:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d9166:	ad07      	add	r5, sp, #28
   d9168:	f7ff fa64 	bl	d8634 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d916c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d916e:	1d3c      	adds	r4, r7, #4
   d9170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9172:	682b      	ldr	r3, [r5, #0]
   d9174:	7023      	strb	r3, [r4, #0]
   d9176:	e7de      	b.n	d9136 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9178:	9800      	ldr	r0, [sp, #0]
   d917a:	f7fc fd81 	bl	d5c80 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d917e:	4638      	mov	r0, r7
   d9180:	b015      	add	sp, #84	; 0x54
   d9182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d9188 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9188:	4b02      	ldr	r3, [pc, #8]	; (d9194 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d918a:	4a03      	ldr	r2, [pc, #12]	; (d9198 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d918c:	601a      	str	r2, [r3, #0]
   d918e:	2200      	movs	r2, #0
   d9190:	605a      	str	r2, [r3, #4]

} // spark
   d9192:	4770      	bx	lr
   d9194:	2003e7c4 	.word	0x2003e7c4
   d9198:	000daebc 	.word	0x000daebc

000d919c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d919c:	b508      	push	{r3, lr}
   d919e:	4b02      	ldr	r3, [pc, #8]	; (d91a8 <spark_protocol_instance+0xc>)
   d91a0:	681b      	ldr	r3, [r3, #0]
   d91a2:	681b      	ldr	r3, [r3, #0]
   d91a4:	9301      	str	r3, [sp, #4]
   d91a6:	bd08      	pop	{r3, pc}
   d91a8:	0003025c 	.word	0x0003025c

000d91ac <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d91ac:	b508      	push	{r3, lr}
   d91ae:	4b02      	ldr	r3, [pc, #8]	; (d91b8 <spark_protocol_set_product_id+0xc>)
   d91b0:	681b      	ldr	r3, [r3, #0]
   d91b2:	685b      	ldr	r3, [r3, #4]
   d91b4:	9301      	str	r3, [sp, #4]
   d91b6:	bd08      	pop	{r3, pc}
   d91b8:	0003025c 	.word	0x0003025c

000d91bc <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d91bc:	b508      	push	{r3, lr}
   d91be:	4b02      	ldr	r3, [pc, #8]	; (d91c8 <spark_protocol_set_product_firmware_version+0xc>)
   d91c0:	681b      	ldr	r3, [r3, #0]
   d91c2:	689b      	ldr	r3, [r3, #8]
   d91c4:	9301      	str	r3, [sp, #4]
   d91c6:	bd08      	pop	{r3, pc}
   d91c8:	0003025c 	.word	0x0003025c

000d91cc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d91cc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d91ce:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d91d0:	d902      	bls.n	d91d8 <pinAvailable+0xc>
    return false;
   d91d2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d91d4:	b002      	add	sp, #8
   d91d6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d91d8:	f1a0 030b 	sub.w	r3, r0, #11
   d91dc:	2b02      	cmp	r3, #2
   d91de:	d81a      	bhi.n	d9216 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d91e0:	4c17      	ldr	r4, [pc, #92]	; (d9240 <pinAvailable+0x74>)
   d91e2:	7821      	ldrb	r1, [r4, #0]
   d91e4:	f3bf 8f5b 	dmb	ish
   d91e8:	f011 0101 	ands.w	r1, r1, #1
   d91ec:	d10b      	bne.n	d9206 <pinAvailable+0x3a>
   d91ee:	4620      	mov	r0, r4
   d91f0:	9101      	str	r1, [sp, #4]
   d91f2:	f7fa ff54 	bl	d409e <__cxa_guard_acquire>
   d91f6:	9901      	ldr	r1, [sp, #4]
   d91f8:	b128      	cbz	r0, d9206 <pinAvailable+0x3a>
   d91fa:	4812      	ldr	r0, [pc, #72]	; (d9244 <pinAvailable+0x78>)
   d91fc:	f7fd f95e 	bl	d64bc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d9200:	4620      	mov	r0, r4
   d9202:	f7fa ff51 	bl	d40a8 <__cxa_guard_release>
   d9206:	4b0f      	ldr	r3, [pc, #60]	; (d9244 <pinAvailable+0x78>)
   d9208:	7818      	ldrb	r0, [r3, #0]
   d920a:	f7fc ff75 	bl	d60f8 <hal_spi_is_enabled>
   d920e:	2800      	cmp	r0, #0
   d9210:	d1df      	bne.n	d91d2 <pinAvailable+0x6>
  return true; // 'pin' is available
   d9212:	2001      	movs	r0, #1
   d9214:	e7de      	b.n	d91d4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d9216:	2801      	cmp	r0, #1
   d9218:	d809      	bhi.n	d922e <pinAvailable+0x62>
   d921a:	f000 f881 	bl	d9320 <_Z19__fetch_global_Wirev>
   d921e:	2100      	movs	r1, #0
   d9220:	7c00      	ldrb	r0, [r0, #16]
   d9222:	f7fc fef1 	bl	d6008 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d9226:	f080 0001 	eor.w	r0, r0, #1
   d922a:	b2c0      	uxtb	r0, r0
   d922c:	e7d2      	b.n	d91d4 <pinAvailable+0x8>
   d922e:	3809      	subs	r0, #9
   d9230:	2801      	cmp	r0, #1
   d9232:	d8ee      	bhi.n	d9212 <pinAvailable+0x46>
   d9234:	f7ff fb1e 	bl	d8874 <_Z22__fetch_global_Serial1v>
   d9238:	7c00      	ldrb	r0, [r0, #16]
   d923a:	f7fc fe8d 	bl	d5f58 <hal_usart_is_enabled>
   d923e:	e7f2      	b.n	d9226 <pinAvailable+0x5a>
   d9240:	2003e630 	.word	0x2003e630
   d9244:	2003e634 	.word	0x2003e634

000d9248 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9248:	2823      	cmp	r0, #35	; 0x23
{
   d924a:	b538      	push	{r3, r4, r5, lr}
   d924c:	4604      	mov	r4, r0
   d924e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9250:	d80a      	bhi.n	d9268 <pinMode+0x20>
   d9252:	29ff      	cmp	r1, #255	; 0xff
   d9254:	d008      	beq.n	d9268 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d9256:	f7ff ffb9 	bl	d91cc <pinAvailable>
   d925a:	b128      	cbz	r0, d9268 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d925c:	4629      	mov	r1, r5
   d925e:	4620      	mov	r0, r4
}
   d9260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d9264:	f7fc bd1c 	b.w	d5ca0 <HAL_Pin_Mode>
}
   d9268:	bd38      	pop	{r3, r4, r5, pc}

000d926a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d926a:	b538      	push	{r3, r4, r5, lr}
   d926c:	4604      	mov	r4, r0
   d926e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9270:	f7fc fd1e 	bl	d5cb0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9274:	28ff      	cmp	r0, #255	; 0xff
   d9276:	d010      	beq.n	d929a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d9278:	2806      	cmp	r0, #6
   d927a:	d804      	bhi.n	d9286 <digitalWrite+0x1c>
   d927c:	234d      	movs	r3, #77	; 0x4d
   d927e:	fa23 f000 	lsr.w	r0, r3, r0
   d9282:	07c3      	lsls	r3, r0, #31
   d9284:	d409      	bmi.n	d929a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d9286:	4620      	mov	r0, r4
   d9288:	f7ff ffa0 	bl	d91cc <pinAvailable>
   d928c:	b128      	cbz	r0, d929a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d928e:	4629      	mov	r1, r5
   d9290:	4620      	mov	r0, r4
}
   d9292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d9296:	f7fc bd13 	b.w	d5cc0 <HAL_GPIO_Write>
}
   d929a:	bd38      	pop	{r3, r4, r5, pc}

000d929c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d929c:	b510      	push	{r4, lr}
   d929e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d92a0:	f7fc fd06 	bl	d5cb0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d92a4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d92a6:	b2db      	uxtb	r3, r3
   d92a8:	2b01      	cmp	r3, #1
   d92aa:	d908      	bls.n	d92be <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d92ac:	4620      	mov	r0, r4
   d92ae:	f7ff ff8d 	bl	d91cc <pinAvailable>
   d92b2:	b120      	cbz	r0, d92be <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d92b4:	4620      	mov	r0, r4
}
   d92b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d92ba:	f7fc bd09 	b.w	d5cd0 <HAL_GPIO_Read>
}
   d92be:	2000      	movs	r0, #0
   d92c0:	bd10      	pop	{r4, pc}
	...

000d92c4 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d92c4:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d92c6:	4c08      	ldr	r4, [pc, #32]	; (d92e8 <_Z21__fetch_global_EEPROMv+0x24>)
   d92c8:	7823      	ldrb	r3, [r4, #0]
   d92ca:	f3bf 8f5b 	dmb	ish
   d92ce:	07db      	lsls	r3, r3, #31
   d92d0:	d408      	bmi.n	d92e4 <_Z21__fetch_global_EEPROMv+0x20>
   d92d2:	4620      	mov	r0, r4
   d92d4:	f7fa fee3 	bl	d409e <__cxa_guard_acquire>
   d92d8:	b120      	cbz	r0, d92e4 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d92da:	f7fc fd21 	bl	d5d20 <HAL_EEPROM_Init>
   d92de:	4620      	mov	r0, r4
   d92e0:	f7fa fee2 	bl	d40a8 <__cxa_guard_release>
	return eeprom;
}
   d92e4:	4801      	ldr	r0, [pc, #4]	; (d92ec <_Z21__fetch_global_EEPROMv+0x28>)
   d92e6:	bd10      	pop	{r4, pc}
   d92e8:	2003e7d0 	.word	0x2003e7d0
   d92ec:	2003e7d4 	.word	0x2003e7d4

000d92f0 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d92f0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d92f2:	2300      	movs	r3, #0
   d92f4:	2520      	movs	r5, #32
   d92f6:	8043      	strh	r3, [r0, #2]
   d92f8:	2314      	movs	r3, #20
{
   d92fa:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d92fc:	8003      	strh	r3, [r0, #0]
   d92fe:	6085      	str	r5, [r0, #8]
   d9300:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9302:	4906      	ldr	r1, [pc, #24]	; (d931c <_Z17acquireWireBufferv+0x2c>)
   d9304:	4628      	mov	r0, r5
   d9306:	f000 f83c 	bl	d9382 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d930a:	4904      	ldr	r1, [pc, #16]	; (d931c <_Z17acquireWireBufferv+0x2c>)
	};
   d930c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d930e:	4628      	mov	r0, r5
   d9310:	f000 f837 	bl	d9382 <_ZnajRKSt9nothrow_t>
	};
   d9314:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d9316:	4620      	mov	r0, r4
   d9318:	bd38      	pop	{r3, r4, r5, pc}
   d931a:	bf00      	nop
   d931c:	000daef0 	.word	0x000daef0

000d9320 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9320:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9322:	4d0f      	ldr	r5, [pc, #60]	; (d9360 <_Z19__fetch_global_Wirev+0x40>)
   d9324:	7829      	ldrb	r1, [r5, #0]
   d9326:	f3bf 8f5b 	dmb	ish
   d932a:	f011 0401 	ands.w	r4, r1, #1
{
   d932e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9330:	d113      	bne.n	d935a <_Z19__fetch_global_Wirev+0x3a>
   d9332:	4628      	mov	r0, r5
   d9334:	f7fa feb3 	bl	d409e <__cxa_guard_acquire>
   d9338:	b178      	cbz	r0, d935a <_Z19__fetch_global_Wirev+0x3a>
   d933a:	a801      	add	r0, sp, #4
   d933c:	f7ff ffd8 	bl	d92f0 <_Z17acquireWireBufferv>
   d9340:	aa01      	add	r2, sp, #4
   d9342:	4621      	mov	r1, r4
   d9344:	4807      	ldr	r0, [pc, #28]	; (d9364 <_Z19__fetch_global_Wirev+0x44>)
   d9346:	f7ff faeb 	bl	d8920 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d934a:	4628      	mov	r0, r5
   d934c:	f7fa feac 	bl	d40a8 <__cxa_guard_release>
   d9350:	4a05      	ldr	r2, [pc, #20]	; (d9368 <_Z19__fetch_global_Wirev+0x48>)
   d9352:	4906      	ldr	r1, [pc, #24]	; (d936c <_Z19__fetch_global_Wirev+0x4c>)
   d9354:	4803      	ldr	r0, [pc, #12]	; (d9364 <_Z19__fetch_global_Wirev+0x44>)
   d9356:	f000 f80b 	bl	d9370 <__aeabi_atexit>
	return wire;
}
   d935a:	4802      	ldr	r0, [pc, #8]	; (d9364 <_Z19__fetch_global_Wirev+0x44>)
   d935c:	b007      	add	sp, #28
   d935e:	bd30      	pop	{r4, r5, pc}
   d9360:	2003e7d8 	.word	0x2003e7d8
   d9364:	2003e7dc 	.word	0x2003e7dc
   d9368:	2003df48 	.word	0x2003df48
   d936c:	000d88c9 	.word	0x000d88c9

000d9370 <__aeabi_atexit>:
   d9370:	460b      	mov	r3, r1
   d9372:	4601      	mov	r1, r0
   d9374:	4618      	mov	r0, r3
   d9376:	f000 bf6d 	b.w	da254 <__cxa_atexit>

000d937a <_ZdlPvj>:
   d937a:	f7fa be8e 	b.w	d409a <_ZdlPv>

000d937e <_ZnwjRKSt9nothrow_t>:
   d937e:	f7fa be88 	b.w	d4092 <_Znwj>

000d9382 <_ZnajRKSt9nothrow_t>:
   d9382:	f7fa be88 	b.w	d4096 <_Znaj>

000d9386 <_ZSt25__throw_bad_function_callv>:
   d9386:	b508      	push	{r3, lr}
   d9388:	f7fd f83c 	bl	d6404 <abort>

000d938c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d938c:	4901      	ldr	r1, [pc, #4]	; (d9394 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d938e:	f000 b8f9 	b.w	d9584 <_ZNKSt9type_infoeqERKS_>
   d9392:	bf00      	nop
   d9394:	000daf0c 	.word	0x000daf0c

000d9398 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d9398:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d939a:	2400      	movs	r4, #0
   d939c:	2310      	movs	r3, #16
   d939e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d93a2:	6803      	ldr	r3, [r0, #0]
   d93a4:	9400      	str	r4, [sp, #0]
   d93a6:	699e      	ldr	r6, [r3, #24]
   d93a8:	f88d 4004 	strb.w	r4, [sp, #4]
   d93ac:	4615      	mov	r5, r2
   d93ae:	466b      	mov	r3, sp
   d93b0:	6812      	ldr	r2, [r2, #0]
   d93b2:	47b0      	blx	r6
   d93b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d93b8:	f003 0306 	and.w	r3, r3, #6
   d93bc:	2b06      	cmp	r3, #6
   d93be:	bf03      	ittte	eq
   d93c0:	9b00      	ldreq	r3, [sp, #0]
   d93c2:	602b      	streq	r3, [r5, #0]
   d93c4:	2001      	moveq	r0, #1
   d93c6:	4620      	movne	r0, r4
   d93c8:	b004      	add	sp, #16
   d93ca:	bd70      	pop	{r4, r5, r6, pc}

000d93cc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d93cc:	9800      	ldr	r0, [sp, #0]
   d93ce:	4290      	cmp	r0, r2
   d93d0:	bf14      	ite	ne
   d93d2:	2001      	movne	r0, #1
   d93d4:	2006      	moveq	r0, #6
   d93d6:	4770      	bx	lr

000d93d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d93d8:	b510      	push	{r4, lr}
   d93da:	4b03      	ldr	r3, [pc, #12]	; (d93e8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d93dc:	6003      	str	r3, [r0, #0]
   d93de:	4604      	mov	r4, r0
   d93e0:	f000 f8cd 	bl	d957e <_ZNSt9type_infoD1Ev>
   d93e4:	4620      	mov	r0, r4
   d93e6:	bd10      	pop	{r4, pc}
   d93e8:	000daf4c 	.word	0x000daf4c

000d93ec <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d93ec:	b510      	push	{r4, lr}
   d93ee:	4604      	mov	r4, r0
   d93f0:	f7ff fff2 	bl	d93d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d93f4:	4620      	mov	r0, r4
   d93f6:	2108      	movs	r1, #8
   d93f8:	f7ff ffbf 	bl	d937a <_ZdlPvj>
   d93fc:	4620      	mov	r0, r4
   d93fe:	bd10      	pop	{r4, pc}

000d9400 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d9400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9404:	461f      	mov	r7, r3
   d9406:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d940a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d940e:	4598      	cmp	r8, r3
   d9410:	4606      	mov	r6, r0
   d9412:	4615      	mov	r5, r2
   d9414:	d107      	bne.n	d9426 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d9416:	9907      	ldr	r1, [sp, #28]
   d9418:	f000 f8b4 	bl	d9584 <_ZNKSt9type_infoeqERKS_>
   d941c:	b118      	cbz	r0, d9426 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d941e:	7165      	strb	r5, [r4, #5]
   d9420:	2000      	movs	r0, #0
   d9422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9426:	4639      	mov	r1, r7
   d9428:	4630      	mov	r0, r6
   d942a:	f000 f8ab 	bl	d9584 <_ZNKSt9type_infoeqERKS_>
   d942e:	2800      	cmp	r0, #0
   d9430:	d0f6      	beq.n	d9420 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d9432:	2301      	movs	r3, #1
   d9434:	f8c4 8000 	str.w	r8, [r4]
   d9438:	7125      	strb	r5, [r4, #4]
   d943a:	71a3      	strb	r3, [r4, #6]
   d943c:	e7f0      	b.n	d9420 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d943e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d943e:	b538      	push	{r3, r4, r5, lr}
   d9440:	4615      	mov	r5, r2
   d9442:	461c      	mov	r4, r3
   d9444:	f000 f89e 	bl	d9584 <_ZNKSt9type_infoeqERKS_>
   d9448:	b120      	cbz	r0, d9454 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d944a:	2308      	movs	r3, #8
   d944c:	60e3      	str	r3, [r4, #12]
   d944e:	2306      	movs	r3, #6
   d9450:	6025      	str	r5, [r4, #0]
   d9452:	7123      	strb	r3, [r4, #4]
   d9454:	bd38      	pop	{r3, r4, r5, pc}

000d9456 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d9456:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9458:	4605      	mov	r5, r0
   d945a:	460c      	mov	r4, r1
   d945c:	9201      	str	r2, [sp, #4]
   d945e:	461e      	mov	r6, r3
   d9460:	f000 f890 	bl	d9584 <_ZNKSt9type_infoeqERKS_>
   d9464:	b950      	cbnz	r0, d947c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d9466:	2e03      	cmp	r6, #3
   d9468:	d808      	bhi.n	d947c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d946a:	6823      	ldr	r3, [r4, #0]
   d946c:	9a01      	ldr	r2, [sp, #4]
   d946e:	695b      	ldr	r3, [r3, #20]
   d9470:	4629      	mov	r1, r5
   d9472:	4620      	mov	r0, r4
   d9474:	b002      	add	sp, #8
   d9476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d947a:	4718      	bx	r3
   d947c:	b002      	add	sp, #8
   d947e:	bd70      	pop	{r4, r5, r6, pc}

000d9480 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d9480:	b510      	push	{r4, lr}
   d9482:	4b03      	ldr	r3, [pc, #12]	; (d9490 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d9484:	6003      	str	r3, [r0, #0]
   d9486:	4604      	mov	r4, r0
   d9488:	f7ff ffa6 	bl	d93d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d948c:	4620      	mov	r0, r4
   d948e:	bd10      	pop	{r4, pc}
   d9490:	000dafac 	.word	0x000dafac

000d9494 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d9494:	b510      	push	{r4, lr}
   d9496:	4604      	mov	r4, r0
   d9498:	f7ff fff2 	bl	d9480 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d949c:	4620      	mov	r0, r4
   d949e:	210c      	movs	r1, #12
   d94a0:	f7ff ff6b 	bl	d937a <_ZdlPvj>
   d94a4:	4620      	mov	r0, r4
   d94a6:	bd10      	pop	{r4, pc}

000d94a8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d94a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d94aa:	9f08      	ldr	r7, [sp, #32]
   d94ac:	4297      	cmp	r7, r2
   d94ae:	4605      	mov	r5, r0
   d94b0:	460e      	mov	r6, r1
   d94b2:	4614      	mov	r4, r2
   d94b4:	d00a      	beq.n	d94cc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d94b6:	68a8      	ldr	r0, [r5, #8]
   d94b8:	6802      	ldr	r2, [r0, #0]
   d94ba:	9708      	str	r7, [sp, #32]
   d94bc:	6a15      	ldr	r5, [r2, #32]
   d94be:	4631      	mov	r1, r6
   d94c0:	4622      	mov	r2, r4
   d94c2:	46ac      	mov	ip, r5
   d94c4:	b003      	add	sp, #12
   d94c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d94ca:	4760      	bx	ip
   d94cc:	4619      	mov	r1, r3
   d94ce:	9301      	str	r3, [sp, #4]
   d94d0:	f000 f858 	bl	d9584 <_ZNKSt9type_infoeqERKS_>
   d94d4:	9b01      	ldr	r3, [sp, #4]
   d94d6:	2800      	cmp	r0, #0
   d94d8:	d0ed      	beq.n	d94b6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d94da:	2006      	movs	r0, #6
   d94dc:	b003      	add	sp, #12
   d94de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d94e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d94e0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d94e4:	460d      	mov	r5, r1
   d94e6:	4619      	mov	r1, r3
   d94e8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d94ec:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d94f0:	4681      	mov	r9, r0
   d94f2:	4617      	mov	r7, r2
   d94f4:	4698      	mov	r8, r3
   d94f6:	f000 f845 	bl	d9584 <_ZNKSt9type_infoeqERKS_>
   d94fa:	b190      	cbz	r0, d9522 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d94fc:	2d00      	cmp	r5, #0
   d94fe:	6034      	str	r4, [r6, #0]
   d9500:	7137      	strb	r7, [r6, #4]
   d9502:	db09      	blt.n	d9518 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d9504:	1961      	adds	r1, r4, r5
   d9506:	458a      	cmp	sl, r1
   d9508:	bf0c      	ite	eq
   d950a:	2106      	moveq	r1, #6
   d950c:	2101      	movne	r1, #1
   d950e:	71b1      	strb	r1, [r6, #6]
   d9510:	2000      	movs	r0, #0
   d9512:	b001      	add	sp, #4
   d9514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9518:	3502      	adds	r5, #2
   d951a:	d1f9      	bne.n	d9510 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d951c:	2301      	movs	r3, #1
   d951e:	71b3      	strb	r3, [r6, #6]
   d9520:	e7f6      	b.n	d9510 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d9522:	4554      	cmp	r4, sl
   d9524:	d106      	bne.n	d9534 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d9526:	4659      	mov	r1, fp
   d9528:	4648      	mov	r0, r9
   d952a:	f000 f82b 	bl	d9584 <_ZNKSt9type_infoeqERKS_>
   d952e:	b108      	cbz	r0, d9534 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d9530:	7177      	strb	r7, [r6, #5]
   d9532:	e7ed      	b.n	d9510 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d9534:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d9538:	6803      	ldr	r3, [r0, #0]
   d953a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d953e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d9542:	69dc      	ldr	r4, [r3, #28]
   d9544:	463a      	mov	r2, r7
   d9546:	4643      	mov	r3, r8
   d9548:	4629      	mov	r1, r5
   d954a:	46a4      	mov	ip, r4
   d954c:	b001      	add	sp, #4
   d954e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9552:	4760      	bx	ip

000d9554 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d9554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9558:	4607      	mov	r7, r0
   d955a:	460c      	mov	r4, r1
   d955c:	4615      	mov	r5, r2
   d955e:	461e      	mov	r6, r3
   d9560:	f7ff ff6d 	bl	d943e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d9564:	b948      	cbnz	r0, d957a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d9566:	68b8      	ldr	r0, [r7, #8]
   d9568:	6803      	ldr	r3, [r0, #0]
   d956a:	699f      	ldr	r7, [r3, #24]
   d956c:	462a      	mov	r2, r5
   d956e:	4633      	mov	r3, r6
   d9570:	4621      	mov	r1, r4
   d9572:	46bc      	mov	ip, r7
   d9574:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d9578:	4760      	bx	ip
   d957a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d957e <_ZNSt9type_infoD1Ev>:
   d957e:	4770      	bx	lr

000d9580 <_ZNKSt9type_info14__is_pointer_pEv>:
   d9580:	2000      	movs	r0, #0
   d9582:	4770      	bx	lr

000d9584 <_ZNKSt9type_infoeqERKS_>:
   d9584:	4281      	cmp	r1, r0
   d9586:	b508      	push	{r3, lr}
   d9588:	d00e      	beq.n	d95a8 <_ZNKSt9type_infoeqERKS_+0x24>
   d958a:	6840      	ldr	r0, [r0, #4]
   d958c:	7803      	ldrb	r3, [r0, #0]
   d958e:	2b2a      	cmp	r3, #42	; 0x2a
   d9590:	d00c      	beq.n	d95ac <_ZNKSt9type_infoeqERKS_+0x28>
   d9592:	6849      	ldr	r1, [r1, #4]
   d9594:	780b      	ldrb	r3, [r1, #0]
   d9596:	2b2a      	cmp	r3, #42	; 0x2a
   d9598:	bf08      	it	eq
   d959a:	3101      	addeq	r1, #1
   d959c:	f000 fede 	bl	da35c <strcmp>
   d95a0:	fab0 f080 	clz	r0, r0
   d95a4:	0940      	lsrs	r0, r0, #5
   d95a6:	bd08      	pop	{r3, pc}
   d95a8:	2001      	movs	r0, #1
   d95aa:	e7fc      	b.n	d95a6 <_ZNKSt9type_infoeqERKS_+0x22>
   d95ac:	2000      	movs	r0, #0
   d95ae:	e7fa      	b.n	d95a6 <_ZNKSt9type_infoeqERKS_+0x22>

000d95b0 <__aeabi_drsub>:
   d95b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d95b4:	e002      	b.n	d95bc <__adddf3>
   d95b6:	bf00      	nop

000d95b8 <__aeabi_dsub>:
   d95b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d95bc <__adddf3>:
   d95bc:	b530      	push	{r4, r5, lr}
   d95be:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d95c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d95c6:	ea94 0f05 	teq	r4, r5
   d95ca:	bf08      	it	eq
   d95cc:	ea90 0f02 	teqeq	r0, r2
   d95d0:	bf1f      	itttt	ne
   d95d2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d95d6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d95da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d95de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d95e2:	f000 80e2 	beq.w	d97aa <__adddf3+0x1ee>
   d95e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d95ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d95ee:	bfb8      	it	lt
   d95f0:	426d      	neglt	r5, r5
   d95f2:	dd0c      	ble.n	d960e <__adddf3+0x52>
   d95f4:	442c      	add	r4, r5
   d95f6:	ea80 0202 	eor.w	r2, r0, r2
   d95fa:	ea81 0303 	eor.w	r3, r1, r3
   d95fe:	ea82 0000 	eor.w	r0, r2, r0
   d9602:	ea83 0101 	eor.w	r1, r3, r1
   d9606:	ea80 0202 	eor.w	r2, r0, r2
   d960a:	ea81 0303 	eor.w	r3, r1, r3
   d960e:	2d36      	cmp	r5, #54	; 0x36
   d9610:	bf88      	it	hi
   d9612:	bd30      	pophi	{r4, r5, pc}
   d9614:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d961c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9620:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9624:	d002      	beq.n	d962c <__adddf3+0x70>
   d9626:	4240      	negs	r0, r0
   d9628:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d962c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d9630:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9634:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9638:	d002      	beq.n	d9640 <__adddf3+0x84>
   d963a:	4252      	negs	r2, r2
   d963c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9640:	ea94 0f05 	teq	r4, r5
   d9644:	f000 80a7 	beq.w	d9796 <__adddf3+0x1da>
   d9648:	f1a4 0401 	sub.w	r4, r4, #1
   d964c:	f1d5 0e20 	rsbs	lr, r5, #32
   d9650:	db0d      	blt.n	d966e <__adddf3+0xb2>
   d9652:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9656:	fa22 f205 	lsr.w	r2, r2, r5
   d965a:	1880      	adds	r0, r0, r2
   d965c:	f141 0100 	adc.w	r1, r1, #0
   d9660:	fa03 f20e 	lsl.w	r2, r3, lr
   d9664:	1880      	adds	r0, r0, r2
   d9666:	fa43 f305 	asr.w	r3, r3, r5
   d966a:	4159      	adcs	r1, r3
   d966c:	e00e      	b.n	d968c <__adddf3+0xd0>
   d966e:	f1a5 0520 	sub.w	r5, r5, #32
   d9672:	f10e 0e20 	add.w	lr, lr, #32
   d9676:	2a01      	cmp	r2, #1
   d9678:	fa03 fc0e 	lsl.w	ip, r3, lr
   d967c:	bf28      	it	cs
   d967e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9682:	fa43 f305 	asr.w	r3, r3, r5
   d9686:	18c0      	adds	r0, r0, r3
   d9688:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d968c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9690:	d507      	bpl.n	d96a2 <__adddf3+0xe6>
   d9692:	f04f 0e00 	mov.w	lr, #0
   d9696:	f1dc 0c00 	rsbs	ip, ip, #0
   d969a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d969e:	eb6e 0101 	sbc.w	r1, lr, r1
   d96a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d96a6:	d31b      	bcc.n	d96e0 <__adddf3+0x124>
   d96a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d96ac:	d30c      	bcc.n	d96c8 <__adddf3+0x10c>
   d96ae:	0849      	lsrs	r1, r1, #1
   d96b0:	ea5f 0030 	movs.w	r0, r0, rrx
   d96b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d96b8:	f104 0401 	add.w	r4, r4, #1
   d96bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d96c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d96c4:	f080 809a 	bcs.w	d97fc <__adddf3+0x240>
   d96c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d96cc:	bf08      	it	eq
   d96ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d96d2:	f150 0000 	adcs.w	r0, r0, #0
   d96d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d96da:	ea41 0105 	orr.w	r1, r1, r5
   d96de:	bd30      	pop	{r4, r5, pc}
   d96e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d96e4:	4140      	adcs	r0, r0
   d96e6:	eb41 0101 	adc.w	r1, r1, r1
   d96ea:	3c01      	subs	r4, #1
   d96ec:	bf28      	it	cs
   d96ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d96f2:	d2e9      	bcs.n	d96c8 <__adddf3+0x10c>
   d96f4:	f091 0f00 	teq	r1, #0
   d96f8:	bf04      	itt	eq
   d96fa:	4601      	moveq	r1, r0
   d96fc:	2000      	moveq	r0, #0
   d96fe:	fab1 f381 	clz	r3, r1
   d9702:	bf08      	it	eq
   d9704:	3320      	addeq	r3, #32
   d9706:	f1a3 030b 	sub.w	r3, r3, #11
   d970a:	f1b3 0220 	subs.w	r2, r3, #32
   d970e:	da0c      	bge.n	d972a <__adddf3+0x16e>
   d9710:	320c      	adds	r2, #12
   d9712:	dd08      	ble.n	d9726 <__adddf3+0x16a>
   d9714:	f102 0c14 	add.w	ip, r2, #20
   d9718:	f1c2 020c 	rsb	r2, r2, #12
   d971c:	fa01 f00c 	lsl.w	r0, r1, ip
   d9720:	fa21 f102 	lsr.w	r1, r1, r2
   d9724:	e00c      	b.n	d9740 <__adddf3+0x184>
   d9726:	f102 0214 	add.w	r2, r2, #20
   d972a:	bfd8      	it	le
   d972c:	f1c2 0c20 	rsble	ip, r2, #32
   d9730:	fa01 f102 	lsl.w	r1, r1, r2
   d9734:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9738:	bfdc      	itt	le
   d973a:	ea41 010c 	orrle.w	r1, r1, ip
   d973e:	4090      	lslle	r0, r2
   d9740:	1ae4      	subs	r4, r4, r3
   d9742:	bfa2      	ittt	ge
   d9744:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9748:	4329      	orrge	r1, r5
   d974a:	bd30      	popge	{r4, r5, pc}
   d974c:	ea6f 0404 	mvn.w	r4, r4
   d9750:	3c1f      	subs	r4, #31
   d9752:	da1c      	bge.n	d978e <__adddf3+0x1d2>
   d9754:	340c      	adds	r4, #12
   d9756:	dc0e      	bgt.n	d9776 <__adddf3+0x1ba>
   d9758:	f104 0414 	add.w	r4, r4, #20
   d975c:	f1c4 0220 	rsb	r2, r4, #32
   d9760:	fa20 f004 	lsr.w	r0, r0, r4
   d9764:	fa01 f302 	lsl.w	r3, r1, r2
   d9768:	ea40 0003 	orr.w	r0, r0, r3
   d976c:	fa21 f304 	lsr.w	r3, r1, r4
   d9770:	ea45 0103 	orr.w	r1, r5, r3
   d9774:	bd30      	pop	{r4, r5, pc}
   d9776:	f1c4 040c 	rsb	r4, r4, #12
   d977a:	f1c4 0220 	rsb	r2, r4, #32
   d977e:	fa20 f002 	lsr.w	r0, r0, r2
   d9782:	fa01 f304 	lsl.w	r3, r1, r4
   d9786:	ea40 0003 	orr.w	r0, r0, r3
   d978a:	4629      	mov	r1, r5
   d978c:	bd30      	pop	{r4, r5, pc}
   d978e:	fa21 f004 	lsr.w	r0, r1, r4
   d9792:	4629      	mov	r1, r5
   d9794:	bd30      	pop	{r4, r5, pc}
   d9796:	f094 0f00 	teq	r4, #0
   d979a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d979e:	bf06      	itte	eq
   d97a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d97a4:	3401      	addeq	r4, #1
   d97a6:	3d01      	subne	r5, #1
   d97a8:	e74e      	b.n	d9648 <__adddf3+0x8c>
   d97aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d97ae:	bf18      	it	ne
   d97b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d97b4:	d029      	beq.n	d980a <__adddf3+0x24e>
   d97b6:	ea94 0f05 	teq	r4, r5
   d97ba:	bf08      	it	eq
   d97bc:	ea90 0f02 	teqeq	r0, r2
   d97c0:	d005      	beq.n	d97ce <__adddf3+0x212>
   d97c2:	ea54 0c00 	orrs.w	ip, r4, r0
   d97c6:	bf04      	itt	eq
   d97c8:	4619      	moveq	r1, r3
   d97ca:	4610      	moveq	r0, r2
   d97cc:	bd30      	pop	{r4, r5, pc}
   d97ce:	ea91 0f03 	teq	r1, r3
   d97d2:	bf1e      	ittt	ne
   d97d4:	2100      	movne	r1, #0
   d97d6:	2000      	movne	r0, #0
   d97d8:	bd30      	popne	{r4, r5, pc}
   d97da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d97de:	d105      	bne.n	d97ec <__adddf3+0x230>
   d97e0:	0040      	lsls	r0, r0, #1
   d97e2:	4149      	adcs	r1, r1
   d97e4:	bf28      	it	cs
   d97e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d97ea:	bd30      	pop	{r4, r5, pc}
   d97ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d97f0:	bf3c      	itt	cc
   d97f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d97f6:	bd30      	popcc	{r4, r5, pc}
   d97f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d97fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9800:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9804:	f04f 0000 	mov.w	r0, #0
   d9808:	bd30      	pop	{r4, r5, pc}
   d980a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d980e:	bf1a      	itte	ne
   d9810:	4619      	movne	r1, r3
   d9812:	4610      	movne	r0, r2
   d9814:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9818:	bf1c      	itt	ne
   d981a:	460b      	movne	r3, r1
   d981c:	4602      	movne	r2, r0
   d981e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9822:	bf06      	itte	eq
   d9824:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9828:	ea91 0f03 	teqeq	r1, r3
   d982c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9830:	bd30      	pop	{r4, r5, pc}
   d9832:	bf00      	nop

000d9834 <__aeabi_ui2d>:
   d9834:	f090 0f00 	teq	r0, #0
   d9838:	bf04      	itt	eq
   d983a:	2100      	moveq	r1, #0
   d983c:	4770      	bxeq	lr
   d983e:	b530      	push	{r4, r5, lr}
   d9840:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9844:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9848:	f04f 0500 	mov.w	r5, #0
   d984c:	f04f 0100 	mov.w	r1, #0
   d9850:	e750      	b.n	d96f4 <__adddf3+0x138>
   d9852:	bf00      	nop

000d9854 <__aeabi_i2d>:
   d9854:	f090 0f00 	teq	r0, #0
   d9858:	bf04      	itt	eq
   d985a:	2100      	moveq	r1, #0
   d985c:	4770      	bxeq	lr
   d985e:	b530      	push	{r4, r5, lr}
   d9860:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9864:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9868:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d986c:	bf48      	it	mi
   d986e:	4240      	negmi	r0, r0
   d9870:	f04f 0100 	mov.w	r1, #0
   d9874:	e73e      	b.n	d96f4 <__adddf3+0x138>
   d9876:	bf00      	nop

000d9878 <__aeabi_f2d>:
   d9878:	0042      	lsls	r2, r0, #1
   d987a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d987e:	ea4f 0131 	mov.w	r1, r1, rrx
   d9882:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9886:	bf1f      	itttt	ne
   d9888:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d988c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9890:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9894:	4770      	bxne	lr
   d9896:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d989a:	bf08      	it	eq
   d989c:	4770      	bxeq	lr
   d989e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d98a2:	bf04      	itt	eq
   d98a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d98a8:	4770      	bxeq	lr
   d98aa:	b530      	push	{r4, r5, lr}
   d98ac:	f44f 7460 	mov.w	r4, #896	; 0x380
   d98b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d98b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d98b8:	e71c      	b.n	d96f4 <__adddf3+0x138>
   d98ba:	bf00      	nop

000d98bc <__aeabi_ul2d>:
   d98bc:	ea50 0201 	orrs.w	r2, r0, r1
   d98c0:	bf08      	it	eq
   d98c2:	4770      	bxeq	lr
   d98c4:	b530      	push	{r4, r5, lr}
   d98c6:	f04f 0500 	mov.w	r5, #0
   d98ca:	e00a      	b.n	d98e2 <__aeabi_l2d+0x16>

000d98cc <__aeabi_l2d>:
   d98cc:	ea50 0201 	orrs.w	r2, r0, r1
   d98d0:	bf08      	it	eq
   d98d2:	4770      	bxeq	lr
   d98d4:	b530      	push	{r4, r5, lr}
   d98d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d98da:	d502      	bpl.n	d98e2 <__aeabi_l2d+0x16>
   d98dc:	4240      	negs	r0, r0
   d98de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d98e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d98e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d98ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d98ee:	f43f aed8 	beq.w	d96a2 <__adddf3+0xe6>
   d98f2:	f04f 0203 	mov.w	r2, #3
   d98f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d98fa:	bf18      	it	ne
   d98fc:	3203      	addne	r2, #3
   d98fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9902:	bf18      	it	ne
   d9904:	3203      	addne	r2, #3
   d9906:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d990a:	f1c2 0320 	rsb	r3, r2, #32
   d990e:	fa00 fc03 	lsl.w	ip, r0, r3
   d9912:	fa20 f002 	lsr.w	r0, r0, r2
   d9916:	fa01 fe03 	lsl.w	lr, r1, r3
   d991a:	ea40 000e 	orr.w	r0, r0, lr
   d991e:	fa21 f102 	lsr.w	r1, r1, r2
   d9922:	4414      	add	r4, r2
   d9924:	e6bd      	b.n	d96a2 <__adddf3+0xe6>
   d9926:	bf00      	nop

000d9928 <__aeabi_dmul>:
   d9928:	b570      	push	{r4, r5, r6, lr}
   d992a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d992e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9932:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9936:	bf1d      	ittte	ne
   d9938:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d993c:	ea94 0f0c 	teqne	r4, ip
   d9940:	ea95 0f0c 	teqne	r5, ip
   d9944:	f000 f8de 	bleq	d9b04 <__aeabi_dmul+0x1dc>
   d9948:	442c      	add	r4, r5
   d994a:	ea81 0603 	eor.w	r6, r1, r3
   d994e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9952:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9956:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d995a:	bf18      	it	ne
   d995c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9964:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9968:	d038      	beq.n	d99dc <__aeabi_dmul+0xb4>
   d996a:	fba0 ce02 	umull	ip, lr, r0, r2
   d996e:	f04f 0500 	mov.w	r5, #0
   d9972:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9976:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d997a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d997e:	f04f 0600 	mov.w	r6, #0
   d9982:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9986:	f09c 0f00 	teq	ip, #0
   d998a:	bf18      	it	ne
   d998c:	f04e 0e01 	orrne.w	lr, lr, #1
   d9990:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9994:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9998:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d999c:	d204      	bcs.n	d99a8 <__aeabi_dmul+0x80>
   d999e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d99a2:	416d      	adcs	r5, r5
   d99a4:	eb46 0606 	adc.w	r6, r6, r6
   d99a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d99ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d99b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d99b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d99b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d99bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d99c0:	bf88      	it	hi
   d99c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d99c6:	d81e      	bhi.n	d9a06 <__aeabi_dmul+0xde>
   d99c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d99cc:	bf08      	it	eq
   d99ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d99d2:	f150 0000 	adcs.w	r0, r0, #0
   d99d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d99da:	bd70      	pop	{r4, r5, r6, pc}
   d99dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d99e0:	ea46 0101 	orr.w	r1, r6, r1
   d99e4:	ea40 0002 	orr.w	r0, r0, r2
   d99e8:	ea81 0103 	eor.w	r1, r1, r3
   d99ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d99f0:	bfc2      	ittt	gt
   d99f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d99f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d99fa:	bd70      	popgt	{r4, r5, r6, pc}
   d99fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9a00:	f04f 0e00 	mov.w	lr, #0
   d9a04:	3c01      	subs	r4, #1
   d9a06:	f300 80ab 	bgt.w	d9b60 <__aeabi_dmul+0x238>
   d9a0a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9a0e:	bfde      	ittt	le
   d9a10:	2000      	movle	r0, #0
   d9a12:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9a16:	bd70      	pople	{r4, r5, r6, pc}
   d9a18:	f1c4 0400 	rsb	r4, r4, #0
   d9a1c:	3c20      	subs	r4, #32
   d9a1e:	da35      	bge.n	d9a8c <__aeabi_dmul+0x164>
   d9a20:	340c      	adds	r4, #12
   d9a22:	dc1b      	bgt.n	d9a5c <__aeabi_dmul+0x134>
   d9a24:	f104 0414 	add.w	r4, r4, #20
   d9a28:	f1c4 0520 	rsb	r5, r4, #32
   d9a2c:	fa00 f305 	lsl.w	r3, r0, r5
   d9a30:	fa20 f004 	lsr.w	r0, r0, r4
   d9a34:	fa01 f205 	lsl.w	r2, r1, r5
   d9a38:	ea40 0002 	orr.w	r0, r0, r2
   d9a3c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9a40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9a44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9a48:	fa21 f604 	lsr.w	r6, r1, r4
   d9a4c:	eb42 0106 	adc.w	r1, r2, r6
   d9a50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9a54:	bf08      	it	eq
   d9a56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9a5a:	bd70      	pop	{r4, r5, r6, pc}
   d9a5c:	f1c4 040c 	rsb	r4, r4, #12
   d9a60:	f1c4 0520 	rsb	r5, r4, #32
   d9a64:	fa00 f304 	lsl.w	r3, r0, r4
   d9a68:	fa20 f005 	lsr.w	r0, r0, r5
   d9a6c:	fa01 f204 	lsl.w	r2, r1, r4
   d9a70:	ea40 0002 	orr.w	r0, r0, r2
   d9a74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9a78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9a7c:	f141 0100 	adc.w	r1, r1, #0
   d9a80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9a84:	bf08      	it	eq
   d9a86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9a8a:	bd70      	pop	{r4, r5, r6, pc}
   d9a8c:	f1c4 0520 	rsb	r5, r4, #32
   d9a90:	fa00 f205 	lsl.w	r2, r0, r5
   d9a94:	ea4e 0e02 	orr.w	lr, lr, r2
   d9a98:	fa20 f304 	lsr.w	r3, r0, r4
   d9a9c:	fa01 f205 	lsl.w	r2, r1, r5
   d9aa0:	ea43 0302 	orr.w	r3, r3, r2
   d9aa4:	fa21 f004 	lsr.w	r0, r1, r4
   d9aa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9aac:	fa21 f204 	lsr.w	r2, r1, r4
   d9ab0:	ea20 0002 	bic.w	r0, r0, r2
   d9ab4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9ab8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9abc:	bf08      	it	eq
   d9abe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9ac2:	bd70      	pop	{r4, r5, r6, pc}
   d9ac4:	f094 0f00 	teq	r4, #0
   d9ac8:	d10f      	bne.n	d9aea <__aeabi_dmul+0x1c2>
   d9aca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9ace:	0040      	lsls	r0, r0, #1
   d9ad0:	eb41 0101 	adc.w	r1, r1, r1
   d9ad4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9ad8:	bf08      	it	eq
   d9ada:	3c01      	subeq	r4, #1
   d9adc:	d0f7      	beq.n	d9ace <__aeabi_dmul+0x1a6>
   d9ade:	ea41 0106 	orr.w	r1, r1, r6
   d9ae2:	f095 0f00 	teq	r5, #0
   d9ae6:	bf18      	it	ne
   d9ae8:	4770      	bxne	lr
   d9aea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9aee:	0052      	lsls	r2, r2, #1
   d9af0:	eb43 0303 	adc.w	r3, r3, r3
   d9af4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9af8:	bf08      	it	eq
   d9afa:	3d01      	subeq	r5, #1
   d9afc:	d0f7      	beq.n	d9aee <__aeabi_dmul+0x1c6>
   d9afe:	ea43 0306 	orr.w	r3, r3, r6
   d9b02:	4770      	bx	lr
   d9b04:	ea94 0f0c 	teq	r4, ip
   d9b08:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9b0c:	bf18      	it	ne
   d9b0e:	ea95 0f0c 	teqne	r5, ip
   d9b12:	d00c      	beq.n	d9b2e <__aeabi_dmul+0x206>
   d9b14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9b18:	bf18      	it	ne
   d9b1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9b1e:	d1d1      	bne.n	d9ac4 <__aeabi_dmul+0x19c>
   d9b20:	ea81 0103 	eor.w	r1, r1, r3
   d9b24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9b28:	f04f 0000 	mov.w	r0, #0
   d9b2c:	bd70      	pop	{r4, r5, r6, pc}
   d9b2e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9b32:	bf06      	itte	eq
   d9b34:	4610      	moveq	r0, r2
   d9b36:	4619      	moveq	r1, r3
   d9b38:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9b3c:	d019      	beq.n	d9b72 <__aeabi_dmul+0x24a>
   d9b3e:	ea94 0f0c 	teq	r4, ip
   d9b42:	d102      	bne.n	d9b4a <__aeabi_dmul+0x222>
   d9b44:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9b48:	d113      	bne.n	d9b72 <__aeabi_dmul+0x24a>
   d9b4a:	ea95 0f0c 	teq	r5, ip
   d9b4e:	d105      	bne.n	d9b5c <__aeabi_dmul+0x234>
   d9b50:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9b54:	bf1c      	itt	ne
   d9b56:	4610      	movne	r0, r2
   d9b58:	4619      	movne	r1, r3
   d9b5a:	d10a      	bne.n	d9b72 <__aeabi_dmul+0x24a>
   d9b5c:	ea81 0103 	eor.w	r1, r1, r3
   d9b60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9b64:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9b68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9b6c:	f04f 0000 	mov.w	r0, #0
   d9b70:	bd70      	pop	{r4, r5, r6, pc}
   d9b72:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9b76:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9b7a:	bd70      	pop	{r4, r5, r6, pc}

000d9b7c <__aeabi_ddiv>:
   d9b7c:	b570      	push	{r4, r5, r6, lr}
   d9b7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9b82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9b86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9b8a:	bf1d      	ittte	ne
   d9b8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9b90:	ea94 0f0c 	teqne	r4, ip
   d9b94:	ea95 0f0c 	teqne	r5, ip
   d9b98:	f000 f8a7 	bleq	d9cea <__aeabi_ddiv+0x16e>
   d9b9c:	eba4 0405 	sub.w	r4, r4, r5
   d9ba0:	ea81 0e03 	eor.w	lr, r1, r3
   d9ba4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9ba8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9bac:	f000 8088 	beq.w	d9cc0 <__aeabi_ddiv+0x144>
   d9bb0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9bb4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9bb8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9bbc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9bc0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9bc4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9bc8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9bcc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9bd0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9bd4:	429d      	cmp	r5, r3
   d9bd6:	bf08      	it	eq
   d9bd8:	4296      	cmpeq	r6, r2
   d9bda:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d9bde:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9be2:	d202      	bcs.n	d9bea <__aeabi_ddiv+0x6e>
   d9be4:	085b      	lsrs	r3, r3, #1
   d9be6:	ea4f 0232 	mov.w	r2, r2, rrx
   d9bea:	1ab6      	subs	r6, r6, r2
   d9bec:	eb65 0503 	sbc.w	r5, r5, r3
   d9bf0:	085b      	lsrs	r3, r3, #1
   d9bf2:	ea4f 0232 	mov.w	r2, r2, rrx
   d9bf6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9bfa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9bfe:	ebb6 0e02 	subs.w	lr, r6, r2
   d9c02:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9c06:	bf22      	ittt	cs
   d9c08:	1ab6      	subcs	r6, r6, r2
   d9c0a:	4675      	movcs	r5, lr
   d9c0c:	ea40 000c 	orrcs.w	r0, r0, ip
   d9c10:	085b      	lsrs	r3, r3, #1
   d9c12:	ea4f 0232 	mov.w	r2, r2, rrx
   d9c16:	ebb6 0e02 	subs.w	lr, r6, r2
   d9c1a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9c1e:	bf22      	ittt	cs
   d9c20:	1ab6      	subcs	r6, r6, r2
   d9c22:	4675      	movcs	r5, lr
   d9c24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9c28:	085b      	lsrs	r3, r3, #1
   d9c2a:	ea4f 0232 	mov.w	r2, r2, rrx
   d9c2e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9c32:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9c36:	bf22      	ittt	cs
   d9c38:	1ab6      	subcs	r6, r6, r2
   d9c3a:	4675      	movcs	r5, lr
   d9c3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9c40:	085b      	lsrs	r3, r3, #1
   d9c42:	ea4f 0232 	mov.w	r2, r2, rrx
   d9c46:	ebb6 0e02 	subs.w	lr, r6, r2
   d9c4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9c4e:	bf22      	ittt	cs
   d9c50:	1ab6      	subcs	r6, r6, r2
   d9c52:	4675      	movcs	r5, lr
   d9c54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9c58:	ea55 0e06 	orrs.w	lr, r5, r6
   d9c5c:	d018      	beq.n	d9c90 <__aeabi_ddiv+0x114>
   d9c5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9c62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9c66:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9c6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9c6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9c72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9c76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9c7a:	d1c0      	bne.n	d9bfe <__aeabi_ddiv+0x82>
   d9c7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9c80:	d10b      	bne.n	d9c9a <__aeabi_ddiv+0x11e>
   d9c82:	ea41 0100 	orr.w	r1, r1, r0
   d9c86:	f04f 0000 	mov.w	r0, #0
   d9c8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9c8e:	e7b6      	b.n	d9bfe <__aeabi_ddiv+0x82>
   d9c90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9c94:	bf04      	itt	eq
   d9c96:	4301      	orreq	r1, r0
   d9c98:	2000      	moveq	r0, #0
   d9c9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9c9e:	bf88      	it	hi
   d9ca0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9ca4:	f63f aeaf 	bhi.w	d9a06 <__aeabi_dmul+0xde>
   d9ca8:	ebb5 0c03 	subs.w	ip, r5, r3
   d9cac:	bf04      	itt	eq
   d9cae:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9cb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9cb6:	f150 0000 	adcs.w	r0, r0, #0
   d9cba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9cbe:	bd70      	pop	{r4, r5, r6, pc}
   d9cc0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9cc4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9cc8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9ccc:	bfc2      	ittt	gt
   d9cce:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9cd2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9cd6:	bd70      	popgt	{r4, r5, r6, pc}
   d9cd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9cdc:	f04f 0e00 	mov.w	lr, #0
   d9ce0:	3c01      	subs	r4, #1
   d9ce2:	e690      	b.n	d9a06 <__aeabi_dmul+0xde>
   d9ce4:	ea45 0e06 	orr.w	lr, r5, r6
   d9ce8:	e68d      	b.n	d9a06 <__aeabi_dmul+0xde>
   d9cea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9cee:	ea94 0f0c 	teq	r4, ip
   d9cf2:	bf08      	it	eq
   d9cf4:	ea95 0f0c 	teqeq	r5, ip
   d9cf8:	f43f af3b 	beq.w	d9b72 <__aeabi_dmul+0x24a>
   d9cfc:	ea94 0f0c 	teq	r4, ip
   d9d00:	d10a      	bne.n	d9d18 <__aeabi_ddiv+0x19c>
   d9d02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9d06:	f47f af34 	bne.w	d9b72 <__aeabi_dmul+0x24a>
   d9d0a:	ea95 0f0c 	teq	r5, ip
   d9d0e:	f47f af25 	bne.w	d9b5c <__aeabi_dmul+0x234>
   d9d12:	4610      	mov	r0, r2
   d9d14:	4619      	mov	r1, r3
   d9d16:	e72c      	b.n	d9b72 <__aeabi_dmul+0x24a>
   d9d18:	ea95 0f0c 	teq	r5, ip
   d9d1c:	d106      	bne.n	d9d2c <__aeabi_ddiv+0x1b0>
   d9d1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9d22:	f43f aefd 	beq.w	d9b20 <__aeabi_dmul+0x1f8>
   d9d26:	4610      	mov	r0, r2
   d9d28:	4619      	mov	r1, r3
   d9d2a:	e722      	b.n	d9b72 <__aeabi_dmul+0x24a>
   d9d2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9d30:	bf18      	it	ne
   d9d32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9d36:	f47f aec5 	bne.w	d9ac4 <__aeabi_dmul+0x19c>
   d9d3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9d3e:	f47f af0d 	bne.w	d9b5c <__aeabi_dmul+0x234>
   d9d42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9d46:	f47f aeeb 	bne.w	d9b20 <__aeabi_dmul+0x1f8>
   d9d4a:	e712      	b.n	d9b72 <__aeabi_dmul+0x24a>

000d9d4c <__gedf2>:
   d9d4c:	f04f 3cff 	mov.w	ip, #4294967295
   d9d50:	e006      	b.n	d9d60 <__cmpdf2+0x4>
   d9d52:	bf00      	nop

000d9d54 <__ledf2>:
   d9d54:	f04f 0c01 	mov.w	ip, #1
   d9d58:	e002      	b.n	d9d60 <__cmpdf2+0x4>
   d9d5a:	bf00      	nop

000d9d5c <__cmpdf2>:
   d9d5c:	f04f 0c01 	mov.w	ip, #1
   d9d60:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9d64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9d68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9d6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9d70:	bf18      	it	ne
   d9d72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d9d76:	d01b      	beq.n	d9db0 <__cmpdf2+0x54>
   d9d78:	b001      	add	sp, #4
   d9d7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9d7e:	bf0c      	ite	eq
   d9d80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9d84:	ea91 0f03 	teqne	r1, r3
   d9d88:	bf02      	ittt	eq
   d9d8a:	ea90 0f02 	teqeq	r0, r2
   d9d8e:	2000      	moveq	r0, #0
   d9d90:	4770      	bxeq	lr
   d9d92:	f110 0f00 	cmn.w	r0, #0
   d9d96:	ea91 0f03 	teq	r1, r3
   d9d9a:	bf58      	it	pl
   d9d9c:	4299      	cmppl	r1, r3
   d9d9e:	bf08      	it	eq
   d9da0:	4290      	cmpeq	r0, r2
   d9da2:	bf2c      	ite	cs
   d9da4:	17d8      	asrcs	r0, r3, #31
   d9da6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9daa:	f040 0001 	orr.w	r0, r0, #1
   d9dae:	4770      	bx	lr
   d9db0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9db4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9db8:	d102      	bne.n	d9dc0 <__cmpdf2+0x64>
   d9dba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9dbe:	d107      	bne.n	d9dd0 <__cmpdf2+0x74>
   d9dc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9dc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9dc8:	d1d6      	bne.n	d9d78 <__cmpdf2+0x1c>
   d9dca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9dce:	d0d3      	beq.n	d9d78 <__cmpdf2+0x1c>
   d9dd0:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9dd4:	4770      	bx	lr
   d9dd6:	bf00      	nop

000d9dd8 <__aeabi_cdrcmple>:
   d9dd8:	4684      	mov	ip, r0
   d9dda:	4610      	mov	r0, r2
   d9ddc:	4662      	mov	r2, ip
   d9dde:	468c      	mov	ip, r1
   d9de0:	4619      	mov	r1, r3
   d9de2:	4663      	mov	r3, ip
   d9de4:	e000      	b.n	d9de8 <__aeabi_cdcmpeq>
   d9de6:	bf00      	nop

000d9de8 <__aeabi_cdcmpeq>:
   d9de8:	b501      	push	{r0, lr}
   d9dea:	f7ff ffb7 	bl	d9d5c <__cmpdf2>
   d9dee:	2800      	cmp	r0, #0
   d9df0:	bf48      	it	mi
   d9df2:	f110 0f00 	cmnmi.w	r0, #0
   d9df6:	bd01      	pop	{r0, pc}

000d9df8 <__aeabi_dcmpeq>:
   d9df8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9dfc:	f7ff fff4 	bl	d9de8 <__aeabi_cdcmpeq>
   d9e00:	bf0c      	ite	eq
   d9e02:	2001      	moveq	r0, #1
   d9e04:	2000      	movne	r0, #0
   d9e06:	f85d fb08 	ldr.w	pc, [sp], #8
   d9e0a:	bf00      	nop

000d9e0c <__aeabi_dcmplt>:
   d9e0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9e10:	f7ff ffea 	bl	d9de8 <__aeabi_cdcmpeq>
   d9e14:	bf34      	ite	cc
   d9e16:	2001      	movcc	r0, #1
   d9e18:	2000      	movcs	r0, #0
   d9e1a:	f85d fb08 	ldr.w	pc, [sp], #8
   d9e1e:	bf00      	nop

000d9e20 <__aeabi_dcmple>:
   d9e20:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9e24:	f7ff ffe0 	bl	d9de8 <__aeabi_cdcmpeq>
   d9e28:	bf94      	ite	ls
   d9e2a:	2001      	movls	r0, #1
   d9e2c:	2000      	movhi	r0, #0
   d9e2e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9e32:	bf00      	nop

000d9e34 <__aeabi_dcmpge>:
   d9e34:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9e38:	f7ff ffce 	bl	d9dd8 <__aeabi_cdrcmple>
   d9e3c:	bf94      	ite	ls
   d9e3e:	2001      	movls	r0, #1
   d9e40:	2000      	movhi	r0, #0
   d9e42:	f85d fb08 	ldr.w	pc, [sp], #8
   d9e46:	bf00      	nop

000d9e48 <__aeabi_dcmpgt>:
   d9e48:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9e4c:	f7ff ffc4 	bl	d9dd8 <__aeabi_cdrcmple>
   d9e50:	bf34      	ite	cc
   d9e52:	2001      	movcc	r0, #1
   d9e54:	2000      	movcs	r0, #0
   d9e56:	f85d fb08 	ldr.w	pc, [sp], #8
   d9e5a:	bf00      	nop

000d9e5c <__aeabi_dcmpun>:
   d9e5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9e60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9e64:	d102      	bne.n	d9e6c <__aeabi_dcmpun+0x10>
   d9e66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9e6a:	d10a      	bne.n	d9e82 <__aeabi_dcmpun+0x26>
   d9e6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9e70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9e74:	d102      	bne.n	d9e7c <__aeabi_dcmpun+0x20>
   d9e76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9e7a:	d102      	bne.n	d9e82 <__aeabi_dcmpun+0x26>
   d9e7c:	f04f 0000 	mov.w	r0, #0
   d9e80:	4770      	bx	lr
   d9e82:	f04f 0001 	mov.w	r0, #1
   d9e86:	4770      	bx	lr

000d9e88 <__aeabi_d2iz>:
   d9e88:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9e8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9e90:	d215      	bcs.n	d9ebe <__aeabi_d2iz+0x36>
   d9e92:	d511      	bpl.n	d9eb8 <__aeabi_d2iz+0x30>
   d9e94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9e98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9e9c:	d912      	bls.n	d9ec4 <__aeabi_d2iz+0x3c>
   d9e9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9ea2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9ea6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9eaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9eae:	fa23 f002 	lsr.w	r0, r3, r2
   d9eb2:	bf18      	it	ne
   d9eb4:	4240      	negne	r0, r0
   d9eb6:	4770      	bx	lr
   d9eb8:	f04f 0000 	mov.w	r0, #0
   d9ebc:	4770      	bx	lr
   d9ebe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9ec2:	d105      	bne.n	d9ed0 <__aeabi_d2iz+0x48>
   d9ec4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9ec8:	bf08      	it	eq
   d9eca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9ece:	4770      	bx	lr
   d9ed0:	f04f 0000 	mov.w	r0, #0
   d9ed4:	4770      	bx	lr
   d9ed6:	bf00      	nop

000d9ed8 <__aeabi_d2uiz>:
   d9ed8:	004a      	lsls	r2, r1, #1
   d9eda:	d211      	bcs.n	d9f00 <__aeabi_d2uiz+0x28>
   d9edc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9ee0:	d211      	bcs.n	d9f06 <__aeabi_d2uiz+0x2e>
   d9ee2:	d50d      	bpl.n	d9f00 <__aeabi_d2uiz+0x28>
   d9ee4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9ee8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9eec:	d40e      	bmi.n	d9f0c <__aeabi_d2uiz+0x34>
   d9eee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9ef2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9ef6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9efa:	fa23 f002 	lsr.w	r0, r3, r2
   d9efe:	4770      	bx	lr
   d9f00:	f04f 0000 	mov.w	r0, #0
   d9f04:	4770      	bx	lr
   d9f06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9f0a:	d102      	bne.n	d9f12 <__aeabi_d2uiz+0x3a>
   d9f0c:	f04f 30ff 	mov.w	r0, #4294967295
   d9f10:	4770      	bx	lr
   d9f12:	f04f 0000 	mov.w	r0, #0
   d9f16:	4770      	bx	lr

000d9f18 <__aeabi_uldivmod>:
   d9f18:	b953      	cbnz	r3, d9f30 <__aeabi_uldivmod+0x18>
   d9f1a:	b94a      	cbnz	r2, d9f30 <__aeabi_uldivmod+0x18>
   d9f1c:	2900      	cmp	r1, #0
   d9f1e:	bf08      	it	eq
   d9f20:	2800      	cmpeq	r0, #0
   d9f22:	bf1c      	itt	ne
   d9f24:	f04f 31ff 	movne.w	r1, #4294967295
   d9f28:	f04f 30ff 	movne.w	r0, #4294967295
   d9f2c:	f000 b98c 	b.w	da248 <__aeabi_idiv0>
   d9f30:	f1ad 0c08 	sub.w	ip, sp, #8
   d9f34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d9f38:	f000 f824 	bl	d9f84 <__udivmoddi4>
   d9f3c:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9f40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9f44:	b004      	add	sp, #16
   d9f46:	4770      	bx	lr

000d9f48 <__aeabi_d2ulz>:
   d9f48:	b5d0      	push	{r4, r6, r7, lr}
   d9f4a:	4b0c      	ldr	r3, [pc, #48]	; (d9f7c <__aeabi_d2ulz+0x34>)
   d9f4c:	2200      	movs	r2, #0
   d9f4e:	4606      	mov	r6, r0
   d9f50:	460f      	mov	r7, r1
   d9f52:	f7ff fce9 	bl	d9928 <__aeabi_dmul>
   d9f56:	f7ff ffbf 	bl	d9ed8 <__aeabi_d2uiz>
   d9f5a:	4604      	mov	r4, r0
   d9f5c:	f7ff fc6a 	bl	d9834 <__aeabi_ui2d>
   d9f60:	4b07      	ldr	r3, [pc, #28]	; (d9f80 <__aeabi_d2ulz+0x38>)
   d9f62:	2200      	movs	r2, #0
   d9f64:	f7ff fce0 	bl	d9928 <__aeabi_dmul>
   d9f68:	4602      	mov	r2, r0
   d9f6a:	460b      	mov	r3, r1
   d9f6c:	4630      	mov	r0, r6
   d9f6e:	4639      	mov	r1, r7
   d9f70:	f7ff fb22 	bl	d95b8 <__aeabi_dsub>
   d9f74:	f7ff ffb0 	bl	d9ed8 <__aeabi_d2uiz>
   d9f78:	4621      	mov	r1, r4
   d9f7a:	bdd0      	pop	{r4, r6, r7, pc}
   d9f7c:	3df00000 	.word	0x3df00000
   d9f80:	41f00000 	.word	0x41f00000

000d9f84 <__udivmoddi4>:
   d9f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9f88:	9d08      	ldr	r5, [sp, #32]
   d9f8a:	4604      	mov	r4, r0
   d9f8c:	468c      	mov	ip, r1
   d9f8e:	2b00      	cmp	r3, #0
   d9f90:	f040 8083 	bne.w	da09a <__udivmoddi4+0x116>
   d9f94:	428a      	cmp	r2, r1
   d9f96:	4617      	mov	r7, r2
   d9f98:	d947      	bls.n	da02a <__udivmoddi4+0xa6>
   d9f9a:	fab2 f282 	clz	r2, r2
   d9f9e:	b142      	cbz	r2, d9fb2 <__udivmoddi4+0x2e>
   d9fa0:	f1c2 0020 	rsb	r0, r2, #32
   d9fa4:	fa24 f000 	lsr.w	r0, r4, r0
   d9fa8:	4091      	lsls	r1, r2
   d9faa:	4097      	lsls	r7, r2
   d9fac:	ea40 0c01 	orr.w	ip, r0, r1
   d9fb0:	4094      	lsls	r4, r2
   d9fb2:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d9fb6:	0c23      	lsrs	r3, r4, #16
   d9fb8:	fbbc f6f8 	udiv	r6, ip, r8
   d9fbc:	fa1f fe87 	uxth.w	lr, r7
   d9fc0:	fb08 c116 	mls	r1, r8, r6, ip
   d9fc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d9fc8:	fb06 f10e 	mul.w	r1, r6, lr
   d9fcc:	4299      	cmp	r1, r3
   d9fce:	d909      	bls.n	d9fe4 <__udivmoddi4+0x60>
   d9fd0:	18fb      	adds	r3, r7, r3
   d9fd2:	f106 30ff 	add.w	r0, r6, #4294967295
   d9fd6:	f080 8119 	bcs.w	da20c <__udivmoddi4+0x288>
   d9fda:	4299      	cmp	r1, r3
   d9fdc:	f240 8116 	bls.w	da20c <__udivmoddi4+0x288>
   d9fe0:	3e02      	subs	r6, #2
   d9fe2:	443b      	add	r3, r7
   d9fe4:	1a5b      	subs	r3, r3, r1
   d9fe6:	b2a4      	uxth	r4, r4
   d9fe8:	fbb3 f0f8 	udiv	r0, r3, r8
   d9fec:	fb08 3310 	mls	r3, r8, r0, r3
   d9ff0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d9ff4:	fb00 fe0e 	mul.w	lr, r0, lr
   d9ff8:	45a6      	cmp	lr, r4
   d9ffa:	d909      	bls.n	da010 <__udivmoddi4+0x8c>
   d9ffc:	193c      	adds	r4, r7, r4
   d9ffe:	f100 33ff 	add.w	r3, r0, #4294967295
   da002:	f080 8105 	bcs.w	da210 <__udivmoddi4+0x28c>
   da006:	45a6      	cmp	lr, r4
   da008:	f240 8102 	bls.w	da210 <__udivmoddi4+0x28c>
   da00c:	3802      	subs	r0, #2
   da00e:	443c      	add	r4, r7
   da010:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   da014:	eba4 040e 	sub.w	r4, r4, lr
   da018:	2600      	movs	r6, #0
   da01a:	b11d      	cbz	r5, da024 <__udivmoddi4+0xa0>
   da01c:	40d4      	lsrs	r4, r2
   da01e:	2300      	movs	r3, #0
   da020:	e9c5 4300 	strd	r4, r3, [r5]
   da024:	4631      	mov	r1, r6
   da026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da02a:	b902      	cbnz	r2, da02e <__udivmoddi4+0xaa>
   da02c:	deff      	udf	#255	; 0xff
   da02e:	fab2 f282 	clz	r2, r2
   da032:	2a00      	cmp	r2, #0
   da034:	d150      	bne.n	da0d8 <__udivmoddi4+0x154>
   da036:	1bcb      	subs	r3, r1, r7
   da038:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   da03c:	fa1f f887 	uxth.w	r8, r7
   da040:	2601      	movs	r6, #1
   da042:	fbb3 fcfe 	udiv	ip, r3, lr
   da046:	0c21      	lsrs	r1, r4, #16
   da048:	fb0e 331c 	mls	r3, lr, ip, r3
   da04c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   da050:	fb08 f30c 	mul.w	r3, r8, ip
   da054:	428b      	cmp	r3, r1
   da056:	d907      	bls.n	da068 <__udivmoddi4+0xe4>
   da058:	1879      	adds	r1, r7, r1
   da05a:	f10c 30ff 	add.w	r0, ip, #4294967295
   da05e:	d202      	bcs.n	da066 <__udivmoddi4+0xe2>
   da060:	428b      	cmp	r3, r1
   da062:	f200 80e9 	bhi.w	da238 <__udivmoddi4+0x2b4>
   da066:	4684      	mov	ip, r0
   da068:	1ac9      	subs	r1, r1, r3
   da06a:	b2a3      	uxth	r3, r4
   da06c:	fbb1 f0fe 	udiv	r0, r1, lr
   da070:	fb0e 1110 	mls	r1, lr, r0, r1
   da074:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   da078:	fb08 f800 	mul.w	r8, r8, r0
   da07c:	45a0      	cmp	r8, r4
   da07e:	d907      	bls.n	da090 <__udivmoddi4+0x10c>
   da080:	193c      	adds	r4, r7, r4
   da082:	f100 33ff 	add.w	r3, r0, #4294967295
   da086:	d202      	bcs.n	da08e <__udivmoddi4+0x10a>
   da088:	45a0      	cmp	r8, r4
   da08a:	f200 80d9 	bhi.w	da240 <__udivmoddi4+0x2bc>
   da08e:	4618      	mov	r0, r3
   da090:	eba4 0408 	sub.w	r4, r4, r8
   da094:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   da098:	e7bf      	b.n	da01a <__udivmoddi4+0x96>
   da09a:	428b      	cmp	r3, r1
   da09c:	d909      	bls.n	da0b2 <__udivmoddi4+0x12e>
   da09e:	2d00      	cmp	r5, #0
   da0a0:	f000 80b1 	beq.w	da206 <__udivmoddi4+0x282>
   da0a4:	2600      	movs	r6, #0
   da0a6:	e9c5 0100 	strd	r0, r1, [r5]
   da0aa:	4630      	mov	r0, r6
   da0ac:	4631      	mov	r1, r6
   da0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da0b2:	fab3 f683 	clz	r6, r3
   da0b6:	2e00      	cmp	r6, #0
   da0b8:	d14a      	bne.n	da150 <__udivmoddi4+0x1cc>
   da0ba:	428b      	cmp	r3, r1
   da0bc:	d302      	bcc.n	da0c4 <__udivmoddi4+0x140>
   da0be:	4282      	cmp	r2, r0
   da0c0:	f200 80b8 	bhi.w	da234 <__udivmoddi4+0x2b0>
   da0c4:	1a84      	subs	r4, r0, r2
   da0c6:	eb61 0103 	sbc.w	r1, r1, r3
   da0ca:	2001      	movs	r0, #1
   da0cc:	468c      	mov	ip, r1
   da0ce:	2d00      	cmp	r5, #0
   da0d0:	d0a8      	beq.n	da024 <__udivmoddi4+0xa0>
   da0d2:	e9c5 4c00 	strd	r4, ip, [r5]
   da0d6:	e7a5      	b.n	da024 <__udivmoddi4+0xa0>
   da0d8:	f1c2 0320 	rsb	r3, r2, #32
   da0dc:	fa20 f603 	lsr.w	r6, r0, r3
   da0e0:	4097      	lsls	r7, r2
   da0e2:	fa01 f002 	lsl.w	r0, r1, r2
   da0e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   da0ea:	40d9      	lsrs	r1, r3
   da0ec:	4330      	orrs	r0, r6
   da0ee:	0c03      	lsrs	r3, r0, #16
   da0f0:	fbb1 f6fe 	udiv	r6, r1, lr
   da0f4:	fa1f f887 	uxth.w	r8, r7
   da0f8:	fb0e 1116 	mls	r1, lr, r6, r1
   da0fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   da100:	fb06 f108 	mul.w	r1, r6, r8
   da104:	4299      	cmp	r1, r3
   da106:	fa04 f402 	lsl.w	r4, r4, r2
   da10a:	d909      	bls.n	da120 <__udivmoddi4+0x19c>
   da10c:	18fb      	adds	r3, r7, r3
   da10e:	f106 3cff 	add.w	ip, r6, #4294967295
   da112:	f080 808d 	bcs.w	da230 <__udivmoddi4+0x2ac>
   da116:	4299      	cmp	r1, r3
   da118:	f240 808a 	bls.w	da230 <__udivmoddi4+0x2ac>
   da11c:	3e02      	subs	r6, #2
   da11e:	443b      	add	r3, r7
   da120:	1a5b      	subs	r3, r3, r1
   da122:	b281      	uxth	r1, r0
   da124:	fbb3 f0fe 	udiv	r0, r3, lr
   da128:	fb0e 3310 	mls	r3, lr, r0, r3
   da12c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   da130:	fb00 f308 	mul.w	r3, r0, r8
   da134:	428b      	cmp	r3, r1
   da136:	d907      	bls.n	da148 <__udivmoddi4+0x1c4>
   da138:	1879      	adds	r1, r7, r1
   da13a:	f100 3cff 	add.w	ip, r0, #4294967295
   da13e:	d273      	bcs.n	da228 <__udivmoddi4+0x2a4>
   da140:	428b      	cmp	r3, r1
   da142:	d971      	bls.n	da228 <__udivmoddi4+0x2a4>
   da144:	3802      	subs	r0, #2
   da146:	4439      	add	r1, r7
   da148:	1acb      	subs	r3, r1, r3
   da14a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   da14e:	e778      	b.n	da042 <__udivmoddi4+0xbe>
   da150:	f1c6 0c20 	rsb	ip, r6, #32
   da154:	fa03 f406 	lsl.w	r4, r3, r6
   da158:	fa22 f30c 	lsr.w	r3, r2, ip
   da15c:	431c      	orrs	r4, r3
   da15e:	fa20 f70c 	lsr.w	r7, r0, ip
   da162:	fa01 f306 	lsl.w	r3, r1, r6
   da166:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   da16a:	fa21 f10c 	lsr.w	r1, r1, ip
   da16e:	431f      	orrs	r7, r3
   da170:	0c3b      	lsrs	r3, r7, #16
   da172:	fbb1 f9fe 	udiv	r9, r1, lr
   da176:	fa1f f884 	uxth.w	r8, r4
   da17a:	fb0e 1119 	mls	r1, lr, r9, r1
   da17e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   da182:	fb09 fa08 	mul.w	sl, r9, r8
   da186:	458a      	cmp	sl, r1
   da188:	fa02 f206 	lsl.w	r2, r2, r6
   da18c:	fa00 f306 	lsl.w	r3, r0, r6
   da190:	d908      	bls.n	da1a4 <__udivmoddi4+0x220>
   da192:	1861      	adds	r1, r4, r1
   da194:	f109 30ff 	add.w	r0, r9, #4294967295
   da198:	d248      	bcs.n	da22c <__udivmoddi4+0x2a8>
   da19a:	458a      	cmp	sl, r1
   da19c:	d946      	bls.n	da22c <__udivmoddi4+0x2a8>
   da19e:	f1a9 0902 	sub.w	r9, r9, #2
   da1a2:	4421      	add	r1, r4
   da1a4:	eba1 010a 	sub.w	r1, r1, sl
   da1a8:	b2bf      	uxth	r7, r7
   da1aa:	fbb1 f0fe 	udiv	r0, r1, lr
   da1ae:	fb0e 1110 	mls	r1, lr, r0, r1
   da1b2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   da1b6:	fb00 f808 	mul.w	r8, r0, r8
   da1ba:	45b8      	cmp	r8, r7
   da1bc:	d907      	bls.n	da1ce <__udivmoddi4+0x24a>
   da1be:	19e7      	adds	r7, r4, r7
   da1c0:	f100 31ff 	add.w	r1, r0, #4294967295
   da1c4:	d22e      	bcs.n	da224 <__udivmoddi4+0x2a0>
   da1c6:	45b8      	cmp	r8, r7
   da1c8:	d92c      	bls.n	da224 <__udivmoddi4+0x2a0>
   da1ca:	3802      	subs	r0, #2
   da1cc:	4427      	add	r7, r4
   da1ce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   da1d2:	eba7 0708 	sub.w	r7, r7, r8
   da1d6:	fba0 8902 	umull	r8, r9, r0, r2
   da1da:	454f      	cmp	r7, r9
   da1dc:	46c6      	mov	lr, r8
   da1de:	4649      	mov	r1, r9
   da1e0:	d31a      	bcc.n	da218 <__udivmoddi4+0x294>
   da1e2:	d017      	beq.n	da214 <__udivmoddi4+0x290>
   da1e4:	b15d      	cbz	r5, da1fe <__udivmoddi4+0x27a>
   da1e6:	ebb3 020e 	subs.w	r2, r3, lr
   da1ea:	eb67 0701 	sbc.w	r7, r7, r1
   da1ee:	fa07 fc0c 	lsl.w	ip, r7, ip
   da1f2:	40f2      	lsrs	r2, r6
   da1f4:	ea4c 0202 	orr.w	r2, ip, r2
   da1f8:	40f7      	lsrs	r7, r6
   da1fa:	e9c5 2700 	strd	r2, r7, [r5]
   da1fe:	2600      	movs	r6, #0
   da200:	4631      	mov	r1, r6
   da202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da206:	462e      	mov	r6, r5
   da208:	4628      	mov	r0, r5
   da20a:	e70b      	b.n	da024 <__udivmoddi4+0xa0>
   da20c:	4606      	mov	r6, r0
   da20e:	e6e9      	b.n	d9fe4 <__udivmoddi4+0x60>
   da210:	4618      	mov	r0, r3
   da212:	e6fd      	b.n	da010 <__udivmoddi4+0x8c>
   da214:	4543      	cmp	r3, r8
   da216:	d2e5      	bcs.n	da1e4 <__udivmoddi4+0x260>
   da218:	ebb8 0e02 	subs.w	lr, r8, r2
   da21c:	eb69 0104 	sbc.w	r1, r9, r4
   da220:	3801      	subs	r0, #1
   da222:	e7df      	b.n	da1e4 <__udivmoddi4+0x260>
   da224:	4608      	mov	r0, r1
   da226:	e7d2      	b.n	da1ce <__udivmoddi4+0x24a>
   da228:	4660      	mov	r0, ip
   da22a:	e78d      	b.n	da148 <__udivmoddi4+0x1c4>
   da22c:	4681      	mov	r9, r0
   da22e:	e7b9      	b.n	da1a4 <__udivmoddi4+0x220>
   da230:	4666      	mov	r6, ip
   da232:	e775      	b.n	da120 <__udivmoddi4+0x19c>
   da234:	4630      	mov	r0, r6
   da236:	e74a      	b.n	da0ce <__udivmoddi4+0x14a>
   da238:	f1ac 0c02 	sub.w	ip, ip, #2
   da23c:	4439      	add	r1, r7
   da23e:	e713      	b.n	da068 <__udivmoddi4+0xe4>
   da240:	3802      	subs	r0, #2
   da242:	443c      	add	r4, r7
   da244:	e724      	b.n	da090 <__udivmoddi4+0x10c>
   da246:	bf00      	nop

000da248 <__aeabi_idiv0>:
   da248:	4770      	bx	lr
   da24a:	bf00      	nop

000da24c <atoi>:
   da24c:	220a      	movs	r2, #10
   da24e:	2100      	movs	r1, #0
   da250:	f000 b950 	b.w	da4f4 <strtol>

000da254 <__cxa_atexit>:
   da254:	b510      	push	{r4, lr}
   da256:	4c05      	ldr	r4, [pc, #20]	; (da26c <__cxa_atexit+0x18>)
   da258:	4613      	mov	r3, r2
   da25a:	b12c      	cbz	r4, da268 <__cxa_atexit+0x14>
   da25c:	460a      	mov	r2, r1
   da25e:	4601      	mov	r1, r0
   da260:	2002      	movs	r0, #2
   da262:	f3af 8000 	nop.w
   da266:	bd10      	pop	{r4, pc}
   da268:	4620      	mov	r0, r4
   da26a:	e7fc      	b.n	da266 <__cxa_atexit+0x12>
   da26c:	00000000 	.word	0x00000000

000da270 <ldiv>:
   da270:	2900      	cmp	r1, #0
   da272:	b510      	push	{r4, lr}
   da274:	fb91 f4f2 	sdiv	r4, r1, r2
   da278:	fb02 1314 	mls	r3, r2, r4, r1
   da27c:	db06      	blt.n	da28c <ldiv+0x1c>
   da27e:	2b00      	cmp	r3, #0
   da280:	da01      	bge.n	da286 <ldiv+0x16>
   da282:	3401      	adds	r4, #1
   da284:	1a9b      	subs	r3, r3, r2
   da286:	e9c0 4300 	strd	r4, r3, [r0]
   da28a:	bd10      	pop	{r4, pc}
   da28c:	2b00      	cmp	r3, #0
   da28e:	bfc4      	itt	gt
   da290:	f104 34ff 	addgt.w	r4, r4, #4294967295
   da294:	189b      	addgt	r3, r3, r2
   da296:	e7f6      	b.n	da286 <ldiv+0x16>

000da298 <memcmp>:
   da298:	b530      	push	{r4, r5, lr}
   da29a:	3901      	subs	r1, #1
   da29c:	2400      	movs	r4, #0
   da29e:	42a2      	cmp	r2, r4
   da2a0:	d101      	bne.n	da2a6 <memcmp+0xe>
   da2a2:	2000      	movs	r0, #0
   da2a4:	e005      	b.n	da2b2 <memcmp+0x1a>
   da2a6:	5d03      	ldrb	r3, [r0, r4]
   da2a8:	3401      	adds	r4, #1
   da2aa:	5d0d      	ldrb	r5, [r1, r4]
   da2ac:	42ab      	cmp	r3, r5
   da2ae:	d0f6      	beq.n	da29e <memcmp+0x6>
   da2b0:	1b58      	subs	r0, r3, r5
   da2b2:	bd30      	pop	{r4, r5, pc}

000da2b4 <memcpy>:
   da2b4:	440a      	add	r2, r1
   da2b6:	4291      	cmp	r1, r2
   da2b8:	f100 33ff 	add.w	r3, r0, #4294967295
   da2bc:	d100      	bne.n	da2c0 <memcpy+0xc>
   da2be:	4770      	bx	lr
   da2c0:	b510      	push	{r4, lr}
   da2c2:	f811 4b01 	ldrb.w	r4, [r1], #1
   da2c6:	f803 4f01 	strb.w	r4, [r3, #1]!
   da2ca:	4291      	cmp	r1, r2
   da2cc:	d1f9      	bne.n	da2c2 <memcpy+0xe>
   da2ce:	bd10      	pop	{r4, pc}

000da2d0 <memmove>:
   da2d0:	4288      	cmp	r0, r1
   da2d2:	b510      	push	{r4, lr}
   da2d4:	eb01 0402 	add.w	r4, r1, r2
   da2d8:	d902      	bls.n	da2e0 <memmove+0x10>
   da2da:	4284      	cmp	r4, r0
   da2dc:	4623      	mov	r3, r4
   da2de:	d807      	bhi.n	da2f0 <memmove+0x20>
   da2e0:	1e43      	subs	r3, r0, #1
   da2e2:	42a1      	cmp	r1, r4
   da2e4:	d008      	beq.n	da2f8 <memmove+0x28>
   da2e6:	f811 2b01 	ldrb.w	r2, [r1], #1
   da2ea:	f803 2f01 	strb.w	r2, [r3, #1]!
   da2ee:	e7f8      	b.n	da2e2 <memmove+0x12>
   da2f0:	4402      	add	r2, r0
   da2f2:	4601      	mov	r1, r0
   da2f4:	428a      	cmp	r2, r1
   da2f6:	d100      	bne.n	da2fa <memmove+0x2a>
   da2f8:	bd10      	pop	{r4, pc}
   da2fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   da2fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
   da302:	e7f7      	b.n	da2f4 <memmove+0x24>

000da304 <memset>:
   da304:	4402      	add	r2, r0
   da306:	4603      	mov	r3, r0
   da308:	4293      	cmp	r3, r2
   da30a:	d100      	bne.n	da30e <memset+0xa>
   da30c:	4770      	bx	lr
   da30e:	f803 1b01 	strb.w	r1, [r3], #1
   da312:	e7f9      	b.n	da308 <memset+0x4>

000da314 <srand>:
   da314:	b538      	push	{r3, r4, r5, lr}
   da316:	4b0d      	ldr	r3, [pc, #52]	; (da34c <srand+0x38>)
   da318:	681d      	ldr	r5, [r3, #0]
   da31a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da31c:	4604      	mov	r4, r0
   da31e:	b97b      	cbnz	r3, da340 <srand+0x2c>
   da320:	2018      	movs	r0, #24
   da322:	f7fc f857 	bl	d63d4 <malloc>
   da326:	4a0a      	ldr	r2, [pc, #40]	; (da350 <srand+0x3c>)
   da328:	4b0a      	ldr	r3, [pc, #40]	; (da354 <srand+0x40>)
   da32a:	63a8      	str	r0, [r5, #56]	; 0x38
   da32c:	e9c0 2300 	strd	r2, r3, [r0]
   da330:	4b09      	ldr	r3, [pc, #36]	; (da358 <srand+0x44>)
   da332:	6083      	str	r3, [r0, #8]
   da334:	230b      	movs	r3, #11
   da336:	8183      	strh	r3, [r0, #12]
   da338:	2201      	movs	r2, #1
   da33a:	2300      	movs	r3, #0
   da33c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   da340:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da342:	2200      	movs	r2, #0
   da344:	611c      	str	r4, [r3, #16]
   da346:	615a      	str	r2, [r3, #20]
   da348:	bd38      	pop	{r3, r4, r5, pc}
   da34a:	bf00      	nop
   da34c:	2003dee4 	.word	0x2003dee4
   da350:	abcd330e 	.word	0xabcd330e
   da354:	e66d1234 	.word	0xe66d1234
   da358:	0005deec 	.word	0x0005deec

000da35c <strcmp>:
   da35c:	f810 2b01 	ldrb.w	r2, [r0], #1
   da360:	f811 3b01 	ldrb.w	r3, [r1], #1
   da364:	2a01      	cmp	r2, #1
   da366:	bf28      	it	cs
   da368:	429a      	cmpcs	r2, r3
   da36a:	d0f7      	beq.n	da35c <strcmp>
   da36c:	1ad0      	subs	r0, r2, r3
   da36e:	4770      	bx	lr

000da370 <strcpy>:
   da370:	4603      	mov	r3, r0
   da372:	f811 2b01 	ldrb.w	r2, [r1], #1
   da376:	f803 2b01 	strb.w	r2, [r3], #1
   da37a:	2a00      	cmp	r2, #0
   da37c:	d1f9      	bne.n	da372 <strcpy+0x2>
   da37e:	4770      	bx	lr

000da380 <strlen>:
   da380:	4603      	mov	r3, r0
   da382:	f813 2b01 	ldrb.w	r2, [r3], #1
   da386:	2a00      	cmp	r2, #0
   da388:	d1fb      	bne.n	da382 <strlen+0x2>
   da38a:	1a18      	subs	r0, r3, r0
   da38c:	3801      	subs	r0, #1
   da38e:	4770      	bx	lr

000da390 <strncpy>:
   da390:	b510      	push	{r4, lr}
   da392:	3901      	subs	r1, #1
   da394:	4603      	mov	r3, r0
   da396:	b132      	cbz	r2, da3a6 <strncpy+0x16>
   da398:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   da39c:	f803 4b01 	strb.w	r4, [r3], #1
   da3a0:	3a01      	subs	r2, #1
   da3a2:	2c00      	cmp	r4, #0
   da3a4:	d1f7      	bne.n	da396 <strncpy+0x6>
   da3a6:	441a      	add	r2, r3
   da3a8:	2100      	movs	r1, #0
   da3aa:	4293      	cmp	r3, r2
   da3ac:	d100      	bne.n	da3b0 <strncpy+0x20>
   da3ae:	bd10      	pop	{r4, pc}
   da3b0:	f803 1b01 	strb.w	r1, [r3], #1
   da3b4:	e7f9      	b.n	da3aa <strncpy+0x1a>

000da3b6 <strnlen>:
   da3b6:	b510      	push	{r4, lr}
   da3b8:	4602      	mov	r2, r0
   da3ba:	4401      	add	r1, r0
   da3bc:	428a      	cmp	r2, r1
   da3be:	4613      	mov	r3, r2
   da3c0:	d101      	bne.n	da3c6 <strnlen+0x10>
   da3c2:	1a18      	subs	r0, r3, r0
   da3c4:	bd10      	pop	{r4, pc}
   da3c6:	781c      	ldrb	r4, [r3, #0]
   da3c8:	3201      	adds	r2, #1
   da3ca:	2c00      	cmp	r4, #0
   da3cc:	d1f6      	bne.n	da3bc <strnlen+0x6>
   da3ce:	e7f8      	b.n	da3c2 <strnlen+0xc>

000da3d0 <strstr>:
   da3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   da3d2:	780c      	ldrb	r4, [r1, #0]
   da3d4:	b164      	cbz	r4, da3f0 <strstr+0x20>
   da3d6:	4603      	mov	r3, r0
   da3d8:	781a      	ldrb	r2, [r3, #0]
   da3da:	4618      	mov	r0, r3
   da3dc:	1c5e      	adds	r6, r3, #1
   da3de:	b90a      	cbnz	r2, da3e4 <strstr+0x14>
   da3e0:	4610      	mov	r0, r2
   da3e2:	e005      	b.n	da3f0 <strstr+0x20>
   da3e4:	4294      	cmp	r4, r2
   da3e6:	d108      	bne.n	da3fa <strstr+0x2a>
   da3e8:	460d      	mov	r5, r1
   da3ea:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   da3ee:	b902      	cbnz	r2, da3f2 <strstr+0x22>
   da3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da3f2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   da3f6:	4297      	cmp	r7, r2
   da3f8:	d0f7      	beq.n	da3ea <strstr+0x1a>
   da3fa:	4633      	mov	r3, r6
   da3fc:	e7ec      	b.n	da3d8 <strstr+0x8>
	...

000da400 <_strtol_l.isra.0>:
   da400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da404:	4e3a      	ldr	r6, [pc, #232]	; (da4f0 <_strtol_l.isra.0+0xf0>)
   da406:	4686      	mov	lr, r0
   da408:	468c      	mov	ip, r1
   da40a:	4660      	mov	r0, ip
   da40c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da410:	5da5      	ldrb	r5, [r4, r6]
   da412:	f015 0508 	ands.w	r5, r5, #8
   da416:	d1f8      	bne.n	da40a <_strtol_l.isra.0+0xa>
   da418:	2c2d      	cmp	r4, #45	; 0x2d
   da41a:	d133      	bne.n	da484 <_strtol_l.isra.0+0x84>
   da41c:	f89c 4000 	ldrb.w	r4, [ip]
   da420:	f04f 0801 	mov.w	r8, #1
   da424:	f100 0c02 	add.w	ip, r0, #2
   da428:	2b00      	cmp	r3, #0
   da42a:	d05c      	beq.n	da4e6 <_strtol_l.isra.0+0xe6>
   da42c:	2b10      	cmp	r3, #16
   da42e:	d10c      	bne.n	da44a <_strtol_l.isra.0+0x4a>
   da430:	2c30      	cmp	r4, #48	; 0x30
   da432:	d10a      	bne.n	da44a <_strtol_l.isra.0+0x4a>
   da434:	f89c 0000 	ldrb.w	r0, [ip]
   da438:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da43c:	2858      	cmp	r0, #88	; 0x58
   da43e:	d14d      	bne.n	da4dc <_strtol_l.isra.0+0xdc>
   da440:	f89c 4001 	ldrb.w	r4, [ip, #1]
   da444:	2310      	movs	r3, #16
   da446:	f10c 0c02 	add.w	ip, ip, #2
   da44a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   da44e:	3f01      	subs	r7, #1
   da450:	2600      	movs	r6, #0
   da452:	fbb7 f9f3 	udiv	r9, r7, r3
   da456:	4630      	mov	r0, r6
   da458:	fb03 7a19 	mls	sl, r3, r9, r7
   da45c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   da460:	2d09      	cmp	r5, #9
   da462:	d818      	bhi.n	da496 <_strtol_l.isra.0+0x96>
   da464:	462c      	mov	r4, r5
   da466:	42a3      	cmp	r3, r4
   da468:	dd24      	ble.n	da4b4 <_strtol_l.isra.0+0xb4>
   da46a:	1c75      	adds	r5, r6, #1
   da46c:	d007      	beq.n	da47e <_strtol_l.isra.0+0x7e>
   da46e:	4581      	cmp	r9, r0
   da470:	d31d      	bcc.n	da4ae <_strtol_l.isra.0+0xae>
   da472:	d101      	bne.n	da478 <_strtol_l.isra.0+0x78>
   da474:	45a2      	cmp	sl, r4
   da476:	db1a      	blt.n	da4ae <_strtol_l.isra.0+0xae>
   da478:	fb00 4003 	mla	r0, r0, r3, r4
   da47c:	2601      	movs	r6, #1
   da47e:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da482:	e7eb      	b.n	da45c <_strtol_l.isra.0+0x5c>
   da484:	2c2b      	cmp	r4, #43	; 0x2b
   da486:	bf08      	it	eq
   da488:	f89c 4000 	ldrbeq.w	r4, [ip]
   da48c:	46a8      	mov	r8, r5
   da48e:	bf08      	it	eq
   da490:	f100 0c02 	addeq.w	ip, r0, #2
   da494:	e7c8      	b.n	da428 <_strtol_l.isra.0+0x28>
   da496:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   da49a:	2d19      	cmp	r5, #25
   da49c:	d801      	bhi.n	da4a2 <_strtol_l.isra.0+0xa2>
   da49e:	3c37      	subs	r4, #55	; 0x37
   da4a0:	e7e1      	b.n	da466 <_strtol_l.isra.0+0x66>
   da4a2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   da4a6:	2d19      	cmp	r5, #25
   da4a8:	d804      	bhi.n	da4b4 <_strtol_l.isra.0+0xb4>
   da4aa:	3c57      	subs	r4, #87	; 0x57
   da4ac:	e7db      	b.n	da466 <_strtol_l.isra.0+0x66>
   da4ae:	f04f 36ff 	mov.w	r6, #4294967295
   da4b2:	e7e4      	b.n	da47e <_strtol_l.isra.0+0x7e>
   da4b4:	1c73      	adds	r3, r6, #1
   da4b6:	d106      	bne.n	da4c6 <_strtol_l.isra.0+0xc6>
   da4b8:	2322      	movs	r3, #34	; 0x22
   da4ba:	f8ce 3000 	str.w	r3, [lr]
   da4be:	4638      	mov	r0, r7
   da4c0:	b942      	cbnz	r2, da4d4 <_strtol_l.isra.0+0xd4>
   da4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da4c6:	f1b8 0f00 	cmp.w	r8, #0
   da4ca:	d000      	beq.n	da4ce <_strtol_l.isra.0+0xce>
   da4cc:	4240      	negs	r0, r0
   da4ce:	2a00      	cmp	r2, #0
   da4d0:	d0f7      	beq.n	da4c2 <_strtol_l.isra.0+0xc2>
   da4d2:	b10e      	cbz	r6, da4d8 <_strtol_l.isra.0+0xd8>
   da4d4:	f10c 31ff 	add.w	r1, ip, #4294967295
   da4d8:	6011      	str	r1, [r2, #0]
   da4da:	e7f2      	b.n	da4c2 <_strtol_l.isra.0+0xc2>
   da4dc:	2430      	movs	r4, #48	; 0x30
   da4de:	2b00      	cmp	r3, #0
   da4e0:	d1b3      	bne.n	da44a <_strtol_l.isra.0+0x4a>
   da4e2:	2308      	movs	r3, #8
   da4e4:	e7b1      	b.n	da44a <_strtol_l.isra.0+0x4a>
   da4e6:	2c30      	cmp	r4, #48	; 0x30
   da4e8:	d0a4      	beq.n	da434 <_strtol_l.isra.0+0x34>
   da4ea:	230a      	movs	r3, #10
   da4ec:	e7ad      	b.n	da44a <_strtol_l.isra.0+0x4a>
   da4ee:	bf00      	nop
   da4f0:	000dafe6 	.word	0x000dafe6

000da4f4 <strtol>:
   da4f4:	4613      	mov	r3, r2
   da4f6:	460a      	mov	r2, r1
   da4f8:	4601      	mov	r1, r0
   da4fa:	4802      	ldr	r0, [pc, #8]	; (da504 <strtol+0x10>)
   da4fc:	6800      	ldr	r0, [r0, #0]
   da4fe:	f7ff bf7f 	b.w	da400 <_strtol_l.isra.0>
   da502:	bf00      	nop
   da504:	2003dee4 	.word	0x2003dee4

000da508 <dynalib_user>:
   da508:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   da518:	00000000 63736964 656e6e6f 64657463     ....disconnected
   da528:	65727400 68742e6b 6c637765 6d6f632e     .trek.thewcl.com
   da538:	7b002f00 69736422 003a2264 7622202c     ./.{"dsid":., "v
   da548:	65756c61 00223a22 22202c22 656d6974     alue":".", "time
   da558:	6d617473 003a2270 70002c7d 69766572     stamp":.},.previ
   da568:	2073756f 756c6176 203a7365 64227b00     ous values: .{"d
   da578:	22617461 5d005b3a 4f50007d 53005453     ata":[.]}.POST.S
   da588:	75746174 00203a73 79646f42 0a00203a     tatus: .Body: ..
   da598:	64657243 69746e65 20736c61 20657261     Credentials are 
   da5a8:	72727563 6c746e65 74732079 6465726f     currently stored
   da5b8:	726f6620 005b0a3a 5d000a2c 746e450a      for:.[.,..].Ent
   da5c8:	6e207265 6f777465 53206b72 20444953     er network SSID 
   da5d8:	616c6228 74206b6e 6b73206f 202c7069     (blank to skip, 
   da5e8:	656c6327 20277261 72206f74 74657365     'clear' to reset
   da5f8:	65726320 746e6564 736c6169 00203a29      credentials): .
   da608:	7275430a 746e6572 49534420 73692044     .Current DSID is
   da618:	5d005b20 746e450a 64207265 63697665      [.].Enter devic
   da628:	53442065 28204449 6e616c62 6f74206b     e DSID (blank to
   da638:	696b7320 203a2970 656c6300 0a007261      skip): .clear..
   da648:	65746e45 656e2072 726f7774 6170206b     Enter network pa
   da658:	6f777373 203a6472 430a0a00 65646572     ssword: ...Crede
   da668:	6169746e 7320736c 77207465 20687469     ntials set with 
   da678:	64697373 0a00203a 73736170 64726f77     ssid: ..password
   da688:	0a00203a 450a000a 7265746e 65742720     : .....Enter 'te
   da698:	20277473 74206f74 20747365 64657263     st' to test cred
   da6a8:	69746e65 20736c61 616c6228 74206b6e     entials (blank t
   da6b8:	6b73206f 3a297069 65740020 74007473     o skip): .test.t
   da6c8:	6f656d69 53007475 65636375 0a217373     imeout.Success!.
   da6d8:	52524500 203a524f 69466957 6e6f6320     .ERROR: WiFi con
   da6e8:	7463656e 206e6f69 656d6974 0a74756f     nection timeout.
   da6f8:	69736400 6e652064 65726574 73640064     .dsid entered.ds
   da708:	203a6469 75430a00 6e657272 61762074     id: ..Current va
   da718:	2065756c 20726f66 61746164 6c6f6320     lue for data col
   da728:	7463656c 206e6f69 65746e69 6c617672     lection interval
   da738:	20736920 0a5d005b 65746e45 69742072      is [.].Enter ti
   da748:	6220656d 65777465 64206e65 20617461     me between data 
   da758:	6c6c6f63 69746365 61206e6f 6e612073     collection as an
   da768:	746e6920 72656765 206e6920 6c6c696d      integer in mill
   da778:	63657369 73646e6f 6c622820 206b6e61     iseconds (blank 
   da788:	73206f74 2970696b 0a00203a 72727543     to skip): ..Curr
   da798:	20746e65 756c6176 6f662065 69572072     ent value for Wi
   da7a8:	63206946 656e6e6f 6f697463 6e69206e     Fi connection in
   da7b8:	76726574 69206c61 005b2073 6e450a5d     terval is [.].En
   da7c8:	20726574 656d6974 74656220 6e656577     ter time between
   da7d8:	46695720 6f632069 63656e6e 6e6f6974      WiFi connection
   da7e8:	73612073 206e6120 65746e69 20726567     s as an integer 
   da7f8:	73206e69 6e6f6365 28207364 6e616c62     in seconds (blan
   da808:	6f74206b 696b7320 203a2970 6e450a00     k to skip): ..En
   da818:	20726574 61746f27 6f742027 69617720     ter 'ota' to wai
   da828:	6f662074 544f2072 70752041 65746164     t for OTA update
   da838:	6c622820 206b6e61 73206f74 2970696b      (blank to skip)
   da848:	6f00203a 36006174 30303445 2d313030     : .ota.6E400001-
   da858:	33413542 3933462d 30452d33 452d3941     B5A3-F393-E0A9-E
   da868:	32453035 43434434 00453941 30344536     50E24DCCA9E.6E40
   da878:	32303030 4135422d 33462d33 452d3339     0002-B5A3-F393-E
   da888:	2d394130 45303545 43443432 45394143     0A9-E50E24DCCA9E
   da898:	34453600 30303030 35422d33 462d3341     .6E400003-B5A3-F
   da8a8:	2d333933 39413045 3035452d 44343245     393-E0A9-E50E24D
   da8b8:	39414343 78740045 00787200 65636341     CCA9E.tx.rx.Acce
   da8c8:	61007470 696c7070 69746163 6a2f6e6f     pt.application/j
   da8d8:	006e6f73 746e6f43 2d746e65 65707954     son.Content-Type
   da8e8:	69706100 6b6f742d 41006e65 652d4950     .api-token.API-e
   da8f8:	65656661 6264632d 332d3635 64353435     afee-cdb56-3545d
   da908:	6638332d 4c006437 44335349 00000048     -38f7d.LIS3DH...

000da918 <_ZTV15Adafruit_LIS3DH>:
	...
   da920:	000d40af 000d5081 000d5311 000d57c1     .@...P...S...W..
   da930:	000d5315 70747448 65696c43 093e746e     .S..HttpClient>.
   da940:	6e6e6f43 69746365 7420676e 00203a6f     Connecting to: .
   da950:	70747448 65696c43 093e746e 6e6e6f43     HttpClient>.Conn
   da960:	69746365 7420676e 5049206f 2000203a     ecting to IP: . 
   da970:	50545448 302e312f 48000a0d 43707474     HTTP/1.0...HttpC
   da980:	6e65696c 53093e74 74726174 20666f20     lient>.Start of 
   da990:	50545448 71655220 74736575 6c63002e     HTTP Request..cl
   da9a0:	0065736f 6e6e6f43 69746365 48006e6f     ose.Connection.H
   da9b0:	43707474 6e65696c 43093e74 656e6e6f     ttpClient>.Conne
   da9c0:	6f697463 6166206e 64656c69 4f48002e     ction failed..HO
   da9d0:	43005453 65746e6f 4c2d746e 74676e65     ST.Content-Lengt
   da9e0:	74480068 6c437074 746e6569 6e45093e     h.HttpClient>.En
   da9f0:	666f2064 54544820 65522050 73657571     d of HTTP Reques
   daa00:	0d002e74 7474480a 696c4370 3e746e65     t....HttpClient>
   daa10:	63655209 69766965 5420676e 74205043     .Receiving TCP t
   daa20:	736e6172 69746361 6f206e6f 20002066     ransaction of . 
   daa30:	65747962 48002e73 43707474 6e65696c     bytes..HttpClien
   daa40:	45093e74 726f7272 6552203a 6e6f7073     t>.Error: Respon
   daa50:	62206573 2079646f 6772616c 74207265     se body larger t
   daa60:	206e6168 66667562 002e7265 74480a0d     han buffer....Ht
   daa70:	6c437074 746e6569 6e45093e 666f2064     tpClient>.End of
   daa80:	50435420 61727420 6361736e 6e6f6974      TCP transaction
   daa90:	0a0d002e 70747448 65696c43 093e746e     ....HttpClient>.
   daaa0:	6f727245 54203a72 6f656d69 77207475     Error: Timeout w
   daab0:	656c6968 61657220 676e6964 73657220     hile reading res
   daac0:	736e6f70 0d002e65 7474480a 696c4370     ponse....HttpCli
   daad0:	3e746e65 646e4509 20666f20 50545448     ent>.End of HTTP
   daae0:	73655220 736e6f70 00282065 2e29736d      Response (.ms).
   daaf0:	74744800 696c4370 3e746e65 61745309     .HttpClient>.Sta
   dab00:	20737574 65646f43 0d00203a 000a0d0a     tus Code: ......
   dab10:	70747448 65696c43 093e746e 6f727245     HttpClient>.Erro
   dab20:	43203a72 74276e61 6e696620 54482064     r: Can't find HT
   dab30:	72205054 6f707365 2065736e 79646f62     TP response body
   dab40:	0000002e                                ....

000dab44 <_ZTVN5spark13EthernetClassE>:
	...
   dab4c:	000d6493 000d6489 000d647f 000d6475     .d...d...d..ud..
   dab5c:	000d6469 000d645d 000d9071 000d9079     id..]d..q...y...
   dab6c:	000d6451 000d6449 000d643f 000d6435     Qd..Id..?d..5d..
   dab7c:	000d90a9                                ....

000dab80 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dab80:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   dab90:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   daba0:	72756769 6f697461 7369206e 766e6920     iguration is inv
   dabb0:	64696c61 6977002e 676e6972 656c622e     alid..wiring.ble
   dabc0:	61745300 64207472 6f637369 69726576     .Start discoveri
   dabd0:	7320676e 69767265 2e736563 65655000     ng services..Pee
   dabe0:	65642072 65636976 20736920 7373696d     r device is miss
   dabf0:	21676e69 69614600 2064656c 61206f74     ing!.Failed to a
   dac00:	6e657070 65702064 43207265 72746e65     ppend peer Centr
   dac10:	64206c61 63697665 43002e65 656e6e6f     al device..Conne
   dac20:	64657463 20796220 746e6543 206c6172     cted by Central 
   dac30:	69766564 002e6563 63736944 656e6e6f     device..Disconne
   dac40:	64657463 20796220 6f6d6572 64206574     cted by remote d
   dac50:	63697665 44002e65 696c7075 65746163     evice..Duplicate
   dac60:	68632064 63617261 69726574 63697473     d characteristic
   dac70:	6e616320 20746f6e 61206562 64656464      cannot be added
   dac80:	6146002e 64656c69 206f7420 65707061     ..Failed to appe
   dac90:	6c20646e 6c61636f 61686320 74636172     nd local charact
   daca0:	73697265 2e636974 00000000              eristic.....

000dacac <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dacb4:	000d6c89 000d6ced 000d6eff 000d6d17     .l...l...n...m..
   dacc4:	000d6c8d                                .l..

000dacc8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dacd0:	000d6c85 000d6cfb 000d6c87 000d6d1b     .l...l...l...m..
   dace0:	000d6cad                                .l..

000dace4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dacec:	000d6c83 000d6d09 000d770d 000d6d1f     .l...m...w...m..
   dacfc:	000d6ccd                                .l..

000dad00 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   dad08:	5f9b34fb 80000080 00001000 00000000     .4._............

000dad18 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   dad18:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000dad28 <_ZN8particle7BleUuid9BASE_UUIDE>:
   dad28:	5f9b34fb 80000080 00001000 00000000     .4._............
   dad38:	006e616e 00666e69 0066766f 00707061     nan.inf.ovf.app.
   dad48:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   dad58:	007a2553 74637361 00656d69              S%z.asctime.

000dad64 <_ZTV9IPAddress>:
	...
   dad6c:	000d85b3 000d85a3 000d85a5              ............

000dad78 <_ZTV9USBSerial>:
	...
   dad80:	000d86c1 000d8729 000d86ff 000d80f9     ....)...........
   dad90:	000d86f1 000d86c3 000d86d3 000d8723     ............#...
   dada0:	000d86e3 000d86bd                       ........

000dada8 <_ZTV11USARTSerial>:
	...
   dadb0:	000d87cd 000d8839 000d8811 000d80f9     ....9...........
   dadc0:	000d87e1 000d87fd 000d87ef 000d880b     ................
   dadd0:	000d87cf 000d87d3                       ........

000dadd8 <_ZTV7TwoWire>:
	...
   dade0:	000d88c9 000d8913 000d88eb 000d88cb     ................
   dadf0:	000d88f3 000d88fb 000d8903 000d890b     ................
   dae00:	76636572 72726520 3d20726f 00642520     recv error = %d.

000dae10 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dae18:	000d8a4f 000d8a71 000d8e8b 000d8a7f     O...q...........
   dae28:	000d8a51                                Q...

000dae2c <_ZTV9TCPClient>:
	...
   dae34:	000d8afd 000d8b31 000d89cd 000d89e7     ....1...........
   dae44:	000d8d21 000d8b93 000d8b65 000d8a11     !.......e.......
   dae54:	000d8c2b 000d8e91 000d8bc7 000d8dd5     +...............
   dae64:	000d8a13 000d8a45 000d89f9 000d8a83     ....E...........
   dae74:	000d8b45                                E...

000dae78 <_ZTVN5spark9WiFiClassE>:
	...
   dae80:	000d41d9 000d8fed 000d8fe3 000d41e3     .A...........A..
   dae90:	000d41c1 000d41cd 000d9071 000d9079     .A...A..q...y...
   daea0:	000d8fd7 000d8fcf 000d8fc5 000d8fbb     ................
   daeb0:	000d90a9                                ....

000daeb4 <_ZTVN5spark12NetworkClassE>:
	...
   daebc:	000d9031 000d903b 000d9045 000d904f     1...;...E...O...
   daecc:	000d9059 000d9065 000d9071 000d9079     Y...e...q...y...
   daedc:	000d9081 000d908d 000d9095 000d909f     ................
   daeec:	000d90a9                                ....

000daef0 <_ZSt7nothrow>:
	...

000daef1 <_ZTSSt19_Sp_make_shared_tag>:
   daef1:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   daf01:	5f646572 00676174                        red_tag....

000daf0c <_ZTISt19_Sp_make_shared_tag>:
   daf0c:	000daf4c 000daef1                       L.......

000daf14 <_ZTIN10__cxxabiv117__class_type_infoE>:
   daf14:	000dafac 000daf20 000dafd0              .... .......

000daf20 <_ZTSN10__cxxabiv117__class_type_infoE>:
   daf20:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   daf30:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   daf40:	00000045                                E...

000daf44 <_ZTVN10__cxxabiv117__class_type_infoE>:
   daf44:	00000000 000daf14 000d93d9 000d93ed     ................
   daf54:	000d9581 000d9581 000d9457 000d9399     ........W.......
   daf64:	000d943f 000d9401 000d93cd              ?...........

000daf70 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   daf70:	000dafac 000daf7c 000daf14              ....|.......

000daf7c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   daf7c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   daf8c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   daf9c:	456f666e 00000000                       nfoE....

000dafa4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   dafa4:	00000000 000daf70 000d9481 000d9495     ....p...........
   dafb4:	000d9581 000d9581 000d9457 000d9399     ........W.......
   dafc4:	000d9555 000d94e1 000d94a9              U...........

000dafd0 <_ZTISt9type_info>:
   dafd0:	000daf4c 000dafd8                       L.......

000dafd8 <_ZTSSt9type_info>:
   dafd8:	74397453 5f657079 6f666e69               St9type_info.

000dafe5 <_ctype_>:
   dafe5:	20202000 20202020 28282020 20282828     .         ((((( 
   daff5:	20202020 20202020 20202020 20202020                     
   db005:	10108820 10101010 10101010 10101010      ...............
   db015:	04040410 04040404 10040404 10101010     ................
   db025:	41411010 41414141 01010101 01010101     ..AAAAAA........
   db035:	01010101 01010101 01010101 10101010     ................
   db045:	42421010 42424242 02020202 02020202     ..BBBBBB........
   db055:	02020202 02020202 02020202 10101010     ................
   db065:	00000020 00000000 00000000 00000000      ...............
	...

000db0e6 <link_const_variable_data_end>:
	...

000db0e8 <link_constructors_location>:
   db0e8:	000d5091 	.word	0x000d5091
   db0ec:	000d649d 	.word	0x000d649d
   db0f0:	000d6711 	.word	0x000d6711
   db0f4:	000d80d1 	.word	0x000d80d1
   db0f8:	000d8391 	.word	0x000d8391
   db0fc:	000d8415 	.word	0x000d8415
   db100:	000d843d 	.word	0x000d843d
   db104:	000d901d 	.word	0x000d901d
   db108:	000d9189 	.word	0x000d9189

000db10c <link_constructors_end>:
   db10c:	00000000 	.word	0x00000000
