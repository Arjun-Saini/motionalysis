
/Users/trylaarsdam/Documents/dev/motionalysis/target/3.1.0/argon/motionalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006b40  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000bab60  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000084  2003d9d8  000bab64  0001d9d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000d94  2003da60  2003da60  0002da60  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000babe8  000babe8  0002abe8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000bac10  000bac10  0002ac10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0011ddef  00000000  00000000  0002ac14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00013258  00000000  00000000  00148a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    000396a8  00000000  00000000  0015bc5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00003188  00000000  00000000  00195303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 0000b010  00000000  00000000  0019848b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037e52  00000000  00000000  001a349b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003f7c7  00000000  00000000  001db2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012a733  00000000  00000000  0021aab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00008aa8  00000000  00000000  003451e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f005 fd11 	bl	b9a58 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f005 fd33 	bl	b9aa8 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d9d8 	.word	0x2003d9d8
   b404c:	000bab64 	.word	0x000bab64
   b4050:	2003da5c 	.word	0x2003da5c
   b4054:	2003da60 	.word	0x2003da60
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f005 f839 	bl	b90d8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42a5      	cmp	r5, r4
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bab30 	.word	0x000bab30
   b4080:	000bab54 	.word	0x000bab54

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bb44 	b.w	b4710 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fb6d 	bl	b4768 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 bfd9 	b.w	b9048 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 bac3 	b.w	b6620 <malloc>

000b409a <_Znaj>:
   b409a:	f002 bac1 	b.w	b6620 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f002 bac7 	b.w	b6630 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   b40b2:	4770      	bx	lr

000b40b4 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b40b4:	b510      	push	{r4, lr}
   b40b6:	4604      	mov	r4, r0
   b40b8:	3004      	adds	r0, #4
   b40ba:	f004 f899 	bl	b81f0 <_ZN6StringD1Ev>
   b40be:	4620      	mov	r0, r4
   b40c0:	bd10      	pop	{r4, pc}

000b40c2 <_ZN14http_request_tD1Ev>:
} http_request_t;
   b40c2:	b510      	push	{r4, lr}
   b40c4:	4604      	mov	r4, r0
   b40c6:	303c      	adds	r0, #60	; 0x3c
   b40c8:	f004 f892 	bl	b81f0 <_ZN6StringD1Ev>
   b40cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b40d0:	f004 f88e 	bl	b81f0 <_ZN6StringD1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f004 f88b 	bl	b81f0 <_ZN6StringD1Ev>
   b40da:	4620      	mov	r0, r4
   b40dc:	bd10      	pop	{r4, pc}

000b40de <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   b40de:	b510      	push	{r4, lr}
   b40e0:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b40e2:	6800      	ldr	r0, [r0, #0]
   b40e4:	b108      	cbz	r0, b40ea <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   b40e6:	f002 faa3 	bl	b6630 <free>
class SystemClass {
   b40ea:	4620      	mov	r0, r4
   b40ec:	bd10      	pop	{r4, pc}

000b40ee <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   b40ee:	b510      	push	{r4, lr}
   b40f0:	4604      	mov	r4, r0

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   b40f2:	b93a      	cbnz	r2, b4104 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b40f4:	6803      	ldr	r3, [r0, #0]
   b40f6:	689b      	ldr	r3, [r3, #8]
   b40f8:	4798      	blx	r3
        n += println();
   b40fa:	4620      	mov	r0, r4
    }
   b40fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b4100:	f003 bf63 	b.w	b7fca <_ZN5Print7printlnEv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4104:	b2d2      	uxtb	r2, r2
   b4106:	f003 ff76 	bl	b7ff6 <_ZN5Print11printNumberEmh>
   b410a:	e7f6      	b.n	b40fa <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0xc>

000b410c <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b410c:	b570      	push	{r4, r5, r6, lr}
   b410e:	4605      	mov	r5, r0
   b4110:	460c      	mov	r4, r1
    if (base == 0) {
   b4112:	4616      	mov	r6, r2
   b4114:	b942      	cbnz	r2, b4128 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x1c>
        return write(n);
   b4116:	6803      	ldr	r3, [r0, #0]
   b4118:	b2c9      	uxtb	r1, r1
   b411a:	689b      	ldr	r3, [r3, #8]
   b411c:	4798      	blx	r3
        n += println();
   b411e:	4628      	mov	r0, r5
    }
   b4120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        n += println();
   b4124:	f003 bf51 	b.w	b7fca <_ZN5Print7printlnEv>
        if (n < 0 && base == 10) {
   b4128:	2900      	cmp	r1, #0
   b412a:	da0a      	bge.n	b4142 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
   b412c:	2a0a      	cmp	r2, #10
   b412e:	d108      	bne.n	b4142 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
            t = print('-');
   b4130:	212d      	movs	r1, #45	; 0x2d
   b4132:	f003 ff41 	bl	b7fb8 <_ZN5Print5printEc>
            val = -n;
   b4136:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b4138:	b2f2      	uxtb	r2, r6
   b413a:	4628      	mov	r0, r5
   b413c:	f003 ff5b 	bl	b7ff6 <_ZN5Print11printNumberEmh>
   b4140:	e7ed      	b.n	b411e <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x12>
            val = n;
   b4142:	4621      	mov	r1, r4
   b4144:	e7f8      	b.n	b4138 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x2c>

000b4146 <_ZN9USBSerial4lockEv.isra.0>:
#else
		return true;
#endif
	}

	void lock()
   b4146:	b508      	push	{r3, lr}
		return os_mutex_recursive_t(system_internal(2, nullptr));
   b4148:	2100      	movs	r1, #0
   b414a:	2002      	movs	r0, #2
   b414c:	f002 f982 	bl	b6454 <system_internal>
	{
#if PLATFORM_THREADING
		os_mutex_recursive_lock(get_mutex());
#endif
	}
   b4150:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		os_mutex_recursive_lock(get_mutex());
   b4154:	f001 bf56 	b.w	b6004 <os_mutex_recursive_lock>

000b4158 <_ZN10HttpClientD1Ev>:

class HttpClient {
   b4158:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b415a:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b415c:	4b0a      	ldr	r3, [pc, #40]	; (b4188 <_ZN10HttpClientD1Ev+0x30>)
   b415e:	6003      	str	r3, [r0, #0]
   b4160:	4605      	mov	r5, r0
   b4162:	b17c      	cbz	r4, b4184 <_ZN10HttpClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b4164:	6863      	ldr	r3, [r4, #4]
   b4166:	3b01      	subs	r3, #1
   b4168:	6063      	str	r3, [r4, #4]
   b416a:	b95b      	cbnz	r3, b4184 <_ZN10HttpClientD1Ev+0x2c>
          _M_dispose();
   b416c:	6823      	ldr	r3, [r4, #0]
   b416e:	4620      	mov	r0, r4
   b4170:	689b      	ldr	r3, [r3, #8]
   b4172:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4174:	68a3      	ldr	r3, [r4, #8]
   b4176:	3b01      	subs	r3, #1
   b4178:	60a3      	str	r3, [r4, #8]
   b417a:	b91b      	cbnz	r3, b4184 <_ZN10HttpClientD1Ev+0x2c>
            _M_destroy();
   b417c:	6823      	ldr	r3, [r4, #0]
   b417e:	4620      	mov	r0, r4
   b4180:	68db      	ldr	r3, [r3, #12]
   b4182:	4798      	blx	r3
   b4184:	4628      	mov	r0, r5
   b4186:	bd38      	pop	{r3, r4, r5, pc}
   b4188:	000ba774 	.word	0x000ba774

000b418c <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b418c:	b40e      	push	{r1, r2, r3}
   b418e:	b503      	push	{r0, r1, lr}
   b4190:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   b4192:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4194:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4198:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b419a:	f003 ff4a 	bl	b8032 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b419e:	b002      	add	sp, #8
   b41a0:	f85d eb04 	ldr.w	lr, [sp], #4
   b41a4:	b003      	add	sp, #12
   b41a6:	4770      	bx	lr

000b41a8 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b41a8:	2300      	movs	r3, #0
   b41aa:	6840      	ldr	r0, [r0, #4]
   b41ac:	461a      	mov	r2, r3
   b41ae:	4619      	mov	r1, r3
   b41b0:	f002 b9de 	b.w	b6570 <network_on>

000b41b4 <_ZN5spark9WiFiClass3offEv>:
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b41b4:	2300      	movs	r3, #0
   b41b6:	6840      	ldr	r0, [r0, #4]
   b41b8:	461a      	mov	r2, r3
   b41ba:	4619      	mov	r1, r3
   b41bc:	f002 b9e0 	b.w	b6580 <network_off>

000b41c0 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   b41c0:	2300      	movs	r3, #0
   b41c2:	6840      	ldr	r0, [r0, #4]
   b41c4:	461a      	mov	r2, r3
   b41c6:	f002 b9b3 	b.w	b6530 <network_connect>

000b41ca <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b41ca:	2200      	movs	r2, #0
   b41cc:	6840      	ldr	r0, [r0, #4]
   b41ce:	4611      	mov	r1, r2
   b41d0:	f002 b9c6 	b.w	b6560 <network_ready>

000b41d4 <_Z16HTTPRequestSetupv>:

int networkCount;
WiFiAccessPoint networks[5];
String networkBuffer;

void HTTPRequestSetup() {
   b41d4:	b510      	push	{r4, lr}
  request.hostname = kHTTPHostname;
   b41d6:	4c07      	ldr	r4, [pc, #28]	; (b41f4 <_Z16HTTPRequestSetupv+0x20>)
   b41d8:	4907      	ldr	r1, [pc, #28]	; (b41f8 <_Z16HTTPRequestSetupv+0x24>)
   b41da:	4620      	mov	r0, r4
   b41dc:	f004 f881 	bl	b82e2 <_ZN6StringaSEPKc>
  request.port = kHTTPRequestPort;
   b41e0:	2350      	movs	r3, #80	; 0x50
   b41e2:	63a3      	str	r3, [r4, #56]	; 0x38
  request.path = "/";
   b41e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b41e8:	4904      	ldr	r1, [pc, #16]	; (b41fc <_Z16HTTPRequestSetupv+0x28>)
}
   b41ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  request.path = "/";
   b41ee:	f004 b878 	b.w	b82e2 <_ZN6StringaSEPKc>
   b41f2:	bf00      	nop
   b41f4:	2003e07c 	.word	0x2003e07c
   b41f8:	000b9ce0 	.word	0x000b9ce0
   b41fc:	000b9ced 	.word	0x000b9ced

000b4200 <_Z14initFromEEPROMv>:
      Serial.println("Failed to initialize LIS3DH");
    }
  }
}

void initFromEEPROM() {
   b4200:	b538      	push	{r3, r4, r5, lr}
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b4202:	4d20      	ldr	r5, [pc, #128]	; (b4284 <_Z14initFromEEPROMv+0x84>)
   b4204:	4c20      	ldr	r4, [pc, #128]	; (b4288 <_Z14initFromEEPROMv+0x88>)
  EEPROM.get(kRecordingIntervalEEPROMAddress, recordingInterval);
   b4206:	f005 f815 	bl	b9234 <_Z21__fetch_global_EEPROMv>
   b420a:	2204      	movs	r2, #4
   b420c:	4629      	mov	r1, r5
   b420e:	2064      	movs	r0, #100	; 0x64
   b4210:	f001 ff28 	bl	b6064 <HAL_EEPROM_Get>
  EEPROM.get(kDsidEEPROMAddress, dsid);
   b4214:	f005 f80e 	bl	b9234 <_Z21__fetch_global_EEPROMv>
   b4218:	491c      	ldr	r1, [pc, #112]	; (b428c <_Z14initFromEEPROMv+0x8c>)
   b421a:	2204      	movs	r2, #4
   b421c:	2000      	movs	r0, #0
   b421e:	f001 ff21 	bl	b6064 <HAL_EEPROM_Get>
  EEPROM.get(kReportingIntervalEEPROMAddress, reportingInterval);
   b4222:	f005 f807 	bl	b9234 <_Z21__fetch_global_EEPROMv>
   b4226:	4621      	mov	r1, r4
   b4228:	2204      	movs	r2, #4
   b422a:	20c8      	movs	r0, #200	; 0xc8
   b422c:	f001 ff1a 	bl	b6064 <HAL_EEPROM_Get>
  reportingInterval = reportingInterval / 1000; // convert to seconds from milliseconds 
   b4230:	6823      	ldr	r3, [r4, #0]
   b4232:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4236:	fb93 f3f2 	sdiv	r3, r3, r2
   b423a:	6023      	str	r3, [r4, #0]
  Serial.printlnf("recordingInterval: %i", recordingInterval);
   b423c:	f004 fdd6 	bl	b8dec <_Z16_fetch_usbserialv>
   b4240:	682a      	ldr	r2, [r5, #0]
   b4242:	4913      	ldr	r1, [pc, #76]	; (b4290 <_Z14initFromEEPROMv+0x90>)
   b4244:	f7ff ffa2 	bl	b418c <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("reportingInterval: %i", reportingInterval);
   b4248:	f004 fdd0 	bl	b8dec <_Z16_fetch_usbserialv>
   b424c:	6822      	ldr	r2, [r4, #0]
   b424e:	4911      	ldr	r1, [pc, #68]	; (b4294 <_Z14initFromEEPROMv+0x94>)
   b4250:	f7ff ff9c 	bl	b418c <_ZN5Print8printlnfEPKcz>
  if(recordingInterval == kEEPROMEmptyValue) { // if no value stored in EEPROM, set to default
   b4254:	682b      	ldr	r3, [r5, #0]
   b4256:	3301      	adds	r3, #1
    recordingInterval = kDefaultRecordingInterval; //default value
   b4258:	bf04      	itt	eq
   b425a:	f44f 73fa 	moveq.w	r3, #500	; 0x1f4
   b425e:	602b      	streq	r3, [r5, #0]
  }
  if(reportingInterval == kEEPROMEmptyValue) {
   b4260:	6823      	ldr	r3, [r4, #0]
   b4262:	3301      	adds	r3, #1
    reportingInterval = kDefaultReportingInterval; //default value
   b4264:	bf04      	itt	eq
   b4266:	230f      	moveq	r3, #15
   b4268:	6023      	streq	r3, [r4, #0]
  }
  if(dsid == kEEPROMEmptyValue) {
   b426a:	4b08      	ldr	r3, [pc, #32]	; (b428c <_Z14initFromEEPROMv+0x8c>)
   b426c:	681b      	ldr	r3, [r3, #0]
   b426e:	3301      	adds	r3, #1
   b4270:	d106      	bne.n	b4280 <_Z14initFromEEPROMv+0x80>
    Serial.println("DSID not stored in EEPROM. BLE config required"); 
   b4272:	f004 fdbb 	bl	b8dec <_Z16_fetch_usbserialv>
    //TODO notify user somehow
  }
   b4276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println("DSID not stored in EEPROM. BLE config required"); 
   b427a:	4907      	ldr	r1, [pc, #28]	; (b4298 <_Z14initFromEEPROMv+0x98>)
   b427c:	f003 beb1 	b.w	b7fe2 <_ZN5Print7printlnEPKc>
   b4280:	bd38      	pop	{r3, r4, r5, pc}
   b4282:	bf00      	nop
   b4284:	2003e070 	.word	0x2003e070
   b4288:	2003e074 	.word	0x2003e074
   b428c:	2003dac4 	.word	0x2003dac4
   b4290:	000b9cef 	.word	0x000b9cef
   b4294:	000b9d05 	.word	0x000b9d05
   b4298:	000b9d1b 	.word	0x000b9d1b

000b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b429c:	b510      	push	{r4, lr}
		return os_mutex_recursive_t(system_internal(2, nullptr));
   b429e:	2100      	movs	r1, #0
   b42a0:	4604      	mov	r4, r0
   b42a2:	2002      	movs	r0, #2
   b42a4:	f002 f8d6 	bl	b6454 <system_internal>

	void unlock()
	{
#if PLATFORM_THREADING
		os_mutex_recursive_unlock(get_mutex());
   b42a8:	f001 feb4 	bl	b6014 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b42ac:	4620      	mov	r0, r4
   b42ae:	bd10      	pop	{r4, pc}

000b42b0 <_Z10reportData6String>:

void reportData(String payload) {
   b42b0:	b530      	push	{r4, r5, lr}
   b42b2:	4604      	mov	r4, r0
   b42b4:	b089      	sub	sp, #36	; 0x24
  WiFi.on();
   b42b6:	484e      	ldr	r0, [pc, #312]	; (b43f0 <_Z10reportData6String+0x140>)
  WiFi.connect();
  while(!WiFi.ready()) {
   b42b8:	4d4d      	ldr	r5, [pc, #308]	; (b43f0 <_Z10reportData6String+0x140>)
  WiFi.on();
   b42ba:	f7ff ff75 	bl	b41a8 <_ZN5spark9WiFiClass2onEv>
  WiFi.connect();
   b42be:	484c      	ldr	r0, [pc, #304]	; (b43f0 <_Z10reportData6String+0x140>)
   b42c0:	2100      	movs	r1, #0
   b42c2:	f7ff ff7d 	bl	b41c0 <_ZN5spark9WiFiClass7connectEj>
  while(!WiFi.ready()) {
   b42c6:	4628      	mov	r0, r5
   b42c8:	f7ff ff7f 	bl	b41ca <_ZN5spark9WiFiClass5readyEv>
   b42cc:	b918      	cbnz	r0, b42d6 <_Z10reportData6String+0x26>
    delay(100);
   b42ce:	2064      	movs	r0, #100	; 0x64
   b42d0:	f002 f9f6 	bl	b66c0 <delay>
  while(!WiFi.ready()) {
   b42d4:	e7f7      	b.n	b42c6 <_Z10reportData6String+0x16>
  }
  if(WiFi.ready() != true) {
   b42d6:	4846      	ldr	r0, [pc, #280]	; (b43f0 <_Z10reportData6String+0x140>)
   b42d8:	f7ff ff77 	bl	b41ca <_ZN5spark9WiFiClass5readyEv>
   b42dc:	b988      	cbnz	r0, b4302 <_Z10reportData6String+0x52>
    WITH_LOCK(Serial) {
   b42de:	f004 fd85 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b42e2:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b42e4:	f7ff ff2f 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WiFi failed to connect, data not reported");
   b42e8:	f004 fd80 	bl	b8dec <_Z16_fetch_usbserialv>
   b42ec:	4941      	ldr	r1, [pc, #260]	; (b43f4 <_Z10reportData6String+0x144>)
   b42ee:	f003 fe78 	bl	b7fe2 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b42f2:	a804      	add	r0, sp, #16
      Serial.println("Status: " + response.status);
    }
    WITH_LOCK(Serial) {
      Serial.println("Body: " + response.body);
    }
    WITH_LOCK(Serial) {
   b42f4:	f7ff ffd2 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
      Serial.println("ReqBody: " + request.body);
    }
  }
  WiFi.off();
   b42f8:	483d      	ldr	r0, [pc, #244]	; (b43f0 <_Z10reportData6String+0x140>)
   b42fa:	f7ff ff5b 	bl	b41b4 <_ZN5spark9WiFiClass3offEv>
   b42fe:	b009      	add	sp, #36	; 0x24
   b4300:	bd30      	pop	{r4, r5, pc}
    WITH_LOCK(Serial) {
   b4302:	f004 fd73 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4306:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b4308:	f7ff ff1d 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WiFi connected, reporting data");
   b430c:	f004 fd6e 	bl	b8dec <_Z16_fetch_usbserialv>
   b4310:	4939      	ldr	r1, [pc, #228]	; (b43f8 <_Z10reportData6String+0x148>)
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
    }

    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
   b4312:	4d3a      	ldr	r5, [pc, #232]	; (b43fc <_Z10reportData6String+0x14c>)
   b4314:	f003 fe65 	bl	b7fe2 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b4318:	a804      	add	r0, sp, #16
   b431a:	f7ff ffbf 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
    payload.remove(payload.length() - 1);
   b431e:	68a1      	ldr	r1, [r4, #8]
   b4320:	4620      	mov	r0, r4
   b4322:	3901      	subs	r1, #1
   b4324:	f004 f8df 	bl	b84e6 <_ZN6String6removeEj>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4328:	4935      	ldr	r1, [pc, #212]	; (b4400 <_Z10reportData6String+0x150>)
   b432a:	a804      	add	r0, sp, #16
   b432c:	f003 ffab 	bl	b8286 <_ZN6StringC1EPK19__FlashStringHelper>
    request.body = "{\"data\":[" + payload + "]}";
   b4330:	4621      	mov	r1, r4
   b4332:	a804      	add	r0, sp, #16
   b4334:	f004 f846 	bl	b83c4 <_ZplRK15StringSumHelperRK6String>
   b4338:	4932      	ldr	r1, [pc, #200]	; (b4404 <_Z10reportData6String+0x154>)
   b433a:	f004 f84f 	bl	b83dc <_ZplRK15StringSumHelperPKc>
   b433e:	4601      	mov	r1, r0
   b4340:	4831      	ldr	r0, [pc, #196]	; (b4408 <_Z10reportData6String+0x158>)
   b4342:	f003 ffb4 	bl	b82ae <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b4346:	a804      	add	r0, sp, #16
   b4348:	f003 ff52 	bl	b81f0 <_ZN6StringD1Ev>
    WITH_LOCK(Serial){
   b434c:	f004 fd4e 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4350:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b4352:	f7ff fef8 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
   b4356:	4b2d      	ldr	r3, [pc, #180]	; (b440c <_Z10reportData6String+0x15c>)
   b4358:	492d      	ldr	r1, [pc, #180]	; (b4410 <_Z10reportData6String+0x160>)
   b435a:	482e      	ldr	r0, [pc, #184]	; (b4414 <_Z10reportData6String+0x164>)
   b435c:	9300      	str	r3, [sp, #0]
   b435e:	462a      	mov	r2, r5
   b4360:	4b2d      	ldr	r3, [pc, #180]	; (b4418 <_Z10reportData6String+0x168>)
   b4362:	f001 fba9 	bl	b5ab8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
   b4366:	a804      	add	r0, sp, #16
   b4368:	f7ff ff98 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
    WITH_LOCK(Serial) {
   b436c:	f004 fd3e 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4370:	9004      	str	r0, [sp, #16]
      { _M_device.lock(); }
   b4372:	f7ff fee8 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("Status: " + response.status);
   b4376:	f004 fd39 	bl	b8dec <_Z16_fetch_usbserialv>
   b437a:	682b      	ldr	r3, [r5, #0]
   b437c:	4927      	ldr	r1, [pc, #156]	; (b441c <_Z10reportData6String+0x16c>)
   b437e:	4419      	add	r1, r3
   b4380:	f003 fe2f 	bl	b7fe2 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b4384:	a804      	add	r0, sp, #16
   b4386:	f7ff ff89 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
    WITH_LOCK(Serial) {
   b438a:	f004 fd2f 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b438e:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   b4390:	f7ff fed9 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("Body: " + response.body);
   b4394:	f004 fd2a 	bl	b8dec <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4398:	4921      	ldr	r1, [pc, #132]	; (b4420 <_Z10reportData6String+0x170>)
   b439a:	4604      	mov	r4, r0
   b439c:	a804      	add	r0, sp, #16
   b439e:	f003 ff72 	bl	b8286 <_ZN6StringC1EPK19__FlashStringHelper>
   b43a2:	1d29      	adds	r1, r5, #4
   b43a4:	a804      	add	r0, sp, #16
   b43a6:	f004 f80d 	bl	b83c4 <_ZplRK15StringSumHelperRK6String>
   b43aa:	6801      	ldr	r1, [r0, #0]
   b43ac:	4620      	mov	r0, r4
   b43ae:	f003 fe18 	bl	b7fe2 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b43b2:	a804      	add	r0, sp, #16
   b43b4:	f003 ff1c 	bl	b81f0 <_ZN6StringD1Ev>
    WITH_LOCK(Serial) {
   b43b8:	a803      	add	r0, sp, #12
   b43ba:	f7ff ff6f 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
    WITH_LOCK(Serial) {
   b43be:	f004 fd15 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b43c2:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   b43c4:	f7ff febf 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("ReqBody: " + request.body);
   b43c8:	f004 fd10 	bl	b8dec <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b43cc:	4915      	ldr	r1, [pc, #84]	; (b4424 <_Z10reportData6String+0x174>)
   b43ce:	4604      	mov	r4, r0
   b43d0:	a804      	add	r0, sp, #16
   b43d2:	f003 ff58 	bl	b8286 <_ZN6StringC1EPK19__FlashStringHelper>
   b43d6:	490c      	ldr	r1, [pc, #48]	; (b4408 <_Z10reportData6String+0x158>)
   b43d8:	a804      	add	r0, sp, #16
   b43da:	f003 fff3 	bl	b83c4 <_ZplRK15StringSumHelperRK6String>
   b43de:	6801      	ldr	r1, [r0, #0]
   b43e0:	4620      	mov	r0, r4
   b43e2:	f003 fdfe 	bl	b7fe2 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b43e6:	a804      	add	r0, sp, #16
   b43e8:	f003 ff02 	bl	b81f0 <_ZN6StringD1Ev>
    WITH_LOCK(Serial) {
   b43ec:	a803      	add	r0, sp, #12
   b43ee:	e781      	b.n	b42f4 <_Z10reportData6String+0x44>
   b43f0:	2003e7c0 	.word	0x2003e7c0
   b43f4:	000b9d4a 	.word	0x000b9d4a
   b43f8:	000b9d74 	.word	0x000b9d74
   b43fc:	2003e0c8 	.word	0x2003e0c8
   b4400:	000b9d93 	.word	0x000b9d93
   b4404:	000b9d9d 	.word	0x000b9d9d
   b4408:	2003e0b8 	.word	0x2003e0b8
   b440c:	000b9da0 	.word	0x000b9da0
   b4410:	2003e07c 	.word	0x2003e07c
   b4414:	2003dacc 	.word	0x2003dacc
   b4418:	2003d9dc 	.word	0x2003d9dc
   b441c:	000b9da5 	.word	0x000b9da5
   b4420:	000b9db1 	.word	0x000b9db1
   b4424:	000b9dae 	.word	0x000b9dae

000b4428 <_Z15reportingThreadPv>:
      break;
    }
  }
}

void reportingThread(void *args) {
   b4428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while(true) {
    if(storedValuesIndex >= ((reportingInterval * kSecondsToMilliseconds) / recordingInterval)) {
   b442c:	f8df a104 	ldr.w	sl, [pc, #260]	; b4534 <_Z15reportingThreadPv+0x10c>
   b4430:	4c37      	ldr	r4, [pc, #220]	; (b4510 <_Z15reportingThreadPv+0xe8>)
void reportingThread(void *args) {
   b4432:	b08d      	sub	sp, #52	; 0x34
    if(storedValuesIndex >= ((reportingInterval * kSecondsToMilliseconds) / recordingInterval)) {
   b4434:	f8da 3000 	ldr.w	r3, [sl]
   b4438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b443c:	4353      	muls	r3, r2
   b443e:	4a35      	ldr	r2, [pc, #212]	; (b4514 <_Z15reportingThreadPv+0xec>)
   b4440:	6812      	ldr	r2, [r2, #0]
   b4442:	fb93 f3f2 	sdiv	r3, r3, r2
   b4446:	6822      	ldr	r2, [r4, #0]
   b4448:	4293      	cmp	r3, r2
   b444a:	dc5e      	bgt.n	b450a <_Z15reportingThreadPv+0xe2>

      os_mutex_lock(payloadAccessLock); // lock access to payload before copying to local variable and resetting global payload
   b444c:	4f32      	ldr	r7, [pc, #200]	; (b4518 <_Z15reportingThreadPv+0xf0>)
   b444e:	f8df 90e8 	ldr.w	r9, [pc, #232]	; b4538 <_Z15reportingThreadPv+0x110>
   b4452:	6838      	ldr	r0, [r7, #0]
   b4454:	f8df 80e4 	ldr.w	r8, [pc, #228]	; b453c <_Z15reportingThreadPv+0x114>
      for (int i = 0; i < storedValuesIndex; i++) {
        //Serial.printf("{timestamp: %i, data: %i}, ", storedTimes[i], storedValues[i]);
        payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b4458:	f8df b0e4 	ldr.w	fp, [pc, #228]	; b4540 <_Z15reportingThreadPv+0x118>
      os_mutex_lock(payloadAccessLock); // lock access to payload before copying to local variable and resetting global payload
   b445c:	f001 fdb2 	bl	b5fc4 <os_mutex_lock>
	StringSumHelper(const char *p) : String(p) {}
   b4460:	4b2e      	ldr	r3, [pc, #184]	; (b451c <_Z15reportingThreadPv+0xf4>)
      for (int i = 0; i < storedValuesIndex; i++) {
   b4462:	2500      	movs	r5, #0
   b4464:	6822      	ldr	r2, [r4, #0]
   b4466:	42aa      	cmp	r2, r5
   b4468:	dd35      	ble.n	b44d6 <_Z15reportingThreadPv+0xae>
   b446a:	4619      	mov	r1, r3
   b446c:	a804      	add	r0, sp, #16
   b446e:	f003 ff0a 	bl	b8286 <_ZN6StringC1EPK19__FlashStringHelper>
        payload += "{\"dsid\":" + String(dsid) + ", \"value\":" + storedValues[i] + ", \"timestamp\":" + String(storedTimes[i]) + "},";
   b4472:	4b2b      	ldr	r3, [pc, #172]	; (b4520 <_Z15reportingThreadPv+0xf8>)
   b4474:	220a      	movs	r2, #10
   b4476:	6819      	ldr	r1, [r3, #0]
   b4478:	4668      	mov	r0, sp
   b447a:	f003 ff44 	bl	b8306 <_ZN6StringC1Eih>
   b447e:	4669      	mov	r1, sp
   b4480:	a804      	add	r0, sp, #16
   b4482:	f003 ff9f 	bl	b83c4 <_ZplRK15StringSumHelperRK6String>
   b4486:	4659      	mov	r1, fp
   b4488:	f003 ffa8 	bl	b83dc <_ZplRK15StringSumHelperPKc>
   b448c:	f819 1b01 	ldrb.w	r1, [r9], #1
   b4490:	f003 ffb9 	bl	b8406 <_ZplRK15StringSumHelperh>
   b4494:	4923      	ldr	r1, [pc, #140]	; (b4524 <_Z15reportingThreadPv+0xfc>)
   b4496:	f003 ffa1 	bl	b83dc <_ZplRK15StringSumHelperPKc>
   b449a:	220a      	movs	r2, #10
   b449c:	f858 1b04 	ldr.w	r1, [r8], #4
   b44a0:	4606      	mov	r6, r0
   b44a2:	a808      	add	r0, sp, #32
   b44a4:	f003 ff42 	bl	b832c <_ZN6StringC1Elh>
   b44a8:	a908      	add	r1, sp, #32
   b44aa:	4630      	mov	r0, r6
   b44ac:	f003 ff8a 	bl	b83c4 <_ZplRK15StringSumHelperRK6String>
   b44b0:	491d      	ldr	r1, [pc, #116]	; (b4528 <_Z15reportingThreadPv+0x100>)
   b44b2:	f003 ff93 	bl	b83dc <_ZplRK15StringSumHelperPKc>
   b44b6:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b44b8:	481c      	ldr	r0, [pc, #112]	; (b452c <_Z15reportingThreadPv+0x104>)
   b44ba:	f003 ff61 	bl	b8380 <_ZN6String6concatERKS_>
   b44be:	a808      	add	r0, sp, #32
   b44c0:	f003 fe96 	bl	b81f0 <_ZN6StringD1Ev>
   b44c4:	4668      	mov	r0, sp
   b44c6:	f003 fe93 	bl	b81f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b44ca:	a804      	add	r0, sp, #16
   b44cc:	f003 fe90 	bl	b81f0 <_ZN6StringD1Ev>
      for (int i = 0; i < storedValuesIndex; i++) {
   b44d0:	3501      	adds	r5, #1
   b44d2:	4b12      	ldr	r3, [pc, #72]	; (b451c <_Z15reportingThreadPv+0xf4>)
   b44d4:	e7c6      	b.n	b4464 <_Z15reportingThreadPv+0x3c>
      }
      storedValuesIndex = 0;
   b44d6:	2300      	movs	r3, #0
      String localPayload = payload;
   b44d8:	4914      	ldr	r1, [pc, #80]	; (b452c <_Z15reportingThreadPv+0x104>)
      storedValuesIndex = 0;
   b44da:	6023      	str	r3, [r4, #0]
      String localPayload = payload;
   b44dc:	a804      	add	r0, sp, #16
   b44de:	f003 fef5 	bl	b82cc <_ZN6StringC1ERKS_>
      payload = "";
   b44e2:	4913      	ldr	r1, [pc, #76]	; (b4530 <_Z15reportingThreadPv+0x108>)
   b44e4:	4811      	ldr	r0, [pc, #68]	; (b452c <_Z15reportingThreadPv+0x104>)
   b44e6:	f003 fefc 	bl	b82e2 <_ZN6StringaSEPKc>
      os_mutex_unlock(payloadAccessLock);
   b44ea:	6838      	ldr	r0, [r7, #0]
   b44ec:	f001 fd72 	bl	b5fd4 <os_mutex_unlock>
      reportData(localPayload);
   b44f0:	a904      	add	r1, sp, #16
   b44f2:	a808      	add	r0, sp, #32
   b44f4:	f003 feea 	bl	b82cc <_ZN6StringC1ERKS_>
   b44f8:	a808      	add	r0, sp, #32
   b44fa:	f7ff fed9 	bl	b42b0 <_Z10reportData6String>
   b44fe:	a808      	add	r0, sp, #32
   b4500:	f003 fe76 	bl	b81f0 <_ZN6StringD1Ev>
      String localPayload = payload;
   b4504:	a804      	add	r0, sp, #16
   b4506:	f003 fe73 	bl	b81f0 <_ZN6StringD1Ev>
    }
    os_thread_yield();
   b450a:	f001 fd4b 	bl	b5fa4 <os_thread_yield>
  }
   b450e:	e791      	b.n	b4434 <_Z15reportingThreadPv+0xc>
   b4510:	2003e5f4 	.word	0x2003e5f4
   b4514:	2003e070 	.word	0x2003e070
   b4518:	2003e060 	.word	0x2003e060
   b451c:	000b9db8 	.word	0x000b9db8
   b4520:	2003dac4 	.word	0x2003dac4
   b4524:	000b9dcc 	.word	0x000b9dcc
   b4528:	000b9ddb 	.word	0x000b9ddb
   b452c:	2003e050 	.word	0x2003e050
   b4530:	000ba033 	.word	0x000ba033
   b4534:	2003e074 	.word	0x2003e074
   b4538:	2003e4f4 	.word	0x2003e4f4
   b453c:	2003e0f4 	.word	0x2003e0f4
   b4540:	000b9dc1 	.word	0x000b9dc1

000b4544 <_Z12initHardwarev>:
void initHardware() {
   b4544:	b507      	push	{r0, r1, r2, lr}
        system_get_flag(flag, &value, nullptr);
        return value;
    }

    static inline void set_flag(system_flag_t flag, uint8_t value) {
        system_set_flag(flag, value, nullptr);
   b4546:	2200      	movs	r2, #0
   b4548:	2101      	movs	r1, #1
   b454a:	2003      	movs	r0, #3
   b454c:	f001 ff8a 	bl	b6464 <system_set_flag>
  pinMode(kBLEConnectedLED, OUTPUT); //BLE connected indicator 
   b4550:	2101      	movs	r1, #1
   b4552:	2007      	movs	r0, #7
   b4554:	f004 fe30 	bl	b91b8 <pinMode>
  digitalWrite(kBLEConnectedLED, LOW);
   b4558:	2100      	movs	r1, #0
   b455a:	2007      	movs	r0, #7
   b455c:	f004 fe3d 	bl	b91da <digitalWrite>
  if(!lis3dh.begin(kLis3dhAddress)) {
   b4560:	480c      	ldr	r0, [pc, #48]	; (b4594 <_Z12initHardwarev+0x50>)
   b4562:	2118      	movs	r1, #24
   b4564:	f001 f9e3 	bl	b592e <_ZN15Adafruit_LIS3DH5beginEh>
   b4568:	b980      	cbnz	r0, b458c <_Z12initHardwarev+0x48>
    delay(1000);
   b456a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b456e:	f002 f8a7 	bl	b66c0 <delay>
    WITH_LOCK(Serial) {
   b4572:	f004 fc3b 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4576:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4578:	f7ff fde5 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("Failed to initialize LIS3DH");
   b457c:	f004 fc36 	bl	b8dec <_Z16_fetch_usbserialv>
   b4580:	4905      	ldr	r1, [pc, #20]	; (b4598 <_Z12initHardwarev+0x54>)
   b4582:	f003 fd2e 	bl	b7fe2 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b4586:	a801      	add	r0, sp, #4
   b4588:	f7ff fe88 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
}
   b458c:	b003      	add	sp, #12
   b458e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4592:	bf00      	nop
   b4594:	2003dee8 	.word	0x2003dee8
   b4598:	000b9dde 	.word	0x000b9dde

000b459c <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv>:

  bleQuestionCount++;
}

//kBLEConnectedLED turns on when ble connected
void connectCallback(const BlePeerDevice& peer, void* context){
   b459c:	b507      	push	{r0, r1, r2, lr}
  bleQuestionCount = 0;
   b459e:	4b0b      	ldr	r3, [pc, #44]	; (b45cc <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x30>)
   b45a0:	2200      	movs	r2, #0
   b45a2:	601a      	str	r2, [r3, #0]
  WITH_LOCK(Serial) {
   b45a4:	f004 fc22 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b45a8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b45aa:	f7ff fdcc 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("connected");
   b45ae:	f004 fc1d 	bl	b8dec <_Z16_fetch_usbserialv>
   b45b2:	4907      	ldr	r1, [pc, #28]	; (b45d0 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x34>)
   b45b4:	f003 fd15 	bl	b7fe2 <_ZN5Print7printlnEPKc>
  WITH_LOCK(Serial) {
   b45b8:	a801      	add	r0, sp, #4
   b45ba:	f7ff fe6f 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
  }
  digitalWrite(kBLEConnectedLED, HIGH);
   b45be:	2101      	movs	r1, #1
   b45c0:	2007      	movs	r0, #7
}
   b45c2:	b003      	add	sp, #12
   b45c4:	f85d eb04 	ldr.w	lr, [sp], #4
  digitalWrite(kBLEConnectedLED, HIGH);
   b45c8:	f004 be07 	b.w	b91da <digitalWrite>
   b45cc:	2003dabc 	.word	0x2003dabc
   b45d0:	000b9e87 	.word	0x000b9e87

000b45d4 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv>:

//kBLEConnectedLED turns off when ble disconnected
void disconnectCallback(const BlePeerDevice& peer, void* context){
   b45d4:	b507      	push	{r0, r1, r2, lr}
  WITH_LOCK(Serial) {
   b45d6:	f004 fc09 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b45da:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b45dc:	f7ff fdb3 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("disconnected");
   b45e0:	f004 fc04 	bl	b8dec <_Z16_fetch_usbserialv>
   b45e4:	4906      	ldr	r1, [pc, #24]	; (b4600 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv+0x2c>)
   b45e6:	f003 fcfc 	bl	b7fe2 <_ZN5Print7printlnEPKc>
  WITH_LOCK(Serial) {
   b45ea:	a801      	add	r0, sp, #4
   b45ec:	f7ff fe56 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
  }
  digitalWrite(kBLEConnectedLED, LOW);
   b45f0:	2100      	movs	r1, #0
   b45f2:	2007      	movs	r0, #7
   b45f4:	b003      	add	sp, #12
   b45f6:	f85d eb04 	ldr.w	lr, [sp], #4
  digitalWrite(kBLEConnectedLED, LOW);
   b45fa:	f004 bdee 	b.w	b91da <digitalWrite>
   b45fe:	bf00      	nop
   b4600:	000b9dfa 	.word	0x000b9dfa

000b4604 <_Z14syncSystemTimev>:
#pragma once
#include "globalVariables.hpp"
#include "constants.hpp"

void syncSystemTime() {
   b4604:	b530      	push	{r4, r5, lr}
  int WiFiConnectCountdown = kWiFiConnectionTimeout;

  WiFi.on();
   b4606:	483d      	ldr	r0, [pc, #244]	; (b46fc <_Z14syncSystemTimev+0xf8>)
  WiFi.connect();
  //wait for WiFi to connect for kWiFiConnectionTimeout
  while(!WiFi.ready() && WiFiConnectCountdown != 0) {
   b4608:	4d3c      	ldr	r5, [pc, #240]	; (b46fc <_Z14syncSystemTimev+0xf8>)
void syncSystemTime() {
   b460a:	b087      	sub	sp, #28
  WiFi.on();
   b460c:	f7ff fdcc 	bl	b41a8 <_ZN5spark9WiFiClass2onEv>
  WiFi.connect();
   b4610:	483a      	ldr	r0, [pc, #232]	; (b46fc <_Z14syncSystemTimev+0xf8>)
   b4612:	2100      	movs	r1, #0
   b4614:	f7ff fdd4 	bl	b41c0 <_ZN5spark9WiFiClass7connectEj>
  int WiFiConnectCountdown = kWiFiConnectionTimeout;
   b4618:	f644 6420 	movw	r4, #20000	; 0x4e20
  while(!WiFi.ready() && WiFiConnectCountdown != 0) {
   b461c:	4628      	mov	r0, r5
   b461e:	f7ff fdd4 	bl	b41ca <_ZN5spark9WiFiClass5readyEv>
   b4622:	b998      	cbnz	r0, b464c <_Z14syncSystemTimev+0x48>
   b4624:	b194      	cbz	r4, b464c <_Z14syncSystemTimev+0x48>
    WiFiConnectCountdown = WiFiConnectCountdown - kWiFiCheckInterval;
    delay(kWiFiCheckInterval);
   b4626:	2064      	movs	r0, #100	; 0x64
   b4628:	f002 f84a 	bl	b66c0 <delay>
    WITH_LOCK(Serial) {
   b462c:	f004 fbde 	bl	b8dec <_Z16_fetch_usbserialv>
    WiFiConnectCountdown = WiFiConnectCountdown - kWiFiCheckInterval;
   b4630:	3c64      	subs	r4, #100	; 0x64
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4632:	9002      	str	r0, [sp, #8]
      { _M_device.lock(); }
   b4634:	f7ff fd87 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println(WiFiConnectCountdown);
   b4638:	f004 fbd8 	bl	b8dec <_Z16_fetch_usbserialv>
   b463c:	220a      	movs	r2, #10
   b463e:	4621      	mov	r1, r4
   b4640:	f7ff fd64 	bl	b410c <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    WITH_LOCK(Serial) {
   b4644:	a802      	add	r0, sp, #8
   b4646:	f7ff fe29 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b464a:	e7e7      	b.n	b461c <_Z14syncSystemTimev+0x18>
    }
  }
  if(WiFi.ready()) {
   b464c:	482b      	ldr	r0, [pc, #172]	; (b46fc <_Z14syncSystemTimev+0xf8>)
   b464e:	f7ff fdbc 	bl	b41ca <_ZN5spark9WiFiClass5readyEv>
   b4652:	2800      	cmp	r0, #0
   b4654:	d045      	beq.n	b46e2 <_Z14syncSystemTimev+0xde>
    WITH_LOCK(Serial){
   b4656:	f004 fbc9 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b465a:	9002      	str	r0, [sp, #8]
      { _M_device.lock(); }
   b465c:	f7ff fd73 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WiFi connected, syncing time");
   b4660:	f004 fbc4 	bl	b8dec <_Z16_fetch_usbserialv>
   b4664:	4926      	ldr	r1, [pc, #152]	; (b4700 <_Z14syncSystemTimev+0xfc>)
   b4666:	f003 fcbc 	bl	b7fe2 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial){
   b466a:	a802      	add	r0, sp, #8
   b466c:	f7ff fe16 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4670:	f001 ff36 	bl	b64e0 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4674:	f001 ff3c 	bl	b64f0 <spark_cloud_flag_connected>
    }
    Particle.connect();
    while(!Particle.connected()) {} // wait forever until cloud connects
   b4678:	2800      	cmp	r0, #0
   b467a:	d0fb      	beq.n	b4674 <_Z14syncSystemTimev+0x70>
   b467c:	f001 ff38 	bl	b64f0 <spark_cloud_flag_connected>
        if (!connected()) {
   b4680:	b110      	cbz	r0, b4688 <_Z14syncSystemTimev+0x84>
        return spark_sync_time(NULL);
   b4682:	2000      	movs	r0, #0
   b4684:	f001 ff3c 	bl	b6500 <spark_sync_time>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4688:	4c1e      	ldr	r4, [pc, #120]	; (b4704 <_Z14syncSystemTimev+0x100>)
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b468a:	f001 ff31 	bl	b64f0 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
   b468e:	b148      	cbz	r0, b46a4 <_Z14syncSystemTimev+0xa0>
   b4690:	2000      	movs	r0, #0
   b4692:	f001 ff3d 	bl	b6510 <spark_sync_time_pending>
   b4696:	b128      	cbz	r0, b46a4 <_Z14syncSystemTimev+0xa0>
		return HAL_Timer_Get_Milli_Seconds();
   b4698:	f001 fcd4 	bl	b6044 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b469c:	6020      	str	r0, [r4, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b469e:	f001 ff17 	bl	b64d0 <spark_process>
    }
   b46a2:	e7f2      	b.n	b468a <_Z14syncSystemTimev+0x86>
    Particle.syncTime(); // is async
    while(Particle.syncTimePending()) { // wait for syncTime to complete
      Particle.process();
    }
    WITH_LOCK(Serial){
   b46a4:	f004 fba2 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b46a8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b46aa:	f7ff fd4c 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
      Serial.printlnf("Current time is: %s", Time.timeStr().c_str());
   b46ae:	f004 fb9d 	bl	b8dec <_Z16_fetch_usbserialv>
   b46b2:	4604      	mov	r4, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b46b4:	f004 faa3 	bl	b8bfe <_ZN9TimeClass3nowEv>
   b46b8:	17c3      	asrs	r3, r0, #31
   b46ba:	4602      	mov	r2, r0
   b46bc:	a802      	add	r0, sp, #8
   b46be:	f004 fa45 	bl	b8b4c <_ZN9TimeClass7timeStrEx>
   b46c2:	9a02      	ldr	r2, [sp, #8]
   b46c4:	4910      	ldr	r1, [pc, #64]	; (b4708 <_Z14syncSystemTimev+0x104>)
   b46c6:	4620      	mov	r0, r4
   b46c8:	f7ff fd60 	bl	b418c <_ZN5Print8printlnfEPKcz>
   b46cc:	a802      	add	r0, sp, #8
   b46ce:	f003 fd8f 	bl	b81f0 <_ZN6StringD1Ev>
    WITH_LOCK(Serial){
   b46d2:	a801      	add	r0, sp, #4
    }
  }
  else {
    WITH_LOCK(Serial) {
   b46d4:	f7ff fde2 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
      Serial.println("WiFi failed to connect, skipping time synchronization");
    }
  }

  WiFi.off();
   b46d8:	4808      	ldr	r0, [pc, #32]	; (b46fc <_Z14syncSystemTimev+0xf8>)
   b46da:	f7ff fd6b 	bl	b41b4 <_ZN5spark9WiFiClass3offEv>
   b46de:	b007      	add	sp, #28
   b46e0:	bd30      	pop	{r4, r5, pc}
    WITH_LOCK(Serial) {
   b46e2:	f004 fb83 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b46e6:	9002      	str	r0, [sp, #8]
      { _M_device.lock(); }
   b46e8:	f7ff fd2d 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WiFi failed to connect, skipping time synchronization");
   b46ec:	f004 fb7e 	bl	b8dec <_Z16_fetch_usbserialv>
   b46f0:	4906      	ldr	r1, [pc, #24]	; (b470c <_Z14syncSystemTimev+0x108>)
   b46f2:	f003 fc76 	bl	b7fe2 <_ZN5Print7printlnEPKc>
    WITH_LOCK(Serial) {
   b46f6:	a802      	add	r0, sp, #8
   b46f8:	e7ec      	b.n	b46d4 <_Z14syncSystemTimev+0xd0>
   b46fa:	bf00      	nop
   b46fc:	2003e7c0 	.word	0x2003e7c0
   b4700:	000b9e07 	.word	0x000b9e07
   b4704:	2003e7d0 	.word	0x2003e7d0
   b4708:	000b9e24 	.word	0x000b9e24
   b470c:	000b9e38 	.word	0x000b9e38

000b4710 <setup>:
void setup() {
   b4710:	b513      	push	{r0, r1, r4, lr}
  os_mutex_create(&payloadAccessLock);
   b4712:	4c11      	ldr	r4, [pc, #68]	; (b4758 <setup+0x48>)
  Serial.begin(9600);
   b4714:	f004 fb6a 	bl	b8dec <_Z16_fetch_usbserialv>
   b4718:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b471c:	f004 fb5a 	bl	b8dd4 <_ZN9USBSerial5beginEl>
  initHardware();
   b4720:	f7ff ff10 	bl	b4544 <_Z12initHardwarev>
  HTTPRequestSetup(); 
   b4724:	f7ff fd56 	bl	b41d4 <_Z16HTTPRequestSetupv>
  initFromEEPROM();
   b4728:	f7ff fd6a 	bl	b4200 <_Z14initFromEEPROMv>
  syncSystemTime();
   b472c:	f7ff ff6a 	bl	b4604 <_Z14syncSystemTimev>
  os_mutex_create(&payloadAccessLock);
   b4730:	4620      	mov	r0, r4
   b4732:	f001 fc3f 	bl	b5fb4 <os_mutex_create>
  os_mutex_unlock(&payloadAccessLock);
   b4736:	4620      	mov	r0, r4
   b4738:	f001 fc4c 	bl	b5fd4 <os_mutex_unlock>
  os_thread_create(&reportingThreadHandle, "reportThread", OS_THREAD_PRIORITY_DEFAULT, reportingThread, NULL, 1024);
   b473c:	2300      	movs	r3, #0
   b473e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4742:	e9cd 3200 	strd	r3, r2, [sp]
   b4746:	4905      	ldr	r1, [pc, #20]	; (b475c <setup+0x4c>)
   b4748:	4b05      	ldr	r3, [pc, #20]	; (b4760 <setup+0x50>)
   b474a:	4806      	ldr	r0, [pc, #24]	; (b4764 <setup+0x54>)
   b474c:	2202      	movs	r2, #2
   b474e:	f001 fc21 	bl	b5f94 <os_thread_create>
}
   b4752:	b002      	add	sp, #8
   b4754:	bd10      	pop	{r4, pc}
   b4756:	bf00      	nop
   b4758:	2003e060 	.word	0x2003e060
   b475c:	000b9e6e 	.word	0x000b9e6e
   b4760:	000b4429 	.word	0x000b4429
   b4764:	2003e078 	.word	0x2003e078

000b4768 <loop>:
void loop() {
   b4768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b476c:	ed2d 8b02 	vpush	{d8}
  switch (firmwareState) {
   b4770:	4ec5      	ldr	r6, [pc, #788]	; (b4a88 <loop+0x320>)
   b4772:	7835      	ldrb	r5, [r6, #0]
void loop() {
   b4774:	b097      	sub	sp, #92	; 0x5c
  switch (firmwareState) {
   b4776:	b13d      	cbz	r5, b4788 <loop+0x20>
   b4778:	2d01      	cmp	r5, #1
   b477a:	f000 80bf 	beq.w	b48fc <loop+0x194>
}
   b477e:	b017      	add	sp, #92	; 0x5c
   b4780:	ecbd 8b02 	vpop	{d8}
   b4784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      WITH_LOCK(Serial) {
   b4788:	f004 fb30 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b478c:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b478e:	f7ff fcda 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("BLEWAIT");
   b4792:	f004 fb2b 	bl	b8dec <_Z16_fetch_usbserialv>
   b4796:	49bd      	ldr	r1, [pc, #756]	; (b4a8c <loop+0x324>)
   b4798:	f003 fc23 	bl	b7fe2 <_ZN5Print7printlnEPKc>
      WITH_LOCK(Serial) {
   b479c:	a80d      	add	r0, sp, #52	; 0x34
   b479e:	f7ff fd7d 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
      BLE.on();
   b47a2:	f002 fbc5 	bl	b6f30 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b47a6:	f002 fc11 	bl	b6fcc <_ZNK8particle14BleLocalDevice2onEv>
      BLE.addCharacteristic(txCharacteristic);
   b47aa:	f002 fbc1 	bl	b6f30 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b47ae:	4ab8      	ldr	r2, [pc, #736]	; (b4a90 <loop+0x328>)
   b47b0:	4601      	mov	r1, r0
   b47b2:	a80d      	add	r0, sp, #52	; 0x34
   b47b4:	f003 f8b4 	bl	b7920 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b47b8:	a80d      	add	r0, sp, #52	; 0x34
   b47ba:	f002 fca2 	bl	b7102 <_ZN8particle17BleCharacteristicD1Ev>
      BLE.addCharacteristic(rxCharacteristic);
   b47be:	f002 fbb7 	bl	b6f30 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b47c2:	4ab4      	ldr	r2, [pc, #720]	; (b4a94 <loop+0x32c>)
   b47c4:	4601      	mov	r1, r0
   b47c6:	a80d      	add	r0, sp, #52	; 0x34
   b47c8:	f003 f8aa 	bl	b7920 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b47cc:	a80d      	add	r0, sp, #52	; 0x34
   b47ce:	f002 fc98 	bl	b7102 <_ZN8particle17BleCharacteristicD1Ev>
      BleAdvertisingData data;
   b47d2:	a80d      	add	r0, sp, #52	; 0x34
   b47d4:	f002 fa15 	bl	b6c02 <_ZN8particle18BleAdvertisingDataC1Ev>
      data.appendServiceUUID(serviceUuid);
   b47d8:	49af      	ldr	r1, [pc, #700]	; (b4a98 <loop+0x330>)
   b47da:	a803      	add	r0, sp, #12
   b47dc:	f002 f916 	bl	b6a0c <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b47e0:	a903      	add	r1, sp, #12
   b47e2:	a808      	add	r0, sp, #32
   b47e4:	f002 f912 	bl	b6a0c <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b47e8:	a808      	add	r0, sp, #32
   b47ea:	f002 f955 	bl	b6a98 <_ZNK8particle7BleUuid4typeEv>
   b47ee:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b47f0:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   b47f2:	2c00      	cmp	r4, #0
   b47f4:	d13a      	bne.n	b486c <loop+0x104>
            uint16_t uuid16 = tempUUID.shorted();
   b47f6:	f002 f96b 	bl	b6ad0 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b47fa:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b47fc:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4800:	2302      	movs	r3, #2
   b4802:	f10d 020a 	add.w	r2, sp, #10
   b4806:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4808:	a80d      	add	r0, sp, #52	; 0x34
   b480a:	f002 f9ef 	bl	b6bec <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
      BLE.advertise(&data);
   b480e:	f002 fb8f 	bl	b6f30 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4812:	2200      	movs	r2, #0
   b4814:	a90d      	add	r1, sp, #52	; 0x34
   b4816:	f002 fbf9 	bl	b700c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
      BLE.onConnected(connectCallback);
   b481a:	f002 fb89 	bl	b6f30 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b481e:	499f      	ldr	r1, [pc, #636]	; (b4a9c <loop+0x334>)
   b4820:	2200      	movs	r2, #0
   b4822:	f002 ff80 	bl	b7726 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
      BLE.onDisconnected(disconnectCallback);
   b4826:	f002 fb83 	bl	b6f30 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b482a:	499d      	ldr	r1, [pc, #628]	; (b4aa0 <loop+0x338>)
   b482c:	2200      	movs	r2, #0
   b482e:	f002 ff5b 	bl	b76e8 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
      int BLECountdown = 5000;
   b4832:	f241 3488 	movw	r4, #5000	; 0x1388
      while(!BLE.connected() && BLECountdown > 0) {
   b4836:	f002 fb7b 	bl	b6f30 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b483a:	f002 fbfa 	bl	b7032 <_ZNK8particle14BleLocalDevice9connectedEv>
   b483e:	b900      	cbnz	r0, b4842 <loop+0xda>
   b4840:	b9dc      	cbnz	r4, b487a <loop+0x112>
      if(BLE.connected()){ 
   b4842:	f002 fb75 	bl	b6f30 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4846:	f002 fbf4 	bl	b7032 <_ZNK8particle14BleLocalDevice9connectedEv>
   b484a:	4c96      	ldr	r4, [pc, #600]	; (b4aa4 <loop+0x33c>)
   b484c:	bb40      	cbnz	r0, b48a0 <loop+0x138>
        bleWaitForConfig = false;
   b484e:	7020      	strb	r0, [r4, #0]
        WITH_LOCK(Serial) {
   b4850:	f004 facc 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4854:	9008      	str	r0, [sp, #32]
      { _M_device.lock(); }
   b4856:	f7ff fc76 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("BLE not connected, continuing with stored settings.");
   b485a:	f004 fac7 	bl	b8dec <_Z16_fetch_usbserialv>
   b485e:	4992      	ldr	r1, [pc, #584]	; (b4aa8 <loop+0x340>)
   b4860:	f003 fbbf 	bl	b7fe2 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b4864:	a808      	add	r0, sp, #32
   b4866:	f7ff fd19 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b486a:	e028      	b.n	b48be <loop+0x156>
   b486c:	f002 f932 	bl	b6ad4 <_ZNK8particle7BleUuid8rawBytesEv>
   b4870:	9500      	str	r5, [sp, #0]
   b4872:	4602      	mov	r2, r0
   b4874:	2310      	movs	r3, #16
   b4876:	2107      	movs	r1, #7
   b4878:	e7c6      	b.n	b4808 <loop+0xa0>
        WITH_LOCK(Serial) {
   b487a:	f004 fab7 	bl	b8dec <_Z16_fetch_usbserialv>
        BLECountdown = BLECountdown - 10;
   b487e:	3c0a      	subs	r4, #10
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4880:	9008      	str	r0, [sp, #32]
      { _M_device.lock(); }
   b4882:	f7ff fc60 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(BLECountdown);
   b4886:	f004 fab1 	bl	b8dec <_Z16_fetch_usbserialv>
   b488a:	220a      	movs	r2, #10
   b488c:	4621      	mov	r1, r4
   b488e:	f7ff fc3d 	bl	b410c <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4892:	a808      	add	r0, sp, #32
   b4894:	f7ff fd02 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
        delay(10);
   b4898:	200a      	movs	r0, #10
   b489a:	f001 ff11 	bl	b66c0 <delay>
      while(!BLE.connected() && BLECountdown > 0) {
   b489e:	e7ca      	b.n	b4836 <loop+0xce>
        WITH_LOCK(Serial) {
   b48a0:	f004 faa4 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b48a4:	9008      	str	r0, [sp, #32]
      { _M_device.lock(); }
   b48a6:	f7ff fc4e 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("BLE connected");
   b48aa:	f004 fa9f 	bl	b8dec <_Z16_fetch_usbserialv>
   b48ae:	497f      	ldr	r1, [pc, #508]	; (b4aac <loop+0x344>)
   b48b0:	f003 fb97 	bl	b7fe2 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b48b4:	a808      	add	r0, sp, #32
   b48b6:	f7ff fcf1 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
        bleWaitForConfig = true;
   b48ba:	2301      	movs	r3, #1
   b48bc:	7023      	strb	r3, [r4, #0]
          Serial.println("bleWaitForConfig");
   b48be:	4d7c      	ldr	r5, [pc, #496]	; (b4ab0 <loop+0x348>)
      while(bleWaitForConfig) {
   b48c0:	7823      	ldrb	r3, [r4, #0]
   b48c2:	b183      	cbz	r3, b48e6 <loop+0x17e>
        WITH_LOCK(Serial) {
   b48c4:	f004 fa92 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b48c8:	9008      	str	r0, [sp, #32]
      { _M_device.lock(); }
   b48ca:	f7ff fc3c 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("bleWaitForConfig");
   b48ce:	f004 fa8d 	bl	b8dec <_Z16_fetch_usbserialv>
   b48d2:	4629      	mov	r1, r5
   b48d4:	f003 fb85 	bl	b7fe2 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b48d8:	a808      	add	r0, sp, #32
   b48da:	f7ff fcdf 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
        delay(100);
   b48de:	2064      	movs	r0, #100	; 0x64
   b48e0:	f001 feee 	bl	b66c0 <delay>
      while(bleWaitForConfig) {
   b48e4:	e7ec      	b.n	b48c0 <loop+0x158>
      BLE.disconnectAll();
   b48e6:	f002 fb23 	bl	b6f30 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b48ea:	f002 fe2b 	bl	b7544 <_ZNK8particle14BleLocalDevice13disconnectAllEv>
      BLE.off();
   b48ee:	f002 fb1f 	bl	b6f30 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b48f2:	f002 fc90 	bl	b7216 <_ZNK8particle14BleLocalDevice3offEv>
      firmwareState = RECORDING;
   b48f6:	2301      	movs	r3, #1
   b48f8:	7033      	strb	r3, [r6, #0]
      break;
   b48fa:	e740      	b.n	b477e <loop+0x16>
      WITH_LOCK(Serial) {
   b48fc:	f004 fa76 	bl	b8dec <_Z16_fetch_usbserialv>
      lis3dh.read();
   b4900:	4c6c      	ldr	r4, [pc, #432]	; (b4ab4 <loop+0x34c>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4902:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b4904:	f7ff fc1f 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("RECORDING");
   b4908:	f004 fa70 	bl	b8dec <_Z16_fetch_usbserialv>
   b490c:	496a      	ldr	r1, [pc, #424]	; (b4ab8 <loop+0x350>)
      x = lis3dh.x_g;
   b490e:	f8df b1dc 	ldr.w	fp, [pc, #476]	; b4aec <loop+0x384>
      y = lis3dh.y_g;
   b4912:	f8df 91dc 	ldr.w	r9, [pc, #476]	; b4af0 <loop+0x388>
      z = lis3dh.z_g;
   b4916:	4f69      	ldr	r7, [pc, #420]	; (b4abc <loop+0x354>)
   b4918:	f8df a1d8 	ldr.w	sl, [pc, #472]	; b4af4 <loop+0x38c>
   b491c:	f8df 81d8 	ldr.w	r8, [pc, #472]	; b4af8 <loop+0x390>
   b4920:	4e67      	ldr	r6, [pc, #412]	; (b4ac0 <loop+0x358>)
        Serial.println("RECORDING");
   b4922:	f003 fb5e 	bl	b7fe2 <_ZN5Print7printlnEPKc>
      WITH_LOCK(Serial) {
   b4926:	a80d      	add	r0, sp, #52	; 0x34
   b4928:	f7ff fcb8 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
      lis3dh.read();
   b492c:	4620      	mov	r0, r4
   b492e:	f000 ff1d 	bl	b576c <_ZN15Adafruit_LIS3DH4readEv>
      if(!firstLIS3DHReading) {
   b4932:	4b64      	ldr	r3, [pc, #400]	; (b4ac4 <loop+0x35c>)
      x = lis3dh.x_g;
   b4934:	edd4 7a03 	vldr	s15, [r4, #12]
      y = lis3dh.y_g;
   b4938:	edd4 8a04 	vldr	s17, [r4, #16]
      z = lis3dh.z_g;
   b493c:	ed94 8a05 	vldr	s16, [r4, #20]
      if(!firstLIS3DHReading) {
   b4940:	781a      	ldrb	r2, [r3, #0]
      x = lis3dh.x_g;
   b4942:	edcb 7a00 	vstr	s15, [fp]
      y = lis3dh.y_g;
   b4946:	edc9 8a00 	vstr	s17, [r9]
      z = lis3dh.z_g;
   b494a:	ed87 8a00 	vstr	s16, [r7]
      if(!firstLIS3DHReading) {
   b494e:	2a00      	cmp	r2, #0
   b4950:	f040 8088 	bne.w	b4a64 <loop+0x2fc>
        if(abs(x - prevX) > kDeltaAccelThreshold || abs(y - prevY) > kDeltaAccelThreshold || abs(z - prevZ) > kDeltaAccelThreshold) {
   b4954:	ed9a 7a00 	vldr	s14, [sl]
          storedValues[storedValuesIndex] = 0;
   b4958:	4c5b      	ldr	r4, [pc, #364]	; (b4ac8 <loop+0x360>)
        if(abs(x - prevX) > kDeltaAccelThreshold || abs(y - prevY) > kDeltaAccelThreshold || abs(z - prevZ) > kDeltaAccelThreshold) {
   b495a:	ee77 7ac7 	vsub.f32	s15, s15, s14
          storedValues[storedValuesIndex] = 0;
   b495e:	6825      	ldr	r5, [r4, #0]
        if(abs(x - prevX) > kDeltaAccelThreshold || abs(y - prevY) > kDeltaAccelThreshold || abs(z - prevZ) > kDeltaAccelThreshold) {
   b4960:	eef0 7ae7 	vabs.f32	s15, s15
   b4964:	ee17 0a90 	vmov	r0, s15
   b4968:	f004 ff3a 	bl	b97e0 <__aeabi_f2d>
   b496c:	a344      	add	r3, pc, #272	; (adr r3, b4a80 <loop+0x318>)
   b496e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4972:	f005 f80b 	bl	b998c <__aeabi_dcmpgt>
   b4976:	2800      	cmp	r0, #0
   b4978:	d170      	bne.n	b4a5c <loop+0x2f4>
   b497a:	edd8 7a00 	vldr	s15, [r8]
   b497e:	ee78 8ae7 	vsub.f32	s17, s17, s15
   b4982:	eef0 7ae8 	vabs.f32	s15, s17
   b4986:	ee17 0a90 	vmov	r0, s15
   b498a:	f004 ff29 	bl	b97e0 <__aeabi_f2d>
   b498e:	a33c      	add	r3, pc, #240	; (adr r3, b4a80 <loop+0x318>)
   b4990:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4994:	f004 fffa 	bl	b998c <__aeabi_dcmpgt>
   b4998:	2800      	cmp	r0, #0
   b499a:	d15f      	bne.n	b4a5c <loop+0x2f4>
   b499c:	edd6 7a00 	vldr	s15, [r6]
   b49a0:	ee38 8a67 	vsub.f32	s16, s16, s15
   b49a4:	eef0 7ac8 	vabs.f32	s15, s16
   b49a8:	ee17 0a90 	vmov	r0, s15
   b49ac:	f004 ff18 	bl	b97e0 <__aeabi_f2d>
   b49b0:	a333      	add	r3, pc, #204	; (adr r3, b4a80 <loop+0x318>)
   b49b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b49b6:	f004 ffe9 	bl	b998c <__aeabi_dcmpgt>
   b49ba:	2800      	cmp	r0, #0
   b49bc:	d14e      	bne.n	b4a5c <loop+0x2f4>
          storedValues[storedValuesIndex] = 0;
   b49be:	4b43      	ldr	r3, [pc, #268]	; (b4acc <loop+0x364>)
   b49c0:	5558      	strb	r0, [r3, r5]
        storedTimes[storedValuesIndex] = Time.now(); 
   b49c2:	f004 f91c 	bl	b8bfe <_ZN9TimeClass3nowEv>
   b49c6:	4b42      	ldr	r3, [pc, #264]	; (b4ad0 <loop+0x368>)
   b49c8:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
        WITH_LOCK(Serial) {
   b49cc:	f004 fa0e 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b49d0:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b49d2:	f7ff fbb8 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
          Serial.printlnf("Recording index: %i", storedValuesIndex);
   b49d6:	f004 fa09 	bl	b8dec <_Z16_fetch_usbserialv>
   b49da:	6822      	ldr	r2, [r4, #0]
   b49dc:	493d      	ldr	r1, [pc, #244]	; (b4ad4 <loop+0x36c>)
   b49de:	f7ff fbd5 	bl	b418c <_ZN5Print8printlnfEPKcz>
        WITH_LOCK(Serial) {
   b49e2:	a80d      	add	r0, sp, #52	; 0x34
   b49e4:	f7ff fc5a 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
        storedValuesIndex++; 
   b49e8:	6823      	ldr	r3, [r4, #0]
   b49ea:	3301      	adds	r3, #1
   b49ec:	6023      	str	r3, [r4, #0]
        WITH_LOCK(Serial) {
   b49ee:	f004 f9fd 	bl	b8dec <_Z16_fetch_usbserialv>
        os_mutex_lock(payloadAccessLock);
   b49f2:	4c39      	ldr	r4, [pc, #228]	; (b4ad8 <loop+0x370>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b49f4:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b49f6:	f7ff fba6 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("requesting payloadAccessLock");
   b49fa:	f004 f9f7 	bl	b8dec <_Z16_fetch_usbserialv>
   b49fe:	4937      	ldr	r1, [pc, #220]	; (b4adc <loop+0x374>)
   b4a00:	f003 faef 	bl	b7fe2 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b4a04:	a80d      	add	r0, sp, #52	; 0x34
   b4a06:	f7ff fc49 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
        os_mutex_lock(payloadAccessLock);
   b4a0a:	6820      	ldr	r0, [r4, #0]
   b4a0c:	f001 fada 	bl	b5fc4 <os_mutex_lock>
        delay(1);
   b4a10:	2001      	movs	r0, #1
   b4a12:	f001 fe55 	bl	b66c0 <delay>
        os_mutex_unlock(payloadAccessLock);
   b4a16:	6820      	ldr	r0, [r4, #0]
   b4a18:	f001 fadc 	bl	b5fd4 <os_mutex_unlock>
        WITH_LOCK(Serial) {
   b4a1c:	f004 f9e6 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4a20:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b4a22:	f7ff fb90 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("payloadAccessLock released by RECORDING");
   b4a26:	f004 f9e1 	bl	b8dec <_Z16_fetch_usbserialv>
   b4a2a:	492d      	ldr	r1, [pc, #180]	; (b4ae0 <loop+0x378>)
          Serial.println("First reading");
   b4a2c:	f003 fad9 	bl	b7fe2 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b4a30:	a80d      	add	r0, sp, #52	; 0x34
   b4a32:	f7ff fc33 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
      prevX = x;
   b4a36:	f8db 3000 	ldr.w	r3, [fp]
   b4a3a:	f8ca 3000 	str.w	r3, [sl]
      prevY = y;
   b4a3e:	f8d9 3000 	ldr.w	r3, [r9]
   b4a42:	f8c8 3000 	str.w	r3, [r8]
      prevZ = z;
   b4a46:	683b      	ldr	r3, [r7, #0]
   b4a48:	6033      	str	r3, [r6, #0]
      delay(recordingInterval);
   b4a4a:	4b26      	ldr	r3, [pc, #152]	; (b4ae4 <loop+0x37c>)
   b4a4c:	6818      	ldr	r0, [r3, #0]
}
   b4a4e:	b017      	add	sp, #92	; 0x5c
   b4a50:	ecbd 8b02 	vpop	{d8}
   b4a54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      delay(recordingInterval);
   b4a58:	f001 be32 	b.w	b66c0 <delay>
          storedValues[storedValuesIndex] = 1;
   b4a5c:	4a1b      	ldr	r2, [pc, #108]	; (b4acc <loop+0x364>)
   b4a5e:	2301      	movs	r3, #1
   b4a60:	5553      	strb	r3, [r2, r5]
   b4a62:	e7ae      	b.n	b49c2 <loop+0x25a>
        firstLIS3DHReading = false;
   b4a64:	2200      	movs	r2, #0
   b4a66:	701a      	strb	r2, [r3, #0]
        WITH_LOCK(Serial) {
   b4a68:	f004 f9c0 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4a6c:	900d      	str	r0, [sp, #52]	; 0x34
      { _M_device.lock(); }
   b4a6e:	f7ff fb6a 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("First reading");
   b4a72:	f004 f9bb 	bl	b8dec <_Z16_fetch_usbserialv>
   b4a76:	491c      	ldr	r1, [pc, #112]	; (b4ae8 <loop+0x380>)
   b4a78:	e7d8      	b.n	b4a2c <loop+0x2c4>
   b4a7a:	bf00      	nop
   b4a7c:	f3af 8000 	nop.w
   b4a80:	9999999a 	.word	0x9999999a
   b4a84:	3fa99999 	.word	0x3fa99999
   b4a88:	2003dac8 	.word	0x2003dac8
   b4a8c:	000b9e7b 	.word	0x000b9e7b
   b4a90:	2003e5f8 	.word	0x2003e5f8
   b4a94:	2003e0dc 	.word	0x2003e0dc
   b4a98:	2003da70 	.word	0x2003da70
   b4a9c:	000b459d 	.word	0x000b459d
   b4aa0:	000b45d5 	.word	0x000b45d5
   b4aa4:	2003dac0 	.word	0x2003dac0
   b4aa8:	000b9e91 	.word	0x000b9e91
   b4aac:	000b9e83 	.word	0x000b9e83
   b4ab0:	000b9ec5 	.word	0x000b9ec5
   b4ab4:	2003dee8 	.word	0x2003dee8
   b4ab8:	000b9f25 	.word	0x000b9f25
   b4abc:	2003e61c 	.word	0x2003e61c
   b4ac0:	2003e06c 	.word	0x2003e06c
   b4ac4:	2003d9d8 	.word	0x2003d9d8
   b4ac8:	2003e5f4 	.word	0x2003e5f4
   b4acc:	2003e4f4 	.word	0x2003e4f4
   b4ad0:	2003e0f4 	.word	0x2003e0f4
   b4ad4:	000b9ed6 	.word	0x000b9ed6
   b4ad8:	2003e060 	.word	0x2003e060
   b4adc:	000b9eea 	.word	0x000b9eea
   b4ae0:	000b9f07 	.word	0x000b9f07
   b4ae4:	2003e070 	.word	0x2003e070
   b4ae8:	000b9f2f 	.word	0x000b9f2f
   b4aec:	2003e614 	.word	0x2003e614
   b4af0:	2003e618 	.word	0x2003e618
   b4af4:	2003e064 	.word	0x2003e064
   b4af8:	2003e068 	.word	0x2003e068

000b4afc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch(bleQuestionCount){
   b4b00:	4daf      	ldr	r5, [pc, #700]	; (b4dc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c4>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4b02:	b095      	sub	sp, #84	; 0x54
   b4b04:	4607      	mov	r7, r0
   b4b06:	460c      	mov	r4, r1
  bleInputBuffer = "";
   b4b08:	48ae      	ldr	r0, [pc, #696]	; (b4dc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4b0a:	49af      	ldr	r1, [pc, #700]	; (b4dc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
   b4b0c:	f003 fbe9 	bl	b82e2 <_ZN6StringaSEPKc>
  switch(bleQuestionCount){
   b4b10:	682b      	ldr	r3, [r5, #0]
   b4b12:	2b07      	cmp	r3, #7
   b4b14:	f200 810e 	bhi.w	b4d34 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x238>
   b4b18:	e8df f013 	tbh	[pc, r3, lsl #1]
   b4b1c:	00c8017d 	.word	0x00c8017d
   b4b20:	008c00a7 	.word	0x008c00a7
   b4b24:	0048006a 	.word	0x0048006a
   b4b28:	00080023 	.word	0x00080023
   b4b2c:	443c      	add	r4, r7
   b4b2e:	1e7e      	subs	r6, r7, #1
	String & operator += (char c)			{concat(c); return (*this);}
   b4b30:	4fa4      	ldr	r7, [pc, #656]	; (b4dc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4b32:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4b34:	42b4      	cmp	r4, r6
   b4b36:	f000 833e 	beq.w	b51b6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6ba>
        WITH_LOCK(Serial) {
   b4b3a:	f004 f957 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4b3e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4b40:	f7ff fb01 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4b44:	f004 f952 	bl	b8dec <_Z16_fetch_usbserialv>
   b4b48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4b4c:	220a      	movs	r2, #10
   b4b4e:	f7ff face 	bl	b40ee <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4b52:	a801      	add	r0, sp, #4
   b4b54:	f7ff fba2 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4b58:	7831      	ldrb	r1, [r6, #0]
   b4b5a:	4638      	mov	r0, r7
   b4b5c:	f003 fc14 	bl	b8388 <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   b4b60:	e7e8      	b.n	b4b34 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x38>
   b4b62:	443c      	add	r4, r7
   b4b64:	1e7e      	subs	r6, r7, #1
   b4b66:	f8df 825c 	ldr.w	r8, [pc, #604]	; b4dc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>
   b4b6a:	4f98      	ldr	r7, [pc, #608]	; (b4dcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d0>)
   b4b6c:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4b6e:	42a6      	cmp	r6, r4
   b4b70:	f000 82f6 	beq.w	b5160 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x664>
        WITH_LOCK(Serial) {
   b4b74:	f004 f93a 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4b78:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4b7a:	f7ff fae4 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4b7e:	f004 f935 	bl	b8dec <_Z16_fetch_usbserialv>
   b4b82:	220a      	movs	r2, #10
   b4b84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4b88:	f7ff fab1 	bl	b40ee <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4b8c:	a801      	add	r0, sp, #4
   b4b8e:	f7ff fb85 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4b92:	7831      	ldrb	r1, [r6, #0]
   b4b94:	488b      	ldr	r0, [pc, #556]	; (b4dc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4b96:	f003 fbf7 	bl	b8388 <_ZN6String6concatEc>
        reportingInterval = atoi(bleInputBuffer) * 1000;
   b4b9a:	f8d8 0000 	ldr.w	r0, [r8]
   b4b9e:	f004 ff25 	bl	b99ec <atoi>
   b4ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4ba6:	4358      	muls	r0, r3
   b4ba8:	6038      	str	r0, [r7, #0]
      for(int i = 0; i < len - 1; i++){
   b4baa:	e7e0      	b.n	b4b6e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x72>
   b4bac:	443c      	add	r4, r7
   b4bae:	1e7e      	subs	r6, r7, #1
   b4bb0:	f8df 8210 	ldr.w	r8, [pc, #528]	; b4dc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>
        recordingInterval = atoi(bleInputBuffer);
   b4bb4:	4f86      	ldr	r7, [pc, #536]	; (b4dd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d4>)
   b4bb6:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4bb8:	42a6      	cmp	r6, r4
   b4bba:	f000 8255 	beq.w	b5068 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x56c>
        WITH_LOCK(Serial) {
   b4bbe:	f004 f915 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4bc2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4bc4:	f7ff fabf 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4bc8:	f004 f910 	bl	b8dec <_Z16_fetch_usbserialv>
   b4bcc:	220a      	movs	r2, #10
   b4bce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4bd2:	f7ff fa8c 	bl	b40ee <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4bd6:	a801      	add	r0, sp, #4
   b4bd8:	f7ff fb60 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4bdc:	7831      	ldrb	r1, [r6, #0]
   b4bde:	4879      	ldr	r0, [pc, #484]	; (b4dc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4be0:	f003 fbd2 	bl	b8388 <_ZN6String6concatEc>
        recordingInterval = atoi(bleInputBuffer);
   b4be4:	f8d8 0000 	ldr.w	r0, [r8]
   b4be8:	f004 ff00 	bl	b99ec <atoi>
   b4bec:	6038      	str	r0, [r7, #0]
      for(int i = 0; i < len - 1; i++){
   b4bee:	e7e3      	b.n	b4bb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xbc>
   b4bf0:	443c      	add	r4, r7
   b4bf2:	1e7e      	subs	r6, r7, #1
   b4bf4:	f8df 81cc 	ldr.w	r8, [pc, #460]	; b4dc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>
   b4bf8:	4f76      	ldr	r7, [pc, #472]	; (b4dd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d8>)
   b4bfa:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4bfc:	42a6      	cmp	r6, r4
   b4bfe:	f000 81ec 	beq.w	b4fda <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4de>
        WITH_LOCK(Serial) {
   b4c02:	f004 f8f3 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4c06:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4c08:	f7ff fa9d 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4c0c:	f004 f8ee 	bl	b8dec <_Z16_fetch_usbserialv>
   b4c10:	220a      	movs	r2, #10
   b4c12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4c16:	f7ff fa6a 	bl	b40ee <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4c1a:	a801      	add	r0, sp, #4
   b4c1c:	f7ff fb3e 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4c20:	7831      	ldrb	r1, [r6, #0]
   b4c22:	4868      	ldr	r0, [pc, #416]	; (b4dc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4c24:	f003 fbb0 	bl	b8388 <_ZN6String6concatEc>
        dsid = atoi(bleInputBuffer);
   b4c28:	f8d8 0000 	ldr.w	r0, [r8]
   b4c2c:	f004 fede 	bl	b99ec <atoi>
   b4c30:	6038      	str	r0, [r7, #0]
      for(int i = 0; i < len - 1; i++){
   b4c32:	e7e3      	b.n	b4bfc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>
   b4c34:	443c      	add	r4, r7
   b4c36:	1e7e      	subs	r6, r7, #1
   b4c38:	4f62      	ldr	r7, [pc, #392]	; (b4dc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4c3a:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4c3c:	42a6      	cmp	r6, r4
   b4c3e:	f000 8192 	beq.w	b4f66 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x46a>
        WITH_LOCK(Serial) {
   b4c42:	f004 f8d3 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4c46:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4c48:	f7ff fa7d 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4c4c:	f004 f8ce 	bl	b8dec <_Z16_fetch_usbserialv>
   b4c50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4c54:	220a      	movs	r2, #10
   b4c56:	f7ff fa4a 	bl	b40ee <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4c5a:	a801      	add	r0, sp, #4
   b4c5c:	f7ff fb1e 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4c60:	7831      	ldrb	r1, [r6, #0]
   b4c62:	4638      	mov	r0, r7
   b4c64:	f003 fb90 	bl	b8388 <_ZN6String6concatEc>
      for(int i = 0; i < len - 1; i++){
   b4c68:	e7e8      	b.n	b4c3c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>
   b4c6a:	443c      	add	r4, r7
   b4c6c:	1e7e      	subs	r6, r7, #1
        password = bleInputBuffer;
   b4c6e:	f8df 8184 	ldr.w	r8, [pc, #388]	; b4df4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f8>
   b4c72:	4f54      	ldr	r7, [pc, #336]	; (b4dc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4c74:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4c76:	42a6      	cmp	r6, r4
   b4c78:	f000 810d 	beq.w	b4e96 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x39a>
        WITH_LOCK(Serial) {
   b4c7c:	f004 f8b6 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4c80:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4c82:	f7ff fa60 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4c86:	f004 f8b1 	bl	b8dec <_Z16_fetch_usbserialv>
   b4c8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4c8e:	220a      	movs	r2, #10
   b4c90:	f7ff fa2d 	bl	b40ee <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4c94:	a801      	add	r0, sp, #4
   b4c96:	f7ff fb01 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4c9a:	7831      	ldrb	r1, [r6, #0]
   b4c9c:	4638      	mov	r0, r7
   b4c9e:	f003 fb73 	bl	b8388 <_ZN6String6concatEc>
        password = bleInputBuffer;
   b4ca2:	4639      	mov	r1, r7
   b4ca4:	4640      	mov	r0, r8
   b4ca6:	f003 fb02 	bl	b82ae <_ZN6StringaSERKS_>
      for(int i = 0; i < len - 1; i++){
   b4caa:	e7e4      	b.n	b4c76 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x17a>
   b4cac:	443c      	add	r4, r7
   b4cae:	1e7e      	subs	r6, r7, #1
        ssid = bleInputBuffer;
   b4cb0:	f8df 8134 	ldr.w	r8, [pc, #308]	; b4de8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ec>
   b4cb4:	4f43      	ldr	r7, [pc, #268]	; (b4dc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4cb6:	3c02      	subs	r4, #2
      for(int i = 0; i < len - 1; i++){
   b4cb8:	42b4      	cmp	r4, r6
   b4cba:	d041      	beq.n	b4d40 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x244>
   b4cbc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b4cc0:	4638      	mov	r0, r7
   b4cc2:	f003 fb61 	bl	b8388 <_ZN6String6concatEc>
        ssid = bleInputBuffer;
   b4cc6:	4639      	mov	r1, r7
   b4cc8:	4640      	mov	r0, r8
   b4cca:	f003 faf0 	bl	b82ae <_ZN6StringaSERKS_>
        WITH_LOCK(Serial) {
   b4cce:	f004 f88d 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4cd2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4cd4:	f7ff fa37 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(data[i]);
   b4cd8:	f004 f888 	bl	b8dec <_Z16_fetch_usbserialv>
   b4cdc:	7831      	ldrb	r1, [r6, #0]
   b4cde:	220a      	movs	r2, #10
   b4ce0:	f7ff fa05 	bl	b40ee <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        WITH_LOCK(Serial) {
   b4ce4:	a801      	add	r0, sp, #4
   b4ce6:	f7ff fad9 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
      for(int i = 0; i < len - 1; i++){
   b4cea:	e7e5      	b.n	b4cb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1bc>
      networkBuffer = networks[networkCount - 1].ssid;
   b4cec:	4b3a      	ldr	r3, [pc, #232]	; (b4dd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2dc>)
   b4cee:	483b      	ldr	r0, [pc, #236]	; (b4ddc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e0>)
   b4cf0:	2238      	movs	r2, #56	; 0x38
   b4cf2:	fb02 3101 	mla	r1, r2, r1, r3
   b4cf6:	3104      	adds	r1, #4
   b4cf8:	f003 faf3 	bl	b82e2 <_ZN6StringaSEPKc>
      WITH_LOCK(Serial) {
   b4cfc:	f004 f876 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4d00:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4d02:	f7ff fa20 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(networkBuffer.length());
   b4d06:	f004 f871 	bl	b8dec <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4d0a:	68a1      	ldr	r1, [r4, #8]
   b4d0c:	220a      	movs	r2, #10
   b4d0e:	4606      	mov	r6, r0
   b4d10:	f003 f971 	bl	b7ff6 <_ZN5Print11printNumberEmh>
        n += println();
   b4d14:	4630      	mov	r0, r6
   b4d16:	f003 f958 	bl	b7fca <_ZN5Print7printlnEv>
      WITH_LOCK(Serial) {
   b4d1a:	a801      	add	r0, sp, #4
   b4d1c:	f7ff fabe 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
      txCharacteristic.setValue(networkBuffer);
   b4d20:	492e      	ldr	r1, [pc, #184]	; (b4ddc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e0>)
   b4d22:	482f      	ldr	r0, [pc, #188]	; (b4de0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   b4d24:	2200      	movs	r2, #0
   b4d26:	f002 f831 	bl	b6d8c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
      txCharacteristic.setValue("]\nEnter network SSID (blank to skip, 'clear' to reset credentials): ");
   b4d2a:	492e      	ldr	r1, [pc, #184]	; (b4de4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e8>)
   b4d2c:	2200      	movs	r2, #0
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   b4d2e:	482c      	ldr	r0, [pc, #176]	; (b4de0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   b4d30:	f002 f831 	bl	b6d96 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
  bleQuestionCount++;
   b4d34:	682b      	ldr	r3, [r5, #0]
   b4d36:	3301      	adds	r3, #1
   b4d38:	602b      	str	r3, [r5, #0]
}
   b4d3a:	b015      	add	sp, #84	; 0x54
   b4d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      WITH_LOCK(Serial) {
   b4d40:	f004 f854 	bl	b8dec <_Z16_fetch_usbserialv>
	const char * c_str() const { return buffer; }
   b4d44:	4e28      	ldr	r6, [pc, #160]	; (b4de8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ec>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4d46:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4d48:	f7ff f9fd 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(ssid);
   b4d4c:	f004 f84e 	bl	b8dec <_Z16_fetch_usbserialv>
   b4d50:	6831      	ldr	r1, [r6, #0]
   b4d52:	f003 f946 	bl	b7fe2 <_ZN5Print7printlnEPKc>
        Serial.println(ssid.length());
   b4d56:	f004 f849 	bl	b8dec <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4d5a:	68b1      	ldr	r1, [r6, #8]
   b4d5c:	220a      	movs	r2, #10
   b4d5e:	4604      	mov	r4, r0
   b4d60:	f003 f949 	bl	b7ff6 <_ZN5Print11printNumberEmh>
        n += println();
   b4d64:	4620      	mov	r0, r4
   b4d66:	f003 f930 	bl	b7fca <_ZN5Print7printlnEv>
      WITH_LOCK(Serial) {
   b4d6a:	a801      	add	r0, sp, #4
   b4d6c:	f7ff fa96 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4d70:	4915      	ldr	r1, [pc, #84]	; (b4dc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>)
   b4d72:	4630      	mov	r0, r6
   b4d74:	f003 fb51 	bl	b841a <_ZNK6String6equalsEPKc>
      if(ssid == ""){
   b4d78:	4604      	mov	r4, r0
   b4d7a:	2800      	cmp	r0, #0
   b4d7c:	d03c      	beq.n	b4df8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2fc>
        bleQuestionCount = 3;
   b4d7e:	2303      	movs	r3, #3
   b4d80:	602b      	str	r3, [r5, #0]
   b4d82:	4c14      	ldr	r4, [pc, #80]	; (b4dd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d8>)
        EEPROM.get(0, dsid);
   b4d84:	f004 fa56 	bl	b9234 <_Z21__fetch_global_EEPROMv>
   b4d88:	4621      	mov	r1, r4
   b4d8a:	2204      	movs	r2, #4
   b4d8c:	2000      	movs	r0, #0
   b4d8e:	f001 f969 	bl	b6064 <HAL_EEPROM_Get>
        txCharacteristic.setValue("\nCurrent DSID is [");
   b4d92:	4916      	ldr	r1, [pc, #88]	; (b4dec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f0>)
   b4d94:	4812      	ldr	r0, [pc, #72]	; (b4de0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   b4d96:	2200      	movs	r2, #0
   b4d98:	f001 fffd 	bl	b6d96 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        if(dsid != -1){
   b4d9c:	6821      	ldr	r1, [r4, #0]
   b4d9e:	1c4c      	adds	r4, r1, #1
   b4da0:	d00b      	beq.n	b4dba <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2be>
          txCharacteristic.setValue(String(dsid));
   b4da2:	220a      	movs	r2, #10
   b4da4:	a801      	add	r0, sp, #4
   b4da6:	f003 faae 	bl	b8306 <_ZN6StringC1Eih>
   b4daa:	480d      	ldr	r0, [pc, #52]	; (b4de0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e4>)
   b4dac:	2200      	movs	r2, #0
   b4dae:	a901      	add	r1, sp, #4
   b4db0:	f001 ffec 	bl	b6d8c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b4db4:	a801      	add	r0, sp, #4
   b4db6:	f003 fa1b 	bl	b81f0 <_ZN6StringD1Ev>
        txCharacteristic.setValue("]\nEnter device DSID (blank to skip): ");
   b4dba:	490d      	ldr	r1, [pc, #52]	; (b4df0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f4>)
   b4dbc:	2200      	movs	r2, #0
   b4dbe:	e7b6      	b.n	b4d2e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x232>
   b4dc0:	2003dabc 	.word	0x2003dabc
   b4dc4:	2003daac 	.word	0x2003daac
   b4dc8:	000ba033 	.word	0x000ba033
   b4dcc:	2003e074 	.word	0x2003e074
   b4dd0:	2003e070 	.word	0x2003e070
   b4dd4:	2003dac4 	.word	0x2003dac4
   b4dd8:	2003df28 	.word	0x2003df28
   b4ddc:	2003df14 	.word	0x2003df14
   b4de0:	2003e5f8 	.word	0x2003e5f8
   b4de4:	000b9f69 	.word	0x000b9f69
   b4de8:	2003e0e4 	.word	0x2003e0e4
   b4dec:	000b9fae 	.word	0x000b9fae
   b4df0:	000b9fc1 	.word	0x000b9fc1
   b4df4:	2003e040 	.word	0x2003e040
   b4df8:	49ba      	ldr	r1, [pc, #744]	; (b50e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e8>)
   b4dfa:	4630      	mov	r0, r6
   b4dfc:	f003 fb0d 	bl	b841a <_ZNK6String6equalsEPKc>
      }else if(ssid == "clear"){
   b4e00:	4602      	mov	r2, r0
   b4e02:	2800      	cmp	r0, #0
   b4e04:	d045      	beq.n	b4e92 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x396>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   b4e06:	48b8      	ldr	r0, [pc, #736]	; (b50e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b4e08:	4623      	mov	r3, r4
   b4e0a:	6840      	ldr	r0, [r0, #4]
   b4e0c:	4622      	mov	r2, r4
   b4e0e:	4621      	mov	r1, r4
   b4e10:	f001 fbde 	bl	b65d0 <network_clear_credentials>
          bleQuestionCount = 0;
   b4e14:	602c      	str	r4, [r5, #0]
      txCharacteristic.setValue("\nCredentials are currently stored for:\n[");
   b4e16:	49b5      	ldr	r1, [pc, #724]	; (b50ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f0>)
   b4e18:	48b5      	ldr	r0, [pc, #724]	; (b50f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
      networkCount = WiFi.getCredentials(networks, 5);
   b4e1a:	f8df a33c 	ldr.w	sl, [pc, #828]	; b5158 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x65c>
   b4e1e:	4eb5      	ldr	r6, [pc, #724]	; (b50f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f8>)
   b4e20:	4cb5      	ldr	r4, [pc, #724]	; (b50f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5fc>)
        txCharacteristic.setValue(networkBuffer);
   b4e22:	f8df 82cc 	ldr.w	r8, [pc, #716]	; b50f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>
        txCharacteristic.setValue(",\n");
   b4e26:	f8df 9334 	ldr.w	r9, [pc, #820]	; b515c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x660>
      txCharacteristic.setValue("\nCredentials are currently stored for:\n[");
   b4e2a:	2200      	movs	r2, #0
   b4e2c:	f001 ffb3 	bl	b6d96 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      networkCount = WiFi.getCredentials(networks, 5);
   b4e30:	49b2      	ldr	r1, [pc, #712]	; (b50fc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x600>)
   b4e32:	48ad      	ldr	r0, [pc, #692]	; (b50e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b4e34:	2205      	movs	r2, #5
   b4e36:	f004 f839 	bl	b8eac <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>
      for(int i = 0; i < networkCount - 1; i++){
   b4e3a:	2700      	movs	r7, #0
      networkCount = WiFi.getCredentials(networks, 5);
   b4e3c:	f8ca 0000 	str.w	r0, [sl]
      for(int i = 0; i < networkCount - 1; i++){
   b4e40:	f8da 1000 	ldr.w	r1, [sl]
   b4e44:	3901      	subs	r1, #1
   b4e46:	42b9      	cmp	r1, r7
   b4e48:	f77f af50 	ble.w	b4cec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1f0>
        networkBuffer = networks[i].ssid;
   b4e4c:	4631      	mov	r1, r6
   b4e4e:	4620      	mov	r0, r4
   b4e50:	f003 fa47 	bl	b82e2 <_ZN6StringaSEPKc>
        WITH_LOCK(Serial) {
   b4e54:	f003 ffca 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4e58:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4e5a:	f7ff f974 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println(networkBuffer.length());
   b4e5e:	f003 ffc5 	bl	b8dec <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4e62:	68a1      	ldr	r1, [r4, #8]
   b4e64:	220a      	movs	r2, #10
   b4e66:	4683      	mov	fp, r0
   b4e68:	f003 f8c5 	bl	b7ff6 <_ZN5Print11printNumberEmh>
        n += println();
   b4e6c:	4658      	mov	r0, fp
   b4e6e:	f003 f8ac 	bl	b7fca <_ZN5Print7printlnEv>
        WITH_LOCK(Serial) {
   b4e72:	a801      	add	r0, sp, #4
   b4e74:	f7ff fa12 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
        txCharacteristic.setValue(networkBuffer);
   b4e78:	2200      	movs	r2, #0
   b4e7a:	4621      	mov	r1, r4
   b4e7c:	4640      	mov	r0, r8
   b4e7e:	f001 ff85 	bl	b6d8c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        txCharacteristic.setValue(",\n");
   b4e82:	2200      	movs	r2, #0
   b4e84:	4649      	mov	r1, r9
   b4e86:	4640      	mov	r0, r8
   b4e88:	f001 ff85 	bl	b6d96 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      for(int i = 0; i < networkCount - 1; i++){
   b4e8c:	3701      	adds	r7, #1
   b4e8e:	3638      	adds	r6, #56	; 0x38
   b4e90:	e7d6      	b.n	b4e40 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x344>
        txCharacteristic.setValue("\nEnter network password: ");
   b4e92:	499b      	ldr	r1, [pc, #620]	; (b5100 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x604>)
   b4e94:	e74b      	b.n	b4d2e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x232>
      WITH_LOCK(Serial) {
   b4e96:	f003 ffa9 	bl	b8dec <_Z16_fetch_usbserialv>
	const char * c_str() const { return buffer; }
   b4e9a:	4c9a      	ldr	r4, [pc, #616]	; (b5104 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x608>)
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4e9c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4e9e:	f7ff f952 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(password);
   b4ea2:	f003 ffa3 	bl	b8dec <_Z16_fetch_usbserialv>
   b4ea6:	6821      	ldr	r1, [r4, #0]
   b4ea8:	f003 f89b 	bl	b7fe2 <_ZN5Print7printlnEPKc>
        Serial.println(password.length());
   b4eac:	f003 ff9e 	bl	b8dec <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4eb0:	68a1      	ldr	r1, [r4, #8]
   b4eb2:	4606      	mov	r6, r0
   b4eb4:	220a      	movs	r2, #10
   b4eb6:	f003 f89e 	bl	b7ff6 <_ZN5Print11printNumberEmh>
        n += println();
   b4eba:	4630      	mov	r0, r6
   b4ebc:	f003 f885 	bl	b7fca <_ZN5Print7printlnEv>
      WITH_LOCK(Serial) {
   b4ec0:	a801      	add	r0, sp, #4
   b4ec2:	f7ff f9eb 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b4ec6:	4b90      	ldr	r3, [pc, #576]	; (b5108 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60c>)
   b4ec8:	6826      	ldr	r6, [r4, #0]
   b4eca:	f8d3 8000 	ldr.w	r8, [r3]
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4ece:	f1b8 0f00 	cmp.w	r8, #0
   b4ed2:	d044      	beq.n	b4f5e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x462>
   b4ed4:	4640      	mov	r0, r8
   b4ed6:	f004 fe2f 	bl	b9b38 <strlen>
   b4eda:	4607      	mov	r7, r0
   b4edc:	2e00      	cmp	r6, #0
   b4ede:	d040      	beq.n	b4f62 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x466>
   b4ee0:	4630      	mov	r0, r6
   b4ee2:	f004 fe29 	bl	b9b38 <strlen>
   b4ee6:	4604      	mov	r4, r0
        memset(&creds, 0, sizeof(creds));
   b4ee8:	2238      	movs	r2, #56	; 0x38
   b4eea:	2100      	movs	r1, #0
   b4eec:	a806      	add	r0, sp, #24
   b4eee:	f004 fddb 	bl	b9aa8 <memset>
        creds.size = sizeof(creds);
   b4ef2:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b4ef4:	e9cd 3801 	strd	r3, r8, [sp, #4]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4ef8:	487b      	ldr	r0, [pc, #492]	; (b50e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
        creds.password_len = passwordLen;
   b4efa:	9405      	str	r4, [sp, #20]
        creds.security = WLanSecurityType(security);
   b4efc:	2303      	movs	r3, #3
   b4efe:	f88d 3018 	strb.w	r3, [sp, #24]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4f02:	2300      	movs	r3, #0
   b4f04:	aa01      	add	r2, sp, #4
   b4f06:	4619      	mov	r1, r3
   b4f08:	6840      	ldr	r0, [r0, #4]
        creds.password = password;
   b4f0a:	e9cd 7603 	strd	r7, r6, [sp, #12]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4f0e:	f001 fb57 	bl	b65c0 <network_set_credentials>
      WITH_LOCK(Serial) {
   b4f12:	f003 ff6b 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4f16:	9000      	str	r0, [sp, #0]
      { _M_device.lock(); }
   b4f18:	f7ff f915 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("\n\nCredentials set with ssid: " + ssid + "\npassword: " + password + "\n\n");
   b4f1c:	f003 ff66 	bl	b8dec <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4f20:	497a      	ldr	r1, [pc, #488]	; (b510c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x610>)
   b4f22:	4604      	mov	r4, r0
   b4f24:	a801      	add	r0, sp, #4
   b4f26:	f003 f9ae 	bl	b8286 <_ZN6StringC1EPK19__FlashStringHelper>
   b4f2a:	4977      	ldr	r1, [pc, #476]	; (b5108 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60c>)
   b4f2c:	a801      	add	r0, sp, #4
   b4f2e:	f003 fa49 	bl	b83c4 <_ZplRK15StringSumHelperRK6String>
   b4f32:	4977      	ldr	r1, [pc, #476]	; (b5110 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x614>)
   b4f34:	f003 fa52 	bl	b83dc <_ZplRK15StringSumHelperPKc>
   b4f38:	4972      	ldr	r1, [pc, #456]	; (b5104 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x608>)
   b4f3a:	f003 fa43 	bl	b83c4 <_ZplRK15StringSumHelperRK6String>
   b4f3e:	4975      	ldr	r1, [pc, #468]	; (b5114 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x618>)
   b4f40:	f003 fa4c 	bl	b83dc <_ZplRK15StringSumHelperPKc>
   b4f44:	6801      	ldr	r1, [r0, #0]
   b4f46:	4620      	mov	r0, r4
   b4f48:	f003 f84b 	bl	b7fe2 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4f4c:	a801      	add	r0, sp, #4
   b4f4e:	f003 f94f 	bl	b81f0 <_ZN6StringD1Ev>
      WITH_LOCK(Serial) {
   b4f52:	4668      	mov	r0, sp
   b4f54:	f7ff f9a2 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
      txCharacteristic.setValue("\nEnter 'test' to test credentials (blank to skip): ");
   b4f58:	496f      	ldr	r1, [pc, #444]	; (b5118 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x61c>)
   b4f5a:	2200      	movs	r2, #0
   b4f5c:	e6e7      	b.n	b4d2e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x232>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4f5e:	4647      	mov	r7, r8
   b4f60:	e7bc      	b.n	b4edc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3e0>
   b4f62:	4634      	mov	r4, r6
   b4f64:	e7c0      	b.n	b4ee8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3ec>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4f66:	496d      	ldr	r1, [pc, #436]	; (b511c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x620>)
   b4f68:	486d      	ldr	r0, [pc, #436]	; (b5120 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x624>)
   b4f6a:	f003 fa56 	bl	b841a <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == "test" && WiFi.hasCredentials()){
   b4f6e:	2800      	cmp	r0, #0
   b4f70:	f43f af07 	beq.w	b4d82 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x286>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4f74:	4c5c      	ldr	r4, [pc, #368]	; (b50e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
        return network_has_credentials(*this, 0, NULL);
   b4f76:	2200      	movs	r2, #0
   b4f78:	6860      	ldr	r0, [r4, #4]
   b4f7a:	4611      	mov	r1, r2
   b4f7c:	f001 fb18 	bl	b65b0 <network_has_credentials>
   b4f80:	2800      	cmp	r0, #0
   b4f82:	f43f aefe 	beq.w	b4d82 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x286>
        WiFi.on();
   b4f86:	4620      	mov	r0, r4
   b4f88:	f7ff f90e 	bl	b41a8 <_ZN5spark9WiFiClass2onEv>
        WiFi.connect();
   b4f8c:	2100      	movs	r1, #0
   b4f8e:	4620      	mov	r0, r4
   b4f90:	f7ff f916 	bl	b41c0 <_ZN5spark9WiFiClass7connectEj>
        return network_connecting(*this, 0, NULL);
   b4f94:	2200      	movs	r2, #0
   b4f96:	6860      	ldr	r0, [r4, #4]
   b4f98:	4611      	mov	r1, r2
   b4f9a:	f001 fad1 	bl	b6540 <network_connecting>
        while(WiFi.connecting() || !WiFi.ready()){
   b4f9e:	b178      	cbz	r0, b4fc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4c4>
            Serial.println("timeout");
   b4fa0:	f003 ff24 	bl	b8dec <_Z16_fetch_usbserialv>
   b4fa4:	495f      	ldr	r1, [pc, #380]	; (b5124 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x628>)
   b4fa6:	f003 f81c 	bl	b7fe2 <_ZN5Print7printlnEPKc>
            wifiTest = false;
   b4faa:	2400      	movs	r4, #0
        WiFi.off();
   b4fac:	484e      	ldr	r0, [pc, #312]	; (b50e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
   b4fae:	f7ff f901 	bl	b41b4 <_ZN5spark9WiFiClass3offEv>
        if(wifiTest){
   b4fb2:	b164      	cbz	r4, b4fce <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4d2>
          txCharacteristic.setValue("Success!\n");
   b4fb4:	495c      	ldr	r1, [pc, #368]	; (b5128 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x62c>)
   b4fb6:	484e      	ldr	r0, [pc, #312]	; (b50f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   b4fb8:	2200      	movs	r2, #0
   b4fba:	f001 feec 	bl	b6d96 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
   b4fbe:	e6e0      	b.n	b4d82 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x286>
        while(WiFi.connecting() || !WiFi.ready()){
   b4fc0:	4620      	mov	r0, r4
   b4fc2:	f7ff f902 	bl	b41ca <_ZN5spark9WiFiClass5readyEv>
   b4fc6:	4604      	mov	r4, r0
   b4fc8:	2800      	cmp	r0, #0
   b4fca:	d0e9      	beq.n	b4fa0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4a4>
   b4fcc:	e7ee      	b.n	b4fac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4b0>
          txCharacteristic.setValue("ERROR: WiFi connection timeout\n");
   b4fce:	4957      	ldr	r1, [pc, #348]	; (b512c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x630>)
   b4fd0:	4847      	ldr	r0, [pc, #284]	; (b50f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   b4fd2:	4622      	mov	r2, r4
   b4fd4:	f001 fedf 	bl	b6d96 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
   b4fd8:	e71c      	b.n	b4e14 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x318>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b4fda:	4955      	ldr	r1, [pc, #340]	; (b5130 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x634>)
   b4fdc:	4850      	ldr	r0, [pc, #320]	; (b5120 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x624>)
   b4fde:	f003 fa1c 	bl	b841a <_ZNK6String6equalsEPKc>
      if(bleInputBuffer != ""){
   b4fe2:	4604      	mov	r4, r0
   b4fe4:	b998      	cbnz	r0, b500e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x512>
        EEPROM.put(0, dsid);
   b4fe6:	f004 f925 	bl	b9234 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b4fea:	4952      	ldr	r1, [pc, #328]	; (b5134 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x638>)
   b4fec:	2204      	movs	r2, #4
   b4fee:	4620      	mov	r0, r4
   b4ff0:	f001 f840 	bl	b6074 <HAL_EEPROM_Put>
        WITH_LOCK(Serial) {
   b4ff4:	f003 fefa 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4ff8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b4ffa:	f7ff f8a4 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
          Serial.println("dsid entered");
   b4ffe:	f003 fef5 	bl	b8dec <_Z16_fetch_usbserialv>
   b5002:	494d      	ldr	r1, [pc, #308]	; (b5138 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x63c>)
   b5004:	f002 ffed 	bl	b7fe2 <_ZN5Print7printlnEPKc>
        WITH_LOCK(Serial) {
   b5008:	a801      	add	r0, sp, #4
   b500a:	f7ff f947 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
      EEPROM.get(0, dsid);
   b500e:	f004 f911 	bl	b9234 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b5012:	2204      	movs	r2, #4
   b5014:	4947      	ldr	r1, [pc, #284]	; (b5134 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x638>)
   b5016:	4c49      	ldr	r4, [pc, #292]	; (b513c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x640>)
   b5018:	2000      	movs	r0, #0
   b501a:	f001 f823 	bl	b6064 <HAL_EEPROM_Get>
      Serial.println("dsid: " + dsid);
   b501e:	f003 fee5 	bl	b8dec <_Z16_fetch_usbserialv>
   b5022:	683b      	ldr	r3, [r7, #0]
   b5024:	4946      	ldr	r1, [pc, #280]	; (b5140 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x644>)
   b5026:	4419      	add	r1, r3
   b5028:	f002 ffdb 	bl	b7fe2 <_ZN5Print7printlnEPKc>
      EEPROM.get(100, recordingInterval);
   b502c:	f004 f902 	bl	b9234 <_Z21__fetch_global_EEPROMv>
   b5030:	2204      	movs	r2, #4
   b5032:	4621      	mov	r1, r4
   b5034:	2064      	movs	r0, #100	; 0x64
   b5036:	f001 f815 	bl	b6064 <HAL_EEPROM_Get>
      txCharacteristic.setValue("\nCurrent value for data collection interval is [");
   b503a:	4942      	ldr	r1, [pc, #264]	; (b5144 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x648>)
   b503c:	482c      	ldr	r0, [pc, #176]	; (b50f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   b503e:	2200      	movs	r2, #0
   b5040:	f001 fea9 	bl	b6d96 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(recordingInterval != -1){
   b5044:	6821      	ldr	r1, [r4, #0]
   b5046:	1c48      	adds	r0, r1, #1
   b5048:	d00b      	beq.n	b5062 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x566>
        txCharacteristic.setValue(String(recordingInterval));
   b504a:	220a      	movs	r2, #10
   b504c:	a801      	add	r0, sp, #4
   b504e:	f003 f95a 	bl	b8306 <_ZN6StringC1Eih>
   b5052:	4827      	ldr	r0, [pc, #156]	; (b50f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   b5054:	2200      	movs	r2, #0
   b5056:	a901      	add	r1, sp, #4
   b5058:	f001 fe98 	bl	b6d8c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b505c:	a801      	add	r0, sp, #4
   b505e:	f003 f8c7 	bl	b81f0 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between data collection as an integer in milliseconds (blank to skip): ");
   b5062:	4939      	ldr	r1, [pc, #228]	; (b5148 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64c>)
   b5064:	2200      	movs	r2, #0
   b5066:	e662      	b.n	b4d2e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x232>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5068:	4931      	ldr	r1, [pc, #196]	; (b5130 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x634>)
   b506a:	482d      	ldr	r0, [pc, #180]	; (b5120 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x624>)
   b506c:	f003 f9d5 	bl	b841a <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == ""){
   b5070:	b130      	cbz	r0, b5080 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x584>
        EEPROM.get(100, recordingInterval);
   b5072:	f004 f8df 	bl	b9234 <_Z21__fetch_global_EEPROMv>
   b5076:	4931      	ldr	r1, [pc, #196]	; (b513c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x640>)
   b5078:	2204      	movs	r2, #4
   b507a:	2064      	movs	r0, #100	; 0x64
   b507c:	f000 fff2 	bl	b6064 <HAL_EEPROM_Get>
      EEPROM.put(100, recordingInterval);
   b5080:	f004 f8d8 	bl	b9234 <_Z21__fetch_global_EEPROMv>
   b5084:	4c31      	ldr	r4, [pc, #196]	; (b514c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x650>)
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b5086:	492d      	ldr	r1, [pc, #180]	; (b513c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x640>)
   b5088:	2204      	movs	r2, #4
   b508a:	2064      	movs	r0, #100	; 0x64
   b508c:	f000 fff2 	bl	b6074 <HAL_EEPROM_Put>
      EEPROM.get(100, recordingInterval);
   b5090:	f004 f8d0 	bl	b9234 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b5094:	4929      	ldr	r1, [pc, #164]	; (b513c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x640>)
   b5096:	2204      	movs	r2, #4
   b5098:	2064      	movs	r0, #100	; 0x64
   b509a:	f000 ffe3 	bl	b6064 <HAL_EEPROM_Get>
      EEPROM.get(200, reportingInterval);
   b509e:	f004 f8c9 	bl	b9234 <_Z21__fetch_global_EEPROMv>
   b50a2:	2204      	movs	r2, #4
   b50a4:	4621      	mov	r1, r4
   b50a6:	20c8      	movs	r0, #200	; 0xc8
   b50a8:	f000 ffdc 	bl	b6064 <HAL_EEPROM_Get>
      txCharacteristic.setValue("\nCurrent value for WiFi connection interval is [");
   b50ac:	2200      	movs	r2, #0
   b50ae:	4928      	ldr	r1, [pc, #160]	; (b5150 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x654>)
   b50b0:	480f      	ldr	r0, [pc, #60]	; (b50f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   b50b2:	f001 fe70 	bl	b6d96 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      if(reportingInterval != -1){
   b50b6:	6823      	ldr	r3, [r4, #0]
   b50b8:	1c5a      	adds	r2, r3, #1
   b50ba:	d00f      	beq.n	b50dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e0>
        txCharacteristic.setValue(String(reportingInterval / 1000));
   b50bc:	220a      	movs	r2, #10
   b50be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b50c2:	a801      	add	r0, sp, #4
   b50c4:	fb93 f1f1 	sdiv	r1, r3, r1
   b50c8:	f003 f91d 	bl	b8306 <_ZN6StringC1Eih>
   b50cc:	4808      	ldr	r0, [pc, #32]	; (b50f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>)
   b50ce:	2200      	movs	r2, #0
   b50d0:	a901      	add	r1, sp, #4
   b50d2:	f001 fe5b 	bl	b6d8c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b50d6:	a801      	add	r0, sp, #4
   b50d8:	f003 f88a 	bl	b81f0 <_ZN6StringD1Ev>
      txCharacteristic.setValue("]\nEnter time between WiFi connections as an integer in seconds (blank to skip): ");
   b50dc:	491d      	ldr	r1, [pc, #116]	; (b5154 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x658>)
   b50de:	2200      	movs	r2, #0
   b50e0:	e625      	b.n	b4d2e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x232>
   b50e2:	bf00      	nop
   b50e4:	000b9fe7 	.word	0x000b9fe7
   b50e8:	2003e7c0 	.word	0x2003e7c0
   b50ec:	000b9f3d 	.word	0x000b9f3d
   b50f0:	2003e5f8 	.word	0x2003e5f8
   b50f4:	2003df2c 	.word	0x2003df2c
   b50f8:	2003df14 	.word	0x2003df14
   b50fc:	2003df28 	.word	0x2003df28
   b5100:	000b9fed 	.word	0x000b9fed
   b5104:	2003e040 	.word	0x2003e040
   b5108:	2003e0e4 	.word	0x2003e0e4
   b510c:	000ba007 	.word	0x000ba007
   b5110:	000ba025 	.word	0x000ba025
   b5114:	000ba031 	.word	0x000ba031
   b5118:	000ba034 	.word	0x000ba034
   b511c:	000ba068 	.word	0x000ba068
   b5120:	2003daac 	.word	0x2003daac
   b5124:	000ba06d 	.word	0x000ba06d
   b5128:	000ba075 	.word	0x000ba075
   b512c:	000ba07f 	.word	0x000ba07f
   b5130:	000ba033 	.word	0x000ba033
   b5134:	2003dac4 	.word	0x2003dac4
   b5138:	000ba09f 	.word	0x000ba09f
   b513c:	2003e070 	.word	0x2003e070
   b5140:	000ba0ac 	.word	0x000ba0ac
   b5144:	000ba0b3 	.word	0x000ba0b3
   b5148:	000ba0e4 	.word	0x000ba0e4
   b514c:	2003e074 	.word	0x2003e074
   b5150:	000ba139 	.word	0x000ba139
   b5154:	000ba16a 	.word	0x000ba16a
   b5158:	2003df24 	.word	0x2003df24
   b515c:	000b9f66 	.word	0x000b9f66
   b5160:	4945      	ldr	r1, [pc, #276]	; (b5278 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x77c>)
   b5162:	4846      	ldr	r0, [pc, #280]	; (b527c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x780>)
   b5164:	f003 f959 	bl	b841a <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == ""){
   b5168:	b130      	cbz	r0, b5178 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x67c>
        EEPROM.get(200, reportingInterval);
   b516a:	f004 f863 	bl	b9234 <_Z21__fetch_global_EEPROMv>
   b516e:	4944      	ldr	r1, [pc, #272]	; (b5280 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x784>)
   b5170:	2204      	movs	r2, #4
   b5172:	20c8      	movs	r0, #200	; 0xc8
   b5174:	f000 ff76 	bl	b6064 <HAL_EEPROM_Get>
      EEPROM.put(200, reportingInterval);
   b5178:	f004 f85c 	bl	b9234 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b517c:	4940      	ldr	r1, [pc, #256]	; (b5280 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x784>)
   b517e:	2204      	movs	r2, #4
   b5180:	20c8      	movs	r0, #200	; 0xc8
   b5182:	f000 ff77 	bl	b6074 <HAL_EEPROM_Put>
      EEPROM.get(200, reportingInterval);
   b5186:	f004 f855 	bl	b9234 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b518a:	493d      	ldr	r1, [pc, #244]	; (b5280 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x784>)
   b518c:	2204      	movs	r2, #4
   b518e:	20c8      	movs	r0, #200	; 0xc8
   b5190:	f000 ff68 	bl	b6064 <HAL_EEPROM_Get>
      WITH_LOCK(Serial) {
   b5194:	f003 fe2a 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5198:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b519a:	f7fe ffd4 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
        Serial.println(reportingInterval);
   b519e:	f003 fe25 	bl	b8dec <_Z16_fetch_usbserialv>
   b51a2:	6839      	ldr	r1, [r7, #0]
   b51a4:	220a      	movs	r2, #10
   b51a6:	f7fe ffb1 	bl	b410c <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
      WITH_LOCK(Serial) {
   b51aa:	a801      	add	r0, sp, #4
   b51ac:	f7ff f876 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
      txCharacteristic.setValue("\nEnter 'ota' to wait for OTA update (blank to skip): ");
   b51b0:	4934      	ldr	r1, [pc, #208]	; (b5284 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x788>)
   b51b2:	2200      	movs	r2, #0
   b51b4:	e5bb      	b.n	b4d2e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x232>
   b51b6:	4934      	ldr	r1, [pc, #208]	; (b5288 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78c>)
   b51b8:	4830      	ldr	r0, [pc, #192]	; (b527c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x780>)
   b51ba:	4c34      	ldr	r4, [pc, #208]	; (b528c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x790>)
   b51bc:	f003 f92d 	bl	b841a <_ZNK6String6equalsEPKc>
      if(bleInputBuffer == "ota"){
   b51c0:	b300      	cbz	r0, b5204 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x708>
        uint8_t value = 0;
   b51c2:	2200      	movs	r2, #0
        system_get_flag(flag, &value, nullptr);
   b51c4:	a901      	add	r1, sp, #4
   b51c6:	2001      	movs	r0, #1
        uint8_t value = 0;
   b51c8:	f88d 2004 	strb.w	r2, [sp, #4]
        system_get_flag(flag, &value, nullptr);
   b51cc:	f001 f952 	bl	b6474 <system_get_flag>
        waitingForOTA = true;
   b51d0:	2301      	movs	r3, #1
   b51d2:	7023      	strb	r3, [r4, #0]
        uint8_t value = 0;
   b51d4:	2400      	movs	r4, #0
        system_get_flag(flag, &value, nullptr);
   b51d6:	4622      	mov	r2, r4
   b51d8:	a901      	add	r1, sp, #4
   b51da:	2001      	movs	r0, #1
        uint8_t value = 0;
   b51dc:	f88d 4004 	strb.w	r4, [sp, #4]
        system_get_flag(flag, &value, nullptr);
   b51e0:	f001 f948 	bl	b6474 <system_get_flag>
        WiFi.on();
   b51e4:	482a      	ldr	r0, [pc, #168]	; (b5290 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x794>)
   b51e6:	f7fe ffdf 	bl	b41a8 <_ZN5spark9WiFiClass2onEv>
        WiFi.connect();
   b51ea:	4621      	mov	r1, r4
   b51ec:	4828      	ldr	r0, [pc, #160]	; (b5290 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x794>)
        while(!WiFi.ready()) {
   b51ee:	4c28      	ldr	r4, [pc, #160]	; (b5290 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x794>)
        WiFi.connect();
   b51f0:	f7fe ffe6 	bl	b41c0 <_ZN5spark9WiFiClass7connectEj>
        while(!WiFi.ready()) {
   b51f4:	4620      	mov	r0, r4
   b51f6:	f7fe ffe8 	bl	b41ca <_ZN5spark9WiFiClass5readyEv>
   b51fa:	b948      	cbnz	r0, b5210 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x714>
          delay(100);
   b51fc:	2064      	movs	r0, #100	; 0x64
   b51fe:	f001 fa5f 	bl	b66c0 <delay>
        while(!WiFi.ready()) {
   b5202:	e7f7      	b.n	b51f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6f8>
      if(waitingForOTA) {
   b5204:	7823      	ldrb	r3, [r4, #0]
   b5206:	2b00      	cmp	r3, #0
   b5208:	d1e4      	bne.n	b51d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6d8>
      System.reset();
   b520a:	f003 f980 	bl	b850e <_ZN11SystemClass5resetEv>
   b520e:	e591      	b.n	b4d34 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x238>
        if(WiFi.ready() != true) {
   b5210:	481f      	ldr	r0, [pc, #124]	; (b5290 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x794>)
   b5212:	f7fe ffda 	bl	b41ca <_ZN5spark9WiFiClass5readyEv>
   b5216:	b968      	cbnz	r0, b5234 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x738>
          WITH_LOCK(Serial) {
   b5218:	f003 fde8 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b521c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b521e:	f7fe ff92 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
            Serial.println("WiFi failed to connect, skipping time synchronization");
   b5222:	f003 fde3 	bl	b8dec <_Z16_fetch_usbserialv>
   b5226:	491b      	ldr	r1, [pc, #108]	; (b5294 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x798>)
   b5228:	f002 fedb 	bl	b7fe2 <_ZN5Print7printlnEPKc>
          WITH_LOCK(Serial) {
   b522c:	a801      	add	r0, sp, #4
   b522e:	f7ff f835 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
   b5232:	e7ea      	b.n	b520a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x70e>
          WITH_LOCK(Serial) {
   b5234:	f003 fdda 	bl	b8dec <_Z16_fetch_usbserialv>
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5238:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b523a:	f7fe ff84 	bl	b4146 <_ZN9USBSerial4lockEv.isra.0>
            Serial.println("WiFi connected, awaiting update");
   b523e:	f003 fdd5 	bl	b8dec <_Z16_fetch_usbserialv>
   b5242:	4915      	ldr	r1, [pc, #84]	; (b5298 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x79c>)
   b5244:	f002 fecd 	bl	b7fe2 <_ZN5Print7printlnEPKc>
          WITH_LOCK(Serial) {
   b5248:	a801      	add	r0, sp, #4
   b524a:	f7ff f827 	bl	b429c <_ZNSt10lock_guardIR9USBSerialED1Ev>
          txCharacteristic.setValue("\nAwaiting OTA update");
   b524e:	4913      	ldr	r1, [pc, #76]	; (b529c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7a0>)
   b5250:	4813      	ldr	r0, [pc, #76]	; (b52a0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7a4>)
   b5252:	2200      	movs	r2, #0
   b5254:	f001 fd9f 	bl	b6d96 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        spark_cloud_flag_connect();
   b5258:	f001 f942 	bl	b64e0 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b525c:	f001 f948 	bl	b64f0 <spark_cloud_flag_connected>
          while(!Particle.connected()) {
   b5260:	b130      	cbz	r0, b5270 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x774>
   b5262:	4c10      	ldr	r4, [pc, #64]	; (b52a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7a8>)
		return HAL_Timer_Get_Milli_Seconds();
   b5264:	f000 feee 	bl	b6044 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b5268:	6020      	str	r0, [r4, #0]
    		spark_process();
   b526a:	f001 f931 	bl	b64d0 <spark_process>
   b526e:	e7f9      	b.n	b5264 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x768>
            delay(100);
   b5270:	2064      	movs	r0, #100	; 0x64
   b5272:	f001 fa25 	bl	b66c0 <delay>
          while(!Particle.connected()) {
   b5276:	e7f1      	b.n	b525c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x760>
   b5278:	000ba033 	.word	0x000ba033
   b527c:	2003daac 	.word	0x2003daac
   b5280:	2003e074 	.word	0x2003e074
   b5284:	000ba1bb 	.word	0x000ba1bb
   b5288:	000ba1f1 	.word	0x000ba1f1
   b528c:	2003e610 	.word	0x2003e610
   b5290:	2003e7c0 	.word	0x2003e7c0
   b5294:	000b9e38 	.word	0x000b9e38
   b5298:	000ba1f5 	.word	0x000ba1f5
   b529c:	000ba215 	.word	0x000ba215
   b52a0:	2003e5f8 	.word	0x2003e5f8
   b52a4:	2003e7d0 	.word	0x2003e7d0

000b52a8 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b52a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b52aa:	4616      	mov	r6, r2
   b52ac:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b52ae:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b52b0:	e9c0 2200 	strd	r2, r2, [r0]
   b52b4:	4604      	mov	r4, r0
   b52b6:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   b52b8:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   b52ba:	4619      	mov	r1, r3
   b52bc:	a806      	add	r0, sp, #24
   b52be:	f001 fba5 	bl	b6a0c <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   b52c2:	9916      	ldr	r1, [sp, #88]	; 0x58
   b52c4:	4638      	mov	r0, r7
   b52c6:	f001 fba1 	bl	b6a0c <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   b52ca:	7833      	ldrb	r3, [r6, #0]
   b52cc:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b52d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b52d2:	9302      	str	r3, [sp, #8]
   b52d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b52d6:	4620      	mov	r0, r4
   b52d8:	e9cd 7300 	strd	r7, r3, [sp]
   b52dc:	aa05      	add	r2, sp, #20
   b52de:	ab06      	add	r3, sp, #24
   b52e0:	4629      	mov	r1, r5
   b52e2:	f002 f9a7 	bl	b7634 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b52e6:	4620      	mov	r0, r4
   b52e8:	b011      	add	sp, #68	; 0x44
   b52ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b52ec <_ZN15Adafruit_LIS3DHD0Ev>:
   b52ec:	b510      	push	{r4, lr}
   b52ee:	212c      	movs	r1, #44	; 0x2c
   b52f0:	4604      	mov	r4, r0
   b52f2:	f003 fff8 	bl	b92e6 <_ZdlPvj>
   b52f6:	4620      	mov	r0, r4
   b52f8:	bd10      	pop	{r4, pc}
	...

000b52fc <_GLOBAL__sub_I_SystemMode>:
}
   b52fc:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
   b52fe:	4c63      	ldr	r4, [pc, #396]	; (b548c <_GLOBAL__sub_I_SystemMode+0x190>)
    SleepResult() {}
   b5300:	4b63      	ldr	r3, [pc, #396]	; (b5490 <_GLOBAL__sub_I_SystemMode+0x194>)
   b5302:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5304:	2500      	movs	r5, #0
   b5306:	b090      	sub	sp, #64	; 0x40
   b5308:	e9c4 5500 	strd	r5, r5, [r4]
        set_system_mode(mode);
   b530c:	2003      	movs	r0, #3
   b530e:	f001 f889 	bl	b6424 <set_system_mode>
SYSTEM_MODE(MANUAL)
   b5312:	4a60      	ldr	r2, [pc, #384]	; (b5494 <_GLOBAL__sub_I_SystemMode+0x198>)
   b5314:	4960      	ldr	r1, [pc, #384]	; (b5498 <_GLOBAL__sub_I_SystemMode+0x19c>)
   b5316:	4620      	mov	r0, r4
   b5318:	f003 ffe0 	bl	b92dc <__aeabi_atexit>
SYSTEM_THREAD(ENABLED)
   b531c:	4629      	mov	r1, r5
   b531e:	2001      	movs	r0, #1
   b5320:	f001 f890 	bl	b6444 <system_thread_set_state>
HttpClient http;
   b5324:	485d      	ldr	r0, [pc, #372]	; (b549c <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b5326:	4d5e      	ldr	r5, [pc, #376]	; (b54a0 <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b5328:	f000 fb65 	bl	b59f6 <_ZN10HttpClientC1Ev>
   b532c:	4a59      	ldr	r2, [pc, #356]	; (b5494 <_GLOBAL__sub_I_SystemMode+0x198>)
   b532e:	495d      	ldr	r1, [pc, #372]	; (b54a4 <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b5330:	485a      	ldr	r0, [pc, #360]	; (b549c <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b5332:	f003 ffd3 	bl	b92dc <__aeabi_atexit>
} http_request_t;
   b5336:	495c      	ldr	r1, [pc, #368]	; (b54a8 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b5338:	485c      	ldr	r0, [pc, #368]	; (b54ac <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b533a:	f002 ffa4 	bl	b8286 <_ZN6StringC1EPK19__FlashStringHelper>
   b533e:	485c      	ldr	r0, [pc, #368]	; (b54b0 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b5340:	f002 fd00 	bl	b7d44 <_ZN9IPAddressC1Ev>
   b5344:	4958      	ldr	r1, [pc, #352]	; (b54a8 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b5346:	485b      	ldr	r0, [pc, #364]	; (b54b4 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b5348:	f002 ff9d 	bl	b8286 <_ZN6StringC1EPK19__FlashStringHelper>
   b534c:	4956      	ldr	r1, [pc, #344]	; (b54a8 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b534e:	485a      	ldr	r0, [pc, #360]	; (b54b8 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b5350:	f002 ff99 	bl	b8286 <_ZN6StringC1EPK19__FlashStringHelper>
http_request_t request;
   b5354:	4a4f      	ldr	r2, [pc, #316]	; (b5494 <_GLOBAL__sub_I_SystemMode+0x198>)
   b5356:	4959      	ldr	r1, [pc, #356]	; (b54bc <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b5358:	4854      	ldr	r0, [pc, #336]	; (b54ac <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b535a:	f003 ffbf 	bl	b92dc <__aeabi_atexit>
} http_response_t;
   b535e:	4952      	ldr	r1, [pc, #328]	; (b54a8 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b5360:	4857      	ldr	r0, [pc, #348]	; (b54c0 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5362:	f002 ff90 	bl	b8286 <_ZN6StringC1EPK19__FlashStringHelper>
http_response_t response;
   b5366:	4a4b      	ldr	r2, [pc, #300]	; (b5494 <_GLOBAL__sub_I_SystemMode+0x198>)
   b5368:	4956      	ldr	r1, [pc, #344]	; (b54c4 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   b536a:	4857      	ldr	r0, [pc, #348]	; (b54c8 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b536c:	f003 ffb6 	bl	b92dc <__aeabi_atexit>
   b5370:	2405      	movs	r4, #5
#ifdef __cplusplus

   WiFiAccessPoint()
   {
       memset(this, 0, sizeof(*this));
       size = sizeof(*this);
   b5372:	2638      	movs	r6, #56	; 0x38
       memset(this, 0, sizeof(*this));
   b5374:	1d28      	adds	r0, r5, #4
   b5376:	2234      	movs	r2, #52	; 0x34
   b5378:	2100      	movs	r1, #0
   b537a:	f004 fb95 	bl	b9aa8 <memset>
WiFiAccessPoint networks[5];
   b537e:	3c01      	subs	r4, #1
       size = sizeof(*this);
   b5380:	f845 6b38 	str.w	r6, [r5], #56
   b5384:	d1f6      	bne.n	b5374 <_GLOBAL__sub_I_SystemMode+0x78>
String networkBuffer;
   b5386:	4948      	ldr	r1, [pc, #288]	; (b54a8 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b5388:	4850      	ldr	r0, [pc, #320]	; (b54cc <_GLOBAL__sub_I_SystemMode+0x1d0>)
   b538a:	f002 ff7c 	bl	b8286 <_ZN6StringC1EPK19__FlashStringHelper>
   b538e:	4a41      	ldr	r2, [pc, #260]	; (b5494 <_GLOBAL__sub_I_SystemMode+0x198>)
   b5390:	494f      	ldr	r1, [pc, #316]	; (b54d0 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b5392:	484e      	ldr	r0, [pc, #312]	; (b54cc <_GLOBAL__sub_I_SystemMode+0x1d0>)
   b5394:	f003 ffa2 	bl	b92dc <__aeabi_atexit>
#pragma once

int recordingInterval; // interval between lis3dh reads
int reportingInterval; // interval between reporting data to server in seconds
String payload = "";
   b5398:	4943      	ldr	r1, [pc, #268]	; (b54a8 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b539a:	484e      	ldr	r0, [pc, #312]	; (b54d4 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b539c:	f002 ff73 	bl	b8286 <_ZN6StringC1EPK19__FlashStringHelper>
   b53a0:	4a3c      	ldr	r2, [pc, #240]	; (b5494 <_GLOBAL__sub_I_SystemMode+0x198>)
   b53a2:	494b      	ldr	r1, [pc, #300]	; (b54d0 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b53a4:	484b      	ldr	r0, [pc, #300]	; (b54d4 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b53a6:	f003 ff99 	bl	b92dc <__aeabi_atexit>
bool valuesChanged = false;
String unixTime;
   b53aa:	493f      	ldr	r1, [pc, #252]	; (b54a8 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b53ac:	484a      	ldr	r0, [pc, #296]	; (b54d8 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b53ae:	f002 ff6a 	bl	b8286 <_ZN6StringC1EPK19__FlashStringHelper>
   b53b2:	4a38      	ldr	r2, [pc, #224]	; (b5494 <_GLOBAL__sub_I_SystemMode+0x198>)
   b53b4:	4946      	ldr	r1, [pc, #280]	; (b54d0 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b53b6:	4848      	ldr	r0, [pc, #288]	; (b54d8 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b53b8:	f003 ff90 	bl	b92dc <__aeabi_atexit>
String ssid, password = "";
   b53bc:	493a      	ldr	r1, [pc, #232]	; (b54a8 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b53be:	4847      	ldr	r0, [pc, #284]	; (b54dc <_GLOBAL__sub_I_SystemMode+0x1e0>)
   b53c0:	f002 ff61 	bl	b8286 <_ZN6StringC1EPK19__FlashStringHelper>
   b53c4:	4a33      	ldr	r2, [pc, #204]	; (b5494 <_GLOBAL__sub_I_SystemMode+0x198>)
   b53c6:	4942      	ldr	r1, [pc, #264]	; (b54d0 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b53c8:	4844      	ldr	r0, [pc, #272]	; (b54dc <_GLOBAL__sub_I_SystemMode+0x1e0>)
   b53ca:	f003 ff87 	bl	b92dc <__aeabi_atexit>
   b53ce:	4936      	ldr	r1, [pc, #216]	; (b54a8 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b53d0:	4843      	ldr	r0, [pc, #268]	; (b54e0 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b53d2:	f002 ff58 	bl	b8286 <_ZN6StringC1EPK19__FlashStringHelper>
   b53d6:	4a2f      	ldr	r2, [pc, #188]	; (b5494 <_GLOBAL__sub_I_SystemMode+0x198>)
   b53d8:	493d      	ldr	r1, [pc, #244]	; (b54d0 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b53da:	4841      	ldr	r0, [pc, #260]	; (b54e0 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b53dc:	f003 ff7e 	bl	b92dc <__aeabi_atexit>
  RECORDING,
  SENDING
};
uint8_t firmwareState = BLEWAIT;
bool bleWaitForConfig = false; //when true, firmware is waiting for user input over BLE b/c BLE was connected
String bleInputBuffer; // buffer for reading from BLE and writing to EEPROM
   b53e0:	4931      	ldr	r1, [pc, #196]	; (b54a8 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b53e2:	4840      	ldr	r0, [pc, #256]	; (b54e4 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   b53e4:	f002 ff4f 	bl	b8286 <_ZN6StringC1EPK19__FlashStringHelper>
   b53e8:	4a2a      	ldr	r2, [pc, #168]	; (b5494 <_GLOBAL__sub_I_SystemMode+0x198>)
   b53ea:	4939      	ldr	r1, [pc, #228]	; (b54d0 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b53ec:	483d      	ldr	r0, [pc, #244]	; (b54e4 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   b53ee:	f003 ff75 	bl	b92dc <__aeabi_atexit>
bool waitingForOTA = false;
os_thread_t reportingThreadHandle;
os_mutex_t payloadAccessLock;


const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b53f2:	493d      	ldr	r1, [pc, #244]	; (b54e8 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b53f4:	483d      	ldr	r0, [pc, #244]	; (b54ec <_GLOBAL__sub_I_SystemMode+0x1f0>)
   b53f6:	f001 fbed 	bl	b6bd4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b53fa:	493d      	ldr	r1, [pc, #244]	; (b54f0 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   b53fc:	483d      	ldr	r0, [pc, #244]	; (b54f4 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b53fe:	f001 fbe9 	bl	b6bd4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b5402:	493d      	ldr	r1, [pc, #244]	; (b54f8 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   b5404:	483d      	ldr	r0, [pc, #244]	; (b54fc <_GLOBAL__sub_I_SystemMode+0x200>)
   b5406:	f001 fbe5 	bl	b6bd4 <_ZN8particle7BleUuidC1EPKc>
Adafruit_LIS3DH lis3dh = Adafruit_LIS3DH();
   b540a:	483d      	ldr	r0, [pc, #244]	; (b5500 <_GLOBAL__sub_I_SystemMode+0x204>)
   b540c:	f000 f8a0 	bl	b5550 <_ZN15Adafruit_LIS3DHC1Ev>
   b5410:	4a20      	ldr	r2, [pc, #128]	; (b5494 <_GLOBAL__sub_I_SystemMode+0x198>)
   b5412:	493c      	ldr	r1, [pc, #240]	; (b5504 <_GLOBAL__sub_I_SystemMode+0x208>)
   b5414:	483a      	ldr	r0, [pc, #232]	; (b5500 <_GLOBAL__sub_I_SystemMode+0x204>)
   b5416:	f003 ff61 	bl	b92dc <__aeabi_atexit>
    value_ = static_cast<ValueType>(value);
   b541a:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b541c:	4937      	ldr	r1, [pc, #220]	; (b54fc <_GLOBAL__sub_I_SystemMode+0x200>)
   b541e:	f88d 3014 	strb.w	r3, [sp, #20]
   b5422:	a806      	add	r0, sp, #24
   b5424:	f001 faf2 	bl	b6a0c <_ZN8particle7BleUuidC1ERKS0_>
   b5428:	4930      	ldr	r1, [pc, #192]	; (b54ec <_GLOBAL__sub_I_SystemMode+0x1f0>)
   b542a:	a80b      	add	r0, sp, #44	; 0x2c
   b542c:	f001 faee 	bl	b6a0c <_ZN8particle7BleUuidC1ERKS0_>
   b5430:	ab0b      	add	r3, sp, #44	; 0x2c
   b5432:	9300      	str	r3, [sp, #0]
   b5434:	aa05      	add	r2, sp, #20
   b5436:	ab06      	add	r3, sp, #24
   b5438:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b543c:	4932      	ldr	r1, [pc, #200]	; (b5508 <_GLOBAL__sub_I_SystemMode+0x20c>)
   b543e:	4833      	ldr	r0, [pc, #204]	; (b550c <_GLOBAL__sub_I_SystemMode+0x210>)
   b5440:	f7ff ff32 	bl	b52a8 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b5444:	4a13      	ldr	r2, [pc, #76]	; (b5494 <_GLOBAL__sub_I_SystemMode+0x198>)
   b5446:	4932      	ldr	r1, [pc, #200]	; (b5510 <_GLOBAL__sub_I_SystemMode+0x214>)
   b5448:	4830      	ldr	r0, [pc, #192]	; (b550c <_GLOBAL__sub_I_SystemMode+0x210>)
   b544a:	f003 ff47 	bl	b92dc <__aeabi_atexit>
   b544e:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b5450:	4928      	ldr	r1, [pc, #160]	; (b54f4 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b5452:	f88d 3014 	strb.w	r3, [sp, #20]
   b5456:	a806      	add	r0, sp, #24
   b5458:	f001 fad8 	bl	b6a0c <_ZN8particle7BleUuidC1ERKS0_>
   b545c:	4923      	ldr	r1, [pc, #140]	; (b54ec <_GLOBAL__sub_I_SystemMode+0x1f0>)
   b545e:	a80b      	add	r0, sp, #44	; 0x2c
   b5460:	f001 fad4 	bl	b6a0c <_ZN8particle7BleUuidC1ERKS0_>
   b5464:	4b2b      	ldr	r3, [pc, #172]	; (b5514 <_GLOBAL__sub_I_SystemMode+0x218>)
   b5466:	9301      	str	r3, [sp, #4]
   b5468:	ab0b      	add	r3, sp, #44	; 0x2c
   b546a:	9300      	str	r3, [sp, #0]
   b546c:	aa05      	add	r2, sp, #20
   b546e:	492a      	ldr	r1, [pc, #168]	; (b5518 <_GLOBAL__sub_I_SystemMode+0x21c>)
   b5470:	9402      	str	r4, [sp, #8]
   b5472:	ab06      	add	r3, sp, #24
   b5474:	4829      	ldr	r0, [pc, #164]	; (b551c <_GLOBAL__sub_I_SystemMode+0x220>)
   b5476:	f7ff ff17 	bl	b52a8 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b547a:	4a06      	ldr	r2, [pc, #24]	; (b5494 <_GLOBAL__sub_I_SystemMode+0x198>)
   b547c:	4924      	ldr	r1, [pc, #144]	; (b5510 <_GLOBAL__sub_I_SystemMode+0x214>)
   b547e:	4827      	ldr	r0, [pc, #156]	; (b551c <_GLOBAL__sub_I_SystemMode+0x220>)
}
   b5480:	b010      	add	sp, #64	; 0x40
   b5482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5486:	f003 bf29 	b.w	b92dc <__aeabi_atexit>
   b548a:	bf00      	nop
   b548c:	2003da64 	.word	0x2003da64
   b5490:	ffff0000 	.word	0xffff0000
   b5494:	2003da60 	.word	0x2003da60
   b5498:	000b40df 	.word	0x000b40df
   b549c:	2003dacc 	.word	0x2003dacc
   b54a0:	2003df28 	.word	0x2003df28
   b54a4:	000b4159 	.word	0x000b4159
   b54a8:	000ba033 	.word	0x000ba033
   b54ac:	2003e07c 	.word	0x2003e07c
   b54b0:	2003e08c 	.word	0x2003e08c
   b54b4:	2003e0a4 	.word	0x2003e0a4
   b54b8:	2003e0b8 	.word	0x2003e0b8
   b54bc:	000b40c3 	.word	0x000b40c3
   b54c0:	2003e0cc 	.word	0x2003e0cc
   b54c4:	000b40b5 	.word	0x000b40b5
   b54c8:	2003e0c8 	.word	0x2003e0c8
   b54cc:	2003df14 	.word	0x2003df14
   b54d0:	000b81f1 	.word	0x000b81f1
   b54d4:	2003e050 	.word	0x2003e050
   b54d8:	2003e600 	.word	0x2003e600
   b54dc:	2003e0e4 	.word	0x2003e0e4
   b54e0:	2003e040 	.word	0x2003e040
   b54e4:	2003daac 	.word	0x2003daac
   b54e8:	000ba22a 	.word	0x000ba22a
   b54ec:	2003da70 	.word	0x2003da70
   b54f0:	000ba24f 	.word	0x000ba24f
   b54f4:	2003da84 	.word	0x2003da84
   b54f8:	000ba274 	.word	0x000ba274
   b54fc:	2003da98 	.word	0x2003da98
   b5500:	2003dee8 	.word	0x2003dee8
   b5504:	000b40b3 	.word	0x000b40b3
   b5508:	000ba299 	.word	0x000ba299
   b550c:	2003e5f8 	.word	0x2003e5f8
   b5510:	000b7103 	.word	0x000b7103
   b5514:	000b4afd 	.word	0x000b4afd
   b5518:	000ba29c 	.word	0x000ba29c
   b551c:	2003e0dc 	.word	0x2003e0dc

000b5520 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b5520:	4770      	bx	lr
	...

000b5524 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   b5524:	b538      	push	{r3, r4, r5, lr}
   b5526:	460c      	mov	r4, r1
   b5528:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b552a:	2220      	movs	r2, #32
   b552c:	2100      	movs	r1, #0
   b552e:	f104 0008 	add.w	r0, r4, #8
   b5532:	f004 fab9 	bl	b9aa8 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   b5536:	220b      	movs	r2, #11
   b5538:	4904      	ldr	r1, [pc, #16]	; (b554c <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x28>)
   b553a:	4620      	mov	r0, r4
   b553c:	f004 fb04 	bl	b9b48 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
   b5540:	2301      	movs	r3, #1
   b5542:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id   = _sensorID;
   b5544:	69aa      	ldr	r2, [r5, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   b5546:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sensor->min_delay   = 0;
  sensor->max_value   = 0;
  sensor->min_value   = 0;
  sensor->resolution  = 0;
}
   b554a:	bd38      	pop	{r3, r4, r5, pc}
   b554c:	000b9df3 	.word	0x000b9df3

000b5550 <_ZN15Adafruit_LIS3DHC1Ev>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   b5550:	4a06      	ldr	r2, [pc, #24]	; (b556c <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   b5552:	6002      	str	r2, [r0, #0]
   b5554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5558:	6182      	str	r2, [r0, #24]
   b555a:	7742      	strb	r2, [r0, #29]
   b555c:	83c2      	strh	r2, [r0, #30]
   b555e:	22ff      	movs	r2, #255	; 0xff
   b5560:	f880 2020 	strb.w	r2, [r0, #32]
   b5564:	2208      	movs	r2, #8
   b5566:	6242      	str	r2, [r0, #36]	; 0x24
}
   b5568:	4770      	bx	lr
   b556a:	bf00      	nop
   b556c:	000ba2cc 	.word	0x000ba2cc

000b5570 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5570:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5572:	4c0b      	ldr	r4, [pc, #44]	; (b55a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5574:	7821      	ldrb	r1, [r4, #0]
   b5576:	f3bf 8f5b 	dmb	ish
   b557a:	f011 0101 	ands.w	r1, r1, #1
   b557e:	d10b      	bne.n	b5598 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5580:	4620      	mov	r0, r4
   b5582:	9101      	str	r1, [sp, #4]
   b5584:	f7fe fd8d 	bl	b40a2 <__cxa_guard_acquire>
   b5588:	9901      	ldr	r1, [sp, #4]
   b558a:	b128      	cbz	r0, b5598 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b558c:	4805      	ldr	r0, [pc, #20]	; (b55a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b558e:	f002 fd9b 	bl	b80c8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5592:	4620      	mov	r0, r4
   b5594:	f7fe fd8a 	bl	b40ac <__cxa_guard_release>
        return instance;
    }
   b5598:	4802      	ldr	r0, [pc, #8]	; (b55a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b559a:	b002      	add	sp, #8
   b559c:	bd10      	pop	{r4, pc}
   b559e:	bf00      	nop
   b55a0:	2003e620 	.word	0x2003e620
   b55a4:	2003e624 	.word	0x2003e624

000b55a8 <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   b55a8:	b508      	push	{r3, lr}
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   b55aa:	f7ff ffe1 	bl	b5570 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b55ae:	2101      	movs	r1, #1
   b55b0:	f002 fda8 	bl	b8104 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b55b4:	f7ff ffdc 	bl	b5570 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b55b8:	4905      	ldr	r1, [pc, #20]	; (b55d0 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   b55ba:	2201      	movs	r2, #1
   b55bc:	f002 fde0 	bl	b8180 <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
   b55c0:	f7ff ffd6 	bl	b5570 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   b55c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b55c8:	2100      	movs	r1, #0
   b55ca:	f002 bdaf 	b.w	b812c <_ZN8SPIClass11setDataModeEh>
   b55ce:	bf00      	nop
   b55d0:	0007a120 	.word	0x0007a120

000b55d4 <_ZN15Adafruit_LIS3DH7spixferEh>:
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   b55d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_sck == -1)
   b55d8:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b55dc:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   b55de:	4605      	mov	r5, r0
   b55e0:	460f      	mov	r7, r1
  if (_sck == -1)
   b55e2:	d106      	bne.n	b55f2 <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b55e4:	f7ff ffc4 	bl	b5570 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b55e8:	4639      	mov	r1, r7
}
   b55ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b55ee:	f002 bdf9 	b.w	b81e4 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   b55f2:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   b55f4:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   b55f6:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   b55fa:	f995 0020 	ldrsb.w	r0, [r5, #32]
   b55fe:	2100      	movs	r1, #0
   b5600:	b280      	uxth	r0, r0
   b5602:	f003 fdea 	bl	b91da <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   b5606:	f995 001e 	ldrsb.w	r0, [r5, #30]
   b560a:	fa08 f106 	lsl.w	r1, r8, r6
   b560e:	4039      	ands	r1, r7
   b5610:	b280      	uxth	r0, r0
   b5612:	f003 fde2 	bl	b91da <digitalWrite>
    digitalWrite(_sck, HIGH);
   b5616:	f995 0020 	ldrsb.w	r0, [r5, #32]
   b561a:	2101      	movs	r1, #1
   b561c:	b280      	uxth	r0, r0
   b561e:	f003 fddc 	bl	b91da <digitalWrite>
    if (digitalRead(_miso))
   b5622:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
   b5626:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   b5628:	b280      	uxth	r0, r0
    reply <<= 1;
   b562a:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   b562c:	f003 fdee 	bl	b920c <digitalRead>
   b5630:	b108      	cbz	r0, b5636 <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   b5632:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   b5636:	3e01      	subs	r6, #1
   b5638:	d2df      	bcs.n	b55fa <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
   b563a:	4620      	mov	r0, r4
   b563c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5640 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   b5640:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   b5642:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5646:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   b5648:	4604      	mov	r4, r0
   b564a:	460e      	mov	r6, r1
   b564c:	4615      	mov	r5, r2
  if (_cs == -1) {
   b564e:	d116      	bne.n	b567e <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   b5650:	f003 fe1c 	bl	b928c <_Z19__fetch_global_Wirev>
   b5654:	7f21      	ldrb	r1, [r4, #28]
   b5656:	f002 fb2d 	bl	b7cb4 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   b565a:	f003 fe17 	bl	b928c <_Z19__fetch_global_Wirev>
   b565e:	6803      	ldr	r3, [r0, #0]
   b5660:	4631      	mov	r1, r6
   b5662:	689b      	ldr	r3, [r3, #8]
   b5664:	4798      	blx	r3
    Wire.write((uint8_t)value);
   b5666:	f003 fe11 	bl	b928c <_Z19__fetch_global_Wirev>
   b566a:	6803      	ldr	r3, [r0, #0]
   b566c:	4629      	mov	r1, r5
   b566e:	689b      	ldr	r3, [r3, #8]
   b5670:	4798      	blx	r3
    Wire.endTransmission();
   b5672:	f003 fe0b 	bl	b928c <_Z19__fetch_global_Wirev>
}
   b5676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   b567a:	f002 bb26 	b.w	b7cca <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
   b567e:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b5682:	3301      	adds	r3, #1
   b5684:	d101      	bne.n	b568a <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   b5686:	f7ff ff8f 	bl	b55a8 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   b568a:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b568e:	2100      	movs	r1, #0
   b5690:	b280      	uxth	r0, r0
   b5692:	f003 fda2 	bl	b91da <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   b5696:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b569a:	4620      	mov	r0, r4
   b569c:	f7ff ff9a 	bl	b55d4 <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   b56a0:	4629      	mov	r1, r5
   b56a2:	4620      	mov	r0, r4
   b56a4:	f7ff ff96 	bl	b55d4 <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   b56a8:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b56ac:	2101      	movs	r1, #1
}
   b56ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   b56b2:	b280      	uxth	r0, r0
   b56b4:	f003 bd91 	b.w	b91da <digitalWrite>

000b56b8 <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   b56b8:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   b56ba:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b56be:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   b56c0:	4604      	mov	r4, r0
   b56c2:	460d      	mov	r5, r1
  if (_cs == -1) {
   b56c4:	d11d      	bne.n	b5702 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   b56c6:	f003 fde1 	bl	b928c <_Z19__fetch_global_Wirev>
   b56ca:	f994 101c 	ldrsb.w	r1, [r4, #28]
   b56ce:	f002 faf5 	bl	b7cbc <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   b56d2:	f003 fddb 	bl	b928c <_Z19__fetch_global_Wirev>
   b56d6:	6803      	ldr	r3, [r0, #0]
   b56d8:	4629      	mov	r1, r5
   b56da:	689b      	ldr	r3, [r3, #8]
   b56dc:	4798      	blx	r3
    Wire.endTransmission();
   b56de:	f003 fdd5 	bl	b928c <_Z19__fetch_global_Wirev>
   b56e2:	f002 faf2 	bl	b7cca <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
   b56e6:	f003 fdd1 	bl	b928c <_Z19__fetch_global_Wirev>
   b56ea:	7f21      	ldrb	r1, [r4, #28]
   b56ec:	2201      	movs	r2, #1
   b56ee:	f002 fade 	bl	b7cae <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   b56f2:	f003 fdcb 	bl	b928c <_Z19__fetch_global_Wirev>
   b56f6:	6803      	ldr	r3, [r0, #0]
   b56f8:	695b      	ldr	r3, [r3, #20]
   b56fa:	4798      	blx	r3
   b56fc:	b2c5      	uxtb	r5, r0
}
   b56fe:	4628      	mov	r0, r5
   b5700:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
   b5702:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b5706:	3301      	adds	r3, #1
   b5708:	d101      	bne.n	b570e <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   b570a:	f7ff ff4d 	bl	b55a8 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
   b570e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5712:	2100      	movs	r1, #0
   b5714:	b280      	uxth	r0, r0
   b5716:	f003 fd60 	bl	b91da <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   b571a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b571e:	4620      	mov	r0, r4
   b5720:	f7ff ff58 	bl	b55d4 <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   b5724:	2100      	movs	r1, #0
   b5726:	4620      	mov	r0, r4
   b5728:	f7ff ff54 	bl	b55d4 <_ZN15Adafruit_LIS3DH7spixferEh>
   b572c:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   b572e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5732:	2101      	movs	r1, #1
   b5734:	b280      	uxth	r0, r0
   b5736:	f003 fd50 	bl	b91da <digitalWrite>
    if (_sck == -1)
   b573a:	e7e0      	b.n	b56fe <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

000b573c <_ZN15Adafruit_LIS3DH8getRangeEv>:
{
   b573c:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   b573e:	2123      	movs	r1, #35	; 0x23
   b5740:	f7ff ffba 	bl	b56b8 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   b5744:	f3c0 1001 	ubfx	r0, r0, #4, #2
   b5748:	bd08      	pop	{r3, pc}

000b574a <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
   b574a:	b538      	push	{r3, r4, r5, lr}
   b574c:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   b574e:	2120      	movs	r1, #32
{
   b5750:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   b5752:	f7ff ffb1 	bl	b56b8 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
   b5756:	f000 030f 	and.w	r3, r0, #15
  ctl1 |= (dataRate << 4);
   b575a:	ea43 1205 	orr.w	r2, r3, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   b575e:	4620      	mov	r0, r4
   b5760:	b2d2      	uxtb	r2, r2
}
   b5762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   b5766:	2120      	movs	r1, #32
   b5768:	f7ff bf6a 	b.w	b5640 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000b576c <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
   b576c:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   b576e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5772:	3301      	adds	r3, #1
void Adafruit_LIS3DH::read(void) {
   b5774:	4604      	mov	r4, r0
  if (_cs == -1) {
   b5776:	d177      	bne.n	b5868 <_ZN15Adafruit_LIS3DH4readEv+0xfc>
    Wire.beginTransmission(_i2caddr);
   b5778:	f003 fd88 	bl	b928c <_Z19__fetch_global_Wirev>
   b577c:	f994 101c 	ldrsb.w	r1, [r4, #28]
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   b5780:	4d5d      	ldr	r5, [pc, #372]	; (b58f8 <_ZN15Adafruit_LIS3DH4readEv+0x18c>)
    Wire.beginTransmission(_i2caddr);
   b5782:	f002 fa9b 	bl	b7cbc <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   b5786:	f003 fd81 	bl	b928c <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b578a:	6803      	ldr	r3, [r0, #0]
   b578c:	21a8      	movs	r1, #168	; 0xa8
   b578e:	689b      	ldr	r3, [r3, #8]
   b5790:	4798      	blx	r3
    Wire.endTransmission();
   b5792:	f003 fd7b 	bl	b928c <_Z19__fetch_global_Wirev>
   b5796:	f002 fa98 	bl	b7cca <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
   b579a:	f003 fd77 	bl	b928c <_Z19__fetch_global_Wirev>
   b579e:	7f21      	ldrb	r1, [r4, #28]
   b57a0:	2206      	movs	r2, #6
   b57a2:	f002 fa84 	bl	b7cae <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   b57a6:	f003 fd71 	bl	b928c <_Z19__fetch_global_Wirev>
   b57aa:	6803      	ldr	r3, [r0, #0]
   b57ac:	695b      	ldr	r3, [r3, #20]
   b57ae:	4798      	blx	r3
   b57b0:	80e0      	strh	r0, [r4, #6]
   b57b2:	f003 fd6b 	bl	b928c <_Z19__fetch_global_Wirev>
   b57b6:	6803      	ldr	r3, [r0, #0]
   b57b8:	695b      	ldr	r3, [r3, #20]
   b57ba:	4798      	blx	r3
   b57bc:	88e3      	ldrh	r3, [r4, #6]
   b57be:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b57c2:	4318      	orrs	r0, r3
   b57c4:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   b57c6:	f003 fd61 	bl	b928c <_Z19__fetch_global_Wirev>
   b57ca:	6803      	ldr	r3, [r0, #0]
   b57cc:	695b      	ldr	r3, [r3, #20]
   b57ce:	4798      	blx	r3
   b57d0:	8120      	strh	r0, [r4, #8]
   b57d2:	f003 fd5b 	bl	b928c <_Z19__fetch_global_Wirev>
   b57d6:	6803      	ldr	r3, [r0, #0]
   b57d8:	695b      	ldr	r3, [r3, #20]
   b57da:	4798      	blx	r3
   b57dc:	8923      	ldrh	r3, [r4, #8]
   b57de:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b57e2:	4318      	orrs	r0, r3
   b57e4:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   b57e6:	f003 fd51 	bl	b928c <_Z19__fetch_global_Wirev>
   b57ea:	6803      	ldr	r3, [r0, #0]
   b57ec:	695b      	ldr	r3, [r3, #20]
   b57ee:	4798      	blx	r3
   b57f0:	8160      	strh	r0, [r4, #10]
   b57f2:	f003 fd4b 	bl	b928c <_Z19__fetch_global_Wirev>
   b57f6:	6803      	ldr	r3, [r0, #0]
   b57f8:	695b      	ldr	r3, [r3, #20]
   b57fa:	4798      	blx	r3
   b57fc:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   b5800:	8965      	ldrh	r5, [r4, #10]
   b5802:	4328      	orrs	r0, r5
   b5804:	8160      	strh	r0, [r4, #10]
  uint8_t range = getRange();
   b5806:	4620      	mov	r0, r4
   b5808:	f7ff ff98 	bl	b573c <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   b580c:	2803      	cmp	r0, #3
   b580e:	d069      	beq.n	b58e4 <_ZN15Adafruit_LIS3DH4readEv+0x178>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   b5810:	2802      	cmp	r0, #2
   b5812:	d06a      	beq.n	b58ea <_ZN15Adafruit_LIS3DH4readEv+0x17e>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   b5814:	2801      	cmp	r0, #1
   b5816:	d06b      	beq.n	b58f0 <_ZN15Adafruit_LIS3DH4readEv+0x184>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   b5818:	2800      	cmp	r0, #0
   b581a:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   b581e:	bf18      	it	ne
   b5820:	2301      	movne	r3, #1
  x_g = (float)x / divider;
   b5822:	ee07 3a90 	vmov	s15, r3
   b5826:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   b582a:	ee07 3a10 	vmov	s14, r3
   b582e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5832:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   b5836:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  x_g = (float)x / divider;
   b583a:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   b583e:	ee07 3a10 	vmov	s14, r3
   b5842:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_g = (float)x / divider;
   b5846:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   b584a:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   b584e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5852:	ee07 3a10 	vmov	s14, r3
   b5856:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   b585a:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   b585e:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b5862:	edc4 6a05 	vstr	s13, [r4, #20]
}
   b5866:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
   b5868:	f990 3020 	ldrsb.w	r3, [r0, #32]
   b586c:	3301      	adds	r3, #1
   b586e:	d101      	bne.n	b5874 <_ZN15Adafruit_LIS3DH4readEv+0x108>
      beginTransaction();
   b5870:	f7ff fe9a 	bl	b55a8 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   b5874:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5878:	2100      	movs	r1, #0
   b587a:	b280      	uxth	r0, r0
   b587c:	f003 fcad 	bl	b91da <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   b5880:	21e8      	movs	r1, #232	; 0xe8
   b5882:	4620      	mov	r0, r4
   b5884:	f7ff fea6 	bl	b55d4 <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   b5888:	21ff      	movs	r1, #255	; 0xff
   b588a:	4620      	mov	r0, r4
   b588c:	f7ff fea2 	bl	b55d4 <_ZN15Adafruit_LIS3DH7spixferEh>
   b5890:	21ff      	movs	r1, #255	; 0xff
   b5892:	80e0      	strh	r0, [r4, #6]
   b5894:	4620      	mov	r0, r4
   b5896:	f7ff fe9d 	bl	b55d4 <_ZN15Adafruit_LIS3DH7spixferEh>
   b589a:	88e3      	ldrh	r3, [r4, #6]
   b589c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b58a0:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   b58a2:	21ff      	movs	r1, #255	; 0xff
   b58a4:	4620      	mov	r0, r4
   b58a6:	f7ff fe95 	bl	b55d4 <_ZN15Adafruit_LIS3DH7spixferEh>
   b58aa:	21ff      	movs	r1, #255	; 0xff
   b58ac:	8120      	strh	r0, [r4, #8]
   b58ae:	4620      	mov	r0, r4
   b58b0:	f7ff fe90 	bl	b55d4 <_ZN15Adafruit_LIS3DH7spixferEh>
   b58b4:	8923      	ldrh	r3, [r4, #8]
   b58b6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b58ba:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   b58bc:	21ff      	movs	r1, #255	; 0xff
   b58be:	4620      	mov	r0, r4
   b58c0:	f7ff fe88 	bl	b55d4 <_ZN15Adafruit_LIS3DH7spixferEh>
   b58c4:	21ff      	movs	r1, #255	; 0xff
   b58c6:	8160      	strh	r0, [r4, #10]
   b58c8:	4620      	mov	r0, r4
   b58ca:	f7ff fe83 	bl	b55d4 <_ZN15Adafruit_LIS3DH7spixferEh>
   b58ce:	8963      	ldrh	r3, [r4, #10]
   b58d0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b58d4:	8160      	strh	r0, [r4, #10]
    digitalWrite(_cs, HIGH);
   b58d6:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b58da:	2101      	movs	r1, #1
   b58dc:	b280      	uxth	r0, r0
   b58de:	f003 fc7c 	bl	b91da <digitalWrite>
    if (_sck == -1)
   b58e2:	e790      	b.n	b5806 <_ZN15Adafruit_LIS3DH4readEv+0x9a>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   b58e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   b58e8:	e79b      	b.n	b5822 <_ZN15Adafruit_LIS3DH4readEv+0xb6>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   b58ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   b58ee:	e798      	b.n	b5822 <_ZN15Adafruit_LIS3DH4readEv+0xb6>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   b58f0:	f641 73fe 	movw	r3, #8190	; 0x1ffe
   b58f4:	e795      	b.n	b5822 <_ZN15Adafruit_LIS3DH4readEv+0xb6>
   b58f6:	bf00      	nop
   b58f8:	00ffff00 	.word	0x00ffff00

000b58fc <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   b58fc:	b570      	push	{r4, r5, r6, lr}
   b58fe:	460c      	mov	r4, r1
   b5900:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b5902:	2220      	movs	r2, #32
   b5904:	2100      	movs	r1, #0
   b5906:	1d20      	adds	r0, r4, #4
   b5908:	f004 f8ce 	bl	b9aa8 <memset>
  event->version   = sizeof(sensors_event_t);
   b590c:	2324      	movs	r3, #36	; 0x24
   b590e:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b5910:	69ab      	ldr	r3, [r5, #24]
   b5912:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   b5914:	2601      	movs	r6, #1
  read();
   b5916:	4628      	mov	r0, r5
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   b5918:	60a6      	str	r6, [r4, #8]
  read();
   b591a:	f7ff ff27 	bl	b576c <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
   b591e:	68eb      	ldr	r3, [r5, #12]
   b5920:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   b5922:	692b      	ldr	r3, [r5, #16]
   b5924:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   b5926:	696b      	ldr	r3, [r5, #20]
   b5928:	61e3      	str	r3, [r4, #28]
}
   b592a:	4630      	mov	r0, r6
   b592c:	bd70      	pop	{r4, r5, r6, pc}

000b592e <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   b592e:	b510      	push	{r4, lr}
   b5930:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   b5932:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
   b5934:	f990 001d 	ldrsb.w	r0, [r0, #29]
   b5938:	1c42      	adds	r2, r0, #1
   b593a:	d123      	bne.n	b5984 <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
   b593c:	f003 fca6 	bl	b928c <_Z19__fetch_global_Wirev>
   b5940:	f002 f986 	bl	b7c50 <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   b5944:	210f      	movs	r1, #15
   b5946:	4620      	mov	r0, r4
   b5948:	f7ff feb6 	bl	b56b8 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   b594c:	2833      	cmp	r0, #51	; 0x33
   b594e:	d13d      	bne.n	b59cc <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   b5950:	2207      	movs	r2, #7
   b5952:	2120      	movs	r1, #32
   b5954:	4620      	mov	r0, r4
   b5956:	f7ff fe73 	bl	b5640 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
   b595a:	2107      	movs	r1, #7
   b595c:	4620      	mov	r0, r4
   b595e:	f7ff fef4 	bl	b574a <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   b5962:	2288      	movs	r2, #136	; 0x88
   b5964:	2123      	movs	r1, #35	; 0x23
   b5966:	4620      	mov	r0, r4
   b5968:	f7ff fe6a 	bl	b5640 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   b596c:	2210      	movs	r2, #16
   b596e:	2122      	movs	r1, #34	; 0x22
   b5970:	4620      	mov	r0, r4
   b5972:	f7ff fe65 	bl	b5640 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   b5976:	4620      	mov	r0, r4
   b5978:	2280      	movs	r2, #128	; 0x80
   b597a:	211f      	movs	r1, #31
   b597c:	f7ff fe60 	bl	b5640 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
   b5980:	2001      	movs	r0, #1
}
   b5982:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   b5984:	2101      	movs	r1, #1
   b5986:	b280      	uxth	r0, r0
   b5988:	f003 fc27 	bl	b91da <digitalWrite>
    pinMode(_cs, OUTPUT);
   b598c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5990:	2101      	movs	r1, #1
   b5992:	b280      	uxth	r0, r0
   b5994:	f003 fc10 	bl	b91b8 <pinMode>
    if (_sck == -1) {
   b5998:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b599c:	1c43      	adds	r3, r0, #1
   b599e:	d104      	bne.n	b59aa <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
   b59a0:	f7ff fde6 	bl	b5570 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b59a4:	f002 fb9a 	bl	b80dc <_ZN8SPIClass5beginEv>
    }
   b59a8:	e7cc      	b.n	b5944 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
   b59aa:	2101      	movs	r1, #1
   b59ac:	b280      	uxth	r0, r0
   b59ae:	f003 fc03 	bl	b91b8 <pinMode>
      pinMode(_mosi, OUTPUT);
   b59b2:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b59b6:	2101      	movs	r1, #1
   b59b8:	b280      	uxth	r0, r0
   b59ba:	f003 fbfd 	bl	b91b8 <pinMode>
      pinMode(_miso, INPUT);
   b59be:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b59c2:	2100      	movs	r1, #0
   b59c4:	b280      	uxth	r0, r0
   b59c6:	f003 fbf7 	bl	b91b8 <pinMode>
   b59ca:	e7bb      	b.n	b5944 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
   b59cc:	2000      	movs	r0, #0
   b59ce:	e7d8      	b.n	b5982 <_ZN15Adafruit_LIS3DH5beginEh+0x54>

000b59d0 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
size_t Print::print(T n, int base)
   b59d0:	b570      	push	{r4, r5, r6, lr}
        if (n < 0 && base == 10) {
   b59d2:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b59d4:	4606      	mov	r6, r0
   b59d6:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b59d8:	da0b      	bge.n	b59f2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b59da:	2a0a      	cmp	r2, #10
   b59dc:	d109      	bne.n	b59f2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b59de:	212d      	movs	r1, #45	; 0x2d
   b59e0:	f002 faea 	bl	b7fb8 <_ZN5Print5printEc>
            val = -n;
   b59e4:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b59e6:	b2ea      	uxtb	r2, r5
   b59e8:	4630      	mov	r0, r6
    }
}
   b59ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b59ee:	f002 bb02 	b.w	b7ff6 <_ZN5Print11printNumberEmh>
            val = n;
   b59f2:	4621      	mov	r1, r4
   b59f4:	e7f7      	b.n	b59e6 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b59f6 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b59f6:	b510      	push	{r4, lr}
   b59f8:	4604      	mov	r4, r0
   b59fa:	f003 f885 	bl	b8b08 <_ZN9TCPClientC1Ev>
{

}
   b59fe:	4620      	mov	r0, r4
   b5a00:	bd10      	pop	{r4, pc}
	...

000b5a04 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b5a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   b5a06:	4f0f      	ldr	r7, [pc, #60]	; (b5a44 <_ZN10HttpClient10sendHeaderEPKcS1_+0x40>)
{
   b5a08:	4605      	mov	r5, r0
   b5a0a:	4614      	mov	r4, r2
   b5a0c:	460e      	mov	r6, r1
    client.print(aHeaderName);
   b5a0e:	f002 facf 	bl	b7fb0 <_ZN5Print5printEPKc>
    client.print(": ");
   b5a12:	4639      	mov	r1, r7
   b5a14:	4628      	mov	r0, r5
   b5a16:	f002 facb 	bl	b7fb0 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b5a1a:	4621      	mov	r1, r4
   b5a1c:	4628      	mov	r0, r5
   b5a1e:	f002 fae0 	bl	b7fe2 <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.print(aHeaderName);
   b5a22:	f003 f9e3 	bl	b8dec <_Z16_fetch_usbserialv>
   b5a26:	4631      	mov	r1, r6
   b5a28:	f002 fac2 	bl	b7fb0 <_ZN5Print5printEPKc>
    Serial.print(": ");
   b5a2c:	f003 f9de 	bl	b8dec <_Z16_fetch_usbserialv>
   b5a30:	4639      	mov	r1, r7
   b5a32:	f002 fabd 	bl	b7fb0 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   b5a36:	f003 f9d9 	bl	b8dec <_Z16_fetch_usbserialv>
   b5a3a:	4621      	mov	r1, r4
    #endif
}
   b5a3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(aHeaderValue);
   b5a40:	f002 bacf 	b.w	b7fe2 <_ZN5Print7printlnEPKc>
   b5a44:	000b9fe4 	.word	0x000b9fe4

000b5a48 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b5a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   b5a4a:	4f14      	ldr	r7, [pc, #80]	; (b5a9c <_ZN10HttpClient10sendHeaderEPKci+0x54>)
{
   b5a4c:	4604      	mov	r4, r0
   b5a4e:	4615      	mov	r5, r2
   b5a50:	460e      	mov	r6, r1
    client.print(aHeaderName);
   b5a52:	f002 faad 	bl	b7fb0 <_ZN5Print5printEPKc>
    client.print(": ");
   b5a56:	4639      	mov	r1, r7
   b5a58:	4620      	mov	r0, r4
   b5a5a:	f002 faa9 	bl	b7fb0 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b5a5e:	220a      	movs	r2, #10
   b5a60:	4629      	mov	r1, r5
   b5a62:	4620      	mov	r0, r4
   b5a64:	f7ff ffb4 	bl	b59d0 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b5a68:	4620      	mov	r0, r4
   b5a6a:	f002 faae 	bl	b7fca <_ZN5Print7printlnEv>
    client.println(aHeaderValue);

    #ifdef LOGGING
    Serial.print(aHeaderName);
   b5a6e:	f003 f9bd 	bl	b8dec <_Z16_fetch_usbserialv>
   b5a72:	4631      	mov	r1, r6
   b5a74:	f002 fa9c 	bl	b7fb0 <_ZN5Print5printEPKc>
    Serial.print(": ");
   b5a78:	f003 f9b8 	bl	b8dec <_Z16_fetch_usbserialv>
   b5a7c:	4639      	mov	r1, r7
   b5a7e:	f002 fa97 	bl	b7fb0 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   b5a82:	f003 f9b3 	bl	b8dec <_Z16_fetch_usbserialv>
   b5a86:	4629      	mov	r1, r5
   b5a88:	4604      	mov	r4, r0
size_t Print::print(T n, int base)
   b5a8a:	220a      	movs	r2, #10
   b5a8c:	f7ff ffa0 	bl	b59d0 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b5a90:	4620      	mov	r0, r4
    #endif
}
   b5a92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5a96:	f002 ba98 	b.w	b7fca <_ZN5Print7printlnEv>
   b5a9a:	bf00      	nop
   b5a9c:	000b9fe4 	.word	0x000b9fe4

000b5aa0 <_ZN10HttpClient10sendHeaderEPKc>:

void HttpClient::sendHeader(const char* aHeaderName)
{
   b5aa0:	b510      	push	{r4, lr}
   b5aa2:	460c      	mov	r4, r1
    client.println(aHeaderName);
   b5aa4:	f002 fa9d 	bl	b7fe2 <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.println(aHeaderName);
   b5aa8:	f003 f9a0 	bl	b8dec <_Z16_fetch_usbserialv>
   b5aac:	4621      	mov	r1, r4
    #endif
}
   b5aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(aHeaderName);
   b5ab2:	f002 ba96 	b.w	b7fe2 <_ZN5Print7printlnEPKc>
	...

000b5ab8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b5ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5abc:	460e      	mov	r6, r1
   b5abe:	b091      	sub	sp, #68	; 0x44
   b5ac0:	461f      	mov	r7, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b5ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5ac6:	6013      	str	r3, [r2, #0]
{
   b5ac8:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5aca:	2100      	movs	r1, #0
   b5acc:	4630      	mov	r0, r6
   b5ace:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b5ad2:	4690      	mov	r8, r2
   b5ad4:	f002 fca1 	bl	b841a <_ZNK6String6equalsEPKc>
   b5ad8:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b5adc:	4603      	mov	r3, r0
   b5ade:	b9c0      	cbnz	r0, b5b12 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x5a>
	const char * c_str() const { return buffer; }
   b5ae0:	f1be 0f00 	cmp.w	lr, #0
   b5ae4:	bf14      	ite	ne
   b5ae6:	4672      	movne	r2, lr
   b5ae8:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b5aea:	6831      	ldr	r1, [r6, #0]
   b5aec:	b292      	uxth	r2, r2
   b5aee:	4620      	mov	r0, r4
   b5af0:	f002 fe0a 	bl	b8708 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b5af4:	1e05      	subs	r5, r0, #0
   b5af6:	bf18      	it	ne
   b5af8:	2501      	movne	r5, #1
    }

    #ifdef LOGGING
    if (connected) {
   b5afa:	b9ed      	cbnz	r5, b5b38 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x80>
            Serial.print(aRequest.ip);
        }
        Serial.print(":");
        Serial.println(aRequest.port);
    } else {
        Serial.println("HttpClient>\tConnection failed.");
   b5afc:	f003 f976 	bl	b8dec <_Z16_fetch_usbserialv>
   b5b00:	49be      	ldr	r1, [pc, #760]	; (b5dfc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x344>)
   b5b02:	f002 fa6e 	bl	b7fe2 <_ZN5Print7printlnEPKc>
    }
    #endif

    if (!connected) {
        client.stop();
   b5b06:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b5b08:	b011      	add	sp, #68	; 0x44
   b5b0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b5b0e:	f002 bfb1 	b.w	b8a74 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b5b12:	4bbb      	ldr	r3, [pc, #748]	; (b5e00 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x348>)
   b5b14:	930a      	str	r3, [sp, #40]	; 0x28
   b5b16:	f106 0c14 	add.w	ip, r6, #20
   b5b1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5b1e:	ad0b      	add	r5, sp, #44	; 0x2c
   b5b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5b22:	f8dc 3000 	ldr.w	r3, [ip]
   b5b26:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b5b28:	fa1f f28e 	uxth.w	r2, lr
   b5b2c:	2300      	movs	r3, #0
   b5b2e:	a90a      	add	r1, sp, #40	; 0x28
   b5b30:	4620      	mov	r0, r4
   b5b32:	f002 fec9 	bl	b88c8 <_ZN9TCPClient7connectE9IPAddresstm>
   b5b36:	e7dd      	b.n	b5af4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5b38:	2100      	movs	r1, #0
   b5b3a:	4630      	mov	r0, r6
   b5b3c:	f002 fc6d 	bl	b841a <_ZNK6String6equalsEPKc>
        if(aRequest.hostname!=NULL) {
   b5b40:	2800      	cmp	r0, #0
   b5b42:	d15d      	bne.n	b5c00 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x148>
            Serial.print("HttpClient>\tConnecting to: ");
   b5b44:	f003 f952 	bl	b8dec <_Z16_fetch_usbserialv>
   b5b48:	49ae      	ldr	r1, [pc, #696]	; (b5e04 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x34c>)
   b5b4a:	f002 fa31 	bl	b7fb0 <_ZN5Print5printEPKc>
            Serial.print(aRequest.hostname);
   b5b4e:	f003 f94d 	bl	b8dec <_Z16_fetch_usbserialv>
   b5b52:	6831      	ldr	r1, [r6, #0]
   b5b54:	f002 fa2c 	bl	b7fb0 <_ZN5Print5printEPKc>
        Serial.print(":");
   b5b58:	f003 f948 	bl	b8dec <_Z16_fetch_usbserialv>
   b5b5c:	49aa      	ldr	r1, [pc, #680]	; (b5e08 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   b5b5e:	f002 fa27 	bl	b7fb0 <_ZN5Print5printEPKc>
        Serial.println(aRequest.port);
   b5b62:	f003 f943 	bl	b8dec <_Z16_fetch_usbserialv>
   b5b66:	220a      	movs	r2, #10
   b5b68:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   b5b6a:	4682      	mov	sl, r0
size_t Print::print(T n, int base)
   b5b6c:	f7ff ff30 	bl	b59d0 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b5b70:	4650      	mov	r0, sl
   b5b72:	f002 fa2a 	bl	b7fca <_ZN5Print7printlnEv>
    client.print(aHttpMethod);
   b5b76:	4649      	mov	r1, r9
   b5b78:	4620      	mov	r0, r4
   b5b7a:	f002 fa19 	bl	b7fb0 <_ZN5Print5printEPKc>
    client.print(" ");
   b5b7e:	49a3      	ldr	r1, [pc, #652]	; (b5e0c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   b5b80:	4620      	mov	r0, r4
   b5b82:	f002 fa15 	bl	b7fb0 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b5b86:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b5b88:	4620      	mov	r0, r4
   b5b8a:	f002 fa11 	bl	b7fb0 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b5b8e:	49a0      	ldr	r1, [pc, #640]	; (b5e10 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   b5b90:	4620      	mov	r0, r4
   b5b92:	f002 fa0d 	bl	b7fb0 <_ZN5Print5printEPKc>
    Serial.println("HttpClient>\tStart of HTTP Request.");
   b5b96:	f003 f929 	bl	b8dec <_Z16_fetch_usbserialv>
   b5b9a:	499e      	ldr	r1, [pc, #632]	; (b5e14 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x35c>)
   b5b9c:	f002 fa21 	bl	b7fe2 <_ZN5Print7printlnEPKc>
    Serial.print(aHttpMethod);
   b5ba0:	f003 f924 	bl	b8dec <_Z16_fetch_usbserialv>
   b5ba4:	4649      	mov	r1, r9
   b5ba6:	f002 fa03 	bl	b7fb0 <_ZN5Print5printEPKc>
    Serial.print(" ");
   b5baa:	f003 f91f 	bl	b8dec <_Z16_fetch_usbserialv>
   b5bae:	4997      	ldr	r1, [pc, #604]	; (b5e0c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   b5bb0:	f002 f9fe 	bl	b7fb0 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
   b5bb4:	f003 f91a 	bl	b8dec <_Z16_fetch_usbserialv>
   b5bb8:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b5bba:	f002 f9f9 	bl	b7fb0 <_ZN5Print5printEPKc>
    Serial.print(" HTTP/1.0\r\n");
   b5bbe:	f003 f915 	bl	b8dec <_Z16_fetch_usbserialv>
   b5bc2:	4993      	ldr	r1, [pc, #588]	; (b5e10 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   b5bc4:	f002 f9f4 	bl	b7fb0 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b5bc8:	4993      	ldr	r1, [pc, #588]	; (b5e18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x360>)
   b5bca:	4a94      	ldr	r2, [pc, #592]	; (b5e1c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x364>)
   b5bcc:	4620      	mov	r0, r4
   b5bce:	f7ff ff19 	bl	b5a04 <_ZN10HttpClient10sendHeaderEPKcS1_>
   b5bd2:	2100      	movs	r1, #0
   b5bd4:	4630      	mov	r0, r6
   b5bd6:	f002 fc20 	bl	b841a <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b5bda:	b920      	cbnz	r0, b5be6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x12e>
        sendHeader("HOST", aRequest.hostname.c_str());
   b5bdc:	6832      	ldr	r2, [r6, #0]
   b5bde:	4990      	ldr	r1, [pc, #576]	; (b5e20 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x368>)
   b5be0:	4620      	mov	r0, r4
   b5be2:	f7ff ff0f 	bl	b5a04 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b5be6:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b5bea:	2100      	movs	r1, #0
   b5bec:	4650      	mov	r0, sl
   b5bee:	f002 fc14 	bl	b841a <_ZNK6String6equalsEPKc>
   b5bf2:	b988      	cbnz	r0, b5c18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x160>
        sendHeader("Content-Length", (aRequest.body).length());
   b5bf4:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b5bf6:	498b      	ldr	r1, [pc, #556]	; (b5e24 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x36c>)
   b5bf8:	4620      	mov	r0, r4
   b5bfa:	f7ff ff25 	bl	b5a48 <_ZN10HttpClient10sendHeaderEPKci>
   b5bfe:	e012      	b.n	b5c26 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16e>
            Serial.print("HttpClient>\tConnecting to IP: ");
   b5c00:	f003 f8f4 	bl	b8dec <_Z16_fetch_usbserialv>
   b5c04:	4988      	ldr	r1, [pc, #544]	; (b5e28 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x370>)
   b5c06:	f002 f9d3 	bl	b7fb0 <_ZN5Print5printEPKc>
            Serial.print(aRequest.ip);
   b5c0a:	f003 f8ef 	bl	b8dec <_Z16_fetch_usbserialv>
   b5c0e:	f106 0110 	add.w	r1, r6, #16
   b5c12:	f002 f9d4 	bl	b7fbe <_ZN5Print5printERK9Printable>
   b5c16:	e79f      	b.n	b5b58 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xa0>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b5c18:	4984      	ldr	r1, [pc, #528]	; (b5e2c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x374>)
   b5c1a:	4648      	mov	r0, r9
   b5c1c:	f003 ff7a 	bl	b9b14 <strcmp>
   b5c20:	4602      	mov	r2, r0
   b5c22:	2800      	cmp	r0, #0
   b5c24:	d0e7      	beq.n	b5bf6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x13e>
    if (headers != NULL)
   b5c26:	b15f      	cbz	r7, b5c40 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x188>
        while (headers[i].header != NULL)
   b5c28:	6839      	ldr	r1, [r7, #0]
   b5c2a:	b149      	cbz	r1, b5c40 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x188>
            if (headers[i].value != NULL) {
   b5c2c:	687a      	ldr	r2, [r7, #4]
                sendHeader(headers[i].header, headers[i].value);
   b5c2e:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b5c30:	b11a      	cbz	r2, b5c3a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
                sendHeader(headers[i].header, headers[i].value);
   b5c32:	f7ff fee7 	bl	b5a04 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b5c36:	3708      	adds	r7, #8
        while (headers[i].header != NULL)
   b5c38:	e7f6      	b.n	b5c28 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
                sendHeader(headers[i].header);
   b5c3a:	f7ff ff31 	bl	b5aa0 <_ZN10HttpClient10sendHeaderEPKc>
   b5c3e:	e7fa      	b.n	b5c36 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17e>
    client.println();
   b5c40:	4620      	mov	r0, r4
   b5c42:	f002 f9c2 	bl	b7fca <_ZN5Print7printlnEv>
    client.flush();
   b5c46:	4620      	mov	r0, r4
   b5c48:	f002 fcbe 	bl	b85c8 <_ZN9TCPClient5flushEv>
   b5c4c:	2100      	movs	r1, #0
   b5c4e:	4650      	mov	r0, sl
   b5c50:	f002 fbe3 	bl	b841a <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b5c54:	b940      	cbnz	r0, b5c68 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b0>
        client.println(aRequest.body);
   b5c56:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b5c58:	4620      	mov	r0, r4
   b5c5a:	f002 f9c2 	bl	b7fe2 <_ZN5Print7printlnEPKc>
        Serial.println(aRequest.body);
   b5c5e:	f003 f8c5 	bl	b8dec <_Z16_fetch_usbserialv>
   b5c62:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b5c64:	f002 f9bd 	bl	b7fe2 <_ZN5Print7printlnEPKc>
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   b5c68:	f003 f8c0 	bl	b8dec <_Z16_fetch_usbserialv>
    memset(&buffer[0], 0, sizeof(buffer));
   b5c6c:	f104 0a1c 	add.w	sl, r4, #28
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   b5c70:	496f      	ldr	r1, [pc, #444]	; (b5e30 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x378>)
   b5c72:	f002 f9b6 	bl	b7fe2 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b5c76:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5c7a:	2100      	movs	r1, #0
   b5c7c:	4650      	mov	r0, sl
   b5c7e:	f003 ff13 	bl	b9aa8 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5c82:	f000 f9df 	bl	b6044 <HAL_Timer_Get_Milli_Seconds>
   b5c86:	9000      	str	r0, [sp, #0]
   b5c88:	f000 f9dc 	bl	b6044 <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
   b5c8c:	2600      	movs	r6, #0
   b5c8e:	9001      	str	r0, [sp, #4]
        int bytes = client.available();
   b5c90:	4620      	mov	r0, r4
   b5c92:	f002 fe95 	bl	b89c0 <_ZN9TCPClient9availableEv>
        if(bytes) {
   b5c96:	4681      	mov	r9, r0
   b5c98:	b178      	cbz	r0, b5cba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x202>
            Serial.print("\r\nHttpClient>\tReceiving TCP transaction of ");
   b5c9a:	f003 f8a7 	bl	b8dec <_Z16_fetch_usbserialv>
   b5c9e:	4965      	ldr	r1, [pc, #404]	; (b5e34 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x37c>)
   b5ca0:	f002 f986 	bl	b7fb0 <_ZN5Print5printEPKc>
            Serial.print(bytes);
   b5ca4:	f003 f8a2 	bl	b8dec <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   b5ca8:	4649      	mov	r1, r9
   b5caa:	220a      	movs	r2, #10
   b5cac:	f7ff fe90 	bl	b59d0 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
            Serial.println(" bytes.");
   b5cb0:	f003 f89c 	bl	b8dec <_Z16_fetch_usbserialv>
   b5cb4:	4960      	ldr	r1, [pc, #384]	; (b5e38 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x380>)
   b5cb6:	f002 f994 	bl	b7fe2 <_ZN5Print7printlnEPKc>
    unsigned int bufferPosition = 0;
   b5cba:	f04f 0b00 	mov.w	fp, #0
        while (client.available()) {
   b5cbe:	4620      	mov	r0, r4
   b5cc0:	f002 fe7e 	bl	b89c0 <_ZN9TCPClient9availableEv>
   b5cc4:	b320      	cbz	r0, b5d10 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x258>
            char c = client.read();
   b5cc6:	4620      	mov	r0, r4
   b5cc8:	f002 fc64 	bl	b8594 <_ZN9TCPClient4readEv>
   b5ccc:	b2c7      	uxtb	r7, r0
            Serial.print(c);
   b5cce:	f003 f88d 	bl	b8dec <_Z16_fetch_usbserialv>
   b5cd2:	4639      	mov	r1, r7
   b5cd4:	f002 f970 	bl	b7fb8 <_ZN5Print5printEc>
   b5cd8:	f000 f9b4 	bl	b6044 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b5cdc:	f240 33fe 	movw	r3, #1022	; 0x3fe
   b5ce0:	429e      	cmp	r6, r3
   b5ce2:	9000      	str	r0, [sp, #0]
   b5ce4:	d803      	bhi.n	b5cee <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x236>
                buffer[bufferPosition] = c;
   b5ce6:	f80a 7006 	strb.w	r7, [sl, r6]
            bufferPosition++;
   b5cea:	3601      	adds	r6, #1
        while (client.available()) {
   b5cec:	e7e7      	b.n	b5cbe <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x206>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b5cee:	f240 33ff 	movw	r3, #1023	; 0x3ff
   b5cf2:	429e      	cmp	r6, r3
   b5cf4:	d1f9      	bne.n	b5cea <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x232>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b5cf6:	2300      	movs	r3, #0
   b5cf8:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   b5cfc:	4620      	mov	r0, r4
   b5cfe:	f002 feb9 	bl	b8a74 <_ZN9TCPClient4stopEv>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
   b5d02:	f003 f873 	bl	b8dec <_Z16_fetch_usbserialv>
   b5d06:	494d      	ldr	r1, [pc, #308]	; (b5e3c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x384>)
   b5d08:	f002 f96b 	bl	b7fe2 <_ZN5Print7printlnEPKc>
                error = true;
   b5d0c:	46ab      	mov	fp, r5
   b5d0e:	e7ec      	b.n	b5cea <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x232>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b5d10:	19a3      	adds	r3, r4, r6
   b5d12:	7718      	strb	r0, [r3, #28]
        if (bytes) {
   b5d14:	f1b9 0f00 	cmp.w	r9, #0
   b5d18:	d004      	beq.n	b5d24 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x26c>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
   b5d1a:	f003 f867 	bl	b8dec <_Z16_fetch_usbserialv>
   b5d1e:	4948      	ldr	r1, [pc, #288]	; (b5e40 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x388>)
   b5d20:	f002 f946 	bl	b7fb0 <_ZN5Print5printEPKc>
   b5d24:	f000 f98e 	bl	b6044 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b5d28:	9b00      	ldr	r3, [sp, #0]
   b5d2a:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b5d2e:	f1bb 0f00 	cmp.w	fp, #0
   b5d32:	d106      	bne.n	b5d42 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x28a>
   b5d34:	f241 3388 	movw	r3, #5000	; 0x1388
   b5d38:	4599      	cmp	r9, r3
   b5d3a:	d802      	bhi.n	b5d42 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x28a>
            delay(200);
   b5d3c:	20c8      	movs	r0, #200	; 0xc8
   b5d3e:	f000 fcbf 	bl	b66c0 <delay>
    } while (client.connected() && !timeout && !error);
   b5d42:	4620      	mov	r0, r4
   b5d44:	f002 fd5e 	bl	b8804 <_ZN9TCPClient9connectedEv>
   b5d48:	f241 3388 	movw	r3, #5000	; 0x1388
   b5d4c:	2800      	cmp	r0, #0
   b5d4e:	d04c      	beq.n	b5dea <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x332>
   b5d50:	4599      	cmp	r9, r3
   b5d52:	d84c      	bhi.n	b5dee <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x336>
   b5d54:	f1bb 0f00 	cmp.w	fp, #0
   b5d58:	d09a      	beq.n	b5c90 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d8>
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
   b5d5a:	f003 f847 	bl	b8dec <_Z16_fetch_usbserialv>
   b5d5e:	4939      	ldr	r1, [pc, #228]	; (b5e44 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x38c>)
   b5d60:	f002 f926 	bl	b7fb0 <_ZN5Print5printEPKc>
    Serial.print(millis() - firstRead);
   b5d64:	f003 f842 	bl	b8dec <_Z16_fetch_usbserialv>
   b5d68:	4605      	mov	r5, r0
   b5d6a:	f000 f96b 	bl	b6044 <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   b5d6e:	9b01      	ldr	r3, [sp, #4]
   b5d70:	220a      	movs	r2, #10
   b5d72:	1ac1      	subs	r1, r0, r3
   b5d74:	4628      	mov	r0, r5
   b5d76:	f002 f93e 	bl	b7ff6 <_ZN5Print11printNumberEmh>
    Serial.println("ms).");
   b5d7a:	f003 f837 	bl	b8dec <_Z16_fetch_usbserialv>
   b5d7e:	4932      	ldr	r1, [pc, #200]	; (b5e48 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x390>)
   b5d80:	f002 f92f 	bl	b7fe2 <_ZN5Print7printlnEPKc>
    client.stop();
   b5d84:	4620      	mov	r0, r4
   b5d86:	f002 fe75 	bl	b8a74 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b5d8a:	4651      	mov	r1, sl
   b5d8c:	a802      	add	r0, sp, #8
   b5d8e:	f002 fa7a 	bl	b8286 <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b5d92:	230c      	movs	r3, #12
   b5d94:	2209      	movs	r2, #9
   b5d96:	a902      	add	r1, sp, #8
   b5d98:	a806      	add	r0, sp, #24
   b5d9a:	f002 fb63 	bl	b8464 <_ZNK6String9substringEjj>
    Serial.print("HttpClient>\tStatus Code: ");
   b5d9e:	f003 f825 	bl	b8dec <_Z16_fetch_usbserialv>
   b5da2:	492a      	ldr	r1, [pc, #168]	; (b5e4c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x394>)
   b5da4:	f002 f904 	bl	b7fb0 <_ZN5Print5printEPKc>
    Serial.println(statusCode);
   b5da8:	f003 f820 	bl	b8dec <_Z16_fetch_usbserialv>
   b5dac:	9906      	ldr	r1, [sp, #24]
   b5dae:	f002 f918 	bl	b7fe2 <_ZN5Print7printlnEPKc>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b5db2:	4927      	ldr	r1, [pc, #156]	; (b5e50 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x398>)
   b5db4:	a80a      	add	r0, sp, #40	; 0x28
   b5db6:	f002 fa66 	bl	b8286 <_ZN6StringC1EPK19__FlashStringHelper>
   b5dba:	a90a      	add	r1, sp, #40	; 0x28
   b5dbc:	a802      	add	r0, sp, #8
   b5dbe:	f002 fb4d 	bl	b845c <_ZNK6String7indexOfERKS_>
   b5dc2:	4604      	mov	r4, r0
   b5dc4:	a80a      	add	r0, sp, #40	; 0x28
   b5dc6:	f002 fa13 	bl	b81f0 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b5dca:	1c63      	adds	r3, r4, #1
   b5dcc:	d146      	bne.n	b5e5c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a4>
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
   b5dce:	f003 f80d 	bl	b8dec <_Z16_fetch_usbserialv>
   b5dd2:	4920      	ldr	r1, [pc, #128]	; (b5e54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x39c>)
   b5dd4:	f002 f905 	bl	b7fe2 <_ZN5Print7printlnEPKc>
    String statusCode = raw_response.substring(9,12);
   b5dd8:	a806      	add	r0, sp, #24
   b5dda:	f002 fa09 	bl	b81f0 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b5dde:	a802      	add	r0, sp, #8
   b5de0:	f002 fa06 	bl	b81f0 <_ZN6StringD1Ev>
}
   b5de4:	b011      	add	sp, #68	; 0x44
   b5de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (timeout) {
   b5dea:	4599      	cmp	r9, r3
   b5dec:	d9b5      	bls.n	b5d5a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2a2>
        Serial.println("\r\nHttpClient>\tError: Timeout while reading response.");
   b5dee:	f002 fffd 	bl	b8dec <_Z16_fetch_usbserialv>
   b5df2:	4919      	ldr	r1, [pc, #100]	; (b5e58 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a0>)
   b5df4:	f002 f8f5 	bl	b7fe2 <_ZN5Print7printlnEPKc>
   b5df8:	e7af      	b.n	b5d5a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2a2>
   b5dfa:	bf00      	nop
   b5dfc:	000ba35b 	.word	0x000ba35b
   b5e00:	000ba6e4 	.word	0x000ba6e4
   b5e04:	000ba2e0 	.word	0x000ba2e0
   b5e08:	000b9dbf 	.word	0x000b9dbf
   b5e0c:	000b9fe5 	.word	0x000b9fe5
   b5e10:	000ba31b 	.word	0x000ba31b
   b5e14:	000ba327 	.word	0x000ba327
   b5e18:	000ba350 	.word	0x000ba350
   b5e1c:	000ba34a 	.word	0x000ba34a
   b5e20:	000ba37a 	.word	0x000ba37a
   b5e24:	000ba37f 	.word	0x000ba37f
   b5e28:	000ba2fc 	.word	0x000ba2fc
   b5e2c:	000b9da0 	.word	0x000b9da0
   b5e30:	000ba38e 	.word	0x000ba38e
   b5e34:	000ba3af 	.word	0x000ba3af
   b5e38:	000ba3db 	.word	0x000ba3db
   b5e3c:	000ba3e3 	.word	0x000ba3e3
   b5e40:	000ba418 	.word	0x000ba418
   b5e44:	000ba473 	.word	0x000ba473
   b5e48:	000ba498 	.word	0x000ba498
   b5e4c:	000ba49d 	.word	0x000ba49d
   b5e50:	000ba4b7 	.word	0x000ba4b7
   b5e54:	000ba4bc 	.word	0x000ba4bc
   b5e58:	000ba43e 	.word	0x000ba43e
    aResponse.body = "";
   b5e5c:	f108 0504 	add.w	r5, r8, #4
   b5e60:	490a      	ldr	r1, [pc, #40]	; (b5e8c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3d4>)
   b5e62:	4628      	mov	r0, r5
   b5e64:	f002 fa3d 	bl	b82e2 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b5e68:	1d22      	adds	r2, r4, #4
   b5e6a:	a902      	add	r1, sp, #8
   b5e6c:	a80a      	add	r0, sp, #40	; 0x28
   b5e6e:	f002 fb19 	bl	b84a4 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5e72:	a90a      	add	r1, sp, #40	; 0x28
   b5e74:	4628      	mov	r0, r5
   b5e76:	f002 fa83 	bl	b8380 <_ZN6String6concatERKS_>
   b5e7a:	a80a      	add	r0, sp, #40	; 0x28
   b5e7c:	f002 f9b8 	bl	b81f0 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b5e80:	9806      	ldr	r0, [sp, #24]
   b5e82:	f003 fdb3 	bl	b99ec <atoi>
   b5e86:	f8c8 0000 	str.w	r0, [r8]
   b5e8a:	e7a5      	b.n	b5dd8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x320>
   b5e8c:	000ba033 	.word	0x000ba033

000b5e90 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b5e90:	b508      	push	{r3, lr}
   b5e92:	4b02      	ldr	r3, [pc, #8]	; (b5e9c <hal_ble_stack_init+0xc>)
   b5e94:	681b      	ldr	r3, [r3, #0]
   b5e96:	689b      	ldr	r3, [r3, #8]
   b5e98:	9301      	str	r3, [sp, #4]
   b5e9a:	bd08      	pop	{r3, pc}
   b5e9c:	00030278 	.word	0x00030278

000b5ea0 <hal_ble_stack_deinit>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
   b5ea0:	b508      	push	{r3, lr}
   b5ea2:	4b02      	ldr	r3, [pc, #8]	; (b5eac <hal_ble_stack_deinit+0xc>)
   b5ea4:	681b      	ldr	r3, [r3, #0]
   b5ea6:	68db      	ldr	r3, [r3, #12]
   b5ea8:	9301      	str	r3, [sp, #4]
   b5eaa:	bd08      	pop	{r3, pc}
   b5eac:	00030278 	.word	0x00030278

000b5eb0 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b5eb0:	b508      	push	{r3, lr}
   b5eb2:	4b02      	ldr	r3, [pc, #8]	; (b5ebc <hal_ble_gap_set_advertising_data+0xc>)
   b5eb4:	681b      	ldr	r3, [r3, #0]
   b5eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5eb8:	9301      	str	r3, [sp, #4]
   b5eba:	bd08      	pop	{r3, pc}
   b5ebc:	00030278 	.word	0x00030278

000b5ec0 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b5ec0:	b508      	push	{r3, lr}
   b5ec2:	4b02      	ldr	r3, [pc, #8]	; (b5ecc <hal_ble_gap_set_scan_response_data+0xc>)
   b5ec4:	681b      	ldr	r3, [r3, #0]
   b5ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5ec8:	9301      	str	r3, [sp, #4]
   b5eca:	bd08      	pop	{r3, pc}
   b5ecc:	00030278 	.word	0x00030278

000b5ed0 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b5ed0:	b508      	push	{r3, lr}
   b5ed2:	4b02      	ldr	r3, [pc, #8]	; (b5edc <hal_ble_gap_start_advertising+0xc>)
   b5ed4:	681b      	ldr	r3, [r3, #0]
   b5ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b5ed8:	9301      	str	r3, [sp, #4]
   b5eda:	bd08      	pop	{r3, pc}
   b5edc:	00030278 	.word	0x00030278

000b5ee0 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b5ee0:	b508      	push	{r3, lr}
   b5ee2:	4b03      	ldr	r3, [pc, #12]	; (b5ef0 <hal_ble_gap_disconnect+0x10>)
   b5ee4:	681b      	ldr	r3, [r3, #0]
   b5ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b5eea:	9301      	str	r3, [sp, #4]
   b5eec:	bd08      	pop	{r3, pc}
   b5eee:	0000      	.short	0x0000
   b5ef0:	00030278 	.word	0x00030278

000b5ef4 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b5ef4:	b508      	push	{r3, lr}
   b5ef6:	4b03      	ldr	r3, [pc, #12]	; (b5f04 <hal_ble_gatt_server_add_service+0x10>)
   b5ef8:	681b      	ldr	r3, [r3, #0]
   b5efa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b5efe:	9301      	str	r3, [sp, #4]
   b5f00:	bd08      	pop	{r3, pc}
   b5f02:	0000      	.short	0x0000
   b5f04:	00030278 	.word	0x00030278

000b5f08 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5f08:	b508      	push	{r3, lr}
   b5f0a:	4b03      	ldr	r3, [pc, #12]	; (b5f18 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b5f0c:	681b      	ldr	r3, [r3, #0]
   b5f0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b5f12:	9301      	str	r3, [sp, #4]
   b5f14:	bd08      	pop	{r3, pc}
   b5f16:	0000      	.short	0x0000
   b5f18:	00030278 	.word	0x00030278

000b5f1c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5f1c:	b508      	push	{r3, lr}
   b5f1e:	4b03      	ldr	r3, [pc, #12]	; (b5f2c <hal_ble_gatt_client_write_with_response+0x10>)
   b5f20:	681b      	ldr	r3, [r3, #0]
   b5f22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b5f26:	9301      	str	r3, [sp, #4]
   b5f28:	bd08      	pop	{r3, pc}
   b5f2a:	0000      	.short	0x0000
   b5f2c:	00030278 	.word	0x00030278

000b5f30 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5f30:	b508      	push	{r3, lr}
   b5f32:	4b03      	ldr	r3, [pc, #12]	; (b5f40 <hal_ble_gatt_client_write_without_response+0x10>)
   b5f34:	681b      	ldr	r3, [r3, #0]
   b5f36:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b5f3a:	9301      	str	r3, [sp, #4]
   b5f3c:	bd08      	pop	{r3, pc}
   b5f3e:	0000      	.short	0x0000
   b5f40:	00030278 	.word	0x00030278

000b5f44 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b5f44:	b508      	push	{r3, lr}
   b5f46:	4b03      	ldr	r3, [pc, #12]	; (b5f54 <hal_ble_gatt_server_add_characteristic+0x10>)
   b5f48:	681b      	ldr	r3, [r3, #0]
   b5f4a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b5f4e:	9301      	str	r3, [sp, #4]
   b5f50:	bd08      	pop	{r3, pc}
   b5f52:	0000      	.short	0x0000
   b5f54:	00030278 	.word	0x00030278

000b5f58 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b5f58:	b508      	push	{r3, lr}
   b5f5a:	4b03      	ldr	r3, [pc, #12]	; (b5f68 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b5f5c:	681b      	ldr	r3, [r3, #0]
   b5f5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b5f62:	9301      	str	r3, [sp, #4]
   b5f64:	bd08      	pop	{r3, pc}
   b5f66:	0000      	.short	0x0000
   b5f68:	00030278 	.word	0x00030278

000b5f6c <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5f6c:	b508      	push	{r3, lr}
   b5f6e:	4b03      	ldr	r3, [pc, #12]	; (b5f7c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b5f70:	681b      	ldr	r3, [r3, #0]
   b5f72:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b5f76:	9301      	str	r3, [sp, #4]
   b5f78:	bd08      	pop	{r3, pc}
   b5f7a:	0000      	.short	0x0000
   b5f7c:	00030278 	.word	0x00030278

000b5f80 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5f80:	b508      	push	{r3, lr}
   b5f82:	4b03      	ldr	r3, [pc, #12]	; (b5f90 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b5f84:	681b      	ldr	r3, [r3, #0]
   b5f86:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b5f8a:	9301      	str	r3, [sp, #4]
   b5f8c:	bd08      	pop	{r3, pc}
   b5f8e:	0000      	.short	0x0000
   b5f90:	00030278 	.word	0x00030278

000b5f94 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   b5f94:	b508      	push	{r3, lr}
   b5f96:	4b02      	ldr	r3, [pc, #8]	; (b5fa0 <os_thread_create+0xc>)
   b5f98:	681b      	ldr	r3, [r3, #0]
   b5f9a:	685b      	ldr	r3, [r3, #4]
   b5f9c:	9301      	str	r3, [sp, #4]
   b5f9e:	bd08      	pop	{r3, pc}
   b5fa0:	00030248 	.word	0x00030248

000b5fa4 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b5fa4:	b508      	push	{r3, lr}
   b5fa6:	4b02      	ldr	r3, [pc, #8]	; (b5fb0 <os_thread_yield+0xc>)
   b5fa8:	681b      	ldr	r3, [r3, #0]
   b5faa:	68db      	ldr	r3, [r3, #12]
   b5fac:	9301      	str	r3, [sp, #4]
   b5fae:	bd08      	pop	{r3, pc}
   b5fb0:	00030248 	.word	0x00030248

000b5fb4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5fb4:	b508      	push	{r3, lr}
   b5fb6:	4b02      	ldr	r3, [pc, #8]	; (b5fc0 <os_mutex_create+0xc>)
   b5fb8:	681b      	ldr	r3, [r3, #0]
   b5fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5fbc:	9301      	str	r3, [sp, #4]
   b5fbe:	bd08      	pop	{r3, pc}
   b5fc0:	00030248 	.word	0x00030248

000b5fc4 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b5fc4:	b508      	push	{r3, lr}
   b5fc6:	4b02      	ldr	r3, [pc, #8]	; (b5fd0 <os_mutex_lock+0xc>)
   b5fc8:	681b      	ldr	r3, [r3, #0]
   b5fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5fcc:	9301      	str	r3, [sp, #4]
   b5fce:	bd08      	pop	{r3, pc}
   b5fd0:	00030248 	.word	0x00030248

000b5fd4 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b5fd4:	b508      	push	{r3, lr}
   b5fd6:	4b02      	ldr	r3, [pc, #8]	; (b5fe0 <os_mutex_unlock+0xc>)
   b5fd8:	681b      	ldr	r3, [r3, #0]
   b5fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5fdc:	9301      	str	r3, [sp, #4]
   b5fde:	bd08      	pop	{r3, pc}
   b5fe0:	00030248 	.word	0x00030248

000b5fe4 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5fe4:	b508      	push	{r3, lr}
   b5fe6:	4b02      	ldr	r3, [pc, #8]	; (b5ff0 <os_mutex_recursive_create+0xc>)
   b5fe8:	681b      	ldr	r3, [r3, #0]
   b5fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5fec:	9301      	str	r3, [sp, #4]
   b5fee:	bd08      	pop	{r3, pc}
   b5ff0:	00030248 	.word	0x00030248

000b5ff4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b5ff4:	b508      	push	{r3, lr}
   b5ff6:	4b02      	ldr	r3, [pc, #8]	; (b6000 <os_mutex_recursive_destroy+0xc>)
   b5ff8:	681b      	ldr	r3, [r3, #0]
   b5ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5ffc:	9301      	str	r3, [sp, #4]
   b5ffe:	bd08      	pop	{r3, pc}
   b6000:	00030248 	.word	0x00030248

000b6004 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b6004:	b508      	push	{r3, lr}
   b6006:	4b02      	ldr	r3, [pc, #8]	; (b6010 <os_mutex_recursive_lock+0xc>)
   b6008:	681b      	ldr	r3, [r3, #0]
   b600a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b600c:	9301      	str	r3, [sp, #4]
   b600e:	bd08      	pop	{r3, pc}
   b6010:	00030248 	.word	0x00030248

000b6014 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b6014:	b508      	push	{r3, lr}
   b6016:	4b02      	ldr	r3, [pc, #8]	; (b6020 <os_mutex_recursive_unlock+0xc>)
   b6018:	681b      	ldr	r3, [r3, #0]
   b601a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b601c:	9301      	str	r3, [sp, #4]
   b601e:	bd08      	pop	{r3, pc}
   b6020:	00030248 	.word	0x00030248

000b6024 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6024:	b508      	push	{r3, lr}
   b6026:	4b02      	ldr	r3, [pc, #8]	; (b6030 <HAL_RNG_GetRandomNumber+0xc>)
   b6028:	681b      	ldr	r3, [r3, #0]
   b602a:	685b      	ldr	r3, [r3, #4]
   b602c:	9301      	str	r3, [sp, #4]
   b602e:	bd08      	pop	{r3, pc}
   b6030:	00030218 	.word	0x00030218

000b6034 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6034:	b508      	push	{r3, lr}
   b6036:	4b02      	ldr	r3, [pc, #8]	; (b6040 <HAL_Delay_Microseconds+0xc>)
   b6038:	681b      	ldr	r3, [r3, #0]
   b603a:	68db      	ldr	r3, [r3, #12]
   b603c:	9301      	str	r3, [sp, #4]
   b603e:	bd08      	pop	{r3, pc}
   b6040:	00030218 	.word	0x00030218

000b6044 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6044:	b508      	push	{r3, lr}
   b6046:	4b02      	ldr	r3, [pc, #8]	; (b6050 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6048:	681b      	ldr	r3, [r3, #0]
   b604a:	695b      	ldr	r3, [r3, #20]
   b604c:	9301      	str	r3, [sp, #4]
   b604e:	bd08      	pop	{r3, pc}
   b6050:	00030218 	.word	0x00030218

000b6054 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b6054:	b508      	push	{r3, lr}
   b6056:	4b02      	ldr	r3, [pc, #8]	; (b6060 <HAL_EEPROM_Init+0xc>)
   b6058:	681b      	ldr	r3, [r3, #0]
   b605a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b605c:	9301      	str	r3, [sp, #4]
   b605e:	bd08      	pop	{r3, pc}
   b6060:	00030218 	.word	0x00030218

000b6064 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   b6064:	b508      	push	{r3, lr}
   b6066:	4b02      	ldr	r3, [pc, #8]	; (b6070 <HAL_EEPROM_Get+0xc>)
   b6068:	681b      	ldr	r3, [r3, #0]
   b606a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b606c:	9301      	str	r3, [sp, #4]
   b606e:	bd08      	pop	{r3, pc}
   b6070:	00030218 	.word	0x00030218

000b6074 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   b6074:	b508      	push	{r3, lr}
   b6076:	4b02      	ldr	r3, [pc, #8]	; (b6080 <HAL_EEPROM_Put+0xc>)
   b6078:	681b      	ldr	r3, [r3, #0]
   b607a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b607c:	9301      	str	r3, [sp, #4]
   b607e:	bd08      	pop	{r3, pc}
   b6080:	00030218 	.word	0x00030218

000b6084 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b6084:	b508      	push	{r3, lr}
   b6086:	4b02      	ldr	r3, [pc, #8]	; (b6090 <hal_rtc_time_is_valid+0xc>)
   b6088:	681b      	ldr	r3, [r3, #0]
   b608a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b608c:	9301      	str	r3, [sp, #4]
   b608e:	bd08      	pop	{r3, pc}
   b6090:	00030218 	.word	0x00030218

000b6094 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b6094:	b508      	push	{r3, lr}
   b6096:	4b02      	ldr	r3, [pc, #8]	; (b60a0 <hal_rtc_get_time+0xc>)
   b6098:	681b      	ldr	r3, [r3, #0]
   b609a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b609c:	9301      	str	r3, [sp, #4]
   b609e:	bd08      	pop	{r3, pc}
   b60a0:	00030218 	.word	0x00030218

000b60a4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b60a4:	b508      	push	{r3, lr}
   b60a6:	4b02      	ldr	r3, [pc, #8]	; (b60b0 <HAL_Pin_Mode+0xc>)
   b60a8:	681b      	ldr	r3, [r3, #0]
   b60aa:	689b      	ldr	r3, [r3, #8]
   b60ac:	9301      	str	r3, [sp, #4]
   b60ae:	bd08      	pop	{r3, pc}
   b60b0:	0003022c 	.word	0x0003022c

000b60b4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b60b4:	b508      	push	{r3, lr}
   b60b6:	4b02      	ldr	r3, [pc, #8]	; (b60c0 <HAL_Get_Pin_Mode+0xc>)
   b60b8:	681b      	ldr	r3, [r3, #0]
   b60ba:	68db      	ldr	r3, [r3, #12]
   b60bc:	9301      	str	r3, [sp, #4]
   b60be:	bd08      	pop	{r3, pc}
   b60c0:	0003022c 	.word	0x0003022c

000b60c4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b60c4:	b508      	push	{r3, lr}
   b60c6:	4b02      	ldr	r3, [pc, #8]	; (b60d0 <HAL_GPIO_Write+0xc>)
   b60c8:	681b      	ldr	r3, [r3, #0]
   b60ca:	691b      	ldr	r3, [r3, #16]
   b60cc:	9301      	str	r3, [sp, #4]
   b60ce:	bd08      	pop	{r3, pc}
   b60d0:	0003022c 	.word	0x0003022c

000b60d4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b60d4:	b508      	push	{r3, lr}
   b60d6:	4b02      	ldr	r3, [pc, #8]	; (b60e0 <HAL_GPIO_Read+0xc>)
   b60d8:	681b      	ldr	r3, [r3, #0]
   b60da:	695b      	ldr	r3, [r3, #20]
   b60dc:	9301      	str	r3, [sp, #4]
   b60de:	bd08      	pop	{r3, pc}
   b60e0:	0003022c 	.word	0x0003022c

000b60e4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b60e4:	b508      	push	{r3, lr}
   b60e6:	4b02      	ldr	r3, [pc, #8]	; (b60f0 <hal_i2c_begin+0xc>)
   b60e8:	681b      	ldr	r3, [r3, #0]
   b60ea:	68db      	ldr	r3, [r3, #12]
   b60ec:	9301      	str	r3, [sp, #4]
   b60ee:	bd08      	pop	{r3, pc}
   b60f0:	00030228 	.word	0x00030228

000b60f4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b60f4:	b508      	push	{r3, lr}
   b60f6:	4b02      	ldr	r3, [pc, #8]	; (b6100 <hal_i2c_begin_transmission+0xc>)
   b60f8:	681b      	ldr	r3, [r3, #0]
   b60fa:	699b      	ldr	r3, [r3, #24]
   b60fc:	9301      	str	r3, [sp, #4]
   b60fe:	bd08      	pop	{r3, pc}
   b6100:	00030228 	.word	0x00030228

000b6104 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6104:	b508      	push	{r3, lr}
   b6106:	4b02      	ldr	r3, [pc, #8]	; (b6110 <hal_i2c_end_transmission+0xc>)
   b6108:	681b      	ldr	r3, [r3, #0]
   b610a:	69db      	ldr	r3, [r3, #28]
   b610c:	9301      	str	r3, [sp, #4]
   b610e:	bd08      	pop	{r3, pc}
   b6110:	00030228 	.word	0x00030228

000b6114 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6114:	b508      	push	{r3, lr}
   b6116:	4b02      	ldr	r3, [pc, #8]	; (b6120 <hal_i2c_write+0xc>)
   b6118:	681b      	ldr	r3, [r3, #0]
   b611a:	6a1b      	ldr	r3, [r3, #32]
   b611c:	9301      	str	r3, [sp, #4]
   b611e:	bd08      	pop	{r3, pc}
   b6120:	00030228 	.word	0x00030228

000b6124 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6124:	b508      	push	{r3, lr}
   b6126:	4b02      	ldr	r3, [pc, #8]	; (b6130 <hal_i2c_available+0xc>)
   b6128:	681b      	ldr	r3, [r3, #0]
   b612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b612c:	9301      	str	r3, [sp, #4]
   b612e:	bd08      	pop	{r3, pc}
   b6130:	00030228 	.word	0x00030228

000b6134 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6134:	b508      	push	{r3, lr}
   b6136:	4b02      	ldr	r3, [pc, #8]	; (b6140 <hal_i2c_read+0xc>)
   b6138:	681b      	ldr	r3, [r3, #0]
   b613a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b613c:	9301      	str	r3, [sp, #4]
   b613e:	bd08      	pop	{r3, pc}
   b6140:	00030228 	.word	0x00030228

000b6144 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6144:	b508      	push	{r3, lr}
   b6146:	4b02      	ldr	r3, [pc, #8]	; (b6150 <hal_i2c_peek+0xc>)
   b6148:	681b      	ldr	r3, [r3, #0]
   b614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b614c:	9301      	str	r3, [sp, #4]
   b614e:	bd08      	pop	{r3, pc}
   b6150:	00030228 	.word	0x00030228

000b6154 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6154:	b508      	push	{r3, lr}
   b6156:	4b02      	ldr	r3, [pc, #8]	; (b6160 <hal_i2c_flush+0xc>)
   b6158:	681b      	ldr	r3, [r3, #0]
   b615a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b615c:	9301      	str	r3, [sp, #4]
   b615e:	bd08      	pop	{r3, pc}
   b6160:	00030228 	.word	0x00030228

000b6164 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6164:	b508      	push	{r3, lr}
   b6166:	4b02      	ldr	r3, [pc, #8]	; (b6170 <hal_i2c_is_enabled+0xc>)
   b6168:	681b      	ldr	r3, [r3, #0]
   b616a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b616c:	9301      	str	r3, [sp, #4]
   b616e:	bd08      	pop	{r3, pc}
   b6170:	00030228 	.word	0x00030228

000b6174 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6174:	b508      	push	{r3, lr}
   b6176:	4b02      	ldr	r3, [pc, #8]	; (b6180 <hal_i2c_init+0xc>)
   b6178:	681b      	ldr	r3, [r3, #0]
   b617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b617c:	9301      	str	r3, [sp, #4]
   b617e:	bd08      	pop	{r3, pc}
   b6180:	00030228 	.word	0x00030228

000b6184 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b6184:	b508      	push	{r3, lr}
   b6186:	4b02      	ldr	r3, [pc, #8]	; (b6190 <hal_i2c_request_ex+0xc>)
   b6188:	681b      	ldr	r3, [r3, #0]
   b618a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b618c:	9301      	str	r3, [sp, #4]
   b618e:	bd08      	pop	{r3, pc}
   b6190:	00030228 	.word	0x00030228

000b6194 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6194:	b508      	push	{r3, lr}
   b6196:	4b02      	ldr	r3, [pc, #8]	; (b61a0 <if_index_to_name+0xc>)
   b6198:	681b      	ldr	r3, [r3, #0]
   b619a:	695b      	ldr	r3, [r3, #20]
   b619c:	9301      	str	r3, [sp, #4]
   b619e:	bd08      	pop	{r3, pc}
   b61a0:	0003026c 	.word	0x0003026c

000b61a4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b61a4:	b508      	push	{r3, lr}
   b61a6:	4b02      	ldr	r3, [pc, #8]	; (b61b0 <inet_inet_ntop+0xc>)
   b61a8:	681b      	ldr	r3, [r3, #0]
   b61aa:	695b      	ldr	r3, [r3, #20]
   b61ac:	9301      	str	r3, [sp, #4]
   b61ae:	bd08      	pop	{r3, pc}
   b61b0:	00030264 	.word	0x00030264

000b61b4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b61b4:	b508      	push	{r3, lr}
   b61b6:	4b02      	ldr	r3, [pc, #8]	; (b61c0 <inet_htonl+0xc>)
   b61b8:	681b      	ldr	r3, [r3, #0]
   b61ba:	6a1b      	ldr	r3, [r3, #32]
   b61bc:	9301      	str	r3, [sp, #4]
   b61be:	bd08      	pop	{r3, pc}
   b61c0:	00030264 	.word	0x00030264

000b61c4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b61c4:	b508      	push	{r3, lr}
   b61c6:	4b02      	ldr	r3, [pc, #8]	; (b61d0 <inet_htons+0xc>)
   b61c8:	681b      	ldr	r3, [r3, #0]
   b61ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b61cc:	9301      	str	r3, [sp, #4]
   b61ce:	bd08      	pop	{r3, pc}
   b61d0:	00030264 	.word	0x00030264

000b61d4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b61d4:	b508      	push	{r3, lr}
   b61d6:	4b02      	ldr	r3, [pc, #8]	; (b61e0 <netdb_freeaddrinfo+0xc>)
   b61d8:	681b      	ldr	r3, [r3, #0]
   b61da:	689b      	ldr	r3, [r3, #8]
   b61dc:	9301      	str	r3, [sp, #4]
   b61de:	bd08      	pop	{r3, pc}
   b61e0:	00030268 	.word	0x00030268

000b61e4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b61e4:	b508      	push	{r3, lr}
   b61e6:	4b02      	ldr	r3, [pc, #8]	; (b61f0 <netdb_getaddrinfo+0xc>)
   b61e8:	681b      	ldr	r3, [r3, #0]
   b61ea:	68db      	ldr	r3, [r3, #12]
   b61ec:	9301      	str	r3, [sp, #4]
   b61ee:	bd08      	pop	{r3, pc}
   b61f0:	00030268 	.word	0x00030268

000b61f4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b61f4:	b508      	push	{r3, lr}
   b61f6:	4b02      	ldr	r3, [pc, #8]	; (b6200 <sock_setsockopt+0xc>)
   b61f8:	681b      	ldr	r3, [r3, #0]
   b61fa:	699b      	ldr	r3, [r3, #24]
   b61fc:	9301      	str	r3, [sp, #4]
   b61fe:	bd08      	pop	{r3, pc}
   b6200:	00030238 	.word	0x00030238

000b6204 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6204:	b508      	push	{r3, lr}
   b6206:	4b02      	ldr	r3, [pc, #8]	; (b6210 <sock_close+0xc>)
   b6208:	681b      	ldr	r3, [r3, #0]
   b620a:	69db      	ldr	r3, [r3, #28]
   b620c:	9301      	str	r3, [sp, #4]
   b620e:	bd08      	pop	{r3, pc}
   b6210:	00030238 	.word	0x00030238

000b6214 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6214:	b508      	push	{r3, lr}
   b6216:	4b02      	ldr	r3, [pc, #8]	; (b6220 <sock_connect+0xc>)
   b6218:	681b      	ldr	r3, [r3, #0]
   b621a:	6a1b      	ldr	r3, [r3, #32]
   b621c:	9301      	str	r3, [sp, #4]
   b621e:	bd08      	pop	{r3, pc}
   b6220:	00030238 	.word	0x00030238

000b6224 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6224:	b508      	push	{r3, lr}
   b6226:	4b02      	ldr	r3, [pc, #8]	; (b6230 <sock_recv+0xc>)
   b6228:	681b      	ldr	r3, [r3, #0]
   b622a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b622c:	9301      	str	r3, [sp, #4]
   b622e:	bd08      	pop	{r3, pc}
   b6230:	00030238 	.word	0x00030238

000b6234 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6234:	b508      	push	{r3, lr}
   b6236:	4b02      	ldr	r3, [pc, #8]	; (b6240 <sock_send+0xc>)
   b6238:	681b      	ldr	r3, [r3, #0]
   b623a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b623c:	9301      	str	r3, [sp, #4]
   b623e:	bd08      	pop	{r3, pc}
   b6240:	00030238 	.word	0x00030238

000b6244 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6244:	b508      	push	{r3, lr}
   b6246:	4b02      	ldr	r3, [pc, #8]	; (b6250 <sock_socket+0xc>)
   b6248:	681b      	ldr	r3, [r3, #0]
   b624a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b624c:	9301      	str	r3, [sp, #4]
   b624e:	bd08      	pop	{r3, pc}
   b6250:	00030238 	.word	0x00030238

000b6254 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6254:	b508      	push	{r3, lr}
   b6256:	4b02      	ldr	r3, [pc, #8]	; (b6260 <hal_spi_begin+0xc>)
   b6258:	681b      	ldr	r3, [r3, #0]
   b625a:	681b      	ldr	r3, [r3, #0]
   b625c:	9301      	str	r3, [sp, #4]
   b625e:	bd08      	pop	{r3, pc}
   b6260:	00030230 	.word	0x00030230

000b6264 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b6264:	b508      	push	{r3, lr}
   b6266:	4b02      	ldr	r3, [pc, #8]	; (b6270 <hal_spi_set_bit_order+0xc>)
   b6268:	681b      	ldr	r3, [r3, #0]
   b626a:	689b      	ldr	r3, [r3, #8]
   b626c:	9301      	str	r3, [sp, #4]
   b626e:	bd08      	pop	{r3, pc}
   b6270:	00030230 	.word	0x00030230

000b6274 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b6274:	b508      	push	{r3, lr}
   b6276:	4b02      	ldr	r3, [pc, #8]	; (b6280 <hal_spi_set_data_mode+0xc>)
   b6278:	681b      	ldr	r3, [r3, #0]
   b627a:	68db      	ldr	r3, [r3, #12]
   b627c:	9301      	str	r3, [sp, #4]
   b627e:	bd08      	pop	{r3, pc}
   b6280:	00030230 	.word	0x00030230

000b6284 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b6284:	b508      	push	{r3, lr}
   b6286:	4b02      	ldr	r3, [pc, #8]	; (b6290 <hal_spi_set_clock_divider+0xc>)
   b6288:	681b      	ldr	r3, [r3, #0]
   b628a:	691b      	ldr	r3, [r3, #16]
   b628c:	9301      	str	r3, [sp, #4]
   b628e:	bd08      	pop	{r3, pc}
   b6290:	00030230 	.word	0x00030230

000b6294 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6294:	b508      	push	{r3, lr}
   b6296:	4b02      	ldr	r3, [pc, #8]	; (b62a0 <hal_spi_transfer+0xc>)
   b6298:	681b      	ldr	r3, [r3, #0]
   b629a:	695b      	ldr	r3, [r3, #20]
   b629c:	9301      	str	r3, [sp, #4]
   b629e:	bd08      	pop	{r3, pc}
   b62a0:	00030230 	.word	0x00030230

000b62a4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b62a4:	b508      	push	{r3, lr}
   b62a6:	4b02      	ldr	r3, [pc, #8]	; (b62b0 <hal_spi_init+0xc>)
   b62a8:	681b      	ldr	r3, [r3, #0]
   b62aa:	69db      	ldr	r3, [r3, #28]
   b62ac:	9301      	str	r3, [sp, #4]
   b62ae:	bd08      	pop	{r3, pc}
   b62b0:	00030230 	.word	0x00030230

000b62b4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b62b4:	b508      	push	{r3, lr}
   b62b6:	4b02      	ldr	r3, [pc, #8]	; (b62c0 <hal_spi_is_enabled+0xc>)
   b62b8:	681b      	ldr	r3, [r3, #0]
   b62ba:	6a1b      	ldr	r3, [r3, #32]
   b62bc:	9301      	str	r3, [sp, #4]
   b62be:	bd08      	pop	{r3, pc}
   b62c0:	00030230 	.word	0x00030230

000b62c4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b62c4:	b508      	push	{r3, lr}
   b62c6:	4b02      	ldr	r3, [pc, #8]	; (b62d0 <hal_spi_info+0xc>)
   b62c8:	681b      	ldr	r3, [r3, #0]
   b62ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b62cc:	9301      	str	r3, [sp, #4]
   b62ce:	bd08      	pop	{r3, pc}
   b62d0:	00030230 	.word	0x00030230

000b62d4 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b62d4:	b508      	push	{r3, lr}
   b62d6:	4b02      	ldr	r3, [pc, #8]	; (b62e0 <hal_spi_acquire+0xc>)
   b62d8:	681b      	ldr	r3, [r3, #0]
   b62da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b62dc:	9301      	str	r3, [sp, #4]
   b62de:	bd08      	pop	{r3, pc}
   b62e0:	00030230 	.word	0x00030230

000b62e4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b62e4:	b508      	push	{r3, lr}
   b62e6:	4b02      	ldr	r3, [pc, #8]	; (b62f0 <hal_spi_release+0xc>)
   b62e8:	681b      	ldr	r3, [r3, #0]
   b62ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b62ec:	9301      	str	r3, [sp, #4]
   b62ee:	bd08      	pop	{r3, pc}
   b62f0:	00030230 	.word	0x00030230

000b62f4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   b62f4:	b508      	push	{r3, lr}
   b62f6:	4b02      	ldr	r3, [pc, #8]	; (b6300 <hal_usart_init+0xc>)
   b62f8:	681b      	ldr	r3, [r3, #0]
   b62fa:	681b      	ldr	r3, [r3, #0]
   b62fc:	9301      	str	r3, [sp, #4]
   b62fe:	bd08      	pop	{r3, pc}
   b6300:	0003023c 	.word	0x0003023c

000b6304 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6304:	b508      	push	{r3, lr}
   b6306:	4b02      	ldr	r3, [pc, #8]	; (b6310 <hal_usart_write+0xc>)
   b6308:	681b      	ldr	r3, [r3, #0]
   b630a:	68db      	ldr	r3, [r3, #12]
   b630c:	9301      	str	r3, [sp, #4]
   b630e:	bd08      	pop	{r3, pc}
   b6310:	0003023c 	.word	0x0003023c

000b6314 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6314:	b508      	push	{r3, lr}
   b6316:	4b02      	ldr	r3, [pc, #8]	; (b6320 <hal_usart_available+0xc>)
   b6318:	681b      	ldr	r3, [r3, #0]
   b631a:	691b      	ldr	r3, [r3, #16]
   b631c:	9301      	str	r3, [sp, #4]
   b631e:	bd08      	pop	{r3, pc}
   b6320:	0003023c 	.word	0x0003023c

000b6324 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6324:	b508      	push	{r3, lr}
   b6326:	4b02      	ldr	r3, [pc, #8]	; (b6330 <hal_usart_read+0xc>)
   b6328:	681b      	ldr	r3, [r3, #0]
   b632a:	695b      	ldr	r3, [r3, #20]
   b632c:	9301      	str	r3, [sp, #4]
   b632e:	bd08      	pop	{r3, pc}
   b6330:	0003023c 	.word	0x0003023c

000b6334 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6334:	b508      	push	{r3, lr}
   b6336:	4b02      	ldr	r3, [pc, #8]	; (b6340 <hal_usart_peek+0xc>)
   b6338:	681b      	ldr	r3, [r3, #0]
   b633a:	699b      	ldr	r3, [r3, #24]
   b633c:	9301      	str	r3, [sp, #4]
   b633e:	bd08      	pop	{r3, pc}
   b6340:	0003023c 	.word	0x0003023c

000b6344 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6344:	b508      	push	{r3, lr}
   b6346:	4b02      	ldr	r3, [pc, #8]	; (b6350 <hal_usart_flush+0xc>)
   b6348:	681b      	ldr	r3, [r3, #0]
   b634a:	69db      	ldr	r3, [r3, #28]
   b634c:	9301      	str	r3, [sp, #4]
   b634e:	bd08      	pop	{r3, pc}
   b6350:	0003023c 	.word	0x0003023c

000b6354 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6354:	b508      	push	{r3, lr}
   b6356:	4b02      	ldr	r3, [pc, #8]	; (b6360 <hal_usart_is_enabled+0xc>)
   b6358:	681b      	ldr	r3, [r3, #0]
   b635a:	6a1b      	ldr	r3, [r3, #32]
   b635c:	9301      	str	r3, [sp, #4]
   b635e:	bd08      	pop	{r3, pc}
   b6360:	0003023c 	.word	0x0003023c

000b6364 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6364:	b508      	push	{r3, lr}
   b6366:	4b02      	ldr	r3, [pc, #8]	; (b6370 <hal_usart_available_data_for_write+0xc>)
   b6368:	681b      	ldr	r3, [r3, #0]
   b636a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b636c:	9301      	str	r3, [sp, #4]
   b636e:	bd08      	pop	{r3, pc}
   b6370:	0003023c 	.word	0x0003023c

000b6374 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6374:	b508      	push	{r3, lr}
   b6376:	4b02      	ldr	r3, [pc, #8]	; (b6380 <HAL_USB_USART_Init+0xc>)
   b6378:	681b      	ldr	r3, [r3, #0]
   b637a:	681b      	ldr	r3, [r3, #0]
   b637c:	9301      	str	r3, [sp, #4]
   b637e:	bd08      	pop	{r3, pc}
   b6380:	0003024c 	.word	0x0003024c

000b6384 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6384:	b508      	push	{r3, lr}
   b6386:	4b02      	ldr	r3, [pc, #8]	; (b6390 <HAL_USB_USART_Begin+0xc>)
   b6388:	681b      	ldr	r3, [r3, #0]
   b638a:	685b      	ldr	r3, [r3, #4]
   b638c:	9301      	str	r3, [sp, #4]
   b638e:	bd08      	pop	{r3, pc}
   b6390:	0003024c 	.word	0x0003024c

000b6394 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6394:	b508      	push	{r3, lr}
   b6396:	4b02      	ldr	r3, [pc, #8]	; (b63a0 <HAL_USB_USART_Available_Data+0xc>)
   b6398:	681b      	ldr	r3, [r3, #0]
   b639a:	691b      	ldr	r3, [r3, #16]
   b639c:	9301      	str	r3, [sp, #4]
   b639e:	bd08      	pop	{r3, pc}
   b63a0:	0003024c 	.word	0x0003024c

000b63a4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b63a4:	b508      	push	{r3, lr}
   b63a6:	4b02      	ldr	r3, [pc, #8]	; (b63b0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b63a8:	681b      	ldr	r3, [r3, #0]
   b63aa:	695b      	ldr	r3, [r3, #20]
   b63ac:	9301      	str	r3, [sp, #4]
   b63ae:	bd08      	pop	{r3, pc}
   b63b0:	0003024c 	.word	0x0003024c

000b63b4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b63b4:	b508      	push	{r3, lr}
   b63b6:	4b02      	ldr	r3, [pc, #8]	; (b63c0 <HAL_USB_USART_Receive_Data+0xc>)
   b63b8:	681b      	ldr	r3, [r3, #0]
   b63ba:	699b      	ldr	r3, [r3, #24]
   b63bc:	9301      	str	r3, [sp, #4]
   b63be:	bd08      	pop	{r3, pc}
   b63c0:	0003024c 	.word	0x0003024c

000b63c4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b63c4:	b508      	push	{r3, lr}
   b63c6:	4b02      	ldr	r3, [pc, #8]	; (b63d0 <HAL_USB_USART_Send_Data+0xc>)
   b63c8:	681b      	ldr	r3, [r3, #0]
   b63ca:	69db      	ldr	r3, [r3, #28]
   b63cc:	9301      	str	r3, [sp, #4]
   b63ce:	bd08      	pop	{r3, pc}
   b63d0:	0003024c 	.word	0x0003024c

000b63d4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b63d4:	b508      	push	{r3, lr}
   b63d6:	4b02      	ldr	r3, [pc, #8]	; (b63e0 <HAL_USB_USART_Flush_Data+0xc>)
   b63d8:	681b      	ldr	r3, [r3, #0]
   b63da:	6a1b      	ldr	r3, [r3, #32]
   b63dc:	9301      	str	r3, [sp, #4]
   b63de:	bd08      	pop	{r3, pc}
   b63e0:	0003024c 	.word	0x0003024c

000b63e4 <wlan_get_credentials>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
   b63e4:	b508      	push	{r3, lr}
   b63e6:	4b02      	ldr	r3, [pc, #8]	; (b63f0 <wlan_get_credentials+0xc>)
   b63e8:	681b      	ldr	r3, [r3, #0]
   b63ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b63ec:	9301      	str	r3, [sp, #4]
   b63ee:	bd08      	pop	{r3, pc}
   b63f0:	00030274 	.word	0x00030274

000b63f4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b63f4:	b508      	push	{r3, lr}
   b63f6:	4b02      	ldr	r3, [pc, #8]	; (b6400 <panic_+0xc>)
   b63f8:	681b      	ldr	r3, [r3, #0]
   b63fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b63fc:	9301      	str	r3, [sp, #4]
   b63fe:	bd08      	pop	{r3, pc}
   b6400:	00030260 	.word	0x00030260

000b6404 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6404:	b508      	push	{r3, lr}
   b6406:	4b02      	ldr	r3, [pc, #8]	; (b6410 <log_message+0xc>)
   b6408:	681b      	ldr	r3, [r3, #0]
   b640a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b640c:	9301      	str	r3, [sp, #4]
   b640e:	bd08      	pop	{r3, pc}
   b6410:	00030260 	.word	0x00030260

000b6414 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6414:	b508      	push	{r3, lr}
   b6416:	4b02      	ldr	r3, [pc, #8]	; (b6420 <system_mode+0xc>)
   b6418:	681b      	ldr	r3, [r3, #0]
   b641a:	681b      	ldr	r3, [r3, #0]
   b641c:	9301      	str	r3, [sp, #4]
   b641e:	bd08      	pop	{r3, pc}
   b6420:	00030220 	.word	0x00030220

000b6424 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6424:	b508      	push	{r3, lr}
   b6426:	4b02      	ldr	r3, [pc, #8]	; (b6430 <set_system_mode+0xc>)
   b6428:	681b      	ldr	r3, [r3, #0]
   b642a:	685b      	ldr	r3, [r3, #4]
   b642c:	9301      	str	r3, [sp, #4]
   b642e:	bd08      	pop	{r3, pc}
   b6430:	00030220 	.word	0x00030220

000b6434 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6434:	b508      	push	{r3, lr}
   b6436:	4b02      	ldr	r3, [pc, #8]	; (b6440 <system_delay_ms+0xc>)
   b6438:	681b      	ldr	r3, [r3, #0]
   b643a:	695b      	ldr	r3, [r3, #20]
   b643c:	9301      	str	r3, [sp, #4]
   b643e:	bd08      	pop	{r3, pc}
   b6440:	00030220 	.word	0x00030220

000b6444 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6444:	b508      	push	{r3, lr}
   b6446:	4b02      	ldr	r3, [pc, #8]	; (b6450 <system_thread_set_state+0xc>)
   b6448:	681b      	ldr	r3, [r3, #0]
   b644a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b644c:	9301      	str	r3, [sp, #4]
   b644e:	bd08      	pop	{r3, pc}
   b6450:	00030220 	.word	0x00030220

000b6454 <system_internal>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
   b6454:	b508      	push	{r3, lr}
   b6456:	4b02      	ldr	r3, [pc, #8]	; (b6460 <system_internal+0xc>)
   b6458:	681b      	ldr	r3, [r3, #0]
   b645a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b645c:	9301      	str	r3, [sp, #4]
   b645e:	bd08      	pop	{r3, pc}
   b6460:	00030220 	.word	0x00030220

000b6464 <system_set_flag>:
DYNALIB_FN(14, system, system_set_flag, int(system_flag_t, uint8_t, void*))
   b6464:	b508      	push	{r3, lr}
   b6466:	4b02      	ldr	r3, [pc, #8]	; (b6470 <system_set_flag+0xc>)
   b6468:	681b      	ldr	r3, [r3, #0]
   b646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b646c:	9301      	str	r3, [sp, #4]
   b646e:	bd08      	pop	{r3, pc}
   b6470:	00030220 	.word	0x00030220

000b6474 <system_get_flag>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
   b6474:	b508      	push	{r3, lr}
   b6476:	4b02      	ldr	r3, [pc, #8]	; (b6480 <system_get_flag+0xc>)
   b6478:	681b      	ldr	r3, [r3, #0]
   b647a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b647c:	9301      	str	r3, [sp, #4]
   b647e:	bd08      	pop	{r3, pc}
   b6480:	00030220 	.word	0x00030220

000b6484 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b6484:	b508      	push	{r3, lr}
   b6486:	4b02      	ldr	r3, [pc, #8]	; (b6490 <system_thread_get_state+0xc>)
   b6488:	681b      	ldr	r3, [r3, #0]
   b648a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b648c:	9301      	str	r3, [sp, #4]
   b648e:	bd08      	pop	{r3, pc}
   b6490:	00030220 	.word	0x00030220

000b6494 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6494:	b508      	push	{r3, lr}
   b6496:	4b03      	ldr	r3, [pc, #12]	; (b64a4 <system_ctrl_set_app_request_handler+0x10>)
   b6498:	681b      	ldr	r3, [r3, #0]
   b649a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b649e:	9301      	str	r3, [sp, #4]
   b64a0:	bd08      	pop	{r3, pc}
   b64a2:	0000      	.short	0x0000
   b64a4:	00030220 	.word	0x00030220

000b64a8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b64a8:	b508      	push	{r3, lr}
   b64aa:	4b03      	ldr	r3, [pc, #12]	; (b64b8 <system_ctrl_set_result+0x10>)
   b64ac:	681b      	ldr	r3, [r3, #0]
   b64ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b64b2:	9301      	str	r3, [sp, #4]
   b64b4:	bd08      	pop	{r3, pc}
   b64b6:	0000      	.short	0x0000
   b64b8:	00030220 	.word	0x00030220

000b64bc <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b64bc:	b508      	push	{r3, lr}
   b64be:	4b03      	ldr	r3, [pc, #12]	; (b64cc <system_reset+0x10>)
   b64c0:	681b      	ldr	r3, [r3, #0]
   b64c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b64c6:	9301      	str	r3, [sp, #4]
   b64c8:	bd08      	pop	{r3, pc}
   b64ca:	0000      	.short	0x0000
   b64cc:	00030220 	.word	0x00030220

000b64d0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b64d0:	b508      	push	{r3, lr}
   b64d2:	4b02      	ldr	r3, [pc, #8]	; (b64dc <spark_process+0xc>)
   b64d4:	681b      	ldr	r3, [r3, #0]
   b64d6:	689b      	ldr	r3, [r3, #8]
   b64d8:	9301      	str	r3, [sp, #4]
   b64da:	bd08      	pop	{r3, pc}
   b64dc:	00030244 	.word	0x00030244

000b64e0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b64e0:	b508      	push	{r3, lr}
   b64e2:	4b02      	ldr	r3, [pc, #8]	; (b64ec <spark_cloud_flag_connect+0xc>)
   b64e4:	681b      	ldr	r3, [r3, #0]
   b64e6:	68db      	ldr	r3, [r3, #12]
   b64e8:	9301      	str	r3, [sp, #4]
   b64ea:	bd08      	pop	{r3, pc}
   b64ec:	00030244 	.word	0x00030244

000b64f0 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b64f0:	b508      	push	{r3, lr}
   b64f2:	4b02      	ldr	r3, [pc, #8]	; (b64fc <spark_cloud_flag_connected+0xc>)
   b64f4:	681b      	ldr	r3, [r3, #0]
   b64f6:	695b      	ldr	r3, [r3, #20]
   b64f8:	9301      	str	r3, [sp, #4]
   b64fa:	bd08      	pop	{r3, pc}
   b64fc:	00030244 	.word	0x00030244

000b6500 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b6500:	b508      	push	{r3, lr}
   b6502:	4b02      	ldr	r3, [pc, #8]	; (b650c <spark_sync_time+0xc>)
   b6504:	681b      	ldr	r3, [r3, #0]
   b6506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6508:	9301      	str	r3, [sp, #4]
   b650a:	bd08      	pop	{r3, pc}
   b650c:	00030244 	.word	0x00030244

000b6510 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6510:	b508      	push	{r3, lr}
   b6512:	4b02      	ldr	r3, [pc, #8]	; (b651c <spark_sync_time_pending+0xc>)
   b6514:	681b      	ldr	r3, [r3, #0]
   b6516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6518:	9301      	str	r3, [sp, #4]
   b651a:	bd08      	pop	{r3, pc}
   b651c:	00030244 	.word	0x00030244

000b6520 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6520:	b508      	push	{r3, lr}
   b6522:	4b02      	ldr	r3, [pc, #8]	; (b652c <spark_set_random_seed_from_cloud_handler+0xc>)
   b6524:	681b      	ldr	r3, [r3, #0]
   b6526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6528:	9301      	str	r3, [sp, #4]
   b652a:	bd08      	pop	{r3, pc}
   b652c:	00030244 	.word	0x00030244

000b6530 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6530:	b508      	push	{r3, lr}
   b6532:	4b02      	ldr	r3, [pc, #8]	; (b653c <network_connect+0xc>)
   b6534:	681b      	ldr	r3, [r3, #0]
   b6536:	685b      	ldr	r3, [r3, #4]
   b6538:	9301      	str	r3, [sp, #4]
   b653a:	bd08      	pop	{r3, pc}
   b653c:	00030240 	.word	0x00030240

000b6540 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6540:	b508      	push	{r3, lr}
   b6542:	4b02      	ldr	r3, [pc, #8]	; (b654c <network_connecting+0xc>)
   b6544:	681b      	ldr	r3, [r3, #0]
   b6546:	689b      	ldr	r3, [r3, #8]
   b6548:	9301      	str	r3, [sp, #4]
   b654a:	bd08      	pop	{r3, pc}
   b654c:	00030240 	.word	0x00030240

000b6550 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6550:	b508      	push	{r3, lr}
   b6552:	4b02      	ldr	r3, [pc, #8]	; (b655c <network_disconnect+0xc>)
   b6554:	681b      	ldr	r3, [r3, #0]
   b6556:	68db      	ldr	r3, [r3, #12]
   b6558:	9301      	str	r3, [sp, #4]
   b655a:	bd08      	pop	{r3, pc}
   b655c:	00030240 	.word	0x00030240

000b6560 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6560:	b508      	push	{r3, lr}
   b6562:	4b02      	ldr	r3, [pc, #8]	; (b656c <network_ready+0xc>)
   b6564:	681b      	ldr	r3, [r3, #0]
   b6566:	691b      	ldr	r3, [r3, #16]
   b6568:	9301      	str	r3, [sp, #4]
   b656a:	bd08      	pop	{r3, pc}
   b656c:	00030240 	.word	0x00030240

000b6570 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6570:	b508      	push	{r3, lr}
   b6572:	4b02      	ldr	r3, [pc, #8]	; (b657c <network_on+0xc>)
   b6574:	681b      	ldr	r3, [r3, #0]
   b6576:	695b      	ldr	r3, [r3, #20]
   b6578:	9301      	str	r3, [sp, #4]
   b657a:	bd08      	pop	{r3, pc}
   b657c:	00030240 	.word	0x00030240

000b6580 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6580:	b508      	push	{r3, lr}
   b6582:	4b02      	ldr	r3, [pc, #8]	; (b658c <network_off+0xc>)
   b6584:	681b      	ldr	r3, [r3, #0]
   b6586:	699b      	ldr	r3, [r3, #24]
   b6588:	9301      	str	r3, [sp, #4]
   b658a:	bd08      	pop	{r3, pc}
   b658c:	00030240 	.word	0x00030240

000b6590 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6590:	b508      	push	{r3, lr}
   b6592:	4b02      	ldr	r3, [pc, #8]	; (b659c <network_listen+0xc>)
   b6594:	681b      	ldr	r3, [r3, #0]
   b6596:	69db      	ldr	r3, [r3, #28]
   b6598:	9301      	str	r3, [sp, #4]
   b659a:	bd08      	pop	{r3, pc}
   b659c:	00030240 	.word	0x00030240

000b65a0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b65a0:	b508      	push	{r3, lr}
   b65a2:	4b02      	ldr	r3, [pc, #8]	; (b65ac <network_listening+0xc>)
   b65a4:	681b      	ldr	r3, [r3, #0]
   b65a6:	6a1b      	ldr	r3, [r3, #32]
   b65a8:	9301      	str	r3, [sp, #4]
   b65aa:	bd08      	pop	{r3, pc}
   b65ac:	00030240 	.word	0x00030240

000b65b0 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   b65b0:	b508      	push	{r3, lr}
   b65b2:	4b02      	ldr	r3, [pc, #8]	; (b65bc <network_has_credentials+0xc>)
   b65b4:	681b      	ldr	r3, [r3, #0]
   b65b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b65b8:	9301      	str	r3, [sp, #4]
   b65ba:	bd08      	pop	{r3, pc}
   b65bc:	00030240 	.word	0x00030240

000b65c0 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b65c0:	b508      	push	{r3, lr}
   b65c2:	4b02      	ldr	r3, [pc, #8]	; (b65cc <network_set_credentials+0xc>)
   b65c4:	681b      	ldr	r3, [r3, #0]
   b65c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b65c8:	9301      	str	r3, [sp, #4]
   b65ca:	bd08      	pop	{r3, pc}
   b65cc:	00030240 	.word	0x00030240

000b65d0 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b65d0:	b508      	push	{r3, lr}
   b65d2:	4b02      	ldr	r3, [pc, #8]	; (b65dc <network_clear_credentials+0xc>)
   b65d4:	681b      	ldr	r3, [r3, #0]
   b65d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b65d8:	9301      	str	r3, [sp, #4]
   b65da:	bd08      	pop	{r3, pc}
   b65dc:	00030240 	.word	0x00030240

000b65e0 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b65e0:	b508      	push	{r3, lr}
   b65e2:	4b02      	ldr	r3, [pc, #8]	; (b65ec <network_set_listen_timeout+0xc>)
   b65e4:	681b      	ldr	r3, [r3, #0]
   b65e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b65e8:	9301      	str	r3, [sp, #4]
   b65ea:	bd08      	pop	{r3, pc}
   b65ec:	00030240 	.word	0x00030240

000b65f0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b65f0:	b508      	push	{r3, lr}
   b65f2:	4b02      	ldr	r3, [pc, #8]	; (b65fc <network_get_listen_timeout+0xc>)
   b65f4:	681b      	ldr	r3, [r3, #0]
   b65f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b65f8:	9301      	str	r3, [sp, #4]
   b65fa:	bd08      	pop	{r3, pc}
   b65fc:	00030240 	.word	0x00030240

000b6600 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6600:	b508      	push	{r3, lr}
   b6602:	4b02      	ldr	r3, [pc, #8]	; (b660c <network_is_on+0xc>)
   b6604:	681b      	ldr	r3, [r3, #0]
   b6606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6608:	9301      	str	r3, [sp, #4]
   b660a:	bd08      	pop	{r3, pc}
   b660c:	00030240 	.word	0x00030240

000b6610 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6610:	b508      	push	{r3, lr}
   b6612:	4b02      	ldr	r3, [pc, #8]	; (b661c <network_is_off+0xc>)
   b6614:	681b      	ldr	r3, [r3, #0]
   b6616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6618:	9301      	str	r3, [sp, #4]
   b661a:	bd08      	pop	{r3, pc}
   b661c:	00030240 	.word	0x00030240

000b6620 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6620:	b508      	push	{r3, lr}
   b6622:	4b02      	ldr	r3, [pc, #8]	; (b662c <malloc+0xc>)
   b6624:	681b      	ldr	r3, [r3, #0]
   b6626:	681b      	ldr	r3, [r3, #0]
   b6628:	9301      	str	r3, [sp, #4]
   b662a:	bd08      	pop	{r3, pc}
   b662c:	0003021c 	.word	0x0003021c

000b6630 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6630:	b508      	push	{r3, lr}
   b6632:	4b02      	ldr	r3, [pc, #8]	; (b663c <free+0xc>)
   b6634:	681b      	ldr	r3, [r3, #0]
   b6636:	685b      	ldr	r3, [r3, #4]
   b6638:	9301      	str	r3, [sp, #4]
   b663a:	bd08      	pop	{r3, pc}
   b663c:	0003021c 	.word	0x0003021c

000b6640 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6640:	b508      	push	{r3, lr}
   b6642:	4b02      	ldr	r3, [pc, #8]	; (b664c <realloc+0xc>)
   b6644:	681b      	ldr	r3, [r3, #0]
   b6646:	689b      	ldr	r3, [r3, #8]
   b6648:	9301      	str	r3, [sp, #4]
   b664a:	bd08      	pop	{r3, pc}
   b664c:	0003021c 	.word	0x0003021c

000b6650 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b6650:	b508      	push	{r3, lr}
   b6652:	4b02      	ldr	r3, [pc, #8]	; (b665c <siprintf+0xc>)
   b6654:	681b      	ldr	r3, [r3, #0]
   b6656:	691b      	ldr	r3, [r3, #16]
   b6658:	9301      	str	r3, [sp, #4]
   b665a:	bd08      	pop	{r3, pc}
   b665c:	0003021c 	.word	0x0003021c

000b6660 <vsnprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6660:	b508      	push	{r3, lr}
   b6662:	4b02      	ldr	r3, [pc, #8]	; (b666c <vsnprintf+0xc>)
   b6664:	681b      	ldr	r3, [r3, #0]
   b6666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6668:	9301      	str	r3, [sp, #4]
   b666a:	bd08      	pop	{r3, pc}
   b666c:	0003021c 	.word	0x0003021c

000b6670 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6670:	b508      	push	{r3, lr}
   b6672:	4b02      	ldr	r3, [pc, #8]	; (b667c <abort+0xc>)
   b6674:	681b      	ldr	r3, [r3, #0]
   b6676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6678:	9301      	str	r3, [sp, #4]
   b667a:	bd08      	pop	{r3, pc}
   b667c:	0003021c 	.word	0x0003021c

000b6680 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6680:	b508      	push	{r3, lr}
   b6682:	4b02      	ldr	r3, [pc, #8]	; (b668c <__errno+0xc>)
   b6684:	681b      	ldr	r3, [r3, #0]
   b6686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6688:	9301      	str	r3, [sp, #4]
   b668a:	bd08      	pop	{r3, pc}
   b668c:	0003021c 	.word	0x0003021c

000b6690 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6690:	b508      	push	{r3, lr}
   b6692:	4b02      	ldr	r3, [pc, #8]	; (b669c <__assert_func+0xc>)
   b6694:	681b      	ldr	r3, [r3, #0]
   b6696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6698:	9301      	str	r3, [sp, #4]
   b669a:	bd08      	pop	{r3, pc}
   b669c:	0003021c 	.word	0x0003021c

000b66a0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b66a0:	b508      	push	{r3, lr}
   b66a2:	4b02      	ldr	r3, [pc, #8]	; (b66ac <newlib_impure_ptr_callback+0xc>)
   b66a4:	681b      	ldr	r3, [r3, #0]
   b66a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b66a8:	9301      	str	r3, [sp, #4]
   b66aa:	bd08      	pop	{r3, pc}
   b66ac:	0003021c 	.word	0x0003021c

000b66b0 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b66b0:	b508      	push	{r3, lr}
   b66b2:	4b02      	ldr	r3, [pc, #8]	; (b66bc <localtime_r+0xc>)
   b66b4:	681b      	ldr	r3, [r3, #0]
   b66b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b66b8:	9301      	str	r3, [sp, #4]
   b66ba:	bd08      	pop	{r3, pc}
   b66bc:	0003021c 	.word	0x0003021c

000b66c0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b66c0:	2100      	movs	r1, #0
   b66c2:	f7ff beb7 	b.w	b6434 <system_delay_ms>

000b66c6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b66c6:	4770      	bx	lr

000b66c8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b66c8:	4770      	bx	lr

000b66ca <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b66ca:	4770      	bx	lr

000b66cc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b66cc:	4770      	bx	lr
	...

000b66d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b66d0:	4b06      	ldr	r3, [pc, #24]	; (b66ec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b66d2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b66d4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b66d6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b66da:	d005      	beq.n	b66e8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b66dc:	4608      	mov	r0, r1
   b66de:	f002 fe09 	bl	b92f4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b66e2:	2800      	cmp	r0, #0
   b66e4:	bf08      	it	eq
   b66e6:	2400      	moveq	r4, #0
      }
   b66e8:	4620      	mov	r0, r4
   b66ea:	bd10      	pop	{r4, pc}
   b66ec:	000ba638 	.word	0x000ba638

000b66f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b66f0:	4b06      	ldr	r3, [pc, #24]	; (b670c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b66f2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b66f4:	b510      	push	{r4, lr}
   b66f6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b66fa:	d005      	beq.n	b6708 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b66fc:	4608      	mov	r0, r1
   b66fe:	f002 fdf9 	bl	b92f4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6702:	2800      	cmp	r0, #0
   b6704:	bf08      	it	eq
   b6706:	2400      	moveq	r4, #0
      }
   b6708:	4620      	mov	r0, r4
   b670a:	bd10      	pop	{r4, pc}
   b670c:	000ba638 	.word	0x000ba638

000b6710 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6710:	4b06      	ldr	r3, [pc, #24]	; (b672c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6712:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6714:	b510      	push	{r4, lr}
   b6716:	f100 040c 	add.w	r4, r0, #12
	    ||
   b671a:	d005      	beq.n	b6728 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b671c:	4608      	mov	r0, r1
   b671e:	f002 fde9 	bl	b92f4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6722:	2800      	cmp	r0, #0
   b6724:	bf08      	it	eq
   b6726:	2400      	moveq	r4, #0
      }
   b6728:	4620      	mov	r0, r4
   b672a:	bd10      	pop	{r4, pc}
   b672c:	000ba638 	.word	0x000ba638

000b6730 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6730:	b510      	push	{r4, lr}
   b6732:	2168      	movs	r1, #104	; 0x68
   b6734:	4604      	mov	r4, r0
   b6736:	f002 fdd6 	bl	b92e6 <_ZdlPvj>
   b673a:	4620      	mov	r0, r4
   b673c:	bd10      	pop	{r4, pc}

000b673e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b673e:	b510      	push	{r4, lr}
   b6740:	2128      	movs	r1, #40	; 0x28
   b6742:	4604      	mov	r4, r0
   b6744:	f002 fdcf 	bl	b92e6 <_ZdlPvj>
   b6748:	4620      	mov	r0, r4
   b674a:	bd10      	pop	{r4, pc}

000b674c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b674c:	b510      	push	{r4, lr}
   b674e:	2130      	movs	r1, #48	; 0x30
   b6750:	4604      	mov	r4, r0
   b6752:	f002 fdc8 	bl	b92e6 <_ZdlPvj>
   b6756:	4620      	mov	r0, r4
   b6758:	bd10      	pop	{r4, pc}

000b675a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b675a:	2168      	movs	r1, #104	; 0x68
   b675c:	f002 bdc3 	b.w	b92e6 <_ZdlPvj>

000b6760 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6760:	2128      	movs	r1, #40	; 0x28
   b6762:	f002 bdc0 	b.w	b92e6 <_ZdlPvj>

000b6766 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6766:	2130      	movs	r1, #48	; 0x30
   b6768:	f002 bdbd 	b.w	b92e6 <_ZdlPvj>

000b676c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   b676c:	b510      	push	{r4, lr}
   b676e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   b6770:	6800      	ldr	r0, [r0, #0]
   b6772:	b108      	cbz	r0, b6778 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   b6774:	f7ff fc3e 	bl	b5ff4 <os_mutex_recursive_destroy>
    }
   b6778:	4620      	mov	r0, r4
   b677a:	bd10      	pop	{r4, pc}

000b677c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b677c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b677e:	2500      	movs	r5, #0
   b6780:	1cec      	adds	r4, r5, #3
   b6782:	428c      	cmp	r4, r1
   b6784:	d80d      	bhi.n	b67a2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b6786:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b6788:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b678a:	5d87      	ldrb	r7, [r0, r6]
   b678c:	4297      	cmp	r7, r2
   b678e:	d105      	bne.n	b679c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6790:	4426      	add	r6, r4
   b6792:	42b1      	cmp	r1, r6
   b6794:	d305      	bcc.n	b67a2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b6796:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b6798:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b679a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b679c:	3401      	adds	r4, #1
   b679e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b67a0:	e7ee      	b.n	b6780 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b67a2:	2000      	movs	r0, #0
   b67a4:	e7f9      	b.n	b679a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000b67a6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b67a6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b67aa:	4604      	mov	r4, r0
   b67ac:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   b67b0:	461e      	mov	r6, r3
   b67b2:	4689      	mov	r9, r1
   b67b4:	ab01      	add	r3, sp, #4
   b67b6:	4690      	mov	r8, r2
   b67b8:	460a      	mov	r2, r1
   b67ba:	6a01      	ldr	r1, [r0, #32]
   b67bc:	f7ff ffde 	bl	b677c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   b67c0:	6a25      	ldr	r5, [r4, #32]
   b67c2:	1cb3      	adds	r3, r6, #2
   b67c4:	bb0f      	cbnz	r7, b680a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x64>
   b67c6:	b300      	cbz	r0, b680a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x64>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   b67c8:	195f      	adds	r7, r3, r5
   b67ca:	1a3f      	subs	r7, r7, r0
   b67cc:	2f1f      	cmp	r7, #31
   b67ce:	d818      	bhi.n	b6802 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b67d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b67d4:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b67d8:	eba5 0209 	sub.w	r2, r5, r9
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b67dc:	eb06 030a 	add.w	r3, r6, sl
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b67e0:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b67e2:	4448      	add	r0, r9
   b67e4:	1821      	adds	r1, r4, r0
   b67e6:	b292      	uxth	r2, r2
   b67e8:	18e0      	adds	r0, r4, r3
   b67ea:	f003 f943 	bl	b9a74 <memmove>
            selfData_[offset] = len + 1;
   b67ee:	1c73      	adds	r3, r6, #1
   b67f0:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   b67f4:	4632      	mov	r2, r6
   b67f6:	4641      	mov	r1, r8
   b67f8:	eb04 000a 	add.w	r0, r4, sl
   b67fc:	f003 f92c 	bl	b9a58 <memcpy>
            selfLen_ = staLen + len + 2;
   b6800:	6227      	str	r7, [r4, #32]
}
   b6802:	6a20      	ldr	r0, [r4, #32]
   b6804:	b002      	add	sp, #8
   b6806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   b680a:	442b      	add	r3, r5
   b680c:	2b1f      	cmp	r3, #31
   b680e:	d8f8      	bhi.n	b6802 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>
        selfData_[selfLen_++] = len + 1;
   b6810:	1c73      	adds	r3, r6, #1
   b6812:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   b6814:	1ca8      	adds	r0, r5, #2
   b6816:	4425      	add	r5, r4
   b6818:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   b681a:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   b681c:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   b6820:	4641      	mov	r1, r8
   b6822:	4420      	add	r0, r4
   b6824:	f003 f918 	bl	b9a58 <memcpy>
        selfLen_ += len;
   b6828:	6a23      	ldr	r3, [r4, #32]
   b682a:	4433      	add	r3, r6
   b682c:	6223      	str	r3, [r4, #32]
   b682e:	e7e8      	b.n	b6802 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>

000b6830 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b6830:	4a02      	ldr	r2, [pc, #8]	; (b683c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b6832:	2100      	movs	r1, #0
   b6834:	200a      	movs	r0, #10
   b6836:	f7ff bddd 	b.w	b63f4 <panic_>
   b683a:	bf00      	nop
   b683c:	000b6035 	.word	0x000b6035

000b6840 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6840:	4603      	mov	r3, r0
   b6842:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b6844:	681b      	ldr	r3, [r3, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6846:	e9d3 2100 	ldrd	r2, r1, [r3]
   b684a:	4710      	bx	r2

000b684c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b684c:	b430      	push	{r4, r5}
   b684e:	460d      	mov	r5, r1
   b6850:	4611      	mov	r1, r2
   b6852:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b6854:	6803      	ldr	r3, [r0, #0]
   b6856:	6809      	ldr	r1, [r1, #0]
   b6858:	6828      	ldr	r0, [r5, #0]
   b685a:	e9d3 4300 	ldrd	r4, r3, [r3]
   b685e:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b6860:	bc30      	pop	{r4, r5}
   b6862:	4760      	bx	ip

000b6864 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b6864:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6866:	b538      	push	{r3, r4, r5, lr}
   b6868:	4604      	mov	r4, r0
	switch (__op)
   b686a:	d102      	bne.n	b6872 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b686c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b686e:	6023      	str	r3, [r4, #0]
	}
   b6870:	e003      	b.n	b687a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b6872:	2a02      	cmp	r2, #2
   b6874:	d003      	beq.n	b687e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b6876:	2a03      	cmp	r2, #3
   b6878:	d00d      	beq.n	b6896 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b687a:	2000      	movs	r0, #0
   b687c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b687e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6880:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6882:	f7fd fc08 	bl	b4096 <_Znwj>
   b6886:	4603      	mov	r3, r0
   b6888:	2800      	cmp	r0, #0
   b688a:	d0f0      	beq.n	b686e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b688c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6890:	e883 0003 	stmia.w	r3, {r0, r1}
   b6894:	e7eb      	b.n	b686e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6896:	6800      	ldr	r0, [r0, #0]
   b6898:	2800      	cmp	r0, #0
   b689a:	d0ee      	beq.n	b687a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b689c:	2108      	movs	r1, #8
   b689e:	f002 fd22 	bl	b92e6 <_ZdlPvj>
   b68a2:	e7ea      	b.n	b687a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b68a4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b68a4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b68a6:	b538      	push	{r3, r4, r5, lr}
   b68a8:	4604      	mov	r4, r0
	switch (__op)
   b68aa:	d102      	bne.n	b68b2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b68ac:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b68ae:	6023      	str	r3, [r4, #0]
	}
   b68b0:	e003      	b.n	b68ba <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b68b2:	2a02      	cmp	r2, #2
   b68b4:	d003      	beq.n	b68be <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b68b6:	2a03      	cmp	r2, #3
   b68b8:	d00d      	beq.n	b68d6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b68ba:	2000      	movs	r0, #0
   b68bc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b68be:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b68c0:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b68c2:	f7fd fbe8 	bl	b4096 <_Znwj>
   b68c6:	4603      	mov	r3, r0
   b68c8:	2800      	cmp	r0, #0
   b68ca:	d0f0      	beq.n	b68ae <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b68cc:	e895 0003 	ldmia.w	r5, {r0, r1}
   b68d0:	e883 0003 	stmia.w	r3, {r0, r1}
   b68d4:	e7eb      	b.n	b68ae <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b68d6:	6800      	ldr	r0, [r0, #0]
   b68d8:	2800      	cmp	r0, #0
   b68da:	d0ee      	beq.n	b68ba <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b68dc:	2108      	movs	r1, #8
   b68de:	f002 fd02 	bl	b92e6 <_ZdlPvj>
   b68e2:	e7ea      	b.n	b68ba <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b68e4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b68e4:	b510      	push	{r4, lr}
      if (_M_manager)
   b68e6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b68e8:	4604      	mov	r4, r0
      if (_M_manager)
   b68ea:	b113      	cbz	r3, b68f2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b68ec:	2203      	movs	r2, #3
   b68ee:	4601      	mov	r1, r0
   b68f0:	4798      	blx	r3
    }
   b68f2:	4620      	mov	r0, r4
   b68f4:	bd10      	pop	{r4, pc}

000b68f6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b68f6:	b510      	push	{r4, lr}
   b68f8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b68fa:	3058      	adds	r0, #88	; 0x58
   b68fc:	f7ff fff2 	bl	b68e4 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b6900:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b6904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6908:	f001 bc72 	b.w	b81f0 <_ZN6StringD1Ev>

000b690c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b690c:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b690e:	6843      	ldr	r3, [r0, #4]
   b6910:	3b01      	subs	r3, #1
    {
   b6912:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6914:	6043      	str	r3, [r0, #4]
   b6916:	b963      	cbnz	r3, b6932 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6918:	6803      	ldr	r3, [r0, #0]
   b691a:	689b      	ldr	r3, [r3, #8]
   b691c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b691e:	68a3      	ldr	r3, [r4, #8]
   b6920:	3b01      	subs	r3, #1
   b6922:	60a3      	str	r3, [r4, #8]
   b6924:	b92b      	cbnz	r3, b6932 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6926:	6823      	ldr	r3, [r4, #0]
   b6928:	4620      	mov	r0, r4
   b692a:	68db      	ldr	r3, [r3, #12]
    }
   b692c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6930:	4718      	bx	r3
    }
   b6932:	bd10      	pop	{r4, pc}

000b6934 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b6934:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6938:	b2da      	uxtb	r2, r3
   b693a:	2a09      	cmp	r2, #9
   b693c:	d801      	bhi.n	b6942 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b693e:	4618      	mov	r0, r3
   b6940:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b6942:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b6946:	2b05      	cmp	r3, #5
   b6948:	d801      	bhi.n	b694e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b694a:	3857      	subs	r0, #87	; 0x57
   b694c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b694e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b6952:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b6954:	bf94      	ite	ls
   b6956:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b6958:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b695c:	4770      	bx	lr
	...

000b6960 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b6960:	b510      	push	{r4, lr}
            locked_(false) {
   b6962:	2300      	movs	r3, #0
   b6964:	7003      	strb	r3, [r0, #0]
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b6966:	4b04      	ldr	r3, [pc, #16]	; (b6978 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b6968:	4604      	mov	r4, r0
   b696a:	6818      	ldr	r0, [r3, #0]
   b696c:	f7ff fb4a 	bl	b6004 <os_mutex_recursive_lock>
        locked_ = true;
   b6970:	2301      	movs	r3, #1
   b6972:	7023      	strb	r3, [r4, #0]
    }
   b6974:	4620      	mov	r0, r4
   b6976:	bd10      	pop	{r4, pc}
   b6978:	2003e634 	.word	0x2003e634

000b697c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b697c:	b510      	push	{r4, lr}
        if (locked_) {
   b697e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b6980:	4604      	mov	r4, r0
        if (locked_) {
   b6982:	b11b      	cbz	r3, b698c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6984:	4b02      	ldr	r3, [pc, #8]	; (b6990 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6986:	6818      	ldr	r0, [r3, #0]
   b6988:	f7ff fb44 	bl	b6014 <os_mutex_recursive_unlock>
    }
   b698c:	4620      	mov	r0, r4
   b698e:	bd10      	pop	{r4, pc}
   b6990:	2003e634 	.word	0x2003e634

000b6994 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b6994:	b082      	sub	sp, #8
   b6996:	4603      	mov	r3, r0
    address_ = addr;
   b6998:	6808      	ldr	r0, [r1, #0]
   b699a:	6849      	ldr	r1, [r1, #4]
   b699c:	466a      	mov	r2, sp
   b699e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b69a0:	466a      	mov	r2, sp
   b69a2:	ca03      	ldmia	r2!, {r0, r1}
   b69a4:	6018      	str	r0, [r3, #0]
}
   b69a6:	4618      	mov	r0, r3
    address_ = addr.address_;
   b69a8:	6059      	str	r1, [r3, #4]
}
   b69aa:	b002      	add	sp, #8
   b69ac:	4770      	bx	lr

000b69ae <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b69ae:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b69b0:	7982      	ldrb	r2, [r0, #6]
   b69b2:	798b      	ldrb	r3, [r1, #6]
   b69b4:	429a      	cmp	r2, r3
   b69b6:	d106      	bne.n	b69c6 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b69b8:	2206      	movs	r2, #6
   b69ba:	f003 f83d 	bl	b9a38 <memcmp>
   b69be:	fab0 f080 	clz	r0, r0
   b69c2:	0940      	lsrs	r0, r0, #5
}
   b69c4:	bd08      	pop	{r3, pc}
    return false;
   b69c6:	2000      	movs	r0, #0
   b69c8:	e7fc      	b.n	b69c4 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b69ca <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b69ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b69ce:	6003      	str	r3, [r0, #0]
   b69d0:	8083      	strh	r3, [r0, #4]
}
   b69d2:	2000      	movs	r0, #0
   b69d4:	4770      	bx	lr

000b69d6 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b69d6:	b508      	push	{r3, lr}
   b69d8:	4602      	mov	r2, r0
        : address_{} {
   b69da:	2100      	movs	r1, #0
   b69dc:	6001      	str	r1, [r0, #0]
   b69de:	6041      	str	r1, [r0, #4]
    clear();
   b69e0:	f7ff fff3 	bl	b69ca <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b69e4:	7191      	strb	r1, [r2, #6]
}
   b69e6:	4610      	mov	r0, r2
   b69e8:	bd08      	pop	{r3, pc}
	...

000b69ec <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b69ec:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b69ee:	2301      	movs	r3, #1
   b69f0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b69f2:	4b05      	ldr	r3, [pc, #20]	; (b6a08 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b69f4:	4602      	mov	r2, r0
   b69f6:	f103 0110 	add.w	r1, r3, #16
   b69fa:	f853 4b04 	ldr.w	r4, [r3], #4
   b69fe:	f842 4b04 	str.w	r4, [r2], #4
   b6a02:	428b      	cmp	r3, r1
   b6a04:	d1f9      	bne.n	b69fa <_ZN8particle7BleUuidC1Ev+0xe>
}
   b6a06:	bd10      	pop	{r4, pc}
   b6a08:	000ba646 	.word	0x000ba646

000b6a0c <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   b6a0c:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   b6a0e:	690b      	ldr	r3, [r1, #16]
   b6a10:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b6a12:	f101 0210 	add.w	r2, r1, #16
   b6a16:	4603      	mov	r3, r0
   b6a18:	f851 4b04 	ldr.w	r4, [r1], #4
   b6a1c:	f843 4b04 	str.w	r4, [r3], #4
   b6a20:	4291      	cmp	r1, r2
   b6a22:	d1f9      	bne.n	b6a18 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   b6a24:	bd10      	pop	{r4, pc}

000b6a26 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6a26:	b510      	push	{r4, lr}
    if (uuid128) {
   b6a28:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6a2a:	4604      	mov	r4, r0
    if (uuid128) {
   b6a2c:	b1b1      	cbz	r1, b6a5c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b6a2e:	2a01      	cmp	r2, #1
   b6a30:	f101 0210 	add.w	r2, r1, #16
   b6a34:	d10a      	bne.n	b6a4c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b6a36:	4601      	mov	r1, r0
   b6a38:	f853 0b04 	ldr.w	r0, [r3], #4
   b6a3c:	f841 0b04 	str.w	r0, [r1], #4
   b6a40:	4293      	cmp	r3, r2
   b6a42:	d1f9      	bne.n	b6a38 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b6a44:	2301      	movs	r3, #1
   b6a46:	6123      	str	r3, [r4, #16]
}
   b6a48:	4620      	mov	r0, r4
   b6a4a:	bd10      	pop	{r4, pc}
   b6a4c:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b6a4e:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b6a52:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b6a56:	429a      	cmp	r2, r3
   b6a58:	d1f9      	bne.n	b6a4e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b6a5a:	e7f3      	b.n	b6a44 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b6a5c:	2210      	movs	r2, #16
   b6a5e:	f003 f823 	bl	b9aa8 <memset>
   b6a62:	e7f1      	b.n	b6a48 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b6a64 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b6a64:	b538      	push	{r3, r4, r5, lr}
   b6a66:	4604      	mov	r4, r0
   b6a68:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b6a6a:	461a      	mov	r2, r3
   b6a6c:	f7ff ffdb 	bl	b6a26 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b6a70:	81a5      	strh	r5, [r4, #12]
}
   b6a72:	4620      	mov	r0, r4
   b6a74:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6a78 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b6a78:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b6a7a:	6902      	ldr	r2, [r0, #16]
   b6a7c:	b922      	cbnz	r2, b6a88 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b6a7e:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6a80:	3800      	subs	r0, #0
   b6a82:	bf18      	it	ne
   b6a84:	2001      	movne	r0, #1
}
   b6a86:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6a88:	4902      	ldr	r1, [pc, #8]	; (b6a94 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b6a8a:	2210      	movs	r2, #16
   b6a8c:	f002 ffd4 	bl	b9a38 <memcmp>
   b6a90:	e7f6      	b.n	b6a80 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b6a92:	bf00      	nop
   b6a94:	000ba666 	.word	0x000ba666

000b6a98 <_ZNK8particle7BleUuid4typeEv>:
}
   b6a98:	6900      	ldr	r0, [r0, #16]
   b6a9a:	4770      	bx	lr

000b6a9c <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b6a9c:	b538      	push	{r3, r4, r5, lr}
   b6a9e:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b6aa0:	2214      	movs	r2, #20
   b6aa2:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b6aa4:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b6aa6:	f002 ffff 	bl	b9aa8 <memset>
    if (type_ == BleUuidType::SHORT) {
   b6aaa:	6923      	ldr	r3, [r4, #16]
   b6aac:	b91b      	cbnz	r3, b6ab6 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b6aae:	89a3      	ldrh	r3, [r4, #12]
   b6ab0:	802b      	strh	r3, [r5, #0]
}
   b6ab2:	4628      	mov	r0, r5
   b6ab4:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b6ab6:	2301      	movs	r3, #1
   b6ab8:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b6aba:	4621      	mov	r1, r4
   b6abc:	462b      	mov	r3, r5
   b6abe:	f104 0210 	add.w	r2, r4, #16
   b6ac2:	f851 0b04 	ldr.w	r0, [r1], #4
   b6ac6:	f843 0b04 	str.w	r0, [r3], #4
   b6aca:	4291      	cmp	r1, r2
   b6acc:	d1f9      	bne.n	b6ac2 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b6ace:	e7f0      	b.n	b6ab2 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b6ad0 <_ZNK8particle7BleUuid7shortedEv>:
}
   b6ad0:	8980      	ldrh	r0, [r0, #12]
   b6ad2:	4770      	bx	lr

000b6ad4 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b6ad4:	4770      	bx	lr

000b6ad6 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b6ad6:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6ad8:	6902      	ldr	r2, [r0, #16]
   b6ada:	690b      	ldr	r3, [r1, #16]
   b6adc:	429a      	cmp	r2, r3
   b6ade:	d106      	bne.n	b6aee <_ZNK8particle7BleUuideqERKS0_+0x18>
   b6ae0:	2210      	movs	r2, #16
   b6ae2:	f002 ffa9 	bl	b9a38 <memcmp>
   b6ae6:	fab0 f080 	clz	r0, r0
   b6aea:	0940      	lsrs	r0, r0, #5
}
   b6aec:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6aee:	2000      	movs	r0, #0
   b6af0:	e7fc      	b.n	b6aec <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b6af4 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b6af4:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b6af6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b6afa:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6afc:	4b34      	ldr	r3, [pc, #208]	; (b6bd0 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b6afe:	460c      	mov	r4, r1
   b6b00:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6b02:	4602      	mov	r2, r0
   b6b04:	f103 0110 	add.w	r1, r3, #16
   b6b08:	f853 0b04 	ldr.w	r0, [r3], #4
   b6b0c:	f842 0b04 	str.w	r0, [r2], #4
   b6b10:	428b      	cmp	r3, r1
   b6b12:	d1f9      	bne.n	b6b08 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b6b14:	b344      	cbz	r4, b6b68 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b6b16:	2124      	movs	r1, #36	; 0x24
   b6b18:	4620      	mov	r0, r4
   b6b1a:	f003 f828 	bl	b9b6e <strnlen>
   b6b1e:	2804      	cmp	r0, #4
   b6b20:	f04f 0500 	mov.w	r5, #0
   b6b24:	d123      	bne.n	b6b6e <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b6b26:	f8ad 5004 	strh.w	r5, [sp, #4]
   b6b2a:	af01      	add	r7, sp, #4
   b6b2c:	1ca5      	adds	r5, r4, #2
   b6b2e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b6b30:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b6b34:	f7ff fefe 	bl	b6934 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b6b38:	f1b0 0800 	subs.w	r8, r0, #0
   b6b3c:	db12      	blt.n	b6b64 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b6b3e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b6b42:	f7ff fef7 	bl	b6934 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b6b46:	2800      	cmp	r0, #0
   b6b48:	db0c      	blt.n	b6b64 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b6b4a:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6b4c:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b6b50:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6b52:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b6b56:	d1eb      	bne.n	b6b30 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b6b58:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b6b5c:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b6b5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6b62:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b6b64:	2300      	movs	r3, #0
   b6b66:	6133      	str	r3, [r6, #16]
}
   b6b68:	b002      	add	sp, #8
   b6b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b6b6e:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6b72:	2124      	movs	r1, #36	; 0x24
   b6b74:	4620      	mov	r0, r4
   b6b76:	f002 fffa 	bl	b9b6e <strnlen>
   b6b7a:	42a8      	cmp	r0, r5
   b6b7c:	d807      	bhi.n	b6b8e <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b6b7e:	4642      	mov	r2, r8
   b6b80:	2100      	movs	r1, #0
   b6b82:	4630      	mov	r0, r6
}
   b6b84:	b002      	add	sp, #8
   b6b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b6b8a:	f002 bf8d 	b.w	b9aa8 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6b8e:	f1b8 0f00 	cmp.w	r8, #0
   b6b92:	d0e9      	beq.n	b6b68 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b6b94:	5d60      	ldrb	r0, [r4, r5]
   b6b96:	f7ff fecd 	bl	b6934 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b6b9a:	0603      	lsls	r3, r0, #24
   b6b9c:	d415      	bmi.n	b6bca <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b6b9e:	0100      	lsls	r0, r0, #4
   b6ba0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6ba4:	b2c7      	uxtb	r7, r0
   b6ba6:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b6baa:	2124      	movs	r1, #36	; 0x24
   b6bac:	4620      	mov	r0, r4
   b6bae:	f002 ffde 	bl	b9b6e <strnlen>
   b6bb2:	3501      	adds	r5, #1
   b6bb4:	42a8      	cmp	r0, r5
   b6bb6:	d908      	bls.n	b6bca <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b6bb8:	5d60      	ldrb	r0, [r4, r5]
   b6bba:	f7ff febb 	bl	b6934 <_ZN8particle11hexToNibbleEc>
   b6bbe:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b6bc0:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b6bc2:	bfa4      	itt	ge
   b6bc4:	4338      	orrge	r0, r7
   b6bc6:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6bca:	3501      	adds	r5, #1
   b6bcc:	e7d1      	b.n	b6b72 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b6bce:	bf00      	nop
   b6bd0:	000ba646 	.word	0x000ba646

000b6bd4 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b6bd4:	b513      	push	{r0, r1, r4, lr}
   b6bd6:	4604      	mov	r4, r0
   b6bd8:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b6bda:	f7ff ff07 	bl	b69ec <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b6bde:	4620      	mov	r0, r4
   b6be0:	9901      	ldr	r1, [sp, #4]
   b6be2:	f7ff ff87 	bl	b6af4 <_ZN8particle7BleUuid9constructEPKc>
}
   b6be6:	4620      	mov	r0, r4
   b6be8:	b002      	add	sp, #8
   b6bea:	bd10      	pop	{r4, pc}

000b6bec <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6bec:	b430      	push	{r4, r5}
   b6bee:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b6bf2:	b11a      	cbz	r2, b6bfc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b6bf4:	9502      	str	r5, [sp, #8]
}
   b6bf6:	bc30      	pop	{r4, r5}
   b6bf8:	f7ff bdd5 	b.w	b67a6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfLen_;
   b6bfc:	6a00      	ldr	r0, [r0, #32]
}
   b6bfe:	bc30      	pop	{r4, r5}
   b6c00:	4770      	bx	lr

000b6c02 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b6c02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6c04:	4604      	mov	r4, r0
          selfLen_(0) {
   b6c06:	221f      	movs	r2, #31
   b6c08:	2100      	movs	r1, #0
   b6c0a:	f002 ff4d 	bl	b9aa8 <memset>
   b6c0e:	2300      	movs	r3, #0
   b6c10:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6c12:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6c14:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6c16:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6c18:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6c1c:	4619      	mov	r1, r3
   b6c1e:	f10d 020f 	add.w	r2, sp, #15
   b6c22:	4620      	mov	r0, r4
   b6c24:	f7ff ffe2 	bl	b6bec <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b6c28:	4620      	mov	r0, r4
   b6c2a:	b004      	add	sp, #16
   b6c2c:	bd10      	pop	{r4, pc}

000b6c2e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6c2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   b6c30:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6c32:	460e      	mov	r6, r1
   b6c34:	ab01      	add	r3, sp, #4
   b6c36:	6a01      	ldr	r1, [r0, #32]
   b6c38:	4604      	mov	r4, r0
   b6c3a:	f7ff fd9f 	bl	b677c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b6c3e:	4605      	mov	r5, r0
   b6c40:	b178      	cbz	r0, b6c62 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   b6c42:	9801      	ldr	r0, [sp, #4]
   b6c44:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   b6c46:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   b6c48:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   b6c4a:	4421      	add	r1, r4
   b6c4c:	1b52      	subs	r2, r2, r5
   b6c4e:	4420      	add	r0, r4
   b6c50:	f002 ff02 	bl	b9a58 <memcpy>
        selfLen_ -= len;
   b6c54:	6a20      	ldr	r0, [r4, #32]
   b6c56:	1b40      	subs	r0, r0, r5
   b6c58:	6220      	str	r0, [r4, #32]
        remove(type);
   b6c5a:	4631      	mov	r1, r6
   b6c5c:	4620      	mov	r0, r4
   b6c5e:	f7ff ffe6 	bl	b6c2e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b6c62:	b002      	add	sp, #8
   b6c64:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6c68 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b6c68:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b6c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6c6e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b6c70:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b6c72:	8043      	strh	r3, [r0, #2]
   b6c74:	220e      	movs	r2, #14
   b6c76:	4629      	mov	r1, r5
   b6c78:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b6c7a:	7105      	strb	r5, [r0, #4]
   b6c7c:	3006      	adds	r0, #6
   b6c7e:	f002 ff13 	bl	b9aa8 <memset>
   b6c82:	f104 0014 	add.w	r0, r4, #20
   b6c86:	f7ff feb1 	bl	b69ec <_ZN8particle7BleUuidC1Ev>
   b6c8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6c8e:	f7ff fead 	bl	b69ec <_ZN8particle7BleUuidC1Ev>
   b6c92:	4904      	ldr	r1, [pc, #16]	; (b6ca4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b6c94:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6c98:	f001 faf5 	bl	b8286 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6c9c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b6c9e:	4620      	mov	r0, r4
   b6ca0:	bd38      	pop	{r3, r4, r5, pc}
   b6ca2:	bf00      	nop
   b6ca4:	000ba033 	.word	0x000ba033

000b6ca8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b6ca8:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b6caa:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b6cae:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b6cb2:	4293      	cmp	r3, r2
   b6cb4:	4618      	mov	r0, r3
   b6cb6:	d006      	beq.n	b6cc6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b6cb8:	6804      	ldr	r4, [r0, #0]
   b6cba:	8824      	ldrh	r4, [r4, #0]
   b6cbc:	428c      	cmp	r4, r1
   b6cbe:	f103 0308 	add.w	r3, r3, #8
   b6cc2:	d1f6      	bne.n	b6cb2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b6cc4:	bd10      	pop	{r4, pc}
        return nullptr;
   b6cc6:	2000      	movs	r0, #0
   b6cc8:	e7fc      	b.n	b6cc4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b6ccc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b6ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6cce:	4606      	mov	r6, r0
   b6cd0:	b085      	sub	sp, #20
   b6cd2:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b6cd4:	460d      	mov	r5, r1
   b6cd6:	2900      	cmp	r1, #0
   b6cd8:	d050      	beq.n	b6d7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b6cda:	2a00      	cmp	r2, #0
   b6cdc:	d04e      	beq.n	b6d7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6cde:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b6ce0:	7823      	ldrb	r3, [r4, #0]
   b6ce2:	2af4      	cmp	r2, #244	; 0xf4
   b6ce4:	bf28      	it	cs
   b6ce6:	22f4      	movcs	r2, #244	; 0xf4
   b6ce8:	b343      	cbz	r3, b6d3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b6cea:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b6cec:	0798      	lsls	r0, r3, #30
   b6cee:	d509      	bpl.n	b6d04 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b6cf0:	89a0      	ldrh	r0, [r4, #12]
   b6cf2:	9203      	str	r2, [sp, #12]
   b6cf4:	2300      	movs	r3, #0
   b6cf6:	f7ff f907 	bl	b5f08 <hal_ble_gatt_server_set_characteristic_value>
   b6cfa:	2800      	cmp	r0, #0
   b6cfc:	9a03      	ldr	r2, [sp, #12]
   b6cfe:	da03      	bge.n	b6d08 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b6d00:	b005      	add	sp, #20
   b6d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b6d04:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6d08:	6834      	ldr	r4, [r6, #0]
   b6d0a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b6d0c:	06d9      	lsls	r1, r3, #27
   b6d0e:	d509      	bpl.n	b6d24 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b6d10:	2f01      	cmp	r7, #1
   b6d12:	d007      	beq.n	b6d24 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6d14:	89a0      	ldrh	r0, [r4, #12]
   b6d16:	2300      	movs	r3, #0
   b6d18:	4629      	mov	r1, r5
}
   b6d1a:	b005      	add	sp, #20
   b6d1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6d20:	f7ff b924 	b.w	b5f6c <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b6d24:	069b      	lsls	r3, r3, #26
   b6d26:	d5eb      	bpl.n	b6d00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6d28:	2f02      	cmp	r7, #2
   b6d2a:	d0e9      	beq.n	b6d00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6d2c:	89a0      	ldrh	r0, [r4, #12]
   b6d2e:	2300      	movs	r3, #0
   b6d30:	4629      	mov	r1, r5
}
   b6d32:	b005      	add	sp, #20
   b6d34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6d38:	f7ff b922 	b.w	b5f80 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b6d3c:	8860      	ldrh	r0, [r4, #2]
   b6d3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6d42:	4288      	cmp	r0, r1
   b6d44:	d01c      	beq.n	b6d80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b6d46:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b6d48:	074e      	lsls	r6, r1, #29
   b6d4a:	d501      	bpl.n	b6d50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b6d4c:	2f01      	cmp	r7, #1
   b6d4e:	d104      	bne.n	b6d5a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6d50:	070b      	lsls	r3, r1, #28
   b6d52:	d409      	bmi.n	b6d68 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b6d54:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6d58:	e7d2      	b.n	b6d00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6d5a:	89a1      	ldrh	r1, [r4, #12]
   b6d5c:	9300      	str	r3, [sp, #0]
   b6d5e:	4613      	mov	r3, r2
   b6d60:	462a      	mov	r2, r5
   b6d62:	f7ff f8e5 	bl	b5f30 <hal_ble_gatt_client_write_without_response>
   b6d66:	e7cb      	b.n	b6d00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6d68:	2f02      	cmp	r7, #2
   b6d6a:	d0f3      	beq.n	b6d54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6d6c:	2300      	movs	r3, #0
   b6d6e:	89a1      	ldrh	r1, [r4, #12]
   b6d70:	9300      	str	r3, [sp, #0]
   b6d72:	4613      	mov	r3, r2
   b6d74:	462a      	mov	r2, r5
   b6d76:	f7ff f8d1 	bl	b5f1c <hal_ble_gatt_client_write_with_response>
   b6d7a:	e7c1      	b.n	b6d00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b6d7c:	4802      	ldr	r0, [pc, #8]	; (b6d88 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b6d7e:	e7bf      	b.n	b6d00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b6d80:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b6d84:	e7bc      	b.n	b6d00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6d86:	bf00      	nop
   b6d88:	fffffef2 	.word	0xfffffef2

000b6d8c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   b6d8c:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   b6d8e:	688a      	ldr	r2, [r1, #8]
   b6d90:	6809      	ldr	r1, [r1, #0]
   b6d92:	f7ff bf9b 	b.w	b6ccc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b6d96 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6d96:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6d98:	460c      	mov	r4, r1
   b6d9a:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6d9c:	21f4      	movs	r1, #244	; 0xf4
   b6d9e:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6da0:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6da2:	f002 fee4 	bl	b9b6e <strnlen>
   b6da6:	9b01      	ldr	r3, [sp, #4]
   b6da8:	4602      	mov	r2, r0
   b6daa:	4621      	mov	r1, r4
   b6dac:	4628      	mov	r0, r5
}
   b6dae:	b003      	add	sp, #12
   b6db0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6db4:	f7ff bf8a 	b.w	b6ccc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b6db8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b6db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6dbc:	2600      	movs	r6, #0
   b6dbe:	6006      	str	r6, [r0, #0]
   b6dc0:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6dc2:	2028      	movs	r0, #40	; 0x28
   b6dc4:	460c      	mov	r4, r1
   b6dc6:	f7fd f966 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6dca:	1e05      	subs	r5, r0, #0
   b6dcc:	f105 080c 	add.w	r8, r5, #12
   b6dd0:	d00f      	beq.n	b6df2 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b6dd2:	2301      	movs	r3, #1
   b6dd4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6dd8:	4b08      	ldr	r3, [pc, #32]	; (b6dfc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b6dda:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b6ddc:	4640      	mov	r0, r8
   b6dde:	f7ff fe05 	bl	b69ec <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b6de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b6de4:	622e      	str	r6, [r5, #32]
   b6de6:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b6dea:	4646      	mov	r6, r8
   b6dec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6dee:	6823      	ldr	r3, [r4, #0]
   b6df0:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b6df2:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6df6:	4638      	mov	r0, r7
   b6df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6dfc:	000ba608 	.word	0x000ba608

000b6e00 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6e00:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6e02:	2500      	movs	r5, #0
   b6e04:	6005      	str	r5, [r0, #0]
   b6e06:	4606      	mov	r6, r0
   b6e08:	2030      	movs	r0, #48	; 0x30
   b6e0a:	f7fd f944 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6e0e:	4604      	mov	r4, r0
   b6e10:	b188      	cbz	r0, b6e36 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b6e12:	2301      	movs	r3, #1
   b6e14:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6e18:	4b09      	ldr	r3, [pc, #36]	; (b6e40 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b6e1a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b6e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6e20:	8183      	strh	r3, [r0, #12]
   b6e22:	300e      	adds	r0, #14
   b6e24:	f7ff fdd7 	bl	b69d6 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6e28:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b6e2c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6e30:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b6e34:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b6e36:	6074      	str	r4, [r6, #4]
   b6e38:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b6e3a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6e3c:	4630      	mov	r0, r6
   b6e3e:	bd70      	pop	{r4, r5, r6, pc}
   b6e40:	000ba624 	.word	0x000ba624

000b6e44 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b6e44:	b513      	push	{r0, r1, r4, lr}
   b6e46:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6e48:	a801      	add	r0, sp, #4
   b6e4a:	f7ff fd89 	bl	b6960 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b6e4e:	6823      	ldr	r3, [r4, #0]
   b6e50:	881c      	ldrh	r4, [r3, #0]
   b6e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6e56:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b6e58:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b6e5a:	bf18      	it	ne
   b6e5c:	2401      	movne	r4, #1
    WiringBleLock lk;
   b6e5e:	f7ff fd8d 	bl	b697c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6e62:	4620      	mov	r0, r4
   b6e64:	b002      	add	sp, #8
   b6e66:	bd10      	pop	{r4, pc}

000b6e68 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b6e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6e6a:	460d      	mov	r5, r1
   b6e6c:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6e6e:	a801      	add	r0, sp, #4
   b6e70:	f7ff fd76 	bl	b6960 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6e74:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b6e76:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b6e7a:	6023      	str	r3, [r4, #0]
   b6e7c:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b6e80:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b6e82:	a801      	add	r0, sp, #4
   b6e84:	f7ff fd7a 	bl	b697c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b6e88:	4620      	mov	r0, r4
   b6e8a:	b003      	add	sp, #12
   b6e8c:	bd30      	pop	{r4, r5, pc}

000b6e8e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b6e8e:	b530      	push	{r4, r5, lr}
   b6e90:	4605      	mov	r5, r0
   b6e92:	b087      	sub	sp, #28
   b6e94:	460c      	mov	r4, r1
    WiringBleLock lk;
   b6e96:	a801      	add	r0, sp, #4
   b6e98:	f7ff fd62 	bl	b6960 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b6e9c:	682a      	ldr	r2, [r5, #0]
   b6e9e:	6823      	ldr	r3, [r4, #0]
   b6ea0:	8812      	ldrh	r2, [r2, #0]
   b6ea2:	881b      	ldrh	r3, [r3, #0]
   b6ea4:	429a      	cmp	r2, r3
   b6ea6:	d10d      	bne.n	b6ec4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b6ea8:	4629      	mov	r1, r5
   b6eaa:	a802      	add	r0, sp, #8
   b6eac:	f7ff ffdc 	bl	b6e68 <_ZNK8particle13BlePeerDevice7addressEv>
   b6eb0:	4621      	mov	r1, r4
   b6eb2:	a804      	add	r0, sp, #16
   b6eb4:	f7ff ffd8 	bl	b6e68 <_ZNK8particle13BlePeerDevice7addressEv>
   b6eb8:	a904      	add	r1, sp, #16
   b6eba:	a802      	add	r0, sp, #8
   b6ebc:	f7ff fd77 	bl	b69ae <_ZNK8particle10BleAddresseqERKS0_>
   b6ec0:	4604      	mov	r4, r0
   b6ec2:	b900      	cbnz	r0, b6ec6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6ec4:	2400      	movs	r4, #0
    WiringBleLock lk;
   b6ec6:	a801      	add	r0, sp, #4
   b6ec8:	f7ff fd58 	bl	b697c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6ecc:	4620      	mov	r0, r4
   b6ece:	b007      	add	sp, #28
   b6ed0:	bd30      	pop	{r4, r5, pc}
	...

000b6ed4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6ed4:	b510      	push	{r4, lr}
   b6ed6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b6ed8:	2054      	movs	r0, #84	; 0x54
   b6eda:	f7fd f8dc 	bl	b4096 <_Znwj>
   b6ede:	4601      	mov	r1, r0
   b6ee0:	b160      	cbz	r0, b6efc <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b6ee2:	2300      	movs	r3, #0
   b6ee4:	e9c0 3300 	strd	r3, r3, [r0]
   b6ee8:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6eec:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6ef0:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b6ef4:	6203      	str	r3, [r0, #32]
   b6ef6:	62c3      	str	r3, [r0, #44]	; 0x2c
   b6ef8:	63c3      	str	r3, [r0, #60]	; 0x3c
   b6efa:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6efc:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b6efe:	b919      	cbnz	r1, b6f08 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   b6f00:	4a09      	ldr	r2, [pc, #36]	; (b6f28 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b6f02:	200a      	movs	r0, #10
   b6f04:	f7ff fa76 	bl	b63f4 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b6f08:	2000      	movs	r0, #0
   b6f0a:	f7fe ffc1 	bl	b5e90 <hal_ble_stack_init>
   b6f0e:	b120      	cbz	r0, b6f1a <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   b6f10:	4a05      	ldr	r2, [pc, #20]	; (b6f28 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b6f12:	2100      	movs	r1, #0
   b6f14:	200a      	movs	r0, #10
   b6f16:	f7ff fa6d 	bl	b63f4 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b6f1a:	6821      	ldr	r1, [r4, #0]
   b6f1c:	4803      	ldr	r0, [pc, #12]	; (b6f2c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6f1e:	2200      	movs	r2, #0
   b6f20:	f7ff f81a 	bl	b5f58 <hal_ble_set_callback_on_periph_link_events>
}
   b6f24:	4620      	mov	r0, r4
   b6f26:	bd10      	pop	{r4, pc}
   b6f28:	000b6035 	.word	0x000b6035
   b6f2c:	000b7349 	.word	0x000b7349

000b6f30 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b6f30:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b6f32:	4c0b      	ldr	r4, [pc, #44]	; (b6f60 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6f34:	7823      	ldrb	r3, [r4, #0]
   b6f36:	f3bf 8f5b 	dmb	ish
   b6f3a:	07db      	lsls	r3, r3, #31
   b6f3c:	d40e      	bmi.n	b6f5c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   b6f3e:	4620      	mov	r0, r4
   b6f40:	f7fd f8af 	bl	b40a2 <__cxa_guard_acquire>
   b6f44:	b150      	cbz	r0, b6f5c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   b6f46:	4807      	ldr	r0, [pc, #28]	; (b6f64 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6f48:	f7ff ffc4 	bl	b6ed4 <_ZN8particle14BleLocalDeviceC1Ev>
   b6f4c:	4620      	mov	r0, r4
   b6f4e:	f7fd f8ad 	bl	b40ac <__cxa_guard_release>
   b6f52:	4a05      	ldr	r2, [pc, #20]	; (b6f68 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   b6f54:	4905      	ldr	r1, [pc, #20]	; (b6f6c <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   b6f56:	4803      	ldr	r0, [pc, #12]	; (b6f64 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6f58:	f002 f9c0 	bl	b92dc <__aeabi_atexit>
    return instance;
}
   b6f5c:	4801      	ldr	r0, [pc, #4]	; (b6f64 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6f5e:	bd10      	pop	{r4, pc}
   b6f60:	2003e62c 	.word	0x2003e62c
   b6f64:	2003e638 	.word	0x2003e638
   b6f68:	2003da60 	.word	0x2003da60
   b6f6c:	000b716d 	.word	0x000b716d

000b6f70 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6f70:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b6f72:	6803      	ldr	r3, [r0, #0]
   b6f74:	3b09      	subs	r3, #9
   b6f76:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6f78:	b08d      	sub	sp, #52	; 0x34
   b6f7a:	4604      	mov	r4, r0
   b6f7c:	460d      	mov	r5, r1
    switch (event->type) {
   b6f7e:	d811      	bhi.n	b6fa4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b6f80:	f7ff ffd6 	bl	b6f30 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6f84:	88a1      	ldrh	r1, [r4, #4]
   b6f86:	6800      	ldr	r0, [r0, #0]
   b6f88:	f7ff fe8e 	bl	b6ca8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b6f8c:	4603      	mov	r3, r0
   b6f8e:	b958      	cbnz	r0, b6fa8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b6f90:	2220      	movs	r2, #32
   b6f92:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b6f96:	4a0b      	ldr	r2, [pc, #44]	; (b6fc4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b6f98:	9200      	str	r2, [sp, #0]
   b6f9a:	490b      	ldr	r1, [pc, #44]	; (b6fc8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b6f9c:	aa04      	add	r2, sp, #16
   b6f9e:	2032      	movs	r0, #50	; 0x32
   b6fa0:	f7ff fa30 	bl	b6404 <log_message>
}
   b6fa4:	b00d      	add	sp, #52	; 0x34
   b6fa6:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b6fa8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b6faa:	2a00      	cmp	r2, #0
   b6fac:	d0fa      	beq.n	b6fa4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b6fae:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6fb2:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b6fb6:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b6fba:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b6fbc:	aa04      	add	r2, sp, #16
   b6fbe:	a903      	add	r1, sp, #12
   b6fc0:	47a0      	blx	r4
}
   b6fc2:	e7ef      	b.n	b6fa4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b6fc4:	000ba515 	.word	0x000ba515
   b6fc8:	000ba4ee 	.word	0x000ba4ee

000b6fcc <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b6fcc:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b6fce:	2000      	movs	r0, #0
   b6fd0:	f7fe ff5e 	bl	b5e90 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b6fd4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6fd8:	bd08      	pop	{r3, pc}

000b6fda <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b6fda:	4608      	mov	r0, r1
   b6fdc:	b911      	cbnz	r1, b6fe4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b6fde:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b6fe0:	f7fe bf66 	b.w	b5eb0 <hal_ble_gap_set_advertising_data>
   b6fe4:	6a09      	ldr	r1, [r1, #32]
   b6fe6:	2200      	movs	r2, #0
   b6fe8:	e7fa      	b.n	b6fe0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b6fea <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b6fea:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   b6fec:	4608      	mov	r0, r1
   b6fee:	b929      	cbnz	r1, b6ffc <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b6ff0:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b6ff2:	b003      	add	sp, #12
   b6ff4:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6ff8:	f7fe bf62 	b.w	b5ec0 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b6ffc:	2101      	movs	r1, #1
   b6ffe:	9001      	str	r0, [sp, #4]
   b7000:	f7ff fe15 	bl	b6c2e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7004:	9801      	ldr	r0, [sp, #4]
   b7006:	2200      	movs	r2, #0
   b7008:	6a01      	ldr	r1, [r0, #32]
   b700a:	e7f2      	b.n	b6ff2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000b700c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b700c:	b538      	push	{r3, r4, r5, lr}
   b700e:	4604      	mov	r4, r0
   b7010:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b7012:	f7ff ffe2 	bl	b6fda <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b7016:	2800      	cmp	r0, #0
   b7018:	db0a      	blt.n	b7030 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b701a:	4629      	mov	r1, r5
   b701c:	4620      	mov	r0, r4
   b701e:	f7ff ffe4 	bl	b6fea <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b7022:	2800      	cmp	r0, #0
   b7024:	db04      	blt.n	b7030 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b7026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b702a:	2000      	movs	r0, #0
   b702c:	f7fe bf50 	b.w	b5ed0 <hal_ble_gap_start_advertising>
}
   b7030:	bd38      	pop	{r3, r4, r5, pc}

000b7032 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b7032:	6803      	ldr	r3, [r0, #0]
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b7034:	69d8      	ldr	r0, [r3, #28]
}
   b7036:	2800      	cmp	r0, #0
   b7038:	bfd4      	ite	le
   b703a:	2000      	movle	r0, #0
   b703c:	2001      	movgt	r0, #1
   b703e:	4770      	bx	lr

000b7040 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b7040:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7042:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7044:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7046:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7048:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b704a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b704c:	f7fd f823 	bl	b4096 <_Znwj>
   b7050:	b118      	cbz	r0, b705a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b7052:	682b      	ldr	r3, [r5, #0]
   b7054:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7056:	686b      	ldr	r3, [r5, #4]
   b7058:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b705a:	4b03      	ldr	r3, [pc, #12]	; (b7068 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b705c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b705e:	4b03      	ldr	r3, [pc, #12]	; (b706c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7060:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7062:	60a3      	str	r3, [r4, #8]
      }
   b7064:	4620      	mov	r0, r4
   b7066:	bd38      	pop	{r3, r4, r5, pc}
   b7068:	000b684d 	.word	0x000b684d
   b706c:	000b68a5 	.word	0x000b68a5

000b7070 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b7070:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7072:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7074:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7076:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7078:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b707a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b707c:	f7fd f80b 	bl	b4096 <_Znwj>
   b7080:	b118      	cbz	r0, b708a <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   b7082:	682b      	ldr	r3, [r5, #0]
   b7084:	6003      	str	r3, [r0, #0]
   b7086:	686b      	ldr	r3, [r5, #4]
   b7088:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b708a:	4b03      	ldr	r3, [pc, #12]	; (b7098 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b708c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b708e:	4b03      	ldr	r3, [pc, #12]	; (b709c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7090:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7092:	60a3      	str	r3, [r4, #8]
      }
   b7094:	4620      	mov	r0, r4
   b7096:	bd38      	pop	{r3, r4, r5, pc}
   b7098:	000b6841 	.word	0x000b6841
   b709c:	000b6865 	.word	0x000b6865

000b70a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b70a0:	680b      	ldr	r3, [r1, #0]
   b70a2:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b70a4:	b113      	cbz	r3, b70ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b70a6:	685a      	ldr	r2, [r3, #4]
   b70a8:	3201      	adds	r2, #1
   b70aa:	605a      	str	r2, [r3, #4]
      }
   b70ac:	4770      	bx	lr

000b70ae <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b70ae:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b70b0:	f851 3b04 	ldr.w	r3, [r1], #4
   b70b4:	4604      	mov	r4, r0
   b70b6:	f840 3b04 	str.w	r3, [r0], #4
   b70ba:	f7ff fff1 	bl	b70a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b70be:	6823      	ldr	r3, [r4, #0]
   b70c0:	b90b      	cbnz	r3, b70c6 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b70c2:	f7ff fbb5 	bl	b6830 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b70c6:	4620      	mov	r0, r4
   b70c8:	bd10      	pop	{r4, pc}

000b70ca <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b70ca:	b510      	push	{r4, lr}
   b70cc:	f851 3b04 	ldr.w	r3, [r1], #4
   b70d0:	4604      	mov	r4, r0
   b70d2:	f840 3b04 	str.w	r3, [r0], #4
   b70d6:	f7ff ffe3 	bl	b70a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b70da:	4620      	mov	r0, r4
   b70dc:	bd10      	pop	{r4, pc}

000b70de <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b70de:	b510      	push	{r4, lr}
   b70e0:	f851 3b04 	ldr.w	r3, [r1], #4
   b70e4:	4604      	mov	r4, r0
   b70e6:	f840 3b04 	str.w	r3, [r0], #4
   b70ea:	f7ff ffd9 	bl	b70a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b70ee:	4620      	mov	r0, r4
   b70f0:	bd10      	pop	{r4, pc}

000b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b70f2:	b510      	push	{r4, lr}
   b70f4:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b70f6:	6800      	ldr	r0, [r0, #0]
   b70f8:	b108      	cbz	r0, b70fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b70fa:	f7ff fc07 	bl	b690c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b70fe:	4620      	mov	r0, r4
   b7100:	bd10      	pop	{r4, pc}

000b7102 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b7102:	b510      	push	{r4, lr}
   b7104:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7106:	3004      	adds	r0, #4
   b7108:	f7ff fff3 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b710c:	4620      	mov	r0, r4
   b710e:	bd10      	pop	{r4, pc}

000b7110 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7110:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7112:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7116:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7118:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b711c:	42ae      	cmp	r6, r5
   b711e:	d004      	beq.n	b712a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b7120:	1d28      	adds	r0, r5, #4
   b7122:	f7ff ffe6 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7126:	3508      	adds	r5, #8
   b7128:	e7f8      	b.n	b711c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b712a:	6820      	ldr	r0, [r4, #0]
   b712c:	f7ff fa80 	bl	b6630 <free>
}
   b7130:	4620      	mov	r0, r4
   b7132:	bd70      	pop	{r4, r5, r6, pc}

000b7134 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7134:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7136:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b713a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b713c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7140:	42ae      	cmp	r6, r5
   b7142:	d004      	beq.n	b714e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b7144:	1d28      	adds	r0, r5, #4
   b7146:	f7ff ffd4 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b714a:	3508      	adds	r5, #8
   b714c:	e7f8      	b.n	b7140 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b714e:	6820      	ldr	r0, [r4, #0]
   b7150:	f7ff fa6e 	bl	b6630 <free>
}
   b7154:	4620      	mov	r0, r4
   b7156:	bd70      	pop	{r4, r5, r6, pc}

000b7158 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7158:	b510      	push	{r4, lr}
   b715a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b715c:	3024      	adds	r0, #36	; 0x24
   b715e:	f7ff ffe9 	bl	b7134 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7162:	f104 0018 	add.w	r0, r4, #24
   b7166:	f7ff ffd3 	bl	b7110 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b716a:	bd10      	pop	{r4, pc}

000b716c <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   b716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   b716e:	6804      	ldr	r4, [r0, #0]
   b7170:	4606      	mov	r6, r0
   b7172:	b324      	cbz	r4, b71be <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   b7174:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7178:	f7ff fbb4 	bl	b68e4 <_ZNSt14_Function_baseD1Ev>
   b717c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7180:	f7ff fbb0 	bl	b68e4 <_ZNSt14_Function_baseD1Ev>
   b7184:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7188:	f7ff fbac 	bl	b68e4 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b718c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b7190:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7194:	42af      	cmp	r7, r5
   b7196:	d004      	beq.n	b71a2 <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   b7198:	1d28      	adds	r0, r5, #4
   b719a:	f7ff ffaa 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b719e:	3508      	adds	r5, #8
   b71a0:	e7f8      	b.n	b7194 <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   b71a2:	69a0      	ldr	r0, [r4, #24]
   b71a4:	f7ff fa44 	bl	b6630 <free>
    ~BleLocalDeviceImpl() = default;
   b71a8:	f104 000c 	add.w	r0, r4, #12
   b71ac:	f7ff ffc2 	bl	b7134 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b71b0:	4620      	mov	r0, r4
   b71b2:	f7ff ffad 	bl	b7110 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b71b6:	2154      	movs	r1, #84	; 0x54
   b71b8:	4620      	mov	r0, r4
   b71ba:	f002 f894 	bl	b92e6 <_ZdlPvj>
   b71be:	4630      	mov	r0, r6
   b71c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b71c2 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b71c2:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b71c4:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b71c6:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b71ca:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b71ce:	6803      	ldr	r3, [r0, #0]
   b71d0:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b71d2:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b71d4:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b71d6:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b71d8:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b71da:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b71dc:	f7ff ff89 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b71e0:	b002      	add	sp, #8
   b71e2:	bd10      	pop	{r4, pc}

000b71e4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b71e4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b71e6:	b510      	push	{r4, lr}
      if (_M_empty())
   b71e8:	b90a      	cbnz	r2, b71ee <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b71ea:	f002 f880 	bl	b92ee <_ZSt25__throw_bad_function_callv>
    }
   b71ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b71f2:	68c3      	ldr	r3, [r0, #12]
   b71f4:	4718      	bx	r3

000b71f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
inline void spark::Vector<T, AllocatorT>::clear() {
   b71f6:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b71f8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline void spark::Vector<T, AllocatorT>::clear() {
   b71fc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b71fe:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7202:	42ae      	cmp	r6, r5
   b7204:	d004      	beq.n	b7210 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
      ~__shared_ptr() = default;
   b7206:	1d28      	adds	r0, r5, #4
   b7208:	f7ff ff73 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b720c:	3508      	adds	r5, #8
   b720e:	e7f8      	b.n	b7202 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
    size_ = 0;
   b7210:	2300      	movs	r3, #0
   b7212:	6063      	str	r3, [r4, #4]
}
   b7214:	bd70      	pop	{r4, r5, r6, pc}

000b7216 <_ZNK8particle14BleLocalDevice3offEv>:
int BleLocalDevice::off() const {
   b7216:	b513      	push	{r0, r1, r4, lr}
   b7218:	4604      	mov	r4, r0
    CHECK(hal_ble_stack_deinit(nullptr));
   b721a:	2000      	movs	r0, #0
   b721c:	f7fe fe40 	bl	b5ea0 <hal_ble_stack_deinit>
   b7220:	2800      	cmp	r0, #0
   b7222:	db0a      	blt.n	b723a <_ZNK8particle14BleLocalDevice3offEv+0x24>
        WiringBleLock lk;
   b7224:	a801      	add	r0, sp, #4
   b7226:	f7ff fb9b 	bl	b6960 <_ZN8particle3ble13WiringBleLockC1Ev>
        return peers_;
   b722a:	6820      	ldr	r0, [r4, #0]
        impl()->peers().clear();
   b722c:	3018      	adds	r0, #24
   b722e:	f7ff ffe2 	bl	b71f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
        WiringBleLock lk;
   b7232:	a801      	add	r0, sp, #4
   b7234:	f7ff fba2 	bl	b697c <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b7238:	2000      	movs	r0, #0
}
   b723a:	b002      	add	sp, #8
   b723c:	bd10      	pop	{r4, pc}

000b723e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b723e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7242:	4604      	mov	r4, r0
   b7244:	460d      	mov	r5, r1
   b7246:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7248:	d914      	bls.n	b7274 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b724a:	4290      	cmp	r0, r2
   b724c:	d213      	bcs.n	b7276 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b724e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7252:	1a75      	subs	r5, r6, r1
   b7254:	f1a1 0708 	sub.w	r7, r1, #8
   b7258:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b725a:	42b7      	cmp	r7, r6
   b725c:	d018      	beq.n	b7290 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b725e:	b11c      	cbz	r4, b7268 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7260:	4631      	mov	r1, r6
   b7262:	4620      	mov	r0, r4
   b7264:	f7ff ff3b 	bl	b70de <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7268:	1d30      	adds	r0, r6, #4
   b726a:	f7ff ff42 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b726e:	3e08      	subs	r6, #8
   b7270:	3c08      	subs	r4, #8
   b7272:	e7f2      	b.n	b725a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7274:	d00c      	beq.n	b7290 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7276:	42b5      	cmp	r5, r6
   b7278:	d00a      	beq.n	b7290 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b727a:	b11c      	cbz	r4, b7284 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b727c:	4629      	mov	r1, r5
   b727e:	4620      	mov	r0, r4
   b7280:	f7ff ff2d 	bl	b70de <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7284:	1d28      	adds	r0, r5, #4
   b7286:	f7ff ff34 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b728a:	3508      	adds	r5, #8
   b728c:	3408      	adds	r4, #8
   b728e:	e7f2      	b.n	b7276 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7292 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7292:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7294:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7296:	6846      	ldr	r6, [r0, #4]
   b7298:	4668      	mov	r0, sp
   b729a:	f7ff ff20 	bl	b70de <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b729e:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b72a2:	429f      	cmp	r7, r3
   b72a4:	db12      	blt.n	b72cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b72a6:	3701      	adds	r7, #1
        if (n > 0) {
   b72a8:	2f00      	cmp	r7, #0
   b72aa:	dd29      	ble.n	b7300 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b72ac:	00f8      	lsls	r0, r7, #3
   b72ae:	f7ff f9b7 	bl	b6620 <malloc>
            if (!d) {
   b72b2:	4605      	mov	r5, r0
   b72b4:	b1f0      	cbz	r0, b72f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b72b6:	e9d4 1200 	ldrd	r1, r2, [r4]
   b72ba:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b72be:	f7ff ffbe 	bl	b723e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b72c2:	6820      	ldr	r0, [r4, #0]
   b72c4:	f7ff f9b4 	bl	b6630 <free>
        data_ = d;
   b72c8:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b72ca:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b72cc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b72ce:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b72d0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b72d4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b72d8:	4631      	mov	r1, r6
   b72da:	f106 0008 	add.w	r0, r6, #8
   b72de:	f7ff ffae 	bl	b723e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b72e2:	b11e      	cbz	r6, b72ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b72e4:	4669      	mov	r1, sp
   b72e6:	4630      	mov	r0, r6
   b72e8:	f7ff fef9 	bl	b70de <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b72ec:	6863      	ldr	r3, [r4, #4]
   b72ee:	3301      	adds	r3, #1
   b72f0:	6063      	str	r3, [r4, #4]
    return true;
   b72f2:	2501      	movs	r5, #1
   b72f4:	a801      	add	r0, sp, #4
   b72f6:	f7ff fefc 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b72fa:	4628      	mov	r0, r5
   b72fc:	b003      	add	sp, #12
   b72fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7300:	2500      	movs	r5, #0
   b7302:	e7de      	b.n	b72c2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b7304 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7306:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b730a:	4605      	mov	r5, r0
   b730c:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b730e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7312:	42a6      	cmp	r6, r4
   b7314:	d005      	beq.n	b7322 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b7316:	4639      	mov	r1, r7
   b7318:	4620      	mov	r0, r4
   b731a:	f7ff fdb8 	bl	b6e8e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b731e:	b108      	cbz	r0, b7324 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b7320:	b914      	cbnz	r4, b7328 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b7322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b7324:	3408      	adds	r4, #8
   b7326:	e7f4      	b.n	b7312 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b7328:	1d20      	adds	r0, r4, #4
   b732a:	f7ff fee2 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b732e:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7332:	f104 0108 	add.w	r1, r4, #8
   b7336:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b733a:	4620      	mov	r0, r4
   b733c:	f7ff ff7f 	bl	b723e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b7340:	686b      	ldr	r3, [r5, #4]
   b7342:	3b01      	subs	r3, #1
   b7344:	606b      	str	r3, [r5, #4]
    return true;
   b7346:	e7ec      	b.n	b7322 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>

000b7348 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b734c:	4605      	mov	r5, r0
   b734e:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7350:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7352:	460c      	mov	r4, r1
        WiringBleLock lk;
   b7354:	f7ff fb04 	bl	b6960 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7358:	682e      	ldr	r6, [r5, #0]
   b735a:	2e04      	cmp	r6, #4
   b735c:	d06d      	beq.n	b743a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf2>
   b735e:	d807      	bhi.n	b7370 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   b7360:	2e03      	cmp	r6, #3
   b7362:	d02a      	beq.n	b73ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x72>
        WiringBleLock lk;
   b7364:	a803      	add	r0, sp, #12
   b7366:	f7ff fb09 	bl	b697c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b736a:	b00e      	add	sp, #56	; 0x38
   b736c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   b7370:	f1a6 030c 	sub.w	r3, r6, #12
   b7374:	2b04      	cmp	r3, #4
   b7376:	d8f5      	bhi.n	b7364 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7378:	89a9      	ldrh	r1, [r5, #12]
   b737a:	4620      	mov	r0, r4
   b737c:	f7ff fc94 	bl	b6ca8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7380:	4607      	mov	r7, r0
   b7382:	2800      	cmp	r0, #0
   b7384:	d0ee      	beq.n	b7364 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   b7386:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7388:	2b00      	cmp	r3, #0
   b738a:	d0eb      	beq.n	b7364 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   b738c:	2210      	movs	r2, #16
   b738e:	2100      	movs	r1, #0
   b7390:	a807      	add	r0, sp, #28
   b7392:	f002 fb89 	bl	b9aa8 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7396:	2e0d      	cmp	r6, #13
                        };
   b7398:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   b739a:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b739e:	d002      	beq.n	b73a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x5e>
   b73a0:	2e10      	cmp	r6, #16
   b73a2:	f040 8092 	bne.w	b74ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x182>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   b73a6:	686b      	ldr	r3, [r5, #4]
   b73a8:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b73aa:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   b73ac:	9308      	str	r3, [sp, #32]
   b73ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b73b0:	a906      	add	r1, sp, #24
   b73b2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b73b6:	4798      	blx	r3
   b73b8:	e7d4      	b.n	b7364 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   b73ba:	a804      	add	r0, sp, #16
   b73bc:	f7ff fd20 	bl	b6e00 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b73c0:	9b04      	ldr	r3, [sp, #16]
   b73c2:	89aa      	ldrh	r2, [r5, #12]
   b73c4:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b73c6:	6869      	ldr	r1, [r5, #4]
   b73c8:	9804      	ldr	r0, [sp, #16]
   b73ca:	3108      	adds	r1, #8
   b73cc:	3002      	adds	r0, #2
   b73ce:	f7ff fae1 	bl	b6994 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b73d2:	a904      	add	r1, sp, #16
   b73d4:	a806      	add	r0, sp, #24
   b73d6:	f7ff fe82 	bl	b70de <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b73da:	a906      	add	r1, sp, #24
   b73dc:	f104 0018 	add.w	r0, r4, #24
   b73e0:	f7ff ff57 	bl	b7292 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b73e4:	4605      	mov	r5, r0
   b73e6:	a807      	add	r0, sp, #28
   b73e8:	f7ff fe83 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b73ec:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b73ee:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b73f0:	b98d      	cbnz	r5, b7416 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xce>
                    LOG(ERROR, "Failed to append peer Central device.");
   b73f2:	4b3e      	ldr	r3, [pc, #248]	; (b74ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   b73f4:	493e      	ldr	r1, [pc, #248]	; (b74f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b73f6:	9300      	str	r3, [sp, #0]
   b73f8:	2032      	movs	r0, #50	; 0x32
   b73fa:	462b      	mov	r3, r5
   b73fc:	aa06      	add	r2, sp, #24
   b73fe:	9507      	str	r5, [sp, #28]
   b7400:	f7ff f800 	bl	b6404 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b7404:	9b04      	ldr	r3, [sp, #16]
   b7406:	4629      	mov	r1, r5
   b7408:	8818      	ldrh	r0, [r3, #0]
   b740a:	f7fe fd69 	bl	b5ee0 <hal_ble_gap_disconnect>
   b740e:	a805      	add	r0, sp, #20
   b7410:	f7ff fe6f 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7414:	e7a6      	b.n	b7364 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   b7416:	4a37      	ldr	r2, [pc, #220]	; (b74f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   b7418:	9200      	str	r2, [sp, #0]
   b741a:	2300      	movs	r3, #0
   b741c:	4934      	ldr	r1, [pc, #208]	; (b74f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b741e:	9307      	str	r3, [sp, #28]
   b7420:	aa06      	add	r2, sp, #24
   b7422:	2001      	movs	r0, #1
   b7424:	f7fe ffee 	bl	b6404 <log_message>
                if (impl->connectedCallback_) {
   b7428:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b742a:	2b00      	cmp	r3, #0
   b742c:	d0ef      	beq.n	b740e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc6>
                    impl->connectedCallback_(peer);
   b742e:	a904      	add	r1, sp, #16
   b7430:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7434:	f7ff fed6 	bl	b71e4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7438:	e7e9      	b.n	b740e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc6>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b743a:	89a9      	ldrh	r1, [r5, #12]
   b743c:	4620      	mov	r0, r4
   b743e:	f7ff fc33 	bl	b6ca8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7442:	4606      	mov	r6, r0
   b7444:	2800      	cmp	r0, #0
   b7446:	d08d      	beq.n	b7364 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
      { return _M_ptr; }
   b7448:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b744a:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b744e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7452:	8029      	strh	r1, [r5, #0]
   b7454:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7458:	429a      	cmp	r2, r3
   b745a:	d003      	beq.n	b7464 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b745c:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7460:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b7462:	e7f9      	b.n	b7458 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x110>
    destruct(data_, data_ + size_);
   b7464:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b7468:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b746c:	45b8      	cmp	r8, r7
   b746e:	d004      	beq.n	b747a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x132>
      ~__shared_ptr() = default;
   b7470:	1d38      	adds	r0, r7, #4
   b7472:	f7ff fe3e 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7476:	3708      	adds	r7, #8
   b7478:	e7f8      	b.n	b746c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
    size_ = 0;
   b747a:	2300      	movs	r3, #0
   b747c:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b747e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b7482:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7486:	45b8      	cmp	r8, r7
   b7488:	d004      	beq.n	b7494 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14c>
   b748a:	1d38      	adds	r0, r7, #4
   b748c:	f7ff fe31 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7490:	3708      	adds	r7, #8
   b7492:	e7f8      	b.n	b7486 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13e>
    size_ = 0;
   b7494:	2300      	movs	r3, #0
   b7496:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7498:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b749a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b749c:	b123      	cbz	r3, b74a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x160>
                        impl->disconnectedCallback_(*peer);
   b749e:	4631      	mov	r1, r6
   b74a0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b74a4:	f7ff fe9e 	bl	b71e4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b74a8:	2300      	movs	r3, #0
   b74aa:	2220      	movs	r2, #32
   b74ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b74b0:	4a11      	ldr	r2, [pc, #68]	; (b74f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b0>)
   b74b2:	9200      	str	r2, [sp, #0]
   b74b4:	490e      	ldr	r1, [pc, #56]	; (b74f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b74b6:	aa06      	add	r2, sp, #24
   b74b8:	2001      	movs	r0, #1
   b74ba:	f7fe ffa3 	bl	b6404 <log_message>
                    impl->peers_.removeOne(*peer);
   b74be:	4631      	mov	r1, r6
   b74c0:	f104 0018 	add.w	r0, r4, #24
   b74c4:	f7ff ff1e 	bl	b7304 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b74c8:	e74c      	b.n	b7364 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b74ca:	2e0f      	cmp	r6, #15
   b74cc:	f47f af6f 	bne.w	b73ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x66>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   b74d0:	686b      	ldr	r3, [r5, #4]
   b74d2:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   b74d4:	7a2b      	ldrb	r3, [r5, #8]
   b74d6:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   b74da:	f3c3 0340 	ubfx	r3, r3, #1, #1
   b74de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   b74e2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   b74e6:	2308      	movs	r3, #8
   b74e8:	e760      	b.n	b73ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x64>
   b74ea:	bf00      	nop
   b74ec:	000ba52d 	.word	0x000ba52d
   b74f0:	000ba4ee 	.word	0x000ba4ee
   b74f4:	000ba553 	.word	0x000ba553
   b74f8:	000ba570 	.word	0x000ba570

000b74fc <_ZNK8particle13BlePeerDevice10disconnectEv>:
int BlePeerDevice::disconnect() const {
   b74fc:	b513      	push	{r0, r1, r4, lr}
   b74fe:	4604      	mov	r4, r0
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b7500:	f7ff fca0 	bl	b6e44 <_ZNK8particle13BlePeerDevice9connectedEv>
   b7504:	b1d0      	cbz	r0, b753c <_ZNK8particle13BlePeerDevice10disconnectEv+0x40>
    CHECK(hal_ble_gap_disconnect(impl()->connHandle(), nullptr));
   b7506:	6823      	ldr	r3, [r4, #0]
   b7508:	2100      	movs	r1, #0
   b750a:	8818      	ldrh	r0, [r3, #0]
   b750c:	f7fe fce8 	bl	b5ee0 <hal_ble_gap_disconnect>
   b7510:	2800      	cmp	r0, #0
   b7512:	db11      	blt.n	b7538 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
        WiringBleLock lk;
   b7514:	a801      	add	r0, sp, #4
   b7516:	f7ff fa23 	bl	b6960 <_ZN8particle3ble13WiringBleLockC1Ev>
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b751a:	f7ff fd09 	bl	b6f30 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b751e:	6800      	ldr	r0, [r0, #0]
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b7520:	4621      	mov	r1, r4
   b7522:	3018      	adds	r0, #24
   b7524:	f7ff feee 	bl	b7304 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
      { return _M_ptr; }
   b7528:	6823      	ldr	r3, [r4, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b752a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b752e:	801a      	strh	r2, [r3, #0]
        WiringBleLock lk;
   b7530:	a801      	add	r0, sp, #4
   b7532:	f7ff fa23 	bl	b697c <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b7536:	2000      	movs	r0, #0
}
   b7538:	b002      	add	sp, #8
   b753a:	bd10      	pop	{r4, pc}
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b753c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7540:	e7fa      	b.n	b7538 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
	...

000b7544 <_ZNK8particle14BleLocalDevice13disconnectAllEv>:

int BleLocalDevice::disconnect(const BlePeerDevice& peer) const {
    return peer.disconnect();
}

int BleLocalDevice::disconnectAll() const {
   b7544:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7548:	4604      	mov	r4, r0
    WiringBleLock lk;
   b754a:	a801      	add	r0, sp, #4
   b754c:	f7ff fa08 	bl	b6960 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7550:	6823      	ldr	r3, [r4, #0]
   b7552:	4e10      	ldr	r6, [pc, #64]	; (b7594 <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x50>)
    return data_ + size_;
   b7554:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
        locked_ = false;
   b7558:	f04f 0800 	mov.w	r8, #0
   b755c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
        locked_ = true;
   b7560:	2701      	movs	r7, #1
    for (auto& p : impl()->peers()) {
   b7562:	42ac      	cmp	r4, r5
   b7564:	d00e      	beq.n	b7584 <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x40>
   b7566:	6830      	ldr	r0, [r6, #0]
   b7568:	f7fe fd54 	bl	b6014 <os_mutex_recursive_unlock>
        lk.unlock();
        p.disconnect();
   b756c:	4620      	mov	r0, r4
        locked_ = false;
   b756e:	f88d 8004 	strb.w	r8, [sp, #4]
        p.disconnect();
   b7572:	f7ff ffc3 	bl	b74fc <_ZNK8particle13BlePeerDevice10disconnectEv>
    void lock() { os_mutex_recursive_lock(handle_); }
   b7576:	6830      	ldr	r0, [r6, #0]
   b7578:	f7fe fd44 	bl	b6004 <os_mutex_recursive_lock>
        locked_ = true;
   b757c:	3408      	adds	r4, #8
   b757e:	f88d 7004 	strb.w	r7, [sp, #4]
    for (auto& p : impl()->peers()) {
   b7582:	e7ee      	b.n	b7562 <_ZNK8particle14BleLocalDevice13disconnectAllEv+0x1e>
    WiringBleLock lk;
   b7584:	a801      	add	r0, sp, #4
   b7586:	f7ff f9f9 	bl	b697c <_ZN8particle3ble13WiringBleLockD1Ev>
        lk.lock();
    }
    return SYSTEM_ERROR_NONE;
}
   b758a:	2000      	movs	r0, #0
   b758c:	b002      	add	sp, #8
   b758e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7592:	bf00      	nop
   b7594:	2003e634 	.word	0x2003e634

000b7598 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b7598:	b513      	push	{r0, r1, r4, lr}
   b759a:	460b      	mov	r3, r1
   b759c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b759e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b75a2:	466c      	mov	r4, sp
   b75a4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b75a8:	e893 0003 	ldmia.w	r3, {r0, r1}
   b75ac:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b75b0:	e894 0003 	ldmia.w	r4, {r0, r1}
   b75b4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b75b8:	b002      	add	sp, #8
   b75ba:	bd10      	pop	{r4, pc}

000b75bc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b75bc:	b538      	push	{r3, r4, r5, lr}
   b75be:	4605      	mov	r5, r0
   b75c0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b75c2:	f7ff ffe9 	bl	b7598 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b75c6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b75c8:	68a2      	ldr	r2, [r4, #8]
   b75ca:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b75cc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b75ce:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b75d0:	68e2      	ldr	r2, [r4, #12]
   b75d2:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b75d4:	60e3      	str	r3, [r4, #12]
      }
   b75d6:	bd38      	pop	{r3, r4, r5, pc}

000b75d8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b75d8:	b570      	push	{r4, r5, r6, lr}
   b75da:	460e      	mov	r6, r1
   b75dc:	b08c      	sub	sp, #48	; 0x30
   b75de:	4604      	mov	r4, r0
   b75e0:	9201      	str	r2, [sp, #4]
   b75e2:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b75e4:	f7ff fb40 	bl	b6c68 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b75e8:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   b75ea:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   b75ec:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   b75ee:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b75f2:	f000 fe76 	bl	b82e2 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b75f6:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b75fa:	b1cd      	cbz	r5, b7630 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x58>
   b75fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b75fe:	9502      	str	r5, [sp, #8]
   b7600:	a902      	add	r1, sp, #8
   b7602:	a804      	add	r0, sp, #16
   b7604:	9303      	str	r3, [sp, #12]
   b7606:	f7ff fd1b 	bl	b7040 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b760a:	2300      	movs	r3, #0
	__x.swap(*this);
   b760c:	a908      	add	r1, sp, #32
   b760e:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b7610:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b7612:	f7ff ffd3 	bl	b75bc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7616:	4631      	mov	r1, r6
   b7618:	a808      	add	r0, sp, #32
   b761a:	f7ff ffcf 	bl	b75bc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b761e:	a808      	add	r0, sp, #32
   b7620:	f7ff f960 	bl	b68e4 <_ZNSt14_Function_baseD1Ev>
   b7624:	a804      	add	r0, sp, #16
   b7626:	f7ff f95d 	bl	b68e4 <_ZNSt14_Function_baseD1Ev>
    }
   b762a:	4620      	mov	r0, r4
   b762c:	b00c      	add	sp, #48	; 0x30
   b762e:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7630:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7632:	e7ea      	b.n	b760a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000b7634 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b7634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7638:	b089      	sub	sp, #36	; 0x24
   b763a:	461d      	mov	r5, r3
   b763c:	e9dd 4312 	ldrd	r4, r3, [sp, #72]	; 0x48
   b7640:	4680      	mov	r8, r0
   b7642:	468a      	mov	sl, r1
   b7644:	4693      	mov	fp, r2
   b7646:	9914      	ldr	r1, [sp, #80]	; 0x50
   b7648:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b764a:	2200      	movs	r2, #0
   b764c:	2068      	movs	r0, #104	; 0x68
   b764e:	9102      	str	r1, [sp, #8]
   b7650:	9206      	str	r2, [sp, #24]
   b7652:	f7fc fd20 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7656:	1e06      	subs	r6, r0, #0
   b7658:	f106 090c 	add.w	r9, r6, #12
   b765c:	d01c      	beq.n	b7698 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x64>
      : _M_use_count(1), _M_weak_count(1) { }
   b765e:	2201      	movs	r2, #1
	: _M_impl(__a)
   b7660:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b7662:	e9c6 2201 	strd	r2, r2, [r6, #4]
	: _M_impl(__a)
   b7666:	4a17      	ldr	r2, [pc, #92]	; (b76c4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b7668:	f847 2b20 	str.w	r2, [r7], #32
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b766c:	9902      	ldr	r1, [sp, #8]
   b766e:	f89b 2000 	ldrb.w	r2, [fp]
   b7672:	9b03      	ldr	r3, [sp, #12]
    value_ = flags.value_;
   b7674:	f88d 2014 	strb.w	r2, [sp, #20]
   b7678:	9100      	str	r1, [sp, #0]
   b767a:	4652      	mov	r2, sl
   b767c:	a905      	add	r1, sp, #20
   b767e:	4648      	mov	r0, r9
   b7680:	f7ff ffaa 	bl	b75d8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b7684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7686:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b7688:	682b      	ldr	r3, [r5, #0]
   b768a:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b768c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b768e:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b7692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7694:	6823      	ldr	r3, [r4, #0]
   b7696:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b7698:	a906      	add	r1, sp, #24
   b769a:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b769c:	e9cd 9606 	strd	r9, r6, [sp, #24]
   b76a0:	f7ff fd8f 	bl	b71c2 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b76a4:	a807      	add	r0, sp, #28
   b76a6:	f7ff fd24 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b76aa:	f8d8 1000 	ldr.w	r1, [r8]
   b76ae:	b931      	cbnz	r1, b76be <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8a>
        SPARK_ASSERT(false);
   b76b0:	4a05      	ldr	r2, [pc, #20]	; (b76c8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b76b2:	200a      	movs	r0, #10
}
   b76b4:	b009      	add	sp, #36	; 0x24
   b76b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b76ba:	f7fe be9b 	b.w	b63f4 <panic_>
}
   b76be:	b009      	add	sp, #36	; 0x24
   b76c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b76c4:	000ba5ec 	.word	0x000ba5ec
   b76c8:	000b6035 	.word	0x000b6035

000b76cc <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b76cc:	b538      	push	{r3, r4, r5, lr}
   b76ce:	4605      	mov	r5, r0
   b76d0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b76d2:	f7ff ff61 	bl	b7598 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b76d6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b76d8:	68a2      	ldr	r2, [r4, #8]
   b76da:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b76dc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b76de:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b76e0:	68e2      	ldr	r2, [r4, #12]
   b76e2:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b76e4:	60e3      	str	r3, [r4, #12]
      }
   b76e6:	bd38      	pop	{r3, r4, r5, pc}

000b76e8 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b76e8:	b510      	push	{r4, lr}
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b76ea:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b76ec:	b08a      	sub	sp, #40	; 0x28
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b76ee:	3434      	adds	r4, #52	; 0x34
   b76f0:	b1b9      	cbz	r1, b7722 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b76f2:	e9cd 1200 	strd	r1, r2, [sp]
   b76f6:	a802      	add	r0, sp, #8
   b76f8:	4669      	mov	r1, sp
   b76fa:	f7ff fcb9 	bl	b7070 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b76fe:	2300      	movs	r3, #0
	__x.swap(*this);
   b7700:	a906      	add	r1, sp, #24
   b7702:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7704:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7706:	f7ff ffe1 	bl	b76cc <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b770a:	4621      	mov	r1, r4
   b770c:	a806      	add	r0, sp, #24
   b770e:	f7ff ffdd 	bl	b76cc <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b7712:	a806      	add	r0, sp, #24
   b7714:	f7ff f8e6 	bl	b68e4 <_ZNSt14_Function_baseD1Ev>
   b7718:	a802      	add	r0, sp, #8
   b771a:	f7ff f8e3 	bl	b68e4 <_ZNSt14_Function_baseD1Ev>
}
   b771e:	b00a      	add	sp, #40	; 0x28
   b7720:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7722:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7724:	e7eb      	b.n	b76fe <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b7726 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7726:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7728:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b772a:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b772c:	3424      	adds	r4, #36	; 0x24
   b772e:	b1b9      	cbz	r1, b7760 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b7730:	e9cd 1200 	strd	r1, r2, [sp]
   b7734:	a802      	add	r0, sp, #8
   b7736:	4669      	mov	r1, sp
   b7738:	f7ff fc9a 	bl	b7070 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b773c:	2300      	movs	r3, #0
	__x.swap(*this);
   b773e:	a906      	add	r1, sp, #24
   b7740:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7742:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7744:	f7ff ffc2 	bl	b76cc <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b7748:	4621      	mov	r1, r4
   b774a:	a806      	add	r0, sp, #24
   b774c:	f7ff ffbe 	bl	b76cc <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b7750:	a806      	add	r0, sp, #24
   b7752:	f7ff f8c7 	bl	b68e4 <_ZNSt14_Function_baseD1Ev>
   b7756:	a802      	add	r0, sp, #8
   b7758:	f7ff f8c4 	bl	b68e4 <_ZNSt14_Function_baseD1Ev>
}
   b775c:	b00a      	add	sp, #40	; 0x28
   b775e:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7760:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7762:	e7eb      	b.n	b773c <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b7764 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7764:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7768:	4604      	mov	r4, r0
   b776a:	460d      	mov	r5, r1
   b776c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b776e:	d914      	bls.n	b779a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7770:	4290      	cmp	r0, r2
   b7772:	d213      	bcs.n	b779c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7774:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7778:	1a75      	subs	r5, r6, r1
   b777a:	f1a1 0708 	sub.w	r7, r1, #8
   b777e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7780:	42b7      	cmp	r7, r6
   b7782:	d018      	beq.n	b77b6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7784:	b11c      	cbz	r4, b778e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7786:	4631      	mov	r1, r6
   b7788:	4620      	mov	r0, r4
   b778a:	f7ff fc9e 	bl	b70ca <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b778e:	1d30      	adds	r0, r6, #4
   b7790:	f7ff fcaf 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7794:	3e08      	subs	r6, #8
   b7796:	3c08      	subs	r4, #8
   b7798:	e7f2      	b.n	b7780 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b779a:	d00c      	beq.n	b77b6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b779c:	42b5      	cmp	r5, r6
   b779e:	d00a      	beq.n	b77b6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b77a0:	b11c      	cbz	r4, b77aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b77a2:	4629      	mov	r1, r5
   b77a4:	4620      	mov	r0, r4
   b77a6:	f7ff fc90 	bl	b70ca <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b77aa:	1d28      	adds	r0, r5, #4
   b77ac:	f7ff fca1 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b77b0:	3508      	adds	r5, #8
   b77b2:	3408      	adds	r4, #8
   b77b4:	e7f2      	b.n	b779c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b77b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b77b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b77b8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b77ba:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b77bc:	4605      	mov	r5, r0
        if (n > 0) {
   b77be:	dd11      	ble.n	b77e4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b77c0:	00f0      	lsls	r0, r6, #3
   b77c2:	f7fe ff2d 	bl	b6620 <malloc>
            if (!d) {
   b77c6:	4604      	mov	r4, r0
   b77c8:	b158      	cbz	r0, b77e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b77ca:	e9d5 1200 	ldrd	r1, r2, [r5]
   b77ce:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b77d2:	f7ff ffc7 	bl	b7764 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b77d6:	6828      	ldr	r0, [r5, #0]
   b77d8:	f7fe ff2a 	bl	b6630 <free>
        data_ = d;
   b77dc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b77de:	60ae      	str	r6, [r5, #8]
        return true;
   b77e0:	2001      	movs	r0, #1
    }
   b77e2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b77e4:	2400      	movs	r4, #0
   b77e6:	e7f6      	b.n	b77d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b77e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b77e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b77ea:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b77ec:	6845      	ldr	r5, [r0, #4]
   b77ee:	4668      	mov	r0, sp
   b77f0:	f7ff fc6b 	bl	b70ca <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b77f4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b77f8:	4299      	cmp	r1, r3
   b77fa:	da10      	bge.n	b781e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b77fc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b77fe:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7800:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7804:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7808:	4629      	mov	r1, r5
   b780a:	f105 0008 	add.w	r0, r5, #8
   b780e:	f7ff ffa9 	bl	b7764 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7812:	b98d      	cbnz	r5, b7838 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7814:	6863      	ldr	r3, [r4, #4]
   b7816:	3301      	adds	r3, #1
   b7818:	6063      	str	r3, [r4, #4]
    return true;
   b781a:	2601      	movs	r6, #1
   b781c:	e006      	b.n	b782c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b781e:	3101      	adds	r1, #1
   b7820:	4620      	mov	r0, r4
   b7822:	f7ff ffc9 	bl	b77b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7826:	4606      	mov	r6, r0
   b7828:	2800      	cmp	r0, #0
   b782a:	d1e7      	bne.n	b77fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b782c:	a801      	add	r0, sp, #4
   b782e:	f7ff fc60 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7832:	4630      	mov	r0, r6
   b7834:	b002      	add	sp, #8
   b7836:	bd70      	pop	{r4, r5, r6, pc}
   b7838:	4669      	mov	r1, sp
   b783a:	4628      	mov	r0, r5
   b783c:	f7ff fc45 	bl	b70ca <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7840:	e7e8      	b.n	b7814 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7842 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7842:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7846:	4604      	mov	r4, r0
   b7848:	460d      	mov	r5, r1
   b784a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b784c:	d914      	bls.n	b7878 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b784e:	4290      	cmp	r0, r2
   b7850:	d213      	bcs.n	b787a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7852:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7856:	1a75      	subs	r5, r6, r1
   b7858:	f1a1 0708 	sub.w	r7, r1, #8
   b785c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b785e:	42b7      	cmp	r7, r6
   b7860:	d018      	beq.n	b7894 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7862:	b11c      	cbz	r4, b786c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7864:	4631      	mov	r1, r6
   b7866:	4620      	mov	r0, r4
   b7868:	f7ff fc21 	bl	b70ae <_ZN8particle17BleCharacteristicC1ERKS0_>
   b786c:	1d30      	adds	r0, r6, #4
   b786e:	f7ff fc40 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7872:	3e08      	subs	r6, #8
   b7874:	3c08      	subs	r4, #8
   b7876:	e7f2      	b.n	b785e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7878:	d00c      	beq.n	b7894 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b787a:	42b5      	cmp	r5, r6
   b787c:	d00a      	beq.n	b7894 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b787e:	b11c      	cbz	r4, b7888 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7880:	4629      	mov	r1, r5
   b7882:	4620      	mov	r0, r4
   b7884:	f7ff fc13 	bl	b70ae <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7888:	1d28      	adds	r0, r5, #4
   b788a:	f7ff fc32 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b788e:	3508      	adds	r5, #8
   b7890:	3408      	adds	r4, #8
   b7892:	e7f2      	b.n	b787a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7896 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7896:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7898:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b789a:	4605      	mov	r5, r0
        if (n > 0) {
   b789c:	dd11      	ble.n	b78c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b789e:	00f0      	lsls	r0, r6, #3
   b78a0:	f7fe febe 	bl	b6620 <malloc>
            if (!d) {
   b78a4:	4604      	mov	r4, r0
   b78a6:	b158      	cbz	r0, b78c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b78a8:	e9d5 1200 	ldrd	r1, r2, [r5]
   b78ac:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b78b0:	f7ff ffc7 	bl	b7842 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b78b4:	6828      	ldr	r0, [r5, #0]
   b78b6:	f7fe febb 	bl	b6630 <free>
        data_ = d;
   b78ba:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b78bc:	60ae      	str	r6, [r5, #8]
        return true;
   b78be:	2001      	movs	r0, #1
    }
   b78c0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b78c2:	2400      	movs	r4, #0
   b78c4:	e7f6      	b.n	b78b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b78c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b78c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b78c8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b78ca:	6845      	ldr	r5, [r0, #4]
   b78cc:	4668      	mov	r0, sp
   b78ce:	f7ff fbee 	bl	b70ae <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b78d2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b78d6:	4299      	cmp	r1, r3
   b78d8:	da10      	bge.n	b78fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b78da:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b78dc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b78de:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b78e2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b78e6:	4629      	mov	r1, r5
   b78e8:	f105 0008 	add.w	r0, r5, #8
   b78ec:	f7ff ffa9 	bl	b7842 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b78f0:	b98d      	cbnz	r5, b7916 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b78f2:	6863      	ldr	r3, [r4, #4]
   b78f4:	3301      	adds	r3, #1
   b78f6:	6063      	str	r3, [r4, #4]
    return true;
   b78f8:	2601      	movs	r6, #1
   b78fa:	e006      	b.n	b790a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b78fc:	3101      	adds	r1, #1
   b78fe:	4620      	mov	r0, r4
   b7900:	f7ff ffc9 	bl	b7896 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7904:	4606      	mov	r6, r0
   b7906:	2800      	cmp	r0, #0
   b7908:	d1e7      	bne.n	b78da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b790a:	a801      	add	r0, sp, #4
   b790c:	f7ff fbf1 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7910:	4630      	mov	r0, r6
   b7912:	b002      	add	sp, #8
   b7914:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b7916:	4669      	mov	r1, sp
   b7918:	4628      	mov	r0, r5
   b791a:	f7ff fbc8 	bl	b70ae <_ZN8particle17BleCharacteristicC1ERKS0_>
   b791e:	e7e8      	b.n	b78f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7920 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7924:	4617      	mov	r7, r2
   b7926:	b0a1      	sub	sp, #132	; 0x84
   b7928:	4680      	mov	r8, r0
    WiringBleLock lk;
   b792a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b792c:	460e      	mov	r6, r1
    WiringBleLock lk;
   b792e:	f7ff f817 	bl	b6960 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7932:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b7934:	7923      	ldrb	r3, [r4, #4]
   b7936:	b953      	cbnz	r3, b794e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b7938:	4639      	mov	r1, r7
   b793a:	4640      	mov	r0, r8
   b793c:	f7ff fbb7 	bl	b70ae <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b7940:	a80a      	add	r0, sp, #40	; 0x28
   b7942:	f7ff f81b 	bl	b697c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b7946:	4640      	mov	r0, r8
   b7948:	b021      	add	sp, #132	; 0x84
   b794a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b794e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b7950:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b7954:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b7958:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b795a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b795e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b7962:	9b03      	ldr	r3, [sp, #12]
   b7964:	429d      	cmp	r5, r3
   b7966:	d021      	beq.n	b79ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b7968:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b796c:	4658      	mov	r0, fp
   b796e:	f109 0114 	add.w	r1, r9, #20
   b7972:	f7ff f8b0 	bl	b6ad6 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b7976:	b1b8      	cbz	r0, b79a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b7978:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b797c:	4650      	mov	r0, sl
   b797e:	f7ff f8aa 	bl	b6ad6 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b7982:	b188      	cbz	r0, b79a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b7984:	6823      	ldr	r3, [r4, #0]
   b7986:	f8d9 2000 	ldr.w	r2, [r9]
   b798a:	4053      	eors	r3, r2
   b798c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b7990:	d10a      	bne.n	b79a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b7992:	2220      	movs	r2, #32
   b7994:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b7998:	4a5e      	ldr	r2, [pc, #376]	; (b7b14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b799a:	9200      	str	r2, [sp, #0]
   b799c:	aa15      	add	r2, sp, #84	; 0x54
   b799e:	495e      	ldr	r1, [pc, #376]	; (b7b18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b79a0:	2032      	movs	r0, #50	; 0x32
   b79a2:	f7fe fd2f 	bl	b6404 <log_message>
   b79a6:	e7c7      	b.n	b7938 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b79a8:	3508      	adds	r5, #8
   b79aa:	e7da      	b.n	b7962 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b79ac:	4650      	mov	r0, sl
   b79ae:	f7ff f863 	bl	b6a78 <_ZNK8particle7BleUuid7isValidEv>
   b79b2:	b960      	cbnz	r0, b79ce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   b79b4:	4959      	ldr	r1, [pc, #356]	; (b7b1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b79b6:	2201      	movs	r2, #1
   b79b8:	a815      	add	r0, sp, #84	; 0x54
   b79ba:	ad15      	add	r5, sp, #84	; 0x54
   b79bc:	f7ff f833 	bl	b6a26 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b79c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b79c2:	46d4      	mov	ip, sl
   b79c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b79c8:	682b      	ldr	r3, [r5, #0]
   b79ca:	f8cc 3000 	str.w	r3, [ip]
   b79ce:	6833      	ldr	r3, [r6, #0]
   b79d0:	e9d3 5300 	ldrd	r5, r3, [r3]
   b79d4:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b79d8:	455d      	cmp	r5, fp
   b79da:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b79dc:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b79de:	d06e      	beq.n	b7abe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b79e0:	f855 0b08 	ldr.w	r0, [r5], #8
   b79e4:	f7ff f877 	bl	b6ad6 <_ZNK8particle7BleUuideqERKS0_>
   b79e8:	2800      	cmp	r0, #0
   b79ea:	d0f5      	beq.n	b79d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b79ec:	f104 0a14 	add.w	sl, r4, #20
   b79f0:	4650      	mov	r0, sl
   b79f2:	f7ff f841 	bl	b6a78 <_ZNK8particle7BleUuid7isValidEv>
   b79f6:	b988      	cbnz	r0, b7a1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b79f8:	4b49      	ldr	r3, [pc, #292]	; (b7b20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b79fa:	4948      	ldr	r1, [pc, #288]	; (b7b1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b79fc:	881a      	ldrh	r2, [r3, #0]
   b79fe:	3201      	adds	r2, #1
   b7a00:	b292      	uxth	r2, r2
   b7a02:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7a04:	a815      	add	r0, sp, #84	; 0x54
   b7a06:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b7a08:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7a0a:	f7ff f82b 	bl	b6a64 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b7a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7a10:	46d4      	mov	ip, sl
   b7a12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7a16:	682b      	ldr	r3, [r5, #0]
   b7a18:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b7a1c:	4b41      	ldr	r3, [pc, #260]	; (b7b24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b7a1e:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b7a20:	2228      	movs	r2, #40	; 0x28
   b7a22:	2100      	movs	r1, #0
   b7a24:	a816      	add	r0, sp, #88	; 0x58
   b7a26:	f002 f83f 	bl	b9aa8 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b7a2a:	4651      	mov	r1, sl
   b7a2c:	a804      	add	r0, sp, #16
   b7a2e:	f7ff f835 	bl	b6a9c <_ZN8particle7BleUuid7halUUIDEv>
   b7a32:	ab04      	add	r3, sp, #16
   b7a34:	aa18      	add	r2, sp, #96	; 0x60
   b7a36:	f10d 0c20 	add.w	ip, sp, #32
   b7a3a:	6818      	ldr	r0, [r3, #0]
   b7a3c:	6859      	ldr	r1, [r3, #4]
   b7a3e:	4615      	mov	r5, r2
   b7a40:	c503      	stmia	r5!, {r0, r1}
   b7a42:	3308      	adds	r3, #8
   b7a44:	4563      	cmp	r3, ip
   b7a46:	462a      	mov	r2, r5
   b7a48:	d1f7      	bne.n	b7a3a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b7a4a:	6818      	ldr	r0, [r3, #0]
   b7a4c:	6028      	str	r0, [r5, #0]
    return value_;
   b7a4e:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b7a50:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b7a54:	f8d9 3000 	ldr.w	r3, [r9]
   b7a58:	8a9b      	ldrh	r3, [r3, #20]
   b7a5a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b7a5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7a60:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b7a62:	4b31      	ldr	r3, [pc, #196]	; (b7b28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7a64:	2200      	movs	r2, #0
   b7a66:	1da1      	adds	r1, r4, #6
   b7a68:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b7a6a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7a6e:	f7fe fa69 	bl	b5f44 <hal_ble_gatt_server_add_characteristic>
   b7a72:	2800      	cmp	r0, #0
   b7a74:	f47f af60 	bne.w	b7938 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b7a78:	2301      	movs	r3, #1
   b7a7a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b7a7c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b7a7e:	4639      	mov	r1, r7
        return characteristics_;
   b7a80:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b7a82:	a80d      	add	r0, sp, #52	; 0x34
   b7a84:	f7ff fb13 	bl	b70ae <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7a88:	4620      	mov	r0, r4
   b7a8a:	a90d      	add	r1, sp, #52	; 0x34
   b7a8c:	f7ff ff1b 	bl	b78c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b7a90:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7a92:	a80e      	add	r0, sp, #56	; 0x38
   b7a94:	f7ff fb2d 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7a98:	2c00      	cmp	r4, #0
   b7a9a:	f47f af4d 	bne.w	b7938 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b7a9e:	2320      	movs	r3, #32
   b7aa0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b7aa4:	4b21      	ldr	r3, [pc, #132]	; (b7b2c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b7aa6:	9300      	str	r3, [sp, #0]
   b7aa8:	aa0d      	add	r2, sp, #52	; 0x34
   b7aaa:	4623      	mov	r3, r4
   b7aac:	e777      	b.n	b799e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b7aae:	4639      	mov	r1, r7
   b7ab0:	4640      	mov	r0, r8
   b7ab2:	f7ff fafc 	bl	b70ae <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7ab6:	a80c      	add	r0, sp, #48	; 0x30
   b7ab8:	f7ff fb1b 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7abc:	e740      	b.n	b7940 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b7abe:	a80b      	add	r0, sp, #44	; 0x2c
   b7ac0:	f7ff f97a 	bl	b6db8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b7ac4:	4651      	mov	r1, sl
   b7ac6:	a815      	add	r0, sp, #84	; 0x54
   b7ac8:	f7fe ffe8 	bl	b6a9c <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b7acc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7ace:	2300      	movs	r3, #0
   b7ad0:	3214      	adds	r2, #20
   b7ad2:	a915      	add	r1, sp, #84	; 0x54
   b7ad4:	2001      	movs	r0, #1
   b7ad6:	f7fe fa0d 	bl	b5ef4 <hal_ble_gatt_server_add_service>
   b7ada:	2800      	cmp	r0, #0
   b7adc:	d1e7      	bne.n	b7aae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b7ade:	6835      	ldr	r5, [r6, #0]
   b7ae0:	a90b      	add	r1, sp, #44	; 0x2c
   b7ae2:	a80d      	add	r0, sp, #52	; 0x34
   b7ae4:	f7ff faf1 	bl	b70ca <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b7ae8:	4628      	mov	r0, r5
   b7aea:	a90d      	add	r1, sp, #52	; 0x34
   b7aec:	f7ff fe7c 	bl	b77e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7af0:	4605      	mov	r5, r0
   b7af2:	a80e      	add	r0, sp, #56	; 0x38
   b7af4:	f7ff fafd 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7af8:	2d00      	cmp	r5, #0
   b7afa:	d0d8      	beq.n	b7aae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b7afc:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b7afe:	6853      	ldr	r3, [r2, #4]
   b7b00:	6812      	ldr	r2, [r2, #0]
   b7b02:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b7b06:	3b01      	subs	r3, #1
   b7b08:	a80c      	add	r0, sp, #48	; 0x30
   b7b0a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b7b0e:	f7ff faf0 	bl	b70f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7b12:	e76b      	b.n	b79ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b7b14:	000ba58f 	.word	0x000ba58f
   b7b18:	000ba4ee 	.word	0x000ba4ee
   b7b1c:	000ba656 	.word	0x000ba656
   b7b20:	2003e630 	.word	0x2003e630
   b7b24:	002c0003 	.word	0x002c0003
   b7b28:	000b6f71 	.word	0x000b6f71
   b7b2c:	000ba5ba 	.word	0x000ba5ba

000b7b30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   b7b30:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   b7b32:	4c06      	ldr	r4, [pc, #24]	; (b7b4c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   b7b34:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   b7b36:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   b7b38:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   b7b3a:	f7fe fa53 	bl	b5fe4 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   b7b3e:	4620      	mov	r0, r4
   b7b40:	4a03      	ldr	r2, [pc, #12]	; (b7b50 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   b7b42:	4904      	ldr	r1, [pc, #16]	; (b7b54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   b7b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   b7b48:	f001 bbc8 	b.w	b92dc <__aeabi_atexit>
   b7b4c:	2003e634 	.word	0x2003e634
   b7b50:	2003da60 	.word	0x2003da60
   b7b54:	000b676d 	.word	0x000b676d

000b7b58 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7b58:	2200      	movs	r2, #0
   b7b5a:	6840      	ldr	r0, [r0, #4]
   b7b5c:	4611      	mov	r1, r2
   b7b5e:	f7fe bd1f 	b.w	b65a0 <network_listening>

000b7b62 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7b62:	2200      	movs	r2, #0
   b7b64:	6840      	ldr	r0, [r0, #4]
   b7b66:	4611      	mov	r1, r2
   b7b68:	f7fe bd42 	b.w	b65f0 <network_get_listen_timeout>

000b7b6c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7b6c:	6840      	ldr	r0, [r0, #4]
   b7b6e:	2200      	movs	r2, #0
   b7b70:	f7fe bd36 	b.w	b65e0 <network_set_listen_timeout>

000b7b74 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7b74:	6840      	ldr	r0, [r0, #4]
   b7b76:	2200      	movs	r2, #0
   b7b78:	f081 0101 	eor.w	r1, r1, #1
   b7b7c:	f7fe bd08 	b.w	b6590 <network_listen>

000b7b80 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7b80:	2300      	movs	r3, #0
   b7b82:	6840      	ldr	r0, [r0, #4]
   b7b84:	461a      	mov	r2, r3
   b7b86:	4619      	mov	r1, r3
   b7b88:	f7fe bcfa 	b.w	b6580 <network_off>

000b7b8c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7b8c:	2300      	movs	r3, #0
   b7b8e:	6840      	ldr	r0, [r0, #4]
   b7b90:	461a      	mov	r2, r3
   b7b92:	4619      	mov	r1, r3
   b7b94:	f7fe bcec 	b.w	b6570 <network_on>

000b7b98 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7b98:	2200      	movs	r2, #0
   b7b9a:	6840      	ldr	r0, [r0, #4]
   b7b9c:	4611      	mov	r1, r2
   b7b9e:	f7fe bcdf 	b.w	b6560 <network_ready>

000b7ba2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7ba2:	2200      	movs	r2, #0
   b7ba4:	6840      	ldr	r0, [r0, #4]
   b7ba6:	4611      	mov	r1, r2
   b7ba8:	f7fe bcca 	b.w	b6540 <network_connecting>

000b7bac <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7bac:	6840      	ldr	r0, [r0, #4]
   b7bae:	2200      	movs	r2, #0
   b7bb0:	2102      	movs	r1, #2
   b7bb2:	f7fe bccd 	b.w	b6550 <network_disconnect>

000b7bb6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7bb6:	2300      	movs	r3, #0
   b7bb8:	6840      	ldr	r0, [r0, #4]
   b7bba:	461a      	mov	r2, r3
   b7bbc:	f7fe bcb8 	b.w	b6530 <network_connect>

000b7bc0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7bc0:	4b02      	ldr	r3, [pc, #8]	; (b7bcc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7bc2:	2203      	movs	r2, #3
   b7bc4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7bc6:	4a02      	ldr	r2, [pc, #8]	; (b7bd0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7bc8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7bca:	4770      	bx	lr
   b7bcc:	2003e63c 	.word	0x2003e63c
   b7bd0:	000ba680 	.word	0x000ba680

000b7bd4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7bd4:	4770      	bx	lr

000b7bd6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7bd8:	4606      	mov	r6, r0
   b7bda:	4615      	mov	r5, r2
   b7bdc:	460c      	mov	r4, r1
   b7bde:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7be0:	42bc      	cmp	r4, r7
   b7be2:	d006      	beq.n	b7bf2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7be4:	6833      	ldr	r3, [r6, #0]
   b7be6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7bea:	689b      	ldr	r3, [r3, #8]
   b7bec:	4630      	mov	r0, r6
   b7bee:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7bf0:	e7f6      	b.n	b7be0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7bf2:	4628      	mov	r0, r5
   b7bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7bf6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7bf6:	7c00      	ldrb	r0, [r0, #16]
   b7bf8:	2200      	movs	r2, #0
   b7bfa:	f7fe ba8b 	b.w	b6114 <hal_i2c_write>

000b7bfe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7bfe:	7c00      	ldrb	r0, [r0, #16]
   b7c00:	2100      	movs	r1, #0
   b7c02:	f7fe ba8f 	b.w	b6124 <hal_i2c_available>

000b7c06 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7c06:	7c00      	ldrb	r0, [r0, #16]
   b7c08:	2100      	movs	r1, #0
   b7c0a:	f7fe ba93 	b.w	b6134 <hal_i2c_read>

000b7c0e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7c0e:	7c00      	ldrb	r0, [r0, #16]
   b7c10:	2100      	movs	r1, #0
   b7c12:	f7fe ba97 	b.w	b6144 <hal_i2c_peek>

000b7c16 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7c16:	7c00      	ldrb	r0, [r0, #16]
   b7c18:	2100      	movs	r1, #0
   b7c1a:	f7fe ba9b 	b.w	b6154 <hal_i2c_flush>

000b7c1e <_ZN7TwoWireD0Ev>:
   b7c1e:	b510      	push	{r4, lr}
   b7c20:	2114      	movs	r1, #20
   b7c22:	4604      	mov	r4, r0
   b7c24:	f001 fb5f 	bl	b92e6 <_ZdlPvj>
   b7c28:	4620      	mov	r0, r4
   b7c2a:	bd10      	pop	{r4, pc}

000b7c2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7c2c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7c32:	4604      	mov	r4, r0
   b7c34:	4608      	mov	r0, r1
   b7c36:	2100      	movs	r1, #0
   b7c38:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7c3c:	4b03      	ldr	r3, [pc, #12]	; (b7c4c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7c3e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7c40:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b7c42:	4611      	mov	r1, r2
   b7c44:	f7fe fa96 	bl	b6174 <hal_i2c_init>
}
   b7c48:	4620      	mov	r0, r4
   b7c4a:	bd10      	pop	{r4, pc}
   b7c4c:	000ba6bc 	.word	0x000ba6bc

000b7c50 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7c50:	2300      	movs	r3, #0
   b7c52:	7c00      	ldrb	r0, [r0, #16]
   b7c54:	461a      	mov	r2, r3
   b7c56:	4619      	mov	r1, r3
   b7c58:	f7fe ba44 	b.w	b60e4 <hal_i2c_begin>

000b7c5c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b7c5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b7c5e:	2200      	movs	r2, #0
   b7c60:	2314      	movs	r3, #20
   b7c62:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b7c66:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b7c6a:	780b      	ldrb	r3, [r1, #0]
   b7c6c:	f88d 3008 	strb.w	r3, [sp, #8]
   b7c70:	684b      	ldr	r3, [r1, #4]
   b7c72:	9303      	str	r3, [sp, #12]
   b7c74:	68cb      	ldr	r3, [r1, #12]
   b7c76:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b7c78:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b7c7a:	7a0b      	ldrb	r3, [r1, #8]
   b7c7c:	9305      	str	r3, [sp, #20]
   b7c7e:	a901      	add	r1, sp, #4
   b7c80:	f7fe fa80 	bl	b6184 <hal_i2c_request_ex>
}
   b7c84:	b007      	add	sp, #28
   b7c86:	f85d fb04 	ldr.w	pc, [sp], #4

000b7c8a <_ZN7TwoWire11requestFromEhjh>:
{
   b7c8a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b7c8c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b7c8e:	f88d 1000 	strb.w	r1, [sp]
   b7c92:	f04f 0164 	mov.w	r1, #100	; 0x64
   b7c96:	9103      	str	r1, [sp, #12]
   b7c98:	bf18      	it	ne
   b7c9a:	2301      	movne	r3, #1
   b7c9c:	4669      	mov	r1, sp
    size_ = size;
   b7c9e:	9201      	str	r2, [sp, #4]
   b7ca0:	f88d 3008 	strb.w	r3, [sp, #8]
   b7ca4:	f7ff ffda 	bl	b7c5c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b7ca8:	b005      	add	sp, #20
   b7caa:	f85d fb04 	ldr.w	pc, [sp], #4

000b7cae <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b7cae:	2301      	movs	r3, #1
   b7cb0:	f7ff bfeb 	b.w	b7c8a <_ZN7TwoWire11requestFromEhjh>

000b7cb4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7cb4:	7c00      	ldrb	r0, [r0, #16]
   b7cb6:	2200      	movs	r2, #0
   b7cb8:	f7fe ba1c 	b.w	b60f4 <hal_i2c_begin_transmission>

000b7cbc <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7cbc:	b2c9      	uxtb	r1, r1
   b7cbe:	f7ff bff9 	b.w	b7cb4 <_ZN7TwoWire17beginTransmissionEh>

000b7cc2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7cc2:	7c00      	ldrb	r0, [r0, #16]
   b7cc4:	2200      	movs	r2, #0
   b7cc6:	f7fe ba1d 	b.w	b6104 <hal_i2c_end_transmission>

000b7cca <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7cca:	2101      	movs	r1, #1
   b7ccc:	f7ff bff9 	b.w	b7cc2 <_ZN7TwoWire15endTransmissionEh>

000b7cd0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7cd0:	4770      	bx	lr

000b7cd2 <_ZN9IPAddressD0Ev>:
   b7cd2:	b510      	push	{r4, lr}
   b7cd4:	2118      	movs	r1, #24
   b7cd6:	4604      	mov	r4, r0
   b7cd8:	f001 fb05 	bl	b92e6 <_ZdlPvj>
   b7cdc:	4620      	mov	r0, r4
   b7cde:	bd10      	pop	{r4, pc}

000b7ce0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7ce2:	7d03      	ldrb	r3, [r0, #20]
   b7ce4:	2b06      	cmp	r3, #6
{
   b7ce6:	b08d      	sub	sp, #52	; 0x34
   b7ce8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7cea:	f100 0704 	add.w	r7, r0, #4
   b7cee:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7cf2:	d012      	beq.n	b7d1a <_ZNK9IPAddress7printToER5Print+0x3a>
   b7cf4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7cf8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7cfc:	220a      	movs	r2, #10
   b7cfe:	4630      	mov	r0, r6
   b7d00:	f000 f979 	bl	b7ff6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7d04:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7d06:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7d08:	d019      	beq.n	b7d3e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7d0a:	2c00      	cmp	r4, #0
   b7d0c:	d0f4      	beq.n	b7cf8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7d0e:	212e      	movs	r1, #46	; 0x2e
   b7d10:	4630      	mov	r0, r6
   b7d12:	f000 f951 	bl	b7fb8 <_ZN5Print5printEc>
   b7d16:	4404      	add	r4, r0
   b7d18:	e7ee      	b.n	b7cf8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7d1a:	232f      	movs	r3, #47	; 0x2f
   b7d1c:	466a      	mov	r2, sp
   b7d1e:	4639      	mov	r1, r7
   b7d20:	200a      	movs	r0, #10
		buf[0] = 0;
   b7d22:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7d26:	f7fe fa3d 	bl	b61a4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7d2a:	4668      	mov	r0, sp
   b7d2c:	f001 ff04 	bl	b9b38 <strlen>
   b7d30:	6833      	ldr	r3, [r6, #0]
   b7d32:	4602      	mov	r2, r0
   b7d34:	68db      	ldr	r3, [r3, #12]
   b7d36:	4669      	mov	r1, sp
   b7d38:	4630      	mov	r0, r6
   b7d3a:	4798      	blx	r3
   b7d3c:	4604      	mov	r4, r0
    }
    return n;
}
   b7d3e:	4620      	mov	r0, r4
   b7d40:	b00d      	add	sp, #52	; 0x34
   b7d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7d44 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7d44:	b510      	push	{r4, lr}
   b7d46:	4b05      	ldr	r3, [pc, #20]	; (b7d5c <_ZN9IPAddressC1Ev+0x18>)
   b7d48:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7d4a:	2211      	movs	r2, #17
   b7d4c:	f840 3b04 	str.w	r3, [r0], #4
   b7d50:	2100      	movs	r1, #0
   b7d52:	f001 fea9 	bl	b9aa8 <memset>
}
   b7d56:	4620      	mov	r0, r4
   b7d58:	bd10      	pop	{r4, pc}
   b7d5a:	bf00      	nop
   b7d5c:	000ba6e4 	.word	0x000ba6e4

000b7d60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7d60:	4603      	mov	r3, r0
   b7d62:	4a07      	ldr	r2, [pc, #28]	; (b7d80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7d64:	b510      	push	{r4, lr}
   b7d66:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7d6a:	f101 0210 	add.w	r2, r1, #16
   b7d6e:	f851 4b04 	ldr.w	r4, [r1], #4
   b7d72:	f843 4b04 	str.w	r4, [r3], #4
   b7d76:	4291      	cmp	r1, r2
   b7d78:	d1f9      	bne.n	b7d6e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7d7a:	780a      	ldrb	r2, [r1, #0]
   b7d7c:	701a      	strb	r2, [r3, #0]
}
   b7d7e:	bd10      	pop	{r4, pc}
   b7d80:	000ba6e4 	.word	0x000ba6e4

000b7d84 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b7d84:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b7d86:	2b04      	cmp	r3, #4
   b7d88:	d104      	bne.n	b7d94 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b7d8a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7d8c:	3800      	subs	r0, #0
   b7d8e:	bf18      	it	ne
   b7d90:	2001      	movne	r0, #1
   b7d92:	4770      	bx	lr
    } else if (version() == 6) {
   b7d94:	2b06      	cmp	r3, #6
   b7d96:	d107      	bne.n	b7da8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7d98:	6843      	ldr	r3, [r0, #4]
   b7d9a:	b93b      	cbnz	r3, b7dac <_ZNK9IPAddresscvbEv+0x28>
   b7d9c:	6883      	ldr	r3, [r0, #8]
   b7d9e:	b92b      	cbnz	r3, b7dac <_ZNK9IPAddresscvbEv+0x28>
   b7da0:	68c3      	ldr	r3, [r0, #12]
   b7da2:	b91b      	cbnz	r3, b7dac <_ZNK9IPAddresscvbEv+0x28>
   b7da4:	6900      	ldr	r0, [r0, #16]
   b7da6:	e7f1      	b.n	b7d8c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7da8:	2000      	movs	r0, #0
   b7daa:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7dac:	2001      	movs	r0, #1
}
   b7dae:	4770      	bx	lr

000b7db0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7db0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7db2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7db6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7dba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7dbe:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7dc2:	2304      	movs	r3, #4
   b7dc4:	6041      	str	r1, [r0, #4]
   b7dc6:	7503      	strb	r3, [r0, #20]
}
   b7dc8:	bd10      	pop	{r4, pc}
	...

000b7dcc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7dcc:	b507      	push	{r0, r1, r2, lr}
   b7dce:	4b06      	ldr	r3, [pc, #24]	; (b7de8 <_ZN9IPAddressC1EPKh+0x1c>)
   b7dd0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7dd2:	78cb      	ldrb	r3, [r1, #3]
   b7dd4:	9300      	str	r3, [sp, #0]
   b7dd6:	788b      	ldrb	r3, [r1, #2]
   b7dd8:	784a      	ldrb	r2, [r1, #1]
   b7dda:	7809      	ldrb	r1, [r1, #0]
   b7ddc:	f7ff ffe8 	bl	b7db0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7de0:	b003      	add	sp, #12
   b7de2:	f85d fb04 	ldr.w	pc, [sp], #4
   b7de6:	bf00      	nop
   b7de8:	000ba6e4 	.word	0x000ba6e4

000b7dec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7dec:	4b01      	ldr	r3, [pc, #4]	; (b7df4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7dee:	4a02      	ldr	r2, [pc, #8]	; (b7df8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7df0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7df2:	4770      	bx	lr
   b7df4:	2003e644 	.word	0x2003e644
   b7df8:	000ba6f0 	.word	0x000ba6f0

000b7dfc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7dfc:	2300      	movs	r3, #0
   b7dfe:	6840      	ldr	r0, [r0, #4]
   b7e00:	461a      	mov	r2, r3
   b7e02:	f7fe bb95 	b.w	b6530 <network_connect>

000b7e06 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7e06:	6840      	ldr	r0, [r0, #4]
   b7e08:	2200      	movs	r2, #0
   b7e0a:	2102      	movs	r1, #2
   b7e0c:	f7fe bba0 	b.w	b6550 <network_disconnect>

000b7e10 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7e10:	2200      	movs	r2, #0
   b7e12:	6840      	ldr	r0, [r0, #4]
   b7e14:	4611      	mov	r1, r2
   b7e16:	f7fe bb93 	b.w	b6540 <network_connecting>

000b7e1a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7e1a:	2200      	movs	r2, #0
   b7e1c:	6840      	ldr	r0, [r0, #4]
   b7e1e:	4611      	mov	r1, r2
   b7e20:	f7fe bb9e 	b.w	b6560 <network_ready>

000b7e24 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7e24:	2300      	movs	r3, #0
   b7e26:	6840      	ldr	r0, [r0, #4]
   b7e28:	461a      	mov	r2, r3
   b7e2a:	4619      	mov	r1, r3
   b7e2c:	f7fe bba0 	b.w	b6570 <network_on>

000b7e30 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7e30:	2300      	movs	r3, #0
   b7e32:	6840      	ldr	r0, [r0, #4]
   b7e34:	461a      	mov	r2, r3
   b7e36:	4619      	mov	r1, r3
   b7e38:	f7fe bba2 	b.w	b6580 <network_off>

000b7e3c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7e3c:	6840      	ldr	r0, [r0, #4]
   b7e3e:	2100      	movs	r1, #0
   b7e40:	f7fe bbde 	b.w	b6600 <network_is_on>

000b7e44 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7e44:	6840      	ldr	r0, [r0, #4]
   b7e46:	2100      	movs	r1, #0
   b7e48:	f7fe bbe2 	b.w	b6610 <network_is_off>

000b7e4c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7e4c:	6840      	ldr	r0, [r0, #4]
   b7e4e:	2200      	movs	r2, #0
   b7e50:	f081 0101 	eor.w	r1, r1, #1
   b7e54:	f7fe bb9c 	b.w	b6590 <network_listen>

000b7e58 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7e58:	6840      	ldr	r0, [r0, #4]
   b7e5a:	2200      	movs	r2, #0
   b7e5c:	f7fe bbc0 	b.w	b65e0 <network_set_listen_timeout>

000b7e60 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7e60:	2200      	movs	r2, #0
   b7e62:	6840      	ldr	r0, [r0, #4]
   b7e64:	4611      	mov	r1, r2
   b7e66:	f7fe bbc3 	b.w	b65f0 <network_get_listen_timeout>

000b7e6a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7e6a:	2200      	movs	r2, #0
   b7e6c:	6840      	ldr	r0, [r0, #4]
   b7e6e:	4611      	mov	r1, r2
   b7e70:	f7fe bb96 	b.w	b65a0 <network_listening>

000b7e74 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7e78:	b095      	sub	sp, #84	; 0x54
   b7e7a:	4614      	mov	r4, r2
   b7e7c:	460d      	mov	r5, r1
   b7e7e:	4607      	mov	r7, r0
    IPAddress addr;
   b7e80:	f7ff ff60 	bl	b7d44 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7e84:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7e86:	221c      	movs	r2, #28
   b7e88:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7e8a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7e8c:	f001 fe0c 	bl	b9aa8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7e90:	2340      	movs	r3, #64	; 0x40
   b7e92:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7e94:	4620      	mov	r0, r4
   b7e96:	466b      	mov	r3, sp
   b7e98:	aa0c      	add	r2, sp, #48	; 0x30
   b7e9a:	2100      	movs	r1, #0
   b7e9c:	f7fe f9a2 	bl	b61e4 <netdb_getaddrinfo>
    if (!r) {
   b7ea0:	4604      	mov	r4, r0
   b7ea2:	2800      	cmp	r0, #0
   b7ea4:	d14b      	bne.n	b7f3e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7ea6:	4602      	mov	r2, r0
   b7ea8:	2101      	movs	r1, #1
   b7eaa:	6868      	ldr	r0, [r5, #4]
   b7eac:	f7fe fb58 	bl	b6560 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7eb0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7eb2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7eb4:	4622      	mov	r2, r4
   b7eb6:	6868      	ldr	r0, [r5, #4]
   b7eb8:	f7fe fb52 	bl	b6560 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7ebc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7ebe:	4681      	mov	r9, r0
        bool ok = false;
   b7ec0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7ec2:	2e00      	cmp	r6, #0
   b7ec4:	d03b      	beq.n	b7f3e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7ec6:	2900      	cmp	r1, #0
   b7ec8:	d139      	bne.n	b7f3e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7eca:	6873      	ldr	r3, [r6, #4]
   b7ecc:	2b02      	cmp	r3, #2
   b7ece:	d003      	beq.n	b7ed8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7ed0:	2b0a      	cmp	r3, #10
   b7ed2:	d011      	beq.n	b7ef8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7ed4:	69f6      	ldr	r6, [r6, #28]
   b7ed6:	e7f4      	b.n	b7ec2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7ed8:	f1b8 0f00 	cmp.w	r8, #0
   b7edc:	d0fa      	beq.n	b7ed4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7ede:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7ee0:	a806      	add	r0, sp, #24
   b7ee2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7ee4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7ee6:	f7ff ff71 	bl	b7dcc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7eec:	1d3c      	adds	r4, r7, #4
   b7eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7ef0:	682b      	ldr	r3, [r5, #0]
   b7ef2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7ef4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7ef6:	e7ed      	b.n	b7ed4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7ef8:	f1b9 0f00 	cmp.w	r9, #0
   b7efc:	d0ea      	beq.n	b7ed4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7efe:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7f00:	2210      	movs	r2, #16
   b7f02:	a801      	add	r0, sp, #4
   b7f04:	f001 fdd0 	bl	b9aa8 <memset>
                    a.v = 6;
   b7f08:	2306      	movs	r3, #6
   b7f0a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7f0e:	ad01      	add	r5, sp, #4
   b7f10:	f104 0308 	add.w	r3, r4, #8
   b7f14:	3418      	adds	r4, #24
   b7f16:	6818      	ldr	r0, [r3, #0]
   b7f18:	6859      	ldr	r1, [r3, #4]
   b7f1a:	462a      	mov	r2, r5
   b7f1c:	c203      	stmia	r2!, {r0, r1}
   b7f1e:	3308      	adds	r3, #8
   b7f20:	42a3      	cmp	r3, r4
   b7f22:	4615      	mov	r5, r2
   b7f24:	d1f7      	bne.n	b7f16 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7f26:	a901      	add	r1, sp, #4
   b7f28:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7f2a:	ad07      	add	r5, sp, #28
   b7f2c:	f7ff ff18 	bl	b7d60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7f32:	1d3c      	adds	r4, r7, #4
   b7f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7f36:	682b      	ldr	r3, [r5, #0]
   b7f38:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7f3a:	4649      	mov	r1, r9
   b7f3c:	e7ca      	b.n	b7ed4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7f3e:	9800      	ldr	r0, [sp, #0]
   b7f40:	f7fe f948 	bl	b61d4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7f44:	4638      	mov	r0, r7
   b7f46:	b015      	add	sp, #84	; 0x54
   b7f48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7f4c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7f4c:	4b02      	ldr	r3, [pc, #8]	; (b7f58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7f4e:	4a03      	ldr	r2, [pc, #12]	; (b7f5c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7f50:	601a      	str	r2, [r3, #0]
   b7f52:	2200      	movs	r2, #0
   b7f54:	605a      	str	r2, [r3, #4]

} // spark
   b7f56:	4770      	bx	lr
   b7f58:	2003e648 	.word	0x2003e648
   b7f5c:	000ba6fc 	.word	0x000ba6fc

000b7f60 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f62:	4606      	mov	r6, r0
   b7f64:	460d      	mov	r5, r1
  size_t n = 0;
   b7f66:	188f      	adds	r7, r1, r2
   b7f68:	2400      	movs	r4, #0
  while (size--) {
   b7f6a:	42bd      	cmp	r5, r7
   b7f6c:	d00c      	beq.n	b7f88 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7f6e:	6833      	ldr	r3, [r6, #0]
   b7f70:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7f74:	689b      	ldr	r3, [r3, #8]
   b7f76:	4630      	mov	r0, r6
   b7f78:	4798      	blx	r3
     if (chunk>=0)
   b7f7a:	1e03      	subs	r3, r0, #0
   b7f7c:	db01      	blt.n	b7f82 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7f7e:	441c      	add	r4, r3
  while (size--) {
   b7f80:	e7f3      	b.n	b7f6a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7f82:	2c00      	cmp	r4, #0
   b7f84:	bf08      	it	eq
   b7f86:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7f88:	4620      	mov	r0, r4
   b7f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7f8c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7f8c:	b513      	push	{r0, r1, r4, lr}
   b7f8e:	4604      	mov	r4, r0
    }
   b7f90:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7f92:	b159      	cbz	r1, b7fac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7f94:	9101      	str	r1, [sp, #4]
   b7f96:	f001 fdcf 	bl	b9b38 <strlen>
   b7f9a:	6823      	ldr	r3, [r4, #0]
   b7f9c:	9901      	ldr	r1, [sp, #4]
   b7f9e:	68db      	ldr	r3, [r3, #12]
   b7fa0:	4602      	mov	r2, r0
   b7fa2:	4620      	mov	r0, r4
    }
   b7fa4:	b002      	add	sp, #8
   b7fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7faa:	4718      	bx	r3
    }
   b7fac:	b002      	add	sp, #8
   b7fae:	bd10      	pop	{r4, pc}

000b7fb0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b7fb0:	b508      	push	{r3, lr}
  return write(str);
   b7fb2:	f7ff ffeb 	bl	b7f8c <_ZN5Print5writeEPKc>
}
   b7fb6:	bd08      	pop	{r3, pc}

000b7fb8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7fb8:	6803      	ldr	r3, [r0, #0]
   b7fba:	689b      	ldr	r3, [r3, #8]
   b7fbc:	4718      	bx	r3

000b7fbe <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   b7fbe:	680a      	ldr	r2, [r1, #0]
 {
   b7fc0:	460b      	mov	r3, r1
   return x.printTo(*this);
   b7fc2:	6812      	ldr	r2, [r2, #0]
   b7fc4:	4601      	mov	r1, r0
   b7fc6:	4618      	mov	r0, r3
   b7fc8:	4710      	bx	r2

000b7fca <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b7fca:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7fcc:	210d      	movs	r1, #13
{
   b7fce:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7fd0:	f7ff fff2 	bl	b7fb8 <_ZN5Print5printEc>
  n += print('\n');
   b7fd4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7fd6:	4604      	mov	r4, r0
  n += print('\n');
   b7fd8:	4628      	mov	r0, r5
   b7fda:	f7ff ffed 	bl	b7fb8 <_ZN5Print5printEc>
  return n;
}
   b7fde:	4420      	add	r0, r4
   b7fe0:	bd38      	pop	{r3, r4, r5, pc}

000b7fe2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7fe2:	b538      	push	{r3, r4, r5, lr}
   b7fe4:	4605      	mov	r5, r0
  return write(str);
   b7fe6:	f7ff ffd1 	bl	b7f8c <_ZN5Print5writeEPKc>
   b7fea:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7fec:	4628      	mov	r0, r5
   b7fee:	f7ff ffec 	bl	b7fca <_ZN5Print7printlnEv>
  return n;
}
   b7ff2:	4420      	add	r0, r4
   b7ff4:	bd38      	pop	{r3, r4, r5, pc}

000b7ff6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7ff6:	b530      	push	{r4, r5, lr}
   b7ff8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7ffa:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7ffc:	2a01      	cmp	r2, #1
  *str = '\0';
   b7ffe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8002:	bf98      	it	ls
   b8004:	220a      	movls	r2, #10
   b8006:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8008:	460d      	mov	r5, r1
   b800a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b800e:	fb01 5312 	mls	r3, r1, r2, r5
   b8012:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8016:	2b09      	cmp	r3, #9
   b8018:	bf94      	ite	ls
   b801a:	3330      	addls	r3, #48	; 0x30
   b801c:	3337      	addhi	r3, #55	; 0x37
   b801e:	b2db      	uxtb	r3, r3
  } while(n);
   b8020:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8022:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b8026:	d9ef      	bls.n	b8008 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8028:	4621      	mov	r1, r4
   b802a:	f7ff ffaf 	bl	b7f8c <_ZN5Print5writeEPKc>
}
   b802e:	b00b      	add	sp, #44	; 0x2c
   b8030:	bd30      	pop	{r4, r5, pc}

000b8032 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b8032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8036:	b086      	sub	sp, #24
   b8038:	af00      	add	r7, sp, #0
   b803a:	4605      	mov	r5, r0
   b803c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b803e:	1d38      	adds	r0, r7, #4
   b8040:	2114      	movs	r1, #20
{
   b8042:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8044:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8046:	f7fe fb0b 	bl	b6660 <vsnprintf>

    if (n<bufsize)
   b804a:	2813      	cmp	r0, #19
   b804c:	d80e      	bhi.n	b806c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b804e:	1d39      	adds	r1, r7, #4
   b8050:	4628      	mov	r0, r5
   b8052:	f7ff ff9b 	bl	b7f8c <_ZN5Print5writeEPKc>
   b8056:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8058:	b11e      	cbz	r6, b8062 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b805a:	4628      	mov	r0, r5
   b805c:	f7ff ffb5 	bl	b7fca <_ZN5Print7printlnEv>
   b8060:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8062:	4620      	mov	r0, r4
   b8064:	3718      	adds	r7, #24
   b8066:	46bd      	mov	sp, r7
   b8068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b806c:	f100 0308 	add.w	r3, r0, #8
   b8070:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8074:	46e8      	mov	r8, sp
        char bigger[n+1];
   b8076:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b807a:	4622      	mov	r2, r4
   b807c:	1c41      	adds	r1, r0, #1
   b807e:	683b      	ldr	r3, [r7, #0]
   b8080:	4668      	mov	r0, sp
   b8082:	f7fe faed 	bl	b6660 <vsnprintf>
  return write(str);
   b8086:	4669      	mov	r1, sp
   b8088:	4628      	mov	r0, r5
   b808a:	f7ff ff7f 	bl	b7f8c <_ZN5Print5writeEPKc>
   b808e:	4604      	mov	r4, r0
   b8090:	46c5      	mov	sp, r8
   b8092:	e7e1      	b.n	b8058 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8094 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   b8094:	b510      	push	{r4, lr}
   b8096:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b8098:	f7fe fc24 	bl	b68e4 <_ZNSt14_Function_baseD1Ev>
   b809c:	4620      	mov	r0, r4
   b809e:	bd10      	pop	{r4, pc}

000b80a0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b80a0:	4803      	ldr	r0, [pc, #12]	; (b80b0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   b80a2:	4a04      	ldr	r2, [pc, #16]	; (b80b4 <_GLOBAL__sub_I_RGB+0x14>)
   b80a4:	4904      	ldr	r1, [pc, #16]	; (b80b8 <_GLOBAL__sub_I_RGB+0x18>)
   b80a6:	2300      	movs	r3, #0
   b80a8:	6083      	str	r3, [r0, #8]
   b80aa:	f001 b917 	b.w	b92dc <__aeabi_atexit>
   b80ae:	bf00      	nop
   b80b0:	2003e650 	.word	0x2003e650
   b80b4:	2003da60 	.word	0x2003da60
   b80b8:	000b8095 	.word	0x000b8095

000b80bc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b80bc:	2100      	movs	r1, #0
   b80be:	f7fe b911 	b.w	b62e4 <hal_spi_release>

000b80c2 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b80c2:	2100      	movs	r1, #0
   b80c4:	f7fe b906 	b.w	b62d4 <hal_spi_acquire>

000b80c8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b80c8:	b510      	push	{r4, lr}
   b80ca:	4604      	mov	r4, r0
   b80cc:	4608      	mov	r0, r1
{
    _spi = spi;
   b80ce:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b80d0:	f7fe f8e8 	bl	b62a4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b80d4:	2300      	movs	r3, #0
   b80d6:	6063      	str	r3, [r4, #4]
}
   b80d8:	4620      	mov	r0, r4
   b80da:	bd10      	pop	{r4, pc}

000b80dc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b80dc:	b513      	push	{r0, r1, r4, lr}
   b80de:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b80e0:	7800      	ldrb	r0, [r0, #0]
   b80e2:	f7ff ffee 	bl	b80c2 <_ZN8SPIClass4lockEv.isra.0>
   b80e6:	b958      	cbnz	r0, b8100 <_ZN8SPIClass5beginEv+0x24>
   b80e8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b80ea:	9001      	str	r0, [sp, #4]
   b80ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b80f0:	f7fe f8b0 	bl	b6254 <hal_spi_begin>
        unlock();
   b80f4:	9801      	ldr	r0, [sp, #4]
    }
}
   b80f6:	b002      	add	sp, #8
   b80f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b80fc:	f7ff bfde 	b.w	b80bc <_ZN8SPIClass6unlockEv.isra.0>
   b8100:	b002      	add	sp, #8
   b8102:	bd10      	pop	{r4, pc}

000b8104 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b8104:	b513      	push	{r0, r1, r4, lr}
   b8106:	4604      	mov	r4, r0
    if (!lock())
   b8108:	7800      	ldrb	r0, [r0, #0]
{
   b810a:	9101      	str	r1, [sp, #4]
    if (!lock())
   b810c:	f7ff ffd9 	bl	b80c2 <_ZN8SPIClass4lockEv.isra.0>
   b8110:	9901      	ldr	r1, [sp, #4]
   b8112:	b948      	cbnz	r0, b8128 <_ZN8SPIClass11setBitOrderEh+0x24>
   b8114:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b8116:	9001      	str	r0, [sp, #4]
   b8118:	f7fe f8a4 	bl	b6264 <hal_spi_set_bit_order>
        unlock();
   b811c:	9801      	ldr	r0, [sp, #4]
    }
}
   b811e:	b002      	add	sp, #8
   b8120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8124:	f7ff bfca 	b.w	b80bc <_ZN8SPIClass6unlockEv.isra.0>
   b8128:	b002      	add	sp, #8
   b812a:	bd10      	pop	{r4, pc}

000b812c <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b812c:	b513      	push	{r0, r1, r4, lr}
   b812e:	4604      	mov	r4, r0
    if (!lock())
   b8130:	7800      	ldrb	r0, [r0, #0]
{
   b8132:	9101      	str	r1, [sp, #4]
    if (!lock())
   b8134:	f7ff ffc5 	bl	b80c2 <_ZN8SPIClass4lockEv.isra.0>
   b8138:	9901      	ldr	r1, [sp, #4]
   b813a:	b948      	cbnz	r0, b8150 <_ZN8SPIClass11setDataModeEh+0x24>
   b813c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b813e:	9001      	str	r0, [sp, #4]
   b8140:	f7fe f898 	bl	b6274 <hal_spi_set_data_mode>
        unlock();
   b8144:	9801      	ldr	r0, [sp, #4]
    }
}
   b8146:	b002      	add	sp, #8
   b8148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b814c:	f7ff bfb6 	b.w	b80bc <_ZN8SPIClass6unlockEv.isra.0>
   b8150:	b002      	add	sp, #8
   b8152:	bd10      	pop	{r4, pc}

000b8154 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b8154:	0840      	lsrs	r0, r0, #1
{
   b8156:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b8158:	6018      	str	r0, [r3, #0]
   b815a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b815c:	6818      	ldr	r0, [r3, #0]
   b815e:	4288      	cmp	r0, r1
   b8160:	b2e5      	uxtb	r5, r4
   b8162:	d906      	bls.n	b8172 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b8164:	3401      	adds	r4, #1
   b8166:	2c08      	cmp	r4, #8
   b8168:	d002      	beq.n	b8170 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b816a:	0840      	lsrs	r0, r0, #1
   b816c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b816e:	e7f5      	b.n	b815c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b8170:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b8172:	4b02      	ldr	r3, [pc, #8]	; (b817c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b8174:	5d5b      	ldrb	r3, [r3, r5]
   b8176:	7013      	strb	r3, [r2, #0]
}
   b8178:	bd30      	pop	{r4, r5, pc}
   b817a:	bf00      	nop
   b817c:	000ba730 	.word	0x000ba730

000b8180 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b8180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8184:	b088      	sub	sp, #32
    unsigned clock = 0;
   b8186:	2300      	movs	r3, #0
{
   b8188:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b818a:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b818c:	9302      	str	r3, [sp, #8]
{
   b818e:	460e      	mov	r6, r1
   b8190:	4617      	mov	r7, r2
    if (!lock())
   b8192:	f7ff ff96 	bl	b80c2 <_ZN8SPIClass4lockEv.isra.0>
   b8196:	4605      	mov	r5, r0
   b8198:	bb00      	cbnz	r0, b81dc <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b819a:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b819e:	4601      	mov	r1, r0
   b81a0:	2214      	movs	r2, #20
   b81a2:	a803      	add	r0, sp, #12
   b81a4:	f001 fc80 	bl	b9aa8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b81a8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b81aa:	462a      	mov	r2, r5
   b81ac:	a903      	add	r1, sp, #12
   b81ae:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b81b0:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b81b4:	f7fe f886 	bl	b62c4 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b81b8:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b81ba:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b81be:	ab02      	add	r3, sp, #8
   b81c0:	f10d 0207 	add.w	r2, sp, #7
   b81c4:	fb07 f106 	mul.w	r1, r7, r6
   b81c8:	f7ff ffc4 	bl	b8154 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b81cc:	7820      	ldrb	r0, [r4, #0]
   b81ce:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b81d2:	f7fe f857 	bl	b6284 <hal_spi_set_clock_divider>
        unlock();
   b81d6:	7820      	ldrb	r0, [r4, #0]
   b81d8:	f7ff ff70 	bl	b80bc <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b81dc:	9802      	ldr	r0, [sp, #8]
   b81de:	b008      	add	sp, #32
   b81e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b81e4 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b81e4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b81e6:	7800      	ldrb	r0, [r0, #0]
   b81e8:	f7fe f854 	bl	b6294 <hal_spi_transfer>
}
   b81ec:	b2c0      	uxtb	r0, r0
   b81ee:	bd08      	pop	{r3, pc}

000b81f0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b81f0:	b510      	push	{r4, lr}
   b81f2:	4604      	mov	r4, r0
{
	free(buffer);
   b81f4:	6800      	ldr	r0, [r0, #0]
   b81f6:	f7fe fa1b 	bl	b6630 <free>
}
   b81fa:	4620      	mov	r0, r4
   b81fc:	bd10      	pop	{r4, pc}

000b81fe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b81fe:	b510      	push	{r4, lr}
   b8200:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8202:	6800      	ldr	r0, [r0, #0]
   b8204:	b108      	cbz	r0, b820a <_ZN6String10invalidateEv+0xc>
   b8206:	f7fe fa13 	bl	b6630 <free>
	buffer = NULL;
   b820a:	2300      	movs	r3, #0
	capacity = len = 0;
   b820c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8210:	6023      	str	r3, [r4, #0]
}
   b8212:	bd10      	pop	{r4, pc}

000b8214 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8214:	b538      	push	{r3, r4, r5, lr}
   b8216:	4604      	mov	r4, r0
   b8218:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b821a:	6800      	ldr	r0, [r0, #0]
   b821c:	3101      	adds	r1, #1
   b821e:	f7fe fa0f 	bl	b6640 <realloc>
	if (newbuffer) {
   b8222:	b110      	cbz	r0, b822a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8224:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8228:	2001      	movs	r0, #1
	}
	return 0;
}
   b822a:	bd38      	pop	{r3, r4, r5, pc}

000b822c <_ZN6String7reserveEj>:
{
   b822c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b822e:	6803      	ldr	r3, [r0, #0]
{
   b8230:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8232:	b123      	cbz	r3, b823e <_ZN6String7reserveEj+0x12>
   b8234:	6843      	ldr	r3, [r0, #4]
   b8236:	428b      	cmp	r3, r1
   b8238:	d301      	bcc.n	b823e <_ZN6String7reserveEj+0x12>
   b823a:	2001      	movs	r0, #1
}
   b823c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b823e:	4620      	mov	r0, r4
   b8240:	f7ff ffe8 	bl	b8214 <_ZN6String12changeBufferEj>
   b8244:	2800      	cmp	r0, #0
   b8246:	d0f9      	beq.n	b823c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8248:	68a3      	ldr	r3, [r4, #8]
   b824a:	2b00      	cmp	r3, #0
   b824c:	d1f5      	bne.n	b823a <_ZN6String7reserveEj+0xe>
   b824e:	6822      	ldr	r2, [r4, #0]
   b8250:	7013      	strb	r3, [r2, #0]
   b8252:	e7f2      	b.n	b823a <_ZN6String7reserveEj+0xe>

000b8254 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8254:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8256:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8258:	4611      	mov	r1, r2
   b825a:	9201      	str	r2, [sp, #4]
{
   b825c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b825e:	f7ff ffe5 	bl	b822c <_ZN6String7reserveEj>
   b8262:	9a01      	ldr	r2, [sp, #4]
   b8264:	b928      	cbnz	r0, b8272 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8266:	4620      	mov	r0, r4
   b8268:	f7ff ffc9 	bl	b81fe <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b826c:	4620      	mov	r0, r4
   b826e:	b003      	add	sp, #12
   b8270:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8272:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8274:	4629      	mov	r1, r5
   b8276:	6820      	ldr	r0, [r4, #0]
   b8278:	f001 fbee 	bl	b9a58 <memcpy>
	buffer[len] = 0;
   b827c:	6822      	ldr	r2, [r4, #0]
   b827e:	68a3      	ldr	r3, [r4, #8]
   b8280:	2100      	movs	r1, #0
   b8282:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8284:	e7f2      	b.n	b826c <_ZN6String4copyEPKcj+0x18>

000b8286 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8286:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8288:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b828a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b828e:	4604      	mov	r4, r0
	len = 0;
   b8290:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8292:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8294:	b141      	cbz	r1, b82a8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8296:	4608      	mov	r0, r1
   b8298:	9101      	str	r1, [sp, #4]
   b829a:	f001 fc4d 	bl	b9b38 <strlen>
   b829e:	9901      	ldr	r1, [sp, #4]
   b82a0:	4602      	mov	r2, r0
   b82a2:	4620      	mov	r0, r4
   b82a4:	f7ff ffd6 	bl	b8254 <_ZN6String4copyEPKcj>
}
   b82a8:	4620      	mov	r0, r4
   b82aa:	b002      	add	sp, #8
   b82ac:	bd10      	pop	{r4, pc}

000b82ae <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b82ae:	4288      	cmp	r0, r1
{
   b82b0:	b510      	push	{r4, lr}
   b82b2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b82b4:	d005      	beq.n	b82c2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b82b6:	680b      	ldr	r3, [r1, #0]
   b82b8:	b12b      	cbz	r3, b82c6 <_ZN6StringaSERKS_+0x18>
   b82ba:	688a      	ldr	r2, [r1, #8]
   b82bc:	4619      	mov	r1, r3
   b82be:	f7ff ffc9 	bl	b8254 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b82c2:	4620      	mov	r0, r4
   b82c4:	bd10      	pop	{r4, pc}
	else invalidate();
   b82c6:	f7ff ff9a 	bl	b81fe <_ZN6String10invalidateEv>
   b82ca:	e7fa      	b.n	b82c2 <_ZN6StringaSERKS_+0x14>

000b82cc <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b82cc:	b510      	push	{r4, lr}
	buffer = NULL;
   b82ce:	2300      	movs	r3, #0
String::String(const String &value)
   b82d0:	4604      	mov	r4, r0
	capacity = 0;
   b82d2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b82d6:	6083      	str	r3, [r0, #8]
	flags = 0;
   b82d8:	7303      	strb	r3, [r0, #12]
	*this = value;
   b82da:	f7ff ffe8 	bl	b82ae <_ZN6StringaSERKS_>
}
   b82de:	4620      	mov	r0, r4
   b82e0:	bd10      	pop	{r4, pc}

000b82e2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b82e2:	b513      	push	{r0, r1, r4, lr}
   b82e4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b82e6:	b159      	cbz	r1, b8300 <_ZN6StringaSEPKc+0x1e>
   b82e8:	4608      	mov	r0, r1
   b82ea:	9101      	str	r1, [sp, #4]
   b82ec:	f001 fc24 	bl	b9b38 <strlen>
   b82f0:	9901      	ldr	r1, [sp, #4]
   b82f2:	4602      	mov	r2, r0
   b82f4:	4620      	mov	r0, r4
   b82f6:	f7ff ffad 	bl	b8254 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b82fa:	4620      	mov	r0, r4
   b82fc:	b002      	add	sp, #8
   b82fe:	bd10      	pop	{r4, pc}
	else invalidate();
   b8300:	f7ff ff7d 	bl	b81fe <_ZN6String10invalidateEv>
   b8304:	e7f9      	b.n	b82fa <_ZN6StringaSEPKc+0x18>

000b8306 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b8306:	b510      	push	{r4, lr}
   b8308:	4604      	mov	r4, r0
   b830a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b830c:	2300      	movs	r3, #0
	capacity = 0;
   b830e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b8312:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b8314:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b8316:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b8318:	a901      	add	r1, sp, #4
   b831a:	f000 fe5d 	bl	b8fd8 <itoa>
	*this = buf;
   b831e:	a901      	add	r1, sp, #4
   b8320:	4620      	mov	r0, r4
   b8322:	f7ff ffde 	bl	b82e2 <_ZN6StringaSEPKc>
}
   b8326:	4620      	mov	r0, r4
   b8328:	b00a      	add	sp, #40	; 0x28
   b832a:	bd10      	pop	{r4, pc}

000b832c <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b832c:	b510      	push	{r4, lr}
   b832e:	4604      	mov	r4, r0
   b8330:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b8332:	2300      	movs	r3, #0
	capacity = 0;
   b8334:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b8338:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b833a:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b833c:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b833e:	a901      	add	r1, sp, #4
   b8340:	f000 fde1 	bl	b8f06 <ltoa>
	*this = buf;
   b8344:	a901      	add	r1, sp, #4
   b8346:	4620      	mov	r0, r4
   b8348:	f7ff ffcb 	bl	b82e2 <_ZN6StringaSEPKc>
}
   b834c:	4620      	mov	r0, r4
   b834e:	b00a      	add	sp, #40	; 0x28
   b8350:	bd10      	pop	{r4, pc}

000b8352 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b8352:	b570      	push	{r4, r5, r6, lr}
   b8354:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b8356:	460e      	mov	r6, r1
   b8358:	b909      	cbnz	r1, b835e <_ZN6String6concatEPKcj+0xc>
   b835a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b835c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b835e:	b16a      	cbz	r2, b837c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8360:	6884      	ldr	r4, [r0, #8]
   b8362:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b8364:	4621      	mov	r1, r4
   b8366:	f7ff ff61 	bl	b822c <_ZN6String7reserveEj>
   b836a:	2800      	cmp	r0, #0
   b836c:	d0f5      	beq.n	b835a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b836e:	6828      	ldr	r0, [r5, #0]
   b8370:	68ab      	ldr	r3, [r5, #8]
   b8372:	4631      	mov	r1, r6
   b8374:	4418      	add	r0, r3
   b8376:	f001 fbd7 	bl	b9b28 <strcpy>
	len = newlen;
   b837a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b837c:	2001      	movs	r0, #1
   b837e:	e7ed      	b.n	b835c <_ZN6String6concatEPKcj+0xa>

000b8380 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b8380:	688a      	ldr	r2, [r1, #8]
   b8382:	6809      	ldr	r1, [r1, #0]
   b8384:	f7ff bfe5 	b.w	b8352 <_ZN6String6concatEPKcj>

000b8388 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b8388:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b838a:	2300      	movs	r3, #0
	buf[0] = c;
   b838c:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b8390:	2201      	movs	r2, #1
   b8392:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b8394:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b8398:	f7ff ffdb 	bl	b8352 <_ZN6String6concatEPKcj>
}
   b839c:	b003      	add	sp, #12
   b839e:	f85d fb04 	ldr.w	pc, [sp], #4

000b83a2 <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
   b83a2:	b513      	push	{r0, r1, r4, lr}
	char buf[4];
	itoa(num, buf, 10);
   b83a4:	220a      	movs	r2, #10
{
   b83a6:	4604      	mov	r4, r0
   b83a8:	4608      	mov	r0, r1
	itoa(num, buf, 10);
   b83aa:	a901      	add	r1, sp, #4
   b83ac:	f000 fe14 	bl	b8fd8 <itoa>
	return concat(buf, strlen(buf));
   b83b0:	a801      	add	r0, sp, #4
   b83b2:	f001 fbc1 	bl	b9b38 <strlen>
   b83b6:	a901      	add	r1, sp, #4
   b83b8:	4602      	mov	r2, r0
   b83ba:	4620      	mov	r0, r4
   b83bc:	f7ff ffc9 	bl	b8352 <_ZN6String6concatEPKcj>
}
   b83c0:	b002      	add	sp, #8
   b83c2:	bd10      	pop	{r4, pc}

000b83c4 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b83c4:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b83c6:	688a      	ldr	r2, [r1, #8]
   b83c8:	6809      	ldr	r1, [r1, #0]
{
   b83ca:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b83cc:	f7ff ffc1 	bl	b8352 <_ZN6String6concatEPKcj>
   b83d0:	b910      	cbnz	r0, b83d8 <_ZplRK15StringSumHelperRK6String+0x14>
   b83d2:	4620      	mov	r0, r4
   b83d4:	f7ff ff13 	bl	b81fe <_ZN6String10invalidateEv>
	return a;
}
   b83d8:	4620      	mov	r0, r4
   b83da:	bd10      	pop	{r4, pc}

000b83dc <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b83dc:	b513      	push	{r0, r1, r4, lr}
   b83de:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b83e0:	b929      	cbnz	r1, b83ee <_ZplRK15StringSumHelperPKc+0x12>
   b83e2:	4620      	mov	r0, r4
   b83e4:	f7ff ff0b 	bl	b81fe <_ZN6String10invalidateEv>
	return a;
}
   b83e8:	4620      	mov	r0, r4
   b83ea:	b002      	add	sp, #8
   b83ec:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b83ee:	4608      	mov	r0, r1
   b83f0:	9101      	str	r1, [sp, #4]
   b83f2:	f001 fba1 	bl	b9b38 <strlen>
   b83f6:	9901      	ldr	r1, [sp, #4]
   b83f8:	4602      	mov	r2, r0
   b83fa:	4620      	mov	r0, r4
   b83fc:	f7ff ffa9 	bl	b8352 <_ZN6String6concatEPKcj>
   b8400:	2800      	cmp	r0, #0
   b8402:	d0ee      	beq.n	b83e2 <_ZplRK15StringSumHelperPKc+0x6>
   b8404:	e7f0      	b.n	b83e8 <_ZplRK15StringSumHelperPKc+0xc>

000b8406 <_ZplRK15StringSumHelperh>:
	if (!a.concat(c)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
   b8406:	b510      	push	{r4, lr}
   b8408:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   b840a:	f7ff ffca 	bl	b83a2 <_ZN6String6concatEh>
   b840e:	b910      	cbnz	r0, b8416 <_ZplRK15StringSumHelperh+0x10>
   b8410:	4620      	mov	r0, r4
   b8412:	f7ff fef4 	bl	b81fe <_ZN6String10invalidateEv>
	return a;
}
   b8416:	4620      	mov	r0, r4
   b8418:	bd10      	pop	{r4, pc}

000b841a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b841a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b841c:	6882      	ldr	r2, [r0, #8]
   b841e:	b93a      	cbnz	r2, b8430 <_ZNK6String6equalsEPKc+0x16>
   b8420:	b121      	cbz	r1, b842c <_ZNK6String6equalsEPKc+0x12>
   b8422:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b8424:	fab0 f080 	clz	r0, r0
   b8428:	0940      	lsrs	r0, r0, #5
   b842a:	e000      	b.n	b842e <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b842c:	2001      	movs	r0, #1
}
   b842e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b8430:	6800      	ldr	r0, [r0, #0]
   b8432:	b909      	cbnz	r1, b8438 <_ZNK6String6equalsEPKc+0x1e>
   b8434:	7800      	ldrb	r0, [r0, #0]
   b8436:	e7f5      	b.n	b8424 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b8438:	f001 fb6c 	bl	b9b14 <strcmp>
   b843c:	e7f2      	b.n	b8424 <_ZNK6String6equalsEPKc+0xa>

000b843e <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b843e:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b8440:	6883      	ldr	r3, [r0, #8]
   b8442:	4293      	cmp	r3, r2
   b8444:	d907      	bls.n	b8456 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b8446:	6804      	ldr	r4, [r0, #0]
   b8448:	6809      	ldr	r1, [r1, #0]
   b844a:	18a0      	adds	r0, r4, r2
   b844c:	f001 fb9b 	bl	b9b86 <strstr>
	if (found == NULL) return -1;
   b8450:	b108      	cbz	r0, b8456 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b8452:	1b00      	subs	r0, r0, r4
}
   b8454:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b8456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b845a:	e7fb      	b.n	b8454 <_ZNK6String7indexOfERKS_j+0x16>

000b845c <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b845c:	2200      	movs	r2, #0
   b845e:	f7ff bfee 	b.w	b843e <_ZNK6String7indexOfERKS_j>
	...

000b8464 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b8464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b8466:	429a      	cmp	r2, r3
{
   b8468:	460f      	mov	r7, r1
   b846a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b846c:	490c      	ldr	r1, [pc, #48]	; (b84a0 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b846e:	bf88      	it	hi
   b8470:	4613      	movhi	r3, r2
{
   b8472:	4614      	mov	r4, r2
   b8474:	4606      	mov	r6, r0
	if (left > right) {
   b8476:	bf84      	itt	hi
   b8478:	462c      	movhi	r4, r5
   b847a:	461d      	movhi	r5, r3
	String out;
   b847c:	f7ff ff03 	bl	b8286 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b8480:	68bb      	ldr	r3, [r7, #8]
   b8482:	42a3      	cmp	r3, r4
   b8484:	d30a      	bcc.n	b849c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b8486:	6839      	ldr	r1, [r7, #0]
   b8488:	42ab      	cmp	r3, r5
   b848a:	bf94      	ite	ls
   b848c:	ebc4 0203 	rsbls	r2, r4, r3
   b8490:	ebc4 0205 	rsbhi	r2, r4, r5
   b8494:	4421      	add	r1, r4
   b8496:	4630      	mov	r0, r6
   b8498:	f7ff fedc 	bl	b8254 <_ZN6String4copyEPKcj>
	return out;
}
   b849c:	4630      	mov	r0, r6
   b849e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b84a0:	000ba033 	.word	0x000ba033

000b84a4 <_ZNK6String9substringEj>:
{
   b84a4:	b510      	push	{r4, lr}
   b84a6:	4604      	mov	r4, r0
	return substring(left, len);
   b84a8:	688b      	ldr	r3, [r1, #8]
   b84aa:	f7ff ffdb 	bl	b8464 <_ZNK6String9substringEjj>
}
   b84ae:	4620      	mov	r0, r4
   b84b0:	bd10      	pop	{r4, pc}

000b84b2 <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
   b84b2:	b538      	push	{r3, r4, r5, lr}
   b84b4:	4604      	mov	r4, r0
   b84b6:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
   b84b8:	68a3      	ldr	r3, [r4, #8]
   b84ba:	428b      	cmp	r3, r1
   b84bc:	d911      	bls.n	b84e2 <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
   b84be:	b182      	cbz	r2, b84e2 <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
   b84c0:	4411      	add	r1, r2
   b84c2:	428b      	cmp	r3, r1
   b84c4:	bf38      	it	cc
   b84c6:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
   b84c8:	6825      	ldr	r5, [r4, #0]
	len = len - count;
   b84ca:	1a99      	subs	r1, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
   b84cc:	1813      	adds	r3, r2, r0
	len = len - count;
   b84ce:	60a1      	str	r1, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
   b84d0:	1a0a      	subs	r2, r1, r0
   b84d2:	18e9      	adds	r1, r5, r3
   b84d4:	4428      	add	r0, r5
   b84d6:	f001 facd 	bl	b9a74 <memmove>
	buffer[len] = 0;
   b84da:	6822      	ldr	r2, [r4, #0]
   b84dc:	68a3      	ldr	r3, [r4, #8]
   b84de:	2100      	movs	r1, #0
   b84e0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   b84e2:	4620      	mov	r0, r4
   b84e4:	bd38      	pop	{r3, r4, r5, pc}

000b84e6 <_ZN6String6removeEj>:
        int count = len - index;
   b84e6:	6882      	ldr	r2, [r0, #8]
        return remove(index, count);
   b84e8:	1a52      	subs	r2, r2, r1
   b84ea:	f7ff bfe2 	b.w	b84b2 <_ZN6String6removeEjj>

000b84ee <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b84ee:	b507      	push	{r0, r1, r2, lr}
   b84f0:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b84f2:	2100      	movs	r1, #0
{
   b84f4:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b84f6:	9100      	str	r1, [sp, #0]
   b84f8:	2001      	movs	r0, #1
   b84fa:	218c      	movs	r1, #140	; 0x8c
   b84fc:	f7fd ffde 	bl	b64bc <system_reset>
}
   b8500:	b003      	add	sp, #12
   b8502:	f85d fb04 	ldr.w	pc, [sp], #4

000b8506 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b8506:	4601      	mov	r1, r0
    reset(0, flags);
   b8508:	2000      	movs	r0, #0
   b850a:	f7ff bff0 	b.w	b84ee <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b850e <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b850e:	2000      	movs	r0, #0
   b8510:	f7ff bff9 	b.w	b8506 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000b8514 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   b8514:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8516:	4b09      	ldr	r3, [pc, #36]	; (b853c <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8518:	4c09      	ldr	r4, [pc, #36]	; (b8540 <_GLOBAL__sub_I_System+0x2c>)
   b851a:	2202      	movs	r2, #2
   b851c:	601a      	str	r2, [r3, #0]
   b851e:	2000      	movs	r0, #0
    SleepResult() {}
   b8520:	4b08      	ldr	r3, [pc, #32]	; (b8544 <_GLOBAL__sub_I_System+0x30>)
   b8522:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8524:	e9c4 0000 	strd	r0, r0, [r4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8528:	f7fd ff7c 	bl	b6424 <set_system_mode>
SystemClass System;
   b852c:	4620      	mov	r0, r4
   b852e:	4a06      	ldr	r2, [pc, #24]	; (b8548 <_GLOBAL__sub_I_System+0x34>)
   b8530:	4906      	ldr	r1, [pc, #24]	; (b854c <_GLOBAL__sub_I_System+0x38>)
   b8532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   b8536:	f000 bed1 	b.w	b92dc <__aeabi_atexit>
   b853a:	bf00      	nop
   b853c:	2003e66c 	.word	0x2003e66c
   b8540:	2003e660 	.word	0x2003e660
   b8544:	ffff0000 	.word	0xffff0000
   b8548:	2003da60 	.word	0x2003da60
   b854c:	000b40df 	.word	0x000b40df

000b8550 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b8550:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8552:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b8554:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8558:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b855a:	2201      	movs	r2, #1
   b855c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8560:	f10d 0107 	add.w	r1, sp, #7
   b8564:	47a0      	blx	r4
}
   b8566:	b002      	add	sp, #8
   b8568:	bd10      	pop	{r4, pc}

000b856a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b856a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b856c:	6803      	ldr	r3, [r0, #0]
   b856e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8574:	46a4      	mov	ip, r4
}
   b8576:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b857a:	4760      	bx	ip

000b857c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b857c:	b513      	push	{r0, r1, r4, lr}
   b857e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b8580:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8582:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b8586:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8588:	f10d 0107 	add.w	r1, sp, #7
   b858c:	2201      	movs	r2, #1
   b858e:	47a0      	blx	r4
}
   b8590:	b002      	add	sp, #8
   b8592:	bd10      	pop	{r4, pc}

000b8594 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b8594:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b8596:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8598:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b859c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b85a0:	429a      	cmp	r2, r3
int TCPClient::read() {
   b85a2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b85a4:	d008      	beq.n	b85b8 <_ZN9TCPClient4readEv+0x24>
   b85a6:	6963      	ldr	r3, [r4, #20]
   b85a8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b85ac:	1c51      	adds	r1, r2, #1
   b85ae:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b85b2:	4413      	add	r3, r2
   b85b4:	7918      	ldrb	r0, [r3, #4]
}
   b85b6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b85b8:	6803      	ldr	r3, [r0, #0]
   b85ba:	691b      	ldr	r3, [r3, #16]
   b85bc:	4798      	blx	r3
   b85be:	2800      	cmp	r0, #0
   b85c0:	d1f1      	bne.n	b85a6 <_ZN9TCPClient4readEv+0x12>
   b85c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b85c6:	e7f6      	b.n	b85b6 <_ZN9TCPClient4readEv+0x22>

000b85c8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b85c8:	4770      	bx	lr

000b85ca <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b85ca:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b85cc:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b85ce:	43c0      	mvns	r0, r0
   b85d0:	0fc0      	lsrs	r0, r0, #31
   b85d2:	4770      	bx	lr

000b85d4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b85d4:	4770      	bx	lr
	...

000b85d8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b85d8:	4b06      	ldr	r3, [pc, #24]	; (b85f4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b85da:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b85dc:	b510      	push	{r4, lr}
   b85de:	f100 040c 	add.w	r4, r0, #12
	    ||
   b85e2:	d005      	beq.n	b85f0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b85e4:	4608      	mov	r0, r1
   b85e6:	f000 fe85 	bl	b92f4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b85ea:	2800      	cmp	r0, #0
   b85ec:	bf08      	it	eq
   b85ee:	2400      	moveq	r4, #0
      }
   b85f0:	4620      	mov	r0, r4
   b85f2:	bd10      	pop	{r4, pc}
   b85f4:	000ba638 	.word	0x000ba638

000b85f8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b85f8:	b510      	push	{r4, lr}
   b85fa:	21ac      	movs	r1, #172	; 0xac
   b85fc:	4604      	mov	r4, r0
   b85fe:	f000 fe72 	bl	b92e6 <_ZdlPvj>
   b8602:	4620      	mov	r0, r4
   b8604:	bd10      	pop	{r4, pc}

000b8606 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b8606:	21ac      	movs	r1, #172	; 0xac
   b8608:	f000 be6d 	b.w	b92e6 <_ZdlPvj>

000b860c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b860c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8610:	f04f 0800 	mov.w	r8, #0
   b8614:	b086      	sub	sp, #24
   b8616:	461c      	mov	r4, r3
   b8618:	f8c0 8004 	str.w	r8, [r0, #4]
   b861c:	4605      	mov	r5, r0
   b861e:	460e      	mov	r6, r1
   b8620:	4617      	mov	r7, r2
    struct timeval tv = {};
   b8622:	4641      	mov	r1, r8
   b8624:	2210      	movs	r2, #16
   b8626:	a802      	add	r0, sp, #8
   b8628:	f001 fa3e 	bl	b9aa8 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b862c:	1c63      	adds	r3, r4, #1
   b862e:	d009      	beq.n	b8644 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b8630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8634:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b8638:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b863c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b8640:	435c      	muls	r4, r3
   b8642:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b8644:	6968      	ldr	r0, [r5, #20]
   b8646:	2310      	movs	r3, #16
   b8648:	9300      	str	r3, [sp, #0]
   b864a:	6800      	ldr	r0, [r0, #0]
   b864c:	ab02      	add	r3, sp, #8
   b864e:	f241 0205 	movw	r2, #4101	; 0x1005
   b8652:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8656:	f7fd fdcd 	bl	b61f4 <sock_setsockopt>
    if (ret < 0) {
   b865a:	2800      	cmp	r0, #0
   b865c:	da07      	bge.n	b866e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b865e:	f7fe f80f 	bl	b6680 <__errno>
   b8662:	6803      	ldr	r3, [r0, #0]
   b8664:	606b      	str	r3, [r5, #4]
        return 0;
   b8666:	2000      	movs	r0, #0
}
   b8668:	b006      	add	sp, #24
   b866a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b866e:	6968      	ldr	r0, [r5, #20]
   b8670:	2300      	movs	r3, #0
   b8672:	6800      	ldr	r0, [r0, #0]
   b8674:	463a      	mov	r2, r7
   b8676:	4631      	mov	r1, r6
   b8678:	f7fd fddc 	bl	b6234 <sock_send>
    if (ret < 0) {
   b867c:	1e03      	subs	r3, r0, #0
   b867e:	dbee      	blt.n	b865e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b8680:	4618      	mov	r0, r3
   b8682:	e7f1      	b.n	b8668 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b8684 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b8684:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b8686:	6984      	ldr	r4, [r0, #24]
   b8688:	4b0a      	ldr	r3, [pc, #40]	; (b86b4 <_ZN9TCPClientD1Ev+0x30>)
   b868a:	6003      	str	r3, [r0, #0]
   b868c:	4605      	mov	r5, r0
   b868e:	b17c      	cbz	r4, b86b0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b8690:	6863      	ldr	r3, [r4, #4]
   b8692:	3b01      	subs	r3, #1
   b8694:	6063      	str	r3, [r4, #4]
   b8696:	b95b      	cbnz	r3, b86b0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b8698:	6823      	ldr	r3, [r4, #0]
   b869a:	4620      	mov	r0, r4
   b869c:	689b      	ldr	r3, [r3, #8]
   b869e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b86a0:	68a3      	ldr	r3, [r4, #8]
   b86a2:	3b01      	subs	r3, #1
   b86a4:	60a3      	str	r3, [r4, #8]
   b86a6:	b91b      	cbnz	r3, b86b0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b86a8:	6823      	ldr	r3, [r4, #0]
   b86aa:	4620      	mov	r0, r4
   b86ac:	68db      	ldr	r3, [r3, #12]
   b86ae:	4798      	blx	r3
   b86b0:	4628      	mov	r0, r5
   b86b2:	bd38      	pop	{r3, r4, r5, pc}
   b86b4:	000ba774 	.word	0x000ba774

000b86b8 <_ZN9TCPClientD0Ev>:
   b86b8:	b510      	push	{r4, lr}
   b86ba:	4604      	mov	r4, r0
   b86bc:	f7ff ffe2 	bl	b8684 <_ZN9TCPClientD1Ev>
   b86c0:	4620      	mov	r0, r4
   b86c2:	211c      	movs	r1, #28
   b86c4:	f000 fe0f 	bl	b92e6 <_ZdlPvj>
   b86c8:	4620      	mov	r0, r4
   b86ca:	bd10      	pop	{r4, pc}

000b86cc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b86cc:	b530      	push	{r4, r5, lr}
   b86ce:	b087      	sub	sp, #28
   b86d0:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b86d2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b86d4:	4668      	mov	r0, sp
   b86d6:	f7ff fb79 	bl	b7dcc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b86da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b86dc:	3404      	adds	r4, #4
   b86de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b86e0:	682b      	ldr	r3, [r5, #0]
   b86e2:	7023      	strb	r3, [r4, #0]
    }
   b86e4:	b007      	add	sp, #28
   b86e6:	bd30      	pop	{r4, r5, pc}

000b86e8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b86e8:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b86ea:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b86ec:	4b05      	ldr	r3, [pc, #20]	; (b8704 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b86ee:	4604      	mov	r4, r0
   b86f0:	358c      	adds	r5, #140	; 0x8c
   b86f2:	f844 3b04 	str.w	r3, [r4], #4
   b86f6:	4606      	mov	r6, r0
   b86f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b86fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b86fc:	682b      	ldr	r3, [r5, #0]
   b86fe:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b8700:	4630      	mov	r0, r6
   b8702:	bd70      	pop	{r4, r5, r6, pc}
   b8704:	000ba6e4 	.word	0x000ba6e4

000b8708 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b870c:	4698      	mov	r8, r3
    stop();
   b870e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8710:	b093      	sub	sp, #76	; 0x4c
   b8712:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b8714:	2400      	movs	r4, #0
    stop();
   b8716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8718:	4606      	mov	r6, r0
   b871a:	4617      	mov	r7, r2
    stop();
   b871c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b871e:	4628      	mov	r0, r5
   b8720:	466b      	mov	r3, sp
   b8722:	4622      	mov	r2, r4
   b8724:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b8726:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8728:	f7fd fd5c 	bl	b61e4 <netdb_getaddrinfo>
   b872c:	4605      	mov	r5, r0
   b872e:	2800      	cmp	r0, #0
   b8730:	d163      	bne.n	b87fa <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b8732:	9b00      	ldr	r3, [sp, #0]
   b8734:	2b00      	cmp	r3, #0
   b8736:	d04b      	beq.n	b87d0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8738:	695b      	ldr	r3, [r3, #20]
   b873a:	2b00      	cmp	r3, #0
   b873c:	d048      	beq.n	b87d0 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b873e:	a806      	add	r0, sp, #24
   b8740:	f7ff fb00 	bl	b7d44 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8744:	9b00      	ldr	r3, [sp, #0]
   b8746:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b8748:	7863      	ldrb	r3, [r4, #1]
   b874a:	2b02      	cmp	r3, #2
   b874c:	d104      	bne.n	b8758 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b874e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b8750:	a806      	add	r0, sp, #24
   b8752:	f7ff ffbb 	bl	b86cc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b8756:	e026      	b.n	b87a6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b8758:	2b0a      	cmp	r3, #10
   b875a:	d124      	bne.n	b87a6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b875c:	2211      	movs	r2, #17
   b875e:	4629      	mov	r1, r5
   b8760:	a801      	add	r0, sp, #4
   b8762:	f001 f9a1 	bl	b9aa8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8766:	68a3      	ldr	r3, [r4, #8]
   b8768:	2b00      	cmp	r3, #0
   b876a:	d038      	beq.n	b87de <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b876c:	f104 0308 	add.w	r3, r4, #8
   b8770:	f10d 0c04 	add.w	ip, sp, #4
   b8774:	3418      	adds	r4, #24
   b8776:	6818      	ldr	r0, [r3, #0]
   b8778:	6859      	ldr	r1, [r3, #4]
   b877a:	4662      	mov	r2, ip
   b877c:	c203      	stmia	r2!, {r0, r1}
   b877e:	3308      	adds	r3, #8
   b8780:	42a3      	cmp	r3, r4
   b8782:	4694      	mov	ip, r2
   b8784:	d1f7      	bne.n	b8776 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b8786:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b8788:	a901      	add	r1, sp, #4
   b878a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b878c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b8790:	f7ff fae6 	bl	b7d60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8794:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8798:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b879c:	ac07      	add	r4, sp, #28
   b879e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b87a0:	f8dc 3000 	ldr.w	r3, [ip]
   b87a4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b87a6:	a806      	add	r0, sp, #24
   b87a8:	f7ff faec 	bl	b7d84 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b87ac:	b180      	cbz	r0, b87d0 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b87ae:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b87b0:	ad07      	add	r5, sp, #28
   b87b2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b87b6:	4b12      	ldr	r3, [pc, #72]	; (b8800 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b87b8:	930c      	str	r3, [sp, #48]	; 0x30
   b87ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b87bc:	ac0d      	add	r4, sp, #52	; 0x34
   b87be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b87c0:	682b      	ldr	r3, [r5, #0]
   b87c2:	7023      	strb	r3, [r4, #0]
   b87c4:	463a      	mov	r2, r7
   b87c6:	4643      	mov	r3, r8
   b87c8:	a90c      	add	r1, sp, #48	; 0x30
   b87ca:	4630      	mov	r0, r6
   b87cc:	47c8      	blx	r9
   b87ce:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b87d0:	9800      	ldr	r0, [sp, #0]
   b87d2:	f7fd fcff 	bl	b61d4 <netdb_freeaddrinfo>
}
   b87d6:	4628      	mov	r0, r5
   b87d8:	b013      	add	sp, #76	; 0x4c
   b87da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b87de:	68e3      	ldr	r3, [r4, #12]
   b87e0:	2b00      	cmp	r3, #0
   b87e2:	d1c3      	bne.n	b876c <_ZN9TCPClient7connectEPKctm+0x64>
   b87e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b87e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b87ec:	f7fd fce2 	bl	b61b4 <inet_htonl>
   b87f0:	4581      	cmp	r9, r0
   b87f2:	d1bb      	bne.n	b876c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b87f4:	f104 0114 	add.w	r1, r4, #20
   b87f8:	e7aa      	b.n	b8750 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b87fa:	4625      	mov	r5, r4
   b87fc:	e7e8      	b.n	b87d0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b87fe:	bf00      	nop
   b8800:	000ba6e4 	.word	0x000ba6e4

000b8804 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b8804:	b538      	push	{r3, r4, r5, lr}
   b8806:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b8808:	681a      	ldr	r2, [r3, #0]
   b880a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b880c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b880e:	da10      	bge.n	b8832 <_ZN9TCPClient9connectedEv+0x2e>
   b8810:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8814:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8818:	429a      	cmp	r2, r3
   b881a:	d10a      	bne.n	b8832 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b881c:	6803      	ldr	r3, [r0, #0]
   b881e:	691b      	ldr	r3, [r3, #16]
   b8820:	4798      	blx	r3
        if (!rv) {
   b8822:	4604      	mov	r4, r0
   b8824:	b928      	cbnz	r0, b8832 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b8826:	682b      	ldr	r3, [r5, #0]
   b8828:	4628      	mov	r0, r5
   b882a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b882c:	4798      	blx	r3
        rv = available();
   b882e:	4620      	mov	r0, r4
}
   b8830:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b8832:	2001      	movs	r0, #1
   b8834:	e7fc      	b.n	b8830 <_ZN9TCPClient9connectedEv+0x2c>

000b8836 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b8836:	b510      	push	{r4, lr}
   b8838:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b883a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b883e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8842:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b8844:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8846:	d005      	beq.n	b8854 <_ZN9TCPClient4peekEv+0x1e>
   b8848:	6963      	ldr	r3, [r4, #20]
   b884a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b884e:	4413      	add	r3, r2
   b8850:	7918      	ldrb	r0, [r3, #4]
}
   b8852:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8854:	6803      	ldr	r3, [r0, #0]
   b8856:	691b      	ldr	r3, [r3, #16]
   b8858:	4798      	blx	r3
   b885a:	2800      	cmp	r0, #0
   b885c:	d1f4      	bne.n	b8848 <_ZN9TCPClient4peekEv+0x12>
   b885e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8862:	e7f6      	b.n	b8852 <_ZN9TCPClient4peekEv+0x1c>

000b8864 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8866:	6943      	ldr	r3, [r0, #20]
   b8868:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b886a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b886e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8872:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8874:	4605      	mov	r5, r0
   b8876:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b8878:	d016      	beq.n	b88a8 <_ZN9TCPClient4readEPhj+0x44>
   b887a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b887c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b8880:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b8884:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b8886:	42bc      	cmp	r4, r7
   b8888:	bf28      	it	cs
   b888a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b888c:	3304      	adds	r3, #4
   b888e:	4622      	mov	r2, r4
   b8890:	4419      	add	r1, r3
   b8892:	4630      	mov	r0, r6
   b8894:	f001 f8e0 	bl	b9a58 <memcpy>
   b8898:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b889a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b889e:	4423      	add	r3, r4
   b88a0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b88a4:	4620      	mov	r0, r4
   b88a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b88a8:	6803      	ldr	r3, [r0, #0]
   b88aa:	691b      	ldr	r3, [r3, #16]
   b88ac:	4798      	blx	r3
   b88ae:	2800      	cmp	r0, #0
   b88b0:	d1e3      	bne.n	b887a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b88b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b88b6:	e7f5      	b.n	b88a4 <_ZN9TCPClient4readEPhj+0x40>

000b88b8 <_ZN9TCPClient12flush_bufferEv>:
   b88b8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b88ba:	2300      	movs	r3, #0
   b88bc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b88c0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b88c2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b88c6:	4770      	bx	lr

000b88c8 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b88c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b88cc:	461f      	mov	r7, r3
    stop();
   b88ce:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b88d0:	460c      	mov	r4, r1
    stop();
   b88d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b88d4:	b08a      	sub	sp, #40	; 0x28
   b88d6:	4605      	mov	r5, r0
   b88d8:	4616      	mov	r6, r2
    stop();
   b88da:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b88dc:	7d23      	ldrb	r3, [r4, #20]
   b88de:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b88e2:	2b04      	cmp	r3, #4
   b88e4:	bf0c      	ite	eq
   b88e6:	2002      	moveq	r0, #2
   b88e8:	200a      	movne	r0, #10
   b88ea:	2206      	movs	r2, #6
   b88ec:	2101      	movs	r1, #1
   b88ee:	f7fd fca9 	bl	b6244 <sock_socket>
   b88f2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b88f6:	696b      	ldr	r3, [r5, #20]
   b88f8:	681b      	ldr	r3, [r3, #0]
   b88fa:	2b00      	cmp	r3, #0
   b88fc:	da08      	bge.n	b8910 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b88fe:	682b      	ldr	r3, [r5, #0]
   b8900:	4628      	mov	r0, r5
   b8902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8904:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b8906:	4798      	blx	r3
}
   b8908:	4620      	mov	r0, r4
   b890a:	b00a      	add	sp, #40	; 0x28
   b890c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b8910:	4628      	mov	r0, r5
   b8912:	f7ff ffd1 	bl	b88b8 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b8916:	b1b7      	cbz	r7, b8946 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b8918:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b891a:	a903      	add	r1, sp, #12
   b891c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b891e:	9303      	str	r3, [sp, #12]
   b8920:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8924:	f7fd fc36 	bl	b6194 <if_index_to_name>
   b8928:	2800      	cmp	r0, #0
   b892a:	d1e8      	bne.n	b88fe <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b892c:	6968      	ldr	r0, [r5, #20]
   b892e:	2306      	movs	r3, #6
   b8930:	9300      	str	r3, [sp, #0]
   b8932:	6800      	ldr	r0, [r0, #0]
   b8934:	ab03      	add	r3, sp, #12
   b8936:	f241 020b 	movw	r2, #4107	; 0x100b
   b893a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b893e:	f7fd fc59 	bl	b61f4 <sock_setsockopt>
   b8942:	2800      	cmp	r0, #0
   b8944:	d1db      	bne.n	b88fe <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b8946:	221c      	movs	r2, #28
   b8948:	2100      	movs	r1, #0
   b894a:	a803      	add	r0, sp, #12
   b894c:	f001 f8ac 	bl	b9aa8 <memset>
    if (ip.version() == 4) {
   b8950:	7d23      	ldrb	r3, [r4, #20]
   b8952:	2b04      	cmp	r3, #4
   b8954:	d11d      	bne.n	b8992 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b8956:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b895a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b895c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b8960:	f7fd fc30 	bl	b61c4 <inet_htons>
   b8964:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b8968:	6860      	ldr	r0, [r4, #4]
   b896a:	f7fd fc23 	bl	b61b4 <inet_htonl>
   b896e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b8970:	696b      	ldr	r3, [r5, #20]
   b8972:	221c      	movs	r2, #28
   b8974:	6818      	ldr	r0, [r3, #0]
   b8976:	a903      	add	r1, sp, #12
   b8978:	f7fd fc4c 	bl	b6214 <sock_connect>
   b897c:	2800      	cmp	r0, #0
   b897e:	d1be      	bne.n	b88fe <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b8980:	3404      	adds	r4, #4
   b8982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8984:	696d      	ldr	r5, [r5, #20]
   b8986:	358c      	adds	r5, #140	; 0x8c
   b8988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b898a:	6823      	ldr	r3, [r4, #0]
   b898c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b898e:	2401      	movs	r4, #1
   b8990:	e7ba      	b.n	b8908 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b8992:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b8996:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b8998:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b899c:	f7fd fc12 	bl	b61c4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b89a0:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b89a2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b89a6:	1d23      	adds	r3, r4, #4
   b89a8:	f104 0714 	add.w	r7, r4, #20
   b89ac:	6818      	ldr	r0, [r3, #0]
   b89ae:	6859      	ldr	r1, [r3, #4]
   b89b0:	4632      	mov	r2, r6
   b89b2:	c203      	stmia	r2!, {r0, r1}
   b89b4:	3308      	adds	r3, #8
   b89b6:	42bb      	cmp	r3, r7
   b89b8:	4616      	mov	r6, r2
   b89ba:	d1f7      	bne.n	b89ac <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b89bc:	e7d8      	b.n	b8970 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b89c0 <_ZN9TCPClient9availableEv>:
{
   b89c0:	b530      	push	{r4, r5, lr}
   b89c2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b89c4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b89c8:	b08b      	sub	sp, #44	; 0x2c
   b89ca:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b89cc:	b12b      	cbz	r3, b89da <_ZN9TCPClient9availableEv+0x1a>
   b89ce:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b89d2:	429a      	cmp	r2, r3
   b89d4:	d101      	bne.n	b89da <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b89d6:	f7ff ff6f 	bl	b88b8 <_ZN9TCPClient12flush_bufferEv>
   b89da:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b89dc:	6808      	ldr	r0, [r1, #0]
   b89de:	2800      	cmp	r0, #0
   b89e0:	db18      	blt.n	b8a14 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b89e2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b89e6:	2d7f      	cmp	r5, #127	; 0x7f
   b89e8:	d814      	bhi.n	b8a14 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b89ea:	3104      	adds	r1, #4
   b89ec:	2308      	movs	r3, #8
   b89ee:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b89f2:	4429      	add	r1, r5
   b89f4:	f7fd fc16 	bl	b6224 <sock_recv>
            if (ret > 0) {
   b89f8:	2800      	cmp	r0, #0
   b89fa:	dd13      	ble.n	b8a24 <_ZN9TCPClient9availableEv+0x64>
   b89fc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b89fe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8a02:	b90a      	cbnz	r2, b8a08 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b8a04:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b8a08:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b8a0a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8a0e:	4410      	add	r0, r2
   b8a10:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b8a14:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b8a16:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b8a1a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b8a1e:	1ac0      	subs	r0, r0, r3
   b8a20:	b00b      	add	sp, #44	; 0x2c
   b8a22:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b8a24:	f7fd fe2c 	bl	b6680 <__errno>
   b8a28:	6803      	ldr	r3, [r0, #0]
   b8a2a:	2b0b      	cmp	r3, #11
   b8a2c:	d0f2      	beq.n	b8a14 <_ZN9TCPClient9availableEv+0x54>
   b8a2e:	f7fd fe27 	bl	b6680 <__errno>
   b8a32:	6803      	ldr	r3, [r0, #0]
   b8a34:	2b0b      	cmp	r3, #11
   b8a36:	d0ed      	beq.n	b8a14 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b8a38:	2320      	movs	r3, #32
   b8a3a:	2500      	movs	r5, #0
   b8a3c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b8a40:	f7fd fe1e 	bl	b6680 <__errno>
   b8a44:	6803      	ldr	r3, [r0, #0]
   b8a46:	9301      	str	r3, [sp, #4]
   b8a48:	4b08      	ldr	r3, [pc, #32]	; (b8a6c <_ZN9TCPClient9availableEv+0xac>)
   b8a4a:	4909      	ldr	r1, [pc, #36]	; (b8a70 <_ZN9TCPClient9availableEv+0xb0>)
   b8a4c:	9300      	str	r3, [sp, #0]
   b8a4e:	aa02      	add	r2, sp, #8
   b8a50:	462b      	mov	r3, r5
   b8a52:	2032      	movs	r0, #50	; 0x32
   b8a54:	f7fd fcd6 	bl	b6404 <log_message>
                    sock_close(d_->sock);
   b8a58:	6963      	ldr	r3, [r4, #20]
   b8a5a:	6818      	ldr	r0, [r3, #0]
   b8a5c:	f7fd fbd2 	bl	b6204 <sock_close>
   b8a60:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b8a62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8a66:	601a      	str	r2, [r3, #0]
   b8a68:	e7d4      	b.n	b8a14 <_ZN9TCPClient9availableEv+0x54>
   b8a6a:	bf00      	nop
   b8a6c:	000ba73f 	.word	0x000ba73f
   b8a70:	000ba738 	.word	0x000ba738

000b8a74 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b8a74:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b8a76:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b8a78:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b8a7a:	6818      	ldr	r0, [r3, #0]
   b8a7c:	2800      	cmp	r0, #0
   b8a7e:	db01      	blt.n	b8a84 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b8a80:	f7fd fbc0 	bl	b6204 <sock_close>
   b8a84:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b8a86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8a8a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b8a8c:	6960      	ldr	r0, [r4, #20]
   b8a8e:	2211      	movs	r2, #17
   b8a90:	2100      	movs	r1, #0
   b8a92:	308c      	adds	r0, #140	; 0x8c
   b8a94:	f001 f808 	bl	b9aa8 <memset>
    flush_buffer();
   b8a98:	4620      	mov	r0, r4
}
   b8a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b8a9e:	f7ff bf0b 	b.w	b88b8 <_ZN9TCPClient12flush_bufferEv>

000b8aa2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b8aa2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b8aa4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b8aa6:	4604      	mov	r4, r0
          total(0) {
   b8aa8:	6001      	str	r1, [r0, #0]
   b8aaa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b8aae:	3088      	adds	r0, #136	; 0x88
   b8ab0:	f7ff f948 	bl	b7d44 <_ZN9IPAddressC1Ev>
}
   b8ab4:	4620      	mov	r0, r4
   b8ab6:	bd10      	pop	{r4, pc}

000b8ab8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b8ab8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8aba:	2300      	movs	r3, #0
   b8abc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8ac0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b8ac4:	4a0e      	ldr	r2, [pc, #56]	; (b8b00 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b8ac6:	6103      	str	r3, [r0, #16]
   b8ac8:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8aca:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b8acc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8ace:	20ac      	movs	r0, #172	; 0xac
   b8ad0:	9101      	str	r1, [sp, #4]
   b8ad2:	f7fb fae0 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8ad6:	1e05      	subs	r5, r0, #0
   b8ad8:	f105 060c 	add.w	r6, r5, #12
   b8adc:	d008      	beq.n	b8af0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b8ade:	2301      	movs	r3, #1
   b8ae0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8ae4:	4b07      	ldr	r3, [pc, #28]	; (b8b04 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8ae6:	9901      	ldr	r1, [sp, #4]
   b8ae8:	602b      	str	r3, [r5, #0]
   b8aea:	4630      	mov	r0, r6
   b8aec:	f7ff ffd9 	bl	b8aa2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b8af0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b8af2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b8af6:	f7ff fedf 	bl	b88b8 <_ZN9TCPClient12flush_bufferEv>
}
   b8afa:	b002      	add	sp, #8
   b8afc:	bd70      	pop	{r4, r5, r6, pc}
   b8afe:	bf00      	nop
   b8b00:	000ba774 	.word	0x000ba774
   b8b04:	000ba758 	.word	0x000ba758

000b8b08 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b8b08:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b8b0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b8b0e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b8b10:	f7ff ffd2 	bl	b8ab8 <_ZN9TCPClientC1Ei>
}
   b8b14:	4620      	mov	r0, r4
   b8b16:	bd10      	pop	{r4, pc}

000b8b18 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b8b18:	b510      	push	{r4, lr}
   b8b1a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b8b1c:	6800      	ldr	r0, [r0, #0]
   b8b1e:	2800      	cmp	r0, #0
   b8b20:	db01      	blt.n	b8b26 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b8b22:	f7fd fb6f 	bl	b6204 <sock_close>
    }
}
   b8b26:	4620      	mov	r0, r4
   b8b28:	bd10      	pop	{r4, pc}

000b8b2a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b8b2a:	300c      	adds	r0, #12
   b8b2c:	f7ff bff4 	b.w	b8b18 <_ZN9TCPClient4DataD1Ev>

000b8b30 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b8b30:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8b32:	2000      	movs	r0, #0
   b8b34:	f7fd fcec 	bl	b6510 <spark_sync_time_pending>
   b8b38:	b128      	cbz	r0, b8b46 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8b3a:	f7fd fcd9 	bl	b64f0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8b3e:	f080 0001 	eor.w	r0, r0, #1
   b8b42:	b2c0      	uxtb	r0, r0
    }
   b8b44:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8b46:	2001      	movs	r0, #1
   b8b48:	e7fc      	b.n	b8b44 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b8b4c <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b8b4c:	b530      	push	{r4, r5, lr}
   b8b4e:	b093      	sub	sp, #76	; 0x4c
   b8b50:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b8b54:	4b19      	ldr	r3, [pc, #100]	; (b8bbc <_ZN9TimeClass7timeStrEx+0x70>)
{
   b8b56:	4604      	mov	r4, r0
    t += time_zone_cache;
   b8b58:	e9d3 1000 	ldrd	r1, r0, [r3]
   b8b5c:	9b01      	ldr	r3, [sp, #4]
   b8b5e:	1852      	adds	r2, r2, r1
   b8b60:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b8b64:	4816      	ldr	r0, [pc, #88]	; (b8bc0 <_ZN9TimeClass7timeStrEx+0x74>)
   b8b66:	e9d0 1000 	ldrd	r1, r0, [r0]
   b8b6a:	1852      	adds	r2, r2, r1
   b8b6c:	eb43 0300 	adc.w	r3, r3, r0
   b8b70:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b8b74:	2224      	movs	r2, #36	; 0x24
   b8b76:	eb0d 0002 	add.w	r0, sp, r2
   b8b7a:	2100      	movs	r1, #0
   b8b7c:	f000 ff94 	bl	b9aa8 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b8b80:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b8b82:	a909      	add	r1, sp, #36	; 0x24
   b8b84:	4668      	mov	r0, sp
   b8b86:	f7fd fd93 	bl	b66b0 <localtime_r>
    char ascstr[26] = {};
   b8b8a:	2216      	movs	r2, #22
   b8b8c:	4629      	mov	r1, r5
   b8b8e:	a803      	add	r0, sp, #12
   b8b90:	9502      	str	r5, [sp, #8]
   b8b92:	f000 ff89 	bl	b9aa8 <memset>
    asctime_r(&calendar_time, ascstr);
   b8b96:	a902      	add	r1, sp, #8
   b8b98:	a809      	add	r0, sp, #36	; 0x24
   b8b9a:	f000 ff01 	bl	b99a0 <asctime_r>
    int len = strlen(ascstr);
   b8b9e:	a802      	add	r0, sp, #8
   b8ba0:	f000 ffca 	bl	b9b38 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b8ba4:	ab12      	add	r3, sp, #72	; 0x48
   b8ba6:	4418      	add	r0, r3
    return String(ascstr);
   b8ba8:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b8baa:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b8bae:	4620      	mov	r0, r4
   b8bb0:	f7ff fb69 	bl	b8286 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b8bb4:	4620      	mov	r0, r4
   b8bb6:	b013      	add	sp, #76	; 0x4c
   b8bb8:	bd30      	pop	{r4, r5, pc}
   b8bba:	bf00      	nop
   b8bbc:	2003e680 	.word	0x2003e680
   b8bc0:	2003e678 	.word	0x2003e678

000b8bc4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b8bc4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b8bc6:	2000      	movs	r0, #0
   b8bc8:	f7fd fa5c 	bl	b6084 <hal_rtc_time_is_valid>
    if (rtcstate)
   b8bcc:	4604      	mov	r4, r0
   b8bce:	b9a0      	cbnz	r0, b8bfa <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b8bd0:	f7fd fc20 	bl	b6414 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b8bd4:	2801      	cmp	r0, #1
   b8bd6:	d110      	bne.n	b8bfa <_ZN9TimeClass7isValidEv+0x36>
   b8bd8:	4620      	mov	r0, r4
   b8bda:	f7fd fc53 	bl	b6484 <system_thread_get_state>
   b8bde:	b960      	cbnz	r0, b8bfa <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b8be0:	f7ff ffa6 	bl	b8b30 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b8be4:	b910      	cbnz	r0, b8bec <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b8be6:	f7fd fc73 	bl	b64d0 <spark_process>
        while (_while() && !_condition()) {
   b8bea:	e7f9      	b.n	b8be0 <_ZN9TimeClass7isValidEv+0x1c>
   b8bec:	f7ff ffa0 	bl	b8b30 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b8bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b8bf4:	2000      	movs	r0, #0
   b8bf6:	f7fd ba45 	b.w	b6084 <hal_rtc_time_is_valid>
}
   b8bfa:	4620      	mov	r0, r4
   b8bfc:	bd10      	pop	{r4, pc}

000b8bfe <_ZN9TimeClass3nowEv>:
{
   b8bfe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b8c00:	f7ff ffe0 	bl	b8bc4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b8c04:	2210      	movs	r2, #16
   b8c06:	2100      	movs	r1, #0
   b8c08:	4668      	mov	r0, sp
   b8c0a:	f000 ff4d 	bl	b9aa8 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b8c0e:	2100      	movs	r1, #0
   b8c10:	4668      	mov	r0, sp
   b8c12:	f7fd fa3f 	bl	b6094 <hal_rtc_get_time>
}
   b8c16:	9800      	ldr	r0, [sp, #0]
   b8c18:	b005      	add	sp, #20
   b8c1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8c20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8c20:	4b02      	ldr	r3, [pc, #8]	; (b8c2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b8c22:	681a      	ldr	r2, [r3, #0]
   b8c24:	4b02      	ldr	r3, [pc, #8]	; (b8c30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b8c26:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8c28:	4770      	bx	lr
   b8c2a:	bf00      	nop
   b8c2c:	2003d9f4 	.word	0x2003d9f4
   b8c30:	2003e670 	.word	0x2003e670

000b8c34 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   b8c34:	4770      	bx	lr

000b8c36 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8c36:	7441      	strb	r1, [r0, #17]
}
   b8c38:	4770      	bx	lr

000b8c3a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8c3a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8c3c:	7c00      	ldrb	r0, [r0, #16]
   b8c3e:	f7fd fb91 	bl	b6364 <hal_usart_available_data_for_write>
}
   b8c42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8c46:	bd08      	pop	{r3, pc}

000b8c48 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8c48:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8c4a:	7c00      	ldrb	r0, [r0, #16]
   b8c4c:	f7fd fb62 	bl	b6314 <hal_usart_available>
}
   b8c50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8c54:	bd08      	pop	{r3, pc}

000b8c56 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8c56:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8c58:	7c00      	ldrb	r0, [r0, #16]
   b8c5a:	f7fd fb6b 	bl	b6334 <hal_usart_peek>
}
   b8c5e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8c62:	bd08      	pop	{r3, pc}

000b8c64 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8c64:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8c66:	7c00      	ldrb	r0, [r0, #16]
   b8c68:	f7fd fb5c 	bl	b6324 <hal_usart_read>
}
   b8c6c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8c70:	bd08      	pop	{r3, pc}

000b8c72 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8c72:	7c00      	ldrb	r0, [r0, #16]
   b8c74:	f7fd bb66 	b.w	b6344 <hal_usart_flush>

000b8c78 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8c7a:	7c45      	ldrb	r5, [r0, #17]
{
   b8c7c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8c7e:	b12d      	cbz	r5, b8c8c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8c80:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8c82:	b003      	add	sp, #12
   b8c84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8c88:	f7fd bb3c 	b.w	b6304 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8c8c:	7c00      	ldrb	r0, [r0, #16]
   b8c8e:	9101      	str	r1, [sp, #4]
   b8c90:	f7fd fb68 	bl	b6364 <hal_usart_available_data_for_write>
   b8c94:	2800      	cmp	r0, #0
   b8c96:	9901      	ldr	r1, [sp, #4]
   b8c98:	dcf2      	bgt.n	b8c80 <_ZN11USARTSerial5writeEh+0x8>
}
   b8c9a:	4628      	mov	r0, r5
   b8c9c:	b003      	add	sp, #12
   b8c9e:	bd30      	pop	{r4, r5, pc}

000b8ca0 <_ZN11USARTSerialD0Ev>:
   b8ca0:	b510      	push	{r4, lr}
   b8ca2:	2114      	movs	r1, #20
   b8ca4:	4604      	mov	r4, r0
   b8ca6:	f000 fb1e 	bl	b92e6 <_ZdlPvj>
   b8caa:	4620      	mov	r0, r4
   b8cac:	bd10      	pop	{r4, pc}
	...

000b8cb0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   b8cb0:	b510      	push	{r4, lr}
   b8cb2:	f04f 0c00 	mov.w	ip, #0
   b8cb6:	4604      	mov	r4, r0
   b8cb8:	4608      	mov	r0, r1
   b8cba:	4611      	mov	r1, r2
   b8cbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8cc0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   b8cc4:	4a04      	ldr	r2, [pc, #16]	; (b8cd8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   b8cc6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   b8cc8:	2201      	movs	r2, #1
  _serial = serial;
   b8cca:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8ccc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   b8cce:	461a      	mov	r2, r3
   b8cd0:	f7fd fb10 	bl	b62f4 <hal_usart_init>
}
   b8cd4:	4620      	mov	r0, r4
   b8cd6:	bd10      	pop	{r4, pc}
   b8cd8:	000ba7dc 	.word	0x000ba7dc

000b8cdc <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   b8cdc:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   b8cde:	4c0e      	ldr	r4, [pc, #56]	; (b8d18 <_Z22__fetch_global_Serial1v+0x3c>)
   b8ce0:	7821      	ldrb	r1, [r4, #0]
   b8ce2:	f3bf 8f5b 	dmb	ish
   b8ce6:	f011 0101 	ands.w	r1, r1, #1
   b8cea:	d112      	bne.n	b8d12 <_Z22__fetch_global_Serial1v+0x36>
   b8cec:	4620      	mov	r0, r4
   b8cee:	9101      	str	r1, [sp, #4]
   b8cf0:	f7fb f9d7 	bl	b40a2 <__cxa_guard_acquire>
   b8cf4:	9901      	ldr	r1, [sp, #4]
   b8cf6:	b160      	cbz	r0, b8d12 <_Z22__fetch_global_Serial1v+0x36>
   b8cf8:	4a08      	ldr	r2, [pc, #32]	; (b8d1c <_Z22__fetch_global_Serial1v+0x40>)
   b8cfa:	4b09      	ldr	r3, [pc, #36]	; (b8d20 <_Z22__fetch_global_Serial1v+0x44>)
   b8cfc:	4809      	ldr	r0, [pc, #36]	; (b8d24 <_Z22__fetch_global_Serial1v+0x48>)
   b8cfe:	f7ff ffd7 	bl	b8cb0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   b8d02:	4620      	mov	r0, r4
   b8d04:	f7fb f9d2 	bl	b40ac <__cxa_guard_release>
   b8d08:	4a07      	ldr	r2, [pc, #28]	; (b8d28 <_Z22__fetch_global_Serial1v+0x4c>)
   b8d0a:	4908      	ldr	r1, [pc, #32]	; (b8d2c <_Z22__fetch_global_Serial1v+0x50>)
   b8d0c:	4805      	ldr	r0, [pc, #20]	; (b8d24 <_Z22__fetch_global_Serial1v+0x48>)
   b8d0e:	f000 fae5 	bl	b92dc <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   b8d12:	4804      	ldr	r0, [pc, #16]	; (b8d24 <_Z22__fetch_global_Serial1v+0x48>)
   b8d14:	b002      	add	sp, #8
   b8d16:	bd10      	pop	{r4, pc}
   b8d18:	2003e688 	.word	0x2003e688
   b8d1c:	2003e68c 	.word	0x2003e68c
   b8d20:	2003e710 	.word	0x2003e710
   b8d24:	2003e794 	.word	0x2003e794
   b8d28:	2003da60 	.word	0x2003da60
   b8d2c:	000b8c35 	.word	0x000b8c35

000b8d30 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8d30:	7441      	strb	r1, [r0, #17]
}
   b8d32:	4770      	bx	lr

000b8d34 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8d34:	4770      	bx	lr

000b8d36 <_ZN9USBSerial4readEv>:
{
   b8d36:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8d38:	2100      	movs	r1, #0
   b8d3a:	7c00      	ldrb	r0, [r0, #16]
   b8d3c:	f7fd fb3a 	bl	b63b4 <HAL_USB_USART_Receive_Data>
}
   b8d40:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8d44:	bd08      	pop	{r3, pc}

000b8d46 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   b8d46:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8d48:	2101      	movs	r1, #1
   b8d4a:	7c00      	ldrb	r0, [r0, #16]
   b8d4c:	f7fd fb32 	bl	b63b4 <HAL_USB_USART_Receive_Data>
}
   b8d50:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8d54:	bd08      	pop	{r3, pc}

000b8d56 <_ZN9USBSerial17availableForWriteEv>:
{
   b8d56:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8d58:	7c00      	ldrb	r0, [r0, #16]
   b8d5a:	f7fd fb23 	bl	b63a4 <HAL_USB_USART_Available_Data_For_Write>
}
   b8d5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8d62:	bd08      	pop	{r3, pc}

000b8d64 <_ZN9USBSerial9availableEv>:
{
   b8d64:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8d66:	7c00      	ldrb	r0, [r0, #16]
   b8d68:	f7fd fb14 	bl	b6394 <HAL_USB_USART_Available_Data>
}
   b8d6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8d70:	bd08      	pop	{r3, pc}

000b8d72 <_ZN9USBSerial5writeEh>:
{
   b8d72:	b513      	push	{r0, r1, r4, lr}
   b8d74:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8d76:	7c00      	ldrb	r0, [r0, #16]
{
   b8d78:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8d7a:	f7fd fb13 	bl	b63a4 <HAL_USB_USART_Available_Data_For_Write>
   b8d7e:	2800      	cmp	r0, #0
   b8d80:	9901      	ldr	r1, [sp, #4]
   b8d82:	dc01      	bgt.n	b8d88 <_ZN9USBSerial5writeEh+0x16>
   b8d84:	7c60      	ldrb	r0, [r4, #17]
   b8d86:	b120      	cbz	r0, b8d92 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8d88:	7c20      	ldrb	r0, [r4, #16]
   b8d8a:	f7fd fb1b 	bl	b63c4 <HAL_USB_USART_Send_Data>
   b8d8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8d92:	b002      	add	sp, #8
   b8d94:	bd10      	pop	{r4, pc}

000b8d96 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8d96:	7c00      	ldrb	r0, [r0, #16]
   b8d98:	f7fd bb1c 	b.w	b63d4 <HAL_USB_USART_Flush_Data>

000b8d9c <_ZN9USBSerialD0Ev>:
   b8d9c:	b510      	push	{r4, lr}
   b8d9e:	2114      	movs	r1, #20
   b8da0:	4604      	mov	r4, r0
   b8da2:	f000 faa0 	bl	b92e6 <_ZdlPvj>
   b8da6:	4620      	mov	r0, r4
   b8da8:	bd10      	pop	{r4, pc}
	...

000b8dac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8dac:	b510      	push	{r4, lr}
   b8dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8db2:	4604      	mov	r4, r0
   b8db4:	4608      	mov	r0, r1
   b8db6:	2100      	movs	r1, #0
   b8db8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8dbc:	4b04      	ldr	r3, [pc, #16]	; (b8dd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8dbe:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8dc0:	2301      	movs	r3, #1
  _serial = serial;
   b8dc2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8dc4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8dc6:	4611      	mov	r1, r2
   b8dc8:	f7fd fad4 	bl	b6374 <HAL_USB_USART_Init>
}
   b8dcc:	4620      	mov	r0, r4
   b8dce:	bd10      	pop	{r4, pc}
   b8dd0:	000ba80c 	.word	0x000ba80c

000b8dd4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b8dd4:	7c00      	ldrb	r0, [r0, #16]
   b8dd6:	2200      	movs	r2, #0
   b8dd8:	f7fd bad4 	b.w	b6384 <HAL_USB_USART_Begin>

000b8ddc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   b8ddc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   b8dde:	2214      	movs	r2, #20
{
   b8de0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   b8de2:	2100      	movs	r1, #0
   b8de4:	f000 fe60 	bl	b9aa8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   b8de8:	4620      	mov	r0, r4
   b8dea:	bd10      	pop	{r4, pc}

000b8dec <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   b8dec:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8dee:	4c10      	ldr	r4, [pc, #64]	; (b8e30 <_Z16_fetch_usbserialv+0x44>)
{
   b8df0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8df2:	a803      	add	r0, sp, #12
   b8df4:	f7ff fff2 	bl	b8ddc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8df8:	7821      	ldrb	r1, [r4, #0]
   b8dfa:	f3bf 8f5b 	dmb	ish
   b8dfe:	f011 0101 	ands.w	r1, r1, #1
   b8e02:	d111      	bne.n	b8e28 <_Z16_fetch_usbserialv+0x3c>
   b8e04:	4620      	mov	r0, r4
   b8e06:	9101      	str	r1, [sp, #4]
   b8e08:	f7fb f94b 	bl	b40a2 <__cxa_guard_acquire>
   b8e0c:	9901      	ldr	r1, [sp, #4]
   b8e0e:	b158      	cbz	r0, b8e28 <_Z16_fetch_usbserialv+0x3c>
   b8e10:	aa03      	add	r2, sp, #12
   b8e12:	4808      	ldr	r0, [pc, #32]	; (b8e34 <_Z16_fetch_usbserialv+0x48>)
   b8e14:	f7ff ffca 	bl	b8dac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8e18:	4620      	mov	r0, r4
   b8e1a:	f7fb f947 	bl	b40ac <__cxa_guard_release>
   b8e1e:	4a06      	ldr	r2, [pc, #24]	; (b8e38 <_Z16_fetch_usbserialv+0x4c>)
   b8e20:	4906      	ldr	r1, [pc, #24]	; (b8e3c <_Z16_fetch_usbserialv+0x50>)
   b8e22:	4804      	ldr	r0, [pc, #16]	; (b8e34 <_Z16_fetch_usbserialv+0x48>)
   b8e24:	f000 fa5a 	bl	b92dc <__aeabi_atexit>
	return _usbserial;
}
   b8e28:	4802      	ldr	r0, [pc, #8]	; (b8e34 <_Z16_fetch_usbserialv+0x48>)
   b8e2a:	b008      	add	sp, #32
   b8e2c:	bd10      	pop	{r4, pc}
   b8e2e:	bf00      	nop
   b8e30:	2003e7a8 	.word	0x2003e7a8
   b8e34:	2003e7ac 	.word	0x2003e7ac
   b8e38:	2003da60 	.word	0x2003da60
   b8e3c:	000b8d35 	.word	0x000b8d35

000b8e40 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv>:
                results[index++] = *result;
            }
        }

    protected:
        static void callback(WiFiAccessPoint* result, void* cookie)
   b8e40:	b530      	push	{r4, r5, lr}
            if (index<count) {
   b8e42:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   b8e46:	4293      	cmp	r3, r2
   b8e48:	da10      	bge.n	b8e6c <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv+0x2c>
                results[index++] = *result;
   b8e4a:	680d      	ldr	r5, [r1, #0]
   b8e4c:	1c5a      	adds	r2, r3, #1
   b8e4e:	604a      	str	r2, [r1, #4]
   b8e50:	4604      	mov	r4, r0
   b8e52:	2238      	movs	r2, #56	; 0x38
   b8e54:	fb02 5503 	mla	r5, r2, r3, r5
   b8e58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8e5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8e64:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8e68:	e885 0003 	stmia.w	r5, {r0, r1}
        {
            ((APArrayPopulator*)cookie)->addResult(result);
        }
   b8e6c:	bd30      	pop	{r4, r5, pc}

000b8e6e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8e6e:	2200      	movs	r2, #0
   b8e70:	6840      	ldr	r0, [r0, #4]
   b8e72:	4611      	mov	r1, r2
   b8e74:	f7fd bb94 	b.w	b65a0 <network_listening>

000b8e78 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8e78:	2200      	movs	r2, #0
   b8e7a:	6840      	ldr	r0, [r0, #4]
   b8e7c:	4611      	mov	r1, r2
   b8e7e:	f7fd bbb7 	b.w	b65f0 <network_get_listen_timeout>

000b8e82 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8e82:	6840      	ldr	r0, [r0, #4]
   b8e84:	2200      	movs	r2, #0
   b8e86:	f7fd bbab 	b.w	b65e0 <network_set_listen_timeout>

000b8e8a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8e8a:	6840      	ldr	r0, [r0, #4]
   b8e8c:	2200      	movs	r2, #0
   b8e8e:	f081 0101 	eor.w	r1, r1, #1
   b8e92:	f7fd bb7d 	b.w	b6590 <network_listen>

000b8e96 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8e96:	2200      	movs	r2, #0
   b8e98:	6840      	ldr	r0, [r0, #4]
   b8e9a:	4611      	mov	r1, r2
   b8e9c:	f7fd bb50 	b.w	b6540 <network_connecting>

000b8ea0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8ea0:	6840      	ldr	r0, [r0, #4]
   b8ea2:	2200      	movs	r2, #0
   b8ea4:	2102      	movs	r1, #2
   b8ea6:	f7fd bb53 	b.w	b6550 <network_disconnect>
	...

000b8eac <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>:
        APScan apScan(results, result_count);
        return apScan.start();
    }

#if !HAL_PLATFORM_WIFI_SCAN_ONLY
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
   b8eac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
            this->index = 0;
   b8eae:	2300      	movs	r3, #0
            this->results = results;
   b8eb0:	9101      	str	r1, [sp, #4]
            return std::min(count, wlan_get_credentials(callback, this));
   b8eb2:	4806      	ldr	r0, [pc, #24]	; (b8ecc <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj+0x20>)
            this->index = 0;
   b8eb4:	9302      	str	r3, [sp, #8]
            return std::min(count, wlan_get_credentials(callback, this));
   b8eb6:	a901      	add	r1, sp, #4
            this->count = size;
   b8eb8:	9203      	str	r2, [sp, #12]
            return std::min(count, wlan_get_credentials(callback, this));
   b8eba:	f7fd fa93 	bl	b63e4 <wlan_get_credentials>
        APList apList(results, result_count);
        return apList.start();
    }
   b8ebe:	9b03      	ldr	r3, [sp, #12]
   b8ec0:	4298      	cmp	r0, r3
   b8ec2:	bfa8      	it	ge
   b8ec4:	4618      	movge	r0, r3
   b8ec6:	b005      	add	sp, #20
   b8ec8:	f85d fb04 	ldr.w	pc, [sp], #4
   b8ecc:	000b8e41 	.word	0x000b8e41

000b8ed0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b8ed0:	4b02      	ldr	r3, [pc, #8]	; (b8edc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b8ed2:	2204      	movs	r2, #4
   b8ed4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b8ed6:	4a02      	ldr	r2, [pc, #8]	; (b8ee0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8ed8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b8eda:	4770      	bx	lr
   b8edc:	2003e7c0 	.word	0x2003e7c0
   b8ee0:	000ba83c 	.word	0x000ba83c

000b8ee4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b8ee4:	b510      	push	{r4, lr}
   b8ee6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b8ee8:	f000 fe26 	bl	b9b38 <strlen>
   b8eec:	3801      	subs	r0, #1
   b8eee:	1823      	adds	r3, r4, r0
   b8ef0:	4620      	mov	r0, r4
	while(i<j){
   b8ef2:	4283      	cmp	r3, r0
   b8ef4:	d906      	bls.n	b8f04 <_Z11str_reversePc+0x20>
		c = *i;
   b8ef6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b8ef8:	7819      	ldrb	r1, [r3, #0]
   b8efa:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b8efe:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b8f02:	e7f6      	b.n	b8ef2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b8f04:	bd10      	pop	{r4, pc}

000b8f06 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b8f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b8f0a:	1e93      	subs	r3, r2, #2
{
   b8f0c:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b8f0e:	2b22      	cmp	r3, #34	; 0x22
   b8f10:	f04f 0300 	mov.w	r3, #0
{
   b8f14:	460d      	mov	r5, r1
   b8f16:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b8f18:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b8f1c:	d927      	bls.n	b8f6e <ltoa+0x68>

      if (10 == base && N < 0L)
   b8f1e:	2800      	cmp	r0, #0
   b8f20:	da2a      	bge.n	b8f78 <ltoa+0x72>
      {
            *head++ = '-';
   b8f22:	462e      	mov	r6, r5
   b8f24:	232d      	movs	r3, #45	; 0x2d
   b8f26:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b8f2a:	4240      	negs	r0, r0
   b8f2c:	240a      	movs	r4, #10
      *tail-- = '\0';
   b8f2e:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b8f32:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b8f36:	4622      	mov	r2, r4
   b8f38:	4601      	mov	r1, r0
   b8f3a:	a801      	add	r0, sp, #4
   b8f3c:	f000 fd68 	bl	b9a10 <ldiv>
   b8f40:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b8f42:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b8f44:	2b09      	cmp	r3, #9
   b8f46:	bfcc      	ite	gt
   b8f48:	2237      	movgt	r2, #55	; 0x37
   b8f4a:	2230      	movle	r2, #48	; 0x30
   b8f4c:	fa52 f383 	uxtab	r3, r2, r3
   b8f50:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b8f54:	f108 0801 	add.w	r8, r8, #1
   b8f58:	2800      	cmp	r0, #0
   b8f5a:	d1ec      	bne.n	b8f36 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b8f5c:	4642      	mov	r2, r8
   b8f5e:	1c79      	adds	r1, r7, #1
   b8f60:	4630      	mov	r0, r6
   b8f62:	f000 fd79 	bl	b9a58 <memcpy>
      return str;
}
   b8f66:	4628      	mov	r0, r5
   b8f68:	b00c      	add	sp, #48	; 0x30
   b8f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b8f6e:	2a0a      	cmp	r2, #10
   b8f70:	d0d5      	beq.n	b8f1e <ltoa+0x18>
      if (uarg)
   b8f72:	b118      	cbz	r0, b8f7c <ltoa+0x76>
   b8f74:	462e      	mov	r6, r5
   b8f76:	e7da      	b.n	b8f2e <ltoa+0x28>
   b8f78:	240a      	movs	r4, #10
   b8f7a:	e7fa      	b.n	b8f72 <ltoa+0x6c>
      else  *tail-- = '0';
   b8f7c:	2330      	movs	r3, #48	; 0x30
   b8f7e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b8f82:	462e      	mov	r6, r5
   b8f84:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b8f88:	f04f 0802 	mov.w	r8, #2
   b8f8c:	e7e6      	b.n	b8f5c <ltoa+0x56>

000b8f8e <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b8f8e:	b570      	push	{r4, r5, r6, lr}
   b8f90:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b8f92:	1e91      	subs	r1, r2, #2
   b8f94:	2922      	cmp	r1, #34	; 0x22
   b8f96:	d81d      	bhi.n	b8fd4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b8f98:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b8f9a:	b930      	cbnz	r0, b8faa <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b8f9c:	4423      	add	r3, r4
            *ptr++ = '0';
   b8f9e:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b8fa0:	429d      	cmp	r5, r3
   b8fa2:	d210      	bcs.n	b8fc6 <ultoa+0x38>
            *ptr++ = '0';
   b8fa4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b8fa8:	e7fa      	b.n	b8fa0 <ultoa+0x12>
            result.quot = a/radix;
   b8faa:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b8fae:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b8fb2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b8fb4:	2809      	cmp	r0, #9
                *ptr += '0';
   b8fb6:	bf94      	ite	ls
   b8fb8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b8fba:	3157      	addhi	r1, #87	; 0x57
   b8fbc:	b2c9      	uxtb	r1, r1
   b8fbe:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b8fc2:	4630      	mov	r0, r6
	while(a){
   b8fc4:	e7e9      	b.n	b8f9a <ultoa+0xc>

	*ptr = '\0';
   b8fc6:	2300      	movs	r3, #0
	str_reverse(buffer);
   b8fc8:	4620      	mov	r0, r4
	*ptr = '\0';
   b8fca:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b8fcc:	f7ff ff8a 	bl	b8ee4 <_Z11str_reversePc>
	return buffer;
   b8fd0:	4620      	mov	r0, r4
}
   b8fd2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b8fd4:	2000      	movs	r0, #0
   b8fd6:	e7fc      	b.n	b8fd2 <ultoa+0x44>

000b8fd8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8fd8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b8fda:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8fdc:	460c      	mov	r4, r1
   b8fde:	4615      	mov	r5, r2
	if(a<0){
   b8fe0:	da0e      	bge.n	b9000 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b8fe6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8fea:	bf14      	ite	ne
   b8fec:	4258      	negne	r0, r3
   b8fee:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b8ff0:	2301      	movs	r3, #1
		*buffer = '-';
   b8ff2:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b8ff4:	462a      	mov	r2, r5
   b8ff6:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b8ff8:	f7ff ffc9 	bl	b8f8e <ultoa>
	}
	return buffer;
}
   b8ffc:	4620      	mov	r0, r4
   b8ffe:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b9000:	2301      	movs	r3, #1
   b9002:	e7f9      	b.n	b8ff8 <itoa+0x20>

000b9004 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b9004:	4b01      	ldr	r3, [pc, #4]	; (b900c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b9006:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b9008:	4770      	bx	lr
   b900a:	bf00      	nop
   b900c:	2003d9f8 	.word	0x2003d9f8

000b9010 <serialEventRun>:
{
   b9010:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b9012:	4b0b      	ldr	r3, [pc, #44]	; (b9040 <serialEventRun+0x30>)
   b9014:	b143      	cbz	r3, b9028 <serialEventRun+0x18>
   b9016:	f7ff fee9 	bl	b8dec <_Z16_fetch_usbserialv>
   b901a:	6803      	ldr	r3, [r0, #0]
   b901c:	691b      	ldr	r3, [r3, #16]
   b901e:	4798      	blx	r3
   b9020:	2800      	cmp	r0, #0
   b9022:	dd01      	ble.n	b9028 <serialEventRun+0x18>
        serialEvent();
   b9024:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b9028:	4b06      	ldr	r3, [pc, #24]	; (b9044 <serialEventRun+0x34>)
   b902a:	b143      	cbz	r3, b903e <serialEventRun+0x2e>
   b902c:	f7ff fe56 	bl	b8cdc <_Z22__fetch_global_Serial1v>
   b9030:	6803      	ldr	r3, [r0, #0]
   b9032:	691b      	ldr	r3, [r3, #16]
   b9034:	4798      	blx	r3
   b9036:	2800      	cmp	r0, #0
   b9038:	dd01      	ble.n	b903e <serialEventRun+0x2e>
        serialEvent1();
   b903a:	f3af 8000 	nop.w
}
   b903e:	bd08      	pop	{r3, pc}
	...

000b9048 <_post_loop>:
{
   b9048:	b508      	push	{r3, lr}
	serialEventRun();
   b904a:	f7ff ffe1 	bl	b9010 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b904e:	f7fc fff9 	bl	b6044 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b9052:	4b01      	ldr	r3, [pc, #4]	; (b9058 <_post_loop+0x10>)
   b9054:	6018      	str	r0, [r3, #0]
}
   b9056:	bd08      	pop	{r3, pc}
   b9058:	2003e7d0 	.word	0x2003e7d0

000b905c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b905c:	4805      	ldr	r0, [pc, #20]	; (b9074 <_Z33system_initialize_user_backup_ramv+0x18>)
   b905e:	4a06      	ldr	r2, [pc, #24]	; (b9078 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9060:	4906      	ldr	r1, [pc, #24]	; (b907c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b9062:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9064:	1a12      	subs	r2, r2, r0
   b9066:	f000 fcf7 	bl	b9a58 <memcpy>
    __backup_sram_signature = signature;
   b906a:	4b05      	ldr	r3, [pc, #20]	; (b9080 <_Z33system_initialize_user_backup_ramv+0x24>)
   b906c:	4a05      	ldr	r2, [pc, #20]	; (b9084 <_Z33system_initialize_user_backup_ramv+0x28>)
   b906e:	601a      	str	r2, [r3, #0]
}
   b9070:	bd08      	pop	{r3, pc}
   b9072:	bf00      	nop
   b9074:	2003f400 	.word	0x2003f400
   b9078:	2003f404 	.word	0x2003f404
   b907c:	000bab60 	.word	0x000bab60
   b9080:	2003f400 	.word	0x2003f400
   b9084:	9a271c1e 	.word	0x9a271c1e

000b9088 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b9088:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b908a:	2300      	movs	r3, #0
   b908c:	9300      	str	r3, [sp, #0]
   b908e:	461a      	mov	r2, r3
   b9090:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9094:	f7fd fa08 	bl	b64a8 <system_ctrl_set_result>
}
   b9098:	b003      	add	sp, #12
   b909a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b90a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b90a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b90a2:	8843      	ldrh	r3, [r0, #2]
   b90a4:	2b0a      	cmp	r3, #10
   b90a6:	d008      	beq.n	b90ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b90a8:	2b50      	cmp	r3, #80	; 0x50
   b90aa:	d10b      	bne.n	b90c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b90ac:	4b09      	ldr	r3, [pc, #36]	; (b90d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b90ae:	681b      	ldr	r3, [r3, #0]
   b90b0:	b14b      	cbz	r3, b90c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b90b2:	b003      	add	sp, #12
   b90b4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b90b8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b90ba:	f7ff ffe5 	bl	b9088 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b90be:	b003      	add	sp, #12
   b90c0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b90c4:	2300      	movs	r3, #0
   b90c6:	9300      	str	r3, [sp, #0]
   b90c8:	461a      	mov	r2, r3
   b90ca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b90ce:	f7fd f9eb 	bl	b64a8 <system_ctrl_set_result>
}
   b90d2:	e7f4      	b.n	b90be <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b90d4:	2003e7cc 	.word	0x2003e7cc

000b90d8 <module_user_init_hook>:
{
   b90d8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b90da:	4812      	ldr	r0, [pc, #72]	; (b9124 <module_user_init_hook+0x4c>)
   b90dc:	2100      	movs	r1, #0
   b90de:	f7fd fadf 	bl	b66a0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b90e2:	4b11      	ldr	r3, [pc, #68]	; (b9128 <module_user_init_hook+0x50>)
   b90e4:	681a      	ldr	r2, [r3, #0]
   b90e6:	4b11      	ldr	r3, [pc, #68]	; (b912c <module_user_init_hook+0x54>)
   b90e8:	429a      	cmp	r2, r3
   b90ea:	4b11      	ldr	r3, [pc, #68]	; (b9130 <module_user_init_hook+0x58>)
   b90ec:	bf0c      	ite	eq
   b90ee:	2201      	moveq	r2, #1
   b90f0:	2200      	movne	r2, #0
   b90f2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b90f4:	d001      	beq.n	b90fa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b90f6:	f7ff ffb1 	bl	b905c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b90fa:	f7fc ff93 	bl	b6024 <HAL_RNG_GetRandomNumber>
   b90fe:	4604      	mov	r4, r0
    srand(seed);
   b9100:	f000 fcda 	bl	b9ab8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b9104:	4b0b      	ldr	r3, [pc, #44]	; (b9134 <module_user_init_hook+0x5c>)
   b9106:	b113      	cbz	r3, b910e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9108:	4620      	mov	r0, r4
   b910a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b910e:	2100      	movs	r1, #0
   b9110:	4808      	ldr	r0, [pc, #32]	; (b9134 <module_user_init_hook+0x5c>)
   b9112:	f7fd fa05 	bl	b6520 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b9116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b911a:	4807      	ldr	r0, [pc, #28]	; (b9138 <module_user_init_hook+0x60>)
   b911c:	2100      	movs	r1, #0
   b911e:	f7fd b9b9 	b.w	b6494 <system_ctrl_set_app_request_handler>
   b9122:	bf00      	nop
   b9124:	000b9005 	.word	0x000b9005
   b9128:	2003f400 	.word	0x2003f400
   b912c:	9a271c1e 	.word	0x9a271c1e
   b9130:	2003e7c8 	.word	0x2003e7c8
   b9134:	00000000 	.word	0x00000000
   b9138:	000b90a1 	.word	0x000b90a1

000b913c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b913c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b913e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b9140:	d902      	bls.n	b9148 <pinAvailable+0xc>
    return false;
   b9142:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b9144:	b002      	add	sp, #8
   b9146:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b9148:	f1a0 030b 	sub.w	r3, r0, #11
   b914c:	2b02      	cmp	r3, #2
   b914e:	d81a      	bhi.n	b9186 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b9150:	4c17      	ldr	r4, [pc, #92]	; (b91b0 <pinAvailable+0x74>)
   b9152:	7821      	ldrb	r1, [r4, #0]
   b9154:	f3bf 8f5b 	dmb	ish
   b9158:	f011 0101 	ands.w	r1, r1, #1
   b915c:	d10b      	bne.n	b9176 <pinAvailable+0x3a>
   b915e:	4620      	mov	r0, r4
   b9160:	9101      	str	r1, [sp, #4]
   b9162:	f7fa ff9e 	bl	b40a2 <__cxa_guard_acquire>
   b9166:	9901      	ldr	r1, [sp, #4]
   b9168:	b128      	cbz	r0, b9176 <pinAvailable+0x3a>
   b916a:	4812      	ldr	r0, [pc, #72]	; (b91b4 <pinAvailable+0x78>)
   b916c:	f7fe ffac 	bl	b80c8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b9170:	4620      	mov	r0, r4
   b9172:	f7fa ff9b 	bl	b40ac <__cxa_guard_release>
   b9176:	4b0f      	ldr	r3, [pc, #60]	; (b91b4 <pinAvailable+0x78>)
   b9178:	7818      	ldrb	r0, [r3, #0]
   b917a:	f7fd f89b 	bl	b62b4 <hal_spi_is_enabled>
   b917e:	2800      	cmp	r0, #0
   b9180:	d1df      	bne.n	b9142 <pinAvailable+0x6>
  return true; // 'pin' is available
   b9182:	2001      	movs	r0, #1
   b9184:	e7de      	b.n	b9144 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b9186:	2801      	cmp	r0, #1
   b9188:	d809      	bhi.n	b919e <pinAvailable+0x62>
   b918a:	f000 f87f 	bl	b928c <_Z19__fetch_global_Wirev>
   b918e:	2100      	movs	r1, #0
   b9190:	7c00      	ldrb	r0, [r0, #16]
   b9192:	f7fc ffe7 	bl	b6164 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b9196:	f080 0001 	eor.w	r0, r0, #1
   b919a:	b2c0      	uxtb	r0, r0
   b919c:	e7d2      	b.n	b9144 <pinAvailable+0x8>
   b919e:	3809      	subs	r0, #9
   b91a0:	2801      	cmp	r0, #1
   b91a2:	d8ee      	bhi.n	b9182 <pinAvailable+0x46>
   b91a4:	f7ff fd9a 	bl	b8cdc <_Z22__fetch_global_Serial1v>
   b91a8:	7c00      	ldrb	r0, [r0, #16]
   b91aa:	f7fd f8d3 	bl	b6354 <hal_usart_is_enabled>
   b91ae:	e7f2      	b.n	b9196 <pinAvailable+0x5a>
   b91b0:	2003e620 	.word	0x2003e620
   b91b4:	2003e624 	.word	0x2003e624

000b91b8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b91b8:	2823      	cmp	r0, #35	; 0x23
{
   b91ba:	b538      	push	{r3, r4, r5, lr}
   b91bc:	4604      	mov	r4, r0
   b91be:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b91c0:	d80a      	bhi.n	b91d8 <pinMode+0x20>
   b91c2:	29ff      	cmp	r1, #255	; 0xff
   b91c4:	d008      	beq.n	b91d8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b91c6:	f7ff ffb9 	bl	b913c <pinAvailable>
   b91ca:	b128      	cbz	r0, b91d8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b91cc:	4629      	mov	r1, r5
   b91ce:	4620      	mov	r0, r4
}
   b91d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b91d4:	f7fc bf66 	b.w	b60a4 <HAL_Pin_Mode>
}
   b91d8:	bd38      	pop	{r3, r4, r5, pc}

000b91da <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b91da:	b538      	push	{r3, r4, r5, lr}
   b91dc:	4604      	mov	r4, r0
   b91de:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b91e0:	f7fc ff68 	bl	b60b4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b91e4:	28ff      	cmp	r0, #255	; 0xff
   b91e6:	d010      	beq.n	b920a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b91e8:	2806      	cmp	r0, #6
   b91ea:	d804      	bhi.n	b91f6 <digitalWrite+0x1c>
   b91ec:	234d      	movs	r3, #77	; 0x4d
   b91ee:	fa23 f000 	lsr.w	r0, r3, r0
   b91f2:	07c3      	lsls	r3, r0, #31
   b91f4:	d409      	bmi.n	b920a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b91f6:	4620      	mov	r0, r4
   b91f8:	f7ff ffa0 	bl	b913c <pinAvailable>
   b91fc:	b128      	cbz	r0, b920a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b91fe:	4629      	mov	r1, r5
   b9200:	4620      	mov	r0, r4
}
   b9202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b9206:	f7fc bf5d 	b.w	b60c4 <HAL_GPIO_Write>
}
   b920a:	bd38      	pop	{r3, r4, r5, pc}

000b920c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b920c:	b510      	push	{r4, lr}
   b920e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9210:	f7fc ff50 	bl	b60b4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b9214:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b9216:	b2db      	uxtb	r3, r3
   b9218:	2b01      	cmp	r3, #1
   b921a:	d908      	bls.n	b922e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b921c:	4620      	mov	r0, r4
   b921e:	f7ff ff8d 	bl	b913c <pinAvailable>
   b9222:	b120      	cbz	r0, b922e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b9224:	4620      	mov	r0, r4
}
   b9226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b922a:	f7fc bf53 	b.w	b60d4 <HAL_GPIO_Read>
}
   b922e:	2000      	movs	r0, #0
   b9230:	bd10      	pop	{r4, pc}
	...

000b9234 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   b9234:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   b9236:	4c08      	ldr	r4, [pc, #32]	; (b9258 <_Z21__fetch_global_EEPROMv+0x24>)
   b9238:	7823      	ldrb	r3, [r4, #0]
   b923a:	f3bf 8f5b 	dmb	ish
   b923e:	07db      	lsls	r3, r3, #31
   b9240:	d408      	bmi.n	b9254 <_Z21__fetch_global_EEPROMv+0x20>
   b9242:	4620      	mov	r0, r4
   b9244:	f7fa ff2d 	bl	b40a2 <__cxa_guard_acquire>
   b9248:	b120      	cbz	r0, b9254 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   b924a:	f7fc ff03 	bl	b6054 <HAL_EEPROM_Init>
   b924e:	4620      	mov	r0, r4
   b9250:	f7fa ff2c 	bl	b40ac <__cxa_guard_release>
	return eeprom;
}
   b9254:	4801      	ldr	r0, [pc, #4]	; (b925c <_Z21__fetch_global_EEPROMv+0x28>)
   b9256:	bd10      	pop	{r4, pc}
   b9258:	2003e7d4 	.word	0x2003e7d4
   b925c:	2003e7d8 	.word	0x2003e7d8

000b9260 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   b9260:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b9262:	2520      	movs	r5, #32
   b9264:	2314      	movs	r3, #20
{
   b9266:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9268:	6003      	str	r3, [r0, #0]
   b926a:	6085      	str	r5, [r0, #8]
   b926c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b926e:	4906      	ldr	r1, [pc, #24]	; (b9288 <_Z17acquireWireBufferv+0x28>)
   b9270:	4628      	mov	r0, r5
   b9272:	f000 f83a 	bl	b92ea <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9276:	4904      	ldr	r1, [pc, #16]	; (b9288 <_Z17acquireWireBufferv+0x28>)
	};
   b9278:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b927a:	4628      	mov	r0, r5
   b927c:	f000 f835 	bl	b92ea <_ZnajRKSt9nothrow_t>
	};
   b9280:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   b9282:	4620      	mov	r0, r4
   b9284:	bd38      	pop	{r3, r4, r5, pc}
   b9286:	bf00      	nop
   b9288:	000ba870 	.word	0x000ba870

000b928c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   b928c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b928e:	4d0f      	ldr	r5, [pc, #60]	; (b92cc <_Z19__fetch_global_Wirev+0x40>)
   b9290:	7829      	ldrb	r1, [r5, #0]
   b9292:	f3bf 8f5b 	dmb	ish
   b9296:	f011 0401 	ands.w	r4, r1, #1
{
   b929a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b929c:	d113      	bne.n	b92c6 <_Z19__fetch_global_Wirev+0x3a>
   b929e:	4628      	mov	r0, r5
   b92a0:	f7fa feff 	bl	b40a2 <__cxa_guard_acquire>
   b92a4:	b178      	cbz	r0, b92c6 <_Z19__fetch_global_Wirev+0x3a>
   b92a6:	a801      	add	r0, sp, #4
   b92a8:	f7ff ffda 	bl	b9260 <_Z17acquireWireBufferv>
   b92ac:	aa01      	add	r2, sp, #4
   b92ae:	4621      	mov	r1, r4
   b92b0:	4807      	ldr	r0, [pc, #28]	; (b92d0 <_Z19__fetch_global_Wirev+0x44>)
   b92b2:	f7fe fcbb 	bl	b7c2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b92b6:	4628      	mov	r0, r5
   b92b8:	f7fa fef8 	bl	b40ac <__cxa_guard_release>
   b92bc:	4a05      	ldr	r2, [pc, #20]	; (b92d4 <_Z19__fetch_global_Wirev+0x48>)
   b92be:	4906      	ldr	r1, [pc, #24]	; (b92d8 <_Z19__fetch_global_Wirev+0x4c>)
   b92c0:	4803      	ldr	r0, [pc, #12]	; (b92d0 <_Z19__fetch_global_Wirev+0x44>)
   b92c2:	f000 f80b 	bl	b92dc <__aeabi_atexit>
	return wire;
}
   b92c6:	4802      	ldr	r0, [pc, #8]	; (b92d0 <_Z19__fetch_global_Wirev+0x44>)
   b92c8:	b007      	add	sp, #28
   b92ca:	bd30      	pop	{r4, r5, pc}
   b92cc:	2003e7dc 	.word	0x2003e7dc
   b92d0:	2003e7e0 	.word	0x2003e7e0
   b92d4:	2003da60 	.word	0x2003da60
   b92d8:	000b7bd5 	.word	0x000b7bd5

000b92dc <__aeabi_atexit>:
   b92dc:	460b      	mov	r3, r1
   b92de:	4601      	mov	r1, r0
   b92e0:	4618      	mov	r0, r3
   b92e2:	f000 bb87 	b.w	b99f4 <__cxa_atexit>

000b92e6 <_ZdlPvj>:
   b92e6:	f7fa beda 	b.w	b409e <_ZdlPv>

000b92ea <_ZnajRKSt9nothrow_t>:
   b92ea:	f7fa bed6 	b.w	b409a <_Znaj>

000b92ee <_ZSt25__throw_bad_function_callv>:
   b92ee:	b508      	push	{r3, lr}
   b92f0:	f7fd f9be 	bl	b6670 <abort>

000b92f4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b92f4:	4901      	ldr	r1, [pc, #4]	; (b92fc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b92f6:	f000 b8f9 	b.w	b94ec <_ZNKSt9type_infoeqERKS_>
   b92fa:	bf00      	nop
   b92fc:	000ba88c 	.word	0x000ba88c

000b9300 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b9300:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9302:	2400      	movs	r4, #0
   b9304:	2310      	movs	r3, #16
   b9306:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b930a:	6803      	ldr	r3, [r0, #0]
   b930c:	4615      	mov	r5, r2
   b930e:	699e      	ldr	r6, [r3, #24]
   b9310:	6812      	ldr	r2, [r2, #0]
   b9312:	466b      	mov	r3, sp
   b9314:	e9cd 4400 	strd	r4, r4, [sp]
   b9318:	47b0      	blx	r6
   b931a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b931e:	f003 0306 	and.w	r3, r3, #6
   b9322:	2b06      	cmp	r3, #6
   b9324:	bf03      	ittte	eq
   b9326:	9b00      	ldreq	r3, [sp, #0]
   b9328:	602b      	streq	r3, [r5, #0]
   b932a:	2001      	moveq	r0, #1
   b932c:	4620      	movne	r0, r4
   b932e:	b004      	add	sp, #16
   b9330:	bd70      	pop	{r4, r5, r6, pc}

000b9332 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b9332:	9800      	ldr	r0, [sp, #0]
   b9334:	4290      	cmp	r0, r2
   b9336:	bf14      	ite	ne
   b9338:	2001      	movne	r0, #1
   b933a:	2006      	moveq	r0, #6
   b933c:	4770      	bx	lr
	...

000b9340 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b9340:	b510      	push	{r4, lr}
   b9342:	4b03      	ldr	r3, [pc, #12]	; (b9350 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9344:	6003      	str	r3, [r0, #0]
   b9346:	4604      	mov	r4, r0
   b9348:	f000 f8cd 	bl	b94e6 <_ZNSt9type_infoD1Ev>
   b934c:	4620      	mov	r0, r4
   b934e:	bd10      	pop	{r4, pc}
   b9350:	000ba8cc 	.word	0x000ba8cc

000b9354 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9354:	b510      	push	{r4, lr}
   b9356:	4604      	mov	r4, r0
   b9358:	f7ff fff2 	bl	b9340 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b935c:	4620      	mov	r0, r4
   b935e:	2108      	movs	r1, #8
   b9360:	f7ff ffc1 	bl	b92e6 <_ZdlPvj>
   b9364:	4620      	mov	r0, r4
   b9366:	bd10      	pop	{r4, pc}

000b9368 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b936c:	461f      	mov	r7, r3
   b936e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9372:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9376:	4598      	cmp	r8, r3
   b9378:	4606      	mov	r6, r0
   b937a:	4615      	mov	r5, r2
   b937c:	d107      	bne.n	b938e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b937e:	9907      	ldr	r1, [sp, #28]
   b9380:	f000 f8b4 	bl	b94ec <_ZNKSt9type_infoeqERKS_>
   b9384:	b118      	cbz	r0, b938e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9386:	7165      	strb	r5, [r4, #5]
   b9388:	2000      	movs	r0, #0
   b938a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b938e:	4639      	mov	r1, r7
   b9390:	4630      	mov	r0, r6
   b9392:	f000 f8ab 	bl	b94ec <_ZNKSt9type_infoeqERKS_>
   b9396:	2800      	cmp	r0, #0
   b9398:	d0f6      	beq.n	b9388 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b939a:	2301      	movs	r3, #1
   b939c:	f8c4 8000 	str.w	r8, [r4]
   b93a0:	7125      	strb	r5, [r4, #4]
   b93a2:	71a3      	strb	r3, [r4, #6]
   b93a4:	e7f0      	b.n	b9388 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b93a6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b93a6:	b538      	push	{r3, r4, r5, lr}
   b93a8:	4615      	mov	r5, r2
   b93aa:	461c      	mov	r4, r3
   b93ac:	f000 f89e 	bl	b94ec <_ZNKSt9type_infoeqERKS_>
   b93b0:	b120      	cbz	r0, b93bc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b93b2:	2308      	movs	r3, #8
   b93b4:	60e3      	str	r3, [r4, #12]
   b93b6:	2306      	movs	r3, #6
   b93b8:	6025      	str	r5, [r4, #0]
   b93ba:	7123      	strb	r3, [r4, #4]
   b93bc:	bd38      	pop	{r3, r4, r5, pc}

000b93be <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b93be:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b93c0:	4605      	mov	r5, r0
   b93c2:	460c      	mov	r4, r1
   b93c4:	9201      	str	r2, [sp, #4]
   b93c6:	461e      	mov	r6, r3
   b93c8:	f000 f890 	bl	b94ec <_ZNKSt9type_infoeqERKS_>
   b93cc:	b950      	cbnz	r0, b93e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b93ce:	2e03      	cmp	r6, #3
   b93d0:	d808      	bhi.n	b93e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b93d2:	6823      	ldr	r3, [r4, #0]
   b93d4:	9a01      	ldr	r2, [sp, #4]
   b93d6:	695b      	ldr	r3, [r3, #20]
   b93d8:	4629      	mov	r1, r5
   b93da:	4620      	mov	r0, r4
   b93dc:	b002      	add	sp, #8
   b93de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b93e2:	4718      	bx	r3
   b93e4:	b002      	add	sp, #8
   b93e6:	bd70      	pop	{r4, r5, r6, pc}

000b93e8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b93e8:	b510      	push	{r4, lr}
   b93ea:	4b03      	ldr	r3, [pc, #12]	; (b93f8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b93ec:	6003      	str	r3, [r0, #0]
   b93ee:	4604      	mov	r4, r0
   b93f0:	f7ff ffa6 	bl	b9340 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b93f4:	4620      	mov	r0, r4
   b93f6:	bd10      	pop	{r4, pc}
   b93f8:	000ba92c 	.word	0x000ba92c

000b93fc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b93fc:	b510      	push	{r4, lr}
   b93fe:	4604      	mov	r4, r0
   b9400:	f7ff fff2 	bl	b93e8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9404:	4620      	mov	r0, r4
   b9406:	210c      	movs	r1, #12
   b9408:	f7ff ff6d 	bl	b92e6 <_ZdlPvj>
   b940c:	4620      	mov	r0, r4
   b940e:	bd10      	pop	{r4, pc}

000b9410 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b9410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9412:	9f08      	ldr	r7, [sp, #32]
   b9414:	4297      	cmp	r7, r2
   b9416:	4605      	mov	r5, r0
   b9418:	460e      	mov	r6, r1
   b941a:	4614      	mov	r4, r2
   b941c:	d00a      	beq.n	b9434 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b941e:	68a8      	ldr	r0, [r5, #8]
   b9420:	6802      	ldr	r2, [r0, #0]
   b9422:	9708      	str	r7, [sp, #32]
   b9424:	6a15      	ldr	r5, [r2, #32]
   b9426:	4631      	mov	r1, r6
   b9428:	4622      	mov	r2, r4
   b942a:	46ac      	mov	ip, r5
   b942c:	b003      	add	sp, #12
   b942e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9432:	4760      	bx	ip
   b9434:	4619      	mov	r1, r3
   b9436:	9301      	str	r3, [sp, #4]
   b9438:	f000 f858 	bl	b94ec <_ZNKSt9type_infoeqERKS_>
   b943c:	9b01      	ldr	r3, [sp, #4]
   b943e:	2800      	cmp	r0, #0
   b9440:	d0ed      	beq.n	b941e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b9442:	2006      	movs	r0, #6
   b9444:	b003      	add	sp, #12
   b9446:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9448 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b9448:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b944c:	460d      	mov	r5, r1
   b944e:	4619      	mov	r1, r3
   b9450:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9454:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b9458:	4681      	mov	r9, r0
   b945a:	4617      	mov	r7, r2
   b945c:	4698      	mov	r8, r3
   b945e:	f000 f845 	bl	b94ec <_ZNKSt9type_infoeqERKS_>
   b9462:	b190      	cbz	r0, b948a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9464:	2d00      	cmp	r5, #0
   b9466:	6034      	str	r4, [r6, #0]
   b9468:	7137      	strb	r7, [r6, #4]
   b946a:	db09      	blt.n	b9480 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b946c:	1961      	adds	r1, r4, r5
   b946e:	458a      	cmp	sl, r1
   b9470:	bf0c      	ite	eq
   b9472:	2106      	moveq	r1, #6
   b9474:	2101      	movne	r1, #1
   b9476:	71b1      	strb	r1, [r6, #6]
   b9478:	2000      	movs	r0, #0
   b947a:	b001      	add	sp, #4
   b947c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9480:	3502      	adds	r5, #2
   b9482:	d1f9      	bne.n	b9478 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9484:	2301      	movs	r3, #1
   b9486:	71b3      	strb	r3, [r6, #6]
   b9488:	e7f6      	b.n	b9478 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b948a:	4554      	cmp	r4, sl
   b948c:	d106      	bne.n	b949c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b948e:	4659      	mov	r1, fp
   b9490:	4648      	mov	r0, r9
   b9492:	f000 f82b 	bl	b94ec <_ZNKSt9type_infoeqERKS_>
   b9496:	b108      	cbz	r0, b949c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9498:	7177      	strb	r7, [r6, #5]
   b949a:	e7ed      	b.n	b9478 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b949c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b94a0:	6803      	ldr	r3, [r0, #0]
   b94a2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b94a6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b94aa:	69dc      	ldr	r4, [r3, #28]
   b94ac:	463a      	mov	r2, r7
   b94ae:	4643      	mov	r3, r8
   b94b0:	4629      	mov	r1, r5
   b94b2:	46a4      	mov	ip, r4
   b94b4:	b001      	add	sp, #4
   b94b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b94ba:	4760      	bx	ip

000b94bc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b94bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b94c0:	4607      	mov	r7, r0
   b94c2:	460c      	mov	r4, r1
   b94c4:	4615      	mov	r5, r2
   b94c6:	461e      	mov	r6, r3
   b94c8:	f7ff ff6d 	bl	b93a6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b94cc:	b948      	cbnz	r0, b94e2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b94ce:	68b8      	ldr	r0, [r7, #8]
   b94d0:	6803      	ldr	r3, [r0, #0]
   b94d2:	699f      	ldr	r7, [r3, #24]
   b94d4:	462a      	mov	r2, r5
   b94d6:	4633      	mov	r3, r6
   b94d8:	4621      	mov	r1, r4
   b94da:	46bc      	mov	ip, r7
   b94dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b94e0:	4760      	bx	ip
   b94e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b94e6 <_ZNSt9type_infoD1Ev>:
   b94e6:	4770      	bx	lr

000b94e8 <_ZNKSt9type_info14__is_pointer_pEv>:
   b94e8:	2000      	movs	r0, #0
   b94ea:	4770      	bx	lr

000b94ec <_ZNKSt9type_infoeqERKS_>:
   b94ec:	4281      	cmp	r1, r0
   b94ee:	b508      	push	{r3, lr}
   b94f0:	d00e      	beq.n	b9510 <_ZNKSt9type_infoeqERKS_+0x24>
   b94f2:	6840      	ldr	r0, [r0, #4]
   b94f4:	7803      	ldrb	r3, [r0, #0]
   b94f6:	2b2a      	cmp	r3, #42	; 0x2a
   b94f8:	d00c      	beq.n	b9514 <_ZNKSt9type_infoeqERKS_+0x28>
   b94fa:	6849      	ldr	r1, [r1, #4]
   b94fc:	780b      	ldrb	r3, [r1, #0]
   b94fe:	2b2a      	cmp	r3, #42	; 0x2a
   b9500:	bf08      	it	eq
   b9502:	3101      	addeq	r1, #1
   b9504:	f000 fb06 	bl	b9b14 <strcmp>
   b9508:	fab0 f080 	clz	r0, r0
   b950c:	0940      	lsrs	r0, r0, #5
   b950e:	bd08      	pop	{r3, pc}
   b9510:	2001      	movs	r0, #1
   b9512:	e7fc      	b.n	b950e <_ZNKSt9type_infoeqERKS_+0x22>
   b9514:	2000      	movs	r0, #0
   b9516:	e7fa      	b.n	b950e <_ZNKSt9type_infoeqERKS_+0x22>

000b9518 <__aeabi_drsub>:
   b9518:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b951c:	e002      	b.n	b9524 <__adddf3>
   b951e:	bf00      	nop

000b9520 <__aeabi_dsub>:
   b9520:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b9524 <__adddf3>:
   b9524:	b530      	push	{r4, r5, lr}
   b9526:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b952a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b952e:	ea94 0f05 	teq	r4, r5
   b9532:	bf08      	it	eq
   b9534:	ea90 0f02 	teqeq	r0, r2
   b9538:	bf1f      	itttt	ne
   b953a:	ea54 0c00 	orrsne.w	ip, r4, r0
   b953e:	ea55 0c02 	orrsne.w	ip, r5, r2
   b9542:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b9546:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b954a:	f000 80e2 	beq.w	b9712 <__adddf3+0x1ee>
   b954e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b9552:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b9556:	bfb8      	it	lt
   b9558:	426d      	neglt	r5, r5
   b955a:	dd0c      	ble.n	b9576 <__adddf3+0x52>
   b955c:	442c      	add	r4, r5
   b955e:	ea80 0202 	eor.w	r2, r0, r2
   b9562:	ea81 0303 	eor.w	r3, r1, r3
   b9566:	ea82 0000 	eor.w	r0, r2, r0
   b956a:	ea83 0101 	eor.w	r1, r3, r1
   b956e:	ea80 0202 	eor.w	r2, r0, r2
   b9572:	ea81 0303 	eor.w	r3, r1, r3
   b9576:	2d36      	cmp	r5, #54	; 0x36
   b9578:	bf88      	it	hi
   b957a:	bd30      	pophi	{r4, r5, pc}
   b957c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9580:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9584:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b9588:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b958c:	d002      	beq.n	b9594 <__adddf3+0x70>
   b958e:	4240      	negs	r0, r0
   b9590:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9594:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b9598:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b959c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b95a0:	d002      	beq.n	b95a8 <__adddf3+0x84>
   b95a2:	4252      	negs	r2, r2
   b95a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b95a8:	ea94 0f05 	teq	r4, r5
   b95ac:	f000 80a7 	beq.w	b96fe <__adddf3+0x1da>
   b95b0:	f1a4 0401 	sub.w	r4, r4, #1
   b95b4:	f1d5 0e20 	rsbs	lr, r5, #32
   b95b8:	db0d      	blt.n	b95d6 <__adddf3+0xb2>
   b95ba:	fa02 fc0e 	lsl.w	ip, r2, lr
   b95be:	fa22 f205 	lsr.w	r2, r2, r5
   b95c2:	1880      	adds	r0, r0, r2
   b95c4:	f141 0100 	adc.w	r1, r1, #0
   b95c8:	fa03 f20e 	lsl.w	r2, r3, lr
   b95cc:	1880      	adds	r0, r0, r2
   b95ce:	fa43 f305 	asr.w	r3, r3, r5
   b95d2:	4159      	adcs	r1, r3
   b95d4:	e00e      	b.n	b95f4 <__adddf3+0xd0>
   b95d6:	f1a5 0520 	sub.w	r5, r5, #32
   b95da:	f10e 0e20 	add.w	lr, lr, #32
   b95de:	2a01      	cmp	r2, #1
   b95e0:	fa03 fc0e 	lsl.w	ip, r3, lr
   b95e4:	bf28      	it	cs
   b95e6:	f04c 0c02 	orrcs.w	ip, ip, #2
   b95ea:	fa43 f305 	asr.w	r3, r3, r5
   b95ee:	18c0      	adds	r0, r0, r3
   b95f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b95f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b95f8:	d507      	bpl.n	b960a <__adddf3+0xe6>
   b95fa:	f04f 0e00 	mov.w	lr, #0
   b95fe:	f1dc 0c00 	rsbs	ip, ip, #0
   b9602:	eb7e 0000 	sbcs.w	r0, lr, r0
   b9606:	eb6e 0101 	sbc.w	r1, lr, r1
   b960a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b960e:	d31b      	bcc.n	b9648 <__adddf3+0x124>
   b9610:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b9614:	d30c      	bcc.n	b9630 <__adddf3+0x10c>
   b9616:	0849      	lsrs	r1, r1, #1
   b9618:	ea5f 0030 	movs.w	r0, r0, rrx
   b961c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b9620:	f104 0401 	add.w	r4, r4, #1
   b9624:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b9628:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b962c:	f080 809a 	bcs.w	b9764 <__adddf3+0x240>
   b9630:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b9634:	bf08      	it	eq
   b9636:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b963a:	f150 0000 	adcs.w	r0, r0, #0
   b963e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9642:	ea41 0105 	orr.w	r1, r1, r5
   b9646:	bd30      	pop	{r4, r5, pc}
   b9648:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b964c:	4140      	adcs	r0, r0
   b964e:	eb41 0101 	adc.w	r1, r1, r1
   b9652:	3c01      	subs	r4, #1
   b9654:	bf28      	it	cs
   b9656:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b965a:	d2e9      	bcs.n	b9630 <__adddf3+0x10c>
   b965c:	f091 0f00 	teq	r1, #0
   b9660:	bf04      	itt	eq
   b9662:	4601      	moveq	r1, r0
   b9664:	2000      	moveq	r0, #0
   b9666:	fab1 f381 	clz	r3, r1
   b966a:	bf08      	it	eq
   b966c:	3320      	addeq	r3, #32
   b966e:	f1a3 030b 	sub.w	r3, r3, #11
   b9672:	f1b3 0220 	subs.w	r2, r3, #32
   b9676:	da0c      	bge.n	b9692 <__adddf3+0x16e>
   b9678:	320c      	adds	r2, #12
   b967a:	dd08      	ble.n	b968e <__adddf3+0x16a>
   b967c:	f102 0c14 	add.w	ip, r2, #20
   b9680:	f1c2 020c 	rsb	r2, r2, #12
   b9684:	fa01 f00c 	lsl.w	r0, r1, ip
   b9688:	fa21 f102 	lsr.w	r1, r1, r2
   b968c:	e00c      	b.n	b96a8 <__adddf3+0x184>
   b968e:	f102 0214 	add.w	r2, r2, #20
   b9692:	bfd8      	it	le
   b9694:	f1c2 0c20 	rsble	ip, r2, #32
   b9698:	fa01 f102 	lsl.w	r1, r1, r2
   b969c:	fa20 fc0c 	lsr.w	ip, r0, ip
   b96a0:	bfdc      	itt	le
   b96a2:	ea41 010c 	orrle.w	r1, r1, ip
   b96a6:	4090      	lslle	r0, r2
   b96a8:	1ae4      	subs	r4, r4, r3
   b96aa:	bfa2      	ittt	ge
   b96ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b96b0:	4329      	orrge	r1, r5
   b96b2:	bd30      	popge	{r4, r5, pc}
   b96b4:	ea6f 0404 	mvn.w	r4, r4
   b96b8:	3c1f      	subs	r4, #31
   b96ba:	da1c      	bge.n	b96f6 <__adddf3+0x1d2>
   b96bc:	340c      	adds	r4, #12
   b96be:	dc0e      	bgt.n	b96de <__adddf3+0x1ba>
   b96c0:	f104 0414 	add.w	r4, r4, #20
   b96c4:	f1c4 0220 	rsb	r2, r4, #32
   b96c8:	fa20 f004 	lsr.w	r0, r0, r4
   b96cc:	fa01 f302 	lsl.w	r3, r1, r2
   b96d0:	ea40 0003 	orr.w	r0, r0, r3
   b96d4:	fa21 f304 	lsr.w	r3, r1, r4
   b96d8:	ea45 0103 	orr.w	r1, r5, r3
   b96dc:	bd30      	pop	{r4, r5, pc}
   b96de:	f1c4 040c 	rsb	r4, r4, #12
   b96e2:	f1c4 0220 	rsb	r2, r4, #32
   b96e6:	fa20 f002 	lsr.w	r0, r0, r2
   b96ea:	fa01 f304 	lsl.w	r3, r1, r4
   b96ee:	ea40 0003 	orr.w	r0, r0, r3
   b96f2:	4629      	mov	r1, r5
   b96f4:	bd30      	pop	{r4, r5, pc}
   b96f6:	fa21 f004 	lsr.w	r0, r1, r4
   b96fa:	4629      	mov	r1, r5
   b96fc:	bd30      	pop	{r4, r5, pc}
   b96fe:	f094 0f00 	teq	r4, #0
   b9702:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b9706:	bf06      	itte	eq
   b9708:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b970c:	3401      	addeq	r4, #1
   b970e:	3d01      	subne	r5, #1
   b9710:	e74e      	b.n	b95b0 <__adddf3+0x8c>
   b9712:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9716:	bf18      	it	ne
   b9718:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b971c:	d029      	beq.n	b9772 <__adddf3+0x24e>
   b971e:	ea94 0f05 	teq	r4, r5
   b9722:	bf08      	it	eq
   b9724:	ea90 0f02 	teqeq	r0, r2
   b9728:	d005      	beq.n	b9736 <__adddf3+0x212>
   b972a:	ea54 0c00 	orrs.w	ip, r4, r0
   b972e:	bf04      	itt	eq
   b9730:	4619      	moveq	r1, r3
   b9732:	4610      	moveq	r0, r2
   b9734:	bd30      	pop	{r4, r5, pc}
   b9736:	ea91 0f03 	teq	r1, r3
   b973a:	bf1e      	ittt	ne
   b973c:	2100      	movne	r1, #0
   b973e:	2000      	movne	r0, #0
   b9740:	bd30      	popne	{r4, r5, pc}
   b9742:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b9746:	d105      	bne.n	b9754 <__adddf3+0x230>
   b9748:	0040      	lsls	r0, r0, #1
   b974a:	4149      	adcs	r1, r1
   b974c:	bf28      	it	cs
   b974e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b9752:	bd30      	pop	{r4, r5, pc}
   b9754:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9758:	bf3c      	itt	cc
   b975a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b975e:	bd30      	popcc	{r4, r5, pc}
   b9760:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9764:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9768:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b976c:	f04f 0000 	mov.w	r0, #0
   b9770:	bd30      	pop	{r4, r5, pc}
   b9772:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9776:	bf1a      	itte	ne
   b9778:	4619      	movne	r1, r3
   b977a:	4610      	movne	r0, r2
   b977c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9780:	bf1c      	itt	ne
   b9782:	460b      	movne	r3, r1
   b9784:	4602      	movne	r2, r0
   b9786:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b978a:	bf06      	itte	eq
   b978c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9790:	ea91 0f03 	teqeq	r1, r3
   b9794:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9798:	bd30      	pop	{r4, r5, pc}
   b979a:	bf00      	nop

000b979c <__aeabi_ui2d>:
   b979c:	f090 0f00 	teq	r0, #0
   b97a0:	bf04      	itt	eq
   b97a2:	2100      	moveq	r1, #0
   b97a4:	4770      	bxeq	lr
   b97a6:	b530      	push	{r4, r5, lr}
   b97a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b97ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b97b0:	f04f 0500 	mov.w	r5, #0
   b97b4:	f04f 0100 	mov.w	r1, #0
   b97b8:	e750      	b.n	b965c <__adddf3+0x138>
   b97ba:	bf00      	nop

000b97bc <__aeabi_i2d>:
   b97bc:	f090 0f00 	teq	r0, #0
   b97c0:	bf04      	itt	eq
   b97c2:	2100      	moveq	r1, #0
   b97c4:	4770      	bxeq	lr
   b97c6:	b530      	push	{r4, r5, lr}
   b97c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b97cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b97d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b97d4:	bf48      	it	mi
   b97d6:	4240      	negmi	r0, r0
   b97d8:	f04f 0100 	mov.w	r1, #0
   b97dc:	e73e      	b.n	b965c <__adddf3+0x138>
   b97de:	bf00      	nop

000b97e0 <__aeabi_f2d>:
   b97e0:	0042      	lsls	r2, r0, #1
   b97e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b97e6:	ea4f 0131 	mov.w	r1, r1, rrx
   b97ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b97ee:	bf1f      	itttt	ne
   b97f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b97f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b97f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b97fc:	4770      	bxne	lr
   b97fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b9802:	bf08      	it	eq
   b9804:	4770      	bxeq	lr
   b9806:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b980a:	bf04      	itt	eq
   b980c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9810:	4770      	bxeq	lr
   b9812:	b530      	push	{r4, r5, lr}
   b9814:	f44f 7460 	mov.w	r4, #896	; 0x380
   b9818:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b981c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9820:	e71c      	b.n	b965c <__adddf3+0x138>
   b9822:	bf00      	nop

000b9824 <__aeabi_ul2d>:
   b9824:	ea50 0201 	orrs.w	r2, r0, r1
   b9828:	bf08      	it	eq
   b982a:	4770      	bxeq	lr
   b982c:	b530      	push	{r4, r5, lr}
   b982e:	f04f 0500 	mov.w	r5, #0
   b9832:	e00a      	b.n	b984a <__aeabi_l2d+0x16>

000b9834 <__aeabi_l2d>:
   b9834:	ea50 0201 	orrs.w	r2, r0, r1
   b9838:	bf08      	it	eq
   b983a:	4770      	bxeq	lr
   b983c:	b530      	push	{r4, r5, lr}
   b983e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b9842:	d502      	bpl.n	b984a <__aeabi_l2d+0x16>
   b9844:	4240      	negs	r0, r0
   b9846:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b984a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b984e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9852:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b9856:	f43f aed8 	beq.w	b960a <__adddf3+0xe6>
   b985a:	f04f 0203 	mov.w	r2, #3
   b985e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9862:	bf18      	it	ne
   b9864:	3203      	addne	r2, #3
   b9866:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b986a:	bf18      	it	ne
   b986c:	3203      	addne	r2, #3
   b986e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b9872:	f1c2 0320 	rsb	r3, r2, #32
   b9876:	fa00 fc03 	lsl.w	ip, r0, r3
   b987a:	fa20 f002 	lsr.w	r0, r0, r2
   b987e:	fa01 fe03 	lsl.w	lr, r1, r3
   b9882:	ea40 000e 	orr.w	r0, r0, lr
   b9886:	fa21 f102 	lsr.w	r1, r1, r2
   b988a:	4414      	add	r4, r2
   b988c:	e6bd      	b.n	b960a <__adddf3+0xe6>
   b988e:	bf00      	nop

000b9890 <__gedf2>:
   b9890:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9894:	e006      	b.n	b98a4 <__cmpdf2+0x4>
   b9896:	bf00      	nop

000b9898 <__ledf2>:
   b9898:	f04f 0c01 	mov.w	ip, #1
   b989c:	e002      	b.n	b98a4 <__cmpdf2+0x4>
   b989e:	bf00      	nop

000b98a0 <__cmpdf2>:
   b98a0:	f04f 0c01 	mov.w	ip, #1
   b98a4:	f84d cd04 	str.w	ip, [sp, #-4]!
   b98a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b98ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b98b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b98b4:	bf18      	it	ne
   b98b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b98ba:	d01b      	beq.n	b98f4 <__cmpdf2+0x54>
   b98bc:	b001      	add	sp, #4
   b98be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b98c2:	bf0c      	ite	eq
   b98c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b98c8:	ea91 0f03 	teqne	r1, r3
   b98cc:	bf02      	ittt	eq
   b98ce:	ea90 0f02 	teqeq	r0, r2
   b98d2:	2000      	moveq	r0, #0
   b98d4:	4770      	bxeq	lr
   b98d6:	f110 0f00 	cmn.w	r0, #0
   b98da:	ea91 0f03 	teq	r1, r3
   b98de:	bf58      	it	pl
   b98e0:	4299      	cmppl	r1, r3
   b98e2:	bf08      	it	eq
   b98e4:	4290      	cmpeq	r0, r2
   b98e6:	bf2c      	ite	cs
   b98e8:	17d8      	asrcs	r0, r3, #31
   b98ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b98ee:	f040 0001 	orr.w	r0, r0, #1
   b98f2:	4770      	bx	lr
   b98f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b98f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b98fc:	d102      	bne.n	b9904 <__cmpdf2+0x64>
   b98fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b9902:	d107      	bne.n	b9914 <__cmpdf2+0x74>
   b9904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b990c:	d1d6      	bne.n	b98bc <__cmpdf2+0x1c>
   b990e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b9912:	d0d3      	beq.n	b98bc <__cmpdf2+0x1c>
   b9914:	f85d 0b04 	ldr.w	r0, [sp], #4
   b9918:	4770      	bx	lr
   b991a:	bf00      	nop

000b991c <__aeabi_cdrcmple>:
   b991c:	4684      	mov	ip, r0
   b991e:	4610      	mov	r0, r2
   b9920:	4662      	mov	r2, ip
   b9922:	468c      	mov	ip, r1
   b9924:	4619      	mov	r1, r3
   b9926:	4663      	mov	r3, ip
   b9928:	e000      	b.n	b992c <__aeabi_cdcmpeq>
   b992a:	bf00      	nop

000b992c <__aeabi_cdcmpeq>:
   b992c:	b501      	push	{r0, lr}
   b992e:	f7ff ffb7 	bl	b98a0 <__cmpdf2>
   b9932:	2800      	cmp	r0, #0
   b9934:	bf48      	it	mi
   b9936:	f110 0f00 	cmnmi.w	r0, #0
   b993a:	bd01      	pop	{r0, pc}

000b993c <__aeabi_dcmpeq>:
   b993c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9940:	f7ff fff4 	bl	b992c <__aeabi_cdcmpeq>
   b9944:	bf0c      	ite	eq
   b9946:	2001      	moveq	r0, #1
   b9948:	2000      	movne	r0, #0
   b994a:	f85d fb08 	ldr.w	pc, [sp], #8
   b994e:	bf00      	nop

000b9950 <__aeabi_dcmplt>:
   b9950:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9954:	f7ff ffea 	bl	b992c <__aeabi_cdcmpeq>
   b9958:	bf34      	ite	cc
   b995a:	2001      	movcc	r0, #1
   b995c:	2000      	movcs	r0, #0
   b995e:	f85d fb08 	ldr.w	pc, [sp], #8
   b9962:	bf00      	nop

000b9964 <__aeabi_dcmple>:
   b9964:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9968:	f7ff ffe0 	bl	b992c <__aeabi_cdcmpeq>
   b996c:	bf94      	ite	ls
   b996e:	2001      	movls	r0, #1
   b9970:	2000      	movhi	r0, #0
   b9972:	f85d fb08 	ldr.w	pc, [sp], #8
   b9976:	bf00      	nop

000b9978 <__aeabi_dcmpge>:
   b9978:	f84d ed08 	str.w	lr, [sp, #-8]!
   b997c:	f7ff ffce 	bl	b991c <__aeabi_cdrcmple>
   b9980:	bf94      	ite	ls
   b9982:	2001      	movls	r0, #1
   b9984:	2000      	movhi	r0, #0
   b9986:	f85d fb08 	ldr.w	pc, [sp], #8
   b998a:	bf00      	nop

000b998c <__aeabi_dcmpgt>:
   b998c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9990:	f7ff ffc4 	bl	b991c <__aeabi_cdrcmple>
   b9994:	bf34      	ite	cc
   b9996:	2001      	movcc	r0, #1
   b9998:	2000      	movcs	r0, #0
   b999a:	f85d fb08 	ldr.w	pc, [sp], #8
   b999e:	bf00      	nop

000b99a0 <asctime_r>:
   b99a0:	b510      	push	{r4, lr}
   b99a2:	460c      	mov	r4, r1
   b99a4:	6941      	ldr	r1, [r0, #20]
   b99a6:	6903      	ldr	r3, [r0, #16]
   b99a8:	6982      	ldr	r2, [r0, #24]
   b99aa:	b086      	sub	sp, #24
   b99ac:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b99b0:	9104      	str	r1, [sp, #16]
   b99b2:	6801      	ldr	r1, [r0, #0]
   b99b4:	9103      	str	r1, [sp, #12]
   b99b6:	6841      	ldr	r1, [r0, #4]
   b99b8:	9102      	str	r1, [sp, #8]
   b99ba:	6881      	ldr	r1, [r0, #8]
   b99bc:	9101      	str	r1, [sp, #4]
   b99be:	68c1      	ldr	r1, [r0, #12]
   b99c0:	9100      	str	r1, [sp, #0]
   b99c2:	4907      	ldr	r1, [pc, #28]	; (b99e0 <asctime_r+0x40>)
   b99c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b99c8:	440b      	add	r3, r1
   b99ca:	4906      	ldr	r1, [pc, #24]	; (b99e4 <asctime_r+0x44>)
   b99cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b99d0:	440a      	add	r2, r1
   b99d2:	4620      	mov	r0, r4
   b99d4:	4904      	ldr	r1, [pc, #16]	; (b99e8 <asctime_r+0x48>)
   b99d6:	f7fc fe3b 	bl	b6650 <siprintf>
   b99da:	4620      	mov	r0, r4
   b99dc:	b006      	add	sp, #24
   b99de:	bd10      	pop	{r4, pc}
   b99e0:	000ba99a 	.word	0x000ba99a
   b99e4:	000ba985 	.word	0x000ba985
   b99e8:	000ba965 	.word	0x000ba965

000b99ec <atoi>:
   b99ec:	220a      	movs	r2, #10
   b99ee:	2100      	movs	r1, #0
   b99f0:	f000 b962 	b.w	b9cb8 <strtol>

000b99f4 <__cxa_atexit>:
   b99f4:	b510      	push	{r4, lr}
   b99f6:	4c05      	ldr	r4, [pc, #20]	; (b9a0c <__cxa_atexit+0x18>)
   b99f8:	4613      	mov	r3, r2
   b99fa:	b12c      	cbz	r4, b9a08 <__cxa_atexit+0x14>
   b99fc:	460a      	mov	r2, r1
   b99fe:	4601      	mov	r1, r0
   b9a00:	2002      	movs	r0, #2
   b9a02:	f3af 8000 	nop.w
   b9a06:	bd10      	pop	{r4, pc}
   b9a08:	4620      	mov	r0, r4
   b9a0a:	e7fc      	b.n	b9a06 <__cxa_atexit+0x12>
   b9a0c:	00000000 	.word	0x00000000

000b9a10 <ldiv>:
   b9a10:	2900      	cmp	r1, #0
   b9a12:	b510      	push	{r4, lr}
   b9a14:	fb91 f4f2 	sdiv	r4, r1, r2
   b9a18:	fb02 1314 	mls	r3, r2, r4, r1
   b9a1c:	db06      	blt.n	b9a2c <ldiv+0x1c>
   b9a1e:	2b00      	cmp	r3, #0
   b9a20:	da01      	bge.n	b9a26 <ldiv+0x16>
   b9a22:	3401      	adds	r4, #1
   b9a24:	1a9b      	subs	r3, r3, r2
   b9a26:	e9c0 4300 	strd	r4, r3, [r0]
   b9a2a:	bd10      	pop	{r4, pc}
   b9a2c:	2b00      	cmp	r3, #0
   b9a2e:	bfc4      	itt	gt
   b9a30:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   b9a34:	189b      	addgt	r3, r3, r2
   b9a36:	e7f6      	b.n	b9a26 <ldiv+0x16>

000b9a38 <memcmp>:
   b9a38:	b510      	push	{r4, lr}
   b9a3a:	3901      	subs	r1, #1
   b9a3c:	4402      	add	r2, r0
   b9a3e:	4290      	cmp	r0, r2
   b9a40:	d101      	bne.n	b9a46 <memcmp+0xe>
   b9a42:	2000      	movs	r0, #0
   b9a44:	e005      	b.n	b9a52 <memcmp+0x1a>
   b9a46:	7803      	ldrb	r3, [r0, #0]
   b9a48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9a4c:	42a3      	cmp	r3, r4
   b9a4e:	d001      	beq.n	b9a54 <memcmp+0x1c>
   b9a50:	1b18      	subs	r0, r3, r4
   b9a52:	bd10      	pop	{r4, pc}
   b9a54:	3001      	adds	r0, #1
   b9a56:	e7f2      	b.n	b9a3e <memcmp+0x6>

000b9a58 <memcpy>:
   b9a58:	440a      	add	r2, r1
   b9a5a:	4291      	cmp	r1, r2
   b9a5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b9a60:	d100      	bne.n	b9a64 <memcpy+0xc>
   b9a62:	4770      	bx	lr
   b9a64:	b510      	push	{r4, lr}
   b9a66:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9a6e:	4291      	cmp	r1, r2
   b9a70:	d1f9      	bne.n	b9a66 <memcpy+0xe>
   b9a72:	bd10      	pop	{r4, pc}

000b9a74 <memmove>:
   b9a74:	4288      	cmp	r0, r1
   b9a76:	b510      	push	{r4, lr}
   b9a78:	eb01 0402 	add.w	r4, r1, r2
   b9a7c:	d902      	bls.n	b9a84 <memmove+0x10>
   b9a7e:	4284      	cmp	r4, r0
   b9a80:	4623      	mov	r3, r4
   b9a82:	d807      	bhi.n	b9a94 <memmove+0x20>
   b9a84:	1e43      	subs	r3, r0, #1
   b9a86:	42a1      	cmp	r1, r4
   b9a88:	d008      	beq.n	b9a9c <memmove+0x28>
   b9a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9a8e:	f803 2f01 	strb.w	r2, [r3, #1]!
   b9a92:	e7f8      	b.n	b9a86 <memmove+0x12>
   b9a94:	4402      	add	r2, r0
   b9a96:	4601      	mov	r1, r0
   b9a98:	428a      	cmp	r2, r1
   b9a9a:	d100      	bne.n	b9a9e <memmove+0x2a>
   b9a9c:	bd10      	pop	{r4, pc}
   b9a9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b9aa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b9aa6:	e7f7      	b.n	b9a98 <memmove+0x24>

000b9aa8 <memset>:
   b9aa8:	4402      	add	r2, r0
   b9aaa:	4603      	mov	r3, r0
   b9aac:	4293      	cmp	r3, r2
   b9aae:	d100      	bne.n	b9ab2 <memset+0xa>
   b9ab0:	4770      	bx	lr
   b9ab2:	f803 1b01 	strb.w	r1, [r3], #1
   b9ab6:	e7f9      	b.n	b9aac <memset+0x4>

000b9ab8 <srand>:
   b9ab8:	b538      	push	{r3, r4, r5, lr}
   b9aba:	4b10      	ldr	r3, [pc, #64]	; (b9afc <srand+0x44>)
   b9abc:	681d      	ldr	r5, [r3, #0]
   b9abe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9ac0:	4604      	mov	r4, r0
   b9ac2:	b9b3      	cbnz	r3, b9af2 <srand+0x3a>
   b9ac4:	2018      	movs	r0, #24
   b9ac6:	f7fc fdab 	bl	b6620 <malloc>
   b9aca:	4602      	mov	r2, r0
   b9acc:	63a8      	str	r0, [r5, #56]	; 0x38
   b9ace:	b920      	cbnz	r0, b9ada <srand+0x22>
   b9ad0:	4b0b      	ldr	r3, [pc, #44]	; (b9b00 <srand+0x48>)
   b9ad2:	480c      	ldr	r0, [pc, #48]	; (b9b04 <srand+0x4c>)
   b9ad4:	2142      	movs	r1, #66	; 0x42
   b9ad6:	f7fc fddb 	bl	b6690 <__assert_func>
   b9ada:	490b      	ldr	r1, [pc, #44]	; (b9b08 <srand+0x50>)
   b9adc:	4b0b      	ldr	r3, [pc, #44]	; (b9b0c <srand+0x54>)
   b9ade:	e9c0 1300 	strd	r1, r3, [r0]
   b9ae2:	4b0b      	ldr	r3, [pc, #44]	; (b9b10 <srand+0x58>)
   b9ae4:	6083      	str	r3, [r0, #8]
   b9ae6:	230b      	movs	r3, #11
   b9ae8:	8183      	strh	r3, [r0, #12]
   b9aea:	2100      	movs	r1, #0
   b9aec:	2001      	movs	r0, #1
   b9aee:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9af2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9af4:	2200      	movs	r2, #0
   b9af6:	611c      	str	r4, [r3, #16]
   b9af8:	615a      	str	r2, [r3, #20]
   b9afa:	bd38      	pop	{r3, r4, r5, pc}
   b9afc:	2003d9f8 	.word	0x2003d9f8
   b9b00:	000ba9be 	.word	0x000ba9be
   b9b04:	000ba9d5 	.word	0x000ba9d5
   b9b08:	abcd330e 	.word	0xabcd330e
   b9b0c:	e66d1234 	.word	0xe66d1234
   b9b10:	0005deec 	.word	0x0005deec

000b9b14 <strcmp>:
   b9b14:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9b18:	f811 3b01 	ldrb.w	r3, [r1], #1
   b9b1c:	2a01      	cmp	r2, #1
   b9b1e:	bf28      	it	cs
   b9b20:	429a      	cmpcs	r2, r3
   b9b22:	d0f7      	beq.n	b9b14 <strcmp>
   b9b24:	1ad0      	subs	r0, r2, r3
   b9b26:	4770      	bx	lr

000b9b28 <strcpy>:
   b9b28:	4603      	mov	r3, r0
   b9b2a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9b2e:	f803 2b01 	strb.w	r2, [r3], #1
   b9b32:	2a00      	cmp	r2, #0
   b9b34:	d1f9      	bne.n	b9b2a <strcpy+0x2>
   b9b36:	4770      	bx	lr

000b9b38 <strlen>:
   b9b38:	4603      	mov	r3, r0
   b9b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9b3e:	2a00      	cmp	r2, #0
   b9b40:	d1fb      	bne.n	b9b3a <strlen+0x2>
   b9b42:	1a18      	subs	r0, r3, r0
   b9b44:	3801      	subs	r0, #1
   b9b46:	4770      	bx	lr

000b9b48 <strncpy>:
   b9b48:	b510      	push	{r4, lr}
   b9b4a:	3901      	subs	r1, #1
   b9b4c:	4603      	mov	r3, r0
   b9b4e:	b132      	cbz	r2, b9b5e <strncpy+0x16>
   b9b50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9b54:	f803 4b01 	strb.w	r4, [r3], #1
   b9b58:	3a01      	subs	r2, #1
   b9b5a:	2c00      	cmp	r4, #0
   b9b5c:	d1f7      	bne.n	b9b4e <strncpy+0x6>
   b9b5e:	441a      	add	r2, r3
   b9b60:	2100      	movs	r1, #0
   b9b62:	4293      	cmp	r3, r2
   b9b64:	d100      	bne.n	b9b68 <strncpy+0x20>
   b9b66:	bd10      	pop	{r4, pc}
   b9b68:	f803 1b01 	strb.w	r1, [r3], #1
   b9b6c:	e7f9      	b.n	b9b62 <strncpy+0x1a>

000b9b6e <strnlen>:
   b9b6e:	b510      	push	{r4, lr}
   b9b70:	4602      	mov	r2, r0
   b9b72:	4401      	add	r1, r0
   b9b74:	428a      	cmp	r2, r1
   b9b76:	4613      	mov	r3, r2
   b9b78:	d003      	beq.n	b9b82 <strnlen+0x14>
   b9b7a:	781c      	ldrb	r4, [r3, #0]
   b9b7c:	3201      	adds	r2, #1
   b9b7e:	2c00      	cmp	r4, #0
   b9b80:	d1f8      	bne.n	b9b74 <strnlen+0x6>
   b9b82:	1a18      	subs	r0, r3, r0
   b9b84:	bd10      	pop	{r4, pc}

000b9b86 <strstr>:
   b9b86:	780a      	ldrb	r2, [r1, #0]
   b9b88:	b570      	push	{r4, r5, r6, lr}
   b9b8a:	b96a      	cbnz	r2, b9ba8 <strstr+0x22>
   b9b8c:	bd70      	pop	{r4, r5, r6, pc}
   b9b8e:	429a      	cmp	r2, r3
   b9b90:	d109      	bne.n	b9ba6 <strstr+0x20>
   b9b92:	460c      	mov	r4, r1
   b9b94:	4605      	mov	r5, r0
   b9b96:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   b9b9a:	2b00      	cmp	r3, #0
   b9b9c:	d0f6      	beq.n	b9b8c <strstr+0x6>
   b9b9e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   b9ba2:	429e      	cmp	r6, r3
   b9ba4:	d0f7      	beq.n	b9b96 <strstr+0x10>
   b9ba6:	3001      	adds	r0, #1
   b9ba8:	7803      	ldrb	r3, [r0, #0]
   b9baa:	2b00      	cmp	r3, #0
   b9bac:	d1ef      	bne.n	b9b8e <strstr+0x8>
   b9bae:	4618      	mov	r0, r3
   b9bb0:	e7ec      	b.n	b9b8c <strstr+0x6>
	...

000b9bb4 <_strtol_l.constprop.0>:
   b9bb4:	2b01      	cmp	r3, #1
   b9bb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9bba:	d001      	beq.n	b9bc0 <_strtol_l.constprop.0+0xc>
   b9bbc:	2b24      	cmp	r3, #36	; 0x24
   b9bbe:	d906      	bls.n	b9bce <_strtol_l.constprop.0+0x1a>
   b9bc0:	f7fc fd5e 	bl	b6680 <__errno>
   b9bc4:	2316      	movs	r3, #22
   b9bc6:	6003      	str	r3, [r0, #0]
   b9bc8:	2000      	movs	r0, #0
   b9bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9bce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9cb4 <_strtol_l.constprop.0+0x100>
   b9bd2:	460d      	mov	r5, r1
   b9bd4:	462e      	mov	r6, r5
   b9bd6:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9bda:	f814 700c 	ldrb.w	r7, [r4, ip]
   b9bde:	f017 0708 	ands.w	r7, r7, #8
   b9be2:	d1f7      	bne.n	b9bd4 <_strtol_l.constprop.0+0x20>
   b9be4:	2c2d      	cmp	r4, #45	; 0x2d
   b9be6:	d132      	bne.n	b9c4e <_strtol_l.constprop.0+0x9a>
   b9be8:	782c      	ldrb	r4, [r5, #0]
   b9bea:	2701      	movs	r7, #1
   b9bec:	1cb5      	adds	r5, r6, #2
   b9bee:	2b00      	cmp	r3, #0
   b9bf0:	d05b      	beq.n	b9caa <_strtol_l.constprop.0+0xf6>
   b9bf2:	2b10      	cmp	r3, #16
   b9bf4:	d109      	bne.n	b9c0a <_strtol_l.constprop.0+0x56>
   b9bf6:	2c30      	cmp	r4, #48	; 0x30
   b9bf8:	d107      	bne.n	b9c0a <_strtol_l.constprop.0+0x56>
   b9bfa:	782c      	ldrb	r4, [r5, #0]
   b9bfc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b9c00:	2c58      	cmp	r4, #88	; 0x58
   b9c02:	d14d      	bne.n	b9ca0 <_strtol_l.constprop.0+0xec>
   b9c04:	786c      	ldrb	r4, [r5, #1]
   b9c06:	2310      	movs	r3, #16
   b9c08:	3502      	adds	r5, #2
   b9c0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b9c0e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9c12:	f04f 0c00 	mov.w	ip, #0
   b9c16:	fbb8 f9f3 	udiv	r9, r8, r3
   b9c1a:	4666      	mov	r6, ip
   b9c1c:	fb03 8a19 	mls	sl, r3, r9, r8
   b9c20:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b9c24:	f1be 0f09 	cmp.w	lr, #9
   b9c28:	d816      	bhi.n	b9c58 <_strtol_l.constprop.0+0xa4>
   b9c2a:	4674      	mov	r4, lr
   b9c2c:	42a3      	cmp	r3, r4
   b9c2e:	dd24      	ble.n	b9c7a <_strtol_l.constprop.0+0xc6>
   b9c30:	f1bc 0f00 	cmp.w	ip, #0
   b9c34:	db1e      	blt.n	b9c74 <_strtol_l.constprop.0+0xc0>
   b9c36:	45b1      	cmp	r9, r6
   b9c38:	d31c      	bcc.n	b9c74 <_strtol_l.constprop.0+0xc0>
   b9c3a:	d101      	bne.n	b9c40 <_strtol_l.constprop.0+0x8c>
   b9c3c:	45a2      	cmp	sl, r4
   b9c3e:	db19      	blt.n	b9c74 <_strtol_l.constprop.0+0xc0>
   b9c40:	fb06 4603 	mla	r6, r6, r3, r4
   b9c44:	f04f 0c01 	mov.w	ip, #1
   b9c48:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9c4c:	e7e8      	b.n	b9c20 <_strtol_l.constprop.0+0x6c>
   b9c4e:	2c2b      	cmp	r4, #43	; 0x2b
   b9c50:	bf04      	itt	eq
   b9c52:	782c      	ldrbeq	r4, [r5, #0]
   b9c54:	1cb5      	addeq	r5, r6, #2
   b9c56:	e7ca      	b.n	b9bee <_strtol_l.constprop.0+0x3a>
   b9c58:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9c5c:	f1be 0f19 	cmp.w	lr, #25
   b9c60:	d801      	bhi.n	b9c66 <_strtol_l.constprop.0+0xb2>
   b9c62:	3c37      	subs	r4, #55	; 0x37
   b9c64:	e7e2      	b.n	b9c2c <_strtol_l.constprop.0+0x78>
   b9c66:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9c6a:	f1be 0f19 	cmp.w	lr, #25
   b9c6e:	d804      	bhi.n	b9c7a <_strtol_l.constprop.0+0xc6>
   b9c70:	3c57      	subs	r4, #87	; 0x57
   b9c72:	e7db      	b.n	b9c2c <_strtol_l.constprop.0+0x78>
   b9c74:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9c78:	e7e6      	b.n	b9c48 <_strtol_l.constprop.0+0x94>
   b9c7a:	f1bc 0f00 	cmp.w	ip, #0
   b9c7e:	da05      	bge.n	b9c8c <_strtol_l.constprop.0+0xd8>
   b9c80:	2322      	movs	r3, #34	; 0x22
   b9c82:	6003      	str	r3, [r0, #0]
   b9c84:	4646      	mov	r6, r8
   b9c86:	b942      	cbnz	r2, b9c9a <_strtol_l.constprop.0+0xe6>
   b9c88:	4630      	mov	r0, r6
   b9c8a:	e79e      	b.n	b9bca <_strtol_l.constprop.0+0x16>
   b9c8c:	b107      	cbz	r7, b9c90 <_strtol_l.constprop.0+0xdc>
   b9c8e:	4276      	negs	r6, r6
   b9c90:	2a00      	cmp	r2, #0
   b9c92:	d0f9      	beq.n	b9c88 <_strtol_l.constprop.0+0xd4>
   b9c94:	f1bc 0f00 	cmp.w	ip, #0
   b9c98:	d000      	beq.n	b9c9c <_strtol_l.constprop.0+0xe8>
   b9c9a:	1e69      	subs	r1, r5, #1
   b9c9c:	6011      	str	r1, [r2, #0]
   b9c9e:	e7f3      	b.n	b9c88 <_strtol_l.constprop.0+0xd4>
   b9ca0:	2430      	movs	r4, #48	; 0x30
   b9ca2:	2b00      	cmp	r3, #0
   b9ca4:	d1b1      	bne.n	b9c0a <_strtol_l.constprop.0+0x56>
   b9ca6:	2308      	movs	r3, #8
   b9ca8:	e7af      	b.n	b9c0a <_strtol_l.constprop.0+0x56>
   b9caa:	2c30      	cmp	r4, #48	; 0x30
   b9cac:	d0a5      	beq.n	b9bfa <_strtol_l.constprop.0+0x46>
   b9cae:	230a      	movs	r3, #10
   b9cb0:	e7ab      	b.n	b9c0a <_strtol_l.constprop.0+0x56>
   b9cb2:	bf00      	nop
   b9cb4:	000baa2f 	.word	0x000baa2f

000b9cb8 <strtol>:
   b9cb8:	4613      	mov	r3, r2
   b9cba:	460a      	mov	r2, r1
   b9cbc:	4601      	mov	r1, r0
   b9cbe:	4802      	ldr	r0, [pc, #8]	; (b9cc8 <strtol+0x10>)
   b9cc0:	6800      	ldr	r0, [r0, #0]
   b9cc2:	f7ff bf77 	b.w	b9bb4 <_strtol_l.constprop.0>
   b9cc6:	bf00      	nop
   b9cc8:	2003d9f8 	.word	0x2003d9f8

000b9ccc <dynalib_user>:
   b9ccc:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   b9cdc:	00000000 312e3031 312e3832 3939312e     ....10.128.1.199
   b9cec:	72002f00 726f6365 676e6964 65746e49     ./.recordingInte
   b9cfc:	6c617672 6925203a 70657200 6974726f     rval: %i.reporti
   b9d0c:	6e49676e 76726574 203a6c61 44006925     ngInterval: %i.D
   b9d1c:	20444953 20746f6e 726f7473 69206465     SID not stored i
   b9d2c:	4545206e 4d4f5250 4c42202e 6f632045     n EEPROM. BLE co
   b9d3c:	6769666e 71657220 65726975 69570064     nfig required.Wi
   b9d4c:	66206946 656c6961 6f742064 6e6f6320     Fi failed to con
   b9d5c:	7463656e 6164202c 6e206174 7220746f     nect, data not r
   b9d6c:	726f7065 00646574 69466957 6e6f6320     eported.WiFi con
   b9d7c:	7463656e 202c6465 6f706572 6e697472     nected, reportin
   b9d8c:	61642067 7b006174 74616422 5b3a2261     g data.{"data":[
   b9d9c:	007d5d00 54534f50 61745300 3a737574     .]}.POST.Status:
   b9dac:	65520020 646f4271 00203a79 7364227b      .ReqBody: .{"ds
   b9dbc:	3a226469 22202c00 756c6176 003a2265     id":., "value":.
   b9dcc:	7422202c 73656d69 706d6174 7d003a22     , "timestamp":.}
   b9ddc:	6146002c 64656c69 206f7420 74696e69     ,.Failed to init
   b9dec:	696c6169 4c20657a 44335349 69640048     ialize LIS3DH.di
   b9dfc:	6e6f6373 7463656e 57006465 20694669     sconnected.WiFi 
   b9e0c:	6e6e6f63 65746365 73202c64 69636e79     connected, synci
   b9e1c:	7420676e 00656d69 72727543 20746e65     ng time.Current 
   b9e2c:	656d6974 3a736920 00732520 69466957     time is: %s.WiFi
   b9e3c:	69616620 2064656c 63206f74 656e6e6f      failed to conne
   b9e4c:	202c7463 70696b73 676e6970 6d697420     ct, skipping tim
   b9e5c:	79732065 7268636e 7a696e6f 6f697461     e synchronizatio
   b9e6c:	6572006e 74726f70 65726854 42006461     n.reportThread.B
   b9e7c:	4157454c 42005449 6320454c 656e6e6f     LEWAIT.BLE conne
   b9e8c:	64657463 454c4200 746f6e20 6e6f6320     cted.BLE not con
   b9e9c:	7463656e 202c6465 746e6f63 69756e69     nected, continui
   b9eac:	7720676e 20687469 726f7473 73206465     ng with stored s
   b9ebc:	69747465 2e73676e 656c6200 74696157     ettings..bleWait
   b9ecc:	43726f46 69666e6f 65520067 64726f63     ForConfig.Record
   b9edc:	20676e69 65646e69 25203a78 65720069     ing index: %i.re
   b9eec:	73657571 676e6974 79617020 64616f6c     questing payload
   b9efc:	65636341 6f4c7373 70006b63 6f6c7961     AccessLock.paylo
   b9f0c:	63416461 73736563 6b636f4c 6c657220     adAccessLock rel
   b9f1c:	65736165 79622064 43455220 4944524f     eased by RECORDI
   b9f2c:	4600474e 74737269 61657220 676e6964     NG.First reading
   b9f3c:	72430a00 6e656465 6c616974 72612073     ..Credentials ar
   b9f4c:	75632065 6e657272 20796c74 726f7473     e currently stor
   b9f5c:	66206465 0a3a726f 0a2c005b 450a5d00     ed for:.[.,..].E
   b9f6c:	7265746e 74656e20 6b726f77 49535320     nter network SSI
   b9f7c:	62282044 6b6e616c 206f7420 70696b73     D (blank to skip
   b9f8c:	6327202c 7261656c 6f742027 73657220     , 'clear' to res
   b9f9c:	63207465 65646572 6169746e 3a29736c     et credentials):
   b9fac:	430a0020 65727275 4420746e 20444953      ..Current DSID 
   b9fbc:	5b207369 450a5d00 7265746e 76656420     is [.].Enter dev
   b9fcc:	20656369 44495344 6c622820 206b6e61     ice DSID (blank 
   b9fdc:	73206f74 2970696b 6300203a 7261656c     to skip): .clear
   b9fec:	6e450a00 20726574 7774656e 206b726f     ..Enter network 
   b9ffc:	73736170 64726f77 0a00203a 6572430a     password: ...Cre
   ba00c:	746e6564 736c6169 74657320 74697720     dentials set wit
   ba01c:	73732068 203a6469 61700a00 6f777373     h ssid: ..passwo
   ba02c:	203a6472 000a0a00 746e450a 27207265     rd: .....Enter '
   ba03c:	74736574 6f742027 73657420 72632074     test' to test cr
   ba04c:	6e656465 6c616974 62282073 6b6e616c     edentials (blank
   ba05c:	206f7420 70696b73 00203a29 74736574      to skip): .test
   ba06c:	6d697400 74756f65 63755300 73736563     .timeout.Success
   ba07c:	45000a21 524f5252 6957203a 63206946     !..ERROR: WiFi c
   ba08c:	656e6e6f 6f697463 6974206e 756f656d     onnection timeou
   ba09c:	64000a74 20646973 65746e65 00646572     t..dsid entered.
   ba0ac:	64697364 0a00203a 72727543 20746e65     dsid: ..Current 
   ba0bc:	756c6176 6f662065 61642072 63206174     value for data c
   ba0cc:	656c6c6f 6f697463 6e69206e 76726574     ollection interv
   ba0dc:	69206c61 005b2073 6e450a5d 20726574     al is [.].Enter 
   ba0ec:	656d6974 74656220 6e656577 74616420     time between dat
   ba0fc:	6f632061 63656c6c 6e6f6974 20736120     a collection as 
   ba10c:	69206e61 6765746e 69207265 696d206e     an integer in mi
   ba11c:	73696c6c 6e6f6365 28207364 6e616c62     lliseconds (blan
   ba12c:	6f74206b 696b7320 203a2970 75430a00     k to skip): ..Cu
   ba13c:	6e657272 61762074 2065756c 20726f66     rrent value for 
   ba14c:	69466957 6e6f6320 7463656e 206e6f69     WiFi connection 
   ba15c:	65746e69 6c617672 20736920 0a5d005b     interval is [.].
   ba16c:	65746e45 69742072 6220656d 65777465     Enter time betwe
   ba17c:	57206e65 20694669 6e6e6f63 69746365     en WiFi connecti
   ba18c:	20736e6f 61207361 6e69206e 65676574     ons as an intege
   ba19c:	6e692072 63657320 73646e6f 6c622820     r in seconds (bl
   ba1ac:	206b6e61 73206f74 2970696b 0a00203a     ank to skip): ..
   ba1bc:	65746e45 6f272072 20276174 77206f74     Enter 'ota' to w
   ba1cc:	20746961 20726f66 2041544f 61647075     ait for OTA upda
   ba1dc:	28206574 6e616c62 6f74206b 696b7320     te (blank to ski
   ba1ec:	203a2970 61746f00 46695700 6f632069     p): .ota.WiFi co
   ba1fc:	63656e6e 2c646574 61776120 6e697469     nnected, awaitin
   ba20c:	70752067 65746164 77410a00 69746961     g update..Awaiti
   ba21c:	4f20676e 75204154 74616470 45360065     ng OTA update.6E
   ba22c:	30303034 422d3130 2d334135 33393346     400001-B5A3-F393
   ba23c:	4130452d 35452d39 34324530 41434344     -E0A9-E50E24DCCA
   ba24c:	36004539 30303445 2d323030 33413542     9E.6E400002-B5A3
   ba25c:	3933462d 30452d33 452d3941 32453035     -F393-E0A9-E50E2
   ba26c:	43434434 00453941 30344536 33303030     4DCCA9E.6E400003
   ba27c:	4135422d 33462d33 452d3339 2d394130     -B5A3-F393-E0A9-
   ba28c:	45303545 43443432 45394143 00787400     E50E24DCCA9E.tx.
   ba29c:	41007872 70656363 70610074 63696c70     rx.Accept.applic
   ba2ac:	6f697461 736a2f6e 43006e6f 65746e6f     ation/json.Conte
   ba2bc:	542d746e 00657079                       nt-Type.

000ba2c4 <_ZTV15Adafruit_LIS3DH>:
	...
   ba2cc:	000b40b3 000b52ed 000b5521 000b58fd     .@...R..!U...X..
   ba2dc:	000b5525 70747448 65696c43 093e746e     %U..HttpClient>.
   ba2ec:	6e6e6f43 69746365 7420676e 00203a6f     Connecting to: .
   ba2fc:	70747448 65696c43 093e746e 6e6e6f43     HttpClient>.Conn
   ba30c:	69746365 7420676e 5049206f 2000203a     ecting to IP: . 
   ba31c:	50545448 302e312f 48000a0d 43707474     HTTP/1.0...HttpC
   ba32c:	6e65696c 53093e74 74726174 20666f20     lient>.Start of 
   ba33c:	50545448 71655220 74736575 6c63002e     HTTP Request..cl
   ba34c:	0065736f 6e6e6f43 69746365 48006e6f     ose.Connection.H
   ba35c:	43707474 6e65696c 43093e74 656e6e6f     ttpClient>.Conne
   ba36c:	6f697463 6166206e 64656c69 4f48002e     ction failed..HO
   ba37c:	43005453 65746e6f 4c2d746e 74676e65     ST.Content-Lengt
   ba38c:	74480068 6c437074 746e6569 6e45093e     h.HttpClient>.En
   ba39c:	666f2064 54544820 65522050 73657571     d of HTTP Reques
   ba3ac:	0d002e74 7474480a 696c4370 3e746e65     t....HttpClient>
   ba3bc:	63655209 69766965 5420676e 74205043     .Receiving TCP t
   ba3cc:	736e6172 69746361 6f206e6f 20002066     ransaction of . 
   ba3dc:	65747962 48002e73 43707474 6e65696c     bytes..HttpClien
   ba3ec:	45093e74 726f7272 6552203a 6e6f7073     t>.Error: Respon
   ba3fc:	62206573 2079646f 6772616c 74207265     se body larger t
   ba40c:	206e6168 66667562 002e7265 74480a0d     han buffer....Ht
   ba41c:	6c437074 746e6569 6e45093e 666f2064     tpClient>.End of
   ba42c:	50435420 61727420 6361736e 6e6f6974      TCP transaction
   ba43c:	0a0d002e 70747448 65696c43 093e746e     ....HttpClient>.
   ba44c:	6f727245 54203a72 6f656d69 77207475     Error: Timeout w
   ba45c:	656c6968 61657220 676e6964 73657220     hile reading res
   ba46c:	736e6f70 0d002e65 7474480a 696c4370     ponse....HttpCli
   ba47c:	3e746e65 646e4509 20666f20 50545448     ent>.End of HTTP
   ba48c:	73655220 736e6f70 00282065 2e29736d      Response (.ms).
   ba49c:	74744800 696c4370 3e746e65 61745309     .HttpClient>.Sta
   ba4ac:	20737574 65646f43 0d00203a 000a0d0a     tus Code: ......
   ba4bc:	70747448 65696c43 093e746e 6f727245     HttpClient>.Erro
   ba4cc:	43203a72 74276e61 6e696620 54482064     r: Can't find HT
   ba4dc:	72205054 6f707365 2065736e 79646f62     TP response body
   ba4ec:	6977002e 676e6972 656c622e 61745300     ..wiring.ble.Sta
   ba4fc:	64207472 6f637369 69726576 7320676e     rt discovering s
   ba50c:	69767265 2e736563 65655000 65642072     ervices..Peer de
   ba51c:	65636976 20736920 7373696d 21676e69     vice is missing!
   ba52c:	69614600 2064656c 61206f74 6e657070     .Failed to appen
   ba53c:	65702064 43207265 72746e65 64206c61     d peer Central d
   ba54c:	63697665 43002e65 656e6e6f 64657463     evice..Connected
   ba55c:	20796220 746e6543 206c6172 69766564      by Central devi
   ba56c:	002e6563 63736944 656e6e6f 64657463     ce..Disconnected
   ba57c:	20796220 6f6d6572 64206574 63697665      by remote devic
   ba58c:	44002e65 696c7075 65746163 68632064     e..Duplicated ch
   ba59c:	63617261 69726574 63697473 6e616320     aracteristic can
   ba5ac:	20746f6e 61206562 64656464 6146002e     not be added..Fa
   ba5bc:	64656c69 206f7420 65707061 6c20646e     iled to append l
   ba5cc:	6c61636f 61686320 74636172 73697265     ocal characteris
   ba5dc:	2e636974 00000000                       tic.....

000ba5e4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba5ec:	000b66cd 000b6731 000b68f7 000b675b     .f..1g...h..[g..
   ba5fc:	000b66d1                                .f..

000ba600 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba608:	000b66c9 000b673f 000b66cb 000b6761     .f..?g...f..ag..
   ba618:	000b66f1                                .f..

000ba61c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba624:	000b66c7 000b674d 000b7159 000b6767     .f..Mg..Yq..gg..
   ba634:	000b6711                                .g..

000ba638 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   ba644:	34fb0000 00805f9b 10008000 00000000     ...4._..........
	...

000ba656 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   ba656:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000ba666 <_ZN8particle7BleUuid9BASE_UUIDE>:
   ba666:	5f9b34fb 80000080 00001000 00000000     .4._............
	...

000ba678 <_ZTVN5spark13EthernetClassE>:
	...
   ba680:	000b7bb7 000b7bad 000b7ba3 000b7b99     .{...{...{...{..
   ba690:	000b7b8d 000b7b81 000b7e3d 000b7e45     .{...{..=~..E~..
   ba6a0:	000b7b75 000b7b6d 000b7b63 000b7b59     u{..m{..c{..Y{..
   ba6b0:	000b7e75                                u~..

000ba6b4 <_ZTV7TwoWire>:
	...
   ba6bc:	000b7bd5 000b7c1f 000b7bf7 000b7bd7     .{...|...{...{..
   ba6cc:	000b7bff 000b7c07 000b7c0f 000b7c17     .{...|...|...|..

000ba6dc <_ZTV9IPAddress>:
	...
   ba6e4:	000b7ce1 000b7cd1 000b7cd3 00707061     .|...|...|..app.

000ba6f4 <_ZTVN5spark12NetworkClassE>:
	...
   ba6fc:	000b7dfd 000b7e07 000b7e11 000b7e1b     .}...~...~...~..
   ba70c:	000b7e25 000b7e31 000b7e3d 000b7e45     %~..1~..=~..E~..
   ba71c:	000b7e4d 000b7e59 000b7e61 000b7e6b     M~..Y~..a~..k~..
   ba72c:	000b7e75                                u~..

000ba730 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   ba730:	18100800 38302820 69726977 7200676e     .... (08wiring.r
   ba740:	20766365 6f727265 203d2072 00006425     ecv error = %d..

000ba750 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba758:	000b85d5 000b85f9 000b8b2b 000b8607     ........+.......
   ba768:	000b85d9                                ....

000ba76c <_ZTV9TCPClient>:
	...
   ba774:	000b8685 000b86b9 000b8551 000b856b     ........Q...k...
   ba784:	000b89c1 000b8595 000b8837 000b85c9     ........7.......
   ba794:	000b88c9 000b8709 000b8865 000b8a75     ........e...u...
   ba7a4:	000b8805 000b85cb 000b857d 000b860d     ........}.......
   ba7b4:	000b86e9 252d5925 64252d6d 3a482554     ....%Y-%m-%dT%H:
   ba7c4:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000ba7d4 <_ZTV11USARTSerial>:
	...
   ba7dc:	000b8c35 000b8ca1 000b8c79 000b7f61     5.......y...a...
   ba7ec:	000b8c49 000b8c65 000b8c57 000b8c73     I...e...W...s...
   ba7fc:	000b8c37 000b8c3b                       7...;...

000ba804 <_ZTV9USBSerial>:
	...
   ba80c:	000b8d35 000b8d9d 000b8d73 000b7f61     5.......s...a...
   ba81c:	000b8d65 000b8d37 000b8d47 000b8d97     e...7...G.......
   ba82c:	000b8d57 000b8d31                       W...1...

000ba834 <_ZTVN5spark9WiFiClassE>:
	...
   ba83c:	000b41c1 000b8ea1 000b8e97 000b41cb     .A...........A..
   ba84c:	000b41a9 000b41b5 000b7e3d 000b7e45     .A...A..=~..E~..
   ba85c:	000b8e8b 000b8e83 000b8e79 000b8e6f     ........y...o...
   ba86c:	000b7e75                                u~..

000ba870 <_ZSt7nothrow>:
	...

000ba871 <_ZTSSt19_Sp_make_shared_tag>:
   ba871:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   ba881:	5f646572 00676174                        red_tag....

000ba88c <_ZTISt19_Sp_make_shared_tag>:
   ba88c:	000ba8cc 000ba871                       ....q...

000ba894 <_ZTIN10__cxxabiv117__class_type_infoE>:
   ba894:	000ba92c 000ba8a0 000ba950              ,.......P...

000ba8a0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   ba8a0:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   ba8b0:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   ba8c0:	00000045                                E...

000ba8c4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   ba8c4:	00000000 000ba894 000b9341 000b9355     ........A...U...
   ba8d4:	000b94e9 000b94e9 000b93bf 000b9301     ................
   ba8e4:	000b93a7 000b9369 000b9333              ....i...3...

000ba8f0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   ba8f0:	000ba92c 000ba8fc 000ba894              ,...........

000ba8fc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   ba8fc:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   ba90c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   ba91c:	456f666e 00000000                       nfoE....

000ba924 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   ba924:	00000000 000ba8f0 000b93e9 000b93fd     ................
   ba934:	000b94e9 000b94e9 000b93bf 000b9301     ................
   ba944:	000b94bd 000b9449 000b9411              ....I.......

000ba950 <_ZTISt9type_info>:
   ba950:	000ba8cc 000ba958                       ....X...

000ba958 <_ZTSSt9type_info>:
   ba958:	74397453 5f657079 6f666e69 332e2500     St9type_info.%.3
   ba968:	2e252073 33257333 2e252064 253a6432     s %.3s%3d %.2d:%
   ba978:	3a64322e 64322e25 0a642520               .2d:%.2d %d..

000ba985 <day_name.1>:
   ba985:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   ba995:	61536972                                 riSat

000ba99a <mon_name.0>:
   ba99a:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   ba9aa:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   ba9ba:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   ba9ca:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   ba9da:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   ba9ea:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   ba9fa:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   baa0a:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   baa1a:	62696c2f 74732f63 62696c64 6e61722f     /libc/stdlib/ran
   baa2a:	00632e64                                d.c.

000baa2e <_ctype_>:
   baa2e:	20202000 20202020 28282020 20282828     .         ((((( 
   baa3e:	20202020 20202020 20202020 20202020                     
   baa4e:	10108820 10101010 10101010 10101010      ...............
   baa5e:	04040410 04040404 10040404 10101010     ................
   baa6e:	41411010 41414141 01010101 01010101     ..AAAAAA........
   baa7e:	01010101 01010101 01010101 10101010     ................
   baa8e:	42421010 42424242 02020202 02020202     ..BBBBBB........
   baa9e:	02020202 02020202 02020202 10101010     ................
   baaae:	00000020 00000000 00000000 00000000      ...............
	...

000bab2f <link_const_variable_data_end>:
	...

000bab30 <link_constructors_location>:
   bab30:	000b52fd 	.word	0x000b52fd
   bab34:	000b7b31 	.word	0x000b7b31
   bab38:	000b7bc1 	.word	0x000b7bc1
   bab3c:	000b7ded 	.word	0x000b7ded
   bab40:	000b7f4d 	.word	0x000b7f4d
   bab44:	000b80a1 	.word	0x000b80a1
   bab48:	000b8515 	.word	0x000b8515
   bab4c:	000b8c21 	.word	0x000b8c21
   bab50:	000b8ed1 	.word	0x000b8ed1

000bab54 <link_constructors_end>:
	...
