
e:/IoT/motionalysis/target/3.0.0/argon/motionalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003c44  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d7c60  000d7c60  00007c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d7c68  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  2003e53c  000d7c6c  0001e53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000024c  2003e5a4  2003e5a4  0002e5a4  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d7cd4  000d7cd4  00027cd4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d7cfc  000d7cfc  00027cfc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0019a03d  00000000  00000000  00027d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00018c8c  00000000  00000000  001c1d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000393ac  00000000  00000000  001da9c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003040  00000000  00000000  00213d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00009998  00000000  00000000  00216db5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003b7ba  00000000  00000000  0022074d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00040dbe  00000000  00000000  0025bf07  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0012ac00  00000000  00000000  0029ccc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000089dc  00000000  00000000  003c78c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fbe5 	bl	d77fc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fbed 	bl	d7818 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e53c 	.word	0x2003e53c
   d4048:	000d7c6c 	.word	0x000d7c6c
   d404c:	2003e5a4 	.word	0x2003e5a4
   d4050:	2003e5a4 	.word	0x2003e5a4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fdcb 	bl	d5bf8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d7c3c 	.word	0x000d7c3c
   d407c:	000d7c60 	.word	0x000d7c60

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b81a 	b.w	d40b8 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f82d 	bl	d40e4 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bd75 	b.w	d5b7c <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f001 ba0b 	b.w	d54ac <malloc>

000d4096 <_Znaj>:
   d4096:	f001 ba09 	b.w	d54ac <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 ba0f 	b.w	d54bc <free>

000d409e <_ZdaPv>:
   d409e:	f001 ba0d 	b.w	d54bc <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_Z8callbackPcPhj>:
  delay(1000);
}

void callback(char* topic, byte* payload, unsigned int length){
  
   d40b2:	4770      	bx	lr

000d40b4 <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   d40b4:	4770      	bx	lr
	...

000d40b8 <setup>:
void setup() {
   d40b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  lis.begin(0x18);
   d40ba:	2118      	movs	r1, #24
   d40bc:	4807      	ldr	r0, [pc, #28]	; (d40dc <setup+0x24>)
   d40be:	f000 f9f1 	bl	d44a4 <_ZN15Adafruit_LIS3DH5beginEh>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d40c2:	4668      	mov	r0, sp
   d40c4:	f001 f9e2 	bl	d548c <spark_deviceID>
  client.connect(System.deviceID());
   d40c8:	9900      	ldr	r1, [sp, #0]
   d40ca:	4805      	ldr	r0, [pc, #20]	; (d40e0 <setup+0x28>)
   d40cc:	f000 fd5a 	bl	d4b84 <_ZN4MQTT7connectEPKc>
   d40d0:	4668      	mov	r0, sp
   d40d2:	f001 fbbf 	bl	d5854 <_ZN6StringD1Ev>
}
   d40d6:	b005      	add	sp, #20
   d40d8:	f85d fb04 	ldr.w	pc, [sp], #4
   d40dc:	2003e608 	.word	0x2003e608
   d40e0:	2003e5a8 	.word	0x2003e5a8

000d40e4 <loop>:
void loop() {
   d40e4:	b530      	push	{r4, r5, lr}
  lis.read();
   d40e6:	4c2e      	ldr	r4, [pc, #184]	; (d41a0 <loop+0xbc>)
void loop() {
   d40e8:	b091      	sub	sp, #68	; 0x44
  lis.read();
   d40ea:	4620      	mov	r0, r4
   d40ec:	f000 fa2c 	bl	d4548 <_ZN15Adafruit_LIS3DH4readEv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d40f0:	492c      	ldr	r1, [pc, #176]	; (d41a4 <loop+0xc0>)
   d40f2:	a804      	add	r0, sp, #16
   d40f4:	f001 fbf9 	bl	d58ea <_ZN6StringC1EPKc>
  payload = "X: " + String(lis.x_g) + "\tY: " + String(lis.y_g) + "\tZ: " + String(lis.z_g);
   d40f8:	ed94 0a03 	vldr	s0, [r4, #12]
   d40fc:	2106      	movs	r1, #6
   d40fe:	4668      	mov	r0, sp
   d4100:	f001 fc28 	bl	d5954 <_ZN6StringC1Efi>
   d4104:	4669      	mov	r1, sp
   d4106:	a804      	add	r0, sp, #16
   d4108:	f001 fc55 	bl	d59b6 <_ZplRK15StringSumHelperRK6String>
   d410c:	4926      	ldr	r1, [pc, #152]	; (d41a8 <loop+0xc4>)
   d410e:	f001 fc5e 	bl	d59ce <_ZplRK15StringSumHelperPKc>
   d4112:	ed94 0a04 	vldr	s0, [r4, #16]
   d4116:	4605      	mov	r5, r0
   d4118:	2106      	movs	r1, #6
   d411a:	a808      	add	r0, sp, #32
   d411c:	f001 fc1a 	bl	d5954 <_ZN6StringC1Efi>
   d4120:	a908      	add	r1, sp, #32
   d4122:	4628      	mov	r0, r5
   d4124:	f001 fc47 	bl	d59b6 <_ZplRK15StringSumHelperRK6String>
   d4128:	4920      	ldr	r1, [pc, #128]	; (d41ac <loop+0xc8>)
   d412a:	f001 fc50 	bl	d59ce <_ZplRK15StringSumHelperPKc>
   d412e:	ed94 0a05 	vldr	s0, [r4, #20]
   d4132:	4c1f      	ldr	r4, [pc, #124]	; (d41b0 <loop+0xcc>)
   d4134:	4605      	mov	r5, r0
   d4136:	2106      	movs	r1, #6
   d4138:	a80c      	add	r0, sp, #48	; 0x30
   d413a:	f001 fc0b 	bl	d5954 <_ZN6StringC1Efi>
   d413e:	a90c      	add	r1, sp, #48	; 0x30
   d4140:	4628      	mov	r0, r5
   d4142:	f001 fc38 	bl	d59b6 <_ZplRK15StringSumHelperRK6String>
   d4146:	4601      	mov	r1, r0
   d4148:	4620      	mov	r0, r4
   d414a:	f001 fbe2 	bl	d5912 <_ZN6StringaSERKS_>
   d414e:	a80c      	add	r0, sp, #48	; 0x30
   d4150:	f001 fb80 	bl	d5854 <_ZN6StringD1Ev>
   d4154:	a808      	add	r0, sp, #32
   d4156:	f001 fb7d 	bl	d5854 <_ZN6StringD1Ev>
   d415a:	4668      	mov	r0, sp
   d415c:	f001 fb7a 	bl	d5854 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4160:	a804      	add	r0, sp, #16
   d4162:	f001 fb77 	bl	d5854 <_ZN6StringD1Ev>
  client.publish("test/motionalysis", payload);
   d4166:	6822      	ldr	r2, [r4, #0]
   d4168:	4912      	ldr	r1, [pc, #72]	; (d41b4 <loop+0xd0>)
   d416a:	4813      	ldr	r0, [pc, #76]	; (d41b8 <loop+0xd4>)
   d416c:	f000 fd95 	bl	d4c9a <_ZN4MQTT7publishEPKcS1_>
  if(client.isConnected()){
   d4170:	4811      	ldr	r0, [pc, #68]	; (d41b8 <loop+0xd4>)
   d4172:	f000 fc16 	bl	d49a2 <_ZN4MQTT11isConnectedEv>
   d4176:	b140      	cbz	r0, d418a <loop+0xa6>
    client.loop();
   d4178:	480f      	ldr	r0, [pc, #60]	; (d41b8 <loop+0xd4>)
   d417a:	f000 fdea 	bl	d4d52 <_ZN4MQTT4loopEv>
  delay(1000);
   d417e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4182:	f001 fcc1 	bl	d5b08 <delay>
}
   d4186:	b011      	add	sp, #68	; 0x44
   d4188:	bd30      	pop	{r4, r5, pc}
   d418a:	a80c      	add	r0, sp, #48	; 0x30
   d418c:	f001 f97e 	bl	d548c <spark_deviceID>
    client.connect(System.deviceID());
   d4190:	990c      	ldr	r1, [sp, #48]	; 0x30
   d4192:	4809      	ldr	r0, [pc, #36]	; (d41b8 <loop+0xd4>)
   d4194:	f000 fcf6 	bl	d4b84 <_ZN4MQTT7connectEPKc>
   d4198:	a80c      	add	r0, sp, #48	; 0x30
   d419a:	f001 fb5b 	bl	d5854 <_ZN6StringD1Ev>
   d419e:	e7ee      	b.n	d417e <loop+0x9a>
   d41a0:	2003e608 	.word	0x2003e608
   d41a4:	000d78e0 	.word	0x000d78e0
   d41a8:	000d78e4 	.word	0x000d78e4
   d41ac:	000d78e9 	.word	0x000d78e9
   d41b0:	2003e634 	.word	0x2003e634
   d41b4:	000d78ee 	.word	0x000d78ee
   d41b8:	2003e5a8 	.word	0x2003e5a8

000d41bc <_ZN15Adafruit_LIS3DHD0Ev>:
   d41bc:	b510      	push	{r4, lr}
   d41be:	212c      	movs	r1, #44	; 0x2c
   d41c0:	4604      	mov	r4, r0
   d41c2:	f002 fbe6 	bl	d6992 <_ZdlPvj>
   d41c6:	4620      	mov	r0, r4
   d41c8:	bd10      	pop	{r4, pc}
	...

000d41cc <_GLOBAL__sub_I_lis>:
   d41cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d41ce:	4d13      	ldr	r5, [pc, #76]	; (d421c <_GLOBAL__sub_I_lis+0x50>)
   d41d0:	4c13      	ldr	r4, [pc, #76]	; (d4220 <_GLOBAL__sub_I_lis+0x54>)
   d41d2:	4628      	mov	r0, r5
   d41d4:	f000 f858 	bl	d4288 <_ZN15Adafruit_LIS3DHC1Ev>
   d41d8:	4622      	mov	r2, r4
   d41da:	4912      	ldr	r1, [pc, #72]	; (d4224 <_GLOBAL__sub_I_lis+0x58>)
   d41dc:	4628      	mov	r0, r5
MQTT client("lab.thewcl.com", 1883, callback);
   d41de:	4d12      	ldr	r5, [pc, #72]	; (d4228 <_GLOBAL__sub_I_lis+0x5c>)
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d41e0:	f002 fbd2 	bl	d6988 <__aeabi_atexit>
MQTT client("lab.thewcl.com", 1883, callback);
   d41e4:	2300      	movs	r3, #0
   d41e6:	9300      	str	r3, [sp, #0]
   d41e8:	4910      	ldr	r1, [pc, #64]	; (d422c <_GLOBAL__sub_I_lis+0x60>)
   d41ea:	4b11      	ldr	r3, [pc, #68]	; (d4230 <_GLOBAL__sub_I_lis+0x64>)
   d41ec:	f240 725b 	movw	r2, #1883	; 0x75b
   d41f0:	4628      	mov	r0, r5
   d41f2:	f000 facd 	bl	d4790 <_ZN4MQTTC1EPctPFvS0_PhjEb>
   d41f6:	4628      	mov	r0, r5
String payload;
   d41f8:	4d0e      	ldr	r5, [pc, #56]	; (d4234 <_GLOBAL__sub_I_lis+0x68>)
MQTT client("lab.thewcl.com", 1883, callback);
   d41fa:	490f      	ldr	r1, [pc, #60]	; (d4238 <_GLOBAL__sub_I_lis+0x6c>)
   d41fc:	4622      	mov	r2, r4
   d41fe:	f002 fbc3 	bl	d6988 <__aeabi_atexit>
String payload;
   d4202:	490e      	ldr	r1, [pc, #56]	; (d423c <_GLOBAL__sub_I_lis+0x70>)
   d4204:	4628      	mov	r0, r5
   d4206:	f001 fb70 	bl	d58ea <_ZN6StringC1EPKc>
   d420a:	490d      	ldr	r1, [pc, #52]	; (d4240 <_GLOBAL__sub_I_lis+0x74>)
   d420c:	4622      	mov	r2, r4
   d420e:	4628      	mov	r0, r5
   d4210:	b003      	add	sp, #12
   d4212:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
String payload;
   d4216:	f002 bbb7 	b.w	d6988 <__aeabi_atexit>
   d421a:	bf00      	nop
   d421c:	2003e608 	.word	0x2003e608
   d4220:	2003e5a4 	.word	0x2003e5a4
   d4224:	000d40b5 	.word	0x000d40b5
   d4228:	2003e5a8 	.word	0x2003e5a8
   d422c:	000d7900 	.word	0x000d7900
   d4230:	000d40b3 	.word	0x000d40b3
   d4234:	2003e634 	.word	0x2003e634
   d4238:	000d4f85 	.word	0x000d4f85
   d423c:	000d78e3 	.word	0x000d78e3
   d4240:	000d5855 	.word	0x000d5855

000d4244 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d4244:	4770      	bx	lr
	...

000d4248 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d4248:	460b      	mov	r3, r1
   d424a:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d424c:	2228      	movs	r2, #40	; 0x28
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d424e:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d4250:	2100      	movs	r1, #0
   d4252:	4618      	mov	r0, r3
   d4254:	f003 fae0 	bl	d7818 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d4258:	4908      	ldr	r1, [pc, #32]	; (d427c <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
   d425a:	220b      	movs	r2, #11
   d425c:	f003 fb22 	bl	d78a4 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d4260:	2200      	movs	r2, #0
  sensor->version     = 1;
   d4262:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d4264:	72c2      	strb	r2, [r0, #11]
  sensor->version     = 1;
   d4266:	60c1      	str	r1, [r0, #12]
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d4268:	4603      	mov	r3, r0
  sensor->sensor_id   = _sensorID;
   d426a:	69a0      	ldr	r0, [r4, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
   d426c:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   d426e:	e9c3 0104 	strd	r0, r1, [r3, #16]
  sensor->max_value   = 0;
   d4272:	2200      	movs	r2, #0
   d4274:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0;
   d4276:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0;
   d4278:	621a      	str	r2, [r3, #32]
}
   d427a:	bd10      	pop	{r4, pc}
   d427c:	000d790f 	.word	0x000d790f

000d4280 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4280:	6803      	ldr	r3, [r0, #0]
   d4282:	b2c9      	uxtb	r1, r1
   d4284:	689b      	ldr	r3, [r3, #8]
   d4286:	4718      	bx	r3

000d4288 <_ZN15Adafruit_LIS3DHC1Ev>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   d4288:	4a06      	ldr	r2, [pc, #24]	; (d42a4 <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   d428a:	6002      	str	r2, [r0, #0]
   d428c:	f04f 32ff 	mov.w	r2, #4294967295
   d4290:	6182      	str	r2, [r0, #24]
   d4292:	7742      	strb	r2, [r0, #29]
   d4294:	83c2      	strh	r2, [r0, #30]
   d4296:	22ff      	movs	r2, #255	; 0xff
   d4298:	f880 2020 	strb.w	r2, [r0, #32]
   d429c:	2208      	movs	r2, #8
   d429e:	6242      	str	r2, [r0, #36]	; 0x24
}
   d42a0:	4770      	bx	lr
   d42a2:	bf00      	nop
   d42a4:	000d7920 	.word	0x000d7920

000d42a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d42a8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d42aa:	4c0b      	ldr	r4, [pc, #44]	; (d42d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d42ac:	7821      	ldrb	r1, [r4, #0]
   d42ae:	f3bf 8f5b 	dmb	ish
   d42b2:	f011 0101 	ands.w	r1, r1, #1
   d42b6:	d10b      	bne.n	d42d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d42b8:	4620      	mov	r0, r4
   d42ba:	9101      	str	r1, [sp, #4]
   d42bc:	f7ff fef1 	bl	d40a2 <__cxa_guard_acquire>
   d42c0:	9901      	ldr	r1, [sp, #4]
   d42c2:	b128      	cbz	r0, d42d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d42c4:	4805      	ldr	r0, [pc, #20]	; (d42dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d42c6:	f001 f95d 	bl	d5584 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d42ca:	4620      	mov	r0, r4
   d42cc:	f7ff feee 	bl	d40ac <__cxa_guard_release>
        return instance;
    }
   d42d0:	4802      	ldr	r0, [pc, #8]	; (d42dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d42d2:	b002      	add	sp, #8
   d42d4:	bd10      	pop	{r4, pc}
   d42d6:	bf00      	nop
   d42d8:	2003e644 	.word	0x2003e644
   d42dc:	2003e648 	.word	0x2003e648

000d42e0 <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d42e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
   d42e4:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d42e8:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d42ea:	4605      	mov	r5, r0
   d42ec:	460f      	mov	r7, r1
  if (_sck == -1)
   d42ee:	d106      	bne.n	d42fe <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d42f0:	f7ff ffda 	bl	d42a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d42f4:	4639      	mov	r1, r7
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
   d42f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d42fa:	f001 b9cd 	b.w	d5698 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   d42fe:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   d4300:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   d4302:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   d4306:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d430a:	2100      	movs	r1, #0
   d430c:	b280      	uxth	r0, r0
   d430e:	f002 face 	bl	d68ae <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   d4312:	f995 001e 	ldrsb.w	r0, [r5, #30]
   d4316:	fa08 f106 	lsl.w	r1, r8, r6
   d431a:	4039      	ands	r1, r7
   d431c:	b280      	uxth	r0, r0
   d431e:	f002 fac6 	bl	d68ae <digitalWrite>
    digitalWrite(_sck, HIGH);
   d4322:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d4326:	2101      	movs	r1, #1
   d4328:	b280      	uxth	r0, r0
   d432a:	f002 fac0 	bl	d68ae <digitalWrite>
    if (digitalRead(_miso))
   d432e:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
   d4332:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   d4334:	b280      	uxth	r0, r0
    reply <<= 1;
   d4336:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   d4338:	f002 fad2 	bl	d68e0 <digitalRead>
   d433c:	b108      	cbz	r0, d4342 <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   d433e:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   d4342:	3e01      	subs	r6, #1
   d4344:	d2df      	bcs.n	d4306 <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
   d4346:	4620      	mov	r0, r4
   d4348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d434c <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   d434c:	b508      	push	{r3, lr}
        instance().setBitOrder(order);
   d434e:	f7ff ffab 	bl	d42a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4352:	2101      	movs	r1, #1
   d4354:	f001 f931 	bl	d55ba <_ZN8SPIClass11setBitOrderEh>
        return instance().setClockSpeed(value, scale);
   d4358:	f7ff ffa6 	bl	d42a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d435c:	4905      	ldr	r1, [pc, #20]	; (d4374 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   d435e:	2201      	movs	r2, #1
   d4360:	f001 f968 	bl	d5634 <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
   d4364:	f7ff ffa0 	bl	d42a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   d4368:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d436c:	2100      	movs	r1, #0
   d436e:	f001 b937 	b.w	d55e0 <_ZN8SPIClass11setDataModeEh>
   d4372:	bf00      	nop
   d4374:	0007a120 	.word	0x0007a120

000d4378 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d4378:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   d437a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d437e:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d4380:	4604      	mov	r4, r0
   d4382:	460e      	mov	r6, r1
   d4384:	4615      	mov	r5, r2
  if (_cs == -1) {
   d4386:	d116      	bne.n	d43b6 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   d4388:	f002 fad6 	bl	d6938 <_Z19__fetch_global_Wirev>
   d438c:	7f21      	ldrb	r1, [r4, #28]
   d438e:	f001 fe63 	bl	d6058 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d4392:	f002 fad1 	bl	d6938 <_Z19__fetch_global_Wirev>
   d4396:	6803      	ldr	r3, [r0, #0]
   d4398:	4631      	mov	r1, r6
   d439a:	689b      	ldr	r3, [r3, #8]
   d439c:	4798      	blx	r3
    Wire.write((uint8_t)value);
   d439e:	f002 facb 	bl	d6938 <_Z19__fetch_global_Wirev>
   d43a2:	6803      	ldr	r3, [r0, #0]
   d43a4:	4629      	mov	r1, r5
   d43a6:	689b      	ldr	r3, [r3, #8]
   d43a8:	4798      	blx	r3
    Wire.endTransmission();
   d43aa:	f002 fac5 	bl	d6938 <_Z19__fetch_global_Wirev>
}
   d43ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   d43b2:	f001 be5c 	b.w	d606e <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
   d43b6:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d43ba:	3301      	adds	r3, #1
   d43bc:	d101      	bne.n	d43c2 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   d43be:	f7ff ffc5 	bl	d434c <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d43c2:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d43c6:	2100      	movs	r1, #0
   d43c8:	b280      	uxth	r0, r0
   d43ca:	f002 fa70 	bl	d68ae <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   d43ce:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d43d2:	4620      	mov	r0, r4
   d43d4:	f7ff ff84 	bl	d42e0 <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   d43d8:	4629      	mov	r1, r5
   d43da:	4620      	mov	r0, r4
   d43dc:	f7ff ff80 	bl	d42e0 <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   d43e0:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d43e4:	2101      	movs	r1, #1
}
   d43e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   d43ea:	b280      	uxth	r0, r0
   d43ec:	f002 ba5f 	b.w	d68ae <digitalWrite>

000d43f0 <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d43f0:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d43f2:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d43f6:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d43f8:	4604      	mov	r4, r0
   d43fa:	460d      	mov	r5, r1
  if (_cs == -1) {
   d43fc:	d11d      	bne.n	d443a <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   d43fe:	f002 fa9b 	bl	d6938 <_Z19__fetch_global_Wirev>
   d4402:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d4406:	f001 fe2b 	bl	d6060 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   d440a:	f002 fa95 	bl	d6938 <_Z19__fetch_global_Wirev>
   d440e:	6803      	ldr	r3, [r0, #0]
   d4410:	4629      	mov	r1, r5
   d4412:	689b      	ldr	r3, [r3, #8]
   d4414:	4798      	blx	r3
    Wire.endTransmission();
   d4416:	f002 fa8f 	bl	d6938 <_Z19__fetch_global_Wirev>
   d441a:	f001 fe28 	bl	d606e <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
   d441e:	f002 fa8b 	bl	d6938 <_Z19__fetch_global_Wirev>
   d4422:	7f21      	ldrb	r1, [r4, #28]
   d4424:	2201      	movs	r2, #1
   d4426:	f001 fe14 	bl	d6052 <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   d442a:	f002 fa85 	bl	d6938 <_Z19__fetch_global_Wirev>
   d442e:	6803      	ldr	r3, [r0, #0]
   d4430:	695b      	ldr	r3, [r3, #20]
   d4432:	4798      	blx	r3
   d4434:	b2c5      	uxtb	r5, r0
}
   d4436:	4628      	mov	r0, r5
   d4438:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
   d443a:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d443e:	3301      	adds	r3, #1
   d4440:	d101      	bne.n	d4446 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   d4442:	f7ff ff83 	bl	d434c <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
   d4446:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d444a:	2100      	movs	r1, #0
   d444c:	b280      	uxth	r0, r0
   d444e:	f002 fa2e 	bl	d68ae <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   d4452:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4456:	4620      	mov	r0, r4
   d4458:	f7ff ff42 	bl	d42e0 <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   d445c:	2100      	movs	r1, #0
   d445e:	4620      	mov	r0, r4
   d4460:	f7ff ff3e 	bl	d42e0 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4464:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   d4466:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d446a:	2101      	movs	r1, #1
   d446c:	b280      	uxth	r0, r0
   d446e:	f002 fa1e 	bl	d68ae <digitalWrite>
    if (_sck == -1)
   d4472:	e7e0      	b.n	d4436 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

000d4474 <_ZN15Adafruit_LIS3DH8getRangeEv>:
{
   d4474:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   d4476:	2123      	movs	r1, #35	; 0x23
   d4478:	f7ff ffba 	bl	d43f0 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   d447c:	f3c0 1001 	ubfx	r0, r0, #4, #2
   d4480:	bd08      	pop	{r3, pc}

000d4482 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
   d4482:	b538      	push	{r3, r4, r5, lr}
   d4484:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d4486:	2120      	movs	r1, #32
{
   d4488:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d448a:	f7ff ffb1 	bl	d43f0 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
   d448e:	f000 020f 	and.w	r2, r0, #15
  ctl1 |= (dataRate << 4);
   d4492:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d4496:	4620      	mov	r0, r4
   d4498:	b2d2      	uxtb	r2, r2
}
   d449a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d449e:	2120      	movs	r1, #32
   d44a0:	f7ff bf6a 	b.w	d4378 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d44a4 <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   d44a4:	b510      	push	{r4, lr}
   d44a6:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   d44a8:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
   d44aa:	f990 001d 	ldrsb.w	r0, [r0, #29]
   d44ae:	1c42      	adds	r2, r0, #1
   d44b0:	d123      	bne.n	d44fa <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
   d44b2:	f002 fa41 	bl	d6938 <_Z19__fetch_global_Wirev>
   d44b6:	f001 fd9d 	bl	d5ff4 <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   d44ba:	210f      	movs	r1, #15
   d44bc:	4620      	mov	r0, r4
   d44be:	f7ff ff97 	bl	d43f0 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   d44c2:	2833      	cmp	r0, #51	; 0x33
   d44c4:	d13d      	bne.n	d4542 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   d44c6:	2207      	movs	r2, #7
   d44c8:	2120      	movs	r1, #32
   d44ca:	4620      	mov	r0, r4
   d44cc:	f7ff ff54 	bl	d4378 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
   d44d0:	2107      	movs	r1, #7
   d44d2:	4620      	mov	r0, r4
   d44d4:	f7ff ffd5 	bl	d4482 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   d44d8:	2288      	movs	r2, #136	; 0x88
   d44da:	2123      	movs	r1, #35	; 0x23
   d44dc:	4620      	mov	r0, r4
   d44de:	f7ff ff4b 	bl	d4378 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   d44e2:	2210      	movs	r2, #16
   d44e4:	2122      	movs	r1, #34	; 0x22
   d44e6:	4620      	mov	r0, r4
   d44e8:	f7ff ff46 	bl	d4378 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   d44ec:	4620      	mov	r0, r4
   d44ee:	2280      	movs	r2, #128	; 0x80
   d44f0:	211f      	movs	r1, #31
   d44f2:	f7ff ff41 	bl	d4378 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
   d44f6:	2001      	movs	r0, #1
}
   d44f8:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   d44fa:	2101      	movs	r1, #1
   d44fc:	b280      	uxth	r0, r0
   d44fe:	f002 f9d6 	bl	d68ae <digitalWrite>
    pinMode(_cs, OUTPUT);
   d4502:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4506:	2101      	movs	r1, #1
   d4508:	b280      	uxth	r0, r0
   d450a:	f002 f9bf 	bl	d688c <pinMode>
    if (_sck == -1) {
   d450e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4512:	1c43      	adds	r3, r0, #1
   d4514:	d104      	bne.n	d4520 <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
   d4516:	f7ff fec7 	bl	d42a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d451a:	f001 f83d 	bl	d5598 <_ZN8SPIClass5beginEv>
    }
   d451e:	e7cc      	b.n	d44ba <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
   d4520:	2101      	movs	r1, #1
   d4522:	b280      	uxth	r0, r0
   d4524:	f002 f9b2 	bl	d688c <pinMode>
      pinMode(_mosi, OUTPUT);
   d4528:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d452c:	2101      	movs	r1, #1
   d452e:	b280      	uxth	r0, r0
   d4530:	f002 f9ac 	bl	d688c <pinMode>
      pinMode(_miso, INPUT);
   d4534:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4538:	2100      	movs	r1, #0
   d453a:	b280      	uxth	r0, r0
   d453c:	f002 f9a6 	bl	d688c <pinMode>
   d4540:	e7bb      	b.n	d44ba <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
   d4542:	2000      	movs	r0, #0
   d4544:	e7d8      	b.n	d44f8 <_ZN15Adafruit_LIS3DH5beginEh+0x54>
	...

000d4548 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
   d4548:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d454a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d454e:	3301      	adds	r3, #1
void Adafruit_LIS3DH::read(void) {
   d4550:	4604      	mov	r4, r0
  if (_cs == -1) {
   d4552:	d176      	bne.n	d4642 <_ZN15Adafruit_LIS3DH4readEv+0xfa>
    Wire.beginTransmission(_i2caddr);
   d4554:	f002 f9f0 	bl	d6938 <_Z19__fetch_global_Wirev>
   d4558:	f994 101c 	ldrsb.w	r1, [r4, #28]
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d455c:	4d5c      	ldr	r5, [pc, #368]	; (d46d0 <_ZN15Adafruit_LIS3DH4readEv+0x188>)
    Wire.beginTransmission(_i2caddr);
   d455e:	f001 fd7f 	bl	d6060 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   d4562:	f002 f9e9 	bl	d6938 <_Z19__fetch_global_Wirev>
   d4566:	21a8      	movs	r1, #168	; 0xa8
   d4568:	f7ff fe8a 	bl	d4280 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d456c:	f002 f9e4 	bl	d6938 <_Z19__fetch_global_Wirev>
   d4570:	f001 fd7d 	bl	d606e <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
   d4574:	f002 f9e0 	bl	d6938 <_Z19__fetch_global_Wirev>
   d4578:	7f21      	ldrb	r1, [r4, #28]
   d457a:	2206      	movs	r2, #6
   d457c:	f001 fd69 	bl	d6052 <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d4580:	f002 f9da 	bl	d6938 <_Z19__fetch_global_Wirev>
   d4584:	6803      	ldr	r3, [r0, #0]
   d4586:	695b      	ldr	r3, [r3, #20]
   d4588:	4798      	blx	r3
   d458a:	80e0      	strh	r0, [r4, #6]
   d458c:	f002 f9d4 	bl	d6938 <_Z19__fetch_global_Wirev>
   d4590:	6803      	ldr	r3, [r0, #0]
   d4592:	695b      	ldr	r3, [r3, #20]
   d4594:	4798      	blx	r3
   d4596:	88e3      	ldrh	r3, [r4, #6]
   d4598:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d459c:	4318      	orrs	r0, r3
   d459e:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   d45a0:	f002 f9ca 	bl	d6938 <_Z19__fetch_global_Wirev>
   d45a4:	6803      	ldr	r3, [r0, #0]
   d45a6:	695b      	ldr	r3, [r3, #20]
   d45a8:	4798      	blx	r3
   d45aa:	8120      	strh	r0, [r4, #8]
   d45ac:	f002 f9c4 	bl	d6938 <_Z19__fetch_global_Wirev>
   d45b0:	6803      	ldr	r3, [r0, #0]
   d45b2:	695b      	ldr	r3, [r3, #20]
   d45b4:	4798      	blx	r3
   d45b6:	8923      	ldrh	r3, [r4, #8]
   d45b8:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d45bc:	4318      	orrs	r0, r3
   d45be:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   d45c0:	f002 f9ba 	bl	d6938 <_Z19__fetch_global_Wirev>
   d45c4:	6803      	ldr	r3, [r0, #0]
   d45c6:	695b      	ldr	r3, [r3, #20]
   d45c8:	4798      	blx	r3
   d45ca:	8160      	strh	r0, [r4, #10]
   d45cc:	f002 f9b4 	bl	d6938 <_Z19__fetch_global_Wirev>
   d45d0:	6803      	ldr	r3, [r0, #0]
   d45d2:	695b      	ldr	r3, [r3, #20]
   d45d4:	4798      	blx	r3
   d45d6:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d45da:	8965      	ldrh	r5, [r4, #10]
   d45dc:	4328      	orrs	r0, r5
   d45de:	8160      	strh	r0, [r4, #10]
  uint8_t range = getRange();
   d45e0:	4620      	mov	r0, r4
   d45e2:	f7ff ff47 	bl	d4474 <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d45e6:	2803      	cmp	r0, #3
   d45e8:	d069      	beq.n	d46be <_ZN15Adafruit_LIS3DH4readEv+0x176>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d45ea:	2802      	cmp	r0, #2
   d45ec:	d06a      	beq.n	d46c4 <_ZN15Adafruit_LIS3DH4readEv+0x17c>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d45ee:	2801      	cmp	r0, #1
   d45f0:	d06b      	beq.n	d46ca <_ZN15Adafruit_LIS3DH4readEv+0x182>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   d45f2:	2800      	cmp	r0, #0
   d45f4:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   d45f8:	bf18      	it	ne
   d45fa:	2301      	movne	r3, #1
  x_g = (float)x / divider;
   d45fc:	ee07 3a90 	vmov	s15, r3
   d4600:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d4604:	ee07 3a10 	vmov	s14, r3
   d4608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d460c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d4610:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  x_g = (float)x / divider;
   d4614:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   d4618:	ee07 3a10 	vmov	s14, r3
   d461c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_g = (float)x / divider;
   d4620:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   d4624:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   d4628:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d462c:	ee07 3a10 	vmov	s14, r3
   d4630:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d4634:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   d4638:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d463c:	edc4 6a05 	vstr	s13, [r4, #20]
}
   d4640:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
   d4642:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4646:	3301      	adds	r3, #1
   d4648:	d101      	bne.n	d464e <_ZN15Adafruit_LIS3DH4readEv+0x106>
      beginTransaction();
   d464a:	f7ff fe7f 	bl	d434c <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d464e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4652:	2100      	movs	r1, #0
   d4654:	b280      	uxth	r0, r0
   d4656:	f002 f92a 	bl	d68ae <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   d465a:	21e8      	movs	r1, #232	; 0xe8
   d465c:	4620      	mov	r0, r4
   d465e:	f7ff fe3f 	bl	d42e0 <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   d4662:	21ff      	movs	r1, #255	; 0xff
   d4664:	4620      	mov	r0, r4
   d4666:	f7ff fe3b 	bl	d42e0 <_ZN15Adafruit_LIS3DH7spixferEh>
   d466a:	21ff      	movs	r1, #255	; 0xff
   d466c:	80e0      	strh	r0, [r4, #6]
   d466e:	4620      	mov	r0, r4
   d4670:	f7ff fe36 	bl	d42e0 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4674:	88e3      	ldrh	r3, [r4, #6]
   d4676:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d467a:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   d467c:	21ff      	movs	r1, #255	; 0xff
   d467e:	4620      	mov	r0, r4
   d4680:	f7ff fe2e 	bl	d42e0 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4684:	21ff      	movs	r1, #255	; 0xff
   d4686:	8120      	strh	r0, [r4, #8]
   d4688:	4620      	mov	r0, r4
   d468a:	f7ff fe29 	bl	d42e0 <_ZN15Adafruit_LIS3DH7spixferEh>
   d468e:	8923      	ldrh	r3, [r4, #8]
   d4690:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4694:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   d4696:	21ff      	movs	r1, #255	; 0xff
   d4698:	4620      	mov	r0, r4
   d469a:	f7ff fe21 	bl	d42e0 <_ZN15Adafruit_LIS3DH7spixferEh>
   d469e:	21ff      	movs	r1, #255	; 0xff
   d46a0:	8160      	strh	r0, [r4, #10]
   d46a2:	4620      	mov	r0, r4
   d46a4:	f7ff fe1c 	bl	d42e0 <_ZN15Adafruit_LIS3DH7spixferEh>
   d46a8:	8963      	ldrh	r3, [r4, #10]
   d46aa:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d46ae:	8160      	strh	r0, [r4, #10]
    digitalWrite(_cs, HIGH);
   d46b0:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d46b4:	2101      	movs	r1, #1
   d46b6:	b280      	uxth	r0, r0
   d46b8:	f002 f8f9 	bl	d68ae <digitalWrite>
    if (_sck == -1)
   d46bc:	e790      	b.n	d45e0 <_ZN15Adafruit_LIS3DH4readEv+0x98>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d46be:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d46c2:	e79b      	b.n	d45fc <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d46c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   d46c8:	e798      	b.n	d45fc <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d46ca:	f641 73fe 	movw	r3, #8190	; 0x1ffe
   d46ce:	e795      	b.n	d45fc <_ZN15Adafruit_LIS3DH4readEv+0xb4>
   d46d0:	00ffff00 	.word	0x00ffff00

000d46d4 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   d46d4:	460c      	mov	r4, r1
   d46d6:	4605      	mov	r5, r0
   d46d8:	b508      	push	{r3, lr}
  memset(event, 0, sizeof(sensors_event_t));
   d46da:	2220      	movs	r2, #32
   d46dc:	2100      	movs	r1, #0
   d46de:	1d20      	adds	r0, r4, #4
   d46e0:	f003 f89a 	bl	d7818 <memset>
  event->version   = sizeof(sensors_event_t);
   d46e4:	2324      	movs	r3, #36	; 0x24
   d46e6:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d46e8:	69ab      	ldr	r3, [r5, #24]
   d46ea:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   d46ec:	2301      	movs	r3, #1
   d46ee:	60a3      	str	r3, [r4, #8]
  event->timestamp = 0;
   d46f0:	2300      	movs	r3, #0
   d46f2:	6123      	str	r3, [r4, #16]
  read();
   d46f4:	4628      	mov	r0, r5
   d46f6:	f7ff ff27 	bl	d4548 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
   d46fa:	68eb      	ldr	r3, [r5, #12]
   d46fc:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   d46fe:	692b      	ldr	r3, [r5, #16]
   d4700:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   d4702:	696b      	ldr	r3, [r5, #20]
   d4704:	61e3      	str	r3, [r4, #28]

000d4706 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   d4706:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   d470a:	b510      	push	{r4, lr}
   d470c:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   d470e:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   d4710:	b113      	cbz	r3, d4718 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   d4712:	6d88      	ldr	r0, [r1, #88]	; 0x58
   d4714:	f000 fcae 	bl	d5074 <os_mutex_lock>
#endif
#endif
#endif
        }
   d4718:	4620      	mov	r0, r4
   d471a:	bd10      	pop	{r4, pc}

000d471c <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   d471c:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   d471e:	6803      	ldr	r3, [r0, #0]
   d4720:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   d4724:	4604      	mov	r4, r0
            if (mqtt->thread)
   d4726:	b112      	cbz	r2, d472e <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   d4728:	6d98      	ldr	r0, [r3, #88]	; 0x58
   d472a:	f000 fcab 	bl	d5084 <os_mutex_unlock>
#endif
#endif
#endif
        }
   d472e:	4620      	mov	r0, r4
   d4730:	bd10      	pop	{r4, pc}

000d4732 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   d4732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4734:	461f      	mov	r7, r3
   d4736:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d473a:	4604      	mov	r4, r0
   d473c:	460d      	mov	r5, r1
   d473e:	4616      	mov	r6, r2
    if (thread) {
   d4740:	b12b      	cbz	r3, d474e <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x1c>
        this->thread = true;
   d4742:	2301      	movs	r3, #1
   d4744:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   d4748:	3058      	adds	r0, #88	; 0x58
   d474a:	f000 fc8b 	bl	d5064 <os_mutex_create>
    }
    this->callback = callback;
   d474e:	9b08      	ldr	r3, [sp, #32]
   d4750:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   d4752:	2300      	movs	r3, #0
   d4754:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   d4756:	b106      	cbz	r6, d475a <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x28>
        this->ip = ip;
   d4758:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   d475a:	b125      	cbz	r5, d4766 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x34>
        this->domain = domain;
   d475c:	4629      	mov	r1, r5
   d475e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4762:	f001 f8e5 	bl	d5930 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d4766:	9b06      	ldr	r3, [sp, #24]
   d4768:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d476a:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   d476c:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   d476e:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d4772:	2bff      	cmp	r3, #255	; 0xff
   d4774:	bfb8      	it	lt
   d4776:	23ff      	movlt	r3, #255	; 0xff
   d4778:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d477c:	b108      	cbz	r0, d4782 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x50>
      delete[] buffer;
   d477e:	f7ff fc8e 	bl	d409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d4782:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d4786:	f7ff fc86 	bl	d4096 <_Znaj>
   d478a:	61e0      	str	r0, [r4, #28]
}
   d478c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d4790 <_ZN4MQTTC1EPctPFvS0_PhjEb>:
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d4790:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4794:	4604      	mov	r4, r0
            bool thread) {
   d4796:	2500      	movs	r5, #0
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d4798:	4617      	mov	r7, r2
   d479a:	4698      	mov	r8, r3
   d479c:	460e      	mov	r6, r1
            bool thread) {
   d479e:	f001 feb7 	bl	d6510 <_ZN9TCPClientC1Ev>
   d47a2:	490d      	ldr	r1, [pc, #52]	; (d47d8 <_ZN4MQTTC1EPctPFvS0_PhjEb+0x48>)
   d47a4:	61e5      	str	r5, [r4, #28]
   d47a6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d47aa:	f001 f89e 	bl	d58ea <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d47ae:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   d47b2:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d47b4:	e9cd 8302 	strd	r8, r3, [sp, #8]
   d47b8:	22ff      	movs	r2, #255	; 0xff
   d47ba:	230f      	movs	r3, #15
   d47bc:	e9cd 3200 	strd	r3, r2, [sp]
   d47c0:	4620      	mov	r0, r4
            bool thread) {
   d47c2:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d47c6:	463b      	mov	r3, r7
   d47c8:	462a      	mov	r2, r5
   d47ca:	4631      	mov	r1, r6
   d47cc:	f7ff ffb1 	bl	d4732 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>
}
   d47d0:	4620      	mov	r0, r4
   d47d2:	b004      	add	sp, #16
   d47d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d47d8:	000d78e3 	.word	0x000d78e3

000d47dc <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d47dc:	b510      	push	{r4, lr}
   d47de:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d47e0:	4620      	mov	r0, r4
   d47e2:	f001 fdf1 	bl	d63c8 <_ZN9TCPClient9availableEv>
   d47e6:	2800      	cmp	r0, #0
   d47e8:	d0fa      	beq.n	d47e0 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d47ea:	4620      	mov	r0, r4
   d47ec:	f001 fd25 	bl	d623a <_ZN9TCPClient4readEv>
}
   d47f0:	b2c0      	uxtb	r0, r0
   d47f2:	bd10      	pop	{r4, pc}

000d47f4 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d47f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d47f8:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d47fa:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d47fc:	460f      	mov	r7, r1
    buffer[len++] = readByte();
   d47fe:	f7ff ffed 	bl	d47dc <_ZN4MQTT8readByteEv>
   d4802:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d4804:	69eb      	ldr	r3, [r5, #28]
   d4806:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d480a:	f04f 0901 	mov.w	r9, #1
   d480e:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d4812:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
   d4816:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d4818:	4628      	mov	r0, r5
   d481a:	f7ff ffdf 	bl	d47dc <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d481e:	4626      	mov	r6, r4
   d4820:	69eb      	ldr	r3, [r5, #28]
   d4822:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d4824:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d4828:	fb13 f309 	smulbb	r3, r3, r9
   d482c:	4498      	add	r8, r3
        buffer[len++] = digit;
   d482e:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d4830:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   d4832:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d4834:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
   d4838:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d483c:	d4ec      	bmi.n	d4818 <_ZN4MQTT10readPacketEPh+0x24>
    *lengthLength = len-1;
   d483e:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d4840:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   d4844:	703b      	strb	r3, [r7, #0]
    if (isPublish) {
   d4846:	d124      	bne.n	d4892 <_ZN4MQTT10readPacketEPh+0x9e>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d4848:	4628      	mov	r0, r5
   d484a:	69ef      	ldr	r7, [r5, #28]
   d484c:	f7ff ffc6 	bl	d47dc <_ZN4MQTT8readByteEv>
   d4850:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
   d4852:	4628      	mov	r0, r5
   d4854:	69ef      	ldr	r7, [r5, #28]
   d4856:	1cf4      	adds	r4, r6, #3
   d4858:	f7ff ffc0 	bl	d47dc <_ZN4MQTT8readByteEv>
        buffer[len++] = readByte();
   d485c:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   d485e:	b2b6      	uxth	r6, r6
   d4860:	b2a4      	uxth	r4, r4
   d4862:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d4864:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d4866:	b2b6      	uxth	r6, r6
   d4868:	46b1      	mov	r9, r6
   d486a:	4627      	mov	r7, r4
   d486c:	45c1      	cmp	r9, r8
   d486e:	d212      	bcs.n	d4896 <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d4870:	4628      	mov	r0, r5
   d4872:	f7ff ffb3 	bl	d47dc <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d4876:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d487a:	42bb      	cmp	r3, r7
            buffer[len] = digit;
   d487c:	bf88      	it	hi
   d487e:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
   d4880:	f109 0901 	add.w	r9, r9, #1
            buffer[len] = digit;
   d4884:	bf88      	it	hi
   d4886:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
   d4888:	3701      	adds	r7, #1
   d488a:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
   d488c:	fa1f f989 	uxth.w	r9, r9
   d4890:	e7ec      	b.n	d486c <_ZN4MQTT10readPacketEPh+0x78>
    uint8_t start = 0;
   d4892:	2600      	movs	r6, #0
   d4894:	e7e7      	b.n	d4866 <_ZN4MQTT10readPacketEPh+0x72>
   d4896:	eba8 0006 	sub.w	r0, r8, r6
   d489a:	45b0      	cmp	r8, r6
   d489c:	bf2c      	ite	cs
   d489e:	4606      	movcs	r6, r0
   d48a0:	2600      	movcc	r6, #0
   d48a2:	4434      	add	r4, r6
    }

    if (len > this->maxpacketsize) {
   d48a4:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
   d48a8:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d48aa:	42a0      	cmp	r0, r4
   d48ac:	bf2c      	ite	cs
   d48ae:	4620      	movcs	r0, r4
   d48b0:	2000      	movcc	r0, #0
   d48b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d48b6 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d48b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d48b8:	468c      	mov	ip, r1
   d48ba:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d48bc:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d48be:	4607      	mov	r7, r0
    uint8_t llen = 0;
   d48c0:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   d48c2:	46ae      	mov	lr, r5
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d48c4:	a802      	add	r0, sp, #8
        digit = len % 128;
   d48c6:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        if (len > 0) {
   d48ca:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   d48ce:	f103 0401 	add.w	r4, r3, #1
   d48d2:	4403      	add	r3, r0
            digit |= 0x80;
   d48d4:	bf88      	it	hi
   d48d6:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        llen++;
    } while(len > 0);
   d48da:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   d48de:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
   d48e2:	b2e4      	uxtb	r4, r4
   d48e4:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
   d48e8:	d810      	bhi.n	d490c <_ZN4MQTT5writeEhPht+0x56>

    buf[4-llen] = header;
   d48ea:	f1c4 0304 	rsb	r3, r4, #4
   d48ee:	18d1      	adds	r1, r2, r3
   d48f0:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d48f4:	f1c4 0305 	rsb	r3, r4, #5
   d48f8:	4413      	add	r3, r2
   d48fa:	a801      	add	r0, sp, #4
   d48fc:	3205      	adds	r2, #5
   d48fe:	4293      	cmp	r3, r2
   d4900:	d006      	beq.n	d4910 <_ZN4MQTT5writeEhPht+0x5a>
        buf[5-llen+i] = lenBuf[i];
   d4902:	f810 5b01 	ldrb.w	r5, [r0], #1
   d4906:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
   d490a:	e7f8      	b.n	d48fe <_ZN4MQTT5writeEhPht+0x48>
        lenBuf[pos++] = digit;
   d490c:	4623      	mov	r3, r4
   d490e:	e7d8      	b.n	d48c2 <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d4910:	1c72      	adds	r2, r6, #1
   d4912:	4422      	add	r2, r4
   d4914:	4638      	mov	r0, r7
   d4916:	f001 fbba 	bl	d608e <_ZN9TCPClient5writeEPKhj>
   d491a:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d491c:	f000 fb9a 	bl	d5054 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d4920:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   d4922:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d4924:	4432      	add	r2, r6
   d4926:	b2a8      	uxth	r0, r5
}
   d4928:	1a13      	subs	r3, r2, r0
   d492a:	4258      	negs	r0, r3
   d492c:	4158      	adcs	r0, r3
   d492e:	b003      	add	sp, #12
   d4930:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4932 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d4932:	b513      	push	{r0, r1, r4, lr}
   d4934:	4604      	mov	r4, r0
    MutexLocker lock(this);
   d4936:	4601      	mov	r1, r0
   d4938:	a801      	add	r0, sp, #4
   d493a:	f7ff fee4 	bl	d4706 <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
   d493e:	69e3      	ldr	r3, [r4, #28]
   d4940:	22e0      	movs	r2, #224	; 0xe0
   d4942:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d4944:	69e3      	ldr	r3, [r4, #28]
   d4946:	2200      	movs	r2, #0
   d4948:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   d494a:	69e1      	ldr	r1, [r4, #28]
   d494c:	2202      	movs	r2, #2
   d494e:	4620      	mov	r0, r4
   d4950:	f001 fb9d 	bl	d608e <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d4954:	4620      	mov	r0, r4
   d4956:	f001 fd91 	bl	d647c <_ZN9TCPClient4stopEv>
   d495a:	f000 fb7b 	bl	d5054 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d495e:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
   d4962:	a801      	add	r0, sp, #4
   d4964:	f7ff feda 	bl	d471c <_ZN4MQTT11MutexLockerD1Ev>
}
   d4968:	b002      	add	sp, #8
   d496a:	bd10      	pop	{r4, pc}

000d496c <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d496c:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d496e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4970:	4604      	mov	r4, r0
    pos += 2;
   d4972:	b298      	uxth	r0, r3
   d4974:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   d4976:	5ccd      	ldrb	r5, [r1, r3]
   d4978:	b155      	cbz	r5, d4990 <_ZN4MQTT11writeStringEPKcPht+0x24>
   d497a:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d497e:	4286      	cmp	r6, r0
   d4980:	f103 0701 	add.w	r7, r3, #1
   d4984:	d904      	bls.n	d4990 <_ZN4MQTT11writeStringEPKcPht+0x24>
        buf[pos++] = *idp++;
   d4986:	1c46      	adds	r6, r0, #1
   d4988:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   d498a:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   d498c:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
   d498e:	e7f2      	b.n	d4976 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d4990:	b299      	uxth	r1, r3
   d4992:	1a44      	subs	r4, r0, r1
   d4994:	4422      	add	r2, r4
   d4996:	1209      	asrs	r1, r1, #8
   d4998:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d499c:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   d49a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d49a2 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d49a2:	b538      	push	{r3, r4, r5, lr}
   d49a4:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   d49a6:	f001 fb88 	bl	d60ba <_ZN9TCPClient9connectedEv>
   d49aa:	2800      	cmp	r0, #0
   d49ac:	bf14      	ite	ne
   d49ae:	2501      	movne	r5, #1
   d49b0:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   d49b2:	d102      	bne.n	d49ba <_ZN4MQTT11isConnectedEv+0x18>
   d49b4:	4620      	mov	r0, r4
   d49b6:	f001 fd61 	bl	d647c <_ZN9TCPClient4stopEv>
    return rc;
}
   d49ba:	4628      	mov	r0, r5
   d49bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d49c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d49c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d49c4:	b088      	sub	sp, #32
   d49c6:	4604      	mov	r4, r0
   d49c8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   d49cc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   d49d0:	4689      	mov	r9, r1
   d49d2:	4617      	mov	r7, r2
   d49d4:	461e      	mov	r6, r3
    if (!isConnected()) {
   d49d6:	f7ff ffe4 	bl	d49a2 <_ZN4MQTT11isConnectedEv>
   d49da:	4605      	mov	r5, r0
   d49dc:	2800      	cmp	r0, #0
   d49de:	f040 80cb 	bne.w	d4b78 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b8>
        MutexLocker lock(this);
   d49e2:	4621      	mov	r1, r4
   d49e4:	a801      	add	r0, sp, #4
   d49e6:	f7ff fe8e 	bl	d4706 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   d49ea:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d49ec:	2900      	cmp	r1, #0
   d49ee:	f040 8087 	bne.w	d4b00 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x140>
            result = _client.connect(this->domain.c_str(), this->port);
   d49f2:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d49f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d49f8:	462b      	mov	r3, r5
   d49fa:	4620      	mov	r0, r4
   d49fc:	f001 fd9c 	bl	d6538 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   d4a00:	2800      	cmp	r0, #0
   d4a02:	d079      	beq.n	d4af8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            nextMsgId = 1;
   d4a04:	2301      	movs	r3, #1
   d4a06:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   d4a08:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   d4a0c:	69e2      	ldr	r2, [r4, #28]
   d4a0e:	2b04      	cmp	r3, #4
   d4a10:	f040 8081 	bne.w	d4b16 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4a14:	4b59      	ldr	r3, [pc, #356]	; (d4b7c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>)
   d4a16:	6818      	ldr	r0, [r3, #0]
   d4a18:	8899      	ldrh	r1, [r3, #4]
   d4a1a:	799b      	ldrb	r3, [r3, #6]
   d4a1c:	f8ad 100c 	strh.w	r1, [sp, #12]
   d4a20:	f88d 300e 	strb.w	r3, [sp, #14]
   d4a24:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d4a26:	f8c2 0005 	str.w	r0, [r2, #5]
   d4a2a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d4a2e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d4a32:	f8a2 1009 	strh.w	r1, [r2, #9]
   d4a36:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   d4a38:	230c      	movs	r3, #12
            if (willTopic) {
   d4a3a:	f1b8 0f00 	cmp.w	r8, #0
   d4a3e:	d07f      	beq.n	d4b40 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d4a40:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   d4a44:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   d4a48:	0140      	lsls	r0, r0, #5
   d4a4a:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   d4a4e:	f040 0006 	orr.w	r0, r0, #6
   d4a52:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   d4a54:	f1ba 0f00 	cmp.w	sl, #0
   d4a58:	d101      	bne.n	d4a5e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x9e>
              v = v&0xfd;
   d4a5a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   d4a5e:	b11f      	cbz	r7, d4a68 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
                if(pass != NULL) {
   d4a60:	2e00      	cmp	r6, #0
   d4a62:	d16f      	bne.n	d4b44 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = v|0x80;
   d4a64:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   d4a68:	69e2      	ldr	r2, [r4, #28]
   d4a6a:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   d4a6c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d4a6e:	69e1      	ldr	r1, [r4, #28]
   d4a70:	1c58      	adds	r0, r3, #1
   d4a72:	1212      	asrs	r2, r2, #8
   d4a74:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d4a76:	1c9a      	adds	r2, r3, #2
   d4a78:	69e1      	ldr	r1, [r4, #28]
   d4a7a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d4a7c:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d4a7e:	3303      	adds	r3, #3
   d4a80:	69e2      	ldr	r2, [r4, #28]
   d4a82:	4649      	mov	r1, r9
   d4a84:	4620      	mov	r0, r4
   d4a86:	f7ff ff71 	bl	d496c <_ZN4MQTT11writeStringEPKcPht>
   d4a8a:	4603      	mov	r3, r0
            if (willTopic) {
   d4a8c:	f1b8 0f00 	cmp.w	r8, #0
   d4a90:	d00b      	beq.n	d4aaa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xea>
                length = writeString(willTopic, buffer, length);
   d4a92:	69e2      	ldr	r2, [r4, #28]
   d4a94:	4641      	mov	r1, r8
   d4a96:	4620      	mov	r0, r4
   d4a98:	f7ff ff68 	bl	d496c <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d4a9c:	69e2      	ldr	r2, [r4, #28]
   d4a9e:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   d4aa0:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   d4aa2:	4620      	mov	r0, r4
   d4aa4:	f7ff ff62 	bl	d496c <_ZN4MQTT11writeStringEPKcPht>
   d4aa8:	4603      	mov	r3, r0
            if(user != NULL) {
   d4aaa:	b167      	cbz	r7, d4ac6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                length = writeString(user,buffer,length);
   d4aac:	69e2      	ldr	r2, [r4, #28]
   d4aae:	4639      	mov	r1, r7
   d4ab0:	4620      	mov	r0, r4
   d4ab2:	f7ff ff5b 	bl	d496c <_ZN4MQTT11writeStringEPKcPht>
   d4ab6:	4603      	mov	r3, r0
                if(pass != NULL) {
   d4ab8:	b12e      	cbz	r6, d4ac6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                    length = writeString(pass,buffer,length);
   d4aba:	69e2      	ldr	r2, [r4, #28]
   d4abc:	4631      	mov	r1, r6
   d4abe:	4620      	mov	r0, r4
   d4ac0:	f7ff ff54 	bl	d496c <_ZN4MQTT11writeStringEPKcPht>
   d4ac4:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   d4ac6:	3b05      	subs	r3, #5
   d4ac8:	69e2      	ldr	r2, [r4, #28]
   d4aca:	b29b      	uxth	r3, r3
   d4acc:	2110      	movs	r1, #16
   d4ace:	4620      	mov	r0, r4
   d4ad0:	f7ff fef1 	bl	d48b6 <_ZN4MQTT5writeEhPht>
   d4ad4:	f000 fabe 	bl	d5054 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   d4ad8:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   d4adc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   d4ae0:	4620      	mov	r0, r4
   d4ae2:	f001 fc71 	bl	d63c8 <_ZN9TCPClient9availableEv>
   d4ae6:	bb80      	cbnz	r0, d4b4a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18a>
   d4ae8:	f000 fab4 	bl	d5054 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   d4aec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4aee:	1ac0      	subs	r0, r0, r3
   d4af0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d4af2:	4373      	muls	r3, r6
   d4af4:	4298      	cmp	r0, r3
   d4af6:	d9f3      	bls.n	d4ae0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
        _client.stop();
   d4af8:	4620      	mov	r0, r4
   d4afa:	f001 fcbf 	bl	d647c <_ZN9TCPClient4stopEv>
   d4afe:	e034      	b.n	d4b6a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1aa>
            result = _client.connect(this->ip, this->port);
   d4b00:	a802      	add	r0, sp, #8
   d4b02:	f001 f929 	bl	d5d58 <_ZN9IPAddressC1EPKh>
   d4b06:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d4b0a:	462b      	mov	r3, r5
   d4b0c:	a902      	add	r1, sp, #8
   d4b0e:	4620      	mov	r0, r4
   d4b10:	f001 fbdf 	bl	d62d2 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4b14:	e774      	b.n	d4a00 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d4b16:	4b1a      	ldr	r3, [pc, #104]	; (d4b80 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   d4b18:	6818      	ldr	r0, [r3, #0]
   d4b1a:	6859      	ldr	r1, [r3, #4]
   d4b1c:	7a1b      	ldrb	r3, [r3, #8]
   d4b1e:	f10d 0c08 	add.w	ip, sp, #8
   d4b22:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   d4b26:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d4b2a:	ab02      	add	r3, sp, #8
   d4b2c:	cb03      	ldmia	r3!, {r0, r1}
   d4b2e:	f8c2 0005 	str.w	r0, [r2, #5]
   d4b32:	f8c2 1009 	str.w	r1, [r2, #9]
   d4b36:	f89c 3000 	ldrb.w	r3, [ip]
   d4b3a:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d4b3c:	230e      	movs	r3, #14
   d4b3e:	e77c      	b.n	d4a3a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   d4b40:	2002      	movs	r0, #2
   d4b42:	e787      	b.n	d4a54 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x94>
                    v = v|(0x80>>1);
   d4b44:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   d4b48:	e78e      	b.n	d4a68 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
            uint16_t len = readPacket(&llen);
   d4b4a:	a902      	add	r1, sp, #8
   d4b4c:	4620      	mov	r0, r4
   d4b4e:	f7ff fe51 	bl	d47f4 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   d4b52:	2804      	cmp	r0, #4
   d4b54:	d1d0      	bne.n	d4af8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
                if (buffer[3] == CONN_ACCEPT) {
   d4b56:	69e3      	ldr	r3, [r4, #28]
   d4b58:	78de      	ldrb	r6, [r3, #3]
   d4b5a:	2e00      	cmp	r6, #0
   d4b5c:	d1cc      	bne.n	d4af8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
   d4b5e:	f000 fa79 	bl	d5054 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   d4b62:	2501      	movs	r5, #1
                    lastInActivity = millis();
   d4b64:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d4b66:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   d4b6a:	a801      	add	r0, sp, #4
   d4b6c:	f7ff fdd6 	bl	d471c <_ZN4MQTT11MutexLockerD1Ev>
}
   d4b70:	4628      	mov	r0, r5
   d4b72:	b008      	add	sp, #32
   d4b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   d4b78:	2500      	movs	r5, #0
   d4b7a:	e7f9      	b.n	d4b70 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>
   d4b7c:	000d7934 	.word	0x000d7934
   d4b80:	000d793b 	.word	0x000d793b

000d4b84 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   d4b84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d4b86:	2301      	movs	r3, #1
   d4b88:	2204      	movs	r2, #4
   d4b8a:	e9cd 3204 	strd	r3, r2, [sp, #16]
   d4b8e:	2300      	movs	r3, #0
   d4b90:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d4b94:	e9cd 3300 	strd	r3, r3, [sp]
   d4b98:	461a      	mov	r2, r3
   d4b9a:	f7ff ff11 	bl	d49c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d4b9e:	b007      	add	sp, #28
   d4ba0:	f85d fb04 	ldr.w	pc, [sp], #4

000d4ba4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d4ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ba8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   d4bac:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   d4bb0:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   d4bb4:	4604      	mov	r4, r0
   d4bb6:	468b      	mov	fp, r1
   d4bb8:	4616      	mov	r6, r2
   d4bba:	461f      	mov	r7, r3
    if (isConnected()) {
   d4bbc:	f7ff fef1 	bl	d49a2 <_ZN4MQTT11isConnectedEv>
   d4bc0:	4682      	mov	sl, r0
   d4bc2:	2800      	cmp	r0, #0
   d4bc4:	d051      	beq.n	d4c6a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   d4bc6:	4621      	mov	r1, r4
   d4bc8:	a801      	add	r0, sp, #4
   d4bca:	f7ff fd9c 	bl	d4706 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   d4bce:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d4bd2:	69e0      	ldr	r0, [r4, #28]
   d4bd4:	2100      	movs	r1, #0
   d4bd6:	f002 fe1f 	bl	d7818 <memset>
        length = writeString(topic, buffer, length);
   d4bda:	2305      	movs	r3, #5
   d4bdc:	69e2      	ldr	r2, [r4, #28]
   d4bde:	4659      	mov	r1, fp
   d4be0:	4620      	mov	r0, r4
   d4be2:	f7ff fec3 	bl	d496c <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   d4be6:	1e6b      	subs	r3, r5, #1
   d4be8:	2b01      	cmp	r3, #1
   d4bea:	d815      	bhi.n	d4c18 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   d4bec:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4bee:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   d4bf0:	3101      	adds	r1, #1
   d4bf2:	b289      	uxth	r1, r1
   d4bf4:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4bf6:	1209      	asrs	r1, r1, #8
   d4bf8:	5419      	strb	r1, [r3, r0]
   d4bfa:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   d4bfc:	69e3      	ldr	r3, [r4, #28]
   d4bfe:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4c00:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   d4c02:	3002      	adds	r0, #2
   d4c04:	5499      	strb	r1, [r3, r2]
   d4c06:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d4c08:	f1b8 0f00 	cmp.w	r8, #0
   d4c0c:	d004      	beq.n	d4c18 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   d4c0e:	8c23      	ldrh	r3, [r4, #32]
   d4c10:	1c5a      	adds	r2, r3, #1
   d4c12:	8422      	strh	r2, [r4, #32]
   d4c14:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d4c18:	2100      	movs	r1, #0
   d4c1a:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d4c1c:	428f      	cmp	r7, r1
   d4c1e:	69e2      	ldr	r2, [r4, #28]
   d4c20:	b29b      	uxth	r3, r3
   d4c22:	d90a      	bls.n	d4c3a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   d4c24:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   d4c28:	459c      	cmp	ip, r3
   d4c2a:	d906      	bls.n	d4c3a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   d4c2c:	f816 c001 	ldrb.w	ip, [r6, r1]
   d4c30:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d4c34:	3101      	adds	r1, #1
   d4c36:	b289      	uxth	r1, r1
   d4c38:	e7ef      	b.n	d4c1a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   d4c3a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   d4c3e:	2900      	cmp	r1, #0
   d4c40:	bf0c      	ite	eq
   d4c42:	2130      	moveq	r1, #48	; 0x30
   d4c44:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   d4c46:	f1b9 0f00 	cmp.w	r9, #0
   d4c4a:	d001      	beq.n	d4c50 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   d4c4c:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   d4c50:	2d02      	cmp	r5, #2
   d4c52:	d10e      	bne.n	d4c72 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   d4c54:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   d4c58:	3b05      	subs	r3, #5
   d4c5a:	b29b      	uxth	r3, r3
   d4c5c:	4620      	mov	r0, r4
   d4c5e:	f7ff fe2a 	bl	d48b6 <_ZN4MQTT5writeEhPht>
   d4c62:	4682      	mov	sl, r0
        MutexLocker lock(this);
   d4c64:	a801      	add	r0, sp, #4
   d4c66:	f7ff fd59 	bl	d471c <_ZN4MQTT11MutexLockerD1Ev>
}
   d4c6a:	4650      	mov	r0, sl
   d4c6c:	b003      	add	sp, #12
   d4c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   d4c72:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d4c74:	bf08      	it	eq
   d4c76:	f041 0102 	orreq.w	r1, r1, #2
   d4c7a:	e7ed      	b.n	d4c58 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000d4c7c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d4c7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d4c7e:	9c08      	ldr	r4, [sp, #32]
   d4c80:	9403      	str	r4, [sp, #12]
   d4c82:	2400      	movs	r4, #0
   d4c84:	9402      	str	r4, [sp, #8]
   d4c86:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d4c8a:	9401      	str	r4, [sp, #4]
   d4c8c:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4c90:	9400      	str	r4, [sp, #0]
   d4c92:	f7ff ff87 	bl	d4ba4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d4c96:	b004      	add	sp, #16
   d4c98:	bd10      	pop	{r4, pc}

000d4c9a <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   d4c9a:	b530      	push	{r4, r5, lr}
   d4c9c:	b087      	sub	sp, #28
   d4c9e:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d4ca0:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   d4ca2:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d4ca4:	9204      	str	r2, [sp, #16]
   d4ca6:	f002 fdf5 	bl	d7894 <strlen>
   d4caa:	2500      	movs	r5, #0
   d4cac:	4603      	mov	r3, r0
   d4cae:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d4cb2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d4cb6:	9500      	str	r5, [sp, #0]
   d4cb8:	4620      	mov	r0, r4
   d4cba:	f7ff ffdf 	bl	d4c7c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d4cbe:	b007      	add	sp, #28
   d4cc0:	bd30      	pop	{r4, r5, pc}

000d4cc2 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   d4cc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4cc4:	4604      	mov	r4, r0
   d4cc6:	460e      	mov	r6, r1
    if (isConnected()) {
   d4cc8:	f7ff fe6b 	bl	d49a2 <_ZN4MQTT11isConnectedEv>
   d4ccc:	4605      	mov	r5, r0
   d4cce:	b1c8      	cbz	r0, d4d04 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   d4cd0:	4621      	mov	r1, r4
   d4cd2:	a801      	add	r0, sp, #4
   d4cd4:	f7ff fd17 	bl	d4706 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d4cd8:	69e3      	ldr	r3, [r4, #28]
   d4cda:	2262      	movs	r2, #98	; 0x62
   d4cdc:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d4cde:	69e3      	ldr	r3, [r4, #28]
   d4ce0:	2202      	movs	r2, #2
   d4ce2:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d4ce4:	69e3      	ldr	r3, [r4, #28]
   d4ce6:	1232      	asrs	r2, r6, #8
   d4ce8:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d4cea:	69e3      	ldr	r3, [r4, #28]
   d4cec:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d4cee:	69e1      	ldr	r1, [r4, #28]
   d4cf0:	2204      	movs	r2, #4
   d4cf2:	4620      	mov	r0, r4
   d4cf4:	f001 f9cb 	bl	d608e <_ZN9TCPClient5writeEPKhj>
   d4cf8:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d4cfa:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d4cfc:	bf18      	it	ne
   d4cfe:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d4d00:	f7ff fd0c 	bl	d471c <_ZN4MQTT11MutexLockerD1Ev>
}
   d4d04:	4628      	mov	r0, r5
   d4d06:	b002      	add	sp, #8
   d4d08:	bd70      	pop	{r4, r5, r6, pc}

000d4d0a <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   d4d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4d0c:	4604      	mov	r4, r0
   d4d0e:	460e      	mov	r6, r1
    if (isConnected()) {
   d4d10:	f7ff fe47 	bl	d49a2 <_ZN4MQTT11isConnectedEv>
   d4d14:	4605      	mov	r5, r0
   d4d16:	b1c8      	cbz	r0, d4d4c <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   d4d18:	4621      	mov	r1, r4
   d4d1a:	a801      	add	r0, sp, #4
   d4d1c:	f7ff fcf3 	bl	d4706 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d4d20:	69e3      	ldr	r3, [r4, #28]
   d4d22:	2272      	movs	r2, #114	; 0x72
   d4d24:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d4d26:	69e3      	ldr	r3, [r4, #28]
   d4d28:	2202      	movs	r2, #2
   d4d2a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d4d2c:	69e3      	ldr	r3, [r4, #28]
   d4d2e:	1232      	asrs	r2, r6, #8
   d4d30:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d4d32:	69e3      	ldr	r3, [r4, #28]
   d4d34:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d4d36:	69e1      	ldr	r1, [r4, #28]
   d4d38:	2204      	movs	r2, #4
   d4d3a:	4620      	mov	r0, r4
   d4d3c:	f001 f9a7 	bl	d608e <_ZN9TCPClient5writeEPKhj>
   d4d40:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d4d42:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d4d44:	bf18      	it	ne
   d4d46:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d4d48:	f7ff fce8 	bl	d471c <_ZN4MQTT11MutexLockerD1Ev>
}
   d4d4c:	4628      	mov	r0, r5
   d4d4e:	b002      	add	sp, #8
   d4d50:	bd70      	pop	{r4, r5, r6, pc}

000d4d52 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   d4d52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4d56:	ed2d 8b02 	vpush	{d8}
   d4d5a:	b087      	sub	sp, #28
   d4d5c:	af00      	add	r7, sp, #0
   d4d5e:	4604      	mov	r4, r0
    if (isConnected()) {
   d4d60:	f7ff fe1f 	bl	d49a2 <_ZN4MQTT11isConnectedEv>
   d4d64:	4681      	mov	r9, r0
   d4d66:	b1f8      	cbz	r0, d4da8 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   d4d68:	4621      	mov	r1, r4
   d4d6a:	f107 0014 	add.w	r0, r7, #20
   d4d6e:	f7ff fcca 	bl	d4706 <_ZN4MQTT11MutexLockerC1EPS_>
   d4d72:	f000 f96f 	bl	d5054 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d4d76:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d4d78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4d7c:	4353      	muls	r3, r2
   d4d7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d4d80:	1a82      	subs	r2, r0, r2
   d4d82:	429a      	cmp	r2, r3
   d4d84:	4606      	mov	r6, r0
   d4d86:	d803      	bhi.n	d4d90 <_ZN4MQTT4loopEv+0x3e>
   d4d88:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d4d8a:	1a82      	subs	r2, r0, r2
   d4d8c:	4293      	cmp	r3, r2
   d4d8e:	d221      	bcs.n	d4dd4 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   d4d90:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d4d94:	b17b      	cbz	r3, d4db6 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   d4d96:	4620      	mov	r0, r4
   d4d98:	f001 fb70 	bl	d647c <_ZN9TCPClient4stopEv>
                return false;
   d4d9c:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   d4da0:	f107 0014 	add.w	r0, r7, #20
   d4da4:	f7ff fcba 	bl	d471c <_ZN4MQTT11MutexLockerD1Ev>
}
   d4da8:	4648      	mov	r0, r9
   d4daa:	371c      	adds	r7, #28
   d4dac:	46bd      	mov	sp, r7
   d4dae:	ecbd 8b02 	vpop	{d8}
   d4db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   d4db6:	69e2      	ldr	r2, [r4, #28]
   d4db8:	21c0      	movs	r1, #192	; 0xc0
   d4dba:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d4dbc:	69e2      	ldr	r2, [r4, #28]
   d4dbe:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d4dc0:	69e1      	ldr	r1, [r4, #28]
   d4dc2:	2202      	movs	r2, #2
   d4dc4:	4620      	mov	r0, r4
   d4dc6:	f001 f962 	bl	d608e <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   d4dca:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   d4dce:	2301      	movs	r3, #1
   d4dd0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   d4dd4:	4620      	mov	r0, r4
   d4dd6:	f001 faf7 	bl	d63c8 <_ZN9TCPClient9availableEv>
   d4dda:	2800      	cmp	r0, #0
   d4ddc:	d0e0      	beq.n	d4da0 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   d4dde:	f107 0113 	add.w	r1, r7, #19
   d4de2:	4620      	mov	r0, r4
   d4de4:	f7ff fd06 	bl	d47f4 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   d4de8:	4683      	mov	fp, r0
   d4dea:	2800      	cmp	r0, #0
   d4dec:	d0d8      	beq.n	d4da0 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   d4dee:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   d4df0:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d4df2:	7819      	ldrb	r1, [r3, #0]
   d4df4:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d4df8:	2a30      	cmp	r2, #48	; 0x30
   d4dfa:	d17f      	bne.n	d4efc <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   d4dfc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   d4e00:	f1ba 0f00 	cmp.w	sl, #0
   d4e04:	d0cc      	beq.n	d4da0 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d4e06:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   d4e0a:	466a      	mov	r2, sp
   d4e0c:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d4e10:	eb03 020c 	add.w	r2, r3, ip
   d4e14:	7855      	ldrb	r5, [r2, #1]
   d4e16:	7891      	ldrb	r1, [r2, #2]
   d4e18:	eb01 2105 	add.w	r1, r1, r5, lsl #8
   d4e1c:	b28d      	uxth	r5, r1
                        char topic[tl+1];
   d4e1e:	f105 0208 	add.w	r2, r5, #8
   d4e22:	4669      	mov	r1, sp
   d4e24:	08d2      	lsrs	r2, r2, #3
   d4e26:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   d4e2a:	4695      	mov	sp, r2
   d4e2c:	f10c 0203 	add.w	r2, ip, #3
   d4e30:	60fa      	str	r2, [r7, #12]
   d4e32:	eb03 0e02 	add.w	lr, r3, r2
   d4e36:	eb0d 0205 	add.w	r2, sp, r5
   d4e3a:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   d4e3c:	f8c7 d008 	str.w	sp, [r7, #8]
   d4e40:	607a      	str	r2, [r7, #4]
   d4e42:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   d4e46:	428a      	cmp	r2, r1
   d4e48:	d006      	beq.n	d4e58 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   d4e4a:	460a      	mov	r2, r1
   d4e4c:	f81e 8b01 	ldrb.w	r8, [lr], #1
   d4e50:	f802 8b01 	strb.w	r8, [r2], #1
   d4e54:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   d4e56:	e7f4      	b.n	d4e42 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   d4e58:	2200      	movs	r2, #0
   d4e5a:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d4e5c:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4e60:	68f9      	ldr	r1, [r7, #12]
   d4e62:	f008 0806 	and.w	r8, r8, #6
   d4e66:	ebab 020c 	sub.w	r2, fp, ip
   d4e6a:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d4e6c:	f1b8 0f02 	cmp.w	r8, #2
   d4e70:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4e74:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d4e76:	d125      	bne.n	d4ec4 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4e78:	f813 e001 	ldrb.w	lr, [r3, r1]
   d4e7c:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   d4e7e:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4e80:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   d4e84:	f10c 0105 	add.w	r1, ip, #5
   d4e88:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   d4e8a:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4e8c:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   d4e90:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d4e92:	69e3      	ldr	r3, [r4, #28]
   d4e94:	2240      	movs	r2, #64	; 0x40
   d4e96:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d4e98:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4e9a:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   d4e9e:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d4ea2:	69e3      	ldr	r3, [r4, #28]
   d4ea4:	ea4f 222b 	mov.w	r2, fp, asr #8
   d4ea8:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d4eaa:	69e3      	ldr	r3, [r4, #28]
   d4eac:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   d4eb0:	69e1      	ldr	r1, [r4, #28]
   d4eb2:	2204      	movs	r2, #4
   d4eb4:	4620      	mov	r0, r4
   d4eb6:	f001 f8ea 	bl	d608e <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   d4eba:	6266      	str	r6, [r4, #36]	; 0x24
   d4ebc:	ee18 3a10 	vmov	r3, s16
   d4ec0:	469d      	mov	sp, r3
   d4ec2:	e76d      	b.n	d4da0 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d4ec4:	f1b8 0f04 	cmp.w	r8, #4
   d4ec8:	d115      	bne.n	d4ef6 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4eca:	f813 e001 	ldrb.w	lr, [r3, r1]
   d4ece:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d4ed0:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4ed2:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   d4ed6:	f10c 0105 	add.w	r1, ip, #5
   d4eda:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d4edc:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4ede:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d4ee2:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   d4ee4:	69e3      	ldr	r3, [r4, #28]
   d4ee6:	2250      	movs	r2, #80	; 0x50
   d4ee8:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   d4eea:	69e3      	ldr	r3, [r4, #28]
   d4eec:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4eee:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   d4ef2:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   d4ef4:	e7d5      	b.n	d4ea2 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   d4ef6:	4419      	add	r1, r3
   d4ef8:	47d0      	blx	sl
   d4efa:	e7df      	b.n	d4ebc <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   d4efc:	2a50      	cmp	r2, #80	; 0x50
   d4efe:	d108      	bne.n	d4f12 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   d4f00:	789a      	ldrb	r2, [r3, #2]
   d4f02:	78d9      	ldrb	r1, [r3, #3]
   d4f04:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   d4f08:	b289      	uxth	r1, r1
   d4f0a:	4620      	mov	r0, r4
   d4f0c:	f7ff fed9 	bl	d4cc2 <_ZN4MQTT14publishReleaseEt>
   d4f10:	e746      	b.n	d4da0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   d4f12:	2a40      	cmp	r2, #64	; 0x40
   d4f14:	d112      	bne.n	d4f3c <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   d4f16:	6b62      	ldr	r2, [r4, #52]	; 0x34
   d4f18:	2a00      	cmp	r2, #0
   d4f1a:	f43f af41 	beq.w	d4da0 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d4f1e:	f1bb 0f04 	cmp.w	fp, #4
   d4f22:	f47f af3d 	bne.w	d4da0 <_ZN4MQTT4loopEv+0x4e>
   d4f26:	f011 0f06 	tst.w	r1, #6
   d4f2a:	f47f af39 	bne.w	d4da0 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   d4f2e:	7899      	ldrb	r1, [r3, #2]
   d4f30:	78d8      	ldrb	r0, [r3, #3]
   d4f32:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   d4f36:	b280      	uxth	r0, r0
   d4f38:	4790      	blx	r2
   d4f3a:	e731      	b.n	d4da0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   d4f3c:	2a60      	cmp	r2, #96	; 0x60
   d4f3e:	d108      	bne.n	d4f52 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   d4f40:	789a      	ldrb	r2, [r3, #2]
   d4f42:	78d9      	ldrb	r1, [r3, #3]
   d4f44:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   d4f48:	b289      	uxth	r1, r1
   d4f4a:	4620      	mov	r0, r4
   d4f4c:	f7ff fedd 	bl	d4d0a <_ZN4MQTT15publishCompleteEt>
   d4f50:	e726      	b.n	d4da0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   d4f52:	2a70      	cmp	r2, #112	; 0x70
   d4f54:	d0df      	beq.n	d4f16 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   d4f56:	2a90      	cmp	r2, #144	; 0x90
   d4f58:	f43f af22 	beq.w	d4da0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   d4f5c:	2ac0      	cmp	r2, #192	; 0xc0
   d4f5e:	d10a      	bne.n	d4f76 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   d4f60:	22d0      	movs	r2, #208	; 0xd0
   d4f62:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d4f64:	69e3      	ldr	r3, [r4, #28]
   d4f66:	2200      	movs	r2, #0
   d4f68:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d4f6a:	69e1      	ldr	r1, [r4, #28]
   d4f6c:	2202      	movs	r2, #2
   d4f6e:	4620      	mov	r0, r4
   d4f70:	f001 f88d 	bl	d608e <_ZN9TCPClient5writeEPKhj>
   d4f74:	e714      	b.n	d4da0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   d4f76:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   d4f78:	bf04      	itt	eq
   d4f7a:	2300      	moveq	r3, #0
   d4f7c:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   d4f80:	e70e      	b.n	d4da0 <_ZN4MQTT4loopEv+0x4e>
	...

000d4f84 <_ZN4MQTTD1Ev>:
MQTT::~MQTT() {
   d4f84:	b538      	push	{r3, r4, r5, lr}
   d4f86:	4605      	mov	r5, r0
    if (isConnected()) {
   d4f88:	f7ff fd0b 	bl	d49a2 <_ZN4MQTT11isConnectedEv>
   d4f8c:	b110      	cbz	r0, d4f94 <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d4f8e:	4628      	mov	r0, r5
   d4f90:	f7ff fccf 	bl	d4932 <_ZN4MQTT10disconnectEv>
    if (buffer != NULL)
   d4f94:	69e8      	ldr	r0, [r5, #28]
   d4f96:	b108      	cbz	r0, d4f9c <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d4f98:	f7ff f881 	bl	d409e <_ZdaPv>
MQTT::~MQTT() {
   d4f9c:	f105 0038 	add.w	r0, r5, #56	; 0x38
   d4fa0:	f000 fc58 	bl	d5854 <_ZN6StringD1Ev>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4fa4:	69ac      	ldr	r4, [r5, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4fa6:	4b0a      	ldr	r3, [pc, #40]	; (d4fd0 <_ZN4MQTTD1Ev+0x4c>)
   d4fa8:	602b      	str	r3, [r5, #0]
   d4faa:	b17c      	cbz	r4, d4fcc <_ZN4MQTTD1Ev+0x48>
      if (--_M_use_count == 0)
   d4fac:	6863      	ldr	r3, [r4, #4]
   d4fae:	3b01      	subs	r3, #1
   d4fb0:	6063      	str	r3, [r4, #4]
   d4fb2:	b95b      	cbnz	r3, d4fcc <_ZN4MQTTD1Ev+0x48>
          _M_dispose();
   d4fb4:	6823      	ldr	r3, [r4, #0]
   d4fb6:	4620      	mov	r0, r4
   d4fb8:	689b      	ldr	r3, [r3, #8]
   d4fba:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4fbc:	68a3      	ldr	r3, [r4, #8]
   d4fbe:	3b01      	subs	r3, #1
   d4fc0:	60a3      	str	r3, [r4, #8]
   d4fc2:	b91b      	cbnz	r3, d4fcc <_ZN4MQTTD1Ev+0x48>
            _M_destroy();
   d4fc4:	6823      	ldr	r3, [r4, #0]
   d4fc6:	4620      	mov	r0, r4
   d4fc8:	68db      	ldr	r3, [r3, #12]
   d4fca:	4798      	blx	r3
}
   d4fcc:	4628      	mov	r0, r5
   d4fce:	bd38      	pop	{r3, r4, r5, pc}
   d4fd0:	000d7a88 	.word	0x000d7a88

000d4fd4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <netdb_freeaddrinfo+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	689b      	ldr	r3, [r3, #8]
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	00030268 	.word	0x00030268

000d4fe4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <netdb_getaddrinfo+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	68db      	ldr	r3, [r3, #12]
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	00030268 	.word	0x00030268

000d4ff4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <HAL_Pin_Mode+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	689b      	ldr	r3, [r3, #8]
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	0003022c 	.word	0x0003022c

000d5004 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <HAL_Get_Pin_Mode+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	68db      	ldr	r3, [r3, #12]
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	0003022c 	.word	0x0003022c

000d5014 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <HAL_GPIO_Write+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	691b      	ldr	r3, [r3, #16]
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	0003022c 	.word	0x0003022c

000d5024 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <HAL_GPIO_Read+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	695b      	ldr	r3, [r3, #20]
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	0003022c 	.word	0x0003022c

000d5034 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <if_index_to_name+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	695b      	ldr	r3, [r3, #20]
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	0003026c 	.word	0x0003026c

000d5044 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <HAL_RNG_GetRandomNumber+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	685b      	ldr	r3, [r3, #4]
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	00030218 	.word	0x00030218

000d5054 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	695b      	ldr	r3, [r3, #20]
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	00030218 	.word	0x00030218

000d5064 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <os_mutex_create+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	00030248 	.word	0x00030248

000d5074 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <os_mutex_lock+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	00030248 	.word	0x00030248

000d5084 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <os_mutex_unlock+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	00030248 	.word	0x00030248

000d5094 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <os_mutex_recursive_create+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	00030248 	.word	0x00030248

000d50a4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <os_mutex_recursive_destroy+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	00030248 	.word	0x00030248

000d50b4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <inet_inet_ntop+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	695b      	ldr	r3, [r3, #20]
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	00030264 	.word	0x00030264

000d50c4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <inet_htonl+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	6a1b      	ldr	r3, [r3, #32]
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	00030264 	.word	0x00030264

000d50d4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <inet_htons+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	00030264 	.word	0x00030264

000d50e4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <hal_usart_init+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	681b      	ldr	r3, [r3, #0]
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	0003023c 	.word	0x0003023c

000d50f4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <hal_usart_write+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	68db      	ldr	r3, [r3, #12]
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	0003023c 	.word	0x0003023c

000d5104 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <hal_usart_available+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	691b      	ldr	r3, [r3, #16]
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	0003023c 	.word	0x0003023c

000d5114 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b02      	ldr	r3, [pc, #8]	; (d5120 <hal_usart_read+0xc>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	695b      	ldr	r3, [r3, #20]
   d511c:	9301      	str	r3, [sp, #4]
   d511e:	bd08      	pop	{r3, pc}
   d5120:	0003023c 	.word	0x0003023c

000d5124 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5124:	b508      	push	{r3, lr}
   d5126:	4b02      	ldr	r3, [pc, #8]	; (d5130 <hal_usart_peek+0xc>)
   d5128:	681b      	ldr	r3, [r3, #0]
   d512a:	699b      	ldr	r3, [r3, #24]
   d512c:	9301      	str	r3, [sp, #4]
   d512e:	bd08      	pop	{r3, pc}
   d5130:	0003023c 	.word	0x0003023c

000d5134 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b02      	ldr	r3, [pc, #8]	; (d5140 <hal_usart_flush+0xc>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	69db      	ldr	r3, [r3, #28]
   d513c:	9301      	str	r3, [sp, #4]
   d513e:	bd08      	pop	{r3, pc}
   d5140:	0003023c 	.word	0x0003023c

000d5144 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5144:	b508      	push	{r3, lr}
   d5146:	4b02      	ldr	r3, [pc, #8]	; (d5150 <hal_usart_is_enabled+0xc>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	6a1b      	ldr	r3, [r3, #32]
   d514c:	9301      	str	r3, [sp, #4]
   d514e:	bd08      	pop	{r3, pc}
   d5150:	0003023c 	.word	0x0003023c

000d5154 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5154:	b508      	push	{r3, lr}
   d5156:	4b02      	ldr	r3, [pc, #8]	; (d5160 <hal_usart_available_data_for_write+0xc>)
   d5158:	681b      	ldr	r3, [r3, #0]
   d515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d515c:	9301      	str	r3, [sp, #4]
   d515e:	bd08      	pop	{r3, pc}
   d5160:	0003023c 	.word	0x0003023c

000d5164 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5164:	b508      	push	{r3, lr}
   d5166:	4b02      	ldr	r3, [pc, #8]	; (d5170 <hal_i2c_begin+0xc>)
   d5168:	681b      	ldr	r3, [r3, #0]
   d516a:	68db      	ldr	r3, [r3, #12]
   d516c:	9301      	str	r3, [sp, #4]
   d516e:	bd08      	pop	{r3, pc}
   d5170:	00030228 	.word	0x00030228

000d5174 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5174:	b508      	push	{r3, lr}
   d5176:	4b02      	ldr	r3, [pc, #8]	; (d5180 <hal_i2c_begin_transmission+0xc>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	699b      	ldr	r3, [r3, #24]
   d517c:	9301      	str	r3, [sp, #4]
   d517e:	bd08      	pop	{r3, pc}
   d5180:	00030228 	.word	0x00030228

000d5184 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5184:	b508      	push	{r3, lr}
   d5186:	4b02      	ldr	r3, [pc, #8]	; (d5190 <hal_i2c_end_transmission+0xc>)
   d5188:	681b      	ldr	r3, [r3, #0]
   d518a:	69db      	ldr	r3, [r3, #28]
   d518c:	9301      	str	r3, [sp, #4]
   d518e:	bd08      	pop	{r3, pc}
   d5190:	00030228 	.word	0x00030228

000d5194 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5194:	b508      	push	{r3, lr}
   d5196:	4b02      	ldr	r3, [pc, #8]	; (d51a0 <hal_i2c_write+0xc>)
   d5198:	681b      	ldr	r3, [r3, #0]
   d519a:	6a1b      	ldr	r3, [r3, #32]
   d519c:	9301      	str	r3, [sp, #4]
   d519e:	bd08      	pop	{r3, pc}
   d51a0:	00030228 	.word	0x00030228

000d51a4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d51a4:	b508      	push	{r3, lr}
   d51a6:	4b02      	ldr	r3, [pc, #8]	; (d51b0 <hal_i2c_available+0xc>)
   d51a8:	681b      	ldr	r3, [r3, #0]
   d51aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d51ac:	9301      	str	r3, [sp, #4]
   d51ae:	bd08      	pop	{r3, pc}
   d51b0:	00030228 	.word	0x00030228

000d51b4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d51b4:	b508      	push	{r3, lr}
   d51b6:	4b02      	ldr	r3, [pc, #8]	; (d51c0 <hal_i2c_read+0xc>)
   d51b8:	681b      	ldr	r3, [r3, #0]
   d51ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d51bc:	9301      	str	r3, [sp, #4]
   d51be:	bd08      	pop	{r3, pc}
   d51c0:	00030228 	.word	0x00030228

000d51c4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d51c4:	b508      	push	{r3, lr}
   d51c6:	4b02      	ldr	r3, [pc, #8]	; (d51d0 <hal_i2c_peek+0xc>)
   d51c8:	681b      	ldr	r3, [r3, #0]
   d51ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d51cc:	9301      	str	r3, [sp, #4]
   d51ce:	bd08      	pop	{r3, pc}
   d51d0:	00030228 	.word	0x00030228

000d51d4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d51d4:	b508      	push	{r3, lr}
   d51d6:	4b02      	ldr	r3, [pc, #8]	; (d51e0 <hal_i2c_flush+0xc>)
   d51d8:	681b      	ldr	r3, [r3, #0]
   d51da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d51dc:	9301      	str	r3, [sp, #4]
   d51de:	bd08      	pop	{r3, pc}
   d51e0:	00030228 	.word	0x00030228

000d51e4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d51e4:	b508      	push	{r3, lr}
   d51e6:	4b02      	ldr	r3, [pc, #8]	; (d51f0 <hal_i2c_is_enabled+0xc>)
   d51e8:	681b      	ldr	r3, [r3, #0]
   d51ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d51ec:	9301      	str	r3, [sp, #4]
   d51ee:	bd08      	pop	{r3, pc}
   d51f0:	00030228 	.word	0x00030228

000d51f4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d51f4:	b508      	push	{r3, lr}
   d51f6:	4b02      	ldr	r3, [pc, #8]	; (d5200 <hal_i2c_init+0xc>)
   d51f8:	681b      	ldr	r3, [r3, #0]
   d51fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d51fc:	9301      	str	r3, [sp, #4]
   d51fe:	bd08      	pop	{r3, pc}
   d5200:	00030228 	.word	0x00030228

000d5204 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5204:	b508      	push	{r3, lr}
   d5206:	4b02      	ldr	r3, [pc, #8]	; (d5210 <hal_i2c_request_ex+0xc>)
   d5208:	681b      	ldr	r3, [r3, #0]
   d520a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d520c:	9301      	str	r3, [sp, #4]
   d520e:	bd08      	pop	{r3, pc}
   d5210:	00030228 	.word	0x00030228

000d5214 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5214:	b508      	push	{r3, lr}
   d5216:	4b02      	ldr	r3, [pc, #8]	; (d5220 <sock_setsockopt+0xc>)
   d5218:	681b      	ldr	r3, [r3, #0]
   d521a:	699b      	ldr	r3, [r3, #24]
   d521c:	9301      	str	r3, [sp, #4]
   d521e:	bd08      	pop	{r3, pc}
   d5220:	00030238 	.word	0x00030238

000d5224 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5224:	b508      	push	{r3, lr}
   d5226:	4b02      	ldr	r3, [pc, #8]	; (d5230 <sock_close+0xc>)
   d5228:	681b      	ldr	r3, [r3, #0]
   d522a:	69db      	ldr	r3, [r3, #28]
   d522c:	9301      	str	r3, [sp, #4]
   d522e:	bd08      	pop	{r3, pc}
   d5230:	00030238 	.word	0x00030238

000d5234 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5234:	b508      	push	{r3, lr}
   d5236:	4b02      	ldr	r3, [pc, #8]	; (d5240 <sock_connect+0xc>)
   d5238:	681b      	ldr	r3, [r3, #0]
   d523a:	6a1b      	ldr	r3, [r3, #32]
   d523c:	9301      	str	r3, [sp, #4]
   d523e:	bd08      	pop	{r3, pc}
   d5240:	00030238 	.word	0x00030238

000d5244 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5244:	b508      	push	{r3, lr}
   d5246:	4b02      	ldr	r3, [pc, #8]	; (d5250 <sock_recv+0xc>)
   d5248:	681b      	ldr	r3, [r3, #0]
   d524a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d524c:	9301      	str	r3, [sp, #4]
   d524e:	bd08      	pop	{r3, pc}
   d5250:	00030238 	.word	0x00030238

000d5254 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5254:	b508      	push	{r3, lr}
   d5256:	4b02      	ldr	r3, [pc, #8]	; (d5260 <sock_send+0xc>)
   d5258:	681b      	ldr	r3, [r3, #0]
   d525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d525c:	9301      	str	r3, [sp, #4]
   d525e:	bd08      	pop	{r3, pc}
   d5260:	00030238 	.word	0x00030238

000d5264 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5264:	b508      	push	{r3, lr}
   d5266:	4b02      	ldr	r3, [pc, #8]	; (d5270 <sock_socket+0xc>)
   d5268:	681b      	ldr	r3, [r3, #0]
   d526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d526c:	9301      	str	r3, [sp, #4]
   d526e:	bd08      	pop	{r3, pc}
   d5270:	00030238 	.word	0x00030238

000d5274 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5274:	b508      	push	{r3, lr}
   d5276:	4b02      	ldr	r3, [pc, #8]	; (d5280 <hal_spi_begin+0xc>)
   d5278:	681b      	ldr	r3, [r3, #0]
   d527a:	681b      	ldr	r3, [r3, #0]
   d527c:	9301      	str	r3, [sp, #4]
   d527e:	bd08      	pop	{r3, pc}
   d5280:	00030230 	.word	0x00030230

000d5284 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d5284:	b508      	push	{r3, lr}
   d5286:	4b02      	ldr	r3, [pc, #8]	; (d5290 <hal_spi_set_bit_order+0xc>)
   d5288:	681b      	ldr	r3, [r3, #0]
   d528a:	689b      	ldr	r3, [r3, #8]
   d528c:	9301      	str	r3, [sp, #4]
   d528e:	bd08      	pop	{r3, pc}
   d5290:	00030230 	.word	0x00030230

000d5294 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d5294:	b508      	push	{r3, lr}
   d5296:	4b02      	ldr	r3, [pc, #8]	; (d52a0 <hal_spi_set_data_mode+0xc>)
   d5298:	681b      	ldr	r3, [r3, #0]
   d529a:	68db      	ldr	r3, [r3, #12]
   d529c:	9301      	str	r3, [sp, #4]
   d529e:	bd08      	pop	{r3, pc}
   d52a0:	00030230 	.word	0x00030230

000d52a4 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d52a4:	b508      	push	{r3, lr}
   d52a6:	4b02      	ldr	r3, [pc, #8]	; (d52b0 <hal_spi_set_clock_divider+0xc>)
   d52a8:	681b      	ldr	r3, [r3, #0]
   d52aa:	691b      	ldr	r3, [r3, #16]
   d52ac:	9301      	str	r3, [sp, #4]
   d52ae:	bd08      	pop	{r3, pc}
   d52b0:	00030230 	.word	0x00030230

000d52b4 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d52b4:	b508      	push	{r3, lr}
   d52b6:	4b02      	ldr	r3, [pc, #8]	; (d52c0 <hal_spi_transfer+0xc>)
   d52b8:	681b      	ldr	r3, [r3, #0]
   d52ba:	695b      	ldr	r3, [r3, #20]
   d52bc:	9301      	str	r3, [sp, #4]
   d52be:	bd08      	pop	{r3, pc}
   d52c0:	00030230 	.word	0x00030230

000d52c4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d52c4:	b508      	push	{r3, lr}
   d52c6:	4b02      	ldr	r3, [pc, #8]	; (d52d0 <hal_spi_init+0xc>)
   d52c8:	681b      	ldr	r3, [r3, #0]
   d52ca:	69db      	ldr	r3, [r3, #28]
   d52cc:	9301      	str	r3, [sp, #4]
   d52ce:	bd08      	pop	{r3, pc}
   d52d0:	00030230 	.word	0x00030230

000d52d4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d52d4:	b508      	push	{r3, lr}
   d52d6:	4b02      	ldr	r3, [pc, #8]	; (d52e0 <hal_spi_is_enabled+0xc>)
   d52d8:	681b      	ldr	r3, [r3, #0]
   d52da:	6a1b      	ldr	r3, [r3, #32]
   d52dc:	9301      	str	r3, [sp, #4]
   d52de:	bd08      	pop	{r3, pc}
   d52e0:	00030230 	.word	0x00030230

000d52e4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d52e4:	b508      	push	{r3, lr}
   d52e6:	4b02      	ldr	r3, [pc, #8]	; (d52f0 <hal_spi_info+0xc>)
   d52e8:	681b      	ldr	r3, [r3, #0]
   d52ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d52ec:	9301      	str	r3, [sp, #4]
   d52ee:	bd08      	pop	{r3, pc}
   d52f0:	00030230 	.word	0x00030230

000d52f4 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d52f4:	b508      	push	{r3, lr}
   d52f6:	4b02      	ldr	r3, [pc, #8]	; (d5300 <hal_spi_acquire+0xc>)
   d52f8:	681b      	ldr	r3, [r3, #0]
   d52fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d52fc:	9301      	str	r3, [sp, #4]
   d52fe:	bd08      	pop	{r3, pc}
   d5300:	00030230 	.word	0x00030230

000d5304 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5304:	b508      	push	{r3, lr}
   d5306:	4b02      	ldr	r3, [pc, #8]	; (d5310 <hal_spi_release+0xc>)
   d5308:	681b      	ldr	r3, [r3, #0]
   d530a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d530c:	9301      	str	r3, [sp, #4]
   d530e:	bd08      	pop	{r3, pc}
   d5310:	00030230 	.word	0x00030230

000d5314 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5314:	b508      	push	{r3, lr}
   d5316:	4b02      	ldr	r3, [pc, #8]	; (d5320 <HAL_USB_USART_Init+0xc>)
   d5318:	681b      	ldr	r3, [r3, #0]
   d531a:	681b      	ldr	r3, [r3, #0]
   d531c:	9301      	str	r3, [sp, #4]
   d531e:	bd08      	pop	{r3, pc}
   d5320:	0003024c 	.word	0x0003024c

000d5324 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5324:	b508      	push	{r3, lr}
   d5326:	4b02      	ldr	r3, [pc, #8]	; (d5330 <HAL_USB_USART_Available_Data+0xc>)
   d5328:	681b      	ldr	r3, [r3, #0]
   d532a:	691b      	ldr	r3, [r3, #16]
   d532c:	9301      	str	r3, [sp, #4]
   d532e:	bd08      	pop	{r3, pc}
   d5330:	0003024c 	.word	0x0003024c

000d5334 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5334:	b508      	push	{r3, lr}
   d5336:	4b02      	ldr	r3, [pc, #8]	; (d5340 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5338:	681b      	ldr	r3, [r3, #0]
   d533a:	695b      	ldr	r3, [r3, #20]
   d533c:	9301      	str	r3, [sp, #4]
   d533e:	bd08      	pop	{r3, pc}
   d5340:	0003024c 	.word	0x0003024c

000d5344 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5344:	b508      	push	{r3, lr}
   d5346:	4b02      	ldr	r3, [pc, #8]	; (d5350 <HAL_USB_USART_Receive_Data+0xc>)
   d5348:	681b      	ldr	r3, [r3, #0]
   d534a:	699b      	ldr	r3, [r3, #24]
   d534c:	9301      	str	r3, [sp, #4]
   d534e:	bd08      	pop	{r3, pc}
   d5350:	0003024c 	.word	0x0003024c

000d5354 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5354:	b508      	push	{r3, lr}
   d5356:	4b02      	ldr	r3, [pc, #8]	; (d5360 <HAL_USB_USART_Send_Data+0xc>)
   d5358:	681b      	ldr	r3, [r3, #0]
   d535a:	69db      	ldr	r3, [r3, #28]
   d535c:	9301      	str	r3, [sp, #4]
   d535e:	bd08      	pop	{r3, pc}
   d5360:	0003024c 	.word	0x0003024c

000d5364 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5364:	b508      	push	{r3, lr}
   d5366:	4b02      	ldr	r3, [pc, #8]	; (d5370 <HAL_USB_USART_Flush_Data+0xc>)
   d5368:	681b      	ldr	r3, [r3, #0]
   d536a:	6a1b      	ldr	r3, [r3, #32]
   d536c:	9301      	str	r3, [sp, #4]
   d536e:	bd08      	pop	{r3, pc}
   d5370:	0003024c 	.word	0x0003024c

000d5374 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5374:	b508      	push	{r3, lr}
   d5376:	4b02      	ldr	r3, [pc, #8]	; (d5380 <log_message+0xc>)
   d5378:	681b      	ldr	r3, [r3, #0]
   d537a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d537c:	9301      	str	r3, [sp, #4]
   d537e:	bd08      	pop	{r3, pc}
   d5380:	00030260 	.word	0x00030260

000d5384 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5384:	b508      	push	{r3, lr}
   d5386:	4b02      	ldr	r3, [pc, #8]	; (d5390 <set_system_mode+0xc>)
   d5388:	681b      	ldr	r3, [r3, #0]
   d538a:	685b      	ldr	r3, [r3, #4]
   d538c:	9301      	str	r3, [sp, #4]
   d538e:	bd08      	pop	{r3, pc}
   d5390:	00030220 	.word	0x00030220

000d5394 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5394:	b508      	push	{r3, lr}
   d5396:	4b02      	ldr	r3, [pc, #8]	; (d53a0 <system_delay_ms+0xc>)
   d5398:	681b      	ldr	r3, [r3, #0]
   d539a:	695b      	ldr	r3, [r3, #20]
   d539c:	9301      	str	r3, [sp, #4]
   d539e:	bd08      	pop	{r3, pc}
   d53a0:	00030220 	.word	0x00030220

000d53a4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d53a4:	b508      	push	{r3, lr}
   d53a6:	4b03      	ldr	r3, [pc, #12]	; (d53b4 <system_ctrl_set_app_request_handler+0x10>)
   d53a8:	681b      	ldr	r3, [r3, #0]
   d53aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d53ae:	9301      	str	r3, [sp, #4]
   d53b0:	bd08      	pop	{r3, pc}
   d53b2:	0000      	.short	0x0000
   d53b4:	00030220 	.word	0x00030220

000d53b8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d53b8:	b508      	push	{r3, lr}
   d53ba:	4b03      	ldr	r3, [pc, #12]	; (d53c8 <system_ctrl_set_result+0x10>)
   d53bc:	681b      	ldr	r3, [r3, #0]
   d53be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d53c2:	9301      	str	r3, [sp, #4]
   d53c4:	bd08      	pop	{r3, pc}
   d53c6:	0000      	.short	0x0000
   d53c8:	00030220 	.word	0x00030220

000d53cc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d53cc:	b508      	push	{r3, lr}
   d53ce:	4b02      	ldr	r3, [pc, #8]	; (d53d8 <network_connect+0xc>)
   d53d0:	681b      	ldr	r3, [r3, #0]
   d53d2:	685b      	ldr	r3, [r3, #4]
   d53d4:	9301      	str	r3, [sp, #4]
   d53d6:	bd08      	pop	{r3, pc}
   d53d8:	00030240 	.word	0x00030240

000d53dc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <network_connecting+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	689b      	ldr	r3, [r3, #8]
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	00030240 	.word	0x00030240

000d53ec <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <network_disconnect+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	68db      	ldr	r3, [r3, #12]
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	00030240 	.word	0x00030240

000d53fc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <network_ready+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	691b      	ldr	r3, [r3, #16]
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	00030240 	.word	0x00030240

000d540c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b02      	ldr	r3, [pc, #8]	; (d5418 <network_on+0xc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	695b      	ldr	r3, [r3, #20]
   d5414:	9301      	str	r3, [sp, #4]
   d5416:	bd08      	pop	{r3, pc}
   d5418:	00030240 	.word	0x00030240

000d541c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d541c:	b508      	push	{r3, lr}
   d541e:	4b02      	ldr	r3, [pc, #8]	; (d5428 <network_off+0xc>)
   d5420:	681b      	ldr	r3, [r3, #0]
   d5422:	699b      	ldr	r3, [r3, #24]
   d5424:	9301      	str	r3, [sp, #4]
   d5426:	bd08      	pop	{r3, pc}
   d5428:	00030240 	.word	0x00030240

000d542c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d542c:	b508      	push	{r3, lr}
   d542e:	4b02      	ldr	r3, [pc, #8]	; (d5438 <network_listen+0xc>)
   d5430:	681b      	ldr	r3, [r3, #0]
   d5432:	69db      	ldr	r3, [r3, #28]
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	bd08      	pop	{r3, pc}
   d5438:	00030240 	.word	0x00030240

000d543c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d543c:	b508      	push	{r3, lr}
   d543e:	4b02      	ldr	r3, [pc, #8]	; (d5448 <network_listening+0xc>)
   d5440:	681b      	ldr	r3, [r3, #0]
   d5442:	6a1b      	ldr	r3, [r3, #32]
   d5444:	9301      	str	r3, [sp, #4]
   d5446:	bd08      	pop	{r3, pc}
   d5448:	00030240 	.word	0x00030240

000d544c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d544c:	b508      	push	{r3, lr}
   d544e:	4b02      	ldr	r3, [pc, #8]	; (d5458 <network_set_listen_timeout+0xc>)
   d5450:	681b      	ldr	r3, [r3, #0]
   d5452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5454:	9301      	str	r3, [sp, #4]
   d5456:	bd08      	pop	{r3, pc}
   d5458:	00030240 	.word	0x00030240

000d545c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d545c:	b508      	push	{r3, lr}
   d545e:	4b02      	ldr	r3, [pc, #8]	; (d5468 <network_get_listen_timeout+0xc>)
   d5460:	681b      	ldr	r3, [r3, #0]
   d5462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5464:	9301      	str	r3, [sp, #4]
   d5466:	bd08      	pop	{r3, pc}
   d5468:	00030240 	.word	0x00030240

000d546c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d546c:	b508      	push	{r3, lr}
   d546e:	4b02      	ldr	r3, [pc, #8]	; (d5478 <network_is_on+0xc>)
   d5470:	681b      	ldr	r3, [r3, #0]
   d5472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5474:	9301      	str	r3, [sp, #4]
   d5476:	bd08      	pop	{r3, pc}
   d5478:	00030240 	.word	0x00030240

000d547c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d547c:	b508      	push	{r3, lr}
   d547e:	4b02      	ldr	r3, [pc, #8]	; (d5488 <network_is_off+0xc>)
   d5480:	681b      	ldr	r3, [r3, #0]
   d5482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5484:	9301      	str	r3, [sp, #4]
   d5486:	bd08      	pop	{r3, pc}
   d5488:	00030240 	.word	0x00030240

000d548c <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d548c:	b508      	push	{r3, lr}
   d548e:	4b02      	ldr	r3, [pc, #8]	; (d5498 <spark_deviceID+0xc>)
   d5490:	681b      	ldr	r3, [r3, #0]
   d5492:	69db      	ldr	r3, [r3, #28]
   d5494:	9301      	str	r3, [sp, #4]
   d5496:	bd08      	pop	{r3, pc}
   d5498:	00030244 	.word	0x00030244

000d549c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d549c:	b508      	push	{r3, lr}
   d549e:	4b02      	ldr	r3, [pc, #8]	; (d54a8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d54a0:	681b      	ldr	r3, [r3, #0]
   d54a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d54a4:	9301      	str	r3, [sp, #4]
   d54a6:	bd08      	pop	{r3, pc}
   d54a8:	00030244 	.word	0x00030244

000d54ac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d54ac:	b508      	push	{r3, lr}
   d54ae:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <malloc+0xc>)
   d54b0:	681b      	ldr	r3, [r3, #0]
   d54b2:	681b      	ldr	r3, [r3, #0]
   d54b4:	9301      	str	r3, [sp, #4]
   d54b6:	bd08      	pop	{r3, pc}
   d54b8:	0003021c 	.word	0x0003021c

000d54bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d54bc:	b508      	push	{r3, lr}
   d54be:	4b02      	ldr	r3, [pc, #8]	; (d54c8 <free+0xc>)
   d54c0:	681b      	ldr	r3, [r3, #0]
   d54c2:	685b      	ldr	r3, [r3, #4]
   d54c4:	9301      	str	r3, [sp, #4]
   d54c6:	bd08      	pop	{r3, pc}
   d54c8:	0003021c 	.word	0x0003021c

000d54cc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d54cc:	b508      	push	{r3, lr}
   d54ce:	4b02      	ldr	r3, [pc, #8]	; (d54d8 <realloc+0xc>)
   d54d0:	681b      	ldr	r3, [r3, #0]
   d54d2:	689b      	ldr	r3, [r3, #8]
   d54d4:	9301      	str	r3, [sp, #4]
   d54d6:	bd08      	pop	{r3, pc}
   d54d8:	0003021c 	.word	0x0003021c

000d54dc <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d54dc:	b508      	push	{r3, lr}
   d54de:	4b02      	ldr	r3, [pc, #8]	; (d54e8 <__errno+0xc>)
   d54e0:	681b      	ldr	r3, [r3, #0]
   d54e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d54e4:	9301      	str	r3, [sp, #4]
   d54e6:	bd08      	pop	{r3, pc}
   d54e8:	0003021c 	.word	0x0003021c

000d54ec <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d54ec:	b508      	push	{r3, lr}
   d54ee:	4b02      	ldr	r3, [pc, #8]	; (d54f8 <newlib_impure_ptr_callback+0xc>)
   d54f0:	681b      	ldr	r3, [r3, #0]
   d54f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d54f4:	9301      	str	r3, [sp, #4]
   d54f6:	bd08      	pop	{r3, pc}
   d54f8:	0003021c 	.word	0x0003021c

000d54fc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d54fc:	2200      	movs	r2, #0
   d54fe:	6840      	ldr	r0, [r0, #4]
   d5500:	4611      	mov	r1, r2
   d5502:	f7ff bf9b 	b.w	d543c <network_listening>

000d5506 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5506:	2200      	movs	r2, #0
   d5508:	6840      	ldr	r0, [r0, #4]
   d550a:	4611      	mov	r1, r2
   d550c:	f7ff bfa6 	b.w	d545c <network_get_listen_timeout>

000d5510 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5510:	6840      	ldr	r0, [r0, #4]
   d5512:	2200      	movs	r2, #0
   d5514:	f7ff bf9a 	b.w	d544c <network_set_listen_timeout>

000d5518 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5518:	6840      	ldr	r0, [r0, #4]
   d551a:	2200      	movs	r2, #0
   d551c:	f081 0101 	eor.w	r1, r1, #1
   d5520:	f7ff bf84 	b.w	d542c <network_listen>

000d5524 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5524:	2300      	movs	r3, #0
   d5526:	6840      	ldr	r0, [r0, #4]
   d5528:	461a      	mov	r2, r3
   d552a:	4619      	mov	r1, r3
   d552c:	f7ff bf76 	b.w	d541c <network_off>

000d5530 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5530:	2300      	movs	r3, #0
   d5532:	6840      	ldr	r0, [r0, #4]
   d5534:	461a      	mov	r2, r3
   d5536:	4619      	mov	r1, r3
   d5538:	f7ff bf68 	b.w	d540c <network_on>

000d553c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d553c:	2200      	movs	r2, #0
   d553e:	6840      	ldr	r0, [r0, #4]
   d5540:	4611      	mov	r1, r2
   d5542:	f7ff bf5b 	b.w	d53fc <network_ready>

000d5546 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5546:	2200      	movs	r2, #0
   d5548:	6840      	ldr	r0, [r0, #4]
   d554a:	4611      	mov	r1, r2
   d554c:	f7ff bf46 	b.w	d53dc <network_connecting>

000d5550 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5550:	6840      	ldr	r0, [r0, #4]
   d5552:	2200      	movs	r2, #0
   d5554:	2102      	movs	r1, #2
   d5556:	f7ff bf49 	b.w	d53ec <network_disconnect>

000d555a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d555a:	2300      	movs	r3, #0
   d555c:	6840      	ldr	r0, [r0, #4]
   d555e:	461a      	mov	r2, r3
   d5560:	f7ff bf34 	b.w	d53cc <network_connect>

000d5564 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5564:	4b02      	ldr	r3, [pc, #8]	; (d5570 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5566:	2203      	movs	r2, #3
   d5568:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d556a:	4a02      	ldr	r2, [pc, #8]	; (d5574 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d556c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d556e:	4770      	bx	lr
   d5570:	2003e650 	.word	0x2003e650
   d5574:	000d794c 	.word	0x000d794c

000d5578 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5578:	2100      	movs	r1, #0
   d557a:	f7ff bebb 	b.w	d52f4 <hal_spi_acquire>

000d557e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d557e:	2100      	movs	r1, #0
   d5580:	f7ff bec0 	b.w	d5304 <hal_spi_release>

000d5584 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5584:	b510      	push	{r4, lr}
   d5586:	4604      	mov	r4, r0
   d5588:	4608      	mov	r0, r1
{
    _spi = spi;
   d558a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d558c:	f7ff fe9a 	bl	d52c4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5590:	2300      	movs	r3, #0
   d5592:	6063      	str	r3, [r4, #4]
}
   d5594:	4620      	mov	r0, r4
   d5596:	bd10      	pop	{r4, pc}

000d5598 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5598:	b510      	push	{r4, lr}
   d559a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d559c:	7800      	ldrb	r0, [r0, #0]
   d559e:	f7ff ffeb 	bl	d5578 <_ZN8SPIClass4lockEv.isra.0>
   d55a2:	b948      	cbnz	r0, d55b8 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d55a4:	7820      	ldrb	r0, [r4, #0]
   d55a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d55aa:	f7ff fe63 	bl	d5274 <hal_spi_begin>
        unlock();
   d55ae:	7820      	ldrb	r0, [r4, #0]
    }
}
   d55b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d55b4:	f7ff bfe3 	b.w	d557e <_ZN8SPIClass6unlockEv.isra.0>
}
   d55b8:	bd10      	pop	{r4, pc}

000d55ba <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d55ba:	b513      	push	{r0, r1, r4, lr}
   d55bc:	4604      	mov	r4, r0
    if (!lock())
   d55be:	7800      	ldrb	r0, [r0, #0]
{
   d55c0:	9101      	str	r1, [sp, #4]
    if (!lock())
   d55c2:	f7ff ffd9 	bl	d5578 <_ZN8SPIClass4lockEv.isra.0>
   d55c6:	9901      	ldr	r1, [sp, #4]
   d55c8:	b940      	cbnz	r0, d55dc <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d55ca:	7820      	ldrb	r0, [r4, #0]
   d55cc:	f7ff fe5a 	bl	d5284 <hal_spi_set_bit_order>
        unlock();
   d55d0:	7820      	ldrb	r0, [r4, #0]
    }
}
   d55d2:	b002      	add	sp, #8
   d55d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d55d8:	f7ff bfd1 	b.w	d557e <_ZN8SPIClass6unlockEv.isra.0>
}
   d55dc:	b002      	add	sp, #8
   d55de:	bd10      	pop	{r4, pc}

000d55e0 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d55e0:	b513      	push	{r0, r1, r4, lr}
   d55e2:	4604      	mov	r4, r0
    if (!lock())
   d55e4:	7800      	ldrb	r0, [r0, #0]
{
   d55e6:	9101      	str	r1, [sp, #4]
    if (!lock())
   d55e8:	f7ff ffc6 	bl	d5578 <_ZN8SPIClass4lockEv.isra.0>
   d55ec:	9901      	ldr	r1, [sp, #4]
   d55ee:	b940      	cbnz	r0, d5602 <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d55f0:	7820      	ldrb	r0, [r4, #0]
   d55f2:	f7ff fe4f 	bl	d5294 <hal_spi_set_data_mode>
        unlock();
   d55f6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d55f8:	b002      	add	sp, #8
   d55fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d55fe:	f7ff bfbe 	b.w	d557e <_ZN8SPIClass6unlockEv.isra.0>
}
   d5602:	b002      	add	sp, #8
   d5604:	bd10      	pop	{r4, pc}
	...

000d5608 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5608:	0840      	lsrs	r0, r0, #1
{
   d560a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d560c:	6018      	str	r0, [r3, #0]
   d560e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5610:	6818      	ldr	r0, [r3, #0]
   d5612:	4288      	cmp	r0, r1
   d5614:	b2e5      	uxtb	r5, r4
   d5616:	d906      	bls.n	d5626 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5618:	3401      	adds	r4, #1
   d561a:	2c08      	cmp	r4, #8
   d561c:	d002      	beq.n	d5624 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d561e:	0840      	lsrs	r0, r0, #1
   d5620:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d5622:	e7f5      	b.n	d5610 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5624:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5628:	5d5b      	ldrb	r3, [r3, r5]
   d562a:	7013      	strb	r3, [r2, #0]
}
   d562c:	bd30      	pop	{r4, r5, pc}
   d562e:	bf00      	nop
   d5630:	000d7980 	.word	0x000d7980

000d5634 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5638:	b088      	sub	sp, #32
    unsigned clock = 0;
   d563a:	2300      	movs	r3, #0
{
   d563c:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d563e:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d5640:	9302      	str	r3, [sp, #8]
{
   d5642:	460e      	mov	r6, r1
   d5644:	4617      	mov	r7, r2
    if (!lock())
   d5646:	f7ff ff97 	bl	d5578 <_ZN8SPIClass4lockEv.isra.0>
   d564a:	4605      	mov	r5, r0
   d564c:	bb00      	cbnz	r0, d5690 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d564e:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5652:	4601      	mov	r1, r0
   d5654:	2214      	movs	r2, #20
   d5656:	a803      	add	r0, sp, #12
   d5658:	f002 f8de 	bl	d7818 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d565c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d565e:	462a      	mov	r2, r5
   d5660:	a903      	add	r1, sp, #12
   d5662:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d5664:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d5668:	f7ff fe3c 	bl	d52e4 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d566c:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d566e:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5672:	ab02      	add	r3, sp, #8
   d5674:	f10d 0207 	add.w	r2, sp, #7
   d5678:	fb07 f106 	mul.w	r1, r7, r6
   d567c:	f7ff ffc4 	bl	d5608 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d5680:	7820      	ldrb	r0, [r4, #0]
   d5682:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5686:	f7ff fe0d 	bl	d52a4 <hal_spi_set_clock_divider>
        unlock();
   d568a:	7820      	ldrb	r0, [r4, #0]
   d568c:	f7ff ff77 	bl	d557e <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d5690:	9802      	ldr	r0, [sp, #8]
   d5692:	b008      	add	sp, #32
   d5694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5698 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d5698:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d569a:	7800      	ldrb	r0, [r0, #0]
   d569c:	f7ff fe0a 	bl	d52b4 <hal_spi_transfer>
}
   d56a0:	b2c0      	uxtb	r0, r0
   d56a2:	bd08      	pop	{r3, pc}

000d56a4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d56a4:	b510      	push	{r4, lr}
   d56a6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d56a8:	6800      	ldr	r0, [r0, #0]
   d56aa:	b118      	cbz	r0, d56b4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d56ac:	f7ff ff06 	bl	d54bc <free>
            wakeupSource_ = nullptr;
   d56b0:	2300      	movs	r3, #0
   d56b2:	6023      	str	r3, [r4, #0]
        }
    }
   d56b4:	bd10      	pop	{r4, pc}

000d56b6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d56b6:	b510      	push	{r4, lr}
   d56b8:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d56ba:	f7ff fff3 	bl	d56a4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d56be:	4620      	mov	r0, r4
   d56c0:	bd10      	pop	{r4, pc}
	...

000d56c4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d56c4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d56c6:	4b09      	ldr	r3, [pc, #36]	; (d56ec <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d56c8:	4c09      	ldr	r4, [pc, #36]	; (d56f0 <_GLOBAL__sub_I_System+0x2c>)
   d56ca:	2202      	movs	r2, #2
   d56cc:	2000      	movs	r0, #0
   d56ce:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d56d0:	4b08      	ldr	r3, [pc, #32]	; (d56f4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d56d2:	6020      	str	r0, [r4, #0]
   d56d4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d56d6:	71a0      	strb	r0, [r4, #6]
   d56d8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d56da:	f7ff fe53 	bl	d5384 <set_system_mode>
SystemClass System;
   d56de:	4620      	mov	r0, r4
   d56e0:	4a05      	ldr	r2, [pc, #20]	; (d56f8 <_GLOBAL__sub_I_System+0x34>)
   d56e2:	4906      	ldr	r1, [pc, #24]	; (d56fc <_GLOBAL__sub_I_System+0x38>)
   d56e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d56e8:	f001 b94e 	b.w	d6988 <__aeabi_atexit>
   d56ec:	2003e664 	.word	0x2003e664
   d56f0:	2003e658 	.word	0x2003e658
   d56f4:	ffff0000 	.word	0xffff0000
   d56f8:	2003e5a4 	.word	0x2003e5a4
   d56fc:	000d56b7 	.word	0x000d56b7

000d5700 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5700:	b510      	push	{r4, lr}
   d5702:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5704:	f002 f8c6 	bl	d7894 <strlen>
   d5708:	3801      	subs	r0, #1
   d570a:	1823      	adds	r3, r4, r0
   d570c:	4620      	mov	r0, r4
	while(i<j){
   d570e:	4283      	cmp	r3, r0
   d5710:	d906      	bls.n	d5720 <_Z11str_reversePc+0x20>
		c = *i;
   d5712:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5714:	7819      	ldrb	r1, [r3, #0]
   d5716:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d571a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d571e:	e7f6      	b.n	d570e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d5720:	bd10      	pop	{r4, pc}

000d5722 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5722:	b570      	push	{r4, r5, r6, lr}
   d5724:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5726:	1e91      	subs	r1, r2, #2
   d5728:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d572a:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d572c:	d822      	bhi.n	d5774 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d572e:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d5730:	b16d      	cbz	r5, d574e <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5732:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d5736:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d573a:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d573c:	2d09      	cmp	r5, #9
                *ptr += '0';
   d573e:	bf94      	ite	ls
   d5740:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5742:	3157      	addhi	r1, #87	; 0x57
   d5744:	b2c9      	uxtb	r1, r1
   d5746:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d574a:	4635      	mov	r5, r6
	while(a){
   d574c:	e7f0      	b.n	d5730 <ultoa+0xe>
   d574e:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d5750:	4423      	add	r3, r4
            *ptr++ = '0';
   d5752:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d5754:	4293      	cmp	r3, r2
   d5756:	d902      	bls.n	d575e <ultoa+0x3c>
            *ptr++ = '0';
   d5758:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d575c:	e7fa      	b.n	d5754 <ultoa+0x32>
   d575e:	1a1a      	subs	r2, r3, r0
   d5760:	4283      	cmp	r3, r0
   d5762:	bf38      	it	cc
   d5764:	2200      	movcc	r2, #0

	*ptr = '\0';
   d5766:	2300      	movs	r3, #0
   d5768:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d576a:	4620      	mov	r0, r4
   d576c:	f7ff ffc8 	bl	d5700 <_Z11str_reversePc>
	return buffer;
   d5770:	4620      	mov	r0, r4
}
   d5772:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d5774:	2000      	movs	r0, #0
   d5776:	e7fc      	b.n	d5772 <ultoa+0x50>

000d5778 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d5778:	b570      	push	{r4, r5, r6, lr}
   d577a:	b086      	sub	sp, #24
   d577c:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d577e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d5780:	4668      	mov	r0, sp
   d5782:	f000 fae9 	bl	d5d58 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d5786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5788:	1d34      	adds	r4, r6, #4
   d578a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d578c:	682b      	ldr	r3, [r5, #0]
   d578e:	7023      	strb	r3, [r4, #0]
    }
   d5790:	4630      	mov	r0, r6
   d5792:	b006      	add	sp, #24
   d5794:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5798 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d5798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d579c:	ec57 6b10 	vmov	r6, r7, d0
   d57a0:	4680      	mov	r8, r0
   d57a2:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d57a4:	ee10 0a10 	vmov	r0, s0
   d57a8:	2200      	movs	r2, #0
   d57aa:	2300      	movs	r3, #0
   d57ac:	4639      	mov	r1, r7
   d57ae:	f001 fe35 	bl	d741c <__aeabi_dcmplt>
   d57b2:	b128      	cbz	r0, d57c0 <_Z4dtoadhPc+0x28>
        val = -val;
   d57b4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d57b8:	461f      	mov	r7, r3
        *sout++ = '-';
   d57ba:	232d      	movs	r3, #45	; 0x2d
   d57bc:	f804 3b01 	strb.w	r3, [r4], #1
   d57c0:	2300      	movs	r3, #0
    }
    long scale = 1;
   d57c2:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d57c6:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d57c8:	b2d9      	uxtb	r1, r3
   d57ca:	4588      	cmp	r8, r1
   d57cc:	d903      	bls.n	d57d6 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d57ce:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d57d2:	3301      	adds	r3, #1
   d57d4:	e7f8      	b.n	d57c8 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d57d6:	4648      	mov	r0, r9
   d57d8:	f001 fb44 	bl	d6e64 <__aeabi_i2d>
   d57dc:	4632      	mov	r2, r6
   d57de:	463b      	mov	r3, r7
   d57e0:	f001 fbaa 	bl	d6f38 <__aeabi_dmul>
   d57e4:	4606      	mov	r6, r0
   d57e6:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d57e8:	f001 fe78 	bl	d74dc <__aeabi_d2ulz>
   d57ec:	4605      	mov	r5, r0
   d57ee:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d57f0:	f001 fb6c 	bl	d6ecc <__aeabi_ul2d>
   d57f4:	4602      	mov	r2, r0
   d57f6:	460b      	mov	r3, r1
   d57f8:	4630      	mov	r0, r6
   d57fa:	4639      	mov	r1, r7
   d57fc:	f001 f9e4 	bl	d6bc8 <__aeabi_dsub>
   d5800:	4b13      	ldr	r3, [pc, #76]	; (d5850 <_Z4dtoadhPc+0xb8>)
   d5802:	2200      	movs	r2, #0
   d5804:	f001 fe1e 	bl	d7444 <__aeabi_dcmpge>
   d5808:	b110      	cbz	r0, d5810 <_Z4dtoadhPc+0x78>
        fixed++;
   d580a:	3501      	adds	r5, #1
   d580c:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d5810:	464a      	mov	r2, r9
   d5812:	4628      	mov	r0, r5
   d5814:	17d3      	asrs	r3, r2, #31
   d5816:	4651      	mov	r1, sl
   d5818:	f001 fe48 	bl	d74ac <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d581c:	2301      	movs	r3, #1
   d581e:	4615      	mov	r5, r2
   d5820:	4621      	mov	r1, r4
   d5822:	220a      	movs	r2, #10
   d5824:	f7ff ff7d 	bl	d5722 <ultoa>
    if (prec) {
   d5828:	f1b8 0f00 	cmp.w	r8, #0
   d582c:	d00d      	beq.n	d584a <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d582e:	4620      	mov	r0, r4
   d5830:	f002 f830 	bl	d7894 <strlen>
        *sout++ = '.';
   d5834:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d5836:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d5838:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d583a:	220a      	movs	r2, #10
   d583c:	4643      	mov	r3, r8
   d583e:	4628      	mov	r0, r5
   d5840:	3101      	adds	r1, #1
    }
}
   d5842:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d5846:	f7ff bf6c 	b.w	d5722 <ultoa>
}
   d584a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d584e:	bf00      	nop
   d5850:	3fe00000 	.word	0x3fe00000

000d5854 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5854:	b510      	push	{r4, lr}
   d5856:	4604      	mov	r4, r0
{
	free(buffer);
   d5858:	6800      	ldr	r0, [r0, #0]
   d585a:	f7ff fe2f 	bl	d54bc <free>
}
   d585e:	4620      	mov	r0, r4
   d5860:	bd10      	pop	{r4, pc}

000d5862 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5862:	b510      	push	{r4, lr}
   d5864:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5866:	6800      	ldr	r0, [r0, #0]
   d5868:	b108      	cbz	r0, d586e <_ZN6String10invalidateEv+0xc>
   d586a:	f7ff fe27 	bl	d54bc <free>
	buffer = NULL;
   d586e:	2300      	movs	r3, #0
	capacity = len = 0;
   d5870:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5874:	6023      	str	r3, [r4, #0]
}
   d5876:	bd10      	pop	{r4, pc}

000d5878 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5878:	b538      	push	{r3, r4, r5, lr}
   d587a:	4604      	mov	r4, r0
   d587c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d587e:	6800      	ldr	r0, [r0, #0]
   d5880:	3101      	adds	r1, #1
   d5882:	f7ff fe23 	bl	d54cc <realloc>
	if (newbuffer) {
   d5886:	b110      	cbz	r0, d588e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5888:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d588c:	2001      	movs	r0, #1
	}
	return 0;
}
   d588e:	bd38      	pop	{r3, r4, r5, pc}

000d5890 <_ZN6String7reserveEj>:
{
   d5890:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5892:	6803      	ldr	r3, [r0, #0]
{
   d5894:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5896:	b123      	cbz	r3, d58a2 <_ZN6String7reserveEj+0x12>
   d5898:	6843      	ldr	r3, [r0, #4]
   d589a:	428b      	cmp	r3, r1
   d589c:	d301      	bcc.n	d58a2 <_ZN6String7reserveEj+0x12>
   d589e:	2001      	movs	r0, #1
}
   d58a0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d58a2:	4620      	mov	r0, r4
   d58a4:	f7ff ffe8 	bl	d5878 <_ZN6String12changeBufferEj>
   d58a8:	2800      	cmp	r0, #0
   d58aa:	d0f9      	beq.n	d58a0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d58ac:	68a3      	ldr	r3, [r4, #8]
   d58ae:	2b00      	cmp	r3, #0
   d58b0:	d1f5      	bne.n	d589e <_ZN6String7reserveEj+0xe>
   d58b2:	6822      	ldr	r2, [r4, #0]
   d58b4:	7013      	strb	r3, [r2, #0]
   d58b6:	e7f2      	b.n	d589e <_ZN6String7reserveEj+0xe>

000d58b8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d58b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d58ba:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d58bc:	4611      	mov	r1, r2
   d58be:	9201      	str	r2, [sp, #4]
{
   d58c0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d58c2:	f7ff ffe5 	bl	d5890 <_ZN6String7reserveEj>
   d58c6:	9a01      	ldr	r2, [sp, #4]
   d58c8:	b928      	cbnz	r0, d58d6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d58ca:	4620      	mov	r0, r4
   d58cc:	f7ff ffc9 	bl	d5862 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d58d0:	4620      	mov	r0, r4
   d58d2:	b003      	add	sp, #12
   d58d4:	bd30      	pop	{r4, r5, pc}
	len = length;
   d58d6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d58d8:	4629      	mov	r1, r5
   d58da:	6820      	ldr	r0, [r4, #0]
   d58dc:	f001 ff8e 	bl	d77fc <memcpy>
	buffer[len] = 0;
   d58e0:	6822      	ldr	r2, [r4, #0]
   d58e2:	68a3      	ldr	r3, [r4, #8]
   d58e4:	2100      	movs	r1, #0
   d58e6:	54d1      	strb	r1, [r2, r3]
	return *this;
   d58e8:	e7f2      	b.n	d58d0 <_ZN6String4copyEPKcj+0x18>

000d58ea <_ZN6StringC1EPKc>:
	buffer = NULL;
   d58ea:	2300      	movs	r3, #0
String::String(const char *cstr)
   d58ec:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d58ee:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d58f2:	4604      	mov	r4, r0
	len = 0;
   d58f4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d58f6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d58f8:	b141      	cbz	r1, d590c <_ZN6StringC1EPKc+0x22>
   d58fa:	4608      	mov	r0, r1
   d58fc:	9101      	str	r1, [sp, #4]
   d58fe:	f001 ffc9 	bl	d7894 <strlen>
   d5902:	9901      	ldr	r1, [sp, #4]
   d5904:	4602      	mov	r2, r0
   d5906:	4620      	mov	r0, r4
   d5908:	f7ff ffd6 	bl	d58b8 <_ZN6String4copyEPKcj>
}
   d590c:	4620      	mov	r0, r4
   d590e:	b002      	add	sp, #8
   d5910:	bd10      	pop	{r4, pc}

000d5912 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5912:	4288      	cmp	r0, r1
{
   d5914:	b510      	push	{r4, lr}
   d5916:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5918:	d005      	beq.n	d5926 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d591a:	680b      	ldr	r3, [r1, #0]
   d591c:	b12b      	cbz	r3, d592a <_ZN6StringaSERKS_+0x18>
   d591e:	688a      	ldr	r2, [r1, #8]
   d5920:	4619      	mov	r1, r3
   d5922:	f7ff ffc9 	bl	d58b8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5926:	4620      	mov	r0, r4
   d5928:	bd10      	pop	{r4, pc}
	else invalidate();
   d592a:	f7ff ff9a 	bl	d5862 <_ZN6String10invalidateEv>
   d592e:	e7fa      	b.n	d5926 <_ZN6StringaSERKS_+0x14>

000d5930 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5930:	b513      	push	{r0, r1, r4, lr}
   d5932:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5934:	b159      	cbz	r1, d594e <_ZN6StringaSEPKc+0x1e>
   d5936:	4608      	mov	r0, r1
   d5938:	9101      	str	r1, [sp, #4]
   d593a:	f001 ffab 	bl	d7894 <strlen>
   d593e:	9901      	ldr	r1, [sp, #4]
   d5940:	4602      	mov	r2, r0
   d5942:	4620      	mov	r0, r4
   d5944:	f7ff ffb8 	bl	d58b8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5948:	4620      	mov	r0, r4
   d594a:	b002      	add	sp, #8
   d594c:	bd10      	pop	{r4, pc}
	else invalidate();
   d594e:	f7ff ff88 	bl	d5862 <_ZN6String10invalidateEv>
   d5952:	e7f9      	b.n	d5948 <_ZN6StringaSEPKc+0x18>

000d5954 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d5954:	b530      	push	{r4, r5, lr}
   d5956:	4604      	mov	r4, r0
	buffer = NULL;
   d5958:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d595a:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d595c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d5960:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5962:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d5964:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d5968:	b2cd      	uxtb	r5, r1
   d596a:	f001 fa8d 	bl	d6e88 <__aeabi_f2d>
   d596e:	ec41 0b10 	vmov	d0, r0, r1
   d5972:	a901      	add	r1, sp, #4
   d5974:	4628      	mov	r0, r5
   d5976:	f7ff ff0f 	bl	d5798 <_Z4dtoadhPc>
        *this = buf;
   d597a:	a901      	add	r1, sp, #4
   d597c:	4620      	mov	r0, r4
   d597e:	f7ff ffd7 	bl	d5930 <_ZN6StringaSEPKc>
}
   d5982:	4620      	mov	r0, r4
   d5984:	b00b      	add	sp, #44	; 0x2c
   d5986:	bd30      	pop	{r4, r5, pc}

000d5988 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5988:	b570      	push	{r4, r5, r6, lr}
   d598a:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d598c:	460e      	mov	r6, r1
   d598e:	b909      	cbnz	r1, d5994 <_ZN6String6concatEPKcj+0xc>
   d5990:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5992:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5994:	b16a      	cbz	r2, d59b2 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d5996:	6884      	ldr	r4, [r0, #8]
   d5998:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d599a:	4621      	mov	r1, r4
   d599c:	f7ff ff78 	bl	d5890 <_ZN6String7reserveEj>
   d59a0:	2800      	cmp	r0, #0
   d59a2:	d0f5      	beq.n	d5990 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d59a4:	6828      	ldr	r0, [r5, #0]
   d59a6:	68ab      	ldr	r3, [r5, #8]
   d59a8:	4631      	mov	r1, r6
   d59aa:	4418      	add	r0, r3
   d59ac:	f001 ff6a 	bl	d7884 <strcpy>
	len = newlen;
   d59b0:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d59b2:	2001      	movs	r0, #1
   d59b4:	e7ed      	b.n	d5992 <_ZN6String6concatEPKcj+0xa>

000d59b6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d59b6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d59b8:	688a      	ldr	r2, [r1, #8]
   d59ba:	6809      	ldr	r1, [r1, #0]
{
   d59bc:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d59be:	f7ff ffe3 	bl	d5988 <_ZN6String6concatEPKcj>
   d59c2:	b910      	cbnz	r0, d59ca <_ZplRK15StringSumHelperRK6String+0x14>
   d59c4:	4620      	mov	r0, r4
   d59c6:	f7ff ff4c 	bl	d5862 <_ZN6String10invalidateEv>
	return a;
}
   d59ca:	4620      	mov	r0, r4
   d59cc:	bd10      	pop	{r4, pc}

000d59ce <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d59ce:	b513      	push	{r0, r1, r4, lr}
   d59d0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d59d2:	b929      	cbnz	r1, d59e0 <_ZplRK15StringSumHelperPKc+0x12>
   d59d4:	4620      	mov	r0, r4
   d59d6:	f7ff ff44 	bl	d5862 <_ZN6String10invalidateEv>
	return a;
}
   d59da:	4620      	mov	r0, r4
   d59dc:	b002      	add	sp, #8
   d59de:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d59e0:	4608      	mov	r0, r1
   d59e2:	9101      	str	r1, [sp, #4]
   d59e4:	f001 ff56 	bl	d7894 <strlen>
   d59e8:	9901      	ldr	r1, [sp, #4]
   d59ea:	4602      	mov	r2, r0
   d59ec:	4620      	mov	r0, r4
   d59ee:	f7ff ffcb 	bl	d5988 <_ZN6String6concatEPKcj>
   d59f2:	2800      	cmp	r0, #0
   d59f4:	d0ee      	beq.n	d59d4 <_ZplRK15StringSumHelperPKc+0x6>
   d59f6:	e7f0      	b.n	d59da <_ZplRK15StringSumHelperPKc+0xc>

000d59f8 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d59f8:	b510      	push	{r4, lr}
   d59fa:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d59fc:	6800      	ldr	r0, [r0, #0]
   d59fe:	b108      	cbz	r0, d5a04 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5a00:	f7ff fb50 	bl	d50a4 <os_mutex_recursive_destroy>
    }
   d5a04:	4620      	mov	r0, r4
   d5a06:	bd10      	pop	{r4, pc}

000d5a08 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5a08:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5a0a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5a0c:	4604      	mov	r4, r0
      if (_M_manager)
   d5a0e:	b113      	cbz	r3, d5a16 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5a10:	2203      	movs	r2, #3
   d5a12:	4601      	mov	r1, r0
   d5a14:	4798      	blx	r3
    }
   d5a16:	4620      	mov	r0, r4
   d5a18:	bd10      	pop	{r4, pc}
	...

000d5a1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5a1c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5a1e:	4c06      	ldr	r4, [pc, #24]	; (d5a38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5a20:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5a22:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5a24:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5a26:	f7ff fb35 	bl	d5094 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5a2a:	4620      	mov	r0, r4
   d5a2c:	4a03      	ldr	r2, [pc, #12]	; (d5a3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5a2e:	4904      	ldr	r1, [pc, #16]	; (d5a40 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5a34:	f000 bfa8 	b.w	d6988 <__aeabi_atexit>
   d5a38:	2003e668 	.word	0x2003e668
   d5a3c:	2003e5a4 	.word	0x2003e5a4
   d5a40:	000d59f9 	.word	0x000d59f9

000d5a44 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a46:	4606      	mov	r6, r0
   d5a48:	460d      	mov	r5, r1
  size_t n = 0;
   d5a4a:	188f      	adds	r7, r1, r2
   d5a4c:	2400      	movs	r4, #0
  while (size--) {
   d5a4e:	42bd      	cmp	r5, r7
   d5a50:	d00c      	beq.n	d5a6c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5a52:	6833      	ldr	r3, [r6, #0]
   d5a54:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5a58:	689b      	ldr	r3, [r3, #8]
   d5a5a:	4630      	mov	r0, r6
   d5a5c:	4798      	blx	r3
     if (chunk>=0)
   d5a5e:	1e03      	subs	r3, r0, #0
   d5a60:	db01      	blt.n	d5a66 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5a62:	441c      	add	r4, r3
  while (size--) {
   d5a64:	e7f3      	b.n	d5a4e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5a66:	2c00      	cmp	r4, #0
   d5a68:	bf08      	it	eq
   d5a6a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5a6c:	4620      	mov	r0, r4
   d5a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a70 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5a70:	b513      	push	{r0, r1, r4, lr}
   d5a72:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5a74:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5a76:	b159      	cbz	r1, d5a90 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5a78:	9101      	str	r1, [sp, #4]
   d5a7a:	f001 ff0b 	bl	d7894 <strlen>
   d5a7e:	6823      	ldr	r3, [r4, #0]
   d5a80:	9901      	ldr	r1, [sp, #4]
   d5a82:	68db      	ldr	r3, [r3, #12]
   d5a84:	4602      	mov	r2, r0
   d5a86:	4620      	mov	r0, r4
    }
   d5a88:	b002      	add	sp, #8
   d5a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5a8e:	4718      	bx	r3
    }
   d5a90:	b002      	add	sp, #8
   d5a92:	bd10      	pop	{r4, pc}

000d5a94 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5a94:	6803      	ldr	r3, [r0, #0]
   d5a96:	689b      	ldr	r3, [r3, #8]
   d5a98:	4718      	bx	r3

000d5a9a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5a9a:	b530      	push	{r4, r5, lr}
   d5a9c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5a9e:	2300      	movs	r3, #0
   d5aa0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5aa4:	2a01      	cmp	r2, #1
   d5aa6:	bf98      	it	ls
   d5aa8:	220a      	movls	r2, #10
   d5aaa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5aac:	460d      	mov	r5, r1
   d5aae:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5ab2:	fb01 5312 	mls	r3, r1, r2, r5
   d5ab6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5aba:	2b09      	cmp	r3, #9
   d5abc:	bf94      	ite	ls
   d5abe:	3330      	addls	r3, #48	; 0x30
   d5ac0:	3337      	addhi	r3, #55	; 0x37
   d5ac2:	b2db      	uxtb	r3, r3
  } while(n);
   d5ac4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5ac6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5aca:	d9ef      	bls.n	d5aac <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5acc:	4621      	mov	r1, r4
   d5ace:	f7ff ffcf 	bl	d5a70 <_ZN5Print5writeEPKc>
}
   d5ad2:	b00b      	add	sp, #44	; 0x2c
   d5ad4:	bd30      	pop	{r4, r5, pc}

000d5ad6 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5ad6:	2300      	movs	r3, #0
   d5ad8:	6840      	ldr	r0, [r0, #4]
   d5ada:	461a      	mov	r2, r3
   d5adc:	4619      	mov	r1, r3
   d5ade:	f7ff bc95 	b.w	d540c <network_on>
	...

000d5ae4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5ae4:	4b01      	ldr	r3, [pc, #4]	; (d5aec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5ae6:	4a02      	ldr	r2, [pc, #8]	; (d5af0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5ae8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5aea:	4770      	bx	lr
   d5aec:	2003e66c 	.word	0x2003e66c
   d5af0:	000d7990 	.word	0x000d7990

000d5af4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5af4:	4b02      	ldr	r3, [pc, #8]	; (d5b00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5af6:	681a      	ldr	r2, [r3, #0]
   d5af8:	4b02      	ldr	r3, [pc, #8]	; (d5b04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5afa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5afc:	4770      	bx	lr
   d5afe:	bf00      	nop
   d5b00:	2003e53c 	.word	0x2003e53c
   d5b04:	2003e670 	.word	0x2003e670

000d5b08 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5b08:	2100      	movs	r1, #0
   d5b0a:	f7ff bc43 	b.w	d5394 <system_delay_ms>

000d5b0e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5b0e:	b510      	push	{r4, lr}
   d5b10:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5b12:	f7ff ff79 	bl	d5a08 <_ZNSt14_Function_baseD1Ev>
   d5b16:	4620      	mov	r0, r4
   d5b18:	bd10      	pop	{r4, pc}
	...

000d5b1c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5b1c:	4803      	ldr	r0, [pc, #12]	; (d5b2c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5b1e:	4a04      	ldr	r2, [pc, #16]	; (d5b30 <_GLOBAL__sub_I_RGB+0x14>)
   d5b20:	4904      	ldr	r1, [pc, #16]	; (d5b34 <_GLOBAL__sub_I_RGB+0x18>)
   d5b22:	2300      	movs	r3, #0
   d5b24:	6083      	str	r3, [r0, #8]
   d5b26:	f000 bf2f 	b.w	d6988 <__aeabi_atexit>
   d5b2a:	bf00      	nop
   d5b2c:	2003e674 	.word	0x2003e674
   d5b30:	2003e5a4 	.word	0x2003e5a4
   d5b34:	000d5b0f 	.word	0x000d5b0f

000d5b38 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5b38:	4b01      	ldr	r3, [pc, #4]	; (d5b40 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5b3a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5b3c:	4770      	bx	lr
   d5b3e:	bf00      	nop
   d5b40:	2003e540 	.word	0x2003e540

000d5b44 <serialEventRun>:
{
   d5b44:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5b46:	4b0b      	ldr	r3, [pc, #44]	; (d5b74 <serialEventRun+0x30>)
   d5b48:	b143      	cbz	r3, d5b5c <serialEventRun+0x18>
   d5b4a:	f000 f96d 	bl	d5e28 <_Z16_fetch_usbserialv>
   d5b4e:	6803      	ldr	r3, [r0, #0]
   d5b50:	691b      	ldr	r3, [r3, #16]
   d5b52:	4798      	blx	r3
   d5b54:	2800      	cmp	r0, #0
   d5b56:	dd01      	ble.n	d5b5c <serialEventRun+0x18>
        serialEvent();
   d5b58:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5b5c:	4b06      	ldr	r3, [pc, #24]	; (d5b78 <serialEventRun+0x34>)
   d5b5e:	b143      	cbz	r3, d5b72 <serialEventRun+0x2e>
   d5b60:	f000 f9e0 	bl	d5f24 <_Z22__fetch_global_Serial1v>
   d5b64:	6803      	ldr	r3, [r0, #0]
   d5b66:	691b      	ldr	r3, [r3, #16]
   d5b68:	4798      	blx	r3
   d5b6a:	2800      	cmp	r0, #0
   d5b6c:	dd01      	ble.n	d5b72 <serialEventRun+0x2e>
        serialEvent1();
   d5b6e:	f3af 8000 	nop.w
}
   d5b72:	bd08      	pop	{r3, pc}
	...

000d5b7c <_post_loop>:
{
   d5b7c:	b508      	push	{r3, lr}
	serialEventRun();
   d5b7e:	f7ff ffe1 	bl	d5b44 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5b82:	f7ff fa67 	bl	d5054 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5b86:	4b01      	ldr	r3, [pc, #4]	; (d5b8c <_post_loop+0x10>)
   d5b88:	6018      	str	r0, [r3, #0]
}
   d5b8a:	bd08      	pop	{r3, pc}
   d5b8c:	2003e7d4 	.word	0x2003e7d4

000d5b90 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5b90:	4802      	ldr	r0, [pc, #8]	; (d5b9c <_Z33system_initialize_user_backup_ramv+0xc>)
   d5b92:	4a03      	ldr	r2, [pc, #12]	; (d5ba0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5b94:	4903      	ldr	r1, [pc, #12]	; (d5ba4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5b96:	1a12      	subs	r2, r2, r0
   d5b98:	f001 be30 	b.w	d77fc <memcpy>
   d5b9c:	2003f400 	.word	0x2003f400
   d5ba0:	2003f404 	.word	0x2003f404
   d5ba4:	000d7c68 	.word	0x000d7c68

000d5ba8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5ba8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5baa:	2300      	movs	r3, #0
   d5bac:	9300      	str	r3, [sp, #0]
   d5bae:	461a      	mov	r2, r3
   d5bb0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5bb4:	f7ff fc00 	bl	d53b8 <system_ctrl_set_result>
}
   d5bb8:	b003      	add	sp, #12
   d5bba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5bc0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5bc0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5bc2:	8843      	ldrh	r3, [r0, #2]
   d5bc4:	2b0a      	cmp	r3, #10
   d5bc6:	d008      	beq.n	d5bda <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5bc8:	2b50      	cmp	r3, #80	; 0x50
   d5bca:	d10b      	bne.n	d5be4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5bcc:	4b09      	ldr	r3, [pc, #36]	; (d5bf4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5bce:	681b      	ldr	r3, [r3, #0]
   d5bd0:	b14b      	cbz	r3, d5be6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5bd2:	b003      	add	sp, #12
   d5bd4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5bd8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5bda:	f7ff ffe5 	bl	d5ba8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5bde:	b003      	add	sp, #12
   d5be0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5be4:	2300      	movs	r3, #0
   d5be6:	9300      	str	r3, [sp, #0]
   d5be8:	461a      	mov	r2, r3
   d5bea:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5bee:	f7ff fbe3 	bl	d53b8 <system_ctrl_set_result>
}
   d5bf2:	e7f4      	b.n	d5bde <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5bf4:	2003e688 	.word	0x2003e688

000d5bf8 <module_user_init_hook>:
{
   d5bf8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5bfa:	4c12      	ldr	r4, [pc, #72]	; (d5c44 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5bfc:	4812      	ldr	r0, [pc, #72]	; (d5c48 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5bfe:	4d13      	ldr	r5, [pc, #76]	; (d5c4c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5c00:	2100      	movs	r1, #0
   d5c02:	f7ff fc73 	bl	d54ec <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5c06:	6823      	ldr	r3, [r4, #0]
   d5c08:	42ab      	cmp	r3, r5
   d5c0a:	4b11      	ldr	r3, [pc, #68]	; (d5c50 <module_user_init_hook+0x58>)
   d5c0c:	bf0c      	ite	eq
   d5c0e:	2201      	moveq	r2, #1
   d5c10:	2200      	movne	r2, #0
   d5c12:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5c14:	d002      	beq.n	d5c1c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5c16:	f7ff ffbb 	bl	d5b90 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5c1a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5c1c:	f7ff fa12 	bl	d5044 <HAL_RNG_GetRandomNumber>
   d5c20:	4604      	mov	r4, r0
    srand(seed);
   d5c22:	f001 fe01 	bl	d7828 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5c26:	4b0b      	ldr	r3, [pc, #44]	; (d5c54 <module_user_init_hook+0x5c>)
   d5c28:	b113      	cbz	r3, d5c30 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5c2a:	4620      	mov	r0, r4
   d5c2c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5c30:	2100      	movs	r1, #0
   d5c32:	4808      	ldr	r0, [pc, #32]	; (d5c54 <module_user_init_hook+0x5c>)
   d5c34:	f7ff fc32 	bl	d549c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5c3c:	4806      	ldr	r0, [pc, #24]	; (d5c58 <module_user_init_hook+0x60>)
   d5c3e:	2100      	movs	r1, #0
   d5c40:	f7ff bbb0 	b.w	d53a4 <system_ctrl_set_app_request_handler>
   d5c44:	2003f400 	.word	0x2003f400
   d5c48:	000d5b39 	.word	0x000d5b39
   d5c4c:	9a271c1e 	.word	0x9a271c1e
   d5c50:	2003e684 	.word	0x2003e684
   d5c54:	00000000 	.word	0x00000000
   d5c58:	000d5bc1 	.word	0x000d5bc1

000d5c5c <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d5c5c:	4770      	bx	lr

000d5c5e <_ZN9IPAddressD0Ev>:
   d5c5e:	b510      	push	{r4, lr}
   d5c60:	2118      	movs	r1, #24
   d5c62:	4604      	mov	r4, r0
   d5c64:	f000 fe95 	bl	d6992 <_ZdlPvj>
   d5c68:	4620      	mov	r0, r4
   d5c6a:	bd10      	pop	{r4, pc}

000d5c6c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5c6e:	7d03      	ldrb	r3, [r0, #20]
   d5c70:	2b06      	cmp	r3, #6
{
   d5c72:	b08d      	sub	sp, #52	; 0x34
   d5c74:	460e      	mov	r6, r1
   d5c76:	f100 0704 	add.w	r7, r0, #4
   d5c7a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5c7e:	d012      	beq.n	d5ca6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5c80:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5c84:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5c88:	220a      	movs	r2, #10
   d5c8a:	4630      	mov	r0, r6
   d5c8c:	f7ff ff05 	bl	d5a9a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5c90:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5c92:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5c94:	d019      	beq.n	d5cca <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5c96:	2c00      	cmp	r4, #0
   d5c98:	d0f4      	beq.n	d5c84 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5c9a:	212e      	movs	r1, #46	; 0x2e
   d5c9c:	4630      	mov	r0, r6
   d5c9e:	f7ff fef9 	bl	d5a94 <_ZN5Print5printEc>
   d5ca2:	4404      	add	r4, r0
   d5ca4:	e7ee      	b.n	d5c84 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5ca6:	232f      	movs	r3, #47	; 0x2f
   d5ca8:	466a      	mov	r2, sp
   d5caa:	4639      	mov	r1, r7
   d5cac:	200a      	movs	r0, #10
		buf[0] = 0;
   d5cae:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5cb2:	f7ff f9ff 	bl	d50b4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5cb6:	4668      	mov	r0, sp
   d5cb8:	f001 fdec 	bl	d7894 <strlen>
   d5cbc:	6833      	ldr	r3, [r6, #0]
   d5cbe:	4602      	mov	r2, r0
   d5cc0:	68db      	ldr	r3, [r3, #12]
   d5cc2:	4669      	mov	r1, sp
   d5cc4:	4630      	mov	r0, r6
   d5cc6:	4798      	blx	r3
   d5cc8:	4604      	mov	r4, r0
    }
    return n;
}
   d5cca:	4620      	mov	r0, r4
   d5ccc:	b00d      	add	sp, #52	; 0x34
   d5cce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5cd0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5cd0:	b510      	push	{r4, lr}
   d5cd2:	4b05      	ldr	r3, [pc, #20]	; (d5ce8 <_ZN9IPAddressC1Ev+0x18>)
   d5cd4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5cd6:	2211      	movs	r2, #17
   d5cd8:	f840 3b04 	str.w	r3, [r0], #4
   d5cdc:	2100      	movs	r1, #0
   d5cde:	f001 fd9b 	bl	d7818 <memset>
}
   d5ce2:	4620      	mov	r0, r4
   d5ce4:	bd10      	pop	{r4, pc}
   d5ce6:	bf00      	nop
   d5ce8:	000d79b8 	.word	0x000d79b8

000d5cec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5cec:	4603      	mov	r3, r0
   d5cee:	4a07      	ldr	r2, [pc, #28]	; (d5d0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5cf0:	b510      	push	{r4, lr}
   d5cf2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5cf6:	f101 0210 	add.w	r2, r1, #16
   d5cfa:	f851 4b04 	ldr.w	r4, [r1], #4
   d5cfe:	f843 4b04 	str.w	r4, [r3], #4
   d5d02:	4291      	cmp	r1, r2
   d5d04:	d1f9      	bne.n	d5cfa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5d06:	780a      	ldrb	r2, [r1, #0]
   d5d08:	701a      	strb	r2, [r3, #0]
}
   d5d0a:	bd10      	pop	{r4, pc}
   d5d0c:	000d79b8 	.word	0x000d79b8

000d5d10 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d5d10:	7d03      	ldrb	r3, [r0, #20]
   d5d12:	2b04      	cmp	r3, #4
   d5d14:	d104      	bne.n	d5d20 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d5d16:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5d18:	3800      	subs	r0, #0
   d5d1a:	bf18      	it	ne
   d5d1c:	2001      	movne	r0, #1
   d5d1e:	4770      	bx	lr
    } else if (version() == 6) {
   d5d20:	2b06      	cmp	r3, #6
   d5d22:	d107      	bne.n	d5d34 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5d24:	6843      	ldr	r3, [r0, #4]
   d5d26:	b93b      	cbnz	r3, d5d38 <_ZNK9IPAddresscvbEv+0x28>
   d5d28:	6883      	ldr	r3, [r0, #8]
   d5d2a:	b92b      	cbnz	r3, d5d38 <_ZNK9IPAddresscvbEv+0x28>
   d5d2c:	68c3      	ldr	r3, [r0, #12]
   d5d2e:	b91b      	cbnz	r3, d5d38 <_ZNK9IPAddresscvbEv+0x28>
   d5d30:	6900      	ldr	r0, [r0, #16]
   d5d32:	e7f1      	b.n	d5d18 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d5d34:	2000      	movs	r0, #0
   d5d36:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5d38:	2001      	movs	r0, #1
}
   d5d3a:	4770      	bx	lr

000d5d3c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5d3c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5d3e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5d42:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5d46:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5d4a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5d4e:	2304      	movs	r3, #4
   d5d50:	6041      	str	r1, [r0, #4]
   d5d52:	7503      	strb	r3, [r0, #20]
}
   d5d54:	bd10      	pop	{r4, pc}
	...

000d5d58 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d5d58:	b513      	push	{r0, r1, r4, lr}
   d5d5a:	4b05      	ldr	r3, [pc, #20]	; (d5d70 <_ZN9IPAddressC1EPKh+0x18>)
   d5d5c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d5d5e:	78cb      	ldrb	r3, [r1, #3]
   d5d60:	9300      	str	r3, [sp, #0]
   d5d62:	788b      	ldrb	r3, [r1, #2]
   d5d64:	784a      	ldrb	r2, [r1, #1]
   d5d66:	7809      	ldrb	r1, [r1, #0]
   d5d68:	f7ff ffe8 	bl	d5d3c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5d6c:	b002      	add	sp, #8
   d5d6e:	bd10      	pop	{r4, pc}
   d5d70:	000d79b8 	.word	0x000d79b8

000d5d74 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5d74:	7441      	strb	r1, [r0, #17]
}
   d5d76:	4770      	bx	lr

000d5d78 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5d78:	4770      	bx	lr

000d5d7a <_ZN9USBSerial4readEv>:
{
   d5d7a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5d7c:	2100      	movs	r1, #0
   d5d7e:	7c00      	ldrb	r0, [r0, #16]
   d5d80:	f7ff fae0 	bl	d5344 <HAL_USB_USART_Receive_Data>
}
   d5d84:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5d88:	bd08      	pop	{r3, pc}

000d5d8a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5d8a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5d8c:	2101      	movs	r1, #1
   d5d8e:	7c00      	ldrb	r0, [r0, #16]
   d5d90:	f7ff fad8 	bl	d5344 <HAL_USB_USART_Receive_Data>
}
   d5d94:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5d98:	bd08      	pop	{r3, pc}

000d5d9a <_ZN9USBSerial17availableForWriteEv>:
{
   d5d9a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5d9c:	7c00      	ldrb	r0, [r0, #16]
   d5d9e:	f7ff fac9 	bl	d5334 <HAL_USB_USART_Available_Data_For_Write>
}
   d5da2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5da6:	bd08      	pop	{r3, pc}

000d5da8 <_ZN9USBSerial9availableEv>:
{
   d5da8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5daa:	7c00      	ldrb	r0, [r0, #16]
   d5dac:	f7ff faba 	bl	d5324 <HAL_USB_USART_Available_Data>
}
   d5db0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5db4:	bd08      	pop	{r3, pc}

000d5db6 <_ZN9USBSerial5writeEh>:
{
   d5db6:	b513      	push	{r0, r1, r4, lr}
   d5db8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5dba:	7c00      	ldrb	r0, [r0, #16]
{
   d5dbc:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5dbe:	f7ff fab9 	bl	d5334 <HAL_USB_USART_Available_Data_For_Write>
   d5dc2:	2800      	cmp	r0, #0
   d5dc4:	9901      	ldr	r1, [sp, #4]
   d5dc6:	dc01      	bgt.n	d5dcc <_ZN9USBSerial5writeEh+0x16>
   d5dc8:	7c60      	ldrb	r0, [r4, #17]
   d5dca:	b120      	cbz	r0, d5dd6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5dcc:	7c20      	ldrb	r0, [r4, #16]
   d5dce:	f7ff fac1 	bl	d5354 <HAL_USB_USART_Send_Data>
   d5dd2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5dd6:	b002      	add	sp, #8
   d5dd8:	bd10      	pop	{r4, pc}

000d5dda <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5dda:	7c00      	ldrb	r0, [r0, #16]
   d5ddc:	f7ff bac2 	b.w	d5364 <HAL_USB_USART_Flush_Data>

000d5de0 <_ZN9USBSerialD0Ev>:
   d5de0:	b510      	push	{r4, lr}
   d5de2:	2114      	movs	r1, #20
   d5de4:	4604      	mov	r4, r0
   d5de6:	f000 fdd4 	bl	d6992 <_ZdlPvj>
   d5dea:	4620      	mov	r0, r4
   d5dec:	bd10      	pop	{r4, pc}
	...

000d5df0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5df0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5df6:	4604      	mov	r4, r0
   d5df8:	4608      	mov	r0, r1
   d5dfa:	2100      	movs	r1, #0
   d5dfc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5e00:	4b04      	ldr	r3, [pc, #16]	; (d5e14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5e02:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5e04:	2301      	movs	r3, #1
  _serial = serial;
   d5e06:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5e08:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5e0a:	4611      	mov	r1, r2
   d5e0c:	f7ff fa82 	bl	d5314 <HAL_USB_USART_Init>
}
   d5e10:	4620      	mov	r0, r4
   d5e12:	bd10      	pop	{r4, pc}
   d5e14:	000d79cc 	.word	0x000d79cc

000d5e18 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5e18:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5e1a:	2214      	movs	r2, #20
{
   d5e1c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5e1e:	2100      	movs	r1, #0
   d5e20:	f001 fcfa 	bl	d7818 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5e24:	4620      	mov	r0, r4
   d5e26:	bd10      	pop	{r4, pc}

000d5e28 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5e28:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5e2a:	4c10      	ldr	r4, [pc, #64]	; (d5e6c <_Z16_fetch_usbserialv+0x44>)
{
   d5e2c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5e2e:	a803      	add	r0, sp, #12
   d5e30:	f7ff fff2 	bl	d5e18 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5e34:	7821      	ldrb	r1, [r4, #0]
   d5e36:	f3bf 8f5b 	dmb	ish
   d5e3a:	f011 0101 	ands.w	r1, r1, #1
   d5e3e:	d111      	bne.n	d5e64 <_Z16_fetch_usbserialv+0x3c>
   d5e40:	4620      	mov	r0, r4
   d5e42:	9101      	str	r1, [sp, #4]
   d5e44:	f7fe f92d 	bl	d40a2 <__cxa_guard_acquire>
   d5e48:	9901      	ldr	r1, [sp, #4]
   d5e4a:	b158      	cbz	r0, d5e64 <_Z16_fetch_usbserialv+0x3c>
   d5e4c:	aa03      	add	r2, sp, #12
   d5e4e:	4808      	ldr	r0, [pc, #32]	; (d5e70 <_Z16_fetch_usbserialv+0x48>)
   d5e50:	f7ff ffce 	bl	d5df0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5e54:	4620      	mov	r0, r4
   d5e56:	f7fe f929 	bl	d40ac <__cxa_guard_release>
   d5e5a:	4a06      	ldr	r2, [pc, #24]	; (d5e74 <_Z16_fetch_usbserialv+0x4c>)
   d5e5c:	4906      	ldr	r1, [pc, #24]	; (d5e78 <_Z16_fetch_usbserialv+0x50>)
   d5e5e:	4804      	ldr	r0, [pc, #16]	; (d5e70 <_Z16_fetch_usbserialv+0x48>)
   d5e60:	f000 fd92 	bl	d6988 <__aeabi_atexit>
	return _usbserial;
}
   d5e64:	4802      	ldr	r0, [pc, #8]	; (d5e70 <_Z16_fetch_usbserialv+0x48>)
   d5e66:	b008      	add	sp, #32
   d5e68:	bd10      	pop	{r4, pc}
   d5e6a:	bf00      	nop
   d5e6c:	2003e68c 	.word	0x2003e68c
   d5e70:	2003e690 	.word	0x2003e690
   d5e74:	2003e5a4 	.word	0x2003e5a4
   d5e78:	000d5d79 	.word	0x000d5d79

000d5e7c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5e7c:	4770      	bx	lr

000d5e7e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5e7e:	7441      	strb	r1, [r0, #17]
}
   d5e80:	4770      	bx	lr

000d5e82 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5e82:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5e84:	7c00      	ldrb	r0, [r0, #16]
   d5e86:	f7ff f965 	bl	d5154 <hal_usart_available_data_for_write>
}
   d5e8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e8e:	bd08      	pop	{r3, pc}

000d5e90 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5e90:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5e92:	7c00      	ldrb	r0, [r0, #16]
   d5e94:	f7ff f936 	bl	d5104 <hal_usart_available>
}
   d5e98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e9c:	bd08      	pop	{r3, pc}

000d5e9e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5e9e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5ea0:	7c00      	ldrb	r0, [r0, #16]
   d5ea2:	f7ff f93f 	bl	d5124 <hal_usart_peek>
}
   d5ea6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5eaa:	bd08      	pop	{r3, pc}

000d5eac <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5eac:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5eae:	7c00      	ldrb	r0, [r0, #16]
   d5eb0:	f7ff f930 	bl	d5114 <hal_usart_read>
}
   d5eb4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5eb8:	bd08      	pop	{r3, pc}

000d5eba <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5eba:	7c00      	ldrb	r0, [r0, #16]
   d5ebc:	f7ff b93a 	b.w	d5134 <hal_usart_flush>

000d5ec0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5ec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5ec2:	7c45      	ldrb	r5, [r0, #17]
{
   d5ec4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5ec6:	b12d      	cbz	r5, d5ed4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5ec8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5eca:	b003      	add	sp, #12
   d5ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5ed0:	f7ff b910 	b.w	d50f4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5ed4:	7c00      	ldrb	r0, [r0, #16]
   d5ed6:	9101      	str	r1, [sp, #4]
   d5ed8:	f7ff f93c 	bl	d5154 <hal_usart_available_data_for_write>
   d5edc:	2800      	cmp	r0, #0
   d5ede:	9901      	ldr	r1, [sp, #4]
   d5ee0:	dcf2      	bgt.n	d5ec8 <_ZN11USARTSerial5writeEh+0x8>
}
   d5ee2:	4628      	mov	r0, r5
   d5ee4:	b003      	add	sp, #12
   d5ee6:	bd30      	pop	{r4, r5, pc}

000d5ee8 <_ZN11USARTSerialD0Ev>:
   d5ee8:	b510      	push	{r4, lr}
   d5eea:	2114      	movs	r1, #20
   d5eec:	4604      	mov	r4, r0
   d5eee:	f000 fd50 	bl	d6992 <_ZdlPvj>
   d5ef2:	4620      	mov	r0, r4
   d5ef4:	bd10      	pop	{r4, pc}
	...

000d5ef8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5ef8:	b510      	push	{r4, lr}
   d5efa:	f04f 0c00 	mov.w	ip, #0
   d5efe:	4604      	mov	r4, r0
   d5f00:	4608      	mov	r0, r1
   d5f02:	4611      	mov	r1, r2
   d5f04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5f08:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5f0c:	4a04      	ldr	r2, [pc, #16]	; (d5f20 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5f0e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5f10:	2201      	movs	r2, #1
  _serial = serial;
   d5f12:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5f14:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5f16:	461a      	mov	r2, r3
   d5f18:	f7ff f8e4 	bl	d50e4 <hal_usart_init>
}
   d5f1c:	4620      	mov	r0, r4
   d5f1e:	bd10      	pop	{r4, pc}
   d5f20:	000d79fc 	.word	0x000d79fc

000d5f24 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5f24:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5f26:	4c0e      	ldr	r4, [pc, #56]	; (d5f60 <_Z22__fetch_global_Serial1v+0x3c>)
   d5f28:	7821      	ldrb	r1, [r4, #0]
   d5f2a:	f3bf 8f5b 	dmb	ish
   d5f2e:	f011 0101 	ands.w	r1, r1, #1
   d5f32:	d112      	bne.n	d5f5a <_Z22__fetch_global_Serial1v+0x36>
   d5f34:	4620      	mov	r0, r4
   d5f36:	9101      	str	r1, [sp, #4]
   d5f38:	f7fe f8b3 	bl	d40a2 <__cxa_guard_acquire>
   d5f3c:	9901      	ldr	r1, [sp, #4]
   d5f3e:	b160      	cbz	r0, d5f5a <_Z22__fetch_global_Serial1v+0x36>
   d5f40:	4a08      	ldr	r2, [pc, #32]	; (d5f64 <_Z22__fetch_global_Serial1v+0x40>)
   d5f42:	4b09      	ldr	r3, [pc, #36]	; (d5f68 <_Z22__fetch_global_Serial1v+0x44>)
   d5f44:	4809      	ldr	r0, [pc, #36]	; (d5f6c <_Z22__fetch_global_Serial1v+0x48>)
   d5f46:	f7ff ffd7 	bl	d5ef8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5f4a:	4620      	mov	r0, r4
   d5f4c:	f7fe f8ae 	bl	d40ac <__cxa_guard_release>
   d5f50:	4a07      	ldr	r2, [pc, #28]	; (d5f70 <_Z22__fetch_global_Serial1v+0x4c>)
   d5f52:	4908      	ldr	r1, [pc, #32]	; (d5f74 <_Z22__fetch_global_Serial1v+0x50>)
   d5f54:	4805      	ldr	r0, [pc, #20]	; (d5f6c <_Z22__fetch_global_Serial1v+0x48>)
   d5f56:	f000 fd17 	bl	d6988 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5f5a:	4804      	ldr	r0, [pc, #16]	; (d5f6c <_Z22__fetch_global_Serial1v+0x48>)
   d5f5c:	b002      	add	sp, #8
   d5f5e:	bd10      	pop	{r4, pc}
   d5f60:	2003e6a4 	.word	0x2003e6a4
   d5f64:	2003e6a8 	.word	0x2003e6a8
   d5f68:	2003e72c 	.word	0x2003e72c
   d5f6c:	2003e7b0 	.word	0x2003e7b0
   d5f70:	2003e5a4 	.word	0x2003e5a4
   d5f74:	000d5e7d 	.word	0x000d5e7d

000d5f78 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5f78:	4770      	bx	lr

000d5f7a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5f7c:	4606      	mov	r6, r0
   d5f7e:	4615      	mov	r5, r2
   d5f80:	460c      	mov	r4, r1
   d5f82:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5f84:	42bc      	cmp	r4, r7
   d5f86:	d006      	beq.n	d5f96 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5f88:	6833      	ldr	r3, [r6, #0]
   d5f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5f8e:	689b      	ldr	r3, [r3, #8]
   d5f90:	4630      	mov	r0, r6
   d5f92:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5f94:	e7f6      	b.n	d5f84 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5f96:	4628      	mov	r0, r5
   d5f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5f9a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5f9a:	7c00      	ldrb	r0, [r0, #16]
   d5f9c:	2200      	movs	r2, #0
   d5f9e:	f7ff b8f9 	b.w	d5194 <hal_i2c_write>

000d5fa2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5fa2:	7c00      	ldrb	r0, [r0, #16]
   d5fa4:	2100      	movs	r1, #0
   d5fa6:	f7ff b8fd 	b.w	d51a4 <hal_i2c_available>

000d5faa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5faa:	7c00      	ldrb	r0, [r0, #16]
   d5fac:	2100      	movs	r1, #0
   d5fae:	f7ff b901 	b.w	d51b4 <hal_i2c_read>

000d5fb2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5fb2:	7c00      	ldrb	r0, [r0, #16]
   d5fb4:	2100      	movs	r1, #0
   d5fb6:	f7ff b905 	b.w	d51c4 <hal_i2c_peek>

000d5fba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5fba:	7c00      	ldrb	r0, [r0, #16]
   d5fbc:	2100      	movs	r1, #0
   d5fbe:	f7ff b909 	b.w	d51d4 <hal_i2c_flush>

000d5fc2 <_ZN7TwoWireD0Ev>:
   d5fc2:	b510      	push	{r4, lr}
   d5fc4:	2114      	movs	r1, #20
   d5fc6:	4604      	mov	r4, r0
   d5fc8:	f000 fce3 	bl	d6992 <_ZdlPvj>
   d5fcc:	4620      	mov	r0, r4
   d5fce:	bd10      	pop	{r4, pc}

000d5fd0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5fd0:	b510      	push	{r4, lr}
   d5fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5fd6:	4604      	mov	r4, r0
   d5fd8:	4608      	mov	r0, r1
   d5fda:	2100      	movs	r1, #0
   d5fdc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5fe0:	4b03      	ldr	r3, [pc, #12]	; (d5ff0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5fe2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5fe4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5fe6:	4611      	mov	r1, r2
   d5fe8:	f7ff f904 	bl	d51f4 <hal_i2c_init>
}
   d5fec:	4620      	mov	r0, r4
   d5fee:	bd10      	pop	{r4, pc}
   d5ff0:	000d7a2c 	.word	0x000d7a2c

000d5ff4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5ff4:	2300      	movs	r3, #0
   d5ff6:	7c00      	ldrb	r0, [r0, #16]
   d5ff8:	461a      	mov	r2, r3
   d5ffa:	4619      	mov	r1, r3
   d5ffc:	f7ff b8b2 	b.w	d5164 <hal_i2c_begin>

000d6000 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6000:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d6002:	2200      	movs	r2, #0
   d6004:	2314      	movs	r3, #20
   d6006:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d600a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d600e:	780b      	ldrb	r3, [r1, #0]
   d6010:	f88d 3008 	strb.w	r3, [sp, #8]
   d6014:	684b      	ldr	r3, [r1, #4]
   d6016:	9303      	str	r3, [sp, #12]
   d6018:	68cb      	ldr	r3, [r1, #12]
   d601a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d601c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d601e:	7a0b      	ldrb	r3, [r1, #8]
   d6020:	9305      	str	r3, [sp, #20]
   d6022:	a901      	add	r1, sp, #4
   d6024:	f7ff f8ee 	bl	d5204 <hal_i2c_request_ex>
}
   d6028:	b007      	add	sp, #28
   d602a:	f85d fb04 	ldr.w	pc, [sp], #4

000d602e <_ZN7TwoWire11requestFromEhjh>:
{
   d602e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6030:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6032:	f88d 1000 	strb.w	r1, [sp]
   d6036:	f04f 0164 	mov.w	r1, #100	; 0x64
   d603a:	9103      	str	r1, [sp, #12]
   d603c:	bf18      	it	ne
   d603e:	2301      	movne	r3, #1
   d6040:	4669      	mov	r1, sp
    size_ = size;
   d6042:	9201      	str	r2, [sp, #4]
   d6044:	f88d 3008 	strb.w	r3, [sp, #8]
   d6048:	f7ff ffda 	bl	d6000 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d604c:	b005      	add	sp, #20
   d604e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6052 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d6052:	2301      	movs	r3, #1
   d6054:	f7ff bfeb 	b.w	d602e <_ZN7TwoWire11requestFromEhjh>

000d6058 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6058:	7c00      	ldrb	r0, [r0, #16]
   d605a:	2200      	movs	r2, #0
   d605c:	f7ff b88a 	b.w	d5174 <hal_i2c_begin_transmission>

000d6060 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d6060:	b2c9      	uxtb	r1, r1
   d6062:	f7ff bff9 	b.w	d6058 <_ZN7TwoWire17beginTransmissionEh>

000d6066 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6066:	7c00      	ldrb	r0, [r0, #16]
   d6068:	2200      	movs	r2, #0
   d606a:	f7ff b88b 	b.w	d5184 <hal_i2c_end_transmission>

000d606e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d606e:	2101      	movs	r1, #1
   d6070:	f7ff bff9 	b.w	d6066 <_ZN7TwoWire15endTransmissionEh>

000d6074 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6074:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6076:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d6078:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d607c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d607e:	2201      	movs	r2, #1
   d6080:	f04f 33ff 	mov.w	r3, #4294967295
   d6084:	f10d 0107 	add.w	r1, sp, #7
   d6088:	47a0      	blx	r4
}
   d608a:	b002      	add	sp, #8
   d608c:	bd10      	pop	{r4, pc}

000d608e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d608e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6090:	6803      	ldr	r3, [r0, #0]
   d6092:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6094:	f04f 33ff 	mov.w	r3, #4294967295
   d6098:	46a4      	mov	ip, r4
}
   d609a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d609e:	4760      	bx	ip

000d60a0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d60a0:	b513      	push	{r0, r1, r4, lr}
   d60a2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d60a4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d60a6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d60aa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d60ac:	f10d 0107 	add.w	r1, sp, #7
   d60b0:	2201      	movs	r2, #1
   d60b2:	47a0      	blx	r4
}
   d60b4:	b002      	add	sp, #8
   d60b6:	bd10      	pop	{r4, pc}

000d60b8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d60b8:	4770      	bx	lr

000d60ba <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d60ba:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d60bc:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d60be:	681a      	ldr	r2, [r3, #0]
   d60c0:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d60c2:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d60c4:	da10      	bge.n	d60e8 <_ZN9TCPClient9connectedEv+0x2e>
   d60c6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d60ca:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d60ce:	429a      	cmp	r2, r3
   d60d0:	d10a      	bne.n	d60e8 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d60d2:	6803      	ldr	r3, [r0, #0]
   d60d4:	691b      	ldr	r3, [r3, #16]
   d60d6:	4798      	blx	r3
        if (!rv) {
   d60d8:	4604      	mov	r4, r0
   d60da:	b928      	cbnz	r0, d60e8 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d60dc:	682b      	ldr	r3, [r5, #0]
   d60de:	4628      	mov	r0, r5
   d60e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d60e2:	4798      	blx	r3
        rv = available();
   d60e4:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d60e6:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d60e8:	2001      	movs	r0, #1
   d60ea:	e7fc      	b.n	d60e6 <_ZN9TCPClient9connectedEv+0x2c>

000d60ec <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d60ec:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d60ee:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d60f0:	43c0      	mvns	r0, r0
   d60f2:	0fc0      	lsrs	r0, r0, #31
   d60f4:	4770      	bx	lr

000d60f6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d60f6:	4770      	bx	lr

000d60f8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d60f8:	4b06      	ldr	r3, [pc, #24]	; (d6114 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d60fa:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d60fc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d60fe:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6102:	d005      	beq.n	d6110 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6104:	4608      	mov	r0, r1
   d6106:	f000 fc49 	bl	d699c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d610a:	2800      	cmp	r0, #0
	return nullptr;
   d610c:	bf08      	it	eq
   d610e:	2400      	moveq	r4, #0
      }
   d6110:	4620      	mov	r0, r4
   d6112:	bd10      	pop	{r4, pc}
   d6114:	000d7988 	.word	0x000d7988

000d6118 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6118:	b510      	push	{r4, lr}
   d611a:	21ac      	movs	r1, #172	; 0xac
   d611c:	4604      	mov	r4, r0
   d611e:	f000 fc38 	bl	d6992 <_ZdlPvj>
   d6122:	4620      	mov	r0, r4
   d6124:	bd10      	pop	{r4, pc}

000d6126 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d6126:	f7fd bfb8 	b.w	d409a <_ZdlPv>

000d612a <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d612a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d612e:	f04f 0800 	mov.w	r8, #0
   d6132:	b086      	sub	sp, #24
   d6134:	461d      	mov	r5, r3
   d6136:	f8c0 8004 	str.w	r8, [r0, #4]
   d613a:	4604      	mov	r4, r0
   d613c:	460e      	mov	r6, r1
   d613e:	4617      	mov	r7, r2
    struct timeval tv = {};
   d6140:	4641      	mov	r1, r8
   d6142:	2210      	movs	r2, #16
   d6144:	a802      	add	r0, sp, #8
   d6146:	f001 fb67 	bl	d7818 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d614a:	1c6b      	adds	r3, r5, #1
   d614c:	d009      	beq.n	d6162 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d614e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6152:	fbb5 f3f0 	udiv	r3, r5, r0
   d6156:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d615a:	fb00 5313 	mls	r3, r0, r3, r5
   d615e:	4358      	muls	r0, r3
   d6160:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6162:	6960      	ldr	r0, [r4, #20]
   d6164:	2310      	movs	r3, #16
   d6166:	9300      	str	r3, [sp, #0]
   d6168:	6800      	ldr	r0, [r0, #0]
   d616a:	ab02      	add	r3, sp, #8
   d616c:	f241 0205 	movw	r2, #4101	; 0x1005
   d6170:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6174:	f7ff f84e 	bl	d5214 <sock_setsockopt>
    if (ret < 0) {
   d6178:	2800      	cmp	r0, #0
   d617a:	da07      	bge.n	d618c <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d617c:	f7ff f9ae 	bl	d54dc <__errno>
   d6180:	6803      	ldr	r3, [r0, #0]
   d6182:	6063      	str	r3, [r4, #4]
        return 0;
   d6184:	2000      	movs	r0, #0
}
   d6186:	b006      	add	sp, #24
   d6188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d618c:	6960      	ldr	r0, [r4, #20]
   d618e:	2300      	movs	r3, #0
   d6190:	6800      	ldr	r0, [r0, #0]
   d6192:	463a      	mov	r2, r7
   d6194:	4631      	mov	r1, r6
   d6196:	f7ff f85d 	bl	d5254 <sock_send>
    if (ret < 0) {
   d619a:	1e03      	subs	r3, r0, #0
   d619c:	dbee      	blt.n	d617c <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d619e:	4618      	mov	r0, r3
   d61a0:	e7f1      	b.n	d6186 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d61a4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d61a4:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d61a6:	6984      	ldr	r4, [r0, #24]
   d61a8:	4b0a      	ldr	r3, [pc, #40]	; (d61d4 <_ZN9TCPClientD1Ev+0x30>)
   d61aa:	6003      	str	r3, [r0, #0]
   d61ac:	4605      	mov	r5, r0
   d61ae:	b17c      	cbz	r4, d61d0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d61b0:	6863      	ldr	r3, [r4, #4]
   d61b2:	3b01      	subs	r3, #1
   d61b4:	6063      	str	r3, [r4, #4]
   d61b6:	b95b      	cbnz	r3, d61d0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d61b8:	6823      	ldr	r3, [r4, #0]
   d61ba:	4620      	mov	r0, r4
   d61bc:	689b      	ldr	r3, [r3, #8]
   d61be:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d61c0:	68a3      	ldr	r3, [r4, #8]
   d61c2:	3b01      	subs	r3, #1
   d61c4:	60a3      	str	r3, [r4, #8]
   d61c6:	b91b      	cbnz	r3, d61d0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d61c8:	6823      	ldr	r3, [r4, #0]
   d61ca:	4620      	mov	r0, r4
   d61cc:	68db      	ldr	r3, [r3, #12]
   d61ce:	4798      	blx	r3
   d61d0:	4628      	mov	r0, r5
   d61d2:	bd38      	pop	{r3, r4, r5, pc}
   d61d4:	000d7a88 	.word	0x000d7a88

000d61d8 <_ZN9TCPClientD0Ev>:
   d61d8:	b510      	push	{r4, lr}
   d61da:	4604      	mov	r4, r0
   d61dc:	f7ff ffe2 	bl	d61a4 <_ZN9TCPClientD1Ev>
   d61e0:	4620      	mov	r0, r4
   d61e2:	211c      	movs	r1, #28
   d61e4:	f000 fbd5 	bl	d6992 <_ZdlPvj>
   d61e8:	4620      	mov	r0, r4
   d61ea:	bd10      	pop	{r4, pc}

000d61ec <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d61ec:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d61ee:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d61f0:	4b05      	ldr	r3, [pc, #20]	; (d6208 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d61f2:	4604      	mov	r4, r0
   d61f4:	358c      	adds	r5, #140	; 0x8c
   d61f6:	f844 3b04 	str.w	r3, [r4], #4
   d61fa:	4606      	mov	r6, r0
   d61fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d61fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6200:	682b      	ldr	r3, [r5, #0]
   d6202:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d6204:	4630      	mov	r0, r6
   d6206:	bd70      	pop	{r4, r5, r6, pc}
   d6208:	000d79b8 	.word	0x000d79b8

000d620c <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d620c:	b510      	push	{r4, lr}
   d620e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6210:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6214:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6218:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d621a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d621c:	d005      	beq.n	d622a <_ZN9TCPClient4peekEv+0x1e>
   d621e:	6963      	ldr	r3, [r4, #20]
   d6220:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d6224:	4413      	add	r3, r2
   d6226:	7918      	ldrb	r0, [r3, #4]
}
   d6228:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d622a:	6803      	ldr	r3, [r0, #0]
   d622c:	691b      	ldr	r3, [r3, #16]
   d622e:	4798      	blx	r3
   d6230:	2800      	cmp	r0, #0
   d6232:	d1f4      	bne.n	d621e <_ZN9TCPClient4peekEv+0x12>
   d6234:	f04f 30ff 	mov.w	r0, #4294967295
   d6238:	e7f6      	b.n	d6228 <_ZN9TCPClient4peekEv+0x1c>

000d623a <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d623a:	b510      	push	{r4, lr}
   d623c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d623e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6242:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6246:	429a      	cmp	r2, r3
int TCPClient::read() {
   d6248:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d624a:	d008      	beq.n	d625e <_ZN9TCPClient4readEv+0x24>
   d624c:	6963      	ldr	r3, [r4, #20]
   d624e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d6252:	1c51      	adds	r1, r2, #1
   d6254:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d6258:	4413      	add	r3, r2
   d625a:	7918      	ldrb	r0, [r3, #4]
}
   d625c:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d625e:	6803      	ldr	r3, [r0, #0]
   d6260:	691b      	ldr	r3, [r3, #16]
   d6262:	4798      	blx	r3
   d6264:	2800      	cmp	r0, #0
   d6266:	d1f1      	bne.n	d624c <_ZN9TCPClient4readEv+0x12>
   d6268:	f04f 30ff 	mov.w	r0, #4294967295
   d626c:	e7f6      	b.n	d625c <_ZN9TCPClient4readEv+0x22>

000d626e <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d626e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6270:	6943      	ldr	r3, [r0, #20]
   d6272:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d6274:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6278:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d627c:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d627e:	4605      	mov	r5, r0
   d6280:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d6282:	d016      	beq.n	d62b2 <_ZN9TCPClient4readEPhj+0x44>
   d6284:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d6286:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d628a:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d628e:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d6290:	42bc      	cmp	r4, r7
   d6292:	bf28      	it	cs
   d6294:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6296:	3304      	adds	r3, #4
   d6298:	4622      	mov	r2, r4
   d629a:	4419      	add	r1, r3
   d629c:	4630      	mov	r0, r6
   d629e:	f001 faad 	bl	d77fc <memcpy>
   d62a2:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d62a4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d62a8:	4423      	add	r3, r4
   d62aa:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d62ae:	4620      	mov	r0, r4
   d62b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d62b2:	6803      	ldr	r3, [r0, #0]
   d62b4:	691b      	ldr	r3, [r3, #16]
   d62b6:	4798      	blx	r3
   d62b8:	2800      	cmp	r0, #0
   d62ba:	d1e3      	bne.n	d6284 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d62bc:	f04f 34ff 	mov.w	r4, #4294967295
   d62c0:	e7f5      	b.n	d62ae <_ZN9TCPClient4readEPhj+0x40>

000d62c2 <_ZN9TCPClient12flush_bufferEv>:
   d62c2:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d62c4:	2300      	movs	r3, #0
   d62c6:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d62ca:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d62cc:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d62d0:	4770      	bx	lr

000d62d2 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d62d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d62d6:	461f      	mov	r7, r3
    stop();
   d62d8:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d62da:	460c      	mov	r4, r1
    stop();
   d62dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d62de:	b08a      	sub	sp, #40	; 0x28
   d62e0:	4605      	mov	r5, r0
   d62e2:	4616      	mov	r6, r2
    stop();
   d62e4:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d62e6:	7d23      	ldrb	r3, [r4, #20]
   d62e8:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d62ec:	2b04      	cmp	r3, #4
   d62ee:	bf0c      	ite	eq
   d62f0:	2002      	moveq	r0, #2
   d62f2:	200a      	movne	r0, #10
   d62f4:	2206      	movs	r2, #6
   d62f6:	2101      	movs	r1, #1
   d62f8:	f7fe ffb4 	bl	d5264 <sock_socket>
   d62fc:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d6300:	696b      	ldr	r3, [r5, #20]
   d6302:	681b      	ldr	r3, [r3, #0]
   d6304:	2b00      	cmp	r3, #0
   d6306:	da08      	bge.n	d631a <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d6308:	682b      	ldr	r3, [r5, #0]
   d630a:	4628      	mov	r0, r5
   d630c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d630e:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d6310:	4798      	blx	r3
}
   d6312:	4620      	mov	r0, r4
   d6314:	b00a      	add	sp, #40	; 0x28
   d6316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d631a:	4628      	mov	r0, r5
   d631c:	f7ff ffd1 	bl	d62c2 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d6320:	b1b7      	cbz	r7, d6350 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d6322:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6324:	a903      	add	r1, sp, #12
   d6326:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d6328:	9303      	str	r3, [sp, #12]
   d632a:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d632e:	f7fe fe81 	bl	d5034 <if_index_to_name>
   d6332:	2800      	cmp	r0, #0
   d6334:	d1e8      	bne.n	d6308 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d6336:	6968      	ldr	r0, [r5, #20]
   d6338:	2306      	movs	r3, #6
   d633a:	9300      	str	r3, [sp, #0]
   d633c:	6800      	ldr	r0, [r0, #0]
   d633e:	ab03      	add	r3, sp, #12
   d6340:	f241 020b 	movw	r2, #4107	; 0x100b
   d6344:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6348:	f7fe ff64 	bl	d5214 <sock_setsockopt>
   d634c:	2800      	cmp	r0, #0
   d634e:	d1db      	bne.n	d6308 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d6350:	221c      	movs	r2, #28
   d6352:	2100      	movs	r1, #0
   d6354:	a803      	add	r0, sp, #12
   d6356:	f001 fa5f 	bl	d7818 <memset>
    if (ip.version() == 4) {
   d635a:	7d23      	ldrb	r3, [r4, #20]
   d635c:	2b04      	cmp	r3, #4
   d635e:	d11d      	bne.n	d639c <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d6360:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d6364:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d6366:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d636a:	f7fe feb3 	bl	d50d4 <inet_htons>
   d636e:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6372:	6860      	ldr	r0, [r4, #4]
   d6374:	f7fe fea6 	bl	d50c4 <inet_htonl>
   d6378:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d637a:	696b      	ldr	r3, [r5, #20]
   d637c:	221c      	movs	r2, #28
   d637e:	6818      	ldr	r0, [r3, #0]
   d6380:	a903      	add	r1, sp, #12
   d6382:	f7fe ff57 	bl	d5234 <sock_connect>
   d6386:	2800      	cmp	r0, #0
   d6388:	d1be      	bne.n	d6308 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d638a:	3404      	adds	r4, #4
   d638c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d638e:	696d      	ldr	r5, [r5, #20]
   d6390:	358c      	adds	r5, #140	; 0x8c
   d6392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6394:	6823      	ldr	r3, [r4, #0]
   d6396:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d6398:	2401      	movs	r4, #1
   d639a:	e7ba      	b.n	d6312 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d639c:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d63a0:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d63a2:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d63a6:	f7fe fe95 	bl	d50d4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d63aa:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d63ac:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d63b0:	1d23      	adds	r3, r4, #4
   d63b2:	f104 0714 	add.w	r7, r4, #20
   d63b6:	6818      	ldr	r0, [r3, #0]
   d63b8:	6859      	ldr	r1, [r3, #4]
   d63ba:	4632      	mov	r2, r6
   d63bc:	c203      	stmia	r2!, {r0, r1}
   d63be:	3308      	adds	r3, #8
   d63c0:	42bb      	cmp	r3, r7
   d63c2:	4616      	mov	r6, r2
   d63c4:	d1f7      	bne.n	d63b6 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d63c6:	e7d8      	b.n	d637a <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d63c8 <_ZN9TCPClient9availableEv>:
{
   d63c8:	b530      	push	{r4, r5, lr}
   d63ca:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d63cc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d63d0:	b08b      	sub	sp, #44	; 0x2c
   d63d2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d63d4:	b12b      	cbz	r3, d63e2 <_ZN9TCPClient9availableEv+0x1a>
   d63d6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d63da:	429a      	cmp	r2, r3
   d63dc:	d101      	bne.n	d63e2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d63de:	f7ff ff70 	bl	d62c2 <_ZN9TCPClient12flush_bufferEv>
   d63e2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d63e4:	6808      	ldr	r0, [r1, #0]
   d63e6:	2800      	cmp	r0, #0
   d63e8:	db18      	blt.n	d641c <_ZN9TCPClient9availableEv+0x54>
   d63ea:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d63ee:	2d7f      	cmp	r5, #127	; 0x7f
   d63f0:	d814      	bhi.n	d641c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d63f2:	3104      	adds	r1, #4
   d63f4:	2308      	movs	r3, #8
   d63f6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d63fa:	4429      	add	r1, r5
   d63fc:	f7fe ff22 	bl	d5244 <sock_recv>
            if (ret > 0) {
   d6400:	2800      	cmp	r0, #0
   d6402:	dd13      	ble.n	d642c <_ZN9TCPClient9availableEv+0x64>
   d6404:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d6406:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d640a:	b90a      	cbnz	r2, d6410 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d640c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d6410:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d6412:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6416:	4410      	add	r0, r2
   d6418:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d641c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d641e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d6422:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d6426:	1ac0      	subs	r0, r0, r3
   d6428:	b00b      	add	sp, #44	; 0x2c
   d642a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d642c:	f7ff f856 	bl	d54dc <__errno>
   d6430:	6803      	ldr	r3, [r0, #0]
   d6432:	2b0b      	cmp	r3, #11
   d6434:	d0f2      	beq.n	d641c <_ZN9TCPClient9availableEv+0x54>
   d6436:	f7ff f851 	bl	d54dc <__errno>
   d643a:	6803      	ldr	r3, [r0, #0]
   d643c:	2b0b      	cmp	r3, #11
   d643e:	d0ed      	beq.n	d641c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d6440:	2320      	movs	r3, #32
   d6442:	2500      	movs	r5, #0
   d6444:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d6448:	f7ff f848 	bl	d54dc <__errno>
   d644c:	6803      	ldr	r3, [r0, #0]
   d644e:	9301      	str	r3, [sp, #4]
   d6450:	4b08      	ldr	r3, [pc, #32]	; (d6474 <_ZN9TCPClient9availableEv+0xac>)
   d6452:	4909      	ldr	r1, [pc, #36]	; (d6478 <_ZN9TCPClient9availableEv+0xb0>)
   d6454:	9300      	str	r3, [sp, #0]
   d6456:	aa02      	add	r2, sp, #8
   d6458:	462b      	mov	r3, r5
   d645a:	2032      	movs	r0, #50	; 0x32
   d645c:	f7fe ff8a 	bl	d5374 <log_message>
                    sock_close(d_->sock);
   d6460:	6963      	ldr	r3, [r4, #20]
   d6462:	6818      	ldr	r0, [r3, #0]
   d6464:	f7fe fede 	bl	d5224 <sock_close>
   d6468:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d646a:	f04f 32ff 	mov.w	r2, #4294967295
   d646e:	601a      	str	r2, [r3, #0]
   d6470:	e7d4      	b.n	d641c <_ZN9TCPClient9availableEv+0x54>
   d6472:	bf00      	nop
   d6474:	000d7a53 	.word	0x000d7a53
   d6478:	000d7a4c 	.word	0x000d7a4c

000d647c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d647c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d647e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d6480:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d6482:	6818      	ldr	r0, [r3, #0]
   d6484:	2800      	cmp	r0, #0
   d6486:	db01      	blt.n	d648c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d6488:	f7fe fecc 	bl	d5224 <sock_close>
   d648c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d648e:	f04f 32ff 	mov.w	r2, #4294967295
   d6492:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d6494:	6960      	ldr	r0, [r4, #20]
   d6496:	2211      	movs	r2, #17
   d6498:	2100      	movs	r1, #0
   d649a:	308c      	adds	r0, #140	; 0x8c
   d649c:	f001 f9bc 	bl	d7818 <memset>
    flush_buffer();
   d64a0:	4620      	mov	r0, r4
}
   d64a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d64a6:	f7ff bf0c 	b.w	d62c2 <_ZN9TCPClient12flush_bufferEv>

000d64aa <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d64aa:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d64ac:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d64ae:	4604      	mov	r4, r0
          total(0) {
   d64b0:	6001      	str	r1, [r0, #0]
   d64b2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d64b6:	3088      	adds	r0, #136	; 0x88
   d64b8:	f7ff fc0a 	bl	d5cd0 <_ZN9IPAddressC1Ev>
}
   d64bc:	4620      	mov	r0, r4
   d64be:	bd10      	pop	{r4, pc}

000d64c0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d64c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d64c2:	2300      	movs	r3, #0
   d64c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d64c8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d64cc:	4a0e      	ldr	r2, [pc, #56]	; (d6508 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d64ce:	6103      	str	r3, [r0, #16]
   d64d0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d64d2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d64d4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d64d6:	20ac      	movs	r0, #172	; 0xac
   d64d8:	9101      	str	r1, [sp, #4]
   d64da:	f7fd fdda 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d64de:	1e05      	subs	r5, r0, #0
   d64e0:	f105 060c 	add.w	r6, r5, #12
   d64e4:	d008      	beq.n	d64f8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d64e6:	2301      	movs	r3, #1
   d64e8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d64ec:	4b07      	ldr	r3, [pc, #28]	; (d650c <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d64ee:	9901      	ldr	r1, [sp, #4]
   d64f0:	602b      	str	r3, [r5, #0]
   d64f2:	4630      	mov	r0, r6
   d64f4:	f7ff ffd9 	bl	d64aa <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d64f8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d64fa:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d64fe:	f7ff fee0 	bl	d62c2 <_ZN9TCPClient12flush_bufferEv>
}
   d6502:	b002      	add	sp, #8
   d6504:	bd70      	pop	{r4, r5, r6, pc}
   d6506:	bf00      	nop
   d6508:	000d7a88 	.word	0x000d7a88
   d650c:	000d7a6c 	.word	0x000d7a6c

000d6510 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d6510:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d6512:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d6516:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6518:	f7ff ffd2 	bl	d64c0 <_ZN9TCPClientC1Ei>
}
   d651c:	4620      	mov	r0, r4
   d651e:	bd10      	pop	{r4, pc}

000d6520 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d6520:	b510      	push	{r4, lr}
   d6522:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6524:	6800      	ldr	r0, [r0, #0]
   d6526:	2800      	cmp	r0, #0
   d6528:	db01      	blt.n	d652e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d652a:	f7fe fe7b 	bl	d5224 <sock_close>
    }
}
   d652e:	4620      	mov	r0, r4
   d6530:	bd10      	pop	{r4, pc}

000d6532 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d6532:	300c      	adds	r0, #12
   d6534:	f7ff bff4 	b.w	d6520 <_ZN9TCPClient4DataD1Ev>

000d6538 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d653c:	4698      	mov	r8, r3
    stop();
   d653e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6540:	b093      	sub	sp, #76	; 0x4c
   d6542:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d6544:	2400      	movs	r4, #0
    stop();
   d6546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6548:	4606      	mov	r6, r0
   d654a:	4617      	mov	r7, r2
    stop();
   d654c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d654e:	4628      	mov	r0, r5
   d6550:	466b      	mov	r3, sp
   d6552:	4622      	mov	r2, r4
   d6554:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d6556:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6558:	f7fe fd44 	bl	d4fe4 <netdb_getaddrinfo>
   d655c:	4605      	mov	r5, r0
   d655e:	2800      	cmp	r0, #0
   d6560:	d163      	bne.n	d662a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d6562:	9b00      	ldr	r3, [sp, #0]
   d6564:	2b00      	cmp	r3, #0
   d6566:	d04b      	beq.n	d6600 <_ZN9TCPClient7connectEPKctm+0xc8>
   d6568:	695b      	ldr	r3, [r3, #20]
   d656a:	2b00      	cmp	r3, #0
   d656c:	d048      	beq.n	d6600 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d656e:	a806      	add	r0, sp, #24
   d6570:	f7ff fbae 	bl	d5cd0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6574:	9b00      	ldr	r3, [sp, #0]
   d6576:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d6578:	7863      	ldrb	r3, [r4, #1]
   d657a:	2b02      	cmp	r3, #2
   d657c:	d104      	bne.n	d6588 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d657e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6580:	a806      	add	r0, sp, #24
   d6582:	f7ff f8f9 	bl	d5778 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d6586:	e026      	b.n	d65d6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d6588:	2b0a      	cmp	r3, #10
   d658a:	d124      	bne.n	d65d6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d658c:	2211      	movs	r2, #17
   d658e:	4629      	mov	r1, r5
   d6590:	a801      	add	r0, sp, #4
   d6592:	f001 f941 	bl	d7818 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6596:	68a3      	ldr	r3, [r4, #8]
   d6598:	2b00      	cmp	r3, #0
   d659a:	d038      	beq.n	d660e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d659c:	f104 0308 	add.w	r3, r4, #8
   d65a0:	f10d 0c04 	add.w	ip, sp, #4
   d65a4:	3418      	adds	r4, #24
   d65a6:	6818      	ldr	r0, [r3, #0]
   d65a8:	6859      	ldr	r1, [r3, #4]
   d65aa:	4662      	mov	r2, ip
   d65ac:	c203      	stmia	r2!, {r0, r1}
   d65ae:	3308      	adds	r3, #8
   d65b0:	42a3      	cmp	r3, r4
   d65b2:	4694      	mov	ip, r2
   d65b4:	d1f7      	bne.n	d65a6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d65b6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d65b8:	a901      	add	r1, sp, #4
   d65ba:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d65bc:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d65c0:	f7ff fb94 	bl	d5cec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d65c4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d65c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d65cc:	ac07      	add	r4, sp, #28
   d65ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d65d0:	f8dc 3000 	ldr.w	r3, [ip]
   d65d4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d65d6:	a806      	add	r0, sp, #24
   d65d8:	f7ff fb9a 	bl	d5d10 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d65dc:	b180      	cbz	r0, d6600 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d65de:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d65e0:	ad07      	add	r5, sp, #28
   d65e2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d65e6:	4b12      	ldr	r3, [pc, #72]	; (d6630 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d65e8:	930c      	str	r3, [sp, #48]	; 0x30
   d65ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d65ec:	ac0d      	add	r4, sp, #52	; 0x34
   d65ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d65f0:	682b      	ldr	r3, [r5, #0]
   d65f2:	7023      	strb	r3, [r4, #0]
   d65f4:	463a      	mov	r2, r7
   d65f6:	4643      	mov	r3, r8
   d65f8:	a90c      	add	r1, sp, #48	; 0x30
   d65fa:	4630      	mov	r0, r6
   d65fc:	47c8      	blx	r9
   d65fe:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d6600:	9800      	ldr	r0, [sp, #0]
   d6602:	f7fe fce7 	bl	d4fd4 <netdb_freeaddrinfo>
}
   d6606:	4628      	mov	r0, r5
   d6608:	b013      	add	sp, #76	; 0x4c
   d660a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d660e:	68e3      	ldr	r3, [r4, #12]
   d6610:	2b00      	cmp	r3, #0
   d6612:	d1c3      	bne.n	d659c <_ZN9TCPClient7connectEPKctm+0x64>
   d6614:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6618:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d661c:	f7fe fd52 	bl	d50c4 <inet_htonl>
   d6620:	4581      	cmp	r9, r0
   d6622:	d1bb      	bne.n	d659c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d6624:	f104 0114 	add.w	r1, r4, #20
   d6628:	e7aa      	b.n	d6580 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d662a:	4625      	mov	r5, r4
   d662c:	e7e8      	b.n	d6600 <_ZN9TCPClient7connectEPKctm+0xc8>
   d662e:	bf00      	nop
   d6630:	000d79b8 	.word	0x000d79b8

000d6634 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6634:	2200      	movs	r2, #0
   d6636:	6840      	ldr	r0, [r0, #4]
   d6638:	4611      	mov	r1, r2
   d663a:	f7fe bedf 	b.w	d53fc <network_ready>

000d663e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d663e:	2200      	movs	r2, #0
   d6640:	6840      	ldr	r0, [r0, #4]
   d6642:	4611      	mov	r1, r2
   d6644:	f7fe befa 	b.w	d543c <network_listening>

000d6648 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6648:	2200      	movs	r2, #0
   d664a:	6840      	ldr	r0, [r0, #4]
   d664c:	4611      	mov	r1, r2
   d664e:	f7fe bf05 	b.w	d545c <network_get_listen_timeout>

000d6652 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6652:	6840      	ldr	r0, [r0, #4]
   d6654:	2200      	movs	r2, #0
   d6656:	f7fe bef9 	b.w	d544c <network_set_listen_timeout>

000d665a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d665a:	6840      	ldr	r0, [r0, #4]
   d665c:	2200      	movs	r2, #0
   d665e:	f081 0101 	eor.w	r1, r1, #1
   d6662:	f7fe bee3 	b.w	d542c <network_listen>

000d6666 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6666:	2300      	movs	r3, #0
   d6668:	6840      	ldr	r0, [r0, #4]
   d666a:	461a      	mov	r2, r3
   d666c:	4619      	mov	r1, r3
   d666e:	f7fe bed5 	b.w	d541c <network_off>

000d6672 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6672:	2200      	movs	r2, #0
   d6674:	6840      	ldr	r0, [r0, #4]
   d6676:	4611      	mov	r1, r2
   d6678:	f7fe beb0 	b.w	d53dc <network_connecting>

000d667c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d667c:	6840      	ldr	r0, [r0, #4]
   d667e:	2200      	movs	r2, #0
   d6680:	2102      	movs	r1, #2
   d6682:	f7fe beb3 	b.w	d53ec <network_disconnect>

000d6686 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6686:	2300      	movs	r3, #0
   d6688:	6840      	ldr	r0, [r0, #4]
   d668a:	461a      	mov	r2, r3
   d668c:	f7fe be9e 	b.w	d53cc <network_connect>

000d6690 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6690:	4b02      	ldr	r3, [pc, #8]	; (d669c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6692:	2204      	movs	r2, #4
   d6694:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6696:	4a02      	ldr	r2, [pc, #8]	; (d66a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6698:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d669a:	4770      	bx	lr
   d669c:	2003e7c4 	.word	0x2003e7c4
   d66a0:	000d7ad4 	.word	0x000d7ad4

000d66a4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d66a4:	2300      	movs	r3, #0
   d66a6:	6840      	ldr	r0, [r0, #4]
   d66a8:	461a      	mov	r2, r3
   d66aa:	f7fe be8f 	b.w	d53cc <network_connect>

000d66ae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d66ae:	6840      	ldr	r0, [r0, #4]
   d66b0:	2200      	movs	r2, #0
   d66b2:	2102      	movs	r1, #2
   d66b4:	f7fe be9a 	b.w	d53ec <network_disconnect>

000d66b8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d66b8:	2200      	movs	r2, #0
   d66ba:	6840      	ldr	r0, [r0, #4]
   d66bc:	4611      	mov	r1, r2
   d66be:	f7fe be8d 	b.w	d53dc <network_connecting>

000d66c2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d66c2:	2200      	movs	r2, #0
   d66c4:	6840      	ldr	r0, [r0, #4]
   d66c6:	4611      	mov	r1, r2
   d66c8:	f7fe be98 	b.w	d53fc <network_ready>

000d66cc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d66cc:	2300      	movs	r3, #0
   d66ce:	6840      	ldr	r0, [r0, #4]
   d66d0:	461a      	mov	r2, r3
   d66d2:	4619      	mov	r1, r3
   d66d4:	f7fe be9a 	b.w	d540c <network_on>

000d66d8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d66d8:	2300      	movs	r3, #0
   d66da:	6840      	ldr	r0, [r0, #4]
   d66dc:	461a      	mov	r2, r3
   d66de:	4619      	mov	r1, r3
   d66e0:	f7fe be9c 	b.w	d541c <network_off>

000d66e4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d66e4:	6840      	ldr	r0, [r0, #4]
   d66e6:	2100      	movs	r1, #0
   d66e8:	f7fe bec0 	b.w	d546c <network_is_on>

000d66ec <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d66ec:	6840      	ldr	r0, [r0, #4]
   d66ee:	2100      	movs	r1, #0
   d66f0:	f7fe bec4 	b.w	d547c <network_is_off>

000d66f4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d66f4:	6840      	ldr	r0, [r0, #4]
   d66f6:	2200      	movs	r2, #0
   d66f8:	f081 0101 	eor.w	r1, r1, #1
   d66fc:	f7fe be96 	b.w	d542c <network_listen>

000d6700 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6700:	6840      	ldr	r0, [r0, #4]
   d6702:	2200      	movs	r2, #0
   d6704:	f7fe bea2 	b.w	d544c <network_set_listen_timeout>

000d6708 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6708:	2200      	movs	r2, #0
   d670a:	6840      	ldr	r0, [r0, #4]
   d670c:	4611      	mov	r1, r2
   d670e:	f7fe bea5 	b.w	d545c <network_get_listen_timeout>

000d6712 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6712:	2200      	movs	r2, #0
   d6714:	6840      	ldr	r0, [r0, #4]
   d6716:	4611      	mov	r1, r2
   d6718:	f7fe be90 	b.w	d543c <network_listening>

000d671c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d671c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6720:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6722:	b095      	sub	sp, #84	; 0x54
   d6724:	4616      	mov	r6, r2
   d6726:	460d      	mov	r5, r1
   d6728:	4607      	mov	r7, r0
    IPAddress addr;
   d672a:	f7ff fad1 	bl	d5cd0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d672e:	4621      	mov	r1, r4
   d6730:	2218      	movs	r2, #24
   d6732:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6734:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6736:	f001 f86f 	bl	d7818 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d673a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d673c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6740:	4621      	mov	r1, r4
   d6742:	466b      	mov	r3, sp
   d6744:	aa0c      	add	r2, sp, #48	; 0x30
   d6746:	4630      	mov	r0, r6
   d6748:	f7fe fc4c 	bl	d4fe4 <netdb_getaddrinfo>
    if (!r) {
   d674c:	4604      	mov	r4, r0
   d674e:	2800      	cmp	r0, #0
   d6750:	d14c      	bne.n	d67ec <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6752:	4602      	mov	r2, r0
   d6754:	2101      	movs	r1, #1
   d6756:	6868      	ldr	r0, [r5, #4]
   d6758:	f7fe fe50 	bl	d53fc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d675c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d675e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6760:	4622      	mov	r2, r4
   d6762:	6868      	ldr	r0, [r5, #4]
   d6764:	f7fe fe4a 	bl	d53fc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6768:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d676a:	4681      	mov	r9, r0
        bool ok = false;
   d676c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d676e:	2e00      	cmp	r6, #0
   d6770:	d03c      	beq.n	d67ec <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6772:	2900      	cmp	r1, #0
   d6774:	d13a      	bne.n	d67ec <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6776:	6873      	ldr	r3, [r6, #4]
   d6778:	2b02      	cmp	r3, #2
   d677a:	d003      	beq.n	d6784 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d677c:	2b0a      	cmp	r3, #10
   d677e:	d011      	beq.n	d67a4 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6780:	69f6      	ldr	r6, [r6, #28]
   d6782:	e7f4      	b.n	d676e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6784:	f1b8 0f00 	cmp.w	r8, #0
   d6788:	d00a      	beq.n	d67a0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d678a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d678c:	a806      	add	r0, sp, #24
   d678e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d6790:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d6792:	f7ff fae1 	bl	d5d58 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6798:	1d3c      	adds	r4, r7, #4
   d679a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d679c:	682b      	ldr	r3, [r5, #0]
   d679e:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d67a0:	4641      	mov	r1, r8
   d67a2:	e7ed      	b.n	d6780 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d67a4:	f1b9 0f00 	cmp.w	r9, #0
   d67a8:	d101      	bne.n	d67ae <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d67aa:	4649      	mov	r1, r9
   d67ac:	e7e8      	b.n	d6780 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d67ae:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d67b0:	2210      	movs	r2, #16
   d67b2:	a801      	add	r0, sp, #4
   d67b4:	f001 f830 	bl	d7818 <memset>
                    a.v = 6;
   d67b8:	2306      	movs	r3, #6
   d67ba:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d67be:	ad01      	add	r5, sp, #4
   d67c0:	f104 0308 	add.w	r3, r4, #8
   d67c4:	3418      	adds	r4, #24
   d67c6:	6818      	ldr	r0, [r3, #0]
   d67c8:	6859      	ldr	r1, [r3, #4]
   d67ca:	462a      	mov	r2, r5
   d67cc:	c203      	stmia	r2!, {r0, r1}
   d67ce:	3308      	adds	r3, #8
   d67d0:	42a3      	cmp	r3, r4
   d67d2:	4615      	mov	r5, r2
   d67d4:	d1f7      	bne.n	d67c6 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d67d6:	a901      	add	r1, sp, #4
   d67d8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d67da:	ad07      	add	r5, sp, #28
   d67dc:	f7ff fa86 	bl	d5cec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d67e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d67e2:	1d3c      	adds	r4, r7, #4
   d67e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d67e6:	682b      	ldr	r3, [r5, #0]
   d67e8:	7023      	strb	r3, [r4, #0]
   d67ea:	e7de      	b.n	d67aa <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d67ec:	9800      	ldr	r0, [sp, #0]
   d67ee:	f7fe fbf1 	bl	d4fd4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d67f2:	4638      	mov	r0, r7
   d67f4:	b015      	add	sp, #84	; 0x54
   d67f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d67fc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d67fc:	4b02      	ldr	r3, [pc, #8]	; (d6808 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d67fe:	4a03      	ldr	r2, [pc, #12]	; (d680c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6800:	601a      	str	r2, [r3, #0]
   d6802:	2200      	movs	r2, #0
   d6804:	605a      	str	r2, [r3, #4]

} // spark
   d6806:	4770      	bx	lr
   d6808:	2003e7cc 	.word	0x2003e7cc
   d680c:	000d7b10 	.word	0x000d7b10

000d6810 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6810:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6812:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6814:	d902      	bls.n	d681c <pinAvailable+0xc>
    return false;
   d6816:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6818:	b002      	add	sp, #8
   d681a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d681c:	f1a0 030b 	sub.w	r3, r0, #11
   d6820:	2b02      	cmp	r3, #2
   d6822:	d81a      	bhi.n	d685a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6824:	4c17      	ldr	r4, [pc, #92]	; (d6884 <pinAvailable+0x74>)
   d6826:	7821      	ldrb	r1, [r4, #0]
   d6828:	f3bf 8f5b 	dmb	ish
   d682c:	f011 0101 	ands.w	r1, r1, #1
   d6830:	d10b      	bne.n	d684a <pinAvailable+0x3a>
   d6832:	4620      	mov	r0, r4
   d6834:	9101      	str	r1, [sp, #4]
   d6836:	f7fd fc34 	bl	d40a2 <__cxa_guard_acquire>
   d683a:	9901      	ldr	r1, [sp, #4]
   d683c:	b128      	cbz	r0, d684a <pinAvailable+0x3a>
   d683e:	4812      	ldr	r0, [pc, #72]	; (d6888 <pinAvailable+0x78>)
   d6840:	f7fe fea0 	bl	d5584 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6844:	4620      	mov	r0, r4
   d6846:	f7fd fc31 	bl	d40ac <__cxa_guard_release>
   d684a:	4b0f      	ldr	r3, [pc, #60]	; (d6888 <pinAvailable+0x78>)
   d684c:	7818      	ldrb	r0, [r3, #0]
   d684e:	f7fe fd41 	bl	d52d4 <hal_spi_is_enabled>
   d6852:	2800      	cmp	r0, #0
   d6854:	d1df      	bne.n	d6816 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6856:	2001      	movs	r0, #1
   d6858:	e7de      	b.n	d6818 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d685a:	2801      	cmp	r0, #1
   d685c:	d809      	bhi.n	d6872 <pinAvailable+0x62>
   d685e:	f000 f86b 	bl	d6938 <_Z19__fetch_global_Wirev>
   d6862:	2100      	movs	r1, #0
   d6864:	7c00      	ldrb	r0, [r0, #16]
   d6866:	f7fe fcbd 	bl	d51e4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d686a:	f080 0001 	eor.w	r0, r0, #1
   d686e:	b2c0      	uxtb	r0, r0
   d6870:	e7d2      	b.n	d6818 <pinAvailable+0x8>
   d6872:	3809      	subs	r0, #9
   d6874:	2801      	cmp	r0, #1
   d6876:	d8ee      	bhi.n	d6856 <pinAvailable+0x46>
   d6878:	f7ff fb54 	bl	d5f24 <_Z22__fetch_global_Serial1v>
   d687c:	7c00      	ldrb	r0, [r0, #16]
   d687e:	f7fe fc61 	bl	d5144 <hal_usart_is_enabled>
   d6882:	e7f2      	b.n	d686a <pinAvailable+0x5a>
   d6884:	2003e644 	.word	0x2003e644
   d6888:	2003e648 	.word	0x2003e648

000d688c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d688c:	2823      	cmp	r0, #35	; 0x23
{
   d688e:	b538      	push	{r3, r4, r5, lr}
   d6890:	4604      	mov	r4, r0
   d6892:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6894:	d80a      	bhi.n	d68ac <pinMode+0x20>
   d6896:	29ff      	cmp	r1, #255	; 0xff
   d6898:	d008      	beq.n	d68ac <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d689a:	f7ff ffb9 	bl	d6810 <pinAvailable>
   d689e:	b128      	cbz	r0, d68ac <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d68a0:	4629      	mov	r1, r5
   d68a2:	4620      	mov	r0, r4
}
   d68a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d68a8:	f7fe bba4 	b.w	d4ff4 <HAL_Pin_Mode>
}
   d68ac:	bd38      	pop	{r3, r4, r5, pc}

000d68ae <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d68ae:	b538      	push	{r3, r4, r5, lr}
   d68b0:	4604      	mov	r4, r0
   d68b2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d68b4:	f7fe fba6 	bl	d5004 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d68b8:	28ff      	cmp	r0, #255	; 0xff
   d68ba:	d010      	beq.n	d68de <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d68bc:	2806      	cmp	r0, #6
   d68be:	d804      	bhi.n	d68ca <digitalWrite+0x1c>
   d68c0:	234d      	movs	r3, #77	; 0x4d
   d68c2:	fa23 f000 	lsr.w	r0, r3, r0
   d68c6:	07c3      	lsls	r3, r0, #31
   d68c8:	d409      	bmi.n	d68de <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d68ca:	4620      	mov	r0, r4
   d68cc:	f7ff ffa0 	bl	d6810 <pinAvailable>
   d68d0:	b128      	cbz	r0, d68de <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d68d2:	4629      	mov	r1, r5
   d68d4:	4620      	mov	r0, r4
}
   d68d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d68da:	f7fe bb9b 	b.w	d5014 <HAL_GPIO_Write>
}
   d68de:	bd38      	pop	{r3, r4, r5, pc}

000d68e0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d68e0:	b510      	push	{r4, lr}
   d68e2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d68e4:	f7fe fb8e 	bl	d5004 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d68e8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d68ea:	b2db      	uxtb	r3, r3
   d68ec:	2b01      	cmp	r3, #1
   d68ee:	d908      	bls.n	d6902 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d68f0:	4620      	mov	r0, r4
   d68f2:	f7ff ff8d 	bl	d6810 <pinAvailable>
   d68f6:	b120      	cbz	r0, d6902 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d68f8:	4620      	mov	r0, r4
}
   d68fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d68fe:	f7fe bb91 	b.w	d5024 <HAL_GPIO_Read>
}
   d6902:	2000      	movs	r0, #0
   d6904:	bd10      	pop	{r4, pc}
	...

000d6908 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6908:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d690a:	2300      	movs	r3, #0
   d690c:	2520      	movs	r5, #32
   d690e:	8043      	strh	r3, [r0, #2]
   d6910:	2314      	movs	r3, #20
{
   d6912:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6914:	8003      	strh	r3, [r0, #0]
   d6916:	6085      	str	r5, [r0, #8]
   d6918:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d691a:	4906      	ldr	r1, [pc, #24]	; (d6934 <_Z17acquireWireBufferv+0x2c>)
   d691c:	4628      	mov	r0, r5
   d691e:	f000 f83a 	bl	d6996 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6922:	4904      	ldr	r1, [pc, #16]	; (d6934 <_Z17acquireWireBufferv+0x2c>)
	};
   d6924:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6926:	4628      	mov	r0, r5
   d6928:	f000 f835 	bl	d6996 <_ZnajRKSt9nothrow_t>
	};
   d692c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d692e:	4620      	mov	r0, r4
   d6930:	bd38      	pop	{r3, r4, r5, pc}
   d6932:	bf00      	nop
   d6934:	000d7b44 	.word	0x000d7b44

000d6938 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6938:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d693a:	4d0f      	ldr	r5, [pc, #60]	; (d6978 <_Z19__fetch_global_Wirev+0x40>)
   d693c:	7829      	ldrb	r1, [r5, #0]
   d693e:	f3bf 8f5b 	dmb	ish
   d6942:	f011 0401 	ands.w	r4, r1, #1
{
   d6946:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6948:	d113      	bne.n	d6972 <_Z19__fetch_global_Wirev+0x3a>
   d694a:	4628      	mov	r0, r5
   d694c:	f7fd fba9 	bl	d40a2 <__cxa_guard_acquire>
   d6950:	b178      	cbz	r0, d6972 <_Z19__fetch_global_Wirev+0x3a>
   d6952:	a801      	add	r0, sp, #4
   d6954:	f7ff ffd8 	bl	d6908 <_Z17acquireWireBufferv>
   d6958:	aa01      	add	r2, sp, #4
   d695a:	4621      	mov	r1, r4
   d695c:	4807      	ldr	r0, [pc, #28]	; (d697c <_Z19__fetch_global_Wirev+0x44>)
   d695e:	f7ff fb37 	bl	d5fd0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6962:	4628      	mov	r0, r5
   d6964:	f7fd fba2 	bl	d40ac <__cxa_guard_release>
   d6968:	4a05      	ldr	r2, [pc, #20]	; (d6980 <_Z19__fetch_global_Wirev+0x48>)
   d696a:	4906      	ldr	r1, [pc, #24]	; (d6984 <_Z19__fetch_global_Wirev+0x4c>)
   d696c:	4803      	ldr	r0, [pc, #12]	; (d697c <_Z19__fetch_global_Wirev+0x44>)
   d696e:	f000 f80b 	bl	d6988 <__aeabi_atexit>
	return wire;
}
   d6972:	4802      	ldr	r0, [pc, #8]	; (d697c <_Z19__fetch_global_Wirev+0x44>)
   d6974:	b007      	add	sp, #28
   d6976:	bd30      	pop	{r4, r5, pc}
   d6978:	2003e7d8 	.word	0x2003e7d8
   d697c:	2003e7dc 	.word	0x2003e7dc
   d6980:	2003e5a4 	.word	0x2003e5a4
   d6984:	000d5f79 	.word	0x000d5f79

000d6988 <__aeabi_atexit>:
   d6988:	460b      	mov	r3, r1
   d698a:	4601      	mov	r1, r0
   d698c:	4618      	mov	r0, r3
   d698e:	f000 bf27 	b.w	d77e0 <__cxa_atexit>

000d6992 <_ZdlPvj>:
   d6992:	f7fd bb82 	b.w	d409a <_ZdlPv>

000d6996 <_ZnajRKSt9nothrow_t>:
   d6996:	f7fd bb7e 	b.w	d4096 <_Znaj>
	...

000d699c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d699c:	4901      	ldr	r1, [pc, #4]	; (d69a4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d699e:	f000 b8f9 	b.w	d6b94 <_ZNKSt9type_infoeqERKS_>
   d69a2:	bf00      	nop
   d69a4:	000d7b60 	.word	0x000d7b60

000d69a8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d69a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d69aa:	2400      	movs	r4, #0
   d69ac:	2310      	movs	r3, #16
   d69ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d69b2:	6803      	ldr	r3, [r0, #0]
   d69b4:	9400      	str	r4, [sp, #0]
   d69b6:	699e      	ldr	r6, [r3, #24]
   d69b8:	f88d 4004 	strb.w	r4, [sp, #4]
   d69bc:	4615      	mov	r5, r2
   d69be:	466b      	mov	r3, sp
   d69c0:	6812      	ldr	r2, [r2, #0]
   d69c2:	47b0      	blx	r6
   d69c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d69c8:	f003 0306 	and.w	r3, r3, #6
   d69cc:	2b06      	cmp	r3, #6
   d69ce:	bf03      	ittte	eq
   d69d0:	9b00      	ldreq	r3, [sp, #0]
   d69d2:	602b      	streq	r3, [r5, #0]
   d69d4:	2001      	moveq	r0, #1
   d69d6:	4620      	movne	r0, r4
   d69d8:	b004      	add	sp, #16
   d69da:	bd70      	pop	{r4, r5, r6, pc}

000d69dc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d69dc:	9800      	ldr	r0, [sp, #0]
   d69de:	4290      	cmp	r0, r2
   d69e0:	bf14      	ite	ne
   d69e2:	2001      	movne	r0, #1
   d69e4:	2006      	moveq	r0, #6
   d69e6:	4770      	bx	lr

000d69e8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d69e8:	b510      	push	{r4, lr}
   d69ea:	4b03      	ldr	r3, [pc, #12]	; (d69f8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d69ec:	6003      	str	r3, [r0, #0]
   d69ee:	4604      	mov	r4, r0
   d69f0:	f000 f8cd 	bl	d6b8e <_ZNSt9type_infoD1Ev>
   d69f4:	4620      	mov	r0, r4
   d69f6:	bd10      	pop	{r4, pc}
   d69f8:	000d7ba0 	.word	0x000d7ba0

000d69fc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d69fc:	b510      	push	{r4, lr}
   d69fe:	4604      	mov	r4, r0
   d6a00:	f7ff fff2 	bl	d69e8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6a04:	4620      	mov	r0, r4
   d6a06:	2108      	movs	r1, #8
   d6a08:	f7ff ffc3 	bl	d6992 <_ZdlPvj>
   d6a0c:	4620      	mov	r0, r4
   d6a0e:	bd10      	pop	{r4, pc}

000d6a10 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d6a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6a14:	461f      	mov	r7, r3
   d6a16:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d6a1a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d6a1e:	4598      	cmp	r8, r3
   d6a20:	4606      	mov	r6, r0
   d6a22:	4615      	mov	r5, r2
   d6a24:	d107      	bne.n	d6a36 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6a26:	9907      	ldr	r1, [sp, #28]
   d6a28:	f000 f8b4 	bl	d6b94 <_ZNKSt9type_infoeqERKS_>
   d6a2c:	b118      	cbz	r0, d6a36 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6a2e:	7165      	strb	r5, [r4, #5]
   d6a30:	2000      	movs	r0, #0
   d6a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6a36:	4639      	mov	r1, r7
   d6a38:	4630      	mov	r0, r6
   d6a3a:	f000 f8ab 	bl	d6b94 <_ZNKSt9type_infoeqERKS_>
   d6a3e:	2800      	cmp	r0, #0
   d6a40:	d0f6      	beq.n	d6a30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d6a42:	2301      	movs	r3, #1
   d6a44:	f8c4 8000 	str.w	r8, [r4]
   d6a48:	7125      	strb	r5, [r4, #4]
   d6a4a:	71a3      	strb	r3, [r4, #6]
   d6a4c:	e7f0      	b.n	d6a30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d6a4e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d6a4e:	b538      	push	{r3, r4, r5, lr}
   d6a50:	4615      	mov	r5, r2
   d6a52:	461c      	mov	r4, r3
   d6a54:	f000 f89e 	bl	d6b94 <_ZNKSt9type_infoeqERKS_>
   d6a58:	b120      	cbz	r0, d6a64 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d6a5a:	2308      	movs	r3, #8
   d6a5c:	60e3      	str	r3, [r4, #12]
   d6a5e:	2306      	movs	r3, #6
   d6a60:	6025      	str	r5, [r4, #0]
   d6a62:	7123      	strb	r3, [r4, #4]
   d6a64:	bd38      	pop	{r3, r4, r5, pc}

000d6a66 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d6a66:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6a68:	4605      	mov	r5, r0
   d6a6a:	460c      	mov	r4, r1
   d6a6c:	9201      	str	r2, [sp, #4]
   d6a6e:	461e      	mov	r6, r3
   d6a70:	f000 f890 	bl	d6b94 <_ZNKSt9type_infoeqERKS_>
   d6a74:	b950      	cbnz	r0, d6a8c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6a76:	2e03      	cmp	r6, #3
   d6a78:	d808      	bhi.n	d6a8c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6a7a:	6823      	ldr	r3, [r4, #0]
   d6a7c:	9a01      	ldr	r2, [sp, #4]
   d6a7e:	695b      	ldr	r3, [r3, #20]
   d6a80:	4629      	mov	r1, r5
   d6a82:	4620      	mov	r0, r4
   d6a84:	b002      	add	sp, #8
   d6a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6a8a:	4718      	bx	r3
   d6a8c:	b002      	add	sp, #8
   d6a8e:	bd70      	pop	{r4, r5, r6, pc}

000d6a90 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d6a90:	b510      	push	{r4, lr}
   d6a92:	4b03      	ldr	r3, [pc, #12]	; (d6aa0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d6a94:	6003      	str	r3, [r0, #0]
   d6a96:	4604      	mov	r4, r0
   d6a98:	f7ff ffa6 	bl	d69e8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6a9c:	4620      	mov	r0, r4
   d6a9e:	bd10      	pop	{r4, pc}
   d6aa0:	000d7c00 	.word	0x000d7c00

000d6aa4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d6aa4:	b510      	push	{r4, lr}
   d6aa6:	4604      	mov	r4, r0
   d6aa8:	f7ff fff2 	bl	d6a90 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d6aac:	4620      	mov	r0, r4
   d6aae:	210c      	movs	r1, #12
   d6ab0:	f7ff ff6f 	bl	d6992 <_ZdlPvj>
   d6ab4:	4620      	mov	r0, r4
   d6ab6:	bd10      	pop	{r4, pc}

000d6ab8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d6ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6aba:	9f08      	ldr	r7, [sp, #32]
   d6abc:	4297      	cmp	r7, r2
   d6abe:	4605      	mov	r5, r0
   d6ac0:	460e      	mov	r6, r1
   d6ac2:	4614      	mov	r4, r2
   d6ac4:	d00a      	beq.n	d6adc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d6ac6:	68a8      	ldr	r0, [r5, #8]
   d6ac8:	6802      	ldr	r2, [r0, #0]
   d6aca:	9708      	str	r7, [sp, #32]
   d6acc:	6a15      	ldr	r5, [r2, #32]
   d6ace:	4631      	mov	r1, r6
   d6ad0:	4622      	mov	r2, r4
   d6ad2:	46ac      	mov	ip, r5
   d6ad4:	b003      	add	sp, #12
   d6ad6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6ada:	4760      	bx	ip
   d6adc:	4619      	mov	r1, r3
   d6ade:	9301      	str	r3, [sp, #4]
   d6ae0:	f000 f858 	bl	d6b94 <_ZNKSt9type_infoeqERKS_>
   d6ae4:	9b01      	ldr	r3, [sp, #4]
   d6ae6:	2800      	cmp	r0, #0
   d6ae8:	d0ed      	beq.n	d6ac6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d6aea:	2006      	movs	r0, #6
   d6aec:	b003      	add	sp, #12
   d6aee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6af0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d6af0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6af4:	460d      	mov	r5, r1
   d6af6:	4619      	mov	r1, r3
   d6af8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d6afc:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d6b00:	4681      	mov	r9, r0
   d6b02:	4617      	mov	r7, r2
   d6b04:	4698      	mov	r8, r3
   d6b06:	f000 f845 	bl	d6b94 <_ZNKSt9type_infoeqERKS_>
   d6b0a:	b190      	cbz	r0, d6b32 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d6b0c:	2d00      	cmp	r5, #0
   d6b0e:	6034      	str	r4, [r6, #0]
   d6b10:	7137      	strb	r7, [r6, #4]
   d6b12:	db09      	blt.n	d6b28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d6b14:	1961      	adds	r1, r4, r5
   d6b16:	458a      	cmp	sl, r1
   d6b18:	bf0c      	ite	eq
   d6b1a:	2106      	moveq	r1, #6
   d6b1c:	2101      	movne	r1, #1
   d6b1e:	71b1      	strb	r1, [r6, #6]
   d6b20:	2000      	movs	r0, #0
   d6b22:	b001      	add	sp, #4
   d6b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6b28:	3502      	adds	r5, #2
   d6b2a:	d1f9      	bne.n	d6b20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6b2c:	2301      	movs	r3, #1
   d6b2e:	71b3      	strb	r3, [r6, #6]
   d6b30:	e7f6      	b.n	d6b20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6b32:	4554      	cmp	r4, sl
   d6b34:	d106      	bne.n	d6b44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6b36:	4659      	mov	r1, fp
   d6b38:	4648      	mov	r0, r9
   d6b3a:	f000 f82b 	bl	d6b94 <_ZNKSt9type_infoeqERKS_>
   d6b3e:	b108      	cbz	r0, d6b44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6b40:	7177      	strb	r7, [r6, #5]
   d6b42:	e7ed      	b.n	d6b20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6b44:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d6b48:	6803      	ldr	r3, [r0, #0]
   d6b4a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d6b4e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d6b52:	69dc      	ldr	r4, [r3, #28]
   d6b54:	463a      	mov	r2, r7
   d6b56:	4643      	mov	r3, r8
   d6b58:	4629      	mov	r1, r5
   d6b5a:	46a4      	mov	ip, r4
   d6b5c:	b001      	add	sp, #4
   d6b5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6b62:	4760      	bx	ip

000d6b64 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d6b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6b68:	4607      	mov	r7, r0
   d6b6a:	460c      	mov	r4, r1
   d6b6c:	4615      	mov	r5, r2
   d6b6e:	461e      	mov	r6, r3
   d6b70:	f7ff ff6d 	bl	d6a4e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d6b74:	b948      	cbnz	r0, d6b8a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d6b76:	68b8      	ldr	r0, [r7, #8]
   d6b78:	6803      	ldr	r3, [r0, #0]
   d6b7a:	699f      	ldr	r7, [r3, #24]
   d6b7c:	462a      	mov	r2, r5
   d6b7e:	4633      	mov	r3, r6
   d6b80:	4621      	mov	r1, r4
   d6b82:	46bc      	mov	ip, r7
   d6b84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d6b88:	4760      	bx	ip
   d6b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6b8e <_ZNSt9type_infoD1Ev>:
   d6b8e:	4770      	bx	lr

000d6b90 <_ZNKSt9type_info14__is_pointer_pEv>:
   d6b90:	2000      	movs	r0, #0
   d6b92:	4770      	bx	lr

000d6b94 <_ZNKSt9type_infoeqERKS_>:
   d6b94:	4281      	cmp	r1, r0
   d6b96:	b508      	push	{r3, lr}
   d6b98:	d00e      	beq.n	d6bb8 <_ZNKSt9type_infoeqERKS_+0x24>
   d6b9a:	6840      	ldr	r0, [r0, #4]
   d6b9c:	7803      	ldrb	r3, [r0, #0]
   d6b9e:	2b2a      	cmp	r3, #42	; 0x2a
   d6ba0:	d00c      	beq.n	d6bbc <_ZNKSt9type_infoeqERKS_+0x28>
   d6ba2:	6849      	ldr	r1, [r1, #4]
   d6ba4:	780b      	ldrb	r3, [r1, #0]
   d6ba6:	2b2a      	cmp	r3, #42	; 0x2a
   d6ba8:	bf08      	it	eq
   d6baa:	3101      	addeq	r1, #1
   d6bac:	f000 fe60 	bl	d7870 <strcmp>
   d6bb0:	fab0 f080 	clz	r0, r0
   d6bb4:	0940      	lsrs	r0, r0, #5
   d6bb6:	bd08      	pop	{r3, pc}
   d6bb8:	2001      	movs	r0, #1
   d6bba:	e7fc      	b.n	d6bb6 <_ZNKSt9type_infoeqERKS_+0x22>
   d6bbc:	2000      	movs	r0, #0
   d6bbe:	e7fa      	b.n	d6bb6 <_ZNKSt9type_infoeqERKS_+0x22>

000d6bc0 <__aeabi_drsub>:
   d6bc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6bc4:	e002      	b.n	d6bcc <__adddf3>
   d6bc6:	bf00      	nop

000d6bc8 <__aeabi_dsub>:
   d6bc8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6bcc <__adddf3>:
   d6bcc:	b530      	push	{r4, r5, lr}
   d6bce:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6bd2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6bd6:	ea94 0f05 	teq	r4, r5
   d6bda:	bf08      	it	eq
   d6bdc:	ea90 0f02 	teqeq	r0, r2
   d6be0:	bf1f      	itttt	ne
   d6be2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6be6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6bea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6bee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6bf2:	f000 80e2 	beq.w	d6dba <__adddf3+0x1ee>
   d6bf6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6bfa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6bfe:	bfb8      	it	lt
   d6c00:	426d      	neglt	r5, r5
   d6c02:	dd0c      	ble.n	d6c1e <__adddf3+0x52>
   d6c04:	442c      	add	r4, r5
   d6c06:	ea80 0202 	eor.w	r2, r0, r2
   d6c0a:	ea81 0303 	eor.w	r3, r1, r3
   d6c0e:	ea82 0000 	eor.w	r0, r2, r0
   d6c12:	ea83 0101 	eor.w	r1, r3, r1
   d6c16:	ea80 0202 	eor.w	r2, r0, r2
   d6c1a:	ea81 0303 	eor.w	r3, r1, r3
   d6c1e:	2d36      	cmp	r5, #54	; 0x36
   d6c20:	bf88      	it	hi
   d6c22:	bd30      	pophi	{r4, r5, pc}
   d6c24:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6c28:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6c2c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6c30:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6c34:	d002      	beq.n	d6c3c <__adddf3+0x70>
   d6c36:	4240      	negs	r0, r0
   d6c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6c3c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6c40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6c44:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6c48:	d002      	beq.n	d6c50 <__adddf3+0x84>
   d6c4a:	4252      	negs	r2, r2
   d6c4c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6c50:	ea94 0f05 	teq	r4, r5
   d6c54:	f000 80a7 	beq.w	d6da6 <__adddf3+0x1da>
   d6c58:	f1a4 0401 	sub.w	r4, r4, #1
   d6c5c:	f1d5 0e20 	rsbs	lr, r5, #32
   d6c60:	db0d      	blt.n	d6c7e <__adddf3+0xb2>
   d6c62:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6c66:	fa22 f205 	lsr.w	r2, r2, r5
   d6c6a:	1880      	adds	r0, r0, r2
   d6c6c:	f141 0100 	adc.w	r1, r1, #0
   d6c70:	fa03 f20e 	lsl.w	r2, r3, lr
   d6c74:	1880      	adds	r0, r0, r2
   d6c76:	fa43 f305 	asr.w	r3, r3, r5
   d6c7a:	4159      	adcs	r1, r3
   d6c7c:	e00e      	b.n	d6c9c <__adddf3+0xd0>
   d6c7e:	f1a5 0520 	sub.w	r5, r5, #32
   d6c82:	f10e 0e20 	add.w	lr, lr, #32
   d6c86:	2a01      	cmp	r2, #1
   d6c88:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6c8c:	bf28      	it	cs
   d6c8e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6c92:	fa43 f305 	asr.w	r3, r3, r5
   d6c96:	18c0      	adds	r0, r0, r3
   d6c98:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6c9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6ca0:	d507      	bpl.n	d6cb2 <__adddf3+0xe6>
   d6ca2:	f04f 0e00 	mov.w	lr, #0
   d6ca6:	f1dc 0c00 	rsbs	ip, ip, #0
   d6caa:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6cae:	eb6e 0101 	sbc.w	r1, lr, r1
   d6cb2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6cb6:	d31b      	bcc.n	d6cf0 <__adddf3+0x124>
   d6cb8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6cbc:	d30c      	bcc.n	d6cd8 <__adddf3+0x10c>
   d6cbe:	0849      	lsrs	r1, r1, #1
   d6cc0:	ea5f 0030 	movs.w	r0, r0, rrx
   d6cc4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6cc8:	f104 0401 	add.w	r4, r4, #1
   d6ccc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6cd0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6cd4:	f080 809a 	bcs.w	d6e0c <__adddf3+0x240>
   d6cd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6cdc:	bf08      	it	eq
   d6cde:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6ce2:	f150 0000 	adcs.w	r0, r0, #0
   d6ce6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6cea:	ea41 0105 	orr.w	r1, r1, r5
   d6cee:	bd30      	pop	{r4, r5, pc}
   d6cf0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6cf4:	4140      	adcs	r0, r0
   d6cf6:	eb41 0101 	adc.w	r1, r1, r1
   d6cfa:	3c01      	subs	r4, #1
   d6cfc:	bf28      	it	cs
   d6cfe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6d02:	d2e9      	bcs.n	d6cd8 <__adddf3+0x10c>
   d6d04:	f091 0f00 	teq	r1, #0
   d6d08:	bf04      	itt	eq
   d6d0a:	4601      	moveq	r1, r0
   d6d0c:	2000      	moveq	r0, #0
   d6d0e:	fab1 f381 	clz	r3, r1
   d6d12:	bf08      	it	eq
   d6d14:	3320      	addeq	r3, #32
   d6d16:	f1a3 030b 	sub.w	r3, r3, #11
   d6d1a:	f1b3 0220 	subs.w	r2, r3, #32
   d6d1e:	da0c      	bge.n	d6d3a <__adddf3+0x16e>
   d6d20:	320c      	adds	r2, #12
   d6d22:	dd08      	ble.n	d6d36 <__adddf3+0x16a>
   d6d24:	f102 0c14 	add.w	ip, r2, #20
   d6d28:	f1c2 020c 	rsb	r2, r2, #12
   d6d2c:	fa01 f00c 	lsl.w	r0, r1, ip
   d6d30:	fa21 f102 	lsr.w	r1, r1, r2
   d6d34:	e00c      	b.n	d6d50 <__adddf3+0x184>
   d6d36:	f102 0214 	add.w	r2, r2, #20
   d6d3a:	bfd8      	it	le
   d6d3c:	f1c2 0c20 	rsble	ip, r2, #32
   d6d40:	fa01 f102 	lsl.w	r1, r1, r2
   d6d44:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6d48:	bfdc      	itt	le
   d6d4a:	ea41 010c 	orrle.w	r1, r1, ip
   d6d4e:	4090      	lslle	r0, r2
   d6d50:	1ae4      	subs	r4, r4, r3
   d6d52:	bfa2      	ittt	ge
   d6d54:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6d58:	4329      	orrge	r1, r5
   d6d5a:	bd30      	popge	{r4, r5, pc}
   d6d5c:	ea6f 0404 	mvn.w	r4, r4
   d6d60:	3c1f      	subs	r4, #31
   d6d62:	da1c      	bge.n	d6d9e <__adddf3+0x1d2>
   d6d64:	340c      	adds	r4, #12
   d6d66:	dc0e      	bgt.n	d6d86 <__adddf3+0x1ba>
   d6d68:	f104 0414 	add.w	r4, r4, #20
   d6d6c:	f1c4 0220 	rsb	r2, r4, #32
   d6d70:	fa20 f004 	lsr.w	r0, r0, r4
   d6d74:	fa01 f302 	lsl.w	r3, r1, r2
   d6d78:	ea40 0003 	orr.w	r0, r0, r3
   d6d7c:	fa21 f304 	lsr.w	r3, r1, r4
   d6d80:	ea45 0103 	orr.w	r1, r5, r3
   d6d84:	bd30      	pop	{r4, r5, pc}
   d6d86:	f1c4 040c 	rsb	r4, r4, #12
   d6d8a:	f1c4 0220 	rsb	r2, r4, #32
   d6d8e:	fa20 f002 	lsr.w	r0, r0, r2
   d6d92:	fa01 f304 	lsl.w	r3, r1, r4
   d6d96:	ea40 0003 	orr.w	r0, r0, r3
   d6d9a:	4629      	mov	r1, r5
   d6d9c:	bd30      	pop	{r4, r5, pc}
   d6d9e:	fa21 f004 	lsr.w	r0, r1, r4
   d6da2:	4629      	mov	r1, r5
   d6da4:	bd30      	pop	{r4, r5, pc}
   d6da6:	f094 0f00 	teq	r4, #0
   d6daa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6dae:	bf06      	itte	eq
   d6db0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6db4:	3401      	addeq	r4, #1
   d6db6:	3d01      	subne	r5, #1
   d6db8:	e74e      	b.n	d6c58 <__adddf3+0x8c>
   d6dba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6dbe:	bf18      	it	ne
   d6dc0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6dc4:	d029      	beq.n	d6e1a <__adddf3+0x24e>
   d6dc6:	ea94 0f05 	teq	r4, r5
   d6dca:	bf08      	it	eq
   d6dcc:	ea90 0f02 	teqeq	r0, r2
   d6dd0:	d005      	beq.n	d6dde <__adddf3+0x212>
   d6dd2:	ea54 0c00 	orrs.w	ip, r4, r0
   d6dd6:	bf04      	itt	eq
   d6dd8:	4619      	moveq	r1, r3
   d6dda:	4610      	moveq	r0, r2
   d6ddc:	bd30      	pop	{r4, r5, pc}
   d6dde:	ea91 0f03 	teq	r1, r3
   d6de2:	bf1e      	ittt	ne
   d6de4:	2100      	movne	r1, #0
   d6de6:	2000      	movne	r0, #0
   d6de8:	bd30      	popne	{r4, r5, pc}
   d6dea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6dee:	d105      	bne.n	d6dfc <__adddf3+0x230>
   d6df0:	0040      	lsls	r0, r0, #1
   d6df2:	4149      	adcs	r1, r1
   d6df4:	bf28      	it	cs
   d6df6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6dfa:	bd30      	pop	{r4, r5, pc}
   d6dfc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6e00:	bf3c      	itt	cc
   d6e02:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6e06:	bd30      	popcc	{r4, r5, pc}
   d6e08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6e0c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6e10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6e14:	f04f 0000 	mov.w	r0, #0
   d6e18:	bd30      	pop	{r4, r5, pc}
   d6e1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6e1e:	bf1a      	itte	ne
   d6e20:	4619      	movne	r1, r3
   d6e22:	4610      	movne	r0, r2
   d6e24:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6e28:	bf1c      	itt	ne
   d6e2a:	460b      	movne	r3, r1
   d6e2c:	4602      	movne	r2, r0
   d6e2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6e32:	bf06      	itte	eq
   d6e34:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6e38:	ea91 0f03 	teqeq	r1, r3
   d6e3c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6e40:	bd30      	pop	{r4, r5, pc}
   d6e42:	bf00      	nop

000d6e44 <__aeabi_ui2d>:
   d6e44:	f090 0f00 	teq	r0, #0
   d6e48:	bf04      	itt	eq
   d6e4a:	2100      	moveq	r1, #0
   d6e4c:	4770      	bxeq	lr
   d6e4e:	b530      	push	{r4, r5, lr}
   d6e50:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e54:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e58:	f04f 0500 	mov.w	r5, #0
   d6e5c:	f04f 0100 	mov.w	r1, #0
   d6e60:	e750      	b.n	d6d04 <__adddf3+0x138>
   d6e62:	bf00      	nop

000d6e64 <__aeabi_i2d>:
   d6e64:	f090 0f00 	teq	r0, #0
   d6e68:	bf04      	itt	eq
   d6e6a:	2100      	moveq	r1, #0
   d6e6c:	4770      	bxeq	lr
   d6e6e:	b530      	push	{r4, r5, lr}
   d6e70:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e74:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e78:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6e7c:	bf48      	it	mi
   d6e7e:	4240      	negmi	r0, r0
   d6e80:	f04f 0100 	mov.w	r1, #0
   d6e84:	e73e      	b.n	d6d04 <__adddf3+0x138>
   d6e86:	bf00      	nop

000d6e88 <__aeabi_f2d>:
   d6e88:	0042      	lsls	r2, r0, #1
   d6e8a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6e8e:	ea4f 0131 	mov.w	r1, r1, rrx
   d6e92:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6e96:	bf1f      	itttt	ne
   d6e98:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6e9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6ea0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6ea4:	4770      	bxne	lr
   d6ea6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6eaa:	bf08      	it	eq
   d6eac:	4770      	bxeq	lr
   d6eae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6eb2:	bf04      	itt	eq
   d6eb4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6eb8:	4770      	bxeq	lr
   d6eba:	b530      	push	{r4, r5, lr}
   d6ebc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6ec0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6ec4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6ec8:	e71c      	b.n	d6d04 <__adddf3+0x138>
   d6eca:	bf00      	nop

000d6ecc <__aeabi_ul2d>:
   d6ecc:	ea50 0201 	orrs.w	r2, r0, r1
   d6ed0:	bf08      	it	eq
   d6ed2:	4770      	bxeq	lr
   d6ed4:	b530      	push	{r4, r5, lr}
   d6ed6:	f04f 0500 	mov.w	r5, #0
   d6eda:	e00a      	b.n	d6ef2 <__aeabi_l2d+0x16>

000d6edc <__aeabi_l2d>:
   d6edc:	ea50 0201 	orrs.w	r2, r0, r1
   d6ee0:	bf08      	it	eq
   d6ee2:	4770      	bxeq	lr
   d6ee4:	b530      	push	{r4, r5, lr}
   d6ee6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6eea:	d502      	bpl.n	d6ef2 <__aeabi_l2d+0x16>
   d6eec:	4240      	negs	r0, r0
   d6eee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6ef2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6ef6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6efa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6efe:	f43f aed8 	beq.w	d6cb2 <__adddf3+0xe6>
   d6f02:	f04f 0203 	mov.w	r2, #3
   d6f06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6f0a:	bf18      	it	ne
   d6f0c:	3203      	addne	r2, #3
   d6f0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6f12:	bf18      	it	ne
   d6f14:	3203      	addne	r2, #3
   d6f16:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6f1a:	f1c2 0320 	rsb	r3, r2, #32
   d6f1e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6f22:	fa20 f002 	lsr.w	r0, r0, r2
   d6f26:	fa01 fe03 	lsl.w	lr, r1, r3
   d6f2a:	ea40 000e 	orr.w	r0, r0, lr
   d6f2e:	fa21 f102 	lsr.w	r1, r1, r2
   d6f32:	4414      	add	r4, r2
   d6f34:	e6bd      	b.n	d6cb2 <__adddf3+0xe6>
   d6f36:	bf00      	nop

000d6f38 <__aeabi_dmul>:
   d6f38:	b570      	push	{r4, r5, r6, lr}
   d6f3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6f3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6f42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6f46:	bf1d      	ittte	ne
   d6f48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6f4c:	ea94 0f0c 	teqne	r4, ip
   d6f50:	ea95 0f0c 	teqne	r5, ip
   d6f54:	f000 f8de 	bleq	d7114 <__aeabi_dmul+0x1dc>
   d6f58:	442c      	add	r4, r5
   d6f5a:	ea81 0603 	eor.w	r6, r1, r3
   d6f5e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6f62:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6f66:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6f6a:	bf18      	it	ne
   d6f6c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6f70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6f74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6f78:	d038      	beq.n	d6fec <__aeabi_dmul+0xb4>
   d6f7a:	fba0 ce02 	umull	ip, lr, r0, r2
   d6f7e:	f04f 0500 	mov.w	r5, #0
   d6f82:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6f86:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6f8a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6f8e:	f04f 0600 	mov.w	r6, #0
   d6f92:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6f96:	f09c 0f00 	teq	ip, #0
   d6f9a:	bf18      	it	ne
   d6f9c:	f04e 0e01 	orrne.w	lr, lr, #1
   d6fa0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6fa4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6fa8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6fac:	d204      	bcs.n	d6fb8 <__aeabi_dmul+0x80>
   d6fae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6fb2:	416d      	adcs	r5, r5
   d6fb4:	eb46 0606 	adc.w	r6, r6, r6
   d6fb8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6fbc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6fc0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6fc4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6fc8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6fcc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6fd0:	bf88      	it	hi
   d6fd2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6fd6:	d81e      	bhi.n	d7016 <__aeabi_dmul+0xde>
   d6fd8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6fdc:	bf08      	it	eq
   d6fde:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6fe2:	f150 0000 	adcs.w	r0, r0, #0
   d6fe6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6fea:	bd70      	pop	{r4, r5, r6, pc}
   d6fec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6ff0:	ea46 0101 	orr.w	r1, r6, r1
   d6ff4:	ea40 0002 	orr.w	r0, r0, r2
   d6ff8:	ea81 0103 	eor.w	r1, r1, r3
   d6ffc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7000:	bfc2      	ittt	gt
   d7002:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7006:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d700a:	bd70      	popgt	{r4, r5, r6, pc}
   d700c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7010:	f04f 0e00 	mov.w	lr, #0
   d7014:	3c01      	subs	r4, #1
   d7016:	f300 80ab 	bgt.w	d7170 <__aeabi_dmul+0x238>
   d701a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d701e:	bfde      	ittt	le
   d7020:	2000      	movle	r0, #0
   d7022:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7026:	bd70      	pople	{r4, r5, r6, pc}
   d7028:	f1c4 0400 	rsb	r4, r4, #0
   d702c:	3c20      	subs	r4, #32
   d702e:	da35      	bge.n	d709c <__aeabi_dmul+0x164>
   d7030:	340c      	adds	r4, #12
   d7032:	dc1b      	bgt.n	d706c <__aeabi_dmul+0x134>
   d7034:	f104 0414 	add.w	r4, r4, #20
   d7038:	f1c4 0520 	rsb	r5, r4, #32
   d703c:	fa00 f305 	lsl.w	r3, r0, r5
   d7040:	fa20 f004 	lsr.w	r0, r0, r4
   d7044:	fa01 f205 	lsl.w	r2, r1, r5
   d7048:	ea40 0002 	orr.w	r0, r0, r2
   d704c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7050:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7054:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7058:	fa21 f604 	lsr.w	r6, r1, r4
   d705c:	eb42 0106 	adc.w	r1, r2, r6
   d7060:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7064:	bf08      	it	eq
   d7066:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d706a:	bd70      	pop	{r4, r5, r6, pc}
   d706c:	f1c4 040c 	rsb	r4, r4, #12
   d7070:	f1c4 0520 	rsb	r5, r4, #32
   d7074:	fa00 f304 	lsl.w	r3, r0, r4
   d7078:	fa20 f005 	lsr.w	r0, r0, r5
   d707c:	fa01 f204 	lsl.w	r2, r1, r4
   d7080:	ea40 0002 	orr.w	r0, r0, r2
   d7084:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7088:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d708c:	f141 0100 	adc.w	r1, r1, #0
   d7090:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7094:	bf08      	it	eq
   d7096:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d709a:	bd70      	pop	{r4, r5, r6, pc}
   d709c:	f1c4 0520 	rsb	r5, r4, #32
   d70a0:	fa00 f205 	lsl.w	r2, r0, r5
   d70a4:	ea4e 0e02 	orr.w	lr, lr, r2
   d70a8:	fa20 f304 	lsr.w	r3, r0, r4
   d70ac:	fa01 f205 	lsl.w	r2, r1, r5
   d70b0:	ea43 0302 	orr.w	r3, r3, r2
   d70b4:	fa21 f004 	lsr.w	r0, r1, r4
   d70b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d70bc:	fa21 f204 	lsr.w	r2, r1, r4
   d70c0:	ea20 0002 	bic.w	r0, r0, r2
   d70c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d70c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d70cc:	bf08      	it	eq
   d70ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d70d2:	bd70      	pop	{r4, r5, r6, pc}
   d70d4:	f094 0f00 	teq	r4, #0
   d70d8:	d10f      	bne.n	d70fa <__aeabi_dmul+0x1c2>
   d70da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d70de:	0040      	lsls	r0, r0, #1
   d70e0:	eb41 0101 	adc.w	r1, r1, r1
   d70e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d70e8:	bf08      	it	eq
   d70ea:	3c01      	subeq	r4, #1
   d70ec:	d0f7      	beq.n	d70de <__aeabi_dmul+0x1a6>
   d70ee:	ea41 0106 	orr.w	r1, r1, r6
   d70f2:	f095 0f00 	teq	r5, #0
   d70f6:	bf18      	it	ne
   d70f8:	4770      	bxne	lr
   d70fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d70fe:	0052      	lsls	r2, r2, #1
   d7100:	eb43 0303 	adc.w	r3, r3, r3
   d7104:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7108:	bf08      	it	eq
   d710a:	3d01      	subeq	r5, #1
   d710c:	d0f7      	beq.n	d70fe <__aeabi_dmul+0x1c6>
   d710e:	ea43 0306 	orr.w	r3, r3, r6
   d7112:	4770      	bx	lr
   d7114:	ea94 0f0c 	teq	r4, ip
   d7118:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d711c:	bf18      	it	ne
   d711e:	ea95 0f0c 	teqne	r5, ip
   d7122:	d00c      	beq.n	d713e <__aeabi_dmul+0x206>
   d7124:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7128:	bf18      	it	ne
   d712a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d712e:	d1d1      	bne.n	d70d4 <__aeabi_dmul+0x19c>
   d7130:	ea81 0103 	eor.w	r1, r1, r3
   d7134:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7138:	f04f 0000 	mov.w	r0, #0
   d713c:	bd70      	pop	{r4, r5, r6, pc}
   d713e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7142:	bf06      	itte	eq
   d7144:	4610      	moveq	r0, r2
   d7146:	4619      	moveq	r1, r3
   d7148:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d714c:	d019      	beq.n	d7182 <__aeabi_dmul+0x24a>
   d714e:	ea94 0f0c 	teq	r4, ip
   d7152:	d102      	bne.n	d715a <__aeabi_dmul+0x222>
   d7154:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7158:	d113      	bne.n	d7182 <__aeabi_dmul+0x24a>
   d715a:	ea95 0f0c 	teq	r5, ip
   d715e:	d105      	bne.n	d716c <__aeabi_dmul+0x234>
   d7160:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7164:	bf1c      	itt	ne
   d7166:	4610      	movne	r0, r2
   d7168:	4619      	movne	r1, r3
   d716a:	d10a      	bne.n	d7182 <__aeabi_dmul+0x24a>
   d716c:	ea81 0103 	eor.w	r1, r1, r3
   d7170:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7174:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7178:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d717c:	f04f 0000 	mov.w	r0, #0
   d7180:	bd70      	pop	{r4, r5, r6, pc}
   d7182:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7186:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d718a:	bd70      	pop	{r4, r5, r6, pc}

000d718c <__aeabi_ddiv>:
   d718c:	b570      	push	{r4, r5, r6, lr}
   d718e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7192:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7196:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d719a:	bf1d      	ittte	ne
   d719c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d71a0:	ea94 0f0c 	teqne	r4, ip
   d71a4:	ea95 0f0c 	teqne	r5, ip
   d71a8:	f000 f8a7 	bleq	d72fa <__aeabi_ddiv+0x16e>
   d71ac:	eba4 0405 	sub.w	r4, r4, r5
   d71b0:	ea81 0e03 	eor.w	lr, r1, r3
   d71b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d71b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d71bc:	f000 8088 	beq.w	d72d0 <__aeabi_ddiv+0x144>
   d71c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d71c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d71c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d71cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d71d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d71d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d71d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d71dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d71e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d71e4:	429d      	cmp	r5, r3
   d71e6:	bf08      	it	eq
   d71e8:	4296      	cmpeq	r6, r2
   d71ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d71ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d71f2:	d202      	bcs.n	d71fa <__aeabi_ddiv+0x6e>
   d71f4:	085b      	lsrs	r3, r3, #1
   d71f6:	ea4f 0232 	mov.w	r2, r2, rrx
   d71fa:	1ab6      	subs	r6, r6, r2
   d71fc:	eb65 0503 	sbc.w	r5, r5, r3
   d7200:	085b      	lsrs	r3, r3, #1
   d7202:	ea4f 0232 	mov.w	r2, r2, rrx
   d7206:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d720a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d720e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7212:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7216:	bf22      	ittt	cs
   d7218:	1ab6      	subcs	r6, r6, r2
   d721a:	4675      	movcs	r5, lr
   d721c:	ea40 000c 	orrcs.w	r0, r0, ip
   d7220:	085b      	lsrs	r3, r3, #1
   d7222:	ea4f 0232 	mov.w	r2, r2, rrx
   d7226:	ebb6 0e02 	subs.w	lr, r6, r2
   d722a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d722e:	bf22      	ittt	cs
   d7230:	1ab6      	subcs	r6, r6, r2
   d7232:	4675      	movcs	r5, lr
   d7234:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7238:	085b      	lsrs	r3, r3, #1
   d723a:	ea4f 0232 	mov.w	r2, r2, rrx
   d723e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7242:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7246:	bf22      	ittt	cs
   d7248:	1ab6      	subcs	r6, r6, r2
   d724a:	4675      	movcs	r5, lr
   d724c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7250:	085b      	lsrs	r3, r3, #1
   d7252:	ea4f 0232 	mov.w	r2, r2, rrx
   d7256:	ebb6 0e02 	subs.w	lr, r6, r2
   d725a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d725e:	bf22      	ittt	cs
   d7260:	1ab6      	subcs	r6, r6, r2
   d7262:	4675      	movcs	r5, lr
   d7264:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7268:	ea55 0e06 	orrs.w	lr, r5, r6
   d726c:	d018      	beq.n	d72a0 <__aeabi_ddiv+0x114>
   d726e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7272:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7276:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d727a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d727e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7282:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7286:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d728a:	d1c0      	bne.n	d720e <__aeabi_ddiv+0x82>
   d728c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7290:	d10b      	bne.n	d72aa <__aeabi_ddiv+0x11e>
   d7292:	ea41 0100 	orr.w	r1, r1, r0
   d7296:	f04f 0000 	mov.w	r0, #0
   d729a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d729e:	e7b6      	b.n	d720e <__aeabi_ddiv+0x82>
   d72a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d72a4:	bf04      	itt	eq
   d72a6:	4301      	orreq	r1, r0
   d72a8:	2000      	moveq	r0, #0
   d72aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d72ae:	bf88      	it	hi
   d72b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d72b4:	f63f aeaf 	bhi.w	d7016 <__aeabi_dmul+0xde>
   d72b8:	ebb5 0c03 	subs.w	ip, r5, r3
   d72bc:	bf04      	itt	eq
   d72be:	ebb6 0c02 	subseq.w	ip, r6, r2
   d72c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d72c6:	f150 0000 	adcs.w	r0, r0, #0
   d72ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d72ce:	bd70      	pop	{r4, r5, r6, pc}
   d72d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d72d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d72d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d72dc:	bfc2      	ittt	gt
   d72de:	ebd4 050c 	rsbsgt	r5, r4, ip
   d72e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d72e6:	bd70      	popgt	{r4, r5, r6, pc}
   d72e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d72ec:	f04f 0e00 	mov.w	lr, #0
   d72f0:	3c01      	subs	r4, #1
   d72f2:	e690      	b.n	d7016 <__aeabi_dmul+0xde>
   d72f4:	ea45 0e06 	orr.w	lr, r5, r6
   d72f8:	e68d      	b.n	d7016 <__aeabi_dmul+0xde>
   d72fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d72fe:	ea94 0f0c 	teq	r4, ip
   d7302:	bf08      	it	eq
   d7304:	ea95 0f0c 	teqeq	r5, ip
   d7308:	f43f af3b 	beq.w	d7182 <__aeabi_dmul+0x24a>
   d730c:	ea94 0f0c 	teq	r4, ip
   d7310:	d10a      	bne.n	d7328 <__aeabi_ddiv+0x19c>
   d7312:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7316:	f47f af34 	bne.w	d7182 <__aeabi_dmul+0x24a>
   d731a:	ea95 0f0c 	teq	r5, ip
   d731e:	f47f af25 	bne.w	d716c <__aeabi_dmul+0x234>
   d7322:	4610      	mov	r0, r2
   d7324:	4619      	mov	r1, r3
   d7326:	e72c      	b.n	d7182 <__aeabi_dmul+0x24a>
   d7328:	ea95 0f0c 	teq	r5, ip
   d732c:	d106      	bne.n	d733c <__aeabi_ddiv+0x1b0>
   d732e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7332:	f43f aefd 	beq.w	d7130 <__aeabi_dmul+0x1f8>
   d7336:	4610      	mov	r0, r2
   d7338:	4619      	mov	r1, r3
   d733a:	e722      	b.n	d7182 <__aeabi_dmul+0x24a>
   d733c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7340:	bf18      	it	ne
   d7342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7346:	f47f aec5 	bne.w	d70d4 <__aeabi_dmul+0x19c>
   d734a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d734e:	f47f af0d 	bne.w	d716c <__aeabi_dmul+0x234>
   d7352:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7356:	f47f aeeb 	bne.w	d7130 <__aeabi_dmul+0x1f8>
   d735a:	e712      	b.n	d7182 <__aeabi_dmul+0x24a>

000d735c <__gedf2>:
   d735c:	f04f 3cff 	mov.w	ip, #4294967295
   d7360:	e006      	b.n	d7370 <__cmpdf2+0x4>
   d7362:	bf00      	nop

000d7364 <__ledf2>:
   d7364:	f04f 0c01 	mov.w	ip, #1
   d7368:	e002      	b.n	d7370 <__cmpdf2+0x4>
   d736a:	bf00      	nop

000d736c <__cmpdf2>:
   d736c:	f04f 0c01 	mov.w	ip, #1
   d7370:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7374:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7378:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d737c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7380:	bf18      	it	ne
   d7382:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7386:	d01b      	beq.n	d73c0 <__cmpdf2+0x54>
   d7388:	b001      	add	sp, #4
   d738a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d738e:	bf0c      	ite	eq
   d7390:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7394:	ea91 0f03 	teqne	r1, r3
   d7398:	bf02      	ittt	eq
   d739a:	ea90 0f02 	teqeq	r0, r2
   d739e:	2000      	moveq	r0, #0
   d73a0:	4770      	bxeq	lr
   d73a2:	f110 0f00 	cmn.w	r0, #0
   d73a6:	ea91 0f03 	teq	r1, r3
   d73aa:	bf58      	it	pl
   d73ac:	4299      	cmppl	r1, r3
   d73ae:	bf08      	it	eq
   d73b0:	4290      	cmpeq	r0, r2
   d73b2:	bf2c      	ite	cs
   d73b4:	17d8      	asrcs	r0, r3, #31
   d73b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d73ba:	f040 0001 	orr.w	r0, r0, #1
   d73be:	4770      	bx	lr
   d73c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d73c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d73c8:	d102      	bne.n	d73d0 <__cmpdf2+0x64>
   d73ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d73ce:	d107      	bne.n	d73e0 <__cmpdf2+0x74>
   d73d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d73d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d73d8:	d1d6      	bne.n	d7388 <__cmpdf2+0x1c>
   d73da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d73de:	d0d3      	beq.n	d7388 <__cmpdf2+0x1c>
   d73e0:	f85d 0b04 	ldr.w	r0, [sp], #4
   d73e4:	4770      	bx	lr
   d73e6:	bf00      	nop

000d73e8 <__aeabi_cdrcmple>:
   d73e8:	4684      	mov	ip, r0
   d73ea:	4610      	mov	r0, r2
   d73ec:	4662      	mov	r2, ip
   d73ee:	468c      	mov	ip, r1
   d73f0:	4619      	mov	r1, r3
   d73f2:	4663      	mov	r3, ip
   d73f4:	e000      	b.n	d73f8 <__aeabi_cdcmpeq>
   d73f6:	bf00      	nop

000d73f8 <__aeabi_cdcmpeq>:
   d73f8:	b501      	push	{r0, lr}
   d73fa:	f7ff ffb7 	bl	d736c <__cmpdf2>
   d73fe:	2800      	cmp	r0, #0
   d7400:	bf48      	it	mi
   d7402:	f110 0f00 	cmnmi.w	r0, #0
   d7406:	bd01      	pop	{r0, pc}

000d7408 <__aeabi_dcmpeq>:
   d7408:	f84d ed08 	str.w	lr, [sp, #-8]!
   d740c:	f7ff fff4 	bl	d73f8 <__aeabi_cdcmpeq>
   d7410:	bf0c      	ite	eq
   d7412:	2001      	moveq	r0, #1
   d7414:	2000      	movne	r0, #0
   d7416:	f85d fb08 	ldr.w	pc, [sp], #8
   d741a:	bf00      	nop

000d741c <__aeabi_dcmplt>:
   d741c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7420:	f7ff ffea 	bl	d73f8 <__aeabi_cdcmpeq>
   d7424:	bf34      	ite	cc
   d7426:	2001      	movcc	r0, #1
   d7428:	2000      	movcs	r0, #0
   d742a:	f85d fb08 	ldr.w	pc, [sp], #8
   d742e:	bf00      	nop

000d7430 <__aeabi_dcmple>:
   d7430:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7434:	f7ff ffe0 	bl	d73f8 <__aeabi_cdcmpeq>
   d7438:	bf94      	ite	ls
   d743a:	2001      	movls	r0, #1
   d743c:	2000      	movhi	r0, #0
   d743e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7442:	bf00      	nop

000d7444 <__aeabi_dcmpge>:
   d7444:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7448:	f7ff ffce 	bl	d73e8 <__aeabi_cdrcmple>
   d744c:	bf94      	ite	ls
   d744e:	2001      	movls	r0, #1
   d7450:	2000      	movhi	r0, #0
   d7452:	f85d fb08 	ldr.w	pc, [sp], #8
   d7456:	bf00      	nop

000d7458 <__aeabi_dcmpgt>:
   d7458:	f84d ed08 	str.w	lr, [sp, #-8]!
   d745c:	f7ff ffc4 	bl	d73e8 <__aeabi_cdrcmple>
   d7460:	bf34      	ite	cc
   d7462:	2001      	movcc	r0, #1
   d7464:	2000      	movcs	r0, #0
   d7466:	f85d fb08 	ldr.w	pc, [sp], #8
   d746a:	bf00      	nop

000d746c <__aeabi_d2uiz>:
   d746c:	004a      	lsls	r2, r1, #1
   d746e:	d211      	bcs.n	d7494 <__aeabi_d2uiz+0x28>
   d7470:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7474:	d211      	bcs.n	d749a <__aeabi_d2uiz+0x2e>
   d7476:	d50d      	bpl.n	d7494 <__aeabi_d2uiz+0x28>
   d7478:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d747c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7480:	d40e      	bmi.n	d74a0 <__aeabi_d2uiz+0x34>
   d7482:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7486:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d748a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d748e:	fa23 f002 	lsr.w	r0, r3, r2
   d7492:	4770      	bx	lr
   d7494:	f04f 0000 	mov.w	r0, #0
   d7498:	4770      	bx	lr
   d749a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d749e:	d102      	bne.n	d74a6 <__aeabi_d2uiz+0x3a>
   d74a0:	f04f 30ff 	mov.w	r0, #4294967295
   d74a4:	4770      	bx	lr
   d74a6:	f04f 0000 	mov.w	r0, #0
   d74aa:	4770      	bx	lr

000d74ac <__aeabi_uldivmod>:
   d74ac:	b953      	cbnz	r3, d74c4 <__aeabi_uldivmod+0x18>
   d74ae:	b94a      	cbnz	r2, d74c4 <__aeabi_uldivmod+0x18>
   d74b0:	2900      	cmp	r1, #0
   d74b2:	bf08      	it	eq
   d74b4:	2800      	cmpeq	r0, #0
   d74b6:	bf1c      	itt	ne
   d74b8:	f04f 31ff 	movne.w	r1, #4294967295
   d74bc:	f04f 30ff 	movne.w	r0, #4294967295
   d74c0:	f000 b98c 	b.w	d77dc <__aeabi_idiv0>
   d74c4:	f1ad 0c08 	sub.w	ip, sp, #8
   d74c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d74cc:	f000 f824 	bl	d7518 <__udivmoddi4>
   d74d0:	f8dd e004 	ldr.w	lr, [sp, #4]
   d74d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d74d8:	b004      	add	sp, #16
   d74da:	4770      	bx	lr

000d74dc <__aeabi_d2ulz>:
   d74dc:	b5d0      	push	{r4, r6, r7, lr}
   d74de:	4b0c      	ldr	r3, [pc, #48]	; (d7510 <__aeabi_d2ulz+0x34>)
   d74e0:	2200      	movs	r2, #0
   d74e2:	4606      	mov	r6, r0
   d74e4:	460f      	mov	r7, r1
   d74e6:	f7ff fd27 	bl	d6f38 <__aeabi_dmul>
   d74ea:	f7ff ffbf 	bl	d746c <__aeabi_d2uiz>
   d74ee:	4604      	mov	r4, r0
   d74f0:	f7ff fca8 	bl	d6e44 <__aeabi_ui2d>
   d74f4:	4b07      	ldr	r3, [pc, #28]	; (d7514 <__aeabi_d2ulz+0x38>)
   d74f6:	2200      	movs	r2, #0
   d74f8:	f7ff fd1e 	bl	d6f38 <__aeabi_dmul>
   d74fc:	4602      	mov	r2, r0
   d74fe:	460b      	mov	r3, r1
   d7500:	4630      	mov	r0, r6
   d7502:	4639      	mov	r1, r7
   d7504:	f7ff fb60 	bl	d6bc8 <__aeabi_dsub>
   d7508:	f7ff ffb0 	bl	d746c <__aeabi_d2uiz>
   d750c:	4621      	mov	r1, r4
   d750e:	bdd0      	pop	{r4, r6, r7, pc}
   d7510:	3df00000 	.word	0x3df00000
   d7514:	41f00000 	.word	0x41f00000

000d7518 <__udivmoddi4>:
   d7518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d751c:	9d08      	ldr	r5, [sp, #32]
   d751e:	4604      	mov	r4, r0
   d7520:	468c      	mov	ip, r1
   d7522:	2b00      	cmp	r3, #0
   d7524:	f040 8083 	bne.w	d762e <__udivmoddi4+0x116>
   d7528:	428a      	cmp	r2, r1
   d752a:	4617      	mov	r7, r2
   d752c:	d947      	bls.n	d75be <__udivmoddi4+0xa6>
   d752e:	fab2 f282 	clz	r2, r2
   d7532:	b142      	cbz	r2, d7546 <__udivmoddi4+0x2e>
   d7534:	f1c2 0020 	rsb	r0, r2, #32
   d7538:	fa24 f000 	lsr.w	r0, r4, r0
   d753c:	4091      	lsls	r1, r2
   d753e:	4097      	lsls	r7, r2
   d7540:	ea40 0c01 	orr.w	ip, r0, r1
   d7544:	4094      	lsls	r4, r2
   d7546:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d754a:	0c23      	lsrs	r3, r4, #16
   d754c:	fbbc f6f8 	udiv	r6, ip, r8
   d7550:	fa1f fe87 	uxth.w	lr, r7
   d7554:	fb08 c116 	mls	r1, r8, r6, ip
   d7558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d755c:	fb06 f10e 	mul.w	r1, r6, lr
   d7560:	4299      	cmp	r1, r3
   d7562:	d909      	bls.n	d7578 <__udivmoddi4+0x60>
   d7564:	18fb      	adds	r3, r7, r3
   d7566:	f106 30ff 	add.w	r0, r6, #4294967295
   d756a:	f080 8119 	bcs.w	d77a0 <__udivmoddi4+0x288>
   d756e:	4299      	cmp	r1, r3
   d7570:	f240 8116 	bls.w	d77a0 <__udivmoddi4+0x288>
   d7574:	3e02      	subs	r6, #2
   d7576:	443b      	add	r3, r7
   d7578:	1a5b      	subs	r3, r3, r1
   d757a:	b2a4      	uxth	r4, r4
   d757c:	fbb3 f0f8 	udiv	r0, r3, r8
   d7580:	fb08 3310 	mls	r3, r8, r0, r3
   d7584:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d7588:	fb00 fe0e 	mul.w	lr, r0, lr
   d758c:	45a6      	cmp	lr, r4
   d758e:	d909      	bls.n	d75a4 <__udivmoddi4+0x8c>
   d7590:	193c      	adds	r4, r7, r4
   d7592:	f100 33ff 	add.w	r3, r0, #4294967295
   d7596:	f080 8105 	bcs.w	d77a4 <__udivmoddi4+0x28c>
   d759a:	45a6      	cmp	lr, r4
   d759c:	f240 8102 	bls.w	d77a4 <__udivmoddi4+0x28c>
   d75a0:	3802      	subs	r0, #2
   d75a2:	443c      	add	r4, r7
   d75a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d75a8:	eba4 040e 	sub.w	r4, r4, lr
   d75ac:	2600      	movs	r6, #0
   d75ae:	b11d      	cbz	r5, d75b8 <__udivmoddi4+0xa0>
   d75b0:	40d4      	lsrs	r4, r2
   d75b2:	2300      	movs	r3, #0
   d75b4:	e9c5 4300 	strd	r4, r3, [r5]
   d75b8:	4631      	mov	r1, r6
   d75ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d75be:	b902      	cbnz	r2, d75c2 <__udivmoddi4+0xaa>
   d75c0:	deff      	udf	#255	; 0xff
   d75c2:	fab2 f282 	clz	r2, r2
   d75c6:	2a00      	cmp	r2, #0
   d75c8:	d150      	bne.n	d766c <__udivmoddi4+0x154>
   d75ca:	1bcb      	subs	r3, r1, r7
   d75cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d75d0:	fa1f f887 	uxth.w	r8, r7
   d75d4:	2601      	movs	r6, #1
   d75d6:	fbb3 fcfe 	udiv	ip, r3, lr
   d75da:	0c21      	lsrs	r1, r4, #16
   d75dc:	fb0e 331c 	mls	r3, lr, ip, r3
   d75e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d75e4:	fb08 f30c 	mul.w	r3, r8, ip
   d75e8:	428b      	cmp	r3, r1
   d75ea:	d907      	bls.n	d75fc <__udivmoddi4+0xe4>
   d75ec:	1879      	adds	r1, r7, r1
   d75ee:	f10c 30ff 	add.w	r0, ip, #4294967295
   d75f2:	d202      	bcs.n	d75fa <__udivmoddi4+0xe2>
   d75f4:	428b      	cmp	r3, r1
   d75f6:	f200 80e9 	bhi.w	d77cc <__udivmoddi4+0x2b4>
   d75fa:	4684      	mov	ip, r0
   d75fc:	1ac9      	subs	r1, r1, r3
   d75fe:	b2a3      	uxth	r3, r4
   d7600:	fbb1 f0fe 	udiv	r0, r1, lr
   d7604:	fb0e 1110 	mls	r1, lr, r0, r1
   d7608:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d760c:	fb08 f800 	mul.w	r8, r8, r0
   d7610:	45a0      	cmp	r8, r4
   d7612:	d907      	bls.n	d7624 <__udivmoddi4+0x10c>
   d7614:	193c      	adds	r4, r7, r4
   d7616:	f100 33ff 	add.w	r3, r0, #4294967295
   d761a:	d202      	bcs.n	d7622 <__udivmoddi4+0x10a>
   d761c:	45a0      	cmp	r8, r4
   d761e:	f200 80d9 	bhi.w	d77d4 <__udivmoddi4+0x2bc>
   d7622:	4618      	mov	r0, r3
   d7624:	eba4 0408 	sub.w	r4, r4, r8
   d7628:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d762c:	e7bf      	b.n	d75ae <__udivmoddi4+0x96>
   d762e:	428b      	cmp	r3, r1
   d7630:	d909      	bls.n	d7646 <__udivmoddi4+0x12e>
   d7632:	2d00      	cmp	r5, #0
   d7634:	f000 80b1 	beq.w	d779a <__udivmoddi4+0x282>
   d7638:	2600      	movs	r6, #0
   d763a:	e9c5 0100 	strd	r0, r1, [r5]
   d763e:	4630      	mov	r0, r6
   d7640:	4631      	mov	r1, r6
   d7642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7646:	fab3 f683 	clz	r6, r3
   d764a:	2e00      	cmp	r6, #0
   d764c:	d14a      	bne.n	d76e4 <__udivmoddi4+0x1cc>
   d764e:	428b      	cmp	r3, r1
   d7650:	d302      	bcc.n	d7658 <__udivmoddi4+0x140>
   d7652:	4282      	cmp	r2, r0
   d7654:	f200 80b8 	bhi.w	d77c8 <__udivmoddi4+0x2b0>
   d7658:	1a84      	subs	r4, r0, r2
   d765a:	eb61 0103 	sbc.w	r1, r1, r3
   d765e:	2001      	movs	r0, #1
   d7660:	468c      	mov	ip, r1
   d7662:	2d00      	cmp	r5, #0
   d7664:	d0a8      	beq.n	d75b8 <__udivmoddi4+0xa0>
   d7666:	e9c5 4c00 	strd	r4, ip, [r5]
   d766a:	e7a5      	b.n	d75b8 <__udivmoddi4+0xa0>
   d766c:	f1c2 0320 	rsb	r3, r2, #32
   d7670:	fa20 f603 	lsr.w	r6, r0, r3
   d7674:	4097      	lsls	r7, r2
   d7676:	fa01 f002 	lsl.w	r0, r1, r2
   d767a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d767e:	40d9      	lsrs	r1, r3
   d7680:	4330      	orrs	r0, r6
   d7682:	0c03      	lsrs	r3, r0, #16
   d7684:	fbb1 f6fe 	udiv	r6, r1, lr
   d7688:	fa1f f887 	uxth.w	r8, r7
   d768c:	fb0e 1116 	mls	r1, lr, r6, r1
   d7690:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d7694:	fb06 f108 	mul.w	r1, r6, r8
   d7698:	4299      	cmp	r1, r3
   d769a:	fa04 f402 	lsl.w	r4, r4, r2
   d769e:	d909      	bls.n	d76b4 <__udivmoddi4+0x19c>
   d76a0:	18fb      	adds	r3, r7, r3
   d76a2:	f106 3cff 	add.w	ip, r6, #4294967295
   d76a6:	f080 808d 	bcs.w	d77c4 <__udivmoddi4+0x2ac>
   d76aa:	4299      	cmp	r1, r3
   d76ac:	f240 808a 	bls.w	d77c4 <__udivmoddi4+0x2ac>
   d76b0:	3e02      	subs	r6, #2
   d76b2:	443b      	add	r3, r7
   d76b4:	1a5b      	subs	r3, r3, r1
   d76b6:	b281      	uxth	r1, r0
   d76b8:	fbb3 f0fe 	udiv	r0, r3, lr
   d76bc:	fb0e 3310 	mls	r3, lr, r0, r3
   d76c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d76c4:	fb00 f308 	mul.w	r3, r0, r8
   d76c8:	428b      	cmp	r3, r1
   d76ca:	d907      	bls.n	d76dc <__udivmoddi4+0x1c4>
   d76cc:	1879      	adds	r1, r7, r1
   d76ce:	f100 3cff 	add.w	ip, r0, #4294967295
   d76d2:	d273      	bcs.n	d77bc <__udivmoddi4+0x2a4>
   d76d4:	428b      	cmp	r3, r1
   d76d6:	d971      	bls.n	d77bc <__udivmoddi4+0x2a4>
   d76d8:	3802      	subs	r0, #2
   d76da:	4439      	add	r1, r7
   d76dc:	1acb      	subs	r3, r1, r3
   d76de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d76e2:	e778      	b.n	d75d6 <__udivmoddi4+0xbe>
   d76e4:	f1c6 0c20 	rsb	ip, r6, #32
   d76e8:	fa03 f406 	lsl.w	r4, r3, r6
   d76ec:	fa22 f30c 	lsr.w	r3, r2, ip
   d76f0:	431c      	orrs	r4, r3
   d76f2:	fa20 f70c 	lsr.w	r7, r0, ip
   d76f6:	fa01 f306 	lsl.w	r3, r1, r6
   d76fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d76fe:	fa21 f10c 	lsr.w	r1, r1, ip
   d7702:	431f      	orrs	r7, r3
   d7704:	0c3b      	lsrs	r3, r7, #16
   d7706:	fbb1 f9fe 	udiv	r9, r1, lr
   d770a:	fa1f f884 	uxth.w	r8, r4
   d770e:	fb0e 1119 	mls	r1, lr, r9, r1
   d7712:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d7716:	fb09 fa08 	mul.w	sl, r9, r8
   d771a:	458a      	cmp	sl, r1
   d771c:	fa02 f206 	lsl.w	r2, r2, r6
   d7720:	fa00 f306 	lsl.w	r3, r0, r6
   d7724:	d908      	bls.n	d7738 <__udivmoddi4+0x220>
   d7726:	1861      	adds	r1, r4, r1
   d7728:	f109 30ff 	add.w	r0, r9, #4294967295
   d772c:	d248      	bcs.n	d77c0 <__udivmoddi4+0x2a8>
   d772e:	458a      	cmp	sl, r1
   d7730:	d946      	bls.n	d77c0 <__udivmoddi4+0x2a8>
   d7732:	f1a9 0902 	sub.w	r9, r9, #2
   d7736:	4421      	add	r1, r4
   d7738:	eba1 010a 	sub.w	r1, r1, sl
   d773c:	b2bf      	uxth	r7, r7
   d773e:	fbb1 f0fe 	udiv	r0, r1, lr
   d7742:	fb0e 1110 	mls	r1, lr, r0, r1
   d7746:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d774a:	fb00 f808 	mul.w	r8, r0, r8
   d774e:	45b8      	cmp	r8, r7
   d7750:	d907      	bls.n	d7762 <__udivmoddi4+0x24a>
   d7752:	19e7      	adds	r7, r4, r7
   d7754:	f100 31ff 	add.w	r1, r0, #4294967295
   d7758:	d22e      	bcs.n	d77b8 <__udivmoddi4+0x2a0>
   d775a:	45b8      	cmp	r8, r7
   d775c:	d92c      	bls.n	d77b8 <__udivmoddi4+0x2a0>
   d775e:	3802      	subs	r0, #2
   d7760:	4427      	add	r7, r4
   d7762:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d7766:	eba7 0708 	sub.w	r7, r7, r8
   d776a:	fba0 8902 	umull	r8, r9, r0, r2
   d776e:	454f      	cmp	r7, r9
   d7770:	46c6      	mov	lr, r8
   d7772:	4649      	mov	r1, r9
   d7774:	d31a      	bcc.n	d77ac <__udivmoddi4+0x294>
   d7776:	d017      	beq.n	d77a8 <__udivmoddi4+0x290>
   d7778:	b15d      	cbz	r5, d7792 <__udivmoddi4+0x27a>
   d777a:	ebb3 020e 	subs.w	r2, r3, lr
   d777e:	eb67 0701 	sbc.w	r7, r7, r1
   d7782:	fa07 fc0c 	lsl.w	ip, r7, ip
   d7786:	40f2      	lsrs	r2, r6
   d7788:	ea4c 0202 	orr.w	r2, ip, r2
   d778c:	40f7      	lsrs	r7, r6
   d778e:	e9c5 2700 	strd	r2, r7, [r5]
   d7792:	2600      	movs	r6, #0
   d7794:	4631      	mov	r1, r6
   d7796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d779a:	462e      	mov	r6, r5
   d779c:	4628      	mov	r0, r5
   d779e:	e70b      	b.n	d75b8 <__udivmoddi4+0xa0>
   d77a0:	4606      	mov	r6, r0
   d77a2:	e6e9      	b.n	d7578 <__udivmoddi4+0x60>
   d77a4:	4618      	mov	r0, r3
   d77a6:	e6fd      	b.n	d75a4 <__udivmoddi4+0x8c>
   d77a8:	4543      	cmp	r3, r8
   d77aa:	d2e5      	bcs.n	d7778 <__udivmoddi4+0x260>
   d77ac:	ebb8 0e02 	subs.w	lr, r8, r2
   d77b0:	eb69 0104 	sbc.w	r1, r9, r4
   d77b4:	3801      	subs	r0, #1
   d77b6:	e7df      	b.n	d7778 <__udivmoddi4+0x260>
   d77b8:	4608      	mov	r0, r1
   d77ba:	e7d2      	b.n	d7762 <__udivmoddi4+0x24a>
   d77bc:	4660      	mov	r0, ip
   d77be:	e78d      	b.n	d76dc <__udivmoddi4+0x1c4>
   d77c0:	4681      	mov	r9, r0
   d77c2:	e7b9      	b.n	d7738 <__udivmoddi4+0x220>
   d77c4:	4666      	mov	r6, ip
   d77c6:	e775      	b.n	d76b4 <__udivmoddi4+0x19c>
   d77c8:	4630      	mov	r0, r6
   d77ca:	e74a      	b.n	d7662 <__udivmoddi4+0x14a>
   d77cc:	f1ac 0c02 	sub.w	ip, ip, #2
   d77d0:	4439      	add	r1, r7
   d77d2:	e713      	b.n	d75fc <__udivmoddi4+0xe4>
   d77d4:	3802      	subs	r0, #2
   d77d6:	443c      	add	r4, r7
   d77d8:	e724      	b.n	d7624 <__udivmoddi4+0x10c>
   d77da:	bf00      	nop

000d77dc <__aeabi_idiv0>:
   d77dc:	4770      	bx	lr
   d77de:	bf00      	nop

000d77e0 <__cxa_atexit>:
   d77e0:	b510      	push	{r4, lr}
   d77e2:	4c05      	ldr	r4, [pc, #20]	; (d77f8 <__cxa_atexit+0x18>)
   d77e4:	4613      	mov	r3, r2
   d77e6:	b12c      	cbz	r4, d77f4 <__cxa_atexit+0x14>
   d77e8:	460a      	mov	r2, r1
   d77ea:	4601      	mov	r1, r0
   d77ec:	2002      	movs	r0, #2
   d77ee:	f3af 8000 	nop.w
   d77f2:	bd10      	pop	{r4, pc}
   d77f4:	4620      	mov	r0, r4
   d77f6:	e7fc      	b.n	d77f2 <__cxa_atexit+0x12>
   d77f8:	00000000 	.word	0x00000000

000d77fc <memcpy>:
   d77fc:	440a      	add	r2, r1
   d77fe:	4291      	cmp	r1, r2
   d7800:	f100 33ff 	add.w	r3, r0, #4294967295
   d7804:	d100      	bne.n	d7808 <memcpy+0xc>
   d7806:	4770      	bx	lr
   d7808:	b510      	push	{r4, lr}
   d780a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d780e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7812:	4291      	cmp	r1, r2
   d7814:	d1f9      	bne.n	d780a <memcpy+0xe>
   d7816:	bd10      	pop	{r4, pc}

000d7818 <memset>:
   d7818:	4402      	add	r2, r0
   d781a:	4603      	mov	r3, r0
   d781c:	4293      	cmp	r3, r2
   d781e:	d100      	bne.n	d7822 <memset+0xa>
   d7820:	4770      	bx	lr
   d7822:	f803 1b01 	strb.w	r1, [r3], #1
   d7826:	e7f9      	b.n	d781c <memset+0x4>

000d7828 <srand>:
   d7828:	b538      	push	{r3, r4, r5, lr}
   d782a:	4b0d      	ldr	r3, [pc, #52]	; (d7860 <srand+0x38>)
   d782c:	681d      	ldr	r5, [r3, #0]
   d782e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7830:	4604      	mov	r4, r0
   d7832:	b97b      	cbnz	r3, d7854 <srand+0x2c>
   d7834:	2018      	movs	r0, #24
   d7836:	f7fd fe39 	bl	d54ac <malloc>
   d783a:	4a0a      	ldr	r2, [pc, #40]	; (d7864 <srand+0x3c>)
   d783c:	4b0a      	ldr	r3, [pc, #40]	; (d7868 <srand+0x40>)
   d783e:	63a8      	str	r0, [r5, #56]	; 0x38
   d7840:	e9c0 2300 	strd	r2, r3, [r0]
   d7844:	4b09      	ldr	r3, [pc, #36]	; (d786c <srand+0x44>)
   d7846:	6083      	str	r3, [r0, #8]
   d7848:	230b      	movs	r3, #11
   d784a:	8183      	strh	r3, [r0, #12]
   d784c:	2201      	movs	r2, #1
   d784e:	2300      	movs	r3, #0
   d7850:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7854:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7856:	2200      	movs	r2, #0
   d7858:	611c      	str	r4, [r3, #16]
   d785a:	615a      	str	r2, [r3, #20]
   d785c:	bd38      	pop	{r3, r4, r5, pc}
   d785e:	bf00      	nop
   d7860:	2003e540 	.word	0x2003e540
   d7864:	abcd330e 	.word	0xabcd330e
   d7868:	e66d1234 	.word	0xe66d1234
   d786c:	0005deec 	.word	0x0005deec

000d7870 <strcmp>:
   d7870:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7874:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7878:	2a01      	cmp	r2, #1
   d787a:	bf28      	it	cs
   d787c:	429a      	cmpcs	r2, r3
   d787e:	d0f7      	beq.n	d7870 <strcmp>
   d7880:	1ad0      	subs	r0, r2, r3
   d7882:	4770      	bx	lr

000d7884 <strcpy>:
   d7884:	4603      	mov	r3, r0
   d7886:	f811 2b01 	ldrb.w	r2, [r1], #1
   d788a:	f803 2b01 	strb.w	r2, [r3], #1
   d788e:	2a00      	cmp	r2, #0
   d7890:	d1f9      	bne.n	d7886 <strcpy+0x2>
   d7892:	4770      	bx	lr

000d7894 <strlen>:
   d7894:	4603      	mov	r3, r0
   d7896:	f813 2b01 	ldrb.w	r2, [r3], #1
   d789a:	2a00      	cmp	r2, #0
   d789c:	d1fb      	bne.n	d7896 <strlen+0x2>
   d789e:	1a18      	subs	r0, r3, r0
   d78a0:	3801      	subs	r0, #1
   d78a2:	4770      	bx	lr

000d78a4 <strncpy>:
   d78a4:	b510      	push	{r4, lr}
   d78a6:	3901      	subs	r1, #1
   d78a8:	4603      	mov	r3, r0
   d78aa:	b132      	cbz	r2, d78ba <strncpy+0x16>
   d78ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d78b0:	f803 4b01 	strb.w	r4, [r3], #1
   d78b4:	3a01      	subs	r2, #1
   d78b6:	2c00      	cmp	r4, #0
   d78b8:	d1f7      	bne.n	d78aa <strncpy+0x6>
   d78ba:	441a      	add	r2, r3
   d78bc:	2100      	movs	r1, #0
   d78be:	4293      	cmp	r3, r2
   d78c0:	d100      	bne.n	d78c4 <strncpy+0x20>
   d78c2:	bd10      	pop	{r4, pc}
   d78c4:	f803 1b01 	strb.w	r1, [r3], #1
   d78c8:	e7f9      	b.n	d78be <strncpy+0x1a>

000d78ca <link_code_end>:
	...

000d78cc <dynalib_user>:
   d78cc:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d78dc:	0000 0000 3a58 0020 5909 203a 0900 3a5a     ....X: ..Y: ..Z:
   d78ec:	0020 6574 7473 6d2f 746f 6f69 616e 796c      .test/motionaly
   d78fc:	6973 0073 616c 2e62 6874 7765 6c63 632e     sis.lab.thewcl.c
   d790c:	6d6f 4c00 5349 4433 0048 0000               om.LIS3DH...

000d7918 <_ZTV15Adafruit_LIS3DH>:
	...
   d7920:	40b5 000d 41bd 000d 4245 000d 46d5 000d     .@...A..EB...F..
   d7930:	4249 000d 0400 514d 5454 0004 4d06 4951     IB....MQTT...MQI
   d7940:	6473 0370                                   sdp.

000d7944 <_ZTVN5spark13EthernetClassE>:
	...
   d794c:	555b 000d 5551 000d 5547 000d 553d 000d     [U..QU..GU..=U..
   d795c:	5531 000d 5525 000d 66e5 000d 66ed 000d     1U..%U...f...f..
   d796c:	5519 000d 5511 000d 5507 000d 54fd 000d     .U...U...U...T..
   d797c:	671d 000d                                   .g..

000d7980 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7980:	0800 1810 2820 3830                         .... (08

000d7988 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d7990:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   d79a0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d79b0 <_ZTV9IPAddress>:
	...
   d79b8:	5c6d 000d 5c5d 000d 5c5f 000d               m\..]\.._\..

000d79c4 <_ZTV9USBSerial>:
	...
   d79cc:	5d79 000d 5de1 000d 5db7 000d 5a45 000d     y]...]...]..EZ..
   d79dc:	5da9 000d 5d7b 000d 5d8b 000d 5ddb 000d     .]..{]...]...]..
   d79ec:	5d9b 000d 5d75 000d                         .]..u]..

000d79f4 <_ZTV11USARTSerial>:
	...
   d79fc:	5e7d 000d 5ee9 000d 5ec1 000d 5a45 000d     }^...^...^..EZ..
   d7a0c:	5e91 000d 5ead 000d 5e9f 000d 5ebb 000d     .^...^...^...^..
   d7a1c:	5e7f 000d 5e83 000d                         .^...^..

000d7a24 <_ZTV7TwoWire>:
	...
   d7a2c:	5f79 000d 5fc3 000d 5f9b 000d 5f7b 000d     y_..._..._..{_..
   d7a3c:	5fa3 000d 5fab 000d 5fb3 000d 5fbb 000d     ._..._..._..._..
   d7a4c:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   d7a5c:	2072 203d 6425 0000                         r = %d..

000d7a64 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7a6c:	60f7 000d 6119 000d 6533 000d 6127 000d     .`...a..3e..'a..
   d7a7c:	60f9 000d                                   .`..

000d7a80 <_ZTV9TCPClient>:
	...
   d7a88:	61a5 000d 61d9 000d 6075 000d 608f 000d     .a...a..u`...`..
   d7a98:	63c9 000d 623b 000d 620d 000d 60b9 000d     .c..;b...b...`..
   d7aa8:	62d3 000d 6539 000d 626f 000d 647d 000d     .b..9e..ob..}d..
   d7ab8:	60bb 000d 60ed 000d 60a1 000d 612b 000d     .`...`...`..+a..
   d7ac8:	61ed 000d                                   .a..

000d7acc <_ZTVN5spark9WiFiClassE>:
	...
   d7ad4:	6687 000d 667d 000d 6673 000d 6635 000d     .f..}f..sf..5f..
   d7ae4:	5ad7 000d 6667 000d 66e5 000d 66ed 000d     .Z..gf...f...f..
   d7af4:	665b 000d 6653 000d 6649 000d 663f 000d     [f..Sf..If..?f..
   d7b04:	671d 000d                                   .g..

000d7b08 <_ZTVN5spark12NetworkClassE>:
	...
   d7b10:	66a5 000d 66af 000d 66b9 000d 66c3 000d     .f...f...f...f..
   d7b20:	66cd 000d 66d9 000d 66e5 000d 66ed 000d     .f...f...f...f..
   d7b30:	66f5 000d 6701 000d 6709 000d 6713 000d     .f...g...g...g..
   d7b40:	671d 000d                                   .g..

000d7b44 <_ZSt7nothrow>:
	...

000d7b45 <_ZTSSt19_Sp_make_shared_tag>:
   d7b45:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d7b55:	6572 5f64 6174 0067 0000                     red_tag....

000d7b60 <_ZTISt19_Sp_make_shared_tag>:
   d7b60:	7ba0 000d 7b45 000d                         .{..E{..

000d7b68 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d7b68:	7c00 000d 7b74 000d 7c24 000d               .|..t{..$|..

000d7b74 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d7b74:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d7b84:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d7b94:	0045 0000                                   E...

000d7b98 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d7b98:	0000 0000 7b68 000d 69e9 000d 69fd 000d     ....h{...i...i..
   d7ba8:	6b91 000d 6b91 000d 6a67 000d 69a9 000d     .k...k..gj...i..
   d7bb8:	6a4f 000d 6a11 000d 69dd 000d               Oj...j...i..

000d7bc4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d7bc4:	7c00 000d 7bd0 000d 7b68 000d               .|...{..h{..

000d7bd0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d7bd0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d7be0:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d7bf0:	666e 456f 0000 0000                         nfoE....

000d7bf8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d7bf8:	0000 0000 7bc4 000d 6a91 000d 6aa5 000d     .....{...j...j..
   d7c08:	6b91 000d 6b91 000d 6a67 000d 69a9 000d     .k...k..gj...i..
   d7c18:	6b65 000d 6af1 000d 6ab9 000d               ek...j...j..

000d7c24 <_ZTISt9type_info>:
   d7c24:	7ba0 000d 7c2c 000d                         .{..,|..

000d7c2c <_ZTSSt9type_info>:
   d7c2c:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000d7c39 <link_const_variable_data_end>:
   d7c39:	00          	.byte	0x00
	...

000d7c3c <link_constructors_location>:
   d7c3c:	000d41cd 	.word	0x000d41cd
   d7c40:	000d5565 	.word	0x000d5565
   d7c44:	000d56c5 	.word	0x000d56c5
   d7c48:	000d5a1d 	.word	0x000d5a1d
   d7c4c:	000d5ae5 	.word	0x000d5ae5
   d7c50:	000d5af5 	.word	0x000d5af5
   d7c54:	000d5b1d 	.word	0x000d5b1d
   d7c58:	000d6691 	.word	0x000d6691
   d7c5c:	000d67fd 	.word	0x000d67fd
